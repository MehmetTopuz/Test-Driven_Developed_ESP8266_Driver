digraph "TestMemoryAllocator"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{TestMemoryAllocator\n|# const char * name_\l# const char * alloc\l_name_\l# const char * free_name_\l# bool hasBeenDestroyed_\l|+  TestMemoryAllocator\l(const char *name_str\l=\"generic\", const char\l *alloc_name_str=\"alloc\",\l const char *free_name_str\l=\"free\")\l+ virtual ~TestMemoryAllocator()\l+ bool hasBeenDestroyed()\l+ virtual char * alloc\l_memory(size_t size,\l const char *file, size\l_t line)\l+ virtual void free_memory\l(char *memory, size_t size,\l const char *file, size_t line)\l+ virtual const char\l * name() const\l+ virtual const char\l * alloc_name() const\l+ virtual const char\l * free_name() const\l+ virtual bool isOfEqualType\l(TestMemoryAllocator *allocator)\l+ virtual char * allocMemory\lLeakNode(size_t size)\l+ virtual void freeMemoryLeak\lNode(char *memory)\l+ virtual TestMemoryAllocator\l * actualAllocator()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{AccountingTestMemoryAllocator\n|- MemoryAccountant &\l accountant_\l- TestMemoryAllocator\l * originalAllocator_\l- AccountingTestMemoryAllocator\lMemoryNode * head_\l|+  AccountingTestMemoryAllocator\l(MemoryAccountant &accountant,\l TestMemoryAllocator *originalAllocator)\l+ virtual ~AccountingTestMemory\lAllocator() _destructor_override\l+ virtual char * alloc\l_memory(size_t size,\l const char *file, size\l_t line) _override\l+ virtual void free_memory\l(char *memory, size_t size,\l const char *file, size_t\l line) _override\l+ virtual TestMemoryAllocator\l * actualAllocator() _override\l+ TestMemoryAllocator\l * originalAllocator()\l+ virtual const char\l * alloc_name() const\l _override\l+ virtual const char\l * free_name() const\l _override\l- void addMemoryToMemoryTracking\lToKeepTrackOfSize(char *memory,\l size_t size)\l- size_t removeMemoryFromTracking\lAndReturnAllocatedSize(char\l *memory)\l- size_t removeNextNodeAnd\lReturnSize(AccountingTestMemory\lAllocatorMemoryNode *node)\l- size_t removeHeadAndReturn\lSize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classAccountingTestMemoryAllocator.html",tooltip=" "];
  Node1 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{CrashOnAllocationAllocator\n|- unsigned allocationToCrashOn_\l|+  CrashOnAllocationAllocator()\l+ virtual ~CrashOnAllocation\lAllocator() _destructor\l_override\l+ virtual void setNumberTo\lCrashOn(unsigned allocationTo\lCrashOn)\l+ virtual char * alloc\l_memory(size_t size,\l const char *file, size\l_t line) _override\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classCrashOnAllocationAllocator.html",tooltip=" "];
  Node1 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{FailableMemoryAllocator\n|# LocationToFailAllocNode\l * head_\l# int currentAllocNumber_\l|+  FailableMemoryAllocator\l(const char *name_str=\"failable\l alloc\", const char *alloc_name\l_str=\"alloc\", const char *free\l_name_str=\"free\")\l+ virtual ~FailableMemoryAllocator\l() _destructor_override\l+ virtual char * alloc\l_memory(size_t size,\l const char *file, size\l_t line) _override\l+ virtual char * allocMemory\lLeakNode(size_t size) \l_override\l+ virtual void failAllocNumber\l(int number)\l+ virtual void failNthAlloc\lAt(int allocationNumber,\l const char *file, size\l_t line)\l+ virtual void checkAllFailed\lAllocsWereDone()\l+ virtual void clearFailed\lAllocs()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classFailableMemoryAllocator.html",tooltip=" "];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{MemoryLeakAllocator\n|- TestMemoryAllocator\l * originalAllocator_\l|+  MemoryLeakAllocator\l(TestMemoryAllocator\l *originalAllocator)\l+ virtual ~MemoryLeakAllocator\l() _destructor_override\l+ virtual char * alloc\l_memory(size_t size,\l const char *file, size\l_t line) _override\l+ virtual void free_memory\l(char *memory, size_t size,\l const char *file, size_t\l line) _override\l+ virtual const char\l * name() const _override\l+ virtual const char\l * alloc_name() const\l _override\l+ virtual const char\l * free_name() const\l _override\l+ virtual TestMemoryAllocator\l * actualAllocator() _override\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMemoryLeakAllocator.html",tooltip=" "];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{MemoryReportAllocator\n|# TestResult * result_\l# TestMemoryAllocator\l * realAllocator_\l# MemoryReportFormatter\l * formatter_\l|+  MemoryReportAllocator()\l+ virtual ~MemoryReportAllocator\l() _destructor_override\l+ virtual void setFormatter\l(MemoryReportFormatter\l *formatter)\l+ virtual void setTestResult\l(TestResult *result)\l+ virtual void setRealAllocator\l(TestMemoryAllocator *allocator)\l+ virtual TestMemoryAllocator\l * getRealAllocator()\l+ virtual char * alloc\l_memory(size_t size,\l const char *file, size\l_t line) _override\l+ virtual void free_memory\l(char *memory, size_t size,\l const char *file, size_t\l line) _override\l+ virtual const char\l * name() const _override\l+ virtual const char\l * alloc_name() const\l _override\l+ virtual const char\l * free_name() const\l _override\l+ virtual TestMemoryAllocator\l * actualAllocator() _override\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMemoryReportAllocator.html",tooltip=" "];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 [label="{NullUnknownAllocator\n||+  NullUnknownAllocator()\l+ virtual ~NullUnknownAllocator\l() _destructor_override\l+ virtual char * alloc\l_memory(size_t size,\l const char *file, size\l_t line) _override\l+ virtual void free_memory\l(char *memory, size_t size,\l const char *file, size_t\l line) _override\l+ static TestMemoryAllocator\l * defaultAllocator()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classNullUnknownAllocator.html",tooltip=" "];
  Node1 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 [label="{SimpleStringCacheAllocator\n|- SimpleStringInternalCache\l & cache_\l- TestMemoryAllocator\l * originalAllocator_\l|+  SimpleStringCacheAllocator\l(SimpleStringInternalCache\l &cache, TestMemoryAllocator\l *previousAllocator)\l+ virtual ~SimpleStringCache\lAllocator() _destructor\l_override\l+ virtual char * alloc\l_memory(size_t size,\l const char *file, size\l_t line) _override\l+ virtual void free_memory\l(char *memory, size_t size,\l const char *file, size_t\l line) _override\l+ virtual const char\l * name() const _override\l+ virtual const char\l * alloc_name() const\l _override\l+ virtual const char\l * free_name() const\l _override\l+ virtual TestMemoryAllocator\l * actualAllocator() _override\l+ TestMemoryAllocator\l * originalAllocator()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classSimpleStringCacheAllocator.html",tooltip=" "];
}
