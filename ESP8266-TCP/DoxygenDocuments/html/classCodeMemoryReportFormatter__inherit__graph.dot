digraph "CodeMemoryReportFormatter"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{CodeMemoryReportFormatter\n|- CodeReportingAllocationNode\l * codeReportingList_\l- TestMemoryAllocator\l * internalAllocator_\l|+  CodeMemoryReportFormatter\l(TestMemoryAllocator *internalAllocator)\l+ virtual ~CodeMemoryReport\lFormatter() _destructor\l_override\l+ virtual void report\l_testgroup_start(TestResult\l *result, UtestShell &test)\l _override\l+ virtual void report\l_testgroup_end(TestResult\l *, UtestShell &) _override\l+ virtual void report\l_test_start(TestResult\l *result, UtestShell &test)\l _override\l+ virtual void report\l_test_end(TestResult\l *result, UtestShell\l &test) _override\l+ virtual void report\l_alloc_memory(TestResult\l *result, TestMemoryAllocator\l *allocator, size_t size, char\l *memory, const char *file, size\l_t line) _override\l+ virtual void report\l_free_memory(TestResult\l *result, TestMemoryAllocator\l *allocator, char *memory,\l const char *file, size_t line)\l _override\l- void addNodeToList\l(const char *variableName,\l void *memory, CodeReportingAllocation\lNode *next)\l- CodeReportingAllocationNode\l * findNode(void *memory)\l- bool variableExists\l(const SimpleString\l &variableName)\l- void clearReporting()\l- bool isNewAllocator\l(TestMemoryAllocator\l *allocator)\l- SimpleString createVariable\lNameFromFileLineInfo(const\l char *file, size_t line)\l- SimpleString getAllocation\lString(TestMemoryAllocator\l *allocator, const SimpleString\l &variableName, size_t size)\l- SimpleString getDeallocation\lString(TestMemoryAllocator\l *allocator, const SimpleString\l &variableName, const char *file,\l size_t line)\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{MemoryReportFormatter\n||+ virtual ~MemoryReportFormatter()\l+ virtual void report\l_testgroup_start(TestResult\l *result, UtestShell &test)=0\l+ virtual void report\l_testgroup_end(TestResult\l *result, UtestShell &test)=0\l+ virtual void report\l_test_start(TestResult\l *result, UtestShell &test)=0\l+ virtual void report\l_test_end(TestResult\l *result, UtestShell\l &test)=0\l+ virtual void report\l_alloc_memory(TestResult\l *result, TestMemoryAllocator\l *allocator, size_t size, char\l *memory, const char *file, size\l_t line)=0\l+ virtual void report\l_free_memory(TestResult\l *result, TestMemoryAllocator\l *allocator, char *memory,\l const char *file, size_t line)=0\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMemoryReportFormatter.html",tooltip=" "];
}
