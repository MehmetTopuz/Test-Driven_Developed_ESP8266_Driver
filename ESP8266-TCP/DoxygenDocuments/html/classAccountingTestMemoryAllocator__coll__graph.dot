digraph "AccountingTestMemoryAllocator"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{AccountingTestMemoryAllocator\n|- AccountingTestMemoryAllocator\lMemoryNode * head_\l|+  AccountingTestMemoryAllocator\l(MemoryAccountant &accountant,\l TestMemoryAllocator *originalAllocator)\l+ virtual ~AccountingTestMemory\lAllocator() _destructor_override\l+ virtual char * alloc\l_memory(size_t size,\l const char *file, size\l_t line) _override\l+ virtual void free_memory\l(char *memory, size_t size,\l const char *file, size_t\l line) _override\l+ virtual TestMemoryAllocator\l * actualAllocator() _override\l+ TestMemoryAllocator\l * originalAllocator()\l+ virtual const char\l * alloc_name() const\l _override\l+ virtual const char\l * free_name() const\l _override\l- void addMemoryToMemoryTracking\lToKeepTrackOfSize(char *memory,\l size_t size)\l- size_t removeMemoryFromTracking\lAndReturnAllocatedSize(char\l *memory)\l- size_t removeNextNodeAnd\lReturnSize(AccountingTestMemory\lAllocatorMemoryNode *node)\l- size_t removeHeadAndReturn\lSize()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{TestMemoryAllocator\n|# const char * name_\l# const char * alloc\l_name_\l# const char * free_name_\l# bool hasBeenDestroyed_\l|+  TestMemoryAllocator\l(const char *name_str\l=\"generic\", const char\l *alloc_name_str=\"alloc\",\l const char *free_name_str\l=\"free\")\l+ virtual ~TestMemoryAllocator()\l+ bool hasBeenDestroyed()\l+ virtual char * alloc\l_memory(size_t size,\l const char *file, size\l_t line)\l+ virtual void free_memory\l(char *memory, size_t size,\l const char *file, size_t line)\l+ virtual const char\l * name() const\l+ virtual const char\l * alloc_name() const\l+ virtual const char\l * free_name() const\l+ virtual bool isOfEqualType\l(TestMemoryAllocator *allocator)\l+ virtual char * allocMemory\lLeakNode(size_t size)\l+ virtual void freeMemoryLeak\lNode(char *memory)\l+ virtual TestMemoryAllocator\l * actualAllocator()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classTestMemoryAllocator.html",tooltip=" "];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -accountant_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{MemoryAccountant\n|- MemoryAccountantAllocation\lNode * head_\l- bool useCacheSizes_\l|+  MemoryAccountant()\l+  ~MemoryAccountant()\l+ void useCacheSizes\l(size_t sizes[], size\l_t length)\l+ void clear()\l+ void alloc(size_t size)\l+ void dealloc(size_t\l size)\l+ size_t totalAllocationsOf\lSize(size_t size) const\l+ size_t totalDeallocations\lOfSize(size_t size) const\l+ size_t maximumAllocation\lAtATimeOfSize(size_t size)\l const\l+ size_t totalAllocations\l() const\l+ size_t totalDeallocations\l() const\l+ SimpleString report\l() const\l+ void setAllocator(TestMemory\lAllocator *allocator)\l- MemoryAccountantAllocation\lNode * findOrCreateNodeOfSize\l(size_t size)\l- MemoryAccountantAllocation\lNode * findNodeOfSize(size\l_t size) const\l- MemoryAccountantAllocation\lNode * createNewAccountantAllocation\lNode(size_t size, MemoryAccountantAllocation\lNode *next) const\l- void destroyAccountantAllocation\lNode(MemoryAccountantAllocationNode\l *node) const\l- void createCacheSizeNodes\l(size_t sizes[], size_t\l length)\l- SimpleString reportNoAllocations\l() const\l- SimpleString reportTitle\l() const\l- SimpleString reportHeader\l() const\l- SimpleString reportFooter\l() const\l- SimpleString stringSize\l(size_t size) const\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMemoryAccountant.html",tooltip=" "];
  Node2 -> Node3 [color="grey25",fontsize="10",style="solid",label=" -allocator_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -originalAllocator_" ,arrowhead="odiamond",fontname="Helvetica"];
}
