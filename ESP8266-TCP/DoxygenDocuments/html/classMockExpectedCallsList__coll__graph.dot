digraph "MockExpectedCallsList"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{MockExpectedCallsList\n||+  MockExpectedCallsList()\l+ virtual ~MockExpectedCalls\lList()\l+ virtual void deleteAllExpectations\lAndClearList()\l+ virtual unsigned int\l size() const\l+ virtual unsigned int\l amountOfActualCallsFulfilled\lFor(const SimpleString &name) const\l+ virtual unsigned int\l amountOfUnfulfilledExpectations\l() const\l+ virtual bool hasUnfulfilled\lExpectations() const\l+ virtual bool hasFinalized\lMatchingExpectations() const\l+ virtual bool hasUnmatching\lExpectationsBecauseOfMissingParameters\l() const\l+ virtual bool hasExpectation\lWithName(const SimpleString\l &name) const\land 24 more...\l# virtual void pruneEmptyNode\lFromList()\l-  MockExpectedCallsList\l(const MockExpectedCallsList &)\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -head_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 [label="{MockExpectedCallsList\l::MockExpectedCallsListNode\n||+  MockExpectedCallsListNode\l(MockCheckedExpectedCall\l *expectedCall)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMockExpectedCallsList_1_1MockExpectedCallsListNode.html",tooltip=" "];
  Node3 -> Node2 [color="grey25",fontsize="10",style="solid",label=" +expectedCall_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{MockCheckedExpectedCall\n|- bool ignoreOtherParameters_\l- bool isActualCallMatchFinalized_\l- unsigned int initialExpected\lCallOrder_\l- unsigned int finalExpected\lCallOrder_\l- bool outOfOrder_\l- void * objectPtr_\l- bool isSpecificObjectExpected_\l- bool wasPassedToObject_\l- unsigned int actualCalls_\l- unsigned int expectedCalls_\l|+  MockCheckedExpectedCall()\l+  MockCheckedExpectedCall\l(unsigned int numCalls)\l+ virtual ~MockCheckedExpected\lCall() _destructor_override\l+ virtual MockExpectedCall\l & withName(const SimpleString\l &name) _override\l+ virtual MockExpectedCall\l & withCallOrder(unsigned\l int callOrder) _override\l+ virtual MockExpectedCall\l & withCallOrder(unsigned\l int initialCallOrder, unsigned\l int finalCallOrder) _override\l+ virtual MockExpectedCall\l & withBoolParameter(const\l SimpleString &name, bool\l value) _override\l+ virtual MockExpectedCall\l & withIntParameter(const\l SimpleString &name, int\l value) _override\l+ virtual MockExpectedCall\l & withUnsignedIntParameter\l(const SimpleString &name,\l unsigned int value) _override\l+ virtual MockExpectedCall\l & withLongIntParameter\l(const SimpleString &name,\l long int value) _override\land 54 more...\l# void setName(const\l SimpleString &name)\l# SimpleString getName\l() const\l- MockExpectedFunctionParameter\l * item(MockNamedValueListNode *node)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMockCheckedExpectedCall.html",tooltip=" "];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{MockExpectedCall\n||+  MockExpectedCall()\l+ virtual ~MockExpectedCall()\l+ virtual MockExpectedCall\l & withName(const SimpleString\l &name)=0\l+ virtual MockExpectedCall\l & withCallOrder(unsigned int)=0\l+ virtual MockExpectedCall\l & withCallOrder(unsigned\l int, unsigned int)=0\l+ MockExpectedCall &\l withParameter(const\l SimpleString &name,\l bool value)\l+ MockExpectedCall &\l withParameter(const\l SimpleString &name,\l int value)\l+ MockExpectedCall &\l withParameter(const\l SimpleString &name,\l unsigned int value)\l+ MockExpectedCall &\l withParameter(const\l SimpleString &name,\l long int value)\l+ MockExpectedCall &\l withParameter(const\l SimpleString &name,\l unsigned long int value)\land 41 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMockExpectedCall.html",tooltip=" "];
  Node5 -> Node3 [color="grey25",fontsize="10",style="solid",label=" -functionName_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{SimpleString\n|+ static const size_t npos\l- char * buffer_\l- size_t bufferSize_\l|+  SimpleString(const\l char *value=\"\")\l+  SimpleString(const\l char *value, size_t\l repeatCount)\l+  SimpleString(const\l SimpleString &other)\l+  ~SimpleString()\l+ SimpleString & operator\l=(const SimpleString &other)\l+ SimpleString operator\l+(const SimpleString\l &) const\l+ SimpleString & operator\l+=(const SimpleString &)\l+ SimpleString & operator\l+=(const char *)\l+ char at(size_t pos)\l const\l+ size_t find(char ch)\l const\land 19 more...\l+ static void padStringsTo\lSameLength(SimpleString\l &str1, SimpleString &str2,\l char ch)\l+ static TestMemoryAllocator\l * getStringAllocator()\l+ static void setStringAllocator\l(TestMemoryAllocator *allocator)\l+ static int AtoI(const\l char *str)\l+ static unsigned AtoU\l(const char *str)\l+ static int StrCmp(const\l char *s1, const char *s2)\l+ static size_t StrLen\l(const char *)\l+ static int StrNCmp\l(const char *s1, const\l char *s2, size_t n)\l+ static char * StrNCpy\l(char *s1, const char\l *s2, size_t n)\l+ static const char *\l StrStr(const char *s1,\l const char *s2)\l+ static char ToLower\l(char ch)\l+ static int MemCmp(const\l void *s1, const void\l *s2, size_t n)\l+ static char * allocString\lBuffer(size_t size, const\l char *file, size_t line)\l+ static void deallocString\lBuffer(char *str, size\l_t size, const char *file,\l size_t line)\l- const char * getBuffer\l() const\l- void deallocateInternalBuffer()\l- void setInternalBufferAs\lEmptyString()\l- void setInternalBufferTo\lNewBuffer(size_t bufferSize)\l- void setInternalBufferTo\l(char *buffer, size_t bufferSize)\l- void copyBufferToNewInternal\lBuffer(const char *otherBuffer)\l- void copyBufferToNewInternal\lBuffer(const char *otherBuffer,\l size_t bufferSize)\l- void copyBufferToNewInternal\lBuffer(const SimpleString\l &otherBuffer)\l- char * getEmptyString\l() const\l- size_t getPrintableSize\l() const\l- static char * copyToNewBuffer\l(const char *bufferToCopy,\l size_t bufferSize)\l- static bool isDigit\l(char ch)\l- static bool isSpace\l(char ch)\l- static bool isUpper\l(char ch)\l- static bool isControl\l(char ch)\l- static bool isControlWith\lShortEscapeSequence(char ch)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classSimpleString.html",tooltip=" "];
  Node6 -> Node5 [color="grey25",fontsize="10",style="solid",label=" -stringAllocator_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{TestMemoryAllocator\n|# const char * name_\l# const char * alloc\l_name_\l# const char * free_name_\l# bool hasBeenDestroyed_\l|+  TestMemoryAllocator\l(const char *name_str\l=\"generic\", const char\l *alloc_name_str=\"alloc\",\l const char *free_name_str\l=\"free\")\l+ virtual ~TestMemoryAllocator()\l+ bool hasBeenDestroyed()\l+ virtual char * alloc\l_memory(size_t size,\l const char *file, size\l_t line)\l+ virtual void free_memory\l(char *memory, size_t size,\l const char *file, size_t line)\l+ virtual const char\l * name() const\l+ virtual const char\l * alloc_name() const\l+ virtual const char\l * free_name() const\l+ virtual bool isOfEqualType\l(TestMemoryAllocator *allocator)\l+ virtual char * allocMemory\lLeakNode(size_t size)\l+ virtual void freeMemoryLeak\lNode(char *memory)\l+ virtual TestMemoryAllocator\l * actualAllocator()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classTestMemoryAllocator.html",tooltip=" "];
  Node7 -> Node3 [color="grey25",fontsize="10",style="solid",label=" -inputParameters_\n-outputParameters_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{MockNamedValueList\n||+  MockNamedValueList()\l+ MockNamedValueListNode\l * begin()\l+ void add(MockNamedValue\l *newValue)\l+ void clear()\l+ MockNamedValue * getValue\lByName(const SimpleString &name)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMockNamedValueList.html",tooltip=" "];
  Node8 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -head_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{MockNamedValueListNode\n||+  MockNamedValueListNode\l(MockNamedValue *newValue)\l+ SimpleString getName\l() const\l+ SimpleString getType\l() const\l+ MockNamedValueListNode\l * next()\l+ MockNamedValue * item()\l+ void destroy()\l+ void setNext(MockNamedValue\lListNode *node)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMockNamedValueListNode.html",tooltip=" "];
  Node9 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -data_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 [label="{MockNamedValue\n|+ virtual void(*)() getFunction\lPointerValue\l+ bool boolValue_\l+ int intValue_\l+ unsigned int unsignedInt\lValue_\l+ long int longIntValue_\l+ unsigned long int unsigned\lLongIntValue_\l+ char longLongPlaceholder_\l+ double value\l+ double tolerance\l+ struct MockNamedValue\l::@70::@71 doubleValue_\land 8 more...\l+ static const double\l defaultDoubleTolerance\l- union MockNamedValue\l::@70 value_\l- size_t size_\l|+  MockNamedValue(const\l SimpleString &name)\l+ virtual ~MockNamedValue()\l+ virtual void setValue\l(bool value)\l+ virtual void setValue\l(int value)\l+ virtual void setValue\l(unsigned int value)\l+ virtual void setValue\l(long int value)\l+ virtual void setValue\l(unsigned long int value)\l+ virtual void setValue\l(cpputest_longlong value)\l+ virtual void setValue\l(cpputest_ulonglong value)\l+ virtual void setValue\l(double value)\land 33 more...\l+ static void setDefaultComparators\lAndCopiersRepository(MockNamedValue\lComparatorsAndCopiersRepository\l *repository)\l+ static MockNamedValueComparators\lAndCopiersRepository * getDefaultComparators\lAndCopiersRepository()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMockNamedValue.html",tooltip=" "];
  Node5 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -name_\n-type_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -comparator_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 [label="{MockNamedValueComparator\n||+  MockNamedValueComparator()\l+ virtual ~MockNamedValueComparator()\l+ virtual bool isEqual\l(const void *object1,\l const void *object2)=0\l+ virtual SimpleString\l valueToString(const\l void *object)=0\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMockNamedValueComparator.html",tooltip=" "];
  Node11 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -copier_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 [label="{MockNamedValueCopier\n||+  MockNamedValueCopier()\l+ virtual ~MockNamedValueCopier()\l+ virtual void copy(void\l *out, const void *in)=0\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMockNamedValueCopier.html",tooltip=" "];
  Node12 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -defaultRepository_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node12 [label="{MockNamedValueComparators\lAndCopiersRepository\n|- MockNamedValueComparators\lAndCopiersRepositoryNode\l * head_\l|+  MockNamedValueComparators\lAndCopiersRepository()\l+ virtual ~MockNamedValueComparators\lAndCopiersRepository()\l+ virtual void installComparator\l(const SimpleString &name,\l MockNamedValueComparator &comparator)\l+ virtual void installCopier\l(const SimpleString &name,\l MockNamedValueCopier &copier)\l+ virtual void installComparators\lAndCopiers(const MockNamedValueComparators\lAndCopiersRepository &repository)\l+ virtual MockNamedValueComparator\l * getComparatorForType(const\l SimpleString &name)\l+ virtual MockNamedValueCopier\l * getCopierForType(const\l SimpleString &name)\l+ void clear()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMockNamedValueComparatorsAndCopiersRepository.html",tooltip=" "];
  Node8 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -next_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 -> Node3 [color="grey25",fontsize="10",style="solid",label=" -returnValue_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 -> Node2 [color="grey25",fontsize="10",style="solid",label=" +next_" ,arrowhead="odiamond",fontname="Helvetica"];
}
