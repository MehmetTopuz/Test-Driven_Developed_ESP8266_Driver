digraph "GTestShell"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{GTestShell\n|- ::testing::TestInfo\l * testinfo_\l- GTestShell * next_\l- GTestFlagsThatAllocateMemory\l * flags_\l|+  GTestShell(::testing\l::TestInfo *testinfo,\l GTestShell *next, GTestFlags\lThatAllocateMemory *flags)\l+ virtual Utest * createTest\l() _override\l+ GTestShell * nextGTest()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{UtestShell\n|- const char * group_\l- const char * name_\l- const char * file_\l- size_t lineNumber_\l- UtestShell * next_\l- bool isRunAsSeperateProcess_\l- bool hasFailed_\l- static UtestShell *\l currentTest_\l- static TestResult *\l testResult_\l- static const TestTerminator\l * currentTestTerminator_\l|+  UtestShell(const char\l *groupName, const char\l *testName, const char *fileName,\l size_t lineNumber)\l+ virtual ~UtestShell()\l+ virtual UtestShell\l * addTest(UtestShell\l *test)\l+ virtual UtestShell\l * getNext() const\l+ virtual size_t countTests()\l+ bool shouldRun(const\l TestFilter *groupFilters,\l const TestFilter *nameFilters) const\l+ const SimpleString\l getName() const\l+ const SimpleString\l getGroup() const\l+ virtual SimpleString\l getFormattedName() const\l+ const SimpleString\l getFile() const\land 40 more...\l+ static UtestShell *\l getCurrent()\l+ static const TestTerminator\l & getCurrentTestTerminator()\l+ static void setCrashOnFail()\l+ static void restoreDefault\lTestTerminator()\l+ static void crash()\l+ static void setCrashMethod\l(void(*crashme)())\l+ static void resetCrashMethod()\l#  UtestShell()\l#  UtestShell(const char\l *groupName, const char\l *testName, const char *fileName,\l size_t lineNumber, UtestShell\l *nextTest)\l# virtual SimpleString\l getMacroName() const\l# TestResult * getTestResult()\l- void setTestResult\l(TestResult *result)\l- void setCurrentTest\l(UtestShell *test)\l- bool match(const char\l *target, const TestFilter\l *filters) const\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classUtestShell.html",tooltip=" "];
}
