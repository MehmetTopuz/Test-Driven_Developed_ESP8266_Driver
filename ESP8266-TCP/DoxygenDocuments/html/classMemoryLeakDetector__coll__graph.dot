digraph "MemoryLeakDetector"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{MemoryLeakDetector\n|- MemLeakPeriod current\l_period_\l- bool doAllocationTypeChecking_\l- unsigned allocationSequence\lNumber_\l- unsigned char current\l_allocation_stage_\l|+  MemoryLeakDetector\l(MemoryLeakFailure *reporter)\l+ virtual ~MemoryLeakDetector()\l+ void enable()\l+ void disable()\l+ void disableAllocationType\lChecking()\l+ void enableAllocationType\lChecking()\l+ void startChecking()\l+ void stopChecking()\l+ unsigned char getCurrent\lAllocationStage() const\l+ void increaseAllocationStage()\land 15 more...\l- char * allocateMemoryWith\lAccountingInformation(TestMemory\lAllocator *allocator, size_t\l size, const char *file, size\l_t line, bool allocatNodesSeperately)\l- char * reallocateMemoryWith\lAccountingInformation(TestMemory\lAllocator *allocator, char *memory,\l size_t size, const char *file, size\l_t line, bool allocatNodesSeperately)\l- MemoryLeakDetectorNode\l * createMemoryLeakAccounting\lInformation(TestMemoryAllocator\l *allocator, size_t size, char\l *memory, bool allocatNodesSeperately)\l- bool validMemoryCorruption\lInformation(char *memory)\l- bool matchingAllocation\l(TestMemoryAllocator *alloc\l_allocator, TestMemoryAllocator\l *free_allocator)\l- void storeLeakInformation\l(MemoryLeakDetectorNode\l *node, char *new_memory,\l size_t size, TestMemoryAllocator\l *allocator, const char *file,\l size_t line)\l- void ConstructMemoryLeak\lReport(MemLeakPeriod period)\l- size_t sizeOfMemoryWithCorruption\lInfo(size_t size)\l- MemoryLeakDetectorNode\l * getNodeFromMemoryPointer\l(char *memory, size_t size)\l- char * reallocateMemoryAnd\lLeakInformation(TestMemoryAllocator\l *allocator, char *memory, size\l_t size, const char *file, size\l_t line, bool allocatNodesSeperately)\l- void addMemoryCorruption\lInformation(char *memory)\l- void checkForCorruption\l(MemoryLeakDetectorNode\l *node, const char *file,\l size_t line, TestMemoryAllocator\l *allocator, bool allocateNodesSeperately)\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -reporter_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 [label="{MemoryLeakFailure\n||+ virtual ~MemoryLeakFailure()\l+ virtual void fail(char\l *fail_string)=0\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMemoryLeakFailure.html",tooltip=" "];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -outputBuffer_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{MemoryLeakOutputStringBuffer\n|- size_t total_leaks_\l- bool giveWarningOnUsingMalloc_\l|+  MemoryLeakOutputStringBuffer()\l+ void clear()\l+ void startMemoryLeakReporting()\l+ void stopMemoryLeakReporting()\l+ void reportMemoryLeak\l(MemoryLeakDetectorNode\l *leak)\l+ void reportDeallocateNon\lAllocatedMemoryFailure\l(const char *freeFile,\l size_t freeLine, TestMemoryAllocator\l *freeAllocator, MemoryLeakFailure\l *reporter)\l+ void reportMemoryCorruption\lFailure(MemoryLeakDetectorNode\l *node, const char *freeFile,\l size_t freeLineNumber, TestMemoryAllocator\l *freeAllocator, MemoryLeakFailure *reporter)\l+ void reportAllocationDeallocation\lMismatchFailure(MemoryLeakDetectorNode\l *node, const char *freeFile, size\l_t freeLineNumber, TestMemoryAllocator\l *freeAllocator, MemoryLeakFailure *reporter)\l+ char * toString()\l- void addAllocationLocation\l(const char *allocationFile,\l size_t allocationLineNumber,\l size_t allocationSize, TestMemoryAllocator\l *allocator)\l- void addDeallocationLocation\l(const char *freeFile, size\l_t freeLineNumber, TestMemoryAllocator\l *allocator)\l- void addMemoryLeakHeader()\l- void addMemoryLeakFooter\l(size_t totalAmountOfLeaks)\l- void addWarningForUsingMalloc()\l- void addNoMemoryLeaksMessage()\l- void addErrorMessageForToo\lMuchLeaks()\l- void reportFailure\l(const char *message,\l const char *allocFile,\l size_t allocLine, size\l_t allocSize, TestMemoryAllocator\l *allocAllocator, const char *freeFile,\l size_t freeLine, TestMemoryAllocator\l *freeAllocator, MemoryLeakFailure *reporter)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMemoryLeakOutputStringBuffer.html",tooltip=" "];
  Node4 -> Node3 [color="grey25",fontsize="10",style="solid",label=" -outputBuffer_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{SimpleStringBuffer\n|- char buffer_\l- size_t positions_filled_\l- size_t write_limit_\l|+  SimpleStringBuffer()\l+ void clear()\l+ void add(const char\l *format,...) _check\l_format_(printf\l+ void void addMemoryDump\l(const void *memory, size\l_t memorySize)\l+ char * toString()\l+ void setWriteLimit\l(size_t write_limit)\l+ void resetWriteLimit()\l+ bool reachedItsCapacity()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structSimpleStringBuffer.html",tooltip=" "];
  Node5 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -memoryTable_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{MemoryLeakDetectorTable\n||+ void clearAllAccounting\l(MemLeakPeriod period)\l+ void addNewNode(MemoryLeak\lDetectorNode *node)\l+ MemoryLeakDetectorNode\l * retrieveNode(char *memory)\l+ MemoryLeakDetectorNode\l * removeNode(char *memory)\l+ size_t getTotalLeaks\l(MemLeakPeriod period)\l+ MemoryLeakDetectorNode\l * getFirstLeak(MemLeakPeriod\l period)\l+ MemoryLeakDetectorNode\l * getFirstLeakForAllocation\lStage(unsigned char allocation_stage)\l+ MemoryLeakDetectorNode\l * getNextLeak(MemoryLeakDetector\lNode *leak, MemLeakPeriod period)\l+ MemoryLeakDetectorNode\l * getNextLeakForAllocationStage\l(MemoryLeakDetectorNode *leak,\l unsigned char allocation_stage)\l- unsigned long hash\l(char *memory)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structMemoryLeakDetectorTable.html",tooltip=" "];
  Node6 -> Node5 [color="grey25",fontsize="10",style="solid",label=" -table_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{MemoryLeakDetectorList\n||+  MemoryLeakDetectorList()\l+ void addNewNode(MemoryLeak\lDetectorNode *node)\l+ MemoryLeakDetectorNode\l * retrieveNode(char *memory)\l+ MemoryLeakDetectorNode\l * removeNode(char *memory)\l+ MemoryLeakDetectorNode\l * getFirstLeak(MemLeakPeriod\l period)\l+ MemoryLeakDetectorNode\l * getFirstLeakForAllocation\lStage(unsigned char allocation_stage)\l+ MemoryLeakDetectorNode\l * getNextLeak(MemoryLeakDetector\lNode *node, MemLeakPeriod period)\l+ MemoryLeakDetectorNode\l * getNextLeakForAllocationStage\l(MemoryLeakDetectorNode *node,\l unsigned char allocation_stage)\l+ MemoryLeakDetectorNode\l * getLeakFrom(MemoryLeakDetector\lNode *node, MemLeakPeriod period)\l+ MemoryLeakDetectorNode\l * getLeakForAllocationStage\lFrom(MemoryLeakDetectorNode\l *node, unsigned char allocation_stage)\l+ size_t getTotalLeaks\l(MemLeakPeriod period)\l+ void clearAllAccounting\l(MemLeakPeriod period)\l+ bool isInPeriod(MemoryLeak\lDetectorNode *node, MemLeakPeriod\l period)\l+ bool isInAllocationStage\l(MemoryLeakDetectorNode\l *node, unsigned char allocation_stage)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structMemoryLeakDetectorList.html",tooltip=" "];
  Node7 -> Node6 [color="grey25",fontsize="10",style="solid",label=" -head_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{MemoryLeakDetectorNode\n|+ size_t size_\l+ unsigned number_\l+ char * memory_\l+ const char * file_\l+ size_t line_\l+ MemLeakPeriod period_\l+ unsigned char allocation\l_stage_\l|+  MemoryLeakDetectorNode()\l+ void init(char *memory,\l unsigned number, size\l_t size, TestMemoryAllocator\l *allocator, MemLeakPeriod\l period, unsigned char allocation\l_stage, const char *file, size_t line)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structMemoryLeakDetectorNode.html",tooltip=" "];
  Node8 -> Node7 [color="grey25",fontsize="10",style="solid",label=" +allocator_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{TestMemoryAllocator\n|# const char * name_\l# const char * alloc\l_name_\l# const char * free_name_\l# bool hasBeenDestroyed_\l|+  TestMemoryAllocator\l(const char *name_str\l=\"generic\", const char\l *alloc_name_str=\"alloc\",\l const char *free_name_str\l=\"free\")\l+ virtual ~TestMemoryAllocator()\l+ bool hasBeenDestroyed()\l+ virtual char * alloc\l_memory(size_t size,\l const char *file, size\l_t line)\l+ virtual void free_memory\l(char *memory, size_t size,\l const char *file, size_t line)\l+ virtual const char\l * name() const\l+ virtual const char\l * alloc_name() const\l+ virtual const char\l * free_name() const\l+ virtual bool isOfEqualType\l(TestMemoryAllocator *allocator)\l+ virtual char * allocMemory\lLeakNode(size_t size)\l+ virtual void freeMemoryLeak\lNode(char *memory)\l+ virtual TestMemoryAllocator\l * actualAllocator()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classTestMemoryAllocator.html",tooltip=" "];
  Node7 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -next_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -mutex_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 [label="{SimpleMutex\n|- PlatformSpecificMutex\l psMtx\l|+  SimpleMutex(void)\l+  ~SimpleMutex(void)\l+ void Lock(void)\l+ void Unlock(void)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classSimpleMutex.html",tooltip=" "];
}
