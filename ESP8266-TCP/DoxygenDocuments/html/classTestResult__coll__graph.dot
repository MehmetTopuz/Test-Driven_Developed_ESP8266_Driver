digraph "TestResult"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{TestResult\n|- size_t testCount_\l- size_t runCount_\l- size_t checkCount_\l- size_t failureCount_\l- size_t filteredOutCount_\l- size_t ignoredCount_\l- size_t totalExecutionTime_\l- size_t timeStarted_\l- size_t currentTestTimeStarted_\l- size_t currentTestTotalExecution\lTime_\l- size_t currentGroupTimeStarted_\l- size_t currentGroupTotal\lExecutionTime_\l|+  TestResult(TestOutput &)\l+ virtual ~TestResult()\l+ virtual void testsStarted()\l+ virtual void testsEnded()\l+ virtual void currentGroup\lStarted(UtestShell *test)\l+ virtual void currentGroup\lEnded(UtestShell *test)\l+ virtual void currentTest\lStarted(UtestShell *test)\l+ virtual void currentTest\lEnded(UtestShell *test)\l+ virtual void countTest()\l+ virtual void countRun()\land 17 more...\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -output_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 [label="{TestOutput\n|# int dotCount_\l# VerbosityLevel verbose_\l# bool color_\l# const char * progressIndication_\l# static WorkingEnvironment\l workingEnvironment_\l|+  TestOutput()\l+ virtual ~TestOutput()\l+ virtual void printTestsStarted()\l+ virtual void printTestsEnded\l(const TestResult &result)\l+ virtual void printCurrent\lTestStarted(const UtestShell &test)\l+ virtual void printCurrent\lTestEnded(const TestResult &res)\l+ virtual void printCurrent\lGroupStarted(const UtestShell &test)\l+ virtual void printCurrent\lGroupEnded(const TestResult &res)\l+ virtual void verbose\l(VerbosityLevel level)\l+ virtual void color()\land 10 more...\l+ static void setWorkingEnvironment\l(WorkingEnvironment workEnvironment)\l+ static WorkingEnvironment\l getWorkingEnvironment()\l# virtual void printEclipse\lErrorInFileOnLine(SimpleString\l file, size_t lineNumber)\l# virtual void printVisual\lStudioErrorInFileOnLine\l(SimpleString file, size\l_t lineNumber)\l# virtual void printProgress\lIndicator()\l# void printFileAndLineFor\lTestAndFailure(const TestFailure\l &failure)\l# void printFileAndLineFor\lFailure(const TestFailure\l &failure)\l# void printFailureInTest\l(SimpleString testName)\l# void printFailureMessage\l(SimpleString reason)\l# void printErrorInFileOnLine\lFormattedForWorkingEnvironment\l(SimpleString testFile, size\l_t lineNumber)\l#  TestOutput(const TestOutput &)\l# TestOutput & operator\l=(const TestOutput &)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classTestOutput.html",tooltip=" "];
}
