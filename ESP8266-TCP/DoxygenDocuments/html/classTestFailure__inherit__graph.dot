digraph "TestFailure"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{TestFailure\n|# SimpleString testName_\l# SimpleString testNameOnly_\l# SimpleString fileName_\l# size_t lineNumber_\l# SimpleString testFileName_\l# size_t testLineNumber_\l# SimpleString message_\l|+  TestFailure(UtestShell\l *, const char *fileName,\l size_t lineNumber, const\l SimpleString &theMessage)\l+  TestFailure(UtestShell\l *, const SimpleString\l &theMessage)\l+  TestFailure(UtestShell\l *, const char *fileName,\l size_t lineNumber)\l+  TestFailure(const\l TestFailure &)\l+ virtual ~TestFailure()\l+ virtual SimpleString\l getFileName() const\l+ virtual SimpleString\l getTestName() const\l+ virtual SimpleString\l getTestNameOnly() const\l+ virtual size_t getFailure\lLineNumber() const\l+ virtual SimpleString\l getMessage() const\l+ virtual SimpleString\l getTestFileName() const\l+ virtual size_t getTestLine\lNumber() const\l+ bool isOutsideTestFile\l() const\l+ bool isInHelperFunction\l() const\l# SimpleString createButWas\lString(const SimpleString\l &expected, const SimpleString\l &actual)\l# SimpleString createDifference\lAtPosString(const SimpleString\l &actual, size_t offset, size\l_t reportedPosition)\l# SimpleString createUserText\l(const SimpleString &text)\l# TestFailure & operator\l=(const TestFailure &)\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{BinaryEqualFailure\n||+  BinaryEqualFailure\l(UtestShell *test, const\l char *fileName, size_t\l lineNumber, const unsigned\l char *expected, const unsigned\l char *actual, size_t size, const\l SimpleString &text)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classBinaryEqualFailure.html",tooltip=" "];
  Node1 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{BitsEqualFailure\n||+  BitsEqualFailure(UtestShell\l *test, const char *fileName,\l size_t lineNumber, unsigned\l long expected, unsigned long\l actual, unsigned long mask, size\l_t byteCount, const SimpleString &text)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classBitsEqualFailure.html",tooltip=" "];
  Node1 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{CheckEqualFailure\n||+  CheckEqualFailure\l(UtestShell *test, const\l char *fileName, size_t\l lineNumber, const SimpleString\l &expected, const SimpleString\l &actual, const SimpleString &text)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classCheckEqualFailure.html",tooltip=" "];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{CheckFailure\n||+  CheckFailure(UtestShell\l *test, const char *fileName,\l size_t lineNumber, const SimpleString\l &checkString, const SimpleString\l &conditionString, const SimpleString\l &textString=\"\")\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classCheckFailure.html",tooltip=" "];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{ComparisonFailure\n||+  ComparisonFailure\l(UtestShell *test, const\l char *fileName, size_t\l lineNumber, const SimpleString\l &checkString, const SimpleString\l &comparisonString, const SimpleString &text)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classComparisonFailure.html",tooltip=" "];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 [label="{ContainsFailure\n||+  ContainsFailure(UtestShell\l *, const char *fileName,\l size_t lineNumber, const\l SimpleString &expected, const\l SimpleString &actual, const\l SimpleString &text)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classContainsFailure.html",tooltip=" "];
  Node1 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 [label="{DoublesEqualFailure\n||+  DoublesEqualFailure\l(UtestShell *, const\l char *fileName, size\l_t lineNumber, double expected,\l double actual, double threshold,\l const SimpleString &text)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classDoublesEqualFailure.html",tooltip=" "];
  Node1 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node9 [label="{EqualsFailure\n||+  EqualsFailure(UtestShell\l *, const char *fileName,\l size_t lineNumber, const\l char *expected, const char\l *actual, const SimpleString &text)\l+  EqualsFailure(UtestShell\l *, const char *fileName,\l size_t lineNumber, const\l SimpleString &expected, const\l SimpleString &actual, const\l SimpleString &text)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEqualsFailure.html",tooltip=" "];
  Node1 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node10 [label="{FailFailure\n||+  FailFailure(UtestShell\l *test, const char *fileName,\l size_t lineNumber, const\l SimpleString &message)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classFailFailure.html",tooltip=" "];
  Node1 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node11 [label="{FeatureUnsupportedFailure\n||+  FeatureUnsupportedFailure\l(UtestShell *test, const\l char *fileName, size_t lineNumber,\l const SimpleString &featureName,\l const SimpleString &text)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classFeatureUnsupportedFailure.html",tooltip=" "];
  Node1 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node12 [label="{LongLongsEqualFailure\n||+  LongLongsEqualFailure\l(UtestShell *test, const\l char *fileName, size_t\l lineNumber, cpputest_longlong\l expected, cpputest_longlong\l actual, const SimpleString &text)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classLongLongsEqualFailure.html",tooltip=" "];
  Node1 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node13 [label="{LongsEqualFailure\n||+  LongsEqualFailure\l(UtestShell *test, const\l char *fileName, size_t\l lineNumber, long expected,\l long actual, const SimpleString &text)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classLongsEqualFailure.html",tooltip=" "];
  Node1 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node14 [label="{MockFailure\n||+  MockFailure(UtestShell\l *test)\l+ virtual ~MockFailure\l() _destructor_override\l# void addExpectationsAndCall\lHistory(const MockExpectedCalls\lList &expectations)\l# void addExpectationsAndCall\lHistoryRelatedTo(const SimpleString\l &function, const MockExpectedCallsList\l &expectations)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMockFailure.html",tooltip=" "];
  Node14 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node15 [label="{MockCallOrderFailure\n||+  MockCallOrderFailure\l(UtestShell *test, const\l MockExpectedCallsList &expectations)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMockCallOrderFailure.html",tooltip=" "];
  Node14 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node16 [label="{MockExpectedCallsDidntHappen\lFailure\n||+  MockExpectedCallsDidntHappen\lFailure(UtestShell *test,\l const MockExpectedCallsList\l &expectations)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMockExpectedCallsDidntHappenFailure.html",tooltip=" "];
  Node14 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node17 [label="{MockExpectedObjectDidntHappen\lFailure\n||+  MockExpectedObjectDidnt\lHappenFailure(UtestShell\l *test, const SimpleString\l &functionName, const MockExpected\lCallsList &expectations)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMockExpectedObjectDidntHappenFailure.html",tooltip=" "];
  Node14 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node18 [label="{MockExpectedParameterDidnt\lHappenFailure\n||+  MockExpectedParameterDidnt\lHappenFailure(UtestShell\l *test, const SimpleString\l &functionName, const MockExpectedCalls\lList &expectations)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMockExpectedParameterDidntHappenFailure.html",tooltip=" "];
  Node14 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node19 [label="{MockNoWayToCompareCustom\lTypeFailure\n||+  MockNoWayToCompareCustom\lTypeFailure(UtestShell\l *test, const SimpleString\l &typeName)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMockNoWayToCompareCustomTypeFailure.html",tooltip=" "];
  Node14 -> Node20 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node20 [label="{MockNoWayToCopyCustomType\lFailure\n||+  MockNoWayToCopyCustomType\lFailure(UtestShell *test,\l const SimpleString &typeName)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMockNoWayToCopyCustomTypeFailure.html",tooltip=" "];
  Node14 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node21 [label="{MockUnexpectedCallHappened\lFailure\n||+  MockUnexpectedCallHappened\lFailure(UtestShell *test,\l const SimpleString &name,\l const MockExpectedCallsList\l &expectations)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMockUnexpectedCallHappenedFailure.html",tooltip=" "];
  Node14 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node22 [label="{MockUnexpectedInputParameter\lFailure\n||+  MockUnexpectedInputParameter\lFailure(UtestShell *test,\l const SimpleString &functionName,\l const MockNamedValue &parameter,\l const MockExpectedCallsList &expectations)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMockUnexpectedInputParameterFailure.html",tooltip=" "];
  Node14 -> Node23 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node23 [label="{MockUnexpectedObjectFailure\n||+  MockUnexpectedObjectFailure\l(UtestShell *test, const\l SimpleString &functionName,\l const void *expected, const\l MockExpectedCallsList &expectations)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMockUnexpectedObjectFailure.html",tooltip=" "];
  Node14 -> Node24 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node24 [label="{MockUnexpectedOutputParameter\lFailure\n||+  MockUnexpectedOutputParameter\lFailure(UtestShell *test,\l const SimpleString &functionName,\l const MockNamedValue &parameter,\l const MockExpectedCallsList &expectations)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMockUnexpectedOutputParameterFailure.html",tooltip=" "];
  Node1 -> Node25 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node25 [label="{SignedBytesEqualFailure\n||+  SignedBytesEqualFailure\l(UtestShell *test, const\l char *fileName, size_t lineNumber,\l signed char expected, signed char\l actual, const SimpleString &text)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classSignedBytesEqualFailure.html",tooltip=" "];
  Node1 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node26 [label="{StringEqualFailure\n||+  StringEqualFailure\l(UtestShell *test, const\l char *fileName, size_t\l lineNumber, const char\l *expected, const char *actual,\l const SimpleString &text)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classStringEqualFailure.html",tooltip=" "];
  Node1 -> Node27 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node27 [label="{StringEqualNoCaseFailure\n||+  StringEqualNoCaseFailure\l(UtestShell *test, const\l char *fileName, size_t lineNumber,\l const char *expected, const char\l *actual, const SimpleString &text)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classStringEqualNoCaseFailure.html",tooltip=" "];
  Node1 -> Node28 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node28 [label="{UnsignedLongLongsEqualFailure\n||+  UnsignedLongLongsEqualFailure\l(UtestShell *test, const char\l *fileName, size_t lineNumber,\l cpputest_ulonglong expected,\l cpputest_ulonglong actual, const\l SimpleString &text)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classUnsignedLongLongsEqualFailure.html",tooltip=" "];
  Node1 -> Node29 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node29 [label="{UnsignedLongsEqualFailure\n||+  UnsignedLongsEqualFailure\l(UtestShell *test, const\l char *fileName, size_t lineNumber,\l unsigned long expected, unsigned\l long actual, const SimpleString &text)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classUnsignedLongsEqualFailure.html",tooltip=" "];
}
