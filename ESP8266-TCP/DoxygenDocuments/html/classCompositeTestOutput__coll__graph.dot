digraph "CompositeTestOutput"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{CompositeTestOutput\n||+ virtual void setOutputOne\l(TestOutput *output)\l+ virtual void setOutputTwo\l(TestOutput *output)\l+  CompositeTestOutput()\l+ virtual ~CompositeTestOutput\l() _destructor_override\l+ virtual void printTestsStarted\l() _override\l+ virtual void printTestsEnded\l(const TestResult &result)\l _override\l+ virtual void printCurrent\lTestStarted(const UtestShell\l &test) _override\l+ virtual void printCurrent\lTestEnded(const TestResult\l &res) _override\l+ virtual void printCurrent\lGroupStarted(const UtestShell\l &test) _override\l+ virtual void printCurrent\lGroupEnded(const TestResult\l &res) _override\land 10 more...\l#  CompositeTestOutput\l(const TestOutput &)\l# CompositeTestOutput\l & operator=(const TestOutput &)\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{TestOutput\n|# int dotCount_\l# VerbosityLevel verbose_\l# bool color_\l# const char * progressIndication_\l# static WorkingEnvironment\l workingEnvironment_\l|+  TestOutput()\l+ virtual ~TestOutput()\l+ virtual void printTestsStarted()\l+ virtual void printTestsEnded\l(const TestResult &result)\l+ virtual void printCurrent\lTestStarted(const UtestShell &test)\l+ virtual void printCurrent\lTestEnded(const TestResult &res)\l+ virtual void printCurrent\lGroupStarted(const UtestShell &test)\l+ virtual void printCurrent\lGroupEnded(const TestResult &res)\l+ virtual void verbose\l(VerbosityLevel level)\l+ virtual void color()\land 10 more...\l+ static void setWorkingEnvironment\l(WorkingEnvironment workEnvironment)\l+ static WorkingEnvironment\l getWorkingEnvironment()\l# virtual void printEclipse\lErrorInFileOnLine(SimpleString\l file, size_t lineNumber)\l# virtual void printVisual\lStudioErrorInFileOnLine\l(SimpleString file, size\l_t lineNumber)\l# virtual void printProgress\lIndicator()\l# void printFileAndLineFor\lTestAndFailure(const TestFailure\l &failure)\l# void printFileAndLineFor\lFailure(const TestFailure\l &failure)\l# void printFailureInTest\l(SimpleString testName)\l# void printFailureMessage\l(SimpleString reason)\l# void printErrorInFileOnLine\lFormattedForWorkingEnvironment\l(SimpleString testFile, size\l_t lineNumber)\l#  TestOutput(const TestOutput &)\l# TestOutput & operator\l=(const TestOutput &)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classTestOutput.html",tooltip=" "];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -outputOne_\n-outputTwo_" ,arrowhead="odiamond",fontname="Helvetica"];
}
