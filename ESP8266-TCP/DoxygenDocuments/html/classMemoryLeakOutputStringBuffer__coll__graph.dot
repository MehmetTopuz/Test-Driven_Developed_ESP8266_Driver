digraph "MemoryLeakOutputStringBuffer"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{MemoryLeakOutputStringBuffer\n|- size_t total_leaks_\l- bool giveWarningOnUsingMalloc_\l|+  MemoryLeakOutputStringBuffer()\l+ void clear()\l+ void startMemoryLeakReporting()\l+ void stopMemoryLeakReporting()\l+ void reportMemoryLeak\l(MemoryLeakDetectorNode\l *leak)\l+ void reportDeallocateNon\lAllocatedMemoryFailure\l(const char *freeFile,\l size_t freeLine, TestMemoryAllocator\l *freeAllocator, MemoryLeakFailure\l *reporter)\l+ void reportMemoryCorruption\lFailure(MemoryLeakDetectorNode\l *node, const char *freeFile,\l size_t freeLineNumber, TestMemoryAllocator\l *freeAllocator, MemoryLeakFailure *reporter)\l+ void reportAllocationDeallocation\lMismatchFailure(MemoryLeakDetectorNode\l *node, const char *freeFile, size\l_t freeLineNumber, TestMemoryAllocator\l *freeAllocator, MemoryLeakFailure *reporter)\l+ char * toString()\l- void addAllocationLocation\l(const char *allocationFile,\l size_t allocationLineNumber,\l size_t allocationSize, TestMemoryAllocator\l *allocator)\l- void addDeallocationLocation\l(const char *freeFile, size\l_t freeLineNumber, TestMemoryAllocator\l *allocator)\l- void addMemoryLeakHeader()\l- void addMemoryLeakFooter\l(size_t totalAmountOfLeaks)\l- void addWarningForUsingMalloc()\l- void addNoMemoryLeaksMessage()\l- void addErrorMessageForToo\lMuchLeaks()\l- void reportFailure\l(const char *message,\l const char *allocFile,\l size_t allocLine, size\l_t allocSize, TestMemoryAllocator\l *allocAllocator, const char *freeFile,\l size_t freeLine, TestMemoryAllocator\l *freeAllocator, MemoryLeakFailure *reporter)\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -outputBuffer_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 [label="{SimpleStringBuffer\n|- char buffer_\l- size_t positions_filled_\l- size_t write_limit_\l|+  SimpleStringBuffer()\l+ void clear()\l+ void add(const char\l *format,...) _check\l_format_(printf\l+ void void addMemoryDump\l(const void *memory, size\l_t memorySize)\l+ char * toString()\l+ void setWriteLimit\l(size_t write_limit)\l+ void resetWriteLimit()\l+ bool reachedItsCapacity()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structSimpleStringBuffer.html",tooltip=" "];
}
