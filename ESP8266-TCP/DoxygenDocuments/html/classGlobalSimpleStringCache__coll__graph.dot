digraph "GlobalSimpleStringCache"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{GlobalSimpleStringCache\n||+  GlobalSimpleStringCache()\l+  ~GlobalSimpleStringCache()\l+ TestMemoryAllocator\l * getAllocator()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -allocator_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 [label="{SimpleStringCacheAllocator\n||+  SimpleStringCacheAllocator\l(SimpleStringInternalCache\l &cache, TestMemoryAllocator\l *previousAllocator)\l+ virtual ~SimpleStringCache\lAllocator() _destructor\l_override\l+ virtual char * alloc\l_memory(size_t size,\l const char *file, size\l_t line) _override\l+ virtual void free_memory\l(char *memory, size_t size,\l const char *file, size_t\l line) _override\l+ virtual const char\l * name() const _override\l+ virtual const char\l * alloc_name() const\l _override\l+ virtual const char\l * free_name() const\l _override\l+ virtual TestMemoryAllocator\l * actualAllocator() _override\l+ TestMemoryAllocator\l * originalAllocator()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classSimpleStringCacheAllocator.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{TestMemoryAllocator\n|# const char * name_\l# const char * alloc\l_name_\l# const char * free_name_\l# bool hasBeenDestroyed_\l|+  TestMemoryAllocator\l(const char *name_str\l=\"generic\", const char\l *alloc_name_str=\"alloc\",\l const char *free_name_str\l=\"free\")\l+ virtual ~TestMemoryAllocator()\l+ bool hasBeenDestroyed()\l+ virtual char * alloc\l_memory(size_t size,\l const char *file, size\l_t line)\l+ virtual void free_memory\l(char *memory, size_t size,\l const char *file, size_t line)\l+ virtual const char\l * name() const\l+ virtual const char\l * alloc_name() const\l+ virtual const char\l * free_name() const\l+ virtual bool isOfEqualType\l(TestMemoryAllocator *allocator)\l+ virtual char * allocMemory\lLeakNode(size_t size)\l+ virtual void freeMemoryLeak\lNode(char *memory)\l+ virtual TestMemoryAllocator\l * actualAllocator()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classTestMemoryAllocator.html",tooltip=" "];
  Node4 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -cache_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{SimpleStringInternalCache\n|- SimpleStringInternalCache\lNode * cache_\l- SimpleStringMemoryBlock\l * nonCachedAllocations_\l- bool hasWarnedAboutDeallocations\l|+  SimpleStringInternalCache()\l+  ~SimpleStringInternalCache()\l+ void setAllocator(TestMemory\lAllocator *allocator)\l+ char * alloc(size_t\l size)\l+ void dealloc(char *memory,\l size_t size)\l+ bool hasFreeBlocksOfSize\l(size_t size)\l+ void clearCache()\l+ void clearAllIncludingCurrently\lUsedMemory()\l- void printDeallocatingUnknown\lMemory(char *memory)\l- bool isCached(size\l_t size)\l- size_t getIndexForCache\l(size_t size)\l- SimpleStringInternalCache\lNode * getCacheNodeFromSize\l(size_t size)\l- SimpleStringInternalCache\lNode * createInternalCacheNodes()\l- void destroyInternalCache\lNode(SimpleStringInternalCache\lNode *node)\l- SimpleStringMemoryBlock\l * createSimpleStringMemoryBlock\l(size_t sizeOfString, SimpleStringMemory\lBlock *next)\l- void destroySimpleString\lMemoryBlock(SimpleStringMemory\lBlock *block, size_t size)\l- void destroySimpleString\lMemoryBlockList(SimpleString\lMemoryBlock *block, size_t size)\l- SimpleStringMemoryBlock\l * reserveCachedBlockFrom\l(SimpleStringInternalCacheNode *node)\l- void releaseCachedBlockFrom\l(char *memory, SimpleStringInternal\lCacheNode *node)\l- void releaseNonCachedMemory\l(char *memory, size_t size)\l- SimpleStringMemoryBlock\l * allocateNewCacheBlockFrom\l(SimpleStringInternalCacheNode *node)\l- SimpleStringMemoryBlock\l * addToSimpleStringMemoryBlock\lList(SimpleStringMemoryBlock\l *newBlock, SimpleStringMemoryBlock\l *previousHead)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classSimpleStringInternalCache.html",tooltip=" "];
  Node3 -> Node4 [color="grey25",fontsize="10",style="solid",label=" -allocator_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -originalAllocator_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -cache_" ,arrowhead="odiamond",fontname="Helvetica"];
}
