digraph "MemoryReporterPlugin"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{MemoryReporterPlugin\n||+  MemoryReporterPlugin()\l+ virtual ~MemoryReporterPlugin\l() _destructor_override\l+ virtual void preTestAction\l(UtestShell &test, TestResult\l &result) _override\l+ virtual void postTestAction\l(UtestShell &test, TestResult\l &result) _override\l+ virtual bool parseArguments\l(int, const char *const\l *, int) _override\l+ MemoryReportAllocator\l * getMallocAllocator()\l+ MemoryReportAllocator\l * getNewAllocator()\l+ MemoryReportAllocator\l * getNewArrayAllocator()\l# virtual MemoryReportFormatter\l * createMemoryFormatter\l(const SimpleString &type)\l- void destroyMemoryFormatter\l(MemoryReportFormatter *formatter)\l- void setGlobalMemoryReport\lAllocators()\l- void removeGlobalMemoryReport\lAllocators()\l- void initializeAllocator\l(MemoryReportAllocator\l *allocator, TestResult\l &result)\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{TestPlugin\n|- bool enabled_\l|+  TestPlugin(const Simple\lString &name)\l+ virtual ~TestPlugin()\l+ virtual void preTestAction\l(UtestShell &, TestResult &)\l+ virtual void postTestAction\l(UtestShell &, TestResult &)\l+ virtual bool parseArguments\l(int, const char *const\l *, int)\l+ virtual void runAllPreTest\lAction(UtestShell &, TestResult &)\l+ virtual void runAllPostTest\lAction(UtestShell &, TestResult &)\l+ virtual bool parseAllArguments\l(int ac, const char *const\l *av, int index)\l+ virtual bool parseAllArguments\l(int ac, char **av, int index)\l+ virtual TestPlugin\l * addPlugin(TestPlugin *)\land 7 more...\l#  TestPlugin(TestPlugin\l *next_)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classTestPlugin.html",tooltip=" "];
  Node2 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -next_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -name_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{SimpleString\n|+ static const size_t npos\l- char * buffer_\l- size_t bufferSize_\l|+  SimpleString(const\l char *value=\"\")\l+  SimpleString(const\l char *value, size_t\l repeatCount)\l+  SimpleString(const\l SimpleString &other)\l+  ~SimpleString()\l+ SimpleString & operator\l=(const SimpleString &other)\l+ SimpleString operator\l+(const SimpleString\l &) const\l+ SimpleString & operator\l+=(const SimpleString &)\l+ SimpleString & operator\l+=(const char *)\l+ char at(size_t pos)\l const\l+ size_t find(char ch)\l const\land 19 more...\l+ static void padStringsTo\lSameLength(SimpleString\l &str1, SimpleString &str2,\l char ch)\l+ static TestMemoryAllocator\l * getStringAllocator()\l+ static void setStringAllocator\l(TestMemoryAllocator *allocator)\l+ static int AtoI(const\l char *str)\l+ static unsigned AtoU\l(const char *str)\l+ static int StrCmp(const\l char *s1, const char *s2)\l+ static size_t StrLen\l(const char *)\l+ static int StrNCmp\l(const char *s1, const\l char *s2, size_t n)\l+ static char * StrNCpy\l(char *s1, const char\l *s2, size_t n)\l+ static const char *\l StrStr(const char *s1,\l const char *s2)\l+ static char ToLower\l(char ch)\l+ static int MemCmp(const\l void *s1, const void\l *s2, size_t n)\l+ static char * allocString\lBuffer(size_t size, const\l char *file, size_t line)\l+ static void deallocString\lBuffer(char *str, size\l_t size, const char *file,\l size_t line)\l- const char * getBuffer\l() const\l- void deallocateInternalBuffer()\l- void setInternalBufferAs\lEmptyString()\l- void setInternalBufferTo\lNewBuffer(size_t bufferSize)\l- void setInternalBufferTo\l(char *buffer, size_t bufferSize)\l- void copyBufferToNewInternal\lBuffer(const char *otherBuffer)\l- void copyBufferToNewInternal\lBuffer(const char *otherBuffer,\l size_t bufferSize)\l- void copyBufferToNewInternal\lBuffer(const SimpleString\l &otherBuffer)\l- char * getEmptyString\l() const\l- size_t getPrintableSize\l() const\l- static char * copyToNewBuffer\l(const char *bufferToCopy,\l size_t bufferSize)\l- static bool isDigit\l(char ch)\l- static bool isSpace\l(char ch)\l- static bool isUpper\l(char ch)\l- static bool isControl\l(char ch)\l- static bool isControlWith\lShortEscapeSequence(char ch)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classSimpleString.html",tooltip=" "];
  Node4 -> Node3 [color="grey25",fontsize="10",style="solid",label=" -stringAllocator_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{TestMemoryAllocator\n|# const char * name_\l# const char * alloc\l_name_\l# const char * free_name_\l# bool hasBeenDestroyed_\l|+  TestMemoryAllocator\l(const char *name_str\l=\"generic\", const char\l *alloc_name_str=\"alloc\",\l const char *free_name_str\l=\"free\")\l+ virtual ~TestMemoryAllocator()\l+ bool hasBeenDestroyed()\l+ virtual char * alloc\l_memory(size_t size,\l const char *file, size\l_t line)\l+ virtual void free_memory\l(char *memory, size_t size,\l const char *file, size_t line)\l+ virtual const char\l * name() const\l+ virtual const char\l * alloc_name() const\l+ virtual const char\l * free_name() const\l+ virtual bool isOfEqualType\l(TestMemoryAllocator *allocator)\l+ virtual char * allocMemory\lLeakNode(size_t size)\l+ virtual void freeMemoryLeak\lNode(char *memory)\l+ virtual TestMemoryAllocator\l * actualAllocator()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classTestMemoryAllocator.html",tooltip=" "];
  Node5 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -formatter_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{MemoryReportFormatter\n||+ virtual ~MemoryReportFormatter()\l+ virtual void report\l_testgroup_start(TestResult\l *result, UtestShell &test)=0\l+ virtual void report\l_testgroup_end(TestResult\l *result, UtestShell &test)=0\l+ virtual void report\l_test_start(TestResult\l *result, UtestShell &test)=0\l+ virtual void report\l_test_end(TestResult\l *result, UtestShell\l &test)=0\l+ virtual void report\l_alloc_memory(TestResult\l *result, TestMemoryAllocator\l *allocator, size_t size, char\l *memory, const char *file, size\l_t line)=0\l+ virtual void report\l_free_memory(TestResult\l *result, TestMemoryAllocator\l *allocator, char *memory,\l const char *file, size_t line)=0\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMemoryReportFormatter.html",tooltip=" "];
  Node6 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -mallocAllocator\n-newAllocator\n-newArrayAllocator" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{MemoryReportAllocator\n||+  MemoryReportAllocator()\l+ virtual ~MemoryReportAllocator\l() _destructor_override\l+ virtual void setFormatter\l(MemoryReportFormatter\l *formatter)\l+ virtual void setTestResult\l(TestResult *result)\l+ virtual void setRealAllocator\l(TestMemoryAllocator *allocator)\l+ virtual TestMemoryAllocator\l * getRealAllocator()\l+ virtual char * alloc\l_memory(size_t size,\l const char *file, size\l_t line) _override\l+ virtual void free_memory\l(char *memory, size_t size,\l const char *file, size_t\l line) _override\l+ virtual const char\l * name() const _override\l+ virtual const char\l * alloc_name() const\l _override\l+ virtual const char\l * free_name() const\l _override\l+ virtual TestMemoryAllocator\l * actualAllocator() _override\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMemoryReportAllocator.html",tooltip=" "];
  Node4 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 -> Node6 [color="grey25",fontsize="10",style="solid",label=" #result_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{TestResult\n|- size_t testCount_\l- size_t runCount_\l- size_t checkCount_\l- size_t failureCount_\l- size_t filteredOutCount_\l- size_t ignoredCount_\l- size_t totalExecutionTime_\l- size_t timeStarted_\l- size_t currentTestTimeStarted_\l- size_t currentTestTotalExecution\lTime_\l- size_t currentGroupTimeStarted_\l- size_t currentGroupTotal\lExecutionTime_\l|+  TestResult(TestOutput &)\l+ virtual ~TestResult()\l+ virtual void testsStarted()\l+ virtual void testsEnded()\l+ virtual void currentGroup\lStarted(UtestShell *test)\l+ virtual void currentGroup\lEnded(UtestShell *test)\l+ virtual void currentTest\lStarted(UtestShell *test)\l+ virtual void currentTest\lEnded(UtestShell *test)\l+ virtual void countTest()\l+ virtual void countRun()\land 17 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classTestResult.html",tooltip=" "];
  Node8 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -output_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{TestOutput\n|# int dotCount_\l# VerbosityLevel verbose_\l# bool color_\l# const char * progressIndication_\l# static WorkingEnvironment\l workingEnvironment_\l|+  TestOutput()\l+ virtual ~TestOutput()\l+ virtual void printTestsStarted()\l+ virtual void printTestsEnded\l(const TestResult &result)\l+ virtual void printCurrent\lTestStarted(const UtestShell &test)\l+ virtual void printCurrent\lTestEnded(const TestResult &res)\l+ virtual void printCurrent\lGroupStarted(const UtestShell &test)\l+ virtual void printCurrent\lGroupEnded(const TestResult &res)\l+ virtual void verbose\l(VerbosityLevel level)\l+ virtual void color()\land 10 more...\l+ static void setWorkingEnvironment\l(WorkingEnvironment workEnvironment)\l+ static WorkingEnvironment\l getWorkingEnvironment()\l# virtual void printEclipse\lErrorInFileOnLine(SimpleString\l file, size_t lineNumber)\l# virtual void printVisual\lStudioErrorInFileOnLine\l(SimpleString file, size\l_t lineNumber)\l# virtual void printProgress\lIndicator()\l# void printFileAndLineFor\lTestAndFailure(const TestFailure\l &failure)\l# void printFileAndLineFor\lFailure(const TestFailure\l &failure)\l# void printFailureInTest\l(SimpleString testName)\l# void printFailureMessage\l(SimpleString reason)\l# void printErrorInFileOnLine\lFormattedForWorkingEnvironment\l(SimpleString testFile, size\l_t lineNumber)\l#  TestOutput(const TestOutput &)\l# TestOutput & operator\l=(const TestOutput &)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classTestOutput.html",tooltip=" "];
  Node4 -> Node6 [color="grey25",fontsize="10",style="solid",label=" #realAllocator_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 -> Node6 [color="grey25",fontsize="10",style="solid",label=" #formatter_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -currentTestGroup_" ,arrowhead="odiamond",fontname="Helvetica"];
}
