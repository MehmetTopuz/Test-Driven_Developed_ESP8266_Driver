digraph "TestPlugin"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{TestPlugin\n|- TestPlugin * next_\l- SimpleString name_\l- bool enabled_\l|+  TestPlugin(const Simple\lString &name)\l+ virtual ~TestPlugin()\l+ virtual void preTestAction\l(UtestShell &, TestResult &)\l+ virtual void postTestAction\l(UtestShell &, TestResult &)\l+ virtual bool parseArguments\l(int, const char *const\l *, int)\l+ virtual void runAllPreTest\lAction(UtestShell &, TestResult &)\l+ virtual void runAllPostTest\lAction(UtestShell &, TestResult &)\l+ virtual bool parseAllArguments\l(int ac, const char *const\l *av, int index)\l+ virtual bool parseAllArguments\l(int ac, char **av, int index)\l+ virtual TestPlugin\l * addPlugin(TestPlugin *)\land 7 more...\l#  TestPlugin(TestPlugin\l *next_)\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{IEEE754ExceptionsPlugin\n|- static bool inexactDisabled_\l|+  IEEE754ExceptionsPlugin\l(const SimpleString &name\l=\"IEEE754ExceptionsPlugin\")\l+ virtual void preTestAction\l(UtestShell &test, TestResult\l &result) _override\l+ virtual void postTestAction\l(UtestShell &test, TestResult\l &result) _override\l+ static void disableInexact\l(void)\l+ static void enableInexact\l(void)\l+ static bool checkIeee754\lOverflowExceptionFlag()\l+ static bool checkIeee754\lUnderflowExceptionFlag()\l+ static bool checkIeee754\lInexactExceptionFlag()\l+ static bool checkIeee754\lDivByZeroExceptionFlag()\l- void ieee754Check(UtestShell\l &test, TestResult &result,\l int flag, const char *text)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classIEEE754ExceptionsPlugin.html",tooltip=" "];
  Node1 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{MemoryLeakWarningPlugin\n|- MemoryLeakDetector\l * memLeakDetector_\l- bool ignoreAllWarnings_\l- bool destroyGlobalDetector\lAndTurnOfMemoryLeakDetectionIn\lDestructor_\l- size_t expectedLeaks_\l- size_t failureCount_\l- static MemoryLeakWarning\lPlugin * firstPlugin_\l|+  MemoryLeakWarningPlugin\l(const SimpleString &name,\l MemoryLeakDetector *localDetector\l=NULLPTR)\l+ virtual ~MemoryLeakWarning\lPlugin() _destructor_override\l+ virtual void preTestAction\l(UtestShell &test, TestResult\l &result) _override\l+ virtual void postTestAction\l(UtestShell &test, TestResult\l &result) _override\l+ virtual const char\l * FinalReport(size\l_t toBeDeletedLeaks=0)\l+ void ignoreAllLeaksInTest()\l+ void expectLeaksInTest\l(size_t n)\l+ void destroyGlobalDetector\lAndTurnOffMemoryLeakDetectionIn\lDestructor(bool des)\l+ MemoryLeakDetector\l * getMemoryLeakDetector()\l+ static MemoryLeakWarning\lPlugin * getFirstPlugin()\l+ static MemoryLeakDetector\l * getGlobalDetector()\l+ static MemoryLeakFailure\l * getGlobalFailureReporter()\l+ static void setGlobalDetector\l(MemoryLeakDetector *detector,\l MemoryLeakFailure *reporter)\l+ static void destroyGlobal\lDetector()\l+ static void turnOffNewDelete\lOverloads()\l+ static void turnOnDefault\lNotThreadSafeNewDeleteOverloads()\l+ static void turnOnThread\lSafeNewDeleteOverloads()\l+ static bool areNewDelete\lOverloaded()\l+ static void saveAndDisable\lNewDeleteOverloads()\l+ static void restoreNewDelete\lOverloads()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMemoryLeakWarningPlugin.html",tooltip=" "];
  Node1 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{MemoryReporterPlugin\n|- MemoryReportFormatter\l * formatter_\l- MemoryReportAllocator\l mallocAllocator\l- MemoryReportAllocator\l newAllocator\l- MemoryReportAllocator\l newArrayAllocator\l- SimpleString currentTest\lGroup_\l|+  MemoryReporterPlugin()\l+ virtual ~MemoryReporterPlugin\l() _destructor_override\l+ virtual void preTestAction\l(UtestShell &test, TestResult\l &result) _override\l+ virtual void postTestAction\l(UtestShell &test, TestResult\l &result) _override\l+ virtual bool parseArguments\l(int, const char *const\l *, int) _override\l+ MemoryReportAllocator\l * getMallocAllocator()\l+ MemoryReportAllocator\l * getNewAllocator()\l+ MemoryReportAllocator\l * getNewArrayAllocator()\l# virtual MemoryReportFormatter\l * createMemoryFormatter\l(const SimpleString &type)\l- void destroyMemoryFormatter\l(MemoryReportFormatter *formatter)\l- void setGlobalMemoryReport\lAllocators()\l- void removeGlobalMemoryReport\lAllocators()\l- void initializeAllocator\l(MemoryReportAllocator\l *allocator, TestResult\l &result)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMemoryReporterPlugin.html",tooltip=" "];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{MockSupportPlugin\n|- MockNamedValueComparators\lAndCopiersRepository repository_\l|+  MockSupportPlugin\l(const SimpleString\l &name=\"MockSupportPLugin\")\l+ virtual ~MockSupportPlugin\l() _destructor_override\l+ virtual void preTestAction\l(UtestShell &, TestResult\l &) _override\l+ virtual void postTestAction\l(UtestShell &, TestResult\l &) _override\l+ virtual void installComparator\l(const SimpleString &name,\l MockNamedValueComparator &comparator)\l+ virtual void installCopier\l(const SimpleString &name,\l MockNamedValueCopier &copier)\l+ void clear()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMockSupportPlugin.html",tooltip=" "];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{NullTestPlugin\n||+  NullTestPlugin()\l+ virtual void runAllPreTest\lAction(UtestShell &test,\l TestResult &result) _override\l+ virtual void runAllPostTest\lAction(UtestShell &test,\l TestResult &result) _override\l+ static NullTestPlugin\l * instance()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classNullTestPlugin.html",tooltip=" "];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 [label="{SetPointerPlugin\n||+  SetPointerPlugin(const\l SimpleString &name)\l+ virtual void postTestAction\l(UtestShell &, TestResult\l &) _override\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classSetPointerPlugin.html",tooltip=" "];
}
