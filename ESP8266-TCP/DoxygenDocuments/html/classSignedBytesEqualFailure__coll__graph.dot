digraph "SignedBytesEqualFailure"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{SignedBytesEqualFailure\n||+  SignedBytesEqualFailure\l(UtestShell *test, const\l char *fileName, size_t lineNumber,\l signed char expected, signed char\l actual, const SimpleString &text)\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{TestFailure\n|# size_t lineNumber_\l# size_t testLineNumber_\l|+  TestFailure(UtestShell\l *, const char *fileName,\l size_t lineNumber, const\l SimpleString &theMessage)\l+  TestFailure(UtestShell\l *, const SimpleString\l &theMessage)\l+  TestFailure(UtestShell\l *, const char *fileName,\l size_t lineNumber)\l+  TestFailure(const\l TestFailure &)\l+ virtual ~TestFailure()\l+ virtual SimpleString\l getFileName() const\l+ virtual SimpleString\l getTestName() const\l+ virtual SimpleString\l getTestNameOnly() const\l+ virtual size_t getFailure\lLineNumber() const\l+ virtual SimpleString\l getMessage() const\l+ virtual SimpleString\l getTestFileName() const\l+ virtual size_t getTestLine\lNumber() const\l+ bool isOutsideTestFile\l() const\l+ bool isInHelperFunction\l() const\l# SimpleString createButWas\lString(const SimpleString\l &expected, const SimpleString\l &actual)\l# SimpleString createDifference\lAtPosString(const SimpleString\l &actual, size_t offset, size\l_t reportedPosition)\l# SimpleString createUserText\l(const SimpleString &text)\l# TestFailure & operator\l=(const TestFailure &)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classTestFailure.html",tooltip=" "];
  Node3 -> Node2 [color="grey25",fontsize="10",style="solid",label=" #fileName_\n#message_\n#testFileName_\n#testNameOnly_\n#testName_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{SimpleString\n|+ static const size_t npos\l- char * buffer_\l- size_t bufferSize_\l|+  SimpleString(const\l char *value=\"\")\l+  SimpleString(const\l char *value, size_t\l repeatCount)\l+  SimpleString(const\l SimpleString &other)\l+  ~SimpleString()\l+ SimpleString & operator\l=(const SimpleString &other)\l+ SimpleString operator\l+(const SimpleString\l &) const\l+ SimpleString & operator\l+=(const SimpleString &)\l+ SimpleString & operator\l+=(const char *)\l+ char at(size_t pos)\l const\l+ size_t find(char ch)\l const\land 19 more...\l+ static void padStringsTo\lSameLength(SimpleString\l &str1, SimpleString &str2,\l char ch)\l+ static TestMemoryAllocator\l * getStringAllocator()\l+ static void setStringAllocator\l(TestMemoryAllocator *allocator)\l+ static int AtoI(const\l char *str)\l+ static unsigned AtoU\l(const char *str)\l+ static int StrCmp(const\l char *s1, const char *s2)\l+ static size_t StrLen\l(const char *)\l+ static int StrNCmp\l(const char *s1, const\l char *s2, size_t n)\l+ static char * StrNCpy\l(char *s1, const char\l *s2, size_t n)\l+ static const char *\l StrStr(const char *s1,\l const char *s2)\l+ static char ToLower\l(char ch)\l+ static int MemCmp(const\l void *s1, const void\l *s2, size_t n)\l+ static char * allocString\lBuffer(size_t size, const\l char *file, size_t line)\l+ static void deallocString\lBuffer(char *str, size\l_t size, const char *file,\l size_t line)\l- const char * getBuffer\l() const\l- void deallocateInternalBuffer()\l- void setInternalBufferAs\lEmptyString()\l- void setInternalBufferTo\lNewBuffer(size_t bufferSize)\l- void setInternalBufferTo\l(char *buffer, size_t bufferSize)\l- void copyBufferToNewInternal\lBuffer(const char *otherBuffer)\l- void copyBufferToNewInternal\lBuffer(const char *otherBuffer,\l size_t bufferSize)\l- void copyBufferToNewInternal\lBuffer(const SimpleString\l &otherBuffer)\l- char * getEmptyString\l() const\l- size_t getPrintableSize\l() const\l- static char * copyToNewBuffer\l(const char *bufferToCopy,\l size_t bufferSize)\l- static bool isDigit\l(char ch)\l- static bool isSpace\l(char ch)\l- static bool isUpper\l(char ch)\l- static bool isControl\l(char ch)\l- static bool isControlWith\lShortEscapeSequence(char ch)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classSimpleString.html",tooltip=" "];
  Node4 -> Node3 [color="grey25",fontsize="10",style="solid",label=" -stringAllocator_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{TestMemoryAllocator\n|# const char * name_\l# const char * alloc\l_name_\l# const char * free_name_\l# bool hasBeenDestroyed_\l|+  TestMemoryAllocator\l(const char *name_str\l=\"generic\", const char\l *alloc_name_str=\"alloc\",\l const char *free_name_str\l=\"free\")\l+ virtual ~TestMemoryAllocator()\l+ bool hasBeenDestroyed()\l+ virtual char * alloc\l_memory(size_t size,\l const char *file, size\l_t line)\l+ virtual void free_memory\l(char *memory, size_t size,\l const char *file, size_t line)\l+ virtual const char\l * name() const\l+ virtual const char\l * alloc_name() const\l+ virtual const char\l * free_name() const\l+ virtual bool isOfEqualType\l(TestMemoryAllocator *allocator)\l+ virtual char * allocMemory\lLeakNode(size_t size)\l+ virtual void freeMemoryLeak\lNode(char *memory)\l+ virtual TestMemoryAllocator\l * actualAllocator()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classTestMemoryAllocator.html",tooltip=" "];
}
