digraph "TestOutput"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{TestOutput\n|# int dotCount_\l# VerbosityLevel verbose_\l# bool color_\l# const char * progressIndication_\l# static WorkingEnvironment\l workingEnvironment_\l|+  TestOutput()\l+ virtual ~TestOutput()\l+ virtual void printTestsStarted()\l+ virtual void printTestsEnded\l(const TestResult &result)\l+ virtual void printCurrent\lTestStarted(const UtestShell &test)\l+ virtual void printCurrent\lTestEnded(const TestResult &res)\l+ virtual void printCurrent\lGroupStarted(const UtestShell &test)\l+ virtual void printCurrent\lGroupEnded(const TestResult &res)\l+ virtual void verbose\l(VerbosityLevel level)\l+ virtual void color()\land 10 more...\l+ static void setWorkingEnvironment\l(WorkingEnvironment workEnvironment)\l+ static WorkingEnvironment\l getWorkingEnvironment()\l# virtual void printEclipse\lErrorInFileOnLine(SimpleString\l file, size_t lineNumber)\l# virtual void printVisual\lStudioErrorInFileOnLine\l(SimpleString file, size\l_t lineNumber)\l# virtual void printProgress\lIndicator()\l# void printFileAndLineFor\lTestAndFailure(const TestFailure\l &failure)\l# void printFileAndLineFor\lFailure(const TestFailure\l &failure)\l# void printFailureInTest\l(SimpleString testName)\l# void printFailureMessage\l(SimpleString reason)\l# void printErrorInFileOnLine\lFormattedForWorkingEnvironment\l(SimpleString testFile, size\l_t lineNumber)\l#  TestOutput(const TestOutput &)\l# TestOutput & operator\l=(const TestOutput &)\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{CompositeTestOutput\n||+ virtual void setOutputOne\l(TestOutput *output)\l+ virtual void setOutputTwo\l(TestOutput *output)\l+  CompositeTestOutput()\l+ virtual ~CompositeTestOutput\l() _destructor_override\l+ virtual void printTestsStarted\l() _override\l+ virtual void printTestsEnded\l(const TestResult &result)\l _override\l+ virtual void printCurrent\lTestStarted(const UtestShell\l &test) _override\l+ virtual void printCurrent\lTestEnded(const TestResult\l &res) _override\l+ virtual void printCurrent\lGroupStarted(const UtestShell\l &test) _override\l+ virtual void printCurrent\lGroupEnded(const TestResult\l &res) _override\land 10 more...\l#  CompositeTestOutput\l(const TestOutput &)\l# CompositeTestOutput\l & operator=(const TestOutput &)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_composite_test_output.html",tooltip=" "];
  Node1 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{ConsoleTestOutput\n||+  ConsoleTestOutput()\l+ virtual ~ConsoleTestOutput\l() _destructor_override\l+ virtual void printBuffer\l(const char *s) _override\l+ virtual void flush\l() _override\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_console_test_output.html",tooltip=" "];
  Node3 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{TeamCityTestOutput\n||+  TeamCityTestOutput\l(void)\l+ virtual ~TeamCityTestOutput\l(void) _destructor_override\l+ virtual void printCurrent\lTestStarted(const UtestShell\l &test) _override\l+ virtual void printCurrent\lTestEnded(const TestResult\l &res) _override\l+ virtual void printCurrent\lGroupStarted(const UtestShell\l &test) _override\l+ virtual void printCurrent\lGroupEnded(const TestResult\l &res) _override\l+ virtual void printFailure\l(const TestFailure &failure)\l _override\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_team_city_test_output.html",tooltip=" "];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{JUnitTestOutput\n|# JUnitTestOutputImpl\l * impl_\l|+  JUnitTestOutput()\l+ virtual ~JUnitTestOutput\l() _destructor_override\l+ virtual void printTestsStarted\l() _override\l+ virtual void printTestsEnded\l(const TestResult &result)\l _override\l+ virtual void printCurrent\lTestStarted(const UtestShell\l &test) _override\l+ virtual void printCurrent\lTestEnded(const TestResult\l &res) _override\l+ virtual void printCurrent\lGroupStarted(const UtestShell\l &test) _override\l+ virtual void printCurrent\lGroupEnded(const TestResult\l &res) _override\l+ virtual void printBuffer\l(const char *) _override\l+ virtual void print\l(const char *) _override\land 6 more...\l# void resetTestGroupResult()\l# virtual void openFileFor\lWrite(const SimpleString\l &fileName)\l# virtual void writeTestGroup\lToFile()\l# virtual void writeToFile\l(const SimpleString &buffer)\l# virtual void closeFile()\l# virtual void writeXmlHeader()\l# virtual void writeTestSuite\lSummary()\l# virtual void writeProperties()\l# virtual void writeTestCases()\l# virtual SimpleString\l encodeXmlText(const\l SimpleString &textbody)\l# virtual SimpleString\l encodeFileName(const\l SimpleString &fileName)\l# virtual void writeFailure\l(JUnitTestCaseResultNode *node)\l# virtual void writeFileEnding()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_j_unit_test_output.html",tooltip=" "];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{StringBufferTestOutput\n|# SimpleString output\l|+  StringBufferTestOutput()\l+ virtual ~StringBufferTest\lOutput() _destructor_override\l+ void printBuffer(const\l char *s) _override\l+ void flush() _override\l+ const SimpleString\l & getOutput()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_string_buffer_test_output.html",tooltip=" "];
}
