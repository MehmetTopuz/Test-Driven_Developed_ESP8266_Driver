digraph "MemoryLeakWarningPlugin"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{MemoryLeakWarningPlugin\n|- MemoryLeakDetector\l * memLeakDetector_\l- bool ignoreAllWarnings_\l- bool destroyGlobalDetector\lAndTurnOfMemoryLeakDetectionIn\lDestructor_\l- size_t expectedLeaks_\l- size_t failureCount_\l- static MemoryLeakWarning\lPlugin * firstPlugin_\l|+  MemoryLeakWarningPlugin\l(const SimpleString &name,\l MemoryLeakDetector *localDetector\l=NULLPTR)\l+ virtual ~MemoryLeakWarning\lPlugin() _destructor_override\l+ virtual void preTestAction\l(UtestShell &test, TestResult\l &result) _override\l+ virtual void postTestAction\l(UtestShell &test, TestResult\l &result) _override\l+ virtual const char\l * FinalReport(size\l_t toBeDeletedLeaks=0)\l+ void ignoreAllLeaksInTest()\l+ void expectLeaksInTest\l(size_t n)\l+ void destroyGlobalDetector\lAndTurnOffMemoryLeakDetectionIn\lDestructor(bool des)\l+ MemoryLeakDetector\l * getMemoryLeakDetector()\l+ static MemoryLeakWarning\lPlugin * getFirstPlugin()\l+ static MemoryLeakDetector\l * getGlobalDetector()\l+ static MemoryLeakFailure\l * getGlobalFailureReporter()\l+ static void setGlobalDetector\l(MemoryLeakDetector *detector,\l MemoryLeakFailure *reporter)\l+ static void destroyGlobal\lDetector()\l+ static void turnOffNewDelete\lOverloads()\l+ static void turnOnDefault\lNotThreadSafeNewDeleteOverloads()\l+ static void turnOnThread\lSafeNewDeleteOverloads()\l+ static bool areNewDelete\lOverloaded()\l+ static void saveAndDisable\lNewDeleteOverloads()\l+ static void restoreNewDelete\lOverloads()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{TestPlugin\n|- TestPlugin * next_\l- SimpleString name_\l- bool enabled_\l|+  TestPlugin(const Simple\lString &name)\l+ virtual ~TestPlugin()\l+ virtual void preTestAction\l(UtestShell &, TestResult &)\l+ virtual void postTestAction\l(UtestShell &, TestResult &)\l+ virtual bool parseArguments\l(int, const char *const\l *, int)\l+ virtual void runAllPreTest\lAction(UtestShell &, TestResult &)\l+ virtual void runAllPostTest\lAction(UtestShell &, TestResult &)\l+ virtual bool parseAllArguments\l(int ac, const char *const\l *av, int index)\l+ virtual bool parseAllArguments\l(int ac, char **av, int index)\l+ virtual TestPlugin\l * addPlugin(TestPlugin *)\land 7 more...\l#  TestPlugin(TestPlugin\l *next_)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classTestPlugin.html",tooltip=" "];
}
