digraph "MemoryReportAllocator"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{MemoryReportAllocator\n||+  MemoryReportAllocator()\l+ virtual ~MemoryReportAllocator\l() _destructor_override\l+ virtual void setFormatter\l(MemoryReportFormatter\l *formatter)\l+ virtual void setTestResult\l(TestResult *result)\l+ virtual void setRealAllocator\l(TestMemoryAllocator *allocator)\l+ virtual TestMemoryAllocator\l * getRealAllocator()\l+ virtual char * alloc\l_memory(size_t size,\l const char *file, size\l_t line) _override\l+ virtual void free_memory\l(char *memory, size_t size,\l const char *file, size_t\l line) _override\l+ virtual const char\l * name() const _override\l+ virtual const char\l * alloc_name() const\l _override\l+ virtual const char\l * free_name() const\l _override\l+ virtual TestMemoryAllocator\l * actualAllocator() _override\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{TestMemoryAllocator\n|# const char * name_\l# const char * alloc\l_name_\l# const char * free_name_\l# bool hasBeenDestroyed_\l|+  TestMemoryAllocator\l(const char *name_str\l=\"generic\", const char\l *alloc_name_str=\"alloc\",\l const char *free_name_str\l=\"free\")\l+ virtual ~TestMemoryAllocator()\l+ bool hasBeenDestroyed()\l+ virtual char * alloc\l_memory(size_t size,\l const char *file, size\l_t line)\l+ virtual void free_memory\l(char *memory, size_t size,\l const char *file, size_t line)\l+ virtual const char\l * name() const\l+ virtual const char\l * alloc_name() const\l+ virtual const char\l * free_name() const\l+ virtual bool isOfEqualType\l(TestMemoryAllocator *allocator)\l+ virtual char * allocMemory\lLeakNode(size_t size)\l+ virtual void freeMemoryLeak\lNode(char *memory)\l+ virtual TestMemoryAllocator\l * actualAllocator()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_test_memory_allocator.html",tooltip=" "];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #result_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{TestResult\n||+  TestResult(TestOutput &)\l+ virtual ~TestResult()\l+ virtual void testsStarted()\l+ virtual void testsEnded()\l+ virtual void currentGroup\lStarted(UtestShell *test)\l+ virtual void currentGroup\lEnded(UtestShell *test)\l+ virtual void currentTest\lStarted(UtestShell *test)\l+ virtual void currentTest\lEnded(UtestShell *test)\l+ virtual void countTest()\l+ virtual void countRun()\land 17 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_test_result.html",tooltip=" "];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #realAllocator_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #formatter_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{MemoryReportFormatter\n||+ virtual ~MemoryReportFormatter()\l+ virtual void report\l_testgroup_start(TestResult\l *result, UtestShell &test)=0\l+ virtual void report\l_testgroup_end(TestResult\l *result, UtestShell &test)=0\l+ virtual void report\l_test_start(TestResult\l *result, UtestShell &test)=0\l+ virtual void report\l_test_end(TestResult\l *result, UtestShell\l &test)=0\l+ virtual void report\l_alloc_memory(TestResult\l *result, TestMemoryAllocator\l *allocator, size_t size, char\l *memory, const char *file, size\l_t line)=0\l+ virtual void report\l_free_memory(TestResult\l *result, TestMemoryAllocator\l *allocator, char *memory,\l const char *file, size_t line)=0\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_memory_report_formatter.html",tooltip=" "];
}
