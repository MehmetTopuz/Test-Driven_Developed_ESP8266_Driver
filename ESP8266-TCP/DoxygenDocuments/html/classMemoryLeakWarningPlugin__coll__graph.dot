digraph "MemoryLeakWarningPlugin"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{MemoryLeakWarningPlugin\n|- bool ignoreAllWarnings_\l- bool destroyGlobalDetector\lAndTurnOfMemoryLeakDetectionIn\lDestructor_\l- size_t expectedLeaks_\l- size_t failureCount_\l|+  MemoryLeakWarningPlugin\l(const SimpleString &name,\l MemoryLeakDetector *localDetector\l=NULLPTR)\l+ virtual ~MemoryLeakWarning\lPlugin() _destructor_override\l+ virtual void preTestAction\l(UtestShell &test, TestResult\l &result) _override\l+ virtual void postTestAction\l(UtestShell &test, TestResult\l &result) _override\l+ virtual const char\l * FinalReport(size\l_t toBeDeletedLeaks=0)\l+ void ignoreAllLeaksInTest()\l+ void expectLeaksInTest\l(size_t n)\l+ void destroyGlobalDetector\lAndTurnOffMemoryLeakDetectionIn\lDestructor(bool des)\l+ MemoryLeakDetector\l * getMemoryLeakDetector()\l+ static MemoryLeakWarning\lPlugin * getFirstPlugin()\l+ static MemoryLeakDetector\l * getGlobalDetector()\l+ static MemoryLeakFailure\l * getGlobalFailureReporter()\l+ static void setGlobalDetector\l(MemoryLeakDetector *detector,\l MemoryLeakFailure *reporter)\l+ static void destroyGlobal\lDetector()\l+ static void turnOffNewDelete\lOverloads()\l+ static void turnOnDefault\lNotThreadSafeNewDeleteOverloads()\l+ static void turnOnThread\lSafeNewDeleteOverloads()\l+ static bool areNewDelete\lOverloaded()\l+ static void saveAndDisable\lNewDeleteOverloads()\l+ static void restoreNewDelete\lOverloads()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{TestPlugin\n|- bool enabled_\l|+  TestPlugin(const Simple\lString &name)\l+ virtual ~TestPlugin()\l+ virtual void preTestAction\l(UtestShell &, TestResult &)\l+ virtual void postTestAction\l(UtestShell &, TestResult &)\l+ virtual bool parseArguments\l(int, const char *const\l *, int)\l+ virtual void runAllPreTest\lAction(UtestShell &, TestResult &)\l+ virtual void runAllPostTest\lAction(UtestShell &, TestResult &)\l+ virtual bool parseAllArguments\l(int ac, const char *const\l *av, int index)\l+ virtual bool parseAllArguments\l(int ac, char **av, int index)\l+ virtual TestPlugin\l * addPlugin(TestPlugin *)\land 7 more...\l#  TestPlugin(TestPlugin\l *next_)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classTestPlugin.html",tooltip=" "];
  Node2 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -next_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -name_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{SimpleString\n|+ static const size_t npos\l- char * buffer_\l- size_t bufferSize_\l|+  SimpleString(const\l char *value=\"\")\l+  SimpleString(const\l char *value, size_t\l repeatCount)\l+  SimpleString(const\l SimpleString &other)\l+  ~SimpleString()\l+ SimpleString & operator\l=(const SimpleString &other)\l+ SimpleString operator\l+(const SimpleString\l &) const\l+ SimpleString & operator\l+=(const SimpleString &)\l+ SimpleString & operator\l+=(const char *)\l+ char at(size_t pos)\l const\l+ size_t find(char ch)\l const\land 19 more...\l+ static void padStringsTo\lSameLength(SimpleString\l &str1, SimpleString &str2,\l char ch)\l+ static TestMemoryAllocator\l * getStringAllocator()\l+ static void setStringAllocator\l(TestMemoryAllocator *allocator)\l+ static int AtoI(const\l char *str)\l+ static unsigned AtoU\l(const char *str)\l+ static int StrCmp(const\l char *s1, const char *s2)\l+ static size_t StrLen\l(const char *)\l+ static int StrNCmp\l(const char *s1, const\l char *s2, size_t n)\l+ static char * StrNCpy\l(char *s1, const char\l *s2, size_t n)\l+ static const char *\l StrStr(const char *s1,\l const char *s2)\l+ static char ToLower\l(char ch)\l+ static int MemCmp(const\l void *s1, const void\l *s2, size_t n)\l+ static char * allocString\lBuffer(size_t size, const\l char *file, size_t line)\l+ static void deallocString\lBuffer(char *str, size\l_t size, const char *file,\l size_t line)\l- const char * getBuffer\l() const\l- void deallocateInternalBuffer()\l- void setInternalBufferAs\lEmptyString()\l- void setInternalBufferTo\lNewBuffer(size_t bufferSize)\l- void setInternalBufferTo\l(char *buffer, size_t bufferSize)\l- void copyBufferToNewInternal\lBuffer(const char *otherBuffer)\l- void copyBufferToNewInternal\lBuffer(const char *otherBuffer,\l size_t bufferSize)\l- void copyBufferToNewInternal\lBuffer(const SimpleString\l &otherBuffer)\l- char * getEmptyString\l() const\l- size_t getPrintableSize\l() const\l- static char * copyToNewBuffer\l(const char *bufferToCopy,\l size_t bufferSize)\l- static bool isDigit\l(char ch)\l- static bool isSpace\l(char ch)\l- static bool isUpper\l(char ch)\l- static bool isControl\l(char ch)\l- static bool isControlWith\lShortEscapeSequence(char ch)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classSimpleString.html",tooltip=" "];
  Node4 -> Node3 [color="grey25",fontsize="10",style="solid",label=" -stringAllocator_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{TestMemoryAllocator\n|# const char * name_\l# const char * alloc\l_name_\l# const char * free_name_\l# bool hasBeenDestroyed_\l|+  TestMemoryAllocator\l(const char *name_str\l=\"generic\", const char\l *alloc_name_str=\"alloc\",\l const char *free_name_str\l=\"free\")\l+ virtual ~TestMemoryAllocator()\l+ bool hasBeenDestroyed()\l+ virtual char * alloc\l_memory(size_t size,\l const char *file, size\l_t line)\l+ virtual void free_memory\l(char *memory, size_t size,\l const char *file, size_t line)\l+ virtual const char\l * name() const\l+ virtual const char\l * alloc_name() const\l+ virtual const char\l * free_name() const\l+ virtual bool isOfEqualType\l(TestMemoryAllocator *allocator)\l+ virtual char * allocMemory\lLeakNode(size_t size)\l+ virtual void freeMemoryLeak\lNode(char *memory)\l+ virtual TestMemoryAllocator\l * actualAllocator()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classTestMemoryAllocator.html",tooltip=" "];
  Node5 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -memLeakDetector_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{MemoryLeakDetector\n|- MemLeakPeriod current\l_period_\l- bool doAllocationTypeChecking_\l- unsigned allocationSequence\lNumber_\l- unsigned char current\l_allocation_stage_\l|+  MemoryLeakDetector\l(MemoryLeakFailure *reporter)\l+ virtual ~MemoryLeakDetector()\l+ void enable()\l+ void disable()\l+ void disableAllocationType\lChecking()\l+ void enableAllocationType\lChecking()\l+ void startChecking()\l+ void stopChecking()\l+ unsigned char getCurrent\lAllocationStage() const\l+ void increaseAllocationStage()\land 15 more...\l- char * allocateMemoryWith\lAccountingInformation(TestMemory\lAllocator *allocator, size_t\l size, const char *file, size\l_t line, bool allocatNodesSeperately)\l- char * reallocateMemoryWith\lAccountingInformation(TestMemory\lAllocator *allocator, char *memory,\l size_t size, const char *file, size\l_t line, bool allocatNodesSeperately)\l- MemoryLeakDetectorNode\l * createMemoryLeakAccounting\lInformation(TestMemoryAllocator\l *allocator, size_t size, char\l *memory, bool allocatNodesSeperately)\l- bool validMemoryCorruption\lInformation(char *memory)\l- bool matchingAllocation\l(TestMemoryAllocator *alloc\l_allocator, TestMemoryAllocator\l *free_allocator)\l- void storeLeakInformation\l(MemoryLeakDetectorNode\l *node, char *new_memory,\l size_t size, TestMemoryAllocator\l *allocator, const char *file,\l size_t line)\l- void ConstructMemoryLeak\lReport(MemLeakPeriod period)\l- size_t sizeOfMemoryWithCorruption\lInfo(size_t size)\l- MemoryLeakDetectorNode\l * getNodeFromMemoryPointer\l(char *memory, size_t size)\l- char * reallocateMemoryAnd\lLeakInformation(TestMemoryAllocator\l *allocator, char *memory, size\l_t size, const char *file, size\l_t line, bool allocatNodesSeperately)\l- void addMemoryCorruption\lInformation(char *memory)\l- void checkForCorruption\l(MemoryLeakDetectorNode\l *node, const char *file,\l size_t line, TestMemoryAllocator\l *allocator, bool allocateNodesSeperately)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMemoryLeakDetector.html",tooltip=" "];
  Node6 -> Node5 [color="grey25",fontsize="10",style="solid",label=" -reporter_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{MemoryLeakFailure\n||+ virtual ~MemoryLeakFailure()\l+ virtual void fail(char\l *fail_string)=0\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMemoryLeakFailure.html",tooltip=" "];
  Node7 -> Node5 [color="grey25",fontsize="10",style="solid",label=" -outputBuffer_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{MemoryLeakOutputStringBuffer\n|- size_t total_leaks_\l- bool giveWarningOnUsingMalloc_\l|+  MemoryLeakOutputStringBuffer()\l+ void clear()\l+ void startMemoryLeakReporting()\l+ void stopMemoryLeakReporting()\l+ void reportMemoryLeak\l(MemoryLeakDetectorNode\l *leak)\l+ void reportDeallocateNon\lAllocatedMemoryFailure\l(const char *freeFile,\l size_t freeLine, TestMemoryAllocator\l *freeAllocator, MemoryLeakFailure\l *reporter)\l+ void reportMemoryCorruption\lFailure(MemoryLeakDetectorNode\l *node, const char *freeFile,\l size_t freeLineNumber, TestMemoryAllocator\l *freeAllocator, MemoryLeakFailure *reporter)\l+ void reportAllocationDeallocation\lMismatchFailure(MemoryLeakDetectorNode\l *node, const char *freeFile, size\l_t freeLineNumber, TestMemoryAllocator\l *freeAllocator, MemoryLeakFailure *reporter)\l+ char * toString()\l- void addAllocationLocation\l(const char *allocationFile,\l size_t allocationLineNumber,\l size_t allocationSize, TestMemoryAllocator\l *allocator)\l- void addDeallocationLocation\l(const char *freeFile, size\l_t freeLineNumber, TestMemoryAllocator\l *allocator)\l- void addMemoryLeakHeader()\l- void addMemoryLeakFooter\l(size_t totalAmountOfLeaks)\l- void addWarningForUsingMalloc()\l- void addNoMemoryLeaksMessage()\l- void addErrorMessageForToo\lMuchLeaks()\l- void reportFailure\l(const char *message,\l const char *allocFile,\l size_t allocLine, size\l_t allocSize, TestMemoryAllocator\l *allocAllocator, const char *freeFile,\l size_t freeLine, TestMemoryAllocator\l *freeAllocator, MemoryLeakFailure *reporter)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMemoryLeakOutputStringBuffer.html",tooltip=" "];
  Node8 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -outputBuffer_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{SimpleStringBuffer\n|- char buffer_\l- size_t positions_filled_\l- size_t write_limit_\l|+  SimpleStringBuffer()\l+ void clear()\l+ void add(const char\l *format,...) _check\l_format_(printf\l+ void void addMemoryDump\l(const void *memory, size\l_t memorySize)\l+ char * toString()\l+ void setWriteLimit\l(size_t write_limit)\l+ void resetWriteLimit()\l+ bool reachedItsCapacity()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structSimpleStringBuffer.html",tooltip=" "];
  Node9 -> Node5 [color="grey25",fontsize="10",style="solid",label=" -memoryTable_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 [label="{MemoryLeakDetectorTable\n||+ void clearAllAccounting\l(MemLeakPeriod period)\l+ void addNewNode(MemoryLeak\lDetectorNode *node)\l+ MemoryLeakDetectorNode\l * retrieveNode(char *memory)\l+ MemoryLeakDetectorNode\l * removeNode(char *memory)\l+ size_t getTotalLeaks\l(MemLeakPeriod period)\l+ MemoryLeakDetectorNode\l * getFirstLeak(MemLeakPeriod\l period)\l+ MemoryLeakDetectorNode\l * getFirstLeakForAllocation\lStage(unsigned char allocation_stage)\l+ MemoryLeakDetectorNode\l * getNextLeak(MemoryLeakDetector\lNode *leak, MemLeakPeriod period)\l+ MemoryLeakDetectorNode\l * getNextLeakForAllocationStage\l(MemoryLeakDetectorNode *leak,\l unsigned char allocation_stage)\l- unsigned long hash\l(char *memory)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structMemoryLeakDetectorTable.html",tooltip=" "];
  Node10 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -table_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 [label="{MemoryLeakDetectorList\n||+  MemoryLeakDetectorList()\l+ void addNewNode(MemoryLeak\lDetectorNode *node)\l+ MemoryLeakDetectorNode\l * retrieveNode(char *memory)\l+ MemoryLeakDetectorNode\l * removeNode(char *memory)\l+ MemoryLeakDetectorNode\l * getFirstLeak(MemLeakPeriod\l period)\l+ MemoryLeakDetectorNode\l * getFirstLeakForAllocation\lStage(unsigned char allocation_stage)\l+ MemoryLeakDetectorNode\l * getNextLeak(MemoryLeakDetector\lNode *node, MemLeakPeriod period)\l+ MemoryLeakDetectorNode\l * getNextLeakForAllocationStage\l(MemoryLeakDetectorNode *node,\l unsigned char allocation_stage)\l+ MemoryLeakDetectorNode\l * getLeakFrom(MemoryLeakDetector\lNode *node, MemLeakPeriod period)\l+ MemoryLeakDetectorNode\l * getLeakForAllocationStage\lFrom(MemoryLeakDetectorNode\l *node, unsigned char allocation_stage)\l+ size_t getTotalLeaks\l(MemLeakPeriod period)\l+ void clearAllAccounting\l(MemLeakPeriod period)\l+ bool isInPeriod(MemoryLeak\lDetectorNode *node, MemLeakPeriod\l period)\l+ bool isInAllocationStage\l(MemoryLeakDetectorNode\l *node, unsigned char allocation_stage)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structMemoryLeakDetectorList.html",tooltip=" "];
  Node11 -> Node10 [color="grey25",fontsize="10",style="solid",label=" -head_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 [label="{MemoryLeakDetectorNode\n|+ size_t size_\l+ unsigned number_\l+ char * memory_\l+ const char * file_\l+ size_t line_\l+ MemLeakPeriod period_\l+ unsigned char allocation\l_stage_\l|+  MemoryLeakDetectorNode()\l+ void init(char *memory,\l unsigned number, size\l_t size, TestMemoryAllocator\l *allocator, MemLeakPeriod\l period, unsigned char allocation\l_stage, const char *file, size_t line)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structMemoryLeakDetectorNode.html",tooltip=" "];
  Node4 -> Node11 [color="grey25",fontsize="10",style="solid",label=" +allocator_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 -> Node11 [color="grey25",fontsize="10",style="solid",label=" -next_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node12 -> Node5 [color="grey25",fontsize="10",style="solid",label=" -mutex_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node12 [label="{SimpleMutex\n|- PlatformSpecificMutex\l psMtx\l|+  SimpleMutex(void)\l+  ~SimpleMutex(void)\l+ void Lock(void)\l+ void Unlock(void)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classSimpleMutex.html",tooltip=" "];
  Node1 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -firstPlugin_" ,arrowhead="odiamond",fontname="Helvetica"];
}
