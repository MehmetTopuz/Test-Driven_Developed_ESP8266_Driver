
ESP8266-TCP-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023350  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000065b8  08023530  08023530  00033530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029ae8  08029ae8  0004033c  2**0
                  CONTENTS
  4 .ARM          00000008  08029ae8  08029ae8  00039ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029af0  08029af0  0004033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08029af0  08029af0  00039af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  08029b00  08029b00  00039b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  08029b10  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c5c  2000033c  08029e4c  0004033c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f98  08029e4c  00040f98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006ab66  00000000  00000000  0004036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000c113  00000000  00000000  000aaed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000044f0  00000000  00000000  000b6fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000042d0  00000000  00000000  000bb4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d891  00000000  00000000  000bf7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d4ff  00000000  00000000  000ed039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001143b3  00000000  00000000  0011a538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022e8eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00014d70  00000000  00000000  0022e940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000033c 	.word	0x2000033c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0802350c 	.word	0x0802350c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000340 	.word	0x20000340
 800021c:	0802350c 	.word	0x0802350c

08000220 <setjmp>:
 8000220:	46ec      	mov	ip, sp
 8000222:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000226:	f04f 0000 	mov.w	r0, #0
 800022a:	4770      	bx	lr

0800022c <longjmp>:
 800022c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000230:	46e5      	mov	sp, ip
 8000232:	0008      	movs	r0, r1
 8000234:	bf08      	it	eq
 8000236:	2001      	moveq	r0, #1
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <strcmp>:
 800024c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000254:	2a01      	cmp	r2, #1
 8000256:	bf28      	it	cs
 8000258:	429a      	cmpcs	r2, r3
 800025a:	d0f7      	beq.n	800024c <strcmp>
 800025c:	1ad0      	subs	r0, r2, r3
 800025e:	4770      	bx	lr

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__gedf2>:
 8000678:	f04f 3cff 	mov.w	ip, #4294967295
 800067c:	e006      	b.n	800068c <__cmpdf2+0x4>
 800067e:	bf00      	nop

08000680 <__ledf2>:
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	e002      	b.n	800068c <__cmpdf2+0x4>
 8000686:	bf00      	nop

08000688 <__cmpdf2>:
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800069c:	bf18      	it	ne
 800069e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006a2:	d01b      	beq.n	80006dc <__cmpdf2+0x54>
 80006a4:	b001      	add	sp, #4
 80006a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006aa:	bf0c      	ite	eq
 80006ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006b0:	ea91 0f03 	teqne	r1, r3
 80006b4:	bf02      	ittt	eq
 80006b6:	ea90 0f02 	teqeq	r0, r2
 80006ba:	2000      	moveq	r0, #0
 80006bc:	4770      	bxeq	lr
 80006be:	f110 0f00 	cmn.w	r0, #0
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf58      	it	pl
 80006c8:	4299      	cmppl	r1, r3
 80006ca:	bf08      	it	eq
 80006cc:	4290      	cmpeq	r0, r2
 80006ce:	bf2c      	ite	cs
 80006d0:	17d8      	asrcs	r0, r3, #31
 80006d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006d6:	f040 0001 	orr.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d102      	bne.n	80006ec <__cmpdf2+0x64>
 80006e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ea:	d107      	bne.n	80006fc <__cmpdf2+0x74>
 80006ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006f4:	d1d6      	bne.n	80006a4 <__cmpdf2+0x1c>
 80006f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006fa:	d0d3      	beq.n	80006a4 <__cmpdf2+0x1c>
 80006fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_cdrcmple>:
 8000704:	4684      	mov	ip, r0
 8000706:	4610      	mov	r0, r2
 8000708:	4662      	mov	r2, ip
 800070a:	468c      	mov	ip, r1
 800070c:	4619      	mov	r1, r3
 800070e:	4663      	mov	r3, ip
 8000710:	e000      	b.n	8000714 <__aeabi_cdcmpeq>
 8000712:	bf00      	nop

08000714 <__aeabi_cdcmpeq>:
 8000714:	b501      	push	{r0, lr}
 8000716:	f7ff ffb7 	bl	8000688 <__cmpdf2>
 800071a:	2800      	cmp	r0, #0
 800071c:	bf48      	it	mi
 800071e:	f110 0f00 	cmnmi.w	r0, #0
 8000722:	bd01      	pop	{r0, pc}

08000724 <__aeabi_dcmpeq>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff fff4 	bl	8000714 <__aeabi_cdcmpeq>
 800072c:	bf0c      	ite	eq
 800072e:	2001      	moveq	r0, #1
 8000730:	2000      	movne	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_dcmplt>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffea 	bl	8000714 <__aeabi_cdcmpeq>
 8000740:	bf34      	ite	cc
 8000742:	2001      	movcc	r0, #1
 8000744:	2000      	movcs	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_dcmple>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffe0 	bl	8000714 <__aeabi_cdcmpeq>
 8000754:	bf94      	ite	ls
 8000756:	2001      	movls	r0, #1
 8000758:	2000      	movhi	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_dcmpge>:
 8000760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000764:	f7ff ffce 	bl	8000704 <__aeabi_cdrcmple>
 8000768:	bf94      	ite	ls
 800076a:	2001      	movls	r0, #1
 800076c:	2000      	movhi	r0, #0
 800076e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000772:	bf00      	nop

08000774 <__aeabi_dcmpgt>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff ffc4 	bl	8000704 <__aeabi_cdrcmple>
 800077c:	bf34      	ite	cc
 800077e:	2001      	movcc	r0, #1
 8000780:	2000      	movcs	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_dcmpun>:
 8000788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800078c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000790:	d102      	bne.n	8000798 <__aeabi_dcmpun+0x10>
 8000792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000796:	d10a      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800079c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a0:	d102      	bne.n	80007a8 <__aeabi_dcmpun+0x20>
 80007a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007a6:	d102      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	f04f 0001 	mov.w	r0, #1
 80007b2:	4770      	bx	lr

080007b4 <__aeabi_ldivmod>:
 80007b4:	b97b      	cbnz	r3, 80007d6 <__aeabi_ldivmod+0x22>
 80007b6:	b972      	cbnz	r2, 80007d6 <__aeabi_ldivmod+0x22>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	bfbe      	ittt	lt
 80007bc:	2000      	movlt	r0, #0
 80007be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007c2:	e006      	blt.n	80007d2 <__aeabi_ldivmod+0x1e>
 80007c4:	bf08      	it	eq
 80007c6:	2800      	cmpeq	r0, #0
 80007c8:	bf1c      	itt	ne
 80007ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ce:	f04f 30ff 	movne.w	r0, #4294967295
 80007d2:	f000 b9b9 	b.w	8000b48 <__aeabi_idiv0>
 80007d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007de:	2900      	cmp	r1, #0
 80007e0:	db09      	blt.n	80007f6 <__aeabi_ldivmod+0x42>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db1a      	blt.n	800081c <__aeabi_ldivmod+0x68>
 80007e6:	f000 f84d 	bl	8000884 <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr
 80007f6:	4240      	negs	r0, r0
 80007f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db1b      	blt.n	8000838 <__aeabi_ldivmod+0x84>
 8000800:	f000 f840 	bl	8000884 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	4252      	negs	r2, r2
 8000816:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800081a:	4770      	bx	lr
 800081c:	4252      	negs	r2, r2
 800081e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000822:	f000 f82f 	bl	8000884 <__udivmoddi4>
 8000826:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082e:	b004      	add	sp, #16
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	4770      	bx	lr
 8000838:	4252      	negs	r2, r2
 800083a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800083e:	f000 f821 	bl	8000884 <__udivmoddi4>
 8000842:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084a:	b004      	add	sp, #16
 800084c:	4252      	negs	r2, r2
 800084e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000852:	4770      	bx	lr

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b96e 	b.w	8000b48 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468c      	mov	ip, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8083 	bne.w	800099a <__udivmoddi4+0x116>
 8000894:	428a      	cmp	r2, r1
 8000896:	4617      	mov	r7, r2
 8000898:	d947      	bls.n	800092a <__udivmoddi4+0xa6>
 800089a:	fab2 f282 	clz	r2, r2
 800089e:	b142      	cbz	r2, 80008b2 <__udivmoddi4+0x2e>
 80008a0:	f1c2 0020 	rsb	r0, r2, #32
 80008a4:	fa24 f000 	lsr.w	r0, r4, r0
 80008a8:	4091      	lsls	r1, r2
 80008aa:	4097      	lsls	r7, r2
 80008ac:	ea40 0c01 	orr.w	ip, r0, r1
 80008b0:	4094      	lsls	r4, r2
 80008b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008b6:	0c23      	lsrs	r3, r4, #16
 80008b8:	fbbc f6f8 	udiv	r6, ip, r8
 80008bc:	fa1f fe87 	uxth.w	lr, r7
 80008c0:	fb08 c116 	mls	r1, r8, r6, ip
 80008c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c8:	fb06 f10e 	mul.w	r1, r6, lr
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x60>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d6:	f080 8119 	bcs.w	8000b0c <__udivmoddi4+0x288>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 8116 	bls.w	8000b0c <__udivmoddi4+0x288>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ec:	fb08 3310 	mls	r3, r8, r0, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d909      	bls.n	8000910 <__udivmoddi4+0x8c>
 80008fc:	193c      	adds	r4, r7, r4
 80008fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000902:	f080 8105 	bcs.w	8000b10 <__udivmoddi4+0x28c>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f240 8102 	bls.w	8000b10 <__udivmoddi4+0x28c>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000914:	eba4 040e 	sub.w	r4, r4, lr
 8000918:	2600      	movs	r6, #0
 800091a:	b11d      	cbz	r5, 8000924 <__udivmoddi4+0xa0>
 800091c:	40d4      	lsrs	r4, r2
 800091e:	2300      	movs	r3, #0
 8000920:	e9c5 4300 	strd	r4, r3, [r5]
 8000924:	4631      	mov	r1, r6
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	b902      	cbnz	r2, 800092e <__udivmoddi4+0xaa>
 800092c:	deff      	udf	#255	; 0xff
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	2a00      	cmp	r2, #0
 8000934:	d150      	bne.n	80009d8 <__udivmoddi4+0x154>
 8000936:	1bcb      	subs	r3, r1, r7
 8000938:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093c:	fa1f f887 	uxth.w	r8, r7
 8000940:	2601      	movs	r6, #1
 8000942:	fbb3 fcfe 	udiv	ip, r3, lr
 8000946:	0c21      	lsrs	r1, r4, #16
 8000948:	fb0e 331c 	mls	r3, lr, ip, r3
 800094c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000950:	fb08 f30c 	mul.w	r3, r8, ip
 8000954:	428b      	cmp	r3, r1
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0xe4>
 8000958:	1879      	adds	r1, r7, r1
 800095a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0xe2>
 8000960:	428b      	cmp	r3, r1
 8000962:	f200 80e9 	bhi.w	8000b38 <__udivmoddi4+0x2b4>
 8000966:	4684      	mov	ip, r0
 8000968:	1ac9      	subs	r1, r1, r3
 800096a:	b2a3      	uxth	r3, r4
 800096c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000970:	fb0e 1110 	mls	r1, lr, r0, r1
 8000974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000978:	fb08 f800 	mul.w	r8, r8, r0
 800097c:	45a0      	cmp	r8, r4
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0x10c>
 8000980:	193c      	adds	r4, r7, r4
 8000982:	f100 33ff 	add.w	r3, r0, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x10a>
 8000988:	45a0      	cmp	r8, r4
 800098a:	f200 80d9 	bhi.w	8000b40 <__udivmoddi4+0x2bc>
 800098e:	4618      	mov	r0, r3
 8000990:	eba4 0408 	sub.w	r4, r4, r8
 8000994:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000998:	e7bf      	b.n	800091a <__udivmoddi4+0x96>
 800099a:	428b      	cmp	r3, r1
 800099c:	d909      	bls.n	80009b2 <__udivmoddi4+0x12e>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	f000 80b1 	beq.w	8000b06 <__udivmoddi4+0x282>
 80009a4:	2600      	movs	r6, #0
 80009a6:	e9c5 0100 	strd	r0, r1, [r5]
 80009aa:	4630      	mov	r0, r6
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	fab3 f683 	clz	r6, r3
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d14a      	bne.n	8000a50 <__udivmoddi4+0x1cc>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0x140>
 80009be:	4282      	cmp	r2, r0
 80009c0:	f200 80b8 	bhi.w	8000b34 <__udivmoddi4+0x2b0>
 80009c4:	1a84      	subs	r4, r0, r2
 80009c6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	468c      	mov	ip, r1
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d0a8      	beq.n	8000924 <__udivmoddi4+0xa0>
 80009d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0xa0>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa20 f603 	lsr.w	r6, r0, r3
 80009e0:	4097      	lsls	r7, r2
 80009e2:	fa01 f002 	lsl.w	r0, r1, r2
 80009e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	4330      	orrs	r0, r6
 80009ee:	0c03      	lsrs	r3, r0, #16
 80009f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009f4:	fa1f f887 	uxth.w	r8, r7
 80009f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a00:	fb06 f108 	mul.w	r1, r6, r8
 8000a04:	4299      	cmp	r1, r3
 8000a06:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x19c>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a12:	f080 808d 	bcs.w	8000b30 <__udivmoddi4+0x2ac>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 808a 	bls.w	8000b30 <__udivmoddi4+0x2ac>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	443b      	add	r3, r7
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b281      	uxth	r1, r0
 8000a24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb00 f308 	mul.w	r3, r0, r8
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x1c4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a3e:	d273      	bcs.n	8000b28 <__udivmoddi4+0x2a4>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d971      	bls.n	8000b28 <__udivmoddi4+0x2a4>
 8000a44:	3802      	subs	r0, #2
 8000a46:	4439      	add	r1, r7
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a4e:	e778      	b.n	8000942 <__udivmoddi4+0xbe>
 8000a50:	f1c6 0c20 	rsb	ip, r6, #32
 8000a54:	fa03 f406 	lsl.w	r4, r3, r6
 8000a58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a62:	fa01 f306 	lsl.w	r3, r1, r6
 8000a66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a6e:	431f      	orrs	r7, r3
 8000a70:	0c3b      	lsrs	r3, r7, #16
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fa1f f884 	uxth.w	r8, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a82:	fb09 fa08 	mul.w	sl, r9, r8
 8000a86:	458a      	cmp	sl, r1
 8000a88:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x220>
 8000a92:	1861      	adds	r1, r4, r1
 8000a94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a98:	d248      	bcs.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9a:	458a      	cmp	sl, r1
 8000a9c:	d946      	bls.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa2:	4421      	add	r1, r4
 8000aa4:	eba1 010a 	sub.w	r1, r1, sl
 8000aa8:	b2bf      	uxth	r7, r7
 8000aaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000aae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ab6:	fb00 f808 	mul.w	r8, r0, r8
 8000aba:	45b8      	cmp	r8, r7
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x24a>
 8000abe:	19e7      	adds	r7, r4, r7
 8000ac0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac4:	d22e      	bcs.n	8000b24 <__udivmoddi4+0x2a0>
 8000ac6:	45b8      	cmp	r8, r7
 8000ac8:	d92c      	bls.n	8000b24 <__udivmoddi4+0x2a0>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4427      	add	r7, r4
 8000ace:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad2:	eba7 0708 	sub.w	r7, r7, r8
 8000ad6:	fba0 8902 	umull	r8, r9, r0, r2
 8000ada:	454f      	cmp	r7, r9
 8000adc:	46c6      	mov	lr, r8
 8000ade:	4649      	mov	r1, r9
 8000ae0:	d31a      	bcc.n	8000b18 <__udivmoddi4+0x294>
 8000ae2:	d017      	beq.n	8000b14 <__udivmoddi4+0x290>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x27a>
 8000ae6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aea:	eb67 0701 	sbc.w	r7, r7, r1
 8000aee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000af2:	40f2      	lsrs	r2, r6
 8000af4:	ea4c 0202 	orr.w	r2, ip, r2
 8000af8:	40f7      	lsrs	r7, r6
 8000afa:	e9c5 2700 	strd	r2, r7, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e70b      	b.n	8000924 <__udivmoddi4+0xa0>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e9      	b.n	80008e4 <__udivmoddi4+0x60>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6fd      	b.n	8000910 <__udivmoddi4+0x8c>
 8000b14:	4543      	cmp	r3, r8
 8000b16:	d2e5      	bcs.n	8000ae4 <__udivmoddi4+0x260>
 8000b18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7df      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b24:	4608      	mov	r0, r1
 8000b26:	e7d2      	b.n	8000ace <__udivmoddi4+0x24a>
 8000b28:	4660      	mov	r0, ip
 8000b2a:	e78d      	b.n	8000a48 <__udivmoddi4+0x1c4>
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	e7b9      	b.n	8000aa4 <__udivmoddi4+0x220>
 8000b30:	4666      	mov	r6, ip
 8000b32:	e775      	b.n	8000a20 <__udivmoddi4+0x19c>
 8000b34:	4630      	mov	r0, r6
 8000b36:	e74a      	b.n	80009ce <__udivmoddi4+0x14a>
 8000b38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b3c:	4439      	add	r1, r7
 8000b3e:	e713      	b.n	8000968 <__udivmoddi4+0xe4>
 8000b40:	3802      	subs	r0, #2
 8000b42:	443c      	add	r4, r7
 8000b44:	e724      	b.n	8000990 <__udivmoddi4+0x10c>
 8000b46:	bf00      	nop

08000b48 <__aeabi_idiv0>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f000 fed3 	bl	800192c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a32      	ldr	r2, [pc, #200]	; (8000c7c <HAL_UART_MspInit+0xe8>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	4a31      	ldr	r2, [pc, #196]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a2b      	ldr	r2, [pc, #172]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f000 fc16 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c08:	e034      	b.n	8000c74 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <HAL_UART_MspInit+0xf0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d12f      	bne.n	8000c74 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480a      	ldr	r0, [pc, #40]	; (8000c88 <HAL_UART_MspInit+0xf4>)
 8000c60:	f000 fbe8 	bl	8001434 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2025      	movs	r0, #37	; 0x25
 8000c6a:	f000 faee 	bl	800124a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c6e:	2025      	movs	r0, #37	; 0x25
 8000c70:	f000 fb05 	bl	800127e <HAL_NVIC_EnableIRQ>
}
 8000c74:	bf00      	nop
 8000c76:	3730      	adds	r7, #48	; 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40008000 	.word	0x40008000
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40013800 	.word	0x40013800
 8000c88:	48000800 	.word	0x48000800

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f99c 	bl	8001014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <USART1_IRQHandler+0x10>)
 8000ce6:	f001 fe01 	bl	80028ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	2000040c 	.word	0x2000040c

08000cf4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cf8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cfc:	f000 fd4e 	bl	800179c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d10:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d013      	beq.n	8000d44 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d20:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d24:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00b      	beq.n	8000d44 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d2c:	e000      	b.n	8000d30 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d2e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f9      	beq.n	8000d2e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d3a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d44:	687b      	ldr	r3, [r7, #4]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
	return 1;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_kill>:

int _kill(int pid, int sig)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d6c:	f01e fece 	bl	801fb0c <__errno>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2216      	movs	r2, #22
 8000d74:	601a      	str	r2, [r3, #0]
	return -1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_exit>:

void _exit (int status)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ffe7 	bl	8000d62 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d94:	e7fe      	b.n	8000d94 <_exit+0x12>

08000d96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e00a      	b.n	8000dbe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000da8:	f3af 8000 	nop.w
 8000dac:	4601      	mov	r1, r0
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1c5a      	adds	r2, r3, #1
 8000db2:	60ba      	str	r2, [r7, #8]
 8000db4:	b2ca      	uxtb	r2, r1
 8000db6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	dbf0      	blt.n	8000da8 <_read+0x12>
	}

return len;
 8000dc6:	687b      	ldr	r3, [r7, #4]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	e009      	b.n	8000df6 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	60ba      	str	r2, [r7, #8]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff8a 	bl	8000d04 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3301      	adds	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dbf1      	blt.n	8000de2 <_write+0x12>
	}
	return len;
 8000dfe:	687b      	ldr	r3, [r7, #4]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <_close>:

int _close(int file)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	return -1;
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e30:	605a      	str	r2, [r3, #4]
	return 0;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_isatty>:

int _isatty(int file)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	return 1;
 8000e48:	2301      	movs	r3, #1
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b085      	sub	sp, #20
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
	return 0;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_open>:

int _open(char *path, int flags, ...)
{
 8000e70:	b40e      	push	{r1, r2, r3}
 8000e72:	b480      	push	{r7}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	b003      	add	sp, #12
 8000e8a:	4770      	bx	lr

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f01e fe26 	bl	801fb0c <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20020000 	.word	0x20020000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	2000035c 	.word	0x2000035c
 8000ef4:	20000f98 	.word	0x20000f98

08000ef8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f1e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f22:	490e      	ldr	r1, [pc, #56]	; (8000f5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <LoopForever+0xe>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f38:	4c0b      	ldr	r4, [pc, #44]	; (8000f68 <LoopForever+0x16>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f46:	f7ff ffd7 	bl	8000ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f01f f9fd 	bl	8020348 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f4e:	f003 f88d 	bl	800406c <main>

08000f52 <LoopForever>:

LoopForever:
    b LoopForever
 8000f52:	e7fe      	b.n	8000f52 <LoopForever>
  ldr   r0, =_estack
 8000f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8000f60:	08029b10 	.word	0x08029b10
  ldr r2, =_sbss
 8000f64:	2000033c 	.word	0x2000033c
  ldr r4, =_ebss
 8000f68:	20000f98 	.word	0x20000f98

08000f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC1_2_IRQHandler>

08000f6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 f95b 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 f80e 	bl	8000fa0 <HAL_InitTick>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	e001      	b.n	8000f94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f90:	f7ff fddc 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f94:	79fb      	ldrb	r3, [r7, #7]

}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_InitTick+0x68>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d022      	beq.n	8000ffa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_InitTick+0x6c>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_InitTick+0x68>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f966 	bl	800129a <HAL_SYSTICK_Config>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10f      	bne.n	8000ff4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b0f      	cmp	r3, #15
 8000fd8:	d809      	bhi.n	8000fee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe2:	f000 f932 	bl	800124a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <HAL_InitTick+0x70>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e007      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e004      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e001      	b.n	8000ffe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000000c 	.word	0x2000000c
 800100c:	20000004 	.word	0x20000004
 8001010:	20000008 	.word	0x20000008

08001014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_IncTick+0x1c>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_IncTick+0x20>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4413      	add	r3, r2
 8001022:	4a03      	ldr	r2, [pc, #12]	; (8001030 <HAL_IncTick+0x1c>)
 8001024:	6013      	str	r3, [r2, #0]
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	20000f84 	.word	0x20000f84
 8001034:	2000000c 	.word	0x2000000c

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000f84 	.word	0x20000f84

08001050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff ffee 	bl	8001038 <HAL_GetTick>
 800105c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001068:	d004      	beq.n	8001074 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_Delay+0x40>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	4413      	add	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001074:	bf00      	nop
 8001076:	f7ff ffdf 	bl	8001038 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	429a      	cmp	r2, r3
 8001084:	d8f7      	bhi.n	8001076 <HAL_Delay+0x26>
  {
  }
}
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2000000c 	.word	0x2000000c

08001094 <__NVIC_SetPriorityGrouping>:
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b0:	4013      	ands	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	60d3      	str	r3, [r2, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_GetPriorityGrouping>:
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <__NVIC_GetPriorityGrouping+0x18>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	f003 0307 	and.w	r3, r3, #7
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_EnableIRQ>:
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	db0b      	blt.n	8001122 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	f003 021f 	and.w	r2, r3, #31
 8001110:	4907      	ldr	r1, [pc, #28]	; (8001130 <__NVIC_EnableIRQ+0x38>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	095b      	lsrs	r3, r3, #5
 8001118:	2001      	movs	r0, #1
 800111a:	fa00 f202 	lsl.w	r2, r0, r2
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000e100 	.word	0xe000e100

08001134 <__NVIC_SetPriority>:
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	; (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	; (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <SysTick_Config>:
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001200:	d301      	bcc.n	8001206 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001202:	2301      	movs	r3, #1
 8001204:	e00f      	b.n	8001226 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <SysTick_Config+0x40>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120e:	210f      	movs	r1, #15
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f7ff ff8e 	bl	8001134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <SysTick_Config+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <SysTick_Config+0x40>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff29 	bl	8001094 <__NVIC_SetPriorityGrouping>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff40 	bl	80010dc <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff90 	bl	8001188 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5f 	bl	8001134 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff33 	bl	80010f8 <__NVIC_EnableIRQ>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffa4 	bl	80011f0 <SysTick_Config>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b085      	sub	sp, #20
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d005      	beq.n	80012d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2204      	movs	r2, #4
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e037      	b.n	8001346 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 020e 	bic.w	r2, r2, #14
 80012e4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012f4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0201 	bic.w	r2, r2, #1
 8001304:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f003 021f 	and.w	r2, r3, #31
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	2101      	movs	r1, #1
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001322:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00c      	beq.n	8001346 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001336:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800133a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001344:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d00d      	beq.n	8001398 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2204      	movs	r2, #4
 8001380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	73fb      	strb	r3, [r7, #15]
 8001396:	e047      	b.n	8001428 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 020e 	bic.w	r2, r2, #14
 80013a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0201 	bic.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	2101      	movs	r1, #1
 80013d6:	fa01 f202 	lsl.w	r2, r1, r2
 80013da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00c      	beq.n	8001408 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001406:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	4798      	blx	r3
    }
  }
  return status;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001442:	e15a      	b.n	80016fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2101      	movs	r1, #1
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	fa01 f303 	lsl.w	r3, r1, r3
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 814c 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d00b      	beq.n	800147c <HAL_GPIO_Init+0x48>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d007      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001470:	2b11      	cmp	r3, #17
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b12      	cmp	r3, #18
 800147a:	d130      	bne.n	80014de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014b2:	2201      	movs	r2, #1
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	f003 0201 	and.w	r2, r3, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0xea>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b12      	cmp	r3, #18
 800151c:	d123      	bne.n	8001566 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	08da      	lsrs	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3208      	adds	r2, #8
 8001526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3208      	adds	r2, #8
 8001560:	6939      	ldr	r1, [r7, #16]
 8001562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0203 	and.w	r2, r3, #3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80a6 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a8:	4b5b      	ldr	r3, [pc, #364]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ac:	4a5a      	ldr	r2, [pc, #360]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6613      	str	r3, [r2, #96]	; 0x60
 80015b4:	4b58      	ldr	r3, [pc, #352]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015c0:	4a56      	ldr	r2, [pc, #344]	; (800171c <HAL_GPIO_Init+0x2e8>)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3302      	adds	r3, #2
 80015c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	220f      	movs	r2, #15
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015ea:	d01f      	beq.n	800162c <HAL_GPIO_Init+0x1f8>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a4c      	ldr	r2, [pc, #304]	; (8001720 <HAL_GPIO_Init+0x2ec>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d019      	beq.n	8001628 <HAL_GPIO_Init+0x1f4>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a4b      	ldr	r2, [pc, #300]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d013      	beq.n	8001624 <HAL_GPIO_Init+0x1f0>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a4a      	ldr	r2, [pc, #296]	; (8001728 <HAL_GPIO_Init+0x2f4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d00d      	beq.n	8001620 <HAL_GPIO_Init+0x1ec>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a49      	ldr	r2, [pc, #292]	; (800172c <HAL_GPIO_Init+0x2f8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d007      	beq.n	800161c <HAL_GPIO_Init+0x1e8>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a48      	ldr	r2, [pc, #288]	; (8001730 <HAL_GPIO_Init+0x2fc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d101      	bne.n	8001618 <HAL_GPIO_Init+0x1e4>
 8001614:	2305      	movs	r3, #5
 8001616:	e00a      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001618:	2306      	movs	r3, #6
 800161a:	e008      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800161c:	2304      	movs	r3, #4
 800161e:	e006      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001620:	2303      	movs	r3, #3
 8001622:	e004      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001624:	2302      	movs	r3, #2
 8001626:	e002      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800162c:	2300      	movs	r3, #0
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	f002 0203 	and.w	r2, r2, #3
 8001634:	0092      	lsls	r2, r2, #2
 8001636:	4093      	lsls	r3, r2
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800163e:	4937      	ldr	r1, [pc, #220]	; (800171c <HAL_GPIO_Init+0x2e8>)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800164c:	4b39      	ldr	r3, [pc, #228]	; (8001734 <HAL_GPIO_Init+0x300>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001670:	4a30      	ldr	r2, [pc, #192]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001676:	4b2f      	ldr	r3, [pc, #188]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800169a:	4a26      	ldr	r2, [pc, #152]	; (8001734 <HAL_GPIO_Init+0x300>)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016c4:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	3301      	adds	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	f47f ae9d 	bne.w	8001444 <HAL_GPIO_Init+0x10>
  }
}
 800170a:	bf00      	nop
 800170c:	bf00      	nop
 800170e:	371c      	adds	r7, #28
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40021000 	.word	0x40021000
 800171c:	40010000 	.word	0x40010000
 8001720:	48000400 	.word	0x48000400
 8001724:	48000800 	.word	0x48000800
 8001728:	48000c00 	.word	0x48000c00
 800172c:	48001000 	.word	0x48001000
 8001730:	48001400 	.word	0x48001400
 8001734:	40010400 	.word	0x40010400

08001738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
 8001744:	4613      	mov	r3, r2
 8001746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001748:	787b      	ldrb	r3, [r7, #1]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800174e:	887a      	ldrh	r2, [r7, #2]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001754:	e002      	b.n	800175c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800177a:	887a      	ldrh	r2, [r7, #2]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4013      	ands	r3, r2
 8001780:	041a      	lsls	r2, r3, #16
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43d9      	mvns	r1, r3
 8001786:	887b      	ldrh	r3, [r7, #2]
 8001788:	400b      	ands	r3, r1
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	619a      	str	r2, [r3, #24]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f806 	bl	80017cc <HAL_GPIO_EXTI_Callback>
  }
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d141      	bne.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017f2:	4b4b      	ldr	r3, [pc, #300]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fe:	d131      	bne.n	8001864 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001800:	4b47      	ldr	r3, [pc, #284]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001806:	4a46      	ldr	r2, [pc, #280]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800180c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001810:	4b43      	ldr	r3, [pc, #268]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001818:	4a41      	ldr	r2, [pc, #260]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001820:	4b40      	ldr	r3, [pc, #256]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2232      	movs	r2, #50	; 0x32
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	4a3f      	ldr	r2, [pc, #252]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	0c9b      	lsrs	r3, r3, #18
 8001832:	3301      	adds	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001836:	e002      	b.n	800183e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3b01      	subs	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800183e:	4b38      	ldr	r3, [pc, #224]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800184a:	d102      	bne.n	8001852 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f2      	bne.n	8001838 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001852:	4b33      	ldr	r3, [pc, #204]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800185e:	d158      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e057      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001864:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800186a:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800186c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001874:	e04d      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800187c:	d141      	bne.n	8001902 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188a:	d131      	bne.n	80018f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800188c:	4b24      	ldr	r3, [pc, #144]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800188e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001892:	4a23      	ldr	r2, [pc, #140]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800189c:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018a4:	4a1e      	ldr	r2, [pc, #120]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2232      	movs	r2, #50	; 0x32
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018b8:	fba2 2303 	umull	r2, r3, r2, r3
 80018bc:	0c9b      	lsrs	r3, r3, #18
 80018be:	3301      	adds	r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018c2:	e002      	b.n	80018ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d6:	d102      	bne.n	80018de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f2      	bne.n	80018c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ea:	d112      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e011      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001900:	e007      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001910:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	40007000 	.word	0x40007000
 8001924:	20000004 	.word	0x20000004
 8001928:	431bde83 	.word	0x431bde83

0800192c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193a:	6093      	str	r3, [r2, #8]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40007000 	.word	0x40007000

0800194c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e308      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d075      	beq.n	8001a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800196a:	4ba3      	ldr	r3, [pc, #652]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001974:	4ba0      	ldr	r3, [pc, #640]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	2b0c      	cmp	r3, #12
 8001982:	d102      	bne.n	800198a <HAL_RCC_OscConfig+0x3e>
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2b03      	cmp	r3, #3
 8001988:	d002      	beq.n	8001990 <HAL_RCC_OscConfig+0x44>
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	2b08      	cmp	r3, #8
 800198e:	d10b      	bne.n	80019a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	4b99      	ldr	r3, [pc, #612]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d05b      	beq.n	8001a54 <HAL_RCC_OscConfig+0x108>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d157      	bne.n	8001a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e2e3      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b0:	d106      	bne.n	80019c0 <HAL_RCC_OscConfig+0x74>
 80019b2:	4b91      	ldr	r3, [pc, #580]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a90      	ldr	r2, [pc, #576]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e01d      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x98>
 80019ca:	4b8b      	ldr	r3, [pc, #556]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a8a      	ldr	r2, [pc, #552]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a87      	ldr	r2, [pc, #540]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019e4:	4b84      	ldr	r3, [pc, #528]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a83      	ldr	r2, [pc, #524]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b81      	ldr	r3, [pc, #516]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a80      	ldr	r2, [pc, #512]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fb18 	bl	8001038 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fb14 	bl	8001038 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e2a8      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a1e:	4b76      	ldr	r3, [pc, #472]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0xc0>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fb04 	bl	8001038 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fb00 	bl	8001038 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e294      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a46:	4b6c      	ldr	r3, [pc, #432]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0xe8>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d075      	beq.n	8001b4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a62:	4b65      	ldr	r3, [pc, #404]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a6c:	4b62      	ldr	r3, [pc, #392]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	2b0c      	cmp	r3, #12
 8001a7a:	d102      	bne.n	8001a82 <HAL_RCC_OscConfig+0x136>
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d002      	beq.n	8001a88 <HAL_RCC_OscConfig+0x13c>
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d11f      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a88:	4b5b      	ldr	r3, [pc, #364]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x154>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e267      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa0:	4b55      	ldr	r3, [pc, #340]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	061b      	lsls	r3, r3, #24
 8001aae:	4952      	ldr	r1, [pc, #328]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ab4:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <HAL_RCC_OscConfig+0x2b0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fa71 	bl	8000fa0 <HAL_InitTick>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d043      	beq.n	8001b4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e253      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d023      	beq.n	8001b18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad0:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a48      	ldr	r2, [pc, #288]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff faac 	bl	8001038 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae4:	f7ff faa8 	bl	8001038 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e23c      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af6:	4b40      	ldr	r3, [pc, #256]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	061b      	lsls	r3, r3, #24
 8001b10:	4939      	ldr	r1, [pc, #228]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
 8001b16:	e01a      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b18:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a36      	ldr	r2, [pc, #216]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff fa88 	bl	8001038 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fa84 	bl	8001038 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e218      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b3e:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x1e0>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d03c      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d01c      	beq.n	8001b9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b62:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b68:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b72:	f7ff fa61 	bl	8001038 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7a:	f7ff fa5d 	bl	8001038 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1f1      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0ef      	beq.n	8001b7a <HAL_RCC_OscConfig+0x22e>
 8001b9a:	e01b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba2:	4a15      	ldr	r2, [pc, #84]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7ff fa44 	bl	8001038 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fa40 	bl	8001038 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e1d4      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1ef      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80ab 	beq.w	8001d38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001be6:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d106      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2b4>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e005      	b.n	8001c02 <HAL_RCC_OscConfig+0x2b6>
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	2300      	movs	r3, #0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00d      	beq.n	8001c22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	4baf      	ldr	r3, [pc, #700]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	4aae      	ldr	r2, [pc, #696]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6593      	str	r3, [r2, #88]	; 0x58
 8001c12:	4bac      	ldr	r3, [pc, #688]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c22:	4ba9      	ldr	r3, [pc, #676]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d118      	bne.n	8001c60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c2e:	4ba6      	ldr	r3, [pc, #664]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4aa5      	ldr	r2, [pc, #660]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3a:	f7ff f9fd 	bl	8001038 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c42:	f7ff f9f9 	bl	8001038 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e18d      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c54:	4b9c      	ldr	r3, [pc, #624]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d108      	bne.n	8001c7a <HAL_RCC_OscConfig+0x32e>
 8001c68:	4b96      	ldr	r3, [pc, #600]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6e:	4a95      	ldr	r2, [pc, #596]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c78:	e024      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	d110      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x358>
 8001c82:	4b90      	ldr	r3, [pc, #576]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c88:	4a8e      	ldr	r2, [pc, #568]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c92:	4b8c      	ldr	r3, [pc, #560]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c98:	4a8a      	ldr	r2, [pc, #552]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca2:	e00f      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001ca4:	4b87      	ldr	r3, [pc, #540]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001caa:	4a86      	ldr	r2, [pc, #536]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb4:	4b83      	ldr	r3, [pc, #524]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	4a82      	ldr	r2, [pc, #520]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cbc:	f023 0304 	bic.w	r3, r3, #4
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d016      	beq.n	8001cfa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f9b4 	bl	8001038 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f9b0 	bl	8001038 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e142      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cea:	4b76      	ldr	r3, [pc, #472]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0ed      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x388>
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f99d 	bl	8001038 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7ff f999 	bl	8001038 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e12b      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d18:	4b6a      	ldr	r3, [pc, #424]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ed      	bne.n	8001d02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d26:	7ffb      	ldrb	r3, [r7, #31]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2c:	4b65      	ldr	r3, [pc, #404]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	4a64      	ldr	r2, [pc, #400]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d03c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01c      	beq.n	8001d86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d4c:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d52:	4a5c      	ldr	r2, [pc, #368]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7ff f96c 	bl	8001038 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d64:	f7ff f968 	bl	8001038 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e0fc      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d76:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0ef      	beq.n	8001d64 <HAL_RCC_OscConfig+0x418>
 8001d84:	e01b      	b.n	8001dbe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d86:	4b4f      	ldr	r3, [pc, #316]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d8c:	4a4d      	ldr	r2, [pc, #308]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d96:	f7ff f94f 	bl	8001038 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d9e:	f7ff f94b 	bl	8001038 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e0df      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001db0:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ef      	bne.n	8001d9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80d3 	beq.w	8001f6e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dc8:	4b3e      	ldr	r3, [pc, #248]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b0c      	cmp	r3, #12
 8001dd2:	f000 808d 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d15a      	bne.n	8001e94 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a38      	ldr	r2, [pc, #224]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dea:	f7ff f925 	bl	8001038 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7ff f921 	bl	8001038 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e0b5      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e04:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e10:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_RCC_OscConfig+0x580>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6a11      	ldr	r1, [r2, #32]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e20:	3a01      	subs	r2, #1
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	4311      	orrs	r1, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e2a:	0212      	lsls	r2, r2, #8
 8001e2c:	4311      	orrs	r1, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e32:	0852      	lsrs	r2, r2, #1
 8001e34:	3a01      	subs	r2, #1
 8001e36:	0552      	lsls	r2, r2, #21
 8001e38:	4311      	orrs	r1, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e3e:	0852      	lsrs	r2, r2, #1
 8001e40:	3a01      	subs	r2, #1
 8001e42:	0652      	lsls	r2, r2, #25
 8001e44:	4311      	orrs	r1, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e4a:	06d2      	lsls	r2, r2, #27
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	491d      	ldr	r1, [pc, #116]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e54:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1a      	ldr	r2, [pc, #104]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f8e4 	bl	8001038 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e74:	f7ff f8e0 	bl	8001038 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e074      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x528>
 8001e92:	e06c      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e9e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea6:	f023 0303 	bic.w	r3, r3, #3
 8001eaa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eb2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f8bc 	bl	8001038 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec2:	e00e      	b.n	8001ee2 <HAL_RCC_OscConfig+0x596>
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7ff f8b2 	bl	8001038 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e046      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee2:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x584>
 8001eee:	e03e      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e039      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f003 0203 	and.w	r2, r3, #3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d12c      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d123      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d11b      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d113      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d109      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f60:	085b      	lsrs	r3, r3, #1
 8001f62:	3b01      	subs	r3, #1
 8001f64:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000

08001f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e11e      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b91      	ldr	r3, [pc, #580]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d910      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b8e      	ldr	r3, [pc, #568]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 020f 	bic.w	r2, r3, #15
 8001faa:	498c      	ldr	r1, [pc, #560]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b8a      	ldr	r3, [pc, #552]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e106      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d073      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d129      	bne.n	800202c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd8:	4b81      	ldr	r3, [pc, #516]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0f4      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001fe8:	f000 f99e 	bl	8002328 <RCC_GetSysClockFreqFromPLLSource>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4a7c      	ldr	r2, [pc, #496]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d93f      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ff6:	4b7a      	ldr	r3, [pc, #488]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800200a:	2b00      	cmp	r3, #0
 800200c:	d033      	beq.n	8002076 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002012:	2b00      	cmp	r3, #0
 8002014:	d12f      	bne.n	8002076 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002016:	4b72      	ldr	r3, [pc, #456]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800201e:	4a70      	ldr	r2, [pc, #448]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002024:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e024      	b.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d107      	bne.n	8002044 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002034:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d109      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0c6      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002044:	4b66      	ldr	r3, [pc, #408]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0be      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002054:	f000 f8ce 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 8002058:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4a61      	ldr	r2, [pc, #388]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d909      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002062:	4b5f      	ldr	r3, [pc, #380]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800206a:	4a5d      	ldr	r2, [pc, #372]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 800206c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002070:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002076:	4b5a      	ldr	r3, [pc, #360]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f023 0203 	bic.w	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4957      	ldr	r1, [pc, #348]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002084:	4313      	orrs	r3, r2
 8002086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002088:	f7fe ffd6 	bl	8001038 <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002090:	f7fe ffd2 	bl	8001038 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	; 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e095      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	4b4e      	ldr	r3, [pc, #312]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 020c 	and.w	r2, r3, #12
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d1eb      	bne.n	8002090 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d023      	beq.n	800210c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d0:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a42      	ldr	r2, [pc, #264]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d007      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80020e8:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80020f0:	4a3b      	ldr	r2, [pc, #236]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f8:	4b39      	ldr	r3, [pc, #228]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	4936      	ldr	r1, [pc, #216]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]
 800210a:	e008      	b.n	800211e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b80      	cmp	r3, #128	; 0x80
 8002110:	d105      	bne.n	800211e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002112:	4b33      	ldr	r3, [pc, #204]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	4a32      	ldr	r2, [pc, #200]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002118:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800211c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800211e:	4b2f      	ldr	r3, [pc, #188]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d21d      	bcs.n	8002168 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 020f 	bic.w	r2, r3, #15
 8002134:	4929      	ldr	r1, [pc, #164]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800213c:	f7fe ff7c 	bl	8001038 <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	e00a      	b.n	800215a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002144:	f7fe ff78 	bl	8001038 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e03b      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d1ed      	bne.n	8002144 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002174:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4917      	ldr	r1, [pc, #92]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002182:	4313      	orrs	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	490f      	ldr	r1, [pc, #60]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021a6:	f000 f825 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	490c      	ldr	r1, [pc, #48]	; (80021e8 <HAL_RCC_ClockConfig+0x26c>)
 80021b8:	5ccb      	ldrb	r3, [r1, r3]
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	fa22 f303 	lsr.w	r3, r2, r3
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_RCC_ClockConfig+0x270>)
 80021c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_RCC_ClockConfig+0x274>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fee8 	bl	8000fa0 <HAL_InitTick>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40022000 	.word	0x40022000
 80021e0:	40021000 	.word	0x40021000
 80021e4:	04c4b400 	.word	0x04c4b400
 80021e8:	08026960 	.word	0x08026960
 80021ec:	20000004 	.word	0x20000004
 80021f0:	20000008 	.word	0x20000008

080021f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021fa:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b04      	cmp	r3, #4
 8002204:	d102      	bne.n	800220c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002206:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	e047      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b08      	cmp	r3, #8
 8002216:	d102      	bne.n	800221e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002218:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	e03e      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800221e:	4b23      	ldr	r3, [pc, #140]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b0c      	cmp	r3, #12
 8002228:	d136      	bne.n	8002298 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3301      	adds	r3, #1
 8002240:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d10c      	bne.n	8002262 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002248:	4a1a      	ldr	r2, [pc, #104]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002250:	4a16      	ldr	r2, [pc, #88]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002252:	68d2      	ldr	r2, [r2, #12]
 8002254:	0a12      	lsrs	r2, r2, #8
 8002256:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	617b      	str	r3, [r7, #20]
      break;
 8002260:	e00c      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002262:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	fbb2 f3f3 	udiv	r3, r2, r3
 800226a:	4a10      	ldr	r2, [pc, #64]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800226c:	68d2      	ldr	r2, [r2, #12]
 800226e:	0a12      	lsrs	r2, r2, #8
 8002270:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	617b      	str	r3, [r7, #20]
      break;
 800227a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0e5b      	lsrs	r3, r3, #25
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	3301      	adds	r3, #1
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	e001      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800229c:	693b      	ldr	r3, [r7, #16]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	371c      	adds	r7, #28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	00f42400 	.word	0x00f42400
 80022b4:	016e3600 	.word	0x016e3600

080022b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_RCC_GetHCLKFreq+0x14>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000004 	.word	0x20000004

080022d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022d4:	f7ff fff0 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 80022d8:	4602      	mov	r2, r0
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	4904      	ldr	r1, [pc, #16]	; (80022f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022e6:	5ccb      	ldrb	r3, [r1, r3]
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	08026970 	.word	0x08026970

080022fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002300:	f7ff ffda 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 8002304:	4602      	mov	r2, r0
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	0adb      	lsrs	r3, r3, #11
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	4904      	ldr	r1, [pc, #16]	; (8002324 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002312:	5ccb      	ldrb	r3, [r1, r3]
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	08026970 	.word	0x08026970

08002328 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800232e:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3301      	adds	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d10c      	bne.n	8002366 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800234c:	4a17      	ldr	r2, [pc, #92]	; (80023ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	fbb2 f3f3 	udiv	r3, r2, r3
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002356:	68d2      	ldr	r2, [r2, #12]
 8002358:	0a12      	lsrs	r2, r2, #8
 800235a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	617b      	str	r3, [r7, #20]
    break;
 8002364:	e00c      	b.n	8002380 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002370:	68d2      	ldr	r2, [r2, #12]
 8002372:	0a12      	lsrs	r2, r2, #8
 8002374:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002378:	fb02 f303 	mul.w	r3, r2, r3
 800237c:	617b      	str	r3, [r7, #20]
    break;
 800237e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0e5b      	lsrs	r3, r3, #25
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	3301      	adds	r3, #1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800239a:	687b      	ldr	r3, [r7, #4]
}
 800239c:	4618      	mov	r0, r3
 800239e:	371c      	adds	r7, #28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	40021000 	.word	0x40021000
 80023ac:	016e3600 	.word	0x016e3600
 80023b0:	00f42400 	.word	0x00f42400

080023b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023bc:	2300      	movs	r3, #0
 80023be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023c0:	2300      	movs	r3, #0
 80023c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 8098 	beq.w	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d6:	4b43      	ldr	r3, [pc, #268]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10d      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	4b40      	ldr	r3, [pc, #256]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	4a3f      	ldr	r2, [pc, #252]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6593      	str	r3, [r2, #88]	; 0x58
 80023ee:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fa:	2301      	movs	r3, #1
 80023fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023fe:	4b3a      	ldr	r3, [pc, #232]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a39      	ldr	r2, [pc, #228]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800240a:	f7fe fe15 	bl	8001038 <HAL_GetTick>
 800240e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002410:	e009      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002412:	f7fe fe11 	bl	8001038 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d902      	bls.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	74fb      	strb	r3, [r7, #19]
        break;
 8002424:	e005      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002426:	4b30      	ldr	r3, [pc, #192]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0ef      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002432:	7cfb      	ldrb	r3, [r7, #19]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d159      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002438:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002442:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d01e      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	d019      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002454:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800245e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002460:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	4a1f      	ldr	r2, [pc, #124]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002470:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002476:	4a1b      	ldr	r2, [pc, #108]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002480:	4a18      	ldr	r2, [pc, #96]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d016      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7fe fdd1 	bl	8001038 <HAL_GetTick>
 8002496:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002498:	e00b      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe fdcd 	bl	8001038 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d902      	bls.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	74fb      	strb	r3, [r7, #19]
            break;
 80024b0:	e006      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ec      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10b      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d4:	4903      	ldr	r1, [pc, #12]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024dc:	e008      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024de:	7cfb      	ldrb	r3, [r7, #19]
 80024e0:	74bb      	strb	r3, [r7, #18]
 80024e2:	e005      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f0:	7c7b      	ldrb	r3, [r7, #17]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d105      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f6:	4baf      	ldr	r3, [pc, #700]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	4aae      	ldr	r2, [pc, #696]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002500:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800250e:	4ba9      	ldr	r3, [pc, #676]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002514:	f023 0203 	bic.w	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	49a5      	ldr	r1, [pc, #660]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002530:	4ba0      	ldr	r3, [pc, #640]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 020c 	bic.w	r2, r3, #12
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	499d      	ldr	r1, [pc, #628]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002552:	4b98      	ldr	r3, [pc, #608]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4994      	ldr	r1, [pc, #592]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002574:	4b8f      	ldr	r3, [pc, #572]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	498c      	ldr	r1, [pc, #560]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002596:	4b87      	ldr	r3, [pc, #540]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	4983      	ldr	r1, [pc, #524]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b8:	4b7e      	ldr	r3, [pc, #504]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	497b      	ldr	r1, [pc, #492]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025da:	4b76      	ldr	r3, [pc, #472]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	4972      	ldr	r1, [pc, #456]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025fc:	4b6d      	ldr	r3, [pc, #436]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	496a      	ldr	r1, [pc, #424]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800261e:	4b65      	ldr	r3, [pc, #404]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	4961      	ldr	r1, [pc, #388]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002640:	4b5c      	ldr	r3, [pc, #368]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002642:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002646:	f023 0203 	bic.w	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	4959      	ldr	r1, [pc, #356]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002662:	4b54      	ldr	r3, [pc, #336]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	4950      	ldr	r1, [pc, #320]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002680:	2b00      	cmp	r3, #0
 8002682:	d015      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002684:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4948      	ldr	r1, [pc, #288]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026a2:	d105      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a4:	4b43      	ldr	r3, [pc, #268]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4a42      	ldr	r2, [pc, #264]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d015      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026bc:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ca:	493a      	ldr	r1, [pc, #232]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026da:	d105      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026dc:	4b35      	ldr	r3, [pc, #212]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4a34      	ldr	r2, [pc, #208]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d015      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026f4:	4b2f      	ldr	r3, [pc, #188]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	492c      	ldr	r1, [pc, #176]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002712:	d105      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002714:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a26      	ldr	r2, [pc, #152]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800271a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800271e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d015      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	491e      	ldr	r1, [pc, #120]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800274a:	d105      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002756:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d015      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4910      	ldr	r1, [pc, #64]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002782:	d105      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800278a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800278e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d018      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4902      	ldr	r1, [pc, #8]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027b2:	e001      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80027b4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027c0:	d105      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027c2:	4b21      	ldr	r3, [pc, #132]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	4a20      	ldr	r2, [pc, #128]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d015      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80027da:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e8:	4917      	ldr	r1, [pc, #92]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f8:	d105      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002804:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d015      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002812:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002814:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002818:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002820:	4909      	ldr	r1, [pc, #36]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002830:	d105      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002832:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	4a04      	ldr	r2, [pc, #16]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800283c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800283e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e042      	b.n	80028e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002864:	2b00      	cmp	r3, #0
 8002866:	d106      	bne.n	8002876 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7fe f98f 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2224      	movs	r2, #36	; 0x24
 800287a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fa80 	bl	8002d94 <UART_SetConfig>
 8002894:	4603      	mov	r3, r0
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e022      	b.n	80028e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fd3e 	bl	8003328 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fdc5 	bl	800346c <UART_CheckIdleState>
 80028e2:	4603      	mov	r3, r0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d118      	bne.n	800294e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d013      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	d104      	bne.n	800293a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 81fb 	beq.w	8002d3a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
      }
      return;
 800294c:	e1f5      	b.n	8002d3a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80ef 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4b73      	ldr	r3, [pc, #460]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4b72      	ldr	r3, [pc, #456]	; (8002b2c <HAL_UART_IRQHandler+0x240>)
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80e4 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d010      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00b      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2201      	movs	r2, #1
 8002986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800298e:	f043 0201 	orr.w	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d010      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00b      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2202      	movs	r2, #2
 80029b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029ba:	f043 0204 	orr.w	r2, r3, #4
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d010      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00b      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2204      	movs	r2, #4
 80029de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029e6:	f043 0202 	orr.w	r2, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d015      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4b48      	ldr	r3, [pc, #288]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 8002a08:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2208      	movs	r2, #8
 8002a14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1c:	f043 0208 	orr.w	r2, r3, #8
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d011      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a4a:	f043 0220 	orr.w	r2, r3, #32
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 816f 	beq.w	8002d3e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d011      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d104      	bne.n	8002a7e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a94:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa0:	2b40      	cmp	r3, #64	; 0x40
 8002aa2:	d004      	beq.n	8002aae <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d031      	beq.n	8002b12 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fda7 	bl	8003602 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abe:	2b40      	cmp	r3, #64	; 0x40
 8002ac0:	d123      	bne.n	8002b0a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d013      	beq.n	8002b02 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ade:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <HAL_UART_IRQHandler+0x244>)
 8002ae0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fc3c 	bl	8001364 <HAL_DMA_Abort_IT>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d017      	beq.n	8002b22 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002afc:	4610      	mov	r0, r2
 8002afe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b00:	e00f      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f930 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b08:	e00b      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f92c 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b10:	e007      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f928 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002b20:	e10d      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b22:	bf00      	nop
    return;
 8002b24:	e10b      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
 8002b26:	bf00      	nop
 8002b28:	10000001 	.word	0x10000001
 8002b2c:	04000120 	.word	0x04000120
 8002b30:	08003667 	.word	0x08003667

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	f040 80ab 	bne.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80a5 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 809f 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2210      	movs	r2, #16
 8002b5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d155      	bne.n	8002c18 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002b76:	893b      	ldrh	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80e2 	beq.w	8002d42 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b84:	893a      	ldrh	r2, [r7, #8]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	f080 80db 	bcs.w	8002d42 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	893a      	ldrh	r2, [r7, #8]
 8002b90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d12b      	bne.n	8002bfc <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bb2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0210 	bic.w	r2, r2, #16
 8002bf0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fb5b 	bl	80012b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f8b3 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c16:	e094      	b.n	8002d42 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 8087 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002c38:	897b      	ldrh	r3, [r7, #10]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8083 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	f023 0301 	bic.w	r3, r3, #1
 8002c62:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0210 	bic.w	r2, r2, #16
 8002c86:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c88:	897b      	ldrh	r3, [r7, #10]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f875 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c92:	e058      	b.n	8002d46 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fd07 	bl	80036c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cb8:	e048      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d012      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d104      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d034      	beq.n	8002d4a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
    }
    return;
 8002ce8:	e02f      	b.n	8002d4a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fcc7 	bl	8003692 <UART_EndTransmit_IT>
    return;
 8002d04:	e022      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fce7 	bl	80036ee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d20:	e014      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00f      	beq.n	8002d4c <HAL_UART_IRQHandler+0x460>
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	da0c      	bge.n	8002d4c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fcd1 	bl	80036da <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d38:	e008      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d3a:	bf00      	nop
 8002d3c:	e006      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d3e:	bf00      	nop
 8002d40:	e004      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d42:	bf00      	nop
 8002d44:	e002      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d46:	bf00      	nop
 8002d48:	e000      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d4a:	bf00      	nop
  }
}
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop

08002d54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d94:	b5b0      	push	{r4, r5, r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4bb1      	ldr	r3, [pc, #708]	; (8003084 <UART_SetConfig+0x2f0>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	69f9      	ldr	r1, [r7, #28]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4aa6      	ldr	r2, [pc, #664]	; (8003088 <UART_SetConfig+0x2f4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002e06:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	69f9      	ldr	r1, [r7, #28]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	f023 010f 	bic.w	r1, r3, #15
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a97      	ldr	r2, [pc, #604]	; (800308c <UART_SetConfig+0x2f8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d120      	bne.n	8002e76 <UART_SetConfig+0xe2>
 8002e34:	4b96      	ldr	r3, [pc, #600]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d816      	bhi.n	8002e70 <UART_SetConfig+0xdc>
 8002e42:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <UART_SetConfig+0xb4>)
 8002e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e48:	08002e59 	.word	0x08002e59
 8002e4c:	08002e65 	.word	0x08002e65
 8002e50:	08002e5f 	.word	0x08002e5f
 8002e54:	08002e6b 	.word	0x08002e6b
 8002e58:	2301      	movs	r3, #1
 8002e5a:	76fb      	strb	r3, [r7, #27]
 8002e5c:	e0e7      	b.n	800302e <UART_SetConfig+0x29a>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	76fb      	strb	r3, [r7, #27]
 8002e62:	e0e4      	b.n	800302e <UART_SetConfig+0x29a>
 8002e64:	2304      	movs	r3, #4
 8002e66:	76fb      	strb	r3, [r7, #27]
 8002e68:	e0e1      	b.n	800302e <UART_SetConfig+0x29a>
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	76fb      	strb	r3, [r7, #27]
 8002e6e:	e0de      	b.n	800302e <UART_SetConfig+0x29a>
 8002e70:	2310      	movs	r3, #16
 8002e72:	76fb      	strb	r3, [r7, #27]
 8002e74:	e0db      	b.n	800302e <UART_SetConfig+0x29a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a86      	ldr	r2, [pc, #536]	; (8003094 <UART_SetConfig+0x300>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d132      	bne.n	8002ee6 <UART_SetConfig+0x152>
 8002e80:	4b83      	ldr	r3, [pc, #524]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b0c      	cmp	r3, #12
 8002e8c:	d828      	bhi.n	8002ee0 <UART_SetConfig+0x14c>
 8002e8e:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <UART_SetConfig+0x100>)
 8002e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e94:	08002ec9 	.word	0x08002ec9
 8002e98:	08002ee1 	.word	0x08002ee1
 8002e9c:	08002ee1 	.word	0x08002ee1
 8002ea0:	08002ee1 	.word	0x08002ee1
 8002ea4:	08002ed5 	.word	0x08002ed5
 8002ea8:	08002ee1 	.word	0x08002ee1
 8002eac:	08002ee1 	.word	0x08002ee1
 8002eb0:	08002ee1 	.word	0x08002ee1
 8002eb4:	08002ecf 	.word	0x08002ecf
 8002eb8:	08002ee1 	.word	0x08002ee1
 8002ebc:	08002ee1 	.word	0x08002ee1
 8002ec0:	08002ee1 	.word	0x08002ee1
 8002ec4:	08002edb 	.word	0x08002edb
 8002ec8:	2300      	movs	r3, #0
 8002eca:	76fb      	strb	r3, [r7, #27]
 8002ecc:	e0af      	b.n	800302e <UART_SetConfig+0x29a>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	76fb      	strb	r3, [r7, #27]
 8002ed2:	e0ac      	b.n	800302e <UART_SetConfig+0x29a>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	76fb      	strb	r3, [r7, #27]
 8002ed8:	e0a9      	b.n	800302e <UART_SetConfig+0x29a>
 8002eda:	2308      	movs	r3, #8
 8002edc:	76fb      	strb	r3, [r7, #27]
 8002ede:	e0a6      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee0:	2310      	movs	r3, #16
 8002ee2:	76fb      	strb	r3, [r7, #27]
 8002ee4:	e0a3      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a6b      	ldr	r2, [pc, #428]	; (8003098 <UART_SetConfig+0x304>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d120      	bne.n	8002f32 <UART_SetConfig+0x19e>
 8002ef0:	4b67      	ldr	r3, [pc, #412]	; (8003090 <UART_SetConfig+0x2fc>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002efa:	2b30      	cmp	r3, #48	; 0x30
 8002efc:	d013      	beq.n	8002f26 <UART_SetConfig+0x192>
 8002efe:	2b30      	cmp	r3, #48	; 0x30
 8002f00:	d814      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d009      	beq.n	8002f1a <UART_SetConfig+0x186>
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d810      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <UART_SetConfig+0x180>
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d006      	beq.n	8002f20 <UART_SetConfig+0x18c>
 8002f12:	e00b      	b.n	8002f2c <UART_SetConfig+0x198>
 8002f14:	2300      	movs	r3, #0
 8002f16:	76fb      	strb	r3, [r7, #27]
 8002f18:	e089      	b.n	800302e <UART_SetConfig+0x29a>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	76fb      	strb	r3, [r7, #27]
 8002f1e:	e086      	b.n	800302e <UART_SetConfig+0x29a>
 8002f20:	2304      	movs	r3, #4
 8002f22:	76fb      	strb	r3, [r7, #27]
 8002f24:	e083      	b.n	800302e <UART_SetConfig+0x29a>
 8002f26:	2308      	movs	r3, #8
 8002f28:	76fb      	strb	r3, [r7, #27]
 8002f2a:	e080      	b.n	800302e <UART_SetConfig+0x29a>
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	76fb      	strb	r3, [r7, #27]
 8002f30:	e07d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a59      	ldr	r2, [pc, #356]	; (800309c <UART_SetConfig+0x308>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d120      	bne.n	8002f7e <UART_SetConfig+0x1ea>
 8002f3c:	4b54      	ldr	r3, [pc, #336]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f46:	2bc0      	cmp	r3, #192	; 0xc0
 8002f48:	d013      	beq.n	8002f72 <UART_SetConfig+0x1de>
 8002f4a:	2bc0      	cmp	r3, #192	; 0xc0
 8002f4c:	d814      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f4e:	2b80      	cmp	r3, #128	; 0x80
 8002f50:	d009      	beq.n	8002f66 <UART_SetConfig+0x1d2>
 8002f52:	2b80      	cmp	r3, #128	; 0x80
 8002f54:	d810      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <UART_SetConfig+0x1cc>
 8002f5a:	2b40      	cmp	r3, #64	; 0x40
 8002f5c:	d006      	beq.n	8002f6c <UART_SetConfig+0x1d8>
 8002f5e:	e00b      	b.n	8002f78 <UART_SetConfig+0x1e4>
 8002f60:	2300      	movs	r3, #0
 8002f62:	76fb      	strb	r3, [r7, #27]
 8002f64:	e063      	b.n	800302e <UART_SetConfig+0x29a>
 8002f66:	2302      	movs	r3, #2
 8002f68:	76fb      	strb	r3, [r7, #27]
 8002f6a:	e060      	b.n	800302e <UART_SetConfig+0x29a>
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	76fb      	strb	r3, [r7, #27]
 8002f70:	e05d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f72:	2308      	movs	r3, #8
 8002f74:	76fb      	strb	r3, [r7, #27]
 8002f76:	e05a      	b.n	800302e <UART_SetConfig+0x29a>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	76fb      	strb	r3, [r7, #27]
 8002f7c:	e057      	b.n	800302e <UART_SetConfig+0x29a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a47      	ldr	r2, [pc, #284]	; (80030a0 <UART_SetConfig+0x30c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d125      	bne.n	8002fd4 <UART_SetConfig+0x240>
 8002f88:	4b41      	ldr	r3, [pc, #260]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f96:	d017      	beq.n	8002fc8 <UART_SetConfig+0x234>
 8002f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f9c:	d817      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa2:	d00b      	beq.n	8002fbc <UART_SetConfig+0x228>
 8002fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa8:	d811      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <UART_SetConfig+0x222>
 8002fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb2:	d006      	beq.n	8002fc2 <UART_SetConfig+0x22e>
 8002fb4:	e00b      	b.n	8002fce <UART_SetConfig+0x23a>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	76fb      	strb	r3, [r7, #27]
 8002fba:	e038      	b.n	800302e <UART_SetConfig+0x29a>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	76fb      	strb	r3, [r7, #27]
 8002fc0:	e035      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	76fb      	strb	r3, [r7, #27]
 8002fc6:	e032      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc8:	2308      	movs	r3, #8
 8002fca:	76fb      	strb	r3, [r7, #27]
 8002fcc:	e02f      	b.n	800302e <UART_SetConfig+0x29a>
 8002fce:	2310      	movs	r3, #16
 8002fd0:	76fb      	strb	r3, [r7, #27]
 8002fd2:	e02c      	b.n	800302e <UART_SetConfig+0x29a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <UART_SetConfig+0x2f4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d125      	bne.n	800302a <UART_SetConfig+0x296>
 8002fde:	4b2c      	ldr	r3, [pc, #176]	; (8003090 <UART_SetConfig+0x2fc>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fe8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fec:	d017      	beq.n	800301e <UART_SetConfig+0x28a>
 8002fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ff2:	d817      	bhi.n	8003024 <UART_SetConfig+0x290>
 8002ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ff8:	d00b      	beq.n	8003012 <UART_SetConfig+0x27e>
 8002ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ffe:	d811      	bhi.n	8003024 <UART_SetConfig+0x290>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <UART_SetConfig+0x278>
 8003004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003008:	d006      	beq.n	8003018 <UART_SetConfig+0x284>
 800300a:	e00b      	b.n	8003024 <UART_SetConfig+0x290>
 800300c:	2300      	movs	r3, #0
 800300e:	76fb      	strb	r3, [r7, #27]
 8003010:	e00d      	b.n	800302e <UART_SetConfig+0x29a>
 8003012:	2302      	movs	r3, #2
 8003014:	76fb      	strb	r3, [r7, #27]
 8003016:	e00a      	b.n	800302e <UART_SetConfig+0x29a>
 8003018:	2304      	movs	r3, #4
 800301a:	76fb      	strb	r3, [r7, #27]
 800301c:	e007      	b.n	800302e <UART_SetConfig+0x29a>
 800301e:	2308      	movs	r3, #8
 8003020:	76fb      	strb	r3, [r7, #27]
 8003022:	e004      	b.n	800302e <UART_SetConfig+0x29a>
 8003024:	2310      	movs	r3, #16
 8003026:	76fb      	strb	r3, [r7, #27]
 8003028:	e001      	b.n	800302e <UART_SetConfig+0x29a>
 800302a:	2310      	movs	r3, #16
 800302c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a15      	ldr	r2, [pc, #84]	; (8003088 <UART_SetConfig+0x2f4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	f040 809f 	bne.w	8003178 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800303a:	7efb      	ldrb	r3, [r7, #27]
 800303c:	2b08      	cmp	r3, #8
 800303e:	d837      	bhi.n	80030b0 <UART_SetConfig+0x31c>
 8003040:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <UART_SetConfig+0x2b4>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	0800306d 	.word	0x0800306d
 800304c:	080030b1 	.word	0x080030b1
 8003050:	08003075 	.word	0x08003075
 8003054:	080030b1 	.word	0x080030b1
 8003058:	0800307b 	.word	0x0800307b
 800305c:	080030b1 	.word	0x080030b1
 8003060:	080030b1 	.word	0x080030b1
 8003064:	080030b1 	.word	0x080030b1
 8003068:	080030a9 	.word	0x080030a9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800306c:	f7ff f930 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003070:	6178      	str	r0, [r7, #20]
        break;
 8003072:	e022      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <UART_SetConfig+0x310>)
 8003076:	617b      	str	r3, [r7, #20]
        break;
 8003078:	e01f      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800307a:	f7ff f8bb 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800307e:	6178      	str	r0, [r7, #20]
        break;
 8003080:	e01b      	b.n	80030ba <UART_SetConfig+0x326>
 8003082:	bf00      	nop
 8003084:	cfff69f3 	.word	0xcfff69f3
 8003088:	40008000 	.word	0x40008000
 800308c:	40013800 	.word	0x40013800
 8003090:	40021000 	.word	0x40021000
 8003094:	40004400 	.word	0x40004400
 8003098:	40004800 	.word	0x40004800
 800309c:	40004c00 	.word	0x40004c00
 80030a0:	40005000 	.word	0x40005000
 80030a4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ac:	617b      	str	r3, [r7, #20]
        break;
 80030ae:	e004      	b.n	80030ba <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	76bb      	strb	r3, [r7, #26]
        break;
 80030b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 811b 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	4a96      	ldr	r2, [pc, #600]	; (8003320 <UART_SetConfig+0x58c>)
 80030c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030cc:	461a      	mov	r2, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80030d4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d305      	bcc.n	80030f2 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d902      	bls.n	80030f8 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	76bb      	strb	r3, [r7, #26]
 80030f6:	e0ff      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f04f 0100 	mov.w	r1, #0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	4a86      	ldr	r2, [pc, #536]	; (8003320 <UART_SetConfig+0x58c>)
 8003106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800310a:	b29a      	uxth	r2, r3
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	f7fd fba0 	bl	8000854 <__aeabi_uldivmod>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	020b      	lsls	r3, r1, #8
 8003126:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800312a:	0202      	lsls	r2, r0, #8
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	6849      	ldr	r1, [r1, #4]
 8003130:	0849      	lsrs	r1, r1, #1
 8003132:	4608      	mov	r0, r1
 8003134:	f04f 0100 	mov.w	r1, #0
 8003138:	1814      	adds	r4, r2, r0
 800313a:	eb43 0501 	adc.w	r5, r3, r1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	461a      	mov	r2, r3
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	4620      	mov	r0, r4
 800314a:	4629      	mov	r1, r5
 800314c:	f7fd fb82 	bl	8000854 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4613      	mov	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800315e:	d308      	bcc.n	8003172 <UART_SetConfig+0x3de>
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003166:	d204      	bcs.n	8003172 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	60da      	str	r2, [r3, #12]
 8003170:	e0c2      	b.n	80032f8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	76bb      	strb	r3, [r7, #26]
 8003176:	e0bf      	b.n	80032f8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003180:	d165      	bne.n	800324e <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8003182:	7efb      	ldrb	r3, [r7, #27]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d828      	bhi.n	80031da <UART_SetConfig+0x446>
 8003188:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <UART_SetConfig+0x3fc>)
 800318a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318e:	bf00      	nop
 8003190:	080031b5 	.word	0x080031b5
 8003194:	080031bd 	.word	0x080031bd
 8003198:	080031c5 	.word	0x080031c5
 800319c:	080031db 	.word	0x080031db
 80031a0:	080031cb 	.word	0x080031cb
 80031a4:	080031db 	.word	0x080031db
 80031a8:	080031db 	.word	0x080031db
 80031ac:	080031db 	.word	0x080031db
 80031b0:	080031d3 	.word	0x080031d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031b4:	f7ff f88c 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 80031b8:	6178      	str	r0, [r7, #20]
        break;
 80031ba:	e013      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031bc:	f7ff f89e 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 80031c0:	6178      	str	r0, [r7, #20]
        break;
 80031c2:	e00f      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031c4:	4b57      	ldr	r3, [pc, #348]	; (8003324 <UART_SetConfig+0x590>)
 80031c6:	617b      	str	r3, [r7, #20]
        break;
 80031c8:	e00c      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ca:	f7ff f813 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80031ce:	6178      	str	r0, [r7, #20]
        break;
 80031d0:	e008      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031d6:	617b      	str	r3, [r7, #20]
        break;
 80031d8:	e004      	b.n	80031e4 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	76bb      	strb	r3, [r7, #26]
        break;
 80031e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8086 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	4a4b      	ldr	r2, [pc, #300]	; (8003320 <UART_SetConfig+0x58c>)
 80031f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031f6:	461a      	mov	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80031fe:	005a      	lsls	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	441a      	add	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	b29b      	uxth	r3, r3
 8003212:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b0f      	cmp	r3, #15
 8003218:	d916      	bls.n	8003248 <UART_SetConfig+0x4b4>
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d212      	bcs.n	8003248 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	b29b      	uxth	r3, r3
 8003226:	f023 030f 	bic.w	r3, r3, #15
 800322a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	b29b      	uxth	r3, r3
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	b29a      	uxth	r2, r3
 8003238:	89fb      	ldrh	r3, [r7, #14]
 800323a:	4313      	orrs	r3, r2
 800323c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	89fa      	ldrh	r2, [r7, #14]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	e057      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	76bb      	strb	r3, [r7, #26]
 800324c:	e054      	b.n	80032f8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800324e:	7efb      	ldrb	r3, [r7, #27]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d828      	bhi.n	80032a6 <UART_SetConfig+0x512>
 8003254:	a201      	add	r2, pc, #4	; (adr r2, 800325c <UART_SetConfig+0x4c8>)
 8003256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325a:	bf00      	nop
 800325c:	08003281 	.word	0x08003281
 8003260:	08003289 	.word	0x08003289
 8003264:	08003291 	.word	0x08003291
 8003268:	080032a7 	.word	0x080032a7
 800326c:	08003297 	.word	0x08003297
 8003270:	080032a7 	.word	0x080032a7
 8003274:	080032a7 	.word	0x080032a7
 8003278:	080032a7 	.word	0x080032a7
 800327c:	0800329f 	.word	0x0800329f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003280:	f7ff f826 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003284:	6178      	str	r0, [r7, #20]
        break;
 8003286:	e013      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003288:	f7ff f838 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 800328c:	6178      	str	r0, [r7, #20]
        break;
 800328e:	e00f      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003290:	4b24      	ldr	r3, [pc, #144]	; (8003324 <UART_SetConfig+0x590>)
 8003292:	617b      	str	r3, [r7, #20]
        break;
 8003294:	e00c      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003296:	f7fe ffad 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800329a:	6178      	str	r0, [r7, #20]
        break;
 800329c:	e008      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800329e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a2:	617b      	str	r3, [r7, #20]
        break;
 80032a4:	e004      	b.n	80032b0 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	76bb      	strb	r3, [r7, #26]
        break;
 80032ae:	bf00      	nop
    }

    if (pclk != 0U)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d020      	beq.n	80032f8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	4a19      	ldr	r2, [pc, #100]	; (8003320 <UART_SetConfig+0x58c>)
 80032bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032c0:	461a      	mov	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	441a      	add	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	b29b      	uxth	r3, r3
 80032da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b0f      	cmp	r3, #15
 80032e0:	d908      	bls.n	80032f4 <UART_SetConfig+0x560>
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e8:	d204      	bcs.n	80032f4 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	e001      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003314:	7ebb      	ldrb	r3, [r7, #26]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3720      	adds	r7, #32
 800331a:	46bd      	mov	sp, r7
 800331c:	bdb0      	pop	{r4, r5, r7, pc}
 800331e:	bf00      	nop
 8003320:	08026978 	.word	0x08026978
 8003324:	00f42400 	.word	0x00f42400

08003328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01a      	beq.n	800343e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003426:	d10a      	bne.n	800343e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	605a      	str	r2, [r3, #4]
  }
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af02      	add	r7, sp, #8
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800347c:	f7fd fddc 	bl	8001038 <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b08      	cmp	r3, #8
 800348e:	d10e      	bne.n	80034ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003490:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f82f 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e025      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d10e      	bne.n	80034da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f819 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e00f      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003512:	e062      	b.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351a:	d05e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351c:	f7fd fd8c 	bl	8001038 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	429a      	cmp	r2, r3
 800352a:	d302      	bcc.n	8003532 <UART_WaitOnFlagUntilTimeout+0x30>
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d11d      	bne.n	800356e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003540:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e045      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d02e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358a:	d126      	bne.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003594:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e00f      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4013      	ands	r3, r2
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d08d      	beq.n	8003514 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003618:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003632:	2b01      	cmp	r3, #1
 8003634:	d107      	bne.n	8003646 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0210 	bic.w	r2, r2, #16
 8003644:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	671a      	str	r2, [r3, #112]	; 0x70
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f7ff fb6f 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff fb4b 	bl	8002d54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_UARTEx_DisableFifoMode+0x16>
 8003714:	2302      	movs	r3, #2
 8003716:	e027      	b.n	8003768 <HAL_UARTEx_DisableFifoMode+0x66>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	; 0x24
 8003724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003746:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003788:	2302      	movs	r3, #2
 800378a:	e02d      	b.n	80037e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2224      	movs	r2, #36	; 0x24
 8003798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f84f 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003804:	2302      	movs	r3, #2
 8003806:	e02d      	b.n	8003864 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2224      	movs	r2, #36	; 0x24
 8003814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f811 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003878:	2b00      	cmp	r3, #0
 800387a:	d108      	bne.n	800388e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800388c:	e031      	b.n	80038f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800388e:	2308      	movs	r3, #8
 8003890:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003892:	2308      	movs	r3, #8
 8003894:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	0e5b      	lsrs	r3, r3, #25
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	0f5b      	lsrs	r3, r3, #29
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038b6:	7bbb      	ldrb	r3, [r7, #14]
 80038b8:	7b3a      	ldrb	r2, [r7, #12]
 80038ba:	4911      	ldr	r1, [pc, #68]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038bc:	5c8a      	ldrb	r2, [r1, r2]
 80038be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038c2:	7b3a      	ldrb	r2, [r7, #12]
 80038c4:	490f      	ldr	r1, [pc, #60]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	7b7a      	ldrb	r2, [r7, #13]
 80038d8:	4909      	ldr	r1, [pc, #36]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038da:	5c8a      	ldrb	r2, [r1, r2]
 80038dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80038e0:	7b7a      	ldrb	r2, [r7, #13]
 80038e2:	4908      	ldr	r1, [pc, #32]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	08026990 	.word	0x08026990
 8003904:	08026998 	.word	0x08026998

08003908 <ESP_Init>:
 */
int32_t ESP_Init(void 		(*UART_Transmit)(uint8_t*),
			 uint8_t 	(*UART_Receive)(void),
			 uint32_t 	(*getTick)(void),
			 uint32_t	UART_Buffer_Size)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
	if(UART_Transmit != NULL		&&
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d01d      	beq.n	8003958 <ESP_Init+0x50>
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d01a      	beq.n	8003958 <ESP_Init+0x50>
	   UART_Receive	!= NULL			&&
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d017      	beq.n	8003958 <ESP_Init+0x50>
	   getTick != NULL)
	{
		ESP8266.UART_Receive 		= UART_Receive;
 8003928:	4a0e      	ldr	r2, [pc, #56]	; (8003964 <ESP_Init+0x5c>)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	6053      	str	r3, [r2, #4]
		ESP8266.UART_Transmit 		= UART_Transmit;
 800392e:	4a0d      	ldr	r2, [pc, #52]	; (8003964 <ESP_Init+0x5c>)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6013      	str	r3, [r2, #0]
		ESP8266.getTick 			= getTick;
 8003934:	4a0b      	ldr	r2, [pc, #44]	; (8003964 <ESP_Init+0x5c>)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6093      	str	r3, [r2, #8]

		rx_buffer = ringBuffer_init(UART_Buffer_Size);
 800393a:	6838      	ldr	r0, [r7, #0]
 800393c:	f000 faa8 	bl	8003e90 <ringBuffer_init>
 8003940:	4603      	mov	r3, r0
 8003942:	4a09      	ldr	r2, [pc, #36]	; (8003968 <ESP_Init+0x60>)
 8003944:	6013      	str	r3, [r2, #0]

		if(rx_buffer != NULL)
 8003946:	4b08      	ldr	r3, [pc, #32]	; (8003968 <ESP_Init+0x60>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <ESP_Init+0x4a>
			return 1;
 800394e:	2301      	movs	r3, #1
 8003950:	e004      	b.n	800395c <ESP_Init+0x54>
		else
			return -1;
 8003952:	f04f 33ff 	mov.w	r3, #4294967295
 8003956:	e001      	b.n	800395c <ESP_Init+0x54>
	}
	else
	{
		return -1;
 8003958:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	20000360 	.word	0x20000360
 8003968:	2000049c 	.word	0x2000049c

0800396c <Send_AT_Command>:
 * 			as a function pointer in the ESP_Init function to send AT commands over UART.
 * @param 	cmd is a string containing the AT command.
 * @retval	None.
 */
void Send_AT_Command(char *cmd)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]

	ESP8266.UART_Transmit((uint8_t*)cmd);
 8003974:	4b03      	ldr	r3, [pc, #12]	; (8003984 <Send_AT_Command+0x18>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	4798      	blx	r3
}
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	20000360 	.word	0x20000360

08003988 <ESP_UART_ReceiveHandler>:
 * 			this function in the  UART ISR.
 * @param 	None.
 * @retval	None.
 */
void ESP_UART_ReceiveHandler(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
	uint8_t rx_data=0;
 800398e:	2300      	movs	r3, #0
 8003990:	71fb      	strb	r3, [r7, #7]

	rx_data = ESP8266.UART_Receive();
 8003992:	4b08      	ldr	r3, [pc, #32]	; (80039b4 <ESP_UART_ReceiveHandler+0x2c>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	4798      	blx	r3
 8003998:	4603      	mov	r3, r0
 800399a:	71fb      	strb	r3, [r7, #7]
	ringBuffer_push(rx_buffer, rx_data);
 800399c:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <ESP_UART_ReceiveHandler+0x30>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	79fa      	ldrb	r2, [r7, #7]
 80039a2:	4611      	mov	r1, r2
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 fab4 	bl	8003f12 <ringBuffer_push>
}
 80039aa:	bf00      	nop
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20000360 	.word	0x20000360
 80039b8:	2000049c 	.word	0x2000049c

080039bc <Read_Response>:
 * @param 	response is a string is checked if it is in the ring buffer.
 * @retval	1: There is a string passed as a parameter in the ring buffer.
 * 			0: There is no string passed as a parameter in the ring buffer.
 */
uint32_t Read_Response(char * response)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
	return ringBuffer_lookFor(rx_buffer, (uint8_t*)response);
 80039c4:	4b05      	ldr	r3, [pc, #20]	; (80039dc <Read_Response+0x20>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6879      	ldr	r1, [r7, #4]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 fb2b 	bl	8004026 <ringBuffer_lookFor>
 80039d0:	4603      	mov	r3, r0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	2000049c 	.word	0x2000049c

080039e0 <Wait_Response>:


Status Wait_Response(char* response, uint32_t timeout)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]

	static uint32_t time = 0;
	static uint8_t firstCall = 0;

	if(!firstCall)
 80039ea:	4b1a      	ldr	r3, [pc, #104]	; (8003a54 <Wait_Response+0x74>)
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d108      	bne.n	8003a04 <Wait_Response+0x24>
	{
		time = ESP8266.getTick();
 80039f2:	4b19      	ldr	r3, [pc, #100]	; (8003a58 <Wait_Response+0x78>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	4798      	blx	r3
 80039f8:	4603      	mov	r3, r0
 80039fa:	4a18      	ldr	r2, [pc, #96]	; (8003a5c <Wait_Response+0x7c>)
 80039fc:	6013      	str	r3, [r2, #0]
		firstCall = 1;
 80039fe:	4b15      	ldr	r3, [pc, #84]	; (8003a54 <Wait_Response+0x74>)
 8003a00:	2201      	movs	r2, #1
 8003a02:	701a      	strb	r2, [r3, #0]
	}

	if(ringBuffer_lookFor(rx_buffer, (uint8_t*)response))
 8003a04:	4b16      	ldr	r3, [pc, #88]	; (8003a60 <Wait_Response+0x80>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 fb0b 	bl	8004026 <ringBuffer_lookFor>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d007      	beq.n	8003a26 <Wait_Response+0x46>
	{
		firstCall = 0;
 8003a16:	4b0f      	ldr	r3, [pc, #60]	; (8003a54 <Wait_Response+0x74>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	701a      	strb	r2, [r3, #0]
		time = 0;
 8003a1c:	4b0f      	ldr	r3, [pc, #60]	; (8003a5c <Wait_Response+0x7c>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]
		return FOUND;
 8003a22:	2300      	movs	r3, #0
 8003a24:	e012      	b.n	8003a4c <Wait_Response+0x6c>
	}
	else if(ESP8266.getTick() - time >= timeout)
 8003a26:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <Wait_Response+0x78>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	4798      	blx	r3
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	4b0b      	ldr	r3, [pc, #44]	; (8003a5c <Wait_Response+0x7c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d807      	bhi.n	8003a4a <Wait_Response+0x6a>
	{
		firstCall = 0;
 8003a3a:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <Wait_Response+0x74>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	701a      	strb	r2, [r3, #0]
		time = 0;
 8003a40:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <Wait_Response+0x7c>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]
		return TIMEOUT_ERROR;
 8003a46:	2302      	movs	r3, #2
 8003a48:	e000      	b.n	8003a4c <Wait_Response+0x6c>
	}
	else
	{
		return IDLE;
 8003a4a:	2305      	movs	r3, #5
	}

}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3708      	adds	r7, #8
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	2000036c 	.word	0x2000036c
 8003a58:	20000360 	.word	0x20000360
 8003a5c:	20000370 	.word	0x20000370
 8003a60:	2000049c 	.word	0x2000049c

08003a64 <Connect_Wifi>:

Status Connect_Wifi(char* ssid, char* password)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b098      	sub	sp, #96	; 0x60
 8003a68:	af02      	add	r7, sp, #8
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
	char *command_buffer[3] =
 8003a6e:	4a16      	ldr	r2, [pc, #88]	; (8003ac8 <Connect_Wifi+0x64>)
 8003a70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a74:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		AT_CWMODE_STATION,
		AT_CWQAP,
		""
	};
	char *response_buffer[3] =
 8003a7a:	4a14      	ldr	r2, [pc, #80]	; (8003acc <Connect_Wifi+0x68>)
 8003a7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a80:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		AT_RESPONSE_OK,
		AT_RESPONSE_OK,
		AT_RESPONSE_OK
	};
	Status response_state = IDLE;
 8003a86:	2305      	movs	r3, #5
 8003a88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	char wifi_buffer[50];

	sprintf(wifi_buffer,"%s\"%s\",\"%s\"\r\n",AT_CWJAP,ssid,password); 		// AT+CWJAP="<SSID>","<password>"
 8003a8c:	f107 0008 	add.w	r0, r7, #8
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a0e      	ldr	r2, [pc, #56]	; (8003ad0 <Connect_Wifi+0x6c>)
 8003a98:	490e      	ldr	r1, [pc, #56]	; (8003ad4 <Connect_Wifi+0x70>)
 8003a9a:	f01c ffc9 	bl	8020a30 <siprintf>

	command_buffer[2] = wifi_buffer;
 8003a9e:	f107 0308 	add.w	r3, r7, #8
 8003aa2:	653b      	str	r3, [r7, #80]	; 0x50

	response_state = Command_Process(command_buffer, response_buffer, 3);
 8003aa4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003aa8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003aac:	2203      	movs	r2, #3
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 f82e 	bl	8003b10 <Command_Process>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	return response_state;
 8003aba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3758      	adds	r7, #88	; 0x58
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	0802359c 	.word	0x0802359c
 8003acc:	080235a8 	.word	0x080235a8
 8003ad0:	08023580 	.word	0x08023580
 8003ad4:	0802358c 	.word	0x0802358c

08003ad8 <Disconnect_Wifi>:

Status Disconnect_Wifi(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
	char *command_buffer[1] = { AT_CWQAP };
 8003ade:	4b0a      	ldr	r3, [pc, #40]	; (8003b08 <Disconnect_Wifi+0x30>)
 8003ae0:	60bb      	str	r3, [r7, #8]
	char *response_buffer[1] = { AT_RESPONSE_OK };
 8003ae2:	4b0a      	ldr	r3, [pc, #40]	; (8003b0c <Disconnect_Wifi+0x34>)
 8003ae4:	607b      	str	r3, [r7, #4]

	Status response_state = IDLE;
 8003ae6:	2305      	movs	r3, #5
 8003ae8:	73fb      	strb	r3, [r7, #15]

	response_state = Command_Process(command_buffer, response_buffer, 1);
 8003aea:	1d39      	adds	r1, r7, #4
 8003aec:	f107 0308 	add.w	r3, r7, #8
 8003af0:	2201      	movs	r2, #1
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 f80c 	bl	8003b10 <Command_Process>
 8003af8:	4603      	mov	r3, r0
 8003afa:	73fb      	strb	r3, [r7, #15]

	return response_state;
 8003afc:	7bfb      	ldrb	r3, [r7, #15]

}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	08023540 	.word	0x08023540
 8003b0c:	08023550 	.word	0x08023550

08003b10 <Command_Process>:

Status Command_Process(char **commandArray, char **responseArray, uint8_t numberOfCommands)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	71fb      	strb	r3, [r7, #7]
	static uint8_t commandFlag  = 1, currentCommand = 0;
	Status response;

	if(!numberOfCommands || currentCommand >= numberOfCommands)
 8003b1e:	79fb      	ldrb	r3, [r7, #7]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d004      	beq.n	8003b2e <Command_Process+0x1e>
 8003b24:	4b39      	ldr	r3, [pc, #228]	; (8003c0c <Command_Process+0xfc>)
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	79fa      	ldrb	r2, [r7, #7]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d806      	bhi.n	8003b3c <Command_Process+0x2c>
	{
		ringBuffer_flush(rx_buffer);
 8003b2e:	4b38      	ldr	r3, [pc, #224]	; (8003c10 <Command_Process+0x100>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fa41 	bl	8003fba <ringBuffer_flush>
		return STATUS_ERROR;
 8003b38:	2304      	movs	r3, #4
 8003b3a:	e062      	b.n	8003c02 <Command_Process+0xf2>
	}
	else
	{
		if(commandFlag)
 8003b3c:	4b35      	ldr	r3, [pc, #212]	; (8003c14 <Command_Process+0x104>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00b      	beq.n	8003b5c <Command_Process+0x4c>
		{
			Send_AT_Command(commandArray[currentCommand]);
 8003b44:	4b31      	ldr	r3, [pc, #196]	; (8003c0c <Command_Process+0xfc>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff ff0b 	bl	800396c <Send_AT_Command>
			commandFlag = 0;
 8003b56:	4b2f      	ldr	r3, [pc, #188]	; (8003c14 <Command_Process+0x104>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	701a      	strb	r2, [r3, #0]
		}
//		else
//		{
			response = Wait_Response(responseArray[currentCommand], 5000);
 8003b5c:	4b2b      	ldr	r3, [pc, #172]	; (8003c0c <Command_Process+0xfc>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	4413      	add	r3, r2
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f241 3188 	movw	r1, #5000	; 0x1388
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff ff37 	bl	80039e0 <Wait_Response>
 8003b72:	4603      	mov	r3, r0
 8003b74:	75fb      	strb	r3, [r7, #23]

			if(Read_Response("ERROR"))
 8003b76:	4828      	ldr	r0, [pc, #160]	; (8003c18 <Command_Process+0x108>)
 8003b78:	f7ff ff20 	bl	80039bc <Read_Response>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00c      	beq.n	8003b9c <Command_Process+0x8c>
			{
				commandFlag = 1;
 8003b82:	4b24      	ldr	r3, [pc, #144]	; (8003c14 <Command_Process+0x104>)
 8003b84:	2201      	movs	r2, #1
 8003b86:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 8003b88:	4b20      	ldr	r3, [pc, #128]	; (8003c0c <Command_Process+0xfc>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	701a      	strb	r2, [r3, #0]
				ringBuffer_flush(rx_buffer);
 8003b8e:	4b20      	ldr	r3, [pc, #128]	; (8003c10 <Command_Process+0x100>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 fa11 	bl	8003fba <ringBuffer_flush>
				return STATUS_ERROR;
 8003b98:	2304      	movs	r3, #4
 8003b9a:	e032      	b.n	8003c02 <Command_Process+0xf2>
			}
			else if(response == IDLE)
 8003b9c:	7dfb      	ldrb	r3, [r7, #23]
 8003b9e:	2b05      	cmp	r3, #5
 8003ba0:	d101      	bne.n	8003ba6 <Command_Process+0x96>
			{
				return response;
 8003ba2:	7dfb      	ldrb	r3, [r7, #23]
 8003ba4:	e02d      	b.n	8003c02 <Command_Process+0xf2>
			}
			else if(response == FOUND)
 8003ba6:	7dfb      	ldrb	r3, [r7, #23]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d123      	bne.n	8003bf4 <Command_Process+0xe4>
			{
				if(currentCommand == (numberOfCommands-1))
 8003bac:	4b17      	ldr	r3, [pc, #92]	; (8003c0c <Command_Process+0xfc>)
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d10c      	bne.n	8003bd4 <Command_Process+0xc4>
				{
					commandFlag = 1;
 8003bba:	4b16      	ldr	r3, [pc, #88]	; (8003c14 <Command_Process+0x104>)
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	701a      	strb	r2, [r3, #0]
					currentCommand = 0;
 8003bc0:	4b12      	ldr	r3, [pc, #72]	; (8003c0c <Command_Process+0xfc>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 8003bc6:	4b12      	ldr	r3, [pc, #72]	; (8003c10 <Command_Process+0x100>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 f9f5 	bl	8003fba <ringBuffer_flush>
					return STATUS_OK;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e016      	b.n	8003c02 <Command_Process+0xf2>
				}
				else
				{
					commandFlag = 1;
 8003bd4:	4b0f      	ldr	r3, [pc, #60]	; (8003c14 <Command_Process+0x104>)
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	701a      	strb	r2, [r3, #0]
					currentCommand += 1;
 8003bda:	4b0c      	ldr	r3, [pc, #48]	; (8003c0c <Command_Process+0xfc>)
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	3301      	adds	r3, #1
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	4b0a      	ldr	r3, [pc, #40]	; (8003c0c <Command_Process+0xfc>)
 8003be4:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 8003be6:	4b0a      	ldr	r3, [pc, #40]	; (8003c10 <Command_Process+0x100>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 f9e5 	bl	8003fba <ringBuffer_flush>
					return response;
 8003bf0:	7dfb      	ldrb	r3, [r7, #23]
 8003bf2:	e006      	b.n	8003c02 <Command_Process+0xf2>
				}

			}
			else
			{
				commandFlag = 1;
 8003bf4:	4b07      	ldr	r3, [pc, #28]	; (8003c14 <Command_Process+0x104>)
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 8003bfa:	4b04      	ldr	r3, [pc, #16]	; (8003c0c <Command_Process+0xfc>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	701a      	strb	r2, [r3, #0]
				return response;
 8003c00:	7dfb      	ldrb	r3, [r7, #23]
			}
//		}
	}


}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	20000374 	.word	0x20000374
 8003c10:	2000049c 	.word	0x2000049c
 8003c14:	20000010 	.word	0x20000010
 8003c18:	080235b4 	.word	0x080235b4

08003c1c <Connect_TCP_Server>:

Status Connect_TCP_Server(char* ip, char* port)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b0a4      	sub	sp, #144	; 0x90
 8003c20:	af02      	add	r7, sp, #8
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
	Status response_state = IDLE;
 8003c26:	2305      	movs	r3, #5
 8003c28:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	char *command_buffer[3] =
 8003c2c:	4a14      	ldr	r2, [pc, #80]	; (8003c80 <Connect_TCP_Server+0x64>)
 8003c2e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003c32:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		AT_CIPCLOSE,
		AT_CIPMUX_SINGLE,
		""
	};

	char *response_buffer[3] =
 8003c38:	4a12      	ldr	r2, [pc, #72]	; (8003c84 <Connect_TCP_Server+0x68>)
 8003c3a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003c3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		AT_RESPONSE_OK
	};

	char wifi_buffer[100];

	sprintf(wifi_buffer,"%s\"%s\",%s\r\n",AT_CIPSTART_TCP,ip,port);
 8003c44:	f107 0008 	add.w	r0, r7, #8
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a0e      	ldr	r2, [pc, #56]	; (8003c88 <Connect_TCP_Server+0x6c>)
 8003c50:	490e      	ldr	r1, [pc, #56]	; (8003c8c <Connect_TCP_Server+0x70>)
 8003c52:	f01c feed 	bl	8020a30 <siprintf>

	command_buffer[2] = wifi_buffer;
 8003c56:	f107 0308 	add.w	r3, r7, #8
 8003c5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

	response_state = Command_Process(command_buffer, response_buffer, 3);
 8003c5e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003c62:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003c66:	2203      	movs	r2, #3
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff ff51 	bl	8003b10 <Command_Process>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	return response_state;
 8003c74:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3788      	adds	r7, #136	; 0x88
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	080235dc 	.word	0x080235dc
 8003c84:	080235a8 	.word	0x080235a8
 8003c88:	080235bc 	.word	0x080235bc
 8003c8c:	080235d0 	.word	0x080235d0

08003c90 <Disconnect_TCP_Server>:

Status Disconnect_TCP_Server(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
	Status response_state = IDLE;
 8003c96:	2305      	movs	r3, #5
 8003c98:	73fb      	strb	r3, [r7, #15]

	char *command_buffer[1] = { AT_CIPCLOSE };
 8003c9a:	4b09      	ldr	r3, [pc, #36]	; (8003cc0 <Disconnect_TCP_Server+0x30>)
 8003c9c:	60bb      	str	r3, [r7, #8]
	char *response_buffer[1] = { AT_RESPONSE_OK };
 8003c9e:	4b09      	ldr	r3, [pc, #36]	; (8003cc4 <Disconnect_TCP_Server+0x34>)
 8003ca0:	607b      	str	r3, [r7, #4]

	response_state = Command_Process(command_buffer, response_buffer, 1);
 8003ca2:	1d39      	adds	r1, r7, #4
 8003ca4:	f107 0308 	add.w	r3, r7, #8
 8003ca8:	2201      	movs	r2, #1
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff ff30 	bl	8003b10 <Command_Process>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	73fb      	strb	r3, [r7, #15]

	return response_state;
 8003cb4:	7bfb      	ldrb	r3, [r7, #15]

}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	08023554 	.word	0x08023554
 8003cc4:	08023550 	.word	0x08023550

08003cc8 <Send_TCP_Message>:

Status Send_TCP_Message(char* message)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b096      	sub	sp, #88	; 0x58
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
	Status response_state = STATUS_ERROR;
 8003cd0:	2304      	movs	r3, #4
 8003cd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	uint32_t length=0;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	653b      	str	r3, [r7, #80]	; 0x50

	length = strlen(message);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7fc faae 	bl	800023c <strlen>
 8003ce0:	6538      	str	r0, [r7, #80]	; 0x50

	char cipSendBuffer[50];

	sprintf(cipSendBuffer,"%s%ld\r\n",AT_CIPSEND,length);
 8003ce2:	f107 001c 	add.w	r0, r7, #28
 8003ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ce8:	4a10      	ldr	r2, [pc, #64]	; (8003d2c <Send_TCP_Message+0x64>)
 8003cea:	4911      	ldr	r1, [pc, #68]	; (8003d30 <Send_TCP_Message+0x68>)
 8003cec:	f01c fea0 	bl	8020a30 <siprintf>

	char *command_buffer[2];

	command_buffer[0] = cipSendBuffer;
 8003cf0:	f107 031c 	add.w	r3, r7, #28
 8003cf4:	617b      	str	r3, [r7, #20]
	command_buffer[1] = message;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	61bb      	str	r3, [r7, #24]

	char *response_buffer[2] =
 8003cfa:	4a0e      	ldr	r2, [pc, #56]	; (8003d34 <Send_TCP_Message+0x6c>)
 8003cfc:	f107 030c 	add.w	r3, r7, #12
 8003d00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d04:	e883 0003 	stmia.w	r3, {r0, r1}
	{
			AT_RESPONSE_GREATER_THAN,
			AT_RESPONSE_SEND_OK
	};

	response_state = Command_Process(command_buffer, response_buffer, 2);
 8003d08:	f107 010c 	add.w	r1, r7, #12
 8003d0c:	f107 0314 	add.w	r3, r7, #20
 8003d10:	2202      	movs	r2, #2
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff fefc 	bl	8003b10 <Command_Process>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	return response_state;
 8003d1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57

}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3758      	adds	r7, #88	; 0x58
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	080235e8 	.word	0x080235e8
 8003d30:	080235f4 	.word	0x080235f4
 8003d34:	080235fc 	.word	0x080235fc

08003d38 <Read_TCP_Message>:

Status Read_TCP_Message(char* receivedMessage)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08a      	sub	sp, #40	; 0x28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
	Status response_state = IDLE;
 8003d40:	2305      	movs	r3, #5
 8003d42:	76fb      	strb	r3, [r7, #27]

	char *substring = strstr((char*)rx_buffer->buffer,"+IPD,");
 8003d44:	4b31      	ldr	r3, [pc, #196]	; (8003e0c <Read_TCP_Message+0xd4>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	4931      	ldr	r1, [pc, #196]	; (8003e10 <Read_TCP_Message+0xd8>)
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f01d fc31 	bl	80215b4 <strstr>
 8003d52:	6178      	str	r0, [r7, #20]

	char messageLengthString[3];

	uint32_t messageLength=0,index=0;
 8003d54:	2300      	movs	r3, #0
 8003d56:	613b      	str	r3, [r7, #16]
 8003d58:	2300      	movs	r3, #0
 8003d5a:	627b      	str	r3, [r7, #36]	; 0x24


	if(substring != NULL)
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d04a      	beq.n	8003df8 <Read_TCP_Message+0xc0>
	{
		for(uint8_t i=0;i<3;i++)
 8003d62:	2300      	movs	r3, #0
 8003d64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d68:	e01c      	b.n	8003da4 <Read_TCP_Message+0x6c>
		{
			if(*(substring+5+i) == ':')
 8003d6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d6e:	3305      	adds	r3, #5
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	4413      	add	r3, r2
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	2b3a      	cmp	r3, #58	; 0x3a
 8003d78:	d019      	beq.n	8003dae <Read_TCP_Message+0x76>
				break;
			messageLengthString[i] = *(substring+5+i);
 8003d7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d7e:	3305      	adds	r3, #5
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	441a      	add	r2, r3
 8003d84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d88:	7812      	ldrb	r2, [r2, #0]
 8003d8a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003d8e:	440b      	add	r3, r1
 8003d90:	f803 2c1c 	strb.w	r2, [r3, #-28]
			index += 1;
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	3301      	adds	r3, #1
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
		for(uint8_t i=0;i<3;i++)
 8003d9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d9e:	3301      	adds	r3, #1
 8003da0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003da4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d9de      	bls.n	8003d6a <Read_TCP_Message+0x32>
 8003dac:	e000      	b.n	8003db0 <Read_TCP_Message+0x78>
				break;
 8003dae:	bf00      	nop

		}

		messageLength = atoi(messageLengthString);
 8003db0:	f107 030c 	add.w	r3, r7, #12
 8003db4:	4618      	mov	r0, r3
 8003db6:	f01b fe9c 	bl	801faf2 <atoi>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	613b      	str	r3, [r7, #16]

		for(uint32_t i=0;i<=messageLength+1;i++)
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61fb      	str	r3, [r7, #28]
 8003dc2:	e00d      	b.n	8003de0 <Read_TCP_Message+0xa8>
		{
			receivedMessage[i] = *(substring+6+index+i);
 8003dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	4413      	add	r3, r2
 8003dca:	3306      	adds	r3, #6
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	441a      	add	r2, r3
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	440b      	add	r3, r1
 8003dd6:	7812      	ldrb	r2, [r2, #0]
 8003dd8:	701a      	strb	r2, [r3, #0]
		for(uint32_t i=0;i<=messageLength+1;i++)
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	61fb      	str	r3, [r7, #28]
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	3301      	adds	r3, #1
 8003de4:	69fa      	ldr	r2, [r7, #28]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d9ec      	bls.n	8003dc4 <Read_TCP_Message+0x8c>
		}
		ringBuffer_flush(rx_buffer);
 8003dea:	4b08      	ldr	r3, [pc, #32]	; (8003e0c <Read_TCP_Message+0xd4>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 f8e3 	bl	8003fba <ringBuffer_flush>
		return STATUS_OK;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e005      	b.n	8003e04 <Read_TCP_Message+0xcc>


	}
	else
	{
		ringBuffer_flush(rx_buffer);
 8003df8:	4b04      	ldr	r3, [pc, #16]	; (8003e0c <Read_TCP_Message+0xd4>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 f8dc 	bl	8003fba <ringBuffer_flush>
		return STATUS_ERROR;
 8003e02:	2304      	movs	r3, #4
	}


	return response_state;
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3728      	adds	r7, #40	; 0x28
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	2000049c 	.word	0x2000049c
 8003e10:	08023604 	.word	0x08023604

08003e14 <Wait_TCP_Message>:

Status Wait_TCP_Message(char* receivedMessage, uint32_t timeout)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
	static uint8_t firstCall = 1;
	static uint32_t time = 0;

	if(firstCall)
 8003e1e:	4b19      	ldr	r3, [pc, #100]	; (8003e84 <Wait_TCP_Message+0x70>)
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d008      	beq.n	8003e38 <Wait_TCP_Message+0x24>
	{
		time = ESP8266.getTick();
 8003e26:	4b18      	ldr	r3, [pc, #96]	; (8003e88 <Wait_TCP_Message+0x74>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	4798      	blx	r3
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	4a17      	ldr	r2, [pc, #92]	; (8003e8c <Wait_TCP_Message+0x78>)
 8003e30:	6013      	str	r3, [r2, #0]
		firstCall = 0;
 8003e32:	4b14      	ldr	r3, [pc, #80]	; (8003e84 <Wait_TCP_Message+0x70>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	701a      	strb	r2, [r3, #0]
	}

	if(Read_TCP_Message(receivedMessage) == STATUS_OK)
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff ff7d 	bl	8003d38 <Read_TCP_Message>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b03      	cmp	r3, #3
 8003e42:	d107      	bne.n	8003e54 <Wait_TCP_Message+0x40>
	{
		time = 0;
 8003e44:	4b11      	ldr	r3, [pc, #68]	; (8003e8c <Wait_TCP_Message+0x78>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	601a      	str	r2, [r3, #0]
		firstCall = 1;
 8003e4a:	4b0e      	ldr	r3, [pc, #56]	; (8003e84 <Wait_TCP_Message+0x70>)
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e012      	b.n	8003e7a <Wait_TCP_Message+0x66>
	}
	else if(ESP8266.getTick()-time >= timeout)
 8003e54:	4b0c      	ldr	r3, [pc, #48]	; (8003e88 <Wait_TCP_Message+0x74>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	4798      	blx	r3
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <Wait_TCP_Message+0x78>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d807      	bhi.n	8003e78 <Wait_TCP_Message+0x64>
	{
		time = 0;
 8003e68:	4b08      	ldr	r3, [pc, #32]	; (8003e8c <Wait_TCP_Message+0x78>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	601a      	str	r2, [r3, #0]
		firstCall = 1;
 8003e6e:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <Wait_TCP_Message+0x70>)
 8003e70:	2201      	movs	r2, #1
 8003e72:	701a      	strb	r2, [r3, #0]
		return TIMEOUT_ERROR;
 8003e74:	2302      	movs	r3, #2
 8003e76:	e000      	b.n	8003e7a <Wait_TCP_Message+0x66>
	}
	else
		return IDLE;
 8003e78:	2305      	movs	r3, #5

}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	20000011 	.word	0x20000011
 8003e88:	20000360 	.word	0x20000360
 8003e8c:	20000378 	.word	0x20000378

08003e90 <ringBuffer_init>:
 * @brief 	Initialize the ring buffer. Ring buffer is allocated after this function.
 * @param 	size parameter specifies the size of ring buffer.
 * @retval	RingBuffer typedef structure.
 */
RingBuffer* ringBuffer_init(uint32_t size)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
	RingBuffer* rBuf;

	rBuf = (RingBuffer*)malloc(1*sizeof(RingBuffer));
 8003e98:	2010      	movs	r0, #16
 8003e9a:	f01c fbf7 	bl	802068c <malloc>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	60fb      	str	r3, [r7, #12]
	if(rBuf == NULL)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <ringBuffer_init+0x1c>
	{
		// Error Checks
		return 0;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	e017      	b.n	8003edc <ringBuffer_init+0x4c>
	}

	rBuf->size = size;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	609a      	str	r2, [r3, #8]
	rBuf->head = 0;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]
	rBuf->tail = 0;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	605a      	str	r2, [r3, #4]

	rBuf->buffer = (uint8_t*)calloc((size_t)size,sizeof(uint8_t));
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f01b fe1b 	bl	801fafc <calloc>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	461a      	mov	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	60da      	str	r2, [r3, #12]
	if(rBuf->buffer == NULL)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <ringBuffer_init+0x4a>
		{
			// Error Checks
			return 0;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	e000      	b.n	8003edc <ringBuffer_init+0x4c>
		}

	return rBuf;
 8003eda:	68fb      	ldr	r3, [r7, #12]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <ringBuffer_deInit>:
 * @brief 	De-initialize the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_deInit(RingBuffer* buffer)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
	if(buffer != NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00b      	beq.n	8003f0a <ringBuffer_deInit+0x26>
	{
		if(buffer->buffer != NULL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d004      	beq.n	8003f04 <ringBuffer_deInit+0x20>
		{
			free(buffer->buffer);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f01c fbcc 	bl	802069c <free>
		}
		free(buffer);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f01c fbc9 	bl	802069c <free>
	}
}
 8003f0a:	bf00      	nop
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <ringBuffer_push>:
 * @param 	RingBuffer typedef structure.
 * @param 	data is an unsigned 8-bit integer variable to be pushed into the buffer.
 * @retval	None.
 */
void ringBuffer_push(RingBuffer* ringBuffer, uint8_t data)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	70fb      	strb	r3, [r7, #3]
	if(ringBuffer->head != (ringBuffer->size - 1))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d00c      	beq.n	8003f46 <ringBuffer_push+0x34>
	{
		ringBuffer->buffer[ringBuffer->head] = data;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68da      	ldr	r2, [r3, #12]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4413      	add	r3, r2
 8003f36:	78fa      	ldrb	r2, [r7, #3]
 8003f38:	701a      	strb	r2, [r3, #0]
		ringBuffer->head += 1;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	1c5a      	adds	r2, r3, #1
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	601a      	str	r2, [r3, #0]
	else
	{
		ringBuffer->buffer[ringBuffer->head] = data;
		ringBuffer->head = 0;
	}
}
 8003f44:	e009      	b.n	8003f5a <ringBuffer_push+0x48>
		ringBuffer->buffer[ringBuffer->head] = data;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68da      	ldr	r2, [r3, #12]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4413      	add	r3, r2
 8003f50:	78fa      	ldrb	r2, [r7, #3]
 8003f52:	701a      	strb	r2, [r3, #0]
		ringBuffer->head = 0;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <ringBuffer_pop>:
 * @brief 	Read data from the buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	unsigned 8-bit integer data to be read from the buffer.
 */
uint8_t ringBuffer_pop(RingBuffer* ringBuffer)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b085      	sub	sp, #20
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
	uint8_t data;

	if(ringBuffer->tail != (ringBuffer->size - 1))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d00d      	beq.n	8003f98 <ringBuffer_pop+0x32>
	{
		data = ringBuffer->buffer[ringBuffer->tail];
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68da      	ldr	r2, [r3, #12]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	4413      	add	r3, r2
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail += 1;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	605a      	str	r2, [r3, #4]
		return data;
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
 8003f96:	e00a      	b.n	8003fae <ringBuffer_pop+0x48>
	}
	else
	{

		data = ringBuffer->buffer[ringBuffer->tail];
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail = 0;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	605a      	str	r2, [r3, #4]
		return data;
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <ringBuffer_flush>:
 * @brief 	Clear the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_flush(RingBuffer* ringBuffer)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b082      	sub	sp, #8
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
	memset(ringBuffer->buffer,0x00,ringBuffer->size);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68d8      	ldr	r0, [r3, #12]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	2100      	movs	r1, #0
 8003fce:	f01c fb7b 	bl	80206c8 <memset>
	ringBuffer->head = ringBuffer->tail = 0;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	605a      	str	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	601a      	str	r2, [r3, #0]
}
 8003fe0:	bf00      	nop
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <ringBuffer_pushArray>:
 * @param 	RingBuffer typedef structure.
 * @param	data is an unsigned 8-bit data array to be written into the buffer.
 * @retval	None.
 */
void ringBuffer_pushArray(RingBuffer* ringBuffer, uint8_t* data)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
	 for(int i = 0; i<strlen((char*)data);i++)
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60fb      	str	r3, [r7, #12]
 8003ff6:	e00a      	b.n	800400e <ringBuffer_pushArray+0x26>
		 ringBuffer_push(ringBuffer, data[i]);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	4619      	mov	r1, r3
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7ff ff85 	bl	8003f12 <ringBuffer_push>
	 for(int i = 0; i<strlen((char*)data);i++)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	3301      	adds	r3, #1
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	6838      	ldr	r0, [r7, #0]
 8004010:	f7fc f914 	bl	800023c <strlen>
 8004014:	4602      	mov	r2, r0
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	429a      	cmp	r2, r3
 800401a:	d8ed      	bhi.n	8003ff8 <ringBuffer_pushArray+0x10>
}
 800401c:	bf00      	nop
 800401e:	bf00      	nop
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <ringBuffer_lookFor>:
 * @param	data is an unsigned 8-bit array to be searched in the buffer.
 * @retval	1: data is available in the buffer.
 * 			0: data is not available in the buffer.
 */
uint32_t ringBuffer_lookFor(RingBuffer* ringBuffer, uint8_t* data)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b084      	sub	sp, #16
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	6039      	str	r1, [r7, #0]
	char* str = strstr((char*)ringBuffer->buffer,(char*)data);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	6839      	ldr	r1, [r7, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f01d fabc 	bl	80215b4 <strstr>
 800403c:	60f8      	str	r0, [r7, #12]

	if(str != NULL)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <ringBuffer_lookFor+0x22>
		return 1;
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <ringBuffer_lookFor+0x24>
	else
		return 0;
 8004048:	2300      	movs	r3, #0

}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <ringBuffer_capacity>:
 * @brief 	Check the size of the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	Size of ring buffer.
 */
uint32_t ringBuffer_capacity(RingBuffer* ringBuffer)
{
 8004052:	b480      	push	{r7}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
	return ringBuffer->size;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689b      	ldr	r3, [r3, #8]
}
 800405e:	4618      	mov	r0, r3
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
	...

0800406c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004072:	f7fc ff7c 	bl	8000f6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004076:	f000 f81d 	bl	80040b4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800407a:	f000 f951 	bl	8004320 <_ZL12MX_GPIO_Initv>
  MX_LPUART1_UART_Init();
 800407e:	f000 f891 	bl	80041a4 <_ZL20MX_LPUART1_UART_Initv>
  MX_USART1_UART_Init();
 8004082:	f000 f8ed 	bl	8004260 <_ZL19MX_USART1_UART_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const char * av_override[] = { "exe","-v" };      // verbose mode
 8004086:	4a0a      	ldr	r2, [pc, #40]	; (80040b0 <main+0x44>)
 8004088:	463b      	mov	r3, r7
 800408a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800408e:	e883 0003 	stmia.w	r3, {r0, r1}
  CommandLineTestRunner::RunAllTests(2, av_override);
 8004092:	463b      	mov	r3, r7
 8004094:	4619      	mov	r1, r3
 8004096:	2002      	movs	r0, #2
 8004098:	f004 fda2 	bl	8008be0 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>

  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800409c:	2120      	movs	r1, #32
 800409e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040a2:	f7fd fb61 	bl	8001768 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80040a6:	2064      	movs	r0, #100	; 0x64
 80040a8:	f7fc ffd2 	bl	8001050 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80040ac:	e7f6      	b.n	800409c <main+0x30>
 80040ae:	bf00      	nop
 80040b0:	08023614 	.word	0x08023614

080040b4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b0a8      	sub	sp, #160	; 0xa0
 80040b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80040be:	2238      	movs	r2, #56	; 0x38
 80040c0:	2100      	movs	r1, #0
 80040c2:	4618      	mov	r0, r3
 80040c4:	f01c fb00 	bl	80206c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]
 80040d0:	605a      	str	r2, [r3, #4]
 80040d2:	609a      	str	r2, [r3, #8]
 80040d4:	60da      	str	r2, [r3, #12]
 80040d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80040d8:	463b      	mov	r3, r7
 80040da:	2254      	movs	r2, #84	; 0x54
 80040dc:	2100      	movs	r1, #0
 80040de:	4618      	mov	r0, r3
 80040e0:	f01c faf2 	bl	80206c8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80040e4:	2000      	movs	r0, #0
 80040e6:	f7fd fb7d 	bl	80017e4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80040ea:	2302      	movs	r3, #2
 80040ec:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80040ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040f2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80040f4:	2340      	movs	r3, #64	; 0x40
 80040f6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80040f8:	2302      	movs	r3, #2
 80040fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80040fe:	2302      	movs	r3, #2
 8004100:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004104:	2304      	movs	r3, #4
 8004106:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800410a:	2355      	movs	r3, #85	; 0x55
 800410c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004110:	2302      	movs	r3, #2
 8004112:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004116:	2302      	movs	r3, #2
 8004118:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800411c:	2302      	movs	r3, #2
 800411e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004122:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004126:	4618      	mov	r0, r3
 8004128:	f7fd fc10 	bl	800194c <HAL_RCC_OscConfig>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	bf14      	ite	ne
 8004132:	2301      	movne	r3, #1
 8004134:	2300      	moveq	r3, #0
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 800413c:	f000 f960 	bl	8004400 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004140:	230f      	movs	r3, #15
 8004142:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004144:	2303      	movs	r3, #3
 8004146:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004148:	2300      	movs	r3, #0
 800414a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800414c:	2300      	movs	r3, #0
 800414e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004150:	2300      	movs	r3, #0
 8004152:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004154:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004158:	2104      	movs	r1, #4
 800415a:	4618      	mov	r0, r3
 800415c:	f7fd ff0e 	bl	8001f7c <HAL_RCC_ClockConfig>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	bf14      	ite	ne
 8004166:	2301      	movne	r3, #1
 8004168:	2300      	moveq	r3, #0
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8004170:	f000 f946 	bl	8004400 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 8004174:	2321      	movs	r3, #33	; 0x21
 8004176:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004178:	2300      	movs	r3, #0
 800417a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800417c:	2300      	movs	r3, #0
 800417e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004180:	463b      	mov	r3, r7
 8004182:	4618      	mov	r0, r3
 8004184:	f7fe f916 	bl	80023b4 <HAL_RCCEx_PeriphCLKConfig>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	bf14      	ite	ne
 800418e:	2301      	movne	r3, #1
 8004190:	2300      	moveq	r3, #0
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 8004198:	f000 f932 	bl	8004400 <Error_Handler>
  }
}
 800419c:	bf00      	nop
 800419e:	37a0      	adds	r7, #160	; 0xa0
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80041a8:	4b2b      	ldr	r3, [pc, #172]	; (8004258 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041aa:	4a2c      	ldr	r2, [pc, #176]	; (800425c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80041ac:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80041ae:	4b2a      	ldr	r3, [pc, #168]	; (8004258 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80041b4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80041b6:	4b28      	ldr	r3, [pc, #160]	; (8004258 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80041bc:	4b26      	ldr	r3, [pc, #152]	; (8004258 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041be:	2200      	movs	r2, #0
 80041c0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80041c2:	4b25      	ldr	r3, [pc, #148]	; (8004258 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80041c8:	4b23      	ldr	r3, [pc, #140]	; (8004258 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041ca:	220c      	movs	r2, #12
 80041cc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041ce:	4b22      	ldr	r3, [pc, #136]	; (8004258 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80041d4:	4b20      	ldr	r3, [pc, #128]	; (8004258 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80041da:	4b1f      	ldr	r3, [pc, #124]	; (8004258 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041dc:	2200      	movs	r2, #0
 80041de:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80041e0:	4b1d      	ldr	r3, [pc, #116]	; (8004258 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80041e6:	481c      	ldr	r0, [pc, #112]	; (8004258 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041e8:	f7fe fb30 	bl	800284c <HAL_UART_Init>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	bf14      	ite	ne
 80041f2:	2301      	movne	r3, #1
 80041f4:	2300      	moveq	r3, #0
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 80041fc:	f000 f900 	bl	8004400 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004200:	2100      	movs	r1, #0
 8004202:	4815      	ldr	r0, [pc, #84]	; (8004258 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8004204:	f7ff fab6 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	bf14      	ite	ne
 800420e:	2301      	movne	r3, #1
 8004210:	2300      	moveq	r3, #0
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 8004218:	f000 f8f2 	bl	8004400 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800421c:	2100      	movs	r1, #0
 800421e:	480e      	ldr	r0, [pc, #56]	; (8004258 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8004220:	f7ff fae6 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	bf14      	ite	ne
 800422a:	2301      	movne	r3, #1
 800422c:	2300      	moveq	r3, #0
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 8004234:	f000 f8e4 	bl	8004400 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8004238:	4807      	ldr	r0, [pc, #28]	; (8004258 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800423a:	f7ff fa62 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	bf14      	ite	ne
 8004244:	2301      	movne	r3, #1
 8004246:	2300      	moveq	r3, #0
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 800424e:	f000 f8d7 	bl	8004400 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8004252:	bf00      	nop
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	2000037c 	.word	0x2000037c
 800425c:	40008000 	.word	0x40008000

08004260 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004264:	4b2c      	ldr	r3, [pc, #176]	; (8004318 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004266:	4a2d      	ldr	r2, [pc, #180]	; (800431c <_ZL19MX_USART1_UART_Initv+0xbc>)
 8004268:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800426a:	4b2b      	ldr	r3, [pc, #172]	; (8004318 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800426c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004270:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004272:	4b29      	ldr	r3, [pc, #164]	; (8004318 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004274:	2200      	movs	r2, #0
 8004276:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004278:	4b27      	ldr	r3, [pc, #156]	; (8004318 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800427a:	2200      	movs	r2, #0
 800427c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800427e:	4b26      	ldr	r3, [pc, #152]	; (8004318 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004280:	2200      	movs	r2, #0
 8004282:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004284:	4b24      	ldr	r3, [pc, #144]	; (8004318 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004286:	220c      	movs	r2, #12
 8004288:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800428a:	4b23      	ldr	r3, [pc, #140]	; (8004318 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800428c:	2200      	movs	r2, #0
 800428e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004290:	4b21      	ldr	r3, [pc, #132]	; (8004318 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004292:	2200      	movs	r2, #0
 8004294:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004296:	4b20      	ldr	r3, [pc, #128]	; (8004318 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004298:	2200      	movs	r2, #0
 800429a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800429c:	4b1e      	ldr	r3, [pc, #120]	; (8004318 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800429e:	2200      	movs	r2, #0
 80042a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80042a2:	4b1d      	ldr	r3, [pc, #116]	; (8004318 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80042a8:	481b      	ldr	r0, [pc, #108]	; (8004318 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80042aa:	f7fe facf 	bl	800284c <HAL_UART_Init>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	bf14      	ite	ne
 80042b4:	2301      	movne	r3, #1
 80042b6:	2300      	moveq	r3, #0
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 80042be:	f000 f89f 	bl	8004400 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80042c2:	2100      	movs	r1, #0
 80042c4:	4814      	ldr	r0, [pc, #80]	; (8004318 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80042c6:	f7ff fa55 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	bf14      	ite	ne
 80042d0:	2301      	movne	r3, #1
 80042d2:	2300      	moveq	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 80042da:	f000 f891 	bl	8004400 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80042de:	2100      	movs	r1, #0
 80042e0:	480d      	ldr	r0, [pc, #52]	; (8004318 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80042e2:	f7ff fa85 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	bf14      	ite	ne
 80042ec:	2301      	movne	r3, #1
 80042ee:	2300      	moveq	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 80042f6:	f000 f883 	bl	8004400 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80042fa:	4807      	ldr	r0, [pc, #28]	; (8004318 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80042fc:	f7ff fa01 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	bf14      	ite	ne
 8004306:	2301      	movne	r3, #1
 8004308:	2300      	moveq	r3, #0
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8004310:	f000 f876 	bl	8004400 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004314:	bf00      	nop
 8004316:	bd80      	pop	{r7, pc}
 8004318:	2000040c 	.word	0x2000040c
 800431c:	40013800 	.word	0x40013800

08004320 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b08a      	sub	sp, #40	; 0x28
 8004324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004326:	f107 0314 	add.w	r3, r7, #20
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	605a      	str	r2, [r3, #4]
 8004330:	609a      	str	r2, [r3, #8]
 8004332:	60da      	str	r2, [r3, #12]
 8004334:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004336:	4b2f      	ldr	r3, [pc, #188]	; (80043f4 <_ZL12MX_GPIO_Initv+0xd4>)
 8004338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800433a:	4a2e      	ldr	r2, [pc, #184]	; (80043f4 <_ZL12MX_GPIO_Initv+0xd4>)
 800433c:	f043 0304 	orr.w	r3, r3, #4
 8004340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004342:	4b2c      	ldr	r3, [pc, #176]	; (80043f4 <_ZL12MX_GPIO_Initv+0xd4>)
 8004344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004346:	f003 0304 	and.w	r3, r3, #4
 800434a:	613b      	str	r3, [r7, #16]
 800434c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800434e:	4b29      	ldr	r3, [pc, #164]	; (80043f4 <_ZL12MX_GPIO_Initv+0xd4>)
 8004350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004352:	4a28      	ldr	r2, [pc, #160]	; (80043f4 <_ZL12MX_GPIO_Initv+0xd4>)
 8004354:	f043 0320 	orr.w	r3, r3, #32
 8004358:	64d3      	str	r3, [r2, #76]	; 0x4c
 800435a:	4b26      	ldr	r3, [pc, #152]	; (80043f4 <_ZL12MX_GPIO_Initv+0xd4>)
 800435c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435e:	f003 0320 	and.w	r3, r3, #32
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004366:	4b23      	ldr	r3, [pc, #140]	; (80043f4 <_ZL12MX_GPIO_Initv+0xd4>)
 8004368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800436a:	4a22      	ldr	r2, [pc, #136]	; (80043f4 <_ZL12MX_GPIO_Initv+0xd4>)
 800436c:	f043 0301 	orr.w	r3, r3, #1
 8004370:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004372:	4b20      	ldr	r3, [pc, #128]	; (80043f4 <_ZL12MX_GPIO_Initv+0xd4>)
 8004374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	60bb      	str	r3, [r7, #8]
 800437c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800437e:	4b1d      	ldr	r3, [pc, #116]	; (80043f4 <_ZL12MX_GPIO_Initv+0xd4>)
 8004380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004382:	4a1c      	ldr	r2, [pc, #112]	; (80043f4 <_ZL12MX_GPIO_Initv+0xd4>)
 8004384:	f043 0302 	orr.w	r3, r3, #2
 8004388:	64d3      	str	r3, [r2, #76]	; 0x4c
 800438a:	4b1a      	ldr	r3, [pc, #104]	; (80043f4 <_ZL12MX_GPIO_Initv+0xd4>)
 800438c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	607b      	str	r3, [r7, #4]
 8004394:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004396:	2200      	movs	r2, #0
 8004398:	2120      	movs	r1, #32
 800439a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800439e:	f7fd f9cb 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80043a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80043a8:	4b13      	ldr	r3, [pc, #76]	; (80043f8 <_ZL12MX_GPIO_Initv+0xd8>)
 80043aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ac:	2300      	movs	r3, #0
 80043ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80043b0:	f107 0314 	add.w	r3, r7, #20
 80043b4:	4619      	mov	r1, r3
 80043b6:	4811      	ldr	r0, [pc, #68]	; (80043fc <_ZL12MX_GPIO_Initv+0xdc>)
 80043b8:	f7fd f83c 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80043bc:	2320      	movs	r3, #32
 80043be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043c0:	2301      	movs	r3, #1
 80043c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c4:	2300      	movs	r3, #0
 80043c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043c8:	2300      	movs	r3, #0
 80043ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80043cc:	f107 0314 	add.w	r3, r7, #20
 80043d0:	4619      	mov	r1, r3
 80043d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043d6:	f7fd f82d 	bl	8001434 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80043da:	2200      	movs	r2, #0
 80043dc:	2100      	movs	r1, #0
 80043de:	2028      	movs	r0, #40	; 0x28
 80043e0:	f7fc ff33 	bl	800124a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80043e4:	2028      	movs	r0, #40	; 0x28
 80043e6:	f7fc ff4a 	bl	800127e <HAL_NVIC_EnableIRQ>

}
 80043ea:	bf00      	nop
 80043ec:	3728      	adds	r7, #40	; 0x28
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	40021000 	.word	0x40021000
 80043f8:	10110000 	.word	0x10110000
 80043fc:	48000800 	.word	0x48000800

08004400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004404:	b672      	cpsid	i
}
 8004406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004408:	e7fe      	b.n	8004408 <Error_Handler+0x8>

0800440a <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group5setupEv>:
TEST_GROUP(RingBuffer_Test_Group)
{

	RingBuffer* testBuf;

	void setup()
 800440a:	b580      	push	{r7, lr}
 800440c:	b082      	sub	sp, #8
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
	{

	   testBuf = ringBuffer_init(50);
 8004412:	2032      	movs	r0, #50	; 0x32
 8004414:	f7ff fd3c 	bl	8003e90 <ringBuffer_init>
 8004418:	4602      	mov	r2, r0
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	605a      	str	r2, [r3, #4]

	}
 800441e:	bf00      	nop
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group8teardownEv>:

	void teardown()
 8004426:	b580      	push	{r7, lr}
 8004428:	b082      	sub	sp, #8
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
	{

		ringBuffer_deInit(testBuf);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff fd56 	bl	8003ee4 <ringBuffer_deInit>
	}
 8004438:	bf00      	nop
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>:
TEST_GROUP(RingBuffer_Test_Group)
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4618      	mov	r0, r3
 800444c:	f010 f866 	bl	801451c <_ZN5UtestC1Ev>
 8004450:	4a03      	ldr	r2, [pc, #12]	; (8004460 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev+0x20>)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4618      	mov	r0, r3
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	080280e4 	.word	0x080280e4

08004464 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>:
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	4a05      	ldr	r2, [pc, #20]	; (8004484 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev+0x20>)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4618      	mov	r0, r3
 8004476:	f010 f861 	bl	801453c <_ZN5UtestD1Ev>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4618      	mov	r0, r3
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	080280e4 	.word	0x080280e4

08004488 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD0Ev>:
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f7ff ffe7 	bl	8004464 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004496:	2108      	movs	r1, #8
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f006 f883 	bl	800a5a4 <_ZdlPvj>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4618      	mov	r0, r3
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>:
};


TEST(RingBuffer_Test_Group, InitTest)
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	605a      	str	r2, [r3, #4]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4618      	mov	r0, r3
 80044c0:	f7ff ffbe 	bl	8004440 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80044c4:	4a03      	ldr	r2, [pc, #12]	; (80044d4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev+0x2c>)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4618      	mov	r0, r3
 80044ce:	3708      	adds	r7, #8
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	080280c4 	.word	0x080280c4

080044d8 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv>:
 80044d8:	b590      	push	{r4, r7, lr}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	2224      	movs	r2, #36	; 0x24
 80044e2:	4906      	ldr	r1, [pc, #24]	; (80044fc <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv+0x24>)
 80044e4:	2008      	movs	r0, #8
 80044e6:	f006 f849 	bl	800a57c <_ZnwjPKci>
 80044ea:	4604      	mov	r4, r0
 80044ec:	4620      	mov	r0, r4
 80044ee:	f7ff ffdb 	bl	80044a8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>
 80044f2:	4623      	mov	r3, r4
 80044f4:	4618      	mov	r0, r3
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd90      	pop	{r4, r7, pc}
 80044fc:	080236a4 	.word	0x080236a4

08004500 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>:
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4618      	mov	r0, r3
 800450c:	f00e fc24 	bl	8012d58 <_ZN10UtestShellC1Ev>
 8004510:	4a03      	ldr	r2, [pc, #12]	; (8004520 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev+0x20>)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4618      	mov	r0, r3
 800451a:	3708      	adds	r7, #8
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	08028018 	.word	0x08028018

08004524 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv>:
{
 8004524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004526:	b087      	sub	sp, #28
 8004528:	af04      	add	r7, sp, #16
 800452a:	6078      	str	r0, [r7, #4]

   LONGS_EQUAL(50,testBuf->size);
 800452c:	f00f ffcc 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 8004530:	4604      	mov	r4, r0
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	3338      	adds	r3, #56	; 0x38
 8004536:	681d      	ldr	r5, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	461e      	mov	r6, r3
 8004540:	f00f ffd2 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004544:	4603      	mov	r3, r0
 8004546:	9302      	str	r3, [sp, #8]
 8004548:	2327      	movs	r3, #39	; 0x27
 800454a:	9301      	str	r3, [sp, #4]
 800454c:	4b2a      	ldr	r3, [pc, #168]	; (80045f8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	4b2a      	ldr	r3, [pc, #168]	; (80045fc <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd8>)
 8004552:	4632      	mov	r2, r6
 8004554:	2132      	movs	r1, #50	; 0x32
 8004556:	4620      	mov	r0, r4
 8004558:	47a8      	blx	r5
   CHECK(testBuf->buffer != NULL);
 800455a:	f00f ffb5 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 800455e:	4604      	mov	r4, r0
 8004560:	6823      	ldr	r3, [r4, #0]
 8004562:	3320      	adds	r3, #32
 8004564:	681d      	ldr	r5, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	2b00      	cmp	r3, #0
 800456e:	bf14      	ite	ne
 8004570:	2301      	movne	r3, #1
 8004572:	2300      	moveq	r3, #0
 8004574:	b2de      	uxtb	r6, r3
 8004576:	f00f ffb7 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800457a:	4603      	mov	r3, r0
 800457c:	9303      	str	r3, [sp, #12]
 800457e:	2328      	movs	r3, #40	; 0x28
 8004580:	9302      	str	r3, [sp, #8]
 8004582:	4b1d      	ldr	r3, [pc, #116]	; (80045f8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004584:	9301      	str	r3, [sp, #4]
 8004586:	2300      	movs	r3, #0
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	4b1d      	ldr	r3, [pc, #116]	; (8004600 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xdc>)
 800458c:	4a1d      	ldr	r2, [pc, #116]	; (8004604 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe0>)
 800458e:	4631      	mov	r1, r6
 8004590:	4620      	mov	r0, r4
 8004592:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->head);
 8004594:	f00f ff98 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 8004598:	4604      	mov	r4, r0
 800459a:	6823      	ldr	r3, [r4, #0]
 800459c:	3338      	adds	r3, #56	; 0x38
 800459e:	681d      	ldr	r5, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	461e      	mov	r6, r3
 80045a8:	f00f ff9e 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80045ac:	4603      	mov	r3, r0
 80045ae:	9302      	str	r3, [sp, #8]
 80045b0:	2329      	movs	r3, #41	; 0x29
 80045b2:	9301      	str	r3, [sp, #4]
 80045b4:	4b10      	ldr	r3, [pc, #64]	; (80045f8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	4b13      	ldr	r3, [pc, #76]	; (8004608 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe4>)
 80045ba:	4632      	mov	r2, r6
 80045bc:	2100      	movs	r1, #0
 80045be:	4620      	mov	r0, r4
 80045c0:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->tail);
 80045c2:	f00f ff81 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 80045c6:	4604      	mov	r4, r0
 80045c8:	6823      	ldr	r3, [r4, #0]
 80045ca:	3338      	adds	r3, #56	; 0x38
 80045cc:	681d      	ldr	r5, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	461e      	mov	r6, r3
 80045d6:	f00f ff87 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80045da:	4603      	mov	r3, r0
 80045dc:	9302      	str	r3, [sp, #8]
 80045de:	232a      	movs	r3, #42	; 0x2a
 80045e0:	9301      	str	r3, [sp, #4]
 80045e2:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	4b09      	ldr	r3, [pc, #36]	; (800460c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe8>)
 80045e8:	4632      	mov	r2, r6
 80045ea:	2100      	movs	r1, #0
 80045ec:	4620      	mov	r0, r4
 80045ee:	47a8      	blx	r5

}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045f8:	080236a4 	.word	0x080236a4
 80045fc:	080236b8 	.word	0x080236b8
 8004600:	080236e0 	.word	0x080236e0
 8004604:	080236f8 	.word	0x080236f8
 8004608:	08023700 	.word	0x08023700
 800460c:	08023728 	.word	0x08023728

08004610 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushDataTests)
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	605a      	str	r2, [r3, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4618      	mov	r0, r3
 8004628:	f7ff ff0a 	bl	8004440 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 800462c:	4a03      	ldr	r2, [pc, #12]	; (800463c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev+0x2c>)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4618      	mov	r0, r3
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	08027ff8 	.word	0x08027ff8

08004640 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv>:
 8004640:	b590      	push	{r4, r7, lr}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	222e      	movs	r2, #46	; 0x2e
 800464a:	4906      	ldr	r1, [pc, #24]	; (8004664 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv+0x24>)
 800464c:	2008      	movs	r0, #8
 800464e:	f005 ff95 	bl	800a57c <_ZnwjPKci>
 8004652:	4604      	mov	r4, r0
 8004654:	4620      	mov	r0, r4
 8004656:	f7ff ffdb 	bl	8004610 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>
 800465a:	4623      	mov	r3, r4
 800465c:	4618      	mov	r0, r3
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	bd90      	pop	{r4, r7, pc}
 8004664:	080236a4 	.word	0x080236a4

08004668 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>:
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4618      	mov	r0, r3
 8004674:	f00e fb70 	bl	8012d58 <_ZN10UtestShellC1Ev>
 8004678:	4a03      	ldr	r2, [pc, #12]	; (8004688 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev+0x20>)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4618      	mov	r0, r3
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	08027f4c 	.word	0x08027f4c

0800468c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv>:
{
 800468c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800468e:	b087      	sub	sp, #28
 8004690:	af04      	add	r7, sp, #16
 8004692:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0x45);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2145      	movs	r1, #69	; 0x45
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff fc39 	bl	8003f12 <ringBuffer_push>
	LONGS_EQUAL(0x45,testBuf->buffer[0]);
 80046a0:	f00f ff12 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 80046a4:	4604      	mov	r4, r0
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	3338      	adds	r3, #56	; 0x38
 80046aa:	681d      	ldr	r5, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	461e      	mov	r6, r3
 80046b6:	f00f ff17 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80046ba:	4603      	mov	r3, r0
 80046bc:	9302      	str	r3, [sp, #8]
 80046be:	2331      	movs	r3, #49	; 0x31
 80046c0:	9301      	str	r3, [sp, #4]
 80046c2:	4b15      	ldr	r3, [pc, #84]	; (8004718 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	4b15      	ldr	r3, [pc, #84]	; (800471c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x90>)
 80046c8:	4632      	mov	r2, r6
 80046ca:	2145      	movs	r1, #69	; 0x45
 80046cc:	4620      	mov	r0, r4
 80046ce:	47a8      	blx	r5

	ringBuffer_push(testBuf, 0x10);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	2110      	movs	r1, #16
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7ff fc1b 	bl	8003f12 <ringBuffer_push>
	LONGS_EQUAL(0x10,testBuf->buffer[1]);
 80046dc:	f00f fef4 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 80046e0:	4604      	mov	r4, r0
 80046e2:	6823      	ldr	r3, [r4, #0]
 80046e4:	3338      	adds	r3, #56	; 0x38
 80046e6:	681d      	ldr	r5, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	3301      	adds	r3, #1
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	461e      	mov	r6, r3
 80046f4:	f00f fef8 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80046f8:	4603      	mov	r3, r0
 80046fa:	9302      	str	r3, [sp, #8]
 80046fc:	2334      	movs	r3, #52	; 0x34
 80046fe:	9301      	str	r3, [sp, #4]
 8004700:	4b05      	ldr	r3, [pc, #20]	; (8004718 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	4b06      	ldr	r3, [pc, #24]	; (8004720 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x94>)
 8004706:	4632      	mov	r2, r6
 8004708:	2110      	movs	r1, #16
 800470a:	4620      	mov	r0, r4
 800470c:	47a8      	blx	r5

}
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004716:	bf00      	nop
 8004718:	080236a4 	.word	0x080236a4
 800471c:	08023750 	.word	0x08023750
 8004720:	08023780 	.word	0x08023780

08004724 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	605a      	str	r2, [r3, #4]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff fe80 	bl	8004440 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004740:	4a03      	ldr	r2, [pc, #12]	; (8004750 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev+0x2c>)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	601a      	str	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4618      	mov	r0, r3
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	08027f2c 	.word	0x08027f2c

08004754 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv>:
 8004754:	b590      	push	{r4, r7, lr}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	2238      	movs	r2, #56	; 0x38
 800475e:	4906      	ldr	r1, [pc, #24]	; (8004778 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv+0x24>)
 8004760:	2008      	movs	r0, #8
 8004762:	f005 ff0b 	bl	800a57c <_ZnwjPKci>
 8004766:	4604      	mov	r4, r0
 8004768:	4620      	mov	r0, r4
 800476a:	f7ff ffdb 	bl	8004724 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>
 800476e:	4623      	mov	r3, r4
 8004770:	4618      	mov	r0, r3
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	bd90      	pop	{r4, r7, pc}
 8004778:	080236a4 	.word	0x080236a4

0800477c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>:
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4618      	mov	r0, r3
 8004788:	f00e fae6 	bl	8012d58 <_ZN10UtestShellC1Ev>
 800478c:	4a03      	ldr	r2, [pc, #12]	; (800479c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev+0x20>)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4618      	mov	r0, r3
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	08027e80 	.word	0x08027e80

080047a0 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv>:
{
 80047a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047a2:	b089      	sub	sp, #36	; 0x24
 80047a4:	af04      	add	r7, sp, #16
 80047a6:	6078      	str	r0, [r7, #4]
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	60fb      	str	r3, [r7, #12]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	3b01      	subs	r3, #1
 80047be:	429a      	cmp	r2, r3
 80047c0:	bf0c      	ite	eq
 80047c2:	2301      	moveq	r3, #1
 80047c4:	2300      	movne	r3, #0
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	461a      	mov	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	4293      	cmp	r3, r2
 80047ce:	da0b      	bge.n	80047e8 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x48>
	{
		ringBuffer_push(testBuf, (uint8_t)i);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	b2d2      	uxtb	r2, r2
 80047d8:	4611      	mov	r1, r2
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff fb99 	bl	8003f12 <ringBuffer_push>
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	3301      	adds	r3, #1
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	e7e3      	b.n	80047b0 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x10>
	}

	ringBuffer_push(testBuf, 0xFF);			// This data must be the first element of buffer.
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	21ff      	movs	r1, #255	; 0xff
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7ff fb8f 	bl	8003f12 <ringBuffer_push>
	LONGS_EQUAL(0xFF,testBuf->buffer[0]);
 80047f4:	f00f fe68 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 80047f8:	4604      	mov	r4, r0
 80047fa:	6823      	ldr	r3, [r4, #0]
 80047fc:	3338      	adds	r3, #56	; 0x38
 80047fe:	681d      	ldr	r5, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	461e      	mov	r6, r3
 800480a:	f00f fe6d 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800480e:	4603      	mov	r3, r0
 8004810:	9302      	str	r3, [sp, #8]
 8004812:	2340      	movs	r3, #64	; 0x40
 8004814:	9301      	str	r3, [sp, #4]
 8004816:	4b05      	ldr	r3, [pc, #20]	; (800482c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x8c>)
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	4b05      	ldr	r3, [pc, #20]	; (8004830 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x90>)
 800481c:	4632      	mov	r2, r6
 800481e:	21ff      	movs	r1, #255	; 0xff
 8004820:	4620      	mov	r0, r4
 8004822:	47a8      	blx	r5
}
 8004824:	bf00      	nop
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800482c:	080236a4 	.word	0x080236a4
 8004830:	080237b0 	.word	0x080237b0

08004834 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopDataTests)
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	605a      	str	r2, [r3, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4618      	mov	r0, r3
 800484c:	f7ff fdf8 	bl	8004440 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004850:	4a03      	ldr	r2, [pc, #12]	; (8004860 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev+0x2c>)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4618      	mov	r0, r3
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	08027e60 	.word	0x08027e60

08004864 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv>:
 8004864:	b590      	push	{r4, r7, lr}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	2243      	movs	r2, #67	; 0x43
 800486e:	4906      	ldr	r1, [pc, #24]	; (8004888 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv+0x24>)
 8004870:	2008      	movs	r0, #8
 8004872:	f005 fe83 	bl	800a57c <_ZnwjPKci>
 8004876:	4604      	mov	r4, r0
 8004878:	4620      	mov	r0, r4
 800487a:	f7ff ffdb 	bl	8004834 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>
 800487e:	4623      	mov	r3, r4
 8004880:	4618      	mov	r0, r3
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	bd90      	pop	{r4, r7, pc}
 8004888:	080236a4 	.word	0x080236a4

0800488c <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>:
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4618      	mov	r0, r3
 8004898:	f00e fa5e 	bl	8012d58 <_ZN10UtestShellC1Ev>
 800489c:	4a03      	ldr	r2, [pc, #12]	; (80048ac <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev+0x20>)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4618      	mov	r0, r3
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	08027db4 	.word	0x08027db4

080048b0 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv>:
{
 80048b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048b2:	b089      	sub	sp, #36	; 0x24
 80048b4:	af04      	add	r7, sp, #16
 80048b6:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0xFF);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	21ff      	movs	r1, #255	; 0xff
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff fb27 	bl	8003f12 <ringBuffer_push>
	uint8_t data = ringBuffer_pop(testBuf); // 0xFF
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7ff fb4c 	bl	8003f66 <ringBuffer_pop>
 80048ce:	4603      	mov	r3, r0
 80048d0:	73fb      	strb	r3, [r7, #15]

	LONGS_EQUAL(0xFF,data);
 80048d2:	f00f fdf9 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 80048d6:	4604      	mov	r4, r0
 80048d8:	6823      	ldr	r3, [r4, #0]
 80048da:	3338      	adds	r3, #56	; 0x38
 80048dc:	681d      	ldr	r5, [r3, #0]
 80048de:	7bfe      	ldrb	r6, [r7, #15]
 80048e0:	f00f fe02 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80048e4:	4603      	mov	r3, r0
 80048e6:	9302      	str	r3, [sp, #8]
 80048e8:	2348      	movs	r3, #72	; 0x48
 80048ea:	9301      	str	r3, [sp, #4]
 80048ec:	4b05      	ldr	r3, [pc, #20]	; (8004904 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x54>)
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	4b05      	ldr	r3, [pc, #20]	; (8004908 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x58>)
 80048f2:	4632      	mov	r2, r6
 80048f4:	21ff      	movs	r1, #255	; 0xff
 80048f6:	4620      	mov	r0, r4
 80048f8:	47a8      	blx	r5

}
 80048fa:	bf00      	nop
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004902:	bf00      	nop
 8004904:	080236a4 	.word	0x080236a4
 8004908:	080237e0 	.word	0x080237e0

0800490c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	605a      	str	r2, [r3, #4]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4618      	mov	r0, r3
 8004924:	f7ff fd8c 	bl	8004440 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004928:	4a03      	ldr	r2, [pc, #12]	; (8004938 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev+0x2c>)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4618      	mov	r0, r3
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	08027d94 	.word	0x08027d94

0800493c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv>:
 800493c:	b590      	push	{r4, r7, lr}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	224c      	movs	r2, #76	; 0x4c
 8004946:	4906      	ldr	r1, [pc, #24]	; (8004960 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv+0x24>)
 8004948:	2008      	movs	r0, #8
 800494a:	f005 fe17 	bl	800a57c <_ZnwjPKci>
 800494e:	4604      	mov	r4, r0
 8004950:	4620      	mov	r0, r4
 8004952:	f7ff ffdb 	bl	800490c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>
 8004956:	4623      	mov	r3, r4
 8004958:	4618      	mov	r0, r3
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	bd90      	pop	{r4, r7, pc}
 8004960:	080236a4 	.word	0x080236a4

08004964 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>:
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4618      	mov	r0, r3
 8004970:	f00e f9f2 	bl	8012d58 <_ZN10UtestShellC1Ev>
 8004974:	4a03      	ldr	r2, [pc, #12]	; (8004984 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev+0x20>)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4618      	mov	r0, r3
 800497e:	3708      	adds	r7, #8
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	08027ce8 	.word	0x08027ce8

08004988 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv>:
{
 8004988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800498a:	b089      	sub	sp, #36	; 0x24
 800498c:	af04      	add	r7, sp, #16
 800498e:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 8004990:	2300      	movs	r3, #0
 8004992:	72fb      	strb	r3, [r7, #11]

	ringBuffer_push(testBuf, 0xAA);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	21aa      	movs	r1, #170	; 0xaa
 800499a:	4618      	mov	r0, r3
 800499c:	f7ff fab9 	bl	8003f12 <ringBuffer_push>

	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	3b01      	subs	r3, #1
 80049b6:	429a      	cmp	r2, r3
 80049b8:	bf0c      	ite	eq
 80049ba:	2301      	moveq	r3, #1
 80049bc:	2300      	movne	r3, #0
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	461a      	mov	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4293      	cmp	r3, r2
 80049c6:	da0a      	bge.n	80049de <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x56>
	{
		data = ringBuffer_pop(testBuf);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7ff faca 	bl	8003f66 <ringBuffer_pop>
 80049d2:	4603      	mov	r3, r0
 80049d4:	72fb      	strb	r3, [r7, #11]
	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	3301      	adds	r3, #1
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	e7e4      	b.n	80049a8 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x20>
	}

	data = ringBuffer_pop(testBuf);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7ff fabf 	bl	8003f66 <ringBuffer_pop>
 80049e8:	4603      	mov	r3, r0
 80049ea:	72fb      	strb	r3, [r7, #11]

	LONGS_EQUAL(0xAA,data);
 80049ec:	f00f fd6c 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 80049f0:	4604      	mov	r4, r0
 80049f2:	6823      	ldr	r3, [r4, #0]
 80049f4:	3338      	adds	r3, #56	; 0x38
 80049f6:	681d      	ldr	r5, [r3, #0]
 80049f8:	7afe      	ldrb	r6, [r7, #11]
 80049fa:	f00f fd75 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80049fe:	4603      	mov	r3, r0
 8004a00:	9302      	str	r3, [sp, #8]
 8004a02:	2359      	movs	r3, #89	; 0x59
 8004a04:	9301      	str	r3, [sp, #4]
 8004a06:	4b05      	ldr	r3, [pc, #20]	; (8004a1c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x94>)
 8004a08:	9300      	str	r3, [sp, #0]
 8004a0a:	4b05      	ldr	r3, [pc, #20]	; (8004a20 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x98>)
 8004a0c:	4632      	mov	r2, r6
 8004a0e:	21aa      	movs	r1, #170	; 0xaa
 8004a10:	4620      	mov	r0, r4
 8004a12:	47a8      	blx	r5
}
 8004a14:	bf00      	nop
 8004a16:	3714      	adds	r7, #20
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a1c:	080236a4 	.word	0x080236a4
 8004a20:	08023800 	.word	0x08023800

08004a24 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferFlushTest)
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	605a      	str	r2, [r3, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7ff fd00 	bl	8004440 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004a40:	4a03      	ldr	r2, [pc, #12]	; (8004a50 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev+0x2c>)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3708      	adds	r7, #8
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	08027cc8 	.word	0x08027cc8

08004a54 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv>:
 8004a54:	b590      	push	{r4, r7, lr}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	225c      	movs	r2, #92	; 0x5c
 8004a5e:	4906      	ldr	r1, [pc, #24]	; (8004a78 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv+0x24>)
 8004a60:	2008      	movs	r0, #8
 8004a62:	f005 fd8b 	bl	800a57c <_ZnwjPKci>
 8004a66:	4604      	mov	r4, r0
 8004a68:	4620      	mov	r0, r4
 8004a6a:	f7ff ffdb 	bl	8004a24 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>
 8004a6e:	4623      	mov	r3, r4
 8004a70:	4618      	mov	r0, r3
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd90      	pop	{r4, r7, pc}
 8004a78:	080236a4 	.word	0x080236a4

08004a7c <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>:
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f00e f966 	bl	8012d58 <_ZN10UtestShellC1Ev>
 8004a8c:	4a03      	ldr	r2, [pc, #12]	; (8004a9c <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev+0x20>)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	601a      	str	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4618      	mov	r0, r3
 8004a96:	3708      	adds	r7, #8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	08027c1c 	.word	0x08027c1c

08004aa0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv>:
{
 8004aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aa2:	b089      	sub	sp, #36	; 0x24
 8004aa4:	af04      	add	r7, sp, #16
 8004aa6:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d20b      	bcs.n	8004ad0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0x30>
	{
		ringBuffer_push(testBuf,(uint8_t)i);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	b2d2      	uxtb	r2, r2
 8004ac0:	4611      	mov	r1, r2
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff fa25 	bl	8003f12 <ringBuffer_push>
	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	3301      	adds	r3, #1
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	e7ed      	b.n	8004aac <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xc>
	}
	LONGS_EQUAL(49,testBuf->buffer[testBuf->size - 1]);
 8004ad0:	f00f fcfa 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 8004ad4:	4604      	mov	r4, r0
 8004ad6:	6823      	ldr	r3, [r4, #0]
 8004ad8:	3338      	adds	r3, #56	; 0x38
 8004ada:	681d      	ldr	r5, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	68da      	ldr	r2, [r3, #12]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	4413      	add	r3, r2
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	461e      	mov	r6, r3
 8004af0:	f00f fcfa 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004af4:	4603      	mov	r3, r0
 8004af6:	9302      	str	r3, [sp, #8]
 8004af8:	2363      	movs	r3, #99	; 0x63
 8004afa:	9301      	str	r3, [sp, #4]
 8004afc:	4b24      	ldr	r3, [pc, #144]	; (8004b90 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004afe:	9300      	str	r3, [sp, #0]
 8004b00:	4b24      	ldr	r3, [pc, #144]	; (8004b94 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf4>)
 8004b02:	4632      	mov	r2, r6
 8004b04:	2131      	movs	r1, #49	; 0x31
 8004b06:	4620      	mov	r0, r4
 8004b08:	47a8      	blx	r5

	ringBuffer_flush(testBuf);  // clear the buffer
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7ff fa53 	bl	8003fba <ringBuffer_flush>

	LONGS_EQUAL(0,testBuf->buffer[testBuf->size - 1]);
 8004b14:	f00f fcd8 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 8004b18:	4604      	mov	r4, r0
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	3338      	adds	r3, #56	; 0x38
 8004b1e:	681d      	ldr	r5, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	4413      	add	r3, r2
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	461e      	mov	r6, r3
 8004b34:	f00f fcd8 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	9302      	str	r3, [sp, #8]
 8004b3c:	2367      	movs	r3, #103	; 0x67
 8004b3e:	9301      	str	r3, [sp, #4]
 8004b40:	4b13      	ldr	r3, [pc, #76]	; (8004b90 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	4b14      	ldr	r3, [pc, #80]	; (8004b98 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf8>)
 8004b46:	4632      	mov	r2, r6
 8004b48:	2100      	movs	r1, #0
 8004b4a:	4620      	mov	r0, r4
 8004b4c:	47a8      	blx	r5
	LONGS_EQUAL(0,testBuf->buffer[testBuf->size/2]);    // check random value  (buffer[25]);
 8004b4e:	f00f fcbb 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 8004b52:	4604      	mov	r4, r0
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	3338      	adds	r3, #56	; 0x38
 8004b58:	681d      	ldr	r5, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	68da      	ldr	r2, [r3, #12]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	085b      	lsrs	r3, r3, #1
 8004b68:	4413      	add	r3, r2
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	461e      	mov	r6, r3
 8004b6e:	f00f fcbb 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004b72:	4603      	mov	r3, r0
 8004b74:	9302      	str	r3, [sp, #8]
 8004b76:	2368      	movs	r3, #104	; 0x68
 8004b78:	9301      	str	r3, [sp, #4]
 8004b7a:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004b7c:	9300      	str	r3, [sp, #0]
 8004b7e:	4b07      	ldr	r3, [pc, #28]	; (8004b9c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xfc>)
 8004b80:	4632      	mov	r2, r6
 8004b82:	2100      	movs	r1, #0
 8004b84:	4620      	mov	r0, r4
 8004b86:	47a8      	blx	r5
//	for(uint32_t i = 0;i < testBuf->size;i++)  // check all elements of the buffer
//	{
//		LONGS_EQUAL(0,testBuf->buffer[i]);
//	}

}
 8004b88:	bf00      	nop
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b90:	080236a4 	.word	0x080236a4
 8004b94:	08023820 	.word	0x08023820
 8004b98:	0802385c 	.word	0x0802385c
 8004b9c:	08023898 	.word	0x08023898

08004ba0 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushArrayTest)
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	605a      	str	r2, [r3, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff fc42 	bl	8004440 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004bbc:	4a03      	ldr	r2, [pc, #12]	; (8004bcc <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev+0x2c>)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	08027bfc 	.word	0x08027bfc

08004bd0 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv>:
 8004bd0:	b590      	push	{r4, r7, lr}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	2271      	movs	r2, #113	; 0x71
 8004bda:	4906      	ldr	r1, [pc, #24]	; (8004bf4 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv+0x24>)
 8004bdc:	2008      	movs	r0, #8
 8004bde:	f005 fccd 	bl	800a57c <_ZnwjPKci>
 8004be2:	4604      	mov	r4, r0
 8004be4:	4620      	mov	r0, r4
 8004be6:	f7ff ffdb 	bl	8004ba0 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>
 8004bea:	4623      	mov	r3, r4
 8004bec:	4618      	mov	r0, r3
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd90      	pop	{r4, r7, pc}
 8004bf4:	080236a4 	.word	0x080236a4

08004bf8 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>:
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f00e f8a8 	bl	8012d58 <_ZN10UtestShellC1Ev>
 8004c08:	4a03      	ldr	r2, [pc, #12]	; (8004c18 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev+0x20>)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4618      	mov	r0, r3
 8004c12:	3708      	adds	r7, #8
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	08027b50 	.word	0x08027b50

08004c1c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv>:
{
 8004c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c1e:	b087      	sub	sp, #28
 8004c20:	af04      	add	r7, sp, #16
 8004c22:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Test");
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	490e      	ldr	r1, [pc, #56]	; (8004c64 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7ff f9dc 	bl	8003fe8 <ringBuffer_pushArray>

	STRCMP_EQUAL("Test",(char*)testBuf->buffer);
 8004c30:	f00f fc4a 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 8004c34:	4604      	mov	r4, r0
 8004c36:	6823      	ldr	r3, [r4, #0]
 8004c38:	3324      	adds	r3, #36	; 0x24
 8004c3a:	681d      	ldr	r5, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	68de      	ldr	r6, [r3, #12]
 8004c42:	f00f fc51 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004c46:	4603      	mov	r3, r0
 8004c48:	9302      	str	r3, [sp, #8]
 8004c4a:	2375      	movs	r3, #117	; 0x75
 8004c4c:	9301      	str	r3, [sp, #4]
 8004c4e:	4b06      	ldr	r3, [pc, #24]	; (8004c68 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x4c>)
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	2300      	movs	r3, #0
 8004c54:	4632      	mov	r2, r6
 8004c56:	4903      	ldr	r1, [pc, #12]	; (8004c64 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004c58:	4620      	mov	r0, r4
 8004c5a:	47a8      	blx	r5
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c64:	080238d0 	.word	0x080238d0
 8004c68:	080236a4 	.word	0x080236a4

08004c6c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, LookForTest)
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	605a      	str	r2, [r3, #4]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7ff fbdc 	bl	8004440 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004c88:	4a03      	ldr	r2, [pc, #12]	; (8004c98 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev+0x2c>)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	601a      	str	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4618      	mov	r0, r3
 8004c92:	3708      	adds	r7, #8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	08027b30 	.word	0x08027b30

08004c9c <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv>:
 8004c9c:	b590      	push	{r4, r7, lr}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	2278      	movs	r2, #120	; 0x78
 8004ca6:	4906      	ldr	r1, [pc, #24]	; (8004cc0 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv+0x24>)
 8004ca8:	2008      	movs	r0, #8
 8004caa:	f005 fc67 	bl	800a57c <_ZnwjPKci>
 8004cae:	4604      	mov	r4, r0
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	f7ff ffdb 	bl	8004c6c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>
 8004cb6:	4623      	mov	r3, r4
 8004cb8:	4618      	mov	r0, r3
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd90      	pop	{r4, r7, pc}
 8004cc0:	080236a4 	.word	0x080236a4

08004cc4 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>:
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f00e f842 	bl	8012d58 <_ZN10UtestShellC1Ev>
 8004cd4:	4a03      	ldr	r2, [pc, #12]	; (8004ce4 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev+0x20>)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	08027a84 	.word	0x08027a84

08004ce8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv>:
{
 8004ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cec:	b08a      	sub	sp, #40	; 0x28
 8004cee:	af04      	add	r7, sp, #16
 8004cf0:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Hello World");
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	494e      	ldr	r1, [pc, #312]	; (8004e30 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7ff f975 	bl	8003fe8 <ringBuffer_pushArray>

	STRCMP_EQUAL("Hello World",(char*)testBuf->buffer);
 8004cfe:	f00f fbe3 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 8004d02:	4604      	mov	r4, r0
 8004d04:	6823      	ldr	r3, [r4, #0]
 8004d06:	3324      	adds	r3, #36	; 0x24
 8004d08:	681d      	ldr	r5, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	68de      	ldr	r6, [r3, #12]
 8004d10:	f00f fbea 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004d14:	4603      	mov	r3, r0
 8004d16:	9302      	str	r3, [sp, #8]
 8004d18:	237c      	movs	r3, #124	; 0x7c
 8004d1a:	9301      	str	r3, [sp, #4]
 8004d1c:	4b45      	ldr	r3, [pc, #276]	; (8004e34 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	2300      	movs	r3, #0
 8004d22:	4632      	mov	r2, r6
 8004d24:	4942      	ldr	r1, [pc, #264]	; (8004e30 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004d26:	4620      	mov	r0, r4
 8004d28:	47a8      	blx	r5
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	4942      	ldr	r1, [pc, #264]	; (8004e38 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7ff f978 	bl	8004026 <ringBuffer_lookFor>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	bf14      	ite	ne
 8004d3c:	2301      	movne	r3, #1
 8004d3e:	2300      	moveq	r3, #0
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d05c      	beq.n	8004e00 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x118>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	493b      	ldr	r1, [pc, #236]	; (8004e38 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7ff f96a 	bl	8004026 <ringBuffer_lookFor>
 8004d52:	4604      	mov	r4, r0
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	4937      	ldr	r1, [pc, #220]	; (8004e38 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7ff f963 	bl	8004026 <ringBuffer_lookFor>
 8004d60:	4603      	mov	r3, r0
 8004d62:	429c      	cmp	r4, r3
 8004d64:	bf14      	ite	ne
 8004d66:	2301      	movne	r3, #1
 8004d68:	2300      	moveq	r3, #0
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d008      	beq.n	8004d82 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x9a>
 8004d70:	f00f fbaa 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 8004d74:	6803      	ldr	r3, [r0, #0]
 8004d76:	3370      	adds	r3, #112	; 0x70
 8004d78:	681c      	ldr	r4, [r3, #0]
 8004d7a:	237d      	movs	r3, #125	; 0x7d
 8004d7c:	4a2d      	ldr	r2, [pc, #180]	; (8004e34 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004d7e:	492f      	ldr	r1, [pc, #188]	; (8004e3c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x154>)
 8004d80:	47a0      	blx	r4
 8004d82:	f00f fba1 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 8004d86:	4604      	mov	r4, r0
 8004d88:	6823      	ldr	r3, [r4, #0]
 8004d8a:	3358      	adds	r3, #88	; 0x58
 8004d8c:	681d      	ldr	r5, [r3, #0]
 8004d8e:	f107 0308 	add.w	r3, r7, #8
 8004d92:	2101      	movs	r1, #1
 8004d94:	4618      	mov	r0, r3
 8004d96:	f008 fe33 	bl	800da00 <_Z10StringFromi>
 8004d9a:	f107 0308 	add.w	r3, r7, #8
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f008 fb3a 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 8004da4:	4606      	mov	r6, r0
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	4923      	ldr	r1, [pc, #140]	; (8004e38 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7ff f93a 	bl	8004026 <ringBuffer_lookFor>
 8004db2:	4602      	mov	r2, r0
 8004db4:	f107 0310 	add.w	r3, r7, #16
 8004db8:	4611      	mov	r1, r2
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f009 f89a 	bl	800def4 <_Z10StringFromm>
 8004dc0:	f107 0310 	add.w	r3, r7, #16
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f008 fb27 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 8004dca:	4680      	mov	r8, r0
 8004dcc:	f00f fb8c 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	9303      	str	r3, [sp, #12]
 8004dd4:	237d      	movs	r3, #125	; 0x7d
 8004dd6:	9302      	str	r3, [sp, #8]
 8004dd8:	4b16      	ldr	r3, [pc, #88]	; (8004e34 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004dda:	9301      	str	r3, [sp, #4]
 8004ddc:	2300      	movs	r3, #0
 8004dde:	9300      	str	r3, [sp, #0]
 8004de0:	4643      	mov	r3, r8
 8004de2:	4632      	mov	r2, r6
 8004de4:	2101      	movs	r1, #1
 8004de6:	4620      	mov	r0, r4
 8004de8:	47a8      	blx	r5
 8004dea:	f107 0310 	add.w	r3, r7, #16
 8004dee:	4618      	mov	r0, r3
 8004df0:	f008 fb3f 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8004df4:	f107 0308 	add.w	r3, r7, #8
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f008 fb3a 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 8004dfe:	e012      	b.n	8004e26 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x13e>
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004e00:	f00f fb62 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 8004e04:	4604      	mov	r4, r0
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	3338      	adds	r3, #56	; 0x38
 8004e0a:	681d      	ldr	r5, [r3, #0]
 8004e0c:	f00f fb6c 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004e10:	4603      	mov	r3, r0
 8004e12:	9302      	str	r3, [sp, #8]
 8004e14:	237d      	movs	r3, #125	; 0x7d
 8004e16:	9301      	str	r3, [sp, #4]
 8004e18:	4b06      	ldr	r3, [pc, #24]	; (8004e34 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	2200      	movs	r2, #0
 8004e20:	2100      	movs	r1, #0
 8004e22:	4620      	mov	r0, r4
 8004e24:	47a8      	blx	r5
}
 8004e26:	bf00      	nop
 8004e28:	3718      	adds	r7, #24
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e30:	080238d8 	.word	0x080238d8
 8004e34:	080236a4 	.word	0x080236a4
 8004e38:	080238e4 	.word	0x080238e4
 8004e3c:	080238ec 	.word	0x080238ec

08004e40 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, CapacityTest)
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	605a      	str	r2, [r3, #4]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7ff faf2 	bl	8004440 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004e5c:	4a03      	ldr	r2, [pc, #12]	; (8004e6c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev+0x2c>)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4618      	mov	r0, r3
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	08027a64 	.word	0x08027a64

08004e70 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv>:
 8004e70:	b590      	push	{r4, r7, lr}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	2280      	movs	r2, #128	; 0x80
 8004e7a:	4906      	ldr	r1, [pc, #24]	; (8004e94 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv+0x24>)
 8004e7c:	2008      	movs	r0, #8
 8004e7e:	f005 fb7d 	bl	800a57c <_ZnwjPKci>
 8004e82:	4604      	mov	r4, r0
 8004e84:	4620      	mov	r0, r4
 8004e86:	f7ff ffdb 	bl	8004e40 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>
 8004e8a:	4623      	mov	r3, r4
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd90      	pop	{r4, r7, pc}
 8004e94:	080236a4 	.word	0x080236a4

08004e98 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>:
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f00d ff58 	bl	8012d58 <_ZN10UtestShellC1Ev>
 8004ea8:	4a03      	ldr	r2, [pc, #12]	; (8004eb8 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev+0x20>)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	601a      	str	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	080279b8 	.word	0x080279b8

08004ebc <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv>:
{
 8004ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ebe:	b087      	sub	sp, #28
 8004ec0:	af04      	add	r7, sp, #16
 8004ec2:	6078      	str	r0, [r7, #4]

	LONGS_EQUAL(50,ringBuffer_capacity(testBuf));
 8004ec4:	f00f fb00 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 8004ec8:	4604      	mov	r4, r0
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	3338      	adds	r3, #56	; 0x38
 8004ece:	681d      	ldr	r5, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7ff f8bc 	bl	8004052 <ringBuffer_capacity>
 8004eda:	4603      	mov	r3, r0
 8004edc:	461e      	mov	r6, r3
 8004ede:	f00f fb03 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	9302      	str	r3, [sp, #8]
 8004ee6:	2383      	movs	r3, #131	; 0x83
 8004ee8:	9301      	str	r3, [sp, #4]
 8004eea:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x44>)
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	4b05      	ldr	r3, [pc, #20]	; (8004f04 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x48>)
 8004ef0:	4632      	mov	r2, r6
 8004ef2:	2132      	movs	r1, #50	; 0x32
 8004ef4:	4620      	mov	r0, r4
 8004ef6:	47a8      	blx	r5

}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f00:	080236a4 	.word	0x080236a4
 8004f04:	08023990 	.word	0x08023990

08004f08 <_Z18UART_Transmit_FakePh>:


void UART_Transmit_Fake(uint8_t* data)
{
 8004f08:	b5b0      	push	{r4, r5, r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
//	mock().actualCall("UART_Transmit_Fake").withParameter("data", data);
	mock().actualCall("UART_Transmit_Fake").withStringParameter("data", (char*)data);
 8004f10:	f107 0308 	add.w	r3, r7, #8
 8004f14:	491d      	ldr	r1, [pc, #116]	; (8004f8c <_Z18UART_Transmit_FakePh+0x84>)
 8004f16:	4618      	mov	r0, r3
 8004f18:	f007 fef3 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8004f1c:	f107 0308 	add.w	r3, r7, #8
 8004f20:	2100      	movs	r1, #0
 8004f22:	4618      	mov	r0, r3
 8004f24:	f005 ffc6 	bl	800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004f28:	4604      	mov	r4, r0
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	3318      	adds	r3, #24
 8004f2e:	681d      	ldr	r5, [r3, #0]
 8004f30:	f107 0310 	add.w	r3, r7, #16
 8004f34:	4916      	ldr	r1, [pc, #88]	; (8004f90 <_Z18UART_Transmit_FakePh+0x88>)
 8004f36:	4618      	mov	r0, r3
 8004f38:	f007 fee3 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8004f3c:	f107 0310 	add.w	r3, r7, #16
 8004f40:	4619      	mov	r1, r3
 8004f42:	4620      	mov	r0, r4
 8004f44:	47a8      	blx	r5
 8004f46:	4604      	mov	r4, r0
 8004f48:	6823      	ldr	r3, [r4, #0]
 8004f4a:	333c      	adds	r3, #60	; 0x3c
 8004f4c:	681d      	ldr	r5, [r3, #0]
 8004f4e:	f107 0318 	add.w	r3, r7, #24
 8004f52:	4910      	ldr	r1, [pc, #64]	; (8004f94 <_Z18UART_Transmit_FakePh+0x8c>)
 8004f54:	4618      	mov	r0, r3
 8004f56:	f007 fed4 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8004f5a:	f107 0318 	add.w	r3, r7, #24
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	4619      	mov	r1, r3
 8004f62:	4620      	mov	r0, r4
 8004f64:	47a8      	blx	r5
 8004f66:	f107 0318 	add.w	r3, r7, #24
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f008 fa81 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8004f70:	f107 0310 	add.w	r3, r7, #16
 8004f74:	4618      	mov	r0, r3
 8004f76:	f008 fa7c 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8004f7a:	f107 0308 	add.w	r3, r7, #8
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f008 fa77 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 8004f84:	bf00      	nop
 8004f86:	3720      	adds	r7, #32
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bdb0      	pop	{r4, r5, r7, pc}
 8004f8c:	080239c8 	.word	0x080239c8
 8004f90:	080239cc 	.word	0x080239cc
 8004f94:	080239e0 	.word	0x080239e0

08004f98 <_Z17UART_Receive_Fakev>:
uint8_t UART_Receive_Fake(void)
{
 8004f98:	b5b0      	push	{r4, r5, r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0

	return mock().actualCall("UART_Receive_Fake").returnIntValue();
 8004f9e:	463b      	mov	r3, r7
 8004fa0:	4916      	ldr	r1, [pc, #88]	; (8004ffc <_Z17UART_Receive_Fakev+0x64>)
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f007 fead 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8004fa8:	463b      	mov	r3, r7
 8004faa:	2100      	movs	r1, #0
 8004fac:	4618      	mov	r0, r3
 8004fae:	f005 ff81 	bl	800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004fb2:	4604      	mov	r4, r0
 8004fb4:	6823      	ldr	r3, [r4, #0]
 8004fb6:	3318      	adds	r3, #24
 8004fb8:	681d      	ldr	r5, [r3, #0]
 8004fba:	f107 0308 	add.w	r3, r7, #8
 8004fbe:	4910      	ldr	r1, [pc, #64]	; (8005000 <_Z17UART_Receive_Fakev+0x68>)
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f007 fe9e 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8004fc6:	f107 0308 	add.w	r3, r7, #8
 8004fca:	4619      	mov	r1, r3
 8004fcc:	4620      	mov	r0, r4
 8004fce:	47a8      	blx	r5
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	3264      	adds	r2, #100	; 0x64
 8004fd6:	6812      	ldr	r2, [r2, #0]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	4790      	blx	r2
 8004fdc:	4603      	mov	r3, r0
 8004fde:	b2dc      	uxtb	r4, r3
 8004fe0:	f107 0308 	add.w	r3, r7, #8
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f008 fa44 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8004fea:	463b      	mov	r3, r7
 8004fec:	4618      	mov	r0, r3
 8004fee:	f008 fa40 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8004ff2:	4623      	mov	r3, r4
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bdb0      	pop	{r4, r5, r7, pc}
 8004ffc:	080239c8 	.word	0x080239c8
 8005000:	080239e8 	.word	0x080239e8

08005004 <_Z12getTick_Fakev>:

uint32_t time=0;

uint32_t getTick_Fake(void)
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
	if(time == 0xFFFFFFFF)
 8005008:	4b0a      	ldr	r3, [pc, #40]	; (8005034 <_Z12getTick_Fakev+0x30>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005010:	d103      	bne.n	800501a <_Z12getTick_Fakev+0x16>
		time = 0;
 8005012:	4b08      	ldr	r3, [pc, #32]	; (8005034 <_Z12getTick_Fakev+0x30>)
 8005014:	2200      	movs	r2, #0
 8005016:	601a      	str	r2, [r3, #0]
 8005018:	e004      	b.n	8005024 <_Z12getTick_Fakev+0x20>
	else
		time += 1;
 800501a:	4b06      	ldr	r3, [pc, #24]	; (8005034 <_Z12getTick_Fakev+0x30>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	3301      	adds	r3, #1
 8005020:	4a04      	ldr	r2, [pc, #16]	; (8005034 <_Z12getTick_Fakev+0x30>)
 8005022:	6013      	str	r3, [r2, #0]
	return time;
 8005024:	4b03      	ldr	r3, [pc, #12]	; (8005034 <_Z12getTick_Fakev+0x30>)
 8005026:	681b      	ldr	r3, [r3, #0]
}
 8005028:	4618      	mov	r0, r3
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	200005c0 	.word	0x200005c0

08005038 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv>:
TEST_GROUP(EspDriver_Test_Group)
{



	void setup()
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
	{
		ESP_Init(UART_Transmit_Fake,
 8005040:	2364      	movs	r3, #100	; 0x64
 8005042:	4a04      	ldr	r2, [pc, #16]	; (8005054 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x1c>)
 8005044:	4904      	ldr	r1, [pc, #16]	; (8005058 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x20>)
 8005046:	4805      	ldr	r0, [pc, #20]	; (800505c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x24>)
 8005048:	f7fe fc5e 	bl	8003908 <ESP_Init>
				  UART_Receive_Fake,
				  getTick_Fake,
				  100);

	}
 800504c:	bf00      	nop
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	08005005 	.word	0x08005005
 8005058:	08004f99 	.word	0x08004f99
 800505c:	08004f09 	.word	0x08004f09

08005060 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv>:

	void teardown()
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
	{

		mock().checkExpectations();
 8005068:	f107 0308 	add.w	r3, r7, #8
 800506c:	4917      	ldr	r1, [pc, #92]	; (80050cc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 800506e:	4618      	mov	r0, r3
 8005070:	f007 fe47 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8005074:	f107 0308 	add.w	r3, r7, #8
 8005078:	2100      	movs	r1, #0
 800507a:	4618      	mov	r0, r3
 800507c:	f005 ff1a 	bl	800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005080:	4603      	mov	r3, r0
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	3294      	adds	r2, #148	; 0x94
 8005086:	6812      	ldr	r2, [r2, #0]
 8005088:	4618      	mov	r0, r3
 800508a:	4790      	blx	r2
 800508c:	f107 0308 	add.w	r3, r7, #8
 8005090:	4618      	mov	r0, r3
 8005092:	f008 f9ee 	bl	800d472 <_ZN12SimpleStringD1Ev>
		mock().clear();
 8005096:	f107 0310 	add.w	r3, r7, #16
 800509a:	490c      	ldr	r1, [pc, #48]	; (80050cc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 800509c:	4618      	mov	r0, r3
 800509e:	f007 fe30 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80050a2:	f107 0310 	add.w	r3, r7, #16
 80050a6:	2100      	movs	r1, #0
 80050a8:	4618      	mov	r0, r3
 80050aa:	f005 ff03 	bl	800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80050ae:	4603      	mov	r3, r0
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	329c      	adds	r2, #156	; 0x9c
 80050b4:	6812      	ldr	r2, [r2, #0]
 80050b6:	4618      	mov	r0, r3
 80050b8:	4790      	blx	r2
 80050ba:	f107 0310 	add.w	r3, r7, #16
 80050be:	4618      	mov	r0, r3
 80050c0:	f008 f9d7 	bl	800d472 <_ZN12SimpleStringD1Ev>
	}
 80050c4:	bf00      	nop
 80050c6:	3718      	adds	r7, #24
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	080239c8 	.word	0x080239c8

080050d0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>:
TEST_GROUP(EspDriver_Test_Group)
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4618      	mov	r0, r3
 80050dc:	f00f fa1e 	bl	801451c <_ZN5UtestC1Ev>
 80050e0:	4a03      	ldr	r2, [pc, #12]	; (80050f0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev+0x20>)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4618      	mov	r0, r3
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	08027998 	.word	0x08027998

080050f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>:
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	4a05      	ldr	r2, [pc, #20]	; (8005114 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev+0x20>)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4618      	mov	r0, r3
 8005106:	f00f fa19 	bl	801453c <_ZN5UtestD1Ev>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4618      	mov	r0, r3
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	08027998 	.word	0x08027998

08005118 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD0Ev>:
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7ff ffe7 	bl	80050f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8005126:	2104      	movs	r1, #4
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f005 fa3b 	bl	800a5a4 <_ZdlPvj>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4618      	mov	r0, r3
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>:


};

TEST(EspDriver_Test_Group, Esp_Init_Test)
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4618      	mov	r0, r3
 8005144:	f7ff ffc4 	bl	80050d0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005148:	4a03      	ldr	r2, [pc, #12]	; (8005158 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev+0x20>)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	601a      	str	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4618      	mov	r0, r3
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	08027978 	.word	0x08027978

0800515c <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv>:
 800515c:	b590      	push	{r4, r7, lr}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	22b8      	movs	r2, #184	; 0xb8
 8005166:	4906      	ldr	r1, [pc, #24]	; (8005180 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv+0x24>)
 8005168:	2004      	movs	r0, #4
 800516a:	f005 fa07 	bl	800a57c <_ZnwjPKci>
 800516e:	4604      	mov	r4, r0
 8005170:	4620      	mov	r0, r4
 8005172:	f7ff ffe1 	bl	8005138 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>
 8005176:	4623      	mov	r3, r4
 8005178:	4618      	mov	r0, r3
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	bd90      	pop	{r4, r7, pc}
 8005180:	080236a4 	.word	0x080236a4

08005184 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>:
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4618      	mov	r0, r3
 8005190:	f00d fde2 	bl	8012d58 <_ZN10UtestShellC1Ev>
 8005194:	4a03      	ldr	r2, [pc, #12]	; (80051a4 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev+0x20>)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	601a      	str	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4618      	mov	r0, r3
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	080278cc 	.word	0x080278cc

080051a8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv>:
{
 80051a8:	b5b0      	push	{r4, r5, r7, lr}
 80051aa:	b088      	sub	sp, #32
 80051ac:	af04      	add	r7, sp, #16
 80051ae:	6078      	str	r0, [r7, #4]

	transmit = UART_Transmit_Fake; // or you can pass UART_Transmit_Fake as a parameter to the function instead of transmit.
 80051b0:	4b10      	ldr	r3, [pc, #64]	; (80051f4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 80051b2:	4a11      	ldr	r2, [pc, #68]	; (80051f8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x50>)
 80051b4:	601a      	str	r2, [r3, #0]
	int32_t result = ESP_Init(transmit,
 80051b6:	4b0f      	ldr	r3, [pc, #60]	; (80051f4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 80051b8:	6818      	ldr	r0, [r3, #0]
 80051ba:	2364      	movs	r3, #100	; 0x64
 80051bc:	4a0f      	ldr	r2, [pc, #60]	; (80051fc <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x54>)
 80051be:	4910      	ldr	r1, [pc, #64]	; (8005200 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x58>)
 80051c0:	f7fe fba2 	bl	8003908 <ESP_Init>
 80051c4:	60f8      	str	r0, [r7, #12]
//	int result = ESP_Init(UART_Transmit_Fake,
//						  UART_Receive_Fake,
//						  getTick_Fake,
//	  	  	  	  	  	  100);

	LONGS_EQUAL(1,result);
 80051c6:	f00f f97f 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 80051ca:	4604      	mov	r4, r0
 80051cc:	6823      	ldr	r3, [r4, #0]
 80051ce:	3338      	adds	r3, #56	; 0x38
 80051d0:	681d      	ldr	r5, [r3, #0]
 80051d2:	f00f f989 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80051d6:	4603      	mov	r3, r0
 80051d8:	9302      	str	r3, [sp, #8]
 80051da:	23c6      	movs	r3, #198	; 0xc6
 80051dc:	9301      	str	r3, [sp, #4]
 80051de:	4b09      	ldr	r3, [pc, #36]	; (8005204 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x5c>)
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	4b09      	ldr	r3, [pc, #36]	; (8005208 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x60>)
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	2101      	movs	r1, #1
 80051e8:	4620      	mov	r0, r4
 80051ea:	47a8      	blx	r5

}
 80051ec:	bf00      	nop
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bdb0      	pop	{r4, r5, r7, pc}
 80051f4:	200005c4 	.word	0x200005c4
 80051f8:	08004f09 	.word	0x08004f09
 80051fc:	08005005 	.word	0x08005005
 8005200:	08004f99 	.word	0x08004f99
 8005204:	080236a4 	.word	0x080236a4
 8005208:	080239fc 	.word	0x080239fc

0800520c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4618      	mov	r0, r3
 8005218:	f7ff ff5a 	bl	80050d0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800521c:	4a03      	ldr	r2, [pc, #12]	; (800522c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev+0x20>)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4618      	mov	r0, r3
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	080278ac 	.word	0x080278ac

08005230 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv>:
 8005230:	b590      	push	{r4, r7, lr}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	22ca      	movs	r2, #202	; 0xca
 800523a:	4906      	ldr	r1, [pc, #24]	; (8005254 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv+0x24>)
 800523c:	2004      	movs	r0, #4
 800523e:	f005 f99d 	bl	800a57c <_ZnwjPKci>
 8005242:	4604      	mov	r4, r0
 8005244:	4620      	mov	r0, r4
 8005246:	f7ff ffe1 	bl	800520c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>
 800524a:	4623      	mov	r3, r4
 800524c:	4618      	mov	r0, r3
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	bd90      	pop	{r4, r7, pc}
 8005254:	080236a4 	.word	0x080236a4

08005258 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>:
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4618      	mov	r0, r3
 8005264:	f00d fd78 	bl	8012d58 <_ZN10UtestShellC1Ev>
 8005268:	4a03      	ldr	r2, [pc, #12]	; (8005278 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev+0x20>)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	601a      	str	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4618      	mov	r0, r3
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	08027800 	.word	0x08027800

0800527c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv>:
{
 800527c:	b5b0      	push	{r4, r5, r7, lr}
 800527e:	b08e      	sub	sp, #56	; 0x38
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "Test");
 8005284:	f107 0308 	add.w	r3, r7, #8
 8005288:	493d      	ldr	r1, [pc, #244]	; (8005380 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x104>)
 800528a:	4618      	mov	r0, r3
 800528c:	f007 fd39 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8005290:	f107 0308 	add.w	r3, r7, #8
 8005294:	2100      	movs	r1, #0
 8005296:	4618      	mov	r0, r3
 8005298:	f005 fe0c 	bl	800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800529c:	4604      	mov	r4, r0
 800529e:	6823      	ldr	r3, [r4, #0]
 80052a0:	330c      	adds	r3, #12
 80052a2:	681d      	ldr	r5, [r3, #0]
 80052a4:	f107 0310 	add.w	r3, r7, #16
 80052a8:	4936      	ldr	r1, [pc, #216]	; (8005384 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x108>)
 80052aa:	4618      	mov	r0, r3
 80052ac:	f007 fd29 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80052b0:	f107 0310 	add.w	r3, r7, #16
 80052b4:	4619      	mov	r1, r3
 80052b6:	4620      	mov	r0, r4
 80052b8:	47a8      	blx	r5
 80052ba:	4604      	mov	r4, r0
 80052bc:	6823      	ldr	r3, [r4, #0]
 80052be:	334c      	adds	r3, #76	; 0x4c
 80052c0:	681d      	ldr	r5, [r3, #0]
 80052c2:	f107 0318 	add.w	r3, r7, #24
 80052c6:	4930      	ldr	r1, [pc, #192]	; (8005388 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x10c>)
 80052c8:	4618      	mov	r0, r3
 80052ca:	f007 fd1a 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80052ce:	f107 0318 	add.w	r3, r7, #24
 80052d2:	4a2e      	ldr	r2, [pc, #184]	; (800538c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x110>)
 80052d4:	4619      	mov	r1, r3
 80052d6:	4620      	mov	r0, r4
 80052d8:	47a8      	blx	r5
 80052da:	f107 0318 	add.w	r3, r7, #24
 80052de:	4618      	mov	r0, r3
 80052e0:	f008 f8c7 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80052e4:	f107 0310 	add.w	r3, r7, #16
 80052e8:	4618      	mov	r0, r3
 80052ea:	f008 f8c2 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80052ee:	f107 0308 	add.w	r3, r7, #8
 80052f2:	4618      	mov	r0, r3
 80052f4:	f008 f8bd 	bl	800d472 <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "AT\r\n");
 80052f8:	f107 0320 	add.w	r3, r7, #32
 80052fc:	4920      	ldr	r1, [pc, #128]	; (8005380 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x104>)
 80052fe:	4618      	mov	r0, r3
 8005300:	f007 fcff 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8005304:	f107 0320 	add.w	r3, r7, #32
 8005308:	2100      	movs	r1, #0
 800530a:	4618      	mov	r0, r3
 800530c:	f005 fdd2 	bl	800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005310:	4604      	mov	r4, r0
 8005312:	6823      	ldr	r3, [r4, #0]
 8005314:	330c      	adds	r3, #12
 8005316:	681d      	ldr	r5, [r3, #0]
 8005318:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800531c:	4919      	ldr	r1, [pc, #100]	; (8005384 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x108>)
 800531e:	4618      	mov	r0, r3
 8005320:	f007 fcef 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8005324:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005328:	4619      	mov	r1, r3
 800532a:	4620      	mov	r0, r4
 800532c:	47a8      	blx	r5
 800532e:	4604      	mov	r4, r0
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	334c      	adds	r3, #76	; 0x4c
 8005334:	681d      	ldr	r5, [r3, #0]
 8005336:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800533a:	4913      	ldr	r1, [pc, #76]	; (8005388 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x10c>)
 800533c:	4618      	mov	r0, r3
 800533e:	f007 fce0 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8005342:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005346:	4a12      	ldr	r2, [pc, #72]	; (8005390 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x114>)
 8005348:	4619      	mov	r1, r3
 800534a:	4620      	mov	r0, r4
 800534c:	47a8      	blx	r5
 800534e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005352:	4618      	mov	r0, r3
 8005354:	f008 f88d 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8005358:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800535c:	4618      	mov	r0, r3
 800535e:	f008 f888 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8005362:	f107 0320 	add.w	r3, r7, #32
 8005366:	4618      	mov	r0, r3
 8005368:	f008 f883 	bl	800d472 <_ZN12SimpleStringD1Ev>

	Send_AT_Command((char*)"Test");
 800536c:	4807      	ldr	r0, [pc, #28]	; (800538c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x110>)
 800536e:	f7fe fafd 	bl	800396c <Send_AT_Command>
	Send_AT_Command((char*)"AT\r\n");
 8005372:	4807      	ldr	r0, [pc, #28]	; (8005390 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x114>)
 8005374:	f7fe fafa 	bl	800396c <Send_AT_Command>



}
 8005378:	bf00      	nop
 800537a:	3738      	adds	r7, #56	; 0x38
 800537c:	46bd      	mov	sp, r7
 800537e:	bdb0      	pop	{r4, r5, r7, pc}
 8005380:	080239c8 	.word	0x080239c8
 8005384:	080239cc 	.word	0x080239cc
 8005388:	080239e0 	.word	0x080239e0
 800538c:	080238d0 	.word	0x080238d0
 8005390:	08023a1c 	.word	0x08023a1c

08005394 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4618      	mov	r0, r3
 80053a0:	f7ff fe96 	bl	80050d0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80053a4:	4a03      	ldr	r2, [pc, #12]	; (80053b4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev+0x20>)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4618      	mov	r0, r3
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	080277e0 	.word	0x080277e0

080053b8 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv>:
 80053b8:	b590      	push	{r4, r7, lr}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	22d6      	movs	r2, #214	; 0xd6
 80053c2:	4906      	ldr	r1, [pc, #24]	; (80053dc <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv+0x24>)
 80053c4:	2004      	movs	r0, #4
 80053c6:	f005 f8d9 	bl	800a57c <_ZnwjPKci>
 80053ca:	4604      	mov	r4, r0
 80053cc:	4620      	mov	r0, r4
 80053ce:	f7ff ffe1 	bl	8005394 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>
 80053d2:	4623      	mov	r3, r4
 80053d4:	4618      	mov	r0, r3
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd90      	pop	{r4, r7, pc}
 80053dc:	080236a4 	.word	0x080236a4

080053e0 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>:
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f00d fcb4 	bl	8012d58 <_ZN10UtestShellC1Ev>
 80053f0:	4a03      	ldr	r2, [pc, #12]	; (8005400 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev+0x20>)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4618      	mov	r0, r3
 80053fa:	3708      	adds	r7, #8
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	08027734 	.word	0x08027734

08005404 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv>:
{
 8005404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005406:	b097      	sub	sp, #92	; 0x5c
 8005408:	af04      	add	r7, sp, #16
 800540a:	6078      	str	r0, [r7, #4]

	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'O');
 800540c:	f107 0308 	add.w	r3, r7, #8
 8005410:	4967      	ldr	r1, [pc, #412]	; (80055b0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ac>)
 8005412:	4618      	mov	r0, r3
 8005414:	f007 fc75 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8005418:	f107 0308 	add.w	r3, r7, #8
 800541c:	2100      	movs	r1, #0
 800541e:	4618      	mov	r0, r3
 8005420:	f005 fd48 	bl	800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005424:	4604      	mov	r4, r0
 8005426:	6823      	ldr	r3, [r4, #0]
 8005428:	330c      	adds	r3, #12
 800542a:	681d      	ldr	r5, [r3, #0]
 800542c:	f107 0310 	add.w	r3, r7, #16
 8005430:	4960      	ldr	r1, [pc, #384]	; (80055b4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b0>)
 8005432:	4618      	mov	r0, r3
 8005434:	f007 fc65 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8005438:	f107 0310 	add.w	r3, r7, #16
 800543c:	4619      	mov	r1, r3
 800543e:	4620      	mov	r0, r4
 8005440:	47a8      	blx	r5
 8005442:	4603      	mov	r3, r0
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	3264      	adds	r2, #100	; 0x64
 8005448:	6812      	ldr	r2, [r2, #0]
 800544a:	214f      	movs	r1, #79	; 0x4f
 800544c:	4618      	mov	r0, r3
 800544e:	4790      	blx	r2
 8005450:	f107 0310 	add.w	r3, r7, #16
 8005454:	4618      	mov	r0, r3
 8005456:	f008 f80c 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800545a:	f107 0308 	add.w	r3, r7, #8
 800545e:	4618      	mov	r0, r3
 8005460:	f008 f807 	bl	800d472 <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 8005464:	f7fe fa90 	bl	8003988 <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'K');
 8005468:	f107 0318 	add.w	r3, r7, #24
 800546c:	4950      	ldr	r1, [pc, #320]	; (80055b0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ac>)
 800546e:	4618      	mov	r0, r3
 8005470:	f007 fc47 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8005474:	f107 0318 	add.w	r3, r7, #24
 8005478:	2100      	movs	r1, #0
 800547a:	4618      	mov	r0, r3
 800547c:	f005 fd1a 	bl	800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005480:	4604      	mov	r4, r0
 8005482:	6823      	ldr	r3, [r4, #0]
 8005484:	330c      	adds	r3, #12
 8005486:	681d      	ldr	r5, [r3, #0]
 8005488:	f107 0320 	add.w	r3, r7, #32
 800548c:	4949      	ldr	r1, [pc, #292]	; (80055b4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b0>)
 800548e:	4618      	mov	r0, r3
 8005490:	f007 fc37 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8005494:	f107 0320 	add.w	r3, r7, #32
 8005498:	4619      	mov	r1, r3
 800549a:	4620      	mov	r0, r4
 800549c:	47a8      	blx	r5
 800549e:	4603      	mov	r3, r0
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	3264      	adds	r2, #100	; 0x64
 80054a4:	6812      	ldr	r2, [r2, #0]
 80054a6:	214b      	movs	r1, #75	; 0x4b
 80054a8:	4618      	mov	r0, r3
 80054aa:	4790      	blx	r2
 80054ac:	f107 0320 	add.w	r3, r7, #32
 80054b0:	4618      	mov	r0, r3
 80054b2:	f007 ffde 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80054b6:	f107 0318 	add.w	r3, r7, #24
 80054ba:	4618      	mov	r0, r3
 80054bc:	f007 ffd9 	bl	800d472 <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 80054c0:	f7fe fa62 	bl	8003988 <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'\r');
 80054c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054c8:	4939      	ldr	r1, [pc, #228]	; (80055b0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ac>)
 80054ca:	4618      	mov	r0, r3
 80054cc:	f007 fc19 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80054d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054d4:	2100      	movs	r1, #0
 80054d6:	4618      	mov	r0, r3
 80054d8:	f005 fcec 	bl	800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80054dc:	4604      	mov	r4, r0
 80054de:	6823      	ldr	r3, [r4, #0]
 80054e0:	330c      	adds	r3, #12
 80054e2:	681d      	ldr	r5, [r3, #0]
 80054e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80054e8:	4932      	ldr	r1, [pc, #200]	; (80055b4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b0>)
 80054ea:	4618      	mov	r0, r3
 80054ec:	f007 fc09 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80054f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80054f4:	4619      	mov	r1, r3
 80054f6:	4620      	mov	r0, r4
 80054f8:	47a8      	blx	r5
 80054fa:	4603      	mov	r3, r0
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	3264      	adds	r2, #100	; 0x64
 8005500:	6812      	ldr	r2, [r2, #0]
 8005502:	210d      	movs	r1, #13
 8005504:	4618      	mov	r0, r3
 8005506:	4790      	blx	r2
 8005508:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800550c:	4618      	mov	r0, r3
 800550e:	f007 ffb0 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8005512:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005516:	4618      	mov	r0, r3
 8005518:	f007 ffab 	bl	800d472 <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 800551c:	f7fe fa34 	bl	8003988 <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'\n');
 8005520:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005524:	4922      	ldr	r1, [pc, #136]	; (80055b0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ac>)
 8005526:	4618      	mov	r0, r3
 8005528:	f007 fbeb 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800552c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005530:	2100      	movs	r1, #0
 8005532:	4618      	mov	r0, r3
 8005534:	f005 fcbe 	bl	800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005538:	4604      	mov	r4, r0
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	330c      	adds	r3, #12
 800553e:	681d      	ldr	r5, [r3, #0]
 8005540:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005544:	491b      	ldr	r1, [pc, #108]	; (80055b4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b0>)
 8005546:	4618      	mov	r0, r3
 8005548:	f007 fbdb 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800554c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005550:	4619      	mov	r1, r3
 8005552:	4620      	mov	r0, r4
 8005554:	47a8      	blx	r5
 8005556:	4603      	mov	r3, r0
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	3264      	adds	r2, #100	; 0x64
 800555c:	6812      	ldr	r2, [r2, #0]
 800555e:	210a      	movs	r1, #10
 8005560:	4618      	mov	r0, r3
 8005562:	4790      	blx	r2
 8005564:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005568:	4618      	mov	r0, r3
 800556a:	f007 ff82 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800556e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005572:	4618      	mov	r0, r3
 8005574:	f007 ff7d 	bl	800d472 <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 8005578:	f7fe fa06 	bl	8003988 <ESP_UART_ReceiveHandler>

	STRCMP_EQUAL("OK\r\n",(char*)rx_buffer->buffer);	// check the rx ring buffer.
 800557c:	f00e ffa4 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 8005580:	4604      	mov	r4, r0
 8005582:	6823      	ldr	r3, [r4, #0]
 8005584:	3324      	adds	r3, #36	; 0x24
 8005586:	681d      	ldr	r5, [r3, #0]
 8005588:	4b0b      	ldr	r3, [pc, #44]	; (80055b8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b4>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68de      	ldr	r6, [r3, #12]
 800558e:	f00e ffab 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005592:	4603      	mov	r3, r0
 8005594:	9302      	str	r3, [sp, #8]
 8005596:	23e2      	movs	r3, #226	; 0xe2
 8005598:	9301      	str	r3, [sp, #4]
 800559a:	4b08      	ldr	r3, [pc, #32]	; (80055bc <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b8>)
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	2300      	movs	r3, #0
 80055a0:	4632      	mov	r2, r6
 80055a2:	4907      	ldr	r1, [pc, #28]	; (80055c0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1bc>)
 80055a4:	4620      	mov	r0, r4
 80055a6:	47a8      	blx	r5

}
 80055a8:	bf00      	nop
 80055aa:	374c      	adds	r7, #76	; 0x4c
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055b0:	080239c8 	.word	0x080239c8
 80055b4:	080239e8 	.word	0x080239e8
 80055b8:	2000049c 	.word	0x2000049c
 80055bc:	080236a4 	.word	0x080236a4
 80055c0:	0802361c 	.word	0x0802361c

080055c4 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_Response_Test)
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7ff fd7e 	bl	80050d0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80055d4:	4a03      	ldr	r2, [pc, #12]	; (80055e4 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev+0x20>)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4618      	mov	r0, r3
 80055de:	3708      	adds	r7, #8
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	08027714 	.word	0x08027714

080055e8 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv>:
 80055e8:	b590      	push	{r4, r7, lr}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	22e6      	movs	r2, #230	; 0xe6
 80055f2:	4906      	ldr	r1, [pc, #24]	; (800560c <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv+0x24>)
 80055f4:	2004      	movs	r0, #4
 80055f6:	f004 ffc1 	bl	800a57c <_ZnwjPKci>
 80055fa:	4604      	mov	r4, r0
 80055fc:	4620      	mov	r0, r4
 80055fe:	f7ff ffe1 	bl	80055c4 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>
 8005602:	4623      	mov	r3, r4
 8005604:	4618      	mov	r0, r3
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	bd90      	pop	{r4, r7, pc}
 800560c:	080236a4 	.word	0x080236a4

08005610 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>:
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4618      	mov	r0, r3
 800561c:	f00d fb9c 	bl	8012d58 <_ZN10UtestShellC1Ev>
 8005620:	4a03      	ldr	r2, [pc, #12]	; (8005630 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev+0x20>)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4618      	mov	r0, r3
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	08027668 	.word	0x08027668

08005634 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv>:
{
 8005634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005636:	b091      	sub	sp, #68	; 0x44
 8005638:	af04      	add	r7, sp, #16
 800563a:	6078      	str	r0, [r7, #4]
	char response[10] = "OK\r\n";
 800563c:	4a35      	ldr	r2, [pc, #212]	; (8005714 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe0>)
 800563e:	f107 030c 	add.w	r3, r7, #12
 8005642:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005646:	6018      	str	r0, [r3, #0]
 8005648:	3304      	adds	r3, #4
 800564a:	7019      	strb	r1, [r3, #0]
 800564c:	f107 0311 	add.w	r3, r7, #17
 8005650:	2200      	movs	r2, #0
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	711a      	strb	r2, [r3, #4]

	for(int i=0;i<(int)strlen(response);i++)
 8005656:	2300      	movs	r3, #0
 8005658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800565a:	f107 030c 	add.w	r3, r7, #12
 800565e:	4618      	mov	r0, r3
 8005660:	f7fa fdec 	bl	800023c <strlen>
 8005664:	4603      	mov	r3, r0
 8005666:	461a      	mov	r2, r3
 8005668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566a:	4293      	cmp	r3, r2
 800566c:	da35      	bge.n	80056da <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xa6>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 800566e:	f107 0318 	add.w	r3, r7, #24
 8005672:	4929      	ldr	r1, [pc, #164]	; (8005718 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe4>)
 8005674:	4618      	mov	r0, r3
 8005676:	f007 fb44 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800567a:	f107 0318 	add.w	r3, r7, #24
 800567e:	2100      	movs	r1, #0
 8005680:	4618      	mov	r0, r3
 8005682:	f005 fc17 	bl	800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005686:	4604      	mov	r4, r0
 8005688:	6823      	ldr	r3, [r4, #0]
 800568a:	330c      	adds	r3, #12
 800568c:	681d      	ldr	r5, [r3, #0]
 800568e:	f107 0320 	add.w	r3, r7, #32
 8005692:	4922      	ldr	r1, [pc, #136]	; (800571c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe8>)
 8005694:	4618      	mov	r0, r3
 8005696:	f007 fb34 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800569a:	f107 0320 	add.w	r3, r7, #32
 800569e:	4619      	mov	r1, r3
 80056a0:	4620      	mov	r0, r4
 80056a2:	47a8      	blx	r5
 80056a4:	4603      	mov	r3, r0
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	3264      	adds	r2, #100	; 0x64
 80056aa:	6812      	ldr	r2, [r2, #0]
 80056ac:	f107 000c 	add.w	r0, r7, #12
 80056b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056b2:	4401      	add	r1, r0
 80056b4:	7809      	ldrb	r1, [r1, #0]
 80056b6:	4618      	mov	r0, r3
 80056b8:	4790      	blx	r2
 80056ba:	f107 0320 	add.w	r3, r7, #32
 80056be:	4618      	mov	r0, r3
 80056c0:	f007 fed7 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80056c4:	f107 0318 	add.w	r3, r7, #24
 80056c8:	4618      	mov	r0, r3
 80056ca:	f007 fed2 	bl	800d472 <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 80056ce:	f7fe f95b 	bl	8003988 <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 80056d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d4:	3301      	adds	r3, #1
 80056d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056d8:	e7bf      	b.n	800565a <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x26>
	}

	uint32_t result = Read_Response((char*)"OK");
 80056da:	4811      	ldr	r0, [pc, #68]	; (8005720 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xec>)
 80056dc:	f7fe f96e 	bl	80039bc <Read_Response>
 80056e0:	62b8      	str	r0, [r7, #40]	; 0x28

	LONGS_EQUAL(1,result);
 80056e2:	f00e fef1 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 80056e6:	4604      	mov	r4, r0
 80056e8:	6823      	ldr	r3, [r4, #0]
 80056ea:	3338      	adds	r3, #56	; 0x38
 80056ec:	681d      	ldr	r5, [r3, #0]
 80056ee:	6abe      	ldr	r6, [r7, #40]	; 0x28
 80056f0:	f00e fefa 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80056f4:	4603      	mov	r3, r0
 80056f6:	9302      	str	r3, [sp, #8]
 80056f8:	23f2      	movs	r3, #242	; 0xf2
 80056fa:	9301      	str	r3, [sp, #4]
 80056fc:	4b09      	ldr	r3, [pc, #36]	; (8005724 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xf0>)
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	4b09      	ldr	r3, [pc, #36]	; (8005728 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xf4>)
 8005702:	4632      	mov	r2, r6
 8005704:	2101      	movs	r1, #1
 8005706:	4620      	mov	r0, r4
 8005708:	47a8      	blx	r5

}
 800570a:	bf00      	nop
 800570c:	3734      	adds	r7, #52	; 0x34
 800570e:	46bd      	mov	sp, r7
 8005710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005712:	bf00      	nop
 8005714:	08023a28 	.word	0x08023a28
 8005718:	080239c8 	.word	0x080239c8
 800571c:	080239e8 	.word	0x080239e8
 8005720:	08023a24 	.word	0x08023a24
 8005724:	080236a4 	.word	0x080236a4
 8005728:	080239fc 	.word	0x080239fc

0800572c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>:


TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4618      	mov	r0, r3
 8005738:	f7ff fcca 	bl	80050d0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800573c:	4a03      	ldr	r2, [pc, #12]	; (800574c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev+0x20>)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4618      	mov	r0, r3
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	08027648 	.word	0x08027648

08005750 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv>:
 8005750:	b590      	push	{r4, r7, lr}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	22f7      	movs	r2, #247	; 0xf7
 800575a:	4906      	ldr	r1, [pc, #24]	; (8005774 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv+0x24>)
 800575c:	2004      	movs	r0, #4
 800575e:	f004 ff0d 	bl	800a57c <_ZnwjPKci>
 8005762:	4604      	mov	r4, r0
 8005764:	4620      	mov	r0, r4
 8005766:	f7ff ffe1 	bl	800572c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>
 800576a:	4623      	mov	r3, r4
 800576c:	4618      	mov	r0, r3
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	bd90      	pop	{r4, r7, pc}
 8005774:	080236a4 	.word	0x080236a4

08005778 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>:
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4618      	mov	r0, r3
 8005784:	f00d fae8 	bl	8012d58 <_ZN10UtestShellC1Ev>
 8005788:	4a03      	ldr	r2, [pc, #12]	; (8005798 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev+0x20>)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4618      	mov	r0, r3
 8005792:	3708      	adds	r7, #8
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	0802759c 	.word	0x0802759c

0800579c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv>:
{
 800579c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800579e:	b089      	sub	sp, #36	; 0x24
 80057a0:	af04      	add	r7, sp, #16
 80057a2:	6078      	str	r0, [r7, #4]
	Status response_state = IDLE;
 80057a4:	2305      	movs	r3, #5
 80057a6:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		response_state = Wait_Response((char*)"OK", 1000);
 80057a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80057ac:	4811      	ldr	r0, [pc, #68]	; (80057f4 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x58>)
 80057ae:	f7fe f917 	bl	80039e0 <Wait_Response>
 80057b2:	4603      	mov	r3, r0
 80057b4:	73fb      	strb	r3, [r7, #15]
		if(response_state != IDLE)
 80057b6:	7bfb      	ldrb	r3, [r7, #15]
 80057b8:	2b05      	cmp	r3, #5
 80057ba:	d100      	bne.n	80057be <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x22>
		response_state = Wait_Response((char*)"OK", 1000);
 80057bc:	e7f4      	b.n	80057a8 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0xc>
			break;
 80057be:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 80057c0:	f00e fe82 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 80057c4:	4604      	mov	r4, r0
 80057c6:	6823      	ldr	r3, [r4, #0]
 80057c8:	3338      	adds	r3, #56	; 0x38
 80057ca:	681d      	ldr	r5, [r3, #0]
 80057cc:	7bfe      	ldrb	r6, [r7, #15]
 80057ce:	f00e fe8b 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80057d2:	4603      	mov	r3, r0
 80057d4:	9302      	str	r3, [sp, #8]
 80057d6:	f240 1303 	movw	r3, #259	; 0x103
 80057da:	9301      	str	r3, [sp, #4]
 80057dc:	4b06      	ldr	r3, [pc, #24]	; (80057f8 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x5c>)
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	4b06      	ldr	r3, [pc, #24]	; (80057fc <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x60>)
 80057e2:	4632      	mov	r2, r6
 80057e4:	2102      	movs	r1, #2
 80057e6:	4620      	mov	r0, r4
 80057e8:	47a8      	blx	r5

}
 80057ea:	bf00      	nop
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057f2:	bf00      	nop
 80057f4:	08023a24 	.word	0x08023a24
 80057f8:	080236a4 	.word	0x080236a4
 80057fc:	08023a34 	.word	0x08023a34

08005800 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_Response_Test)
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4618      	mov	r0, r3
 800580c:	f7ff fc60 	bl	80050d0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005810:	4a03      	ldr	r2, [pc, #12]	; (8005820 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev+0x20>)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	601a      	str	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4618      	mov	r0, r3
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	0802757c 	.word	0x0802757c

08005824 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv>:
 8005824:	b590      	push	{r4, r7, lr}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	f240 1207 	movw	r2, #263	; 0x107
 8005830:	4906      	ldr	r1, [pc, #24]	; (800584c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv+0x28>)
 8005832:	2004      	movs	r0, #4
 8005834:	f004 fea2 	bl	800a57c <_ZnwjPKci>
 8005838:	4604      	mov	r4, r0
 800583a:	4620      	mov	r0, r4
 800583c:	f7ff ffe0 	bl	8005800 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>
 8005840:	4623      	mov	r3, r4
 8005842:	4618      	mov	r0, r3
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	bd90      	pop	{r4, r7, pc}
 800584a:	bf00      	nop
 800584c:	080236a4 	.word	0x080236a4

08005850 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>:
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4618      	mov	r0, r3
 800585c:	f00d fa7c 	bl	8012d58 <_ZN10UtestShellC1Ev>
 8005860:	4a03      	ldr	r2, [pc, #12]	; (8005870 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev+0x20>)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	601a      	str	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4618      	mov	r0, r3
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	080274d0 	.word	0x080274d0

08005874 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv>:
{
 8005874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005876:	b091      	sub	sp, #68	; 0x44
 8005878:	af04      	add	r7, sp, #16
 800587a:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 800587c:	2305      	movs	r3, #5
 800587e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	char response[10] = "OK\r\n";
 8005882:	4a3b      	ldr	r2, [pc, #236]	; (8005970 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xfc>)
 8005884:	f107 030c 	add.w	r3, r7, #12
 8005888:	e892 0003 	ldmia.w	r2, {r0, r1}
 800588c:	6018      	str	r0, [r3, #0]
 800588e:	3304      	adds	r3, #4
 8005890:	7019      	strb	r1, [r3, #0]
 8005892:	f107 0311 	add.w	r3, r7, #17
 8005896:	2200      	movs	r2, #0
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	711a      	strb	r2, [r3, #4]

	while(1)
	{
		response_state = Wait_Response((char*)"OK",1000);
 800589c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80058a0:	4834      	ldr	r0, [pc, #208]	; (8005974 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x100>)
 80058a2:	f7fe f89d 	bl	80039e0 <Wait_Response>
 80058a6:	4603      	mov	r3, r0
 80058a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		if(response_state != IDLE)
 80058ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058b0:	2b05      	cmp	r3, #5
 80058b2:	d141      	bne.n	8005938 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xc4>
			break;
		for(int i=0;i<(int)strlen(response);i++)
 80058b4:	2300      	movs	r3, #0
 80058b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058b8:	f107 030c 	add.w	r3, r7, #12
 80058bc:	4618      	mov	r0, r3
 80058be:	f7fa fcbd 	bl	800023c <strlen>
 80058c2:	4603      	mov	r3, r0
 80058c4:	461a      	mov	r2, r3
 80058c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c8:	4293      	cmp	r3, r2
 80058ca:	dae7      	bge.n	800589c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x28>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 80058cc:	f107 0318 	add.w	r3, r7, #24
 80058d0:	4929      	ldr	r1, [pc, #164]	; (8005978 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x104>)
 80058d2:	4618      	mov	r0, r3
 80058d4:	f007 fa15 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80058d8:	f107 0318 	add.w	r3, r7, #24
 80058dc:	2100      	movs	r1, #0
 80058de:	4618      	mov	r0, r3
 80058e0:	f005 fae8 	bl	800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80058e4:	4604      	mov	r4, r0
 80058e6:	6823      	ldr	r3, [r4, #0]
 80058e8:	330c      	adds	r3, #12
 80058ea:	681d      	ldr	r5, [r3, #0]
 80058ec:	f107 0320 	add.w	r3, r7, #32
 80058f0:	4922      	ldr	r1, [pc, #136]	; (800597c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x108>)
 80058f2:	4618      	mov	r0, r3
 80058f4:	f007 fa05 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80058f8:	f107 0320 	add.w	r3, r7, #32
 80058fc:	4619      	mov	r1, r3
 80058fe:	4620      	mov	r0, r4
 8005900:	47a8      	blx	r5
 8005902:	4603      	mov	r3, r0
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	3264      	adds	r2, #100	; 0x64
 8005908:	6812      	ldr	r2, [r2, #0]
 800590a:	f107 000c 	add.w	r0, r7, #12
 800590e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005910:	4401      	add	r1, r0
 8005912:	7809      	ldrb	r1, [r1, #0]
 8005914:	4618      	mov	r0, r3
 8005916:	4790      	blx	r2
 8005918:	f107 0320 	add.w	r3, r7, #32
 800591c:	4618      	mov	r0, r3
 800591e:	f007 fda8 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8005922:	f107 0318 	add.w	r3, r7, #24
 8005926:	4618      	mov	r0, r3
 8005928:	f007 fda3 	bl	800d472 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 800592c:	f7fe f82c 	bl	8003988 <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 8005930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005932:	3301      	adds	r3, #1
 8005934:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005936:	e7bf      	b.n	80058b8 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x44>
			break;
 8005938:	bf00      	nop
		}
	}

	LONGS_EQUAL(FOUND,response_state);
 800593a:	f00e fdc5 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 800593e:	4604      	mov	r4, r0
 8005940:	6823      	ldr	r3, [r4, #0]
 8005942:	3338      	adds	r3, #56	; 0x38
 8005944:	681d      	ldr	r5, [r3, #0]
 8005946:	f897 602b 	ldrb.w	r6, [r7, #43]	; 0x2b
 800594a:	f00e fdcd 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800594e:	4603      	mov	r3, r0
 8005950:	9302      	str	r3, [sp, #8]
 8005952:	f44f 738d 	mov.w	r3, #282	; 0x11a
 8005956:	9301      	str	r3, [sp, #4]
 8005958:	4b09      	ldr	r3, [pc, #36]	; (8005980 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x10c>)
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	4b09      	ldr	r3, [pc, #36]	; (8005984 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x110>)
 800595e:	4632      	mov	r2, r6
 8005960:	2100      	movs	r1, #0
 8005962:	4620      	mov	r0, r4
 8005964:	47a8      	blx	r5
}
 8005966:	bf00      	nop
 8005968:	3734      	adds	r7, #52	; 0x34
 800596a:	46bd      	mov	sp, r7
 800596c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800596e:	bf00      	nop
 8005970:	08023a28 	.word	0x08023a28
 8005974:	08023a24 	.word	0x08023a24
 8005978:	080239c8 	.word	0x080239c8
 800597c:	080239e8 	.word	0x080239e8
 8005980:	080236a4 	.word	0x080236a4
 8005984:	08023a68 	.word	0x08023a68

08005988 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4618      	mov	r0, r3
 8005994:	f7ff fb9c 	bl	80050d0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005998:	4a03      	ldr	r2, [pc, #12]	; (80059a8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	601a      	str	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4618      	mov	r0, r3
 80059a2:	3708      	adds	r7, #8
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	080274b0 	.word	0x080274b0

080059ac <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv>:
 80059ac:	b590      	push	{r4, r7, lr}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	f240 121d 	movw	r2, #285	; 0x11d
 80059b8:	4906      	ldr	r1, [pc, #24]	; (80059d4 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 80059ba:	2004      	movs	r0, #4
 80059bc:	f004 fdde 	bl	800a57c <_ZnwjPKci>
 80059c0:	4604      	mov	r4, r0
 80059c2:	4620      	mov	r0, r4
 80059c4:	f7ff ffe0 	bl	8005988 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>
 80059c8:	4623      	mov	r3, r4
 80059ca:	4618      	mov	r0, r3
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd90      	pop	{r4, r7, pc}
 80059d2:	bf00      	nop
 80059d4:	080236a4 	.word	0x080236a4

080059d8 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>:
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f00d f9b8 	bl	8012d58 <_ZN10UtestShellC1Ev>
 80059e8:	4a03      	ldr	r2, [pc, #12]	; (80059f8 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4618      	mov	r0, r3
 80059f2:	3708      	adds	r7, #8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	08027404 	.word	0x08027404

080059fc <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 80059fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059fe:	b08f      	sub	sp, #60	; 0x3c
 8005a00:	af04      	add	r7, sp, #16
 8005a02:	6078      	str	r0, [r7, #4]
	Status response = TIMEOUT_ERROR;
 8005a04:	2302      	movs	r3, #2
 8005a06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data",AT_CWMODE_STATION);
 8005a0a:	f107 030c 	add.w	r3, r7, #12
 8005a0e:	492f      	ldr	r1, [pc, #188]	; (8005acc <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd0>)
 8005a10:	4618      	mov	r0, r3
 8005a12:	f007 f976 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8005a16:	f107 030c 	add.w	r3, r7, #12
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f005 fa49 	bl	800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005a22:	4604      	mov	r4, r0
 8005a24:	6823      	ldr	r3, [r4, #0]
 8005a26:	330c      	adds	r3, #12
 8005a28:	681d      	ldr	r5, [r3, #0]
 8005a2a:	f107 0314 	add.w	r3, r7, #20
 8005a2e:	4928      	ldr	r1, [pc, #160]	; (8005ad0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd4>)
 8005a30:	4618      	mov	r0, r3
 8005a32:	f007 f966 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8005a36:	f107 0314 	add.w	r3, r7, #20
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	47a8      	blx	r5
 8005a40:	4604      	mov	r4, r0
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	334c      	adds	r3, #76	; 0x4c
 8005a46:	681d      	ldr	r5, [r3, #0]
 8005a48:	f107 031c 	add.w	r3, r7, #28
 8005a4c:	4921      	ldr	r1, [pc, #132]	; (8005ad4 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd8>)
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f007 f957 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8005a54:	f107 031c 	add.w	r3, r7, #28
 8005a58:	4a1f      	ldr	r2, [pc, #124]	; (8005ad8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xdc>)
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	47a8      	blx	r5
 8005a60:	f107 031c 	add.w	r3, r7, #28
 8005a64:	4618      	mov	r0, r3
 8005a66:	f007 fd04 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8005a6a:	f107 0314 	add.w	r3, r7, #20
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f007 fcff 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8005a74:	f107 030c 	add.w	r3, r7, #12
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f007 fcfa 	bl	800d472 <_ZN12SimpleStringD1Ev>

	while(1)
	{

		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 8005a7e:	4917      	ldr	r1, [pc, #92]	; (8005adc <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe0>)
 8005a80:	4817      	ldr	r0, [pc, #92]	; (8005ae0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe4>)
 8005a82:	f7fd ffef 	bl	8003a64 <Connect_Wifi>
 8005a86:	4603      	mov	r3, r0
 8005a88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(response != IDLE)
 8005a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a90:	2b05      	cmp	r3, #5
 8005a92:	d100      	bne.n	8005a96 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x9a>
		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 8005a94:	e7f3      	b.n	8005a7e <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x82>
		{
			break;
 8005a96:	bf00      	nop
		}

	}


	LONGS_EQUAL(TIMEOUT_ERROR,response);
 8005a98:	f00e fd16 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 8005a9c:	4604      	mov	r4, r0
 8005a9e:	6823      	ldr	r3, [r4, #0]
 8005aa0:	3338      	adds	r3, #56	; 0x38
 8005aa2:	681d      	ldr	r5, [r3, #0]
 8005aa4:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8005aa8:	f00e fd1e 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005aac:	4603      	mov	r3, r0
 8005aae:	9302      	str	r3, [sp, #8]
 8005ab0:	f44f 7398 	mov.w	r3, #304	; 0x130
 8005ab4:	9301      	str	r3, [sp, #4]
 8005ab6:	4b0b      	ldr	r3, [pc, #44]	; (8005ae4 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe8>)
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	4b0b      	ldr	r3, [pc, #44]	; (8005ae8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xec>)
 8005abc:	4632      	mov	r2, r6
 8005abe:	2102      	movs	r1, #2
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	47a8      	blx	r5

}
 8005ac4:	bf00      	nop
 8005ac6:	372c      	adds	r7, #44	; 0x2c
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005acc:	080239c8 	.word	0x080239c8
 8005ad0:	080239cc 	.word	0x080239cc
 8005ad4:	080239e0 	.word	0x080239e0
 8005ad8:	08023624 	.word	0x08023624
 8005adc:	08023a94 	.word	0x08023a94
 8005ae0:	08023a9c 	.word	0x08023a9c
 8005ae4:	080236a4 	.word	0x080236a4
 8005ae8:	08023aa4 	.word	0x08023aa4

08005aec <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7ff faea 	bl	80050d0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005afc:	4a03      	ldr	r2, [pc, #12]	; (8005b0c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev+0x20>)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4618      	mov	r0, r3
 8005b06:	3708      	adds	r7, #8
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	080273e4 	.word	0x080273e4

08005b10 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv>:
 8005b10:	b590      	push	{r4, r7, lr}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	f44f 729a 	mov.w	r2, #308	; 0x134
 8005b1c:	4906      	ldr	r1, [pc, #24]	; (8005b38 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv+0x28>)
 8005b1e:	2004      	movs	r0, #4
 8005b20:	f004 fd2c 	bl	800a57c <_ZnwjPKci>
 8005b24:	4604      	mov	r4, r0
 8005b26:	4620      	mov	r0, r4
 8005b28:	f7ff ffe0 	bl	8005aec <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>
 8005b2c:	4623      	mov	r3, r4
 8005b2e:	4618      	mov	r0, r3
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd90      	pop	{r4, r7, pc}
 8005b36:	bf00      	nop
 8005b38:	080236a4 	.word	0x080236a4

08005b3c <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>:
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f00d f906 	bl	8012d58 <_ZN10UtestShellC1Ev>
 8005b4c:	4a03      	ldr	r2, [pc, #12]	; (8005b5c <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev+0x20>)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4618      	mov	r0, r3
 8005b56:	3708      	adds	r7, #8
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	08027338 	.word	0x08027338

08005b60 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv>:
{
 8005b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b62:	b0e1      	sub	sp, #388	; 0x184
 8005b64:	af04      	add	r7, sp, #16
 8005b66:	1d3b      	adds	r3, r7, #4
 8005b68:	6018      	str	r0, [r3, #0]
	char response_arr[3][50] =
 8005b6a:	4a78      	ldr	r2, [pc, #480]	; (8005d4c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1ec>)
 8005b6c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005b70:	4611      	mov	r1, r2
 8005b72:	2296      	movs	r2, #150	; 0x96
 8005b74:	4618      	mov	r0, r3
 8005b76:	f01a fd99 	bl	80206ac <memcpy>
	{ "OK\r\n",									// station mode response (AT+CWMODE=1)
	  "OK\r\n",									// check disconnect response (AT+CWQAP)
	  "ERROR\r\n"								// connect wifi command response (AT+CWJAP="SSID","password")
	};

	char fake_tx_buffer[3][50] =
 8005b7a:	f107 0308 	add.w	r3, r7, #8
 8005b7e:	4a74      	ldr	r2, [pc, #464]	; (8005d50 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f0>)
 8005b80:	4618      	mov	r0, r3
 8005b82:	4611      	mov	r1, r2
 8005b84:	2396      	movs	r3, #150	; 0x96
 8005b86:	461a      	mov	r2, r3
 8005b88:	f01a fd90 	bl	80206ac <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005b92:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	dc46      	bgt.n	8005c28 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xc8>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_tx_buffer[i]);
 8005b9a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b9e:	496d      	ldr	r1, [pc, #436]	; (8005d54 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f4>)
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f007 f8ae 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8005ba6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005baa:	2100      	movs	r1, #0
 8005bac:	4618      	mov	r0, r3
 8005bae:	f005 f981 	bl	800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	6823      	ldr	r3, [r4, #0]
 8005bb6:	330c      	adds	r3, #12
 8005bb8:	681d      	ldr	r5, [r3, #0]
 8005bba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005bbe:	4966      	ldr	r1, [pc, #408]	; (8005d58 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f8>)
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f007 f89e 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8005bc6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005bca:	4619      	mov	r1, r3
 8005bcc:	4620      	mov	r0, r4
 8005bce:	47a8      	blx	r5
 8005bd0:	4604      	mov	r4, r0
 8005bd2:	6823      	ldr	r3, [r4, #0]
 8005bd4:	334c      	adds	r3, #76	; 0x4c
 8005bd6:	681d      	ldr	r5, [r3, #0]
 8005bd8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005bdc:	495f      	ldr	r1, [pc, #380]	; (8005d5c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1fc>)
 8005bde:	4618      	mov	r0, r3
 8005be0:	f007 f88f 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8005be4:	f107 0208 	add.w	r2, r7, #8
 8005be8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005bec:	2132      	movs	r1, #50	; 0x32
 8005bee:	fb01 f303 	mul.w	r3, r1, r3
 8005bf2:	441a      	add	r2, r3
 8005bf4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	47a8      	blx	r5
 8005bfe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c02:	4618      	mov	r0, r3
 8005c04:	f007 fc35 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8005c08:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f007 fc30 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8005c12:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c16:	4618      	mov	r0, r3
 8005c18:	f007 fc2b 	bl	800d472 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8005c1c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005c20:	3301      	adds	r3, #1
 8005c22:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005c26:	e7b4      	b.n	8005b92 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x32>
	}
	Status response = IDLE;
 8005c28:	2305      	movs	r3, #5
 8005c2a:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
	int i = 0;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8005c34:	494a      	ldr	r1, [pc, #296]	; (8005d60 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x200>)
 8005c36:	484b      	ldr	r0, [pc, #300]	; (8005d64 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x204>)
 8005c38:	f7fd ff14 	bl	8003a64 <Connect_Wifi>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 8005c42:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005c46:	2b04      	cmp	r3, #4
 8005c48:	d065      	beq.n	8005d16 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1b6>
 8005c4a:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005c4e:	2b03      	cmp	r3, #3
 8005c50:	d061      	beq.n	8005d16 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1b6>
 8005c52:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d05d      	beq.n	8005d16 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1b6>
		{
			break;
		}

		if(i<3)
 8005c5a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	dce8      	bgt.n	8005c34 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xd4>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005c62:	2300      	movs	r3, #0
 8005c64:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005c68:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005c6c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005c70:	2132      	movs	r1, #50	; 0x32
 8005c72:	fb01 f303 	mul.w	r3, r1, r3
 8005c76:	4413      	add	r3, r2
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7fa fadf 	bl	800023c <strlen>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	461a      	mov	r2, r3
 8005c82:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005c86:	4293      	cmp	r3, r2
 8005c88:	da3f      	bge.n	8005d0a <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1aa>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8005c8a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005c8e:	4931      	ldr	r1, [pc, #196]	; (8005d54 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f4>)
 8005c90:	4618      	mov	r0, r3
 8005c92:	f007 f836 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8005c96:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005c9a:	2100      	movs	r1, #0
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f005 f909 	bl	800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005ca2:	4604      	mov	r4, r0
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	330c      	adds	r3, #12
 8005ca8:	681d      	ldr	r5, [r3, #0]
 8005caa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005cae:	492e      	ldr	r1, [pc, #184]	; (8005d68 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x208>)
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f007 f826 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8005cb6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005cba:	4619      	mov	r1, r3
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	47a8      	blx	r5
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	3264      	adds	r2, #100	; 0x64
 8005cc6:	6812      	ldr	r2, [r2, #0]
 8005cc8:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8005ccc:	2032      	movs	r0, #50	; 0x32
 8005cce:	fb00 f101 	mul.w	r1, r0, r1
 8005cd2:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8005cd6:	4408      	add	r0, r1
 8005cd8:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8005cdc:	4401      	add	r1, r0
 8005cde:	39d0      	subs	r1, #208	; 0xd0
 8005ce0:	7809      	ldrb	r1, [r1, #0]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	4790      	blx	r2
 8005ce6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005cea:	4618      	mov	r0, r3
 8005cec:	f007 fbc1 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8005cf0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f007 fbbc 	bl	800d472 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8005cfa:	f7fd fe45 	bl	8003988 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005cfe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005d02:	3301      	adds	r3, #1
 8005d04:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005d08:	e7ae      	b.n	8005c68 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x108>
			}
			i++;
 8005d0a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005d0e:	3301      	adds	r3, #1
 8005d10:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		}

	}
 8005d14:	e78e      	b.n	8005c34 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xd4>
	LONGS_EQUAL(STATUS_ERROR,response);
 8005d16:	f00e fbd7 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 8005d1a:	4604      	mov	r4, r0
 8005d1c:	6823      	ldr	r3, [r4, #0]
 8005d1e:	3338      	adds	r3, #56	; 0x38
 8005d20:	681d      	ldr	r5, [r3, #0]
 8005d22:	f897 6163 	ldrb.w	r6, [r7, #355]	; 0x163
 8005d26:	f00e fbdf 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	9302      	str	r3, [sp, #8]
 8005d2e:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8005d32:	9301      	str	r3, [sp, #4]
 8005d34:	4b0d      	ldr	r3, [pc, #52]	; (8005d6c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x20c>)
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	4b0d      	ldr	r3, [pc, #52]	; (8005d70 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x210>)
 8005d3a:	4632      	mov	r2, r6
 8005d3c:	2104      	movs	r1, #4
 8005d3e:	4620      	mov	r0, r4
 8005d40:	47a8      	blx	r5

}
 8005d42:	bf00      	nop
 8005d44:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d4c:	08023afc 	.word	0x08023afc
 8005d50:	08023b94 	.word	0x08023b94
 8005d54:	080239c8 	.word	0x080239c8
 8005d58:	080239cc 	.word	0x080239cc
 8005d5c:	080239e0 	.word	0x080239e0
 8005d60:	08023a94 	.word	0x08023a94
 8005d64:	08023a9c 	.word	0x08023a9c
 8005d68:	080239e8 	.word	0x080239e8
 8005d6c:	080236a4 	.word	0x080236a4
 8005d70:	08023ad0 	.word	0x08023ad0

08005d74 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f7ff f9a6 	bl	80050d0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005d84:	4a03      	ldr	r2, [pc, #12]	; (8005d94 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev+0x20>)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	601a      	str	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	08027318 	.word	0x08027318

08005d98 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv>:
 8005d98:	b590      	push	{r4, r7, lr}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	f44f 72b0 	mov.w	r2, #352	; 0x160
 8005da4:	4906      	ldr	r1, [pc, #24]	; (8005dc0 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv+0x28>)
 8005da6:	2004      	movs	r0, #4
 8005da8:	f004 fbe8 	bl	800a57c <_ZnwjPKci>
 8005dac:	4604      	mov	r4, r0
 8005dae:	4620      	mov	r0, r4
 8005db0:	f7ff ffe0 	bl	8005d74 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>
 8005db4:	4623      	mov	r3, r4
 8005db6:	4618      	mov	r0, r3
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd90      	pop	{r4, r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	080236a4 	.word	0x080236a4

08005dc4 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>:
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f00c ffc2 	bl	8012d58 <_ZN10UtestShellC1Ev>
 8005dd4:	4a03      	ldr	r2, [pc, #12]	; (8005de4 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev+0x20>)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3708      	adds	r7, #8
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	0802726c 	.word	0x0802726c

08005de8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv>:
{
 8005de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dea:	b0e1      	sub	sp, #388	; 0x184
 8005dec:	af04      	add	r7, sp, #16
 8005dee:	1d3b      	adds	r3, r7, #4
 8005df0:	6018      	str	r0, [r3, #0]
	char response_arr[3][50] =
 8005df2:	4a77      	ldr	r2, [pc, #476]	; (8005fd0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e8>)
 8005df4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005df8:	4611      	mov	r1, r2
 8005dfa:	2296      	movs	r2, #150	; 0x96
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f01a fc55 	bl	80206ac <memcpy>
	{ "OK\r\n",									// station mode response
	  "OK\r\n",								// check wifi connection response
	  "OK\r\n"								// connect wifi command response
	};

	char fake_tx_buffer[3][50] =
 8005e02:	f107 0308 	add.w	r3, r7, #8
 8005e06:	4a73      	ldr	r2, [pc, #460]	; (8005fd4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1ec>)
 8005e08:	4618      	mov	r0, r3
 8005e0a:	4611      	mov	r1, r2
 8005e0c:	2396      	movs	r3, #150	; 0x96
 8005e0e:	461a      	mov	r2, r3
 8005e10:	f01a fc4c 	bl	80206ac <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8005e14:	2300      	movs	r3, #0
 8005e16:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005e1a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	dc46      	bgt.n	8005eb0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xc8>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_tx_buffer[i]);
 8005e22:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e26:	496c      	ldr	r1, [pc, #432]	; (8005fd8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f0>)
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f006 ff6a 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8005e2e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e32:	2100      	movs	r1, #0
 8005e34:	4618      	mov	r0, r3
 8005e36:	f005 f83d 	bl	800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005e3a:	4604      	mov	r4, r0
 8005e3c:	6823      	ldr	r3, [r4, #0]
 8005e3e:	330c      	adds	r3, #12
 8005e40:	681d      	ldr	r5, [r3, #0]
 8005e42:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005e46:	4965      	ldr	r1, [pc, #404]	; (8005fdc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f4>)
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f006 ff5a 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8005e4e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005e52:	4619      	mov	r1, r3
 8005e54:	4620      	mov	r0, r4
 8005e56:	47a8      	blx	r5
 8005e58:	4604      	mov	r4, r0
 8005e5a:	6823      	ldr	r3, [r4, #0]
 8005e5c:	334c      	adds	r3, #76	; 0x4c
 8005e5e:	681d      	ldr	r5, [r3, #0]
 8005e60:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e64:	495e      	ldr	r1, [pc, #376]	; (8005fe0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f8>)
 8005e66:	4618      	mov	r0, r3
 8005e68:	f006 ff4b 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8005e6c:	f107 0208 	add.w	r2, r7, #8
 8005e70:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005e74:	2132      	movs	r1, #50	; 0x32
 8005e76:	fb01 f303 	mul.w	r3, r1, r3
 8005e7a:	441a      	add	r2, r3
 8005e7c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e80:	4619      	mov	r1, r3
 8005e82:	4620      	mov	r0, r4
 8005e84:	47a8      	blx	r5
 8005e86:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f007 faf1 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8005e90:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005e94:	4618      	mov	r0, r3
 8005e96:	f007 faec 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8005e9a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f007 fae7 	bl	800d472 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8005ea4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005eae:	e7b4      	b.n	8005e1a <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x32>
	}
	Status response;
	int i = 0;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8005eb6:	494b      	ldr	r1, [pc, #300]	; (8005fe4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1fc>)
 8005eb8:	484b      	ldr	r0, [pc, #300]	; (8005fe8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x200>)
 8005eba:	f7fd fdd3 	bl	8003a64 <Connect_Wifi>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 8005ec4:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005ec8:	2b04      	cmp	r3, #4
 8005eca:	d065      	beq.n	8005f98 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1b0>
 8005ecc:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d061      	beq.n	8005f98 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1b0>
 8005ed4:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d05d      	beq.n	8005f98 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1b0>
		{
			break;
		}

		if(i<3)
 8005edc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	dce8      	bgt.n	8005eb6 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xce>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005eea:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005eee:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005ef2:	2132      	movs	r1, #50	; 0x32
 8005ef4:	fb01 f303 	mul.w	r3, r1, r3
 8005ef8:	4413      	add	r3, r2
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7fa f99e 	bl	800023c <strlen>
 8005f00:	4603      	mov	r3, r0
 8005f02:	461a      	mov	r2, r3
 8005f04:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	da3f      	bge.n	8005f8c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1a4>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8005f0c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005f10:	4931      	ldr	r1, [pc, #196]	; (8005fd8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f0>)
 8005f12:	4618      	mov	r0, r3
 8005f14:	f006 fef5 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8005f18:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f004 ffc8 	bl	800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005f24:	4604      	mov	r4, r0
 8005f26:	6823      	ldr	r3, [r4, #0]
 8005f28:	330c      	adds	r3, #12
 8005f2a:	681d      	ldr	r5, [r3, #0]
 8005f2c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005f30:	492e      	ldr	r1, [pc, #184]	; (8005fec <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x204>)
 8005f32:	4618      	mov	r0, r3
 8005f34:	f006 fee5 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8005f38:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	4620      	mov	r0, r4
 8005f40:	47a8      	blx	r5
 8005f42:	4603      	mov	r3, r0
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	3264      	adds	r2, #100	; 0x64
 8005f48:	6812      	ldr	r2, [r2, #0]
 8005f4a:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8005f4e:	2032      	movs	r0, #50	; 0x32
 8005f50:	fb00 f101 	mul.w	r1, r0, r1
 8005f54:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8005f58:	4408      	add	r0, r1
 8005f5a:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8005f5e:	4401      	add	r1, r0
 8005f60:	39d0      	subs	r1, #208	; 0xd0
 8005f62:	7809      	ldrb	r1, [r1, #0]
 8005f64:	4618      	mov	r0, r3
 8005f66:	4790      	blx	r2
 8005f68:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f007 fa80 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8005f72:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005f76:	4618      	mov	r0, r3
 8005f78:	f007 fa7b 	bl	800d472 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8005f7c:	f7fd fd04 	bl	8003988 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005f80:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005f84:	3301      	adds	r3, #1
 8005f86:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005f8a:	e7ae      	b.n	8005eea <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x102>
			}
			i++;
 8005f8c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005f90:	3301      	adds	r3, #1
 8005f92:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		}

	}
 8005f96:	e78e      	b.n	8005eb6 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xce>
	LONGS_EQUAL(STATUS_OK,response);
 8005f98:	f00e fa96 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 8005f9c:	4604      	mov	r4, r0
 8005f9e:	6823      	ldr	r3, [r4, #0]
 8005fa0:	3338      	adds	r3, #56	; 0x38
 8005fa2:	681d      	ldr	r5, [r3, #0]
 8005fa4:	f897 6163 	ldrb.w	r6, [r7, #355]	; 0x163
 8005fa8:	f00e fa9e 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005fac:	4603      	mov	r3, r0
 8005fae:	9302      	str	r3, [sp, #8]
 8005fb0:	f44f 73c4 	mov.w	r3, #392	; 0x188
 8005fb4:	9301      	str	r3, [sp, #4]
 8005fb6:	4b0e      	ldr	r3, [pc, #56]	; (8005ff0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x208>)
 8005fb8:	9300      	str	r3, [sp, #0]
 8005fba:	4b0e      	ldr	r3, [pc, #56]	; (8005ff4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x20c>)
 8005fbc:	4632      	mov	r2, r6
 8005fbe:	2103      	movs	r1, #3
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	47a8      	blx	r5

}
 8005fc4:	bf00      	nop
 8005fc6:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	08023c54 	.word	0x08023c54
 8005fd4:	08023b94 	.word	0x08023b94
 8005fd8:	080239c8 	.word	0x080239c8
 8005fdc:	080239cc 	.word	0x080239cc
 8005fe0:	080239e0 	.word	0x080239e0
 8005fe4:	08023a94 	.word	0x08023a94
 8005fe8:	08023a9c 	.word	0x08023a9c
 8005fec:	080239e8 	.word	0x080239e8
 8005ff0:	080236a4 	.word	0x080236a4
 8005ff4:	08023c2c 	.word	0x08023c2c

08005ff8 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4618      	mov	r0, r3
 8006004:	f7ff f864 	bl	80050d0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006008:	4a03      	ldr	r2, [pc, #12]	; (8006018 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4618      	mov	r0, r3
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	0802724c 	.word	0x0802724c

0800601c <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv>:
 800601c:	b590      	push	{r4, r7, lr}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8006028:	4906      	ldr	r1, [pc, #24]	; (8006044 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 800602a:	2004      	movs	r0, #4
 800602c:	f004 faa6 	bl	800a57c <_ZnwjPKci>
 8006030:	4604      	mov	r4, r0
 8006032:	4620      	mov	r0, r4
 8006034:	f7ff ffe0 	bl	8005ff8 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>
 8006038:	4623      	mov	r3, r4
 800603a:	4618      	mov	r0, r3
 800603c:	370c      	adds	r7, #12
 800603e:	46bd      	mov	sp, r7
 8006040:	bd90      	pop	{r4, r7, pc}
 8006042:	bf00      	nop
 8006044:	080236a4 	.word	0x080236a4

08006048 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>:
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4618      	mov	r0, r3
 8006054:	f00c fe80 	bl	8012d58 <_ZN10UtestShellC1Ev>
 8006058:	4a03      	ldr	r2, [pc, #12]	; (8006068 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	601a      	str	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4618      	mov	r0, r3
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	080271a0 	.word	0x080271a0

0800606c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 800606c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800606e:	b08f      	sub	sp, #60	; 0x3c
 8006070:	af04      	add	r7, sp, #16
 8006072:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CWQAP);
 8006074:	f107 030c 	add.w	r3, r7, #12
 8006078:	492e      	ldr	r1, [pc, #184]	; (8006134 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xc8>)
 800607a:	4618      	mov	r0, r3
 800607c:	f006 fe41 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8006080:	f107 030c 	add.w	r3, r7, #12
 8006084:	2100      	movs	r1, #0
 8006086:	4618      	mov	r0, r3
 8006088:	f004 ff14 	bl	800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800608c:	4604      	mov	r4, r0
 800608e:	6823      	ldr	r3, [r4, #0]
 8006090:	330c      	adds	r3, #12
 8006092:	681d      	ldr	r5, [r3, #0]
 8006094:	f107 0314 	add.w	r3, r7, #20
 8006098:	4927      	ldr	r1, [pc, #156]	; (8006138 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xcc>)
 800609a:	4618      	mov	r0, r3
 800609c:	f006 fe31 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80060a0:	f107 0314 	add.w	r3, r7, #20
 80060a4:	4619      	mov	r1, r3
 80060a6:	4620      	mov	r0, r4
 80060a8:	47a8      	blx	r5
 80060aa:	4604      	mov	r4, r0
 80060ac:	6823      	ldr	r3, [r4, #0]
 80060ae:	334c      	adds	r3, #76	; 0x4c
 80060b0:	681d      	ldr	r5, [r3, #0]
 80060b2:	f107 031c 	add.w	r3, r7, #28
 80060b6:	4921      	ldr	r1, [pc, #132]	; (800613c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd0>)
 80060b8:	4618      	mov	r0, r3
 80060ba:	f006 fe22 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80060be:	f107 031c 	add.w	r3, r7, #28
 80060c2:	4a1f      	ldr	r2, [pc, #124]	; (8006140 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd4>)
 80060c4:	4619      	mov	r1, r3
 80060c6:	4620      	mov	r0, r4
 80060c8:	47a8      	blx	r5
 80060ca:	f107 031c 	add.w	r3, r7, #28
 80060ce:	4618      	mov	r0, r3
 80060d0:	f007 f9cf 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80060d4:	f107 0314 	add.w	r3, r7, #20
 80060d8:	4618      	mov	r0, r3
 80060da:	f007 f9ca 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80060de:	f107 030c 	add.w	r3, r7, #12
 80060e2:	4618      	mov	r0, r3
 80060e4:	f007 f9c5 	bl	800d472 <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 80060e8:	f7fd fcf6 	bl	8003ad8 <Disconnect_Wifi>
 80060ec:	4603      	mov	r3, r0
 80060ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(response != IDLE)
 80060f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060f6:	2b05      	cmp	r3, #5
 80060f8:	d100      	bne.n	80060fc <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x90>
		response = Disconnect_Wifi();
 80060fa:	e7f5      	b.n	80060e8 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x7c>
			break;
 80060fc:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response);
 80060fe:	f00e f9e3 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 8006102:	4604      	mov	r4, r0
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	3338      	adds	r3, #56	; 0x38
 8006108:	681d      	ldr	r5, [r3, #0]
 800610a:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 800610e:	f00e f9eb 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006112:	4603      	mov	r3, r0
 8006114:	9302      	str	r3, [sp, #8]
 8006116:	f240 139b 	movw	r3, #411	; 0x19b
 800611a:	9301      	str	r3, [sp, #4]
 800611c:	4b09      	ldr	r3, [pc, #36]	; (8006144 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd8>)
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	4b09      	ldr	r3, [pc, #36]	; (8006148 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xdc>)
 8006122:	4632      	mov	r2, r6
 8006124:	2102      	movs	r1, #2
 8006126:	4620      	mov	r0, r4
 8006128:	47a8      	blx	r5
}
 800612a:	bf00      	nop
 800612c:	372c      	adds	r7, #44	; 0x2c
 800612e:	46bd      	mov	sp, r7
 8006130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006132:	bf00      	nop
 8006134:	080239c8 	.word	0x080239c8
 8006138:	080239cc 	.word	0x080239cc
 800613c:	080239e0 	.word	0x080239e0
 8006140:	08023634 	.word	0x08023634
 8006144:	080236a4 	.word	0x080236a4
 8006148:	08023aa4 	.word	0x08023aa4

0800614c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4618      	mov	r0, r3
 8006158:	f7fe ffba 	bl	80050d0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800615c:	4a03      	ldr	r2, [pc, #12]	; (800616c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev+0x20>)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4618      	mov	r0, r3
 8006166:	3708      	adds	r7, #8
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	08027180 	.word	0x08027180

08006170 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv>:
 8006170:	b590      	push	{r4, r7, lr}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800617c:	4906      	ldr	r1, [pc, #24]	; (8006198 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv+0x28>)
 800617e:	2004      	movs	r0, #4
 8006180:	f004 f9fc 	bl	800a57c <_ZnwjPKci>
 8006184:	4604      	mov	r4, r0
 8006186:	4620      	mov	r0, r4
 8006188:	f7ff ffe0 	bl	800614c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>
 800618c:	4623      	mov	r3, r4
 800618e:	4618      	mov	r0, r3
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	bd90      	pop	{r4, r7, pc}
 8006196:	bf00      	nop
 8006198:	080236a4 	.word	0x080236a4

0800619c <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>:
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4618      	mov	r0, r3
 80061a8:	f00c fdd6 	bl	8012d58 <_ZN10UtestShellC1Ev>
 80061ac:	4a03      	ldr	r2, [pc, #12]	; (80061bc <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev+0x20>)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	601a      	str	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4618      	mov	r0, r3
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	080270d4 	.word	0x080270d4

080061c0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv>:
{
 80061c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061c2:	b093      	sub	sp, #76	; 0x4c
 80061c4:	af04      	add	r7, sp, #16
 80061c6:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CWQAP);
 80061c8:	f107 0308 	add.w	r3, r7, #8
 80061cc:	494a      	ldr	r1, [pc, #296]	; (80062f8 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x138>)
 80061ce:	4618      	mov	r0, r3
 80061d0:	f006 fd97 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80061d4:	f107 0308 	add.w	r3, r7, #8
 80061d8:	2100      	movs	r1, #0
 80061da:	4618      	mov	r0, r3
 80061dc:	f004 fe6a 	bl	800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80061e0:	4604      	mov	r4, r0
 80061e2:	6823      	ldr	r3, [r4, #0]
 80061e4:	330c      	adds	r3, #12
 80061e6:	681d      	ldr	r5, [r3, #0]
 80061e8:	f107 0310 	add.w	r3, r7, #16
 80061ec:	4943      	ldr	r1, [pc, #268]	; (80062fc <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x13c>)
 80061ee:	4618      	mov	r0, r3
 80061f0:	f006 fd87 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80061f4:	f107 0310 	add.w	r3, r7, #16
 80061f8:	4619      	mov	r1, r3
 80061fa:	4620      	mov	r0, r4
 80061fc:	47a8      	blx	r5
 80061fe:	4604      	mov	r4, r0
 8006200:	6823      	ldr	r3, [r4, #0]
 8006202:	334c      	adds	r3, #76	; 0x4c
 8006204:	681d      	ldr	r5, [r3, #0]
 8006206:	f107 0318 	add.w	r3, r7, #24
 800620a:	493d      	ldr	r1, [pc, #244]	; (8006300 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x140>)
 800620c:	4618      	mov	r0, r3
 800620e:	f006 fd78 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8006212:	f107 0318 	add.w	r3, r7, #24
 8006216:	4a3b      	ldr	r2, [pc, #236]	; (8006304 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x144>)
 8006218:	4619      	mov	r1, r3
 800621a:	4620      	mov	r0, r4
 800621c:	47a8      	blx	r5
 800621e:	f107 0318 	add.w	r3, r7, #24
 8006222:	4618      	mov	r0, r3
 8006224:	f007 f925 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8006228:	f107 0310 	add.w	r3, r7, #16
 800622c:	4618      	mov	r0, r3
 800622e:	f007 f920 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8006232:	f107 0308 	add.w	r3, r7, #8
 8006236:	4618      	mov	r0, r3
 8006238:	f007 f91b 	bl	800d472 <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 800623c:	f7fd fc4c 	bl	8003ad8 <Disconnect_Wifi>
 8006240:	4603      	mov	r3, r0
 8006242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if(response != IDLE)
 8006246:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800624a:	2b05      	cmp	r3, #5
 800624c:	d139      	bne.n	80062c2 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x102>
			break;

		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 800624e:	2300      	movs	r3, #0
 8006250:	637b      	str	r3, [r7, #52]	; 0x34
 8006252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006254:	2b01      	cmp	r3, #1
 8006256:	dcf1      	bgt.n	800623c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x7c>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)AT_RESPONSE_OK[j]);
 8006258:	f107 0320 	add.w	r3, r7, #32
 800625c:	4926      	ldr	r1, [pc, #152]	; (80062f8 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x138>)
 800625e:	4618      	mov	r0, r3
 8006260:	f006 fd4f 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8006264:	f107 0320 	add.w	r3, r7, #32
 8006268:	2100      	movs	r1, #0
 800626a:	4618      	mov	r0, r3
 800626c:	f004 fe22 	bl	800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006270:	4604      	mov	r4, r0
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	330c      	adds	r3, #12
 8006276:	681d      	ldr	r5, [r3, #0]
 8006278:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800627c:	4922      	ldr	r1, [pc, #136]	; (8006308 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x148>)
 800627e:	4618      	mov	r0, r3
 8006280:	f006 fd3f 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8006284:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006288:	4619      	mov	r1, r3
 800628a:	4620      	mov	r0, r4
 800628c:	47a8      	blx	r5
 800628e:	4603      	mov	r3, r0
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	3264      	adds	r2, #100	; 0x64
 8006294:	6812      	ldr	r2, [r2, #0]
 8006296:	481d      	ldr	r0, [pc, #116]	; (800630c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x14c>)
 8006298:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800629a:	4401      	add	r1, r0
 800629c:	7809      	ldrb	r1, [r1, #0]
 800629e:	4618      	mov	r0, r3
 80062a0:	4790      	blx	r2
 80062a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062a6:	4618      	mov	r0, r3
 80062a8:	f007 f8e3 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80062ac:	f107 0320 	add.w	r3, r7, #32
 80062b0:	4618      	mov	r0, r3
 80062b2:	f007 f8de 	bl	800d472 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 80062b6:	f7fd fb67 	bl	8003988 <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 80062ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062bc:	3301      	adds	r3, #1
 80062be:	637b      	str	r3, [r7, #52]	; 0x34
 80062c0:	e7c7      	b.n	8006252 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x92>
			break;
 80062c2:	bf00      	nop
		}

	}

	LONGS_EQUAL(STATUS_OK,response);
 80062c4:	f00e f900 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 80062c8:	4604      	mov	r4, r0
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	3338      	adds	r3, #56	; 0x38
 80062ce:	681d      	ldr	r5, [r3, #0]
 80062d0:	f897 6033 	ldrb.w	r6, [r7, #51]	; 0x33
 80062d4:	f00e f908 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80062d8:	4603      	mov	r3, r0
 80062da:	9302      	str	r3, [sp, #8]
 80062dc:	f240 13b3 	movw	r3, #435	; 0x1b3
 80062e0:	9301      	str	r3, [sp, #4]
 80062e2:	4b0b      	ldr	r3, [pc, #44]	; (8006310 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x150>)
 80062e4:	9300      	str	r3, [sp, #0]
 80062e6:	4b0b      	ldr	r3, [pc, #44]	; (8006314 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x154>)
 80062e8:	4632      	mov	r2, r6
 80062ea:	2103      	movs	r1, #3
 80062ec:	4620      	mov	r0, r4
 80062ee:	47a8      	blx	r5
}
 80062f0:	bf00      	nop
 80062f2:	373c      	adds	r7, #60	; 0x3c
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062f8:	080239c8 	.word	0x080239c8
 80062fc:	080239cc 	.word	0x080239cc
 8006300:	080239e0 	.word	0x080239e0
 8006304:	08023634 	.word	0x08023634
 8006308:	080239e8 	.word	0x080239e8
 800630c:	08023a24 	.word	0x08023a24
 8006310:	080236a4 	.word	0x080236a4
 8006314:	08023c2c 	.word	0x08023c2c

08006318 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Command_Process_Test)
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4618      	mov	r0, r3
 8006324:	f7fe fed4 	bl	80050d0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006328:	4a03      	ldr	r2, [pc, #12]	; (8006338 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev+0x20>)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	601a      	str	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4618      	mov	r0, r3
 8006332:	3708      	adds	r7, #8
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	080270b4 	.word	0x080270b4

0800633c <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShell10createTestEv>:
 800633c:	b590      	push	{r4, r7, lr}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8006348:	4906      	ldr	r1, [pc, #24]	; (8006364 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShell10createTestEv+0x28>)
 800634a:	2004      	movs	r0, #4
 800634c:	f004 f916 	bl	800a57c <_ZnwjPKci>
 8006350:	4604      	mov	r4, r0
 8006352:	4620      	mov	r0, r4
 8006354:	f7ff ffe0 	bl	8006318 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev>
 8006358:	4623      	mov	r3, r4
 800635a:	4618      	mov	r0, r3
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	bd90      	pop	{r4, r7, pc}
 8006362:	bf00      	nop
 8006364:	080236a4 	.word	0x080236a4

08006368 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev>:
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4618      	mov	r0, r3
 8006374:	f00c fcf0 	bl	8012d58 <_ZN10UtestShellC1Ev>
 8006378:	4a03      	ldr	r2, [pc, #12]	; (8006388 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev+0x20>)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	601a      	str	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4618      	mov	r0, r3
 8006382:	3708      	adds	r7, #8
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	08027008 	.word	0x08027008

0800638c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv>:
{
 800638c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800638e:	b09b      	sub	sp, #108	; 0x6c
 8006390:	af04      	add	r7, sp, #16
 8006392:	6078      	str	r0, [r7, #4]
	char *response_arr[3] =
 8006394:	4a6d      	ldr	r2, [pc, #436]	; (800654c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c0>)
 8006396:	f107 0314 	add.w	r3, r7, #20
 800639a:	ca07      	ldmia	r2, {r0, r1, r2}
 800639c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{ (char*)"OK\r\n",									// station mode response
	  (char*)"OK\r\n",								// check wifi connection response
	  (char*)"OK\r\n"								// connect wifi command response
	};

	char *fake_command_buffer[3] =
 80063a0:	4a6b      	ldr	r2, [pc, #428]	; (8006550 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c4>)
 80063a2:	f107 0308 	add.w	r3, r7, #8
 80063a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80063a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(char*)"AT+CWMODE=1\r\n",
		(char*)"AT+CWQAP\r\n",
		(char*)"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 80063ac:	2300      	movs	r3, #0
 80063ae:	657b      	str	r3, [r7, #84]	; 0x54
 80063b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	dc43      	bgt.n	800643e <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb2>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 80063b6:	f107 0320 	add.w	r3, r7, #32
 80063ba:	4966      	ldr	r1, [pc, #408]	; (8006554 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c8>)
 80063bc:	4618      	mov	r0, r3
 80063be:	f006 fca0 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80063c2:	f107 0320 	add.w	r3, r7, #32
 80063c6:	2100      	movs	r1, #0
 80063c8:	4618      	mov	r0, r3
 80063ca:	f004 fd73 	bl	800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80063ce:	4604      	mov	r4, r0
 80063d0:	6823      	ldr	r3, [r4, #0]
 80063d2:	330c      	adds	r3, #12
 80063d4:	681d      	ldr	r5, [r3, #0]
 80063d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80063da:	495f      	ldr	r1, [pc, #380]	; (8006558 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1cc>)
 80063dc:	4618      	mov	r0, r3
 80063de:	f006 fc90 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80063e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80063e6:	4619      	mov	r1, r3
 80063e8:	4620      	mov	r0, r4
 80063ea:	47a8      	blx	r5
 80063ec:	4604      	mov	r4, r0
 80063ee:	6823      	ldr	r3, [r4, #0]
 80063f0:	334c      	adds	r3, #76	; 0x4c
 80063f2:	681d      	ldr	r5, [r3, #0]
 80063f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80063f8:	4958      	ldr	r1, [pc, #352]	; (800655c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1d0>)
 80063fa:	4618      	mov	r0, r3
 80063fc:	f006 fc81 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8006400:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006408:	4413      	add	r3, r2
 800640a:	f853 2c50 	ldr.w	r2, [r3, #-80]
 800640e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006412:	4619      	mov	r1, r3
 8006414:	4620      	mov	r0, r4
 8006416:	47a8      	blx	r5
 8006418:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800641c:	4618      	mov	r0, r3
 800641e:	f007 f828 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8006422:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006426:	4618      	mov	r0, r3
 8006428:	f007 f823 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800642c:	f107 0320 	add.w	r3, r7, #32
 8006430:	4618      	mov	r0, r3
 8006432:	f007 f81e 	bl	800d472 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8006436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006438:	3301      	adds	r3, #1
 800643a:	657b      	str	r3, [r7, #84]	; 0x54
 800643c:	e7b8      	b.n	80063b0 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x24>
	}
	Status response;
	int i = 0;
 800643e:	2300      	movs	r3, #0
 8006440:	653b      	str	r3, [r7, #80]	; 0x50
	while(1)
	{
		response = Command_Process(fake_command_buffer, response_arr, 3);
 8006442:	f107 0114 	add.w	r1, r7, #20
 8006446:	f107 0308 	add.w	r3, r7, #8
 800644a:	2203      	movs	r2, #3
 800644c:	4618      	mov	r0, r3
 800644e:	f7fd fb5f 	bl	8003b10 <Command_Process>
 8006452:	4603      	mov	r3, r0
 8006454:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 8006458:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800645c:	2b04      	cmp	r3, #4
 800645e:	d05b      	beq.n	8006518 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x18c>
 8006460:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006464:	2b03      	cmp	r3, #3
 8006466:	d057      	beq.n	8006518 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x18c>
 8006468:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800646c:	2b02      	cmp	r3, #2
 800646e:	d053      	beq.n	8006518 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x18c>
		{
			break;
		}

		if(i<3)
 8006470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006472:	2b02      	cmp	r3, #2
 8006474:	dce5      	bgt.n	8006442 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb6>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006476:	2300      	movs	r3, #0
 8006478:	64fb      	str	r3, [r7, #76]	; 0x4c
 800647a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006482:	4413      	add	r3, r2
 8006484:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006488:	4618      	mov	r0, r3
 800648a:	f7f9 fed7 	bl	800023c <strlen>
 800648e:	4603      	mov	r3, r0
 8006490:	461a      	mov	r2, r3
 8006492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006494:	4293      	cmp	r3, r2
 8006496:	da3b      	bge.n	8006510 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x184>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006498:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800649c:	492d      	ldr	r1, [pc, #180]	; (8006554 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c8>)
 800649e:	4618      	mov	r0, r3
 80064a0:	f006 fc2f 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80064a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80064a8:	2100      	movs	r1, #0
 80064aa:	4618      	mov	r0, r3
 80064ac:	f004 fd02 	bl	800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80064b0:	4604      	mov	r4, r0
 80064b2:	6823      	ldr	r3, [r4, #0]
 80064b4:	330c      	adds	r3, #12
 80064b6:	681d      	ldr	r5, [r3, #0]
 80064b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80064bc:	4928      	ldr	r1, [pc, #160]	; (8006560 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1d4>)
 80064be:	4618      	mov	r0, r3
 80064c0:	f006 fc1f 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80064c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80064c8:	4619      	mov	r1, r3
 80064ca:	4620      	mov	r0, r4
 80064cc:	47a8      	blx	r5
 80064ce:	4602      	mov	r2, r0
 80064d0:	6813      	ldr	r3, [r2, #0]
 80064d2:	3364      	adds	r3, #100	; 0x64
 80064d4:	681c      	ldr	r4, [r3, #0]
 80064d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80064de:	440b      	add	r3, r1
 80064e0:	f853 1c44 	ldr.w	r1, [r3, #-68]
 80064e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064e6:	440b      	add	r3, r1
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	4619      	mov	r1, r3
 80064ec:	4610      	mov	r0, r2
 80064ee:	47a0      	blx	r4
 80064f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80064f4:	4618      	mov	r0, r3
 80064f6:	f006 ffbc 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80064fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80064fe:	4618      	mov	r0, r3
 8006500:	f006 ffb7 	bl	800d472 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006504:	f7fd fa40 	bl	8003988 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800650a:	3301      	adds	r3, #1
 800650c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800650e:	e7b4      	b.n	800647a <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xee>
			}
			i++;
 8006510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006512:	3301      	adds	r3, #1
 8006514:	653b      	str	r3, [r7, #80]	; 0x50
		}

	}
 8006516:	e794      	b.n	8006442 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb6>
	LONGS_EQUAL(STATUS_OK,response);
 8006518:	f00d ffd6 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 800651c:	4604      	mov	r4, r0
 800651e:	6823      	ldr	r3, [r4, #0]
 8006520:	3338      	adds	r3, #56	; 0x38
 8006522:	681d      	ldr	r5, [r3, #0]
 8006524:	f897 604b 	ldrb.w	r6, [r7, #75]	; 0x4b
 8006528:	f00d ffde 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800652c:	4603      	mov	r3, r0
 800652e:	9302      	str	r3, [sp, #8]
 8006530:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 8006534:	9301      	str	r3, [sp, #4]
 8006536:	4b0b      	ldr	r3, [pc, #44]	; (8006564 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1d8>)
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	4b0b      	ldr	r3, [pc, #44]	; (8006568 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1dc>)
 800653c:	4632      	mov	r2, r6
 800653e:	2103      	movs	r1, #3
 8006540:	4620      	mov	r0, r4
 8006542:	47a8      	blx	r5

}
 8006544:	bf00      	nop
 8006546:	375c      	adds	r7, #92	; 0x5c
 8006548:	46bd      	mov	sp, r7
 800654a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800654c:	08023cec 	.word	0x08023cec
 8006550:	08023cf8 	.word	0x08023cf8
 8006554:	080239c8 	.word	0x080239c8
 8006558:	080239cc 	.word	0x080239cc
 800655c:	080239e0 	.word	0x080239e0
 8006560:	080239e8 	.word	0x080239e8
 8006564:	080236a4 	.word	0x080236a4
 8006568:	08023c2c 	.word	0x08023c2c

0800656c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Test)
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4618      	mov	r0, r3
 8006578:	f7fe fdaa 	bl	80050d0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800657c:	4a03      	ldr	r2, [pc, #12]	; (800658c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev+0x20>)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	601a      	str	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4618      	mov	r0, r3
 8006586:	3708      	adds	r7, #8
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	08026fe8 	.word	0x08026fe8

08006590 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShell10createTestEv>:
 8006590:	b590      	push	{r4, r7, lr}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800659c:	4906      	ldr	r1, [pc, #24]	; (80065b8 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShell10createTestEv+0x28>)
 800659e:	2004      	movs	r0, #4
 80065a0:	f003 ffec 	bl	800a57c <_ZnwjPKci>
 80065a4:	4604      	mov	r4, r0
 80065a6:	4620      	mov	r0, r4
 80065a8:	f7ff ffe0 	bl	800656c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev>
 80065ac:	4623      	mov	r3, r4
 80065ae:	4618      	mov	r0, r3
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd90      	pop	{r4, r7, pc}
 80065b6:	bf00      	nop
 80065b8:	080236a4 	.word	0x080236a4

080065bc <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev>:
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4618      	mov	r0, r3
 80065c8:	f00c fbc6 	bl	8012d58 <_ZN10UtestShellC1Ev>
 80065cc:	4a03      	ldr	r2, [pc, #12]	; (80065dc <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev+0x20>)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	601a      	str	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4618      	mov	r0, r3
 80065d6:	3708      	adds	r7, #8
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	08026f3c 	.word	0x08026f3c

080065e0 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv>:
{
 80065e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065e2:	b0bf      	sub	sp, #252	; 0xfc
 80065e4:	af04      	add	r7, sp, #16
 80065e6:	6078      	str	r0, [r7, #4]
	char response_arr[3][50] =
 80065e8:	4a74      	ldr	r2, [pc, #464]	; (80067bc <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1dc>)
 80065ea:	f107 0318 	add.w	r3, r7, #24
 80065ee:	4611      	mov	r1, r2
 80065f0:	2296      	movs	r2, #150	; 0x96
 80065f2:	4618      	mov	r0, r3
 80065f4:	f01a f85a 	bl	80206ac <memcpy>
	{ "OK\r\n",
	  "OK\r\n",
	  "OK\r\n"
	};

	char *fake_command_buffer[3] =
 80065f8:	4a71      	ldr	r2, [pc, #452]	; (80067c0 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e0>)
 80065fa:	f107 030c 	add.w	r3, r7, #12
 80065fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8006600:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(char*)"AT+CIPCLOSE\r\n",
		(char*)"AT+CIPMUX=0\r\n",
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	for(int i=0;i<3;i++)
 8006604:	2300      	movs	r3, #0
 8006606:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800660a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800660e:	2b02      	cmp	r3, #2
 8006610:	dc46      	bgt.n	80066a0 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc0>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 8006612:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006616:	496b      	ldr	r1, [pc, #428]	; (80067c4 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e4>)
 8006618:	4618      	mov	r0, r3
 800661a:	f006 fb72 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800661e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006622:	2100      	movs	r1, #0
 8006624:	4618      	mov	r0, r3
 8006626:	f004 fc45 	bl	800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800662a:	4604      	mov	r4, r0
 800662c:	6823      	ldr	r3, [r4, #0]
 800662e:	330c      	adds	r3, #12
 8006630:	681d      	ldr	r5, [r3, #0]
 8006632:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006636:	4964      	ldr	r1, [pc, #400]	; (80067c8 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e8>)
 8006638:	4618      	mov	r0, r3
 800663a:	f006 fb62 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800663e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006642:	4619      	mov	r1, r3
 8006644:	4620      	mov	r0, r4
 8006646:	47a8      	blx	r5
 8006648:	4604      	mov	r4, r0
 800664a:	6823      	ldr	r3, [r4, #0]
 800664c:	334c      	adds	r3, #76	; 0x4c
 800664e:	681d      	ldr	r5, [r3, #0]
 8006650:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006654:	495d      	ldr	r1, [pc, #372]	; (80067cc <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1ec>)
 8006656:	4618      	mov	r0, r3
 8006658:	f006 fb53 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800665c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8006666:	4413      	add	r3, r2
 8006668:	f853 2cdc 	ldr.w	r2, [r3, #-220]
 800666c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006670:	4619      	mov	r1, r3
 8006672:	4620      	mov	r0, r4
 8006674:	47a8      	blx	r5
 8006676:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800667a:	4618      	mov	r0, r3
 800667c:	f006 fef9 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8006680:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006684:	4618      	mov	r0, r3
 8006686:	f006 fef4 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800668a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800668e:	4618      	mov	r0, r3
 8006690:	f006 feef 	bl	800d472 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8006694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006698:	3301      	adds	r3, #1
 800669a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800669e:	e7b4      	b.n	800660a <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x2a>
	}

	Status response;
	int i = 0;
 80066a0:	2300      	movs	r3, #0
 80066a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 80066a6:	494a      	ldr	r1, [pc, #296]	; (80067d0 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1f0>)
 80066a8:	484a      	ldr	r0, [pc, #296]	; (80067d4 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1f4>)
 80066aa:	f7fd fab7 	bl	8003c1c <Connect_TCP_Server>
 80066ae:	4603      	mov	r3, r0
 80066b0:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 80066b4:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80066b8:	2b04      	cmp	r3, #4
 80066ba:	d065      	beq.n	8006788 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1a8>
 80066bc:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80066c0:	2b03      	cmp	r3, #3
 80066c2:	d061      	beq.n	8006788 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1a8>
 80066c4:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d05d      	beq.n	8006788 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1a8>
		{
			break;
		}

		if(i<3)
 80066cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	dce8      	bgt.n	80066a6 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc6>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80066d4:	2300      	movs	r3, #0
 80066d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066da:	f107 0218 	add.w	r2, r7, #24
 80066de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066e2:	2132      	movs	r1, #50	; 0x32
 80066e4:	fb01 f303 	mul.w	r3, r1, r3
 80066e8:	4413      	add	r3, r2
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7f9 fda6 	bl	800023c <strlen>
 80066f0:	4603      	mov	r3, r0
 80066f2:	461a      	mov	r2, r3
 80066f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066f8:	4293      	cmp	r3, r2
 80066fa:	da3f      	bge.n	800677c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x19c>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 80066fc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006700:	4930      	ldr	r1, [pc, #192]	; (80067c4 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e4>)
 8006702:	4618      	mov	r0, r3
 8006704:	f006 fafd 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8006708:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800670c:	2100      	movs	r1, #0
 800670e:	4618      	mov	r0, r3
 8006710:	f004 fbd0 	bl	800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006714:	4604      	mov	r4, r0
 8006716:	6823      	ldr	r3, [r4, #0]
 8006718:	330c      	adds	r3, #12
 800671a:	681d      	ldr	r5, [r3, #0]
 800671c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006720:	492d      	ldr	r1, [pc, #180]	; (80067d8 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1f8>)
 8006722:	4618      	mov	r0, r3
 8006724:	f006 faed 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8006728:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800672c:	4619      	mov	r1, r3
 800672e:	4620      	mov	r0, r4
 8006730:	47a8      	blx	r5
 8006732:	4603      	mov	r3, r0
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	3264      	adds	r2, #100	; 0x64
 8006738:	6812      	ldr	r2, [r2, #0]
 800673a:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800673e:	2032      	movs	r0, #50	; 0x32
 8006740:	fb00 f101 	mul.w	r1, r0, r1
 8006744:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 8006748:	4408      	add	r0, r1
 800674a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800674e:	4401      	add	r1, r0
 8006750:	39d0      	subs	r1, #208	; 0xd0
 8006752:	7809      	ldrb	r1, [r1, #0]
 8006754:	4618      	mov	r0, r3
 8006756:	4790      	blx	r2
 8006758:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800675c:	4618      	mov	r0, r3
 800675e:	f006 fe88 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8006762:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006766:	4618      	mov	r0, r3
 8006768:	f006 fe83 	bl	800d472 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 800676c:	f7fd f90c 	bl	8003988 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006770:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006774:	3301      	adds	r3, #1
 8006776:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800677a:	e7ae      	b.n	80066da <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xfa>
			}
			i++;
 800677c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006780:	3301      	adds	r3, #1
 8006782:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		}

	}
 8006786:	e78e      	b.n	80066a6 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc6>
	LONGS_EQUAL(STATUS_OK,response);
 8006788:	f00d fe9e 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 800678c:	4604      	mov	r4, r0
 800678e:	6823      	ldr	r3, [r4, #0]
 8006790:	3338      	adds	r3, #56	; 0x38
 8006792:	681d      	ldr	r5, [r3, #0]
 8006794:	f897 60db 	ldrb.w	r6, [r7, #219]	; 0xdb
 8006798:	f00d fea6 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800679c:	4603      	mov	r3, r0
 800679e:	9302      	str	r3, [sp, #8]
 80067a0:	f240 230b 	movw	r3, #523	; 0x20b
 80067a4:	9301      	str	r3, [sp, #4]
 80067a6:	4b0d      	ldr	r3, [pc, #52]	; (80067dc <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1fc>)
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	4b0d      	ldr	r3, [pc, #52]	; (80067e0 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x200>)
 80067ac:	4632      	mov	r2, r6
 80067ae:	2103      	movs	r1, #3
 80067b0:	4620      	mov	r0, r4
 80067b2:	47a8      	blx	r5

}
 80067b4:	bf00      	nop
 80067b6:	37ec      	adds	r7, #236	; 0xec
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067bc:	08023c54 	.word	0x08023c54
 80067c0:	08023d14 	.word	0x08023d14
 80067c4:	080239c8 	.word	0x080239c8
 80067c8:	080239cc 	.word	0x080239cc
 80067cc:	080239e0 	.word	0x080239e0
 80067d0:	08023d04 	.word	0x08023d04
 80067d4:	08023d08 	.word	0x08023d08
 80067d8:	080239e8 	.word	0x080239e8
 80067dc:	080236a4 	.word	0x080236a4
 80067e0:	08023c2c 	.word	0x08023c2c

080067e4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fe fc6e 	bl	80050d0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80067f4:	4a03      	ldr	r2, [pc, #12]	; (8006804 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev+0x20>)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	601a      	str	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4618      	mov	r0, r3
 80067fe:	3708      	adds	r7, #8
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	08026f1c 	.word	0x08026f1c

08006808 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShell10createTestEv>:
 8006808:	b590      	push	{r4, r7, lr}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	f240 220f 	movw	r2, #527	; 0x20f
 8006814:	4906      	ldr	r1, [pc, #24]	; (8006830 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShell10createTestEv+0x28>)
 8006816:	2004      	movs	r0, #4
 8006818:	f003 feb0 	bl	800a57c <_ZnwjPKci>
 800681c:	4604      	mov	r4, r0
 800681e:	4620      	mov	r0, r4
 8006820:	f7ff ffe0 	bl	80067e4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev>
 8006824:	4623      	mov	r3, r4
 8006826:	4618      	mov	r0, r3
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	bd90      	pop	{r4, r7, pc}
 800682e:	bf00      	nop
 8006830:	080236a4 	.word	0x080236a4

08006834 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev>:
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4618      	mov	r0, r3
 8006840:	f00c fa8a 	bl	8012d58 <_ZN10UtestShellC1Ev>
 8006844:	4a03      	ldr	r2, [pc, #12]	; (8006854 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev+0x20>)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	601a      	str	r2, [r3, #0]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4618      	mov	r0, r3
 800684e:	3708      	adds	r7, #8
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	08026e70 	.word	0x08026e70

08006858 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv>:
{
 8006858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800685a:	b091      	sub	sp, #68	; 0x44
 800685c:	af04      	add	r7, sp, #16
 800685e:	6078      	str	r0, [r7, #4]

	char *fake_command_buffer[3] =
 8006860:	4a36      	ldr	r2, [pc, #216]	; (800693c <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xe4>)
 8006862:	f107 0308 	add.w	r3, r7, #8
 8006866:	ca07      	ldmia	r2, {r0, r1, r2}
 8006868:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(char*)"AT+CIPCLOSE\r\n",
		(char*)"AT+CIPMUX=0\r\n",
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[0]);
 800686c:	f107 0314 	add.w	r3, r7, #20
 8006870:	4933      	ldr	r1, [pc, #204]	; (8006940 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xe8>)
 8006872:	4618      	mov	r0, r3
 8006874:	f006 fa45 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8006878:	f107 0314 	add.w	r3, r7, #20
 800687c:	2100      	movs	r1, #0
 800687e:	4618      	mov	r0, r3
 8006880:	f004 fb18 	bl	800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006884:	4604      	mov	r4, r0
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	330c      	adds	r3, #12
 800688a:	681d      	ldr	r5, [r3, #0]
 800688c:	f107 031c 	add.w	r3, r7, #28
 8006890:	492c      	ldr	r1, [pc, #176]	; (8006944 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xec>)
 8006892:	4618      	mov	r0, r3
 8006894:	f006 fa35 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8006898:	f107 031c 	add.w	r3, r7, #28
 800689c:	4619      	mov	r1, r3
 800689e:	4620      	mov	r0, r4
 80068a0:	47a8      	blx	r5
 80068a2:	4604      	mov	r4, r0
 80068a4:	6823      	ldr	r3, [r4, #0]
 80068a6:	334c      	adds	r3, #76	; 0x4c
 80068a8:	681d      	ldr	r5, [r3, #0]
 80068aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068ae:	4926      	ldr	r1, [pc, #152]	; (8006948 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xf0>)
 80068b0:	4618      	mov	r0, r3
 80068b2:	f006 fa26 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068bc:	4619      	mov	r1, r3
 80068be:	4620      	mov	r0, r4
 80068c0:	47a8      	blx	r5
 80068c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068c6:	4618      	mov	r0, r3
 80068c8:	f006 fdd3 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80068cc:	f107 031c 	add.w	r3, r7, #28
 80068d0:	4618      	mov	r0, r3
 80068d2:	f006 fdce 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80068d6:	f107 0314 	add.w	r3, r7, #20
 80068da:	4618      	mov	r0, r3
 80068dc:	f006 fdc9 	bl	800d472 <_ZN12SimpleStringD1Ev>


	Status response;
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 80068e0:	491a      	ldr	r1, [pc, #104]	; (800694c <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xf4>)
 80068e2:	481b      	ldr	r0, [pc, #108]	; (8006950 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xf8>)
 80068e4:	f7fd f99a 	bl	8003c1c <Connect_TCP_Server>
 80068e8:	4603      	mov	r3, r0
 80068ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 80068ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068f2:	2b04      	cmp	r3, #4
 80068f4:	d008      	beq.n	8006908 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xb0>
 80068f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068fa:	2b03      	cmp	r3, #3
 80068fc:	d004      	beq.n	8006908 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xb0>
 80068fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006902:	2b02      	cmp	r3, #2
 8006904:	d000      	beq.n	8006908 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xb0>
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8006906:	e7eb      	b.n	80068e0 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x88>
		{
			break;
		}

	}
	LONGS_EQUAL(TIMEOUT_ERROR,response);
 8006908:	f00d fdde 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 800690c:	4604      	mov	r4, r0
 800690e:	6823      	ldr	r3, [r4, #0]
 8006910:	3338      	adds	r3, #56	; 0x38
 8006912:	681d      	ldr	r5, [r3, #0]
 8006914:	f897 602f 	ldrb.w	r6, [r7, #47]	; 0x2f
 8006918:	f00d fde6 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800691c:	4603      	mov	r3, r0
 800691e:	9302      	str	r3, [sp, #8]
 8006920:	f240 2326 	movw	r3, #550	; 0x226
 8006924:	9301      	str	r3, [sp, #4]
 8006926:	4b0b      	ldr	r3, [pc, #44]	; (8006954 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xfc>)
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	4b0b      	ldr	r3, [pc, #44]	; (8006958 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x100>)
 800692c:	4632      	mov	r2, r6
 800692e:	2102      	movs	r1, #2
 8006930:	4620      	mov	r0, r4
 8006932:	47a8      	blx	r5

}
 8006934:	bf00      	nop
 8006936:	3734      	adds	r7, #52	; 0x34
 8006938:	46bd      	mov	sp, r7
 800693a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800693c:	08023d14 	.word	0x08023d14
 8006940:	080239c8 	.word	0x080239c8
 8006944:	080239cc 	.word	0x080239cc
 8006948:	080239e0 	.word	0x080239e0
 800694c:	08023d04 	.word	0x08023d04
 8006950:	08023d08 	.word	0x08023d08
 8006954:	080236a4 	.word	0x080236a4
 8006958:	08023aa4 	.word	0x08023aa4

0800695c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4618      	mov	r0, r3
 8006968:	f7fe fbb2 	bl	80050d0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800696c:	4a03      	ldr	r2, [pc, #12]	; (800697c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev+0x20>)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	601a      	str	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4618      	mov	r0, r3
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	08026e50 	.word	0x08026e50

08006980 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShell10createTestEv>:
 8006980:	b590      	push	{r4, r7, lr}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	f240 222a 	movw	r2, #554	; 0x22a
 800698c:	4906      	ldr	r1, [pc, #24]	; (80069a8 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShell10createTestEv+0x28>)
 800698e:	2004      	movs	r0, #4
 8006990:	f003 fdf4 	bl	800a57c <_ZnwjPKci>
 8006994:	4604      	mov	r4, r0
 8006996:	4620      	mov	r0, r4
 8006998:	f7ff ffe0 	bl	800695c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev>
 800699c:	4623      	mov	r3, r4
 800699e:	4618      	mov	r0, r3
 80069a0:	370c      	adds	r7, #12
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd90      	pop	{r4, r7, pc}
 80069a6:	bf00      	nop
 80069a8:	080236a4 	.word	0x080236a4

080069ac <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev>:
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f00c f9ce 	bl	8012d58 <_ZN10UtestShellC1Ev>
 80069bc:	4a03      	ldr	r2, [pc, #12]	; (80069cc <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev+0x20>)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	601a      	str	r2, [r3, #0]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4618      	mov	r0, r3
 80069c6:	3708      	adds	r7, #8
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	08026da4 	.word	0x08026da4

080069d0 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv>:
{
 80069d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069d2:	b0bf      	sub	sp, #252	; 0xfc
 80069d4:	af04      	add	r7, sp, #16
 80069d6:	6078      	str	r0, [r7, #4]
	char response_arr[3][50] =
 80069d8:	4a74      	ldr	r2, [pc, #464]	; (8006bac <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1dc>)
 80069da:	f107 0318 	add.w	r3, r7, #24
 80069de:	4611      	mov	r1, r2
 80069e0:	2296      	movs	r2, #150	; 0x96
 80069e2:	4618      	mov	r0, r3
 80069e4:	f019 fe62 	bl	80206ac <memcpy>
	{ "OK\r\n",
	  "OK\r\n",
	  "ERROR\r\n"
	};

	char *fake_command_buffer[3] =
 80069e8:	4a71      	ldr	r2, [pc, #452]	; (8006bb0 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e0>)
 80069ea:	f107 030c 	add.w	r3, r7, #12
 80069ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80069f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(char*)"AT+CIPCLOSE\r\n",
		(char*)"AT+CIPMUX=0\r\n",
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	for(int i=0;i<3;i++)
 80069f4:	2300      	movs	r3, #0
 80069f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	dc46      	bgt.n	8006a90 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc0>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 8006a02:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006a06:	496b      	ldr	r1, [pc, #428]	; (8006bb4 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e4>)
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f006 f97a 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8006a0e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006a12:	2100      	movs	r1, #0
 8006a14:	4618      	mov	r0, r3
 8006a16:	f004 fa4d 	bl	800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006a1a:	4604      	mov	r4, r0
 8006a1c:	6823      	ldr	r3, [r4, #0]
 8006a1e:	330c      	adds	r3, #12
 8006a20:	681d      	ldr	r5, [r3, #0]
 8006a22:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006a26:	4964      	ldr	r1, [pc, #400]	; (8006bb8 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e8>)
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f006 f96a 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8006a2e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006a32:	4619      	mov	r1, r3
 8006a34:	4620      	mov	r0, r4
 8006a36:	47a8      	blx	r5
 8006a38:	4604      	mov	r4, r0
 8006a3a:	6823      	ldr	r3, [r4, #0]
 8006a3c:	334c      	adds	r3, #76	; 0x4c
 8006a3e:	681d      	ldr	r5, [r3, #0]
 8006a40:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006a44:	495d      	ldr	r1, [pc, #372]	; (8006bbc <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1ec>)
 8006a46:	4618      	mov	r0, r3
 8006a48:	f006 f95b 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8006a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8006a56:	4413      	add	r3, r2
 8006a58:	f853 2cdc 	ldr.w	r2, [r3, #-220]
 8006a5c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006a60:	4619      	mov	r1, r3
 8006a62:	4620      	mov	r0, r4
 8006a64:	47a8      	blx	r5
 8006a66:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f006 fd01 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8006a70:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006a74:	4618      	mov	r0, r3
 8006a76:	f006 fcfc 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8006a7a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f006 fcf7 	bl	800d472 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8006a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a88:	3301      	adds	r3, #1
 8006a8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a8e:	e7b4      	b.n	80069fa <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x2a>
	}

	Status response;
	int i = 0;
 8006a90:	2300      	movs	r3, #0
 8006a92:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8006a96:	494a      	ldr	r1, [pc, #296]	; (8006bc0 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1f0>)
 8006a98:	484a      	ldr	r0, [pc, #296]	; (8006bc4 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1f4>)
 8006a9a:	f7fd f8bf 	bl	8003c1c <Connect_TCP_Server>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 8006aa4:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006aa8:	2b04      	cmp	r3, #4
 8006aaa:	d065      	beq.n	8006b78 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1a8>
 8006aac:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006ab0:	2b03      	cmp	r3, #3
 8006ab2:	d061      	beq.n	8006b78 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1a8>
 8006ab4:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d05d      	beq.n	8006b78 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1a8>
		{
			break;
		}

		if(i<3)
 8006abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	dce8      	bgt.n	8006a96 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc6>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006aca:	f107 0218 	add.w	r2, r7, #24
 8006ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ad2:	2132      	movs	r1, #50	; 0x32
 8006ad4:	fb01 f303 	mul.w	r3, r1, r3
 8006ad8:	4413      	add	r3, r2
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7f9 fbae 	bl	800023c <strlen>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	da3f      	bge.n	8006b6c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x19c>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006aec:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006af0:	4930      	ldr	r1, [pc, #192]	; (8006bb4 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e4>)
 8006af2:	4618      	mov	r0, r3
 8006af4:	f006 f905 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8006af8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006afc:	2100      	movs	r1, #0
 8006afe:	4618      	mov	r0, r3
 8006b00:	f004 f9d8 	bl	800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006b04:	4604      	mov	r4, r0
 8006b06:	6823      	ldr	r3, [r4, #0]
 8006b08:	330c      	adds	r3, #12
 8006b0a:	681d      	ldr	r5, [r3, #0]
 8006b0c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006b10:	492d      	ldr	r1, [pc, #180]	; (8006bc8 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1f8>)
 8006b12:	4618      	mov	r0, r3
 8006b14:	f006 f8f5 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8006b18:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	4620      	mov	r0, r4
 8006b20:	47a8      	blx	r5
 8006b22:	4603      	mov	r3, r0
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	3264      	adds	r2, #100	; 0x64
 8006b28:	6812      	ldr	r2, [r2, #0]
 8006b2a:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8006b2e:	2032      	movs	r0, #50	; 0x32
 8006b30:	fb00 f101 	mul.w	r1, r0, r1
 8006b34:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 8006b38:	4408      	add	r0, r1
 8006b3a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006b3e:	4401      	add	r1, r0
 8006b40:	39d0      	subs	r1, #208	; 0xd0
 8006b42:	7809      	ldrb	r1, [r1, #0]
 8006b44:	4618      	mov	r0, r3
 8006b46:	4790      	blx	r2
 8006b48:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f006 fc90 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8006b52:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006b56:	4618      	mov	r0, r3
 8006b58:	f006 fc8b 	bl	800d472 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006b5c:	f7fc ff14 	bl	8003988 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006b60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b64:	3301      	adds	r3, #1
 8006b66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006b6a:	e7ae      	b.n	8006aca <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xfa>
			}
			i++;
 8006b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b70:	3301      	adds	r3, #1
 8006b72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		}

	}
 8006b76:	e78e      	b.n	8006a96 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc6>
	LONGS_EQUAL(STATUS_ERROR,response);
 8006b78:	f00d fca6 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 8006b7c:	4604      	mov	r4, r0
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	3338      	adds	r3, #56	; 0x38
 8006b82:	681d      	ldr	r5, [r3, #0]
 8006b84:	f897 60db 	ldrb.w	r6, [r7, #219]	; 0xdb
 8006b88:	f00d fcae 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	9302      	str	r3, [sp, #8]
 8006b90:	f240 2353 	movw	r3, #595	; 0x253
 8006b94:	9301      	str	r3, [sp, #4]
 8006b96:	4b0d      	ldr	r3, [pc, #52]	; (8006bcc <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1fc>)
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	4b0d      	ldr	r3, [pc, #52]	; (8006bd0 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x200>)
 8006b9c:	4632      	mov	r2, r6
 8006b9e:	2104      	movs	r1, #4
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	47a8      	blx	r5

}
 8006ba4:	bf00      	nop
 8006ba6:	37ec      	adds	r7, #236	; 0xec
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bac:	08023afc 	.word	0x08023afc
 8006bb0:	08023d14 	.word	0x08023d14
 8006bb4:	080239c8 	.word	0x080239c8
 8006bb8:	080239cc 	.word	0x080239cc
 8006bbc:	080239e0 	.word	0x080239e0
 8006bc0:	08023d04 	.word	0x08023d04
 8006bc4:	08023d08 	.word	0x08023d08
 8006bc8:	080239e8 	.word	0x080239e8
 8006bcc:	080236a4 	.word	0x080236a4
 8006bd0:	08023ad0 	.word	0x08023ad0

08006bd4 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fe fa76 	bl	80050d0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006be4:	4a03      	ldr	r2, [pc, #12]	; (8006bf4 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev+0x20>)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	601a      	str	r2, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4618      	mov	r0, r3
 8006bee:	3708      	adds	r7, #8
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	08026d84 	.word	0x08026d84

08006bf8 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShell10createTestEv>:
 8006bf8:	b590      	push	{r4, r7, lr}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	f240 2257 	movw	r2, #599	; 0x257
 8006c04:	4906      	ldr	r1, [pc, #24]	; (8006c20 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShell10createTestEv+0x28>)
 8006c06:	2004      	movs	r0, #4
 8006c08:	f003 fcb8 	bl	800a57c <_ZnwjPKci>
 8006c0c:	4604      	mov	r4, r0
 8006c0e:	4620      	mov	r0, r4
 8006c10:	f7ff ffe0 	bl	8006bd4 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev>
 8006c14:	4623      	mov	r3, r4
 8006c16:	4618      	mov	r0, r3
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd90      	pop	{r4, r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	080236a4 	.word	0x080236a4

08006c24 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev>:
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f00c f892 	bl	8012d58 <_ZN10UtestShellC1Ev>
 8006c34:	4a03      	ldr	r2, [pc, #12]	; (8006c44 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev+0x20>)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	601a      	str	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3708      	adds	r7, #8
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	08026cd8 	.word	0x08026cd8

08006c48 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv>:
{
 8006c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c4a:	b093      	sub	sp, #76	; 0x4c
 8006c4c:	af04      	add	r7, sp, #16
 8006c4e:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CIPCLOSE);
 8006c50:	f107 0308 	add.w	r3, r7, #8
 8006c54:	494a      	ldr	r1, [pc, #296]	; (8006d80 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x138>)
 8006c56:	4618      	mov	r0, r3
 8006c58:	f006 f853 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8006c5c:	f107 0308 	add.w	r3, r7, #8
 8006c60:	2100      	movs	r1, #0
 8006c62:	4618      	mov	r0, r3
 8006c64:	f004 f926 	bl	800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006c68:	4604      	mov	r4, r0
 8006c6a:	6823      	ldr	r3, [r4, #0]
 8006c6c:	330c      	adds	r3, #12
 8006c6e:	681d      	ldr	r5, [r3, #0]
 8006c70:	f107 0310 	add.w	r3, r7, #16
 8006c74:	4943      	ldr	r1, [pc, #268]	; (8006d84 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x13c>)
 8006c76:	4618      	mov	r0, r3
 8006c78:	f006 f843 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8006c7c:	f107 0310 	add.w	r3, r7, #16
 8006c80:	4619      	mov	r1, r3
 8006c82:	4620      	mov	r0, r4
 8006c84:	47a8      	blx	r5
 8006c86:	4604      	mov	r4, r0
 8006c88:	6823      	ldr	r3, [r4, #0]
 8006c8a:	334c      	adds	r3, #76	; 0x4c
 8006c8c:	681d      	ldr	r5, [r3, #0]
 8006c8e:	f107 0318 	add.w	r3, r7, #24
 8006c92:	493d      	ldr	r1, [pc, #244]	; (8006d88 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x140>)
 8006c94:	4618      	mov	r0, r3
 8006c96:	f006 f834 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8006c9a:	f107 0318 	add.w	r3, r7, #24
 8006c9e:	4a3b      	ldr	r2, [pc, #236]	; (8006d8c <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x144>)
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	47a8      	blx	r5
 8006ca6:	f107 0318 	add.w	r3, r7, #24
 8006caa:	4618      	mov	r0, r3
 8006cac:	f006 fbe1 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8006cb0:	f107 0310 	add.w	r3, r7, #16
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f006 fbdc 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8006cba:	f107 0308 	add.w	r3, r7, #8
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f006 fbd7 	bl	800d472 <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_TCP_Server();
 8006cc4:	f7fc ffe4 	bl	8003c90 <Disconnect_TCP_Server>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if(response != IDLE)
 8006cce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006cd2:	2b05      	cmp	r3, #5
 8006cd4:	d139      	bne.n	8006d4a <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x102>
			break;

		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	637b      	str	r3, [r7, #52]	; 0x34
 8006cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	dcf1      	bgt.n	8006cc4 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x7c>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)AT_RESPONSE_OK[j]);
 8006ce0:	f107 0320 	add.w	r3, r7, #32
 8006ce4:	4926      	ldr	r1, [pc, #152]	; (8006d80 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x138>)
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f006 f80b 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8006cec:	f107 0320 	add.w	r3, r7, #32
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f004 f8de 	bl	800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	6823      	ldr	r3, [r4, #0]
 8006cfc:	330c      	adds	r3, #12
 8006cfe:	681d      	ldr	r5, [r3, #0]
 8006d00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d04:	4922      	ldr	r1, [pc, #136]	; (8006d90 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x148>)
 8006d06:	4618      	mov	r0, r3
 8006d08:	f005 fffb 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8006d0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d10:	4619      	mov	r1, r3
 8006d12:	4620      	mov	r0, r4
 8006d14:	47a8      	blx	r5
 8006d16:	4603      	mov	r3, r0
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	3264      	adds	r2, #100	; 0x64
 8006d1c:	6812      	ldr	r2, [r2, #0]
 8006d1e:	481d      	ldr	r0, [pc, #116]	; (8006d94 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x14c>)
 8006d20:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006d22:	4401      	add	r1, r0
 8006d24:	7809      	ldrb	r1, [r1, #0]
 8006d26:	4618      	mov	r0, r3
 8006d28:	4790      	blx	r2
 8006d2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f006 fb9f 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8006d34:	f107 0320 	add.w	r3, r7, #32
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f006 fb9a 	bl	800d472 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8006d3e:	f7fc fe23 	bl	8003988 <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8006d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d44:	3301      	adds	r3, #1
 8006d46:	637b      	str	r3, [r7, #52]	; 0x34
 8006d48:	e7c7      	b.n	8006cda <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x92>
			break;
 8006d4a:	bf00      	nop
		}

	}

	LONGS_EQUAL(STATUS_OK,response);
 8006d4c:	f00d fbbc 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 8006d50:	4604      	mov	r4, r0
 8006d52:	6823      	ldr	r3, [r4, #0]
 8006d54:	3338      	adds	r3, #56	; 0x38
 8006d56:	681d      	ldr	r5, [r3, #0]
 8006d58:	f897 6033 	ldrb.w	r6, [r7, #51]	; 0x33
 8006d5c:	f00d fbc4 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006d60:	4603      	mov	r3, r0
 8006d62:	9302      	str	r3, [sp, #8]
 8006d64:	f44f 731b 	mov.w	r3, #620	; 0x26c
 8006d68:	9301      	str	r3, [sp, #4]
 8006d6a:	4b0b      	ldr	r3, [pc, #44]	; (8006d98 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x150>)
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	4b0b      	ldr	r3, [pc, #44]	; (8006d9c <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x154>)
 8006d70:	4632      	mov	r2, r6
 8006d72:	2103      	movs	r1, #3
 8006d74:	4620      	mov	r0, r4
 8006d76:	47a8      	blx	r5

}
 8006d78:	bf00      	nop
 8006d7a:	373c      	adds	r7, #60	; 0x3c
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d80:	080239c8 	.word	0x080239c8
 8006d84:	080239cc 	.word	0x080239cc
 8006d88:	080239e0 	.word	0x080239e0
 8006d8c:	0802365c 	.word	0x0802365c
 8006d90:	080239e8 	.word	0x080239e8
 8006d94:	08023a24 	.word	0x08023a24
 8006d98:	080236a4 	.word	0x080236a4
 8006d9c:	08023c2c 	.word	0x08023c2c

08006da0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7fe f990 	bl	80050d0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006db0:	4a03      	ldr	r2, [pc, #12]	; (8006dc0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev+0x20>)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	601a      	str	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4618      	mov	r0, r3
 8006dba:	3708      	adds	r7, #8
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	08026cb8 	.word	0x08026cb8

08006dc4 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShell10createTestEv>:
 8006dc4:	b590      	push	{r4, r7, lr}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	f44f 721c 	mov.w	r2, #624	; 0x270
 8006dd0:	4906      	ldr	r1, [pc, #24]	; (8006dec <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShell10createTestEv+0x28>)
 8006dd2:	2004      	movs	r0, #4
 8006dd4:	f003 fbd2 	bl	800a57c <_ZnwjPKci>
 8006dd8:	4604      	mov	r4, r0
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f7ff ffe0 	bl	8006da0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev>
 8006de0:	4623      	mov	r3, r4
 8006de2:	4618      	mov	r0, r3
 8006de4:	370c      	adds	r7, #12
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd90      	pop	{r4, r7, pc}
 8006dea:	bf00      	nop
 8006dec:	080236a4 	.word	0x080236a4

08006df0 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev>:
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f00b ffac 	bl	8012d58 <_ZN10UtestShellC1Ev>
 8006e00:	4a03      	ldr	r2, [pc, #12]	; (8006e10 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev+0x20>)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3708      	adds	r7, #8
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	08026c0c 	.word	0x08026c0c

08006e14 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv>:
{
 8006e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e16:	b0b3      	sub	sp, #204	; 0xcc
 8006e18:	af04      	add	r7, sp, #16
 8006e1a:	6078      	str	r0, [r7, #4]
	Status response;
	int i = 0;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	char response_arr[2][50] =
 8006e22:	4a83      	ldr	r2, [pc, #524]	; (8007030 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x21c>)
 8006e24:	f107 0308 	add.w	r3, r7, #8
 8006e28:	4611      	mov	r1, r2
 8006e2a:	2264      	movs	r2, #100	; 0x64
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f019 fc3d 	bl	80206ac <memcpy>
	{ ">\r\n",
	  "SEND OK\r\n",
	};

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "AT+CIPSEND=11\r\n"); // AT+CIPSEMD=11
 8006e32:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006e36:	497f      	ldr	r1, [pc, #508]	; (8007034 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x220>)
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f005 ff62 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8006e3e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006e42:	2100      	movs	r1, #0
 8006e44:	4618      	mov	r0, r3
 8006e46:	f004 f835 	bl	800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006e4a:	4604      	mov	r4, r0
 8006e4c:	6823      	ldr	r3, [r4, #0]
 8006e4e:	330c      	adds	r3, #12
 8006e50:	681d      	ldr	r5, [r3, #0]
 8006e52:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006e56:	4978      	ldr	r1, [pc, #480]	; (8007038 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x224>)
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f005 ff52 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8006e5e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006e62:	4619      	mov	r1, r3
 8006e64:	4620      	mov	r0, r4
 8006e66:	47a8      	blx	r5
 8006e68:	4604      	mov	r4, r0
 8006e6a:	6823      	ldr	r3, [r4, #0]
 8006e6c:	334c      	adds	r3, #76	; 0x4c
 8006e6e:	681d      	ldr	r5, [r3, #0]
 8006e70:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006e74:	4971      	ldr	r1, [pc, #452]	; (800703c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x228>)
 8006e76:	4618      	mov	r0, r3
 8006e78:	f005 ff43 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8006e7c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006e80:	4a6f      	ldr	r2, [pc, #444]	; (8007040 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x22c>)
 8006e82:	4619      	mov	r1, r3
 8006e84:	4620      	mov	r0, r4
 8006e86:	47a8      	blx	r5
 8006e88:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f006 faf0 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8006e92:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006e96:	4618      	mov	r0, r3
 8006e98:	f006 faeb 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8006e9c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f006 fae6 	bl	800d472 <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "Hello World");
 8006ea6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006eaa:	4962      	ldr	r1, [pc, #392]	; (8007034 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x220>)
 8006eac:	4618      	mov	r0, r3
 8006eae:	f005 ff28 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8006eb2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f003 fffb 	bl	800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006ebe:	4604      	mov	r4, r0
 8006ec0:	6823      	ldr	r3, [r4, #0]
 8006ec2:	330c      	adds	r3, #12
 8006ec4:	681d      	ldr	r5, [r3, #0]
 8006ec6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006eca:	495b      	ldr	r1, [pc, #364]	; (8007038 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x224>)
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f005 ff18 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8006ed2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	4620      	mov	r0, r4
 8006eda:	47a8      	blx	r5
 8006edc:	4604      	mov	r4, r0
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	334c      	adds	r3, #76	; 0x4c
 8006ee2:	681d      	ldr	r5, [r3, #0]
 8006ee4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006ee8:	4954      	ldr	r1, [pc, #336]	; (800703c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x228>)
 8006eea:	4618      	mov	r0, r3
 8006eec:	f005 ff09 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8006ef0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006ef4:	4a53      	ldr	r2, [pc, #332]	; (8007044 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x230>)
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	4620      	mov	r0, r4
 8006efa:	47a8      	blx	r5
 8006efc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006f00:	4618      	mov	r0, r3
 8006f02:	f006 fab6 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8006f06:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f006 fab1 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8006f10:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006f14:	4618      	mov	r0, r3
 8006f16:	f006 faac 	bl	800d472 <_ZN12SimpleStringD1Ev>
	while(1)
	{
		response = Send_TCP_Message((char*)"Hello World");
 8006f1a:	484a      	ldr	r0, [pc, #296]	; (8007044 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x230>)
 8006f1c:	f7fc fed4 	bl	8003cc8 <Send_TCP_Message>
 8006f20:	4603      	mov	r3, r0
 8006f22:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 8006f26:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006f2a:	2b04      	cmp	r3, #4
 8006f2c:	d065      	beq.n	8006ffa <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x1e6>
 8006f2e:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006f32:	2b03      	cmp	r3, #3
 8006f34:	d061      	beq.n	8006ffa <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x1e6>
 8006f36:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d05d      	beq.n	8006ffa <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x1e6>
		{
			break;
		}

		if(i<2)
 8006f3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	dce9      	bgt.n	8006f1a <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x106>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006f46:	2300      	movs	r3, #0
 8006f48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f4c:	f107 0208 	add.w	r2, r7, #8
 8006f50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f54:	2132      	movs	r1, #50	; 0x32
 8006f56:	fb01 f303 	mul.w	r3, r1, r3
 8006f5a:	4413      	add	r3, r2
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7f9 f96d 	bl	800023c <strlen>
 8006f62:	4603      	mov	r3, r0
 8006f64:	461a      	mov	r2, r3
 8006f66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	da3f      	bge.n	8006fee <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x1da>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006f6e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006f72:	4930      	ldr	r1, [pc, #192]	; (8007034 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x220>)
 8006f74:	4618      	mov	r0, r3
 8006f76:	f005 fec4 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8006f7a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006f7e:	2100      	movs	r1, #0
 8006f80:	4618      	mov	r0, r3
 8006f82:	f003 ff97 	bl	800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006f86:	4604      	mov	r4, r0
 8006f88:	6823      	ldr	r3, [r4, #0]
 8006f8a:	330c      	adds	r3, #12
 8006f8c:	681d      	ldr	r5, [r3, #0]
 8006f8e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006f92:	492d      	ldr	r1, [pc, #180]	; (8007048 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x234>)
 8006f94:	4618      	mov	r0, r3
 8006f96:	f005 feb4 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8006f9a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	47a8      	blx	r5
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	3264      	adds	r2, #100	; 0x64
 8006faa:	6812      	ldr	r2, [r2, #0]
 8006fac:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8006fb0:	2032      	movs	r0, #50	; 0x32
 8006fb2:	fb00 f101 	mul.w	r1, r0, r1
 8006fb6:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8006fba:	4408      	add	r0, r1
 8006fbc:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8006fc0:	4401      	add	r1, r0
 8006fc2:	39b0      	subs	r1, #176	; 0xb0
 8006fc4:	7809      	ldrb	r1, [r1, #0]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	4790      	blx	r2
 8006fca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f006 fa4f 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8006fd4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f006 fa4a 	bl	800d472 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006fde:	f7fc fcd3 	bl	8003988 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006fe2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fec:	e7ae      	b.n	8006f4c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x138>
			}
			i++;
 8006fee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		}

	}
 8006ff8:	e78f      	b.n	8006f1a <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x106>

	LONGS_EQUAL(STATUS_OK,response);
 8006ffa:	f00d fa65 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 8006ffe:	4604      	mov	r4, r0
 8007000:	6823      	ldr	r3, [r4, #0]
 8007002:	3338      	adds	r3, #56	; 0x38
 8007004:	681d      	ldr	r5, [r3, #0]
 8007006:	f897 60af 	ldrb.w	r6, [r7, #175]	; 0xaf
 800700a:	f00d fa6d 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800700e:	4603      	mov	r3, r0
 8007010:	9302      	str	r3, [sp, #8]
 8007012:	f240 2391 	movw	r3, #657	; 0x291
 8007016:	9301      	str	r3, [sp, #4]
 8007018:	4b0c      	ldr	r3, [pc, #48]	; (800704c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x238>)
 800701a:	9300      	str	r3, [sp, #0]
 800701c:	4b0c      	ldr	r3, [pc, #48]	; (8007050 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x23c>)
 800701e:	4632      	mov	r2, r6
 8007020:	2103      	movs	r1, #3
 8007022:	4620      	mov	r0, r4
 8007024:	47a8      	blx	r5

}
 8007026:	bf00      	nop
 8007028:	37bc      	adds	r7, #188	; 0xbc
 800702a:	46bd      	mov	sp, r7
 800702c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800702e:	bf00      	nop
 8007030:	08023d30 	.word	0x08023d30
 8007034:	080239c8 	.word	0x080239c8
 8007038:	080239cc 	.word	0x080239cc
 800703c:	080239e0 	.word	0x080239e0
 8007040:	08023d20 	.word	0x08023d20
 8007044:	080238d8 	.word	0x080238d8
 8007048:	080239e8 	.word	0x080239e8
 800704c:	080236a4 	.word	0x080236a4
 8007050:	08023c2c 	.word	0x08023c2c

08007054 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4618      	mov	r0, r3
 8007060:	f7fe f836 	bl	80050d0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8007064:	4a03      	ldr	r2, [pc, #12]	; (8007074 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev+0x20>)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4618      	mov	r0, r3
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	08026bec 	.word	0x08026bec

08007078 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShell10createTestEv>:
 8007078:	b590      	push	{r4, r7, lr}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	f240 2295 	movw	r2, #661	; 0x295
 8007084:	4906      	ldr	r1, [pc, #24]	; (80070a0 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShell10createTestEv+0x28>)
 8007086:	2004      	movs	r0, #4
 8007088:	f003 fa78 	bl	800a57c <_ZnwjPKci>
 800708c:	4604      	mov	r4, r0
 800708e:	4620      	mov	r0, r4
 8007090:	f7ff ffe0 	bl	8007054 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev>
 8007094:	4623      	mov	r3, r4
 8007096:	4618      	mov	r0, r3
 8007098:	370c      	adds	r7, #12
 800709a:	46bd      	mov	sp, r7
 800709c:	bd90      	pop	{r4, r7, pc}
 800709e:	bf00      	nop
 80070a0:	080236a4 	.word	0x080236a4

080070a4 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev>:
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f00b fe52 	bl	8012d58 <_ZN10UtestShellC1Ev>
 80070b4:	4a03      	ldr	r2, [pc, #12]	; (80070c4 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev+0x20>)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	601a      	str	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4618      	mov	r0, r3
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	08026b40 	.word	0x08026b40

080070c8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv>:
{
 80070c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070ca:	b0a3      	sub	sp, #140	; 0x8c
 80070cc:	af04      	add	r7, sp, #16
 80070ce:	6078      	str	r0, [r7, #4]
	char response[30] = "+IPD,11:Hello World";		// an example data that ESP received from server
 80070d0:	4b44      	ldr	r3, [pc, #272]	; (80071e4 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x11c>)
 80070d2:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80070d6:	461d      	mov	r5, r3
 80070d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070dc:	682b      	ldr	r3, [r5, #0]
 80070de:	6023      	str	r3, [r4, #0]
 80070e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80070e4:	2200      	movs	r2, #0
 80070e6:	601a      	str	r2, [r3, #0]
 80070e8:	605a      	str	r2, [r3, #4]
 80070ea:	811a      	strh	r2, [r3, #8]

	Status response_state = IDLE;
 80070ec:	2305      	movs	r3, #5
 80070ee:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	char received_message[50];

	for(int i=0;i<(int)strlen(response);i++)
 80070f2:	2300      	movs	r3, #0
 80070f4:	677b      	str	r3, [r7, #116]	; 0x74
 80070f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7f9 f89e 	bl	800023c <strlen>
 8007100:	4603      	mov	r3, r0
 8007102:	461a      	mov	r2, r3
 8007104:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007106:	4293      	cmp	r3, r2
 8007108:	da35      	bge.n	8007176 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0xae>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 800710a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800710e:	4936      	ldr	r1, [pc, #216]	; (80071e8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x120>)
 8007110:	4618      	mov	r0, r3
 8007112:	f005 fdf6 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8007116:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800711a:	2100      	movs	r1, #0
 800711c:	4618      	mov	r0, r3
 800711e:	f003 fec9 	bl	800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8007122:	4604      	mov	r4, r0
 8007124:	6823      	ldr	r3, [r4, #0]
 8007126:	330c      	adds	r3, #12
 8007128:	681d      	ldr	r5, [r3, #0]
 800712a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800712e:	492f      	ldr	r1, [pc, #188]	; (80071ec <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x124>)
 8007130:	4618      	mov	r0, r3
 8007132:	f005 fde6 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8007136:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800713a:	4619      	mov	r1, r3
 800713c:	4620      	mov	r0, r4
 800713e:	47a8      	blx	r5
 8007140:	4603      	mov	r3, r0
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	3264      	adds	r2, #100	; 0x64
 8007146:	6812      	ldr	r2, [r2, #0]
 8007148:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800714c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800714e:	4401      	add	r1, r0
 8007150:	7809      	ldrb	r1, [r1, #0]
 8007152:	4618      	mov	r0, r3
 8007154:	4790      	blx	r2
 8007156:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800715a:	4618      	mov	r0, r3
 800715c:	f006 f989 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8007160:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007164:	4618      	mov	r0, r3
 8007166:	f006 f984 	bl	800d472 <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 800716a:	f7fc fc0d 	bl	8003988 <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 800716e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007170:	3301      	adds	r3, #1
 8007172:	677b      	str	r3, [r7, #116]	; 0x74
 8007174:	e7bf      	b.n	80070f6 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x2e>
	}

	response_state = Read_TCP_Message(received_message);
 8007176:	f107 030c 	add.w	r3, r7, #12
 800717a:	4618      	mov	r0, r3
 800717c:	f7fc fddc 	bl	8003d38 <Read_TCP_Message>
 8007180:	4603      	mov	r3, r0
 8007182:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	LONGS_EQUAL(STATUS_OK,response_state);
 8007186:	f00d f99f 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 800718a:	4604      	mov	r4, r0
 800718c:	6823      	ldr	r3, [r4, #0]
 800718e:	3338      	adds	r3, #56	; 0x38
 8007190:	681d      	ldr	r5, [r3, #0]
 8007192:	f897 6073 	ldrb.w	r6, [r7, #115]	; 0x73
 8007196:	f00d f9a7 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800719a:	4603      	mov	r3, r0
 800719c:	9302      	str	r3, [sp, #8]
 800719e:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 80071a2:	9301      	str	r3, [sp, #4]
 80071a4:	4b12      	ldr	r3, [pc, #72]	; (80071f0 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x128>)
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	4b12      	ldr	r3, [pc, #72]	; (80071f4 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x12c>)
 80071aa:	4632      	mov	r2, r6
 80071ac:	2103      	movs	r1, #3
 80071ae:	4620      	mov	r0, r4
 80071b0:	47a8      	blx	r5

	STRCMP_EQUAL("Hello World",received_message);
 80071b2:	f00d f989 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 80071b6:	4604      	mov	r4, r0
 80071b8:	6823      	ldr	r3, [r4, #0]
 80071ba:	3324      	adds	r3, #36	; 0x24
 80071bc:	681d      	ldr	r5, [r3, #0]
 80071be:	f00d f993 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80071c2:	4603      	mov	r3, r0
 80071c4:	f107 020c 	add.w	r2, r7, #12
 80071c8:	9302      	str	r3, [sp, #8]
 80071ca:	f240 23a6 	movw	r3, #678	; 0x2a6
 80071ce:	9301      	str	r3, [sp, #4]
 80071d0:	4b07      	ldr	r3, [pc, #28]	; (80071f0 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x128>)
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	2300      	movs	r3, #0
 80071d6:	4908      	ldr	r1, [pc, #32]	; (80071f8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x130>)
 80071d8:	4620      	mov	r0, r4
 80071da:	47a8      	blx	r5

}
 80071dc:	bf00      	nop
 80071de:	377c      	adds	r7, #124	; 0x7c
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071e4:	08023dc4 	.word	0x08023dc4
 80071e8:	080239c8 	.word	0x080239c8
 80071ec:	080239e8 	.word	0x080239e8
 80071f0:	080236a4 	.word	0x080236a4
 80071f4:	08023d94 	.word	0x08023d94
 80071f8:	080238d8 	.word	0x080238d8

080071fc <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4618      	mov	r0, r3
 8007208:	f7fd ff62 	bl	80050d0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800720c:	4a03      	ldr	r2, [pc, #12]	; (800721c <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev+0x20>)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	601a      	str	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4618      	mov	r0, r3
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	08026b20 	.word	0x08026b20

08007220 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShell10createTestEv>:
 8007220:	b590      	push	{r4, r7, lr}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	f240 22aa 	movw	r2, #682	; 0x2aa
 800722c:	4906      	ldr	r1, [pc, #24]	; (8007248 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShell10createTestEv+0x28>)
 800722e:	2004      	movs	r0, #4
 8007230:	f003 f9a4 	bl	800a57c <_ZnwjPKci>
 8007234:	4604      	mov	r4, r0
 8007236:	4620      	mov	r0, r4
 8007238:	f7ff ffe0 	bl	80071fc <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev>
 800723c:	4623      	mov	r3, r4
 800723e:	4618      	mov	r0, r3
 8007240:	370c      	adds	r7, #12
 8007242:	46bd      	mov	sp, r7
 8007244:	bd90      	pop	{r4, r7, pc}
 8007246:	bf00      	nop
 8007248:	080236a4 	.word	0x080236a4

0800724c <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev>:
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4618      	mov	r0, r3
 8007258:	f00b fd7e 	bl	8012d58 <_ZN10UtestShellC1Ev>
 800725c:	4a03      	ldr	r2, [pc, #12]	; (800726c <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev+0x20>)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	601a      	str	r2, [r3, #0]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4618      	mov	r0, r3
 8007266:	3708      	adds	r7, #8
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	08026a74 	.word	0x08026a74

08007270 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv>:
{
 8007270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007272:	b095      	sub	sp, #84	; 0x54
 8007274:	af04      	add	r7, sp, #16
 8007276:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 8007278:	2305      	movs	r3, #5
 800727a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	char received_message[50];
	while(1)
	{
		response_state = Wait_TCP_Message(received_message, 1000);
 800727e:	f107 030c 	add.w	r3, r7, #12
 8007282:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007286:	4618      	mov	r0, r3
 8007288:	f7fc fdc4 	bl	8003e14 <Wait_TCP_Message>
 800728c:	4603      	mov	r3, r0
 800728e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if(response_state != IDLE)
 8007292:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007296:	2b05      	cmp	r3, #5
 8007298:	d100      	bne.n	800729c <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x2c>
		response_state = Wait_TCP_Message(received_message, 1000);
 800729a:	e7f0      	b.n	800727e <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0xe>
			break;
 800729c:	bf00      	nop
	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 800729e:	f00d f913 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 80072a2:	4604      	mov	r4, r0
 80072a4:	6823      	ldr	r3, [r4, #0]
 80072a6:	3338      	adds	r3, #56	; 0x38
 80072a8:	681d      	ldr	r5, [r3, #0]
 80072aa:	f897 603f 	ldrb.w	r6, [r7, #63]	; 0x3f
 80072ae:	f00d f91b 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80072b2:	4603      	mov	r3, r0
 80072b4:	9302      	str	r3, [sp, #8]
 80072b6:	f240 23b7 	movw	r3, #695	; 0x2b7
 80072ba:	9301      	str	r3, [sp, #4]
 80072bc:	4b05      	ldr	r3, [pc, #20]	; (80072d4 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x64>)
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	4b05      	ldr	r3, [pc, #20]	; (80072d8 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x68>)
 80072c2:	4632      	mov	r2, r6
 80072c4:	2102      	movs	r1, #2
 80072c6:	4620      	mov	r0, r4
 80072c8:	47a8      	blx	r5

}
 80072ca:	bf00      	nop
 80072cc:	3744      	adds	r7, #68	; 0x44
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072d2:	bf00      	nop
 80072d4:	080236a4 	.word	0x080236a4
 80072d8:	08023a34 	.word	0x08023a34

080072dc <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7fd fef2 	bl	80050d0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80072ec:	4a03      	ldr	r2, [pc, #12]	; (80072fc <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev+0x20>)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	601a      	str	r2, [r3, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4618      	mov	r0, r3
 80072f6:	3708      	adds	r7, #8
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	08026a54 	.word	0x08026a54

08007300 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShell10createTestEv>:
 8007300:	b590      	push	{r4, r7, lr}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	f240 22bb 	movw	r2, #699	; 0x2bb
 800730c:	4906      	ldr	r1, [pc, #24]	; (8007328 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShell10createTestEv+0x28>)
 800730e:	2004      	movs	r0, #4
 8007310:	f003 f934 	bl	800a57c <_ZnwjPKci>
 8007314:	4604      	mov	r4, r0
 8007316:	4620      	mov	r0, r4
 8007318:	f7ff ffe0 	bl	80072dc <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev>
 800731c:	4623      	mov	r3, r4
 800731e:	4618      	mov	r0, r3
 8007320:	370c      	adds	r7, #12
 8007322:	46bd      	mov	sp, r7
 8007324:	bd90      	pop	{r4, r7, pc}
 8007326:	bf00      	nop
 8007328:	080236a4 	.word	0x080236a4

0800732c <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev>:
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4618      	mov	r0, r3
 8007338:	f00b fd0e 	bl	8012d58 <_ZN10UtestShellC1Ev>
 800733c:	4a03      	ldr	r2, [pc, #12]	; (800734c <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev+0x20>)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	601a      	str	r2, [r3, #0]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4618      	mov	r0, r3
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	080269a8 	.word	0x080269a8

08007350 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv>:
{
 8007350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007352:	b0a3      	sub	sp, #140	; 0x8c
 8007354:	af04      	add	r7, sp, #16
 8007356:	6078      	str	r0, [r7, #4]
	char response[30] = "+IPD,13:PUMP_MOTOR=ON";		// an example string data that ESP received from server
 8007358:	4b49      	ldr	r3, [pc, #292]	; (8007480 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x130>)
 800735a:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800735e:	461d      	mov	r5, r3
 8007360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007364:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007368:	6020      	str	r0, [r4, #0]
 800736a:	3404      	adds	r4, #4
 800736c:	8021      	strh	r1, [r4, #0]
 800736e:	f107 0356 	add.w	r3, r7, #86	; 0x56
 8007372:	2200      	movs	r2, #0
 8007374:	601a      	str	r2, [r3, #0]
 8007376:	605a      	str	r2, [r3, #4]

	Status response_state = IDLE;
 8007378:	2305      	movs	r3, #5
 800737a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	char received_message[50];

	while(1)
	{
		response_state = Wait_TCP_Message(received_message, 1000);
 800737e:	f107 030c 	add.w	r3, r7, #12
 8007382:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007386:	4618      	mov	r0, r3
 8007388:	f7fc fd44 	bl	8003e14 <Wait_TCP_Message>
 800738c:	4603      	mov	r3, r0
 800738e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

		if(response_state != IDLE)
 8007392:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8007396:	2b05      	cmp	r3, #5
 8007398:	d141      	bne.n	800741e <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0xce>
			break;

		for(int i=0;i<(int)strlen(response);i++)
 800739a:	2300      	movs	r3, #0
 800739c:	677b      	str	r3, [r7, #116]	; 0x74
 800739e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7f8 ff4a 	bl	800023c <strlen>
 80073a8:	4603      	mov	r3, r0
 80073aa:	461a      	mov	r2, r3
 80073ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073ae:	4293      	cmp	r3, r2
 80073b0:	dae5      	bge.n	800737e <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x2e>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 80073b2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80073b6:	4933      	ldr	r1, [pc, #204]	; (8007484 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x134>)
 80073b8:	4618      	mov	r0, r3
 80073ba:	f005 fca2 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80073be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80073c2:	2100      	movs	r1, #0
 80073c4:	4618      	mov	r0, r3
 80073c6:	f003 fd75 	bl	800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80073ca:	4604      	mov	r4, r0
 80073cc:	6823      	ldr	r3, [r4, #0]
 80073ce:	330c      	adds	r3, #12
 80073d0:	681d      	ldr	r5, [r3, #0]
 80073d2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80073d6:	492c      	ldr	r1, [pc, #176]	; (8007488 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x138>)
 80073d8:	4618      	mov	r0, r3
 80073da:	f005 fc92 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80073de:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80073e2:	4619      	mov	r1, r3
 80073e4:	4620      	mov	r0, r4
 80073e6:	47a8      	blx	r5
 80073e8:	4603      	mov	r3, r0
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	3264      	adds	r2, #100	; 0x64
 80073ee:	6812      	ldr	r2, [r2, #0]
 80073f0:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80073f4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80073f6:	4401      	add	r1, r0
 80073f8:	7809      	ldrb	r1, [r1, #0]
 80073fa:	4618      	mov	r0, r3
 80073fc:	4790      	blx	r2
 80073fe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007402:	4618      	mov	r0, r3
 8007404:	f006 f835 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8007408:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800740c:	4618      	mov	r0, r3
 800740e:	f006 f830 	bl	800d472 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8007412:	f7fc fab9 	bl	8003988 <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 8007416:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007418:	3301      	adds	r3, #1
 800741a:	677b      	str	r3, [r7, #116]	; 0x74
 800741c:	e7bf      	b.n	800739e <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x4e>
			break;
 800741e:	bf00      	nop
		}
	}

	LONGS_EQUAL(STATUS_OK,response_state);
 8007420:	f00d f852 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 8007424:	4604      	mov	r4, r0
 8007426:	6823      	ldr	r3, [r4, #0]
 8007428:	3338      	adds	r3, #56	; 0x38
 800742a:	681d      	ldr	r5, [r3, #0]
 800742c:	f897 6073 	ldrb.w	r6, [r7, #115]	; 0x73
 8007430:	f00d f85a 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007434:	4603      	mov	r3, r0
 8007436:	9302      	str	r3, [sp, #8]
 8007438:	f240 23d1 	movw	r3, #721	; 0x2d1
 800743c:	9301      	str	r3, [sp, #4]
 800743e:	4b13      	ldr	r3, [pc, #76]	; (800748c <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x13c>)
 8007440:	9300      	str	r3, [sp, #0]
 8007442:	4b13      	ldr	r3, [pc, #76]	; (8007490 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x140>)
 8007444:	4632      	mov	r2, r6
 8007446:	2103      	movs	r1, #3
 8007448:	4620      	mov	r0, r4
 800744a:	47a8      	blx	r5
	STRCMP_EQUAL("PUMP_MOTOR=ON",received_message);
 800744c:	f00d f83c 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 8007450:	4604      	mov	r4, r0
 8007452:	6823      	ldr	r3, [r4, #0]
 8007454:	3324      	adds	r3, #36	; 0x24
 8007456:	681d      	ldr	r5, [r3, #0]
 8007458:	f00d f846 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800745c:	4603      	mov	r3, r0
 800745e:	f107 020c 	add.w	r2, r7, #12
 8007462:	9302      	str	r3, [sp, #8]
 8007464:	f240 23d2 	movw	r3, #722	; 0x2d2
 8007468:	9301      	str	r3, [sp, #4]
 800746a:	4b08      	ldr	r3, [pc, #32]	; (800748c <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x13c>)
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	2300      	movs	r3, #0
 8007470:	4908      	ldr	r1, [pc, #32]	; (8007494 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x144>)
 8007472:	4620      	mov	r0, r4
 8007474:	47a8      	blx	r5

}
 8007476:	bf00      	nop
 8007478:	377c      	adds	r7, #124	; 0x7c
 800747a:	46bd      	mov	sp, r7
 800747c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800747e:	bf00      	nop
 8007480:	08023df4 	.word	0x08023df4
 8007484:	080239c8 	.word	0x080239c8
 8007488:	080239e8 	.word	0x080239e8
 800748c:	080236a4 	.word	0x080236a4
 8007490:	08023d94 	.word	0x08023d94
 8007494:	08023de4 	.word	0x08023de4

08007498 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	4a05      	ldr	r2, [pc, #20]	; (80074b8 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev+0x20>)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	601a      	str	r2, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4618      	mov	r0, r3
 80074aa:	f00b fca9 	bl	8012e00 <_ZN10UtestShellD1Ev>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4618      	mov	r0, r3
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	080269a8 	.word	0x080269a8

080074bc <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD0Ev>:
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f7ff ffe7 	bl	8007498 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>
 80074ca:	211c      	movs	r1, #28
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f003 f869 	bl	800a5a4 <_ZdlPvj>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4618      	mov	r0, r3
 80074d6:	3708      	adds	r7, #8
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev>:
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	4a05      	ldr	r2, [pc, #20]	; (80074fc <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev+0x20>)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	601a      	str	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7fd fe01 	bl	80050f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4618      	mov	r0, r3
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	08026a54 	.word	0x08026a54

08007500 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD0Ev>:
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f7ff ffe7 	bl	80074dc <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev>
 800750e:	2104      	movs	r1, #4
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f003 f847 	bl	800a5a4 <_ZdlPvj>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4618      	mov	r0, r3
 800751a:	3708      	adds	r7, #8
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	4a05      	ldr	r2, [pc, #20]	; (8007540 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev+0x20>)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	601a      	str	r2, [r3, #0]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4618      	mov	r0, r3
 8007532:	f00b fc65 	bl	8012e00 <_ZN10UtestShellD1Ev>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4618      	mov	r0, r3
 800753a:	3708      	adds	r7, #8
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}
 8007540:	08026a74 	.word	0x08026a74

08007544 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD0Ev>:
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f7ff ffe7 	bl	8007520 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>
 8007552:	211c      	movs	r1, #28
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f003 f825 	bl	800a5a4 <_ZdlPvj>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4618      	mov	r0, r3
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev>:
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	4a05      	ldr	r2, [pc, #20]	; (8007584 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev+0x20>)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	601a      	str	r2, [r3, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4618      	mov	r0, r3
 8007576:	f7fd fdbd 	bl	80050f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4618      	mov	r0, r3
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	08026b20 	.word	0x08026b20

08007588 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD0Ev>:
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f7ff ffe7 	bl	8007564 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev>
 8007596:	2104      	movs	r1, #4
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f003 f803 	bl	800a5a4 <_ZdlPvj>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4618      	mov	r0, r3
 80075a2:	3708      	adds	r7, #8
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	4a05      	ldr	r2, [pc, #20]	; (80075c8 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev+0x20>)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	601a      	str	r2, [r3, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4618      	mov	r0, r3
 80075ba:	f00b fc21 	bl	8012e00 <_ZN10UtestShellD1Ev>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4618      	mov	r0, r3
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	08026b40 	.word	0x08026b40

080075cc <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD0Ev>:
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f7ff ffe7 	bl	80075a8 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>
 80075da:	211c      	movs	r1, #28
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f002 ffe1 	bl	800a5a4 <_ZdlPvj>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4618      	mov	r0, r3
 80075e6:	3708      	adds	r7, #8
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev>:
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	4a05      	ldr	r2, [pc, #20]	; (800760c <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev+0x20>)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	601a      	str	r2, [r3, #0]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7fd fd79 	bl	80050f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4618      	mov	r0, r3
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	08026bec 	.word	0x08026bec

08007610 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD0Ev>:
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f7ff ffe7 	bl	80075ec <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev>
 800761e:	2104      	movs	r1, #4
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f002 ffbf 	bl	800a5a4 <_ZdlPvj>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4618      	mov	r0, r3
 800762a:	3708      	adds	r7, #8
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	4a05      	ldr	r2, [pc, #20]	; (8007650 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev+0x20>)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	601a      	str	r2, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4618      	mov	r0, r3
 8007642:	f00b fbdd 	bl	8012e00 <_ZN10UtestShellD1Ev>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4618      	mov	r0, r3
 800764a:	3708      	adds	r7, #8
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	08026c0c 	.word	0x08026c0c

08007654 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD0Ev>:
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f7ff ffe7 	bl	8007630 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>
 8007662:	211c      	movs	r1, #28
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f002 ff9d 	bl	800a5a4 <_ZdlPvj>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4618      	mov	r0, r3
 800766e:	3708      	adds	r7, #8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev>:
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	4a05      	ldr	r2, [pc, #20]	; (8007694 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev+0x20>)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	601a      	str	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4618      	mov	r0, r3
 8007686:	f7fd fd35 	bl	80050f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4618      	mov	r0, r3
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	08026cb8 	.word	0x08026cb8

08007698 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD0Ev>:
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f7ff ffe7 	bl	8007674 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev>
 80076a6:	2104      	movs	r1, #4
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f002 ff7b 	bl	800a5a4 <_ZdlPvj>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4618      	mov	r0, r3
 80076b2:	3708      	adds	r7, #8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	4a05      	ldr	r2, [pc, #20]	; (80076d8 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev+0x20>)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	601a      	str	r2, [r3, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4618      	mov	r0, r3
 80076ca:	f00b fb99 	bl	8012e00 <_ZN10UtestShellD1Ev>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4618      	mov	r0, r3
 80076d2:	3708      	adds	r7, #8
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	08026cd8 	.word	0x08026cd8

080076dc <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD0Ev>:
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f7ff ffe7 	bl	80076b8 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>
 80076ea:	211c      	movs	r1, #28
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f002 ff59 	bl	800a5a4 <_ZdlPvj>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4618      	mov	r0, r3
 80076f6:	3708      	adds	r7, #8
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev>:
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	4a05      	ldr	r2, [pc, #20]	; (800771c <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev+0x20>)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	601a      	str	r2, [r3, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4618      	mov	r0, r3
 800770e:	f7fd fcf1 	bl	80050f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4618      	mov	r0, r3
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	08026d84 	.word	0x08026d84

08007720 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD0Ev>:
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f7ff ffe7 	bl	80076fc <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev>
 800772e:	2104      	movs	r1, #4
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f002 ff37 	bl	800a5a4 <_ZdlPvj>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4618      	mov	r0, r3
 800773a:	3708      	adds	r7, #8
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	4a05      	ldr	r2, [pc, #20]	; (8007760 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev+0x20>)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	601a      	str	r2, [r3, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4618      	mov	r0, r3
 8007752:	f00b fb55 	bl	8012e00 <_ZN10UtestShellD1Ev>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4618      	mov	r0, r3
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	08026da4 	.word	0x08026da4

08007764 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD0Ev>:
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f7ff ffe7 	bl	8007740 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>
 8007772:	211c      	movs	r1, #28
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f002 ff15 	bl	800a5a4 <_ZdlPvj>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4618      	mov	r0, r3
 800777e:	3708      	adds	r7, #8
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev>:
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	4a05      	ldr	r2, [pc, #20]	; (80077a4 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev+0x20>)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	601a      	str	r2, [r3, #0]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4618      	mov	r0, r3
 8007796:	f7fd fcad 	bl	80050f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4618      	mov	r0, r3
 800779e:	3708      	adds	r7, #8
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	08026e50 	.word	0x08026e50

080077a8 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD0Ev>:
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f7ff ffe7 	bl	8007784 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev>
 80077b6:	2104      	movs	r1, #4
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f002 fef3 	bl	800a5a4 <_ZdlPvj>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4618      	mov	r0, r3
 80077c2:	3708      	adds	r7, #8
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	4a05      	ldr	r2, [pc, #20]	; (80077e8 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev+0x20>)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	601a      	str	r2, [r3, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4618      	mov	r0, r3
 80077da:	f00b fb11 	bl	8012e00 <_ZN10UtestShellD1Ev>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4618      	mov	r0, r3
 80077e2:	3708      	adds	r7, #8
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	08026e70 	.word	0x08026e70

080077ec <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD0Ev>:
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f7ff ffe7 	bl	80077c8 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>
 80077fa:	211c      	movs	r1, #28
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f002 fed1 	bl	800a5a4 <_ZdlPvj>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4618      	mov	r0, r3
 8007806:	3708      	adds	r7, #8
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev>:
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	4a05      	ldr	r2, [pc, #20]	; (800782c <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev+0x20>)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	601a      	str	r2, [r3, #0]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4618      	mov	r0, r3
 800781e:	f7fd fc69 	bl	80050f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4618      	mov	r0, r3
 8007826:	3708      	adds	r7, #8
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	08026f1c 	.word	0x08026f1c

08007830 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD0Ev>:
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f7ff ffe7 	bl	800780c <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev>
 800783e:	2104      	movs	r1, #4
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f002 feaf 	bl	800a5a4 <_ZdlPvj>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4618      	mov	r0, r3
 800784a:	3708      	adds	r7, #8
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	4a05      	ldr	r2, [pc, #20]	; (8007870 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev+0x20>)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	601a      	str	r2, [r3, #0]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4618      	mov	r0, r3
 8007862:	f00b facd 	bl	8012e00 <_ZN10UtestShellD1Ev>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4618      	mov	r0, r3
 800786a:	3708      	adds	r7, #8
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	08026f3c 	.word	0x08026f3c

08007874 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD0Ev>:
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f7ff ffe7 	bl	8007850 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>
 8007882:	211c      	movs	r1, #28
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f002 fe8d 	bl	800a5a4 <_ZdlPvj>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4618      	mov	r0, r3
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev>:
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	4a05      	ldr	r2, [pc, #20]	; (80078b4 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev+0x20>)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	601a      	str	r2, [r3, #0]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7fd fc25 	bl	80050f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4618      	mov	r0, r3
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	08026fe8 	.word	0x08026fe8

080078b8 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD0Ev>:
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f7ff ffe7 	bl	8007894 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev>
 80078c6:	2104      	movs	r1, #4
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f002 fe6b 	bl	800a5a4 <_ZdlPvj>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4618      	mov	r0, r3
 80078d2:	3708      	adds	r7, #8
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Command_Process_Test)
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	4a05      	ldr	r2, [pc, #20]	; (80078f8 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev+0x20>)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	601a      	str	r2, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4618      	mov	r0, r3
 80078ea:	f00b fa89 	bl	8012e00 <_ZN10UtestShellD1Ev>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4618      	mov	r0, r3
 80078f2:	3708      	adds	r7, #8
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	08027008 	.word	0x08027008

080078fc <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD0Ev>:
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f7ff ffe7 	bl	80078d8 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>
 800790a:	211c      	movs	r1, #28
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f002 fe49 	bl	800a5a4 <_ZdlPvj>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4618      	mov	r0, r3
 8007916:	3708      	adds	r7, #8
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev>:
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	4a05      	ldr	r2, [pc, #20]	; (800793c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev+0x20>)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	601a      	str	r2, [r3, #0]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4618      	mov	r0, r3
 800792e:	f7fd fbe1 	bl	80050f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4618      	mov	r0, r3
 8007936:	3708      	adds	r7, #8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	080270b4 	.word	0x080270b4

08007940 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD0Ev>:
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f7ff ffe7 	bl	800791c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev>
 800794e:	2104      	movs	r1, #4
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f002 fe27 	bl	800a5a4 <_ZdlPvj>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4618      	mov	r0, r3
 800795a:	3708      	adds	r7, #8
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	4a05      	ldr	r2, [pc, #20]	; (8007980 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev+0x20>)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	601a      	str	r2, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4618      	mov	r0, r3
 8007972:	f00b fa45 	bl	8012e00 <_ZN10UtestShellD1Ev>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4618      	mov	r0, r3
 800797a:	3708      	adds	r7, #8
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	080270d4 	.word	0x080270d4

08007984 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD0Ev>:
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f7ff ffe7 	bl	8007960 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
 8007992:	211c      	movs	r1, #28
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f002 fe05 	bl	800a5a4 <_ZdlPvj>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4618      	mov	r0, r3
 800799e:	3708      	adds	r7, #8
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>:
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	4a05      	ldr	r2, [pc, #20]	; (80079c4 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev+0x20>)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	601a      	str	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7fd fb9d 	bl	80050f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4618      	mov	r0, r3
 80079be:	3708      	adds	r7, #8
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	08027180 	.word	0x08027180

080079c8 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD0Ev>:
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f7ff ffe7 	bl	80079a4 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>
 80079d6:	2104      	movs	r1, #4
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f002 fde3 	bl	800a5a4 <_ZdlPvj>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4618      	mov	r0, r3
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	4a05      	ldr	r2, [pc, #20]	; (8007a08 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	601a      	str	r2, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f00b fa01 	bl	8012e00 <_ZN10UtestShellD1Ev>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4618      	mov	r0, r3
 8007a02:	3708      	adds	r7, #8
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	080271a0 	.word	0x080271a0

08007a0c <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD0Ev>:
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f7ff ffe7 	bl	80079e8 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
 8007a1a:	211c      	movs	r1, #28
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f002 fdc1 	bl	800a5a4 <_ZdlPvj>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4618      	mov	r0, r3
 8007a26:	3708      	adds	r7, #8
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>:
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	4a05      	ldr	r2, [pc, #20]	; (8007a4c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	601a      	str	r2, [r3, #0]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f7fd fb59 	bl	80050f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4618      	mov	r0, r3
 8007a46:	3708      	adds	r7, #8
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	0802724c 	.word	0x0802724c

08007a50 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD0Ev>:
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f7ff ffe7 	bl	8007a2c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>
 8007a5e:	2104      	movs	r1, #4
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f002 fd9f 	bl	800a5a4 <_ZdlPvj>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3708      	adds	r7, #8
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	4a05      	ldr	r2, [pc, #20]	; (8007a90 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev+0x20>)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	601a      	str	r2, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4618      	mov	r0, r3
 8007a82:	f00b f9bd 	bl	8012e00 <_ZN10UtestShellD1Ev>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3708      	adds	r7, #8
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	0802726c 	.word	0x0802726c

08007a94 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD0Ev>:
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7ff ffe7 	bl	8007a70 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
 8007aa2:	211c      	movs	r1, #28
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f002 fd7d 	bl	800a5a4 <_ZdlPvj>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4618      	mov	r0, r3
 8007aae:	3708      	adds	r7, #8
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>:
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	4a05      	ldr	r2, [pc, #20]	; (8007ad4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev+0x20>)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	601a      	str	r2, [r3, #0]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7fd fb15 	bl	80050f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4618      	mov	r0, r3
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	08027318 	.word	0x08027318

08007ad8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD0Ev>:
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f7ff ffe7 	bl	8007ab4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>
 8007ae6:	2104      	movs	r1, #4
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f002 fd5b 	bl	800a5a4 <_ZdlPvj>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4618      	mov	r0, r3
 8007af2:	3708      	adds	r7, #8
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	4a05      	ldr	r2, [pc, #20]	; (8007b18 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev+0x20>)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	601a      	str	r2, [r3, #0]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f00b f979 	bl	8012e00 <_ZN10UtestShellD1Ev>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4618      	mov	r0, r3
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	08027338 	.word	0x08027338

08007b1c <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD0Ev>:
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f7ff ffe7 	bl	8007af8 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
 8007b2a:	211c      	movs	r1, #28
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f002 fd39 	bl	800a5a4 <_ZdlPvj>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4618      	mov	r0, r3
 8007b36:	3708      	adds	r7, #8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>:
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	4a05      	ldr	r2, [pc, #20]	; (8007b5c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev+0x20>)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	601a      	str	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7fd fad1 	bl	80050f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4618      	mov	r0, r3
 8007b56:	3708      	adds	r7, #8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	080273e4 	.word	0x080273e4

08007b60 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD0Ev>:
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f7ff ffe7 	bl	8007b3c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>
 8007b6e:	2104      	movs	r1, #4
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f002 fd17 	bl	800a5a4 <_ZdlPvj>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	4a05      	ldr	r2, [pc, #20]	; (8007ba0 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	601a      	str	r2, [r3, #0]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4618      	mov	r0, r3
 8007b92:	f00b f935 	bl	8012e00 <_ZN10UtestShellD1Ev>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3708      	adds	r7, #8
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	08027404 	.word	0x08027404

08007ba4 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD0Ev>:
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f7ff ffe7 	bl	8007b80 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
 8007bb2:	211c      	movs	r1, #28
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f002 fcf5 	bl	800a5a4 <_ZdlPvj>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>:
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	4a05      	ldr	r2, [pc, #20]	; (8007be4 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	601a      	str	r2, [r3, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7fd fa8d 	bl	80050f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	080274b0 	.word	0x080274b0

08007be8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD0Ev>:
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f7ff ffe7 	bl	8007bc4 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>
 8007bf6:	2104      	movs	r1, #4
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f002 fcd3 	bl	800a5a4 <_ZdlPvj>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4618      	mov	r0, r3
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	4a05      	ldr	r2, [pc, #20]	; (8007c28 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev+0x20>)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	601a      	str	r2, [r3, #0]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f00b f8f1 	bl	8012e00 <_ZN10UtestShellD1Ev>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4618      	mov	r0, r3
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	080274d0 	.word	0x080274d0

08007c2c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD0Ev>:
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f7ff ffe7 	bl	8007c08 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
 8007c3a:	211c      	movs	r1, #28
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f002 fcb1 	bl	800a5a4 <_ZdlPvj>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4618      	mov	r0, r3
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>:
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	4a05      	ldr	r2, [pc, #20]	; (8007c6c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev+0x20>)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	601a      	str	r2, [r3, #0]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7fd fa49 	bl	80050f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4618      	mov	r0, r3
 8007c66:	3708      	adds	r7, #8
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	0802757c 	.word	0x0802757c

08007c70 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD0Ev>:
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f7ff ffe7 	bl	8007c4c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>
 8007c7e:	2104      	movs	r1, #4
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f002 fc8f 	bl	800a5a4 <_ZdlPvj>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	4a05      	ldr	r2, [pc, #20]	; (8007cb0 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev+0x20>)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	601a      	str	r2, [r3, #0]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f00b f8ad 	bl	8012e00 <_ZN10UtestShellD1Ev>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3708      	adds	r7, #8
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	0802759c 	.word	0x0802759c

08007cb4 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD0Ev>:
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f7ff ffe7 	bl	8007c90 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
 8007cc2:	211c      	movs	r1, #28
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f002 fc6d 	bl	800a5a4 <_ZdlPvj>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3708      	adds	r7, #8
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>:
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	4a05      	ldr	r2, [pc, #20]	; (8007cf4 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev+0x20>)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	601a      	str	r2, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7fd fa05 	bl	80050f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4618      	mov	r0, r3
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	08027648 	.word	0x08027648

08007cf8 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD0Ev>:
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f7ff ffe7 	bl	8007cd4 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>
 8007d06:	2104      	movs	r1, #4
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f002 fc4b 	bl	800a5a4 <_ZdlPvj>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4618      	mov	r0, r3
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_Response_Test)
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	4a05      	ldr	r2, [pc, #20]	; (8007d38 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev+0x20>)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	601a      	str	r2, [r3, #0]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f00b f869 	bl	8012e00 <_ZN10UtestShellD1Ev>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4618      	mov	r0, r3
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	08027668 	.word	0x08027668

08007d3c <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD0Ev>:
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7ff ffe7 	bl	8007d18 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
 8007d4a:	211c      	movs	r1, #28
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f002 fc29 	bl	800a5a4 <_ZdlPvj>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4618      	mov	r0, r3
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>:
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	4a05      	ldr	r2, [pc, #20]	; (8007d7c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev+0x20>)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	601a      	str	r2, [r3, #0]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7fd f9c1 	bl	80050f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4618      	mov	r0, r3
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	08027714 	.word	0x08027714

08007d80 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD0Ev>:
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f7ff ffe7 	bl	8007d5c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>
 8007d8e:	2104      	movs	r1, #4
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f002 fc07 	bl	800a5a4 <_ZdlPvj>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	4a05      	ldr	r2, [pc, #20]	; (8007dc0 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev+0x20>)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	601a      	str	r2, [r3, #0]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f00b f825 	bl	8012e00 <_ZN10UtestShellD1Ev>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4618      	mov	r0, r3
 8007dba:	3708      	adds	r7, #8
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	08027734 	.word	0x08027734

08007dc4 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD0Ev>:
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f7ff ffe7 	bl	8007da0 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
 8007dd2:	211c      	movs	r1, #28
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f002 fbe5 	bl	800a5a4 <_ZdlPvj>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3708      	adds	r7, #8
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>:
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	4a05      	ldr	r2, [pc, #20]	; (8007e04 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev+0x20>)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	601a      	str	r2, [r3, #0]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7fd f97d 	bl	80050f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3708      	adds	r7, #8
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	080277e0 	.word	0x080277e0

08007e08 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD0Ev>:
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f7ff ffe7 	bl	8007de4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>
 8007e16:	2104      	movs	r1, #4
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f002 fbc3 	bl	800a5a4 <_ZdlPvj>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4618      	mov	r0, r3
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	4a05      	ldr	r2, [pc, #20]	; (8007e48 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev+0x20>)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	601a      	str	r2, [r3, #0]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f00a ffe1 	bl	8012e00 <_ZN10UtestShellD1Ev>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4618      	mov	r0, r3
 8007e42:	3708      	adds	r7, #8
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	08027800 	.word	0x08027800

08007e4c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD0Ev>:
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f7ff ffe7 	bl	8007e28 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
 8007e5a:	211c      	movs	r1, #28
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f002 fba1 	bl	800a5a4 <_ZdlPvj>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4618      	mov	r0, r3
 8007e66:	3708      	adds	r7, #8
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>:
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	4a05      	ldr	r2, [pc, #20]	; (8007e8c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev+0x20>)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	601a      	str	r2, [r3, #0]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7fd f939 	bl	80050f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4618      	mov	r0, r3
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	080278ac 	.word	0x080278ac

08007e90 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD0Ev>:
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f7ff ffe7 	bl	8007e6c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>
 8007e9e:	2104      	movs	r1, #4
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f002 fb7f 	bl	800a5a4 <_ZdlPvj>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3708      	adds	r7, #8
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	4a05      	ldr	r2, [pc, #20]	; (8007ed0 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev+0x20>)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	601a      	str	r2, [r3, #0]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f00a ff9d 	bl	8012e00 <_ZN10UtestShellD1Ev>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3708      	adds	r7, #8
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	080278cc 	.word	0x080278cc

08007ed4 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD0Ev>:
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f7ff ffe7 	bl	8007eb0 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
 8007ee2:	211c      	movs	r1, #28
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f002 fb5d 	bl	800a5a4 <_ZdlPvj>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	4618      	mov	r0, r3
 8007eee:	3708      	adds	r7, #8
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>:
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	4a05      	ldr	r2, [pc, #20]	; (8007f14 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev+0x20>)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	601a      	str	r2, [r3, #0]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fd f8f5 	bl	80050f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	08027978 	.word	0x08027978

08007f18 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD0Ev>:
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f7ff ffe7 	bl	8007ef4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>
 8007f26:	2104      	movs	r1, #4
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f002 fb3b 	bl	800a5a4 <_ZdlPvj>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4618      	mov	r0, r3
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, CapacityTest)
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	4a05      	ldr	r2, [pc, #20]	; (8007f58 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev+0x20>)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	601a      	str	r2, [r3, #0]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f00a ff59 	bl	8012e00 <_ZN10UtestShellD1Ev>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4618      	mov	r0, r3
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	080279b8 	.word	0x080279b8

08007f5c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD0Ev>:
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7ff ffe7 	bl	8007f38 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
 8007f6a:	211c      	movs	r1, #28
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f002 fb19 	bl	800a5a4 <_ZdlPvj>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4618      	mov	r0, r3
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>:
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	4a05      	ldr	r2, [pc, #20]	; (8007f9c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev+0x20>)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	601a      	str	r2, [r3, #0]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7fc fa69 	bl	8004464 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4618      	mov	r0, r3
 8007f96:	3708      	adds	r7, #8
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	08027a64 	.word	0x08027a64

08007fa0 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD0Ev>:
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f7ff ffe7 	bl	8007f7c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>
 8007fae:	2108      	movs	r1, #8
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f002 faf7 	bl	800a5a4 <_ZdlPvj>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3708      	adds	r7, #8
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, LookForTest)
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	4a05      	ldr	r2, [pc, #20]	; (8007fe0 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev+0x20>)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	601a      	str	r2, [r3, #0]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f00a ff15 	bl	8012e00 <_ZN10UtestShellD1Ev>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	08027a84 	.word	0x08027a84

08007fe4 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD0Ev>:
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f7ff ffe7 	bl	8007fc0 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
 8007ff2:	211c      	movs	r1, #28
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f002 fad5 	bl	800a5a4 <_ZdlPvj>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3708      	adds	r7, #8
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>:
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	4a05      	ldr	r2, [pc, #20]	; (8008024 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev+0x20>)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	601a      	str	r2, [r3, #0]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4618      	mov	r0, r3
 8008016:	f7fc fa25 	bl	8004464 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4618      	mov	r0, r3
 800801e:	3708      	adds	r7, #8
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}
 8008024:	08027b30 	.word	0x08027b30

08008028 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD0Ev>:
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f7ff ffe7 	bl	8008004 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>
 8008036:	2108      	movs	r1, #8
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f002 fab3 	bl	800a5a4 <_ZdlPvj>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4618      	mov	r0, r3
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushArrayTest)
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	4a05      	ldr	r2, [pc, #20]	; (8008068 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev+0x20>)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4618      	mov	r0, r3
 800805a:	f00a fed1 	bl	8012e00 <_ZN10UtestShellD1Ev>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4618      	mov	r0, r3
 8008062:	3708      	adds	r7, #8
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	08027b50 	.word	0x08027b50

0800806c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD0Ev>:
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f7ff ffe7 	bl	8008048 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
 800807a:	211c      	movs	r1, #28
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f002 fa91 	bl	800a5a4 <_ZdlPvj>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4618      	mov	r0, r3
 8008086:	3708      	adds	r7, #8
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>:
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	4a05      	ldr	r2, [pc, #20]	; (80080ac <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev+0x20>)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	601a      	str	r2, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4618      	mov	r0, r3
 800809e:	f7fc f9e1 	bl	8004464 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4618      	mov	r0, r3
 80080a6:	3708      	adds	r7, #8
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	08027bfc 	.word	0x08027bfc

080080b0 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD0Ev>:
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f7ff ffe7 	bl	800808c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>
 80080be:	2108      	movs	r1, #8
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f002 fa6f 	bl	800a5a4 <_ZdlPvj>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4618      	mov	r0, r3
 80080ca:	3708      	adds	r7, #8
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferFlushTest)
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	4a05      	ldr	r2, [pc, #20]	; (80080f0 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev+0x20>)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	601a      	str	r2, [r3, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f00a fe8d 	bl	8012e00 <_ZN10UtestShellD1Ev>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4618      	mov	r0, r3
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	08027c1c 	.word	0x08027c1c

080080f4 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD0Ev>:
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f7ff ffe7 	bl	80080d0 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
 8008102:	211c      	movs	r1, #28
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f002 fa4d 	bl	800a5a4 <_ZdlPvj>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4618      	mov	r0, r3
 800810e:	3708      	adds	r7, #8
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>:
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	4a05      	ldr	r2, [pc, #20]	; (8008134 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev+0x20>)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	601a      	str	r2, [r3, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4618      	mov	r0, r3
 8008126:	f7fc f99d 	bl	8004464 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4618      	mov	r0, r3
 800812e:	3708      	adds	r7, #8
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	08027cc8 	.word	0x08027cc8

08008138 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD0Ev>:
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f7ff ffe7 	bl	8008114 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>
 8008146:	2108      	movs	r1, #8
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f002 fa2b 	bl	800a5a4 <_ZdlPvj>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4618      	mov	r0, r3
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	4a05      	ldr	r2, [pc, #20]	; (8008178 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev+0x20>)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	601a      	str	r2, [r3, #0]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4618      	mov	r0, r3
 800816a:	f00a fe49 	bl	8012e00 <_ZN10UtestShellD1Ev>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4618      	mov	r0, r3
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	08027ce8 	.word	0x08027ce8

0800817c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD0Ev>:
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f7ff ffe7 	bl	8008158 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
 800818a:	211c      	movs	r1, #28
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f002 fa09 	bl	800a5a4 <_ZdlPvj>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4618      	mov	r0, r3
 8008196:	3708      	adds	r7, #8
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>:
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	4a05      	ldr	r2, [pc, #20]	; (80081bc <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev+0x20>)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	601a      	str	r2, [r3, #0]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7fc f959 	bl	8004464 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4618      	mov	r0, r3
 80081b6:	3708      	adds	r7, #8
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	08027d94 	.word	0x08027d94

080081c0 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD0Ev>:
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f7ff ffe7 	bl	800819c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>
 80081ce:	2108      	movs	r1, #8
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f002 f9e7 	bl	800a5a4 <_ZdlPvj>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4618      	mov	r0, r3
 80081da:	3708      	adds	r7, #8
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopDataTests)
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	4a05      	ldr	r2, [pc, #20]	; (8008200 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev+0x20>)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	601a      	str	r2, [r3, #0]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4618      	mov	r0, r3
 80081f2:	f00a fe05 	bl	8012e00 <_ZN10UtestShellD1Ev>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4618      	mov	r0, r3
 80081fa:	3708      	adds	r7, #8
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	08027db4 	.word	0x08027db4

08008204 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD0Ev>:
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f7ff ffe7 	bl	80081e0 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
 8008212:	211c      	movs	r1, #28
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f002 f9c5 	bl	800a5a4 <_ZdlPvj>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4618      	mov	r0, r3
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>:
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	4a05      	ldr	r2, [pc, #20]	; (8008244 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev+0x20>)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	601a      	str	r2, [r3, #0]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4618      	mov	r0, r3
 8008236:	f7fc f915 	bl	8004464 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4618      	mov	r0, r3
 800823e:	3708      	adds	r7, #8
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	08027e60 	.word	0x08027e60

08008248 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD0Ev>:
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f7ff ffe7 	bl	8008224 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>
 8008256:	2108      	movs	r1, #8
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f002 f9a3 	bl	800a5a4 <_ZdlPvj>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4618      	mov	r0, r3
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	4a05      	ldr	r2, [pc, #20]	; (8008288 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev+0x20>)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	601a      	str	r2, [r3, #0]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4618      	mov	r0, r3
 800827a:	f00a fdc1 	bl	8012e00 <_ZN10UtestShellD1Ev>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4618      	mov	r0, r3
 8008282:	3708      	adds	r7, #8
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	08027e80 	.word	0x08027e80

0800828c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD0Ev>:
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f7ff ffe7 	bl	8008268 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
 800829a:	211c      	movs	r1, #28
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f002 f981 	bl	800a5a4 <_ZdlPvj>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4618      	mov	r0, r3
 80082a6:	3708      	adds	r7, #8
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>:
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	4a05      	ldr	r2, [pc, #20]	; (80082cc <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev+0x20>)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	601a      	str	r2, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4618      	mov	r0, r3
 80082be:	f7fc f8d1 	bl	8004464 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4618      	mov	r0, r3
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	08027f2c 	.word	0x08027f2c

080082d0 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD0Ev>:
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f7ff ffe7 	bl	80082ac <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>
 80082de:	2108      	movs	r1, #8
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f002 f95f 	bl	800a5a4 <_ZdlPvj>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4618      	mov	r0, r3
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushDataTests)
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	4a05      	ldr	r2, [pc, #20]	; (8008310 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev+0x20>)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	601a      	str	r2, [r3, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4618      	mov	r0, r3
 8008302:	f00a fd7d 	bl	8012e00 <_ZN10UtestShellD1Ev>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4618      	mov	r0, r3
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	08027f4c 	.word	0x08027f4c

08008314 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD0Ev>:
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f7ff ffe7 	bl	80082f0 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
 8008322:	211c      	movs	r1, #28
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f002 f93d 	bl	800a5a4 <_ZdlPvj>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4618      	mov	r0, r3
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>:
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	4a05      	ldr	r2, [pc, #20]	; (8008354 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev+0x20>)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	601a      	str	r2, [r3, #0]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4618      	mov	r0, r3
 8008346:	f7fc f88d 	bl	8004464 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4618      	mov	r0, r3
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	08027ff8 	.word	0x08027ff8

08008358 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD0Ev>:
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f7ff ffe7 	bl	8008334 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>
 8008366:	2108      	movs	r1, #8
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f002 f91b 	bl	800a5a4 <_ZdlPvj>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4618      	mov	r0, r3
 8008372:	3708      	adds	r7, #8
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, InitTest)
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	4a05      	ldr	r2, [pc, #20]	; (8008398 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev+0x20>)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	601a      	str	r2, [r3, #0]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4618      	mov	r0, r3
 800838a:	f00a fd39 	bl	8012e00 <_ZN10UtestShellD1Ev>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4618      	mov	r0, r3
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	08028018 	.word	0x08028018

0800839c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD0Ev>:
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f7ff ffe7 	bl	8008378 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
 80083aa:	211c      	movs	r1, #28
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f002 f8f9 	bl	800a5a4 <_ZdlPvj>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4618      	mov	r0, r3
 80083b6:	3708      	adds	r7, #8
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>:
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	4a05      	ldr	r2, [pc, #20]	; (80083dc <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev+0x20>)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	601a      	str	r2, [r3, #0]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7fc f849 	bl	8004464 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4618      	mov	r0, r3
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	080280c4 	.word	0x080280c4

080083e0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD0Ev>:
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7ff ffe7 	bl	80083bc <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>
 80083ee:	2108      	movs	r1, #8
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f002 f8d7 	bl	800a5a4 <_ZdlPvj>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4618      	mov	r0, r3
 80083fa:	3708      	adds	r7, #8
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <_Z41__static_initialization_and_destruction_0ii>:
}
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af02      	add	r7, sp, #8
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b01      	cmp	r3, #1
 800840e:	f040 8224 	bne.w	800885a <_Z41__static_initialization_and_destruction_0ii+0x45a>
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008418:	4293      	cmp	r3, r2
 800841a:	f040 821e 	bne.w	800885a <_Z41__static_initialization_and_destruction_0ii+0x45a>
TEST(RingBuffer_Test_Group, InitTest)
 800841e:	489f      	ldr	r0, [pc, #636]	; (800869c <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8008420:	f7fc f86e 	bl	8004500 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>
 8008424:	2324      	movs	r3, #36	; 0x24
 8008426:	9301      	str	r3, [sp, #4]
 8008428:	4b9d      	ldr	r3, [pc, #628]	; (80086a0 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800842a:	9300      	str	r3, [sp, #0]
 800842c:	4b9d      	ldr	r3, [pc, #628]	; (80086a4 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 800842e:	4a9e      	ldr	r2, [pc, #632]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008430:	499a      	ldr	r1, [pc, #616]	; (800869c <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8008432:	489e      	ldr	r0, [pc, #632]	; (80086ac <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8008434:	f00c fae0 	bl	80149f8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushDataTests)
 8008438:	489d      	ldr	r0, [pc, #628]	; (80086b0 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 800843a:	f7fc f915 	bl	8004668 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>
 800843e:	232e      	movs	r3, #46	; 0x2e
 8008440:	9301      	str	r3, [sp, #4]
 8008442:	4b97      	ldr	r3, [pc, #604]	; (80086a0 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008444:	9300      	str	r3, [sp, #0]
 8008446:	4b9b      	ldr	r3, [pc, #620]	; (80086b4 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8008448:	4a97      	ldr	r2, [pc, #604]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800844a:	4999      	ldr	r1, [pc, #612]	; (80086b0 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 800844c:	489a      	ldr	r0, [pc, #616]	; (80086b8 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 800844e:	f00c fad3 	bl	80149f8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8008452:	489a      	ldr	r0, [pc, #616]	; (80086bc <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8008454:	f7fc f992 	bl	800477c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>
 8008458:	2338      	movs	r3, #56	; 0x38
 800845a:	9301      	str	r3, [sp, #4]
 800845c:	4b90      	ldr	r3, [pc, #576]	; (80086a0 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800845e:	9300      	str	r3, [sp, #0]
 8008460:	4b97      	ldr	r3, [pc, #604]	; (80086c0 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8008462:	4a91      	ldr	r2, [pc, #580]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008464:	4995      	ldr	r1, [pc, #596]	; (80086bc <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8008466:	4897      	ldr	r0, [pc, #604]	; (80086c4 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8008468:	f00c fac6 	bl	80149f8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopDataTests)
 800846c:	4896      	ldr	r0, [pc, #600]	; (80086c8 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 800846e:	f7fc fa0d 	bl	800488c <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>
 8008472:	2343      	movs	r3, #67	; 0x43
 8008474:	9301      	str	r3, [sp, #4]
 8008476:	4b8a      	ldr	r3, [pc, #552]	; (80086a0 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008478:	9300      	str	r3, [sp, #0]
 800847a:	4b94      	ldr	r3, [pc, #592]	; (80086cc <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 800847c:	4a8a      	ldr	r2, [pc, #552]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800847e:	4992      	ldr	r1, [pc, #584]	; (80086c8 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8008480:	4893      	ldr	r0, [pc, #588]	; (80086d0 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8008482:	f00c fab9 	bl	80149f8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8008486:	4893      	ldr	r0, [pc, #588]	; (80086d4 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8008488:	f7fc fa6c 	bl	8004964 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>
 800848c:	234c      	movs	r3, #76	; 0x4c
 800848e:	9301      	str	r3, [sp, #4]
 8008490:	4b83      	ldr	r3, [pc, #524]	; (80086a0 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008492:	9300      	str	r3, [sp, #0]
 8008494:	4b90      	ldr	r3, [pc, #576]	; (80086d8 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8008496:	4a84      	ldr	r2, [pc, #528]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008498:	498e      	ldr	r1, [pc, #568]	; (80086d4 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 800849a:	4890      	ldr	r0, [pc, #576]	; (80086dc <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 800849c:	f00c faac 	bl	80149f8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 80084a0:	488f      	ldr	r0, [pc, #572]	; (80086e0 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 80084a2:	f7fc faeb 	bl	8004a7c <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>
 80084a6:	235c      	movs	r3, #92	; 0x5c
 80084a8:	9301      	str	r3, [sp, #4]
 80084aa:	4b7d      	ldr	r3, [pc, #500]	; (80086a0 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80084ac:	9300      	str	r3, [sp, #0]
 80084ae:	4b8d      	ldr	r3, [pc, #564]	; (80086e4 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 80084b0:	4a7d      	ldr	r2, [pc, #500]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80084b2:	498b      	ldr	r1, [pc, #556]	; (80086e0 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 80084b4:	488c      	ldr	r0, [pc, #560]	; (80086e8 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 80084b6:	f00c fa9f 	bl	80149f8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushArrayTest)
 80084ba:	488c      	ldr	r0, [pc, #560]	; (80086ec <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 80084bc:	f7fc fb9c 	bl	8004bf8 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>
 80084c0:	2371      	movs	r3, #113	; 0x71
 80084c2:	9301      	str	r3, [sp, #4]
 80084c4:	4b76      	ldr	r3, [pc, #472]	; (80086a0 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80084c6:	9300      	str	r3, [sp, #0]
 80084c8:	4b89      	ldr	r3, [pc, #548]	; (80086f0 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 80084ca:	4a77      	ldr	r2, [pc, #476]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80084cc:	4987      	ldr	r1, [pc, #540]	; (80086ec <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 80084ce:	4889      	ldr	r0, [pc, #548]	; (80086f4 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 80084d0:	f00c fa92 	bl	80149f8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, LookForTest)
 80084d4:	4888      	ldr	r0, [pc, #544]	; (80086f8 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 80084d6:	f7fc fbf5 	bl	8004cc4 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>
 80084da:	2378      	movs	r3, #120	; 0x78
 80084dc:	9301      	str	r3, [sp, #4]
 80084de:	4b70      	ldr	r3, [pc, #448]	; (80086a0 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80084e0:	9300      	str	r3, [sp, #0]
 80084e2:	4b86      	ldr	r3, [pc, #536]	; (80086fc <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 80084e4:	4a70      	ldr	r2, [pc, #448]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80084e6:	4984      	ldr	r1, [pc, #528]	; (80086f8 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 80084e8:	4885      	ldr	r0, [pc, #532]	; (8008700 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 80084ea:	f00c fa85 	bl	80149f8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, CapacityTest)
 80084ee:	4885      	ldr	r0, [pc, #532]	; (8008704 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 80084f0:	f7fc fcd2 	bl	8004e98 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>
 80084f4:	2380      	movs	r3, #128	; 0x80
 80084f6:	9301      	str	r3, [sp, #4]
 80084f8:	4b69      	ldr	r3, [pc, #420]	; (80086a0 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	4b82      	ldr	r3, [pc, #520]	; (8008708 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 80084fe:	4a6a      	ldr	r2, [pc, #424]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008500:	4980      	ldr	r1, [pc, #512]	; (8008704 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8008502:	4882      	ldr	r0, [pc, #520]	; (800870c <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 8008504:	f00c fa78 	bl	80149f8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8008508:	4881      	ldr	r0, [pc, #516]	; (8008710 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 800850a:	f7fc fe3b 	bl	8005184 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>
 800850e:	23b8      	movs	r3, #184	; 0xb8
 8008510:	9301      	str	r3, [sp, #4]
 8008512:	4b63      	ldr	r3, [pc, #396]	; (80086a0 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008514:	9300      	str	r3, [sp, #0]
 8008516:	4b7f      	ldr	r3, [pc, #508]	; (8008714 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8008518:	4a7f      	ldr	r2, [pc, #508]	; (8008718 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800851a:	497d      	ldr	r1, [pc, #500]	; (8008710 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 800851c:	487f      	ldr	r0, [pc, #508]	; (800871c <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 800851e:	f00c fa6b 	bl	80149f8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8008522:	487f      	ldr	r0, [pc, #508]	; (8008720 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8008524:	f7fc fe98 	bl	8005258 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>
 8008528:	23ca      	movs	r3, #202	; 0xca
 800852a:	9301      	str	r3, [sp, #4]
 800852c:	4b5c      	ldr	r3, [pc, #368]	; (80086a0 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800852e:	9300      	str	r3, [sp, #0]
 8008530:	4b7c      	ldr	r3, [pc, #496]	; (8008724 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8008532:	4a79      	ldr	r2, [pc, #484]	; (8008718 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008534:	497a      	ldr	r1, [pc, #488]	; (8008720 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8008536:	487c      	ldr	r0, [pc, #496]	; (8008728 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8008538:	f00c fa5e 	bl	80149f8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 800853c:	487b      	ldr	r0, [pc, #492]	; (800872c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800853e:	f7fc ff4f 	bl	80053e0 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>
 8008542:	23d6      	movs	r3, #214	; 0xd6
 8008544:	9301      	str	r3, [sp, #4]
 8008546:	4b56      	ldr	r3, [pc, #344]	; (80086a0 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008548:	9300      	str	r3, [sp, #0]
 800854a:	4b79      	ldr	r3, [pc, #484]	; (8008730 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 800854c:	4a72      	ldr	r2, [pc, #456]	; (8008718 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800854e:	4977      	ldr	r1, [pc, #476]	; (800872c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8008550:	4878      	ldr	r0, [pc, #480]	; (8008734 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8008552:	f00c fa51 	bl	80149f8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_Response_Test)
 8008556:	4878      	ldr	r0, [pc, #480]	; (8008738 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8008558:	f7fd f85a 	bl	8005610 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>
 800855c:	23e6      	movs	r3, #230	; 0xe6
 800855e:	9301      	str	r3, [sp, #4]
 8008560:	4b4f      	ldr	r3, [pc, #316]	; (80086a0 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008562:	9300      	str	r3, [sp, #0]
 8008564:	4b75      	ldr	r3, [pc, #468]	; (800873c <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8008566:	4a6c      	ldr	r2, [pc, #432]	; (8008718 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008568:	4973      	ldr	r1, [pc, #460]	; (8008738 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 800856a:	4875      	ldr	r0, [pc, #468]	; (8008740 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 800856c:	f00c fa44 	bl	80149f8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8008570:	4874      	ldr	r0, [pc, #464]	; (8008744 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8008572:	f7fd f901 	bl	8005778 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>
 8008576:	23f7      	movs	r3, #247	; 0xf7
 8008578:	9301      	str	r3, [sp, #4]
 800857a:	4b49      	ldr	r3, [pc, #292]	; (80086a0 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800857c:	9300      	str	r3, [sp, #0]
 800857e:	4b72      	ldr	r3, [pc, #456]	; (8008748 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8008580:	4a65      	ldr	r2, [pc, #404]	; (8008718 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008582:	4970      	ldr	r1, [pc, #448]	; (8008744 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8008584:	4871      	ldr	r0, [pc, #452]	; (800874c <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 8008586:	f00c fa37 	bl	80149f8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 800858a:	4871      	ldr	r0, [pc, #452]	; (8008750 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800858c:	f7fd f960 	bl	8005850 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>
 8008590:	f240 1307 	movw	r3, #263	; 0x107
 8008594:	9301      	str	r3, [sp, #4]
 8008596:	4b42      	ldr	r3, [pc, #264]	; (80086a0 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008598:	9300      	str	r3, [sp, #0]
 800859a:	4b6e      	ldr	r3, [pc, #440]	; (8008754 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800859c:	4a5e      	ldr	r2, [pc, #376]	; (8008718 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800859e:	496c      	ldr	r1, [pc, #432]	; (8008750 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 80085a0:	486d      	ldr	r0, [pc, #436]	; (8008758 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 80085a2:	f00c fa29 	bl	80149f8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 80085a6:	486d      	ldr	r0, [pc, #436]	; (800875c <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 80085a8:	f7fd fa16 	bl	80059d8 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>
 80085ac:	f240 131d 	movw	r3, #285	; 0x11d
 80085b0:	9301      	str	r3, [sp, #4]
 80085b2:	4b3b      	ldr	r3, [pc, #236]	; (80086a0 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80085b4:	9300      	str	r3, [sp, #0]
 80085b6:	4b6a      	ldr	r3, [pc, #424]	; (8008760 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 80085b8:	4a57      	ldr	r2, [pc, #348]	; (8008718 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80085ba:	4968      	ldr	r1, [pc, #416]	; (800875c <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 80085bc:	4869      	ldr	r0, [pc, #420]	; (8008764 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 80085be:	f00c fa1b 	bl	80149f8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 80085c2:	4869      	ldr	r0, [pc, #420]	; (8008768 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 80085c4:	f7fd faba 	bl	8005b3c <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>
 80085c8:	f44f 739a 	mov.w	r3, #308	; 0x134
 80085cc:	9301      	str	r3, [sp, #4]
 80085ce:	4b34      	ldr	r3, [pc, #208]	; (80086a0 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80085d0:	9300      	str	r3, [sp, #0]
 80085d2:	4b66      	ldr	r3, [pc, #408]	; (800876c <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 80085d4:	4a50      	ldr	r2, [pc, #320]	; (8008718 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80085d6:	4964      	ldr	r1, [pc, #400]	; (8008768 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 80085d8:	4865      	ldr	r0, [pc, #404]	; (8008770 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 80085da:	f00c fa0d 	bl	80149f8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 80085de:	4865      	ldr	r0, [pc, #404]	; (8008774 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 80085e0:	f7fd fbf0 	bl	8005dc4 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>
 80085e4:	f44f 73b0 	mov.w	r3, #352	; 0x160
 80085e8:	9301      	str	r3, [sp, #4]
 80085ea:	4b2d      	ldr	r3, [pc, #180]	; (80086a0 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80085ec:	9300      	str	r3, [sp, #0]
 80085ee:	4b62      	ldr	r3, [pc, #392]	; (8008778 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 80085f0:	4a49      	ldr	r2, [pc, #292]	; (8008718 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80085f2:	4960      	ldr	r1, [pc, #384]	; (8008774 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 80085f4:	4861      	ldr	r0, [pc, #388]	; (800877c <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 80085f6:	f00c f9ff 	bl	80149f8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 80085fa:	4861      	ldr	r0, [pc, #388]	; (8008780 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 80085fc:	f7fd fd24 	bl	8006048 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>
 8008600:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8008604:	9301      	str	r3, [sp, #4]
 8008606:	4b26      	ldr	r3, [pc, #152]	; (80086a0 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008608:	9300      	str	r3, [sp, #0]
 800860a:	4b5e      	ldr	r3, [pc, #376]	; (8008784 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800860c:	4a42      	ldr	r2, [pc, #264]	; (8008718 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800860e:	495c      	ldr	r1, [pc, #368]	; (8008780 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8008610:	485d      	ldr	r0, [pc, #372]	; (8008788 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8008612:	f00c f9f1 	bl	80149f8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8008616:	485d      	ldr	r0, [pc, #372]	; (800878c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8008618:	f7fd fdc0 	bl	800619c <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>
 800861c:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 8008620:	9301      	str	r3, [sp, #4]
 8008622:	4b1f      	ldr	r3, [pc, #124]	; (80086a0 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008624:	9300      	str	r3, [sp, #0]
 8008626:	4b5a      	ldr	r3, [pc, #360]	; (8008790 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8008628:	4a3b      	ldr	r2, [pc, #236]	; (8008718 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800862a:	4958      	ldr	r1, [pc, #352]	; (800878c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 800862c:	4859      	ldr	r0, [pc, #356]	; (8008794 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800862e:	f00c f9e3 	bl	80149f8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Command_Process_Test)
 8008632:	4859      	ldr	r0, [pc, #356]	; (8008798 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8008634:	f7fd fe98 	bl	8006368 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev>
 8008638:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 800863c:	9301      	str	r3, [sp, #4]
 800863e:	4b18      	ldr	r3, [pc, #96]	; (80086a0 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008640:	9300      	str	r3, [sp, #0]
 8008642:	4b56      	ldr	r3, [pc, #344]	; (800879c <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8008644:	4a34      	ldr	r2, [pc, #208]	; (8008718 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008646:	4954      	ldr	r1, [pc, #336]	; (8008798 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8008648:	4855      	ldr	r0, [pc, #340]	; (80087a0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800864a:	f00c f9d5 	bl	80149f8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 800864e:	4855      	ldr	r0, [pc, #340]	; (80087a4 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8008650:	f7fd ffb4 	bl	80065bc <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev>
 8008654:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8008658:	9301      	str	r3, [sp, #4]
 800865a:	4b11      	ldr	r3, [pc, #68]	; (80086a0 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	4b52      	ldr	r3, [pc, #328]	; (80087a8 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8008660:	4a2d      	ldr	r2, [pc, #180]	; (8008718 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008662:	4950      	ldr	r1, [pc, #320]	; (80087a4 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8008664:	4851      	ldr	r0, [pc, #324]	; (80087ac <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8008666:	f00c f9c7 	bl	80149f8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 800866a:	4851      	ldr	r0, [pc, #324]	; (80087b0 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800866c:	f7fe f8e2 	bl	8006834 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev>
 8008670:	f240 230f 	movw	r3, #527	; 0x20f
 8008674:	9301      	str	r3, [sp, #4]
 8008676:	4b0a      	ldr	r3, [pc, #40]	; (80086a0 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008678:	9300      	str	r3, [sp, #0]
 800867a:	4b4e      	ldr	r3, [pc, #312]	; (80087b4 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800867c:	4a26      	ldr	r2, [pc, #152]	; (8008718 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800867e:	494c      	ldr	r1, [pc, #304]	; (80087b0 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8008680:	484d      	ldr	r0, [pc, #308]	; (80087b8 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8008682:	f00c f9b9 	bl	80149f8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 8008686:	484d      	ldr	r0, [pc, #308]	; (80087bc <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8008688:	f7fe f990 	bl	80069ac <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev>
 800868c:	f240 232a 	movw	r3, #554	; 0x22a
 8008690:	9301      	str	r3, [sp, #4]
 8008692:	4b03      	ldr	r3, [pc, #12]	; (80086a0 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008694:	9300      	str	r3, [sp, #0]
 8008696:	4b4a      	ldr	r3, [pc, #296]	; (80087c0 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 8008698:	e094      	b.n	80087c4 <_Z41__static_initialization_and_destruction_0ii+0x3c4>
 800869a:	bf00      	nop
 800869c:	200004a0 	.word	0x200004a0
 80086a0:	080236a4 	.word	0x080236a4
 80086a4:	08023e14 	.word	0x08023e14
 80086a8:	08023e20 	.word	0x08023e20
 80086ac:	200004bc 	.word	0x200004bc
 80086b0:	200004c0 	.word	0x200004c0
 80086b4:	08023e38 	.word	0x08023e38
 80086b8:	200004dc 	.word	0x200004dc
 80086bc:	200004e0 	.word	0x200004e0
 80086c0:	08023e48 	.word	0x08023e48
 80086c4:	200004fc 	.word	0x200004fc
 80086c8:	20000500 	.word	0x20000500
 80086cc:	08023e5c 	.word	0x08023e5c
 80086d0:	2000051c 	.word	0x2000051c
 80086d4:	20000520 	.word	0x20000520
 80086d8:	08023e6c 	.word	0x08023e6c
 80086dc:	2000053c 	.word	0x2000053c
 80086e0:	20000540 	.word	0x20000540
 80086e4:	08023e84 	.word	0x08023e84
 80086e8:	2000055c 	.word	0x2000055c
 80086ec:	20000560 	.word	0x20000560
 80086f0:	08023e94 	.word	0x08023e94
 80086f4:	2000057c 	.word	0x2000057c
 80086f8:	20000580 	.word	0x20000580
 80086fc:	08023ea4 	.word	0x08023ea4
 8008700:	2000059c 	.word	0x2000059c
 8008704:	200005a0 	.word	0x200005a0
 8008708:	08023eb0 	.word	0x08023eb0
 800870c:	200005bc 	.word	0x200005bc
 8008710:	200005c8 	.word	0x200005c8
 8008714:	08023ec0 	.word	0x08023ec0
 8008718:	08023ed0 	.word	0x08023ed0
 800871c:	200005e4 	.word	0x200005e4
 8008720:	200005e8 	.word	0x200005e8
 8008724:	08023ee8 	.word	0x08023ee8
 8008728:	20000604 	.word	0x20000604
 800872c:	20000608 	.word	0x20000608
 8008730:	08023f00 	.word	0x08023f00
 8008734:	20000624 	.word	0x20000624
 8008738:	20000628 	.word	0x20000628
 800873c:	08023f1c 	.word	0x08023f1c
 8008740:	20000644 	.word	0x20000644
 8008744:	20000648 	.word	0x20000648
 8008748:	08023f30 	.word	0x08023f30
 800874c:	20000664 	.word	0x20000664
 8008750:	20000668 	.word	0x20000668
 8008754:	08023f4c 	.word	0x08023f4c
 8008758:	20000684 	.word	0x20000684
 800875c:	20000688 	.word	0x20000688
 8008760:	08023f60 	.word	0x08023f60
 8008764:	200006a4 	.word	0x200006a4
 8008768:	200006a8 	.word	0x200006a8
 800876c:	08023f7c 	.word	0x08023f7c
 8008770:	200006c4 	.word	0x200006c4
 8008774:	200006c8 	.word	0x200006c8
 8008778:	08023f94 	.word	0x08023f94
 800877c:	200006e4 	.word	0x200006e4
 8008780:	200006e8 	.word	0x200006e8
 8008784:	08023fa8 	.word	0x08023fa8
 8008788:	20000704 	.word	0x20000704
 800878c:	20000708 	.word	0x20000708
 8008790:	08023fc8 	.word	0x08023fc8
 8008794:	20000724 	.word	0x20000724
 8008798:	20000728 	.word	0x20000728
 800879c:	08023fe0 	.word	0x08023fe0
 80087a0:	20000744 	.word	0x20000744
 80087a4:	20000748 	.word	0x20000748
 80087a8:	08023ff8 	.word	0x08023ff8
 80087ac:	20000764 	.word	0x20000764
 80087b0:	20000768 	.word	0x20000768
 80087b4:	0802400c 	.word	0x0802400c
 80087b8:	20000784 	.word	0x20000784
 80087bc:	20000788 	.word	0x20000788
 80087c0:	08024028 	.word	0x08024028
 80087c4:	4a83      	ldr	r2, [pc, #524]	; (80089d4 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 80087c6:	4984      	ldr	r1, [pc, #528]	; (80089d8 <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 80087c8:	4884      	ldr	r0, [pc, #528]	; (80089dc <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 80087ca:	f00c f915 	bl	80149f8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 80087ce:	4884      	ldr	r0, [pc, #528]	; (80089e0 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 80087d0:	f7fe fa28 	bl	8006c24 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev>
 80087d4:	f240 2357 	movw	r3, #599	; 0x257
 80087d8:	9301      	str	r3, [sp, #4]
 80087da:	4b82      	ldr	r3, [pc, #520]	; (80089e4 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 80087dc:	9300      	str	r3, [sp, #0]
 80087de:	4b82      	ldr	r3, [pc, #520]	; (80089e8 <_Z41__static_initialization_and_destruction_0ii+0x5e8>)
 80087e0:	4a7c      	ldr	r2, [pc, #496]	; (80089d4 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 80087e2:	497f      	ldr	r1, [pc, #508]	; (80089e0 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 80087e4:	4881      	ldr	r0, [pc, #516]	; (80089ec <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 80087e6:	f00c f907 	bl	80149f8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 80087ea:	4881      	ldr	r0, [pc, #516]	; (80089f0 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 80087ec:	f7fe fb00 	bl	8006df0 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev>
 80087f0:	f44f 731c 	mov.w	r3, #624	; 0x270
 80087f4:	9301      	str	r3, [sp, #4]
 80087f6:	4b7b      	ldr	r3, [pc, #492]	; (80089e4 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 80087f8:	9300      	str	r3, [sp, #0]
 80087fa:	4b7e      	ldr	r3, [pc, #504]	; (80089f4 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 80087fc:	4a75      	ldr	r2, [pc, #468]	; (80089d4 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 80087fe:	497c      	ldr	r1, [pc, #496]	; (80089f0 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 8008800:	487d      	ldr	r0, [pc, #500]	; (80089f8 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 8008802:	f00c f8f9 	bl	80149f8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 8008806:	487d      	ldr	r0, [pc, #500]	; (80089fc <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8008808:	f7fe fc4c 	bl	80070a4 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev>
 800880c:	f240 2395 	movw	r3, #661	; 0x295
 8008810:	9301      	str	r3, [sp, #4]
 8008812:	4b74      	ldr	r3, [pc, #464]	; (80089e4 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8008814:	9300      	str	r3, [sp, #0]
 8008816:	4b7a      	ldr	r3, [pc, #488]	; (8008a00 <_Z41__static_initialization_and_destruction_0ii+0x600>)
 8008818:	4a6e      	ldr	r2, [pc, #440]	; (80089d4 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 800881a:	4978      	ldr	r1, [pc, #480]	; (80089fc <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 800881c:	4879      	ldr	r0, [pc, #484]	; (8008a04 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 800881e:	f00c f8eb 	bl	80149f8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 8008822:	4879      	ldr	r0, [pc, #484]	; (8008a08 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 8008824:	f7fe fd12 	bl	800724c <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev>
 8008828:	f240 23aa 	movw	r3, #682	; 0x2aa
 800882c:	9301      	str	r3, [sp, #4]
 800882e:	4b6d      	ldr	r3, [pc, #436]	; (80089e4 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8008830:	9300      	str	r3, [sp, #0]
 8008832:	4b76      	ldr	r3, [pc, #472]	; (8008a0c <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 8008834:	4a67      	ldr	r2, [pc, #412]	; (80089d4 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 8008836:	4974      	ldr	r1, [pc, #464]	; (8008a08 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 8008838:	4875      	ldr	r0, [pc, #468]	; (8008a10 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 800883a:	f00c f8dd 	bl	80149f8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 800883e:	4875      	ldr	r0, [pc, #468]	; (8008a14 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 8008840:	f7fe fd74 	bl	800732c <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev>
 8008844:	f240 23bb 	movw	r3, #699	; 0x2bb
 8008848:	9301      	str	r3, [sp, #4]
 800884a:	4b66      	ldr	r3, [pc, #408]	; (80089e4 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 800884c:	9300      	str	r3, [sp, #0]
 800884e:	4b72      	ldr	r3, [pc, #456]	; (8008a18 <_Z41__static_initialization_and_destruction_0ii+0x618>)
 8008850:	4a60      	ldr	r2, [pc, #384]	; (80089d4 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 8008852:	4970      	ldr	r1, [pc, #448]	; (8008a14 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 8008854:	4871      	ldr	r0, [pc, #452]	; (8008a1c <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 8008856:	f00c f8cf 	bl	80149f8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2b00      	cmp	r3, #0
 800885e:	f040 80b4 	bne.w	80089ca <_Z41__static_initialization_and_destruction_0ii+0x5ca>
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008868:	4293      	cmp	r3, r2
 800886a:	f040 80ae 	bne.w	80089ca <_Z41__static_initialization_and_destruction_0ii+0x5ca>
 800886e:	486b      	ldr	r0, [pc, #428]	; (8008a1c <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 8008870:	f00c f8ec 	bl	8014a4c <_ZN13TestInstallerD1Ev>
 8008874:	4867      	ldr	r0, [pc, #412]	; (8008a14 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 8008876:	f7fe fe0f 	bl	8007498 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 800887a:	4865      	ldr	r0, [pc, #404]	; (8008a10 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 800887c:	f00c f8e6 	bl	8014a4c <_ZN13TestInstallerD1Ev>
 8008880:	4861      	ldr	r0, [pc, #388]	; (8008a08 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 8008882:	f7fe fe4d 	bl	8007520 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 8008886:	485f      	ldr	r0, [pc, #380]	; (8008a04 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 8008888:	f00c f8e0 	bl	8014a4c <_ZN13TestInstallerD1Ev>
 800888c:	485b      	ldr	r0, [pc, #364]	; (80089fc <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 800888e:	f7fe fe8b 	bl	80075a8 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 8008892:	4859      	ldr	r0, [pc, #356]	; (80089f8 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 8008894:	f00c f8da 	bl	8014a4c <_ZN13TestInstallerD1Ev>
 8008898:	4855      	ldr	r0, [pc, #340]	; (80089f0 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 800889a:	f7fe fec9 	bl	8007630 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 800889e:	4853      	ldr	r0, [pc, #332]	; (80089ec <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 80088a0:	f00c f8d4 	bl	8014a4c <_ZN13TestInstallerD1Ev>
 80088a4:	484e      	ldr	r0, [pc, #312]	; (80089e0 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 80088a6:	f7fe ff07 	bl	80076b8 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 80088aa:	484c      	ldr	r0, [pc, #304]	; (80089dc <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 80088ac:	f00c f8ce 	bl	8014a4c <_ZN13TestInstallerD1Ev>
 80088b0:	4849      	ldr	r0, [pc, #292]	; (80089d8 <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 80088b2:	f7fe ff45 	bl	8007740 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 80088b6:	485a      	ldr	r0, [pc, #360]	; (8008a20 <_Z41__static_initialization_and_destruction_0ii+0x620>)
 80088b8:	f00c f8c8 	bl	8014a4c <_ZN13TestInstallerD1Ev>
 80088bc:	4859      	ldr	r0, [pc, #356]	; (8008a24 <_Z41__static_initialization_and_destruction_0ii+0x624>)
 80088be:	f7fe ff83 	bl	80077c8 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 80088c2:	4859      	ldr	r0, [pc, #356]	; (8008a28 <_Z41__static_initialization_and_destruction_0ii+0x628>)
 80088c4:	f00c f8c2 	bl	8014a4c <_ZN13TestInstallerD1Ev>
 80088c8:	4858      	ldr	r0, [pc, #352]	; (8008a2c <_Z41__static_initialization_and_destruction_0ii+0x62c>)
 80088ca:	f7fe ffc1 	bl	8007850 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Command_Process_Test)
 80088ce:	4858      	ldr	r0, [pc, #352]	; (8008a30 <_Z41__static_initialization_and_destruction_0ii+0x630>)
 80088d0:	f00c f8bc 	bl	8014a4c <_ZN13TestInstallerD1Ev>
 80088d4:	4857      	ldr	r0, [pc, #348]	; (8008a34 <_Z41__static_initialization_and_destruction_0ii+0x634>)
 80088d6:	f7fe ffff 	bl	80078d8 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 80088da:	4857      	ldr	r0, [pc, #348]	; (8008a38 <_Z41__static_initialization_and_destruction_0ii+0x638>)
 80088dc:	f00c f8b6 	bl	8014a4c <_ZN13TestInstallerD1Ev>
 80088e0:	4856      	ldr	r0, [pc, #344]	; (8008a3c <_Z41__static_initialization_and_destruction_0ii+0x63c>)
 80088e2:	f7ff f83d 	bl	8007960 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 80088e6:	4856      	ldr	r0, [pc, #344]	; (8008a40 <_Z41__static_initialization_and_destruction_0ii+0x640>)
 80088e8:	f00c f8b0 	bl	8014a4c <_ZN13TestInstallerD1Ev>
 80088ec:	4855      	ldr	r0, [pc, #340]	; (8008a44 <_Z41__static_initialization_and_destruction_0ii+0x644>)
 80088ee:	f7ff f87b 	bl	80079e8 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 80088f2:	4855      	ldr	r0, [pc, #340]	; (8008a48 <_Z41__static_initialization_and_destruction_0ii+0x648>)
 80088f4:	f00c f8aa 	bl	8014a4c <_ZN13TestInstallerD1Ev>
 80088f8:	4854      	ldr	r0, [pc, #336]	; (8008a4c <_Z41__static_initialization_and_destruction_0ii+0x64c>)
 80088fa:	f7ff f8b9 	bl	8007a70 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 80088fe:	4854      	ldr	r0, [pc, #336]	; (8008a50 <_Z41__static_initialization_and_destruction_0ii+0x650>)
 8008900:	f00c f8a4 	bl	8014a4c <_ZN13TestInstallerD1Ev>
 8008904:	4853      	ldr	r0, [pc, #332]	; (8008a54 <_Z41__static_initialization_and_destruction_0ii+0x654>)
 8008906:	f7ff f8f7 	bl	8007af8 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 800890a:	4853      	ldr	r0, [pc, #332]	; (8008a58 <_Z41__static_initialization_and_destruction_0ii+0x658>)
 800890c:	f00c f89e 	bl	8014a4c <_ZN13TestInstallerD1Ev>
 8008910:	4852      	ldr	r0, [pc, #328]	; (8008a5c <_Z41__static_initialization_and_destruction_0ii+0x65c>)
 8008912:	f7ff f935 	bl	8007b80 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8008916:	4852      	ldr	r0, [pc, #328]	; (8008a60 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 8008918:	f00c f898 	bl	8014a4c <_ZN13TestInstallerD1Ev>
 800891c:	4851      	ldr	r0, [pc, #324]	; (8008a64 <_Z41__static_initialization_and_destruction_0ii+0x664>)
 800891e:	f7ff f973 	bl	8007c08 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8008922:	4851      	ldr	r0, [pc, #324]	; (8008a68 <_Z41__static_initialization_and_destruction_0ii+0x668>)
 8008924:	f00c f892 	bl	8014a4c <_ZN13TestInstallerD1Ev>
 8008928:	4850      	ldr	r0, [pc, #320]	; (8008a6c <_Z41__static_initialization_and_destruction_0ii+0x66c>)
 800892a:	f7ff f9b1 	bl	8007c90 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_Response_Test)
 800892e:	4850      	ldr	r0, [pc, #320]	; (8008a70 <_Z41__static_initialization_and_destruction_0ii+0x670>)
 8008930:	f00c f88c 	bl	8014a4c <_ZN13TestInstallerD1Ev>
 8008934:	484f      	ldr	r0, [pc, #316]	; (8008a74 <_Z41__static_initialization_and_destruction_0ii+0x674>)
 8008936:	f7ff f9ef 	bl	8007d18 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 800893a:	484f      	ldr	r0, [pc, #316]	; (8008a78 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 800893c:	f00c f886 	bl	8014a4c <_ZN13TestInstallerD1Ev>
 8008940:	484e      	ldr	r0, [pc, #312]	; (8008a7c <_Z41__static_initialization_and_destruction_0ii+0x67c>)
 8008942:	f7ff fa2d 	bl	8007da0 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8008946:	484e      	ldr	r0, [pc, #312]	; (8008a80 <_Z41__static_initialization_and_destruction_0ii+0x680>)
 8008948:	f00c f880 	bl	8014a4c <_ZN13TestInstallerD1Ev>
 800894c:	484d      	ldr	r0, [pc, #308]	; (8008a84 <_Z41__static_initialization_and_destruction_0ii+0x684>)
 800894e:	f7ff fa6b 	bl	8007e28 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8008952:	484d      	ldr	r0, [pc, #308]	; (8008a88 <_Z41__static_initialization_and_destruction_0ii+0x688>)
 8008954:	f00c f87a 	bl	8014a4c <_ZN13TestInstallerD1Ev>
 8008958:	484c      	ldr	r0, [pc, #304]	; (8008a8c <_Z41__static_initialization_and_destruction_0ii+0x68c>)
 800895a:	f7ff faa9 	bl	8007eb0 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
TEST(RingBuffer_Test_Group, CapacityTest)
 800895e:	484c      	ldr	r0, [pc, #304]	; (8008a90 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 8008960:	f00c f874 	bl	8014a4c <_ZN13TestInstallerD1Ev>
 8008964:	484b      	ldr	r0, [pc, #300]	; (8008a94 <_Z41__static_initialization_and_destruction_0ii+0x694>)
 8008966:	f7ff fae7 	bl	8007f38 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, LookForTest)
 800896a:	484b      	ldr	r0, [pc, #300]	; (8008a98 <_Z41__static_initialization_and_destruction_0ii+0x698>)
 800896c:	f00c f86e 	bl	8014a4c <_ZN13TestInstallerD1Ev>
 8008970:	484a      	ldr	r0, [pc, #296]	; (8008a9c <_Z41__static_initialization_and_destruction_0ii+0x69c>)
 8008972:	f7ff fb25 	bl	8007fc0 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushArrayTest)
 8008976:	484a      	ldr	r0, [pc, #296]	; (8008aa0 <_Z41__static_initialization_and_destruction_0ii+0x6a0>)
 8008978:	f00c f868 	bl	8014a4c <_ZN13TestInstallerD1Ev>
 800897c:	4849      	ldr	r0, [pc, #292]	; (8008aa4 <_Z41__static_initialization_and_destruction_0ii+0x6a4>)
 800897e:	f7ff fb63 	bl	8008048 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8008982:	4849      	ldr	r0, [pc, #292]	; (8008aa8 <_Z41__static_initialization_and_destruction_0ii+0x6a8>)
 8008984:	f00c f862 	bl	8014a4c <_ZN13TestInstallerD1Ev>
 8008988:	4848      	ldr	r0, [pc, #288]	; (8008aac <_Z41__static_initialization_and_destruction_0ii+0x6ac>)
 800898a:	f7ff fba1 	bl	80080d0 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 800898e:	4848      	ldr	r0, [pc, #288]	; (8008ab0 <_Z41__static_initialization_and_destruction_0ii+0x6b0>)
 8008990:	f00c f85c 	bl	8014a4c <_ZN13TestInstallerD1Ev>
 8008994:	4847      	ldr	r0, [pc, #284]	; (8008ab4 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 8008996:	f7ff fbdf 	bl	8008158 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopDataTests)
 800899a:	4847      	ldr	r0, [pc, #284]	; (8008ab8 <_Z41__static_initialization_and_destruction_0ii+0x6b8>)
 800899c:	f00c f856 	bl	8014a4c <_ZN13TestInstallerD1Ev>
 80089a0:	4846      	ldr	r0, [pc, #280]	; (8008abc <_Z41__static_initialization_and_destruction_0ii+0x6bc>)
 80089a2:	f7ff fc1d 	bl	80081e0 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 80089a6:	4846      	ldr	r0, [pc, #280]	; (8008ac0 <_Z41__static_initialization_and_destruction_0ii+0x6c0>)
 80089a8:	f00c f850 	bl	8014a4c <_ZN13TestInstallerD1Ev>
 80089ac:	4845      	ldr	r0, [pc, #276]	; (8008ac4 <_Z41__static_initialization_and_destruction_0ii+0x6c4>)
 80089ae:	f7ff fc5b 	bl	8008268 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushDataTests)
 80089b2:	4845      	ldr	r0, [pc, #276]	; (8008ac8 <_Z41__static_initialization_and_destruction_0ii+0x6c8>)
 80089b4:	f00c f84a 	bl	8014a4c <_ZN13TestInstallerD1Ev>
 80089b8:	4844      	ldr	r0, [pc, #272]	; (8008acc <_Z41__static_initialization_and_destruction_0ii+0x6cc>)
 80089ba:	f7ff fc99 	bl	80082f0 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, InitTest)
 80089be:	4844      	ldr	r0, [pc, #272]	; (8008ad0 <_Z41__static_initialization_and_destruction_0ii+0x6d0>)
 80089c0:	f00c f844 	bl	8014a4c <_ZN13TestInstallerD1Ev>
 80089c4:	4843      	ldr	r0, [pc, #268]	; (8008ad4 <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 80089c6:	f7ff fcd7 	bl	8008378 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
}
 80089ca:	bf00      	nop
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	08023ed0 	.word	0x08023ed0
 80089d8:	20000788 	.word	0x20000788
 80089dc:	200007a4 	.word	0x200007a4
 80089e0:	200007a8 	.word	0x200007a8
 80089e4:	080236a4 	.word	0x080236a4
 80089e8:	08024040 	.word	0x08024040
 80089ec:	200007c4 	.word	0x200007c4
 80089f0:	200007c8 	.word	0x200007c8
 80089f4:	08024054 	.word	0x08024054
 80089f8:	200007e4 	.word	0x200007e4
 80089fc:	200007e8 	.word	0x200007e8
 8008a00:	0802406c 	.word	0x0802406c
 8008a04:	20000804 	.word	0x20000804
 8008a08:	20000808 	.word	0x20000808
 8008a0c:	08024084 	.word	0x08024084
 8008a10:	20000824 	.word	0x20000824
 8008a14:	20000828 	.word	0x20000828
 8008a18:	080240a4 	.word	0x080240a4
 8008a1c:	20000844 	.word	0x20000844
 8008a20:	20000784 	.word	0x20000784
 8008a24:	20000768 	.word	0x20000768
 8008a28:	20000764 	.word	0x20000764
 8008a2c:	20000748 	.word	0x20000748
 8008a30:	20000744 	.word	0x20000744
 8008a34:	20000728 	.word	0x20000728
 8008a38:	20000724 	.word	0x20000724
 8008a3c:	20000708 	.word	0x20000708
 8008a40:	20000704 	.word	0x20000704
 8008a44:	200006e8 	.word	0x200006e8
 8008a48:	200006e4 	.word	0x200006e4
 8008a4c:	200006c8 	.word	0x200006c8
 8008a50:	200006c4 	.word	0x200006c4
 8008a54:	200006a8 	.word	0x200006a8
 8008a58:	200006a4 	.word	0x200006a4
 8008a5c:	20000688 	.word	0x20000688
 8008a60:	20000684 	.word	0x20000684
 8008a64:	20000668 	.word	0x20000668
 8008a68:	20000664 	.word	0x20000664
 8008a6c:	20000648 	.word	0x20000648
 8008a70:	20000644 	.word	0x20000644
 8008a74:	20000628 	.word	0x20000628
 8008a78:	20000624 	.word	0x20000624
 8008a7c:	20000608 	.word	0x20000608
 8008a80:	20000604 	.word	0x20000604
 8008a84:	200005e8 	.word	0x200005e8
 8008a88:	200005e4 	.word	0x200005e4
 8008a8c:	200005c8 	.word	0x200005c8
 8008a90:	200005bc 	.word	0x200005bc
 8008a94:	200005a0 	.word	0x200005a0
 8008a98:	2000059c 	.word	0x2000059c
 8008a9c:	20000580 	.word	0x20000580
 8008aa0:	2000057c 	.word	0x2000057c
 8008aa4:	20000560 	.word	0x20000560
 8008aa8:	2000055c 	.word	0x2000055c
 8008aac:	20000540 	.word	0x20000540
 8008ab0:	2000053c 	.word	0x2000053c
 8008ab4:	20000520 	.word	0x20000520
 8008ab8:	2000051c 	.word	0x2000051c
 8008abc:	20000500 	.word	0x20000500
 8008ac0:	200004fc 	.word	0x200004fc
 8008ac4:	200004e0 	.word	0x200004e0
 8008ac8:	200004dc 	.word	0x200004dc
 8008acc:	200004c0 	.word	0x200004c0
 8008ad0:	200004bc 	.word	0x200004bc
 8008ad4:	200004a0 	.word	0x200004a0

08008ad8 <_GLOBAL__sub_I_rx_buffer>:
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008ae0:	2001      	movs	r0, #1
 8008ae2:	f7ff fc8d 	bl	8008400 <_Z41__static_initialization_and_destruction_0ii>
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <_GLOBAL__sub_D_rx_buffer>:
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008af0:	2000      	movs	r0, #0
 8008af2:	f7ff fc85 	bl	8008400 <_Z41__static_initialization_and_destruction_0ii>
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <_ZNK10TestResult11getRunCountEv>:

    size_t getTestCount() const
    {
        return testCount_;
    }
    size_t getRunCount() const
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
    {
        return runCount_;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	68db      	ldr	r3, [r3, #12]
    }
 8008b04:	4618      	mov	r0, r3
 8008b06:	370c      	adds	r7, #12
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <_ZNK10TestResult15getIgnoredCountEv>:
    }
    size_t getFilteredOutCount() const
    {
        return filteredOutCount_;
    }
    size_t getIgnoredCount() const
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
    {
        return ignoredCount_;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	69db      	ldr	r3, [r3, #28]
    }
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	370c      	adds	r7, #12
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <_ZNK10TestResult15getFailureCountEv>:
    size_t getFailureCount() const
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
    {
        return failureCount_;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	695b      	ldr	r3, [r3, #20]
    }
 8008b34:	4618      	mov	r0, r3
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <_ZNK10TestResult9isFailureEv>:

    bool isFailure() const
 8008b40:	b590      	push	{r4, r7, lr}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
    {
        return (getFailureCount() != 0) || (getRunCount() + getIgnoredCount() == 0);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7ff ffed 	bl	8008b28 <_ZNK10TestResult15getFailureCountEv>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d10a      	bne.n	8008b6a <_ZNK10TestResult9isFailureEv+0x2a>
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f7ff ffcf 	bl	8008af8 <_ZNK10TestResult11getRunCountEv>
 8008b5a:	4604      	mov	r4, r0
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f7ff ffd7 	bl	8008b10 <_ZNK10TestResult15getIgnoredCountEv>
 8008b62:	4603      	mov	r3, r0
 8008b64:	4423      	add	r3, r4
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d101      	bne.n	8008b6e <_ZNK10TestResult9isFailureEv+0x2e>
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e000      	b.n	8008b70 <_ZNK10TestResult9isFailureEv+0x30>
 8008b6e:	2300      	movs	r3, #0
    }
 8008b70:	4618      	mov	r0, r3
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd90      	pop	{r4, r7, pc}

08008b78 <_ZN17ConsoleTestOutputC1Ev>:
///////////////////////////////////////////////////////////////////////////////

class ConsoleTestOutput: public TestOutput
{
public:
    explicit ConsoleTestOutput()
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
    {
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4618      	mov	r0, r3
 8008b84:	f007 fde6 	bl	8010754 <_ZN10TestOutputC1Ev>
 8008b88:	4a03      	ldr	r2, [pc, #12]	; (8008b98 <_ZN17ConsoleTestOutputC1Ev+0x20>)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	601a      	str	r2, [r3, #0]
    }
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4618      	mov	r0, r3
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	08028778 	.word	0x08028778

08008b9c <_ZN17ConsoleTestOutputD1Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
    {
 8008ba4:	4a05      	ldr	r2, [pc, #20]	; (8008bbc <_ZN17ConsoleTestOutputD1Ev+0x20>)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	601a      	str	r2, [r3, #0]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4618      	mov	r0, r3
 8008bae:	f007 fdef 	bl	8010790 <_ZN10TestOutputD1Ev>
    }
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3708      	adds	r7, #8
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	08028778 	.word	0x08028778

08008bc0 <_ZN17ConsoleTestOutputD0Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
    }
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f7ff ffe7 	bl	8008b9c <_ZN17ConsoleTestOutputD1Ev>
 8008bce:	2110      	movs	r1, #16
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f001 fce7 	bl	800a5a4 <_ZdlPvj>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>:
{
    return RunAllTests(ac, (const char *const *) av);
}

int CommandLineTestRunner::RunAllTests(int ac, const char *const *av)
{
 8008be0:	b5b0      	push	{r4, r5, r7, lr}
 8008be2:	b098      	sub	sp, #96	; 0x60
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
    int result = 0;
 8008bea:	2300      	movs	r3, #0
 8008bec:	65fb      	str	r3, [r7, #92]	; 0x5c
    ConsoleTestOutput backupOutput;
 8008bee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7ff ffc0 	bl	8008b78 <_ZN17ConsoleTestOutputC1Ev>

    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8008bf8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008bfc:	4935      	ldr	r1, [pc, #212]	; (8008cd4 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f004 f87f 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8008c04:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8008c08:	f107 0318 	add.w	r3, r7, #24
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f001 ff6a 	bl	800aae8 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>
 8008c14:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f004 fc2a 	bl	800d472 <_ZN12SimpleStringD1Ev>
    memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
 8008c1e:	f107 0318 	add.w	r3, r7, #24
 8008c22:	2101      	movs	r1, #1
 8008c24:	4618      	mov	r0, r3
 8008c26:	f001 ff2f 	bl	800aa88 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>
    TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
 8008c2a:	f009 fb21 	bl	8012270 <_ZN12TestRegistry18getCurrentRegistryEv>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	3234      	adds	r2, #52	; 0x34
 8008c34:	6812      	ldr	r2, [r2, #0]
 8008c36:	f107 0118 	add.w	r1, r7, #24
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	4790      	blx	r2

    {
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8008c3e:	f009 fb17 	bl	8012270 <_ZN12TestRegistry18getCurrentRegistryEv>
 8008c42:	4603      	mov	r3, r0
 8008c44:	f107 0008 	add.w	r0, r7, #8
 8008c48:	683a      	ldr	r2, [r7, #0]
 8008c4a:	6879      	ldr	r1, [r7, #4]
 8008c4c:	f000 f844 	bl	8008cd8 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>
        result = runner.runAllTestsMain();
 8008c50:	f107 0308 	add.w	r3, r7, #8
 8008c54:	4618      	mov	r0, r3
 8008c56:	f000 f899 	bl	8008d8c <_ZN21CommandLineTestRunner15runAllTestsMainEv>
 8008c5a:	65f8      	str	r0, [r7, #92]	; 0x5c
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8008c5c:	f107 0308 	add.w	r3, r7, #8
 8008c60:	4618      	mov	r0, r3
 8008c62:	f000 f863 	bl	8008d2c <_ZN21CommandLineTestRunnerD1Ev>
    }

    if (result == 0) {
 8008c66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d10c      	bne.n	8008c86 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xa6>
        backupOutput << memLeakWarn.FinalReport(0);
 8008c6c:	f107 0318 	add.w	r3, r7, #24
 8008c70:	2100      	movs	r1, #0
 8008c72:	4618      	mov	r0, r3
 8008c74:	f002 f83a 	bl	800acec <_ZN23MemoryLeakWarningPlugin11FinalReportEj>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008c7e:	4611      	mov	r1, r2
 8008c80:	4618      	mov	r0, r3
 8008c82:	f007 fe27 	bl	80108d4 <_ZlsR10TestOutputPKc>
    }
    TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);
 8008c86:	f009 faf3 	bl	8012270 <_ZN12TestRegistry18getCurrentRegistryEv>
 8008c8a:	4604      	mov	r4, r0
 8008c8c:	6823      	ldr	r3, [r4, #0]
 8008c8e:	3344      	adds	r3, #68	; 0x44
 8008c90:	681d      	ldr	r5, [r3, #0]
 8008c92:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008c96:	490f      	ldr	r1, [pc, #60]	; (8008cd4 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f004 f832 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8008c9e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	47a8      	blx	r5
 8008ca8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008cac:	4618      	mov	r0, r3
 8008cae:	f004 fbe0 	bl	800d472 <_ZN12SimpleStringD1Ev>
    return result;
 8008cb2:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8008cb4:	f107 0318 	add.w	r3, r7, #24
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f001 ff4d 	bl	800ab58 <_ZN23MemoryLeakWarningPluginD1Ev>
    ConsoleTestOutput backupOutput;
 8008cbe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7ff ff6a 	bl	8008b9c <_ZN17ConsoleTestOutputD1Ev>
    return result;
 8008cc8:	4623      	mov	r3, r4
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3760      	adds	r7, #96	; 0x60
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bdb0      	pop	{r4, r5, r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	080240bc 	.word	0x080240bc

08008cd8 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>:

CommandLineTestRunner::CommandLineTestRunner(int ac, const char *const *av, TestRegistry* registry) :
 8008cd8:	b590      	push	{r4, r7, lr}
 8008cda:	b085      	sub	sp, #20
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	607a      	str	r2, [r7, #4]
 8008ce4:	603b      	str	r3, [r7, #0]
    output_(NULLPTR), arguments_(NULLPTR), registry_(registry)
 8008ce6:	4a0f      	ldr	r2, [pc, #60]	; (8008d24 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x4c>)
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	601a      	str	r2, [r3, #0]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	605a      	str	r2, [r3, #4]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	609a      	str	r2, [r3, #8]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	683a      	ldr	r2, [r7, #0]
 8008cfc:	60da      	str	r2, [r3, #12]
{
    arguments_ = new CommandLineArguments(ac, av);
 8008cfe:	2241      	movs	r2, #65	; 0x41
 8008d00:	4909      	ldr	r1, [pc, #36]	; (8008d28 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x50>)
 8008d02:	2038      	movs	r0, #56	; 0x38
 8008d04:	f001 fc3a 	bl	800a57c <_ZnwjPKci>
 8008d08:	4604      	mov	r4, r0
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	68b9      	ldr	r1, [r7, #8]
 8008d0e:	4620      	mov	r0, r4
 8008d10:	f00c f84a 	bl	8014da8 <_ZN20CommandLineArgumentsC1EiPKPKc>
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	609c      	str	r4, [r3, #8]
}
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3714      	adds	r7, #20
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd90      	pop	{r4, r7, pc}
 8008d22:	bf00      	nop
 8008d24:	08028104 	.word	0x08028104
 8008d28:	080240d0 	.word	0x080240d0

08008d2c <_ZN21CommandLineTestRunnerD1Ev>:

CommandLineTestRunner::~CommandLineTestRunner()
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	4a0c      	ldr	r2, [pc, #48]	; (8008d68 <_ZN21CommandLineTestRunnerD1Ev+0x3c>)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	601a      	str	r2, [r3, #0]
{
    delete arguments_;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d004      	beq.n	8008d4c <_ZN21CommandLineTestRunnerD1Ev+0x20>
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	3204      	adds	r2, #4
 8008d46:	6812      	ldr	r2, [r2, #0]
 8008d48:	4618      	mov	r0, r3
 8008d4a:	4790      	blx	r2
    delete output_;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d004      	beq.n	8008d5e <_ZN21CommandLineTestRunnerD1Ev+0x32>
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	3204      	adds	r2, #4
 8008d58:	6812      	ldr	r2, [r2, #0]
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	4790      	blx	r2
}
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4618      	mov	r0, r3
 8008d62:	3708      	adds	r7, #8
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	08028104 	.word	0x08028104

08008d6c <_ZN21CommandLineTestRunnerD0Ev>:
CommandLineTestRunner::~CommandLineTestRunner()
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
}
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f7ff ffd9 	bl	8008d2c <_ZN21CommandLineTestRunnerD1Ev>
 8008d7a:	2110      	movs	r1, #16
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f001 fc11 	bl	800a5a4 <_ZdlPvj>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4618      	mov	r0, r3
 8008d86:	3708      	adds	r7, #8
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <_ZN21CommandLineTestRunner15runAllTestsMainEv>:

int CommandLineTestRunner::runAllTestsMain()
{
 8008d8c:	b5b0      	push	{r4, r5, r7, lr}
 8008d8e:	b08c      	sub	sp, #48	; 0x30
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
    int testResult = 1;
 8008d94:	2301      	movs	r3, #1
 8008d96:	62fb      	str	r3, [r7, #44]	; 0x2c

    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8008d98:	f107 031c 	add.w	r3, r7, #28
 8008d9c:	4929      	ldr	r1, [pc, #164]	; (8008e44 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f003 ffaf 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8008da4:	f107 021c 	add.w	r2, r7, #28
 8008da8:	f107 0308 	add.w	r3, r7, #8
 8008dac:	4611      	mov	r1, r2
 8008dae:	4618      	mov	r0, r3
 8008db0:	f008 fe1c 	bl	80119ec <_ZN16SetPointerPluginC1ERK12SimpleString>
 8008db4:	f107 031c 	add.w	r3, r7, #28
 8008db8:	4618      	mov	r0, r3
 8008dba:	f004 fb5a 	bl	800d472 <_ZN12SimpleStringD1Ev>
    registry_->installPlugin(&pPlugin);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	68da      	ldr	r2, [r3, #12]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	3334      	adds	r3, #52	; 0x34
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f107 0108 	add.w	r1, r7, #8
 8008dd0:	4610      	mov	r0, r2
 8008dd2:	4798      	blx	r3

    if (parseArguments(registry_->getFirstPlugin()))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	68da      	ldr	r2, [r3, #12]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	333c      	adds	r3, #60	; 0x3c
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4610      	mov	r0, r2
 8008de4:	4798      	blx	r3
 8008de6:	4603      	mov	r3, r0
 8008de8:	4619      	mov	r1, r3
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 fa3e 	bl	800926c <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d003      	beq.n	8008dfe <_ZN21CommandLineTestRunner15runAllTestsMainEv+0x72>
        testResult = runAllTests();
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 f8ac 	bl	8008f54 <_ZN21CommandLineTestRunner11runAllTestsEv>
 8008dfc:	62f8      	str	r0, [r7, #44]	; 0x2c

    registry_->removePluginByName(DEF_PLUGIN_SET_POINTER);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	68dd      	ldr	r5, [r3, #12]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	68db      	ldr	r3, [r3, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	3344      	adds	r3, #68	; 0x44
 8008e0a:	681c      	ldr	r4, [r3, #0]
 8008e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e10:	490c      	ldr	r1, [pc, #48]	; (8008e44 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 8008e12:	4618      	mov	r0, r3
 8008e14:	f003 ff75 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8008e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	4628      	mov	r0, r5
 8008e20:	47a0      	blx	r4
 8008e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e26:	4618      	mov	r0, r3
 8008e28:	f004 fb23 	bl	800d472 <_ZN12SimpleStringD1Ev>
    return testResult;
 8008e2c:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8008e2e:	f107 0308 	add.w	r3, r7, #8
 8008e32:	4618      	mov	r0, r3
 8008e34:	f000 faaa 	bl	800938c <_ZN16SetPointerPluginD1Ev>
    return testResult;
 8008e38:	4623      	mov	r3, r4
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3730      	adds	r7, #48	; 0x30
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bdb0      	pop	{r4, r5, r7, pc}
 8008e42:	bf00      	nop
 8008e44:	080240f4 	.word	0x080240f4

08008e48 <_ZN21CommandLineTestRunner17initializeTestRunEv>:

void CommandLineTestRunner::initializeTestRun()
{
 8008e48:	b5b0      	push	{r4, r5, r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
    registry_->setGroupFilters(arguments_->getGroupFilters());
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	68dd      	ldr	r5, [r3, #12]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	3330      	adds	r3, #48	; 0x30
 8008e5c:	681c      	ldr	r4, [r3, #0]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	4618      	mov	r0, r3
 8008e64:	f00c fce0 	bl	8015828 <_ZNK20CommandLineArguments15getGroupFiltersEv>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	4628      	mov	r0, r5
 8008e6e:	47a0      	blx	r4
    registry_->setNameFilters(arguments_->getNameFilters());
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	68dd      	ldr	r5, [r3, #12]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	332c      	adds	r3, #44	; 0x2c
 8008e7c:	681c      	ldr	r4, [r3, #0]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	4618      	mov	r0, r3
 8008e84:	f00c fcdc 	bl	8015840 <_ZNK20CommandLineArguments14getNameFiltersEv>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	47a0      	blx	r4

    if (arguments_->isVerbose()) output_->verbose(TestOutput::level_verbose);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	4618      	mov	r0, r3
 8008e96:	f00c fc2b 	bl	80156f0 <_ZNK20CommandLineArguments9isVerboseEv>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d009      	beq.n	8008eb4 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x6c>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	685a      	ldr	r2, [r3, #4]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	3320      	adds	r3, #32
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2101      	movs	r1, #1
 8008eb0:	4610      	mov	r0, r2
 8008eb2:	4798      	blx	r3
    if (arguments_->isVeryVerbose()) output_->verbose(TestOutput::level_veryVerbose);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f00c fc25 	bl	8015708 <_ZNK20CommandLineArguments13isVeryVerboseEv>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d009      	beq.n	8008ed8 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x90>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685a      	ldr	r2, [r3, #4]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	3320      	adds	r3, #32
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2102      	movs	r1, #2
 8008ed4:	4610      	mov	r0, r2
 8008ed6:	4798      	blx	r3
    if (arguments_->isColor()) output_->color();
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	4618      	mov	r0, r3
 8008ede:	f00c fc1f 	bl	8015720 <_ZNK20CommandLineArguments7isColorEv>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d008      	beq.n	8008efa <_ZN21CommandLineTestRunner17initializeTestRunEv+0xb2>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	3324      	adds	r3, #36	; 0x24
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4610      	mov	r0, r2
 8008ef8:	4798      	blx	r3
    if (arguments_->runTestsInSeperateProcess()) registry_->setRunTestsInSeperateProcess();
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	4618      	mov	r0, r3
 8008f00:	f00c fc4a 	bl	8015798 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d008      	beq.n	8008f1c <_ZN21CommandLineTestRunner17initializeTestRunEv+0xd4>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	68da      	ldr	r2, [r3, #12]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	3360      	adds	r3, #96	; 0x60
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4610      	mov	r0, r2
 8008f1a:	4798      	blx	r3
    if (arguments_->isRunIgnored()) registry_->setRunIgnored();
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	4618      	mov	r0, r3
 8008f22:	f00c fc2d 	bl	8015780 <_ZNK20CommandLineArguments12isRunIgnoredEv>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d004      	beq.n	8008f36 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xee>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	4618      	mov	r0, r3
 8008f32:	f009 fa19 	bl	8012368 <_ZN12TestRegistry13setRunIgnoredEv>
    if (arguments_->isCrashingOnFail()) UtestShell::setCrashOnFail();
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f00c fc50 	bl	80157e0 <_ZNK20CommandLineArguments16isCrashingOnFailEv>
 8008f40:	4603      	mov	r3, r0
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d001      	beq.n	8008f4a <_ZN21CommandLineTestRunner17initializeTestRunEv+0x102>
 8008f46:	f00b fadb 	bl	8014500 <_ZN10UtestShell14setCrashOnFailEv>
}
 8008f4a:	bf00      	nop
 8008f4c:	3708      	adds	r7, #8
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008f54 <_ZN21CommandLineTestRunner11runAllTestsEv>:

int CommandLineTestRunner::runAllTests()
{
 8008f54:	b5b0      	push	{r4, r5, r7, lr}
 8008f56:	b094      	sub	sp, #80	; 0x50
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
    initializeTestRun();
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f7ff ff73 	bl	8008e48 <_ZN21CommandLineTestRunner17initializeTestRunEv>
    size_t loopCount = 0;
 8008f62:	2300      	movs	r3, #0
 8008f64:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t failedTestCount = 0;
 8008f66:	2300      	movs	r3, #0
 8008f68:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t failedExecutionCount = 0;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	647b      	str	r3, [r7, #68]	; 0x44
    size_t repeatCount = arguments_->getRepeatCount();
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	4618      	mov	r0, r3
 8008f74:	f00c fc1c 	bl	80157b0 <_ZNK20CommandLineArguments14getRepeatCountEv>
 8008f78:	6438      	str	r0, [r7, #64]	; 0x40

    if (arguments_->isListingTestGroupNames())
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f00c fbda 	bl	8015738 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d019      	beq.n	8008fbe <_ZN21CommandLineTestRunner11runAllTestsEv+0x6a>
    {
        TestResult tr(*output_);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	685a      	ldr	r2, [r3, #4]
 8008f8e:	f107 0308 	add.w	r3, r7, #8
 8008f92:	4611      	mov	r1, r2
 8008f94:	4618      	mov	r0, r3
 8008f96:	f009 fbaf 	bl	80126f8 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupNames(tr);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	68da      	ldr	r2, [r3, #12]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	3320      	adds	r3, #32
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f107 0108 	add.w	r1, r7, #8
 8008fac:	4610      	mov	r0, r2
 8008fae:	4798      	blx	r3
        return 0;
 8008fb0:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8008fb2:	f107 0308 	add.w	r3, r7, #8
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f009 fbd6 	bl	8012768 <_ZN10TestResultD1Ev>
 8008fbc:	e0e1      	b.n	8009182 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestGroupAndCaseNames())
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f00c fbc4 	bl	8015750 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d019      	beq.n	8009002 <_ZN21CommandLineTestRunner11runAllTestsEv+0xae>
    {
        TestResult tr(*output_);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	685a      	ldr	r2, [r3, #4]
 8008fd2:	f107 0308 	add.w	r3, r7, #8
 8008fd6:	4611      	mov	r1, r2
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f009 fb8d 	bl	80126f8 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupAndCaseNames(tr);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	68da      	ldr	r2, [r3, #12]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	3324      	adds	r3, #36	; 0x24
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f107 0108 	add.w	r1, r7, #8
 8008ff0:	4610      	mov	r0, r2
 8008ff2:	4798      	blx	r3
        return 0;
 8008ff4:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8008ff6:	f107 0308 	add.w	r3, r7, #8
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f009 fbb4 	bl	8012768 <_ZN10TestResultD1Ev>
 8009000:	e0bf      	b.n	8009182 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestLocations())
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	4618      	mov	r0, r3
 8009008:	f00c fbae 	bl	8015768 <_ZNK20CommandLineArguments22isListingTestLocationsEv>
 800900c:	4603      	mov	r3, r0
 800900e:	2b00      	cmp	r3, #0
 8009010:	d019      	beq.n	8009046 <_ZN21CommandLineTestRunner11runAllTestsEv+0xf2>
    {
        TestResult tr(*output_);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	685a      	ldr	r2, [r3, #4]
 8009016:	f107 0308 	add.w	r3, r7, #8
 800901a:	4611      	mov	r1, r2
 800901c:	4618      	mov	r0, r3
 800901e:	f009 fb6b 	bl	80126f8 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestLocations(tr);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	68da      	ldr	r2, [r3, #12]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	3328      	adds	r3, #40	; 0x28
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f107 0108 	add.w	r1, r7, #8
 8009034:	4610      	mov	r0, r2
 8009036:	4798      	blx	r3
        return 0;
 8009038:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800903a:	f107 0308 	add.w	r3, r7, #8
 800903e:	4618      	mov	r0, r3
 8009040:	f009 fb92 	bl	8012768 <_ZN10TestResultD1Ev>
 8009044:	e09d      	b.n	8009182 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isReversing())
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	4618      	mov	r0, r3
 800904c:	f00c fbbc 	bl	80157c8 <_ZNK20CommandLineArguments11isReversingEv>
 8009050:	4603      	mov	r3, r0
 8009052:	2b00      	cmp	r3, #0
 8009054:	d008      	beq.n	8009068 <_ZN21CommandLineTestRunner11runAllTestsEv+0x114>
        registry_->reverseTests();
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	68da      	ldr	r2, [r3, #12]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	331c      	adds	r3, #28
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4610      	mov	r0, r2
 8009066:	4798      	blx	r3

    if (arguments_->isShuffling())
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	4618      	mov	r0, r3
 800906e:	f00c fbc3 	bl	80157f8 <_ZNK20CommandLineArguments11isShufflingEv>
 8009072:	4603      	mov	r3, r0
 8009074:	2b00      	cmp	r3, #0
 8009076:	d023      	beq.n	80090c0 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
    {
        output_->print("Test order shuffling enabled with seed: ");
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	685a      	ldr	r2, [r3, #4]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	332c      	adds	r3, #44	; 0x2c
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4941      	ldr	r1, [pc, #260]	; (800918c <_ZN21CommandLineTestRunner11runAllTestsEv+0x238>)
 8009088:	4610      	mov	r0, r2
 800908a:	4798      	blx	r3
        output_->print(arguments_->getShuffleSeed());
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	685d      	ldr	r5, [r3, #4]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	3334      	adds	r3, #52	; 0x34
 8009098:	681c      	ldr	r4, [r3, #0]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	4618      	mov	r0, r3
 80090a0:	f00c fbb6 	bl	8015810 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 80090a4:	4603      	mov	r3, r0
 80090a6:	4619      	mov	r1, r3
 80090a8:	4628      	mov	r0, r5
 80090aa:	47a0      	blx	r4
        output_->print("\n");
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	685a      	ldr	r2, [r3, #4]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	332c      	adds	r3, #44	; 0x2c
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4935      	ldr	r1, [pc, #212]	; (8009190 <_ZN21CommandLineTestRunner11runAllTestsEv+0x23c>)
 80090bc:	4610      	mov	r0, r2
 80090be:	4798      	blx	r3
    }
    while (loopCount++ < repeatCount) {
 80090c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090c2:	1c5a      	adds	r2, r3, #1
 80090c4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80090c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090c8:	429a      	cmp	r2, r3
 80090ca:	bf8c      	ite	hi
 80090cc:	2301      	movhi	r3, #1
 80090ce:	2300      	movls	r3, #0
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d04e      	beq.n	8009174 <_ZN21CommandLineTestRunner11runAllTestsEv+0x220>

        if (arguments_->isShuffling())
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	4618      	mov	r0, r3
 80090dc:	f00c fb8c 	bl	80157f8 <_ZNK20CommandLineArguments11isShufflingEv>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d00f      	beq.n	8009106 <_ZN21CommandLineTestRunner11runAllTestsEv+0x1b2>
            registry_->shuffleTests(arguments_->getShuffleSeed());
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	68dd      	ldr	r5, [r3, #12]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	3318      	adds	r3, #24
 80090f2:	681c      	ldr	r4, [r3, #0]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	4618      	mov	r0, r3
 80090fa:	f00c fb89 	bl	8015810 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 80090fe:	4603      	mov	r3, r0
 8009100:	4619      	mov	r1, r3
 8009102:	4628      	mov	r0, r5
 8009104:	47a0      	blx	r4

        output_->printTestRun(loopCount, repeatCount);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6858      	ldr	r0, [r3, #4]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	3340      	adds	r3, #64	; 0x40
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009116:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009118:	4798      	blx	r3
        TestResult tr(*output_);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	685a      	ldr	r2, [r3, #4]
 800911e:	f107 0308 	add.w	r3, r7, #8
 8009122:	4611      	mov	r1, r2
 8009124:	4618      	mov	r0, r3
 8009126:	f009 fae7 	bl	80126f8 <_ZN10TestResultC1ER10TestOutput>
        registry_->runAllTests(tr);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	68da      	ldr	r2, [r3, #12]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	68db      	ldr	r3, [r3, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	3314      	adds	r3, #20
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f107 0108 	add.w	r1, r7, #8
 800913c:	4610      	mov	r0, r2
 800913e:	4798      	blx	r3
        failedTestCount += tr.getFailureCount();
 8009140:	f107 0308 	add.w	r3, r7, #8
 8009144:	4618      	mov	r0, r3
 8009146:	f7ff fcef 	bl	8008b28 <_ZNK10TestResult15getFailureCountEv>
 800914a:	4602      	mov	r2, r0
 800914c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800914e:	4413      	add	r3, r2
 8009150:	64bb      	str	r3, [r7, #72]	; 0x48
        if (tr.isFailure()) {
 8009152:	f107 0308 	add.w	r3, r7, #8
 8009156:	4618      	mov	r0, r3
 8009158:	f7ff fcf2 	bl	8008b40 <_ZNK10TestResult9isFailureEv>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d002      	beq.n	8009168 <_ZN21CommandLineTestRunner11runAllTestsEv+0x214>
            failedExecutionCount++;
 8009162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009164:	3301      	adds	r3, #1
 8009166:	647b      	str	r3, [r7, #68]	; 0x44
        TestResult tr(*output_);
 8009168:	f107 0308 	add.w	r3, r7, #8
 800916c:	4618      	mov	r0, r3
 800916e:	f009 fafb 	bl	8012768 <_ZN10TestResultD1Ev>
    while (loopCount++ < repeatCount) {
 8009172:	e7a5      	b.n	80090c0 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
        }
    }
    return (int) (failedTestCount != 0 ? failedTestCount : failedExecutionCount);
 8009174:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009176:	2b00      	cmp	r3, #0
 8009178:	d001      	beq.n	800917e <_ZN21CommandLineTestRunner11runAllTestsEv+0x22a>
 800917a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800917c:	e000      	b.n	8009180 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22c>
 800917e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8009180:	bf00      	nop
 8009182:	4623      	mov	r3, r4
}
 8009184:	4618      	mov	r0, r3
 8009186:	3750      	adds	r7, #80	; 0x50
 8009188:	46bd      	mov	sp, r7
 800918a:	bdb0      	pop	{r4, r5, r7, pc}
 800918c:	08024108 	.word	0x08024108
 8009190:	08024134 	.word	0x08024134

08009194 <_ZN21CommandLineTestRunner20createTeamCityOutputEv>:

TestOutput* CommandLineTestRunner::createTeamCityOutput()
{
 8009194:	b590      	push	{r4, r7, lr}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
    return new TeamCityTestOutput;
 800919c:	229d      	movs	r2, #157	; 0x9d
 800919e:	4906      	ldr	r1, [pc, #24]	; (80091b8 <_ZN21CommandLineTestRunner20createTeamCityOutputEv+0x24>)
 80091a0:	201c      	movs	r0, #28
 80091a2:	f001 f9eb 	bl	800a57c <_ZnwjPKci>
 80091a6:	4604      	mov	r4, r0
 80091a8:	4620      	mov	r0, r4
 80091aa:	f005 f955 	bl	800e458 <_ZN18TeamCityTestOutputC1Ev>
 80091ae:	4623      	mov	r3, r4
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd90      	pop	{r4, r7, pc}
 80091b8:	080240d0 	.word	0x080240d0

080091bc <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString>:

TestOutput* CommandLineTestRunner::createJUnitOutput(const SimpleString& packageName)
{
 80091bc:	b590      	push	{r4, r7, lr}
 80091be:	b085      	sub	sp, #20
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
    JUnitTestOutput* junitOutput = new JUnitTestOutput;
 80091c6:	22a2      	movs	r2, #162	; 0xa2
 80091c8:	490a      	ldr	r1, [pc, #40]	; (80091f4 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x38>)
 80091ca:	2014      	movs	r0, #20
 80091cc:	f001 f9d6 	bl	800a57c <_ZnwjPKci>
 80091d0:	4604      	mov	r4, r0
 80091d2:	4620      	mov	r0, r4
 80091d4:	f000 f980 	bl	80094d8 <_ZN15JUnitTestOutputC1Ev>
 80091d8:	60fc      	str	r4, [r7, #12]
    if (junitOutput != NULLPTR) {
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d003      	beq.n	80091e8 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x2c>
      junitOutput->setPackageName(packageName);
 80091e0:	6839      	ldr	r1, [r7, #0]
 80091e2:	68f8      	ldr	r0, [r7, #12]
 80091e4:	f000 fbb2 	bl	800994c <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>
    }
    return junitOutput;
 80091e8:	68fb      	ldr	r3, [r7, #12]
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3714      	adds	r7, #20
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd90      	pop	{r4, r7, pc}
 80091f2:	bf00      	nop
 80091f4:	080240d0 	.word	0x080240d0

080091f8 <_ZN21CommandLineTestRunner19createConsoleOutputEv>:

TestOutput* CommandLineTestRunner::createConsoleOutput()
{
 80091f8:	b590      	push	{r4, r7, lr}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
    return new ConsoleTestOutput;
 8009200:	22ab      	movs	r2, #171	; 0xab
 8009202:	4906      	ldr	r1, [pc, #24]	; (800921c <_ZN21CommandLineTestRunner19createConsoleOutputEv+0x24>)
 8009204:	2010      	movs	r0, #16
 8009206:	f001 f9b9 	bl	800a57c <_ZnwjPKci>
 800920a:	4604      	mov	r4, r0
 800920c:	4620      	mov	r0, r4
 800920e:	f7ff fcb3 	bl	8008b78 <_ZN17ConsoleTestOutputC1Ev>
 8009212:	4623      	mov	r3, r4
}
 8009214:	4618      	mov	r0, r3
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	bd90      	pop	{r4, r7, pc}
 800921c:	080240d0 	.word	0x080240d0

08009220 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_>:

TestOutput* CommandLineTestRunner::createCompositeOutput(TestOutput* outputOne, TestOutput* outputTwo)
{
 8009220:	b590      	push	{r4, r7, lr}
 8009222:	b087      	sub	sp, #28
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	607a      	str	r2, [r7, #4]
  CompositeTestOutput* composite = new CompositeTestOutput;
 800922c:	22b0      	movs	r2, #176	; 0xb0
 800922e:	490e      	ldr	r1, [pc, #56]	; (8009268 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_+0x48>)
 8009230:	2018      	movs	r0, #24
 8009232:	f001 f9a3 	bl	800a57c <_ZnwjPKci>
 8009236:	4604      	mov	r4, r0
 8009238:	4620      	mov	r0, r4
 800923a:	f007 ff83 	bl	8011144 <_ZN19CompositeTestOutputC1Ev>
 800923e:	617c      	str	r4, [r7, #20]
  composite->setOutputOne(outputOne);
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	335c      	adds	r3, #92	; 0x5c
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	68b9      	ldr	r1, [r7, #8]
 800924a:	6978      	ldr	r0, [r7, #20]
 800924c:	4798      	blx	r3
  composite->setOutputTwo(outputTwo);
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	3360      	adds	r3, #96	; 0x60
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	6879      	ldr	r1, [r7, #4]
 8009258:	6978      	ldr	r0, [r7, #20]
 800925a:	4798      	blx	r3
  return composite;
 800925c:	697b      	ldr	r3, [r7, #20]
}
 800925e:	4618      	mov	r0, r3
 8009260:	371c      	adds	r7, #28
 8009262:	46bd      	mov	sp, r7
 8009264:	bd90      	pop	{r4, r7, pc}
 8009266:	bf00      	nop
 8009268:	080240d0 	.word	0x080240d0

0800926c <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>:

bool CommandLineTestRunner::parseArguments(TestPlugin* plugin)
{
 800926c:	b5b0      	push	{r4, r5, r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
  if (!arguments_->parse(plugin)) {
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	6839      	ldr	r1, [r7, #0]
 800927c:	4618      	mov	r0, r3
 800927e:	f00b fe4f 	bl	8014f20 <_ZN20CommandLineArguments5parseEP10TestPlugin>
 8009282:	4603      	mov	r3, r0
 8009284:	f083 0301 	eor.w	r3, r3, #1
 8009288:	b2db      	uxtb	r3, r3
 800928a:	2b00      	cmp	r3, #0
 800928c:	d029      	beq.n	80092e2 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x76>
    output_ = createConsoleOutput();
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	3310      	adds	r3, #16
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	4798      	blx	r3
 800929a:	4602      	mov	r2, r0
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	605a      	str	r2, [r3, #4]
    output_->print((arguments_->needHelp()) ? arguments_->help() : arguments_->usage());
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	685d      	ldr	r5, [r3, #4]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	332c      	adds	r3, #44	; 0x2c
 80092ac:	681c      	ldr	r4, [r3, #0]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	4618      	mov	r0, r3
 80092b4:	f00c fa10 	bl	80156d8 <_ZNK20CommandLineArguments8needHelpEv>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d006      	beq.n	80092cc <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x60>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	4618      	mov	r0, r3
 80092c4:	f00c f9fa 	bl	80156bc <_ZNK20CommandLineArguments4helpEv>
 80092c8:	4603      	mov	r3, r0
 80092ca:	e005      	b.n	80092d8 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x6c>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	4618      	mov	r0, r3
 80092d2:	f00c f9e5 	bl	80156a0 <_ZNK20CommandLineArguments5usageEv>
 80092d6:	4603      	mov	r3, r0
 80092d8:	4619      	mov	r1, r3
 80092da:	4628      	mov	r0, r5
 80092dc:	47a0      	blx	r4
    return false;
 80092de:	2300      	movs	r3, #0
 80092e0:	e050      	b.n	8009384 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x118>
  }

  if (arguments_->isJUnitOutput()) {
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	4618      	mov	r0, r3
 80092e8:	f00d f84c 	bl	8016384 <_ZNK20CommandLineArguments13isJUnitOutputEv>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d02c      	beq.n	800934c <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0xe0>
    output_= createJUnitOutput(arguments_->getPackageName());
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	330c      	adds	r3, #12
 80092f8:	681c      	ldr	r4, [r3, #0]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	4618      	mov	r0, r3
 8009300:	f00d f864 	bl	80163cc <_ZNK20CommandLineArguments14getPackageNameEv>
 8009304:	4603      	mov	r3, r0
 8009306:	4619      	mov	r1, r3
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	47a0      	blx	r4
 800930c:	4602      	mov	r2, r0
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	605a      	str	r2, [r3, #4]
    if (arguments_->isVerbose())
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	4618      	mov	r0, r3
 8009318:	f00c f9ea 	bl	80156f0 <_ZNK20CommandLineArguments9isVerboseEv>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d02f      	beq.n	8009382 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
      output_ = createCompositeOutput(output_, createConsoleOutput());
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	3314      	adds	r3, #20
 8009328:	681c      	ldr	r4, [r3, #0]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	685d      	ldr	r5, [r3, #4]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	3310      	adds	r3, #16
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	4798      	blx	r3
 800933a:	4603      	mov	r3, r0
 800933c:	461a      	mov	r2, r3
 800933e:	4629      	mov	r1, r5
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	47a0      	blx	r4
 8009344:	4602      	mov	r2, r0
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	605a      	str	r2, [r3, #4]
 800934a:	e01a      	b.n	8009382 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else if (arguments_->isTeamCityOutput()) {
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	4618      	mov	r0, r3
 8009352:	f00d f829 	bl	80163a8 <_ZNK20CommandLineArguments16isTeamCityOutputEv>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d009      	beq.n	8009370 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x104>
    output_ = createTeamCityOutput();
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	3308      	adds	r3, #8
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	4798      	blx	r3
 8009368:	4602      	mov	r2, r0
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	605a      	str	r2, [r3, #4]
 800936e:	e008      	b.n	8009382 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else
    output_ = createConsoleOutput();
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	3310      	adds	r3, #16
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	4798      	blx	r3
 800937c:	4602      	mov	r2, r0
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	605a      	str	r2, [r3, #4]
  return true;
 8009382:	2301      	movs	r3, #1
}
 8009384:	4618      	mov	r0, r3
 8009386:	3708      	adds	r7, #8
 8009388:	46bd      	mov	sp, r7
 800938a:	bdb0      	pop	{r4, r5, r7, pc}

0800938c <_ZN16SetPointerPluginD1Ev>:
//
///////////////////////////////////////////////////////////////////////////////

extern void CppUTestStore(void **location);

class SetPointerPlugin: public TestPlugin
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	4a05      	ldr	r2, [pc, #20]	; (80093ac <_ZN16SetPointerPluginD1Ev+0x20>)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	601a      	str	r2, [r3, #0]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4618      	mov	r0, r3
 800939e:	f008 f9e7 	bl	8011770 <_ZN10TestPluginD1Ev>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4618      	mov	r0, r3
 80093a6:	3708      	adds	r7, #8
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	08028884 	.word	0x08028884

080093b0 <_ZN16SetPointerPluginD0Ev>:
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f7ff ffe7 	bl	800938c <_ZN16SetPointerPluginD1Ev>
 80093be:	2114      	movs	r1, #20
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f001 f8ef 	bl	800a5a4 <_ZdlPvj>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4618      	mov	r0, r3
 80093ca:	3708      	adds	r7, #8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <_ZNK10TestResult13getCheckCountEv>:
    size_t getCheckCount() const
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
        return checkCount_;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	691b      	ldr	r3, [r3, #16]
    }
 80093dc:	4618      	mov	r0, r3
 80093de:	370c      	adds	r7, #12
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <_ZN23JUnitTestCaseResultNodeC1Ev>:
#include "CppUTest/TestFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

struct JUnitTestCaseResultNode
{
    JUnitTestCaseResultNode() :
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
        execTime_(0), failure_(NULLPTR), ignored_(false), lineNumber_ (0), checkCount_ (0), next_(NULLPTR)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	4910      	ldr	r1, [pc, #64]	; (8009434 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 80093f4:	4618      	mov	r0, r3
 80093f6:	f003 fc84 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2200      	movs	r2, #0
 80093fe:	609a      	str	r2, [r3, #8]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	60da      	str	r2, [r3, #12]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	741a      	strb	r2, [r3, #16]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	3314      	adds	r3, #20
 8009410:	4908      	ldr	r1, [pc, #32]	; (8009434 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8009412:	4618      	mov	r0, r3
 8009414:	f003 fc75 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	61da      	str	r2, [r3, #28]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	621a      	str	r2, [r3, #32]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2200      	movs	r2, #0
 8009428:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4618      	mov	r0, r3
 800942e:	3708      	adds	r7, #8
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}
 8009434:	08024138 	.word	0x08024138

08009438 <_ZN20JUnitTestGroupResultC1Ev>:
    JUnitTestCaseResultNode* next_;
};

struct JUnitTestGroupResult
{
    JUnitTestGroupResult() :
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
        testCount_(0), failureCount_(0), totalCheckCount_(0), startTime_(0), groupExecTime_(0), head_(NULLPTR), tail_(NULLPTR)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	601a      	str	r2, [r3, #0]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	605a      	str	r2, [r3, #4]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	609a      	str	r2, [r3, #8]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	60da      	str	r2, [r3, #12]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	611a      	str	r2, [r3, #16]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	3314      	adds	r3, #20
 8009462:	4907      	ldr	r1, [pc, #28]	; (8009480 <_ZN20JUnitTestGroupResultC1Ev+0x48>)
 8009464:	4618      	mov	r0, r3
 8009466:	f003 fc4c 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	61da      	str	r2, [r3, #28]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	621a      	str	r2, [r3, #32]
    {
    }
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	4618      	mov	r0, r3
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	08024138 	.word	0x08024138

08009484 <_ZN20JUnitTestGroupResultD1Ev>:
struct JUnitTestGroupResult
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	3314      	adds	r3, #20
 8009490:	4618      	mov	r0, r3
 8009492:	f003 ffee 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	4618      	mov	r0, r3
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <_ZN19JUnitTestOutputImplC1Ev>:
    SimpleString group_;
    JUnitTestCaseResultNode* head_;
    JUnitTestCaseResultNode* tail_;
};

struct JUnitTestOutputImpl
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7ff ffc4 	bl	8009438 <_ZN20JUnitTestGroupResultC1Ev>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	3328      	adds	r3, #40	; 0x28
 80094b4:	4907      	ldr	r1, [pc, #28]	; (80094d4 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 80094b6:	4618      	mov	r0, r3
 80094b8:	f003 fc23 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	3330      	adds	r3, #48	; 0x30
 80094c0:	4904      	ldr	r1, [pc, #16]	; (80094d4 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 80094c2:	4618      	mov	r0, r3
 80094c4:	f003 fc1d 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	4618      	mov	r0, r3
 80094cc:	3708      	adds	r7, #8
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	08024138 	.word	0x08024138

080094d8 <_ZN15JUnitTestOutputC1Ev>:
    PlatformSpecificFile file_;
    SimpleString package_;
    SimpleString stdOutput_;
};

JUnitTestOutput::JUnitTestOutput() :
 80094d8:	b590      	push	{r4, r7, lr}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
    impl_(new JUnitTestOutputImpl)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	4618      	mov	r0, r3
 80094e4:	f007 f936 	bl	8010754 <_ZN10TestOutputC1Ev>
 80094e8:	4a09      	ldr	r2, [pc, #36]	; (8009510 <_ZN15JUnitTestOutputC1Ev+0x38>)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	601a      	str	r2, [r3, #0]
 80094ee:	224d      	movs	r2, #77	; 0x4d
 80094f0:	4908      	ldr	r1, [pc, #32]	; (8009514 <_ZN15JUnitTestOutputC1Ev+0x3c>)
 80094f2:	2038      	movs	r0, #56	; 0x38
 80094f4:	f001 f842 	bl	800a57c <_ZnwjPKci>
 80094f8:	4604      	mov	r4, r0
 80094fa:	4620      	mov	r0, r4
 80094fc:	f7ff ffd0 	bl	80094a0 <_ZN19JUnitTestOutputImplC1Ev>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	611c      	str	r4, [r3, #16]
{
}
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4618      	mov	r0, r3
 8009508:	370c      	adds	r7, #12
 800950a:	46bd      	mov	sp, r7
 800950c:	bd90      	pop	{r4, r7, pc}
 800950e:	bf00      	nop
 8009510:	08028124 	.word	0x08028124
 8009514:	0802413c 	.word	0x0802413c

08009518 <_ZN19JUnitTestOutputImplD1Ev>:
struct JUnitTestOutputImpl
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	3330      	adds	r3, #48	; 0x30
 8009524:	4618      	mov	r0, r3
 8009526:	f003 ffa4 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	3328      	adds	r3, #40	; 0x28
 800952e:	4618      	mov	r0, r3
 8009530:	f003 ff9f 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4618      	mov	r0, r3
 8009538:	f7ff ffa4 	bl	8009484 <_ZN20JUnitTestGroupResultD1Ev>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	4618      	mov	r0, r3
 8009540:	3708      	adds	r7, #8
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
	...

08009548 <_ZN15JUnitTestOutputD1Ev>:

JUnitTestOutput::~JUnitTestOutput()
 8009548:	b590      	push	{r4, r7, lr}
 800954a:	b083      	sub	sp, #12
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	4a0c      	ldr	r2, [pc, #48]	; (8009584 <_ZN15JUnitTestOutputD1Ev+0x3c>)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	601a      	str	r2, [r3, #0]
{
    resetTestGroupResult();
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 f838 	bl	80095cc <_ZN15JUnitTestOutput20resetTestGroupResultEv>
    delete impl_;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	691c      	ldr	r4, [r3, #16]
 8009560:	2c00      	cmp	r4, #0
 8009562:	d006      	beq.n	8009572 <_ZN15JUnitTestOutputD1Ev+0x2a>
 8009564:	4620      	mov	r0, r4
 8009566:	f7ff ffd7 	bl	8009518 <_ZN19JUnitTestOutputImplD1Ev>
 800956a:	2138      	movs	r1, #56	; 0x38
 800956c:	4620      	mov	r0, r4
 800956e:	f001 f819 	bl	800a5a4 <_ZdlPvj>
JUnitTestOutput::~JUnitTestOutput()
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4618      	mov	r0, r3
 8009576:	f007 f90b 	bl	8010790 <_ZN10TestOutputD1Ev>
}
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4618      	mov	r0, r3
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	bd90      	pop	{r4, r7, pc}
 8009584:	08028124 	.word	0x08028124

08009588 <_ZN15JUnitTestOutputD0Ev>:
JUnitTestOutput::~JUnitTestOutput()
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
}
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f7ff ffd9 	bl	8009548 <_ZN15JUnitTestOutputD1Ev>
 8009596:	2114      	movs	r1, #20
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f001 f803 	bl	800a5a4 <_ZdlPvj>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	4618      	mov	r0, r3
 80095a2:	3708      	adds	r7, #8
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <_ZN23JUnitTestCaseResultNodeD1Ev>:
struct JUnitTestCaseResultNode
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	3314      	adds	r3, #20
 80095b4:	4618      	mov	r0, r3
 80095b6:	f003 ff5c 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4618      	mov	r0, r3
 80095be:	f003 ff58 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	4618      	mov	r0, r3
 80095c6:	3708      	adds	r7, #8
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <_ZN15JUnitTestOutput20resetTestGroupResultEv>:

void JUnitTestOutput::resetTestGroupResult()
{
 80095cc:	b590      	push	{r4, r7, lr}
 80095ce:	b087      	sub	sp, #28
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
    impl_->results_.testCount_ = 0;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	691b      	ldr	r3, [r3, #16]
 80095d8:	2200      	movs	r2, #0
 80095da:	601a      	str	r2, [r3, #0]
    impl_->results_.failureCount_ = 0;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	691b      	ldr	r3, [r3, #16]
 80095e0:	2200      	movs	r2, #0
 80095e2:	605a      	str	r2, [r3, #4]
    impl_->results_.group_ = "";
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	691b      	ldr	r3, [r3, #16]
 80095e8:	f103 0414 	add.w	r4, r3, #20
 80095ec:	f107 0308 	add.w	r3, r7, #8
 80095f0:	491d      	ldr	r1, [pc, #116]	; (8009668 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x9c>)
 80095f2:	4618      	mov	r0, r3
 80095f4:	f003 fb85 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80095f8:	f107 0308 	add.w	r3, r7, #8
 80095fc:	4619      	mov	r1, r3
 80095fe:	4620      	mov	r0, r4
 8009600:	f003 fbeb 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 8009604:	f107 0308 	add.w	r3, r7, #8
 8009608:	4618      	mov	r0, r3
 800960a:	f003 ff32 	bl	800d472 <_ZN12SimpleStringD1Ev>
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	69db      	ldr	r3, [r3, #28]
 8009614:	617b      	str	r3, [r7, #20]
    while (cur) {
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d018      	beq.n	800964e <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x82>
        JUnitTestCaseResultNode* tmp = cur->next_;
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009620:	613b      	str	r3, [r7, #16]
        delete cur->failure_;
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d004      	beq.n	8009634 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x68>
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	3204      	adds	r2, #4
 800962e:	6812      	ldr	r2, [r2, #0]
 8009630:	4618      	mov	r0, r3
 8009632:	4790      	blx	r2
        delete cur;
 8009634:	697c      	ldr	r4, [r7, #20]
 8009636:	2c00      	cmp	r4, #0
 8009638:	d006      	beq.n	8009648 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x7c>
 800963a:	4620      	mov	r0, r4
 800963c:	f7ff ffb4 	bl	80095a8 <_ZN23JUnitTestCaseResultNodeD1Ev>
 8009640:	2128      	movs	r1, #40	; 0x28
 8009642:	4620      	mov	r0, r4
 8009644:	f000 ffae 	bl	800a5a4 <_ZdlPvj>
        cur = tmp;
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	617b      	str	r3, [r7, #20]
    while (cur) {
 800964c:	e7e3      	b.n	8009616 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x4a>
    }
    impl_->results_.head_ = NULLPTR;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	2200      	movs	r2, #0
 8009654:	61da      	str	r2, [r3, #28]
    impl_->results_.tail_ = NULLPTR;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	691b      	ldr	r3, [r3, #16]
 800965a:	2200      	movs	r2, #0
 800965c:	621a      	str	r2, [r3, #32]
}
 800965e:	bf00      	nop
 8009660:	371c      	adds	r7, #28
 8009662:	46bd      	mov	sp, r7
 8009664:	bd90      	pop	{r4, r7, pc}
 8009666:	bf00      	nop
 8009668:	08024138 	.word	0x08024138

0800966c <_ZN15JUnitTestOutput17printTestsStartedEv>:

void JUnitTestOutput::printTestsStarted()
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <_ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
}
 800968a:	bf00      	nop
 800968c:	370c      	adds	r7, #12
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr

08009696 <_ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult>:

void JUnitTestOutput::printCurrentTestEnded(const TestResult& result)
{
 8009696:	b590      	push	{r4, r7, lr}
 8009698:	b083      	sub	sp, #12
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
 800969e:	6039      	str	r1, [r7, #0]
    impl_->results_.tail_->execTime_ = result.getCurrentTestTotalExecutionTime();
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	6a1c      	ldr	r4, [r3, #32]
 80096a6:	6838      	ldr	r0, [r7, #0]
 80096a8:	f009 f9c6 	bl	8012a38 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 80096ac:	4603      	mov	r3, r0
 80096ae:	60a3      	str	r3, [r4, #8]
    impl_->results_.tail_->checkCount_ = result.getCheckCount();
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	691b      	ldr	r3, [r3, #16]
 80096b4:	6a1c      	ldr	r4, [r3, #32]
 80096b6:	6838      	ldr	r0, [r7, #0]
 80096b8:	f7ff fe8a 	bl	80093d0 <_ZNK10TestResult13getCheckCountEv>
 80096bc:	4603      	mov	r3, r0
 80096be:	6223      	str	r3, [r4, #32]
}
 80096c0:	bf00      	nop
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd90      	pop	{r4, r7, pc}

080096c8 <_ZN15JUnitTestOutput15printTestsEndedERK10TestResult>:

void JUnitTestOutput::printTestsEnded(const TestResult& /*result*/)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
}
 80096d2:	bf00      	nop
 80096d4:	370c      	adds	r7, #12
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr

080096de <_ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult>:

void JUnitTestOutput::printCurrentGroupEnded(const TestResult& result)
{
 80096de:	b590      	push	{r4, r7, lr}
 80096e0:	b083      	sub	sp, #12
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
 80096e6:	6039      	str	r1, [r7, #0]
    impl_->results_.groupExecTime_ = result.getCurrentGroupTotalExecutionTime();
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	691c      	ldr	r4, [r3, #16]
 80096ec:	6838      	ldr	r0, [r7, #0]
 80096ee:	f009 f9af 	bl	8012a50 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>
 80096f2:	4603      	mov	r3, r0
 80096f4:	6123      	str	r3, [r4, #16]
    writeTestGroupToFile();
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	3364      	adds	r3, #100	; 0x64
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	4798      	blx	r3
    resetTestGroupResult();
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f7ff ff62 	bl	80095cc <_ZN15JUnitTestOutput20resetTestGroupResultEv>
}
 8009708:	bf00      	nop
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	bd90      	pop	{r4, r7, pc}

08009710 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8009710:	b590      	push	{r4, r7, lr}
 8009712:	b089      	sub	sp, #36	; 0x24
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
    impl_->results_.testCount_++;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	691b      	ldr	r3, [r3, #16]
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	3201      	adds	r2, #1
 8009722:	601a      	str	r2, [r3, #0]
    impl_->results_.group_ = test.getGroup();
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	f103 0414 	add.w	r4, r3, #20
 800972c:	f107 0308 	add.w	r3, r7, #8
 8009730:	6839      	ldr	r1, [r7, #0]
 8009732:	4618      	mov	r0, r3
 8009734:	f009 fcef 	bl	8013116 <_ZNK10UtestShell8getGroupEv>
 8009738:	f107 0308 	add.w	r3, r7, #8
 800973c:	4619      	mov	r1, r3
 800973e:	4620      	mov	r0, r4
 8009740:	f003 fb4b 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 8009744:	f107 0308 	add.w	r3, r7, #8
 8009748:	4618      	mov	r0, r3
 800974a:	f003 fe92 	bl	800d472 <_ZN12SimpleStringD1Ev>
    impl_->results_.startTime_ = (size_t) GetPlatformSpecificTimeInMillis();
 800974e:	4b3c      	ldr	r3, [pc, #240]	; (8009840 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x130>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4798      	blx	r3
 8009754:	4602      	mov	r2, r0
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	691b      	ldr	r3, [r3, #16]
 800975a:	60da      	str	r2, [r3, #12]

    if (impl_->results_.tail_ == NULLPTR) {
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	6a1b      	ldr	r3, [r3, #32]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d110      	bne.n	8009788 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x78>
        impl_->results_.head_ = impl_->results_.tail_
                = new JUnitTestCaseResultNode;
 8009766:	2288      	movs	r2, #136	; 0x88
 8009768:	4936      	ldr	r1, [pc, #216]	; (8009844 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 800976a:	2028      	movs	r0, #40	; 0x28
 800976c:	f000 ff06 	bl	800a57c <_ZnwjPKci>
 8009770:	4604      	mov	r4, r0
 8009772:	4620      	mov	r0, r4
 8009774:	f7ff fe38 	bl	80093e8 <_ZN23JUnitTestCaseResultNodeC1Ev>
        impl_->results_.head_ = impl_->results_.tail_
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	691b      	ldr	r3, [r3, #16]
                = new JUnitTestCaseResultNode;
 800977c:	621c      	str	r4, [r3, #32]
        impl_->results_.head_ = impl_->results_.tail_
 800977e:	687a      	ldr	r2, [r7, #4]
 8009780:	6912      	ldr	r2, [r2, #16]
 8009782:	6a1b      	ldr	r3, [r3, #32]
 8009784:	61d3      	str	r3, [r2, #28]
 8009786:	e013      	b.n	80097b0 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0xa0>
    }
    else {
        impl_->results_.tail_->next_ = new JUnitTestCaseResultNode;
 8009788:	228b      	movs	r2, #139	; 0x8b
 800978a:	492e      	ldr	r1, [pc, #184]	; (8009844 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 800978c:	2028      	movs	r0, #40	; 0x28
 800978e:	f000 fef5 	bl	800a57c <_ZnwjPKci>
 8009792:	4604      	mov	r4, r0
 8009794:	4620      	mov	r0, r4
 8009796:	f7ff fe27 	bl	80093e8 <_ZN23JUnitTestCaseResultNodeC1Ev>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	691b      	ldr	r3, [r3, #16]
 800979e:	6a1b      	ldr	r3, [r3, #32]
 80097a0:	625c      	str	r4, [r3, #36]	; 0x24
        impl_->results_.tail_ = impl_->results_.tail_->next_;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	691b      	ldr	r3, [r3, #16]
 80097a6:	6a1a      	ldr	r2, [r3, #32]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	691b      	ldr	r3, [r3, #16]
 80097ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80097ae:	621a      	str	r2, [r3, #32]
    }
    impl_->results_.tail_->name_ = test.getName();
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	691b      	ldr	r3, [r3, #16]
 80097b4:	6a1b      	ldr	r3, [r3, #32]
 80097b6:	461c      	mov	r4, r3
 80097b8:	f107 0310 	add.w	r3, r7, #16
 80097bc:	6839      	ldr	r1, [r7, #0]
 80097be:	4618      	mov	r0, r3
 80097c0:	f009 fc9a 	bl	80130f8 <_ZNK10UtestShell7getNameEv>
 80097c4:	f107 0310 	add.w	r3, r7, #16
 80097c8:	4619      	mov	r1, r3
 80097ca:	4620      	mov	r0, r4
 80097cc:	f003 fb05 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 80097d0:	f107 0310 	add.w	r3, r7, #16
 80097d4:	4618      	mov	r0, r3
 80097d6:	f003 fe4c 	bl	800d472 <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->file_ = test.getFile();
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	691b      	ldr	r3, [r3, #16]
 80097de:	6a1b      	ldr	r3, [r3, #32]
 80097e0:	f103 0414 	add.w	r4, r3, #20
 80097e4:	f107 0318 	add.w	r3, r7, #24
 80097e8:	6839      	ldr	r1, [r7, #0]
 80097ea:	4618      	mov	r0, r3
 80097ec:	f009 fd55 	bl	801329a <_ZNK10UtestShell7getFileEv>
 80097f0:	f107 0318 	add.w	r3, r7, #24
 80097f4:	4619      	mov	r1, r3
 80097f6:	4620      	mov	r0, r4
 80097f8:	f003 faef 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 80097fc:	f107 0318 	add.w	r3, r7, #24
 8009800:	4618      	mov	r0, r3
 8009802:	f003 fe36 	bl	800d472 <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->lineNumber_ = test.getLineNumber();
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	691b      	ldr	r3, [r3, #16]
 800980a:	6a1c      	ldr	r4, [r3, #32]
 800980c:	6838      	ldr	r0, [r7, #0]
 800980e:	f009 fd53 	bl	80132b8 <_ZNK10UtestShell13getLineNumberEv>
 8009812:	4603      	mov	r3, r0
 8009814:	61e3      	str	r3, [r4, #28]
    if (!test.willRun()) {
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	3318      	adds	r3, #24
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	6838      	ldr	r0, [r7, #0]
 8009820:	4798      	blx	r3
 8009822:	4603      	mov	r3, r0
 8009824:	f083 0301 	eor.w	r3, r3, #1
 8009828:	b2db      	uxtb	r3, r3
 800982a:	2b00      	cmp	r3, #0
 800982c:	d004      	beq.n	8009838 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x128>
        impl_->results_.tail_->ignored_ = true;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	691b      	ldr	r3, [r3, #16]
 8009832:	6a1b      	ldr	r3, [r3, #32]
 8009834:	2201      	movs	r2, #1
 8009836:	741a      	strb	r2, [r3, #16]
    }
}
 8009838:	bf00      	nop
 800983a:	3724      	adds	r7, #36	; 0x24
 800983c:	46bd      	mov	sp, r7
 800983e:	bd90      	pop	{r4, r7, pc}
 8009840:	200000a8 	.word	0x200000a8
 8009844:	0802413c 	.word	0x0802413c

08009848 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::createFileName(const SimpleString& group)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b08a      	sub	sp, #40	; 0x28
 800984c:	af00      	add	r7, sp, #0
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	607a      	str	r2, [r7, #4]
    SimpleString fileName = "cpputest_";
 8009854:	f107 0310 	add.w	r3, r7, #16
 8009858:	4928      	ldr	r1, [pc, #160]	; (80098fc <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb4>)
 800985a:	4618      	mov	r0, r3
 800985c:	f003 fa51 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
    if (!impl_->package_.isEmpty()) {
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	691b      	ldr	r3, [r3, #16]
 8009864:	3328      	adds	r3, #40	; 0x28
 8009866:	4618      	mov	r0, r3
 8009868:	f003 fdf2 	bl	800d450 <_ZNK12SimpleString7isEmptyEv>
 800986c:	4603      	mov	r3, r0
 800986e:	f083 0301 	eor.w	r3, r3, #1
 8009872:	b2db      	uxtb	r3, r3
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00f      	beq.n	8009898 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0x50>
        fileName += impl_->package_;
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	691b      	ldr	r3, [r3, #16]
 800987c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8009880:	f107 0310 	add.w	r3, r7, #16
 8009884:	4611      	mov	r1, r2
 8009886:	4618      	mov	r0, r3
 8009888:	f003 fe70 	bl	800d56c <_ZN12SimpleStringpLERKS_>
        fileName += "_";
 800988c:	f107 0310 	add.w	r3, r7, #16
 8009890:	491b      	ldr	r1, [pc, #108]	; (8009900 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb8>)
 8009892:	4618      	mov	r0, r3
 8009894:	f003 fe7c 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    }
    fileName += group;
 8009898:	f107 0310 	add.w	r3, r7, #16
 800989c:	6879      	ldr	r1, [r7, #4]
 800989e:	4618      	mov	r0, r3
 80098a0:	f003 fe64 	bl	800d56c <_ZN12SimpleStringpLERKS_>
    return encodeFileName(fileName) + ".xml";
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	3384      	adds	r3, #132	; 0x84
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f107 0018 	add.w	r0, r7, #24
 80098b0:	f107 0210 	add.w	r2, r7, #16
 80098b4:	68b9      	ldr	r1, [r7, #8]
 80098b6:	4798      	blx	r3
 80098b8:	f107 0320 	add.w	r3, r7, #32
 80098bc:	4911      	ldr	r1, [pc, #68]	; (8009904 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xbc>)
 80098be:	4618      	mov	r0, r3
 80098c0:	f003 fa1f 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f107 0220 	add.w	r2, r7, #32
 80098ca:	f107 0118 	add.w	r1, r7, #24
 80098ce:	4618      	mov	r0, r3
 80098d0:	f003 fe31 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 80098d4:	f107 0320 	add.w	r3, r7, #32
 80098d8:	4618      	mov	r0, r3
 80098da:	f003 fdca 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80098de:	f107 0318 	add.w	r3, r7, #24
 80098e2:	4618      	mov	r0, r3
 80098e4:	f003 fdc5 	bl	800d472 <_ZN12SimpleStringD1Ev>
    SimpleString fileName = "cpputest_";
 80098e8:	f107 0310 	add.w	r3, r7, #16
 80098ec:	4618      	mov	r0, r3
 80098ee:	f003 fdc0 	bl	800d472 <_ZN12SimpleStringD1Ev>
    return encodeFileName(fileName) + ".xml";
 80098f2:	bf00      	nop
}
 80098f4:	68f8      	ldr	r0, [r7, #12]
 80098f6:	3728      	adds	r7, #40	; 0x28
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	08024158 	.word	0x08024158
 8009900:	08024164 	.word	0x08024164
 8009904:	08024168 	.word	0x08024168

08009908 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::encodeFileName(const SimpleString& fileName)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b086      	sub	sp, #24
 800990c:	af00      	add	r7, sp, #0
 800990e:	60f8      	str	r0, [r7, #12]
 8009910:	60b9      	str	r1, [r7, #8]
 8009912:	607a      	str	r2, [r7, #4]
    // special character list based on: https://en.wikipedia.org/wiki/Filename
    static const char* const forbiddenCharacters = "/\\?%*:|\"<>";

    SimpleString result = fileName;
 8009914:	6879      	ldr	r1, [r7, #4]
 8009916:	68f8      	ldr	r0, [r7, #12]
 8009918:	f003 fa47 	bl	800cdaa <_ZN12SimpleStringC1ERKS_>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 800991c:	4b0a      	ldr	r3, [pc, #40]	; (8009948 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x40>)
 800991e:	617b      	str	r3, [r7, #20]
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d00a      	beq.n	800993e <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x36>
        result.replace(*sym, '_');
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	225f      	movs	r2, #95	; 0x5f
 800992e:	4619      	mov	r1, r3
 8009930:	68f8      	ldr	r0, [r7, #12]
 8009932:	f003 fbcc 	bl	800d0ce <_ZN12SimpleString7replaceEcc>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	3301      	adds	r3, #1
 800993a:	617b      	str	r3, [r7, #20]
 800993c:	e7f0      	b.n	8009920 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x18>
    }
    return result;
 800993e:	bf00      	nop
}
 8009940:	68f8      	ldr	r0, [r7, #12]
 8009942:	3718      	adds	r7, #24
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}
 8009948:	08024170 	.word	0x08024170

0800994c <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>:

void JUnitTestOutput::setPackageName(const SimpleString& package)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
    if (impl_ != NULLPTR) {
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	691b      	ldr	r3, [r3, #16]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d006      	beq.n	800996c <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString+0x20>
        impl_->package_ = package;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	691b      	ldr	r3, [r3, #16]
 8009962:	3328      	adds	r3, #40	; 0x28
 8009964:	6839      	ldr	r1, [r7, #0]
 8009966:	4618      	mov	r0, r3
 8009968:	f003 fa37 	bl	800cdda <_ZN12SimpleStringaSERKS_>
    }
}
 800996c:	bf00      	nop
 800996e:	3708      	adds	r7, #8
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <_ZN15JUnitTestOutput14writeXmlHeaderEv>:

void JUnitTestOutput::writeXmlHeader()
{
 8009974:	b590      	push	{r4, r7, lr}
 8009976:	b085      	sub	sp, #20
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
    writeToFile("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	3368      	adds	r3, #104	; 0x68
 8009982:	681c      	ldr	r4, [r3, #0]
 8009984:	f107 0308 	add.w	r3, r7, #8
 8009988:	4908      	ldr	r1, [pc, #32]	; (80099ac <_ZN15JUnitTestOutput14writeXmlHeaderEv+0x38>)
 800998a:	4618      	mov	r0, r3
 800998c:	f003 f9b9 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8009990:	f107 0308 	add.w	r3, r7, #8
 8009994:	4619      	mov	r1, r3
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	47a0      	blx	r4
 800999a:	f107 0308 	add.w	r3, r7, #8
 800999e:	4618      	mov	r0, r3
 80099a0:	f003 fd67 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 80099a4:	bf00      	nop
 80099a6:	3714      	adds	r7, #20
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd90      	pop	{r4, r7, pc}
 80099ac:	0802417c 	.word	0x0802417c

080099b0 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv>:

void JUnitTestOutput::writeTestSuiteSummary()
{
 80099b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099b4:	b08a      	sub	sp, #40	; 0x28
 80099b6:	af04      	add	r7, sp, #16
 80099b8:	6078      	str	r0, [r7, #4]
    SimpleString
            buf =
                    StringFromFormat(
                            "<testsuite errors=\"0\" failures=\"%d\" hostname=\"localhost\" name=\"%s\" tests=\"%d\" time=\"%d.%03d\" timestamp=\"%s\">\n",
                            (int)impl_->results_.failureCount_,
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	691b      	ldr	r3, [r3, #16]
 80099be:	685b      	ldr	r3, [r3, #4]
                            impl_->results_.group_.asCharString(),
                            (int) impl_->results_.testCount_,
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
                            GetPlatformSpecificTimeString());
 80099c0:	4698      	mov	r8, r3
                            impl_->results_.group_.asCharString(),
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	691b      	ldr	r3, [r3, #16]
                            GetPlatformSpecificTimeString());
 80099c6:	3314      	adds	r3, #20
 80099c8:	4618      	mov	r0, r3
 80099ca:	f003 fd25 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 80099ce:	4604      	mov	r4, r0
                            (int) impl_->results_.testCount_,
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	691b      	ldr	r3, [r3, #16]
 80099d4:	681b      	ldr	r3, [r3, #0]
                            GetPlatformSpecificTimeString());
 80099d6:	461d      	mov	r5, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	691b      	ldr	r3, [r3, #16]
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	4a23      	ldr	r2, [pc, #140]	; (8009a6c <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 80099e0:	fba2 2303 	umull	r2, r3, r2, r3
 80099e4:	099b      	lsrs	r3, r3, #6
                            GetPlatformSpecificTimeString());
 80099e6:	461e      	mov	r6, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	691b      	ldr	r3, [r3, #16]
 80099ec:	691a      	ldr	r2, [r3, #16]
 80099ee:	4b1f      	ldr	r3, [pc, #124]	; (8009a6c <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 80099f0:	fba3 1302 	umull	r1, r3, r3, r2
 80099f4:	099b      	lsrs	r3, r3, #6
 80099f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80099fa:	fb01 f303 	mul.w	r3, r1, r3
 80099fe:	1ad3      	subs	r3, r2, r3
                            GetPlatformSpecificTimeString());
 8009a00:	603b      	str	r3, [r7, #0]
 8009a02:	4b1b      	ldr	r3, [pc, #108]	; (8009a70 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc0>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4798      	blx	r3
 8009a08:	4603      	mov	r3, r0
 8009a0a:	f107 0008 	add.w	r0, r7, #8
 8009a0e:	9303      	str	r3, [sp, #12]
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	9302      	str	r3, [sp, #8]
 8009a14:	9601      	str	r6, [sp, #4]
 8009a16:	9500      	str	r5, [sp, #0]
 8009a18:	4623      	mov	r3, r4
 8009a1a:	4642      	mov	r2, r8
 8009a1c:	4915      	ldr	r1, [pc, #84]	; (8009a74 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc4>)
 8009a1e:	f004 fa2f 	bl	800de80 <_Z16StringFromFormatPKcz>
    writeToFile(buf.asCharString());
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	3368      	adds	r3, #104	; 0x68
 8009a28:	681c      	ldr	r4, [r3, #0]
 8009a2a:	f107 0308 	add.w	r3, r7, #8
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f003 fcf2 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 8009a34:	4602      	mov	r2, r0
 8009a36:	f107 0310 	add.w	r3, r7, #16
 8009a3a:	4611      	mov	r1, r2
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f003 f960 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8009a42:	f107 0310 	add.w	r3, r7, #16
 8009a46:	4619      	mov	r1, r3
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	47a0      	blx	r4
 8009a4c:	f107 0310 	add.w	r3, r7, #16
 8009a50:	4618      	mov	r0, r3
 8009a52:	f003 fd0e 	bl	800d472 <_ZN12SimpleStringD1Ev>
                            GetPlatformSpecificTimeString());
 8009a56:	f107 0308 	add.w	r3, r7, #8
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f003 fd09 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 8009a60:	bf00      	nop
 8009a62:	3718      	adds	r7, #24
 8009a64:	46bd      	mov	sp, r7
 8009a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a6a:	bf00      	nop
 8009a6c:	10624dd3 	.word	0x10624dd3
 8009a70:	200000ac 	.word	0x200000ac
 8009a74:	080241a8 	.word	0x080241a8

08009a78 <_ZN15JUnitTestOutput15writePropertiesEv>:

void JUnitTestOutput::writeProperties()
{
 8009a78:	b590      	push	{r4, r7, lr}
 8009a7a:	b087      	sub	sp, #28
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
    writeToFile("<properties>\n");
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	3368      	adds	r3, #104	; 0x68
 8009a86:	681c      	ldr	r4, [r3, #0]
 8009a88:	f107 0308 	add.w	r3, r7, #8
 8009a8c:	4912      	ldr	r1, [pc, #72]	; (8009ad8 <_ZN15JUnitTestOutput15writePropertiesEv+0x60>)
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f003 f937 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8009a94:	f107 0308 	add.w	r3, r7, #8
 8009a98:	4619      	mov	r1, r3
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	47a0      	blx	r4
 8009a9e:	f107 0308 	add.w	r3, r7, #8
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f003 fce5 	bl	800d472 <_ZN12SimpleStringD1Ev>
    writeToFile("</properties>\n");
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	3368      	adds	r3, #104	; 0x68
 8009aae:	681c      	ldr	r4, [r3, #0]
 8009ab0:	f107 0310 	add.w	r3, r7, #16
 8009ab4:	4909      	ldr	r1, [pc, #36]	; (8009adc <_ZN15JUnitTestOutput15writePropertiesEv+0x64>)
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f003 f923 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8009abc:	f107 0310 	add.w	r3, r7, #16
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	47a0      	blx	r4
 8009ac6:	f107 0310 	add.w	r3, r7, #16
 8009aca:	4618      	mov	r0, r3
 8009acc:	f003 fcd1 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 8009ad0:	bf00      	nop
 8009ad2:	371c      	adds	r7, #28
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd90      	pop	{r4, r7, pc}
 8009ad8:	08024218 	.word	0x08024218
 8009adc:	08024228 	.word	0x08024228

08009ae0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString>:

SimpleString JUnitTestOutput::encodeXmlText(const SimpleString& textbody)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	60f8      	str	r0, [r7, #12]
 8009ae8:	60b9      	str	r1, [r7, #8]
 8009aea:	607a      	str	r2, [r7, #4]
    SimpleString buf = textbody.asCharString();
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f003 fc93 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 8009af2:	4603      	mov	r3, r0
 8009af4:	4619      	mov	r1, r3
 8009af6:	68f8      	ldr	r0, [r7, #12]
 8009af8:	f003 f903 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
    buf.replace("&", "&amp;");
 8009afc:	4a0e      	ldr	r2, [pc, #56]	; (8009b38 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x58>)
 8009afe:	490f      	ldr	r1, [pc, #60]	; (8009b3c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x5c>)
 8009b00:	68f8      	ldr	r0, [r7, #12]
 8009b02:	f003 fb13 	bl	800d12c <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\"", "&quot;");
 8009b06:	4a0e      	ldr	r2, [pc, #56]	; (8009b40 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x60>)
 8009b08:	490e      	ldr	r1, [pc, #56]	; (8009b44 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x64>)
 8009b0a:	68f8      	ldr	r0, [r7, #12]
 8009b0c:	f003 fb0e 	bl	800d12c <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("<", "&lt;");
 8009b10:	4a0d      	ldr	r2, [pc, #52]	; (8009b48 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x68>)
 8009b12:	490e      	ldr	r1, [pc, #56]	; (8009b4c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x6c>)
 8009b14:	68f8      	ldr	r0, [r7, #12]
 8009b16:	f003 fb09 	bl	800d12c <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace(">", "&gt;");
 8009b1a:	4a0d      	ldr	r2, [pc, #52]	; (8009b50 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x70>)
 8009b1c:	490d      	ldr	r1, [pc, #52]	; (8009b54 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x74>)
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	f003 fb04 	bl	800d12c <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\n", "{newline}");
 8009b24:	4a0c      	ldr	r2, [pc, #48]	; (8009b58 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x78>)
 8009b26:	490d      	ldr	r1, [pc, #52]	; (8009b5c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x7c>)
 8009b28:	68f8      	ldr	r0, [r7, #12]
 8009b2a:	f003 faff 	bl	800d12c <_ZN12SimpleString7replaceEPKcS1_>
    return buf;
 8009b2e:	bf00      	nop
}
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	3710      	adds	r7, #16
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	08024238 	.word	0x08024238
 8009b3c:	08024240 	.word	0x08024240
 8009b40:	08024244 	.word	0x08024244
 8009b44:	0802424c 	.word	0x0802424c
 8009b48:	08024250 	.word	0x08024250
 8009b4c:	08024258 	.word	0x08024258
 8009b50:	0802425c 	.word	0x0802425c
 8009b54:	08024264 	.word	0x08024264
 8009b58:	08024268 	.word	0x08024268
 8009b5c:	08024274 	.word	0x08024274

08009b60 <_ZN15JUnitTestOutput14writeTestCasesEv>:

void JUnitTestOutput::writeTestCases()
{
 8009b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b64:	b096      	sub	sp, #88	; 0x58
 8009b66:	af08      	add	r7, sp, #32
 8009b68:	60f8      	str	r0, [r7, #12]
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	691b      	ldr	r3, [r3, #16]
 8009b6e:	69db      	ldr	r3, [r3, #28]
 8009b70:	637b      	str	r3, [r7, #52]	; 0x34

    while (cur) {
 8009b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	f000 80b2 	beq.w	8009cde <_ZN15JUnitTestOutput14writeTestCasesEv+0x17e>
        SimpleString buf = StringFromFormat(
                "<testcase classname=\"%s%s%s\" name=\"%s\" assertions=\"%d\" time=\"%d.%03d\" file=\"%s\" line=\"%d\">\n",
                impl_->package_.asCharString(),
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	691b      	ldr	r3, [r3, #16]
                impl_->results_.group_.asCharString(),
                cur->name_.asCharString(),
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
                cur->file_.asCharString(),
                (int) cur->lineNumber_);
 8009b7e:	3328      	adds	r3, #40	; 0x28
 8009b80:	4618      	mov	r0, r3
 8009b82:	f003 fc49 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 8009b86:	4680      	mov	r8, r0
                impl_->package_.isEmpty() ? "" : ".",
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	691b      	ldr	r3, [r3, #16]
 8009b8c:	3328      	adds	r3, #40	; 0x28
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f003 fc5e 	bl	800d450 <_ZNK12SimpleString7isEmptyEv>
 8009b94:	4603      	mov	r3, r0
                (int) cur->lineNumber_);
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d001      	beq.n	8009b9e <_ZN15JUnitTestOutput14writeTestCasesEv+0x3e>
 8009b9a:	4c53      	ldr	r4, [pc, #332]	; (8009ce8 <_ZN15JUnitTestOutput14writeTestCasesEv+0x188>)
 8009b9c:	e000      	b.n	8009ba0 <_ZN15JUnitTestOutput14writeTestCasesEv+0x40>
 8009b9e:	4c53      	ldr	r4, [pc, #332]	; (8009cec <_ZN15JUnitTestOutput14writeTestCasesEv+0x18c>)
                impl_->results_.group_.asCharString(),
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	691b      	ldr	r3, [r3, #16]
                (int) cur->lineNumber_);
 8009ba4:	3314      	adds	r3, #20
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f003 fc36 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 8009bac:	4605      	mov	r5, r0
 8009bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f003 fc31 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 8009bb6:	4606      	mov	r6, r0
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
 8009bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bba:	6a1a      	ldr	r2, [r3, #32]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	691b      	ldr	r3, [r3, #16]
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8009bc4:	60bb      	str	r3, [r7, #8]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8009bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	4a49      	ldr	r2, [pc, #292]	; (8009cf0 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8009bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8009bd0:	099b      	lsrs	r3, r3, #6
                (int) cur->lineNumber_);
 8009bd2:	607b      	str	r3, [r7, #4]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8009bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bd6:	689a      	ldr	r2, [r3, #8]
 8009bd8:	4b45      	ldr	r3, [pc, #276]	; (8009cf0 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8009bda:	fba3 1302 	umull	r1, r3, r3, r2
 8009bde:	099b      	lsrs	r3, r3, #6
 8009be0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009be4:	fb01 f303 	mul.w	r3, r1, r3
 8009be8:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8009bea:	603b      	str	r3, [r7, #0]
 8009bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bee:	3314      	adds	r3, #20
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f003 fc11 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bfa:	69db      	ldr	r3, [r3, #28]
 8009bfc:	f107 0014 	add.w	r0, r7, #20
 8009c00:	9306      	str	r3, [sp, #24]
 8009c02:	9205      	str	r2, [sp, #20]
 8009c04:	683a      	ldr	r2, [r7, #0]
 8009c06:	9204      	str	r2, [sp, #16]
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	9203      	str	r2, [sp, #12]
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	9302      	str	r3, [sp, #8]
 8009c10:	9601      	str	r6, [sp, #4]
 8009c12:	9500      	str	r5, [sp, #0]
 8009c14:	4623      	mov	r3, r4
 8009c16:	4642      	mov	r2, r8
 8009c18:	4936      	ldr	r1, [pc, #216]	; (8009cf4 <_ZN15JUnitTestOutput14writeTestCasesEv+0x194>)
 8009c1a:	f004 f931 	bl	800de80 <_Z16StringFromFormatPKcz>
        writeToFile(buf.asCharString());
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	3368      	adds	r3, #104	; 0x68
 8009c24:	681c      	ldr	r4, [r3, #0]
 8009c26:	f107 0314 	add.w	r3, r7, #20
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f003 fbf4 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 8009c30:	4602      	mov	r2, r0
 8009c32:	f107 031c 	add.w	r3, r7, #28
 8009c36:	4611      	mov	r1, r2
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f003 f862 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8009c3e:	f107 031c 	add.w	r3, r7, #28
 8009c42:	4619      	mov	r1, r3
 8009c44:	68f8      	ldr	r0, [r7, #12]
 8009c46:	47a0      	blx	r4
 8009c48:	f107 031c 	add.w	r3, r7, #28
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f003 fc10 	bl	800d472 <_ZN12SimpleStringD1Ev>

        impl_->results_.totalCheckCount_ = cur->checkCount_;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c58:	6a12      	ldr	r2, [r2, #32]
 8009c5a:	609a      	str	r2, [r3, #8]

        if (cur->failure_) {
 8009c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d007      	beq.n	8009c74 <_ZN15JUnitTestOutput14writeTestCasesEv+0x114>
            writeFailure(cur);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	3388      	adds	r3, #136	; 0x88
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009c6e:	68f8      	ldr	r0, [r7, #12]
 8009c70:	4798      	blx	r3
 8009c72:	e017      	b.n	8009ca4 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
        }
        else if (cur->ignored_) {
 8009c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c76:	7c1b      	ldrb	r3, [r3, #16]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d013      	beq.n	8009ca4 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
            writeToFile("<skipped />\n");
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	3368      	adds	r3, #104	; 0x68
 8009c82:	681c      	ldr	r4, [r3, #0]
 8009c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c88:	491b      	ldr	r1, [pc, #108]	; (8009cf8 <_ZN15JUnitTestOutput14writeTestCasesEv+0x198>)
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f003 f839 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8009c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c94:	4619      	mov	r1, r3
 8009c96:	68f8      	ldr	r0, [r7, #12]
 8009c98:	47a0      	blx	r4
 8009c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f003 fbe7 	bl	800d472 <_ZN12SimpleStringD1Ev>
        }
        writeToFile("</testcase>\n");
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	3368      	adds	r3, #104	; 0x68
 8009caa:	681c      	ldr	r4, [r3, #0]
 8009cac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009cb0:	4912      	ldr	r1, [pc, #72]	; (8009cfc <_ZN15JUnitTestOutput14writeTestCasesEv+0x19c>)
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f003 f825 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8009cb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	68f8      	ldr	r0, [r7, #12]
 8009cc0:	47a0      	blx	r4
 8009cc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f003 fbd3 	bl	800d472 <_ZN12SimpleStringD1Ev>
        cur = cur->next_;
 8009ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd0:	637b      	str	r3, [r7, #52]	; 0x34
                (int) cur->lineNumber_);
 8009cd2:	f107 0314 	add.w	r3, r7, #20
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f003 fbcb 	bl	800d472 <_ZN12SimpleStringD1Ev>
    while (cur) {
 8009cdc:	e749      	b.n	8009b72 <_ZN15JUnitTestOutput14writeTestCasesEv+0x12>
    }
}
 8009cde:	bf00      	nop
 8009ce0:	3738      	adds	r7, #56	; 0x38
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ce8:	08024138 	.word	0x08024138
 8009cec:	08024278 	.word	0x08024278
 8009cf0:	10624dd3 	.word	0x10624dd3
 8009cf4:	0802427c 	.word	0x0802427c
 8009cf8:	080242d8 	.word	0x080242d8
 8009cfc:	080242e8 	.word	0x080242e8

08009d00 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode>:

void JUnitTestOutput::writeFailure(JUnitTestCaseResultNode* node)
{
 8009d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d02:	b091      	sub	sp, #68	; 0x44
 8009d04:	af02      	add	r7, sp, #8
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	6039      	str	r1, [r7, #0]
    SimpleString buf = StringFromFormat(
            "<failure message=\"%s:%d: %s\" type=\"AssertionFailedError\">\n",
            node->failure_->getFileName().asCharString(),
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	68d9      	ldr	r1, [r3, #12]
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	3308      	adds	r3, #8
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f107 0210 	add.w	r2, r7, #16
 8009d1c:	4610      	mov	r0, r2
 8009d1e:	4798      	blx	r3
            (int) node->failure_->getFailureLineNumber(),
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8009d20:	f107 0310 	add.w	r3, r7, #16
 8009d24:	4618      	mov	r0, r3
 8009d26:	f003 fb77 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 8009d2a:	4605      	mov	r5, r0
            (int) node->failure_->getFailureLineNumber(),
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	68da      	ldr	r2, [r3, #12]
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	68db      	ldr	r3, [r3, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	3314      	adds	r3, #20
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4610      	mov	r0, r2
 8009d3c:	4798      	blx	r3
 8009d3e:	4603      	mov	r3, r0
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8009d40:	461e      	mov	r6, r3
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	3380      	adds	r3, #128	; 0x80
 8009d48:	681c      	ldr	r4, [r3, #0]
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	68d9      	ldr	r1, [r3, #12]
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	3318      	adds	r3, #24
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f107 0220 	add.w	r2, r7, #32
 8009d5c:	4610      	mov	r0, r2
 8009d5e:	4798      	blx	r3
 8009d60:	f107 0318 	add.w	r3, r7, #24
 8009d64:	f107 0220 	add.w	r2, r7, #32
 8009d68:	6879      	ldr	r1, [r7, #4]
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	47a0      	blx	r4
 8009d6e:	f107 0318 	add.w	r3, r7, #24
 8009d72:	4618      	mov	r0, r3
 8009d74:	f003 fb50 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	f107 0008 	add.w	r0, r7, #8
 8009d7e:	9300      	str	r3, [sp, #0]
 8009d80:	4633      	mov	r3, r6
 8009d82:	462a      	mov	r2, r5
 8009d84:	4924      	ldr	r1, [pc, #144]	; (8009e18 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x118>)
 8009d86:	f004 f87b 	bl	800de80 <_Z16StringFromFormatPKcz>
 8009d8a:	f107 0318 	add.w	r3, r7, #24
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f003 fb6f 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8009d94:	f107 0320 	add.w	r3, r7, #32
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f003 fb6a 	bl	800d472 <_ZN12SimpleStringD1Ev>
            node->failure_->getFileName().asCharString(),
 8009d9e:	f107 0310 	add.w	r3, r7, #16
 8009da2:	4618      	mov	r0, r3
 8009da4:	f003 fb65 	bl	800d472 <_ZN12SimpleStringD1Ev>
    writeToFile(buf.asCharString());
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	3368      	adds	r3, #104	; 0x68
 8009dae:	681c      	ldr	r4, [r3, #0]
 8009db0:	f107 0308 	add.w	r3, r7, #8
 8009db4:	4618      	mov	r0, r3
 8009db6:	f003 fb2f 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009dc0:	4611      	mov	r1, r2
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f002 ff9d 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8009dc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009dcc:	4619      	mov	r1, r3
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	47a0      	blx	r4
 8009dd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f003 fb4b 	bl	800d472 <_ZN12SimpleStringD1Ev>
    writeToFile("</failure>\n");
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	3368      	adds	r3, #104	; 0x68
 8009de2:	681c      	ldr	r4, [r3, #0]
 8009de4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009de8:	490c      	ldr	r1, [pc, #48]	; (8009e1c <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x11c>)
 8009dea:	4618      	mov	r0, r3
 8009dec:	f002 ff89 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8009df0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009df4:	4619      	mov	r1, r3
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	47a0      	blx	r4
 8009dfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f003 fb37 	bl	800d472 <_ZN12SimpleStringD1Ev>
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8009e04:	f107 0308 	add.w	r3, r7, #8
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f003 fb32 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 8009e0e:	bf00      	nop
 8009e10:	373c      	adds	r7, #60	; 0x3c
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e16:	bf00      	nop
 8009e18:	080242f8 	.word	0x080242f8
 8009e1c:	08024334 	.word	0x08024334

08009e20 <_ZN15JUnitTestOutput15writeFileEndingEv>:


void JUnitTestOutput::writeFileEnding()
{
 8009e20:	b590      	push	{r4, r7, lr}
 8009e22:	b08d      	sub	sp, #52	; 0x34
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
    writeToFile("<system-out>");
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	3368      	adds	r3, #104	; 0x68
 8009e2e:	681c      	ldr	r4, [r3, #0]
 8009e30:	f107 0308 	add.w	r3, r7, #8
 8009e34:	4933      	ldr	r1, [pc, #204]	; (8009f04 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe4>)
 8009e36:	4618      	mov	r0, r3
 8009e38:	f002 ff63 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8009e3c:	f107 0308 	add.w	r3, r7, #8
 8009e40:	4619      	mov	r1, r3
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	47a0      	blx	r4
 8009e46:	f107 0308 	add.w	r3, r7, #8
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f003 fb11 	bl	800d472 <_ZN12SimpleStringD1Ev>
    writeToFile(encodeXmlText(impl_->stdOutput_));
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	3368      	adds	r3, #104	; 0x68
 8009e56:	681c      	ldr	r4, [r3, #0]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	3380      	adds	r3, #128	; 0x80
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	6912      	ldr	r2, [r2, #16]
 8009e64:	3230      	adds	r2, #48	; 0x30
 8009e66:	f107 0010 	add.w	r0, r7, #16
 8009e6a:	6879      	ldr	r1, [r7, #4]
 8009e6c:	4798      	blx	r3
 8009e6e:	f107 0310 	add.w	r3, r7, #16
 8009e72:	4619      	mov	r1, r3
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	47a0      	blx	r4
 8009e78:	f107 0310 	add.w	r3, r7, #16
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f003 faf8 	bl	800d472 <_ZN12SimpleStringD1Ev>
    writeToFile("</system-out>\n");
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	3368      	adds	r3, #104	; 0x68
 8009e88:	681c      	ldr	r4, [r3, #0]
 8009e8a:	f107 0318 	add.w	r3, r7, #24
 8009e8e:	491e      	ldr	r1, [pc, #120]	; (8009f08 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe8>)
 8009e90:	4618      	mov	r0, r3
 8009e92:	f002 ff36 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8009e96:	f107 0318 	add.w	r3, r7, #24
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	47a0      	blx	r4
 8009ea0:	f107 0318 	add.w	r3, r7, #24
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f003 fae4 	bl	800d472 <_ZN12SimpleStringD1Ev>
    writeToFile("<system-err></system-err>\n");
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	3368      	adds	r3, #104	; 0x68
 8009eb0:	681c      	ldr	r4, [r3, #0]
 8009eb2:	f107 0320 	add.w	r3, r7, #32
 8009eb6:	4915      	ldr	r1, [pc, #84]	; (8009f0c <_ZN15JUnitTestOutput15writeFileEndingEv+0xec>)
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f002 ff22 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8009ebe:	f107 0320 	add.w	r3, r7, #32
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	47a0      	blx	r4
 8009ec8:	f107 0320 	add.w	r3, r7, #32
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f003 fad0 	bl	800d472 <_ZN12SimpleStringD1Ev>
    writeToFile("</testsuite>\n");
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	3368      	adds	r3, #104	; 0x68
 8009ed8:	681c      	ldr	r4, [r3, #0]
 8009eda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009ede:	490c      	ldr	r1, [pc, #48]	; (8009f10 <_ZN15JUnitTestOutput15writeFileEndingEv+0xf0>)
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f002 ff0e 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8009ee6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009eea:	4619      	mov	r1, r3
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	47a0      	blx	r4
 8009ef0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f003 fabc 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 8009efa:	bf00      	nop
 8009efc:	3734      	adds	r7, #52	; 0x34
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd90      	pop	{r4, r7, pc}
 8009f02:	bf00      	nop
 8009f04:	08024340 	.word	0x08024340
 8009f08:	08024350 	.word	0x08024350
 8009f0c:	08024360 	.word	0x08024360
 8009f10:	0802437c 	.word	0x0802437c

08009f14 <_ZN15JUnitTestOutput20writeTestGroupToFileEv>:

void JUnitTestOutput::writeTestGroupToFile()
{
 8009f14:	b590      	push	{r4, r7, lr}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
    openFileForWrite(createFileName(impl_->results_.group_));
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	3360      	adds	r3, #96	; 0x60
 8009f22:	681c      	ldr	r4, [r3, #0]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	335c      	adds	r3, #92	; 0x5c
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	6912      	ldr	r2, [r2, #16]
 8009f30:	3214      	adds	r2, #20
 8009f32:	f107 0008 	add.w	r0, r7, #8
 8009f36:	6879      	ldr	r1, [r7, #4]
 8009f38:	4798      	blx	r3
 8009f3a:	f107 0308 	add.w	r3, r7, #8
 8009f3e:	4619      	mov	r1, r3
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	47a0      	blx	r4
 8009f44:	f107 0308 	add.w	r3, r7, #8
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f003 fa92 	bl	800d472 <_ZN12SimpleStringD1Ev>
    writeXmlHeader();
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	3370      	adds	r3, #112	; 0x70
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	4798      	blx	r3
    writeTestSuiteSummary();
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	3374      	adds	r3, #116	; 0x74
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	4798      	blx	r3
    writeProperties();
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	3378      	adds	r3, #120	; 0x78
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	4798      	blx	r3
    writeTestCases();
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	337c      	adds	r3, #124	; 0x7c
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	4798      	blx	r3
    writeFileEnding();
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	338c      	adds	r3, #140	; 0x8c
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	4798      	blx	r3
    closeFile();
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	336c      	adds	r3, #108	; 0x6c
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	4798      	blx	r3
}
 8009f96:	bf00      	nop
 8009f98:	3714      	adds	r7, #20
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd90      	pop	{r4, r7, pc}

08009f9e <_ZN15JUnitTestOutput11printBufferEPKc>:

// LCOV_EXCL_START

void JUnitTestOutput::printBuffer(const char*)
{
 8009f9e:	b480      	push	{r7}
 8009fa0:	b083      	sub	sp, #12
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
 8009fa6:	6039      	str	r1, [r7, #0]
}
 8009fa8:	bf00      	nop
 8009faa:	370c      	adds	r7, #12
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <_ZN15JUnitTestOutput5printEPKc>:

void JUnitTestOutput::print(const char *output)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b082      	sub	sp, #8
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
    impl_->stdOutput_ += output;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	691b      	ldr	r3, [r3, #16]
 8009fc2:	3330      	adds	r3, #48	; 0x30
 8009fc4:	6839      	ldr	r1, [r7, #0]
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f003 fae2 	bl	800d590 <_ZN12SimpleStringpLEPKc>
}
 8009fcc:	bf00      	nop
 8009fce:	3708      	adds	r7, #8
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <_ZN15JUnitTestOutput5printEl>:

void JUnitTestOutput::print(long)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
}
 8009fde:	bf00      	nop
 8009fe0:	370c      	adds	r7, #12
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr

08009fea <_ZN15JUnitTestOutput5printEj>:

void JUnitTestOutput::print(size_t)
{
 8009fea:	b480      	push	{r7}
 8009fec:	b083      	sub	sp, #12
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
 8009ff2:	6039      	str	r1, [r7, #0]
}
 8009ff4:	bf00      	nop
 8009ff6:	370c      	adds	r7, #12
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <_ZN15JUnitTestOutput5flushEv>:

void JUnitTestOutput::flush()
{
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
}
 800a008:	bf00      	nop
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <_ZN15JUnitTestOutput12printFailureERK11TestFailure>:

// LCOV_EXCL_STOP

void JUnitTestOutput::printFailure(const TestFailure& failure)
{
 800a014:	b590      	push	{r4, r7, lr}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	6039      	str	r1, [r7, #0]
    if (impl_->results_.tail_->failure_ == NULLPTR) {
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	691b      	ldr	r3, [r3, #16]
 800a022:	6a1b      	ldr	r3, [r3, #32]
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d113      	bne.n	800a052 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x3e>
        impl_->results_.failureCount_++;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	691b      	ldr	r3, [r3, #16]
 800a02e:	685a      	ldr	r2, [r3, #4]
 800a030:	3201      	adds	r2, #1
 800a032:	605a      	str	r2, [r3, #4]
        impl_->results_.tail_->failure_ = new TestFailure(failure);
 800a034:	f240 1233 	movw	r2, #307	; 0x133
 800a038:	4908      	ldr	r1, [pc, #32]	; (800a05c <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x48>)
 800a03a:	2034      	movs	r0, #52	; 0x34
 800a03c:	f000 fa9e 	bl	800a57c <_ZnwjPKci>
 800a040:	4604      	mov	r4, r0
 800a042:	6839      	ldr	r1, [r7, #0]
 800a044:	4620      	mov	r0, r4
 800a046:	f004 fd37 	bl	800eab8 <_ZN11TestFailureC1ERKS_>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	691b      	ldr	r3, [r3, #16]
 800a04e:	6a1b      	ldr	r3, [r3, #32]
 800a050:	60dc      	str	r4, [r3, #12]
    }
}
 800a052:	bf00      	nop
 800a054:	370c      	adds	r7, #12
 800a056:	46bd      	mov	sp, r7
 800a058:	bd90      	pop	{r4, r7, pc}
 800a05a:	bf00      	nop
 800a05c:	0802413c 	.word	0x0802413c

0800a060 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString>:

void JUnitTestOutput::openFileForWrite(const SimpleString& fileName)
{
 800a060:	b5b0      	push	{r4, r5, r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]
    impl_->file_ = PlatformSpecificFOpen(fileName.asCharString(), "w");
 800a06a:	4b08      	ldr	r3, [pc, #32]	; (800a08c <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x2c>)
 800a06c:	681d      	ldr	r5, [r3, #0]
 800a06e:	6838      	ldr	r0, [r7, #0]
 800a070:	f003 f9d2 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 800a074:	4602      	mov	r2, r0
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	691c      	ldr	r4, [r3, #16]
 800a07a:	4905      	ldr	r1, [pc, #20]	; (800a090 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x30>)
 800a07c:	4610      	mov	r0, r2
 800a07e:	47a8      	blx	r5
 800a080:	4603      	mov	r3, r0
 800a082:	6263      	str	r3, [r4, #36]	; 0x24
}
 800a084:	bf00      	nop
 800a086:	3708      	adds	r7, #8
 800a088:	46bd      	mov	sp, r7
 800a08a:	bdb0      	pop	{r4, r5, r7, pc}
 800a08c:	200000b4 	.word	0x200000b4
 800a090:	0802438c 	.word	0x0802438c

0800a094 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString>:

void JUnitTestOutput::writeToFile(const SimpleString& buffer)
{
 800a094:	b590      	push	{r4, r7, lr}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	6039      	str	r1, [r7, #0]
    PlatformSpecificFPuts(buffer.asCharString(), impl_->file_);
 800a09e:	4b08      	ldr	r3, [pc, #32]	; (800a0c0 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString+0x2c>)
 800a0a0:	681c      	ldr	r4, [r3, #0]
 800a0a2:	6838      	ldr	r0, [r7, #0]
 800a0a4:	f003 f9b8 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	4610      	mov	r0, r2
 800a0b4:	47a0      	blx	r4
}
 800a0b6:	bf00      	nop
 800a0b8:	370c      	adds	r7, #12
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd90      	pop	{r4, r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	200000b8 	.word	0x200000b8

0800a0c4 <_ZN15JUnitTestOutput9closeFileEv>:

void JUnitTestOutput::closeFile()
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
    PlatformSpecificFClose(impl_->file_);
 800a0cc:	4b05      	ldr	r3, [pc, #20]	; (800a0e4 <_ZN15JUnitTestOutput9closeFileEv+0x20>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	6912      	ldr	r2, [r2, #16]
 800a0d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a0d6:	4610      	mov	r0, r2
 800a0d8:	4798      	blx	r3
}
 800a0da:	bf00      	nop
 800a0dc:	3708      	adds	r7, #8
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	200000bc 	.word	0x200000bc

0800a0e8 <_ZN10TestPlugin14parseArgumentsEiPKPKci>:
    virtual bool parseArguments(int /* ac */, const char *const * /* av */, int /* index */ )
 800a0e8:	b480      	push	{r7}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
 800a0f4:	603b      	str	r3, [r7, #0]
        return false;
 800a0f6:	2300      	movs	r3, #0
    }
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3714      	adds	r7, #20
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <_ZN17MemoryLeakFailureD1Ev>:
class SimpleMutex;

class MemoryLeakFailure
{
public:
    virtual ~MemoryLeakFailure()
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
    {
 800a10c:	4a04      	ldr	r2, [pc, #16]	; (800a120 <_ZN17MemoryLeakFailureD1Ev+0x1c>)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	601a      	str	r2, [r3, #0]
    }
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	4618      	mov	r0, r3
 800a116:	370c      	adds	r7, #12
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr
 800a120:	080281d0 	.word	0x080281d0

0800a124 <_ZN17MemoryLeakFailureD0Ev>:
    virtual ~MemoryLeakFailure()
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
    }
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f7ff ffe9 	bl	800a104 <_ZN17MemoryLeakFailureD1Ev>
 800a132:	2104      	movs	r1, #4
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 fa35 	bl	800a5a4 <_ZdlPvj>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4618      	mov	r0, r3
 800a13e:	3708      	adds	r7, #8
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <_ZN18MemLeakScopedMutexC1Ev>:
#if CPPUTEST_USE_MEM_LEAK_DETECTION

class MemLeakScopedMutex
{
public:
    MemLeakScopedMutex() : lock(MemoryLeakWarningPlugin::getGlobalDetector()->getMutex()) { }
 800a144:	b590      	push	{r4, r7, lr}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	687c      	ldr	r4, [r7, #4]
 800a14e:	f000 fc71 	bl	800aa34 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a152:	4603      	mov	r3, r0
 800a154:	4618      	mov	r0, r3
 800a156:	f00c ff6c 	bl	8017032 <_ZN18MemoryLeakDetector8getMutexEv>
 800a15a:	4603      	mov	r3, r0
 800a15c:	4619      	mov	r1, r3
 800a15e:	4620      	mov	r0, r4
 800a160:	f002 fb24 	bl	800c7ac <_ZN15ScopedMutexLockC1EP11SimpleMutex>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4618      	mov	r0, r3
 800a168:	370c      	adds	r7, #12
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd90      	pop	{r4, r7, pc}

0800a16e <_ZN18MemLeakScopedMutexD1Ev>:
class MemLeakScopedMutex
 800a16e:	b580      	push	{r7, lr}
 800a170:	b082      	sub	sp, #8
 800a172:	af00      	add	r7, sp, #0
 800a174:	6078      	str	r0, [r7, #4]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	4618      	mov	r0, r3
 800a17a:	f002 fb29 	bl	800c7d0 <_ZN15ScopedMutexLockD1Ev>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	4618      	mov	r0, r3
 800a182:	3708      	adds	r7, #8
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <_ZL15mem_leak_mallocjPKcj>:
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
}


static void* mem_leak_malloc(size_t size, const char* file, size_t line)
{
 800a188:	b590      	push	{r4, r7, lr}
 800a18a:	b087      	sub	sp, #28
 800a18c:	af02      	add	r7, sp, #8
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	607a      	str	r2, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentMallocAllocator(), size, file, line, true);
 800a194:	f000 fc4e 	bl	800aa34 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a198:	4604      	mov	r4, r0
 800a19a:	f006 f8df 	bl	801035c <_Z25getCurrentMallocAllocatorv>
 800a19e:	4601      	mov	r1, r0
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	9301      	str	r3, [sp, #4]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	9300      	str	r3, [sp, #0]
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	68fa      	ldr	r2, [r7, #12]
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	f00d f983 	bl	80174b8 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800a1b2:	4603      	mov	r3, r0
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3714      	adds	r7, #20
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd90      	pop	{r4, r7, pc}

0800a1bc <_ZL13mem_leak_freePvPKcj>:

static void mem_leak_free(void* buffer, const char* file, size_t line)
{
 800a1bc:	b590      	push	{r4, r7, lr}
 800a1be:	b087      	sub	sp, #28
 800a1c0:	af02      	add	r7, sp, #8
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	607a      	str	r2, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) buffer);
 800a1c8:	f000 fc34 	bl	800aa34 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	68f9      	ldr	r1, [r7, #12]
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f00c ffdd 	bl	8017190 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentMallocAllocator(), (char*) buffer, file, line, true);
 800a1d6:	f000 fc2d 	bl	800aa34 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a1da:	4604      	mov	r4, r0
 800a1dc:	f006 f8be 	bl	801035c <_Z25getCurrentMallocAllocatorv>
 800a1e0:	4601      	mov	r1, r0
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	9301      	str	r3, [sp, #4]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	9300      	str	r3, [sp, #0]
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	68fa      	ldr	r2, [r7, #12]
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	f00d f996 	bl	8017520 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 800a1f4:	bf00      	nop
 800a1f6:	3714      	adds	r7, #20
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd90      	pop	{r4, r7, pc}

0800a1fc <_ZL16mem_leak_reallocPvjPKcj>:

static void* mem_leak_realloc(void* memory, size_t size, const char* file, size_t line)
{
 800a1fc:	b590      	push	{r4, r7, lr}
 800a1fe:	b089      	sub	sp, #36	; 0x24
 800a200:	af04      	add	r7, sp, #16
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	607a      	str	r2, [r7, #4]
 800a208:	603b      	str	r3, [r7, #0]
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
 800a20a:	f000 fc13 	bl	800aa34 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a20e:	4604      	mov	r4, r0
 800a210:	f006 f8a4 	bl	801035c <_Z25getCurrentMallocAllocatorv>
 800a214:	4601      	mov	r1, r0
 800a216:	2301      	movs	r3, #1
 800a218:	9302      	str	r3, [sp, #8]
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	9301      	str	r3, [sp, #4]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	9300      	str	r3, [sp, #0]
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	68fa      	ldr	r2, [r7, #12]
 800a226:	4620      	mov	r0, r4
 800a228:	f00d f9de 	bl	80175e8 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>
 800a22c:	4603      	mov	r3, r0
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3714      	adds	r7, #20
 800a232:	46bd      	mov	sp, r7
 800a234:	bd90      	pop	{r4, r7, pc}
	...

0800a238 <_ZL13normal_mallocjPKcj>:

#endif

static void* normal_malloc(size_t size, const char*, size_t)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	607a      	str	r2, [r7, #4]
    return PlatformSpecificMalloc(size);
 800a244:	4b04      	ldr	r3, [pc, #16]	; (800a258 <_ZL13normal_mallocjPKcj+0x20>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	4798      	blx	r3
 800a24c:	4603      	mov	r3, r0
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3710      	adds	r7, #16
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
 800a256:	bf00      	nop
 800a258:	200000c8 	.word	0x200000c8

0800a25c <_ZL14normal_reallocPvjPKcj>:

static void* normal_realloc(void* memory, size_t size, const char*, size_t)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	60b9      	str	r1, [r7, #8]
 800a266:	607a      	str	r2, [r7, #4]
 800a268:	603b      	str	r3, [r7, #0]
    return PlatformSpecificRealloc(memory, size);
 800a26a:	4b05      	ldr	r3, [pc, #20]	; (800a280 <_ZL14normal_reallocPvjPKcj+0x24>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	68b9      	ldr	r1, [r7, #8]
 800a270:	68f8      	ldr	r0, [r7, #12]
 800a272:	4798      	blx	r3
 800a274:	4603      	mov	r3, r0
}
 800a276:	4618      	mov	r0, r3
 800a278:	3710      	adds	r7, #16
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	200000cc 	.word	0x200000cc

0800a284 <_ZL11normal_freePvPKcj>:

static void normal_free(void* buffer, const char*, size_t)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	60b9      	str	r1, [r7, #8]
 800a28e:	607a      	str	r2, [r7, #4]
    PlatformSpecificFree(buffer);
 800a290:	4b03      	ldr	r3, [pc, #12]	; (800a2a0 <_ZL11normal_freePvPKcj+0x1c>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	68f8      	ldr	r0, [r7, #12]
 800a296:	4798      	blx	r3
}
 800a298:	bf00      	nop
 800a29a:	3710      	adds	r7, #16
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	200000d0 	.word	0x200000d0

0800a2a4 <_ZL32threadsafe_mem_leak_operator_newj>:
#else
#define UT_THROW_BAD_ALLOC_WHEN_NULL(memory)
#endif

static void* threadsafe_mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800a2a4:	b590      	push	{r4, r7, lr}
 800a2a6:	b085      	sub	sp, #20
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
    MemLeakScopedMutex lock;
 800a2ac:	f107 0308 	add.w	r3, r7, #8
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7ff ff47 	bl	800a144 <_ZN18MemLeakScopedMutexC1Ev>
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800a2b6:	f000 fbbd 	bl	800aa34 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a2ba:	4604      	mov	r4, r0
 800a2bc:	f005 ff9e 	bl	80101fc <_Z22getCurrentNewAllocatorv>
 800a2c0:	4601      	mov	r1, r0
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	f00d f864 	bl	8017394 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800a2cc:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a2ce:	68fc      	ldr	r4, [r7, #12]
    MemLeakScopedMutex lock;
 800a2d0:	f107 0308 	add.w	r3, r7, #8
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f7ff ff4a 	bl	800a16e <_ZN18MemLeakScopedMutexD1Ev>
    return memory;
 800a2da:	4623      	mov	r3, r4
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3714      	adds	r7, #20
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd90      	pop	{r4, r7, pc}

0800a2e4 <_ZL21mem_leak_operator_newj>:
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
}


static void* mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800a2e4:	b590      	push	{r4, r7, lr}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800a2ec:	f000 fba2 	bl	800aa34 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a2f0:	4604      	mov	r4, r0
 800a2f2:	f005 ff83 	bl	80101fc <_Z22getCurrentNewAllocatorv>
 800a2f6:	4601      	mov	r1, r0
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	f00d f849 	bl	8017394 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800a302:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a304:	68fb      	ldr	r3, [r7, #12]
}
 800a306:	4618      	mov	r0, r3
 800a308:	3714      	adds	r7, #20
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd90      	pop	{r4, r7, pc}

0800a30e <_ZL29mem_leak_operator_new_nothrowj>:

static void* mem_leak_operator_new_nothrow (size_t size) UT_NOTHROW
{
 800a30e:	b590      	push	{r4, r7, lr}
 800a310:	b083      	sub	sp, #12
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800a316:	f000 fb8d 	bl	800aa34 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a31a:	4604      	mov	r4, r0
 800a31c:	f005 ff6e 	bl	80101fc <_Z22getCurrentNewAllocatorv>
 800a320:	4601      	mov	r1, r0
 800a322:	2300      	movs	r3, #0
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	4620      	mov	r0, r4
 800a328:	f00d f834 	bl	8017394 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800a32c:	4603      	mov	r3, r0
}
 800a32e:	4618      	mov	r0, r3
 800a330:	370c      	adds	r7, #12
 800a332:	46bd      	mov	sp, r7
 800a334:	bd90      	pop	{r4, r7, pc}

0800a336 <_ZL27mem_leak_operator_new_debugjPKcj>:

static void* mem_leak_operator_new_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 800a336:	b590      	push	{r4, r7, lr}
 800a338:	b089      	sub	sp, #36	; 0x24
 800a33a:	af02      	add	r7, sp, #8
 800a33c:	60f8      	str	r0, [r7, #12]
 800a33e:	60b9      	str	r1, [r7, #8]
 800a340:	607a      	str	r2, [r7, #4]
    void *memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size, file, line);
 800a342:	f000 fb77 	bl	800aa34 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a346:	4604      	mov	r4, r0
 800a348:	f005 ff58 	bl	80101fc <_Z22getCurrentNewAllocatorv>
 800a34c:	4601      	mov	r1, r0
 800a34e:	2300      	movs	r3, #0
 800a350:	9301      	str	r3, [sp, #4]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	9300      	str	r3, [sp, #0]
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	4620      	mov	r0, r4
 800a35c:	f00d f8ac 	bl	80174b8 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800a360:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a362:	697b      	ldr	r3, [r7, #20]
}
 800a364:	4618      	mov	r0, r3
 800a366:	371c      	adds	r7, #28
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd90      	pop	{r4, r7, pc}

0800a36c <_ZL27mem_leak_operator_new_arrayj>:

static void* mem_leak_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 800a36c:	b590      	push	{r4, r7, lr}
 800a36e:	b085      	sub	sp, #20
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 800a374:	f000 fb5e 	bl	800aa34 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a378:	4604      	mov	r4, r0
 800a37a:	f005 ff97 	bl	80102ac <_Z27getCurrentNewArrayAllocatorv>
 800a37e:	4601      	mov	r1, r0
 800a380:	2300      	movs	r3, #0
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	4620      	mov	r0, r4
 800a386:	f00d f805 	bl	8017394 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800a38a:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a38c:	68fb      	ldr	r3, [r7, #12]
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3714      	adds	r7, #20
 800a392:	46bd      	mov	sp, r7
 800a394:	bd90      	pop	{r4, r7, pc}

0800a396 <_ZL35mem_leak_operator_new_array_nothrowj>:

static void* mem_leak_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 800a396:	b590      	push	{r4, r7, lr}
 800a398:	b083      	sub	sp, #12
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 800a39e:	f000 fb49 	bl	800aa34 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a3a2:	4604      	mov	r4, r0
 800a3a4:	f005 ff82 	bl	80102ac <_Z27getCurrentNewArrayAllocatorv>
 800a3a8:	4601      	mov	r1, r0
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	f00c fff0 	bl	8017394 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800a3b4:	4603      	mov	r3, r0
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	370c      	adds	r7, #12
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd90      	pop	{r4, r7, pc}

0800a3be <_ZL33mem_leak_operator_new_array_debugjPKcj>:

static void* mem_leak_operator_new_array_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 800a3be:	b590      	push	{r4, r7, lr}
 800a3c0:	b089      	sub	sp, #36	; 0x24
 800a3c2:	af02      	add	r7, sp, #8
 800a3c4:	60f8      	str	r0, [r7, #12]
 800a3c6:	60b9      	str	r1, [r7, #8]
 800a3c8:	607a      	str	r2, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size, file, line);
 800a3ca:	f000 fb33 	bl	800aa34 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a3ce:	4604      	mov	r4, r0
 800a3d0:	f005 ff6c 	bl	80102ac <_Z27getCurrentNewArrayAllocatorv>
 800a3d4:	4601      	mov	r1, r0
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	9301      	str	r3, [sp, #4]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	9300      	str	r3, [sp, #0]
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f00d f868 	bl	80174b8 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800a3e8:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a3ea:	697b      	ldr	r3, [r7, #20]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	371c      	adds	r7, #28
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd90      	pop	{r4, r7, pc}

0800a3f4 <_ZL24mem_leak_operator_deletePv>:

static void mem_leak_operator_delete (void* mem) UT_NOTHROW
{
 800a3f4:	b590      	push	{r4, r7, lr}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 800a3fc:	f000 fb1a 	bl	800aa34 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a400:	4603      	mov	r3, r0
 800a402:	6879      	ldr	r1, [r7, #4]
 800a404:	4618      	mov	r0, r3
 800a406:	f00c fec3 	bl	8017190 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewAllocator(), (char*) mem);
 800a40a:	f000 fb13 	bl	800aa34 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a40e:	4604      	mov	r4, r0
 800a410:	f005 fef4 	bl	80101fc <_Z22getCurrentNewAllocatorv>
 800a414:	4601      	mov	r1, r0
 800a416:	2300      	movs	r3, #0
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	4620      	mov	r0, r4
 800a41c:	f00d f8ca 	bl	80175b4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 800a420:	bf00      	nop
 800a422:	370c      	adds	r7, #12
 800a424:	46bd      	mov	sp, r7
 800a426:	bd90      	pop	{r4, r7, pc}

0800a428 <_ZL30mem_leak_operator_delete_arrayPv>:

static void mem_leak_operator_delete_array (void* mem) UT_NOTHROW
{
 800a428:	b590      	push	{r4, r7, lr}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 800a430:	f000 fb00 	bl	800aa34 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a434:	4603      	mov	r3, r0
 800a436:	6879      	ldr	r1, [r7, #4]
 800a438:	4618      	mov	r0, r3
 800a43a:	f00c fea9 	bl	8017190 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
 800a43e:	f000 faf9 	bl	800aa34 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a442:	4604      	mov	r4, r0
 800a444:	f005 ff32 	bl	80102ac <_Z27getCurrentNewArrayAllocatorv>
 800a448:	4601      	mov	r1, r0
 800a44a:	2300      	movs	r3, #0
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	4620      	mov	r0, r4
 800a450:	f00d f8b0 	bl	80175b4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 800a454:	bf00      	nop
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd90      	pop	{r4, r7, pc}

0800a45c <_ZL19normal_operator_newj>:

static void* normal_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800a464:	4b04      	ldr	r3, [pc, #16]	; (800a478 <_ZL19normal_operator_newj+0x1c>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	4798      	blx	r3
 800a46c:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a46e:	68fb      	ldr	r3, [r7, #12]
}
 800a470:	4618      	mov	r0, r3
 800a472:	3710      	adds	r7, #16
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	200000c8 	.word	0x200000c8

0800a47c <_ZL27normal_operator_new_nothrowj>:

static void* normal_operator_new_nothrow (size_t size) UT_NOTHROW
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 800a484:	4b04      	ldr	r3, [pc, #16]	; (800a498 <_ZL27normal_operator_new_nothrowj+0x1c>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	4798      	blx	r3
 800a48c:	4603      	mov	r3, r0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3708      	adds	r7, #8
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	200000c8 	.word	0x200000c8

0800a49c <_ZL25normal_operator_new_debugjPKcj>:

static void* normal_operator_new_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b086      	sub	sp, #24
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	60f8      	str	r0, [r7, #12]
 800a4a4:	60b9      	str	r1, [r7, #8]
 800a4a6:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800a4a8:	4b04      	ldr	r3, [pc, #16]	; (800a4bc <_ZL25normal_operator_new_debugjPKcj+0x20>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	68f8      	ldr	r0, [r7, #12]
 800a4ae:	4798      	blx	r3
 800a4b0:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a4b2:	697b      	ldr	r3, [r7, #20]
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3718      	adds	r7, #24
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}
 800a4bc:	200000c8 	.word	0x200000c8

0800a4c0 <_ZL25normal_operator_new_arrayj>:

static void* normal_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800a4c8:	4b04      	ldr	r3, [pc, #16]	; (800a4dc <_ZL25normal_operator_new_arrayj+0x1c>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	4798      	blx	r3
 800a4d0:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3710      	adds	r7, #16
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}
 800a4dc:	200000c8 	.word	0x200000c8

0800a4e0 <_ZL33normal_operator_new_array_nothrowj>:

static void* normal_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b082      	sub	sp, #8
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 800a4e8:	4b04      	ldr	r3, [pc, #16]	; (800a4fc <_ZL33normal_operator_new_array_nothrowj+0x1c>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	4798      	blx	r3
 800a4f0:	4603      	mov	r3, r0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3708      	adds	r7, #8
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	200000c8 	.word	0x200000c8

0800a500 <_ZL31normal_operator_new_array_debugjPKcj>:

static void* normal_operator_new_array_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b086      	sub	sp, #24
 800a504:	af00      	add	r7, sp, #0
 800a506:	60f8      	str	r0, [r7, #12]
 800a508:	60b9      	str	r1, [r7, #8]
 800a50a:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800a50c:	4b04      	ldr	r3, [pc, #16]	; (800a520 <_ZL31normal_operator_new_array_debugjPKcj+0x20>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	68f8      	ldr	r0, [r7, #12]
 800a512:	4798      	blx	r3
 800a514:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a516:	697b      	ldr	r3, [r7, #20]
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3718      	adds	r7, #24
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}
 800a520:	200000c8 	.word	0x200000c8

0800a524 <_ZL22normal_operator_deletePv>:

static void normal_operator_delete (void* mem) UT_NOTHROW
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 800a52c:	4b03      	ldr	r3, [pc, #12]	; (800a53c <_ZL22normal_operator_deletePv+0x18>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	4798      	blx	r3
}
 800a534:	bf00      	nop
 800a536:	3708      	adds	r7, #8
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}
 800a53c:	200000d0 	.word	0x200000d0

0800a540 <_ZL28normal_operator_delete_arrayPv>:

static void normal_operator_delete_array (void* mem) UT_NOTHROW
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b082      	sub	sp, #8
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 800a548:	4b03      	ldr	r3, [pc, #12]	; (800a558 <_ZL28normal_operator_delete_arrayPv+0x18>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	4798      	blx	r3
}
 800a550:	bf00      	nop
 800a552:	3708      	adds	r7, #8
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	200000d0 	.word	0x200000d0

0800a55c <_Znwj>:
static void (*saved_operator_delete_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete;
static void (*saved_operator_delete_array_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete_array;
static int save_counter = 0;

void* operator new(size_t size) UT_THROW(std::bad_alloc)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b082      	sub	sp, #8
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
    return operator_new_fptr(size);
 800a564:	4b04      	ldr	r3, [pc, #16]	; (800a578 <_Znwj+0x1c>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	4798      	blx	r3
 800a56c:	4603      	mov	r3, r0
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3708      	adds	r7, #8
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
 800a576:	bf00      	nop
 800a578:	2000002c 	.word	0x2000002c

0800a57c <_ZnwjPKci>:

void* operator new(size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	60b9      	str	r1, [r7, #8]
 800a586:	607a      	str	r2, [r7, #4]
    return operator_new_debug_fptr(size, file, (size_t)line);
 800a588:	4b05      	ldr	r3, [pc, #20]	; (800a5a0 <_ZnwjPKci+0x24>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	68b9      	ldr	r1, [r7, #8]
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	4798      	blx	r3
 800a594:	4603      	mov	r3, r0
}
 800a596:	4618      	mov	r0, r3
 800a598:	3710      	adds	r7, #16
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	20000034 	.word	0x20000034

0800a5a4 <_ZdlPvj>:
    operator_delete_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete (void* mem, size_t) UT_NOTHROW
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
    operator_delete_fptr(mem);
 800a5ae:	4b04      	ldr	r3, [pc, #16]	; (800a5c0 <_ZdlPvj+0x1c>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	4798      	blx	r3
}
 800a5b6:	bf00      	nop
 800a5b8:	3708      	adds	r7, #8
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	20000044 	.word	0x20000044

0800a5c4 <_ZnajPKci>:
{
    return operator_new_array_fptr(size);
}

void* operator new [](size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b084      	sub	sp, #16
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	607a      	str	r2, [r7, #4]
    return operator_new_array_debug_fptr(size, file, (size_t)line);
 800a5d0:	4b05      	ldr	r3, [pc, #20]	; (800a5e8 <_ZnajPKci+0x24>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	68b9      	ldr	r1, [r7, #8]
 800a5d8:	68f8      	ldr	r0, [r7, #12]
 800a5da:	4798      	blx	r3
 800a5dc:	4603      	mov	r3, r0
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3710      	adds	r7, #16
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	20000040 	.word	0x20000040

0800a5ec <_ZdaPv>:
{
    return operator_new_array_debug_fptr(size, file, line);
}

void operator delete[](void* mem) UT_NOTHROW
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
     operator_delete_array_fptr(mem);
 800a5f4:	4b03      	ldr	r3, [pc, #12]	; (800a604 <_ZdaPv+0x18>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	4798      	blx	r3
}
 800a5fc:	bf00      	nop
 800a5fe:	3708      	adds	r7, #8
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}
 800a604:	20000048 	.word	0x20000048

0800a608 <_ZdaPvj>:
     operator_delete_array_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete[] (void* mem, size_t) UT_NOTHROW
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
     operator_delete_array_fptr(mem);
 800a612:	4b04      	ldr	r3, [pc, #16]	; (800a624 <_ZdaPvj+0x1c>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	4798      	blx	r3
}
 800a61a:	bf00      	nop
 800a61c:	3708      	adds	r7, #8
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	20000048 	.word	0x20000048

0800a628 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>:

#endif
#endif

void MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
{
 800a628:	b480      	push	{r7}
 800a62a:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    operator_new_fptr = normal_operator_new;
 800a62c:	4b12      	ldr	r3, [pc, #72]	; (800a678 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x50>)
 800a62e:	4a13      	ldr	r2, [pc, #76]	; (800a67c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x54>)
 800a630:	601a      	str	r2, [r3, #0]
    operator_new_nothrow_fptr = normal_operator_new_nothrow;
 800a632:	4b13      	ldr	r3, [pc, #76]	; (800a680 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x58>)
 800a634:	4a13      	ldr	r2, [pc, #76]	; (800a684 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x5c>)
 800a636:	601a      	str	r2, [r3, #0]
    operator_new_debug_fptr = normal_operator_new_debug;
 800a638:	4b13      	ldr	r3, [pc, #76]	; (800a688 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x60>)
 800a63a:	4a14      	ldr	r2, [pc, #80]	; (800a68c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x64>)
 800a63c:	601a      	str	r2, [r3, #0]
    operator_new_array_fptr = normal_operator_new_array;
 800a63e:	4b14      	ldr	r3, [pc, #80]	; (800a690 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x68>)
 800a640:	4a14      	ldr	r2, [pc, #80]	; (800a694 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x6c>)
 800a642:	601a      	str	r2, [r3, #0]
    operator_new_array_nothrow_fptr = normal_operator_new_array_nothrow;
 800a644:	4b14      	ldr	r3, [pc, #80]	; (800a698 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x70>)
 800a646:	4a15      	ldr	r2, [pc, #84]	; (800a69c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x74>)
 800a648:	601a      	str	r2, [r3, #0]
    operator_new_array_debug_fptr = normal_operator_new_array_debug;
 800a64a:	4b15      	ldr	r3, [pc, #84]	; (800a6a0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x78>)
 800a64c:	4a15      	ldr	r2, [pc, #84]	; (800a6a4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x7c>)
 800a64e:	601a      	str	r2, [r3, #0]
    operator_delete_fptr = normal_operator_delete;
 800a650:	4b15      	ldr	r3, [pc, #84]	; (800a6a8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x80>)
 800a652:	4a16      	ldr	r2, [pc, #88]	; (800a6ac <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x84>)
 800a654:	601a      	str	r2, [r3, #0]
    operator_delete_array_fptr = normal_operator_delete_array;
 800a656:	4b16      	ldr	r3, [pc, #88]	; (800a6b0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x88>)
 800a658:	4a16      	ldr	r2, [pc, #88]	; (800a6b4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x8c>)
 800a65a:	601a      	str	r2, [r3, #0]
    malloc_fptr = normal_malloc;
 800a65c:	4b16      	ldr	r3, [pc, #88]	; (800a6b8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x90>)
 800a65e:	4a17      	ldr	r2, [pc, #92]	; (800a6bc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x94>)
 800a660:	601a      	str	r2, [r3, #0]
    realloc_fptr = normal_realloc;
 800a662:	4b17      	ldr	r3, [pc, #92]	; (800a6c0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x98>)
 800a664:	4a17      	ldr	r2, [pc, #92]	; (800a6c4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x9c>)
 800a666:	601a      	str	r2, [r3, #0]
    free_fptr = normal_free;
 800a668:	4b17      	ldr	r3, [pc, #92]	; (800a6c8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa0>)
 800a66a:	4a18      	ldr	r2, [pc, #96]	; (800a6cc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa4>)
 800a66c:	601a      	str	r2, [r3, #0]

#endif
}
 800a66e:	bf00      	nop
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr
 800a678:	2000002c 	.word	0x2000002c
 800a67c:	0800a45d 	.word	0x0800a45d
 800a680:	20000030 	.word	0x20000030
 800a684:	0800a47d 	.word	0x0800a47d
 800a688:	20000034 	.word	0x20000034
 800a68c:	0800a49d 	.word	0x0800a49d
 800a690:	20000038 	.word	0x20000038
 800a694:	0800a4c1 	.word	0x0800a4c1
 800a698:	2000003c 	.word	0x2000003c
 800a69c:	0800a4e1 	.word	0x0800a4e1
 800a6a0:	20000040 	.word	0x20000040
 800a6a4:	0800a501 	.word	0x0800a501
 800a6a8:	20000044 	.word	0x20000044
 800a6ac:	0800a525 	.word	0x0800a525
 800a6b0:	20000048 	.word	0x20000048
 800a6b4:	0800a541 	.word	0x0800a541
 800a6b8:	20000014 	.word	0x20000014
 800a6bc:	0800a239 	.word	0x0800a239
 800a6c0:	2000001c 	.word	0x2000001c
 800a6c4:	0800a25d 	.word	0x0800a25d
 800a6c8:	20000018 	.word	0x20000018
 800a6cc:	0800a285 	.word	0x0800a285

0800a6d0 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>:
    free_fptr = threadsafe_mem_leak_free;
#endif
}

bool MemoryLeakWarningPlugin::areNewDeleteOverloaded()
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    return operator_new_fptr == mem_leak_operator_new || operator_new_fptr == threadsafe_mem_leak_operator_new;
 800a6d4:	4b08      	ldr	r3, [pc, #32]	; (800a6f8 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4a08      	ldr	r2, [pc, #32]	; (800a6fc <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x2c>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d004      	beq.n	800a6e8 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x18>
 800a6de:	4b06      	ldr	r3, [pc, #24]	; (800a6f8 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	4a07      	ldr	r2, [pc, #28]	; (800a700 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x30>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d101      	bne.n	800a6ec <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1c>
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e000      	b.n	800a6ee <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1e>
 800a6ec:	2300      	movs	r3, #0
#else
    return false;
#endif
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr
 800a6f8:	2000002c 	.word	0x2000002c
 800a6fc:	0800a2e5 	.word	0x0800a2e5
 800a700:	0800a2a5 	.word	0x0800a2a5

0800a704 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
{
 800a704:	b580      	push	{r7, lr}
 800a706:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (++save_counter > 1) return;
 800a708:	4b1f      	ldr	r3, [pc, #124]	; (800a788 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	3301      	adds	r3, #1
 800a70e:	4a1e      	ldr	r2, [pc, #120]	; (800a788 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800a710:	6013      	str	r3, [r2, #0]
 800a712:	4b1d      	ldr	r3, [pc, #116]	; (800a788 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	2b01      	cmp	r3, #1
 800a718:	bfcc      	ite	gt
 800a71a:	2301      	movgt	r3, #1
 800a71c:	2300      	movle	r3, #0
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	2b00      	cmp	r3, #0
 800a722:	d12e      	bne.n	800a782 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x7e>
    saved_operator_new_fptr = operator_new_fptr;
 800a724:	4b19      	ldr	r3, [pc, #100]	; (800a78c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x88>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4a19      	ldr	r2, [pc, #100]	; (800a790 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x8c>)
 800a72a:	6013      	str	r3, [r2, #0]
    saved_operator_new_nothrow_fptr = operator_new_nothrow_fptr;
 800a72c:	4b19      	ldr	r3, [pc, #100]	; (800a794 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x90>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a19      	ldr	r2, [pc, #100]	; (800a798 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x94>)
 800a732:	6013      	str	r3, [r2, #0]
    saved_operator_new_debug_fptr = operator_new_debug_fptr;
 800a734:	4b19      	ldr	r3, [pc, #100]	; (800a79c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x98>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4a19      	ldr	r2, [pc, #100]	; (800a7a0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x9c>)
 800a73a:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_fptr = operator_new_array_fptr;
 800a73c:	4b19      	ldr	r3, [pc, #100]	; (800a7a4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa0>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a19      	ldr	r2, [pc, #100]	; (800a7a8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa4>)
 800a742:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_nothrow_fptr = operator_new_array_nothrow_fptr;
 800a744:	4b19      	ldr	r3, [pc, #100]	; (800a7ac <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa8>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a19      	ldr	r2, [pc, #100]	; (800a7b0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xac>)
 800a74a:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_debug_fptr = operator_new_array_debug_fptr;
 800a74c:	4b19      	ldr	r3, [pc, #100]	; (800a7b4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb0>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a19      	ldr	r2, [pc, #100]	; (800a7b8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb4>)
 800a752:	6013      	str	r3, [r2, #0]
    saved_operator_delete_fptr = operator_delete_fptr;
 800a754:	4b19      	ldr	r3, [pc, #100]	; (800a7bc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb8>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a19      	ldr	r2, [pc, #100]	; (800a7c0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xbc>)
 800a75a:	6013      	str	r3, [r2, #0]
    saved_operator_delete_array_fptr = operator_delete_array_fptr;
 800a75c:	4b19      	ldr	r3, [pc, #100]	; (800a7c4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc0>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a19      	ldr	r2, [pc, #100]	; (800a7c8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc4>)
 800a762:	6013      	str	r3, [r2, #0]
    saved_malloc_fptr = malloc_fptr;
 800a764:	4b19      	ldr	r3, [pc, #100]	; (800a7cc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc8>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a19      	ldr	r2, [pc, #100]	; (800a7d0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xcc>)
 800a76a:	6013      	str	r3, [r2, #0]
    saved_realloc_fptr = realloc_fptr;
 800a76c:	4b19      	ldr	r3, [pc, #100]	; (800a7d4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd0>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a19      	ldr	r2, [pc, #100]	; (800a7d8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd4>)
 800a772:	6013      	str	r3, [r2, #0]
    saved_free_fptr = free_fptr;
 800a774:	4b19      	ldr	r3, [pc, #100]	; (800a7dc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd8>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a19      	ldr	r2, [pc, #100]	; (800a7e0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xdc>)
 800a77a:	6013      	str	r3, [r2, #0]
    turnOffNewDeleteOverloads();
 800a77c:	f7ff ff54 	bl	800a628 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
 800a780:	e000      	b.n	800a784 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x80>
    if (++save_counter > 1) return;
 800a782:	bf00      	nop
#endif
}
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	20000848 	.word	0x20000848
 800a78c:	2000002c 	.word	0x2000002c
 800a790:	2000004c 	.word	0x2000004c
 800a794:	20000030 	.word	0x20000030
 800a798:	20000050 	.word	0x20000050
 800a79c:	20000034 	.word	0x20000034
 800a7a0:	20000054 	.word	0x20000054
 800a7a4:	20000038 	.word	0x20000038
 800a7a8:	20000058 	.word	0x20000058
 800a7ac:	2000003c 	.word	0x2000003c
 800a7b0:	2000005c 	.word	0x2000005c
 800a7b4:	20000040 	.word	0x20000040
 800a7b8:	20000060 	.word	0x20000060
 800a7bc:	20000044 	.word	0x20000044
 800a7c0:	20000064 	.word	0x20000064
 800a7c4:	20000048 	.word	0x20000048
 800a7c8:	20000068 	.word	0x20000068
 800a7cc:	20000014 	.word	0x20000014
 800a7d0:	20000020 	.word	0x20000020
 800a7d4:	2000001c 	.word	0x2000001c
 800a7d8:	20000028 	.word	0x20000028
 800a7dc:	20000018 	.word	0x20000018
 800a7e0:	20000024 	.word	0x20000024

0800a7e4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::restoreNewDeleteOverloads()
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (--save_counter > 0) return;
 800a7e8:	4b1f      	ldr	r3, [pc, #124]	; (800a868 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	3b01      	subs	r3, #1
 800a7ee:	4a1e      	ldr	r2, [pc, #120]	; (800a868 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800a7f0:	6013      	str	r3, [r2, #0]
 800a7f2:	4b1d      	ldr	r3, [pc, #116]	; (800a868 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	bfcc      	ite	gt
 800a7fa:	2301      	movgt	r3, #1
 800a7fc:	2300      	movle	r3, #0
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	2b00      	cmp	r3, #0
 800a802:	d12c      	bne.n	800a85e <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7a>
    operator_new_fptr = saved_operator_new_fptr;
 800a804:	4b19      	ldr	r3, [pc, #100]	; (800a86c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x88>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4a19      	ldr	r2, [pc, #100]	; (800a870 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x8c>)
 800a80a:	6013      	str	r3, [r2, #0]
    operator_new_nothrow_fptr = saved_operator_new_nothrow_fptr;
 800a80c:	4b19      	ldr	r3, [pc, #100]	; (800a874 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x90>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a19      	ldr	r2, [pc, #100]	; (800a878 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x94>)
 800a812:	6013      	str	r3, [r2, #0]
    operator_new_debug_fptr = saved_operator_new_debug_fptr;
 800a814:	4b19      	ldr	r3, [pc, #100]	; (800a87c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x98>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4a19      	ldr	r2, [pc, #100]	; (800a880 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x9c>)
 800a81a:	6013      	str	r3, [r2, #0]
    operator_new_array_fptr = saved_operator_new_array_fptr;
 800a81c:	4b19      	ldr	r3, [pc, #100]	; (800a884 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa0>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	4a19      	ldr	r2, [pc, #100]	; (800a888 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa4>)
 800a822:	6013      	str	r3, [r2, #0]
    operator_new_array_nothrow_fptr = saved_operator_new_array_nothrow_fptr;
 800a824:	4b19      	ldr	r3, [pc, #100]	; (800a88c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa8>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4a19      	ldr	r2, [pc, #100]	; (800a890 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xac>)
 800a82a:	6013      	str	r3, [r2, #0]
    operator_new_array_debug_fptr = saved_operator_new_array_debug_fptr;
 800a82c:	4b19      	ldr	r3, [pc, #100]	; (800a894 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb0>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a19      	ldr	r2, [pc, #100]	; (800a898 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb4>)
 800a832:	6013      	str	r3, [r2, #0]
    operator_delete_fptr = saved_operator_delete_fptr;
 800a834:	4b19      	ldr	r3, [pc, #100]	; (800a89c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb8>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4a19      	ldr	r2, [pc, #100]	; (800a8a0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xbc>)
 800a83a:	6013      	str	r3, [r2, #0]
    operator_delete_array_fptr = saved_operator_delete_array_fptr;
 800a83c:	4b19      	ldr	r3, [pc, #100]	; (800a8a4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc0>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a19      	ldr	r2, [pc, #100]	; (800a8a8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc4>)
 800a842:	6013      	str	r3, [r2, #0]
    malloc_fptr = saved_malloc_fptr;
 800a844:	4b19      	ldr	r3, [pc, #100]	; (800a8ac <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc8>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a19      	ldr	r2, [pc, #100]	; (800a8b0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xcc>)
 800a84a:	6013      	str	r3, [r2, #0]
    realloc_fptr = saved_realloc_fptr;
 800a84c:	4b19      	ldr	r3, [pc, #100]	; (800a8b4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd0>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a19      	ldr	r2, [pc, #100]	; (800a8b8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd4>)
 800a852:	6013      	str	r3, [r2, #0]
    free_fptr = saved_free_fptr;
 800a854:	4b19      	ldr	r3, [pc, #100]	; (800a8bc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd8>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a19      	ldr	r2, [pc, #100]	; (800a8c0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xdc>)
 800a85a:	6013      	str	r3, [r2, #0]
 800a85c:	e000      	b.n	800a860 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7c>
    if (--save_counter > 0) return;
 800a85e:	bf00      	nop
#endif
}
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr
 800a868:	20000848 	.word	0x20000848
 800a86c:	2000004c 	.word	0x2000004c
 800a870:	2000002c 	.word	0x2000002c
 800a874:	20000050 	.word	0x20000050
 800a878:	20000030 	.word	0x20000030
 800a87c:	20000054 	.word	0x20000054
 800a880:	20000034 	.word	0x20000034
 800a884:	20000058 	.word	0x20000058
 800a888:	20000038 	.word	0x20000038
 800a88c:	2000005c 	.word	0x2000005c
 800a890:	2000003c 	.word	0x2000003c
 800a894:	20000060 	.word	0x20000060
 800a898:	20000040 	.word	0x20000040
 800a89c:	20000064 	.word	0x20000064
 800a8a0:	20000044 	.word	0x20000044
 800a8a4:	20000068 	.word	0x20000068
 800a8a8:	20000048 	.word	0x20000048
 800a8ac:	20000020 	.word	0x20000020
 800a8b0:	20000014 	.word	0x20000014
 800a8b4:	20000028 	.word	0x20000028
 800a8b8:	2000001c 	.word	0x2000001c
 800a8bc:	20000024 	.word	0x20000024
 800a8c0:	20000018 	.word	0x20000018

0800a8c4 <_ZN25MemoryLeakWarningReporterD1Ev>:
}

class MemoryLeakWarningReporter: public MemoryLeakFailure
{
public:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
    {
 800a8cc:	4a05      	ldr	r2, [pc, #20]	; (800a8e4 <_ZN25MemoryLeakWarningReporterD1Ev+0x20>)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	601a      	str	r2, [r3, #0]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7ff fc15 	bl	800a104 <_ZN17MemoryLeakFailureD1Ev>
    }
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3708      	adds	r7, #8
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	080281bc 	.word	0x080281bc

0800a8e8 <_ZN25MemoryLeakWarningReporterD0Ev>:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b082      	sub	sp, #8
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
    }
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f7ff ffe7 	bl	800a8c4 <_ZN25MemoryLeakWarningReporterD1Ev>
 800a8f6:	2104      	movs	r1, #4
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f7ff fe53 	bl	800a5a4 <_ZdlPvj>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	4618      	mov	r0, r3
 800a902:	3708      	adds	r7, #8
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <_ZN14TestTerminatorC1Ev>:
    virtual void testBody();
};

//////////////////// TestTerminator

class TestTerminator
 800a908:	b480      	push	{r7}
 800a90a:	b083      	sub	sp, #12
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	4a04      	ldr	r2, [pc, #16]	; (800a924 <_ZN14TestTerminatorC1Ev+0x1c>)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	601a      	str	r2, [r3, #0]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	4618      	mov	r0, r3
 800a91a:	370c      	adds	r7, #12
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr
 800a924:	08028b68 	.word	0x08028b68

0800a928 <_ZN31TestTerminatorWithoutExceptionsC1Ev>:
public:
    virtual void exitCurrentTest() const _override;
    virtual ~NormalTestTerminator() _destructor_override;
};

class TestTerminatorWithoutExceptions  : public TestTerminator
 800a928:	b580      	push	{r7, lr}
 800a92a:	b082      	sub	sp, #8
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	4618      	mov	r0, r3
 800a934:	f7ff ffe8 	bl	800a908 <_ZN14TestTerminatorC1Ev>
 800a938:	4a03      	ldr	r2, [pc, #12]	; (800a948 <_ZN31TestTerminatorWithoutExceptionsC1Ev+0x20>)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	601a      	str	r2, [r3, #0]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4618      	mov	r0, r3
 800a942:	3708      	adds	r7, #8
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}
 800a948:	08028b40 	.word	0x08028b40

0800a94c <_ZN25MemoryLeakWarningReporter4failEPc>:

    virtual void fail(char* fail_string) _override
 800a94c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a94e:	b099      	sub	sp, #100	; 0x64
 800a950:	af02      	add	r7, sp, #8
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	6039      	str	r1, [r7, #0]
    {
        UtestShell* currentTest = UtestShell::getCurrent();
 800a956:	f009 fdb7 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 800a95a:	6578      	str	r0, [r7, #84]	; 0x54
        currentTest->failWith(FailFailure(currentTest, currentTest->getName().asCharString(), currentTest->getLineNumber(), fail_string), TestTerminatorWithoutExceptions());
 800a95c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	339c      	adds	r3, #156	; 0x9c
 800a962:	681c      	ldr	r4, [r3, #0]
 800a964:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a968:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a96a:	4618      	mov	r0, r3
 800a96c:	f008 fbc4 	bl	80130f8 <_ZNK10UtestShell7getNameEv>
 800a970:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a974:	4618      	mov	r0, r3
 800a976:	f002 fd4f 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 800a97a:	4605      	mov	r5, r0
 800a97c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a97e:	f008 fc9b 	bl	80132b8 <_ZNK10UtestShell13getLineNumberEv>
 800a982:	4606      	mov	r6, r0
 800a984:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a988:	6839      	ldr	r1, [r7, #0]
 800a98a:	4618      	mov	r0, r3
 800a98c:	f002 f9b9 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800a990:	f107 000c 	add.w	r0, r7, #12
 800a994:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a998:	9300      	str	r3, [sp, #0]
 800a99a:	4633      	mov	r3, r6
 800a99c:	462a      	mov	r2, r5
 800a99e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a9a0:	f004 fd14 	bl	800f3cc <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	653b      	str	r3, [r7, #80]	; 0x50
 800a9a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f7ff ffbb 	bl	800a928 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 800a9b2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800a9b6:	f107 030c 	add.w	r3, r7, #12
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a9be:	47a0      	blx	r4
 800a9c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f009 fe79 	bl	80146bc <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 800a9ca:	f107 030c 	add.w	r3, r7, #12
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f000 f9ac 	bl	800ad2c <_ZN11FailFailureD1Ev>
 800a9d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f002 fd4a 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800a9de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f002 fd45 	bl	800d472 <_ZN12SimpleStringD1Ev>
    } // LCOV_EXCL_LINE
 800a9e8:	bf00      	nop
 800a9ea:	375c      	adds	r7, #92	; 0x5c
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a9f0 <_ZN17MemoryLeakFailureC1Ev>:
class MemoryLeakFailure
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	4a04      	ldr	r2, [pc, #16]	; (800aa0c <_ZN17MemoryLeakFailureC1Ev+0x1c>)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	601a      	str	r2, [r3, #0]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	4618      	mov	r0, r3
 800aa02:	370c      	adds	r7, #12
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr
 800aa0c:	080281d0 	.word	0x080281d0

0800aa10 <_ZN25MemoryLeakWarningReporterC1Ev>:
class MemoryLeakWarningReporter: public MemoryLeakFailure
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7ff ffe8 	bl	800a9f0 <_ZN17MemoryLeakFailureC1Ev>
 800aa20:	4a03      	ldr	r2, [pc, #12]	; (800aa30 <_ZN25MemoryLeakWarningReporterC1Ev+0x20>)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	601a      	str	r2, [r3, #0]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3708      	adds	r7, #8
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}
 800aa30:	080281bc 	.word	0x080281bc

0800aa34 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>:

static MemoryLeakFailure* globalReporter = NULLPTR;
static MemoryLeakDetector* globalDetector = NULLPTR;

MemoryLeakDetector* MemoryLeakWarningPlugin::getGlobalDetector()
{
 800aa34:	b598      	push	{r3, r4, r7, lr}
 800aa36:	af00      	add	r7, sp, #0
    if (globalDetector == NULLPTR) {
 800aa38:	4b11      	ldr	r3, [pc, #68]	; (800aa80 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d11b      	bne.n	800aa78 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x44>
        saveAndDisableNewDeleteOverloads();
 800aa40:	f7ff fe60 	bl	800a704 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>

        globalReporter = new MemoryLeakWarningReporter;
 800aa44:	2004      	movs	r0, #4
 800aa46:	f7ff fd89 	bl	800a55c <_Znwj>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	461c      	mov	r4, r3
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f7ff ffde 	bl	800aa10 <_ZN25MemoryLeakWarningReporterC1Ev>
 800aa54:	4b0b      	ldr	r3, [pc, #44]	; (800aa84 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800aa56:	601c      	str	r4, [r3, #0]
        globalDetector = new MemoryLeakDetector(globalReporter);
 800aa58:	f241 1050 	movw	r0, #4432	; 0x1150
 800aa5c:	f7ff fd7e 	bl	800a55c <_Znwj>
 800aa60:	4603      	mov	r3, r0
 800aa62:	461c      	mov	r4, r3
 800aa64:	4b07      	ldr	r3, [pc, #28]	; (800aa84 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4619      	mov	r1, r3
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	f00c fa3e 	bl	8016eec <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>
 800aa70:	4b03      	ldr	r3, [pc, #12]	; (800aa80 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800aa72:	601c      	str	r4, [r3, #0]

        restoreNewDeleteOverloads();
 800aa74:	f7ff feb6 	bl	800a7e4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>
    }
    return globalDetector;
 800aa78:	4b01      	ldr	r3, [pc, #4]	; (800aa80 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	bd98      	pop	{r3, r4, r7, pc}
 800aa80:	20000850 	.word	0x20000850
 800aa84:	2000084c 	.word	0x2000084c

0800aa88 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>:
{
    return globalReporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool des)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b083      	sub	sp, #12
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	460b      	mov	r3, r1
 800aa92:	70fb      	strb	r3, [r7, #3]
    destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_ = des;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	78fa      	ldrb	r2, [r7, #3]
 800aa98:	765a      	strb	r2, [r3, #25]
}
 800aa9a:	bf00      	nop
 800aa9c:	370c      	adds	r7, #12
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa4:	4770      	bx	lr
	...

0800aaa8 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>:
    globalDetector = detector;
    globalReporter = reporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetector()
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	af00      	add	r7, sp, #0
    turnOffNewDeleteOverloads();
 800aaac:	f7ff fdbc 	bl	800a628 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
    delete globalDetector;
 800aab0:	4b0b      	ldr	r3, [pc, #44]	; (800aae0 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d004      	beq.n	800aac2 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x1a>
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	3204      	adds	r2, #4
 800aabc:	6812      	ldr	r2, [r2, #0]
 800aabe:	4618      	mov	r0, r3
 800aac0:	4790      	blx	r2
    delete globalReporter;
 800aac2:	4b08      	ldr	r3, [pc, #32]	; (800aae4 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x3c>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d004      	beq.n	800aad4 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x2c>
 800aaca:	681a      	ldr	r2, [r3, #0]
 800aacc:	3204      	adds	r2, #4
 800aace:	6812      	ldr	r2, [r2, #0]
 800aad0:	4618      	mov	r0, r3
 800aad2:	4790      	blx	r2
    globalDetector = NULLPTR;
 800aad4:	4b02      	ldr	r3, [pc, #8]	; (800aae0 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800aad6:	2200      	movs	r2, #0
 800aad8:	601a      	str	r2, [r3, #0]
}
 800aada:	bf00      	nop
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	20000850 	.word	0x20000850
 800aae4:	2000084c 	.word	0x2000084c

0800aae8 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>:
void MemoryLeakWarningPlugin::expectLeaksInTest(size_t n)
{
    expectedLeaks_ = n;
}

MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString& name, MemoryLeakDetector* localDetector) :
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	60f8      	str	r0, [r7, #12]
 800aaf0:	60b9      	str	r1, [r7, #8]
 800aaf2:	607a      	str	r2, [r7, #4]
    TestPlugin(name), ignoreAllWarnings_(false), destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_(false), expectedLeaks_(0)
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	68b9      	ldr	r1, [r7, #8]
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f006 fdfd 	bl	80116f8 <_ZN10TestPluginC1ERK12SimpleString>
 800aafe:	4a14      	ldr	r2, [pc, #80]	; (800ab50 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x68>)
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	601a      	str	r2, [r3, #0]
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2200      	movs	r2, #0
 800ab08:	761a      	strb	r2, [r3, #24]
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	765a      	strb	r2, [r3, #25]
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2200      	movs	r2, #0
 800ab14:	61da      	str	r2, [r3, #28]
{
    if (firstPlugin_ == NULLPTR) firstPlugin_ = this;
 800ab16:	4b0f      	ldr	r3, [pc, #60]	; (800ab54 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d102      	bne.n	800ab24 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x3c>
 800ab1e:	4a0d      	ldr	r2, [pc, #52]	; (800ab54 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	6013      	str	r3, [r2, #0]

    if (localDetector) memLeakDetector_ = localDetector;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d003      	beq.n	800ab32 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x4a>
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	615a      	str	r2, [r3, #20]
 800ab30:	e004      	b.n	800ab3c <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x54>
    else memLeakDetector_ = getGlobalDetector();
 800ab32:	f7ff ff7f 	bl	800aa34 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800ab36:	4602      	mov	r2, r0
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	615a      	str	r2, [r3, #20]

    memLeakDetector_->enable();
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	695b      	ldr	r3, [r3, #20]
 800ab40:	4618      	mov	r0, r3
 800ab42:	f00c fa69 	bl	8017018 <_ZN18MemoryLeakDetector6enableEv>
}
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3710      	adds	r7, #16
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}
 800ab50:	080281e4 	.word	0x080281e4
 800ab54:	20000854 	.word	0x20000854

0800ab58 <_ZN23MemoryLeakWarningPluginD1Ev>:

MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	4a09      	ldr	r2, [pc, #36]	; (800ab88 <_ZN23MemoryLeakWarningPluginD1Ev+0x30>)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	601a      	str	r2, [r3, #0]
{
    if (destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_) {
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	7e5b      	ldrb	r3, [r3, #25]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d003      	beq.n	800ab76 <_ZN23MemoryLeakWarningPluginD1Ev+0x1e>
        MemoryLeakWarningPlugin::turnOffNewDeleteOverloads();
 800ab6e:	f7ff fd5b 	bl	800a628 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
        MemoryLeakWarningPlugin::destroyGlobalDetector();
 800ab72:	f7ff ff99 	bl	800aaa8 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f006 fdf9 	bl	8011770 <_ZN10TestPluginD1Ev>
    }
}
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	4618      	mov	r0, r3
 800ab82:	3708      	adds	r7, #8
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}
 800ab88:	080281e4 	.word	0x080281e4

0800ab8c <_ZN23MemoryLeakWarningPluginD0Ev>:
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
}
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f7ff ffdf 	bl	800ab58 <_ZN23MemoryLeakWarningPluginD1Ev>
 800ab9a:	2124      	movs	r1, #36	; 0x24
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f7ff fd01 	bl	800a5a4 <_ZdlPvj>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4618      	mov	r0, r3
 800aba6:	3708      	adds	r7, #8
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <_ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::preTestAction(UtestShell& /*test*/, TestResult& result)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	60f8      	str	r0, [r7, #12]
 800abb4:	60b9      	str	r1, [r7, #8]
 800abb6:	607a      	str	r2, [r7, #4]
    memLeakDetector_->startChecking();
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	695b      	ldr	r3, [r3, #20]
 800abbc:	4618      	mov	r0, r3
 800abbe:	f00c fa0e 	bl	8016fde <_ZN18MemoryLeakDetector13startCheckingEv>
    failureCount_ = result.getFailureCount();
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f7fd ffb0 	bl	8008b28 <_ZNK10TestResult15getFailureCountEv>
 800abc8:	4602      	mov	r2, r0
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	621a      	str	r2, [r3, #32]
}
 800abce:	bf00      	nop
 800abd0:	3710      	adds	r7, #16
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
	...

0800abd8 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::postTestAction(UtestShell& test, TestResult& result)
{
 800abd8:	b590      	push	{r4, r7, lr}
 800abda:	b097      	sub	sp, #92	; 0x5c
 800abdc:	af00      	add	r7, sp, #0
 800abde:	60f8      	str	r0, [r7, #12]
 800abe0:	60b9      	str	r1, [r7, #8]
 800abe2:	607a      	str	r2, [r7, #4]
    memLeakDetector_->stopChecking();
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	695b      	ldr	r3, [r3, #20]
 800abe8:	4618      	mov	r0, r3
 800abea:	f00c fa08 	bl	8016ffe <_ZN18MemoryLeakDetector12stopCheckingEv>
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_checking);
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	695b      	ldr	r3, [r3, #20]
 800abf2:	2103      	movs	r1, #3
 800abf4:	4618      	mov	r0, r3
 800abf6:	f00c fda5 	bl	8017744 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800abfa:	6578      	str	r0, [r7, #84]	; 0x54

    if (!ignoreAllWarnings_ && expectedLeaks_ != leaks && failureCount_ == result.getFailureCount()) {
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	7e1b      	ldrb	r3, [r3, #24]
 800ac00:	f083 0301 	eor.w	r3, r3, #1
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d00e      	beq.n	800ac28 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	69db      	ldr	r3, [r3, #28]
 800ac0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d009      	beq.n	800ac28 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	6a1c      	ldr	r4, [r3, #32]
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f7fd ff85 	bl	8008b28 <_ZNK10TestResult15getFailureCountEv>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	429c      	cmp	r4, r3
 800ac22:	d101      	bne.n	800ac28 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800ac24:	2301      	movs	r3, #1
 800ac26:	e000      	b.n	800ac2a <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x52>
 800ac28:	2300      	movs	r3, #0
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d04c      	beq.n	800acc8 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        if(MemoryLeakWarningPlugin::areNewDeleteOverloaded()) {
 800ac2e:	f7ff fd4f 	bl	800a6d0 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>
 800ac32:	4603      	mov	r3, r0
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d028      	beq.n	800ac8a <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xb2>
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	695b      	ldr	r3, [r3, #20]
 800ac3c:	2103      	movs	r1, #3
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f00c fd45 	bl	80176ce <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 800ac44:	4602      	mov	r2, r0
 800ac46:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ac4a:	4611      	mov	r1, r2
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f002 f858 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800ac52:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800ac56:	f107 0310 	add.w	r3, r7, #16
 800ac5a:	68b9      	ldr	r1, [r7, #8]
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f003 feaf 	bl	800e9c0 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 800ac62:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ac66:	4618      	mov	r0, r3
 800ac68:	f002 fc03 	bl	800d472 <_ZN12SimpleStringD1Ev>
            result.addFailure(f);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	3334      	adds	r3, #52	; 0x34
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f107 0210 	add.w	r2, r7, #16
 800ac78:	4611      	mov	r1, r2
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	4798      	blx	r3
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 800ac7e:	f107 0310 	add.w	r3, r7, #16
 800ac82:	4618      	mov	r0, r3
 800ac84:	f003 ff5c 	bl	800eb40 <_ZN11TestFailureD1Ev>
 800ac88:	e01e      	b.n	800acc8 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        } else if(expectedLeaks_ > 0) {
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	69db      	ldr	r3, [r3, #28]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d01a      	beq.n	800acc8 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
            result.print(StringFromFormat("Warning: Expected %d leak(s), but leak detection was disabled", (int) expectedLeaks_).asCharString());
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	3338      	adds	r3, #56	; 0x38
 800ac98:	681c      	ldr	r4, [r3, #0]
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	69db      	ldr	r3, [r3, #28]
 800ac9e:	461a      	mov	r2, r3
 800aca0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800aca4:	4910      	ldr	r1, [pc, #64]	; (800ace8 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x110>)
 800aca6:	4618      	mov	r0, r3
 800aca8:	f003 f8ea 	bl	800de80 <_Z16StringFromFormatPKcz>
 800acac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800acb0:	4618      	mov	r0, r3
 800acb2:	f002 fbb1 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 800acb6:	4603      	mov	r3, r0
 800acb8:	4619      	mov	r1, r3
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	47a0      	blx	r4
 800acbe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800acc2:	4618      	mov	r0, r3
 800acc4:	f002 fbd5 	bl	800d472 <_ZN12SimpleStringD1Ev>
        }
    }
    memLeakDetector_->markCheckingPeriodLeaksAsNonCheckingPeriod();
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	695b      	ldr	r3, [r3, #20]
 800accc:	4618      	mov	r0, r3
 800acce:	f00c fd13 	bl	80176f8 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>
    ignoreAllWarnings_ = false;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2200      	movs	r2, #0
 800acd6:	761a      	strb	r2, [r3, #24]
    expectedLeaks_ = 0;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2200      	movs	r2, #0
 800acdc:	61da      	str	r2, [r3, #28]
}
 800acde:	bf00      	nop
 800ace0:	375c      	adds	r7, #92	; 0x5c
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd90      	pop	{r4, r7, pc}
 800ace6:	bf00      	nop
 800ace8:	08024390 	.word	0x08024390

0800acec <_ZN23MemoryLeakWarningPlugin11FinalReportEj>:

const char* MemoryLeakWarningPlugin::FinalReport(size_t toBeDeletedLeaks)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_enabled);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	695b      	ldr	r3, [r3, #20]
 800acfa:	2102      	movs	r1, #2
 800acfc:	4618      	mov	r0, r3
 800acfe:	f00c fd21 	bl	8017744 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800ad02:	60f8      	str	r0, [r7, #12]
    if (leaks != toBeDeletedLeaks) return memLeakDetector_->report(mem_leak_period_enabled);
 800ad04:	68fa      	ldr	r2, [r7, #12]
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d007      	beq.n	800ad1c <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x30>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	695b      	ldr	r3, [r3, #20]
 800ad10:	2102      	movs	r1, #2
 800ad12:	4618      	mov	r0, r3
 800ad14:	f00c fcdb 	bl	80176ce <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	e000      	b.n	800ad1e <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x32>
    return "";
 800ad1c:	4b02      	ldr	r3, [pc, #8]	; (800ad28 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x3c>)
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	080243d0 	.word	0x080243d0

0800ad2c <_ZN11FailFailureD1Ev>:
{
public:
    CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& textString = "");
};

class FailFailure : public TestFailure
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b082      	sub	sp, #8
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	4a05      	ldr	r2, [pc, #20]	; (800ad4c <_ZN11FailFailureD1Ev+0x20>)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	601a      	str	r2, [r3, #0]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f003 feff 	bl	800eb40 <_ZN11TestFailureD1Ev>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	4618      	mov	r0, r3
 800ad46:	3708      	adds	r7, #8
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	0802822c 	.word	0x0802822c

0800ad50 <_ZN11FailFailureD0Ev>:
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f7ff ffe7 	bl	800ad2c <_ZN11FailFailureD1Ev>
 800ad5e:	2134      	movs	r1, #52	; 0x34
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f7ff fc1f 	bl	800a5a4 <_ZdlPvj>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3708      	adds	r7, #8
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <_ZN17cpputest_longlongC1Ei>:

struct cpputest_longlong
{
#if defined(__cplusplus)
  cpputest_longlong() {}
  cpputest_longlong(int) {}
 800ad70:	b480      	push	{r7}
 800ad72:	b083      	sub	sp, #12
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	370c      	adds	r7, #12
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr

0800ad88 <_ZN18cpputest_ulonglongC1Ei>:

struct cpputest_ulonglong
{
#if defined(__cplusplus)
  cpputest_ulonglong() {}
  cpputest_ulonglong(int) {}
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	4618      	mov	r0, r3
 800ad96:	370c      	adds	r7, #12
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr

0800ada0 <_ZN19MockFailureReporterC1Ev>:
class MockFailureReporter
{
protected:
    bool crashOnFailure_;
public:
    MockFailureReporter() : crashOnFailure_(false){}
 800ada0:	b480      	push	{r7}
 800ada2:	b083      	sub	sp, #12
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	4a06      	ldr	r2, [pc, #24]	; (800adc4 <_ZN19MockFailureReporterC1Ev+0x24>)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	601a      	str	r2, [r3, #0]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2200      	movs	r2, #0
 800adb2:	711a      	strb	r2, [r3, #4]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	4618      	mov	r0, r3
 800adb8:	370c      	adds	r7, #12
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr
 800adc2:	bf00      	nop
 800adc4:	08029408 	.word	0x08029408

0800adc8 <_ZN19MockFailureReporterD1Ev>:
    virtual ~MockFailureReporter() {}
 800adc8:	b480      	push	{r7}
 800adca:	b083      	sub	sp, #12
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	4a04      	ldr	r2, [pc, #16]	; (800ade4 <_ZN19MockFailureReporterD1Ev+0x1c>)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	601a      	str	r2, [r3, #0]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	4618      	mov	r0, r3
 800adda:	370c      	adds	r7, #12
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr
 800ade4:	08029408 	.word	0x08029408

0800ade8 <_ZN19MockFailureReporterD0Ev>:
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f7ff ffe9 	bl	800adc8 <_ZN19MockFailureReporterD1Ev>
 800adf6:	2108      	movs	r1, #8
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f7ff fbd3 	bl	800a5a4 <_ZdlPvj>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	4618      	mov	r0, r3
 800ae02:	3708      	adds	r7, #8
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <_ZN11MockFailureD1Ev>:

class MockFailure : public TestFailure
{
public:
    MockFailure(UtestShell* test);
    virtual ~MockFailure() _destructor_override {}
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	4a05      	ldr	r2, [pc, #20]	; (800ae28 <_ZN11MockFailureD1Ev+0x20>)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	601a      	str	r2, [r3, #0]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f003 fe91 	bl	800eb40 <_ZN11TestFailureD1Ev>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	4618      	mov	r0, r3
 800ae22:	3708      	adds	r7, #8
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	08028380 	.word	0x08028380

0800ae2c <_ZN11MockFailureD0Ev>:
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b082      	sub	sp, #8
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f7ff ffe7 	bl	800ae08 <_ZN11MockFailureD1Ev>
 800ae3a:	2134      	movs	r1, #52	; 0x34
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f7ff fbb1 	bl	800a5a4 <_ZdlPvj>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	4618      	mov	r0, r3
 800ae46:	3708      	adds	r7, #8
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <_ZN14MockNamedValueC1ERKS_>:
class MockNamedValueComparatorsAndCopiersRepository;
class MockNamedValue
{
public:
    MockNamedValue(const SimpleString& name);
    DEFAULT_COPY_CONSTRUCTOR(MockNamedValue)
 800ae4c:	b590      	push	{r4, r7, lr}
 800ae4e:	b083      	sub	sp, #12
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]
 800ae56:	4a16      	ldr	r2, [pc, #88]	; (800aeb0 <_ZN14MockNamedValueC1ERKS_+0x64>)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	601a      	str	r2, [r3, #0]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	1d1a      	adds	r2, r3, #4
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	3304      	adds	r3, #4
 800ae64:	4619      	mov	r1, r3
 800ae66:	4610      	mov	r0, r2
 800ae68:	f001 ff9f 	bl	800cdaa <_ZN12SimpleStringC1ERKS_>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f103 020c 	add.w	r2, r3, #12
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	330c      	adds	r3, #12
 800ae76:	4619      	mov	r1, r3
 800ae78:	4610      	mov	r0, r2
 800ae7a:	f001 ff96 	bl	800cdaa <_ZN12SimpleStringC1ERKS_>
 800ae7e:	687a      	ldr	r2, [r7, #4]
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	f102 0418 	add.w	r4, r2, #24
 800ae86:	3318      	adds	r3, #24
 800ae88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ae8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	629a      	str	r2, [r3, #40]	; 0x28
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	62da      	str	r2, [r3, #44]	; 0x2c
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	631a      	str	r2, [r3, #48]	; 0x30
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4618      	mov	r0, r3
 800aeaa:	370c      	adds	r7, #12
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd90      	pop	{r4, r7, pc}
 800aeb0:	08029448 	.word	0x08029448

0800aeb4 <_Z4mockRK12SimpleStringP19MockFailureReporter>:
#define MOCK_SUPPORT_SCOPE_PREFIX "!!!$$$MockingSupportScope$$$!!!"

static MockSupport global_mock;

MockSupport& mock(const SimpleString& mockName, MockFailureReporter* failureReporterForThisCall)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b086      	sub	sp, #24
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
    MockSupport& mock_support = (mockName != "") ? *global_mock.getMockSupportScope(mockName) : global_mock;
 800aebe:	f107 030c 	add.w	r3, r7, #12
 800aec2:	4916      	ldr	r1, [pc, #88]	; (800af1c <_Z4mockRK12SimpleStringP19MockFailureReporter+0x68>)
 800aec4:	4618      	mov	r0, r3
 800aec6:	f001 ff1c 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800aeca:	f107 030c 	add.w	r3, r7, #12
 800aece:	4619      	mov	r1, r3
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f002 fb1f 	bl	800d514 <_ZneRK12SimpleStringS1_>
 800aed6:	4603      	mov	r3, r0
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d005      	beq.n	800aee8 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x34>
 800aedc:	6879      	ldr	r1, [r7, #4]
 800aede:	4810      	ldr	r0, [pc, #64]	; (800af20 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 800aee0:	f000 ff70 	bl	800bdc4 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>
 800aee4:	4603      	mov	r3, r0
 800aee6:	e000      	b.n	800aeea <_Z4mockRK12SimpleStringP19MockFailureReporter+0x36>
 800aee8:	4b0d      	ldr	r3, [pc, #52]	; (800af20 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 800aeea:	617b      	str	r3, [r7, #20]
 800aeec:	f107 030c 	add.w	r3, r7, #12
 800aef0:	4618      	mov	r0, r3
 800aef2:	f002 fabe 	bl	800d472 <_ZN12SimpleStringD1Ev>
    mock_support.setActiveReporter(failureReporterForThisCall);
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	33a8      	adds	r3, #168	; 0xa8
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	6839      	ldr	r1, [r7, #0]
 800af00:	6978      	ldr	r0, [r7, #20]
 800af02:	4798      	blx	r3
    mock_support.setDefaultComparatorsAndCopiersRepository();
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	33ac      	adds	r3, #172	; 0xac
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	6978      	ldr	r0, [r7, #20]
 800af0e:	4798      	blx	r3
    return mock_support;
 800af10:	697b      	ldr	r3, [r7, #20]
}
 800af12:	4618      	mov	r0, r3
 800af14:	3718      	adds	r7, #24
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	080243d4 	.word	0x080243d4
 800af20:	20000858 	.word	0x20000858

0800af24 <_ZN11MockSupportC1ERK12SimpleString>:

MockSupport::MockSupport(const SimpleString& mockName)
 800af24:	b580      	push	{r7, lr}
 800af26:	b082      	sub	sp, #8
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	6039      	str	r1, [r7, #0]
    : actualCallOrder_(0), expectedCallOrder_(0), strictOrdering_(false), standardReporter_(&defaultReporter_), ignoreOtherCalls_(false), enabled_(true), lastActualFunctionCall_(NULLPTR), mockName_(mockName), tracing_(false)
 800af2e:	4a21      	ldr	r2, [pc, #132]	; (800afb4 <_ZN11MockSupportC1ERK12SimpleString+0x90>)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	601a      	str	r2, [r3, #0]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2200      	movs	r2, #0
 800af38:	605a      	str	r2, [r3, #4]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2200      	movs	r2, #0
 800af3e:	609a      	str	r2, [r3, #8]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2200      	movs	r2, #0
 800af44:	731a      	strb	r2, [r3, #12]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f103 0218 	add.w	r2, r3, #24
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	615a      	str	r2, [r3, #20]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	3318      	adds	r3, #24
 800af54:	4618      	mov	r0, r3
 800af56:	f7ff ff23 	bl	800ada0 <_ZN19MockFailureReporterC1Ev>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	3320      	adds	r3, #32
 800af5e:	4618      	mov	r0, r3
 800af60:	f010 fefc 	bl	801bd5c <_ZN21MockExpectedCallsListC1Ev>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2200      	movs	r2, #0
 800af68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2201      	movs	r2, #1
 800af70:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2200      	movs	r2, #0
 800af78:	62da      	str	r2, [r3, #44]	; 0x2c
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	3330      	adds	r3, #48	; 0x30
 800af7e:	4618      	mov	r0, r3
 800af80:	f014 fbe8 	bl	801f754 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	3338      	adds	r3, #56	; 0x38
 800af88:	4618      	mov	r0, r3
 800af8a:	f014 faf2 	bl	801f572 <_ZN18MockNamedValueListC1Ev>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	333c      	adds	r3, #60	; 0x3c
 800af92:	6839      	ldr	r1, [r7, #0]
 800af94:	4618      	mov	r0, r3
 800af96:	f001 ff08 	bl	800cdaa <_ZN12SimpleStringC1ERKS_>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2200      	movs	r2, #0
 800af9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
{
    setActiveReporter(NULLPTR);
 800afa2:	2100      	movs	r1, #0
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f000 f894 	bl	800b0d2 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>
}
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	4618      	mov	r0, r3
 800afae:	3708      	adds	r7, #8
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	08028258 	.word	0x08028258

0800afb8 <_ZN11MockSupportD1Ev>:

MockSupport::~MockSupport()
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	4a0d      	ldr	r2, [pc, #52]	; (800aff8 <_ZN11MockSupportD1Ev+0x40>)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	601a      	str	r2, [r3, #0]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	333c      	adds	r3, #60	; 0x3c
 800afca:	4618      	mov	r0, r3
 800afcc:	f002 fa51 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	3330      	adds	r3, #48	; 0x30
 800afd4:	4618      	mov	r0, r3
 800afd6:	f014 fbd1 	bl	801f77c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	3320      	adds	r3, #32
 800afde:	4618      	mov	r0, r3
 800afe0:	f010 fed0 	bl	801bd84 <_ZN21MockExpectedCallsListD1Ev>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	3318      	adds	r3, #24
 800afe8:	4618      	mov	r0, r3
 800afea:	f7ff feed 	bl	800adc8 <_ZN19MockFailureReporterD1Ev>
{
}
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	4618      	mov	r0, r3
 800aff2:	3708      	adds	r7, #8
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}
 800aff8:	08028258 	.word	0x08028258

0800affc <_ZN11MockSupportD0Ev>:
MockSupport::~MockSupport()
 800affc:	b580      	push	{r7, lr}
 800affe:	b082      	sub	sp, #8
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
}
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f7ff ffd7 	bl	800afb8 <_ZN11MockSupportD1Ev>
 800b00a:	2148      	movs	r1, #72	; 0x48
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f7ff fac9 	bl	800a5a4 <_ZdlPvj>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	4618      	mov	r0, r3
 800b016:	3708      	adds	r7, #8
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <_ZN11MockSupport14crashOnFailureEb>:

void MockSupport::crashOnFailure(bool shouldCrash)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b082      	sub	sp, #8
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	460b      	mov	r3, r1
 800b026:	70fb      	strb	r3, [r7, #3]
    activeReporter_->crashOnFailure(shouldCrash);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	691a      	ldr	r2, [r3, #16]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	691b      	ldr	r3, [r3, #16]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	3310      	adds	r3, #16
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	78f9      	ldrb	r1, [r7, #3]
 800b038:	4610      	mov	r0, r2
 800b03a:	4798      	blx	r3
}
 800b03c:	bf00      	nop
 800b03e:	3708      	adds	r7, #8
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter>:

void MockSupport::setMockFailureStandardReporter(MockFailureReporter* reporter)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b084      	sub	sp, #16
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	6039      	str	r1, [r7, #0]
    standardReporter_ = (reporter != NULLPTR) ? reporter : &defaultReporter_;
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d102      	bne.n	800b05a <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x16>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	3318      	adds	r3, #24
 800b058:	e000      	b.n	800b05c <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x18>
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	687a      	ldr	r2, [r7, #4]
 800b05e:	6153      	str	r3, [r2, #20]

    if (lastActualFunctionCall_)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b064:	2b00      	cmp	r3, #0
 800b066:	d00a      	beq.n	800b07e <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x3a>
        lastActualFunctionCall_->setMockFailureReporter(standardReporter_);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	33c8      	adds	r3, #200	; 0xc8
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	687a      	ldr	r2, [r7, #4]
 800b078:	6952      	ldr	r2, [r2, #20]
 800b07a:	4611      	mov	r1, r2
 800b07c:	4798      	blx	r3

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	3338      	adds	r3, #56	; 0x38
 800b082:	4618      	mov	r0, r3
 800b084:	f014 fb0b 	bl	801f69e <_ZN18MockNamedValueList5beginEv>
 800b088:	60f8      	str	r0, [r7, #12]
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d01c      	beq.n	800b0ca <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x86>
        if (getMockSupport(p)) getMockSupport(p)->setMockFailureStandardReporter(standardReporter_);
 800b090:	68f9      	ldr	r1, [r7, #12]
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 ff26 	bl	800bee4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b098:	4603      	mov	r3, r0
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	bf14      	ite	ne
 800b09e:	2301      	movne	r3, #1
 800b0a0:	2300      	moveq	r3, #0
 800b0a2:	b2db      	uxtb	r3, r3
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d00b      	beq.n	800b0c0 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x7c>
 800b0a8:	68f9      	ldr	r1, [r7, #12]
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 ff1a 	bl	800bee4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	681a      	ldr	r2, [r3, #0]
 800b0b4:	32a4      	adds	r2, #164	; 0xa4
 800b0b6:	6812      	ldr	r2, [r2, #0]
 800b0b8:	6879      	ldr	r1, [r7, #4]
 800b0ba:	6949      	ldr	r1, [r1, #20]
 800b0bc:	4618      	mov	r0, r3
 800b0be:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b0c0:	68f8      	ldr	r0, [r7, #12]
 800b0c2:	f014 f9f5 	bl	801f4b0 <_ZN22MockNamedValueListNode4nextEv>
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	e7df      	b.n	800b08a <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x46>
}
 800b0ca:	bf00      	nop
 800b0cc:	3710      	adds	r7, #16
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>:

void MockSupport::setActiveReporter(MockFailureReporter* reporter)
{
 800b0d2:	b480      	push	{r7}
 800b0d4:	b083      	sub	sp, #12
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
 800b0da:	6039      	str	r1, [r7, #0]
    activeReporter_ = (reporter) ? reporter : standardReporter_;
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d102      	bne.n	800b0e8 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x16>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	695b      	ldr	r3, [r3, #20]
 800b0e6:	e000      	b.n	800b0ea <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x18>
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	6113      	str	r3, [r2, #16]
}
 800b0ee:	bf00      	nop
 800b0f0:	370c      	adds	r7, #12
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr

0800b0fa <_ZN11MockSupport41setDefaultComparatorsAndCopiersRepositoryEv>:

void MockSupport::setDefaultComparatorsAndCopiersRepository()
{
 800b0fa:	b580      	push	{r7, lr}
 800b0fc:	b082      	sub	sp, #8
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
    MockNamedValue::setDefaultComparatorsAndCopiersRepository(&comparatorsAndCopiersRepository_);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	3330      	adds	r3, #48	; 0x30
 800b106:	4618      	mov	r0, r3
 800b108:	f012 fb10 	bl	801d72c <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>
}
 800b10c:	bf00      	nop
 800b10e:	3708      	adds	r7, #8
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockSupport::installComparator(const SimpleString& typeName, MockNamedValueComparator& comparator)
{
 800b114:	b590      	push	{r4, r7, lr}
 800b116:	b087      	sub	sp, #28
 800b118:	af00      	add	r7, sp, #0
 800b11a:	60f8      	str	r0, [r7, #12]
 800b11c:	60b9      	str	r1, [r7, #8]
 800b11e:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installComparator(typeName, comparator);
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	3330      	adds	r3, #48	; 0x30
 800b124:	687a      	ldr	r2, [r7, #4]
 800b126:	68b9      	ldr	r1, [r7, #8]
 800b128:	4618      	mov	r0, r3
 800b12a:	f014 fb75 	bl	801f818 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	3338      	adds	r3, #56	; 0x38
 800b132:	4618      	mov	r0, r3
 800b134:	f014 fab3 	bl	801f69e <_ZN18MockNamedValueList5beginEv>
 800b138:	6178      	str	r0, [r7, #20]
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d01c      	beq.n	800b17a <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installComparator(typeName, comparator);
 800b140:	6979      	ldr	r1, [r7, #20]
 800b142:	68f8      	ldr	r0, [r7, #12]
 800b144:	f000 fece 	bl	800bee4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b148:	4603      	mov	r3, r0
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	bf14      	ite	ne
 800b14e:	2301      	movne	r3, #1
 800b150:	2300      	moveq	r3, #0
 800b152:	b2db      	uxtb	r3, r3
 800b154:	2b00      	cmp	r3, #0
 800b156:	d00b      	beq.n	800b170 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x5c>
 800b158:	6979      	ldr	r1, [r7, #20]
 800b15a:	68f8      	ldr	r0, [r7, #12]
 800b15c:	f000 fec2 	bl	800bee4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b160:	4603      	mov	r3, r0
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	32b0      	adds	r2, #176	; 0xb0
 800b166:	6814      	ldr	r4, [r2, #0]
 800b168:	687a      	ldr	r2, [r7, #4]
 800b16a:	68b9      	ldr	r1, [r7, #8]
 800b16c:	4618      	mov	r0, r3
 800b16e:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b170:	6978      	ldr	r0, [r7, #20]
 800b172:	f014 f99d 	bl	801f4b0 <_ZN22MockNamedValueListNode4nextEv>
 800b176:	6178      	str	r0, [r7, #20]
 800b178:	e7df      	b.n	800b13a <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x26>
}
 800b17a:	bf00      	nop
 800b17c:	371c      	adds	r7, #28
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd90      	pop	{r4, r7, pc}

0800b182 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockSupport::installCopier(const SimpleString& typeName, MockNamedValueCopier& copier)
{
 800b182:	b590      	push	{r4, r7, lr}
 800b184:	b087      	sub	sp, #28
 800b186:	af00      	add	r7, sp, #0
 800b188:	60f8      	str	r0, [r7, #12]
 800b18a:	60b9      	str	r1, [r7, #8]
 800b18c:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installCopier(typeName, copier);
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	3330      	adds	r3, #48	; 0x30
 800b192:	687a      	ldr	r2, [r7, #4]
 800b194:	68b9      	ldr	r1, [r7, #8]
 800b196:	4618      	mov	r0, r3
 800b198:	f014 fb5a 	bl	801f850 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	3338      	adds	r3, #56	; 0x38
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f014 fa7c 	bl	801f69e <_ZN18MockNamedValueList5beginEv>
 800b1a6:	6178      	str	r0, [r7, #20]
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d01c      	beq.n	800b1e8 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installCopier(typeName, copier);
 800b1ae:	6979      	ldr	r1, [r7, #20]
 800b1b0:	68f8      	ldr	r0, [r7, #12]
 800b1b2:	f000 fe97 	bl	800bee4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	bf14      	ite	ne
 800b1bc:	2301      	movne	r3, #1
 800b1be:	2300      	moveq	r3, #0
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d00b      	beq.n	800b1de <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x5c>
 800b1c6:	6979      	ldr	r1, [r7, #20]
 800b1c8:	68f8      	ldr	r0, [r7, #12]
 800b1ca:	f000 fe8b 	bl	800bee4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	681a      	ldr	r2, [r3, #0]
 800b1d2:	32b4      	adds	r2, #180	; 0xb4
 800b1d4:	6814      	ldr	r4, [r2, #0]
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	68b9      	ldr	r1, [r7, #8]
 800b1da:	4618      	mov	r0, r3
 800b1dc:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b1de:	6978      	ldr	r0, [r7, #20]
 800b1e0:	f014 f966 	bl	801f4b0 <_ZN22MockNamedValueListNode4nextEv>
 800b1e4:	6178      	str	r0, [r7, #20]
 800b1e6:	e7df      	b.n	800b1a8 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x26>
}
 800b1e8:	bf00      	nop
 800b1ea:	371c      	adds	r7, #28
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd90      	pop	{r4, r7, pc}

0800b1f0 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository>:

void MockSupport::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
    comparatorsAndCopiersRepository_.installComparatorsAndCopiers(repository);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	3330      	adds	r3, #48	; 0x30
 800b1fe:	6839      	ldr	r1, [r7, #0]
 800b200:	4618      	mov	r0, r3
 800b202:	f014 fb91 	bl	801f928 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	3338      	adds	r3, #56	; 0x38
 800b20a:	4618      	mov	r0, r3
 800b20c:	f014 fa47 	bl	801f69e <_ZN18MockNamedValueList5beginEv>
 800b210:	60f8      	str	r0, [r7, #12]
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d01b      	beq.n	800b250 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x60>
        if (getMockSupport(p)) getMockSupport(p)->installComparatorsAndCopiers(repository);
 800b218:	68f9      	ldr	r1, [r7, #12]
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 fe62 	bl	800bee4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b220:	4603      	mov	r3, r0
 800b222:	2b00      	cmp	r3, #0
 800b224:	bf14      	ite	ne
 800b226:	2301      	movne	r3, #1
 800b228:	2300      	moveq	r3, #0
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d00a      	beq.n	800b246 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x56>
 800b230:	68f9      	ldr	r1, [r7, #12]
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 fe56 	bl	800bee4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b238:	4603      	mov	r3, r0
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	32b8      	adds	r2, #184	; 0xb8
 800b23e:	6812      	ldr	r2, [r2, #0]
 800b240:	6839      	ldr	r1, [r7, #0]
 800b242:	4618      	mov	r0, r3
 800b244:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b246:	68f8      	ldr	r0, [r7, #12]
 800b248:	f014 f932 	bl	801f4b0 <_ZN22MockNamedValueListNode4nextEv>
 800b24c:	60f8      	str	r0, [r7, #12]
 800b24e:	e7e0      	b.n	800b212 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x22>
}
 800b250:	bf00      	nop
 800b252:	3710      	adds	r7, #16
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv>:

void MockSupport::removeAllComparatorsAndCopiers()
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b084      	sub	sp, #16
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
    comparatorsAndCopiersRepository_.clear();
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	3330      	adds	r3, #48	; 0x30
 800b264:	4618      	mov	r0, r3
 800b266:	f014 fab8 	bl	801f7da <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	3338      	adds	r3, #56	; 0x38
 800b26e:	4618      	mov	r0, r3
 800b270:	f014 fa15 	bl	801f69e <_ZN18MockNamedValueList5beginEv>
 800b274:	60f8      	str	r0, [r7, #12]
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d01a      	beq.n	800b2b2 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x5a>
        if (getMockSupport(p)) getMockSupport(p)->removeAllComparatorsAndCopiers();
 800b27c:	68f9      	ldr	r1, [r7, #12]
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 fe30 	bl	800bee4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b284:	4603      	mov	r3, r0
 800b286:	2b00      	cmp	r3, #0
 800b288:	bf14      	ite	ne
 800b28a:	2301      	movne	r3, #1
 800b28c:	2300      	moveq	r3, #0
 800b28e:	b2db      	uxtb	r3, r3
 800b290:	2b00      	cmp	r3, #0
 800b292:	d009      	beq.n	800b2a8 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x50>
 800b294:	68f9      	ldr	r1, [r7, #12]
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 fe24 	bl	800bee4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b29c:	4603      	mov	r3, r0
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	32bc      	adds	r2, #188	; 0xbc
 800b2a2:	6812      	ldr	r2, [r2, #0]
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b2a8:	68f8      	ldr	r0, [r7, #12]
 800b2aa:	f014 f901 	bl	801f4b0 <_ZN22MockNamedValueListNode4nextEv>
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	e7e1      	b.n	800b276 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x1e>
}
 800b2b2:	bf00      	nop
 800b2b4:	3710      	adds	r7, #16
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}

0800b2ba <_ZN11MockSupport5clearEv>:

void MockSupport::clear()
{
 800b2ba:	b580      	push	{r7, lr}
 800b2bc:	b084      	sub	sp, #16
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	6078      	str	r0, [r7, #4]
    delete lastActualFunctionCall_;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d004      	beq.n	800b2d4 <_ZN11MockSupport5clearEv+0x1a>
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	3204      	adds	r2, #4
 800b2ce:	6812      	ldr	r2, [r2, #0]
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	4790      	blx	r2
    lastActualFunctionCall_ = NULLPTR;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	62da      	str	r2, [r3, #44]	; 0x2c

    tracing_ = false;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    MockActualCallTrace::clearInstance();
 800b2e2:	f00e fe0d 	bl	8019f00 <_ZN19MockActualCallTrace13clearInstanceEv>

    expectations_.deleteAllExpectationsAndClearList();
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	3320      	adds	r3, #32
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f011 f937 	bl	801c55e <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>
    ignoreOtherCalls_ = false;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    enabled_ = true;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    actualCallOrder_ = 0;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2200      	movs	r2, #0
 800b304:	605a      	str	r2, [r3, #4]
    expectedCallOrder_ = 0;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	609a      	str	r2, [r3, #8]
    strictOrdering_ = false;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	731a      	strb	r2, [r3, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	3338      	adds	r3, #56	; 0x38
 800b316:	4618      	mov	r0, r3
 800b318:	f014 f9c1 	bl	801f69e <_ZN18MockNamedValueList5beginEv>
 800b31c:	60f8      	str	r0, [r7, #12]
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d01a      	beq.n	800b35a <_ZN11MockSupport5clearEv+0xa0>
        MockSupport* support = getMockSupport(p);
 800b324:	68f9      	ldr	r1, [r7, #12]
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 fddc 	bl	800bee4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b32c:	60b8      	str	r0, [r7, #8]
        if (support) {
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d00d      	beq.n	800b350 <_ZN11MockSupport5clearEv+0x96>
            support->clear();
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	339c      	adds	r3, #156	; 0x9c
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	68b8      	ldr	r0, [r7, #8]
 800b33e:	4798      	blx	r3
            delete support;
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d004      	beq.n	800b350 <_ZN11MockSupport5clearEv+0x96>
 800b346:	681a      	ldr	r2, [r3, #0]
 800b348:	3204      	adds	r2, #4
 800b34a:	6812      	ldr	r2, [r2, #0]
 800b34c:	4618      	mov	r0, r3
 800b34e:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800b350:	68f8      	ldr	r0, [r7, #12]
 800b352:	f014 f8ad 	bl	801f4b0 <_ZN22MockNamedValueListNode4nextEv>
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	e7e1      	b.n	800b31e <_ZN11MockSupport5clearEv+0x64>
        }
    }
    data_.clear();
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	3338      	adds	r3, #56	; 0x38
 800b35e:	4618      	mov	r0, r3
 800b360:	f014 f915 	bl	801f58e <_ZN18MockNamedValueList5clearEv>
}
 800b364:	bf00      	nop
 800b366:	3710      	adds	r7, #16
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <_ZN11MockSupport11strictOrderEv>:

void MockSupport::strictOrder()
{
 800b36c:	b480      	push	{r7}
 800b36e:	b083      	sub	sp, #12
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
    strictOrdering_ = true;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2201      	movs	r2, #1
 800b378:	731a      	strb	r2, [r3, #12]
}
 800b37a:	bf00      	nop
 800b37c:	370c      	adds	r7, #12
 800b37e:	46bd      	mov	sp, r7
 800b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b384:	4770      	bx	lr
	...

0800b388 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>:

SimpleString MockSupport::appendScopeToName(const SimpleString& functionName)
{
 800b388:	b590      	push	{r4, r7, lr}
 800b38a:	b089      	sub	sp, #36	; 0x24
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	607a      	str	r2, [r7, #4]
    if (mockName_.isEmpty()) return functionName;
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	333c      	adds	r3, #60	; 0x3c
 800b398:	4618      	mov	r0, r3
 800b39a:	f002 f859 	bl	800d450 <_ZNK12SimpleString7isEmptyEv>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d004      	beq.n	800b3ae <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x26>
 800b3a4:	6879      	ldr	r1, [r7, #4]
 800b3a6:	68f8      	ldr	r0, [r7, #12]
 800b3a8:	f001 fcff 	bl	800cdaa <_ZN12SimpleStringC1ERKS_>
 800b3ac:	e021      	b.n	800b3f2 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x6a>
    return mockName_ + "::" + functionName;
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800b3b4:	f107 0318 	add.w	r3, r7, #24
 800b3b8:	4910      	ldr	r1, [pc, #64]	; (800b3fc <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x74>)
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f001 fca1 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800b3c0:	f107 0310 	add.w	r3, r7, #16
 800b3c4:	f107 0218 	add.w	r2, r7, #24
 800b3c8:	4621      	mov	r1, r4
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f002 f8b3 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f107 0110 	add.w	r1, r7, #16
 800b3d6:	687a      	ldr	r2, [r7, #4]
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f002 f8ac 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 800b3de:	f107 0310 	add.w	r3, r7, #16
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f002 f845 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800b3e8:	f107 0318 	add.w	r3, r7, #24
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f002 f840 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 800b3f2:	68f8      	ldr	r0, [r7, #12]
 800b3f4:	3724      	adds	r7, #36	; 0x24
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd90      	pop	{r4, r7, pc}
 800b3fa:	bf00      	nop
 800b3fc:	080243d8 	.word	0x080243d8

0800b400 <_ZN11MockSupport13expectOneCallERK12SimpleString>:

MockExpectedCall& MockSupport::expectOneCall(const SimpleString& functionName)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b082      	sub	sp, #8
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	6039      	str	r1, [r7, #0]
    return expectNCalls(1, functionName);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	3314      	adds	r3, #20
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	683a      	ldr	r2, [r7, #0]
 800b414:	2101      	movs	r1, #1
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	4798      	blx	r3
 800b41a:	4603      	mov	r3, r0
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3708      	adds	r7, #8
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <_ZN11MockSupport12expectNoCallERK12SimpleString>:

void MockSupport::expectNoCall(const SimpleString& functionName)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b082      	sub	sp, #8
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	6039      	str	r1, [r7, #0]
    expectNCalls(0, functionName);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	3314      	adds	r3, #20
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	683a      	ldr	r2, [r7, #0]
 800b438:	2100      	movs	r1, #0
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	4798      	blx	r3
}
 800b43e:	bf00      	nop
 800b440:	3708      	adds	r7, #8
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}
	...

0800b448 <_ZN11MockSupport12expectNCallsEjRK12SimpleString>:

MockExpectedCall& MockSupport::expectNCalls(unsigned int amount, const SimpleString& functionName)
{
 800b448:	b590      	push	{r4, r7, lr}
 800b44a:	b089      	sub	sp, #36	; 0x24
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	60f8      	str	r0, [r7, #12]
 800b450:	60b9      	str	r1, [r7, #8]
 800b452:	607a      	str	r2, [r7, #4]
    if (!enabled_) return MockIgnoredExpectedCall::instance();
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800b45a:	f083 0301 	eor.w	r3, r3, #1
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	2b00      	cmp	r3, #0
 800b462:	d003      	beq.n	800b46c <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x24>
 800b464:	f010 fbf6 	bl	801bc54 <_ZN23MockIgnoredExpectedCall8instanceEv>
 800b468:	4603      	mov	r3, r0
 800b46a:	e041      	b.n	800b4f0 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xa8>

    countCheck();
 800b46c:	68f8      	ldr	r0, [r7, #12]
 800b46e:	f000 fb1b 	bl	800baa8 <_ZN11MockSupport10countCheckEv>

    MockCheckedExpectedCall* call = new MockCheckedExpectedCall(amount);
 800b472:	22a5      	movs	r2, #165	; 0xa5
 800b474:	4920      	ldr	r1, [pc, #128]	; (800b4f8 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xb0>)
 800b476:	2070      	movs	r0, #112	; 0x70
 800b478:	f7ff f880 	bl	800a57c <_ZnwjPKci>
 800b47c:	4604      	mov	r4, r0
 800b47e:	68b9      	ldr	r1, [r7, #8]
 800b480:	4620      	mov	r0, r4
 800b482:	f00f f8f3 	bl	801a66c <_ZN23MockCheckedExpectedCallC1Ej>
 800b486:	61fc      	str	r4, [r7, #28]
    call->withName(appendScopeToName(functionName));
 800b488:	69fb      	ldr	r3, [r7, #28]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	3308      	adds	r3, #8
 800b48e:	681c      	ldr	r4, [r3, #0]
 800b490:	f107 0314 	add.w	r3, r7, #20
 800b494:	687a      	ldr	r2, [r7, #4]
 800b496:	68f9      	ldr	r1, [r7, #12]
 800b498:	4618      	mov	r0, r3
 800b49a:	f7ff ff75 	bl	800b388 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>
 800b49e:	f107 0314 	add.w	r3, r7, #20
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	69f8      	ldr	r0, [r7, #28]
 800b4a6:	47a0      	blx	r4
 800b4a8:	f107 0314 	add.w	r3, r7, #20
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f001 ffe0 	bl	800d472 <_ZN12SimpleStringD1Ev>
    if (strictOrdering_) {
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	7b1b      	ldrb	r3, [r3, #12]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d013      	beq.n	800b4e2 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x9a>
        call->withCallOrder(expectedCallOrder_ + 1, expectedCallOrder_ + amount);
 800b4ba:	69fb      	ldr	r3, [r7, #28]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	3310      	adds	r3, #16
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	68fa      	ldr	r2, [r7, #12]
 800b4c4:	6892      	ldr	r2, [r2, #8]
 800b4c6:	1c50      	adds	r0, r2, #1
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	6891      	ldr	r1, [r2, #8]
 800b4cc:	68ba      	ldr	r2, [r7, #8]
 800b4ce:	440a      	add	r2, r1
 800b4d0:	4601      	mov	r1, r0
 800b4d2:	69f8      	ldr	r0, [r7, #28]
 800b4d4:	4798      	blx	r3
        expectedCallOrder_ += amount;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	689a      	ldr	r2, [r3, #8]
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	441a      	add	r2, r3
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	609a      	str	r2, [r3, #8]
    }
    expectations_.addExpectedCall(call);
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	3320      	adds	r3, #32
 800b4e6:	69f9      	ldr	r1, [r7, #28]
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f010 fd89 	bl	801c000 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>
    return *call;
 800b4ee:	69fb      	ldr	r3, [r7, #28]
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3724      	adds	r7, #36	; 0x24
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd90      	pop	{r4, r7, pc}
 800b4f8:	080243dc 	.word	0x080243dc

0800b4fc <_ZN11MockSupport16createActualCallEv>:

MockCheckedActualCall* MockSupport::createActualCall()
{
 800b4fc:	b5b0      	push	{r4, r5, r7, lr}
 800b4fe:	b082      	sub	sp, #8
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
    lastActualFunctionCall_ = new MockCheckedActualCall(++actualCallOrder_, activeReporter_, expectations_);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	1c5a      	adds	r2, r3, #1
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	605a      	str	r2, [r3, #4]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	685d      	ldr	r5, [r3, #4]
 800b512:	22b1      	movs	r2, #177	; 0xb1
 800b514:	490a      	ldr	r1, [pc, #40]	; (800b540 <_ZN11MockSupport16createActualCallEv+0x44>)
 800b516:	202c      	movs	r0, #44	; 0x2c
 800b518:	f7ff f830 	bl	800a57c <_ZnwjPKci>
 800b51c:	4604      	mov	r4, r0
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	691a      	ldr	r2, [r3, #16]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	3320      	adds	r3, #32
 800b526:	4629      	mov	r1, r5
 800b528:	4620      	mov	r0, r4
 800b52a:	f00c fbdb 	bl	8017ce4 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	62dc      	str	r4, [r3, #44]	; 0x2c
    return lastActualFunctionCall_;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800b536:	4618      	mov	r0, r3
 800b538:	3708      	adds	r7, #8
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bdb0      	pop	{r4, r5, r7, pc}
 800b53e:	bf00      	nop
 800b540:	080243dc 	.word	0x080243dc

0800b544 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>:

bool MockSupport::callIsIgnored(const SimpleString& functionName)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b082      	sub	sp, #8
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
    return ignoreOtherCalls_ && !expectations_.hasExpectationWithName(functionName);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b554:	2b00      	cmp	r3, #0
 800b556:	d00d      	beq.n	800b574 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	3320      	adds	r3, #32
 800b55c:	6839      	ldr	r1, [r7, #0]
 800b55e:	4618      	mov	r0, r3
 800b560:	f010 fd2a 	bl	801bfb8 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>
 800b564:	4603      	mov	r3, r0
 800b566:	f083 0301 	eor.w	r3, r3, #1
 800b56a:	b2db      	uxtb	r3, r3
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d001      	beq.n	800b574 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 800b570:	2301      	movs	r3, #1
 800b572:	e000      	b.n	800b576 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x32>
 800b574:	2300      	movs	r3, #0
}
 800b576:	4618      	mov	r0, r3
 800b578:	3708      	adds	r7, #8
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}

0800b57e <_ZN11MockSupport10actualCallERK12SimpleString>:

MockActualCall& MockSupport::actualCall(const SimpleString& functionName)
{
 800b57e:	b590      	push	{r4, r7, lr}
 800b580:	b087      	sub	sp, #28
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
 800b586:	6039      	str	r1, [r7, #0]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800b588:	f107 030c 	add.w	r3, r7, #12
 800b58c:	683a      	ldr	r2, [r7, #0]
 800b58e:	6879      	ldr	r1, [r7, #4]
 800b590:	4618      	mov	r0, r3
 800b592:	f7ff fef9 	bl	800b388 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>

    if (lastActualFunctionCall_) {
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d014      	beq.n	800b5c8 <_ZN11MockSupport10actualCallERK12SimpleString+0x4a>
        lastActualFunctionCall_->checkExpectations();
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	33c4      	adds	r3, #196	; 0xc4
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4610      	mov	r0, r2
 800b5ae:	4798      	blx	r3
        delete lastActualFunctionCall_;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d004      	beq.n	800b5c2 <_ZN11MockSupport10actualCallERK12SimpleString+0x44>
 800b5b8:	681a      	ldr	r2, [r3, #0]
 800b5ba:	3204      	adds	r2, #4
 800b5bc:	6812      	ldr	r2, [r2, #0]
 800b5be:	4618      	mov	r0, r3
 800b5c0:	4790      	blx	r2
        lastActualFunctionCall_ = NULLPTR;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    if (!enabled_) return MockIgnoredActualCall::instance();
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800b5ce:	f083 0301 	eor.w	r3, r3, #1
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d004      	beq.n	800b5e2 <_ZN11MockSupport10actualCallERK12SimpleString+0x64>
 800b5d8:	f00e fcbe 	bl	8019f58 <_ZN21MockIgnoredActualCall8instanceEv>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	461c      	mov	r4, r3
 800b5e0:	e02f      	b.n	800b642 <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    if (tracing_) return MockActualCallTrace::instance().withName(scopeFunctionName);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d00b      	beq.n	800b604 <_ZN11MockSupport10actualCallERK12SimpleString+0x86>
 800b5ec:	f00e fc6e 	bl	8019ecc <_ZN19MockActualCallTrace8instanceEv>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	681a      	ldr	r2, [r3, #0]
 800b5f4:	3208      	adds	r2, #8
 800b5f6:	6812      	ldr	r2, [r2, #0]
 800b5f8:	f107 010c 	add.w	r1, r7, #12
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	4790      	blx	r2
 800b600:	4604      	mov	r4, r0
 800b602:	e01e      	b.n	800b642 <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>


    if (callIsIgnored(scopeFunctionName)) {
 800b604:	f107 030c 	add.w	r3, r7, #12
 800b608:	4619      	mov	r1, r3
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f7ff ff9a 	bl	800b544 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>
 800b610:	4603      	mov	r3, r0
 800b612:	2b00      	cmp	r3, #0
 800b614:	d004      	beq.n	800b620 <_ZN11MockSupport10actualCallERK12SimpleString+0xa2>
        return MockIgnoredActualCall::instance();
 800b616:	f00e fc9f 	bl	8019f58 <_ZN21MockIgnoredActualCall8instanceEv>
 800b61a:	4603      	mov	r3, r0
 800b61c:	461c      	mov	r4, r3
 800b61e:	e010      	b.n	800b642 <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    }

    MockCheckedActualCall* call = createActualCall();
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	33c0      	adds	r3, #192	; 0xc0
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	4798      	blx	r3
 800b62c:	6178      	str	r0, [r7, #20]
    call->withName(scopeFunctionName);
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	3308      	adds	r3, #8
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f107 020c 	add.w	r2, r7, #12
 800b63a:	4611      	mov	r1, r2
 800b63c:	6978      	ldr	r0, [r7, #20]
 800b63e:	4798      	blx	r3
    return *call;
 800b640:	697c      	ldr	r4, [r7, #20]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800b642:	f107 030c 	add.w	r3, r7, #12
 800b646:	4618      	mov	r0, r3
 800b648:	f001 ff13 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800b64c:	4623      	mov	r3, r4
}
 800b64e:	4618      	mov	r0, r3
 800b650:	371c      	adds	r7, #28
 800b652:	46bd      	mov	sp, r7
 800b654:	bd90      	pop	{r4, r7, pc}

0800b656 <_ZN11MockSupport16ignoreOtherCallsEv>:

void MockSupport::ignoreOtherCalls()
{
 800b656:	b580      	push	{r7, lr}
 800b658:	b084      	sub	sp, #16
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	6078      	str	r0, [r7, #4]
    ignoreOtherCalls_ = true;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2201      	movs	r2, #1
 800b662:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	3338      	adds	r3, #56	; 0x38
 800b66a:	4618      	mov	r0, r3
 800b66c:	f014 f817 	bl	801f69e <_ZN18MockNamedValueList5beginEv>
 800b670:	60f8      	str	r0, [r7, #12]
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d01a      	beq.n	800b6ae <_ZN11MockSupport16ignoreOtherCallsEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->ignoreOtherCalls();
 800b678:	68f9      	ldr	r1, [r7, #12]
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 fc32 	bl	800bee4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b680:	4603      	mov	r3, r0
 800b682:	2b00      	cmp	r3, #0
 800b684:	bf14      	ite	ne
 800b686:	2301      	movne	r3, #1
 800b688:	2300      	moveq	r3, #0
 800b68a:	b2db      	uxtb	r3, r3
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d009      	beq.n	800b6a4 <_ZN11MockSupport16ignoreOtherCallsEv+0x4e>
 800b690:	68f9      	ldr	r1, [r7, #12]
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 fc26 	bl	800bee4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b698:	4603      	mov	r3, r0
 800b69a:	681a      	ldr	r2, [r3, #0]
 800b69c:	3290      	adds	r2, #144	; 0x90
 800b69e:	6812      	ldr	r2, [r2, #0]
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b6a4:	68f8      	ldr	r0, [r7, #12]
 800b6a6:	f013 ff03 	bl	801f4b0 <_ZN22MockNamedValueListNode4nextEv>
 800b6aa:	60f8      	str	r0, [r7, #12]
 800b6ac:	e7e1      	b.n	800b672 <_ZN11MockSupport16ignoreOtherCallsEv+0x1c>
}
 800b6ae:	bf00      	nop
 800b6b0:	3710      	adds	r7, #16
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}

0800b6b6 <_ZN11MockSupport7disableEv>:

void MockSupport::disable()
{
 800b6b6:	b580      	push	{r7, lr}
 800b6b8:	b084      	sub	sp, #16
 800b6ba:	af00      	add	r7, sp, #0
 800b6bc:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	3338      	adds	r3, #56	; 0x38
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f013 ffe7 	bl	801f69e <_ZN18MockNamedValueList5beginEv>
 800b6d0:	60f8      	str	r0, [r7, #12]
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d01a      	beq.n	800b70e <_ZN11MockSupport7disableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->disable();
 800b6d8:	68f9      	ldr	r1, [r7, #12]
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f000 fc02 	bl	800bee4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	bf14      	ite	ne
 800b6e6:	2301      	movne	r3, #1
 800b6e8:	2300      	moveq	r3, #0
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d009      	beq.n	800b704 <_ZN11MockSupport7disableEv+0x4e>
 800b6f0:	68f9      	ldr	r1, [r7, #12]
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f000 fbf6 	bl	800bee4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	681a      	ldr	r2, [r3, #0]
 800b6fc:	3284      	adds	r2, #132	; 0x84
 800b6fe:	6812      	ldr	r2, [r2, #0]
 800b700:	4618      	mov	r0, r3
 800b702:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b704:	68f8      	ldr	r0, [r7, #12]
 800b706:	f013 fed3 	bl	801f4b0 <_ZN22MockNamedValueListNode4nextEv>
 800b70a:	60f8      	str	r0, [r7, #12]
 800b70c:	e7e1      	b.n	800b6d2 <_ZN11MockSupport7disableEv+0x1c>
}
 800b70e:	bf00      	nop
 800b710:	3710      	adds	r7, #16
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}

0800b716 <_ZN11MockSupport6enableEv>:

void MockSupport::enable()
{
 800b716:	b580      	push	{r7, lr}
 800b718:	b084      	sub	sp, #16
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2201      	movs	r2, #1
 800b722:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	3338      	adds	r3, #56	; 0x38
 800b72a:	4618      	mov	r0, r3
 800b72c:	f013 ffb7 	bl	801f69e <_ZN18MockNamedValueList5beginEv>
 800b730:	60f8      	str	r0, [r7, #12]
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d01a      	beq.n	800b76e <_ZN11MockSupport6enableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->enable();
 800b738:	68f9      	ldr	r1, [r7, #12]
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 fbd2 	bl	800bee4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b740:	4603      	mov	r3, r0
 800b742:	2b00      	cmp	r3, #0
 800b744:	bf14      	ite	ne
 800b746:	2301      	movne	r3, #1
 800b748:	2300      	moveq	r3, #0
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d009      	beq.n	800b764 <_ZN11MockSupport6enableEv+0x4e>
 800b750:	68f9      	ldr	r1, [r7, #12]
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f000 fbc6 	bl	800bee4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b758:	4603      	mov	r3, r0
 800b75a:	681a      	ldr	r2, [r3, #0]
 800b75c:	3288      	adds	r2, #136	; 0x88
 800b75e:	6812      	ldr	r2, [r2, #0]
 800b760:	4618      	mov	r0, r3
 800b762:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b764:	68f8      	ldr	r0, [r7, #12]
 800b766:	f013 fea3 	bl	801f4b0 <_ZN22MockNamedValueListNode4nextEv>
 800b76a:	60f8      	str	r0, [r7, #12]
 800b76c:	e7e1      	b.n	800b732 <_ZN11MockSupport6enableEv+0x1c>
}
 800b76e:	bf00      	nop
 800b770:	3710      	adds	r7, #16
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}

0800b776 <_ZN11MockSupport7tracingEb>:

void MockSupport::tracing(bool enabled)
{
 800b776:	b580      	push	{r7, lr}
 800b778:	b084      	sub	sp, #16
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
 800b77e:	460b      	mov	r3, r1
 800b780:	70fb      	strb	r3, [r7, #3]
    tracing_ = enabled;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	78fa      	ldrb	r2, [r7, #3]
 800b786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	3338      	adds	r3, #56	; 0x38
 800b78e:	4618      	mov	r0, r3
 800b790:	f013 ff85 	bl	801f69e <_ZN18MockNamedValueList5beginEv>
 800b794:	60f8      	str	r0, [r7, #12]
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d01b      	beq.n	800b7d4 <_ZN11MockSupport7tracingEb+0x5e>
        if (getMockSupport(p)) getMockSupport(p)->tracing(enabled);
 800b79c:	68f9      	ldr	r1, [r7, #12]
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f000 fba0 	bl	800bee4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	bf14      	ite	ne
 800b7aa:	2301      	movne	r3, #1
 800b7ac:	2300      	moveq	r3, #0
 800b7ae:	b2db      	uxtb	r3, r3
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d00a      	beq.n	800b7ca <_ZN11MockSupport7tracingEb+0x54>
 800b7b4:	68f9      	ldr	r1, [r7, #12]
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 fb94 	bl	800bee4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	328c      	adds	r2, #140	; 0x8c
 800b7c2:	6812      	ldr	r2, [r2, #0]
 800b7c4:	78f9      	ldrb	r1, [r7, #3]
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b7ca:	68f8      	ldr	r0, [r7, #12]
 800b7cc:	f013 fe70 	bl	801f4b0 <_ZN22MockNamedValueListNode4nextEv>
 800b7d0:	60f8      	str	r0, [r7, #12]
 800b7d2:	e7e0      	b.n	800b796 <_ZN11MockSupport7tracingEb+0x20>
}
 800b7d4:	bf00      	nop
 800b7d6:	3710      	adds	r7, #16
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <_ZN11MockSupport17expectedCallsLeftEv>:
{
    return MockActualCallTrace::instance().getTraceOutput();
}

bool MockSupport::expectedCallsLeft()
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b084      	sub	sp, #16
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
    int callsLeft = expectations_.hasUnfulfilledExpectations();
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	3320      	adds	r3, #32
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f010 fbc1 	bl	801bf70 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	60fb      	str	r3, [r7, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	3338      	adds	r3, #56	; 0x38
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f013 ff51 	bl	801f69e <_ZN18MockNamedValueList5beginEv>
 800b7fc:	60b8      	str	r0, [r7, #8]
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d01f      	beq.n	800b844 <_ZN11MockSupport17expectedCallsLeftEv+0x68>
        if (getMockSupport(p)) callsLeft += getMockSupport(p)->expectedCallsLeft();
 800b804:	68b9      	ldr	r1, [r7, #8]
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f000 fb6c 	bl	800bee4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b80c:	4603      	mov	r3, r0
 800b80e:	2b00      	cmp	r3, #0
 800b810:	bf14      	ite	ne
 800b812:	2301      	movne	r3, #1
 800b814:	2300      	moveq	r3, #0
 800b816:	b2db      	uxtb	r3, r3
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d00e      	beq.n	800b83a <_ZN11MockSupport17expectedCallsLeftEv+0x5e>
 800b81c:	68b9      	ldr	r1, [r7, #8]
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f000 fb60 	bl	800bee4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b824:	4603      	mov	r3, r0
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	3298      	adds	r2, #152	; 0x98
 800b82a:	6812      	ldr	r2, [r2, #0]
 800b82c:	4618      	mov	r0, r3
 800b82e:	4790      	blx	r2
 800b830:	4603      	mov	r3, r0
 800b832:	461a      	mov	r2, r3
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	4413      	add	r3, r2
 800b838:	60fb      	str	r3, [r7, #12]
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b83a:	68b8      	ldr	r0, [r7, #8]
 800b83c:	f013 fe38 	bl	801f4b0 <_ZN22MockNamedValueListNode4nextEv>
 800b840:	60b8      	str	r0, [r7, #8]
 800b842:	e7dc      	b.n	800b7fe <_ZN11MockSupport17expectedCallsLeftEv+0x22>

    return callsLeft != 0;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2b00      	cmp	r3, #0
 800b848:	bf14      	ite	ne
 800b84a:	2301      	movne	r3, #1
 800b84c:	2300      	moveq	r3, #0
 800b84e:	b2db      	uxtb	r3, r3
}
 800b850:	4618      	mov	r0, r3
 800b852:	3710      	adds	r7, #16
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <_ZN11MockSupport26wasLastActualCallFulfilledEv>:

bool MockSupport::wasLastActualCallFulfilled()
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_ && !lastActualFunctionCall_->isFulfilled())
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b864:	2b00      	cmp	r3, #0
 800b866:	d010      	beq.n	800b88a <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	33bc      	adds	r3, #188	; 0xbc
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	4610      	mov	r0, r2
 800b878:	4798      	blx	r3
 800b87a:	4603      	mov	r3, r0
 800b87c:	f083 0301 	eor.w	r3, r3, #1
 800b880:	b2db      	uxtb	r3, r3
 800b882:	2b00      	cmp	r3, #0
 800b884:	d001      	beq.n	800b88a <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800b886:	2301      	movs	r3, #1
 800b888:	e000      	b.n	800b88c <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x34>
 800b88a:	2300      	movs	r3, #0
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d001      	beq.n	800b894 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x3c>
        return false;
 800b890:	2300      	movs	r3, #0
 800b892:	e02a      	b.n	800b8ea <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	3338      	adds	r3, #56	; 0x38
 800b898:	4618      	mov	r0, r3
 800b89a:	f013 ff00 	bl	801f69e <_ZN18MockNamedValueList5beginEv>
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d020      	beq.n	800b8e8 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x90>
        if (getMockSupport(p) && !getMockSupport(p)->wasLastActualCallFulfilled())
 800b8a6:	68f9      	ldr	r1, [r7, #12]
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f000 fb1b 	bl	800bee4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d00f      	beq.n	800b8d4 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800b8b4:	68f9      	ldr	r1, [r7, #12]
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 fb14 	bl	800bee4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7ff ffca 	bl	800b858 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	f083 0301 	eor.w	r3, r3, #1
 800b8ca:	b2db      	uxtb	r3, r3
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d001      	beq.n	800b8d4 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	e000      	b.n	800b8d6 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7e>
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d001      	beq.n	800b8de <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x86>
                return false;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	e005      	b.n	800b8ea <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b8de:	68f8      	ldr	r0, [r7, #12]
 800b8e0:	f013 fde6 	bl	801f4b0 <_ZN22MockNamedValueListNode4nextEv>
 800b8e4:	60f8      	str	r0, [r7, #12]
 800b8e6:	e7db      	b.n	800b8a0 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x48>

    return true;
 800b8e8:	2301      	movs	r3, #1
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3710      	adds	r7, #16
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}

0800b8f2 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>:

void MockSupport::failTestWithExpectedCallsNotFulfilled()
{
 800b8f2:	b580      	push	{r7, lr}
 800b8f4:	b092      	sub	sp, #72	; 0x48
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800b8fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b8fe:	4618      	mov	r0, r3
 800b900:	f010 fa2c 	bl	801bd5c <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f103 0220 	add.w	r2, r3, #32
 800b90a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b90e:	4611      	mov	r1, r2
 800b910:	4618      	mov	r0, r3
 800b912:	f010 fbf3 	bl	801c0fc <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	3338      	adds	r3, #56	; 0x38
 800b91a:	4618      	mov	r0, r3
 800b91c:	f013 febf 	bl	801f69e <_ZN18MockNamedValueList5beginEv>
 800b920:	6478      	str	r0, [r7, #68]	; 0x44
 800b922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b924:	2b00      	cmp	r3, #0
 800b926:	d01d      	beq.n	800b964 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x72>
        if(getMockSupport(p))
 800b928:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f000 fada 	bl	800bee4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b930:	4603      	mov	r3, r0
 800b932:	2b00      	cmp	r3, #0
 800b934:	bf14      	ite	ne
 800b936:	2301      	movne	r3, #1
 800b938:	2300      	moveq	r3, #0
 800b93a:	b2db      	uxtb	r3, r3
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d00c      	beq.n	800b95a <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800b940:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f000 face 	bl	800bee4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b948:	4603      	mov	r3, r0
 800b94a:	f103 0220 	add.w	r2, r3, #32
 800b94e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b952:	4611      	mov	r1, r2
 800b954:	4618      	mov	r0, r3
 800b956:	f010 fbd1 	bl	801c0fc <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b95a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b95c:	f013 fda8 	bl	801f4b0 <_ZN22MockNamedValueListNode4nextEv>
 800b960:	6478      	str	r0, [r7, #68]	; 0x44
 800b962:	e7de      	b.n	800b922 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x30>

    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	691a      	ldr	r2, [r3, #16]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	691b      	ldr	r3, [r3, #16]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	330c      	adds	r3, #12
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4610      	mov	r0, r2
 800b974:	4798      	blx	r3
 800b976:	4601      	mov	r1, r0
 800b978:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800b97c:	f107 0308 	add.w	r3, r7, #8
 800b980:	4618      	mov	r0, r3
 800b982:	f011 f9f5 	bl	801cd70 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	33c4      	adds	r3, #196	; 0xc4
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f107 0208 	add.w	r2, r7, #8
 800b992:	4611      	mov	r1, r2
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	4798      	blx	r3
    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800b998:	f107 0308 	add.w	r3, r7, #8
 800b99c:	4618      	mov	r0, r3
 800b99e:	f000 fe6d 	bl	800c67c <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800b9a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f010 f9ec 	bl	801bd84 <_ZN21MockExpectedCallsListD1Ev>
}
 800b9ac:	bf00      	nop
 800b9ae:	3748      	adds	r7, #72	; 0x48
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>:

void MockSupport::failTestWithOutOfOrderCalls()
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b092      	sub	sp, #72	; 0x48
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800b9bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f010 f9cb 	bl	801bd5c <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f103 0220 	add.w	r2, r3, #32
 800b9cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b9d0:	4611      	mov	r1, r2
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f010 fb92 	bl	801c0fc <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	3338      	adds	r3, #56	; 0x38
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f013 fe5e 	bl	801f69e <_ZN18MockNamedValueList5beginEv>
 800b9e2:	6478      	str	r0, [r7, #68]	; 0x44
 800b9e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d01d      	beq.n	800ba26 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x72>
        if(getMockSupport(p))
 800b9ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f000 fa79 	bl	800bee4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	bf14      	ite	ne
 800b9f8:	2301      	movne	r3, #1
 800b9fa:	2300      	moveq	r3, #0
 800b9fc:	b2db      	uxtb	r3, r3
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d00c      	beq.n	800ba1c <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800ba02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f000 fa6d 	bl	800bee4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	f103 0220 	add.w	r2, r3, #32
 800ba10:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ba14:	4611      	mov	r1, r2
 800ba16:	4618      	mov	r0, r3
 800ba18:	f010 fb70 	bl	801c0fc <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800ba1c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ba1e:	f013 fd47 	bl	801f4b0 <_ZN22MockNamedValueListNode4nextEv>
 800ba22:	6478      	str	r0, [r7, #68]	; 0x44
 800ba24:	e7de      	b.n	800b9e4 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x30>

    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	691a      	ldr	r2, [r3, #16]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	691b      	ldr	r3, [r3, #16]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	330c      	adds	r3, #12
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	4610      	mov	r0, r2
 800ba36:	4798      	blx	r3
 800ba38:	4601      	mov	r1, r0
 800ba3a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800ba3e:	f107 0308 	add.w	r3, r7, #8
 800ba42:	4618      	mov	r0, r3
 800ba44:	f011 fa38 	bl	801ceb8 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	33c4      	adds	r3, #196	; 0xc4
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f107 0208 	add.w	r2, r7, #8
 800ba54:	4611      	mov	r1, r2
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	4798      	blx	r3
    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800ba5a:	f107 0308 	add.w	r3, r7, #8
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f000 fe2e 	bl	800c6c0 <_ZN20MockCallOrderFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800ba64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f010 f98b 	bl	801bd84 <_ZN21MockExpectedCallsListD1Ev>
}
 800ba6e:	bf00      	nop
 800ba70:	3748      	adds	r7, #72	; 0x48
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}

0800ba76 <_ZN11MockSupport8failTestER11MockFailure>:

void MockSupport::failTest(MockFailure& failure)
{
 800ba76:	b580      	push	{r7, lr}
 800ba78:	b082      	sub	sp, #8
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
 800ba7e:	6039      	str	r1, [r7, #0]
    clear();
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	339c      	adds	r3, #156	; 0x9c
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	4798      	blx	r3
    activeReporter_->failTest(failure);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	691a      	ldr	r2, [r3, #16]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	691b      	ldr	r3, [r3, #16]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	3308      	adds	r3, #8
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	6839      	ldr	r1, [r7, #0]
 800ba9c:	4610      	mov	r0, r2
 800ba9e:	4798      	blx	r3
}
 800baa0:	bf00      	nop
 800baa2:	3708      	adds	r7, #8
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <_ZN11MockSupport10countCheckEv>:

void MockSupport::countCheck()
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
    UtestShell::getCurrent()->countCheck();
 800bab0:	f008 fd0a 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 800bab4:	4603      	mov	r3, r0
 800bab6:	4618      	mov	r0, r3
 800bab8:	f007 fb78 	bl	80131ac <_ZN10UtestShell10countCheckEv>
}
 800babc:	bf00      	nop
 800babe:	3708      	adds	r7, #8
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>:

void MockSupport::checkExpectationsOfLastActualCall()
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b084      	sub	sp, #16
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
    if(lastActualFunctionCall_)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d008      	beq.n	800bae6 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x22>
        lastActualFunctionCall_->checkExpectations();
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	33c4      	adds	r3, #196	; 0xc4
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	4610      	mov	r0, r2
 800bae4:	4798      	blx	r3

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	3338      	adds	r3, #56	; 0x38
 800baea:	4618      	mov	r0, r3
 800baec:	f013 fdd7 	bl	801f69e <_ZN18MockNamedValueList5beginEv>
 800baf0:	60f8      	str	r0, [r7, #12]
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d023      	beq.n	800bb40 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x7c>
        if(getMockSupport(p) && getMockSupport(p)->lastActualFunctionCall_)
 800baf8:	68f9      	ldr	r1, [r7, #12]
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f000 f9f2 	bl	800bee4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bb00:	4603      	mov	r3, r0
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d009      	beq.n	800bb1a <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800bb06:	68f9      	ldr	r1, [r7, #12]
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f000 f9eb 	bl	800bee4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d001      	beq.n	800bb1a <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800bb16:	2301      	movs	r3, #1
 800bb18:	e000      	b.n	800bb1c <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x58>
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d00a      	beq.n	800bb36 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x72>
            getMockSupport(p)->lastActualFunctionCall_->checkExpectations();
 800bb20:	68f9      	ldr	r1, [r7, #12]
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 f9de 	bl	800bee4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb2c:	681a      	ldr	r2, [r3, #0]
 800bb2e:	32c4      	adds	r2, #196	; 0xc4
 800bb30:	6812      	ldr	r2, [r2, #0]
 800bb32:	4618      	mov	r0, r3
 800bb34:	4790      	blx	r2
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800bb36:	68f8      	ldr	r0, [r7, #12]
 800bb38:	f013 fcba 	bl	801f4b0 <_ZN22MockNamedValueListNode4nextEv>
 800bb3c:	60f8      	str	r0, [r7, #12]
 800bb3e:	e7d8      	b.n	800baf2 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x2e>
}
 800bb40:	bf00      	nop
 800bb42:	3710      	adds	r7, #16
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <_ZN11MockSupport18hasCallsOutOfOrderEv>:

bool MockSupport::hasCallsOutOfOrder()
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b084      	sub	sp, #16
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
    if (expectations_.hasCallsOutOfOrder())
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	3320      	adds	r3, #32
 800bb54:	4618      	mov	r0, r3
 800bb56:	f010 f947 	bl	801bde8 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d001      	beq.n	800bb64 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x1c>
    {
        return true;
 800bb60:	2301      	movs	r3, #1
 800bb62:	e027      	b.n	800bbb4 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    }
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	3338      	adds	r3, #56	; 0x38
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f013 fd98 	bl	801f69e <_ZN18MockNamedValueList5beginEv>
 800bb6e:	60f8      	str	r0, [r7, #12]
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d01d      	beq.n	800bbb2 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6a>
        if (getMockSupport(p) && getMockSupport(p)->hasCallsOutOfOrder())
 800bb76:	68f9      	ldr	r1, [r7, #12]
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f000 f9b3 	bl	800bee4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d00c      	beq.n	800bb9e <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800bb84:	68f9      	ldr	r1, [r7, #12]
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f000 f9ac 	bl	800bee4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f7ff ffda 	bl	800bb48 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800bb94:	4603      	mov	r3, r0
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d001      	beq.n	800bb9e <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	e000      	b.n	800bba0 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x58>
 800bb9e:	2300      	movs	r3, #0
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d001      	beq.n	800bba8 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x60>
        {
            return true;
 800bba4:	2301      	movs	r3, #1
 800bba6:	e005      	b.n	800bbb4 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800bba8:	68f8      	ldr	r0, [r7, #12]
 800bbaa:	f013 fc81 	bl	801f4b0 <_ZN22MockNamedValueListNode4nextEv>
 800bbae:	60f8      	str	r0, [r7, #12]
 800bbb0:	e7de      	b.n	800bb70 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x28>
        }
    return false;
 800bbb2:	2300      	movs	r3, #0
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3710      	adds	r7, #16
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <_ZN11MockSupport17checkExpectationsEv>:

void MockSupport::checkExpectations()
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b082      	sub	sp, #8
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
    checkExpectationsOfLastActualCall();
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f7ff ff7d 	bl	800bac4 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>

    if (wasLastActualCallFulfilled() && expectedCallsLeft())
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f7ff fe44 	bl	800b858 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d00a      	beq.n	800bbec <_ZN11MockSupport17checkExpectationsEv+0x30>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	3398      	adds	r3, #152	; 0x98
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	4798      	blx	r3
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d001      	beq.n	800bbec <_ZN11MockSupport17checkExpectationsEv+0x30>
 800bbe8:	2301      	movs	r3, #1
 800bbea:	e000      	b.n	800bbee <_ZN11MockSupport17checkExpectationsEv+0x32>
 800bbec:	2300      	movs	r3, #0
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d002      	beq.n	800bbf8 <_ZN11MockSupport17checkExpectationsEv+0x3c>
        failTestWithExpectedCallsNotFulfilled();
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f7ff fe7d 	bl	800b8f2 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>

    if (hasCallsOutOfOrder())
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f7ff ffa5 	bl	800bb48 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d002      	beq.n	800bc0a <_ZN11MockSupport17checkExpectationsEv+0x4e>
        failTestWithOutOfOrderCalls();
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f7ff fed5 	bl	800b9b4 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>
}
 800bc0a:	bf00      	nop
 800bc0c:	3708      	adds	r7, #8
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}

0800bc12 <_ZN11MockSupport7hasDataERK12SimpleString>:


bool MockSupport::hasData(const SimpleString& name)
{
 800bc12:	b580      	push	{r7, lr}
 800bc14:	b082      	sub	sp, #8
 800bc16:	af00      	add	r7, sp, #0
 800bc18:	6078      	str	r0, [r7, #4]
 800bc1a:	6039      	str	r1, [r7, #0]
    return data_.getValueByName(name) != NULLPTR;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	3338      	adds	r3, #56	; 0x38
 800bc20:	6839      	ldr	r1, [r7, #0]
 800bc22:	4618      	mov	r0, r3
 800bc24:	f013 fd0c 	bl	801f640 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	bf14      	ite	ne
 800bc2e:	2301      	movne	r3, #1
 800bc30:	2300      	moveq	r3, #0
 800bc32:	b2db      	uxtb	r3, r3
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3708      	adds	r7, #8
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>:

MockNamedValue* MockSupport::retrieveDataFromStore(const SimpleString& name)
{
 800bc3c:	b590      	push	{r4, r7, lr}
 800bc3e:	b085      	sub	sp, #20
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
    MockNamedValue* newData = data_.getValueByName(name);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	3338      	adds	r3, #56	; 0x38
 800bc4a:	6839      	ldr	r1, [r7, #0]
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f013 fcf7 	bl	801f640 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800bc52:	60f8      	str	r0, [r7, #12]
    if (newData == NULLPTR) {
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d111      	bne.n	800bc7e <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x42>
        newData = new MockNamedValue(name);
 800bc5a:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800bc5e:	490a      	ldr	r1, [pc, #40]	; (800bc88 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x4c>)
 800bc60:	2038      	movs	r0, #56	; 0x38
 800bc62:	f7fe fc8b 	bl	800a57c <_ZnwjPKci>
 800bc66:	4604      	mov	r4, r0
 800bc68:	6839      	ldr	r1, [r7, #0]
 800bc6a:	4620      	mov	r0, r4
 800bc6c:	f011 fd6e 	bl	801d74c <_ZN14MockNamedValueC1ERK12SimpleString>
 800bc70:	60fc      	str	r4, [r7, #12]
        data_.add(newData);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	3338      	adds	r3, #56	; 0x38
 800bc76:	68f9      	ldr	r1, [r7, #12]
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f013 fcab 	bl	801f5d4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    }
    return newData;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3714      	adds	r7, #20
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd90      	pop	{r4, r7, pc}
 800bc88:	080243dc 	.word	0x080243dc

0800bc8c <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setValue(value);
}

void MockSupport::setDataObject(const SimpleString& name, const SimpleString& type, void* value)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b086      	sub	sp, #24
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	60f8      	str	r0, [r7, #12]
 800bc94:	60b9      	str	r1, [r7, #8]
 800bc96:	607a      	str	r2, [r7, #4]
 800bc98:	603b      	str	r3, [r7, #0]
    MockNamedValue* newData = retrieveDataFromStore(name);
 800bc9a:	68b9      	ldr	r1, [r7, #8]
 800bc9c:	68f8      	ldr	r0, [r7, #12]
 800bc9e:	f7ff ffcd 	bl	800bc3c <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>
 800bca2:	6178      	str	r0, [r7, #20]
    newData->setObjectPointer(type, value);
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	3344      	adds	r3, #68	; 0x44
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	683a      	ldr	r2, [r7, #0]
 800bcae:	6879      	ldr	r1, [r7, #4]
 800bcb0:	6978      	ldr	r0, [r7, #20]
 800bcb2:	4798      	blx	r3
}
 800bcb4:	bf00      	nop
 800bcb6:	3718      	adds	r7, #24
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <_ZN11MockSupport7getDataERK12SimpleString>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setConstObjectPointer(type, value);
}

MockNamedValue MockSupport::getData(const SimpleString& name)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b088      	sub	sp, #32
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	607a      	str	r2, [r7, #4]
    MockNamedValue* value = data_.getValueByName(name);
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	3338      	adds	r3, #56	; 0x38
 800bccc:	6879      	ldr	r1, [r7, #4]
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f013 fcb6 	bl	801f640 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800bcd4:	61f8      	str	r0, [r7, #28]
    if (value == NULLPTR)
 800bcd6:	69fb      	ldr	r3, [r7, #28]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d111      	bne.n	800bd00 <_ZN11MockSupport7getDataERK12SimpleString+0x44>
        return MockNamedValue("");
 800bcdc:	f107 0314 	add.w	r3, r7, #20
 800bce0:	490b      	ldr	r1, [pc, #44]	; (800bd10 <_ZN11MockSupport7getDataERK12SimpleString+0x54>)
 800bce2:	4618      	mov	r0, r3
 800bce4:	f001 f80d 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800bce8:	f107 0314 	add.w	r3, r7, #20
 800bcec:	4619      	mov	r1, r3
 800bcee:	68f8      	ldr	r0, [r7, #12]
 800bcf0:	f011 fd2c 	bl	801d74c <_ZN14MockNamedValueC1ERK12SimpleString>
 800bcf4:	f107 0314 	add.w	r3, r7, #20
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f001 fbba 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800bcfe:	e003      	b.n	800bd08 <_ZN11MockSupport7getDataERK12SimpleString+0x4c>
    return *value;
 800bd00:	69f9      	ldr	r1, [r7, #28]
 800bd02:	68f8      	ldr	r0, [r7, #12]
 800bd04:	f7ff f8a2 	bl	800ae4c <_ZN14MockNamedValueC1ERKS_>
}
 800bd08:	68f8      	ldr	r0, [r7, #12]
 800bd0a:	3720      	adds	r7, #32
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}
 800bd10:	080243d4 	.word	0x080243d4

0800bd14 <_ZN11MockSupport5cloneERK12SimpleString>:

MockSupport* MockSupport::clone(const SimpleString& mockName)
{
 800bd14:	b590      	push	{r4, r7, lr}
 800bd16:	b085      	sub	sp, #20
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	6039      	str	r1, [r7, #0]
    MockSupport* newMock = new MockSupport(mockName);
 800bd1e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800bd22:	4927      	ldr	r1, [pc, #156]	; (800bdc0 <_ZN11MockSupport5cloneERK12SimpleString+0xac>)
 800bd24:	2048      	movs	r0, #72	; 0x48
 800bd26:	f7fe fc29 	bl	800a57c <_ZnwjPKci>
 800bd2a:	4604      	mov	r4, r0
 800bd2c:	6839      	ldr	r1, [r7, #0]
 800bd2e:	4620      	mov	r0, r4
 800bd30:	f7ff f8f8 	bl	800af24 <_ZN11MockSupportC1ERK12SimpleString>
 800bd34:	60fc      	str	r4, [r7, #12]
    newMock->setMockFailureStandardReporter(standardReporter_);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	33a4      	adds	r3, #164	; 0xa4
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	6952      	ldr	r2, [r2, #20]
 800bd42:	4611      	mov	r1, r2
 800bd44:	68f8      	ldr	r0, [r7, #12]
 800bd46:	4798      	blx	r3
    if (ignoreOtherCalls_) newMock->ignoreOtherCalls();
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d005      	beq.n	800bd5e <_ZN11MockSupport5cloneERK12SimpleString+0x4a>
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	3390      	adds	r3, #144	; 0x90
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	68f8      	ldr	r0, [r7, #12]
 800bd5c:	4798      	blx	r3

    if (!enabled_) newMock->disable();
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800bd64:	f083 0301 	eor.w	r3, r3, #1
 800bd68:	b2db      	uxtb	r3, r3
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d005      	beq.n	800bd7a <_ZN11MockSupport5cloneERK12SimpleString+0x66>
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	3384      	adds	r3, #132	; 0x84
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	68f8      	ldr	r0, [r7, #12]
 800bd78:	4798      	blx	r3

    if (strictOrdering_) newMock->strictOrder();
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	7b1b      	ldrb	r3, [r3, #12]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d005      	beq.n	800bd8e <_ZN11MockSupport5cloneERK12SimpleString+0x7a>
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	3308      	adds	r3, #8
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	68f8      	ldr	r0, [r7, #12]
 800bd8c:	4798      	blx	r3

    newMock->tracing(tracing_);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	338c      	adds	r3, #140	; 0x8c
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	687a      	ldr	r2, [r7, #4]
 800bd98:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 800bd9c:	4611      	mov	r1, r2
 800bd9e:	68f8      	ldr	r0, [r7, #12]
 800bda0:	4798      	blx	r3
    newMock->installComparatorsAndCopiers(comparatorsAndCopiersRepository_);
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	33b8      	adds	r3, #184	; 0xb8
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	687a      	ldr	r2, [r7, #4]
 800bdac:	3230      	adds	r2, #48	; 0x30
 800bdae:	4611      	mov	r1, r2
 800bdb0:	68f8      	ldr	r0, [r7, #12]
 800bdb2:	4798      	blx	r3
    return newMock;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3714      	adds	r7, #20
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd90      	pop	{r4, r7, pc}
 800bdbe:	bf00      	nop
 800bdc0:	080243dc 	.word	0x080243dc

0800bdc4 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>:

MockSupport* MockSupport::getMockSupportScope(const SimpleString& name)
{
 800bdc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdc6:	b0ab      	sub	sp, #172	; 0xac
 800bdc8:	af04      	add	r7, sp, #16
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	6039      	str	r1, [r7, #0]
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800bdce:	f107 0308 	add.w	r3, r7, #8
 800bdd2:	4941      	ldr	r1, [pc, #260]	; (800bed8 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x114>)
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f000 ff94 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
    mockingSupportName += name;
 800bdda:	f107 0308 	add.w	r3, r7, #8
 800bdde:	6839      	ldr	r1, [r7, #0]
 800bde0:	4618      	mov	r0, r3
 800bde2:	f001 fbc3 	bl	800d56c <_ZN12SimpleStringpLERKS_>

    if (hasData(mockingSupportName)) {
 800bde6:	f107 0308 	add.w	r3, r7, #8
 800bdea:	4619      	mov	r1, r3
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f7ff ff10 	bl	800bc12 <_ZN11MockSupport7hasDataERK12SimpleString>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d048      	beq.n	800be8a <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xc6>
        STRCMP_EQUAL("MockSupport", getData(mockingSupportName).getType().asCharString());
 800bdf8:	f008 fb66 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 800bdfc:	4604      	mov	r4, r0
 800bdfe:	6823      	ldr	r3, [r4, #0]
 800be00:	3324      	adds	r3, #36	; 0x24
 800be02:	681d      	ldr	r5, [r3, #0]
 800be04:	f107 0318 	add.w	r3, r7, #24
 800be08:	f107 0208 	add.w	r2, r7, #8
 800be0c:	6879      	ldr	r1, [r7, #4]
 800be0e:	4618      	mov	r0, r3
 800be10:	f7ff ff54 	bl	800bcbc <_ZN11MockSupport7getDataERK12SimpleString>
 800be14:	f107 0310 	add.w	r3, r7, #16
 800be18:	f107 0218 	add.w	r2, r7, #24
 800be1c:	4611      	mov	r1, r2
 800be1e:	4618      	mov	r0, r3
 800be20:	f011 ff61 	bl	801dce6 <_ZNK14MockNamedValue7getTypeEv>
 800be24:	f107 0310 	add.w	r3, r7, #16
 800be28:	4618      	mov	r0, r3
 800be2a:	f001 faf5 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 800be2e:	4606      	mov	r6, r0
 800be30:	f008 fb5a 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800be34:	4603      	mov	r3, r0
 800be36:	9302      	str	r3, [sp, #8]
 800be38:	f240 13bd 	movw	r3, #445	; 0x1bd
 800be3c:	9301      	str	r3, [sp, #4]
 800be3e:	4b27      	ldr	r3, [pc, #156]	; (800bedc <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x118>)
 800be40:	9300      	str	r3, [sp, #0]
 800be42:	2300      	movs	r3, #0
 800be44:	4632      	mov	r2, r6
 800be46:	4926      	ldr	r1, [pc, #152]	; (800bee0 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800be48:	4620      	mov	r0, r4
 800be4a:	47a8      	blx	r5
 800be4c:	f107 0310 	add.w	r3, r7, #16
 800be50:	4618      	mov	r0, r3
 800be52:	f001 fb0e 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800be56:	f107 0318 	add.w	r3, r7, #24
 800be5a:	4618      	mov	r0, r3
 800be5c:	f011 fca0 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
        return (MockSupport*) getData(mockingSupportName).getObjectPointer();
 800be60:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800be64:	f107 0208 	add.w	r2, r7, #8
 800be68:	6879      	ldr	r1, [r7, #4]
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7ff ff26 	bl	800bcbc <_ZN11MockSupport7getDataERK12SimpleString>
 800be70:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800be74:	4618      	mov	r0, r3
 800be76:	f012 fa4f 	bl	801e318 <_ZNK14MockNamedValue16getObjectPointerEv>
 800be7a:	4604      	mov	r4, r0
 800be7c:	bf00      	nop
 800be7e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800be82:	4618      	mov	r0, r3
 800be84:	f011 fc8c 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
 800be88:	e01b      	b.n	800bec2 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xfe>
    }

    MockSupport *newMock = clone(name);
 800be8a:	6839      	ldr	r1, [r7, #0]
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f7ff ff41 	bl	800bd14 <_ZN11MockSupport5cloneERK12SimpleString>
 800be92:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    setDataObject(mockingSupportName, "MockSupport", newMock);
 800be96:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800be9a:	4911      	ldr	r1, [pc, #68]	; (800bee0 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800be9c:	4618      	mov	r0, r3
 800be9e:	f000 ff30 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800bea2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800bea6:	f107 0108 	add.w	r1, r7, #8
 800beaa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f7ff feec 	bl	800bc8c <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>
 800beb4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800beb8:	4618      	mov	r0, r3
 800beba:	f001 fada 	bl	800d472 <_ZN12SimpleStringD1Ev>
    return newMock;
 800bebe:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800bec2:	f107 0308 	add.w	r3, r7, #8
 800bec6:	4618      	mov	r0, r3
 800bec8:	f001 fad3 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800becc:	4623      	mov	r3, r4
}
 800bece:	4618      	mov	r0, r3
 800bed0:	379c      	adds	r7, #156	; 0x9c
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bed6:	bf00      	nop
 800bed8:	080243f4 	.word	0x080243f4
 800bedc:	080243dc 	.word	0x080243dc
 800bee0:	08024414 	.word	0x08024414

0800bee4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>:

MockSupport* MockSupport::getMockSupport(MockNamedValueListNode* node)
{
 800bee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bee8:	b08b      	sub	sp, #44	; 0x2c
 800beea:	af00      	add	r7, sp, #0
 800beec:	6078      	str	r0, [r7, #4]
 800beee:	6039      	str	r1, [r7, #0]
    if (node->getType() == "MockSupport" && node->getName().contains(MOCK_SUPPORT_SCOPE_PREFIX))
 800bef0:	2500      	movs	r5, #0
 800bef2:	2600      	movs	r6, #0
 800bef4:	f107 0308 	add.w	r3, r7, #8
 800bef8:	6839      	ldr	r1, [r7, #0]
 800befa:	4618      	mov	r0, r3
 800befc:	f013 fb26 	bl	801f54c <_ZNK22MockNamedValueListNode7getTypeEv>
 800bf00:	f04f 0801 	mov.w	r8, #1
 800bf04:	f107 0310 	add.w	r3, r7, #16
 800bf08:	492e      	ldr	r1, [pc, #184]	; (800bfc4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe0>)
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f000 fef9 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800bf10:	f04f 0901 	mov.w	r9, #1
 800bf14:	f107 0210 	add.w	r2, r7, #16
 800bf18:	f107 0308 	add.w	r3, r7, #8
 800bf1c:	4611      	mov	r1, r2
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f001 fab3 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 800bf24:	4603      	mov	r3, r0
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d01a      	beq.n	800bf60 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800bf2a:	f107 0318 	add.w	r3, r7, #24
 800bf2e:	6839      	ldr	r1, [r7, #0]
 800bf30:	4618      	mov	r0, r3
 800bf32:	f013 faf8 	bl	801f526 <_ZNK22MockNamedValueListNode7getNameEv>
 800bf36:	2501      	movs	r5, #1
 800bf38:	f107 0320 	add.w	r3, r7, #32
 800bf3c:	4922      	ldr	r1, [pc, #136]	; (800bfc8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe4>)
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f000 fedf 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800bf44:	2601      	movs	r6, #1
 800bf46:	f107 0220 	add.w	r2, r7, #32
 800bf4a:	f107 0318 	add.w	r3, r7, #24
 800bf4e:	4611      	mov	r1, r2
 800bf50:	4618      	mov	r0, r3
 800bf52:	f000 ff54 	bl	800cdfe <_ZNK12SimpleString8containsERKS_>
 800bf56:	4603      	mov	r3, r0
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d001      	beq.n	800bf60 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800bf5c:	2401      	movs	r4, #1
 800bf5e:	e000      	b.n	800bf62 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7e>
 800bf60:	2400      	movs	r4, #0
 800bf62:	2e00      	cmp	r6, #0
 800bf64:	d004      	beq.n	800bf70 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x8c>
 800bf66:	f107 0320 	add.w	r3, r7, #32
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f001 fa81 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800bf70:	2d00      	cmp	r5, #0
 800bf72:	d004      	beq.n	800bf7e <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x9a>
 800bf74:	f107 0318 	add.w	r3, r7, #24
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f001 fa7a 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800bf7e:	f1b9 0f00 	cmp.w	r9, #0
 800bf82:	d004      	beq.n	800bf8e <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xaa>
 800bf84:	f107 0310 	add.w	r3, r7, #16
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f001 fa72 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800bf8e:	f1b8 0f00 	cmp.w	r8, #0
 800bf92:	d004      	beq.n	800bf9e <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xba>
 800bf94:	f107 0308 	add.w	r3, r7, #8
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f001 fa6a 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800bf9e:	2c00      	cmp	r4, #0
 800bfa0:	d00a      	beq.n	800bfb8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd4>
        return (MockSupport*) node->item()->getObjectPointer();
 800bfa2:	6838      	ldr	r0, [r7, #0]
 800bfa4:	f013 fa90 	bl	801f4c8 <_ZN22MockNamedValueListNode4itemEv>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	681a      	ldr	r2, [r3, #0]
 800bfac:	32a0      	adds	r2, #160	; 0xa0
 800bfae:	6812      	ldr	r2, [r2, #0]
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	4790      	blx	r2
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	e000      	b.n	800bfba <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd6>
    return NULLPTR;
 800bfb8:	2300      	movs	r3, #0
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	372c      	adds	r7, #44	; 0x2c
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfc4:	08024414 	.word	0x08024414
 800bfc8:	080243f4 	.word	0x080243f4

0800bfcc <_ZN11MockSupport11returnValueEv>:

MockNamedValue MockSupport::returnValue()
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b084      	sub	sp, #16
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	6039      	str	r1, [r7, #0]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->returnValue();
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d00a      	beq.n	800bff4 <_ZN11MockSupport11returnValueEv+0x28>
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	3354      	adds	r3, #84	; 0x54
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	687a      	ldr	r2, [r7, #4]
 800bfee:	4610      	mov	r0, r2
 800bff0:	4798      	blx	r3
 800bff2:	e010      	b.n	800c016 <_ZN11MockSupport11returnValueEv+0x4a>
    return MockNamedValue("");
 800bff4:	f107 0308 	add.w	r3, r7, #8
 800bff8:	4909      	ldr	r1, [pc, #36]	; (800c020 <_ZN11MockSupport11returnValueEv+0x54>)
 800bffa:	4618      	mov	r0, r3
 800bffc:	f000 fe81 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800c000:	f107 0308 	add.w	r3, r7, #8
 800c004:	4619      	mov	r1, r3
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f011 fba0 	bl	801d74c <_ZN14MockNamedValueC1ERK12SimpleString>
 800c00c:	f107 0308 	add.w	r3, r7, #8
 800c010:	4618      	mov	r0, r3
 800c012:	f001 fa2e 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	3710      	adds	r7, #16
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
 800c01e:	bf00      	nop
 800c020:	080243d4 	.word	0x080243d4

0800c024 <_ZN11MockSupport15boolReturnValueEv>:

bool MockSupport::boolReturnValue()
{
 800c024:	b590      	push	{r4, r7, lr}
 800c026:	b091      	sub	sp, #68	; 0x44
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	3320      	adds	r3, #32
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f107 0208 	add.w	r2, r7, #8
 800c038:	6879      	ldr	r1, [r7, #4]
 800c03a:	4610      	mov	r0, r2
 800c03c:	4798      	blx	r3
 800c03e:	f107 0308 	add.w	r3, r7, #8
 800c042:	4618      	mov	r0, r3
 800c044:	f011 fe5e 	bl	801dd04 <_ZNK14MockNamedValue12getBoolValueEv>
 800c048:	4603      	mov	r3, r0
 800c04a:	461c      	mov	r4, r3
 800c04c:	bf00      	nop
 800c04e:	f107 0308 	add.w	r3, r7, #8
 800c052:	4618      	mov	r0, r3
 800c054:	f011 fba4 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
 800c058:	4623      	mov	r3, r4
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3744      	adds	r7, #68	; 0x44
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd90      	pop	{r4, r7, pc}

0800c062 <_ZN11MockSupport22unsignedIntReturnValueEv>:

unsigned int MockSupport::unsignedIntReturnValue()
{
 800c062:	b590      	push	{r4, r7, lr}
 800c064:	b091      	sub	sp, #68	; 0x44
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	3320      	adds	r3, #32
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f107 0208 	add.w	r2, r7, #8
 800c076:	6879      	ldr	r1, [r7, #4]
 800c078:	4610      	mov	r0, r2
 800c07a:	4798      	blx	r3
 800c07c:	f107 0308 	add.w	r3, r7, #8
 800c080:	4618      	mov	r0, r3
 800c082:	f011 fe67 	bl	801dd54 <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 800c086:	4604      	mov	r4, r0
 800c088:	bf00      	nop
 800c08a:	f107 0308 	add.w	r3, r7, #8
 800c08e:	4618      	mov	r0, r3
 800c090:	f011 fb86 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
 800c094:	4623      	mov	r3, r4
}
 800c096:	4618      	mov	r0, r3
 800c098:	3744      	adds	r7, #68	; 0x44
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd90      	pop	{r4, r7, pc}

0800c09e <_ZN11MockSupport14intReturnValueEv>:

int MockSupport::intReturnValue()
{
 800c09e:	b590      	push	{r4, r7, lr}
 800c0a0:	b091      	sub	sp, #68	; 0x44
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	3320      	adds	r3, #32
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f107 0208 	add.w	r2, r7, #8
 800c0b2:	6879      	ldr	r1, [r7, #4]
 800c0b4:	4610      	mov	r0, r2
 800c0b6:	4798      	blx	r3
 800c0b8:	f107 0308 	add.w	r3, r7, #8
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f011 fe99 	bl	801ddf4 <_ZNK14MockNamedValue11getIntValueEv>
 800c0c2:	4604      	mov	r4, r0
 800c0c4:	bf00      	nop
 800c0c6:	f107 0308 	add.w	r3, r7, #8
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f011 fb68 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
 800c0d0:	4623      	mov	r3, r4
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3744      	adds	r7, #68	; 0x44
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd90      	pop	{r4, r7, pc}

0800c0da <_ZN11MockSupport26returnStringValueOrDefaultEPKc>:

const char * MockSupport::returnStringValueOrDefault(const char * defaultValue)
{
 800c0da:	b580      	push	{r7, lr}
 800c0dc:	b082      	sub	sp, #8
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	6078      	str	r0, [r7, #4]
 800c0e2:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	331c      	adds	r3, #28
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	4798      	blx	r3
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d007      	beq.n	800c106 <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2c>
        return stringReturnValue();
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	335c      	adds	r3, #92	; 0x5c
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	4798      	blx	r3
 800c102:	4603      	mov	r3, r0
 800c104:	e000      	b.n	800c108 <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2e>
    }
    return defaultValue;
 800c106:	683b      	ldr	r3, [r7, #0]
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3708      	adds	r7, #8
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}

0800c110 <_ZN11MockSupport26returnDoubleValueOrDefaultEd>:

double MockSupport::returnDoubleValueOrDefault(double defaultValue)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b084      	sub	sp, #16
 800c114:	af00      	add	r7, sp, #0
 800c116:	60f8      	str	r0, [r7, #12]
 800c118:	ed87 0b00 	vstr	d0, [r7]
    if (hasReturnValue()) {
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	331c      	adds	r3, #28
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	68f8      	ldr	r0, [r7, #12]
 800c126:	4798      	blx	r3
 800c128:	4603      	mov	r3, r0
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d00a      	beq.n	800c144 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x34>
        return doubleReturnValue();
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	3368      	adds	r3, #104	; 0x68
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	68f8      	ldr	r0, [r7, #12]
 800c138:	4798      	blx	r3
 800c13a:	eeb0 7a40 	vmov.f32	s14, s0
 800c13e:	eef0 7a60 	vmov.f32	s15, s1
 800c142:	e001      	b.n	800c148 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x38>
    }
    return defaultValue;
 800c144:	ed97 7b00 	vldr	d7, [r7]
}
 800c148:	eeb0 0a47 	vmov.f32	s0, s14
 800c14c:	eef0 0a67 	vmov.f32	s1, s15
 800c150:	3710      	adds	r7, #16
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}

0800c156 <_ZN11MockSupport27returnLongIntValueOrDefaultEl>:

long int MockSupport::returnLongIntValueOrDefault(long int defaultValue)
{
 800c156:	b580      	push	{r7, lr}
 800c158:	b082      	sub	sp, #8
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	6078      	str	r0, [r7, #4]
 800c15e:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	331c      	adds	r3, #28
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	4798      	blx	r3
 800c16c:	4603      	mov	r3, r0
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d007      	beq.n	800c182 <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2c>
        return longIntReturnValue();
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	3338      	adds	r3, #56	; 0x38
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	4798      	blx	r3
 800c17e:	4603      	mov	r3, r0
 800c180:	e000      	b.n	800c184 <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2e>
    }
    return defaultValue;
 800c182:	683b      	ldr	r3, [r7, #0]
}
 800c184:	4618      	mov	r0, r3
 800c186:	3708      	adds	r7, #8
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <_ZN11MockSupport24returnBoolValueOrDefaultEb>:

bool MockSupport::returnBoolValueOrDefault(bool defaultValue)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b082      	sub	sp, #8
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	460b      	mov	r3, r1
 800c196:	70fb      	strb	r3, [r7, #3]
    if (hasReturnValue()) {
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	331c      	adds	r3, #28
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	4798      	blx	r3
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d007      	beq.n	800c1ba <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x2e>
        return boolReturnValue();
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	3324      	adds	r3, #36	; 0x24
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	4798      	blx	r3
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	e000      	b.n	800c1bc <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x30>
    }
    return defaultValue;
 800c1ba:	78fb      	ldrb	r3, [r7, #3]
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3708      	adds	r7, #8
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <_ZN11MockSupport23returnIntValueOrDefaultEi>:

int MockSupport::returnIntValueOrDefault(int defaultValue)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b082      	sub	sp, #8
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	331c      	adds	r3, #28
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	4798      	blx	r3
 800c1da:	4603      	mov	r3, r0
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d007      	beq.n	800c1f0 <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2c>
        return intReturnValue();
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	332c      	adds	r3, #44	; 0x2c
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	4798      	blx	r3
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	e000      	b.n	800c1f2 <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2e>
    }
    return defaultValue;
 800c1f0:	683b      	ldr	r3, [r7, #0]
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3708      	adds	r7, #8
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}

0800c1fa <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockSupport::returnUnsignedIntValueOrDefault(unsigned int defaultValue)
{
 800c1fa:	b580      	push	{r7, lr}
 800c1fc:	b082      	sub	sp, #8
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	6078      	str	r0, [r7, #4]
 800c202:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	331c      	adds	r3, #28
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	4798      	blx	r3
 800c210:	4603      	mov	r3, r0
 800c212:	2b00      	cmp	r3, #0
 800c214:	d007      	beq.n	800c226 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2c>
        return unsignedIntReturnValue();
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	3334      	adds	r3, #52	; 0x34
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	4798      	blx	r3
 800c222:	4603      	mov	r3, r0
 800c224:	e000      	b.n	800c228 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2e>
    }
    return defaultValue;
 800c226:	683b      	ldr	r3, [r7, #0]
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3708      	adds	r7, #8
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockSupport::returnUnsignedLongIntValueOrDefault(unsigned long int defaultValue)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b082      	sub	sp, #8
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	331c      	adds	r3, #28
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	4798      	blx	r3
 800c246:	4603      	mov	r3, r0
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d007      	beq.n	800c25c <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2c>
        return unsignedLongIntReturnValue();
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	3340      	adds	r3, #64	; 0x40
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	4798      	blx	r3
 800c258:	4603      	mov	r3, r0
 800c25a:	e000      	b.n	800c25e <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2e>
    }
    return defaultValue;
 800c25c:	683b      	ldr	r3, [r7, #0]
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3708      	adds	r7, #8
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}

0800c266 <_ZN11MockSupport18longIntReturnValueEv>:

long int MockSupport::longIntReturnValue()
{
 800c266:	b590      	push	{r4, r7, lr}
 800c268:	b091      	sub	sp, #68	; 0x44
 800c26a:	af00      	add	r7, sp, #0
 800c26c:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	3320      	adds	r3, #32
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f107 0208 	add.w	r2, r7, #8
 800c27a:	6879      	ldr	r1, [r7, #4]
 800c27c:	4610      	mov	r0, r2
 800c27e:	4798      	blx	r3
 800c280:	f107 0308 	add.w	r3, r7, #8
 800c284:	4618      	mov	r0, r3
 800c286:	f011 fddd 	bl	801de44 <_ZNK14MockNamedValue15getLongIntValueEv>
 800c28a:	4604      	mov	r4, r0
 800c28c:	bf00      	nop
 800c28e:	f107 0308 	add.w	r3, r7, #8
 800c292:	4618      	mov	r0, r3
 800c294:	f011 fa84 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
 800c298:	4623      	mov	r3, r4
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	3744      	adds	r7, #68	; 0x44
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd90      	pop	{r4, r7, pc}

0800c2a2 <_ZN11MockSupport26unsignedLongIntReturnValueEv>:

unsigned long int MockSupport::unsignedLongIntReturnValue()
{
 800c2a2:	b590      	push	{r4, r7, lr}
 800c2a4:	b091      	sub	sp, #68	; 0x44
 800c2a6:	af00      	add	r7, sp, #0
 800c2a8:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	3320      	adds	r3, #32
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f107 0208 	add.w	r2, r7, #8
 800c2b6:	6879      	ldr	r1, [r7, #4]
 800c2b8:	4610      	mov	r0, r2
 800c2ba:	4798      	blx	r3
 800c2bc:	f107 0308 	add.w	r3, r7, #8
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f011 fe21 	bl	801df08 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 800c2c6:	4604      	mov	r4, r0
 800c2c8:	bf00      	nop
 800c2ca:	f107 0308 	add.w	r3, r7, #8
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f011 fa66 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
 800c2d4:	4623      	mov	r3, r4
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3744      	adds	r7, #68	; 0x44
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd90      	pop	{r4, r7, pc}
	...

0800c2e0 <_ZN11MockSupport22longLongIntReturnValueEv>:
}

#else

cpputest_longlong MockSupport::longLongIntReturnValue()
{
 800c2e0:	b5b0      	push	{r4, r5, r7, lr}
 800c2e2:	b084      	sub	sp, #16
 800c2e4:	af02      	add	r7, sp, #8
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 800c2ea:	f008 f8ed 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 800c2ee:	4604      	mov	r4, r0
 800c2f0:	6823      	ldr	r3, [r4, #0]
 800c2f2:	3368      	adds	r3, #104	; 0x68
 800c2f4:	681d      	ldr	r5, [r3, #0]
 800c2f6:	f008 f8f7 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	9300      	str	r3, [sp, #0]
 800c2fe:	f240 2345 	movw	r3, #581	; 0x245
 800c302:	4a06      	ldr	r2, [pc, #24]	; (800c31c <_ZN11MockSupport22longLongIntReturnValueEv+0x3c>)
 800c304:	4906      	ldr	r1, [pc, #24]	; (800c320 <_ZN11MockSupport22longLongIntReturnValueEv+0x40>)
 800c306:	4620      	mov	r0, r4
 800c308:	47a8      	blx	r5
    return cpputest_longlong(0);
 800c30a:	2100      	movs	r1, #0
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f7fe fd2f 	bl	800ad70 <_ZN17cpputest_longlongC1Ei>
}
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	3708      	adds	r7, #8
 800c316:	46bd      	mov	sp, r7
 800c318:	bdb0      	pop	{r4, r5, r7, pc}
 800c31a:	bf00      	nop
 800c31c:	080243dc 	.word	0x080243dc
 800c320:	08024420 	.word	0x08024420

0800c324 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv>:

cpputest_ulonglong MockSupport::unsignedLongLongIntReturnValue()
{
 800c324:	b5b0      	push	{r4, r5, r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af02      	add	r7, sp, #8
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 800c32e:	f008 f8cb 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 800c332:	4604      	mov	r4, r0
 800c334:	6823      	ldr	r3, [r4, #0]
 800c336:	3368      	adds	r3, #104	; 0x68
 800c338:	681d      	ldr	r5, [r3, #0]
 800c33a:	f008 f8d5 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800c33e:	4603      	mov	r3, r0
 800c340:	9300      	str	r3, [sp, #0]
 800c342:	f240 234b 	movw	r3, #587	; 0x24b
 800c346:	4a06      	ldr	r2, [pc, #24]	; (800c360 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x3c>)
 800c348:	4906      	ldr	r1, [pc, #24]	; (800c364 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x40>)
 800c34a:	4620      	mov	r0, r4
 800c34c:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 800c34e:	2100      	movs	r1, #0
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f7fe fd19 	bl	800ad88 <_ZN18cpputest_ulonglongC1Ei>
}
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	3708      	adds	r7, #8
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bdb0      	pop	{r4, r5, r7, pc}
 800c35e:	bf00      	nop
 800c360:	080243dc 	.word	0x080243dc
 800c364:	08024440 	.word	0x08024440

0800c368 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockSupport::returnLongLongIntValueOrDefault(cpputest_longlong defaultValue)
{
 800c368:	b5b0      	push	{r4, r5, r7, lr}
 800c36a:	b086      	sub	sp, #24
 800c36c:	af02      	add	r7, sp, #8
 800c36e:	60f8      	str	r0, [r7, #12]
 800c370:	60b9      	str	r1, [r7, #8]
 800c372:	4639      	mov	r1, r7
 800c374:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 800c378:	f008 f8a6 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 800c37c:	4604      	mov	r4, r0
 800c37e:	6823      	ldr	r3, [r4, #0]
 800c380:	3368      	adds	r3, #104	; 0x68
 800c382:	681d      	ldr	r5, [r3, #0]
 800c384:	f008 f8b0 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800c388:	4603      	mov	r3, r0
 800c38a:	9300      	str	r3, [sp, #0]
 800c38c:	f240 2351 	movw	r3, #593	; 0x251
 800c390:	4a06      	ldr	r2, [pc, #24]	; (800c3ac <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 800c392:	4907      	ldr	r1, [pc, #28]	; (800c3b0 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 800c394:	4620      	mov	r0, r4
 800c396:	47a8      	blx	r5
    return defaultValue;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	461a      	mov	r2, r3
 800c39c:	463b      	mov	r3, r7
 800c39e:	cb03      	ldmia	r3!, {r0, r1}
 800c3a0:	6010      	str	r0, [r2, #0]
 800c3a2:	6051      	str	r1, [r2, #4]
}
 800c3a4:	68f8      	ldr	r0, [r7, #12]
 800c3a6:	3710      	adds	r7, #16
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bdb0      	pop	{r4, r5, r7, pc}
 800c3ac:	080243dc 	.word	0x080243dc
 800c3b0:	08024420 	.word	0x08024420

0800c3b4 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockSupport::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong defaultValue)
{
 800c3b4:	b5b0      	push	{r4, r5, r7, lr}
 800c3b6:	b086      	sub	sp, #24
 800c3b8:	af02      	add	r7, sp, #8
 800c3ba:	60f8      	str	r0, [r7, #12]
 800c3bc:	60b9      	str	r1, [r7, #8]
 800c3be:	4639      	mov	r1, r7
 800c3c0:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 800c3c4:	f008 f880 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 800c3c8:	4604      	mov	r4, r0
 800c3ca:	6823      	ldr	r3, [r4, #0]
 800c3cc:	3368      	adds	r3, #104	; 0x68
 800c3ce:	681d      	ldr	r5, [r3, #0]
 800c3d0:	f008 f88a 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	9300      	str	r3, [sp, #0]
 800c3d8:	f240 2357 	movw	r3, #599	; 0x257
 800c3dc:	4a06      	ldr	r2, [pc, #24]	; (800c3f8 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 800c3de:	4907      	ldr	r1, [pc, #28]	; (800c3fc <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 800c3e0:	4620      	mov	r0, r4
 800c3e2:	47a8      	blx	r5
    return defaultValue;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	461a      	mov	r2, r3
 800c3e8:	463b      	mov	r3, r7
 800c3ea:	cb03      	ldmia	r3!, {r0, r1}
 800c3ec:	6010      	str	r0, [r2, #0]
 800c3ee:	6051      	str	r1, [r2, #4]
}
 800c3f0:	68f8      	ldr	r0, [r7, #12]
 800c3f2:	3710      	adds	r7, #16
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bdb0      	pop	{r4, r5, r7, pc}
 800c3f8:	080243dc 	.word	0x080243dc
 800c3fc:	08024440 	.word	0x08024440

0800c400 <_ZN11MockSupport17stringReturnValueEv>:

#endif

const char* MockSupport::stringReturnValue()
{
 800c400:	b590      	push	{r4, r7, lr}
 800c402:	b091      	sub	sp, #68	; 0x44
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	3320      	adds	r3, #32
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f107 0208 	add.w	r2, r7, #8
 800c414:	6879      	ldr	r1, [r7, #4]
 800c416:	4610      	mov	r0, r2
 800c418:	4798      	blx	r3
 800c41a:	f107 0308 	add.w	r3, r7, #8
 800c41e:	4618      	mov	r0, r3
 800c420:	f011 fea6 	bl	801e170 <_ZNK14MockNamedValue14getStringValueEv>
 800c424:	4604      	mov	r4, r0
 800c426:	bf00      	nop
 800c428:	f107 0308 	add.w	r3, r7, #8
 800c42c:	4618      	mov	r0, r3
 800c42e:	f011 f9b7 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
 800c432:	4623      	mov	r3, r4
}
 800c434:	4618      	mov	r0, r3
 800c436:	3744      	adds	r7, #68	; 0x44
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd90      	pop	{r4, r7, pc}

0800c43c <_ZN11MockSupport17doubleReturnValueEv>:

double MockSupport::doubleReturnValue()
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	ed2d 8b02 	vpush	{d8}
 800c442:	b090      	sub	sp, #64	; 0x40
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	3320      	adds	r3, #32
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f107 0208 	add.w	r2, r7, #8
 800c454:	6879      	ldr	r1, [r7, #4]
 800c456:	4610      	mov	r0, r2
 800c458:	4798      	blx	r3
 800c45a:	f107 0308 	add.w	r3, r7, #8
 800c45e:	4618      	mov	r0, r3
 800c460:	f011 fe2a 	bl	801e0b8 <_ZNK14MockNamedValue14getDoubleValueEv>
 800c464:	eeb0 8a40 	vmov.f32	s16, s0
 800c468:	eef0 8a60 	vmov.f32	s17, s1
 800c46c:	bf00      	nop
 800c46e:	f107 0308 	add.w	r3, r7, #8
 800c472:	4618      	mov	r0, r3
 800c474:	f011 f994 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
 800c478:	eeb0 7a48 	vmov.f32	s14, s16
 800c47c:	eef0 7a68 	vmov.f32	s15, s17
}
 800c480:	eeb0 0a47 	vmov.f32	s0, s14
 800c484:	eef0 0a67 	vmov.f32	s1, s15
 800c488:	3740      	adds	r7, #64	; 0x40
 800c48a:	46bd      	mov	sp, r7
 800c48c:	ecbd 8b02 	vpop	{d8}
 800c490:	bd80      	pop	{r7, pc}

0800c492 <_ZN11MockSupport27returnPointerValueOrDefaultEPv>:

void * MockSupport::returnPointerValueOrDefault(void * defaultValue)
{
 800c492:	b580      	push	{r7, lr}
 800c494:	b082      	sub	sp, #8
 800c496:	af00      	add	r7, sp, #0
 800c498:	6078      	str	r0, [r7, #4]
 800c49a:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	331c      	adds	r3, #28
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	4798      	blx	r3
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d007      	beq.n	800c4be <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2c>
        return pointerReturnValue();
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	336c      	adds	r3, #108	; 0x6c
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	4798      	blx	r3
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	e000      	b.n	800c4c0 <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2e>
    }
    return defaultValue;
 800c4be:	683b      	ldr	r3, [r7, #0]
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3708      	adds	r7, #8
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv>:

const void* MockSupport::returnConstPointerValueOrDefault(const void * defaultValue)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b082      	sub	sp, #8
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	331c      	adds	r3, #28
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	4798      	blx	r3
 800c4de:	4603      	mov	r3, r0
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d007      	beq.n	800c4f4 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2c>
        return constPointerReturnValue();
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	3378      	adds	r3, #120	; 0x78
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	4798      	blx	r3
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	e000      	b.n	800c4f6 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2e>
    }
    return defaultValue;
 800c4f4:	683b      	ldr	r3, [r7, #0]
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3708      	adds	r7, #8
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}

0800c4fe <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockSupport::returnFunctionPointerValueOrDefault(void (*defaultValue)()))()
{
 800c4fe:	b580      	push	{r7, lr}
 800c500:	b082      	sub	sp, #8
 800c502:	af00      	add	r7, sp, #0
 800c504:	6078      	str	r0, [r7, #4]
 800c506:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	331c      	adds	r3, #28
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	4798      	blx	r3
 800c514:	4603      	mov	r3, r0
 800c516:	2b00      	cmp	r3, #0
 800c518:	d007      	beq.n	800c52a <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2c>
        return functionPointerReturnValue();
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	3380      	adds	r3, #128	; 0x80
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	4798      	blx	r3
 800c526:	4603      	mov	r3, r0
 800c528:	e000      	b.n	800c52c <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2e>
    }
    return defaultValue;
 800c52a:	683b      	ldr	r3, [r7, #0]
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3708      	adds	r7, #8
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}

0800c534 <_ZN11MockSupport18pointerReturnValueEv>:

void* MockSupport::pointerReturnValue()
{
 800c534:	b590      	push	{r4, r7, lr}
 800c536:	b091      	sub	sp, #68	; 0x44
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	3320      	adds	r3, #32
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f107 0208 	add.w	r2, r7, #8
 800c548:	6879      	ldr	r1, [r7, #4]
 800c54a:	4610      	mov	r0, r2
 800c54c:	4798      	blx	r3
 800c54e:	f107 0308 	add.w	r3, r7, #8
 800c552:	4618      	mov	r0, r3
 800c554:	f011 fe34 	bl	801e1c0 <_ZNK14MockNamedValue15getPointerValueEv>
 800c558:	4604      	mov	r4, r0
 800c55a:	bf00      	nop
 800c55c:	f107 0308 	add.w	r3, r7, #8
 800c560:	4618      	mov	r0, r3
 800c562:	f011 f91d 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
 800c566:	4623      	mov	r3, r4
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3744      	adds	r7, #68	; 0x44
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd90      	pop	{r4, r7, pc}

0800c570 <_ZN11MockSupport23constPointerReturnValueEv>:

const void* MockSupport::constPointerReturnValue()
{
 800c570:	b590      	push	{r4, r7, lr}
 800c572:	b091      	sub	sp, #68	; 0x44
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	3320      	adds	r3, #32
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f107 0208 	add.w	r2, r7, #8
 800c584:	6879      	ldr	r1, [r7, #4]
 800c586:	4610      	mov	r0, r2
 800c588:	4798      	blx	r3
 800c58a:	f107 0308 	add.w	r3, r7, #8
 800c58e:	4618      	mov	r0, r3
 800c590:	f011 fe3e 	bl	801e210 <_ZNK14MockNamedValue20getConstPointerValueEv>
 800c594:	4604      	mov	r4, r0
 800c596:	bf00      	nop
 800c598:	f107 0308 	add.w	r3, r7, #8
 800c59c:	4618      	mov	r0, r3
 800c59e:	f011 f8ff 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
 800c5a2:	4623      	mov	r3, r4
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3744      	adds	r7, #68	; 0x44
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd90      	pop	{r4, r7, pc}

0800c5ac <_ZN11MockSupport26functionPointerReturnValueEv>:

void (*MockSupport::functionPointerReturnValue())()
{
 800c5ac:	b590      	push	{r4, r7, lr}
 800c5ae:	b091      	sub	sp, #68	; 0x44
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	3320      	adds	r3, #32
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f107 0208 	add.w	r2, r7, #8
 800c5c0:	6879      	ldr	r1, [r7, #4]
 800c5c2:	4610      	mov	r0, r2
 800c5c4:	4798      	blx	r3
 800c5c6:	f107 0308 	add.w	r3, r7, #8
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f011 fe48 	bl	801e260 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 800c5d0:	4604      	mov	r4, r0
 800c5d2:	bf00      	nop
 800c5d4:	f107 0308 	add.w	r3, r7, #8
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f011 f8e1 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
 800c5de:	4623      	mov	r3, r4
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3744      	adds	r7, #68	; 0x44
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd90      	pop	{r4, r7, pc}

0800c5e8 <_ZN11MockSupport14hasReturnValueEv>:

bool MockSupport::hasReturnValue()
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b082      	sub	sp, #8
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->hasReturnValue();
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d00a      	beq.n	800c60e <_ZN11MockSupport14hasReturnValueEv+0x26>
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	3350      	adds	r3, #80	; 0x50
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	4610      	mov	r0, r2
 800c608:	4798      	blx	r3
 800c60a:	4603      	mov	r3, r0
 800c60c:	e000      	b.n	800c610 <_ZN11MockSupport14hasReturnValueEv+0x28>
    return false;
 800c60e:	2300      	movs	r3, #0
}
 800c610:	4618      	mov	r0, r3
 800c612:	3708      	adds	r7, #8
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}

0800c618 <_Z41__static_initialization_and_destruction_0ii>:
 800c618:	b580      	push	{r7, lr}
 800c61a:	b084      	sub	sp, #16
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
 800c620:	6039      	str	r1, [r7, #0]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2b01      	cmp	r3, #1
 800c626:	d115      	bne.n	800c654 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c62e:	4293      	cmp	r3, r2
 800c630:	d110      	bne.n	800c654 <_Z41__static_initialization_and_destruction_0ii+0x3c>
static MockSupport global_mock;
 800c632:	f107 0308 	add.w	r3, r7, #8
 800c636:	490f      	ldr	r1, [pc, #60]	; (800c674 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800c638:	4618      	mov	r0, r3
 800c63a:	f000 fb62 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800c63e:	f107 0308 	add.w	r3, r7, #8
 800c642:	4619      	mov	r1, r3
 800c644:	480c      	ldr	r0, [pc, #48]	; (800c678 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800c646:	f7fe fc6d 	bl	800af24 <_ZN11MockSupportC1ERK12SimpleString>
 800c64a:	f107 0308 	add.w	r3, r7, #8
 800c64e:	4618      	mov	r0, r3
 800c650:	f000 ff0f 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d107      	bne.n	800c66a <_Z41__static_initialization_and_destruction_0ii+0x52>
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c660:	4293      	cmp	r3, r2
 800c662:	d102      	bne.n	800c66a <_Z41__static_initialization_and_destruction_0ii+0x52>
 800c664:	4804      	ldr	r0, [pc, #16]	; (800c678 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800c666:	f7fe fca7 	bl	800afb8 <_ZN11MockSupportD1Ev>
}
 800c66a:	bf00      	nop
 800c66c:	3710      	adds	r7, #16
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}
 800c672:	bf00      	nop
 800c674:	080243d4 	.word	0x080243d4
 800c678:	20000858 	.word	0x20000858

0800c67c <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>:
protected:
    void addExpectationsAndCallHistory(const MockExpectedCallsList& expectations);
    void addExpectationsAndCallHistoryRelatedTo(const SimpleString& function, const MockExpectedCallsList& expectations);
};

class MockExpectedCallsDidntHappenFailure : public MockFailure
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b082      	sub	sp, #8
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	4a05      	ldr	r2, [pc, #20]	; (800c69c <_ZN35MockExpectedCallsDidntHappenFailureD1Ev+0x20>)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	601a      	str	r2, [r3, #0]
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	4618      	mov	r0, r3
 800c68e:	f7fe fbbb 	bl	800ae08 <_ZN11MockFailureD1Ev>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	4618      	mov	r0, r3
 800c696:	3708      	adds	r7, #8
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}
 800c69c:	08028354 	.word	0x08028354

0800c6a0 <_ZN35MockExpectedCallsDidntHappenFailureD0Ev>:
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b082      	sub	sp, #8
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f7ff ffe7 	bl	800c67c <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
 800c6ae:	2134      	movs	r1, #52	; 0x34
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f7fd ff77 	bl	800a5a4 <_ZdlPvj>
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	3708      	adds	r7, #8
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bd80      	pop	{r7, pc}

0800c6c0 <_ZN20MockCallOrderFailureD1Ev>:
{
public:
    MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations);
};

class MockCallOrderFailure : public MockFailure
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b082      	sub	sp, #8
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
 800c6c8:	4a05      	ldr	r2, [pc, #20]	; (800c6e0 <_ZN20MockCallOrderFailureD1Ev+0x20>)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	601a      	str	r2, [r3, #0]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f7fe fb99 	bl	800ae08 <_ZN11MockFailureD1Ev>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3708      	adds	r7, #8
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}
 800c6e0:	08028328 	.word	0x08028328

0800c6e4 <_ZN20MockCallOrderFailureD0Ev>:
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b082      	sub	sp, #8
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f7ff ffe7 	bl	800c6c0 <_ZN20MockCallOrderFailureD1Ev>
 800c6f2:	2134      	movs	r1, #52	; 0x34
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f7fd ff55 	bl	800a5a4 <_ZdlPvj>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	3708      	adds	r7, #8
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}

0800c704 <_GLOBAL__sub_I__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800c704:	b580      	push	{r7, lr}
 800c706:	af00      	add	r7, sp, #0
 800c708:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c70c:	2001      	movs	r0, #1
 800c70e:	f7ff ff83 	bl	800c618 <_Z41__static_initialization_and_destruction_0ii>
 800c712:	bd80      	pop	{r7, pc}

0800c714 <_GLOBAL__sub_D__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800c714:	b580      	push	{r7, lr}
 800c716:	af00      	add	r7, sp, #0
 800c718:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c71c:	2000      	movs	r0, #0
 800c71e:	f7ff ff7b 	bl	800c618 <_Z41__static_initialization_and_destruction_0ii>
 800c722:	bd80      	pop	{r7, pc}

0800c724 <_ZN11SimpleMutexC1Ev>:
 */
#include "CppUTest/TestHarness.h"
#include "CppUTest/SimpleMutex.h"


SimpleMutex::SimpleMutex(void)
 800c724:	b580      	push	{r7, lr}
 800c726:	b082      	sub	sp, #8
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
{
    psMtx = PlatformSpecificMutexCreate();
 800c72c:	4b05      	ldr	r3, [pc, #20]	; (800c744 <_ZN11SimpleMutexC1Ev+0x20>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4798      	blx	r3
 800c732:	4602      	mov	r2, r0
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	601a      	str	r2, [r3, #0]
}
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	4618      	mov	r0, r3
 800c73c:	3708      	adds	r7, #8
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
 800c742:	bf00      	nop
 800c744:	200000f0 	.word	0x200000f0

0800c748 <_ZN11SimpleMutexD1Ev>:

SimpleMutex::~SimpleMutex(void)
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
{
    PlatformSpecificMutexDestroy(psMtx);
 800c750:	4b05      	ldr	r3, [pc, #20]	; (800c768 <_ZN11SimpleMutexD1Ev+0x20>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	687a      	ldr	r2, [r7, #4]
 800c756:	6812      	ldr	r2, [r2, #0]
 800c758:	4610      	mov	r0, r2
 800c75a:	4798      	blx	r3
}
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	4618      	mov	r0, r3
 800c760:	3708      	adds	r7, #8
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}
 800c766:	bf00      	nop
 800c768:	200000fc 	.word	0x200000fc

0800c76c <_ZN11SimpleMutex4LockEv>:

void SimpleMutex::Lock(void)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b082      	sub	sp, #8
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexLock(psMtx);
 800c774:	4b04      	ldr	r3, [pc, #16]	; (800c788 <_ZN11SimpleMutex4LockEv+0x1c>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	687a      	ldr	r2, [r7, #4]
 800c77a:	6812      	ldr	r2, [r2, #0]
 800c77c:	4610      	mov	r0, r2
 800c77e:	4798      	blx	r3
}
 800c780:	bf00      	nop
 800c782:	3708      	adds	r7, #8
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}
 800c788:	200000f4 	.word	0x200000f4

0800c78c <_ZN11SimpleMutex6UnlockEv>:

void SimpleMutex::Unlock(void)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b082      	sub	sp, #8
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexUnlock(psMtx);
 800c794:	4b04      	ldr	r3, [pc, #16]	; (800c7a8 <_ZN11SimpleMutex6UnlockEv+0x1c>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	687a      	ldr	r2, [r7, #4]
 800c79a:	6812      	ldr	r2, [r2, #0]
 800c79c:	4610      	mov	r0, r2
 800c79e:	4798      	blx	r3
}
 800c7a0:	bf00      	nop
 800c7a2:	3708      	adds	r7, #8
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}
 800c7a8:	200000f8 	.word	0x200000f8

0800c7ac <_ZN15ScopedMutexLockC1EP11SimpleMutex>:


ScopedMutexLock::ScopedMutexLock(SimpleMutex *mtx) :
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b082      	sub	sp, #8
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
 800c7b4:	6039      	str	r1, [r7, #0]
    mutex(mtx)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	683a      	ldr	r2, [r7, #0]
 800c7ba:	601a      	str	r2, [r3, #0]
{
    mutex->Lock();
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f7ff ffd3 	bl	800c76c <_ZN11SimpleMutex4LockEv>
}
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3708      	adds	r7, #8
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}

0800c7d0 <_ZN15ScopedMutexLockD1Ev>:

ScopedMutexLock::~ScopedMutexLock()
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b082      	sub	sp, #8
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
{
    mutex->Unlock();
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f7ff ffd5 	bl	800c78c <_ZN11SimpleMutex6UnlockEv>
}
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3708      	adds	r7, #8
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <_ZN12SimpleString18getStringAllocatorEv>:
}

TestMemoryAllocator* SimpleString::stringAllocator_ = NULLPTR;

TestMemoryAllocator* SimpleString::getStringAllocator()
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	af00      	add	r7, sp, #0
    if (stringAllocator_ == NULLPTR)
 800c7f0:	4b05      	ldr	r3, [pc, #20]	; (800c808 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d103      	bne.n	800c800 <_ZN12SimpleString18getStringAllocatorEv+0x14>
        return defaultNewArrayAllocator();
 800c7f8:	f003 fd7a 	bl	80102f0 <_Z24defaultNewArrayAllocatorv>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	e001      	b.n	800c804 <_ZN12SimpleString18getStringAllocatorEv+0x18>
    return stringAllocator_;
 800c800:	4b01      	ldr	r3, [pc, #4]	; (800c808 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800c802:	681b      	ldr	r3, [r3, #0]
}
 800c804:	4618      	mov	r0, r3
 800c806:	bd80      	pop	{r7, pc}
 800c808:	200008a0 	.word	0x200008a0

0800c80c <_ZN12SimpleString17allocStringBufferEjPKcj>:
    stringAllocator_ = allocator;
}

/* Avoid using the memory leak detector INSIDE SimpleString as its used inside the detector */
char* SimpleString::allocStringBuffer(size_t _size, const char* file, size_t line)
{
 800c80c:	b590      	push	{r4, r7, lr}
 800c80e:	b085      	sub	sp, #20
 800c810:	af00      	add	r7, sp, #0
 800c812:	60f8      	str	r0, [r7, #12]
 800c814:	60b9      	str	r1, [r7, #8]
 800c816:	607a      	str	r2, [r7, #4]
    return getStringAllocator()->alloc_memory(_size, file, line);
 800c818:	f7ff ffe8 	bl	800c7ec <_ZN12SimpleString18getStringAllocatorEv>
 800c81c:	6803      	ldr	r3, [r0, #0]
 800c81e:	3308      	adds	r3, #8
 800c820:	681c      	ldr	r4, [r3, #0]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	68ba      	ldr	r2, [r7, #8]
 800c826:	68f9      	ldr	r1, [r7, #12]
 800c828:	47a0      	blx	r4
 800c82a:	4603      	mov	r3, r0
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	3714      	adds	r7, #20
 800c830:	46bd      	mov	sp, r7
 800c832:	bd90      	pop	{r4, r7, pc}

0800c834 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>:

void SimpleString::deallocStringBuffer(char* str, size_t size, const char* file, size_t line)
{
 800c834:	b590      	push	{r4, r7, lr}
 800c836:	b087      	sub	sp, #28
 800c838:	af02      	add	r7, sp, #8
 800c83a:	60f8      	str	r0, [r7, #12]
 800c83c:	60b9      	str	r1, [r7, #8]
 800c83e:	607a      	str	r2, [r7, #4]
 800c840:	603b      	str	r3, [r7, #0]
    getStringAllocator()->free_memory(str, size, file, line);
 800c842:	f7ff ffd3 	bl	800c7ec <_ZN12SimpleString18getStringAllocatorEv>
 800c846:	6803      	ldr	r3, [r0, #0]
 800c848:	330c      	adds	r3, #12
 800c84a:	681c      	ldr	r4, [r3, #0]
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	9300      	str	r3, [sp, #0]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	68ba      	ldr	r2, [r7, #8]
 800c854:	68f9      	ldr	r1, [r7, #12]
 800c856:	47a0      	blx	r4
}
 800c858:	bf00      	nop
 800c85a:	3714      	adds	r7, #20
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd90      	pop	{r4, r7, pc}

0800c860 <_ZNK12SimpleString14getEmptyStringEv>:

char* SimpleString::getEmptyString() const
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b084      	sub	sp, #16
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
    char* empty = allocStringBuffer(1, __FILE__, __LINE__);
 800c868:	2284      	movs	r2, #132	; 0x84
 800c86a:	4906      	ldr	r1, [pc, #24]	; (800c884 <_ZNK12SimpleString14getEmptyStringEv+0x24>)
 800c86c:	2001      	movs	r0, #1
 800c86e:	f7ff ffcd 	bl	800c80c <_ZN12SimpleString17allocStringBufferEjPKcj>
 800c872:	60f8      	str	r0, [r7, #12]
    empty[0] = '\0';
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2200      	movs	r2, #0
 800c878:	701a      	strb	r2, [r3, #0]
    return empty;
 800c87a:	68fb      	ldr	r3, [r7, #12]
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3710      	adds	r7, #16
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}
 800c884:	0802446c 	.word	0x0802446c

0800c888 <_ZN12SimpleString4AtoUEPKc>:

// does not support + or - prefixes
unsigned SimpleString::AtoU(const char* str)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b084      	sub	sp, #16
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	4618      	mov	r0, r3
 800c896:	f001 f809 	bl	800d8ac <_ZN12SimpleString7isSpaceEc>
 800c89a:	4603      	mov	r3, r0
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d003      	beq.n	800c8a8 <_ZN12SimpleString4AtoUEPKc+0x20>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	3301      	adds	r3, #1
 800c8a4:	607b      	str	r3, [r7, #4]
 800c8a6:	e7f3      	b.n	800c890 <_ZN12SimpleString4AtoUEPKc+0x8>

    unsigned result = 0;
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	781b      	ldrb	r3, [r3, #0]
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f000 ffe7 	bl	800d884 <_ZN12SimpleString7isDigitEc>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d005      	beq.n	800c8c8 <_ZN12SimpleString4AtoUEPKc+0x40>
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	2b2f      	cmp	r3, #47	; 0x2f
 800c8c2:	d901      	bls.n	800c8c8 <_ZN12SimpleString4AtoUEPKc+0x40>
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	e000      	b.n	800c8ca <_ZN12SimpleString4AtoUEPKc+0x42>
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d010      	beq.n	800c8f0 <_ZN12SimpleString4AtoUEPKc+0x68>
    {
        result *= 10;
 800c8ce:	68fa      	ldr	r2, [r7, #12]
 800c8d0:	4613      	mov	r3, r2
 800c8d2:	009b      	lsls	r3, r3, #2
 800c8d4:	4413      	add	r3, r2
 800c8d6:	005b      	lsls	r3, r3, #1
 800c8d8:	60fb      	str	r3, [r7, #12]
        result += static_cast<unsigned>(*str - '0');
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	461a      	mov	r2, r3
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	4413      	add	r3, r2
 800c8e4:	3b30      	subs	r3, #48	; 0x30
 800c8e6:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	3301      	adds	r3, #1
 800c8ec:	607b      	str	r3, [r7, #4]
 800c8ee:	e7dd      	b.n	800c8ac <_ZN12SimpleString4AtoUEPKc+0x24>
    }
    return result;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3710      	adds	r7, #16
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}

0800c8fa <_ZN12SimpleString4AtoIEPKc>:

int SimpleString::AtoI(const char* str)
{
 800c8fa:	b580      	push	{r7, lr}
 800c8fc:	b084      	sub	sp, #16
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	781b      	ldrb	r3, [r3, #0]
 800c906:	4618      	mov	r0, r3
 800c908:	f000 ffd0 	bl	800d8ac <_ZN12SimpleString7isSpaceEc>
 800c90c:	4603      	mov	r3, r0
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d003      	beq.n	800c91a <_ZN12SimpleString4AtoIEPKc+0x20>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	3301      	adds	r3, #1
 800c916:	607b      	str	r3, [r7, #4]
 800c918:	e7f3      	b.n	800c902 <_ZN12SimpleString4AtoIEPKc+0x8>

    char first_char = *str;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	72fb      	strb	r3, [r7, #11]
    if (first_char == '-' || first_char == '+') str++;
 800c920:	7afb      	ldrb	r3, [r7, #11]
 800c922:	2b2d      	cmp	r3, #45	; 0x2d
 800c924:	d002      	beq.n	800c92c <_ZN12SimpleString4AtoIEPKc+0x32>
 800c926:	7afb      	ldrb	r3, [r7, #11]
 800c928:	2b2b      	cmp	r3, #43	; 0x2b
 800c92a:	d102      	bne.n	800c932 <_ZN12SimpleString4AtoIEPKc+0x38>
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	3301      	adds	r3, #1
 800c930:	607b      	str	r3, [r7, #4]

    int  result = 0;
 800c932:	2300      	movs	r3, #0
 800c934:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	4618      	mov	r0, r3
 800c93c:	f000 ffa2 	bl	800d884 <_ZN12SimpleString7isDigitEc>
 800c940:	4603      	mov	r3, r0
 800c942:	2b00      	cmp	r3, #0
 800c944:	d00f      	beq.n	800c966 <_ZN12SimpleString4AtoIEPKc+0x6c>
    {
        result *= 10;
 800c946:	68fa      	ldr	r2, [r7, #12]
 800c948:	4613      	mov	r3, r2
 800c94a:	009b      	lsls	r3, r3, #2
 800c94c:	4413      	add	r3, r2
 800c94e:	005b      	lsls	r3, r3, #1
 800c950:	60fb      	str	r3, [r7, #12]
        result += *str - '0';
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	781b      	ldrb	r3, [r3, #0]
 800c956:	3b30      	subs	r3, #48	; 0x30
 800c958:	68fa      	ldr	r2, [r7, #12]
 800c95a:	4413      	add	r3, r2
 800c95c:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	3301      	adds	r3, #1
 800c962:	607b      	str	r3, [r7, #4]
 800c964:	e7e7      	b.n	800c936 <_ZN12SimpleString4AtoIEPKc+0x3c>
    }
    return (first_char == '-') ? -result : result;
 800c966:	7afb      	ldrb	r3, [r7, #11]
 800c968:	2b2d      	cmp	r3, #45	; 0x2d
 800c96a:	d102      	bne.n	800c972 <_ZN12SimpleString4AtoIEPKc+0x78>
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	425b      	negs	r3, r3
 800c970:	e000      	b.n	800c974 <_ZN12SimpleString4AtoIEPKc+0x7a>
 800c972:	68fb      	ldr	r3, [r7, #12]
}
 800c974:	4618      	mov	r0, r3
 800c976:	3710      	adds	r7, #16
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <_ZN12SimpleString6StrCmpEPKcS1_>:

int SimpleString::StrCmp(const char* s1, const char* s2)
{
 800c97c:	b480      	push	{r7}
 800c97e:	b083      	sub	sp, #12
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	6039      	str	r1, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	781b      	ldrb	r3, [r3, #0]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d00c      	beq.n	800c9a8 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	781a      	ldrb	r2, [r3, #0]
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	781b      	ldrb	r3, [r3, #0]
 800c996:	429a      	cmp	r2, r3
 800c998:	d106      	bne.n	800c9a8 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
       ++s1;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	3301      	adds	r3, #1
 800c99e:	607b      	str	r3, [r7, #4]
       ++s2;
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	603b      	str	r3, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800c9a6:	e7ee      	b.n	800c986 <_ZN12SimpleString6StrCmpEPKcS1_+0xa>
   }
   return *(const unsigned char *) s1 - *(const unsigned char *) s2;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	781b      	ldrb	r3, [r3, #0]
 800c9ac:	461a      	mov	r2, r3
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	781b      	ldrb	r3, [r3, #0]
 800c9b2:	1ad3      	subs	r3, r2, r3
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	370c      	adds	r7, #12
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9be:	4770      	bx	lr

0800c9c0 <_ZN12SimpleString6StrLenEPKc>:

size_t SimpleString::StrLen(const char* str)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b085      	sub	sp, #20
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
    size_t n = (size_t)-1;
 800c9c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c9cc:	60fb      	str	r3, [r7, #12]
    do n++; while (*str++);
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	60fb      	str	r3, [r7, #12]
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	1c5a      	adds	r2, r3, #1
 800c9d8:	607a      	str	r2, [r7, #4]
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	bf14      	ite	ne
 800c9e0:	2301      	movne	r3, #1
 800c9e2:	2300      	moveq	r3, #0
 800c9e4:	b2db      	uxtb	r3, r3
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d000      	beq.n	800c9ec <_ZN12SimpleString6StrLenEPKc+0x2c>
 800c9ea:	e7f0      	b.n	800c9ce <_ZN12SimpleString6StrLenEPKc+0xe>
    return n;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3714      	adds	r7, #20
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f8:	4770      	bx	lr

0800c9fa <_ZN12SimpleString7StrNCmpEPKcS1_j>:

int SimpleString::StrNCmp(const char* s1, const char* s2, size_t n)
{
 800c9fa:	b480      	push	{r7}
 800c9fc:	b085      	sub	sp, #20
 800c9fe:	af00      	add	r7, sp, #0
 800ca00:	60f8      	str	r0, [r7, #12]
 800ca02:	60b9      	str	r1, [r7, #8]
 800ca04:	607a      	str	r2, [r7, #4]
    while (n && *s1 && *s1 == *s2) {
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d013      	beq.n	800ca34 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d00f      	beq.n	800ca34 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	781a      	ldrb	r2, [r3, #0]
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	781b      	ldrb	r3, [r3, #0]
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	d109      	bne.n	800ca34 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
        --n;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	3b01      	subs	r3, #1
 800ca24:	607b      	str	r3, [r7, #4]
        ++s1;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	3301      	adds	r3, #1
 800ca2a:	60fb      	str	r3, [r7, #12]
        ++s2;
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	3301      	adds	r3, #1
 800ca30:	60bb      	str	r3, [r7, #8]
    while (n && *s1 && *s1 == *s2) {
 800ca32:	e7e8      	b.n	800ca06 <_ZN12SimpleString7StrNCmpEPKcS1_j+0xc>
    }
    return n ? *(const unsigned char *) s1 - *(const unsigned char *) s2 : 0;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d006      	beq.n	800ca48 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x4e>
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	781b      	ldrb	r3, [r3, #0]
 800ca3e:	461a      	mov	r2, r3
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	781b      	ldrb	r3, [r3, #0]
 800ca44:	1ad3      	subs	r3, r2, r3
 800ca46:	e000      	b.n	800ca4a <_ZN12SimpleString7StrNCmpEPKcS1_j+0x50>
 800ca48:	2300      	movs	r3, #0
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3714      	adds	r7, #20
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca54:	4770      	bx	lr

0800ca56 <_ZN12SimpleString7StrNCpyEPcPKcj>:

char* SimpleString::StrNCpy(char* s1, const char* s2, size_t n)
{
 800ca56:	b480      	push	{r7}
 800ca58:	b087      	sub	sp, #28
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	60f8      	str	r0, [r7, #12]
 800ca5e:	60b9      	str	r1, [r7, #8]
 800ca60:	607a      	str	r2, [r7, #4]
    char* result = s1;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	617b      	str	r3, [r7, #20]

    if((NULLPTR == s1) || (0 == n)) return result;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d002      	beq.n	800ca72 <_ZN12SimpleString7StrNCpyEPcPKcj+0x1c>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d101      	bne.n	800ca76 <_ZN12SimpleString7StrNCpyEPcPKcj+0x20>
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	e01e      	b.n	800cab4 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5e>

    *s1 = *s2;
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	781a      	ldrb	r2, [r3, #0]
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	3b01      	subs	r3, #1
 800ca82:	607b      	str	r3, [r7, #4]
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d005      	beq.n	800ca96 <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	781b      	ldrb	r3, [r3, #0]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d001      	beq.n	800ca96 <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800ca92:	2301      	movs	r3, #1
 800ca94:	e000      	b.n	800ca98 <_ZN12SimpleString7StrNCpyEPcPKcj+0x42>
 800ca96:	2300      	movs	r3, #0
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d00a      	beq.n	800cab2 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5c>
        *++s1 = *++s2;
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	3301      	adds	r3, #1
 800caa0:	60bb      	str	r3, [r7, #8]
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	3301      	adds	r3, #1
 800caa6:	60fb      	str	r3, [r7, #12]
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	781a      	ldrb	r2, [r3, #0]
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800cab0:	e7e5      	b.n	800ca7e <_ZN12SimpleString7StrNCpyEPcPKcj+0x28>
    }
    return result;
 800cab2:	697b      	ldr	r3, [r7, #20]
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	371c      	adds	r7, #28
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr

0800cac0 <_ZN12SimpleString6StrStrEPKcS1_>:

const char* SimpleString::StrStr(const char* s1, const char* s2)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b082      	sub	sp, #8
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	6039      	str	r1, [r7, #0]
    if(!*s2) return s1;
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	781b      	ldrb	r3, [r3, #0]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d101      	bne.n	800cad6 <_ZN12SimpleString6StrStrEPKcS1_+0x16>
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	e01b      	b.n	800cb0e <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d016      	beq.n	800cb0c <_ZN12SimpleString6StrStrEPKcS1_+0x4c>
        if (StrNCmp(s1, s2, StrLen(s2)) == 0)
 800cade:	6838      	ldr	r0, [r7, #0]
 800cae0:	f7ff ff6e 	bl	800c9c0 <_ZN12SimpleString6StrLenEPKc>
 800cae4:	4603      	mov	r3, r0
 800cae6:	461a      	mov	r2, r3
 800cae8:	6839      	ldr	r1, [r7, #0]
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f7ff ff85 	bl	800c9fa <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800caf0:	4603      	mov	r3, r0
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	bf0c      	ite	eq
 800caf6:	2301      	moveq	r3, #1
 800caf8:	2300      	movne	r3, #0
 800cafa:	b2db      	uxtb	r3, r3
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d001      	beq.n	800cb04 <_ZN12SimpleString6StrStrEPKcS1_+0x44>
            return s1;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	e004      	b.n	800cb0e <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	3301      	adds	r3, #1
 800cb08:	607b      	str	r3, [r7, #4]
 800cb0a:	e7e4      	b.n	800cad6 <_ZN12SimpleString6StrStrEPKcS1_+0x16>
    return NULLPTR;
 800cb0c:	2300      	movs	r3, #0
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3708      	adds	r7, #8
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}

0800cb16 <_ZN12SimpleString7ToLowerEc>:

char SimpleString::ToLower(char ch)
{
 800cb16:	b580      	push	{r7, lr}
 800cb18:	b082      	sub	sp, #8
 800cb1a:	af00      	add	r7, sp, #0
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	71fb      	strb	r3, [r7, #7]
    return isUpper(ch) ? (char)((int)ch + ('a' - 'A')) : ch;
 800cb20:	79fb      	ldrb	r3, [r7, #7]
 800cb22:	4618      	mov	r0, r3
 800cb24:	f000 fed9 	bl	800d8da <_ZN12SimpleString7isUpperEc>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d003      	beq.n	800cb36 <_ZN12SimpleString7ToLowerEc+0x20>
 800cb2e:	79fb      	ldrb	r3, [r7, #7]
 800cb30:	3320      	adds	r3, #32
 800cb32:	b2db      	uxtb	r3, r3
 800cb34:	e000      	b.n	800cb38 <_ZN12SimpleString7ToLowerEc+0x22>
 800cb36:	79fb      	ldrb	r3, [r7, #7]
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	3708      	adds	r7, #8
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}

0800cb40 <_ZN12SimpleString6MemCmpEPKvS1_j>:

int SimpleString::MemCmp(const void* s1, const void *s2, size_t n)
{
 800cb40:	b480      	push	{r7}
 800cb42:	b087      	sub	sp, #28
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	60f8      	str	r0, [r7, #12]
 800cb48:	60b9      	str	r1, [r7, #8]
 800cb4a:	607a      	str	r2, [r7, #4]
    const unsigned char* p1 = (const unsigned char*) s1;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	617b      	str	r3, [r7, #20]
    const unsigned char* p2 = (const unsigned char*) s2;
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	613b      	str	r3, [r7, #16]

    while (n--)
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	1e5a      	subs	r2, r3, #1
 800cb58:	607a      	str	r2, [r7, #4]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	bf14      	ite	ne
 800cb5e:	2301      	movne	r3, #1
 800cb60:	2300      	moveq	r3, #0
 800cb62:	b2db      	uxtb	r3, r3
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d013      	beq.n	800cb90 <_ZN12SimpleString6MemCmpEPKvS1_j+0x50>
        if (*p1 != *p2) {
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	781a      	ldrb	r2, [r3, #0]
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	781b      	ldrb	r3, [r3, #0]
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d006      	beq.n	800cb82 <_ZN12SimpleString6MemCmpEPKvS1_j+0x42>
            return *p1 - *p2;
 800cb74:	697b      	ldr	r3, [r7, #20]
 800cb76:	781b      	ldrb	r3, [r3, #0]
 800cb78:	461a      	mov	r2, r3
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	781b      	ldrb	r3, [r3, #0]
 800cb7e:	1ad3      	subs	r3, r2, r3
 800cb80:	e007      	b.n	800cb92 <_ZN12SimpleString6MemCmpEPKvS1_j+0x52>
        } else {
            ++p1;
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	3301      	adds	r3, #1
 800cb86:	617b      	str	r3, [r7, #20]
            ++p2;
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	613b      	str	r3, [r7, #16]
    while (n--)
 800cb8e:	e7e1      	b.n	800cb54 <_ZN12SimpleString6MemCmpEPKvS1_j+0x14>
        }
    return 0;
 800cb90:	2300      	movs	r3, #0
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	371c      	adds	r7, #28
 800cb96:	46bd      	mov	sp, r7
 800cb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9c:	4770      	bx	lr
	...

0800cba0 <_ZN12SimpleString24deallocateInternalBufferEv>:

void SimpleString::deallocateInternalBuffer()
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b082      	sub	sp, #8
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
    if (buffer_) {
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d00d      	beq.n	800cbcc <_ZN12SimpleString24deallocateInternalBufferEv+0x2c>
        deallocStringBuffer(buffer_, bufferSize_, __FILE__, __LINE__);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6818      	ldr	r0, [r3, #0]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6859      	ldr	r1, [r3, #4]
 800cbb8:	23ee      	movs	r3, #238	; 0xee
 800cbba:	4a06      	ldr	r2, [pc, #24]	; (800cbd4 <_ZN12SimpleString24deallocateInternalBufferEv+0x34>)
 800cbbc:	f7ff fe3a 	bl	800c834 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
        buffer_ = NULLPTR;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	601a      	str	r2, [r3, #0]
        bufferSize_ = 0;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2200      	movs	r2, #0
 800cbca:	605a      	str	r2, [r3, #4]
    }
}
 800cbcc:	bf00      	nop
 800cbce:	3708      	adds	r7, #8
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}
 800cbd4:	0802446c 	.word	0x0802446c

0800cbd8 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>:

void SimpleString::setInternalBufferAsEmptyString()
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b082      	sub	sp, #8
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
    deallocateInternalBuffer();
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f7ff ffdd 	bl	800cba0 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = 1;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2201      	movs	r2, #1
 800cbea:	605a      	str	r2, [r3, #4]
    buffer_ = getEmptyString();
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f7ff fe37 	bl	800c860 <_ZNK12SimpleString14getEmptyStringEv>
 800cbf2:	4602      	mov	r2, r0
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	601a      	str	r2, [r3, #0]
}
 800cbf8:	bf00      	nop
 800cbfa:	3708      	adds	r7, #8
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}

0800cc00 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer, size_t bufferSize)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b084      	sub	sp, #16
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	60f8      	str	r0, [r7, #12]
 800cc08:	60b9      	str	r1, [r7, #8]
 800cc0a:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800cc0c:	68f8      	ldr	r0, [r7, #12]
 800cc0e:	f7ff ffc7 	bl	800cba0 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	687a      	ldr	r2, [r7, #4]
 800cc16:	605a      	str	r2, [r3, #4]
    buffer_ = copyToNewBuffer(otherBuffer, bufferSize_);
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	685b      	ldr	r3, [r3, #4]
 800cc1c:	4619      	mov	r1, r3
 800cc1e:	68b8      	ldr	r0, [r7, #8]
 800cc20:	f000 fe12 	bl	800d848 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800cc24:	4602      	mov	r2, r0
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	601a      	str	r2, [r3, #0]
}
 800cc2a:	bf00      	nop
 800cc2c:	3710      	adds	r7, #16
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
	...

0800cc34 <_ZN12SimpleString28setInternalBufferToNewBufferEj>:

void SimpleString::setInternalBufferToNewBuffer(size_t bufferSize)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b082      	sub	sp, #8
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
 800cc3c:	6039      	str	r1, [r7, #0]
    deallocateInternalBuffer();
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f7ff ffae 	bl	800cba0 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	683a      	ldr	r2, [r7, #0]
 800cc48:	605a      	str	r2, [r3, #4]
    buffer_ = allocStringBuffer(bufferSize_, __FILE__, __LINE__);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	f240 1209 	movw	r2, #265	; 0x109
 800cc52:	4907      	ldr	r1, [pc, #28]	; (800cc70 <_ZN12SimpleString28setInternalBufferToNewBufferEj+0x3c>)
 800cc54:	4618      	mov	r0, r3
 800cc56:	f7ff fdd9 	bl	800c80c <_ZN12SimpleString17allocStringBufferEjPKcj>
 800cc5a:	4602      	mov	r2, r0
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	2200      	movs	r2, #0
 800cc66:	701a      	strb	r2, [r3, #0]
}
 800cc68:	bf00      	nop
 800cc6a:	3708      	adds	r7, #8
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}
 800cc70:	0802446c 	.word	0x0802446c

0800cc74 <_ZN12SimpleString19setInternalBufferToEPcj>:

void SimpleString::setInternalBufferTo(char* buffer, size_t bufferSize)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b084      	sub	sp, #16
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	60f8      	str	r0, [r7, #12]
 800cc7c:	60b9      	str	r1, [r7, #8]
 800cc7e:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800cc80:	68f8      	ldr	r0, [r7, #12]
 800cc82:	f7ff ff8d 	bl	800cba0 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	687a      	ldr	r2, [r7, #4]
 800cc8a:	605a      	str	r2, [r3, #4]
    buffer_ = buffer;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	68ba      	ldr	r2, [r7, #8]
 800cc90:	601a      	str	r2, [r3, #0]
}
 800cc92:	bf00      	nop
 800cc94:	3710      	adds	r7, #16
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}

0800cc9a <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>:

void SimpleString::copyBufferToNewInternalBuffer(const SimpleString& otherBuffer)
{
 800cc9a:	b590      	push	{r4, r7, lr}
 800cc9c:	b083      	sub	sp, #12
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	6078      	str	r0, [r7, #4]
 800cca2:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer.buffer_, otherBuffer.size() + 1);
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	681c      	ldr	r4, [r3, #0]
 800cca8:	6838      	ldr	r0, [r7, #0]
 800ccaa:	f000 fbc1 	bl	800d430 <_ZNK12SimpleString4sizeEv>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	3301      	adds	r3, #1
 800ccb2:	461a      	mov	r2, r3
 800ccb4:	4621      	mov	r1, r4
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f7ff ffa2 	bl	800cc00 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800ccbc:	bf00      	nop
 800ccbe:	370c      	adds	r7, #12
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd90      	pop	{r4, r7, pc}

0800ccc4 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b082      	sub	sp, #8
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer, StrLen(otherBuffer) + 1);
 800ccce:	6838      	ldr	r0, [r7, #0]
 800ccd0:	f7ff fe76 	bl	800c9c0 <_ZN12SimpleString6StrLenEPKc>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	3301      	adds	r3, #1
 800ccd8:	461a      	mov	r2, r3
 800ccda:	6839      	ldr	r1, [r7, #0]
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f7ff ff8f 	bl	800cc00 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800cce2:	bf00      	nop
 800cce4:	3708      	adds	r7, #8
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}

0800ccea <_ZNK12SimpleString9getBufferEv>:

const char* SimpleString::getBuffer() const
{
 800ccea:	b480      	push	{r7}
 800ccec:	b083      	sub	sp, #12
 800ccee:	af00      	add	r7, sp, #0
 800ccf0:	6078      	str	r0, [r7, #4]
    return buffer_;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	370c      	adds	r7, #12
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd00:	4770      	bx	lr

0800cd02 <_ZN12SimpleStringC1EPKc>:

SimpleString::SimpleString(const char *otherBuffer)
 800cd02:	b580      	push	{r7, lr}
 800cd04:	b082      	sub	sp, #8
 800cd06:	af00      	add	r7, sp, #0
 800cd08:	6078      	str	r0, [r7, #4]
 800cd0a:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	601a      	str	r2, [r3, #0]
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2200      	movs	r2, #0
 800cd16:	605a      	str	r2, [r3, #4]
{
    if (otherBuffer == NULLPTR)
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d103      	bne.n	800cd26 <_ZN12SimpleStringC1EPKc+0x24>
        setInternalBufferAsEmptyString();
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f7ff ff5a 	bl	800cbd8 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800cd24:	e003      	b.n	800cd2e <_ZN12SimpleStringC1EPKc+0x2c>
    else
        copyBufferToNewInternalBuffer(otherBuffer);
 800cd26:	6839      	ldr	r1, [r7, #0]
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f7ff ffcb 	bl	800ccc4 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	4618      	mov	r0, r3
 800cd32:	3708      	adds	r7, #8
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}

0800cd38 <_ZN12SimpleStringC1EPKcj>:

SimpleString::SimpleString(const char *other, size_t repeatCount)
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b088      	sub	sp, #32
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	60f8      	str	r0, [r7, #12]
 800cd40:	60b9      	str	r1, [r7, #8]
 800cd42:	607a      	str	r2, [r7, #4]
    : buffer_(NULLPTR), bufferSize_(0)
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	2200      	movs	r2, #0
 800cd48:	601a      	str	r2, [r3, #0]
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	605a      	str	r2, [r3, #4]
{
    size_t otherStringLength = StrLen(other);
 800cd50:	68b8      	ldr	r0, [r7, #8]
 800cd52:	f7ff fe35 	bl	800c9c0 <_ZN12SimpleString6StrLenEPKc>
 800cd56:	6178      	str	r0, [r7, #20]
    setInternalBufferToNewBuffer(otherStringLength * repeatCount + 1);
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	687a      	ldr	r2, [r7, #4]
 800cd5c:	fb02 f303 	mul.w	r3, r2, r3
 800cd60:	3301      	adds	r3, #1
 800cd62:	4619      	mov	r1, r3
 800cd64:	68f8      	ldr	r0, [r7, #12]
 800cd66:	f7ff ff65 	bl	800cc34 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    char* next = buffer_;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800cd70:	2300      	movs	r3, #0
 800cd72:	61bb      	str	r3, [r7, #24]
 800cd74:	69ba      	ldr	r2, [r7, #24]
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	d20e      	bcs.n	800cd9a <_ZN12SimpleStringC1EPKcj+0x62>
        StrNCpy(next, other, otherStringLength + 1);
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	3301      	adds	r3, #1
 800cd80:	461a      	mov	r2, r3
 800cd82:	68b9      	ldr	r1, [r7, #8]
 800cd84:	69f8      	ldr	r0, [r7, #28]
 800cd86:	f7ff fe66 	bl	800ca56 <_ZN12SimpleString7StrNCpyEPcPKcj>
        next += otherStringLength;
 800cd8a:	69fa      	ldr	r2, [r7, #28]
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	4413      	add	r3, r2
 800cd90:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800cd92:	69bb      	ldr	r3, [r7, #24]
 800cd94:	3301      	adds	r3, #1
 800cd96:	61bb      	str	r3, [r7, #24]
 800cd98:	e7ec      	b.n	800cd74 <_ZN12SimpleStringC1EPKcj+0x3c>
    }
    *next = 0;
 800cd9a:	69fb      	ldr	r3, [r7, #28]
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	701a      	strb	r2, [r3, #0]
}
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	4618      	mov	r0, r3
 800cda4:	3720      	adds	r7, #32
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}

0800cdaa <_ZN12SimpleStringC1ERKS_>:

SimpleString::SimpleString(const SimpleString& other)
 800cdaa:	b580      	push	{r7, lr}
 800cdac:	b082      	sub	sp, #8
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	6078      	str	r0, [r7, #4]
 800cdb2:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	601a      	str	r2, [r3, #0]
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	605a      	str	r2, [r3, #4]
{
    copyBufferToNewInternalBuffer(other.getBuffer());
 800cdc0:	6838      	ldr	r0, [r7, #0]
 800cdc2:	f7ff ff92 	bl	800ccea <_ZNK12SimpleString9getBufferEv>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	4619      	mov	r1, r3
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f7ff ff7a 	bl	800ccc4 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3708      	adds	r7, #8
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}

0800cdda <_ZN12SimpleStringaSERKS_>:

SimpleString& SimpleString::operator=(const SimpleString& other)
{
 800cdda:	b580      	push	{r7, lr}
 800cddc:	b082      	sub	sp, #8
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	6078      	str	r0, [r7, #4]
 800cde2:	6039      	str	r1, [r7, #0]
    if (this != &other)
 800cde4:	687a      	ldr	r2, [r7, #4]
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	429a      	cmp	r2, r3
 800cdea:	d003      	beq.n	800cdf4 <_ZN12SimpleStringaSERKS_+0x1a>
        copyBufferToNewInternalBuffer(other);
 800cdec:	6839      	ldr	r1, [r7, #0]
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f7ff ff53 	bl	800cc9a <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>
    return *this;
 800cdf4:	687b      	ldr	r3, [r7, #4]
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3708      	adds	r7, #8
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}

0800cdfe <_ZNK12SimpleString8containsERKS_>:

bool SimpleString::contains(const SimpleString& other) const
{
 800cdfe:	b590      	push	{r4, r7, lr}
 800ce00:	b083      	sub	sp, #12
 800ce02:	af00      	add	r7, sp, #0
 800ce04:	6078      	str	r0, [r7, #4]
 800ce06:	6039      	str	r1, [r7, #0]
    return StrStr(getBuffer(), other.getBuffer()) != NULLPTR;
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f7ff ff6e 	bl	800ccea <_ZNK12SimpleString9getBufferEv>
 800ce0e:	4604      	mov	r4, r0
 800ce10:	6838      	ldr	r0, [r7, #0]
 800ce12:	f7ff ff6a 	bl	800ccea <_ZNK12SimpleString9getBufferEv>
 800ce16:	4603      	mov	r3, r0
 800ce18:	4619      	mov	r1, r3
 800ce1a:	4620      	mov	r0, r4
 800ce1c:	f7ff fe50 	bl	800cac0 <_ZN12SimpleString6StrStrEPKcS1_>
 800ce20:	4603      	mov	r3, r0
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	bf14      	ite	ne
 800ce26:	2301      	movne	r3, #1
 800ce28:	2300      	moveq	r3, #0
 800ce2a:	b2db      	uxtb	r3, r3
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	370c      	adds	r7, #12
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd90      	pop	{r4, r7, pc}

0800ce34 <_ZNK12SimpleString14containsNoCaseERKS_>:

bool SimpleString::containsNoCase(const SimpleString& other) const
{
 800ce34:	b590      	push	{r4, r7, lr}
 800ce36:	b087      	sub	sp, #28
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	6039      	str	r1, [r7, #0]
    return lowerCase().contains(other.lowerCase());
 800ce3e:	f107 0308 	add.w	r3, r7, #8
 800ce42:	6879      	ldr	r1, [r7, #4]
 800ce44:	4618      	mov	r0, r3
 800ce46:	f000 fabb 	bl	800d3c0 <_ZNK12SimpleString9lowerCaseEv>
 800ce4a:	f107 0310 	add.w	r3, r7, #16
 800ce4e:	6839      	ldr	r1, [r7, #0]
 800ce50:	4618      	mov	r0, r3
 800ce52:	f000 fab5 	bl	800d3c0 <_ZNK12SimpleString9lowerCaseEv>
 800ce56:	f107 0210 	add.w	r2, r7, #16
 800ce5a:	f107 0308 	add.w	r3, r7, #8
 800ce5e:	4611      	mov	r1, r2
 800ce60:	4618      	mov	r0, r3
 800ce62:	f7ff ffcc 	bl	800cdfe <_ZNK12SimpleString8containsERKS_>
 800ce66:	4603      	mov	r3, r0
 800ce68:	461c      	mov	r4, r3
 800ce6a:	bf00      	nop
 800ce6c:	f107 0310 	add.w	r3, r7, #16
 800ce70:	4618      	mov	r0, r3
 800ce72:	f000 fafe 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800ce76:	f107 0308 	add.w	r3, r7, #8
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f000 faf9 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800ce80:	4623      	mov	r3, r4
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	371c      	adds	r7, #28
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd90      	pop	{r4, r7, pc}

0800ce8a <_ZNK12SimpleString10startsWithERKS_>:

bool SimpleString::startsWith(const SimpleString& other) const
{
 800ce8a:	b590      	push	{r4, r7, lr}
 800ce8c:	b083      	sub	sp, #12
 800ce8e:	af00      	add	r7, sp, #0
 800ce90:	6078      	str	r0, [r7, #4]
 800ce92:	6039      	str	r1, [r7, #0]
    if (other.size() == 0) return true;
 800ce94:	6838      	ldr	r0, [r7, #0]
 800ce96:	f000 facb 	bl	800d430 <_ZNK12SimpleString4sizeEv>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	bf0c      	ite	eq
 800cea0:	2301      	moveq	r3, #1
 800cea2:	2300      	movne	r3, #0
 800cea4:	b2db      	uxtb	r3, r3
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d001      	beq.n	800ceae <_ZNK12SimpleString10startsWithERKS_+0x24>
 800ceaa:	2301      	movs	r3, #1
 800ceac:	e022      	b.n	800cef4 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else if (size() == 0) return false;
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f000 fabe 	bl	800d430 <_ZNK12SimpleString4sizeEv>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	bf0c      	ite	eq
 800ceba:	2301      	moveq	r3, #1
 800cebc:	2300      	movne	r3, #0
 800cebe:	b2db      	uxtb	r3, r3
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d001      	beq.n	800cec8 <_ZNK12SimpleString10startsWithERKS_+0x3e>
 800cec4:	2300      	movs	r3, #0
 800cec6:	e015      	b.n	800cef4 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else return StrStr(getBuffer(), other.getBuffer()) == getBuffer();
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f7ff ff0e 	bl	800ccea <_ZNK12SimpleString9getBufferEv>
 800cece:	4604      	mov	r4, r0
 800ced0:	6838      	ldr	r0, [r7, #0]
 800ced2:	f7ff ff0a 	bl	800ccea <_ZNK12SimpleString9getBufferEv>
 800ced6:	4603      	mov	r3, r0
 800ced8:	4619      	mov	r1, r3
 800ceda:	4620      	mov	r0, r4
 800cedc:	f7ff fdf0 	bl	800cac0 <_ZN12SimpleString6StrStrEPKcS1_>
 800cee0:	4604      	mov	r4, r0
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f7ff ff01 	bl	800ccea <_ZNK12SimpleString9getBufferEv>
 800cee8:	4603      	mov	r3, r0
 800ceea:	429c      	cmp	r4, r3
 800ceec:	bf0c      	ite	eq
 800ceee:	2301      	moveq	r3, #1
 800cef0:	2300      	movne	r3, #0
 800cef2:	b2db      	uxtb	r3, r3
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	370c      	adds	r7, #12
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd90      	pop	{r4, r7, pc}

0800cefc <_ZNK12SimpleString8endsWithERKS_>:

bool SimpleString::endsWith(const SimpleString& other) const
{
 800cefc:	b590      	push	{r4, r7, lr}
 800cefe:	b085      	sub	sp, #20
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
 800cf04:	6039      	str	r1, [r7, #0]
    size_t length = size();
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f000 fa92 	bl	800d430 <_ZNK12SimpleString4sizeEv>
 800cf0c:	60f8      	str	r0, [r7, #12]
    size_t other_length = other.size();
 800cf0e:	6838      	ldr	r0, [r7, #0]
 800cf10:	f000 fa8e 	bl	800d430 <_ZNK12SimpleString4sizeEv>
 800cf14:	60b8      	str	r0, [r7, #8]

    if (other_length == 0) return true;
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d101      	bne.n	800cf20 <_ZNK12SimpleString8endsWithERKS_+0x24>
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	e020      	b.n	800cf62 <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length == 0) return false;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d101      	bne.n	800cf2a <_ZNK12SimpleString8endsWithERKS_+0x2e>
 800cf26:	2300      	movs	r3, #0
 800cf28:	e01b      	b.n	800cf62 <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length < other_length) return false;
 800cf2a:	68fa      	ldr	r2, [r7, #12]
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	d201      	bcs.n	800cf36 <_ZNK12SimpleString8endsWithERKS_+0x3a>
 800cf32:	2300      	movs	r3, #0
 800cf34:	e015      	b.n	800cf62 <_ZNK12SimpleString8endsWithERKS_+0x66>

    return StrCmp(getBuffer() + length - other_length, other.getBuffer()) == 0;
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f7ff fed7 	bl	800ccea <_ZNK12SimpleString9getBufferEv>
 800cf3c:	4601      	mov	r1, r0
 800cf3e:	68fa      	ldr	r2, [r7, #12]
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	1ad3      	subs	r3, r2, r3
 800cf44:	18cc      	adds	r4, r1, r3
 800cf46:	6838      	ldr	r0, [r7, #0]
 800cf48:	f7ff fecf 	bl	800ccea <_ZNK12SimpleString9getBufferEv>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	4619      	mov	r1, r3
 800cf50:	4620      	mov	r0, r4
 800cf52:	f7ff fd13 	bl	800c97c <_ZN12SimpleString6StrCmpEPKcS1_>
 800cf56:	4603      	mov	r3, r0
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	bf0c      	ite	eq
 800cf5c:	2301      	moveq	r3, #1
 800cf5e:	2300      	movne	r3, #0
 800cf60:	b2db      	uxtb	r3, r3
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3714      	adds	r7, #20
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd90      	pop	{r4, r7, pc}

0800cf6a <_ZNK12SimpleString5countERKS_>:

size_t SimpleString::count(const SimpleString& substr) const
{
 800cf6a:	b580      	push	{r7, lr}
 800cf6c:	b086      	sub	sp, #24
 800cf6e:	af00      	add	r7, sp, #0
 800cf70:	6078      	str	r0, [r7, #4]
 800cf72:	6039      	str	r1, [r7, #0]
    size_t num = 0;
 800cf74:	2300      	movs	r3, #0
 800cf76:	617b      	str	r3, [r7, #20]
    const char* str = getBuffer();
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f7ff feb6 	bl	800ccea <_ZNK12SimpleString9getBufferEv>
 800cf7e:	6138      	str	r0, [r7, #16]
    const char* strpart = NULL;
 800cf80:	2300      	movs	r3, #0
 800cf82:	60fb      	str	r3, [r7, #12]
    if (*str){
 800cf84:	693b      	ldr	r3, [r7, #16]
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d008      	beq.n	800cf9e <_ZNK12SimpleString5countERKS_+0x34>
        strpart = StrStr(str, substr.getBuffer());
 800cf8c:	6838      	ldr	r0, [r7, #0]
 800cf8e:	f7ff feac 	bl	800ccea <_ZNK12SimpleString9getBufferEv>
 800cf92:	4603      	mov	r3, r0
 800cf94:	4619      	mov	r1, r3
 800cf96:	6938      	ldr	r0, [r7, #16]
 800cf98:	f7ff fd92 	bl	800cac0 <_ZN12SimpleString6StrStrEPKcS1_>
 800cf9c:	60f8      	str	r0, [r7, #12]
    }
    while (*str && strpart) {
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d014      	beq.n	800cfd0 <_ZNK12SimpleString5countERKS_+0x66>
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d011      	beq.n	800cfd0 <_ZNK12SimpleString5countERKS_+0x66>
        str = strpart;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	613b      	str	r3, [r7, #16]
        str++;
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	3301      	adds	r3, #1
 800cfb4:	613b      	str	r3, [r7, #16]
        num++;
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	3301      	adds	r3, #1
 800cfba:	617b      	str	r3, [r7, #20]
        strpart = StrStr(str, substr.getBuffer());
 800cfbc:	6838      	ldr	r0, [r7, #0]
 800cfbe:	f7ff fe94 	bl	800ccea <_ZNK12SimpleString9getBufferEv>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	4619      	mov	r1, r3
 800cfc6:	6938      	ldr	r0, [r7, #16]
 800cfc8:	f7ff fd7a 	bl	800cac0 <_ZN12SimpleString6StrStrEPKcS1_>
 800cfcc:	60f8      	str	r0, [r7, #12]
    while (*str && strpart) {
 800cfce:	e7e6      	b.n	800cf9e <_ZNK12SimpleString5countERKS_+0x34>
    }
    return num;
 800cfd0:	697b      	ldr	r3, [r7, #20]
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3718      	adds	r7, #24
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}

0800cfda <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>:

void SimpleString::split(const SimpleString& delimiter, SimpleStringCollection& col) const
{
 800cfda:	b590      	push	{r4, r7, lr}
 800cfdc:	b091      	sub	sp, #68	; 0x44
 800cfde:	af00      	add	r7, sp, #0
 800cfe0:	60f8      	str	r0, [r7, #12]
 800cfe2:	60b9      	str	r1, [r7, #8]
 800cfe4:	607a      	str	r2, [r7, #4]
    size_t num = count(delimiter);
 800cfe6:	68b9      	ldr	r1, [r7, #8]
 800cfe8:	68f8      	ldr	r0, [r7, #12]
 800cfea:	f7ff ffbe 	bl	800cf6a <_ZNK12SimpleString5countERKS_>
 800cfee:	6378      	str	r0, [r7, #52]	; 0x34
    size_t extraEndToken = (endsWith(delimiter)) ? 0 : 1U;
 800cff0:	68b9      	ldr	r1, [r7, #8]
 800cff2:	68f8      	ldr	r0, [r7, #12]
 800cff4:	f7ff ff82 	bl	800cefc <_ZNK12SimpleString8endsWithERKS_>
 800cff8:	4603      	mov	r3, r0
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d001      	beq.n	800d002 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x28>
 800cffe:	2300      	movs	r3, #0
 800d000:	e000      	b.n	800d004 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x2a>
 800d002:	2301      	movs	r3, #1
 800d004:	633b      	str	r3, [r7, #48]	; 0x30
    col.allocate(num + extraEndToken);
 800d006:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d00a:	4413      	add	r3, r2
 800d00c:	4619      	mov	r1, r3
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f001 f95c 	bl	800e2cc <_ZN22SimpleStringCollection8allocateEj>

    const char* str = getBuffer();
 800d014:	68f8      	ldr	r0, [r7, #12]
 800d016:	f7ff fe68 	bl	800ccea <_ZNK12SimpleString9getBufferEv>
 800d01a:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char* prev;
    for (size_t i = 0; i < num; ++i) {
 800d01c:	2300      	movs	r3, #0
 800d01e:	63bb      	str	r3, [r7, #56]	; 0x38
 800d020:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d024:	429a      	cmp	r2, r3
 800d026:	d235      	bcs.n	800d094 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xba>
        prev = str;
 800d028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d02a:	62fb      	str	r3, [r7, #44]	; 0x2c
        str = StrStr(str, delimiter.getBuffer()) + 1;
 800d02c:	68b8      	ldr	r0, [r7, #8]
 800d02e:	f7ff fe5c 	bl	800ccea <_ZNK12SimpleString9getBufferEv>
 800d032:	4603      	mov	r3, r0
 800d034:	4619      	mov	r1, r3
 800d036:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d038:	f7ff fd42 	bl	800cac0 <_ZN12SimpleString6StrStrEPKcS1_>
 800d03c:	4603      	mov	r3, r0
 800d03e:	3301      	adds	r3, #1
 800d040:	63fb      	str	r3, [r7, #60]	; 0x3c
        col[i] = SimpleString(prev).subString(0, size_t (str - prev));
 800d042:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f001 f9db 	bl	800e400 <_ZN22SimpleStringCollectionixEj>
 800d04a:	4604      	mov	r4, r0
 800d04c:	f107 031c 	add.w	r3, r7, #28
 800d050:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d052:	4618      	mov	r0, r3
 800d054:	f7ff fe55 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800d058:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d05c:	1ad3      	subs	r3, r2, r3
 800d05e:	f107 0014 	add.w	r0, r7, #20
 800d062:	f107 011c 	add.w	r1, r7, #28
 800d066:	2200      	movs	r2, #0
 800d068:	f000 fb0c 	bl	800d684 <_ZNK12SimpleString9subStringEjj>
 800d06c:	f107 0314 	add.w	r3, r7, #20
 800d070:	4619      	mov	r1, r3
 800d072:	4620      	mov	r0, r4
 800d074:	f7ff feb1 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 800d078:	f107 0314 	add.w	r3, r7, #20
 800d07c:	4618      	mov	r0, r3
 800d07e:	f000 f9f8 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800d082:	f107 031c 	add.w	r3, r7, #28
 800d086:	4618      	mov	r0, r3
 800d088:	f000 f9f3 	bl	800d472 <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < num; ++i) {
 800d08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d08e:	3301      	adds	r3, #1
 800d090:	63bb      	str	r3, [r7, #56]	; 0x38
 800d092:	e7c5      	b.n	800d020 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x46>
    }
    if (extraEndToken) {
 800d094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d096:	2b00      	cmp	r3, #0
 800d098:	d015      	beq.n	800d0c6 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xec>
        col[num] = str;
 800d09a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f001 f9af 	bl	800e400 <_ZN22SimpleStringCollectionixEj>
 800d0a2:	4604      	mov	r4, r0
 800d0a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f7ff fe29 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800d0b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0b4:	4619      	mov	r1, r3
 800d0b6:	4620      	mov	r0, r4
 800d0b8:	f7ff fe8f 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 800d0bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f000 f9d6 	bl	800d472 <_ZN12SimpleStringD1Ev>
    }
}
 800d0c6:	bf00      	nop
 800d0c8:	3744      	adds	r7, #68	; 0x44
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd90      	pop	{r4, r7, pc}

0800d0ce <_ZN12SimpleString7replaceEcc>:

void SimpleString::replace(char to, char with)
{
 800d0ce:	b580      	push	{r7, lr}
 800d0d0:	b084      	sub	sp, #16
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	6078      	str	r0, [r7, #4]
 800d0d6:	460b      	mov	r3, r1
 800d0d8:	70fb      	strb	r3, [r7, #3]
 800d0da:	4613      	mov	r3, r2
 800d0dc:	70bb      	strb	r3, [r7, #2]
    size_t s = size();
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f000 f9a6 	bl	800d430 <_ZNK12SimpleString4sizeEv>
 800d0e4:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < s; i++) {
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	60fb      	str	r3, [r7, #12]
 800d0ea:	68fa      	ldr	r2, [r7, #12]
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d218      	bcs.n	800d124 <_ZN12SimpleString7replaceEcc+0x56>
        if (getBuffer()[i] == to) buffer_[i] = with;
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f7ff fdf9 	bl	800ccea <_ZNK12SimpleString9getBufferEv>
 800d0f8:	4602      	mov	r2, r0
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	4413      	add	r3, r2
 800d0fe:	781b      	ldrb	r3, [r3, #0]
 800d100:	78fa      	ldrb	r2, [r7, #3]
 800d102:	429a      	cmp	r2, r3
 800d104:	bf0c      	ite	eq
 800d106:	2301      	moveq	r3, #1
 800d108:	2300      	movne	r3, #0
 800d10a:	b2db      	uxtb	r3, r3
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d005      	beq.n	800d11c <_ZN12SimpleString7replaceEcc+0x4e>
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681a      	ldr	r2, [r3, #0]
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	4413      	add	r3, r2
 800d118:	78ba      	ldrb	r2, [r7, #2]
 800d11a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < s; i++) {
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	3301      	adds	r3, #1
 800d120:	60fb      	str	r3, [r7, #12]
 800d122:	e7e2      	b.n	800d0ea <_ZN12SimpleString7replaceEcc+0x1c>
    }
}
 800d124:	bf00      	nop
 800d126:	3710      	adds	r7, #16
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}

0800d12c <_ZN12SimpleString7replaceEPKcS1_>:

void SimpleString::replace(const char* to, const char* with)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b08e      	sub	sp, #56	; 0x38
 800d130:	af00      	add	r7, sp, #0
 800d132:	60f8      	str	r0, [r7, #12]
 800d134:	60b9      	str	r1, [r7, #8]
 800d136:	607a      	str	r2, [r7, #4]
    size_t c = count(to);
 800d138:	f107 0310 	add.w	r3, r7, #16
 800d13c:	68b9      	ldr	r1, [r7, #8]
 800d13e:	4618      	mov	r0, r3
 800d140:	f7ff fddf 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800d144:	f107 0310 	add.w	r3, r7, #16
 800d148:	4619      	mov	r1, r3
 800d14a:	68f8      	ldr	r0, [r7, #12]
 800d14c:	f7ff ff0d 	bl	800cf6a <_ZNK12SimpleString5countERKS_>
 800d150:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d152:	f107 0310 	add.w	r3, r7, #16
 800d156:	4618      	mov	r0, r3
 800d158:	f000 f98b 	bl	800d472 <_ZN12SimpleStringD1Ev>
    if (c == 0) {
 800d15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d071      	beq.n	800d246 <_ZN12SimpleString7replaceEPKcS1_+0x11a>
        return;
    }
    size_t len = size();
 800d162:	68f8      	ldr	r0, [r7, #12]
 800d164:	f000 f964 	bl	800d430 <_ZNK12SimpleString4sizeEv>
 800d168:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t tolen = StrLen(to);
 800d16a:	68b8      	ldr	r0, [r7, #8]
 800d16c:	f7ff fc28 	bl	800c9c0 <_ZN12SimpleString6StrLenEPKc>
 800d170:	6278      	str	r0, [r7, #36]	; 0x24
    size_t withlen = StrLen(with);
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f7ff fc24 	bl	800c9c0 <_ZN12SimpleString6StrLenEPKc>
 800d178:	6238      	str	r0, [r7, #32]

    size_t newsize = len + (withlen * c) - (tolen * c) + 1;
 800d17a:	6a3b      	ldr	r3, [r7, #32]
 800d17c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d17e:	fb02 f203 	mul.w	r2, r2, r3
 800d182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d184:	441a      	add	r2, r3
 800d186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d188:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d18a:	fb01 f303 	mul.w	r3, r1, r3
 800d18e:	1ad3      	subs	r3, r2, r3
 800d190:	3301      	adds	r3, #1
 800d192:	61fb      	str	r3, [r7, #28]

    if (newsize > 1) {
 800d194:	69fb      	ldr	r3, [r7, #28]
 800d196:	2b01      	cmp	r3, #1
 800d198:	d951      	bls.n	800d23e <_ZN12SimpleString7replaceEPKcS1_+0x112>
        char* newbuf = allocStringBuffer(newsize, __FILE__, __LINE__);
 800d19a:	f240 129d 	movw	r2, #413	; 0x19d
 800d19e:	492c      	ldr	r1, [pc, #176]	; (800d250 <_ZN12SimpleString7replaceEPKcS1_+0x124>)
 800d1a0:	69f8      	ldr	r0, [r7, #28]
 800d1a2:	f7ff fb33 	bl	800c80c <_ZN12SimpleString17allocStringBufferEjPKcj>
 800d1a6:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0, j = 0; i < len;) {
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	637b      	str	r3, [r7, #52]	; 0x34
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	633b      	str	r3, [r7, #48]	; 0x30
 800d1b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b4:	429a      	cmp	r2, r3
 800d1b6:	d236      	bcs.n	800d226 <_ZN12SimpleString7replaceEPKcS1_+0xfa>
            if (StrNCmp(&getBuffer()[i], to, tolen) == 0) {
 800d1b8:	68f8      	ldr	r0, [r7, #12]
 800d1ba:	f7ff fd96 	bl	800ccea <_ZNK12SimpleString9getBufferEv>
 800d1be:	4602      	mov	r2, r0
 800d1c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1c2:	4413      	add	r3, r2
 800d1c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1c6:	68b9      	ldr	r1, [r7, #8]
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f7ff fc16 	bl	800c9fa <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	bf0c      	ite	eq
 800d1d4:	2301      	moveq	r3, #1
 800d1d6:	2300      	movne	r3, #0
 800d1d8:	b2db      	uxtb	r3, r3
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d011      	beq.n	800d202 <_ZN12SimpleString7replaceEPKcS1_+0xd6>
                StrNCpy(&newbuf[j], with, withlen + 1);
 800d1de:	69ba      	ldr	r2, [r7, #24]
 800d1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1e2:	18d0      	adds	r0, r2, r3
 800d1e4:	6a3b      	ldr	r3, [r7, #32]
 800d1e6:	3301      	adds	r3, #1
 800d1e8:	461a      	mov	r2, r3
 800d1ea:	6879      	ldr	r1, [r7, #4]
 800d1ec:	f7ff fc33 	bl	800ca56 <_ZN12SimpleString7StrNCpyEPcPKcj>
                j += withlen;
 800d1f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1f2:	6a3b      	ldr	r3, [r7, #32]
 800d1f4:	4413      	add	r3, r2
 800d1f6:	633b      	str	r3, [r7, #48]	; 0x30
                i += tolen;
 800d1f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1fc:	4413      	add	r3, r2
 800d1fe:	637b      	str	r3, [r7, #52]	; 0x34
 800d200:	e7d6      	b.n	800d1b0 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
            else {
                newbuf[j] = getBuffer()[i];
 800d202:	68f8      	ldr	r0, [r7, #12]
 800d204:	f7ff fd71 	bl	800ccea <_ZNK12SimpleString9getBufferEv>
 800d208:	4602      	mov	r2, r0
 800d20a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d20c:	441a      	add	r2, r3
 800d20e:	69b9      	ldr	r1, [r7, #24]
 800d210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d212:	440b      	add	r3, r1
 800d214:	7812      	ldrb	r2, [r2, #0]
 800d216:	701a      	strb	r2, [r3, #0]
                j++;
 800d218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d21a:	3301      	adds	r3, #1
 800d21c:	633b      	str	r3, [r7, #48]	; 0x30
                i++;
 800d21e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d220:	3301      	adds	r3, #1
 800d222:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t i = 0, j = 0; i < len;) {
 800d224:	e7c4      	b.n	800d1b0 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
        }
        newbuf[newsize - 1] = '\0';
 800d226:	69fb      	ldr	r3, [r7, #28]
 800d228:	3b01      	subs	r3, #1
 800d22a:	69ba      	ldr	r2, [r7, #24]
 800d22c:	4413      	add	r3, r2
 800d22e:	2200      	movs	r2, #0
 800d230:	701a      	strb	r2, [r3, #0]
        setInternalBufferTo(newbuf, newsize);
 800d232:	69fa      	ldr	r2, [r7, #28]
 800d234:	69b9      	ldr	r1, [r7, #24]
 800d236:	68f8      	ldr	r0, [r7, #12]
 800d238:	f7ff fd1c 	bl	800cc74 <_ZN12SimpleString19setInternalBufferToEPcj>
 800d23c:	e004      	b.n	800d248 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
    }
    else
        setInternalBufferAsEmptyString();
 800d23e:	68f8      	ldr	r0, [r7, #12]
 800d240:	f7ff fcca 	bl	800cbd8 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800d244:	e000      	b.n	800d248 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
        return;
 800d246:	bf00      	nop
}
 800d248:	3738      	adds	r7, #56	; 0x38
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}
 800d24e:	bf00      	nop
 800d250:	0802446c 	.word	0x0802446c

0800d254 <_ZNK12SimpleString9printableEv>:

SimpleString SimpleString::printable() const
{
 800d254:	b590      	push	{r4, r7, lr}
 800d256:	b089      	sub	sp, #36	; 0x24
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	6039      	str	r1, [r7, #0]
        "\\v",
        "\\f",
        "\\r"
    };

    SimpleString result;
 800d25e:	493b      	ldr	r1, [pc, #236]	; (800d34c <_ZNK12SimpleString9printableEv+0xf8>)
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f7ff fd4e 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
    result.setInternalBufferToNewBuffer(getPrintableSize() + 1);
 800d266:	6838      	ldr	r0, [r7, #0]
 800d268:	f000 f876 	bl	800d358 <_ZNK12SimpleString16getPrintableSizeEv>
 800d26c:	4603      	mov	r3, r0
 800d26e:	3301      	adds	r3, #1
 800d270:	4619      	mov	r1, r3
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f7ff fcde 	bl	800cc34 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    size_t str_size = size();
 800d278:	6838      	ldr	r0, [r7, #0]
 800d27a:	f000 f8d9 	bl	800d430 <_ZNK12SimpleString4sizeEv>
 800d27e:	6178      	str	r0, [r7, #20]
    size_t j = 0;
 800d280:	2300      	movs	r3, #0
 800d282:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800d284:	2300      	movs	r3, #0
 800d286:	61bb      	str	r3, [r7, #24]
 800d288:	69ba      	ldr	r2, [r7, #24]
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	429a      	cmp	r2, r3
 800d28e:	d252      	bcs.n	800d336 <_ZNK12SimpleString9printableEv+0xe2>
    {
        char c = buffer_[i];
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	681a      	ldr	r2, [r3, #0]
 800d294:	69bb      	ldr	r3, [r7, #24]
 800d296:	4413      	add	r3, r2
 800d298:	781b      	ldrb	r3, [r3, #0]
 800d29a:	74fb      	strb	r3, [r7, #19]
        if (isControlWithShortEscapeSequence(c))
 800d29c:	7cfb      	ldrb	r3, [r7, #19]
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f000 fb43 	bl	800d92a <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d012      	beq.n	800d2d0 <_ZNK12SimpleString9printableEv+0x7c>
        {
            StrNCpy(&result.buffer_[j], shortEscapeCodes[(unsigned char)(c - '\a')], 2);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681a      	ldr	r2, [r3, #0]
 800d2ae:	69fb      	ldr	r3, [r7, #28]
 800d2b0:	18d0      	adds	r0, r2, r3
 800d2b2:	7cfb      	ldrb	r3, [r7, #19]
 800d2b4:	3b07      	subs	r3, #7
 800d2b6:	b2db      	uxtb	r3, r3
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	4b25      	ldr	r3, [pc, #148]	; (800d350 <_ZNK12SimpleString9printableEv+0xfc>)
 800d2bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2c0:	2202      	movs	r2, #2
 800d2c2:	4619      	mov	r1, r3
 800d2c4:	f7ff fbc7 	bl	800ca56 <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 2;
 800d2c8:	69fb      	ldr	r3, [r7, #28]
 800d2ca:	3302      	adds	r3, #2
 800d2cc:	61fb      	str	r3, [r7, #28]
 800d2ce:	e02e      	b.n	800d32e <_ZNK12SimpleString9printableEv+0xda>
        }
        else if (isControl(c))
 800d2d0:	7cfb      	ldrb	r3, [r7, #19]
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f000 fb15 	bl	800d902 <_ZN12SimpleString9isControlEc>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d01e      	beq.n	800d31c <_ZNK12SimpleString9printableEv+0xc8>
        {
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800d2de:	7cfa      	ldrb	r2, [r7, #19]
 800d2e0:	f107 0308 	add.w	r3, r7, #8
 800d2e4:	491b      	ldr	r1, [pc, #108]	; (800d354 <_ZNK12SimpleString9printableEv+0x100>)
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f000 fdca 	bl	800de80 <_Z16StringFromFormatPKcz>
            StrNCpy(&result.buffer_[j], hexEscapeCode.asCharString(), 4);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681a      	ldr	r2, [r3, #0]
 800d2f0:	69fb      	ldr	r3, [r7, #28]
 800d2f2:	18d4      	adds	r4, r2, r3
 800d2f4:	f107 0308 	add.w	r3, r7, #8
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f000 f88d 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 800d2fe:	4603      	mov	r3, r0
 800d300:	2204      	movs	r2, #4
 800d302:	4619      	mov	r1, r3
 800d304:	4620      	mov	r0, r4
 800d306:	f7ff fba6 	bl	800ca56 <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 4;
 800d30a:	69fb      	ldr	r3, [r7, #28]
 800d30c:	3304      	adds	r3, #4
 800d30e:	61fb      	str	r3, [r7, #28]
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800d310:	f107 0308 	add.w	r3, r7, #8
 800d314:	4618      	mov	r0, r3
 800d316:	f000 f8ac 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800d31a:	e008      	b.n	800d32e <_ZNK12SimpleString9printableEv+0xda>
        }
        else
        {
            result.buffer_[j] = c;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681a      	ldr	r2, [r3, #0]
 800d320:	69fb      	ldr	r3, [r7, #28]
 800d322:	4413      	add	r3, r2
 800d324:	7cfa      	ldrb	r2, [r7, #19]
 800d326:	701a      	strb	r2, [r3, #0]
            j++;
 800d328:	69fb      	ldr	r3, [r7, #28]
 800d32a:	3301      	adds	r3, #1
 800d32c:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800d32e:	69bb      	ldr	r3, [r7, #24]
 800d330:	3301      	adds	r3, #1
 800d332:	61bb      	str	r3, [r7, #24]
 800d334:	e7a8      	b.n	800d288 <_ZNK12SimpleString9printableEv+0x34>
        }
    }
    result.buffer_[j] = 0;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681a      	ldr	r2, [r3, #0]
 800d33a:	69fb      	ldr	r3, [r7, #28]
 800d33c:	4413      	add	r3, r2
 800d33e:	2200      	movs	r2, #0
 800d340:	701a      	strb	r2, [r3, #0]

    return result;
 800d342:	bf00      	nop
}
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	3724      	adds	r7, #36	; 0x24
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd90      	pop	{r4, r7, pc}
 800d34c:	0802452c 	.word	0x0802452c
 800d350:	2000006c 	.word	0x2000006c
 800d354:	08024530 	.word	0x08024530

0800d358 <_ZNK12SimpleString16getPrintableSizeEv>:

size_t SimpleString::getPrintableSize() const
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b086      	sub	sp, #24
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
    size_t str_size = size();
 800d360:	6878      	ldr	r0, [r7, #4]
 800d362:	f000 f865 	bl	800d430 <_ZNK12SimpleString4sizeEv>
 800d366:	60f8      	str	r0, [r7, #12]
    size_t printable_str_size = str_size;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < str_size; i++)
 800d36c:	2300      	movs	r3, #0
 800d36e:	613b      	str	r3, [r7, #16]
 800d370:	693a      	ldr	r2, [r7, #16]
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	429a      	cmp	r2, r3
 800d376:	d21e      	bcs.n	800d3b6 <_ZNK12SimpleString16getPrintableSizeEv+0x5e>
    {
        char c = buffer_[i];
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681a      	ldr	r2, [r3, #0]
 800d37c:	693b      	ldr	r3, [r7, #16]
 800d37e:	4413      	add	r3, r2
 800d380:	781b      	ldrb	r3, [r3, #0]
 800d382:	72fb      	strb	r3, [r7, #11]
        if (isControlWithShortEscapeSequence(c))
 800d384:	7afb      	ldrb	r3, [r7, #11]
 800d386:	4618      	mov	r0, r3
 800d388:	f000 facf 	bl	800d92a <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800d38c:	4603      	mov	r3, r0
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d003      	beq.n	800d39a <_ZNK12SimpleString16getPrintableSizeEv+0x42>
        {
            printable_str_size += 1;
 800d392:	697b      	ldr	r3, [r7, #20]
 800d394:	3301      	adds	r3, #1
 800d396:	617b      	str	r3, [r7, #20]
 800d398:	e009      	b.n	800d3ae <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        }
        else if (isControl(c))
 800d39a:	7afb      	ldrb	r3, [r7, #11]
 800d39c:	4618      	mov	r0, r3
 800d39e:	f000 fab0 	bl	800d902 <_ZN12SimpleString9isControlEc>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d002      	beq.n	800d3ae <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        {
            printable_str_size += 3;
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	3303      	adds	r3, #3
 800d3ac:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < str_size; i++)
 800d3ae:	693b      	ldr	r3, [r7, #16]
 800d3b0:	3301      	adds	r3, #1
 800d3b2:	613b      	str	r3, [r7, #16]
 800d3b4:	e7dc      	b.n	800d370 <_ZNK12SimpleString16getPrintableSizeEv+0x18>
        }
    }

    return printable_str_size;
 800d3b6:	697b      	ldr	r3, [r7, #20]
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3718      	adds	r7, #24
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}

0800d3c0 <_ZNK12SimpleString9lowerCaseEv>:

SimpleString SimpleString::lowerCase() const
{
 800d3c0:	b590      	push	{r4, r7, lr}
 800d3c2:	b085      	sub	sp, #20
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	6039      	str	r1, [r7, #0]
    SimpleString str(*this);
 800d3ca:	6839      	ldr	r1, [r7, #0]
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f7ff fcec 	bl	800cdaa <_ZN12SimpleStringC1ERKS_>

    size_t str_size = str.size();
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f000 f82c 	bl	800d430 <_ZNK12SimpleString4sizeEv>
 800d3d8:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < str_size; i++)
 800d3da:	2300      	movs	r3, #0
 800d3dc:	60fb      	str	r3, [r7, #12]
 800d3de:	68fa      	ldr	r2, [r7, #12]
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	429a      	cmp	r2, r3
 800d3e4:	d213      	bcs.n	800d40e <_ZNK12SimpleString9lowerCaseEv+0x4e>
        str.buffer_[i] = ToLower(str.getBuffer()[i]);
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f7ff fc7f 	bl	800ccea <_ZNK12SimpleString9getBufferEv>
 800d3ec:	4602      	mov	r2, r0
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	4413      	add	r3, r2
 800d3f2:	7819      	ldrb	r1, [r3, #0]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681a      	ldr	r2, [r3, #0]
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	18d4      	adds	r4, r2, r3
 800d3fc:	4608      	mov	r0, r1
 800d3fe:	f7ff fb8a 	bl	800cb16 <_ZN12SimpleString7ToLowerEc>
 800d402:	4603      	mov	r3, r0
 800d404:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < str_size; i++)
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	3301      	adds	r3, #1
 800d40a:	60fb      	str	r3, [r7, #12]
 800d40c:	e7e7      	b.n	800d3de <_ZNK12SimpleString9lowerCaseEv+0x1e>

    return str;
 800d40e:	bf00      	nop
}
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	3714      	adds	r7, #20
 800d414:	46bd      	mov	sp, r7
 800d416:	bd90      	pop	{r4, r7, pc}

0800d418 <_ZNK12SimpleString12asCharStringEv>:

const char *SimpleString::asCharString() const
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b082      	sub	sp, #8
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
    return getBuffer();
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	f7ff fc62 	bl	800ccea <_ZNK12SimpleString9getBufferEv>
 800d426:	4603      	mov	r3, r0
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3708      	adds	r7, #8
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}

0800d430 <_ZNK12SimpleString4sizeEv>:

size_t SimpleString::size() const
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b082      	sub	sp, #8
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
    return StrLen(getBuffer());
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f7ff fc56 	bl	800ccea <_ZNK12SimpleString9getBufferEv>
 800d43e:	4603      	mov	r3, r0
 800d440:	4618      	mov	r0, r3
 800d442:	f7ff fabd 	bl	800c9c0 <_ZN12SimpleString6StrLenEPKc>
 800d446:	4603      	mov	r3, r0
}
 800d448:	4618      	mov	r0, r3
 800d44a:	3708      	adds	r7, #8
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}

0800d450 <_ZNK12SimpleString7isEmptyEv>:

bool SimpleString::isEmpty() const
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b082      	sub	sp, #8
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
    return size() == 0;
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f7ff ffe9 	bl	800d430 <_ZNK12SimpleString4sizeEv>
 800d45e:	4603      	mov	r3, r0
 800d460:	2b00      	cmp	r3, #0
 800d462:	bf0c      	ite	eq
 800d464:	2301      	moveq	r3, #1
 800d466:	2300      	movne	r3, #0
 800d468:	b2db      	uxtb	r3, r3
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	3708      	adds	r7, #8
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}

0800d472 <_ZN12SimpleStringD1Ev>:

SimpleString::~SimpleString()
 800d472:	b580      	push	{r7, lr}
 800d474:	b082      	sub	sp, #8
 800d476:	af00      	add	r7, sp, #0
 800d478:	6078      	str	r0, [r7, #4]
{
    deallocateInternalBuffer();
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f7ff fb90 	bl	800cba0 <_ZN12SimpleString24deallocateInternalBufferEv>
}
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	4618      	mov	r0, r3
 800d484:	3708      	adds	r7, #8
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}

0800d48a <_ZeqRK12SimpleStringS1_>:

bool operator==(const SimpleString& left, const SimpleString& right)
{
 800d48a:	b590      	push	{r4, r7, lr}
 800d48c:	b083      	sub	sp, #12
 800d48e:	af00      	add	r7, sp, #0
 800d490:	6078      	str	r0, [r7, #4]
 800d492:	6039      	str	r1, [r7, #0]
    return 0 == SimpleString::StrCmp(left.asCharString(), right.asCharString());
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f7ff ffbf 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 800d49a:	4604      	mov	r4, r0
 800d49c:	6838      	ldr	r0, [r7, #0]
 800d49e:	f7ff ffbb 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	4619      	mov	r1, r3
 800d4a6:	4620      	mov	r0, r4
 800d4a8:	f7ff fa68 	bl	800c97c <_ZN12SimpleString6StrCmpEPKcS1_>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	bf0c      	ite	eq
 800d4b2:	2301      	moveq	r3, #1
 800d4b4:	2300      	movne	r3, #0
 800d4b6:	b2db      	uxtb	r3, r3
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	370c      	adds	r7, #12
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd90      	pop	{r4, r7, pc}

0800d4c0 <_ZNK12SimpleString12equalsNoCaseERKS_>:

bool SimpleString::equalsNoCase(const SimpleString& str) const
{
 800d4c0:	b590      	push	{r4, r7, lr}
 800d4c2:	b087      	sub	sp, #28
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	6039      	str	r1, [r7, #0]
    return lowerCase() == str.lowerCase();
 800d4ca:	f107 0308 	add.w	r3, r7, #8
 800d4ce:	6879      	ldr	r1, [r7, #4]
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f7ff ff75 	bl	800d3c0 <_ZNK12SimpleString9lowerCaseEv>
 800d4d6:	f107 0310 	add.w	r3, r7, #16
 800d4da:	6839      	ldr	r1, [r7, #0]
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f7ff ff6f 	bl	800d3c0 <_ZNK12SimpleString9lowerCaseEv>
 800d4e2:	f107 0210 	add.w	r2, r7, #16
 800d4e6:	f107 0308 	add.w	r3, r7, #8
 800d4ea:	4611      	mov	r1, r2
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f7ff ffcc 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	461c      	mov	r4, r3
 800d4f6:	f107 0310 	add.w	r3, r7, #16
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7ff ffb9 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800d500:	f107 0308 	add.w	r3, r7, #8
 800d504:	4618      	mov	r0, r3
 800d506:	f7ff ffb4 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800d50a:	4623      	mov	r3, r4
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	371c      	adds	r7, #28
 800d510:	46bd      	mov	sp, r7
 800d512:	bd90      	pop	{r4, r7, pc}

0800d514 <_ZneRK12SimpleStringS1_>:


bool operator!=(const SimpleString& left, const SimpleString& right)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b082      	sub	sp, #8
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	6039      	str	r1, [r7, #0]
    return !(left == right);
 800d51e:	6839      	ldr	r1, [r7, #0]
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f7ff ffb2 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 800d526:	4603      	mov	r3, r0
 800d528:	f083 0301 	eor.w	r3, r3, #1
 800d52c:	b2db      	uxtb	r3, r3
}
 800d52e:	4618      	mov	r0, r3
 800d530:	3708      	adds	r7, #8
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}

0800d536 <_ZNK12SimpleStringplERKS_>:

SimpleString SimpleString::operator+(const SimpleString& rhs) const
{
 800d536:	b580      	push	{r7, lr}
 800d538:	b084      	sub	sp, #16
 800d53a:	af00      	add	r7, sp, #0
 800d53c:	60f8      	str	r0, [r7, #12]
 800d53e:	60b9      	str	r1, [r7, #8]
 800d540:	607a      	str	r2, [r7, #4]
    SimpleString t(getBuffer());
 800d542:	68b8      	ldr	r0, [r7, #8]
 800d544:	f7ff fbd1 	bl	800ccea <_ZNK12SimpleString9getBufferEv>
 800d548:	4603      	mov	r3, r0
 800d54a:	4619      	mov	r1, r3
 800d54c:	68f8      	ldr	r0, [r7, #12]
 800d54e:	f7ff fbd8 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
    t += rhs.getBuffer();
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f7ff fbc9 	bl	800ccea <_ZNK12SimpleString9getBufferEv>
 800d558:	4603      	mov	r3, r0
 800d55a:	4619      	mov	r1, r3
 800d55c:	68f8      	ldr	r0, [r7, #12]
 800d55e:	f000 f817 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    return t;
 800d562:	bf00      	nop
}
 800d564:	68f8      	ldr	r0, [r7, #12]
 800d566:	3710      	adds	r7, #16
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}

0800d56c <_ZN12SimpleStringpLERKS_>:

SimpleString& SimpleString::operator+=(const SimpleString& rhs)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b082      	sub	sp, #8
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	6039      	str	r1, [r7, #0]
    return operator+=(rhs.getBuffer());
 800d576:	6838      	ldr	r0, [r7, #0]
 800d578:	f7ff fbb7 	bl	800ccea <_ZNK12SimpleString9getBufferEv>
 800d57c:	4603      	mov	r3, r0
 800d57e:	4619      	mov	r1, r3
 800d580:	6878      	ldr	r0, [r7, #4]
 800d582:	f000 f805 	bl	800d590 <_ZN12SimpleStringpLEPKc>
 800d586:	4603      	mov	r3, r0
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3708      	adds	r7, #8
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}

0800d590 <_ZN12SimpleStringpLEPKc>:

SimpleString& SimpleString::operator+=(const char* rhs)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b086      	sub	sp, #24
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
 800d598:	6039      	str	r1, [r7, #0]
    size_t originalSize = this->size();
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f7ff ff48 	bl	800d430 <_ZNK12SimpleString4sizeEv>
 800d5a0:	6178      	str	r0, [r7, #20]
    size_t additionalStringSize = StrLen(rhs) + 1;
 800d5a2:	6838      	ldr	r0, [r7, #0]
 800d5a4:	f7ff fa0c 	bl	800c9c0 <_ZN12SimpleString6StrLenEPKc>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	613b      	str	r3, [r7, #16]
    size_t sizeOfNewString = originalSize + additionalStringSize;
 800d5ae:	697a      	ldr	r2, [r7, #20]
 800d5b0:	693b      	ldr	r3, [r7, #16]
 800d5b2:	4413      	add	r3, r2
 800d5b4:	60fb      	str	r3, [r7, #12]
    char* tbuffer = copyToNewBuffer(this->getBuffer(), sizeOfNewString);
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f7ff fb97 	bl	800ccea <_ZNK12SimpleString9getBufferEv>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	68f9      	ldr	r1, [r7, #12]
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f000 f941 	bl	800d848 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800d5c6:	60b8      	str	r0, [r7, #8]
    StrNCpy(tbuffer + originalSize, rhs, additionalStringSize);
 800d5c8:	68ba      	ldr	r2, [r7, #8]
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	4413      	add	r3, r2
 800d5ce:	693a      	ldr	r2, [r7, #16]
 800d5d0:	6839      	ldr	r1, [r7, #0]
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f7ff fa3f 	bl	800ca56 <_ZN12SimpleString7StrNCpyEPcPKcj>

    setInternalBufferTo(tbuffer, sizeOfNewString);
 800d5d8:	68fa      	ldr	r2, [r7, #12]
 800d5da:	68b9      	ldr	r1, [r7, #8]
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f7ff fb49 	bl	800cc74 <_ZN12SimpleString19setInternalBufferToEPcj>
    return *this;
 800d5e2:	687b      	ldr	r3, [r7, #4]
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3718      	adds	r7, #24
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}

0800d5ec <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>:

void SimpleString::padStringsToSameLength(SimpleString& str1, SimpleString& str2, char padCharacter)
{
 800d5ec:	b590      	push	{r4, r7, lr}
 800d5ee:	b08b      	sub	sp, #44	; 0x2c
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	60f8      	str	r0, [r7, #12]
 800d5f4:	60b9      	str	r1, [r7, #8]
 800d5f6:	4613      	mov	r3, r2
 800d5f8:	71fb      	strb	r3, [r7, #7]
    if (str1.size() > str2.size()) {
 800d5fa:	68f8      	ldr	r0, [r7, #12]
 800d5fc:	f7ff ff18 	bl	800d430 <_ZNK12SimpleString4sizeEv>
 800d600:	4604      	mov	r4, r0
 800d602:	68b8      	ldr	r0, [r7, #8]
 800d604:	f7ff ff14 	bl	800d430 <_ZNK12SimpleString4sizeEv>
 800d608:	4603      	mov	r3, r0
 800d60a:	429c      	cmp	r4, r3
 800d60c:	bf8c      	ite	hi
 800d60e:	2301      	movhi	r3, #1
 800d610:	2300      	movls	r3, #0
 800d612:	b2db      	uxtb	r3, r3
 800d614:	2b00      	cmp	r3, #0
 800d616:	d006      	beq.n	800d626 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x3a>
        padStringsToSameLength(str2, str1, padCharacter);
 800d618:	79fb      	ldrb	r3, [r7, #7]
 800d61a:	461a      	mov	r2, r3
 800d61c:	68f9      	ldr	r1, [r7, #12]
 800d61e:	68b8      	ldr	r0, [r7, #8]
 800d620:	f7ff ffe4 	bl	800d5ec <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>
 800d624:	e02b      	b.n	800d67e <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x92>
        return;
    }

    char pad[2];
    pad[0] = padCharacter;
 800d626:	79fb      	ldrb	r3, [r7, #7]
 800d628:	753b      	strb	r3, [r7, #20]
    pad[1] = 0;
 800d62a:	2300      	movs	r3, #0
 800d62c:	757b      	strb	r3, [r7, #21]
    str1 = SimpleString(pad, str2.size() - str1.size()) + str1;
 800d62e:	68b8      	ldr	r0, [r7, #8]
 800d630:	f7ff fefe 	bl	800d430 <_ZNK12SimpleString4sizeEv>
 800d634:	4604      	mov	r4, r0
 800d636:	68f8      	ldr	r0, [r7, #12]
 800d638:	f7ff fefa 	bl	800d430 <_ZNK12SimpleString4sizeEv>
 800d63c:	4603      	mov	r3, r0
 800d63e:	1ae2      	subs	r2, r4, r3
 800d640:	f107 0114 	add.w	r1, r7, #20
 800d644:	f107 0320 	add.w	r3, r7, #32
 800d648:	4618      	mov	r0, r3
 800d64a:	f7ff fb75 	bl	800cd38 <_ZN12SimpleStringC1EPKcj>
 800d64e:	f107 0318 	add.w	r3, r7, #24
 800d652:	f107 0120 	add.w	r1, r7, #32
 800d656:	68fa      	ldr	r2, [r7, #12]
 800d658:	4618      	mov	r0, r3
 800d65a:	f7ff ff6c 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 800d65e:	f107 0318 	add.w	r3, r7, #24
 800d662:	4619      	mov	r1, r3
 800d664:	68f8      	ldr	r0, [r7, #12]
 800d666:	f7ff fbb8 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 800d66a:	f107 0318 	add.w	r3, r7, #24
 800d66e:	4618      	mov	r0, r3
 800d670:	f7ff feff 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800d674:	f107 0320 	add.w	r3, r7, #32
 800d678:	4618      	mov	r0, r3
 800d67a:	f7ff fefa 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 800d67e:	372c      	adds	r7, #44	; 0x2c
 800d680:	46bd      	mov	sp, r7
 800d682:	bd90      	pop	{r4, r7, pc}

0800d684 <_ZNK12SimpleString9subStringEjj>:

SimpleString SimpleString::subString(size_t beginPos, size_t amount) const
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b086      	sub	sp, #24
 800d688:	af00      	add	r7, sp, #0
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	60b9      	str	r1, [r7, #8]
 800d68e:	607a      	str	r2, [r7, #4]
 800d690:	603b      	str	r3, [r7, #0]
    if (beginPos > size()-1) return "";
 800d692:	68b8      	ldr	r0, [r7, #8]
 800d694:	f7ff fecc 	bl	800d430 <_ZNK12SimpleString4sizeEv>
 800d698:	4603      	mov	r3, r0
 800d69a:	3b01      	subs	r3, #1
 800d69c:	687a      	ldr	r2, [r7, #4]
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	bf8c      	ite	hi
 800d6a2:	2301      	movhi	r3, #1
 800d6a4:	2300      	movls	r3, #0
 800d6a6:	b2db      	uxtb	r3, r3
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d004      	beq.n	800d6b6 <_ZNK12SimpleString9subStringEjj+0x32>
 800d6ac:	4919      	ldr	r1, [pc, #100]	; (800d714 <_ZNK12SimpleString9subStringEjj+0x90>)
 800d6ae:	68f8      	ldr	r0, [r7, #12]
 800d6b0:	f7ff fb27 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800d6b4:	e029      	b.n	800d70a <_ZNK12SimpleString9subStringEjj+0x86>

    SimpleString newString = getBuffer() + beginPos;
 800d6b6:	68b8      	ldr	r0, [r7, #8]
 800d6b8:	f7ff fb17 	bl	800ccea <_ZNK12SimpleString9getBufferEv>
 800d6bc:	4602      	mov	r2, r0
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	441a      	add	r2, r3
 800d6c2:	f107 0310 	add.w	r3, r7, #16
 800d6c6:	4611      	mov	r1, r2
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f7ff fb1a 	bl	800cd02 <_ZN12SimpleStringC1EPKc>

    if (newString.size() > amount)
 800d6ce:	f107 0310 	add.w	r3, r7, #16
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f7ff feac 	bl	800d430 <_ZNK12SimpleString4sizeEv>
 800d6d8:	4602      	mov	r2, r0
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	bf34      	ite	cc
 800d6e0:	2301      	movcc	r3, #1
 800d6e2:	2300      	movcs	r3, #0
 800d6e4:	b2db      	uxtb	r3, r3
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d004      	beq.n	800d6f4 <_ZNK12SimpleString9subStringEjj+0x70>
        newString.buffer_[amount] = '\0';
 800d6ea:	693a      	ldr	r2, [r7, #16]
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	4413      	add	r3, r2
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	701a      	strb	r2, [r3, #0]

    return newString;
 800d6f4:	f107 0310 	add.w	r3, r7, #16
 800d6f8:	4619      	mov	r1, r3
 800d6fa:	68f8      	ldr	r0, [r7, #12]
 800d6fc:	f7ff fb55 	bl	800cdaa <_ZN12SimpleStringC1ERKS_>
    SimpleString newString = getBuffer() + beginPos;
 800d700:	f107 0310 	add.w	r3, r7, #16
 800d704:	4618      	mov	r0, r3
 800d706:	f7ff feb4 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 800d70a:	68f8      	ldr	r0, [r7, #12]
 800d70c:	3718      	adds	r7, #24
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}
 800d712:	bf00      	nop
 800d714:	0802452c 	.word	0x0802452c

0800d718 <_ZNK12SimpleString9subStringEj>:

SimpleString SimpleString::subString(size_t beginPos) const
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b084      	sub	sp, #16
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	60f8      	str	r0, [r7, #12]
 800d720:	60b9      	str	r1, [r7, #8]
 800d722:	607a      	str	r2, [r7, #4]
    return subString(beginPos, npos);
 800d724:	68f8      	ldr	r0, [r7, #12]
 800d726:	f04f 33ff 	mov.w	r3, #4294967295
 800d72a:	687a      	ldr	r2, [r7, #4]
 800d72c:	68b9      	ldr	r1, [r7, #8]
 800d72e:	f7ff ffa9 	bl	800d684 <_ZNK12SimpleString9subStringEjj>
}
 800d732:	68f8      	ldr	r0, [r7, #12]
 800d734:	3710      	adds	r7, #16
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}

0800d73a <_ZNK12SimpleString2atEj>:

char SimpleString::at(size_t pos) const
{
 800d73a:	b580      	push	{r7, lr}
 800d73c:	b082      	sub	sp, #8
 800d73e:	af00      	add	r7, sp, #0
 800d740:	6078      	str	r0, [r7, #4]
 800d742:	6039      	str	r1, [r7, #0]
    return getBuffer()[pos];
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f7ff fad0 	bl	800ccea <_ZNK12SimpleString9getBufferEv>
 800d74a:	4602      	mov	r2, r0
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	4413      	add	r3, r2
 800d750:	781b      	ldrb	r3, [r3, #0]
}
 800d752:	4618      	mov	r0, r3
 800d754:	3708      	adds	r7, #8
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}

0800d75a <_ZNK12SimpleString4findEc>:

size_t SimpleString::find(char ch) const
{
 800d75a:	b580      	push	{r7, lr}
 800d75c:	b082      	sub	sp, #8
 800d75e:	af00      	add	r7, sp, #0
 800d760:	6078      	str	r0, [r7, #4]
 800d762:	460b      	mov	r3, r1
 800d764:	70fb      	strb	r3, [r7, #3]
    return findFrom(0, ch);
 800d766:	78fb      	ldrb	r3, [r7, #3]
 800d768:	461a      	mov	r2, r3
 800d76a:	2100      	movs	r1, #0
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f000 f805 	bl	800d77c <_ZNK12SimpleString8findFromEjc>
 800d772:	4603      	mov	r3, r0
}
 800d774:	4618      	mov	r0, r3
 800d776:	3708      	adds	r7, #8
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}

0800d77c <_ZNK12SimpleString8findFromEjc>:

size_t SimpleString::findFrom(size_t starting_position, char ch) const
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b086      	sub	sp, #24
 800d780:	af00      	add	r7, sp, #0
 800d782:	60f8      	str	r0, [r7, #12]
 800d784:	60b9      	str	r1, [r7, #8]
 800d786:	4613      	mov	r3, r2
 800d788:	71fb      	strb	r3, [r7, #7]
    size_t length = size();
 800d78a:	68f8      	ldr	r0, [r7, #12]
 800d78c:	f7ff fe50 	bl	800d430 <_ZNK12SimpleString4sizeEv>
 800d790:	6138      	str	r0, [r7, #16]
    for (size_t i = starting_position; i < length; i++)
 800d792:	68bb      	ldr	r3, [r7, #8]
 800d794:	617b      	str	r3, [r7, #20]
 800d796:	697a      	ldr	r2, [r7, #20]
 800d798:	693b      	ldr	r3, [r7, #16]
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d213      	bcs.n	800d7c6 <_ZNK12SimpleString8findFromEjc+0x4a>
        if (at(i) == ch) return i;
 800d79e:	6979      	ldr	r1, [r7, #20]
 800d7a0:	68f8      	ldr	r0, [r7, #12]
 800d7a2:	f7ff ffca 	bl	800d73a <_ZNK12SimpleString2atEj>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	461a      	mov	r2, r3
 800d7aa:	79fb      	ldrb	r3, [r7, #7]
 800d7ac:	4293      	cmp	r3, r2
 800d7ae:	bf0c      	ite	eq
 800d7b0:	2301      	moveq	r3, #1
 800d7b2:	2300      	movne	r3, #0
 800d7b4:	b2db      	uxtb	r3, r3
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d001      	beq.n	800d7be <_ZNK12SimpleString8findFromEjc+0x42>
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	e005      	b.n	800d7ca <_ZNK12SimpleString8findFromEjc+0x4e>
    for (size_t i = starting_position; i < length; i++)
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	3301      	adds	r3, #1
 800d7c2:	617b      	str	r3, [r7, #20]
 800d7c4:	e7e7      	b.n	800d796 <_ZNK12SimpleString8findFromEjc+0x1a>
    return npos;
 800d7c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	3718      	adds	r7, #24
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}
	...

0800d7d4 <_ZNK12SimpleString17subStringFromTillEcc>:

SimpleString SimpleString::subStringFromTill(char startChar, char lastExcludedChar) const
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b086      	sub	sp, #24
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	60f8      	str	r0, [r7, #12]
 800d7dc:	60b9      	str	r1, [r7, #8]
 800d7de:	4611      	mov	r1, r2
 800d7e0:	461a      	mov	r2, r3
 800d7e2:	460b      	mov	r3, r1
 800d7e4:	71fb      	strb	r3, [r7, #7]
 800d7e6:	4613      	mov	r3, r2
 800d7e8:	71bb      	strb	r3, [r7, #6]
    size_t beginPos = find(startChar);
 800d7ea:	79fb      	ldrb	r3, [r7, #7]
 800d7ec:	4619      	mov	r1, r3
 800d7ee:	68b8      	ldr	r0, [r7, #8]
 800d7f0:	f7ff ffb3 	bl	800d75a <_ZNK12SimpleString4findEc>
 800d7f4:	6178      	str	r0, [r7, #20]
    if (beginPos == npos) return "";
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7fc:	d104      	bne.n	800d808 <_ZNK12SimpleString17subStringFromTillEcc+0x34>
 800d7fe:	4911      	ldr	r1, [pc, #68]	; (800d844 <_ZNK12SimpleString17subStringFromTillEcc+0x70>)
 800d800:	68f8      	ldr	r0, [r7, #12]
 800d802:	f7ff fa7e 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800d806:	e019      	b.n	800d83c <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    size_t endPos = findFrom(beginPos, lastExcludedChar);
 800d808:	79bb      	ldrb	r3, [r7, #6]
 800d80a:	461a      	mov	r2, r3
 800d80c:	6979      	ldr	r1, [r7, #20]
 800d80e:	68b8      	ldr	r0, [r7, #8]
 800d810:	f7ff ffb4 	bl	800d77c <_ZNK12SimpleString8findFromEjc>
 800d814:	6138      	str	r0, [r7, #16]
    if (endPos == npos) return subString(beginPos);
 800d816:	693b      	ldr	r3, [r7, #16]
 800d818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d81c:	d106      	bne.n	800d82c <_ZNK12SimpleString17subStringFromTillEcc+0x58>
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	697a      	ldr	r2, [r7, #20]
 800d822:	68b9      	ldr	r1, [r7, #8]
 800d824:	4618      	mov	r0, r3
 800d826:	f7ff ff77 	bl	800d718 <_ZNK12SimpleString9subStringEj>
 800d82a:	e007      	b.n	800d83c <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    return subString(beginPos, endPos - beginPos);
 800d82c:	693a      	ldr	r2, [r7, #16]
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	1ad3      	subs	r3, r2, r3
 800d832:	68f8      	ldr	r0, [r7, #12]
 800d834:	697a      	ldr	r2, [r7, #20]
 800d836:	68b9      	ldr	r1, [r7, #8]
 800d838:	f7ff ff24 	bl	800d684 <_ZNK12SimpleString9subStringEjj>
}
 800d83c:	68f8      	ldr	r0, [r7, #12]
 800d83e:	3718      	adds	r7, #24
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}
 800d844:	0802452c 	.word	0x0802452c

0800d848 <_ZN12SimpleString15copyToNewBufferEPKcj>:

char* SimpleString::copyToNewBuffer(const char* bufferToCopy, size_t bufferSize)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b084      	sub	sp, #16
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]
    char* newBuffer = allocStringBuffer(bufferSize, __FILE__, __LINE__);
 800d852:	f240 2275 	movw	r2, #629	; 0x275
 800d856:	490a      	ldr	r1, [pc, #40]	; (800d880 <_ZN12SimpleString15copyToNewBufferEPKcj+0x38>)
 800d858:	6838      	ldr	r0, [r7, #0]
 800d85a:	f7fe ffd7 	bl	800c80c <_ZN12SimpleString17allocStringBufferEjPKcj>
 800d85e:	60f8      	str	r0, [r7, #12]
    StrNCpy(newBuffer, bufferToCopy, bufferSize);
 800d860:	683a      	ldr	r2, [r7, #0]
 800d862:	6879      	ldr	r1, [r7, #4]
 800d864:	68f8      	ldr	r0, [r7, #12]
 800d866:	f7ff f8f6 	bl	800ca56 <_ZN12SimpleString7StrNCpyEPcPKcj>
    newBuffer[bufferSize-1] = '\0';
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	3b01      	subs	r3, #1
 800d86e:	68fa      	ldr	r2, [r7, #12]
 800d870:	4413      	add	r3, r2
 800d872:	2200      	movs	r2, #0
 800d874:	701a      	strb	r2, [r3, #0]
    return newBuffer;
 800d876:	68fb      	ldr	r3, [r7, #12]
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3710      	adds	r7, #16
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}
 800d880:	0802446c 	.word	0x0802446c

0800d884 <_ZN12SimpleString7isDigitEc>:
    StrNCpy(bufferToCopy, getBuffer(), sizeToCopy);
    bufferToCopy[sizeToCopy] = '\0';
}

bool SimpleString::isDigit(char ch)
{
 800d884:	b480      	push	{r7}
 800d886:	b083      	sub	sp, #12
 800d888:	af00      	add	r7, sp, #0
 800d88a:	4603      	mov	r3, r0
 800d88c:	71fb      	strb	r3, [r7, #7]
    return '0' <= ch && '9' >= ch;
 800d88e:	79fb      	ldrb	r3, [r7, #7]
 800d890:	2b2f      	cmp	r3, #47	; 0x2f
 800d892:	d904      	bls.n	800d89e <_ZN12SimpleString7isDigitEc+0x1a>
 800d894:	79fb      	ldrb	r3, [r7, #7]
 800d896:	2b39      	cmp	r3, #57	; 0x39
 800d898:	d801      	bhi.n	800d89e <_ZN12SimpleString7isDigitEc+0x1a>
 800d89a:	2301      	movs	r3, #1
 800d89c:	e000      	b.n	800d8a0 <_ZN12SimpleString7isDigitEc+0x1c>
 800d89e:	2300      	movs	r3, #0
}
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	370c      	adds	r7, #12
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8aa:	4770      	bx	lr

0800d8ac <_ZN12SimpleString7isSpaceEc>:

bool SimpleString::isSpace(char ch)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b083      	sub	sp, #12
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	71fb      	strb	r3, [r7, #7]
    return (ch == ' ') || (0x08 < ch && 0x0E > ch);
 800d8b6:	79fb      	ldrb	r3, [r7, #7]
 800d8b8:	2b20      	cmp	r3, #32
 800d8ba:	d005      	beq.n	800d8c8 <_ZN12SimpleString7isSpaceEc+0x1c>
 800d8bc:	79fb      	ldrb	r3, [r7, #7]
 800d8be:	2b08      	cmp	r3, #8
 800d8c0:	d904      	bls.n	800d8cc <_ZN12SimpleString7isSpaceEc+0x20>
 800d8c2:	79fb      	ldrb	r3, [r7, #7]
 800d8c4:	2b0d      	cmp	r3, #13
 800d8c6:	d801      	bhi.n	800d8cc <_ZN12SimpleString7isSpaceEc+0x20>
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	e000      	b.n	800d8ce <_ZN12SimpleString7isSpaceEc+0x22>
 800d8cc:	2300      	movs	r3, #0
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	370c      	adds	r7, #12
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d8:	4770      	bx	lr

0800d8da <_ZN12SimpleString7isUpperEc>:

bool SimpleString::isUpper(char ch)
{
 800d8da:	b480      	push	{r7}
 800d8dc:	b083      	sub	sp, #12
 800d8de:	af00      	add	r7, sp, #0
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	71fb      	strb	r3, [r7, #7]
    return 'A' <= ch && 'Z' >= ch;
 800d8e4:	79fb      	ldrb	r3, [r7, #7]
 800d8e6:	2b40      	cmp	r3, #64	; 0x40
 800d8e8:	d904      	bls.n	800d8f4 <_ZN12SimpleString7isUpperEc+0x1a>
 800d8ea:	79fb      	ldrb	r3, [r7, #7]
 800d8ec:	2b5a      	cmp	r3, #90	; 0x5a
 800d8ee:	d801      	bhi.n	800d8f4 <_ZN12SimpleString7isUpperEc+0x1a>
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	e000      	b.n	800d8f6 <_ZN12SimpleString7isUpperEc+0x1c>
 800d8f4:	2300      	movs	r3, #0
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	370c      	adds	r7, #12
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d900:	4770      	bx	lr

0800d902 <_ZN12SimpleString9isControlEc>:

bool SimpleString::isControl(char ch)
{
 800d902:	b480      	push	{r7}
 800d904:	b083      	sub	sp, #12
 800d906:	af00      	add	r7, sp, #0
 800d908:	4603      	mov	r3, r0
 800d90a:	71fb      	strb	r3, [r7, #7]
    return ch < ' ' || ch == char(0x7F);
 800d90c:	79fb      	ldrb	r3, [r7, #7]
 800d90e:	2b1f      	cmp	r3, #31
 800d910:	d902      	bls.n	800d918 <_ZN12SimpleString9isControlEc+0x16>
 800d912:	79fb      	ldrb	r3, [r7, #7]
 800d914:	2b7f      	cmp	r3, #127	; 0x7f
 800d916:	d101      	bne.n	800d91c <_ZN12SimpleString9isControlEc+0x1a>
 800d918:	2301      	movs	r3, #1
 800d91a:	e000      	b.n	800d91e <_ZN12SimpleString9isControlEc+0x1c>
 800d91c:	2300      	movs	r3, #0
}
 800d91e:	4618      	mov	r0, r3
 800d920:	370c      	adds	r7, #12
 800d922:	46bd      	mov	sp, r7
 800d924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d928:	4770      	bx	lr

0800d92a <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>:

bool SimpleString::isControlWithShortEscapeSequence(char ch)
{
 800d92a:	b480      	push	{r7}
 800d92c:	b083      	sub	sp, #12
 800d92e:	af00      	add	r7, sp, #0
 800d930:	4603      	mov	r3, r0
 800d932:	71fb      	strb	r3, [r7, #7]
    return '\a' <= ch && '\r' >= ch;
 800d934:	79fb      	ldrb	r3, [r7, #7]
 800d936:	2b06      	cmp	r3, #6
 800d938:	d904      	bls.n	800d944 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800d93a:	79fb      	ldrb	r3, [r7, #7]
 800d93c:	2b0d      	cmp	r3, #13
 800d93e:	d801      	bhi.n	800d944 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800d940:	2301      	movs	r3, #1
 800d942:	e000      	b.n	800d946 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1c>
 800d944:	2300      	movs	r3, #0
}
 800d946:	4618      	mov	r0, r3
 800d948:	370c      	adds	r7, #12
 800d94a:	46bd      	mov	sp, r7
 800d94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d950:	4770      	bx	lr
	...

0800d954 <_Z10StringFromb>:

SimpleString StringFrom(bool value)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b082      	sub	sp, #8
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
 800d95c:	460b      	mov	r3, r1
 800d95e:	70fb      	strb	r3, [r7, #3]
    return SimpleString(StringFromFormat("%s", value ? "true" : "false"));
 800d960:	78fb      	ldrb	r3, [r7, #3]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d001      	beq.n	800d96a <_Z10StringFromb+0x16>
 800d966:	4a06      	ldr	r2, [pc, #24]	; (800d980 <_Z10StringFromb+0x2c>)
 800d968:	e000      	b.n	800d96c <_Z10StringFromb+0x18>
 800d96a:	4a06      	ldr	r2, [pc, #24]	; (800d984 <_Z10StringFromb+0x30>)
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	4906      	ldr	r1, [pc, #24]	; (800d988 <_Z10StringFromb+0x34>)
 800d970:	4618      	mov	r0, r3
 800d972:	f000 fa85 	bl	800de80 <_Z16StringFromFormatPKcz>
}
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	3708      	adds	r7, #8
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
 800d97e:	bf00      	nop
 800d980:	08024538 	.word	0x08024538
 800d984:	08024540 	.word	0x08024540
 800d988:	08024548 	.word	0x08024548

0800d98c <_Z10StringFromPKc>:

SimpleString StringFrom(const char *value)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b082      	sub	sp, #8
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	6039      	str	r1, [r7, #0]
    return SimpleString(value);
 800d996:	6839      	ldr	r1, [r7, #0]
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f7ff f9b2 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
}
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	3708      	adds	r7, #8
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}
	...

0800d9a8 <_Z25PrintableStringFromOrNullPKc>:
{
    return (expected) ? StringFrom(expected) : StringFrom("(null)");
}

SimpleString PrintableStringFromOrNull(const char * expected)
{
 800d9a8:	b590      	push	{r4, r7, lr}
 800d9aa:	b085      	sub	sp, #20
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	6039      	str	r1, [r7, #0]
    return (expected) ? StringFrom(expected).printable() : StringFrom("(null)");
 800d9b2:	2400      	movs	r4, #0
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d00e      	beq.n	800d9d8 <_Z25PrintableStringFromOrNullPKc+0x30>
 800d9ba:	f107 0308 	add.w	r3, r7, #8
 800d9be:	6839      	ldr	r1, [r7, #0]
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f7ff ffe3 	bl	800d98c <_Z10StringFromPKc>
 800d9c6:	2401      	movs	r4, #1
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f107 0208 	add.w	r2, r7, #8
 800d9ce:	4611      	mov	r1, r2
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f7ff fc3f 	bl	800d254 <_ZNK12SimpleString9printableEv>
 800d9d6:	e004      	b.n	800d9e2 <_Z25PrintableStringFromOrNullPKc+0x3a>
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	4908      	ldr	r1, [pc, #32]	; (800d9fc <_Z25PrintableStringFromOrNullPKc+0x54>)
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f7ff ffd5 	bl	800d98c <_Z10StringFromPKc>
 800d9e2:	2c00      	cmp	r4, #0
 800d9e4:	d004      	beq.n	800d9f0 <_Z25PrintableStringFromOrNullPKc+0x48>
 800d9e6:	f107 0308 	add.w	r3, r7, #8
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f7ff fd41 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800d9f0:	bf00      	nop
}
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	3714      	adds	r7, #20
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd90      	pop	{r4, r7, pc}
 800d9fa:	bf00      	nop
 800d9fc:	0802454c 	.word	0x0802454c

0800da00 <_Z10StringFromi>:

SimpleString StringFrom(int value)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b082      	sub	sp, #8
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%d", value);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	683a      	ldr	r2, [r7, #0]
 800da0e:	4904      	ldr	r1, [pc, #16]	; (800da20 <_Z10StringFromi+0x20>)
 800da10:	4618      	mov	r0, r3
 800da12:	f000 fa35 	bl	800de80 <_Z16StringFromFormatPKcz>
}
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	3708      	adds	r7, #8
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
 800da1e:	bf00      	nop
 800da20:	08024554 	.word	0x08024554

0800da24 <_Z10StringFroml>:

SimpleString StringFrom(long value)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b082      	sub	sp, #8
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
 800da2c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%ld", value);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	683a      	ldr	r2, [r7, #0]
 800da32:	4904      	ldr	r1, [pc, #16]	; (800da44 <_Z10StringFroml+0x20>)
 800da34:	4618      	mov	r0, r3
 800da36:	f000 fa23 	bl	800de80 <_Z16StringFromFormatPKcz>
}
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	3708      	adds	r7, #8
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}
 800da42:	bf00      	nop
 800da44:	08024558 	.word	0x08024558

0800da48 <_Z10StringFromPKv>:

SimpleString StringFrom(const void* value)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b086      	sub	sp, #24
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800da52:	f107 0308 	add.w	r3, r7, #8
 800da56:	4910      	ldr	r1, [pc, #64]	; (800da98 <_Z10StringFromPKv+0x50>)
 800da58:	4618      	mov	r0, r3
 800da5a:	f7ff f952 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800da5e:	f107 0310 	add.w	r3, r7, #16
 800da62:	6839      	ldr	r1, [r7, #0]
 800da64:	4618      	mov	r0, r3
 800da66:	f000 f9a1 	bl	800ddac <_Z13HexStringFromPKv>
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f107 0210 	add.w	r2, r7, #16
 800da70:	f107 0108 	add.w	r1, r7, #8
 800da74:	4618      	mov	r0, r3
 800da76:	f7ff fd5e 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 800da7a:	f107 0310 	add.w	r3, r7, #16
 800da7e:	4618      	mov	r0, r3
 800da80:	f7ff fcf7 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800da84:	f107 0308 	add.w	r3, r7, #8
 800da88:	4618      	mov	r0, r3
 800da8a:	f7ff fcf2 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800da8e:	bf00      	nop
}
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	3718      	adds	r7, #24
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}
 800da98:	0802455c 	.word	0x0802455c

0800da9c <_Z10StringFromPFvvE>:

SimpleString StringFrom(void (*value)())
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b086      	sub	sp, #24
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
 800daa4:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800daa6:	f107 0308 	add.w	r3, r7, #8
 800daaa:	4910      	ldr	r1, [pc, #64]	; (800daec <_Z10StringFromPFvvE+0x50>)
 800daac:	4618      	mov	r0, r3
 800daae:	f7ff f928 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800dab2:	f107 0310 	add.w	r3, r7, #16
 800dab6:	6839      	ldr	r1, [r7, #0]
 800dab8:	4618      	mov	r0, r3
 800daba:	f000 f98b 	bl	800ddd4 <_Z13HexStringFromPFvvE>
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f107 0210 	add.w	r2, r7, #16
 800dac4:	f107 0108 	add.w	r1, r7, #8
 800dac8:	4618      	mov	r0, r3
 800daca:	f7ff fd34 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 800dace:	f107 0310 	add.w	r3, r7, #16
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7ff fccd 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800dad8:	f107 0308 	add.w	r3, r7, #8
 800dadc:	4618      	mov	r0, r3
 800dade:	f7ff fcc8 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800dae2:	bf00      	nop
}
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	3718      	adds	r7, #24
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}
 800daec:	0802455c 	.word	0x0802455c

0800daf0 <_Z13HexStringFroml>:

SimpleString HexStringFrom(long value)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b082      	sub	sp, #8
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	683a      	ldr	r2, [r7, #0]
 800dafe:	4904      	ldr	r1, [pc, #16]	; (800db10 <_Z13HexStringFroml+0x20>)
 800db00:	4618      	mov	r0, r3
 800db02:	f000 f9bd 	bl	800de80 <_Z16StringFromFormatPKcz>
}
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	3708      	adds	r7, #8
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}
 800db0e:	bf00      	nop
 800db10:	08024560 	.word	0x08024560

0800db14 <_Z13HexStringFromi>:

SimpleString HexStringFrom(int value)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b082      	sub	sp, #8
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	683a      	ldr	r2, [r7, #0]
 800db22:	4904      	ldr	r1, [pc, #16]	; (800db34 <_Z13HexStringFromi+0x20>)
 800db24:	4618      	mov	r0, r3
 800db26:	f000 f9ab 	bl	800de80 <_Z16StringFromFormatPKcz>
}
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	3708      	adds	r7, #8
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}
 800db32:	bf00      	nop
 800db34:	08024564 	.word	0x08024564

0800db38 <_Z13HexStringFroma>:

SimpleString HexStringFrom(signed char value)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b086      	sub	sp, #24
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	460b      	mov	r3, r1
 800db42:	70fb      	strb	r3, [r7, #3]
    SimpleString result = StringFromFormat("%x", value);
 800db44:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	4912      	ldr	r1, [pc, #72]	; (800db94 <_Z13HexStringFroma+0x5c>)
 800db4c:	4618      	mov	r0, r3
 800db4e:	f000 f997 	bl	800de80 <_Z16StringFromFormatPKcz>
    if(value < 0) {
 800db52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800db56:	2b00      	cmp	r3, #0
 800db58:	da16      	bge.n	800db88 <_Z13HexStringFroma+0x50>
        size_t size = result.size();
 800db5a:	6878      	ldr	r0, [r7, #4]
 800db5c:	f7ff fc68 	bl	800d430 <_ZNK12SimpleString4sizeEv>
 800db60:	6178      	str	r0, [r7, #20]
        result = result.subString(size-(CPPUTEST_CHAR_BIT/4));
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	1e9a      	subs	r2, r3, #2
 800db66:	f107 030c 	add.w	r3, r7, #12
 800db6a:	6879      	ldr	r1, [r7, #4]
 800db6c:	4618      	mov	r0, r3
 800db6e:	f7ff fdd3 	bl	800d718 <_ZNK12SimpleString9subStringEj>
 800db72:	f107 030c 	add.w	r3, r7, #12
 800db76:	4619      	mov	r1, r3
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f7ff f92e 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 800db7e:	f107 030c 	add.w	r3, r7, #12
 800db82:	4618      	mov	r0, r3
 800db84:	f7ff fc75 	bl	800d472 <_ZN12SimpleStringD1Ev>
    }
    return result;
 800db88:	bf00      	nop
}
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	3718      	adds	r7, #24
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}
 800db92:	bf00      	nop
 800db94:	08024564 	.word	0x08024564

0800db98 <_Z13HexStringFromm>:

SimpleString HexStringFrom(unsigned long value)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b082      	sub	sp, #8
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
 800dba0:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	683a      	ldr	r2, [r7, #0]
 800dba6:	4904      	ldr	r1, [pc, #16]	; (800dbb8 <_Z13HexStringFromm+0x20>)
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f000 f969 	bl	800de80 <_Z16StringFromFormatPKcz>
}
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	3708      	adds	r7, #8
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	08024560 	.word	0x08024560

0800dbbc <_Z13HexStringFromj>:

SimpleString HexStringFrom(unsigned int value)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b082      	sub	sp, #8
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
 800dbc4:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	683a      	ldr	r2, [r7, #0]
 800dbca:	4904      	ldr	r1, [pc, #16]	; (800dbdc <_Z13HexStringFromj+0x20>)
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f000 f957 	bl	800de80 <_Z16StringFromFormatPKcz>
}
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	3708      	adds	r7, #8
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}
 800dbda:	bf00      	nop
 800dbdc:	08024564 	.word	0x08024564

0800dbe0 <_Z30BracketsFormattedHexStringFromi>:

SimpleString BracketsFormattedHexStringFrom(int value)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b084      	sub	sp, #16
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
 800dbe8:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800dbea:	f107 0308 	add.w	r3, r7, #8
 800dbee:	6839      	ldr	r1, [r7, #0]
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f7ff ff8f 	bl	800db14 <_Z13HexStringFromi>
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f107 0208 	add.w	r2, r7, #8
 800dbfc:	4611      	mov	r1, r2
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f000 f87e 	bl	800dd00 <_Z26BracketsFormattedHexString12SimpleString>
 800dc04:	f107 0308 	add.w	r3, r7, #8
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f7ff fc32 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800dc0e:	bf00      	nop
}
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	3710      	adds	r7, #16
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}

0800dc18 <_Z30BracketsFormattedHexStringFromj>:

SimpleString BracketsFormattedHexStringFrom(unsigned int value)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b084      	sub	sp, #16
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
 800dc20:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800dc22:	f107 0308 	add.w	r3, r7, #8
 800dc26:	6839      	ldr	r1, [r7, #0]
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f7ff ffc7 	bl	800dbbc <_Z13HexStringFromj>
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f107 0208 	add.w	r2, r7, #8
 800dc34:	4611      	mov	r1, r2
 800dc36:	4618      	mov	r0, r3
 800dc38:	f000 f862 	bl	800dd00 <_Z26BracketsFormattedHexString12SimpleString>
 800dc3c:	f107 0308 	add.w	r3, r7, #8
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7ff fc16 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800dc46:	bf00      	nop
}
 800dc48:	6878      	ldr	r0, [r7, #4]
 800dc4a:	3710      	adds	r7, #16
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}

0800dc50 <_Z30BracketsFormattedHexStringFroml>:

SimpleString BracketsFormattedHexStringFrom(long value)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b084      	sub	sp, #16
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
 800dc58:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800dc5a:	f107 0308 	add.w	r3, r7, #8
 800dc5e:	6839      	ldr	r1, [r7, #0]
 800dc60:	4618      	mov	r0, r3
 800dc62:	f7ff ff45 	bl	800daf0 <_Z13HexStringFroml>
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	f107 0208 	add.w	r2, r7, #8
 800dc6c:	4611      	mov	r1, r2
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f000 f846 	bl	800dd00 <_Z26BracketsFormattedHexString12SimpleString>
 800dc74:	f107 0308 	add.w	r3, r7, #8
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f7ff fbfa 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800dc7e:	bf00      	nop
}
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	3710      	adds	r7, #16
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <_Z30BracketsFormattedHexStringFromm>:


SimpleString BracketsFormattedHexStringFrom(unsigned long value)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b084      	sub	sp, #16
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800dc92:	f107 0308 	add.w	r3, r7, #8
 800dc96:	6839      	ldr	r1, [r7, #0]
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f7ff ff7d 	bl	800db98 <_Z13HexStringFromm>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f107 0208 	add.w	r2, r7, #8
 800dca4:	4611      	mov	r1, r2
 800dca6:	4618      	mov	r0, r3
 800dca8:	f000 f82a 	bl	800dd00 <_Z26BracketsFormattedHexString12SimpleString>
 800dcac:	f107 0308 	add.w	r3, r7, #8
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	f7ff fbde 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800dcb6:	bf00      	nop
}
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	3710      	adds	r7, #16
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}

0800dcc0 <_Z30BracketsFormattedHexStringFroma>:

SimpleString BracketsFormattedHexStringFrom(signed char value)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b084      	sub	sp, #16
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
 800dcc8:	460b      	mov	r3, r1
 800dcca:	70fb      	strb	r3, [r7, #3]
    return BracketsFormattedHexString(HexStringFrom(value));
 800dccc:	f107 0308 	add.w	r3, r7, #8
 800dcd0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800dcd4:	4611      	mov	r1, r2
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7ff ff2e 	bl	800db38 <_Z13HexStringFroma>
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f107 0208 	add.w	r2, r7, #8
 800dce2:	4611      	mov	r1, r2
 800dce4:	4618      	mov	r0, r3
 800dce6:	f000 f80b 	bl	800dd00 <_Z26BracketsFormattedHexString12SimpleString>
 800dcea:	f107 0308 	add.w	r3, r7, #8
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f7ff fbbf 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800dcf4:	bf00      	nop
}
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	3710      	adds	r7, #16
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}
	...

0800dd00 <_Z26BracketsFormattedHexString12SimpleString>:

SimpleString BracketsFormattedHexString(SimpleString hexString)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b088      	sub	sp, #32
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
 800dd08:	6039      	str	r1, [r7, #0]
    return SimpleString("(0x") + hexString + ")" ;
 800dd0a:	f107 0310 	add.w	r3, r7, #16
 800dd0e:	4917      	ldr	r1, [pc, #92]	; (800dd6c <_Z26BracketsFormattedHexString12SimpleString+0x6c>)
 800dd10:	4618      	mov	r0, r3
 800dd12:	f7fe fff6 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800dd16:	f107 0308 	add.w	r3, r7, #8
 800dd1a:	f107 0110 	add.w	r1, r7, #16
 800dd1e:	683a      	ldr	r2, [r7, #0]
 800dd20:	4618      	mov	r0, r3
 800dd22:	f7ff fc08 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 800dd26:	f107 0318 	add.w	r3, r7, #24
 800dd2a:	4911      	ldr	r1, [pc, #68]	; (800dd70 <_Z26BracketsFormattedHexString12SimpleString+0x70>)
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f7fe ffe8 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f107 0218 	add.w	r2, r7, #24
 800dd38:	f107 0108 	add.w	r1, r7, #8
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f7ff fbfa 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 800dd42:	f107 0318 	add.w	r3, r7, #24
 800dd46:	4618      	mov	r0, r3
 800dd48:	f7ff fb93 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800dd4c:	f107 0308 	add.w	r3, r7, #8
 800dd50:	4618      	mov	r0, r3
 800dd52:	f7ff fb8e 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800dd56:	f107 0310 	add.w	r3, r7, #16
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f7ff fb89 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800dd60:	bf00      	nop
}
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	3720      	adds	r7, #32
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
 800dd6a:	bf00      	nop
 800dd6c:	08024568 	.word	0x08024568
 800dd70:	0802456c 	.word	0x0802456c

0800dd74 <_ZL25convertPointerToLongValuePKv>:
}

#else   /* CPPUTEST_USE_LONG_LONG */

static long convertPointerToLongValue(const void* value)
{
 800dd74:	b480      	push	{r7}
 800dd76:	b085      	sub	sp, #20
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800dd7c:	1d3b      	adds	r3, r7, #4
 800dd7e:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	681b      	ldr	r3, [r3, #0]
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	3714      	adds	r7, #20
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8e:	4770      	bx	lr

0800dd90 <_ZL33convertFunctionPointerToLongValuePFvvE>:

static long convertFunctionPointerToLongValue(void (*value)())
{
 800dd90:	b480      	push	{r7}
 800dd92:	b085      	sub	sp, #20
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800dd98:	1d3b      	adds	r3, r7, #4
 800dd9a:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	681b      	ldr	r3, [r3, #0]
}
 800dda0:	4618      	mov	r0, r3
 800dda2:	3714      	adds	r7, #20
 800dda4:	46bd      	mov	sp, r7
 800dda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddaa:	4770      	bx	lr

0800ddac <_Z13HexStringFromPKv>:
{
    return "<ulonglong_unsupported>";
}

SimpleString HexStringFrom(const void* value)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b082      	sub	sp, #8
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertPointerToLongValue(value));
 800ddb6:	6838      	ldr	r0, [r7, #0]
 800ddb8:	f7ff ffdc 	bl	800dd74 <_ZL25convertPointerToLongValuePKv>
 800ddbc:	4602      	mov	r2, r0
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	4903      	ldr	r1, [pc, #12]	; (800ddd0 <_Z13HexStringFromPKv+0x24>)
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f000 f85c 	bl	800de80 <_Z16StringFromFormatPKcz>
}
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	3708      	adds	r7, #8
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}
 800ddd0:	08024560 	.word	0x08024560

0800ddd4 <_Z13HexStringFromPFvvE>:

SimpleString HexStringFrom(void (*value)())
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b082      	sub	sp, #8
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
 800dddc:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertFunctionPointerToLongValue(value));
 800ddde:	6838      	ldr	r0, [r7, #0]
 800dde0:	f7ff ffd6 	bl	800dd90 <_ZL33convertFunctionPointerToLongValuePFvvE>
 800dde4:	4602      	mov	r2, r0
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	4903      	ldr	r1, [pc, #12]	; (800ddf8 <_Z13HexStringFromPFvvE+0x24>)
 800ddea:	4618      	mov	r0, r3
 800ddec:	f000 f848 	bl	800de80 <_Z16StringFromFormatPKcz>
}
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	3708      	adds	r7, #8
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}
 800ddf8:	08024560 	.word	0x08024560

0800ddfc <_Z10StringFromdi>:
}

#endif  /* CPPUTEST_USE_LONG_LONG */

SimpleString StringFrom(double value, int precision)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b086      	sub	sp, #24
 800de00:	af02      	add	r7, sp, #8
 800de02:	60f8      	str	r0, [r7, #12]
 800de04:	ed87 0b00 	vstr	d0, [r7]
 800de08:	60b9      	str	r1, [r7, #8]
    if (PlatformSpecificIsNan(value))
 800de0a:	4b18      	ldr	r3, [pc, #96]	; (800de6c <_Z10StringFromdi+0x70>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	ed97 0b00 	vldr	d0, [r7]
 800de12:	4798      	blx	r3
 800de14:	4603      	mov	r3, r0
 800de16:	2b00      	cmp	r3, #0
 800de18:	bf14      	ite	ne
 800de1a:	2301      	movne	r3, #1
 800de1c:	2300      	moveq	r3, #0
 800de1e:	b2db      	uxtb	r3, r3
 800de20:	2b00      	cmp	r3, #0
 800de22:	d004      	beq.n	800de2e <_Z10StringFromdi+0x32>
        return "Nan - Not a number";
 800de24:	4912      	ldr	r1, [pc, #72]	; (800de70 <_Z10StringFromdi+0x74>)
 800de26:	68f8      	ldr	r0, [r7, #12]
 800de28:	f7fe ff6b 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800de2c:	e01a      	b.n	800de64 <_Z10StringFromdi+0x68>
    else if (PlatformSpecificIsInf(value))
 800de2e:	4b11      	ldr	r3, [pc, #68]	; (800de74 <_Z10StringFromdi+0x78>)
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	ed97 0b00 	vldr	d0, [r7]
 800de36:	4798      	blx	r3
 800de38:	4603      	mov	r3, r0
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	bf14      	ite	ne
 800de3e:	2301      	movne	r3, #1
 800de40:	2300      	moveq	r3, #0
 800de42:	b2db      	uxtb	r3, r3
 800de44:	2b00      	cmp	r3, #0
 800de46:	d004      	beq.n	800de52 <_Z10StringFromdi+0x56>
        return "Inf - Infinity";
 800de48:	490b      	ldr	r1, [pc, #44]	; (800de78 <_Z10StringFromdi+0x7c>)
 800de4a:	68f8      	ldr	r0, [r7, #12]
 800de4c:	f7fe ff59 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800de50:	e008      	b.n	800de64 <_Z10StringFromdi+0x68>
    else
        return StringFromFormat("%.*g", precision, value);
 800de52:	68f8      	ldr	r0, [r7, #12]
 800de54:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de58:	e9cd 2300 	strd	r2, r3, [sp]
 800de5c:	68ba      	ldr	r2, [r7, #8]
 800de5e:	4907      	ldr	r1, [pc, #28]	; (800de7c <_Z10StringFromdi+0x80>)
 800de60:	f000 f80e 	bl	800de80 <_Z16StringFromFormatPKcz>
}
 800de64:	68f8      	ldr	r0, [r7, #12]
 800de66:	3710      	adds	r7, #16
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}
 800de6c:	200000e8 	.word	0x200000e8
 800de70:	080245a0 	.word	0x080245a0
 800de74:	200000ec 	.word	0x200000ec
 800de78:	080245b4 	.word	0x080245b4
 800de7c:	080245c4 	.word	0x080245c4

0800de80 <_Z16StringFromFormatPKcz>:
{
    return SimpleString(value);
}

SimpleString StringFromFormat(const char* format, ...)
{
 800de80:	b40e      	push	{r1, r2, r3}
 800de82:	b580      	push	{r7, lr}
 800de84:	b087      	sub	sp, #28
 800de86:	af00      	add	r7, sp, #0
 800de88:	6078      	str	r0, [r7, #4]
    SimpleString resultString;
 800de8a:	4910      	ldr	r1, [pc, #64]	; (800decc <_Z16StringFromFormatPKcz+0x4c>)
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f7fe ff38 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
    va_list arguments;
    va_start(arguments, format);
 800de92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800de96:	60fb      	str	r3, [r7, #12]

    resultString = VStringFromFormat(format, arguments);
 800de98:	f107 0310 	add.w	r3, r7, #16
 800de9c:	68fa      	ldr	r2, [r7, #12]
 800de9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dea0:	4618      	mov	r0, r3
 800dea2:	f000 f839 	bl	800df18 <_Z17VStringFromFormatPKcSt9__va_list>
 800dea6:	f107 0310 	add.w	r3, r7, #16
 800deaa:	4619      	mov	r1, r3
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	f7fe ff94 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 800deb2:	f107 0310 	add.w	r3, r7, #16
 800deb6:	4618      	mov	r0, r3
 800deb8:	f7ff fadb 	bl	800d472 <_ZN12SimpleStringD1Ev>
    va_end(arguments);
    return resultString;
 800debc:	bf00      	nop
}
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	371c      	adds	r7, #28
 800dec2:	46bd      	mov	sp, r7
 800dec4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dec8:	b003      	add	sp, #12
 800deca:	4770      	bx	lr
 800decc:	0802452c 	.word	0x0802452c

0800ded0 <_Z10StringFromj>:

SimpleString StringFrom(unsigned int i)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b082      	sub	sp, #8
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
 800ded8:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%u", i);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	683a      	ldr	r2, [r7, #0]
 800dede:	4904      	ldr	r1, [pc, #16]	; (800def0 <_Z10StringFromj+0x20>)
 800dee0:	4618      	mov	r0, r3
 800dee2:	f7ff ffcd 	bl	800de80 <_Z16StringFromFormatPKcz>
}
 800dee6:	6878      	ldr	r0, [r7, #4]
 800dee8:	3708      	adds	r7, #8
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}
 800deee:	bf00      	nop
 800def0:	080245d0 	.word	0x080245d0

0800def4 <_Z10StringFromm>:
}

#endif

SimpleString StringFrom(unsigned long i)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b082      	sub	sp, #8
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
 800defc:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lu", i);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	683a      	ldr	r2, [r7, #0]
 800df02:	4904      	ldr	r1, [pc, #16]	; (800df14 <_Z10StringFromm+0x20>)
 800df04:	4618      	mov	r0, r3
 800df06:	f7ff ffbb 	bl	800de80 <_Z16StringFromFormatPKcz>
}
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	3708      	adds	r7, #8
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}
 800df12:	bf00      	nop
 800df14:	080245d4 	.word	0x080245d4

0800df18 <_Z17VStringFromFormatPKcSt9__va_list>:

SimpleString VStringFromFormat(const char* format, va_list args)
{
 800df18:	b590      	push	{r4, r7, lr}
 800df1a:	b0a7      	sub	sp, #156	; 0x9c
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	60f8      	str	r0, [r7, #12]
 800df20:	60b9      	str	r1, [r7, #8]
 800df22:	607a      	str	r2, [r7, #4]
    va_list argsCopy;
    va_copy(argsCopy, args);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	67bb      	str	r3, [r7, #120]	; 0x78
    enum
    {
        sizeOfdefaultBuffer = 100
    };
    char defaultBuffer[sizeOfdefaultBuffer];
    SimpleString resultString;
 800df28:	492e      	ldr	r1, [pc, #184]	; (800dfe4 <_Z17VStringFromFormatPKcSt9__va_list+0xcc>)
 800df2a:	68f8      	ldr	r0, [r7, #12]
 800df2c:	f7fe fee9 	bl	800cd02 <_ZN12SimpleStringC1EPKc>

    size_t size = (size_t)PlatformSpecificVSNprintf(defaultBuffer, sizeOfdefaultBuffer, format, args);
 800df30:	4b2d      	ldr	r3, [pc, #180]	; (800dfe8 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800df32:	681c      	ldr	r4, [r3, #0]
 800df34:	f107 0014 	add.w	r0, r7, #20
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	68ba      	ldr	r2, [r7, #8]
 800df3c:	2164      	movs	r1, #100	; 0x64
 800df3e:	47a0      	blx	r4
 800df40:	4603      	mov	r3, r0
 800df42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (size < sizeOfdefaultBuffer) {
 800df46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800df4a:	2b63      	cmp	r3, #99	; 0x63
 800df4c:	d813      	bhi.n	800df76 <_Z17VStringFromFormatPKcSt9__va_list+0x5e>
        resultString = SimpleString(defaultBuffer);
 800df4e:	f107 0214 	add.w	r2, r7, #20
 800df52:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800df56:	4611      	mov	r1, r2
 800df58:	4618      	mov	r0, r3
 800df5a:	f7fe fed2 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800df5e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800df62:	4619      	mov	r1, r3
 800df64:	68f8      	ldr	r0, [r7, #12]
 800df66:	f7fe ff38 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 800df6a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800df6e:	4618      	mov	r0, r3
 800df70:	f7ff fa7f 	bl	800d472 <_ZN12SimpleStringD1Ev>
        resultString = SimpleString(newBuffer);

        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
    }
    va_end(argsCopy);
    return resultString;
 800df74:	e031      	b.n	800dfda <_Z17VStringFromFormatPKcSt9__va_list+0xc2>
        size_t newBufferSize = size + 1;
 800df76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800df7a:	3301      	adds	r3, #1
 800df7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        char* newBuffer = SimpleString::allocStringBuffer(newBufferSize, __FILE__, __LINE__);
 800df80:	f240 32c3 	movw	r2, #963	; 0x3c3
 800df84:	4919      	ldr	r1, [pc, #100]	; (800dfec <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800df86:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800df8a:	f7fe fc3f 	bl	800c80c <_ZN12SimpleString17allocStringBufferEjPKcj>
 800df8e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        PlatformSpecificVSNprintf(newBuffer, newBufferSize, format, argsCopy);
 800df92:	4b15      	ldr	r3, [pc, #84]	; (800dfe8 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800df94:	681c      	ldr	r4, [r3, #0]
 800df96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800df98:	68ba      	ldr	r2, [r7, #8]
 800df9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800df9e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800dfa2:	47a0      	blx	r4
        resultString = SimpleString(newBuffer);
 800dfa4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800dfa8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800dfac:	4618      	mov	r0, r3
 800dfae:	f7fe fea8 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800dfb2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800dfb6:	4619      	mov	r1, r3
 800dfb8:	68f8      	ldr	r0, [r7, #12]
 800dfba:	f7fe ff0e 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 800dfbe:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f7ff fa55 	bl	800d472 <_ZN12SimpleStringD1Ev>
        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
 800dfc8:	f240 33c7 	movw	r3, #967	; 0x3c7
 800dfcc:	4a07      	ldr	r2, [pc, #28]	; (800dfec <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800dfce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800dfd2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800dfd6:	f7fe fc2d 	bl	800c834 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
    return resultString;
 800dfda:	bf00      	nop
}
 800dfdc:	68f8      	ldr	r0, [r7, #12]
 800dfde:	379c      	adds	r7, #156	; 0x9c
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd90      	pop	{r4, r7, pc}
 800dfe4:	0802452c 	.word	0x0802452c
 800dfe8:	200000b0 	.word	0x200000b0
 800dfec:	0802446c 	.word	0x0802446c

0800dff0 <_Z16StringFromBinaryPKhj>:

SimpleString StringFromBinary(const unsigned char* value, size_t size)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b08a      	sub	sp, #40	; 0x28
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	60f8      	str	r0, [r7, #12]
 800dff8:	60b9      	str	r1, [r7, #8]
 800dffa:	607a      	str	r2, [r7, #4]
    SimpleString result;
 800dffc:	491f      	ldr	r1, [pc, #124]	; (800e07c <_Z16StringFromBinaryPKhj+0x8c>)
 800dffe:	68f8      	ldr	r0, [r7, #12]
 800e000:	f7fe fe7f 	bl	800cd02 <_ZN12SimpleStringC1EPKc>

    for (size_t i = 0; i < size; i++) {
 800e004:	2300      	movs	r3, #0
 800e006:	627b      	str	r3, [r7, #36]	; 0x24
 800e008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d219      	bcs.n	800e044 <_Z16StringFromBinaryPKhj+0x54>
        result += StringFromFormat("%02X ", value[i]);
 800e010:	68ba      	ldr	r2, [r7, #8]
 800e012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e014:	4413      	add	r3, r2
 800e016:	781b      	ldrb	r3, [r3, #0]
 800e018:	461a      	mov	r2, r3
 800e01a:	f107 0314 	add.w	r3, r7, #20
 800e01e:	4918      	ldr	r1, [pc, #96]	; (800e080 <_Z16StringFromBinaryPKhj+0x90>)
 800e020:	4618      	mov	r0, r3
 800e022:	f7ff ff2d 	bl	800de80 <_Z16StringFromFormatPKcz>
 800e026:	f107 0314 	add.w	r3, r7, #20
 800e02a:	4619      	mov	r1, r3
 800e02c:	68f8      	ldr	r0, [r7, #12]
 800e02e:	f7ff fa9d 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 800e032:	f107 0314 	add.w	r3, r7, #20
 800e036:	4618      	mov	r0, r3
 800e038:	f7ff fa1b 	bl	800d472 <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < size; i++) {
 800e03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e03e:	3301      	adds	r3, #1
 800e040:	627b      	str	r3, [r7, #36]	; 0x24
 800e042:	e7e1      	b.n	800e008 <_Z16StringFromBinaryPKhj+0x18>
    }
    result = result.subString(0, result.size() - 1);
 800e044:	68f8      	ldr	r0, [r7, #12]
 800e046:	f7ff f9f3 	bl	800d430 <_ZNK12SimpleString4sizeEv>
 800e04a:	4603      	mov	r3, r0
 800e04c:	3b01      	subs	r3, #1
 800e04e:	f107 001c 	add.w	r0, r7, #28
 800e052:	2200      	movs	r2, #0
 800e054:	68f9      	ldr	r1, [r7, #12]
 800e056:	f7ff fb15 	bl	800d684 <_ZNK12SimpleString9subStringEjj>
 800e05a:	f107 031c 	add.w	r3, r7, #28
 800e05e:	4619      	mov	r1, r3
 800e060:	68f8      	ldr	r0, [r7, #12]
 800e062:	f7fe feba 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 800e066:	f107 031c 	add.w	r3, r7, #28
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7ff fa01 	bl	800d472 <_ZN12SimpleStringD1Ev>

    return result;
 800e070:	bf00      	nop
}
 800e072:	68f8      	ldr	r0, [r7, #12]
 800e074:	3728      	adds	r7, #40	; 0x28
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}
 800e07a:	bf00      	nop
 800e07c:	0802452c 	.word	0x0802452c
 800e080:	080245d8 	.word	0x080245d8

0800e084 <_Z22StringFromBinaryOrNullPKhj>:

SimpleString StringFromBinaryOrNull(const unsigned char* value, size_t size)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b084      	sub	sp, #16
 800e088:	af00      	add	r7, sp, #0
 800e08a:	60f8      	str	r0, [r7, #12]
 800e08c:	60b9      	str	r1, [r7, #8]
 800e08e:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinary(value, size) : StringFrom("(null)");
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d006      	beq.n	800e0a4 <_Z22StringFromBinaryOrNullPKhj+0x20>
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	687a      	ldr	r2, [r7, #4]
 800e09a:	68b9      	ldr	r1, [r7, #8]
 800e09c:	4618      	mov	r0, r3
 800e09e:	f7ff ffa7 	bl	800dff0 <_Z16StringFromBinaryPKhj>
 800e0a2:	e004      	b.n	800e0ae <_Z22StringFromBinaryOrNullPKhj+0x2a>
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	4904      	ldr	r1, [pc, #16]	; (800e0b8 <_Z22StringFromBinaryOrNullPKhj+0x34>)
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f7ff fc6f 	bl	800d98c <_Z10StringFromPKc>
}
 800e0ae:	68f8      	ldr	r0, [r7, #12]
 800e0b0:	3710      	adds	r7, #16
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}
 800e0b6:	bf00      	nop
 800e0b8:	0802454c 	.word	0x0802454c

0800e0bc <_Z24StringFromBinaryWithSizePKhj>:

SimpleString StringFromBinaryWithSize(const unsigned char* value, size_t size)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b088      	sub	sp, #32
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	60f8      	str	r0, [r7, #12]
 800e0c4:	60b9      	str	r1, [r7, #8]
 800e0c6:	607a      	str	r2, [r7, #4]
    SimpleString result = StringFromFormat("Size = %u | HexContents = ", (unsigned) size);
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	687a      	ldr	r2, [r7, #4]
 800e0cc:	4913      	ldr	r1, [pc, #76]	; (800e11c <_Z24StringFromBinaryWithSizePKhj+0x60>)
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f7ff fed6 	bl	800de80 <_Z16StringFromFormatPKcz>
    size_t displayedSize = ((size > 128) ? 128 : size);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2b80      	cmp	r3, #128	; 0x80
 800e0d8:	bf28      	it	cs
 800e0da:	2380      	movcs	r3, #128	; 0x80
 800e0dc:	61fb      	str	r3, [r7, #28]
    result += StringFromBinaryOrNull(value, displayedSize);
 800e0de:	f107 0314 	add.w	r3, r7, #20
 800e0e2:	69fa      	ldr	r2, [r7, #28]
 800e0e4:	68b9      	ldr	r1, [r7, #8]
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f7ff ffcc 	bl	800e084 <_Z22StringFromBinaryOrNullPKhj>
 800e0ec:	f107 0314 	add.w	r3, r7, #20
 800e0f0:	4619      	mov	r1, r3
 800e0f2:	68f8      	ldr	r0, [r7, #12]
 800e0f4:	f7ff fa3a 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 800e0f8:	f107 0314 	add.w	r3, r7, #20
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f7ff f9b8 	bl	800d472 <_ZN12SimpleStringD1Ev>
    if (size > displayedSize)
 800e102:	687a      	ldr	r2, [r7, #4]
 800e104:	69fb      	ldr	r3, [r7, #28]
 800e106:	429a      	cmp	r2, r3
 800e108:	d903      	bls.n	800e112 <_Z24StringFromBinaryWithSizePKhj+0x56>
    {
        result += " ...";
 800e10a:	4905      	ldr	r1, [pc, #20]	; (800e120 <_Z24StringFromBinaryWithSizePKhj+0x64>)
 800e10c:	68f8      	ldr	r0, [r7, #12]
 800e10e:	f7ff fa3f 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    }
    return result;
 800e112:	bf00      	nop
}
 800e114:	68f8      	ldr	r0, [r7, #12]
 800e116:	3720      	adds	r7, #32
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}
 800e11c:	080245e0 	.word	0x080245e0
 800e120:	080245fc 	.word	0x080245fc

0800e124 <_Z30StringFromBinaryWithSizeOrNullPKhj>:

SimpleString StringFromBinaryWithSizeOrNull(const unsigned char* value, size_t size)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b084      	sub	sp, #16
 800e128:	af00      	add	r7, sp, #0
 800e12a:	60f8      	str	r0, [r7, #12]
 800e12c:	60b9      	str	r1, [r7, #8]
 800e12e:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinaryWithSize(value, size) : StringFrom("(null)");
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d006      	beq.n	800e144 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x20>
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	687a      	ldr	r2, [r7, #4]
 800e13a:	68b9      	ldr	r1, [r7, #8]
 800e13c:	4618      	mov	r0, r3
 800e13e:	f7ff ffbd 	bl	800e0bc <_Z24StringFromBinaryWithSizePKhj>
 800e142:	e004      	b.n	800e14e <_Z30StringFromBinaryWithSizeOrNullPKhj+0x2a>
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	4904      	ldr	r1, [pc, #16]	; (800e158 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x34>)
 800e148:	4618      	mov	r0, r3
 800e14a:	f7ff fc1f 	bl	800d98c <_Z10StringFromPKc>
}
 800e14e:	68f8      	ldr	r0, [r7, #12]
 800e150:	3710      	adds	r7, #16
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	0802454c 	.word	0x0802454c

0800e15c <_Z20StringFromMaskedBitsmmj>:

SimpleString StringFromMaskedBits(unsigned long value, unsigned long mask, size_t byteCount)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b088      	sub	sp, #32
 800e160:	af00      	add	r7, sp, #0
 800e162:	60f8      	str	r0, [r7, #12]
 800e164:	60b9      	str	r1, [r7, #8]
 800e166:	607a      	str	r2, [r7, #4]
 800e168:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800e16a:	4925      	ldr	r1, [pc, #148]	; (800e200 <_Z20StringFromMaskedBitsmmj+0xa4>)
 800e16c:	68f8      	ldr	r0, [r7, #12]
 800e16e:	f7fe fdc8 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
    size_t bitCount = (byteCount > sizeof(unsigned long)) ? (sizeof(unsigned long) * CPPUTEST_CHAR_BIT) : (byteCount * CPPUTEST_CHAR_BIT);
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	2b04      	cmp	r3, #4
 800e176:	d802      	bhi.n	800e17e <_Z20StringFromMaskedBitsmmj+0x22>
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	00db      	lsls	r3, r3, #3
 800e17c:	e000      	b.n	800e180 <_Z20StringFromMaskedBitsmmj+0x24>
 800e17e:	2320      	movs	r3, #32
 800e180:	61bb      	str	r3, [r7, #24]
    const unsigned long msbMask = (((unsigned long) 1) << (bitCount - 1));
 800e182:	69bb      	ldr	r3, [r7, #24]
 800e184:	3b01      	subs	r3, #1
 800e186:	2201      	movs	r2, #1
 800e188:	fa02 f303 	lsl.w	r3, r2, r3
 800e18c:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < bitCount; i++) {
 800e18e:	2300      	movs	r3, #0
 800e190:	61fb      	str	r3, [r7, #28]
 800e192:	69fa      	ldr	r2, [r7, #28]
 800e194:	69bb      	ldr	r3, [r7, #24]
 800e196:	429a      	cmp	r2, r3
 800e198:	d22d      	bcs.n	800e1f6 <_Z20StringFromMaskedBitsmmj+0x9a>
        if (mask & msbMask) {
 800e19a:	687a      	ldr	r2, [r7, #4]
 800e19c:	697b      	ldr	r3, [r7, #20]
 800e19e:	4013      	ands	r3, r2
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d00c      	beq.n	800e1be <_Z20StringFromMaskedBitsmmj+0x62>
            result += (value & msbMask) ? "1" : "0";
 800e1a4:	68ba      	ldr	r2, [r7, #8]
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	4013      	ands	r3, r2
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d001      	beq.n	800e1b2 <_Z20StringFromMaskedBitsmmj+0x56>
 800e1ae:	4b15      	ldr	r3, [pc, #84]	; (800e204 <_Z20StringFromMaskedBitsmmj+0xa8>)
 800e1b0:	e000      	b.n	800e1b4 <_Z20StringFromMaskedBitsmmj+0x58>
 800e1b2:	4b15      	ldr	r3, [pc, #84]	; (800e208 <_Z20StringFromMaskedBitsmmj+0xac>)
 800e1b4:	4619      	mov	r1, r3
 800e1b6:	68f8      	ldr	r0, [r7, #12]
 800e1b8:	f7ff f9ea 	bl	800d590 <_ZN12SimpleStringpLEPKc>
 800e1bc:	e003      	b.n	800e1c6 <_Z20StringFromMaskedBitsmmj+0x6a>
        }
        else {
            result += "x";
 800e1be:	4913      	ldr	r1, [pc, #76]	; (800e20c <_Z20StringFromMaskedBitsmmj+0xb0>)
 800e1c0:	68f8      	ldr	r0, [r7, #12]
 800e1c2:	f7ff f9e5 	bl	800d590 <_ZN12SimpleStringpLEPKc>
        }

        if (((i % 8) == 7) && (i != (bitCount - 1))) {
 800e1c6:	69fb      	ldr	r3, [r7, #28]
 800e1c8:	f003 0307 	and.w	r3, r3, #7
 800e1cc:	2b07      	cmp	r3, #7
 800e1ce:	d108      	bne.n	800e1e2 <_Z20StringFromMaskedBitsmmj+0x86>
 800e1d0:	69bb      	ldr	r3, [r7, #24]
 800e1d2:	3b01      	subs	r3, #1
 800e1d4:	69fa      	ldr	r2, [r7, #28]
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	d003      	beq.n	800e1e2 <_Z20StringFromMaskedBitsmmj+0x86>
            result += " ";
 800e1da:	490d      	ldr	r1, [pc, #52]	; (800e210 <_Z20StringFromMaskedBitsmmj+0xb4>)
 800e1dc:	68f8      	ldr	r0, [r7, #12]
 800e1de:	f7ff f9d7 	bl	800d590 <_ZN12SimpleStringpLEPKc>
        }

        value <<= 1;
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	005b      	lsls	r3, r3, #1
 800e1e6:	60bb      	str	r3, [r7, #8]
        mask <<= 1;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	005b      	lsls	r3, r3, #1
 800e1ec:	607b      	str	r3, [r7, #4]
    for (size_t i = 0; i < bitCount; i++) {
 800e1ee:	69fb      	ldr	r3, [r7, #28]
 800e1f0:	3301      	adds	r3, #1
 800e1f2:	61fb      	str	r3, [r7, #28]
 800e1f4:	e7cd      	b.n	800e192 <_Z20StringFromMaskedBitsmmj+0x36>
    }

    return result;
 800e1f6:	bf00      	nop
}
 800e1f8:	68f8      	ldr	r0, [r7, #12]
 800e1fa:	3720      	adds	r7, #32
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}
 800e200:	0802452c 	.word	0x0802452c
 800e204:	08024604 	.word	0x08024604
 800e208:	08024608 	.word	0x08024608
 800e20c:	0802460c 	.word	0x0802460c
 800e210:	08024610 	.word	0x08024610

0800e214 <_Z23StringFromOrdinalNumberj>:

SimpleString StringFromOrdinalNumber(unsigned int number)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b084      	sub	sp, #16
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
 800e21c:	6039      	str	r1, [r7, #0]
    unsigned int onesDigit = number % 10;
 800e21e:	683a      	ldr	r2, [r7, #0]
 800e220:	4b18      	ldr	r3, [pc, #96]	; (800e284 <_Z23StringFromOrdinalNumberj+0x70>)
 800e222:	fba3 1302 	umull	r1, r3, r3, r2
 800e226:	08d9      	lsrs	r1, r3, #3
 800e228:	460b      	mov	r3, r1
 800e22a:	009b      	lsls	r3, r3, #2
 800e22c:	440b      	add	r3, r1
 800e22e:	005b      	lsls	r3, r3, #1
 800e230:	1ad3      	subs	r3, r2, r3
 800e232:	60bb      	str	r3, [r7, #8]

    const char* suffix;
    if (number >= 11 && number <= 13) {
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	2b0a      	cmp	r3, #10
 800e238:	d905      	bls.n	800e246 <_Z23StringFromOrdinalNumberj+0x32>
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	2b0d      	cmp	r3, #13
 800e23e:	d802      	bhi.n	800e246 <_Z23StringFromOrdinalNumberj+0x32>
        suffix = "th";
 800e240:	4b11      	ldr	r3, [pc, #68]	; (800e288 <_Z23StringFromOrdinalNumberj+0x74>)
 800e242:	60fb      	str	r3, [r7, #12]
 800e244:	e013      	b.n	800e26e <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (3 == onesDigit) {
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	2b03      	cmp	r3, #3
 800e24a:	d102      	bne.n	800e252 <_Z23StringFromOrdinalNumberj+0x3e>
        suffix = "rd";
 800e24c:	4b0f      	ldr	r3, [pc, #60]	; (800e28c <_Z23StringFromOrdinalNumberj+0x78>)
 800e24e:	60fb      	str	r3, [r7, #12]
 800e250:	e00d      	b.n	800e26e <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (2 == onesDigit) {
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	2b02      	cmp	r3, #2
 800e256:	d102      	bne.n	800e25e <_Z23StringFromOrdinalNumberj+0x4a>
        suffix = "nd";
 800e258:	4b0d      	ldr	r3, [pc, #52]	; (800e290 <_Z23StringFromOrdinalNumberj+0x7c>)
 800e25a:	60fb      	str	r3, [r7, #12]
 800e25c:	e007      	b.n	800e26e <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (1 == onesDigit) {
 800e25e:	68bb      	ldr	r3, [r7, #8]
 800e260:	2b01      	cmp	r3, #1
 800e262:	d102      	bne.n	800e26a <_Z23StringFromOrdinalNumberj+0x56>
        suffix = "st";
 800e264:	4b0b      	ldr	r3, [pc, #44]	; (800e294 <_Z23StringFromOrdinalNumberj+0x80>)
 800e266:	60fb      	str	r3, [r7, #12]
 800e268:	e001      	b.n	800e26e <_Z23StringFromOrdinalNumberj+0x5a>
    } else {
        suffix = "th";
 800e26a:	4b07      	ldr	r3, [pc, #28]	; (800e288 <_Z23StringFromOrdinalNumberj+0x74>)
 800e26c:	60fb      	str	r3, [r7, #12]
    }

    return StringFromFormat("%u%s", number, suffix);
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	683a      	ldr	r2, [r7, #0]
 800e274:	4908      	ldr	r1, [pc, #32]	; (800e298 <_Z23StringFromOrdinalNumberj+0x84>)
 800e276:	f7ff fe03 	bl	800de80 <_Z16StringFromFormatPKcz>
}
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	3710      	adds	r7, #16
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}
 800e282:	bf00      	nop
 800e284:	cccccccd 	.word	0xcccccccd
 800e288:	08024614 	.word	0x08024614
 800e28c:	08024618 	.word	0x08024618
 800e290:	0802461c 	.word	0x0802461c
 800e294:	08024620 	.word	0x08024620
 800e298:	08024624 	.word	0x08024624

0800e29c <_ZN22SimpleStringCollectionC1Ev>:

SimpleStringCollection::SimpleStringCollection()
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b082      	sub	sp, #8
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	3304      	adds	r3, #4
 800e2a8:	4907      	ldr	r1, [pc, #28]	; (800e2c8 <_ZN22SimpleStringCollectionC1Ev+0x2c>)
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f7fe fd29 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
{
    collection_ = NULLPTR;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	601a      	str	r2, [r3, #0]
    size_ = 0;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	60da      	str	r2, [r3, #12]
}
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	4618      	mov	r0, r3
 800e2c0:	3708      	adds	r7, #8
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}
 800e2c6:	bf00      	nop
 800e2c8:	0802452c 	.word	0x0802452c

0800e2cc <_ZN22SimpleStringCollection8allocateEj>:

void SimpleStringCollection::allocate(size_t _size)
{
 800e2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2ce:	b083      	sub	sp, #12
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	6039      	str	r1, [r7, #0]
    delete[] collection_;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d01e      	beq.n	800e31c <_ZN22SimpleStringCollection8allocateEj+0x50>
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681a      	ldr	r2, [r3, #0]
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	3b04      	subs	r3, #4
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	00db      	lsls	r3, r3, #3
 800e2ec:	18d4      	adds	r4, r2, r3
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	429c      	cmp	r4, r3
 800e2f4:	d004      	beq.n	800e300 <_ZN22SimpleStringCollection8allocateEj+0x34>
 800e2f6:	3c08      	subs	r4, #8
 800e2f8:	4620      	mov	r0, r4
 800e2fa:	f7ff f8ba 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800e2fe:	e7f6      	b.n	800e2ee <_ZN22SimpleStringCollection8allocateEj+0x22>
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	f1a3 0208 	sub.w	r2, r3, #8
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	3b04      	subs	r3, #4
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	3301      	adds	r3, #1
 800e312:	00db      	lsls	r3, r3, #3
 800e314:	4619      	mov	r1, r3
 800e316:	4610      	mov	r0, r2
 800e318:	f7fc f976 	bl	800a608 <_ZdaPvj>

    size_ = _size;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	683a      	ldr	r2, [r7, #0]
 800e320:	60da      	str	r2, [r3, #12]
    collection_ = new SimpleString[size_];
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	68dc      	ldr	r4, [r3, #12]
 800e326:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800e32a:	d202      	bcs.n	800e332 <_ZN22SimpleStringCollection8allocateEj+0x66>
 800e32c:	1c63      	adds	r3, r4, #1
 800e32e:	00db      	lsls	r3, r3, #3
 800e330:	e001      	b.n	800e336 <_ZN22SimpleStringCollection8allocateEj+0x6a>
 800e332:	f04f 33ff 	mov.w	r3, #4294967295
 800e336:	f240 4227 	movw	r2, #1063	; 0x427
 800e33a:	4910      	ldr	r1, [pc, #64]	; (800e37c <_ZN22SimpleStringCollection8allocateEj+0xb0>)
 800e33c:	4618      	mov	r0, r3
 800e33e:	f7fc f941 	bl	800a5c4 <_ZnajPKci>
 800e342:	4605      	mov	r5, r0
 800e344:	1d2b      	adds	r3, r5, #4
 800e346:	3b04      	subs	r3, #4
 800e348:	2208      	movs	r2, #8
 800e34a:	601a      	str	r2, [r3, #0]
 800e34c:	1d2b      	adds	r3, r5, #4
 800e34e:	601c      	str	r4, [r3, #0]
 800e350:	f105 0308 	add.w	r3, r5, #8
 800e354:	1e62      	subs	r2, r4, #1
 800e356:	4614      	mov	r4, r2
 800e358:	461e      	mov	r6, r3
 800e35a:	2c00      	cmp	r4, #0
 800e35c:	db06      	blt.n	800e36c <_ZN22SimpleStringCollection8allocateEj+0xa0>
 800e35e:	4908      	ldr	r1, [pc, #32]	; (800e380 <_ZN22SimpleStringCollection8allocateEj+0xb4>)
 800e360:	4630      	mov	r0, r6
 800e362:	f7fe fcce 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800e366:	3608      	adds	r6, #8
 800e368:	3c01      	subs	r4, #1
 800e36a:	e7f6      	b.n	800e35a <_ZN22SimpleStringCollection8allocateEj+0x8e>
 800e36c:	f105 0208 	add.w	r2, r5, #8
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	601a      	str	r2, [r3, #0]
}
 800e374:	bf00      	nop
 800e376:	370c      	adds	r7, #12
 800e378:	46bd      	mov	sp, r7
 800e37a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e37c:	0802446c 	.word	0x0802446c
 800e380:	0802452c 	.word	0x0802452c

0800e384 <_ZN22SimpleStringCollectionD1Ev>:

SimpleStringCollection::~SimpleStringCollection()
 800e384:	b590      	push	{r4, r7, lr}
 800e386:	b083      	sub	sp, #12
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
{
    delete[] (collection_);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d01e      	beq.n	800e3d2 <_ZN22SimpleStringCollectionD1Ev+0x4e>
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681a      	ldr	r2, [r3, #0]
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	3b04      	subs	r3, #4
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	00db      	lsls	r3, r3, #3
 800e3a2:	18d4      	adds	r4, r2, r3
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	429c      	cmp	r4, r3
 800e3aa:	d004      	beq.n	800e3b6 <_ZN22SimpleStringCollectionD1Ev+0x32>
 800e3ac:	3c08      	subs	r4, #8
 800e3ae:	4620      	mov	r0, r4
 800e3b0:	f7ff f85f 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800e3b4:	e7f6      	b.n	800e3a4 <_ZN22SimpleStringCollectionD1Ev+0x20>
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	f1a3 0208 	sub.w	r2, r3, #8
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	3b04      	subs	r3, #4
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	3301      	adds	r3, #1
 800e3c8:	00db      	lsls	r3, r3, #3
 800e3ca:	4619      	mov	r1, r3
 800e3cc:	4610      	mov	r0, r2
 800e3ce:	f7fc f91b 	bl	800a608 <_ZdaPvj>
SimpleStringCollection::~SimpleStringCollection()
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	3304      	adds	r3, #4
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7ff f84b 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	4618      	mov	r0, r3
 800e3e0:	370c      	adds	r7, #12
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	bd90      	pop	{r4, r7, pc}

0800e3e6 <_ZNK22SimpleStringCollection4sizeEv>:

size_t SimpleStringCollection::size() const
{
 800e3e6:	b480      	push	{r7}
 800e3e8:	b083      	sub	sp, #12
 800e3ea:	af00      	add	r7, sp, #0
 800e3ec:	6078      	str	r0, [r7, #4]
    return size_;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	68db      	ldr	r3, [r3, #12]
}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	370c      	adds	r7, #12
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fc:	4770      	bx	lr
	...

0800e400 <_ZN22SimpleStringCollectionixEj>:

SimpleString& SimpleStringCollection::operator[](size_t index)
{
 800e400:	b590      	push	{r4, r7, lr}
 800e402:	b085      	sub	sp, #20
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
 800e408:	6039      	str	r1, [r7, #0]
    if (index >= size_) {
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	68db      	ldr	r3, [r3, #12]
 800e40e:	683a      	ldr	r2, [r7, #0]
 800e410:	429a      	cmp	r2, r3
 800e412:	d315      	bcc.n	800e440 <_ZN22SimpleStringCollectionixEj+0x40>
        empty_ = "";
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	1d1c      	adds	r4, r3, #4
 800e418:	f107 0308 	add.w	r3, r7, #8
 800e41c:	490d      	ldr	r1, [pc, #52]	; (800e454 <_ZN22SimpleStringCollectionixEj+0x54>)
 800e41e:	4618      	mov	r0, r3
 800e420:	f7fe fc6f 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800e424:	f107 0308 	add.w	r3, r7, #8
 800e428:	4619      	mov	r1, r3
 800e42a:	4620      	mov	r0, r4
 800e42c:	f7fe fcd5 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 800e430:	f107 0308 	add.w	r3, r7, #8
 800e434:	4618      	mov	r0, r3
 800e436:	f7ff f81c 	bl	800d472 <_ZN12SimpleStringD1Ev>
        return empty_;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	3304      	adds	r3, #4
 800e43e:	e004      	b.n	800e44a <_ZN22SimpleStringCollectionixEj+0x4a>
    }

    return collection_[index];
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681a      	ldr	r2, [r3, #0]
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	00db      	lsls	r3, r3, #3
 800e448:	4413      	add	r3, r2
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	3714      	adds	r7, #20
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd90      	pop	{r4, r7, pc}
 800e452:	bf00      	nop
 800e454:	0802452c 	.word	0x0802452c

0800e458 <_ZN18TeamCityTestOutputC1Ev>:
#include "CppUTest/TestHarness.h"
#include "CppUTest/TeamCityTestOutput.h"

TeamCityTestOutput::TeamCityTestOutput() : currtest_(NULLPTR), currGroup_()
 800e458:	b580      	push	{r7, lr}
 800e45a:	b082      	sub	sp, #8
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	4618      	mov	r0, r3
 800e464:	f7fa fb88 	bl	8008b78 <_ZN17ConsoleTestOutputC1Ev>
 800e468:	4a08      	ldr	r2, [pc, #32]	; (800e48c <_ZN18TeamCityTestOutputC1Ev+0x34>)
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	601a      	str	r2, [r3, #0]
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2200      	movs	r2, #0
 800e472:	611a      	str	r2, [r3, #16]
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	3314      	adds	r3, #20
 800e478:	4905      	ldr	r1, [pc, #20]	; (800e490 <_ZN18TeamCityTestOutputC1Ev+0x38>)
 800e47a:	4618      	mov	r0, r3
 800e47c:	f7fe fc41 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
{
}
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	4618      	mov	r0, r3
 800e484:	3708      	adds	r7, #8
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	bf00      	nop
 800e48c:	080283ac 	.word	0x080283ac
 800e490:	0802462c 	.word	0x0802462c

0800e494 <_ZN18TeamCityTestOutputD1Ev>:

TeamCityTestOutput::~TeamCityTestOutput()
 800e494:	b580      	push	{r7, lr}
 800e496:	b082      	sub	sp, #8
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
 800e49c:	4a08      	ldr	r2, [pc, #32]	; (800e4c0 <_ZN18TeamCityTestOutputD1Ev+0x2c>)
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	601a      	str	r2, [r3, #0]
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	3314      	adds	r3, #20
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f7fe ffe3 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f7fa fb74 	bl	8008b9c <_ZN17ConsoleTestOutputD1Ev>
{
}
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	3708      	adds	r7, #8
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	bd80      	pop	{r7, pc}
 800e4be:	bf00      	nop
 800e4c0:	080283ac 	.word	0x080283ac

0800e4c4 <_ZN18TeamCityTestOutputD0Ev>:
TeamCityTestOutput::~TeamCityTestOutput()
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b082      	sub	sp, #8
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
}
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f7ff ffe1 	bl	800e494 <_ZN18TeamCityTestOutputD1Ev>
 800e4d2:	211c      	movs	r1, #28
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f7fc f865 	bl	800a5a4 <_ZdlPvj>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	4618      	mov	r0, r3
 800e4de:	3708      	adds	r7, #8
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}

0800e4e4 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b086      	sub	sp, #24
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
 800e4ec:	6039      	str	r1, [r7, #0]
    print("##teamcity[testStarted name='");
 800e4ee:	687a      	ldr	r2, [r7, #4]
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	332c      	adds	r3, #44	; 0x2c
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	492b      	ldr	r1, [pc, #172]	; (800e5a8 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc4>)
 800e4fa:	4610      	mov	r0, r2
 800e4fc:	4798      	blx	r3
    printEscaped(test.getName().asCharString());
 800e4fe:	f107 0308 	add.w	r3, r7, #8
 800e502:	6839      	ldr	r1, [r7, #0]
 800e504:	4618      	mov	r0, r3
 800e506:	f004 fdf7 	bl	80130f8 <_ZNK10UtestShell7getNameEv>
 800e50a:	f107 0308 	add.w	r3, r7, #8
 800e50e:	4618      	mov	r0, r3
 800e510:	f7fe ff82 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 800e514:	4603      	mov	r3, r0
 800e516:	4619      	mov	r1, r3
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f000 f919 	bl	800e750 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800e51e:	f107 0308 	add.w	r3, r7, #8
 800e522:	4618      	mov	r0, r3
 800e524:	f7fe ffa5 	bl	800d472 <_ZN12SimpleStringD1Ev>
    print("']\n");
 800e528:	687a      	ldr	r2, [r7, #4]
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	332c      	adds	r3, #44	; 0x2c
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	491e      	ldr	r1, [pc, #120]	; (800e5ac <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800e534:	4610      	mov	r0, r2
 800e536:	4798      	blx	r3
    if (!test.willRun()) {
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	3318      	adds	r3, #24
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	6838      	ldr	r0, [r7, #0]
 800e542:	4798      	blx	r3
 800e544:	4603      	mov	r3, r0
 800e546:	f083 0301 	eor.w	r3, r3, #1
 800e54a:	b2db      	uxtb	r3, r3
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d024      	beq.n	800e59a <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xb6>
        print("##teamcity[testIgnored name='");
 800e550:	687a      	ldr	r2, [r7, #4]
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	332c      	adds	r3, #44	; 0x2c
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	4915      	ldr	r1, [pc, #84]	; (800e5b0 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xcc>)
 800e55c:	4610      	mov	r0, r2
 800e55e:	4798      	blx	r3
        printEscaped(test.getName().asCharString());
 800e560:	f107 0310 	add.w	r3, r7, #16
 800e564:	6839      	ldr	r1, [r7, #0]
 800e566:	4618      	mov	r0, r3
 800e568:	f004 fdc6 	bl	80130f8 <_ZNK10UtestShell7getNameEv>
 800e56c:	f107 0310 	add.w	r3, r7, #16
 800e570:	4618      	mov	r0, r3
 800e572:	f7fe ff51 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 800e576:	4603      	mov	r3, r0
 800e578:	4619      	mov	r1, r3
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f000 f8e8 	bl	800e750 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800e580:	f107 0310 	add.w	r3, r7, #16
 800e584:	4618      	mov	r0, r3
 800e586:	f7fe ff74 	bl	800d472 <_ZN12SimpleStringD1Ev>
        print("']\n");
 800e58a:	687a      	ldr	r2, [r7, #4]
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	332c      	adds	r3, #44	; 0x2c
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	4905      	ldr	r1, [pc, #20]	; (800e5ac <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800e596:	4610      	mov	r0, r2
 800e598:	4798      	blx	r3
    }
    currtest_ = &test;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	683a      	ldr	r2, [r7, #0]
 800e59e:	611a      	str	r2, [r3, #16]
}
 800e5a0:	bf00      	nop
 800e5a2:	3718      	adds	r7, #24
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}
 800e5a8:	08024630 	.word	0x08024630
 800e5ac:	08024650 	.word	0x08024650
 800e5b0:	08024654 	.word	0x08024654

0800e5b4 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800e5b4:	b5b0      	push	{r4, r5, r7, lr}
 800e5b6:	b084      	sub	sp, #16
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
 800e5bc:	6039      	str	r1, [r7, #0]
    if (!currtest_)
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	691b      	ldr	r3, [r3, #16]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d03b      	beq.n	800e63e <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8a>
        return;

    print("##teamcity[testFinished name='");
 800e5c6:	687a      	ldr	r2, [r7, #4]
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	332c      	adds	r3, #44	; 0x2c
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	491d      	ldr	r1, [pc, #116]	; (800e648 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x94>)
 800e5d2:	4610      	mov	r0, r2
 800e5d4:	4798      	blx	r3
    printEscaped(currtest_->getName().asCharString());
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	691a      	ldr	r2, [r3, #16]
 800e5da:	f107 0308 	add.w	r3, r7, #8
 800e5de:	4611      	mov	r1, r2
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	f004 fd89 	bl	80130f8 <_ZNK10UtestShell7getNameEv>
 800e5e6:	f107 0308 	add.w	r3, r7, #8
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f7fe ff14 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	4619      	mov	r1, r3
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f000 f8ab 	bl	800e750 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800e5fa:	f107 0308 	add.w	r3, r7, #8
 800e5fe:	4618      	mov	r0, r3
 800e600:	f7fe ff37 	bl	800d472 <_ZN12SimpleStringD1Ev>
    print("' duration='");
 800e604:	687a      	ldr	r2, [r7, #4]
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	332c      	adds	r3, #44	; 0x2c
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	490f      	ldr	r1, [pc, #60]	; (800e64c <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x98>)
 800e610:	4610      	mov	r0, r2
 800e612:	4798      	blx	r3
    print(res.getCurrentTestTotalExecutionTime());
 800e614:	687d      	ldr	r5, [r7, #4]
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	3334      	adds	r3, #52	; 0x34
 800e61c:	681c      	ldr	r4, [r3, #0]
 800e61e:	6838      	ldr	r0, [r7, #0]
 800e620:	f004 fa0a 	bl	8012a38 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800e624:	4603      	mov	r3, r0
 800e626:	4619      	mov	r1, r3
 800e628:	4628      	mov	r0, r5
 800e62a:	47a0      	blx	r4
    print("']\n");
 800e62c:	687a      	ldr	r2, [r7, #4]
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	332c      	adds	r3, #44	; 0x2c
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	4906      	ldr	r1, [pc, #24]	; (800e650 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x9c>)
 800e638:	4610      	mov	r0, r2
 800e63a:	4798      	blx	r3
 800e63c:	e000      	b.n	800e640 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8c>
        return;
 800e63e:	bf00      	nop
}
 800e640:	3710      	adds	r7, #16
 800e642:	46bd      	mov	sp, r7
 800e644:	bdb0      	pop	{r4, r5, r7, pc}
 800e646:	bf00      	nop
 800e648:	08024674 	.word	0x08024674
 800e64c:	08024694 	.word	0x08024694
 800e650:	08024650 	.word	0x08024650

0800e654 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800e654:	b590      	push	{r4, r7, lr}
 800e656:	b085      	sub	sp, #20
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
 800e65c:	6039      	str	r1, [r7, #0]
    currGroup_ = test.getGroup();
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	f103 0414 	add.w	r4, r3, #20
 800e664:	f107 0308 	add.w	r3, r7, #8
 800e668:	6839      	ldr	r1, [r7, #0]
 800e66a:	4618      	mov	r0, r3
 800e66c:	f004 fd53 	bl	8013116 <_ZNK10UtestShell8getGroupEv>
 800e670:	f107 0308 	add.w	r3, r7, #8
 800e674:	4619      	mov	r1, r3
 800e676:	4620      	mov	r0, r4
 800e678:	f7fe fbaf 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 800e67c:	f107 0308 	add.w	r3, r7, #8
 800e680:	4618      	mov	r0, r3
 800e682:	f7fe fef6 	bl	800d472 <_ZN12SimpleStringD1Ev>
    print("##teamcity[testSuiteStarted name='");
 800e686:	687a      	ldr	r2, [r7, #4]
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	332c      	adds	r3, #44	; 0x2c
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	490c      	ldr	r1, [pc, #48]	; (800e6c4 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x70>)
 800e692:	4610      	mov	r0, r2
 800e694:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	3314      	adds	r3, #20
 800e69a:	4618      	mov	r0, r3
 800e69c:	f7fe febc 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	4619      	mov	r1, r3
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f000 f853 	bl	800e750 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800e6aa:	687a      	ldr	r2, [r7, #4]
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	332c      	adds	r3, #44	; 0x2c
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	4904      	ldr	r1, [pc, #16]	; (800e6c8 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x74>)
 800e6b6:	4610      	mov	r0, r2
 800e6b8:	4798      	blx	r3
}
 800e6ba:	bf00      	nop
 800e6bc:	3714      	adds	r7, #20
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd90      	pop	{r4, r7, pc}
 800e6c2:	bf00      	nop
 800e6c4:	080246a4 	.word	0x080246a4
 800e6c8:	08024650 	.word	0x08024650

0800e6cc <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800e6cc:	b590      	push	{r4, r7, lr}
 800e6ce:	b085      	sub	sp, #20
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
 800e6d4:	6039      	str	r1, [r7, #0]
    if (currGroup_ == "")
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	f103 0414 	add.w	r4, r3, #20
 800e6dc:	f107 0308 	add.w	r3, r7, #8
 800e6e0:	4918      	ldr	r1, [pc, #96]	; (800e744 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x78>)
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f7fe fb0d 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800e6e8:	f107 0308 	add.w	r3, r7, #8
 800e6ec:	4619      	mov	r1, r3
 800e6ee:	4620      	mov	r0, r4
 800e6f0:	f7fe fecb 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	461c      	mov	r4, r3
 800e6f8:	f107 0308 	add.w	r3, r7, #8
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7fe feb8 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800e702:	2c00      	cmp	r4, #0
 800e704:	d11a      	bne.n	800e73c <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x70>
        return;

    print("##teamcity[testSuiteFinished name='");
 800e706:	687a      	ldr	r2, [r7, #4]
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	332c      	adds	r3, #44	; 0x2c
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	490d      	ldr	r1, [pc, #52]	; (800e748 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x7c>)
 800e712:	4610      	mov	r0, r2
 800e714:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	3314      	adds	r3, #20
 800e71a:	4618      	mov	r0, r3
 800e71c:	f7fe fe7c 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 800e720:	4603      	mov	r3, r0
 800e722:	4619      	mov	r1, r3
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	f000 f813 	bl	800e750 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800e72a:	687a      	ldr	r2, [r7, #4]
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	332c      	adds	r3, #44	; 0x2c
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	4905      	ldr	r1, [pc, #20]	; (800e74c <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x80>)
 800e736:	4610      	mov	r0, r2
 800e738:	4798      	blx	r3
 800e73a:	e000      	b.n	800e73e <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x72>
        return;
 800e73c:	bf00      	nop
}
 800e73e:	3714      	adds	r7, #20
 800e740:	46bd      	mov	sp, r7
 800e742:	bd90      	pop	{r4, r7, pc}
 800e744:	0802462c 	.word	0x0802462c
 800e748:	080246c8 	.word	0x080246c8
 800e74c:	08024650 	.word	0x08024650

0800e750 <_ZN18TeamCityTestOutput12printEscapedEPKc>:

void TeamCityTestOutput::printEscaped(const char* s)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b084      	sub	sp, #16
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
 800e758:	6039      	str	r1, [r7, #0]
    while (*s) {
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	781b      	ldrb	r3, [r3, #0]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d03f      	beq.n	800e7e2 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x92>
        char str[3];
        if ((*s == '\'') || (*s == '|') || (*s == '[') || (*s == ']')) {
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	781b      	ldrb	r3, [r3, #0]
 800e766:	2b27      	cmp	r3, #39	; 0x27
 800e768:	d00b      	beq.n	800e782 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	781b      	ldrb	r3, [r3, #0]
 800e76e:	2b7c      	cmp	r3, #124	; 0x7c
 800e770:	d007      	beq.n	800e782 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	781b      	ldrb	r3, [r3, #0]
 800e776:	2b5b      	cmp	r3, #91	; 0x5b
 800e778:	d003      	beq.n	800e782 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	781b      	ldrb	r3, [r3, #0]
 800e77e:	2b5d      	cmp	r3, #93	; 0x5d
 800e780:	d107      	bne.n	800e792 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x42>
            str[0] = '|';
 800e782:	237c      	movs	r3, #124	; 0x7c
 800e784:	733b      	strb	r3, [r7, #12]
            str[1] = *s;
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	781b      	ldrb	r3, [r3, #0]
 800e78a:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800e78c:	2300      	movs	r3, #0
 800e78e:	73bb      	strb	r3, [r7, #14]
 800e790:	e01a      	b.n	800e7c8 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\r') {
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	781b      	ldrb	r3, [r3, #0]
 800e796:	2b0d      	cmp	r3, #13
 800e798:	d106      	bne.n	800e7a8 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x58>
            str[0] = '|';
 800e79a:	237c      	movs	r3, #124	; 0x7c
 800e79c:	733b      	strb	r3, [r7, #12]
            str[1] = 'r';
 800e79e:	2372      	movs	r3, #114	; 0x72
 800e7a0:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	73bb      	strb	r3, [r7, #14]
 800e7a6:	e00f      	b.n	800e7c8 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\n') {
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	781b      	ldrb	r3, [r3, #0]
 800e7ac:	2b0a      	cmp	r3, #10
 800e7ae:	d106      	bne.n	800e7be <_ZN18TeamCityTestOutput12printEscapedEPKc+0x6e>
            str[0] = '|';
 800e7b0:	237c      	movs	r3, #124	; 0x7c
 800e7b2:	733b      	strb	r3, [r7, #12]
            str[1] = 'n';
 800e7b4:	236e      	movs	r3, #110	; 0x6e
 800e7b6:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	73bb      	strb	r3, [r7, #14]
 800e7bc:	e004      	b.n	800e7c8 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else {
            str[0] = *s;
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	781b      	ldrb	r3, [r3, #0]
 800e7c2:	733b      	strb	r3, [r7, #12]
            str[1] = 0;
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	737b      	strb	r3, [r7, #13]
        }
        printBuffer(str);
 800e7c8:	687a      	ldr	r2, [r7, #4]
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	3328      	adds	r3, #40	; 0x28
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	f107 010c 	add.w	r1, r7, #12
 800e7d6:	4610      	mov	r0, r2
 800e7d8:	4798      	blx	r3
        s++;
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	3301      	adds	r3, #1
 800e7de:	603b      	str	r3, [r7, #0]
    while (*s) {
 800e7e0:	e7bb      	b.n	800e75a <_ZN18TeamCityTestOutput12printEscapedEPKc+0xa>
    }
}
 800e7e2:	bf00      	nop
 800e7e4:	3710      	adds	r7, #16
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	bd80      	pop	{r7, pc}
	...

0800e7ec <_ZN18TeamCityTestOutput12printFailureERK11TestFailure>:

void TeamCityTestOutput::printFailure(const TestFailure& failure)
{
 800e7ec:	b5b0      	push	{r4, r5, r7, lr}
 800e7ee:	b08a      	sub	sp, #40	; 0x28
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
 800e7f4:	6039      	str	r1, [r7, #0]
    print("##teamcity[testFailed name='");
 800e7f6:	687a      	ldr	r2, [r7, #4]
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	332c      	adds	r3, #44	; 0x2c
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	4968      	ldr	r1, [pc, #416]	; (800e9a4 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1b8>)
 800e802:	4610      	mov	r0, r2
 800e804:	4798      	blx	r3
    printEscaped(failure.getTestNameOnly().asCharString());
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	3310      	adds	r3, #16
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	f107 0208 	add.w	r2, r7, #8
 800e812:	6839      	ldr	r1, [r7, #0]
 800e814:	4610      	mov	r0, r2
 800e816:	4798      	blx	r3
 800e818:	f107 0308 	add.w	r3, r7, #8
 800e81c:	4618      	mov	r0, r3
 800e81e:	f7fe fdfb 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 800e822:	4603      	mov	r3, r0
 800e824:	4619      	mov	r1, r3
 800e826:	6878      	ldr	r0, [r7, #4]
 800e828:	f7ff ff92 	bl	800e750 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800e82c:	f107 0308 	add.w	r3, r7, #8
 800e830:	4618      	mov	r0, r3
 800e832:	f7fe fe1e 	bl	800d472 <_ZN12SimpleStringD1Ev>
    print("' message='");
 800e836:	687a      	ldr	r2, [r7, #4]
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	332c      	adds	r3, #44	; 0x2c
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	4959      	ldr	r1, [pc, #356]	; (800e9a8 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1bc>)
 800e842:	4610      	mov	r0, r2
 800e844:	4798      	blx	r3
    if (failure.isOutsideTestFile() || failure.isInHelperFunction()) {
 800e846:	6838      	ldr	r0, [r7, #0]
 800e848:	f000 fa15 	bl	800ec76 <_ZNK11TestFailure17isOutsideTestFileEv>
 800e84c:	4603      	mov	r3, r0
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d105      	bne.n	800e85e <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x72>
 800e852:	6838      	ldr	r0, [r7, #0]
 800e854:	f000 fa21 	bl	800ec9a <_ZNK11TestFailure18isInHelperFunctionEv>
 800e858:	4603      	mov	r3, r0
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d001      	beq.n	800e862 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x76>
 800e85e:	2301      	movs	r3, #1
 800e860:	e000      	b.n	800e864 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x78>
 800e862:	2300      	movs	r3, #0
 800e864:	2b00      	cmp	r3, #0
 800e866:	d042      	beq.n	800e8ee <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x102>
        print("TEST failed (");
 800e868:	687a      	ldr	r2, [r7, #4]
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	332c      	adds	r3, #44	; 0x2c
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	494e      	ldr	r1, [pc, #312]	; (800e9ac <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c0>)
 800e874:	4610      	mov	r0, r2
 800e876:	4798      	blx	r3
        print(failure.getTestFileName().asCharString());
 800e878:	687d      	ldr	r5, [r7, #4]
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	332c      	adds	r3, #44	; 0x2c
 800e880:	681c      	ldr	r4, [r3, #0]
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	331c      	adds	r3, #28
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	f107 0210 	add.w	r2, r7, #16
 800e88e:	6839      	ldr	r1, [r7, #0]
 800e890:	4610      	mov	r0, r2
 800e892:	4798      	blx	r3
 800e894:	f107 0310 	add.w	r3, r7, #16
 800e898:	4618      	mov	r0, r3
 800e89a:	f7fe fdbd 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	4619      	mov	r1, r3
 800e8a2:	4628      	mov	r0, r5
 800e8a4:	47a0      	blx	r4
 800e8a6:	f107 0310 	add.w	r3, r7, #16
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f7fe fde1 	bl	800d472 <_ZN12SimpleStringD1Ev>
        print(":");
 800e8b0:	687a      	ldr	r2, [r7, #4]
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	332c      	adds	r3, #44	; 0x2c
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	493d      	ldr	r1, [pc, #244]	; (800e9b0 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800e8bc:	4610      	mov	r0, r2
 800e8be:	4798      	blx	r3
        print(failure.getTestLineNumber());
 800e8c0:	687d      	ldr	r5, [r7, #4]
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	3334      	adds	r3, #52	; 0x34
 800e8c8:	681c      	ldr	r4, [r3, #0]
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	3320      	adds	r3, #32
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	6838      	ldr	r0, [r7, #0]
 800e8d4:	4798      	blx	r3
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	4619      	mov	r1, r3
 800e8da:	4628      	mov	r0, r5
 800e8dc:	47a0      	blx	r4
        print("): ");
 800e8de:	687a      	ldr	r2, [r7, #4]
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	332c      	adds	r3, #44	; 0x2c
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	4932      	ldr	r1, [pc, #200]	; (800e9b4 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c8>)
 800e8ea:	4610      	mov	r0, r2
 800e8ec:	4798      	blx	r3
    }

    printEscaped(failure.getFileName().asCharString());
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	3308      	adds	r3, #8
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	f107 0218 	add.w	r2, r7, #24
 800e8fa:	6839      	ldr	r1, [r7, #0]
 800e8fc:	4610      	mov	r0, r2
 800e8fe:	4798      	blx	r3
 800e900:	f107 0318 	add.w	r3, r7, #24
 800e904:	4618      	mov	r0, r3
 800e906:	f7fe fd87 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 800e90a:	4603      	mov	r3, r0
 800e90c:	4619      	mov	r1, r3
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	f7ff ff1e 	bl	800e750 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800e914:	f107 0318 	add.w	r3, r7, #24
 800e918:	4618      	mov	r0, r3
 800e91a:	f7fe fdaa 	bl	800d472 <_ZN12SimpleStringD1Ev>
    print(":");
 800e91e:	687a      	ldr	r2, [r7, #4]
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	332c      	adds	r3, #44	; 0x2c
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	4921      	ldr	r1, [pc, #132]	; (800e9b0 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800e92a:	4610      	mov	r0, r2
 800e92c:	4798      	blx	r3
    print(failure.getFailureLineNumber());
 800e92e:	687d      	ldr	r5, [r7, #4]
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	3334      	adds	r3, #52	; 0x34
 800e936:	681c      	ldr	r4, [r3, #0]
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	3314      	adds	r3, #20
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	6838      	ldr	r0, [r7, #0]
 800e942:	4798      	blx	r3
 800e944:	4603      	mov	r3, r0
 800e946:	4619      	mov	r1, r3
 800e948:	4628      	mov	r0, r5
 800e94a:	47a0      	blx	r4

    print("' details='");
 800e94c:	687a      	ldr	r2, [r7, #4]
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	332c      	adds	r3, #44	; 0x2c
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	4918      	ldr	r1, [pc, #96]	; (800e9b8 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1cc>)
 800e958:	4610      	mov	r0, r2
 800e95a:	4798      	blx	r3
    printEscaped(failure.getMessage().asCharString());
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	3318      	adds	r3, #24
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	f107 0220 	add.w	r2, r7, #32
 800e968:	6839      	ldr	r1, [r7, #0]
 800e96a:	4610      	mov	r0, r2
 800e96c:	4798      	blx	r3
 800e96e:	f107 0320 	add.w	r3, r7, #32
 800e972:	4618      	mov	r0, r3
 800e974:	f7fe fd50 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 800e978:	4603      	mov	r3, r0
 800e97a:	4619      	mov	r1, r3
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f7ff fee7 	bl	800e750 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800e982:	f107 0320 	add.w	r3, r7, #32
 800e986:	4618      	mov	r0, r3
 800e988:	f7fe fd73 	bl	800d472 <_ZN12SimpleStringD1Ev>
    print("']\n");
 800e98c:	687a      	ldr	r2, [r7, #4]
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	332c      	adds	r3, #44	; 0x2c
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	4909      	ldr	r1, [pc, #36]	; (800e9bc <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1d0>)
 800e998:	4610      	mov	r0, r2
 800e99a:	4798      	blx	r3
}
 800e99c:	bf00      	nop
 800e99e:	3728      	adds	r7, #40	; 0x28
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bdb0      	pop	{r4, r5, r7, pc}
 800e9a4:	080246ec 	.word	0x080246ec
 800e9a8:	0802470c 	.word	0x0802470c
 800e9ac:	08024718 	.word	0x08024718
 800e9b0:	08024728 	.word	0x08024728
 800e9b4:	0802472c 	.word	0x0802472c
 800e9b8:	08024730 	.word	0x08024730
 800e9bc:	08024650 	.word	0x08024650

0800e9c0 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>:
TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& theMessage) :
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNumber), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
{
}

TestFailure::TestFailure(UtestShell* test, const SimpleString& theMessage) :
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b084      	sub	sp, #16
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	60f8      	str	r0, [r7, #12]
 800e9c8:	60b9      	str	r1, [r7, #8]
 800e9ca:	607a      	str	r2, [r7, #4]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(test->getFile()), lineNumber_(test->getLineNumber()), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
 800e9cc:	4a1a      	ldr	r2, [pc, #104]	; (800ea38 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString+0x78>)
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	601a      	str	r2, [r3, #0]
 800e9d2:	68bb      	ldr	r3, [r7, #8]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	3314      	adds	r3, #20
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	68fa      	ldr	r2, [r7, #12]
 800e9dc:	3204      	adds	r2, #4
 800e9de:	68b9      	ldr	r1, [r7, #8]
 800e9e0:	4610      	mov	r0, r2
 800e9e2:	4798      	blx	r3
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	330c      	adds	r3, #12
 800e9e8:	68b9      	ldr	r1, [r7, #8]
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	f004 fb84 	bl	80130f8 <_ZNK10UtestShell7getNameEv>
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	3314      	adds	r3, #20
 800e9f4:	68b9      	ldr	r1, [r7, #8]
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	f004 fc4f 	bl	801329a <_ZNK10UtestShell7getFileEv>
 800e9fc:	68b8      	ldr	r0, [r7, #8]
 800e9fe:	f004 fc5b 	bl	80132b8 <_ZNK10UtestShell13getLineNumberEv>
 800ea02:	4602      	mov	r2, r0
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	61da      	str	r2, [r3, #28]
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	3320      	adds	r3, #32
 800ea0c:	68b9      	ldr	r1, [r7, #8]
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f004 fc43 	bl	801329a <_ZNK10UtestShell7getFileEv>
 800ea14:	68b8      	ldr	r0, [r7, #8]
 800ea16:	f004 fc4f 	bl	80132b8 <_ZNK10UtestShell13getLineNumberEv>
 800ea1a:	4602      	mov	r2, r0
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	629a      	str	r2, [r3, #40]	; 0x28
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	332c      	adds	r3, #44	; 0x2c
 800ea24:	6879      	ldr	r1, [r7, #4]
 800ea26:	4618      	mov	r0, r3
 800ea28:	f7fe f9bf 	bl	800cdaa <_ZN12SimpleStringC1ERKS_>
{
}
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3710      	adds	r7, #16
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}
 800ea36:	bf00      	nop
 800ea38:	08028678 	.word	0x08028678

0800ea3c <_ZN11TestFailureC1EP10UtestShellPKcj>:

TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNum) :
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b084      	sub	sp, #16
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	60f8      	str	r0, [r7, #12]
 800ea44:	60b9      	str	r1, [r7, #8]
 800ea46:	607a      	str	r2, [r7, #4]
 800ea48:	603b      	str	r3, [r7, #0]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNum), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_("no message")
 800ea4a:	4a19      	ldr	r2, [pc, #100]	; (800eab0 <_ZN11TestFailureC1EP10UtestShellPKcj+0x74>)
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	601a      	str	r2, [r3, #0]
 800ea50:	68bb      	ldr	r3, [r7, #8]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	3314      	adds	r3, #20
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	68fa      	ldr	r2, [r7, #12]
 800ea5a:	3204      	adds	r2, #4
 800ea5c:	68b9      	ldr	r1, [r7, #8]
 800ea5e:	4610      	mov	r0, r2
 800ea60:	4798      	blx	r3
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	330c      	adds	r3, #12
 800ea66:	68b9      	ldr	r1, [r7, #8]
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f004 fb45 	bl	80130f8 <_ZNK10UtestShell7getNameEv>
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	3314      	adds	r3, #20
 800ea72:	6879      	ldr	r1, [r7, #4]
 800ea74:	4618      	mov	r0, r3
 800ea76:	f7fe f944 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	683a      	ldr	r2, [r7, #0]
 800ea7e:	61da      	str	r2, [r3, #28]
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	3320      	adds	r3, #32
 800ea84:	68b9      	ldr	r1, [r7, #8]
 800ea86:	4618      	mov	r0, r3
 800ea88:	f004 fc07 	bl	801329a <_ZNK10UtestShell7getFileEv>
 800ea8c:	68b8      	ldr	r0, [r7, #8]
 800ea8e:	f004 fc13 	bl	80132b8 <_ZNK10UtestShell13getLineNumberEv>
 800ea92:	4602      	mov	r2, r0
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	629a      	str	r2, [r3, #40]	; 0x28
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	332c      	adds	r3, #44	; 0x2c
 800ea9c:	4905      	ldr	r1, [pc, #20]	; (800eab4 <_ZN11TestFailureC1EP10UtestShellPKcj+0x78>)
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	f7fe f92f 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
{
}
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	3710      	adds	r7, #16
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}
 800eaae:	bf00      	nop
 800eab0:	08028678 	.word	0x08028678
 800eab4:	0802473c 	.word	0x0802473c

0800eab8 <_ZN11TestFailureC1ERKS_>:

TestFailure::TestFailure(const TestFailure& f) :
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b082      	sub	sp, #8
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
 800eac0:	6039      	str	r1, [r7, #0]
    testName_(f.testName_), testNameOnly_(f.testNameOnly_), fileName_(f.fileName_), lineNumber_(f.lineNumber_), testFileName_(f.testFileName_), testLineNumber_(f.testLineNumber_), message_(f.message_)
 800eac2:	4a1e      	ldr	r2, [pc, #120]	; (800eb3c <_ZN11TestFailureC1ERKS_+0x84>)
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	601a      	str	r2, [r3, #0]
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	1d1a      	adds	r2, r3, #4
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	3304      	adds	r3, #4
 800ead0:	4619      	mov	r1, r3
 800ead2:	4610      	mov	r0, r2
 800ead4:	f7fe f969 	bl	800cdaa <_ZN12SimpleStringC1ERKS_>
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	f103 020c 	add.w	r2, r3, #12
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	330c      	adds	r3, #12
 800eae2:	4619      	mov	r1, r3
 800eae4:	4610      	mov	r0, r2
 800eae6:	f7fe f960 	bl	800cdaa <_ZN12SimpleStringC1ERKS_>
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	f103 0214 	add.w	r2, r3, #20
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	3314      	adds	r3, #20
 800eaf4:	4619      	mov	r1, r3
 800eaf6:	4610      	mov	r0, r2
 800eaf8:	f7fe f957 	bl	800cdaa <_ZN12SimpleStringC1ERKS_>
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	69da      	ldr	r2, [r3, #28]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	61da      	str	r2, [r3, #28]
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f103 0220 	add.w	r2, r3, #32
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	3320      	adds	r3, #32
 800eb0e:	4619      	mov	r1, r3
 800eb10:	4610      	mov	r0, r2
 800eb12:	f7fe f94a 	bl	800cdaa <_ZN12SimpleStringC1ERKS_>
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	629a      	str	r2, [r3, #40]	; 0x28
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	332c      	adds	r3, #44	; 0x2c
 800eb28:	4619      	mov	r1, r3
 800eb2a:	4610      	mov	r0, r2
 800eb2c:	f7fe f93d 	bl	800cdaa <_ZN12SimpleStringC1ERKS_>
{
}
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	4618      	mov	r0, r3
 800eb34:	3708      	adds	r7, #8
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}
 800eb3a:	bf00      	nop
 800eb3c:	08028678 	.word	0x08028678

0800eb40 <_ZN11TestFailureD1Ev>:


TestFailure::~TestFailure()
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b082      	sub	sp, #8
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
 800eb48:	4a10      	ldr	r2, [pc, #64]	; (800eb8c <_ZN11TestFailureD1Ev+0x4c>)
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	601a      	str	r2, [r3, #0]
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	332c      	adds	r3, #44	; 0x2c
 800eb52:	4618      	mov	r0, r3
 800eb54:	f7fe fc8d 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	3320      	adds	r3, #32
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f7fe fc88 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	3314      	adds	r3, #20
 800eb66:	4618      	mov	r0, r3
 800eb68:	f7fe fc83 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	330c      	adds	r3, #12
 800eb70:	4618      	mov	r0, r3
 800eb72:	f7fe fc7e 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	3304      	adds	r3, #4
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f7fe fc79 	bl	800d472 <_ZN12SimpleStringD1Ev>
{
}
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	4618      	mov	r0, r3
 800eb84:	3708      	adds	r7, #8
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd80      	pop	{r7, pc}
 800eb8a:	bf00      	nop
 800eb8c:	08028678 	.word	0x08028678

0800eb90 <_ZN11TestFailureD0Ev>:
TestFailure::~TestFailure()
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b082      	sub	sp, #8
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
}
 800eb98:	6878      	ldr	r0, [r7, #4]
 800eb9a:	f7ff ffd1 	bl	800eb40 <_ZN11TestFailureD1Ev>
 800eb9e:	2134      	movs	r1, #52	; 0x34
 800eba0:	6878      	ldr	r0, [r7, #4]
 800eba2:	f7fb fcff 	bl	800a5a4 <_ZdlPvj>
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	4618      	mov	r0, r3
 800ebaa:	3708      	adds	r7, #8
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}

0800ebb0 <_ZNK11TestFailure11getFileNameEv>:

SimpleString TestFailure::getFileName() const
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b082      	sub	sp, #8
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
 800ebb8:	6039      	str	r1, [r7, #0]
    return fileName_;
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	3314      	adds	r3, #20
 800ebbe:	4619      	mov	r1, r3
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f7fe f8f2 	bl	800cdaa <_ZN12SimpleStringC1ERKS_>
}
 800ebc6:	6878      	ldr	r0, [r7, #4]
 800ebc8:	3708      	adds	r7, #8
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}

0800ebce <_ZNK11TestFailure15getTestFileNameEv>:

SimpleString TestFailure::getTestFileName() const
{
 800ebce:	b580      	push	{r7, lr}
 800ebd0:	b082      	sub	sp, #8
 800ebd2:	af00      	add	r7, sp, #0
 800ebd4:	6078      	str	r0, [r7, #4]
 800ebd6:	6039      	str	r1, [r7, #0]
    return testFileName_;
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	3320      	adds	r3, #32
 800ebdc:	4619      	mov	r1, r3
 800ebde:	6878      	ldr	r0, [r7, #4]
 800ebe0:	f7fe f8e3 	bl	800cdaa <_ZN12SimpleStringC1ERKS_>
}
 800ebe4:	6878      	ldr	r0, [r7, #4]
 800ebe6:	3708      	adds	r7, #8
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bd80      	pop	{r7, pc}

0800ebec <_ZNK11TestFailure11getTestNameEv>:

SimpleString TestFailure::getTestName() const
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b082      	sub	sp, #8
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
 800ebf4:	6039      	str	r1, [r7, #0]
    return testName_;
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	3304      	adds	r3, #4
 800ebfa:	4619      	mov	r1, r3
 800ebfc:	6878      	ldr	r0, [r7, #4]
 800ebfe:	f7fe f8d4 	bl	800cdaa <_ZN12SimpleStringC1ERKS_>
}
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	3708      	adds	r7, #8
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd80      	pop	{r7, pc}

0800ec0a <_ZNK11TestFailure15getTestNameOnlyEv>:

SimpleString TestFailure::getTestNameOnly() const
{
 800ec0a:	b580      	push	{r7, lr}
 800ec0c:	b082      	sub	sp, #8
 800ec0e:	af00      	add	r7, sp, #0
 800ec10:	6078      	str	r0, [r7, #4]
 800ec12:	6039      	str	r1, [r7, #0]
    return testNameOnly_;
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	330c      	adds	r3, #12
 800ec18:	4619      	mov	r1, r3
 800ec1a:	6878      	ldr	r0, [r7, #4]
 800ec1c:	f7fe f8c5 	bl	800cdaa <_ZN12SimpleStringC1ERKS_>
}
 800ec20:	6878      	ldr	r0, [r7, #4]
 800ec22:	3708      	adds	r7, #8
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bd80      	pop	{r7, pc}

0800ec28 <_ZNK11TestFailure20getFailureLineNumberEv>:

size_t TestFailure::getFailureLineNumber() const
{
 800ec28:	b480      	push	{r7}
 800ec2a:	b083      	sub	sp, #12
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	69db      	ldr	r3, [r3, #28]
}
 800ec34:	4618      	mov	r0, r3
 800ec36:	370c      	adds	r7, #12
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3e:	4770      	bx	lr

0800ec40 <_ZNK11TestFailure17getTestLineNumberEv>:

size_t TestFailure::getTestLineNumber() const
{
 800ec40:	b480      	push	{r7}
 800ec42:	b083      	sub	sp, #12
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
    return testLineNumber_;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	370c      	adds	r7, #12
 800ec50:	46bd      	mov	sp, r7
 800ec52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec56:	4770      	bx	lr

0800ec58 <_ZNK11TestFailure10getMessageEv>:

SimpleString TestFailure::getMessage() const
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b082      	sub	sp, #8
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
 800ec60:	6039      	str	r1, [r7, #0]
    return message_;
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	332c      	adds	r3, #44	; 0x2c
 800ec66:	4619      	mov	r1, r3
 800ec68:	6878      	ldr	r0, [r7, #4]
 800ec6a:	f7fe f89e 	bl	800cdaa <_ZN12SimpleStringC1ERKS_>
}
 800ec6e:	6878      	ldr	r0, [r7, #4]
 800ec70:	3708      	adds	r7, #8
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}

0800ec76 <_ZNK11TestFailure17isOutsideTestFileEv>:

bool TestFailure::isOutsideTestFile() const
{
 800ec76:	b580      	push	{r7, lr}
 800ec78:	b082      	sub	sp, #8
 800ec7a:	af00      	add	r7, sp, #0
 800ec7c:	6078      	str	r0, [r7, #4]
    return testFileName_ != fileName_;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f103 0220 	add.w	r2, r3, #32
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	3314      	adds	r3, #20
 800ec88:	4619      	mov	r1, r3
 800ec8a:	4610      	mov	r0, r2
 800ec8c:	f7fe fc42 	bl	800d514 <_ZneRK12SimpleStringS1_>
 800ec90:	4603      	mov	r3, r0
}
 800ec92:	4618      	mov	r0, r3
 800ec94:	3708      	adds	r7, #8
 800ec96:	46bd      	mov	sp, r7
 800ec98:	bd80      	pop	{r7, pc}

0800ec9a <_ZNK11TestFailure18isInHelperFunctionEv>:

bool TestFailure::isInHelperFunction() const
{
 800ec9a:	b480      	push	{r7}
 800ec9c:	b083      	sub	sp, #12
 800ec9e:	af00      	add	r7, sp, #0
 800eca0:	6078      	str	r0, [r7, #4]
    return lineNumber_ < testLineNumber_;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	69da      	ldr	r2, [r3, #28]
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecaa:	429a      	cmp	r2, r3
 800ecac:	bf34      	ite	cc
 800ecae:	2301      	movcc	r3, #1
 800ecb0:	2300      	movcs	r3, #0
 800ecb2:	b2db      	uxtb	r3, r3
}
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	370c      	adds	r7, #12
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbe:	4770      	bx	lr

0800ecc0 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>:

SimpleString TestFailure::createButWasString(const SimpleString& expected, const SimpleString& actual)
{
 800ecc0:	b590      	push	{r4, r7, lr}
 800ecc2:	b085      	sub	sp, #20
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	60f8      	str	r0, [r7, #12]
 800ecc8:	60b9      	str	r1, [r7, #8]
 800ecca:	607a      	str	r2, [r7, #4]
 800eccc:	603b      	str	r3, [r7, #0]
    return StringFromFormat("expected <%s>\n\tbut was  <%s>", expected.asCharString(), actual.asCharString());
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f7fe fba2 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 800ecd4:	4604      	mov	r4, r0
 800ecd6:	6838      	ldr	r0, [r7, #0]
 800ecd8:	f7fe fb9e 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	68f8      	ldr	r0, [r7, #12]
 800ece0:	4622      	mov	r2, r4
 800ece2:	4903      	ldr	r1, [pc, #12]	; (800ecf0 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_+0x30>)
 800ece4:	f7ff f8cc 	bl	800de80 <_Z16StringFromFormatPKcz>
}
 800ece8:	68f8      	ldr	r0, [r7, #12]
 800ecea:	3714      	adds	r7, #20
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd90      	pop	{r4, r7, pc}
 800ecf0:	08024748 	.word	0x08024748

0800ecf4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>:

SimpleString TestFailure::createDifferenceAtPosString(const SimpleString& actual, size_t offset, size_t reportedPosition)
{
 800ecf4:	b590      	push	{r4, r7, lr}
 800ecf6:	b097      	sub	sp, #92	; 0x5c
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	60f8      	str	r0, [r7, #12]
 800ecfc:	60b9      	str	r1, [r7, #8]
 800ecfe:	607a      	str	r2, [r7, #4]
 800ed00:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800ed02:	494c      	ldr	r1, [pc, #304]	; (800ee34 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x140>)
 800ed04:	68f8      	ldr	r0, [r7, #12]
 800ed06:	f7fd fffc 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
    const size_t extraCharactersWindow = 20;
 800ed0a:	2314      	movs	r3, #20
 800ed0c:	657b      	str	r3, [r7, #84]	; 0x54
    const size_t halfOfExtraCharactersWindow = extraCharactersWindow / 2;
 800ed0e:	230a      	movs	r3, #10
 800ed10:	653b      	str	r3, [r7, #80]	; 0x50

    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800ed12:	f107 0320 	add.w	r3, r7, #32
 800ed16:	220a      	movs	r2, #10
 800ed18:	4947      	ldr	r1, [pc, #284]	; (800ee38 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f7fe f80c 	bl	800cd38 <_ZN12SimpleStringC1EPKcj>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800ed20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ed24:	f107 0120 	add.w	r1, r7, #32
 800ed28:	687a      	ldr	r2, [r7, #4]
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f7fe fc03 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 800ed30:	f107 0318 	add.w	r3, r7, #24
 800ed34:	f107 0220 	add.w	r2, r7, #32
 800ed38:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f7fe fbfa 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 800ed42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ed46:	4618      	mov	r0, r3
 800ed48:	f7fe fb93 	bl	800d472 <_ZN12SimpleStringD1Ev>
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800ed4c:	f107 0310 	add.w	r3, r7, #16
 800ed50:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ed52:	493a      	ldr	r1, [pc, #232]	; (800ee3c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x148>)
 800ed54:	4618      	mov	r0, r3
 800ed56:	f7ff f893 	bl	800de80 <_Z16StringFromFormatPKcz>

    result += "\n";
 800ed5a:	4939      	ldr	r1, [pc, #228]	; (800ee40 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x14c>)
 800ed5c:	68f8      	ldr	r0, [r7, #12]
 800ed5e:	f7fe fc17 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    result += StringFromFormat("\t%s%s>\n", differentString.asCharString(), actualString.subString(offset, extraCharactersWindow).asCharString());
 800ed62:	f107 0310 	add.w	r3, r7, #16
 800ed66:	4618      	mov	r0, r3
 800ed68:	f7fe fb56 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 800ed6c:	4604      	mov	r4, r0
 800ed6e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800ed72:	f107 0118 	add.w	r1, r7, #24
 800ed76:	2314      	movs	r3, #20
 800ed78:	683a      	ldr	r2, [r7, #0]
 800ed7a:	f7fe fc83 	bl	800d684 <_ZNK12SimpleString9subStringEjj>
 800ed7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ed82:	4618      	mov	r0, r3
 800ed84:	f7fe fb48 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800ed8e:	4622      	mov	r2, r4
 800ed90:	492c      	ldr	r1, [pc, #176]	; (800ee44 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x150>)
 800ed92:	f7ff f875 	bl	800de80 <_Z16StringFromFormatPKcz>
 800ed96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ed9a:	4619      	mov	r1, r3
 800ed9c:	68f8      	ldr	r0, [r7, #12]
 800ed9e:	f7fe fbe5 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 800eda2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800eda6:	4618      	mov	r0, r3
 800eda8:	f7fe fb63 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800edac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800edb0:	4618      	mov	r0, r3
 800edb2:	f7fe fb5e 	bl	800d472 <_ZN12SimpleStringD1Ev>


    result += StringFromFormat("\t%s^", SimpleString(" ", (differentString.size() + halfOfExtraCharactersWindow)).asCharString());
 800edb6:	f107 0310 	add.w	r3, r7, #16
 800edba:	4618      	mov	r0, r3
 800edbc:	f7fe fb38 	bl	800d430 <_ZNK12SimpleString4sizeEv>
 800edc0:	4603      	mov	r3, r0
 800edc2:	f103 020a 	add.w	r2, r3, #10
 800edc6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800edca:	491b      	ldr	r1, [pc, #108]	; (800ee38 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800edcc:	4618      	mov	r0, r3
 800edce:	f7fd ffb3 	bl	800cd38 <_ZN12SimpleStringC1EPKcj>
 800edd2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800edd6:	4618      	mov	r0, r3
 800edd8:	f7fe fb1e 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 800eddc:	4602      	mov	r2, r0
 800edde:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ede2:	4919      	ldr	r1, [pc, #100]	; (800ee48 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x154>)
 800ede4:	4618      	mov	r0, r3
 800ede6:	f7ff f84b 	bl	800de80 <_Z16StringFromFormatPKcz>
 800edea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800edee:	4619      	mov	r1, r3
 800edf0:	68f8      	ldr	r0, [r7, #12]
 800edf2:	f7fe fbbb 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 800edf6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800edfa:	4618      	mov	r0, r3
 800edfc:	f7fe fb39 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800ee00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7fe fb34 	bl	800d472 <_ZN12SimpleStringD1Ev>
    return result;
 800ee0a:	bf00      	nop
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800ee0c:	f107 0310 	add.w	r3, r7, #16
 800ee10:	4618      	mov	r0, r3
 800ee12:	f7fe fb2e 	bl	800d472 <_ZN12SimpleStringD1Ev>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800ee16:	f107 0318 	add.w	r3, r7, #24
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f7fe fb29 	bl	800d472 <_ZN12SimpleStringD1Ev>
    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800ee20:	f107 0320 	add.w	r3, r7, #32
 800ee24:	4618      	mov	r0, r3
 800ee26:	f7fe fb24 	bl	800d472 <_ZN12SimpleStringD1Ev>
    return result;
 800ee2a:	bf00      	nop
}
 800ee2c:	68f8      	ldr	r0, [r7, #12]
 800ee2e:	375c      	adds	r7, #92	; 0x5c
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd90      	pop	{r4, r7, pc}
 800ee34:	08024768 	.word	0x08024768
 800ee38:	0802476c 	.word	0x0802476c
 800ee3c:	08024770 	.word	0x08024770
 800ee40:	08024798 	.word	0x08024798
 800ee44:	0802479c 	.word	0x0802479c
 800ee48:	080247a4 	.word	0x080247a4

0800ee4c <_ZN11TestFailure14createUserTextERK12SimpleString>:

SimpleString TestFailure::createUserText(const SimpleString& text)
{
 800ee4c:	b590      	push	{r4, r7, lr}
 800ee4e:	b087      	sub	sp, #28
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	60f8      	str	r0, [r7, #12]
 800ee54:	60b9      	str	r1, [r7, #8]
 800ee56:	607a      	str	r2, [r7, #4]
    SimpleString userMessage = "";
 800ee58:	491a      	ldr	r1, [pc, #104]	; (800eec4 <_ZN11TestFailure14createUserTextERK12SimpleString+0x78>)
 800ee5a:	68f8      	ldr	r0, [r7, #12]
 800ee5c:	f7fd ff51 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
    if (!text.isEmpty())
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	f7fe faf5 	bl	800d450 <_ZNK12SimpleString7isEmptyEv>
 800ee66:	4603      	mov	r3, r0
 800ee68:	f083 0301 	eor.w	r3, r3, #1
 800ee6c:	b2db      	uxtb	r3, r3
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d022      	beq.n	800eeb8 <_ZN11TestFailure14createUserTextERK12SimpleString+0x6c>
    {
        //This is a kludge to turn off "Message: " for this case.
        //I don't think "Message: " adds anything, as you get to see the
        //message. I propose we remove "Message: " lead in
        if (!text.startsWith("LONGS_EQUAL"))
 800ee72:	f107 0310 	add.w	r3, r7, #16
 800ee76:	4914      	ldr	r1, [pc, #80]	; (800eec8 <_ZN11TestFailure14createUserTextERK12SimpleString+0x7c>)
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f7fd ff42 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800ee7e:	f107 0310 	add.w	r3, r7, #16
 800ee82:	4619      	mov	r1, r3
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	f7fe f800 	bl	800ce8a <_ZNK12SimpleString10startsWithERKS_>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	f083 0301 	eor.w	r3, r3, #1
 800ee90:	b2dc      	uxtb	r4, r3
 800ee92:	f107 0310 	add.w	r3, r7, #16
 800ee96:	4618      	mov	r0, r3
 800ee98:	f7fe faeb 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800ee9c:	2c00      	cmp	r4, #0
 800ee9e:	d003      	beq.n	800eea8 <_ZN11TestFailure14createUserTextERK12SimpleString+0x5c>
            userMessage += "Message: ";
 800eea0:	490a      	ldr	r1, [pc, #40]	; (800eecc <_ZN11TestFailure14createUserTextERK12SimpleString+0x80>)
 800eea2:	68f8      	ldr	r0, [r7, #12]
 800eea4:	f7fe fb74 	bl	800d590 <_ZN12SimpleStringpLEPKc>
        userMessage += text;
 800eea8:	6879      	ldr	r1, [r7, #4]
 800eeaa:	68f8      	ldr	r0, [r7, #12]
 800eeac:	f7fe fb5e 	bl	800d56c <_ZN12SimpleStringpLERKS_>
        userMessage += "\n\t";
 800eeb0:	4907      	ldr	r1, [pc, #28]	; (800eed0 <_ZN11TestFailure14createUserTextERK12SimpleString+0x84>)
 800eeb2:	68f8      	ldr	r0, [r7, #12]
 800eeb4:	f7fe fb6c 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    }
    return userMessage;
 800eeb8:	bf00      	nop
}
 800eeba:	68f8      	ldr	r0, [r7, #12]
 800eebc:	371c      	adds	r7, #28
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd90      	pop	{r4, r7, pc}
 800eec2:	bf00      	nop
 800eec4:	08024768 	.word	0x08024768
 800eec8:	080247ac 	.word	0x080247ac
 800eecc:	080247b8 	.word	0x080247b8
 800eed0:	080247c4 	.word	0x080247c4

0800eed4 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:
    message_ = createUserText(text);

    message_ += createButWasString(StringFromOrNull(expected), StringFromOrNull(actual));
}

EqualsFailure::EqualsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800eed4:	b590      	push	{r4, r7, lr}
 800eed6:	b089      	sub	sp, #36	; 0x24
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	60f8      	str	r0, [r7, #12]
 800eedc:	60b9      	str	r1, [r7, #8]
 800eede:	607a      	str	r2, [r7, #4]
 800eee0:	603b      	str	r3, [r7, #0]
    : TestFailure(test, fileName, lineNumber)
 800eee2:	68f8      	ldr	r0, [r7, #12]
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	687a      	ldr	r2, [r7, #4]
 800eee8:	68b9      	ldr	r1, [r7, #8]
 800eeea:	f7ff fda7 	bl	800ea3c <_ZN11TestFailureC1EP10UtestShellPKcj>
 800eeee:	4a19      	ldr	r2, [pc, #100]	; (800ef54 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x80>)
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800eefa:	68f9      	ldr	r1, [r7, #12]
 800eefc:	f107 0310 	add.w	r3, r7, #16
 800ef00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef02:	4618      	mov	r0, r3
 800ef04:	f7ff ffa2 	bl	800ee4c <_ZN11TestFailure14createUserTextERK12SimpleString>
 800ef08:	f107 0310 	add.w	r3, r7, #16
 800ef0c:	4619      	mov	r1, r3
 800ef0e:	4620      	mov	r0, r4
 800ef10:	f7fd ff63 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 800ef14:	f107 0310 	add.w	r3, r7, #16
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f7fe faaa 	bl	800d472 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expected, actual);
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ef24:	68f9      	ldr	r1, [r7, #12]
 800ef26:	f107 0018 	add.w	r0, r7, #24
 800ef2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef2e:	f7ff fec7 	bl	800ecc0 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800ef32:	f107 0318 	add.w	r3, r7, #24
 800ef36:	4619      	mov	r1, r3
 800ef38:	4620      	mov	r0, r4
 800ef3a:	f7fe fb17 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 800ef3e:	f107 0318 	add.w	r3, r7, #24
 800ef42:	4618      	mov	r0, r3
 800ef44:	f7fe fa95 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3724      	adds	r7, #36	; 0x24
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd90      	pop	{r4, r7, pc}
 800ef52:	bf00      	nop
 800ef54:	0802864c 	.word	0x0802864c

0800ef58 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>:

DoublesEqualFailure::DoublesEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, double expected, double actual, double threshold, const SimpleString& text)
 800ef58:	b5b0      	push	{r4, r5, r7, lr}
 800ef5a:	b094      	sub	sp, #80	; 0x50
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6278      	str	r0, [r7, #36]	; 0x24
 800ef60:	6239      	str	r1, [r7, #32]
 800ef62:	61fa      	str	r2, [r7, #28]
 800ef64:	61bb      	str	r3, [r7, #24]
 800ef66:	ed87 0b04 	vstr	d0, [r7, #16]
 800ef6a:	ed87 1b02 	vstr	d1, [r7, #8]
 800ef6e:	ed87 2b00 	vstr	d2, [r7]
: TestFailure(test, fileName, lineNumber)
 800ef72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef74:	69bb      	ldr	r3, [r7, #24]
 800ef76:	69fa      	ldr	r2, [r7, #28]
 800ef78:	6a39      	ldr	r1, [r7, #32]
 800ef7a:	f7ff fd5f 	bl	800ea3c <_ZN11TestFailureC1EP10UtestShellPKcj>
 800ef7e:	4a4a      	ldr	r2, [pc, #296]	; (800f0a8 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x150>)
 800ef80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef82:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800ef84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef86:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ef8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ef90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ef92:	4618      	mov	r0, r3
 800ef94:	f7ff ff5a 	bl	800ee4c <_ZN11TestFailure14createUserTextERK12SimpleString>
 800ef98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ef9c:	4619      	mov	r1, r3
 800ef9e:	4620      	mov	r0, r4
 800efa0:	f7fd ff1b 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 800efa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800efa8:	4618      	mov	r0, r3
 800efaa:	f7fe fa62 	bl	800d472 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFrom(expected, 7), StringFrom(actual, 7));
 800efae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800efb4:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800efb6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800efba:	2107      	movs	r1, #7
 800efbc:	ed97 0b04 	vldr	d0, [r7, #16]
 800efc0:	4618      	mov	r0, r3
 800efc2:	f7fe ff1b 	bl	800ddfc <_Z10StringFromdi>
 800efc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800efca:	2107      	movs	r1, #7
 800efcc:	ed97 0b02 	vldr	d0, [r7, #8]
 800efd0:	4618      	mov	r0, r3
 800efd2:	f7fe ff13 	bl	800ddfc <_Z10StringFromdi>
 800efd6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800efda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800efde:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800efe2:	4629      	mov	r1, r5
 800efe4:	f7ff fe6c 	bl	800ecc0 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800efe8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800efec:	4619      	mov	r1, r3
 800efee:	4620      	mov	r0, r4
 800eff0:	f7fe fabc 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 800eff4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800eff8:	4618      	mov	r0, r3
 800effa:	f7fe fa3a 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800effe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f002:	4618      	mov	r0, r3
 800f004:	f7fe fa35 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800f008:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f00c:	4618      	mov	r0, r3
 800f00e:	f7fe fa30 	bl	800d472 <_ZN12SimpleStringD1Ev>
    message_ += " threshold used was <";
 800f012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f014:	332c      	adds	r3, #44	; 0x2c
 800f016:	4925      	ldr	r1, [pc, #148]	; (800f0ac <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x154>)
 800f018:	4618      	mov	r0, r3
 800f01a:	f7fe fab9 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(threshold, 7);
 800f01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f020:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f024:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f028:	2107      	movs	r1, #7
 800f02a:	ed97 0b00 	vldr	d0, [r7]
 800f02e:	4618      	mov	r0, r3
 800f030:	f7fe fee4 	bl	800ddfc <_Z10StringFromdi>
 800f034:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f038:	4619      	mov	r1, r3
 800f03a:	4620      	mov	r0, r4
 800f03c:	f7fe fa96 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 800f040:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f044:	4618      	mov	r0, r3
 800f046:	f7fe fa14 	bl	800d472 <_ZN12SimpleStringD1Ev>
    message_ += ">";
 800f04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f04c:	332c      	adds	r3, #44	; 0x2c
 800f04e:	4918      	ldr	r1, [pc, #96]	; (800f0b0 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x158>)
 800f050:	4618      	mov	r0, r3
 800f052:	f7fe fa9d 	bl	800d590 <_ZN12SimpleStringpLEPKc>

    if (PlatformSpecificIsNan(expected) || PlatformSpecificIsNan(actual) || PlatformSpecificIsNan(threshold))
 800f056:	4b17      	ldr	r3, [pc, #92]	; (800f0b4 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	ed97 0b04 	vldr	d0, [r7, #16]
 800f05e:	4798      	blx	r3
 800f060:	4603      	mov	r3, r0
 800f062:	2b00      	cmp	r3, #0
 800f064:	d10f      	bne.n	800f086 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800f066:	4b13      	ldr	r3, [pc, #76]	; (800f0b4 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	ed97 0b02 	vldr	d0, [r7, #8]
 800f06e:	4798      	blx	r3
 800f070:	4603      	mov	r3, r0
 800f072:	2b00      	cmp	r3, #0
 800f074:	d107      	bne.n	800f086 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800f076:	4b0f      	ldr	r3, [pc, #60]	; (800f0b4 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	ed97 0b00 	vldr	d0, [r7]
 800f07e:	4798      	blx	r3
 800f080:	4603      	mov	r3, r0
 800f082:	2b00      	cmp	r3, #0
 800f084:	d001      	beq.n	800f08a <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x132>
 800f086:	2301      	movs	r3, #1
 800f088:	e000      	b.n	800f08c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x134>
 800f08a:	2300      	movs	r3, #0
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d005      	beq.n	800f09c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x144>
        message_ += "\n\tCannot make comparisons with Nan";
 800f090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f092:	332c      	adds	r3, #44	; 0x2c
 800f094:	4908      	ldr	r1, [pc, #32]	; (800f0b8 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x160>)
 800f096:	4618      	mov	r0, r3
 800f098:	f7fe fa7a 	bl	800d590 <_ZN12SimpleStringpLEPKc>
}
 800f09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f09e:	4618      	mov	r0, r3
 800f0a0:	3750      	adds	r7, #80	; 0x50
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bdb0      	pop	{r4, r5, r7, pc}
 800f0a6:	bf00      	nop
 800f0a8:	08028620 	.word	0x08028620
 800f0ac:	080247c8 	.word	0x080247c8
 800f0b0:	080247e0 	.word	0x080247e0
 800f0b4:	200000e8 	.word	0x200000e8
 800f0b8:	080247e4 	.word	0x080247e4

0800f0bc <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckEqualFailure::CheckEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800f0bc:	b590      	push	{r4, r7, lr}
 800f0be:	b093      	sub	sp, #76	; 0x4c
 800f0c0:	af02      	add	r7, sp, #8
 800f0c2:	60f8      	str	r0, [r7, #12]
 800f0c4:	60b9      	str	r1, [r7, #8]
 800f0c6:	607a      	str	r2, [r7, #4]
 800f0c8:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f0ca:	68f8      	ldr	r0, [r7, #12]
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	687a      	ldr	r2, [r7, #4]
 800f0d0:	68b9      	ldr	r1, [r7, #8]
 800f0d2:	f7ff fcb3 	bl	800ea3c <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f0d6:	4a4f      	ldr	r2, [pc, #316]	; (800f214 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x158>)
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f0e2:	68f9      	ldr	r1, [r7, #12]
 800f0e4:	f107 0320 	add.w	r3, r7, #32
 800f0e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f7ff feae 	bl	800ee4c <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f0f0:	f107 0320 	add.w	r3, r7, #32
 800f0f4:	4619      	mov	r1, r3
 800f0f6:	4620      	mov	r0, r4
 800f0f8:	f7fd fe6f 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 800f0fc:	f107 0320 	add.w	r3, r7, #32
 800f100:	4618      	mov	r0, r3
 800f102:	f7fe f9b6 	bl	800d472 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800f106:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f108:	f7fe f986 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 800f10c:	4602      	mov	r2, r0
 800f10e:	f107 0318 	add.w	r3, r7, #24
 800f112:	4611      	mov	r1, r2
 800f114:	4618      	mov	r0, r3
 800f116:	f7fe fc47 	bl	800d9a8 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800f11a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f11c:	f7fe f97c 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 800f120:	4602      	mov	r2, r0
 800f122:	f107 0310 	add.w	r3, r7, #16
 800f126:	4611      	mov	r1, r2
 800f128:	4618      	mov	r0, r3
 800f12a:	f7fe fc3d 	bl	800d9a8 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f134:	68f9      	ldr	r1, [r7, #12]
 800f136:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800f13a:	f107 0310 	add.w	r3, r7, #16
 800f13e:	f107 0218 	add.w	r2, r7, #24
 800f142:	f7ff fdbd 	bl	800ecc0 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f146:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f14a:	4619      	mov	r1, r3
 800f14c:	4620      	mov	r0, r4
 800f14e:	f7fe fa0d 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 800f152:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f156:	4618      	mov	r0, r3
 800f158:	f7fe f98b 	bl	800d472 <_ZN12SimpleStringD1Ev>

    size_t failStart;
    for (failStart = 0; actual.at(failStart) == expected.at(failStart); failStart++)
 800f15c:	2300      	movs	r3, #0
 800f15e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f160:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f162:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f164:	f7fe fae9 	bl	800d73a <_ZNK12SimpleString2atEj>
 800f168:	4603      	mov	r3, r0
 800f16a:	461c      	mov	r4, r3
 800f16c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f16e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f170:	f7fe fae3 	bl	800d73a <_ZNK12SimpleString2atEj>
 800f174:	4603      	mov	r3, r0
 800f176:	429c      	cmp	r4, r3
 800f178:	bf0c      	ite	eq
 800f17a:	2301      	moveq	r3, #1
 800f17c:	2300      	movne	r3, #0
 800f17e:	b2db      	uxtb	r3, r3
 800f180:	2b00      	cmp	r3, #0
 800f182:	d003      	beq.n	800f18c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd0>
 800f184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f186:	3301      	adds	r3, #1
 800f188:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f18a:	e7e9      	b.n	800f160 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xa4>
        ;
    size_t failStartPrintable;
    for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800f18c:	2300      	movs	r3, #0
 800f18e:	63bb      	str	r3, [r7, #56]	; 0x38
 800f190:	f107 0310 	add.w	r3, r7, #16
 800f194:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f196:	4618      	mov	r0, r3
 800f198:	f7fe facf 	bl	800d73a <_ZNK12SimpleString2atEj>
 800f19c:	4603      	mov	r3, r0
 800f19e:	461c      	mov	r4, r3
 800f1a0:	f107 0318 	add.w	r3, r7, #24
 800f1a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f7fe fac7 	bl	800d73a <_ZNK12SimpleString2atEj>
 800f1ac:	4603      	mov	r3, r0
 800f1ae:	429c      	cmp	r4, r3
 800f1b0:	bf0c      	ite	eq
 800f1b2:	2301      	moveq	r3, #1
 800f1b4:	2300      	movne	r3, #0
 800f1b6:	b2db      	uxtb	r3, r3
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d003      	beq.n	800f1c4 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x108>
 800f1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1be:	3301      	adds	r3, #1
 800f1c0:	63bb      	str	r3, [r7, #56]	; 0x38
 800f1c2:	e7e5      	b.n	800f190 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd4>
        ;
    message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f1ca:	68f9      	ldr	r1, [r7, #12]
 800f1cc:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800f1d0:	f107 0210 	add.w	r2, r7, #16
 800f1d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1d6:	9300      	str	r3, [sp, #0]
 800f1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1da:	f7ff fd8b 	bl	800ecf4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800f1de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f1e2:	4619      	mov	r1, r3
 800f1e4:	4620      	mov	r0, r4
 800f1e6:	f7fe f9c1 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 800f1ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f7fe f93f 	bl	800d472 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800f1f4:	f107 0310 	add.w	r3, r7, #16
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	f7fe f93a 	bl	800d472 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800f1fe:	f107 0318 	add.w	r3, r7, #24
 800f202:	4618      	mov	r0, r3
 800f204:	f7fe f935 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	4618      	mov	r0, r3
 800f20c:	3744      	adds	r7, #68	; 0x44
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd90      	pop	{r4, r7, pc}
 800f212:	bf00      	nop
 800f214:	080285f4 	.word	0x080285f4

0800f218 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ComparisonFailure::ComparisonFailure(UtestShell *test, const char *fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString &comparisonString, const SimpleString &text)
 800f218:	b590      	push	{r4, r7, lr}
 800f21a:	b087      	sub	sp, #28
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	60f8      	str	r0, [r7, #12]
 800f220:	60b9      	str	r1, [r7, #8]
 800f222:	607a      	str	r2, [r7, #4]
 800f224:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f226:	68f8      	ldr	r0, [r7, #12]
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	687a      	ldr	r2, [r7, #4]
 800f22c:	68b9      	ldr	r1, [r7, #8]
 800f22e:	f7ff fc05 	bl	800ea3c <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f232:	4a1a      	ldr	r2, [pc, #104]	; (800f29c <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f23e:	68f9      	ldr	r1, [r7, #12]
 800f240:	f107 0310 	add.w	r3, r7, #16
 800f244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f246:	4618      	mov	r0, r3
 800f248:	f7ff fe00 	bl	800ee4c <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f24c:	f107 0310 	add.w	r3, r7, #16
 800f250:	4619      	mov	r1, r3
 800f252:	4620      	mov	r0, r4
 800f254:	f7fd fdc1 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 800f258:	f107 0310 	add.w	r3, r7, #16
 800f25c:	4618      	mov	r0, r3
 800f25e:	f7fe f908 	bl	800d472 <_ZN12SimpleStringD1Ev>
    message_ += checkString;
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	332c      	adds	r3, #44	; 0x2c
 800f266:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f268:	4618      	mov	r0, r3
 800f26a:	f7fe f97f 	bl	800d56c <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	332c      	adds	r3, #44	; 0x2c
 800f272:	490b      	ldr	r1, [pc, #44]	; (800f2a0 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800f274:	4618      	mov	r0, r3
 800f276:	f7fe f98b 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    message_ += comparisonString;
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	332c      	adds	r3, #44	; 0x2c
 800f27e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f280:	4618      	mov	r0, r3
 800f282:	f7fe f973 	bl	800d56c <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	332c      	adds	r3, #44	; 0x2c
 800f28a:	4906      	ldr	r1, [pc, #24]	; (800f2a4 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800f28c:	4618      	mov	r0, r3
 800f28e:	f7fe f97f 	bl	800d590 <_ZN12SimpleStringpLEPKc>
}
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	4618      	mov	r0, r3
 800f296:	371c      	adds	r7, #28
 800f298:	46bd      	mov	sp, r7
 800f29a:	bd90      	pop	{r4, r7, pc}
 800f29c:	080285c8 	.word	0x080285c8
 800f2a0:	08024808 	.word	0x08024808
 800f2a4:	0802480c 	.word	0x0802480c

0800f2a8 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ContainsFailure::ContainsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800f2a8:	b5b0      	push	{r4, r5, r7, lr}
 800f2aa:	b088      	sub	sp, #32
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	60f8      	str	r0, [r7, #12]
 800f2b0:	60b9      	str	r1, [r7, #8]
 800f2b2:	607a      	str	r2, [r7, #4]
 800f2b4:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f2b6:	68f8      	ldr	r0, [r7, #12]
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	687a      	ldr	r2, [r7, #4]
 800f2bc:	68b9      	ldr	r1, [r7, #8]
 800f2be:	f7ff fbbd 	bl	800ea3c <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f2c2:	4a1c      	ldr	r2, [pc, #112]	; (800f334 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f2ce:	68f9      	ldr	r1, [r7, #12]
 800f2d0:	f107 0310 	add.w	r3, r7, #16
 800f2d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f7ff fdb8 	bl	800ee4c <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f2dc:	f107 0310 	add.w	r3, r7, #16
 800f2e0:	4619      	mov	r1, r3
 800f2e2:	4620      	mov	r0, r4
 800f2e4:	f7fd fd79 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 800f2e8:	f107 0310 	add.w	r3, r7, #16
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	f7fe f8c0 	bl	800d472 <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("actual <%s>\n\tdid not contain  <%s>", actual.asCharString(), expected.asCharString());
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f2f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f2fa:	f7fe f88d 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 800f2fe:	4605      	mov	r5, r0
 800f300:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f302:	f7fe f889 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 800f306:	4603      	mov	r3, r0
 800f308:	f107 0018 	add.w	r0, r7, #24
 800f30c:	462a      	mov	r2, r5
 800f30e:	490a      	ldr	r1, [pc, #40]	; (800f338 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x90>)
 800f310:	f7fe fdb6 	bl	800de80 <_Z16StringFromFormatPKcz>
 800f314:	f107 0318 	add.w	r3, r7, #24
 800f318:	4619      	mov	r1, r3
 800f31a:	4620      	mov	r0, r4
 800f31c:	f7fe f926 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 800f320:	f107 0318 	add.w	r3, r7, #24
 800f324:	4618      	mov	r0, r3
 800f326:	f7fe f8a4 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	4618      	mov	r0, r3
 800f32e:	3720      	adds	r7, #32
 800f330:	46bd      	mov	sp, r7
 800f332:	bdb0      	pop	{r4, r5, r7, pc}
 800f334:	0802859c 	.word	0x0802859c
 800f338:	08024818 	.word	0x08024818

0800f33c <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckFailure::CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& text)
 800f33c:	b590      	push	{r4, r7, lr}
 800f33e:	b087      	sub	sp, #28
 800f340:	af00      	add	r7, sp, #0
 800f342:	60f8      	str	r0, [r7, #12]
 800f344:	60b9      	str	r1, [r7, #8]
 800f346:	607a      	str	r2, [r7, #4]
 800f348:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f34a:	68f8      	ldr	r0, [r7, #12]
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	687a      	ldr	r2, [r7, #4]
 800f350:	68b9      	ldr	r1, [r7, #8]
 800f352:	f7ff fb73 	bl	800ea3c <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f356:	4a1a      	ldr	r2, [pc, #104]	; (800f3c0 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f362:	68f9      	ldr	r1, [r7, #12]
 800f364:	f107 0310 	add.w	r3, r7, #16
 800f368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f36a:	4618      	mov	r0, r3
 800f36c:	f7ff fd6e 	bl	800ee4c <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f370:	f107 0310 	add.w	r3, r7, #16
 800f374:	4619      	mov	r1, r3
 800f376:	4620      	mov	r0, r4
 800f378:	f7fd fd2f 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 800f37c:	f107 0310 	add.w	r3, r7, #16
 800f380:	4618      	mov	r0, r3
 800f382:	f7fe f876 	bl	800d472 <_ZN12SimpleStringD1Ev>

    message_ += checkString;
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	332c      	adds	r3, #44	; 0x2c
 800f38a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f38c:	4618      	mov	r0, r3
 800f38e:	f7fe f8ed 	bl	800d56c <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	332c      	adds	r3, #44	; 0x2c
 800f396:	490b      	ldr	r1, [pc, #44]	; (800f3c4 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800f398:	4618      	mov	r0, r3
 800f39a:	f7fe f8f9 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    message_ += conditionString;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	332c      	adds	r3, #44	; 0x2c
 800f3a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f7fe f8e1 	bl	800d56c <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	332c      	adds	r3, #44	; 0x2c
 800f3ae:	4906      	ldr	r1, [pc, #24]	; (800f3c8 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	f7fe f8ed 	bl	800d590 <_ZN12SimpleStringpLEPKc>
}
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	371c      	adds	r7, #28
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	bd90      	pop	{r4, r7, pc}
 800f3c0:	08028570 	.word	0x08028570
 800f3c4:	08024808 	.word	0x08024808
 800f3c8:	0802480c 	.word	0x0802480c

0800f3cc <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>:

FailFailure::FailFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& message) : TestFailure(test, fileName, lineNumber)
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b084      	sub	sp, #16
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	60f8      	str	r0, [r7, #12]
 800f3d4:	60b9      	str	r1, [r7, #8]
 800f3d6:	607a      	str	r2, [r7, #4]
 800f3d8:	603b      	str	r3, [r7, #0]
 800f3da:	68f8      	ldr	r0, [r7, #12]
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	687a      	ldr	r2, [r7, #4]
 800f3e0:	68b9      	ldr	r1, [r7, #8]
 800f3e2:	f7ff fb2b 	bl	800ea3c <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f3e6:	4a07      	ldr	r2, [pc, #28]	; (800f404 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString+0x38>)
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	601a      	str	r2, [r3, #0]
{
    message_ = message;
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	332c      	adds	r3, #44	; 0x2c
 800f3f0:	69b9      	ldr	r1, [r7, #24]
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f7fd fcf1 	bl	800cdda <_ZN12SimpleStringaSERKS_>
}
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	3710      	adds	r7, #16
 800f3fe:	46bd      	mov	sp, r7
 800f400:	bd80      	pop	{r7, pc}
 800f402:	bf00      	nop
 800f404:	0802822c 	.word	0x0802822c

0800f408 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>:

LongsEqualFailure::LongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, long expected, long actual, const SimpleString& text)
 800f408:	b590      	push	{r4, r7, lr}
 800f40a:	b09d      	sub	sp, #116	; 0x74
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	60f8      	str	r0, [r7, #12]
 800f410:	60b9      	str	r1, [r7, #8]
 800f412:	607a      	str	r2, [r7, #4]
 800f414:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f416:	68f8      	ldr	r0, [r7, #12]
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	687a      	ldr	r2, [r7, #4]
 800f41c:	68b9      	ldr	r1, [r7, #8]
 800f41e:	f7ff fb0d 	bl	800ea3c <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f422:	4a5d      	ldr	r2, [pc, #372]	; (800f598 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x190>)
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f42e:	68f9      	ldr	r1, [r7, #12]
 800f430:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f434:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f438:	4618      	mov	r0, r3
 800f43a:	f7ff fd07 	bl	800ee4c <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f43e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f442:	4619      	mov	r1, r3
 800f444:	4620      	mov	r0, r4
 800f446:	f7fd fcc8 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 800f44a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f44e:	4618      	mov	r0, r3
 800f450:	f7fe f80f 	bl	800d472 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800f454:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f458:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f45c:	4618      	mov	r0, r3
 800f45e:	f7fe fae1 	bl	800da24 <_Z10StringFroml>
    SimpleString eDecimal = StringFrom(expected);
 800f462:	f107 0320 	add.w	r3, r7, #32
 800f466:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800f46a:	4618      	mov	r0, r3
 800f46c:	f7fe fada 	bl	800da24 <_Z10StringFroml>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800f470:	f107 0120 	add.w	r1, r7, #32
 800f474:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f478:	2220      	movs	r2, #32
 800f47a:	4618      	mov	r0, r3
 800f47c:	f7fe f8b6 	bl	800d5ec <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800f480:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f484:	4945      	ldr	r1, [pc, #276]	; (800f59c <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800f486:	4618      	mov	r0, r3
 800f488:	f7fd fc3b 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800f48c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f490:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800f494:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800f498:	4618      	mov	r0, r3
 800f49a:	f7fe f84c 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 800f49e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f4a2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f7fe fbd2 	bl	800dc50 <_Z30BracketsFormattedHexStringFroml>
 800f4ac:	f107 0318 	add.w	r3, r7, #24
 800f4b0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f4b4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	f7fe f83c 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 800f4be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f7fd ffd5 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800f4c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f7fd ffd0 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800f4d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	f7fd ffcb 	bl	800d472 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800f4dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f4e0:	492e      	ldr	r1, [pc, #184]	; (800f59c <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	f7fd fc0d 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800f4e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f4ec:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f4f0:	f107 0120 	add.w	r1, r7, #32
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	f7fe f81e 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 800f4fa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f4fe:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800f502:	4618      	mov	r0, r3
 800f504:	f7fe fba4 	bl	800dc50 <_Z30BracketsFormattedHexStringFroml>
 800f508:	f107 0310 	add.w	r3, r7, #16
 800f50c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800f510:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800f514:	4618      	mov	r0, r3
 800f516:	f7fe f80e 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 800f51a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f51e:	4618      	mov	r0, r3
 800f520:	f7fd ffa7 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800f524:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f528:	4618      	mov	r0, r3
 800f52a:	f7fd ffa2 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800f52e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f532:	4618      	mov	r0, r3
 800f534:	f7fd ff9d 	bl	800d472 <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f53e:	68f9      	ldr	r1, [r7, #12]
 800f540:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800f544:	f107 0318 	add.w	r3, r7, #24
 800f548:	f107 0210 	add.w	r2, r7, #16
 800f54c:	f7ff fbb8 	bl	800ecc0 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f550:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f554:	4619      	mov	r1, r3
 800f556:	4620      	mov	r0, r4
 800f558:	f7fe f808 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 800f55c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f560:	4618      	mov	r0, r3
 800f562:	f7fd ff86 	bl	800d472 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800f566:	f107 0310 	add.w	r3, r7, #16
 800f56a:	4618      	mov	r0, r3
 800f56c:	f7fd ff81 	bl	800d472 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800f570:	f107 0318 	add.w	r3, r7, #24
 800f574:	4618      	mov	r0, r3
 800f576:	f7fd ff7c 	bl	800d472 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800f57a:	f107 0320 	add.w	r3, r7, #32
 800f57e:	4618      	mov	r0, r3
 800f580:	f7fd ff77 	bl	800d472 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800f584:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f588:	4618      	mov	r0, r3
 800f58a:	f7fd ff72 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	4618      	mov	r0, r3
 800f592:	3774      	adds	r7, #116	; 0x74
 800f594:	46bd      	mov	sp, r7
 800f596:	bd90      	pop	{r4, r7, pc}
 800f598:	08028544 	.word	0x08028544
 800f59c:	0802476c 	.word	0x0802476c

0800f5a0 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>:

UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, const SimpleString& text)
 800f5a0:	b590      	push	{r4, r7, lr}
 800f5a2:	b09d      	sub	sp, #116	; 0x74
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	60f8      	str	r0, [r7, #12]
 800f5a8:	60b9      	str	r1, [r7, #8]
 800f5aa:	607a      	str	r2, [r7, #4]
 800f5ac:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f5ae:	68f8      	ldr	r0, [r7, #12]
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	687a      	ldr	r2, [r7, #4]
 800f5b4:	68b9      	ldr	r1, [r7, #8]
 800f5b6:	f7ff fa41 	bl	800ea3c <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f5ba:	4a5d      	ldr	r2, [pc, #372]	; (800f730 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x190>)
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f5c6:	68f9      	ldr	r1, [r7, #12]
 800f5c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f5cc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f7ff fc3b 	bl	800ee4c <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f5d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f5da:	4619      	mov	r1, r3
 800f5dc:	4620      	mov	r0, r4
 800f5de:	f7fd fbfc 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 800f5e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f7fd ff43 	bl	800d472 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800f5ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f5f0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	f7fe fc7d 	bl	800def4 <_Z10StringFromm>
    SimpleString eDecimal = StringFrom(expected);
 800f5fa:	f107 0320 	add.w	r3, r7, #32
 800f5fe:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800f602:	4618      	mov	r0, r3
 800f604:	f7fe fc76 	bl	800def4 <_Z10StringFromm>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800f608:	f107 0120 	add.w	r1, r7, #32
 800f60c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f610:	2220      	movs	r2, #32
 800f612:	4618      	mov	r0, r3
 800f614:	f7fd ffea 	bl	800d5ec <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800f618:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f61c:	4945      	ldr	r1, [pc, #276]	; (800f734 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800f61e:	4618      	mov	r0, r3
 800f620:	f7fd fb6f 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800f624:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f628:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800f62c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800f630:	4618      	mov	r0, r3
 800f632:	f7fd ff80 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 800f636:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f63a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f63e:	4618      	mov	r0, r3
 800f640:	f7fe fb22 	bl	800dc88 <_Z30BracketsFormattedHexStringFromm>
 800f644:	f107 0318 	add.w	r3, r7, #24
 800f648:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f64c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800f650:	4618      	mov	r0, r3
 800f652:	f7fd ff70 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 800f656:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f65a:	4618      	mov	r0, r3
 800f65c:	f7fd ff09 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800f660:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f664:	4618      	mov	r0, r3
 800f666:	f7fd ff04 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800f66a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f66e:	4618      	mov	r0, r3
 800f670:	f7fd feff 	bl	800d472 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800f674:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f678:	492e      	ldr	r1, [pc, #184]	; (800f734 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800f67a:	4618      	mov	r0, r3
 800f67c:	f7fd fb41 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800f680:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f684:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f688:	f107 0120 	add.w	r1, r7, #32
 800f68c:	4618      	mov	r0, r3
 800f68e:	f7fd ff52 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 800f692:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f696:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800f69a:	4618      	mov	r0, r3
 800f69c:	f7fe faf4 	bl	800dc88 <_Z30BracketsFormattedHexStringFromm>
 800f6a0:	f107 0310 	add.w	r3, r7, #16
 800f6a4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800f6a8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f7fd ff42 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 800f6b2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f7fd fedb 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800f6bc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f7fd fed6 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800f6c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f7fd fed1 	bl	800d472 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expectedReported, actualReported);
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f6d6:	68f9      	ldr	r1, [r7, #12]
 800f6d8:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800f6dc:	f107 0318 	add.w	r3, r7, #24
 800f6e0:	f107 0210 	add.w	r2, r7, #16
 800f6e4:	f7ff faec 	bl	800ecc0 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f6e8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f6ec:	4619      	mov	r1, r3
 800f6ee:	4620      	mov	r0, r4
 800f6f0:	f7fd ff3c 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 800f6f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f7fd feba 	bl	800d472 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800f6fe:	f107 0310 	add.w	r3, r7, #16
 800f702:	4618      	mov	r0, r3
 800f704:	f7fd feb5 	bl	800d472 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800f708:	f107 0318 	add.w	r3, r7, #24
 800f70c:	4618      	mov	r0, r3
 800f70e:	f7fd feb0 	bl	800d472 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800f712:	f107 0320 	add.w	r3, r7, #32
 800f716:	4618      	mov	r0, r3
 800f718:	f7fd feab 	bl	800d472 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800f71c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f720:	4618      	mov	r0, r3
 800f722:	f7fd fea6 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	4618      	mov	r0, r3
 800f72a:	3774      	adds	r7, #116	; 0x74
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bd90      	pop	{r4, r7, pc}
 800f730:	08028518 	.word	0x08028518
 800f734:	0802476c 	.word	0x0802476c

0800f738 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>:
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
    message_ += createButWasString(expectedReported, actualReported);
}

SignedBytesEqualFailure::SignedBytesEqualFailure (UtestShell* test, const char* fileName, size_t lineNumber, signed char expected, signed char actual, const SimpleString& text)
 800f738:	b590      	push	{r4, r7, lr}
 800f73a:	b09d      	sub	sp, #116	; 0x74
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	60f8      	str	r0, [r7, #12]
 800f740:	60b9      	str	r1, [r7, #8]
 800f742:	607a      	str	r2, [r7, #4]
 800f744:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f746:	68f8      	ldr	r0, [r7, #12]
 800f748:	683b      	ldr	r3, [r7, #0]
 800f74a:	687a      	ldr	r2, [r7, #4]
 800f74c:	68b9      	ldr	r1, [r7, #8]
 800f74e:	f7ff f975 	bl	800ea3c <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f752:	4a5f      	ldr	r2, [pc, #380]	; (800f8d0 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x198>)
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f75e:	68f9      	ldr	r1, [r7, #12]
 800f760:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f764:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f768:	4618      	mov	r0, r3
 800f76a:	f7ff fb6f 	bl	800ee4c <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f76e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f772:	4619      	mov	r1, r3
 800f774:	4620      	mov	r0, r4
 800f776:	f7fd fb30 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 800f77a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f77e:	4618      	mov	r0, r3
 800f780:	f7fd fe77 	bl	800d472 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom((int)actual);
 800f784:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800f788:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f78c:	4611      	mov	r1, r2
 800f78e:	4618      	mov	r0, r3
 800f790:	f7fe f936 	bl	800da00 <_Z10StringFromi>
    SimpleString eDecimal = StringFrom((int)expected);
 800f794:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800f798:	f107 0320 	add.w	r3, r7, #32
 800f79c:	4611      	mov	r1, r2
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f7fe f92e 	bl	800da00 <_Z10StringFromi>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800f7a4:	f107 0120 	add.w	r1, r7, #32
 800f7a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f7ac:	2220      	movs	r2, #32
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f7fd ff1c 	bl	800d5ec <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800f7b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f7b8:	4946      	ldr	r1, [pc, #280]	; (800f8d4 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f7fd faa1 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800f7c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f7c4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800f7c8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f7fd feb2 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 800f7d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f7d6:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800f7da:	4611      	mov	r1, r2
 800f7dc:	4618      	mov	r0, r3
 800f7de:	f7fe fa6f 	bl	800dcc0 <_Z30BracketsFormattedHexStringFroma>
 800f7e2:	f107 0318 	add.w	r3, r7, #24
 800f7e6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f7ea:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f7fd fea1 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 800f7f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	f7fd fe3a 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800f7fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f802:	4618      	mov	r0, r3
 800f804:	f7fd fe35 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800f808:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f80c:	4618      	mov	r0, r3
 800f80e:	f7fd fe30 	bl	800d472 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800f812:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f816:	492f      	ldr	r1, [pc, #188]	; (800f8d4 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800f818:	4618      	mov	r0, r3
 800f81a:	f7fd fa72 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 800f81e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f822:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f826:	f107 0120 	add.w	r1, r7, #32
 800f82a:	4618      	mov	r0, r3
 800f82c:	f7fd fe83 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 800f830:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f834:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800f838:	4611      	mov	r1, r2
 800f83a:	4618      	mov	r0, r3
 800f83c:	f7fe fa40 	bl	800dcc0 <_Z30BracketsFormattedHexStringFroma>
 800f840:	f107 0310 	add.w	r3, r7, #16
 800f844:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800f848:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800f84c:	4618      	mov	r0, r3
 800f84e:	f7fd fe72 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 800f852:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f856:	4618      	mov	r0, r3
 800f858:	f7fd fe0b 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800f85c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f860:	4618      	mov	r0, r3
 800f862:	f7fd fe06 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800f866:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f86a:	4618      	mov	r0, r3
 800f86c:	f7fd fe01 	bl	800d472 <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f876:	68f9      	ldr	r1, [r7, #12]
 800f878:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800f87c:	f107 0318 	add.w	r3, r7, #24
 800f880:	f107 0210 	add.w	r2, r7, #16
 800f884:	f7ff fa1c 	bl	800ecc0 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f888:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f88c:	4619      	mov	r1, r3
 800f88e:	4620      	mov	r0, r4
 800f890:	f7fd fe6c 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 800f894:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f898:	4618      	mov	r0, r3
 800f89a:	f7fd fdea 	bl	800d472 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800f89e:	f107 0310 	add.w	r3, r7, #16
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f7fd fde5 	bl	800d472 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800f8a8:	f107 0318 	add.w	r3, r7, #24
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f7fd fde0 	bl	800d472 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom((int)expected);
 800f8b2:	f107 0320 	add.w	r3, r7, #32
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f7fd fddb 	bl	800d472 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom((int)actual);
 800f8bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	f7fd fdd6 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	3774      	adds	r7, #116	; 0x74
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	bd90      	pop	{r4, r7, pc}
 800f8d0:	080284ec 	.word	0x080284ec
 800f8d4:	0802476c 	.word	0x0802476c

0800f8d8 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualFailure::StringEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800f8d8:	b590      	push	{r4, r7, lr}
 800f8da:	b093      	sub	sp, #76	; 0x4c
 800f8dc:	af02      	add	r7, sp, #8
 800f8de:	60f8      	str	r0, [r7, #12]
 800f8e0:	60b9      	str	r1, [r7, #8]
 800f8e2:	607a      	str	r2, [r7, #4]
 800f8e4:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f8e6:	68f8      	ldr	r0, [r7, #12]
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	687a      	ldr	r2, [r7, #4]
 800f8ec:	68b9      	ldr	r1, [r7, #8]
 800f8ee:	f7ff f8a5 	bl	800ea3c <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f8f2:	4a4a      	ldr	r2, [pc, #296]	; (800fa1c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x144>)
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f8fe:	68f9      	ldr	r1, [r7, #12]
 800f900:	f107 0320 	add.w	r3, r7, #32
 800f904:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f906:	4618      	mov	r0, r3
 800f908:	f7ff faa0 	bl	800ee4c <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f90c:	f107 0320 	add.w	r3, r7, #32
 800f910:	4619      	mov	r1, r3
 800f912:	4620      	mov	r0, r4
 800f914:	f7fd fa61 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 800f918:	f107 0320 	add.w	r3, r7, #32
 800f91c:	4618      	mov	r0, r3
 800f91e:	f7fd fda8 	bl	800d472 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800f922:	f107 0318 	add.w	r3, r7, #24
 800f926:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f928:	4618      	mov	r0, r3
 800f92a:	f7fe f83d 	bl	800d9a8 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800f92e:	f107 0310 	add.w	r3, r7, #16
 800f932:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f934:	4618      	mov	r0, r3
 800f936:	f7fe f837 	bl	800d9a8 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f940:	68f9      	ldr	r1, [r7, #12]
 800f942:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800f946:	f107 0310 	add.w	r3, r7, #16
 800f94a:	f107 0218 	add.w	r2, r7, #24
 800f94e:	f7ff f9b7 	bl	800ecc0 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f952:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f956:	4619      	mov	r1, r3
 800f958:	4620      	mov	r0, r4
 800f95a:	f7fd fe07 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 800f95e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f962:	4618      	mov	r0, r3
 800f964:	f7fd fd85 	bl	800d472 <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800f968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d046      	beq.n	800f9fc <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
 800f96e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f970:	2b00      	cmp	r3, #0
 800f972:	d043      	beq.n	800f9fc <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
    {
        size_t failStart;
        for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800f974:	2300      	movs	r3, #0
 800f976:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f978:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f97a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f97c:	4413      	add	r3, r2
 800f97e:	781a      	ldrb	r2, [r3, #0]
 800f980:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f984:	440b      	add	r3, r1
 800f986:	781b      	ldrb	r3, [r3, #0]
 800f988:	429a      	cmp	r2, r3
 800f98a:	d103      	bne.n	800f994 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xbc>
 800f98c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f98e:	3301      	adds	r3, #1
 800f990:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f992:	e7f1      	b.n	800f978 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800f994:	2300      	movs	r3, #0
 800f996:	63bb      	str	r3, [r7, #56]	; 0x38
 800f998:	f107 0310 	add.w	r3, r7, #16
 800f99c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f7fd fecb 	bl	800d73a <_ZNK12SimpleString2atEj>
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	461c      	mov	r4, r3
 800f9a8:	f107 0318 	add.w	r3, r7, #24
 800f9ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f7fd fec3 	bl	800d73a <_ZNK12SimpleString2atEj>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	429c      	cmp	r4, r3
 800f9b8:	bf0c      	ite	eq
 800f9ba:	2301      	moveq	r3, #1
 800f9bc:	2300      	movne	r3, #0
 800f9be:	b2db      	uxtb	r3, r3
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d003      	beq.n	800f9cc <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xf4>
 800f9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9c6:	3301      	adds	r3, #1
 800f9c8:	63bb      	str	r3, [r7, #56]	; 0x38
 800f9ca:	e7e5      	b.n	800f998 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xc0>
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f9d2:	68f9      	ldr	r1, [r7, #12]
 800f9d4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800f9d8:	f107 0210 	add.w	r2, r7, #16
 800f9dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9de:	9300      	str	r3, [sp, #0]
 800f9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9e2:	f7ff f987 	bl	800ecf4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800f9e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f9ea:	4619      	mov	r1, r3
 800f9ec:	4620      	mov	r0, r4
 800f9ee:	f7fd fdbd 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 800f9f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7fd fd3b 	bl	800d472 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800f9fc:	f107 0310 	add.w	r3, r7, #16
 800fa00:	4618      	mov	r0, r3
 800fa02:	f7fd fd36 	bl	800d472 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800fa06:	f107 0318 	add.w	r3, r7, #24
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f7fd fd31 	bl	800d472 <_ZN12SimpleStringD1Ev>
    }
}
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	4618      	mov	r0, r3
 800fa14:	3744      	adds	r7, #68	; 0x44
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd90      	pop	{r4, r7, pc}
 800fa1a:	bf00      	nop
 800fa1c:	080284c0 	.word	0x080284c0

0800fa20 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800fa20:	b590      	push	{r4, r7, lr}
 800fa22:	b093      	sub	sp, #76	; 0x4c
 800fa24:	af02      	add	r7, sp, #8
 800fa26:	60f8      	str	r0, [r7, #12]
 800fa28:	60b9      	str	r1, [r7, #8]
 800fa2a:	607a      	str	r2, [r7, #4]
 800fa2c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800fa2e:	68f8      	ldr	r0, [r7, #12]
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	687a      	ldr	r2, [r7, #4]
 800fa34:	68b9      	ldr	r1, [r7, #8]
 800fa36:	f7ff f801 	bl	800ea3c <_ZN11TestFailureC1EP10UtestShellPKcj>
 800fa3a:	4a55      	ldr	r2, [pc, #340]	; (800fb90 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x170>)
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fa46:	68f9      	ldr	r1, [r7, #12]
 800fa48:	f107 0320 	add.w	r3, r7, #32
 800fa4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fa4e:	4618      	mov	r0, r3
 800fa50:	f7ff f9fc 	bl	800ee4c <_ZN11TestFailure14createUserTextERK12SimpleString>
 800fa54:	f107 0320 	add.w	r3, r7, #32
 800fa58:	4619      	mov	r1, r3
 800fa5a:	4620      	mov	r0, r4
 800fa5c:	f7fd f9bd 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 800fa60:	f107 0320 	add.w	r3, r7, #32
 800fa64:	4618      	mov	r0, r3
 800fa66:	f7fd fd04 	bl	800d472 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800fa6a:	f107 0318 	add.w	r3, r7, #24
 800fa6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fa70:	4618      	mov	r0, r3
 800fa72:	f7fd ff99 	bl	800d9a8 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800fa76:	f107 0310 	add.w	r3, r7, #16
 800fa7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	f7fd ff93 	bl	800d9a8 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fa88:	68f9      	ldr	r1, [r7, #12]
 800fa8a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800fa8e:	f107 0310 	add.w	r3, r7, #16
 800fa92:	f107 0218 	add.w	r2, r7, #24
 800fa96:	f7ff f913 	bl	800ecc0 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800fa9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fa9e:	4619      	mov	r1, r3
 800faa0:	4620      	mov	r0, r4
 800faa2:	f7fd fd63 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 800faa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800faaa:	4618      	mov	r0, r3
 800faac:	f7fd fce1 	bl	800d472 <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800fab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d05c      	beq.n	800fb70 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
 800fab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d059      	beq.n	800fb70 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
    {
        size_t failStart;
        for (failStart = 0; SimpleString::ToLower(actual[failStart]) == SimpleString::ToLower(expected[failStart]); failStart++)
 800fabc:	2300      	movs	r3, #0
 800fabe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fac0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fac4:	4413      	add	r3, r2
 800fac6:	781b      	ldrb	r3, [r3, #0]
 800fac8:	4618      	mov	r0, r3
 800faca:	f7fd f824 	bl	800cb16 <_ZN12SimpleString7ToLowerEc>
 800face:	4603      	mov	r3, r0
 800fad0:	461c      	mov	r4, r3
 800fad2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fad6:	4413      	add	r3, r2
 800fad8:	781b      	ldrb	r3, [r3, #0]
 800fada:	4618      	mov	r0, r3
 800fadc:	f7fd f81b 	bl	800cb16 <_ZN12SimpleString7ToLowerEc>
 800fae0:	4603      	mov	r3, r0
 800fae2:	429c      	cmp	r4, r3
 800fae4:	bf0c      	ite	eq
 800fae6:	2301      	moveq	r3, #1
 800fae8:	2300      	movne	r3, #0
 800faea:	b2db      	uxtb	r3, r3
 800faec:	2b00      	cmp	r3, #0
 800faee:	d003      	beq.n	800faf8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xd8>
 800faf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800faf2:	3301      	adds	r3, #1
 800faf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800faf6:	e7e3      	b.n	800fac0 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0;
 800faf8:	2300      	movs	r3, #0
 800fafa:	63bb      	str	r3, [r7, #56]	; 0x38
             SimpleString::ToLower(printableActual.at(failStartPrintable)) == SimpleString::ToLower(printableExpected.at(failStartPrintable));
 800fafc:	f107 0310 	add.w	r3, r7, #16
 800fb00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fb02:	4618      	mov	r0, r3
 800fb04:	f7fd fe19 	bl	800d73a <_ZNK12SimpleString2atEj>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	f7fd f803 	bl	800cb16 <_ZN12SimpleString7ToLowerEc>
 800fb10:	4603      	mov	r3, r0
 800fb12:	461c      	mov	r4, r3
 800fb14:	f107 0318 	add.w	r3, r7, #24
 800fb18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7fd fe0d 	bl	800d73a <_ZNK12SimpleString2atEj>
 800fb20:	4603      	mov	r3, r0
 800fb22:	4618      	mov	r0, r3
 800fb24:	f7fc fff7 	bl	800cb16 <_ZN12SimpleString7ToLowerEc>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	429c      	cmp	r4, r3
 800fb2c:	bf0c      	ite	eq
 800fb2e:	2301      	moveq	r3, #1
 800fb30:	2300      	movne	r3, #0
 800fb32:	b2db      	uxtb	r3, r3
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d003      	beq.n	800fb40 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x120>
        for (failStartPrintable = 0;
 800fb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb3a:	3301      	adds	r3, #1
 800fb3c:	63bb      	str	r3, [r7, #56]	; 0x38
 800fb3e:	e7dd      	b.n	800fafc <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xdc>
             failStartPrintable++)
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fb46:	68f9      	ldr	r1, [r7, #12]
 800fb48:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800fb4c:	f107 0210 	add.w	r2, r7, #16
 800fb50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb52:	9300      	str	r3, [sp, #0]
 800fb54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb56:	f7ff f8cd 	bl	800ecf4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800fb5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fb5e:	4619      	mov	r1, r3
 800fb60:	4620      	mov	r0, r4
 800fb62:	f7fd fd03 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 800fb66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f7fd fc81 	bl	800d472 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800fb70:	f107 0310 	add.w	r3, r7, #16
 800fb74:	4618      	mov	r0, r3
 800fb76:	f7fd fc7c 	bl	800d472 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800fb7a:	f107 0318 	add.w	r3, r7, #24
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f7fd fc77 	bl	800d472 <_ZN12SimpleStringD1Ev>
    }
}
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	4618      	mov	r0, r3
 800fb88:	3744      	adds	r7, #68	; 0x44
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd90      	pop	{r4, r7, pc}
 800fb8e:	bf00      	nop
 800fb90:	08028494 	.word	0x08028494

0800fb94 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>:

BinaryEqualFailure::BinaryEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const unsigned char* expected,
 800fb94:	b5b0      	push	{r4, r5, r7, lr}
 800fb96:	b092      	sub	sp, #72	; 0x48
 800fb98:	af02      	add	r7, sp, #8
 800fb9a:	60f8      	str	r0, [r7, #12]
 800fb9c:	60b9      	str	r1, [r7, #8]
 800fb9e:	607a      	str	r2, [r7, #4]
 800fba0:	603b      	str	r3, [r7, #0]
                                       const unsigned char* actual, size_t size, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800fba2:	68f8      	ldr	r0, [r7, #12]
 800fba4:	683b      	ldr	r3, [r7, #0]
 800fba6:	687a      	ldr	r2, [r7, #4]
 800fba8:	68b9      	ldr	r1, [r7, #8]
 800fbaa:	f7fe ff47 	bl	800ea3c <_ZN11TestFailureC1EP10UtestShellPKcj>
 800fbae:	4a40      	ldr	r2, [pc, #256]	; (800fcb0 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x11c>)
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fbba:	68f9      	ldr	r1, [r7, #12]
 800fbbc:	f107 031c 	add.w	r3, r7, #28
 800fbc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	f7ff f942 	bl	800ee4c <_ZN11TestFailure14createUserTextERK12SimpleString>
 800fbc8:	f107 031c 	add.w	r3, r7, #28
 800fbcc:	4619      	mov	r1, r3
 800fbce:	4620      	mov	r0, r4
 800fbd0:	f7fd f903 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 800fbd4:	f107 031c 	add.w	r3, r7, #28
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f7fd fc4a 	bl	800d472 <_ZN12SimpleStringD1Ev>

    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800fbde:	f107 0314 	add.w	r3, r7, #20
 800fbe2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fbe4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f7fe fa4c 	bl	800e084 <_Z22StringFromBinaryOrNullPKhj>

	message_ += createButWasString(StringFromBinaryOrNull(expected, size), actualHex);
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fbf2:	68fd      	ldr	r5, [r7, #12]
 800fbf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fbf8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fbfa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f7fe fa41 	bl	800e084 <_Z22StringFromBinaryOrNullPKhj>
 800fc02:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fc06:	f107 0314 	add.w	r3, r7, #20
 800fc0a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800fc0e:	4629      	mov	r1, r5
 800fc10:	f7ff f856 	bl	800ecc0 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800fc14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fc18:	4619      	mov	r1, r3
 800fc1a:	4620      	mov	r0, r4
 800fc1c:	f7fd fca6 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 800fc20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fc24:	4618      	mov	r0, r3
 800fc26:	f7fd fc24 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800fc2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fc2e:	4618      	mov	r0, r3
 800fc30:	f7fd fc1f 	bl	800d472 <_ZN12SimpleStringD1Ev>
	if ((expected) && (actual))
 800fc34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d02f      	beq.n	800fc9a <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
 800fc3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d02c      	beq.n	800fc9a <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
	{
		size_t failStart;
		for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800fc40:	2300      	movs	r3, #0
 800fc42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fc44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fc46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc48:	4413      	add	r3, r2
 800fc4a:	781a      	ldrb	r2, [r3, #0]
 800fc4c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fc4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc50:	440b      	add	r3, r1
 800fc52:	781b      	ldrb	r3, [r3, #0]
 800fc54:	429a      	cmp	r2, r3
 800fc56:	d103      	bne.n	800fc60 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xcc>
 800fc58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc5a:	3301      	adds	r3, #1
 800fc5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fc5e:	e7f1      	b.n	800fc44 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xb0>
			;
		message_ += createDifferenceAtPosString(actualHex, (failStart * 3 + 1), failStart);
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fc66:	68f9      	ldr	r1, [r7, #12]
 800fc68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fc6a:	4613      	mov	r3, r2
 800fc6c:	005b      	lsls	r3, r3, #1
 800fc6e:	4413      	add	r3, r2
 800fc70:	1c5d      	adds	r5, r3, #1
 800fc72:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800fc76:	f107 0214 	add.w	r2, r7, #20
 800fc7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc7c:	9300      	str	r3, [sp, #0]
 800fc7e:	462b      	mov	r3, r5
 800fc80:	f7ff f838 	bl	800ecf4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800fc84:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800fc88:	4619      	mov	r1, r3
 800fc8a:	4620      	mov	r0, r4
 800fc8c:	f7fd fc6e 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 800fc90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800fc94:	4618      	mov	r0, r3
 800fc96:	f7fd fbec 	bl	800d472 <_ZN12SimpleStringD1Ev>
    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800fc9a:	f107 0314 	add.w	r3, r7, #20
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f7fd fbe7 	bl	800d472 <_ZN12SimpleStringD1Ev>
	}
}
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	4618      	mov	r0, r3
 800fca8:	3740      	adds	r7, #64	; 0x40
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	bdb0      	pop	{r4, r5, r7, pc}
 800fcae:	bf00      	nop
 800fcb0:	08028468 	.word	0x08028468

0800fcb4 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>:

BitsEqualFailure::BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual,
 800fcb4:	b5b0      	push	{r4, r5, r7, lr}
 800fcb6:	b08c      	sub	sp, #48	; 0x30
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	60f8      	str	r0, [r7, #12]
 800fcbc:	60b9      	str	r1, [r7, #8]
 800fcbe:	607a      	str	r2, [r7, #4]
 800fcc0:	603b      	str	r3, [r7, #0]
                                   unsigned long mask, size_t byteCount, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800fcc2:	68f8      	ldr	r0, [r7, #12]
 800fcc4:	683b      	ldr	r3, [r7, #0]
 800fcc6:	687a      	ldr	r2, [r7, #4]
 800fcc8:	68b9      	ldr	r1, [r7, #8]
 800fcca:	f7fe feb7 	bl	800ea3c <_ZN11TestFailureC1EP10UtestShellPKcj>
 800fcce:	4a26      	ldr	r2, [pc, #152]	; (800fd68 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString+0xb4>)
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fcda:	68f9      	ldr	r1, [r7, #12]
 800fcdc:	f107 0310 	add.w	r3, r7, #16
 800fce0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fce2:	4618      	mov	r0, r3
 800fce4:	f7ff f8b2 	bl	800ee4c <_ZN11TestFailure14createUserTextERK12SimpleString>
 800fce8:	f107 0310 	add.w	r3, r7, #16
 800fcec:	4619      	mov	r1, r3
 800fcee:	4620      	mov	r0, r4
 800fcf0:	f7fd f873 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 800fcf4:	f107 0310 	add.w	r3, r7, #16
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	f7fd fbba 	bl	800d472 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFromMaskedBits(expected, mask, byteCount), StringFromMaskedBits(actual, mask, byteCount));
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fd04:	68fd      	ldr	r5, [r7, #12]
 800fd06:	f107 0020 	add.w	r0, r7, #32
 800fd0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fd10:	f7fe fa24 	bl	800e15c <_Z20StringFromMaskedBitsmmj>
 800fd14:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800fd18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd1c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fd1e:	f7fe fa1d 	bl	800e15c <_Z20StringFromMaskedBitsmmj>
 800fd22:	f107 0018 	add.w	r0, r7, #24
 800fd26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fd2a:	f107 0220 	add.w	r2, r7, #32
 800fd2e:	4629      	mov	r1, r5
 800fd30:	f7fe ffc6 	bl	800ecc0 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800fd34:	f107 0318 	add.w	r3, r7, #24
 800fd38:	4619      	mov	r1, r3
 800fd3a:	4620      	mov	r0, r4
 800fd3c:	f7fd fc16 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 800fd40:	f107 0318 	add.w	r3, r7, #24
 800fd44:	4618      	mov	r0, r3
 800fd46:	f7fd fb94 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800fd4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f7fd fb8f 	bl	800d472 <_ZN12SimpleStringD1Ev>
 800fd54:	f107 0320 	add.w	r3, r7, #32
 800fd58:	4618      	mov	r0, r3
 800fd5a:	f7fd fb8a 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	4618      	mov	r0, r3
 800fd62:	3730      	adds	r7, #48	; 0x30
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bdb0      	pop	{r4, r5, r7, pc}
 800fd68:	0802843c 	.word	0x0802843c

0800fd6c <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>:

FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell* test, const char* fileName, size_t lineNumber,
 800fd6c:	b590      	push	{r4, r7, lr}
 800fd6e:	b089      	sub	sp, #36	; 0x24
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	60f8      	str	r0, [r7, #12]
 800fd74:	60b9      	str	r1, [r7, #8]
 800fd76:	607a      	str	r2, [r7, #4]
 800fd78:	603b      	str	r3, [r7, #0]
                                                     const SimpleString& featureName, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800fd7a:	68f8      	ldr	r0, [r7, #12]
 800fd7c:	683b      	ldr	r3, [r7, #0]
 800fd7e:	687a      	ldr	r2, [r7, #4]
 800fd80:	68b9      	ldr	r1, [r7, #8]
 800fd82:	f7fe fe5b 	bl	800ea3c <_ZN11TestFailureC1EP10UtestShellPKcj>
 800fd86:	4a1a      	ldr	r2, [pc, #104]	; (800fdf0 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x84>)
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fd92:	68f9      	ldr	r1, [r7, #12]
 800fd94:	f107 0310 	add.w	r3, r7, #16
 800fd98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	f7ff f856 	bl	800ee4c <_ZN11TestFailure14createUserTextERK12SimpleString>
 800fda0:	f107 0310 	add.w	r3, r7, #16
 800fda4:	4619      	mov	r1, r3
 800fda6:	4620      	mov	r0, r4
 800fda8:	f7fd f817 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 800fdac:	f107 0310 	add.w	r3, r7, #16
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f7fd fb5e 	bl	800d472 <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("The feature \"%s\" is not supported in this environment or with the feature set selected when building the library.", featureName.asCharString());
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fdbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fdbe:	f7fd fb2b 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 800fdc2:	4602      	mov	r2, r0
 800fdc4:	f107 0318 	add.w	r3, r7, #24
 800fdc8:	490a      	ldr	r1, [pc, #40]	; (800fdf4 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x88>)
 800fdca:	4618      	mov	r0, r3
 800fdcc:	f7fe f858 	bl	800de80 <_Z16StringFromFormatPKcz>
 800fdd0:	f107 0318 	add.w	r3, r7, #24
 800fdd4:	4619      	mov	r1, r3
 800fdd6:	4620      	mov	r0, r4
 800fdd8:	f7fd fbc8 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 800fddc:	f107 0318 	add.w	r3, r7, #24
 800fde0:	4618      	mov	r0, r3
 800fde2:	f7fd fb46 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	4618      	mov	r0, r3
 800fdea:	3724      	adds	r7, #36	; 0x24
 800fdec:	46bd      	mov	sp, r7
 800fdee:	bd90      	pop	{r4, r7, pc}
 800fdf0:	08028410 	.word	0x08028410
 800fdf4:	0802483c 	.word	0x0802483c

0800fdf8 <_ZN25FeatureUnsupportedFailureD1Ev>:
{
public:
	BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const SimpleString& text);
};

class FeatureUnsupportedFailure : public TestFailure
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b082      	sub	sp, #8
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
 800fe00:	4a05      	ldr	r2, [pc, #20]	; (800fe18 <_ZN25FeatureUnsupportedFailureD1Ev+0x20>)
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	601a      	str	r2, [r3, #0]
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f7fe fe99 	bl	800eb40 <_ZN11TestFailureD1Ev>
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	4618      	mov	r0, r3
 800fe12:	3708      	adds	r7, #8
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd80      	pop	{r7, pc}
 800fe18:	08028410 	.word	0x08028410

0800fe1c <_ZN25FeatureUnsupportedFailureD0Ev>:
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b082      	sub	sp, #8
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
 800fe24:	6878      	ldr	r0, [r7, #4]
 800fe26:	f7ff ffe7 	bl	800fdf8 <_ZN25FeatureUnsupportedFailureD1Ev>
 800fe2a:	2134      	movs	r1, #52	; 0x34
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f7fa fbb9 	bl	800a5a4 <_ZdlPvj>
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	4618      	mov	r0, r3
 800fe36:	3708      	adds	r7, #8
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bd80      	pop	{r7, pc}

0800fe3c <_ZN16BitsEqualFailureD1Ev>:
class BitsEqualFailure : public TestFailure
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b082      	sub	sp, #8
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
 800fe44:	4a05      	ldr	r2, [pc, #20]	; (800fe5c <_ZN16BitsEqualFailureD1Ev+0x20>)
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	601a      	str	r2, [r3, #0]
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f7fe fe77 	bl	800eb40 <_ZN11TestFailureD1Ev>
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	4618      	mov	r0, r3
 800fe56:	3708      	adds	r7, #8
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd80      	pop	{r7, pc}
 800fe5c:	0802843c 	.word	0x0802843c

0800fe60 <_ZN16BitsEqualFailureD0Ev>:
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b082      	sub	sp, #8
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f7ff ffe7 	bl	800fe3c <_ZN16BitsEqualFailureD1Ev>
 800fe6e:	2134      	movs	r1, #52	; 0x34
 800fe70:	6878      	ldr	r0, [r7, #4]
 800fe72:	f7fa fb97 	bl	800a5a4 <_ZdlPvj>
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	4618      	mov	r0, r3
 800fe7a:	3708      	adds	r7, #8
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	bd80      	pop	{r7, pc}

0800fe80 <_ZN18BinaryEqualFailureD1Ev>:
class BinaryEqualFailure : public TestFailure
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b082      	sub	sp, #8
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
 800fe88:	4a05      	ldr	r2, [pc, #20]	; (800fea0 <_ZN18BinaryEqualFailureD1Ev+0x20>)
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	601a      	str	r2, [r3, #0]
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	4618      	mov	r0, r3
 800fe92:	f7fe fe55 	bl	800eb40 <_ZN11TestFailureD1Ev>
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	4618      	mov	r0, r3
 800fe9a:	3708      	adds	r7, #8
 800fe9c:	46bd      	mov	sp, r7
 800fe9e:	bd80      	pop	{r7, pc}
 800fea0:	08028468 	.word	0x08028468

0800fea4 <_ZN18BinaryEqualFailureD0Ev>:
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b082      	sub	sp, #8
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
 800feac:	6878      	ldr	r0, [r7, #4]
 800feae:	f7ff ffe7 	bl	800fe80 <_ZN18BinaryEqualFailureD1Ev>
 800feb2:	2134      	movs	r1, #52	; 0x34
 800feb4:	6878      	ldr	r0, [r7, #4]
 800feb6:	f7fa fb75 	bl	800a5a4 <_ZdlPvj>
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	4618      	mov	r0, r3
 800febe:	3708      	adds	r7, #8
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}

0800fec4 <_ZN24StringEqualNoCaseFailureD1Ev>:
class StringEqualNoCaseFailure : public TestFailure
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b082      	sub	sp, #8
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
 800fecc:	4a05      	ldr	r2, [pc, #20]	; (800fee4 <_ZN24StringEqualNoCaseFailureD1Ev+0x20>)
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	601a      	str	r2, [r3, #0]
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	4618      	mov	r0, r3
 800fed6:	f7fe fe33 	bl	800eb40 <_ZN11TestFailureD1Ev>
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	4618      	mov	r0, r3
 800fede:	3708      	adds	r7, #8
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}
 800fee4:	08028494 	.word	0x08028494

0800fee8 <_ZN24StringEqualNoCaseFailureD0Ev>:
 800fee8:	b580      	push	{r7, lr}
 800feea:	b082      	sub	sp, #8
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
 800fef0:	6878      	ldr	r0, [r7, #4]
 800fef2:	f7ff ffe7 	bl	800fec4 <_ZN24StringEqualNoCaseFailureD1Ev>
 800fef6:	2134      	movs	r1, #52	; 0x34
 800fef8:	6878      	ldr	r0, [r7, #4]
 800fefa:	f7fa fb53 	bl	800a5a4 <_ZdlPvj>
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	4618      	mov	r0, r3
 800ff02:	3708      	adds	r7, #8
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bd80      	pop	{r7, pc}

0800ff08 <_ZN18StringEqualFailureD1Ev>:
class StringEqualFailure : public TestFailure
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b082      	sub	sp, #8
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
 800ff10:	4a05      	ldr	r2, [pc, #20]	; (800ff28 <_ZN18StringEqualFailureD1Ev+0x20>)
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	601a      	str	r2, [r3, #0]
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	4618      	mov	r0, r3
 800ff1a:	f7fe fe11 	bl	800eb40 <_ZN11TestFailureD1Ev>
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	4618      	mov	r0, r3
 800ff22:	3708      	adds	r7, #8
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}
 800ff28:	080284c0 	.word	0x080284c0

0800ff2c <_ZN18StringEqualFailureD0Ev>:
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b082      	sub	sp, #8
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f7ff ffe7 	bl	800ff08 <_ZN18StringEqualFailureD1Ev>
 800ff3a:	2134      	movs	r1, #52	; 0x34
 800ff3c:	6878      	ldr	r0, [r7, #4]
 800ff3e:	f7fa fb31 	bl	800a5a4 <_ZdlPvj>
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	4618      	mov	r0, r3
 800ff46:	3708      	adds	r7, #8
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bd80      	pop	{r7, pc}

0800ff4c <_ZN23SignedBytesEqualFailureD1Ev>:
class SignedBytesEqualFailure : public TestFailure
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b082      	sub	sp, #8
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	4a05      	ldr	r2, [pc, #20]	; (800ff6c <_ZN23SignedBytesEqualFailureD1Ev+0x20>)
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	601a      	str	r2, [r3, #0]
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	f7fe fdef 	bl	800eb40 <_ZN11TestFailureD1Ev>
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	4618      	mov	r0, r3
 800ff66:	3708      	adds	r7, #8
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}
 800ff6c:	080284ec 	.word	0x080284ec

0800ff70 <_ZN23SignedBytesEqualFailureD0Ev>:
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b082      	sub	sp, #8
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	f7ff ffe7 	bl	800ff4c <_ZN23SignedBytesEqualFailureD1Ev>
 800ff7e:	2134      	movs	r1, #52	; 0x34
 800ff80:	6878      	ldr	r0, [r7, #4]
 800ff82:	f7fa fb0f 	bl	800a5a4 <_ZdlPvj>
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	4618      	mov	r0, r3
 800ff8a:	3708      	adds	r7, #8
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	bd80      	pop	{r7, pc}

0800ff90 <_ZN25UnsignedLongsEqualFailureD1Ev>:
class UnsignedLongsEqualFailure : public TestFailure
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b082      	sub	sp, #8
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
 800ff98:	4a05      	ldr	r2, [pc, #20]	; (800ffb0 <_ZN25UnsignedLongsEqualFailureD1Ev+0x20>)
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	601a      	str	r2, [r3, #0]
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	f7fe fdcd 	bl	800eb40 <_ZN11TestFailureD1Ev>
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	3708      	adds	r7, #8
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd80      	pop	{r7, pc}
 800ffb0:	08028518 	.word	0x08028518

0800ffb4 <_ZN25UnsignedLongsEqualFailureD0Ev>:
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b082      	sub	sp, #8
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
 800ffbc:	6878      	ldr	r0, [r7, #4]
 800ffbe:	f7ff ffe7 	bl	800ff90 <_ZN25UnsignedLongsEqualFailureD1Ev>
 800ffc2:	2134      	movs	r1, #52	; 0x34
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f7fa faed 	bl	800a5a4 <_ZdlPvj>
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	4618      	mov	r0, r3
 800ffce:	3708      	adds	r7, #8
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd80      	pop	{r7, pc}

0800ffd4 <_ZN17LongsEqualFailureD1Ev>:
class LongsEqualFailure : public TestFailure
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b082      	sub	sp, #8
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
 800ffdc:	4a05      	ldr	r2, [pc, #20]	; (800fff4 <_ZN17LongsEqualFailureD1Ev+0x20>)
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	601a      	str	r2, [r3, #0]
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f7fe fdab 	bl	800eb40 <_ZN11TestFailureD1Ev>
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	4618      	mov	r0, r3
 800ffee:	3708      	adds	r7, #8
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}
 800fff4:	08028544 	.word	0x08028544

0800fff8 <_ZN17LongsEqualFailureD0Ev>:
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b082      	sub	sp, #8
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
 8010000:	6878      	ldr	r0, [r7, #4]
 8010002:	f7ff ffe7 	bl	800ffd4 <_ZN17LongsEqualFailureD1Ev>
 8010006:	2134      	movs	r1, #52	; 0x34
 8010008:	6878      	ldr	r0, [r7, #4]
 801000a:	f7fa facb 	bl	800a5a4 <_ZdlPvj>
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	4618      	mov	r0, r3
 8010012:	3708      	adds	r7, #8
 8010014:	46bd      	mov	sp, r7
 8010016:	bd80      	pop	{r7, pc}

08010018 <_ZN12CheckFailureD1Ev>:
class CheckFailure : public TestFailure
 8010018:	b580      	push	{r7, lr}
 801001a:	b082      	sub	sp, #8
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
 8010020:	4a05      	ldr	r2, [pc, #20]	; (8010038 <_ZN12CheckFailureD1Ev+0x20>)
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	601a      	str	r2, [r3, #0]
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	4618      	mov	r0, r3
 801002a:	f7fe fd89 	bl	800eb40 <_ZN11TestFailureD1Ev>
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	4618      	mov	r0, r3
 8010032:	3708      	adds	r7, #8
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}
 8010038:	08028570 	.word	0x08028570

0801003c <_ZN12CheckFailureD0Ev>:
 801003c:	b580      	push	{r7, lr}
 801003e:	b082      	sub	sp, #8
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
 8010044:	6878      	ldr	r0, [r7, #4]
 8010046:	f7ff ffe7 	bl	8010018 <_ZN12CheckFailureD1Ev>
 801004a:	2134      	movs	r1, #52	; 0x34
 801004c:	6878      	ldr	r0, [r7, #4]
 801004e:	f7fa faa9 	bl	800a5a4 <_ZdlPvj>
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	4618      	mov	r0, r3
 8010056:	3708      	adds	r7, #8
 8010058:	46bd      	mov	sp, r7
 801005a:	bd80      	pop	{r7, pc}

0801005c <_ZN15ContainsFailureD1Ev>:
class ContainsFailure: public TestFailure
 801005c:	b580      	push	{r7, lr}
 801005e:	b082      	sub	sp, #8
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
 8010064:	4a05      	ldr	r2, [pc, #20]	; (801007c <_ZN15ContainsFailureD1Ev+0x20>)
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	601a      	str	r2, [r3, #0]
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	4618      	mov	r0, r3
 801006e:	f7fe fd67 	bl	800eb40 <_ZN11TestFailureD1Ev>
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	4618      	mov	r0, r3
 8010076:	3708      	adds	r7, #8
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}
 801007c:	0802859c 	.word	0x0802859c

08010080 <_ZN15ContainsFailureD0Ev>:
 8010080:	b580      	push	{r7, lr}
 8010082:	b082      	sub	sp, #8
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
 8010088:	6878      	ldr	r0, [r7, #4]
 801008a:	f7ff ffe7 	bl	801005c <_ZN15ContainsFailureD1Ev>
 801008e:	2134      	movs	r1, #52	; 0x34
 8010090:	6878      	ldr	r0, [r7, #4]
 8010092:	f7fa fa87 	bl	800a5a4 <_ZdlPvj>
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	4618      	mov	r0, r3
 801009a:	3708      	adds	r7, #8
 801009c:	46bd      	mov	sp, r7
 801009e:	bd80      	pop	{r7, pc}

080100a0 <_ZN17ComparisonFailureD1Ev>:
class ComparisonFailure : public TestFailure
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b082      	sub	sp, #8
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
 80100a8:	4a05      	ldr	r2, [pc, #20]	; (80100c0 <_ZN17ComparisonFailureD1Ev+0x20>)
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	601a      	str	r2, [r3, #0]
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	4618      	mov	r0, r3
 80100b2:	f7fe fd45 	bl	800eb40 <_ZN11TestFailureD1Ev>
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	4618      	mov	r0, r3
 80100ba:	3708      	adds	r7, #8
 80100bc:	46bd      	mov	sp, r7
 80100be:	bd80      	pop	{r7, pc}
 80100c0:	080285c8 	.word	0x080285c8

080100c4 <_ZN17ComparisonFailureD0Ev>:
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b082      	sub	sp, #8
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
 80100cc:	6878      	ldr	r0, [r7, #4]
 80100ce:	f7ff ffe7 	bl	80100a0 <_ZN17ComparisonFailureD1Ev>
 80100d2:	2134      	movs	r1, #52	; 0x34
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	f7fa fa65 	bl	800a5a4 <_ZdlPvj>
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	4618      	mov	r0, r3
 80100de:	3708      	adds	r7, #8
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bd80      	pop	{r7, pc}

080100e4 <_ZN17CheckEqualFailureD1Ev>:
class CheckEqualFailure : public TestFailure
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b082      	sub	sp, #8
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
 80100ec:	4a05      	ldr	r2, [pc, #20]	; (8010104 <_ZN17CheckEqualFailureD1Ev+0x20>)
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	601a      	str	r2, [r3, #0]
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	4618      	mov	r0, r3
 80100f6:	f7fe fd23 	bl	800eb40 <_ZN11TestFailureD1Ev>
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	4618      	mov	r0, r3
 80100fe:	3708      	adds	r7, #8
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}
 8010104:	080285f4 	.word	0x080285f4

08010108 <_ZN17CheckEqualFailureD0Ev>:
 8010108:	b580      	push	{r7, lr}
 801010a:	b082      	sub	sp, #8
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f7ff ffe7 	bl	80100e4 <_ZN17CheckEqualFailureD1Ev>
 8010116:	2134      	movs	r1, #52	; 0x34
 8010118:	6878      	ldr	r0, [r7, #4]
 801011a:	f7fa fa43 	bl	800a5a4 <_ZdlPvj>
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	4618      	mov	r0, r3
 8010122:	3708      	adds	r7, #8
 8010124:	46bd      	mov	sp, r7
 8010126:	bd80      	pop	{r7, pc}

08010128 <_ZN19DoublesEqualFailureD1Ev>:
class DoublesEqualFailure: public TestFailure
 8010128:	b580      	push	{r7, lr}
 801012a:	b082      	sub	sp, #8
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
 8010130:	4a05      	ldr	r2, [pc, #20]	; (8010148 <_ZN19DoublesEqualFailureD1Ev+0x20>)
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	601a      	str	r2, [r3, #0]
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	4618      	mov	r0, r3
 801013a:	f7fe fd01 	bl	800eb40 <_ZN11TestFailureD1Ev>
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	4618      	mov	r0, r3
 8010142:	3708      	adds	r7, #8
 8010144:	46bd      	mov	sp, r7
 8010146:	bd80      	pop	{r7, pc}
 8010148:	08028620 	.word	0x08028620

0801014c <_ZN19DoublesEqualFailureD0Ev>:
 801014c:	b580      	push	{r7, lr}
 801014e:	b082      	sub	sp, #8
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
 8010154:	6878      	ldr	r0, [r7, #4]
 8010156:	f7ff ffe7 	bl	8010128 <_ZN19DoublesEqualFailureD1Ev>
 801015a:	2134      	movs	r1, #52	; 0x34
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	f7fa fa21 	bl	800a5a4 <_ZdlPvj>
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	4618      	mov	r0, r3
 8010166:	3708      	adds	r7, #8
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}

0801016c <_ZN13EqualsFailureD1Ev>:
class EqualsFailure: public TestFailure
 801016c:	b580      	push	{r7, lr}
 801016e:	b082      	sub	sp, #8
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
 8010174:	4a05      	ldr	r2, [pc, #20]	; (801018c <_ZN13EqualsFailureD1Ev+0x20>)
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	601a      	str	r2, [r3, #0]
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	4618      	mov	r0, r3
 801017e:	f7fe fcdf 	bl	800eb40 <_ZN11TestFailureD1Ev>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	4618      	mov	r0, r3
 8010186:	3708      	adds	r7, #8
 8010188:	46bd      	mov	sp, r7
 801018a:	bd80      	pop	{r7, pc}
 801018c:	0802864c 	.word	0x0802864c

08010190 <_ZN13EqualsFailureD0Ev>:
 8010190:	b580      	push	{r7, lr}
 8010192:	b082      	sub	sp, #8
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
 8010198:	6878      	ldr	r0, [r7, #4]
 801019a:	f7ff ffe7 	bl	801016c <_ZN13EqualsFailureD1Ev>
 801019e:	2134      	movs	r1, #52	; 0x34
 80101a0:	6878      	ldr	r0, [r7, #4]
 80101a2:	f7fa f9ff 	bl	800a5a4 <_ZdlPvj>
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	4618      	mov	r0, r3
 80101aa:	3708      	adds	r7, #8
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bd80      	pop	{r7, pc}

080101b0 <_ZL13checkedMallocj>:
#include "CppUTest/TestMemoryAllocator.h"
#include "CppUTest/PlatformSpecificFunctions.h"
#include "CppUTest/MemoryLeakDetector.h"

static char* checkedMalloc(size_t size)
{
 80101b0:	b5b0      	push	{r4, r5, r7, lr}
 80101b2:	b086      	sub	sp, #24
 80101b4:	af02      	add	r7, sp, #8
 80101b6:	6078      	str	r0, [r7, #4]
    char* mem = (char*) PlatformSpecificMalloc(size);
 80101b8:	4b0d      	ldr	r3, [pc, #52]	; (80101f0 <_ZL13checkedMallocj+0x40>)
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	6878      	ldr	r0, [r7, #4]
 80101be:	4798      	blx	r3
 80101c0:	60f8      	str	r0, [r7, #12]
    if (mem == NULLPTR)
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d10e      	bne.n	80101e6 <_ZL13checkedMallocj+0x36>
    FAIL("malloc returned null pointer");
 80101c8:	f004 f97e 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 80101cc:	4604      	mov	r4, r0
 80101ce:	6823      	ldr	r3, [r4, #0]
 80101d0:	3368      	adds	r3, #104	; 0x68
 80101d2:	681d      	ldr	r5, [r3, #0]
 80101d4:	f004 f988 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80101d8:	4603      	mov	r3, r0
 80101da:	9300      	str	r3, [sp, #0]
 80101dc:	2325      	movs	r3, #37	; 0x25
 80101de:	4a05      	ldr	r2, [pc, #20]	; (80101f4 <_ZL13checkedMallocj+0x44>)
 80101e0:	4905      	ldr	r1, [pc, #20]	; (80101f8 <_ZL13checkedMallocj+0x48>)
 80101e2:	4620      	mov	r0, r4
 80101e4:	47a8      	blx	r5
    return mem;
 80101e6:	68fb      	ldr	r3, [r7, #12]
}
 80101e8:	4618      	mov	r0, r3
 80101ea:	3710      	adds	r7, #16
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bdb0      	pop	{r4, r5, r7, pc}
 80101f0:	200000c8 	.word	0x200000c8
 80101f4:	080248b0 	.word	0x080248b0
 80101f8:	080248d0 	.word	0x080248d0

080101fc <_Z22getCurrentNewAllocatorv>:
{
    currentNewAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewAllocator()
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	af00      	add	r7, sp, #0
    if (currentNewAllocator == NULLPTR) setCurrentNewAllocatorToDefault();
 8010200:	4b04      	ldr	r3, [pc, #16]	; (8010214 <_Z22getCurrentNewAllocatorv+0x18>)
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d101      	bne.n	801020c <_Z22getCurrentNewAllocatorv+0x10>
 8010208:	f000 f806 	bl	8010218 <_Z31setCurrentNewAllocatorToDefaultv>
    return currentNewAllocator;
 801020c:	4b01      	ldr	r3, [pc, #4]	; (8010214 <_Z22getCurrentNewAllocatorv+0x18>)
 801020e:	681b      	ldr	r3, [r3, #0]
}
 8010210:	4618      	mov	r0, r3
 8010212:	bd80      	pop	{r7, pc}
 8010214:	200008a4 	.word	0x200008a4

08010218 <_Z31setCurrentNewAllocatorToDefaultv>:

void setCurrentNewAllocatorToDefault()
{
 8010218:	b580      	push	{r7, lr}
 801021a:	af00      	add	r7, sp, #0
    currentNewAllocator = defaultNewAllocator();
 801021c:	f000 f810 	bl	8010240 <_Z19defaultNewAllocatorv>
 8010220:	4603      	mov	r3, r0
 8010222:	4a02      	ldr	r2, [pc, #8]	; (801022c <_Z31setCurrentNewAllocatorToDefaultv+0x14>)
 8010224:	6013      	str	r3, [r2, #0]
}
 8010226:	bf00      	nop
 8010228:	bd80      	pop	{r7, pc}
 801022a:	bf00      	nop
 801022c:	200008a4 	.word	0x200008a4

08010230 <__tcf_0>:

TestMemoryAllocator* defaultNewAllocator()
{
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 8010230:	b580      	push	{r7, lr}
 8010232:	af00      	add	r7, sp, #0
 8010234:	4801      	ldr	r0, [pc, #4]	; (801023c <__tcf_0+0xc>)
 8010236:	f000 f909 	bl	801044c <_ZN19TestMemoryAllocatorD1Ev>
 801023a:	bd80      	pop	{r7, pc}
 801023c:	200008b0 	.word	0x200008b0

08010240 <_Z19defaultNewAllocatorv>:
{
 8010240:	b580      	push	{r7, lr}
 8010242:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 8010244:	4b13      	ldr	r3, [pc, #76]	; (8010294 <_Z19defaultNewAllocatorv+0x54>)
 8010246:	781b      	ldrb	r3, [r3, #0]
 8010248:	f3bf 8f5b 	dmb	ish
 801024c:	b2db      	uxtb	r3, r3
 801024e:	f003 0301 	and.w	r3, r3, #1
 8010252:	2b00      	cmp	r3, #0
 8010254:	bf0c      	ite	eq
 8010256:	2301      	moveq	r3, #1
 8010258:	2300      	movne	r3, #0
 801025a:	b2db      	uxtb	r3, r3
 801025c:	2b00      	cmp	r3, #0
 801025e:	d016      	beq.n	801028e <_Z19defaultNewAllocatorv+0x4e>
 8010260:	480c      	ldr	r0, [pc, #48]	; (8010294 <_Z19defaultNewAllocatorv+0x54>)
 8010262:	f00f fc0d 	bl	801fa80 <__cxa_guard_acquire>
 8010266:	4603      	mov	r3, r0
 8010268:	2b00      	cmp	r3, #0
 801026a:	bf14      	ite	ne
 801026c:	2301      	movne	r3, #1
 801026e:	2300      	moveq	r3, #0
 8010270:	b2db      	uxtb	r3, r3
 8010272:	2b00      	cmp	r3, #0
 8010274:	d00b      	beq.n	801028e <_Z19defaultNewAllocatorv+0x4e>
 8010276:	4b08      	ldr	r3, [pc, #32]	; (8010298 <_Z19defaultNewAllocatorv+0x58>)
 8010278:	4a08      	ldr	r2, [pc, #32]	; (801029c <_Z19defaultNewAllocatorv+0x5c>)
 801027a:	4909      	ldr	r1, [pc, #36]	; (80102a0 <_Z19defaultNewAllocatorv+0x60>)
 801027c:	4809      	ldr	r0, [pc, #36]	; (80102a4 <_Z19defaultNewAllocatorv+0x64>)
 801027e:	f000 f8c5 	bl	801040c <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 8010282:	4804      	ldr	r0, [pc, #16]	; (8010294 <_Z19defaultNewAllocatorv+0x54>)
 8010284:	f00f fc08 	bl	801fa98 <__cxa_guard_release>
 8010288:	4807      	ldr	r0, [pc, #28]	; (80102a8 <_Z19defaultNewAllocatorv+0x68>)
 801028a:	f00f fc2c 	bl	801fae6 <atexit>
    return &allocator;
 801028e:	4b05      	ldr	r3, [pc, #20]	; (80102a4 <_Z19defaultNewAllocatorv+0x64>)
}
 8010290:	4618      	mov	r0, r3
 8010292:	bd80      	pop	{r7, pc}
 8010294:	200008c4 	.word	0x200008c4
 8010298:	080248f0 	.word	0x080248f0
 801029c:	080248f8 	.word	0x080248f8
 80102a0:	080248fc 	.word	0x080248fc
 80102a4:	200008b0 	.word	0x200008b0
 80102a8:	08010231 	.word	0x08010231

080102ac <_Z27getCurrentNewArrayAllocatorv>:
{
    currentNewArrayAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewArrayAllocator()
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	af00      	add	r7, sp, #0
    if (currentNewArrayAllocator == NULLPTR) setCurrentNewArrayAllocatorToDefault();
 80102b0:	4b04      	ldr	r3, [pc, #16]	; (80102c4 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d101      	bne.n	80102bc <_Z27getCurrentNewArrayAllocatorv+0x10>
 80102b8:	f000 f806 	bl	80102c8 <_Z36setCurrentNewArrayAllocatorToDefaultv>
    return currentNewArrayAllocator;
 80102bc:	4b01      	ldr	r3, [pc, #4]	; (80102c4 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 80102be:	681b      	ldr	r3, [r3, #0]
}
 80102c0:	4618      	mov	r0, r3
 80102c2:	bd80      	pop	{r7, pc}
 80102c4:	200008a8 	.word	0x200008a8

080102c8 <_Z36setCurrentNewArrayAllocatorToDefaultv>:

void setCurrentNewArrayAllocatorToDefault()
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	af00      	add	r7, sp, #0
    currentNewArrayAllocator = defaultNewArrayAllocator();
 80102cc:	f000 f810 	bl	80102f0 <_Z24defaultNewArrayAllocatorv>
 80102d0:	4603      	mov	r3, r0
 80102d2:	4a02      	ldr	r2, [pc, #8]	; (80102dc <_Z36setCurrentNewArrayAllocatorToDefaultv+0x14>)
 80102d4:	6013      	str	r3, [r2, #0]
}
 80102d6:	bf00      	nop
 80102d8:	bd80      	pop	{r7, pc}
 80102da:	bf00      	nop
 80102dc:	200008a8 	.word	0x200008a8

080102e0 <__tcf_1>:

TestMemoryAllocator* defaultNewArrayAllocator()
{
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 80102e0:	b580      	push	{r7, lr}
 80102e2:	af00      	add	r7, sp, #0
 80102e4:	4801      	ldr	r0, [pc, #4]	; (80102ec <__tcf_1+0xc>)
 80102e6:	f000 f8b1 	bl	801044c <_ZN19TestMemoryAllocatorD1Ev>
 80102ea:	bd80      	pop	{r7, pc}
 80102ec:	200008c8 	.word	0x200008c8

080102f0 <_Z24defaultNewArrayAllocatorv>:
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 80102f4:	4b13      	ldr	r3, [pc, #76]	; (8010344 <_Z24defaultNewArrayAllocatorv+0x54>)
 80102f6:	781b      	ldrb	r3, [r3, #0]
 80102f8:	f3bf 8f5b 	dmb	ish
 80102fc:	b2db      	uxtb	r3, r3
 80102fe:	f003 0301 	and.w	r3, r3, #1
 8010302:	2b00      	cmp	r3, #0
 8010304:	bf0c      	ite	eq
 8010306:	2301      	moveq	r3, #1
 8010308:	2300      	movne	r3, #0
 801030a:	b2db      	uxtb	r3, r3
 801030c:	2b00      	cmp	r3, #0
 801030e:	d016      	beq.n	801033e <_Z24defaultNewArrayAllocatorv+0x4e>
 8010310:	480c      	ldr	r0, [pc, #48]	; (8010344 <_Z24defaultNewArrayAllocatorv+0x54>)
 8010312:	f00f fbb5 	bl	801fa80 <__cxa_guard_acquire>
 8010316:	4603      	mov	r3, r0
 8010318:	2b00      	cmp	r3, #0
 801031a:	bf14      	ite	ne
 801031c:	2301      	movne	r3, #1
 801031e:	2300      	moveq	r3, #0
 8010320:	b2db      	uxtb	r3, r3
 8010322:	2b00      	cmp	r3, #0
 8010324:	d00b      	beq.n	801033e <_Z24defaultNewArrayAllocatorv+0x4e>
 8010326:	4b08      	ldr	r3, [pc, #32]	; (8010348 <_Z24defaultNewArrayAllocatorv+0x58>)
 8010328:	4a08      	ldr	r2, [pc, #32]	; (801034c <_Z24defaultNewArrayAllocatorv+0x5c>)
 801032a:	4909      	ldr	r1, [pc, #36]	; (8010350 <_Z24defaultNewArrayAllocatorv+0x60>)
 801032c:	4809      	ldr	r0, [pc, #36]	; (8010354 <_Z24defaultNewArrayAllocatorv+0x64>)
 801032e:	f000 f86d 	bl	801040c <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 8010332:	4804      	ldr	r0, [pc, #16]	; (8010344 <_Z24defaultNewArrayAllocatorv+0x54>)
 8010334:	f00f fbb0 	bl	801fa98 <__cxa_guard_release>
 8010338:	4807      	ldr	r0, [pc, #28]	; (8010358 <_Z24defaultNewArrayAllocatorv+0x68>)
 801033a:	f00f fbd4 	bl	801fae6 <atexit>
    return &allocator;
 801033e:	4b05      	ldr	r3, [pc, #20]	; (8010354 <_Z24defaultNewArrayAllocatorv+0x64>)
}
 8010340:	4618      	mov	r0, r3
 8010342:	bd80      	pop	{r7, pc}
 8010344:	200008dc 	.word	0x200008dc
 8010348:	08024914 	.word	0x08024914
 801034c:	08024920 	.word	0x08024920
 8010350:	08024928 	.word	0x08024928
 8010354:	200008c8 	.word	0x200008c8
 8010358:	080102e1 	.word	0x080102e1

0801035c <_Z25getCurrentMallocAllocatorv>:
{
    currentMallocAllocator = allocator;
}

TestMemoryAllocator* getCurrentMallocAllocator()
{
 801035c:	b580      	push	{r7, lr}
 801035e:	af00      	add	r7, sp, #0
    if (currentMallocAllocator == NULLPTR) setCurrentMallocAllocatorToDefault();
 8010360:	4b04      	ldr	r3, [pc, #16]	; (8010374 <_Z25getCurrentMallocAllocatorv+0x18>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d101      	bne.n	801036c <_Z25getCurrentMallocAllocatorv+0x10>
 8010368:	f000 f806 	bl	8010378 <_Z34setCurrentMallocAllocatorToDefaultv>
    return currentMallocAllocator;
 801036c:	4b01      	ldr	r3, [pc, #4]	; (8010374 <_Z25getCurrentMallocAllocatorv+0x18>)
 801036e:	681b      	ldr	r3, [r3, #0]
}
 8010370:	4618      	mov	r0, r3
 8010372:	bd80      	pop	{r7, pc}
 8010374:	200008ac 	.word	0x200008ac

08010378 <_Z34setCurrentMallocAllocatorToDefaultv>:

void setCurrentMallocAllocatorToDefault()
{
 8010378:	b580      	push	{r7, lr}
 801037a:	af00      	add	r7, sp, #0
    currentMallocAllocator = defaultMallocAllocator();
 801037c:	f000 f810 	bl	80103a0 <_Z22defaultMallocAllocatorv>
 8010380:	4603      	mov	r3, r0
 8010382:	4a02      	ldr	r2, [pc, #8]	; (801038c <_Z34setCurrentMallocAllocatorToDefaultv+0x14>)
 8010384:	6013      	str	r3, [r2, #0]
}
 8010386:	bf00      	nop
 8010388:	bd80      	pop	{r7, pc}
 801038a:	bf00      	nop
 801038c:	200008ac 	.word	0x200008ac

08010390 <__tcf_2>:

TestMemoryAllocator* defaultMallocAllocator()
{
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 8010390:	b580      	push	{r7, lr}
 8010392:	af00      	add	r7, sp, #0
 8010394:	4801      	ldr	r0, [pc, #4]	; (801039c <__tcf_2+0xc>)
 8010396:	f000 f859 	bl	801044c <_ZN19TestMemoryAllocatorD1Ev>
 801039a:	bd80      	pop	{r7, pc}
 801039c:	200008e0 	.word	0x200008e0

080103a0 <_Z22defaultMallocAllocatorv>:
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 80103a4:	4b13      	ldr	r3, [pc, #76]	; (80103f4 <_Z22defaultMallocAllocatorv+0x54>)
 80103a6:	781b      	ldrb	r3, [r3, #0]
 80103a8:	f3bf 8f5b 	dmb	ish
 80103ac:	b2db      	uxtb	r3, r3
 80103ae:	f003 0301 	and.w	r3, r3, #1
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	bf0c      	ite	eq
 80103b6:	2301      	moveq	r3, #1
 80103b8:	2300      	movne	r3, #0
 80103ba:	b2db      	uxtb	r3, r3
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d016      	beq.n	80103ee <_Z22defaultMallocAllocatorv+0x4e>
 80103c0:	480c      	ldr	r0, [pc, #48]	; (80103f4 <_Z22defaultMallocAllocatorv+0x54>)
 80103c2:	f00f fb5d 	bl	801fa80 <__cxa_guard_acquire>
 80103c6:	4603      	mov	r3, r0
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	bf14      	ite	ne
 80103cc:	2301      	movne	r3, #1
 80103ce:	2300      	moveq	r3, #0
 80103d0:	b2db      	uxtb	r3, r3
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d00b      	beq.n	80103ee <_Z22defaultMallocAllocatorv+0x4e>
 80103d6:	4b08      	ldr	r3, [pc, #32]	; (80103f8 <_Z22defaultMallocAllocatorv+0x58>)
 80103d8:	4a08      	ldr	r2, [pc, #32]	; (80103fc <_Z22defaultMallocAllocatorv+0x5c>)
 80103da:	4909      	ldr	r1, [pc, #36]	; (8010400 <_Z22defaultMallocAllocatorv+0x60>)
 80103dc:	4809      	ldr	r0, [pc, #36]	; (8010404 <_Z22defaultMallocAllocatorv+0x64>)
 80103de:	f000 f815 	bl	801040c <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 80103e2:	4804      	ldr	r0, [pc, #16]	; (80103f4 <_Z22defaultMallocAllocatorv+0x54>)
 80103e4:	f00f fb58 	bl	801fa98 <__cxa_guard_release>
 80103e8:	4807      	ldr	r0, [pc, #28]	; (8010408 <_Z22defaultMallocAllocatorv+0x68>)
 80103ea:	f00f fb7c 	bl	801fae6 <atexit>
    return &allocator;
 80103ee:	4b05      	ldr	r3, [pc, #20]	; (8010404 <_Z22defaultMallocAllocatorv+0x64>)
}
 80103f0:	4618      	mov	r0, r3
 80103f2:	bd80      	pop	{r7, pc}
 80103f4:	200008f4 	.word	0x200008f4
 80103f8:	08024944 	.word	0x08024944
 80103fc:	0802494c 	.word	0x0802494c
 8010400:	08024954 	.word	0x08024954
 8010404:	200008e0 	.word	0x200008e0
 8010408:	08010391 	.word	0x08010391

0801040c <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>:
    if (originalMallocAllocator) setCurrentMallocAllocator(originalMallocAllocator);
    if (originalNewAllocator) setCurrentNewAllocator(originalNewAllocator);
    if (originalNewArrayAllocator) setCurrentNewArrayAllocator(originalNewArrayAllocator);
}

TestMemoryAllocator::TestMemoryAllocator(const char* name_str, const char* alloc_name_str, const char* free_name_str)
 801040c:	b480      	push	{r7}
 801040e:	b085      	sub	sp, #20
 8010410:	af00      	add	r7, sp, #0
 8010412:	60f8      	str	r0, [r7, #12]
 8010414:	60b9      	str	r1, [r7, #8]
 8010416:	607a      	str	r2, [r7, #4]
 8010418:	603b      	str	r3, [r7, #0]
    : name_(name_str), alloc_name_(alloc_name_str), free_name_(free_name_str), hasBeenDestroyed_(false)
 801041a:	4a0b      	ldr	r2, [pc, #44]	; (8010448 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_+0x3c>)
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	601a      	str	r2, [r3, #0]
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	68ba      	ldr	r2, [r7, #8]
 8010424:	605a      	str	r2, [r3, #4]
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	687a      	ldr	r2, [r7, #4]
 801042a:	609a      	str	r2, [r3, #8]
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	683a      	ldr	r2, [r7, #0]
 8010430:	60da      	str	r2, [r3, #12]
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	2200      	movs	r2, #0
 8010436:	741a      	strb	r2, [r3, #16]
{
}
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	4618      	mov	r0, r3
 801043c:	3714      	adds	r7, #20
 801043e:	46bd      	mov	sp, r7
 8010440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010444:	4770      	bx	lr
 8010446:	bf00      	nop
 8010448:	080286d8 	.word	0x080286d8

0801044c <_ZN19TestMemoryAllocatorD1Ev>:

TestMemoryAllocator::~TestMemoryAllocator()
 801044c:	b480      	push	{r7}
 801044e:	b083      	sub	sp, #12
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
 8010454:	4a06      	ldr	r2, [pc, #24]	; (8010470 <_ZN19TestMemoryAllocatorD1Ev+0x24>)
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	601a      	str	r2, [r3, #0]
{
    hasBeenDestroyed_ = true;
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	2201      	movs	r2, #1
 801045e:	741a      	strb	r2, [r3, #16]
}
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	4618      	mov	r0, r3
 8010464:	370c      	adds	r7, #12
 8010466:	46bd      	mov	sp, r7
 8010468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046c:	4770      	bx	lr
 801046e:	bf00      	nop
 8010470:	080286d8 	.word	0x080286d8

08010474 <_ZN19TestMemoryAllocatorD0Ev>:
TestMemoryAllocator::~TestMemoryAllocator()
 8010474:	b580      	push	{r7, lr}
 8010476:	b082      	sub	sp, #8
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
}
 801047c:	6878      	ldr	r0, [r7, #4]
 801047e:	f7ff ffe5 	bl	801044c <_ZN19TestMemoryAllocatorD1Ev>
 8010482:	2114      	movs	r1, #20
 8010484:	6878      	ldr	r0, [r7, #4]
 8010486:	f7fa f88d 	bl	800a5a4 <_ZdlPvj>
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	4618      	mov	r0, r3
 801048e:	3708      	adds	r7, #8
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}

08010494 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>:

bool TestMemoryAllocator::hasBeenDestroyed()
{
 8010494:	b480      	push	{r7}
 8010496:	b083      	sub	sp, #12
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
    return hasBeenDestroyed_;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	7c1b      	ldrb	r3, [r3, #16]
}
 80104a0:	4618      	mov	r0, r3
 80104a2:	370c      	adds	r7, #12
 80104a4:	46bd      	mov	sp, r7
 80104a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104aa:	4770      	bx	lr

080104ac <_ZN19TestMemoryAllocator13isOfEqualTypeEPS_>:

bool TestMemoryAllocator::isOfEqualType(TestMemoryAllocator* allocator)
{
 80104ac:	b590      	push	{r4, r7, lr}
 80104ae:	b083      	sub	sp, #12
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
 80104b4:	6039      	str	r1, [r7, #0]
    return SimpleString::StrCmp(this->name(), allocator->name()) == 0;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	3310      	adds	r3, #16
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	6878      	ldr	r0, [r7, #4]
 80104c0:	4798      	blx	r3
 80104c2:	4604      	mov	r4, r0
 80104c4:	683b      	ldr	r3, [r7, #0]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	3310      	adds	r3, #16
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	6838      	ldr	r0, [r7, #0]
 80104ce:	4798      	blx	r3
 80104d0:	4603      	mov	r3, r0
 80104d2:	4619      	mov	r1, r3
 80104d4:	4620      	mov	r0, r4
 80104d6:	f7fc fa51 	bl	800c97c <_ZN12SimpleString6StrCmpEPKcS1_>
 80104da:	4603      	mov	r3, r0
 80104dc:	2b00      	cmp	r3, #0
 80104de:	bf0c      	ite	eq
 80104e0:	2301      	moveq	r3, #1
 80104e2:	2300      	movne	r3, #0
 80104e4:	b2db      	uxtb	r3, r3
}
 80104e6:	4618      	mov	r0, r3
 80104e8:	370c      	adds	r7, #12
 80104ea:	46bd      	mov	sp, r7
 80104ec:	bd90      	pop	{r4, r7, pc}
	...

080104f0 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj>:

char* TestMemoryAllocator::allocMemoryLeakNode(size_t size)
{
 80104f0:	b590      	push	{r4, r7, lr}
 80104f2:	b083      	sub	sp, #12
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
 80104f8:	6039      	str	r1, [r7, #0]
    return alloc_memory(size, "MemoryLeakNode", 1);
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	3308      	adds	r3, #8
 8010500:	681c      	ldr	r4, [r3, #0]
 8010502:	2301      	movs	r3, #1
 8010504:	4a04      	ldr	r2, [pc, #16]	; (8010518 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj+0x28>)
 8010506:	6839      	ldr	r1, [r7, #0]
 8010508:	6878      	ldr	r0, [r7, #4]
 801050a:	47a0      	blx	r4
 801050c:	4603      	mov	r3, r0
}
 801050e:	4618      	mov	r0, r3
 8010510:	370c      	adds	r7, #12
 8010512:	46bd      	mov	sp, r7
 8010514:	bd90      	pop	{r4, r7, pc}
 8010516:	bf00      	nop
 8010518:	08024970 	.word	0x08024970

0801051c <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc>:

void TestMemoryAllocator::freeMemoryLeakNode(char* memory)
{
 801051c:	b590      	push	{r4, r7, lr}
 801051e:	b085      	sub	sp, #20
 8010520:	af02      	add	r7, sp, #8
 8010522:	6078      	str	r0, [r7, #4]
 8010524:	6039      	str	r1, [r7, #0]
    free_memory(memory, 0, "MemoryLeakNode", 1);
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	330c      	adds	r3, #12
 801052c:	681c      	ldr	r4, [r3, #0]
 801052e:	2301      	movs	r3, #1
 8010530:	9300      	str	r3, [sp, #0]
 8010532:	4b04      	ldr	r3, [pc, #16]	; (8010544 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc+0x28>)
 8010534:	2200      	movs	r2, #0
 8010536:	6839      	ldr	r1, [r7, #0]
 8010538:	6878      	ldr	r0, [r7, #4]
 801053a:	47a0      	blx	r4
}
 801053c:	bf00      	nop
 801053e:	370c      	adds	r7, #12
 8010540:	46bd      	mov	sp, r7
 8010542:	bd90      	pop	{r4, r7, pc}
 8010544:	08024970 	.word	0x08024970

08010548 <_ZN19TestMemoryAllocator12alloc_memoryEjPKcj>:

char* TestMemoryAllocator::alloc_memory(size_t size, const char*, size_t)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b084      	sub	sp, #16
 801054c:	af00      	add	r7, sp, #0
 801054e:	60f8      	str	r0, [r7, #12]
 8010550:	60b9      	str	r1, [r7, #8]
 8010552:	607a      	str	r2, [r7, #4]
 8010554:	603b      	str	r3, [r7, #0]
    return checkedMalloc(size);
 8010556:	68b8      	ldr	r0, [r7, #8]
 8010558:	f7ff fe2a 	bl	80101b0 <_ZL13checkedMallocj>
 801055c:	4603      	mov	r3, r0
}
 801055e:	4618      	mov	r0, r3
 8010560:	3710      	adds	r7, #16
 8010562:	46bd      	mov	sp, r7
 8010564:	bd80      	pop	{r7, pc}
	...

08010568 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj>:

void TestMemoryAllocator::free_memory(char* memory, size_t, const char*, size_t)
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b084      	sub	sp, #16
 801056c:	af00      	add	r7, sp, #0
 801056e:	60f8      	str	r0, [r7, #12]
 8010570:	60b9      	str	r1, [r7, #8]
 8010572:	607a      	str	r2, [r7, #4]
 8010574:	603b      	str	r3, [r7, #0]
    PlatformSpecificFree(memory);
 8010576:	4b04      	ldr	r3, [pc, #16]	; (8010588 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj+0x20>)
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	68b8      	ldr	r0, [r7, #8]
 801057c:	4798      	blx	r3
}
 801057e:	bf00      	nop
 8010580:	3710      	adds	r7, #16
 8010582:	46bd      	mov	sp, r7
 8010584:	bd80      	pop	{r7, pc}
 8010586:	bf00      	nop
 8010588:	200000d0 	.word	0x200000d0

0801058c <_ZNK19TestMemoryAllocator4nameEv>:

const char* TestMemoryAllocator::name() const
{
 801058c:	b480      	push	{r7}
 801058e:	b083      	sub	sp, #12
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
    return name_;
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	685b      	ldr	r3, [r3, #4]
}
 8010598:	4618      	mov	r0, r3
 801059a:	370c      	adds	r7, #12
 801059c:	46bd      	mov	sp, r7
 801059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a2:	4770      	bx	lr

080105a4 <_ZNK19TestMemoryAllocator10alloc_nameEv>:

const char* TestMemoryAllocator::alloc_name() const
{
 80105a4:	b480      	push	{r7}
 80105a6:	b083      	sub	sp, #12
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
    return alloc_name_;
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	689b      	ldr	r3, [r3, #8]
}
 80105b0:	4618      	mov	r0, r3
 80105b2:	370c      	adds	r7, #12
 80105b4:	46bd      	mov	sp, r7
 80105b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ba:	4770      	bx	lr

080105bc <_ZNK19TestMemoryAllocator9free_nameEv>:

const char* TestMemoryAllocator::free_name() const
{
 80105bc:	b480      	push	{r7}
 80105be:	b083      	sub	sp, #12
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
    return free_name_;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	68db      	ldr	r3, [r3, #12]
}
 80105c8:	4618      	mov	r0, r3
 80105ca:	370c      	adds	r7, #12
 80105cc:	46bd      	mov	sp, r7
 80105ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d2:	4770      	bx	lr

080105d4 <_ZN19TestMemoryAllocator15actualAllocatorEv>:

TestMemoryAllocator* TestMemoryAllocator::actualAllocator()
{
 80105d4:	b480      	push	{r7}
 80105d6:	b083      	sub	sp, #12
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
    return this;
 80105dc:	687b      	ldr	r3, [r7, #4]
}
 80105de:	4618      	mov	r0, r3
 80105e0:	370c      	adds	r7, #12
 80105e2:	46bd      	mov	sp, r7
 80105e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e8:	4770      	bx	lr
	...

080105ec <_ZN20NullUnknownAllocatorD1Ev>:

    return TestMemoryAllocator::alloc_memory(size, file, line);
}


NullUnknownAllocator::~NullUnknownAllocator()
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b082      	sub	sp, #8
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
 80105f4:	4a05      	ldr	r2, [pc, #20]	; (801060c <_ZN20NullUnknownAllocatorD1Ev+0x20>)
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	601a      	str	r2, [r3, #0]
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	4618      	mov	r0, r3
 80105fe:	f7ff ff25 	bl	801044c <_ZN19TestMemoryAllocatorD1Ev>
{
}
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	4618      	mov	r0, r3
 8010606:	3708      	adds	r7, #8
 8010608:	46bd      	mov	sp, r7
 801060a:	bd80      	pop	{r7, pc}
 801060c:	080286a4 	.word	0x080286a4

08010610 <_ZN20NullUnknownAllocatorD0Ev>:
NullUnknownAllocator::~NullUnknownAllocator()
 8010610:	b580      	push	{r7, lr}
 8010612:	b082      	sub	sp, #8
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
}
 8010618:	6878      	ldr	r0, [r7, #4]
 801061a:	f7ff ffe7 	bl	80105ec <_ZN20NullUnknownAllocatorD1Ev>
 801061e:	2114      	movs	r1, #20
 8010620:	6878      	ldr	r0, [r7, #4]
 8010622:	f7f9 ffbf 	bl	800a5a4 <_ZdlPvj>
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	4618      	mov	r0, r3
 801062a:	3708      	adds	r7, #8
 801062c:	46bd      	mov	sp, r7
 801062e:	bd80      	pop	{r7, pc}

08010630 <_ZN20NullUnknownAllocator12alloc_memoryEjPKcj>:

char* NullUnknownAllocator::alloc_memory(size_t /*size*/, const char*, size_t)
{
 8010630:	b480      	push	{r7}
 8010632:	b085      	sub	sp, #20
 8010634:	af00      	add	r7, sp, #0
 8010636:	60f8      	str	r0, [r7, #12]
 8010638:	60b9      	str	r1, [r7, #8]
 801063a:	607a      	str	r2, [r7, #4]
 801063c:	603b      	str	r3, [r7, #0]
    return NULLPTR;
 801063e:	2300      	movs	r3, #0
}
 8010640:	4618      	mov	r0, r3
 8010642:	3714      	adds	r7, #20
 8010644:	46bd      	mov	sp, r7
 8010646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064a:	4770      	bx	lr

0801064c <_ZN20NullUnknownAllocator11free_memoryEPcjPKcj>:

void NullUnknownAllocator::free_memory(char* /*memory*/, size_t, const char*, size_t)
{
 801064c:	b480      	push	{r7}
 801064e:	b085      	sub	sp, #20
 8010650:	af00      	add	r7, sp, #0
 8010652:	60f8      	str	r0, [r7, #12]
 8010654:	60b9      	str	r1, [r7, #8]
 8010656:	607a      	str	r2, [r7, #4]
 8010658:	603b      	str	r3, [r7, #0]
}
 801065a:	bf00      	nop
 801065c:	3714      	adds	r7, #20
 801065e:	46bd      	mov	sp, r7
 8010660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010664:	4770      	bx	lr
	...

08010668 <_ZN20NullUnknownAllocatorC1Ev>:

NullUnknownAllocator::NullUnknownAllocator()
 8010668:	b580      	push	{r7, lr}
 801066a:	b082      	sub	sp, #8
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
    : TestMemoryAllocator("Null Allocator", "unknown", "unknown")
 8010670:	6878      	ldr	r0, [r7, #4]
 8010672:	4b06      	ldr	r3, [pc, #24]	; (801068c <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 8010674:	4a05      	ldr	r2, [pc, #20]	; (801068c <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 8010676:	4906      	ldr	r1, [pc, #24]	; (8010690 <_ZN20NullUnknownAllocatorC1Ev+0x28>)
 8010678:	f7ff fec8 	bl	801040c <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 801067c:	4a05      	ldr	r2, [pc, #20]	; (8010694 <_ZN20NullUnknownAllocatorC1Ev+0x2c>)
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	601a      	str	r2, [r3, #0]
{
}
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	4618      	mov	r0, r3
 8010686:	3708      	adds	r7, #8
 8010688:	46bd      	mov	sp, r7
 801068a:	bd80      	pop	{r7, pc}
 801068c:	080249a4 	.word	0x080249a4
 8010690:	080249ac 	.word	0x080249ac
 8010694:	080286a4 	.word	0x080286a4

08010698 <__tcf_3>:


TestMemoryAllocator* NullUnknownAllocator::defaultAllocator()
{
    static NullUnknownAllocator allocator;
 8010698:	b580      	push	{r7, lr}
 801069a:	af00      	add	r7, sp, #0
 801069c:	4801      	ldr	r0, [pc, #4]	; (80106a4 <__tcf_3+0xc>)
 801069e:	f7ff ffa5 	bl	80105ec <_ZN20NullUnknownAllocatorD1Ev>
 80106a2:	bd80      	pop	{r7, pc}
 80106a4:	200008f8 	.word	0x200008f8

080106a8 <_ZN20NullUnknownAllocator16defaultAllocatorEv>:
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	af00      	add	r7, sp, #0
    static NullUnknownAllocator allocator;
 80106ac:	4b12      	ldr	r3, [pc, #72]	; (80106f8 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 80106ae:	781b      	ldrb	r3, [r3, #0]
 80106b0:	f3bf 8f5b 	dmb	ish
 80106b4:	b2db      	uxtb	r3, r3
 80106b6:	f003 0301 	and.w	r3, r3, #1
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	bf0c      	ite	eq
 80106be:	2301      	moveq	r3, #1
 80106c0:	2300      	movne	r3, #0
 80106c2:	b2db      	uxtb	r3, r3
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d013      	beq.n	80106f0 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 80106c8:	480b      	ldr	r0, [pc, #44]	; (80106f8 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 80106ca:	f00f f9d9 	bl	801fa80 <__cxa_guard_acquire>
 80106ce:	4603      	mov	r3, r0
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	bf14      	ite	ne
 80106d4:	2301      	movne	r3, #1
 80106d6:	2300      	moveq	r3, #0
 80106d8:	b2db      	uxtb	r3, r3
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d008      	beq.n	80106f0 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 80106de:	4807      	ldr	r0, [pc, #28]	; (80106fc <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
 80106e0:	f7ff ffc2 	bl	8010668 <_ZN20NullUnknownAllocatorC1Ev>
 80106e4:	4804      	ldr	r0, [pc, #16]	; (80106f8 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 80106e6:	f00f f9d7 	bl	801fa98 <__cxa_guard_release>
 80106ea:	4805      	ldr	r0, [pc, #20]	; (8010700 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x58>)
 80106ec:	f00f f9fb 	bl	801fae6 <atexit>
    return &allocator;
 80106f0:	4b02      	ldr	r3, [pc, #8]	; (80106fc <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
}
 80106f2:	4618      	mov	r0, r3
 80106f4:	bd80      	pop	{r7, pc}
 80106f6:	bf00      	nop
 80106f8:	2000090c 	.word	0x2000090c
 80106fc:	200008f8 	.word	0x200008f8
 8010700:	08010699 	.word	0x08010699

08010704 <_ZNK10TestResult12getTestCountEv>:
    size_t getTestCount() const
 8010704:	b480      	push	{r7}
 8010706:	b083      	sub	sp, #12
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
        return testCount_;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	689b      	ldr	r3, [r3, #8]
    }
 8010710:	4618      	mov	r0, r3
 8010712:	370c      	adds	r7, #12
 8010714:	46bd      	mov	sp, r7
 8010716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071a:	4770      	bx	lr

0801071c <_ZNK10TestResult19getFilteredOutCountEv>:
    size_t getFilteredOutCount() const
 801071c:	b480      	push	{r7}
 801071e:	b083      	sub	sp, #12
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
        return filteredOutCount_;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	699b      	ldr	r3, [r3, #24]
    }
 8010728:	4618      	mov	r0, r3
 801072a:	370c      	adds	r7, #12
 801072c:	46bd      	mov	sp, r7
 801072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010732:	4770      	bx	lr

08010734 <_ZN10TestOutput21getWorkingEnvironmentEv>:
{
    workingEnvironment_ = workEnvironment;
}

TestOutput::WorkingEnvironment TestOutput::getWorkingEnvironment()
{
 8010734:	b580      	push	{r7, lr}
 8010736:	af00      	add	r7, sp, #0
    if (workingEnvironment_ == TestOutput::detectEnvironment)
 8010738:	4b05      	ldr	r3, [pc, #20]	; (8010750 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 801073a:	781b      	ldrb	r3, [r3, #0]
 801073c:	2b02      	cmp	r3, #2
 801073e:	d103      	bne.n	8010748 <_ZN10TestOutput21getWorkingEnvironmentEv+0x14>
        return PlatformSpecificGetWorkingEnvironment();
 8010740:	f004 fa4a 	bl	8014bd8 <_Z37PlatformSpecificGetWorkingEnvironmentv>
 8010744:	4603      	mov	r3, r0
 8010746:	e001      	b.n	801074c <_ZN10TestOutput21getWorkingEnvironmentEv+0x18>
    return workingEnvironment_;
 8010748:	4b01      	ldr	r3, [pc, #4]	; (8010750 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 801074a:	781b      	ldrb	r3, [r3, #0]
}
 801074c:	4618      	mov	r0, r3
 801074e:	bd80      	pop	{r7, pc}
 8010750:	20000088 	.word	0x20000088

08010754 <_ZN10TestOutputC1Ev>:


TestOutput::TestOutput() :
 8010754:	b480      	push	{r7}
 8010756:	b083      	sub	sp, #12
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
    dotCount_(0), verbose_(level_quiet), color_(false), progressIndication_(".")
 801075c:	4a0a      	ldr	r2, [pc, #40]	; (8010788 <_ZN10TestOutputC1Ev+0x34>)
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	601a      	str	r2, [r3, #0]
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	2200      	movs	r2, #0
 8010766:	605a      	str	r2, [r3, #4]
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	2200      	movs	r2, #0
 801076c:	721a      	strb	r2, [r3, #8]
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	2200      	movs	r2, #0
 8010772:	725a      	strb	r2, [r3, #9]
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	4a05      	ldr	r2, [pc, #20]	; (801078c <_ZN10TestOutputC1Ev+0x38>)
 8010778:	60da      	str	r2, [r3, #12]
{
}
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	4618      	mov	r0, r3
 801077e:	370c      	adds	r7, #12
 8010780:	46bd      	mov	sp, r7
 8010782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010786:	4770      	bx	lr
 8010788:	080287dc 	.word	0x080287dc
 801078c:	08024dac 	.word	0x08024dac

08010790 <_ZN10TestOutputD1Ev>:

TestOutput::~TestOutput()
 8010790:	b480      	push	{r7}
 8010792:	b083      	sub	sp, #12
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
 8010798:	4a04      	ldr	r2, [pc, #16]	; (80107ac <_ZN10TestOutputD1Ev+0x1c>)
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	601a      	str	r2, [r3, #0]
{
}
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	4618      	mov	r0, r3
 80107a2:	370c      	adds	r7, #12
 80107a4:	46bd      	mov	sp, r7
 80107a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107aa:	4770      	bx	lr
 80107ac:	080287dc 	.word	0x080287dc

080107b0 <_ZN10TestOutput7verboseENS_14VerbosityLevelE>:

void TestOutput::verbose(VerbosityLevel level)
{
 80107b0:	b480      	push	{r7}
 80107b2:	b083      	sub	sp, #12
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
 80107b8:	460b      	mov	r3, r1
 80107ba:	70fb      	strb	r3, [r7, #3]
    verbose_ = level;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	78fa      	ldrb	r2, [r7, #3]
 80107c0:	721a      	strb	r2, [r3, #8]
}
 80107c2:	bf00      	nop
 80107c4:	370c      	adds	r7, #12
 80107c6:	46bd      	mov	sp, r7
 80107c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107cc:	4770      	bx	lr

080107ce <_ZN10TestOutput5colorEv>:

void TestOutput::color()
{
 80107ce:	b480      	push	{r7}
 80107d0:	b083      	sub	sp, #12
 80107d2:	af00      	add	r7, sp, #0
 80107d4:	6078      	str	r0, [r7, #4]
    color_ = true;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	2201      	movs	r2, #1
 80107da:	725a      	strb	r2, [r3, #9]
}
 80107dc:	bf00      	nop
 80107de:	370c      	adds	r7, #12
 80107e0:	46bd      	mov	sp, r7
 80107e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e6:	4770      	bx	lr

080107e8 <_ZN10TestOutput5printEPKc>:

void TestOutput::print(const char* str)
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b082      	sub	sp, #8
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
 80107f0:	6039      	str	r1, [r7, #0]
    printBuffer(str);
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	3328      	adds	r3, #40	; 0x28
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	6839      	ldr	r1, [r7, #0]
 80107fc:	6878      	ldr	r0, [r7, #4]
 80107fe:	4798      	blx	r3
}
 8010800:	bf00      	nop
 8010802:	3708      	adds	r7, #8
 8010804:	46bd      	mov	sp, r7
 8010806:	bd80      	pop	{r7, pc}

08010808 <_ZN10TestOutput5printEl>:

void TestOutput::print(long n)
{
 8010808:	b590      	push	{r4, r7, lr}
 801080a:	b085      	sub	sp, #20
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
 8010810:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	332c      	adds	r3, #44	; 0x2c
 8010818:	681c      	ldr	r4, [r3, #0]
 801081a:	f107 0308 	add.w	r3, r7, #8
 801081e:	6839      	ldr	r1, [r7, #0]
 8010820:	4618      	mov	r0, r3
 8010822:	f7fd f8ff 	bl	800da24 <_Z10StringFroml>
 8010826:	f107 0308 	add.w	r3, r7, #8
 801082a:	4618      	mov	r0, r3
 801082c:	f7fc fdf4 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 8010830:	4603      	mov	r3, r0
 8010832:	4619      	mov	r1, r3
 8010834:	6878      	ldr	r0, [r7, #4]
 8010836:	47a0      	blx	r4
 8010838:	f107 0308 	add.w	r3, r7, #8
 801083c:	4618      	mov	r0, r3
 801083e:	f7fc fe18 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 8010842:	bf00      	nop
 8010844:	3714      	adds	r7, #20
 8010846:	46bd      	mov	sp, r7
 8010848:	bd90      	pop	{r4, r7, pc}

0801084a <_ZN10TestOutput5printEj>:

void TestOutput::print(size_t n)
{
 801084a:	b590      	push	{r4, r7, lr}
 801084c:	b085      	sub	sp, #20
 801084e:	af00      	add	r7, sp, #0
 8010850:	6078      	str	r0, [r7, #4]
 8010852:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	332c      	adds	r3, #44	; 0x2c
 801085a:	681c      	ldr	r4, [r3, #0]
 801085c:	f107 0308 	add.w	r3, r7, #8
 8010860:	6839      	ldr	r1, [r7, #0]
 8010862:	4618      	mov	r0, r3
 8010864:	f7fd fb34 	bl	800ded0 <_Z10StringFromj>
 8010868:	f107 0308 	add.w	r3, r7, #8
 801086c:	4618      	mov	r0, r3
 801086e:	f7fc fdd3 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 8010872:	4603      	mov	r3, r0
 8010874:	4619      	mov	r1, r3
 8010876:	6878      	ldr	r0, [r7, #4]
 8010878:	47a0      	blx	r4
 801087a:	f107 0308 	add.w	r3, r7, #8
 801087e:	4618      	mov	r0, r3
 8010880:	f7fc fdf7 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 8010884:	bf00      	nop
 8010886:	3714      	adds	r7, #20
 8010888:	46bd      	mov	sp, r7
 801088a:	bd90      	pop	{r4, r7, pc}

0801088c <_ZN10TestOutput11printDoubleEd>:

void TestOutput::printDouble(double d)
{
 801088c:	b590      	push	{r4, r7, lr}
 801088e:	b087      	sub	sp, #28
 8010890:	af00      	add	r7, sp, #0
 8010892:	60f8      	str	r0, [r7, #12]
 8010894:	ed87 0b00 	vstr	d0, [r7]
    print(StringFrom(d).asCharString());
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	332c      	adds	r3, #44	; 0x2c
 801089e:	681c      	ldr	r4, [r3, #0]
 80108a0:	f107 0310 	add.w	r3, r7, #16
 80108a4:	2106      	movs	r1, #6
 80108a6:	ed97 0b00 	vldr	d0, [r7]
 80108aa:	4618      	mov	r0, r3
 80108ac:	f7fd faa6 	bl	800ddfc <_Z10StringFromdi>
 80108b0:	f107 0310 	add.w	r3, r7, #16
 80108b4:	4618      	mov	r0, r3
 80108b6:	f7fc fdaf 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 80108ba:	4603      	mov	r3, r0
 80108bc:	4619      	mov	r1, r3
 80108be:	68f8      	ldr	r0, [r7, #12]
 80108c0:	47a0      	blx	r4
 80108c2:	f107 0310 	add.w	r3, r7, #16
 80108c6:	4618      	mov	r0, r3
 80108c8:	f7fc fdd3 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 80108cc:	bf00      	nop
 80108ce:	371c      	adds	r7, #28
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd90      	pop	{r4, r7, pc}

080108d4 <_ZlsR10TestOutputPKc>:

TestOutput& operator<<(TestOutput& p, const char* s)
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b082      	sub	sp, #8
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
 80108dc:	6039      	str	r1, [r7, #0]
    p.print(s);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	332c      	adds	r3, #44	; 0x2c
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	6839      	ldr	r1, [r7, #0]
 80108e8:	6878      	ldr	r0, [r7, #4]
 80108ea:	4798      	blx	r3
    return p;
 80108ec:	687b      	ldr	r3, [r7, #4]
}
 80108ee:	4618      	mov	r0, r3
 80108f0:	3708      	adds	r7, #8
 80108f2:	46bd      	mov	sp, r7
 80108f4:	bd80      	pop	{r7, pc}
	...

080108f8 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell>:
    p.print(i);
    return p;
}

void TestOutput::printCurrentTestStarted(const UtestShell& test)
{
 80108f8:	b590      	push	{r4, r7, lr}
 80108fa:	b085      	sub	sp, #20
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
 8010900:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) print(test.getFormattedName().asCharString());
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	7a1b      	ldrb	r3, [r3, #8]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d01a      	beq.n	8010940 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x48>
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	332c      	adds	r3, #44	; 0x2c
 8010910:	681c      	ldr	r4, [r3, #0]
 8010912:	683b      	ldr	r3, [r7, #0]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	3314      	adds	r3, #20
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	f107 0208 	add.w	r2, r7, #8
 801091e:	6839      	ldr	r1, [r7, #0]
 8010920:	4610      	mov	r0, r2
 8010922:	4798      	blx	r3
 8010924:	f107 0308 	add.w	r3, r7, #8
 8010928:	4618      	mov	r0, r3
 801092a:	f7fc fd75 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 801092e:	4603      	mov	r3, r0
 8010930:	4619      	mov	r1, r3
 8010932:	6878      	ldr	r0, [r7, #4]
 8010934:	47a0      	blx	r4
 8010936:	f107 0308 	add.w	r3, r7, #8
 801093a:	4618      	mov	r0, r3
 801093c:	f7fc fd99 	bl	800d472 <_ZN12SimpleStringD1Ev>

    if (test.willRun()) {
 8010940:	683b      	ldr	r3, [r7, #0]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	3318      	adds	r3, #24
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	6838      	ldr	r0, [r7, #0]
 801094a:	4798      	blx	r3
 801094c:	4603      	mov	r3, r0
 801094e:	2b00      	cmp	r3, #0
 8010950:	d007      	beq.n	8010962 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x6a>
       setProgressIndicator(".");
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	3344      	adds	r3, #68	; 0x44
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	4907      	ldr	r1, [pc, #28]	; (8010978 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x80>)
 801095c:	6878      	ldr	r0, [r7, #4]
 801095e:	4798      	blx	r3
    }
    else {
       setProgressIndicator("!");
    }
}
 8010960:	e006      	b.n	8010970 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x78>
       setProgressIndicator("!");
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	3344      	adds	r3, #68	; 0x44
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	4904      	ldr	r1, [pc, #16]	; (801097c <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x84>)
 801096c:	6878      	ldr	r0, [r7, #4]
 801096e:	4798      	blx	r3
}
 8010970:	bf00      	nop
 8010972:	3714      	adds	r7, #20
 8010974:	46bd      	mov	sp, r7
 8010976:	bd90      	pop	{r4, r7, pc}
 8010978:	08024dac 	.word	0x08024dac
 801097c:	08024db0 	.word	0x08024db0

08010980 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult>:

void TestOutput::printCurrentTestEnded(const TestResult& res)
{
 8010980:	b590      	push	{r4, r7, lr}
 8010982:	b083      	sub	sp, #12
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
 8010988:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) {
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	7a1b      	ldrb	r3, [r3, #8]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d019      	beq.n	80109c6 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x46>
        print(" - ");
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	332c      	adds	r3, #44	; 0x2c
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	4910      	ldr	r1, [pc, #64]	; (80109dc <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x5c>)
 801099c:	6878      	ldr	r0, [r7, #4]
 801099e:	4798      	blx	r3
        print(res.getCurrentTestTotalExecutionTime());
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	3334      	adds	r3, #52	; 0x34
 80109a6:	681c      	ldr	r4, [r3, #0]
 80109a8:	6838      	ldr	r0, [r7, #0]
 80109aa:	f002 f845 	bl	8012a38 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 80109ae:	4603      	mov	r3, r0
 80109b0:	4619      	mov	r1, r3
 80109b2:	6878      	ldr	r0, [r7, #4]
 80109b4:	47a0      	blx	r4
        print(" ms\n");
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	332c      	adds	r3, #44	; 0x2c
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	4908      	ldr	r1, [pc, #32]	; (80109e0 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x60>)
 80109c0:	6878      	ldr	r0, [r7, #4]
 80109c2:	4798      	blx	r3
    }
    else {
        printProgressIndicator();
    }
}
 80109c4:	e005      	b.n	80109d2 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x52>
        printProgressIndicator();
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	3358      	adds	r3, #88	; 0x58
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	6878      	ldr	r0, [r7, #4]
 80109d0:	4798      	blx	r3
}
 80109d2:	bf00      	nop
 80109d4:	370c      	adds	r7, #12
 80109d6:	46bd      	mov	sp, r7
 80109d8:	bd90      	pop	{r4, r7, pc}
 80109da:	bf00      	nop
 80109dc:	08024db4 	.word	0x08024db4
 80109e0:	08024db8 	.word	0x08024db8

080109e4 <_ZN10TestOutput22printProgressIndicatorEv>:

void TestOutput::printProgressIndicator()
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b082      	sub	sp, #8
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
    print(progressIndication_);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	332c      	adds	r3, #44	; 0x2c
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	687a      	ldr	r2, [r7, #4]
 80109f6:	68d2      	ldr	r2, [r2, #12]
 80109f8:	4611      	mov	r1, r2
 80109fa:	6878      	ldr	r0, [r7, #4]
 80109fc:	4798      	blx	r3
    if (++dotCount_ % 50 == 0) print("\n");
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	685b      	ldr	r3, [r3, #4]
 8010a02:	1c5a      	adds	r2, r3, #1
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	605a      	str	r2, [r3, #4]
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	685a      	ldr	r2, [r3, #4]
 8010a0c:	4b0d      	ldr	r3, [pc, #52]	; (8010a44 <_ZN10TestOutput22printProgressIndicatorEv+0x60>)
 8010a0e:	fb83 1302 	smull	r1, r3, r3, r2
 8010a12:	1119      	asrs	r1, r3, #4
 8010a14:	17d3      	asrs	r3, r2, #31
 8010a16:	1acb      	subs	r3, r1, r3
 8010a18:	2132      	movs	r1, #50	; 0x32
 8010a1a:	fb01 f303 	mul.w	r3, r1, r3
 8010a1e:	1ad3      	subs	r3, r2, r3
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	bf0c      	ite	eq
 8010a24:	2301      	moveq	r3, #1
 8010a26:	2300      	movne	r3, #0
 8010a28:	b2db      	uxtb	r3, r3
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d006      	beq.n	8010a3c <_ZN10TestOutput22printProgressIndicatorEv+0x58>
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	332c      	adds	r3, #44	; 0x2c
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	4904      	ldr	r1, [pc, #16]	; (8010a48 <_ZN10TestOutput22printProgressIndicatorEv+0x64>)
 8010a38:	6878      	ldr	r0, [r7, #4]
 8010a3a:	4798      	blx	r3
}
 8010a3c:	bf00      	nop
 8010a3e:	3708      	adds	r7, #8
 8010a40:	46bd      	mov	sp, r7
 8010a42:	bd80      	pop	{r7, pc}
 8010a44:	51eb851f 	.word	0x51eb851f
 8010a48:	08024dc0 	.word	0x08024dc0

08010a4c <_ZN10TestOutput20setProgressIndicatorEPKc>:

void TestOutput::setProgressIndicator(const char* indicator)
{
 8010a4c:	b480      	push	{r7}
 8010a4e:	b083      	sub	sp, #12
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
 8010a54:	6039      	str	r1, [r7, #0]
    progressIndication_ = indicator;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	683a      	ldr	r2, [r7, #0]
 8010a5a:	60da      	str	r2, [r3, #12]
}
 8010a5c:	bf00      	nop
 8010a5e:	370c      	adds	r7, #12
 8010a60:	46bd      	mov	sp, r7
 8010a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a66:	4770      	bx	lr

08010a68 <_ZN10TestOutput17printTestsStartedEv>:

void TestOutput::printTestsStarted()
{
 8010a68:	b480      	push	{r7}
 8010a6a:	b083      	sub	sp, #12
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
}
 8010a70:	bf00      	nop
 8010a72:	370c      	adds	r7, #12
 8010a74:	46bd      	mov	sp, r7
 8010a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7a:	4770      	bx	lr

08010a7c <_ZN10TestOutput24printCurrentGroupStartedERK10UtestShell>:

void TestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 8010a7c:	b480      	push	{r7}
 8010a7e:	b083      	sub	sp, #12
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
 8010a84:	6039      	str	r1, [r7, #0]
}
 8010a86:	bf00      	nop
 8010a88:	370c      	adds	r7, #12
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a90:	4770      	bx	lr

08010a92 <_ZN10TestOutput22printCurrentGroupEndedERK10TestResult>:

void TestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 8010a92:	b480      	push	{r7}
 8010a94:	b083      	sub	sp, #12
 8010a96:	af00      	add	r7, sp, #0
 8010a98:	6078      	str	r0, [r7, #4]
 8010a9a:	6039      	str	r1, [r7, #0]
}
 8010a9c:	bf00      	nop
 8010a9e:	370c      	adds	r7, #12
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa6:	4770      	bx	lr

08010aa8 <_ZN10TestOutput15printTestsEndedERK10TestResult>:

void TestOutput::printTestsEnded(const TestResult& result)
{
 8010aa8:	b590      	push	{r4, r7, lr}
 8010aaa:	b085      	sub	sp, #20
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
 8010ab0:	6039      	str	r1, [r7, #0]
    print("\n");
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	332c      	adds	r3, #44	; 0x2c
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	496f      	ldr	r1, [pc, #444]	; (8010c78 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d0>)
 8010abc:	6878      	ldr	r0, [r7, #4]
 8010abe:	4798      	blx	r3
    const bool isFailure = result.isFailure();
 8010ac0:	6838      	ldr	r0, [r7, #0]
 8010ac2:	f7f8 f83d 	bl	8008b40 <_ZNK10TestResult9isFailureEv>
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	73fb      	strb	r3, [r7, #15]
    const size_t failureCount = result.getFailureCount();
 8010aca:	6838      	ldr	r0, [r7, #0]
 8010acc:	f7f8 f82c 	bl	8008b28 <_ZNK10TestResult15getFailureCountEv>
 8010ad0:	60b8      	str	r0, [r7, #8]
    if (isFailure) {
 8010ad2:	7bfb      	ldrb	r3, [r7, #15]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d02b      	beq.n	8010b30 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x88>
        if (color_) {
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	7a5b      	ldrb	r3, [r3, #9]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d006      	beq.n	8010aee <_ZN10TestOutput15printTestsEndedERK10TestResult+0x46>
            print("\033[31;1m");
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	332c      	adds	r3, #44	; 0x2c
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	4964      	ldr	r1, [pc, #400]	; (8010c7c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d4>)
 8010aea:	6878      	ldr	r0, [r7, #4]
 8010aec:	4798      	blx	r3
        }
        print("Errors (");
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	332c      	adds	r3, #44	; 0x2c
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	4962      	ldr	r1, [pc, #392]	; (8010c80 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d8>)
 8010af8:	6878      	ldr	r0, [r7, #4]
 8010afa:	4798      	blx	r3
        if (failureCount > 0) {
 8010afc:	68bb      	ldr	r3, [r7, #8]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d00e      	beq.n	8010b20 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x78>
            print(failureCount);
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	3334      	adds	r3, #52	; 0x34
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	68b9      	ldr	r1, [r7, #8]
 8010b0c:	6878      	ldr	r0, [r7, #4]
 8010b0e:	4798      	blx	r3
            print(" failures, ");
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	332c      	adds	r3, #44	; 0x2c
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	495a      	ldr	r1, [pc, #360]	; (8010c84 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1dc>)
 8010b1a:	6878      	ldr	r0, [r7, #4]
 8010b1c:	4798      	blx	r3
 8010b1e:	e019      	b.n	8010b54 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
        else {
            print("ran nothing, ");
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	332c      	adds	r3, #44	; 0x2c
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	4957      	ldr	r1, [pc, #348]	; (8010c88 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e0>)
 8010b2a:	6878      	ldr	r0, [r7, #4]
 8010b2c:	4798      	blx	r3
 8010b2e:	e011      	b.n	8010b54 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
    }
    else {
        if (color_) {
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	7a5b      	ldrb	r3, [r3, #9]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d006      	beq.n	8010b46 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x9e>
            print("\033[32;1m");
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	332c      	adds	r3, #44	; 0x2c
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	4952      	ldr	r1, [pc, #328]	; (8010c8c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e4>)
 8010b42:	6878      	ldr	r0, [r7, #4]
 8010b44:	4798      	blx	r3
        }
        print("OK (");
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	332c      	adds	r3, #44	; 0x2c
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	4950      	ldr	r1, [pc, #320]	; (8010c90 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e8>)
 8010b50:	6878      	ldr	r0, [r7, #4]
 8010b52:	4798      	blx	r3
    }
    print(result.getTestCount());
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	3334      	adds	r3, #52	; 0x34
 8010b5a:	681c      	ldr	r4, [r3, #0]
 8010b5c:	6838      	ldr	r0, [r7, #0]
 8010b5e:	f7ff fdd1 	bl	8010704 <_ZNK10TestResult12getTestCountEv>
 8010b62:	4603      	mov	r3, r0
 8010b64:	4619      	mov	r1, r3
 8010b66:	6878      	ldr	r0, [r7, #4]
 8010b68:	47a0      	blx	r4
    print(" tests, ");
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	332c      	adds	r3, #44	; 0x2c
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	4948      	ldr	r1, [pc, #288]	; (8010c94 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1ec>)
 8010b74:	6878      	ldr	r0, [r7, #4]
 8010b76:	4798      	blx	r3
    print(result.getRunCount());
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	3334      	adds	r3, #52	; 0x34
 8010b7e:	681c      	ldr	r4, [r3, #0]
 8010b80:	6838      	ldr	r0, [r7, #0]
 8010b82:	f7f7 ffb9 	bl	8008af8 <_ZNK10TestResult11getRunCountEv>
 8010b86:	4603      	mov	r3, r0
 8010b88:	4619      	mov	r1, r3
 8010b8a:	6878      	ldr	r0, [r7, #4]
 8010b8c:	47a0      	blx	r4
    print(" ran, ");
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	332c      	adds	r3, #44	; 0x2c
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	4940      	ldr	r1, [pc, #256]	; (8010c98 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f0>)
 8010b98:	6878      	ldr	r0, [r7, #4]
 8010b9a:	4798      	blx	r3
    print(result.getCheckCount());
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	3334      	adds	r3, #52	; 0x34
 8010ba2:	681c      	ldr	r4, [r3, #0]
 8010ba4:	6838      	ldr	r0, [r7, #0]
 8010ba6:	f7f8 fc13 	bl	80093d0 <_ZNK10TestResult13getCheckCountEv>
 8010baa:	4603      	mov	r3, r0
 8010bac:	4619      	mov	r1, r3
 8010bae:	6878      	ldr	r0, [r7, #4]
 8010bb0:	47a0      	blx	r4
    print(" checks, ");
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	332c      	adds	r3, #44	; 0x2c
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	4938      	ldr	r1, [pc, #224]	; (8010c9c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f4>)
 8010bbc:	6878      	ldr	r0, [r7, #4]
 8010bbe:	4798      	blx	r3
    print(result.getIgnoredCount());
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	3334      	adds	r3, #52	; 0x34
 8010bc6:	681c      	ldr	r4, [r3, #0]
 8010bc8:	6838      	ldr	r0, [r7, #0]
 8010bca:	f7f7 ffa1 	bl	8008b10 <_ZNK10TestResult15getIgnoredCountEv>
 8010bce:	4603      	mov	r3, r0
 8010bd0:	4619      	mov	r1, r3
 8010bd2:	6878      	ldr	r0, [r7, #4]
 8010bd4:	47a0      	blx	r4
    print(" ignored, ");
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	332c      	adds	r3, #44	; 0x2c
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	4930      	ldr	r1, [pc, #192]	; (8010ca0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f8>)
 8010be0:	6878      	ldr	r0, [r7, #4]
 8010be2:	4798      	blx	r3
    print(result.getFilteredOutCount());
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	3334      	adds	r3, #52	; 0x34
 8010bea:	681c      	ldr	r4, [r3, #0]
 8010bec:	6838      	ldr	r0, [r7, #0]
 8010bee:	f7ff fd95 	bl	801071c <_ZNK10TestResult19getFilteredOutCountEv>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	4619      	mov	r1, r3
 8010bf6:	6878      	ldr	r0, [r7, #4]
 8010bf8:	47a0      	blx	r4
    print(" filtered out, ");
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	332c      	adds	r3, #44	; 0x2c
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	4928      	ldr	r1, [pc, #160]	; (8010ca4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1fc>)
 8010c04:	6878      	ldr	r0, [r7, #4]
 8010c06:	4798      	blx	r3
    print(result.getTotalExecutionTime());
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	3334      	adds	r3, #52	; 0x34
 8010c0e:	681c      	ldr	r4, [r3, #0]
 8010c10:	6838      	ldr	r0, [r7, #0]
 8010c12:	f001 ff05 	bl	8012a20 <_ZNK10TestResult21getTotalExecutionTimeEv>
 8010c16:	4603      	mov	r3, r0
 8010c18:	4619      	mov	r1, r3
 8010c1a:	6878      	ldr	r0, [r7, #4]
 8010c1c:	47a0      	blx	r4
    print(" ms)");
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	332c      	adds	r3, #44	; 0x2c
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	4920      	ldr	r1, [pc, #128]	; (8010ca8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x200>)
 8010c28:	6878      	ldr	r0, [r7, #4]
 8010c2a:	4798      	blx	r3
    if (color_) {
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	7a5b      	ldrb	r3, [r3, #9]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d006      	beq.n	8010c42 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x19a>
        print("\033[m");
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	332c      	adds	r3, #44	; 0x2c
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	491b      	ldr	r1, [pc, #108]	; (8010cac <_ZN10TestOutput15printTestsEndedERK10TestResult+0x204>)
 8010c3e:	6878      	ldr	r0, [r7, #4]
 8010c40:	4798      	blx	r3
    }
    if (isFailure && failureCount == 0) {
 8010c42:	7bfb      	ldrb	r3, [r7, #15]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d009      	beq.n	8010c5c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
 8010c48:	68bb      	ldr	r3, [r7, #8]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d106      	bne.n	8010c5c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
              "This often happens because of linking errors or typos in test filter.");
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	332c      	adds	r3, #44	; 0x2c
 8010c54:	681b      	ldr	r3, [r3, #0]
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
 8010c56:	4916      	ldr	r1, [pc, #88]	; (8010cb0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x208>)
 8010c58:	6878      	ldr	r0, [r7, #4]
 8010c5a:	4798      	blx	r3
    }
    print("\n\n");
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	332c      	adds	r3, #44	; 0x2c
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	4913      	ldr	r1, [pc, #76]	; (8010cb4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x20c>)
 8010c66:	6878      	ldr	r0, [r7, #4]
 8010c68:	4798      	blx	r3

    dotCount_ = 0;
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	2200      	movs	r2, #0
 8010c6e:	605a      	str	r2, [r3, #4]
}
 8010c70:	bf00      	nop
 8010c72:	3714      	adds	r7, #20
 8010c74:	46bd      	mov	sp, r7
 8010c76:	bd90      	pop	{r4, r7, pc}
 8010c78:	08024dc0 	.word	0x08024dc0
 8010c7c:	08024dc4 	.word	0x08024dc4
 8010c80:	08024dcc 	.word	0x08024dcc
 8010c84:	08024dd8 	.word	0x08024dd8
 8010c88:	08024de4 	.word	0x08024de4
 8010c8c:	08024df4 	.word	0x08024df4
 8010c90:	08024dfc 	.word	0x08024dfc
 8010c94:	08024e04 	.word	0x08024e04
 8010c98:	08024e10 	.word	0x08024e10
 8010c9c:	08024e18 	.word	0x08024e18
 8010ca0:	08024e24 	.word	0x08024e24
 8010ca4:	08024e30 	.word	0x08024e30
 8010ca8:	08024e40 	.word	0x08024e40
 8010cac:	08024e48 	.word	0x08024e48
 8010cb0:	08024e4c 	.word	0x08024e4c
 8010cb4:	08024ef0 	.word	0x08024ef0

08010cb8 <_ZN10TestOutput12printTestRunEjj>:

void TestOutput::printTestRun(size_t number, size_t total)
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b084      	sub	sp, #16
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	60f8      	str	r0, [r7, #12]
 8010cc0:	60b9      	str	r1, [r7, #8]
 8010cc2:	607a      	str	r2, [r7, #4]
    if (total > 1) {
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	2b01      	cmp	r3, #1
 8010cc8:	d922      	bls.n	8010d10 <_ZN10TestOutput12printTestRunEjj+0x58>
        print("Test run ");
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	332c      	adds	r3, #44	; 0x2c
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	4911      	ldr	r1, [pc, #68]	; (8010d18 <_ZN10TestOutput12printTestRunEjj+0x60>)
 8010cd4:	68f8      	ldr	r0, [r7, #12]
 8010cd6:	4798      	blx	r3
        print(number);
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	3334      	adds	r3, #52	; 0x34
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	68b9      	ldr	r1, [r7, #8]
 8010ce2:	68f8      	ldr	r0, [r7, #12]
 8010ce4:	4798      	blx	r3
        print(" of ");
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	332c      	adds	r3, #44	; 0x2c
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	490b      	ldr	r1, [pc, #44]	; (8010d1c <_ZN10TestOutput12printTestRunEjj+0x64>)
 8010cf0:	68f8      	ldr	r0, [r7, #12]
 8010cf2:	4798      	blx	r3
        print(total);
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	3334      	adds	r3, #52	; 0x34
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	6879      	ldr	r1, [r7, #4]
 8010cfe:	68f8      	ldr	r0, [r7, #12]
 8010d00:	4798      	blx	r3
        print("\n");
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	332c      	adds	r3, #44	; 0x2c
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	4905      	ldr	r1, [pc, #20]	; (8010d20 <_ZN10TestOutput12printTestRunEjj+0x68>)
 8010d0c:	68f8      	ldr	r0, [r7, #12]
 8010d0e:	4798      	blx	r3
    }
}
 8010d10:	bf00      	nop
 8010d12:	3710      	adds	r7, #16
 8010d14:	46bd      	mov	sp, r7
 8010d16:	bd80      	pop	{r7, pc}
 8010d18:	08024ef4 	.word	0x08024ef4
 8010d1c:	08024f00 	.word	0x08024f00
 8010d20:	08024dc0 	.word	0x08024dc0

08010d24 <_ZN10TestOutput12printFailureERK11TestFailure>:

void TestOutput::printFailure(const TestFailure& failure)
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b084      	sub	sp, #16
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
 8010d2c:	6039      	str	r1, [r7, #0]
    if (failure.isOutsideTestFile() || failure.isInHelperFunction())
 8010d2e:	6838      	ldr	r0, [r7, #0]
 8010d30:	f7fd ffa1 	bl	800ec76 <_ZNK11TestFailure17isOutsideTestFileEv>
 8010d34:	4603      	mov	r3, r0
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d105      	bne.n	8010d46 <_ZN10TestOutput12printFailureERK11TestFailure+0x22>
 8010d3a:	6838      	ldr	r0, [r7, #0]
 8010d3c:	f7fd ffad 	bl	800ec9a <_ZNK11TestFailure18isInHelperFunctionEv>
 8010d40:	4603      	mov	r3, r0
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d001      	beq.n	8010d4a <_ZN10TestOutput12printFailureERK11TestFailure+0x26>
 8010d46:	2301      	movs	r3, #1
 8010d48:	e000      	b.n	8010d4c <_ZN10TestOutput12printFailureERK11TestFailure+0x28>
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d004      	beq.n	8010d5a <_ZN10TestOutput12printFailureERK11TestFailure+0x36>
        printFileAndLineForTestAndFailure(failure);
 8010d50:	6839      	ldr	r1, [r7, #0]
 8010d52:	6878      	ldr	r0, [r7, #4]
 8010d54:	f000 f81d 	bl	8010d92 <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>
 8010d58:	e003      	b.n	8010d62 <_ZN10TestOutput12printFailureERK11TestFailure+0x3e>
    else
        printFileAndLineForFailure(failure);
 8010d5a:	6839      	ldr	r1, [r7, #0]
 8010d5c:	6878      	ldr	r0, [r7, #4]
 8010d5e:	f000 f86b 	bl	8010e38 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>

    printFailureMessage(failure.getMessage());
 8010d62:	683b      	ldr	r3, [r7, #0]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	3318      	adds	r3, #24
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	f107 0208 	add.w	r2, r7, #8
 8010d6e:	6839      	ldr	r1, [r7, #0]
 8010d70:	4610      	mov	r0, r2
 8010d72:	4798      	blx	r3
 8010d74:	f107 0308 	add.w	r3, r7, #8
 8010d78:	4619      	mov	r1, r3
 8010d7a:	6878      	ldr	r0, [r7, #4]
 8010d7c:	f000 f8b2 	bl	8010ee4 <_ZN10TestOutput19printFailureMessageE12SimpleString>
 8010d80:	f107 0308 	add.w	r3, r7, #8
 8010d84:	4618      	mov	r0, r3
 8010d86:	f7fc fb74 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 8010d8a:	bf00      	nop
 8010d8c:	3710      	adds	r7, #16
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	bd80      	pop	{r7, pc}

08010d92 <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>:

void TestOutput::printFileAndLineForTestAndFailure(const TestFailure& failure)
{
 8010d92:	b580      	push	{r7, lr}
 8010d94:	b088      	sub	sp, #32
 8010d96:	af00      	add	r7, sp, #0
 8010d98:	6078      	str	r0, [r7, #4]
 8010d9a:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getTestFileName(), failure.getTestLineNumber());
 8010d9c:	683b      	ldr	r3, [r7, #0]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	331c      	adds	r3, #28
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	f107 0208 	add.w	r2, r7, #8
 8010da8:	6839      	ldr	r1, [r7, #0]
 8010daa:	4610      	mov	r0, r2
 8010dac:	4798      	blx	r3
 8010dae:	683b      	ldr	r3, [r7, #0]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	3320      	adds	r3, #32
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	6838      	ldr	r0, [r7, #0]
 8010db8:	4798      	blx	r3
 8010dba:	4602      	mov	r2, r0
 8010dbc:	f107 0308 	add.w	r3, r7, #8
 8010dc0:	4619      	mov	r1, r3
 8010dc2:	6878      	ldr	r0, [r7, #4]
 8010dc4:	f000 f8be 	bl	8010f44 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 8010dc8:	f107 0308 	add.w	r3, r7, #8
 8010dcc:	4618      	mov	r0, r3
 8010dce:	f7fc fb50 	bl	800d472 <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 8010dd2:	683b      	ldr	r3, [r7, #0]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	330c      	adds	r3, #12
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	f107 0210 	add.w	r2, r7, #16
 8010dde:	6839      	ldr	r1, [r7, #0]
 8010de0:	4610      	mov	r0, r2
 8010de2:	4798      	blx	r3
 8010de4:	f107 0310 	add.w	r3, r7, #16
 8010de8:	4619      	mov	r1, r3
 8010dea:	6878      	ldr	r0, [r7, #4]
 8010dec:	f000 f85c 	bl	8010ea8 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 8010df0:	f107 0310 	add.w	r3, r7, #16
 8010df4:	4618      	mov	r0, r3
 8010df6:	f7fc fb3c 	bl	800d472 <_ZN12SimpleStringD1Ev>
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 8010dfa:	683b      	ldr	r3, [r7, #0]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	3308      	adds	r3, #8
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	f107 0218 	add.w	r2, r7, #24
 8010e06:	6839      	ldr	r1, [r7, #0]
 8010e08:	4610      	mov	r0, r2
 8010e0a:	4798      	blx	r3
 8010e0c:	683b      	ldr	r3, [r7, #0]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	3314      	adds	r3, #20
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	6838      	ldr	r0, [r7, #0]
 8010e16:	4798      	blx	r3
 8010e18:	4602      	mov	r2, r0
 8010e1a:	f107 0318 	add.w	r3, r7, #24
 8010e1e:	4619      	mov	r1, r3
 8010e20:	6878      	ldr	r0, [r7, #4]
 8010e22:	f000 f88f 	bl	8010f44 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 8010e26:	f107 0318 	add.w	r3, r7, #24
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	f7fc fb21 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 8010e30:	bf00      	nop
 8010e32:	3720      	adds	r7, #32
 8010e34:	46bd      	mov	sp, r7
 8010e36:	bd80      	pop	{r7, pc}

08010e38 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>:

void TestOutput::printFileAndLineForFailure(const TestFailure& failure)
{
 8010e38:	b580      	push	{r7, lr}
 8010e3a:	b086      	sub	sp, #24
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	6078      	str	r0, [r7, #4]
 8010e40:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 8010e42:	683b      	ldr	r3, [r7, #0]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	3308      	adds	r3, #8
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	f107 0208 	add.w	r2, r7, #8
 8010e4e:	6839      	ldr	r1, [r7, #0]
 8010e50:	4610      	mov	r0, r2
 8010e52:	4798      	blx	r3
 8010e54:	683b      	ldr	r3, [r7, #0]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	3314      	adds	r3, #20
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	6838      	ldr	r0, [r7, #0]
 8010e5e:	4798      	blx	r3
 8010e60:	4602      	mov	r2, r0
 8010e62:	f107 0308 	add.w	r3, r7, #8
 8010e66:	4619      	mov	r1, r3
 8010e68:	6878      	ldr	r0, [r7, #4]
 8010e6a:	f000 f86b 	bl	8010f44 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 8010e6e:	f107 0308 	add.w	r3, r7, #8
 8010e72:	4618      	mov	r0, r3
 8010e74:	f7fc fafd 	bl	800d472 <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	330c      	adds	r3, #12
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	f107 0210 	add.w	r2, r7, #16
 8010e84:	6839      	ldr	r1, [r7, #0]
 8010e86:	4610      	mov	r0, r2
 8010e88:	4798      	blx	r3
 8010e8a:	f107 0310 	add.w	r3, r7, #16
 8010e8e:	4619      	mov	r1, r3
 8010e90:	6878      	ldr	r0, [r7, #4]
 8010e92:	f000 f809 	bl	8010ea8 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 8010e96:	f107 0310 	add.w	r3, r7, #16
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f7fc fae9 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 8010ea0:	bf00      	nop
 8010ea2:	3718      	adds	r7, #24
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	bd80      	pop	{r7, pc}

08010ea8 <_ZN10TestOutput18printFailureInTestE12SimpleString>:

void TestOutput::printFailureInTest(SimpleString testName)
{
 8010ea8:	b590      	push	{r4, r7, lr}
 8010eaa:	b083      	sub	sp, #12
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]
 8010eb0:	6039      	str	r1, [r7, #0]
    print(" Failure in ");
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	332c      	adds	r3, #44	; 0x2c
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	4909      	ldr	r1, [pc, #36]	; (8010ee0 <_ZN10TestOutput18printFailureInTestE12SimpleString+0x38>)
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	4798      	blx	r3
    print(testName.asCharString());
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	332c      	adds	r3, #44	; 0x2c
 8010ec6:	681c      	ldr	r4, [r3, #0]
 8010ec8:	6838      	ldr	r0, [r7, #0]
 8010eca:	f7fc faa5 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	4619      	mov	r1, r3
 8010ed2:	6878      	ldr	r0, [r7, #4]
 8010ed4:	47a0      	blx	r4
}
 8010ed6:	bf00      	nop
 8010ed8:	370c      	adds	r7, #12
 8010eda:	46bd      	mov	sp, r7
 8010edc:	bd90      	pop	{r4, r7, pc}
 8010ede:	bf00      	nop
 8010ee0:	08024f08 	.word	0x08024f08

08010ee4 <_ZN10TestOutput19printFailureMessageE12SimpleString>:

void TestOutput::printFailureMessage(SimpleString reason)
{
 8010ee4:	b590      	push	{r4, r7, lr}
 8010ee6:	b083      	sub	sp, #12
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
 8010eec:	6039      	str	r1, [r7, #0]
    print("\n");
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	332c      	adds	r3, #44	; 0x2c
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	4910      	ldr	r1, [pc, #64]	; (8010f38 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x54>)
 8010ef8:	6878      	ldr	r0, [r7, #4]
 8010efa:	4798      	blx	r3
    print("\t");
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	332c      	adds	r3, #44	; 0x2c
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	490d      	ldr	r1, [pc, #52]	; (8010f3c <_ZN10TestOutput19printFailureMessageE12SimpleString+0x58>)
 8010f06:	6878      	ldr	r0, [r7, #4]
 8010f08:	4798      	blx	r3
    print(reason.asCharString());
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	332c      	adds	r3, #44	; 0x2c
 8010f10:	681c      	ldr	r4, [r3, #0]
 8010f12:	6838      	ldr	r0, [r7, #0]
 8010f14:	f7fc fa80 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 8010f18:	4603      	mov	r3, r0
 8010f1a:	4619      	mov	r1, r3
 8010f1c:	6878      	ldr	r0, [r7, #4]
 8010f1e:	47a0      	blx	r4
    print("\n\n");
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	332c      	adds	r3, #44	; 0x2c
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	4905      	ldr	r1, [pc, #20]	; (8010f40 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x5c>)
 8010f2a:	6878      	ldr	r0, [r7, #4]
 8010f2c:	4798      	blx	r3
}
 8010f2e:	bf00      	nop
 8010f30:	370c      	adds	r7, #12
 8010f32:	46bd      	mov	sp, r7
 8010f34:	bd90      	pop	{r4, r7, pc}
 8010f36:	bf00      	nop
 8010f38:	08024dc0 	.word	0x08024dc0
 8010f3c:	08024f18 	.word	0x08024f18
 8010f40:	08024ef0 	.word	0x08024ef0

08010f44 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>:

void TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString file, size_t lineNumber)
{
 8010f44:	b590      	push	{r4, r7, lr}
 8010f46:	b089      	sub	sp, #36	; 0x24
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	60f8      	str	r0, [r7, #12]
 8010f4c:	60b9      	str	r1, [r7, #8]
 8010f4e:	607a      	str	r2, [r7, #4]
    if (TestOutput::getWorkingEnvironment() == TestOutput::visualStudio)
 8010f50:	f7ff fbf0 	bl	8010734 <_ZN10TestOutput21getWorkingEnvironmentEv>
 8010f54:	4603      	mov	r3, r0
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	bf0c      	ite	eq
 8010f5a:	2301      	moveq	r3, #1
 8010f5c:	2300      	movne	r3, #0
 8010f5e:	b2db      	uxtb	r3, r3
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d015      	beq.n	8010f90 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x4c>
        printVisualStudioErrorInFileOnLine(file, lineNumber);
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	3354      	adds	r3, #84	; 0x54
 8010f6a:	681c      	ldr	r4, [r3, #0]
 8010f6c:	f107 0310 	add.w	r3, r7, #16
 8010f70:	68b9      	ldr	r1, [r7, #8]
 8010f72:	4618      	mov	r0, r3
 8010f74:	f7fb ff19 	bl	800cdaa <_ZN12SimpleStringC1ERKS_>
 8010f78:	f107 0310 	add.w	r3, r7, #16
 8010f7c:	687a      	ldr	r2, [r7, #4]
 8010f7e:	4619      	mov	r1, r3
 8010f80:	68f8      	ldr	r0, [r7, #12]
 8010f82:	47a0      	blx	r4
 8010f84:	f107 0310 	add.w	r3, r7, #16
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f7fc fa72 	bl	800d472 <_ZN12SimpleStringD1Ev>
    else
        printEclipseErrorInFileOnLine(file, lineNumber);
}
 8010f8e:	e014      	b.n	8010fba <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x76>
        printEclipseErrorInFileOnLine(file, lineNumber);
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	3350      	adds	r3, #80	; 0x50
 8010f96:	681c      	ldr	r4, [r3, #0]
 8010f98:	f107 0318 	add.w	r3, r7, #24
 8010f9c:	68b9      	ldr	r1, [r7, #8]
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	f7fb ff03 	bl	800cdaa <_ZN12SimpleStringC1ERKS_>
 8010fa4:	f107 0318 	add.w	r3, r7, #24
 8010fa8:	687a      	ldr	r2, [r7, #4]
 8010faa:	4619      	mov	r1, r3
 8010fac:	68f8      	ldr	r0, [r7, #12]
 8010fae:	47a0      	blx	r4
 8010fb0:	f107 0318 	add.w	r3, r7, #24
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	f7fc fa5c 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 8010fba:	bf00      	nop
 8010fbc:	3724      	adds	r7, #36	; 0x24
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	bd90      	pop	{r4, r7, pc}
	...

08010fc4 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printEclipseErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 8010fc4:	b590      	push	{r4, r7, lr}
 8010fc6:	b085      	sub	sp, #20
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	60f8      	str	r0, [r7, #12]
 8010fcc:	60b9      	str	r1, [r7, #8]
 8010fce:	607a      	str	r2, [r7, #4]
    print("\n");
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	332c      	adds	r3, #44	; 0x2c
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	4916      	ldr	r1, [pc, #88]	; (8011034 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x70>)
 8010fda:	68f8      	ldr	r0, [r7, #12]
 8010fdc:	4798      	blx	r3
    print(file.asCharString());
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	332c      	adds	r3, #44	; 0x2c
 8010fe4:	681c      	ldr	r4, [r3, #0]
 8010fe6:	68b8      	ldr	r0, [r7, #8]
 8010fe8:	f7fc fa16 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 8010fec:	4603      	mov	r3, r0
 8010fee:	4619      	mov	r1, r3
 8010ff0:	68f8      	ldr	r0, [r7, #12]
 8010ff2:	47a0      	blx	r4
    print(":");
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	332c      	adds	r3, #44	; 0x2c
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	490e      	ldr	r1, [pc, #56]	; (8011038 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 8010ffe:	68f8      	ldr	r0, [r7, #12]
 8011000:	4798      	blx	r3
    print(lineNumber);
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	3334      	adds	r3, #52	; 0x34
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	6879      	ldr	r1, [r7, #4]
 801100c:	68f8      	ldr	r0, [r7, #12]
 801100e:	4798      	blx	r3
    print(":");
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	332c      	adds	r3, #44	; 0x2c
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	4907      	ldr	r1, [pc, #28]	; (8011038 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 801101a:	68f8      	ldr	r0, [r7, #12]
 801101c:	4798      	blx	r3
    print(" error:");
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	332c      	adds	r3, #44	; 0x2c
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	4905      	ldr	r1, [pc, #20]	; (801103c <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x78>)
 8011028:	68f8      	ldr	r0, [r7, #12]
 801102a:	4798      	blx	r3
}
 801102c:	bf00      	nop
 801102e:	3714      	adds	r7, #20
 8011030:	46bd      	mov	sp, r7
 8011032:	bd90      	pop	{r4, r7, pc}
 8011034:	08024dc0 	.word	0x08024dc0
 8011038:	08024f1c 	.word	0x08024f1c
 801103c:	08024f20 	.word	0x08024f20

08011040 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printVisualStudioErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 8011040:	b590      	push	{r4, r7, lr}
 8011042:	b085      	sub	sp, #20
 8011044:	af00      	add	r7, sp, #0
 8011046:	60f8      	str	r0, [r7, #12]
 8011048:	60b9      	str	r1, [r7, #8]
 801104a:	607a      	str	r2, [r7, #4]
    print("\n");
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	332c      	adds	r3, #44	; 0x2c
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	4916      	ldr	r1, [pc, #88]	; (80110b0 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x70>)
 8011056:	68f8      	ldr	r0, [r7, #12]
 8011058:	4798      	blx	r3
    print(file.asCharString());
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	332c      	adds	r3, #44	; 0x2c
 8011060:	681c      	ldr	r4, [r3, #0]
 8011062:	68b8      	ldr	r0, [r7, #8]
 8011064:	f7fc f9d8 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 8011068:	4603      	mov	r3, r0
 801106a:	4619      	mov	r1, r3
 801106c:	68f8      	ldr	r0, [r7, #12]
 801106e:	47a0      	blx	r4
    print("(");
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	332c      	adds	r3, #44	; 0x2c
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	490e      	ldr	r1, [pc, #56]	; (80110b4 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x74>)
 801107a:	68f8      	ldr	r0, [r7, #12]
 801107c:	4798      	blx	r3
    print(lineNumber);
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	3334      	adds	r3, #52	; 0x34
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	6879      	ldr	r1, [r7, #4]
 8011088:	68f8      	ldr	r0, [r7, #12]
 801108a:	4798      	blx	r3
    print("):");
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	332c      	adds	r3, #44	; 0x2c
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	4908      	ldr	r1, [pc, #32]	; (80110b8 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x78>)
 8011096:	68f8      	ldr	r0, [r7, #12]
 8011098:	4798      	blx	r3
    print(" error:");
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	332c      	adds	r3, #44	; 0x2c
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	4906      	ldr	r1, [pc, #24]	; (80110bc <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x7c>)
 80110a4:	68f8      	ldr	r0, [r7, #12]
 80110a6:	4798      	blx	r3
}
 80110a8:	bf00      	nop
 80110aa:	3714      	adds	r7, #20
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bd90      	pop	{r4, r7, pc}
 80110b0:	08024dc0 	.word	0x08024dc0
 80110b4:	08024f28 	.word	0x08024f28
 80110b8:	08024f2c 	.word	0x08024f2c
 80110bc:	08024f20 	.word	0x08024f20

080110c0 <_ZN10TestOutput16printVeryVerboseEPKc>:

void TestOutput::printVeryVerbose(const char* str)
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b082      	sub	sp, #8
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
 80110c8:	6039      	str	r1, [r7, #0]
    if(verbose_ == level_veryVerbose)
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	7a1b      	ldrb	r3, [r3, #8]
 80110ce:	2b02      	cmp	r3, #2
 80110d0:	d106      	bne.n	80110e0 <_ZN10TestOutput16printVeryVerboseEPKc+0x20>
        printBuffer(str);
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	3328      	adds	r3, #40	; 0x28
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	6839      	ldr	r1, [r7, #0]
 80110dc:	6878      	ldr	r0, [r7, #4]
 80110de:	4798      	blx	r3
}
 80110e0:	bf00      	nop
 80110e2:	3708      	adds	r7, #8
 80110e4:	46bd      	mov	sp, r7
 80110e6:	bd80      	pop	{r7, pc}

080110e8 <_ZN17ConsoleTestOutput11printBufferEPKc>:


void ConsoleTestOutput::printBuffer(const char* s)
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b082      	sub	sp, #8
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	6078      	str	r0, [r7, #4]
 80110f0:	6039      	str	r1, [r7, #0]
    while (*s) {
 80110f2:	683b      	ldr	r3, [r7, #0]
 80110f4:	781b      	ldrb	r3, [r3, #0]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d009      	beq.n	801110e <_ZN17ConsoleTestOutput11printBufferEPKc+0x26>
        PlatformSpecificPutchar(*s);
 80110fa:	4b0a      	ldr	r3, [pc, #40]	; (8011124 <_ZN17ConsoleTestOutput11printBufferEPKc+0x3c>)
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	683a      	ldr	r2, [r7, #0]
 8011100:	7812      	ldrb	r2, [r2, #0]
 8011102:	4610      	mov	r0, r2
 8011104:	4798      	blx	r3
        s++;
 8011106:	683b      	ldr	r3, [r7, #0]
 8011108:	3301      	adds	r3, #1
 801110a:	603b      	str	r3, [r7, #0]
    while (*s) {
 801110c:	e7f1      	b.n	80110f2 <_ZN17ConsoleTestOutput11printBufferEPKc+0xa>
    }
    flush();
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	334c      	adds	r3, #76	; 0x4c
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	6878      	ldr	r0, [r7, #4]
 8011118:	4798      	blx	r3
}
 801111a:	bf00      	nop
 801111c:	3708      	adds	r7, #8
 801111e:	46bd      	mov	sp, r7
 8011120:	bd80      	pop	{r7, pc}
 8011122:	bf00      	nop
 8011124:	200000c0 	.word	0x200000c0

08011128 <_ZN17ConsoleTestOutput5flushEv>:

void ConsoleTestOutput::flush()
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b082      	sub	sp, #8
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
    PlatformSpecificFlush();
 8011130:	4b03      	ldr	r3, [pc, #12]	; (8011140 <_ZN17ConsoleTestOutput5flushEv+0x18>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	4798      	blx	r3
}
 8011136:	bf00      	nop
 8011138:	3708      	adds	r7, #8
 801113a:	46bd      	mov	sp, r7
 801113c:	bd80      	pop	{r7, pc}
 801113e:	bf00      	nop
 8011140:	200000c4 	.word	0x200000c4

08011144 <_ZN19CompositeTestOutputC1Ev>:

StringBufferTestOutput::~StringBufferTestOutput()
{
}

CompositeTestOutput::CompositeTestOutput()
 8011144:	b580      	push	{r7, lr}
 8011146:	b082      	sub	sp, #8
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
  : outputOne_(NULLPTR), outputTwo_(NULLPTR)
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	4618      	mov	r0, r3
 8011150:	f7ff fb00 	bl	8010754 <_ZN10TestOutputC1Ev>
 8011154:	4a06      	ldr	r2, [pc, #24]	; (8011170 <_ZN19CompositeTestOutputC1Ev+0x2c>)
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	601a      	str	r2, [r3, #0]
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	2200      	movs	r2, #0
 801115e:	611a      	str	r2, [r3, #16]
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	2200      	movs	r2, #0
 8011164:	615a      	str	r2, [r3, #20]
{
}
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	4618      	mov	r0, r3
 801116a:	3708      	adds	r7, #8
 801116c:	46bd      	mov	sp, r7
 801116e:	bd80      	pop	{r7, pc}
 8011170:	0802870c 	.word	0x0802870c

08011174 <_ZN19CompositeTestOutputD1Ev>:

CompositeTestOutput::~CompositeTestOutput()
 8011174:	b580      	push	{r7, lr}
 8011176:	b082      	sub	sp, #8
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
 801117c:	4a0e      	ldr	r2, [pc, #56]	; (80111b8 <_ZN19CompositeTestOutputD1Ev+0x44>)
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	601a      	str	r2, [r3, #0]
{
  delete outputOne_;
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	691b      	ldr	r3, [r3, #16]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d004      	beq.n	8011194 <_ZN19CompositeTestOutputD1Ev+0x20>
 801118a:	681a      	ldr	r2, [r3, #0]
 801118c:	3204      	adds	r2, #4
 801118e:	6812      	ldr	r2, [r2, #0]
 8011190:	4618      	mov	r0, r3
 8011192:	4790      	blx	r2
  delete outputTwo_;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	695b      	ldr	r3, [r3, #20]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d004      	beq.n	80111a6 <_ZN19CompositeTestOutputD1Ev+0x32>
 801119c:	681a      	ldr	r2, [r3, #0]
 801119e:	3204      	adds	r2, #4
 80111a0:	6812      	ldr	r2, [r2, #0]
 80111a2:	4618      	mov	r0, r3
 80111a4:	4790      	blx	r2
CompositeTestOutput::~CompositeTestOutput()
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	4618      	mov	r0, r3
 80111aa:	f7ff faf1 	bl	8010790 <_ZN10TestOutputD1Ev>
}
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	4618      	mov	r0, r3
 80111b2:	3708      	adds	r7, #8
 80111b4:	46bd      	mov	sp, r7
 80111b6:	bd80      	pop	{r7, pc}
 80111b8:	0802870c 	.word	0x0802870c

080111bc <_ZN19CompositeTestOutputD0Ev>:
CompositeTestOutput::~CompositeTestOutput()
 80111bc:	b580      	push	{r7, lr}
 80111be:	b082      	sub	sp, #8
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
}
 80111c4:	6878      	ldr	r0, [r7, #4]
 80111c6:	f7ff ffd5 	bl	8011174 <_ZN19CompositeTestOutputD1Ev>
 80111ca:	2118      	movs	r1, #24
 80111cc:	6878      	ldr	r0, [r7, #4]
 80111ce:	f7f9 f9e9 	bl	800a5a4 <_ZdlPvj>
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	4618      	mov	r0, r3
 80111d6:	3708      	adds	r7, #8
 80111d8:	46bd      	mov	sp, r7
 80111da:	bd80      	pop	{r7, pc}

080111dc <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput>:

void CompositeTestOutput::setOutputOne(TestOutput* output)
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	b082      	sub	sp, #8
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
 80111e4:	6039      	str	r1, [r7, #0]
  delete outputOne_;
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	691b      	ldr	r3, [r3, #16]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d004      	beq.n	80111f8 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput+0x1c>
 80111ee:	681a      	ldr	r2, [r3, #0]
 80111f0:	3204      	adds	r2, #4
 80111f2:	6812      	ldr	r2, [r2, #0]
 80111f4:	4618      	mov	r0, r3
 80111f6:	4790      	blx	r2
  outputOne_ = output;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	683a      	ldr	r2, [r7, #0]
 80111fc:	611a      	str	r2, [r3, #16]
}
 80111fe:	bf00      	nop
 8011200:	3708      	adds	r7, #8
 8011202:	46bd      	mov	sp, r7
 8011204:	bd80      	pop	{r7, pc}

08011206 <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput>:

void CompositeTestOutput::setOutputTwo(TestOutput* output)
{
 8011206:	b580      	push	{r7, lr}
 8011208:	b082      	sub	sp, #8
 801120a:	af00      	add	r7, sp, #0
 801120c:	6078      	str	r0, [r7, #4]
 801120e:	6039      	str	r1, [r7, #0]
  delete outputTwo_;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	695b      	ldr	r3, [r3, #20]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d004      	beq.n	8011222 <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput+0x1c>
 8011218:	681a      	ldr	r2, [r3, #0]
 801121a:	3204      	adds	r2, #4
 801121c:	6812      	ldr	r2, [r2, #0]
 801121e:	4618      	mov	r0, r3
 8011220:	4790      	blx	r2
  outputTwo_ = output;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	683a      	ldr	r2, [r7, #0]
 8011226:	615a      	str	r2, [r3, #20]
}
 8011228:	bf00      	nop
 801122a:	3708      	adds	r7, #8
 801122c:	46bd      	mov	sp, r7
 801122e:	bd80      	pop	{r7, pc}

08011230 <_ZN19CompositeTestOutput17printTestsStartedEv>:

void CompositeTestOutput::printTestsStarted()
{
 8011230:	b580      	push	{r7, lr}
 8011232:	b082      	sub	sp, #8
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->printTestsStarted();
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	691b      	ldr	r3, [r3, #16]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d008      	beq.n	8011252 <_ZN19CompositeTestOutput17printTestsStartedEv+0x22>
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	691a      	ldr	r2, [r3, #16]
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	691b      	ldr	r3, [r3, #16]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	3308      	adds	r3, #8
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	4610      	mov	r0, r2
 8011250:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsStarted();
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	695b      	ldr	r3, [r3, #20]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d008      	beq.n	801126c <_ZN19CompositeTestOutput17printTestsStartedEv+0x3c>
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	695a      	ldr	r2, [r3, #20]
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	695b      	ldr	r3, [r3, #20]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	3308      	adds	r3, #8
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	4610      	mov	r0, r2
 801126a:	4798      	blx	r3
}
 801126c:	bf00      	nop
 801126e:	3708      	adds	r7, #8
 8011270:	46bd      	mov	sp, r7
 8011272:	bd80      	pop	{r7, pc}

08011274 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult>:

void CompositeTestOutput::printTestsEnded(const TestResult& result)
{
 8011274:	b580      	push	{r7, lr}
 8011276:	b082      	sub	sp, #8
 8011278:	af00      	add	r7, sp, #0
 801127a:	6078      	str	r0, [r7, #4]
 801127c:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printTestsEnded(result);
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	691b      	ldr	r3, [r3, #16]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d009      	beq.n	801129a <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x26>
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	691a      	ldr	r2, [r3, #16]
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	691b      	ldr	r3, [r3, #16]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	330c      	adds	r3, #12
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	6839      	ldr	r1, [r7, #0]
 8011296:	4610      	mov	r0, r2
 8011298:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsEnded(result);
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	695b      	ldr	r3, [r3, #20]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d009      	beq.n	80112b6 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x42>
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	695a      	ldr	r2, [r3, #20]
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	695b      	ldr	r3, [r3, #20]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	330c      	adds	r3, #12
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	6839      	ldr	r1, [r7, #0]
 80112b2:	4610      	mov	r0, r2
 80112b4:	4798      	blx	r3
}
 80112b6:	bf00      	nop
 80112b8:	3708      	adds	r7, #8
 80112ba:	46bd      	mov	sp, r7
 80112bc:	bd80      	pop	{r7, pc}

080112be <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 80112be:	b580      	push	{r7, lr}
 80112c0:	b082      	sub	sp, #8
 80112c2:	af00      	add	r7, sp, #0
 80112c4:	6078      	str	r0, [r7, #4]
 80112c6:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestStarted(test);
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	691b      	ldr	r3, [r3, #16]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d009      	beq.n	80112e4 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x26>
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	691a      	ldr	r2, [r3, #16]
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	691b      	ldr	r3, [r3, #16]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	3310      	adds	r3, #16
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	6839      	ldr	r1, [r7, #0]
 80112e0:	4610      	mov	r0, r2
 80112e2:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestStarted(test);
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	695b      	ldr	r3, [r3, #20]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d009      	beq.n	8011300 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x42>
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	695a      	ldr	r2, [r3, #20]
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	695b      	ldr	r3, [r3, #20]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	3310      	adds	r3, #16
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	6839      	ldr	r1, [r7, #0]
 80112fc:	4610      	mov	r0, r2
 80112fe:	4798      	blx	r3
}
 8011300:	bf00      	nop
 8011302:	3708      	adds	r7, #8
 8011304:	46bd      	mov	sp, r7
 8011306:	bd80      	pop	{r7, pc}

08011308 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult>:

void CompositeTestOutput::printCurrentTestEnded(const TestResult& res)
{
 8011308:	b580      	push	{r7, lr}
 801130a:	b082      	sub	sp, #8
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
 8011310:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestEnded(res);
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	691b      	ldr	r3, [r3, #16]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d009      	beq.n	801132e <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x26>
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	691a      	ldr	r2, [r3, #16]
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	691b      	ldr	r3, [r3, #16]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	3314      	adds	r3, #20
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	6839      	ldr	r1, [r7, #0]
 801132a:	4610      	mov	r0, r2
 801132c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestEnded(res);
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	695b      	ldr	r3, [r3, #20]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d009      	beq.n	801134a <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x42>
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	695a      	ldr	r2, [r3, #20]
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	695b      	ldr	r3, [r3, #20]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	3314      	adds	r3, #20
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	6839      	ldr	r1, [r7, #0]
 8011346:	4610      	mov	r0, r2
 8011348:	4798      	blx	r3
}
 801134a:	bf00      	nop
 801134c:	3708      	adds	r7, #8
 801134e:	46bd      	mov	sp, r7
 8011350:	bd80      	pop	{r7, pc}

08011352 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 8011352:	b580      	push	{r7, lr}
 8011354:	b082      	sub	sp, #8
 8011356:	af00      	add	r7, sp, #0
 8011358:	6078      	str	r0, [r7, #4]
 801135a:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupStarted(test);
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	691b      	ldr	r3, [r3, #16]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d009      	beq.n	8011378 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x26>
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	691a      	ldr	r2, [r3, #16]
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	691b      	ldr	r3, [r3, #16]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	3318      	adds	r3, #24
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	6839      	ldr	r1, [r7, #0]
 8011374:	4610      	mov	r0, r2
 8011376:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupStarted(test);
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	695b      	ldr	r3, [r3, #20]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d009      	beq.n	8011394 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x42>
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	695a      	ldr	r2, [r3, #20]
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	695b      	ldr	r3, [r3, #20]
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	3318      	adds	r3, #24
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	6839      	ldr	r1, [r7, #0]
 8011390:	4610      	mov	r0, r2
 8011392:	4798      	blx	r3
}
 8011394:	bf00      	nop
 8011396:	3708      	adds	r7, #8
 8011398:	46bd      	mov	sp, r7
 801139a:	bd80      	pop	{r7, pc}

0801139c <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult>:

void CompositeTestOutput::printCurrentGroupEnded(const TestResult& res)
{
 801139c:	b580      	push	{r7, lr}
 801139e:	b082      	sub	sp, #8
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	6078      	str	r0, [r7, #4]
 80113a4:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupEnded(res);
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	691b      	ldr	r3, [r3, #16]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d009      	beq.n	80113c2 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x26>
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	691a      	ldr	r2, [r3, #16]
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	691b      	ldr	r3, [r3, #16]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	331c      	adds	r3, #28
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	6839      	ldr	r1, [r7, #0]
 80113be:	4610      	mov	r0, r2
 80113c0:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupEnded(res);
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	695b      	ldr	r3, [r3, #20]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d009      	beq.n	80113de <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x42>
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	695a      	ldr	r2, [r3, #20]
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	695b      	ldr	r3, [r3, #20]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	331c      	adds	r3, #28
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	6839      	ldr	r1, [r7, #0]
 80113da:	4610      	mov	r0, r2
 80113dc:	4798      	blx	r3
}
 80113de:	bf00      	nop
 80113e0:	3708      	adds	r7, #8
 80113e2:	46bd      	mov	sp, r7
 80113e4:	bd80      	pop	{r7, pc}

080113e6 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE>:

void CompositeTestOutput::verbose(VerbosityLevel level)
{
 80113e6:	b580      	push	{r7, lr}
 80113e8:	b082      	sub	sp, #8
 80113ea:	af00      	add	r7, sp, #0
 80113ec:	6078      	str	r0, [r7, #4]
 80113ee:	460b      	mov	r3, r1
 80113f0:	70fb      	strb	r3, [r7, #3]
  if (outputOne_) outputOne_->verbose(level);
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	691b      	ldr	r3, [r3, #16]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d009      	beq.n	801140e <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x28>
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	691a      	ldr	r2, [r3, #16]
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	691b      	ldr	r3, [r3, #16]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	3320      	adds	r3, #32
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	78f9      	ldrb	r1, [r7, #3]
 801140a:	4610      	mov	r0, r2
 801140c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->verbose(level);
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	695b      	ldr	r3, [r3, #20]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d009      	beq.n	801142a <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x44>
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	695a      	ldr	r2, [r3, #20]
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	695b      	ldr	r3, [r3, #20]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	3320      	adds	r3, #32
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	78f9      	ldrb	r1, [r7, #3]
 8011426:	4610      	mov	r0, r2
 8011428:	4798      	blx	r3
}
 801142a:	bf00      	nop
 801142c:	3708      	adds	r7, #8
 801142e:	46bd      	mov	sp, r7
 8011430:	bd80      	pop	{r7, pc}

08011432 <_ZN19CompositeTestOutput5colorEv>:

void CompositeTestOutput::color()
{
 8011432:	b580      	push	{r7, lr}
 8011434:	b082      	sub	sp, #8
 8011436:	af00      	add	r7, sp, #0
 8011438:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->color();
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	691b      	ldr	r3, [r3, #16]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d008      	beq.n	8011454 <_ZN19CompositeTestOutput5colorEv+0x22>
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	691a      	ldr	r2, [r3, #16]
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	691b      	ldr	r3, [r3, #16]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	3324      	adds	r3, #36	; 0x24
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	4610      	mov	r0, r2
 8011452:	4798      	blx	r3
  if (outputTwo_) outputTwo_->color();
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	695b      	ldr	r3, [r3, #20]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d008      	beq.n	801146e <_ZN19CompositeTestOutput5colorEv+0x3c>
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	695a      	ldr	r2, [r3, #20]
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	695b      	ldr	r3, [r3, #20]
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	3324      	adds	r3, #36	; 0x24
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	4610      	mov	r0, r2
 801146c:	4798      	blx	r3
}
 801146e:	bf00      	nop
 8011470:	3708      	adds	r7, #8
 8011472:	46bd      	mov	sp, r7
 8011474:	bd80      	pop	{r7, pc}

08011476 <_ZN19CompositeTestOutput11printBufferEPKc>:

void CompositeTestOutput::printBuffer(const char* buffer)
{
 8011476:	b580      	push	{r7, lr}
 8011478:	b082      	sub	sp, #8
 801147a:	af00      	add	r7, sp, #0
 801147c:	6078      	str	r0, [r7, #4]
 801147e:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printBuffer(buffer);
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	691b      	ldr	r3, [r3, #16]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d009      	beq.n	801149c <_ZN19CompositeTestOutput11printBufferEPKc+0x26>
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	691a      	ldr	r2, [r3, #16]
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	691b      	ldr	r3, [r3, #16]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	3328      	adds	r3, #40	; 0x28
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	6839      	ldr	r1, [r7, #0]
 8011498:	4610      	mov	r0, r2
 801149a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printBuffer(buffer);
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	695b      	ldr	r3, [r3, #20]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d009      	beq.n	80114b8 <_ZN19CompositeTestOutput11printBufferEPKc+0x42>
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	695a      	ldr	r2, [r3, #20]
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	695b      	ldr	r3, [r3, #20]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	3328      	adds	r3, #40	; 0x28
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	6839      	ldr	r1, [r7, #0]
 80114b4:	4610      	mov	r0, r2
 80114b6:	4798      	blx	r3
}
 80114b8:	bf00      	nop
 80114ba:	3708      	adds	r7, #8
 80114bc:	46bd      	mov	sp, r7
 80114be:	bd80      	pop	{r7, pc}

080114c0 <_ZN19CompositeTestOutput5printEPKc>:

void CompositeTestOutput::print(const char* buffer)
{
 80114c0:	b580      	push	{r7, lr}
 80114c2:	b082      	sub	sp, #8
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	6078      	str	r0, [r7, #4]
 80114c8:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(buffer);
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	691b      	ldr	r3, [r3, #16]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d009      	beq.n	80114e6 <_ZN19CompositeTestOutput5printEPKc+0x26>
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	691a      	ldr	r2, [r3, #16]
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	691b      	ldr	r3, [r3, #16]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	332c      	adds	r3, #44	; 0x2c
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	6839      	ldr	r1, [r7, #0]
 80114e2:	4610      	mov	r0, r2
 80114e4:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(buffer);
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	695b      	ldr	r3, [r3, #20]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d009      	beq.n	8011502 <_ZN19CompositeTestOutput5printEPKc+0x42>
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	695a      	ldr	r2, [r3, #20]
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	695b      	ldr	r3, [r3, #20]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	332c      	adds	r3, #44	; 0x2c
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	6839      	ldr	r1, [r7, #0]
 80114fe:	4610      	mov	r0, r2
 8011500:	4798      	blx	r3
}
 8011502:	bf00      	nop
 8011504:	3708      	adds	r7, #8
 8011506:	46bd      	mov	sp, r7
 8011508:	bd80      	pop	{r7, pc}

0801150a <_ZN19CompositeTestOutput5printEl>:

void CompositeTestOutput::print(long number)
{
 801150a:	b580      	push	{r7, lr}
 801150c:	b082      	sub	sp, #8
 801150e:	af00      	add	r7, sp, #0
 8011510:	6078      	str	r0, [r7, #4]
 8011512:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	691b      	ldr	r3, [r3, #16]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d009      	beq.n	8011530 <_ZN19CompositeTestOutput5printEl+0x26>
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	691a      	ldr	r2, [r3, #16]
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	691b      	ldr	r3, [r3, #16]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	3330      	adds	r3, #48	; 0x30
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	6839      	ldr	r1, [r7, #0]
 801152c:	4610      	mov	r0, r2
 801152e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	695b      	ldr	r3, [r3, #20]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d009      	beq.n	801154c <_ZN19CompositeTestOutput5printEl+0x42>
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	695a      	ldr	r2, [r3, #20]
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	695b      	ldr	r3, [r3, #20]
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	3330      	adds	r3, #48	; 0x30
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	6839      	ldr	r1, [r7, #0]
 8011548:	4610      	mov	r0, r2
 801154a:	4798      	blx	r3
}
 801154c:	bf00      	nop
 801154e:	3708      	adds	r7, #8
 8011550:	46bd      	mov	sp, r7
 8011552:	bd80      	pop	{r7, pc}

08011554 <_ZN19CompositeTestOutput5printEj>:

void CompositeTestOutput::print(size_t number)
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b082      	sub	sp, #8
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
 801155c:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	691b      	ldr	r3, [r3, #16]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d009      	beq.n	801157a <_ZN19CompositeTestOutput5printEj+0x26>
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	691a      	ldr	r2, [r3, #16]
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	691b      	ldr	r3, [r3, #16]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	3334      	adds	r3, #52	; 0x34
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	6839      	ldr	r1, [r7, #0]
 8011576:	4610      	mov	r0, r2
 8011578:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	695b      	ldr	r3, [r3, #20]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d009      	beq.n	8011596 <_ZN19CompositeTestOutput5printEj+0x42>
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	695a      	ldr	r2, [r3, #20]
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	695b      	ldr	r3, [r3, #20]
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	3334      	adds	r3, #52	; 0x34
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	6839      	ldr	r1, [r7, #0]
 8011592:	4610      	mov	r0, r2
 8011594:	4798      	blx	r3
}
 8011596:	bf00      	nop
 8011598:	3708      	adds	r7, #8
 801159a:	46bd      	mov	sp, r7
 801159c:	bd80      	pop	{r7, pc}

0801159e <_ZN19CompositeTestOutput11printDoubleEd>:

void CompositeTestOutput::printDouble(double number)
{
 801159e:	b580      	push	{r7, lr}
 80115a0:	b084      	sub	sp, #16
 80115a2:	af00      	add	r7, sp, #0
 80115a4:	60f8      	str	r0, [r7, #12]
 80115a6:	ed87 0b00 	vstr	d0, [r7]
  if (outputOne_) outputOne_->printDouble(number);
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	691b      	ldr	r3, [r3, #16]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d00a      	beq.n	80115c8 <_ZN19CompositeTestOutput11printDoubleEd+0x2a>
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	691a      	ldr	r2, [r3, #16]
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	691b      	ldr	r3, [r3, #16]
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	3338      	adds	r3, #56	; 0x38
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	ed97 0b00 	vldr	d0, [r7]
 80115c4:	4610      	mov	r0, r2
 80115c6:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printDouble(number);
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	695b      	ldr	r3, [r3, #20]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d00a      	beq.n	80115e6 <_ZN19CompositeTestOutput11printDoubleEd+0x48>
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	695a      	ldr	r2, [r3, #20]
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	695b      	ldr	r3, [r3, #20]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	3338      	adds	r3, #56	; 0x38
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	ed97 0b00 	vldr	d0, [r7]
 80115e2:	4610      	mov	r0, r2
 80115e4:	4798      	blx	r3
}
 80115e6:	bf00      	nop
 80115e8:	3710      	adds	r7, #16
 80115ea:	46bd      	mov	sp, r7
 80115ec:	bd80      	pop	{r7, pc}

080115ee <_ZN19CompositeTestOutput12printFailureERK11TestFailure>:

void CompositeTestOutput::printFailure(const TestFailure& failure)
{
 80115ee:	b580      	push	{r7, lr}
 80115f0:	b082      	sub	sp, #8
 80115f2:	af00      	add	r7, sp, #0
 80115f4:	6078      	str	r0, [r7, #4]
 80115f6:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printFailure(failure);
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	691b      	ldr	r3, [r3, #16]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d009      	beq.n	8011614 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x26>
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	691a      	ldr	r2, [r3, #16]
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	691b      	ldr	r3, [r3, #16]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	333c      	adds	r3, #60	; 0x3c
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	6839      	ldr	r1, [r7, #0]
 8011610:	4610      	mov	r0, r2
 8011612:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printFailure(failure);
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	695b      	ldr	r3, [r3, #20]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d009      	beq.n	8011630 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x42>
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	695a      	ldr	r2, [r3, #20]
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	695b      	ldr	r3, [r3, #20]
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	333c      	adds	r3, #60	; 0x3c
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	6839      	ldr	r1, [r7, #0]
 801162c:	4610      	mov	r0, r2
 801162e:	4798      	blx	r3
}
 8011630:	bf00      	nop
 8011632:	3708      	adds	r7, #8
 8011634:	46bd      	mov	sp, r7
 8011636:	bd80      	pop	{r7, pc}

08011638 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc>:

void CompositeTestOutput::setProgressIndicator(const char* indicator)
{
 8011638:	b580      	push	{r7, lr}
 801163a:	b082      	sub	sp, #8
 801163c:	af00      	add	r7, sp, #0
 801163e:	6078      	str	r0, [r7, #4]
 8011640:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->setProgressIndicator(indicator);
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	691b      	ldr	r3, [r3, #16]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d009      	beq.n	801165e <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x26>
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	691a      	ldr	r2, [r3, #16]
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	691b      	ldr	r3, [r3, #16]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	3344      	adds	r3, #68	; 0x44
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	6839      	ldr	r1, [r7, #0]
 801165a:	4610      	mov	r0, r2
 801165c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->setProgressIndicator(indicator);
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	695b      	ldr	r3, [r3, #20]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d009      	beq.n	801167a <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x42>
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	695a      	ldr	r2, [r3, #20]
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	695b      	ldr	r3, [r3, #20]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	3344      	adds	r3, #68	; 0x44
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	6839      	ldr	r1, [r7, #0]
 8011676:	4610      	mov	r0, r2
 8011678:	4798      	blx	r3
}
 801167a:	bf00      	nop
 801167c:	3708      	adds	r7, #8
 801167e:	46bd      	mov	sp, r7
 8011680:	bd80      	pop	{r7, pc}

08011682 <_ZN19CompositeTestOutput5flushEv>:

void CompositeTestOutput::flush()
{
 8011682:	b580      	push	{r7, lr}
 8011684:	b082      	sub	sp, #8
 8011686:	af00      	add	r7, sp, #0
 8011688:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->flush();
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	691b      	ldr	r3, [r3, #16]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d008      	beq.n	80116a4 <_ZN19CompositeTestOutput5flushEv+0x22>
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	691a      	ldr	r2, [r3, #16]
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	691b      	ldr	r3, [r3, #16]
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	334c      	adds	r3, #76	; 0x4c
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	4610      	mov	r0, r2
 80116a2:	4798      	blx	r3
  if (outputTwo_) outputTwo_->flush();
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	695b      	ldr	r3, [r3, #20]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d008      	beq.n	80116be <_ZN19CompositeTestOutput5flushEv+0x3c>
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	695a      	ldr	r2, [r3, #20]
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	695b      	ldr	r3, [r3, #20]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	334c      	adds	r3, #76	; 0x4c
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	4610      	mov	r0, r2
 80116bc:	4798      	blx	r3
}
 80116be:	bf00      	nop
 80116c0:	3708      	adds	r7, #8
 80116c2:	46bd      	mov	sp, r7
 80116c4:	bd80      	pop	{r7, pc}

080116c6 <_ZN10TestPlugin13preTestActionER10UtestShellR10TestResult>:
    virtual void preTestAction(UtestShell&, TestResult&)
 80116c6:	b480      	push	{r7}
 80116c8:	b085      	sub	sp, #20
 80116ca:	af00      	add	r7, sp, #0
 80116cc:	60f8      	str	r0, [r7, #12]
 80116ce:	60b9      	str	r1, [r7, #8]
 80116d0:	607a      	str	r2, [r7, #4]
    }
 80116d2:	bf00      	nop
 80116d4:	3714      	adds	r7, #20
 80116d6:	46bd      	mov	sp, r7
 80116d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116dc:	4770      	bx	lr

080116de <_ZN10TestPlugin14postTestActionER10UtestShellR10TestResult>:
    virtual void postTestAction(UtestShell&, TestResult&)
 80116de:	b480      	push	{r7}
 80116e0:	b085      	sub	sp, #20
 80116e2:	af00      	add	r7, sp, #0
 80116e4:	60f8      	str	r0, [r7, #12]
 80116e6:	60b9      	str	r1, [r7, #8]
 80116e8:	607a      	str	r2, [r7, #4]
    }
 80116ea:	bf00      	nop
 80116ec:	3714      	adds	r7, #20
 80116ee:	46bd      	mov	sp, r7
 80116f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f4:	4770      	bx	lr
	...

080116f8 <_ZN10TestPluginC1ERK12SimpleString>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestPlugin.h"

TestPlugin::TestPlugin(const SimpleString& name) :
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b082      	sub	sp, #8
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
 8011700:	6039      	str	r1, [r7, #0]
    next_(NullTestPlugin::instance()), name_(name), enabled_(true)
 8011702:	4a0b      	ldr	r2, [pc, #44]	; (8011730 <_ZN10TestPluginC1ERK12SimpleString+0x38>)
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	601a      	str	r2, [r3, #0]
 8011708:	f000 f9ce 	bl	8011aa8 <_ZN14NullTestPlugin8instanceEv>
 801170c:	4602      	mov	r2, r0
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	605a      	str	r2, [r3, #4]
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	3308      	adds	r3, #8
 8011716:	6839      	ldr	r1, [r7, #0]
 8011718:	4618      	mov	r0, r3
 801171a:	f7fb fb46 	bl	800cdaa <_ZN12SimpleStringC1ERKS_>
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	2201      	movs	r2, #1
 8011722:	741a      	strb	r2, [r3, #16]
{
}
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	4618      	mov	r0, r3
 8011728:	3708      	adds	r7, #8
 801172a:	46bd      	mov	sp, r7
 801172c:	bd80      	pop	{r7, pc}
 801172e:	bf00      	nop
 8011730:	080288c8 	.word	0x080288c8

08011734 <_ZN10TestPluginC1EPS_>:

TestPlugin::TestPlugin(TestPlugin* next) :
 8011734:	b580      	push	{r7, lr}
 8011736:	b082      	sub	sp, #8
 8011738:	af00      	add	r7, sp, #0
 801173a:	6078      	str	r0, [r7, #4]
 801173c:	6039      	str	r1, [r7, #0]
    next_(next), name_("null"), enabled_(true)
 801173e:	4a0a      	ldr	r2, [pc, #40]	; (8011768 <_ZN10TestPluginC1EPS_+0x34>)
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	601a      	str	r2, [r3, #0]
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	683a      	ldr	r2, [r7, #0]
 8011748:	605a      	str	r2, [r3, #4]
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	3308      	adds	r3, #8
 801174e:	4907      	ldr	r1, [pc, #28]	; (801176c <_ZN10TestPluginC1EPS_+0x38>)
 8011750:	4618      	mov	r0, r3
 8011752:	f7fb fad6 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	2201      	movs	r2, #1
 801175a:	741a      	strb	r2, [r3, #16]
{
}
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	4618      	mov	r0, r3
 8011760:	3708      	adds	r7, #8
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}
 8011766:	bf00      	nop
 8011768:	080288c8 	.word	0x080288c8
 801176c:	08024f30 	.word	0x08024f30

08011770 <_ZN10TestPluginD1Ev>:

TestPlugin::~TestPlugin()
 8011770:	b580      	push	{r7, lr}
 8011772:	b082      	sub	sp, #8
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
 8011778:	4a06      	ldr	r2, [pc, #24]	; (8011794 <_ZN10TestPluginD1Ev+0x24>)
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	601a      	str	r2, [r3, #0]
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	3308      	adds	r3, #8
 8011782:	4618      	mov	r0, r3
 8011784:	f7fb fe75 	bl	800d472 <_ZN12SimpleStringD1Ev>
{
}
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	4618      	mov	r0, r3
 801178c:	3708      	adds	r7, #8
 801178e:	46bd      	mov	sp, r7
 8011790:	bd80      	pop	{r7, pc}
 8011792:	bf00      	nop
 8011794:	080288c8 	.word	0x080288c8

08011798 <_ZN10TestPluginD0Ev>:
TestPlugin::~TestPlugin()
 8011798:	b580      	push	{r7, lr}
 801179a:	b082      	sub	sp, #8
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]
}
 80117a0:	6878      	ldr	r0, [r7, #4]
 80117a2:	f7ff ffe5 	bl	8011770 <_ZN10TestPluginD1Ev>
 80117a6:	2114      	movs	r1, #20
 80117a8:	6878      	ldr	r0, [r7, #4]
 80117aa:	f7f8 fefb 	bl	800a5a4 <_ZdlPvj>
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	4618      	mov	r0, r3
 80117b2:	3708      	adds	r7, #8
 80117b4:	46bd      	mov	sp, r7
 80117b6:	bd80      	pop	{r7, pc}

080117b8 <_ZN10TestPlugin9addPluginEPS_>:

TestPlugin* TestPlugin::addPlugin(TestPlugin* plugin)
{
 80117b8:	b480      	push	{r7}
 80117ba:	b083      	sub	sp, #12
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
 80117c0:	6039      	str	r1, [r7, #0]
    next_ = plugin;
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	683a      	ldr	r2, [r7, #0]
 80117c6:	605a      	str	r2, [r3, #4]
    return this;
 80117c8:	687b      	ldr	r3, [r7, #4]
}
 80117ca:	4618      	mov	r0, r3
 80117cc:	370c      	adds	r7, #12
 80117ce:	46bd      	mov	sp, r7
 80117d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d4:	4770      	bx	lr

080117d6 <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPreTestAction(UtestShell& test, TestResult& result)
{
 80117d6:	b580      	push	{r7, lr}
 80117d8:	b084      	sub	sp, #16
 80117da:	af00      	add	r7, sp, #0
 80117dc:	60f8      	str	r0, [r7, #12]
 80117de:	60b9      	str	r1, [r7, #8]
 80117e0:	607a      	str	r2, [r7, #4]
    if (enabled_) preTestAction(test, result);
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	7c1b      	ldrb	r3, [r3, #16]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d007      	beq.n	80117fa <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult+0x24>
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	3308      	adds	r3, #8
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	687a      	ldr	r2, [r7, #4]
 80117f4:	68b9      	ldr	r1, [r7, #8]
 80117f6:	68f8      	ldr	r0, [r7, #12]
 80117f8:	4798      	blx	r3
    next_->runAllPreTestAction(test, result);
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	6858      	ldr	r0, [r3, #4]
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	685b      	ldr	r3, [r3, #4]
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	3314      	adds	r3, #20
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	687a      	ldr	r2, [r7, #4]
 801180a:	68b9      	ldr	r1, [r7, #8]
 801180c:	4798      	blx	r3
}
 801180e:	bf00      	nop
 8011810:	3710      	adds	r7, #16
 8011812:	46bd      	mov	sp, r7
 8011814:	bd80      	pop	{r7, pc}

08011816 <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPostTestAction(UtestShell& test, TestResult& result)
{
 8011816:	b580      	push	{r7, lr}
 8011818:	b084      	sub	sp, #16
 801181a:	af00      	add	r7, sp, #0
 801181c:	60f8      	str	r0, [r7, #12]
 801181e:	60b9      	str	r1, [r7, #8]
 8011820:	607a      	str	r2, [r7, #4]
    next_ ->runAllPostTestAction(test, result);
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	6858      	ldr	r0, [r3, #4]
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	685b      	ldr	r3, [r3, #4]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	3318      	adds	r3, #24
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	687a      	ldr	r2, [r7, #4]
 8011832:	68b9      	ldr	r1, [r7, #8]
 8011834:	4798      	blx	r3
    if (enabled_) postTestAction(test, result);
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	7c1b      	ldrb	r3, [r3, #16]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d007      	beq.n	801184e <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult+0x38>
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	330c      	adds	r3, #12
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	687a      	ldr	r2, [r7, #4]
 8011848:	68b9      	ldr	r1, [r7, #8]
 801184a:	68f8      	ldr	r0, [r7, #12]
 801184c:	4798      	blx	r3
}
 801184e:	bf00      	nop
 8011850:	3710      	adds	r7, #16
 8011852:	46bd      	mov	sp, r7
 8011854:	bd80      	pop	{r7, pc}

08011856 <_ZN10TestPlugin17parseAllArgumentsEiPPci>:

bool TestPlugin::parseAllArguments(int ac, char** av, int index)
{
 8011856:	b590      	push	{r4, r7, lr}
 8011858:	b085      	sub	sp, #20
 801185a:	af00      	add	r7, sp, #0
 801185c:	60f8      	str	r0, [r7, #12]
 801185e:	60b9      	str	r1, [r7, #8]
 8011860:	607a      	str	r2, [r7, #4]
 8011862:	603b      	str	r3, [r7, #0]
    return parseAllArguments(ac, const_cast<const char *const *> (av), index);
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	331c      	adds	r3, #28
 801186a:	681c      	ldr	r4, [r3, #0]
 801186c:	683b      	ldr	r3, [r7, #0]
 801186e:	687a      	ldr	r2, [r7, #4]
 8011870:	68b9      	ldr	r1, [r7, #8]
 8011872:	68f8      	ldr	r0, [r7, #12]
 8011874:	47a0      	blx	r4
 8011876:	4603      	mov	r3, r0
}
 8011878:	4618      	mov	r0, r3
 801187a:	3714      	adds	r7, #20
 801187c:	46bd      	mov	sp, r7
 801187e:	bd90      	pop	{r4, r7, pc}

08011880 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci>:

bool TestPlugin::parseAllArguments(int ac, const char *const *av, int index)
{
 8011880:	b590      	push	{r4, r7, lr}
 8011882:	b085      	sub	sp, #20
 8011884:	af00      	add	r7, sp, #0
 8011886:	60f8      	str	r0, [r7, #12]
 8011888:	60b9      	str	r1, [r7, #8]
 801188a:	607a      	str	r2, [r7, #4]
 801188c:	603b      	str	r3, [r7, #0]
    if (parseArguments(ac, av, index)) return true;
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	3310      	adds	r3, #16
 8011894:	681c      	ldr	r4, [r3, #0]
 8011896:	683b      	ldr	r3, [r7, #0]
 8011898:	687a      	ldr	r2, [r7, #4]
 801189a:	68b9      	ldr	r1, [r7, #8]
 801189c:	68f8      	ldr	r0, [r7, #12]
 801189e:	47a0      	blx	r4
 80118a0:	4603      	mov	r3, r0
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d001      	beq.n	80118aa <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x2a>
 80118a6:	2301      	movs	r3, #1
 80118a8:	e011      	b.n	80118ce <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    if (next_) return next_->parseAllArguments(ac, av, index);
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	685b      	ldr	r3, [r3, #4]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d00c      	beq.n	80118cc <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4c>
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	6858      	ldr	r0, [r3, #4]
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	685b      	ldr	r3, [r3, #4]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	331c      	adds	r3, #28
 80118be:	681c      	ldr	r4, [r3, #0]
 80118c0:	683b      	ldr	r3, [r7, #0]
 80118c2:	687a      	ldr	r2, [r7, #4]
 80118c4:	68b9      	ldr	r1, [r7, #8]
 80118c6:	47a0      	blx	r4
 80118c8:	4603      	mov	r3, r0
 80118ca:	e000      	b.n	80118ce <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    return false;
 80118cc:	2300      	movs	r3, #0
}
 80118ce:	4618      	mov	r0, r3
 80118d0:	3714      	adds	r7, #20
 80118d2:	46bd      	mov	sp, r7
 80118d4:	bd90      	pop	{r4, r7, pc}

080118d6 <_ZN10TestPlugin7getNameEv>:

const SimpleString& TestPlugin::getName()
{
 80118d6:	b480      	push	{r7}
 80118d8:	b083      	sub	sp, #12
 80118da:	af00      	add	r7, sp, #0
 80118dc:	6078      	str	r0, [r7, #4]
    return name_;
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	3308      	adds	r3, #8
}
 80118e2:	4618      	mov	r0, r3
 80118e4:	370c      	adds	r7, #12
 80118e6:	46bd      	mov	sp, r7
 80118e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ec:	4770      	bx	lr

080118ee <_ZN10TestPlugin15getPluginByNameERK12SimpleString>:

TestPlugin* TestPlugin::getPluginByName(const SimpleString& name)
{
 80118ee:	b580      	push	{r7, lr}
 80118f0:	b082      	sub	sp, #8
 80118f2:	af00      	add	r7, sp, #0
 80118f4:	6078      	str	r0, [r7, #4]
 80118f6:	6039      	str	r1, [r7, #0]
    if (name == name_) return this;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	3308      	adds	r3, #8
 80118fc:	4619      	mov	r1, r3
 80118fe:	6838      	ldr	r0, [r7, #0]
 8011900:	f7fb fdc3 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 8011904:	4603      	mov	r3, r0
 8011906:	2b00      	cmp	r3, #0
 8011908:	d001      	beq.n	801190e <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x20>
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	e00d      	b.n	801192a <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    if (next_) return next_->getPluginByName(name);
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	685b      	ldr	r3, [r3, #4]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d007      	beq.n	8011926 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x38>
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	685b      	ldr	r3, [r3, #4]
 801191a:	6839      	ldr	r1, [r7, #0]
 801191c:	4618      	mov	r0, r3
 801191e:	f7ff ffe6 	bl	80118ee <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 8011922:	4603      	mov	r3, r0
 8011924:	e001      	b.n	801192a <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    return (next_);
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	685b      	ldr	r3, [r3, #4]
}
 801192a:	4618      	mov	r0, r3
 801192c:	3708      	adds	r7, #8
 801192e:	46bd      	mov	sp, r7
 8011930:	bd80      	pop	{r7, pc}

08011932 <_ZN10TestPlugin7getNextEv>:

TestPlugin* TestPlugin::getNext()
{
 8011932:	b480      	push	{r7}
 8011934:	b083      	sub	sp, #12
 8011936:	af00      	add	r7, sp, #0
 8011938:	6078      	str	r0, [r7, #4]
    return next_;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	685b      	ldr	r3, [r3, #4]
}
 801193e:	4618      	mov	r0, r3
 8011940:	370c      	adds	r7, #12
 8011942:	46bd      	mov	sp, r7
 8011944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011948:	4770      	bx	lr

0801194a <_ZN10TestPlugin18removePluginByNameERK12SimpleString>:
TestPlugin* TestPlugin::removePluginByName(const SimpleString& name)
{
 801194a:	b580      	push	{r7, lr}
 801194c:	b084      	sub	sp, #16
 801194e:	af00      	add	r7, sp, #0
 8011950:	6078      	str	r0, [r7, #4]
 8011952:	6039      	str	r1, [r7, #0]
    TestPlugin* removed = NULLPTR;
 8011954:	2300      	movs	r3, #0
 8011956:	60fb      	str	r3, [r7, #12]
    if (next_ && next_->getName() == name) {
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	685b      	ldr	r3, [r3, #4]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d00e      	beq.n	801197e <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	685b      	ldr	r3, [r3, #4]
 8011964:	4618      	mov	r0, r3
 8011966:	f7ff ffb6 	bl	80118d6 <_ZN10TestPlugin7getNameEv>
 801196a:	4603      	mov	r3, r0
 801196c:	6839      	ldr	r1, [r7, #0]
 801196e:	4618      	mov	r0, r3
 8011970:	f7fb fd8b 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 8011974:	4603      	mov	r3, r0
 8011976:	2b00      	cmp	r3, #0
 8011978:	d001      	beq.n	801197e <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 801197a:	2301      	movs	r3, #1
 801197c:	e000      	b.n	8011980 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x36>
 801197e:	2300      	movs	r3, #0
 8011980:	2b00      	cmp	r3, #0
 8011982:	d007      	beq.n	8011994 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x4a>
        removed = next_;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	685b      	ldr	r3, [r3, #4]
 8011988:	60fb      	str	r3, [r7, #12]
        next_ = next_->next_;
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	685b      	ldr	r3, [r3, #4]
 801198e:	685a      	ldr	r2, [r3, #4]
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	605a      	str	r2, [r3, #4]
    }
    return removed;
 8011994:	68fb      	ldr	r3, [r7, #12]
}
 8011996:	4618      	mov	r0, r3
 8011998:	3710      	adds	r7, #16
 801199a:	46bd      	mov	sp, r7
 801199c:	bd80      	pop	{r7, pc}

0801199e <_ZN10TestPlugin7disableEv>:

void TestPlugin::disable()
{
 801199e:	b480      	push	{r7}
 80119a0:	b083      	sub	sp, #12
 80119a2:	af00      	add	r7, sp, #0
 80119a4:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	2200      	movs	r2, #0
 80119aa:	741a      	strb	r2, [r3, #16]
}
 80119ac:	bf00      	nop
 80119ae:	370c      	adds	r7, #12
 80119b0:	46bd      	mov	sp, r7
 80119b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b6:	4770      	bx	lr

080119b8 <_ZN10TestPlugin6enableEv>:

void TestPlugin::enable()
{
 80119b8:	b480      	push	{r7}
 80119ba:	b083      	sub	sp, #12
 80119bc:	af00      	add	r7, sp, #0
 80119be:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	2201      	movs	r2, #1
 80119c4:	741a      	strb	r2, [r3, #16]
}
 80119c6:	bf00      	nop
 80119c8:	370c      	adds	r7, #12
 80119ca:	46bd      	mov	sp, r7
 80119cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d0:	4770      	bx	lr

080119d2 <_ZN10TestPlugin9isEnabledEv>:

bool TestPlugin::isEnabled()
{
 80119d2:	b480      	push	{r7}
 80119d4:	b083      	sub	sp, #12
 80119d6:	af00      	add	r7, sp, #0
 80119d8:	6078      	str	r0, [r7, #4]
    return enabled_;
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	7c1b      	ldrb	r3, [r3, #16]
}
 80119de:	4618      	mov	r0, r3
 80119e0:	370c      	adds	r7, #12
 80119e2:	46bd      	mov	sp, r7
 80119e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e8:	4770      	bx	lr
	...

080119ec <_ZN16SetPointerPluginC1ERK12SimpleString>:
//////// SetPlugin

static int pointerTableIndex;
static cpputest_pair setlist[SetPointerPlugin::MAX_SET];

SetPointerPlugin::SetPointerPlugin(const SimpleString& name) :
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b082      	sub	sp, #8
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
 80119f4:	6039      	str	r1, [r7, #0]
    TestPlugin(name)
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	6839      	ldr	r1, [r7, #0]
 80119fa:	4618      	mov	r0, r3
 80119fc:	f7ff fe7c 	bl	80116f8 <_ZN10TestPluginC1ERK12SimpleString>
 8011a00:	4a05      	ldr	r2, [pc, #20]	; (8011a18 <_ZN16SetPointerPluginC1ERK12SimpleString+0x2c>)
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	601a      	str	r2, [r3, #0]
{
    pointerTableIndex = 0;
 8011a06:	4b05      	ldr	r3, [pc, #20]	; (8011a1c <_ZN16SetPointerPluginC1ERK12SimpleString+0x30>)
 8011a08:	2200      	movs	r2, #0
 8011a0a:	601a      	str	r2, [r3, #0]
}
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	4618      	mov	r0, r3
 8011a10:	3708      	adds	r7, #8
 8011a12:	46bd      	mov	sp, r7
 8011a14:	bd80      	pop	{r7, pc}
 8011a16:	bf00      	nop
 8011a18:	08028884 	.word	0x08028884
 8011a1c:	20000910 	.word	0x20000910

08011a20 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult>:
    setlist[pointerTableIndex].orig = function;
    pointerTableIndex++;
}

void SetPointerPlugin::postTestAction(UtestShell& /*test*/, TestResult& /*result*/)
{
 8011a20:	b480      	push	{r7}
 8011a22:	b087      	sub	sp, #28
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	60f8      	str	r0, [r7, #12]
 8011a28:	60b9      	str	r1, [r7, #8]
 8011a2a:	607a      	str	r2, [r7, #4]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 8011a2c:	4b0e      	ldr	r3, [pc, #56]	; (8011a68 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	3b01      	subs	r3, #1
 8011a32:	617b      	str	r3, [r7, #20]
 8011a34:	697b      	ldr	r3, [r7, #20]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	db0d      	blt.n	8011a56 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x36>
        *((void**) setlist[i].orig) = setlist[i].orig_value;
 8011a3a:	4a0c      	ldr	r2, [pc, #48]	; (8011a6c <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 8011a3c:	697b      	ldr	r3, [r7, #20]
 8011a3e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011a42:	490a      	ldr	r1, [pc, #40]	; (8011a6c <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 8011a44:	697b      	ldr	r3, [r7, #20]
 8011a46:	00db      	lsls	r3, r3, #3
 8011a48:	440b      	add	r3, r1
 8011a4a:	685b      	ldr	r3, [r3, #4]
 8011a4c:	6013      	str	r3, [r2, #0]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 8011a4e:	697b      	ldr	r3, [r7, #20]
 8011a50:	3b01      	subs	r3, #1
 8011a52:	617b      	str	r3, [r7, #20]
 8011a54:	e7ee      	b.n	8011a34 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x14>
    pointerTableIndex = 0;
 8011a56:	4b04      	ldr	r3, [pc, #16]	; (8011a68 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 8011a58:	2200      	movs	r2, #0
 8011a5a:	601a      	str	r2, [r3, #0]
}
 8011a5c:	bf00      	nop
 8011a5e:	371c      	adds	r7, #28
 8011a60:	46bd      	mov	sp, r7
 8011a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a66:	4770      	bx	lr
 8011a68:	20000910 	.word	0x20000910
 8011a6c:	20000914 	.word	0x20000914

08011a70 <_ZN14NullTestPluginC1Ev>:

//////// NullPlugin

NullTestPlugin::NullTestPlugin() :
 8011a70:	b580      	push	{r7, lr}
 8011a72:	b082      	sub	sp, #8
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	6078      	str	r0, [r7, #4]
    TestPlugin(NULLPTR)
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2100      	movs	r1, #0
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	f7ff fe59 	bl	8011734 <_ZN10TestPluginC1EPS_>
 8011a82:	4a04      	ldr	r2, [pc, #16]	; (8011a94 <_ZN14NullTestPluginC1Ev+0x24>)
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	601a      	str	r2, [r3, #0]
{
}
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	3708      	adds	r7, #8
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	bd80      	pop	{r7, pc}
 8011a92:	bf00      	nop
 8011a94:	08028840 	.word	0x08028840

08011a98 <__tcf_0>:

NullTestPlugin* NullTestPlugin::instance()
{
    static NullTestPlugin _instance;
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	af00      	add	r7, sp, #0
 8011a9c:	4801      	ldr	r0, [pc, #4]	; (8011aa4 <__tcf_0+0xc>)
 8011a9e:	f000 f849 	bl	8011b34 <_ZN14NullTestPluginD1Ev>
 8011aa2:	bd80      	pop	{r7, pc}
 8011aa4:	20000a14 	.word	0x20000a14

08011aa8 <_ZN14NullTestPlugin8instanceEv>:
{
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	af00      	add	r7, sp, #0
    static NullTestPlugin _instance;
 8011aac:	4b12      	ldr	r3, [pc, #72]	; (8011af8 <_ZN14NullTestPlugin8instanceEv+0x50>)
 8011aae:	781b      	ldrb	r3, [r3, #0]
 8011ab0:	f3bf 8f5b 	dmb	ish
 8011ab4:	b2db      	uxtb	r3, r3
 8011ab6:	f003 0301 	and.w	r3, r3, #1
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	bf0c      	ite	eq
 8011abe:	2301      	moveq	r3, #1
 8011ac0:	2300      	movne	r3, #0
 8011ac2:	b2db      	uxtb	r3, r3
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d013      	beq.n	8011af0 <_ZN14NullTestPlugin8instanceEv+0x48>
 8011ac8:	480b      	ldr	r0, [pc, #44]	; (8011af8 <_ZN14NullTestPlugin8instanceEv+0x50>)
 8011aca:	f00d ffd9 	bl	801fa80 <__cxa_guard_acquire>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	bf14      	ite	ne
 8011ad4:	2301      	movne	r3, #1
 8011ad6:	2300      	moveq	r3, #0
 8011ad8:	b2db      	uxtb	r3, r3
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d008      	beq.n	8011af0 <_ZN14NullTestPlugin8instanceEv+0x48>
 8011ade:	4807      	ldr	r0, [pc, #28]	; (8011afc <_ZN14NullTestPlugin8instanceEv+0x54>)
 8011ae0:	f7ff ffc6 	bl	8011a70 <_ZN14NullTestPluginC1Ev>
 8011ae4:	4804      	ldr	r0, [pc, #16]	; (8011af8 <_ZN14NullTestPlugin8instanceEv+0x50>)
 8011ae6:	f00d ffd7 	bl	801fa98 <__cxa_guard_release>
 8011aea:	4805      	ldr	r0, [pc, #20]	; (8011b00 <_ZN14NullTestPlugin8instanceEv+0x58>)
 8011aec:	f00d fffb 	bl	801fae6 <atexit>
    return &_instance;
 8011af0:	4b02      	ldr	r3, [pc, #8]	; (8011afc <_ZN14NullTestPlugin8instanceEv+0x54>)
}
 8011af2:	4618      	mov	r0, r3
 8011af4:	bd80      	pop	{r7, pc}
 8011af6:	bf00      	nop
 8011af8:	20000a28 	.word	0x20000a28
 8011afc:	20000a14 	.word	0x20000a14
 8011b00:	08011a99 	.word	0x08011a99

08011b04 <_ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
{
 8011b04:	b480      	push	{r7}
 8011b06:	b085      	sub	sp, #20
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	60f8      	str	r0, [r7, #12]
 8011b0c:	60b9      	str	r1, [r7, #8]
 8011b0e:	607a      	str	r2, [r7, #4]
}
 8011b10:	bf00      	nop
 8011b12:	3714      	adds	r7, #20
 8011b14:	46bd      	mov	sp, r7
 8011b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1a:	4770      	bx	lr

08011b1c <_ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
{
 8011b1c:	b480      	push	{r7}
 8011b1e:	b085      	sub	sp, #20
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	60f8      	str	r0, [r7, #12]
 8011b24:	60b9      	str	r1, [r7, #8]
 8011b26:	607a      	str	r2, [r7, #4]
}
 8011b28:	bf00      	nop
 8011b2a:	3714      	adds	r7, #20
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b32:	4770      	bx	lr

08011b34 <_ZN14NullTestPluginD1Ev>:

#define UT_PTR_SET(a, b) do { CppUTestStore( (void**)&a ); a = b; } while(0)

///////////// Null Plugin

class NullTestPlugin: public TestPlugin
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b082      	sub	sp, #8
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
 8011b3c:	4a05      	ldr	r2, [pc, #20]	; (8011b54 <_ZN14NullTestPluginD1Ev+0x20>)
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	601a      	str	r2, [r3, #0]
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	4618      	mov	r0, r3
 8011b46:	f7ff fe13 	bl	8011770 <_ZN10TestPluginD1Ev>
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	3708      	adds	r7, #8
 8011b50:	46bd      	mov	sp, r7
 8011b52:	bd80      	pop	{r7, pc}
 8011b54:	08028840 	.word	0x08028840

08011b58 <_ZN14NullTestPluginD0Ev>:
 8011b58:	b580      	push	{r7, lr}
 8011b5a:	b082      	sub	sp, #8
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
 8011b60:	6878      	ldr	r0, [r7, #4]
 8011b62:	f7ff ffe7 	bl	8011b34 <_ZN14NullTestPluginD1Ev>
 8011b66:	2114      	movs	r1, #20
 8011b68:	6878      	ldr	r0, [r7, #4]
 8011b6a:	f7f8 fd1b 	bl	800a5a4 <_ZdlPvj>
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	4618      	mov	r0, r3
 8011b72:	3708      	adds	r7, #8
 8011b74:	46bd      	mov	sp, r7
 8011b76:	bd80      	pop	{r7, pc}

08011b78 <_ZN12TestRegistryC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestRegistry.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestRegistry::TestRegistry() :
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b082      	sub	sp, #8
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
    tests_(NULLPTR), nameFilters_(NULLPTR), groupFilters_(NULLPTR), firstPlugin_(NullTestPlugin::instance()), runInSeperateProcess_(false), currentRepetition_(0), runIgnored_(false)
 8011b80:	4a0f      	ldr	r2, [pc, #60]	; (8011bc0 <_ZN12TestRegistryC1Ev+0x48>)
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	601a      	str	r2, [r3, #0]
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	2200      	movs	r2, #0
 8011b8a:	605a      	str	r2, [r3, #4]
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	2200      	movs	r2, #0
 8011b90:	609a      	str	r2, [r3, #8]
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	2200      	movs	r2, #0
 8011b96:	60da      	str	r2, [r3, #12]
 8011b98:	f7ff ff86 	bl	8011aa8 <_ZN14NullTestPlugin8instanceEv>
 8011b9c:	4602      	mov	r2, r0
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	611a      	str	r2, [r3, #16]
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	751a      	strb	r2, [r3, #20]
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	2200      	movs	r2, #0
 8011bac:	619a      	str	r2, [r3, #24]
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	771a      	strb	r2, [r3, #28]
{
}
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	3708      	adds	r7, #8
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	bd80      	pop	{r7, pc}
 8011bbe:	bf00      	nop
 8011bc0:	0802890c 	.word	0x0802890c

08011bc4 <_ZN12TestRegistryD1Ev>:

TestRegistry::~TestRegistry()
 8011bc4:	b480      	push	{r7}
 8011bc6:	b083      	sub	sp, #12
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
 8011bcc:	4a04      	ldr	r2, [pc, #16]	; (8011be0 <_ZN12TestRegistryD1Ev+0x1c>)
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	601a      	str	r2, [r3, #0]
{
}
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	370c      	adds	r7, #12
 8011bd8:	46bd      	mov	sp, r7
 8011bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bde:	4770      	bx	lr
 8011be0:	0802890c 	.word	0x0802890c

08011be4 <_ZN12TestRegistryD0Ev>:
TestRegistry::~TestRegistry()
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b082      	sub	sp, #8
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
}
 8011bec:	6878      	ldr	r0, [r7, #4]
 8011bee:	f7ff ffe9 	bl	8011bc4 <_ZN12TestRegistryD1Ev>
 8011bf2:	2120      	movs	r1, #32
 8011bf4:	6878      	ldr	r0, [r7, #4]
 8011bf6:	f7f8 fcd5 	bl	800a5a4 <_ZdlPvj>
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	3708      	adds	r7, #8
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bd80      	pop	{r7, pc}

08011c04 <_ZN12TestRegistry7addTestEP10UtestShell>:

void TestRegistry::addTest(UtestShell *test)
{
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b082      	sub	sp, #8
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	6078      	str	r0, [r7, #4]
 8011c0c:	6039      	str	r1, [r7, #0]
    tests_ = test->addTest(tests_);
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	3308      	adds	r3, #8
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	687a      	ldr	r2, [r7, #4]
 8011c18:	6852      	ldr	r2, [r2, #4]
 8011c1a:	4611      	mov	r1, r2
 8011c1c:	6838      	ldr	r0, [r7, #0]
 8011c1e:	4798      	blx	r3
 8011c20:	4602      	mov	r2, r0
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	605a      	str	r2, [r3, #4]
}
 8011c26:	bf00      	nop
 8011c28:	3708      	adds	r7, #8
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	bd80      	pop	{r7, pc}

08011c2e <_ZN12TestRegistry11runAllTestsER10TestResult>:

void TestRegistry::runAllTests(TestResult& result)
{
 8011c2e:	b580      	push	{r7, lr}
 8011c30:	b084      	sub	sp, #16
 8011c32:	af00      	add	r7, sp, #0
 8011c34:	6078      	str	r0, [r7, #4]
 8011c36:	6039      	str	r1, [r7, #0]
    bool groupStart = true;
 8011c38:	2301      	movs	r3, #1
 8011c3a:	73fb      	strb	r3, [r7, #15]

    result.testsStarted();
 8011c3c:	683b      	ldr	r3, [r7, #0]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	3308      	adds	r3, #8
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	6838      	ldr	r0, [r7, #0]
 8011c46:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	685b      	ldr	r3, [r3, #4]
 8011c4c:	60bb      	str	r3, [r7, #8]
 8011c4e:	68bb      	ldr	r3, [r7, #8]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d05c      	beq.n	8011d0e <_ZN12TestRegistry11runAllTestsER10TestResult+0xe0>
        if (runInSeperateProcess_) test->setRunInSeperateProcess();
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	7d1b      	ldrb	r3, [r3, #20]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d005      	beq.n	8011c68 <_ZN12TestRegistry11runAllTestsER10TestResult+0x3a>
 8011c5c:	68bb      	ldr	r3, [r7, #8]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	3380      	adds	r3, #128	; 0x80
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	68b8      	ldr	r0, [r7, #8]
 8011c66:	4798      	blx	r3
        if (runIgnored_) test->setRunIgnored();
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	7f1b      	ldrb	r3, [r3, #28]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d005      	beq.n	8011c7c <_ZN12TestRegistry11runAllTestsER10TestResult+0x4e>
 8011c70:	68bb      	ldr	r3, [r7, #8]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	3384      	adds	r3, #132	; 0x84
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	68b8      	ldr	r0, [r7, #8]
 8011c7a:	4798      	blx	r3

        if (groupStart) {
 8011c7c:	7bfb      	ldrb	r3, [r7, #15]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d008      	beq.n	8011c94 <_ZN12TestRegistry11runAllTestsER10TestResult+0x66>
            result.currentGroupStarted(test);
 8011c82:	683b      	ldr	r3, [r7, #0]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	3310      	adds	r3, #16
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	68b9      	ldr	r1, [r7, #8]
 8011c8c:	6838      	ldr	r0, [r7, #0]
 8011c8e:	4798      	blx	r3
            groupStart = false;
 8011c90:	2300      	movs	r3, #0
 8011c92:	73fb      	strb	r3, [r7, #15]
        }

        result.countTest();
 8011c94:	683b      	ldr	r3, [r7, #0]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	3320      	adds	r3, #32
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	6838      	ldr	r0, [r7, #0]
 8011c9e:	4798      	blx	r3
        if (testShouldRun(test, result)) {
 8011ca0:	683a      	ldr	r2, [r7, #0]
 8011ca2:	68b9      	ldr	r1, [r7, #8]
 8011ca4:	6878      	ldr	r0, [r7, #4]
 8011ca6:	f000 fb79 	bl	801239c <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 8011caa:	4603      	mov	r3, r0
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d016      	beq.n	8011cde <_ZN12TestRegistry11runAllTestsER10TestResult+0xb0>
            result.currentTestStarted(test);
 8011cb0:	683b      	ldr	r3, [r7, #0]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	3318      	adds	r3, #24
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	68b9      	ldr	r1, [r7, #8]
 8011cba:	6838      	ldr	r0, [r7, #0]
 8011cbc:	4798      	blx	r3
            test->runOneTest(firstPlugin_, result);
 8011cbe:	68bb      	ldr	r3, [r7, #8]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	3390      	adds	r3, #144	; 0x90
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	687a      	ldr	r2, [r7, #4]
 8011cc8:	6911      	ldr	r1, [r2, #16]
 8011cca:	683a      	ldr	r2, [r7, #0]
 8011ccc:	68b8      	ldr	r0, [r7, #8]
 8011cce:	4798      	blx	r3
            result.currentTestEnded(test);
 8011cd0:	683b      	ldr	r3, [r7, #0]
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	331c      	adds	r3, #28
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	68b9      	ldr	r1, [r7, #8]
 8011cda:	6838      	ldr	r0, [r7, #0]
 8011cdc:	4798      	blx	r3
        }

        if (endOfGroup(test)) {
 8011cde:	68b9      	ldr	r1, [r7, #8]
 8011ce0:	6878      	ldr	r0, [r7, #4]
 8011ce2:	f000 fa5b 	bl	801219c <_ZN12TestRegistry10endOfGroupEP10UtestShell>
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d008      	beq.n	8011cfe <_ZN12TestRegistry11runAllTestsER10TestResult+0xd0>
            groupStart = true;
 8011cec:	2301      	movs	r3, #1
 8011cee:	73fb      	strb	r3, [r7, #15]
            result.currentGroupEnded(test);
 8011cf0:	683b      	ldr	r3, [r7, #0]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	3314      	adds	r3, #20
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	68b9      	ldr	r1, [r7, #8]
 8011cfa:	6838      	ldr	r0, [r7, #0]
 8011cfc:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8011cfe:	68bb      	ldr	r3, [r7, #8]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	330c      	adds	r3, #12
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	68b8      	ldr	r0, [r7, #8]
 8011d08:	4798      	blx	r3
 8011d0a:	60b8      	str	r0, [r7, #8]
 8011d0c:	e79f      	b.n	8011c4e <_ZN12TestRegistry11runAllTestsER10TestResult+0x20>
        }
    }
    result.testsEnded();
 8011d0e:	683b      	ldr	r3, [r7, #0]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	330c      	adds	r3, #12
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	6838      	ldr	r0, [r7, #0]
 8011d18:	4798      	blx	r3
    currentRepetition_++;
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	699b      	ldr	r3, [r3, #24]
 8011d1e:	1c5a      	adds	r2, r3, #1
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	619a      	str	r2, [r3, #24]
}
 8011d24:	bf00      	nop
 8011d26:	3710      	adds	r7, #16
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	bd80      	pop	{r7, pc}

08011d2c <_ZN12TestRegistry18listTestGroupNamesER10TestResult>:

void TestRegistry::listTestGroupNames(TestResult& result)
{
 8011d2c:	b590      	push	{r4, r7, lr}
 8011d2e:	b08f      	sub	sp, #60	; 0x3c
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
 8011d34:	6039      	str	r1, [r7, #0]
    SimpleString groupList;
 8011d36:	f107 0314 	add.w	r3, r7, #20
 8011d3a:	4953      	ldr	r1, [pc, #332]	; (8011e88 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	f7fa ffe0 	bl	800cd02 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	685b      	ldr	r3, [r3, #4]
 8011d46:	637b      	str	r3, [r7, #52]	; 0x34
 8011d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d04d      	beq.n	8011dea <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xbe>
        SimpleString gname;
 8011d4e:	f107 030c 	add.w	r3, r7, #12
 8011d52:	494d      	ldr	r1, [pc, #308]	; (8011e88 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 8011d54:	4618      	mov	r0, r3
 8011d56:	f7fa ffd4 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
        gname += "#";
 8011d5a:	f107 030c 	add.w	r3, r7, #12
 8011d5e:	494b      	ldr	r1, [pc, #300]	; (8011e8c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 8011d60:	4618      	mov	r0, r3
 8011d62:	f7fb fc15 	bl	800d590 <_ZN12SimpleStringpLEPKc>
        gname += test->getGroup();
 8011d66:	f107 031c 	add.w	r3, r7, #28
 8011d6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	f001 f9d2 	bl	8013116 <_ZNK10UtestShell8getGroupEv>
 8011d72:	f107 021c 	add.w	r2, r7, #28
 8011d76:	f107 030c 	add.w	r3, r7, #12
 8011d7a:	4611      	mov	r1, r2
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	f7fb fbf5 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 8011d82:	f107 031c 	add.w	r3, r7, #28
 8011d86:	4618      	mov	r0, r3
 8011d88:	f7fb fb73 	bl	800d472 <_ZN12SimpleStringD1Ev>
        gname += "#";
 8011d8c:	f107 030c 	add.w	r3, r7, #12
 8011d90:	493e      	ldr	r1, [pc, #248]	; (8011e8c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 8011d92:	4618      	mov	r0, r3
 8011d94:	f7fb fbfc 	bl	800d590 <_ZN12SimpleStringpLEPKc>

        if (!groupList.contains(gname)) {
 8011d98:	f107 020c 	add.w	r2, r7, #12
 8011d9c:	f107 0314 	add.w	r3, r7, #20
 8011da0:	4611      	mov	r1, r2
 8011da2:	4618      	mov	r0, r3
 8011da4:	f7fb f82b 	bl	800cdfe <_ZNK12SimpleString8containsERKS_>
 8011da8:	4603      	mov	r3, r0
 8011daa:	f083 0301 	eor.w	r3, r3, #1
 8011dae:	b2db      	uxtb	r3, r3
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d00d      	beq.n	8011dd0 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xa4>
            groupList += gname;
 8011db4:	f107 020c 	add.w	r2, r7, #12
 8011db8:	f107 0314 	add.w	r3, r7, #20
 8011dbc:	4611      	mov	r1, r2
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	f7fb fbd4 	bl	800d56c <_ZN12SimpleStringpLERKS_>
            groupList += " ";
 8011dc4:	f107 0314 	add.w	r3, r7, #20
 8011dc8:	4931      	ldr	r1, [pc, #196]	; (8011e90 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 8011dca:	4618      	mov	r0, r3
 8011dcc:	f7fb fbe0 	bl	800d590 <_ZN12SimpleStringpLEPKc>
        SimpleString gname;
 8011dd0:	f107 030c 	add.w	r3, r7, #12
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	f7fb fb4c 	bl	800d472 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8011dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	330c      	adds	r3, #12
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011de4:	4798      	blx	r3
 8011de6:	6378      	str	r0, [r7, #52]	; 0x34
 8011de8:	e7ae      	b.n	8011d48 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x1c>
        }
    }

    groupList.replace("#", "");
 8011dea:	f107 0314 	add.w	r3, r7, #20
 8011dee:	4a26      	ldr	r2, [pc, #152]	; (8011e88 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 8011df0:	4926      	ldr	r1, [pc, #152]	; (8011e8c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 8011df2:	4618      	mov	r0, r3
 8011df4:	f7fb f99a 	bl	800d12c <_ZN12SimpleString7replaceEPKcS1_>

    if (groupList.endsWith(" "))
 8011df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011dfc:	4924      	ldr	r1, [pc, #144]	; (8011e90 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 8011dfe:	4618      	mov	r0, r3
 8011e00:	f7fa ff7f 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8011e04:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011e08:	f107 0314 	add.w	r3, r7, #20
 8011e0c:	4611      	mov	r1, r2
 8011e0e:	4618      	mov	r0, r3
 8011e10:	f7fb f874 	bl	800cefc <_ZNK12SimpleString8endsWithERKS_>
 8011e14:	4603      	mov	r3, r0
 8011e16:	461c      	mov	r4, r3
 8011e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	f7fb fb28 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8011e22:	2c00      	cmp	r4, #0
 8011e24:	d01a      	beq.n	8011e5c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x130>
        groupList = groupList.subString(0, groupList.size() - 1);
 8011e26:	f107 0314 	add.w	r3, r7, #20
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	f7fb fb00 	bl	800d430 <_ZNK12SimpleString4sizeEv>
 8011e30:	4603      	mov	r3, r0
 8011e32:	3b01      	subs	r3, #1
 8011e34:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8011e38:	f107 0114 	add.w	r1, r7, #20
 8011e3c:	2200      	movs	r2, #0
 8011e3e:	f7fb fc21 	bl	800d684 <_ZNK12SimpleString9subStringEjj>
 8011e42:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011e46:	f107 0314 	add.w	r3, r7, #20
 8011e4a:	4611      	mov	r1, r2
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	f7fa ffc4 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 8011e52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011e56:	4618      	mov	r0, r3
 8011e58:	f7fb fb0b 	bl	800d472 <_ZN12SimpleStringD1Ev>
    result.print(groupList.asCharString());
 8011e5c:	683b      	ldr	r3, [r7, #0]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	3338      	adds	r3, #56	; 0x38
 8011e62:	681c      	ldr	r4, [r3, #0]
 8011e64:	f107 0314 	add.w	r3, r7, #20
 8011e68:	4618      	mov	r0, r3
 8011e6a:	f7fb fad5 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 8011e6e:	4603      	mov	r3, r0
 8011e70:	4619      	mov	r1, r3
 8011e72:	6838      	ldr	r0, [r7, #0]
 8011e74:	47a0      	blx	r4
    SimpleString groupList;
 8011e76:	f107 0314 	add.w	r3, r7, #20
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f7fb faf9 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 8011e80:	bf00      	nop
 8011e82:	373c      	adds	r7, #60	; 0x3c
 8011e84:	46bd      	mov	sp, r7
 8011e86:	bd90      	pop	{r4, r7, pc}
 8011e88:	08024f80 	.word	0x08024f80
 8011e8c:	08024f84 	.word	0x08024f84
 8011e90:	08024f88 	.word	0x08024f88

08011e94 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult>:

void TestRegistry::listTestGroupAndCaseNames(TestResult& result)
{
 8011e94:	b590      	push	{r4, r7, lr}
 8011e96:	b091      	sub	sp, #68	; 0x44
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	6078      	str	r0, [r7, #4]
 8011e9c:	6039      	str	r1, [r7, #0]
    SimpleString groupAndNameList;
 8011e9e:	f107 0314 	add.w	r3, r7, #20
 8011ea2:	4964      	ldr	r1, [pc, #400]	; (8012034 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	f7fa ff2c 	bl	800cd02 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	685b      	ldr	r3, [r3, #4]
 8011eae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d06e      	beq.n	8011f94 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x100>
        if (testShouldRun(test, result)) {
 8011eb6:	683a      	ldr	r2, [r7, #0]
 8011eb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011eba:	6878      	ldr	r0, [r7, #4]
 8011ebc:	f000 fa6e 	bl	801239c <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d05e      	beq.n	8011f84 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xf0>
            SimpleString groupAndName;
 8011ec6:	f107 030c 	add.w	r3, r7, #12
 8011eca:	495a      	ldr	r1, [pc, #360]	; (8012034 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8011ecc:	4618      	mov	r0, r3
 8011ece:	f7fa ff18 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
            groupAndName += "#";
 8011ed2:	f107 030c 	add.w	r3, r7, #12
 8011ed6:	4958      	ldr	r1, [pc, #352]	; (8012038 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8011ed8:	4618      	mov	r0, r3
 8011eda:	f7fb fb59 	bl	800d590 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getGroup();
 8011ede:	f107 031c 	add.w	r3, r7, #28
 8011ee2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	f001 f916 	bl	8013116 <_ZNK10UtestShell8getGroupEv>
 8011eea:	f107 021c 	add.w	r2, r7, #28
 8011eee:	f107 030c 	add.w	r3, r7, #12
 8011ef2:	4611      	mov	r1, r2
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	f7fb fb39 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 8011efa:	f107 031c 	add.w	r3, r7, #28
 8011efe:	4618      	mov	r0, r3
 8011f00:	f7fb fab7 	bl	800d472 <_ZN12SimpleStringD1Ev>
            groupAndName += ".";
 8011f04:	f107 030c 	add.w	r3, r7, #12
 8011f08:	494c      	ldr	r1, [pc, #304]	; (801203c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a8>)
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	f7fb fb40 	bl	800d590 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getName();
 8011f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011f14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011f16:	4618      	mov	r0, r3
 8011f18:	f001 f8ee 	bl	80130f8 <_ZNK10UtestShell7getNameEv>
 8011f1c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011f20:	f107 030c 	add.w	r3, r7, #12
 8011f24:	4611      	mov	r1, r2
 8011f26:	4618      	mov	r0, r3
 8011f28:	f7fb fb20 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 8011f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011f30:	4618      	mov	r0, r3
 8011f32:	f7fb fa9e 	bl	800d472 <_ZN12SimpleStringD1Ev>
            groupAndName += "#";
 8011f36:	f107 030c 	add.w	r3, r7, #12
 8011f3a:	493f      	ldr	r1, [pc, #252]	; (8012038 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	f7fb fb27 	bl	800d590 <_ZN12SimpleStringpLEPKc>

            if (!groupAndNameList.contains(groupAndName)) {
 8011f42:	f107 020c 	add.w	r2, r7, #12
 8011f46:	f107 0314 	add.w	r3, r7, #20
 8011f4a:	4611      	mov	r1, r2
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	f7fa ff56 	bl	800cdfe <_ZNK12SimpleString8containsERKS_>
 8011f52:	4603      	mov	r3, r0
 8011f54:	f083 0301 	eor.w	r3, r3, #1
 8011f58:	b2db      	uxtb	r3, r3
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d00d      	beq.n	8011f7a <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xe6>
                groupAndNameList += groupAndName;
 8011f5e:	f107 020c 	add.w	r2, r7, #12
 8011f62:	f107 0314 	add.w	r3, r7, #20
 8011f66:	4611      	mov	r1, r2
 8011f68:	4618      	mov	r0, r3
 8011f6a:	f7fb faff 	bl	800d56c <_ZN12SimpleStringpLERKS_>
                groupAndNameList += " ";
 8011f6e:	f107 0314 	add.w	r3, r7, #20
 8011f72:	4933      	ldr	r1, [pc, #204]	; (8012040 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 8011f74:	4618      	mov	r0, r3
 8011f76:	f7fb fb0b 	bl	800d590 <_ZN12SimpleStringpLEPKc>
            SimpleString groupAndName;
 8011f7a:	f107 030c 	add.w	r3, r7, #12
 8011f7e:	4618      	mov	r0, r3
 8011f80:	f7fb fa77 	bl	800d472 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8011f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	330c      	adds	r3, #12
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011f8e:	4798      	blx	r3
 8011f90:	63f8      	str	r0, [r7, #60]	; 0x3c
 8011f92:	e78d      	b.n	8011eb0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1c>
            }
        }
    }

    groupAndNameList.replace("#", "");
 8011f94:	f107 0314 	add.w	r3, r7, #20
 8011f98:	4a26      	ldr	r2, [pc, #152]	; (8012034 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8011f9a:	4927      	ldr	r1, [pc, #156]	; (8012038 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f7fb f8c5 	bl	800d12c <_ZN12SimpleString7replaceEPKcS1_>

    if (groupAndNameList.endsWith(" "))
 8011fa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011fa6:	4926      	ldr	r1, [pc, #152]	; (8012040 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 8011fa8:	4618      	mov	r0, r3
 8011faa:	f7fa feaa 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8011fae:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011fb2:	f107 0314 	add.w	r3, r7, #20
 8011fb6:	4611      	mov	r1, r2
 8011fb8:	4618      	mov	r0, r3
 8011fba:	f7fa ff9f 	bl	800cefc <_ZNK12SimpleString8endsWithERKS_>
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	461c      	mov	r4, r3
 8011fc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	f7fb fa53 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8011fcc:	2c00      	cmp	r4, #0
 8011fce:	d01a      	beq.n	8012006 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x172>
        groupAndNameList = groupAndNameList.subString(0, groupAndNameList.size() - 1);
 8011fd0:	f107 0314 	add.w	r3, r7, #20
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	f7fb fa2b 	bl	800d430 <_ZNK12SimpleString4sizeEv>
 8011fda:	4603      	mov	r3, r0
 8011fdc:	3b01      	subs	r3, #1
 8011fde:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8011fe2:	f107 0114 	add.w	r1, r7, #20
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	f7fb fb4c 	bl	800d684 <_ZNK12SimpleString9subStringEjj>
 8011fec:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8011ff0:	f107 0314 	add.w	r3, r7, #20
 8011ff4:	4611      	mov	r1, r2
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	f7fa feef 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 8011ffc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012000:	4618      	mov	r0, r3
 8012002:	f7fb fa36 	bl	800d472 <_ZN12SimpleStringD1Ev>
    result.print(groupAndNameList.asCharString());
 8012006:	683b      	ldr	r3, [r7, #0]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	3338      	adds	r3, #56	; 0x38
 801200c:	681c      	ldr	r4, [r3, #0]
 801200e:	f107 0314 	add.w	r3, r7, #20
 8012012:	4618      	mov	r0, r3
 8012014:	f7fb fa00 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 8012018:	4603      	mov	r3, r0
 801201a:	4619      	mov	r1, r3
 801201c:	6838      	ldr	r0, [r7, #0]
 801201e:	47a0      	blx	r4
    SimpleString groupAndNameList;
 8012020:	f107 0314 	add.w	r3, r7, #20
 8012024:	4618      	mov	r0, r3
 8012026:	f7fb fa24 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 801202a:	bf00      	nop
 801202c:	3744      	adds	r7, #68	; 0x44
 801202e:	46bd      	mov	sp, r7
 8012030:	bd90      	pop	{r4, r7, pc}
 8012032:	bf00      	nop
 8012034:	08024f80 	.word	0x08024f80
 8012038:	08024f84 	.word	0x08024f84
 801203c:	08024f8c 	.word	0x08024f8c
 8012040:	08024f88 	.word	0x08024f88

08012044 <_ZN12TestRegistry17listTestLocationsER10TestResult>:

void TestRegistry::listTestLocations(TestResult& result)
{
 8012044:	b590      	push	{r4, r7, lr}
 8012046:	b091      	sub	sp, #68	; 0x44
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]
 801204c:	6039      	str	r1, [r7, #0]
    SimpleString testLocations;
 801204e:	f107 0314 	add.w	r3, r7, #20
 8012052:	494f      	ldr	r1, [pc, #316]	; (8012190 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 8012054:	4618      	mov	r0, r3
 8012056:	f7fa fe54 	bl	800cd02 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	685b      	ldr	r3, [r3, #4]
 801205e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012062:	2b00      	cmp	r3, #0
 8012064:	d07d      	beq.n	8012162 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x11e>
            SimpleString testLocation;
 8012066:	f107 030c 	add.w	r3, r7, #12
 801206a:	4949      	ldr	r1, [pc, #292]	; (8012190 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 801206c:	4618      	mov	r0, r3
 801206e:	f7fa fe48 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
            testLocation += test->getGroup();
 8012072:	f107 031c 	add.w	r3, r7, #28
 8012076:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012078:	4618      	mov	r0, r3
 801207a:	f001 f84c 	bl	8013116 <_ZNK10UtestShell8getGroupEv>
 801207e:	f107 021c 	add.w	r2, r7, #28
 8012082:	f107 030c 	add.w	r3, r7, #12
 8012086:	4611      	mov	r1, r2
 8012088:	4618      	mov	r0, r3
 801208a:	f7fb fa6f 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 801208e:	f107 031c 	add.w	r3, r7, #28
 8012092:	4618      	mov	r0, r3
 8012094:	f7fb f9ed 	bl	800d472 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8012098:	f107 030c 	add.w	r3, r7, #12
 801209c:	493d      	ldr	r1, [pc, #244]	; (8012194 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 801209e:	4618      	mov	r0, r3
 80120a0:	f7fb fa76 	bl	800d590 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getName();
 80120a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80120a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80120aa:	4618      	mov	r0, r3
 80120ac:	f001 f824 	bl	80130f8 <_ZNK10UtestShell7getNameEv>
 80120b0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80120b4:	f107 030c 	add.w	r3, r7, #12
 80120b8:	4611      	mov	r1, r2
 80120ba:	4618      	mov	r0, r3
 80120bc:	f7fb fa56 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 80120c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80120c4:	4618      	mov	r0, r3
 80120c6:	f7fb f9d4 	bl	800d472 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 80120ca:	f107 030c 	add.w	r3, r7, #12
 80120ce:	4931      	ldr	r1, [pc, #196]	; (8012194 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 80120d0:	4618      	mov	r0, r3
 80120d2:	f7fb fa5d 	bl	800d590 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getFile();
 80120d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80120da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80120dc:	4618      	mov	r0, r3
 80120de:	f001 f8dc 	bl	801329a <_ZNK10UtestShell7getFileEv>
 80120e2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80120e6:	f107 030c 	add.w	r3, r7, #12
 80120ea:	4611      	mov	r1, r2
 80120ec:	4618      	mov	r0, r3
 80120ee:	f7fb fa3d 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 80120f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80120f6:	4618      	mov	r0, r3
 80120f8:	f7fb f9bb 	bl	800d472 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 80120fc:	f107 030c 	add.w	r3, r7, #12
 8012100:	4924      	ldr	r1, [pc, #144]	; (8012194 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 8012102:	4618      	mov	r0, r3
 8012104:	f7fb fa44 	bl	800d590 <_ZN12SimpleStringpLEPKc>
            testLocation += StringFromFormat("%d\n",(int) test->getLineNumber());
 8012108:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801210a:	f001 f8d5 	bl	80132b8 <_ZNK10UtestShell13getLineNumberEv>
 801210e:	4603      	mov	r3, r0
 8012110:	461a      	mov	r2, r3
 8012112:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012116:	4920      	ldr	r1, [pc, #128]	; (8012198 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x154>)
 8012118:	4618      	mov	r0, r3
 801211a:	f7fb feb1 	bl	800de80 <_Z16StringFromFormatPKcz>
 801211e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8012122:	f107 030c 	add.w	r3, r7, #12
 8012126:	4611      	mov	r1, r2
 8012128:	4618      	mov	r0, r3
 801212a:	f7fb fa1f 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 801212e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012132:	4618      	mov	r0, r3
 8012134:	f7fb f99d 	bl	800d472 <_ZN12SimpleStringD1Ev>

            testLocations += testLocation;
 8012138:	f107 020c 	add.w	r2, r7, #12
 801213c:	f107 0314 	add.w	r3, r7, #20
 8012140:	4611      	mov	r1, r2
 8012142:	4618      	mov	r0, r3
 8012144:	f7fb fa12 	bl	800d56c <_ZN12SimpleStringpLERKS_>
            SimpleString testLocation;
 8012148:	f107 030c 	add.w	r3, r7, #12
 801214c:	4618      	mov	r0, r3
 801214e:	f7fb f990 	bl	800d472 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8012152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	330c      	adds	r3, #12
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801215c:	4798      	blx	r3
 801215e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8012160:	e77e      	b.n	8012060 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x1c>
    }

    result.print(testLocations.asCharString());
 8012162:	683b      	ldr	r3, [r7, #0]
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	3338      	adds	r3, #56	; 0x38
 8012168:	681c      	ldr	r4, [r3, #0]
 801216a:	f107 0314 	add.w	r3, r7, #20
 801216e:	4618      	mov	r0, r3
 8012170:	f7fb f952 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 8012174:	4603      	mov	r3, r0
 8012176:	4619      	mov	r1, r3
 8012178:	6838      	ldr	r0, [r7, #0]
 801217a:	47a0      	blx	r4
    SimpleString testLocations;
 801217c:	f107 0314 	add.w	r3, r7, #20
 8012180:	4618      	mov	r0, r3
 8012182:	f7fb f976 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 8012186:	bf00      	nop
 8012188:	3744      	adds	r7, #68	; 0x44
 801218a:	46bd      	mov	sp, r7
 801218c:	bd90      	pop	{r4, r7, pc}
 801218e:	bf00      	nop
 8012190:	08024f80 	.word	0x08024f80
 8012194:	08024f8c 	.word	0x08024f8c
 8012198:	08024f90 	.word	0x08024f90

0801219c <_ZN12TestRegistry10endOfGroupEP10UtestShell>:

bool TestRegistry::endOfGroup(UtestShell* test)
{
 801219c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801219e:	b087      	sub	sp, #28
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]
 80121a4:	6039      	str	r1, [r7, #0]
    return (!test || !test->getNext() || test->getGroup() != test->getNext()->getGroup());
 80121a6:	2400      	movs	r4, #0
 80121a8:	2500      	movs	r5, #0
 80121aa:	683b      	ldr	r3, [r7, #0]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d028      	beq.n	8012202 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 80121b0:	683b      	ldr	r3, [r7, #0]
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	330c      	adds	r3, #12
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	6838      	ldr	r0, [r7, #0]
 80121ba:	4798      	blx	r3
 80121bc:	4603      	mov	r3, r0
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d01f      	beq.n	8012202 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 80121c2:	f107 0308 	add.w	r3, r7, #8
 80121c6:	6839      	ldr	r1, [r7, #0]
 80121c8:	4618      	mov	r0, r3
 80121ca:	f000 ffa4 	bl	8013116 <_ZNK10UtestShell8getGroupEv>
 80121ce:	2401      	movs	r4, #1
 80121d0:	683b      	ldr	r3, [r7, #0]
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	330c      	adds	r3, #12
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	6838      	ldr	r0, [r7, #0]
 80121da:	4798      	blx	r3
 80121dc:	4602      	mov	r2, r0
 80121de:	f107 0310 	add.w	r3, r7, #16
 80121e2:	4611      	mov	r1, r2
 80121e4:	4618      	mov	r0, r3
 80121e6:	f000 ff96 	bl	8013116 <_ZNK10UtestShell8getGroupEv>
 80121ea:	2501      	movs	r5, #1
 80121ec:	f107 0210 	add.w	r2, r7, #16
 80121f0:	f107 0308 	add.w	r3, r7, #8
 80121f4:	4611      	mov	r1, r2
 80121f6:	4618      	mov	r0, r3
 80121f8:	f7fb f98c 	bl	800d514 <_ZneRK12SimpleStringS1_>
 80121fc:	4603      	mov	r3, r0
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d001      	beq.n	8012206 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6a>
 8012202:	2601      	movs	r6, #1
 8012204:	e000      	b.n	8012208 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6c>
 8012206:	2600      	movs	r6, #0
 8012208:	2d00      	cmp	r5, #0
 801220a:	d004      	beq.n	8012216 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x7a>
 801220c:	f107 0310 	add.w	r3, r7, #16
 8012210:	4618      	mov	r0, r3
 8012212:	f7fb f92e 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8012216:	2c00      	cmp	r4, #0
 8012218:	d004      	beq.n	8012224 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x88>
 801221a:	f107 0308 	add.w	r3, r7, #8
 801221e:	4618      	mov	r0, r3
 8012220:	f7fb f927 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8012224:	4633      	mov	r3, r6
}
 8012226:	4618      	mov	r0, r3
 8012228:	371c      	adds	r7, #28
 801222a:	46bd      	mov	sp, r7
 801222c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801222e <_ZN12TestRegistry10countTestsEv>:

size_t TestRegistry::countTests()
{
 801222e:	b580      	push	{r7, lr}
 8012230:	b082      	sub	sp, #8
 8012232:	af00      	add	r7, sp, #0
 8012234:	6078      	str	r0, [r7, #4]
    return tests_ ? tests_->countTests() : 0;
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	685b      	ldr	r3, [r3, #4]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d00a      	beq.n	8012254 <_ZN12TestRegistry10countTestsEv+0x26>
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	685a      	ldr	r2, [r3, #4]
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	685b      	ldr	r3, [r3, #4]
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	3310      	adds	r3, #16
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	4610      	mov	r0, r2
 801224e:	4798      	blx	r3
 8012250:	4603      	mov	r3, r0
 8012252:	e000      	b.n	8012256 <_ZN12TestRegistry10countTestsEv+0x28>
 8012254:	2300      	movs	r3, #0
}
 8012256:	4618      	mov	r0, r3
 8012258:	3708      	adds	r7, #8
 801225a:	46bd      	mov	sp, r7
 801225c:	bd80      	pop	{r7, pc}
	...

08012260 <__tcf_0>:

TestRegistry* TestRegistry::currentRegistry_ = NULLPTR;

TestRegistry* TestRegistry::getCurrentRegistry()
{
    static TestRegistry registry;
 8012260:	b580      	push	{r7, lr}
 8012262:	af00      	add	r7, sp, #0
 8012264:	4801      	ldr	r0, [pc, #4]	; (801226c <__tcf_0+0xc>)
 8012266:	f7ff fcad 	bl	8011bc4 <_ZN12TestRegistryD1Ev>
 801226a:	bd80      	pop	{r7, pc}
 801226c:	20000a30 	.word	0x20000a30

08012270 <_ZN12TestRegistry18getCurrentRegistryEv>:
{
 8012270:	b580      	push	{r7, lr}
 8012272:	af00      	add	r7, sp, #0
    static TestRegistry registry;
 8012274:	4b15      	ldr	r3, [pc, #84]	; (80122cc <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 8012276:	781b      	ldrb	r3, [r3, #0]
 8012278:	f3bf 8f5b 	dmb	ish
 801227c:	b2db      	uxtb	r3, r3
 801227e:	f003 0301 	and.w	r3, r3, #1
 8012282:	2b00      	cmp	r3, #0
 8012284:	bf0c      	ite	eq
 8012286:	2301      	moveq	r3, #1
 8012288:	2300      	movne	r3, #0
 801228a:	b2db      	uxtb	r3, r3
 801228c:	2b00      	cmp	r3, #0
 801228e:	d013      	beq.n	80122b8 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 8012290:	480e      	ldr	r0, [pc, #56]	; (80122cc <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 8012292:	f00d fbf5 	bl	801fa80 <__cxa_guard_acquire>
 8012296:	4603      	mov	r3, r0
 8012298:	2b00      	cmp	r3, #0
 801229a:	bf14      	ite	ne
 801229c:	2301      	movne	r3, #1
 801229e:	2300      	moveq	r3, #0
 80122a0:	b2db      	uxtb	r3, r3
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d008      	beq.n	80122b8 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 80122a6:	480a      	ldr	r0, [pc, #40]	; (80122d0 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
 80122a8:	f7ff fc66 	bl	8011b78 <_ZN12TestRegistryC1Ev>
 80122ac:	4807      	ldr	r0, [pc, #28]	; (80122cc <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 80122ae:	f00d fbf3 	bl	801fa98 <__cxa_guard_release>
 80122b2:	4808      	ldr	r0, [pc, #32]	; (80122d4 <_ZN12TestRegistry18getCurrentRegistryEv+0x64>)
 80122b4:	f00d fc17 	bl	801fae6 <atexit>
    return (currentRegistry_ == NULLPTR) ? &registry : currentRegistry_;
 80122b8:	4b07      	ldr	r3, [pc, #28]	; (80122d8 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d002      	beq.n	80122c6 <_ZN12TestRegistry18getCurrentRegistryEv+0x56>
 80122c0:	4b05      	ldr	r3, [pc, #20]	; (80122d8 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	e000      	b.n	80122c8 <_ZN12TestRegistry18getCurrentRegistryEv+0x58>
 80122c6:	4b02      	ldr	r3, [pc, #8]	; (80122d0 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
}
 80122c8:	4618      	mov	r0, r3
 80122ca:	bd80      	pop	{r7, pc}
 80122cc:	20000a50 	.word	0x20000a50
 80122d0:	20000a30 	.word	0x20000a30
 80122d4:	08012261 	.word	0x08012261
 80122d8:	20000a2c 	.word	0x20000a2c

080122dc <_ZN12TestRegistry18setCurrentRegistryEPS_>:

void TestRegistry::setCurrentRegistry(TestRegistry* registry)
{
 80122dc:	b480      	push	{r7}
 80122de:	b083      	sub	sp, #12
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	6078      	str	r0, [r7, #4]
 80122e4:	6039      	str	r1, [r7, #0]
    currentRegistry_ = registry;
 80122e6:	4a04      	ldr	r2, [pc, #16]	; (80122f8 <_ZN12TestRegistry18setCurrentRegistryEPS_+0x1c>)
 80122e8:	683b      	ldr	r3, [r7, #0]
 80122ea:	6013      	str	r3, [r2, #0]
}
 80122ec:	bf00      	nop
 80122ee:	370c      	adds	r7, #12
 80122f0:	46bd      	mov	sp, r7
 80122f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f6:	4770      	bx	lr
 80122f8:	20000a2c 	.word	0x20000a2c

080122fc <_ZN12TestRegistry15unDoLastAddTestEv>:

void TestRegistry::unDoLastAddTest()
{
 80122fc:	b580      	push	{r7, lr}
 80122fe:	b082      	sub	sp, #8
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]
    tests_ = tests_ ? tests_->getNext() : NULLPTR;
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	685b      	ldr	r3, [r3, #4]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d00a      	beq.n	8012322 <_ZN12TestRegistry15unDoLastAddTestEv+0x26>
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	685a      	ldr	r2, [r3, #4]
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	685b      	ldr	r3, [r3, #4]
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	330c      	adds	r3, #12
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	4610      	mov	r0, r2
 801231c:	4798      	blx	r3
 801231e:	4603      	mov	r3, r0
 8012320:	e000      	b.n	8012324 <_ZN12TestRegistry15unDoLastAddTestEv+0x28>
 8012322:	2300      	movs	r3, #0
 8012324:	687a      	ldr	r2, [r7, #4]
 8012326:	6053      	str	r3, [r2, #4]

}
 8012328:	bf00      	nop
 801232a:	3708      	adds	r7, #8
 801232c:	46bd      	mov	sp, r7
 801232e:	bd80      	pop	{r7, pc}

08012330 <_ZN12TestRegistry14setNameFiltersEPK10TestFilter>:

void TestRegistry::setNameFilters(const TestFilter* filters)
{
 8012330:	b480      	push	{r7}
 8012332:	b083      	sub	sp, #12
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]
 8012338:	6039      	str	r1, [r7, #0]
    nameFilters_ = filters;
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	683a      	ldr	r2, [r7, #0]
 801233e:	609a      	str	r2, [r3, #8]
}
 8012340:	bf00      	nop
 8012342:	370c      	adds	r7, #12
 8012344:	46bd      	mov	sp, r7
 8012346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801234a:	4770      	bx	lr

0801234c <_ZN12TestRegistry15setGroupFiltersEPK10TestFilter>:

void TestRegistry::setGroupFilters(const TestFilter* filters)
{
 801234c:	b480      	push	{r7}
 801234e:	b083      	sub	sp, #12
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
 8012354:	6039      	str	r1, [r7, #0]
    groupFilters_ = filters;
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	683a      	ldr	r2, [r7, #0]
 801235a:	60da      	str	r2, [r3, #12]
}
 801235c:	bf00      	nop
 801235e:	370c      	adds	r7, #12
 8012360:	46bd      	mov	sp, r7
 8012362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012366:	4770      	bx	lr

08012368 <_ZN12TestRegistry13setRunIgnoredEv>:

void TestRegistry::setRunIgnored()
{
 8012368:	b480      	push	{r7}
 801236a:	b083      	sub	sp, #12
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
    runIgnored_ = true;
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	2201      	movs	r2, #1
 8012374:	771a      	strb	r2, [r3, #28]
}
 8012376:	bf00      	nop
 8012378:	370c      	adds	r7, #12
 801237a:	46bd      	mov	sp, r7
 801237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012380:	4770      	bx	lr

08012382 <_ZN12TestRegistry28setRunTestsInSeperateProcessEv>:

void TestRegistry::setRunTestsInSeperateProcess()
{
 8012382:	b480      	push	{r7}
 8012384:	b083      	sub	sp, #12
 8012386:	af00      	add	r7, sp, #0
 8012388:	6078      	str	r0, [r7, #4]
    runInSeperateProcess_ = true;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	2201      	movs	r2, #1
 801238e:	751a      	strb	r2, [r3, #20]
}
 8012390:	bf00      	nop
 8012392:	370c      	adds	r7, #12
 8012394:	46bd      	mov	sp, r7
 8012396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801239a:	4770      	bx	lr

0801239c <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>:
{
    return currentRepetition_;
}

bool TestRegistry::testShouldRun(UtestShell* test, TestResult& result)
{
 801239c:	b580      	push	{r7, lr}
 801239e:	b084      	sub	sp, #16
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	60f8      	str	r0, [r7, #12]
 80123a4:	60b9      	str	r1, [r7, #8]
 80123a6:	607a      	str	r2, [r7, #4]
    if (test->shouldRun(groupFilters_, nameFilters_)) return true;
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	68d9      	ldr	r1, [r3, #12]
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	689b      	ldr	r3, [r3, #8]
 80123b0:	461a      	mov	r2, r3
 80123b2:	68b8      	ldr	r0, [r7, #8]
 80123b4:	f000 ffbb 	bl	801332e <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>
 80123b8:	4603      	mov	r3, r0
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d001      	beq.n	80123c2 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x26>
 80123be:	2301      	movs	r3, #1
 80123c0:	e006      	b.n	80123d0 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x34>
    else {
        result.countFilteredOut();
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	332c      	adds	r3, #44	; 0x2c
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	6878      	ldr	r0, [r7, #4]
 80123cc:	4798      	blx	r3
        return false;
 80123ce:	2300      	movs	r3, #0
    }
}
 80123d0:	4618      	mov	r0, r3
 80123d2:	3710      	adds	r7, #16
 80123d4:	46bd      	mov	sp, r7
 80123d6:	bd80      	pop	{r7, pc}

080123d8 <_ZN12TestRegistry12resetPluginsEv>:

void TestRegistry::resetPlugins()
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b082      	sub	sp, #8
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
    firstPlugin_ = NullTestPlugin::instance();
 80123e0:	f7ff fb62 	bl	8011aa8 <_ZN14NullTestPlugin8instanceEv>
 80123e4:	4602      	mov	r2, r0
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	611a      	str	r2, [r3, #16]
}
 80123ea:	bf00      	nop
 80123ec:	3708      	adds	r7, #8
 80123ee:	46bd      	mov	sp, r7
 80123f0:	bd80      	pop	{r7, pc}

080123f2 <_ZN12TestRegistry13installPluginEP10TestPlugin>:

void TestRegistry::installPlugin(TestPlugin* plugin)
{
 80123f2:	b580      	push	{r7, lr}
 80123f4:	b082      	sub	sp, #8
 80123f6:	af00      	add	r7, sp, #0
 80123f8:	6078      	str	r0, [r7, #4]
 80123fa:	6039      	str	r1, [r7, #0]
    firstPlugin_ = plugin->addPlugin(firstPlugin_);
 80123fc:	683b      	ldr	r3, [r7, #0]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	3324      	adds	r3, #36	; 0x24
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	687a      	ldr	r2, [r7, #4]
 8012406:	6912      	ldr	r2, [r2, #16]
 8012408:	4611      	mov	r1, r2
 801240a:	6838      	ldr	r0, [r7, #0]
 801240c:	4798      	blx	r3
 801240e:	4602      	mov	r2, r0
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	611a      	str	r2, [r3, #16]
}
 8012414:	bf00      	nop
 8012416:	3708      	adds	r7, #8
 8012418:	46bd      	mov	sp, r7
 801241a:	bd80      	pop	{r7, pc}

0801241c <_ZN12TestRegistry14getFirstPluginEv>:

TestPlugin* TestRegistry::getFirstPlugin()
{
 801241c:	b480      	push	{r7}
 801241e:	b083      	sub	sp, #12
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
    return firstPlugin_;
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	691b      	ldr	r3, [r3, #16]
}
 8012428:	4618      	mov	r0, r3
 801242a:	370c      	adds	r7, #12
 801242c:	46bd      	mov	sp, r7
 801242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012432:	4770      	bx	lr

08012434 <_ZN12TestRegistry15getPluginByNameERK12SimpleString>:

TestPlugin* TestRegistry::getPluginByName(const SimpleString& name)
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b082      	sub	sp, #8
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
 801243c:	6039      	str	r1, [r7, #0]
    return firstPlugin_->getPluginByName(name);
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	691b      	ldr	r3, [r3, #16]
 8012442:	6839      	ldr	r1, [r7, #0]
 8012444:	4618      	mov	r0, r3
 8012446:	f7ff fa52 	bl	80118ee <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 801244a:	4603      	mov	r3, r0
}
 801244c:	4618      	mov	r0, r3
 801244e:	3708      	adds	r7, #8
 8012450:	46bd      	mov	sp, r7
 8012452:	bd80      	pop	{r7, pc}

08012454 <_ZN12TestRegistry18removePluginByNameERK12SimpleString>:

void TestRegistry::removePluginByName(const SimpleString& name)
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b082      	sub	sp, #8
 8012458:	af00      	add	r7, sp, #0
 801245a:	6078      	str	r0, [r7, #4]
 801245c:	6039      	str	r1, [r7, #0]
    if (firstPlugin_->removePluginByName(name) == firstPlugin_) firstPlugin_ = firstPlugin_->getNext();
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	691a      	ldr	r2, [r3, #16]
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	691b      	ldr	r3, [r3, #16]
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	3328      	adds	r3, #40	; 0x28
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	6839      	ldr	r1, [r7, #0]
 801246e:	4610      	mov	r0, r2
 8012470:	4798      	blx	r3
 8012472:	4602      	mov	r2, r0
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	691b      	ldr	r3, [r3, #16]
 8012478:	429a      	cmp	r2, r3
 801247a:	bf0c      	ite	eq
 801247c:	2301      	moveq	r3, #1
 801247e:	2300      	movne	r3, #0
 8012480:	b2db      	uxtb	r3, r3
 8012482:	2b00      	cmp	r3, #0
 8012484:	d00b      	beq.n	801249e <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x4a>
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	691a      	ldr	r2, [r3, #16]
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	691b      	ldr	r3, [r3, #16]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	332c      	adds	r3, #44	; 0x2c
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	4610      	mov	r0, r2
 8012496:	4798      	blx	r3
 8012498:	4602      	mov	r2, r0
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	611a      	str	r2, [r3, #16]
    if (firstPlugin_->getName() == name) firstPlugin_ = firstPlugin_->getNext();
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	691b      	ldr	r3, [r3, #16]
 80124a2:	4618      	mov	r0, r3
 80124a4:	f7ff fa17 	bl	80118d6 <_ZN10TestPlugin7getNameEv>
 80124a8:	4603      	mov	r3, r0
 80124aa:	6839      	ldr	r1, [r7, #0]
 80124ac:	4618      	mov	r0, r3
 80124ae:	f7fa ffec 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 80124b2:	4603      	mov	r3, r0
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d00b      	beq.n	80124d0 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x7c>
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	691a      	ldr	r2, [r3, #16]
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	691b      	ldr	r3, [r3, #16]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	332c      	adds	r3, #44	; 0x2c
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	4610      	mov	r0, r2
 80124c8:	4798      	blx	r3
 80124ca:	4602      	mov	r2, r0
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	611a      	str	r2, [r3, #16]
    firstPlugin_->removePluginByName(name);
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	691a      	ldr	r2, [r3, #16]
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	691b      	ldr	r3, [r3, #16]
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	3328      	adds	r3, #40	; 0x28
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	6839      	ldr	r1, [r7, #0]
 80124e0:	4610      	mov	r0, r2
 80124e2:	4798      	blx	r3
}
 80124e4:	bf00      	nop
 80124e6:	3708      	adds	r7, #8
 80124e8:	46bd      	mov	sp, r7
 80124ea:	bd80      	pop	{r7, pc}

080124ec <_ZN12TestRegistry12countPluginsEv>:

int TestRegistry::countPlugins()
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b084      	sub	sp, #16
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
    int count = 0;
 80124f4:	2300      	movs	r3, #0
 80124f6:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	691b      	ldr	r3, [r3, #16]
 80124fc:	60bb      	str	r3, [r7, #8]
 80124fe:	f7ff fad3 	bl	8011aa8 <_ZN14NullTestPlugin8instanceEv>
 8012502:	4602      	mov	r2, r0
 8012504:	68bb      	ldr	r3, [r7, #8]
 8012506:	4293      	cmp	r3, r2
 8012508:	bf14      	ite	ne
 801250a:	2301      	movne	r3, #1
 801250c:	2300      	moveq	r3, #0
 801250e:	b2db      	uxtb	r3, r3
 8012510:	2b00      	cmp	r3, #0
 8012512:	d00a      	beq.n	801252a <_ZN12TestRegistry12countPluginsEv+0x3e>
        count++;
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	3301      	adds	r3, #1
 8012518:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 801251a:	68bb      	ldr	r3, [r7, #8]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	332c      	adds	r3, #44	; 0x2c
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	68b8      	ldr	r0, [r7, #8]
 8012524:	4798      	blx	r3
 8012526:	60b8      	str	r0, [r7, #8]
 8012528:	e7e9      	b.n	80124fe <_ZN12TestRegistry12countPluginsEv+0x12>
    return count;
 801252a:	68fb      	ldr	r3, [r7, #12]
}
 801252c:	4618      	mov	r0, r3
 801252e:	3710      	adds	r7, #16
 8012530:	46bd      	mov	sp, r7
 8012532:	bd80      	pop	{r7, pc}

08012534 <_ZN12TestRegistry12getFirstTestEv>:


UtestShell* TestRegistry::getFirstTest()
{
 8012534:	b480      	push	{r7}
 8012536:	b083      	sub	sp, #12
 8012538:	af00      	add	r7, sp, #0
 801253a:	6078      	str	r0, [r7, #4]
    return tests_;
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	685b      	ldr	r3, [r3, #4]
}
 8012540:	4618      	mov	r0, r3
 8012542:	370c      	adds	r7, #12
 8012544:	46bd      	mov	sp, r7
 8012546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254a:	4770      	bx	lr

0801254c <_ZN12TestRegistry12shuffleTestsEj>:

void TestRegistry::shuffleTests(size_t seed)
{
 801254c:	b580      	push	{r7, lr}
 801254e:	b084      	sub	sp, #16
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
 8012554:	6039      	str	r1, [r7, #0]
    UtestShellPointerArray array(getFirstTest());
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	334c      	adds	r3, #76	; 0x4c
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	6878      	ldr	r0, [r7, #4]
 8012560:	4798      	blx	r3
 8012562:	4602      	mov	r2, r0
 8012564:	f107 0308 	add.w	r3, r7, #8
 8012568:	4611      	mov	r1, r2
 801256a:	4618      	mov	r0, r3
 801256c:	f002 f8f8 	bl	8014760 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.shuffle(seed);
 8012570:	f107 0308 	add.w	r3, r7, #8
 8012574:	6839      	ldr	r1, [r7, #0]
 8012576:	4618      	mov	r0, r3
 8012578:	f002 f980 	bl	801487c <_ZN22UtestShellPointerArray7shuffleEj>
    tests_ = array.getFirstTest();
 801257c:	f107 0308 	add.w	r3, r7, #8
 8012580:	4618      	mov	r0, r3
 8012582:	f002 fa13 	bl	80149ac <_ZNK22UtestShellPointerArray12getFirstTestEv>
 8012586:	4602      	mov	r2, r0
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 801258c:	f107 0308 	add.w	r3, r7, #8
 8012590:	4618      	mov	r0, r3
 8012592:	f002 f939 	bl	8014808 <_ZN22UtestShellPointerArrayD1Ev>
}
 8012596:	bf00      	nop
 8012598:	3710      	adds	r7, #16
 801259a:	46bd      	mov	sp, r7
 801259c:	bd80      	pop	{r7, pc}

0801259e <_ZN12TestRegistry12reverseTestsEv>:

void TestRegistry::reverseTests()
{
 801259e:	b580      	push	{r7, lr}
 80125a0:	b084      	sub	sp, #16
 80125a2:	af00      	add	r7, sp, #0
 80125a4:	6078      	str	r0, [r7, #4]
    UtestShellPointerArray array(getFirstTest());
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	334c      	adds	r3, #76	; 0x4c
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	6878      	ldr	r0, [r7, #4]
 80125b0:	4798      	blx	r3
 80125b2:	4602      	mov	r2, r0
 80125b4:	f107 0308 	add.w	r3, r7, #8
 80125b8:	4611      	mov	r1, r2
 80125ba:	4618      	mov	r0, r3
 80125bc:	f002 f8d0 	bl	8014760 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.reverse();
 80125c0:	f107 0308 	add.w	r3, r7, #8
 80125c4:	4618      	mov	r0, r3
 80125c6:	f002 f995 	bl	80148f4 <_ZN22UtestShellPointerArray7reverseEv>
    tests_ = array.getFirstTest();
 80125ca:	f107 0308 	add.w	r3, r7, #8
 80125ce:	4618      	mov	r0, r3
 80125d0:	f002 f9ec 	bl	80149ac <_ZNK22UtestShellPointerArray12getFirstTestEv>
 80125d4:	4602      	mov	r2, r0
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 80125da:	f107 0308 	add.w	r3, r7, #8
 80125de:	4618      	mov	r0, r3
 80125e0:	f002 f912 	bl	8014808 <_ZN22UtestShellPointerArrayD1Ev>
}
 80125e4:	bf00      	nop
 80125e6:	3710      	adds	r7, #16
 80125e8:	46bd      	mov	sp, r7
 80125ea:	bd80      	pop	{r7, pc}

080125ec <_ZN12TestRegistry15getTestWithNextEP10UtestShell>:

UtestShell* TestRegistry::getTestWithNext(UtestShell* test)
{
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b084      	sub	sp, #16
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	6078      	str	r0, [r7, #4]
 80125f4:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	685b      	ldr	r3, [r3, #4]
 80125fa:	60fb      	str	r3, [r7, #12]
    while (current && current->getNext() != test)
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d00b      	beq.n	801261a <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	330c      	adds	r3, #12
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	68f8      	ldr	r0, [r7, #12]
 801260c:	4798      	blx	r3
 801260e:	4602      	mov	r2, r0
 8012610:	683b      	ldr	r3, [r7, #0]
 8012612:	4293      	cmp	r3, r2
 8012614:	d001      	beq.n	801261a <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 8012616:	2301      	movs	r3, #1
 8012618:	e000      	b.n	801261c <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x30>
 801261a:	2300      	movs	r3, #0
 801261c:	2b00      	cmp	r3, #0
 801261e:	d007      	beq.n	8012630 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x44>
        current = current->getNext();
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	330c      	adds	r3, #12
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	68f8      	ldr	r0, [r7, #12]
 801262a:	4798      	blx	r3
 801262c:	60f8      	str	r0, [r7, #12]
    while (current && current->getNext() != test)
 801262e:	e7e5      	b.n	80125fc <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x10>
    return current;
 8012630:	68fb      	ldr	r3, [r7, #12]
}
 8012632:	4618      	mov	r0, r3
 8012634:	3710      	adds	r7, #16
 8012636:	46bd      	mov	sp, r7
 8012638:	bd80      	pop	{r7, pc}

0801263a <_ZN12TestRegistry16findTestWithNameERK12SimpleString>:

UtestShell* TestRegistry::findTestWithName(const SimpleString& name)
{
 801263a:	b590      	push	{r4, r7, lr}
 801263c:	b087      	sub	sp, #28
 801263e:	af00      	add	r7, sp, #0
 8012640:	6078      	str	r0, [r7, #4]
 8012642:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	685b      	ldr	r3, [r3, #4]
 8012648:	617b      	str	r3, [r7, #20]
    while (current) {
 801264a:	697b      	ldr	r3, [r7, #20]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d01e      	beq.n	801268e <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x54>
        if (current->getName() == name)
 8012650:	f107 030c 	add.w	r3, r7, #12
 8012654:	6979      	ldr	r1, [r7, #20]
 8012656:	4618      	mov	r0, r3
 8012658:	f000 fd4e 	bl	80130f8 <_ZNK10UtestShell7getNameEv>
 801265c:	f107 030c 	add.w	r3, r7, #12
 8012660:	6839      	ldr	r1, [r7, #0]
 8012662:	4618      	mov	r0, r3
 8012664:	f7fa ff11 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 8012668:	4603      	mov	r3, r0
 801266a:	461c      	mov	r4, r3
 801266c:	f107 030c 	add.w	r3, r7, #12
 8012670:	4618      	mov	r0, r3
 8012672:	f7fa fefe 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8012676:	2c00      	cmp	r4, #0
 8012678:	d001      	beq.n	801267e <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x44>
            return current;
 801267a:	697b      	ldr	r3, [r7, #20]
 801267c:	e008      	b.n	8012690 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x56>
        current = current->getNext();
 801267e:	697b      	ldr	r3, [r7, #20]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	330c      	adds	r3, #12
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	6978      	ldr	r0, [r7, #20]
 8012688:	4798      	blx	r3
 801268a:	6178      	str	r0, [r7, #20]
    while (current) {
 801268c:	e7dd      	b.n	801264a <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x10>
    }
    return NULLPTR;
 801268e:	2300      	movs	r3, #0
}
 8012690:	4618      	mov	r0, r3
 8012692:	371c      	adds	r7, #28
 8012694:	46bd      	mov	sp, r7
 8012696:	bd90      	pop	{r4, r7, pc}

08012698 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString>:

UtestShell* TestRegistry::findTestWithGroup(const SimpleString& group)
{
 8012698:	b590      	push	{r4, r7, lr}
 801269a:	b087      	sub	sp, #28
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
 80126a0:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	685b      	ldr	r3, [r3, #4]
 80126a6:	617b      	str	r3, [r7, #20]
    while (current) {
 80126a8:	697b      	ldr	r3, [r7, #20]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d01e      	beq.n	80126ec <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x54>
        if (current->getGroup() == group)
 80126ae:	f107 030c 	add.w	r3, r7, #12
 80126b2:	6979      	ldr	r1, [r7, #20]
 80126b4:	4618      	mov	r0, r3
 80126b6:	f000 fd2e 	bl	8013116 <_ZNK10UtestShell8getGroupEv>
 80126ba:	f107 030c 	add.w	r3, r7, #12
 80126be:	6839      	ldr	r1, [r7, #0]
 80126c0:	4618      	mov	r0, r3
 80126c2:	f7fa fee2 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 80126c6:	4603      	mov	r3, r0
 80126c8:	461c      	mov	r4, r3
 80126ca:	f107 030c 	add.w	r3, r7, #12
 80126ce:	4618      	mov	r0, r3
 80126d0:	f7fa fecf 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80126d4:	2c00      	cmp	r4, #0
 80126d6:	d001      	beq.n	80126dc <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x44>
            return current;
 80126d8:	697b      	ldr	r3, [r7, #20]
 80126da:	e008      	b.n	80126ee <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x56>
        current = current->getNext();
 80126dc:	697b      	ldr	r3, [r7, #20]
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	330c      	adds	r3, #12
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	6978      	ldr	r0, [r7, #20]
 80126e6:	4798      	blx	r3
 80126e8:	6178      	str	r0, [r7, #20]
    while (current) {
 80126ea:	e7dd      	b.n	80126a8 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x10>
    }
    return NULLPTR;
 80126ec:	2300      	movs	r3, #0
}
 80126ee:	4618      	mov	r0, r3
 80126f0:	371c      	adds	r7, #28
 80126f2:	46bd      	mov	sp, r7
 80126f4:	bd90      	pop	{r4, r7, pc}
	...

080126f8 <_ZN10TestResultC1ER10TestOutput>:
#include "CppUTest/TestResult.h"
#include "CppUTest/TestFailure.h"
#include "CppUTest/TestOutput.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestResult::TestResult(TestOutput& p) :
 80126f8:	b480      	push	{r7}
 80126fa:	b083      	sub	sp, #12
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
 8012700:	6039      	str	r1, [r7, #0]
    output_(p), testCount_(0), runCount_(0), checkCount_(0), failureCount_(0), filteredOutCount_(0), ignoredCount_(0), totalExecutionTime_(0), timeStarted_(0), currentTestTimeStarted_(0),
            currentTestTotalExecutionTime_(0), currentGroupTimeStarted_(0), currentGroupTotalExecutionTime_(0)
 8012702:	4a18      	ldr	r2, [pc, #96]	; (8012764 <_ZN10TestResultC1ER10TestOutput+0x6c>)
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	601a      	str	r2, [r3, #0]
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	683a      	ldr	r2, [r7, #0]
 801270c:	605a      	str	r2, [r3, #4]
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	2200      	movs	r2, #0
 8012712:	609a      	str	r2, [r3, #8]
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	2200      	movs	r2, #0
 8012718:	60da      	str	r2, [r3, #12]
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	2200      	movs	r2, #0
 801271e:	611a      	str	r2, [r3, #16]
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	2200      	movs	r2, #0
 8012724:	615a      	str	r2, [r3, #20]
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	2200      	movs	r2, #0
 801272a:	619a      	str	r2, [r3, #24]
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	2200      	movs	r2, #0
 8012730:	61da      	str	r2, [r3, #28]
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	2200      	movs	r2, #0
 8012736:	621a      	str	r2, [r3, #32]
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	2200      	movs	r2, #0
 801273c:	625a      	str	r2, [r3, #36]	; 0x24
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	2200      	movs	r2, #0
 8012742:	629a      	str	r2, [r3, #40]	; 0x28
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	2200      	movs	r2, #0
 8012748:	62da      	str	r2, [r3, #44]	; 0x2c
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	2200      	movs	r2, #0
 801274e:	631a      	str	r2, [r3, #48]	; 0x30
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	2200      	movs	r2, #0
 8012754:	635a      	str	r2, [r3, #52]	; 0x34
{
}
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	4618      	mov	r0, r3
 801275a:	370c      	adds	r7, #12
 801275c:	46bd      	mov	sp, r7
 801275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012762:	4770      	bx	lr
 8012764:	08028978 	.word	0x08028978

08012768 <_ZN10TestResultD1Ev>:

TestResult::~TestResult()
 8012768:	b480      	push	{r7}
 801276a:	b083      	sub	sp, #12
 801276c:	af00      	add	r7, sp, #0
 801276e:	6078      	str	r0, [r7, #4]
 8012770:	4a04      	ldr	r2, [pc, #16]	; (8012784 <_ZN10TestResultD1Ev+0x1c>)
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	601a      	str	r2, [r3, #0]
{
}
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	4618      	mov	r0, r3
 801277a:	370c      	adds	r7, #12
 801277c:	46bd      	mov	sp, r7
 801277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012782:	4770      	bx	lr
 8012784:	08028978 	.word	0x08028978

08012788 <_ZN10TestResultD0Ev>:
TestResult::~TestResult()
 8012788:	b580      	push	{r7, lr}
 801278a:	b082      	sub	sp, #8
 801278c:	af00      	add	r7, sp, #0
 801278e:	6078      	str	r0, [r7, #4]
}
 8012790:	6878      	ldr	r0, [r7, #4]
 8012792:	f7ff ffe9 	bl	8012768 <_ZN10TestResultD1Ev>
 8012796:	2138      	movs	r1, #56	; 0x38
 8012798:	6878      	ldr	r0, [r7, #4]
 801279a:	f7f7 ff03 	bl	800a5a4 <_ZdlPvj>
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	4618      	mov	r0, r3
 80127a2:	3708      	adds	r7, #8
 80127a4:	46bd      	mov	sp, r7
 80127a6:	bd80      	pop	{r7, pc}

080127a8 <_ZN10TestResult19currentGroupStartedEP10UtestShell>:

void TestResult::currentGroupStarted(UtestShell* test)
{
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b082      	sub	sp, #8
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
 80127b0:	6039      	str	r1, [r7, #0]
    output_.printCurrentGroupStarted(*test);
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	685a      	ldr	r2, [r3, #4]
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	685b      	ldr	r3, [r3, #4]
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	3318      	adds	r3, #24
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	6839      	ldr	r1, [r7, #0]
 80127c2:	4610      	mov	r0, r2
 80127c4:	4798      	blx	r3
    currentGroupTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 80127c6:	4b05      	ldr	r3, [pc, #20]	; (80127dc <_ZN10TestResult19currentGroupStartedEP10UtestShell+0x34>)
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	4798      	blx	r3
 80127cc:	4603      	mov	r3, r0
 80127ce:	461a      	mov	r2, r3
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80127d4:	bf00      	nop
 80127d6:	3708      	adds	r7, #8
 80127d8:	46bd      	mov	sp, r7
 80127da:	bd80      	pop	{r7, pc}
 80127dc:	200000a8 	.word	0x200000a8

080127e0 <_ZN10TestResult17currentGroupEndedEP10UtestShell>:

void TestResult::currentGroupEnded(UtestShell* /*test*/)
{
 80127e0:	b580      	push	{r7, lr}
 80127e2:	b082      	sub	sp, #8
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	6078      	str	r0, [r7, #4]
 80127e8:	6039      	str	r1, [r7, #0]
    currentGroupTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentGroupTimeStarted_;
 80127ea:	4b0c      	ldr	r3, [pc, #48]	; (801281c <_ZN10TestResult17currentGroupEndedEP10UtestShell+0x3c>)
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	4798      	blx	r3
 80127f0:	4603      	mov	r3, r0
 80127f2:	461a      	mov	r2, r3
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127f8:	1ad2      	subs	r2, r2, r3
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	635a      	str	r2, [r3, #52]	; 0x34
    output_.printCurrentGroupEnded(*this);
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	685a      	ldr	r2, [r3, #4]
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	685b      	ldr	r3, [r3, #4]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	331c      	adds	r3, #28
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	6879      	ldr	r1, [r7, #4]
 801280e:	4610      	mov	r0, r2
 8012810:	4798      	blx	r3
}
 8012812:	bf00      	nop
 8012814:	3708      	adds	r7, #8
 8012816:	46bd      	mov	sp, r7
 8012818:	bd80      	pop	{r7, pc}
 801281a:	bf00      	nop
 801281c:	200000a8 	.word	0x200000a8

08012820 <_ZN10TestResult18currentTestStartedEP10UtestShell>:

void TestResult::currentTestStarted(UtestShell* test)
{
 8012820:	b580      	push	{r7, lr}
 8012822:	b082      	sub	sp, #8
 8012824:	af00      	add	r7, sp, #0
 8012826:	6078      	str	r0, [r7, #4]
 8012828:	6039      	str	r1, [r7, #0]
    output_.printCurrentTestStarted(*test);
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	685a      	ldr	r2, [r3, #4]
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	685b      	ldr	r3, [r3, #4]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	3310      	adds	r3, #16
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	6839      	ldr	r1, [r7, #0]
 801283a:	4610      	mov	r0, r2
 801283c:	4798      	blx	r3
    currentTestTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 801283e:	4b05      	ldr	r3, [pc, #20]	; (8012854 <_ZN10TestResult18currentTestStartedEP10UtestShell+0x34>)
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	4798      	blx	r3
 8012844:	4603      	mov	r3, r0
 8012846:	461a      	mov	r2, r3
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	629a      	str	r2, [r3, #40]	; 0x28
}
 801284c:	bf00      	nop
 801284e:	3708      	adds	r7, #8
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}
 8012854:	200000a8 	.word	0x200000a8

08012858 <_ZN10TestResult5printEPKc>:

void TestResult::print(const char* text)
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b082      	sub	sp, #8
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
 8012860:	6039      	str	r1, [r7, #0]
    output_.print(text);
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	685a      	ldr	r2, [r3, #4]
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	685b      	ldr	r3, [r3, #4]
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	332c      	adds	r3, #44	; 0x2c
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	6839      	ldr	r1, [r7, #0]
 8012872:	4610      	mov	r0, r2
 8012874:	4798      	blx	r3
}
 8012876:	bf00      	nop
 8012878:	3708      	adds	r7, #8
 801287a:	46bd      	mov	sp, r7
 801287c:	bd80      	pop	{r7, pc}

0801287e <_ZN10TestResult16printVeryVerboseEPKc>:

void TestResult::printVeryVerbose(const char* text)
{
 801287e:	b580      	push	{r7, lr}
 8012880:	b082      	sub	sp, #8
 8012882:	af00      	add	r7, sp, #0
 8012884:	6078      	str	r0, [r7, #4]
 8012886:	6039      	str	r1, [r7, #0]
    output_.printVeryVerbose(text);
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	685a      	ldr	r2, [r3, #4]
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	685b      	ldr	r3, [r3, #4]
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	3348      	adds	r3, #72	; 0x48
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	6839      	ldr	r1, [r7, #0]
 8012898:	4610      	mov	r0, r2
 801289a:	4798      	blx	r3
}
 801289c:	bf00      	nop
 801289e:	3708      	adds	r7, #8
 80128a0:	46bd      	mov	sp, r7
 80128a2:	bd80      	pop	{r7, pc}

080128a4 <_ZN10TestResult16currentTestEndedEP10UtestShell>:

void TestResult::currentTestEnded(UtestShell* /*test*/)
{
 80128a4:	b580      	push	{r7, lr}
 80128a6:	b082      	sub	sp, #8
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	6078      	str	r0, [r7, #4]
 80128ac:	6039      	str	r1, [r7, #0]
    currentTestTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentTestTimeStarted_;
 80128ae:	4b0c      	ldr	r3, [pc, #48]	; (80128e0 <_ZN10TestResult16currentTestEndedEP10UtestShell+0x3c>)
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	4798      	blx	r3
 80128b4:	4603      	mov	r3, r0
 80128b6:	461a      	mov	r2, r3
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128bc:	1ad2      	subs	r2, r2, r3
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	62da      	str	r2, [r3, #44]	; 0x2c
    output_.printCurrentTestEnded(*this);
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	685a      	ldr	r2, [r3, #4]
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	685b      	ldr	r3, [r3, #4]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	3314      	adds	r3, #20
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	6879      	ldr	r1, [r7, #4]
 80128d2:	4610      	mov	r0, r2
 80128d4:	4798      	blx	r3

}
 80128d6:	bf00      	nop
 80128d8:	3708      	adds	r7, #8
 80128da:	46bd      	mov	sp, r7
 80128dc:	bd80      	pop	{r7, pc}
 80128de:	bf00      	nop
 80128e0:	200000a8 	.word	0x200000a8

080128e4 <_ZN10TestResult10addFailureERK11TestFailure>:

void TestResult::addFailure(const TestFailure& failure)
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b082      	sub	sp, #8
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
 80128ec:	6039      	str	r1, [r7, #0]
    output_.printFailure(failure);
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	685a      	ldr	r2, [r3, #4]
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	685b      	ldr	r3, [r3, #4]
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	333c      	adds	r3, #60	; 0x3c
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	6839      	ldr	r1, [r7, #0]
 80128fe:	4610      	mov	r0, r2
 8012900:	4798      	blx	r3
    failureCount_++;
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	695b      	ldr	r3, [r3, #20]
 8012906:	1c5a      	adds	r2, r3, #1
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	615a      	str	r2, [r3, #20]
}
 801290c:	bf00      	nop
 801290e:	3708      	adds	r7, #8
 8012910:	46bd      	mov	sp, r7
 8012912:	bd80      	pop	{r7, pc}

08012914 <_ZN10TestResult9countTestEv>:

void TestResult::countTest()
{
 8012914:	b480      	push	{r7}
 8012916:	b083      	sub	sp, #12
 8012918:	af00      	add	r7, sp, #0
 801291a:	6078      	str	r0, [r7, #4]
    testCount_++;
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	689b      	ldr	r3, [r3, #8]
 8012920:	1c5a      	adds	r2, r3, #1
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	609a      	str	r2, [r3, #8]
}
 8012926:	bf00      	nop
 8012928:	370c      	adds	r7, #12
 801292a:	46bd      	mov	sp, r7
 801292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012930:	4770      	bx	lr

08012932 <_ZN10TestResult8countRunEv>:

void TestResult::countRun()
{
 8012932:	b480      	push	{r7}
 8012934:	b083      	sub	sp, #12
 8012936:	af00      	add	r7, sp, #0
 8012938:	6078      	str	r0, [r7, #4]
    runCount_++;
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	68db      	ldr	r3, [r3, #12]
 801293e:	1c5a      	adds	r2, r3, #1
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	60da      	str	r2, [r3, #12]
}
 8012944:	bf00      	nop
 8012946:	370c      	adds	r7, #12
 8012948:	46bd      	mov	sp, r7
 801294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294e:	4770      	bx	lr

08012950 <_ZN10TestResult10countCheckEv>:

void TestResult::countCheck()
{
 8012950:	b480      	push	{r7}
 8012952:	b083      	sub	sp, #12
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
    checkCount_++;
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	691b      	ldr	r3, [r3, #16]
 801295c:	1c5a      	adds	r2, r3, #1
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	611a      	str	r2, [r3, #16]
}
 8012962:	bf00      	nop
 8012964:	370c      	adds	r7, #12
 8012966:	46bd      	mov	sp, r7
 8012968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801296c:	4770      	bx	lr

0801296e <_ZN10TestResult16countFilteredOutEv>:

void TestResult::countFilteredOut()
{
 801296e:	b480      	push	{r7}
 8012970:	b083      	sub	sp, #12
 8012972:	af00      	add	r7, sp, #0
 8012974:	6078      	str	r0, [r7, #4]
    filteredOutCount_++;
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	699b      	ldr	r3, [r3, #24]
 801297a:	1c5a      	adds	r2, r3, #1
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	619a      	str	r2, [r3, #24]
}
 8012980:	bf00      	nop
 8012982:	370c      	adds	r7, #12
 8012984:	46bd      	mov	sp, r7
 8012986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801298a:	4770      	bx	lr

0801298c <_ZN10TestResult12countIgnoredEv>:

void TestResult::countIgnored()
{
 801298c:	b480      	push	{r7}
 801298e:	b083      	sub	sp, #12
 8012990:	af00      	add	r7, sp, #0
 8012992:	6078      	str	r0, [r7, #4]
    ignoredCount_++;
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	69db      	ldr	r3, [r3, #28]
 8012998:	1c5a      	adds	r2, r3, #1
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	61da      	str	r2, [r3, #28]
}
 801299e:	bf00      	nop
 80129a0:	370c      	adds	r7, #12
 80129a2:	46bd      	mov	sp, r7
 80129a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a8:	4770      	bx	lr
	...

080129ac <_ZN10TestResult12testsStartedEv>:

void TestResult::testsStarted()
{
 80129ac:	b580      	push	{r7, lr}
 80129ae:	b082      	sub	sp, #8
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	6078      	str	r0, [r7, #4]
    timeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 80129b4:	4b09      	ldr	r3, [pc, #36]	; (80129dc <_ZN10TestResult12testsStartedEv+0x30>)
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	4798      	blx	r3
 80129ba:	4603      	mov	r3, r0
 80129bc:	461a      	mov	r2, r3
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	625a      	str	r2, [r3, #36]	; 0x24
    output_.printTestsStarted();
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	685a      	ldr	r2, [r3, #4]
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	685b      	ldr	r3, [r3, #4]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	3308      	adds	r3, #8
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	4610      	mov	r0, r2
 80129d2:	4798      	blx	r3
}
 80129d4:	bf00      	nop
 80129d6:	3708      	adds	r7, #8
 80129d8:	46bd      	mov	sp, r7
 80129da:	bd80      	pop	{r7, pc}
 80129dc:	200000a8 	.word	0x200000a8

080129e0 <_ZN10TestResult10testsEndedEv>:

void TestResult::testsEnded()
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b084      	sub	sp, #16
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
    size_t timeEnded = (size_t) GetPlatformSpecificTimeInMillis();
 80129e8:	4b0c      	ldr	r3, [pc, #48]	; (8012a1c <_ZN10TestResult10testsEndedEv+0x3c>)
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	4798      	blx	r3
 80129ee:	4603      	mov	r3, r0
 80129f0:	60fb      	str	r3, [r7, #12]
    totalExecutionTime_ = timeEnded - timeStarted_;
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129f6:	68fa      	ldr	r2, [r7, #12]
 80129f8:	1ad2      	subs	r2, r2, r3
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	621a      	str	r2, [r3, #32]
    output_.printTestsEnded(*this);
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	685a      	ldr	r2, [r3, #4]
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	685b      	ldr	r3, [r3, #4]
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	330c      	adds	r3, #12
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	6879      	ldr	r1, [r7, #4]
 8012a0e:	4610      	mov	r0, r2
 8012a10:	4798      	blx	r3
}
 8012a12:	bf00      	nop
 8012a14:	3710      	adds	r7, #16
 8012a16:	46bd      	mov	sp, r7
 8012a18:	bd80      	pop	{r7, pc}
 8012a1a:	bf00      	nop
 8012a1c:	200000a8 	.word	0x200000a8

08012a20 <_ZNK10TestResult21getTotalExecutionTimeEv>:

size_t TestResult::getTotalExecutionTime() const
{
 8012a20:	b480      	push	{r7}
 8012a22:	b083      	sub	sp, #12
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
    return totalExecutionTime_;
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	6a1b      	ldr	r3, [r3, #32]
}
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	370c      	adds	r7, #12
 8012a30:	46bd      	mov	sp, r7
 8012a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a36:	4770      	bx	lr

08012a38 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>:
{
    totalExecutionTime_ = exTime;
}

size_t TestResult::getCurrentTestTotalExecutionTime() const
{
 8012a38:	b480      	push	{r7}
 8012a3a:	b083      	sub	sp, #12
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	6078      	str	r0, [r7, #4]
    return currentTestTotalExecutionTime_;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8012a44:	4618      	mov	r0, r3
 8012a46:	370c      	adds	r7, #12
 8012a48:	46bd      	mov	sp, r7
 8012a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a4e:	4770      	bx	lr

08012a50 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>:

size_t TestResult::getCurrentGroupTotalExecutionTime() const
{
 8012a50:	b480      	push	{r7}
 8012a52:	b083      	sub	sp, #12
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	6078      	str	r0, [r7, #4]
    return currentGroupTotalExecutionTime_;
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	370c      	adds	r7, #12
 8012a60:	46bd      	mov	sp, r7
 8012a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a66:	4770      	bx	lr

08012a68 <_Z13doubles_equalddd>:
#if defined(__GNUC__) && __GNUC__ >= 11
# define NEEDS_DISABLE_NULL_WARNING
#endif /* GCC >= 11 */

bool doubles_equal(double d1, double d2, double threshold)
{
 8012a68:	b590      	push	{r4, r7, lr}
 8012a6a:	b087      	sub	sp, #28
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	ed87 0b04 	vstr	d0, [r7, #16]
 8012a72:	ed87 1b02 	vstr	d1, [r7, #8]
 8012a76:	ed87 2b00 	vstr	d2, [r7]
    if (PlatformSpecificIsNan(d1) || PlatformSpecificIsNan(d2) || PlatformSpecificIsNan(threshold))
 8012a7a:	4b2c      	ldr	r3, [pc, #176]	; (8012b2c <_Z13doubles_equalddd+0xc4>)
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	ed97 0b04 	vldr	d0, [r7, #16]
 8012a82:	4798      	blx	r3
 8012a84:	4603      	mov	r3, r0
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d10f      	bne.n	8012aaa <_Z13doubles_equalddd+0x42>
 8012a8a:	4b28      	ldr	r3, [pc, #160]	; (8012b2c <_Z13doubles_equalddd+0xc4>)
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	ed97 0b02 	vldr	d0, [r7, #8]
 8012a92:	4798      	blx	r3
 8012a94:	4603      	mov	r3, r0
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d107      	bne.n	8012aaa <_Z13doubles_equalddd+0x42>
 8012a9a:	4b24      	ldr	r3, [pc, #144]	; (8012b2c <_Z13doubles_equalddd+0xc4>)
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	ed97 0b00 	vldr	d0, [r7]
 8012aa2:	4798      	blx	r3
 8012aa4:	4603      	mov	r3, r0
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d001      	beq.n	8012aae <_Z13doubles_equalddd+0x46>
 8012aaa:	2301      	movs	r3, #1
 8012aac:	e000      	b.n	8012ab0 <_Z13doubles_equalddd+0x48>
 8012aae:	2300      	movs	r3, #0
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d001      	beq.n	8012ab8 <_Z13doubles_equalddd+0x50>
        return false;
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	e035      	b.n	8012b24 <_Z13doubles_equalddd+0xbc>

    if (PlatformSpecificIsInf(d1) && PlatformSpecificIsInf(d2))
 8012ab8:	4b1d      	ldr	r3, [pc, #116]	; (8012b30 <_Z13doubles_equalddd+0xc8>)
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	ed97 0b04 	vldr	d0, [r7, #16]
 8012ac0:	4798      	blx	r3
 8012ac2:	4603      	mov	r3, r0
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d009      	beq.n	8012adc <_Z13doubles_equalddd+0x74>
 8012ac8:	4b19      	ldr	r3, [pc, #100]	; (8012b30 <_Z13doubles_equalddd+0xc8>)
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	ed97 0b02 	vldr	d0, [r7, #8]
 8012ad0:	4798      	blx	r3
 8012ad2:	4603      	mov	r3, r0
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d001      	beq.n	8012adc <_Z13doubles_equalddd+0x74>
 8012ad8:	2301      	movs	r3, #1
 8012ada:	e000      	b.n	8012ade <_Z13doubles_equalddd+0x76>
 8012adc:	2300      	movs	r3, #0
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d001      	beq.n	8012ae6 <_Z13doubles_equalddd+0x7e>
    {
        return true;
 8012ae2:	2301      	movs	r3, #1
 8012ae4:	e01e      	b.n	8012b24 <_Z13doubles_equalddd+0xbc>
    }

    return PlatformSpecificFabs(d1 - d2) <= threshold;
 8012ae6:	4b13      	ldr	r3, [pc, #76]	; (8012b34 <_Z13doubles_equalddd+0xcc>)
 8012ae8:	681c      	ldr	r4, [r3, #0]
 8012aea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012aee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8012af2:	f7ed fc09 	bl	8000308 <__aeabi_dsub>
 8012af6:	4602      	mov	r2, r0
 8012af8:	460b      	mov	r3, r1
 8012afa:	ec43 2b17 	vmov	d7, r2, r3
 8012afe:	eeb0 0a47 	vmov.f32	s0, s14
 8012b02:	eef0 0a67 	vmov.f32	s1, s15
 8012b06:	47a0      	blx	r4
 8012b08:	ec53 2b10 	vmov	r2, r3, d0
 8012b0c:	2101      	movs	r1, #1
 8012b0e:	460c      	mov	r4, r1
 8012b10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012b14:	f7ed fe24 	bl	8000760 <__aeabi_dcmpge>
 8012b18:	4603      	mov	r3, r0
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d101      	bne.n	8012b22 <_Z13doubles_equalddd+0xba>
 8012b1e:	2300      	movs	r3, #0
 8012b20:	461c      	mov	r4, r3
 8012b22:	b2e3      	uxtb	r3, r4
}
 8012b24:	4618      	mov	r0, r3
 8012b26:	371c      	adds	r7, #28
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	bd90      	pop	{r4, r7, pc}
 8012b2c:	200000e8 	.word	0x200000e8
 8012b30:	200000ec 	.word	0x200000ec
 8012b34:	200000dc 	.word	0x200000dc

08012b38 <_ZN22OutsideTestRunnerUTest13getTestResultEv>:
 */
class OutsideTestRunnerUTest: public UtestShell
{
public:
    static OutsideTestRunnerUTest& instance();
    virtual TestResult& getTestResult()
 8012b38:	b480      	push	{r7}
 8012b3a:	b083      	sub	sp, #12
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	6078      	str	r0, [r7, #4]
    {
        return defaultTestResult;
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	332c      	adds	r3, #44	; 0x2c
    }
 8012b44:	4618      	mov	r0, r3
 8012b46:	370c      	adds	r7, #12
 8012b48:	46bd      	mov	sp, r7
 8012b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b4e:	4770      	bx	lr

08012b50 <_ZN22OutsideTestRunnerUTestD1Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b082      	sub	sp, #8
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
    {
 8012b58:	4a0a      	ldr	r2, [pc, #40]	; (8012b84 <_ZN22OutsideTestRunnerUTestD1Ev+0x34>)
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	601a      	str	r2, [r3, #0]
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	332c      	adds	r3, #44	; 0x2c
 8012b62:	4618      	mov	r0, r3
 8012b64:	f7ff fe00 	bl	8012768 <_ZN10TestResultD1Ev>
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	331c      	adds	r3, #28
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	f7f6 f815 	bl	8008b9c <_ZN17ConsoleTestOutputD1Ev>
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	4618      	mov	r0, r3
 8012b76:	f000 f943 	bl	8012e00 <_ZN10UtestShellD1Ev>
    }
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	3708      	adds	r7, #8
 8012b80:	46bd      	mov	sp, r7
 8012b82:	bd80      	pop	{r7, pc}
 8012b84:	080289c0 	.word	0x080289c0

08012b88 <_ZN22OutsideTestRunnerUTestD0Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	b082      	sub	sp, #8
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	6078      	str	r0, [r7, #4]
    }
 8012b90:	6878      	ldr	r0, [r7, #4]
 8012b92:	f7ff ffdd 	bl	8012b50 <_ZN22OutsideTestRunnerUTestD1Ev>
 8012b96:	2164      	movs	r1, #100	; 0x64
 8012b98:	6878      	ldr	r0, [r7, #4]
 8012b9a:	f7f7 fd03 	bl	800a5a4 <_ZdlPvj>
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	3708      	adds	r7, #8
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	bd80      	pop	{r7, pc}

08012ba8 <_ZN22OutsideTestRunnerUTestC1Ev>:
private:
    OutsideTestRunnerUTest() :
 8012ba8:	b580      	push	{r7, lr}
 8012baa:	b084      	sub	sp, #16
 8012bac:	af02      	add	r7, sp, #8
 8012bae:	6078      	str	r0, [r7, #4]
        UtestShell("\n\t NOTE: Assertion happened without being in a test run (perhaps in main?)", "\n\t       Something is very wrong. Check this assertion and fix", "unknown file", 0),
                defaultTestResult(defaultOutput)
 8012bb0:	6878      	ldr	r0, [r7, #4]
 8012bb2:	2300      	movs	r3, #0
 8012bb4:	9300      	str	r3, [sp, #0]
 8012bb6:	4b0d      	ldr	r3, [pc, #52]	; (8012bec <_ZN22OutsideTestRunnerUTestC1Ev+0x44>)
 8012bb8:	4a0d      	ldr	r2, [pc, #52]	; (8012bf0 <_ZN22OutsideTestRunnerUTestC1Ev+0x48>)
 8012bba:	490e      	ldr	r1, [pc, #56]	; (8012bf4 <_ZN22OutsideTestRunnerUTestC1Ev+0x4c>)
 8012bbc:	f000 f8f8 	bl	8012db0 <_ZN10UtestShellC1EPKcS1_S1_j>
 8012bc0:	4a0d      	ldr	r2, [pc, #52]	; (8012bf8 <_ZN22OutsideTestRunnerUTestC1Ev+0x50>)
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	601a      	str	r2, [r3, #0]
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	331c      	adds	r3, #28
 8012bca:	4618      	mov	r0, r3
 8012bcc:	f7f5 ffd4 	bl	8008b78 <_ZN17ConsoleTestOutputC1Ev>
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	331c      	adds	r3, #28
 8012bda:	4619      	mov	r1, r3
 8012bdc:	4610      	mov	r0, r2
 8012bde:	f7ff fd8b 	bl	80126f8 <_ZN10TestResultC1ER10TestOutput>
    {
    }
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	4618      	mov	r0, r3
 8012be6:	3708      	adds	r7, #8
 8012be8:	46bd      	mov	sp, r7
 8012bea:	bd80      	pop	{r7, pc}
 8012bec:	08024f94 	.word	0x08024f94
 8012bf0:	08024fa4 	.word	0x08024fa4
 8012bf4:	08024fe4 	.word	0x08024fe4
 8012bf8:	080289c0 	.word	0x080289c0

08012bfc <__tcf_0>:
    TestResult defaultTestResult;
};

OutsideTestRunnerUTest& OutsideTestRunnerUTest::instance()
{
    static OutsideTestRunnerUTest instance_;
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	af00      	add	r7, sp, #0
 8012c00:	4801      	ldr	r0, [pc, #4]	; (8012c08 <__tcf_0+0xc>)
 8012c02:	f7ff ffa5 	bl	8012b50 <_ZN22OutsideTestRunnerUTestD1Ev>
 8012c06:	bd80      	pop	{r7, pc}
 8012c08:	20000a54 	.word	0x20000a54

08012c0c <_ZN22OutsideTestRunnerUTest8instanceEv>:
{
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	af00      	add	r7, sp, #0
    static OutsideTestRunnerUTest instance_;
 8012c10:	4b12      	ldr	r3, [pc, #72]	; (8012c5c <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8012c12:	781b      	ldrb	r3, [r3, #0]
 8012c14:	f3bf 8f5b 	dmb	ish
 8012c18:	b2db      	uxtb	r3, r3
 8012c1a:	f003 0301 	and.w	r3, r3, #1
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	bf0c      	ite	eq
 8012c22:	2301      	moveq	r3, #1
 8012c24:	2300      	movne	r3, #0
 8012c26:	b2db      	uxtb	r3, r3
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d013      	beq.n	8012c54 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 8012c2c:	480b      	ldr	r0, [pc, #44]	; (8012c5c <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8012c2e:	f00c ff27 	bl	801fa80 <__cxa_guard_acquire>
 8012c32:	4603      	mov	r3, r0
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	bf14      	ite	ne
 8012c38:	2301      	movne	r3, #1
 8012c3a:	2300      	moveq	r3, #0
 8012c3c:	b2db      	uxtb	r3, r3
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d008      	beq.n	8012c54 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 8012c42:	4807      	ldr	r0, [pc, #28]	; (8012c60 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
 8012c44:	f7ff ffb0 	bl	8012ba8 <_ZN22OutsideTestRunnerUTestC1Ev>
 8012c48:	4804      	ldr	r0, [pc, #16]	; (8012c5c <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8012c4a:	f00c ff25 	bl	801fa98 <__cxa_guard_release>
 8012c4e:	4805      	ldr	r0, [pc, #20]	; (8012c64 <_ZN22OutsideTestRunnerUTest8instanceEv+0x58>)
 8012c50:	f00c ff49 	bl	801fae6 <atexit>
    return instance_;
 8012c54:	4b02      	ldr	r3, [pc, #8]	; (8012c60 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
}
 8012c56:	4618      	mov	r0, r3
 8012c58:	bd80      	pop	{r7, pc}
 8012c5a:	bf00      	nop
 8012c5c:	20000ab8 	.word	0x20000ab8
 8012c60:	20000a54 	.word	0x20000a54
 8012c64:	08012bfd 	.word	0x08012bfd

08012c68 <helperDoTestSetup>:
 */

extern "C" {

    static void helperDoTestSetup(void* data)
    {
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b082      	sub	sp, #8
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->setup();
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	330c      	adds	r3, #12
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	6878      	ldr	r0, [r7, #4]
 8012c7a:	4798      	blx	r3
    }
 8012c7c:	bf00      	nop
 8012c7e:	3708      	adds	r7, #8
 8012c80:	46bd      	mov	sp, r7
 8012c82:	bd80      	pop	{r7, pc}

08012c84 <helperDoTestBody>:

    static void helperDoTestBody(void* data)
    {
 8012c84:	b580      	push	{r7, lr}
 8012c86:	b082      	sub	sp, #8
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->testBody();
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	3314      	adds	r3, #20
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	6878      	ldr	r0, [r7, #4]
 8012c96:	4798      	blx	r3
    }
 8012c98:	bf00      	nop
 8012c9a:	3708      	adds	r7, #8
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	bd80      	pop	{r7, pc}

08012ca0 <helperDoTestTeardown>:

    static void helperDoTestTeardown(void* data)
    {
 8012ca0:	b580      	push	{r7, lr}
 8012ca2:	b082      	sub	sp, #8
 8012ca4:	af00      	add	r7, sp, #0
 8012ca6:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->teardown();
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	3310      	adds	r3, #16
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	6878      	ldr	r0, [r7, #4]
 8012cb2:	4798      	blx	r3
    }
 8012cb4:	bf00      	nop
 8012cb6:	3708      	adds	r7, #8
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	bd80      	pop	{r7, pc}

08012cbc <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>:

    struct HelperTestRunInfo
    {
        HelperTestRunInfo(UtestShell* shell, TestPlugin* plugin, TestResult* result) : shell_(shell), plugin_(plugin), result_(result){}
 8012cbc:	b480      	push	{r7}
 8012cbe:	b085      	sub	sp, #20
 8012cc0:	af00      	add	r7, sp, #0
 8012cc2:	60f8      	str	r0, [r7, #12]
 8012cc4:	60b9      	str	r1, [r7, #8]
 8012cc6:	607a      	str	r2, [r7, #4]
 8012cc8:	603b      	str	r3, [r7, #0]
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	68ba      	ldr	r2, [r7, #8]
 8012cce:	601a      	str	r2, [r3, #0]
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	687a      	ldr	r2, [r7, #4]
 8012cd4:	605a      	str	r2, [r3, #4]
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	683a      	ldr	r2, [r7, #0]
 8012cda:	609a      	str	r2, [r3, #8]
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	4618      	mov	r0, r3
 8012ce0:	3714      	adds	r7, #20
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce8:	4770      	bx	lr

08012cea <helperDoRunOneTestInCurrentProcess>:
        TestPlugin* plugin_;
        TestResult* result_;
    };

    static void helperDoRunOneTestInCurrentProcess(void* data)
    {
 8012cea:	b580      	push	{r7, lr}
 8012cec:	b086      	sub	sp, #24
 8012cee:	af00      	add	r7, sp, #0
 8012cf0:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 8012cf6:	697b      	ldr	r3, [r7, #20]
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 8012cfc:	697b      	ldr	r3, [r7, #20]
 8012cfe:	685b      	ldr	r3, [r3, #4]
 8012d00:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 8012d02:	697b      	ldr	r3, [r7, #20]
 8012d04:	689b      	ldr	r3, [r3, #8]
 8012d06:	60bb      	str	r3, [r7, #8]

        shell->runOneTestInCurrentProcess(plugin, *result);
 8012d08:	693b      	ldr	r3, [r7, #16]
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	3394      	adds	r3, #148	; 0x94
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	68ba      	ldr	r2, [r7, #8]
 8012d12:	68f9      	ldr	r1, [r7, #12]
 8012d14:	6938      	ldr	r0, [r7, #16]
 8012d16:	4798      	blx	r3
    }
 8012d18:	bf00      	nop
 8012d1a:	3718      	adds	r7, #24
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	bd80      	pop	{r7, pc}

08012d20 <helperDoRunOneTestSeperateProcess>:

    static void helperDoRunOneTestSeperateProcess(void* data)
    {
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b086      	sub	sp, #24
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 8012d2c:	697b      	ldr	r3, [r7, #20]
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 8012d32:	697b      	ldr	r3, [r7, #20]
 8012d34:	685b      	ldr	r3, [r3, #4]
 8012d36:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 8012d38:	697b      	ldr	r3, [r7, #20]
 8012d3a:	689b      	ldr	r3, [r3, #8]
 8012d3c:	60bb      	str	r3, [r7, #8]
        PlatformSpecificRunTestInASeperateProcess(shell, plugin, result);
 8012d3e:	4b05      	ldr	r3, [pc, #20]	; (8012d54 <helperDoRunOneTestSeperateProcess+0x34>)
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	68ba      	ldr	r2, [r7, #8]
 8012d44:	68f9      	ldr	r1, [r7, #12]
 8012d46:	6938      	ldr	r0, [r7, #16]
 8012d48:	4798      	blx	r3
    }
 8012d4a:	bf00      	nop
 8012d4c:	3718      	adds	r7, #24
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	bd80      	pop	{r7, pc}
 8012d52:	bf00      	nop
 8012d54:	2000009c 	.word	0x2000009c

08012d58 <_ZN10UtestShellC1Ev>:

const TestTerminator *UtestShell::currentTestTerminator_ = &normalTestTerminator;

/******************************** */

UtestShell::UtestShell() :
 8012d58:	b480      	push	{r7}
 8012d5a:	b083      	sub	sp, #12
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	6078      	str	r0, [r7, #4]
    group_("UndefinedTestGroup"), name_("UndefinedTest"), file_("UndefinedFile"), lineNumber_(0), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 8012d60:	4a0f      	ldr	r2, [pc, #60]	; (8012da0 <_ZN10UtestShellC1Ev+0x48>)
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	601a      	str	r2, [r3, #0]
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	4a0e      	ldr	r2, [pc, #56]	; (8012da4 <_ZN10UtestShellC1Ev+0x4c>)
 8012d6a:	605a      	str	r2, [r3, #4]
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	4a0e      	ldr	r2, [pc, #56]	; (8012da8 <_ZN10UtestShellC1Ev+0x50>)
 8012d70:	609a      	str	r2, [r3, #8]
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	4a0d      	ldr	r2, [pc, #52]	; (8012dac <_ZN10UtestShellC1Ev+0x54>)
 8012d76:	60da      	str	r2, [r3, #12]
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	611a      	str	r2, [r3, #16]
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	2200      	movs	r2, #0
 8012d82:	615a      	str	r2, [r3, #20]
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	2200      	movs	r2, #0
 8012d88:	761a      	strb	r2, [r3, #24]
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	2200      	movs	r2, #0
 8012d8e:	765a      	strb	r2, [r3, #25]
{
}
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	4618      	mov	r0, r3
 8012d94:	370c      	adds	r7, #12
 8012d96:	46bd      	mov	sp, r7
 8012d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d9c:	4770      	bx	lr
 8012d9e:	bf00      	nop
 8012da0:	08028a80 	.word	0x08028a80
 8012da4:	08025030 	.word	0x08025030
 8012da8:	08025044 	.word	0x08025044
 8012dac:	08025054 	.word	0x08025054

08012db0 <_ZN10UtestShellC1EPKcS1_S1_j>:

UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber) :
 8012db0:	b480      	push	{r7}
 8012db2:	b085      	sub	sp, #20
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	60f8      	str	r0, [r7, #12]
 8012db8:	60b9      	str	r1, [r7, #8]
 8012dba:	607a      	str	r2, [r7, #4]
 8012dbc:	603b      	str	r3, [r7, #0]
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 8012dbe:	4a0f      	ldr	r2, [pc, #60]	; (8012dfc <_ZN10UtestShellC1EPKcS1_S1_j+0x4c>)
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	601a      	str	r2, [r3, #0]
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	68ba      	ldr	r2, [r7, #8]
 8012dc8:	605a      	str	r2, [r3, #4]
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	687a      	ldr	r2, [r7, #4]
 8012dce:	609a      	str	r2, [r3, #8]
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	683a      	ldr	r2, [r7, #0]
 8012dd4:	60da      	str	r2, [r3, #12]
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	69ba      	ldr	r2, [r7, #24]
 8012dda:	611a      	str	r2, [r3, #16]
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	2200      	movs	r2, #0
 8012de0:	615a      	str	r2, [r3, #20]
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	2200      	movs	r2, #0
 8012de6:	761a      	strb	r2, [r3, #24]
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	2200      	movs	r2, #0
 8012dec:	765a      	strb	r2, [r3, #25]
{
}
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	4618      	mov	r0, r3
 8012df2:	3714      	adds	r7, #20
 8012df4:	46bd      	mov	sp, r7
 8012df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dfa:	4770      	bx	lr
 8012dfc:	08028a80 	.word	0x08028a80

08012e00 <_ZN10UtestShellD1Ev>:
UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber, UtestShell* nextTest) :
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(nextTest), isRunAsSeperateProcess_(false), hasFailed_(false)
{
}

UtestShell::~UtestShell()
 8012e00:	b480      	push	{r7}
 8012e02:	b083      	sub	sp, #12
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	6078      	str	r0, [r7, #4]
 8012e08:	4a04      	ldr	r2, [pc, #16]	; (8012e1c <_ZN10UtestShellD1Ev+0x1c>)
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	601a      	str	r2, [r3, #0]
{
}
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	4618      	mov	r0, r3
 8012e12:	370c      	adds	r7, #12
 8012e14:	46bd      	mov	sp, r7
 8012e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1a:	4770      	bx	lr
 8012e1c:	08028a80 	.word	0x08028a80

08012e20 <_ZN10UtestShellD0Ev>:
UtestShell::~UtestShell()
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b082      	sub	sp, #8
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	6078      	str	r0, [r7, #4]
}
 8012e28:	6878      	ldr	r0, [r7, #4]
 8012e2a:	f7ff ffe9 	bl	8012e00 <_ZN10UtestShellD1Ev>
 8012e2e:	211c      	movs	r1, #28
 8012e30:	6878      	ldr	r0, [r7, #4]
 8012e32:	f7f7 fbb7 	bl	800a5a4 <_ZdlPvj>
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	4618      	mov	r0, r3
 8012e3a:	3708      	adds	r7, #8
 8012e3c:	46bd      	mov	sp, r7
 8012e3e:	bd80      	pop	{r7, pc}

08012e40 <_ZL18defaultCrashMethodv>:
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wnonnull"
#endif /* NEEDS_DISABLE_NULL_WARNING */

static void defaultCrashMethod()
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b082      	sub	sp, #8
 8012e44:	af00      	add	r7, sp, #0
    UtestShell* ptr = (UtestShell*) NULLPTR;
 8012e46:	2300      	movs	r3, #0
 8012e48:	607b      	str	r3, [r7, #4]
    ptr->countTests();
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	3310      	adds	r3, #16
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	6878      	ldr	r0, [r7, #4]
 8012e54:	4798      	blx	r3
}
 8012e56:	bf00      	nop
 8012e58:	3708      	adds	r7, #8
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	bd80      	pop	{r7, pc}
	...

08012e60 <_ZN10UtestShell5crashEv>:
{
    pleaseCrashMeRightNow = defaultCrashMethod;
}

void UtestShell::crash()
{
 8012e60:	b580      	push	{r7, lr}
 8012e62:	af00      	add	r7, sp, #0
    pleaseCrashMeRightNow();
 8012e64:	4b02      	ldr	r3, [pc, #8]	; (8012e70 <_ZN10UtestShell5crashEv+0x10>)
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	4798      	blx	r3
}
 8012e6a:	bf00      	nop
 8012e6c:	bd80      	pop	{r7, pc}
 8012e6e:	bf00      	nop
 8012e70:	20000098 	.word	0x20000098

08012e74 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult>:

void UtestShell::runOneTest(TestPlugin* plugin, TestResult& result)
{
 8012e74:	b580      	push	{r7, lr}
 8012e76:	b088      	sub	sp, #32
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	60f8      	str	r0, [r7, #12]
 8012e7c:	60b9      	str	r1, [r7, #8]
 8012e7e:	607a      	str	r2, [r7, #4]
    hasFailed_ = false;
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	2200      	movs	r2, #0
 8012e84:	765a      	strb	r2, [r3, #25]
    result.countRun();
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	3324      	adds	r3, #36	; 0x24
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	6878      	ldr	r0, [r7, #4]
 8012e90:	4798      	blx	r3
    HelperTestRunInfo runInfo(this, plugin, &result);
 8012e92:	f107 0014 	add.w	r0, r7, #20
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	68ba      	ldr	r2, [r7, #8]
 8012e9a:	68f9      	ldr	r1, [r7, #12]
 8012e9c:	f7ff ff0e 	bl	8012cbc <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>
    if (isRunInSeperateProcess())
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	337c      	adds	r3, #124	; 0x7c
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	68f8      	ldr	r0, [r7, #12]
 8012eaa:	4798      	blx	r3
 8012eac:	4603      	mov	r3, r0
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d007      	beq.n	8012ec2 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x4e>
        PlatformSpecificSetJmp(helperDoRunOneTestSeperateProcess, &runInfo);
 8012eb2:	4b09      	ldr	r3, [pc, #36]	; (8012ed8 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	f107 0214 	add.w	r2, r7, #20
 8012eba:	4611      	mov	r1, r2
 8012ebc:	4807      	ldr	r0, [pc, #28]	; (8012edc <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x68>)
 8012ebe:	4798      	blx	r3
    else
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
}
 8012ec0:	e006      	b.n	8012ed0 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x5c>
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
 8012ec2:	4b05      	ldr	r3, [pc, #20]	; (8012ed8 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	f107 0214 	add.w	r2, r7, #20
 8012eca:	4611      	mov	r1, r2
 8012ecc:	4804      	ldr	r0, [pc, #16]	; (8012ee0 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x6c>)
 8012ece:	4798      	blx	r3
}
 8012ed0:	bf00      	nop
 8012ed2:	3720      	adds	r7, #32
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	bd80      	pop	{r7, pc}
 8012ed8:	200000a4 	.word	0x200000a4
 8012edc:	08012d21 	.word	0x08012d21
 8012ee0:	08012ceb 	.word	0x08012ceb

08012ee4 <_ZN10UtestShell10createTestEv>:

Utest* UtestShell::createTest()
{
 8012ee4:	b590      	push	{r4, r7, lr}
 8012ee6:	b083      	sub	sp, #12
 8012ee8:	af00      	add	r7, sp, #0
 8012eea:	6078      	str	r0, [r7, #4]
    return new Utest();
 8012eec:	22d3      	movs	r2, #211	; 0xd3
 8012eee:	4906      	ldr	r1, [pc, #24]	; (8012f08 <_ZN10UtestShell10createTestEv+0x24>)
 8012ef0:	2004      	movs	r0, #4
 8012ef2:	f7f7 fb43 	bl	800a57c <_ZnwjPKci>
 8012ef6:	4604      	mov	r4, r0
 8012ef8:	4620      	mov	r0, r4
 8012efa:	f001 fb0f 	bl	801451c <_ZN5UtestC1Ev>
 8012efe:	4623      	mov	r3, r4
}
 8012f00:	4618      	mov	r0, r3
 8012f02:	370c      	adds	r7, #12
 8012f04:	46bd      	mov	sp, r7
 8012f06:	bd90      	pop	{r4, r7, pc}
 8012f08:	08025064 	.word	0x08025064

08012f0c <_ZN10UtestShell11destroyTestEP5Utest>:

void UtestShell::destroyTest(Utest* test)
{
 8012f0c:	b580      	push	{r7, lr}
 8012f0e:	b082      	sub	sp, #8
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	6078      	str	r0, [r7, #4]
 8012f14:	6039      	str	r1, [r7, #0]
    delete test;
 8012f16:	683b      	ldr	r3, [r7, #0]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d004      	beq.n	8012f26 <_ZN10UtestShell11destroyTestEP5Utest+0x1a>
 8012f1c:	681a      	ldr	r2, [r3, #0]
 8012f1e:	3204      	adds	r2, #4
 8012f20:	6812      	ldr	r2, [r2, #0]
 8012f22:	4618      	mov	r0, r3
 8012f24:	4790      	blx	r2
}
 8012f26:	bf00      	nop
 8012f28:	3708      	adds	r7, #8
 8012f2a:	46bd      	mov	sp, r7
 8012f2c:	bd80      	pop	{r7, pc}
	...

08012f30 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult>:

void UtestShell::runOneTestInCurrentProcess(TestPlugin* plugin, TestResult& result)
{
 8012f30:	b580      	push	{r7, lr}
 8012f32:	b088      	sub	sp, #32
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	60f8      	str	r0, [r7, #12]
 8012f38:	60b9      	str	r1, [r7, #8]
 8012f3a:	607a      	str	r2, [r7, #4]
    result.printVeryVerbose("\n-- before runAllPreTestAction: ");
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	333c      	adds	r3, #60	; 0x3c
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	4940      	ldr	r1, [pc, #256]	; (8013048 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x118>)
 8012f46:	6878      	ldr	r0, [r7, #4]
 8012f48:	4798      	blx	r3
    plugin->runAllPreTestAction(*this, result);
 8012f4a:	68bb      	ldr	r3, [r7, #8]
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	3314      	adds	r3, #20
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	687a      	ldr	r2, [r7, #4]
 8012f54:	68f9      	ldr	r1, [r7, #12]
 8012f56:	68b8      	ldr	r0, [r7, #8]
 8012f58:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPreTestAction: ");
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	333c      	adds	r3, #60	; 0x3c
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	493a      	ldr	r1, [pc, #232]	; (801304c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x11c>)
 8012f64:	6878      	ldr	r0, [r7, #4]
 8012f66:	4798      	blx	r3

    //save test context, so that test class can be tested
    UtestShell* savedTest = UtestShell::getCurrent();
 8012f68:	f001 faae 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 8012f6c:	61f8      	str	r0, [r7, #28]
    TestResult* savedResult = UtestShell::getTestResult();
 8012f6e:	68f8      	ldr	r0, [r7, #12]
 8012f70:	f001 fa90 	bl	8014494 <_ZN10UtestShell13getTestResultEv>
 8012f74:	61b8      	str	r0, [r7, #24]

    UtestShell::setTestResult(&result);
 8012f76:	6879      	ldr	r1, [r7, #4]
 8012f78:	68f8      	ldr	r0, [r7, #12]
 8012f7a:	f001 fa6b 	bl	8014454 <_ZN10UtestShell13setTestResultEP10TestResult>
    UtestShell::setCurrentTest(this);
 8012f7e:	68f9      	ldr	r1, [r7, #12]
 8012f80:	68f8      	ldr	r0, [r7, #12]
 8012f82:	f001 fa77 	bl	8014474 <_ZN10UtestShell14setCurrentTestEPS_>

    result.printVeryVerbose("\n---- before createTest: ");
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	333c      	adds	r3, #60	; 0x3c
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	4930      	ldr	r1, [pc, #192]	; (8013050 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x120>)
 8012f90:	6878      	ldr	r0, [r7, #4]
 8012f92:	4798      	blx	r3
    Utest* testToRun = createTest();
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	3388      	adds	r3, #136	; 0x88
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	68f8      	ldr	r0, [r7, #12]
 8012f9e:	4798      	blx	r3
 8012fa0:	6178      	str	r0, [r7, #20]
    result.printVeryVerbose("\n---- after createTest: ");
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	333c      	adds	r3, #60	; 0x3c
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	492a      	ldr	r1, [pc, #168]	; (8013054 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x124>)
 8012fac:	6878      	ldr	r0, [r7, #4]
 8012fae:	4798      	blx	r3

    result.printVeryVerbose("\n------ before runTest: ");
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	333c      	adds	r3, #60	; 0x3c
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	4927      	ldr	r1, [pc, #156]	; (8013058 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x128>)
 8012fba:	6878      	ldr	r0, [r7, #4]
 8012fbc:	4798      	blx	r3
    testToRun->run();
 8012fbe:	697b      	ldr	r3, [r7, #20]
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	3308      	adds	r3, #8
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	6978      	ldr	r0, [r7, #20]
 8012fc8:	4798      	blx	r3
    result.printVeryVerbose("\n------ after runTest: ");
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	333c      	adds	r3, #60	; 0x3c
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	4922      	ldr	r1, [pc, #136]	; (801305c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x12c>)
 8012fd4:	6878      	ldr	r0, [r7, #4]
 8012fd6:	4798      	blx	r3

    UtestShell::setCurrentTest(savedTest);
 8012fd8:	69f9      	ldr	r1, [r7, #28]
 8012fda:	68f8      	ldr	r0, [r7, #12]
 8012fdc:	f001 fa4a 	bl	8014474 <_ZN10UtestShell14setCurrentTestEPS_>
    UtestShell::setTestResult(savedResult);
 8012fe0:	69b9      	ldr	r1, [r7, #24]
 8012fe2:	68f8      	ldr	r0, [r7, #12]
 8012fe4:	f001 fa36 	bl	8014454 <_ZN10UtestShell13setTestResultEP10TestResult>

    result.printVeryVerbose("\n---- before destroyTest: ");
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	333c      	adds	r3, #60	; 0x3c
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	491b      	ldr	r1, [pc, #108]	; (8013060 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x130>)
 8012ff2:	6878      	ldr	r0, [r7, #4]
 8012ff4:	4798      	blx	r3
    destroyTest(testToRun);
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	338c      	adds	r3, #140	; 0x8c
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	6979      	ldr	r1, [r7, #20]
 8013000:	68f8      	ldr	r0, [r7, #12]
 8013002:	4798      	blx	r3
    result.printVeryVerbose("\n---- after destroyTest: ");
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	333c      	adds	r3, #60	; 0x3c
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	4915      	ldr	r1, [pc, #84]	; (8013064 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x134>)
 801300e:	6878      	ldr	r0, [r7, #4]
 8013010:	4798      	blx	r3

    result.printVeryVerbose("\n-- before runAllPostTestAction: ");
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	333c      	adds	r3, #60	; 0x3c
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	4913      	ldr	r1, [pc, #76]	; (8013068 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x138>)
 801301c:	6878      	ldr	r0, [r7, #4]
 801301e:	4798      	blx	r3
    plugin->runAllPostTestAction(*this, result);
 8013020:	68bb      	ldr	r3, [r7, #8]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	3318      	adds	r3, #24
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	687a      	ldr	r2, [r7, #4]
 801302a:	68f9      	ldr	r1, [r7, #12]
 801302c:	68b8      	ldr	r0, [r7, #8]
 801302e:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPostTestAction: ");
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	333c      	adds	r3, #60	; 0x3c
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	490c      	ldr	r1, [pc, #48]	; (801306c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x13c>)
 801303a:	6878      	ldr	r0, [r7, #4]
 801303c:	4798      	blx	r3
}
 801303e:	bf00      	nop
 8013040:	3720      	adds	r7, #32
 8013042:	46bd      	mov	sp, r7
 8013044:	bd80      	pop	{r7, pc}
 8013046:	bf00      	nop
 8013048:	08025078 	.word	0x08025078
 801304c:	0802509c 	.word	0x0802509c
 8013050:	080250bc 	.word	0x080250bc
 8013054:	080250d8 	.word	0x080250d8
 8013058:	080250f4 	.word	0x080250f4
 801305c:	08025110 	.word	0x08025110
 8013060:	08025128 	.word	0x08025128
 8013064:	08025144 	.word	0x08025144
 8013068:	08025160 	.word	0x08025160
 801306c:	08025184 	.word	0x08025184

08013070 <_ZNK10UtestShell7getNextEv>:

UtestShell *UtestShell::getNext() const
{
 8013070:	b480      	push	{r7}
 8013072:	b083      	sub	sp, #12
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
    return next_;
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	695b      	ldr	r3, [r3, #20]
}
 801307c:	4618      	mov	r0, r3
 801307e:	370c      	adds	r7, #12
 8013080:	46bd      	mov	sp, r7
 8013082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013086:	4770      	bx	lr

08013088 <_ZN10UtestShell7addTestEPS_>:

UtestShell* UtestShell::addTest(UtestShell *test)
{
 8013088:	b480      	push	{r7}
 801308a:	b083      	sub	sp, #12
 801308c:	af00      	add	r7, sp, #0
 801308e:	6078      	str	r0, [r7, #4]
 8013090:	6039      	str	r1, [r7, #0]
    next_ = test;
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	683a      	ldr	r2, [r7, #0]
 8013096:	615a      	str	r2, [r3, #20]
    return this;
 8013098:	687b      	ldr	r3, [r7, #4]
}
 801309a:	4618      	mov	r0, r3
 801309c:	370c      	adds	r7, #12
 801309e:	46bd      	mov	sp, r7
 80130a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130a4:	4770      	bx	lr

080130a6 <_ZN10UtestShell10countTestsEv>:

size_t UtestShell::countTests()
{
 80130a6:	b580      	push	{r7, lr}
 80130a8:	b082      	sub	sp, #8
 80130aa:	af00      	add	r7, sp, #0
 80130ac:	6078      	str	r0, [r7, #4]
    return next_ ? next_->countTests() + 1 : 1;
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	695b      	ldr	r3, [r3, #20]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d00b      	beq.n	80130ce <_ZN10UtestShell10countTestsEv+0x28>
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	695a      	ldr	r2, [r3, #20]
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	695b      	ldr	r3, [r3, #20]
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	3310      	adds	r3, #16
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	4610      	mov	r0, r2
 80130c6:	4798      	blx	r3
 80130c8:	4603      	mov	r3, r0
 80130ca:	3301      	adds	r3, #1
 80130cc:	e000      	b.n	80130d0 <_ZN10UtestShell10countTestsEv+0x2a>
 80130ce:	2301      	movs	r3, #1
}
 80130d0:	4618      	mov	r0, r3
 80130d2:	3708      	adds	r7, #8
 80130d4:	46bd      	mov	sp, r7
 80130d6:	bd80      	pop	{r7, pc}

080130d8 <_ZNK10UtestShell12getMacroNameEv>:

SimpleString UtestShell::getMacroName() const
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b082      	sub	sp, #8
 80130dc:	af00      	add	r7, sp, #0
 80130de:	6078      	str	r0, [r7, #4]
 80130e0:	6039      	str	r1, [r7, #0]
    return "TEST";
 80130e2:	4904      	ldr	r1, [pc, #16]	; (80130f4 <_ZNK10UtestShell12getMacroNameEv+0x1c>)
 80130e4:	6878      	ldr	r0, [r7, #4]
 80130e6:	f7f9 fe0c 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
}
 80130ea:	6878      	ldr	r0, [r7, #4]
 80130ec:	3708      	adds	r7, #8
 80130ee:	46bd      	mov	sp, r7
 80130f0:	bd80      	pop	{r7, pc}
 80130f2:	bf00      	nop
 80130f4:	080251a8 	.word	0x080251a8

080130f8 <_ZNK10UtestShell7getNameEv>:

const SimpleString UtestShell::getName() const
{
 80130f8:	b580      	push	{r7, lr}
 80130fa:	b082      	sub	sp, #8
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	6078      	str	r0, [r7, #4]
 8013100:	6039      	str	r1, [r7, #0]
    return SimpleString(name_);
 8013102:	683b      	ldr	r3, [r7, #0]
 8013104:	689b      	ldr	r3, [r3, #8]
 8013106:	4619      	mov	r1, r3
 8013108:	6878      	ldr	r0, [r7, #4]
 801310a:	f7f9 fdfa 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
}
 801310e:	6878      	ldr	r0, [r7, #4]
 8013110:	3708      	adds	r7, #8
 8013112:	46bd      	mov	sp, r7
 8013114:	bd80      	pop	{r7, pc}

08013116 <_ZNK10UtestShell8getGroupEv>:

const SimpleString UtestShell::getGroup() const
{
 8013116:	b580      	push	{r7, lr}
 8013118:	b082      	sub	sp, #8
 801311a:	af00      	add	r7, sp, #0
 801311c:	6078      	str	r0, [r7, #4]
 801311e:	6039      	str	r1, [r7, #0]
    return SimpleString(group_);
 8013120:	683b      	ldr	r3, [r7, #0]
 8013122:	685b      	ldr	r3, [r3, #4]
 8013124:	4619      	mov	r1, r3
 8013126:	6878      	ldr	r0, [r7, #4]
 8013128:	f7f9 fdeb 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
}
 801312c:	6878      	ldr	r0, [r7, #4]
 801312e:	3708      	adds	r7, #8
 8013130:	46bd      	mov	sp, r7
 8013132:	bd80      	pop	{r7, pc}

08013134 <_ZNK10UtestShell16getFormattedNameEv>:

SimpleString UtestShell::getFormattedName() const
{
 8013134:	b580      	push	{r7, lr}
 8013136:	b082      	sub	sp, #8
 8013138:	af00      	add	r7, sp, #0
 801313a:	6078      	str	r0, [r7, #4]
 801313c:	6039      	str	r1, [r7, #0]
    SimpleString formattedName(getMacroName());
 801313e:	683b      	ldr	r3, [r7, #0]
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	33a0      	adds	r3, #160	; 0xa0
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	687a      	ldr	r2, [r7, #4]
 8013148:	6839      	ldr	r1, [r7, #0]
 801314a:	4610      	mov	r0, r2
 801314c:	4798      	blx	r3
    formattedName += "(";
 801314e:	490e      	ldr	r1, [pc, #56]	; (8013188 <_ZNK10UtestShell16getFormattedNameEv+0x54>)
 8013150:	6878      	ldr	r0, [r7, #4]
 8013152:	f7fa fa1d 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    formattedName += group_;
 8013156:	683b      	ldr	r3, [r7, #0]
 8013158:	685b      	ldr	r3, [r3, #4]
 801315a:	4619      	mov	r1, r3
 801315c:	6878      	ldr	r0, [r7, #4]
 801315e:	f7fa fa17 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    formattedName += ", ";
 8013162:	490a      	ldr	r1, [pc, #40]	; (801318c <_ZNK10UtestShell16getFormattedNameEv+0x58>)
 8013164:	6878      	ldr	r0, [r7, #4]
 8013166:	f7fa fa13 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    formattedName += name_;
 801316a:	683b      	ldr	r3, [r7, #0]
 801316c:	689b      	ldr	r3, [r3, #8]
 801316e:	4619      	mov	r1, r3
 8013170:	6878      	ldr	r0, [r7, #4]
 8013172:	f7fa fa0d 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    formattedName += ")";
 8013176:	4906      	ldr	r1, [pc, #24]	; (8013190 <_ZNK10UtestShell16getFormattedNameEv+0x5c>)
 8013178:	6878      	ldr	r0, [r7, #4]
 801317a:	f7fa fa09 	bl	800d590 <_ZN12SimpleStringpLEPKc>

    return formattedName;
 801317e:	bf00      	nop
}
 8013180:	6878      	ldr	r0, [r7, #4]
 8013182:	3708      	adds	r7, #8
 8013184:	46bd      	mov	sp, r7
 8013186:	bd80      	pop	{r7, pc}
 8013188:	080251b0 	.word	0x080251b0
 801318c:	080251b4 	.word	0x080251b4
 8013190:	080251b8 	.word	0x080251b8

08013194 <_ZNK10UtestShell9hasFailedEv>:

bool UtestShell::hasFailed() const
{
 8013194:	b480      	push	{r7}
 8013196:	b083      	sub	sp, #12
 8013198:	af00      	add	r7, sp, #0
 801319a:	6078      	str	r0, [r7, #4]
    return hasFailed_;
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	7e5b      	ldrb	r3, [r3, #25]
}
 80131a0:	4618      	mov	r0, r3
 80131a2:	370c      	adds	r7, #12
 80131a4:	46bd      	mov	sp, r7
 80131a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131aa:	4770      	bx	lr

080131ac <_ZN10UtestShell10countCheckEv>:

void UtestShell::countCheck()
{
 80131ac:	b580      	push	{r7, lr}
 80131ae:	b082      	sub	sp, #8
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	6078      	str	r0, [r7, #4]
    getTestResult()->countCheck();
 80131b4:	6878      	ldr	r0, [r7, #4]
 80131b6:	f001 f96d 	bl	8014494 <_ZN10UtestShell13getTestResultEv>
 80131ba:	4603      	mov	r3, r0
 80131bc:	681a      	ldr	r2, [r3, #0]
 80131be:	3228      	adds	r2, #40	; 0x28
 80131c0:	6812      	ldr	r2, [r2, #0]
 80131c2:	4618      	mov	r0, r3
 80131c4:	4790      	blx	r2
}
 80131c6:	bf00      	nop
 80131c8:	3708      	adds	r7, #8
 80131ca:	46bd      	mov	sp, r7
 80131cc:	bd80      	pop	{r7, pc}

080131ce <_ZNK10UtestShell7willRunEv>:

bool UtestShell::willRun() const
{
 80131ce:	b480      	push	{r7}
 80131d0:	b083      	sub	sp, #12
 80131d2:	af00      	add	r7, sp, #0
 80131d4:	6078      	str	r0, [r7, #4]
    return true;
 80131d6:	2301      	movs	r3, #1
}
 80131d8:	4618      	mov	r0, r3
 80131da:	370c      	adds	r7, #12
 80131dc:	46bd      	mov	sp, r7
 80131de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e2:	4770      	bx	lr

080131e4 <_ZNK10UtestShell22isRunInSeperateProcessEv>:

bool UtestShell::isRunInSeperateProcess() const
{
 80131e4:	b480      	push	{r7}
 80131e6:	b083      	sub	sp, #12
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	6078      	str	r0, [r7, #4]
    return isRunAsSeperateProcess_;
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	7e1b      	ldrb	r3, [r3, #24]
}
 80131f0:	4618      	mov	r0, r3
 80131f2:	370c      	adds	r7, #12
 80131f4:	46bd      	mov	sp, r7
 80131f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131fa:	4770      	bx	lr

080131fc <_ZN10UtestShell23setRunInSeperateProcessEv>:

void UtestShell::setRunInSeperateProcess()
{
 80131fc:	b480      	push	{r7}
 80131fe:	b083      	sub	sp, #12
 8013200:	af00      	add	r7, sp, #0
 8013202:	6078      	str	r0, [r7, #4]
    isRunAsSeperateProcess_ = true;
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	2201      	movs	r2, #1
 8013208:	761a      	strb	r2, [r3, #24]
}
 801320a:	bf00      	nop
 801320c:	370c      	adds	r7, #12
 801320e:	46bd      	mov	sp, r7
 8013210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013214:	4770      	bx	lr

08013216 <_ZN10UtestShell13setRunIgnoredEv>:


void UtestShell::setRunIgnored()
{
 8013216:	b480      	push	{r7}
 8013218:	b083      	sub	sp, #12
 801321a:	af00      	add	r7, sp, #0
 801321c:	6078      	str	r0, [r7, #4]

}
 801321e:	bf00      	nop
 8013220:	370c      	adds	r7, #12
 8013222:	46bd      	mov	sp, r7
 8013224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013228:	4770      	bx	lr

0801322a <_ZN10UtestShell11setFileNameEPKc>:

void UtestShell::setFileName(const char* fileName)
{
 801322a:	b480      	push	{r7}
 801322c:	b083      	sub	sp, #12
 801322e:	af00      	add	r7, sp, #0
 8013230:	6078      	str	r0, [r7, #4]
 8013232:	6039      	str	r1, [r7, #0]
    file_ = fileName;
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	683a      	ldr	r2, [r7, #0]
 8013238:	60da      	str	r2, [r3, #12]
}
 801323a:	bf00      	nop
 801323c:	370c      	adds	r7, #12
 801323e:	46bd      	mov	sp, r7
 8013240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013244:	4770      	bx	lr

08013246 <_ZN10UtestShell13setLineNumberEj>:

void UtestShell::setLineNumber(size_t lineNumber)
{
 8013246:	b480      	push	{r7}
 8013248:	b083      	sub	sp, #12
 801324a:	af00      	add	r7, sp, #0
 801324c:	6078      	str	r0, [r7, #4]
 801324e:	6039      	str	r1, [r7, #0]
    lineNumber_ = lineNumber;
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	683a      	ldr	r2, [r7, #0]
 8013254:	611a      	str	r2, [r3, #16]
}
 8013256:	bf00      	nop
 8013258:	370c      	adds	r7, #12
 801325a:	46bd      	mov	sp, r7
 801325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013260:	4770      	bx	lr

08013262 <_ZN10UtestShell12setGroupNameEPKc>:

void UtestShell::setGroupName(const char* groupName)
{
 8013262:	b480      	push	{r7}
 8013264:	b083      	sub	sp, #12
 8013266:	af00      	add	r7, sp, #0
 8013268:	6078      	str	r0, [r7, #4]
 801326a:	6039      	str	r1, [r7, #0]
    group_ = groupName;
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	683a      	ldr	r2, [r7, #0]
 8013270:	605a      	str	r2, [r3, #4]
}
 8013272:	bf00      	nop
 8013274:	370c      	adds	r7, #12
 8013276:	46bd      	mov	sp, r7
 8013278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801327c:	4770      	bx	lr

0801327e <_ZN10UtestShell11setTestNameEPKc>:

void UtestShell::setTestName(const char* testName)
{
 801327e:	b480      	push	{r7}
 8013280:	b083      	sub	sp, #12
 8013282:	af00      	add	r7, sp, #0
 8013284:	6078      	str	r0, [r7, #4]
 8013286:	6039      	str	r1, [r7, #0]
    name_ = testName;
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	683a      	ldr	r2, [r7, #0]
 801328c:	609a      	str	r2, [r3, #8]
}
 801328e:	bf00      	nop
 8013290:	370c      	adds	r7, #12
 8013292:	46bd      	mov	sp, r7
 8013294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013298:	4770      	bx	lr

0801329a <_ZNK10UtestShell7getFileEv>:

const SimpleString UtestShell::getFile() const
{
 801329a:	b580      	push	{r7, lr}
 801329c:	b082      	sub	sp, #8
 801329e:	af00      	add	r7, sp, #0
 80132a0:	6078      	str	r0, [r7, #4]
 80132a2:	6039      	str	r1, [r7, #0]
    return SimpleString(file_);
 80132a4:	683b      	ldr	r3, [r7, #0]
 80132a6:	68db      	ldr	r3, [r3, #12]
 80132a8:	4619      	mov	r1, r3
 80132aa:	6878      	ldr	r0, [r7, #4]
 80132ac:	f7f9 fd29 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
}
 80132b0:	6878      	ldr	r0, [r7, #4]
 80132b2:	3708      	adds	r7, #8
 80132b4:	46bd      	mov	sp, r7
 80132b6:	bd80      	pop	{r7, pc}

080132b8 <_ZNK10UtestShell13getLineNumberEv>:

size_t UtestShell::getLineNumber() const
{
 80132b8:	b480      	push	{r7}
 80132ba:	b083      	sub	sp, #12
 80132bc:	af00      	add	r7, sp, #0
 80132be:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	691b      	ldr	r3, [r3, #16]
}
 80132c4:	4618      	mov	r0, r3
 80132c6:	370c      	adds	r7, #12
 80132c8:	46bd      	mov	sp, r7
 80132ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ce:	4770      	bx	lr

080132d0 <_ZNK10UtestShell5matchEPKcPK10TestFilter>:

bool UtestShell::match(const char* target, const TestFilter* filters) const
{
 80132d0:	b590      	push	{r4, r7, lr}
 80132d2:	b087      	sub	sp, #28
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	60f8      	str	r0, [r7, #12]
 80132d8:	60b9      	str	r1, [r7, #8]
 80132da:	607a      	str	r2, [r7, #4]
    if(filters == NULLPTR) return true;
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d101      	bne.n	80132e6 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>
 80132e2:	2301      	movs	r3, #1
 80132e4:	e01f      	b.n	8013326 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>

    for(; filters != NULLPTR; filters = filters->getNext())
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d01b      	beq.n	8013324 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x54>
        if(filters->match(target)) return true;
 80132ec:	f107 0310 	add.w	r3, r7, #16
 80132f0:	68b9      	ldr	r1, [r7, #8]
 80132f2:	4618      	mov	r0, r3
 80132f4:	f7f9 fd05 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80132f8:	f107 0310 	add.w	r3, r7, #16
 80132fc:	4619      	mov	r1, r3
 80132fe:	6878      	ldr	r0, [r7, #4]
 8013300:	f00c fb91 	bl	801fa26 <_ZNK10TestFilter5matchERK12SimpleString>
 8013304:	4603      	mov	r3, r0
 8013306:	461c      	mov	r4, r3
 8013308:	f107 0310 	add.w	r3, r7, #16
 801330c:	4618      	mov	r0, r3
 801330e:	f7fa f8b0 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8013312:	2c00      	cmp	r4, #0
 8013314:	d001      	beq.n	801331a <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x4a>
 8013316:	2301      	movs	r3, #1
 8013318:	e005      	b.n	8013326 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>
    for(; filters != NULLPTR; filters = filters->getNext())
 801331a:	6878      	ldr	r0, [r7, #4]
 801331c:	f00c fb5d 	bl	801f9da <_ZNK10TestFilter7getNextEv>
 8013320:	6078      	str	r0, [r7, #4]
 8013322:	e7e0      	b.n	80132e6 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>

    return false;
 8013324:	2300      	movs	r3, #0
}
 8013326:	4618      	mov	r0, r3
 8013328:	371c      	adds	r7, #28
 801332a:	46bd      	mov	sp, r7
 801332c:	bd90      	pop	{r4, r7, pc}

0801332e <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>:

bool UtestShell::shouldRun(const TestFilter* groupFilters, const TestFilter* nameFilters) const
{
 801332e:	b580      	push	{r7, lr}
 8013330:	b084      	sub	sp, #16
 8013332:	af00      	add	r7, sp, #0
 8013334:	60f8      	str	r0, [r7, #12]
 8013336:	60b9      	str	r1, [r7, #8]
 8013338:	607a      	str	r2, [r7, #4]
    return match(group_, groupFilters) && match(name_, nameFilters);
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	685b      	ldr	r3, [r3, #4]
 801333e:	68ba      	ldr	r2, [r7, #8]
 8013340:	4619      	mov	r1, r3
 8013342:	68f8      	ldr	r0, [r7, #12]
 8013344:	f7ff ffc4 	bl	80132d0 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 8013348:	4603      	mov	r3, r0
 801334a:	2b00      	cmp	r3, #0
 801334c:	d00b      	beq.n	8013366 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	689b      	ldr	r3, [r3, #8]
 8013352:	687a      	ldr	r2, [r7, #4]
 8013354:	4619      	mov	r1, r3
 8013356:	68f8      	ldr	r0, [r7, #12]
 8013358:	f7ff ffba 	bl	80132d0 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 801335c:	4603      	mov	r3, r0
 801335e:	2b00      	cmp	r3, #0
 8013360:	d001      	beq.n	8013366 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 8013362:	2301      	movs	r3, #1
 8013364:	e000      	b.n	8013368 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x3a>
 8013366:	2300      	movs	r3, #0
}
 8013368:	4618      	mov	r0, r3
 801336a:	3710      	adds	r7, #16
 801336c:	46bd      	mov	sp, r7
 801336e:	bd80      	pop	{r7, pc}

08013370 <_ZN10UtestShell8failWithERK11TestFailure>:

void UtestShell::failWith(const TestFailure& failure)
{
 8013370:	b590      	push	{r4, r7, lr}
 8013372:	b083      	sub	sp, #12
 8013374:	af00      	add	r7, sp, #0
 8013376:	6078      	str	r0, [r7, #4]
 8013378:	6039      	str	r1, [r7, #0]
    failWith(failure, getCurrentTestTerminator());
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	339c      	adds	r3, #156	; 0x9c
 8013380:	681c      	ldr	r4, [r3, #0]
 8013382:	f001 f8b1 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8013386:	4603      	mov	r3, r0
 8013388:	461a      	mov	r2, r3
 801338a:	6839      	ldr	r1, [r7, #0]
 801338c:	6878      	ldr	r0, [r7, #4]
 801338e:	47a0      	blx	r4
} // LCOV_EXCL_LINE
 8013390:	bf00      	nop
 8013392:	370c      	adds	r7, #12
 8013394:	46bd      	mov	sp, r7
 8013396:	bd90      	pop	{r4, r7, pc}

08013398 <_ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator>:

void UtestShell::failWith(const TestFailure& failure, const TestTerminator& terminator)
{
 8013398:	b580      	push	{r7, lr}
 801339a:	b084      	sub	sp, #16
 801339c:	af00      	add	r7, sp, #0
 801339e:	60f8      	str	r0, [r7, #12]
 80133a0:	60b9      	str	r1, [r7, #8]
 80133a2:	607a      	str	r2, [r7, #4]
    hasFailed_ = true;
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	2201      	movs	r2, #1
 80133a8:	765a      	strb	r2, [r3, #25]
    getTestResult()->addFailure(failure);
 80133aa:	68f8      	ldr	r0, [r7, #12]
 80133ac:	f001 f872 	bl	8014494 <_ZN10UtestShell13getTestResultEv>
 80133b0:	4603      	mov	r3, r0
 80133b2:	681a      	ldr	r2, [r3, #0]
 80133b4:	3234      	adds	r2, #52	; 0x34
 80133b6:	6812      	ldr	r2, [r2, #0]
 80133b8:	68b9      	ldr	r1, [r7, #8]
 80133ba:	4618      	mov	r0, r3
 80133bc:	4790      	blx	r2
    terminator.exitCurrentTest();
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	6878      	ldr	r0, [r7, #4]
 80133c6:	4798      	blx	r3
} // LCOV_EXCL_LINE
 80133c8:	bf00      	nop
 80133ca:	3710      	adds	r7, #16
 80133cc:	46bd      	mov	sp, r7
 80133ce:	bd80      	pop	{r7, pc}

080133d0 <_ZN10UtestShell8exitTestERK14TestTerminator>:

void UtestShell::exitTest(const TestTerminator& terminator)
{
 80133d0:	b580      	push	{r7, lr}
 80133d2:	b082      	sub	sp, #8
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	6078      	str	r0, [r7, #4]
 80133d8:	6039      	str	r1, [r7, #0]
    terminator.exitCurrentTest();
 80133da:	683b      	ldr	r3, [r7, #0]
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	6838      	ldr	r0, [r7, #0]
 80133e2:	4798      	blx	r3
} // LCOV_EXCL_LINE
 80133e4:	bf00      	nop
 80133e6:	3708      	adds	r7, #8
 80133e8:	46bd      	mov	sp, r7
 80133ea:	bd80      	pop	{r7, pc}

080133ec <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertTrue(bool condition, const char *checkString, const char *conditionString, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80133ec:	b590      	push	{r4, r7, lr}
 80133ee:	b09d      	sub	sp, #116	; 0x74
 80133f0:	af04      	add	r7, sp, #16
 80133f2:	60f8      	str	r0, [r7, #12]
 80133f4:	607a      	str	r2, [r7, #4]
 80133f6:	603b      	str	r3, [r7, #0]
 80133f8:	460b      	mov	r3, r1
 80133fa:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 80133fc:	68f8      	ldr	r0, [r7, #12]
 80133fe:	f001 f849 	bl	8014494 <_ZN10UtestShell13getTestResultEv>
 8013402:	4603      	mov	r3, r0
 8013404:	681a      	ldr	r2, [r3, #0]
 8013406:	3228      	adds	r2, #40	; 0x28
 8013408:	6812      	ldr	r2, [r2, #0]
 801340a:	4618      	mov	r0, r3
 801340c:	4790      	blx	r2
    if (!condition)
 801340e:	7afb      	ldrb	r3, [r7, #11]
 8013410:	f083 0301 	eor.w	r3, r3, #1
 8013414:	b2db      	uxtb	r3, r3
 8013416:	2b00      	cmp	r3, #0
 8013418:	d03f      	beq.n	801349a <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(CheckFailure(this, fileName, lineNumber, checkString, conditionString, text), testTerminator);
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	339c      	adds	r3, #156	; 0x9c
 8013420:	681c      	ldr	r4, [r3, #0]
 8013422:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013426:	6879      	ldr	r1, [r7, #4]
 8013428:	4618      	mov	r0, r3
 801342a:	f7f9 fc6a 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801342e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013432:	6839      	ldr	r1, [r7, #0]
 8013434:	4618      	mov	r0, r3
 8013436:	f7f9 fc64 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801343a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801343e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8013440:	4618      	mov	r0, r3
 8013442:	f7f9 fc5e 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8013446:	f107 0014 	add.w	r0, r7, #20
 801344a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801344e:	9302      	str	r3, [sp, #8]
 8013450:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013454:	9301      	str	r3, [sp, #4]
 8013456:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801345a:	9300      	str	r3, [sp, #0]
 801345c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801345e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013460:	68f9      	ldr	r1, [r7, #12]
 8013462:	f7fb ff6b 	bl	800f33c <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013466:	f107 0314 	add.w	r3, r7, #20
 801346a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801346c:	4619      	mov	r1, r3
 801346e:	68f8      	ldr	r0, [r7, #12]
 8013470:	47a0      	blx	r4
 8013472:	f107 0314 	add.w	r3, r7, #20
 8013476:	4618      	mov	r0, r3
 8013478:	f7fc fdce 	bl	8010018 <_ZN12CheckFailureD1Ev>
 801347c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013480:	4618      	mov	r0, r3
 8013482:	f7f9 fff6 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8013486:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801348a:	4618      	mov	r0, r3
 801348c:	f7f9 fff1 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8013490:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013494:	4618      	mov	r0, r3
 8013496:	f7f9 ffec 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 801349a:	bf00      	nop
 801349c:	3764      	adds	r7, #100	; 0x64
 801349e:	46bd      	mov	sp, r7
 80134a0:	bd90      	pop	{r4, r7, pc}

080134a2 <_ZN10UtestShell4failEPKcS1_jRK14TestTerminator>:

void UtestShell::fail(const char *text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80134a2:	b590      	push	{r4, r7, lr}
 80134a4:	b097      	sub	sp, #92	; 0x5c
 80134a6:	af02      	add	r7, sp, #8
 80134a8:	60f8      	str	r0, [r7, #12]
 80134aa:	60b9      	str	r1, [r7, #8]
 80134ac:	607a      	str	r2, [r7, #4]
 80134ae:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80134b0:	68f8      	ldr	r0, [r7, #12]
 80134b2:	f000 ffef 	bl	8014494 <_ZN10UtestShell13getTestResultEv>
 80134b6:	4603      	mov	r3, r0
 80134b8:	681a      	ldr	r2, [r3, #0]
 80134ba:	3228      	adds	r2, #40	; 0x28
 80134bc:	6812      	ldr	r2, [r2, #0]
 80134be:	4618      	mov	r0, r3
 80134c0:	4790      	blx	r2
    failWith(FailFailure(this, fileName, lineNumber, text), testTerminator);
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	339c      	adds	r3, #156	; 0x9c
 80134c8:	681c      	ldr	r4, [r3, #0]
 80134ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80134ce:	68b9      	ldr	r1, [r7, #8]
 80134d0:	4618      	mov	r0, r3
 80134d2:	f7f9 fc16 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80134d6:	f107 0014 	add.w	r0, r7, #20
 80134da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80134de:	9300      	str	r3, [sp, #0]
 80134e0:	683b      	ldr	r3, [r7, #0]
 80134e2:	687a      	ldr	r2, [r7, #4]
 80134e4:	68f9      	ldr	r1, [r7, #12]
 80134e6:	f7fb ff71 	bl	800f3cc <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 80134ea:	f107 0314 	add.w	r3, r7, #20
 80134ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80134f0:	4619      	mov	r1, r3
 80134f2:	68f8      	ldr	r0, [r7, #12]
 80134f4:	47a0      	blx	r4
 80134f6:	f107 0314 	add.w	r3, r7, #20
 80134fa:	4618      	mov	r0, r3
 80134fc:	f7f7 fc16 	bl	800ad2c <_ZN11FailFailureD1Ev>
 8013500:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013504:	4618      	mov	r0, r3
 8013506:	f7f9 ffb4 	bl	800d472 <_ZN12SimpleStringD1Ev>
} // LCOV_EXCL_LINE
 801350a:	bf00      	nop
 801350c:	3754      	adds	r7, #84	; 0x54
 801350e:	46bd      	mov	sp, r7
 8013510:	bd90      	pop	{r4, r7, pc}

08013512 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013512:	b590      	push	{r4, r7, lr}
 8013514:	b0a7      	sub	sp, #156	; 0x9c
 8013516:	af04      	add	r7, sp, #16
 8013518:	60f8      	str	r0, [r7, #12]
 801351a:	60b9      	str	r1, [r7, #8]
 801351c:	607a      	str	r2, [r7, #4]
 801351e:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013520:	68f8      	ldr	r0, [r7, #12]
 8013522:	f000 ffb7 	bl	8014494 <_ZN10UtestShell13getTestResultEv>
 8013526:	4603      	mov	r3, r0
 8013528:	681a      	ldr	r2, [r3, #0]
 801352a:	3228      	adds	r2, #40	; 0x28
 801352c:	6812      	ldr	r2, [r2, #0]
 801352e:	4618      	mov	r0, r3
 8013530:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d102      	bne.n	801353e <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x2c>
 8013538:	68bb      	ldr	r3, [r7, #8]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d068      	beq.n	8013610 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0xfe>
    if (actual == NULLPTR || expected == NULLPTR)
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d002      	beq.n	801354a <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x38>
 8013544:	68bb      	ldr	r3, [r7, #8]
 8013546:	2b00      	cmp	r3, #0
 8013548:	d12a      	bne.n	80135a0 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x8e>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	339c      	adds	r3, #156	; 0x9c
 8013550:	681c      	ldr	r4, [r3, #0]
 8013552:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013556:	6839      	ldr	r1, [r7, #0]
 8013558:	4618      	mov	r0, r3
 801355a:	f7f9 fbd2 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801355e:	f107 0010 	add.w	r0, r7, #16
 8013562:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013566:	9302      	str	r3, [sp, #8]
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	9301      	str	r3, [sp, #4]
 801356c:	68bb      	ldr	r3, [r7, #8]
 801356e:	9300      	str	r3, [sp, #0]
 8013570:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013574:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8013578:	68f9      	ldr	r1, [r7, #12]
 801357a:	f7fc f9ad 	bl	800f8d8 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 801357e:	f107 0310 	add.w	r3, r7, #16
 8013582:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8013586:	4619      	mov	r1, r3
 8013588:	68f8      	ldr	r0, [r7, #12]
 801358a:	47a0      	blx	r4
 801358c:	f107 0310 	add.w	r3, r7, #16
 8013590:	4618      	mov	r0, r3
 8013592:	f7fc fcb9 	bl	800ff08 <_ZN18StringEqualFailureD1Ev>
 8013596:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801359a:	4618      	mov	r0, r3
 801359c:	f7f9 ff69 	bl	800d472 <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrCmp(expected, actual) != 0)
 80135a0:	6879      	ldr	r1, [r7, #4]
 80135a2:	68b8      	ldr	r0, [r7, #8]
 80135a4:	f7f9 f9ea 	bl	800c97c <_ZN12SimpleString6StrCmpEPKcS1_>
 80135a8:	4603      	mov	r3, r0
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	bf14      	ite	ne
 80135ae:	2301      	movne	r3, #1
 80135b0:	2300      	moveq	r3, #0
 80135b2:	b2db      	uxtb	r3, r3
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d02c      	beq.n	8013612 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	339c      	adds	r3, #156	; 0x9c
 80135be:	681c      	ldr	r4, [r3, #0]
 80135c0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80135c4:	6839      	ldr	r1, [r7, #0]
 80135c6:	4618      	mov	r0, r3
 80135c8:	f7f9 fb9b 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80135cc:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80135d0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80135d4:	9302      	str	r3, [sp, #8]
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	9301      	str	r3, [sp, #4]
 80135da:	68bb      	ldr	r3, [r7, #8]
 80135dc:	9300      	str	r3, [sp, #0]
 80135de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80135e2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80135e6:	68f9      	ldr	r1, [r7, #12]
 80135e8:	f7fc f976 	bl	800f8d8 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80135ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80135f0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80135f4:	4619      	mov	r1, r3
 80135f6:	68f8      	ldr	r0, [r7, #12]
 80135f8:	47a0      	blx	r4
 80135fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80135fe:	4618      	mov	r0, r3
 8013600:	f7fc fc82 	bl	800ff08 <_ZN18StringEqualFailureD1Ev>
 8013604:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013608:	4618      	mov	r0, r3
 801360a:	f7f9 ff32 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801360e:	e000      	b.n	8013612 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013610:	bf00      	nop
}
 8013612:	378c      	adds	r7, #140	; 0x8c
 8013614:	46bd      	mov	sp, r7
 8013616:	bd90      	pop	{r4, r7, pc}

08013618 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrNEqual(const char* expected, const char* actual, size_t length, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013618:	b590      	push	{r4, r7, lr}
 801361a:	b0a7      	sub	sp, #156	; 0x9c
 801361c:	af04      	add	r7, sp, #16
 801361e:	60f8      	str	r0, [r7, #12]
 8013620:	60b9      	str	r1, [r7, #8]
 8013622:	607a      	str	r2, [r7, #4]
 8013624:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013626:	68f8      	ldr	r0, [r7, #12]
 8013628:	f000 ff34 	bl	8014494 <_ZN10UtestShell13getTestResultEv>
 801362c:	4603      	mov	r3, r0
 801362e:	681a      	ldr	r2, [r3, #0]
 8013630:	3228      	adds	r2, #40	; 0x28
 8013632:	6812      	ldr	r2, [r2, #0]
 8013634:	4618      	mov	r0, r3
 8013636:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d102      	bne.n	8013644 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x2c>
 801363e:	68bb      	ldr	r3, [r7, #8]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d06b      	beq.n	801371c <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x104>
    if (actual == NULLPTR || expected == NULLPTR)
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d002      	beq.n	8013650 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x38>
 801364a:	68bb      	ldr	r3, [r7, #8]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d12b      	bne.n	80136a8 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x90>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	339c      	adds	r3, #156	; 0x9c
 8013656:	681c      	ldr	r4, [r3, #0]
 8013658:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801365c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8013660:	4618      	mov	r0, r3
 8013662:	f7f9 fb4e 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8013666:	f107 0010 	add.w	r0, r7, #16
 801366a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801366e:	9302      	str	r3, [sp, #8]
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	9301      	str	r3, [sp, #4]
 8013674:	68bb      	ldr	r3, [r7, #8]
 8013676:	9300      	str	r3, [sp, #0]
 8013678:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801367c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8013680:	68f9      	ldr	r1, [r7, #12]
 8013682:	f7fc f929 	bl	800f8d8 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8013686:	f107 0310 	add.w	r3, r7, #16
 801368a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801368e:	4619      	mov	r1, r3
 8013690:	68f8      	ldr	r0, [r7, #12]
 8013692:	47a0      	blx	r4
 8013694:	f107 0310 	add.w	r3, r7, #16
 8013698:	4618      	mov	r0, r3
 801369a:	f7fc fc35 	bl	800ff08 <_ZN18StringEqualFailureD1Ev>
 801369e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80136a2:	4618      	mov	r0, r3
 80136a4:	f7f9 fee5 	bl	800d472 <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrNCmp(expected, actual, length) != 0)
 80136a8:	683a      	ldr	r2, [r7, #0]
 80136aa:	6879      	ldr	r1, [r7, #4]
 80136ac:	68b8      	ldr	r0, [r7, #8]
 80136ae:	f7f9 f9a4 	bl	800c9fa <_ZN12SimpleString7StrNCmpEPKcS1_j>
 80136b2:	4603      	mov	r3, r0
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	bf14      	ite	ne
 80136b8:	2301      	movne	r3, #1
 80136ba:	2300      	moveq	r3, #0
 80136bc:	b2db      	uxtb	r3, r3
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d02d      	beq.n	801371e <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	339c      	adds	r3, #156	; 0x9c
 80136c8:	681c      	ldr	r4, [r3, #0]
 80136ca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80136ce:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80136d2:	4618      	mov	r0, r3
 80136d4:	f7f9 fb15 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80136d8:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80136dc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80136e0:	9302      	str	r3, [sp, #8]
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	9301      	str	r3, [sp, #4]
 80136e6:	68bb      	ldr	r3, [r7, #8]
 80136e8:	9300      	str	r3, [sp, #0]
 80136ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80136ee:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80136f2:	68f9      	ldr	r1, [r7, #12]
 80136f4:	f7fc f8f0 	bl	800f8d8 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80136f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80136fc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8013700:	4619      	mov	r1, r3
 8013702:	68f8      	ldr	r0, [r7, #12]
 8013704:	47a0      	blx	r4
 8013706:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801370a:	4618      	mov	r0, r3
 801370c:	f7fc fbfc 	bl	800ff08 <_ZN18StringEqualFailureD1Ev>
 8013710:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013714:	4618      	mov	r0, r3
 8013716:	f7f9 feac 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801371a:	e000      	b.n	801371e <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
    if (actual == NULLPTR && expected == NULLPTR) return;
 801371c:	bf00      	nop
}
 801371e:	378c      	adds	r7, #140	; 0x8c
 8013720:	46bd      	mov	sp, r7
 8013722:	bd90      	pop	{r4, r7, pc}

08013724 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8013724:	b590      	push	{r4, r7, lr}
 8013726:	b0ab      	sub	sp, #172	; 0xac
 8013728:	af04      	add	r7, sp, #16
 801372a:	60f8      	str	r0, [r7, #12]
 801372c:	60b9      	str	r1, [r7, #8]
 801372e:	607a      	str	r2, [r7, #4]
 8013730:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013732:	68f8      	ldr	r0, [r7, #12]
 8013734:	f000 feae 	bl	8014494 <_ZN10UtestShell13getTestResultEv>
 8013738:	4603      	mov	r3, r0
 801373a:	681a      	ldr	r2, [r3, #0]
 801373c:	3228      	adds	r2, #40	; 0x28
 801373e:	6812      	ldr	r2, [r2, #0]
 8013740:	4618      	mov	r0, r3
 8013742:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	2b00      	cmp	r3, #0
 8013748:	d102      	bne.n	8013750 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x2c>
 801374a:	68bb      	ldr	r3, [r7, #8]
 801374c:	2b00      	cmp	r3, #0
 801374e:	d07c      	beq.n	801384a <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x126>
    if (actual == NULLPTR || expected == NULLPTR)
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	2b00      	cmp	r3, #0
 8013754:	d002      	beq.n	801375c <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x38>
 8013756:	68bb      	ldr	r3, [r7, #8]
 8013758:	2b00      	cmp	r3, #0
 801375a:	d128      	bne.n	80137ae <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x8a>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 801375c:	68fb      	ldr	r3, [r7, #12]
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	3398      	adds	r3, #152	; 0x98
 8013762:	681c      	ldr	r4, [r3, #0]
 8013764:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013768:	6839      	ldr	r1, [r7, #0]
 801376a:	4618      	mov	r0, r3
 801376c:	f7f9 fac9 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8013770:	f107 0010 	add.w	r0, r7, #16
 8013774:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013778:	9302      	str	r3, [sp, #8]
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	9301      	str	r3, [sp, #4]
 801377e:	68bb      	ldr	r3, [r7, #8]
 8013780:	9300      	str	r3, [sp, #0]
 8013782:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013786:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801378a:	68f9      	ldr	r1, [r7, #12]
 801378c:	f7fc f948 	bl	800fa20 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8013790:	f107 0310 	add.w	r3, r7, #16
 8013794:	4619      	mov	r1, r3
 8013796:	68f8      	ldr	r0, [r7, #12]
 8013798:	47a0      	blx	r4
 801379a:	f107 0310 	add.w	r3, r7, #16
 801379e:	4618      	mov	r0, r3
 80137a0:	f7fc fb90 	bl	800fec4 <_ZN24StringEqualNoCaseFailureD1Ev>
 80137a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80137a8:	4618      	mov	r0, r3
 80137aa:	f7f9 fe62 	bl	800d472 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(expected).equalsNoCase(actual))
 80137ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80137b2:	68b9      	ldr	r1, [r7, #8]
 80137b4:	4618      	mov	r0, r3
 80137b6:	f7f9 faa4 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80137ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80137be:	6879      	ldr	r1, [r7, #4]
 80137c0:	4618      	mov	r0, r3
 80137c2:	f7f9 fa9e 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80137c6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80137ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80137ce:	4611      	mov	r1, r2
 80137d0:	4618      	mov	r0, r3
 80137d2:	f7f9 fe75 	bl	800d4c0 <_ZNK12SimpleString12equalsNoCaseERKS_>
 80137d6:	4603      	mov	r3, r0
 80137d8:	f083 0301 	eor.w	r3, r3, #1
 80137dc:	b2dc      	uxtb	r4, r3
 80137de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80137e2:	4618      	mov	r0, r3
 80137e4:	f7f9 fe45 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80137e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80137ec:	4618      	mov	r0, r3
 80137ee:	f7f9 fe40 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80137f2:	2c00      	cmp	r4, #0
 80137f4:	d02a      	beq.n	801384c <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	3398      	adds	r3, #152	; 0x98
 80137fc:	681c      	ldr	r4, [r3, #0]
 80137fe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8013802:	6839      	ldr	r1, [r7, #0]
 8013804:	4618      	mov	r0, r3
 8013806:	f7f9 fa7c 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801380a:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 801380e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8013812:	9302      	str	r3, [sp, #8]
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	9301      	str	r3, [sp, #4]
 8013818:	68bb      	ldr	r3, [r7, #8]
 801381a:	9300      	str	r3, [sp, #0]
 801381c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013820:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8013824:	68f9      	ldr	r1, [r7, #12]
 8013826:	f7fc f8fb 	bl	800fa20 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 801382a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801382e:	4619      	mov	r1, r3
 8013830:	68f8      	ldr	r0, [r7, #12]
 8013832:	47a0      	blx	r4
 8013834:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013838:	4618      	mov	r0, r3
 801383a:	f7fc fb43 	bl	800fec4 <_ZN24StringEqualNoCaseFailureD1Ev>
 801383e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8013842:	4618      	mov	r0, r3
 8013844:	f7f9 fe15 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8013848:	e000      	b.n	801384c <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
    if (actual == NULLPTR && expected == NULLPTR) return;
 801384a:	bf00      	nop
}
 801384c:	379c      	adds	r7, #156	; 0x9c
 801384e:	46bd      	mov	sp, r7
 8013850:	bd90      	pop	{r4, r7, pc}

08013852 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8013852:	b590      	push	{r4, r7, lr}
 8013854:	b0b3      	sub	sp, #204	; 0xcc
 8013856:	af04      	add	r7, sp, #16
 8013858:	60f8      	str	r0, [r7, #12]
 801385a:	60b9      	str	r1, [r7, #8]
 801385c:	607a      	str	r2, [r7, #4]
 801385e:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013860:	68f8      	ldr	r0, [r7, #12]
 8013862:	f000 fe17 	bl	8014494 <_ZN10UtestShell13getTestResultEv>
 8013866:	4603      	mov	r3, r0
 8013868:	681a      	ldr	r2, [r3, #0]
 801386a:	3228      	adds	r2, #40	; 0x28
 801386c:	6812      	ldr	r2, [r2, #0]
 801386e:	4618      	mov	r0, r3
 8013870:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d103      	bne.n	8013880 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x2e>
 8013878:	68bb      	ldr	r3, [r7, #8]
 801387a:	2b00      	cmp	r3, #0
 801387c:	f000 80ad 	beq.w	80139da <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d002      	beq.n	801388c <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x3a>
 8013886:	68bb      	ldr	r3, [r7, #8]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d140      	bne.n	801390e <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	3398      	adds	r3, #152	; 0x98
 8013892:	681c      	ldr	r4, [r3, #0]
 8013894:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013898:	68b9      	ldr	r1, [r7, #8]
 801389a:	4618      	mov	r0, r3
 801389c:	f7f9 fa31 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80138a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80138a4:	6879      	ldr	r1, [r7, #4]
 80138a6:	4618      	mov	r0, r3
 80138a8:	f7f9 fa2b 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80138ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80138b0:	6839      	ldr	r1, [r7, #0]
 80138b2:	4618      	mov	r0, r3
 80138b4:	f7f9 fa25 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80138b8:	f107 0010 	add.w	r0, r7, #16
 80138bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80138c0:	9302      	str	r3, [sp, #8]
 80138c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80138c6:	9301      	str	r3, [sp, #4]
 80138c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80138cc:	9300      	str	r3, [sp, #0]
 80138ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80138d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80138d6:	68f9      	ldr	r1, [r7, #12]
 80138d8:	f7fb fce6 	bl	800f2a8 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80138dc:	f107 0310 	add.w	r3, r7, #16
 80138e0:	4619      	mov	r1, r3
 80138e2:	68f8      	ldr	r0, [r7, #12]
 80138e4:	47a0      	blx	r4
 80138e6:	f107 0310 	add.w	r3, r7, #16
 80138ea:	4618      	mov	r0, r3
 80138ec:	f7fc fbb6 	bl	801005c <_ZN15ContainsFailureD1Ev>
 80138f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80138f4:	4618      	mov	r0, r3
 80138f6:	f7f9 fdbc 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80138fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80138fe:	4618      	mov	r0, r3
 8013900:	f7f9 fdb7 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8013904:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013908:	4618      	mov	r0, r3
 801390a:	f7f9 fdb2 	bl	800d472 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).contains(expected))
 801390e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013912:	6879      	ldr	r1, [r7, #4]
 8013914:	4618      	mov	r0, r3
 8013916:	f7f9 f9f4 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801391a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801391e:	68b9      	ldr	r1, [r7, #8]
 8013920:	4618      	mov	r0, r3
 8013922:	f7f9 f9ee 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8013926:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801392a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801392e:	4611      	mov	r1, r2
 8013930:	4618      	mov	r0, r3
 8013932:	f7f9 fa64 	bl	800cdfe <_ZNK12SimpleString8containsERKS_>
 8013936:	4603      	mov	r3, r0
 8013938:	f083 0301 	eor.w	r3, r3, #1
 801393c:	b2dc      	uxtb	r4, r3
 801393e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013942:	4618      	mov	r0, r3
 8013944:	f7f9 fd95 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8013948:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801394c:	4618      	mov	r0, r3
 801394e:	f7f9 fd90 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8013952:	2c00      	cmp	r4, #0
 8013954:	d042      	beq.n	80139dc <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	3398      	adds	r3, #152	; 0x98
 801395c:	681c      	ldr	r4, [r3, #0]
 801395e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013962:	68b9      	ldr	r1, [r7, #8]
 8013964:	4618      	mov	r0, r3
 8013966:	f7f9 f9cc 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801396a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801396e:	6879      	ldr	r1, [r7, #4]
 8013970:	4618      	mov	r0, r3
 8013972:	f7f9 f9c6 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8013976:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801397a:	6839      	ldr	r1, [r7, #0]
 801397c:	4618      	mov	r0, r3
 801397e:	f7f9 f9c0 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8013982:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8013986:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801398a:	9302      	str	r3, [sp, #8]
 801398c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013990:	9301      	str	r3, [sp, #4]
 8013992:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013996:	9300      	str	r3, [sp, #0]
 8013998:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801399c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80139a0:	68f9      	ldr	r1, [r7, #12]
 80139a2:	f7fb fc81 	bl	800f2a8 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80139a6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80139aa:	4619      	mov	r1, r3
 80139ac:	68f8      	ldr	r0, [r7, #12]
 80139ae:	47a0      	blx	r4
 80139b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80139b4:	4618      	mov	r0, r3
 80139b6:	f7fc fb51 	bl	801005c <_ZN15ContainsFailureD1Ev>
 80139ba:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80139be:	4618      	mov	r0, r3
 80139c0:	f7f9 fd57 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80139c4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80139c8:	4618      	mov	r0, r3
 80139ca:	f7f9 fd52 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80139ce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80139d2:	4618      	mov	r0, r3
 80139d4:	f7f9 fd4d 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80139d8:	e000      	b.n	80139dc <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80139da:	bf00      	nop
}
 80139dc:	37bc      	adds	r7, #188	; 0xbc
 80139de:	46bd      	mov	sp, r7
 80139e0:	bd90      	pop	{r4, r7, pc}

080139e2 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 80139e2:	b590      	push	{r4, r7, lr}
 80139e4:	b0b3      	sub	sp, #204	; 0xcc
 80139e6:	af04      	add	r7, sp, #16
 80139e8:	60f8      	str	r0, [r7, #12]
 80139ea:	60b9      	str	r1, [r7, #8]
 80139ec:	607a      	str	r2, [r7, #4]
 80139ee:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80139f0:	68f8      	ldr	r0, [r7, #12]
 80139f2:	f000 fd4f 	bl	8014494 <_ZN10UtestShell13getTestResultEv>
 80139f6:	4603      	mov	r3, r0
 80139f8:	681a      	ldr	r2, [r3, #0]
 80139fa:	3228      	adds	r2, #40	; 0x28
 80139fc:	6812      	ldr	r2, [r2, #0]
 80139fe:	4618      	mov	r0, r3
 8013a00:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d103      	bne.n	8013a10 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x2e>
 8013a08:	68bb      	ldr	r3, [r7, #8]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	f000 80ad 	beq.w	8013b6a <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d002      	beq.n	8013a1c <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x3a>
 8013a16:	68bb      	ldr	r3, [r7, #8]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d140      	bne.n	8013a9e <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	3398      	adds	r3, #152	; 0x98
 8013a22:	681c      	ldr	r4, [r3, #0]
 8013a24:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013a28:	68b9      	ldr	r1, [r7, #8]
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	f7f9 f969 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8013a30:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013a34:	6879      	ldr	r1, [r7, #4]
 8013a36:	4618      	mov	r0, r3
 8013a38:	f7f9 f963 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8013a3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013a40:	6839      	ldr	r1, [r7, #0]
 8013a42:	4618      	mov	r0, r3
 8013a44:	f7f9 f95d 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8013a48:	f107 0010 	add.w	r0, r7, #16
 8013a4c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013a50:	9302      	str	r3, [sp, #8]
 8013a52:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013a56:	9301      	str	r3, [sp, #4]
 8013a58:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013a5c:	9300      	str	r3, [sp, #0]
 8013a5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013a62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8013a66:	68f9      	ldr	r1, [r7, #12]
 8013a68:	f7fb fc1e 	bl	800f2a8 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013a6c:	f107 0310 	add.w	r3, r7, #16
 8013a70:	4619      	mov	r1, r3
 8013a72:	68f8      	ldr	r0, [r7, #12]
 8013a74:	47a0      	blx	r4
 8013a76:	f107 0310 	add.w	r3, r7, #16
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	f7fc faee 	bl	801005c <_ZN15ContainsFailureD1Ev>
 8013a80:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013a84:	4618      	mov	r0, r3
 8013a86:	f7f9 fcf4 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8013a8a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013a8e:	4618      	mov	r0, r3
 8013a90:	f7f9 fcef 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8013a94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013a98:	4618      	mov	r0, r3
 8013a9a:	f7f9 fcea 	bl	800d472 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).containsNoCase(expected))
 8013a9e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013aa2:	6879      	ldr	r1, [r7, #4]
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	f7f9 f92c 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8013aaa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013aae:	68b9      	ldr	r1, [r7, #8]
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	f7f9 f926 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8013ab6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8013aba:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013abe:	4611      	mov	r1, r2
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	f7f9 f9b7 	bl	800ce34 <_ZNK12SimpleString14containsNoCaseERKS_>
 8013ac6:	4603      	mov	r3, r0
 8013ac8:	f083 0301 	eor.w	r3, r3, #1
 8013acc:	b2dc      	uxtb	r4, r3
 8013ace:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	f7f9 fccd 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8013ad8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013adc:	4618      	mov	r0, r3
 8013ade:	f7f9 fcc8 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8013ae2:	2c00      	cmp	r4, #0
 8013ae4:	d042      	beq.n	8013b6c <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	3398      	adds	r3, #152	; 0x98
 8013aec:	681c      	ldr	r4, [r3, #0]
 8013aee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013af2:	68b9      	ldr	r1, [r7, #8]
 8013af4:	4618      	mov	r0, r3
 8013af6:	f7f9 f904 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8013afa:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013afe:	6879      	ldr	r1, [r7, #4]
 8013b00:	4618      	mov	r0, r3
 8013b02:	f7f9 f8fe 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8013b06:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013b0a:	6839      	ldr	r1, [r7, #0]
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	f7f9 f8f8 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8013b12:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8013b16:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013b1a:	9302      	str	r3, [sp, #8]
 8013b1c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013b20:	9301      	str	r3, [sp, #4]
 8013b22:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013b26:	9300      	str	r3, [sp, #0]
 8013b28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013b2c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8013b30:	68f9      	ldr	r1, [r7, #12]
 8013b32:	f7fb fbb9 	bl	800f2a8 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013b36:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013b3a:	4619      	mov	r1, r3
 8013b3c:	68f8      	ldr	r0, [r7, #12]
 8013b3e:	47a0      	blx	r4
 8013b40:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013b44:	4618      	mov	r0, r3
 8013b46:	f7fc fa89 	bl	801005c <_ZN15ContainsFailureD1Ev>
 8013b4a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013b4e:	4618      	mov	r0, r3
 8013b50:	f7f9 fc8f 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8013b54:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013b58:	4618      	mov	r0, r3
 8013b5a:	f7f9 fc8a 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8013b5e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013b62:	4618      	mov	r0, r3
 8013b64:	f7f9 fc85 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8013b68:	e000      	b.n	8013b6c <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013b6a:	bf00      	nop
}
 8013b6c:	37bc      	adds	r7, #188	; 0xbc
 8013b6e:	46bd      	mov	sp, r7
 8013b70:	bd90      	pop	{r4, r7, pc}

08013b72 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator>:

void UtestShell::assertLongsEqual(long expected, long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013b72:	b590      	push	{r4, r7, lr}
 8013b74:	b099      	sub	sp, #100	; 0x64
 8013b76:	af04      	add	r7, sp, #16
 8013b78:	60f8      	str	r0, [r7, #12]
 8013b7a:	60b9      	str	r1, [r7, #8]
 8013b7c:	607a      	str	r2, [r7, #4]
 8013b7e:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013b80:	68f8      	ldr	r0, [r7, #12]
 8013b82:	f000 fc87 	bl	8014494 <_ZN10UtestShell13getTestResultEv>
 8013b86:	4603      	mov	r3, r0
 8013b88:	681a      	ldr	r2, [r3, #0]
 8013b8a:	3228      	adds	r2, #40	; 0x28
 8013b8c:	6812      	ldr	r2, [r2, #0]
 8013b8e:	4618      	mov	r0, r3
 8013b90:	4790      	blx	r2
    if (expected != actual)
 8013b92:	68ba      	ldr	r2, [r7, #8]
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	429a      	cmp	r2, r3
 8013b98:	d027      	beq.n	8013bea <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator+0x78>
        failWith(LongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	339c      	adds	r3, #156	; 0x9c
 8013ba0:	681c      	ldr	r4, [r3, #0]
 8013ba2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013ba6:	6839      	ldr	r1, [r7, #0]
 8013ba8:	4618      	mov	r0, r3
 8013baa:	f7f9 f8aa 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8013bae:	f107 0014 	add.w	r0, r7, #20
 8013bb2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013bb6:	9302      	str	r3, [sp, #8]
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	9301      	str	r3, [sp, #4]
 8013bbc:	68bb      	ldr	r3, [r7, #8]
 8013bbe:	9300      	str	r3, [sp, #0]
 8013bc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013bc2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013bc4:	68f9      	ldr	r1, [r7, #12]
 8013bc6:	f7fb fc1f 	bl	800f408 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>
 8013bca:	f107 0314 	add.w	r3, r7, #20
 8013bce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013bd0:	4619      	mov	r1, r3
 8013bd2:	68f8      	ldr	r0, [r7, #12]
 8013bd4:	47a0      	blx	r4
 8013bd6:	f107 0314 	add.w	r3, r7, #20
 8013bda:	4618      	mov	r0, r3
 8013bdc:	f7fc f9fa 	bl	800ffd4 <_ZN17LongsEqualFailureD1Ev>
 8013be0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013be4:	4618      	mov	r0, r3
 8013be6:	f7f9 fc44 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 8013bea:	bf00      	nop
 8013bec:	3754      	adds	r7, #84	; 0x54
 8013bee:	46bd      	mov	sp, r7
 8013bf0:	bd90      	pop	{r4, r7, pc}

08013bf2 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongsEqual(unsigned long expected, unsigned long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013bf2:	b590      	push	{r4, r7, lr}
 8013bf4:	b099      	sub	sp, #100	; 0x64
 8013bf6:	af04      	add	r7, sp, #16
 8013bf8:	60f8      	str	r0, [r7, #12]
 8013bfa:	60b9      	str	r1, [r7, #8]
 8013bfc:	607a      	str	r2, [r7, #4]
 8013bfe:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013c00:	68f8      	ldr	r0, [r7, #12]
 8013c02:	f000 fc47 	bl	8014494 <_ZN10UtestShell13getTestResultEv>
 8013c06:	4603      	mov	r3, r0
 8013c08:	681a      	ldr	r2, [r3, #0]
 8013c0a:	3228      	adds	r2, #40	; 0x28
 8013c0c:	6812      	ldr	r2, [r2, #0]
 8013c0e:	4618      	mov	r0, r3
 8013c10:	4790      	blx	r2
    if (expected != actual)
 8013c12:	68ba      	ldr	r2, [r7, #8]
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	429a      	cmp	r2, r3
 8013c18:	d027      	beq.n	8013c6a <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator+0x78>
        failWith(UnsignedLongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	339c      	adds	r3, #156	; 0x9c
 8013c20:	681c      	ldr	r4, [r3, #0]
 8013c22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013c26:	6839      	ldr	r1, [r7, #0]
 8013c28:	4618      	mov	r0, r3
 8013c2a:	f7f9 f86a 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8013c2e:	f107 0014 	add.w	r0, r7, #20
 8013c32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013c36:	9302      	str	r3, [sp, #8]
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	9301      	str	r3, [sp, #4]
 8013c3c:	68bb      	ldr	r3, [r7, #8]
 8013c3e:	9300      	str	r3, [sp, #0]
 8013c40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013c42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013c44:	68f9      	ldr	r1, [r7, #12]
 8013c46:	f7fb fcab 	bl	800f5a0 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>
 8013c4a:	f107 0314 	add.w	r3, r7, #20
 8013c4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013c50:	4619      	mov	r1, r3
 8013c52:	68f8      	ldr	r0, [r7, #12]
 8013c54:	47a0      	blx	r4
 8013c56:	f107 0314 	add.w	r3, r7, #20
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	f7fc f998 	bl	800ff90 <_ZN25UnsignedLongsEqualFailureD1Ev>
 8013c60:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013c64:	4618      	mov	r0, r3
 8013c66:	f7f9 fc04 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 8013c6a:	bf00      	nop
 8013c6c:	3754      	adds	r7, #84	; 0x54
 8013c6e:	46bd      	mov	sp, r7
 8013c70:	bd90      	pop	{r4, r7, pc}
	...

08013c74 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertLongLongsEqual(cpputest_longlong expected, cpputest_longlong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013c74:	b082      	sub	sp, #8
 8013c76:	b590      	push	{r4, r7, lr}
 8013c78:	b099      	sub	sp, #100	; 0x64
 8013c7a:	af02      	add	r7, sp, #8
 8013c7c:	60f8      	str	r0, [r7, #12]
 8013c7e:	1d38      	adds	r0, r7, #4
 8013c80:	e880 0006 	stmia.w	r0, {r1, r2}
 8013c84:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 8013c86:	68f8      	ldr	r0, [r7, #12]
 8013c88:	f000 fc04 	bl	8014494 <_ZN10UtestShell13getTestResultEv>
 8013c8c:	4603      	mov	r3, r0
 8013c8e:	681a      	ldr	r2, [r3, #0]
 8013c90:	3228      	adds	r2, #40	; 0x28
 8013c92:	6812      	ldr	r2, [r2, #0]
 8013c94:	4618      	mov	r0, r3
 8013c96:	4790      	blx	r2
    if (expected != actual)
        failWith(LongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	339c      	adds	r3, #156	; 0x9c
 8013c9e:	681c      	ldr	r4, [r3, #0]
 8013ca0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013ca4:	4919      	ldr	r1, [pc, #100]	; (8013d0c <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator+0x98>)
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	f7f9 f82b 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8013cac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013cb0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	f7f9 f825 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8013cb8:	f107 0014 	add.w	r0, r7, #20
 8013cbc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013cc0:	9301      	str	r3, [sp, #4]
 8013cc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013cc6:	9300      	str	r3, [sp, #0]
 8013cc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013cca:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013ccc:	68f9      	ldr	r1, [r7, #12]
 8013cce:	f7fc f84d 	bl	800fd6c <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8013cd2:	f107 0314 	add.w	r3, r7, #20
 8013cd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013cda:	4619      	mov	r1, r3
 8013cdc:	68f8      	ldr	r0, [r7, #12]
 8013cde:	47a0      	blx	r4
 8013ce0:	f107 0314 	add.w	r3, r7, #20
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	f7fc f887 	bl	800fdf8 <_ZN25FeatureUnsupportedFailureD1Ev>
 8013cea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f7f9 fbbf 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8013cf4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	f7f9 fbba 	bl	800d472 <_ZN12SimpleStringD1Ev>
#endif
}
 8013cfe:	bf00      	nop
 8013d00:	375c      	adds	r7, #92	; 0x5c
 8013d02:	46bd      	mov	sp, r7
 8013d04:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8013d08:	b002      	add	sp, #8
 8013d0a:	4770      	bx	lr
 8013d0c:	080251bc 	.word	0x080251bc

08013d10 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongLongsEqual(cpputest_ulonglong expected, cpputest_ulonglong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013d10:	b082      	sub	sp, #8
 8013d12:	b590      	push	{r4, r7, lr}
 8013d14:	b099      	sub	sp, #100	; 0x64
 8013d16:	af02      	add	r7, sp, #8
 8013d18:	60f8      	str	r0, [r7, #12]
 8013d1a:	1d38      	adds	r0, r7, #4
 8013d1c:	e880 0006 	stmia.w	r0, {r1, r2}
 8013d20:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 8013d22:	68f8      	ldr	r0, [r7, #12]
 8013d24:	f000 fbb6 	bl	8014494 <_ZN10UtestShell13getTestResultEv>
 8013d28:	4603      	mov	r3, r0
 8013d2a:	681a      	ldr	r2, [r3, #0]
 8013d2c:	3228      	adds	r2, #40	; 0x28
 8013d2e:	6812      	ldr	r2, [r2, #0]
 8013d30:	4618      	mov	r0, r3
 8013d32:	4790      	blx	r2
    if (expected != actual)
        failWith(UnsignedLongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	339c      	adds	r3, #156	; 0x9c
 8013d3a:	681c      	ldr	r4, [r3, #0]
 8013d3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013d40:	4919      	ldr	r1, [pc, #100]	; (8013da8 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator+0x98>)
 8013d42:	4618      	mov	r0, r3
 8013d44:	f7f8 ffdd 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8013d48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013d4c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f7f8 ffd7 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8013d54:	f107 0014 	add.w	r0, r7, #20
 8013d58:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013d5c:	9301      	str	r3, [sp, #4]
 8013d5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013d62:	9300      	str	r3, [sp, #0]
 8013d64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013d66:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013d68:	68f9      	ldr	r1, [r7, #12]
 8013d6a:	f7fb ffff 	bl	800fd6c <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8013d6e:	f107 0314 	add.w	r3, r7, #20
 8013d72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013d76:	4619      	mov	r1, r3
 8013d78:	68f8      	ldr	r0, [r7, #12]
 8013d7a:	47a0      	blx	r4
 8013d7c:	f107 0314 	add.w	r3, r7, #20
 8013d80:	4618      	mov	r0, r3
 8013d82:	f7fc f839 	bl	800fdf8 <_ZN25FeatureUnsupportedFailureD1Ev>
 8013d86:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	f7f9 fb71 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8013d90:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013d94:	4618      	mov	r0, r3
 8013d96:	f7f9 fb6c 	bl	800d472 <_ZN12SimpleStringD1Ev>
#endif
}
 8013d9a:	bf00      	nop
 8013d9c:	375c      	adds	r7, #92	; 0x5c
 8013d9e:	46bd      	mov	sp, r7
 8013da0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8013da4:	b002      	add	sp, #8
 8013da6:	4770      	bx	lr
 8013da8:	080251bc 	.word	0x080251bc

08013dac <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator>:

void UtestShell::assertSignedBytesEqual(signed char expected, signed char actual, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013dac:	b590      	push	{r4, r7, lr}
 8013dae:	b099      	sub	sp, #100	; 0x64
 8013db0:	af04      	add	r7, sp, #16
 8013db2:	60f8      	str	r0, [r7, #12]
 8013db4:	607b      	str	r3, [r7, #4]
 8013db6:	460b      	mov	r3, r1
 8013db8:	72fb      	strb	r3, [r7, #11]
 8013dba:	4613      	mov	r3, r2
 8013dbc:	72bb      	strb	r3, [r7, #10]
    getTestResult()->countCheck();
 8013dbe:	68f8      	ldr	r0, [r7, #12]
 8013dc0:	f000 fb68 	bl	8014494 <_ZN10UtestShell13getTestResultEv>
 8013dc4:	4603      	mov	r3, r0
 8013dc6:	681a      	ldr	r2, [r3, #0]
 8013dc8:	3228      	adds	r2, #40	; 0x28
 8013dca:	6812      	ldr	r2, [r2, #0]
 8013dcc:	4618      	mov	r0, r3
 8013dce:	4790      	blx	r2
    if (expected != actual)
 8013dd0:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8013dd4:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8013dd8:	429a      	cmp	r2, r3
 8013dda:	d029      	beq.n	8013e30 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator+0x84>
        failWith(SignedBytesEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	339c      	adds	r3, #156	; 0x9c
 8013de2:	681c      	ldr	r4, [r3, #0]
 8013de4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013de8:	6879      	ldr	r1, [r7, #4]
 8013dea:	4618      	mov	r0, r3
 8013dec:	f7f8 ff89 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8013df0:	f107 0014 	add.w	r0, r7, #20
 8013df4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013df8:	9302      	str	r3, [sp, #8]
 8013dfa:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8013dfe:	9301      	str	r3, [sp, #4]
 8013e00:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013e04:	9300      	str	r3, [sp, #0]
 8013e06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013e08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013e0a:	68f9      	ldr	r1, [r7, #12]
 8013e0c:	f7fb fc94 	bl	800f738 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>
 8013e10:	f107 0314 	add.w	r3, r7, #20
 8013e14:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013e16:	4619      	mov	r1, r3
 8013e18:	68f8      	ldr	r0, [r7, #12]
 8013e1a:	47a0      	blx	r4
 8013e1c:	f107 0314 	add.w	r3, r7, #20
 8013e20:	4618      	mov	r0, r3
 8013e22:	f7fc f893 	bl	800ff4c <_ZN23SignedBytesEqualFailureD1Ev>
 8013e26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	f7f9 fb21 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 8013e30:	bf00      	nop
 8013e32:	3754      	adds	r7, #84	; 0x54
 8013e34:	46bd      	mov	sp, r7
 8013e36:	bd90      	pop	{r4, r7, pc}

08013e38 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertPointersEqual(const void* expected, const void* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013e38:	b590      	push	{r4, r7, lr}
 8013e3a:	b09d      	sub	sp, #116	; 0x74
 8013e3c:	af04      	add	r7, sp, #16
 8013e3e:	60f8      	str	r0, [r7, #12]
 8013e40:	60b9      	str	r1, [r7, #8]
 8013e42:	607a      	str	r2, [r7, #4]
 8013e44:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013e46:	68f8      	ldr	r0, [r7, #12]
 8013e48:	f000 fb24 	bl	8014494 <_ZN10UtestShell13getTestResultEv>
 8013e4c:	4603      	mov	r3, r0
 8013e4e:	681a      	ldr	r2, [r3, #0]
 8013e50:	3228      	adds	r2, #40	; 0x28
 8013e52:	6812      	ldr	r2, [r2, #0]
 8013e54:	4618      	mov	r0, r3
 8013e56:	4790      	blx	r2
    if (expected != actual)
 8013e58:	68ba      	ldr	r2, [r7, #8]
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	429a      	cmp	r2, r3
 8013e5e:	d03f      	beq.n	8013ee0 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	339c      	adds	r3, #156	; 0x9c
 8013e66:	681c      	ldr	r4, [r3, #0]
 8013e68:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013e6c:	68b9      	ldr	r1, [r7, #8]
 8013e6e:	4618      	mov	r0, r3
 8013e70:	f7f9 fdea 	bl	800da48 <_Z10StringFromPKv>
 8013e74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013e78:	6879      	ldr	r1, [r7, #4]
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	f7f9 fde4 	bl	800da48 <_Z10StringFromPKv>
 8013e80:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013e84:	6839      	ldr	r1, [r7, #0]
 8013e86:	4618      	mov	r0, r3
 8013e88:	f7f8 ff3b 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8013e8c:	f107 0014 	add.w	r0, r7, #20
 8013e90:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013e94:	9302      	str	r3, [sp, #8]
 8013e96:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013e9a:	9301      	str	r3, [sp, #4]
 8013e9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013ea0:	9300      	str	r3, [sp, #0]
 8013ea2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013ea4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013ea6:	68f9      	ldr	r1, [r7, #12]
 8013ea8:	f7fb f814 	bl	800eed4 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013eac:	f107 0314 	add.w	r3, r7, #20
 8013eb0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013eb2:	4619      	mov	r1, r3
 8013eb4:	68f8      	ldr	r0, [r7, #12]
 8013eb6:	47a0      	blx	r4
 8013eb8:	f107 0314 	add.w	r3, r7, #20
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	f7fc f955 	bl	801016c <_ZN13EqualsFailureD1Ev>
 8013ec2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	f7f9 fad3 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8013ecc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	f7f9 face 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8013ed6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013eda:	4618      	mov	r0, r3
 8013edc:	f7f9 fac9 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 8013ee0:	bf00      	nop
 8013ee2:	3764      	adds	r7, #100	; 0x64
 8013ee4:	46bd      	mov	sp, r7
 8013ee6:	bd90      	pop	{r4, r7, pc}

08013ee8 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertFunctionPointersEqual(void (*expected)(), void (*actual)(), const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013ee8:	b590      	push	{r4, r7, lr}
 8013eea:	b09d      	sub	sp, #116	; 0x74
 8013eec:	af04      	add	r7, sp, #16
 8013eee:	60f8      	str	r0, [r7, #12]
 8013ef0:	60b9      	str	r1, [r7, #8]
 8013ef2:	607a      	str	r2, [r7, #4]
 8013ef4:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013ef6:	68f8      	ldr	r0, [r7, #12]
 8013ef8:	f000 facc 	bl	8014494 <_ZN10UtestShell13getTestResultEv>
 8013efc:	4603      	mov	r3, r0
 8013efe:	681a      	ldr	r2, [r3, #0]
 8013f00:	3228      	adds	r2, #40	; 0x28
 8013f02:	6812      	ldr	r2, [r2, #0]
 8013f04:	4618      	mov	r0, r3
 8013f06:	4790      	blx	r2
    if (expected != actual)
 8013f08:	68ba      	ldr	r2, [r7, #8]
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	429a      	cmp	r2, r3
 8013f0e:	d03f      	beq.n	8013f90 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	339c      	adds	r3, #156	; 0x9c
 8013f16:	681c      	ldr	r4, [r3, #0]
 8013f18:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013f1c:	68b9      	ldr	r1, [r7, #8]
 8013f1e:	4618      	mov	r0, r3
 8013f20:	f7f9 fdbc 	bl	800da9c <_Z10StringFromPFvvE>
 8013f24:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013f28:	6879      	ldr	r1, [r7, #4]
 8013f2a:	4618      	mov	r0, r3
 8013f2c:	f7f9 fdb6 	bl	800da9c <_Z10StringFromPFvvE>
 8013f30:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013f34:	6839      	ldr	r1, [r7, #0]
 8013f36:	4618      	mov	r0, r3
 8013f38:	f7f8 fee3 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8013f3c:	f107 0014 	add.w	r0, r7, #20
 8013f40:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013f44:	9302      	str	r3, [sp, #8]
 8013f46:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013f4a:	9301      	str	r3, [sp, #4]
 8013f4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013f50:	9300      	str	r3, [sp, #0]
 8013f52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013f54:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013f56:	68f9      	ldr	r1, [r7, #12]
 8013f58:	f7fa ffbc 	bl	800eed4 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013f5c:	f107 0314 	add.w	r3, r7, #20
 8013f60:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013f62:	4619      	mov	r1, r3
 8013f64:	68f8      	ldr	r0, [r7, #12]
 8013f66:	47a0      	blx	r4
 8013f68:	f107 0314 	add.w	r3, r7, #20
 8013f6c:	4618      	mov	r0, r3
 8013f6e:	f7fc f8fd 	bl	801016c <_ZN13EqualsFailureD1Ev>
 8013f72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013f76:	4618      	mov	r0, r3
 8013f78:	f7f9 fa7b 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8013f7c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013f80:	4618      	mov	r0, r3
 8013f82:	f7f9 fa76 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8013f86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	f7f9 fa71 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 8013f90:	bf00      	nop
 8013f92:	3764      	adds	r7, #100	; 0x64
 8013f94:	46bd      	mov	sp, r7
 8013f96:	bd90      	pop	{r4, r7, pc}

08013f98 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator>:

void UtestShell::assertDoublesEqual(double expected, double actual, double threshold, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013f98:	b590      	push	{r4, r7, lr}
 8013f9a:	b09d      	sub	sp, #116	; 0x74
 8013f9c:	af02      	add	r7, sp, #8
 8013f9e:	6278      	str	r0, [r7, #36]	; 0x24
 8013fa0:	ed87 0b06 	vstr	d0, [r7, #24]
 8013fa4:	ed87 1b04 	vstr	d1, [r7, #16]
 8013fa8:	ed87 2b02 	vstr	d2, [r7, #8]
 8013fac:	6239      	str	r1, [r7, #32]
 8013fae:	607a      	str	r2, [r7, #4]
 8013fb0:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013fb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013fb4:	f000 fa6e 	bl	8014494 <_ZN10UtestShell13getTestResultEv>
 8013fb8:	4603      	mov	r3, r0
 8013fba:	681a      	ldr	r2, [r3, #0]
 8013fbc:	3228      	adds	r2, #40	; 0x28
 8013fbe:	6812      	ldr	r2, [r2, #0]
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	4790      	blx	r2
    if (!doubles_equal(expected, actual, threshold))
 8013fc4:	ed97 2b02 	vldr	d2, [r7, #8]
 8013fc8:	ed97 1b04 	vldr	d1, [r7, #16]
 8013fcc:	ed97 0b06 	vldr	d0, [r7, #24]
 8013fd0:	f7fe fd4a 	bl	8012a68 <_Z13doubles_equalddd>
 8013fd4:	4603      	mov	r3, r0
 8013fd6:	f083 0301 	eor.w	r3, r3, #1
 8013fda:	b2db      	uxtb	r3, r3
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d029      	beq.n	8014034 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator+0x9c>
        failWith(DoublesEqualFailure(this, fileName, lineNumber, expected, actual, threshold, text), testTerminator);
 8013fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	339c      	adds	r3, #156	; 0x9c
 8013fe6:	681c      	ldr	r4, [r3, #0]
 8013fe8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013fec:	6a39      	ldr	r1, [r7, #32]
 8013fee:	4618      	mov	r0, r3
 8013ff0:	f7f8 fe87 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8013ff4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8013ff8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013ffc:	9300      	str	r3, [sp, #0]
 8013ffe:	ed97 2b02 	vldr	d2, [r7, #8]
 8014002:	ed97 1b04 	vldr	d1, [r7, #16]
 8014006:	ed97 0b06 	vldr	d0, [r7, #24]
 801400a:	683b      	ldr	r3, [r7, #0]
 801400c:	687a      	ldr	r2, [r7, #4]
 801400e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014010:	f7fa ffa2 	bl	800ef58 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>
 8014014:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014018:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801401a:	4619      	mov	r1, r3
 801401c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801401e:	47a0      	blx	r4
 8014020:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014024:	4618      	mov	r0, r3
 8014026:	f7fc f87f 	bl	8010128 <_ZN19DoublesEqualFailureD1Ev>
 801402a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801402e:	4618      	mov	r0, r3
 8014030:	f7f9 fa1f 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 8014034:	bf00      	nop
 8014036:	376c      	adds	r7, #108	; 0x6c
 8014038:	46bd      	mov	sp, r7
 801403a:	bd90      	pop	{r4, r7, pc}

0801403c <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator>:

void UtestShell::assertBinaryEqual(const void *expected, const void *actual, size_t length, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801403c:	b590      	push	{r4, r7, lr}
 801403e:	b0a7      	sub	sp, #156	; 0x9c
 8014040:	af04      	add	r7, sp, #16
 8014042:	60f8      	str	r0, [r7, #12]
 8014044:	60b9      	str	r1, [r7, #8]
 8014046:	607a      	str	r2, [r7, #4]
 8014048:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801404a:	68f8      	ldr	r0, [r7, #12]
 801404c:	f000 fa22 	bl	8014494 <_ZN10UtestShell13getTestResultEv>
 8014050:	4603      	mov	r3, r0
 8014052:	681a      	ldr	r2, [r3, #0]
 8014054:	3228      	adds	r2, #40	; 0x28
 8014056:	6812      	ldr	r2, [r2, #0]
 8014058:	4618      	mov	r0, r3
 801405a:	4790      	blx	r2
	if (length == 0) return;
 801405c:	683b      	ldr	r3, [r7, #0]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d075      	beq.n	801414e <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x112>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d102      	bne.n	801406e <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x32>
 8014068:	68bb      	ldr	r3, [r7, #8]
 801406a:	2b00      	cmp	r3, #0
 801406c:	d071      	beq.n	8014152 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x116>
    if (actual == NULLPTR || expected == NULLPTR)
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d002      	beq.n	801407a <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x3e>
 8014074:	68bb      	ldr	r3, [r7, #8]
 8014076:	2b00      	cmp	r3, #0
 8014078:	d12d      	bne.n	80140d6 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x9a>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	339c      	adds	r3, #156	; 0x9c
 8014080:	681c      	ldr	r4, [r3, #0]
 8014082:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014086:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801408a:	4618      	mov	r0, r3
 801408c:	f7f8 fe39 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8014090:	f107 0010 	add.w	r0, r7, #16
 8014094:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014098:	9303      	str	r3, [sp, #12]
 801409a:	683b      	ldr	r3, [r7, #0]
 801409c:	9302      	str	r3, [sp, #8]
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	9301      	str	r3, [sp, #4]
 80140a2:	68bb      	ldr	r3, [r7, #8]
 80140a4:	9300      	str	r3, [sp, #0]
 80140a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80140aa:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80140ae:	68f9      	ldr	r1, [r7, #12]
 80140b0:	f7fb fd70 	bl	800fb94 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 80140b4:	f107 0310 	add.w	r3, r7, #16
 80140b8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80140bc:	4619      	mov	r1, r3
 80140be:	68f8      	ldr	r0, [r7, #12]
 80140c0:	47a0      	blx	r4
 80140c2:	f107 0310 	add.w	r3, r7, #16
 80140c6:	4618      	mov	r0, r3
 80140c8:	f7fb feda 	bl	800fe80 <_ZN18BinaryEqualFailureD1Ev>
 80140cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80140d0:	4618      	mov	r0, r3
 80140d2:	f7f9 f9ce 	bl	800d472 <_ZN12SimpleStringD1Ev>
    if (SimpleString::MemCmp(expected, actual, length) != 0)
 80140d6:	683a      	ldr	r2, [r7, #0]
 80140d8:	6879      	ldr	r1, [r7, #4]
 80140da:	68b8      	ldr	r0, [r7, #8]
 80140dc:	f7f8 fd30 	bl	800cb40 <_ZN12SimpleString6MemCmpEPKvS1_j>
 80140e0:	4603      	mov	r3, r0
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	bf14      	ite	ne
 80140e6:	2301      	movne	r3, #1
 80140e8:	2300      	moveq	r3, #0
 80140ea:	b2db      	uxtb	r3, r3
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d031      	beq.n	8014154 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	339c      	adds	r3, #156	; 0x9c
 80140f6:	681c      	ldr	r4, [r3, #0]
 80140f8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80140fc:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8014100:	4618      	mov	r0, r3
 8014102:	f7f8 fdfe 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8014106:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 801410a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801410e:	9303      	str	r3, [sp, #12]
 8014110:	683b      	ldr	r3, [r7, #0]
 8014112:	9302      	str	r3, [sp, #8]
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	9301      	str	r3, [sp, #4]
 8014118:	68bb      	ldr	r3, [r7, #8]
 801411a:	9300      	str	r3, [sp, #0]
 801411c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014120:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8014124:	68f9      	ldr	r1, [r7, #12]
 8014126:	f7fb fd35 	bl	800fb94 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 801412a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801412e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8014132:	4619      	mov	r1, r3
 8014134:	68f8      	ldr	r0, [r7, #12]
 8014136:	47a0      	blx	r4
 8014138:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801413c:	4618      	mov	r0, r3
 801413e:	f7fb fe9f 	bl	800fe80 <_ZN18BinaryEqualFailureD1Ev>
 8014142:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014146:	4618      	mov	r0, r3
 8014148:	f7f9 f993 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801414c:	e002      	b.n	8014154 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
	if (length == 0) return;
 801414e:	bf00      	nop
 8014150:	e000      	b.n	8014154 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8014152:	bf00      	nop
}
 8014154:	378c      	adds	r7, #140	; 0x8c
 8014156:	46bd      	mov	sp, r7
 8014158:	bd90      	pop	{r4, r7, pc}

0801415a <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator>:

void UtestShell::assertBitsEqual(unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801415a:	b590      	push	{r4, r7, lr}
 801415c:	b09b      	sub	sp, #108	; 0x6c
 801415e:	af06      	add	r7, sp, #24
 8014160:	60f8      	str	r0, [r7, #12]
 8014162:	60b9      	str	r1, [r7, #8]
 8014164:	607a      	str	r2, [r7, #4]
 8014166:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8014168:	68f8      	ldr	r0, [r7, #12]
 801416a:	f000 f993 	bl	8014494 <_ZN10UtestShell13getTestResultEv>
 801416e:	4603      	mov	r3, r0
 8014170:	681a      	ldr	r2, [r3, #0]
 8014172:	3228      	adds	r2, #40	; 0x28
 8014174:	6812      	ldr	r2, [r2, #0]
 8014176:	4618      	mov	r0, r3
 8014178:	4790      	blx	r2
    if ((expected & mask) != (actual & mask))
 801417a:	68ba      	ldr	r2, [r7, #8]
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	405a      	eors	r2, r3
 8014180:	683b      	ldr	r3, [r7, #0]
 8014182:	4013      	ands	r3, r2
 8014184:	2b00      	cmp	r3, #0
 8014186:	d02b      	beq.n	80141e0 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator+0x86>
        failWith(BitsEqualFailure(this, fileName, lineNumber, expected, actual, mask, byteCount, text), testTerminator);
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	339c      	adds	r3, #156	; 0x9c
 801418e:	681c      	ldr	r4, [r3, #0]
 8014190:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014194:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8014196:	4618      	mov	r0, r3
 8014198:	f7f8 fdb3 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801419c:	f107 0014 	add.w	r0, r7, #20
 80141a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80141a4:	9304      	str	r3, [sp, #16]
 80141a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80141a8:	9303      	str	r3, [sp, #12]
 80141aa:	683b      	ldr	r3, [r7, #0]
 80141ac:	9302      	str	r3, [sp, #8]
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	9301      	str	r3, [sp, #4]
 80141b2:	68bb      	ldr	r3, [r7, #8]
 80141b4:	9300      	str	r3, [sp, #0]
 80141b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80141b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80141ba:	68f9      	ldr	r1, [r7, #12]
 80141bc:	f7fb fd7a 	bl	800fcb4 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>
 80141c0:	f107 0314 	add.w	r3, r7, #20
 80141c4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80141c6:	4619      	mov	r1, r3
 80141c8:	68f8      	ldr	r0, [r7, #12]
 80141ca:	47a0      	blx	r4
 80141cc:	f107 0314 	add.w	r3, r7, #20
 80141d0:	4618      	mov	r0, r3
 80141d2:	f7fb fe33 	bl	800fe3c <_ZN16BitsEqualFailureD1Ev>
 80141d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80141da:	4618      	mov	r0, r3
 80141dc:	f7f9 f949 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 80141e0:	bf00      	nop
 80141e2:	3754      	adds	r7, #84	; 0x54
 80141e4:	46bd      	mov	sp, r7
 80141e6:	bd90      	pop	{r4, r7, pc}

080141e8 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertEquals(bool failed, const char* expected, const char* actual, const char* text, const char* file, size_t line, const TestTerminator& testTerminator)
{
 80141e8:	b590      	push	{r4, r7, lr}
 80141ea:	b09d      	sub	sp, #116	; 0x74
 80141ec:	af04      	add	r7, sp, #16
 80141ee:	60f8      	str	r0, [r7, #12]
 80141f0:	607a      	str	r2, [r7, #4]
 80141f2:	603b      	str	r3, [r7, #0]
 80141f4:	460b      	mov	r3, r1
 80141f6:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 80141f8:	68f8      	ldr	r0, [r7, #12]
 80141fa:	f000 f94b 	bl	8014494 <_ZN10UtestShell13getTestResultEv>
 80141fe:	4603      	mov	r3, r0
 8014200:	681a      	ldr	r2, [r3, #0]
 8014202:	3228      	adds	r2, #40	; 0x28
 8014204:	6812      	ldr	r2, [r2, #0]
 8014206:	4618      	mov	r0, r3
 8014208:	4790      	blx	r2
    if (failed)
 801420a:	7afb      	ldrb	r3, [r7, #11]
 801420c:	2b00      	cmp	r3, #0
 801420e:	d03f      	beq.n	8014290 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator+0xa8>
        failWith(CheckEqualFailure(this, file, line, expected, actual, text), testTerminator);
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	339c      	adds	r3, #156	; 0x9c
 8014216:	681c      	ldr	r4, [r3, #0]
 8014218:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801421c:	6879      	ldr	r1, [r7, #4]
 801421e:	4618      	mov	r0, r3
 8014220:	f7f8 fd6f 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8014224:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014228:	6839      	ldr	r1, [r7, #0]
 801422a:	4618      	mov	r0, r3
 801422c:	f7f8 fd69 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8014230:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014234:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8014236:	4618      	mov	r0, r3
 8014238:	f7f8 fd63 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801423c:	f107 0014 	add.w	r0, r7, #20
 8014240:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014244:	9302      	str	r3, [sp, #8]
 8014246:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801424a:	9301      	str	r3, [sp, #4]
 801424c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014250:	9300      	str	r3, [sp, #0]
 8014252:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014254:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014256:	68f9      	ldr	r1, [r7, #12]
 8014258:	f7fa ff30 	bl	800f0bc <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 801425c:	f107 0314 	add.w	r3, r7, #20
 8014260:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014262:	4619      	mov	r1, r3
 8014264:	68f8      	ldr	r0, [r7, #12]
 8014266:	47a0      	blx	r4
 8014268:	f107 0314 	add.w	r3, r7, #20
 801426c:	4618      	mov	r0, r3
 801426e:	f7fb ff39 	bl	80100e4 <_ZN17CheckEqualFailureD1Ev>
 8014272:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014276:	4618      	mov	r0, r3
 8014278:	f7f9 f8fb 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801427c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014280:	4618      	mov	r0, r3
 8014282:	f7f9 f8f6 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8014286:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801428a:	4618      	mov	r0, r3
 801428c:	f7f9 f8f1 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 8014290:	bf00      	nop
 8014292:	3764      	adds	r7, #100	; 0x64
 8014294:	46bd      	mov	sp, r7
 8014296:	bd90      	pop	{r4, r7, pc}

08014298 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCompare(bool comparison, const char *checkString, const char *comparisonString, const char *text, const char *fileName, size_t lineNumber, const TestTerminator &testTerminator)
{
 8014298:	b590      	push	{r4, r7, lr}
 801429a:	b09d      	sub	sp, #116	; 0x74
 801429c:	af04      	add	r7, sp, #16
 801429e:	60f8      	str	r0, [r7, #12]
 80142a0:	607a      	str	r2, [r7, #4]
 80142a2:	603b      	str	r3, [r7, #0]
 80142a4:	460b      	mov	r3, r1
 80142a6:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 80142a8:	68f8      	ldr	r0, [r7, #12]
 80142aa:	f000 f8f3 	bl	8014494 <_ZN10UtestShell13getTestResultEv>
 80142ae:	4603      	mov	r3, r0
 80142b0:	681a      	ldr	r2, [r3, #0]
 80142b2:	3228      	adds	r2, #40	; 0x28
 80142b4:	6812      	ldr	r2, [r2, #0]
 80142b6:	4618      	mov	r0, r3
 80142b8:	4790      	blx	r2
    if (!comparison)
 80142ba:	7afb      	ldrb	r3, [r7, #11]
 80142bc:	f083 0301 	eor.w	r3, r3, #1
 80142c0:	b2db      	uxtb	r3, r3
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d03f      	beq.n	8014346 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(ComparisonFailure(this, fileName, lineNumber, checkString, comparisonString, text), testTerminator);
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	339c      	adds	r3, #156	; 0x9c
 80142cc:	681c      	ldr	r4, [r3, #0]
 80142ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80142d2:	6879      	ldr	r1, [r7, #4]
 80142d4:	4618      	mov	r0, r3
 80142d6:	f7f8 fd14 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80142da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80142de:	6839      	ldr	r1, [r7, #0]
 80142e0:	4618      	mov	r0, r3
 80142e2:	f7f8 fd0e 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80142e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80142ea:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80142ec:	4618      	mov	r0, r3
 80142ee:	f7f8 fd08 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80142f2:	f107 0014 	add.w	r0, r7, #20
 80142f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80142fa:	9302      	str	r3, [sp, #8]
 80142fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014300:	9301      	str	r3, [sp, #4]
 8014302:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014306:	9300      	str	r3, [sp, #0]
 8014308:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801430a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801430c:	68f9      	ldr	r1, [r7, #12]
 801430e:	f7fa ff83 	bl	800f218 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8014312:	f107 0314 	add.w	r3, r7, #20
 8014316:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014318:	4619      	mov	r1, r3
 801431a:	68f8      	ldr	r0, [r7, #12]
 801431c:	47a0      	blx	r4
 801431e:	f107 0314 	add.w	r3, r7, #20
 8014322:	4618      	mov	r0, r3
 8014324:	f7fb febc 	bl	80100a0 <_ZN17ComparisonFailureD1Ev>
 8014328:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801432c:	4618      	mov	r0, r3
 801432e:	f7f9 f8a0 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8014332:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014336:	4618      	mov	r0, r3
 8014338:	f7f9 f89b 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801433c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014340:	4618      	mov	r0, r3
 8014342:	f7f9 f896 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 8014346:	bf00      	nop
 8014348:	3764      	adds	r7, #100	; 0x64
 801434a:	46bd      	mov	sp, r7
 801434c:	bd90      	pop	{r4, r7, pc}
	...

08014350 <_ZN10UtestShell5printEPKcS1_j>:

void UtestShell::print(const char *text, const char* fileName, size_t lineNumber)
{
 8014350:	b5b0      	push	{r4, r5, r7, lr}
 8014352:	b088      	sub	sp, #32
 8014354:	af00      	add	r7, sp, #0
 8014356:	60f8      	str	r0, [r7, #12]
 8014358:	60b9      	str	r1, [r7, #8]
 801435a:	607a      	str	r2, [r7, #4]
 801435c:	603b      	str	r3, [r7, #0]
    SimpleString stringToPrint = "\n";
 801435e:	f107 0310 	add.w	r3, r7, #16
 8014362:	4924      	ldr	r1, [pc, #144]	; (80143f4 <_ZN10UtestShell5printEPKcS1_j+0xa4>)
 8014364:	4618      	mov	r0, r3
 8014366:	f7f8 fccc 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
    stringToPrint += fileName;
 801436a:	f107 0310 	add.w	r3, r7, #16
 801436e:	6879      	ldr	r1, [r7, #4]
 8014370:	4618      	mov	r0, r3
 8014372:	f7f9 f90d 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    stringToPrint += ":";
 8014376:	f107 0310 	add.w	r3, r7, #16
 801437a:	491f      	ldr	r1, [pc, #124]	; (80143f8 <_ZN10UtestShell5printEPKcS1_j+0xa8>)
 801437c:	4618      	mov	r0, r3
 801437e:	f7f9 f907 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    stringToPrint += StringFrom(lineNumber);
 8014382:	f107 0318 	add.w	r3, r7, #24
 8014386:	6839      	ldr	r1, [r7, #0]
 8014388:	4618      	mov	r0, r3
 801438a:	f7f9 fda1 	bl	800ded0 <_Z10StringFromj>
 801438e:	f107 0218 	add.w	r2, r7, #24
 8014392:	f107 0310 	add.w	r3, r7, #16
 8014396:	4611      	mov	r1, r2
 8014398:	4618      	mov	r0, r3
 801439a:	f7f9 f8e7 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 801439e:	f107 0318 	add.w	r3, r7, #24
 80143a2:	4618      	mov	r0, r3
 80143a4:	f7f9 f865 	bl	800d472 <_ZN12SimpleStringD1Ev>
    stringToPrint += " ";
 80143a8:	f107 0310 	add.w	r3, r7, #16
 80143ac:	4913      	ldr	r1, [pc, #76]	; (80143fc <_ZN10UtestShell5printEPKcS1_j+0xac>)
 80143ae:	4618      	mov	r0, r3
 80143b0:	f7f9 f8ee 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    stringToPrint += text;
 80143b4:	f107 0310 	add.w	r3, r7, #16
 80143b8:	68b9      	ldr	r1, [r7, #8]
 80143ba:	4618      	mov	r0, r3
 80143bc:	f7f9 f8e8 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    getTestResult()->print(stringToPrint.asCharString());
 80143c0:	68f8      	ldr	r0, [r7, #12]
 80143c2:	f000 f867 	bl	8014494 <_ZN10UtestShell13getTestResultEv>
 80143c6:	4604      	mov	r4, r0
 80143c8:	6823      	ldr	r3, [r4, #0]
 80143ca:	3338      	adds	r3, #56	; 0x38
 80143cc:	681d      	ldr	r5, [r3, #0]
 80143ce:	f107 0310 	add.w	r3, r7, #16
 80143d2:	4618      	mov	r0, r3
 80143d4:	f7f9 f820 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 80143d8:	4603      	mov	r3, r0
 80143da:	4619      	mov	r1, r3
 80143dc:	4620      	mov	r0, r4
 80143de:	47a8      	blx	r5
    SimpleString stringToPrint = "\n";
 80143e0:	f107 0310 	add.w	r3, r7, #16
 80143e4:	4618      	mov	r0, r3
 80143e6:	f7f9 f844 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 80143ea:	bf00      	nop
 80143ec:	3720      	adds	r7, #32
 80143ee:	46bd      	mov	sp, r7
 80143f0:	bdb0      	pop	{r4, r5, r7, pc}
 80143f2:	bf00      	nop
 80143f4:	080251d4 	.word	0x080251d4
 80143f8:	080251d8 	.word	0x080251d8
 80143fc:	080251dc 	.word	0x080251dc

08014400 <_ZN10UtestShell5printERK12SimpleStringPKcj>:

void UtestShell::print(const SimpleString& text, const char* fileName, size_t lineNumber)
{
 8014400:	b590      	push	{r4, r7, lr}
 8014402:	b085      	sub	sp, #20
 8014404:	af00      	add	r7, sp, #0
 8014406:	60f8      	str	r0, [r7, #12]
 8014408:	60b9      	str	r1, [r7, #8]
 801440a:	607a      	str	r2, [r7, #4]
 801440c:	603b      	str	r3, [r7, #0]
    print(text.asCharString(), fileName, lineNumber);
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	3370      	adds	r3, #112	; 0x70
 8014414:	681c      	ldr	r4, [r3, #0]
 8014416:	68b8      	ldr	r0, [r7, #8]
 8014418:	f7f8 fffe 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 801441c:	4601      	mov	r1, r0
 801441e:	683b      	ldr	r3, [r7, #0]
 8014420:	687a      	ldr	r2, [r7, #4]
 8014422:	68f8      	ldr	r0, [r7, #12]
 8014424:	47a0      	blx	r4
}
 8014426:	bf00      	nop
 8014428:	3714      	adds	r7, #20
 801442a:	46bd      	mov	sp, r7
 801442c:	bd90      	pop	{r4, r7, pc}

0801442e <_ZN10UtestShell16printVeryVerboseEPKc>:

void UtestShell::printVeryVerbose(const char* text)
{
 801442e:	b580      	push	{r7, lr}
 8014430:	b082      	sub	sp, #8
 8014432:	af00      	add	r7, sp, #0
 8014434:	6078      	str	r0, [r7, #4]
 8014436:	6039      	str	r1, [r7, #0]
    getTestResult()->printVeryVerbose(text);
 8014438:	6878      	ldr	r0, [r7, #4]
 801443a:	f000 f82b 	bl	8014494 <_ZN10UtestShell13getTestResultEv>
 801443e:	4603      	mov	r3, r0
 8014440:	681a      	ldr	r2, [r3, #0]
 8014442:	323c      	adds	r2, #60	; 0x3c
 8014444:	6812      	ldr	r2, [r2, #0]
 8014446:	6839      	ldr	r1, [r7, #0]
 8014448:	4618      	mov	r0, r3
 801444a:	4790      	blx	r2
}
 801444c:	bf00      	nop
 801444e:	3708      	adds	r7, #8
 8014450:	46bd      	mov	sp, r7
 8014452:	bd80      	pop	{r7, pc}

08014454 <_ZN10UtestShell13setTestResultEP10TestResult>:

TestResult* UtestShell::testResult_ = NULLPTR;
UtestShell* UtestShell::currentTest_ = NULLPTR;

void UtestShell::setTestResult(TestResult* result)
{
 8014454:	b480      	push	{r7}
 8014456:	b083      	sub	sp, #12
 8014458:	af00      	add	r7, sp, #0
 801445a:	6078      	str	r0, [r7, #4]
 801445c:	6039      	str	r1, [r7, #0]
    testResult_ = result;
 801445e:	4a04      	ldr	r2, [pc, #16]	; (8014470 <_ZN10UtestShell13setTestResultEP10TestResult+0x1c>)
 8014460:	683b      	ldr	r3, [r7, #0]
 8014462:	6013      	str	r3, [r2, #0]
}
 8014464:	bf00      	nop
 8014466:	370c      	adds	r7, #12
 8014468:	46bd      	mov	sp, r7
 801446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801446e:	4770      	bx	lr
 8014470:	20000abc 	.word	0x20000abc

08014474 <_ZN10UtestShell14setCurrentTestEPS_>:

void UtestShell::setCurrentTest(UtestShell* test)
{
 8014474:	b480      	push	{r7}
 8014476:	b083      	sub	sp, #12
 8014478:	af00      	add	r7, sp, #0
 801447a:	6078      	str	r0, [r7, #4]
 801447c:	6039      	str	r1, [r7, #0]
    currentTest_ = test;
 801447e:	4a04      	ldr	r2, [pc, #16]	; (8014490 <_ZN10UtestShell14setCurrentTestEPS_+0x1c>)
 8014480:	683b      	ldr	r3, [r7, #0]
 8014482:	6013      	str	r3, [r2, #0]
}
 8014484:	bf00      	nop
 8014486:	370c      	adds	r7, #12
 8014488:	46bd      	mov	sp, r7
 801448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801448e:	4770      	bx	lr
 8014490:	20000ac0 	.word	0x20000ac0

08014494 <_ZN10UtestShell13getTestResultEv>:

TestResult* UtestShell::getTestResult()
{
 8014494:	b580      	push	{r7, lr}
 8014496:	b082      	sub	sp, #8
 8014498:	af00      	add	r7, sp, #0
 801449a:	6078      	str	r0, [r7, #4]
    if (testResult_ == NULLPTR)
 801449c:	4b09      	ldr	r3, [pc, #36]	; (80144c4 <_ZN10UtestShell13getTestResultEv+0x30>)
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d109      	bne.n	80144b8 <_ZN10UtestShell13getTestResultEv+0x24>
        return &OutsideTestRunnerUTest::instance().getTestResult();
 80144a4:	f7fe fbb2 	bl	8012c0c <_ZN22OutsideTestRunnerUTest8instanceEv>
 80144a8:	4603      	mov	r3, r0
 80144aa:	681a      	ldr	r2, [r3, #0]
 80144ac:	32a4      	adds	r2, #164	; 0xa4
 80144ae:	6812      	ldr	r2, [r2, #0]
 80144b0:	4618      	mov	r0, r3
 80144b2:	4790      	blx	r2
 80144b4:	4603      	mov	r3, r0
 80144b6:	e001      	b.n	80144bc <_ZN10UtestShell13getTestResultEv+0x28>
    return testResult_;
 80144b8:	4b02      	ldr	r3, [pc, #8]	; (80144c4 <_ZN10UtestShell13getTestResultEv+0x30>)
 80144ba:	681b      	ldr	r3, [r3, #0]
}
 80144bc:	4618      	mov	r0, r3
 80144be:	3708      	adds	r7, #8
 80144c0:	46bd      	mov	sp, r7
 80144c2:	bd80      	pop	{r7, pc}
 80144c4:	20000abc 	.word	0x20000abc

080144c8 <_ZN10UtestShell10getCurrentEv>:

UtestShell* UtestShell::getCurrent()
{
 80144c8:	b580      	push	{r7, lr}
 80144ca:	af00      	add	r7, sp, #0
    if (currentTest_ == NULLPTR)
 80144cc:	4b05      	ldr	r3, [pc, #20]	; (80144e4 <_ZN10UtestShell10getCurrentEv+0x1c>)
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d103      	bne.n	80144dc <_ZN10UtestShell10getCurrentEv+0x14>
        return &OutsideTestRunnerUTest::instance();
 80144d4:	f7fe fb9a 	bl	8012c0c <_ZN22OutsideTestRunnerUTest8instanceEv>
 80144d8:	4603      	mov	r3, r0
 80144da:	e001      	b.n	80144e0 <_ZN10UtestShell10getCurrentEv+0x18>
    return currentTest_;
 80144dc:	4b01      	ldr	r3, [pc, #4]	; (80144e4 <_ZN10UtestShell10getCurrentEv+0x1c>)
 80144de:	681b      	ldr	r3, [r3, #0]
}
 80144e0:	4618      	mov	r0, r3
 80144e2:	bd80      	pop	{r7, pc}
 80144e4:	20000ac0 	.word	0x20000ac0

080144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>:

const TestTerminator &UtestShell::getCurrentTestTerminator()
{
 80144e8:	b480      	push	{r7}
 80144ea:	af00      	add	r7, sp, #0
    return *currentTestTerminator_;
 80144ec:	4b03      	ldr	r3, [pc, #12]	; (80144fc <_ZN10UtestShell24getCurrentTestTerminatorEv+0x14>)
 80144ee:	681b      	ldr	r3, [r3, #0]
}
 80144f0:	4618      	mov	r0, r3
 80144f2:	46bd      	mov	sp, r7
 80144f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f8:	4770      	bx	lr
 80144fa:	bf00      	nop
 80144fc:	20000094 	.word	0x20000094

08014500 <_ZN10UtestShell14setCrashOnFailEv>:

void UtestShell::setCrashOnFail()
{
 8014500:	b480      	push	{r7}
 8014502:	af00      	add	r7, sp, #0
    currentTestTerminator_ = &crashingTestTerminator;
 8014504:	4b03      	ldr	r3, [pc, #12]	; (8014514 <_ZN10UtestShell14setCrashOnFailEv+0x14>)
 8014506:	4a04      	ldr	r2, [pc, #16]	; (8014518 <_ZN10UtestShell14setCrashOnFailEv+0x18>)
 8014508:	601a      	str	r2, [r3, #0]
}
 801450a:	bf00      	nop
 801450c:	46bd      	mov	sp, r7
 801450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014512:	4770      	bx	lr
 8014514:	20000094 	.word	0x20000094
 8014518:	20000090 	.word	0x20000090

0801451c <_ZN5UtestC1Ev>:
{
}

////////////// Utest ////////////

Utest::Utest()
 801451c:	b480      	push	{r7}
 801451e:	b083      	sub	sp, #12
 8014520:	af00      	add	r7, sp, #0
 8014522:	6078      	str	r0, [r7, #4]
 8014524:	4a04      	ldr	r2, [pc, #16]	; (8014538 <_ZN5UtestC1Ev+0x1c>)
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	601a      	str	r2, [r3, #0]
{
}
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	4618      	mov	r0, r3
 801452e:	370c      	adds	r7, #12
 8014530:	46bd      	mov	sp, r7
 8014532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014536:	4770      	bx	lr
 8014538:	08028b7c 	.word	0x08028b7c

0801453c <_ZN5UtestD1Ev>:

Utest::~Utest()
 801453c:	b480      	push	{r7}
 801453e:	b083      	sub	sp, #12
 8014540:	af00      	add	r7, sp, #0
 8014542:	6078      	str	r0, [r7, #4]
 8014544:	4a04      	ldr	r2, [pc, #16]	; (8014558 <_ZN5UtestD1Ev+0x1c>)
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	601a      	str	r2, [r3, #0]
{
}
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	4618      	mov	r0, r3
 801454e:	370c      	adds	r7, #12
 8014550:	46bd      	mov	sp, r7
 8014552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014556:	4770      	bx	lr
 8014558:	08028b7c 	.word	0x08028b7c

0801455c <_ZN5UtestD0Ev>:
Utest::~Utest()
 801455c:	b580      	push	{r7, lr}
 801455e:	b082      	sub	sp, #8
 8014560:	af00      	add	r7, sp, #0
 8014562:	6078      	str	r0, [r7, #4]
}
 8014564:	6878      	ldr	r0, [r7, #4]
 8014566:	f7ff ffe9 	bl	801453c <_ZN5UtestD1Ev>
 801456a:	2104      	movs	r1, #4
 801456c:	6878      	ldr	r0, [r7, #4]
 801456e:	f7f6 f819 	bl	800a5a4 <_ZdlPvj>
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	4618      	mov	r0, r3
 8014576:	3708      	adds	r7, #8
 8014578:	46bd      	mov	sp, r7
 801457a:	bd80      	pop	{r7, pc}

0801457c <_ZN5Utest3runEv>:

}
#else

void Utest::run()
{
 801457c:	b580      	push	{r7, lr}
 801457e:	b082      	sub	sp, #8
 8014580:	af00      	add	r7, sp, #0
 8014582:	6078      	str	r0, [r7, #4]
    if (PlatformSpecificSetJmp(helperDoTestSetup, this)) {
 8014584:	4b0d      	ldr	r3, [pc, #52]	; (80145bc <_ZN5Utest3runEv+0x40>)
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	6879      	ldr	r1, [r7, #4]
 801458a:	480d      	ldr	r0, [pc, #52]	; (80145c0 <_ZN5Utest3runEv+0x44>)
 801458c:	4798      	blx	r3
 801458e:	4603      	mov	r3, r0
 8014590:	2b00      	cmp	r3, #0
 8014592:	bf14      	ite	ne
 8014594:	2301      	movne	r3, #1
 8014596:	2300      	moveq	r3, #0
 8014598:	b2db      	uxtb	r3, r3
 801459a:	2b00      	cmp	r3, #0
 801459c:	d004      	beq.n	80145a8 <_ZN5Utest3runEv+0x2c>
        PlatformSpecificSetJmp(helperDoTestBody, this);
 801459e:	4b07      	ldr	r3, [pc, #28]	; (80145bc <_ZN5Utest3runEv+0x40>)
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	6879      	ldr	r1, [r7, #4]
 80145a4:	4807      	ldr	r0, [pc, #28]	; (80145c4 <_ZN5Utest3runEv+0x48>)
 80145a6:	4798      	blx	r3
    }
    PlatformSpecificSetJmp(helperDoTestTeardown, this);
 80145a8:	4b04      	ldr	r3, [pc, #16]	; (80145bc <_ZN5Utest3runEv+0x40>)
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	6879      	ldr	r1, [r7, #4]
 80145ae:	4806      	ldr	r0, [pc, #24]	; (80145c8 <_ZN5Utest3runEv+0x4c>)
 80145b0:	4798      	blx	r3
}
 80145b2:	bf00      	nop
 80145b4:	3708      	adds	r7, #8
 80145b6:	46bd      	mov	sp, r7
 80145b8:	bd80      	pop	{r7, pc}
 80145ba:	bf00      	nop
 80145bc:	200000a4 	.word	0x200000a4
 80145c0:	08012c69 	.word	0x08012c69
 80145c4:	08012c85 	.word	0x08012c85
 80145c8:	08012ca1 	.word	0x08012ca1

080145cc <_ZN5Utest5setupEv>:

#endif

void Utest::setup()
{
 80145cc:	b480      	push	{r7}
 80145ce:	b083      	sub	sp, #12
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
}
 80145d4:	bf00      	nop
 80145d6:	370c      	adds	r7, #12
 80145d8:	46bd      	mov	sp, r7
 80145da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145de:	4770      	bx	lr

080145e0 <_ZN5Utest8testBodyEv>:

void Utest::testBody()
{
 80145e0:	b480      	push	{r7}
 80145e2:	b083      	sub	sp, #12
 80145e4:	af00      	add	r7, sp, #0
 80145e6:	6078      	str	r0, [r7, #4]
}
 80145e8:	bf00      	nop
 80145ea:	370c      	adds	r7, #12
 80145ec:	46bd      	mov	sp, r7
 80145ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145f2:	4770      	bx	lr

080145f4 <_ZN5Utest8teardownEv>:

void Utest::teardown()
{
 80145f4:	b480      	push	{r7}
 80145f6:	b083      	sub	sp, #12
 80145f8:	af00      	add	r7, sp, #0
 80145fa:	6078      	str	r0, [r7, #4]
}
 80145fc:	bf00      	nop
 80145fe:	370c      	adds	r7, #12
 8014600:	46bd      	mov	sp, r7
 8014602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014606:	4770      	bx	lr

08014608 <_ZN14TestTerminatorD1Ev>:


/////////////////// Terminators

TestTerminator::~TestTerminator()
 8014608:	b480      	push	{r7}
 801460a:	b083      	sub	sp, #12
 801460c:	af00      	add	r7, sp, #0
 801460e:	6078      	str	r0, [r7, #4]
 8014610:	4a04      	ldr	r2, [pc, #16]	; (8014624 <_ZN14TestTerminatorD1Ev+0x1c>)
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	601a      	str	r2, [r3, #0]
{
}
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	4618      	mov	r0, r3
 801461a:	370c      	adds	r7, #12
 801461c:	46bd      	mov	sp, r7
 801461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014622:	4770      	bx	lr
 8014624:	08028b68 	.word	0x08028b68

08014628 <_ZNK20NormalTestTerminator15exitCurrentTestEv>:

void NormalTestTerminator::exitCurrentTest() const
{
 8014628:	b580      	push	{r7, lr}
 801462a:	b084      	sub	sp, #16
 801462c:	af00      	add	r7, sp, #0
 801462e:	6078      	str	r0, [r7, #4]
    #if CPPUTEST_USE_STD_CPP_LIB
        throw CppUTestFailedException();
    #else
        TestTerminatorWithoutExceptions().exitCurrentTest();
 8014630:	2300      	movs	r3, #0
 8014632:	60fb      	str	r3, [r7, #12]
 8014634:	f107 030c 	add.w	r3, r7, #12
 8014638:	4618      	mov	r0, r3
 801463a:	f7f6 f975 	bl	800a928 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 801463e:	f107 030c 	add.w	r3, r7, #12
 8014642:	4618      	mov	r0, r3
 8014644:	f000 f82c 	bl	80146a0 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>
 8014648:	f107 030c 	add.w	r3, r7, #12
 801464c:	4618      	mov	r0, r3
 801464e:	f000 f835 	bl	80146bc <_ZN31TestTerminatorWithoutExceptionsD1Ev>
    #endif
}
 8014652:	bf00      	nop
 8014654:	3710      	adds	r7, #16
 8014656:	46bd      	mov	sp, r7
 8014658:	bd80      	pop	{r7, pc}
	...

0801465c <_ZN20NormalTestTerminatorD1Ev>:

NormalTestTerminator::~NormalTestTerminator()
 801465c:	b580      	push	{r7, lr}
 801465e:	b082      	sub	sp, #8
 8014660:	af00      	add	r7, sp, #0
 8014662:	6078      	str	r0, [r7, #4]
 8014664:	4a05      	ldr	r2, [pc, #20]	; (801467c <_ZN20NormalTestTerminatorD1Ev+0x20>)
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	601a      	str	r2, [r3, #0]
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	4618      	mov	r0, r3
 801466e:	f7ff ffcb 	bl	8014608 <_ZN14TestTerminatorD1Ev>
{
}
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	4618      	mov	r0, r3
 8014676:	3708      	adds	r7, #8
 8014678:	46bd      	mov	sp, r7
 801467a:	bd80      	pop	{r7, pc}
 801467c:	08028b54 	.word	0x08028b54

08014680 <_ZN20NormalTestTerminatorD0Ev>:
NormalTestTerminator::~NormalTestTerminator()
 8014680:	b580      	push	{r7, lr}
 8014682:	b082      	sub	sp, #8
 8014684:	af00      	add	r7, sp, #0
 8014686:	6078      	str	r0, [r7, #4]
}
 8014688:	6878      	ldr	r0, [r7, #4]
 801468a:	f7ff ffe7 	bl	801465c <_ZN20NormalTestTerminatorD1Ev>
 801468e:	2104      	movs	r1, #4
 8014690:	6878      	ldr	r0, [r7, #4]
 8014692:	f7f5 ff87 	bl	800a5a4 <_ZdlPvj>
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	4618      	mov	r0, r3
 801469a:	3708      	adds	r7, #8
 801469c:	46bd      	mov	sp, r7
 801469e:	bd80      	pop	{r7, pc}

080146a0 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>:

void TestTerminatorWithoutExceptions::exitCurrentTest() const
{
 80146a0:	b580      	push	{r7, lr}
 80146a2:	b082      	sub	sp, #8
 80146a4:	af00      	add	r7, sp, #0
 80146a6:	6078      	str	r0, [r7, #4]
    PlatformSpecificLongJmp();
 80146a8:	4b03      	ldr	r3, [pc, #12]	; (80146b8 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv+0x18>)
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	4798      	blx	r3
} // LCOV_EXCL_LINE
 80146ae:	bf00      	nop
 80146b0:	3708      	adds	r7, #8
 80146b2:	46bd      	mov	sp, r7
 80146b4:	bd80      	pop	{r7, pc}
 80146b6:	bf00      	nop
 80146b8:	200000a0 	.word	0x200000a0

080146bc <_ZN31TestTerminatorWithoutExceptionsD1Ev>:

TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 80146bc:	b580      	push	{r7, lr}
 80146be:	b082      	sub	sp, #8
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	6078      	str	r0, [r7, #4]
 80146c4:	4a05      	ldr	r2, [pc, #20]	; (80146dc <_ZN31TestTerminatorWithoutExceptionsD1Ev+0x20>)
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	601a      	str	r2, [r3, #0]
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	4618      	mov	r0, r3
 80146ce:	f7ff ff9b 	bl	8014608 <_ZN14TestTerminatorD1Ev>
{
}
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	4618      	mov	r0, r3
 80146d6:	3708      	adds	r7, #8
 80146d8:	46bd      	mov	sp, r7
 80146da:	bd80      	pop	{r7, pc}
 80146dc:	08028b40 	.word	0x08028b40

080146e0 <_ZN31TestTerminatorWithoutExceptionsD0Ev>:
TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 80146e0:	b580      	push	{r7, lr}
 80146e2:	b082      	sub	sp, #8
 80146e4:	af00      	add	r7, sp, #0
 80146e6:	6078      	str	r0, [r7, #4]
}
 80146e8:	6878      	ldr	r0, [r7, #4]
 80146ea:	f7ff ffe7 	bl	80146bc <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 80146ee:	2104      	movs	r1, #4
 80146f0:	6878      	ldr	r0, [r7, #4]
 80146f2:	f7f5 ff57 	bl	800a5a4 <_ZdlPvj>
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	4618      	mov	r0, r3
 80146fa:	3708      	adds	r7, #8
 80146fc:	46bd      	mov	sp, r7
 80146fe:	bd80      	pop	{r7, pc}

08014700 <_ZNK22CrashingTestTerminator15exitCurrentTestEv>:

void CrashingTestTerminator::exitCurrentTest() const
{
 8014700:	b580      	push	{r7, lr}
 8014702:	b082      	sub	sp, #8
 8014704:	af00      	add	r7, sp, #0
 8014706:	6078      	str	r0, [r7, #4]
    UtestShell::crash();
 8014708:	f7fe fbaa 	bl	8012e60 <_ZN10UtestShell5crashEv>
    NormalTestTerminator::exitCurrentTest();
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	4618      	mov	r0, r3
 8014710:	f7ff ff8a 	bl	8014628 <_ZNK20NormalTestTerminator15exitCurrentTestEv>
}
 8014714:	bf00      	nop
 8014716:	3708      	adds	r7, #8
 8014718:	46bd      	mov	sp, r7
 801471a:	bd80      	pop	{r7, pc}

0801471c <_ZN22CrashingTestTerminatorD1Ev>:

CrashingTestTerminator::~CrashingTestTerminator()
 801471c:	b580      	push	{r7, lr}
 801471e:	b082      	sub	sp, #8
 8014720:	af00      	add	r7, sp, #0
 8014722:	6078      	str	r0, [r7, #4]
 8014724:	4a05      	ldr	r2, [pc, #20]	; (801473c <_ZN22CrashingTestTerminatorD1Ev+0x20>)
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	601a      	str	r2, [r3, #0]
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	4618      	mov	r0, r3
 801472e:	f7ff ff95 	bl	801465c <_ZN20NormalTestTerminatorD1Ev>
{
}
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	4618      	mov	r0, r3
 8014736:	3708      	adds	r7, #8
 8014738:	46bd      	mov	sp, r7
 801473a:	bd80      	pop	{r7, pc}
 801473c:	08028b2c 	.word	0x08028b2c

08014740 <_ZN22CrashingTestTerminatorD0Ev>:
CrashingTestTerminator::~CrashingTestTerminator()
 8014740:	b580      	push	{r7, lr}
 8014742:	b082      	sub	sp, #8
 8014744:	af00      	add	r7, sp, #0
 8014746:	6078      	str	r0, [r7, #4]
}
 8014748:	6878      	ldr	r0, [r7, #4]
 801474a:	f7ff ffe7 	bl	801471c <_ZN22CrashingTestTerminatorD1Ev>
 801474e:	2104      	movs	r1, #4
 8014750:	6878      	ldr	r0, [r7, #4]
 8014752:	f7f5 ff27 	bl	800a5a4 <_ZdlPvj>
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	4618      	mov	r0, r3
 801475a:	3708      	adds	r7, #8
 801475c:	46bd      	mov	sp, r7
 801475e:	bd80      	pop	{r7, pc}

08014760 <_ZN22UtestShellPointerArrayC1EP10UtestShell>:
    runIgnored_ = true;
}

//////////////////// UtestShellPointerArray

UtestShellPointerArray::UtestShellPointerArray(UtestShell* firstTest)
 8014760:	b580      	push	{r7, lr}
 8014762:	b084      	sub	sp, #16
 8014764:	af00      	add	r7, sp, #0
 8014766:	6078      	str	r0, [r7, #4]
 8014768:	6039      	str	r1, [r7, #0]
    : arrayOfTests_(NULLPTR), count_(0)
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	2200      	movs	r2, #0
 801476e:	601a      	str	r2, [r3, #0]
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	2200      	movs	r2, #0
 8014774:	605a      	str	r2, [r3, #4]
{
    count_ = (firstTest) ? firstTest->countTests() : 0;
 8014776:	683b      	ldr	r3, [r7, #0]
 8014778:	2b00      	cmp	r3, #0
 801477a:	d007      	beq.n	801478c <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2c>
 801477c:	683b      	ldr	r3, [r7, #0]
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	3310      	adds	r3, #16
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	6838      	ldr	r0, [r7, #0]
 8014786:	4798      	blx	r3
 8014788:	4603      	mov	r3, r0
 801478a:	e000      	b.n	801478e <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2e>
 801478c:	2300      	movs	r3, #0
 801478e:	687a      	ldr	r2, [r7, #4]
 8014790:	6053      	str	r3, [r2, #4]
    if (count_ == 0) return;
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	685b      	ldr	r3, [r3, #4]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d02d      	beq.n	80147f6 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x96>

    arrayOfTests_ = new UtestShell*[count_];
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	685b      	ldr	r3, [r3, #4]
 801479e:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80147a2:	4293      	cmp	r3, r2
 80147a4:	d201      	bcs.n	80147aa <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4a>
 80147a6:	009b      	lsls	r3, r3, #2
 80147a8:	e001      	b.n	80147ae <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4e>
 80147aa:	f04f 33ff 	mov.w	r3, #4294967295
 80147ae:	f240 3237 	movw	r2, #823	; 0x337
 80147b2:	4914      	ldr	r1, [pc, #80]	; (8014804 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0xa4>)
 80147b4:	4618      	mov	r0, r3
 80147b6:	f7f5 ff05 	bl	800a5c4 <_ZnajPKci>
 80147ba:	4602      	mov	r2, r0
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	601a      	str	r2, [r3, #0]

    UtestShell*currentTest = firstTest;
 80147c0:	683b      	ldr	r3, [r7, #0]
 80147c2:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 80147c4:	2300      	movs	r3, #0
 80147c6:	60bb      	str	r3, [r7, #8]
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	685b      	ldr	r3, [r3, #4]
 80147cc:	68ba      	ldr	r2, [r7, #8]
 80147ce:	429a      	cmp	r2, r3
 80147d0:	d212      	bcs.n	80147f8 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x98>
    {
        arrayOfTests_[i] = currentTest;
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	681a      	ldr	r2, [r3, #0]
 80147d6:	68bb      	ldr	r3, [r7, #8]
 80147d8:	009b      	lsls	r3, r3, #2
 80147da:	4413      	add	r3, r2
 80147dc:	68fa      	ldr	r2, [r7, #12]
 80147de:	601a      	str	r2, [r3, #0]
        currentTest = currentTest->getNext();
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	330c      	adds	r3, #12
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	68f8      	ldr	r0, [r7, #12]
 80147ea:	4798      	blx	r3
 80147ec:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 80147ee:	68bb      	ldr	r3, [r7, #8]
 80147f0:	3301      	adds	r3, #1
 80147f2:	60bb      	str	r3, [r7, #8]
 80147f4:	e7e8      	b.n	80147c8 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x68>
    if (count_ == 0) return;
 80147f6:	bf00      	nop
    }
}
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	4618      	mov	r0, r3
 80147fc:	3710      	adds	r7, #16
 80147fe:	46bd      	mov	sp, r7
 8014800:	bd80      	pop	{r7, pc}
 8014802:	bf00      	nop
 8014804:	08025064 	.word	0x08025064

08014808 <_ZN22UtestShellPointerArrayD1Ev>:

UtestShellPointerArray::~UtestShellPointerArray()
 8014808:	b580      	push	{r7, lr}
 801480a:	b082      	sub	sp, #8
 801480c:	af00      	add	r7, sp, #0
 801480e:	6078      	str	r0, [r7, #4]
{
    delete [] arrayOfTests_;
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	2b00      	cmp	r3, #0
 8014816:	d004      	beq.n	8014822 <_ZN22UtestShellPointerArrayD1Ev+0x1a>
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	4618      	mov	r0, r3
 801481e:	f7f5 fee5 	bl	800a5ec <_ZdaPv>
}
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	4618      	mov	r0, r3
 8014826:	3708      	adds	r7, #8
 8014828:	46bd      	mov	sp, r7
 801482a:	bd80      	pop	{r7, pc}

0801482c <_ZN22UtestShellPointerArray4swapEjj>:

void UtestShellPointerArray::swap(size_t index1, size_t index2)
{
 801482c:	b480      	push	{r7}
 801482e:	b087      	sub	sp, #28
 8014830:	af00      	add	r7, sp, #0
 8014832:	60f8      	str	r0, [r7, #12]
 8014834:	60b9      	str	r1, [r7, #8]
 8014836:	607a      	str	r2, [r7, #4]
        UtestShell* e2 = arrayOfTests_[index2];
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	681a      	ldr	r2, [r3, #0]
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	009b      	lsls	r3, r3, #2
 8014840:	4413      	add	r3, r2
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	617b      	str	r3, [r7, #20]
        UtestShell* e1 = arrayOfTests_[index1];
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	681a      	ldr	r2, [r3, #0]
 801484a:	68bb      	ldr	r3, [r7, #8]
 801484c:	009b      	lsls	r3, r3, #2
 801484e:	4413      	add	r3, r2
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	613b      	str	r3, [r7, #16]
        arrayOfTests_[index1] = e2;
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	681a      	ldr	r2, [r3, #0]
 8014858:	68bb      	ldr	r3, [r7, #8]
 801485a:	009b      	lsls	r3, r3, #2
 801485c:	4413      	add	r3, r2
 801485e:	697a      	ldr	r2, [r7, #20]
 8014860:	601a      	str	r2, [r3, #0]
        arrayOfTests_[index2] = e1;
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	681a      	ldr	r2, [r3, #0]
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	009b      	lsls	r3, r3, #2
 801486a:	4413      	add	r3, r2
 801486c:	693a      	ldr	r2, [r7, #16]
 801486e:	601a      	str	r2, [r3, #0]
}
 8014870:	bf00      	nop
 8014872:	371c      	adds	r7, #28
 8014874:	46bd      	mov	sp, r7
 8014876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801487a:	4770      	bx	lr

0801487c <_ZN22UtestShellPointerArray7shuffleEj>:

void UtestShellPointerArray::shuffle(size_t seed)
{
 801487c:	b580      	push	{r7, lr}
 801487e:	b084      	sub	sp, #16
 8014880:	af00      	add	r7, sp, #0
 8014882:	6078      	str	r0, [r7, #4]
 8014884:	6039      	str	r1, [r7, #0]
    if (count_ == 0) return;
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	685b      	ldr	r3, [r3, #4]
 801488a:	2b00      	cmp	r3, #0
 801488c:	d028      	beq.n	80148e0 <_ZN22UtestShellPointerArray7shuffleEj+0x64>

    PlatformSpecificSrand((unsigned int) seed);
 801488e:	4b17      	ldr	r3, [pc, #92]	; (80148ec <_ZN22UtestShellPointerArray7shuffleEj+0x70>)
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	6838      	ldr	r0, [r7, #0]
 8014894:	4798      	blx	r3

    for (size_t i = count_ - 1; i >= 1; --i)
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	685b      	ldr	r3, [r3, #4]
 801489a:	3b01      	subs	r3, #1
 801489c:	60fb      	str	r3, [r7, #12]
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d019      	beq.n	80148d8 <_ZN22UtestShellPointerArray7shuffleEj+0x5c>
    {
        if (count_ == 0) return;
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	685b      	ldr	r3, [r3, #4]
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d01b      	beq.n	80148e4 <_ZN22UtestShellPointerArray7shuffleEj+0x68>

        const size_t j = ((size_t)PlatformSpecificRand()) % (i + 1); // distribution biased by modulo, but good enough for shuffling
 80148ac:	4b10      	ldr	r3, [pc, #64]	; (80148f0 <_ZN22UtestShellPointerArray7shuffleEj+0x74>)
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	4798      	blx	r3
 80148b2:	4603      	mov	r3, r0
 80148b4:	461a      	mov	r2, r3
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	3301      	adds	r3, #1
 80148ba:	fbb2 f1f3 	udiv	r1, r2, r3
 80148be:	fb03 f301 	mul.w	r3, r3, r1
 80148c2:	1ad3      	subs	r3, r2, r3
 80148c4:	60bb      	str	r3, [r7, #8]
        swap(i, j);
 80148c6:	68ba      	ldr	r2, [r7, #8]
 80148c8:	68f9      	ldr	r1, [r7, #12]
 80148ca:	6878      	ldr	r0, [r7, #4]
 80148cc:	f7ff ffae 	bl	801482c <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = count_ - 1; i >= 1; --i)
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	3b01      	subs	r3, #1
 80148d4:	60fb      	str	r3, [r7, #12]
 80148d6:	e7e2      	b.n	801489e <_ZN22UtestShellPointerArray7shuffleEj+0x22>
   }
   relinkTestsInOrder();
 80148d8:	6878      	ldr	r0, [r7, #4]
 80148da:	f000 f834 	bl	8014946 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 80148de:	e002      	b.n	80148e6 <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
    if (count_ == 0) return;
 80148e0:	bf00      	nop
 80148e2:	e000      	b.n	80148e6 <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
        if (count_ == 0) return;
 80148e4:	bf00      	nop
}
 80148e6:	3710      	adds	r7, #16
 80148e8:	46bd      	mov	sp, r7
 80148ea:	bd80      	pop	{r7, pc}
 80148ec:	200000e0 	.word	0x200000e0
 80148f0:	200000e4 	.word	0x200000e4

080148f4 <_ZN22UtestShellPointerArray7reverseEv>:

void UtestShellPointerArray::reverse()
{
 80148f4:	b580      	push	{r7, lr}
 80148f6:	b086      	sub	sp, #24
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	6078      	str	r0, [r7, #4]
    if (count_ == 0) return;
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	685b      	ldr	r3, [r3, #4]
 8014900:	2b00      	cmp	r3, #0
 8014902:	d01c      	beq.n	801493e <_ZN22UtestShellPointerArray7reverseEv+0x4a>

    size_t halfCount = count_ / 2;
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	685b      	ldr	r3, [r3, #4]
 8014908:	085b      	lsrs	r3, r3, #1
 801490a:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < halfCount; i++)
 801490c:	2300      	movs	r3, #0
 801490e:	617b      	str	r3, [r7, #20]
 8014910:	697a      	ldr	r2, [r7, #20]
 8014912:	693b      	ldr	r3, [r7, #16]
 8014914:	429a      	cmp	r2, r3
 8014916:	d20e      	bcs.n	8014936 <_ZN22UtestShellPointerArray7reverseEv+0x42>
    {
        size_t j = count_ - i - 1;
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	685a      	ldr	r2, [r3, #4]
 801491c:	697b      	ldr	r3, [r7, #20]
 801491e:	1ad3      	subs	r3, r2, r3
 8014920:	3b01      	subs	r3, #1
 8014922:	60fb      	str	r3, [r7, #12]
        swap(i, j);
 8014924:	68fa      	ldr	r2, [r7, #12]
 8014926:	6979      	ldr	r1, [r7, #20]
 8014928:	6878      	ldr	r0, [r7, #4]
 801492a:	f7ff ff7f 	bl	801482c <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = 0; i < halfCount; i++)
 801492e:	697b      	ldr	r3, [r7, #20]
 8014930:	3301      	adds	r3, #1
 8014932:	617b      	str	r3, [r7, #20]
 8014934:	e7ec      	b.n	8014910 <_ZN22UtestShellPointerArray7reverseEv+0x1c>
   }
   relinkTestsInOrder();
 8014936:	6878      	ldr	r0, [r7, #4]
 8014938:	f000 f805 	bl	8014946 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 801493c:	e000      	b.n	8014940 <_ZN22UtestShellPointerArray7reverseEv+0x4c>
    if (count_ == 0) return;
 801493e:	bf00      	nop
}
 8014940:	3718      	adds	r7, #24
 8014942:	46bd      	mov	sp, r7
 8014944:	bd80      	pop	{r7, pc}

08014946 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>:

void UtestShellPointerArray::relinkTestsInOrder()
{
 8014946:	b580      	push	{r7, lr}
 8014948:	b084      	sub	sp, #16
 801494a:	af00      	add	r7, sp, #0
 801494c:	6078      	str	r0, [r7, #4]
    UtestShell *tests = NULLPTR;
 801494e:	2300      	movs	r3, #0
 8014950:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8014952:	2300      	movs	r3, #0
 8014954:	60bb      	str	r3, [r7, #8]
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	685b      	ldr	r3, [r3, #4]
 801495a:	68ba      	ldr	r2, [r7, #8]
 801495c:	429a      	cmp	r2, r3
 801495e:	d221      	bcs.n	80149a4 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x5e>
        tests = arrayOfTests_[count_ - i - 1]->addTest(tests);
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	681a      	ldr	r2, [r3, #0]
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	6859      	ldr	r1, [r3, #4]
 8014968:	68bb      	ldr	r3, [r7, #8]
 801496a:	1acb      	subs	r3, r1, r3
 801496c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014970:	3b01      	subs	r3, #1
 8014972:	009b      	lsls	r3, r3, #2
 8014974:	4413      	add	r3, r2
 8014976:	6818      	ldr	r0, [r3, #0]
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	681a      	ldr	r2, [r3, #0]
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	6859      	ldr	r1, [r3, #4]
 8014980:	68bb      	ldr	r3, [r7, #8]
 8014982:	1acb      	subs	r3, r1, r3
 8014984:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014988:	3b01      	subs	r3, #1
 801498a:	009b      	lsls	r3, r3, #2
 801498c:	4413      	add	r3, r2
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	3308      	adds	r3, #8
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	68f9      	ldr	r1, [r7, #12]
 8014998:	4798      	blx	r3
 801499a:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 801499c:	68bb      	ldr	r3, [r7, #8]
 801499e:	3301      	adds	r3, #1
 80149a0:	60bb      	str	r3, [r7, #8]
 80149a2:	e7d8      	b.n	8014956 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x10>
}
 80149a4:	bf00      	nop
 80149a6:	3710      	adds	r7, #16
 80149a8:	46bd      	mov	sp, r7
 80149aa:	bd80      	pop	{r7, pc}

080149ac <_ZNK22UtestShellPointerArray12getFirstTestEv>:

UtestShell* UtestShellPointerArray::getFirstTest() const
{
 80149ac:	b580      	push	{r7, lr}
 80149ae:	b082      	sub	sp, #8
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	6078      	str	r0, [r7, #4]
    return get(0);
 80149b4:	2100      	movs	r1, #0
 80149b6:	6878      	ldr	r0, [r7, #4]
 80149b8:	f000 f805 	bl	80149c6 <_ZNK22UtestShellPointerArray3getEj>
 80149bc:	4603      	mov	r3, r0
}
 80149be:	4618      	mov	r0, r3
 80149c0:	3708      	adds	r7, #8
 80149c2:	46bd      	mov	sp, r7
 80149c4:	bd80      	pop	{r7, pc}

080149c6 <_ZNK22UtestShellPointerArray3getEj>:

UtestShell* UtestShellPointerArray::get(size_t index) const
{
 80149c6:	b480      	push	{r7}
 80149c8:	b083      	sub	sp, #12
 80149ca:	af00      	add	r7, sp, #0
 80149cc:	6078      	str	r0, [r7, #4]
 80149ce:	6039      	str	r1, [r7, #0]
    if (index >= count_) return NULLPTR;
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	685b      	ldr	r3, [r3, #4]
 80149d4:	683a      	ldr	r2, [r7, #0]
 80149d6:	429a      	cmp	r2, r3
 80149d8:	d301      	bcc.n	80149de <_ZNK22UtestShellPointerArray3getEj+0x18>
 80149da:	2300      	movs	r3, #0
 80149dc:	e005      	b.n	80149ea <_ZNK22UtestShellPointerArray3getEj+0x24>
    return arrayOfTests_[index];
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	681a      	ldr	r2, [r3, #0]
 80149e2:	683b      	ldr	r3, [r7, #0]
 80149e4:	009b      	lsls	r3, r3, #2
 80149e6:	4413      	add	r3, r2
 80149e8:	681b      	ldr	r3, [r3, #0]
}
 80149ea:	4618      	mov	r0, r3
 80149ec:	370c      	adds	r7, #12
 80149ee:	46bd      	mov	sp, r7
 80149f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149f4:	4770      	bx	lr
	...

080149f8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>:



////////////// TestInstaller ////////////

TestInstaller::TestInstaller(UtestShell& shell, const char* groupName, const char* testName, const char* fileName, size_t lineNumber)
 80149f8:	b580      	push	{r7, lr}
 80149fa:	b084      	sub	sp, #16
 80149fc:	af00      	add	r7, sp, #0
 80149fe:	60f8      	str	r0, [r7, #12]
 8014a00:	60b9      	str	r1, [r7, #8]
 8014a02:	607a      	str	r2, [r7, #4]
 8014a04:	603b      	str	r3, [r7, #0]
 8014a06:	4a10      	ldr	r2, [pc, #64]	; (8014a48 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j+0x50>)
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	601a      	str	r2, [r3, #0]
{
    shell.setGroupName(groupName);
 8014a0c:	6879      	ldr	r1, [r7, #4]
 8014a0e:	68b8      	ldr	r0, [r7, #8]
 8014a10:	f7fe fc27 	bl	8013262 <_ZN10UtestShell12setGroupNameEPKc>
    shell.setTestName(testName);
 8014a14:	6839      	ldr	r1, [r7, #0]
 8014a16:	68b8      	ldr	r0, [r7, #8]
 8014a18:	f7fe fc31 	bl	801327e <_ZN10UtestShell11setTestNameEPKc>
    shell.setFileName(fileName);
 8014a1c:	69b9      	ldr	r1, [r7, #24]
 8014a1e:	68b8      	ldr	r0, [r7, #8]
 8014a20:	f7fe fc03 	bl	801322a <_ZN10UtestShell11setFileNameEPKc>
    shell.setLineNumber(lineNumber);
 8014a24:	69f9      	ldr	r1, [r7, #28]
 8014a26:	68b8      	ldr	r0, [r7, #8]
 8014a28:	f7fe fc0d 	bl	8013246 <_ZN10UtestShell13setLineNumberEj>
    TestRegistry::getCurrentRegistry()->addTest(&shell);
 8014a2c:	f7fd fc20 	bl	8012270 <_ZN12TestRegistry18getCurrentRegistryEv>
 8014a30:	4603      	mov	r3, r0
 8014a32:	681a      	ldr	r2, [r3, #0]
 8014a34:	3208      	adds	r2, #8
 8014a36:	6812      	ldr	r2, [r2, #0]
 8014a38:	68b9      	ldr	r1, [r7, #8]
 8014a3a:	4618      	mov	r0, r3
 8014a3c:	4790      	blx	r2
}
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	4618      	mov	r0, r3
 8014a42:	3710      	adds	r7, #16
 8014a44:	46bd      	mov	sp, r7
 8014a46:	bd80      	pop	{r7, pc}
 8014a48:	08028a70 	.word	0x08028a70

08014a4c <_ZN13TestInstallerD1Ev>:

TestInstaller::~TestInstaller()
 8014a4c:	b480      	push	{r7}
 8014a4e:	b083      	sub	sp, #12
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	6078      	str	r0, [r7, #4]
 8014a54:	4a04      	ldr	r2, [pc, #16]	; (8014a68 <_ZN13TestInstallerD1Ev+0x1c>)
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	601a      	str	r2, [r3, #0]
{
}
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	370c      	adds	r7, #12
 8014a60:	46bd      	mov	sp, r7
 8014a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a66:	4770      	bx	lr
 8014a68:	08028a70 	.word	0x08028a70

08014a6c <_ZN13TestInstallerD0Ev>:
TestInstaller::~TestInstaller()
 8014a6c:	b580      	push	{r7, lr}
 8014a6e:	b082      	sub	sp, #8
 8014a70:	af00      	add	r7, sp, #0
 8014a72:	6078      	str	r0, [r7, #4]
}
 8014a74:	6878      	ldr	r0, [r7, #4]
 8014a76:	f7ff ffe9 	bl	8014a4c <_ZN13TestInstallerD1Ev>
 8014a7a:	2104      	movs	r1, #4
 8014a7c:	6878      	ldr	r0, [r7, #4]
 8014a7e:	f7f5 fd91 	bl	800a5a4 <_ZdlPvj>
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	4618      	mov	r0, r3
 8014a86:	3708      	adds	r7, #8
 8014a88:	46bd      	mov	sp, r7
 8014a8a:	bd80      	pop	{r7, pc}

08014a8c <_Z41__static_initialization_and_destruction_0ii>:

void TestInstaller::unDo()
{
    TestRegistry::getCurrentRegistry()->unDoLastAddTest();
}
 8014a8c:	b580      	push	{r7, lr}
 8014a8e:	b082      	sub	sp, #8
 8014a90:	af00      	add	r7, sp, #0
 8014a92:	6078      	str	r0, [r7, #4]
 8014a94:	6039      	str	r1, [r7, #0]
static const CrashingTestTerminator crashingTestTerminator;
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d10a      	bne.n	8014ab2 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8014a9c:	683b      	ldr	r3, [r7, #0]
 8014a9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014aa2:	4293      	cmp	r3, r2
 8014aa4:	d105      	bne.n	8014ab2 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8014aa6:	4805      	ldr	r0, [pc, #20]	; (8014abc <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8014aa8:	f7ff fe38 	bl	801471c <_ZN22CrashingTestTerminatorD1Ev>
static const NormalTestTerminator normalTestTerminator;
 8014aac:	4804      	ldr	r0, [pc, #16]	; (8014ac0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8014aae:	f7ff fdd5 	bl	801465c <_ZN20NormalTestTerminatorD1Ev>
}
 8014ab2:	bf00      	nop
 8014ab4:	3708      	adds	r7, #8
 8014ab6:	46bd      	mov	sp, r7
 8014ab8:	bd80      	pop	{r7, pc}
 8014aba:	bf00      	nop
 8014abc:	20000090 	.word	0x20000090
 8014ac0:	2000008c 	.word	0x2000008c

08014ac4 <_GLOBAL__sub_I__Z13doubles_equalddd>:
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	af00      	add	r7, sp, #0
 8014ac8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014acc:	2001      	movs	r0, #1
 8014ace:	f7ff ffdd 	bl	8014a8c <_Z41__static_initialization_and_destruction_0ii>
 8014ad2:	bd80      	pop	{r7, pc}

08014ad4 <_GLOBAL__sub_D__Z13doubles_equalddd>:
 8014ad4:	b580      	push	{r7, lr}
 8014ad6:	af00      	add	r7, sp, #0
 8014ad8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014adc:	2000      	movs	r0, #0
 8014ade:	f7ff ffd5 	bl	8014a8c <_Z41__static_initialization_and_destruction_0ii>
 8014ae2:	bd80      	pop	{r7, pc}

08014ae4 <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 8014ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ae6:	b083      	sub	sp, #12
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	ed87 0b00 	vstr	d0, [r7]
 8014aee:	683c      	ldr	r4, [r7, #0]
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8014af6:	2301      	movs	r3, #1
 8014af8:	461e      	mov	r6, r3
 8014afa:	f04f 32ff 	mov.w	r2, #4294967295
 8014afe:	4b10      	ldr	r3, [pc, #64]	; (8014b40 <_ZSt5isinfd+0x5c>)
 8014b00:	4620      	mov	r0, r4
 8014b02:	4629      	mov	r1, r5
 8014b04:	f7eb fe40 	bl	8000788 <__aeabi_dcmpun>
 8014b08:	4603      	mov	r3, r0
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d10b      	bne.n	8014b26 <_ZSt5isinfd+0x42>
 8014b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8014b12:	4b0b      	ldr	r3, [pc, #44]	; (8014b40 <_ZSt5isinfd+0x5c>)
 8014b14:	4620      	mov	r0, r4
 8014b16:	4629      	mov	r1, r5
 8014b18:	f7eb fe18 	bl	800074c <__aeabi_dcmple>
 8014b1c:	4603      	mov	r3, r0
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d101      	bne.n	8014b26 <_ZSt5isinfd+0x42>
 8014b22:	2300      	movs	r3, #0
 8014b24:	461e      	mov	r6, r3
 8014b26:	b2f3      	uxtb	r3, r6
 8014b28:	f083 0301 	eor.w	r3, r3, #1
 8014b2c:	b2db      	uxtb	r3, r3
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	bf14      	ite	ne
 8014b32:	2301      	movne	r3, #1
 8014b34:	2300      	moveq	r3, #0
 8014b36:	b2db      	uxtb	r3, r3
 8014b38:	4618      	mov	r0, r3
 8014b3a:	370c      	adds	r7, #12
 8014b3c:	46bd      	mov	sp, r7
 8014b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b40:	7fefffff 	.word	0x7fefffff

08014b44 <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 8014b44:	b590      	push	{r4, r7, lr}
 8014b46:	b083      	sub	sp, #12
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	ed87 0b00 	vstr	d0, [r7]
 8014b4e:	2301      	movs	r3, #1
 8014b50:	461c      	mov	r4, r3
 8014b52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014b56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8014b5a:	f7eb fe15 	bl	8000788 <__aeabi_dcmpun>
 8014b5e:	4603      	mov	r3, r0
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d101      	bne.n	8014b68 <_ZSt5isnand+0x24>
 8014b64:	2300      	movs	r3, #0
 8014b66:	461c      	mov	r4, r3
 8014b68:	b2e3      	uxtb	r3, r4
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	bf14      	ite	ne
 8014b6e:	2301      	movne	r3, #1
 8014b70:	2300      	moveq	r3, #0
 8014b72:	b2db      	uxtb	r3, r3
 8014b74:	4618      	mov	r0, r3
 8014b76:	370c      	adds	r7, #12
 8014b78:	46bd      	mov	sp, r7
 8014b7a:	bd90      	pop	{r4, r7, pc}

08014b7c <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult>:

// There is a possibility that a compiler provides fork but not waitpid.
#if !defined(CPPUTEST_HAVE_FORK) || !defined(CPPUTEST_HAVE_WAITPID)

static void GccPlatformSpecificRunTestInASeperateProcess(UtestShell* shell, TestPlugin*, TestResult* result)
{
 8014b7c:	b590      	push	{r4, r7, lr}
 8014b7e:	b095      	sub	sp, #84	; 0x54
 8014b80:	af00      	add	r7, sp, #0
 8014b82:	60f8      	str	r0, [r7, #12]
 8014b84:	60b9      	str	r1, [r7, #8]
 8014b86:	607a      	str	r2, [r7, #4]
    result->addFailure(TestFailure(shell, "-p doesn't work on this platform, as it is lacking fork.\b"));
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	3334      	adds	r3, #52	; 0x34
 8014b8e:	681c      	ldr	r4, [r3, #0]
 8014b90:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014b94:	490f      	ldr	r1, [pc, #60]	; (8014bd4 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult+0x58>)
 8014b96:	4618      	mov	r0, r3
 8014b98:	f7f8 f8b3 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8014b9c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8014ba0:	f107 0314 	add.w	r3, r7, #20
 8014ba4:	68f9      	ldr	r1, [r7, #12]
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	f7f9 ff0a 	bl	800e9c0 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 8014bac:	f107 0314 	add.w	r3, r7, #20
 8014bb0:	4619      	mov	r1, r3
 8014bb2:	6878      	ldr	r0, [r7, #4]
 8014bb4:	47a0      	blx	r4
 8014bb6:	f107 0314 	add.w	r3, r7, #20
 8014bba:	4618      	mov	r0, r3
 8014bbc:	f7f9 ffc0 	bl	800eb40 <_ZN11TestFailureD1Ev>
 8014bc0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	f7f8 fc54 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 8014bca:	bf00      	nop
 8014bcc:	3754      	adds	r7, #84	; 0x54
 8014bce:	46bd      	mov	sp, r7
 8014bd0:	bd90      	pop	{r4, r7, pc}
 8014bd2:	bf00      	nop
 8014bd4:	080251ec 	.word	0x080251ec

08014bd8 <_Z37PlatformSpecificGetWorkingEnvironmentv>:
}

#endif

TestOutput::WorkingEnvironment PlatformSpecificGetWorkingEnvironment()
{
 8014bd8:	b480      	push	{r7}
 8014bda:	af00      	add	r7, sp, #0
    return TestOutput::eclipse;
 8014bdc:	2301      	movs	r3, #1
}
 8014bde:	4618      	mov	r0, r3
 8014be0:	46bd      	mov	sp, r7
 8014be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be6:	4770      	bx	lr

08014be8 <PlatformSpecificSetJmpImplementation>:
int (*PlatformSpecificWaitPid)(int, int*, int) = PlatformSpecificWaitPidImplementation;

extern "C" {

static int PlatformSpecificSetJmpImplementation(void (*function) (void* data), void* data)
{
 8014be8:	b580      	push	{r7, lr}
 8014bea:	b082      	sub	sp, #8
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	6078      	str	r0, [r7, #4]
 8014bf0:	6039      	str	r1, [r7, #0]
    if (0 == setjmp(test_exit_jmp_buf[jmp_buf_index])) {
 8014bf2:	4b13      	ldr	r3, [pc, #76]	; (8014c40 <PlatformSpecificSetJmpImplementation+0x58>)
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	225c      	movs	r2, #92	; 0x5c
 8014bf8:	fb02 f303 	mul.w	r3, r2, r3
 8014bfc:	4a11      	ldr	r2, [pc, #68]	; (8014c44 <PlatformSpecificSetJmpImplementation+0x5c>)
 8014bfe:	4413      	add	r3, r2
 8014c00:	4618      	mov	r0, r3
 8014c02:	f7eb fb0d 	bl	8000220 <setjmp>
 8014c06:	4603      	mov	r3, r0
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	bf0c      	ite	eq
 8014c0c:	2301      	moveq	r3, #1
 8014c0e:	2300      	movne	r3, #0
 8014c10:	b2db      	uxtb	r3, r3
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d00e      	beq.n	8014c34 <PlatformSpecificSetJmpImplementation+0x4c>
        jmp_buf_index++;
 8014c16:	4b0a      	ldr	r3, [pc, #40]	; (8014c40 <PlatformSpecificSetJmpImplementation+0x58>)
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	3301      	adds	r3, #1
 8014c1c:	4a08      	ldr	r2, [pc, #32]	; (8014c40 <PlatformSpecificSetJmpImplementation+0x58>)
 8014c1e:	6013      	str	r3, [r2, #0]
        function(data);
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	6838      	ldr	r0, [r7, #0]
 8014c24:	4798      	blx	r3
        jmp_buf_index--;
 8014c26:	4b06      	ldr	r3, [pc, #24]	; (8014c40 <PlatformSpecificSetJmpImplementation+0x58>)
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	3b01      	subs	r3, #1
 8014c2c:	4a04      	ldr	r2, [pc, #16]	; (8014c40 <PlatformSpecificSetJmpImplementation+0x58>)
 8014c2e:	6013      	str	r3, [r2, #0]
        return 1;
 8014c30:	2301      	movs	r3, #1
 8014c32:	e000      	b.n	8014c36 <PlatformSpecificSetJmpImplementation+0x4e>
    }
    return 0;
 8014c34:	2300      	movs	r3, #0
}
 8014c36:	4618      	mov	r0, r3
 8014c38:	3708      	adds	r7, #8
 8014c3a:	46bd      	mov	sp, r7
 8014c3c:	bd80      	pop	{r7, pc}
 8014c3e:	bf00      	nop
 8014c40:	20000e5c 	.word	0x20000e5c
 8014c44:	20000ac4 	.word	0x20000ac4

08014c48 <PlatformSpecificLongJmpImplementation>:
 #if !((__clang_major__ == 3) && (__clang_minor__ == 0))
 _no_return_
 #endif
#endif
static void PlatformSpecificLongJmpImplementation()
{
 8014c48:	b580      	push	{r7, lr}
 8014c4a:	af00      	add	r7, sp, #0
    jmp_buf_index--;
 8014c4c:	4b07      	ldr	r3, [pc, #28]	; (8014c6c <PlatformSpecificLongJmpImplementation+0x24>)
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	3b01      	subs	r3, #1
 8014c52:	4a06      	ldr	r2, [pc, #24]	; (8014c6c <PlatformSpecificLongJmpImplementation+0x24>)
 8014c54:	6013      	str	r3, [r2, #0]
    longjmp(test_exit_jmp_buf[jmp_buf_index], 1);
 8014c56:	4b05      	ldr	r3, [pc, #20]	; (8014c6c <PlatformSpecificLongJmpImplementation+0x24>)
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	225c      	movs	r2, #92	; 0x5c
 8014c5c:	fb02 f303 	mul.w	r3, r2, r3
 8014c60:	4a03      	ldr	r2, [pc, #12]	; (8014c70 <PlatformSpecificLongJmpImplementation+0x28>)
 8014c62:	4413      	add	r3, r2
 8014c64:	2101      	movs	r1, #1
 8014c66:	4618      	mov	r0, r3
 8014c68:	f7eb fae0 	bl	800022c <longjmp>
 8014c6c:	20000e5c 	.word	0x20000e5c
 8014c70:	20000ac4 	.word	0x20000ac4

08014c74 <TimeInMillisImplementation>:
void (*PlatformSpecificRestoreJumpBuffer)() = PlatformSpecificRestoreJumpBufferImplementation;

///////////// Time in millis

static long TimeInMillisImplementation()
{
 8014c74:	b480      	push	{r7}
 8014c76:	af00      	add	r7, sp, #0
    struct timeval tv;
    struct timezone tz;
    gettimeofday(&tv, &tz);
    return (tv.tv_sec * 1000) + (long)((double)tv.tv_usec * 0.001);
#else
    return 0;
 8014c78:	2300      	movs	r3, #0
#endif
}
 8014c7a:	4618      	mov	r0, r3
 8014c7c:	46bd      	mov	sp, r7
 8014c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c82:	4770      	bx	lr

08014c84 <TimeStringImplementation>:

static const char* TimeStringImplementation()
{
 8014c84:	b580      	push	{r7, lr}
 8014c86:	b084      	sub	sp, #16
 8014c88:	af00      	add	r7, sp, #0
    time_t theTime = time(NULLPTR);
 8014c8a:	2000      	movs	r0, #0
 8014c8c:	f00e ec4c 	blx	8023528 <__time_veneer>
 8014c90:	4602      	mov	r2, r0
 8014c92:	460b      	mov	r3, r1
 8014c94:	e9c7 2300 	strd	r2, r3, [r7]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
    static struct tm lastlocaltime;
    localtime_s(&lastlocaltime, &theTime);
    struct tm *tmp = &lastlocaltime;
#else
    struct tm *tmp = localtime(&theTime);
 8014c98:	463b      	mov	r3, r7
 8014c9a:	4618      	mov	r0, r3
 8014c9c:	f00b fb78 	bl	8020390 <localtime>
 8014ca0:	60f8      	str	r0, [r7, #12]
#endif
    strftime(dateTime, 80, "%Y-%m-%dT%H:%M:%S", tmp);
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	4a04      	ldr	r2, [pc, #16]	; (8014cb8 <TimeStringImplementation+0x34>)
 8014ca6:	2150      	movs	r1, #80	; 0x50
 8014ca8:	4804      	ldr	r0, [pc, #16]	; (8014cbc <TimeStringImplementation+0x38>)
 8014caa:	f00c fc79 	bl	80215a0 <strftime>
    return dateTime;
 8014cae:	4b03      	ldr	r3, [pc, #12]	; (8014cbc <TimeStringImplementation+0x38>)
}
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	3710      	adds	r7, #16
 8014cb4:	46bd      	mov	sp, r7
 8014cb6:	bd80      	pop	{r7, pc}
 8014cb8:	08025228 	.word	0x08025228
 8014cbc:	20000e60 	.word	0x20000e60

08014cc0 <PlatformSpecificFOpenImplementation>:
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#endif
int (*PlatformSpecificVSNprintf)(char *str, size_t size, const char* format, va_list va_args_list) = vsnprintf;

static PlatformSpecificFile PlatformSpecificFOpenImplementation(const char* filename, const char* flag)
{
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	b082      	sub	sp, #8
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	6078      	str	r0, [r7, #4]
 8014cc8:	6039      	str	r1, [r7, #0]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
  FILE* file;
   fopen_s(&file, filename, flag);
   return file;
#else
   return fopen(filename, flag);
 8014cca:	6839      	ldr	r1, [r7, #0]
 8014ccc:	6878      	ldr	r0, [r7, #4]
 8014cce:	f00b f995 	bl	801fffc <fopen>
 8014cd2:	4603      	mov	r3, r0
#endif
}
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	3708      	adds	r7, #8
 8014cd8:	46bd      	mov	sp, r7
 8014cda:	bd80      	pop	{r7, pc}

08014cdc <PlatformSpecificFPutsImplementation>:

static void PlatformSpecificFPutsImplementation(const char* str, PlatformSpecificFile file)
{
 8014cdc:	b580      	push	{r7, lr}
 8014cde:	b082      	sub	sp, #8
 8014ce0:	af00      	add	r7, sp, #0
 8014ce2:	6078      	str	r0, [r7, #4]
 8014ce4:	6039      	str	r1, [r7, #0]
   fputs(str, (FILE*)file);
 8014ce6:	6839      	ldr	r1, [r7, #0]
 8014ce8:	6878      	ldr	r0, [r7, #4]
 8014cea:	f00b f9f5 	bl	80200d8 <fputs>
}
 8014cee:	bf00      	nop
 8014cf0:	3708      	adds	r7, #8
 8014cf2:	46bd      	mov	sp, r7
 8014cf4:	bd80      	pop	{r7, pc}

08014cf6 <PlatformSpecificFCloseImplementation>:

static void PlatformSpecificFCloseImplementation(PlatformSpecificFile file)
{
 8014cf6:	b580      	push	{r7, lr}
 8014cf8:	b082      	sub	sp, #8
 8014cfa:	af00      	add	r7, sp, #0
 8014cfc:	6078      	str	r0, [r7, #4]
   fclose((FILE*)file);
 8014cfe:	6878      	ldr	r0, [r7, #4]
 8014d00:	f00a ff76 	bl	801fbf0 <fclose>
}
 8014d04:	bf00      	nop
 8014d06:	3708      	adds	r7, #8
 8014d08:	46bd      	mov	sp, r7
 8014d0a:	bd80      	pop	{r7, pc}

08014d0c <PlatformSpecificFlushImplementation>:

static void PlatformSpecificFlushImplementation()
{
 8014d0c:	b580      	push	{r7, lr}
 8014d0e:	af00      	add	r7, sp, #0
  fflush(stdout);
 8014d10:	4b03      	ldr	r3, [pc, #12]	; (8014d20 <PlatformSpecificFlushImplementation+0x14>)
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	689b      	ldr	r3, [r3, #8]
 8014d16:	4618      	mov	r0, r3
 8014d18:	f00b f834 	bl	801fd84 <fflush>
}
 8014d1c:	bf00      	nop
 8014d1e:	bd80      	pop	{r7, pc}
 8014d20:	20000108 	.word	0x20000108

08014d24 <IsNanImplementation>:
#if defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8))
#pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

static int IsNanImplementation(double d)
{
 8014d24:	b580      	push	{r7, lr}
 8014d26:	b082      	sub	sp, #8
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	ed87 0b00 	vstr	d0, [r7]
    return isnan(d);
 8014d2e:	ed97 0b00 	vldr	d0, [r7]
 8014d32:	f7ff ff07 	bl	8014b44 <_ZSt5isnand>
 8014d36:	4603      	mov	r3, r0
}
 8014d38:	4618      	mov	r0, r3
 8014d3a:	3708      	adds	r7, #8
 8014d3c:	46bd      	mov	sp, r7
 8014d3e:	bd80      	pop	{r7, pc}

08014d40 <IsInfImplementation>:

static int IsInfImplementation(double d)
{
 8014d40:	b580      	push	{r7, lr}
 8014d42:	b082      	sub	sp, #8
 8014d44:	af00      	add	r7, sp, #0
 8014d46:	ed87 0b00 	vstr	d0, [r7]
    return isinf(d);
 8014d4a:	ed97 0b00 	vldr	d0, [r7]
 8014d4e:	f7ff fec9 	bl	8014ae4 <_ZSt5isinfd>
 8014d52:	4603      	mov	r3, r0
}
 8014d54:	4618      	mov	r0, r3
 8014d56:	3708      	adds	r7, #8
 8014d58:	46bd      	mov	sp, r7
 8014d5a:	bd80      	pop	{r7, pc}

08014d5c <PThreadMutexCreate>:
int (*PlatformSpecificIsNan)(double) = IsNanImplementation;
int (*PlatformSpecificIsInf)(double) = IsInfImplementation;
int (*PlatformSpecificAtExit)(void(*func)(void)) = atexit;  /// this was undefined before

static PlatformSpecificMutex PThreadMutexCreate(void)
{
 8014d5c:	b480      	push	{r7}
 8014d5e:	af00      	add	r7, sp, #0
    pthread_mutex_t *mutex = new pthread_mutex_t;

    pthread_mutex_init(mutex, NULLPTR);
    return (PlatformSpecificMutex)mutex;
#else
    return NULLPTR;
 8014d60:	2300      	movs	r3, #0
#endif

}
 8014d62:	4618      	mov	r0, r3
 8014d64:	46bd      	mov	sp, r7
 8014d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d6a:	4770      	bx	lr

08014d6c <PThreadMutexLock>:
{
    pthread_mutex_lock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexLock(PlatformSpecificMutex)
{
 8014d6c:	b480      	push	{r7}
 8014d6e:	b083      	sub	sp, #12
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	6078      	str	r0, [r7, #4]
}
 8014d74:	bf00      	nop
 8014d76:	370c      	adds	r7, #12
 8014d78:	46bd      	mov	sp, r7
 8014d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d7e:	4770      	bx	lr

08014d80 <PThreadMutexUnlock>:
{
    pthread_mutex_unlock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexUnlock(PlatformSpecificMutex)
{
 8014d80:	b480      	push	{r7}
 8014d82:	b083      	sub	sp, #12
 8014d84:	af00      	add	r7, sp, #0
 8014d86:	6078      	str	r0, [r7, #4]
}
 8014d88:	bf00      	nop
 8014d8a:	370c      	adds	r7, #12
 8014d8c:	46bd      	mov	sp, r7
 8014d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d92:	4770      	bx	lr

08014d94 <PThreadMutexDestroy>:
    pthread_mutex_destroy(mutex);
    delete mutex;
}
#else
static void PThreadMutexDestroy(PlatformSpecificMutex)
{
 8014d94:	b480      	push	{r7}
 8014d96:	b083      	sub	sp, #12
 8014d98:	af00      	add	r7, sp, #0
 8014d9a:	6078      	str	r0, [r7, #4]
}
 8014d9c:	bf00      	nop
 8014d9e:	370c      	adds	r7, #12
 8014da0:	46bd      	mov	sp, r7
 8014da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da6:	4770      	bx	lr

08014da8 <_ZN20CommandLineArgumentsC1EiPKPKc>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/CommandLineArguments.h"
#include "CppUTest/PlatformSpecificFunctions.h"

CommandLineArguments::CommandLineArguments(int ac, const char *const *av) :
 8014da8:	b580      	push	{r7, lr}
 8014daa:	b084      	sub	sp, #16
 8014dac:	af00      	add	r7, sp, #0
 8014dae:	60f8      	str	r0, [r7, #12]
 8014db0:	60b9      	str	r1, [r7, #8]
 8014db2:	607a      	str	r2, [r7, #4]
    ac_(ac), av_(av), needHelp_(false), verbose_(false), veryVerbose_(false), color_(false), runTestsAsSeperateProcess_(false), listTestGroupNames_(false), listTestGroupAndCaseNames_(false), listTestLocations_(false), runIgnored_(false), reversing_(false), crashOnFail_(false), shuffling_(false), shufflingPreSeeded_(false), repeat_(1), shuffleSeed_(0), groupFilters_(NULLPTR), nameFilters_(NULLPTR), outputType_(OUTPUT_ECLIPSE)
 8014db4:	4a25      	ldr	r2, [pc, #148]	; (8014e4c <_ZN20CommandLineArgumentsC1EiPKPKc+0xa4>)
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	601a      	str	r2, [r3, #0]
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	68ba      	ldr	r2, [r7, #8]
 8014dbe:	605a      	str	r2, [r3, #4]
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	687a      	ldr	r2, [r7, #4]
 8014dc4:	609a      	str	r2, [r3, #8]
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	2200      	movs	r2, #0
 8014dca:	731a      	strb	r2, [r3, #12]
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	2200      	movs	r2, #0
 8014dd0:	735a      	strb	r2, [r3, #13]
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	2200      	movs	r2, #0
 8014dd6:	739a      	strb	r2, [r3, #14]
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	2200      	movs	r2, #0
 8014ddc:	73da      	strb	r2, [r3, #15]
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	2200      	movs	r2, #0
 8014de2:	741a      	strb	r2, [r3, #16]
 8014de4:	68fb      	ldr	r3, [r7, #12]
 8014de6:	2200      	movs	r2, #0
 8014de8:	745a      	strb	r2, [r3, #17]
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	2200      	movs	r2, #0
 8014dee:	749a      	strb	r2, [r3, #18]
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	2200      	movs	r2, #0
 8014df4:	74da      	strb	r2, [r3, #19]
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	2200      	movs	r2, #0
 8014dfa:	751a      	strb	r2, [r3, #20]
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	2200      	movs	r2, #0
 8014e00:	755a      	strb	r2, [r3, #21]
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	2200      	movs	r2, #0
 8014e06:	759a      	strb	r2, [r3, #22]
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	75da      	strb	r2, [r3, #23]
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	2200      	movs	r2, #0
 8014e12:	761a      	strb	r2, [r3, #24]
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	2201      	movs	r2, #1
 8014e18:	61da      	str	r2, [r3, #28]
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	2200      	movs	r2, #0
 8014e1e:	621a      	str	r2, [r3, #32]
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	2200      	movs	r2, #0
 8014e24:	625a      	str	r2, [r3, #36]	; 0x24
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	2200      	movs	r2, #0
 8014e2a:	629a      	str	r2, [r3, #40]	; 0x28
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	2200      	movs	r2, #0
 8014e30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	3330      	adds	r3, #48	; 0x30
 8014e38:	4905      	ldr	r1, [pc, #20]	; (8014e50 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa8>)
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	f7f7 ff61 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
{
}
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	4618      	mov	r0, r3
 8014e44:	3710      	adds	r7, #16
 8014e46:	46bd      	mov	sp, r7
 8014e48:	bd80      	pop	{r7, pc}
 8014e4a:	bf00      	nop
 8014e4c:	08028b9c 	.word	0x08028b9c
 8014e50:	0802523c 	.word	0x0802523c

08014e54 <_ZN10TestFilterD1Ev>:
#ifndef TESTFILTER_H_
#define TESTFILTER_H_

#include "SimpleString.h"

class TestFilter
 8014e54:	b580      	push	{r7, lr}
 8014e56:	b082      	sub	sp, #8
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	6078      	str	r0, [r7, #4]
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	4618      	mov	r0, r3
 8014e60:	f7f8 fb07 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	4618      	mov	r0, r3
 8014e68:	3708      	adds	r7, #8
 8014e6a:	46bd      	mov	sp, r7
 8014e6c:	bd80      	pop	{r7, pc}
	...

08014e70 <_ZN20CommandLineArgumentsD1Ev>:

CommandLineArguments::~CommandLineArguments()
 8014e70:	b590      	push	{r4, r7, lr}
 8014e72:	b085      	sub	sp, #20
 8014e74:	af00      	add	r7, sp, #0
 8014e76:	6078      	str	r0, [r7, #4]
 8014e78:	4a20      	ldr	r2, [pc, #128]	; (8014efc <_ZN20CommandLineArgumentsD1Ev+0x8c>)
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	601a      	str	r2, [r3, #0]
{
    while(groupFilters_) {
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d015      	beq.n	8014eb2 <_ZN20CommandLineArgumentsD1Ev+0x42>
        TestFilter* current = groupFilters_;
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e8a:	60fb      	str	r3, [r7, #12]
        groupFilters_ = groupFilters_->getNext();
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e90:	4618      	mov	r0, r3
 8014e92:	f00a fda2 	bl	801f9da <_ZNK10TestFilter7getNextEv>
 8014e96:	4602      	mov	r2, r0
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	625a      	str	r2, [r3, #36]	; 0x24
        delete current;
 8014e9c:	68fc      	ldr	r4, [r7, #12]
 8014e9e:	2c00      	cmp	r4, #0
 8014ea0:	d0ed      	beq.n	8014e7e <_ZN20CommandLineArgumentsD1Ev+0xe>
 8014ea2:	4620      	mov	r0, r4
 8014ea4:	f7ff ffd6 	bl	8014e54 <_ZN10TestFilterD1Ev>
 8014ea8:	2110      	movs	r1, #16
 8014eaa:	4620      	mov	r0, r4
 8014eac:	f7f5 fb7a 	bl	800a5a4 <_ZdlPvj>
    while(groupFilters_) {
 8014eb0:	e7e5      	b.n	8014e7e <_ZN20CommandLineArgumentsD1Ev+0xe>
    }
    while(nameFilters_) {
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d015      	beq.n	8014ee6 <_ZN20CommandLineArgumentsD1Ev+0x76>
        TestFilter* current = nameFilters_;
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ebe:	60bb      	str	r3, [r7, #8]
        nameFilters_ = nameFilters_->getNext();
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	f00a fd88 	bl	801f9da <_ZNK10TestFilter7getNextEv>
 8014eca:	4602      	mov	r2, r0
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	629a      	str	r2, [r3, #40]	; 0x28
        delete current;
 8014ed0:	68bc      	ldr	r4, [r7, #8]
 8014ed2:	2c00      	cmp	r4, #0
 8014ed4:	d0ed      	beq.n	8014eb2 <_ZN20CommandLineArgumentsD1Ev+0x42>
 8014ed6:	4620      	mov	r0, r4
 8014ed8:	f7ff ffbc 	bl	8014e54 <_ZN10TestFilterD1Ev>
 8014edc:	2110      	movs	r1, #16
 8014ede:	4620      	mov	r0, r4
 8014ee0:	f7f5 fb60 	bl	800a5a4 <_ZdlPvj>
    while(nameFilters_) {
 8014ee4:	e7e5      	b.n	8014eb2 <_ZN20CommandLineArgumentsD1Ev+0x42>
CommandLineArguments::~CommandLineArguments()
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	3330      	adds	r3, #48	; 0x30
 8014eea:	4618      	mov	r0, r3
 8014eec:	f7f8 fac1 	bl	800d472 <_ZN12SimpleStringD1Ev>
    }
}
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	4618      	mov	r0, r3
 8014ef4:	3714      	adds	r7, #20
 8014ef6:	46bd      	mov	sp, r7
 8014ef8:	bd90      	pop	{r4, r7, pc}
 8014efa:	bf00      	nop
 8014efc:	08028b9c 	.word	0x08028b9c

08014f00 <_ZN20CommandLineArgumentsD0Ev>:
CommandLineArguments::~CommandLineArguments()
 8014f00:	b580      	push	{r7, lr}
 8014f02:	b082      	sub	sp, #8
 8014f04:	af00      	add	r7, sp, #0
 8014f06:	6078      	str	r0, [r7, #4]
}
 8014f08:	6878      	ldr	r0, [r7, #4]
 8014f0a:	f7ff ffb1 	bl	8014e70 <_ZN20CommandLineArgumentsD1Ev>
 8014f0e:	2138      	movs	r1, #56	; 0x38
 8014f10:	6878      	ldr	r0, [r7, #4]
 8014f12:	f7f5 fb47 	bl	800a5a4 <_ZdlPvj>
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	4618      	mov	r0, r3
 8014f1a:	3708      	adds	r7, #8
 8014f1c:	46bd      	mov	sp, r7
 8014f1e:	bd80      	pop	{r7, pc}

08014f20 <_ZN20CommandLineArguments5parseEP10TestPlugin>:

bool CommandLineArguments::parse(TestPlugin* plugin)
{
 8014f20:	b5b0      	push	{r4, r5, r7, lr}
 8014f22:	b0be      	sub	sp, #248	; 0xf8
 8014f24:	af02      	add	r7, sp, #8
 8014f26:	6078      	str	r0, [r7, #4]
 8014f28:	6039      	str	r1, [r7, #0]
 8014f2a:	2400      	movs	r4, #0
    bool correctParameters = true;
 8014f2c:	2301      	movs	r3, #1
 8014f2e:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    for (int i = 1; i < ac_; i++) {
 8014f32:	2301      	movs	r3, #1
 8014f34:	613b      	str	r3, [r7, #16]
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	685a      	ldr	r2, [r3, #4]
 8014f3a:	693b      	ldr	r3, [r7, #16]
 8014f3c:	429a      	cmp	r2, r3
 8014f3e:	f340 83a4 	ble.w	801568a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76a>
        SimpleString argument = av_[i];
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	689a      	ldr	r2, [r3, #8]
 8014f46:	693b      	ldr	r3, [r7, #16]
 8014f48:	009b      	lsls	r3, r3, #2
 8014f4a:	4413      	add	r3, r2
 8014f4c:	681a      	ldr	r2, [r3, #0]
 8014f4e:	f107 0308 	add.w	r3, r7, #8
 8014f52:	4611      	mov	r1, r2
 8014f54:	4618      	mov	r0, r3
 8014f56:	f7f7 fed4 	bl	800cd02 <_ZN12SimpleStringC1EPKc>

        if (argument == "-h") {
 8014f5a:	f107 0314 	add.w	r3, r7, #20
 8014f5e:	49c8      	ldr	r1, [pc, #800]	; (8015280 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x360>)
 8014f60:	4618      	mov	r0, r3
 8014f62:	f7f7 fece 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8014f66:	f107 0214 	add.w	r2, r7, #20
 8014f6a:	f107 0308 	add.w	r3, r7, #8
 8014f6e:	4611      	mov	r1, r2
 8014f70:	4618      	mov	r0, r3
 8014f72:	f7f8 fa8a 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 8014f76:	4603      	mov	r3, r0
 8014f78:	461d      	mov	r5, r3
 8014f7a:	f107 0314 	add.w	r3, r7, #20
 8014f7e:	4618      	mov	r0, r3
 8014f80:	f7f8 fa77 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8014f84:	2d00      	cmp	r5, #0
 8014f86:	d006      	beq.n	8014f96 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76>
            needHelp_ = true;
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	2201      	movs	r2, #1
 8014f8c:	731a      	strb	r2, [r3, #12]
            correctParameters = false;
 8014f8e:	2300      	movs	r3, #0
 8014f90:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8014f94:	e366      	b.n	8015664 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        }
        else if (argument == "-v") verbose_ = true;
 8014f96:	f107 031c 	add.w	r3, r7, #28
 8014f9a:	49ba      	ldr	r1, [pc, #744]	; (8015284 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x364>)
 8014f9c:	4618      	mov	r0, r3
 8014f9e:	f7f7 feb0 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8014fa2:	f107 021c 	add.w	r2, r7, #28
 8014fa6:	f107 0308 	add.w	r3, r7, #8
 8014faa:	4611      	mov	r1, r2
 8014fac:	4618      	mov	r0, r3
 8014fae:	f7f8 fa6c 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 8014fb2:	4603      	mov	r3, r0
 8014fb4:	461d      	mov	r5, r3
 8014fb6:	f107 031c 	add.w	r3, r7, #28
 8014fba:	4618      	mov	r0, r3
 8014fbc:	f7f8 fa59 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8014fc0:	2d00      	cmp	r5, #0
 8014fc2:	d003      	beq.n	8014fcc <_ZN20CommandLineArguments5parseEP10TestPlugin+0xac>
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	2201      	movs	r2, #1
 8014fc8:	735a      	strb	r2, [r3, #13]
 8014fca:	e34b      	b.n	8015664 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-vv") veryVerbose_ = true;
 8014fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014fd0:	49ad      	ldr	r1, [pc, #692]	; (8015288 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x368>)
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	f7f7 fe95 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8014fd8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014fdc:	f107 0308 	add.w	r3, r7, #8
 8014fe0:	4611      	mov	r1, r2
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	f7f8 fa51 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 8014fe8:	4603      	mov	r3, r0
 8014fea:	461d      	mov	r5, r3
 8014fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	f7f8 fa3e 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8014ff6:	2d00      	cmp	r5, #0
 8014ff8:	d003      	beq.n	8015002 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xe2>
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	2201      	movs	r2, #1
 8014ffe:	739a      	strb	r2, [r3, #14]
 8015000:	e330      	b.n	8015664 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-c") color_ = true;
 8015002:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015006:	49a1      	ldr	r1, [pc, #644]	; (801528c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x36c>)
 8015008:	4618      	mov	r0, r3
 801500a:	f7f7 fe7a 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801500e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8015012:	f107 0308 	add.w	r3, r7, #8
 8015016:	4611      	mov	r1, r2
 8015018:	4618      	mov	r0, r3
 801501a:	f7f8 fa36 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801501e:	4603      	mov	r3, r0
 8015020:	461d      	mov	r5, r3
 8015022:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015026:	4618      	mov	r0, r3
 8015028:	f7f8 fa23 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801502c:	2d00      	cmp	r5, #0
 801502e:	d003      	beq.n	8015038 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x118>
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	2201      	movs	r2, #1
 8015034:	73da      	strb	r2, [r3, #15]
 8015036:	e315      	b.n	8015664 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-p") runTestsAsSeperateProcess_ = true;
 8015038:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801503c:	4994      	ldr	r1, [pc, #592]	; (8015290 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x370>)
 801503e:	4618      	mov	r0, r3
 8015040:	f7f7 fe5f 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8015044:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8015048:	f107 0308 	add.w	r3, r7, #8
 801504c:	4611      	mov	r1, r2
 801504e:	4618      	mov	r0, r3
 8015050:	f7f8 fa1b 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 8015054:	4603      	mov	r3, r0
 8015056:	461d      	mov	r5, r3
 8015058:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801505c:	4618      	mov	r0, r3
 801505e:	f7f8 fa08 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8015062:	2d00      	cmp	r5, #0
 8015064:	d003      	beq.n	801506e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x14e>
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	2201      	movs	r2, #1
 801506a:	741a      	strb	r2, [r3, #16]
 801506c:	e2fa      	b.n	8015664 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-b") reversing_ = true;
 801506e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015072:	4988      	ldr	r1, [pc, #544]	; (8015294 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x374>)
 8015074:	4618      	mov	r0, r3
 8015076:	f7f7 fe44 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801507a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801507e:	f107 0308 	add.w	r3, r7, #8
 8015082:	4611      	mov	r1, r2
 8015084:	4618      	mov	r0, r3
 8015086:	f7f8 fa00 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801508a:	4603      	mov	r3, r0
 801508c:	461d      	mov	r5, r3
 801508e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015092:	4618      	mov	r0, r3
 8015094:	f7f8 f9ed 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8015098:	2d00      	cmp	r5, #0
 801509a:	d003      	beq.n	80150a4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x184>
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	2201      	movs	r2, #1
 80150a0:	755a      	strb	r2, [r3, #21]
 80150a2:	e2df      	b.n	8015664 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-lg") listTestGroupNames_ = true;
 80150a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80150a8:	497b      	ldr	r1, [pc, #492]	; (8015298 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x378>)
 80150aa:	4618      	mov	r0, r3
 80150ac:	f7f7 fe29 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80150b0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80150b4:	f107 0308 	add.w	r3, r7, #8
 80150b8:	4611      	mov	r1, r2
 80150ba:	4618      	mov	r0, r3
 80150bc:	f7f8 f9e5 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 80150c0:	4603      	mov	r3, r0
 80150c2:	461d      	mov	r5, r3
 80150c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80150c8:	4618      	mov	r0, r3
 80150ca:	f7f8 f9d2 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80150ce:	2d00      	cmp	r5, #0
 80150d0:	d003      	beq.n	80150da <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1ba>
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	2201      	movs	r2, #1
 80150d6:	745a      	strb	r2, [r3, #17]
 80150d8:	e2c4      	b.n	8015664 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ln") listTestGroupAndCaseNames_ = true;
 80150da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80150de:	496f      	ldr	r1, [pc, #444]	; (801529c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x37c>)
 80150e0:	4618      	mov	r0, r3
 80150e2:	f7f7 fe0e 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80150e6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80150ea:	f107 0308 	add.w	r3, r7, #8
 80150ee:	4611      	mov	r1, r2
 80150f0:	4618      	mov	r0, r3
 80150f2:	f7f8 f9ca 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 80150f6:	4603      	mov	r3, r0
 80150f8:	461d      	mov	r5, r3
 80150fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80150fe:	4618      	mov	r0, r3
 8015100:	f7f8 f9b7 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8015104:	2d00      	cmp	r5, #0
 8015106:	d003      	beq.n	8015110 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1f0>
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	2201      	movs	r2, #1
 801510c:	749a      	strb	r2, [r3, #18]
 801510e:	e2a9      	b.n	8015664 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ll") listTestLocations_ = true;
 8015110:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015114:	4962      	ldr	r1, [pc, #392]	; (80152a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x380>)
 8015116:	4618      	mov	r0, r3
 8015118:	f7f7 fdf3 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801511c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8015120:	f107 0308 	add.w	r3, r7, #8
 8015124:	4611      	mov	r1, r2
 8015126:	4618      	mov	r0, r3
 8015128:	f7f8 f9af 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801512c:	4603      	mov	r3, r0
 801512e:	461d      	mov	r5, r3
 8015130:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015134:	4618      	mov	r0, r3
 8015136:	f7f8 f99c 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801513a:	2d00      	cmp	r5, #0
 801513c:	d003      	beq.n	8015146 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x226>
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	2201      	movs	r2, #1
 8015142:	74da      	strb	r2, [r3, #19]
 8015144:	e28e      	b.n	8015664 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ri") runIgnored_ = true;
 8015146:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801514a:	4956      	ldr	r1, [pc, #344]	; (80152a4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x384>)
 801514c:	4618      	mov	r0, r3
 801514e:	f7f7 fdd8 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8015152:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8015156:	f107 0308 	add.w	r3, r7, #8
 801515a:	4611      	mov	r1, r2
 801515c:	4618      	mov	r0, r3
 801515e:	f7f8 f994 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 8015162:	4603      	mov	r3, r0
 8015164:	461d      	mov	r5, r3
 8015166:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801516a:	4618      	mov	r0, r3
 801516c:	f7f8 f981 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8015170:	2d00      	cmp	r5, #0
 8015172:	d003      	beq.n	801517c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x25c>
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	2201      	movs	r2, #1
 8015178:	751a      	strb	r2, [r3, #20]
 801517a:	e273      	b.n	8015664 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-f") crashOnFail_ = true;
 801517c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8015180:	4949      	ldr	r1, [pc, #292]	; (80152a8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x388>)
 8015182:	4618      	mov	r0, r3
 8015184:	f7f7 fdbd 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8015188:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801518c:	f107 0308 	add.w	r3, r7, #8
 8015190:	4611      	mov	r1, r2
 8015192:	4618      	mov	r0, r3
 8015194:	f7f8 f979 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 8015198:	4603      	mov	r3, r0
 801519a:	461d      	mov	r5, r3
 801519c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80151a0:	4618      	mov	r0, r3
 80151a2:	f7f8 f966 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80151a6:	2d00      	cmp	r5, #0
 80151a8:	d003      	beq.n	80151b2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x292>
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	2201      	movs	r2, #1
 80151ae:	759a      	strb	r2, [r3, #22]
 80151b0:	e258      	b.n	8015664 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-r")) setRepeatCount(ac_, av_, i);
 80151b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80151b6:	493d      	ldr	r1, [pc, #244]	; (80152ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x38c>)
 80151b8:	4618      	mov	r0, r3
 80151ba:	f7f7 fda2 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80151be:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80151c2:	f107 0308 	add.w	r3, r7, #8
 80151c6:	4611      	mov	r1, r2
 80151c8:	4618      	mov	r0, r3
 80151ca:	f7f7 fe5e 	bl	800ce8a <_ZNK12SimpleString10startsWithERKS_>
 80151ce:	4603      	mov	r3, r0
 80151d0:	461d      	mov	r5, r3
 80151d2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80151d6:	4618      	mov	r0, r3
 80151d8:	f7f8 f94b 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80151dc:	2d00      	cmp	r5, #0
 80151de:	d009      	beq.n	80151f4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x2d4>
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	6859      	ldr	r1, [r3, #4]
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	689a      	ldr	r2, [r3, #8]
 80151e8:	f107 0310 	add.w	r3, r7, #16
 80151ec:	6878      	ldr	r0, [r7, #4]
 80151ee:	f000 fb33 	bl	8015858 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>
 80151f2:	e237      	b.n	8015664 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-g")) addGroupFilter(ac_, av_, i);
 80151f4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80151f8:	492d      	ldr	r1, [pc, #180]	; (80152b0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x390>)
 80151fa:	4618      	mov	r0, r3
 80151fc:	f7f7 fd81 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8015200:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8015204:	f107 0308 	add.w	r3, r7, #8
 8015208:	4611      	mov	r1, r2
 801520a:	4618      	mov	r0, r3
 801520c:	f7f7 fe3d 	bl	800ce8a <_ZNK12SimpleString10startsWithERKS_>
 8015210:	4603      	mov	r3, r0
 8015212:	461d      	mov	r5, r3
 8015214:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8015218:	4618      	mov	r0, r3
 801521a:	f7f8 f92a 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801521e:	2d00      	cmp	r5, #0
 8015220:	d009      	beq.n	8015236 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x316>
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	6859      	ldr	r1, [r3, #4]
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	689a      	ldr	r2, [r3, #8]
 801522a:	f107 0310 	add.w	r3, r7, #16
 801522e:	6878      	ldr	r0, [r7, #4]
 8015230:	f000 fc40 	bl	8015ab4 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>
 8015234:	e216      	b.n	8015664 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-t")) correctParameters = addGroupDotNameFilter(ac_, av_, i);
 8015236:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801523a:	491e      	ldr	r1, [pc, #120]	; (80152b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x394>)
 801523c:	4618      	mov	r0, r3
 801523e:	f7f7 fd60 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8015242:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8015246:	f107 0308 	add.w	r3, r7, #8
 801524a:	4611      	mov	r1, r2
 801524c:	4618      	mov	r0, r3
 801524e:	f7f7 fe1c 	bl	800ce8a <_ZNK12SimpleString10startsWithERKS_>
 8015252:	4603      	mov	r3, r0
 8015254:	461d      	mov	r5, r3
 8015256:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801525a:	4618      	mov	r0, r3
 801525c:	f7f8 f909 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8015260:	2d00      	cmp	r5, #0
 8015262:	d029      	beq.n	80152b8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x398>
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	6859      	ldr	r1, [r3, #4]
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	689a      	ldr	r2, [r3, #8]
 801526c:	f107 0310 	add.w	r3, r7, #16
 8015270:	6878      	ldr	r0, [r7, #4]
 8015272:	f000 fc61 	bl	8015b38 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>
 8015276:	4603      	mov	r3, r0
 8015278:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 801527c:	e1f2      	b.n	8015664 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 801527e:	bf00      	nop
 8015280:	08025240 	.word	0x08025240
 8015284:	08025244 	.word	0x08025244
 8015288:	08025248 	.word	0x08025248
 801528c:	0802524c 	.word	0x0802524c
 8015290:	08025250 	.word	0x08025250
 8015294:	08025254 	.word	0x08025254
 8015298:	08025258 	.word	0x08025258
 801529c:	0802525c 	.word	0x0802525c
 80152a0:	08025260 	.word	0x08025260
 80152a4:	08025264 	.word	0x08025264
 80152a8:	08025268 	.word	0x08025268
 80152ac:	0802526c 	.word	0x0802526c
 80152b0:	08025270 	.word	0x08025270
 80152b4:	08025274 	.word	0x08025274
        else if (argument.startsWith("-sg")) addStrictGroupFilter(ac_, av_, i);
 80152b8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80152bc:	49b9      	ldr	r1, [pc, #740]	; (80155a4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x684>)
 80152be:	4618      	mov	r0, r3
 80152c0:	f7f7 fd1f 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80152c4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80152c8:	f107 0308 	add.w	r3, r7, #8
 80152cc:	4611      	mov	r1, r2
 80152ce:	4618      	mov	r0, r3
 80152d0:	f7f7 fddb 	bl	800ce8a <_ZNK12SimpleString10startsWithERKS_>
 80152d4:	4603      	mov	r3, r0
 80152d6:	461d      	mov	r5, r3
 80152d8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80152dc:	4618      	mov	r0, r3
 80152de:	f7f8 f8c8 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80152e2:	2d00      	cmp	r5, #0
 80152e4:	d009      	beq.n	80152fa <_ZN20CommandLineArguments5parseEP10TestPlugin+0x3da>
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	6859      	ldr	r1, [r3, #4]
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	689a      	ldr	r2, [r3, #8]
 80152ee:	f107 0310 	add.w	r3, r7, #16
 80152f2:	6878      	ldr	r0, [r7, #4]
 80152f4:	f000 fccc 	bl	8015c90 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>
 80152f8:	e1b4      	b.n	8015664 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xg")) addExcludeGroupFilter(ac_, av_, i);
 80152fa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80152fe:	49aa      	ldr	r1, [pc, #680]	; (80155a8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x688>)
 8015300:	4618      	mov	r0, r3
 8015302:	f7f7 fcfe 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8015306:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 801530a:	f107 0308 	add.w	r3, r7, #8
 801530e:	4611      	mov	r1, r2
 8015310:	4618      	mov	r0, r3
 8015312:	f7f7 fdba 	bl	800ce8a <_ZNK12SimpleString10startsWithERKS_>
 8015316:	4603      	mov	r3, r0
 8015318:	461d      	mov	r5, r3
 801531a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801531e:	4618      	mov	r0, r3
 8015320:	f7f8 f8a7 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8015324:	2d00      	cmp	r5, #0
 8015326:	d009      	beq.n	801533c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x41c>
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	6859      	ldr	r1, [r3, #4]
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	689a      	ldr	r2, [r3, #8]
 8015330:	f107 0310 	add.w	r3, r7, #16
 8015334:	6878      	ldr	r0, [r7, #4]
 8015336:	f000 fcf1 	bl	8015d1c <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>
 801533a:	e193      	b.n	8015664 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsg")) addExcludeStrictGroupFilter(ac_, av_, i);
 801533c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8015340:	499a      	ldr	r1, [pc, #616]	; (80155ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x68c>)
 8015342:	4618      	mov	r0, r3
 8015344:	f7f7 fcdd 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8015348:	f107 0294 	add.w	r2, r7, #148	; 0x94
 801534c:	f107 0308 	add.w	r3, r7, #8
 8015350:	4611      	mov	r1, r2
 8015352:	4618      	mov	r0, r3
 8015354:	f7f7 fd99 	bl	800ce8a <_ZNK12SimpleString10startsWithERKS_>
 8015358:	4603      	mov	r3, r0
 801535a:	461d      	mov	r5, r3
 801535c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8015360:	4618      	mov	r0, r3
 8015362:	f7f8 f886 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8015366:	2d00      	cmp	r5, #0
 8015368:	d009      	beq.n	801537e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x45e>
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	6859      	ldr	r1, [r3, #4]
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	689a      	ldr	r2, [r3, #8]
 8015372:	f107 0310 	add.w	r3, r7, #16
 8015376:	6878      	ldr	r0, [r7, #4]
 8015378:	f000 fd16 	bl	8015da8 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>
 801537c:	e172      	b.n	8015664 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-n")) addNameFilter(ac_, av_, i);
 801537e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8015382:	498b      	ldr	r1, [pc, #556]	; (80155b0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x690>)
 8015384:	4618      	mov	r0, r3
 8015386:	f7f7 fcbc 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801538a:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 801538e:	f107 0308 	add.w	r3, r7, #8
 8015392:	4611      	mov	r1, r2
 8015394:	4618      	mov	r0, r3
 8015396:	f7f7 fd78 	bl	800ce8a <_ZNK12SimpleString10startsWithERKS_>
 801539a:	4603      	mov	r3, r0
 801539c:	461d      	mov	r5, r3
 801539e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80153a2:	4618      	mov	r0, r3
 80153a4:	f7f8 f865 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80153a8:	2d00      	cmp	r5, #0
 80153aa:	d009      	beq.n	80153c0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4a0>
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	6859      	ldr	r1, [r3, #4]
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	689a      	ldr	r2, [r3, #8]
 80153b4:	f107 0310 	add.w	r3, r7, #16
 80153b8:	6878      	ldr	r0, [r7, #4]
 80153ba:	f000 fd3d 	bl	8015e38 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>
 80153be:	e151      	b.n	8015664 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-sn")) addStrictNameFilter(ac_, av_, i);
 80153c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80153c4:	497b      	ldr	r1, [pc, #492]	; (80155b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x694>)
 80153c6:	4618      	mov	r0, r3
 80153c8:	f7f7 fc9b 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80153cc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80153d0:	f107 0308 	add.w	r3, r7, #8
 80153d4:	4611      	mov	r1, r2
 80153d6:	4618      	mov	r0, r3
 80153d8:	f7f7 fd57 	bl	800ce8a <_ZNK12SimpleString10startsWithERKS_>
 80153dc:	4603      	mov	r3, r0
 80153de:	461d      	mov	r5, r3
 80153e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80153e4:	4618      	mov	r0, r3
 80153e6:	f7f8 f844 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80153ea:	2d00      	cmp	r5, #0
 80153ec:	d009      	beq.n	8015402 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4e2>
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	6859      	ldr	r1, [r3, #4]
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	689a      	ldr	r2, [r3, #8]
 80153f6:	f107 0310 	add.w	r3, r7, #16
 80153fa:	6878      	ldr	r0, [r7, #4]
 80153fc:	f000 fd5e 	bl	8015ebc <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>
 8015400:	e130      	b.n	8015664 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xn")) addExcludeNameFilter(ac_, av_, i);
 8015402:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8015406:	496c      	ldr	r1, [pc, #432]	; (80155b8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x698>)
 8015408:	4618      	mov	r0, r3
 801540a:	f7f7 fc7a 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801540e:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8015412:	f107 0308 	add.w	r3, r7, #8
 8015416:	4611      	mov	r1, r2
 8015418:	4618      	mov	r0, r3
 801541a:	f7f7 fd36 	bl	800ce8a <_ZNK12SimpleString10startsWithERKS_>
 801541e:	4603      	mov	r3, r0
 8015420:	461d      	mov	r5, r3
 8015422:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8015426:	4618      	mov	r0, r3
 8015428:	f7f8 f823 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801542c:	2d00      	cmp	r5, #0
 801542e:	d009      	beq.n	8015444 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x524>
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	6859      	ldr	r1, [r3, #4]
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	689a      	ldr	r2, [r3, #8]
 8015438:	f107 0310 	add.w	r3, r7, #16
 801543c:	6878      	ldr	r0, [r7, #4]
 801543e:	f000 fd83 	bl	8015f48 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>
 8015442:	e10f      	b.n	8015664 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsn")) addExcludeStrictNameFilter(ac_, av_, i);
 8015444:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8015448:	495c      	ldr	r1, [pc, #368]	; (80155bc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x69c>)
 801544a:	4618      	mov	r0, r3
 801544c:	f7f7 fc59 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8015450:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8015454:	f107 0308 	add.w	r3, r7, #8
 8015458:	4611      	mov	r1, r2
 801545a:	4618      	mov	r0, r3
 801545c:	f7f7 fd15 	bl	800ce8a <_ZNK12SimpleString10startsWithERKS_>
 8015460:	4603      	mov	r3, r0
 8015462:	461d      	mov	r5, r3
 8015464:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8015468:	4618      	mov	r0, r3
 801546a:	f7f8 f802 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801546e:	2d00      	cmp	r5, #0
 8015470:	d009      	beq.n	8015486 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x566>
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	6859      	ldr	r1, [r3, #4]
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	689a      	ldr	r2, [r3, #8]
 801547a:	f107 0310 	add.w	r3, r7, #16
 801547e:	6878      	ldr	r0, [r7, #4]
 8015480:	f000 fda8 	bl	8015fd4 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>
 8015484:	e0ee      	b.n	8015664 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-s")) correctParameters = setShuffle(ac_, av_, i);
 8015486:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801548a:	494d      	ldr	r1, [pc, #308]	; (80155c0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a0>)
 801548c:	4618      	mov	r0, r3
 801548e:	f7f7 fc38 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8015492:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8015496:	f107 0308 	add.w	r3, r7, #8
 801549a:	4611      	mov	r1, r2
 801549c:	4618      	mov	r0, r3
 801549e:	f7f7 fcf4 	bl	800ce8a <_ZNK12SimpleString10startsWithERKS_>
 80154a2:	4603      	mov	r3, r0
 80154a4:	461d      	mov	r5, r3
 80154a6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80154aa:	4618      	mov	r0, r3
 80154ac:	f7f7 ffe1 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80154b0:	2d00      	cmp	r5, #0
 80154b2:	d00c      	beq.n	80154ce <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5ae>
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	6859      	ldr	r1, [r3, #4]
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	689a      	ldr	r2, [r3, #8]
 80154bc:	f107 0310 	add.w	r3, r7, #16
 80154c0:	6878      	ldr	r0, [r7, #4]
 80154c2:	f000 fa29 	bl	8015918 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>
 80154c6:	4603      	mov	r3, r0
 80154c8:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80154cc:	e0ca      	b.n	8015664 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "TEST(");
 80154ce:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80154d2:	493c      	ldr	r1, [pc, #240]	; (80155c4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 80154d4:	4618      	mov	r0, r3
 80154d6:	f7f7 fc14 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80154da:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80154de:	f107 0308 	add.w	r3, r7, #8
 80154e2:	4611      	mov	r1, r2
 80154e4:	4618      	mov	r0, r3
 80154e6:	f7f7 fcd0 	bl	800ce8a <_ZNK12SimpleString10startsWithERKS_>
 80154ea:	4603      	mov	r3, r0
 80154ec:	461d      	mov	r5, r3
 80154ee:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80154f2:	4618      	mov	r0, r3
 80154f4:	f7f7 ffbd 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80154f8:	2d00      	cmp	r5, #0
 80154fa:	d00b      	beq.n	8015514 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5f4>
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	6859      	ldr	r1, [r3, #4]
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	689a      	ldr	r2, [r3, #8]
 8015504:	f107 0310 	add.w	r3, r7, #16
 8015508:	482e      	ldr	r0, [pc, #184]	; (80155c4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 801550a:	9000      	str	r0, [sp, #0]
 801550c:	6878      	ldr	r0, [r7, #4]
 801550e:	f000 fda9 	bl	8016064 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 8015512:	e0a7      	b.n	8015664 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("IGNORE_TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "IGNORE_TEST(");
 8015514:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8015518:	492b      	ldr	r1, [pc, #172]	; (80155c8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 801551a:	4618      	mov	r0, r3
 801551c:	f7f7 fbf1 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8015520:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8015524:	f107 0308 	add.w	r3, r7, #8
 8015528:	4611      	mov	r1, r2
 801552a:	4618      	mov	r0, r3
 801552c:	f7f7 fcad 	bl	800ce8a <_ZNK12SimpleString10startsWithERKS_>
 8015530:	4603      	mov	r3, r0
 8015532:	461d      	mov	r5, r3
 8015534:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8015538:	4618      	mov	r0, r3
 801553a:	f7f7 ff9a 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801553e:	2d00      	cmp	r5, #0
 8015540:	d00b      	beq.n	801555a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x63a>
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	6859      	ldr	r1, [r3, #4]
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	689a      	ldr	r2, [r3, #8]
 801554a:	f107 0310 	add.w	r3, r7, #16
 801554e:	481e      	ldr	r0, [pc, #120]	; (80155c8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 8015550:	9000      	str	r0, [sp, #0]
 8015552:	6878      	ldr	r0, [r7, #4]
 8015554:	f000 fd86 	bl	8016064 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 8015558:	e084      	b.n	8015664 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-o")) correctParameters = setOutputType(ac_, av_, i);
 801555a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801555e:	491b      	ldr	r1, [pc, #108]	; (80155cc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6ac>)
 8015560:	4618      	mov	r0, r3
 8015562:	f7f7 fbce 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8015566:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 801556a:	f107 0308 	add.w	r3, r7, #8
 801556e:	4611      	mov	r1, r2
 8015570:	4618      	mov	r0, r3
 8015572:	f7f7 fc8a 	bl	800ce8a <_ZNK12SimpleString10startsWithERKS_>
 8015576:	4603      	mov	r3, r0
 8015578:	461d      	mov	r5, r3
 801557a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801557e:	4618      	mov	r0, r3
 8015580:	f7f7 ff77 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8015584:	2d00      	cmp	r5, #0
 8015586:	d023      	beq.n	80155d0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6b0>
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	6859      	ldr	r1, [r3, #4]
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	689a      	ldr	r2, [r3, #8]
 8015590:	f107 0310 	add.w	r3, r7, #16
 8015594:	6878      	ldr	r0, [r7, #4]
 8015596:	f000 fe3b 	bl	8016210 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>
 801559a:	4603      	mov	r3, r0
 801559c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80155a0:	e060      	b.n	8015664 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 80155a2:	bf00      	nop
 80155a4:	08025278 	.word	0x08025278
 80155a8:	0802527c 	.word	0x0802527c
 80155ac:	08025280 	.word	0x08025280
 80155b0:	08025288 	.word	0x08025288
 80155b4:	0802528c 	.word	0x0802528c
 80155b8:	08025290 	.word	0x08025290
 80155bc:	08025294 	.word	0x08025294
 80155c0:	0802529c 	.word	0x0802529c
 80155c4:	080252a0 	.word	0x080252a0
 80155c8:	080252a8 	.word	0x080252a8
 80155cc:	080252b8 	.word	0x080252b8
        else if (argument.startsWith("-p")) correctParameters = plugin->parseAllArguments(ac_, av_, i);
 80155d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80155d4:	4930      	ldr	r1, [pc, #192]	; (8015698 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x778>)
 80155d6:	4618      	mov	r0, r3
 80155d8:	f7f7 fb93 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80155dc:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 80155e0:	f107 0308 	add.w	r3, r7, #8
 80155e4:	4611      	mov	r1, r2
 80155e6:	4618      	mov	r0, r3
 80155e8:	f7f7 fc4f 	bl	800ce8a <_ZNK12SimpleString10startsWithERKS_>
 80155ec:	4603      	mov	r3, r0
 80155ee:	461d      	mov	r5, r3
 80155f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80155f4:	4618      	mov	r0, r3
 80155f6:	f7f7 ff3c 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80155fa:	2d00      	cmp	r5, #0
 80155fc:	d00e      	beq.n	801561c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6fc>
 80155fe:	683b      	ldr	r3, [r7, #0]
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	331c      	adds	r3, #28
 8015604:	681d      	ldr	r5, [r3, #0]
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	6859      	ldr	r1, [r3, #4]
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	689a      	ldr	r2, [r3, #8]
 801560e:	693b      	ldr	r3, [r7, #16]
 8015610:	6838      	ldr	r0, [r7, #0]
 8015612:	47a8      	blx	r5
 8015614:	4603      	mov	r3, r0
 8015616:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 801561a:	e023      	b.n	8015664 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-k")) setPackageName(ac_, av_, i);
 801561c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8015620:	491e      	ldr	r1, [pc, #120]	; (801569c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x77c>)
 8015622:	4618      	mov	r0, r3
 8015624:	f7f7 fb6d 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8015628:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 801562c:	f107 0308 	add.w	r3, r7, #8
 8015630:	4611      	mov	r1, r2
 8015632:	4618      	mov	r0, r3
 8015634:	f7f7 fc29 	bl	800ce8a <_ZNK12SimpleString10startsWithERKS_>
 8015638:	4603      	mov	r3, r0
 801563a:	461d      	mov	r5, r3
 801563c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8015640:	4618      	mov	r0, r3
 8015642:	f7f7 ff16 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8015646:	2d00      	cmp	r5, #0
 8015648:	d009      	beq.n	801565e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x73e>
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	6859      	ldr	r1, [r3, #4]
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	689a      	ldr	r2, [r3, #8]
 8015652:	f107 0310 	add.w	r3, r7, #16
 8015656:	6878      	ldr	r0, [r7, #4]
 8015658:	f000 fd98 	bl	801618c <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>
 801565c:	e002      	b.n	8015664 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else correctParameters = false;
 801565e:	2300      	movs	r3, #0
 8015660:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

        if (correctParameters == false) {
 8015664:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8015668:	2b00      	cmp	r3, #0
 801566a:	d102      	bne.n	8015672 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x752>
            return false;
 801566c:	2400      	movs	r4, #0
 801566e:	2500      	movs	r5, #0
 8015670:	e000      	b.n	8015674 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x754>
        SimpleString argument = av_[i];
 8015672:	2501      	movs	r5, #1
 8015674:	f107 0308 	add.w	r3, r7, #8
 8015678:	4618      	mov	r0, r3
 801567a:	f7f7 fefa 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801567e:	2d01      	cmp	r5, #1
 8015680:	d104      	bne.n	801568c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76c>
    for (int i = 1; i < ac_; i++) {
 8015682:	693b      	ldr	r3, [r7, #16]
 8015684:	3301      	adds	r3, #1
 8015686:	613b      	str	r3, [r7, #16]
 8015688:	e455      	b.n	8014f36 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x16>
        }
    }
    return true;
 801568a:	2401      	movs	r4, #1
 801568c:	4623      	mov	r3, r4
}
 801568e:	4618      	mov	r0, r3
 8015690:	37f0      	adds	r7, #240	; 0xf0
 8015692:	46bd      	mov	sp, r7
 8015694:	bdb0      	pop	{r4, r5, r7, pc}
 8015696:	bf00      	nop
 8015698:	08025250 	.word	0x08025250
 801569c:	080252bc 	.word	0x080252bc

080156a0 <_ZNK20CommandLineArguments5usageEv>:

const char* CommandLineArguments::usage() const
{
 80156a0:	b480      	push	{r7}
 80156a2:	b083      	sub	sp, #12
 80156a4:	af00      	add	r7, sp, #0
 80156a6:	6078      	str	r0, [r7, #4]
    return "use -h for more extensive help\n"
           "usage [-h] [-v] [-vv] [-c] [-p] [-lg] [-ln] [-ri] [-r#] [-f]\n"
           "      [-g|sg|xg|xsg groupName]... [-n|sn|xn|xsn testName]... [-t groupName.testName]...\n"
           "      [-b] [-s [randomizerSeed>0]] [\"TEST(groupName, testName)\"]...\n"
           "      [-o{normal, junit, teamcity}] [-k packageName]\n";
 80156a8:	4b03      	ldr	r3, [pc, #12]	; (80156b8 <_ZNK20CommandLineArguments5usageEv+0x18>)
}
 80156aa:	4618      	mov	r0, r3
 80156ac:	370c      	adds	r7, #12
 80156ae:	46bd      	mov	sp, r7
 80156b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156b4:	4770      	bx	lr
 80156b6:	bf00      	nop
 80156b8:	080252c0 	.word	0x080252c0

080156bc <_ZNK20CommandLineArguments4helpEv>:

const char* CommandLineArguments::help() const
{
 80156bc:	b480      	push	{r7}
 80156be:	b083      	sub	sp, #12
 80156c0:	af00      	add	r7, sp, #0
 80156c2:	6078      	str	r0, [r7, #4]
      "Options that control how the tests are run:\n"
      "  -p               - run tests in a separate process.\n"
      "  -b               - run the tests backwards, reversing the normal way\n"
      "  -s [seed]        - shuffle tests randomly. Seed is optional\n"
      "  -r#              - repeat the tests some number (#) of times, or twice if # is not specified.\n"
      "  -f               - Cause the tests to crash on failure (to allow the test to be debugged if necessary)\n";
 80156c4:	4b03      	ldr	r3, [pc, #12]	; (80156d4 <_ZNK20CommandLineArguments4helpEv+0x18>)
}
 80156c6:	4618      	mov	r0, r3
 80156c8:	370c      	adds	r7, #12
 80156ca:	46bd      	mov	sp, r7
 80156cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d0:	4770      	bx	lr
 80156d2:	bf00      	nop
 80156d4:	080253f0 	.word	0x080253f0

080156d8 <_ZNK20CommandLineArguments8needHelpEv>:

bool CommandLineArguments::needHelp() const
{
 80156d8:	b480      	push	{r7}
 80156da:	b083      	sub	sp, #12
 80156dc:	af00      	add	r7, sp, #0
 80156de:	6078      	str	r0, [r7, #4]
    return needHelp_;
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	7b1b      	ldrb	r3, [r3, #12]
}
 80156e4:	4618      	mov	r0, r3
 80156e6:	370c      	adds	r7, #12
 80156e8:	46bd      	mov	sp, r7
 80156ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ee:	4770      	bx	lr

080156f0 <_ZNK20CommandLineArguments9isVerboseEv>:

bool CommandLineArguments::isVerbose() const
{
 80156f0:	b480      	push	{r7}
 80156f2:	b083      	sub	sp, #12
 80156f4:	af00      	add	r7, sp, #0
 80156f6:	6078      	str	r0, [r7, #4]
    return verbose_;
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	7b5b      	ldrb	r3, [r3, #13]
}
 80156fc:	4618      	mov	r0, r3
 80156fe:	370c      	adds	r7, #12
 8015700:	46bd      	mov	sp, r7
 8015702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015706:	4770      	bx	lr

08015708 <_ZNK20CommandLineArguments13isVeryVerboseEv>:

bool CommandLineArguments::isVeryVerbose() const
{
 8015708:	b480      	push	{r7}
 801570a:	b083      	sub	sp, #12
 801570c:	af00      	add	r7, sp, #0
 801570e:	6078      	str	r0, [r7, #4]
    return veryVerbose_;
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	7b9b      	ldrb	r3, [r3, #14]
}
 8015714:	4618      	mov	r0, r3
 8015716:	370c      	adds	r7, #12
 8015718:	46bd      	mov	sp, r7
 801571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801571e:	4770      	bx	lr

08015720 <_ZNK20CommandLineArguments7isColorEv>:

bool CommandLineArguments::isColor() const
{
 8015720:	b480      	push	{r7}
 8015722:	b083      	sub	sp, #12
 8015724:	af00      	add	r7, sp, #0
 8015726:	6078      	str	r0, [r7, #4]
    return color_;
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	7bdb      	ldrb	r3, [r3, #15]
}
 801572c:	4618      	mov	r0, r3
 801572e:	370c      	adds	r7, #12
 8015730:	46bd      	mov	sp, r7
 8015732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015736:	4770      	bx	lr

08015738 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>:

bool CommandLineArguments::isListingTestGroupNames() const
{
 8015738:	b480      	push	{r7}
 801573a:	b083      	sub	sp, #12
 801573c:	af00      	add	r7, sp, #0
 801573e:	6078      	str	r0, [r7, #4]
    return listTestGroupNames_;
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	7c5b      	ldrb	r3, [r3, #17]
}
 8015744:	4618      	mov	r0, r3
 8015746:	370c      	adds	r7, #12
 8015748:	46bd      	mov	sp, r7
 801574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801574e:	4770      	bx	lr

08015750 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>:

bool CommandLineArguments::isListingTestGroupAndCaseNames() const
{
 8015750:	b480      	push	{r7}
 8015752:	b083      	sub	sp, #12
 8015754:	af00      	add	r7, sp, #0
 8015756:	6078      	str	r0, [r7, #4]
    return listTestGroupAndCaseNames_;
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	7c9b      	ldrb	r3, [r3, #18]
}
 801575c:	4618      	mov	r0, r3
 801575e:	370c      	adds	r7, #12
 8015760:	46bd      	mov	sp, r7
 8015762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015766:	4770      	bx	lr

08015768 <_ZNK20CommandLineArguments22isListingTestLocationsEv>:

bool CommandLineArguments::isListingTestLocations() const
{
 8015768:	b480      	push	{r7}
 801576a:	b083      	sub	sp, #12
 801576c:	af00      	add	r7, sp, #0
 801576e:	6078      	str	r0, [r7, #4]
    return listTestLocations_;
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	7cdb      	ldrb	r3, [r3, #19]
}
 8015774:	4618      	mov	r0, r3
 8015776:	370c      	adds	r7, #12
 8015778:	46bd      	mov	sp, r7
 801577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801577e:	4770      	bx	lr

08015780 <_ZNK20CommandLineArguments12isRunIgnoredEv>:

bool CommandLineArguments::isRunIgnored() const
{
 8015780:	b480      	push	{r7}
 8015782:	b083      	sub	sp, #12
 8015784:	af00      	add	r7, sp, #0
 8015786:	6078      	str	r0, [r7, #4]
    return runIgnored_;
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	7d1b      	ldrb	r3, [r3, #20]
}
 801578c:	4618      	mov	r0, r3
 801578e:	370c      	adds	r7, #12
 8015790:	46bd      	mov	sp, r7
 8015792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015796:	4770      	bx	lr

08015798 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>:

bool CommandLineArguments::runTestsInSeperateProcess() const
{
 8015798:	b480      	push	{r7}
 801579a:	b083      	sub	sp, #12
 801579c:	af00      	add	r7, sp, #0
 801579e:	6078      	str	r0, [r7, #4]
    return runTestsAsSeperateProcess_;
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	7c1b      	ldrb	r3, [r3, #16]
}
 80157a4:	4618      	mov	r0, r3
 80157a6:	370c      	adds	r7, #12
 80157a8:	46bd      	mov	sp, r7
 80157aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ae:	4770      	bx	lr

080157b0 <_ZNK20CommandLineArguments14getRepeatCountEv>:


size_t CommandLineArguments::getRepeatCount() const
{
 80157b0:	b480      	push	{r7}
 80157b2:	b083      	sub	sp, #12
 80157b4:	af00      	add	r7, sp, #0
 80157b6:	6078      	str	r0, [r7, #4]
    return repeat_;
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	69db      	ldr	r3, [r3, #28]
}
 80157bc:	4618      	mov	r0, r3
 80157be:	370c      	adds	r7, #12
 80157c0:	46bd      	mov	sp, r7
 80157c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157c6:	4770      	bx	lr

080157c8 <_ZNK20CommandLineArguments11isReversingEv>:

bool CommandLineArguments::isReversing() const
{
 80157c8:	b480      	push	{r7}
 80157ca:	b083      	sub	sp, #12
 80157cc:	af00      	add	r7, sp, #0
 80157ce:	6078      	str	r0, [r7, #4]
    return reversing_;
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	7d5b      	ldrb	r3, [r3, #21]
}
 80157d4:	4618      	mov	r0, r3
 80157d6:	370c      	adds	r7, #12
 80157d8:	46bd      	mov	sp, r7
 80157da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157de:	4770      	bx	lr

080157e0 <_ZNK20CommandLineArguments16isCrashingOnFailEv>:

bool CommandLineArguments::isCrashingOnFail() const
{
 80157e0:	b480      	push	{r7}
 80157e2:	b083      	sub	sp, #12
 80157e4:	af00      	add	r7, sp, #0
 80157e6:	6078      	str	r0, [r7, #4]
    return crashOnFail_;
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	7d9b      	ldrb	r3, [r3, #22]
}
 80157ec:	4618      	mov	r0, r3
 80157ee:	370c      	adds	r7, #12
 80157f0:	46bd      	mov	sp, r7
 80157f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f6:	4770      	bx	lr

080157f8 <_ZNK20CommandLineArguments11isShufflingEv>:

bool CommandLineArguments::isShuffling() const
{
 80157f8:	b480      	push	{r7}
 80157fa:	b083      	sub	sp, #12
 80157fc:	af00      	add	r7, sp, #0
 80157fe:	6078      	str	r0, [r7, #4]
    return shuffling_;
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	7ddb      	ldrb	r3, [r3, #23]
}
 8015804:	4618      	mov	r0, r3
 8015806:	370c      	adds	r7, #12
 8015808:	46bd      	mov	sp, r7
 801580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801580e:	4770      	bx	lr

08015810 <_ZNK20CommandLineArguments14getShuffleSeedEv>:

size_t CommandLineArguments::getShuffleSeed() const
{
 8015810:	b480      	push	{r7}
 8015812:	b083      	sub	sp, #12
 8015814:	af00      	add	r7, sp, #0
 8015816:	6078      	str	r0, [r7, #4]
    return shuffleSeed_;
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	6a1b      	ldr	r3, [r3, #32]
}
 801581c:	4618      	mov	r0, r3
 801581e:	370c      	adds	r7, #12
 8015820:	46bd      	mov	sp, r7
 8015822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015826:	4770      	bx	lr

08015828 <_ZNK20CommandLineArguments15getGroupFiltersEv>:

const TestFilter* CommandLineArguments::getGroupFilters() const
{
 8015828:	b480      	push	{r7}
 801582a:	b083      	sub	sp, #12
 801582c:	af00      	add	r7, sp, #0
 801582e:	6078      	str	r0, [r7, #4]
    return groupFilters_;
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8015834:	4618      	mov	r0, r3
 8015836:	370c      	adds	r7, #12
 8015838:	46bd      	mov	sp, r7
 801583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801583e:	4770      	bx	lr

08015840 <_ZNK20CommandLineArguments14getNameFiltersEv>:

const TestFilter* CommandLineArguments::getNameFilters() const
{
 8015840:	b480      	push	{r7}
 8015842:	b083      	sub	sp, #12
 8015844:	af00      	add	r7, sp, #0
 8015846:	6078      	str	r0, [r7, #4]
    return nameFilters_;
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801584c:	4618      	mov	r0, r3
 801584e:	370c      	adds	r7, #12
 8015850:	46bd      	mov	sp, r7
 8015852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015856:	4770      	bx	lr

08015858 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>:

void CommandLineArguments::setRepeatCount(int ac, const char *const *av, int& i)
{
 8015858:	b580      	push	{r7, lr}
 801585a:	b086      	sub	sp, #24
 801585c:	af00      	add	r7, sp, #0
 801585e:	60f8      	str	r0, [r7, #12]
 8015860:	60b9      	str	r1, [r7, #8]
 8015862:	607a      	str	r2, [r7, #4]
 8015864:	603b      	str	r3, [r7, #0]
    repeat_ = 0;
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	2200      	movs	r2, #0
 801586a:	61da      	str	r2, [r3, #28]

    SimpleString repeatParameter(av[i]);
 801586c:	683b      	ldr	r3, [r7, #0]
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	009b      	lsls	r3, r3, #2
 8015872:	687a      	ldr	r2, [r7, #4]
 8015874:	4413      	add	r3, r2
 8015876:	681a      	ldr	r2, [r3, #0]
 8015878:	f107 0310 	add.w	r3, r7, #16
 801587c:	4611      	mov	r1, r2
 801587e:	4618      	mov	r0, r3
 8015880:	f7f7 fa3f 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
    if (repeatParameter.size() > 2) repeat_ = (size_t) (SimpleString::AtoI(av[i] + 2));
 8015884:	f107 0310 	add.w	r3, r7, #16
 8015888:	4618      	mov	r0, r3
 801588a:	f7f7 fdd1 	bl	800d430 <_ZNK12SimpleString4sizeEv>
 801588e:	4603      	mov	r3, r0
 8015890:	2b02      	cmp	r3, #2
 8015892:	bf8c      	ite	hi
 8015894:	2301      	movhi	r3, #1
 8015896:	2300      	movls	r3, #0
 8015898:	b2db      	uxtb	r3, r3
 801589a:	2b00      	cmp	r3, #0
 801589c:	d00e      	beq.n	80158bc <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x64>
 801589e:	683b      	ldr	r3, [r7, #0]
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	009b      	lsls	r3, r3, #2
 80158a4:	687a      	ldr	r2, [r7, #4]
 80158a6:	4413      	add	r3, r2
 80158a8:	681b      	ldr	r3, [r3, #0]
 80158aa:	3302      	adds	r3, #2
 80158ac:	4618      	mov	r0, r3
 80158ae:	f7f7 f824 	bl	800c8fa <_ZN12SimpleString4AtoIEPKc>
 80158b2:	4603      	mov	r3, r0
 80158b4:	461a      	mov	r2, r3
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	61da      	str	r2, [r3, #28]
 80158ba:	e01c      	b.n	80158f6 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
    else if (i + 1 < ac) {
 80158bc:	683b      	ldr	r3, [r7, #0]
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	3301      	adds	r3, #1
 80158c2:	68ba      	ldr	r2, [r7, #8]
 80158c4:	429a      	cmp	r2, r3
 80158c6:	dd16      	ble.n	80158f6 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
        repeat_ = (size_t) (SimpleString::AtoI(av[i + 1]));
 80158c8:	683b      	ldr	r3, [r7, #0]
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	3301      	adds	r3, #1
 80158ce:	009b      	lsls	r3, r3, #2
 80158d0:	687a      	ldr	r2, [r7, #4]
 80158d2:	4413      	add	r3, r2
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	4618      	mov	r0, r3
 80158d8:	f7f7 f80f 	bl	800c8fa <_ZN12SimpleString4AtoIEPKc>
 80158dc:	4603      	mov	r3, r0
 80158de:	461a      	mov	r2, r3
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	61da      	str	r2, [r3, #28]
        if (repeat_ != 0) i++;
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	69db      	ldr	r3, [r3, #28]
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d004      	beq.n	80158f6 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
 80158ec:	683b      	ldr	r3, [r7, #0]
 80158ee:	681b      	ldr	r3, [r3, #0]
 80158f0:	1c5a      	adds	r2, r3, #1
 80158f2:	683b      	ldr	r3, [r7, #0]
 80158f4:	601a      	str	r2, [r3, #0]
    }

    if (0 == repeat_) repeat_ = 2;
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	69db      	ldr	r3, [r3, #28]
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d102      	bne.n	8015904 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0xac>
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	2202      	movs	r2, #2
 8015902:	61da      	str	r2, [r3, #28]
    SimpleString repeatParameter(av[i]);
 8015904:	f107 0310 	add.w	r3, r7, #16
 8015908:	4618      	mov	r0, r3
 801590a:	f7f7 fdb2 	bl	800d472 <_ZN12SimpleStringD1Ev>

}
 801590e:	bf00      	nop
 8015910:	3718      	adds	r7, #24
 8015912:	46bd      	mov	sp, r7
 8015914:	bd80      	pop	{r7, pc}
	...

08015918 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>:

bool CommandLineArguments::setShuffle(int ac, const char * const *av, int& i)
{
 8015918:	b590      	push	{r4, r7, lr}
 801591a:	b089      	sub	sp, #36	; 0x24
 801591c:	af00      	add	r7, sp, #0
 801591e:	60f8      	str	r0, [r7, #12]
 8015920:	60b9      	str	r1, [r7, #8]
 8015922:	607a      	str	r2, [r7, #4]
 8015924:	603b      	str	r3, [r7, #0]
    shuffling_ = true;
 8015926:	68fb      	ldr	r3, [r7, #12]
 8015928:	2201      	movs	r2, #1
 801592a:	75da      	strb	r2, [r3, #23]
    shuffleSeed_ = (unsigned int)GetPlatformSpecificTimeInMillis();
 801592c:	4b34      	ldr	r3, [pc, #208]	; (8015a00 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xe8>)
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	4798      	blx	r3
 8015932:	4603      	mov	r3, r0
 8015934:	461a      	mov	r2, r3
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	621a      	str	r2, [r3, #32]
    if (shuffleSeed_ == 0) shuffleSeed_++;
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	6a1b      	ldr	r3, [r3, #32]
 801593e:	2b00      	cmp	r3, #0
 8015940:	d104      	bne.n	801594c <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x34>
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	6a1b      	ldr	r3, [r3, #32]
 8015946:	1c5a      	adds	r2, r3, #1
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	621a      	str	r2, [r3, #32]

    SimpleString shuffleParameter = av[i];
 801594c:	683b      	ldr	r3, [r7, #0]
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	009b      	lsls	r3, r3, #2
 8015952:	687a      	ldr	r2, [r7, #4]
 8015954:	4413      	add	r3, r2
 8015956:	681a      	ldr	r2, [r3, #0]
 8015958:	f107 0314 	add.w	r3, r7, #20
 801595c:	4611      	mov	r1, r2
 801595e:	4618      	mov	r0, r3
 8015960:	f7f7 f9cf 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
    if (shuffleParameter.size() > 2) {
 8015964:	f107 0314 	add.w	r3, r7, #20
 8015968:	4618      	mov	r0, r3
 801596a:	f7f7 fd61 	bl	800d430 <_ZNK12SimpleString4sizeEv>
 801596e:	4603      	mov	r3, r0
 8015970:	2b02      	cmp	r3, #2
 8015972:	bf8c      	ite	hi
 8015974:	2301      	movhi	r3, #1
 8015976:	2300      	movls	r3, #0
 8015978:	b2db      	uxtb	r3, r3
 801597a:	2b00      	cmp	r3, #0
 801597c:	d010      	beq.n	80159a0 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x88>
        shufflingPreSeeded_ = true;
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	2201      	movs	r2, #1
 8015982:	761a      	strb	r2, [r3, #24]
        shuffleSeed_ = SimpleString::AtoU(av[i] + 2);
 8015984:	683b      	ldr	r3, [r7, #0]
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	009b      	lsls	r3, r3, #2
 801598a:	687a      	ldr	r2, [r7, #4]
 801598c:	4413      	add	r3, r2
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	3302      	adds	r3, #2
 8015992:	4618      	mov	r0, r3
 8015994:	f7f6 ff78 	bl	800c888 <_ZN12SimpleString4AtoUEPKc>
 8015998:	4602      	mov	r2, r0
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	621a      	str	r2, [r3, #32]
 801599e:	e01e      	b.n	80159de <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
    } else if (i + 1 < ac) {
 80159a0:	683b      	ldr	r3, [r7, #0]
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	3301      	adds	r3, #1
 80159a6:	68ba      	ldr	r2, [r7, #8]
 80159a8:	429a      	cmp	r2, r3
 80159aa:	dd18      	ble.n	80159de <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        unsigned int parsedParameter = SimpleString::AtoU(av[i + 1]);
 80159ac:	683b      	ldr	r3, [r7, #0]
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	3301      	adds	r3, #1
 80159b2:	009b      	lsls	r3, r3, #2
 80159b4:	687a      	ldr	r2, [r7, #4]
 80159b6:	4413      	add	r3, r2
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	4618      	mov	r0, r3
 80159bc:	f7f6 ff64 	bl	800c888 <_ZN12SimpleString4AtoUEPKc>
 80159c0:	61f8      	str	r0, [r7, #28]
        if (parsedParameter != 0)
 80159c2:	69fb      	ldr	r3, [r7, #28]
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d00a      	beq.n	80159de <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        {
            shufflingPreSeeded_ = true;
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	2201      	movs	r2, #1
 80159cc:	761a      	strb	r2, [r3, #24]
            shuffleSeed_ = parsedParameter;
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	69fa      	ldr	r2, [r7, #28]
 80159d2:	621a      	str	r2, [r3, #32]
            i++;
 80159d4:	683b      	ldr	r3, [r7, #0]
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	1c5a      	adds	r2, r3, #1
 80159da:	683b      	ldr	r3, [r7, #0]
 80159dc:	601a      	str	r2, [r3, #0]
        }
    }
    return (shuffleSeed_ != 0);
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	6a1b      	ldr	r3, [r3, #32]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	bf14      	ite	ne
 80159e6:	2301      	movne	r3, #1
 80159e8:	2300      	moveq	r3, #0
 80159ea:	b2dc      	uxtb	r4, r3
    SimpleString shuffleParameter = av[i];
 80159ec:	f107 0314 	add.w	r3, r7, #20
 80159f0:	4618      	mov	r0, r3
 80159f2:	f7f7 fd3e 	bl	800d472 <_ZN12SimpleStringD1Ev>
    return (shuffleSeed_ != 0);
 80159f6:	4623      	mov	r3, r4
}
 80159f8:	4618      	mov	r0, r3
 80159fa:	3724      	adds	r7, #36	; 0x24
 80159fc:	46bd      	mov	sp, r7
 80159fe:	bd90      	pop	{r4, r7, pc}
 8015a00:	200000a8 	.word	0x200000a8

08015a04 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>:

SimpleString CommandLineArguments::getParameterField(int ac, const char * const *av, int& i, const SimpleString& parameterName)
{
 8015a04:	b580      	push	{r7, lr}
 8015a06:	b088      	sub	sp, #32
 8015a08:	af00      	add	r7, sp, #0
 8015a0a:	60f8      	str	r0, [r7, #12]
 8015a0c:	60b9      	str	r1, [r7, #8]
 8015a0e:	607a      	str	r2, [r7, #4]
 8015a10:	603b      	str	r3, [r7, #0]
    size_t parameterLength = parameterName.size();
 8015a12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015a14:	f7f7 fd0c 	bl	800d430 <_ZNK12SimpleString4sizeEv>
 8015a18:	61f8      	str	r0, [r7, #28]
    SimpleString parameter(av[i]);
 8015a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	009b      	lsls	r3, r3, #2
 8015a20:	683a      	ldr	r2, [r7, #0]
 8015a22:	4413      	add	r3, r2
 8015a24:	681a      	ldr	r2, [r3, #0]
 8015a26:	f107 0314 	add.w	r3, r7, #20
 8015a2a:	4611      	mov	r1, r2
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	f7f7 f968 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
    if (parameter.size() >  parameterLength) return av[i] + parameterLength;
 8015a32:	f107 0314 	add.w	r3, r7, #20
 8015a36:	4618      	mov	r0, r3
 8015a38:	f7f7 fcfa 	bl	800d430 <_ZNK12SimpleString4sizeEv>
 8015a3c:	4602      	mov	r2, r0
 8015a3e:	69fb      	ldr	r3, [r7, #28]
 8015a40:	4293      	cmp	r3, r2
 8015a42:	bf34      	ite	cc
 8015a44:	2301      	movcc	r3, #1
 8015a46:	2300      	movcs	r3, #0
 8015a48:	b2db      	uxtb	r3, r3
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d00c      	beq.n	8015a68 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x64>
 8015a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a50:	681b      	ldr	r3, [r3, #0]
 8015a52:	009b      	lsls	r3, r3, #2
 8015a54:	683a      	ldr	r2, [r7, #0]
 8015a56:	4413      	add	r3, r2
 8015a58:	681a      	ldr	r2, [r3, #0]
 8015a5a:	69fb      	ldr	r3, [r7, #28]
 8015a5c:	4413      	add	r3, r2
 8015a5e:	4619      	mov	r1, r3
 8015a60:	68f8      	ldr	r0, [r7, #12]
 8015a62:	f7f7 f94e 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8015a66:	e019      	b.n	8015a9c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    else if (i + 1 < ac) return av[++i];
 8015a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	3301      	adds	r3, #1
 8015a6e:	687a      	ldr	r2, [r7, #4]
 8015a70:	429a      	cmp	r2, r3
 8015a72:	dd0f      	ble.n	8015a94 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x90>
 8015a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a76:	681b      	ldr	r3, [r3, #0]
 8015a78:	1c5a      	adds	r2, r3, #1
 8015a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a7c:	601a      	str	r2, [r3, #0]
 8015a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	009b      	lsls	r3, r3, #2
 8015a84:	683a      	ldr	r2, [r7, #0]
 8015a86:	4413      	add	r3, r2
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	4619      	mov	r1, r3
 8015a8c:	68f8      	ldr	r0, [r7, #12]
 8015a8e:	f7f7 f938 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8015a92:	e003      	b.n	8015a9c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    return "";
 8015a94:	4906      	ldr	r1, [pc, #24]	; (8015ab0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0xac>)
 8015a96:	68f8      	ldr	r0, [r7, #12]
 8015a98:	f7f7 f933 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
    SimpleString parameter(av[i]);
 8015a9c:	f107 0314 	add.w	r3, r7, #20
 8015aa0:	4618      	mov	r0, r3
 8015aa2:	f7f7 fce6 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 8015aa6:	68f8      	ldr	r0, [r7, #12]
 8015aa8:	3720      	adds	r7, #32
 8015aaa:	46bd      	mov	sp, r7
 8015aac:	bd80      	pop	{r7, pc}
 8015aae:	bf00      	nop
 8015ab0:	0802523c 	.word	0x0802523c

08015ab4 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>:

void CommandLineArguments::addGroupFilter(int ac, const char *const *av, int& i)
{
 8015ab4:	b5b0      	push	{r4, r5, r7, lr}
 8015ab6:	b08c      	sub	sp, #48	; 0x30
 8015ab8:	af02      	add	r7, sp, #8
 8015aba:	60f8      	str	r0, [r7, #12]
 8015abc:	60b9      	str	r1, [r7, #8]
 8015abe:	607a      	str	r2, [r7, #4]
 8015ac0:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-g"));
 8015ac2:	f107 031c 	add.w	r3, r7, #28
 8015ac6:	491a      	ldr	r1, [pc, #104]	; (8015b30 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x7c>)
 8015ac8:	4618      	mov	r0, r3
 8015aca:	f7f7 f91a 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8015ace:	f107 0014 	add.w	r0, r7, #20
 8015ad2:	f107 031c 	add.w	r3, r7, #28
 8015ad6:	9301      	str	r3, [sp, #4]
 8015ad8:	683b      	ldr	r3, [r7, #0]
 8015ada:	9300      	str	r3, [sp, #0]
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	68ba      	ldr	r2, [r7, #8]
 8015ae0:	68f9      	ldr	r1, [r7, #12]
 8015ae2:	f7ff ff8f 	bl	8015a04 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015ae6:	f107 0514 	add.w	r5, r7, #20
 8015aea:	f44f 7289 	mov.w	r2, #274	; 0x112
 8015aee:	4911      	ldr	r1, [pc, #68]	; (8015b34 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x80>)
 8015af0:	2010      	movs	r0, #16
 8015af2:	f7f4 fd43 	bl	800a57c <_ZnwjPKci>
 8015af6:	4604      	mov	r4, r0
 8015af8:	4629      	mov	r1, r5
 8015afa:	4620      	mov	r0, r4
 8015afc:	f009 ff3e 	bl	801f97c <_ZN10TestFilterC1ERK12SimpleString>
 8015b00:	627c      	str	r4, [r7, #36]	; 0x24
 8015b02:	f107 0314 	add.w	r3, r7, #20
 8015b06:	4618      	mov	r0, r3
 8015b08:	f7f7 fcb3 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8015b0c:	f107 031c 	add.w	r3, r7, #28
 8015b10:	4618      	mov	r0, r3
 8015b12:	f7f7 fcae 	bl	800d472 <_ZN12SimpleStringD1Ev>
    groupFilters_ = groupFilter->add(groupFilters_);
 8015b16:	68fb      	ldr	r3, [r7, #12]
 8015b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b1a:	4619      	mov	r1, r3
 8015b1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015b1e:	f009 ff4d 	bl	801f9bc <_ZN10TestFilter3addEPS_>
 8015b22:	4602      	mov	r2, r0
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	625a      	str	r2, [r3, #36]	; 0x24
}
 8015b28:	bf00      	nop
 8015b2a:	3728      	adds	r7, #40	; 0x28
 8015b2c:	46bd      	mov	sp, r7
 8015b2e:	bdb0      	pop	{r4, r5, r7, pc}
 8015b30:	08025270 	.word	0x08025270
 8015b34:	08025c04 	.word	0x08025c04

08015b38 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>:

bool CommandLineArguments::addGroupDotNameFilter(int ac, const char *const *av, int& i)
{
 8015b38:	b5b0      	push	{r4, r5, r7, lr}
 8015b3a:	b092      	sub	sp, #72	; 0x48
 8015b3c:	af02      	add	r7, sp, #8
 8015b3e:	60f8      	str	r0, [r7, #12]
 8015b40:	60b9      	str	r1, [r7, #8]
 8015b42:	607a      	str	r2, [r7, #4]
 8015b44:	603b      	str	r3, [r7, #0]
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 8015b46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015b4a:	494e      	ldr	r1, [pc, #312]	; (8015c84 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x14c>)
 8015b4c:	4618      	mov	r0, r3
 8015b4e:	f7f7 f8d8 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8015b52:	f107 0020 	add.w	r0, r7, #32
 8015b56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015b5a:	9301      	str	r3, [sp, #4]
 8015b5c:	683b      	ldr	r3, [r7, #0]
 8015b5e:	9300      	str	r3, [sp, #0]
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	68ba      	ldr	r2, [r7, #8]
 8015b64:	68f9      	ldr	r1, [r7, #12]
 8015b66:	f7ff ff4d 	bl	8015a04 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015b6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015b6e:	4618      	mov	r0, r3
 8015b70:	f7f7 fc7f 	bl	800d472 <_ZN12SimpleStringD1Ev>
    SimpleStringCollection collection;
 8015b74:	f107 0310 	add.w	r3, r7, #16
 8015b78:	4618      	mov	r0, r3
 8015b7a:	f7f8 fb8f 	bl	800e29c <_ZN22SimpleStringCollectionC1Ev>
    groupDotName.split(".", collection);
 8015b7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015b82:	4941      	ldr	r1, [pc, #260]	; (8015c88 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x150>)
 8015b84:	4618      	mov	r0, r3
 8015b86:	f7f7 f8bc 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8015b8a:	f107 0210 	add.w	r2, r7, #16
 8015b8e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8015b92:	f107 0320 	add.w	r3, r7, #32
 8015b96:	4618      	mov	r0, r3
 8015b98:	f7f7 fa1f 	bl	800cfda <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>
 8015b9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	f7f7 fc66 	bl	800d472 <_ZN12SimpleStringD1Ev>

    if (collection.size() != 2) return false;
 8015ba6:	f107 0310 	add.w	r3, r7, #16
 8015baa:	4618      	mov	r0, r3
 8015bac:	f7f8 fc1b 	bl	800e3e6 <_ZNK22SimpleStringCollection4sizeEv>
 8015bb0:	4603      	mov	r3, r0
 8015bb2:	2b02      	cmp	r3, #2
 8015bb4:	bf14      	ite	ne
 8015bb6:	2301      	movne	r3, #1
 8015bb8:	2300      	moveq	r3, #0
 8015bba:	b2db      	uxtb	r3, r3
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d001      	beq.n	8015bc4 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x8c>
 8015bc0:	2400      	movs	r4, #0
 8015bc2:	e04f      	b.n	8015c64 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x12c>

    groupFilters_ = (new TestFilter(collection[0].subString(0, collection[0].size()-1)))->add(groupFilters_);
 8015bc4:	f107 0310 	add.w	r3, r7, #16
 8015bc8:	2100      	movs	r1, #0
 8015bca:	4618      	mov	r0, r3
 8015bcc:	f7f8 fc18 	bl	800e400 <_ZN22SimpleStringCollectionixEj>
 8015bd0:	4604      	mov	r4, r0
 8015bd2:	f107 0310 	add.w	r3, r7, #16
 8015bd6:	2100      	movs	r1, #0
 8015bd8:	4618      	mov	r0, r3
 8015bda:	f7f8 fc11 	bl	800e400 <_ZN22SimpleStringCollectionixEj>
 8015bde:	4603      	mov	r3, r0
 8015be0:	4618      	mov	r0, r3
 8015be2:	f7f7 fc25 	bl	800d430 <_ZNK12SimpleString4sizeEv>
 8015be6:	4603      	mov	r3, r0
 8015be8:	3b01      	subs	r3, #1
 8015bea:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8015bee:	2200      	movs	r2, #0
 8015bf0:	4621      	mov	r1, r4
 8015bf2:	f7f7 fd47 	bl	800d684 <_ZNK12SimpleString9subStringEjj>
 8015bf6:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8015bfa:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8015bfe:	4923      	ldr	r1, [pc, #140]	; (8015c8c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8015c00:	2010      	movs	r0, #16
 8015c02:	f7f4 fcbb 	bl	800a57c <_ZnwjPKci>
 8015c06:	4604      	mov	r4, r0
 8015c08:	4629      	mov	r1, r5
 8015c0a:	4620      	mov	r0, r4
 8015c0c:	f009 feb6 	bl	801f97c <_ZN10TestFilterC1ERK12SimpleString>
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c14:	4619      	mov	r1, r3
 8015c16:	4620      	mov	r0, r4
 8015c18:	f009 fed0 	bl	801f9bc <_ZN10TestFilter3addEPS_>
 8015c1c:	4602      	mov	r2, r0
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	625a      	str	r2, [r3, #36]	; 0x24
 8015c22:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015c26:	4618      	mov	r0, r3
 8015c28:	f7f7 fc23 	bl	800d472 <_ZN12SimpleStringD1Ev>
    nameFilters_ = (new TestFilter(collection[1]))->add(nameFilters_);
 8015c2c:	f107 0310 	add.w	r3, r7, #16
 8015c30:	2101      	movs	r1, #1
 8015c32:	4618      	mov	r0, r3
 8015c34:	f7f8 fbe4 	bl	800e400 <_ZN22SimpleStringCollectionixEj>
 8015c38:	4605      	mov	r5, r0
 8015c3a:	f240 121f 	movw	r2, #287	; 0x11f
 8015c3e:	4913      	ldr	r1, [pc, #76]	; (8015c8c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8015c40:	2010      	movs	r0, #16
 8015c42:	f7f4 fc9b 	bl	800a57c <_ZnwjPKci>
 8015c46:	4604      	mov	r4, r0
 8015c48:	4629      	mov	r1, r5
 8015c4a:	4620      	mov	r0, r4
 8015c4c:	f009 fe96 	bl	801f97c <_ZN10TestFilterC1ERK12SimpleString>
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c54:	4619      	mov	r1, r3
 8015c56:	4620      	mov	r0, r4
 8015c58:	f009 feb0 	bl	801f9bc <_ZN10TestFilter3addEPS_>
 8015c5c:	4602      	mov	r2, r0
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 8015c62:	2401      	movs	r4, #1
    SimpleStringCollection collection;
 8015c64:	f107 0310 	add.w	r3, r7, #16
 8015c68:	4618      	mov	r0, r3
 8015c6a:	f7f8 fb8b 	bl	800e384 <_ZN22SimpleStringCollectionD1Ev>
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 8015c6e:	f107 0320 	add.w	r3, r7, #32
 8015c72:	4618      	mov	r0, r3
 8015c74:	f7f7 fbfd 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8015c78:	4623      	mov	r3, r4
}
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	3740      	adds	r7, #64	; 0x40
 8015c7e:	46bd      	mov	sp, r7
 8015c80:	bdb0      	pop	{r4, r5, r7, pc}
 8015c82:	bf00      	nop
 8015c84:	08025274 	.word	0x08025274
 8015c88:	08025c24 	.word	0x08025c24
 8015c8c:	08025c04 	.word	0x08025c04

08015c90 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8015c90:	b5b0      	push	{r4, r5, r7, lr}
 8015c92:	b08c      	sub	sp, #48	; 0x30
 8015c94:	af02      	add	r7, sp, #8
 8015c96:	60f8      	str	r0, [r7, #12]
 8015c98:	60b9      	str	r1, [r7, #8]
 8015c9a:	607a      	str	r2, [r7, #4]
 8015c9c:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-sg"));
 8015c9e:	f107 031c 	add.w	r3, r7, #28
 8015ca2:	491c      	ldr	r1, [pc, #112]	; (8015d14 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x84>)
 8015ca4:	4618      	mov	r0, r3
 8015ca6:	f7f7 f82c 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8015caa:	f107 0014 	add.w	r0, r7, #20
 8015cae:	f107 031c 	add.w	r3, r7, #28
 8015cb2:	9301      	str	r3, [sp, #4]
 8015cb4:	683b      	ldr	r3, [r7, #0]
 8015cb6:	9300      	str	r3, [sp, #0]
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	68ba      	ldr	r2, [r7, #8]
 8015cbc:	68f9      	ldr	r1, [r7, #12]
 8015cbe:	f7ff fea1 	bl	8015a04 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015cc2:	f107 0514 	add.w	r5, r7, #20
 8015cc6:	f240 1225 	movw	r2, #293	; 0x125
 8015cca:	4913      	ldr	r1, [pc, #76]	; (8015d18 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x88>)
 8015ccc:	2010      	movs	r0, #16
 8015cce:	f7f4 fc55 	bl	800a57c <_ZnwjPKci>
 8015cd2:	4604      	mov	r4, r0
 8015cd4:	4629      	mov	r1, r5
 8015cd6:	4620      	mov	r0, r4
 8015cd8:	f009 fe50 	bl	801f97c <_ZN10TestFilterC1ERK12SimpleString>
 8015cdc:	627c      	str	r4, [r7, #36]	; 0x24
 8015cde:	f107 0314 	add.w	r3, r7, #20
 8015ce2:	4618      	mov	r0, r3
 8015ce4:	f7f7 fbc5 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8015ce8:	f107 031c 	add.w	r3, r7, #28
 8015cec:	4618      	mov	r0, r3
 8015cee:	f7f7 fbc0 	bl	800d472 <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8015cf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015cf4:	f009 fe7d 	bl	801f9f2 <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cfc:	4619      	mov	r1, r3
 8015cfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015d00:	f009 fe5c 	bl	801f9bc <_ZN10TestFilter3addEPS_>
 8015d04:	4602      	mov	r2, r0
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	625a      	str	r2, [r3, #36]	; 0x24
}
 8015d0a:	bf00      	nop
 8015d0c:	3728      	adds	r7, #40	; 0x28
 8015d0e:	46bd      	mov	sp, r7
 8015d10:	bdb0      	pop	{r4, r5, r7, pc}
 8015d12:	bf00      	nop
 8015d14:	08025278 	.word	0x08025278
 8015d18:	08025c04 	.word	0x08025c04

08015d1c <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeGroupFilter(int ac, const char *const *av, int& i)
{
 8015d1c:	b5b0      	push	{r4, r5, r7, lr}
 8015d1e:	b08c      	sub	sp, #48	; 0x30
 8015d20:	af02      	add	r7, sp, #8
 8015d22:	60f8      	str	r0, [r7, #12]
 8015d24:	60b9      	str	r1, [r7, #8]
 8015d26:	607a      	str	r2, [r7, #4]
 8015d28:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xg"));
 8015d2a:	f107 031c 	add.w	r3, r7, #28
 8015d2e:	491c      	ldr	r1, [pc, #112]	; (8015da0 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x84>)
 8015d30:	4618      	mov	r0, r3
 8015d32:	f7f6 ffe6 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8015d36:	f107 0014 	add.w	r0, r7, #20
 8015d3a:	f107 031c 	add.w	r3, r7, #28
 8015d3e:	9301      	str	r3, [sp, #4]
 8015d40:	683b      	ldr	r3, [r7, #0]
 8015d42:	9300      	str	r3, [sp, #0]
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	68ba      	ldr	r2, [r7, #8]
 8015d48:	68f9      	ldr	r1, [r7, #12]
 8015d4a:	f7ff fe5b 	bl	8015a04 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015d4e:	f107 0514 	add.w	r5, r7, #20
 8015d52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8015d56:	4913      	ldr	r1, [pc, #76]	; (8015da4 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x88>)
 8015d58:	2010      	movs	r0, #16
 8015d5a:	f7f4 fc0f 	bl	800a57c <_ZnwjPKci>
 8015d5e:	4604      	mov	r4, r0
 8015d60:	4629      	mov	r1, r5
 8015d62:	4620      	mov	r0, r4
 8015d64:	f009 fe0a 	bl	801f97c <_ZN10TestFilterC1ERK12SimpleString>
 8015d68:	627c      	str	r4, [r7, #36]	; 0x24
 8015d6a:	f107 0314 	add.w	r3, r7, #20
 8015d6e:	4618      	mov	r0, r3
 8015d70:	f7f7 fb7f 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8015d74:	f107 031c 	add.w	r3, r7, #28
 8015d78:	4618      	mov	r0, r3
 8015d7a:	f7f7 fb7a 	bl	800d472 <_ZN12SimpleStringD1Ev>
    groupFilter->invertMatching();
 8015d7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015d80:	f009 fe44 	bl	801fa0c <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d88:	4619      	mov	r1, r3
 8015d8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015d8c:	f009 fe16 	bl	801f9bc <_ZN10TestFilter3addEPS_>
 8015d90:	4602      	mov	r2, r0
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	625a      	str	r2, [r3, #36]	; 0x24
}
 8015d96:	bf00      	nop
 8015d98:	3728      	adds	r7, #40	; 0x28
 8015d9a:	46bd      	mov	sp, r7
 8015d9c:	bdb0      	pop	{r4, r5, r7, pc}
 8015d9e:	bf00      	nop
 8015da0:	0802527c 	.word	0x0802527c
 8015da4:	08025c04 	.word	0x08025c04

08015da8 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8015da8:	b5b0      	push	{r4, r5, r7, lr}
 8015daa:	b08c      	sub	sp, #48	; 0x30
 8015dac:	af02      	add	r7, sp, #8
 8015dae:	60f8      	str	r0, [r7, #12]
 8015db0:	60b9      	str	r1, [r7, #8]
 8015db2:	607a      	str	r2, [r7, #4]
 8015db4:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xsg"));
 8015db6:	f107 031c 	add.w	r3, r7, #28
 8015dba:	491d      	ldr	r1, [pc, #116]	; (8015e30 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x88>)
 8015dbc:	4618      	mov	r0, r3
 8015dbe:	f7f6 ffa0 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8015dc2:	f107 0014 	add.w	r0, r7, #20
 8015dc6:	f107 031c 	add.w	r3, r7, #28
 8015dca:	9301      	str	r3, [sp, #4]
 8015dcc:	683b      	ldr	r3, [r7, #0]
 8015dce:	9300      	str	r3, [sp, #0]
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	68ba      	ldr	r2, [r7, #8]
 8015dd4:	68f9      	ldr	r1, [r7, #12]
 8015dd6:	f7ff fe15 	bl	8015a04 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015dda:	f107 0514 	add.w	r5, r7, #20
 8015dde:	f240 1233 	movw	r2, #307	; 0x133
 8015de2:	4914      	ldr	r1, [pc, #80]	; (8015e34 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x8c>)
 8015de4:	2010      	movs	r0, #16
 8015de6:	f7f4 fbc9 	bl	800a57c <_ZnwjPKci>
 8015dea:	4604      	mov	r4, r0
 8015dec:	4629      	mov	r1, r5
 8015dee:	4620      	mov	r0, r4
 8015df0:	f009 fdc4 	bl	801f97c <_ZN10TestFilterC1ERK12SimpleString>
 8015df4:	627c      	str	r4, [r7, #36]	; 0x24
 8015df6:	f107 0314 	add.w	r3, r7, #20
 8015dfa:	4618      	mov	r0, r3
 8015dfc:	f7f7 fb39 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8015e00:	f107 031c 	add.w	r3, r7, #28
 8015e04:	4618      	mov	r0, r3
 8015e06:	f7f7 fb34 	bl	800d472 <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8015e0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015e0c:	f009 fdf1 	bl	801f9f2 <_ZN10TestFilter14strictMatchingEv>
    groupFilter->invertMatching();
 8015e10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015e12:	f009 fdfb 	bl	801fa0c <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e1a:	4619      	mov	r1, r3
 8015e1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015e1e:	f009 fdcd 	bl	801f9bc <_ZN10TestFilter3addEPS_>
 8015e22:	4602      	mov	r2, r0
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	625a      	str	r2, [r3, #36]	; 0x24
}
 8015e28:	bf00      	nop
 8015e2a:	3728      	adds	r7, #40	; 0x28
 8015e2c:	46bd      	mov	sp, r7
 8015e2e:	bdb0      	pop	{r4, r5, r7, pc}
 8015e30:	08025280 	.word	0x08025280
 8015e34:	08025c04 	.word	0x08025c04

08015e38 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>:

void CommandLineArguments::addNameFilter(int ac, const char *const *av, int& i)
{
 8015e38:	b5b0      	push	{r4, r5, r7, lr}
 8015e3a:	b08c      	sub	sp, #48	; 0x30
 8015e3c:	af02      	add	r7, sp, #8
 8015e3e:	60f8      	str	r0, [r7, #12]
 8015e40:	60b9      	str	r1, [r7, #8]
 8015e42:	607a      	str	r2, [r7, #4]
 8015e44:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, i, "-n"));
 8015e46:	f107 031c 	add.w	r3, r7, #28
 8015e4a:	491a      	ldr	r1, [pc, #104]	; (8015eb4 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x7c>)
 8015e4c:	4618      	mov	r0, r3
 8015e4e:	f7f6 ff58 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8015e52:	f107 0014 	add.w	r0, r7, #20
 8015e56:	f107 031c 	add.w	r3, r7, #28
 8015e5a:	9301      	str	r3, [sp, #4]
 8015e5c:	683b      	ldr	r3, [r7, #0]
 8015e5e:	9300      	str	r3, [sp, #0]
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	68ba      	ldr	r2, [r7, #8]
 8015e64:	68f9      	ldr	r1, [r7, #12]
 8015e66:	f7ff fdcd 	bl	8015a04 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015e6a:	f107 0514 	add.w	r5, r7, #20
 8015e6e:	f240 123b 	movw	r2, #315	; 0x13b
 8015e72:	4911      	ldr	r1, [pc, #68]	; (8015eb8 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x80>)
 8015e74:	2010      	movs	r0, #16
 8015e76:	f7f4 fb81 	bl	800a57c <_ZnwjPKci>
 8015e7a:	4604      	mov	r4, r0
 8015e7c:	4629      	mov	r1, r5
 8015e7e:	4620      	mov	r0, r4
 8015e80:	f009 fd7c 	bl	801f97c <_ZN10TestFilterC1ERK12SimpleString>
 8015e84:	627c      	str	r4, [r7, #36]	; 0x24
 8015e86:	f107 0314 	add.w	r3, r7, #20
 8015e8a:	4618      	mov	r0, r3
 8015e8c:	f7f7 faf1 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8015e90:	f107 031c 	add.w	r3, r7, #28
 8015e94:	4618      	mov	r0, r3
 8015e96:	f7f7 faec 	bl	800d472 <_ZN12SimpleStringD1Ev>
    nameFilters_ = nameFilter->add(nameFilters_);
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015e9e:	4619      	mov	r1, r3
 8015ea0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015ea2:	f009 fd8b 	bl	801f9bc <_ZN10TestFilter3addEPS_>
 8015ea6:	4602      	mov	r2, r0
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8015eac:	bf00      	nop
 8015eae:	3728      	adds	r7, #40	; 0x28
 8015eb0:	46bd      	mov	sp, r7
 8015eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8015eb4:	08025288 	.word	0x08025288
 8015eb8:	08025c04 	.word	0x08025c04

08015ebc <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addStrictNameFilter(int ac, const char *const *av, int& index)
{
 8015ebc:	b5b0      	push	{r4, r5, r7, lr}
 8015ebe:	b08c      	sub	sp, #48	; 0x30
 8015ec0:	af02      	add	r7, sp, #8
 8015ec2:	60f8      	str	r0, [r7, #12]
 8015ec4:	60b9      	str	r1, [r7, #8]
 8015ec6:	607a      	str	r2, [r7, #4]
 8015ec8:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-sn"));
 8015eca:	f107 031c 	add.w	r3, r7, #28
 8015ece:	491c      	ldr	r1, [pc, #112]	; (8015f40 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x84>)
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	f7f6 ff16 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8015ed6:	f107 0014 	add.w	r0, r7, #20
 8015eda:	f107 031c 	add.w	r3, r7, #28
 8015ede:	9301      	str	r3, [sp, #4]
 8015ee0:	683b      	ldr	r3, [r7, #0]
 8015ee2:	9300      	str	r3, [sp, #0]
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	68ba      	ldr	r2, [r7, #8]
 8015ee8:	68f9      	ldr	r1, [r7, #12]
 8015eea:	f7ff fd8b 	bl	8015a04 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015eee:	f107 0514 	add.w	r5, r7, #20
 8015ef2:	f240 1241 	movw	r2, #321	; 0x141
 8015ef6:	4913      	ldr	r1, [pc, #76]	; (8015f44 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x88>)
 8015ef8:	2010      	movs	r0, #16
 8015efa:	f7f4 fb3f 	bl	800a57c <_ZnwjPKci>
 8015efe:	4604      	mov	r4, r0
 8015f00:	4629      	mov	r1, r5
 8015f02:	4620      	mov	r0, r4
 8015f04:	f009 fd3a 	bl	801f97c <_ZN10TestFilterC1ERK12SimpleString>
 8015f08:	627c      	str	r4, [r7, #36]	; 0x24
 8015f0a:	f107 0314 	add.w	r3, r7, #20
 8015f0e:	4618      	mov	r0, r3
 8015f10:	f7f7 faaf 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8015f14:	f107 031c 	add.w	r3, r7, #28
 8015f18:	4618      	mov	r0, r3
 8015f1a:	f7f7 faaa 	bl	800d472 <_ZN12SimpleStringD1Ev>
    nameFilter->strictMatching();
 8015f1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015f20:	f009 fd67 	bl	801f9f2 <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8015f24:	68fb      	ldr	r3, [r7, #12]
 8015f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015f28:	4619      	mov	r1, r3
 8015f2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015f2c:	f009 fd46 	bl	801f9bc <_ZN10TestFilter3addEPS_>
 8015f30:	4602      	mov	r2, r0
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	629a      	str	r2, [r3, #40]	; 0x28
}
 8015f36:	bf00      	nop
 8015f38:	3728      	adds	r7, #40	; 0x28
 8015f3a:	46bd      	mov	sp, r7
 8015f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8015f3e:	bf00      	nop
 8015f40:	0802528c 	.word	0x0802528c
 8015f44:	08025c04 	.word	0x08025c04

08015f48 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeNameFilter(int ac, const char *const *av, int& index)
{
 8015f48:	b5b0      	push	{r4, r5, r7, lr}
 8015f4a:	b08c      	sub	sp, #48	; 0x30
 8015f4c:	af02      	add	r7, sp, #8
 8015f4e:	60f8      	str	r0, [r7, #12]
 8015f50:	60b9      	str	r1, [r7, #8]
 8015f52:	607a      	str	r2, [r7, #4]
 8015f54:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xn"));
 8015f56:	f107 031c 	add.w	r3, r7, #28
 8015f5a:	491c      	ldr	r1, [pc, #112]	; (8015fcc <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x84>)
 8015f5c:	4618      	mov	r0, r3
 8015f5e:	f7f6 fed0 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8015f62:	f107 0014 	add.w	r0, r7, #20
 8015f66:	f107 031c 	add.w	r3, r7, #28
 8015f6a:	9301      	str	r3, [sp, #4]
 8015f6c:	683b      	ldr	r3, [r7, #0]
 8015f6e:	9300      	str	r3, [sp, #0]
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	68ba      	ldr	r2, [r7, #8]
 8015f74:	68f9      	ldr	r1, [r7, #12]
 8015f76:	f7ff fd45 	bl	8015a04 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015f7a:	f107 0514 	add.w	r5, r7, #20
 8015f7e:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015f82:	4913      	ldr	r1, [pc, #76]	; (8015fd0 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x88>)
 8015f84:	2010      	movs	r0, #16
 8015f86:	f7f4 faf9 	bl	800a57c <_ZnwjPKci>
 8015f8a:	4604      	mov	r4, r0
 8015f8c:	4629      	mov	r1, r5
 8015f8e:	4620      	mov	r0, r4
 8015f90:	f009 fcf4 	bl	801f97c <_ZN10TestFilterC1ERK12SimpleString>
 8015f94:	627c      	str	r4, [r7, #36]	; 0x24
 8015f96:	f107 0314 	add.w	r3, r7, #20
 8015f9a:	4618      	mov	r0, r3
 8015f9c:	f7f7 fa69 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8015fa0:	f107 031c 	add.w	r3, r7, #28
 8015fa4:	4618      	mov	r0, r3
 8015fa6:	f7f7 fa64 	bl	800d472 <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 8015faa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015fac:	f009 fd2e 	bl	801fa0c <_ZN10TestFilter14invertMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015fb4:	4619      	mov	r1, r3
 8015fb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015fb8:	f009 fd00 	bl	801f9bc <_ZN10TestFilter3addEPS_>
 8015fbc:	4602      	mov	r2, r0
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8015fc2:	bf00      	nop
 8015fc4:	3728      	adds	r7, #40	; 0x28
 8015fc6:	46bd      	mov	sp, r7
 8015fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8015fca:	bf00      	nop
 8015fcc:	08025290 	.word	0x08025290
 8015fd0:	08025c04 	.word	0x08025c04

08015fd4 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictNameFilter(int ac, const char *const *av, int& index)
{
 8015fd4:	b5b0      	push	{r4, r5, r7, lr}
 8015fd6:	b08c      	sub	sp, #48	; 0x30
 8015fd8:	af02      	add	r7, sp, #8
 8015fda:	60f8      	str	r0, [r7, #12]
 8015fdc:	60b9      	str	r1, [r7, #8]
 8015fde:	607a      	str	r2, [r7, #4]
 8015fe0:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xsn"));
 8015fe2:	f107 031c 	add.w	r3, r7, #28
 8015fe6:	491d      	ldr	r1, [pc, #116]	; (801605c <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x88>)
 8015fe8:	4618      	mov	r0, r3
 8015fea:	f7f6 fe8a 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8015fee:	f107 0014 	add.w	r0, r7, #20
 8015ff2:	f107 031c 	add.w	r3, r7, #28
 8015ff6:	9301      	str	r3, [sp, #4]
 8015ff8:	683b      	ldr	r3, [r7, #0]
 8015ffa:	9300      	str	r3, [sp, #0]
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	68ba      	ldr	r2, [r7, #8]
 8016000:	68f9      	ldr	r1, [r7, #12]
 8016002:	f7ff fcff 	bl	8015a04 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8016006:	f107 0514 	add.w	r5, r7, #20
 801600a:	f240 124f 	movw	r2, #335	; 0x14f
 801600e:	4914      	ldr	r1, [pc, #80]	; (8016060 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x8c>)
 8016010:	2010      	movs	r0, #16
 8016012:	f7f4 fab3 	bl	800a57c <_ZnwjPKci>
 8016016:	4604      	mov	r4, r0
 8016018:	4629      	mov	r1, r5
 801601a:	4620      	mov	r0, r4
 801601c:	f009 fcae 	bl	801f97c <_ZN10TestFilterC1ERK12SimpleString>
 8016020:	627c      	str	r4, [r7, #36]	; 0x24
 8016022:	f107 0314 	add.w	r3, r7, #20
 8016026:	4618      	mov	r0, r3
 8016028:	f7f7 fa23 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801602c:	f107 031c 	add.w	r3, r7, #28
 8016030:	4618      	mov	r0, r3
 8016032:	f7f7 fa1e 	bl	800d472 <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 8016036:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016038:	f009 fce8 	bl	801fa0c <_ZN10TestFilter14invertMatchingEv>
    nameFilter->strictMatching();
 801603c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801603e:	f009 fcd8 	bl	801f9f2 <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016046:	4619      	mov	r1, r3
 8016048:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801604a:	f009 fcb7 	bl	801f9bc <_ZN10TestFilter3addEPS_>
 801604e:	4602      	mov	r2, r0
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	629a      	str	r2, [r3, #40]	; 0x28
}
 8016054:	bf00      	nop
 8016056:	3728      	adds	r7, #40	; 0x28
 8016058:	46bd      	mov	sp, r7
 801605a:	bdb0      	pop	{r4, r5, r7, pc}
 801605c:	08025294 	.word	0x08025294
 8016060:	08025c04 	.word	0x08025c04

08016064 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>:

void CommandLineArguments::addTestToRunBasedOnVerboseOutput(int ac, const char *const *av, int& index, const char* parameterName)
{
 8016064:	b5b0      	push	{r4, r5, r7, lr}
 8016066:	b092      	sub	sp, #72	; 0x48
 8016068:	af02      	add	r7, sp, #8
 801606a:	60f8      	str	r0, [r7, #12]
 801606c:	60b9      	str	r1, [r7, #8]
 801606e:	607a      	str	r2, [r7, #4]
 8016070:	603b      	str	r3, [r7, #0]
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 8016072:	f107 0320 	add.w	r3, r7, #32
 8016076:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016078:	4618      	mov	r0, r3
 801607a:	f7f6 fe42 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801607e:	f107 0018 	add.w	r0, r7, #24
 8016082:	f107 0320 	add.w	r3, r7, #32
 8016086:	9301      	str	r3, [sp, #4]
 8016088:	683b      	ldr	r3, [r7, #0]
 801608a:	9300      	str	r3, [sp, #0]
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	68ba      	ldr	r2, [r7, #8]
 8016090:	68f9      	ldr	r1, [r7, #12]
 8016092:	f7ff fcb7 	bl	8015a04 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8016096:	f107 0320 	add.w	r3, r7, #32
 801609a:	4618      	mov	r0, r3
 801609c:	f7f7 f9e9 	bl	800d472 <_ZN12SimpleStringD1Ev>
    SimpleString testname = wholename.subStringFromTill(',', ')');
 80160a0:	f107 0010 	add.w	r0, r7, #16
 80160a4:	f107 0118 	add.w	r1, r7, #24
 80160a8:	2329      	movs	r3, #41	; 0x29
 80160aa:	222c      	movs	r2, #44	; 0x2c
 80160ac:	f7f7 fb92 	bl	800d7d4 <_ZNK12SimpleString17subStringFromTillEcc>
    testname = testname.subString(2);
 80160b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80160b4:	f107 0110 	add.w	r1, r7, #16
 80160b8:	2202      	movs	r2, #2
 80160ba:	4618      	mov	r0, r3
 80160bc:	f7f7 fb2c 	bl	800d718 <_ZNK12SimpleString9subStringEj>
 80160c0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80160c4:	f107 0310 	add.w	r3, r7, #16
 80160c8:	4611      	mov	r1, r2
 80160ca:	4618      	mov	r0, r3
 80160cc:	f7f6 fe85 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 80160d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80160d4:	4618      	mov	r0, r3
 80160d6:	f7f7 f9cc 	bl	800d472 <_ZN12SimpleStringD1Ev>
    TestFilter* namefilter = new TestFilter(testname);
 80160da:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 80160de:	492a      	ldr	r1, [pc, #168]	; (8016188 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 80160e0:	2010      	movs	r0, #16
 80160e2:	f7f4 fa4b 	bl	800a57c <_ZnwjPKci>
 80160e6:	4604      	mov	r4, r0
 80160e8:	f107 0310 	add.w	r3, r7, #16
 80160ec:	4619      	mov	r1, r3
 80160ee:	4620      	mov	r0, r4
 80160f0:	f009 fc44 	bl	801f97c <_ZN10TestFilterC1ERK12SimpleString>
 80160f4:	63fc      	str	r4, [r7, #60]	; 0x3c
    TestFilter* groupfilter = new TestFilter(wholename.subStringFromTill(wholename.at(0), ','));
 80160f6:	f107 0318 	add.w	r3, r7, #24
 80160fa:	2100      	movs	r1, #0
 80160fc:	4618      	mov	r0, r3
 80160fe:	f7f7 fb1c 	bl	800d73a <_ZNK12SimpleString2atEj>
 8016102:	4603      	mov	r3, r0
 8016104:	461a      	mov	r2, r3
 8016106:	f107 0030 	add.w	r0, r7, #48	; 0x30
 801610a:	f107 0118 	add.w	r1, r7, #24
 801610e:	232c      	movs	r3, #44	; 0x2c
 8016110:	f7f7 fb60 	bl	800d7d4 <_ZNK12SimpleString17subStringFromTillEcc>
 8016114:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8016118:	f240 125b 	movw	r2, #347	; 0x15b
 801611c:	491a      	ldr	r1, [pc, #104]	; (8016188 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 801611e:	2010      	movs	r0, #16
 8016120:	f7f4 fa2c 	bl	800a57c <_ZnwjPKci>
 8016124:	4604      	mov	r4, r0
 8016126:	4629      	mov	r1, r5
 8016128:	4620      	mov	r0, r4
 801612a:	f009 fc27 	bl	801f97c <_ZN10TestFilterC1ERK12SimpleString>
 801612e:	63bc      	str	r4, [r7, #56]	; 0x38
 8016130:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016134:	4618      	mov	r0, r3
 8016136:	f7f7 f99c 	bl	800d472 <_ZN12SimpleStringD1Ev>
    namefilter->strictMatching();
 801613a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801613c:	f009 fc59 	bl	801f9f2 <_ZN10TestFilter14strictMatchingEv>
    groupfilter->strictMatching();
 8016140:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016142:	f009 fc56 	bl	801f9f2 <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupfilter->add(groupFilters_);
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801614a:	4619      	mov	r1, r3
 801614c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801614e:	f009 fc35 	bl	801f9bc <_ZN10TestFilter3addEPS_>
 8016152:	4602      	mov	r2, r0
 8016154:	68fb      	ldr	r3, [r7, #12]
 8016156:	625a      	str	r2, [r3, #36]	; 0x24
    nameFilters_ = namefilter->add(nameFilters_);
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801615c:	4619      	mov	r1, r3
 801615e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016160:	f009 fc2c 	bl	801f9bc <_ZN10TestFilter3addEPS_>
 8016164:	4602      	mov	r2, r0
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	629a      	str	r2, [r3, #40]	; 0x28
    SimpleString testname = wholename.subStringFromTill(',', ')');
 801616a:	f107 0310 	add.w	r3, r7, #16
 801616e:	4618      	mov	r0, r3
 8016170:	f7f7 f97f 	bl	800d472 <_ZN12SimpleStringD1Ev>
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 8016174:	f107 0318 	add.w	r3, r7, #24
 8016178:	4618      	mov	r0, r3
 801617a:	f7f7 f97a 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 801617e:	bf00      	nop
 8016180:	3740      	adds	r7, #64	; 0x40
 8016182:	46bd      	mov	sp, r7
 8016184:	bdb0      	pop	{r4, r5, r7, pc}
 8016186:	bf00      	nop
 8016188:	08025c04 	.word	0x08025c04

0801618c <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>:

void CommandLineArguments::setPackageName(int ac, const char *const *av, int& i)
{
 801618c:	b590      	push	{r4, r7, lr}
 801618e:	b08b      	sub	sp, #44	; 0x2c
 8016190:	af02      	add	r7, sp, #8
 8016192:	60f8      	str	r0, [r7, #12]
 8016194:	60b9      	str	r1, [r7, #8]
 8016196:	607a      	str	r2, [r7, #4]
 8016198:	603b      	str	r3, [r7, #0]
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 801619a:	f107 0318 	add.w	r3, r7, #24
 801619e:	491b      	ldr	r1, [pc, #108]	; (801620c <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x80>)
 80161a0:	4618      	mov	r0, r3
 80161a2:	f7f6 fdae 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80161a6:	f107 0010 	add.w	r0, r7, #16
 80161aa:	f107 0318 	add.w	r3, r7, #24
 80161ae:	9301      	str	r3, [sp, #4]
 80161b0:	683b      	ldr	r3, [r7, #0]
 80161b2:	9300      	str	r3, [sp, #0]
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	68ba      	ldr	r2, [r7, #8]
 80161b8:	68f9      	ldr	r1, [r7, #12]
 80161ba:	f7ff fc23 	bl	8015a04 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80161be:	f107 0318 	add.w	r3, r7, #24
 80161c2:	4618      	mov	r0, r3
 80161c4:	f7f7 f955 	bl	800d472 <_ZN12SimpleStringD1Ev>
    if (packageName.size() == 0) return;
 80161c8:	f107 0310 	add.w	r3, r7, #16
 80161cc:	4618      	mov	r0, r3
 80161ce:	f7f7 f92f 	bl	800d430 <_ZNK12SimpleString4sizeEv>
 80161d2:	4603      	mov	r3, r0
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	bf0c      	ite	eq
 80161d8:	2301      	moveq	r3, #1
 80161da:	2300      	movne	r3, #0
 80161dc:	b2db      	uxtb	r3, r3
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d001      	beq.n	80161e6 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x5a>
 80161e2:	2400      	movs	r4, #0
 80161e4:	e008      	b.n	80161f8 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x6c>

    packageName_ = packageName;
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	3330      	adds	r3, #48	; 0x30
 80161ea:	f107 0210 	add.w	r2, r7, #16
 80161ee:	4611      	mov	r1, r2
 80161f0:	4618      	mov	r0, r3
 80161f2:	f7f6 fdf2 	bl	800cdda <_ZN12SimpleStringaSERKS_>
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 80161f6:	2401      	movs	r4, #1
 80161f8:	f107 0310 	add.w	r3, r7, #16
 80161fc:	4618      	mov	r0, r3
 80161fe:	f7f7 f938 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8016202:	2c01      	cmp	r4, #1
}
 8016204:	3724      	adds	r7, #36	; 0x24
 8016206:	46bd      	mov	sp, r7
 8016208:	bd90      	pop	{r4, r7, pc}
 801620a:	bf00      	nop
 801620c:	080252bc 	.word	0x080252bc

08016210 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>:

bool CommandLineArguments::setOutputType(int ac, const char *const *av, int& i)
{
 8016210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016212:	b093      	sub	sp, #76	; 0x4c
 8016214:	af02      	add	r7, sp, #8
 8016216:	60f8      	str	r0, [r7, #12]
 8016218:	60b9      	str	r1, [r7, #8]
 801621a:	607a      	str	r2, [r7, #4]
 801621c:	603b      	str	r3, [r7, #0]
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 801621e:	f107 0318 	add.w	r3, r7, #24
 8016222:	4953      	ldr	r1, [pc, #332]	; (8016370 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x160>)
 8016224:	4618      	mov	r0, r3
 8016226:	f7f6 fd6c 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801622a:	f107 0010 	add.w	r0, r7, #16
 801622e:	f107 0318 	add.w	r3, r7, #24
 8016232:	9301      	str	r3, [sp, #4]
 8016234:	683b      	ldr	r3, [r7, #0]
 8016236:	9300      	str	r3, [sp, #0]
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	68ba      	ldr	r2, [r7, #8]
 801623c:	68f9      	ldr	r1, [r7, #12]
 801623e:	f7ff fbe1 	bl	8015a04 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8016242:	f107 0318 	add.w	r3, r7, #24
 8016246:	4618      	mov	r0, r3
 8016248:	f7f7 f913 	bl	800d472 <_ZN12SimpleStringD1Ev>
    if (outputType.size() == 0) return false;
 801624c:	f107 0310 	add.w	r3, r7, #16
 8016250:	4618      	mov	r0, r3
 8016252:	f7f7 f8ed 	bl	800d430 <_ZNK12SimpleString4sizeEv>
 8016256:	4603      	mov	r3, r0
 8016258:	2b00      	cmp	r3, #0
 801625a:	bf0c      	ite	eq
 801625c:	2301      	moveq	r3, #1
 801625e:	2300      	movne	r3, #0
 8016260:	b2db      	uxtb	r3, r3
 8016262:	2b00      	cmp	r3, #0
 8016264:	d001      	beq.n	801626a <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x5a>
 8016266:	2400      	movs	r4, #0
 8016268:	e078      	b.n	801635c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>

    if (outputType == "normal" || outputType == "eclipse") {
 801626a:	2500      	movs	r5, #0
 801626c:	f107 0320 	add.w	r3, r7, #32
 8016270:	4940      	ldr	r1, [pc, #256]	; (8016374 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x164>)
 8016272:	4618      	mov	r0, r3
 8016274:	f7f6 fd45 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8016278:	2601      	movs	r6, #1
 801627a:	f107 0220 	add.w	r2, r7, #32
 801627e:	f107 0310 	add.w	r3, r7, #16
 8016282:	4611      	mov	r1, r2
 8016284:	4618      	mov	r0, r3
 8016286:	f7f7 f900 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801628a:	4603      	mov	r3, r0
 801628c:	2b00      	cmp	r3, #0
 801628e:	d111      	bne.n	80162b4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa4>
 8016290:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016294:	4938      	ldr	r1, [pc, #224]	; (8016378 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x168>)
 8016296:	4618      	mov	r0, r3
 8016298:	f7f6 fd33 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801629c:	2501      	movs	r5, #1
 801629e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80162a2:	f107 0310 	add.w	r3, r7, #16
 80162a6:	4611      	mov	r1, r2
 80162a8:	4618      	mov	r0, r3
 80162aa:	f7f7 f8ee 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 80162ae:	4603      	mov	r3, r0
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d001      	beq.n	80162b8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa8>
 80162b4:	2401      	movs	r4, #1
 80162b6:	e000      	b.n	80162ba <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xaa>
 80162b8:	2400      	movs	r4, #0
 80162ba:	2d00      	cmp	r5, #0
 80162bc:	d004      	beq.n	80162c8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xb8>
 80162be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80162c2:	4618      	mov	r0, r3
 80162c4:	f7f7 f8d5 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80162c8:	2e00      	cmp	r6, #0
 80162ca:	d004      	beq.n	80162d6 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xc6>
 80162cc:	f107 0320 	add.w	r3, r7, #32
 80162d0:	4618      	mov	r0, r3
 80162d2:	f7f7 f8ce 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80162d6:	2c00      	cmp	r4, #0
 80162d8:	d005      	beq.n	80162e6 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xd6>
        outputType_ = OUTPUT_ECLIPSE;
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	2200      	movs	r2, #0
 80162de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 80162e2:	2401      	movs	r4, #1
 80162e4:	e03a      	b.n	801635c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "junit") {
 80162e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80162ea:	4924      	ldr	r1, [pc, #144]	; (801637c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x16c>)
 80162ec:	4618      	mov	r0, r3
 80162ee:	f7f6 fd08 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80162f2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80162f6:	f107 0310 	add.w	r3, r7, #16
 80162fa:	4611      	mov	r1, r2
 80162fc:	4618      	mov	r0, r3
 80162fe:	f7f7 f8c4 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 8016302:	4603      	mov	r3, r0
 8016304:	461c      	mov	r4, r3
 8016306:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801630a:	4618      	mov	r0, r3
 801630c:	f7f7 f8b1 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8016310:	2c00      	cmp	r4, #0
 8016312:	d005      	beq.n	8016320 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x110>
        outputType_ = OUTPUT_JUNIT;
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	2201      	movs	r2, #1
 8016318:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 801631c:	2401      	movs	r4, #1
 801631e:	e01d      	b.n	801635c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "teamcity") {
 8016320:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016324:	4916      	ldr	r1, [pc, #88]	; (8016380 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x170>)
 8016326:	4618      	mov	r0, r3
 8016328:	f7f6 fceb 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801632c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8016330:	f107 0310 	add.w	r3, r7, #16
 8016334:	4611      	mov	r1, r2
 8016336:	4618      	mov	r0, r3
 8016338:	f7f7 f8a7 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801633c:	4603      	mov	r3, r0
 801633e:	461c      	mov	r4, r3
 8016340:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016344:	4618      	mov	r0, r3
 8016346:	f7f7 f894 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801634a:	2c00      	cmp	r4, #0
 801634c:	d005      	beq.n	801635a <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14a>
        outputType_ = OUTPUT_TEAMCITY;
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	2202      	movs	r2, #2
 8016352:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8016356:	2401      	movs	r4, #1
 8016358:	e000      	b.n	801635c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }

    return false;
 801635a:	2400      	movs	r4, #0
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 801635c:	f107 0310 	add.w	r3, r7, #16
 8016360:	4618      	mov	r0, r3
 8016362:	f7f7 f886 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8016366:	4623      	mov	r3, r4
}
 8016368:	4618      	mov	r0, r3
 801636a:	3744      	adds	r7, #68	; 0x44
 801636c:	46bd      	mov	sp, r7
 801636e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016370:	080252b8 	.word	0x080252b8
 8016374:	08025c28 	.word	0x08025c28
 8016378:	08025c30 	.word	0x08025c30
 801637c:	08025c38 	.word	0x08025c38
 8016380:	08025c40 	.word	0x08025c40

08016384 <_ZNK20CommandLineArguments13isJUnitOutputEv>:
{
    return outputType_ == OUTPUT_ECLIPSE;
}

bool CommandLineArguments::isJUnitOutput() const
{
 8016384:	b480      	push	{r7}
 8016386:	b083      	sub	sp, #12
 8016388:	af00      	add	r7, sp, #0
 801638a:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_JUNIT;
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016392:	2b01      	cmp	r3, #1
 8016394:	bf0c      	ite	eq
 8016396:	2301      	moveq	r3, #1
 8016398:	2300      	movne	r3, #0
 801639a:	b2db      	uxtb	r3, r3
}
 801639c:	4618      	mov	r0, r3
 801639e:	370c      	adds	r7, #12
 80163a0:	46bd      	mov	sp, r7
 80163a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163a6:	4770      	bx	lr

080163a8 <_ZNK20CommandLineArguments16isTeamCityOutputEv>:

bool CommandLineArguments::isTeamCityOutput() const
{
 80163a8:	b480      	push	{r7}
 80163aa:	b083      	sub	sp, #12
 80163ac:	af00      	add	r7, sp, #0
 80163ae:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_TEAMCITY;
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80163b6:	2b02      	cmp	r3, #2
 80163b8:	bf0c      	ite	eq
 80163ba:	2301      	moveq	r3, #1
 80163bc:	2300      	movne	r3, #0
 80163be:	b2db      	uxtb	r3, r3
}
 80163c0:	4618      	mov	r0, r3
 80163c2:	370c      	adds	r7, #12
 80163c4:	46bd      	mov	sp, r7
 80163c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163ca:	4770      	bx	lr

080163cc <_ZNK20CommandLineArguments14getPackageNameEv>:

const SimpleString& CommandLineArguments::getPackageName() const
{
 80163cc:	b480      	push	{r7}
 80163ce:	b083      	sub	sp, #12
 80163d0:	af00      	add	r7, sp, #0
 80163d2:	6078      	str	r0, [r7, #4]
    return packageName_;
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	3330      	adds	r3, #48	; 0x30
}
 80163d8:	4618      	mov	r0, r3
 80163da:	370c      	adds	r7, #12
 80163dc:	46bd      	mov	sp, r7
 80163de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163e2:	4770      	bx	lr

080163e4 <_ZN22MemoryLeakDetectorListC1Ev>:
    MemoryLeakDetectorNode* next_;
};

struct MemoryLeakDetectorList
{
    MemoryLeakDetectorList() :
 80163e4:	b480      	push	{r7}
 80163e6:	b083      	sub	sp, #12
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	6078      	str	r0, [r7, #4]
        head_(NULLPTR)
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	2200      	movs	r2, #0
 80163f0:	601a      	str	r2, [r3, #0]
    {}
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	4618      	mov	r0, r3
 80163f6:	370c      	adds	r7, #12
 80163f8:	46bd      	mov	sp, r7
 80163fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163fe:	4770      	bx	lr

08016400 <_ZN18SimpleStringBufferC1Ev>:

static const char* UNKNOWN = "<unknown>";

static const char GuardBytes[] = {'B','A','S'};

SimpleStringBuffer::SimpleStringBuffer() :
 8016400:	b480      	push	{r7}
 8016402:	b083      	sub	sp, #12
 8016404:	af00      	add	r7, sp, #0
 8016406:	6078      	str	r0, [r7, #4]
    positions_filled_(0), write_limit_(SIMPLE_STRING_BUFFER_LEN-1)
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801640e:	2200      	movs	r2, #0
 8016410:	601a      	str	r2, [r3, #0]
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016418:	3304      	adds	r3, #4
 801641a:	f640 72ff 	movw	r2, #4095	; 0xfff
 801641e:	601a      	str	r2, [r3, #0]
{
    buffer_[0] = '\0';
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	2200      	movs	r2, #0
 8016424:	701a      	strb	r2, [r3, #0]
}
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	4618      	mov	r0, r3
 801642a:	370c      	adds	r7, #12
 801642c:	46bd      	mov	sp, r7
 801642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016432:	4770      	bx	lr

08016434 <_ZN18SimpleStringBuffer5clearEv>:

void SimpleStringBuffer::clear()
{
 8016434:	b480      	push	{r7}
 8016436:	b083      	sub	sp, #12
 8016438:	af00      	add	r7, sp, #0
 801643a:	6078      	str	r0, [r7, #4]
    positions_filled_ = 0;
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016442:	2200      	movs	r2, #0
 8016444:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	2200      	movs	r2, #0
 801644a:	701a      	strb	r2, [r3, #0]
}
 801644c:	bf00      	nop
 801644e:	370c      	adds	r7, #12
 8016450:	46bd      	mov	sp, r7
 8016452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016456:	4770      	bx	lr

08016458 <_ZN18SimpleStringBuffer3addEPKcz>:

void SimpleStringBuffer::add(const char* format, ...)
{
 8016458:	b40e      	push	{r1, r2, r3}
 801645a:	b590      	push	{r4, r7, lr}
 801645c:	b086      	sub	sp, #24
 801645e:	af00      	add	r7, sp, #0
 8016460:	6078      	str	r0, [r7, #4]
    const size_t positions_left = write_limit_ - positions_filled_;
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016468:	3304      	adds	r3, #4
 801646a:	681a      	ldr	r2, [r3, #0]
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016472:	681b      	ldr	r3, [r3, #0]
 8016474:	1ad3      	subs	r3, r2, r3
 8016476:	617b      	str	r3, [r7, #20]
    if (positions_left == 0) return;
 8016478:	697b      	ldr	r3, [r7, #20]
 801647a:	2b00      	cmp	r3, #0
 801647c:	d032      	beq.n	80164e4 <_ZN18SimpleStringBuffer3addEPKcz+0x8c>

    va_list arguments;
    va_start(arguments, format);
 801647e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016482:	60fb      	str	r3, [r7, #12]
    const int count = PlatformSpecificVSNprintf(buffer_ + positions_filled_, positions_left+1, format, arguments);
 8016484:	4b1b      	ldr	r3, [pc, #108]	; (80164f4 <_ZN18SimpleStringBuffer3addEPKcz+0x9c>)
 8016486:	681c      	ldr	r4, [r3, #0]
 8016488:	687a      	ldr	r2, [r7, #4]
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	18d0      	adds	r0, r2, r3
 8016494:	697b      	ldr	r3, [r7, #20]
 8016496:	1c59      	adds	r1, r3, #1
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801649c:	47a0      	blx	r4
 801649e:	6138      	str	r0, [r7, #16]
    if (count > 0) positions_filled_ += (size_t) count;
 80164a0:	693b      	ldr	r3, [r7, #16]
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	dd09      	ble.n	80164ba <_ZN18SimpleStringBuffer3addEPKcz+0x62>
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80164ac:	681a      	ldr	r2, [r3, #0]
 80164ae:	693b      	ldr	r3, [r7, #16]
 80164b0:	441a      	add	r2, r3
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80164b8:	601a      	str	r2, [r3, #0]
    if (positions_filled_ > write_limit_) positions_filled_ = write_limit_;
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80164c0:	681a      	ldr	r2, [r3, #0]
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80164c8:	3304      	adds	r3, #4
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	429a      	cmp	r2, r3
 80164ce:	d90a      	bls.n	80164e6 <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80164d6:	3304      	adds	r3, #4
 80164d8:	681a      	ldr	r2, [r3, #0]
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80164e0:	601a      	str	r2, [r3, #0]
 80164e2:	e000      	b.n	80164e6 <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
    if (positions_left == 0) return;
 80164e4:	bf00      	nop
    va_end(arguments);
}
 80164e6:	3718      	adds	r7, #24
 80164e8:	46bd      	mov	sp, r7
 80164ea:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80164ee:	b003      	add	sp, #12
 80164f0:	4770      	bx	lr
 80164f2:	bf00      	nop
 80164f4:	200000b0 	.word	0x200000b0

080164f8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>:

void SimpleStringBuffer::addMemoryDump(const void* memory, size_t memorySize)
{
 80164f8:	b580      	push	{r7, lr}
 80164fa:	b08c      	sub	sp, #48	; 0x30
 80164fc:	af00      	add	r7, sp, #0
 80164fe:	60f8      	str	r0, [r7, #12]
 8016500:	60b9      	str	r1, [r7, #8]
 8016502:	607a      	str	r2, [r7, #4]
    const unsigned char* byteMemory = (const unsigned char*)memory;
 8016504:	68bb      	ldr	r3, [r7, #8]
 8016506:	61fb      	str	r3, [r7, #28]
    const size_t maxLineBytes = 16;
 8016508:	2310      	movs	r3, #16
 801650a:	61bb      	str	r3, [r7, #24]
    size_t currentPos = 0;
 801650c:	2300      	movs	r3, #0
 801650e:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t p;

    while (currentPos < memorySize) {
 8016510:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	429a      	cmp	r2, r3
 8016516:	d273      	bcs.n	8016600 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x108>
        add("    %04lx: ", (unsigned long) currentPos);
 8016518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801651a:	493b      	ldr	r1, [pc, #236]	; (8016608 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x110>)
 801651c:	68f8      	ldr	r0, [r7, #12]
 801651e:	f7ff ff9b 	bl	8016458 <_ZN18SimpleStringBuffer3addEPKcz>
        size_t bytesInLine = memorySize - currentPos;
 8016522:	687a      	ldr	r2, [r7, #4]
 8016524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016526:	1ad3      	subs	r3, r2, r3
 8016528:	627b      	str	r3, [r7, #36]	; 0x24
        if (bytesInLine > maxLineBytes) {
 801652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801652c:	2b10      	cmp	r3, #16
 801652e:	d901      	bls.n	8016534 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x3c>
            bytesInLine = maxLineBytes;
 8016530:	2310      	movs	r3, #16
 8016532:	627b      	str	r3, [r7, #36]	; 0x24
        }
        const size_t leftoverBytes = maxLineBytes - bytesInLine;
 8016534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016536:	f1c3 0310 	rsb	r3, r3, #16
 801653a:	617b      	str	r3, [r7, #20]

        for (p = 0; p < bytesInLine; p++) {
 801653c:	2300      	movs	r3, #0
 801653e:	62bb      	str	r3, [r7, #40]	; 0x28
 8016540:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016544:	429a      	cmp	r2, r3
 8016546:	d215      	bcs.n	8016574 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x7c>
            add("%02hx ", (unsigned short) byteMemory[currentPos + p]);
 8016548:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801654a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801654c:	4413      	add	r3, r2
 801654e:	69fa      	ldr	r2, [r7, #28]
 8016550:	4413      	add	r3, r2
 8016552:	781b      	ldrb	r3, [r3, #0]
 8016554:	461a      	mov	r2, r3
 8016556:	492d      	ldr	r1, [pc, #180]	; (801660c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x114>)
 8016558:	68f8      	ldr	r0, [r7, #12]
 801655a:	f7ff ff7d 	bl	8016458 <_ZN18SimpleStringBuffer3addEPKcz>
            if (p == ((maxLineBytes / 2) - 1)) {
 801655e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016560:	2b07      	cmp	r3, #7
 8016562:	d103      	bne.n	801656c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x74>
                add(" ");
 8016564:	492a      	ldr	r1, [pc, #168]	; (8016610 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8016566:	68f8      	ldr	r0, [r7, #12]
 8016568:	f7ff ff76 	bl	8016458 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 801656c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801656e:	3301      	adds	r3, #1
 8016570:	62bb      	str	r3, [r7, #40]	; 0x28
 8016572:	e7e5      	b.n	8016540 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x48>
            }
        }
        for (p = 0; p < leftoverBytes; p++) {
 8016574:	2300      	movs	r3, #0
 8016576:	62bb      	str	r3, [r7, #40]	; 0x28
 8016578:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801657a:	697b      	ldr	r3, [r7, #20]
 801657c:	429a      	cmp	r2, r3
 801657e:	d207      	bcs.n	8016590 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x98>
            add("   ");
 8016580:	4924      	ldr	r1, [pc, #144]	; (8016614 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x11c>)
 8016582:	68f8      	ldr	r0, [r7, #12]
 8016584:	f7ff ff68 	bl	8016458 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < leftoverBytes; p++) {
 8016588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801658a:	3301      	adds	r3, #1
 801658c:	62bb      	str	r3, [r7, #40]	; 0x28
 801658e:	e7f3      	b.n	8016578 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x80>
        }
        if (leftoverBytes > (maxLineBytes/2)) {
 8016590:	697b      	ldr	r3, [r7, #20]
 8016592:	2b08      	cmp	r3, #8
 8016594:	d903      	bls.n	801659e <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xa6>
            add(" ");
 8016596:	491e      	ldr	r1, [pc, #120]	; (8016610 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8016598:	68f8      	ldr	r0, [r7, #12]
 801659a:	f7ff ff5d 	bl	8016458 <_ZN18SimpleStringBuffer3addEPKcz>
        }

        add("|");
 801659e:	491e      	ldr	r1, [pc, #120]	; (8016618 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x120>)
 80165a0:	68f8      	ldr	r0, [r7, #12]
 80165a2:	f7ff ff59 	bl	8016458 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 80165a6:	2300      	movs	r3, #0
 80165a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80165aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80165ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165ae:	429a      	cmp	r2, r3
 80165b0:	d21d      	bcs.n	80165ee <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xf6>
            char toAdd = (char)byteMemory[currentPos + p];
 80165b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80165b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165b6:	4413      	add	r3, r2
 80165b8:	69fa      	ldr	r2, [r7, #28]
 80165ba:	4413      	add	r3, r2
 80165bc:	781b      	ldrb	r3, [r3, #0]
 80165be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (toAdd < ' ' || toAdd > '~') {
 80165c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80165c6:	2b1f      	cmp	r3, #31
 80165c8:	d903      	bls.n	80165d2 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xda>
 80165ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80165ce:	2b7e      	cmp	r3, #126	; 0x7e
 80165d0:	d902      	bls.n	80165d8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xe0>
                toAdd = '.';
 80165d2:	232e      	movs	r3, #46	; 0x2e
 80165d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
            add("%c", (int)toAdd);
 80165d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80165dc:	461a      	mov	r2, r3
 80165de:	490f      	ldr	r1, [pc, #60]	; (801661c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x124>)
 80165e0:	68f8      	ldr	r0, [r7, #12]
 80165e2:	f7ff ff39 	bl	8016458 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 80165e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165e8:	3301      	adds	r3, #1
 80165ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80165ec:	e7dd      	b.n	80165aa <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xb2>
        }
        add("|\n");
 80165ee:	490c      	ldr	r1, [pc, #48]	; (8016620 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x128>)
 80165f0:	68f8      	ldr	r0, [r7, #12]
 80165f2:	f7ff ff31 	bl	8016458 <_ZN18SimpleStringBuffer3addEPKcz>
        currentPos += bytesInLine;
 80165f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80165f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165fa:	4413      	add	r3, r2
 80165fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (currentPos < memorySize) {
 80165fe:	e787      	b.n	8016510 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x18>
    }
}
 8016600:	bf00      	nop
 8016602:	3730      	adds	r7, #48	; 0x30
 8016604:	46bd      	mov	sp, r7
 8016606:	bd80      	pop	{r7, pc}
 8016608:	08025c58 	.word	0x08025c58
 801660c:	08025c64 	.word	0x08025c64
 8016610:	08025c6c 	.word	0x08025c6c
 8016614:	08025c70 	.word	0x08025c70
 8016618:	08025c74 	.word	0x08025c74
 801661c:	08025c78 	.word	0x08025c78
 8016620:	08025c7c 	.word	0x08025c7c

08016624 <_ZN18SimpleStringBuffer8toStringEv>:

char* SimpleStringBuffer::toString()
{
 8016624:	b480      	push	{r7}
 8016626:	b083      	sub	sp, #12
 8016628:	af00      	add	r7, sp, #0
 801662a:	6078      	str	r0, [r7, #4]
    return buffer_;
 801662c:	687b      	ldr	r3, [r7, #4]
}
 801662e:	4618      	mov	r0, r3
 8016630:	370c      	adds	r7, #12
 8016632:	46bd      	mov	sp, r7
 8016634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016638:	4770      	bx	lr

0801663a <_ZN18SimpleStringBuffer13setWriteLimitEj>:

void SimpleStringBuffer::setWriteLimit(size_t write_limit)
{
 801663a:	b480      	push	{r7}
 801663c:	b083      	sub	sp, #12
 801663e:	af00      	add	r7, sp, #0
 8016640:	6078      	str	r0, [r7, #4]
 8016642:	6039      	str	r1, [r7, #0]
    write_limit_ = write_limit;
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801664a:	3304      	adds	r3, #4
 801664c:	683a      	ldr	r2, [r7, #0]
 801664e:	601a      	str	r2, [r3, #0]
    if (write_limit_ > SIMPLE_STRING_BUFFER_LEN-1)
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016656:	3304      	adds	r3, #4
 8016658:	681b      	ldr	r3, [r3, #0]
 801665a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801665e:	d306      	bcc.n	801666e <_ZN18SimpleStringBuffer13setWriteLimitEj+0x34>
        write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016666:	3304      	adds	r3, #4
 8016668:	f640 72ff 	movw	r2, #4095	; 0xfff
 801666c:	601a      	str	r2, [r3, #0]
}
 801666e:	bf00      	nop
 8016670:	370c      	adds	r7, #12
 8016672:	46bd      	mov	sp, r7
 8016674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016678:	4770      	bx	lr

0801667a <_ZN18SimpleStringBuffer15resetWriteLimitEv>:
void SimpleStringBuffer::resetWriteLimit()
{
 801667a:	b480      	push	{r7}
 801667c:	b083      	sub	sp, #12
 801667e:	af00      	add	r7, sp, #0
 8016680:	6078      	str	r0, [r7, #4]
    write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016688:	3304      	adds	r3, #4
 801668a:	f640 72ff 	movw	r2, #4095	; 0xfff
 801668e:	601a      	str	r2, [r3, #0]
}
 8016690:	bf00      	nop
 8016692:	370c      	adds	r7, #12
 8016694:	46bd      	mov	sp, r7
 8016696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801669a:	4770      	bx	lr

0801669c <_ZN18SimpleStringBuffer18reachedItsCapacityEv>:

bool SimpleStringBuffer::reachedItsCapacity()
{
 801669c:	b480      	push	{r7}
 801669e:	b083      	sub	sp, #12
 80166a0:	af00      	add	r7, sp, #0
 80166a2:	6078      	str	r0, [r7, #4]
    return positions_filled_ >= write_limit_;
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80166aa:	681a      	ldr	r2, [r3, #0]
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80166b2:	3304      	adds	r3, #4
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	429a      	cmp	r2, r3
 80166b8:	bf2c      	ite	cs
 80166ba:	2301      	movcs	r3, #1
 80166bc:	2300      	movcc	r3, #0
 80166be:	b2db      	uxtb	r3, r3
}
 80166c0:	4618      	mov	r0, r3
 80166c2:	370c      	adds	r7, #12
 80166c4:	46bd      	mov	sp, r7
 80166c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ca:	4770      	bx	lr

080166cc <_ZN28MemoryLeakOutputStringBufferC1Ev>:
#define MEM_LEAK_ADDITION_MALLOC_WARNING "NOTE:\n" \
                                         "\tMemory leak reports about malloc and free can be caused by allocating using the cpputest version of malloc,\n" \
                                         "\tbut deallocate using the standard free.\n" \
                                         "\tIf this is the case, check whether your malloc/free replacements are working (#define malloc cpputest_malloc etc).\n"

MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
 80166cc:	b580      	push	{r7, lr}
 80166ce:	b082      	sub	sp, #8
 80166d0:	af00      	add	r7, sp, #0
 80166d2:	6078      	str	r0, [r7, #4]
    : total_leaks_(0), giveWarningOnUsingMalloc_(false)
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	2200      	movs	r2, #0
 80166d8:	601a      	str	r2, [r3, #0]
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	2200      	movs	r2, #0
 80166de:	711a      	strb	r2, [r3, #4]
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	3308      	adds	r3, #8
 80166e4:	4618      	mov	r0, r3
 80166e6:	f7ff fe8b 	bl	8016400 <_ZN18SimpleStringBufferC1Ev>
{
}
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	4618      	mov	r0, r3
 80166ee:	3708      	adds	r7, #8
 80166f0:	46bd      	mov	sp, r7
 80166f2:	bd80      	pop	{r7, pc}

080166f4 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addAllocationLocation(const char* allocationFile, size_t allocationLineNumber, size_t allocationSize, TestMemoryAllocator* allocator)
{
 80166f4:	b5b0      	push	{r4, r5, r7, lr}
 80166f6:	b086      	sub	sp, #24
 80166f8:	af02      	add	r7, sp, #8
 80166fa:	60f8      	str	r0, [r7, #12]
 80166fc:	60b9      	str	r1, [r7, #8]
 80166fe:	607a      	str	r2, [r7, #4]
 8016700:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   allocated at file: %s line: %d size: %lu type: %s\n", allocationFile, (int) allocationLineNumber, (unsigned long) allocationSize, allocator->alloc_name());
 8016702:	68fb      	ldr	r3, [r7, #12]
 8016704:	f103 0408 	add.w	r4, r3, #8
 8016708:	687d      	ldr	r5, [r7, #4]
 801670a:	6a3b      	ldr	r3, [r7, #32]
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	3314      	adds	r3, #20
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	6a38      	ldr	r0, [r7, #32]
 8016714:	4798      	blx	r3
 8016716:	4603      	mov	r3, r0
 8016718:	9301      	str	r3, [sp, #4]
 801671a:	683b      	ldr	r3, [r7, #0]
 801671c:	9300      	str	r3, [sp, #0]
 801671e:	462b      	mov	r3, r5
 8016720:	68ba      	ldr	r2, [r7, #8]
 8016722:	4904      	ldr	r1, [pc, #16]	; (8016734 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator+0x40>)
 8016724:	4620      	mov	r0, r4
 8016726:	f7ff fe97 	bl	8016458 <_ZN18SimpleStringBuffer3addEPKcz>
}
 801672a:	bf00      	nop
 801672c:	3710      	adds	r7, #16
 801672e:	46bd      	mov	sp, r7
 8016730:	bdb0      	pop	{r4, r5, r7, pc}
 8016732:	bf00      	nop
 8016734:	08025c80 	.word	0x08025c80

08016738 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addDeallocationLocation(const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* allocator)
{
 8016738:	b5b0      	push	{r4, r5, r7, lr}
 801673a:	b086      	sub	sp, #24
 801673c:	af02      	add	r7, sp, #8
 801673e:	60f8      	str	r0, [r7, #12]
 8016740:	60b9      	str	r1, [r7, #8]
 8016742:	607a      	str	r2, [r7, #4]
 8016744:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   deallocated at file: %s line: %d type: %s\n", freeFile, (int) freeLineNumber, allocator->free_name());
 8016746:	68fb      	ldr	r3, [r7, #12]
 8016748:	f103 0408 	add.w	r4, r3, #8
 801674c:	687d      	ldr	r5, [r7, #4]
 801674e:	683b      	ldr	r3, [r7, #0]
 8016750:	681b      	ldr	r3, [r3, #0]
 8016752:	3318      	adds	r3, #24
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	6838      	ldr	r0, [r7, #0]
 8016758:	4798      	blx	r3
 801675a:	4603      	mov	r3, r0
 801675c:	9300      	str	r3, [sp, #0]
 801675e:	462b      	mov	r3, r5
 8016760:	68ba      	ldr	r2, [r7, #8]
 8016762:	4904      	ldr	r1, [pc, #16]	; (8016774 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator+0x3c>)
 8016764:	4620      	mov	r0, r4
 8016766:	f7ff fe77 	bl	8016458 <_ZN18SimpleStringBuffer3addEPKcz>
}
 801676a:	bf00      	nop
 801676c:	3710      	adds	r7, #16
 801676e:	46bd      	mov	sp, r7
 8016770:	bdb0      	pop	{r4, r5, r7, pc}
 8016772:	bf00      	nop
 8016774:	08025cb8 	.word	0x08025cb8

08016778 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>:

void MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
{
 8016778:	b580      	push	{r7, lr}
 801677a:	b082      	sub	sp, #8
 801677c:	af00      	add	r7, sp, #0
 801677e:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("No memory leaks were detected.");
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	3308      	adds	r3, #8
 8016784:	4903      	ldr	r1, [pc, #12]	; (8016794 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv+0x1c>)
 8016786:	4618      	mov	r0, r3
 8016788:	f7ff fe66 	bl	8016458 <_ZN18SimpleStringBuffer3addEPKcz>
}
 801678c:	bf00      	nop
 801678e:	3708      	adds	r7, #8
 8016790:	46bd      	mov	sp, r7
 8016792:	bd80      	pop	{r7, pc}
 8016794:	08025ce8 	.word	0x08025ce8

08016798 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
{
 8016798:	b580      	push	{r7, lr}
 801679a:	b084      	sub	sp, #16
 801679c:	af00      	add	r7, sp, #0
 801679e:	6078      	str	r0, [r7, #4]
    giveWarningOnUsingMalloc_ = false;
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	2200      	movs	r2, #0
 80167a4:	711a      	strb	r2, [r3, #4]
    total_leaks_ = 0;
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	2200      	movs	r2, #0
 80167aa:	601a      	str	r2, [r3, #0]

    size_t memory_leak_normal_footer_size = sizeof(MEM_LEAK_FOOTER) + 10 + sizeof(MEM_LEAK_TOO_MUCH); /* the number of leaks */
 80167ac:	2367      	movs	r3, #103	; 0x67
 80167ae:	60fb      	str	r3, [r7, #12]
    size_t memory_leak_foot_size_with_malloc_warning = memory_leak_normal_footer_size + sizeof(MEM_LEAK_ADDITION_MALLOC_WARNING);
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	f203 1311 	addw	r3, r3, #273	; 0x111
 80167b6:	60bb      	str	r3, [r7, #8]

    outputBuffer_.setWriteLimit(SimpleStringBuffer::SIMPLE_STRING_BUFFER_LEN - memory_leak_foot_size_with_malloc_warning);
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	f103 0208 	add.w	r2, r3, #8
 80167be:	68bb      	ldr	r3, [r7, #8]
 80167c0:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80167c4:	4619      	mov	r1, r3
 80167c6:	4610      	mov	r0, r2
 80167c8:	f7ff ff37 	bl	801663a <_ZN18SimpleStringBuffer13setWriteLimitEj>
}
 80167cc:	bf00      	nop
 80167ce:	3710      	adds	r7, #16
 80167d0:	46bd      	mov	sp, r7
 80167d2:	bd80      	pop	{r7, pc}

080167d4 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>:

void MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode* leak)
{
 80167d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80167d6:	b089      	sub	sp, #36	; 0x24
 80167d8:	af04      	add	r7, sp, #16
 80167da:	60f8      	str	r0, [r7, #12]
 80167dc:	60b9      	str	r1, [r7, #8]
    if (total_leaks_ == 0) {
 80167de:	68fb      	ldr	r3, [r7, #12]
 80167e0:	681b      	ldr	r3, [r3, #0]
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d102      	bne.n	80167ec <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0x18>
        addMemoryLeakHeader();
 80167e6:	68f8      	ldr	r0, [r7, #12]
 80167e8:	f000 f882 	bl	80168f0 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>
    }

    total_leaks_++;
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	1c5a      	adds	r2, r3, #1
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	601a      	str	r2, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80167f6:	68fb      	ldr	r3, [r7, #12]
 80167f8:	f103 0508 	add.w	r5, r3, #8
 80167fc:	68bb      	ldr	r3, [r7, #8]
 80167fe:	685e      	ldr	r6, [r3, #4]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8016800:	68bb      	ldr	r3, [r7, #8]
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	607b      	str	r3, [r7, #4]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8016806:	68bb      	ldr	r3, [r7, #8]
 8016808:	68dc      	ldr	r4, [r3, #12]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 801680a:	68bb      	ldr	r3, [r7, #8]
 801680c:	691b      	ldr	r3, [r3, #16]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 801680e:	603b      	str	r3, [r7, #0]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8016810:	68bb      	ldr	r3, [r7, #8]
 8016812:	695a      	ldr	r2, [r3, #20]
 8016814:	68bb      	ldr	r3, [r7, #8]
 8016816:	695b      	ldr	r3, [r3, #20]
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	3314      	adds	r3, #20
 801681c:	681b      	ldr	r3, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 801681e:	4610      	mov	r0, r2
 8016820:	4798      	blx	r3
 8016822:	4602      	mov	r2, r0
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8016824:	68bb      	ldr	r3, [r7, #8]
 8016826:	689b      	ldr	r3, [r3, #8]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8016828:	9303      	str	r3, [sp, #12]
 801682a:	9202      	str	r2, [sp, #8]
 801682c:	683a      	ldr	r2, [r7, #0]
 801682e:	9201      	str	r2, [sp, #4]
 8016830:	9400      	str	r4, [sp, #0]
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	4632      	mov	r2, r6
 8016836:	4915      	ldr	r1, [pc, #84]	; (801688c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb8>)
 8016838:	4628      	mov	r0, r5
 801683a:	f7ff fe0d 	bl	8016458 <_ZN18SimpleStringBuffer3addEPKcz>
    outputBuffer_.addMemoryDump(leak->memory_, leak->size_);
 801683e:	68fb      	ldr	r3, [r7, #12]
 8016840:	f103 0008 	add.w	r0, r3, #8
 8016844:	68bb      	ldr	r3, [r7, #8]
 8016846:	6899      	ldr	r1, [r3, #8]
 8016848:	68bb      	ldr	r3, [r7, #8]
 801684a:	681b      	ldr	r3, [r3, #0]
 801684c:	461a      	mov	r2, r3
 801684e:	f7ff fe53 	bl	80164f8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>

    if (SimpleString::StrCmp(leak->allocator_->alloc_name(), (const char*) "malloc") == 0)
 8016852:	68bb      	ldr	r3, [r7, #8]
 8016854:	695a      	ldr	r2, [r3, #20]
 8016856:	68bb      	ldr	r3, [r7, #8]
 8016858:	695b      	ldr	r3, [r3, #20]
 801685a:	681b      	ldr	r3, [r3, #0]
 801685c:	3314      	adds	r3, #20
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	4610      	mov	r0, r2
 8016862:	4798      	blx	r3
 8016864:	4603      	mov	r3, r0
 8016866:	490a      	ldr	r1, [pc, #40]	; (8016890 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xbc>)
 8016868:	4618      	mov	r0, r3
 801686a:	f7f6 f887 	bl	800c97c <_ZN12SimpleString6StrCmpEPKcS1_>
 801686e:	4603      	mov	r3, r0
 8016870:	2b00      	cmp	r3, #0
 8016872:	bf0c      	ite	eq
 8016874:	2301      	moveq	r3, #1
 8016876:	2300      	movne	r3, #0
 8016878:	b2db      	uxtb	r3, r3
 801687a:	2b00      	cmp	r3, #0
 801687c:	d002      	beq.n	8016884 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb0>
        giveWarningOnUsingMalloc_ = true;
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	2201      	movs	r2, #1
 8016882:	711a      	strb	r2, [r3, #4]
}
 8016884:	bf00      	nop
 8016886:	3714      	adds	r7, #20
 8016888:	46bd      	mov	sp, r7
 801688a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801688c:	08025d08 	.word	0x08025d08
 8016890:	08025d68 	.word	0x08025d68

08016894 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
{
 8016894:	b580      	push	{r7, lr}
 8016896:	b084      	sub	sp, #16
 8016898:	af00      	add	r7, sp, #0
 801689a:	6078      	str	r0, [r7, #4]
    if (total_leaks_ == 0) {
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	681b      	ldr	r3, [r3, #0]
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d103      	bne.n	80168ac <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x18>
        addNoMemoryLeaksMessage();
 80168a4:	6878      	ldr	r0, [r7, #4]
 80168a6:	f7ff ff67 	bl	8016778 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>
        return;
 80168aa:	e01e      	b.n	80168ea <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
    }

    bool buffer_reached_its_capacity = outputBuffer_.reachedItsCapacity();
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	3308      	adds	r3, #8
 80168b0:	4618      	mov	r0, r3
 80168b2:	f7ff fef3 	bl	801669c <_ZN18SimpleStringBuffer18reachedItsCapacityEv>
 80168b6:	4603      	mov	r3, r0
 80168b8:	73fb      	strb	r3, [r7, #15]
    outputBuffer_.resetWriteLimit();
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	3308      	adds	r3, #8
 80168be:	4618      	mov	r0, r3
 80168c0:	f7ff fedb 	bl	801667a <_ZN18SimpleStringBuffer15resetWriteLimitEv>

    if (buffer_reached_its_capacity)
 80168c4:	7bfb      	ldrb	r3, [r7, #15]
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d002      	beq.n	80168d0 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x3c>
        addErrorMessageForTooMuchLeaks();
 80168ca:	6878      	ldr	r0, [r7, #4]
 80168cc:	f000 f820 	bl	8016910 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>

    addMemoryLeakFooter(total_leaks_);
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	681b      	ldr	r3, [r3, #0]
 80168d4:	4619      	mov	r1, r3
 80168d6:	6878      	ldr	r0, [r7, #4]
 80168d8:	f000 f82a 	bl	8016930 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>

    if (giveWarningOnUsingMalloc_)
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	791b      	ldrb	r3, [r3, #4]
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d002      	beq.n	80168ea <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
        addWarningForUsingMalloc();
 80168e4:	6878      	ldr	r0, [r7, #4]
 80168e6:	f000 f839 	bl	801695c <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>

}
 80168ea:	3710      	adds	r7, #16
 80168ec:	46bd      	mov	sp, r7
 80168ee:	bd80      	pop	{r7, pc}

080168f0 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>:

void MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	b082      	sub	sp, #8
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("Memory leak(s) found.\n");
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	3308      	adds	r3, #8
 80168fc:	4903      	ldr	r1, [pc, #12]	; (801690c <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv+0x1c>)
 80168fe:	4618      	mov	r0, r3
 8016900:	f7ff fdaa 	bl	8016458 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8016904:	bf00      	nop
 8016906:	3708      	adds	r7, #8
 8016908:	46bd      	mov	sp, r7
 801690a:	bd80      	pop	{r7, pc}
 801690c:	08025d70 	.word	0x08025d70

08016910 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>:

void MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
{
 8016910:	b580      	push	{r7, lr}
 8016912:	b082      	sub	sp, #8
 8016914:	af00      	add	r7, sp, #0
 8016916:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_TOO_MUCH);
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	3308      	adds	r3, #8
 801691c:	4903      	ldr	r1, [pc, #12]	; (801692c <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv+0x1c>)
 801691e:	4618      	mov	r0, r3
 8016920:	f7ff fd9a 	bl	8016458 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8016924:	bf00      	nop
 8016926:	3708      	adds	r7, #8
 8016928:	46bd      	mov	sp, r7
 801692a:	bd80      	pop	{r7, pc}
 801692c:	08025d88 	.word	0x08025d88

08016930 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>:

void MemoryLeakOutputStringBuffer::addMemoryLeakFooter(size_t amountOfLeaks)
{
 8016930:	b580      	push	{r7, lr}
 8016932:	b082      	sub	sp, #8
 8016934:	af00      	add	r7, sp, #0
 8016936:	6078      	str	r0, [r7, #4]
 8016938:	6039      	str	r1, [r7, #0]
    outputBuffer_.add("%s %d\n", MEM_LEAK_FOOTER, (int) amountOfLeaks);
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	f103 0008 	add.w	r0, r3, #8
 8016940:	683b      	ldr	r3, [r7, #0]
 8016942:	4a04      	ldr	r2, [pc, #16]	; (8016954 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x24>)
 8016944:	4904      	ldr	r1, [pc, #16]	; (8016958 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x28>)
 8016946:	f7ff fd87 	bl	8016458 <_ZN18SimpleStringBuffer3addEPKcz>
}
 801694a:	bf00      	nop
 801694c:	3708      	adds	r7, #8
 801694e:	46bd      	mov	sp, r7
 8016950:	bd80      	pop	{r7, pc}
 8016952:	bf00      	nop
 8016954:	08025dd0 	.word	0x08025dd0
 8016958:	08025de8 	.word	0x08025de8

0801695c <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>:

void MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
{
 801695c:	b580      	push	{r7, lr}
 801695e:	b082      	sub	sp, #8
 8016960:	af00      	add	r7, sp, #0
 8016962:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	3308      	adds	r3, #8
 8016968:	4903      	ldr	r1, [pc, #12]	; (8016978 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv+0x1c>)
 801696a:	4618      	mov	r0, r3
 801696c:	f7ff fd74 	bl	8016458 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8016970:	bf00      	nop
 8016972:	3708      	adds	r7, #8
 8016974:	46bd      	mov	sp, r7
 8016976:	bd80      	pop	{r7, pc}
 8016978:	08025df0 	.word	0x08025df0

0801697c <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char* freeFile, size_t freeLine, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 801697c:	b580      	push	{r7, lr}
 801697e:	b08a      	sub	sp, #40	; 0x28
 8016980:	af06      	add	r7, sp, #24
 8016982:	60f8      	str	r0, [r7, #12]
 8016984:	60b9      	str	r1, [r7, #8]
 8016986:	607a      	str	r2, [r7, #4]
 8016988:	603b      	str	r3, [r7, #0]
    reportFailure("Deallocating non-allocated memory\n", "<unknown>", 0, 0, NullUnknownAllocator::defaultAllocator(), freeFile, freeLine, freeAllocator, reporter);
 801698a:	f7f9 fe8d 	bl	80106a8 <_ZN20NullUnknownAllocator16defaultAllocatorEv>
 801698e:	4602      	mov	r2, r0
 8016990:	69bb      	ldr	r3, [r7, #24]
 8016992:	9305      	str	r3, [sp, #20]
 8016994:	683b      	ldr	r3, [r7, #0]
 8016996:	9304      	str	r3, [sp, #16]
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	9303      	str	r3, [sp, #12]
 801699c:	68bb      	ldr	r3, [r7, #8]
 801699e:	9302      	str	r3, [sp, #8]
 80169a0:	9201      	str	r2, [sp, #4]
 80169a2:	2300      	movs	r3, #0
 80169a4:	9300      	str	r3, [sp, #0]
 80169a6:	2300      	movs	r3, #0
 80169a8:	4a04      	ldr	r2, [pc, #16]	; (80169bc <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x40>)
 80169aa:	4905      	ldr	r1, [pc, #20]	; (80169c0 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x44>)
 80169ac:	68f8      	ldr	r0, [r7, #12]
 80169ae:	f000 f855 	bl	8016a5c <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 80169b2:	bf00      	nop
 80169b4:	3710      	adds	r7, #16
 80169b6:	46bd      	mov	sp, r7
 80169b8:	bd80      	pop	{r7, pc}
 80169ba:	bf00      	nop
 80169bc:	08025c4c 	.word	0x08025c4c
 80169c0:	08025f04 	.word	0x08025f04

080169c4 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 80169c4:	b590      	push	{r4, r7, lr}
 80169c6:	b08b      	sub	sp, #44	; 0x2c
 80169c8:	af06      	add	r7, sp, #24
 80169ca:	60f8      	str	r0, [r7, #12]
 80169cc:	60b9      	str	r1, [r7, #8]
 80169ce:	607a      	str	r2, [r7, #4]
 80169d0:	603b      	str	r3, [r7, #0]
    reportFailure("Allocation/deallocation type mismatch\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 80169d2:	68bb      	ldr	r3, [r7, #8]
 80169d4:	68d8      	ldr	r0, [r3, #12]
 80169d6:	68bb      	ldr	r3, [r7, #8]
 80169d8:	691c      	ldr	r4, [r3, #16]
 80169da:	68bb      	ldr	r3, [r7, #8]
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	68ba      	ldr	r2, [r7, #8]
 80169e0:	6952      	ldr	r2, [r2, #20]
 80169e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80169e4:	9105      	str	r1, [sp, #20]
 80169e6:	6a39      	ldr	r1, [r7, #32]
 80169e8:	9104      	str	r1, [sp, #16]
 80169ea:	6839      	ldr	r1, [r7, #0]
 80169ec:	9103      	str	r1, [sp, #12]
 80169ee:	6879      	ldr	r1, [r7, #4]
 80169f0:	9102      	str	r1, [sp, #8]
 80169f2:	9201      	str	r2, [sp, #4]
 80169f4:	9300      	str	r3, [sp, #0]
 80169f6:	4623      	mov	r3, r4
 80169f8:	4602      	mov	r2, r0
 80169fa:	4904      	ldr	r1, [pc, #16]	; (8016a0c <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 80169fc:	68f8      	ldr	r0, [r7, #12]
 80169fe:	f000 f82d 	bl	8016a5c <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8016a02:	bf00      	nop
 8016a04:	3714      	adds	r7, #20
 8016a06:	46bd      	mov	sp, r7
 8016a08:	bd90      	pop	{r4, r7, pc}
 8016a0a:	bf00      	nop
 8016a0c:	08025f28 	.word	0x08025f28

08016a10 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8016a10:	b590      	push	{r4, r7, lr}
 8016a12:	b08b      	sub	sp, #44	; 0x2c
 8016a14:	af06      	add	r7, sp, #24
 8016a16:	60f8      	str	r0, [r7, #12]
 8016a18:	60b9      	str	r1, [r7, #8]
 8016a1a:	607a      	str	r2, [r7, #4]
 8016a1c:	603b      	str	r3, [r7, #0]
        reportFailure("Memory corruption (written out of bounds?)\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8016a1e:	68bb      	ldr	r3, [r7, #8]
 8016a20:	68d8      	ldr	r0, [r3, #12]
 8016a22:	68bb      	ldr	r3, [r7, #8]
 8016a24:	691c      	ldr	r4, [r3, #16]
 8016a26:	68bb      	ldr	r3, [r7, #8]
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	68ba      	ldr	r2, [r7, #8]
 8016a2c:	6952      	ldr	r2, [r2, #20]
 8016a2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016a30:	9105      	str	r1, [sp, #20]
 8016a32:	6a39      	ldr	r1, [r7, #32]
 8016a34:	9104      	str	r1, [sp, #16]
 8016a36:	6839      	ldr	r1, [r7, #0]
 8016a38:	9103      	str	r1, [sp, #12]
 8016a3a:	6879      	ldr	r1, [r7, #4]
 8016a3c:	9102      	str	r1, [sp, #8]
 8016a3e:	9201      	str	r2, [sp, #4]
 8016a40:	9300      	str	r3, [sp, #0]
 8016a42:	4623      	mov	r3, r4
 8016a44:	4602      	mov	r2, r0
 8016a46:	4904      	ldr	r1, [pc, #16]	; (8016a58 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8016a48:	68f8      	ldr	r0, [r7, #12]
 8016a4a:	f000 f807 	bl	8016a5c <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8016a4e:	bf00      	nop
 8016a50:	3714      	adds	r7, #20
 8016a52:	46bd      	mov	sp, r7
 8016a54:	bd90      	pop	{r4, r7, pc}
 8016a56:	bf00      	nop
 8016a58:	08025f50 	.word	0x08025f50

08016a5c <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportFailure(const char* message, const char* allocFile, size_t allocLine, size_t allocSize, TestMemoryAllocator* allocAllocator, const char* freeFile, size_t freeLine,
        TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8016a5c:	b590      	push	{r4, r7, lr}
 8016a5e:	b087      	sub	sp, #28
 8016a60:	af02      	add	r7, sp, #8
 8016a62:	60f8      	str	r0, [r7, #12]
 8016a64:	60b9      	str	r1, [r7, #8]
 8016a66:	607a      	str	r2, [r7, #4]
 8016a68:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("%s", message);
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	3308      	adds	r3, #8
 8016a6e:	68ba      	ldr	r2, [r7, #8]
 8016a70:	4910      	ldr	r1, [pc, #64]	; (8016ab4 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure+0x58>)
 8016a72:	4618      	mov	r0, r3
 8016a74:	f7ff fcf0 	bl	8016458 <_ZN18SimpleStringBuffer3addEPKcz>
    addAllocationLocation(allocFile, allocLine, allocSize, allocAllocator);
 8016a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a7a:	9300      	str	r3, [sp, #0]
 8016a7c:	6a3b      	ldr	r3, [r7, #32]
 8016a7e:	683a      	ldr	r2, [r7, #0]
 8016a80:	6879      	ldr	r1, [r7, #4]
 8016a82:	68f8      	ldr	r0, [r7, #12]
 8016a84:	f7ff fe36 	bl	80166f4 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>
    addDeallocationLocation(freeFile, freeLine, freeAllocator);
 8016a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016a8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016a8e:	68f8      	ldr	r0, [r7, #12]
 8016a90:	f7ff fe52 	bl	8016738 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>
    reporter->fail(toString());
 8016a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a96:	681b      	ldr	r3, [r3, #0]
 8016a98:	3308      	adds	r3, #8
 8016a9a:	681c      	ldr	r4, [r3, #0]
 8016a9c:	68f8      	ldr	r0, [r7, #12]
 8016a9e:	f000 f80b 	bl	8016ab8 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8016aa2:	4603      	mov	r3, r0
 8016aa4:	4619      	mov	r1, r3
 8016aa6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016aa8:	47a0      	blx	r4
}
 8016aaa:	bf00      	nop
 8016aac:	3714      	adds	r7, #20
 8016aae:	46bd      	mov	sp, r7
 8016ab0:	bd90      	pop	{r4, r7, pc}
 8016ab2:	bf00      	nop
 8016ab4:	08025f7c 	.word	0x08025f7c

08016ab8 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>:


char* MemoryLeakOutputStringBuffer::toString()
{
 8016ab8:	b580      	push	{r7, lr}
 8016aba:	b082      	sub	sp, #8
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	6078      	str	r0, [r7, #4]
    return outputBuffer_.toString();
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	3308      	adds	r3, #8
 8016ac4:	4618      	mov	r0, r3
 8016ac6:	f7ff fdad 	bl	8016624 <_ZN18SimpleStringBuffer8toStringEv>
 8016aca:	4603      	mov	r3, r0
}
 8016acc:	4618      	mov	r0, r3
 8016ace:	3708      	adds	r7, #8
 8016ad0:	46bd      	mov	sp, r7
 8016ad2:	bd80      	pop	{r7, pc}

08016ad4 <_ZN28MemoryLeakOutputStringBuffer5clearEv>:

void MemoryLeakOutputStringBuffer::clear()
{
 8016ad4:	b580      	push	{r7, lr}
 8016ad6:	b082      	sub	sp, #8
 8016ad8:	af00      	add	r7, sp, #0
 8016ada:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	3308      	adds	r3, #8
 8016ae0:	4618      	mov	r0, r3
 8016ae2:	f7ff fca7 	bl	8016434 <_ZN18SimpleStringBuffer5clearEv>
}
 8016ae6:	bf00      	nop
 8016ae8:	3708      	adds	r7, #8
 8016aea:	46bd      	mov	sp, r7
 8016aec:	bd80      	pop	{r7, pc}

08016aee <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>:

////////////////////////

void MemoryLeakDetectorNode::init(char* memory, unsigned number, size_t size, TestMemoryAllocator* allocator, MemLeakPeriod period, unsigned char allocation_stage, const char* file, size_t line)
{
 8016aee:	b480      	push	{r7}
 8016af0:	b085      	sub	sp, #20
 8016af2:	af00      	add	r7, sp, #0
 8016af4:	60f8      	str	r0, [r7, #12]
 8016af6:	60b9      	str	r1, [r7, #8]
 8016af8:	607a      	str	r2, [r7, #4]
 8016afa:	603b      	str	r3, [r7, #0]
    number_ = number;
 8016afc:	68fb      	ldr	r3, [r7, #12]
 8016afe:	687a      	ldr	r2, [r7, #4]
 8016b00:	605a      	str	r2, [r3, #4]
    memory_ = memory;
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	68ba      	ldr	r2, [r7, #8]
 8016b06:	609a      	str	r2, [r3, #8]
    size_ = size;
 8016b08:	68fb      	ldr	r3, [r7, #12]
 8016b0a:	683a      	ldr	r2, [r7, #0]
 8016b0c:	601a      	str	r2, [r3, #0]
    allocator_ = allocator;
 8016b0e:	68fb      	ldr	r3, [r7, #12]
 8016b10:	69ba      	ldr	r2, [r7, #24]
 8016b12:	615a      	str	r2, [r3, #20]
    period_ = period;
 8016b14:	68fb      	ldr	r3, [r7, #12]
 8016b16:	7f3a      	ldrb	r2, [r7, #28]
 8016b18:	761a      	strb	r2, [r3, #24]
    allocation_stage_ = allocation_stage;
 8016b1a:	68fb      	ldr	r3, [r7, #12]
 8016b1c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8016b20:	765a      	strb	r2, [r3, #25]
    file_ = file;
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016b26:	60da      	str	r2, [r3, #12]
    line_ = line;
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016b2c:	611a      	str	r2, [r3, #16]
}
 8016b2e:	bf00      	nop
 8016b30:	3714      	adds	r7, #20
 8016b32:	46bd      	mov	sp, r7
 8016b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b38:	4770      	bx	lr

08016b3a <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>:

///////////////////////

bool MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8016b3a:	b480      	push	{r7}
 8016b3c:	b085      	sub	sp, #20
 8016b3e:	af00      	add	r7, sp, #0
 8016b40:	60f8      	str	r0, [r7, #12]
 8016b42:	60b9      	str	r1, [r7, #8]
 8016b44:	4613      	mov	r3, r2
 8016b46:	71fb      	strb	r3, [r7, #7]
    return period == mem_leak_period_all || node->period_ == period || (node->period_ != mem_leak_period_disabled && period == mem_leak_period_enabled);
 8016b48:	79fb      	ldrb	r3, [r7, #7]
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d00b      	beq.n	8016b66 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 8016b4e:	68bb      	ldr	r3, [r7, #8]
 8016b50:	7e1b      	ldrb	r3, [r3, #24]
 8016b52:	79fa      	ldrb	r2, [r7, #7]
 8016b54:	429a      	cmp	r2, r3
 8016b56:	d006      	beq.n	8016b66 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 8016b58:	68bb      	ldr	r3, [r7, #8]
 8016b5a:	7e1b      	ldrb	r3, [r3, #24]
 8016b5c:	2b01      	cmp	r3, #1
 8016b5e:	d004      	beq.n	8016b6a <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8016b60:	79fb      	ldrb	r3, [r7, #7]
 8016b62:	2b02      	cmp	r3, #2
 8016b64:	d101      	bne.n	8016b6a <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8016b66:	2301      	movs	r3, #1
 8016b68:	e000      	b.n	8016b6c <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x32>
 8016b6a:	2300      	movs	r3, #0
}
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	3714      	adds	r7, #20
 8016b70:	46bd      	mov	sp, r7
 8016b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b76:	4770      	bx	lr

08016b78 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>:
        cur = cur->next_;
    }
}

void MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode* node)
{
 8016b78:	b480      	push	{r7}
 8016b7a:	b083      	sub	sp, #12
 8016b7c:	af00      	add	r7, sp, #0
 8016b7e:	6078      	str	r0, [r7, #4]
 8016b80:	6039      	str	r1, [r7, #0]
    node->next_ = head_;
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	681a      	ldr	r2, [r3, #0]
 8016b86:	683b      	ldr	r3, [r7, #0]
 8016b88:	61da      	str	r2, [r3, #28]
    head_ = node;
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	683a      	ldr	r2, [r7, #0]
 8016b8e:	601a      	str	r2, [r3, #0]
}
 8016b90:	bf00      	nop
 8016b92:	370c      	adds	r7, #12
 8016b94:	46bd      	mov	sp, r7
 8016b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b9a:	4770      	bx	lr

08016b9c <_ZN22MemoryLeakDetectorList10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::removeNode(char* memory)
{
 8016b9c:	b480      	push	{r7}
 8016b9e:	b085      	sub	sp, #20
 8016ba0:	af00      	add	r7, sp, #0
 8016ba2:	6078      	str	r0, [r7, #4]
 8016ba4:	6039      	str	r1, [r7, #0]
    MemoryLeakDetectorNode* cur = head_;
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	60fb      	str	r3, [r7, #12]
    MemoryLeakDetectorNode* prev = NULLPTR;
 8016bac:	2300      	movs	r3, #0
 8016bae:	60bb      	str	r3, [r7, #8]
    while (cur) {
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d019      	beq.n	8016bea <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x4e>
        if (cur->memory_ == memory) {
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	689b      	ldr	r3, [r3, #8]
 8016bba:	683a      	ldr	r2, [r7, #0]
 8016bbc:	429a      	cmp	r2, r3
 8016bbe:	d10e      	bne.n	8016bde <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x42>
            if (prev) {
 8016bc0:	68bb      	ldr	r3, [r7, #8]
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d005      	beq.n	8016bd2 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x36>
                prev->next_ = cur->next_;
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	69da      	ldr	r2, [r3, #28]
 8016bca:	68bb      	ldr	r3, [r7, #8]
 8016bcc:	61da      	str	r2, [r3, #28]
                return cur;
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	e00c      	b.n	8016bec <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
            else {
                head_ = cur->next_;
 8016bd2:	68fb      	ldr	r3, [r7, #12]
 8016bd4:	69da      	ldr	r2, [r3, #28]
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	601a      	str	r2, [r3, #0]
                return cur;
 8016bda:	68fb      	ldr	r3, [r7, #12]
 8016bdc:	e006      	b.n	8016bec <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
        }
        prev = cur;
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	60bb      	str	r3, [r7, #8]
        cur = cur->next_;
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	69db      	ldr	r3, [r3, #28]
 8016be6:	60fb      	str	r3, [r7, #12]
    while (cur) {
 8016be8:	e7e2      	b.n	8016bb0 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x14>
    }
    return NULLPTR;
 8016bea:	2300      	movs	r3, #0
}
 8016bec:	4618      	mov	r0, r3
 8016bee:	3714      	adds	r7, #20
 8016bf0:	46bd      	mov	sp, r7
 8016bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bf6:	4770      	bx	lr

08016bf8 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::retrieveNode(char* memory)
{
 8016bf8:	b480      	push	{r7}
 8016bfa:	b085      	sub	sp, #20
 8016bfc:	af00      	add	r7, sp, #0
 8016bfe:	6078      	str	r0, [r7, #4]
 8016c00:	6039      	str	r1, [r7, #0]
  MemoryLeakDetectorNode* cur = head_;
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d00a      	beq.n	8016c24 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2c>
    if (cur->memory_ == memory)
 8016c0e:	68fb      	ldr	r3, [r7, #12]
 8016c10:	689b      	ldr	r3, [r3, #8]
 8016c12:	683a      	ldr	r2, [r7, #0]
 8016c14:	429a      	cmp	r2, r3
 8016c16:	d101      	bne.n	8016c1c <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x24>
      return cur;
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	e004      	b.n	8016c26 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2e>
    cur = cur->next_;
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	69db      	ldr	r3, [r3, #28]
 8016c20:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8016c22:	e7f1      	b.n	8016c08 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x10>
  }
  return NULLPTR;
 8016c24:	2300      	movs	r3, #0
}
 8016c26:	4618      	mov	r0, r3
 8016c28:	3714      	adds	r7, #20
 8016c2a:	46bd      	mov	sp, r7
 8016c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c30:	4770      	bx	lr

08016c32 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8016c32:	b580      	push	{r7, lr}
 8016c34:	b086      	sub	sp, #24
 8016c36:	af00      	add	r7, sp, #0
 8016c38:	60f8      	str	r0, [r7, #12]
 8016c3a:	60b9      	str	r1, [r7, #8]
 8016c3c:	4613      	mov	r3, r2
 8016c3e:	71fb      	strb	r3, [r7, #7]
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8016c40:	68bb      	ldr	r3, [r7, #8]
 8016c42:	617b      	str	r3, [r7, #20]
 8016c44:	697b      	ldr	r3, [r7, #20]
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d00e      	beq.n	8016c68 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x36>
        if (isInPeriod(cur, period)) return cur;
 8016c4a:	79fb      	ldrb	r3, [r7, #7]
 8016c4c:	461a      	mov	r2, r3
 8016c4e:	6979      	ldr	r1, [r7, #20]
 8016c50:	68f8      	ldr	r0, [r7, #12]
 8016c52:	f7ff ff72 	bl	8016b3a <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016c56:	4603      	mov	r3, r0
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d001      	beq.n	8016c60 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2e>
 8016c5c:	697b      	ldr	r3, [r7, #20]
 8016c5e:	e004      	b.n	8016c6a <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x38>
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8016c60:	697b      	ldr	r3, [r7, #20]
 8016c62:	69db      	ldr	r3, [r3, #28]
 8016c64:	617b      	str	r3, [r7, #20]
 8016c66:	e7ed      	b.n	8016c44 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x12>
    return NULLPTR;
 8016c68:	2300      	movs	r3, #0
}
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	3718      	adds	r7, #24
 8016c6e:	46bd      	mov	sp, r7
 8016c70:	bd80      	pop	{r7, pc}

08016c72 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>:
        if (isInAllocationStage(cur, allocation_stage)) return cur;
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod period)
{
 8016c72:	b580      	push	{r7, lr}
 8016c74:	b082      	sub	sp, #8
 8016c76:	af00      	add	r7, sp, #0
 8016c78:	6078      	str	r0, [r7, #4]
 8016c7a:	460b      	mov	r3, r1
 8016c7c:	70fb      	strb	r3, [r7, #3]
    return getLeakFrom(head_, period);
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	681b      	ldr	r3, [r3, #0]
 8016c82:	78fa      	ldrb	r2, [r7, #3]
 8016c84:	4619      	mov	r1, r3
 8016c86:	6878      	ldr	r0, [r7, #4]
 8016c88:	f7ff ffd3 	bl	8016c32 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016c8c:	4603      	mov	r3, r0
}
 8016c8e:	4618      	mov	r0, r3
 8016c90:	3708      	adds	r7, #8
 8016c92:	46bd      	mov	sp, r7
 8016c94:	bd80      	pop	{r7, pc}

08016c96 <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
{
    return getLeakForAllocationStageFrom(head_, allocation_stage);
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8016c96:	b580      	push	{r7, lr}
 8016c98:	b084      	sub	sp, #16
 8016c9a:	af00      	add	r7, sp, #0
 8016c9c:	60f8      	str	r0, [r7, #12]
 8016c9e:	60b9      	str	r1, [r7, #8]
 8016ca0:	4613      	mov	r3, r2
 8016ca2:	71fb      	strb	r3, [r7, #7]
    return getLeakFrom(node->next_, period);
 8016ca4:	68bb      	ldr	r3, [r7, #8]
 8016ca6:	69db      	ldr	r3, [r3, #28]
 8016ca8:	79fa      	ldrb	r2, [r7, #7]
 8016caa:	4619      	mov	r1, r3
 8016cac:	68f8      	ldr	r0, [r7, #12]
 8016cae:	f7ff ffc0 	bl	8016c32 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016cb2:	4603      	mov	r3, r0
}
 8016cb4:	4618      	mov	r0, r3
 8016cb6:	3710      	adds	r7, #16
 8016cb8:	46bd      	mov	sp, r7
 8016cba:	bd80      	pop	{r7, pc}

08016cbc <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>:
}



size_t MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod period)
{
 8016cbc:	b580      	push	{r7, lr}
 8016cbe:	b084      	sub	sp, #16
 8016cc0:	af00      	add	r7, sp, #0
 8016cc2:	6078      	str	r0, [r7, #4]
 8016cc4:	460b      	mov	r3, r1
 8016cc6:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8016cc8:	2300      	movs	r3, #0
 8016cca:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	681b      	ldr	r3, [r3, #0]
 8016cd0:	60bb      	str	r3, [r7, #8]
 8016cd2:	68bb      	ldr	r3, [r7, #8]
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d00f      	beq.n	8016cf8 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x3c>
        if (isInPeriod(node, period)) total_leaks++;
 8016cd8:	78fb      	ldrb	r3, [r7, #3]
 8016cda:	461a      	mov	r2, r3
 8016cdc:	68b9      	ldr	r1, [r7, #8]
 8016cde:	6878      	ldr	r0, [r7, #4]
 8016ce0:	f7ff ff2b 	bl	8016b3a <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016ce4:	4603      	mov	r3, r0
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d002      	beq.n	8016cf0 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x34>
 8016cea:	68fb      	ldr	r3, [r7, #12]
 8016cec:	3301      	adds	r3, #1
 8016cee:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8016cf0:	68bb      	ldr	r3, [r7, #8]
 8016cf2:	69db      	ldr	r3, [r3, #28]
 8016cf4:	60bb      	str	r3, [r7, #8]
 8016cf6:	e7ec      	b.n	8016cd2 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x16>
    }
    return total_leaks;
 8016cf8:	68fb      	ldr	r3, [r7, #12]
}
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	3710      	adds	r7, #16
 8016cfe:	46bd      	mov	sp, r7
 8016d00:	bd80      	pop	{r7, pc}
	...

08016d04 <_ZN23MemoryLeakDetectorTable4hashEPc>:

/////////////////////////////////////////////////////////////

unsigned long MemoryLeakDetectorTable::hash(char* memory)
{
 8016d04:	b480      	push	{r7}
 8016d06:	b083      	sub	sp, #12
 8016d08:	af00      	add	r7, sp, #0
 8016d0a:	6078      	str	r0, [r7, #4]
 8016d0c:	6039      	str	r1, [r7, #0]
    return (unsigned long)((size_t)memory % hash_prime);
 8016d0e:	6839      	ldr	r1, [r7, #0]
 8016d10:	4b09      	ldr	r3, [pc, #36]	; (8016d38 <_ZN23MemoryLeakDetectorTable4hashEPc+0x34>)
 8016d12:	fba3 2301 	umull	r2, r3, r3, r1
 8016d16:	1aca      	subs	r2, r1, r3
 8016d18:	0852      	lsrs	r2, r2, #1
 8016d1a:	4413      	add	r3, r2
 8016d1c:	099a      	lsrs	r2, r3, #6
 8016d1e:	4613      	mov	r3, r2
 8016d20:	00db      	lsls	r3, r3, #3
 8016d22:	4413      	add	r3, r2
 8016d24:	00db      	lsls	r3, r3, #3
 8016d26:	4413      	add	r3, r2
 8016d28:	1aca      	subs	r2, r1, r3
 8016d2a:	4613      	mov	r3, r2
}
 8016d2c:	4618      	mov	r0, r3
 8016d2e:	370c      	adds	r7, #12
 8016d30:	46bd      	mov	sp, r7
 8016d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d36:	4770      	bx	lr
 8016d38:	c0e07039 	.word	0xc0e07039

08016d3c <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>:
    for (int i = 0; i < hash_prime; i++)
        table_[i].clearAllAccounting(period);
}

void MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode* node)
{
 8016d3c:	b580      	push	{r7, lr}
 8016d3e:	b082      	sub	sp, #8
 8016d40:	af00      	add	r7, sp, #0
 8016d42:	6078      	str	r0, [r7, #4]
 8016d44:	6039      	str	r1, [r7, #0]
    table_[hash(node->memory_)].addNewNode(node);
 8016d46:	683b      	ldr	r3, [r7, #0]
 8016d48:	689b      	ldr	r3, [r3, #8]
 8016d4a:	4619      	mov	r1, r3
 8016d4c:	6878      	ldr	r0, [r7, #4]
 8016d4e:	f7ff ffd9 	bl	8016d04 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8016d52:	4603      	mov	r3, r0
 8016d54:	009b      	lsls	r3, r3, #2
 8016d56:	687a      	ldr	r2, [r7, #4]
 8016d58:	4413      	add	r3, r2
 8016d5a:	6839      	ldr	r1, [r7, #0]
 8016d5c:	4618      	mov	r0, r3
 8016d5e:	f7ff ff0b 	bl	8016b78 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>
}
 8016d62:	bf00      	nop
 8016d64:	3708      	adds	r7, #8
 8016d66:	46bd      	mov	sp, r7
 8016d68:	bd80      	pop	{r7, pc}

08016d6a <_ZN23MemoryLeakDetectorTable10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::removeNode(char* memory)
{
 8016d6a:	b580      	push	{r7, lr}
 8016d6c:	b082      	sub	sp, #8
 8016d6e:	af00      	add	r7, sp, #0
 8016d70:	6078      	str	r0, [r7, #4]
 8016d72:	6039      	str	r1, [r7, #0]
    return table_[hash(memory)].removeNode(memory);
 8016d74:	6839      	ldr	r1, [r7, #0]
 8016d76:	6878      	ldr	r0, [r7, #4]
 8016d78:	f7ff ffc4 	bl	8016d04 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8016d7c:	4603      	mov	r3, r0
 8016d7e:	009b      	lsls	r3, r3, #2
 8016d80:	687a      	ldr	r2, [r7, #4]
 8016d82:	4413      	add	r3, r2
 8016d84:	6839      	ldr	r1, [r7, #0]
 8016d86:	4618      	mov	r0, r3
 8016d88:	f7ff ff08 	bl	8016b9c <_ZN22MemoryLeakDetectorList10removeNodeEPc>
 8016d8c:	4603      	mov	r3, r0
}
 8016d8e:	4618      	mov	r0, r3
 8016d90:	3708      	adds	r7, #8
 8016d92:	46bd      	mov	sp, r7
 8016d94:	bd80      	pop	{r7, pc}

08016d96 <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::retrieveNode(char* memory)
{
 8016d96:	b580      	push	{r7, lr}
 8016d98:	b082      	sub	sp, #8
 8016d9a:	af00      	add	r7, sp, #0
 8016d9c:	6078      	str	r0, [r7, #4]
 8016d9e:	6039      	str	r1, [r7, #0]
  return table_[hash(memory)].retrieveNode(memory);
 8016da0:	6839      	ldr	r1, [r7, #0]
 8016da2:	6878      	ldr	r0, [r7, #4]
 8016da4:	f7ff ffae 	bl	8016d04 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8016da8:	4603      	mov	r3, r0
 8016daa:	009b      	lsls	r3, r3, #2
 8016dac:	687a      	ldr	r2, [r7, #4]
 8016dae:	4413      	add	r3, r2
 8016db0:	6839      	ldr	r1, [r7, #0]
 8016db2:	4618      	mov	r0, r3
 8016db4:	f7ff ff20 	bl	8016bf8 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>
 8016db8:	4603      	mov	r3, r0
}
 8016dba:	4618      	mov	r0, r3
 8016dbc:	3708      	adds	r7, #8
 8016dbe:	46bd      	mov	sp, r7
 8016dc0:	bd80      	pop	{r7, pc}

08016dc2 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod period)
{
 8016dc2:	b580      	push	{r7, lr}
 8016dc4:	b084      	sub	sp, #16
 8016dc6:	af00      	add	r7, sp, #0
 8016dc8:	6078      	str	r0, [r7, #4]
 8016dca:	460b      	mov	r3, r1
 8016dcc:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8016dce:	2300      	movs	r3, #0
 8016dd0:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	60bb      	str	r3, [r7, #8]
 8016dd6:	68bb      	ldr	r3, [r7, #8]
 8016dd8:	2b48      	cmp	r3, #72	; 0x48
 8016dda:	dc10      	bgt.n	8016dfe <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x3c>
        total_leaks += table_[i].getTotalLeaks(period);
 8016ddc:	68bb      	ldr	r3, [r7, #8]
 8016dde:	009b      	lsls	r3, r3, #2
 8016de0:	687a      	ldr	r2, [r7, #4]
 8016de2:	4413      	add	r3, r2
 8016de4:	78fa      	ldrb	r2, [r7, #3]
 8016de6:	4611      	mov	r1, r2
 8016de8:	4618      	mov	r0, r3
 8016dea:	f7ff ff67 	bl	8016cbc <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>
 8016dee:	4602      	mov	r2, r0
 8016df0:	68fb      	ldr	r3, [r7, #12]
 8016df2:	4413      	add	r3, r2
 8016df4:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8016df6:	68bb      	ldr	r3, [r7, #8]
 8016df8:	3301      	adds	r3, #1
 8016dfa:	60bb      	str	r3, [r7, #8]
 8016dfc:	e7eb      	b.n	8016dd6 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x14>
    return total_leaks;
 8016dfe:	68fb      	ldr	r3, [r7, #12]
}
 8016e00:	4618      	mov	r0, r3
 8016e02:	3710      	adds	r7, #16
 8016e04:	46bd      	mov	sp, r7
 8016e06:	bd80      	pop	{r7, pc}

08016e08 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod period)
{
 8016e08:	b580      	push	{r7, lr}
 8016e0a:	b084      	sub	sp, #16
 8016e0c:	af00      	add	r7, sp, #0
 8016e0e:	6078      	str	r0, [r7, #4]
 8016e10:	460b      	mov	r3, r1
 8016e12:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < hash_prime; i++) {
 8016e14:	2300      	movs	r3, #0
 8016e16:	60fb      	str	r3, [r7, #12]
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	2b48      	cmp	r3, #72	; 0x48
 8016e1c:	dc12      	bgt.n	8016e44 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3c>
        MemoryLeakDetectorNode* node = table_[i].getFirstLeak(period);
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	009b      	lsls	r3, r3, #2
 8016e22:	687a      	ldr	r2, [r7, #4]
 8016e24:	4413      	add	r3, r2
 8016e26:	78fa      	ldrb	r2, [r7, #3]
 8016e28:	4611      	mov	r1, r2
 8016e2a:	4618      	mov	r0, r3
 8016e2c:	f7ff ff21 	bl	8016c72 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8016e30:	60b8      	str	r0, [r7, #8]
        if (node) return node;
 8016e32:	68bb      	ldr	r3, [r7, #8]
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d001      	beq.n	8016e3c <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x34>
 8016e38:	68bb      	ldr	r3, [r7, #8]
 8016e3a:	e004      	b.n	8016e46 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3e>
    for (int i = 0; i < hash_prime; i++) {
 8016e3c:	68fb      	ldr	r3, [r7, #12]
 8016e3e:	3301      	adds	r3, #1
 8016e40:	60fb      	str	r3, [r7, #12]
 8016e42:	e7e9      	b.n	8016e18 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x10>
    }
    return NULLPTR;
 8016e44:	2300      	movs	r3, #0
}
 8016e46:	4618      	mov	r0, r3
 8016e48:	3710      	adds	r7, #16
 8016e4a:	46bd      	mov	sp, r7
 8016e4c:	bd80      	pop	{r7, pc}

08016e4e <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
    }
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode* leak, MemLeakPeriod period)
{
 8016e4e:	b580      	push	{r7, lr}
 8016e50:	b086      	sub	sp, #24
 8016e52:	af00      	add	r7, sp, #0
 8016e54:	60f8      	str	r0, [r7, #12]
 8016e56:	60b9      	str	r1, [r7, #8]
 8016e58:	4613      	mov	r3, r2
 8016e5a:	71fb      	strb	r3, [r7, #7]
    unsigned long i = hash(leak->memory_);
 8016e5c:	68bb      	ldr	r3, [r7, #8]
 8016e5e:	689b      	ldr	r3, [r3, #8]
 8016e60:	4619      	mov	r1, r3
 8016e62:	68f8      	ldr	r0, [r7, #12]
 8016e64:	f7ff ff4e 	bl	8016d04 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8016e68:	6178      	str	r0, [r7, #20]
    MemoryLeakDetectorNode* node = table_[i].getNextLeak(leak, period);
 8016e6a:	697b      	ldr	r3, [r7, #20]
 8016e6c:	009b      	lsls	r3, r3, #2
 8016e6e:	68fa      	ldr	r2, [r7, #12]
 8016e70:	4413      	add	r3, r2
 8016e72:	79fa      	ldrb	r2, [r7, #7]
 8016e74:	68b9      	ldr	r1, [r7, #8]
 8016e76:	4618      	mov	r0, r3
 8016e78:	f7ff ff0d 	bl	8016c96 <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016e7c:	6138      	str	r0, [r7, #16]
    if (node) return node;
 8016e7e:	693b      	ldr	r3, [r7, #16]
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	d001      	beq.n	8016e88 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x3a>
 8016e84:	693b      	ldr	r3, [r7, #16]
 8016e86:	e019      	b.n	8016ebc <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>

    for (++i; i < hash_prime; i++) {
 8016e88:	697b      	ldr	r3, [r7, #20]
 8016e8a:	3301      	adds	r3, #1
 8016e8c:	617b      	str	r3, [r7, #20]
 8016e8e:	697b      	ldr	r3, [r7, #20]
 8016e90:	2b48      	cmp	r3, #72	; 0x48
 8016e92:	d812      	bhi.n	8016eba <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6c>
        node = table_[i].getFirstLeak(period);
 8016e94:	697b      	ldr	r3, [r7, #20]
 8016e96:	009b      	lsls	r3, r3, #2
 8016e98:	68fa      	ldr	r2, [r7, #12]
 8016e9a:	4413      	add	r3, r2
 8016e9c:	79fa      	ldrb	r2, [r7, #7]
 8016e9e:	4611      	mov	r1, r2
 8016ea0:	4618      	mov	r0, r3
 8016ea2:	f7ff fee6 	bl	8016c72 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8016ea6:	6138      	str	r0, [r7, #16]
        if (node) return node;
 8016ea8:	693b      	ldr	r3, [r7, #16]
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d001      	beq.n	8016eb2 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x64>
 8016eae:	693b      	ldr	r3, [r7, #16]
 8016eb0:	e004      	b.n	8016ebc <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>
    for (++i; i < hash_prime; i++) {
 8016eb2:	697b      	ldr	r3, [r7, #20]
 8016eb4:	3301      	adds	r3, #1
 8016eb6:	617b      	str	r3, [r7, #20]
 8016eb8:	e7e9      	b.n	8016e8e <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x40>
    }
    return NULLPTR;
 8016eba:	2300      	movs	r3, #0
}
 8016ebc:	4618      	mov	r0, r3
 8016ebe:	3718      	adds	r7, #24
 8016ec0:	46bd      	mov	sp, r7
 8016ec2:	bd80      	pop	{r7, pc}

08016ec4 <_ZN23MemoryLeakDetectorTableC1Ev>:

private:
    MemoryLeakDetectorNode* head_;
};

struct MemoryLeakDetectorTable
 8016ec4:	b5b0      	push	{r4, r5, r7, lr}
 8016ec6:	b082      	sub	sp, #8
 8016ec8:	af00      	add	r7, sp, #0
 8016eca:	6078      	str	r0, [r7, #4]
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	2448      	movs	r4, #72	; 0x48
 8016ed0:	461d      	mov	r5, r3
 8016ed2:	2c00      	cmp	r4, #0
 8016ed4:	db05      	blt.n	8016ee2 <_ZN23MemoryLeakDetectorTableC1Ev+0x1e>
 8016ed6:	4628      	mov	r0, r5
 8016ed8:	f7ff fa84 	bl	80163e4 <_ZN22MemoryLeakDetectorListC1Ev>
 8016edc:	3504      	adds	r5, #4
 8016ede:	3c01      	subs	r4, #1
 8016ee0:	e7f7      	b.n	8016ed2 <_ZN23MemoryLeakDetectorTableC1Ev+0xe>
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	4618      	mov	r0, r3
 8016ee6:	3708      	adds	r7, #8
 8016ee8:	46bd      	mov	sp, r7
 8016eea:	bdb0      	pop	{r4, r5, r7, pc}

08016eec <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>:
    return NULLPTR;
}

/////////////////////////////////////////////////////////////

MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure* reporter)
 8016eec:	b590      	push	{r4, r7, lr}
 8016eee:	b083      	sub	sp, #12
 8016ef0:	af00      	add	r7, sp, #0
 8016ef2:	6078      	str	r0, [r7, #4]
 8016ef4:	6039      	str	r1, [r7, #0]
 8016ef6:	4a1d      	ldr	r2, [pc, #116]	; (8016f6c <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x80>)
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	601a      	str	r2, [r3, #0]
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	330c      	adds	r3, #12
 8016f00:	4618      	mov	r0, r3
 8016f02:	f7ff fbe3 	bl	80166cc <_ZN28MemoryLeakOutputStringBufferC1Ev>
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016f0c:	331c      	adds	r3, #28
 8016f0e:	4618      	mov	r0, r3
 8016f10:	f7ff ffd8 	bl	8016ec4 <_ZN23MemoryLeakDetectorTableC1Ev>
{
    doAllocationTypeChecking_ = true;
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016f1a:	2201      	movs	r2, #1
 8016f1c:	701a      	strb	r2, [r3, #0]
    allocationSequenceNumber_ = 1;
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016f24:	3304      	adds	r3, #4
 8016f26:	2201      	movs	r2, #1
 8016f28:	601a      	str	r2, [r3, #0]
    current_period_ = mem_leak_period_disabled;
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	2201      	movs	r2, #1
 8016f2e:	721a      	strb	r2, [r3, #8]
    current_allocation_stage_ = 0;
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016f36:	3308      	adds	r3, #8
 8016f38:	2200      	movs	r2, #0
 8016f3a:	701a      	strb	r2, [r3, #0]
    reporter_ = reporter;
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	683a      	ldr	r2, [r7, #0]
 8016f40:	605a      	str	r2, [r3, #4]
    mutex_ = new SimpleMutex;
 8016f42:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 8016f46:	490a      	ldr	r1, [pc, #40]	; (8016f70 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x84>)
 8016f48:	2004      	movs	r0, #4
 8016f4a:	f7f3 fb17 	bl	800a57c <_ZnwjPKci>
 8016f4e:	4604      	mov	r4, r0
 8016f50:	4620      	mov	r0, r4
 8016f52:	f7f5 fbe7 	bl	800c724 <_ZN11SimpleMutexC1Ev>
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016f5c:	330c      	adds	r3, #12
 8016f5e:	601c      	str	r4, [r3, #0]
}
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	4618      	mov	r0, r3
 8016f64:	370c      	adds	r7, #12
 8016f66:	46bd      	mov	sp, r7
 8016f68:	bd90      	pop	{r4, r7, pc}
 8016f6a:	bf00      	nop
 8016f6c:	08028bb0 	.word	0x08028bb0
 8016f70:	08025f80 	.word	0x08025f80

08016f74 <_ZN18MemoryLeakDetectorD1Ev>:

MemoryLeakDetector::~MemoryLeakDetector()
 8016f74:	b590      	push	{r4, r7, lr}
 8016f76:	b083      	sub	sp, #12
 8016f78:	af00      	add	r7, sp, #0
 8016f7a:	6078      	str	r0, [r7, #4]
 8016f7c:	4a0e      	ldr	r2, [pc, #56]	; (8016fb8 <_ZN18MemoryLeakDetectorD1Ev+0x44>)
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	601a      	str	r2, [r3, #0]
{
    if (mutex_)
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016f88:	330c      	adds	r3, #12
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d00d      	beq.n	8016fac <_ZN18MemoryLeakDetectorD1Ev+0x38>
    {
        delete mutex_;
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016f96:	330c      	adds	r3, #12
 8016f98:	681c      	ldr	r4, [r3, #0]
 8016f9a:	2c00      	cmp	r4, #0
 8016f9c:	d006      	beq.n	8016fac <_ZN18MemoryLeakDetectorD1Ev+0x38>
 8016f9e:	4620      	mov	r0, r4
 8016fa0:	f7f5 fbd2 	bl	800c748 <_ZN11SimpleMutexD1Ev>
 8016fa4:	2104      	movs	r1, #4
 8016fa6:	4620      	mov	r0, r4
 8016fa8:	f7f3 fafc 	bl	800a5a4 <_ZdlPvj>
    }
}
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	4618      	mov	r0, r3
 8016fb0:	370c      	adds	r7, #12
 8016fb2:	46bd      	mov	sp, r7
 8016fb4:	bd90      	pop	{r4, r7, pc}
 8016fb6:	bf00      	nop
 8016fb8:	08028bb0 	.word	0x08028bb0

08016fbc <_ZN18MemoryLeakDetectorD0Ev>:
MemoryLeakDetector::~MemoryLeakDetector()
 8016fbc:	b580      	push	{r7, lr}
 8016fbe:	b082      	sub	sp, #8
 8016fc0:	af00      	add	r7, sp, #0
 8016fc2:	6078      	str	r0, [r7, #4]
}
 8016fc4:	6878      	ldr	r0, [r7, #4]
 8016fc6:	f7ff ffd5 	bl	8016f74 <_ZN18MemoryLeakDetectorD1Ev>
 8016fca:	f241 1150 	movw	r1, #4432	; 0x1150
 8016fce:	6878      	ldr	r0, [r7, #4]
 8016fd0:	f7f3 fae8 	bl	800a5a4 <_ZdlPvj>
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	4618      	mov	r0, r3
 8016fd8:	3708      	adds	r7, #8
 8016fda:	46bd      	mov	sp, r7
 8016fdc:	bd80      	pop	{r7, pc}

08016fde <_ZN18MemoryLeakDetector13startCheckingEv>:
{
    memoryTable_.clearAllAccounting(period);
}

void MemoryLeakDetector::startChecking()
{
 8016fde:	b580      	push	{r7, lr}
 8016fe0:	b082      	sub	sp, #8
 8016fe2:	af00      	add	r7, sp, #0
 8016fe4:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	330c      	adds	r3, #12
 8016fea:	4618      	mov	r0, r3
 8016fec:	f7ff fd72 	bl	8016ad4 <_ZN28MemoryLeakOutputStringBuffer5clearEv>
    current_period_ = mem_leak_period_checking;
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	2203      	movs	r2, #3
 8016ff4:	721a      	strb	r2, [r3, #8]
}
 8016ff6:	bf00      	nop
 8016ff8:	3708      	adds	r7, #8
 8016ffa:	46bd      	mov	sp, r7
 8016ffc:	bd80      	pop	{r7, pc}

08016ffe <_ZN18MemoryLeakDetector12stopCheckingEv>:

void MemoryLeakDetector::stopChecking()
{
 8016ffe:	b480      	push	{r7}
 8017000:	b083      	sub	sp, #12
 8017002:	af00      	add	r7, sp, #0
 8017004:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	2202      	movs	r2, #2
 801700a:	721a      	strb	r2, [r3, #8]
}
 801700c:	bf00      	nop
 801700e:	370c      	adds	r7, #12
 8017010:	46bd      	mov	sp, r7
 8017012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017016:	4770      	bx	lr

08017018 <_ZN18MemoryLeakDetector6enableEv>:
{
    return current_allocation_stage_;
}

void MemoryLeakDetector::enable()
{
 8017018:	b480      	push	{r7}
 801701a:	b083      	sub	sp, #12
 801701c:	af00      	add	r7, sp, #0
 801701e:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	2202      	movs	r2, #2
 8017024:	721a      	strb	r2, [r3, #8]
}
 8017026:	bf00      	nop
 8017028:	370c      	adds	r7, #12
 801702a:	46bd      	mov	sp, r7
 801702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017030:	4770      	bx	lr

08017032 <_ZN18MemoryLeakDetector8getMutexEv>:
{
    current_allocation_stage_--;
}

SimpleMutex *MemoryLeakDetector::getMutex()
{
 8017032:	b480      	push	{r7}
 8017034:	b083      	sub	sp, #12
 8017036:	af00      	add	r7, sp, #0
 8017038:	6078      	str	r0, [r7, #4]
    return mutex_;
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8017040:	330c      	adds	r3, #12
 8017042:	681b      	ldr	r3, [r3, #0]
}
 8017044:	4618      	mov	r0, r3
 8017046:	370c      	adds	r7, #12
 8017048:	46bd      	mov	sp, r7
 801704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801704e:	4770      	bx	lr

08017050 <_ZL31calculateVoidPointerAlignedSizej>:

static size_t calculateVoidPointerAlignedSize(size_t size)
{
 8017050:	b480      	push	{r7}
 8017052:	b083      	sub	sp, #12
 8017054:	af00      	add	r7, sp, #0
 8017056:	6078      	str	r0, [r7, #4]
#ifndef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
    return (sizeof(void*) - (size % sizeof(void*))) + size;
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	f023 0303 	bic.w	r3, r3, #3
 801705e:	3304      	adds	r3, #4
#else
   return size;
#endif
}
 8017060:	4618      	mov	r0, r3
 8017062:	370c      	adds	r7, #12
 8017064:	46bd      	mov	sp, r7
 8017066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801706a:	4770      	bx	lr

0801706c <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>:

size_t MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(size_t size)
{
 801706c:	b580      	push	{r7, lr}
 801706e:	b082      	sub	sp, #8
 8017070:	af00      	add	r7, sp, #0
 8017072:	6078      	str	r0, [r7, #4]
 8017074:	6039      	str	r1, [r7, #0]
    return calculateVoidPointerAlignedSize(size + memory_corruption_buffer_size);
 8017076:	683b      	ldr	r3, [r7, #0]
 8017078:	3303      	adds	r3, #3
 801707a:	4618      	mov	r0, r3
 801707c:	f7ff ffe8 	bl	8017050 <_ZL31calculateVoidPointerAlignedSizej>
 8017080:	4603      	mov	r3, r0
}
 8017082:	4618      	mov	r0, r3
 8017084:	3708      	adds	r7, #8
 8017086:	46bd      	mov	sp, r7
 8017088:	bd80      	pop	{r7, pc}

0801708a <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>:

MemoryLeakDetectorNode* MemoryLeakDetector::getNodeFromMemoryPointer(char* memory, size_t memory_size)
{
 801708a:	b580      	push	{r7, lr}
 801708c:	b084      	sub	sp, #16
 801708e:	af00      	add	r7, sp, #0
 8017090:	60f8      	str	r0, [r7, #12]
 8017092:	60b9      	str	r1, [r7, #8]
 8017094:	607a      	str	r2, [r7, #4]
    return (MemoryLeakDetectorNode*) (void*) (memory + sizeOfMemoryWithCorruptionInfo(memory_size));
 8017096:	6879      	ldr	r1, [r7, #4]
 8017098:	68f8      	ldr	r0, [r7, #12]
 801709a:	f7ff ffe7 	bl	801706c <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 801709e:	4602      	mov	r2, r0
 80170a0:	68bb      	ldr	r3, [r7, #8]
 80170a2:	4413      	add	r3, r2
}
 80170a4:	4618      	mov	r0, r3
 80170a6:	3710      	adds	r7, #16
 80170a8:	46bd      	mov	sp, r7
 80170aa:	bd80      	pop	{r7, pc}

080170ac <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>:

void MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode * node, char *new_memory, size_t size, TestMemoryAllocator *allocator, const char *file, size_t line)
{
 80170ac:	b580      	push	{r7, lr}
 80170ae:	b08a      	sub	sp, #40	; 0x28
 80170b0:	af06      	add	r7, sp, #24
 80170b2:	60f8      	str	r0, [r7, #12]
 80170b4:	60b9      	str	r1, [r7, #8]
 80170b6:	607a      	str	r2, [r7, #4]
 80170b8:	603b      	str	r3, [r7, #0]
    node->init(new_memory, allocationSequenceNumber_++, size, allocator, current_period_, current_allocation_stage_, file, line);
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80170c0:	3304      	adds	r3, #4
 80170c2:	681a      	ldr	r2, [r3, #0]
 80170c4:	1c51      	adds	r1, r2, #1
 80170c6:	68fb      	ldr	r3, [r7, #12]
 80170c8:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80170cc:	3304      	adds	r3, #4
 80170ce:	6019      	str	r1, [r3, #0]
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	7a19      	ldrb	r1, [r3, #8]
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80170da:	3308      	adds	r3, #8
 80170dc:	781b      	ldrb	r3, [r3, #0]
 80170de:	6a38      	ldr	r0, [r7, #32]
 80170e0:	9004      	str	r0, [sp, #16]
 80170e2:	69f8      	ldr	r0, [r7, #28]
 80170e4:	9003      	str	r0, [sp, #12]
 80170e6:	9302      	str	r3, [sp, #8]
 80170e8:	9101      	str	r1, [sp, #4]
 80170ea:	69bb      	ldr	r3, [r7, #24]
 80170ec:	9300      	str	r3, [sp, #0]
 80170ee:	683b      	ldr	r3, [r7, #0]
 80170f0:	6879      	ldr	r1, [r7, #4]
 80170f2:	68b8      	ldr	r0, [r7, #8]
 80170f4:	f7ff fcfb 	bl	8016aee <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>
    addMemoryCorruptionInformation(node->memory_ + node->size_);
 80170f8:	68bb      	ldr	r3, [r7, #8]
 80170fa:	689a      	ldr	r2, [r3, #8]
 80170fc:	68bb      	ldr	r3, [r7, #8]
 80170fe:	681b      	ldr	r3, [r3, #0]
 8017100:	4413      	add	r3, r2
 8017102:	4619      	mov	r1, r3
 8017104:	68f8      	ldr	r0, [r7, #12]
 8017106:	f000 f861 	bl	80171cc <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>
    memoryTable_.addNewNode(node);
 801710a:	68fb      	ldr	r3, [r7, #12]
 801710c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017110:	331c      	adds	r3, #28
 8017112:	68b9      	ldr	r1, [r7, #8]
 8017114:	4618      	mov	r0, r3
 8017116:	f7ff fe11 	bl	8016d3c <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>
}
 801711a:	bf00      	nop
 801711c:	3710      	adds	r7, #16
 801711e:	46bd      	mov	sp, r7
 8017120:	bd80      	pop	{r7, pc}

08017122 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8017122:	b580      	push	{r7, lr}
 8017124:	b08a      	sub	sp, #40	; 0x28
 8017126:	af04      	add	r7, sp, #16
 8017128:	60f8      	str	r0, [r7, #12]
 801712a:	60b9      	str	r1, [r7, #8]
 801712c:	607a      	str	r2, [r7, #4]
 801712e:	603b      	str	r3, [r7, #0]
    char* new_memory = reallocateMemoryWithAccountingInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8017130:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017134:	9302      	str	r3, [sp, #8]
 8017136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017138:	9301      	str	r3, [sp, #4]
 801713a:	6a3b      	ldr	r3, [r7, #32]
 801713c:	9300      	str	r3, [sp, #0]
 801713e:	683b      	ldr	r3, [r7, #0]
 8017140:	687a      	ldr	r2, [r7, #4]
 8017142:	68b9      	ldr	r1, [r7, #8]
 8017144:	68f8      	ldr	r0, [r7, #12]
 8017146:	f000 f96f 	bl	8017428 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>
 801714a:	6178      	str	r0, [r7, #20]
    if (new_memory == NULLPTR) return NULLPTR;
 801714c:	697b      	ldr	r3, [r7, #20]
 801714e:	2b00      	cmp	r3, #0
 8017150:	d101      	bne.n	8017156 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x34>
 8017152:	2300      	movs	r3, #0
 8017154:	e017      	b.n	8017186 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x64>

    MemoryLeakDetectorNode *node = createMemoryLeakAccountingInformation(allocator, size, new_memory, allocatNodesSeperately);
 8017156:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801715a:	9300      	str	r3, [sp, #0]
 801715c:	697b      	ldr	r3, [r7, #20]
 801715e:	683a      	ldr	r2, [r7, #0]
 8017160:	68b9      	ldr	r1, [r7, #8]
 8017162:	68f8      	ldr	r0, [r7, #12]
 8017164:	f000 f98a 	bl	801747c <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8017168:	6138      	str	r0, [r7, #16]
    storeLeakInformation(node, new_memory, size, allocator, file, line);
 801716a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801716c:	9302      	str	r3, [sp, #8]
 801716e:	6a3b      	ldr	r3, [r7, #32]
 8017170:	9301      	str	r3, [sp, #4]
 8017172:	68bb      	ldr	r3, [r7, #8]
 8017174:	9300      	str	r3, [sp, #0]
 8017176:	683b      	ldr	r3, [r7, #0]
 8017178:	697a      	ldr	r2, [r7, #20]
 801717a:	6939      	ldr	r1, [r7, #16]
 801717c:	68f8      	ldr	r0, [r7, #12]
 801717e:	f7ff ff95 	bl	80170ac <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8017182:	693b      	ldr	r3, [r7, #16]
 8017184:	689b      	ldr	r3, [r3, #8]
}
 8017186:	4618      	mov	r0, r3
 8017188:	3718      	adds	r7, #24
 801718a:	46bd      	mov	sp, r7
 801718c:	bd80      	pop	{r7, pc}
	...

08017190 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>:

void MemoryLeakDetector::invalidateMemory(char* memory)
{
 8017190:	b580      	push	{r7, lr}
 8017192:	b084      	sub	sp, #16
 8017194:	af00      	add	r7, sp, #0
 8017196:	6078      	str	r0, [r7, #4]
 8017198:	6039      	str	r1, [r7, #0]
#ifndef CPPUTEST_DISABLE_HEAP_POISON
  MemoryLeakDetectorNode* node = memoryTable_.retrieveNode(memory);
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80171a0:	331c      	adds	r3, #28
 80171a2:	6839      	ldr	r1, [r7, #0]
 80171a4:	4618      	mov	r0, r3
 80171a6:	f7ff fdf6 	bl	8016d96 <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>
 80171aa:	60f8      	str	r0, [r7, #12]
  if (node)
 80171ac:	68fb      	ldr	r3, [r7, #12]
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	d006      	beq.n	80171c0 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x30>
    PlatformSpecificMemset(memory, 0xCD, node->size_);
 80171b2:	4b05      	ldr	r3, [pc, #20]	; (80171c8 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x38>)
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	68fa      	ldr	r2, [r7, #12]
 80171b8:	6812      	ldr	r2, [r2, #0]
 80171ba:	21cd      	movs	r1, #205	; 0xcd
 80171bc:	6838      	ldr	r0, [r7, #0]
 80171be:	4798      	blx	r3
#endif
}
 80171c0:	bf00      	nop
 80171c2:	3710      	adds	r7, #16
 80171c4:	46bd      	mov	sp, r7
 80171c6:	bd80      	pop	{r7, pc}
 80171c8:	200000d8 	.word	0x200000d8

080171cc <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>:

void MemoryLeakDetector::addMemoryCorruptionInformation(char* memory)
{
 80171cc:	b480      	push	{r7}
 80171ce:	b085      	sub	sp, #20
 80171d0:	af00      	add	r7, sp, #0
 80171d2:	6078      	str	r0, [r7, #4]
 80171d4:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80171d6:	2300      	movs	r3, #0
 80171d8:	60fb      	str	r3, [r7, #12]
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	2b02      	cmp	r3, #2
 80171de:	d812      	bhi.n	8017206 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x3a>
      memory[i] = GuardBytes[i % sizeof(GuardBytes)];
 80171e0:	68f9      	ldr	r1, [r7, #12]
 80171e2:	4b0c      	ldr	r3, [pc, #48]	; (8017214 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x48>)
 80171e4:	fba3 2301 	umull	r2, r3, r3, r1
 80171e8:	085a      	lsrs	r2, r3, #1
 80171ea:	4613      	mov	r3, r2
 80171ec:	005b      	lsls	r3, r3, #1
 80171ee:	4413      	add	r3, r2
 80171f0:	1aca      	subs	r2, r1, r3
 80171f2:	6839      	ldr	r1, [r7, #0]
 80171f4:	68fb      	ldr	r3, [r7, #12]
 80171f6:	440b      	add	r3, r1
 80171f8:	4907      	ldr	r1, [pc, #28]	; (8017218 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x4c>)
 80171fa:	5c8a      	ldrb	r2, [r1, r2]
 80171fc:	701a      	strb	r2, [r3, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	3301      	adds	r3, #1
 8017202:	60fb      	str	r3, [r7, #12]
 8017204:	e7e9      	b.n	80171da <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0xe>
}
 8017206:	bf00      	nop
 8017208:	3714      	adds	r7, #20
 801720a:	46bd      	mov	sp, r7
 801720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017210:	4770      	bx	lr
 8017212:	bf00      	nop
 8017214:	aaaaaaab 	.word	0xaaaaaaab
 8017218:	08028ba4 	.word	0x08028ba4

0801721c <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>:

bool MemoryLeakDetector::validMemoryCorruptionInformation(char* memory)
{
 801721c:	b480      	push	{r7}
 801721e:	b085      	sub	sp, #20
 8017220:	af00      	add	r7, sp, #0
 8017222:	6078      	str	r0, [r7, #4]
 8017224:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8017226:	2300      	movs	r3, #0
 8017228:	60fb      	str	r3, [r7, #12]
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	2b02      	cmp	r3, #2
 801722e:	d816      	bhi.n	801725e <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x42>
      if (memory[i] != GuardBytes[i % sizeof(GuardBytes)])
 8017230:	683a      	ldr	r2, [r7, #0]
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	4413      	add	r3, r2
 8017236:	7818      	ldrb	r0, [r3, #0]
 8017238:	68f9      	ldr	r1, [r7, #12]
 801723a:	4b0c      	ldr	r3, [pc, #48]	; (801726c <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x50>)
 801723c:	fba3 2301 	umull	r2, r3, r3, r1
 8017240:	085a      	lsrs	r2, r3, #1
 8017242:	4613      	mov	r3, r2
 8017244:	005b      	lsls	r3, r3, #1
 8017246:	4413      	add	r3, r2
 8017248:	1aca      	subs	r2, r1, r3
 801724a:	4b09      	ldr	r3, [pc, #36]	; (8017270 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x54>)
 801724c:	5c9b      	ldrb	r3, [r3, r2]
 801724e:	4298      	cmp	r0, r3
 8017250:	d001      	beq.n	8017256 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x3a>
          return false;
 8017252:	2300      	movs	r3, #0
 8017254:	e004      	b.n	8017260 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x44>
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8017256:	68fb      	ldr	r3, [r7, #12]
 8017258:	3301      	adds	r3, #1
 801725a:	60fb      	str	r3, [r7, #12]
 801725c:	e7e5      	b.n	801722a <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0xe>
   return true;
 801725e:	2301      	movs	r3, #1
}
 8017260:	4618      	mov	r0, r3
 8017262:	3714      	adds	r7, #20
 8017264:	46bd      	mov	sp, r7
 8017266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801726a:	4770      	bx	lr
 801726c:	aaaaaaab 	.word	0xaaaaaaab
 8017270:	08028ba4 	.word	0x08028ba4

08017274 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>:

bool MemoryLeakDetector::matchingAllocation(TestMemoryAllocator *alloc_allocator, TestMemoryAllocator *free_allocator)
{
 8017274:	b580      	push	{r7, lr}
 8017276:	b084      	sub	sp, #16
 8017278:	af00      	add	r7, sp, #0
 801727a:	60f8      	str	r0, [r7, #12]
 801727c:	60b9      	str	r1, [r7, #8]
 801727e:	607a      	str	r2, [r7, #4]
    if (alloc_allocator == free_allocator) return true;
 8017280:	68ba      	ldr	r2, [r7, #8]
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	429a      	cmp	r2, r3
 8017286:	d101      	bne.n	801728c <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x18>
 8017288:	2301      	movs	r3, #1
 801728a:	e013      	b.n	80172b4 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    if (!doAllocationTypeChecking_) return true;
 801728c:	68fb      	ldr	r3, [r7, #12]
 801728e:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8017292:	781b      	ldrb	r3, [r3, #0]
 8017294:	f083 0301 	eor.w	r3, r3, #1
 8017298:	b2db      	uxtb	r3, r3
 801729a:	2b00      	cmp	r3, #0
 801729c:	d001      	beq.n	80172a2 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x2e>
 801729e:	2301      	movs	r3, #1
 80172a0:	e008      	b.n	80172b4 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    return free_allocator->isOfEqualType(alloc_allocator);
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	681b      	ldr	r3, [r3, #0]
 80172a6:	331c      	adds	r3, #28
 80172a8:	681b      	ldr	r3, [r3, #0]
 80172aa:	68b9      	ldr	r1, [r7, #8]
 80172ac:	6878      	ldr	r0, [r7, #4]
 80172ae:	4798      	blx	r3
 80172b0:	4603      	mov	r3, r0
 80172b2:	bf00      	nop
}
 80172b4:	4618      	mov	r0, r3
 80172b6:	3710      	adds	r7, #16
 80172b8:	46bd      	mov	sp, r7
 80172ba:	bd80      	pop	{r7, pc}

080172bc <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>:

void MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode* node, const char* file, size_t line, TestMemoryAllocator* allocator, bool allocateNodesSeperately)
{
 80172bc:	b590      	push	{r4, r7, lr}
 80172be:	b087      	sub	sp, #28
 80172c0:	af02      	add	r7, sp, #8
 80172c2:	60f8      	str	r0, [r7, #12]
 80172c4:	60b9      	str	r1, [r7, #8]
 80172c6:	607a      	str	r2, [r7, #4]
 80172c8:	603b      	str	r3, [r7, #0]
    if (!matchingAllocation(node->allocator_->actualAllocator(), allocator->actualAllocator()))
 80172ca:	68bb      	ldr	r3, [r7, #8]
 80172cc:	695a      	ldr	r2, [r3, #20]
 80172ce:	68bb      	ldr	r3, [r7, #8]
 80172d0:	695b      	ldr	r3, [r3, #20]
 80172d2:	681b      	ldr	r3, [r3, #0]
 80172d4:	3328      	adds	r3, #40	; 0x28
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	4610      	mov	r0, r2
 80172da:	4798      	blx	r3
 80172dc:	4604      	mov	r4, r0
 80172de:	6a3b      	ldr	r3, [r7, #32]
 80172e0:	681b      	ldr	r3, [r3, #0]
 80172e2:	3328      	adds	r3, #40	; 0x28
 80172e4:	681b      	ldr	r3, [r3, #0]
 80172e6:	6a38      	ldr	r0, [r7, #32]
 80172e8:	4798      	blx	r3
 80172ea:	4603      	mov	r3, r0
 80172ec:	461a      	mov	r2, r3
 80172ee:	4621      	mov	r1, r4
 80172f0:	68f8      	ldr	r0, [r7, #12]
 80172f2:	f7ff ffbf 	bl	8017274 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>
 80172f6:	4603      	mov	r3, r0
 80172f8:	f083 0301 	eor.w	r3, r3, #1
 80172fc:	b2db      	uxtb	r3, r3
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d014      	beq.n	801732c <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0x70>
        outputBuffer_.reportAllocationDeallocationMismatchFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8017302:	68fb      	ldr	r3, [r7, #12]
 8017304:	f103 040c 	add.w	r4, r3, #12
 8017308:	6a3b      	ldr	r3, [r7, #32]
 801730a:	681b      	ldr	r3, [r3, #0]
 801730c:	3328      	adds	r3, #40	; 0x28
 801730e:	681b      	ldr	r3, [r3, #0]
 8017310:	6a38      	ldr	r0, [r7, #32]
 8017312:	4798      	blx	r3
 8017314:	4602      	mov	r2, r0
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	685b      	ldr	r3, [r3, #4]
 801731a:	9301      	str	r3, [sp, #4]
 801731c:	9200      	str	r2, [sp, #0]
 801731e:	683b      	ldr	r3, [r7, #0]
 8017320:	687a      	ldr	r2, [r7, #4]
 8017322:	68b9      	ldr	r1, [r7, #8]
 8017324:	4620      	mov	r0, r4
 8017326:	f7ff fb4d 	bl	80169c4 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
    else if (allocateNodesSeperately)
        allocator->freeMemoryLeakNode((char*) node);
}
 801732a:	e02e      	b.n	801738a <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
 801732c:	68bb      	ldr	r3, [r7, #8]
 801732e:	689a      	ldr	r2, [r3, #8]
 8017330:	68bb      	ldr	r3, [r7, #8]
 8017332:	681b      	ldr	r3, [r3, #0]
 8017334:	4413      	add	r3, r2
 8017336:	4619      	mov	r1, r3
 8017338:	68f8      	ldr	r0, [r7, #12]
 801733a:	f7ff ff6f 	bl	801721c <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>
 801733e:	4603      	mov	r3, r0
 8017340:	f083 0301 	eor.w	r3, r3, #1
 8017344:	b2db      	uxtb	r3, r3
 8017346:	2b00      	cmp	r3, #0
 8017348:	d014      	beq.n	8017374 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xb8>
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
 801734a:	68fb      	ldr	r3, [r7, #12]
 801734c:	f103 040c 	add.w	r4, r3, #12
 8017350:	6a3b      	ldr	r3, [r7, #32]
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	3328      	adds	r3, #40	; 0x28
 8017356:	681b      	ldr	r3, [r3, #0]
 8017358:	6a38      	ldr	r0, [r7, #32]
 801735a:	4798      	blx	r3
 801735c:	4602      	mov	r2, r0
 801735e:	68fb      	ldr	r3, [r7, #12]
 8017360:	685b      	ldr	r3, [r3, #4]
 8017362:	9301      	str	r3, [sp, #4]
 8017364:	9200      	str	r2, [sp, #0]
 8017366:	683b      	ldr	r3, [r7, #0]
 8017368:	687a      	ldr	r2, [r7, #4]
 801736a:	68b9      	ldr	r1, [r7, #8]
 801736c:	4620      	mov	r0, r4
 801736e:	f7ff fb4f 	bl	8016a10 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
}
 8017372:	e00a      	b.n	801738a <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (allocateNodesSeperately)
 8017374:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017378:	2b00      	cmp	r3, #0
 801737a:	d006      	beq.n	801738a <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
        allocator->freeMemoryLeakNode((char*) node);
 801737c:	6a3b      	ldr	r3, [r7, #32]
 801737e:	681b      	ldr	r3, [r3, #0]
 8017380:	3324      	adds	r3, #36	; 0x24
 8017382:	681b      	ldr	r3, [r3, #0]
 8017384:	68b9      	ldr	r1, [r7, #8]
 8017386:	6a38      	ldr	r0, [r7, #32]
 8017388:	4798      	blx	r3
}
 801738a:	bf00      	nop
 801738c:	3714      	adds	r7, #20
 801738e:	46bd      	mov	sp, r7
 8017390:	bd90      	pop	{r4, r7, pc}
	...

08017394 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, bool allocatNodesSeperately)
{
 8017394:	b580      	push	{r7, lr}
 8017396:	b086      	sub	sp, #24
 8017398:	af02      	add	r7, sp, #8
 801739a:	60f8      	str	r0, [r7, #12]
 801739c:	60b9      	str	r1, [r7, #8]
 801739e:	607a      	str	r2, [r7, #4]
 80173a0:	70fb      	strb	r3, [r7, #3]
    return allocMemory(allocator, size, UNKNOWN, 0, allocatNodesSeperately);
 80173a2:	4b08      	ldr	r3, [pc, #32]	; (80173c4 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb+0x30>)
 80173a4:	681a      	ldr	r2, [r3, #0]
 80173a6:	78fb      	ldrb	r3, [r7, #3]
 80173a8:	9301      	str	r3, [sp, #4]
 80173aa:	2300      	movs	r3, #0
 80173ac:	9300      	str	r3, [sp, #0]
 80173ae:	4613      	mov	r3, r2
 80173b0:	687a      	ldr	r2, [r7, #4]
 80173b2:	68b9      	ldr	r1, [r7, #8]
 80173b4:	68f8      	ldr	r0, [r7, #12]
 80173b6:	f000 f87f 	bl	80174b8 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 80173ba:	4603      	mov	r3, r0
}
 80173bc:	4618      	mov	r0, r3
 80173be:	3710      	adds	r7, #16
 80173c0:	46bd      	mov	sp, r7
 80173c2:	bd80      	pop	{r7, pc}
 80173c4:	20000100 	.word	0x20000100

080173c8 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 80173c8:	b590      	push	{r4, r7, lr}
 80173ca:	b085      	sub	sp, #20
 80173cc:	af00      	add	r7, sp, #0
 80173ce:	60f8      	str	r0, [r7, #12]
 80173d0:	60b9      	str	r1, [r7, #8]
 80173d2:	607a      	str	r2, [r7, #4]
 80173d4:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size), file, line);
 80173d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d00e      	beq.n	80173fc <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x34>
 80173de:	68bb      	ldr	r3, [r7, #8]
 80173e0:	681b      	ldr	r3, [r3, #0]
 80173e2:	3308      	adds	r3, #8
 80173e4:	681c      	ldr	r4, [r3, #0]
 80173e6:	6879      	ldr	r1, [r7, #4]
 80173e8:	68f8      	ldr	r0, [r7, #12]
 80173ea:	f7ff fe3f 	bl	801706c <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 80173ee:	4601      	mov	r1, r0
 80173f0:	6a3b      	ldr	r3, [r7, #32]
 80173f2:	683a      	ldr	r2, [r7, #0]
 80173f4:	68b8      	ldr	r0, [r7, #8]
 80173f6:	47a0      	blx	r4
 80173f8:	4603      	mov	r3, r0
 80173fa:	e010      	b.n	801741e <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x56>
    else return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode), file, line);
 80173fc:	68bb      	ldr	r3, [r7, #8]
 80173fe:	681b      	ldr	r3, [r3, #0]
 8017400:	3308      	adds	r3, #8
 8017402:	681c      	ldr	r4, [r3, #0]
 8017404:	6879      	ldr	r1, [r7, #4]
 8017406:	68f8      	ldr	r0, [r7, #12]
 8017408:	f7ff fe30 	bl	801706c <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 801740c:	4603      	mov	r3, r0
 801740e:	f103 0120 	add.w	r1, r3, #32
 8017412:	6a3b      	ldr	r3, [r7, #32]
 8017414:	683a      	ldr	r2, [r7, #0]
 8017416:	68b8      	ldr	r0, [r7, #8]
 8017418:	47a0      	blx	r4
 801741a:	4603      	mov	r3, r0
 801741c:	bf00      	nop
}
 801741e:	4618      	mov	r0, r3
 8017420:	3714      	adds	r7, #20
 8017422:	46bd      	mov	sp, r7
 8017424:	bd90      	pop	{r4, r7, pc}
	...

08017428 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator* /*allocator*/, char* memory, size_t size, const char* /*file*/, size_t /*line*/, bool allocatNodesSeperately)
{
 8017428:	b590      	push	{r4, r7, lr}
 801742a:	b085      	sub	sp, #20
 801742c:	af00      	add	r7, sp, #0
 801742e:	60f8      	str	r0, [r7, #12]
 8017430:	60b9      	str	r1, [r7, #8]
 8017432:	607a      	str	r2, [r7, #4]
 8017434:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size));
 8017436:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801743a:	2b00      	cmp	r3, #0
 801743c:	d00b      	beq.n	8017456 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x2e>
 801743e:	4b0e      	ldr	r3, [pc, #56]	; (8017478 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8017440:	681c      	ldr	r4, [r3, #0]
 8017442:	6839      	ldr	r1, [r7, #0]
 8017444:	68f8      	ldr	r0, [r7, #12]
 8017446:	f7ff fe11 	bl	801706c <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 801744a:	4603      	mov	r3, r0
 801744c:	4619      	mov	r1, r3
 801744e:	6878      	ldr	r0, [r7, #4]
 8017450:	47a0      	blx	r4
 8017452:	4603      	mov	r3, r0
 8017454:	e00c      	b.n	8017470 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x48>
    else return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode));
 8017456:	4b08      	ldr	r3, [pc, #32]	; (8017478 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8017458:	681c      	ldr	r4, [r3, #0]
 801745a:	6839      	ldr	r1, [r7, #0]
 801745c:	68f8      	ldr	r0, [r7, #12]
 801745e:	f7ff fe05 	bl	801706c <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8017462:	4603      	mov	r3, r0
 8017464:	3320      	adds	r3, #32
 8017466:	4619      	mov	r1, r3
 8017468:	6878      	ldr	r0, [r7, #4]
 801746a:	47a0      	blx	r4
 801746c:	4603      	mov	r3, r0
 801746e:	bf00      	nop
}
 8017470:	4618      	mov	r0, r3
 8017472:	3714      	adds	r7, #20
 8017474:	46bd      	mov	sp, r7
 8017476:	bd90      	pop	{r4, r7, pc}
 8017478:	200000cc 	.word	0x200000cc

0801747c <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>:

MemoryLeakDetectorNode* MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator* allocator, size_t size, char* memory, bool allocatNodesSeperately)
{
 801747c:	b580      	push	{r7, lr}
 801747e:	b084      	sub	sp, #16
 8017480:	af00      	add	r7, sp, #0
 8017482:	60f8      	str	r0, [r7, #12]
 8017484:	60b9      	str	r1, [r7, #8]
 8017486:	607a      	str	r2, [r7, #4]
 8017488:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (MemoryLeakDetectorNode*) (void*) allocator->allocMemoryLeakNode(sizeof(MemoryLeakDetectorNode));
 801748a:	7e3b      	ldrb	r3, [r7, #24]
 801748c:	2b00      	cmp	r3, #0
 801748e:	d008      	beq.n	80174a2 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x26>
 8017490:	68bb      	ldr	r3, [r7, #8]
 8017492:	681b      	ldr	r3, [r3, #0]
 8017494:	3320      	adds	r3, #32
 8017496:	681b      	ldr	r3, [r3, #0]
 8017498:	2120      	movs	r1, #32
 801749a:	68b8      	ldr	r0, [r7, #8]
 801749c:	4798      	blx	r3
 801749e:	4603      	mov	r3, r0
 80174a0:	e006      	b.n	80174b0 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x34>
    else return getNodeFromMemoryPointer(memory, size);
 80174a2:	687a      	ldr	r2, [r7, #4]
 80174a4:	6839      	ldr	r1, [r7, #0]
 80174a6:	68f8      	ldr	r0, [r7, #12]
 80174a8:	f7ff fdef 	bl	801708a <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>
 80174ac:	4603      	mov	r3, r0
 80174ae:	bf00      	nop
}
 80174b0:	4618      	mov	r0, r3
 80174b2:	3710      	adds	r7, #16
 80174b4:	46bd      	mov	sp, r7
 80174b6:	bd80      	pop	{r7, pc}

080174b8 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 80174b8:	b580      	push	{r7, lr}
 80174ba:	b08a      	sub	sp, #40	; 0x28
 80174bc:	af04      	add	r7, sp, #16
 80174be:	60f8      	str	r0, [r7, #12]
 80174c0:	60b9      	str	r1, [r7, #8]
 80174c2:	607a      	str	r2, [r7, #4]
 80174c4:	603b      	str	r3, [r7, #0]
     * If the same allocation is used and the wrong free is called, it will deallocate the memory leak information
     * without the memory leak detector ever noticing it!
     * So, for malloc, we'll allocate the memory separately so we can detect this and give a proper error.
     */

    char* memory = allocateMemoryWithAccountingInformation(allocator, size, file, line, allocatNodesSeperately);
 80174c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80174ca:	9301      	str	r3, [sp, #4]
 80174cc:	6a3b      	ldr	r3, [r7, #32]
 80174ce:	9300      	str	r3, [sp, #0]
 80174d0:	683b      	ldr	r3, [r7, #0]
 80174d2:	687a      	ldr	r2, [r7, #4]
 80174d4:	68b9      	ldr	r1, [r7, #8]
 80174d6:	68f8      	ldr	r0, [r7, #12]
 80174d8:	f7ff ff76 	bl	80173c8 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>
 80174dc:	6178      	str	r0, [r7, #20]
    if (memory == NULLPTR) return NULLPTR;
 80174de:	697b      	ldr	r3, [r7, #20]
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d101      	bne.n	80174e8 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x30>
 80174e4:	2300      	movs	r3, #0
 80174e6:	e017      	b.n	8017518 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x60>
    MemoryLeakDetectorNode* node = createMemoryLeakAccountingInformation(allocator, size, memory, allocatNodesSeperately);
 80174e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80174ec:	9300      	str	r3, [sp, #0]
 80174ee:	697b      	ldr	r3, [r7, #20]
 80174f0:	687a      	ldr	r2, [r7, #4]
 80174f2:	68b9      	ldr	r1, [r7, #8]
 80174f4:	68f8      	ldr	r0, [r7, #12]
 80174f6:	f7ff ffc1 	bl	801747c <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 80174fa:	6138      	str	r0, [r7, #16]

    storeLeakInformation(node, memory, size, allocator, file, line);
 80174fc:	6a3b      	ldr	r3, [r7, #32]
 80174fe:	9302      	str	r3, [sp, #8]
 8017500:	683b      	ldr	r3, [r7, #0]
 8017502:	9301      	str	r3, [sp, #4]
 8017504:	68bb      	ldr	r3, [r7, #8]
 8017506:	9300      	str	r3, [sp, #0]
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	697a      	ldr	r2, [r7, #20]
 801750c:	6939      	ldr	r1, [r7, #16]
 801750e:	68f8      	ldr	r0, [r7, #12]
 8017510:	f7ff fdcc 	bl	80170ac <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8017514:	693b      	ldr	r3, [r7, #16]
 8017516:	689b      	ldr	r3, [r3, #8]
}
 8017518:	4618      	mov	r0, r3
 801751a:	3718      	adds	r7, #24
 801751c:	46bd      	mov	sp, r7
 801751e:	bd80      	pop	{r7, pc}

08017520 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>:
    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
    if (allocatNodesSeperately) allocator->freeMemoryLeakNode( (char*) node);
}

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, const char* file, size_t line, bool allocatNodesSeperately)
{
 8017520:	b590      	push	{r4, r7, lr}
 8017522:	b089      	sub	sp, #36	; 0x24
 8017524:	af02      	add	r7, sp, #8
 8017526:	60f8      	str	r0, [r7, #12]
 8017528:	60b9      	str	r1, [r7, #8]
 801752a:	607a      	str	r2, [r7, #4]
 801752c:	603b      	str	r3, [r7, #0]
    if (memory == NULLPTR) return;
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	2b00      	cmp	r3, #0
 8017532:	d03a      	beq.n	80175aa <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8a>

    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
 8017534:	68fb      	ldr	r3, [r7, #12]
 8017536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801753a:	331c      	adds	r3, #28
 801753c:	6879      	ldr	r1, [r7, #4]
 801753e:	4618      	mov	r0, r3
 8017540:	f7ff fc13 	bl	8016d6a <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8017544:	6178      	str	r0, [r7, #20]
    if (node == NULLPTR) {
 8017546:	697b      	ldr	r3, [r7, #20]
 8017548:	2b00      	cmp	r3, #0
 801754a:	d10b      	bne.n	8017564 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x44>
        outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 801754c:	68fb      	ldr	r3, [r7, #12]
 801754e:	f103 000c 	add.w	r0, r3, #12
 8017552:	68fb      	ldr	r3, [r7, #12]
 8017554:	685b      	ldr	r3, [r3, #4]
 8017556:	9300      	str	r3, [sp, #0]
 8017558:	68bb      	ldr	r3, [r7, #8]
 801755a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801755c:	6839      	ldr	r1, [r7, #0]
 801755e:	f7ff fa0d 	bl	801697c <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
        return;
 8017562:	e023      	b.n	80175ac <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    }
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (!allocator->hasBeenDestroyed()) {
 8017564:	68b8      	ldr	r0, [r7, #8]
 8017566:	f7f8 ff95 	bl	8010494 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>
 801756a:	4603      	mov	r3, r0
 801756c:	f083 0301 	eor.w	r3, r3, #1
 8017570:	b2db      	uxtb	r3, r3
 8017572:	2b00      	cmp	r3, #0
 8017574:	d01a      	beq.n	80175ac <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
        size_t size = node->size_;
 8017576:	697b      	ldr	r3, [r7, #20]
 8017578:	681b      	ldr	r3, [r3, #0]
 801757a:	613b      	str	r3, [r7, #16]
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 801757c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017580:	9301      	str	r3, [sp, #4]
 8017582:	68bb      	ldr	r3, [r7, #8]
 8017584:	9300      	str	r3, [sp, #0]
 8017586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017588:	683a      	ldr	r2, [r7, #0]
 801758a:	6979      	ldr	r1, [r7, #20]
 801758c:	68f8      	ldr	r0, [r7, #12]
 801758e:	f7ff fe95 	bl	80172bc <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
        allocator->free_memory((char*) memory, size, file, line);
 8017592:	68bb      	ldr	r3, [r7, #8]
 8017594:	681b      	ldr	r3, [r3, #0]
 8017596:	330c      	adds	r3, #12
 8017598:	681c      	ldr	r4, [r3, #0]
 801759a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801759c:	9300      	str	r3, [sp, #0]
 801759e:	683b      	ldr	r3, [r7, #0]
 80175a0:	693a      	ldr	r2, [r7, #16]
 80175a2:	6879      	ldr	r1, [r7, #4]
 80175a4:	68b8      	ldr	r0, [r7, #8]
 80175a6:	47a0      	blx	r4
 80175a8:	e000      	b.n	80175ac <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    if (memory == NULLPTR) return;
 80175aa:	bf00      	nop
    }
}
 80175ac:	371c      	adds	r7, #28
 80175ae:	46bd      	mov	sp, r7
 80175b0:	bd90      	pop	{r4, r7, pc}
	...

080175b4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>:

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, bool allocatNodesSeperately)
{
 80175b4:	b580      	push	{r7, lr}
 80175b6:	b086      	sub	sp, #24
 80175b8:	af02      	add	r7, sp, #8
 80175ba:	60f8      	str	r0, [r7, #12]
 80175bc:	60b9      	str	r1, [r7, #8]
 80175be:	607a      	str	r2, [r7, #4]
 80175c0:	70fb      	strb	r3, [r7, #3]
    deallocMemory(allocator, (char*) memory, UNKNOWN, 0, allocatNodesSeperately);
 80175c2:	4b08      	ldr	r3, [pc, #32]	; (80175e4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb+0x30>)
 80175c4:	681a      	ldr	r2, [r3, #0]
 80175c6:	78fb      	ldrb	r3, [r7, #3]
 80175c8:	9301      	str	r3, [sp, #4]
 80175ca:	2300      	movs	r3, #0
 80175cc:	9300      	str	r3, [sp, #0]
 80175ce:	4613      	mov	r3, r2
 80175d0:	687a      	ldr	r2, [r7, #4]
 80175d2:	68b9      	ldr	r1, [r7, #8]
 80175d4:	68f8      	ldr	r0, [r7, #12]
 80175d6:	f7ff ffa3 	bl	8017520 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 80175da:	bf00      	nop
 80175dc:	3710      	adds	r7, #16
 80175de:	46bd      	mov	sp, r7
 80175e0:	bd80      	pop	{r7, pc}
 80175e2:	bf00      	nop
 80175e4:	20000100 	.word	0x20000100

080175e8 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>:
        deallocMemory(allocator, memory, __FILE__, __LINE__);
    }
}

char* MemoryLeakDetector::reallocMemory(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 80175e8:	b580      	push	{r7, lr}
 80175ea:	b08a      	sub	sp, #40	; 0x28
 80175ec:	af04      	add	r7, sp, #16
 80175ee:	60f8      	str	r0, [r7, #12]
 80175f0:	60b9      	str	r1, [r7, #8]
 80175f2:	607a      	str	r2, [r7, #4]
 80175f4:	603b      	str	r3, [r7, #0]
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (memory) {
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d023      	beq.n	8017644 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x5c>
        MemoryLeakDetectorNode* node = memoryTable_.removeNode(memory);
 80175fc:	68fb      	ldr	r3, [r7, #12]
 80175fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017602:	331c      	adds	r3, #28
 8017604:	6879      	ldr	r1, [r7, #4]
 8017606:	4618      	mov	r0, r3
 8017608:	f7ff fbaf 	bl	8016d6a <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 801760c:	6178      	str	r0, [r7, #20]
        if (node == NULLPTR) {
 801760e:	697b      	ldr	r3, [r7, #20]
 8017610:	2b00      	cmp	r3, #0
 8017612:	d10c      	bne.n	801762e <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x46>
            outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8017614:	68fb      	ldr	r3, [r7, #12]
 8017616:	f103 000c 	add.w	r0, r3, #12
 801761a:	68fb      	ldr	r3, [r7, #12]
 801761c:	685b      	ldr	r3, [r3, #4]
 801761e:	9300      	str	r3, [sp, #0]
 8017620:	68bb      	ldr	r3, [r7, #8]
 8017622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017624:	6a39      	ldr	r1, [r7, #32]
 8017626:	f7ff f9a9 	bl	801697c <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
            return NULLPTR;
 801762a:	2300      	movs	r3, #0
 801762c:	e019      	b.n	8017662 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x7a>
        }
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 801762e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017632:	9301      	str	r3, [sp, #4]
 8017634:	68bb      	ldr	r3, [r7, #8]
 8017636:	9300      	str	r3, [sp, #0]
 8017638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801763a:	6a3a      	ldr	r2, [r7, #32]
 801763c:	6979      	ldr	r1, [r7, #20]
 801763e:	68f8      	ldr	r0, [r7, #12]
 8017640:	f7ff fe3c 	bl	80172bc <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
    }
    return reallocateMemoryAndLeakInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8017644:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017648:	9302      	str	r3, [sp, #8]
 801764a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801764c:	9301      	str	r3, [sp, #4]
 801764e:	6a3b      	ldr	r3, [r7, #32]
 8017650:	9300      	str	r3, [sp, #0]
 8017652:	683b      	ldr	r3, [r7, #0]
 8017654:	687a      	ldr	r2, [r7, #4]
 8017656:	68b9      	ldr	r1, [r7, #8]
 8017658:	68f8      	ldr	r0, [r7, #12]
 801765a:	f7ff fd62 	bl	8017122 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>
 801765e:	4603      	mov	r3, r0
 8017660:	bf00      	nop
}
 8017662:	4618      	mov	r0, r3
 8017664:	3718      	adds	r7, #24
 8017666:	46bd      	mov	sp, r7
 8017668:	bd80      	pop	{r7, pc}

0801766a <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>:

void MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod period)
{
 801766a:	b580      	push	{r7, lr}
 801766c:	b084      	sub	sp, #16
 801766e:	af00      	add	r7, sp, #0
 8017670:	6078      	str	r0, [r7, #4]
 8017672:	460b      	mov	r3, r1
 8017674:	70fb      	strb	r3, [r7, #3]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(period);
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801767c:	331c      	adds	r3, #28
 801767e:	78fa      	ldrb	r2, [r7, #3]
 8017680:	4611      	mov	r1, r2
 8017682:	4618      	mov	r0, r3
 8017684:	f7ff fbc0 	bl	8016e08 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8017688:	60f8      	str	r0, [r7, #12]

    outputBuffer_.startMemoryLeakReporting();
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	330c      	adds	r3, #12
 801768e:	4618      	mov	r0, r3
 8017690:	f7ff f882 	bl	8016798 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>

    while (leak) {
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	2b00      	cmp	r3, #0
 8017698:	d010      	beq.n	80176bc <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x52>
        outputBuffer_.reportMemoryLeak(leak);
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	330c      	adds	r3, #12
 801769e:	68f9      	ldr	r1, [r7, #12]
 80176a0:	4618      	mov	r0, r3
 80176a2:	f7ff f897 	bl	80167d4 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>
        leak = memoryTable_.getNextLeak(leak, period);
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80176ac:	331c      	adds	r3, #28
 80176ae:	78fa      	ldrb	r2, [r7, #3]
 80176b0:	68f9      	ldr	r1, [r7, #12]
 80176b2:	4618      	mov	r0, r3
 80176b4:	f7ff fbcb 	bl	8016e4e <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80176b8:	60f8      	str	r0, [r7, #12]
    while (leak) {
 80176ba:	e7eb      	b.n	8017694 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x2a>
    }

    outputBuffer_.stopMemoryLeakReporting();
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	330c      	adds	r3, #12
 80176c0:	4618      	mov	r0, r3
 80176c2:	f7ff f8e7 	bl	8016894 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>
}
 80176c6:	bf00      	nop
 80176c8:	3710      	adds	r7, #16
 80176ca:	46bd      	mov	sp, r7
 80176cc:	bd80      	pop	{r7, pc}

080176ce <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>:

const char* MemoryLeakDetector::report(MemLeakPeriod period)
{
 80176ce:	b580      	push	{r7, lr}
 80176d0:	b082      	sub	sp, #8
 80176d2:	af00      	add	r7, sp, #0
 80176d4:	6078      	str	r0, [r7, #4]
 80176d6:	460b      	mov	r3, r1
 80176d8:	70fb      	strb	r3, [r7, #3]
    ConstructMemoryLeakReport(period);
 80176da:	78fb      	ldrb	r3, [r7, #3]
 80176dc:	4619      	mov	r1, r3
 80176de:	6878      	ldr	r0, [r7, #4]
 80176e0:	f7ff ffc3 	bl	801766a <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>

    return outputBuffer_.toString();
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	330c      	adds	r3, #12
 80176e8:	4618      	mov	r0, r3
 80176ea:	f7ff f9e5 	bl	8016ab8 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 80176ee:	4603      	mov	r3, r0
}
 80176f0:	4618      	mov	r0, r3
 80176f2:	3708      	adds	r7, #8
 80176f4:	46bd      	mov	sp, r7
 80176f6:	bd80      	pop	{r7, pc}

080176f8 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>:

void MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
{
 80176f8:	b580      	push	{r7, lr}
 80176fa:	b084      	sub	sp, #16
 80176fc:	af00      	add	r7, sp, #0
 80176fe:	6078      	str	r0, [r7, #4]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(mem_leak_period_checking);
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017706:	331c      	adds	r3, #28
 8017708:	2103      	movs	r1, #3
 801770a:	4618      	mov	r0, r3
 801770c:	f7ff fb7c 	bl	8016e08 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8017710:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8017712:	68fb      	ldr	r3, [r7, #12]
 8017714:	2b00      	cmp	r3, #0
 8017716:	d011      	beq.n	801773c <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x44>
        if (leak->period_ == mem_leak_period_checking) leak->period_ = mem_leak_period_enabled;
 8017718:	68fb      	ldr	r3, [r7, #12]
 801771a:	7e1b      	ldrb	r3, [r3, #24]
 801771c:	2b03      	cmp	r3, #3
 801771e:	d102      	bne.n	8017726 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x2e>
 8017720:	68fb      	ldr	r3, [r7, #12]
 8017722:	2202      	movs	r2, #2
 8017724:	761a      	strb	r2, [r3, #24]
        leak = memoryTable_.getNextLeak(leak, mem_leak_period_checking);
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801772c:	331c      	adds	r3, #28
 801772e:	2203      	movs	r2, #3
 8017730:	68f9      	ldr	r1, [r7, #12]
 8017732:	4618      	mov	r0, r3
 8017734:	f7ff fb8b 	bl	8016e4e <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8017738:	60f8      	str	r0, [r7, #12]
    while (leak) {
 801773a:	e7ea      	b.n	8017712 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x1a>
    }
}
 801773c:	bf00      	nop
 801773e:	3710      	adds	r7, #16
 8017740:	46bd      	mov	sp, r7
 8017742:	bd80      	pop	{r7, pc}

08017744 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod period)
{
 8017744:	b580      	push	{r7, lr}
 8017746:	b082      	sub	sp, #8
 8017748:	af00      	add	r7, sp, #0
 801774a:	6078      	str	r0, [r7, #4]
 801774c:	460b      	mov	r3, r1
 801774e:	70fb      	strb	r3, [r7, #3]
    return memoryTable_.getTotalLeaks(period);
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017756:	331c      	adds	r3, #28
 8017758:	78fa      	ldrb	r2, [r7, #3]
 801775a:	4611      	mov	r1, r2
 801775c:	4618      	mov	r0, r3
 801775e:	f7ff fb30 	bl	8016dc2 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>
 8017762:	4603      	mov	r3, r0
}
 8017764:	4618      	mov	r0, r3
 8017766:	3708      	adds	r7, #8
 8017768:	46bd      	mov	sp, r7
 801776a:	bd80      	pop	{r7, pc}

0801776c <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>:
        SimpleString name_;
        SimpleString type_;
        void* ptr_;

        MockOutputParametersListNode* next_;
        MockOutputParametersListNode(const SimpleString& name, const SimpleString& type, void* ptr)
 801776c:	b580      	push	{r7, lr}
 801776e:	b084      	sub	sp, #16
 8017770:	af00      	add	r7, sp, #0
 8017772:	60f8      	str	r0, [r7, #12]
 8017774:	60b9      	str	r1, [r7, #8]
 8017776:	607a      	str	r2, [r7, #4]
 8017778:	603b      	str	r3, [r7, #0]
            : name_(name), type_(type), ptr_(ptr), next_(NULLPTR) {}
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	68b9      	ldr	r1, [r7, #8]
 801777e:	4618      	mov	r0, r3
 8017780:	f7f5 fb13 	bl	800cdaa <_ZN12SimpleStringC1ERKS_>
 8017784:	68fb      	ldr	r3, [r7, #12]
 8017786:	3308      	adds	r3, #8
 8017788:	6879      	ldr	r1, [r7, #4]
 801778a:	4618      	mov	r0, r3
 801778c:	f7f5 fb0d 	bl	800cdaa <_ZN12SimpleStringC1ERKS_>
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	683a      	ldr	r2, [r7, #0]
 8017794:	611a      	str	r2, [r3, #16]
 8017796:	68fb      	ldr	r3, [r7, #12]
 8017798:	2200      	movs	r2, #0
 801779a:	615a      	str	r2, [r3, #20]
 801779c:	68fb      	ldr	r3, [r7, #12]
 801779e:	4618      	mov	r0, r3
 80177a0:	3710      	adds	r7, #16
 80177a2:	46bd      	mov	sp, r7
 80177a4:	bd80      	pop	{r7, pc}

080177a6 <_ZN21MockIgnoredActualCall8withNameERK12SimpleString>:
};

class MockIgnoredActualCall: public MockActualCall
{
public:
    virtual MockActualCall& withName(const SimpleString&) _override { return *this;}
 80177a6:	b480      	push	{r7}
 80177a8:	b083      	sub	sp, #12
 80177aa:	af00      	add	r7, sp, #0
 80177ac:	6078      	str	r0, [r7, #4]
 80177ae:	6039      	str	r1, [r7, #0]
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	4618      	mov	r0, r3
 80177b4:	370c      	adds	r7, #12
 80177b6:	46bd      	mov	sp, r7
 80177b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177bc:	4770      	bx	lr

080177be <_ZN21MockIgnoredActualCall13withCallOrderEj>:
    virtual MockActualCall& withCallOrder(unsigned int) _override { return *this; }
 80177be:	b480      	push	{r7}
 80177c0:	b083      	sub	sp, #12
 80177c2:	af00      	add	r7, sp, #0
 80177c4:	6078      	str	r0, [r7, #4]
 80177c6:	6039      	str	r1, [r7, #0]
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	4618      	mov	r0, r3
 80177cc:	370c      	adds	r7, #12
 80177ce:	46bd      	mov	sp, r7
 80177d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177d4:	4770      	bx	lr

080177d6 <_ZN21MockIgnoredActualCall17withBoolParameterERK12SimpleStringb>:
    virtual MockActualCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 80177d6:	b480      	push	{r7}
 80177d8:	b085      	sub	sp, #20
 80177da:	af00      	add	r7, sp, #0
 80177dc:	60f8      	str	r0, [r7, #12]
 80177de:	60b9      	str	r1, [r7, #8]
 80177e0:	4613      	mov	r3, r2
 80177e2:	71fb      	strb	r3, [r7, #7]
 80177e4:	68fb      	ldr	r3, [r7, #12]
 80177e6:	4618      	mov	r0, r3
 80177e8:	3714      	adds	r7, #20
 80177ea:	46bd      	mov	sp, r7
 80177ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177f0:	4770      	bx	lr

080177f2 <_ZN21MockIgnoredActualCall16withIntParameterERK12SimpleStringi>:
    virtual MockActualCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 80177f2:	b480      	push	{r7}
 80177f4:	b085      	sub	sp, #20
 80177f6:	af00      	add	r7, sp, #0
 80177f8:	60f8      	str	r0, [r7, #12]
 80177fa:	60b9      	str	r1, [r7, #8]
 80177fc:	607a      	str	r2, [r7, #4]
 80177fe:	68fb      	ldr	r3, [r7, #12]
 8017800:	4618      	mov	r0, r3
 8017802:	3714      	adds	r7, #20
 8017804:	46bd      	mov	sp, r7
 8017806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801780a:	4770      	bx	lr

0801780c <_ZN21MockIgnoredActualCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockActualCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override { return *this; }
 801780c:	b480      	push	{r7}
 801780e:	b085      	sub	sp, #20
 8017810:	af00      	add	r7, sp, #0
 8017812:	60f8      	str	r0, [r7, #12]
 8017814:	60b9      	str	r1, [r7, #8]
 8017816:	607a      	str	r2, [r7, #4]
 8017818:	68fb      	ldr	r3, [r7, #12]
 801781a:	4618      	mov	r0, r3
 801781c:	3714      	adds	r7, #20
 801781e:	46bd      	mov	sp, r7
 8017820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017824:	4770      	bx	lr

08017826 <_ZN21MockIgnoredActualCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockActualCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 8017826:	b480      	push	{r7}
 8017828:	b085      	sub	sp, #20
 801782a:	af00      	add	r7, sp, #0
 801782c:	60f8      	str	r0, [r7, #12]
 801782e:	60b9      	str	r1, [r7, #8]
 8017830:	607a      	str	r2, [r7, #4]
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	4618      	mov	r0, r3
 8017836:	3714      	adds	r7, #20
 8017838:	46bd      	mov	sp, r7
 801783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801783e:	4770      	bx	lr

08017840 <_ZN21MockIgnoredActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockActualCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 8017840:	b480      	push	{r7}
 8017842:	b085      	sub	sp, #20
 8017844:	af00      	add	r7, sp, #0
 8017846:	60f8      	str	r0, [r7, #12]
 8017848:	60b9      	str	r1, [r7, #8]
 801784a:	607a      	str	r2, [r7, #4]
 801784c:	68fb      	ldr	r3, [r7, #12]
 801784e:	4618      	mov	r0, r3
 8017850:	3714      	adds	r7, #20
 8017852:	46bd      	mov	sp, r7
 8017854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017858:	4770      	bx	lr

0801785a <_ZN21MockIgnoredActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockActualCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 801785a:	b480      	push	{r7}
 801785c:	b085      	sub	sp, #20
 801785e:	af00      	add	r7, sp, #0
 8017860:	60f8      	str	r0, [r7, #12]
 8017862:	60b9      	str	r1, [r7, #8]
 8017864:	4639      	mov	r1, r7
 8017866:	e881 000c 	stmia.w	r1, {r2, r3}
 801786a:	68fb      	ldr	r3, [r7, #12]
 801786c:	4618      	mov	r0, r3
 801786e:	3714      	adds	r7, #20
 8017870:	46bd      	mov	sp, r7
 8017872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017876:	4770      	bx	lr

08017878 <_ZN21MockIgnoredActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockActualCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 8017878:	b480      	push	{r7}
 801787a:	b085      	sub	sp, #20
 801787c:	af00      	add	r7, sp, #0
 801787e:	60f8      	str	r0, [r7, #12]
 8017880:	60b9      	str	r1, [r7, #8]
 8017882:	4639      	mov	r1, r7
 8017884:	e881 000c 	stmia.w	r1, {r2, r3}
 8017888:	68fb      	ldr	r3, [r7, #12]
 801788a:	4618      	mov	r0, r3
 801788c:	3714      	adds	r7, #20
 801788e:	46bd      	mov	sp, r7
 8017890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017894:	4770      	bx	lr

08017896 <_ZN21MockIgnoredActualCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockActualCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 8017896:	b480      	push	{r7}
 8017898:	b085      	sub	sp, #20
 801789a:	af00      	add	r7, sp, #0
 801789c:	60f8      	str	r0, [r7, #12]
 801789e:	60b9      	str	r1, [r7, #8]
 80178a0:	ed87 0b00 	vstr	d0, [r7]
 80178a4:	68fb      	ldr	r3, [r7, #12]
 80178a6:	4618      	mov	r0, r3
 80178a8:	3714      	adds	r7, #20
 80178aa:	46bd      	mov	sp, r7
 80178ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178b0:	4770      	bx	lr

080178b2 <_ZN21MockIgnoredActualCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockActualCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 80178b2:	b480      	push	{r7}
 80178b4:	b085      	sub	sp, #20
 80178b6:	af00      	add	r7, sp, #0
 80178b8:	60f8      	str	r0, [r7, #12]
 80178ba:	60b9      	str	r1, [r7, #8]
 80178bc:	607a      	str	r2, [r7, #4]
 80178be:	68fb      	ldr	r3, [r7, #12]
 80178c0:	4618      	mov	r0, r3
 80178c2:	3714      	adds	r7, #20
 80178c4:	46bd      	mov	sp, r7
 80178c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ca:	4770      	bx	lr

080178cc <_ZN21MockIgnoredActualCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockActualCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 80178cc:	b480      	push	{r7}
 80178ce:	b085      	sub	sp, #20
 80178d0:	af00      	add	r7, sp, #0
 80178d2:	60f8      	str	r0, [r7, #12]
 80178d4:	60b9      	str	r1, [r7, #8]
 80178d6:	607a      	str	r2, [r7, #4]
 80178d8:	68fb      	ldr	r3, [r7, #12]
 80178da:	4618      	mov	r0, r3
 80178dc:	3714      	adds	r7, #20
 80178de:	46bd      	mov	sp, r7
 80178e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178e4:	4770      	bx	lr

080178e6 <_ZN21MockIgnoredActualCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockActualCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 80178e6:	b480      	push	{r7}
 80178e8:	b085      	sub	sp, #20
 80178ea:	af00      	add	r7, sp, #0
 80178ec:	60f8      	str	r0, [r7, #12]
 80178ee:	60b9      	str	r1, [r7, #8]
 80178f0:	607a      	str	r2, [r7, #4]
 80178f2:	68fb      	ldr	r3, [r7, #12]
 80178f4:	4618      	mov	r0, r3
 80178f6:	3714      	adds	r7, #20
 80178f8:	46bd      	mov	sp, r7
 80178fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178fe:	4770      	bx	lr

08017900 <_ZN21MockIgnoredActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockActualCall& withFunctionPointerParameter(const SimpleString& , void (*)()) _override { return *this; }
 8017900:	b480      	push	{r7}
 8017902:	b085      	sub	sp, #20
 8017904:	af00      	add	r7, sp, #0
 8017906:	60f8      	str	r0, [r7, #12]
 8017908:	60b9      	str	r1, [r7, #8]
 801790a:	607a      	str	r2, [r7, #4]
 801790c:	68fb      	ldr	r3, [r7, #12]
 801790e:	4618      	mov	r0, r3
 8017910:	3714      	adds	r7, #20
 8017912:	46bd      	mov	sp, r7
 8017914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017918:	4770      	bx	lr

0801791a <_ZN21MockIgnoredActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockActualCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override  { return *this; }
 801791a:	b480      	push	{r7}
 801791c:	b085      	sub	sp, #20
 801791e:	af00      	add	r7, sp, #0
 8017920:	60f8      	str	r0, [r7, #12]
 8017922:	60b9      	str	r1, [r7, #8]
 8017924:	607a      	str	r2, [r7, #4]
 8017926:	603b      	str	r3, [r7, #0]
 8017928:	68fb      	ldr	r3, [r7, #12]
 801792a:	4618      	mov	r0, r3
 801792c:	3714      	adds	r7, #20
 801792e:	46bd      	mov	sp, r7
 8017930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017934:	4770      	bx	lr

08017936 <_ZN21MockIgnoredActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockActualCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 8017936:	b480      	push	{r7}
 8017938:	b085      	sub	sp, #20
 801793a:	af00      	add	r7, sp, #0
 801793c:	60f8      	str	r0, [r7, #12]
 801793e:	60b9      	str	r1, [r7, #8]
 8017940:	607a      	str	r2, [r7, #4]
 8017942:	603b      	str	r3, [r7, #0]
 8017944:	68fb      	ldr	r3, [r7, #12]
 8017946:	4618      	mov	r0, r3
 8017948:	3714      	adds	r7, #20
 801794a:	46bd      	mov	sp, r7
 801794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017950:	4770      	bx	lr

08017952 <_ZN21MockIgnoredActualCall19withOutputParameterERK12SimpleStringPv>:
    virtual MockActualCall& withOutputParameter(const SimpleString&, void*) _override { return *this; }
 8017952:	b480      	push	{r7}
 8017954:	b085      	sub	sp, #20
 8017956:	af00      	add	r7, sp, #0
 8017958:	60f8      	str	r0, [r7, #12]
 801795a:	60b9      	str	r1, [r7, #8]
 801795c:	607a      	str	r2, [r7, #4]
 801795e:	68fb      	ldr	r3, [r7, #12]
 8017960:	4618      	mov	r0, r3
 8017962:	3714      	adds	r7, #20
 8017964:	46bd      	mov	sp, r7
 8017966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801796a:	4770      	bx	lr

0801796c <_ZN21MockIgnoredActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:
    virtual MockActualCall& withOutputParameterOfType(const SimpleString&, const SimpleString&, void*) _override { return *this; }
 801796c:	b480      	push	{r7}
 801796e:	b085      	sub	sp, #20
 8017970:	af00      	add	r7, sp, #0
 8017972:	60f8      	str	r0, [r7, #12]
 8017974:	60b9      	str	r1, [r7, #8]
 8017976:	607a      	str	r2, [r7, #4]
 8017978:	603b      	str	r3, [r7, #0]
 801797a:	68fb      	ldr	r3, [r7, #12]
 801797c:	4618      	mov	r0, r3
 801797e:	3714      	adds	r7, #20
 8017980:	46bd      	mov	sp, r7
 8017982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017986:	4770      	bx	lr

08017988 <_ZN21MockIgnoredActualCall14hasReturnValueEv>:

    virtual bool hasReturnValue() _override { return false; }
 8017988:	b480      	push	{r7}
 801798a:	b083      	sub	sp, #12
 801798c:	af00      	add	r7, sp, #0
 801798e:	6078      	str	r0, [r7, #4]
 8017990:	2300      	movs	r3, #0
 8017992:	4618      	mov	r0, r3
 8017994:	370c      	adds	r7, #12
 8017996:	46bd      	mov	sp, r7
 8017998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801799c:	4770      	bx	lr
	...

080179a0 <_ZN21MockIgnoredActualCall11returnValueEv>:
    virtual MockNamedValue returnValue() _override { return MockNamedValue(""); }
 80179a0:	b580      	push	{r7, lr}
 80179a2:	b084      	sub	sp, #16
 80179a4:	af00      	add	r7, sp, #0
 80179a6:	6078      	str	r0, [r7, #4]
 80179a8:	6039      	str	r1, [r7, #0]
 80179aa:	f107 0308 	add.w	r3, r7, #8
 80179ae:	4909      	ldr	r1, [pc, #36]	; (80179d4 <_ZN21MockIgnoredActualCall11returnValueEv+0x34>)
 80179b0:	4618      	mov	r0, r3
 80179b2:	f7f5 f9a6 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80179b6:	f107 0308 	add.w	r3, r7, #8
 80179ba:	4619      	mov	r1, r3
 80179bc:	6878      	ldr	r0, [r7, #4]
 80179be:	f005 fec5 	bl	801d74c <_ZN14MockNamedValueC1ERK12SimpleString>
 80179c2:	f107 0308 	add.w	r3, r7, #8
 80179c6:	4618      	mov	r0, r3
 80179c8:	f7f5 fd53 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80179cc:	6878      	ldr	r0, [r7, #4]
 80179ce:	3710      	adds	r7, #16
 80179d0:	46bd      	mov	sp, r7
 80179d2:	bd80      	pop	{r7, pc}
 80179d4:	08025fa0 	.word	0x08025fa0

080179d8 <_ZN21MockIgnoredActualCall24returnBoolValueOrDefaultEb>:

    virtual bool returnBoolValueOrDefault(bool value) _override { return value; }
 80179d8:	b480      	push	{r7}
 80179da:	b083      	sub	sp, #12
 80179dc:	af00      	add	r7, sp, #0
 80179de:	6078      	str	r0, [r7, #4]
 80179e0:	460b      	mov	r3, r1
 80179e2:	70fb      	strb	r3, [r7, #3]
 80179e4:	78fb      	ldrb	r3, [r7, #3]
 80179e6:	4618      	mov	r0, r3
 80179e8:	370c      	adds	r7, #12
 80179ea:	46bd      	mov	sp, r7
 80179ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179f0:	4770      	bx	lr

080179f2 <_ZN21MockIgnoredActualCall15returnBoolValueEv>:
    virtual bool returnBoolValue() _override { return false; }
 80179f2:	b480      	push	{r7}
 80179f4:	b083      	sub	sp, #12
 80179f6:	af00      	add	r7, sp, #0
 80179f8:	6078      	str	r0, [r7, #4]
 80179fa:	2300      	movs	r3, #0
 80179fc:	4618      	mov	r0, r3
 80179fe:	370c      	adds	r7, #12
 8017a00:	46bd      	mov	sp, r7
 8017a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a06:	4770      	bx	lr

08017a08 <_ZN21MockIgnoredActualCall14returnIntValueEv>:

    virtual int returnIntValue() _override { return 0; }
 8017a08:	b480      	push	{r7}
 8017a0a:	b083      	sub	sp, #12
 8017a0c:	af00      	add	r7, sp, #0
 8017a0e:	6078      	str	r0, [r7, #4]
 8017a10:	2300      	movs	r3, #0
 8017a12:	4618      	mov	r0, r3
 8017a14:	370c      	adds	r7, #12
 8017a16:	46bd      	mov	sp, r7
 8017a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a1c:	4770      	bx	lr

08017a1e <_ZN21MockIgnoredActualCall23returnIntValueOrDefaultEi>:
    virtual int returnIntValueOrDefault(int value) _override { return value; }
 8017a1e:	b480      	push	{r7}
 8017a20:	b083      	sub	sp, #12
 8017a22:	af00      	add	r7, sp, #0
 8017a24:	6078      	str	r0, [r7, #4]
 8017a26:	6039      	str	r1, [r7, #0]
 8017a28:	683b      	ldr	r3, [r7, #0]
 8017a2a:	4618      	mov	r0, r3
 8017a2c:	370c      	adds	r7, #12
 8017a2e:	46bd      	mov	sp, r7
 8017a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a34:	4770      	bx	lr

08017a36 <_ZN21MockIgnoredActualCall26returnUnsignedLongIntValueEv>:

    virtual unsigned long int returnUnsignedLongIntValue() _override { return 0; }
 8017a36:	b480      	push	{r7}
 8017a38:	b083      	sub	sp, #12
 8017a3a:	af00      	add	r7, sp, #0
 8017a3c:	6078      	str	r0, [r7, #4]
 8017a3e:	2300      	movs	r3, #0
 8017a40:	4618      	mov	r0, r3
 8017a42:	370c      	adds	r7, #12
 8017a44:	46bd      	mov	sp, r7
 8017a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a4a:	4770      	bx	lr

08017a4c <_ZN21MockIgnoredActualCall35returnUnsignedLongIntValueOrDefaultEm>:
    virtual unsigned long int returnUnsignedLongIntValueOrDefault(unsigned long int value) _override { return value; }
 8017a4c:	b480      	push	{r7}
 8017a4e:	b083      	sub	sp, #12
 8017a50:	af00      	add	r7, sp, #0
 8017a52:	6078      	str	r0, [r7, #4]
 8017a54:	6039      	str	r1, [r7, #0]
 8017a56:	683b      	ldr	r3, [r7, #0]
 8017a58:	4618      	mov	r0, r3
 8017a5a:	370c      	adds	r7, #12
 8017a5c:	46bd      	mov	sp, r7
 8017a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a62:	4770      	bx	lr

08017a64 <_ZN21MockIgnoredActualCall18returnLongIntValueEv>:

    virtual long int returnLongIntValue() _override { return 0; }
 8017a64:	b480      	push	{r7}
 8017a66:	b083      	sub	sp, #12
 8017a68:	af00      	add	r7, sp, #0
 8017a6a:	6078      	str	r0, [r7, #4]
 8017a6c:	2300      	movs	r3, #0
 8017a6e:	4618      	mov	r0, r3
 8017a70:	370c      	adds	r7, #12
 8017a72:	46bd      	mov	sp, r7
 8017a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a78:	4770      	bx	lr

08017a7a <_ZN21MockIgnoredActualCall27returnLongIntValueOrDefaultEl>:
    virtual long int returnLongIntValueOrDefault(long int value) _override { return value; }
 8017a7a:	b480      	push	{r7}
 8017a7c:	b083      	sub	sp, #12
 8017a7e:	af00      	add	r7, sp, #0
 8017a80:	6078      	str	r0, [r7, #4]
 8017a82:	6039      	str	r1, [r7, #0]
 8017a84:	683b      	ldr	r3, [r7, #0]
 8017a86:	4618      	mov	r0, r3
 8017a88:	370c      	adds	r7, #12
 8017a8a:	46bd      	mov	sp, r7
 8017a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a90:	4770      	bx	lr

08017a92 <_ZN21MockIgnoredActualCall30returnUnsignedLongLongIntValueEv>:

    virtual cpputest_ulonglong returnUnsignedLongLongIntValue() _override { return 0; }
 8017a92:	b580      	push	{r7, lr}
 8017a94:	b082      	sub	sp, #8
 8017a96:	af00      	add	r7, sp, #0
 8017a98:	6078      	str	r0, [r7, #4]
 8017a9a:	6039      	str	r1, [r7, #0]
 8017a9c:	2100      	movs	r1, #0
 8017a9e:	6878      	ldr	r0, [r7, #4]
 8017aa0:	f7f3 f972 	bl	800ad88 <_ZN18cpputest_ulonglongC1Ei>
 8017aa4:	6878      	ldr	r0, [r7, #4]
 8017aa6:	3708      	adds	r7, #8
 8017aa8:	46bd      	mov	sp, r7
 8017aaa:	bd80      	pop	{r7, pc}

08017aac <_ZN21MockIgnoredActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:
    virtual cpputest_ulonglong returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong value) _override { return value; }
 8017aac:	b480      	push	{r7}
 8017aae:	b085      	sub	sp, #20
 8017ab0:	af00      	add	r7, sp, #0
 8017ab2:	60f8      	str	r0, [r7, #12]
 8017ab4:	60b9      	str	r1, [r7, #8]
 8017ab6:	4639      	mov	r1, r7
 8017ab8:	e881 000c 	stmia.w	r1, {r2, r3}
 8017abc:	68fb      	ldr	r3, [r7, #12]
 8017abe:	461a      	mov	r2, r3
 8017ac0:	463b      	mov	r3, r7
 8017ac2:	cb03      	ldmia	r3!, {r0, r1}
 8017ac4:	6010      	str	r0, [r2, #0]
 8017ac6:	6051      	str	r1, [r2, #4]
 8017ac8:	68f8      	ldr	r0, [r7, #12]
 8017aca:	3714      	adds	r7, #20
 8017acc:	46bd      	mov	sp, r7
 8017ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ad2:	4770      	bx	lr

08017ad4 <_ZN21MockIgnoredActualCall22returnLongLongIntValueEv>:

    virtual cpputest_longlong returnLongLongIntValue() _override { return 0; }
 8017ad4:	b580      	push	{r7, lr}
 8017ad6:	b082      	sub	sp, #8
 8017ad8:	af00      	add	r7, sp, #0
 8017ada:	6078      	str	r0, [r7, #4]
 8017adc:	6039      	str	r1, [r7, #0]
 8017ade:	2100      	movs	r1, #0
 8017ae0:	6878      	ldr	r0, [r7, #4]
 8017ae2:	f7f3 f945 	bl	800ad70 <_ZN17cpputest_longlongC1Ei>
 8017ae6:	6878      	ldr	r0, [r7, #4]
 8017ae8:	3708      	adds	r7, #8
 8017aea:	46bd      	mov	sp, r7
 8017aec:	bd80      	pop	{r7, pc}

08017aee <_ZN21MockIgnoredActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:
    virtual cpputest_longlong returnLongLongIntValueOrDefault(cpputest_longlong value) _override { return value; }
 8017aee:	b480      	push	{r7}
 8017af0:	b085      	sub	sp, #20
 8017af2:	af00      	add	r7, sp, #0
 8017af4:	60f8      	str	r0, [r7, #12]
 8017af6:	60b9      	str	r1, [r7, #8]
 8017af8:	4639      	mov	r1, r7
 8017afa:	e881 000c 	stmia.w	r1, {r2, r3}
 8017afe:	68fb      	ldr	r3, [r7, #12]
 8017b00:	461a      	mov	r2, r3
 8017b02:	463b      	mov	r3, r7
 8017b04:	cb03      	ldmia	r3!, {r0, r1}
 8017b06:	6010      	str	r0, [r2, #0]
 8017b08:	6051      	str	r1, [r2, #4]
 8017b0a:	68f8      	ldr	r0, [r7, #12]
 8017b0c:	3714      	adds	r7, #20
 8017b0e:	46bd      	mov	sp, r7
 8017b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b14:	4770      	bx	lr

08017b16 <_ZN21MockIgnoredActualCall22returnUnsignedIntValueEv>:

    virtual unsigned int returnUnsignedIntValue() _override { return 0; }
 8017b16:	b480      	push	{r7}
 8017b18:	b083      	sub	sp, #12
 8017b1a:	af00      	add	r7, sp, #0
 8017b1c:	6078      	str	r0, [r7, #4]
 8017b1e:	2300      	movs	r3, #0
 8017b20:	4618      	mov	r0, r3
 8017b22:	370c      	adds	r7, #12
 8017b24:	46bd      	mov	sp, r7
 8017b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b2a:	4770      	bx	lr

08017b2c <_ZN21MockIgnoredActualCall31returnUnsignedIntValueOrDefaultEj>:
    virtual unsigned int returnUnsignedIntValueOrDefault(unsigned int value) _override { return value; }
 8017b2c:	b480      	push	{r7}
 8017b2e:	b083      	sub	sp, #12
 8017b30:	af00      	add	r7, sp, #0
 8017b32:	6078      	str	r0, [r7, #4]
 8017b34:	6039      	str	r1, [r7, #0]
 8017b36:	683b      	ldr	r3, [r7, #0]
 8017b38:	4618      	mov	r0, r3
 8017b3a:	370c      	adds	r7, #12
 8017b3c:	46bd      	mov	sp, r7
 8017b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b42:	4770      	bx	lr

08017b44 <_ZN21MockIgnoredActualCall17returnDoubleValueEv>:

    virtual double returnDoubleValue() _override { return 0.0; }
 8017b44:	b480      	push	{r7}
 8017b46:	b083      	sub	sp, #12
 8017b48:	af00      	add	r7, sp, #0
 8017b4a:	6078      	str	r0, [r7, #4]
 8017b4c:	f04f 0200 	mov.w	r2, #0
 8017b50:	f04f 0300 	mov.w	r3, #0
 8017b54:	ec43 2b17 	vmov	d7, r2, r3
 8017b58:	eeb0 0a47 	vmov.f32	s0, s14
 8017b5c:	eef0 0a67 	vmov.f32	s1, s15
 8017b60:	370c      	adds	r7, #12
 8017b62:	46bd      	mov	sp, r7
 8017b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b68:	4770      	bx	lr

08017b6a <_ZN21MockIgnoredActualCall26returnDoubleValueOrDefaultEd>:
    virtual double returnDoubleValueOrDefault(double value) _override { return value; }
 8017b6a:	b480      	push	{r7}
 8017b6c:	b085      	sub	sp, #20
 8017b6e:	af00      	add	r7, sp, #0
 8017b70:	60f8      	str	r0, [r7, #12]
 8017b72:	ed87 0b00 	vstr	d0, [r7]
 8017b76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017b7a:	ec43 2b17 	vmov	d7, r2, r3
 8017b7e:	eeb0 0a47 	vmov.f32	s0, s14
 8017b82:	eef0 0a67 	vmov.f32	s1, s15
 8017b86:	3714      	adds	r7, #20
 8017b88:	46bd      	mov	sp, r7
 8017b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b8e:	4770      	bx	lr

08017b90 <_ZN21MockIgnoredActualCall17returnStringValueEv>:

    virtual const char * returnStringValue() _override { return ""; }
 8017b90:	b480      	push	{r7}
 8017b92:	b083      	sub	sp, #12
 8017b94:	af00      	add	r7, sp, #0
 8017b96:	6078      	str	r0, [r7, #4]
 8017b98:	4b03      	ldr	r3, [pc, #12]	; (8017ba8 <_ZN21MockIgnoredActualCall17returnStringValueEv+0x18>)
 8017b9a:	4618      	mov	r0, r3
 8017b9c:	370c      	adds	r7, #12
 8017b9e:	46bd      	mov	sp, r7
 8017ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ba4:	4770      	bx	lr
 8017ba6:	bf00      	nop
 8017ba8:	08025fa0 	.word	0x08025fa0

08017bac <_ZN21MockIgnoredActualCall26returnStringValueOrDefaultEPKc>:
    virtual const char * returnStringValueOrDefault(const char * value) _override { return value; }
 8017bac:	b480      	push	{r7}
 8017bae:	b083      	sub	sp, #12
 8017bb0:	af00      	add	r7, sp, #0
 8017bb2:	6078      	str	r0, [r7, #4]
 8017bb4:	6039      	str	r1, [r7, #0]
 8017bb6:	683b      	ldr	r3, [r7, #0]
 8017bb8:	4618      	mov	r0, r3
 8017bba:	370c      	adds	r7, #12
 8017bbc:	46bd      	mov	sp, r7
 8017bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bc2:	4770      	bx	lr

08017bc4 <_ZN21MockIgnoredActualCall18returnPointerValueEv>:

    virtual void * returnPointerValue() _override { return NULLPTR; }
 8017bc4:	b480      	push	{r7}
 8017bc6:	b083      	sub	sp, #12
 8017bc8:	af00      	add	r7, sp, #0
 8017bca:	6078      	str	r0, [r7, #4]
 8017bcc:	2300      	movs	r3, #0
 8017bce:	4618      	mov	r0, r3
 8017bd0:	370c      	adds	r7, #12
 8017bd2:	46bd      	mov	sp, r7
 8017bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bd8:	4770      	bx	lr

08017bda <_ZN21MockIgnoredActualCall27returnPointerValueOrDefaultEPv>:
    virtual void * returnPointerValueOrDefault(void * value) _override { return value; }
 8017bda:	b480      	push	{r7}
 8017bdc:	b083      	sub	sp, #12
 8017bde:	af00      	add	r7, sp, #0
 8017be0:	6078      	str	r0, [r7, #4]
 8017be2:	6039      	str	r1, [r7, #0]
 8017be4:	683b      	ldr	r3, [r7, #0]
 8017be6:	4618      	mov	r0, r3
 8017be8:	370c      	adds	r7, #12
 8017bea:	46bd      	mov	sp, r7
 8017bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bf0:	4770      	bx	lr

08017bf2 <_ZN21MockIgnoredActualCall23returnConstPointerValueEv>:

    virtual const void * returnConstPointerValue() _override { return NULLPTR; }
 8017bf2:	b480      	push	{r7}
 8017bf4:	b083      	sub	sp, #12
 8017bf6:	af00      	add	r7, sp, #0
 8017bf8:	6078      	str	r0, [r7, #4]
 8017bfa:	2300      	movs	r3, #0
 8017bfc:	4618      	mov	r0, r3
 8017bfe:	370c      	adds	r7, #12
 8017c00:	46bd      	mov	sp, r7
 8017c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c06:	4770      	bx	lr

08017c08 <_ZN21MockIgnoredActualCall32returnConstPointerValueOrDefaultEPKv>:
    virtual const void * returnConstPointerValueOrDefault(const void * value) _override { return value; }
 8017c08:	b480      	push	{r7}
 8017c0a:	b083      	sub	sp, #12
 8017c0c:	af00      	add	r7, sp, #0
 8017c0e:	6078      	str	r0, [r7, #4]
 8017c10:	6039      	str	r1, [r7, #0]
 8017c12:	683b      	ldr	r3, [r7, #0]
 8017c14:	4618      	mov	r0, r3
 8017c16:	370c      	adds	r7, #12
 8017c18:	46bd      	mov	sp, r7
 8017c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c1e:	4770      	bx	lr

08017c20 <_ZN21MockIgnoredActualCall26returnFunctionPointerValueEv>:

    virtual void (*returnFunctionPointerValue())() _override { return NULLPTR; }
 8017c20:	b480      	push	{r7}
 8017c22:	b083      	sub	sp, #12
 8017c24:	af00      	add	r7, sp, #0
 8017c26:	6078      	str	r0, [r7, #4]
 8017c28:	2300      	movs	r3, #0
 8017c2a:	4618      	mov	r0, r3
 8017c2c:	370c      	adds	r7, #12
 8017c2e:	46bd      	mov	sp, r7
 8017c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c34:	4770      	bx	lr

08017c36 <_ZN21MockIgnoredActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:
    virtual void (*returnFunctionPointerValueOrDefault(void (*value)()))() _override { return value; }
 8017c36:	b480      	push	{r7}
 8017c38:	b083      	sub	sp, #12
 8017c3a:	af00      	add	r7, sp, #0
 8017c3c:	6078      	str	r0, [r7, #4]
 8017c3e:	6039      	str	r1, [r7, #0]
 8017c40:	683b      	ldr	r3, [r7, #0]
 8017c42:	4618      	mov	r0, r3
 8017c44:	370c      	adds	r7, #12
 8017c46:	46bd      	mov	sp, r7
 8017c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c4c:	4770      	bx	lr

08017c4e <_ZN21MockIgnoredActualCall8onObjectEPKv>:

    virtual MockActualCall& onObject(const void* ) _override { return *this; }
 8017c4e:	b480      	push	{r7}
 8017c50:	b083      	sub	sp, #12
 8017c52:	af00      	add	r7, sp, #0
 8017c54:	6078      	str	r0, [r7, #4]
 8017c56:	6039      	str	r1, [r7, #0]
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	4618      	mov	r0, r3
 8017c5c:	370c      	adds	r7, #12
 8017c5e:	46bd      	mov	sp, r7
 8017c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c64:	4770      	bx	lr
	...

08017c68 <_ZN14MockActualCallC1Ev>:
#include "CppUTestExt/MockCheckedActualCall.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"
#include "CppUTestExt/MockFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

MockActualCall::MockActualCall()
 8017c68:	b480      	push	{r7}
 8017c6a:	b083      	sub	sp, #12
 8017c6c:	af00      	add	r7, sp, #0
 8017c6e:	6078      	str	r0, [r7, #4]
 8017c70:	4a04      	ldr	r2, [pc, #16]	; (8017c84 <_ZN14MockActualCallC1Ev+0x1c>)
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	601a      	str	r2, [r3, #0]
{
}
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	4618      	mov	r0, r3
 8017c7a:	370c      	adds	r7, #12
 8017c7c:	46bd      	mov	sp, r7
 8017c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c82:	4770      	bx	lr
 8017c84:	08028fa8 	.word	0x08028fa8

08017c88 <_ZN14MockActualCallD1Ev>:

MockActualCall::~MockActualCall()
 8017c88:	b480      	push	{r7}
 8017c8a:	b083      	sub	sp, #12
 8017c8c:	af00      	add	r7, sp, #0
 8017c8e:	6078      	str	r0, [r7, #4]
 8017c90:	4a04      	ldr	r2, [pc, #16]	; (8017ca4 <_ZN14MockActualCallD1Ev+0x1c>)
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	601a      	str	r2, [r3, #0]
{
}
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	4618      	mov	r0, r3
 8017c9a:	370c      	adds	r7, #12
 8017c9c:	46bd      	mov	sp, r7
 8017c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ca2:	4770      	bx	lr
 8017ca4:	08028fa8 	.word	0x08028fa8

08017ca8 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>:

void MockCheckedActualCall::setName(const SimpleString& name)
{
 8017ca8:	b580      	push	{r7, lr}
 8017caa:	b082      	sub	sp, #8
 8017cac:	af00      	add	r7, sp, #0
 8017cae:	6078      	str	r0, [r7, #4]
 8017cb0:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	3304      	adds	r3, #4
 8017cb6:	6839      	ldr	r1, [r7, #0]
 8017cb8:	4618      	mov	r0, r3
 8017cba:	f7f5 f88e 	bl	800cdda <_ZN12SimpleStringaSERKS_>
}
 8017cbe:	bf00      	nop
 8017cc0:	3708      	adds	r7, #8
 8017cc2:	46bd      	mov	sp, r7
 8017cc4:	bd80      	pop	{r7, pc}

08017cc6 <_ZNK21MockCheckedActualCall7getNameEv>:

SimpleString MockCheckedActualCall::getName() const
{
 8017cc6:	b580      	push	{r7, lr}
 8017cc8:	b082      	sub	sp, #8
 8017cca:	af00      	add	r7, sp, #0
 8017ccc:	6078      	str	r0, [r7, #4]
 8017cce:	6039      	str	r1, [r7, #0]
    return functionName_;
 8017cd0:	683b      	ldr	r3, [r7, #0]
 8017cd2:	3304      	adds	r3, #4
 8017cd4:	4619      	mov	r1, r3
 8017cd6:	6878      	ldr	r0, [r7, #4]
 8017cd8:	f7f5 f867 	bl	800cdaa <_ZN12SimpleStringC1ERKS_>
}
 8017cdc:	6878      	ldr	r0, [r7, #4]
 8017cde:	3708      	adds	r7, #8
 8017ce0:	46bd      	mov	sp, r7
 8017ce2:	bd80      	pop	{r7, pc}

08017ce4 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>:

MockCheckedActualCall::MockCheckedActualCall(unsigned int callOrder, MockFailureReporter* reporter, const MockExpectedCallsList& allExpectations)
 8017ce4:	b580      	push	{r7, lr}
 8017ce6:	b084      	sub	sp, #16
 8017ce8:	af00      	add	r7, sp, #0
 8017cea:	60f8      	str	r0, [r7, #12]
 8017cec:	60b9      	str	r1, [r7, #8]
 8017cee:	607a      	str	r2, [r7, #4]
 8017cf0:	603b      	str	r3, [r7, #0]
    : callOrder_(callOrder), reporter_(reporter), state_(CALL_SUCCEED), expectationsChecked_(false), matchingExpectation_(NULLPTR),
      allExpectations_(allExpectations), outputParameterExpectations_(NULLPTR)
 8017cf2:	68fb      	ldr	r3, [r7, #12]
 8017cf4:	4618      	mov	r0, r3
 8017cf6:	f7ff ffb7 	bl	8017c68 <_ZN14MockActualCallC1Ev>
 8017cfa:	4a17      	ldr	r2, [pc, #92]	; (8017d58 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x74>)
 8017cfc:	68fb      	ldr	r3, [r7, #12]
 8017cfe:	601a      	str	r2, [r3, #0]
 8017d00:	68fb      	ldr	r3, [r7, #12]
 8017d02:	3304      	adds	r3, #4
 8017d04:	4915      	ldr	r1, [pc, #84]	; (8017d5c <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x78>)
 8017d06:	4618      	mov	r0, r3
 8017d08:	f7f4 fffb 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8017d0c:	68fb      	ldr	r3, [r7, #12]
 8017d0e:	68ba      	ldr	r2, [r7, #8]
 8017d10:	60da      	str	r2, [r3, #12]
 8017d12:	68fb      	ldr	r3, [r7, #12]
 8017d14:	687a      	ldr	r2, [r7, #4]
 8017d16:	611a      	str	r2, [r3, #16]
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	2202      	movs	r2, #2
 8017d1c:	751a      	strb	r2, [r3, #20]
 8017d1e:	68fb      	ldr	r3, [r7, #12]
 8017d20:	2200      	movs	r2, #0
 8017d22:	755a      	strb	r2, [r3, #21]
 8017d24:	68fb      	ldr	r3, [r7, #12]
 8017d26:	2200      	movs	r2, #0
 8017d28:	619a      	str	r2, [r3, #24]
 8017d2a:	68fb      	ldr	r3, [r7, #12]
 8017d2c:	331c      	adds	r3, #28
 8017d2e:	4618      	mov	r0, r3
 8017d30:	f004 f814 	bl	801bd5c <_ZN21MockExpectedCallsListC1Ev>
 8017d34:	68fb      	ldr	r3, [r7, #12]
 8017d36:	683a      	ldr	r2, [r7, #0]
 8017d38:	625a      	str	r2, [r3, #36]	; 0x24
 8017d3a:	68fb      	ldr	r3, [r7, #12]
 8017d3c:	2200      	movs	r2, #0
 8017d3e:	629a      	str	r2, [r3, #40]	; 0x28
{
    potentiallyMatchingExpectations_.addPotentiallyMatchingExpectations(allExpectations);
 8017d40:	68fb      	ldr	r3, [r7, #12]
 8017d42:	331c      	adds	r3, #28
 8017d44:	6839      	ldr	r1, [r7, #0]
 8017d46:	4618      	mov	r0, r3
 8017d48:	f004 f986 	bl	801c058 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>
}
 8017d4c:	68fb      	ldr	r3, [r7, #12]
 8017d4e:	4618      	mov	r0, r3
 8017d50:	3710      	adds	r7, #16
 8017d52:	46bd      	mov	sp, r7
 8017d54:	bd80      	pop	{r7, pc}
 8017d56:	bf00      	nop
 8017d58:	08028ea8 	.word	0x08028ea8
 8017d5c:	08025fa0 	.word	0x08025fa0

08017d60 <_ZN21MockCheckedActualCallD1Ev>:

MockCheckedActualCall::~MockCheckedActualCall()
 8017d60:	b580      	push	{r7, lr}
 8017d62:	b082      	sub	sp, #8
 8017d64:	af00      	add	r7, sp, #0
 8017d66:	6078      	str	r0, [r7, #4]
 8017d68:	4a0c      	ldr	r2, [pc, #48]	; (8017d9c <_ZN21MockCheckedActualCallD1Ev+0x3c>)
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	601a      	str	r2, [r3, #0]
{
    cleanUpOutputParameterList();
 8017d6e:	6878      	ldr	r0, [r7, #4]
 8017d70:	f001 fae4 	bl	801933c <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>
MockCheckedActualCall::~MockCheckedActualCall()
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	331c      	adds	r3, #28
 8017d78:	4618      	mov	r0, r3
 8017d7a:	f004 f803 	bl	801bd84 <_ZN21MockExpectedCallsListD1Ev>
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	3304      	adds	r3, #4
 8017d82:	4618      	mov	r0, r3
 8017d84:	f7f5 fb75 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	4618      	mov	r0, r3
 8017d8c:	f7ff ff7c 	bl	8017c88 <_ZN14MockActualCallD1Ev>
}
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	4618      	mov	r0, r3
 8017d94:	3708      	adds	r7, #8
 8017d96:	46bd      	mov	sp, r7
 8017d98:	bd80      	pop	{r7, pc}
 8017d9a:	bf00      	nop
 8017d9c:	08028ea8 	.word	0x08028ea8

08017da0 <_ZN21MockCheckedActualCallD0Ev>:
MockCheckedActualCall::~MockCheckedActualCall()
 8017da0:	b580      	push	{r7, lr}
 8017da2:	b082      	sub	sp, #8
 8017da4:	af00      	add	r7, sp, #0
 8017da6:	6078      	str	r0, [r7, #4]
}
 8017da8:	6878      	ldr	r0, [r7, #4]
 8017daa:	f7ff ffd9 	bl	8017d60 <_ZN21MockCheckedActualCallD1Ev>
 8017dae:	212c      	movs	r1, #44	; 0x2c
 8017db0:	6878      	ldr	r0, [r7, #4]
 8017db2:	f7f2 fbf7 	bl	800a5a4 <_ZdlPvj>
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	4618      	mov	r0, r3
 8017dba:	3708      	adds	r7, #8
 8017dbc:	46bd      	mov	sp, r7
 8017dbe:	bd80      	pop	{r7, pc}

08017dc0 <_ZN21MockCheckedActualCall22setMockFailureReporterEP19MockFailureReporter>:

void MockCheckedActualCall::setMockFailureReporter(MockFailureReporter* reporter)
{
 8017dc0:	b480      	push	{r7}
 8017dc2:	b083      	sub	sp, #12
 8017dc4:	af00      	add	r7, sp, #0
 8017dc6:	6078      	str	r0, [r7, #4]
 8017dc8:	6039      	str	r1, [r7, #0]
    reporter_ = reporter;
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	683a      	ldr	r2, [r7, #0]
 8017dce:	611a      	str	r2, [r3, #16]
}
 8017dd0:	bf00      	nop
 8017dd2:	370c      	adds	r7, #12
 8017dd4:	46bd      	mov	sp, r7
 8017dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dda:	4770      	bx	lr

08017ddc <_ZNK21MockCheckedActualCall7getTestEv>:

UtestShell* MockCheckedActualCall::getTest() const
{
 8017ddc:	b580      	push	{r7, lr}
 8017dde:	b082      	sub	sp, #8
 8017de0:	af00      	add	r7, sp, #0
 8017de2:	6078      	str	r0, [r7, #4]
    return reporter_->getTestToFail();
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	691a      	ldr	r2, [r3, #16]
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	691b      	ldr	r3, [r3, #16]
 8017dec:	681b      	ldr	r3, [r3, #0]
 8017dee:	330c      	adds	r3, #12
 8017df0:	681b      	ldr	r3, [r3, #0]
 8017df2:	4610      	mov	r0, r2
 8017df4:	4798      	blx	r3
 8017df6:	4603      	mov	r3, r0
}
 8017df8:	4618      	mov	r0, r3
 8017dfa:	3708      	adds	r7, #8
 8017dfc:	46bd      	mov	sp, r7
 8017dfe:	bd80      	pop	{r7, pc}

08017e00 <_ZN21MockCheckedActualCall8failTestERK11MockFailure>:

void MockCheckedActualCall::failTest(const MockFailure& failure)
{
 8017e00:	b580      	push	{r7, lr}
 8017e02:	b082      	sub	sp, #8
 8017e04:	af00      	add	r7, sp, #0
 8017e06:	6078      	str	r0, [r7, #4]
 8017e08:	6039      	str	r1, [r7, #0]
    if (!hasFailed()) {
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	681b      	ldr	r3, [r3, #0]
 8017e0e:	33c0      	adds	r3, #192	; 0xc0
 8017e10:	681b      	ldr	r3, [r3, #0]
 8017e12:	6878      	ldr	r0, [r7, #4]
 8017e14:	4798      	blx	r3
 8017e16:	4603      	mov	r3, r0
 8017e18:	f083 0301 	eor.w	r3, r3, #1
 8017e1c:	b2db      	uxtb	r3, r3
 8017e1e:	2b00      	cmp	r3, #0
 8017e20:	d010      	beq.n	8017e44 <_ZN21MockCheckedActualCall8failTestERK11MockFailure+0x44>
        setState(CALL_FAILED);
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	681b      	ldr	r3, [r3, #0]
 8017e26:	33ec      	adds	r3, #236	; 0xec
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	2101      	movs	r1, #1
 8017e2c:	6878      	ldr	r0, [r7, #4]
 8017e2e:	4798      	blx	r3
        reporter_->failTest(failure);
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	691a      	ldr	r2, [r3, #16]
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	691b      	ldr	r3, [r3, #16]
 8017e38:	681b      	ldr	r3, [r3, #0]
 8017e3a:	3308      	adds	r3, #8
 8017e3c:	681b      	ldr	r3, [r3, #0]
 8017e3e:	6839      	ldr	r1, [r7, #0]
 8017e40:	4610      	mov	r0, r2
 8017e42:	4798      	blx	r3
    }
}
 8017e44:	bf00      	nop
 8017e46:	3708      	adds	r7, #8
 8017e48:	46bd      	mov	sp, r7
 8017e4a:	bd80      	pop	{r7, pc}

08017e4c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall>:

void MockCheckedActualCall::copyOutputParameters(MockCheckedExpectedCall* expectedCall)
{
 8017e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e50:	b0bc      	sub	sp, #240	; 0xf0
 8017e52:	af00      	add	r7, sp, #0
 8017e54:	6078      	str	r0, [r7, #4]
 8017e56:	6039      	str	r1, [r7, #0]
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017e5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8017e60:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	f000 80f5 	beq.w	8018054 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x208>
    {
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 8017e6a:	683b      	ldr	r3, [r7, #0]
 8017e6c:	681b      	ldr	r3, [r3, #0]
 8017e6e:	339c      	adds	r3, #156	; 0x9c
 8017e70:	681b      	ldr	r3, [r3, #0]
 8017e72:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8017e76:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8017e7a:	6839      	ldr	r1, [r7, #0]
 8017e7c:	4798      	blx	r3
        MockNamedValueCopier* copier = outputParameter.getCopier();
 8017e7e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017e82:	4618      	mov	r0, r3
 8017e84:	f006 fa6c 	bl	801e360 <_ZNK14MockNamedValue9getCopierEv>
 8017e88:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        if (copier)
 8017e8c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d013      	beq.n	8017ebc <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x70>
        {
            copier->copy(p->ptr_, outputParameter.getConstObjectPointer());
 8017e94:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8017e98:	681b      	ldr	r3, [r3, #0]
 8017e9a:	3308      	adds	r3, #8
 8017e9c:	681c      	ldr	r4, [r3, #0]
 8017e9e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8017ea2:	691d      	ldr	r5, [r3, #16]
 8017ea4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017ea8:	4618      	mov	r0, r3
 8017eaa:	f006 fa29 	bl	801e300 <_ZNK14MockNamedValue21getConstObjectPointerEv>
 8017eae:	4603      	mov	r3, r0
 8017eb0:	461a      	mov	r2, r3
 8017eb2:	4629      	mov	r1, r5
 8017eb4:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8017eb8:	47a0      	blx	r4
 8017eba:	e0c0      	b.n	801803e <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if ((outputParameter.getType() == "const void*") && (p->type_ == "void*"))
 8017ebc:	2500      	movs	r5, #0
 8017ebe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8017ec2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8017ec6:	4611      	mov	r1, r2
 8017ec8:	4618      	mov	r0, r3
 8017eca:	f005 ff0c 	bl	801dce6 <_ZNK14MockNamedValue7getTypeEv>
 8017ece:	2601      	movs	r6, #1
 8017ed0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8017ed4:	4962      	ldr	r1, [pc, #392]	; (8018060 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x214>)
 8017ed6:	4618      	mov	r0, r3
 8017ed8:	f7f4 ff13 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8017edc:	f04f 0801 	mov.w	r8, #1
 8017ee0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8017ee4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8017ee8:	4611      	mov	r1, r2
 8017eea:	4618      	mov	r0, r3
 8017eec:	f7f5 facd 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 8017ef0:	4603      	mov	r3, r0
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	d015      	beq.n	8017f22 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 8017ef6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8017efa:	f103 0408 	add.w	r4, r3, #8
 8017efe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8017f02:	4958      	ldr	r1, [pc, #352]	; (8018064 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x218>)
 8017f04:	4618      	mov	r0, r3
 8017f06:	f7f4 fefc 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8017f0a:	2501      	movs	r5, #1
 8017f0c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8017f10:	4619      	mov	r1, r3
 8017f12:	4620      	mov	r0, r4
 8017f14:	f7f5 fab9 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 8017f18:	4603      	mov	r3, r0
 8017f1a:	2b00      	cmp	r3, #0
 8017f1c:	d001      	beq.n	8017f22 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 8017f1e:	2401      	movs	r4, #1
 8017f20:	e000      	b.n	8017f24 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd8>
 8017f22:	2400      	movs	r4, #0
 8017f24:	2d00      	cmp	r5, #0
 8017f26:	d004      	beq.n	8017f32 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xe6>
 8017f28:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8017f2c:	4618      	mov	r0, r3
 8017f2e:	f7f5 faa0 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8017f32:	f1b8 0f00 	cmp.w	r8, #0
 8017f36:	d004      	beq.n	8017f42 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xf6>
 8017f38:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8017f3c:	4618      	mov	r0, r3
 8017f3e:	f7f5 fa98 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8017f42:	2e00      	cmp	r6, #0
 8017f44:	d004      	beq.n	8017f50 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x104>
 8017f46:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8017f4a:	4618      	mov	r0, r3
 8017f4c:	f7f5 fa91 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8017f50:	2c00      	cmp	r4, #0
 8017f52:	d018      	beq.n	8017f86 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x13a>
        {
            const void* data = outputParameter.getConstPointerValue();
 8017f54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017f58:	4618      	mov	r0, r3
 8017f5a:	f006 f959 	bl	801e210 <_ZNK14MockNamedValue20getConstPointerValueEv>
 8017f5e:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
            size_t size = outputParameter.getSize();
 8017f62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017f66:	4618      	mov	r0, r3
 8017f68:	f006 f9e2 	bl	801e330 <_ZNK14MockNamedValue7getSizeEv>
 8017f6c:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
            PlatformSpecificMemCpy(p->ptr_, data, size);
 8017f70:	4b3d      	ldr	r3, [pc, #244]	; (8018068 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x21c>)
 8017f72:	681b      	ldr	r3, [r3, #0]
 8017f74:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8017f78:	6910      	ldr	r0, [r2, #16]
 8017f7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8017f7e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8017f82:	4798      	blx	r3
 8017f84:	e05b      	b.n	801803e <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if (outputParameter.getName() != "")
 8017f86:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8017f8a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8017f8e:	4611      	mov	r1, r2
 8017f90:	4618      	mov	r0, r3
 8017f92:	f005 fe99 	bl	801dcc8 <_ZNK14MockNamedValue7getNameEv>
 8017f96:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8017f9a:	4934      	ldr	r1, [pc, #208]	; (801806c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x220>)
 8017f9c:	4618      	mov	r0, r3
 8017f9e:	f7f4 feb0 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8017fa2:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8017fa6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8017faa:	4611      	mov	r1, r2
 8017fac:	4618      	mov	r0, r3
 8017fae:	f7f5 fab1 	bl	800d514 <_ZneRK12SimpleStringS1_>
 8017fb2:	4603      	mov	r3, r0
 8017fb4:	461c      	mov	r4, r3
 8017fb6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8017fba:	4618      	mov	r0, r3
 8017fbc:	f7f5 fa59 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8017fc0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8017fc4:	4618      	mov	r0, r3
 8017fc6:	f7f5 fa54 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8017fca:	2c00      	cmp	r4, #0
 8017fcc:	d037      	beq.n	801803e <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        {
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 8017fce:	683b      	ldr	r3, [r7, #0]
 8017fd0:	681b      	ldr	r3, [r3, #0]
 8017fd2:	339c      	adds	r3, #156	; 0x9c
 8017fd4:	681b      	ldr	r3, [r3, #0]
 8017fd6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8017fda:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8017fde:	6839      	ldr	r1, [r7, #0]
 8017fe0:	4798      	blx	r3
 8017fe2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8017fe6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8017fea:	4611      	mov	r1, r2
 8017fec:	4618      	mov	r0, r3
 8017fee:	f005 fe7a 	bl	801dce6 <_ZNK14MockNamedValue7getTypeEv>
 8017ff2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8017ff6:	4618      	mov	r0, r3
 8017ff8:	f005 fbd2 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	681b      	ldr	r3, [r3, #0]
 8018000:	33cc      	adds	r3, #204	; 0xcc
 8018002:	681b      	ldr	r3, [r3, #0]
 8018004:	6878      	ldr	r0, [r7, #4]
 8018006:	4798      	blx	r3
 8018008:	4601      	mov	r1, r0
 801800a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801800e:	f107 030c 	add.w	r3, r7, #12
 8018012:	4618      	mov	r0, r3
 8018014:	f005 faee 	bl	801d5f4 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>
            failTest(failure);
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	681b      	ldr	r3, [r3, #0]
 801801c:	33dc      	adds	r3, #220	; 0xdc
 801801e:	681b      	ldr	r3, [r3, #0]
 8018020:	f107 020c 	add.w	r2, r7, #12
 8018024:	4611      	mov	r1, r2
 8018026:	6878      	ldr	r0, [r7, #4]
 8018028:	4798      	blx	r3
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 801802a:	f107 030c 	add.w	r3, r7, #12
 801802e:	4618      	mov	r0, r3
 8018030:	f001 ffe2 	bl	8019ff8 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 8018034:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8018038:	4618      	mov	r0, r3
 801803a:	f7f5 fa1a 	bl	800d472 <_ZN12SimpleStringD1Ev>
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 801803e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018042:	4618      	mov	r0, r3
 8018044:	f005 fbac 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 8018048:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801804c:	695b      	ldr	r3, [r3, #20]
 801804e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8018052:	e705      	b.n	8017e60 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x14>
        }
    }
}
 8018054:	bf00      	nop
 8018056:	37f0      	adds	r7, #240	; 0xf0
 8018058:	46bd      	mov	sp, r7
 801805a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801805e:	bf00      	nop
 8018060:	08025fa4 	.word	0x08025fa4
 8018064:	08025fb0 	.word	0x08025fb0
 8018068:	200000d4 	.word	0x200000d4
 801806c:	08025fa0 	.word	0x08025fa0

08018070 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv>:

void MockCheckedActualCall::completeCallWhenMatchIsFound()
{
 8018070:	b580      	push	{r7, lr}
 8018072:	b084      	sub	sp, #16
 8018074:	af00      	add	r7, sp, #0
 8018076:	6078      	str	r0, [r7, #4]
    // Expectations that don't ignore parameters have higher fulfillment preference than those that ignore parameters

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstFinalizedMatchingExpectation();
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	331c      	adds	r3, #28
 801807c:	4618      	mov	r0, r3
 801807e:	f004 f9bb 	bl	801c3f8 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>
 8018082:	4602      	mov	r2, r0
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	699b      	ldr	r3, [r3, #24]
 801808c:	2b00      	cmp	r3, #0
 801808e:	d00f      	beq.n	80180b0 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x40>
        copyOutputParameters(matchingExpectation_);
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	681b      	ldr	r3, [r3, #0]
 8018094:	33d4      	adds	r3, #212	; 0xd4
 8018096:	681b      	ldr	r3, [r3, #0]
 8018098:	687a      	ldr	r2, [r7, #4]
 801809a:	6992      	ldr	r2, [r2, #24]
 801809c:	4611      	mov	r1, r2
 801809e:	6878      	ldr	r0, [r7, #4]
 80180a0:	4798      	blx	r3
        callHasSucceeded();
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	681b      	ldr	r3, [r3, #0]
 80180a6:	33d0      	adds	r3, #208	; 0xd0
 80180a8:	681b      	ldr	r3, [r3, #0]
 80180aa:	6878      	ldr	r0, [r7, #4]
 80180ac:	4798      	blx	r3
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
        if (matchingExpectationWithIgnoredParameters) {
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
        }
    }
}
 80180ae:	e00f      	b.n	80180d0 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	331c      	adds	r3, #28
 80180b4:	4618      	mov	r0, r3
 80180b6:	f004 f9cc 	bl	801c452 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>
 80180ba:	60f8      	str	r0, [r7, #12]
        if (matchingExpectationWithIgnoredParameters) {
 80180bc:	68fb      	ldr	r3, [r7, #12]
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d006      	beq.n	80180d0 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	681b      	ldr	r3, [r3, #0]
 80180c6:	33d4      	adds	r3, #212	; 0xd4
 80180c8:	681b      	ldr	r3, [r3, #0]
 80180ca:	68f9      	ldr	r1, [r7, #12]
 80180cc:	6878      	ldr	r0, [r7, #4]
 80180ce:	4798      	blx	r3
}
 80180d0:	bf00      	nop
 80180d2:	3710      	adds	r7, #16
 80180d4:	46bd      	mov	sp, r7
 80180d6:	bd80      	pop	{r7, pc}

080180d8 <_ZN21MockCheckedActualCall16callHasSucceededEv>:

void MockCheckedActualCall::callHasSucceeded()
{
 80180d8:	b580      	push	{r7, lr}
 80180da:	b082      	sub	sp, #8
 80180dc:	af00      	add	r7, sp, #0
 80180de:	6078      	str	r0, [r7, #4]
    setState(CALL_SUCCEED);
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	681b      	ldr	r3, [r3, #0]
 80180e4:	33ec      	adds	r3, #236	; 0xec
 80180e6:	681b      	ldr	r3, [r3, #0]
 80180e8:	2102      	movs	r1, #2
 80180ea:	6878      	ldr	r0, [r7, #4]
 80180ec:	4798      	blx	r3
}
 80180ee:	bf00      	nop
 80180f0:	3708      	adds	r7, #8
 80180f2:	46bd      	mov	sp, r7
 80180f4:	bd80      	pop	{r7, pc}

080180f6 <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv>:

void MockCheckedActualCall::discardCurrentlyMatchingExpectations()
{
 80180f6:	b580      	push	{r7, lr}
 80180f8:	b082      	sub	sp, #8
 80180fa:	af00      	add	r7, sp, #0
 80180fc:	6078      	str	r0, [r7, #4]
    if (matchingExpectation_)
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	699b      	ldr	r3, [r3, #24]
 8018102:	2b00      	cmp	r3, #0
 8018104:	d00b      	beq.n	801811e <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv+0x28>
    {
        matchingExpectation_->resetActualCallMatchingState();
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	699a      	ldr	r2, [r3, #24]
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	699b      	ldr	r3, [r3, #24]
 801810e:	681b      	ldr	r3, [r3, #0]
 8018110:	33ec      	adds	r3, #236	; 0xec
 8018112:	681b      	ldr	r3, [r3, #0]
 8018114:	4610      	mov	r0, r2
 8018116:	4798      	blx	r3
        matchingExpectation_ = NULLPTR;
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	2200      	movs	r2, #0
 801811c:	619a      	str	r2, [r3, #24]
    }
    potentiallyMatchingExpectations_.onlyKeepUnmatchingExpectations();
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	331c      	adds	r3, #28
 8018122:	4618      	mov	r0, r3
 8018124:	f004 f85c 	bl	801c1e0 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>
}
 8018128:	bf00      	nop
 801812a:	3708      	adds	r7, #8
 801812c:	46bd      	mov	sp, r7
 801812e:	bd80      	pop	{r7, pc}

08018130 <_ZN21MockCheckedActualCall8withNameERK12SimpleString>:

MockActualCall& MockCheckedActualCall::withName(const SimpleString& name)
{
 8018130:	b590      	push	{r4, r7, lr}
 8018132:	b091      	sub	sp, #68	; 0x44
 8018134:	af00      	add	r7, sp, #0
 8018136:	6078      	str	r0, [r7, #4]
 8018138:	6039      	str	r1, [r7, #0]
    setName(name);
 801813a:	6839      	ldr	r1, [r7, #0]
 801813c:	6878      	ldr	r0, [r7, #4]
 801813e:	f7ff fdb3 	bl	8017ca8 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>
    setState(CALL_IN_PROGRESS);
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	681b      	ldr	r3, [r3, #0]
 8018146:	33ec      	adds	r3, #236	; 0xec
 8018148:	681b      	ldr	r3, [r3, #0]
 801814a:	2100      	movs	r1, #0
 801814c:	6878      	ldr	r0, [r7, #4]
 801814e:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsRelatedTo(name);
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	331c      	adds	r3, #28
 8018154:	6839      	ldr	r1, [r7, #0]
 8018156:	4618      	mov	r0, r3
 8018158:	f003 ffec 	bl	801c134 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>
    if (potentiallyMatchingExpectations_.isEmpty()) {
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	331c      	adds	r3, #28
 8018160:	4618      	mov	r0, r3
 8018162:	f003 fe7c 	bl	801be5e <_ZNK21MockExpectedCallsList7isEmptyEv>
 8018166:	4603      	mov	r3, r0
 8018168:	2b00      	cmp	r3, #0
 801816a:	d01d      	beq.n	80181a8 <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x78>
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	681b      	ldr	r3, [r3, #0]
 8018170:	33cc      	adds	r3, #204	; 0xcc
 8018172:	681b      	ldr	r3, [r3, #0]
 8018174:	6878      	ldr	r0, [r7, #4]
 8018176:	4798      	blx	r3
 8018178:	4601      	mov	r1, r0
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801817e:	f107 000c 	add.w	r0, r7, #12
 8018182:	683a      	ldr	r2, [r7, #0]
 8018184:	f004 fe24 	bl	801cdd0 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
        failTest(failure);
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	681b      	ldr	r3, [r3, #0]
 801818c:	33dc      	adds	r3, #220	; 0xdc
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	f107 020c 	add.w	r2, r7, #12
 8018194:	4611      	mov	r1, r2
 8018196:	6878      	ldr	r0, [r7, #4]
 8018198:	4798      	blx	r3
        return *this;
 801819a:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 801819c:	f107 030c 	add.w	r3, r7, #12
 80181a0:	4618      	mov	r0, r3
 80181a2:	f001 ff4b 	bl	801a03c <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 80181a6:	e006      	b.n	80181b6 <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x86>
    }

    completeCallWhenMatchIsFound();
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	681b      	ldr	r3, [r3, #0]
 80181ac:	33d8      	adds	r3, #216	; 0xd8
 80181ae:	681b      	ldr	r3, [r3, #0]
 80181b0:	6878      	ldr	r0, [r7, #4]
 80181b2:	4798      	blx	r3

    return *this;
 80181b4:	687c      	ldr	r4, [r7, #4]
 80181b6:	4623      	mov	r3, r4
}
 80181b8:	4618      	mov	r0, r3
 80181ba:	3744      	adds	r7, #68	; 0x44
 80181bc:	46bd      	mov	sp, r7
 80181be:	bd90      	pop	{r4, r7, pc}

080181c0 <_ZN21MockCheckedActualCall13withCallOrderEj>:

MockActualCall& MockCheckedActualCall::withCallOrder(unsigned int)
{
 80181c0:	b480      	push	{r7}
 80181c2:	b083      	sub	sp, #12
 80181c4:	af00      	add	r7, sp, #0
 80181c6:	6078      	str	r0, [r7, #4]
 80181c8:	6039      	str	r1, [r7, #0]
    return *this;
 80181ca:	687b      	ldr	r3, [r7, #4]
}
 80181cc:	4618      	mov	r0, r3
 80181ce:	370c      	adds	r7, #12
 80181d0:	46bd      	mov	sp, r7
 80181d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181d6:	4770      	bx	lr

080181d8 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkInputParameter(const MockNamedValue& actualParameter)
{
 80181d8:	b590      	push	{r4, r7, lr}
 80181da:	b097      	sub	sp, #92	; 0x5c
 80181dc:	af02      	add	r7, sp, #8
 80181de:	6078      	str	r0, [r7, #4]
 80181e0:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	681b      	ldr	r3, [r3, #0]
 80181e6:	33c0      	adds	r3, #192	; 0xc0
 80181e8:	681b      	ldr	r3, [r3, #0]
 80181ea:	6878      	ldr	r0, [r7, #4]
 80181ec:	4798      	blx	r3
 80181ee:	4603      	mov	r3, r0
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d164      	bne.n	80182be <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	681b      	ldr	r3, [r3, #0]
 80181f8:	33ec      	adds	r3, #236	; 0xec
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	2100      	movs	r1, #0
 80181fe:	6878      	ldr	r0, [r7, #4]
 8018200:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	681b      	ldr	r3, [r3, #0]
 8018206:	33e8      	adds	r3, #232	; 0xe8
 8018208:	681b      	ldr	r3, [r3, #0]
 801820a:	6878      	ldr	r0, [r7, #4]
 801820c:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithInputParameter(actualParameter);
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	331c      	adds	r3, #28
 8018212:	6839      	ldr	r1, [r7, #0]
 8018214:	4618      	mov	r0, r3
 8018216:	f004 f86b 	bl	801c2f0 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	331c      	adds	r3, #28
 801821e:	4618      	mov	r0, r3
 8018220:	f003 fe1d 	bl	801be5e <_ZNK21MockExpectedCallsList7isEmptyEv>
 8018224:	4603      	mov	r3, r0
 8018226:	2b00      	cmp	r3, #0
 8018228:	d02b      	beq.n	8018282 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	681b      	ldr	r3, [r3, #0]
 801822e:	33cc      	adds	r3, #204	; 0xcc
 8018230:	681b      	ldr	r3, [r3, #0]
 8018232:	6878      	ldr	r0, [r7, #4]
 8018234:	4798      	blx	r3
 8018236:	4604      	mov	r4, r0
 8018238:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801823c:	6879      	ldr	r1, [r7, #4]
 801823e:	4618      	mov	r0, r3
 8018240:	f7ff fd41 	bl	8017cc6 <_ZNK21MockCheckedActualCall7getNameEv>
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018248:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801824c:	f107 000c 	add.w	r0, r7, #12
 8018250:	9300      	str	r3, [sp, #0]
 8018252:	683b      	ldr	r3, [r7, #0]
 8018254:	4621      	mov	r1, r4
 8018256:	f004 fe7f 	bl	801cf58 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 801825a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801825e:	4618      	mov	r0, r3
 8018260:	f7f5 f907 	bl	800d472 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8018264:	687b      	ldr	r3, [r7, #4]
 8018266:	681b      	ldr	r3, [r3, #0]
 8018268:	33dc      	adds	r3, #220	; 0xdc
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	f107 020c 	add.w	r2, r7, #12
 8018270:	4611      	mov	r1, r2
 8018272:	6878      	ldr	r0, [r7, #4]
 8018274:	4798      	blx	r3
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 8018276:	f107 030c 	add.w	r3, r7, #12
 801827a:	4618      	mov	r0, r3
 801827c:	f001 ff00 	bl	801a080 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 8018280:	e01e      	b.n	80182c0 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.parameterWasPassed(actualParameter.getName());
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	f103 041c 	add.w	r4, r3, #28
 8018288:	683b      	ldr	r3, [r7, #0]
 801828a:	681b      	ldr	r3, [r3, #0]
 801828c:	335c      	adds	r3, #92	; 0x5c
 801828e:	681b      	ldr	r3, [r3, #0]
 8018290:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018294:	6839      	ldr	r1, [r7, #0]
 8018296:	4610      	mov	r0, r2
 8018298:	4798      	blx	r3
 801829a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801829e:	4619      	mov	r1, r3
 80182a0:	4620      	mov	r0, r4
 80182a2:	f004 f9b8 	bl	801c616 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>
 80182a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80182aa:	4618      	mov	r0, r3
 80182ac:	f7f5 f8e1 	bl	800d472 <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	681b      	ldr	r3, [r3, #0]
 80182b4:	33d8      	adds	r3, #216	; 0xd8
 80182b6:	681b      	ldr	r3, [r3, #0]
 80182b8:	6878      	ldr	r0, [r7, #4]
 80182ba:	4798      	blx	r3
 80182bc:	e000      	b.n	80182c0 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
 80182be:	bf00      	nop
}
 80182c0:	3754      	adds	r7, #84	; 0x54
 80182c2:	46bd      	mov	sp, r7
 80182c4:	bd90      	pop	{r4, r7, pc}

080182c6 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkOutputParameter(const MockNamedValue& outputParameter)
{
 80182c6:	b590      	push	{r4, r7, lr}
 80182c8:	b097      	sub	sp, #92	; 0x5c
 80182ca:	af02      	add	r7, sp, #8
 80182cc:	6078      	str	r0, [r7, #4]
 80182ce:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	33c0      	adds	r3, #192	; 0xc0
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	6878      	ldr	r0, [r7, #4]
 80182da:	4798      	blx	r3
 80182dc:	4603      	mov	r3, r0
 80182de:	2b00      	cmp	r3, #0
 80182e0:	d164      	bne.n	80183ac <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	681b      	ldr	r3, [r3, #0]
 80182e6:	33ec      	adds	r3, #236	; 0xec
 80182e8:	681b      	ldr	r3, [r3, #0]
 80182ea:	2100      	movs	r1, #0
 80182ec:	6878      	ldr	r0, [r7, #4]
 80182ee:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	681b      	ldr	r3, [r3, #0]
 80182f4:	33e8      	adds	r3, #232	; 0xe8
 80182f6:	681b      	ldr	r3, [r3, #0]
 80182f8:	6878      	ldr	r0, [r7, #4]
 80182fa:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithOutputParameter(outputParameter);
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	331c      	adds	r3, #28
 8018300:	6839      	ldr	r1, [r7, #0]
 8018302:	4618      	mov	r0, r3
 8018304:	f004 f820 	bl	801c348 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	331c      	adds	r3, #28
 801830c:	4618      	mov	r0, r3
 801830e:	f003 fda6 	bl	801be5e <_ZNK21MockExpectedCallsList7isEmptyEv>
 8018312:	4603      	mov	r3, r0
 8018314:	2b00      	cmp	r3, #0
 8018316:	d02b      	beq.n	8018370 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	681b      	ldr	r3, [r3, #0]
 801831c:	33cc      	adds	r3, #204	; 0xcc
 801831e:	681b      	ldr	r3, [r3, #0]
 8018320:	6878      	ldr	r0, [r7, #4]
 8018322:	4798      	blx	r3
 8018324:	4604      	mov	r4, r0
 8018326:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801832a:	6879      	ldr	r1, [r7, #4]
 801832c:	4618      	mov	r0, r3
 801832e:	f7ff fcca 	bl	8017cc6 <_ZNK21MockCheckedActualCall7getNameEv>
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018336:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801833a:	f107 000c 	add.w	r0, r7, #12
 801833e:	9300      	str	r3, [sp, #0]
 8018340:	683b      	ldr	r3, [r7, #0]
 8018342:	4621      	mov	r1, r4
 8018344:	f004 ff6a 	bl	801d21c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 8018348:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801834c:	4618      	mov	r0, r3
 801834e:	f7f5 f890 	bl	800d472 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	681b      	ldr	r3, [r3, #0]
 8018356:	33dc      	adds	r3, #220	; 0xdc
 8018358:	681b      	ldr	r3, [r3, #0]
 801835a:	f107 020c 	add.w	r2, r7, #12
 801835e:	4611      	mov	r1, r2
 8018360:	6878      	ldr	r0, [r7, #4]
 8018362:	4798      	blx	r3
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 8018364:	f107 030c 	add.w	r3, r7, #12
 8018368:	4618      	mov	r0, r3
 801836a:	f001 feab 	bl	801a0c4 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 801836e:	e01e      	b.n	80183ae <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.outputParameterWasPassed(outputParameter.getName());
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	f103 041c 	add.w	r4, r3, #28
 8018376:	683b      	ldr	r3, [r7, #0]
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	335c      	adds	r3, #92	; 0x5c
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018382:	6839      	ldr	r1, [r7, #0]
 8018384:	4610      	mov	r0, r2
 8018386:	4798      	blx	r3
 8018388:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801838c:	4619      	mov	r1, r3
 801838e:	4620      	mov	r0, r4
 8018390:	f004 f95e 	bl	801c650 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>
 8018394:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018398:	4618      	mov	r0, r3
 801839a:	f7f5 f86a 	bl	800d472 <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	681b      	ldr	r3, [r3, #0]
 80183a2:	33d8      	adds	r3, #216	; 0xd8
 80183a4:	681b      	ldr	r3, [r3, #0]
 80183a6:	6878      	ldr	r0, [r7, #4]
 80183a8:	4798      	blx	r3
 80183aa:	e000      	b.n	80183ae <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
 80183ac:	bf00      	nop
}
 80183ae:	3754      	adds	r7, #84	; 0x54
 80183b0:	46bd      	mov	sp, r7
 80183b2:	bd90      	pop	{r4, r7, pc}

080183b4 <_ZN21MockCheckedActualCall17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockCheckedActualCall::withBoolParameter(const SimpleString& name, bool value)
{
 80183b4:	b590      	push	{r4, r7, lr}
 80183b6:	b093      	sub	sp, #76	; 0x4c
 80183b8:	af00      	add	r7, sp, #0
 80183ba:	60f8      	str	r0, [r7, #12]
 80183bc:	60b9      	str	r1, [r7, #8]
 80183be:	4613      	mov	r3, r2
 80183c0:	71fb      	strb	r3, [r7, #7]
    MockNamedValue actualParameter(name);
 80183c2:	f107 0310 	add.w	r3, r7, #16
 80183c6:	68b9      	ldr	r1, [r7, #8]
 80183c8:	4618      	mov	r0, r3
 80183ca:	f005 f9bf 	bl	801d74c <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80183ce:	79fa      	ldrb	r2, [r7, #7]
 80183d0:	f107 0310 	add.w	r3, r7, #16
 80183d4:	4611      	mov	r1, r2
 80183d6:	4618      	mov	r0, r3
 80183d8:	f005 fa0a 	bl	801d7f0 <_ZN14MockNamedValue8setValueEb>
    checkInputParameter(actualParameter);
 80183dc:	68fb      	ldr	r3, [r7, #12]
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	33e0      	adds	r3, #224	; 0xe0
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	f107 0210 	add.w	r2, r7, #16
 80183e8:	4611      	mov	r1, r2
 80183ea:	68f8      	ldr	r0, [r7, #12]
 80183ec:	4798      	blx	r3
    return *this;
 80183ee:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80183f0:	f107 0310 	add.w	r3, r7, #16
 80183f4:	4618      	mov	r0, r3
 80183f6:	f005 f9d3 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
    return *this;
 80183fa:	4623      	mov	r3, r4
}
 80183fc:	4618      	mov	r0, r3
 80183fe:	374c      	adds	r7, #76	; 0x4c
 8018400:	46bd      	mov	sp, r7
 8018402:	bd90      	pop	{r4, r7, pc}

08018404 <_ZN21MockCheckedActualCall24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockCheckedActualCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 8018404:	b590      	push	{r4, r7, lr}
 8018406:	b093      	sub	sp, #76	; 0x4c
 8018408:	af00      	add	r7, sp, #0
 801840a:	60f8      	str	r0, [r7, #12]
 801840c:	60b9      	str	r1, [r7, #8]
 801840e:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8018410:	f107 0310 	add.w	r3, r7, #16
 8018414:	68b9      	ldr	r1, [r7, #8]
 8018416:	4618      	mov	r0, r3
 8018418:	f005 f998 	bl	801d74c <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801841c:	f107 0310 	add.w	r3, r7, #16
 8018420:	6879      	ldr	r1, [r7, #4]
 8018422:	4618      	mov	r0, r3
 8018424:	f005 fa08 	bl	801d838 <_ZN14MockNamedValue8setValueEj>
    checkInputParameter(actualParameter);
 8018428:	68fb      	ldr	r3, [r7, #12]
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	33e0      	adds	r3, #224	; 0xe0
 801842e:	681b      	ldr	r3, [r3, #0]
 8018430:	f107 0210 	add.w	r2, r7, #16
 8018434:	4611      	mov	r1, r2
 8018436:	68f8      	ldr	r0, [r7, #12]
 8018438:	4798      	blx	r3
    return *this;
 801843a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801843c:	f107 0310 	add.w	r3, r7, #16
 8018440:	4618      	mov	r0, r3
 8018442:	f005 f9ad 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
    return *this;
 8018446:	4623      	mov	r3, r4
}
 8018448:	4618      	mov	r0, r3
 801844a:	374c      	adds	r7, #76	; 0x4c
 801844c:	46bd      	mov	sp, r7
 801844e:	bd90      	pop	{r4, r7, pc}

08018450 <_ZN21MockCheckedActualCall16withIntParameterERK12SimpleStringi>:

MockActualCall& MockCheckedActualCall::withIntParameter(const SimpleString& name, int value)
{
 8018450:	b590      	push	{r4, r7, lr}
 8018452:	b093      	sub	sp, #76	; 0x4c
 8018454:	af00      	add	r7, sp, #0
 8018456:	60f8      	str	r0, [r7, #12]
 8018458:	60b9      	str	r1, [r7, #8]
 801845a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801845c:	f107 0310 	add.w	r3, r7, #16
 8018460:	68b9      	ldr	r1, [r7, #8]
 8018462:	4618      	mov	r0, r3
 8018464:	f005 f972 	bl	801d74c <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018468:	f107 0310 	add.w	r3, r7, #16
 801846c:	6879      	ldr	r1, [r7, #4]
 801846e:	4618      	mov	r0, r3
 8018470:	f005 fa04 	bl	801d87c <_ZN14MockNamedValue8setValueEi>
    checkInputParameter(actualParameter);
 8018474:	68fb      	ldr	r3, [r7, #12]
 8018476:	681b      	ldr	r3, [r3, #0]
 8018478:	33e0      	adds	r3, #224	; 0xe0
 801847a:	681b      	ldr	r3, [r3, #0]
 801847c:	f107 0210 	add.w	r2, r7, #16
 8018480:	4611      	mov	r1, r2
 8018482:	68f8      	ldr	r0, [r7, #12]
 8018484:	4798      	blx	r3
    return *this;
 8018486:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018488:	f107 0310 	add.w	r3, r7, #16
 801848c:	4618      	mov	r0, r3
 801848e:	f005 f987 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
    return *this;
 8018492:	4623      	mov	r3, r4
}
 8018494:	4618      	mov	r0, r3
 8018496:	374c      	adds	r7, #76	; 0x4c
 8018498:	46bd      	mov	sp, r7
 801849a:	bd90      	pop	{r4, r7, pc}

0801849c <_ZN21MockCheckedActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockCheckedActualCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 801849c:	b590      	push	{r4, r7, lr}
 801849e:	b093      	sub	sp, #76	; 0x4c
 80184a0:	af00      	add	r7, sp, #0
 80184a2:	60f8      	str	r0, [r7, #12]
 80184a4:	60b9      	str	r1, [r7, #8]
 80184a6:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80184a8:	f107 0310 	add.w	r3, r7, #16
 80184ac:	68b9      	ldr	r1, [r7, #8]
 80184ae:	4618      	mov	r0, r3
 80184b0:	f005 f94c 	bl	801d74c <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80184b4:	f107 0310 	add.w	r3, r7, #16
 80184b8:	6879      	ldr	r1, [r7, #4]
 80184ba:	4618      	mov	r0, r3
 80184bc:	f005 fa22 	bl	801d904 <_ZN14MockNamedValue8setValueEm>
    checkInputParameter(actualParameter);
 80184c0:	68fb      	ldr	r3, [r7, #12]
 80184c2:	681b      	ldr	r3, [r3, #0]
 80184c4:	33e0      	adds	r3, #224	; 0xe0
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	f107 0210 	add.w	r2, r7, #16
 80184cc:	4611      	mov	r1, r2
 80184ce:	68f8      	ldr	r0, [r7, #12]
 80184d0:	4798      	blx	r3
    return *this;
 80184d2:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80184d4:	f107 0310 	add.w	r3, r7, #16
 80184d8:	4618      	mov	r0, r3
 80184da:	f005 f961 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
    return *this;
 80184de:	4623      	mov	r3, r4
}
 80184e0:	4618      	mov	r0, r3
 80184e2:	374c      	adds	r7, #76	; 0x4c
 80184e4:	46bd      	mov	sp, r7
 80184e6:	bd90      	pop	{r4, r7, pc}

080184e8 <_ZN21MockCheckedActualCall20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockCheckedActualCall::withLongIntParameter(const SimpleString& name, long int value)
{
 80184e8:	b590      	push	{r4, r7, lr}
 80184ea:	b093      	sub	sp, #76	; 0x4c
 80184ec:	af00      	add	r7, sp, #0
 80184ee:	60f8      	str	r0, [r7, #12]
 80184f0:	60b9      	str	r1, [r7, #8]
 80184f2:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80184f4:	f107 0310 	add.w	r3, r7, #16
 80184f8:	68b9      	ldr	r1, [r7, #8]
 80184fa:	4618      	mov	r0, r3
 80184fc:	f005 f926 	bl	801d74c <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018500:	f107 0310 	add.w	r3, r7, #16
 8018504:	6879      	ldr	r1, [r7, #4]
 8018506:	4618      	mov	r0, r3
 8018508:	f005 f9da 	bl	801d8c0 <_ZN14MockNamedValue8setValueEl>
    checkInputParameter(actualParameter);
 801850c:	68fb      	ldr	r3, [r7, #12]
 801850e:	681b      	ldr	r3, [r3, #0]
 8018510:	33e0      	adds	r3, #224	; 0xe0
 8018512:	681b      	ldr	r3, [r3, #0]
 8018514:	f107 0210 	add.w	r2, r7, #16
 8018518:	4611      	mov	r1, r2
 801851a:	68f8      	ldr	r0, [r7, #12]
 801851c:	4798      	blx	r3
    return *this;
 801851e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018520:	f107 0310 	add.w	r3, r7, #16
 8018524:	4618      	mov	r0, r3
 8018526:	f005 f93b 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
    return *this;
 801852a:	4623      	mov	r3, r4
}
 801852c:	4618      	mov	r0, r3
 801852e:	374c      	adds	r7, #76	; 0x4c
 8018530:	46bd      	mov	sp, r7
 8018532:	bd90      	pop	{r4, r7, pc}

08018534 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockCheckedActualCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8018534:	b5b0      	push	{r4, r5, r7, lr}
 8018536:	b086      	sub	sp, #24
 8018538:	af02      	add	r7, sp, #8
 801853a:	60f8      	str	r0, [r7, #12]
 801853c:	60b9      	str	r1, [r7, #8]
 801853e:	4639      	mov	r1, r7
 8018540:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8018544:	f7fb ffc0 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 8018548:	4604      	mov	r4, r0
 801854a:	6823      	ldr	r3, [r4, #0]
 801854c:	3368      	adds	r3, #104	; 0x68
 801854e:	681d      	ldr	r5, [r3, #0]
 8018550:	f7fb ffca 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018554:	4603      	mov	r3, r0
 8018556:	9300      	str	r3, [sp, #0]
 8018558:	f44f 7385 	mov.w	r3, #266	; 0x10a
 801855c:	4a04      	ldr	r2, [pc, #16]	; (8018570 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801855e:	4905      	ldr	r1, [pc, #20]	; (8018574 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 8018560:	4620      	mov	r0, r4
 8018562:	47a8      	blx	r5
    return *this;
 8018564:	68fb      	ldr	r3, [r7, #12]
}
 8018566:	4618      	mov	r0, r3
 8018568:	3710      	adds	r7, #16
 801856a:	46bd      	mov	sp, r7
 801856c:	bdb0      	pop	{r4, r5, r7, pc}
 801856e:	bf00      	nop
 8018570:	08025fb8 	.word	0x08025fb8
 8018574:	08025fd4 	.word	0x08025fd4

08018578 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockCheckedActualCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8018578:	b5b0      	push	{r4, r5, r7, lr}
 801857a:	b086      	sub	sp, #24
 801857c:	af02      	add	r7, sp, #8
 801857e:	60f8      	str	r0, [r7, #12]
 8018580:	60b9      	str	r1, [r7, #8]
 8018582:	4639      	mov	r1, r7
 8018584:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8018588:	f7fb ff9e 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 801858c:	4604      	mov	r4, r0
 801858e:	6823      	ldr	r3, [r4, #0]
 8018590:	3368      	adds	r3, #104	; 0x68
 8018592:	681d      	ldr	r5, [r3, #0]
 8018594:	f7fb ffa8 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018598:	4603      	mov	r3, r0
 801859a:	9300      	str	r3, [sp, #0]
 801859c:	f44f 7388 	mov.w	r3, #272	; 0x110
 80185a0:	4a04      	ldr	r2, [pc, #16]	; (80185b4 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 80185a2:	4905      	ldr	r1, [pc, #20]	; (80185b8 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 80185a4:	4620      	mov	r0, r4
 80185a6:	47a8      	blx	r5
    return *this;
 80185a8:	68fb      	ldr	r3, [r7, #12]
}
 80185aa:	4618      	mov	r0, r3
 80185ac:	3710      	adds	r7, #16
 80185ae:	46bd      	mov	sp, r7
 80185b0:	bdb0      	pop	{r4, r5, r7, pc}
 80185b2:	bf00      	nop
 80185b4:	08025fb8 	.word	0x08025fb8
 80185b8:	08026000 	.word	0x08026000

080185bc <_ZN21MockCheckedActualCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockCheckedActualCall::withDoubleParameter(const SimpleString& name, double value)
{
 80185bc:	b590      	push	{r4, r7, lr}
 80185be:	b093      	sub	sp, #76	; 0x4c
 80185c0:	af00      	add	r7, sp, #0
 80185c2:	60f8      	str	r0, [r7, #12]
 80185c4:	60b9      	str	r1, [r7, #8]
 80185c6:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue actualParameter(name);
 80185ca:	f107 0310 	add.w	r3, r7, #16
 80185ce:	68b9      	ldr	r1, [r7, #8]
 80185d0:	4618      	mov	r0, r3
 80185d2:	f005 f8bb 	bl	801d74c <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80185d6:	f107 0310 	add.w	r3, r7, #16
 80185da:	ed97 0b00 	vldr	d0, [r7]
 80185de:	4618      	mov	r0, r3
 80185e0:	f005 f9ee 	bl	801d9c0 <_ZN14MockNamedValue8setValueEd>
    checkInputParameter(actualParameter);
 80185e4:	68fb      	ldr	r3, [r7, #12]
 80185e6:	681b      	ldr	r3, [r3, #0]
 80185e8:	33e0      	adds	r3, #224	; 0xe0
 80185ea:	681b      	ldr	r3, [r3, #0]
 80185ec:	f107 0210 	add.w	r2, r7, #16
 80185f0:	4611      	mov	r1, r2
 80185f2:	68f8      	ldr	r0, [r7, #12]
 80185f4:	4798      	blx	r3
    return *this;
 80185f6:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80185f8:	f107 0310 	add.w	r3, r7, #16
 80185fc:	4618      	mov	r0, r3
 80185fe:	f005 f8cf 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
    return *this;
 8018602:	4623      	mov	r3, r4
}
 8018604:	4618      	mov	r0, r3
 8018606:	374c      	adds	r7, #76	; 0x4c
 8018608:	46bd      	mov	sp, r7
 801860a:	bd90      	pop	{r4, r7, pc}

0801860c <_ZN21MockCheckedActualCall19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockCheckedActualCall::withStringParameter(const SimpleString& name, const char* value)
{
 801860c:	b590      	push	{r4, r7, lr}
 801860e:	b093      	sub	sp, #76	; 0x4c
 8018610:	af00      	add	r7, sp, #0
 8018612:	60f8      	str	r0, [r7, #12]
 8018614:	60b9      	str	r1, [r7, #8]
 8018616:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8018618:	f107 0310 	add.w	r3, r7, #16
 801861c:	68b9      	ldr	r1, [r7, #8]
 801861e:	4618      	mov	r0, r3
 8018620:	f005 f894 	bl	801d74c <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018624:	f107 0310 	add.w	r3, r7, #16
 8018628:	6879      	ldr	r1, [r7, #4]
 801862a:	4618      	mov	r0, r3
 801862c:	f005 fa72 	bl	801db14 <_ZN14MockNamedValue8setValueEPKc>
    checkInputParameter(actualParameter);
 8018630:	68fb      	ldr	r3, [r7, #12]
 8018632:	681b      	ldr	r3, [r3, #0]
 8018634:	33e0      	adds	r3, #224	; 0xe0
 8018636:	681b      	ldr	r3, [r3, #0]
 8018638:	f107 0210 	add.w	r2, r7, #16
 801863c:	4611      	mov	r1, r2
 801863e:	68f8      	ldr	r0, [r7, #12]
 8018640:	4798      	blx	r3
    return *this;
 8018642:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018644:	f107 0310 	add.w	r3, r7, #16
 8018648:	4618      	mov	r0, r3
 801864a:	f005 f8a9 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
    return *this;
 801864e:	4623      	mov	r3, r4
}
 8018650:	4618      	mov	r0, r3
 8018652:	374c      	adds	r7, #76	; 0x4c
 8018654:	46bd      	mov	sp, r7
 8018656:	bd90      	pop	{r4, r7, pc}

08018658 <_ZN21MockCheckedActualCall20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withPointerParameter(const SimpleString& name, void* value)
{
 8018658:	b590      	push	{r4, r7, lr}
 801865a:	b093      	sub	sp, #76	; 0x4c
 801865c:	af00      	add	r7, sp, #0
 801865e:	60f8      	str	r0, [r7, #12]
 8018660:	60b9      	str	r1, [r7, #8]
 8018662:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8018664:	f107 0310 	add.w	r3, r7, #16
 8018668:	68b9      	ldr	r1, [r7, #8]
 801866a:	4618      	mov	r0, r3
 801866c:	f005 f86e 	bl	801d74c <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018670:	f107 0310 	add.w	r3, r7, #16
 8018674:	6879      	ldr	r1, [r7, #4]
 8018676:	4618      	mov	r0, r3
 8018678:	f005 f9e6 	bl	801da48 <_ZN14MockNamedValue8setValueEPv>
    checkInputParameter(actualParameter);
 801867c:	68fb      	ldr	r3, [r7, #12]
 801867e:	681b      	ldr	r3, [r3, #0]
 8018680:	33e0      	adds	r3, #224	; 0xe0
 8018682:	681b      	ldr	r3, [r3, #0]
 8018684:	f107 0210 	add.w	r2, r7, #16
 8018688:	4611      	mov	r1, r2
 801868a:	68f8      	ldr	r0, [r7, #12]
 801868c:	4798      	blx	r3
    return *this;
 801868e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018690:	f107 0310 	add.w	r3, r7, #16
 8018694:	4618      	mov	r0, r3
 8018696:	f005 f883 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
    return *this;
 801869a:	4623      	mov	r3, r4
}
 801869c:	4618      	mov	r0, r3
 801869e:	374c      	adds	r7, #76	; 0x4c
 80186a0:	46bd      	mov	sp, r7
 80186a2:	bd90      	pop	{r4, r7, pc}

080186a4 <_ZN21MockCheckedActualCall25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockCheckedActualCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 80186a4:	b590      	push	{r4, r7, lr}
 80186a6:	b093      	sub	sp, #76	; 0x4c
 80186a8:	af00      	add	r7, sp, #0
 80186aa:	60f8      	str	r0, [r7, #12]
 80186ac:	60b9      	str	r1, [r7, #8]
 80186ae:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80186b0:	f107 0310 	add.w	r3, r7, #16
 80186b4:	68b9      	ldr	r1, [r7, #8]
 80186b6:	4618      	mov	r0, r3
 80186b8:	f005 f848 	bl	801d74c <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80186bc:	f107 0310 	add.w	r3, r7, #16
 80186c0:	6879      	ldr	r1, [r7, #4]
 80186c2:	4618      	mov	r0, r3
 80186c4:	f005 f9e2 	bl	801da8c <_ZN14MockNamedValue8setValueEPKv>
    checkInputParameter(actualParameter);
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	681b      	ldr	r3, [r3, #0]
 80186cc:	33e0      	adds	r3, #224	; 0xe0
 80186ce:	681b      	ldr	r3, [r3, #0]
 80186d0:	f107 0210 	add.w	r2, r7, #16
 80186d4:	4611      	mov	r1, r2
 80186d6:	68f8      	ldr	r0, [r7, #12]
 80186d8:	4798      	blx	r3
    return *this;
 80186da:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80186dc:	f107 0310 	add.w	r3, r7, #16
 80186e0:	4618      	mov	r0, r3
 80186e2:	f005 f85d 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
    return *this;
 80186e6:	4623      	mov	r3, r4
}
 80186e8:	4618      	mov	r0, r3
 80186ea:	374c      	adds	r7, #76	; 0x4c
 80186ec:	46bd      	mov	sp, r7
 80186ee:	bd90      	pop	{r4, r7, pc}

080186f0 <_ZN21MockCheckedActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockCheckedActualCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 80186f0:	b590      	push	{r4, r7, lr}
 80186f2:	b093      	sub	sp, #76	; 0x4c
 80186f4:	af00      	add	r7, sp, #0
 80186f6:	60f8      	str	r0, [r7, #12]
 80186f8:	60b9      	str	r1, [r7, #8]
 80186fa:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80186fc:	f107 0310 	add.w	r3, r7, #16
 8018700:	68b9      	ldr	r1, [r7, #8]
 8018702:	4618      	mov	r0, r3
 8018704:	f005 f822 	bl	801d74c <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018708:	f107 0310 	add.w	r3, r7, #16
 801870c:	6879      	ldr	r1, [r7, #4]
 801870e:	4618      	mov	r0, r3
 8018710:	f005 f9de 	bl	801dad0 <_ZN14MockNamedValue8setValueEPFvvE>
    checkInputParameter(actualParameter);
 8018714:	68fb      	ldr	r3, [r7, #12]
 8018716:	681b      	ldr	r3, [r3, #0]
 8018718:	33e0      	adds	r3, #224	; 0xe0
 801871a:	681b      	ldr	r3, [r3, #0]
 801871c:	f107 0210 	add.w	r2, r7, #16
 8018720:	4611      	mov	r1, r2
 8018722:	68f8      	ldr	r0, [r7, #12]
 8018724:	4798      	blx	r3
    return *this;
 8018726:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018728:	f107 0310 	add.w	r3, r7, #16
 801872c:	4618      	mov	r0, r3
 801872e:	f005 f837 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
    return *this;
 8018732:	4623      	mov	r3, r4
}
 8018734:	4618      	mov	r0, r3
 8018736:	374c      	adds	r7, #76	; 0x4c
 8018738:	46bd      	mov	sp, r7
 801873a:	bd90      	pop	{r4, r7, pc}

0801873c <_ZN21MockCheckedActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockCheckedActualCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 801873c:	b590      	push	{r4, r7, lr}
 801873e:	b093      	sub	sp, #76	; 0x4c
 8018740:	af00      	add	r7, sp, #0
 8018742:	60f8      	str	r0, [r7, #12]
 8018744:	60b9      	str	r1, [r7, #8]
 8018746:	607a      	str	r2, [r7, #4]
 8018748:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 801874a:	f107 0310 	add.w	r3, r7, #16
 801874e:	68b9      	ldr	r1, [r7, #8]
 8018750:	4618      	mov	r0, r3
 8018752:	f004 fffb 	bl	801d74c <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setMemoryBuffer(value, size);
 8018756:	f107 0310 	add.w	r3, r7, #16
 801875a:	683a      	ldr	r2, [r7, #0]
 801875c:	6879      	ldr	r1, [r7, #4]
 801875e:	4618      	mov	r0, r3
 8018760:	f005 f9fa 	bl	801db58 <_ZN14MockNamedValue15setMemoryBufferEPKhj>
    checkInputParameter(actualParameter);
 8018764:	68fb      	ldr	r3, [r7, #12]
 8018766:	681b      	ldr	r3, [r3, #0]
 8018768:	33e0      	adds	r3, #224	; 0xe0
 801876a:	681b      	ldr	r3, [r3, #0]
 801876c:	f107 0210 	add.w	r2, r7, #16
 8018770:	4611      	mov	r1, r2
 8018772:	68f8      	ldr	r0, [r7, #12]
 8018774:	4798      	blx	r3
    return *this;
 8018776:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018778:	f107 0310 	add.w	r3, r7, #16
 801877c:	4618      	mov	r0, r3
 801877e:	f005 f80f 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
    return *this;
 8018782:	4623      	mov	r3, r4
}
 8018784:	4618      	mov	r0, r3
 8018786:	374c      	adds	r7, #76	; 0x4c
 8018788:	46bd      	mov	sp, r7
 801878a:	bd90      	pop	{r4, r7, pc}

0801878c <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockCheckedActualCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 801878c:	b590      	push	{r4, r7, lr}
 801878e:	b0a1      	sub	sp, #132	; 0x84
 8018790:	af00      	add	r7, sp, #0
 8018792:	60f8      	str	r0, [r7, #12]
 8018794:	60b9      	str	r1, [r7, #8]
 8018796:	607a      	str	r2, [r7, #4]
 8018798:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 801879a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801879e:	6879      	ldr	r1, [r7, #4]
 80187a0:	4618      	mov	r0, r3
 80187a2:	f004 ffd3 	bl	801d74c <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setConstObjectPointer(type, value);
 80187a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80187aa:	683a      	ldr	r2, [r7, #0]
 80187ac:	68b9      	ldr	r1, [r7, #8]
 80187ae:	4618      	mov	r0, r3
 80187b0:	f005 f9f8 	bl	801dba4 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>

    if (actualParameter.getComparator() == NULLPTR) {
 80187b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80187b8:	4618      	mov	r0, r3
 80187ba:	f005 fdc5 	bl	801e348 <_ZNK14MockNamedValue13getComparatorEv>
 80187be:	4603      	mov	r3, r0
 80187c0:	2b00      	cmp	r3, #0
 80187c2:	bf0c      	ite	eq
 80187c4:	2301      	moveq	r3, #1
 80187c6:	2300      	movne	r3, #0
 80187c8:	b2db      	uxtb	r3, r3
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d01c      	beq.n	8018808 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x7c>
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 80187ce:	68fb      	ldr	r3, [r7, #12]
 80187d0:	681b      	ldr	r3, [r3, #0]
 80187d2:	33cc      	adds	r3, #204	; 0xcc
 80187d4:	681b      	ldr	r3, [r3, #0]
 80187d6:	68f8      	ldr	r0, [r7, #12]
 80187d8:	4798      	blx	r3
 80187da:	4601      	mov	r1, r0
 80187dc:	f107 0314 	add.w	r3, r7, #20
 80187e0:	68ba      	ldr	r2, [r7, #8]
 80187e2:	4618      	mov	r0, r3
 80187e4:	f004 fed6 	bl	801d594 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>
        failTest(failure);
 80187e8:	68fb      	ldr	r3, [r7, #12]
 80187ea:	681b      	ldr	r3, [r3, #0]
 80187ec:	33dc      	adds	r3, #220	; 0xdc
 80187ee:	681b      	ldr	r3, [r3, #0]
 80187f0:	f107 0214 	add.w	r2, r7, #20
 80187f4:	4611      	mov	r1, r2
 80187f6:	68f8      	ldr	r0, [r7, #12]
 80187f8:	4798      	blx	r3
        return *this;
 80187fa:	68fc      	ldr	r4, [r7, #12]
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 80187fc:	f107 0314 	add.w	r3, r7, #20
 8018800:	4618      	mov	r0, r3
 8018802:	f001 fc81 	bl	801a108 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 8018806:	e009      	b.n	801881c <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x90>
    }
    checkInputParameter(actualParameter);
 8018808:	68fb      	ldr	r3, [r7, #12]
 801880a:	681b      	ldr	r3, [r3, #0]
 801880c:	33e0      	adds	r3, #224	; 0xe0
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018814:	4611      	mov	r1, r2
 8018816:	68f8      	ldr	r0, [r7, #12]
 8018818:	4798      	blx	r3
    return *this;
 801881a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801881c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018820:	4618      	mov	r0, r3
 8018822:	f004 ffbd 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
 8018826:	4623      	mov	r3, r4
}
 8018828:	4618      	mov	r0, r3
 801882a:	3784      	adds	r7, #132	; 0x84
 801882c:	46bd      	mov	sp, r7
 801882e:	bd90      	pop	{r4, r7, pc}

08018830 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withOutputParameter(const SimpleString& name, void* output)
{
 8018830:	b590      	push	{r4, r7, lr}
 8018832:	b095      	sub	sp, #84	; 0x54
 8018834:	af00      	add	r7, sp, #0
 8018836:	60f8      	str	r0, [r7, #12]
 8018838:	60b9      	str	r1, [r7, #8]
 801883a:	607a      	str	r2, [r7, #4]
    addOutputParameter(name, "void*", output);
 801883c:	68fb      	ldr	r3, [r7, #12]
 801883e:	681b      	ldr	r3, [r3, #0]
 8018840:	33f0      	adds	r3, #240	; 0xf0
 8018842:	681c      	ldr	r4, [r3, #0]
 8018844:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018848:	4917      	ldr	r1, [pc, #92]	; (80188a8 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv+0x78>)
 801884a:	4618      	mov	r0, r3
 801884c:	f7f4 fa59 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8018850:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	68b9      	ldr	r1, [r7, #8]
 8018858:	68f8      	ldr	r0, [r7, #12]
 801885a:	47a0      	blx	r4
 801885c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018860:	4618      	mov	r0, r3
 8018862:	f7f4 fe06 	bl	800d472 <_ZN12SimpleStringD1Ev>

    MockNamedValue outputParameter(name);
 8018866:	f107 0310 	add.w	r3, r7, #16
 801886a:	68b9      	ldr	r1, [r7, #8]
 801886c:	4618      	mov	r0, r3
 801886e:	f004 ff6d 	bl	801d74c <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setValue(output);
 8018872:	f107 0310 	add.w	r3, r7, #16
 8018876:	6879      	ldr	r1, [r7, #4]
 8018878:	4618      	mov	r0, r3
 801887a:	f005 f8e5 	bl	801da48 <_ZN14MockNamedValue8setValueEPv>
    checkOutputParameter(outputParameter);
 801887e:	68fb      	ldr	r3, [r7, #12]
 8018880:	681b      	ldr	r3, [r3, #0]
 8018882:	33e4      	adds	r3, #228	; 0xe4
 8018884:	681b      	ldr	r3, [r3, #0]
 8018886:	f107 0210 	add.w	r2, r7, #16
 801888a:	4611      	mov	r1, r2
 801888c:	68f8      	ldr	r0, [r7, #12]
 801888e:	4798      	blx	r3

    return *this;
 8018890:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 8018892:	f107 0310 	add.w	r3, r7, #16
 8018896:	4618      	mov	r0, r3
 8018898:	f004 ff82 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
    return *this;
 801889c:	4623      	mov	r3, r4
}
 801889e:	4618      	mov	r0, r3
 80188a0:	3754      	adds	r7, #84	; 0x54
 80188a2:	46bd      	mov	sp, r7
 80188a4:	bd90      	pop	{r4, r7, pc}
 80188a6:	bf00      	nop
 80188a8:	08025fb0 	.word	0x08025fb0

080188ac <_ZN21MockCheckedActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockCheckedActualCall::withOutputParameterOfType(const SimpleString& type, const SimpleString& name, void* output)
{
 80188ac:	b590      	push	{r4, r7, lr}
 80188ae:	b093      	sub	sp, #76	; 0x4c
 80188b0:	af00      	add	r7, sp, #0
 80188b2:	60f8      	str	r0, [r7, #12]
 80188b4:	60b9      	str	r1, [r7, #8]
 80188b6:	607a      	str	r2, [r7, #4]
 80188b8:	603b      	str	r3, [r7, #0]
    addOutputParameter(name, type, output);
 80188ba:	68fb      	ldr	r3, [r7, #12]
 80188bc:	681b      	ldr	r3, [r3, #0]
 80188be:	33f0      	adds	r3, #240	; 0xf0
 80188c0:	681c      	ldr	r4, [r3, #0]
 80188c2:	683b      	ldr	r3, [r7, #0]
 80188c4:	68ba      	ldr	r2, [r7, #8]
 80188c6:	6879      	ldr	r1, [r7, #4]
 80188c8:	68f8      	ldr	r0, [r7, #12]
 80188ca:	47a0      	blx	r4

    MockNamedValue outputParameter(name);
 80188cc:	f107 0310 	add.w	r3, r7, #16
 80188d0:	6879      	ldr	r1, [r7, #4]
 80188d2:	4618      	mov	r0, r3
 80188d4:	f004 ff3a 	bl	801d74c <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setConstObjectPointer(type, output);
 80188d8:	f107 0310 	add.w	r3, r7, #16
 80188dc:	683a      	ldr	r2, [r7, #0]
 80188de:	68b9      	ldr	r1, [r7, #8]
 80188e0:	4618      	mov	r0, r3
 80188e2:	f005 f95f 	bl	801dba4 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>
    checkOutputParameter(outputParameter);
 80188e6:	68fb      	ldr	r3, [r7, #12]
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	33e4      	adds	r3, #228	; 0xe4
 80188ec:	681b      	ldr	r3, [r3, #0]
 80188ee:	f107 0210 	add.w	r2, r7, #16
 80188f2:	4611      	mov	r1, r2
 80188f4:	68f8      	ldr	r0, [r7, #12]
 80188f6:	4798      	blx	r3

    return *this;
 80188f8:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 80188fa:	f107 0310 	add.w	r3, r7, #16
 80188fe:	4618      	mov	r0, r3
 8018900:	f004 ff4e 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
    return *this;
 8018904:	4623      	mov	r3, r4
}
 8018906:	4618      	mov	r0, r3
 8018908:	374c      	adds	r7, #76	; 0x4c
 801890a:	46bd      	mov	sp, r7
 801890c:	bd90      	pop	{r4, r7, pc}

0801890e <_ZNK21MockCheckedActualCall11isFulfilledEv>:

bool MockCheckedActualCall::isFulfilled() const
{
 801890e:	b480      	push	{r7}
 8018910:	b083      	sub	sp, #12
 8018912:	af00      	add	r7, sp, #0
 8018914:	6078      	str	r0, [r7, #4]
    return state_ == CALL_SUCCEED;
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	7d1b      	ldrb	r3, [r3, #20]
 801891a:	2b02      	cmp	r3, #2
 801891c:	bf0c      	ite	eq
 801891e:	2301      	moveq	r3, #1
 8018920:	2300      	movne	r3, #0
 8018922:	b2db      	uxtb	r3, r3
}
 8018924:	4618      	mov	r0, r3
 8018926:	370c      	adds	r7, #12
 8018928:	46bd      	mov	sp, r7
 801892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801892e:	4770      	bx	lr

08018930 <_ZNK21MockCheckedActualCall9hasFailedEv>:

bool MockCheckedActualCall::hasFailed() const
{
 8018930:	b480      	push	{r7}
 8018932:	b083      	sub	sp, #12
 8018934:	af00      	add	r7, sp, #0
 8018936:	6078      	str	r0, [r7, #4]
    return state_ == CALL_FAILED;
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	7d1b      	ldrb	r3, [r3, #20]
 801893c:	2b01      	cmp	r3, #1
 801893e:	bf0c      	ite	eq
 8018940:	2301      	moveq	r3, #1
 8018942:	2300      	movne	r3, #0
 8018944:	b2db      	uxtb	r3, r3
}
 8018946:	4618      	mov	r0, r3
 8018948:	370c      	adds	r7, #12
 801894a:	46bd      	mov	sp, r7
 801894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018950:	4770      	bx	lr
	...

08018954 <_ZN21MockCheckedActualCall17checkExpectationsEv>:

void MockCheckedActualCall::checkExpectations()
{
 8018954:	b5b0      	push	{r4, r5, r7, lr}
 8018956:	b096      	sub	sp, #88	; 0x58
 8018958:	af02      	add	r7, sp, #8
 801895a:	6078      	str	r0, [r7, #4]
    if(expectationsChecked_) {
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	7d5b      	ldrb	r3, [r3, #21]
 8018960:	2b00      	cmp	r3, #0
 8018962:	f040 80bc 	bne.w	8018ade <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18a>
        return;
    }

    expectationsChecked_ = true;
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	2201      	movs	r2, #1
 801896a:	755a      	strb	r2, [r3, #21]

    if (state_ != CALL_IN_PROGRESS) {
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	7d1b      	ldrb	r3, [r3, #20]
 8018970:	2b00      	cmp	r3, #0
 8018972:	d014      	beq.n	801899e <_ZN21MockCheckedActualCall17checkExpectationsEv+0x4a>
        if(state_ == CALL_SUCCEED) {
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	7d1b      	ldrb	r3, [r3, #20]
 8018978:	2b02      	cmp	r3, #2
 801897a:	d10a      	bne.n	8018992 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x3e>
            matchingExpectation_->callWasMade(callOrder_);
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	6998      	ldr	r0, [r3, #24]
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	699b      	ldr	r3, [r3, #24]
 8018984:	681b      	ldr	r3, [r3, #0]
 8018986:	33d8      	adds	r3, #216	; 0xd8
 8018988:	681b      	ldr	r3, [r3, #0]
 801898a:	687a      	ldr	r2, [r7, #4]
 801898c:	68d2      	ldr	r2, [r2, #12]
 801898e:	4611      	mov	r1, r2
 8018990:	4798      	blx	r3
        }
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	331c      	adds	r3, #28
 8018996:	4618      	mov	r0, r3
 8018998:	f003 fe07 	bl	801c5aa <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 801899c:	e0a0      	b.n	8018ae0 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasFinalizedMatchingExpectations())
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	331c      	adds	r3, #28
 80189a2:	4618      	mov	r0, r3
 80189a4:	f003 fac3 	bl	801bf2e <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>
 80189a8:	4603      	mov	r3, r0
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d00f      	beq.n	80189ce <_ZN21MockCheckedActualCall17checkExpectationsEv+0x7a>
        FAIL("Actual call is in progress, but there are finalized matching expectations when checking expectations. This cannot happen."); // LCOV_EXCL_LINE
 80189ae:	f7fb fd8b 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 80189b2:	4604      	mov	r4, r0
 80189b4:	6823      	ldr	r3, [r4, #0]
 80189b6:	3368      	adds	r3, #104	; 0x68
 80189b8:	681d      	ldr	r5, [r3, #0]
 80189ba:	f7fb fd95 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80189be:	4603      	mov	r3, r0
 80189c0:	9300      	str	r3, [sp, #0]
 80189c2:	f240 1385 	movw	r3, #389	; 0x185
 80189c6:	4a48      	ldr	r2, [pc, #288]	; (8018ae8 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x194>)
 80189c8:	4948      	ldr	r1, [pc, #288]	; (8018aec <_ZN21MockCheckedActualCall17checkExpectationsEv+0x198>)
 80189ca:	4620      	mov	r0, r4
 80189cc:	47a8      	blx	r5

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstMatchingExpectation();
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	331c      	adds	r3, #28
 80189d2:	4618      	mov	r0, r3
 80189d4:	f003 fd5f 	bl	801c496 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>
 80189d8:	4602      	mov	r2, r0
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	699b      	ldr	r3, [r3, #24]
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	d01f      	beq.n	8018a26 <_ZN21MockCheckedActualCall17checkExpectationsEv+0xd2>
        matchingExpectation_->finalizeActualCallMatch();
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	699a      	ldr	r2, [r3, #24]
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	699b      	ldr	r3, [r3, #24]
 80189ee:	681b      	ldr	r3, [r3, #0]
 80189f0:	33e4      	adds	r3, #228	; 0xe4
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	4610      	mov	r0, r2
 80189f6:	4798      	blx	r3
        callHasSucceeded();
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	681b      	ldr	r3, [r3, #0]
 80189fc:	33d0      	adds	r3, #208	; 0xd0
 80189fe:	681b      	ldr	r3, [r3, #0]
 8018a00:	6878      	ldr	r0, [r7, #4]
 8018a02:	4798      	blx	r3
        matchingExpectation_->callWasMade(callOrder_);
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	6998      	ldr	r0, [r3, #24]
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	699b      	ldr	r3, [r3, #24]
 8018a0c:	681b      	ldr	r3, [r3, #0]
 8018a0e:	33d8      	adds	r3, #216	; 0xd8
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	687a      	ldr	r2, [r7, #4]
 8018a14:	68d2      	ldr	r2, [r2, #12]
 8018a16:	4611      	mov	r1, r2
 8018a18:	4798      	blx	r3
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	331c      	adds	r3, #28
 8018a1e:	4618      	mov	r0, r3
 8018a20:	f003 fdc3 	bl	801c5aa <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 8018a24:	e05c      	b.n	8018ae0 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasUnmatchingExpectationsBecauseOfMissingParameters()) {
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	331c      	adds	r3, #28
 8018a2a:	4618      	mov	r0, r3
 8018a2c:	f003 ffc4 	bl	801c9b8 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>
 8018a30:	4603      	mov	r3, r0
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	d029      	beq.n	8018a8a <_ZN21MockCheckedActualCall17checkExpectationsEv+0x136>
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	681b      	ldr	r3, [r3, #0]
 8018a3a:	33cc      	adds	r3, #204	; 0xcc
 8018a3c:	681b      	ldr	r3, [r3, #0]
 8018a3e:	6878      	ldr	r0, [r7, #4]
 8018a40:	4798      	blx	r3
 8018a42:	4604      	mov	r4, r0
 8018a44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018a48:	6879      	ldr	r1, [r7, #4]
 8018a4a:	4618      	mov	r0, r3
 8018a4c:	f7ff f93b 	bl	8017cc6 <_ZNK21MockCheckedActualCall7getNameEv>
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a54:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8018a58:	f107 000c 	add.w	r0, r7, #12
 8018a5c:	4621      	mov	r1, r4
 8018a5e:	f004 fd21 	bl	801d4a4 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 8018a62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018a66:	4618      	mov	r0, r3
 8018a68:	f7f4 fd03 	bl	800d472 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	681b      	ldr	r3, [r3, #0]
 8018a70:	33dc      	adds	r3, #220	; 0xdc
 8018a72:	681b      	ldr	r3, [r3, #0]
 8018a74:	f107 020c 	add.w	r2, r7, #12
 8018a78:	4611      	mov	r1, r2
 8018a7a:	6878      	ldr	r0, [r7, #4]
 8018a7c:	4798      	blx	r3
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8018a7e:	f107 030c 	add.w	r3, r7, #12
 8018a82:	4618      	mov	r0, r3
 8018a84:	f001 fb62 	bl	801a14c <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 8018a88:	e02a      	b.n	8018ae0 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }
    else {
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	681b      	ldr	r3, [r3, #0]
 8018a8e:	33cc      	adds	r3, #204	; 0xcc
 8018a90:	681b      	ldr	r3, [r3, #0]
 8018a92:	6878      	ldr	r0, [r7, #4]
 8018a94:	4798      	blx	r3
 8018a96:	4604      	mov	r4, r0
 8018a98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018a9c:	6879      	ldr	r1, [r7, #4]
 8018a9e:	4618      	mov	r0, r3
 8018aa0:	f7ff f911 	bl	8017cc6 <_ZNK21MockCheckedActualCall7getNameEv>
 8018aa4:	687b      	ldr	r3, [r7, #4]
 8018aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018aa8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018aac:	f107 000c 	add.w	r0, r7, #12
 8018ab0:	4621      	mov	r1, r4
 8018ab2:	f004 fe05 	bl	801d6c0 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 8018ab6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018aba:	4618      	mov	r0, r3
 8018abc:	f7f4 fcd9 	bl	800d472 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	33dc      	adds	r3, #220	; 0xdc
 8018ac6:	681b      	ldr	r3, [r3, #0]
 8018ac8:	f107 020c 	add.w	r2, r7, #12
 8018acc:	4611      	mov	r1, r2
 8018ace:	6878      	ldr	r0, [r7, #4]
 8018ad0:	4798      	blx	r3
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8018ad2:	f107 030c 	add.w	r3, r7, #12
 8018ad6:	4618      	mov	r0, r3
 8018ad8:	f001 fb5a 	bl	801a190 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 8018adc:	e000      	b.n	8018ae0 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
        return;
 8018ade:	bf00      	nop
    }
}
 8018ae0:	3750      	adds	r7, #80	; 0x50
 8018ae2:	46bd      	mov	sp, r7
 8018ae4:	bdb0      	pop	{r4, r5, r7, pc}
 8018ae6:	bf00      	nop
 8018ae8:	08025fb8 	.word	0x08025fb8
 8018aec:	08026020 	.word	0x08026020

08018af0 <_ZN21MockCheckedActualCall8setStateENS_15ActualCallStateE>:

void MockCheckedActualCall::setState(ActualCallState state)
{
 8018af0:	b480      	push	{r7}
 8018af2:	b083      	sub	sp, #12
 8018af4:	af00      	add	r7, sp, #0
 8018af6:	6078      	str	r0, [r7, #4]
 8018af8:	460b      	mov	r3, r1
 8018afa:	70fb      	strb	r3, [r7, #3]
    state_ = state;
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	78fa      	ldrb	r2, [r7, #3]
 8018b00:	751a      	strb	r2, [r3, #20]
}
 8018b02:	bf00      	nop
 8018b04:	370c      	adds	r7, #12
 8018b06:	46bd      	mov	sp, r7
 8018b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b0c:	4770      	bx	lr
	...

08018b10 <_ZN21MockCheckedActualCall11returnValueEv>:

MockNamedValue MockCheckedActualCall::returnValue()
{
 8018b10:	b580      	push	{r7, lr}
 8018b12:	b084      	sub	sp, #16
 8018b14:	af00      	add	r7, sp, #0
 8018b16:	6078      	str	r0, [r7, #4]
 8018b18:	6039      	str	r1, [r7, #0]
    checkExpectations();
 8018b1a:	683b      	ldr	r3, [r7, #0]
 8018b1c:	681b      	ldr	r3, [r3, #0]
 8018b1e:	33c4      	adds	r3, #196	; 0xc4
 8018b20:	681b      	ldr	r3, [r3, #0]
 8018b22:	6838      	ldr	r0, [r7, #0]
 8018b24:	4798      	blx	r3
    if (matchingExpectation_)
 8018b26:	683b      	ldr	r3, [r7, #0]
 8018b28:	699b      	ldr	r3, [r3, #24]
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	d00a      	beq.n	8018b44 <_ZN21MockCheckedActualCall11returnValueEv+0x34>
        return matchingExpectation_->returnValue();
 8018b2e:	683b      	ldr	r3, [r7, #0]
 8018b30:	6999      	ldr	r1, [r3, #24]
 8018b32:	683b      	ldr	r3, [r7, #0]
 8018b34:	699b      	ldr	r3, [r3, #24]
 8018b36:	681b      	ldr	r3, [r3, #0]
 8018b38:	3394      	adds	r3, #148	; 0x94
 8018b3a:	681b      	ldr	r3, [r3, #0]
 8018b3c:	687a      	ldr	r2, [r7, #4]
 8018b3e:	4610      	mov	r0, r2
 8018b40:	4798      	blx	r3
 8018b42:	e010      	b.n	8018b66 <_ZN21MockCheckedActualCall11returnValueEv+0x56>
    return MockNamedValue("no return value");
 8018b44:	f107 0308 	add.w	r3, r7, #8
 8018b48:	4909      	ldr	r1, [pc, #36]	; (8018b70 <_ZN21MockCheckedActualCall11returnValueEv+0x60>)
 8018b4a:	4618      	mov	r0, r3
 8018b4c:	f7f4 f8d9 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8018b50:	f107 0308 	add.w	r3, r7, #8
 8018b54:	4619      	mov	r1, r3
 8018b56:	6878      	ldr	r0, [r7, #4]
 8018b58:	f004 fdf8 	bl	801d74c <_ZN14MockNamedValueC1ERK12SimpleString>
 8018b5c:	f107 0308 	add.w	r3, r7, #8
 8018b60:	4618      	mov	r0, r3
 8018b62:	f7f4 fc86 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 8018b66:	6878      	ldr	r0, [r7, #4]
 8018b68:	3710      	adds	r7, #16
 8018b6a:	46bd      	mov	sp, r7
 8018b6c:	bd80      	pop	{r7, pc}
 8018b6e:	bf00      	nop
 8018b70:	0802609c 	.word	0x0802609c

08018b74 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb>:

bool MockCheckedActualCall::returnBoolValueOrDefault(bool default_value)
{
 8018b74:	b580      	push	{r7, lr}
 8018b76:	b082      	sub	sp, #8
 8018b78:	af00      	add	r7, sp, #0
 8018b7a:	6078      	str	r0, [r7, #4]
 8018b7c:	460b      	mov	r3, r1
 8018b7e:	70fb      	strb	r3, [r7, #3]
    if (!hasReturnValue()) {
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	681b      	ldr	r3, [r3, #0]
 8018b84:	3350      	adds	r3, #80	; 0x50
 8018b86:	681b      	ldr	r3, [r3, #0]
 8018b88:	6878      	ldr	r0, [r7, #4]
 8018b8a:	4798      	blx	r3
 8018b8c:	4603      	mov	r3, r0
 8018b8e:	f083 0301 	eor.w	r3, r3, #1
 8018b92:	b2db      	uxtb	r3, r3
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d001      	beq.n	8018b9c <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x28>
        return default_value;
 8018b98:	78fb      	ldrb	r3, [r7, #3]
 8018b9a:	e007      	b.n	8018bac <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x38>
    }
    return returnBoolValue();
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	681b      	ldr	r3, [r3, #0]
 8018ba0:	335c      	adds	r3, #92	; 0x5c
 8018ba2:	681b      	ldr	r3, [r3, #0]
 8018ba4:	6878      	ldr	r0, [r7, #4]
 8018ba6:	4798      	blx	r3
 8018ba8:	4603      	mov	r3, r0
 8018baa:	bf00      	nop
}
 8018bac:	4618      	mov	r0, r3
 8018bae:	3708      	adds	r7, #8
 8018bb0:	46bd      	mov	sp, r7
 8018bb2:	bd80      	pop	{r7, pc}

08018bb4 <_ZN21MockCheckedActualCall15returnBoolValueEv>:

bool MockCheckedActualCall::returnBoolValue()
{
 8018bb4:	b590      	push	{r4, r7, lr}
 8018bb6:	b091      	sub	sp, #68	; 0x44
 8018bb8:	af00      	add	r7, sp, #0
 8018bba:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	3354      	adds	r3, #84	; 0x54
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	f107 0208 	add.w	r2, r7, #8
 8018bc8:	6879      	ldr	r1, [r7, #4]
 8018bca:	4610      	mov	r0, r2
 8018bcc:	4798      	blx	r3
 8018bce:	f107 0308 	add.w	r3, r7, #8
 8018bd2:	4618      	mov	r0, r3
 8018bd4:	f005 f896 	bl	801dd04 <_ZNK14MockNamedValue12getBoolValueEv>
 8018bd8:	4603      	mov	r3, r0
 8018bda:	461c      	mov	r4, r3
 8018bdc:	bf00      	nop
 8018bde:	f107 0308 	add.w	r3, r7, #8
 8018be2:	4618      	mov	r0, r3
 8018be4:	f004 fddc 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
 8018be8:	4623      	mov	r3, r4
}
 8018bea:	4618      	mov	r0, r3
 8018bec:	3744      	adds	r7, #68	; 0x44
 8018bee:	46bd      	mov	sp, r7
 8018bf0:	bd90      	pop	{r4, r7, pc}

08018bf2 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi>:

int MockCheckedActualCall::returnIntValueOrDefault(int default_value)
{
 8018bf2:	b580      	push	{r7, lr}
 8018bf4:	b082      	sub	sp, #8
 8018bf6:	af00      	add	r7, sp, #0
 8018bf8:	6078      	str	r0, [r7, #4]
 8018bfa:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	681b      	ldr	r3, [r3, #0]
 8018c00:	3350      	adds	r3, #80	; 0x50
 8018c02:	681b      	ldr	r3, [r3, #0]
 8018c04:	6878      	ldr	r0, [r7, #4]
 8018c06:	4798      	blx	r3
 8018c08:	4603      	mov	r3, r0
 8018c0a:	f083 0301 	eor.w	r3, r3, #1
 8018c0e:	b2db      	uxtb	r3, r3
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d001      	beq.n	8018c18 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x26>
        return default_value;
 8018c14:	683b      	ldr	r3, [r7, #0]
 8018c16:	e007      	b.n	8018c28 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x36>
    }
    return returnIntValue();
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	681b      	ldr	r3, [r3, #0]
 8018c1c:	3364      	adds	r3, #100	; 0x64
 8018c1e:	681b      	ldr	r3, [r3, #0]
 8018c20:	6878      	ldr	r0, [r7, #4]
 8018c22:	4798      	blx	r3
 8018c24:	4603      	mov	r3, r0
 8018c26:	bf00      	nop
}
 8018c28:	4618      	mov	r0, r3
 8018c2a:	3708      	adds	r7, #8
 8018c2c:	46bd      	mov	sp, r7
 8018c2e:	bd80      	pop	{r7, pc}

08018c30 <_ZN21MockCheckedActualCall14returnIntValueEv>:

int MockCheckedActualCall::returnIntValue()
{
 8018c30:	b590      	push	{r4, r7, lr}
 8018c32:	b091      	sub	sp, #68	; 0x44
 8018c34:	af00      	add	r7, sp, #0
 8018c36:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	681b      	ldr	r3, [r3, #0]
 8018c3c:	3354      	adds	r3, #84	; 0x54
 8018c3e:	681b      	ldr	r3, [r3, #0]
 8018c40:	f107 0208 	add.w	r2, r7, #8
 8018c44:	6879      	ldr	r1, [r7, #4]
 8018c46:	4610      	mov	r0, r2
 8018c48:	4798      	blx	r3
 8018c4a:	f107 0308 	add.w	r3, r7, #8
 8018c4e:	4618      	mov	r0, r3
 8018c50:	f005 f8d0 	bl	801ddf4 <_ZNK14MockNamedValue11getIntValueEv>
 8018c54:	4604      	mov	r4, r0
 8018c56:	bf00      	nop
 8018c58:	f107 0308 	add.w	r3, r7, #8
 8018c5c:	4618      	mov	r0, r3
 8018c5e:	f004 fd9f 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
 8018c62:	4623      	mov	r3, r4
}
 8018c64:	4618      	mov	r0, r3
 8018c66:	3744      	adds	r7, #68	; 0x44
 8018c68:	46bd      	mov	sp, r7
 8018c6a:	bd90      	pop	{r4, r7, pc}

08018c6c <_ZN21MockCheckedActualCall26returnUnsignedLongIntValueEv>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValue()
{
 8018c6c:	b590      	push	{r4, r7, lr}
 8018c6e:	b091      	sub	sp, #68	; 0x44
 8018c70:	af00      	add	r7, sp, #0
 8018c72:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	681b      	ldr	r3, [r3, #0]
 8018c78:	3354      	adds	r3, #84	; 0x54
 8018c7a:	681b      	ldr	r3, [r3, #0]
 8018c7c:	f107 0208 	add.w	r2, r7, #8
 8018c80:	6879      	ldr	r1, [r7, #4]
 8018c82:	4610      	mov	r0, r2
 8018c84:	4798      	blx	r3
 8018c86:	f107 0308 	add.w	r3, r7, #8
 8018c8a:	4618      	mov	r0, r3
 8018c8c:	f005 f93c 	bl	801df08 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 8018c90:	4604      	mov	r4, r0
 8018c92:	bf00      	nop
 8018c94:	f107 0308 	add.w	r3, r7, #8
 8018c98:	4618      	mov	r0, r3
 8018c9a:	f004 fd81 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
 8018c9e:	4623      	mov	r3, r4
}
 8018ca0:	4618      	mov	r0, r3
 8018ca2:	3744      	adds	r7, #68	; 0x44
 8018ca4:	46bd      	mov	sp, r7
 8018ca6:	bd90      	pop	{r4, r7, pc}

08018ca8 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValueOrDefault(unsigned long int default_value)
{
 8018ca8:	b580      	push	{r7, lr}
 8018caa:	b082      	sub	sp, #8
 8018cac:	af00      	add	r7, sp, #0
 8018cae:	6078      	str	r0, [r7, #4]
 8018cb0:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	681b      	ldr	r3, [r3, #0]
 8018cb6:	3350      	adds	r3, #80	; 0x50
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	6878      	ldr	r0, [r7, #4]
 8018cbc:	4798      	blx	r3
 8018cbe:	4603      	mov	r3, r0
 8018cc0:	f083 0301 	eor.w	r3, r3, #1
 8018cc4:	b2db      	uxtb	r3, r3
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	d001      	beq.n	8018cce <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x26>
        return default_value;
 8018cca:	683b      	ldr	r3, [r7, #0]
 8018ccc:	e007      	b.n	8018cde <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x36>
    }
    return returnUnsignedLongIntValue();
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	681b      	ldr	r3, [r3, #0]
 8018cd2:	3368      	adds	r3, #104	; 0x68
 8018cd4:	681b      	ldr	r3, [r3, #0]
 8018cd6:	6878      	ldr	r0, [r7, #4]
 8018cd8:	4798      	blx	r3
 8018cda:	4603      	mov	r3, r0
 8018cdc:	bf00      	nop
}
 8018cde:	4618      	mov	r0, r3
 8018ce0:	3708      	adds	r7, #8
 8018ce2:	46bd      	mov	sp, r7
 8018ce4:	bd80      	pop	{r7, pc}

08018ce6 <_ZN21MockCheckedActualCall18returnLongIntValueEv>:

long int MockCheckedActualCall::returnLongIntValue()
{
 8018ce6:	b590      	push	{r4, r7, lr}
 8018ce8:	b091      	sub	sp, #68	; 0x44
 8018cea:	af00      	add	r7, sp, #0
 8018cec:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	681b      	ldr	r3, [r3, #0]
 8018cf2:	3354      	adds	r3, #84	; 0x54
 8018cf4:	681b      	ldr	r3, [r3, #0]
 8018cf6:	f107 0208 	add.w	r2, r7, #8
 8018cfa:	6879      	ldr	r1, [r7, #4]
 8018cfc:	4610      	mov	r0, r2
 8018cfe:	4798      	blx	r3
 8018d00:	f107 0308 	add.w	r3, r7, #8
 8018d04:	4618      	mov	r0, r3
 8018d06:	f005 f89d 	bl	801de44 <_ZNK14MockNamedValue15getLongIntValueEv>
 8018d0a:	4604      	mov	r4, r0
 8018d0c:	bf00      	nop
 8018d0e:	f107 0308 	add.w	r3, r7, #8
 8018d12:	4618      	mov	r0, r3
 8018d14:	f004 fd44 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
 8018d18:	4623      	mov	r3, r4
}
 8018d1a:	4618      	mov	r0, r3
 8018d1c:	3744      	adds	r7, #68	; 0x44
 8018d1e:	46bd      	mov	sp, r7
 8018d20:	bd90      	pop	{r4, r7, pc}

08018d22 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl>:

long int MockCheckedActualCall::returnLongIntValueOrDefault(long int default_value)
{
 8018d22:	b580      	push	{r7, lr}
 8018d24:	b082      	sub	sp, #8
 8018d26:	af00      	add	r7, sp, #0
 8018d28:	6078      	str	r0, [r7, #4]
 8018d2a:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	681b      	ldr	r3, [r3, #0]
 8018d30:	3350      	adds	r3, #80	; 0x50
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	6878      	ldr	r0, [r7, #4]
 8018d36:	4798      	blx	r3
 8018d38:	4603      	mov	r3, r0
 8018d3a:	f083 0301 	eor.w	r3, r3, #1
 8018d3e:	b2db      	uxtb	r3, r3
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	d001      	beq.n	8018d48 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x26>
        return default_value;
 8018d44:	683b      	ldr	r3, [r7, #0]
 8018d46:	e007      	b.n	8018d58 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x36>
    }
    return returnLongIntValue();
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	681b      	ldr	r3, [r3, #0]
 8018d4c:	3370      	adds	r3, #112	; 0x70
 8018d4e:	681b      	ldr	r3, [r3, #0]
 8018d50:	6878      	ldr	r0, [r7, #4]
 8018d52:	4798      	blx	r3
 8018d54:	4603      	mov	r3, r0
 8018d56:	bf00      	nop
}
 8018d58:	4618      	mov	r0, r3
 8018d5a:	3708      	adds	r7, #8
 8018d5c:	46bd      	mov	sp, r7
 8018d5e:	bd80      	pop	{r7, pc}

08018d60 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv>:
}

#else

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValue()
{
 8018d60:	b5b0      	push	{r4, r5, r7, lr}
 8018d62:	b084      	sub	sp, #16
 8018d64:	af02      	add	r7, sp, #8
 8018d66:	6078      	str	r0, [r7, #4]
 8018d68:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 8018d6a:	f7fb fbad 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 8018d6e:	4604      	mov	r4, r0
 8018d70:	6823      	ldr	r3, [r4, #0]
 8018d72:	3368      	adds	r3, #104	; 0x68
 8018d74:	681d      	ldr	r5, [r3, #0]
 8018d76:	f7fb fbb7 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018d7a:	4603      	mov	r3, r0
 8018d7c:	9300      	str	r3, [sp, #0]
 8018d7e:	f240 13fb 	movw	r3, #507	; 0x1fb
 8018d82:	4a06      	ldr	r2, [pc, #24]	; (8018d9c <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x3c>)
 8018d84:	4906      	ldr	r1, [pc, #24]	; (8018da0 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x40>)
 8018d86:	4620      	mov	r0, r4
 8018d88:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8018d8a:	2100      	movs	r1, #0
 8018d8c:	6878      	ldr	r0, [r7, #4]
 8018d8e:	f7f1 fffb 	bl	800ad88 <_ZN18cpputest_ulonglongC1Ei>
}
 8018d92:	6878      	ldr	r0, [r7, #4]
 8018d94:	3708      	adds	r7, #8
 8018d96:	46bd      	mov	sp, r7
 8018d98:	bdb0      	pop	{r4, r5, r7, pc}
 8018d9a:	bf00      	nop
 8018d9c:	08025fb8 	.word	0x08025fb8
 8018da0:	08025fd4 	.word	0x08025fd4

08018da4 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong default_value)
{
 8018da4:	b5b0      	push	{r4, r5, r7, lr}
 8018da6:	b086      	sub	sp, #24
 8018da8:	af02      	add	r7, sp, #8
 8018daa:	60f8      	str	r0, [r7, #12]
 8018dac:	60b9      	str	r1, [r7, #8]
 8018dae:	4639      	mov	r1, r7
 8018db0:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8018db4:	f7fb fb88 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 8018db8:	4604      	mov	r4, r0
 8018dba:	6823      	ldr	r3, [r4, #0]
 8018dbc:	3368      	adds	r3, #104	; 0x68
 8018dbe:	681d      	ldr	r5, [r3, #0]
 8018dc0:	f7fb fb92 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018dc4:	4603      	mov	r3, r0
 8018dc6:	9300      	str	r3, [sp, #0]
 8018dc8:	f240 2301 	movw	r3, #513	; 0x201
 8018dcc:	4a06      	ldr	r2, [pc, #24]	; (8018de8 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 8018dce:	4907      	ldr	r1, [pc, #28]	; (8018dec <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 8018dd0:	4620      	mov	r0, r4
 8018dd2:	47a8      	blx	r5
    return default_value;
 8018dd4:	68fb      	ldr	r3, [r7, #12]
 8018dd6:	461a      	mov	r2, r3
 8018dd8:	463b      	mov	r3, r7
 8018dda:	cb03      	ldmia	r3!, {r0, r1}
 8018ddc:	6010      	str	r0, [r2, #0]
 8018dde:	6051      	str	r1, [r2, #4]
}
 8018de0:	68f8      	ldr	r0, [r7, #12]
 8018de2:	3710      	adds	r7, #16
 8018de4:	46bd      	mov	sp, r7
 8018de6:	bdb0      	pop	{r4, r5, r7, pc}
 8018de8:	08025fb8 	.word	0x08025fb8
 8018dec:	08025fd4 	.word	0x08025fd4

08018df0 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValue()
{
 8018df0:	b5b0      	push	{r4, r5, r7, lr}
 8018df2:	b084      	sub	sp, #16
 8018df4:	af02      	add	r7, sp, #8
 8018df6:	6078      	str	r0, [r7, #4]
 8018df8:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 8018dfa:	f7fb fb65 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 8018dfe:	4604      	mov	r4, r0
 8018e00:	6823      	ldr	r3, [r4, #0]
 8018e02:	3368      	adds	r3, #104	; 0x68
 8018e04:	681d      	ldr	r5, [r3, #0]
 8018e06:	f7fb fb6f 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018e0a:	4603      	mov	r3, r0
 8018e0c:	9300      	str	r3, [sp, #0]
 8018e0e:	f240 2307 	movw	r3, #519	; 0x207
 8018e12:	4a06      	ldr	r2, [pc, #24]	; (8018e2c <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x3c>)
 8018e14:	4906      	ldr	r1, [pc, #24]	; (8018e30 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x40>)
 8018e16:	4620      	mov	r0, r4
 8018e18:	47a8      	blx	r5
    return cpputest_longlong(0);
 8018e1a:	2100      	movs	r1, #0
 8018e1c:	6878      	ldr	r0, [r7, #4]
 8018e1e:	f7f1 ffa7 	bl	800ad70 <_ZN17cpputest_longlongC1Ei>
}
 8018e22:	6878      	ldr	r0, [r7, #4]
 8018e24:	3708      	adds	r7, #8
 8018e26:	46bd      	mov	sp, r7
 8018e28:	bdb0      	pop	{r4, r5, r7, pc}
 8018e2a:	bf00      	nop
 8018e2c:	08025fb8 	.word	0x08025fb8
 8018e30:	08026000 	.word	0x08026000

08018e34 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValueOrDefault(cpputest_longlong default_value)
{
 8018e34:	b5b0      	push	{r4, r5, r7, lr}
 8018e36:	b086      	sub	sp, #24
 8018e38:	af02      	add	r7, sp, #8
 8018e3a:	60f8      	str	r0, [r7, #12]
 8018e3c:	60b9      	str	r1, [r7, #8]
 8018e3e:	4639      	mov	r1, r7
 8018e40:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8018e44:	f7fb fb40 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 8018e48:	4604      	mov	r4, r0
 8018e4a:	6823      	ldr	r3, [r4, #0]
 8018e4c:	3368      	adds	r3, #104	; 0x68
 8018e4e:	681d      	ldr	r5, [r3, #0]
 8018e50:	f7fb fb4a 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018e54:	4603      	mov	r3, r0
 8018e56:	9300      	str	r3, [sp, #0]
 8018e58:	f240 230d 	movw	r3, #525	; 0x20d
 8018e5c:	4a06      	ldr	r2, [pc, #24]	; (8018e78 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 8018e5e:	4907      	ldr	r1, [pc, #28]	; (8018e7c <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 8018e60:	4620      	mov	r0, r4
 8018e62:	47a8      	blx	r5
    return default_value;
 8018e64:	68fb      	ldr	r3, [r7, #12]
 8018e66:	461a      	mov	r2, r3
 8018e68:	463b      	mov	r3, r7
 8018e6a:	cb03      	ldmia	r3!, {r0, r1}
 8018e6c:	6010      	str	r0, [r2, #0]
 8018e6e:	6051      	str	r1, [r2, #4]
}
 8018e70:	68f8      	ldr	r0, [r7, #12]
 8018e72:	3710      	adds	r7, #16
 8018e74:	46bd      	mov	sp, r7
 8018e76:	bdb0      	pop	{r4, r5, r7, pc}
 8018e78:	08025fb8 	.word	0x08025fb8
 8018e7c:	08026000 	.word	0x08026000

08018e80 <_ZN21MockCheckedActualCall17returnDoubleValueEv>:

#endif

double MockCheckedActualCall::returnDoubleValue()
{
 8018e80:	b580      	push	{r7, lr}
 8018e82:	ed2d 8b02 	vpush	{d8}
 8018e86:	b090      	sub	sp, #64	; 0x40
 8018e88:	af00      	add	r7, sp, #0
 8018e8a:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	681b      	ldr	r3, [r3, #0]
 8018e90:	3354      	adds	r3, #84	; 0x54
 8018e92:	681b      	ldr	r3, [r3, #0]
 8018e94:	f107 0208 	add.w	r2, r7, #8
 8018e98:	6879      	ldr	r1, [r7, #4]
 8018e9a:	4610      	mov	r0, r2
 8018e9c:	4798      	blx	r3
 8018e9e:	f107 0308 	add.w	r3, r7, #8
 8018ea2:	4618      	mov	r0, r3
 8018ea4:	f005 f908 	bl	801e0b8 <_ZNK14MockNamedValue14getDoubleValueEv>
 8018ea8:	eeb0 8a40 	vmov.f32	s16, s0
 8018eac:	eef0 8a60 	vmov.f32	s17, s1
 8018eb0:	bf00      	nop
 8018eb2:	f107 0308 	add.w	r3, r7, #8
 8018eb6:	4618      	mov	r0, r3
 8018eb8:	f004 fc72 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
 8018ebc:	eeb0 7a48 	vmov.f32	s14, s16
 8018ec0:	eef0 7a68 	vmov.f32	s15, s17
}
 8018ec4:	eeb0 0a47 	vmov.f32	s0, s14
 8018ec8:	eef0 0a67 	vmov.f32	s1, s15
 8018ecc:	3740      	adds	r7, #64	; 0x40
 8018ece:	46bd      	mov	sp, r7
 8018ed0:	ecbd 8b02 	vpop	{d8}
 8018ed4:	bd80      	pop	{r7, pc}

08018ed6 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd>:

double MockCheckedActualCall::returnDoubleValueOrDefault(double default_value)
{
 8018ed6:	b580      	push	{r7, lr}
 8018ed8:	b084      	sub	sp, #16
 8018eda:	af00      	add	r7, sp, #0
 8018edc:	60f8      	str	r0, [r7, #12]
 8018ede:	ed87 0b00 	vstr	d0, [r7]
    if (!hasReturnValue()) {
 8018ee2:	68fb      	ldr	r3, [r7, #12]
 8018ee4:	681b      	ldr	r3, [r3, #0]
 8018ee6:	3350      	adds	r3, #80	; 0x50
 8018ee8:	681b      	ldr	r3, [r3, #0]
 8018eea:	68f8      	ldr	r0, [r7, #12]
 8018eec:	4798      	blx	r3
 8018eee:	4603      	mov	r3, r0
 8018ef0:	f083 0301 	eor.w	r3, r3, #1
 8018ef4:	b2db      	uxtb	r3, r3
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	d002      	beq.n	8018f00 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x2a>
        return default_value;
 8018efa:	ed97 7b00 	vldr	d7, [r7]
 8018efe:	e00a      	b.n	8018f16 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x40>
    }
    return returnDoubleValue();
 8018f00:	68fb      	ldr	r3, [r7, #12]
 8018f02:	681b      	ldr	r3, [r3, #0]
 8018f04:	3398      	adds	r3, #152	; 0x98
 8018f06:	681b      	ldr	r3, [r3, #0]
 8018f08:	68f8      	ldr	r0, [r7, #12]
 8018f0a:	4798      	blx	r3
 8018f0c:	eeb0 7a40 	vmov.f32	s14, s0
 8018f10:	eef0 7a60 	vmov.f32	s15, s1
 8018f14:	bf00      	nop
}
 8018f16:	eeb0 0a47 	vmov.f32	s0, s14
 8018f1a:	eef0 0a67 	vmov.f32	s1, s15
 8018f1e:	3710      	adds	r7, #16
 8018f20:	46bd      	mov	sp, r7
 8018f22:	bd80      	pop	{r7, pc}

08018f24 <_ZN21MockCheckedActualCall22returnUnsignedIntValueEv>:

unsigned int MockCheckedActualCall::returnUnsignedIntValue()
{
 8018f24:	b590      	push	{r4, r7, lr}
 8018f26:	b091      	sub	sp, #68	; 0x44
 8018f28:	af00      	add	r7, sp, #0
 8018f2a:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	681b      	ldr	r3, [r3, #0]
 8018f30:	3354      	adds	r3, #84	; 0x54
 8018f32:	681b      	ldr	r3, [r3, #0]
 8018f34:	f107 0208 	add.w	r2, r7, #8
 8018f38:	6879      	ldr	r1, [r7, #4]
 8018f3a:	4610      	mov	r0, r2
 8018f3c:	4798      	blx	r3
 8018f3e:	f107 0308 	add.w	r3, r7, #8
 8018f42:	4618      	mov	r0, r3
 8018f44:	f004 ff06 	bl	801dd54 <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 8018f48:	4604      	mov	r4, r0
 8018f4a:	bf00      	nop
 8018f4c:	f107 0308 	add.w	r3, r7, #8
 8018f50:	4618      	mov	r0, r3
 8018f52:	f004 fc25 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
 8018f56:	4623      	mov	r3, r4
}
 8018f58:	4618      	mov	r0, r3
 8018f5a:	3744      	adds	r7, #68	; 0x44
 8018f5c:	46bd      	mov	sp, r7
 8018f5e:	bd90      	pop	{r4, r7, pc}

08018f60 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockCheckedActualCall::returnUnsignedIntValueOrDefault(unsigned int default_value)
{
 8018f60:	b580      	push	{r7, lr}
 8018f62:	b082      	sub	sp, #8
 8018f64:	af00      	add	r7, sp, #0
 8018f66:	6078      	str	r0, [r7, #4]
 8018f68:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	681b      	ldr	r3, [r3, #0]
 8018f6e:	3350      	adds	r3, #80	; 0x50
 8018f70:	681b      	ldr	r3, [r3, #0]
 8018f72:	6878      	ldr	r0, [r7, #4]
 8018f74:	4798      	blx	r3
 8018f76:	4603      	mov	r3, r0
 8018f78:	f083 0301 	eor.w	r3, r3, #1
 8018f7c:	b2db      	uxtb	r3, r3
 8018f7e:	2b00      	cmp	r3, #0
 8018f80:	d001      	beq.n	8018f86 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x26>
        return default_value;
 8018f82:	683b      	ldr	r3, [r7, #0]
 8018f84:	e007      	b.n	8018f96 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x36>
    }
    return returnUnsignedIntValue();
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	681b      	ldr	r3, [r3, #0]
 8018f8a:	3388      	adds	r3, #136	; 0x88
 8018f8c:	681b      	ldr	r3, [r3, #0]
 8018f8e:	6878      	ldr	r0, [r7, #4]
 8018f90:	4798      	blx	r3
 8018f92:	4603      	mov	r3, r0
 8018f94:	bf00      	nop
}
 8018f96:	4618      	mov	r0, r3
 8018f98:	3708      	adds	r7, #8
 8018f9a:	46bd      	mov	sp, r7
 8018f9c:	bd80      	pop	{r7, pc}

08018f9e <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv>:

void * MockCheckedActualCall::returnPointerValueOrDefault(void * default_value)
{
 8018f9e:	b580      	push	{r7, lr}
 8018fa0:	b082      	sub	sp, #8
 8018fa2:	af00      	add	r7, sp, #0
 8018fa4:	6078      	str	r0, [r7, #4]
 8018fa6:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	681b      	ldr	r3, [r3, #0]
 8018fac:	3350      	adds	r3, #80	; 0x50
 8018fae:	681b      	ldr	r3, [r3, #0]
 8018fb0:	6878      	ldr	r0, [r7, #4]
 8018fb2:	4798      	blx	r3
 8018fb4:	4603      	mov	r3, r0
 8018fb6:	f083 0301 	eor.w	r3, r3, #1
 8018fba:	b2db      	uxtb	r3, r3
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	d001      	beq.n	8018fc4 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x26>
        return default_value;
 8018fc0:	683b      	ldr	r3, [r7, #0]
 8018fc2:	e007      	b.n	8018fd4 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x36>
    }
    return returnPointerValue();
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	681b      	ldr	r3, [r3, #0]
 8018fc8:	33a0      	adds	r3, #160	; 0xa0
 8018fca:	681b      	ldr	r3, [r3, #0]
 8018fcc:	6878      	ldr	r0, [r7, #4]
 8018fce:	4798      	blx	r3
 8018fd0:	4603      	mov	r3, r0
 8018fd2:	bf00      	nop
}
 8018fd4:	4618      	mov	r0, r3
 8018fd6:	3708      	adds	r7, #8
 8018fd8:	46bd      	mov	sp, r7
 8018fda:	bd80      	pop	{r7, pc}

08018fdc <_ZN21MockCheckedActualCall18returnPointerValueEv>:

void * MockCheckedActualCall::returnPointerValue()
{
 8018fdc:	b590      	push	{r4, r7, lr}
 8018fde:	b091      	sub	sp, #68	; 0x44
 8018fe0:	af00      	add	r7, sp, #0
 8018fe2:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 8018fe4:	687b      	ldr	r3, [r7, #4]
 8018fe6:	681b      	ldr	r3, [r3, #0]
 8018fe8:	3354      	adds	r3, #84	; 0x54
 8018fea:	681b      	ldr	r3, [r3, #0]
 8018fec:	f107 0208 	add.w	r2, r7, #8
 8018ff0:	6879      	ldr	r1, [r7, #4]
 8018ff2:	4610      	mov	r0, r2
 8018ff4:	4798      	blx	r3
 8018ff6:	f107 0308 	add.w	r3, r7, #8
 8018ffa:	4618      	mov	r0, r3
 8018ffc:	f005 f8e0 	bl	801e1c0 <_ZNK14MockNamedValue15getPointerValueEv>
 8019000:	4604      	mov	r4, r0
 8019002:	bf00      	nop
 8019004:	f107 0308 	add.w	r3, r7, #8
 8019008:	4618      	mov	r0, r3
 801900a:	f004 fbc9 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
 801900e:	4623      	mov	r3, r4
}
 8019010:	4618      	mov	r0, r3
 8019012:	3744      	adds	r7, #68	; 0x44
 8019014:	46bd      	mov	sp, r7
 8019016:	bd90      	pop	{r4, r7, pc}

08019018 <_ZN21MockCheckedActualCall23returnConstPointerValueEv>:

const void * MockCheckedActualCall::returnConstPointerValue()
{
 8019018:	b590      	push	{r4, r7, lr}
 801901a:	b091      	sub	sp, #68	; 0x44
 801901c:	af00      	add	r7, sp, #0
 801901e:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	681b      	ldr	r3, [r3, #0]
 8019024:	3354      	adds	r3, #84	; 0x54
 8019026:	681b      	ldr	r3, [r3, #0]
 8019028:	f107 0208 	add.w	r2, r7, #8
 801902c:	6879      	ldr	r1, [r7, #4]
 801902e:	4610      	mov	r0, r2
 8019030:	4798      	blx	r3
 8019032:	f107 0308 	add.w	r3, r7, #8
 8019036:	4618      	mov	r0, r3
 8019038:	f005 f8ea 	bl	801e210 <_ZNK14MockNamedValue20getConstPointerValueEv>
 801903c:	4604      	mov	r4, r0
 801903e:	bf00      	nop
 8019040:	f107 0308 	add.w	r3, r7, #8
 8019044:	4618      	mov	r0, r3
 8019046:	f004 fbab 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
 801904a:	4623      	mov	r3, r4
}
 801904c:	4618      	mov	r0, r3
 801904e:	3744      	adds	r7, #68	; 0x44
 8019050:	46bd      	mov	sp, r7
 8019052:	bd90      	pop	{r4, r7, pc}

08019054 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv>:

const void * MockCheckedActualCall::returnConstPointerValueOrDefault(const void * default_value)
{
 8019054:	b580      	push	{r7, lr}
 8019056:	b082      	sub	sp, #8
 8019058:	af00      	add	r7, sp, #0
 801905a:	6078      	str	r0, [r7, #4]
 801905c:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	681b      	ldr	r3, [r3, #0]
 8019062:	3350      	adds	r3, #80	; 0x50
 8019064:	681b      	ldr	r3, [r3, #0]
 8019066:	6878      	ldr	r0, [r7, #4]
 8019068:	4798      	blx	r3
 801906a:	4603      	mov	r3, r0
 801906c:	f083 0301 	eor.w	r3, r3, #1
 8019070:	b2db      	uxtb	r3, r3
 8019072:	2b00      	cmp	r3, #0
 8019074:	d001      	beq.n	801907a <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x26>
        return default_value;
 8019076:	683b      	ldr	r3, [r7, #0]
 8019078:	e007      	b.n	801908a <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x36>
    }
    return returnConstPointerValue();
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	681b      	ldr	r3, [r3, #0]
 801907e:	33a8      	adds	r3, #168	; 0xa8
 8019080:	681b      	ldr	r3, [r3, #0]
 8019082:	6878      	ldr	r0, [r7, #4]
 8019084:	4798      	blx	r3
 8019086:	4603      	mov	r3, r0
 8019088:	bf00      	nop
}
 801908a:	4618      	mov	r0, r3
 801908c:	3708      	adds	r7, #8
 801908e:	46bd      	mov	sp, r7
 8019090:	bd80      	pop	{r7, pc}

08019092 <_ZN21MockCheckedActualCall26returnFunctionPointerValueEv>:

void (*MockCheckedActualCall::returnFunctionPointerValue())()
{
 8019092:	b590      	push	{r4, r7, lr}
 8019094:	b091      	sub	sp, #68	; 0x44
 8019096:	af00      	add	r7, sp, #0
 8019098:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	681b      	ldr	r3, [r3, #0]
 801909e:	3354      	adds	r3, #84	; 0x54
 80190a0:	681b      	ldr	r3, [r3, #0]
 80190a2:	f107 0208 	add.w	r2, r7, #8
 80190a6:	6879      	ldr	r1, [r7, #4]
 80190a8:	4610      	mov	r0, r2
 80190aa:	4798      	blx	r3
 80190ac:	f107 0308 	add.w	r3, r7, #8
 80190b0:	4618      	mov	r0, r3
 80190b2:	f005 f8d5 	bl	801e260 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 80190b6:	4604      	mov	r4, r0
 80190b8:	bf00      	nop
 80190ba:	f107 0308 	add.w	r3, r7, #8
 80190be:	4618      	mov	r0, r3
 80190c0:	f004 fb6e 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
 80190c4:	4623      	mov	r3, r4
}
 80190c6:	4618      	mov	r0, r3
 80190c8:	3744      	adds	r7, #68	; 0x44
 80190ca:	46bd      	mov	sp, r7
 80190cc:	bd90      	pop	{r4, r7, pc}

080190ce <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockCheckedActualCall::returnFunctionPointerValueOrDefault(void (*default_value)()))()
{
 80190ce:	b580      	push	{r7, lr}
 80190d0:	b082      	sub	sp, #8
 80190d2:	af00      	add	r7, sp, #0
 80190d4:	6078      	str	r0, [r7, #4]
 80190d6:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80190d8:	687b      	ldr	r3, [r7, #4]
 80190da:	681b      	ldr	r3, [r3, #0]
 80190dc:	3350      	adds	r3, #80	; 0x50
 80190de:	681b      	ldr	r3, [r3, #0]
 80190e0:	6878      	ldr	r0, [r7, #4]
 80190e2:	4798      	blx	r3
 80190e4:	4603      	mov	r3, r0
 80190e6:	f083 0301 	eor.w	r3, r3, #1
 80190ea:	b2db      	uxtb	r3, r3
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	d001      	beq.n	80190f4 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x26>
        return default_value;
 80190f0:	683b      	ldr	r3, [r7, #0]
 80190f2:	e007      	b.n	8019104 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x36>
    }
    return returnFunctionPointerValue();
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	681b      	ldr	r3, [r3, #0]
 80190f8:	33b0      	adds	r3, #176	; 0xb0
 80190fa:	681b      	ldr	r3, [r3, #0]
 80190fc:	6878      	ldr	r0, [r7, #4]
 80190fe:	4798      	blx	r3
 8019100:	4603      	mov	r3, r0
 8019102:	bf00      	nop
}
 8019104:	4618      	mov	r0, r3
 8019106:	3708      	adds	r7, #8
 8019108:	46bd      	mov	sp, r7
 801910a:	bd80      	pop	{r7, pc}

0801910c <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc>:

const char * MockCheckedActualCall::returnStringValueOrDefault(const char * default_value)
{
 801910c:	b580      	push	{r7, lr}
 801910e:	b082      	sub	sp, #8
 8019110:	af00      	add	r7, sp, #0
 8019112:	6078      	str	r0, [r7, #4]
 8019114:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	681b      	ldr	r3, [r3, #0]
 801911a:	3350      	adds	r3, #80	; 0x50
 801911c:	681b      	ldr	r3, [r3, #0]
 801911e:	6878      	ldr	r0, [r7, #4]
 8019120:	4798      	blx	r3
 8019122:	4603      	mov	r3, r0
 8019124:	f083 0301 	eor.w	r3, r3, #1
 8019128:	b2db      	uxtb	r3, r3
 801912a:	2b00      	cmp	r3, #0
 801912c:	d001      	beq.n	8019132 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x26>
        return default_value;
 801912e:	683b      	ldr	r3, [r7, #0]
 8019130:	e007      	b.n	8019142 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x36>
    }
    return returnStringValue();
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	681b      	ldr	r3, [r3, #0]
 8019136:	3394      	adds	r3, #148	; 0x94
 8019138:	681b      	ldr	r3, [r3, #0]
 801913a:	6878      	ldr	r0, [r7, #4]
 801913c:	4798      	blx	r3
 801913e:	4603      	mov	r3, r0
 8019140:	bf00      	nop
}
 8019142:	4618      	mov	r0, r3
 8019144:	3708      	adds	r7, #8
 8019146:	46bd      	mov	sp, r7
 8019148:	bd80      	pop	{r7, pc}

0801914a <_ZN21MockCheckedActualCall17returnStringValueEv>:

const char * MockCheckedActualCall::returnStringValue()
{
 801914a:	b590      	push	{r4, r7, lr}
 801914c:	b091      	sub	sp, #68	; 0x44
 801914e:	af00      	add	r7, sp, #0
 8019150:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 8019152:	687b      	ldr	r3, [r7, #4]
 8019154:	681b      	ldr	r3, [r3, #0]
 8019156:	3354      	adds	r3, #84	; 0x54
 8019158:	681b      	ldr	r3, [r3, #0]
 801915a:	f107 0208 	add.w	r2, r7, #8
 801915e:	6879      	ldr	r1, [r7, #4]
 8019160:	4610      	mov	r0, r2
 8019162:	4798      	blx	r3
 8019164:	f107 0308 	add.w	r3, r7, #8
 8019168:	4618      	mov	r0, r3
 801916a:	f005 f801 	bl	801e170 <_ZNK14MockNamedValue14getStringValueEv>
 801916e:	4604      	mov	r4, r0
 8019170:	bf00      	nop
 8019172:	f107 0308 	add.w	r3, r7, #8
 8019176:	4618      	mov	r0, r3
 8019178:	f004 fb12 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
 801917c:	4623      	mov	r3, r4
}
 801917e:	4618      	mov	r0, r3
 8019180:	3744      	adds	r7, #68	; 0x44
 8019182:	46bd      	mov	sp, r7
 8019184:	bd90      	pop	{r4, r7, pc}

08019186 <_ZN21MockCheckedActualCall14hasReturnValueEv>:

bool MockCheckedActualCall::hasReturnValue()
{
 8019186:	b590      	push	{r4, r7, lr}
 8019188:	b093      	sub	sp, #76	; 0x4c
 801918a:	af00      	add	r7, sp, #0
 801918c:	6078      	str	r0, [r7, #4]
    return ! returnValue().getName().isEmpty();
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	681b      	ldr	r3, [r3, #0]
 8019192:	3354      	adds	r3, #84	; 0x54
 8019194:	681b      	ldr	r3, [r3, #0]
 8019196:	f107 0210 	add.w	r2, r7, #16
 801919a:	6879      	ldr	r1, [r7, #4]
 801919c:	4610      	mov	r0, r2
 801919e:	4798      	blx	r3
 80191a0:	f107 0308 	add.w	r3, r7, #8
 80191a4:	f107 0210 	add.w	r2, r7, #16
 80191a8:	4611      	mov	r1, r2
 80191aa:	4618      	mov	r0, r3
 80191ac:	f004 fd8c 	bl	801dcc8 <_ZNK14MockNamedValue7getNameEv>
 80191b0:	f107 0308 	add.w	r3, r7, #8
 80191b4:	4618      	mov	r0, r3
 80191b6:	f7f4 f94b 	bl	800d450 <_ZNK12SimpleString7isEmptyEv>
 80191ba:	4603      	mov	r3, r0
 80191bc:	f083 0301 	eor.w	r3, r3, #1
 80191c0:	b2dc      	uxtb	r4, r3
 80191c2:	f107 0308 	add.w	r3, r7, #8
 80191c6:	4618      	mov	r0, r3
 80191c8:	f7f4 f953 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80191cc:	f107 0310 	add.w	r3, r7, #16
 80191d0:	4618      	mov	r0, r3
 80191d2:	f004 fae5 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
 80191d6:	4623      	mov	r3, r4
}
 80191d8:	4618      	mov	r0, r3
 80191da:	374c      	adds	r7, #76	; 0x4c
 80191dc:	46bd      	mov	sp, r7
 80191de:	bd90      	pop	{r4, r7, pc}

080191e0 <_ZN21MockCheckedActualCall8onObjectEPKv>:

MockActualCall& MockCheckedActualCall::onObject(const void* objectPtr)
{
 80191e0:	b590      	push	{r4, r7, lr}
 80191e2:	b095      	sub	sp, #84	; 0x54
 80191e4:	af02      	add	r7, sp, #8
 80191e6:	6078      	str	r0, [r7, #4]
 80191e8:	6039      	str	r1, [r7, #0]
    if(hasFailed()) {
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	33c0      	adds	r3, #192	; 0xc0
 80191f0:	681b      	ldr	r3, [r3, #0]
 80191f2:	6878      	ldr	r0, [r7, #4]
 80191f4:	4798      	blx	r3
 80191f6:	4603      	mov	r3, r0
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	d001      	beq.n	8019200 <_ZN21MockCheckedActualCall8onObjectEPKv+0x20>
        return *this;
 80191fc:	687c      	ldr	r4, [r7, #4]
 80191fe:	e053      	b.n	80192a8 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    // Currently matching expectations are not discarded because the passed object
    // is ignored if not specifically set in the expectation

    potentiallyMatchingExpectations_.onlyKeepExpectationsOnObject(objectPtr);
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	331c      	adds	r3, #28
 8019204:	6839      	ldr	r1, [r7, #0]
 8019206:	4618      	mov	r0, r3
 8019208:	f003 f8ca 	bl	801c3a0 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>

    if ((!matchingExpectation_) && potentiallyMatchingExpectations_.isEmpty()) {
 801920c:	687b      	ldr	r3, [r7, #4]
 801920e:	699b      	ldr	r3, [r3, #24]
 8019210:	2b00      	cmp	r3, #0
 8019212:	d109      	bne.n	8019228 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	331c      	adds	r3, #28
 8019218:	4618      	mov	r0, r3
 801921a:	f002 fe20 	bl	801be5e <_ZNK21MockExpectedCallsList7isEmptyEv>
 801921e:	4603      	mov	r3, r0
 8019220:	2b00      	cmp	r3, #0
 8019222:	d001      	beq.n	8019228 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 8019224:	2301      	movs	r3, #1
 8019226:	e000      	b.n	801922a <_ZN21MockCheckedActualCall8onObjectEPKv+0x4a>
 8019228:	2300      	movs	r3, #0
 801922a:	2b00      	cmp	r3, #0
 801922c:	d02c      	beq.n	8019288 <_ZN21MockCheckedActualCall8onObjectEPKv+0xa8>
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	681b      	ldr	r3, [r3, #0]
 8019232:	33cc      	adds	r3, #204	; 0xcc
 8019234:	681b      	ldr	r3, [r3, #0]
 8019236:	6878      	ldr	r0, [r7, #4]
 8019238:	4798      	blx	r3
 801923a:	4604      	mov	r4, r0
 801923c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019240:	6879      	ldr	r1, [r7, #4]
 8019242:	4618      	mov	r0, r3
 8019244:	f7fe fd3f 	bl	8017cc6 <_ZNK21MockCheckedActualCall7getNameEv>
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801924c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8019250:	f107 000c 	add.w	r0, r7, #12
 8019254:	9300      	str	r3, [sp, #0]
 8019256:	683b      	ldr	r3, [r7, #0]
 8019258:	4621      	mov	r1, r4
 801925a:	f004 f9fb 	bl	801d654 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>
 801925e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019262:	4618      	mov	r0, r3
 8019264:	f7f4 f905 	bl	800d472 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	681b      	ldr	r3, [r3, #0]
 801926c:	33dc      	adds	r3, #220	; 0xdc
 801926e:	681b      	ldr	r3, [r3, #0]
 8019270:	f107 020c 	add.w	r2, r7, #12
 8019274:	4611      	mov	r1, r2
 8019276:	6878      	ldr	r0, [r7, #4]
 8019278:	4798      	blx	r3
        return *this;
 801927a:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 801927c:	f107 030c 	add.w	r3, r7, #12
 8019280:	4618      	mov	r0, r3
 8019282:	f000 ffa7 	bl	801a1d4 <_ZN27MockUnexpectedObjectFailureD1Ev>
 8019286:	e00f      	b.n	80192a8 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    potentiallyMatchingExpectations_.wasPassedToObject();
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	331c      	adds	r3, #28
 801928c:	4618      	mov	r0, r3
 801928e:	f003 f9a7 	bl	801c5e0 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>

    if (!matchingExpectation_) {
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	699b      	ldr	r3, [r3, #24]
 8019296:	2b00      	cmp	r3, #0
 8019298:	d105      	bne.n	80192a6 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc6>
        completeCallWhenMatchIsFound();
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	681b      	ldr	r3, [r3, #0]
 801929e:	33d8      	adds	r3, #216	; 0xd8
 80192a0:	681b      	ldr	r3, [r3, #0]
 80192a2:	6878      	ldr	r0, [r7, #4]
 80192a4:	4798      	blx	r3
    }

    return *this;
 80192a6:	687c      	ldr	r4, [r7, #4]
 80192a8:	4623      	mov	r3, r4
}
 80192aa:	4618      	mov	r0, r3
 80192ac:	374c      	adds	r7, #76	; 0x4c
 80192ae:	46bd      	mov	sp, r7
 80192b0:	bd90      	pop	{r4, r7, pc}
	...

080192b4 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv>:

void MockCheckedActualCall::addOutputParameter(const SimpleString& name, const SimpleString& type, void* ptr)
{
 80192b4:	b590      	push	{r4, r7, lr}
 80192b6:	b087      	sub	sp, #28
 80192b8:	af00      	add	r7, sp, #0
 80192ba:	60f8      	str	r0, [r7, #12]
 80192bc:	60b9      	str	r1, [r7, #8]
 80192be:	607a      	str	r2, [r7, #4]
 80192c0:	603b      	str	r3, [r7, #0]
    MockOutputParametersListNode* newNode = new MockOutputParametersListNode(name, type, ptr);
 80192c2:	f240 2282 	movw	r2, #642	; 0x282
 80192c6:	4913      	ldr	r1, [pc, #76]	; (8019314 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x60>)
 80192c8:	2018      	movs	r0, #24
 80192ca:	f7f1 f957 	bl	800a57c <_ZnwjPKci>
 80192ce:	4604      	mov	r4, r0
 80192d0:	683b      	ldr	r3, [r7, #0]
 80192d2:	687a      	ldr	r2, [r7, #4]
 80192d4:	68b9      	ldr	r1, [r7, #8]
 80192d6:	4620      	mov	r0, r4
 80192d8:	f7fe fa48 	bl	801776c <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>
 80192dc:	613c      	str	r4, [r7, #16]

    if (outputParameterExpectations_ == NULLPTR)
 80192de:	68fb      	ldr	r3, [r7, #12]
 80192e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80192e2:	2b00      	cmp	r3, #0
 80192e4:	d103      	bne.n	80192ee <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x3a>
        outputParameterExpectations_ = newNode;
 80192e6:	68fb      	ldr	r3, [r7, #12]
 80192e8:	693a      	ldr	r2, [r7, #16]
 80192ea:	629a      	str	r2, [r3, #40]	; 0x28
    else {
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
        while (lastNode->next_) lastNode = lastNode->next_;
        lastNode->next_ = newNode;
    }
}
 80192ec:	e00d      	b.n	801930a <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x56>
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
 80192ee:	68fb      	ldr	r3, [r7, #12]
 80192f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80192f2:	617b      	str	r3, [r7, #20]
        while (lastNode->next_) lastNode = lastNode->next_;
 80192f4:	697b      	ldr	r3, [r7, #20]
 80192f6:	695b      	ldr	r3, [r3, #20]
 80192f8:	2b00      	cmp	r3, #0
 80192fa:	d003      	beq.n	8019304 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x50>
 80192fc:	697b      	ldr	r3, [r7, #20]
 80192fe:	695b      	ldr	r3, [r3, #20]
 8019300:	617b      	str	r3, [r7, #20]
 8019302:	e7f7      	b.n	80192f4 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x40>
        lastNode->next_ = newNode;
 8019304:	697b      	ldr	r3, [r7, #20]
 8019306:	693a      	ldr	r2, [r7, #16]
 8019308:	615a      	str	r2, [r3, #20]
}
 801930a:	bf00      	nop
 801930c:	371c      	adds	r7, #28
 801930e:	46bd      	mov	sp, r7
 8019310:	bd90      	pop	{r4, r7, pc}
 8019312:	bf00      	nop
 8019314:	08025fb8 	.word	0x08025fb8

08019318 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>:
    class MockOutputParametersListNode
 8019318:	b580      	push	{r7, lr}
 801931a:	b082      	sub	sp, #8
 801931c:	af00      	add	r7, sp, #0
 801931e:	6078      	str	r0, [r7, #4]
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	3308      	adds	r3, #8
 8019324:	4618      	mov	r0, r3
 8019326:	f7f4 f8a4 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	4618      	mov	r0, r3
 801932e:	f7f4 f8a0 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	4618      	mov	r0, r3
 8019336:	3708      	adds	r7, #8
 8019338:	46bd      	mov	sp, r7
 801933a:	bd80      	pop	{r7, pc}

0801933c <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>:

void MockCheckedActualCall::cleanUpOutputParameterList()
{
 801933c:	b590      	push	{r4, r7, lr}
 801933e:	b085      	sub	sp, #20
 8019340:	af00      	add	r7, sp, #0
 8019342:	6078      	str	r0, [r7, #4]
    MockOutputParametersListNode* current = outputParameterExpectations_;
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019348:	60fb      	str	r3, [r7, #12]
    MockOutputParametersListNode* toBeDeleted = NULLPTR;
 801934a:	2300      	movs	r3, #0
 801934c:	60bb      	str	r3, [r7, #8]

    while (current) {
 801934e:	68fb      	ldr	r3, [r7, #12]
 8019350:	2b00      	cmp	r3, #0
 8019352:	d012      	beq.n	801937a <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x3e>
        toBeDeleted = current;
 8019354:	68fb      	ldr	r3, [r7, #12]
 8019356:	60bb      	str	r3, [r7, #8]
        outputParameterExpectations_ = current = current->next_;
 8019358:	68fb      	ldr	r3, [r7, #12]
 801935a:	695b      	ldr	r3, [r3, #20]
 801935c:	60fb      	str	r3, [r7, #12]
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	68fa      	ldr	r2, [r7, #12]
 8019362:	629a      	str	r2, [r3, #40]	; 0x28
        delete toBeDeleted;
 8019364:	68bc      	ldr	r4, [r7, #8]
 8019366:	2c00      	cmp	r4, #0
 8019368:	d0f1      	beq.n	801934e <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
 801936a:	4620      	mov	r0, r4
 801936c:	f7ff ffd4 	bl	8019318 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>
 8019370:	2118      	movs	r1, #24
 8019372:	4620      	mov	r0, r4
 8019374:	f7f1 f916 	bl	800a5a4 <_ZdlPvj>
    while (current) {
 8019378:	e7e9      	b.n	801934e <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
    }
}
 801937a:	bf00      	nop
 801937c:	3714      	adds	r7, #20
 801937e:	46bd      	mov	sp, r7
 8019380:	bd90      	pop	{r4, r7, pc}
	...

08019384 <_ZN19MockActualCallTraceC1Ev>:


MockActualCallTrace::MockActualCallTrace()
 8019384:	b580      	push	{r7, lr}
 8019386:	b082      	sub	sp, #8
 8019388:	af00      	add	r7, sp, #0
 801938a:	6078      	str	r0, [r7, #4]
 801938c:	687b      	ldr	r3, [r7, #4]
 801938e:	4618      	mov	r0, r3
 8019390:	f7fe fc6a 	bl	8017c68 <_ZN14MockActualCallC1Ev>
 8019394:	4a06      	ldr	r2, [pc, #24]	; (80193b0 <_ZN19MockActualCallTraceC1Ev+0x2c>)
 8019396:	687b      	ldr	r3, [r7, #4]
 8019398:	601a      	str	r2, [r3, #0]
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	3304      	adds	r3, #4
 801939e:	4905      	ldr	r1, [pc, #20]	; (80193b4 <_ZN19MockActualCallTraceC1Ev+0x30>)
 80193a0:	4618      	mov	r0, r3
 80193a2:	f7f3 fcae 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
{
}
 80193a6:	687b      	ldr	r3, [r7, #4]
 80193a8:	4618      	mov	r0, r3
 80193aa:	3708      	adds	r7, #8
 80193ac:	46bd      	mov	sp, r7
 80193ae:	bd80      	pop	{r7, pc}
 80193b0:	08028de4 	.word	0x08028de4
 80193b4:	08025fa0 	.word	0x08025fa0

080193b8 <_ZN19MockActualCallTraceD1Ev>:

MockActualCallTrace::~MockActualCallTrace()
 80193b8:	b580      	push	{r7, lr}
 80193ba:	b082      	sub	sp, #8
 80193bc:	af00      	add	r7, sp, #0
 80193be:	6078      	str	r0, [r7, #4]
 80193c0:	4a08      	ldr	r2, [pc, #32]	; (80193e4 <_ZN19MockActualCallTraceD1Ev+0x2c>)
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	601a      	str	r2, [r3, #0]
 80193c6:	687b      	ldr	r3, [r7, #4]
 80193c8:	3304      	adds	r3, #4
 80193ca:	4618      	mov	r0, r3
 80193cc:	f7f4 f851 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	4618      	mov	r0, r3
 80193d4:	f7fe fc58 	bl	8017c88 <_ZN14MockActualCallD1Ev>
{
}
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	4618      	mov	r0, r3
 80193dc:	3708      	adds	r7, #8
 80193de:	46bd      	mov	sp, r7
 80193e0:	bd80      	pop	{r7, pc}
 80193e2:	bf00      	nop
 80193e4:	08028de4 	.word	0x08028de4

080193e8 <_ZN19MockActualCallTraceD0Ev>:
MockActualCallTrace::~MockActualCallTrace()
 80193e8:	b580      	push	{r7, lr}
 80193ea:	b082      	sub	sp, #8
 80193ec:	af00      	add	r7, sp, #0
 80193ee:	6078      	str	r0, [r7, #4]
}
 80193f0:	6878      	ldr	r0, [r7, #4]
 80193f2:	f7ff ffe1 	bl	80193b8 <_ZN19MockActualCallTraceD1Ev>
 80193f6:	210c      	movs	r1, #12
 80193f8:	6878      	ldr	r0, [r7, #4]
 80193fa:	f7f1 f8d3 	bl	800a5a4 <_ZdlPvj>
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	4618      	mov	r0, r3
 8019402:	3708      	adds	r7, #8
 8019404:	46bd      	mov	sp, r7
 8019406:	bd80      	pop	{r7, pc}

08019408 <_ZN19MockActualCallTrace8withNameERK12SimpleString>:

MockActualCall& MockActualCallTrace::withName(const SimpleString& name)
{
 8019408:	b580      	push	{r7, lr}
 801940a:	b082      	sub	sp, #8
 801940c:	af00      	add	r7, sp, #0
 801940e:	6078      	str	r0, [r7, #4]
 8019410:	6039      	str	r1, [r7, #0]
    traceBuffer_ += "\nFunction name:";
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	3304      	adds	r3, #4
 8019416:	4907      	ldr	r1, [pc, #28]	; (8019434 <_ZN19MockActualCallTrace8withNameERK12SimpleString+0x2c>)
 8019418:	4618      	mov	r0, r3
 801941a:	f7f4 f8b9 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 801941e:	687b      	ldr	r3, [r7, #4]
 8019420:	3304      	adds	r3, #4
 8019422:	6839      	ldr	r1, [r7, #0]
 8019424:	4618      	mov	r0, r3
 8019426:	f7f4 f8a1 	bl	800d56c <_ZN12SimpleStringpLERKS_>
    return *this;
 801942a:	687b      	ldr	r3, [r7, #4]
}
 801942c:	4618      	mov	r0, r3
 801942e:	3708      	adds	r7, #8
 8019430:	46bd      	mov	sp, r7
 8019432:	bd80      	pop	{r7, pc}
 8019434:	080260ac 	.word	0x080260ac

08019438 <_ZN19MockActualCallTrace13withCallOrderEj>:

MockActualCall& MockActualCallTrace::withCallOrder(unsigned int callOrder)
{
 8019438:	b590      	push	{r4, r7, lr}
 801943a:	b085      	sub	sp, #20
 801943c:	af00      	add	r7, sp, #0
 801943e:	6078      	str	r0, [r7, #4]
 8019440:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " withCallOrder:";
 8019442:	687b      	ldr	r3, [r7, #4]
 8019444:	3304      	adds	r3, #4
 8019446:	490e      	ldr	r1, [pc, #56]	; (8019480 <_ZN19MockActualCallTrace13withCallOrderEj+0x48>)
 8019448:	4618      	mov	r0, r3
 801944a:	f7f4 f8a1 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(callOrder);
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	1d1c      	adds	r4, r3, #4
 8019452:	f107 0308 	add.w	r3, r7, #8
 8019456:	6839      	ldr	r1, [r7, #0]
 8019458:	4618      	mov	r0, r3
 801945a:	f7f4 fd39 	bl	800ded0 <_Z10StringFromj>
 801945e:	f107 0308 	add.w	r3, r7, #8
 8019462:	4619      	mov	r1, r3
 8019464:	4620      	mov	r0, r4
 8019466:	f7f4 f881 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 801946a:	f107 0308 	add.w	r3, r7, #8
 801946e:	4618      	mov	r0, r3
 8019470:	f7f3 ffff 	bl	800d472 <_ZN12SimpleStringD1Ev>
    return *this;
 8019474:	687b      	ldr	r3, [r7, #4]
}
 8019476:	4618      	mov	r0, r3
 8019478:	3714      	adds	r7, #20
 801947a:	46bd      	mov	sp, r7
 801947c:	bd90      	pop	{r4, r7, pc}
 801947e:	bf00      	nop
 8019480:	080260bc 	.word	0x080260bc

08019484 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>:

void MockActualCallTrace::addParameterName(const SimpleString& name)
{
 8019484:	b580      	push	{r7, lr}
 8019486:	b082      	sub	sp, #8
 8019488:	af00      	add	r7, sp, #0
 801948a:	6078      	str	r0, [r7, #4]
 801948c:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " ";
 801948e:	687b      	ldr	r3, [r7, #4]
 8019490:	3304      	adds	r3, #4
 8019492:	490a      	ldr	r1, [pc, #40]	; (80194bc <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x38>)
 8019494:	4618      	mov	r0, r3
 8019496:	f7f4 f87b 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	3304      	adds	r3, #4
 801949e:	6839      	ldr	r1, [r7, #0]
 80194a0:	4618      	mov	r0, r3
 80194a2:	f7f4 f863 	bl	800d56c <_ZN12SimpleStringpLERKS_>
    traceBuffer_ += ":";
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	3304      	adds	r3, #4
 80194aa:	4905      	ldr	r1, [pc, #20]	; (80194c0 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x3c>)
 80194ac:	4618      	mov	r0, r3
 80194ae:	f7f4 f86f 	bl	800d590 <_ZN12SimpleStringpLEPKc>
}
 80194b2:	bf00      	nop
 80194b4:	3708      	adds	r7, #8
 80194b6:	46bd      	mov	sp, r7
 80194b8:	bd80      	pop	{r7, pc}
 80194ba:	bf00      	nop
 80194bc:	080260cc 	.word	0x080260cc
 80194c0:	080260d0 	.word	0x080260d0

080194c4 <_ZN19MockActualCallTrace17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockActualCallTrace::withBoolParameter(const SimpleString& name, bool value)
{
 80194c4:	b590      	push	{r4, r7, lr}
 80194c6:	b087      	sub	sp, #28
 80194c8:	af00      	add	r7, sp, #0
 80194ca:	60f8      	str	r0, [r7, #12]
 80194cc:	60b9      	str	r1, [r7, #8]
 80194ce:	4613      	mov	r3, r2
 80194d0:	71fb      	strb	r3, [r7, #7]
    addParameterName(name);
 80194d2:	68b9      	ldr	r1, [r7, #8]
 80194d4:	68f8      	ldr	r0, [r7, #12]
 80194d6:	f7ff ffd5 	bl	8019484 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80194da:	68fb      	ldr	r3, [r7, #12]
 80194dc:	1d1c      	adds	r4, r3, #4
 80194de:	f107 0310 	add.w	r3, r7, #16
 80194e2:	79fa      	ldrb	r2, [r7, #7]
 80194e4:	4611      	mov	r1, r2
 80194e6:	4618      	mov	r0, r3
 80194e8:	f7f4 fa34 	bl	800d954 <_Z10StringFromb>
 80194ec:	f107 0310 	add.w	r3, r7, #16
 80194f0:	4619      	mov	r1, r3
 80194f2:	4620      	mov	r0, r4
 80194f4:	f7f4 f83a 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 80194f8:	f107 0310 	add.w	r3, r7, #16
 80194fc:	4618      	mov	r0, r3
 80194fe:	f7f3 ffb8 	bl	800d472 <_ZN12SimpleStringD1Ev>
    return *this;
 8019502:	68fb      	ldr	r3, [r7, #12]
}
 8019504:	4618      	mov	r0, r3
 8019506:	371c      	adds	r7, #28
 8019508:	46bd      	mov	sp, r7
 801950a:	bd90      	pop	{r4, r7, pc}

0801950c <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockActualCallTrace::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 801950c:	b590      	push	{r4, r7, lr}
 801950e:	b08f      	sub	sp, #60	; 0x3c
 8019510:	af00      	add	r7, sp, #0
 8019512:	60f8      	str	r0, [r7, #12]
 8019514:	60b9      	str	r1, [r7, #8]
 8019516:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019518:	68b9      	ldr	r1, [r7, #8]
 801951a:	68f8      	ldr	r0, [r7, #12]
 801951c:	f7ff ffb2 	bl	8019484 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8019520:	68fb      	ldr	r3, [r7, #12]
 8019522:	1d1c      	adds	r4, r3, #4
 8019524:	f107 0320 	add.w	r3, r7, #32
 8019528:	6879      	ldr	r1, [r7, #4]
 801952a:	4618      	mov	r0, r3
 801952c:	f7f4 fcd0 	bl	800ded0 <_Z10StringFromj>
 8019530:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019534:	491f      	ldr	r1, [pc, #124]	; (80195b4 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj+0xa8>)
 8019536:	4618      	mov	r0, r3
 8019538:	f7f3 fbe3 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801953c:	f107 0318 	add.w	r3, r7, #24
 8019540:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019544:	f107 0120 	add.w	r1, r7, #32
 8019548:	4618      	mov	r0, r3
 801954a:	f7f3 fff4 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 801954e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019552:	6879      	ldr	r1, [r7, #4]
 8019554:	4618      	mov	r0, r3
 8019556:	f7f4 fb5f 	bl	800dc18 <_Z30BracketsFormattedHexStringFromj>
 801955a:	f107 0310 	add.w	r3, r7, #16
 801955e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8019562:	f107 0118 	add.w	r1, r7, #24
 8019566:	4618      	mov	r0, r3
 8019568:	f7f3 ffe5 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 801956c:	f107 0310 	add.w	r3, r7, #16
 8019570:	4619      	mov	r1, r3
 8019572:	4620      	mov	r0, r4
 8019574:	f7f3 fffa 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 8019578:	f107 0310 	add.w	r3, r7, #16
 801957c:	4618      	mov	r0, r3
 801957e:	f7f3 ff78 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8019582:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019586:	4618      	mov	r0, r3
 8019588:	f7f3 ff73 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801958c:	f107 0318 	add.w	r3, r7, #24
 8019590:	4618      	mov	r0, r3
 8019592:	f7f3 ff6e 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8019596:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801959a:	4618      	mov	r0, r3
 801959c:	f7f3 ff69 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80195a0:	f107 0320 	add.w	r3, r7, #32
 80195a4:	4618      	mov	r0, r3
 80195a6:	f7f3 ff64 	bl	800d472 <_ZN12SimpleStringD1Ev>
    return *this;
 80195aa:	68fb      	ldr	r3, [r7, #12]
}
 80195ac:	4618      	mov	r0, r3
 80195ae:	373c      	adds	r7, #60	; 0x3c
 80195b0:	46bd      	mov	sp, r7
 80195b2:	bd90      	pop	{r4, r7, pc}
 80195b4:	080260cc 	.word	0x080260cc

080195b8 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi>:

MockActualCall& MockActualCallTrace::withIntParameter(const SimpleString& name, int value)
{
 80195b8:	b590      	push	{r4, r7, lr}
 80195ba:	b08f      	sub	sp, #60	; 0x3c
 80195bc:	af00      	add	r7, sp, #0
 80195be:	60f8      	str	r0, [r7, #12]
 80195c0:	60b9      	str	r1, [r7, #8]
 80195c2:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80195c4:	68b9      	ldr	r1, [r7, #8]
 80195c6:	68f8      	ldr	r0, [r7, #12]
 80195c8:	f7ff ff5c 	bl	8019484 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 80195cc:	68fb      	ldr	r3, [r7, #12]
 80195ce:	1d1c      	adds	r4, r3, #4
 80195d0:	f107 0320 	add.w	r3, r7, #32
 80195d4:	6879      	ldr	r1, [r7, #4]
 80195d6:	4618      	mov	r0, r3
 80195d8:	f7f4 fa12 	bl	800da00 <_Z10StringFromi>
 80195dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80195e0:	491f      	ldr	r1, [pc, #124]	; (8019660 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi+0xa8>)
 80195e2:	4618      	mov	r0, r3
 80195e4:	f7f3 fb8d 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 80195e8:	f107 0318 	add.w	r3, r7, #24
 80195ec:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80195f0:	f107 0120 	add.w	r1, r7, #32
 80195f4:	4618      	mov	r0, r3
 80195f6:	f7f3 ff9e 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 80195fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80195fe:	6879      	ldr	r1, [r7, #4]
 8019600:	4618      	mov	r0, r3
 8019602:	f7f4 faed 	bl	800dbe0 <_Z30BracketsFormattedHexStringFromi>
 8019606:	f107 0310 	add.w	r3, r7, #16
 801960a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801960e:	f107 0118 	add.w	r1, r7, #24
 8019612:	4618      	mov	r0, r3
 8019614:	f7f3 ff8f 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 8019618:	f107 0310 	add.w	r3, r7, #16
 801961c:	4619      	mov	r1, r3
 801961e:	4620      	mov	r0, r4
 8019620:	f7f3 ffa4 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 8019624:	f107 0310 	add.w	r3, r7, #16
 8019628:	4618      	mov	r0, r3
 801962a:	f7f3 ff22 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801962e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019632:	4618      	mov	r0, r3
 8019634:	f7f3 ff1d 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8019638:	f107 0318 	add.w	r3, r7, #24
 801963c:	4618      	mov	r0, r3
 801963e:	f7f3 ff18 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8019642:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019646:	4618      	mov	r0, r3
 8019648:	f7f3 ff13 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801964c:	f107 0320 	add.w	r3, r7, #32
 8019650:	4618      	mov	r0, r3
 8019652:	f7f3 ff0e 	bl	800d472 <_ZN12SimpleStringD1Ev>
    return *this;
 8019656:	68fb      	ldr	r3, [r7, #12]
}
 8019658:	4618      	mov	r0, r3
 801965a:	373c      	adds	r7, #60	; 0x3c
 801965c:	46bd      	mov	sp, r7
 801965e:	bd90      	pop	{r4, r7, pc}
 8019660:	080260cc 	.word	0x080260cc

08019664 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockActualCallTrace::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8019664:	b590      	push	{r4, r7, lr}
 8019666:	b08f      	sub	sp, #60	; 0x3c
 8019668:	af00      	add	r7, sp, #0
 801966a:	60f8      	str	r0, [r7, #12]
 801966c:	60b9      	str	r1, [r7, #8]
 801966e:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019670:	68b9      	ldr	r1, [r7, #8]
 8019672:	68f8      	ldr	r0, [r7, #12]
 8019674:	f7ff ff06 	bl	8019484 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8019678:	68fb      	ldr	r3, [r7, #12]
 801967a:	1d1c      	adds	r4, r3, #4
 801967c:	f107 0320 	add.w	r3, r7, #32
 8019680:	6879      	ldr	r1, [r7, #4]
 8019682:	4618      	mov	r0, r3
 8019684:	f7f4 fc36 	bl	800def4 <_Z10StringFromm>
 8019688:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801968c:	491f      	ldr	r1, [pc, #124]	; (801970c <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm+0xa8>)
 801968e:	4618      	mov	r0, r3
 8019690:	f7f3 fb37 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8019694:	f107 0318 	add.w	r3, r7, #24
 8019698:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801969c:	f107 0120 	add.w	r1, r7, #32
 80196a0:	4618      	mov	r0, r3
 80196a2:	f7f3 ff48 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 80196a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80196aa:	6879      	ldr	r1, [r7, #4]
 80196ac:	4618      	mov	r0, r3
 80196ae:	f7f4 faeb 	bl	800dc88 <_Z30BracketsFormattedHexStringFromm>
 80196b2:	f107 0310 	add.w	r3, r7, #16
 80196b6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80196ba:	f107 0118 	add.w	r1, r7, #24
 80196be:	4618      	mov	r0, r3
 80196c0:	f7f3 ff39 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 80196c4:	f107 0310 	add.w	r3, r7, #16
 80196c8:	4619      	mov	r1, r3
 80196ca:	4620      	mov	r0, r4
 80196cc:	f7f3 ff4e 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 80196d0:	f107 0310 	add.w	r3, r7, #16
 80196d4:	4618      	mov	r0, r3
 80196d6:	f7f3 fecc 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80196da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80196de:	4618      	mov	r0, r3
 80196e0:	f7f3 fec7 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80196e4:	f107 0318 	add.w	r3, r7, #24
 80196e8:	4618      	mov	r0, r3
 80196ea:	f7f3 fec2 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80196ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80196f2:	4618      	mov	r0, r3
 80196f4:	f7f3 febd 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80196f8:	f107 0320 	add.w	r3, r7, #32
 80196fc:	4618      	mov	r0, r3
 80196fe:	f7f3 feb8 	bl	800d472 <_ZN12SimpleStringD1Ev>
    return *this;
 8019702:	68fb      	ldr	r3, [r7, #12]
}
 8019704:	4618      	mov	r0, r3
 8019706:	373c      	adds	r7, #60	; 0x3c
 8019708:	46bd      	mov	sp, r7
 801970a:	bd90      	pop	{r4, r7, pc}
 801970c:	080260cc 	.word	0x080260cc

08019710 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockActualCallTrace::withLongIntParameter(const SimpleString& name, long int value)
{
 8019710:	b590      	push	{r4, r7, lr}
 8019712:	b08f      	sub	sp, #60	; 0x3c
 8019714:	af00      	add	r7, sp, #0
 8019716:	60f8      	str	r0, [r7, #12]
 8019718:	60b9      	str	r1, [r7, #8]
 801971a:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801971c:	68b9      	ldr	r1, [r7, #8]
 801971e:	68f8      	ldr	r0, [r7, #12]
 8019720:	f7ff feb0 	bl	8019484 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8019724:	68fb      	ldr	r3, [r7, #12]
 8019726:	1d1c      	adds	r4, r3, #4
 8019728:	f107 0320 	add.w	r3, r7, #32
 801972c:	6879      	ldr	r1, [r7, #4]
 801972e:	4618      	mov	r0, r3
 8019730:	f7f4 f978 	bl	800da24 <_Z10StringFroml>
 8019734:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019738:	491f      	ldr	r1, [pc, #124]	; (80197b8 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl+0xa8>)
 801973a:	4618      	mov	r0, r3
 801973c:	f7f3 fae1 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8019740:	f107 0318 	add.w	r3, r7, #24
 8019744:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019748:	f107 0120 	add.w	r1, r7, #32
 801974c:	4618      	mov	r0, r3
 801974e:	f7f3 fef2 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 8019752:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019756:	6879      	ldr	r1, [r7, #4]
 8019758:	4618      	mov	r0, r3
 801975a:	f7f4 fa79 	bl	800dc50 <_Z30BracketsFormattedHexStringFroml>
 801975e:	f107 0310 	add.w	r3, r7, #16
 8019762:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8019766:	f107 0118 	add.w	r1, r7, #24
 801976a:	4618      	mov	r0, r3
 801976c:	f7f3 fee3 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 8019770:	f107 0310 	add.w	r3, r7, #16
 8019774:	4619      	mov	r1, r3
 8019776:	4620      	mov	r0, r4
 8019778:	f7f3 fef8 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 801977c:	f107 0310 	add.w	r3, r7, #16
 8019780:	4618      	mov	r0, r3
 8019782:	f7f3 fe76 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8019786:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801978a:	4618      	mov	r0, r3
 801978c:	f7f3 fe71 	bl	800d472 <_ZN12SimpleStringD1Ev>
 8019790:	f107 0318 	add.w	r3, r7, #24
 8019794:	4618      	mov	r0, r3
 8019796:	f7f3 fe6c 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801979a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801979e:	4618      	mov	r0, r3
 80197a0:	f7f3 fe67 	bl	800d472 <_ZN12SimpleStringD1Ev>
 80197a4:	f107 0320 	add.w	r3, r7, #32
 80197a8:	4618      	mov	r0, r3
 80197aa:	f7f3 fe62 	bl	800d472 <_ZN12SimpleStringD1Ev>
    return *this;
 80197ae:	68fb      	ldr	r3, [r7, #12]
}
 80197b0:	4618      	mov	r0, r3
 80197b2:	373c      	adds	r7, #60	; 0x3c
 80197b4:	46bd      	mov	sp, r7
 80197b6:	bd90      	pop	{r4, r7, pc}
 80197b8:	080260cc 	.word	0x080260cc

080197bc <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockActualCallTrace::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 80197bc:	b5b0      	push	{r4, r5, r7, lr}
 80197be:	b086      	sub	sp, #24
 80197c0:	af02      	add	r7, sp, #8
 80197c2:	60f8      	str	r0, [r7, #12]
 80197c4:	60b9      	str	r1, [r7, #8]
 80197c6:	4639      	mov	r1, r7
 80197c8:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 80197cc:	f7fa fe7c 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 80197d0:	4604      	mov	r4, r0
 80197d2:	6823      	ldr	r3, [r4, #0]
 80197d4:	3368      	adds	r3, #104	; 0x68
 80197d6:	681d      	ldr	r5, [r3, #0]
 80197d8:	f7fa fe86 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80197dc:	4603      	mov	r3, r0
 80197de:	9300      	str	r3, [sp, #0]
 80197e0:	f240 23ee 	movw	r3, #750	; 0x2ee
 80197e4:	4a04      	ldr	r2, [pc, #16]	; (80197f8 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 80197e6:	4905      	ldr	r1, [pc, #20]	; (80197fc <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 80197e8:	4620      	mov	r0, r4
 80197ea:	47a8      	blx	r5
    return *this;
 80197ec:	68fb      	ldr	r3, [r7, #12]
}
 80197ee:	4618      	mov	r0, r3
 80197f0:	3710      	adds	r7, #16
 80197f2:	46bd      	mov	sp, r7
 80197f4:	bdb0      	pop	{r4, r5, r7, pc}
 80197f6:	bf00      	nop
 80197f8:	08025fb8 	.word	0x08025fb8
 80197fc:	08025fd4 	.word	0x08025fd4

08019800 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockActualCallTrace::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8019800:	b5b0      	push	{r4, r5, r7, lr}
 8019802:	b086      	sub	sp, #24
 8019804:	af02      	add	r7, sp, #8
 8019806:	60f8      	str	r0, [r7, #12]
 8019808:	60b9      	str	r1, [r7, #8]
 801980a:	4639      	mov	r1, r7
 801980c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8019810:	f7fa fe5a 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 8019814:	4604      	mov	r4, r0
 8019816:	6823      	ldr	r3, [r4, #0]
 8019818:	3368      	adds	r3, #104	; 0x68
 801981a:	681d      	ldr	r5, [r3, #0]
 801981c:	f7fa fe64 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019820:	4603      	mov	r3, r0
 8019822:	9300      	str	r3, [sp, #0]
 8019824:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 8019828:	4a04      	ldr	r2, [pc, #16]	; (801983c <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801982a:	4905      	ldr	r1, [pc, #20]	; (8019840 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 801982c:	4620      	mov	r0, r4
 801982e:	47a8      	blx	r5
    return *this;
 8019830:	68fb      	ldr	r3, [r7, #12]
}
 8019832:	4618      	mov	r0, r3
 8019834:	3710      	adds	r7, #16
 8019836:	46bd      	mov	sp, r7
 8019838:	bdb0      	pop	{r4, r5, r7, pc}
 801983a:	bf00      	nop
 801983c:	08025fb8 	.word	0x08025fb8
 8019840:	08026000 	.word	0x08026000

08019844 <_ZN19MockActualCallTrace19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockActualCallTrace::withDoubleParameter(const SimpleString& name, double value)
{
 8019844:	b590      	push	{r4, r7, lr}
 8019846:	b087      	sub	sp, #28
 8019848:	af00      	add	r7, sp, #0
 801984a:	60f8      	str	r0, [r7, #12]
 801984c:	60b9      	str	r1, [r7, #8]
 801984e:	ed87 0b00 	vstr	d0, [r7]
    addParameterName(name);
 8019852:	68b9      	ldr	r1, [r7, #8]
 8019854:	68f8      	ldr	r0, [r7, #12]
 8019856:	f7ff fe15 	bl	8019484 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801985a:	68fb      	ldr	r3, [r7, #12]
 801985c:	1d1c      	adds	r4, r3, #4
 801985e:	f107 0310 	add.w	r3, r7, #16
 8019862:	2106      	movs	r1, #6
 8019864:	ed97 0b00 	vldr	d0, [r7]
 8019868:	4618      	mov	r0, r3
 801986a:	f7f4 fac7 	bl	800ddfc <_Z10StringFromdi>
 801986e:	f107 0310 	add.w	r3, r7, #16
 8019872:	4619      	mov	r1, r3
 8019874:	4620      	mov	r0, r4
 8019876:	f7f3 fe79 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 801987a:	f107 0310 	add.w	r3, r7, #16
 801987e:	4618      	mov	r0, r3
 8019880:	f7f3 fdf7 	bl	800d472 <_ZN12SimpleStringD1Ev>
    return *this;
 8019884:	68fb      	ldr	r3, [r7, #12]
}
 8019886:	4618      	mov	r0, r3
 8019888:	371c      	adds	r7, #28
 801988a:	46bd      	mov	sp, r7
 801988c:	bd90      	pop	{r4, r7, pc}

0801988e <_ZN19MockActualCallTrace19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockActualCallTrace::withStringParameter(const SimpleString& name, const char* value)
{
 801988e:	b590      	push	{r4, r7, lr}
 8019890:	b087      	sub	sp, #28
 8019892:	af00      	add	r7, sp, #0
 8019894:	60f8      	str	r0, [r7, #12]
 8019896:	60b9      	str	r1, [r7, #8]
 8019898:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801989a:	68b9      	ldr	r1, [r7, #8]
 801989c:	68f8      	ldr	r0, [r7, #12]
 801989e:	f7ff fdf1 	bl	8019484 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80198a2:	68fb      	ldr	r3, [r7, #12]
 80198a4:	1d1c      	adds	r4, r3, #4
 80198a6:	f107 0310 	add.w	r3, r7, #16
 80198aa:	6879      	ldr	r1, [r7, #4]
 80198ac:	4618      	mov	r0, r3
 80198ae:	f7f4 f86d 	bl	800d98c <_Z10StringFromPKc>
 80198b2:	f107 0310 	add.w	r3, r7, #16
 80198b6:	4619      	mov	r1, r3
 80198b8:	4620      	mov	r0, r4
 80198ba:	f7f3 fe57 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 80198be:	f107 0310 	add.w	r3, r7, #16
 80198c2:	4618      	mov	r0, r3
 80198c4:	f7f3 fdd5 	bl	800d472 <_ZN12SimpleStringD1Ev>
    return *this;
 80198c8:	68fb      	ldr	r3, [r7, #12]
}
 80198ca:	4618      	mov	r0, r3
 80198cc:	371c      	adds	r7, #28
 80198ce:	46bd      	mov	sp, r7
 80198d0:	bd90      	pop	{r4, r7, pc}

080198d2 <_ZN19MockActualCallTrace20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withPointerParameter(const SimpleString& name, void* value)
{
 80198d2:	b590      	push	{r4, r7, lr}
 80198d4:	b087      	sub	sp, #28
 80198d6:	af00      	add	r7, sp, #0
 80198d8:	60f8      	str	r0, [r7, #12]
 80198da:	60b9      	str	r1, [r7, #8]
 80198dc:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80198de:	68b9      	ldr	r1, [r7, #8]
 80198e0:	68f8      	ldr	r0, [r7, #12]
 80198e2:	f7ff fdcf 	bl	8019484 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80198e6:	68fb      	ldr	r3, [r7, #12]
 80198e8:	1d1c      	adds	r4, r3, #4
 80198ea:	f107 0310 	add.w	r3, r7, #16
 80198ee:	6879      	ldr	r1, [r7, #4]
 80198f0:	4618      	mov	r0, r3
 80198f2:	f7f4 f8a9 	bl	800da48 <_Z10StringFromPKv>
 80198f6:	f107 0310 	add.w	r3, r7, #16
 80198fa:	4619      	mov	r1, r3
 80198fc:	4620      	mov	r0, r4
 80198fe:	f7f3 fe35 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 8019902:	f107 0310 	add.w	r3, r7, #16
 8019906:	4618      	mov	r0, r3
 8019908:	f7f3 fdb3 	bl	800d472 <_ZN12SimpleStringD1Ev>
    return *this;
 801990c:	68fb      	ldr	r3, [r7, #12]
}
 801990e:	4618      	mov	r0, r3
 8019910:	371c      	adds	r7, #28
 8019912:	46bd      	mov	sp, r7
 8019914:	bd90      	pop	{r4, r7, pc}

08019916 <_ZN19MockActualCallTrace25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockActualCallTrace::withConstPointerParameter(const SimpleString& name, const void* value)
{
 8019916:	b590      	push	{r4, r7, lr}
 8019918:	b087      	sub	sp, #28
 801991a:	af00      	add	r7, sp, #0
 801991c:	60f8      	str	r0, [r7, #12]
 801991e:	60b9      	str	r1, [r7, #8]
 8019920:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019922:	68b9      	ldr	r1, [r7, #8]
 8019924:	68f8      	ldr	r0, [r7, #12]
 8019926:	f7ff fdad 	bl	8019484 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801992a:	68fb      	ldr	r3, [r7, #12]
 801992c:	1d1c      	adds	r4, r3, #4
 801992e:	f107 0310 	add.w	r3, r7, #16
 8019932:	6879      	ldr	r1, [r7, #4]
 8019934:	4618      	mov	r0, r3
 8019936:	f7f4 f887 	bl	800da48 <_Z10StringFromPKv>
 801993a:	f107 0310 	add.w	r3, r7, #16
 801993e:	4619      	mov	r1, r3
 8019940:	4620      	mov	r0, r4
 8019942:	f7f3 fe13 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 8019946:	f107 0310 	add.w	r3, r7, #16
 801994a:	4618      	mov	r0, r3
 801994c:	f7f3 fd91 	bl	800d472 <_ZN12SimpleStringD1Ev>
    return *this;
 8019950:	68fb      	ldr	r3, [r7, #12]
}
 8019952:	4618      	mov	r0, r3
 8019954:	371c      	adds	r7, #28
 8019956:	46bd      	mov	sp, r7
 8019958:	bd90      	pop	{r4, r7, pc}

0801995a <_ZN19MockActualCallTrace28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockActualCallTrace::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 801995a:	b590      	push	{r4, r7, lr}
 801995c:	b087      	sub	sp, #28
 801995e:	af00      	add	r7, sp, #0
 8019960:	60f8      	str	r0, [r7, #12]
 8019962:	60b9      	str	r1, [r7, #8]
 8019964:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019966:	68b9      	ldr	r1, [r7, #8]
 8019968:	68f8      	ldr	r0, [r7, #12]
 801996a:	f7ff fd8b 	bl	8019484 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801996e:	68fb      	ldr	r3, [r7, #12]
 8019970:	1d1c      	adds	r4, r3, #4
 8019972:	f107 0310 	add.w	r3, r7, #16
 8019976:	6879      	ldr	r1, [r7, #4]
 8019978:	4618      	mov	r0, r3
 801997a:	f7f4 f88f 	bl	800da9c <_Z10StringFromPFvvE>
 801997e:	f107 0310 	add.w	r3, r7, #16
 8019982:	4619      	mov	r1, r3
 8019984:	4620      	mov	r0, r4
 8019986:	f7f3 fdf1 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 801998a:	f107 0310 	add.w	r3, r7, #16
 801998e:	4618      	mov	r0, r3
 8019990:	f7f3 fd6f 	bl	800d472 <_ZN12SimpleStringD1Ev>
    return *this;
 8019994:	68fb      	ldr	r3, [r7, #12]
}
 8019996:	4618      	mov	r0, r3
 8019998:	371c      	adds	r7, #28
 801999a:	46bd      	mov	sp, r7
 801999c:	bd90      	pop	{r4, r7, pc}

0801999e <_ZN19MockActualCallTrace25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockActualCallTrace::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 801999e:	b590      	push	{r4, r7, lr}
 80199a0:	b087      	sub	sp, #28
 80199a2:	af00      	add	r7, sp, #0
 80199a4:	60f8      	str	r0, [r7, #12]
 80199a6:	60b9      	str	r1, [r7, #8]
 80199a8:	607a      	str	r2, [r7, #4]
 80199aa:	603b      	str	r3, [r7, #0]
    addParameterName(name);
 80199ac:	68b9      	ldr	r1, [r7, #8]
 80199ae:	68f8      	ldr	r0, [r7, #12]
 80199b0:	f7ff fd68 	bl	8019484 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFromBinaryWithSizeOrNull(value, size);
 80199b4:	68fb      	ldr	r3, [r7, #12]
 80199b6:	1d1c      	adds	r4, r3, #4
 80199b8:	f107 0310 	add.w	r3, r7, #16
 80199bc:	683a      	ldr	r2, [r7, #0]
 80199be:	6879      	ldr	r1, [r7, #4]
 80199c0:	4618      	mov	r0, r3
 80199c2:	f7f4 fbaf 	bl	800e124 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 80199c6:	f107 0310 	add.w	r3, r7, #16
 80199ca:	4619      	mov	r1, r3
 80199cc:	4620      	mov	r0, r4
 80199ce:	f7f3 fdcd 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 80199d2:	f107 0310 	add.w	r3, r7, #16
 80199d6:	4618      	mov	r0, r3
 80199d8:	f7f3 fd4b 	bl	800d472 <_ZN12SimpleStringD1Ev>
    return *this;
 80199dc:	68fb      	ldr	r3, [r7, #12]
}
 80199de:	4618      	mov	r0, r3
 80199e0:	371c      	adds	r7, #28
 80199e2:	46bd      	mov	sp, r7
 80199e4:	bd90      	pop	{r4, r7, pc}
	...

080199e8 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockActualCallTrace::withParameterOfType(const SimpleString& typeName, const SimpleString& name, const void* value)
{
 80199e8:	b590      	push	{r4, r7, lr}
 80199ea:	b087      	sub	sp, #28
 80199ec:	af00      	add	r7, sp, #0
 80199ee:	60f8      	str	r0, [r7, #12]
 80199f0:	60b9      	str	r1, [r7, #8]
 80199f2:	607a      	str	r2, [r7, #4]
 80199f4:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 80199f6:	68fb      	ldr	r3, [r7, #12]
 80199f8:	3304      	adds	r3, #4
 80199fa:	4913      	ldr	r1, [pc, #76]	; (8019a48 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv+0x60>)
 80199fc:	4618      	mov	r0, r3
 80199fe:	f7f3 fdc7 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 8019a02:	68fb      	ldr	r3, [r7, #12]
 8019a04:	3304      	adds	r3, #4
 8019a06:	68b9      	ldr	r1, [r7, #8]
 8019a08:	4618      	mov	r0, r3
 8019a0a:	f7f3 fdaf 	bl	800d56c <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 8019a0e:	6879      	ldr	r1, [r7, #4]
 8019a10:	68f8      	ldr	r0, [r7, #12]
 8019a12:	f7ff fd37 	bl	8019484 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8019a16:	68fb      	ldr	r3, [r7, #12]
 8019a18:	1d1c      	adds	r4, r3, #4
 8019a1a:	f107 0310 	add.w	r3, r7, #16
 8019a1e:	6839      	ldr	r1, [r7, #0]
 8019a20:	4618      	mov	r0, r3
 8019a22:	f7f4 f811 	bl	800da48 <_Z10StringFromPKv>
 8019a26:	f107 0310 	add.w	r3, r7, #16
 8019a2a:	4619      	mov	r1, r3
 8019a2c:	4620      	mov	r0, r4
 8019a2e:	f7f3 fd9d 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 8019a32:	f107 0310 	add.w	r3, r7, #16
 8019a36:	4618      	mov	r0, r3
 8019a38:	f7f3 fd1b 	bl	800d472 <_ZN12SimpleStringD1Ev>
    return *this;
 8019a3c:	68fb      	ldr	r3, [r7, #12]
}
 8019a3e:	4618      	mov	r0, r3
 8019a40:	371c      	adds	r7, #28
 8019a42:	46bd      	mov	sp, r7
 8019a44:	bd90      	pop	{r4, r7, pc}
 8019a46:	bf00      	nop
 8019a48:	080260cc 	.word	0x080260cc

08019a4c <_ZN19MockActualCallTrace19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withOutputParameter(const SimpleString& name, void* output)
{
 8019a4c:	b590      	push	{r4, r7, lr}
 8019a4e:	b087      	sub	sp, #28
 8019a50:	af00      	add	r7, sp, #0
 8019a52:	60f8      	str	r0, [r7, #12]
 8019a54:	60b9      	str	r1, [r7, #8]
 8019a56:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019a58:	68b9      	ldr	r1, [r7, #8]
 8019a5a:	68f8      	ldr	r0, [r7, #12]
 8019a5c:	f7ff fd12 	bl	8019484 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 8019a60:	68fb      	ldr	r3, [r7, #12]
 8019a62:	1d1c      	adds	r4, r3, #4
 8019a64:	f107 0310 	add.w	r3, r7, #16
 8019a68:	6879      	ldr	r1, [r7, #4]
 8019a6a:	4618      	mov	r0, r3
 8019a6c:	f7f3 ffec 	bl	800da48 <_Z10StringFromPKv>
 8019a70:	f107 0310 	add.w	r3, r7, #16
 8019a74:	4619      	mov	r1, r3
 8019a76:	4620      	mov	r0, r4
 8019a78:	f7f3 fd78 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 8019a7c:	f107 0310 	add.w	r3, r7, #16
 8019a80:	4618      	mov	r0, r3
 8019a82:	f7f3 fcf6 	bl	800d472 <_ZN12SimpleStringD1Ev>
    return *this;
 8019a86:	68fb      	ldr	r3, [r7, #12]
}
 8019a88:	4618      	mov	r0, r3
 8019a8a:	371c      	adds	r7, #28
 8019a8c:	46bd      	mov	sp, r7
 8019a8e:	bd90      	pop	{r4, r7, pc}

08019a90 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockActualCallTrace::withOutputParameterOfType(const SimpleString& typeName, const SimpleString& name, void* output)
{
 8019a90:	b590      	push	{r4, r7, lr}
 8019a92:	b087      	sub	sp, #28
 8019a94:	af00      	add	r7, sp, #0
 8019a96:	60f8      	str	r0, [r7, #12]
 8019a98:	60b9      	str	r1, [r7, #8]
 8019a9a:	607a      	str	r2, [r7, #4]
 8019a9c:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 8019a9e:	68fb      	ldr	r3, [r7, #12]
 8019aa0:	3304      	adds	r3, #4
 8019aa2:	4913      	ldr	r1, [pc, #76]	; (8019af0 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv+0x60>)
 8019aa4:	4618      	mov	r0, r3
 8019aa6:	f7f3 fd73 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 8019aaa:	68fb      	ldr	r3, [r7, #12]
 8019aac:	3304      	adds	r3, #4
 8019aae:	68b9      	ldr	r1, [r7, #8]
 8019ab0:	4618      	mov	r0, r3
 8019ab2:	f7f3 fd5b 	bl	800d56c <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 8019ab6:	6879      	ldr	r1, [r7, #4]
 8019ab8:	68f8      	ldr	r0, [r7, #12]
 8019aba:	f7ff fce3 	bl	8019484 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 8019abe:	68fb      	ldr	r3, [r7, #12]
 8019ac0:	1d1c      	adds	r4, r3, #4
 8019ac2:	f107 0310 	add.w	r3, r7, #16
 8019ac6:	6839      	ldr	r1, [r7, #0]
 8019ac8:	4618      	mov	r0, r3
 8019aca:	f7f3 ffbd 	bl	800da48 <_Z10StringFromPKv>
 8019ace:	f107 0310 	add.w	r3, r7, #16
 8019ad2:	4619      	mov	r1, r3
 8019ad4:	4620      	mov	r0, r4
 8019ad6:	f7f3 fd49 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 8019ada:	f107 0310 	add.w	r3, r7, #16
 8019ade:	4618      	mov	r0, r3
 8019ae0:	f7f3 fcc7 	bl	800d472 <_ZN12SimpleStringD1Ev>
    return *this;
 8019ae4:	68fb      	ldr	r3, [r7, #12]
}
 8019ae6:	4618      	mov	r0, r3
 8019ae8:	371c      	adds	r7, #28
 8019aea:	46bd      	mov	sp, r7
 8019aec:	bd90      	pop	{r4, r7, pc}
 8019aee:	bf00      	nop
 8019af0:	080260cc 	.word	0x080260cc

08019af4 <_ZN19MockActualCallTrace14hasReturnValueEv>:

bool MockActualCallTrace::hasReturnValue()
{
 8019af4:	b480      	push	{r7}
 8019af6:	b083      	sub	sp, #12
 8019af8:	af00      	add	r7, sp, #0
 8019afa:	6078      	str	r0, [r7, #4]
    return false;
 8019afc:	2300      	movs	r3, #0
}
 8019afe:	4618      	mov	r0, r3
 8019b00:	370c      	adds	r7, #12
 8019b02:	46bd      	mov	sp, r7
 8019b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b08:	4770      	bx	lr
	...

08019b0c <_ZN19MockActualCallTrace11returnValueEv>:

MockNamedValue MockActualCallTrace::returnValue()
{
 8019b0c:	b580      	push	{r7, lr}
 8019b0e:	b084      	sub	sp, #16
 8019b10:	af00      	add	r7, sp, #0
 8019b12:	6078      	str	r0, [r7, #4]
 8019b14:	6039      	str	r1, [r7, #0]
    return MockNamedValue("");
 8019b16:	f107 0308 	add.w	r3, r7, #8
 8019b1a:	4909      	ldr	r1, [pc, #36]	; (8019b40 <_ZN19MockActualCallTrace11returnValueEv+0x34>)
 8019b1c:	4618      	mov	r0, r3
 8019b1e:	f7f3 f8f0 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 8019b22:	f107 0308 	add.w	r3, r7, #8
 8019b26:	4619      	mov	r1, r3
 8019b28:	6878      	ldr	r0, [r7, #4]
 8019b2a:	f003 fe0f 	bl	801d74c <_ZN14MockNamedValueC1ERK12SimpleString>
 8019b2e:	f107 0308 	add.w	r3, r7, #8
 8019b32:	4618      	mov	r0, r3
 8019b34:	f7f3 fc9d 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 8019b38:	6878      	ldr	r0, [r7, #4]
 8019b3a:	3710      	adds	r7, #16
 8019b3c:	46bd      	mov	sp, r7
 8019b3e:	bd80      	pop	{r7, pc}
 8019b40:	08025fa0 	.word	0x08025fa0

08019b44 <_ZN19MockActualCallTrace18returnLongIntValueEv>:

long int MockActualCallTrace::returnLongIntValue()
{
 8019b44:	b480      	push	{r7}
 8019b46:	b083      	sub	sp, #12
 8019b48:	af00      	add	r7, sp, #0
 8019b4a:	6078      	str	r0, [r7, #4]
    return 0;
 8019b4c:	2300      	movs	r3, #0
}
 8019b4e:	4618      	mov	r0, r3
 8019b50:	370c      	adds	r7, #12
 8019b52:	46bd      	mov	sp, r7
 8019b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b58:	4770      	bx	lr

08019b5a <_ZN19MockActualCallTrace26returnUnsignedLongIntValueEv>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValue()
{
 8019b5a:	b480      	push	{r7}
 8019b5c:	b083      	sub	sp, #12
 8019b5e:	af00      	add	r7, sp, #0
 8019b60:	6078      	str	r0, [r7, #4]
    return 0;
 8019b62:	2300      	movs	r3, #0
}
 8019b64:	4618      	mov	r0, r3
 8019b66:	370c      	adds	r7, #12
 8019b68:	46bd      	mov	sp, r7
 8019b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b6e:	4770      	bx	lr

08019b70 <_ZN19MockActualCallTrace35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValueOrDefault(unsigned long)
{
 8019b70:	b480      	push	{r7}
 8019b72:	b083      	sub	sp, #12
 8019b74:	af00      	add	r7, sp, #0
 8019b76:	6078      	str	r0, [r7, #4]
 8019b78:	6039      	str	r1, [r7, #0]
    return 0;
 8019b7a:	2300      	movs	r3, #0
}
 8019b7c:	4618      	mov	r0, r3
 8019b7e:	370c      	adds	r7, #12
 8019b80:	46bd      	mov	sp, r7
 8019b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b86:	4770      	bx	lr

08019b88 <_ZN19MockActualCallTrace27returnLongIntValueOrDefaultEl>:

long int MockActualCallTrace::returnLongIntValueOrDefault(long int)
{
 8019b88:	b480      	push	{r7}
 8019b8a:	b083      	sub	sp, #12
 8019b8c:	af00      	add	r7, sp, #0
 8019b8e:	6078      	str	r0, [r7, #4]
 8019b90:	6039      	str	r1, [r7, #0]
    return 0;
 8019b92:	2300      	movs	r3, #0
}
 8019b94:	4618      	mov	r0, r3
 8019b96:	370c      	adds	r7, #12
 8019b98:	46bd      	mov	sp, r7
 8019b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b9e:	4770      	bx	lr

08019ba0 <_ZN19MockActualCallTrace22returnLongLongIntValueEv>:
}

#else

cpputest_longlong MockActualCallTrace::returnLongLongIntValue()
{
 8019ba0:	b5b0      	push	{r4, r5, r7, lr}
 8019ba2:	b084      	sub	sp, #16
 8019ba4:	af02      	add	r7, sp, #8
 8019ba6:	6078      	str	r0, [r7, #4]
 8019ba8:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 8019baa:	f7fa fc8d 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 8019bae:	4604      	mov	r4, r0
 8019bb0:	6823      	ldr	r3, [r4, #0]
 8019bb2:	3368      	adds	r3, #104	; 0x68
 8019bb4:	681d      	ldr	r5, [r3, #0]
 8019bb6:	f7fa fc97 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019bba:	4603      	mov	r3, r0
 8019bbc:	9300      	str	r3, [sp, #0]
 8019bbe:	f240 3375 	movw	r3, #885	; 0x375
 8019bc2:	4a06      	ldr	r2, [pc, #24]	; (8019bdc <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x3c>)
 8019bc4:	4906      	ldr	r1, [pc, #24]	; (8019be0 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x40>)
 8019bc6:	4620      	mov	r0, r4
 8019bc8:	47a8      	blx	r5
    return cpputest_longlong(0);
 8019bca:	2100      	movs	r1, #0
 8019bcc:	6878      	ldr	r0, [r7, #4]
 8019bce:	f7f1 f8cf 	bl	800ad70 <_ZN17cpputest_longlongC1Ei>
}
 8019bd2:	6878      	ldr	r0, [r7, #4]
 8019bd4:	3708      	adds	r7, #8
 8019bd6:	46bd      	mov	sp, r7
 8019bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8019bda:	bf00      	nop
 8019bdc:	08025fb8 	.word	0x08025fb8
 8019be0:	08026000 	.word	0x08026000

08019be4 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValue()
{
 8019be4:	b5b0      	push	{r4, r5, r7, lr}
 8019be6:	b084      	sub	sp, #16
 8019be8:	af02      	add	r7, sp, #8
 8019bea:	6078      	str	r0, [r7, #4]
 8019bec:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 8019bee:	f7fa fc6b 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 8019bf2:	4604      	mov	r4, r0
 8019bf4:	6823      	ldr	r3, [r4, #0]
 8019bf6:	3368      	adds	r3, #104	; 0x68
 8019bf8:	681d      	ldr	r5, [r3, #0]
 8019bfa:	f7fa fc75 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019bfe:	4603      	mov	r3, r0
 8019c00:	9300      	str	r3, [sp, #0]
 8019c02:	f240 337b 	movw	r3, #891	; 0x37b
 8019c06:	4a06      	ldr	r2, [pc, #24]	; (8019c20 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x3c>)
 8019c08:	4906      	ldr	r1, [pc, #24]	; (8019c24 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x40>)
 8019c0a:	4620      	mov	r0, r4
 8019c0c:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8019c0e:	2100      	movs	r1, #0
 8019c10:	6878      	ldr	r0, [r7, #4]
 8019c12:	f7f1 f8b9 	bl	800ad88 <_ZN18cpputest_ulonglongC1Ei>
}
 8019c16:	6878      	ldr	r0, [r7, #4]
 8019c18:	3708      	adds	r7, #8
 8019c1a:	46bd      	mov	sp, r7
 8019c1c:	bdb0      	pop	{r4, r5, r7, pc}
 8019c1e:	bf00      	nop
 8019c20:	08025fb8 	.word	0x08025fb8
 8019c24:	08025fd4 	.word	0x08025fd4

08019c28 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong)
{
 8019c28:	b5b0      	push	{r4, r5, r7, lr}
 8019c2a:	b086      	sub	sp, #24
 8019c2c:	af02      	add	r7, sp, #8
 8019c2e:	60f8      	str	r0, [r7, #12]
 8019c30:	60b9      	str	r1, [r7, #8]
 8019c32:	4639      	mov	r1, r7
 8019c34:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8019c38:	f7fa fc46 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 8019c3c:	4604      	mov	r4, r0
 8019c3e:	6823      	ldr	r3, [r4, #0]
 8019c40:	3368      	adds	r3, #104	; 0x68
 8019c42:	681d      	ldr	r5, [r3, #0]
 8019c44:	f7fa fc50 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019c48:	4603      	mov	r3, r0
 8019c4a:	9300      	str	r3, [sp, #0]
 8019c4c:	f240 3381 	movw	r3, #897	; 0x381
 8019c50:	4a05      	ldr	r2, [pc, #20]	; (8019c68 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x40>)
 8019c52:	4906      	ldr	r1, [pc, #24]	; (8019c6c <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 8019c54:	4620      	mov	r0, r4
 8019c56:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8019c58:	2100      	movs	r1, #0
 8019c5a:	68f8      	ldr	r0, [r7, #12]
 8019c5c:	f7f1 f894 	bl	800ad88 <_ZN18cpputest_ulonglongC1Ei>
}
 8019c60:	68f8      	ldr	r0, [r7, #12]
 8019c62:	3710      	adds	r7, #16
 8019c64:	46bd      	mov	sp, r7
 8019c66:	bdb0      	pop	{r4, r5, r7, pc}
 8019c68:	08025fb8 	.word	0x08025fb8
 8019c6c:	08025fd4 	.word	0x08025fd4

08019c70 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockActualCallTrace::returnLongLongIntValueOrDefault(cpputest_longlong)
{
 8019c70:	b5b0      	push	{r4, r5, r7, lr}
 8019c72:	b086      	sub	sp, #24
 8019c74:	af02      	add	r7, sp, #8
 8019c76:	60f8      	str	r0, [r7, #12]
 8019c78:	60b9      	str	r1, [r7, #8]
 8019c7a:	4639      	mov	r1, r7
 8019c7c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8019c80:	f7fa fc22 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 8019c84:	4604      	mov	r4, r0
 8019c86:	6823      	ldr	r3, [r4, #0]
 8019c88:	3368      	adds	r3, #104	; 0x68
 8019c8a:	681d      	ldr	r5, [r3, #0]
 8019c8c:	f7fa fc2c 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019c90:	4603      	mov	r3, r0
 8019c92:	9300      	str	r3, [sp, #0]
 8019c94:	f240 3387 	movw	r3, #903	; 0x387
 8019c98:	4a05      	ldr	r2, [pc, #20]	; (8019cb0 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x40>)
 8019c9a:	4906      	ldr	r1, [pc, #24]	; (8019cb4 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 8019c9c:	4620      	mov	r0, r4
 8019c9e:	47a8      	blx	r5
    return cpputest_longlong(0);
 8019ca0:	2100      	movs	r1, #0
 8019ca2:	68f8      	ldr	r0, [r7, #12]
 8019ca4:	f7f1 f864 	bl	800ad70 <_ZN17cpputest_longlongC1Ei>
}
 8019ca8:	68f8      	ldr	r0, [r7, #12]
 8019caa:	3710      	adds	r7, #16
 8019cac:	46bd      	mov	sp, r7
 8019cae:	bdb0      	pop	{r4, r5, r7, pc}
 8019cb0:	08025fb8 	.word	0x08025fb8
 8019cb4:	08026000 	.word	0x08026000

08019cb8 <_ZN19MockActualCallTrace15returnBoolValueEv>:

#endif

bool MockActualCallTrace::returnBoolValue()
{
 8019cb8:	b480      	push	{r7}
 8019cba:	b083      	sub	sp, #12
 8019cbc:	af00      	add	r7, sp, #0
 8019cbe:	6078      	str	r0, [r7, #4]
    return false;
 8019cc0:	2300      	movs	r3, #0
}
 8019cc2:	4618      	mov	r0, r3
 8019cc4:	370c      	adds	r7, #12
 8019cc6:	46bd      	mov	sp, r7
 8019cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ccc:	4770      	bx	lr

08019cce <_ZN19MockActualCallTrace24returnBoolValueOrDefaultEb>:

bool MockActualCallTrace::returnBoolValueOrDefault(bool)
{
 8019cce:	b480      	push	{r7}
 8019cd0:	b083      	sub	sp, #12
 8019cd2:	af00      	add	r7, sp, #0
 8019cd4:	6078      	str	r0, [r7, #4]
 8019cd6:	460b      	mov	r3, r1
 8019cd8:	70fb      	strb	r3, [r7, #3]
    return false;
 8019cda:	2300      	movs	r3, #0
}
 8019cdc:	4618      	mov	r0, r3
 8019cde:	370c      	adds	r7, #12
 8019ce0:	46bd      	mov	sp, r7
 8019ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ce6:	4770      	bx	lr

08019ce8 <_ZN19MockActualCallTrace14returnIntValueEv>:

int MockActualCallTrace::returnIntValue()
{
 8019ce8:	b480      	push	{r7}
 8019cea:	b083      	sub	sp, #12
 8019cec:	af00      	add	r7, sp, #0
 8019cee:	6078      	str	r0, [r7, #4]
    return 0;
 8019cf0:	2300      	movs	r3, #0
}
 8019cf2:	4618      	mov	r0, r3
 8019cf4:	370c      	adds	r7, #12
 8019cf6:	46bd      	mov	sp, r7
 8019cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cfc:	4770      	bx	lr

08019cfe <_ZN19MockActualCallTrace17returnDoubleValueEv>:

double MockActualCallTrace::returnDoubleValue()
{
 8019cfe:	b480      	push	{r7}
 8019d00:	b083      	sub	sp, #12
 8019d02:	af00      	add	r7, sp, #0
 8019d04:	6078      	str	r0, [r7, #4]
    return 0.0;
 8019d06:	f04f 0200 	mov.w	r2, #0
 8019d0a:	f04f 0300 	mov.w	r3, #0
 8019d0e:	ec43 2b17 	vmov	d7, r2, r3
}
 8019d12:	eeb0 0a47 	vmov.f32	s0, s14
 8019d16:	eef0 0a67 	vmov.f32	s1, s15
 8019d1a:	370c      	adds	r7, #12
 8019d1c:	46bd      	mov	sp, r7
 8019d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d22:	4770      	bx	lr

08019d24 <_ZN19MockActualCallTrace26returnDoubleValueOrDefaultEd>:

double MockActualCallTrace::returnDoubleValueOrDefault(double)
{
 8019d24:	b580      	push	{r7, lr}
 8019d26:	b084      	sub	sp, #16
 8019d28:	af00      	add	r7, sp, #0
 8019d2a:	60f8      	str	r0, [r7, #12]
 8019d2c:	ed87 0b00 	vstr	d0, [r7]
    return returnDoubleValue();
 8019d30:	68fb      	ldr	r3, [r7, #12]
 8019d32:	681b      	ldr	r3, [r3, #0]
 8019d34:	3398      	adds	r3, #152	; 0x98
 8019d36:	681b      	ldr	r3, [r3, #0]
 8019d38:	68f8      	ldr	r0, [r7, #12]
 8019d3a:	4798      	blx	r3
 8019d3c:	eeb0 7a40 	vmov.f32	s14, s0
 8019d40:	eef0 7a60 	vmov.f32	s15, s1
}
 8019d44:	eeb0 0a47 	vmov.f32	s0, s14
 8019d48:	eef0 0a67 	vmov.f32	s1, s15
 8019d4c:	3710      	adds	r7, #16
 8019d4e:	46bd      	mov	sp, r7
 8019d50:	bd80      	pop	{r7, pc}

08019d52 <_ZN19MockActualCallTrace22returnUnsignedIntValueEv>:

unsigned int MockActualCallTrace::returnUnsignedIntValue()
{
 8019d52:	b480      	push	{r7}
 8019d54:	b083      	sub	sp, #12
 8019d56:	af00      	add	r7, sp, #0
 8019d58:	6078      	str	r0, [r7, #4]
    return 0;
 8019d5a:	2300      	movs	r3, #0
}
 8019d5c:	4618      	mov	r0, r3
 8019d5e:	370c      	adds	r7, #12
 8019d60:	46bd      	mov	sp, r7
 8019d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d66:	4770      	bx	lr

08019d68 <_ZN19MockActualCallTrace18returnPointerValueEv>:

void * MockActualCallTrace::returnPointerValue()
{
 8019d68:	b480      	push	{r7}
 8019d6a:	b083      	sub	sp, #12
 8019d6c:	af00      	add	r7, sp, #0
 8019d6e:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8019d70:	2300      	movs	r3, #0
}
 8019d72:	4618      	mov	r0, r3
 8019d74:	370c      	adds	r7, #12
 8019d76:	46bd      	mov	sp, r7
 8019d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d7c:	4770      	bx	lr

08019d7e <_ZN19MockActualCallTrace23returnConstPointerValueEv>:

const void * MockActualCallTrace::returnConstPointerValue()
{
 8019d7e:	b480      	push	{r7}
 8019d80:	b083      	sub	sp, #12
 8019d82:	af00      	add	r7, sp, #0
 8019d84:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8019d86:	2300      	movs	r3, #0
}
 8019d88:	4618      	mov	r0, r3
 8019d8a:	370c      	adds	r7, #12
 8019d8c:	46bd      	mov	sp, r7
 8019d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d92:	4770      	bx	lr

08019d94 <_ZN19MockActualCallTrace26returnFunctionPointerValueEv>:

void (*MockActualCallTrace::returnFunctionPointerValue())()
{
 8019d94:	b480      	push	{r7}
 8019d96:	b083      	sub	sp, #12
 8019d98:	af00      	add	r7, sp, #0
 8019d9a:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8019d9c:	2300      	movs	r3, #0
}
 8019d9e:	4618      	mov	r0, r3
 8019da0:	370c      	adds	r7, #12
 8019da2:	46bd      	mov	sp, r7
 8019da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019da8:	4770      	bx	lr

08019daa <_ZN19MockActualCallTrace32returnConstPointerValueOrDefaultEPKv>:

const void * MockActualCallTrace::returnConstPointerValueOrDefault(const void *)
{
 8019daa:	b580      	push	{r7, lr}
 8019dac:	b082      	sub	sp, #8
 8019dae:	af00      	add	r7, sp, #0
 8019db0:	6078      	str	r0, [r7, #4]
 8019db2:	6039      	str	r1, [r7, #0]
    return returnConstPointerValue();
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	681b      	ldr	r3, [r3, #0]
 8019db8:	33a8      	adds	r3, #168	; 0xa8
 8019dba:	681b      	ldr	r3, [r3, #0]
 8019dbc:	6878      	ldr	r0, [r7, #4]
 8019dbe:	4798      	blx	r3
 8019dc0:	4603      	mov	r3, r0
}
 8019dc2:	4618      	mov	r0, r3
 8019dc4:	3708      	adds	r7, #8
 8019dc6:	46bd      	mov	sp, r7
 8019dc8:	bd80      	pop	{r7, pc}

08019dca <_ZN19MockActualCallTrace27returnPointerValueOrDefaultEPv>:

void * MockActualCallTrace::returnPointerValueOrDefault(void *)
{
 8019dca:	b580      	push	{r7, lr}
 8019dcc:	b082      	sub	sp, #8
 8019dce:	af00      	add	r7, sp, #0
 8019dd0:	6078      	str	r0, [r7, #4]
 8019dd2:	6039      	str	r1, [r7, #0]
    return returnPointerValue();
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	681b      	ldr	r3, [r3, #0]
 8019dd8:	33a0      	adds	r3, #160	; 0xa0
 8019dda:	681b      	ldr	r3, [r3, #0]
 8019ddc:	6878      	ldr	r0, [r7, #4]
 8019dde:	4798      	blx	r3
 8019de0:	4603      	mov	r3, r0
}
 8019de2:	4618      	mov	r0, r3
 8019de4:	3708      	adds	r7, #8
 8019de6:	46bd      	mov	sp, r7
 8019de8:	bd80      	pop	{r7, pc}

08019dea <_ZN19MockActualCallTrace35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockActualCallTrace::returnFunctionPointerValueOrDefault(void (*)()))()
{
 8019dea:	b580      	push	{r7, lr}
 8019dec:	b082      	sub	sp, #8
 8019dee:	af00      	add	r7, sp, #0
 8019df0:	6078      	str	r0, [r7, #4]
 8019df2:	6039      	str	r1, [r7, #0]
    return returnFunctionPointerValue();
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	681b      	ldr	r3, [r3, #0]
 8019df8:	33b0      	adds	r3, #176	; 0xb0
 8019dfa:	681b      	ldr	r3, [r3, #0]
 8019dfc:	6878      	ldr	r0, [r7, #4]
 8019dfe:	4798      	blx	r3
 8019e00:	4603      	mov	r3, r0
}
 8019e02:	4618      	mov	r0, r3
 8019e04:	3708      	adds	r7, #8
 8019e06:	46bd      	mov	sp, r7
 8019e08:	bd80      	pop	{r7, pc}
	...

08019e0c <_ZN19MockActualCallTrace17returnStringValueEv>:

const char * MockActualCallTrace::returnStringValue()
{
 8019e0c:	b480      	push	{r7}
 8019e0e:	b083      	sub	sp, #12
 8019e10:	af00      	add	r7, sp, #0
 8019e12:	6078      	str	r0, [r7, #4]
    return "";
 8019e14:	4b03      	ldr	r3, [pc, #12]	; (8019e24 <_ZN19MockActualCallTrace17returnStringValueEv+0x18>)
}
 8019e16:	4618      	mov	r0, r3
 8019e18:	370c      	adds	r7, #12
 8019e1a:	46bd      	mov	sp, r7
 8019e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e20:	4770      	bx	lr
 8019e22:	bf00      	nop
 8019e24:	08025fa0 	.word	0x08025fa0

08019e28 <_ZN19MockActualCallTrace26returnStringValueOrDefaultEPKc>:

const char * MockActualCallTrace::returnStringValueOrDefault(const char *)
{
 8019e28:	b580      	push	{r7, lr}
 8019e2a:	b082      	sub	sp, #8
 8019e2c:	af00      	add	r7, sp, #0
 8019e2e:	6078      	str	r0, [r7, #4]
 8019e30:	6039      	str	r1, [r7, #0]
    return returnStringValue();
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	681b      	ldr	r3, [r3, #0]
 8019e36:	3394      	adds	r3, #148	; 0x94
 8019e38:	681b      	ldr	r3, [r3, #0]
 8019e3a:	6878      	ldr	r0, [r7, #4]
 8019e3c:	4798      	blx	r3
 8019e3e:	4603      	mov	r3, r0
}
 8019e40:	4618      	mov	r0, r3
 8019e42:	3708      	adds	r7, #8
 8019e44:	46bd      	mov	sp, r7
 8019e46:	bd80      	pop	{r7, pc}

08019e48 <_ZN19MockActualCallTrace23returnIntValueOrDefaultEi>:

int MockActualCallTrace::returnIntValueOrDefault(int)
{
 8019e48:	b480      	push	{r7}
 8019e4a:	b083      	sub	sp, #12
 8019e4c:	af00      	add	r7, sp, #0
 8019e4e:	6078      	str	r0, [r7, #4]
 8019e50:	6039      	str	r1, [r7, #0]
    return 0;
 8019e52:	2300      	movs	r3, #0
}
 8019e54:	4618      	mov	r0, r3
 8019e56:	370c      	adds	r7, #12
 8019e58:	46bd      	mov	sp, r7
 8019e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e5e:	4770      	bx	lr

08019e60 <_ZN19MockActualCallTrace31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockActualCallTrace::returnUnsignedIntValueOrDefault(unsigned int)
{
 8019e60:	b580      	push	{r7, lr}
 8019e62:	b082      	sub	sp, #8
 8019e64:	af00      	add	r7, sp, #0
 8019e66:	6078      	str	r0, [r7, #4]
 8019e68:	6039      	str	r1, [r7, #0]
    return returnUnsignedIntValue();
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	681b      	ldr	r3, [r3, #0]
 8019e6e:	3388      	adds	r3, #136	; 0x88
 8019e70:	681b      	ldr	r3, [r3, #0]
 8019e72:	6878      	ldr	r0, [r7, #4]
 8019e74:	4798      	blx	r3
 8019e76:	4603      	mov	r3, r0
}
 8019e78:	4618      	mov	r0, r3
 8019e7a:	3708      	adds	r7, #8
 8019e7c:	46bd      	mov	sp, r7
 8019e7e:	bd80      	pop	{r7, pc}

08019e80 <_ZN19MockActualCallTrace8onObjectEPKv>:

MockActualCall& MockActualCallTrace::onObject(const void* objectPtr)
{
 8019e80:	b590      	push	{r4, r7, lr}
 8019e82:	b085      	sub	sp, #20
 8019e84:	af00      	add	r7, sp, #0
 8019e86:	6078      	str	r0, [r7, #4]
 8019e88:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " onObject:";
 8019e8a:	687b      	ldr	r3, [r7, #4]
 8019e8c:	3304      	adds	r3, #4
 8019e8e:	490e      	ldr	r1, [pc, #56]	; (8019ec8 <_ZN19MockActualCallTrace8onObjectEPKv+0x48>)
 8019e90:	4618      	mov	r0, r3
 8019e92:	f7f3 fb7d 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(objectPtr);
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	1d1c      	adds	r4, r3, #4
 8019e9a:	f107 0308 	add.w	r3, r7, #8
 8019e9e:	6839      	ldr	r1, [r7, #0]
 8019ea0:	4618      	mov	r0, r3
 8019ea2:	f7f3 fdd1 	bl	800da48 <_Z10StringFromPKv>
 8019ea6:	f107 0308 	add.w	r3, r7, #8
 8019eaa:	4619      	mov	r1, r3
 8019eac:	4620      	mov	r0, r4
 8019eae:	f7f3 fb5d 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 8019eb2:	f107 0308 	add.w	r3, r7, #8
 8019eb6:	4618      	mov	r0, r3
 8019eb8:	f7f3 fadb 	bl	800d472 <_ZN12SimpleStringD1Ev>
    return *this;
 8019ebc:	687b      	ldr	r3, [r7, #4]
}
 8019ebe:	4618      	mov	r0, r3
 8019ec0:	3714      	adds	r7, #20
 8019ec2:	46bd      	mov	sp, r7
 8019ec4:	bd90      	pop	{r4, r7, pc}
 8019ec6:	bf00      	nop
 8019ec8:	080260d4 	.word	0x080260d4

08019ecc <_ZN19MockActualCallTrace8instanceEv>:
}

MockActualCallTrace* MockActualCallTrace::instance_ = NULLPTR;

MockActualCallTrace& MockActualCallTrace::instance()
{
 8019ecc:	b598      	push	{r3, r4, r7, lr}
 8019ece:	af00      	add	r7, sp, #0
    if (instance_ == NULLPTR)
 8019ed0:	4b09      	ldr	r3, [pc, #36]	; (8019ef8 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8019ed2:	681b      	ldr	r3, [r3, #0]
 8019ed4:	2b00      	cmp	r3, #0
 8019ed6:	d10b      	bne.n	8019ef0 <_ZN19MockActualCallTrace8instanceEv+0x24>
        instance_ = new MockActualCallTrace;
 8019ed8:	f240 32f3 	movw	r2, #1011	; 0x3f3
 8019edc:	4907      	ldr	r1, [pc, #28]	; (8019efc <_ZN19MockActualCallTrace8instanceEv+0x30>)
 8019ede:	200c      	movs	r0, #12
 8019ee0:	f7f0 fb4c 	bl	800a57c <_ZnwjPKci>
 8019ee4:	4604      	mov	r4, r0
 8019ee6:	4620      	mov	r0, r4
 8019ee8:	f7ff fa4c 	bl	8019384 <_ZN19MockActualCallTraceC1Ev>
 8019eec:	4b02      	ldr	r3, [pc, #8]	; (8019ef8 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8019eee:	601c      	str	r4, [r3, #0]
    return *instance_;
 8019ef0:	4b01      	ldr	r3, [pc, #4]	; (8019ef8 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8019ef2:	681b      	ldr	r3, [r3, #0]
}
 8019ef4:	4618      	mov	r0, r3
 8019ef6:	bd98      	pop	{r3, r4, r7, pc}
 8019ef8:	20000eb0 	.word	0x20000eb0
 8019efc:	08025fb8 	.word	0x08025fb8

08019f00 <_ZN19MockActualCallTrace13clearInstanceEv>:

void MockActualCallTrace::clearInstance()
{
 8019f00:	b580      	push	{r7, lr}
 8019f02:	af00      	add	r7, sp, #0
    delete instance_;
 8019f04:	4b06      	ldr	r3, [pc, #24]	; (8019f20 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 8019f06:	681b      	ldr	r3, [r3, #0]
 8019f08:	2b00      	cmp	r3, #0
 8019f0a:	d004      	beq.n	8019f16 <_ZN19MockActualCallTrace13clearInstanceEv+0x16>
 8019f0c:	681a      	ldr	r2, [r3, #0]
 8019f0e:	3204      	adds	r2, #4
 8019f10:	6812      	ldr	r2, [r2, #0]
 8019f12:	4618      	mov	r0, r3
 8019f14:	4790      	blx	r2
    instance_ = NULLPTR;
 8019f16:	4b02      	ldr	r3, [pc, #8]	; (8019f20 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 8019f18:	2200      	movs	r2, #0
 8019f1a:	601a      	str	r2, [r3, #0]
}
 8019f1c:	bf00      	nop
 8019f1e:	bd80      	pop	{r7, pc}
 8019f20:	20000eb0 	.word	0x20000eb0

08019f24 <_ZN21MockIgnoredActualCallC1Ev>:
class MockIgnoredActualCall: public MockActualCall
 8019f24:	b580      	push	{r7, lr}
 8019f26:	b082      	sub	sp, #8
 8019f28:	af00      	add	r7, sp, #0
 8019f2a:	6078      	str	r0, [r7, #4]
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	4618      	mov	r0, r3
 8019f30:	f7fd fe9a 	bl	8017c68 <_ZN14MockActualCallC1Ev>
 8019f34:	4a03      	ldr	r2, [pc, #12]	; (8019f44 <_ZN21MockIgnoredActualCallC1Ev+0x20>)
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	601a      	str	r2, [r3, #0]
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	4618      	mov	r0, r3
 8019f3e:	3708      	adds	r7, #8
 8019f40:	46bd      	mov	sp, r7
 8019f42:	bd80      	pop	{r7, pc}
 8019f44:	08028d20 	.word	0x08028d20

08019f48 <__tcf_0>:

MockIgnoredActualCall& MockIgnoredActualCall::instance()
{
    static MockIgnoredActualCall call;
 8019f48:	b580      	push	{r7, lr}
 8019f4a:	af00      	add	r7, sp, #0
 8019f4c:	4801      	ldr	r0, [pc, #4]	; (8019f54 <__tcf_0+0xc>)
 8019f4e:	f000 f831 	bl	8019fb4 <_ZN21MockIgnoredActualCallD1Ev>
 8019f52:	bd80      	pop	{r7, pc}
 8019f54:	20000eb4 	.word	0x20000eb4

08019f58 <_ZN21MockIgnoredActualCall8instanceEv>:
{
 8019f58:	b580      	push	{r7, lr}
 8019f5a:	af00      	add	r7, sp, #0
    static MockIgnoredActualCall call;
 8019f5c:	4b12      	ldr	r3, [pc, #72]	; (8019fa8 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8019f5e:	781b      	ldrb	r3, [r3, #0]
 8019f60:	f3bf 8f5b 	dmb	ish
 8019f64:	b2db      	uxtb	r3, r3
 8019f66:	f003 0301 	and.w	r3, r3, #1
 8019f6a:	2b00      	cmp	r3, #0
 8019f6c:	bf0c      	ite	eq
 8019f6e:	2301      	moveq	r3, #1
 8019f70:	2300      	movne	r3, #0
 8019f72:	b2db      	uxtb	r3, r3
 8019f74:	2b00      	cmp	r3, #0
 8019f76:	d013      	beq.n	8019fa0 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 8019f78:	480b      	ldr	r0, [pc, #44]	; (8019fa8 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8019f7a:	f005 fd81 	bl	801fa80 <__cxa_guard_acquire>
 8019f7e:	4603      	mov	r3, r0
 8019f80:	2b00      	cmp	r3, #0
 8019f82:	bf14      	ite	ne
 8019f84:	2301      	movne	r3, #1
 8019f86:	2300      	moveq	r3, #0
 8019f88:	b2db      	uxtb	r3, r3
 8019f8a:	2b00      	cmp	r3, #0
 8019f8c:	d008      	beq.n	8019fa0 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 8019f8e:	4807      	ldr	r0, [pc, #28]	; (8019fac <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
 8019f90:	f7ff ffc8 	bl	8019f24 <_ZN21MockIgnoredActualCallC1Ev>
 8019f94:	4804      	ldr	r0, [pc, #16]	; (8019fa8 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8019f96:	f005 fd7f 	bl	801fa98 <__cxa_guard_release>
 8019f9a:	4805      	ldr	r0, [pc, #20]	; (8019fb0 <_ZN21MockIgnoredActualCall8instanceEv+0x58>)
 8019f9c:	f005 fda3 	bl	801fae6 <atexit>
    return call;
 8019fa0:	4b02      	ldr	r3, [pc, #8]	; (8019fac <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
}
 8019fa2:	4618      	mov	r0, r3
 8019fa4:	bd80      	pop	{r7, pc}
 8019fa6:	bf00      	nop
 8019fa8:	20000eb8 	.word	0x20000eb8
 8019fac:	20000eb4 	.word	0x20000eb4
 8019fb0:	08019f49 	.word	0x08019f49

08019fb4 <_ZN21MockIgnoredActualCallD1Ev>:
 8019fb4:	b580      	push	{r7, lr}
 8019fb6:	b082      	sub	sp, #8
 8019fb8:	af00      	add	r7, sp, #0
 8019fba:	6078      	str	r0, [r7, #4]
 8019fbc:	4a05      	ldr	r2, [pc, #20]	; (8019fd4 <_ZN21MockIgnoredActualCallD1Ev+0x20>)
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	601a      	str	r2, [r3, #0]
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	4618      	mov	r0, r3
 8019fc6:	f7fd fe5f 	bl	8017c88 <_ZN14MockActualCallD1Ev>
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	4618      	mov	r0, r3
 8019fce:	3708      	adds	r7, #8
 8019fd0:	46bd      	mov	sp, r7
 8019fd2:	bd80      	pop	{r7, pc}
 8019fd4:	08028d20 	.word	0x08028d20

08019fd8 <_ZN21MockIgnoredActualCallD0Ev>:
 8019fd8:	b580      	push	{r7, lr}
 8019fda:	b082      	sub	sp, #8
 8019fdc:	af00      	add	r7, sp, #0
 8019fde:	6078      	str	r0, [r7, #4]
 8019fe0:	6878      	ldr	r0, [r7, #4]
 8019fe2:	f7ff ffe7 	bl	8019fb4 <_ZN21MockIgnoredActualCallD1Ev>
 8019fe6:	2104      	movs	r1, #4
 8019fe8:	6878      	ldr	r0, [r7, #4]
 8019fea:	f7f0 fadb 	bl	800a5a4 <_ZdlPvj>
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	4618      	mov	r0, r3
 8019ff2:	3708      	adds	r7, #8
 8019ff4:	46bd      	mov	sp, r7
 8019ff6:	bd80      	pop	{r7, pc}

08019ff8 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>:
{
public:
    MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName);
};

class MockNoWayToCopyCustomTypeFailure : public MockFailure
 8019ff8:	b580      	push	{r7, lr}
 8019ffa:	b082      	sub	sp, #8
 8019ffc:	af00      	add	r7, sp, #0
 8019ffe:	6078      	str	r0, [r7, #4]
 801a000:	4a05      	ldr	r2, [pc, #20]	; (801a018 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev+0x20>)
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	601a      	str	r2, [r3, #0]
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	4618      	mov	r0, r3
 801a00a:	f7f0 fefd 	bl	800ae08 <_ZN11MockFailureD1Ev>
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	4618      	mov	r0, r3
 801a012:	3708      	adds	r7, #8
 801a014:	46bd      	mov	sp, r7
 801a016:	bd80      	pop	{r7, pc}
 801a018:	08028c18 	.word	0x08028c18

0801a01c <_ZN32MockNoWayToCopyCustomTypeFailureD0Ev>:
 801a01c:	b580      	push	{r7, lr}
 801a01e:	b082      	sub	sp, #8
 801a020:	af00      	add	r7, sp, #0
 801a022:	6078      	str	r0, [r7, #4]
 801a024:	6878      	ldr	r0, [r7, #4]
 801a026:	f7ff ffe7 	bl	8019ff8 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
 801a02a:	2134      	movs	r1, #52	; 0x34
 801a02c:	6878      	ldr	r0, [r7, #4]
 801a02e:	f7f0 fab9 	bl	800a5a4 <_ZdlPvj>
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	4618      	mov	r0, r3
 801a036:	3708      	adds	r7, #8
 801a038:	46bd      	mov	sp, r7
 801a03a:	bd80      	pop	{r7, pc}

0801a03c <_ZN33MockUnexpectedCallHappenedFailureD1Ev>:
class MockUnexpectedCallHappenedFailure : public MockFailure
 801a03c:	b580      	push	{r7, lr}
 801a03e:	b082      	sub	sp, #8
 801a040:	af00      	add	r7, sp, #0
 801a042:	6078      	str	r0, [r7, #4]
 801a044:	4a05      	ldr	r2, [pc, #20]	; (801a05c <_ZN33MockUnexpectedCallHappenedFailureD1Ev+0x20>)
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	601a      	str	r2, [r3, #0]
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	4618      	mov	r0, r3
 801a04e:	f7f0 fedb 	bl	800ae08 <_ZN11MockFailureD1Ev>
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	4618      	mov	r0, r3
 801a056:	3708      	adds	r7, #8
 801a058:	46bd      	mov	sp, r7
 801a05a:	bd80      	pop	{r7, pc}
 801a05c:	08028cf4 	.word	0x08028cf4

0801a060 <_ZN33MockUnexpectedCallHappenedFailureD0Ev>:
 801a060:	b580      	push	{r7, lr}
 801a062:	b082      	sub	sp, #8
 801a064:	af00      	add	r7, sp, #0
 801a066:	6078      	str	r0, [r7, #4]
 801a068:	6878      	ldr	r0, [r7, #4]
 801a06a:	f7ff ffe7 	bl	801a03c <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 801a06e:	2134      	movs	r1, #52	; 0x34
 801a070:	6878      	ldr	r0, [r7, #4]
 801a072:	f7f0 fa97 	bl	800a5a4 <_ZdlPvj>
 801a076:	687b      	ldr	r3, [r7, #4]
 801a078:	4618      	mov	r0, r3
 801a07a:	3708      	adds	r7, #8
 801a07c:	46bd      	mov	sp, r7
 801a07e:	bd80      	pop	{r7, pc}

0801a080 <_ZN35MockUnexpectedInputParameterFailureD1Ev>:
class MockUnexpectedInputParameterFailure : public MockFailure
 801a080:	b580      	push	{r7, lr}
 801a082:	b082      	sub	sp, #8
 801a084:	af00      	add	r7, sp, #0
 801a086:	6078      	str	r0, [r7, #4]
 801a088:	4a05      	ldr	r2, [pc, #20]	; (801a0a0 <_ZN35MockUnexpectedInputParameterFailureD1Ev+0x20>)
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	601a      	str	r2, [r3, #0]
 801a08e:	687b      	ldr	r3, [r7, #4]
 801a090:	4618      	mov	r0, r3
 801a092:	f7f0 feb9 	bl	800ae08 <_ZN11MockFailureD1Ev>
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	4618      	mov	r0, r3
 801a09a:	3708      	adds	r7, #8
 801a09c:	46bd      	mov	sp, r7
 801a09e:	bd80      	pop	{r7, pc}
 801a0a0:	08028cc8 	.word	0x08028cc8

0801a0a4 <_ZN35MockUnexpectedInputParameterFailureD0Ev>:
 801a0a4:	b580      	push	{r7, lr}
 801a0a6:	b082      	sub	sp, #8
 801a0a8:	af00      	add	r7, sp, #0
 801a0aa:	6078      	str	r0, [r7, #4]
 801a0ac:	6878      	ldr	r0, [r7, #4]
 801a0ae:	f7ff ffe7 	bl	801a080 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 801a0b2:	2134      	movs	r1, #52	; 0x34
 801a0b4:	6878      	ldr	r0, [r7, #4]
 801a0b6:	f7f0 fa75 	bl	800a5a4 <_ZdlPvj>
 801a0ba:	687b      	ldr	r3, [r7, #4]
 801a0bc:	4618      	mov	r0, r3
 801a0be:	3708      	adds	r7, #8
 801a0c0:	46bd      	mov	sp, r7
 801a0c2:	bd80      	pop	{r7, pc}

0801a0c4 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>:
class MockUnexpectedOutputParameterFailure : public MockFailure
 801a0c4:	b580      	push	{r7, lr}
 801a0c6:	b082      	sub	sp, #8
 801a0c8:	af00      	add	r7, sp, #0
 801a0ca:	6078      	str	r0, [r7, #4]
 801a0cc:	4a05      	ldr	r2, [pc, #20]	; (801a0e4 <_ZN36MockUnexpectedOutputParameterFailureD1Ev+0x20>)
 801a0ce:	687b      	ldr	r3, [r7, #4]
 801a0d0:	601a      	str	r2, [r3, #0]
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	4618      	mov	r0, r3
 801a0d6:	f7f0 fe97 	bl	800ae08 <_ZN11MockFailureD1Ev>
 801a0da:	687b      	ldr	r3, [r7, #4]
 801a0dc:	4618      	mov	r0, r3
 801a0de:	3708      	adds	r7, #8
 801a0e0:	46bd      	mov	sp, r7
 801a0e2:	bd80      	pop	{r7, pc}
 801a0e4:	08028c9c 	.word	0x08028c9c

0801a0e8 <_ZN36MockUnexpectedOutputParameterFailureD0Ev>:
 801a0e8:	b580      	push	{r7, lr}
 801a0ea:	b082      	sub	sp, #8
 801a0ec:	af00      	add	r7, sp, #0
 801a0ee:	6078      	str	r0, [r7, #4]
 801a0f0:	6878      	ldr	r0, [r7, #4]
 801a0f2:	f7ff ffe7 	bl	801a0c4 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 801a0f6:	2134      	movs	r1, #52	; 0x34
 801a0f8:	6878      	ldr	r0, [r7, #4]
 801a0fa:	f7f0 fa53 	bl	800a5a4 <_ZdlPvj>
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	4618      	mov	r0, r3
 801a102:	3708      	adds	r7, #8
 801a104:	46bd      	mov	sp, r7
 801a106:	bd80      	pop	{r7, pc}

0801a108 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>:
class MockNoWayToCompareCustomTypeFailure : public MockFailure
 801a108:	b580      	push	{r7, lr}
 801a10a:	b082      	sub	sp, #8
 801a10c:	af00      	add	r7, sp, #0
 801a10e:	6078      	str	r0, [r7, #4]
 801a110:	4a05      	ldr	r2, [pc, #20]	; (801a128 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev+0x20>)
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	601a      	str	r2, [r3, #0]
 801a116:	687b      	ldr	r3, [r7, #4]
 801a118:	4618      	mov	r0, r3
 801a11a:	f7f0 fe75 	bl	800ae08 <_ZN11MockFailureD1Ev>
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	4618      	mov	r0, r3
 801a122:	3708      	adds	r7, #8
 801a124:	46bd      	mov	sp, r7
 801a126:	bd80      	pop	{r7, pc}
 801a128:	08028c44 	.word	0x08028c44

0801a12c <_ZN35MockNoWayToCompareCustomTypeFailureD0Ev>:
 801a12c:	b580      	push	{r7, lr}
 801a12e:	b082      	sub	sp, #8
 801a130:	af00      	add	r7, sp, #0
 801a132:	6078      	str	r0, [r7, #4]
 801a134:	6878      	ldr	r0, [r7, #4]
 801a136:	f7ff ffe7 	bl	801a108 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 801a13a:	2134      	movs	r1, #52	; 0x34
 801a13c:	6878      	ldr	r0, [r7, #4]
 801a13e:	f7f0 fa31 	bl	800a5a4 <_ZdlPvj>
 801a142:	687b      	ldr	r3, [r7, #4]
 801a144:	4618      	mov	r0, r3
 801a146:	3708      	adds	r7, #8
 801a148:	46bd      	mov	sp, r7
 801a14a:	bd80      	pop	{r7, pc}

0801a14c <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>:
class MockExpectedParameterDidntHappenFailure : public MockFailure
 801a14c:	b580      	push	{r7, lr}
 801a14e:	b082      	sub	sp, #8
 801a150:	af00      	add	r7, sp, #0
 801a152:	6078      	str	r0, [r7, #4]
 801a154:	4a05      	ldr	r2, [pc, #20]	; (801a16c <_ZN39MockExpectedParameterDidntHappenFailureD1Ev+0x20>)
 801a156:	687b      	ldr	r3, [r7, #4]
 801a158:	601a      	str	r2, [r3, #0]
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	4618      	mov	r0, r3
 801a15e:	f7f0 fe53 	bl	800ae08 <_ZN11MockFailureD1Ev>
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	4618      	mov	r0, r3
 801a166:	3708      	adds	r7, #8
 801a168:	46bd      	mov	sp, r7
 801a16a:	bd80      	pop	{r7, pc}
 801a16c:	08028c70 	.word	0x08028c70

0801a170 <_ZN39MockExpectedParameterDidntHappenFailureD0Ev>:
 801a170:	b580      	push	{r7, lr}
 801a172:	b082      	sub	sp, #8
 801a174:	af00      	add	r7, sp, #0
 801a176:	6078      	str	r0, [r7, #4]
 801a178:	6878      	ldr	r0, [r7, #4]
 801a17a:	f7ff ffe7 	bl	801a14c <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 801a17e:	2134      	movs	r1, #52	; 0x34
 801a180:	6878      	ldr	r0, [r7, #4]
 801a182:	f7f0 fa0f 	bl	800a5a4 <_ZdlPvj>
 801a186:	687b      	ldr	r3, [r7, #4]
 801a188:	4618      	mov	r0, r3
 801a18a:	3708      	adds	r7, #8
 801a18c:	46bd      	mov	sp, r7
 801a18e:	bd80      	pop	{r7, pc}

0801a190 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>:
{
public:
    MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* expected, const MockExpectedCallsList& expectations);
};

class MockExpectedObjectDidntHappenFailure : public MockFailure
 801a190:	b580      	push	{r7, lr}
 801a192:	b082      	sub	sp, #8
 801a194:	af00      	add	r7, sp, #0
 801a196:	6078      	str	r0, [r7, #4]
 801a198:	4a05      	ldr	r2, [pc, #20]	; (801a1b0 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev+0x20>)
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	601a      	str	r2, [r3, #0]
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	4618      	mov	r0, r3
 801a1a2:	f7f0 fe31 	bl	800ae08 <_ZN11MockFailureD1Ev>
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	4618      	mov	r0, r3
 801a1aa:	3708      	adds	r7, #8
 801a1ac:	46bd      	mov	sp, r7
 801a1ae:	bd80      	pop	{r7, pc}
 801a1b0:	08028bc0 	.word	0x08028bc0

0801a1b4 <_ZN36MockExpectedObjectDidntHappenFailureD0Ev>:
 801a1b4:	b580      	push	{r7, lr}
 801a1b6:	b082      	sub	sp, #8
 801a1b8:	af00      	add	r7, sp, #0
 801a1ba:	6078      	str	r0, [r7, #4]
 801a1bc:	6878      	ldr	r0, [r7, #4]
 801a1be:	f7ff ffe7 	bl	801a190 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 801a1c2:	2134      	movs	r1, #52	; 0x34
 801a1c4:	6878      	ldr	r0, [r7, #4]
 801a1c6:	f7f0 f9ed 	bl	800a5a4 <_ZdlPvj>
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	4618      	mov	r0, r3
 801a1ce:	3708      	adds	r7, #8
 801a1d0:	46bd      	mov	sp, r7
 801a1d2:	bd80      	pop	{r7, pc}

0801a1d4 <_ZN27MockUnexpectedObjectFailureD1Ev>:
class MockUnexpectedObjectFailure : public MockFailure
 801a1d4:	b580      	push	{r7, lr}
 801a1d6:	b082      	sub	sp, #8
 801a1d8:	af00      	add	r7, sp, #0
 801a1da:	6078      	str	r0, [r7, #4]
 801a1dc:	4a05      	ldr	r2, [pc, #20]	; (801a1f4 <_ZN27MockUnexpectedObjectFailureD1Ev+0x20>)
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	601a      	str	r2, [r3, #0]
 801a1e2:	687b      	ldr	r3, [r7, #4]
 801a1e4:	4618      	mov	r0, r3
 801a1e6:	f7f0 fe0f 	bl	800ae08 <_ZN11MockFailureD1Ev>
 801a1ea:	687b      	ldr	r3, [r7, #4]
 801a1ec:	4618      	mov	r0, r3
 801a1ee:	3708      	adds	r7, #8
 801a1f0:	46bd      	mov	sp, r7
 801a1f2:	bd80      	pop	{r7, pc}
 801a1f4:	08028bec 	.word	0x08028bec

0801a1f8 <_ZN27MockUnexpectedObjectFailureD0Ev>:
 801a1f8:	b580      	push	{r7, lr}
 801a1fa:	b082      	sub	sp, #8
 801a1fc:	af00      	add	r7, sp, #0
 801a1fe:	6078      	str	r0, [r7, #4]
 801a200:	6878      	ldr	r0, [r7, #4]
 801a202:	f7ff ffe7 	bl	801a1d4 <_ZN27MockUnexpectedObjectFailureD1Ev>
 801a206:	2134      	movs	r1, #52	; 0x34
 801a208:	6878      	ldr	r0, [r7, #4]
 801a20a:	f7f0 f9cb 	bl	800a5a4 <_ZdlPvj>
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	4618      	mov	r0, r3
 801a212:	3708      	adds	r7, #8
 801a214:	46bd      	mov	sp, r7
 801a216:	bd80      	pop	{r7, pc}

0801a218 <_ZN23MockCheckedExpectedCall13withCallOrderEj>:
    MockCheckedExpectedCall();
    MockCheckedExpectedCall(unsigned int numCalls);
    virtual ~MockCheckedExpectedCall() _destructor_override;

    virtual MockExpectedCall& withName(const SimpleString& name) _override;
    virtual MockExpectedCall& withCallOrder(unsigned int callOrder) _override { return withCallOrder(callOrder, callOrder); }
 801a218:	b580      	push	{r7, lr}
 801a21a:	b082      	sub	sp, #8
 801a21c:	af00      	add	r7, sp, #0
 801a21e:	6078      	str	r0, [r7, #4]
 801a220:	6039      	str	r1, [r7, #0]
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	3310      	adds	r3, #16
 801a228:	681b      	ldr	r3, [r3, #0]
 801a22a:	683a      	ldr	r2, [r7, #0]
 801a22c:	6839      	ldr	r1, [r7, #0]
 801a22e:	6878      	ldr	r0, [r7, #4]
 801a230:	4798      	blx	r3
 801a232:	4603      	mov	r3, r0
 801a234:	4618      	mov	r0, r3
 801a236:	3708      	adds	r7, #8
 801a238:	46bd      	mov	sp, r7
 801a23a:	bd80      	pop	{r7, pc}

0801a23c <_ZN23MockIgnoredExpectedCall8withNameERK12SimpleString>:

class MockIgnoredExpectedCall: public MockExpectedCall
{
public:

    virtual MockExpectedCall& withName(const SimpleString&) _override { return *this;}
 801a23c:	b480      	push	{r7}
 801a23e:	b083      	sub	sp, #12
 801a240:	af00      	add	r7, sp, #0
 801a242:	6078      	str	r0, [r7, #4]
 801a244:	6039      	str	r1, [r7, #0]
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	4618      	mov	r0, r3
 801a24a:	370c      	adds	r7, #12
 801a24c:	46bd      	mov	sp, r7
 801a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a252:	4770      	bx	lr

0801a254 <_ZN23MockIgnoredExpectedCall13withCallOrderEj>:
    virtual MockExpectedCall& withCallOrder(unsigned int) _override { return *this; }
 801a254:	b480      	push	{r7}
 801a256:	b083      	sub	sp, #12
 801a258:	af00      	add	r7, sp, #0
 801a25a:	6078      	str	r0, [r7, #4]
 801a25c:	6039      	str	r1, [r7, #0]
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	4618      	mov	r0, r3
 801a262:	370c      	adds	r7, #12
 801a264:	46bd      	mov	sp, r7
 801a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a26a:	4770      	bx	lr

0801a26c <_ZN23MockIgnoredExpectedCall13withCallOrderEjj>:
    virtual MockExpectedCall& withCallOrder(unsigned int, unsigned int) _override { return *this; }
 801a26c:	b480      	push	{r7}
 801a26e:	b085      	sub	sp, #20
 801a270:	af00      	add	r7, sp, #0
 801a272:	60f8      	str	r0, [r7, #12]
 801a274:	60b9      	str	r1, [r7, #8]
 801a276:	607a      	str	r2, [r7, #4]
 801a278:	68fb      	ldr	r3, [r7, #12]
 801a27a:	4618      	mov	r0, r3
 801a27c:	3714      	adds	r7, #20
 801a27e:	46bd      	mov	sp, r7
 801a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a284:	4770      	bx	lr

0801a286 <_ZN23MockIgnoredExpectedCall17withBoolParameterERK12SimpleStringb>:
    virtual MockExpectedCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 801a286:	b480      	push	{r7}
 801a288:	b085      	sub	sp, #20
 801a28a:	af00      	add	r7, sp, #0
 801a28c:	60f8      	str	r0, [r7, #12]
 801a28e:	60b9      	str	r1, [r7, #8]
 801a290:	4613      	mov	r3, r2
 801a292:	71fb      	strb	r3, [r7, #7]
 801a294:	68fb      	ldr	r3, [r7, #12]
 801a296:	4618      	mov	r0, r3
 801a298:	3714      	adds	r7, #20
 801a29a:	46bd      	mov	sp, r7
 801a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2a0:	4770      	bx	lr

0801a2a2 <_ZN23MockIgnoredExpectedCall16withIntParameterERK12SimpleStringi>:
    virtual MockExpectedCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 801a2a2:	b480      	push	{r7}
 801a2a4:	b085      	sub	sp, #20
 801a2a6:	af00      	add	r7, sp, #0
 801a2a8:	60f8      	str	r0, [r7, #12]
 801a2aa:	60b9      	str	r1, [r7, #8]
 801a2ac:	607a      	str	r2, [r7, #4]
 801a2ae:	68fb      	ldr	r3, [r7, #12]
 801a2b0:	4618      	mov	r0, r3
 801a2b2:	3714      	adds	r7, #20
 801a2b4:	46bd      	mov	sp, r7
 801a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2ba:	4770      	bx	lr

0801a2bc <_ZN23MockIgnoredExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockExpectedCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override{ return *this; }
 801a2bc:	b480      	push	{r7}
 801a2be:	b085      	sub	sp, #20
 801a2c0:	af00      	add	r7, sp, #0
 801a2c2:	60f8      	str	r0, [r7, #12]
 801a2c4:	60b9      	str	r1, [r7, #8]
 801a2c6:	607a      	str	r2, [r7, #4]
 801a2c8:	68fb      	ldr	r3, [r7, #12]
 801a2ca:	4618      	mov	r0, r3
 801a2cc:	3714      	adds	r7, #20
 801a2ce:	46bd      	mov	sp, r7
 801a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2d4:	4770      	bx	lr

0801a2d6 <_ZN23MockIgnoredExpectedCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockExpectedCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 801a2d6:	b480      	push	{r7}
 801a2d8:	b085      	sub	sp, #20
 801a2da:	af00      	add	r7, sp, #0
 801a2dc:	60f8      	str	r0, [r7, #12]
 801a2de:	60b9      	str	r1, [r7, #8]
 801a2e0:	607a      	str	r2, [r7, #4]
 801a2e2:	68fb      	ldr	r3, [r7, #12]
 801a2e4:	4618      	mov	r0, r3
 801a2e6:	3714      	adds	r7, #20
 801a2e8:	46bd      	mov	sp, r7
 801a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2ee:	4770      	bx	lr

0801a2f0 <_ZN23MockIgnoredExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockExpectedCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 801a2f0:	b480      	push	{r7}
 801a2f2:	b085      	sub	sp, #20
 801a2f4:	af00      	add	r7, sp, #0
 801a2f6:	60f8      	str	r0, [r7, #12]
 801a2f8:	60b9      	str	r1, [r7, #8]
 801a2fa:	607a      	str	r2, [r7, #4]
 801a2fc:	68fb      	ldr	r3, [r7, #12]
 801a2fe:	4618      	mov	r0, r3
 801a300:	3714      	adds	r7, #20
 801a302:	46bd      	mov	sp, r7
 801a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a308:	4770      	bx	lr

0801a30a <_ZN23MockIgnoredExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockExpectedCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 801a30a:	b480      	push	{r7}
 801a30c:	b085      	sub	sp, #20
 801a30e:	af00      	add	r7, sp, #0
 801a310:	60f8      	str	r0, [r7, #12]
 801a312:	60b9      	str	r1, [r7, #8]
 801a314:	4639      	mov	r1, r7
 801a316:	e881 000c 	stmia.w	r1, {r2, r3}
 801a31a:	68fb      	ldr	r3, [r7, #12]
 801a31c:	4618      	mov	r0, r3
 801a31e:	3714      	adds	r7, #20
 801a320:	46bd      	mov	sp, r7
 801a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a326:	4770      	bx	lr

0801a328 <_ZN23MockIgnoredExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockExpectedCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 801a328:	b480      	push	{r7}
 801a32a:	b085      	sub	sp, #20
 801a32c:	af00      	add	r7, sp, #0
 801a32e:	60f8      	str	r0, [r7, #12]
 801a330:	60b9      	str	r1, [r7, #8]
 801a332:	4639      	mov	r1, r7
 801a334:	e881 000c 	stmia.w	r1, {r2, r3}
 801a338:	68fb      	ldr	r3, [r7, #12]
 801a33a:	4618      	mov	r0, r3
 801a33c:	3714      	adds	r7, #20
 801a33e:	46bd      	mov	sp, r7
 801a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a344:	4770      	bx	lr

0801a346 <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 801a346:	b480      	push	{r7}
 801a348:	b085      	sub	sp, #20
 801a34a:	af00      	add	r7, sp, #0
 801a34c:	60f8      	str	r0, [r7, #12]
 801a34e:	60b9      	str	r1, [r7, #8]
 801a350:	ed87 0b00 	vstr	d0, [r7]
 801a354:	68fb      	ldr	r3, [r7, #12]
 801a356:	4618      	mov	r0, r3
 801a358:	3714      	adds	r7, #20
 801a35a:	46bd      	mov	sp, r7
 801a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a360:	4770      	bx	lr

0801a362 <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringdd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double, double) _override { return *this; }
 801a362:	b480      	push	{r7}
 801a364:	b087      	sub	sp, #28
 801a366:	af00      	add	r7, sp, #0
 801a368:	6178      	str	r0, [r7, #20]
 801a36a:	6139      	str	r1, [r7, #16]
 801a36c:	ed87 0b02 	vstr	d0, [r7, #8]
 801a370:	ed87 1b00 	vstr	d1, [r7]
 801a374:	697b      	ldr	r3, [r7, #20]
 801a376:	4618      	mov	r0, r3
 801a378:	371c      	adds	r7, #28
 801a37a:	46bd      	mov	sp, r7
 801a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a380:	4770      	bx	lr

0801a382 <_ZN23MockIgnoredExpectedCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockExpectedCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 801a382:	b480      	push	{r7}
 801a384:	b085      	sub	sp, #20
 801a386:	af00      	add	r7, sp, #0
 801a388:	60f8      	str	r0, [r7, #12]
 801a38a:	60b9      	str	r1, [r7, #8]
 801a38c:	607a      	str	r2, [r7, #4]
 801a38e:	68fb      	ldr	r3, [r7, #12]
 801a390:	4618      	mov	r0, r3
 801a392:	3714      	adds	r7, #20
 801a394:	46bd      	mov	sp, r7
 801a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a39a:	4770      	bx	lr

0801a39c <_ZN23MockIgnoredExpectedCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockExpectedCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 801a39c:	b480      	push	{r7}
 801a39e:	b085      	sub	sp, #20
 801a3a0:	af00      	add	r7, sp, #0
 801a3a2:	60f8      	str	r0, [r7, #12]
 801a3a4:	60b9      	str	r1, [r7, #8]
 801a3a6:	607a      	str	r2, [r7, #4]
 801a3a8:	68fb      	ldr	r3, [r7, #12]
 801a3aa:	4618      	mov	r0, r3
 801a3ac:	3714      	adds	r7, #20
 801a3ae:	46bd      	mov	sp, r7
 801a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3b4:	4770      	bx	lr

0801a3b6 <_ZN23MockIgnoredExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockExpectedCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 801a3b6:	b480      	push	{r7}
 801a3b8:	b085      	sub	sp, #20
 801a3ba:	af00      	add	r7, sp, #0
 801a3bc:	60f8      	str	r0, [r7, #12]
 801a3be:	60b9      	str	r1, [r7, #8]
 801a3c0:	607a      	str	r2, [r7, #4]
 801a3c2:	68fb      	ldr	r3, [r7, #12]
 801a3c4:	4618      	mov	r0, r3
 801a3c6:	3714      	adds	r7, #20
 801a3c8:	46bd      	mov	sp, r7
 801a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3ce:	4770      	bx	lr

0801a3d0 <_ZN23MockIgnoredExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockExpectedCall& withFunctionPointerParameter(const SimpleString& , void(*)()) _override { return *this; }
 801a3d0:	b480      	push	{r7}
 801a3d2:	b085      	sub	sp, #20
 801a3d4:	af00      	add	r7, sp, #0
 801a3d6:	60f8      	str	r0, [r7, #12]
 801a3d8:	60b9      	str	r1, [r7, #8]
 801a3da:	607a      	str	r2, [r7, #4]
 801a3dc:	68fb      	ldr	r3, [r7, #12]
 801a3de:	4618      	mov	r0, r3
 801a3e0:	3714      	adds	r7, #20
 801a3e2:	46bd      	mov	sp, r7
 801a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3e8:	4770      	bx	lr

0801a3ea <_ZN23MockIgnoredExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockExpectedCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override { return *this; }
 801a3ea:	b480      	push	{r7}
 801a3ec:	b085      	sub	sp, #20
 801a3ee:	af00      	add	r7, sp, #0
 801a3f0:	60f8      	str	r0, [r7, #12]
 801a3f2:	60b9      	str	r1, [r7, #8]
 801a3f4:	607a      	str	r2, [r7, #4]
 801a3f6:	603b      	str	r3, [r7, #0]
 801a3f8:	68fb      	ldr	r3, [r7, #12]
 801a3fa:	4618      	mov	r0, r3
 801a3fc:	3714      	adds	r7, #20
 801a3fe:	46bd      	mov	sp, r7
 801a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a404:	4770      	bx	lr

0801a406 <_ZN23MockIgnoredExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 801a406:	b480      	push	{r7}
 801a408:	b085      	sub	sp, #20
 801a40a:	af00      	add	r7, sp, #0
 801a40c:	60f8      	str	r0, [r7, #12]
 801a40e:	60b9      	str	r1, [r7, #8]
 801a410:	607a      	str	r2, [r7, #4]
 801a412:	603b      	str	r3, [r7, #0]
 801a414:	68fb      	ldr	r3, [r7, #12]
 801a416:	4618      	mov	r0, r3
 801a418:	3714      	adds	r7, #20
 801a41a:	46bd      	mov	sp, r7
 801a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a420:	4770      	bx	lr

0801a422 <_ZN23MockIgnoredExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:
    virtual MockExpectedCall& withOutputParameterReturning(const SimpleString&, const void*, size_t) _override { return *this; }
 801a422:	b480      	push	{r7}
 801a424:	b085      	sub	sp, #20
 801a426:	af00      	add	r7, sp, #0
 801a428:	60f8      	str	r0, [r7, #12]
 801a42a:	60b9      	str	r1, [r7, #8]
 801a42c:	607a      	str	r2, [r7, #4]
 801a42e:	603b      	str	r3, [r7, #0]
 801a430:	68fb      	ldr	r3, [r7, #12]
 801a432:	4618      	mov	r0, r3
 801a434:	3714      	adds	r7, #20
 801a436:	46bd      	mov	sp, r7
 801a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a43c:	4770      	bx	lr

0801a43e <_ZN23MockIgnoredExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withOutputParameterOfTypeReturning(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 801a43e:	b480      	push	{r7}
 801a440:	b085      	sub	sp, #20
 801a442:	af00      	add	r7, sp, #0
 801a444:	60f8      	str	r0, [r7, #12]
 801a446:	60b9      	str	r1, [r7, #8]
 801a448:	607a      	str	r2, [r7, #4]
 801a44a:	603b      	str	r3, [r7, #0]
 801a44c:	68fb      	ldr	r3, [r7, #12]
 801a44e:	4618      	mov	r0, r3
 801a450:	3714      	adds	r7, #20
 801a452:	46bd      	mov	sp, r7
 801a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a458:	4770      	bx	lr

0801a45a <_ZN23MockIgnoredExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:
    virtual MockExpectedCall& withUnmodifiedOutputParameter(const SimpleString&) _override { return *this; }
 801a45a:	b480      	push	{r7}
 801a45c:	b083      	sub	sp, #12
 801a45e:	af00      	add	r7, sp, #0
 801a460:	6078      	str	r0, [r7, #4]
 801a462:	6039      	str	r1, [r7, #0]
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	4618      	mov	r0, r3
 801a468:	370c      	adds	r7, #12
 801a46a:	46bd      	mov	sp, r7
 801a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a470:	4770      	bx	lr

0801a472 <_ZN23MockIgnoredExpectedCall21ignoreOtherParametersEv>:
    virtual MockExpectedCall& ignoreOtherParameters() _override { return *this;}
 801a472:	b480      	push	{r7}
 801a474:	b083      	sub	sp, #12
 801a476:	af00      	add	r7, sp, #0
 801a478:	6078      	str	r0, [r7, #4]
 801a47a:	687b      	ldr	r3, [r7, #4]
 801a47c:	4618      	mov	r0, r3
 801a47e:	370c      	adds	r7, #12
 801a480:	46bd      	mov	sp, r7
 801a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a486:	4770      	bx	lr

0801a488 <_ZN23MockIgnoredExpectedCall14andReturnValueEb>:

    virtual MockExpectedCall& andReturnValue(bool) _override { return *this; }
 801a488:	b480      	push	{r7}
 801a48a:	b083      	sub	sp, #12
 801a48c:	af00      	add	r7, sp, #0
 801a48e:	6078      	str	r0, [r7, #4]
 801a490:	460b      	mov	r3, r1
 801a492:	70fb      	strb	r3, [r7, #3]
 801a494:	687b      	ldr	r3, [r7, #4]
 801a496:	4618      	mov	r0, r3
 801a498:	370c      	adds	r7, #12
 801a49a:	46bd      	mov	sp, r7
 801a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4a0:	4770      	bx	lr

0801a4a2 <_ZN23MockIgnoredExpectedCall14andReturnValueEi>:
    virtual MockExpectedCall& andReturnValue(int) _override { return *this; }
 801a4a2:	b480      	push	{r7}
 801a4a4:	b083      	sub	sp, #12
 801a4a6:	af00      	add	r7, sp, #0
 801a4a8:	6078      	str	r0, [r7, #4]
 801a4aa:	6039      	str	r1, [r7, #0]
 801a4ac:	687b      	ldr	r3, [r7, #4]
 801a4ae:	4618      	mov	r0, r3
 801a4b0:	370c      	adds	r7, #12
 801a4b2:	46bd      	mov	sp, r7
 801a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4b8:	4770      	bx	lr

0801a4ba <_ZN23MockIgnoredExpectedCall14andReturnValueEj>:
    virtual MockExpectedCall& andReturnValue(unsigned int) _override { return *this; }
 801a4ba:	b480      	push	{r7}
 801a4bc:	b083      	sub	sp, #12
 801a4be:	af00      	add	r7, sp, #0
 801a4c0:	6078      	str	r0, [r7, #4]
 801a4c2:	6039      	str	r1, [r7, #0]
 801a4c4:	687b      	ldr	r3, [r7, #4]
 801a4c6:	4618      	mov	r0, r3
 801a4c8:	370c      	adds	r7, #12
 801a4ca:	46bd      	mov	sp, r7
 801a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4d0:	4770      	bx	lr

0801a4d2 <_ZN23MockIgnoredExpectedCall14andReturnValueEl>:
    virtual MockExpectedCall& andReturnValue(long int) _override { return *this; }
 801a4d2:	b480      	push	{r7}
 801a4d4:	b083      	sub	sp, #12
 801a4d6:	af00      	add	r7, sp, #0
 801a4d8:	6078      	str	r0, [r7, #4]
 801a4da:	6039      	str	r1, [r7, #0]
 801a4dc:	687b      	ldr	r3, [r7, #4]
 801a4de:	4618      	mov	r0, r3
 801a4e0:	370c      	adds	r7, #12
 801a4e2:	46bd      	mov	sp, r7
 801a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4e8:	4770      	bx	lr

0801a4ea <_ZN23MockIgnoredExpectedCall14andReturnValueEm>:
    virtual MockExpectedCall& andReturnValue(unsigned long int) _override { return *this; }
 801a4ea:	b480      	push	{r7}
 801a4ec:	b083      	sub	sp, #12
 801a4ee:	af00      	add	r7, sp, #0
 801a4f0:	6078      	str	r0, [r7, #4]
 801a4f2:	6039      	str	r1, [r7, #0]
 801a4f4:	687b      	ldr	r3, [r7, #4]
 801a4f6:	4618      	mov	r0, r3
 801a4f8:	370c      	adds	r7, #12
 801a4fa:	46bd      	mov	sp, r7
 801a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a500:	4770      	bx	lr

0801a502 <_ZN23MockIgnoredExpectedCall14andReturnValueE17cpputest_longlong>:
    virtual MockExpectedCall& andReturnValue(cpputest_longlong) _override { return *this; }
 801a502:	b480      	push	{r7}
 801a504:	b085      	sub	sp, #20
 801a506:	af00      	add	r7, sp, #0
 801a508:	60f8      	str	r0, [r7, #12]
 801a50a:	1d3b      	adds	r3, r7, #4
 801a50c:	e883 0006 	stmia.w	r3, {r1, r2}
 801a510:	68fb      	ldr	r3, [r7, #12]
 801a512:	4618      	mov	r0, r3
 801a514:	3714      	adds	r7, #20
 801a516:	46bd      	mov	sp, r7
 801a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a51c:	4770      	bx	lr

0801a51e <_ZN23MockIgnoredExpectedCall14andReturnValueE18cpputest_ulonglong>:
    virtual MockExpectedCall& andReturnValue(cpputest_ulonglong) _override { return *this; }
 801a51e:	b480      	push	{r7}
 801a520:	b085      	sub	sp, #20
 801a522:	af00      	add	r7, sp, #0
 801a524:	60f8      	str	r0, [r7, #12]
 801a526:	1d3b      	adds	r3, r7, #4
 801a528:	e883 0006 	stmia.w	r3, {r1, r2}
 801a52c:	68fb      	ldr	r3, [r7, #12]
 801a52e:	4618      	mov	r0, r3
 801a530:	3714      	adds	r7, #20
 801a532:	46bd      	mov	sp, r7
 801a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a538:	4770      	bx	lr

0801a53a <_ZN23MockIgnoredExpectedCall14andReturnValueEd>:
    virtual MockExpectedCall& andReturnValue(double) _override { return *this;}
 801a53a:	b480      	push	{r7}
 801a53c:	b085      	sub	sp, #20
 801a53e:	af00      	add	r7, sp, #0
 801a540:	60f8      	str	r0, [r7, #12]
 801a542:	ed87 0b00 	vstr	d0, [r7]
 801a546:	68fb      	ldr	r3, [r7, #12]
 801a548:	4618      	mov	r0, r3
 801a54a:	3714      	adds	r7, #20
 801a54c:	46bd      	mov	sp, r7
 801a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a552:	4770      	bx	lr

0801a554 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKc>:
    virtual MockExpectedCall& andReturnValue(const char*) _override { return *this; }
 801a554:	b480      	push	{r7}
 801a556:	b083      	sub	sp, #12
 801a558:	af00      	add	r7, sp, #0
 801a55a:	6078      	str	r0, [r7, #4]
 801a55c:	6039      	str	r1, [r7, #0]
 801a55e:	687b      	ldr	r3, [r7, #4]
 801a560:	4618      	mov	r0, r3
 801a562:	370c      	adds	r7, #12
 801a564:	46bd      	mov	sp, r7
 801a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a56a:	4770      	bx	lr

0801a56c <_ZN23MockIgnoredExpectedCall14andReturnValueEPv>:
    virtual MockExpectedCall& andReturnValue(void*) _override { return *this; }
 801a56c:	b480      	push	{r7}
 801a56e:	b083      	sub	sp, #12
 801a570:	af00      	add	r7, sp, #0
 801a572:	6078      	str	r0, [r7, #4]
 801a574:	6039      	str	r1, [r7, #0]
 801a576:	687b      	ldr	r3, [r7, #4]
 801a578:	4618      	mov	r0, r3
 801a57a:	370c      	adds	r7, #12
 801a57c:	46bd      	mov	sp, r7
 801a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a582:	4770      	bx	lr

0801a584 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKv>:
    virtual MockExpectedCall& andReturnValue(const void*) _override { return *this; }
 801a584:	b480      	push	{r7}
 801a586:	b083      	sub	sp, #12
 801a588:	af00      	add	r7, sp, #0
 801a58a:	6078      	str	r0, [r7, #4]
 801a58c:	6039      	str	r1, [r7, #0]
 801a58e:	687b      	ldr	r3, [r7, #4]
 801a590:	4618      	mov	r0, r3
 801a592:	370c      	adds	r7, #12
 801a594:	46bd      	mov	sp, r7
 801a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a59a:	4770      	bx	lr

0801a59c <_ZN23MockIgnoredExpectedCall14andReturnValueEPFvvE>:
    virtual MockExpectedCall& andReturnValue(void (*)()) _override { return *this; }
 801a59c:	b480      	push	{r7}
 801a59e:	b083      	sub	sp, #12
 801a5a0:	af00      	add	r7, sp, #0
 801a5a2:	6078      	str	r0, [r7, #4]
 801a5a4:	6039      	str	r1, [r7, #0]
 801a5a6:	687b      	ldr	r3, [r7, #4]
 801a5a8:	4618      	mov	r0, r3
 801a5aa:	370c      	adds	r7, #12
 801a5ac:	46bd      	mov	sp, r7
 801a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5b2:	4770      	bx	lr

0801a5b4 <_ZN23MockIgnoredExpectedCall8onObjectEPv>:

    virtual MockExpectedCall& onObject(void*) _override { return *this; }
 801a5b4:	b480      	push	{r7}
 801a5b6:	b083      	sub	sp, #12
 801a5b8:	af00      	add	r7, sp, #0
 801a5ba:	6078      	str	r0, [r7, #4]
 801a5bc:	6039      	str	r1, [r7, #0]
 801a5be:	687b      	ldr	r3, [r7, #4]
 801a5c0:	4618      	mov	r0, r3
 801a5c2:	370c      	adds	r7, #12
 801a5c4:	46bd      	mov	sp, r7
 801a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5ca:	4770      	bx	lr

0801a5cc <_ZN16MockExpectedCallC1Ev>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCall::MockExpectedCall()
 801a5cc:	b480      	push	{r7}
 801a5ce:	b083      	sub	sp, #12
 801a5d0:	af00      	add	r7, sp, #0
 801a5d2:	6078      	str	r0, [r7, #4]
 801a5d4:	4a04      	ldr	r2, [pc, #16]	; (801a5e8 <_ZN16MockExpectedCallC1Ev+0x1c>)
 801a5d6:	687b      	ldr	r3, [r7, #4]
 801a5d8:	601a      	str	r2, [r3, #0]
{
}
 801a5da:	687b      	ldr	r3, [r7, #4]
 801a5dc:	4618      	mov	r0, r3
 801a5de:	370c      	adds	r7, #12
 801a5e0:	46bd      	mov	sp, r7
 801a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5e6:	4770      	bx	lr
 801a5e8:	080292c4 	.word	0x080292c4

0801a5ec <_ZN16MockExpectedCallD1Ev>:

MockExpectedCall::~MockExpectedCall()
 801a5ec:	b480      	push	{r7}
 801a5ee:	b083      	sub	sp, #12
 801a5f0:	af00      	add	r7, sp, #0
 801a5f2:	6078      	str	r0, [r7, #4]
 801a5f4:	4a04      	ldr	r2, [pc, #16]	; (801a608 <_ZN16MockExpectedCallD1Ev+0x1c>)
 801a5f6:	687b      	ldr	r3, [r7, #4]
 801a5f8:	601a      	str	r2, [r3, #0]
{
}
 801a5fa:	687b      	ldr	r3, [r7, #4]
 801a5fc:	4618      	mov	r0, r3
 801a5fe:	370c      	adds	r7, #12
 801a600:	46bd      	mov	sp, r7
 801a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a606:	4770      	bx	lr
 801a608:	080292c4 	.word	0x080292c4

0801a60c <_Z10StringFromRK14MockNamedValue>:

SimpleString StringFrom(const MockNamedValue& parameter)
{
 801a60c:	b580      	push	{r7, lr}
 801a60e:	b082      	sub	sp, #8
 801a610:	af00      	add	r7, sp, #0
 801a612:	6078      	str	r0, [r7, #4]
 801a614:	6039      	str	r1, [r7, #0]
    return parameter.toString();
 801a616:	683b      	ldr	r3, [r7, #0]
 801a618:	681b      	ldr	r3, [r3, #0]
 801a61a:	3358      	adds	r3, #88	; 0x58
 801a61c:	681b      	ldr	r3, [r3, #0]
 801a61e:	687a      	ldr	r2, [r7, #4]
 801a620:	6839      	ldr	r1, [r7, #0]
 801a622:	4610      	mov	r0, r2
 801a624:	4798      	blx	r3
}
 801a626:	6878      	ldr	r0, [r7, #4]
 801a628:	3708      	adds	r7, #8
 801a62a:	46bd      	mov	sp, r7
 801a62c:	bd80      	pop	{r7, pc}

0801a62e <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>:

void MockCheckedExpectedCall::setName(const SimpleString& name)
{
 801a62e:	b580      	push	{r7, lr}
 801a630:	b082      	sub	sp, #8
 801a632:	af00      	add	r7, sp, #0
 801a634:	6078      	str	r0, [r7, #4]
 801a636:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	3304      	adds	r3, #4
 801a63c:	6839      	ldr	r1, [r7, #0]
 801a63e:	4618      	mov	r0, r3
 801a640:	f7f2 fbcb 	bl	800cdda <_ZN12SimpleStringaSERKS_>
}
 801a644:	bf00      	nop
 801a646:	3708      	adds	r7, #8
 801a648:	46bd      	mov	sp, r7
 801a64a:	bd80      	pop	{r7, pc}

0801a64c <_ZNK23MockCheckedExpectedCall7getNameEv>:

SimpleString MockCheckedExpectedCall::getName() const
{
 801a64c:	b580      	push	{r7, lr}
 801a64e:	b082      	sub	sp, #8
 801a650:	af00      	add	r7, sp, #0
 801a652:	6078      	str	r0, [r7, #4]
 801a654:	6039      	str	r1, [r7, #0]
    return functionName_;
 801a656:	683b      	ldr	r3, [r7, #0]
 801a658:	3304      	adds	r3, #4
 801a65a:	4619      	mov	r1, r3
 801a65c:	6878      	ldr	r0, [r7, #4]
 801a65e:	f7f2 fba4 	bl	800cdaa <_ZN12SimpleStringC1ERKS_>
}
 801a662:	6878      	ldr	r0, [r7, #4]
 801a664:	3708      	adds	r7, #8
 801a666:	46bd      	mov	sp, r7
 801a668:	bd80      	pop	{r7, pc}
	...

0801a66c <_ZN23MockCheckedExpectedCallC1Ej>:
{
    inputParameters_ = new MockNamedValueList();
    outputParameters_ = new MockNamedValueList();
}

MockCheckedExpectedCall::MockCheckedExpectedCall(unsigned int numCalls)
 801a66c:	b590      	push	{r4, r7, lr}
 801a66e:	b085      	sub	sp, #20
 801a670:	af00      	add	r7, sp, #0
 801a672:	6078      	str	r0, [r7, #4]
 801a674:	6039      	str	r1, [r7, #0]
    : ignoreOtherParameters_(false), isActualCallMatchFinalized_(false),
      initialExpectedCallOrder_(NO_EXPECTED_CALL_ORDER), finalExpectedCallOrder_(NO_EXPECTED_CALL_ORDER),
      outOfOrder_(false), returnValue_(""), objectPtr_(NULLPTR), isSpecificObjectExpected_(false), wasPassedToObject_(true),
      actualCalls_(0), expectedCalls_(numCalls)
 801a676:	687b      	ldr	r3, [r7, #4]
 801a678:	4618      	mov	r0, r3
 801a67a:	f7ff ffa7 	bl	801a5cc <_ZN16MockExpectedCallC1Ev>
 801a67e:	4a2c      	ldr	r2, [pc, #176]	; (801a730 <_ZN23MockCheckedExpectedCallC1Ej+0xc4>)
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	601a      	str	r2, [r3, #0]
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	3304      	adds	r3, #4
 801a688:	492a      	ldr	r1, [pc, #168]	; (801a734 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 801a68a:	4618      	mov	r0, r3
 801a68c:	f7f2 fb39 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801a690:	687b      	ldr	r3, [r7, #4]
 801a692:	2200      	movs	r2, #0
 801a694:	731a      	strb	r2, [r3, #12]
 801a696:	687b      	ldr	r3, [r7, #4]
 801a698:	2200      	movs	r2, #0
 801a69a:	735a      	strb	r2, [r3, #13]
 801a69c:	687b      	ldr	r3, [r7, #4]
 801a69e:	2200      	movs	r2, #0
 801a6a0:	611a      	str	r2, [r3, #16]
 801a6a2:	687b      	ldr	r3, [r7, #4]
 801a6a4:	2200      	movs	r2, #0
 801a6a6:	615a      	str	r2, [r3, #20]
 801a6a8:	687b      	ldr	r3, [r7, #4]
 801a6aa:	2200      	movs	r2, #0
 801a6ac:	761a      	strb	r2, [r3, #24]
 801a6ae:	687b      	ldr	r3, [r7, #4]
 801a6b0:	f103 0428 	add.w	r4, r3, #40	; 0x28
 801a6b4:	f107 0308 	add.w	r3, r7, #8
 801a6b8:	491e      	ldr	r1, [pc, #120]	; (801a734 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 801a6ba:	4618      	mov	r0, r3
 801a6bc:	f7f2 fb21 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801a6c0:	f107 0308 	add.w	r3, r7, #8
 801a6c4:	4619      	mov	r1, r3
 801a6c6:	4620      	mov	r0, r4
 801a6c8:	f003 f840 	bl	801d74c <_ZN14MockNamedValueC1ERK12SimpleString>
 801a6cc:	f107 0308 	add.w	r3, r7, #8
 801a6d0:	4618      	mov	r0, r3
 801a6d2:	f7f2 fece 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	2200      	movs	r2, #0
 801a6da:	661a      	str	r2, [r3, #96]	; 0x60
 801a6dc:	687b      	ldr	r3, [r7, #4]
 801a6de:	2200      	movs	r2, #0
 801a6e0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 801a6e4:	687b      	ldr	r3, [r7, #4]
 801a6e6:	2201      	movs	r2, #1
 801a6e8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 801a6ec:	687b      	ldr	r3, [r7, #4]
 801a6ee:	2200      	movs	r2, #0
 801a6f0:	669a      	str	r2, [r3, #104]	; 0x68
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	683a      	ldr	r2, [r7, #0]
 801a6f6:	66da      	str	r2, [r3, #108]	; 0x6c
{
    inputParameters_ = new MockNamedValueList();
 801a6f8:	2246      	movs	r2, #70	; 0x46
 801a6fa:	490f      	ldr	r1, [pc, #60]	; (801a738 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 801a6fc:	2004      	movs	r0, #4
 801a6fe:	f7ef ff3d 	bl	800a57c <_ZnwjPKci>
 801a702:	4604      	mov	r4, r0
 801a704:	4620      	mov	r0, r4
 801a706:	f004 ff34 	bl	801f572 <_ZN18MockNamedValueListC1Ev>
 801a70a:	687b      	ldr	r3, [r7, #4]
 801a70c:	61dc      	str	r4, [r3, #28]
    outputParameters_ = new MockNamedValueList();
 801a70e:	2247      	movs	r2, #71	; 0x47
 801a710:	4909      	ldr	r1, [pc, #36]	; (801a738 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 801a712:	2004      	movs	r0, #4
 801a714:	f7ef ff32 	bl	800a57c <_ZnwjPKci>
 801a718:	4604      	mov	r4, r0
 801a71a:	4620      	mov	r0, r4
 801a71c:	f004 ff29 	bl	801f572 <_ZN18MockNamedValueListC1Ev>
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	621c      	str	r4, [r3, #32]
}
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	4618      	mov	r0, r3
 801a728:	3714      	adds	r7, #20
 801a72a:	46bd      	mov	sp, r7
 801a72c:	bd90      	pop	{r4, r7, pc}
 801a72e:	bf00      	nop
 801a730:	08029108 	.word	0x08029108
 801a734:	080260e0 	.word	0x080260e0
 801a738:	080260e4 	.word	0x080260e4

0801a73c <_ZN23MockCheckedExpectedCallD1Ev>:

MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801a73c:	b580      	push	{r7, lr}
 801a73e:	b082      	sub	sp, #8
 801a740:	af00      	add	r7, sp, #0
 801a742:	6078      	str	r0, [r7, #4]
 801a744:	4a17      	ldr	r2, [pc, #92]	; (801a7a4 <_ZN23MockCheckedExpectedCallD1Ev+0x68>)
 801a746:	687b      	ldr	r3, [r7, #4]
 801a748:	601a      	str	r2, [r3, #0]
{
    inputParameters_->clear();
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	69db      	ldr	r3, [r3, #28]
 801a74e:	4618      	mov	r0, r3
 801a750:	f004 ff1d 	bl	801f58e <_ZN18MockNamedValueList5clearEv>
    delete inputParameters_;
 801a754:	687b      	ldr	r3, [r7, #4]
 801a756:	69db      	ldr	r3, [r3, #28]
 801a758:	2b00      	cmp	r3, #0
 801a75a:	d003      	beq.n	801a764 <_ZN23MockCheckedExpectedCallD1Ev+0x28>
 801a75c:	2104      	movs	r1, #4
 801a75e:	4618      	mov	r0, r3
 801a760:	f7ef ff20 	bl	800a5a4 <_ZdlPvj>
    outputParameters_->clear();
 801a764:	687b      	ldr	r3, [r7, #4]
 801a766:	6a1b      	ldr	r3, [r3, #32]
 801a768:	4618      	mov	r0, r3
 801a76a:	f004 ff10 	bl	801f58e <_ZN18MockNamedValueList5clearEv>
    delete outputParameters_;
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	6a1b      	ldr	r3, [r3, #32]
 801a772:	2b00      	cmp	r3, #0
 801a774:	d003      	beq.n	801a77e <_ZN23MockCheckedExpectedCallD1Ev+0x42>
 801a776:	2104      	movs	r1, #4
 801a778:	4618      	mov	r0, r3
 801a77a:	f7ef ff13 	bl	800a5a4 <_ZdlPvj>
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801a77e:	687b      	ldr	r3, [r7, #4]
 801a780:	3328      	adds	r3, #40	; 0x28
 801a782:	4618      	mov	r0, r3
 801a784:	f003 f80c 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
 801a788:	687b      	ldr	r3, [r7, #4]
 801a78a:	3304      	adds	r3, #4
 801a78c:	4618      	mov	r0, r3
 801a78e:	f7f2 fe70 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801a792:	687b      	ldr	r3, [r7, #4]
 801a794:	4618      	mov	r0, r3
 801a796:	f7ff ff29 	bl	801a5ec <_ZN16MockExpectedCallD1Ev>
}
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	4618      	mov	r0, r3
 801a79e:	3708      	adds	r7, #8
 801a7a0:	46bd      	mov	sp, r7
 801a7a2:	bd80      	pop	{r7, pc}
 801a7a4:	08029108 	.word	0x08029108

0801a7a8 <_ZN23MockCheckedExpectedCallD0Ev>:
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801a7a8:	b580      	push	{r7, lr}
 801a7aa:	b082      	sub	sp, #8
 801a7ac:	af00      	add	r7, sp, #0
 801a7ae:	6078      	str	r0, [r7, #4]
}
 801a7b0:	6878      	ldr	r0, [r7, #4]
 801a7b2:	f7ff ffc3 	bl	801a73c <_ZN23MockCheckedExpectedCallD1Ev>
 801a7b6:	2170      	movs	r1, #112	; 0x70
 801a7b8:	6878      	ldr	r0, [r7, #4]
 801a7ba:	f7ef fef3 	bl	800a5a4 <_ZdlPvj>
 801a7be:	687b      	ldr	r3, [r7, #4]
 801a7c0:	4618      	mov	r0, r3
 801a7c2:	3708      	adds	r7, #8
 801a7c4:	46bd      	mov	sp, r7
 801a7c6:	bd80      	pop	{r7, pc}

0801a7c8 <_ZN23MockCheckedExpectedCall8withNameERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withName(const SimpleString& name)
{
 801a7c8:	b580      	push	{r7, lr}
 801a7ca:	b082      	sub	sp, #8
 801a7cc:	af00      	add	r7, sp, #0
 801a7ce:	6078      	str	r0, [r7, #4]
 801a7d0:	6039      	str	r1, [r7, #0]
    setName(name);
 801a7d2:	6839      	ldr	r1, [r7, #0]
 801a7d4:	6878      	ldr	r0, [r7, #4]
 801a7d6:	f7ff ff2a 	bl	801a62e <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>
    return *this;
 801a7da:	687b      	ldr	r3, [r7, #4]
}
 801a7dc:	4618      	mov	r0, r3
 801a7de:	3708      	adds	r7, #8
 801a7e0:	46bd      	mov	sp, r7
 801a7e2:	bd80      	pop	{r7, pc}

0801a7e4 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb>:

MockExpectedCall& MockCheckedExpectedCall::withBoolParameter(const SimpleString& name, bool value)
{
 801a7e4:	b590      	push	{r4, r7, lr}
 801a7e6:	b087      	sub	sp, #28
 801a7e8:	af00      	add	r7, sp, #0
 801a7ea:	60f8      	str	r0, [r7, #12]
 801a7ec:	60b9      	str	r1, [r7, #8]
 801a7ee:	4613      	mov	r3, r2
 801a7f0:	71fb      	strb	r3, [r7, #7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a7f2:	225a      	movs	r2, #90	; 0x5a
 801a7f4:	490e      	ldr	r1, [pc, #56]	; (801a830 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb+0x4c>)
 801a7f6:	2038      	movs	r0, #56	; 0x38
 801a7f8:	f7ef fec0 	bl	800a57c <_ZnwjPKci>
 801a7fc:	4604      	mov	r4, r0
 801a7fe:	68b9      	ldr	r1, [r7, #8]
 801a800:	4620      	mov	r0, r4
 801a802:	f001 f851 	bl	801b8a8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a806:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a808:	68fb      	ldr	r3, [r7, #12]
 801a80a:	69db      	ldr	r3, [r3, #28]
 801a80c:	6979      	ldr	r1, [r7, #20]
 801a80e:	4618      	mov	r0, r3
 801a810:	f004 fee0 	bl	801f5d4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a814:	697b      	ldr	r3, [r7, #20]
 801a816:	681b      	ldr	r3, [r3, #0]
 801a818:	3308      	adds	r3, #8
 801a81a:	681b      	ldr	r3, [r3, #0]
 801a81c:	79fa      	ldrb	r2, [r7, #7]
 801a81e:	4611      	mov	r1, r2
 801a820:	6978      	ldr	r0, [r7, #20]
 801a822:	4798      	blx	r3
    return *this;
 801a824:	68fb      	ldr	r3, [r7, #12]
}
 801a826:	4618      	mov	r0, r3
 801a828:	371c      	adds	r7, #28
 801a82a:	46bd      	mov	sp, r7
 801a82c:	bd90      	pop	{r4, r7, pc}
 801a82e:	bf00      	nop
 801a830:	080260e4 	.word	0x080260e4

0801a834 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 801a834:	b590      	push	{r4, r7, lr}
 801a836:	b087      	sub	sp, #28
 801a838:	af00      	add	r7, sp, #0
 801a83a:	60f8      	str	r0, [r7, #12]
 801a83c:	60b9      	str	r1, [r7, #8]
 801a83e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a840:	2262      	movs	r2, #98	; 0x62
 801a842:	490e      	ldr	r1, [pc, #56]	; (801a87c <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj+0x48>)
 801a844:	2038      	movs	r0, #56	; 0x38
 801a846:	f7ef fe99 	bl	800a57c <_ZnwjPKci>
 801a84a:	4604      	mov	r4, r0
 801a84c:	68b9      	ldr	r1, [r7, #8]
 801a84e:	4620      	mov	r0, r4
 801a850:	f001 f82a 	bl	801b8a8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a854:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a856:	68fb      	ldr	r3, [r7, #12]
 801a858:	69db      	ldr	r3, [r3, #28]
 801a85a:	6979      	ldr	r1, [r7, #20]
 801a85c:	4618      	mov	r0, r3
 801a85e:	f004 feb9 	bl	801f5d4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a862:	697b      	ldr	r3, [r7, #20]
 801a864:	681b      	ldr	r3, [r3, #0]
 801a866:	3310      	adds	r3, #16
 801a868:	681b      	ldr	r3, [r3, #0]
 801a86a:	6879      	ldr	r1, [r7, #4]
 801a86c:	6978      	ldr	r0, [r7, #20]
 801a86e:	4798      	blx	r3
    return *this;
 801a870:	68fb      	ldr	r3, [r7, #12]
}
 801a872:	4618      	mov	r0, r3
 801a874:	371c      	adds	r7, #28
 801a876:	46bd      	mov	sp, r7
 801a878:	bd90      	pop	{r4, r7, pc}
 801a87a:	bf00      	nop
 801a87c:	080260e4 	.word	0x080260e4

0801a880 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi>:

MockExpectedCall& MockCheckedExpectedCall::withIntParameter(const SimpleString& name, int value)
{
 801a880:	b590      	push	{r4, r7, lr}
 801a882:	b087      	sub	sp, #28
 801a884:	af00      	add	r7, sp, #0
 801a886:	60f8      	str	r0, [r7, #12]
 801a888:	60b9      	str	r1, [r7, #8]
 801a88a:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a88c:	226a      	movs	r2, #106	; 0x6a
 801a88e:	490e      	ldr	r1, [pc, #56]	; (801a8c8 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi+0x48>)
 801a890:	2038      	movs	r0, #56	; 0x38
 801a892:	f7ef fe73 	bl	800a57c <_ZnwjPKci>
 801a896:	4604      	mov	r4, r0
 801a898:	68b9      	ldr	r1, [r7, #8]
 801a89a:	4620      	mov	r0, r4
 801a89c:	f001 f804 	bl	801b8a8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a8a0:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a8a2:	68fb      	ldr	r3, [r7, #12]
 801a8a4:	69db      	ldr	r3, [r3, #28]
 801a8a6:	6979      	ldr	r1, [r7, #20]
 801a8a8:	4618      	mov	r0, r3
 801a8aa:	f004 fe93 	bl	801f5d4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a8ae:	697b      	ldr	r3, [r7, #20]
 801a8b0:	681b      	ldr	r3, [r3, #0]
 801a8b2:	330c      	adds	r3, #12
 801a8b4:	681b      	ldr	r3, [r3, #0]
 801a8b6:	6879      	ldr	r1, [r7, #4]
 801a8b8:	6978      	ldr	r0, [r7, #20]
 801a8ba:	4798      	blx	r3
    return *this;
 801a8bc:	68fb      	ldr	r3, [r7, #12]
}
 801a8be:	4618      	mov	r0, r3
 801a8c0:	371c      	adds	r7, #28
 801a8c2:	46bd      	mov	sp, r7
 801a8c4:	bd90      	pop	{r4, r7, pc}
 801a8c6:	bf00      	nop
 801a8c8:	080260e4 	.word	0x080260e4

0801a8cc <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl>:

MockExpectedCall& MockCheckedExpectedCall::withLongIntParameter(const SimpleString& name, long int value)
{
 801a8cc:	b590      	push	{r4, r7, lr}
 801a8ce:	b087      	sub	sp, #28
 801a8d0:	af00      	add	r7, sp, #0
 801a8d2:	60f8      	str	r0, [r7, #12]
 801a8d4:	60b9      	str	r1, [r7, #8]
 801a8d6:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a8d8:	2272      	movs	r2, #114	; 0x72
 801a8da:	490e      	ldr	r1, [pc, #56]	; (801a914 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl+0x48>)
 801a8dc:	2038      	movs	r0, #56	; 0x38
 801a8de:	f7ef fe4d 	bl	800a57c <_ZnwjPKci>
 801a8e2:	4604      	mov	r4, r0
 801a8e4:	68b9      	ldr	r1, [r7, #8]
 801a8e6:	4620      	mov	r0, r4
 801a8e8:	f000 ffde 	bl	801b8a8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a8ec:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a8ee:	68fb      	ldr	r3, [r7, #12]
 801a8f0:	69db      	ldr	r3, [r3, #28]
 801a8f2:	6979      	ldr	r1, [r7, #20]
 801a8f4:	4618      	mov	r0, r3
 801a8f6:	f004 fe6d 	bl	801f5d4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a8fa:	697b      	ldr	r3, [r7, #20]
 801a8fc:	681b      	ldr	r3, [r3, #0]
 801a8fe:	3314      	adds	r3, #20
 801a900:	681b      	ldr	r3, [r3, #0]
 801a902:	6879      	ldr	r1, [r7, #4]
 801a904:	6978      	ldr	r0, [r7, #20]
 801a906:	4798      	blx	r3
    return *this;
 801a908:	68fb      	ldr	r3, [r7, #12]
}
 801a90a:	4618      	mov	r0, r3
 801a90c:	371c      	adds	r7, #28
 801a90e:	46bd      	mov	sp, r7
 801a910:	bd90      	pop	{r4, r7, pc}
 801a912:	bf00      	nop
 801a914:	080260e4 	.word	0x080260e4

0801a918 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 801a918:	b590      	push	{r4, r7, lr}
 801a91a:	b087      	sub	sp, #28
 801a91c:	af00      	add	r7, sp, #0
 801a91e:	60f8      	str	r0, [r7, #12]
 801a920:	60b9      	str	r1, [r7, #8]
 801a922:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a924:	227a      	movs	r2, #122	; 0x7a
 801a926:	490e      	ldr	r1, [pc, #56]	; (801a960 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm+0x48>)
 801a928:	2038      	movs	r0, #56	; 0x38
 801a92a:	f7ef fe27 	bl	800a57c <_ZnwjPKci>
 801a92e:	4604      	mov	r4, r0
 801a930:	68b9      	ldr	r1, [r7, #8]
 801a932:	4620      	mov	r0, r4
 801a934:	f000 ffb8 	bl	801b8a8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a938:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a93a:	68fb      	ldr	r3, [r7, #12]
 801a93c:	69db      	ldr	r3, [r3, #28]
 801a93e:	6979      	ldr	r1, [r7, #20]
 801a940:	4618      	mov	r0, r3
 801a942:	f004 fe47 	bl	801f5d4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a946:	697b      	ldr	r3, [r7, #20]
 801a948:	681b      	ldr	r3, [r3, #0]
 801a94a:	3318      	adds	r3, #24
 801a94c:	681b      	ldr	r3, [r3, #0]
 801a94e:	6879      	ldr	r1, [r7, #4]
 801a950:	6978      	ldr	r0, [r7, #20]
 801a952:	4798      	blx	r3
    return *this;
 801a954:	68fb      	ldr	r3, [r7, #12]
}
 801a956:	4618      	mov	r0, r3
 801a958:	371c      	adds	r7, #28
 801a95a:	46bd      	mov	sp, r7
 801a95c:	bd90      	pop	{r4, r7, pc}
 801a95e:	bf00      	nop
 801a960:	080260e4 	.word	0x080260e4

0801a964 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 801a964:	b5b0      	push	{r4, r5, r7, lr}
 801a966:	b086      	sub	sp, #24
 801a968:	af02      	add	r7, sp, #8
 801a96a:	60f8      	str	r0, [r7, #12]
 801a96c:	60b9      	str	r1, [r7, #8]
 801a96e:	4639      	mov	r1, r7
 801a970:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801a974:	f7f9 fda8 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 801a978:	4604      	mov	r4, r0
 801a97a:	6823      	ldr	r3, [r4, #0]
 801a97c:	3368      	adds	r3, #104	; 0x68
 801a97e:	681d      	ldr	r5, [r3, #0]
 801a980:	f7f9 fdb2 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a984:	4603      	mov	r3, r0
 801a986:	9300      	str	r3, [sp, #0]
 801a988:	2396      	movs	r3, #150	; 0x96
 801a98a:	4a04      	ldr	r2, [pc, #16]	; (801a99c <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x38>)
 801a98c:	4904      	ldr	r1, [pc, #16]	; (801a9a0 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801a98e:	4620      	mov	r0, r4
 801a990:	47a8      	blx	r5
    return *this;
 801a992:	68fb      	ldr	r3, [r7, #12]
}
 801a994:	4618      	mov	r0, r3
 801a996:	3710      	adds	r7, #16
 801a998:	46bd      	mov	sp, r7
 801a99a:	bdb0      	pop	{r4, r5, r7, pc}
 801a99c:	080260e4 	.word	0x080260e4
 801a9a0:	08026100 	.word	0x08026100

0801a9a4 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 801a9a4:	b5b0      	push	{r4, r5, r7, lr}
 801a9a6:	b086      	sub	sp, #24
 801a9a8:	af02      	add	r7, sp, #8
 801a9aa:	60f8      	str	r0, [r7, #12]
 801a9ac:	60b9      	str	r1, [r7, #8]
 801a9ae:	4639      	mov	r1, r7
 801a9b0:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801a9b4:	f7f9 fd88 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 801a9b8:	4604      	mov	r4, r0
 801a9ba:	6823      	ldr	r3, [r4, #0]
 801a9bc:	3368      	adds	r3, #104	; 0x68
 801a9be:	681d      	ldr	r5, [r3, #0]
 801a9c0:	f7f9 fd92 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a9c4:	4603      	mov	r3, r0
 801a9c6:	9300      	str	r3, [sp, #0]
 801a9c8:	239c      	movs	r3, #156	; 0x9c
 801a9ca:	4a04      	ldr	r2, [pc, #16]	; (801a9dc <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x38>)
 801a9cc:	4904      	ldr	r1, [pc, #16]	; (801a9e0 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801a9ce:	4620      	mov	r0, r4
 801a9d0:	47a8      	blx	r5
    return *this;
 801a9d2:	68fb      	ldr	r3, [r7, #12]
}
 801a9d4:	4618      	mov	r0, r3
 801a9d6:	3710      	adds	r7, #16
 801a9d8:	46bd      	mov	sp, r7
 801a9da:	bdb0      	pop	{r4, r5, r7, pc}
 801a9dc:	080260e4 	.word	0x080260e4
 801a9e0:	08026120 	.word	0x08026120

0801a9e4 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value)
{
 801a9e4:	b590      	push	{r4, r7, lr}
 801a9e6:	b087      	sub	sp, #28
 801a9e8:	af00      	add	r7, sp, #0
 801a9ea:	60f8      	str	r0, [r7, #12]
 801a9ec:	60b9      	str	r1, [r7, #8]
 801a9ee:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a9f2:	22a4      	movs	r2, #164	; 0xa4
 801a9f4:	490e      	ldr	r1, [pc, #56]	; (801aa30 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd+0x4c>)
 801a9f6:	2038      	movs	r0, #56	; 0x38
 801a9f8:	f7ef fdc0 	bl	800a57c <_ZnwjPKci>
 801a9fc:	4604      	mov	r4, r0
 801a9fe:	68b9      	ldr	r1, [r7, #8]
 801aa00:	4620      	mov	r0, r4
 801aa02:	f000 ff51 	bl	801b8a8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801aa06:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801aa08:	68fb      	ldr	r3, [r7, #12]
 801aa0a:	69db      	ldr	r3, [r3, #28]
 801aa0c:	6979      	ldr	r1, [r7, #20]
 801aa0e:	4618      	mov	r0, r3
 801aa10:	f004 fde0 	bl	801f5d4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801aa14:	697b      	ldr	r3, [r7, #20]
 801aa16:	681b      	ldr	r3, [r3, #0]
 801aa18:	3324      	adds	r3, #36	; 0x24
 801aa1a:	681b      	ldr	r3, [r3, #0]
 801aa1c:	ed97 0b00 	vldr	d0, [r7]
 801aa20:	6978      	ldr	r0, [r7, #20]
 801aa22:	4798      	blx	r3
    return *this;
 801aa24:	68fb      	ldr	r3, [r7, #12]
}
 801aa26:	4618      	mov	r0, r3
 801aa28:	371c      	adds	r7, #28
 801aa2a:	46bd      	mov	sp, r7
 801aa2c:	bd90      	pop	{r4, r7, pc}
 801aa2e:	bf00      	nop
 801aa30:	080260e4 	.word	0x080260e4

0801aa34 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd>:

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value, double tolerance)
{
 801aa34:	b590      	push	{r4, r7, lr}
 801aa36:	b089      	sub	sp, #36	; 0x24
 801aa38:	af00      	add	r7, sp, #0
 801aa3a:	6178      	str	r0, [r7, #20]
 801aa3c:	6139      	str	r1, [r7, #16]
 801aa3e:	ed87 0b02 	vstr	d0, [r7, #8]
 801aa42:	ed87 1b00 	vstr	d1, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801aa46:	22ac      	movs	r2, #172	; 0xac
 801aa48:	490f      	ldr	r1, [pc, #60]	; (801aa88 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd+0x54>)
 801aa4a:	2038      	movs	r0, #56	; 0x38
 801aa4c:	f7ef fd96 	bl	800a57c <_ZnwjPKci>
 801aa50:	4604      	mov	r4, r0
 801aa52:	6939      	ldr	r1, [r7, #16]
 801aa54:	4620      	mov	r0, r4
 801aa56:	f000 ff27 	bl	801b8a8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801aa5a:	61fc      	str	r4, [r7, #28]
    inputParameters_->add(newParameter);
 801aa5c:	697b      	ldr	r3, [r7, #20]
 801aa5e:	69db      	ldr	r3, [r3, #28]
 801aa60:	69f9      	ldr	r1, [r7, #28]
 801aa62:	4618      	mov	r0, r3
 801aa64:	f004 fdb6 	bl	801f5d4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value, tolerance);
 801aa68:	69fb      	ldr	r3, [r7, #28]
 801aa6a:	681b      	ldr	r3, [r3, #0]
 801aa6c:	3328      	adds	r3, #40	; 0x28
 801aa6e:	681b      	ldr	r3, [r3, #0]
 801aa70:	ed97 1b00 	vldr	d1, [r7]
 801aa74:	ed97 0b02 	vldr	d0, [r7, #8]
 801aa78:	69f8      	ldr	r0, [r7, #28]
 801aa7a:	4798      	blx	r3
    return *this;
 801aa7c:	697b      	ldr	r3, [r7, #20]
}
 801aa7e:	4618      	mov	r0, r3
 801aa80:	3724      	adds	r7, #36	; 0x24
 801aa82:	46bd      	mov	sp, r7
 801aa84:	bd90      	pop	{r4, r7, pc}
 801aa86:	bf00      	nop
 801aa88:	080260e4 	.word	0x080260e4

0801aa8c <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc>:

MockExpectedCall& MockCheckedExpectedCall::withStringParameter(const SimpleString& name, const char* value)
{
 801aa8c:	b590      	push	{r4, r7, lr}
 801aa8e:	b087      	sub	sp, #28
 801aa90:	af00      	add	r7, sp, #0
 801aa92:	60f8      	str	r0, [r7, #12]
 801aa94:	60b9      	str	r1, [r7, #8]
 801aa96:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801aa98:	22b4      	movs	r2, #180	; 0xb4
 801aa9a:	490e      	ldr	r1, [pc, #56]	; (801aad4 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc+0x48>)
 801aa9c:	2038      	movs	r0, #56	; 0x38
 801aa9e:	f7ef fd6d 	bl	800a57c <_ZnwjPKci>
 801aaa2:	4604      	mov	r4, r0
 801aaa4:	68b9      	ldr	r1, [r7, #8]
 801aaa6:	4620      	mov	r0, r4
 801aaa8:	f000 fefe 	bl	801b8a8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801aaac:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801aaae:	68fb      	ldr	r3, [r7, #12]
 801aab0:	69db      	ldr	r3, [r3, #28]
 801aab2:	6979      	ldr	r1, [r7, #20]
 801aab4:	4618      	mov	r0, r3
 801aab6:	f004 fd8d 	bl	801f5d4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801aaba:	697b      	ldr	r3, [r7, #20]
 801aabc:	681b      	ldr	r3, [r3, #0]
 801aabe:	3338      	adds	r3, #56	; 0x38
 801aac0:	681b      	ldr	r3, [r3, #0]
 801aac2:	6879      	ldr	r1, [r7, #4]
 801aac4:	6978      	ldr	r0, [r7, #20]
 801aac6:	4798      	blx	r3
    return *this;
 801aac8:	68fb      	ldr	r3, [r7, #12]
}
 801aaca:	4618      	mov	r0, r3
 801aacc:	371c      	adds	r7, #28
 801aace:	46bd      	mov	sp, r7
 801aad0:	bd90      	pop	{r4, r7, pc}
 801aad2:	bf00      	nop
 801aad4:	080260e4 	.word	0x080260e4

0801aad8 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv>:

MockExpectedCall& MockCheckedExpectedCall::withPointerParameter(const SimpleString& name, void* value)
{
 801aad8:	b590      	push	{r4, r7, lr}
 801aada:	b087      	sub	sp, #28
 801aadc:	af00      	add	r7, sp, #0
 801aade:	60f8      	str	r0, [r7, #12]
 801aae0:	60b9      	str	r1, [r7, #8]
 801aae2:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801aae4:	22bc      	movs	r2, #188	; 0xbc
 801aae6:	490e      	ldr	r1, [pc, #56]	; (801ab20 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv+0x48>)
 801aae8:	2038      	movs	r0, #56	; 0x38
 801aaea:	f7ef fd47 	bl	800a57c <_ZnwjPKci>
 801aaee:	4604      	mov	r4, r0
 801aaf0:	68b9      	ldr	r1, [r7, #8]
 801aaf2:	4620      	mov	r0, r4
 801aaf4:	f000 fed8 	bl	801b8a8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801aaf8:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801aafa:	68fb      	ldr	r3, [r7, #12]
 801aafc:	69db      	ldr	r3, [r3, #28]
 801aafe:	6979      	ldr	r1, [r7, #20]
 801ab00:	4618      	mov	r0, r3
 801ab02:	f004 fd67 	bl	801f5d4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801ab06:	697b      	ldr	r3, [r7, #20]
 801ab08:	681b      	ldr	r3, [r3, #0]
 801ab0a:	332c      	adds	r3, #44	; 0x2c
 801ab0c:	681b      	ldr	r3, [r3, #0]
 801ab0e:	6879      	ldr	r1, [r7, #4]
 801ab10:	6978      	ldr	r0, [r7, #20]
 801ab12:	4798      	blx	r3
    return *this;
 801ab14:	68fb      	ldr	r3, [r7, #12]
}
 801ab16:	4618      	mov	r0, r3
 801ab18:	371c      	adds	r7, #28
 801ab1a:	46bd      	mov	sp, r7
 801ab1c:	bd90      	pop	{r4, r7, pc}
 801ab1e:	bf00      	nop
 801ab20:	080260e4 	.word	0x080260e4

0801ab24 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:

MockExpectedCall& MockCheckedExpectedCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 801ab24:	b590      	push	{r4, r7, lr}
 801ab26:	b087      	sub	sp, #28
 801ab28:	af00      	add	r7, sp, #0
 801ab2a:	60f8      	str	r0, [r7, #12]
 801ab2c:	60b9      	str	r1, [r7, #8]
 801ab2e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801ab30:	22c4      	movs	r2, #196	; 0xc4
 801ab32:	490e      	ldr	r1, [pc, #56]	; (801ab6c <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv+0x48>)
 801ab34:	2038      	movs	r0, #56	; 0x38
 801ab36:	f7ef fd21 	bl	800a57c <_ZnwjPKci>
 801ab3a:	4604      	mov	r4, r0
 801ab3c:	68b9      	ldr	r1, [r7, #8]
 801ab3e:	4620      	mov	r0, r4
 801ab40:	f000 feb2 	bl	801b8a8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801ab44:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801ab46:	68fb      	ldr	r3, [r7, #12]
 801ab48:	69db      	ldr	r3, [r3, #28]
 801ab4a:	6979      	ldr	r1, [r7, #20]
 801ab4c:	4618      	mov	r0, r3
 801ab4e:	f004 fd41 	bl	801f5d4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801ab52:	697b      	ldr	r3, [r7, #20]
 801ab54:	681b      	ldr	r3, [r3, #0]
 801ab56:	3330      	adds	r3, #48	; 0x30
 801ab58:	681b      	ldr	r3, [r3, #0]
 801ab5a:	6879      	ldr	r1, [r7, #4]
 801ab5c:	6978      	ldr	r0, [r7, #20]
 801ab5e:	4798      	blx	r3
    return *this;
 801ab60:	68fb      	ldr	r3, [r7, #12]
}
 801ab62:	4618      	mov	r0, r3
 801ab64:	371c      	adds	r7, #28
 801ab66:	46bd      	mov	sp, r7
 801ab68:	bd90      	pop	{r4, r7, pc}
 801ab6a:	bf00      	nop
 801ab6c:	080260e4 	.word	0x080260e4

0801ab70 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 801ab70:	b590      	push	{r4, r7, lr}
 801ab72:	b087      	sub	sp, #28
 801ab74:	af00      	add	r7, sp, #0
 801ab76:	60f8      	str	r0, [r7, #12]
 801ab78:	60b9      	str	r1, [r7, #8]
 801ab7a:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801ab7c:	22cc      	movs	r2, #204	; 0xcc
 801ab7e:	490e      	ldr	r1, [pc, #56]	; (801abb8 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE+0x48>)
 801ab80:	2038      	movs	r0, #56	; 0x38
 801ab82:	f7ef fcfb 	bl	800a57c <_ZnwjPKci>
 801ab86:	4604      	mov	r4, r0
 801ab88:	68b9      	ldr	r1, [r7, #8]
 801ab8a:	4620      	mov	r0, r4
 801ab8c:	f000 fe8c 	bl	801b8a8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801ab90:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801ab92:	68fb      	ldr	r3, [r7, #12]
 801ab94:	69db      	ldr	r3, [r3, #28]
 801ab96:	6979      	ldr	r1, [r7, #20]
 801ab98:	4618      	mov	r0, r3
 801ab9a:	f004 fd1b 	bl	801f5d4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801ab9e:	697b      	ldr	r3, [r7, #20]
 801aba0:	681b      	ldr	r3, [r3, #0]
 801aba2:	3334      	adds	r3, #52	; 0x34
 801aba4:	681b      	ldr	r3, [r3, #0]
 801aba6:	6879      	ldr	r1, [r7, #4]
 801aba8:	6978      	ldr	r0, [r7, #20]
 801abaa:	4798      	blx	r3
    return *this;
 801abac:	68fb      	ldr	r3, [r7, #12]
}
 801abae:	4618      	mov	r0, r3
 801abb0:	371c      	adds	r7, #28
 801abb2:	46bd      	mov	sp, r7
 801abb4:	bd90      	pop	{r4, r7, pc}
 801abb6:	bf00      	nop
 801abb8:	080260e4 	.word	0x080260e4

0801abbc <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockExpectedCall& MockCheckedExpectedCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 801abbc:	b590      	push	{r4, r7, lr}
 801abbe:	b087      	sub	sp, #28
 801abc0:	af00      	add	r7, sp, #0
 801abc2:	60f8      	str	r0, [r7, #12]
 801abc4:	60b9      	str	r1, [r7, #8]
 801abc6:	607a      	str	r2, [r7, #4]
 801abc8:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801abca:	22d4      	movs	r2, #212	; 0xd4
 801abcc:	490e      	ldr	r1, [pc, #56]	; (801ac08 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj+0x4c>)
 801abce:	2038      	movs	r0, #56	; 0x38
 801abd0:	f7ef fcd4 	bl	800a57c <_ZnwjPKci>
 801abd4:	4604      	mov	r4, r0
 801abd6:	68b9      	ldr	r1, [r7, #8]
 801abd8:	4620      	mov	r0, r4
 801abda:	f000 fe65 	bl	801b8a8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801abde:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801abe0:	68fb      	ldr	r3, [r7, #12]
 801abe2:	69db      	ldr	r3, [r3, #28]
 801abe4:	6979      	ldr	r1, [r7, #20]
 801abe6:	4618      	mov	r0, r3
 801abe8:	f004 fcf4 	bl	801f5d4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setMemoryBuffer(value, size);
 801abec:	697b      	ldr	r3, [r7, #20]
 801abee:	681b      	ldr	r3, [r3, #0]
 801abf0:	333c      	adds	r3, #60	; 0x3c
 801abf2:	681b      	ldr	r3, [r3, #0]
 801abf4:	683a      	ldr	r2, [r7, #0]
 801abf6:	6879      	ldr	r1, [r7, #4]
 801abf8:	6978      	ldr	r0, [r7, #20]
 801abfa:	4798      	blx	r3
    return *this;
 801abfc:	68fb      	ldr	r3, [r7, #12]
}
 801abfe:	4618      	mov	r0, r3
 801ac00:	371c      	adds	r7, #28
 801ac02:	46bd      	mov	sp, r7
 801ac04:	bd90      	pop	{r4, r7, pc}
 801ac06:	bf00      	nop
 801ac08:	080260e4 	.word	0x080260e4

0801ac0c <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 801ac0c:	b590      	push	{r4, r7, lr}
 801ac0e:	b087      	sub	sp, #28
 801ac10:	af00      	add	r7, sp, #0
 801ac12:	60f8      	str	r0, [r7, #12]
 801ac14:	60b9      	str	r1, [r7, #8]
 801ac16:	607a      	str	r2, [r7, #4]
 801ac18:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801ac1a:	22dc      	movs	r2, #220	; 0xdc
 801ac1c:	490e      	ldr	r1, [pc, #56]	; (801ac58 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x4c>)
 801ac1e:	2038      	movs	r0, #56	; 0x38
 801ac20:	f7ef fcac 	bl	800a57c <_ZnwjPKci>
 801ac24:	4604      	mov	r4, r0
 801ac26:	6879      	ldr	r1, [r7, #4]
 801ac28:	4620      	mov	r0, r4
 801ac2a:	f000 fe3d 	bl	801b8a8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801ac2e:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801ac30:	68fb      	ldr	r3, [r7, #12]
 801ac32:	69db      	ldr	r3, [r3, #28]
 801ac34:	6979      	ldr	r1, [r7, #20]
 801ac36:	4618      	mov	r0, r3
 801ac38:	f004 fccc 	bl	801f5d4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 801ac3c:	697b      	ldr	r3, [r7, #20]
 801ac3e:	681b      	ldr	r3, [r3, #0]
 801ac40:	3340      	adds	r3, #64	; 0x40
 801ac42:	681b      	ldr	r3, [r3, #0]
 801ac44:	683a      	ldr	r2, [r7, #0]
 801ac46:	68b9      	ldr	r1, [r7, #8]
 801ac48:	6978      	ldr	r0, [r7, #20]
 801ac4a:	4798      	blx	r3
    return *this;
 801ac4c:	68fb      	ldr	r3, [r7, #12]
}
 801ac4e:	4618      	mov	r0, r3
 801ac50:	371c      	adds	r7, #28
 801ac52:	46bd      	mov	sp, r7
 801ac54:	bd90      	pop	{r4, r7, pc}
 801ac56:	bf00      	nop
 801ac58:	080260e4 	.word	0x080260e4

0801ac5c <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterReturning(const SimpleString& name, const void* value, size_t size)
{
 801ac5c:	b590      	push	{r4, r7, lr}
 801ac5e:	b087      	sub	sp, #28
 801ac60:	af00      	add	r7, sp, #0
 801ac62:	60f8      	str	r0, [r7, #12]
 801ac64:	60b9      	str	r1, [r7, #8]
 801ac66:	607a      	str	r2, [r7, #4]
 801ac68:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801ac6a:	22e4      	movs	r2, #228	; 0xe4
 801ac6c:	4911      	ldr	r1, [pc, #68]	; (801acb4 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj+0x58>)
 801ac6e:	2038      	movs	r0, #56	; 0x38
 801ac70:	f7ef fc84 	bl	800a57c <_ZnwjPKci>
 801ac74:	4604      	mov	r4, r0
 801ac76:	68b9      	ldr	r1, [r7, #8]
 801ac78:	4620      	mov	r0, r4
 801ac7a:	f000 fe15 	bl	801b8a8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801ac7e:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 801ac80:	68fb      	ldr	r3, [r7, #12]
 801ac82:	6a1b      	ldr	r3, [r3, #32]
 801ac84:	6979      	ldr	r1, [r7, #20]
 801ac86:	4618      	mov	r0, r3
 801ac88:	f004 fca4 	bl	801f5d4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801ac8c:	697b      	ldr	r3, [r7, #20]
 801ac8e:	681b      	ldr	r3, [r3, #0]
 801ac90:	3330      	adds	r3, #48	; 0x30
 801ac92:	681b      	ldr	r3, [r3, #0]
 801ac94:	6879      	ldr	r1, [r7, #4]
 801ac96:	6978      	ldr	r0, [r7, #20]
 801ac98:	4798      	blx	r3
    newParameter->setSize(size);
 801ac9a:	697b      	ldr	r3, [r7, #20]
 801ac9c:	681b      	ldr	r3, [r3, #0]
 801ac9e:	3348      	adds	r3, #72	; 0x48
 801aca0:	681b      	ldr	r3, [r3, #0]
 801aca2:	6839      	ldr	r1, [r7, #0]
 801aca4:	6978      	ldr	r0, [r7, #20]
 801aca6:	4798      	blx	r3
    return *this;
 801aca8:	68fb      	ldr	r3, [r7, #12]
}
 801acaa:	4618      	mov	r0, r3
 801acac:	371c      	adds	r7, #28
 801acae:	46bd      	mov	sp, r7
 801acb0:	bd90      	pop	{r4, r7, pc}
 801acb2:	bf00      	nop
 801acb4:	080260e4 	.word	0x080260e4

0801acb8 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterOfTypeReturning(const SimpleString& type, const SimpleString& name, const void* value)
{
 801acb8:	b590      	push	{r4, r7, lr}
 801acba:	b087      	sub	sp, #28
 801acbc:	af00      	add	r7, sp, #0
 801acbe:	60f8      	str	r0, [r7, #12]
 801acc0:	60b9      	str	r1, [r7, #8]
 801acc2:	607a      	str	r2, [r7, #4]
 801acc4:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801acc6:	22ed      	movs	r2, #237	; 0xed
 801acc8:	490e      	ldr	r1, [pc, #56]	; (801ad04 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv+0x4c>)
 801acca:	2038      	movs	r0, #56	; 0x38
 801accc:	f7ef fc56 	bl	800a57c <_ZnwjPKci>
 801acd0:	4604      	mov	r4, r0
 801acd2:	6879      	ldr	r1, [r7, #4]
 801acd4:	4620      	mov	r0, r4
 801acd6:	f000 fde7 	bl	801b8a8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801acda:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 801acdc:	68fb      	ldr	r3, [r7, #12]
 801acde:	6a1b      	ldr	r3, [r3, #32]
 801ace0:	6979      	ldr	r1, [r7, #20]
 801ace2:	4618      	mov	r0, r3
 801ace4:	f004 fc76 	bl	801f5d4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 801ace8:	697b      	ldr	r3, [r7, #20]
 801acea:	681b      	ldr	r3, [r3, #0]
 801acec:	3340      	adds	r3, #64	; 0x40
 801acee:	681b      	ldr	r3, [r3, #0]
 801acf0:	683a      	ldr	r2, [r7, #0]
 801acf2:	68b9      	ldr	r1, [r7, #8]
 801acf4:	6978      	ldr	r0, [r7, #20]
 801acf6:	4798      	blx	r3
    return *this;
 801acf8:	68fb      	ldr	r3, [r7, #12]
}
 801acfa:	4618      	mov	r0, r3
 801acfc:	371c      	adds	r7, #28
 801acfe:	46bd      	mov	sp, r7
 801ad00:	bd90      	pop	{r4, r7, pc}
 801ad02:	bf00      	nop
 801ad04:	080260e4 	.word	0x080260e4

0801ad08 <_ZN23MockCheckedExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withUnmodifiedOutputParameter(const SimpleString& name)
{
 801ad08:	b590      	push	{r4, r7, lr}
 801ad0a:	b083      	sub	sp, #12
 801ad0c:	af00      	add	r7, sp, #0
 801ad0e:	6078      	str	r0, [r7, #4]
 801ad10:	6039      	str	r1, [r7, #0]
    return withOutputParameterReturning(name, NULLPTR, 0);
 801ad12:	687b      	ldr	r3, [r7, #4]
 801ad14:	681b      	ldr	r3, [r3, #0]
 801ad16:	3318      	adds	r3, #24
 801ad18:	681c      	ldr	r4, [r3, #0]
 801ad1a:	2300      	movs	r3, #0
 801ad1c:	2200      	movs	r2, #0
 801ad1e:	6839      	ldr	r1, [r7, #0]
 801ad20:	6878      	ldr	r0, [r7, #4]
 801ad22:	47a0      	blx	r4
 801ad24:	4603      	mov	r3, r0
}
 801ad26:	4618      	mov	r0, r3
 801ad28:	370c      	adds	r7, #12
 801ad2a:	46bd      	mov	sp, r7
 801ad2c:	bd90      	pop	{r4, r7, pc}
	...

0801ad30 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterType(const SimpleString& name)
{
 801ad30:	b580      	push	{r7, lr}
 801ad32:	b086      	sub	sp, #24
 801ad34:	af00      	add	r7, sp, #0
 801ad36:	60f8      	str	r0, [r7, #12]
 801ad38:	60b9      	str	r1, [r7, #8]
 801ad3a:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801ad3c:	68bb      	ldr	r3, [r7, #8]
 801ad3e:	69db      	ldr	r3, [r3, #28]
 801ad40:	6879      	ldr	r1, [r7, #4]
 801ad42:	4618      	mov	r0, r3
 801ad44:	f004 fc7c 	bl	801f640 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801ad48:	6178      	str	r0, [r7, #20]
    return (p) ? p->getType() : StringFrom("");
 801ad4a:	697b      	ldr	r3, [r7, #20]
 801ad4c:	2b00      	cmp	r3, #0
 801ad4e:	d008      	beq.n	801ad62 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x32>
 801ad50:	697b      	ldr	r3, [r7, #20]
 801ad52:	681b      	ldr	r3, [r3, #0]
 801ad54:	3360      	adds	r3, #96	; 0x60
 801ad56:	681b      	ldr	r3, [r3, #0]
 801ad58:	68fa      	ldr	r2, [r7, #12]
 801ad5a:	6979      	ldr	r1, [r7, #20]
 801ad5c:	4610      	mov	r0, r2
 801ad5e:	4798      	blx	r3
 801ad60:	e004      	b.n	801ad6c <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x3c>
 801ad62:	68fb      	ldr	r3, [r7, #12]
 801ad64:	4903      	ldr	r1, [pc, #12]	; (801ad74 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x44>)
 801ad66:	4618      	mov	r0, r3
 801ad68:	f7f2 fe10 	bl	800d98c <_Z10StringFromPKc>
}
 801ad6c:	68f8      	ldr	r0, [r7, #12]
 801ad6e:	3718      	adds	r7, #24
 801ad70:	46bd      	mov	sp, r7
 801ad72:	bd80      	pop	{r7, pc}
 801ad74:	080260e0 	.word	0x080260e0

0801ad78 <_ZN23MockCheckedExpectedCall25hasInputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasInputParameterWithName(const SimpleString& name)
{
 801ad78:	b580      	push	{r7, lr}
 801ad7a:	b084      	sub	sp, #16
 801ad7c:	af00      	add	r7, sp, #0
 801ad7e:	6078      	str	r0, [r7, #4]
 801ad80:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801ad82:	687b      	ldr	r3, [r7, #4]
 801ad84:	69db      	ldr	r3, [r3, #28]
 801ad86:	6839      	ldr	r1, [r7, #0]
 801ad88:	4618      	mov	r0, r3
 801ad8a:	f004 fc59 	bl	801f640 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801ad8e:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 801ad90:	68fb      	ldr	r3, [r7, #12]
 801ad92:	2b00      	cmp	r3, #0
 801ad94:	bf14      	ite	ne
 801ad96:	2301      	movne	r3, #1
 801ad98:	2300      	moveq	r3, #0
 801ad9a:	b2db      	uxtb	r3, r3
}
 801ad9c:	4618      	mov	r0, r3
 801ad9e:	3710      	adds	r7, #16
 801ada0:	46bd      	mov	sp, r7
 801ada2:	bd80      	pop	{r7, pc}

0801ada4 <_ZN23MockCheckedExpectedCall26hasOutputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasOutputParameterWithName(const SimpleString& name)
{
 801ada4:	b580      	push	{r7, lr}
 801ada6:	b084      	sub	sp, #16
 801ada8:	af00      	add	r7, sp, #0
 801adaa:	6078      	str	r0, [r7, #4]
 801adac:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 801adae:	687b      	ldr	r3, [r7, #4]
 801adb0:	6a1b      	ldr	r3, [r3, #32]
 801adb2:	6839      	ldr	r1, [r7, #0]
 801adb4:	4618      	mov	r0, r3
 801adb6:	f004 fc43 	bl	801f640 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801adba:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 801adbc:	68fb      	ldr	r3, [r7, #12]
 801adbe:	2b00      	cmp	r3, #0
 801adc0:	bf14      	ite	ne
 801adc2:	2301      	movne	r3, #1
 801adc4:	2300      	moveq	r3, #0
 801adc6:	b2db      	uxtb	r3, r3
}
 801adc8:	4618      	mov	r0, r3
 801adca:	3710      	adds	r7, #16
 801adcc:	46bd      	mov	sp, r7
 801adce:	bd80      	pop	{r7, pc}

0801add0 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getInputParameter(const SimpleString& name)
{
 801add0:	b590      	push	{r4, r7, lr}
 801add2:	b089      	sub	sp, #36	; 0x24
 801add4:	af00      	add	r7, sp, #0
 801add6:	60f8      	str	r0, [r7, #12]
 801add8:	60b9      	str	r1, [r7, #8]
 801adda:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801addc:	68bb      	ldr	r3, [r7, #8]
 801adde:	69db      	ldr	r3, [r3, #28]
 801ade0:	6879      	ldr	r1, [r7, #4]
 801ade2:	4618      	mov	r0, r3
 801ade4:	f004 fc2c 	bl	801f640 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801ade8:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 801adea:	2400      	movs	r4, #0
 801adec:	69fb      	ldr	r3, [r7, #28]
 801adee:	2b00      	cmp	r3, #0
 801adf0:	d004      	beq.n	801adfc <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x2c>
 801adf2:	69f9      	ldr	r1, [r7, #28]
 801adf4:	68f8      	ldr	r0, [r7, #12]
 801adf6:	f7f0 f829 	bl	800ae4c <_ZN14MockNamedValueC1ERKS_>
 801adfa:	e00c      	b.n	801ae16 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x46>
 801adfc:	f107 0314 	add.w	r3, r7, #20
 801ae00:	490a      	ldr	r1, [pc, #40]	; (801ae2c <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x5c>)
 801ae02:	4618      	mov	r0, r3
 801ae04:	f7f1 ff7d 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801ae08:	2401      	movs	r4, #1
 801ae0a:	f107 0314 	add.w	r3, r7, #20
 801ae0e:	4619      	mov	r1, r3
 801ae10:	68f8      	ldr	r0, [r7, #12]
 801ae12:	f002 fc9b 	bl	801d74c <_ZN14MockNamedValueC1ERK12SimpleString>
 801ae16:	2c00      	cmp	r4, #0
 801ae18:	d004      	beq.n	801ae24 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x54>
 801ae1a:	f107 0314 	add.w	r3, r7, #20
 801ae1e:	4618      	mov	r0, r3
 801ae20:	f7f2 fb27 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 801ae24:	68f8      	ldr	r0, [r7, #12]
 801ae26:	3724      	adds	r7, #36	; 0x24
 801ae28:	46bd      	mov	sp, r7
 801ae2a:	bd90      	pop	{r4, r7, pc}
 801ae2c:	080260e0 	.word	0x080260e0

0801ae30 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getOutputParameter(const SimpleString& name)
{
 801ae30:	b590      	push	{r4, r7, lr}
 801ae32:	b089      	sub	sp, #36	; 0x24
 801ae34:	af00      	add	r7, sp, #0
 801ae36:	60f8      	str	r0, [r7, #12]
 801ae38:	60b9      	str	r1, [r7, #8]
 801ae3a:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 801ae3c:	68bb      	ldr	r3, [r7, #8]
 801ae3e:	6a1b      	ldr	r3, [r3, #32]
 801ae40:	6879      	ldr	r1, [r7, #4]
 801ae42:	4618      	mov	r0, r3
 801ae44:	f004 fbfc 	bl	801f640 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801ae48:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 801ae4a:	2400      	movs	r4, #0
 801ae4c:	69fb      	ldr	r3, [r7, #28]
 801ae4e:	2b00      	cmp	r3, #0
 801ae50:	d004      	beq.n	801ae5c <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x2c>
 801ae52:	69f9      	ldr	r1, [r7, #28]
 801ae54:	68f8      	ldr	r0, [r7, #12]
 801ae56:	f7ef fff9 	bl	800ae4c <_ZN14MockNamedValueC1ERKS_>
 801ae5a:	e00c      	b.n	801ae76 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x46>
 801ae5c:	f107 0314 	add.w	r3, r7, #20
 801ae60:	490a      	ldr	r1, [pc, #40]	; (801ae8c <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x5c>)
 801ae62:	4618      	mov	r0, r3
 801ae64:	f7f1 ff4d 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801ae68:	2401      	movs	r4, #1
 801ae6a:	f107 0314 	add.w	r3, r7, #20
 801ae6e:	4619      	mov	r1, r3
 801ae70:	68f8      	ldr	r0, [r7, #12]
 801ae72:	f002 fc6b 	bl	801d74c <_ZN14MockNamedValueC1ERK12SimpleString>
 801ae76:	2c00      	cmp	r4, #0
 801ae78:	d004      	beq.n	801ae84 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x54>
 801ae7a:	f107 0314 	add.w	r3, r7, #20
 801ae7e:	4618      	mov	r0, r3
 801ae80:	f7f2 faf7 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 801ae84:	68f8      	ldr	r0, [r7, #12]
 801ae86:	3724      	adds	r7, #36	; 0x24
 801ae88:	46bd      	mov	sp, r7
 801ae8a:	bd90      	pop	{r4, r7, pc}
 801ae8c:	080260e0 	.word	0x080260e0

0801ae90 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv>:

bool MockCheckedExpectedCall::areParametersMatchingActualCall()
{
 801ae90:	b580      	push	{r7, lr}
 801ae92:	b084      	sub	sp, #16
 801ae94:	af00      	add	r7, sp, #0
 801ae96:	6078      	str	r0, [r7, #4]
    MockNamedValueListNode* p;
    for (p = inputParameters_->begin(); p; p = p->next())
 801ae98:	687b      	ldr	r3, [r7, #4]
 801ae9a:	69db      	ldr	r3, [r3, #28]
 801ae9c:	4618      	mov	r0, r3
 801ae9e:	f004 fbfe 	bl	801f69e <_ZN18MockNamedValueList5beginEv>
 801aea2:	60f8      	str	r0, [r7, #12]
 801aea4:	68fb      	ldr	r3, [r7, #12]
 801aea6:	2b00      	cmp	r3, #0
 801aea8:	d014      	beq.n	801aed4 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x44>
        if (! item(p)->isMatchingActualCall())
 801aeaa:	68f9      	ldr	r1, [r7, #12]
 801aeac:	6878      	ldr	r0, [r7, #4]
 801aeae:	f000 fced 	bl	801b88c <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801aeb2:	4603      	mov	r3, r0
 801aeb4:	4618      	mov	r0, r3
 801aeb6:	f000 fd1f 	bl	801b8f8 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801aeba:	4603      	mov	r3, r0
 801aebc:	f083 0301 	eor.w	r3, r3, #1
 801aec0:	b2db      	uxtb	r3, r3
 801aec2:	2b00      	cmp	r3, #0
 801aec4:	d001      	beq.n	801aeca <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x3a>
            return false;
 801aec6:	2300      	movs	r3, #0
 801aec8:	e023      	b.n	801af12 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = inputParameters_->begin(); p; p = p->next())
 801aeca:	68f8      	ldr	r0, [r7, #12]
 801aecc:	f004 faf0 	bl	801f4b0 <_ZN22MockNamedValueListNode4nextEv>
 801aed0:	60f8      	str	r0, [r7, #12]
 801aed2:	e7e7      	b.n	801aea4 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x14>
    for (p = outputParameters_->begin(); p; p = p->next())
 801aed4:	687b      	ldr	r3, [r7, #4]
 801aed6:	6a1b      	ldr	r3, [r3, #32]
 801aed8:	4618      	mov	r0, r3
 801aeda:	f004 fbe0 	bl	801f69e <_ZN18MockNamedValueList5beginEv>
 801aede:	60f8      	str	r0, [r7, #12]
 801aee0:	68fb      	ldr	r3, [r7, #12]
 801aee2:	2b00      	cmp	r3, #0
 801aee4:	d014      	beq.n	801af10 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x80>
        if (! item(p)->isMatchingActualCall())
 801aee6:	68f9      	ldr	r1, [r7, #12]
 801aee8:	6878      	ldr	r0, [r7, #4]
 801aeea:	f000 fccf 	bl	801b88c <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801aeee:	4603      	mov	r3, r0
 801aef0:	4618      	mov	r0, r3
 801aef2:	f000 fd01 	bl	801b8f8 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801aef6:	4603      	mov	r3, r0
 801aef8:	f083 0301 	eor.w	r3, r3, #1
 801aefc:	b2db      	uxtb	r3, r3
 801aefe:	2b00      	cmp	r3, #0
 801af00:	d001      	beq.n	801af06 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x76>
            return false;
 801af02:	2300      	movs	r3, #0
 801af04:	e005      	b.n	801af12 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = outputParameters_->begin(); p; p = p->next())
 801af06:	68f8      	ldr	r0, [r7, #12]
 801af08:	f004 fad2 	bl	801f4b0 <_ZN22MockNamedValueListNode4nextEv>
 801af0c:	60f8      	str	r0, [r7, #12]
 801af0e:	e7e7      	b.n	801aee0 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x50>
    return true;
 801af10:	2301      	movs	r3, #1
}
 801af12:	4618      	mov	r0, r3
 801af14:	3710      	adds	r7, #16
 801af16:	46bd      	mov	sp, r7
 801af18:	bd80      	pop	{r7, pc}

0801af1a <_ZN23MockCheckedExpectedCall21ignoreOtherParametersEv>:

MockExpectedCall& MockCheckedExpectedCall::ignoreOtherParameters()
{
 801af1a:	b480      	push	{r7}
 801af1c:	b083      	sub	sp, #12
 801af1e:	af00      	add	r7, sp, #0
 801af20:	6078      	str	r0, [r7, #4]
    ignoreOtherParameters_ = true;
 801af22:	687b      	ldr	r3, [r7, #4]
 801af24:	2201      	movs	r2, #1
 801af26:	731a      	strb	r2, [r3, #12]
    return *this;
 801af28:	687b      	ldr	r3, [r7, #4]
}
 801af2a:	4618      	mov	r0, r3
 801af2c:	370c      	adds	r7, #12
 801af2e:	46bd      	mov	sp, r7
 801af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af34:	4770      	bx	lr

0801af36 <_ZN23MockCheckedExpectedCall11isFulfilledEv>:

bool MockCheckedExpectedCall::isFulfilled()
{
 801af36:	b480      	push	{r7}
 801af38:	b083      	sub	sp, #12
 801af3a:	af00      	add	r7, sp, #0
 801af3c:	6078      	str	r0, [r7, #4]
    return (actualCalls_ == expectedCalls_);
 801af3e:	687b      	ldr	r3, [r7, #4]
 801af40:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801af46:	429a      	cmp	r2, r3
 801af48:	bf0c      	ite	eq
 801af4a:	2301      	moveq	r3, #1
 801af4c:	2300      	movne	r3, #0
 801af4e:	b2db      	uxtb	r3, r3
}
 801af50:	4618      	mov	r0, r3
 801af52:	370c      	adds	r7, #12
 801af54:	46bd      	mov	sp, r7
 801af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af5a:	4770      	bx	lr

0801af5c <_ZN23MockCheckedExpectedCall19canMatchActualCallsEv>:

bool MockCheckedExpectedCall::canMatchActualCalls()
{
 801af5c:	b480      	push	{r7}
 801af5e:	b083      	sub	sp, #12
 801af60:	af00      	add	r7, sp, #0
 801af62:	6078      	str	r0, [r7, #4]
    return (actualCalls_ < expectedCalls_);
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801af68:	687b      	ldr	r3, [r7, #4]
 801af6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801af6c:	429a      	cmp	r2, r3
 801af6e:	bf34      	ite	cc
 801af70:	2301      	movcc	r3, #1
 801af72:	2300      	movcs	r3, #0
 801af74:	b2db      	uxtb	r3, r3
}
 801af76:	4618      	mov	r0, r3
 801af78:	370c      	adds	r7, #12
 801af7a:	46bd      	mov	sp, r7
 801af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af80:	4770      	bx	lr

0801af82 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv>:

bool MockCheckedExpectedCall::isMatchingActualCallAndFinalized()
{
 801af82:	b580      	push	{r7, lr}
 801af84:	b082      	sub	sp, #8
 801af86:	af00      	add	r7, sp, #0
 801af88:	6078      	str	r0, [r7, #4]
    return isMatchingActualCall() && (!ignoreOtherParameters_ || isActualCallMatchFinalized_);
 801af8a:	687b      	ldr	r3, [r7, #4]
 801af8c:	681b      	ldr	r3, [r3, #0]
 801af8e:	33cc      	adds	r3, #204	; 0xcc
 801af90:	681b      	ldr	r3, [r3, #0]
 801af92:	6878      	ldr	r0, [r7, #4]
 801af94:	4798      	blx	r3
 801af96:	4603      	mov	r3, r0
 801af98:	2b00      	cmp	r3, #0
 801af9a:	d00c      	beq.n	801afb6 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801af9c:	687b      	ldr	r3, [r7, #4]
 801af9e:	7b1b      	ldrb	r3, [r3, #12]
 801afa0:	f083 0301 	eor.w	r3, r3, #1
 801afa4:	b2db      	uxtb	r3, r3
 801afa6:	2b00      	cmp	r3, #0
 801afa8:	d103      	bne.n	801afb2 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x30>
 801afaa:	687b      	ldr	r3, [r7, #4]
 801afac:	7b5b      	ldrb	r3, [r3, #13]
 801afae:	2b00      	cmp	r3, #0
 801afb0:	d001      	beq.n	801afb6 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801afb2:	2301      	movs	r3, #1
 801afb4:	e000      	b.n	801afb8 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x36>
 801afb6:	2300      	movs	r3, #0
}
 801afb8:	4618      	mov	r0, r3
 801afba:	3708      	adds	r7, #8
 801afbc:	46bd      	mov	sp, r7
 801afbe:	bd80      	pop	{r7, pc}

0801afc0 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::isMatchingActualCall()
{
 801afc0:	b580      	push	{r7, lr}
 801afc2:	b082      	sub	sp, #8
 801afc4:	af00      	add	r7, sp, #0
 801afc6:	6078      	str	r0, [r7, #4]
    return areParametersMatchingActualCall() && wasPassedToObject_;
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	681b      	ldr	r3, [r3, #0]
 801afcc:	33d0      	adds	r3, #208	; 0xd0
 801afce:	681b      	ldr	r3, [r3, #0]
 801afd0:	6878      	ldr	r0, [r7, #4]
 801afd2:	4798      	blx	r3
 801afd4:	4603      	mov	r3, r0
 801afd6:	2b00      	cmp	r3, #0
 801afd8:	d006      	beq.n	801afe8 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 801afda:	687b      	ldr	r3, [r7, #4]
 801afdc:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 801afe0:	2b00      	cmp	r3, #0
 801afe2:	d001      	beq.n	801afe8 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 801afe4:	2301      	movs	r3, #1
 801afe6:	e000      	b.n	801afea <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x2a>
 801afe8:	2300      	movs	r3, #0
}
 801afea:	4618      	mov	r0, r3
 801afec:	3708      	adds	r7, #8
 801afee:	46bd      	mov	sp, r7
 801aff0:	bd80      	pop	{r7, pc}

0801aff2 <_ZN23MockCheckedExpectedCall11callWasMadeEj>:

void MockCheckedExpectedCall::callWasMade(unsigned int callOrder)
{
 801aff2:	b580      	push	{r7, lr}
 801aff4:	b082      	sub	sp, #8
 801aff6:	af00      	add	r7, sp, #0
 801aff8:	6078      	str	r0, [r7, #4]
 801affa:	6039      	str	r1, [r7, #0]
    actualCalls_++;
 801affc:	687b      	ldr	r3, [r7, #4]
 801affe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b000:	1c5a      	adds	r2, r3, #1
 801b002:	687b      	ldr	r3, [r7, #4]
 801b004:	669a      	str	r2, [r3, #104]	; 0x68

    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801b006:	687b      	ldr	r3, [r7, #4]
 801b008:	691b      	ldr	r3, [r3, #16]
 801b00a:	2b00      	cmp	r3, #0
 801b00c:	d00c      	beq.n	801b028 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 801b00e:	687b      	ldr	r3, [r7, #4]
 801b010:	691b      	ldr	r3, [r3, #16]
    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801b012:	683a      	ldr	r2, [r7, #0]
 801b014:	429a      	cmp	r2, r3
 801b016:	d304      	bcc.n	801b022 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x30>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 801b018:	687b      	ldr	r3, [r7, #4]
 801b01a:	695b      	ldr	r3, [r3, #20]
 801b01c:	683a      	ldr	r2, [r7, #0]
 801b01e:	429a      	cmp	r2, r3
 801b020:	d902      	bls.n	801b028 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
        outOfOrder_ = true;
 801b022:	687b      	ldr	r3, [r7, #4]
 801b024:	2201      	movs	r2, #1
 801b026:	761a      	strb	r2, [r3, #24]
    }

    resetActualCallMatchingState();
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	681b      	ldr	r3, [r3, #0]
 801b02c:	33ec      	adds	r3, #236	; 0xec
 801b02e:	681b      	ldr	r3, [r3, #0]
 801b030:	6878      	ldr	r0, [r7, #4]
 801b032:	4798      	blx	r3
}
 801b034:	bf00      	nop
 801b036:	3708      	adds	r7, #8
 801b038:	46bd      	mov	sp, r7
 801b03a:	bd80      	pop	{r7, pc}

0801b03c <_ZN23MockCheckedExpectedCall23finalizeActualCallMatchEv>:

void MockCheckedExpectedCall::finalizeActualCallMatch()
{
 801b03c:	b480      	push	{r7}
 801b03e:	b083      	sub	sp, #12
 801b040:	af00      	add	r7, sp, #0
 801b042:	6078      	str	r0, [r7, #4]
    isActualCallMatchFinalized_ = true;
 801b044:	687b      	ldr	r3, [r7, #4]
 801b046:	2201      	movs	r2, #1
 801b048:	735a      	strb	r2, [r3, #13]
}
 801b04a:	bf00      	nop
 801b04c:	370c      	adds	r7, #12
 801b04e:	46bd      	mov	sp, r7
 801b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b054:	4770      	bx	lr

0801b056 <_ZN23MockCheckedExpectedCall17wasPassedToObjectEv>:


void MockCheckedExpectedCall::wasPassedToObject()
{
 801b056:	b480      	push	{r7}
 801b058:	b083      	sub	sp, #12
 801b05a:	af00      	add	r7, sp, #0
 801b05c:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = true;
 801b05e:	687b      	ldr	r3, [r7, #4]
 801b060:	2201      	movs	r2, #1
 801b062:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
}
 801b066:	bf00      	nop
 801b068:	370c      	adds	r7, #12
 801b06a:	46bd      	mov	sp, r7
 801b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b070:	4770      	bx	lr

0801b072 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv>:

void MockCheckedExpectedCall::resetActualCallMatchingState()
{
 801b072:	b580      	push	{r7, lr}
 801b074:	b084      	sub	sp, #16
 801b076:	af00      	add	r7, sp, #0
 801b078:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = !isSpecificObjectExpected_;
 801b07a:	687b      	ldr	r3, [r7, #4]
 801b07c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801b080:	f083 0301 	eor.w	r3, r3, #1
 801b084:	b2da      	uxtb	r2, r3
 801b086:	687b      	ldr	r3, [r7, #4]
 801b088:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    isActualCallMatchFinalized_ = false;
 801b08c:	687b      	ldr	r3, [r7, #4]
 801b08e:	2200      	movs	r2, #0
 801b090:	735a      	strb	r2, [r3, #13]

    MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next())
 801b092:	687b      	ldr	r3, [r7, #4]
 801b094:	69db      	ldr	r3, [r3, #28]
 801b096:	4618      	mov	r0, r3
 801b098:	f004 fb01 	bl	801f69e <_ZN18MockNamedValueList5beginEv>
 801b09c:	60f8      	str	r0, [r7, #12]
 801b09e:	68fb      	ldr	r3, [r7, #12]
 801b0a0:	2b00      	cmp	r3, #0
 801b0a2:	d00d      	beq.n	801b0c0 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x4e>
        item(p)->setMatchesActualCall(false);
 801b0a4:	68f9      	ldr	r1, [r7, #12]
 801b0a6:	6878      	ldr	r0, [r7, #4]
 801b0a8:	f000 fbf0 	bl	801b88c <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801b0ac:	4603      	mov	r3, r0
 801b0ae:	2100      	movs	r1, #0
 801b0b0:	4618      	mov	r0, r3
 801b0b2:	f000 fc11 	bl	801b8d8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = inputParameters_->begin(); p; p = p->next())
 801b0b6:	68f8      	ldr	r0, [r7, #12]
 801b0b8:	f004 f9fa 	bl	801f4b0 <_ZN22MockNamedValueListNode4nextEv>
 801b0bc:	60f8      	str	r0, [r7, #12]
 801b0be:	e7ee      	b.n	801b09e <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x2c>
    for (p = outputParameters_->begin(); p; p = p->next())
 801b0c0:	687b      	ldr	r3, [r7, #4]
 801b0c2:	6a1b      	ldr	r3, [r3, #32]
 801b0c4:	4618      	mov	r0, r3
 801b0c6:	f004 faea 	bl	801f69e <_ZN18MockNamedValueList5beginEv>
 801b0ca:	60f8      	str	r0, [r7, #12]
 801b0cc:	68fb      	ldr	r3, [r7, #12]
 801b0ce:	2b00      	cmp	r3, #0
 801b0d0:	d00d      	beq.n	801b0ee <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x7c>
        item(p)->setMatchesActualCall(false);
 801b0d2:	68f9      	ldr	r1, [r7, #12]
 801b0d4:	6878      	ldr	r0, [r7, #4]
 801b0d6:	f000 fbd9 	bl	801b88c <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801b0da:	4603      	mov	r3, r0
 801b0dc:	2100      	movs	r1, #0
 801b0de:	4618      	mov	r0, r3
 801b0e0:	f000 fbfa 	bl	801b8d8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = outputParameters_->begin(); p; p = p->next())
 801b0e4:	68f8      	ldr	r0, [r7, #12]
 801b0e6:	f004 f9e3 	bl	801f4b0 <_ZN22MockNamedValueListNode4nextEv>
 801b0ea:	60f8      	str	r0, [r7, #12]
 801b0ec:	e7ee      	b.n	801b0cc <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x5a>
}
 801b0ee:	bf00      	nop
 801b0f0:	3710      	adds	r7, #16
 801b0f2:	46bd      	mov	sp, r7
 801b0f4:	bd80      	pop	{r7, pc}

0801b0f6 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::inputParameterWasPassed(const SimpleString& name)
{
 801b0f6:	b590      	push	{r4, r7, lr}
 801b0f8:	b087      	sub	sp, #28
 801b0fa:	af00      	add	r7, sp, #0
 801b0fc:	6078      	str	r0, [r7, #4]
 801b0fe:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	69db      	ldr	r3, [r3, #28]
 801b104:	4618      	mov	r0, r3
 801b106:	f004 faca 	bl	801f69e <_ZN18MockNamedValueList5beginEv>
 801b10a:	6178      	str	r0, [r7, #20]
 801b10c:	697b      	ldr	r3, [r7, #20]
 801b10e:	2b00      	cmp	r3, #0
 801b110:	d022      	beq.n	801b158 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801b112:	f107 030c 	add.w	r3, r7, #12
 801b116:	6979      	ldr	r1, [r7, #20]
 801b118:	4618      	mov	r0, r3
 801b11a:	f004 fa04 	bl	801f526 <_ZNK22MockNamedValueListNode7getNameEv>
 801b11e:	f107 030c 	add.w	r3, r7, #12
 801b122:	6839      	ldr	r1, [r7, #0]
 801b124:	4618      	mov	r0, r3
 801b126:	f7f2 f9b0 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801b12a:	4603      	mov	r3, r0
 801b12c:	461c      	mov	r4, r3
 801b12e:	f107 030c 	add.w	r3, r7, #12
 801b132:	4618      	mov	r0, r3
 801b134:	f7f2 f99d 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801b138:	2c00      	cmp	r4, #0
 801b13a:	d008      	beq.n	801b14e <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 801b13c:	6979      	ldr	r1, [r7, #20]
 801b13e:	6878      	ldr	r0, [r7, #4]
 801b140:	f000 fba4 	bl	801b88c <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801b144:	4603      	mov	r3, r0
 801b146:	2101      	movs	r1, #1
 801b148:	4618      	mov	r0, r3
 801b14a:	f000 fbc5 	bl	801b8d8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 801b14e:	6978      	ldr	r0, [r7, #20]
 801b150:	f004 f9ae 	bl	801f4b0 <_ZN22MockNamedValueListNode4nextEv>
 801b154:	6178      	str	r0, [r7, #20]
 801b156:	e7d9      	b.n	801b10c <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801b158:	bf00      	nop
 801b15a:	371c      	adds	r7, #28
 801b15c:	46bd      	mov	sp, r7
 801b15e:	bd90      	pop	{r4, r7, pc}

0801b160 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::outputParameterWasPassed(const SimpleString& name)
{
 801b160:	b590      	push	{r4, r7, lr}
 801b162:	b087      	sub	sp, #28
 801b164:	af00      	add	r7, sp, #0
 801b166:	6078      	str	r0, [r7, #4]
 801b168:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 801b16a:	687b      	ldr	r3, [r7, #4]
 801b16c:	6a1b      	ldr	r3, [r3, #32]
 801b16e:	4618      	mov	r0, r3
 801b170:	f004 fa95 	bl	801f69e <_ZN18MockNamedValueList5beginEv>
 801b174:	6178      	str	r0, [r7, #20]
 801b176:	697b      	ldr	r3, [r7, #20]
 801b178:	2b00      	cmp	r3, #0
 801b17a:	d022      	beq.n	801b1c2 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801b17c:	f107 030c 	add.w	r3, r7, #12
 801b180:	6979      	ldr	r1, [r7, #20]
 801b182:	4618      	mov	r0, r3
 801b184:	f004 f9cf 	bl	801f526 <_ZNK22MockNamedValueListNode7getNameEv>
 801b188:	f107 030c 	add.w	r3, r7, #12
 801b18c:	6839      	ldr	r1, [r7, #0]
 801b18e:	4618      	mov	r0, r3
 801b190:	f7f2 f97b 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801b194:	4603      	mov	r3, r0
 801b196:	461c      	mov	r4, r3
 801b198:	f107 030c 	add.w	r3, r7, #12
 801b19c:	4618      	mov	r0, r3
 801b19e:	f7f2 f968 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801b1a2:	2c00      	cmp	r4, #0
 801b1a4:	d008      	beq.n	801b1b8 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 801b1a6:	6979      	ldr	r1, [r7, #20]
 801b1a8:	6878      	ldr	r0, [r7, #4]
 801b1aa:	f000 fb6f 	bl	801b88c <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801b1ae:	4603      	mov	r3, r0
 801b1b0:	2101      	movs	r1, #1
 801b1b2:	4618      	mov	r0, r3
 801b1b4:	f000 fb90 	bl	801b8d8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 801b1b8:	6978      	ldr	r0, [r7, #20]
 801b1ba:	f004 f979 	bl	801f4b0 <_ZN22MockNamedValueListNode4nextEv>
 801b1be:	6178      	str	r0, [r7, #20]
 801b1c0:	e7d9      	b.n	801b176 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801b1c2:	bf00      	nop
 801b1c4:	371c      	adds	r7, #28
 801b1c6:	46bd      	mov	sp, r7
 801b1c8:	bd90      	pop	{r4, r7, pc}
	...

0801b1cc <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterValueString(const SimpleString& name)
{
 801b1cc:	b580      	push	{r7, lr}
 801b1ce:	b086      	sub	sp, #24
 801b1d0:	af00      	add	r7, sp, #0
 801b1d2:	60f8      	str	r0, [r7, #12]
 801b1d4:	60b9      	str	r1, [r7, #8]
 801b1d6:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801b1d8:	68bb      	ldr	r3, [r7, #8]
 801b1da:	69db      	ldr	r3, [r3, #28]
 801b1dc:	6879      	ldr	r1, [r7, #4]
 801b1de:	4618      	mov	r0, r3
 801b1e0:	f004 fa2e 	bl	801f640 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801b1e4:	6178      	str	r0, [r7, #20]
    return (p) ? StringFrom(*p) : "failed";
 801b1e6:	697b      	ldr	r3, [r7, #20]
 801b1e8:	2b00      	cmp	r3, #0
 801b1ea:	d005      	beq.n	801b1f8 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x2c>
 801b1ec:	68fb      	ldr	r3, [r7, #12]
 801b1ee:	6979      	ldr	r1, [r7, #20]
 801b1f0:	4618      	mov	r0, r3
 801b1f2:	f7ff fa0b 	bl	801a60c <_Z10StringFromRK14MockNamedValue>
 801b1f6:	e003      	b.n	801b200 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x34>
 801b1f8:	4903      	ldr	r1, [pc, #12]	; (801b208 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x3c>)
 801b1fa:	68f8      	ldr	r0, [r7, #12]
 801b1fc:	f7f1 fd81 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
}
 801b200:	68f8      	ldr	r0, [r7, #12]
 801b202:	3718      	adds	r7, #24
 801b204:	46bd      	mov	sp, r7
 801b206:	bd80      	pop	{r7, pc}
 801b208:	0802614c 	.word	0x0802614c

0801b20c <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasInputParameter(const MockNamedValue& parameter)
{
 801b20c:	b590      	push	{r4, r7, lr}
 801b20e:	b087      	sub	sp, #28
 801b210:	af00      	add	r7, sp, #0
 801b212:	6078      	str	r0, [r7, #4]
 801b214:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(parameter.getName());
 801b216:	687b      	ldr	r3, [r7, #4]
 801b218:	69dc      	ldr	r4, [r3, #28]
 801b21a:	683b      	ldr	r3, [r7, #0]
 801b21c:	681b      	ldr	r3, [r3, #0]
 801b21e:	335c      	adds	r3, #92	; 0x5c
 801b220:	681b      	ldr	r3, [r3, #0]
 801b222:	f107 020c 	add.w	r2, r7, #12
 801b226:	6839      	ldr	r1, [r7, #0]
 801b228:	4610      	mov	r0, r2
 801b22a:	4798      	blx	r3
 801b22c:	f107 030c 	add.w	r3, r7, #12
 801b230:	4619      	mov	r1, r3
 801b232:	4620      	mov	r0, r4
 801b234:	f004 fa04 	bl	801f640 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801b238:	6178      	str	r0, [r7, #20]
 801b23a:	f107 030c 	add.w	r3, r7, #12
 801b23e:	4618      	mov	r0, r3
 801b240:	f7f2 f917 	bl	800d472 <_ZN12SimpleStringD1Ev>
    return (p) ? p->equals(parameter) : ignoreOtherParameters_;
 801b244:	697b      	ldr	r3, [r7, #20]
 801b246:	2b00      	cmp	r3, #0
 801b248:	d00d      	beq.n	801b266 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x5a>
 801b24a:	697b      	ldr	r3, [r7, #20]
 801b24c:	681b      	ldr	r3, [r3, #0]
 801b24e:	3350      	adds	r3, #80	; 0x50
 801b250:	681b      	ldr	r3, [r3, #0]
 801b252:	6839      	ldr	r1, [r7, #0]
 801b254:	6978      	ldr	r0, [r7, #20]
 801b256:	4798      	blx	r3
 801b258:	4603      	mov	r3, r0
 801b25a:	2b00      	cmp	r3, #0
 801b25c:	bf14      	ite	ne
 801b25e:	2301      	movne	r3, #1
 801b260:	2300      	moveq	r3, #0
 801b262:	b2db      	uxtb	r3, r3
 801b264:	e006      	b.n	801b274 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x68>
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	7b1b      	ldrb	r3, [r3, #12]
 801b26a:	2b00      	cmp	r3, #0
 801b26c:	bf14      	ite	ne
 801b26e:	2301      	movne	r3, #1
 801b270:	2300      	moveq	r3, #0
 801b272:	b2db      	uxtb	r3, r3
}
 801b274:	4618      	mov	r0, r3
 801b276:	371c      	adds	r7, #28
 801b278:	46bd      	mov	sp, r7
 801b27a:	bd90      	pop	{r4, r7, pc}

0801b27c <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasOutputParameter(const MockNamedValue& parameter)
{
 801b27c:	b590      	push	{r4, r7, lr}
 801b27e:	b087      	sub	sp, #28
 801b280:	af00      	add	r7, sp, #0
 801b282:	6078      	str	r0, [r7, #4]
 801b284:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(parameter.getName());
 801b286:	687b      	ldr	r3, [r7, #4]
 801b288:	6a1c      	ldr	r4, [r3, #32]
 801b28a:	683b      	ldr	r3, [r7, #0]
 801b28c:	681b      	ldr	r3, [r3, #0]
 801b28e:	335c      	adds	r3, #92	; 0x5c
 801b290:	681b      	ldr	r3, [r3, #0]
 801b292:	f107 020c 	add.w	r2, r7, #12
 801b296:	6839      	ldr	r1, [r7, #0]
 801b298:	4610      	mov	r0, r2
 801b29a:	4798      	blx	r3
 801b29c:	f107 030c 	add.w	r3, r7, #12
 801b2a0:	4619      	mov	r1, r3
 801b2a2:	4620      	mov	r0, r4
 801b2a4:	f004 f9cc 	bl	801f640 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801b2a8:	6178      	str	r0, [r7, #20]
 801b2aa:	f107 030c 	add.w	r3, r7, #12
 801b2ae:	4618      	mov	r0, r3
 801b2b0:	f7f2 f8df 	bl	800d472 <_ZN12SimpleStringD1Ev>
    return (p) ? p->compatibleForCopying(parameter) : ignoreOtherParameters_;
 801b2b4:	697b      	ldr	r3, [r7, #20]
 801b2b6:	2b00      	cmp	r3, #0
 801b2b8:	d00d      	beq.n	801b2d6 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x5a>
 801b2ba:	697b      	ldr	r3, [r7, #20]
 801b2bc:	681b      	ldr	r3, [r3, #0]
 801b2be:	3354      	adds	r3, #84	; 0x54
 801b2c0:	681b      	ldr	r3, [r3, #0]
 801b2c2:	6839      	ldr	r1, [r7, #0]
 801b2c4:	6978      	ldr	r0, [r7, #20]
 801b2c6:	4798      	blx	r3
 801b2c8:	4603      	mov	r3, r0
 801b2ca:	2b00      	cmp	r3, #0
 801b2cc:	bf14      	ite	ne
 801b2ce:	2301      	movne	r3, #1
 801b2d0:	2300      	moveq	r3, #0
 801b2d2:	b2db      	uxtb	r3, r3
 801b2d4:	e006      	b.n	801b2e4 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x68>
 801b2d6:	687b      	ldr	r3, [r7, #4]
 801b2d8:	7b1b      	ldrb	r3, [r3, #12]
 801b2da:	2b00      	cmp	r3, #0
 801b2dc:	bf14      	ite	ne
 801b2de:	2301      	movne	r3, #1
 801b2e0:	2300      	moveq	r3, #0
 801b2e2:	b2db      	uxtb	r3, r3
}
 801b2e4:	4618      	mov	r0, r3
 801b2e6:	371c      	adds	r7, #28
 801b2e8:	46bd      	mov	sp, r7
 801b2ea:	bd90      	pop	{r4, r7, pc}

0801b2ec <_ZN23MockCheckedExpectedCall12callToStringEv>:

SimpleString MockCheckedExpectedCall::callToString()
{
 801b2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b2ee:	b0a1      	sub	sp, #132	; 0x84
 801b2f0:	af02      	add	r7, sp, #8
 801b2f2:	6078      	str	r0, [r7, #4]
 801b2f4:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801b2f6:	49bc      	ldr	r1, [pc, #752]	; (801b5e8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801b2f8:	6878      	ldr	r0, [r7, #4]
 801b2fa:	f7f1 fd02 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
    if (isSpecificObjectExpected_)
 801b2fe:	683b      	ldr	r3, [r7, #0]
 801b300:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801b304:	2b00      	cmp	r3, #0
 801b306:	d012      	beq.n	801b32e <_ZN23MockCheckedExpectedCall12callToStringEv+0x42>
        str = StringFromFormat("(object address: %p)::", objectPtr_);
 801b308:	683b      	ldr	r3, [r7, #0]
 801b30a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801b30c:	f107 030c 	add.w	r3, r7, #12
 801b310:	49b6      	ldr	r1, [pc, #728]	; (801b5ec <_ZN23MockCheckedExpectedCall12callToStringEv+0x300>)
 801b312:	4618      	mov	r0, r3
 801b314:	f7f2 fdb4 	bl	800de80 <_Z16StringFromFormatPKcz>
 801b318:	f107 030c 	add.w	r3, r7, #12
 801b31c:	4619      	mov	r1, r3
 801b31e:	6878      	ldr	r0, [r7, #4]
 801b320:	f7f1 fd5b 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 801b324:	f107 030c 	add.w	r3, r7, #12
 801b328:	4618      	mov	r0, r3
 801b32a:	f7f2 f8a2 	bl	800d472 <_ZN12SimpleStringD1Ev>

    str += getName();
 801b32e:	f107 0314 	add.w	r3, r7, #20
 801b332:	6839      	ldr	r1, [r7, #0]
 801b334:	4618      	mov	r0, r3
 801b336:	f7ff f989 	bl	801a64c <_ZNK23MockCheckedExpectedCall7getNameEv>
 801b33a:	f107 0314 	add.w	r3, r7, #20
 801b33e:	4619      	mov	r1, r3
 801b340:	6878      	ldr	r0, [r7, #4]
 801b342:	f7f2 f913 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 801b346:	f107 0314 	add.w	r3, r7, #20
 801b34a:	4618      	mov	r0, r3
 801b34c:	f7f2 f891 	bl	800d472 <_ZN12SimpleStringD1Ev>
    str += " -> ";
 801b350:	49a7      	ldr	r1, [pc, #668]	; (801b5f0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x304>)
 801b352:	6878      	ldr	r0, [r7, #4]
 801b354:	f7f2 f91c 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    if (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) {
 801b358:	683b      	ldr	r3, [r7, #0]
 801b35a:	691b      	ldr	r3, [r3, #16]
 801b35c:	2b00      	cmp	r3, #0
 801b35e:	d02d      	beq.n	801b3bc <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        if (initialExpectedCallOrder_ == finalExpectedCallOrder_) {
 801b360:	683b      	ldr	r3, [r7, #0]
 801b362:	691a      	ldr	r2, [r3, #16]
 801b364:	683b      	ldr	r3, [r7, #0]
 801b366:	695b      	ldr	r3, [r3, #20]
 801b368:	429a      	cmp	r2, r3
 801b36a:	d113      	bne.n	801b394 <_ZN23MockCheckedExpectedCall12callToStringEv+0xa8>
            str += StringFromFormat("expected call order: <%u> -> ", initialExpectedCallOrder_);
 801b36c:	683b      	ldr	r3, [r7, #0]
 801b36e:	691a      	ldr	r2, [r3, #16]
 801b370:	f107 031c 	add.w	r3, r7, #28
 801b374:	499f      	ldr	r1, [pc, #636]	; (801b5f4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x308>)
 801b376:	4618      	mov	r0, r3
 801b378:	f7f2 fd82 	bl	800de80 <_Z16StringFromFormatPKcz>
 801b37c:	f107 031c 	add.w	r3, r7, #28
 801b380:	4619      	mov	r1, r3
 801b382:	6878      	ldr	r0, [r7, #4]
 801b384:	f7f2 f8f2 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 801b388:	f107 031c 	add.w	r3, r7, #28
 801b38c:	4618      	mov	r0, r3
 801b38e:	f7f2 f870 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801b392:	e013      	b.n	801b3bc <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        } else {
            str += StringFromFormat("expected calls order: <%u..%u> -> ", initialExpectedCallOrder_, finalExpectedCallOrder_);
 801b394:	683b      	ldr	r3, [r7, #0]
 801b396:	691a      	ldr	r2, [r3, #16]
 801b398:	683b      	ldr	r3, [r7, #0]
 801b39a:	695b      	ldr	r3, [r3, #20]
 801b39c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801b3a0:	4995      	ldr	r1, [pc, #596]	; (801b5f8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x30c>)
 801b3a2:	f7f2 fd6d 	bl	800de80 <_Z16StringFromFormatPKcz>
 801b3a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b3aa:	4619      	mov	r1, r3
 801b3ac:	6878      	ldr	r0, [r7, #4]
 801b3ae:	f7f2 f8dd 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 801b3b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b3b6:	4618      	mov	r0, r3
 801b3b8:	f7f2 f85b 	bl	800d472 <_ZN12SimpleStringD1Ev>
        }
    }

    if (inputParameters_->begin() == NULLPTR && outputParameters_->begin() == NULLPTR) {
 801b3bc:	683b      	ldr	r3, [r7, #0]
 801b3be:	69db      	ldr	r3, [r3, #28]
 801b3c0:	4618      	mov	r0, r3
 801b3c2:	f004 f96c 	bl	801f69e <_ZN18MockNamedValueList5beginEv>
 801b3c6:	4603      	mov	r3, r0
 801b3c8:	2b00      	cmp	r3, #0
 801b3ca:	d109      	bne.n	801b3e0 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 801b3cc:	683b      	ldr	r3, [r7, #0]
 801b3ce:	6a1b      	ldr	r3, [r3, #32]
 801b3d0:	4618      	mov	r0, r3
 801b3d2:	f004 f964 	bl	801f69e <_ZN18MockNamedValueList5beginEv>
 801b3d6:	4603      	mov	r3, r0
 801b3d8:	2b00      	cmp	r3, #0
 801b3da:	d101      	bne.n	801b3e0 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 801b3dc:	2301      	movs	r3, #1
 801b3de:	e000      	b.n	801b3e2 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf6>
 801b3e0:	2300      	movs	r3, #0
 801b3e2:	2b00      	cmp	r3, #0
 801b3e4:	d00b      	beq.n	801b3fe <_ZN23MockCheckedExpectedCall12callToStringEv+0x112>
        str += (ignoreOtherParameters_) ? "all parameters ignored" : "no parameters";
 801b3e6:	683b      	ldr	r3, [r7, #0]
 801b3e8:	7b1b      	ldrb	r3, [r3, #12]
 801b3ea:	2b00      	cmp	r3, #0
 801b3ec:	d001      	beq.n	801b3f2 <_ZN23MockCheckedExpectedCall12callToStringEv+0x106>
 801b3ee:	4b83      	ldr	r3, [pc, #524]	; (801b5fc <_ZN23MockCheckedExpectedCall12callToStringEv+0x310>)
 801b3f0:	e000      	b.n	801b3f4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x108>
 801b3f2:	4b83      	ldr	r3, [pc, #524]	; (801b600 <_ZN23MockCheckedExpectedCall12callToStringEv+0x314>)
 801b3f4:	4619      	mov	r1, r3
 801b3f6:	6878      	ldr	r0, [r7, #4]
 801b3f8:	f7f2 f8ca 	bl	800d590 <_ZN12SimpleStringpLEPKc>
 801b3fc:	e0e3      	b.n	801b5c6 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
    } else {
        MockNamedValueListNode* p;

        for (p = inputParameters_->begin(); p; p = p->next()) {
 801b3fe:	683b      	ldr	r3, [r7, #0]
 801b400:	69db      	ldr	r3, [r3, #28]
 801b402:	4618      	mov	r0, r3
 801b404:	f004 f94b 	bl	801f69e <_ZN18MockNamedValueList5beginEv>
 801b408:	6778      	str	r0, [r7, #116]	; 0x74
 801b40a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b40c:	2b00      	cmp	r3, #0
 801b40e:	d069      	beq.n	801b4e4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x1f8>
            str += StringFromFormat("%s %s: <%s>", p->getType().asCharString(), p->getName().asCharString(), getInputParameterValueString(p->getName()).asCharString());
 801b410:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b414:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801b416:	4618      	mov	r0, r3
 801b418:	f004 f898 	bl	801f54c <_ZNK22MockNamedValueListNode7getTypeEv>
 801b41c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b420:	4618      	mov	r0, r3
 801b422:	f7f1 fff9 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 801b426:	4605      	mov	r5, r0
 801b428:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b42c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801b42e:	4618      	mov	r0, r3
 801b430:	f004 f879 	bl	801f526 <_ZNK22MockNamedValueListNode7getNameEv>
 801b434:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b438:	4618      	mov	r0, r3
 801b43a:	f7f1 ffed 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 801b43e:	4606      	mov	r6, r0
 801b440:	683b      	ldr	r3, [r7, #0]
 801b442:	681b      	ldr	r3, [r3, #0]
 801b444:	33a4      	adds	r3, #164	; 0xa4
 801b446:	681c      	ldr	r4, [r3, #0]
 801b448:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b44c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801b44e:	4618      	mov	r0, r3
 801b450:	f004 f869 	bl	801f526 <_ZNK22MockNamedValueListNode7getNameEv>
 801b454:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b458:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801b45c:	6839      	ldr	r1, [r7, #0]
 801b45e:	4618      	mov	r0, r3
 801b460:	47a0      	blx	r4
 801b462:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b466:	4618      	mov	r0, r3
 801b468:	f7f1 ffd6 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 801b46c:	4603      	mov	r3, r0
 801b46e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801b472:	9300      	str	r3, [sp, #0]
 801b474:	4633      	mov	r3, r6
 801b476:	462a      	mov	r2, r5
 801b478:	4962      	ldr	r1, [pc, #392]	; (801b604 <_ZN23MockCheckedExpectedCall12callToStringEv+0x318>)
 801b47a:	f7f2 fd01 	bl	800de80 <_Z16StringFromFormatPKcz>
 801b47e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b482:	4619      	mov	r1, r3
 801b484:	6878      	ldr	r0, [r7, #4]
 801b486:	f7f2 f871 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 801b48a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b48e:	4618      	mov	r0, r3
 801b490:	f7f1 ffef 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801b494:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b498:	4618      	mov	r0, r3
 801b49a:	f7f1 ffea 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801b49e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b4a2:	4618      	mov	r0, r3
 801b4a4:	f7f1 ffe5 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801b4a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b4ac:	4618      	mov	r0, r3
 801b4ae:	f7f1 ffe0 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801b4b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b4b6:	4618      	mov	r0, r3
 801b4b8:	f7f1 ffdb 	bl	800d472 <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 801b4bc:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801b4be:	f003 fff7 	bl	801f4b0 <_ZN22MockNamedValueListNode4nextEv>
 801b4c2:	4603      	mov	r3, r0
 801b4c4:	2b00      	cmp	r3, #0
 801b4c6:	bf14      	ite	ne
 801b4c8:	2301      	movne	r3, #1
 801b4ca:	2300      	moveq	r3, #0
 801b4cc:	b2db      	uxtb	r3, r3
 801b4ce:	2b00      	cmp	r3, #0
 801b4d0:	d003      	beq.n	801b4da <_ZN23MockCheckedExpectedCall12callToStringEv+0x1ee>
 801b4d2:	494d      	ldr	r1, [pc, #308]	; (801b608 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801b4d4:	6878      	ldr	r0, [r7, #4]
 801b4d6:	f7f2 f85b 	bl	800d590 <_ZN12SimpleStringpLEPKc>
        for (p = inputParameters_->begin(); p; p = p->next()) {
 801b4da:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801b4dc:	f003 ffe8 	bl	801f4b0 <_ZN22MockNamedValueListNode4nextEv>
 801b4e0:	6778      	str	r0, [r7, #116]	; 0x74
 801b4e2:	e792      	b.n	801b40a <_ZN23MockCheckedExpectedCall12callToStringEv+0x11e>
        }

        if (inputParameters_->begin() && outputParameters_->begin())
 801b4e4:	683b      	ldr	r3, [r7, #0]
 801b4e6:	69db      	ldr	r3, [r3, #28]
 801b4e8:	4618      	mov	r0, r3
 801b4ea:	f004 f8d8 	bl	801f69e <_ZN18MockNamedValueList5beginEv>
 801b4ee:	4603      	mov	r3, r0
 801b4f0:	2b00      	cmp	r3, #0
 801b4f2:	d009      	beq.n	801b508 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 801b4f4:	683b      	ldr	r3, [r7, #0]
 801b4f6:	6a1b      	ldr	r3, [r3, #32]
 801b4f8:	4618      	mov	r0, r3
 801b4fa:	f004 f8d0 	bl	801f69e <_ZN18MockNamedValueList5beginEv>
 801b4fe:	4603      	mov	r3, r0
 801b500:	2b00      	cmp	r3, #0
 801b502:	d001      	beq.n	801b508 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 801b504:	2301      	movs	r3, #1
 801b506:	e000      	b.n	801b50a <_ZN23MockCheckedExpectedCall12callToStringEv+0x21e>
 801b508:	2300      	movs	r3, #0
 801b50a:	2b00      	cmp	r3, #0
 801b50c:	d003      	beq.n	801b516 <_ZN23MockCheckedExpectedCall12callToStringEv+0x22a>
        {
            str += ", ";
 801b50e:	493e      	ldr	r1, [pc, #248]	; (801b608 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801b510:	6878      	ldr	r0, [r7, #4]
 801b512:	f7f2 f83d 	bl	800d590 <_ZN12SimpleStringpLEPKc>
        }

        for (p = outputParameters_->begin(); p; p = p->next()) {
 801b516:	683b      	ldr	r3, [r7, #0]
 801b518:	6a1b      	ldr	r3, [r3, #32]
 801b51a:	4618      	mov	r0, r3
 801b51c:	f004 f8bf 	bl	801f69e <_ZN18MockNamedValueList5beginEv>
 801b520:	6778      	str	r0, [r7, #116]	; 0x74
 801b522:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b524:	2b00      	cmp	r3, #0
 801b526:	d046      	beq.n	801b5b6 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ca>
            str += StringFromFormat("%s %s: <output>", p->getType().asCharString(), p->getName().asCharString());
 801b528:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801b52c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801b52e:	4618      	mov	r0, r3
 801b530:	f004 f80c 	bl	801f54c <_ZNK22MockNamedValueListNode7getTypeEv>
 801b534:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801b538:	4618      	mov	r0, r3
 801b53a:	f7f1 ff6d 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 801b53e:	4604      	mov	r4, r0
 801b540:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801b544:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801b546:	4618      	mov	r0, r3
 801b548:	f003 ffed 	bl	801f526 <_ZNK22MockNamedValueListNode7getNameEv>
 801b54c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801b550:	4618      	mov	r0, r3
 801b552:	f7f1 ff61 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 801b556:	4603      	mov	r3, r0
 801b558:	f107 0054 	add.w	r0, r7, #84	; 0x54
 801b55c:	4622      	mov	r2, r4
 801b55e:	492b      	ldr	r1, [pc, #172]	; (801b60c <_ZN23MockCheckedExpectedCall12callToStringEv+0x320>)
 801b560:	f7f2 fc8e 	bl	800de80 <_Z16StringFromFormatPKcz>
 801b564:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801b568:	4619      	mov	r1, r3
 801b56a:	6878      	ldr	r0, [r7, #4]
 801b56c:	f7f1 fffe 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 801b570:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801b574:	4618      	mov	r0, r3
 801b576:	f7f1 ff7c 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801b57a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801b57e:	4618      	mov	r0, r3
 801b580:	f7f1 ff77 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801b584:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801b588:	4618      	mov	r0, r3
 801b58a:	f7f1 ff72 	bl	800d472 <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 801b58e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801b590:	f003 ff8e 	bl	801f4b0 <_ZN22MockNamedValueListNode4nextEv>
 801b594:	4603      	mov	r3, r0
 801b596:	2b00      	cmp	r3, #0
 801b598:	bf14      	ite	ne
 801b59a:	2301      	movne	r3, #1
 801b59c:	2300      	moveq	r3, #0
 801b59e:	b2db      	uxtb	r3, r3
 801b5a0:	2b00      	cmp	r3, #0
 801b5a2:	d003      	beq.n	801b5ac <_ZN23MockCheckedExpectedCall12callToStringEv+0x2c0>
 801b5a4:	4918      	ldr	r1, [pc, #96]	; (801b608 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801b5a6:	6878      	ldr	r0, [r7, #4]
 801b5a8:	f7f1 fff2 	bl	800d590 <_ZN12SimpleStringpLEPKc>
        for (p = outputParameters_->begin(); p; p = p->next()) {
 801b5ac:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801b5ae:	f003 ff7f 	bl	801f4b0 <_ZN22MockNamedValueListNode4nextEv>
 801b5b2:	6778      	str	r0, [r7, #116]	; 0x74
 801b5b4:	e7b5      	b.n	801b522 <_ZN23MockCheckedExpectedCall12callToStringEv+0x236>
        }

        if (ignoreOtherParameters_)
 801b5b6:	683b      	ldr	r3, [r7, #0]
 801b5b8:	7b1b      	ldrb	r3, [r3, #12]
 801b5ba:	2b00      	cmp	r3, #0
 801b5bc:	d003      	beq.n	801b5c6 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
            str += ", other parameters are ignored";
 801b5be:	4914      	ldr	r1, [pc, #80]	; (801b610 <_ZN23MockCheckedExpectedCall12callToStringEv+0x324>)
 801b5c0:	6878      	ldr	r0, [r7, #4]
 801b5c2:	f7f1 ffe5 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    }

    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801b5c6:	683b      	ldr	r3, [r7, #0]
 801b5c8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801b5ca:	683b      	ldr	r3, [r7, #0]
 801b5cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801b5ce:	2b01      	cmp	r3, #1
 801b5d0:	d101      	bne.n	801b5d6 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ea>
 801b5d2:	4c05      	ldr	r4, [pc, #20]	; (801b5e8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801b5d4:	e000      	b.n	801b5d8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ec>
 801b5d6:	4c0f      	ldr	r4, [pc, #60]	; (801b614 <_ZN23MockCheckedExpectedCall12callToStringEv+0x328>)
 801b5d8:	683b      	ldr	r3, [r7, #0]
 801b5da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801b5dc:	683a      	ldr	r2, [r7, #0]
 801b5de:	6e92      	ldr	r2, [r2, #104]	; 0x68
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801b5e0:	2a01      	cmp	r2, #1
 801b5e2:	d119      	bne.n	801b618 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32c>
 801b5e4:	4a00      	ldr	r2, [pc, #0]	; (801b5e8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801b5e6:	e018      	b.n	801b61a <_ZN23MockCheckedExpectedCall12callToStringEv+0x32e>
 801b5e8:	080260e0 	.word	0x080260e0
 801b5ec:	08026154 	.word	0x08026154
 801b5f0:	0802616c 	.word	0x0802616c
 801b5f4:	08026174 	.word	0x08026174
 801b5f8:	08026194 	.word	0x08026194
 801b5fc:	080261b8 	.word	0x080261b8
 801b600:	080261d0 	.word	0x080261d0
 801b604:	080261e0 	.word	0x080261e0
 801b608:	080261ec 	.word	0x080261ec
 801b60c:	080261f0 	.word	0x080261f0
 801b610:	08026200 	.word	0x08026200
 801b614:	08026220 	.word	0x08026220
 801b618:	4a0c      	ldr	r2, [pc, #48]	; (801b64c <_ZN23MockCheckedExpectedCall12callToStringEv+0x360>)
 801b61a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 801b61e:	9201      	str	r2, [sp, #4]
 801b620:	9300      	str	r3, [sp, #0]
 801b622:	4623      	mov	r3, r4
 801b624:	460a      	mov	r2, r1
 801b626:	490a      	ldr	r1, [pc, #40]	; (801b650 <_ZN23MockCheckedExpectedCall12callToStringEv+0x364>)
 801b628:	f7f2 fc2a 	bl	800de80 <_Z16StringFromFormatPKcz>
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801b62c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801b630:	4619      	mov	r1, r3
 801b632:	6878      	ldr	r0, [r7, #4]
 801b634:	f7f1 ff9a 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 801b638:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801b63c:	4618      	mov	r0, r3
 801b63e:	f7f1 ff18 	bl	800d472 <_ZN12SimpleStringD1Ev>

    return str;
 801b642:	bf00      	nop
}
 801b644:	6878      	ldr	r0, [r7, #4]
 801b646:	377c      	adds	r7, #124	; 0x7c
 801b648:	46bd      	mov	sp, r7
 801b64a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b64c:	08026220 	.word	0x08026220
 801b650:	08026224 	.word	0x08026224

0801b654 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv>:

SimpleString MockCheckedExpectedCall::missingParametersToString()
{
 801b654:	b590      	push	{r4, r7, lr}
 801b656:	b095      	sub	sp, #84	; 0x54
 801b658:	af00      	add	r7, sp, #0
 801b65a:	6078      	str	r0, [r7, #4]
 801b65c:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801b65e:	496c      	ldr	r1, [pc, #432]	; (801b810 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801b660:	6878      	ldr	r0, [r7, #4]
 801b662:	f7f1 fb4e 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
	MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next()) {
 801b666:	683b      	ldr	r3, [r7, #0]
 801b668:	69db      	ldr	r3, [r3, #28]
 801b66a:	4618      	mov	r0, r3
 801b66c:	f004 f817 	bl	801f69e <_ZN18MockNamedValueList5beginEv>
 801b670:	64f8      	str	r0, [r7, #76]	; 0x4c
 801b672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b674:	2b00      	cmp	r3, #0
 801b676:	d05e      	beq.n	801b736 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xe2>
        if (! item(p)->isMatchingActualCall()) {
 801b678:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801b67a:	6838      	ldr	r0, [r7, #0]
 801b67c:	f000 f906 	bl	801b88c <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801b680:	4603      	mov	r3, r0
 801b682:	4618      	mov	r0, r3
 801b684:	f000 f938 	bl	801b8f8 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801b688:	4603      	mov	r3, r0
 801b68a:	f083 0301 	eor.w	r3, r3, #1
 801b68e:	b2db      	uxtb	r3, r3
 801b690:	2b00      	cmp	r3, #0
 801b692:	d04b      	beq.n	801b72c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xd8>
            if (str != "") str += ", ";
 801b694:	f107 030c 	add.w	r3, r7, #12
 801b698:	495d      	ldr	r1, [pc, #372]	; (801b810 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801b69a:	4618      	mov	r0, r3
 801b69c:	f7f1 fb31 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801b6a0:	f107 030c 	add.w	r3, r7, #12
 801b6a4:	4619      	mov	r1, r3
 801b6a6:	6878      	ldr	r0, [r7, #4]
 801b6a8:	f7f1 ff34 	bl	800d514 <_ZneRK12SimpleStringS1_>
 801b6ac:	4603      	mov	r3, r0
 801b6ae:	461c      	mov	r4, r3
 801b6b0:	f107 030c 	add.w	r3, r7, #12
 801b6b4:	4618      	mov	r0, r3
 801b6b6:	f7f1 fedc 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801b6ba:	2c00      	cmp	r4, #0
 801b6bc:	d003      	beq.n	801b6c6 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x72>
 801b6be:	4955      	ldr	r1, [pc, #340]	; (801b814 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801b6c0:	6878      	ldr	r0, [r7, #4]
 801b6c2:	f7f1 ff65 	bl	800d590 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801b6c6:	f107 031c 	add.w	r3, r7, #28
 801b6ca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801b6cc:	4618      	mov	r0, r3
 801b6ce:	f003 ff3d 	bl	801f54c <_ZNK22MockNamedValueListNode7getTypeEv>
 801b6d2:	f107 031c 	add.w	r3, r7, #28
 801b6d6:	4618      	mov	r0, r3
 801b6d8:	f7f1 fe9e 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 801b6dc:	4604      	mov	r4, r0
 801b6de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b6e2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801b6e4:	4618      	mov	r0, r3
 801b6e6:	f003 ff1e 	bl	801f526 <_ZNK22MockNamedValueListNode7getNameEv>
 801b6ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b6ee:	4618      	mov	r0, r3
 801b6f0:	f7f1 fe92 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 801b6f4:	4603      	mov	r3, r0
 801b6f6:	f107 0014 	add.w	r0, r7, #20
 801b6fa:	4622      	mov	r2, r4
 801b6fc:	4946      	ldr	r1, [pc, #280]	; (801b818 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801b6fe:	f7f2 fbbf 	bl	800de80 <_Z16StringFromFormatPKcz>
 801b702:	f107 0314 	add.w	r3, r7, #20
 801b706:	4619      	mov	r1, r3
 801b708:	6878      	ldr	r0, [r7, #4]
 801b70a:	f7f1 ff2f 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 801b70e:	f107 0314 	add.w	r3, r7, #20
 801b712:	4618      	mov	r0, r3
 801b714:	f7f1 fead 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801b718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b71c:	4618      	mov	r0, r3
 801b71e:	f7f1 fea8 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801b722:	f107 031c 	add.w	r3, r7, #28
 801b726:	4618      	mov	r0, r3
 801b728:	f7f1 fea3 	bl	800d472 <_ZN12SimpleStringD1Ev>
    for (p = inputParameters_->begin(); p; p = p->next()) {
 801b72c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801b72e:	f003 febf 	bl	801f4b0 <_ZN22MockNamedValueListNode4nextEv>
 801b732:	64f8      	str	r0, [r7, #76]	; 0x4c
 801b734:	e79d      	b.n	801b672 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1e>
        }
    }
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801b736:	683b      	ldr	r3, [r7, #0]
 801b738:	6a1b      	ldr	r3, [r3, #32]
 801b73a:	4618      	mov	r0, r3
 801b73c:	f003 ffaf 	bl	801f69e <_ZN18MockNamedValueList5beginEv>
 801b740:	64f8      	str	r0, [r7, #76]	; 0x4c
 801b742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b744:	2b00      	cmp	r3, #0
 801b746:	d05e      	beq.n	801b806 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1b2>
        if (! item(p)->isMatchingActualCall()) {
 801b748:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801b74a:	6838      	ldr	r0, [r7, #0]
 801b74c:	f000 f89e 	bl	801b88c <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801b750:	4603      	mov	r3, r0
 801b752:	4618      	mov	r0, r3
 801b754:	f000 f8d0 	bl	801b8f8 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801b758:	4603      	mov	r3, r0
 801b75a:	f083 0301 	eor.w	r3, r3, #1
 801b75e:	b2db      	uxtb	r3, r3
 801b760:	2b00      	cmp	r3, #0
 801b762:	d04b      	beq.n	801b7fc <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1a8>
            if (str != "") str += ", ";
 801b764:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b768:	4929      	ldr	r1, [pc, #164]	; (801b810 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801b76a:	4618      	mov	r0, r3
 801b76c:	f7f1 fac9 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801b770:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b774:	4619      	mov	r1, r3
 801b776:	6878      	ldr	r0, [r7, #4]
 801b778:	f7f1 fecc 	bl	800d514 <_ZneRK12SimpleStringS1_>
 801b77c:	4603      	mov	r3, r0
 801b77e:	461c      	mov	r4, r3
 801b780:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b784:	4618      	mov	r0, r3
 801b786:	f7f1 fe74 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801b78a:	2c00      	cmp	r4, #0
 801b78c:	d003      	beq.n	801b796 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x142>
 801b78e:	4921      	ldr	r1, [pc, #132]	; (801b814 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801b790:	6878      	ldr	r0, [r7, #4]
 801b792:	f7f1 fefd 	bl	800d590 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801b796:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b79a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801b79c:	4618      	mov	r0, r3
 801b79e:	f003 fed5 	bl	801f54c <_ZNK22MockNamedValueListNode7getTypeEv>
 801b7a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b7a6:	4618      	mov	r0, r3
 801b7a8:	f7f1 fe36 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 801b7ac:	4604      	mov	r4, r0
 801b7ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b7b2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801b7b4:	4618      	mov	r0, r3
 801b7b6:	f003 feb6 	bl	801f526 <_ZNK22MockNamedValueListNode7getNameEv>
 801b7ba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b7be:	4618      	mov	r0, r3
 801b7c0:	f7f1 fe2a 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 801b7c4:	4603      	mov	r3, r0
 801b7c6:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801b7ca:	4622      	mov	r2, r4
 801b7cc:	4912      	ldr	r1, [pc, #72]	; (801b818 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801b7ce:	f7f2 fb57 	bl	800de80 <_Z16StringFromFormatPKcz>
 801b7d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b7d6:	4619      	mov	r1, r3
 801b7d8:	6878      	ldr	r0, [r7, #4]
 801b7da:	f7f1 fec7 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 801b7de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b7e2:	4618      	mov	r0, r3
 801b7e4:	f7f1 fe45 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801b7e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b7ec:	4618      	mov	r0, r3
 801b7ee:	f7f1 fe40 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801b7f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b7f6:	4618      	mov	r0, r3
 801b7f8:	f7f1 fe3b 	bl	800d472 <_ZN12SimpleStringD1Ev>
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801b7fc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801b7fe:	f003 fe57 	bl	801f4b0 <_ZN22MockNamedValueListNode4nextEv>
 801b802:	64f8      	str	r0, [r7, #76]	; 0x4c
 801b804:	e79d      	b.n	801b742 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xee>
        }
    }
    return str;
 801b806:	bf00      	nop
}
 801b808:	6878      	ldr	r0, [r7, #4]
 801b80a:	3754      	adds	r7, #84	; 0x54
 801b80c:	46bd      	mov	sp, r7
 801b80e:	bd90      	pop	{r4, r7, pc}
 801b810:	080260e0 	.word	0x080260e0
 801b814:	080261ec 	.word	0x080261ec
 801b818:	0802624c 	.word	0x0802624c

0801b81c <_ZN23MockCheckedExpectedCall9relatesToERK12SimpleString>:

bool MockCheckedExpectedCall::relatesTo(const SimpleString& functionName)
{
 801b81c:	b590      	push	{r4, r7, lr}
 801b81e:	b085      	sub	sp, #20
 801b820:	af00      	add	r7, sp, #0
 801b822:	6078      	str	r0, [r7, #4]
 801b824:	6039      	str	r1, [r7, #0]
    return functionName == getName();
 801b826:	f107 0308 	add.w	r3, r7, #8
 801b82a:	6879      	ldr	r1, [r7, #4]
 801b82c:	4618      	mov	r0, r3
 801b82e:	f7fe ff0d 	bl	801a64c <_ZNK23MockCheckedExpectedCall7getNameEv>
 801b832:	f107 0308 	add.w	r3, r7, #8
 801b836:	4619      	mov	r1, r3
 801b838:	6838      	ldr	r0, [r7, #0]
 801b83a:	f7f1 fe26 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801b83e:	4603      	mov	r3, r0
 801b840:	461c      	mov	r4, r3
 801b842:	f107 0308 	add.w	r3, r7, #8
 801b846:	4618      	mov	r0, r3
 801b848:	f7f1 fe13 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801b84c:	4623      	mov	r3, r4
}
 801b84e:	4618      	mov	r0, r3
 801b850:	3714      	adds	r7, #20
 801b852:	46bd      	mov	sp, r7
 801b854:	bd90      	pop	{r4, r7, pc}

0801b856 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv>:

bool MockCheckedExpectedCall::relatesToObject(const void* objectPtr) const
{
 801b856:	b480      	push	{r7}
 801b858:	b083      	sub	sp, #12
 801b85a:	af00      	add	r7, sp, #0
 801b85c:	6078      	str	r0, [r7, #4]
 801b85e:	6039      	str	r1, [r7, #0]
    return (!isSpecificObjectExpected_) || (objectPtr_ == objectPtr);
 801b860:	687b      	ldr	r3, [r7, #4]
 801b862:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801b866:	f083 0301 	eor.w	r3, r3, #1
 801b86a:	b2db      	uxtb	r3, r3
 801b86c:	2b00      	cmp	r3, #0
 801b86e:	d104      	bne.n	801b87a <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x24>
 801b870:	687b      	ldr	r3, [r7, #4]
 801b872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b874:	683a      	ldr	r2, [r7, #0]
 801b876:	429a      	cmp	r2, r3
 801b878:	d101      	bne.n	801b87e <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x28>
 801b87a:	2301      	movs	r3, #1
 801b87c:	e000      	b.n	801b880 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x2a>
 801b87e:	2300      	movs	r3, #0
}
 801b880:	4618      	mov	r0, r3
 801b882:	370c      	adds	r7, #12
 801b884:	46bd      	mov	sp, r7
 801b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b88a:	4770      	bx	lr

0801b88c <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>:

MockCheckedExpectedCall::MockExpectedFunctionParameter* MockCheckedExpectedCall::item(MockNamedValueListNode* node)
{
 801b88c:	b580      	push	{r7, lr}
 801b88e:	b082      	sub	sp, #8
 801b890:	af00      	add	r7, sp, #0
 801b892:	6078      	str	r0, [r7, #4]
 801b894:	6039      	str	r1, [r7, #0]
    return (MockExpectedFunctionParameter*) node->item();
 801b896:	6838      	ldr	r0, [r7, #0]
 801b898:	f003 fe16 	bl	801f4c8 <_ZN22MockNamedValueListNode4itemEv>
 801b89c:	4603      	mov	r3, r0
}
 801b89e:	4618      	mov	r0, r3
 801b8a0:	3708      	adds	r7, #8
 801b8a2:	46bd      	mov	sp, r7
 801b8a4:	bd80      	pop	{r7, pc}
	...

0801b8a8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>:

MockCheckedExpectedCall::MockExpectedFunctionParameter::MockExpectedFunctionParameter(const SimpleString& name)
 801b8a8:	b580      	push	{r7, lr}
 801b8aa:	b082      	sub	sp, #8
 801b8ac:	af00      	add	r7, sp, #0
 801b8ae:	6078      	str	r0, [r7, #4]
 801b8b0:	6039      	str	r1, [r7, #0]
            : MockNamedValue(name), matchesActualCall_(false)
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	6839      	ldr	r1, [r7, #0]
 801b8b6:	4618      	mov	r0, r3
 801b8b8:	f001 ff48 	bl	801d74c <_ZN14MockNamedValueC1ERK12SimpleString>
 801b8bc:	4a05      	ldr	r2, [pc, #20]	; (801b8d4 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString+0x2c>)
 801b8be:	687b      	ldr	r3, [r7, #4]
 801b8c0:	601a      	str	r2, [r3, #0]
 801b8c2:	687b      	ldr	r3, [r7, #4]
 801b8c4:	2200      	movs	r2, #0
 801b8c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
{
}
 801b8ca:	687b      	ldr	r3, [r7, #4]
 801b8cc:	4618      	mov	r0, r3
 801b8ce:	3708      	adds	r7, #8
 801b8d0:	46bd      	mov	sp, r7
 801b8d2:	bd80      	pop	{r7, pc}
 801b8d4:	0802920c 	.word	0x0802920c

0801b8d8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>:

void MockCheckedExpectedCall::MockExpectedFunctionParameter::setMatchesActualCall(bool b)
{
 801b8d8:	b480      	push	{r7}
 801b8da:	b083      	sub	sp, #12
 801b8dc:	af00      	add	r7, sp, #0
 801b8de:	6078      	str	r0, [r7, #4]
 801b8e0:	460b      	mov	r3, r1
 801b8e2:	70fb      	strb	r3, [r7, #3]
    matchesActualCall_ = b;
 801b8e4:	687b      	ldr	r3, [r7, #4]
 801b8e6:	78fa      	ldrb	r2, [r7, #3]
 801b8e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 801b8ec:	bf00      	nop
 801b8ee:	370c      	adds	r7, #12
 801b8f0:	46bd      	mov	sp, r7
 801b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8f6:	4770      	bx	lr

0801b8f8 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::MockExpectedFunctionParameter::isMatchingActualCall() const
{
 801b8f8:	b480      	push	{r7}
 801b8fa:	b083      	sub	sp, #12
 801b8fc:	af00      	add	r7, sp, #0
 801b8fe:	6078      	str	r0, [r7, #4]
    return matchesActualCall_;
 801b900:	687b      	ldr	r3, [r7, #4]
 801b902:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 801b906:	4618      	mov	r0, r3
 801b908:	370c      	adds	r7, #12
 801b90a:	46bd      	mov	sp, r7
 801b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b910:	4770      	bx	lr
	...

0801b914 <_ZN23MockCheckedExpectedCall14andReturnValueEb>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(bool value)
{
 801b914:	b580      	push	{r7, lr}
 801b916:	b082      	sub	sp, #8
 801b918:	af00      	add	r7, sp, #0
 801b91a:	6078      	str	r0, [r7, #4]
 801b91c:	460b      	mov	r3, r1
 801b91e:	70fb      	strb	r3, [r7, #3]
    returnValue_.setName("returnValue");
 801b920:	687b      	ldr	r3, [r7, #4]
 801b922:	3328      	adds	r3, #40	; 0x28
 801b924:	4907      	ldr	r1, [pc, #28]	; (801b944 <_ZN23MockCheckedExpectedCall14andReturnValueEb+0x30>)
 801b926:	4618      	mov	r0, r3
 801b928:	f002 f9b2 	bl	801dc90 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	3328      	adds	r3, #40	; 0x28
 801b930:	78fa      	ldrb	r2, [r7, #3]
 801b932:	4611      	mov	r1, r2
 801b934:	4618      	mov	r0, r3
 801b936:	f001 ff5b 	bl	801d7f0 <_ZN14MockNamedValue8setValueEb>
    return *this;
 801b93a:	687b      	ldr	r3, [r7, #4]
}
 801b93c:	4618      	mov	r0, r3
 801b93e:	3708      	adds	r7, #8
 801b940:	46bd      	mov	sp, r7
 801b942:	bd80      	pop	{r7, pc}
 801b944:	08026254 	.word	0x08026254

0801b948 <_ZN23MockCheckedExpectedCall14andReturnValueEj>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned int value)
{
 801b948:	b580      	push	{r7, lr}
 801b94a:	b082      	sub	sp, #8
 801b94c:	af00      	add	r7, sp, #0
 801b94e:	6078      	str	r0, [r7, #4]
 801b950:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b952:	687b      	ldr	r3, [r7, #4]
 801b954:	3328      	adds	r3, #40	; 0x28
 801b956:	4907      	ldr	r1, [pc, #28]	; (801b974 <_ZN23MockCheckedExpectedCall14andReturnValueEj+0x2c>)
 801b958:	4618      	mov	r0, r3
 801b95a:	f002 f999 	bl	801dc90 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b95e:	687b      	ldr	r3, [r7, #4]
 801b960:	3328      	adds	r3, #40	; 0x28
 801b962:	6839      	ldr	r1, [r7, #0]
 801b964:	4618      	mov	r0, r3
 801b966:	f001 ff67 	bl	801d838 <_ZN14MockNamedValue8setValueEj>
    return *this;
 801b96a:	687b      	ldr	r3, [r7, #4]
}
 801b96c:	4618      	mov	r0, r3
 801b96e:	3708      	adds	r7, #8
 801b970:	46bd      	mov	sp, r7
 801b972:	bd80      	pop	{r7, pc}
 801b974:	08026254 	.word	0x08026254

0801b978 <_ZN23MockCheckedExpectedCall14andReturnValueEi>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(int value)
{
 801b978:	b580      	push	{r7, lr}
 801b97a:	b082      	sub	sp, #8
 801b97c:	af00      	add	r7, sp, #0
 801b97e:	6078      	str	r0, [r7, #4]
 801b980:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b982:	687b      	ldr	r3, [r7, #4]
 801b984:	3328      	adds	r3, #40	; 0x28
 801b986:	4907      	ldr	r1, [pc, #28]	; (801b9a4 <_ZN23MockCheckedExpectedCall14andReturnValueEi+0x2c>)
 801b988:	4618      	mov	r0, r3
 801b98a:	f002 f981 	bl	801dc90 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b98e:	687b      	ldr	r3, [r7, #4]
 801b990:	3328      	adds	r3, #40	; 0x28
 801b992:	6839      	ldr	r1, [r7, #0]
 801b994:	4618      	mov	r0, r3
 801b996:	f001 ff71 	bl	801d87c <_ZN14MockNamedValue8setValueEi>
    return *this;
 801b99a:	687b      	ldr	r3, [r7, #4]
}
 801b99c:	4618      	mov	r0, r3
 801b99e:	3708      	adds	r7, #8
 801b9a0:	46bd      	mov	sp, r7
 801b9a2:	bd80      	pop	{r7, pc}
 801b9a4:	08026254 	.word	0x08026254

0801b9a8 <_ZN23MockCheckedExpectedCall14andReturnValueEl>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(long int value)
{
 801b9a8:	b580      	push	{r7, lr}
 801b9aa:	b082      	sub	sp, #8
 801b9ac:	af00      	add	r7, sp, #0
 801b9ae:	6078      	str	r0, [r7, #4]
 801b9b0:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	3328      	adds	r3, #40	; 0x28
 801b9b6:	4907      	ldr	r1, [pc, #28]	; (801b9d4 <_ZN23MockCheckedExpectedCall14andReturnValueEl+0x2c>)
 801b9b8:	4618      	mov	r0, r3
 801b9ba:	f002 f969 	bl	801dc90 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b9be:	687b      	ldr	r3, [r7, #4]
 801b9c0:	3328      	adds	r3, #40	; 0x28
 801b9c2:	6839      	ldr	r1, [r7, #0]
 801b9c4:	4618      	mov	r0, r3
 801b9c6:	f001 ff7b 	bl	801d8c0 <_ZN14MockNamedValue8setValueEl>
    return *this;
 801b9ca:	687b      	ldr	r3, [r7, #4]
}
 801b9cc:	4618      	mov	r0, r3
 801b9ce:	3708      	adds	r7, #8
 801b9d0:	46bd      	mov	sp, r7
 801b9d2:	bd80      	pop	{r7, pc}
 801b9d4:	08026254 	.word	0x08026254

0801b9d8 <_ZN23MockCheckedExpectedCall14andReturnValueEm>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned long int value)
{
 801b9d8:	b580      	push	{r7, lr}
 801b9da:	b082      	sub	sp, #8
 801b9dc:	af00      	add	r7, sp, #0
 801b9de:	6078      	str	r0, [r7, #4]
 801b9e0:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b9e2:	687b      	ldr	r3, [r7, #4]
 801b9e4:	3328      	adds	r3, #40	; 0x28
 801b9e6:	4907      	ldr	r1, [pc, #28]	; (801ba04 <_ZN23MockCheckedExpectedCall14andReturnValueEm+0x2c>)
 801b9e8:	4618      	mov	r0, r3
 801b9ea:	f002 f951 	bl	801dc90 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b9ee:	687b      	ldr	r3, [r7, #4]
 801b9f0:	3328      	adds	r3, #40	; 0x28
 801b9f2:	6839      	ldr	r1, [r7, #0]
 801b9f4:	4618      	mov	r0, r3
 801b9f6:	f001 ff85 	bl	801d904 <_ZN14MockNamedValue8setValueEm>
    return *this;
 801b9fa:	687b      	ldr	r3, [r7, #4]
}
 801b9fc:	4618      	mov	r0, r3
 801b9fe:	3708      	adds	r7, #8
 801ba00:	46bd      	mov	sp, r7
 801ba02:	bd80      	pop	{r7, pc}
 801ba04:	08026254 	.word	0x08026254

0801ba08 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_longlong)
{
 801ba08:	b5b0      	push	{r4, r5, r7, lr}
 801ba0a:	b086      	sub	sp, #24
 801ba0c:	af02      	add	r7, sp, #8
 801ba0e:	60f8      	str	r0, [r7, #12]
 801ba10:	1d3b      	adds	r3, r7, #4
 801ba12:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801ba16:	f7f8 fd57 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 801ba1a:	4604      	mov	r4, r0
 801ba1c:	6823      	ldr	r3, [r4, #0]
 801ba1e:	3368      	adds	r3, #104	; 0x68
 801ba20:	681d      	ldr	r5, [r3, #0]
 801ba22:	f7f8 fd61 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ba26:	4603      	mov	r3, r0
 801ba28:	9300      	str	r3, [sp, #0]
 801ba2a:	f240 2319 	movw	r3, #537	; 0x219
 801ba2e:	4a04      	ldr	r2, [pc, #16]	; (801ba40 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x38>)
 801ba30:	4904      	ldr	r1, [pc, #16]	; (801ba44 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x3c>)
 801ba32:	4620      	mov	r0, r4
 801ba34:	47a8      	blx	r5
    return *this;
 801ba36:	68fb      	ldr	r3, [r7, #12]
}
 801ba38:	4618      	mov	r0, r3
 801ba3a:	3710      	adds	r7, #16
 801ba3c:	46bd      	mov	sp, r7
 801ba3e:	bdb0      	pop	{r4, r5, r7, pc}
 801ba40:	080260e4 	.word	0x080260e4
 801ba44:	08026100 	.word	0x08026100

0801ba48 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_ulonglong)
{
 801ba48:	b5b0      	push	{r4, r5, r7, lr}
 801ba4a:	b086      	sub	sp, #24
 801ba4c:	af02      	add	r7, sp, #8
 801ba4e:	60f8      	str	r0, [r7, #12]
 801ba50:	1d3b      	adds	r3, r7, #4
 801ba52:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801ba56:	f7f8 fd37 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 801ba5a:	4604      	mov	r4, r0
 801ba5c:	6823      	ldr	r3, [r4, #0]
 801ba5e:	3368      	adds	r3, #104	; 0x68
 801ba60:	681d      	ldr	r5, [r3, #0]
 801ba62:	f7f8 fd41 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ba66:	4603      	mov	r3, r0
 801ba68:	9300      	str	r3, [sp, #0]
 801ba6a:	f240 231f 	movw	r3, #543	; 0x21f
 801ba6e:	4a04      	ldr	r2, [pc, #16]	; (801ba80 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x38>)
 801ba70:	4904      	ldr	r1, [pc, #16]	; (801ba84 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x3c>)
 801ba72:	4620      	mov	r0, r4
 801ba74:	47a8      	blx	r5
    return *this;
 801ba76:	68fb      	ldr	r3, [r7, #12]
}
 801ba78:	4618      	mov	r0, r3
 801ba7a:	3710      	adds	r7, #16
 801ba7c:	46bd      	mov	sp, r7
 801ba7e:	bdb0      	pop	{r4, r5, r7, pc}
 801ba80:	080260e4 	.word	0x080260e4
 801ba84:	08026120 	.word	0x08026120

0801ba88 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc>:

#endif

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const char* value)
{
 801ba88:	b580      	push	{r7, lr}
 801ba8a:	b082      	sub	sp, #8
 801ba8c:	af00      	add	r7, sp, #0
 801ba8e:	6078      	str	r0, [r7, #4]
 801ba90:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801ba92:	687b      	ldr	r3, [r7, #4]
 801ba94:	3328      	adds	r3, #40	; 0x28
 801ba96:	4907      	ldr	r1, [pc, #28]	; (801bab4 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc+0x2c>)
 801ba98:	4618      	mov	r0, r3
 801ba9a:	f002 f8f9 	bl	801dc90 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801ba9e:	687b      	ldr	r3, [r7, #4]
 801baa0:	3328      	adds	r3, #40	; 0x28
 801baa2:	6839      	ldr	r1, [r7, #0]
 801baa4:	4618      	mov	r0, r3
 801baa6:	f002 f835 	bl	801db14 <_ZN14MockNamedValue8setValueEPKc>
    return *this;
 801baaa:	687b      	ldr	r3, [r7, #4]
}
 801baac:	4618      	mov	r0, r3
 801baae:	3708      	adds	r7, #8
 801bab0:	46bd      	mov	sp, r7
 801bab2:	bd80      	pop	{r7, pc}
 801bab4:	08026254 	.word	0x08026254

0801bab8 <_ZN23MockCheckedExpectedCall14andReturnValueEd>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(double value)
{
 801bab8:	b580      	push	{r7, lr}
 801baba:	b084      	sub	sp, #16
 801babc:	af00      	add	r7, sp, #0
 801babe:	60f8      	str	r0, [r7, #12]
 801bac0:	ed87 0b00 	vstr	d0, [r7]
    returnValue_.setName("returnValue");
 801bac4:	68fb      	ldr	r3, [r7, #12]
 801bac6:	3328      	adds	r3, #40	; 0x28
 801bac8:	4907      	ldr	r1, [pc, #28]	; (801bae8 <_ZN23MockCheckedExpectedCall14andReturnValueEd+0x30>)
 801baca:	4618      	mov	r0, r3
 801bacc:	f002 f8e0 	bl	801dc90 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801bad0:	68fb      	ldr	r3, [r7, #12]
 801bad2:	3328      	adds	r3, #40	; 0x28
 801bad4:	ed97 0b00 	vldr	d0, [r7]
 801bad8:	4618      	mov	r0, r3
 801bada:	f001 ff71 	bl	801d9c0 <_ZN14MockNamedValue8setValueEd>
    return *this;
 801bade:	68fb      	ldr	r3, [r7, #12]
}
 801bae0:	4618      	mov	r0, r3
 801bae2:	3710      	adds	r7, #16
 801bae4:	46bd      	mov	sp, r7
 801bae6:	bd80      	pop	{r7, pc}
 801bae8:	08026254 	.word	0x08026254

0801baec <_ZN23MockCheckedExpectedCall14andReturnValueEPv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void* value)
{
 801baec:	b580      	push	{r7, lr}
 801baee:	b082      	sub	sp, #8
 801baf0:	af00      	add	r7, sp, #0
 801baf2:	6078      	str	r0, [r7, #4]
 801baf4:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801baf6:	687b      	ldr	r3, [r7, #4]
 801baf8:	3328      	adds	r3, #40	; 0x28
 801bafa:	4907      	ldr	r1, [pc, #28]	; (801bb18 <_ZN23MockCheckedExpectedCall14andReturnValueEPv+0x2c>)
 801bafc:	4618      	mov	r0, r3
 801bafe:	f002 f8c7 	bl	801dc90 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801bb02:	687b      	ldr	r3, [r7, #4]
 801bb04:	3328      	adds	r3, #40	; 0x28
 801bb06:	6839      	ldr	r1, [r7, #0]
 801bb08:	4618      	mov	r0, r3
 801bb0a:	f001 ff9d 	bl	801da48 <_ZN14MockNamedValue8setValueEPv>
    return *this;
 801bb0e:	687b      	ldr	r3, [r7, #4]
}
 801bb10:	4618      	mov	r0, r3
 801bb12:	3708      	adds	r7, #8
 801bb14:	46bd      	mov	sp, r7
 801bb16:	bd80      	pop	{r7, pc}
 801bb18:	08026254 	.word	0x08026254

0801bb1c <_ZN23MockCheckedExpectedCall14andReturnValueEPKv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const void* value)
{
 801bb1c:	b580      	push	{r7, lr}
 801bb1e:	b082      	sub	sp, #8
 801bb20:	af00      	add	r7, sp, #0
 801bb22:	6078      	str	r0, [r7, #4]
 801bb24:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801bb26:	687b      	ldr	r3, [r7, #4]
 801bb28:	3328      	adds	r3, #40	; 0x28
 801bb2a:	4907      	ldr	r1, [pc, #28]	; (801bb48 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv+0x2c>)
 801bb2c:	4618      	mov	r0, r3
 801bb2e:	f002 f8af 	bl	801dc90 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801bb32:	687b      	ldr	r3, [r7, #4]
 801bb34:	3328      	adds	r3, #40	; 0x28
 801bb36:	6839      	ldr	r1, [r7, #0]
 801bb38:	4618      	mov	r0, r3
 801bb3a:	f001 ffa7 	bl	801da8c <_ZN14MockNamedValue8setValueEPKv>
    return *this;
 801bb3e:	687b      	ldr	r3, [r7, #4]
}
 801bb40:	4618      	mov	r0, r3
 801bb42:	3708      	adds	r7, #8
 801bb44:	46bd      	mov	sp, r7
 801bb46:	bd80      	pop	{r7, pc}
 801bb48:	08026254 	.word	0x08026254

0801bb4c <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void (*value)())
{
 801bb4c:	b580      	push	{r7, lr}
 801bb4e:	b082      	sub	sp, #8
 801bb50:	af00      	add	r7, sp, #0
 801bb52:	6078      	str	r0, [r7, #4]
 801bb54:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801bb56:	687b      	ldr	r3, [r7, #4]
 801bb58:	3328      	adds	r3, #40	; 0x28
 801bb5a:	4907      	ldr	r1, [pc, #28]	; (801bb78 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE+0x2c>)
 801bb5c:	4618      	mov	r0, r3
 801bb5e:	f002 f897 	bl	801dc90 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801bb62:	687b      	ldr	r3, [r7, #4]
 801bb64:	3328      	adds	r3, #40	; 0x28
 801bb66:	6839      	ldr	r1, [r7, #0]
 801bb68:	4618      	mov	r0, r3
 801bb6a:	f001 ffb1 	bl	801dad0 <_ZN14MockNamedValue8setValueEPFvvE>
    return *this;
 801bb6e:	687b      	ldr	r3, [r7, #4]
}
 801bb70:	4618      	mov	r0, r3
 801bb72:	3708      	adds	r7, #8
 801bb74:	46bd      	mov	sp, r7
 801bb76:	bd80      	pop	{r7, pc}
 801bb78:	08026254 	.word	0x08026254

0801bb7c <_ZN23MockCheckedExpectedCall8onObjectEPv>:

MockExpectedCall& MockCheckedExpectedCall::onObject(void* objectPtr)
{
 801bb7c:	b480      	push	{r7}
 801bb7e:	b083      	sub	sp, #12
 801bb80:	af00      	add	r7, sp, #0
 801bb82:	6078      	str	r0, [r7, #4]
 801bb84:	6039      	str	r1, [r7, #0]
    isSpecificObjectExpected_ = true;
 801bb86:	687b      	ldr	r3, [r7, #4]
 801bb88:	2201      	movs	r2, #1
 801bb8a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    wasPassedToObject_ = false;
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	2200      	movs	r2, #0
 801bb92:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    objectPtr_ = objectPtr;
 801bb96:	687b      	ldr	r3, [r7, #4]
 801bb98:	683a      	ldr	r2, [r7, #0]
 801bb9a:	661a      	str	r2, [r3, #96]	; 0x60
    return *this;
 801bb9c:	687b      	ldr	r3, [r7, #4]
}
 801bb9e:	4618      	mov	r0, r3
 801bba0:	370c      	adds	r7, #12
 801bba2:	46bd      	mov	sp, r7
 801bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bba8:	4770      	bx	lr

0801bbaa <_ZN23MockCheckedExpectedCall11returnValueEv>:

MockNamedValue MockCheckedExpectedCall::returnValue()
{
 801bbaa:	b580      	push	{r7, lr}
 801bbac:	b082      	sub	sp, #8
 801bbae:	af00      	add	r7, sp, #0
 801bbb0:	6078      	str	r0, [r7, #4]
 801bbb2:	6039      	str	r1, [r7, #0]
    return returnValue_;
 801bbb4:	683b      	ldr	r3, [r7, #0]
 801bbb6:	3328      	adds	r3, #40	; 0x28
 801bbb8:	4619      	mov	r1, r3
 801bbba:	6878      	ldr	r0, [r7, #4]
 801bbbc:	f7ef f946 	bl	800ae4c <_ZN14MockNamedValueC1ERKS_>
}
 801bbc0:	6878      	ldr	r0, [r7, #4]
 801bbc2:	3708      	adds	r7, #8
 801bbc4:	46bd      	mov	sp, r7
 801bbc6:	bd80      	pop	{r7, pc}

0801bbc8 <_ZN23MockCheckedExpectedCall13withCallOrderEjj>:

MockExpectedCall& MockCheckedExpectedCall::withCallOrder(unsigned int initialCallOrder, unsigned int finalCallOrder)
{
 801bbc8:	b480      	push	{r7}
 801bbca:	b085      	sub	sp, #20
 801bbcc:	af00      	add	r7, sp, #0
 801bbce:	60f8      	str	r0, [r7, #12]
 801bbd0:	60b9      	str	r1, [r7, #8]
 801bbd2:	607a      	str	r2, [r7, #4]
    initialExpectedCallOrder_ = initialCallOrder;
 801bbd4:	68fb      	ldr	r3, [r7, #12]
 801bbd6:	68ba      	ldr	r2, [r7, #8]
 801bbd8:	611a      	str	r2, [r3, #16]
    finalExpectedCallOrder_ = finalCallOrder;
 801bbda:	68fb      	ldr	r3, [r7, #12]
 801bbdc:	687a      	ldr	r2, [r7, #4]
 801bbde:	615a      	str	r2, [r3, #20]
    return *this;
 801bbe0:	68fb      	ldr	r3, [r7, #12]
}
 801bbe2:	4618      	mov	r0, r3
 801bbe4:	3714      	adds	r7, #20
 801bbe6:	46bd      	mov	sp, r7
 801bbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbec:	4770      	bx	lr

0801bbee <_ZNK23MockCheckedExpectedCall12isOutOfOrderEv>:

bool MockCheckedExpectedCall::isOutOfOrder() const
{
 801bbee:	b480      	push	{r7}
 801bbf0:	b083      	sub	sp, #12
 801bbf2:	af00      	add	r7, sp, #0
 801bbf4:	6078      	str	r0, [r7, #4]
    return outOfOrder_;
 801bbf6:	687b      	ldr	r3, [r7, #4]
 801bbf8:	7e1b      	ldrb	r3, [r3, #24]
}
 801bbfa:	4618      	mov	r0, r3
 801bbfc:	370c      	adds	r7, #12
 801bbfe:	46bd      	mov	sp, r7
 801bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc04:	4770      	bx	lr

0801bc06 <_ZNK23MockCheckedExpectedCall23getActualCallsFulfilledEv>:

unsigned int MockCheckedExpectedCall::getActualCallsFulfilled() const
{
 801bc06:	b480      	push	{r7}
 801bc08:	b083      	sub	sp, #12
 801bc0a:	af00      	add	r7, sp, #0
 801bc0c:	6078      	str	r0, [r7, #4]
    return actualCalls_;
 801bc0e:	687b      	ldr	r3, [r7, #4]
 801bc10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
 801bc12:	4618      	mov	r0, r3
 801bc14:	370c      	adds	r7, #12
 801bc16:	46bd      	mov	sp, r7
 801bc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc1c:	4770      	bx	lr
	...

0801bc20 <_ZN23MockIgnoredExpectedCallC1Ev>:
class MockIgnoredExpectedCall: public MockExpectedCall
 801bc20:	b580      	push	{r7, lr}
 801bc22:	b082      	sub	sp, #8
 801bc24:	af00      	add	r7, sp, #0
 801bc26:	6078      	str	r0, [r7, #4]
 801bc28:	687b      	ldr	r3, [r7, #4]
 801bc2a:	4618      	mov	r0, r3
 801bc2c:	f7fe fcce 	bl	801a5cc <_ZN16MockExpectedCallC1Ev>
 801bc30:	4a03      	ldr	r2, [pc, #12]	; (801bc40 <_ZN23MockIgnoredExpectedCallC1Ev+0x20>)
 801bc32:	687b      	ldr	r3, [r7, #4]
 801bc34:	601a      	str	r2, [r3, #0]
 801bc36:	687b      	ldr	r3, [r7, #4]
 801bc38:	4618      	mov	r0, r3
 801bc3a:	3708      	adds	r7, #8
 801bc3c:	46bd      	mov	sp, r7
 801bc3e:	bd80      	pop	{r7, pc}
 801bc40:	0802906c 	.word	0x0802906c

0801bc44 <__tcf_0>:

MockExpectedCall& MockIgnoredExpectedCall::instance()
{
    static MockIgnoredExpectedCall call;
 801bc44:	b580      	push	{r7, lr}
 801bc46:	af00      	add	r7, sp, #0
 801bc48:	4801      	ldr	r0, [pc, #4]	; (801bc50 <__tcf_0+0xc>)
 801bc4a:	f000 f831 	bl	801bcb0 <_ZN23MockIgnoredExpectedCallD1Ev>
 801bc4e:	bd80      	pop	{r7, pc}
 801bc50:	20000ebc 	.word	0x20000ebc

0801bc54 <_ZN23MockIgnoredExpectedCall8instanceEv>:
{
 801bc54:	b580      	push	{r7, lr}
 801bc56:	af00      	add	r7, sp, #0
    static MockIgnoredExpectedCall call;
 801bc58:	4b12      	ldr	r3, [pc, #72]	; (801bca4 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801bc5a:	781b      	ldrb	r3, [r3, #0]
 801bc5c:	f3bf 8f5b 	dmb	ish
 801bc60:	b2db      	uxtb	r3, r3
 801bc62:	f003 0301 	and.w	r3, r3, #1
 801bc66:	2b00      	cmp	r3, #0
 801bc68:	bf0c      	ite	eq
 801bc6a:	2301      	moveq	r3, #1
 801bc6c:	2300      	movne	r3, #0
 801bc6e:	b2db      	uxtb	r3, r3
 801bc70:	2b00      	cmp	r3, #0
 801bc72:	d013      	beq.n	801bc9c <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801bc74:	480b      	ldr	r0, [pc, #44]	; (801bca4 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801bc76:	f003 ff03 	bl	801fa80 <__cxa_guard_acquire>
 801bc7a:	4603      	mov	r3, r0
 801bc7c:	2b00      	cmp	r3, #0
 801bc7e:	bf14      	ite	ne
 801bc80:	2301      	movne	r3, #1
 801bc82:	2300      	moveq	r3, #0
 801bc84:	b2db      	uxtb	r3, r3
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	d008      	beq.n	801bc9c <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801bc8a:	4807      	ldr	r0, [pc, #28]	; (801bca8 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
 801bc8c:	f7ff ffc8 	bl	801bc20 <_ZN23MockIgnoredExpectedCallC1Ev>
 801bc90:	4804      	ldr	r0, [pc, #16]	; (801bca4 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801bc92:	f003 ff01 	bl	801fa98 <__cxa_guard_release>
 801bc96:	4805      	ldr	r0, [pc, #20]	; (801bcac <_ZN23MockIgnoredExpectedCall8instanceEv+0x58>)
 801bc98:	f003 ff25 	bl	801fae6 <atexit>
    return call;
 801bc9c:	4b02      	ldr	r3, [pc, #8]	; (801bca8 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
}
 801bc9e:	4618      	mov	r0, r3
 801bca0:	bd80      	pop	{r7, pc}
 801bca2:	bf00      	nop
 801bca4:	20000ec0 	.word	0x20000ec0
 801bca8:	20000ebc 	.word	0x20000ebc
 801bcac:	0801bc45 	.word	0x0801bc45

0801bcb0 <_ZN23MockIgnoredExpectedCallD1Ev>:
 801bcb0:	b580      	push	{r7, lr}
 801bcb2:	b082      	sub	sp, #8
 801bcb4:	af00      	add	r7, sp, #0
 801bcb6:	6078      	str	r0, [r7, #4]
 801bcb8:	4a05      	ldr	r2, [pc, #20]	; (801bcd0 <_ZN23MockIgnoredExpectedCallD1Ev+0x20>)
 801bcba:	687b      	ldr	r3, [r7, #4]
 801bcbc:	601a      	str	r2, [r3, #0]
 801bcbe:	687b      	ldr	r3, [r7, #4]
 801bcc0:	4618      	mov	r0, r3
 801bcc2:	f7fe fc93 	bl	801a5ec <_ZN16MockExpectedCallD1Ev>
 801bcc6:	687b      	ldr	r3, [r7, #4]
 801bcc8:	4618      	mov	r0, r3
 801bcca:	3708      	adds	r7, #8
 801bccc:	46bd      	mov	sp, r7
 801bcce:	bd80      	pop	{r7, pc}
 801bcd0:	0802906c 	.word	0x0802906c

0801bcd4 <_ZN23MockIgnoredExpectedCallD0Ev>:
 801bcd4:	b580      	push	{r7, lr}
 801bcd6:	b082      	sub	sp, #8
 801bcd8:	af00      	add	r7, sp, #0
 801bcda:	6078      	str	r0, [r7, #4]
 801bcdc:	6878      	ldr	r0, [r7, #4]
 801bcde:	f7ff ffe7 	bl	801bcb0 <_ZN23MockIgnoredExpectedCallD1Ev>
 801bce2:	2104      	movs	r1, #4
 801bce4:	6878      	ldr	r0, [r7, #4]
 801bce6:	f7ee fc5d 	bl	800a5a4 <_ZdlPvj>
 801bcea:	687b      	ldr	r3, [r7, #4]
 801bcec:	4618      	mov	r0, r3
 801bcee:	3708      	adds	r7, #8
 801bcf0:	46bd      	mov	sp, r7
 801bcf2:	bd80      	pop	{r7, pc}

0801bcf4 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>:
    class MockExpectedFunctionParameter : public MockNamedValue
 801bcf4:	b580      	push	{r7, lr}
 801bcf6:	b082      	sub	sp, #8
 801bcf8:	af00      	add	r7, sp, #0
 801bcfa:	6078      	str	r0, [r7, #4]
 801bcfc:	4a05      	ldr	r2, [pc, #20]	; (801bd14 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev+0x20>)
 801bcfe:	687b      	ldr	r3, [r7, #4]
 801bd00:	601a      	str	r2, [r3, #0]
 801bd02:	687b      	ldr	r3, [r7, #4]
 801bd04:	4618      	mov	r0, r3
 801bd06:	f001 fd4b 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
 801bd0a:	687b      	ldr	r3, [r7, #4]
 801bd0c:	4618      	mov	r0, r3
 801bd0e:	3708      	adds	r7, #8
 801bd10:	46bd      	mov	sp, r7
 801bd12:	bd80      	pop	{r7, pc}
 801bd14:	0802920c 	.word	0x0802920c

0801bd18 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD0Ev>:
 801bd18:	b580      	push	{r7, lr}
 801bd1a:	b082      	sub	sp, #8
 801bd1c:	af00      	add	r7, sp, #0
 801bd1e:	6078      	str	r0, [r7, #4]
 801bd20:	6878      	ldr	r0, [r7, #4]
 801bd22:	f7ff ffe7 	bl	801bcf4 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>
 801bd26:	2138      	movs	r1, #56	; 0x38
 801bd28:	6878      	ldr	r0, [r7, #4]
 801bd2a:	f7ee fc3b 	bl	800a5a4 <_ZdlPvj>
 801bd2e:	687b      	ldr	r3, [r7, #4]
 801bd30:	4618      	mov	r0, r3
 801bd32:	3708      	adds	r7, #8
 801bd34:	46bd      	mov	sp, r7
 801bd36:	bd80      	pop	{r7, pc}

0801bd38 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>:
    {
    public:
        MockCheckedExpectedCall* expectedCall_;

        MockExpectedCallsListNode* next_;
        MockExpectedCallsListNode(MockCheckedExpectedCall* expectedCall)
 801bd38:	b480      	push	{r7}
 801bd3a:	b083      	sub	sp, #12
 801bd3c:	af00      	add	r7, sp, #0
 801bd3e:	6078      	str	r0, [r7, #4]
 801bd40:	6039      	str	r1, [r7, #0]
            : expectedCall_(expectedCall), next_(NULLPTR) {}
 801bd42:	687b      	ldr	r3, [r7, #4]
 801bd44:	683a      	ldr	r2, [r7, #0]
 801bd46:	601a      	str	r2, [r3, #0]
 801bd48:	687b      	ldr	r3, [r7, #4]
 801bd4a:	2200      	movs	r2, #0
 801bd4c:	605a      	str	r2, [r3, #4]
 801bd4e:	687b      	ldr	r3, [r7, #4]
 801bd50:	4618      	mov	r0, r3
 801bd52:	370c      	adds	r7, #12
 801bd54:	46bd      	mov	sp, r7
 801bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd5a:	4770      	bx	lr

0801bd5c <_ZN21MockExpectedCallsListC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockExpectedCallsList.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCallsList::MockExpectedCallsList() : head_(NULLPTR)
 801bd5c:	b480      	push	{r7}
 801bd5e:	b083      	sub	sp, #12
 801bd60:	af00      	add	r7, sp, #0
 801bd62:	6078      	str	r0, [r7, #4]
 801bd64:	4a06      	ldr	r2, [pc, #24]	; (801bd80 <_ZN21MockExpectedCallsListC1Ev+0x24>)
 801bd66:	687b      	ldr	r3, [r7, #4]
 801bd68:	601a      	str	r2, [r3, #0]
 801bd6a:	687b      	ldr	r3, [r7, #4]
 801bd6c:	2200      	movs	r2, #0
 801bd6e:	605a      	str	r2, [r3, #4]
{
}
 801bd70:	687b      	ldr	r3, [r7, #4]
 801bd72:	4618      	mov	r0, r3
 801bd74:	370c      	adds	r7, #12
 801bd76:	46bd      	mov	sp, r7
 801bd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd7c:	4770      	bx	lr
 801bd7e:	bf00      	nop
 801bd80:	08029360 	.word	0x08029360

0801bd84 <_ZN21MockExpectedCallsListD1Ev>:

MockExpectedCallsList::~MockExpectedCallsList()
 801bd84:	b580      	push	{r7, lr}
 801bd86:	b084      	sub	sp, #16
 801bd88:	af00      	add	r7, sp, #0
 801bd8a:	6078      	str	r0, [r7, #4]
 801bd8c:	4a0d      	ldr	r2, [pc, #52]	; (801bdc4 <_ZN21MockExpectedCallsListD1Ev+0x40>)
 801bd8e:	687b      	ldr	r3, [r7, #4]
 801bd90:	601a      	str	r2, [r3, #0]
{
    while (head_) {
 801bd92:	687b      	ldr	r3, [r7, #4]
 801bd94:	685b      	ldr	r3, [r3, #4]
 801bd96:	2b00      	cmp	r3, #0
 801bd98:	d00f      	beq.n	801bdba <_ZN21MockExpectedCallsListD1Ev+0x36>
        MockExpectedCallsListNode* next = head_->next_;
 801bd9a:	687b      	ldr	r3, [r7, #4]
 801bd9c:	685b      	ldr	r3, [r3, #4]
 801bd9e:	685b      	ldr	r3, [r3, #4]
 801bda0:	60fb      	str	r3, [r7, #12]
        delete head_;
 801bda2:	687b      	ldr	r3, [r7, #4]
 801bda4:	685b      	ldr	r3, [r3, #4]
 801bda6:	2b00      	cmp	r3, #0
 801bda8:	d003      	beq.n	801bdb2 <_ZN21MockExpectedCallsListD1Ev+0x2e>
 801bdaa:	2108      	movs	r1, #8
 801bdac:	4618      	mov	r0, r3
 801bdae:	f7ee fbf9 	bl	800a5a4 <_ZdlPvj>
        head_ = next;
 801bdb2:	687b      	ldr	r3, [r7, #4]
 801bdb4:	68fa      	ldr	r2, [r7, #12]
 801bdb6:	605a      	str	r2, [r3, #4]
    while (head_) {
 801bdb8:	e7eb      	b.n	801bd92 <_ZN21MockExpectedCallsListD1Ev+0xe>
    }
}
 801bdba:	687b      	ldr	r3, [r7, #4]
 801bdbc:	4618      	mov	r0, r3
 801bdbe:	3710      	adds	r7, #16
 801bdc0:	46bd      	mov	sp, r7
 801bdc2:	bd80      	pop	{r7, pc}
 801bdc4:	08029360 	.word	0x08029360

0801bdc8 <_ZN21MockExpectedCallsListD0Ev>:
MockExpectedCallsList::~MockExpectedCallsList()
 801bdc8:	b580      	push	{r7, lr}
 801bdca:	b082      	sub	sp, #8
 801bdcc:	af00      	add	r7, sp, #0
 801bdce:	6078      	str	r0, [r7, #4]
}
 801bdd0:	6878      	ldr	r0, [r7, #4]
 801bdd2:	f7ff ffd7 	bl	801bd84 <_ZN21MockExpectedCallsListD1Ev>
 801bdd6:	2108      	movs	r1, #8
 801bdd8:	6878      	ldr	r0, [r7, #4]
 801bdda:	f7ee fbe3 	bl	800a5a4 <_ZdlPvj>
 801bdde:	687b      	ldr	r3, [r7, #4]
 801bde0:	4618      	mov	r0, r3
 801bde2:	3708      	adds	r7, #8
 801bde4:	46bd      	mov	sp, r7
 801bde6:	bd80      	pop	{r7, pc}

0801bde8 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>:

bool MockExpectedCallsList::hasCallsOutOfOrder() const
{
 801bde8:	b580      	push	{r7, lr}
 801bdea:	b084      	sub	sp, #16
 801bdec:	af00      	add	r7, sp, #0
 801bdee:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bdf0:	687b      	ldr	r3, [r7, #4]
 801bdf2:	685b      	ldr	r3, [r3, #4]
 801bdf4:	60fb      	str	r3, [r7, #12]
 801bdf6:	68fb      	ldr	r3, [r7, #12]
 801bdf8:	2b00      	cmp	r3, #0
 801bdfa:	d011      	beq.n	801be20 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x38>
        if (p->expectedCall_->isOutOfOrder())
 801bdfc:	68fb      	ldr	r3, [r7, #12]
 801bdfe:	681a      	ldr	r2, [r3, #0]
 801be00:	68fb      	ldr	r3, [r7, #12]
 801be02:	681b      	ldr	r3, [r3, #0]
 801be04:	681b      	ldr	r3, [r3, #0]
 801be06:	33d4      	adds	r3, #212	; 0xd4
 801be08:	681b      	ldr	r3, [r3, #0]
 801be0a:	4610      	mov	r0, r2
 801be0c:	4798      	blx	r3
 801be0e:	4603      	mov	r3, r0
 801be10:	2b00      	cmp	r3, #0
 801be12:	d001      	beq.n	801be18 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x30>
            return true;
 801be14:	2301      	movs	r3, #1
 801be16:	e004      	b.n	801be22 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801be18:	68fb      	ldr	r3, [r7, #12]
 801be1a:	685b      	ldr	r3, [r3, #4]
 801be1c:	60fb      	str	r3, [r7, #12]
 801be1e:	e7ea      	b.n	801bdf6 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0xe>
    return false;
 801be20:	2300      	movs	r3, #0
}
 801be22:	4618      	mov	r0, r3
 801be24:	3710      	adds	r7, #16
 801be26:	46bd      	mov	sp, r7
 801be28:	bd80      	pop	{r7, pc}

0801be2a <_ZNK21MockExpectedCallsList4sizeEv>:

unsigned int MockExpectedCallsList::size() const
{
 801be2a:	b480      	push	{r7}
 801be2c:	b085      	sub	sp, #20
 801be2e:	af00      	add	r7, sp, #0
 801be30:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801be32:	2300      	movs	r3, #0
 801be34:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801be36:	687b      	ldr	r3, [r7, #4]
 801be38:	685b      	ldr	r3, [r3, #4]
 801be3a:	60bb      	str	r3, [r7, #8]
 801be3c:	68bb      	ldr	r3, [r7, #8]
 801be3e:	2b00      	cmp	r3, #0
 801be40:	d006      	beq.n	801be50 <_ZNK21MockExpectedCallsList4sizeEv+0x26>
        count++;
 801be42:	68fb      	ldr	r3, [r7, #12]
 801be44:	3301      	adds	r3, #1
 801be46:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801be48:	68bb      	ldr	r3, [r7, #8]
 801be4a:	685b      	ldr	r3, [r3, #4]
 801be4c:	60bb      	str	r3, [r7, #8]
 801be4e:	e7f5      	b.n	801be3c <_ZNK21MockExpectedCallsList4sizeEv+0x12>
    return count;
 801be50:	68fb      	ldr	r3, [r7, #12]
}
 801be52:	4618      	mov	r0, r3
 801be54:	3714      	adds	r7, #20
 801be56:	46bd      	mov	sp, r7
 801be58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be5c:	4770      	bx	lr

0801be5e <_ZNK21MockExpectedCallsList7isEmptyEv>:

bool MockExpectedCallsList::isEmpty() const
{
 801be5e:	b480      	push	{r7}
 801be60:	b083      	sub	sp, #12
 801be62:	af00      	add	r7, sp, #0
 801be64:	6078      	str	r0, [r7, #4]
    return head_ == NULLPTR;
 801be66:	687b      	ldr	r3, [r7, #4]
 801be68:	685b      	ldr	r3, [r3, #4]
 801be6a:	2b00      	cmp	r3, #0
 801be6c:	bf0c      	ite	eq
 801be6e:	2301      	moveq	r3, #1
 801be70:	2300      	movne	r3, #0
 801be72:	b2db      	uxtb	r3, r3
}
 801be74:	4618      	mov	r0, r3
 801be76:	370c      	adds	r7, #12
 801be78:	46bd      	mov	sp, r7
 801be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be7e:	4770      	bx	lr

0801be80 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString>:

unsigned int MockExpectedCallsList::amountOfActualCallsFulfilledFor(const SimpleString& name) const
{
 801be80:	b580      	push	{r7, lr}
 801be82:	b084      	sub	sp, #16
 801be84:	af00      	add	r7, sp, #0
 801be86:	6078      	str	r0, [r7, #4]
 801be88:	6039      	str	r1, [r7, #0]
    unsigned int count = 0;
 801be8a:	2300      	movs	r3, #0
 801be8c:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801be8e:	687b      	ldr	r3, [r7, #4]
 801be90:	685b      	ldr	r3, [r3, #4]
 801be92:	60bb      	str	r3, [r7, #8]
 801be94:	68bb      	ldr	r3, [r7, #8]
 801be96:	2b00      	cmp	r3, #0
 801be98:	d01d      	beq.n	801bed6 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x56>
        if (p->expectedCall_->relatesTo(name)) {
 801be9a:	68bb      	ldr	r3, [r7, #8]
 801be9c:	681a      	ldr	r2, [r3, #0]
 801be9e:	68bb      	ldr	r3, [r7, #8]
 801bea0:	681b      	ldr	r3, [r3, #0]
 801bea2:	681b      	ldr	r3, [r3, #0]
 801bea4:	33b8      	adds	r3, #184	; 0xb8
 801bea6:	681b      	ldr	r3, [r3, #0]
 801bea8:	6839      	ldr	r1, [r7, #0]
 801beaa:	4610      	mov	r0, r2
 801beac:	4798      	blx	r3
 801beae:	4603      	mov	r3, r0
 801beb0:	2b00      	cmp	r3, #0
 801beb2:	d00c      	beq.n	801bece <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x4e>
            count += p->expectedCall_->getActualCallsFulfilled();
 801beb4:	68bb      	ldr	r3, [r7, #8]
 801beb6:	681a      	ldr	r2, [r3, #0]
 801beb8:	68bb      	ldr	r3, [r7, #8]
 801beba:	681b      	ldr	r3, [r3, #0]
 801bebc:	681b      	ldr	r3, [r3, #0]
 801bebe:	33f8      	adds	r3, #248	; 0xf8
 801bec0:	681b      	ldr	r3, [r3, #0]
 801bec2:	4610      	mov	r0, r2
 801bec4:	4798      	blx	r3
 801bec6:	4602      	mov	r2, r0
 801bec8:	68fb      	ldr	r3, [r7, #12]
 801beca:	4413      	add	r3, r2
 801becc:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bece:	68bb      	ldr	r3, [r7, #8]
 801bed0:	685b      	ldr	r3, [r3, #4]
 801bed2:	60bb      	str	r3, [r7, #8]
 801bed4:	e7de      	b.n	801be94 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x14>
        }
    }
    return count;
 801bed6:	68fb      	ldr	r3, [r7, #12]
}
 801bed8:	4618      	mov	r0, r3
 801beda:	3710      	adds	r7, #16
 801bedc:	46bd      	mov	sp, r7
 801bede:	bd80      	pop	{r7, pc}

0801bee0 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv>:

unsigned int MockExpectedCallsList::amountOfUnfulfilledExpectations() const
{
 801bee0:	b580      	push	{r7, lr}
 801bee2:	b084      	sub	sp, #16
 801bee4:	af00      	add	r7, sp, #0
 801bee6:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801bee8:	2300      	movs	r3, #0
 801beea:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801beec:	687b      	ldr	r3, [r7, #4]
 801beee:	685b      	ldr	r3, [r3, #4]
 801bef0:	60bb      	str	r3, [r7, #8]
 801bef2:	68bb      	ldr	r3, [r7, #8]
 801bef4:	2b00      	cmp	r3, #0
 801bef6:	d015      	beq.n	801bf24 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x44>
        if (! p->expectedCall_->isFulfilled()) count++;
 801bef8:	68bb      	ldr	r3, [r7, #8]
 801befa:	681a      	ldr	r2, [r3, #0]
 801befc:	68bb      	ldr	r3, [r7, #8]
 801befe:	681b      	ldr	r3, [r3, #0]
 801bf00:	681b      	ldr	r3, [r3, #0]
 801bf02:	33c0      	adds	r3, #192	; 0xc0
 801bf04:	681b      	ldr	r3, [r3, #0]
 801bf06:	4610      	mov	r0, r2
 801bf08:	4798      	blx	r3
 801bf0a:	4603      	mov	r3, r0
 801bf0c:	f083 0301 	eor.w	r3, r3, #1
 801bf10:	b2db      	uxtb	r3, r3
 801bf12:	2b00      	cmp	r3, #0
 801bf14:	d002      	beq.n	801bf1c <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x3c>
 801bf16:	68fb      	ldr	r3, [r7, #12]
 801bf18:	3301      	adds	r3, #1
 801bf1a:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bf1c:	68bb      	ldr	r3, [r7, #8]
 801bf1e:	685b      	ldr	r3, [r3, #4]
 801bf20:	60bb      	str	r3, [r7, #8]
 801bf22:	e7e6      	b.n	801bef2 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x12>
    return count;
 801bf24:	68fb      	ldr	r3, [r7, #12]
}
 801bf26:	4618      	mov	r0, r3
 801bf28:	3710      	adds	r7, #16
 801bf2a:	46bd      	mov	sp, r7
 801bf2c:	bd80      	pop	{r7, pc}

0801bf2e <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>:

bool MockExpectedCallsList::hasFinalizedMatchingExpectations() const
{
 801bf2e:	b580      	push	{r7, lr}
 801bf30:	b084      	sub	sp, #16
 801bf32:	af00      	add	r7, sp, #0
 801bf34:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bf36:	687b      	ldr	r3, [r7, #4]
 801bf38:	685b      	ldr	r3, [r3, #4]
 801bf3a:	60fb      	str	r3, [r7, #12]
 801bf3c:	68fb      	ldr	r3, [r7, #12]
 801bf3e:	2b00      	cmp	r3, #0
 801bf40:	d011      	beq.n	801bf66 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x38>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801bf42:	68fb      	ldr	r3, [r7, #12]
 801bf44:	681a      	ldr	r2, [r3, #0]
 801bf46:	68fb      	ldr	r3, [r7, #12]
 801bf48:	681b      	ldr	r3, [r3, #0]
 801bf4a:	681b      	ldr	r3, [r3, #0]
 801bf4c:	33c8      	adds	r3, #200	; 0xc8
 801bf4e:	681b      	ldr	r3, [r3, #0]
 801bf50:	4610      	mov	r0, r2
 801bf52:	4798      	blx	r3
 801bf54:	4603      	mov	r3, r0
 801bf56:	2b00      	cmp	r3, #0
 801bf58:	d001      	beq.n	801bf5e <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x30>
            return true;
 801bf5a:	2301      	movs	r3, #1
 801bf5c:	e004      	b.n	801bf68 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bf5e:	68fb      	ldr	r3, [r7, #12]
 801bf60:	685b      	ldr	r3, [r3, #4]
 801bf62:	60fb      	str	r3, [r7, #12]
 801bf64:	e7ea      	b.n	801bf3c <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0xe>
        }
    }
    return false;
 801bf66:	2300      	movs	r3, #0
}
 801bf68:	4618      	mov	r0, r3
 801bf6a:	3710      	adds	r7, #16
 801bf6c:	46bd      	mov	sp, r7
 801bf6e:	bd80      	pop	{r7, pc}

0801bf70 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>:

bool MockExpectedCallsList::hasUnfulfilledExpectations() const
{
 801bf70:	b580      	push	{r7, lr}
 801bf72:	b084      	sub	sp, #16
 801bf74:	af00      	add	r7, sp, #0
 801bf76:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bf78:	687b      	ldr	r3, [r7, #4]
 801bf7a:	685b      	ldr	r3, [r3, #4]
 801bf7c:	60fb      	str	r3, [r7, #12]
 801bf7e:	68fb      	ldr	r3, [r7, #12]
 801bf80:	2b00      	cmp	r3, #0
 801bf82:	d014      	beq.n	801bfae <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x3e>
        if (!p->expectedCall_->isFulfilled()) {
 801bf84:	68fb      	ldr	r3, [r7, #12]
 801bf86:	681a      	ldr	r2, [r3, #0]
 801bf88:	68fb      	ldr	r3, [r7, #12]
 801bf8a:	681b      	ldr	r3, [r3, #0]
 801bf8c:	681b      	ldr	r3, [r3, #0]
 801bf8e:	33c0      	adds	r3, #192	; 0xc0
 801bf90:	681b      	ldr	r3, [r3, #0]
 801bf92:	4610      	mov	r0, r2
 801bf94:	4798      	blx	r3
 801bf96:	4603      	mov	r3, r0
 801bf98:	f083 0301 	eor.w	r3, r3, #1
 801bf9c:	b2db      	uxtb	r3, r3
 801bf9e:	2b00      	cmp	r3, #0
 801bfa0:	d001      	beq.n	801bfa6 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x36>
            return true;
 801bfa2:	2301      	movs	r3, #1
 801bfa4:	e004      	b.n	801bfb0 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bfa6:	68fb      	ldr	r3, [r7, #12]
 801bfa8:	685b      	ldr	r3, [r3, #4]
 801bfaa:	60fb      	str	r3, [r7, #12]
 801bfac:	e7e7      	b.n	801bf7e <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0xe>
        }
    }
    return false;
 801bfae:	2300      	movs	r3, #0
}
 801bfb0:	4618      	mov	r0, r3
 801bfb2:	3710      	adds	r7, #16
 801bfb4:	46bd      	mov	sp, r7
 801bfb6:	bd80      	pop	{r7, pc}

0801bfb8 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>:

bool MockExpectedCallsList::hasExpectationWithName(const SimpleString& name) const
{
 801bfb8:	b580      	push	{r7, lr}
 801bfba:	b084      	sub	sp, #16
 801bfbc:	af00      	add	r7, sp, #0
 801bfbe:	6078      	str	r0, [r7, #4]
 801bfc0:	6039      	str	r1, [r7, #0]
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bfc2:	687b      	ldr	r3, [r7, #4]
 801bfc4:	685b      	ldr	r3, [r3, #4]
 801bfc6:	60fb      	str	r3, [r7, #12]
 801bfc8:	68fb      	ldr	r3, [r7, #12]
 801bfca:	2b00      	cmp	r3, #0
 801bfcc:	d012      	beq.n	801bff4 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3c>
            if (p->expectedCall_->relatesTo(name))
 801bfce:	68fb      	ldr	r3, [r7, #12]
 801bfd0:	681a      	ldr	r2, [r3, #0]
 801bfd2:	68fb      	ldr	r3, [r7, #12]
 801bfd4:	681b      	ldr	r3, [r3, #0]
 801bfd6:	681b      	ldr	r3, [r3, #0]
 801bfd8:	33b8      	adds	r3, #184	; 0xb8
 801bfda:	681b      	ldr	r3, [r3, #0]
 801bfdc:	6839      	ldr	r1, [r7, #0]
 801bfde:	4610      	mov	r0, r2
 801bfe0:	4798      	blx	r3
 801bfe2:	4603      	mov	r3, r0
 801bfe4:	2b00      	cmp	r3, #0
 801bfe6:	d001      	beq.n	801bfec <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x34>
                return true;
 801bfe8:	2301      	movs	r3, #1
 801bfea:	e004      	b.n	801bff6 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3e>
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bfec:	68fb      	ldr	r3, [r7, #12]
 801bfee:	685b      	ldr	r3, [r3, #4]
 801bff0:	60fb      	str	r3, [r7, #12]
 801bff2:	e7e9      	b.n	801bfc8 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x10>
    return false;
 801bff4:	2300      	movs	r3, #0
}
 801bff6:	4618      	mov	r0, r3
 801bff8:	3710      	adds	r7, #16
 801bffa:	46bd      	mov	sp, r7
 801bffc:	bd80      	pop	{r7, pc}
	...

0801c000 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>:

void MockExpectedCallsList::addExpectedCall(MockCheckedExpectedCall* call)
{
 801c000:	b590      	push	{r4, r7, lr}
 801c002:	b085      	sub	sp, #20
 801c004:	af00      	add	r7, sp, #0
 801c006:	6078      	str	r0, [r7, #4]
 801c008:	6039      	str	r1, [r7, #0]
    MockExpectedCallsListNode* newCall = new MockExpectedCallsListNode(call);
 801c00a:	2273      	movs	r2, #115	; 0x73
 801c00c:	4911      	ldr	r1, [pc, #68]	; (801c054 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x54>)
 801c00e:	2008      	movs	r0, #8
 801c010:	f7ee fab4 	bl	800a57c <_ZnwjPKci>
 801c014:	4604      	mov	r4, r0
 801c016:	6839      	ldr	r1, [r7, #0]
 801c018:	4620      	mov	r0, r4
 801c01a:	f7ff fe8d 	bl	801bd38 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>
 801c01e:	60bc      	str	r4, [r7, #8]

    if (head_ == NULLPTR)
 801c020:	687b      	ldr	r3, [r7, #4]
 801c022:	685b      	ldr	r3, [r3, #4]
 801c024:	2b00      	cmp	r3, #0
 801c026:	d103      	bne.n	801c030 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x30>
        head_ = newCall;
 801c028:	687b      	ldr	r3, [r7, #4]
 801c02a:	68ba      	ldr	r2, [r7, #8]
 801c02c:	605a      	str	r2, [r3, #4]
    else {
        MockExpectedCallsListNode* lastCall = head_;
        while (lastCall->next_) lastCall = lastCall->next_;
        lastCall->next_ = newCall;
    }
}
 801c02e:	e00d      	b.n	801c04c <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x4c>
        MockExpectedCallsListNode* lastCall = head_;
 801c030:	687b      	ldr	r3, [r7, #4]
 801c032:	685b      	ldr	r3, [r3, #4]
 801c034:	60fb      	str	r3, [r7, #12]
        while (lastCall->next_) lastCall = lastCall->next_;
 801c036:	68fb      	ldr	r3, [r7, #12]
 801c038:	685b      	ldr	r3, [r3, #4]
 801c03a:	2b00      	cmp	r3, #0
 801c03c:	d003      	beq.n	801c046 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x46>
 801c03e:	68fb      	ldr	r3, [r7, #12]
 801c040:	685b      	ldr	r3, [r3, #4]
 801c042:	60fb      	str	r3, [r7, #12]
 801c044:	e7f7      	b.n	801c036 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x36>
        lastCall->next_ = newCall;
 801c046:	68fb      	ldr	r3, [r7, #12]
 801c048:	68ba      	ldr	r2, [r7, #8]
 801c04a:	605a      	str	r2, [r3, #4]
}
 801c04c:	bf00      	nop
 801c04e:	3714      	adds	r7, #20
 801c050:	46bd      	mov	sp, r7
 801c052:	bd90      	pop	{r4, r7, pc}
 801c054:	08026260 	.word	0x08026260

0801c058 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>:

void MockExpectedCallsList::addPotentiallyMatchingExpectations(const MockExpectedCallsList& list)
{
 801c058:	b580      	push	{r7, lr}
 801c05a:	b084      	sub	sp, #16
 801c05c:	af00      	add	r7, sp, #0
 801c05e:	6078      	str	r0, [r7, #4]
 801c060:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801c062:	683b      	ldr	r3, [r7, #0]
 801c064:	685b      	ldr	r3, [r3, #4]
 801c066:	60fb      	str	r3, [r7, #12]
 801c068:	68fb      	ldr	r3, [r7, #12]
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	d018      	beq.n	801c0a0 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x48>
        if (p->expectedCall_->canMatchActualCalls())
 801c06e:	68fb      	ldr	r3, [r7, #12]
 801c070:	681a      	ldr	r2, [r3, #0]
 801c072:	68fb      	ldr	r3, [r7, #12]
 801c074:	681b      	ldr	r3, [r3, #0]
 801c076:	681b      	ldr	r3, [r3, #0]
 801c078:	33c4      	adds	r3, #196	; 0xc4
 801c07a:	681b      	ldr	r3, [r3, #0]
 801c07c:	4610      	mov	r0, r2
 801c07e:	4798      	blx	r3
 801c080:	4603      	mov	r3, r0
 801c082:	2b00      	cmp	r3, #0
 801c084:	d008      	beq.n	801c098 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x40>
            addExpectedCall(p->expectedCall_);
 801c086:	687b      	ldr	r3, [r7, #4]
 801c088:	681b      	ldr	r3, [r3, #0]
 801c08a:	3330      	adds	r3, #48	; 0x30
 801c08c:	681b      	ldr	r3, [r3, #0]
 801c08e:	68fa      	ldr	r2, [r7, #12]
 801c090:	6812      	ldr	r2, [r2, #0]
 801c092:	4611      	mov	r1, r2
 801c094:	6878      	ldr	r0, [r7, #4]
 801c096:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801c098:	68fb      	ldr	r3, [r7, #12]
 801c09a:	685b      	ldr	r3, [r3, #4]
 801c09c:	60fb      	str	r3, [r7, #12]
 801c09e:	e7e3      	b.n	801c068 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x10>
}
 801c0a0:	bf00      	nop
 801c0a2:	3710      	adds	r7, #16
 801c0a4:	46bd      	mov	sp, r7
 801c0a6:	bd80      	pop	{r7, pc}

0801c0a8 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>:

void MockExpectedCallsList::addExpectationsRelatedTo(const SimpleString& name, const MockExpectedCallsList& list)
{
 801c0a8:	b580      	push	{r7, lr}
 801c0aa:	b086      	sub	sp, #24
 801c0ac:	af00      	add	r7, sp, #0
 801c0ae:	60f8      	str	r0, [r7, #12]
 801c0b0:	60b9      	str	r1, [r7, #8]
 801c0b2:	607a      	str	r2, [r7, #4]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801c0b4:	687b      	ldr	r3, [r7, #4]
 801c0b6:	685b      	ldr	r3, [r3, #4]
 801c0b8:	617b      	str	r3, [r7, #20]
 801c0ba:	697b      	ldr	r3, [r7, #20]
 801c0bc:	2b00      	cmp	r3, #0
 801c0be:	d019      	beq.n	801c0f4 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x4c>
        if (p->expectedCall_->relatesTo(name))
 801c0c0:	697b      	ldr	r3, [r7, #20]
 801c0c2:	681a      	ldr	r2, [r3, #0]
 801c0c4:	697b      	ldr	r3, [r7, #20]
 801c0c6:	681b      	ldr	r3, [r3, #0]
 801c0c8:	681b      	ldr	r3, [r3, #0]
 801c0ca:	33b8      	adds	r3, #184	; 0xb8
 801c0cc:	681b      	ldr	r3, [r3, #0]
 801c0ce:	68b9      	ldr	r1, [r7, #8]
 801c0d0:	4610      	mov	r0, r2
 801c0d2:	4798      	blx	r3
 801c0d4:	4603      	mov	r3, r0
 801c0d6:	2b00      	cmp	r3, #0
 801c0d8:	d008      	beq.n	801c0ec <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x44>
            addExpectedCall(p->expectedCall_);
 801c0da:	68fb      	ldr	r3, [r7, #12]
 801c0dc:	681b      	ldr	r3, [r3, #0]
 801c0de:	3330      	adds	r3, #48	; 0x30
 801c0e0:	681b      	ldr	r3, [r3, #0]
 801c0e2:	697a      	ldr	r2, [r7, #20]
 801c0e4:	6812      	ldr	r2, [r2, #0]
 801c0e6:	4611      	mov	r1, r2
 801c0e8:	68f8      	ldr	r0, [r7, #12]
 801c0ea:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801c0ec:	697b      	ldr	r3, [r7, #20]
 801c0ee:	685b      	ldr	r3, [r3, #4]
 801c0f0:	617b      	str	r3, [r7, #20]
 801c0f2:	e7e2      	b.n	801c0ba <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x12>
}
 801c0f4:	bf00      	nop
 801c0f6:	3718      	adds	r7, #24
 801c0f8:	46bd      	mov	sp, r7
 801c0fa:	bd80      	pop	{r7, pc}

0801c0fc <_ZN21MockExpectedCallsList15addExpectationsERKS_>:

void MockExpectedCallsList::addExpectations(const MockExpectedCallsList& list)
{
 801c0fc:	b580      	push	{r7, lr}
 801c0fe:	b084      	sub	sp, #16
 801c100:	af00      	add	r7, sp, #0
 801c102:	6078      	str	r0, [r7, #4]
 801c104:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801c106:	683b      	ldr	r3, [r7, #0]
 801c108:	685b      	ldr	r3, [r3, #4]
 801c10a:	60fb      	str	r3, [r7, #12]
 801c10c:	68fb      	ldr	r3, [r7, #12]
 801c10e:	2b00      	cmp	r3, #0
 801c110:	d00c      	beq.n	801c12c <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x30>
        addExpectedCall(p->expectedCall_);
 801c112:	687b      	ldr	r3, [r7, #4]
 801c114:	681b      	ldr	r3, [r3, #0]
 801c116:	3330      	adds	r3, #48	; 0x30
 801c118:	681b      	ldr	r3, [r3, #0]
 801c11a:	68fa      	ldr	r2, [r7, #12]
 801c11c:	6812      	ldr	r2, [r2, #0]
 801c11e:	4611      	mov	r1, r2
 801c120:	6878      	ldr	r0, [r7, #4]
 801c122:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801c124:	68fb      	ldr	r3, [r7, #12]
 801c126:	685b      	ldr	r3, [r3, #4]
 801c128:	60fb      	str	r3, [r7, #12]
 801c12a:	e7ef      	b.n	801c10c <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x10>
}
 801c12c:	bf00      	nop
 801c12e:	3710      	adds	r7, #16
 801c130:	46bd      	mov	sp, r7
 801c132:	bd80      	pop	{r7, pc}

0801c134 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsRelatedTo(const SimpleString& name)
{
 801c134:	b580      	push	{r7, lr}
 801c136:	b084      	sub	sp, #16
 801c138:	af00      	add	r7, sp, #0
 801c13a:	6078      	str	r0, [r7, #4]
 801c13c:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c13e:	687b      	ldr	r3, [r7, #4]
 801c140:	685b      	ldr	r3, [r3, #4]
 801c142:	60fb      	str	r3, [r7, #12]
 801c144:	68fb      	ldr	r3, [r7, #12]
 801c146:	2b00      	cmp	r3, #0
 801c148:	d016      	beq.n	801c178 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x44>
        if (! p->expectedCall_->relatesTo(name))
 801c14a:	68fb      	ldr	r3, [r7, #12]
 801c14c:	681a      	ldr	r2, [r3, #0]
 801c14e:	68fb      	ldr	r3, [r7, #12]
 801c150:	681b      	ldr	r3, [r3, #0]
 801c152:	681b      	ldr	r3, [r3, #0]
 801c154:	33b8      	adds	r3, #184	; 0xb8
 801c156:	681b      	ldr	r3, [r3, #0]
 801c158:	6839      	ldr	r1, [r7, #0]
 801c15a:	4610      	mov	r0, r2
 801c15c:	4798      	blx	r3
 801c15e:	4603      	mov	r3, r0
 801c160:	f083 0301 	eor.w	r3, r3, #1
 801c164:	b2db      	uxtb	r3, r3
 801c166:	2b00      	cmp	r3, #0
 801c168:	d002      	beq.n	801c170 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801c16a:	68fb      	ldr	r3, [r7, #12]
 801c16c:	2200      	movs	r2, #0
 801c16e:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c170:	68fb      	ldr	r3, [r7, #12]
 801c172:	685b      	ldr	r3, [r3, #4]
 801c174:	60fb      	str	r3, [r7, #12]
 801c176:	e7e5      	b.n	801c144 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x10>

    pruneEmptyNodeFromList();
 801c178:	687b      	ldr	r3, [r7, #4]
 801c17a:	681b      	ldr	r3, [r3, #0]
 801c17c:	3388      	adds	r3, #136	; 0x88
 801c17e:	681b      	ldr	r3, [r3, #0]
 801c180:	6878      	ldr	r0, [r7, #4]
 801c182:	4798      	blx	r3
}
 801c184:	bf00      	nop
 801c186:	3710      	adds	r7, #16
 801c188:	46bd      	mov	sp, r7
 801c18a:	bd80      	pop	{r7, pc}

0801c18c <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>:

void MockExpectedCallsList::onlyKeepOutOfOrderExpectations()
{
 801c18c:	b580      	push	{r7, lr}
 801c18e:	b084      	sub	sp, #16
 801c190:	af00      	add	r7, sp, #0
 801c192:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c194:	687b      	ldr	r3, [r7, #4]
 801c196:	685b      	ldr	r3, [r3, #4]
 801c198:	60fb      	str	r3, [r7, #12]
 801c19a:	68fb      	ldr	r3, [r7, #12]
 801c19c:	2b00      	cmp	r3, #0
 801c19e:	d015      	beq.n	801c1cc <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x40>
        if (!p->expectedCall_->isOutOfOrder())
 801c1a0:	68fb      	ldr	r3, [r7, #12]
 801c1a2:	681a      	ldr	r2, [r3, #0]
 801c1a4:	68fb      	ldr	r3, [r7, #12]
 801c1a6:	681b      	ldr	r3, [r3, #0]
 801c1a8:	681b      	ldr	r3, [r3, #0]
 801c1aa:	33d4      	adds	r3, #212	; 0xd4
 801c1ac:	681b      	ldr	r3, [r3, #0]
 801c1ae:	4610      	mov	r0, r2
 801c1b0:	4798      	blx	r3
 801c1b2:	4603      	mov	r3, r0
 801c1b4:	f083 0301 	eor.w	r3, r3, #1
 801c1b8:	b2db      	uxtb	r3, r3
 801c1ba:	2b00      	cmp	r3, #0
 801c1bc:	d002      	beq.n	801c1c4 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x38>
            p->expectedCall_ = NULLPTR;
 801c1be:	68fb      	ldr	r3, [r7, #12]
 801c1c0:	2200      	movs	r2, #0
 801c1c2:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c1c4:	68fb      	ldr	r3, [r7, #12]
 801c1c6:	685b      	ldr	r3, [r3, #4]
 801c1c8:	60fb      	str	r3, [r7, #12]
 801c1ca:	e7e6      	b.n	801c19a <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0xe>
    pruneEmptyNodeFromList();
 801c1cc:	687b      	ldr	r3, [r7, #4]
 801c1ce:	681b      	ldr	r3, [r3, #0]
 801c1d0:	3388      	adds	r3, #136	; 0x88
 801c1d2:	681b      	ldr	r3, [r3, #0]
 801c1d4:	6878      	ldr	r0, [r7, #4]
 801c1d6:	4798      	blx	r3
}
 801c1d8:	bf00      	nop
 801c1da:	3710      	adds	r7, #16
 801c1dc:	46bd      	mov	sp, r7
 801c1de:	bd80      	pop	{r7, pc}

0801c1e0 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>:

void MockExpectedCallsList::onlyKeepUnmatchingExpectations()
{
 801c1e0:	b580      	push	{r7, lr}
 801c1e2:	b084      	sub	sp, #16
 801c1e4:	af00      	add	r7, sp, #0
 801c1e6:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c1e8:	687b      	ldr	r3, [r7, #4]
 801c1ea:	685b      	ldr	r3, [r3, #4]
 801c1ec:	60fb      	str	r3, [r7, #12]
 801c1ee:	68fb      	ldr	r3, [r7, #12]
 801c1f0:	2b00      	cmp	r3, #0
 801c1f2:	d01b      	beq.n	801c22c <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x4c>
        if (p->expectedCall_->isMatchingActualCallAndFinalized())
 801c1f4:	68fb      	ldr	r3, [r7, #12]
 801c1f6:	681a      	ldr	r2, [r3, #0]
 801c1f8:	68fb      	ldr	r3, [r7, #12]
 801c1fa:	681b      	ldr	r3, [r3, #0]
 801c1fc:	681b      	ldr	r3, [r3, #0]
 801c1fe:	33c8      	adds	r3, #200	; 0xc8
 801c200:	681b      	ldr	r3, [r3, #0]
 801c202:	4610      	mov	r0, r2
 801c204:	4798      	blx	r3
 801c206:	4603      	mov	r3, r0
 801c208:	2b00      	cmp	r3, #0
 801c20a:	d00b      	beq.n	801c224 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x44>
        {
            p->expectedCall_->resetActualCallMatchingState();
 801c20c:	68fb      	ldr	r3, [r7, #12]
 801c20e:	681a      	ldr	r2, [r3, #0]
 801c210:	68fb      	ldr	r3, [r7, #12]
 801c212:	681b      	ldr	r3, [r3, #0]
 801c214:	681b      	ldr	r3, [r3, #0]
 801c216:	33ec      	adds	r3, #236	; 0xec
 801c218:	681b      	ldr	r3, [r3, #0]
 801c21a:	4610      	mov	r0, r2
 801c21c:	4798      	blx	r3
            p->expectedCall_ = NULLPTR;
 801c21e:	68fb      	ldr	r3, [r7, #12]
 801c220:	2200      	movs	r2, #0
 801c222:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c224:	68fb      	ldr	r3, [r7, #12]
 801c226:	685b      	ldr	r3, [r3, #4]
 801c228:	60fb      	str	r3, [r7, #12]
 801c22a:	e7e0      	b.n	801c1ee <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0xe>
        }

    pruneEmptyNodeFromList();
 801c22c:	687b      	ldr	r3, [r7, #4]
 801c22e:	681b      	ldr	r3, [r3, #0]
 801c230:	3388      	adds	r3, #136	; 0x88
 801c232:	681b      	ldr	r3, [r3, #0]
 801c234:	6878      	ldr	r0, [r7, #4]
 801c236:	4798      	blx	r3
}
 801c238:	bf00      	nop
 801c23a:	3710      	adds	r7, #16
 801c23c:	46bd      	mov	sp, r7
 801c23e:	bd80      	pop	{r7, pc}

0801c240 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameterName(const SimpleString& name)
{
 801c240:	b580      	push	{r7, lr}
 801c242:	b084      	sub	sp, #16
 801c244:	af00      	add	r7, sp, #0
 801c246:	6078      	str	r0, [r7, #4]
 801c248:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c24a:	687b      	ldr	r3, [r7, #4]
 801c24c:	685b      	ldr	r3, [r3, #4]
 801c24e:	60fb      	str	r3, [r7, #12]
 801c250:	68fb      	ldr	r3, [r7, #12]
 801c252:	2b00      	cmp	r3, #0
 801c254:	d016      	beq.n	801c284 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasInputParameterWithName(name))
 801c256:	68fb      	ldr	r3, [r7, #12]
 801c258:	681a      	ldr	r2, [r3, #0]
 801c25a:	68fb      	ldr	r3, [r7, #12]
 801c25c:	681b      	ldr	r3, [r3, #0]
 801c25e:	681b      	ldr	r3, [r3, #0]
 801c260:	33a8      	adds	r3, #168	; 0xa8
 801c262:	681b      	ldr	r3, [r3, #0]
 801c264:	6839      	ldr	r1, [r7, #0]
 801c266:	4610      	mov	r0, r2
 801c268:	4798      	blx	r3
 801c26a:	4603      	mov	r3, r0
 801c26c:	f083 0301 	eor.w	r3, r3, #1
 801c270:	b2db      	uxtb	r3, r3
 801c272:	2b00      	cmp	r3, #0
 801c274:	d002      	beq.n	801c27c <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801c276:	68fb      	ldr	r3, [r7, #12]
 801c278:	2200      	movs	r2, #0
 801c27a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c27c:	68fb      	ldr	r3, [r7, #12]
 801c27e:	685b      	ldr	r3, [r3, #4]
 801c280:	60fb      	str	r3, [r7, #12]
 801c282:	e7e5      	b.n	801c250 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801c284:	687b      	ldr	r3, [r7, #4]
 801c286:	681b      	ldr	r3, [r3, #0]
 801c288:	3388      	adds	r3, #136	; 0x88
 801c28a:	681b      	ldr	r3, [r3, #0]
 801c28c:	6878      	ldr	r0, [r7, #4]
 801c28e:	4798      	blx	r3
}
 801c290:	bf00      	nop
 801c292:	3710      	adds	r7, #16
 801c294:	46bd      	mov	sp, r7
 801c296:	bd80      	pop	{r7, pc}

0801c298 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameterName(const SimpleString& name)
{
 801c298:	b580      	push	{r7, lr}
 801c29a:	b084      	sub	sp, #16
 801c29c:	af00      	add	r7, sp, #0
 801c29e:	6078      	str	r0, [r7, #4]
 801c2a0:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c2a2:	687b      	ldr	r3, [r7, #4]
 801c2a4:	685b      	ldr	r3, [r3, #4]
 801c2a6:	60fb      	str	r3, [r7, #12]
 801c2a8:	68fb      	ldr	r3, [r7, #12]
 801c2aa:	2b00      	cmp	r3, #0
 801c2ac:	d016      	beq.n	801c2dc <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasOutputParameterWithName(name))
 801c2ae:	68fb      	ldr	r3, [r7, #12]
 801c2b0:	681a      	ldr	r2, [r3, #0]
 801c2b2:	68fb      	ldr	r3, [r7, #12]
 801c2b4:	681b      	ldr	r3, [r3, #0]
 801c2b6:	681b      	ldr	r3, [r3, #0]
 801c2b8:	33b0      	adds	r3, #176	; 0xb0
 801c2ba:	681b      	ldr	r3, [r3, #0]
 801c2bc:	6839      	ldr	r1, [r7, #0]
 801c2be:	4610      	mov	r0, r2
 801c2c0:	4798      	blx	r3
 801c2c2:	4603      	mov	r3, r0
 801c2c4:	f083 0301 	eor.w	r3, r3, #1
 801c2c8:	b2db      	uxtb	r3, r3
 801c2ca:	2b00      	cmp	r3, #0
 801c2cc:	d002      	beq.n	801c2d4 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801c2ce:	68fb      	ldr	r3, [r7, #12]
 801c2d0:	2200      	movs	r2, #0
 801c2d2:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c2d4:	68fb      	ldr	r3, [r7, #12]
 801c2d6:	685b      	ldr	r3, [r3, #4]
 801c2d8:	60fb      	str	r3, [r7, #12]
 801c2da:	e7e5      	b.n	801c2a8 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801c2dc:	687b      	ldr	r3, [r7, #4]
 801c2de:	681b      	ldr	r3, [r3, #0]
 801c2e0:	3388      	adds	r3, #136	; 0x88
 801c2e2:	681b      	ldr	r3, [r3, #0]
 801c2e4:	6878      	ldr	r0, [r7, #4]
 801c2e6:	4798      	blx	r3
}
 801c2e8:	bf00      	nop
 801c2ea:	3710      	adds	r7, #16
 801c2ec:	46bd      	mov	sp, r7
 801c2ee:	bd80      	pop	{r7, pc}

0801c2f0 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameter(const MockNamedValue& parameter)
{
 801c2f0:	b580      	push	{r7, lr}
 801c2f2:	b084      	sub	sp, #16
 801c2f4:	af00      	add	r7, sp, #0
 801c2f6:	6078      	str	r0, [r7, #4]
 801c2f8:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c2fa:	687b      	ldr	r3, [r7, #4]
 801c2fc:	685b      	ldr	r3, [r3, #4]
 801c2fe:	60fb      	str	r3, [r7, #12]
 801c300:	68fb      	ldr	r3, [r7, #12]
 801c302:	2b00      	cmp	r3, #0
 801c304:	d016      	beq.n	801c334 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasInputParameter(parameter))
 801c306:	68fb      	ldr	r3, [r7, #12]
 801c308:	681a      	ldr	r2, [r3, #0]
 801c30a:	68fb      	ldr	r3, [r7, #12]
 801c30c:	681b      	ldr	r3, [r3, #0]
 801c30e:	681b      	ldr	r3, [r3, #0]
 801c310:	33ac      	adds	r3, #172	; 0xac
 801c312:	681b      	ldr	r3, [r3, #0]
 801c314:	6839      	ldr	r1, [r7, #0]
 801c316:	4610      	mov	r0, r2
 801c318:	4798      	blx	r3
 801c31a:	4603      	mov	r3, r0
 801c31c:	f083 0301 	eor.w	r3, r3, #1
 801c320:	b2db      	uxtb	r3, r3
 801c322:	2b00      	cmp	r3, #0
 801c324:	d002      	beq.n	801c32c <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801c326:	68fb      	ldr	r3, [r7, #12]
 801c328:	2200      	movs	r2, #0
 801c32a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c32c:	68fb      	ldr	r3, [r7, #12]
 801c32e:	685b      	ldr	r3, [r3, #4]
 801c330:	60fb      	str	r3, [r7, #12]
 801c332:	e7e5      	b.n	801c300 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801c334:	687b      	ldr	r3, [r7, #4]
 801c336:	681b      	ldr	r3, [r3, #0]
 801c338:	3388      	adds	r3, #136	; 0x88
 801c33a:	681b      	ldr	r3, [r3, #0]
 801c33c:	6878      	ldr	r0, [r7, #4]
 801c33e:	4798      	blx	r3
}
 801c340:	bf00      	nop
 801c342:	3710      	adds	r7, #16
 801c344:	46bd      	mov	sp, r7
 801c346:	bd80      	pop	{r7, pc}

0801c348 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameter(const MockNamedValue& parameter)
{
 801c348:	b580      	push	{r7, lr}
 801c34a:	b084      	sub	sp, #16
 801c34c:	af00      	add	r7, sp, #0
 801c34e:	6078      	str	r0, [r7, #4]
 801c350:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c352:	687b      	ldr	r3, [r7, #4]
 801c354:	685b      	ldr	r3, [r3, #4]
 801c356:	60fb      	str	r3, [r7, #12]
 801c358:	68fb      	ldr	r3, [r7, #12]
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	d016      	beq.n	801c38c <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasOutputParameter(parameter))
 801c35e:	68fb      	ldr	r3, [r7, #12]
 801c360:	681a      	ldr	r2, [r3, #0]
 801c362:	68fb      	ldr	r3, [r7, #12]
 801c364:	681b      	ldr	r3, [r3, #0]
 801c366:	681b      	ldr	r3, [r3, #0]
 801c368:	33b4      	adds	r3, #180	; 0xb4
 801c36a:	681b      	ldr	r3, [r3, #0]
 801c36c:	6839      	ldr	r1, [r7, #0]
 801c36e:	4610      	mov	r0, r2
 801c370:	4798      	blx	r3
 801c372:	4603      	mov	r3, r0
 801c374:	f083 0301 	eor.w	r3, r3, #1
 801c378:	b2db      	uxtb	r3, r3
 801c37a:	2b00      	cmp	r3, #0
 801c37c:	d002      	beq.n	801c384 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801c37e:	68fb      	ldr	r3, [r7, #12]
 801c380:	2200      	movs	r2, #0
 801c382:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c384:	68fb      	ldr	r3, [r7, #12]
 801c386:	685b      	ldr	r3, [r3, #4]
 801c388:	60fb      	str	r3, [r7, #12]
 801c38a:	e7e5      	b.n	801c358 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801c38c:	687b      	ldr	r3, [r7, #4]
 801c38e:	681b      	ldr	r3, [r3, #0]
 801c390:	3388      	adds	r3, #136	; 0x88
 801c392:	681b      	ldr	r3, [r3, #0]
 801c394:	6878      	ldr	r0, [r7, #4]
 801c396:	4798      	blx	r3
}
 801c398:	bf00      	nop
 801c39a:	3710      	adds	r7, #16
 801c39c:	46bd      	mov	sp, r7
 801c39e:	bd80      	pop	{r7, pc}

0801c3a0 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>:

void MockExpectedCallsList::onlyKeepExpectationsOnObject(const void* objectPtr)
{
 801c3a0:	b580      	push	{r7, lr}
 801c3a2:	b084      	sub	sp, #16
 801c3a4:	af00      	add	r7, sp, #0
 801c3a6:	6078      	str	r0, [r7, #4]
 801c3a8:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c3aa:	687b      	ldr	r3, [r7, #4]
 801c3ac:	685b      	ldr	r3, [r3, #4]
 801c3ae:	60fb      	str	r3, [r7, #12]
 801c3b0:	68fb      	ldr	r3, [r7, #12]
 801c3b2:	2b00      	cmp	r3, #0
 801c3b4:	d016      	beq.n	801c3e4 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x44>
        if (! p->expectedCall_->relatesToObject(objectPtr))
 801c3b6:	68fb      	ldr	r3, [r7, #12]
 801c3b8:	681a      	ldr	r2, [r3, #0]
 801c3ba:	68fb      	ldr	r3, [r7, #12]
 801c3bc:	681b      	ldr	r3, [r3, #0]
 801c3be:	681b      	ldr	r3, [r3, #0]
 801c3c0:	33bc      	adds	r3, #188	; 0xbc
 801c3c2:	681b      	ldr	r3, [r3, #0]
 801c3c4:	6839      	ldr	r1, [r7, #0]
 801c3c6:	4610      	mov	r0, r2
 801c3c8:	4798      	blx	r3
 801c3ca:	4603      	mov	r3, r0
 801c3cc:	f083 0301 	eor.w	r3, r3, #1
 801c3d0:	b2db      	uxtb	r3, r3
 801c3d2:	2b00      	cmp	r3, #0
 801c3d4:	d002      	beq.n	801c3dc <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x3c>
            p->expectedCall_ = NULLPTR;
 801c3d6:	68fb      	ldr	r3, [r7, #12]
 801c3d8:	2200      	movs	r2, #0
 801c3da:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c3dc:	68fb      	ldr	r3, [r7, #12]
 801c3de:	685b      	ldr	r3, [r3, #4]
 801c3e0:	60fb      	str	r3, [r7, #12]
 801c3e2:	e7e5      	b.n	801c3b0 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x10>
    pruneEmptyNodeFromList();
 801c3e4:	687b      	ldr	r3, [r7, #4]
 801c3e6:	681b      	ldr	r3, [r3, #0]
 801c3e8:	3388      	adds	r3, #136	; 0x88
 801c3ea:	681b      	ldr	r3, [r3, #0]
 801c3ec:	6878      	ldr	r0, [r7, #4]
 801c3ee:	4798      	blx	r3
}
 801c3f0:	bf00      	nop
 801c3f2:	3710      	adds	r7, #16
 801c3f4:	46bd      	mov	sp, r7
 801c3f6:	bd80      	pop	{r7, pc}

0801c3f8 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstFinalizedMatchingExpectation()
{
 801c3f8:	b580      	push	{r7, lr}
 801c3fa:	b084      	sub	sp, #16
 801c3fc:	af00      	add	r7, sp, #0
 801c3fe:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c400:	687b      	ldr	r3, [r7, #4]
 801c402:	685b      	ldr	r3, [r3, #4]
 801c404:	60fb      	str	r3, [r7, #12]
 801c406:	68fb      	ldr	r3, [r7, #12]
 801c408:	2b00      	cmp	r3, #0
 801c40a:	d01d      	beq.n	801c448 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801c40c:	68fb      	ldr	r3, [r7, #12]
 801c40e:	681a      	ldr	r2, [r3, #0]
 801c410:	68fb      	ldr	r3, [r7, #12]
 801c412:	681b      	ldr	r3, [r3, #0]
 801c414:	681b      	ldr	r3, [r3, #0]
 801c416:	33c8      	adds	r3, #200	; 0xc8
 801c418:	681b      	ldr	r3, [r3, #0]
 801c41a:	4610      	mov	r0, r2
 801c41c:	4798      	blx	r3
 801c41e:	4603      	mov	r3, r0
 801c420:	2b00      	cmp	r3, #0
 801c422:	d00d      	beq.n	801c440 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801c424:	68fb      	ldr	r3, [r7, #12]
 801c426:	681b      	ldr	r3, [r3, #0]
 801c428:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801c42a:	68fb      	ldr	r3, [r7, #12]
 801c42c:	2200      	movs	r2, #0
 801c42e:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801c430:	687b      	ldr	r3, [r7, #4]
 801c432:	681b      	ldr	r3, [r3, #0]
 801c434:	3388      	adds	r3, #136	; 0x88
 801c436:	681b      	ldr	r3, [r3, #0]
 801c438:	6878      	ldr	r0, [r7, #4]
 801c43a:	4798      	blx	r3
            return matchingCall;
 801c43c:	68bb      	ldr	r3, [r7, #8]
 801c43e:	e004      	b.n	801c44a <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c440:	68fb      	ldr	r3, [r7, #12]
 801c442:	685b      	ldr	r3, [r3, #4]
 801c444:	60fb      	str	r3, [r7, #12]
 801c446:	e7de      	b.n	801c406 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801c448:	2300      	movs	r3, #0
}
 801c44a:	4618      	mov	r0, r3
 801c44c:	3710      	adds	r7, #16
 801c44e:	46bd      	mov	sp, r7
 801c450:	bd80      	pop	{r7, pc}

0801c452 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::getFirstMatchingExpectation()
{
 801c452:	b580      	push	{r7, lr}
 801c454:	b084      	sub	sp, #16
 801c456:	af00      	add	r7, sp, #0
 801c458:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c45a:	687b      	ldr	r3, [r7, #4]
 801c45c:	685b      	ldr	r3, [r3, #4]
 801c45e:	60fb      	str	r3, [r7, #12]
 801c460:	68fb      	ldr	r3, [r7, #12]
 801c462:	2b00      	cmp	r3, #0
 801c464:	d012      	beq.n	801c48c <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3a>
        if (p->expectedCall_->isMatchingActualCall()) {
 801c466:	68fb      	ldr	r3, [r7, #12]
 801c468:	681a      	ldr	r2, [r3, #0]
 801c46a:	68fb      	ldr	r3, [r7, #12]
 801c46c:	681b      	ldr	r3, [r3, #0]
 801c46e:	681b      	ldr	r3, [r3, #0]
 801c470:	33cc      	adds	r3, #204	; 0xcc
 801c472:	681b      	ldr	r3, [r3, #0]
 801c474:	4610      	mov	r0, r2
 801c476:	4798      	blx	r3
 801c478:	4603      	mov	r3, r0
 801c47a:	2b00      	cmp	r3, #0
 801c47c:	d002      	beq.n	801c484 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x32>
            return p->expectedCall_;
 801c47e:	68fb      	ldr	r3, [r7, #12]
 801c480:	681b      	ldr	r3, [r3, #0]
 801c482:	e004      	b.n	801c48e <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3c>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c484:	68fb      	ldr	r3, [r7, #12]
 801c486:	685b      	ldr	r3, [r3, #4]
 801c488:	60fb      	str	r3, [r7, #12]
 801c48a:	e7e9      	b.n	801c460 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801c48c:	2300      	movs	r3, #0
}
 801c48e:	4618      	mov	r0, r3
 801c490:	3710      	adds	r7, #16
 801c492:	46bd      	mov	sp, r7
 801c494:	bd80      	pop	{r7, pc}

0801c496 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstMatchingExpectation()
{
 801c496:	b580      	push	{r7, lr}
 801c498:	b084      	sub	sp, #16
 801c49a:	af00      	add	r7, sp, #0
 801c49c:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c49e:	687b      	ldr	r3, [r7, #4]
 801c4a0:	685b      	ldr	r3, [r3, #4]
 801c4a2:	60fb      	str	r3, [r7, #12]
 801c4a4:	68fb      	ldr	r3, [r7, #12]
 801c4a6:	2b00      	cmp	r3, #0
 801c4a8:	d01d      	beq.n	801c4e6 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCall()) {
 801c4aa:	68fb      	ldr	r3, [r7, #12]
 801c4ac:	681a      	ldr	r2, [r3, #0]
 801c4ae:	68fb      	ldr	r3, [r7, #12]
 801c4b0:	681b      	ldr	r3, [r3, #0]
 801c4b2:	681b      	ldr	r3, [r3, #0]
 801c4b4:	33cc      	adds	r3, #204	; 0xcc
 801c4b6:	681b      	ldr	r3, [r3, #0]
 801c4b8:	4610      	mov	r0, r2
 801c4ba:	4798      	blx	r3
 801c4bc:	4603      	mov	r3, r0
 801c4be:	2b00      	cmp	r3, #0
 801c4c0:	d00d      	beq.n	801c4de <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801c4c2:	68fb      	ldr	r3, [r7, #12]
 801c4c4:	681b      	ldr	r3, [r3, #0]
 801c4c6:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801c4c8:	68fb      	ldr	r3, [r7, #12]
 801c4ca:	2200      	movs	r2, #0
 801c4cc:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801c4ce:	687b      	ldr	r3, [r7, #4]
 801c4d0:	681b      	ldr	r3, [r3, #0]
 801c4d2:	3388      	adds	r3, #136	; 0x88
 801c4d4:	681b      	ldr	r3, [r3, #0]
 801c4d6:	6878      	ldr	r0, [r7, #4]
 801c4d8:	4798      	blx	r3
            return matchingCall;
 801c4da:	68bb      	ldr	r3, [r7, #8]
 801c4dc:	e004      	b.n	801c4e8 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c4de:	68fb      	ldr	r3, [r7, #12]
 801c4e0:	685b      	ldr	r3, [r3, #4]
 801c4e2:	60fb      	str	r3, [r7, #12]
 801c4e4:	e7de      	b.n	801c4a4 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801c4e6:	2300      	movs	r3, #0
}
 801c4e8:	4618      	mov	r0, r3
 801c4ea:	3710      	adds	r7, #16
 801c4ec:	46bd      	mov	sp, r7
 801c4ee:	bd80      	pop	{r7, pc}

0801c4f0 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv>:

void MockExpectedCallsList::pruneEmptyNodeFromList()
{
 801c4f0:	b580      	push	{r7, lr}
 801c4f2:	b086      	sub	sp, #24
 801c4f4:	af00      	add	r7, sp, #0
 801c4f6:	6078      	str	r0, [r7, #4]
    MockExpectedCallsListNode* current = head_;
 801c4f8:	687b      	ldr	r3, [r7, #4]
 801c4fa:	685b      	ldr	r3, [r3, #4]
 801c4fc:	617b      	str	r3, [r7, #20]
    MockExpectedCallsListNode* previous = NULLPTR;
 801c4fe:	2300      	movs	r3, #0
 801c500:	613b      	str	r3, [r7, #16]
    MockExpectedCallsListNode* toBeDeleted = NULLPTR;
 801c502:	2300      	movs	r3, #0
 801c504:	60fb      	str	r3, [r7, #12]

    while (current) {
 801c506:	697b      	ldr	r3, [r7, #20]
 801c508:	2b00      	cmp	r3, #0
 801c50a:	d024      	beq.n	801c556 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x66>
        if (current->expectedCall_ == NULLPTR) {
 801c50c:	697b      	ldr	r3, [r7, #20]
 801c50e:	681b      	ldr	r3, [r3, #0]
 801c510:	2b00      	cmp	r3, #0
 801c512:	d11a      	bne.n	801c54a <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x5a>
            toBeDeleted = current;
 801c514:	697b      	ldr	r3, [r7, #20]
 801c516:	60fb      	str	r3, [r7, #12]
            if (previous == NULLPTR)
 801c518:	693b      	ldr	r3, [r7, #16]
 801c51a:	2b00      	cmp	r3, #0
 801c51c:	d106      	bne.n	801c52c <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x3c>
                head_ = current = current->next_;
 801c51e:	697b      	ldr	r3, [r7, #20]
 801c520:	685b      	ldr	r3, [r3, #4]
 801c522:	617b      	str	r3, [r7, #20]
 801c524:	687b      	ldr	r3, [r7, #4]
 801c526:	697a      	ldr	r2, [r7, #20]
 801c528:	605a      	str	r2, [r3, #4]
 801c52a:	e006      	b.n	801c53a <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x4a>
            else
                current = previous->next_ = current->next_;
 801c52c:	697b      	ldr	r3, [r7, #20]
 801c52e:	685a      	ldr	r2, [r3, #4]
 801c530:	693b      	ldr	r3, [r7, #16]
 801c532:	605a      	str	r2, [r3, #4]
 801c534:	693b      	ldr	r3, [r7, #16]
 801c536:	685b      	ldr	r3, [r3, #4]
 801c538:	617b      	str	r3, [r7, #20]
            delete toBeDeleted;
 801c53a:	68fb      	ldr	r3, [r7, #12]
 801c53c:	2b00      	cmp	r3, #0
 801c53e:	d0e2      	beq.n	801c506 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
 801c540:	2108      	movs	r1, #8
 801c542:	4618      	mov	r0, r3
 801c544:	f7ee f82e 	bl	800a5a4 <_ZdlPvj>
 801c548:	e7dd      	b.n	801c506 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
        else {
            previous = current;
 801c54a:	697b      	ldr	r3, [r7, #20]
 801c54c:	613b      	str	r3, [r7, #16]
            current = current->next_;
 801c54e:	697b      	ldr	r3, [r7, #20]
 801c550:	685b      	ldr	r3, [r3, #4]
 801c552:	617b      	str	r3, [r7, #20]
    while (current) {
 801c554:	e7d7      	b.n	801c506 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
    }
}
 801c556:	bf00      	nop
 801c558:	3718      	adds	r7, #24
 801c55a:	46bd      	mov	sp, r7
 801c55c:	bd80      	pop	{r7, pc}

0801c55e <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>:

void MockExpectedCallsList::deleteAllExpectationsAndClearList()
{
 801c55e:	b580      	push	{r7, lr}
 801c560:	b084      	sub	sp, #16
 801c562:	af00      	add	r7, sp, #0
 801c564:	6078      	str	r0, [r7, #4]
    while (head_) {
 801c566:	687b      	ldr	r3, [r7, #4]
 801c568:	685b      	ldr	r3, [r3, #4]
 801c56a:	2b00      	cmp	r3, #0
 801c56c:	d019      	beq.n	801c5a2 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x44>
        MockExpectedCallsListNode* next = head_->next_;
 801c56e:	687b      	ldr	r3, [r7, #4]
 801c570:	685b      	ldr	r3, [r3, #4]
 801c572:	685b      	ldr	r3, [r3, #4]
 801c574:	60fb      	str	r3, [r7, #12]
        delete head_->expectedCall_;
 801c576:	687b      	ldr	r3, [r7, #4]
 801c578:	685b      	ldr	r3, [r3, #4]
 801c57a:	681b      	ldr	r3, [r3, #0]
 801c57c:	2b00      	cmp	r3, #0
 801c57e:	d004      	beq.n	801c58a <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x2c>
 801c580:	681a      	ldr	r2, [r3, #0]
 801c582:	3204      	adds	r2, #4
 801c584:	6812      	ldr	r2, [r2, #0]
 801c586:	4618      	mov	r0, r3
 801c588:	4790      	blx	r2
        delete head_;
 801c58a:	687b      	ldr	r3, [r7, #4]
 801c58c:	685b      	ldr	r3, [r3, #4]
 801c58e:	2b00      	cmp	r3, #0
 801c590:	d003      	beq.n	801c59a <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x3c>
 801c592:	2108      	movs	r1, #8
 801c594:	4618      	mov	r0, r3
 801c596:	f7ee f805 	bl	800a5a4 <_ZdlPvj>
        head_ = next;
 801c59a:	687b      	ldr	r3, [r7, #4]
 801c59c:	68fa      	ldr	r2, [r7, #12]
 801c59e:	605a      	str	r2, [r3, #4]
    while (head_) {
 801c5a0:	e7e1      	b.n	801c566 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x8>
    }
}
 801c5a2:	bf00      	nop
 801c5a4:	3710      	adds	r7, #16
 801c5a6:	46bd      	mov	sp, r7
 801c5a8:	bd80      	pop	{r7, pc}

0801c5aa <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>:

void MockExpectedCallsList::resetActualCallMatchingState()
{
 801c5aa:	b580      	push	{r7, lr}
 801c5ac:	b084      	sub	sp, #16
 801c5ae:	af00      	add	r7, sp, #0
 801c5b0:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c5b2:	687b      	ldr	r3, [r7, #4]
 801c5b4:	685b      	ldr	r3, [r3, #4]
 801c5b6:	60fb      	str	r3, [r7, #12]
 801c5b8:	68fb      	ldr	r3, [r7, #12]
 801c5ba:	2b00      	cmp	r3, #0
 801c5bc:	d00c      	beq.n	801c5d8 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0x2e>
        p->expectedCall_->resetActualCallMatchingState();
 801c5be:	68fb      	ldr	r3, [r7, #12]
 801c5c0:	681a      	ldr	r2, [r3, #0]
 801c5c2:	68fb      	ldr	r3, [r7, #12]
 801c5c4:	681b      	ldr	r3, [r3, #0]
 801c5c6:	681b      	ldr	r3, [r3, #0]
 801c5c8:	33ec      	adds	r3, #236	; 0xec
 801c5ca:	681b      	ldr	r3, [r3, #0]
 801c5cc:	4610      	mov	r0, r2
 801c5ce:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c5d0:	68fb      	ldr	r3, [r7, #12]
 801c5d2:	685b      	ldr	r3, [r3, #4]
 801c5d4:	60fb      	str	r3, [r7, #12]
 801c5d6:	e7ef      	b.n	801c5b8 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0xe>
}
 801c5d8:	bf00      	nop
 801c5da:	3710      	adds	r7, #16
 801c5dc:	46bd      	mov	sp, r7
 801c5de:	bd80      	pop	{r7, pc}

0801c5e0 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>:

void MockExpectedCallsList::wasPassedToObject()
{
 801c5e0:	b580      	push	{r7, lr}
 801c5e2:	b084      	sub	sp, #16
 801c5e4:	af00      	add	r7, sp, #0
 801c5e6:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c5e8:	687b      	ldr	r3, [r7, #4]
 801c5ea:	685b      	ldr	r3, [r3, #4]
 801c5ec:	60fb      	str	r3, [r7, #12]
 801c5ee:	68fb      	ldr	r3, [r7, #12]
 801c5f0:	2b00      	cmp	r3, #0
 801c5f2:	d00c      	beq.n	801c60e <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0x2e>
        p->expectedCall_->wasPassedToObject();
 801c5f4:	68fb      	ldr	r3, [r7, #12]
 801c5f6:	681a      	ldr	r2, [r3, #0]
 801c5f8:	68fb      	ldr	r3, [r7, #12]
 801c5fa:	681b      	ldr	r3, [r3, #0]
 801c5fc:	681b      	ldr	r3, [r3, #0]
 801c5fe:	33e8      	adds	r3, #232	; 0xe8
 801c600:	681b      	ldr	r3, [r3, #0]
 801c602:	4610      	mov	r0, r2
 801c604:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c606:	68fb      	ldr	r3, [r7, #12]
 801c608:	685b      	ldr	r3, [r3, #4]
 801c60a:	60fb      	str	r3, [r7, #12]
 801c60c:	e7ef      	b.n	801c5ee <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0xe>
}
 801c60e:	bf00      	nop
 801c610:	3710      	adds	r7, #16
 801c612:	46bd      	mov	sp, r7
 801c614:	bd80      	pop	{r7, pc}

0801c616 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>:


void MockExpectedCallsList::parameterWasPassed(const SimpleString& parameterName)
{
 801c616:	b580      	push	{r7, lr}
 801c618:	b084      	sub	sp, #16
 801c61a:	af00      	add	r7, sp, #0
 801c61c:	6078      	str	r0, [r7, #4]
 801c61e:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c620:	687b      	ldr	r3, [r7, #4]
 801c622:	685b      	ldr	r3, [r3, #4]
 801c624:	60fb      	str	r3, [r7, #12]
 801c626:	68fb      	ldr	r3, [r7, #12]
 801c628:	2b00      	cmp	r3, #0
 801c62a:	d00d      	beq.n	801c648 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->inputParameterWasPassed(parameterName);
 801c62c:	68fb      	ldr	r3, [r7, #12]
 801c62e:	681a      	ldr	r2, [r3, #0]
 801c630:	68fb      	ldr	r3, [r7, #12]
 801c632:	681b      	ldr	r3, [r3, #0]
 801c634:	681b      	ldr	r3, [r3, #0]
 801c636:	33dc      	adds	r3, #220	; 0xdc
 801c638:	681b      	ldr	r3, [r3, #0]
 801c63a:	6839      	ldr	r1, [r7, #0]
 801c63c:	4610      	mov	r0, r2
 801c63e:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c640:	68fb      	ldr	r3, [r7, #12]
 801c642:	685b      	ldr	r3, [r3, #4]
 801c644:	60fb      	str	r3, [r7, #12]
 801c646:	e7ee      	b.n	801c626 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x10>
}
 801c648:	bf00      	nop
 801c64a:	3710      	adds	r7, #16
 801c64c:	46bd      	mov	sp, r7
 801c64e:	bd80      	pop	{r7, pc}

0801c650 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>:

void MockExpectedCallsList::outputParameterWasPassed(const SimpleString& parameterName)
{
 801c650:	b580      	push	{r7, lr}
 801c652:	b084      	sub	sp, #16
 801c654:	af00      	add	r7, sp, #0
 801c656:	6078      	str	r0, [r7, #4]
 801c658:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c65a:	687b      	ldr	r3, [r7, #4]
 801c65c:	685b      	ldr	r3, [r3, #4]
 801c65e:	60fb      	str	r3, [r7, #12]
 801c660:	68fb      	ldr	r3, [r7, #12]
 801c662:	2b00      	cmp	r3, #0
 801c664:	d00d      	beq.n	801c682 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->outputParameterWasPassed(parameterName);
 801c666:	68fb      	ldr	r3, [r7, #12]
 801c668:	681a      	ldr	r2, [r3, #0]
 801c66a:	68fb      	ldr	r3, [r7, #12]
 801c66c:	681b      	ldr	r3, [r3, #0]
 801c66e:	681b      	ldr	r3, [r3, #0]
 801c670:	33e0      	adds	r3, #224	; 0xe0
 801c672:	681b      	ldr	r3, [r3, #0]
 801c674:	6839      	ldr	r1, [r7, #0]
 801c676:	4610      	mov	r0, r2
 801c678:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c67a:	68fb      	ldr	r3, [r7, #12]
 801c67c:	685b      	ldr	r3, [r3, #4]
 801c67e:	60fb      	str	r3, [r7, #12]
 801c680:	e7ee      	b.n	801c660 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x10>
}
 801c682:	bf00      	nop
 801c684:	3710      	adds	r7, #16
 801c686:	46bd      	mov	sp, r7
 801c688:	bd80      	pop	{r7, pc}
	...

0801c68c <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>:

static SimpleString stringOrNoneTextWhenEmpty(const SimpleString& inputString, const SimpleString& linePrefix)
{
 801c68c:	b590      	push	{r4, r7, lr}
 801c68e:	b087      	sub	sp, #28
 801c690:	af00      	add	r7, sp, #0
 801c692:	60f8      	str	r0, [r7, #12]
 801c694:	60b9      	str	r1, [r7, #8]
 801c696:	607a      	str	r2, [r7, #4]
    SimpleString str = inputString;
 801c698:	68b9      	ldr	r1, [r7, #8]
 801c69a:	68f8      	ldr	r0, [r7, #12]
 801c69c:	f7f0 fb85 	bl	800cdaa <_ZN12SimpleStringC1ERKS_>
    if (str == "") {
 801c6a0:	f107 0310 	add.w	r3, r7, #16
 801c6a4:	490f      	ldr	r1, [pc, #60]	; (801c6e4 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x58>)
 801c6a6:	4618      	mov	r0, r3
 801c6a8:	f7f0 fb2b 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801c6ac:	f107 0310 	add.w	r3, r7, #16
 801c6b0:	4619      	mov	r1, r3
 801c6b2:	68f8      	ldr	r0, [r7, #12]
 801c6b4:	f7f0 fee9 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801c6b8:	4603      	mov	r3, r0
 801c6ba:	461c      	mov	r4, r3
 801c6bc:	f107 0310 	add.w	r3, r7, #16
 801c6c0:	4618      	mov	r0, r3
 801c6c2:	f7f0 fed6 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801c6c6:	2c00      	cmp	r4, #0
 801c6c8:	d007      	beq.n	801c6da <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x4e>
        str += linePrefix;
 801c6ca:	6879      	ldr	r1, [r7, #4]
 801c6cc:	68f8      	ldr	r0, [r7, #12]
 801c6ce:	f7f0 ff4d 	bl	800d56c <_ZN12SimpleStringpLERKS_>
        str += "<none>";
 801c6d2:	4905      	ldr	r1, [pc, #20]	; (801c6e8 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x5c>)
 801c6d4:	68f8      	ldr	r0, [r7, #12]
 801c6d6:	f7f0 ff5b 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    }
    return str;
 801c6da:	bf00      	nop
}
 801c6dc:	68f8      	ldr	r0, [r7, #12]
 801c6de:	371c      	adds	r7, #28
 801c6e0:	46bd      	mov	sp, r7
 801c6e2:	bd90      	pop	{r4, r7, pc}
 801c6e4:	08026284 	.word	0x08026284
 801c6e8:	08026288 	.word	0x08026288

0801c6ec <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>:

static SimpleString appendStringOnANewLine(const SimpleString& inputString, const SimpleString& linePrefix, const SimpleString& stringToAppend)
{
 801c6ec:	b590      	push	{r4, r7, lr}
 801c6ee:	b087      	sub	sp, #28
 801c6f0:	af00      	add	r7, sp, #0
 801c6f2:	60f8      	str	r0, [r7, #12]
 801c6f4:	60b9      	str	r1, [r7, #8]
 801c6f6:	607a      	str	r2, [r7, #4]
 801c6f8:	603b      	str	r3, [r7, #0]
    SimpleString str = inputString;
 801c6fa:	68b9      	ldr	r1, [r7, #8]
 801c6fc:	68f8      	ldr	r0, [r7, #12]
 801c6fe:	f7f0 fb54 	bl	800cdaa <_ZN12SimpleStringC1ERKS_>
    if (str != "") str += "\n";
 801c702:	f107 0310 	add.w	r3, r7, #16
 801c706:	4912      	ldr	r1, [pc, #72]	; (801c750 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x64>)
 801c708:	4618      	mov	r0, r3
 801c70a:	f7f0 fafa 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801c70e:	f107 0310 	add.w	r3, r7, #16
 801c712:	4619      	mov	r1, r3
 801c714:	68f8      	ldr	r0, [r7, #12]
 801c716:	f7f0 fefd 	bl	800d514 <_ZneRK12SimpleStringS1_>
 801c71a:	4603      	mov	r3, r0
 801c71c:	461c      	mov	r4, r3
 801c71e:	f107 0310 	add.w	r3, r7, #16
 801c722:	4618      	mov	r0, r3
 801c724:	f7f0 fea5 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801c728:	2c00      	cmp	r4, #0
 801c72a:	d003      	beq.n	801c734 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x48>
 801c72c:	4909      	ldr	r1, [pc, #36]	; (801c754 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x68>)
 801c72e:	68f8      	ldr	r0, [r7, #12]
 801c730:	f7f0 ff2e 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    str += linePrefix;
 801c734:	6879      	ldr	r1, [r7, #4]
 801c736:	68f8      	ldr	r0, [r7, #12]
 801c738:	f7f0 ff18 	bl	800d56c <_ZN12SimpleStringpLERKS_>
    str += stringToAppend;
 801c73c:	6839      	ldr	r1, [r7, #0]
 801c73e:	68f8      	ldr	r0, [r7, #12]
 801c740:	f7f0 ff14 	bl	800d56c <_ZN12SimpleStringpLERKS_>
    return str;
 801c744:	bf00      	nop
}
 801c746:	68f8      	ldr	r0, [r7, #12]
 801c748:	371c      	adds	r7, #28
 801c74a:	46bd      	mov	sp, r7
 801c74c:	bd90      	pop	{r4, r7, pc}
 801c74e:	bf00      	nop
 801c750:	08026284 	.word	0x08026284
 801c754:	08026290 	.word	0x08026290

0801c758 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::unfulfilledCallsToString(const SimpleString& linePrefix) const
{
 801c758:	b580      	push	{r7, lr}
 801c75a:	b08c      	sub	sp, #48	; 0x30
 801c75c:	af00      	add	r7, sp, #0
 801c75e:	60f8      	str	r0, [r7, #12]
 801c760:	60b9      	str	r1, [r7, #8]
 801c762:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801c764:	f107 0314 	add.w	r3, r7, #20
 801c768:	4929      	ldr	r1, [pc, #164]	; (801c810 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0xb8>)
 801c76a:	4618      	mov	r0, r3
 801c76c:	f7f0 fac9 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c770:	68bb      	ldr	r3, [r7, #8]
 801c772:	685b      	ldr	r3, [r3, #4]
 801c774:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c778:	2b00      	cmp	r3, #0
 801c77a:	d038      	beq.n	801c7ee <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x96>
        if (!p->expectedCall_->isFulfilled())
 801c77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c77e:	681a      	ldr	r2, [r3, #0]
 801c780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c782:	681b      	ldr	r3, [r3, #0]
 801c784:	681b      	ldr	r3, [r3, #0]
 801c786:	33c0      	adds	r3, #192	; 0xc0
 801c788:	681b      	ldr	r3, [r3, #0]
 801c78a:	4610      	mov	r0, r2
 801c78c:	4798      	blx	r3
 801c78e:	4603      	mov	r3, r0
 801c790:	f083 0301 	eor.w	r3, r3, #1
 801c794:	b2db      	uxtb	r3, r3
 801c796:	2b00      	cmp	r3, #0
 801c798:	d025      	beq.n	801c7e6 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x8e>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801c79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c79c:	6819      	ldr	r1, [r3, #0]
 801c79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7a0:	681b      	ldr	r3, [r3, #0]
 801c7a2:	681b      	ldr	r3, [r3, #0]
 801c7a4:	33f0      	adds	r3, #240	; 0xf0
 801c7a6:	681b      	ldr	r3, [r3, #0]
 801c7a8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801c7ac:	4610      	mov	r0, r2
 801c7ae:	4798      	blx	r3
 801c7b0:	f107 001c 	add.w	r0, r7, #28
 801c7b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c7b8:	f107 0114 	add.w	r1, r7, #20
 801c7bc:	687a      	ldr	r2, [r7, #4]
 801c7be:	f7ff ff95 	bl	801c6ec <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801c7c2:	f107 021c 	add.w	r2, r7, #28
 801c7c6:	f107 0314 	add.w	r3, r7, #20
 801c7ca:	4611      	mov	r1, r2
 801c7cc:	4618      	mov	r0, r3
 801c7ce:	f7f0 fb04 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 801c7d2:	f107 031c 	add.w	r3, r7, #28
 801c7d6:	4618      	mov	r0, r3
 801c7d8:	f7f0 fe4b 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801c7dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c7e0:	4618      	mov	r0, r3
 801c7e2:	f7f0 fe46 	bl	800d472 <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7e8:	685b      	ldr	r3, [r3, #4]
 801c7ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c7ec:	e7c3      	b.n	801c776 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x1e>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801c7ee:	68fb      	ldr	r3, [r7, #12]
 801c7f0:	f107 0114 	add.w	r1, r7, #20
 801c7f4:	687a      	ldr	r2, [r7, #4]
 801c7f6:	4618      	mov	r0, r3
 801c7f8:	f7ff ff48 	bl	801c68c <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801c7fc:	f107 0314 	add.w	r3, r7, #20
 801c800:	4618      	mov	r0, r3
 801c802:	f7f0 fe36 	bl	800d472 <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801c806:	bf00      	nop
}
 801c808:	68f8      	ldr	r0, [r7, #12]
 801c80a:	3730      	adds	r7, #48	; 0x30
 801c80c:	46bd      	mov	sp, r7
 801c80e:	bd80      	pop	{r7, pc}
 801c810:	08026284 	.word	0x08026284

0801c814 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::fulfilledCallsToString(const SimpleString& linePrefix) const
{
 801c814:	b580      	push	{r7, lr}
 801c816:	b08c      	sub	sp, #48	; 0x30
 801c818:	af00      	add	r7, sp, #0
 801c81a:	60f8      	str	r0, [r7, #12]
 801c81c:	60b9      	str	r1, [r7, #8]
 801c81e:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801c820:	f107 0314 	add.w	r3, r7, #20
 801c824:	4928      	ldr	r1, [pc, #160]	; (801c8c8 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0xb4>)
 801c826:	4618      	mov	r0, r3
 801c828:	f7f0 fa6b 	bl	800cd02 <_ZN12SimpleStringC1EPKc>

    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c82c:	68bb      	ldr	r3, [r7, #8]
 801c82e:	685b      	ldr	r3, [r3, #4]
 801c830:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c834:	2b00      	cmp	r3, #0
 801c836:	d035      	beq.n	801c8a4 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x90>
        if (p->expectedCall_->isFulfilled())
 801c838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c83a:	681a      	ldr	r2, [r3, #0]
 801c83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c83e:	681b      	ldr	r3, [r3, #0]
 801c840:	681b      	ldr	r3, [r3, #0]
 801c842:	33c0      	adds	r3, #192	; 0xc0
 801c844:	681b      	ldr	r3, [r3, #0]
 801c846:	4610      	mov	r0, r2
 801c848:	4798      	blx	r3
 801c84a:	4603      	mov	r3, r0
 801c84c:	2b00      	cmp	r3, #0
 801c84e:	d025      	beq.n	801c89c <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x88>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801c850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c852:	6819      	ldr	r1, [r3, #0]
 801c854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c856:	681b      	ldr	r3, [r3, #0]
 801c858:	681b      	ldr	r3, [r3, #0]
 801c85a:	33f0      	adds	r3, #240	; 0xf0
 801c85c:	681b      	ldr	r3, [r3, #0]
 801c85e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801c862:	4610      	mov	r0, r2
 801c864:	4798      	blx	r3
 801c866:	f107 001c 	add.w	r0, r7, #28
 801c86a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c86e:	f107 0114 	add.w	r1, r7, #20
 801c872:	687a      	ldr	r2, [r7, #4]
 801c874:	f7ff ff3a 	bl	801c6ec <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801c878:	f107 021c 	add.w	r2, r7, #28
 801c87c:	f107 0314 	add.w	r3, r7, #20
 801c880:	4611      	mov	r1, r2
 801c882:	4618      	mov	r0, r3
 801c884:	f7f0 faa9 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 801c888:	f107 031c 	add.w	r3, r7, #28
 801c88c:	4618      	mov	r0, r3
 801c88e:	f7f0 fdf0 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801c892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c896:	4618      	mov	r0, r3
 801c898:	f7f0 fdeb 	bl	800d472 <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c89e:	685b      	ldr	r3, [r3, #4]
 801c8a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c8a2:	e7c6      	b.n	801c832 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x1e>

    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801c8a4:	68fb      	ldr	r3, [r7, #12]
 801c8a6:	f107 0114 	add.w	r1, r7, #20
 801c8aa:	687a      	ldr	r2, [r7, #4]
 801c8ac:	4618      	mov	r0, r3
 801c8ae:	f7ff feed 	bl	801c68c <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801c8b2:	f107 0314 	add.w	r3, r7, #20
 801c8b6:	4618      	mov	r0, r3
 801c8b8:	f7f0 fddb 	bl	800d472 <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801c8bc:	bf00      	nop
}
 801c8be:	68f8      	ldr	r0, [r7, #12]
 801c8c0:	3730      	adds	r7, #48	; 0x30
 801c8c2:	46bd      	mov	sp, r7
 801c8c4:	bd80      	pop	{r7, pc}
 801c8c6:	bf00      	nop
 801c8c8:	08026284 	.word	0x08026284

0801c8cc <_ZNK21MockExpectedCallsList25missingParametersToStringEv>:

SimpleString MockExpectedCallsList::missingParametersToString() const
{
 801c8cc:	b580      	push	{r7, lr}
 801c8ce:	b08e      	sub	sp, #56	; 0x38
 801c8d0:	af00      	add	r7, sp, #0
 801c8d2:	6078      	str	r0, [r7, #4]
 801c8d4:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801c8d6:	f107 030c 	add.w	r3, r7, #12
 801c8da:	4936      	ldr	r1, [pc, #216]	; (801c9b4 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801c8dc:	4618      	mov	r0, r3
 801c8de:	f7f0 fa10 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c8e2:	683b      	ldr	r3, [r7, #0]
 801c8e4:	685b      	ldr	r3, [r3, #4]
 801c8e6:	637b      	str	r3, [r7, #52]	; 0x34
 801c8e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c8ea:	2b00      	cmp	r3, #0
 801c8ec:	d044      	beq.n	801c978 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xac>
        if (! p->expectedCall_->isMatchingActualCall())
 801c8ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c8f0:	681a      	ldr	r2, [r3, #0]
 801c8f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c8f4:	681b      	ldr	r3, [r3, #0]
 801c8f6:	681b      	ldr	r3, [r3, #0]
 801c8f8:	33cc      	adds	r3, #204	; 0xcc
 801c8fa:	681b      	ldr	r3, [r3, #0]
 801c8fc:	4610      	mov	r0, r2
 801c8fe:	4798      	blx	r3
 801c900:	4603      	mov	r3, r0
 801c902:	f083 0301 	eor.w	r3, r3, #1
 801c906:	b2db      	uxtb	r3, r3
 801c908:	2b00      	cmp	r3, #0
 801c90a:	d031      	beq.n	801c970 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xa4>
            str = appendStringOnANewLine(str, "", p->expectedCall_->missingParametersToString());
 801c90c:	f107 031c 	add.w	r3, r7, #28
 801c910:	4928      	ldr	r1, [pc, #160]	; (801c9b4 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801c912:	4618      	mov	r0, r3
 801c914:	f7f0 f9f5 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801c918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c91a:	6819      	ldr	r1, [r3, #0]
 801c91c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c91e:	681b      	ldr	r3, [r3, #0]
 801c920:	681b      	ldr	r3, [r3, #0]
 801c922:	33f4      	adds	r3, #244	; 0xf4
 801c924:	681b      	ldr	r3, [r3, #0]
 801c926:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801c92a:	4610      	mov	r0, r2
 801c92c:	4798      	blx	r3
 801c92e:	f107 0014 	add.w	r0, r7, #20
 801c932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c936:	f107 021c 	add.w	r2, r7, #28
 801c93a:	f107 010c 	add.w	r1, r7, #12
 801c93e:	f7ff fed5 	bl	801c6ec <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801c942:	f107 0214 	add.w	r2, r7, #20
 801c946:	f107 030c 	add.w	r3, r7, #12
 801c94a:	4611      	mov	r1, r2
 801c94c:	4618      	mov	r0, r3
 801c94e:	f7f0 fa44 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 801c952:	f107 0314 	add.w	r3, r7, #20
 801c956:	4618      	mov	r0, r3
 801c958:	f7f0 fd8b 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801c95c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c960:	4618      	mov	r0, r3
 801c962:	f7f0 fd86 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801c966:	f107 031c 	add.w	r3, r7, #28
 801c96a:	4618      	mov	r0, r3
 801c96c:	f7f0 fd81 	bl	800d472 <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c972:	685b      	ldr	r3, [r3, #4]
 801c974:	637b      	str	r3, [r7, #52]	; 0x34
 801c976:	e7b7      	b.n	801c8e8 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0x1c>

    return stringOrNoneTextWhenEmpty(str, "");
 801c978:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c97c:	490d      	ldr	r1, [pc, #52]	; (801c9b4 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801c97e:	4618      	mov	r0, r3
 801c980:	f7f0 f9bf 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801c984:	687b      	ldr	r3, [r7, #4]
 801c986:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801c98a:	f107 010c 	add.w	r1, r7, #12
 801c98e:	4618      	mov	r0, r3
 801c990:	f7ff fe7c 	bl	801c68c <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
 801c994:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c998:	4618      	mov	r0, r3
 801c99a:	f7f0 fd6a 	bl	800d472 <_ZN12SimpleStringD1Ev>
    SimpleString str;
 801c99e:	f107 030c 	add.w	r3, r7, #12
 801c9a2:	4618      	mov	r0, r3
 801c9a4:	f7f0 fd65 	bl	800d472 <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, "");
 801c9a8:	bf00      	nop
}
 801c9aa:	6878      	ldr	r0, [r7, #4]
 801c9ac:	3738      	adds	r7, #56	; 0x38
 801c9ae:	46bd      	mov	sp, r7
 801c9b0:	bd80      	pop	{r7, pc}
 801c9b2:	bf00      	nop
 801c9b4:	08026284 	.word	0x08026284

0801c9b8 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>:

bool MockExpectedCallsList::hasUnmatchingExpectationsBecauseOfMissingParameters() const
{
 801c9b8:	b580      	push	{r7, lr}
 801c9ba:	b084      	sub	sp, #16
 801c9bc:	af00      	add	r7, sp, #0
 801c9be:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c9c0:	687b      	ldr	r3, [r7, #4]
 801c9c2:	685b      	ldr	r3, [r3, #4]
 801c9c4:	60fb      	str	r3, [r7, #12]
 801c9c6:	68fb      	ldr	r3, [r7, #12]
 801c9c8:	2b00      	cmp	r3, #0
 801c9ca:	d014      	beq.n	801c9f6 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x3e>
        if (! p->expectedCall_->areParametersMatchingActualCall())
 801c9cc:	68fb      	ldr	r3, [r7, #12]
 801c9ce:	681a      	ldr	r2, [r3, #0]
 801c9d0:	68fb      	ldr	r3, [r7, #12]
 801c9d2:	681b      	ldr	r3, [r3, #0]
 801c9d4:	681b      	ldr	r3, [r3, #0]
 801c9d6:	33d0      	adds	r3, #208	; 0xd0
 801c9d8:	681b      	ldr	r3, [r3, #0]
 801c9da:	4610      	mov	r0, r2
 801c9dc:	4798      	blx	r3
 801c9de:	4603      	mov	r3, r0
 801c9e0:	f083 0301 	eor.w	r3, r3, #1
 801c9e4:	b2db      	uxtb	r3, r3
 801c9e6:	2b00      	cmp	r3, #0
 801c9e8:	d001      	beq.n	801c9ee <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x36>
            return true;
 801c9ea:	2301      	movs	r3, #1
 801c9ec:	e004      	b.n	801c9f8 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c9ee:	68fb      	ldr	r3, [r7, #12]
 801c9f0:	685b      	ldr	r3, [r3, #4]
 801c9f2:	60fb      	str	r3, [r7, #12]
 801c9f4:	e7e7      	b.n	801c9c6 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0xe>
    return false;
 801c9f6:	2300      	movs	r3, #0
}
 801c9f8:	4618      	mov	r0, r3
 801c9fa:	3710      	adds	r7, #16
 801c9fc:	46bd      	mov	sp, r7
 801c9fe:	bd80      	pop	{r7, pc}

0801ca00 <_ZN19MockFailureReporter14crashOnFailureEb>:
    virtual void crashOnFailure(bool shouldCrash) { crashOnFailure_ = shouldCrash; }
 801ca00:	b480      	push	{r7}
 801ca02:	b083      	sub	sp, #12
 801ca04:	af00      	add	r7, sp, #0
 801ca06:	6078      	str	r0, [r7, #4]
 801ca08:	460b      	mov	r3, r1
 801ca0a:	70fb      	strb	r3, [r7, #3]
 801ca0c:	687b      	ldr	r3, [r7, #4]
 801ca0e:	78fa      	ldrb	r2, [r7, #3]
 801ca10:	711a      	strb	r2, [r3, #4]
 801ca12:	bf00      	nop
 801ca14:	370c      	adds	r7, #12
 801ca16:	46bd      	mov	sp, r7
 801ca18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca1c:	4770      	bx	lr
	...

0801ca20 <_ZN33MockFailureReporterTestTerminatorC1Eb>:
#include "CppUTestExt/MockNamedValue.h"

class MockFailureReporterTestTerminator : public TestTerminator
{
public:
    MockFailureReporterTestTerminator(bool crashOnFailure) : crashOnFailure_(crashOnFailure)
 801ca20:	b580      	push	{r7, lr}
 801ca22:	b082      	sub	sp, #8
 801ca24:	af00      	add	r7, sp, #0
 801ca26:	6078      	str	r0, [r7, #4]
 801ca28:	460b      	mov	r3, r1
 801ca2a:	70fb      	strb	r3, [r7, #3]
 801ca2c:	687b      	ldr	r3, [r7, #4]
 801ca2e:	4618      	mov	r0, r3
 801ca30:	f7ed ff6a 	bl	800a908 <_ZN14TestTerminatorC1Ev>
 801ca34:	4a05      	ldr	r2, [pc, #20]	; (801ca4c <_ZN33MockFailureReporterTestTerminatorC1Eb+0x2c>)
 801ca36:	687b      	ldr	r3, [r7, #4]
 801ca38:	601a      	str	r2, [r3, #0]
 801ca3a:	687b      	ldr	r3, [r7, #4]
 801ca3c:	78fa      	ldrb	r2, [r7, #3]
 801ca3e:	711a      	strb	r2, [r3, #4]
    {
    }
 801ca40:	687b      	ldr	r3, [r7, #4]
 801ca42:	4618      	mov	r0, r3
 801ca44:	3708      	adds	r7, #8
 801ca46:	46bd      	mov	sp, r7
 801ca48:	bd80      	pop	{r7, pc}
 801ca4a:	bf00      	nop
 801ca4c:	080293f4 	.word	0x080293f4

0801ca50 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv>:

    virtual void exitCurrentTest() const _override
 801ca50:	b580      	push	{r7, lr}
 801ca52:	b082      	sub	sp, #8
 801ca54:	af00      	add	r7, sp, #0
 801ca56:	6078      	str	r0, [r7, #4]
    {
        if (crashOnFailure_)
 801ca58:	687b      	ldr	r3, [r7, #4]
 801ca5a:	791b      	ldrb	r3, [r3, #4]
 801ca5c:	2b00      	cmp	r3, #0
 801ca5e:	d001      	beq.n	801ca64 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv+0x14>
            UT_CRASH();
 801ca60:	f7f6 f9fe 	bl	8012e60 <_ZN10UtestShell5crashEv>

        UtestShell::getCurrentTestTerminator().exitCurrentTest();
 801ca64:	f7f7 fd40 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ca68:	4603      	mov	r3, r0
 801ca6a:	681a      	ldr	r2, [r3, #0]
 801ca6c:	6812      	ldr	r2, [r2, #0]
 801ca6e:	4618      	mov	r0, r3
 801ca70:	4790      	blx	r2
    } // LCOV_EXCL_LINE
 801ca72:	bf00      	nop
 801ca74:	3708      	adds	r7, #8
 801ca76:	46bd      	mov	sp, r7
 801ca78:	bd80      	pop	{r7, pc}
	...

0801ca7c <_ZN33MockFailureReporterTestTerminatorD1Ev>:

    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801ca7c:	b580      	push	{r7, lr}
 801ca7e:	b082      	sub	sp, #8
 801ca80:	af00      	add	r7, sp, #0
 801ca82:	6078      	str	r0, [r7, #4]
    {
 801ca84:	4a05      	ldr	r2, [pc, #20]	; (801ca9c <_ZN33MockFailureReporterTestTerminatorD1Ev+0x20>)
 801ca86:	687b      	ldr	r3, [r7, #4]
 801ca88:	601a      	str	r2, [r3, #0]
 801ca8a:	687b      	ldr	r3, [r7, #4]
 801ca8c:	4618      	mov	r0, r3
 801ca8e:	f7f7 fdbb 	bl	8014608 <_ZN14TestTerminatorD1Ev>
    }
 801ca92:	687b      	ldr	r3, [r7, #4]
 801ca94:	4618      	mov	r0, r3
 801ca96:	3708      	adds	r7, #8
 801ca98:	46bd      	mov	sp, r7
 801ca9a:	bd80      	pop	{r7, pc}
 801ca9c:	080293f4 	.word	0x080293f4

0801caa0 <_ZN33MockFailureReporterTestTerminatorD0Ev>:
    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801caa0:	b580      	push	{r7, lr}
 801caa2:	b082      	sub	sp, #8
 801caa4:	af00      	add	r7, sp, #0
 801caa6:	6078      	str	r0, [r7, #4]
    }
 801caa8:	6878      	ldr	r0, [r7, #4]
 801caaa:	f7ff ffe7 	bl	801ca7c <_ZN33MockFailureReporterTestTerminatorD1Ev>
 801caae:	2108      	movs	r1, #8
 801cab0:	6878      	ldr	r0, [r7, #4]
 801cab2:	f7ed fd77 	bl	800a5a4 <_ZdlPvj>
 801cab6:	687b      	ldr	r3, [r7, #4]
 801cab8:	4618      	mov	r0, r3
 801caba:	3708      	adds	r7, #8
 801cabc:	46bd      	mov	sp, r7
 801cabe:	bd80      	pop	{r7, pc}

0801cac0 <_ZN19MockFailureReporter8failTestERK11MockFailure>:
    bool crashOnFailure_;

};

void MockFailureReporter::failTest(const MockFailure& failure)
{
 801cac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cac2:	b085      	sub	sp, #20
 801cac4:	af00      	add	r7, sp, #0
 801cac6:	6078      	str	r0, [r7, #4]
 801cac8:	6039      	str	r1, [r7, #0]
    if (!getTestToFail()->hasFailed())
 801caca:	687b      	ldr	r3, [r7, #4]
 801cacc:	681b      	ldr	r3, [r3, #0]
 801cace:	330c      	adds	r3, #12
 801cad0:	681b      	ldr	r3, [r3, #0]
 801cad2:	6878      	ldr	r0, [r7, #4]
 801cad4:	4798      	blx	r3
 801cad6:	4603      	mov	r3, r0
 801cad8:	681a      	ldr	r2, [r3, #0]
 801cada:	321c      	adds	r2, #28
 801cadc:	6812      	ldr	r2, [r2, #0]
 801cade:	4618      	mov	r0, r3
 801cae0:	4790      	blx	r2
 801cae2:	4603      	mov	r3, r0
 801cae4:	f083 0301 	eor.w	r3, r3, #1
 801cae8:	b2db      	uxtb	r3, r3
 801caea:	2b00      	cmp	r3, #0
 801caec:	d01d      	beq.n	801cb2a <_ZN19MockFailureReporter8failTestERK11MockFailure+0x6a>
        getTestToFail()->failWith(failure, MockFailureReporterTestTerminator(crashOnFailure_));
 801caee:	687b      	ldr	r3, [r7, #4]
 801caf0:	681b      	ldr	r3, [r3, #0]
 801caf2:	330c      	adds	r3, #12
 801caf4:	681b      	ldr	r3, [r3, #0]
 801caf6:	6878      	ldr	r0, [r7, #4]
 801caf8:	4798      	blx	r3
 801cafa:	4604      	mov	r4, r0
 801cafc:	6823      	ldr	r3, [r4, #0]
 801cafe:	339c      	adds	r3, #156	; 0x9c
 801cb00:	681d      	ldr	r5, [r3, #0]
 801cb02:	683e      	ldr	r6, [r7, #0]
 801cb04:	687b      	ldr	r3, [r7, #4]
 801cb06:	791a      	ldrb	r2, [r3, #4]
 801cb08:	f107 0308 	add.w	r3, r7, #8
 801cb0c:	4611      	mov	r1, r2
 801cb0e:	4618      	mov	r0, r3
 801cb10:	f7ff ff86 	bl	801ca20 <_ZN33MockFailureReporterTestTerminatorC1Eb>
 801cb14:	f107 0308 	add.w	r3, r7, #8
 801cb18:	461a      	mov	r2, r3
 801cb1a:	4631      	mov	r1, r6
 801cb1c:	4620      	mov	r0, r4
 801cb1e:	47a8      	blx	r5
 801cb20:	f107 0308 	add.w	r3, r7, #8
 801cb24:	4618      	mov	r0, r3
 801cb26:	f7ff ffa9 	bl	801ca7c <_ZN33MockFailureReporterTestTerminatorD1Ev>
} // LCOV_EXCL_LINE
 801cb2a:	bf00      	nop
 801cb2c:	3714      	adds	r7, #20
 801cb2e:	46bd      	mov	sp, r7
 801cb30:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cb32 <_ZN19MockFailureReporter13getTestToFailEv>:

UtestShell* MockFailureReporter::getTestToFail()
{
 801cb32:	b580      	push	{r7, lr}
 801cb34:	b082      	sub	sp, #8
 801cb36:	af00      	add	r7, sp, #0
 801cb38:	6078      	str	r0, [r7, #4]
    return UtestShell::getCurrent();
 801cb3a:	f7f7 fcc5 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 801cb3e:	4603      	mov	r3, r0
}
 801cb40:	4618      	mov	r0, r3
 801cb42:	3708      	adds	r7, #8
 801cb44:	46bd      	mov	sp, r7
 801cb46:	bd80      	pop	{r7, pc}

0801cb48 <_ZN11MockFailureC1EP10UtestShell>:

MockFailure::MockFailure(UtestShell* test) : TestFailure(test, "Test failed with MockFailure without an error! Something went seriously wrong.")
 801cb48:	b590      	push	{r4, r7, lr}
 801cb4a:	b085      	sub	sp, #20
 801cb4c:	af00      	add	r7, sp, #0
 801cb4e:	6078      	str	r0, [r7, #4]
 801cb50:	6039      	str	r1, [r7, #0]
 801cb52:	687c      	ldr	r4, [r7, #4]
 801cb54:	f107 0308 	add.w	r3, r7, #8
 801cb58:	490b      	ldr	r1, [pc, #44]	; (801cb88 <_ZN11MockFailureC1EP10UtestShell+0x40>)
 801cb5a:	4618      	mov	r0, r3
 801cb5c:	f7f0 f8d1 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801cb60:	f107 0308 	add.w	r3, r7, #8
 801cb64:	461a      	mov	r2, r3
 801cb66:	6839      	ldr	r1, [r7, #0]
 801cb68:	4620      	mov	r0, r4
 801cb6a:	f7f1 ff29 	bl	800e9c0 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 801cb6e:	f107 0308 	add.w	r3, r7, #8
 801cb72:	4618      	mov	r0, r3
 801cb74:	f7f0 fc7d 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801cb78:	4a04      	ldr	r2, [pc, #16]	; (801cb8c <_ZN11MockFailureC1EP10UtestShell+0x44>)
 801cb7a:	687b      	ldr	r3, [r7, #4]
 801cb7c:	601a      	str	r2, [r3, #0]
{
}
 801cb7e:	687b      	ldr	r3, [r7, #4]
 801cb80:	4618      	mov	r0, r3
 801cb82:	3714      	adds	r7, #20
 801cb84:	46bd      	mov	sp, r7
 801cb86:	bd90      	pop	{r4, r7, pc}
 801cb88:	08026294 	.word	0x08026294
 801cb8c:	08028380 	.word	0x08028380

0801cb90 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistory(const MockExpectedCallsList& expectations)
{
 801cb90:	b5b0      	push	{r4, r5, r7, lr}
 801cb92:	b08a      	sub	sp, #40	; 0x28
 801cb94:	af00      	add	r7, sp, #0
 801cb96:	6078      	str	r0, [r7, #4]
 801cb98:	6039      	str	r1, [r7, #0]
    message_ += "\tEXPECTED calls that WERE NOT fulfilled:\n";
 801cb9a:	687b      	ldr	r3, [r7, #4]
 801cb9c:	332c      	adds	r3, #44	; 0x2c
 801cb9e:	492b      	ldr	r1, [pc, #172]	; (801cc4c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xbc>)
 801cba0:	4618      	mov	r0, r3
 801cba2:	f7f0 fcf5 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.unfulfilledCallsToString("\t\t");
 801cba6:	687b      	ldr	r3, [r7, #4]
 801cba8:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801cbac:	683b      	ldr	r3, [r7, #0]
 801cbae:	681b      	ldr	r3, [r3, #0]
 801cbb0:	337c      	adds	r3, #124	; 0x7c
 801cbb2:	681c      	ldr	r4, [r3, #0]
 801cbb4:	f107 0310 	add.w	r3, r7, #16
 801cbb8:	4925      	ldr	r1, [pc, #148]	; (801cc50 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801cbba:	4618      	mov	r0, r3
 801cbbc:	f7f0 f8a1 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801cbc0:	f107 0308 	add.w	r3, r7, #8
 801cbc4:	f107 0210 	add.w	r2, r7, #16
 801cbc8:	6839      	ldr	r1, [r7, #0]
 801cbca:	4618      	mov	r0, r3
 801cbcc:	47a0      	blx	r4
 801cbce:	f107 0308 	add.w	r3, r7, #8
 801cbd2:	4619      	mov	r1, r3
 801cbd4:	4628      	mov	r0, r5
 801cbd6:	f7f0 fcc9 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 801cbda:	f107 0308 	add.w	r3, r7, #8
 801cbde:	4618      	mov	r0, r3
 801cbe0:	f7f0 fc47 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801cbe4:	f107 0310 	add.w	r3, r7, #16
 801cbe8:	4618      	mov	r0, r3
 801cbea:	f7f0 fc42 	bl	800d472 <_ZN12SimpleStringD1Ev>
    message_ += "\n\tEXPECTED calls that WERE fulfilled:\n";
 801cbee:	687b      	ldr	r3, [r7, #4]
 801cbf0:	332c      	adds	r3, #44	; 0x2c
 801cbf2:	4918      	ldr	r1, [pc, #96]	; (801cc54 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc4>)
 801cbf4:	4618      	mov	r0, r3
 801cbf6:	f7f0 fccb 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.fulfilledCallsToString("\t\t");
 801cbfa:	687b      	ldr	r3, [r7, #4]
 801cbfc:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801cc00:	683b      	ldr	r3, [r7, #0]
 801cc02:	681b      	ldr	r3, [r3, #0]
 801cc04:	3380      	adds	r3, #128	; 0x80
 801cc06:	681c      	ldr	r4, [r3, #0]
 801cc08:	f107 0320 	add.w	r3, r7, #32
 801cc0c:	4910      	ldr	r1, [pc, #64]	; (801cc50 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801cc0e:	4618      	mov	r0, r3
 801cc10:	f7f0 f877 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801cc14:	f107 0318 	add.w	r3, r7, #24
 801cc18:	f107 0220 	add.w	r2, r7, #32
 801cc1c:	6839      	ldr	r1, [r7, #0]
 801cc1e:	4618      	mov	r0, r3
 801cc20:	47a0      	blx	r4
 801cc22:	f107 0318 	add.w	r3, r7, #24
 801cc26:	4619      	mov	r1, r3
 801cc28:	4628      	mov	r0, r5
 801cc2a:	f7f0 fc9f 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 801cc2e:	f107 0318 	add.w	r3, r7, #24
 801cc32:	4618      	mov	r0, r3
 801cc34:	f7f0 fc1d 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801cc38:	f107 0320 	add.w	r3, r7, #32
 801cc3c:	4618      	mov	r0, r3
 801cc3e:	f7f0 fc18 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 801cc42:	bf00      	nop
 801cc44:	3728      	adds	r7, #40	; 0x28
 801cc46:	46bd      	mov	sp, r7
 801cc48:	bdb0      	pop	{r4, r5, r7, pc}
 801cc4a:	bf00      	nop
 801cc4c:	080262e4 	.word	0x080262e4
 801cc50:	08026310 	.word	0x08026310
 801cc54:	08026314 	.word	0x08026314

0801cc58 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistoryRelatedTo(const SimpleString& name, const MockExpectedCallsList& expectations)
{
 801cc58:	b590      	push	{r4, r7, lr}
 801cc5a:	b08f      	sub	sp, #60	; 0x3c
 801cc5c:	af00      	add	r7, sp, #0
 801cc5e:	60f8      	str	r0, [r7, #12]
 801cc60:	60b9      	str	r1, [r7, #8]
 801cc62:	607a      	str	r2, [r7, #4]
    MockExpectedCallsList expectationsForFunction;
 801cc64:	f107 0310 	add.w	r3, r7, #16
 801cc68:	4618      	mov	r0, r3
 801cc6a:	f7ff f877 	bl	801bd5c <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(name, expectations);
 801cc6e:	f107 0310 	add.w	r3, r7, #16
 801cc72:	687a      	ldr	r2, [r7, #4]
 801cc74:	68b9      	ldr	r1, [r7, #8]
 801cc76:	4618      	mov	r0, r3
 801cc78:	f7ff fa16 	bl	801c0a8 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ += "\tEXPECTED calls that WERE NOT fulfilled related to function: ";
 801cc7c:	68fb      	ldr	r3, [r7, #12]
 801cc7e:	332c      	adds	r3, #44	; 0x2c
 801cc80:	4937      	ldr	r1, [pc, #220]	; (801cd60 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x108>)
 801cc82:	4618      	mov	r0, r3
 801cc84:	f7f0 fc84 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801cc88:	68fb      	ldr	r3, [r7, #12]
 801cc8a:	332c      	adds	r3, #44	; 0x2c
 801cc8c:	68b9      	ldr	r1, [r7, #8]
 801cc8e:	4618      	mov	r0, r3
 801cc90:	f7f0 fc6c 	bl	800d56c <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801cc94:	68fb      	ldr	r3, [r7, #12]
 801cc96:	332c      	adds	r3, #44	; 0x2c
 801cc98:	4932      	ldr	r1, [pc, #200]	; (801cd64 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801cc9a:	4618      	mov	r0, r3
 801cc9c:	f7f0 fc78 	bl	800d590 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.unfulfilledCallsToString("\t\t");
 801cca0:	68fb      	ldr	r3, [r7, #12]
 801cca2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cca6:	f107 0320 	add.w	r3, r7, #32
 801ccaa:	492f      	ldr	r1, [pc, #188]	; (801cd68 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801ccac:	4618      	mov	r0, r3
 801ccae:	f7f0 f828 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801ccb2:	f107 0318 	add.w	r3, r7, #24
 801ccb6:	f107 0220 	add.w	r2, r7, #32
 801ccba:	f107 0110 	add.w	r1, r7, #16
 801ccbe:	4618      	mov	r0, r3
 801ccc0:	f7ff fd4a 	bl	801c758 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>
 801ccc4:	f107 0318 	add.w	r3, r7, #24
 801ccc8:	4619      	mov	r1, r3
 801ccca:	4620      	mov	r0, r4
 801cccc:	f7f0 fc4e 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 801ccd0:	f107 0318 	add.w	r3, r7, #24
 801ccd4:	4618      	mov	r0, r3
 801ccd6:	f7f0 fbcc 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801ccda:	f107 0320 	add.w	r3, r7, #32
 801ccde:	4618      	mov	r0, r3
 801cce0:	f7f0 fbc7 	bl	800d472 <_ZN12SimpleStringD1Ev>

    message_ += "\n\tEXPECTED calls that WERE fulfilled related to function: ";
 801cce4:	68fb      	ldr	r3, [r7, #12]
 801cce6:	332c      	adds	r3, #44	; 0x2c
 801cce8:	4920      	ldr	r1, [pc, #128]	; (801cd6c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x114>)
 801ccea:	4618      	mov	r0, r3
 801ccec:	f7f0 fc50 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801ccf0:	68fb      	ldr	r3, [r7, #12]
 801ccf2:	332c      	adds	r3, #44	; 0x2c
 801ccf4:	68b9      	ldr	r1, [r7, #8]
 801ccf6:	4618      	mov	r0, r3
 801ccf8:	f7f0 fc38 	bl	800d56c <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801ccfc:	68fb      	ldr	r3, [r7, #12]
 801ccfe:	332c      	adds	r3, #44	; 0x2c
 801cd00:	4918      	ldr	r1, [pc, #96]	; (801cd64 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801cd02:	4618      	mov	r0, r3
 801cd04:	f7f0 fc44 	bl	800d590 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.fulfilledCallsToString("\t\t");
 801cd08:	68fb      	ldr	r3, [r7, #12]
 801cd0a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cd0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cd12:	4915      	ldr	r1, [pc, #84]	; (801cd68 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801cd14:	4618      	mov	r0, r3
 801cd16:	f7ef fff4 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801cd1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cd1e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801cd22:	f107 0110 	add.w	r1, r7, #16
 801cd26:	4618      	mov	r0, r3
 801cd28:	f7ff fd74 	bl	801c814 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>
 801cd2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cd30:	4619      	mov	r1, r3
 801cd32:	4620      	mov	r0, r4
 801cd34:	f7f0 fc1a 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 801cd38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cd3c:	4618      	mov	r0, r3
 801cd3e:	f7f0 fb98 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801cd42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cd46:	4618      	mov	r0, r3
 801cd48:	f7f0 fb93 	bl	800d472 <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801cd4c:	f107 0310 	add.w	r3, r7, #16
 801cd50:	4618      	mov	r0, r3
 801cd52:	f7ff f817 	bl	801bd84 <_ZN21MockExpectedCallsListD1Ev>
}
 801cd56:	bf00      	nop
 801cd58:	373c      	adds	r7, #60	; 0x3c
 801cd5a:	46bd      	mov	sp, r7
 801cd5c:	bd90      	pop	{r4, r7, pc}
 801cd5e:	bf00      	nop
 801cd60:	0802633c 	.word	0x0802633c
 801cd64:	0802637c 	.word	0x0802637c
 801cd68:	08026310 	.word	0x08026310
 801cd6c:	08026380 	.word	0x08026380

0801cd70 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockExpectedCallsDidntHappenFailure::MockExpectedCallsDidntHappenFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801cd70:	b590      	push	{r4, r7, lr}
 801cd72:	b087      	sub	sp, #28
 801cd74:	af00      	add	r7, sp, #0
 801cd76:	60f8      	str	r0, [r7, #12]
 801cd78:	60b9      	str	r1, [r7, #8]
 801cd7a:	607a      	str	r2, [r7, #4]
 801cd7c:	68fb      	ldr	r3, [r7, #12]
 801cd7e:	68b9      	ldr	r1, [r7, #8]
 801cd80:	4618      	mov	r0, r3
 801cd82:	f7ff fee1 	bl	801cb48 <_ZN11MockFailureC1EP10UtestShell>
 801cd86:	4a10      	ldr	r2, [pc, #64]	; (801cdc8 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x58>)
 801cd88:	68fb      	ldr	r3, [r7, #12]
 801cd8a:	601a      	str	r2, [r3, #0]
{
    message_ = "Mock Failure: Expected call WAS NOT fulfilled.\n";
 801cd8c:	68fb      	ldr	r3, [r7, #12]
 801cd8e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cd92:	f107 0310 	add.w	r3, r7, #16
 801cd96:	490d      	ldr	r1, [pc, #52]	; (801cdcc <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x5c>)
 801cd98:	4618      	mov	r0, r3
 801cd9a:	f7ef ffb2 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801cd9e:	f107 0310 	add.w	r3, r7, #16
 801cda2:	4619      	mov	r1, r3
 801cda4:	4620      	mov	r0, r4
 801cda6:	f7f0 f818 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 801cdaa:	f107 0310 	add.w	r3, r7, #16
 801cdae:	4618      	mov	r0, r3
 801cdb0:	f7f0 fb5f 	bl	800d472 <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistory(expectations);
 801cdb4:	68fb      	ldr	r3, [r7, #12]
 801cdb6:	6879      	ldr	r1, [r7, #4]
 801cdb8:	4618      	mov	r0, r3
 801cdba:	f7ff fee9 	bl	801cb90 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801cdbe:	68fb      	ldr	r3, [r7, #12]
 801cdc0:	4618      	mov	r0, r3
 801cdc2:	371c      	adds	r7, #28
 801cdc4:	46bd      	mov	sp, r7
 801cdc6:	bd90      	pop	{r4, r7, pc}
 801cdc8:	08028354 	.word	0x08028354
 801cdcc:	080263bc 	.word	0x080263bc

0801cdd0 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockUnexpectedCallHappenedFailure::MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations) : MockFailure(test)
 801cdd0:	b590      	push	{r4, r7, lr}
 801cdd2:	b08d      	sub	sp, #52	; 0x34
 801cdd4:	af00      	add	r7, sp, #0
 801cdd6:	60f8      	str	r0, [r7, #12]
 801cdd8:	60b9      	str	r1, [r7, #8]
 801cdda:	607a      	str	r2, [r7, #4]
 801cddc:	603b      	str	r3, [r7, #0]
 801cdde:	68fb      	ldr	r3, [r7, #12]
 801cde0:	68b9      	ldr	r1, [r7, #8]
 801cde2:	4618      	mov	r0, r3
 801cde4:	f7ff feb0 	bl	801cb48 <_ZN11MockFailureC1EP10UtestShell>
 801cde8:	4a2f      	ldr	r2, [pc, #188]	; (801cea8 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xd8>)
 801cdea:	68fb      	ldr	r3, [r7, #12]
 801cdec:	601a      	str	r2, [r3, #0]
{
    unsigned int amountOfActualCalls = expectations.amountOfActualCallsFulfilledFor(name);
 801cdee:	683b      	ldr	r3, [r7, #0]
 801cdf0:	681b      	ldr	r3, [r3, #0]
 801cdf2:	3310      	adds	r3, #16
 801cdf4:	681b      	ldr	r3, [r3, #0]
 801cdf6:	6879      	ldr	r1, [r7, #4]
 801cdf8:	6838      	ldr	r0, [r7, #0]
 801cdfa:	4798      	blx	r3
 801cdfc:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (amountOfActualCalls > 0) {
 801cdfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce00:	2b00      	cmp	r3, #0
 801ce02:	d027      	beq.n	801ce54 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x84>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801ce04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce06:	1c5a      	adds	r2, r3, #1
 801ce08:	f107 0314 	add.w	r3, r7, #20
 801ce0c:	4611      	mov	r1, r2
 801ce0e:	4618      	mov	r0, r3
 801ce10:	f7f1 fa00 	bl	800e214 <_Z23StringFromOrdinalNumberj>
        message_ = StringFromFormat("Mock Failure: Unexpected additional (%s) call to function: ", ordinalNumber.asCharString());
 801ce14:	68fb      	ldr	r3, [r7, #12]
 801ce16:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ce1a:	f107 0314 	add.w	r3, r7, #20
 801ce1e:	4618      	mov	r0, r3
 801ce20:	f7f0 fafa 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 801ce24:	4602      	mov	r2, r0
 801ce26:	f107 031c 	add.w	r3, r7, #28
 801ce2a:	4920      	ldr	r1, [pc, #128]	; (801ceac <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801ce2c:	4618      	mov	r0, r3
 801ce2e:	f7f1 f827 	bl	800de80 <_Z16StringFromFormatPKcz>
 801ce32:	f107 031c 	add.w	r3, r7, #28
 801ce36:	4619      	mov	r1, r3
 801ce38:	4620      	mov	r0, r4
 801ce3a:	f7ef ffce 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 801ce3e:	f107 031c 	add.w	r3, r7, #28
 801ce42:	4618      	mov	r0, r3
 801ce44:	f7f0 fb15 	bl	800d472 <_ZN12SimpleStringD1Ev>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801ce48:	f107 0314 	add.w	r3, r7, #20
 801ce4c:	4618      	mov	r0, r3
 801ce4e:	f7f0 fb10 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801ce52:	e013      	b.n	801ce7c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xac>
    } else {
        message_ = "Mock Failure: Unexpected call to function: ";
 801ce54:	68fb      	ldr	r3, [r7, #12]
 801ce56:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ce5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ce5e:	4914      	ldr	r1, [pc, #80]	; (801ceb0 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801ce60:	4618      	mov	r0, r3
 801ce62:	f7ef ff4e 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801ce66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ce6a:	4619      	mov	r1, r3
 801ce6c:	4620      	mov	r0, r4
 801ce6e:	f7ef ffb4 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 801ce72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ce76:	4618      	mov	r0, r3
 801ce78:	f7f0 fafb 	bl	800d472 <_ZN12SimpleStringD1Ev>
    }
    message_ += name;
 801ce7c:	68fb      	ldr	r3, [r7, #12]
 801ce7e:	332c      	adds	r3, #44	; 0x2c
 801ce80:	6879      	ldr	r1, [r7, #4]
 801ce82:	4618      	mov	r0, r3
 801ce84:	f7f0 fb72 	bl	800d56c <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801ce88:	68fb      	ldr	r3, [r7, #12]
 801ce8a:	332c      	adds	r3, #44	; 0x2c
 801ce8c:	4909      	ldr	r1, [pc, #36]	; (801ceb4 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801ce8e:	4618      	mov	r0, r3
 801ce90:	f7f0 fb7e 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectations);
 801ce94:	68fb      	ldr	r3, [r7, #12]
 801ce96:	6839      	ldr	r1, [r7, #0]
 801ce98:	4618      	mov	r0, r3
 801ce9a:	f7ff fe79 	bl	801cb90 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801ce9e:	68fb      	ldr	r3, [r7, #12]
 801cea0:	4618      	mov	r0, r3
 801cea2:	3734      	adds	r7, #52	; 0x34
 801cea4:	46bd      	mov	sp, r7
 801cea6:	bd90      	pop	{r4, r7, pc}
 801cea8:	08028cf4 	.word	0x08028cf4
 801ceac:	080263ec 	.word	0x080263ec
 801ceb0:	08026428 	.word	0x08026428
 801ceb4:	0802637c 	.word	0x0802637c

0801ceb8 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockCallOrderFailure::MockCallOrderFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801ceb8:	b590      	push	{r4, r7, lr}
 801ceba:	b089      	sub	sp, #36	; 0x24
 801cebc:	af00      	add	r7, sp, #0
 801cebe:	60f8      	str	r0, [r7, #12]
 801cec0:	60b9      	str	r1, [r7, #8]
 801cec2:	607a      	str	r2, [r7, #4]
 801cec4:	68fb      	ldr	r3, [r7, #12]
 801cec6:	68b9      	ldr	r1, [r7, #8]
 801cec8:	4618      	mov	r0, r3
 801ceca:	f7ff fe3d 	bl	801cb48 <_ZN11MockFailureC1EP10UtestShell>
 801cece:	4a1f      	ldr	r2, [pc, #124]	; (801cf4c <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x94>)
 801ced0:	68fb      	ldr	r3, [r7, #12]
 801ced2:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForOutOfOrder;
 801ced4:	f107 0310 	add.w	r3, r7, #16
 801ced8:	4618      	mov	r0, r3
 801ceda:	f7fe ff3f 	bl	801bd5c <_ZN21MockExpectedCallsListC1Ev>
    expectationsForOutOfOrder.addExpectations(expectations);
 801cede:	f107 0310 	add.w	r3, r7, #16
 801cee2:	6879      	ldr	r1, [r7, #4]
 801cee4:	4618      	mov	r0, r3
 801cee6:	f7ff f909 	bl	801c0fc <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    expectationsForOutOfOrder.onlyKeepOutOfOrderExpectations();
 801ceea:	f107 0310 	add.w	r3, r7, #16
 801ceee:	4618      	mov	r0, r3
 801cef0:	f7ff f94c 	bl	801c18c <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>

    message_ = "Mock Failure: Out of order calls";
 801cef4:	68fb      	ldr	r3, [r7, #12]
 801cef6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cefa:	f107 0318 	add.w	r3, r7, #24
 801cefe:	4914      	ldr	r1, [pc, #80]	; (801cf50 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x98>)
 801cf00:	4618      	mov	r0, r3
 801cf02:	f7ef fefe 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801cf06:	f107 0318 	add.w	r3, r7, #24
 801cf0a:	4619      	mov	r1, r3
 801cf0c:	4620      	mov	r0, r4
 801cf0e:	f7ef ff64 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 801cf12:	f107 0318 	add.w	r3, r7, #24
 801cf16:	4618      	mov	r0, r3
 801cf18:	f7f0 faab 	bl	800d472 <_ZN12SimpleStringD1Ev>
    message_ += "\n";
 801cf1c:	68fb      	ldr	r3, [r7, #12]
 801cf1e:	332c      	adds	r3, #44	; 0x2c
 801cf20:	490c      	ldr	r1, [pc, #48]	; (801cf54 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x9c>)
 801cf22:	4618      	mov	r0, r3
 801cf24:	f7f0 fb34 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectationsForOutOfOrder);
 801cf28:	68fb      	ldr	r3, [r7, #12]
 801cf2a:	f107 0210 	add.w	r2, r7, #16
 801cf2e:	4611      	mov	r1, r2
 801cf30:	4618      	mov	r0, r3
 801cf32:	f7ff fe2d 	bl	801cb90 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
    MockExpectedCallsList expectationsForOutOfOrder;
 801cf36:	f107 0310 	add.w	r3, r7, #16
 801cf3a:	4618      	mov	r0, r3
 801cf3c:	f7fe ff22 	bl	801bd84 <_ZN21MockExpectedCallsListD1Ev>
}
 801cf40:	68fb      	ldr	r3, [r7, #12]
 801cf42:	4618      	mov	r0, r3
 801cf44:	3724      	adds	r7, #36	; 0x24
 801cf46:	46bd      	mov	sp, r7
 801cf48:	bd90      	pop	{r4, r7, pc}
 801cf4a:	bf00      	nop
 801cf4c:	08028328 	.word	0x08028328
 801cf50:	08026454 	.word	0x08026454
 801cf54:	0802637c 	.word	0x0802637c

0801cf58 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedInputParameterFailure::MockUnexpectedInputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801cf58:	b590      	push	{r4, r7, lr}
 801cf5a:	b099      	sub	sp, #100	; 0x64
 801cf5c:	af00      	add	r7, sp, #0
 801cf5e:	60f8      	str	r0, [r7, #12]
 801cf60:	60b9      	str	r1, [r7, #8]
 801cf62:	607a      	str	r2, [r7, #4]
 801cf64:	603b      	str	r3, [r7, #0]
 801cf66:	68fb      	ldr	r3, [r7, #12]
 801cf68:	68b9      	ldr	r1, [r7, #8]
 801cf6a:	4618      	mov	r0, r3
 801cf6c:	f7ff fdec 	bl	801cb48 <_ZN11MockFailureC1EP10UtestShell>
 801cf70:	4a9e      	ldr	r2, [pc, #632]	; (801d1ec <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x294>)
 801cf72:	68fb      	ldr	r3, [r7, #12]
 801cf74:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801cf76:	f107 0310 	add.w	r3, r7, #16
 801cf7a:	4618      	mov	r0, r3
 801cf7c:	f7fe feee 	bl	801bd5c <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801cf80:	f107 0310 	add.w	r3, r7, #16
 801cf84:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801cf86:	6879      	ldr	r1, [r7, #4]
 801cf88:	4618      	mov	r0, r3
 801cf8a:	f7ff f88d 	bl	801c0a8 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithInputParameterName(parameter.getName());
 801cf8e:	683b      	ldr	r3, [r7, #0]
 801cf90:	681b      	ldr	r3, [r3, #0]
 801cf92:	335c      	adds	r3, #92	; 0x5c
 801cf94:	681b      	ldr	r3, [r3, #0]
 801cf96:	f107 0218 	add.w	r2, r7, #24
 801cf9a:	6839      	ldr	r1, [r7, #0]
 801cf9c:	4610      	mov	r0, r2
 801cf9e:	4798      	blx	r3
 801cfa0:	f107 0218 	add.w	r2, r7, #24
 801cfa4:	f107 0310 	add.w	r3, r7, #16
 801cfa8:	4611      	mov	r1, r2
 801cfaa:	4618      	mov	r0, r3
 801cfac:	f7ff f948 	bl	801c240 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>
 801cfb0:	f107 0318 	add.w	r3, r7, #24
 801cfb4:	4618      	mov	r0, r3
 801cfb6:	f7f0 fa5c 	bl	800d472 <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801cfba:	f107 0310 	add.w	r3, r7, #16
 801cfbe:	4618      	mov	r0, r3
 801cfc0:	f7fe ff4d 	bl	801be5e <_ZNK21MockExpectedCallsList7isEmptyEv>
 801cfc4:	4603      	mov	r3, r0
 801cfc6:	2b00      	cmp	r3, #0
 801cfc8:	d037      	beq.n	801d03a <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected parameter name to function \"";
 801cfca:	68fb      	ldr	r3, [r7, #12]
 801cfcc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cfd0:	f107 0320 	add.w	r3, r7, #32
 801cfd4:	4986      	ldr	r1, [pc, #536]	; (801d1f0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x298>)
 801cfd6:	4618      	mov	r0, r3
 801cfd8:	f7ef fe93 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801cfdc:	f107 0320 	add.w	r3, r7, #32
 801cfe0:	4619      	mov	r1, r3
 801cfe2:	4620      	mov	r0, r4
 801cfe4:	f7ef fef9 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 801cfe8:	f107 0320 	add.w	r3, r7, #32
 801cfec:	4618      	mov	r0, r3
 801cfee:	f7f0 fa40 	bl	800d472 <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801cff2:	68fb      	ldr	r3, [r7, #12]
 801cff4:	332c      	adds	r3, #44	; 0x2c
 801cff6:	6879      	ldr	r1, [r7, #4]
 801cff8:	4618      	mov	r0, r3
 801cffa:	f7f0 fab7 	bl	800d56c <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801cffe:	68fb      	ldr	r3, [r7, #12]
 801d000:	332c      	adds	r3, #44	; 0x2c
 801d002:	497c      	ldr	r1, [pc, #496]	; (801d1f4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x29c>)
 801d004:	4618      	mov	r0, r3
 801d006:	f7f0 fac3 	bl	800d590 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801d00a:	68fb      	ldr	r3, [r7, #12]
 801d00c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d010:	683b      	ldr	r3, [r7, #0]
 801d012:	681b      	ldr	r3, [r3, #0]
 801d014:	335c      	adds	r3, #92	; 0x5c
 801d016:	681b      	ldr	r3, [r3, #0]
 801d018:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801d01c:	6839      	ldr	r1, [r7, #0]
 801d01e:	4610      	mov	r0, r2
 801d020:	4798      	blx	r3
 801d022:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d026:	4619      	mov	r1, r3
 801d028:	4620      	mov	r0, r4
 801d02a:	f7f0 fa9f 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 801d02e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d032:	4618      	mov	r0, r3
 801d034:	f7f0 fa1d 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801d038:	e056      	b.n	801d0e8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x190>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter value to parameter \"";
 801d03a:	68fb      	ldr	r3, [r7, #12]
 801d03c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d040:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d044:	496c      	ldr	r1, [pc, #432]	; (801d1f8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a0>)
 801d046:	4618      	mov	r0, r3
 801d048:	f7ef fe5b 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801d04c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d050:	4619      	mov	r1, r3
 801d052:	4620      	mov	r0, r4
 801d054:	f7ef fec1 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 801d058:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d05c:	4618      	mov	r0, r3
 801d05e:	f7f0 fa08 	bl	800d472 <_ZN12SimpleStringD1Ev>
        message_ += parameter.getName();
 801d062:	68fb      	ldr	r3, [r7, #12]
 801d064:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d068:	683b      	ldr	r3, [r7, #0]
 801d06a:	681b      	ldr	r3, [r3, #0]
 801d06c:	335c      	adds	r3, #92	; 0x5c
 801d06e:	681b      	ldr	r3, [r3, #0]
 801d070:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801d074:	6839      	ldr	r1, [r7, #0]
 801d076:	4610      	mov	r0, r2
 801d078:	4798      	blx	r3
 801d07a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d07e:	4619      	mov	r1, r3
 801d080:	4620      	mov	r0, r4
 801d082:	f7f0 fa73 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 801d086:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d08a:	4618      	mov	r0, r3
 801d08c:	f7f0 f9f1 	bl	800d472 <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801d090:	68fb      	ldr	r3, [r7, #12]
 801d092:	332c      	adds	r3, #44	; 0x2c
 801d094:	4959      	ldr	r1, [pc, #356]	; (801d1fc <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a4>)
 801d096:	4618      	mov	r0, r3
 801d098:	f7f0 fa7a 	bl	800d590 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801d09c:	68fb      	ldr	r3, [r7, #12]
 801d09e:	332c      	adds	r3, #44	; 0x2c
 801d0a0:	6879      	ldr	r1, [r7, #4]
 801d0a2:	4618      	mov	r0, r3
 801d0a4:	f7f0 fa62 	bl	800d56c <_ZN12SimpleStringpLERKS_>
        message_ += "\": <";
 801d0a8:	68fb      	ldr	r3, [r7, #12]
 801d0aa:	332c      	adds	r3, #44	; 0x2c
 801d0ac:	4954      	ldr	r1, [pc, #336]	; (801d200 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a8>)
 801d0ae:	4618      	mov	r0, r3
 801d0b0:	f7f0 fa6e 	bl	800d590 <_ZN12SimpleStringpLEPKc>
        message_ += StringFrom(parameter);
 801d0b4:	68fb      	ldr	r3, [r7, #12]
 801d0b6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d0ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d0be:	6839      	ldr	r1, [r7, #0]
 801d0c0:	4618      	mov	r0, r3
 801d0c2:	f7fd faa3 	bl	801a60c <_Z10StringFromRK14MockNamedValue>
 801d0c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d0ca:	4619      	mov	r1, r3
 801d0cc:	4620      	mov	r0, r4
 801d0ce:	f7f0 fa4d 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 801d0d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d0d6:	4618      	mov	r0, r3
 801d0d8:	f7f0 f9cb 	bl	800d472 <_ZN12SimpleStringD1Ev>
        message_ += ">";
 801d0dc:	68fb      	ldr	r3, [r7, #12]
 801d0de:	332c      	adds	r3, #44	; 0x2c
 801d0e0:	4948      	ldr	r1, [pc, #288]	; (801d204 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801d0e2:	4618      	mov	r0, r3
 801d0e4:	f7f0 fa54 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801d0e8:	68fb      	ldr	r3, [r7, #12]
 801d0ea:	332c      	adds	r3, #44	; 0x2c
 801d0ec:	4946      	ldr	r1, [pc, #280]	; (801d208 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801d0ee:	4618      	mov	r0, r3
 801d0f0:	f7f0 fa4e 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801d0f4:	68fb      	ldr	r3, [r7, #12]
 801d0f6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801d0f8:	6879      	ldr	r1, [r7, #4]
 801d0fa:	4618      	mov	r0, r3
 801d0fc:	f7ff fdac 	bl	801cc58 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected parameter passed to function: ";
 801d100:	68fb      	ldr	r3, [r7, #12]
 801d102:	332c      	adds	r3, #44	; 0x2c
 801d104:	4941      	ldr	r1, [pc, #260]	; (801d20c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b4>)
 801d106:	4618      	mov	r0, r3
 801d108:	f7f0 fa42 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801d10c:	68fb      	ldr	r3, [r7, #12]
 801d10e:	332c      	adds	r3, #44	; 0x2c
 801d110:	6879      	ldr	r1, [r7, #4]
 801d112:	4618      	mov	r0, r3
 801d114:	f7f0 fa2a 	bl	800d56c <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801d118:	68fb      	ldr	r3, [r7, #12]
 801d11a:	332c      	adds	r3, #44	; 0x2c
 801d11c:	493a      	ldr	r1, [pc, #232]	; (801d208 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801d11e:	4618      	mov	r0, r3
 801d120:	f7f0 fa36 	bl	800d590 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801d124:	68fb      	ldr	r3, [r7, #12]
 801d126:	332c      	adds	r3, #44	; 0x2c
 801d128:	4939      	ldr	r1, [pc, #228]	; (801d210 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b8>)
 801d12a:	4618      	mov	r0, r3
 801d12c:	f7f0 fa30 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801d130:	68fb      	ldr	r3, [r7, #12]
 801d132:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d136:	683b      	ldr	r3, [r7, #0]
 801d138:	681b      	ldr	r3, [r3, #0]
 801d13a:	3360      	adds	r3, #96	; 0x60
 801d13c:	681b      	ldr	r3, [r3, #0]
 801d13e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801d142:	6839      	ldr	r1, [r7, #0]
 801d144:	4610      	mov	r0, r2
 801d146:	4798      	blx	r3
 801d148:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d14c:	4619      	mov	r1, r3
 801d14e:	4620      	mov	r0, r4
 801d150:	f7f0 fa0c 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 801d154:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d158:	4618      	mov	r0, r3
 801d15a:	f7f0 f98a 	bl	800d472 <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801d15e:	68fb      	ldr	r3, [r7, #12]
 801d160:	332c      	adds	r3, #44	; 0x2c
 801d162:	492c      	ldr	r1, [pc, #176]	; (801d214 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2bc>)
 801d164:	4618      	mov	r0, r3
 801d166:	f7f0 fa13 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801d16a:	68fb      	ldr	r3, [r7, #12]
 801d16c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d170:	683b      	ldr	r3, [r7, #0]
 801d172:	681b      	ldr	r3, [r3, #0]
 801d174:	335c      	adds	r3, #92	; 0x5c
 801d176:	681b      	ldr	r3, [r3, #0]
 801d178:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801d17c:	6839      	ldr	r1, [r7, #0]
 801d17e:	4610      	mov	r0, r2
 801d180:	4798      	blx	r3
 801d182:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d186:	4619      	mov	r1, r3
 801d188:	4620      	mov	r0, r4
 801d18a:	f7f0 f9ef 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 801d18e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d192:	4618      	mov	r0, r3
 801d194:	f7f0 f96d 	bl	800d472 <_ZN12SimpleStringD1Ev>
    message_ += ": <";
 801d198:	68fb      	ldr	r3, [r7, #12]
 801d19a:	332c      	adds	r3, #44	; 0x2c
 801d19c:	491e      	ldr	r1, [pc, #120]	; (801d218 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2c0>)
 801d19e:	4618      	mov	r0, r3
 801d1a0:	f7f0 f9f6 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(parameter);
 801d1a4:	68fb      	ldr	r3, [r7, #12]
 801d1a6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d1aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d1ae:	6839      	ldr	r1, [r7, #0]
 801d1b0:	4618      	mov	r0, r3
 801d1b2:	f7fd fa2b 	bl	801a60c <_Z10StringFromRK14MockNamedValue>
 801d1b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d1ba:	4619      	mov	r1, r3
 801d1bc:	4620      	mov	r0, r4
 801d1be:	f7f0 f9d5 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 801d1c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d1c6:	4618      	mov	r0, r3
 801d1c8:	f7f0 f953 	bl	800d472 <_ZN12SimpleStringD1Ev>
    message_ += ">";
 801d1cc:	68fb      	ldr	r3, [r7, #12]
 801d1ce:	332c      	adds	r3, #44	; 0x2c
 801d1d0:	490c      	ldr	r1, [pc, #48]	; (801d204 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801d1d2:	4618      	mov	r0, r3
 801d1d4:	f7f0 f9dc 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801d1d8:	f107 0310 	add.w	r3, r7, #16
 801d1dc:	4618      	mov	r0, r3
 801d1de:	f7fe fdd1 	bl	801bd84 <_ZN21MockExpectedCallsListD1Ev>
}
 801d1e2:	68fb      	ldr	r3, [r7, #12]
 801d1e4:	4618      	mov	r0, r3
 801d1e6:	3764      	adds	r7, #100	; 0x64
 801d1e8:	46bd      	mov	sp, r7
 801d1ea:	bd90      	pop	{r4, r7, pc}
 801d1ec:	08028cc8 	.word	0x08028cc8
 801d1f0:	08026478 	.word	0x08026478
 801d1f4:	080264b0 	.word	0x080264b0
 801d1f8:	080264b4 	.word	0x080264b4
 801d1fc:	080264ec 	.word	0x080264ec
 801d200:	080264fc 	.word	0x080264fc
 801d204:	08026504 	.word	0x08026504
 801d208:	0802637c 	.word	0x0802637c
 801d20c:	08026508 	.word	0x08026508
 801d210:	08026310 	.word	0x08026310
 801d214:	0802653c 	.word	0x0802653c
 801d218:	08026540 	.word	0x08026540

0801d21c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedOutputParameterFailure::MockUnexpectedOutputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801d21c:	b590      	push	{r4, r7, lr}
 801d21e:	b097      	sub	sp, #92	; 0x5c
 801d220:	af00      	add	r7, sp, #0
 801d222:	60f8      	str	r0, [r7, #12]
 801d224:	60b9      	str	r1, [r7, #8]
 801d226:	607a      	str	r2, [r7, #4]
 801d228:	603b      	str	r3, [r7, #0]
 801d22a:	68fb      	ldr	r3, [r7, #12]
 801d22c:	68b9      	ldr	r1, [r7, #8]
 801d22e:	4618      	mov	r0, r3
 801d230:	f7ff fc8a 	bl	801cb48 <_ZN11MockFailureC1EP10UtestShell>
 801d234:	4a90      	ldr	r2, [pc, #576]	; (801d478 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x25c>)
 801d236:	68fb      	ldr	r3, [r7, #12]
 801d238:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801d23a:	f107 0310 	add.w	r3, r7, #16
 801d23e:	4618      	mov	r0, r3
 801d240:	f7fe fd8c 	bl	801bd5c <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801d244:	f107 0310 	add.w	r3, r7, #16
 801d248:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d24a:	6879      	ldr	r1, [r7, #4]
 801d24c:	4618      	mov	r0, r3
 801d24e:	f7fe ff2b 	bl	801c0a8 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithOutputParameterName(parameter.getName());
 801d252:	683b      	ldr	r3, [r7, #0]
 801d254:	681b      	ldr	r3, [r3, #0]
 801d256:	335c      	adds	r3, #92	; 0x5c
 801d258:	681b      	ldr	r3, [r3, #0]
 801d25a:	f107 0218 	add.w	r2, r7, #24
 801d25e:	6839      	ldr	r1, [r7, #0]
 801d260:	4610      	mov	r0, r2
 801d262:	4798      	blx	r3
 801d264:	f107 0218 	add.w	r2, r7, #24
 801d268:	f107 0310 	add.w	r3, r7, #16
 801d26c:	4611      	mov	r1, r2
 801d26e:	4618      	mov	r0, r3
 801d270:	f7ff f812 	bl	801c298 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>
 801d274:	f107 0318 	add.w	r3, r7, #24
 801d278:	4618      	mov	r0, r3
 801d27a:	f7f0 f8fa 	bl	800d472 <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801d27e:	f107 0310 	add.w	r3, r7, #16
 801d282:	4618      	mov	r0, r3
 801d284:	f7fe fdeb 	bl	801be5e <_ZNK21MockExpectedCallsList7isEmptyEv>
 801d288:	4603      	mov	r3, r0
 801d28a:	2b00      	cmp	r3, #0
 801d28c:	d037      	beq.n	801d2fe <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected output parameter name to function \"";
 801d28e:	68fb      	ldr	r3, [r7, #12]
 801d290:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d294:	f107 0320 	add.w	r3, r7, #32
 801d298:	4978      	ldr	r1, [pc, #480]	; (801d47c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x260>)
 801d29a:	4618      	mov	r0, r3
 801d29c:	f7ef fd31 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801d2a0:	f107 0320 	add.w	r3, r7, #32
 801d2a4:	4619      	mov	r1, r3
 801d2a6:	4620      	mov	r0, r4
 801d2a8:	f7ef fd97 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 801d2ac:	f107 0320 	add.w	r3, r7, #32
 801d2b0:	4618      	mov	r0, r3
 801d2b2:	f7f0 f8de 	bl	800d472 <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801d2b6:	68fb      	ldr	r3, [r7, #12]
 801d2b8:	332c      	adds	r3, #44	; 0x2c
 801d2ba:	6879      	ldr	r1, [r7, #4]
 801d2bc:	4618      	mov	r0, r3
 801d2be:	f7f0 f955 	bl	800d56c <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801d2c2:	68fb      	ldr	r3, [r7, #12]
 801d2c4:	332c      	adds	r3, #44	; 0x2c
 801d2c6:	496e      	ldr	r1, [pc, #440]	; (801d480 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x264>)
 801d2c8:	4618      	mov	r0, r3
 801d2ca:	f7f0 f961 	bl	800d590 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801d2ce:	68fb      	ldr	r3, [r7, #12]
 801d2d0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d2d4:	683b      	ldr	r3, [r7, #0]
 801d2d6:	681b      	ldr	r3, [r3, #0]
 801d2d8:	335c      	adds	r3, #92	; 0x5c
 801d2da:	681b      	ldr	r3, [r3, #0]
 801d2dc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801d2e0:	6839      	ldr	r1, [r7, #0]
 801d2e2:	4610      	mov	r0, r2
 801d2e4:	4798      	blx	r3
 801d2e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d2ea:	4619      	mov	r1, r3
 801d2ec:	4620      	mov	r0, r4
 801d2ee:	f7f0 f93d 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 801d2f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d2f6:	4618      	mov	r0, r3
 801d2f8:	f7f0 f8bb 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801d2fc:	e059      	b.n	801d3b2 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x196>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter type \"";
 801d2fe:	68fb      	ldr	r3, [r7, #12]
 801d300:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d304:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d308:	495e      	ldr	r1, [pc, #376]	; (801d484 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x268>)
 801d30a:	4618      	mov	r0, r3
 801d30c:	f7ef fcf9 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801d310:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d314:	4619      	mov	r1, r3
 801d316:	4620      	mov	r0, r4
 801d318:	f7ef fd5f 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 801d31c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d320:	4618      	mov	r0, r3
 801d322:	f7f0 f8a6 	bl	800d472 <_ZN12SimpleStringD1Ev>
        message_ += parameter.getType();
 801d326:	68fb      	ldr	r3, [r7, #12]
 801d328:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d32c:	683b      	ldr	r3, [r7, #0]
 801d32e:	681b      	ldr	r3, [r3, #0]
 801d330:	3360      	adds	r3, #96	; 0x60
 801d332:	681b      	ldr	r3, [r3, #0]
 801d334:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801d338:	6839      	ldr	r1, [r7, #0]
 801d33a:	4610      	mov	r0, r2
 801d33c:	4798      	blx	r3
 801d33e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d342:	4619      	mov	r1, r3
 801d344:	4620      	mov	r0, r4
 801d346:	f7f0 f911 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 801d34a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d34e:	4618      	mov	r0, r3
 801d350:	f7f0 f88f 	bl	800d472 <_ZN12SimpleStringD1Ev>
        message_ += "\" to output parameter \"";
 801d354:	68fb      	ldr	r3, [r7, #12]
 801d356:	332c      	adds	r3, #44	; 0x2c
 801d358:	494b      	ldr	r1, [pc, #300]	; (801d488 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x26c>)
 801d35a:	4618      	mov	r0, r3
 801d35c:	f7f0 f918 	bl	800d590 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801d360:	68fb      	ldr	r3, [r7, #12]
 801d362:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d366:	683b      	ldr	r3, [r7, #0]
 801d368:	681b      	ldr	r3, [r3, #0]
 801d36a:	335c      	adds	r3, #92	; 0x5c
 801d36c:	681b      	ldr	r3, [r3, #0]
 801d36e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801d372:	6839      	ldr	r1, [r7, #0]
 801d374:	4610      	mov	r0, r2
 801d376:	4798      	blx	r3
 801d378:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d37c:	4619      	mov	r1, r3
 801d37e:	4620      	mov	r0, r4
 801d380:	f7f0 f8f4 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 801d384:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d388:	4618      	mov	r0, r3
 801d38a:	f7f0 f872 	bl	800d472 <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801d38e:	68fb      	ldr	r3, [r7, #12]
 801d390:	332c      	adds	r3, #44	; 0x2c
 801d392:	493e      	ldr	r1, [pc, #248]	; (801d48c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x270>)
 801d394:	4618      	mov	r0, r3
 801d396:	f7f0 f8fb 	bl	800d590 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801d39a:	68fb      	ldr	r3, [r7, #12]
 801d39c:	332c      	adds	r3, #44	; 0x2c
 801d39e:	6879      	ldr	r1, [r7, #4]
 801d3a0:	4618      	mov	r0, r3
 801d3a2:	f7f0 f8e3 	bl	800d56c <_ZN12SimpleStringpLERKS_>
        message_ += "\"";
 801d3a6:	68fb      	ldr	r3, [r7, #12]
 801d3a8:	332c      	adds	r3, #44	; 0x2c
 801d3aa:	4939      	ldr	r1, [pc, #228]	; (801d490 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x274>)
 801d3ac:	4618      	mov	r0, r3
 801d3ae:	f7f0 f8ef 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801d3b2:	68fb      	ldr	r3, [r7, #12]
 801d3b4:	332c      	adds	r3, #44	; 0x2c
 801d3b6:	4937      	ldr	r1, [pc, #220]	; (801d494 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801d3b8:	4618      	mov	r0, r3
 801d3ba:	f7f0 f8e9 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801d3be:	68fb      	ldr	r3, [r7, #12]
 801d3c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d3c2:	6879      	ldr	r1, [r7, #4]
 801d3c4:	4618      	mov	r0, r3
 801d3c6:	f7ff fc47 	bl	801cc58 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected output parameter passed to function: ";
 801d3ca:	68fb      	ldr	r3, [r7, #12]
 801d3cc:	332c      	adds	r3, #44	; 0x2c
 801d3ce:	4932      	ldr	r1, [pc, #200]	; (801d498 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x27c>)
 801d3d0:	4618      	mov	r0, r3
 801d3d2:	f7f0 f8dd 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801d3d6:	68fb      	ldr	r3, [r7, #12]
 801d3d8:	332c      	adds	r3, #44	; 0x2c
 801d3da:	6879      	ldr	r1, [r7, #4]
 801d3dc:	4618      	mov	r0, r3
 801d3de:	f7f0 f8c5 	bl	800d56c <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801d3e2:	68fb      	ldr	r3, [r7, #12]
 801d3e4:	332c      	adds	r3, #44	; 0x2c
 801d3e6:	492b      	ldr	r1, [pc, #172]	; (801d494 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801d3e8:	4618      	mov	r0, r3
 801d3ea:	f7f0 f8d1 	bl	800d590 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801d3ee:	68fb      	ldr	r3, [r7, #12]
 801d3f0:	332c      	adds	r3, #44	; 0x2c
 801d3f2:	492a      	ldr	r1, [pc, #168]	; (801d49c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x280>)
 801d3f4:	4618      	mov	r0, r3
 801d3f6:	f7f0 f8cb 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801d3fa:	68fb      	ldr	r3, [r7, #12]
 801d3fc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d400:	683b      	ldr	r3, [r7, #0]
 801d402:	681b      	ldr	r3, [r3, #0]
 801d404:	3360      	adds	r3, #96	; 0x60
 801d406:	681b      	ldr	r3, [r3, #0]
 801d408:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801d40c:	6839      	ldr	r1, [r7, #0]
 801d40e:	4610      	mov	r0, r2
 801d410:	4798      	blx	r3
 801d412:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d416:	4619      	mov	r1, r3
 801d418:	4620      	mov	r0, r4
 801d41a:	f7f0 f8a7 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 801d41e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d422:	4618      	mov	r0, r3
 801d424:	f7f0 f825 	bl	800d472 <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801d428:	68fb      	ldr	r3, [r7, #12]
 801d42a:	332c      	adds	r3, #44	; 0x2c
 801d42c:	491c      	ldr	r1, [pc, #112]	; (801d4a0 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x284>)
 801d42e:	4618      	mov	r0, r3
 801d430:	f7f0 f8ae 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801d434:	68fb      	ldr	r3, [r7, #12]
 801d436:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d43a:	683b      	ldr	r3, [r7, #0]
 801d43c:	681b      	ldr	r3, [r3, #0]
 801d43e:	335c      	adds	r3, #92	; 0x5c
 801d440:	681b      	ldr	r3, [r3, #0]
 801d442:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801d446:	6839      	ldr	r1, [r7, #0]
 801d448:	4610      	mov	r0, r2
 801d44a:	4798      	blx	r3
 801d44c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d450:	4619      	mov	r1, r3
 801d452:	4620      	mov	r0, r4
 801d454:	f7f0 f88a 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 801d458:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d45c:	4618      	mov	r0, r3
 801d45e:	f7f0 f808 	bl	800d472 <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801d462:	f107 0310 	add.w	r3, r7, #16
 801d466:	4618      	mov	r0, r3
 801d468:	f7fe fc8c 	bl	801bd84 <_ZN21MockExpectedCallsListD1Ev>
}
 801d46c:	68fb      	ldr	r3, [r7, #12]
 801d46e:	4618      	mov	r0, r3
 801d470:	375c      	adds	r7, #92	; 0x5c
 801d472:	46bd      	mov	sp, r7
 801d474:	bd90      	pop	{r4, r7, pc}
 801d476:	bf00      	nop
 801d478:	08028c9c 	.word	0x08028c9c
 801d47c:	08026544 	.word	0x08026544
 801d480:	080264b0 	.word	0x080264b0
 801d484:	08026584 	.word	0x08026584
 801d488:	080265b0 	.word	0x080265b0
 801d48c:	080264ec 	.word	0x080264ec
 801d490:	080265c8 	.word	0x080265c8
 801d494:	0802637c 	.word	0x0802637c
 801d498:	080265cc 	.word	0x080265cc
 801d49c:	08026310 	.word	0x08026310
 801d4a0:	0802653c 	.word	0x0802653c

0801d4a4 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedParameterDidntHappenFailure::MockExpectedParameterDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801d4a4:	b590      	push	{r4, r7, lr}
 801d4a6:	b08b      	sub	sp, #44	; 0x2c
 801d4a8:	af00      	add	r7, sp, #0
 801d4aa:	60f8      	str	r0, [r7, #12]
 801d4ac:	60b9      	str	r1, [r7, #8]
 801d4ae:	607a      	str	r2, [r7, #4]
 801d4b0:	603b      	str	r3, [r7, #0]
 801d4b2:	68fb      	ldr	r3, [r7, #12]
 801d4b4:	68b9      	ldr	r1, [r7, #8]
 801d4b6:	4618      	mov	r0, r3
 801d4b8:	f7ff fb46 	bl	801cb48 <_ZN11MockFailureC1EP10UtestShell>
 801d4bc:	4a30      	ldr	r2, [pc, #192]	; (801d580 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801d4be:	68fb      	ldr	r3, [r7, #12]
 801d4c0:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunction;
 801d4c2:	f107 0310 	add.w	r3, r7, #16
 801d4c6:	4618      	mov	r0, r3
 801d4c8:	f7fe fc48 	bl	801bd5c <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(functionName, expectations);
 801d4cc:	f107 0310 	add.w	r3, r7, #16
 801d4d0:	683a      	ldr	r2, [r7, #0]
 801d4d2:	6879      	ldr	r1, [r7, #4]
 801d4d4:	4618      	mov	r0, r3
 801d4d6:	f7fe fde7 	bl	801c0a8 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ = "Mock Failure: Expected parameter for function \"";
 801d4da:	68fb      	ldr	r3, [r7, #12]
 801d4dc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d4e0:	f107 0318 	add.w	r3, r7, #24
 801d4e4:	4927      	ldr	r1, [pc, #156]	; (801d584 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801d4e6:	4618      	mov	r0, r3
 801d4e8:	f7ef fc0b 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801d4ec:	f107 0318 	add.w	r3, r7, #24
 801d4f0:	4619      	mov	r1, r3
 801d4f2:	4620      	mov	r0, r4
 801d4f4:	f7ef fc71 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 801d4f8:	f107 0318 	add.w	r3, r7, #24
 801d4fc:	4618      	mov	r0, r3
 801d4fe:	f7ef ffb8 	bl	800d472 <_ZN12SimpleStringD1Ev>
    message_ += functionName;
 801d502:	68fb      	ldr	r3, [r7, #12]
 801d504:	332c      	adds	r3, #44	; 0x2c
 801d506:	6879      	ldr	r1, [r7, #4]
 801d508:	4618      	mov	r0, r3
 801d50a:	f7f0 f82f 	bl	800d56c <_ZN12SimpleStringpLERKS_>
    message_ += "\" did not happen.\n";
 801d50e:	68fb      	ldr	r3, [r7, #12]
 801d510:	332c      	adds	r3, #44	; 0x2c
 801d512:	491d      	ldr	r1, [pc, #116]	; (801d588 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801d514:	4618      	mov	r0, r3
 801d516:	f7f0 f83b 	bl	800d590 <_ZN12SimpleStringpLEPKc>

    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801d51a:	68fb      	ldr	r3, [r7, #12]
 801d51c:	683a      	ldr	r2, [r7, #0]
 801d51e:	6879      	ldr	r1, [r7, #4]
 801d520:	4618      	mov	r0, r3
 801d522:	f7ff fb99 	bl	801cc58 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tMISSING parameters that didn't happen:\n";
 801d526:	68fb      	ldr	r3, [r7, #12]
 801d528:	332c      	adds	r3, #44	; 0x2c
 801d52a:	4918      	ldr	r1, [pc, #96]	; (801d58c <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe8>)
 801d52c:	4618      	mov	r0, r3
 801d52e:	f7f0 f82f 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    message_ += "\t\t";
 801d532:	68fb      	ldr	r3, [r7, #12]
 801d534:	332c      	adds	r3, #44	; 0x2c
 801d536:	4916      	ldr	r1, [pc, #88]	; (801d590 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xec>)
 801d538:	4618      	mov	r0, r3
 801d53a:	f7f0 f829 	bl	800d590 <_ZN12SimpleStringpLEPKc>
    message_ += expectationsForFunction.missingParametersToString();
 801d53e:	68fb      	ldr	r3, [r7, #12]
 801d540:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d544:	f107 0320 	add.w	r3, r7, #32
 801d548:	f107 0210 	add.w	r2, r7, #16
 801d54c:	4611      	mov	r1, r2
 801d54e:	4618      	mov	r0, r3
 801d550:	f7ff f9bc 	bl	801c8cc <_ZNK21MockExpectedCallsList25missingParametersToStringEv>
 801d554:	f107 0320 	add.w	r3, r7, #32
 801d558:	4619      	mov	r1, r3
 801d55a:	4620      	mov	r0, r4
 801d55c:	f7f0 f806 	bl	800d56c <_ZN12SimpleStringpLERKS_>
 801d560:	f107 0320 	add.w	r3, r7, #32
 801d564:	4618      	mov	r0, r3
 801d566:	f7ef ff84 	bl	800d472 <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801d56a:	f107 0310 	add.w	r3, r7, #16
 801d56e:	4618      	mov	r0, r3
 801d570:	f7fe fc08 	bl	801bd84 <_ZN21MockExpectedCallsListD1Ev>
}
 801d574:	68fb      	ldr	r3, [r7, #12]
 801d576:	4618      	mov	r0, r3
 801d578:	372c      	adds	r7, #44	; 0x2c
 801d57a:	46bd      	mov	sp, r7
 801d57c:	bd90      	pop	{r4, r7, pc}
 801d57e:	bf00      	nop
 801d580:	08028c70 	.word	0x08028c70
 801d584:	08026608 	.word	0x08026608
 801d588:	08026638 	.word	0x08026638
 801d58c:	0802664c 	.word	0x0802664c
 801d590:	08026310 	.word	0x08026310

0801d594 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCompareCustomTypeFailure::MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801d594:	b590      	push	{r4, r7, lr}
 801d596:	b087      	sub	sp, #28
 801d598:	af00      	add	r7, sp, #0
 801d59a:	60f8      	str	r0, [r7, #12]
 801d59c:	60b9      	str	r1, [r7, #8]
 801d59e:	607a      	str	r2, [r7, #4]
 801d5a0:	68fb      	ldr	r3, [r7, #12]
 801d5a2:	68b9      	ldr	r1, [r7, #8]
 801d5a4:	4618      	mov	r0, r3
 801d5a6:	f7ff facf 	bl	801cb48 <_ZN11MockFailureC1EP10UtestShell>
 801d5aa:	4a10      	ldr	r2, [pc, #64]	; (801d5ec <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801d5ac:	68fb      	ldr	r3, [r7, #12]
 801d5ae:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to compare type <%s>. Please install a MockNamedValueComparator.", typeName.asCharString());
 801d5b0:	68fb      	ldr	r3, [r7, #12]
 801d5b2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d5b6:	6878      	ldr	r0, [r7, #4]
 801d5b8:	f7ef ff2e 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 801d5bc:	4602      	mov	r2, r0
 801d5be:	f107 0310 	add.w	r3, r7, #16
 801d5c2:	490b      	ldr	r1, [pc, #44]	; (801d5f0 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801d5c4:	4618      	mov	r0, r3
 801d5c6:	f7f0 fc5b 	bl	800de80 <_Z16StringFromFormatPKcz>
 801d5ca:	f107 0310 	add.w	r3, r7, #16
 801d5ce:	4619      	mov	r1, r3
 801d5d0:	4620      	mov	r0, r4
 801d5d2:	f7ef fc02 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 801d5d6:	f107 0310 	add.w	r3, r7, #16
 801d5da:	4618      	mov	r0, r3
 801d5dc:	f7ef ff49 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 801d5e0:	68fb      	ldr	r3, [r7, #12]
 801d5e2:	4618      	mov	r0, r3
 801d5e4:	371c      	adds	r7, #28
 801d5e6:	46bd      	mov	sp, r7
 801d5e8:	bd90      	pop	{r4, r7, pc}
 801d5ea:	bf00      	nop
 801d5ec:	08028c44 	.word	0x08028c44
 801d5f0:	08026678 	.word	0x08026678

0801d5f4 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCopyCustomTypeFailure::MockNoWayToCopyCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801d5f4:	b590      	push	{r4, r7, lr}
 801d5f6:	b087      	sub	sp, #28
 801d5f8:	af00      	add	r7, sp, #0
 801d5fa:	60f8      	str	r0, [r7, #12]
 801d5fc:	60b9      	str	r1, [r7, #8]
 801d5fe:	607a      	str	r2, [r7, #4]
 801d600:	68fb      	ldr	r3, [r7, #12]
 801d602:	68b9      	ldr	r1, [r7, #8]
 801d604:	4618      	mov	r0, r3
 801d606:	f7ff fa9f 	bl	801cb48 <_ZN11MockFailureC1EP10UtestShell>
 801d60a:	4a10      	ldr	r2, [pc, #64]	; (801d64c <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801d60c:	68fb      	ldr	r3, [r7, #12]
 801d60e:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to copy type <%s>. Please install a MockNamedValueCopier.", typeName.asCharString());
 801d610:	68fb      	ldr	r3, [r7, #12]
 801d612:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d616:	6878      	ldr	r0, [r7, #4]
 801d618:	f7ef fefe 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 801d61c:	4602      	mov	r2, r0
 801d61e:	f107 0310 	add.w	r3, r7, #16
 801d622:	490b      	ldr	r1, [pc, #44]	; (801d650 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801d624:	4618      	mov	r0, r3
 801d626:	f7f0 fc2b 	bl	800de80 <_Z16StringFromFormatPKcz>
 801d62a:	f107 0310 	add.w	r3, r7, #16
 801d62e:	4619      	mov	r1, r3
 801d630:	4620      	mov	r0, r4
 801d632:	f7ef fbd2 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 801d636:	f107 0310 	add.w	r3, r7, #16
 801d63a:	4618      	mov	r0, r3
 801d63c:	f7ef ff19 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 801d640:	68fb      	ldr	r3, [r7, #12]
 801d642:	4618      	mov	r0, r3
 801d644:	371c      	adds	r7, #28
 801d646:	46bd      	mov	sp, r7
 801d648:	bd90      	pop	{r4, r7, pc}
 801d64a:	bf00      	nop
 801d64c:	08028c18 	.word	0x08028c18
 801d650:	080266d0 	.word	0x080266d0

0801d654 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>:

MockUnexpectedObjectFailure::MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* actual, const MockExpectedCallsList& expectations) : MockFailure(test)
 801d654:	b590      	push	{r4, r7, lr}
 801d656:	b087      	sub	sp, #28
 801d658:	af00      	add	r7, sp, #0
 801d65a:	60f8      	str	r0, [r7, #12]
 801d65c:	60b9      	str	r1, [r7, #8]
 801d65e:	607a      	str	r2, [r7, #4]
 801d660:	603b      	str	r3, [r7, #0]
 801d662:	68fb      	ldr	r3, [r7, #12]
 801d664:	68b9      	ldr	r1, [r7, #8]
 801d666:	4618      	mov	r0, r3
 801d668:	f7ff fa6e 	bl	801cb48 <_ZN11MockFailureC1EP10UtestShell>
 801d66c:	4a12      	ldr	r2, [pc, #72]	; (801d6b8 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x64>)
 801d66e:	68fb      	ldr	r3, [r7, #12]
 801d670:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801d672:	68fb      	ldr	r3, [r7, #12]
 801d674:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
 801d678:	6878      	ldr	r0, [r7, #4]
 801d67a:	f7ef fecd 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 801d67e:	4602      	mov	r2, r0
 801d680:	f107 0010 	add.w	r0, r7, #16
 801d684:	683b      	ldr	r3, [r7, #0]
 801d686:	490d      	ldr	r1, [pc, #52]	; (801d6bc <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x68>)
 801d688:	f7f0 fbfa 	bl	800de80 <_Z16StringFromFormatPKcz>
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801d68c:	f107 0310 	add.w	r3, r7, #16
 801d690:	4619      	mov	r1, r3
 801d692:	4620      	mov	r0, r4
 801d694:	f7ef fba1 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 801d698:	f107 0310 	add.w	r3, r7, #16
 801d69c:	4618      	mov	r0, r3
 801d69e:	f7ef fee8 	bl	800d472 <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801d6a2:	68fb      	ldr	r3, [r7, #12]
 801d6a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d6a6:	6879      	ldr	r1, [r7, #4]
 801d6a8:	4618      	mov	r0, r3
 801d6aa:	f7ff fad5 	bl	801cc58 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801d6ae:	68fb      	ldr	r3, [r7, #12]
 801d6b0:	4618      	mov	r0, r3
 801d6b2:	371c      	adds	r7, #28
 801d6b4:	46bd      	mov	sp, r7
 801d6b6:	bd90      	pop	{r4, r7, pc}
 801d6b8:	08028bec 	.word	0x08028bec
 801d6bc:	08026720 	.word	0x08026720

0801d6c0 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedObjectDidntHappenFailure::MockExpectedObjectDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801d6c0:	b590      	push	{r4, r7, lr}
 801d6c2:	b087      	sub	sp, #28
 801d6c4:	af00      	add	r7, sp, #0
 801d6c6:	60f8      	str	r0, [r7, #12]
 801d6c8:	60b9      	str	r1, [r7, #8]
 801d6ca:	607a      	str	r2, [r7, #4]
 801d6cc:	603b      	str	r3, [r7, #0]
 801d6ce:	68fb      	ldr	r3, [r7, #12]
 801d6d0:	68b9      	ldr	r1, [r7, #8]
 801d6d2:	4618      	mov	r0, r3
 801d6d4:	f7ff fa38 	bl	801cb48 <_ZN11MockFailureC1EP10UtestShell>
 801d6d8:	4a12      	ldr	r2, [pc, #72]	; (801d724 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x64>)
 801d6da:	68fb      	ldr	r3, [r7, #12]
 801d6dc:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("Mock Failure: Expected call on object for function \"%s\" but it did not happen.\n", functionName.asCharString());
 801d6de:	68fb      	ldr	r3, [r7, #12]
 801d6e0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d6e4:	6878      	ldr	r0, [r7, #4]
 801d6e6:	f7ef fe97 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 801d6ea:	4602      	mov	r2, r0
 801d6ec:	f107 0310 	add.w	r3, r7, #16
 801d6f0:	490d      	ldr	r1, [pc, #52]	; (801d728 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x68>)
 801d6f2:	4618      	mov	r0, r3
 801d6f4:	f7f0 fbc4 	bl	800de80 <_Z16StringFromFormatPKcz>
 801d6f8:	f107 0310 	add.w	r3, r7, #16
 801d6fc:	4619      	mov	r1, r3
 801d6fe:	4620      	mov	r0, r4
 801d700:	f7ef fb6b 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 801d704:	f107 0310 	add.w	r3, r7, #16
 801d708:	4618      	mov	r0, r3
 801d70a:	f7ef feb2 	bl	800d472 <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801d70e:	68fb      	ldr	r3, [r7, #12]
 801d710:	683a      	ldr	r2, [r7, #0]
 801d712:	6879      	ldr	r1, [r7, #4]
 801d714:	4618      	mov	r0, r3
 801d716:	f7ff fa9f 	bl	801cc58 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801d71a:	68fb      	ldr	r3, [r7, #12]
 801d71c:	4618      	mov	r0, r3
 801d71e:	371c      	adds	r7, #28
 801d720:	46bd      	mov	sp, r7
 801d722:	bd90      	pop	{r4, r7, pc}
 801d724:	08028bc0 	.word	0x08028bc0
 801d728:	08026784 	.word	0x08026784

0801d72c <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>:

MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::defaultRepository_ = NULLPTR;
const double MockNamedValue::defaultDoubleTolerance = 0.005;

void MockNamedValue::setDefaultComparatorsAndCopiersRepository(MockNamedValueComparatorsAndCopiersRepository* repository)
{
 801d72c:	b480      	push	{r7}
 801d72e:	b083      	sub	sp, #12
 801d730:	af00      	add	r7, sp, #0
 801d732:	6078      	str	r0, [r7, #4]
    defaultRepository_ = repository;
 801d734:	4a04      	ldr	r2, [pc, #16]	; (801d748 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository+0x1c>)
 801d736:	687b      	ldr	r3, [r7, #4]
 801d738:	6013      	str	r3, [r2, #0]
}
 801d73a:	bf00      	nop
 801d73c:	370c      	adds	r7, #12
 801d73e:	46bd      	mov	sp, r7
 801d740:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d744:	4770      	bx	lr
 801d746:	bf00      	nop
 801d748:	20000ec4 	.word	0x20000ec4

0801d74c <_ZN14MockNamedValueC1ERK12SimpleString>:
MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::getDefaultComparatorsAndCopiersRepository()
{
    return defaultRepository_;
}

MockNamedValue::MockNamedValue(const SimpleString& name) : name_(name), type_("int"), size_(0), comparator_(NULLPTR), copier_(NULLPTR)
 801d74c:	b580      	push	{r7, lr}
 801d74e:	b082      	sub	sp, #8
 801d750:	af00      	add	r7, sp, #0
 801d752:	6078      	str	r0, [r7, #4]
 801d754:	6039      	str	r1, [r7, #0]
 801d756:	4a10      	ldr	r2, [pc, #64]	; (801d798 <_ZN14MockNamedValueC1ERK12SimpleString+0x4c>)
 801d758:	687b      	ldr	r3, [r7, #4]
 801d75a:	601a      	str	r2, [r3, #0]
 801d75c:	687b      	ldr	r3, [r7, #4]
 801d75e:	3304      	adds	r3, #4
 801d760:	6839      	ldr	r1, [r7, #0]
 801d762:	4618      	mov	r0, r3
 801d764:	f7ef fb21 	bl	800cdaa <_ZN12SimpleStringC1ERKS_>
 801d768:	687b      	ldr	r3, [r7, #4]
 801d76a:	330c      	adds	r3, #12
 801d76c:	490b      	ldr	r1, [pc, #44]	; (801d79c <_ZN14MockNamedValueC1ERK12SimpleString+0x50>)
 801d76e:	4618      	mov	r0, r3
 801d770:	f7ef fac7 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801d774:	687b      	ldr	r3, [r7, #4]
 801d776:	2200      	movs	r2, #0
 801d778:	629a      	str	r2, [r3, #40]	; 0x28
 801d77a:	687b      	ldr	r3, [r7, #4]
 801d77c:	2200      	movs	r2, #0
 801d77e:	62da      	str	r2, [r3, #44]	; 0x2c
 801d780:	687b      	ldr	r3, [r7, #4]
 801d782:	2200      	movs	r2, #0
 801d784:	631a      	str	r2, [r3, #48]	; 0x30
{
    value_.intValue_ = 0;
 801d786:	687b      	ldr	r3, [r7, #4]
 801d788:	2200      	movs	r2, #0
 801d78a:	619a      	str	r2, [r3, #24]
}
 801d78c:	687b      	ldr	r3, [r7, #4]
 801d78e:	4618      	mov	r0, r3
 801d790:	3708      	adds	r7, #8
 801d792:	46bd      	mov	sp, r7
 801d794:	bd80      	pop	{r7, pc}
 801d796:	bf00      	nop
 801d798:	08029448 	.word	0x08029448
 801d79c:	080267d4 	.word	0x080267d4

0801d7a0 <_ZN14MockNamedValueD1Ev>:

MockNamedValue::~MockNamedValue()
 801d7a0:	b580      	push	{r7, lr}
 801d7a2:	b082      	sub	sp, #8
 801d7a4:	af00      	add	r7, sp, #0
 801d7a6:	6078      	str	r0, [r7, #4]
 801d7a8:	4a08      	ldr	r2, [pc, #32]	; (801d7cc <_ZN14MockNamedValueD1Ev+0x2c>)
 801d7aa:	687b      	ldr	r3, [r7, #4]
 801d7ac:	601a      	str	r2, [r3, #0]
 801d7ae:	687b      	ldr	r3, [r7, #4]
 801d7b0:	330c      	adds	r3, #12
 801d7b2:	4618      	mov	r0, r3
 801d7b4:	f7ef fe5d 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801d7b8:	687b      	ldr	r3, [r7, #4]
 801d7ba:	3304      	adds	r3, #4
 801d7bc:	4618      	mov	r0, r3
 801d7be:	f7ef fe58 	bl	800d472 <_ZN12SimpleStringD1Ev>
{
}
 801d7c2:	687b      	ldr	r3, [r7, #4]
 801d7c4:	4618      	mov	r0, r3
 801d7c6:	3708      	adds	r7, #8
 801d7c8:	46bd      	mov	sp, r7
 801d7ca:	bd80      	pop	{r7, pc}
 801d7cc:	08029448 	.word	0x08029448

0801d7d0 <_ZN14MockNamedValueD0Ev>:
MockNamedValue::~MockNamedValue()
 801d7d0:	b580      	push	{r7, lr}
 801d7d2:	b082      	sub	sp, #8
 801d7d4:	af00      	add	r7, sp, #0
 801d7d6:	6078      	str	r0, [r7, #4]
}
 801d7d8:	6878      	ldr	r0, [r7, #4]
 801d7da:	f7ff ffe1 	bl	801d7a0 <_ZN14MockNamedValueD1Ev>
 801d7de:	2138      	movs	r1, #56	; 0x38
 801d7e0:	6878      	ldr	r0, [r7, #4]
 801d7e2:	f7ec fedf 	bl	800a5a4 <_ZdlPvj>
 801d7e6:	687b      	ldr	r3, [r7, #4]
 801d7e8:	4618      	mov	r0, r3
 801d7ea:	3708      	adds	r7, #8
 801d7ec:	46bd      	mov	sp, r7
 801d7ee:	bd80      	pop	{r7, pc}

0801d7f0 <_ZN14MockNamedValue8setValueEb>:

void MockNamedValue::setValue(bool value)
{
 801d7f0:	b590      	push	{r4, r7, lr}
 801d7f2:	b085      	sub	sp, #20
 801d7f4:	af00      	add	r7, sp, #0
 801d7f6:	6078      	str	r0, [r7, #4]
 801d7f8:	460b      	mov	r3, r1
 801d7fa:	70fb      	strb	r3, [r7, #3]
    type_ = "bool";
 801d7fc:	687b      	ldr	r3, [r7, #4]
 801d7fe:	f103 040c 	add.w	r4, r3, #12
 801d802:	f107 0308 	add.w	r3, r7, #8
 801d806:	490b      	ldr	r1, [pc, #44]	; (801d834 <_ZN14MockNamedValue8setValueEb+0x44>)
 801d808:	4618      	mov	r0, r3
 801d80a:	f7ef fa7a 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801d80e:	f107 0308 	add.w	r3, r7, #8
 801d812:	4619      	mov	r1, r3
 801d814:	4620      	mov	r0, r4
 801d816:	f7ef fae0 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 801d81a:	f107 0308 	add.w	r3, r7, #8
 801d81e:	4618      	mov	r0, r3
 801d820:	f7ef fe27 	bl	800d472 <_ZN12SimpleStringD1Ev>
    value_.boolValue_ = value;
 801d824:	687b      	ldr	r3, [r7, #4]
 801d826:	78fa      	ldrb	r2, [r7, #3]
 801d828:	761a      	strb	r2, [r3, #24]
}
 801d82a:	bf00      	nop
 801d82c:	3714      	adds	r7, #20
 801d82e:	46bd      	mov	sp, r7
 801d830:	bd90      	pop	{r4, r7, pc}
 801d832:	bf00      	nop
 801d834:	080267d8 	.word	0x080267d8

0801d838 <_ZN14MockNamedValue8setValueEj>:

void MockNamedValue::setValue(unsigned int value)
{
 801d838:	b590      	push	{r4, r7, lr}
 801d83a:	b085      	sub	sp, #20
 801d83c:	af00      	add	r7, sp, #0
 801d83e:	6078      	str	r0, [r7, #4]
 801d840:	6039      	str	r1, [r7, #0]
    type_ = "unsigned int";
 801d842:	687b      	ldr	r3, [r7, #4]
 801d844:	f103 040c 	add.w	r4, r3, #12
 801d848:	f107 0308 	add.w	r3, r7, #8
 801d84c:	490a      	ldr	r1, [pc, #40]	; (801d878 <_ZN14MockNamedValue8setValueEj+0x40>)
 801d84e:	4618      	mov	r0, r3
 801d850:	f7ef fa57 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801d854:	f107 0308 	add.w	r3, r7, #8
 801d858:	4619      	mov	r1, r3
 801d85a:	4620      	mov	r0, r4
 801d85c:	f7ef fabd 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 801d860:	f107 0308 	add.w	r3, r7, #8
 801d864:	4618      	mov	r0, r3
 801d866:	f7ef fe04 	bl	800d472 <_ZN12SimpleStringD1Ev>
    value_.unsignedIntValue_ = value;
 801d86a:	687b      	ldr	r3, [r7, #4]
 801d86c:	683a      	ldr	r2, [r7, #0]
 801d86e:	619a      	str	r2, [r3, #24]
}
 801d870:	bf00      	nop
 801d872:	3714      	adds	r7, #20
 801d874:	46bd      	mov	sp, r7
 801d876:	bd90      	pop	{r4, r7, pc}
 801d878:	080267e0 	.word	0x080267e0

0801d87c <_ZN14MockNamedValue8setValueEi>:

void MockNamedValue::setValue(int value)
{
 801d87c:	b590      	push	{r4, r7, lr}
 801d87e:	b085      	sub	sp, #20
 801d880:	af00      	add	r7, sp, #0
 801d882:	6078      	str	r0, [r7, #4]
 801d884:	6039      	str	r1, [r7, #0]
    type_ = "int";
 801d886:	687b      	ldr	r3, [r7, #4]
 801d888:	f103 040c 	add.w	r4, r3, #12
 801d88c:	f107 0308 	add.w	r3, r7, #8
 801d890:	490a      	ldr	r1, [pc, #40]	; (801d8bc <_ZN14MockNamedValue8setValueEi+0x40>)
 801d892:	4618      	mov	r0, r3
 801d894:	f7ef fa35 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801d898:	f107 0308 	add.w	r3, r7, #8
 801d89c:	4619      	mov	r1, r3
 801d89e:	4620      	mov	r0, r4
 801d8a0:	f7ef fa9b 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 801d8a4:	f107 0308 	add.w	r3, r7, #8
 801d8a8:	4618      	mov	r0, r3
 801d8aa:	f7ef fde2 	bl	800d472 <_ZN12SimpleStringD1Ev>
    value_.intValue_ = value;
 801d8ae:	687b      	ldr	r3, [r7, #4]
 801d8b0:	683a      	ldr	r2, [r7, #0]
 801d8b2:	619a      	str	r2, [r3, #24]
}
 801d8b4:	bf00      	nop
 801d8b6:	3714      	adds	r7, #20
 801d8b8:	46bd      	mov	sp, r7
 801d8ba:	bd90      	pop	{r4, r7, pc}
 801d8bc:	080267d4 	.word	0x080267d4

0801d8c0 <_ZN14MockNamedValue8setValueEl>:

void MockNamedValue::setValue(long int value)
{
 801d8c0:	b590      	push	{r4, r7, lr}
 801d8c2:	b085      	sub	sp, #20
 801d8c4:	af00      	add	r7, sp, #0
 801d8c6:	6078      	str	r0, [r7, #4]
 801d8c8:	6039      	str	r1, [r7, #0]
    type_ = "long int";
 801d8ca:	687b      	ldr	r3, [r7, #4]
 801d8cc:	f103 040c 	add.w	r4, r3, #12
 801d8d0:	f107 0308 	add.w	r3, r7, #8
 801d8d4:	490a      	ldr	r1, [pc, #40]	; (801d900 <_ZN14MockNamedValue8setValueEl+0x40>)
 801d8d6:	4618      	mov	r0, r3
 801d8d8:	f7ef fa13 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801d8dc:	f107 0308 	add.w	r3, r7, #8
 801d8e0:	4619      	mov	r1, r3
 801d8e2:	4620      	mov	r0, r4
 801d8e4:	f7ef fa79 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 801d8e8:	f107 0308 	add.w	r3, r7, #8
 801d8ec:	4618      	mov	r0, r3
 801d8ee:	f7ef fdc0 	bl	800d472 <_ZN12SimpleStringD1Ev>
    value_.longIntValue_ = value;
 801d8f2:	687b      	ldr	r3, [r7, #4]
 801d8f4:	683a      	ldr	r2, [r7, #0]
 801d8f6:	619a      	str	r2, [r3, #24]
}
 801d8f8:	bf00      	nop
 801d8fa:	3714      	adds	r7, #20
 801d8fc:	46bd      	mov	sp, r7
 801d8fe:	bd90      	pop	{r4, r7, pc}
 801d900:	080267f0 	.word	0x080267f0

0801d904 <_ZN14MockNamedValue8setValueEm>:

void MockNamedValue::setValue(unsigned long int value)
{
 801d904:	b590      	push	{r4, r7, lr}
 801d906:	b085      	sub	sp, #20
 801d908:	af00      	add	r7, sp, #0
 801d90a:	6078      	str	r0, [r7, #4]
 801d90c:	6039      	str	r1, [r7, #0]
    type_ = "unsigned long int";
 801d90e:	687b      	ldr	r3, [r7, #4]
 801d910:	f103 040c 	add.w	r4, r3, #12
 801d914:	f107 0308 	add.w	r3, r7, #8
 801d918:	490a      	ldr	r1, [pc, #40]	; (801d944 <_ZN14MockNamedValue8setValueEm+0x40>)
 801d91a:	4618      	mov	r0, r3
 801d91c:	f7ef f9f1 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801d920:	f107 0308 	add.w	r3, r7, #8
 801d924:	4619      	mov	r1, r3
 801d926:	4620      	mov	r0, r4
 801d928:	f7ef fa57 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 801d92c:	f107 0308 	add.w	r3, r7, #8
 801d930:	4618      	mov	r0, r3
 801d932:	f7ef fd9e 	bl	800d472 <_ZN12SimpleStringD1Ev>
    value_.unsignedLongIntValue_ = value;
 801d936:	687b      	ldr	r3, [r7, #4]
 801d938:	683a      	ldr	r2, [r7, #0]
 801d93a:	619a      	str	r2, [r3, #24]
}
 801d93c:	bf00      	nop
 801d93e:	3714      	adds	r7, #20
 801d940:	46bd      	mov	sp, r7
 801d942:	bd90      	pop	{r4, r7, pc}
 801d944:	080267fc 	.word	0x080267fc

0801d948 <_ZN14MockNamedValue8setValueE17cpputest_longlong>:
}

#else

void MockNamedValue::setValue(cpputest_longlong)
{
 801d948:	b5b0      	push	{r4, r5, r7, lr}
 801d94a:	b086      	sub	sp, #24
 801d94c:	af02      	add	r7, sp, #8
 801d94e:	60f8      	str	r0, [r7, #12]
 801d950:	1d3b      	adds	r3, r7, #4
 801d952:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801d956:	f7f6 fdb7 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 801d95a:	4604      	mov	r4, r0
 801d95c:	6823      	ldr	r3, [r4, #0]
 801d95e:	3368      	adds	r3, #104	; 0x68
 801d960:	681d      	ldr	r5, [r3, #0]
 801d962:	f7f6 fdc1 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d966:	4603      	mov	r3, r0
 801d968:	9300      	str	r3, [sp, #0]
 801d96a:	2367      	movs	r3, #103	; 0x67
 801d96c:	4a03      	ldr	r2, [pc, #12]	; (801d97c <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x34>)
 801d96e:	4904      	ldr	r1, [pc, #16]	; (801d980 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x38>)
 801d970:	4620      	mov	r0, r4
 801d972:	47a8      	blx	r5
}
 801d974:	bf00      	nop
 801d976:	3710      	adds	r7, #16
 801d978:	46bd      	mov	sp, r7
 801d97a:	bdb0      	pop	{r4, r5, r7, pc}
 801d97c:	08026810 	.word	0x08026810
 801d980:	0802682c 	.word	0x0802682c

0801d984 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong>:

void MockNamedValue::setValue(cpputest_ulonglong)
{
 801d984:	b5b0      	push	{r4, r5, r7, lr}
 801d986:	b086      	sub	sp, #24
 801d988:	af02      	add	r7, sp, #8
 801d98a:	60f8      	str	r0, [r7, #12]
 801d98c:	1d3b      	adds	r3, r7, #4
 801d98e:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801d992:	f7f6 fd99 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 801d996:	4604      	mov	r4, r0
 801d998:	6823      	ldr	r3, [r4, #0]
 801d99a:	3368      	adds	r3, #104	; 0x68
 801d99c:	681d      	ldr	r5, [r3, #0]
 801d99e:	f7f6 fda3 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d9a2:	4603      	mov	r3, r0
 801d9a4:	9300      	str	r3, [sp, #0]
 801d9a6:	236c      	movs	r3, #108	; 0x6c
 801d9a8:	4a03      	ldr	r2, [pc, #12]	; (801d9b8 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x34>)
 801d9aa:	4904      	ldr	r1, [pc, #16]	; (801d9bc <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x38>)
 801d9ac:	4620      	mov	r0, r4
 801d9ae:	47a8      	blx	r5
}
 801d9b0:	bf00      	nop
 801d9b2:	3710      	adds	r7, #16
 801d9b4:	46bd      	mov	sp, r7
 801d9b6:	bdb0      	pop	{r4, r5, r7, pc}
 801d9b8:	08026810 	.word	0x08026810
 801d9bc:	0802684c 	.word	0x0802684c

0801d9c0 <_ZN14MockNamedValue8setValueEd>:

#endif

void MockNamedValue::setValue(double value)
{
 801d9c0:	b580      	push	{r7, lr}
 801d9c2:	b084      	sub	sp, #16
 801d9c4:	af00      	add	r7, sp, #0
 801d9c6:	60f8      	str	r0, [r7, #12]
 801d9c8:	ed87 0b00 	vstr	d0, [r7]
    setValue(value, defaultDoubleTolerance);
 801d9cc:	68fb      	ldr	r3, [r7, #12]
 801d9ce:	681b      	ldr	r3, [r3, #0]
 801d9d0:	3328      	adds	r3, #40	; 0x28
 801d9d2:	681b      	ldr	r3, [r3, #0]
 801d9d4:	ed9f 1b04 	vldr	d1, [pc, #16]	; 801d9e8 <_ZN14MockNamedValue8setValueEd+0x28>
 801d9d8:	ed97 0b00 	vldr	d0, [r7]
 801d9dc:	68f8      	ldr	r0, [r7, #12]
 801d9de:	4798      	blx	r3
}
 801d9e0:	bf00      	nop
 801d9e2:	3710      	adds	r7, #16
 801d9e4:	46bd      	mov	sp, r7
 801d9e6:	bd80      	pop	{r7, pc}
 801d9e8:	47ae147b 	.word	0x47ae147b
 801d9ec:	3f747ae1 	.word	0x3f747ae1

0801d9f0 <_ZN14MockNamedValue8setValueEdd>:

void MockNamedValue::setValue(double value, double tolerance)
{
 801d9f0:	b590      	push	{r4, r7, lr}
 801d9f2:	b089      	sub	sp, #36	; 0x24
 801d9f4:	af00      	add	r7, sp, #0
 801d9f6:	6178      	str	r0, [r7, #20]
 801d9f8:	ed87 0b02 	vstr	d0, [r7, #8]
 801d9fc:	ed87 1b00 	vstr	d1, [r7]
    type_ = "double";
 801da00:	697b      	ldr	r3, [r7, #20]
 801da02:	f103 040c 	add.w	r4, r3, #12
 801da06:	f107 0318 	add.w	r3, r7, #24
 801da0a:	490e      	ldr	r1, [pc, #56]	; (801da44 <_ZN14MockNamedValue8setValueEdd+0x54>)
 801da0c:	4618      	mov	r0, r3
 801da0e:	f7ef f978 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801da12:	f107 0318 	add.w	r3, r7, #24
 801da16:	4619      	mov	r1, r3
 801da18:	4620      	mov	r0, r4
 801da1a:	f7ef f9de 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 801da1e:	f107 0318 	add.w	r3, r7, #24
 801da22:	4618      	mov	r0, r3
 801da24:	f7ef fd25 	bl	800d472 <_ZN12SimpleStringD1Ev>
    value_.doubleValue_.value = value;
 801da28:	6979      	ldr	r1, [r7, #20]
 801da2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801da2e:	e9c1 2306 	strd	r2, r3, [r1, #24]
    value_.doubleValue_.tolerance = tolerance;
 801da32:	6979      	ldr	r1, [r7, #20]
 801da34:	e9d7 2300 	ldrd	r2, r3, [r7]
 801da38:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 801da3c:	bf00      	nop
 801da3e:	3724      	adds	r7, #36	; 0x24
 801da40:	46bd      	mov	sp, r7
 801da42:	bd90      	pop	{r4, r7, pc}
 801da44:	08026878 	.word	0x08026878

0801da48 <_ZN14MockNamedValue8setValueEPv>:

void MockNamedValue::setValue(void* value)
{
 801da48:	b590      	push	{r4, r7, lr}
 801da4a:	b085      	sub	sp, #20
 801da4c:	af00      	add	r7, sp, #0
 801da4e:	6078      	str	r0, [r7, #4]
 801da50:	6039      	str	r1, [r7, #0]
    type_ = "void*";
 801da52:	687b      	ldr	r3, [r7, #4]
 801da54:	f103 040c 	add.w	r4, r3, #12
 801da58:	f107 0308 	add.w	r3, r7, #8
 801da5c:	490a      	ldr	r1, [pc, #40]	; (801da88 <_ZN14MockNamedValue8setValueEPv+0x40>)
 801da5e:	4618      	mov	r0, r3
 801da60:	f7ef f94f 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801da64:	f107 0308 	add.w	r3, r7, #8
 801da68:	4619      	mov	r1, r3
 801da6a:	4620      	mov	r0, r4
 801da6c:	f7ef f9b5 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 801da70:	f107 0308 	add.w	r3, r7, #8
 801da74:	4618      	mov	r0, r3
 801da76:	f7ef fcfc 	bl	800d472 <_ZN12SimpleStringD1Ev>
    value_.pointerValue_ = value;
 801da7a:	687b      	ldr	r3, [r7, #4]
 801da7c:	683a      	ldr	r2, [r7, #0]
 801da7e:	619a      	str	r2, [r3, #24]
}
 801da80:	bf00      	nop
 801da82:	3714      	adds	r7, #20
 801da84:	46bd      	mov	sp, r7
 801da86:	bd90      	pop	{r4, r7, pc}
 801da88:	08026880 	.word	0x08026880

0801da8c <_ZN14MockNamedValue8setValueEPKv>:

void MockNamedValue::setValue(const void* value)
{
 801da8c:	b590      	push	{r4, r7, lr}
 801da8e:	b085      	sub	sp, #20
 801da90:	af00      	add	r7, sp, #0
 801da92:	6078      	str	r0, [r7, #4]
 801da94:	6039      	str	r1, [r7, #0]
    type_ = "const void*";
 801da96:	687b      	ldr	r3, [r7, #4]
 801da98:	f103 040c 	add.w	r4, r3, #12
 801da9c:	f107 0308 	add.w	r3, r7, #8
 801daa0:	490a      	ldr	r1, [pc, #40]	; (801dacc <_ZN14MockNamedValue8setValueEPKv+0x40>)
 801daa2:	4618      	mov	r0, r3
 801daa4:	f7ef f92d 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801daa8:	f107 0308 	add.w	r3, r7, #8
 801daac:	4619      	mov	r1, r3
 801daae:	4620      	mov	r0, r4
 801dab0:	f7ef f993 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 801dab4:	f107 0308 	add.w	r3, r7, #8
 801dab8:	4618      	mov	r0, r3
 801daba:	f7ef fcda 	bl	800d472 <_ZN12SimpleStringD1Ev>
    value_.constPointerValue_ = value;
 801dabe:	687b      	ldr	r3, [r7, #4]
 801dac0:	683a      	ldr	r2, [r7, #0]
 801dac2:	619a      	str	r2, [r3, #24]
}
 801dac4:	bf00      	nop
 801dac6:	3714      	adds	r7, #20
 801dac8:	46bd      	mov	sp, r7
 801daca:	bd90      	pop	{r4, r7, pc}
 801dacc:	08026888 	.word	0x08026888

0801dad0 <_ZN14MockNamedValue8setValueEPFvvE>:

void MockNamedValue::setValue(void (*value)())
{
 801dad0:	b590      	push	{r4, r7, lr}
 801dad2:	b085      	sub	sp, #20
 801dad4:	af00      	add	r7, sp, #0
 801dad6:	6078      	str	r0, [r7, #4]
 801dad8:	6039      	str	r1, [r7, #0]
    type_ = "void (*)()";
 801dada:	687b      	ldr	r3, [r7, #4]
 801dadc:	f103 040c 	add.w	r4, r3, #12
 801dae0:	f107 0308 	add.w	r3, r7, #8
 801dae4:	490a      	ldr	r1, [pc, #40]	; (801db10 <_ZN14MockNamedValue8setValueEPFvvE+0x40>)
 801dae6:	4618      	mov	r0, r3
 801dae8:	f7ef f90b 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801daec:	f107 0308 	add.w	r3, r7, #8
 801daf0:	4619      	mov	r1, r3
 801daf2:	4620      	mov	r0, r4
 801daf4:	f7ef f971 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 801daf8:	f107 0308 	add.w	r3, r7, #8
 801dafc:	4618      	mov	r0, r3
 801dafe:	f7ef fcb8 	bl	800d472 <_ZN12SimpleStringD1Ev>
    value_.functionPointerValue_ = value;
 801db02:	687b      	ldr	r3, [r7, #4]
 801db04:	683a      	ldr	r2, [r7, #0]
 801db06:	619a      	str	r2, [r3, #24]
}
 801db08:	bf00      	nop
 801db0a:	3714      	adds	r7, #20
 801db0c:	46bd      	mov	sp, r7
 801db0e:	bd90      	pop	{r4, r7, pc}
 801db10:	08026894 	.word	0x08026894

0801db14 <_ZN14MockNamedValue8setValueEPKc>:

void MockNamedValue::setValue(const char* value)
{
 801db14:	b590      	push	{r4, r7, lr}
 801db16:	b085      	sub	sp, #20
 801db18:	af00      	add	r7, sp, #0
 801db1a:	6078      	str	r0, [r7, #4]
 801db1c:	6039      	str	r1, [r7, #0]
    type_ = "const char*";
 801db1e:	687b      	ldr	r3, [r7, #4]
 801db20:	f103 040c 	add.w	r4, r3, #12
 801db24:	f107 0308 	add.w	r3, r7, #8
 801db28:	490a      	ldr	r1, [pc, #40]	; (801db54 <_ZN14MockNamedValue8setValueEPKc+0x40>)
 801db2a:	4618      	mov	r0, r3
 801db2c:	f7ef f8e9 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801db30:	f107 0308 	add.w	r3, r7, #8
 801db34:	4619      	mov	r1, r3
 801db36:	4620      	mov	r0, r4
 801db38:	f7ef f94f 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 801db3c:	f107 0308 	add.w	r3, r7, #8
 801db40:	4618      	mov	r0, r3
 801db42:	f7ef fc96 	bl	800d472 <_ZN12SimpleStringD1Ev>
    value_.stringValue_ = value;
 801db46:	687b      	ldr	r3, [r7, #4]
 801db48:	683a      	ldr	r2, [r7, #0]
 801db4a:	619a      	str	r2, [r3, #24]
}
 801db4c:	bf00      	nop
 801db4e:	3714      	adds	r7, #20
 801db50:	46bd      	mov	sp, r7
 801db52:	bd90      	pop	{r4, r7, pc}
 801db54:	080268a0 	.word	0x080268a0

0801db58 <_ZN14MockNamedValue15setMemoryBufferEPKhj>:

void MockNamedValue::setMemoryBuffer(const unsigned char* value, size_t size)
{
 801db58:	b590      	push	{r4, r7, lr}
 801db5a:	b087      	sub	sp, #28
 801db5c:	af00      	add	r7, sp, #0
 801db5e:	60f8      	str	r0, [r7, #12]
 801db60:	60b9      	str	r1, [r7, #8]
 801db62:	607a      	str	r2, [r7, #4]
    type_ = "const unsigned char*";
 801db64:	68fb      	ldr	r3, [r7, #12]
 801db66:	f103 040c 	add.w	r4, r3, #12
 801db6a:	f107 0310 	add.w	r3, r7, #16
 801db6e:	490c      	ldr	r1, [pc, #48]	; (801dba0 <_ZN14MockNamedValue15setMemoryBufferEPKhj+0x48>)
 801db70:	4618      	mov	r0, r3
 801db72:	f7ef f8c6 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801db76:	f107 0310 	add.w	r3, r7, #16
 801db7a:	4619      	mov	r1, r3
 801db7c:	4620      	mov	r0, r4
 801db7e:	f7ef f92c 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 801db82:	f107 0310 	add.w	r3, r7, #16
 801db86:	4618      	mov	r0, r3
 801db88:	f7ef fc73 	bl	800d472 <_ZN12SimpleStringD1Ev>
    value_.memoryBufferValue_ = value;
 801db8c:	68fb      	ldr	r3, [r7, #12]
 801db8e:	68ba      	ldr	r2, [r7, #8]
 801db90:	619a      	str	r2, [r3, #24]
    size_ = size;
 801db92:	68fb      	ldr	r3, [r7, #12]
 801db94:	687a      	ldr	r2, [r7, #4]
 801db96:	629a      	str	r2, [r3, #40]	; 0x28
}
 801db98:	bf00      	nop
 801db9a:	371c      	adds	r7, #28
 801db9c:	46bd      	mov	sp, r7
 801db9e:	bd90      	pop	{r4, r7, pc}
 801dba0:	080268ac 	.word	0x080268ac

0801dba4 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>:

void MockNamedValue::setConstObjectPointer(const SimpleString& type, const void* objectPtr)
{
 801dba4:	b580      	push	{r7, lr}
 801dba6:	b084      	sub	sp, #16
 801dba8:	af00      	add	r7, sp, #0
 801dbaa:	60f8      	str	r0, [r7, #12]
 801dbac:	60b9      	str	r1, [r7, #8]
 801dbae:	607a      	str	r2, [r7, #4]
    type_ = type;
 801dbb0:	68fb      	ldr	r3, [r7, #12]
 801dbb2:	330c      	adds	r3, #12
 801dbb4:	68b9      	ldr	r1, [r7, #8]
 801dbb6:	4618      	mov	r0, r3
 801dbb8:	f7ef f90f 	bl	800cdda <_ZN12SimpleStringaSERKS_>
    value_.constObjectPointerValue_ = objectPtr;
 801dbbc:	68fb      	ldr	r3, [r7, #12]
 801dbbe:	687a      	ldr	r2, [r7, #4]
 801dbc0:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801dbc2:	4b11      	ldr	r3, [pc, #68]	; (801dc08 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801dbc4:	681b      	ldr	r3, [r3, #0]
 801dbc6:	2b00      	cmp	r3, #0
 801dbc8:	d019      	beq.n	801dbfe <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801dbca:	4b0f      	ldr	r3, [pc, #60]	; (801dc08 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801dbcc:	681a      	ldr	r2, [r3, #0]
 801dbce:	4b0e      	ldr	r3, [pc, #56]	; (801dc08 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801dbd0:	681b      	ldr	r3, [r3, #0]
 801dbd2:	681b      	ldr	r3, [r3, #0]
 801dbd4:	3314      	adds	r3, #20
 801dbd6:	681b      	ldr	r3, [r3, #0]
 801dbd8:	68b9      	ldr	r1, [r7, #8]
 801dbda:	4610      	mov	r0, r2
 801dbdc:	4798      	blx	r3
 801dbde:	4602      	mov	r2, r0
 801dbe0:	68fb      	ldr	r3, [r7, #12]
 801dbe2:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801dbe4:	4b08      	ldr	r3, [pc, #32]	; (801dc08 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801dbe6:	681a      	ldr	r2, [r3, #0]
 801dbe8:	4b07      	ldr	r3, [pc, #28]	; (801dc08 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801dbea:	681b      	ldr	r3, [r3, #0]
 801dbec:	681b      	ldr	r3, [r3, #0]
 801dbee:	3318      	adds	r3, #24
 801dbf0:	681b      	ldr	r3, [r3, #0]
 801dbf2:	68b9      	ldr	r1, [r7, #8]
 801dbf4:	4610      	mov	r0, r2
 801dbf6:	4798      	blx	r3
 801dbf8:	4602      	mov	r2, r0
 801dbfa:	68fb      	ldr	r3, [r7, #12]
 801dbfc:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801dbfe:	bf00      	nop
 801dc00:	3710      	adds	r7, #16
 801dc02:	46bd      	mov	sp, r7
 801dc04:	bd80      	pop	{r7, pc}
 801dc06:	bf00      	nop
 801dc08:	20000ec4 	.word	0x20000ec4

0801dc0c <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv>:

void MockNamedValue::setObjectPointer(const SimpleString& type, void* objectPtr)
{
 801dc0c:	b580      	push	{r7, lr}
 801dc0e:	b084      	sub	sp, #16
 801dc10:	af00      	add	r7, sp, #0
 801dc12:	60f8      	str	r0, [r7, #12]
 801dc14:	60b9      	str	r1, [r7, #8]
 801dc16:	607a      	str	r2, [r7, #4]
    type_ = type;
 801dc18:	68fb      	ldr	r3, [r7, #12]
 801dc1a:	330c      	adds	r3, #12
 801dc1c:	68b9      	ldr	r1, [r7, #8]
 801dc1e:	4618      	mov	r0, r3
 801dc20:	f7ef f8db 	bl	800cdda <_ZN12SimpleStringaSERKS_>
    value_.objectPointerValue_ = objectPtr;
 801dc24:	68fb      	ldr	r3, [r7, #12]
 801dc26:	687a      	ldr	r2, [r7, #4]
 801dc28:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801dc2a:	4b11      	ldr	r3, [pc, #68]	; (801dc70 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801dc2c:	681b      	ldr	r3, [r3, #0]
 801dc2e:	2b00      	cmp	r3, #0
 801dc30:	d019      	beq.n	801dc66 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801dc32:	4b0f      	ldr	r3, [pc, #60]	; (801dc70 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801dc34:	681a      	ldr	r2, [r3, #0]
 801dc36:	4b0e      	ldr	r3, [pc, #56]	; (801dc70 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801dc38:	681b      	ldr	r3, [r3, #0]
 801dc3a:	681b      	ldr	r3, [r3, #0]
 801dc3c:	3314      	adds	r3, #20
 801dc3e:	681b      	ldr	r3, [r3, #0]
 801dc40:	68b9      	ldr	r1, [r7, #8]
 801dc42:	4610      	mov	r0, r2
 801dc44:	4798      	blx	r3
 801dc46:	4602      	mov	r2, r0
 801dc48:	68fb      	ldr	r3, [r7, #12]
 801dc4a:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801dc4c:	4b08      	ldr	r3, [pc, #32]	; (801dc70 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801dc4e:	681a      	ldr	r2, [r3, #0]
 801dc50:	4b07      	ldr	r3, [pc, #28]	; (801dc70 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801dc52:	681b      	ldr	r3, [r3, #0]
 801dc54:	681b      	ldr	r3, [r3, #0]
 801dc56:	3318      	adds	r3, #24
 801dc58:	681b      	ldr	r3, [r3, #0]
 801dc5a:	68b9      	ldr	r1, [r7, #8]
 801dc5c:	4610      	mov	r0, r2
 801dc5e:	4798      	blx	r3
 801dc60:	4602      	mov	r2, r0
 801dc62:	68fb      	ldr	r3, [r7, #12]
 801dc64:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801dc66:	bf00      	nop
 801dc68:	3710      	adds	r7, #16
 801dc6a:	46bd      	mov	sp, r7
 801dc6c:	bd80      	pop	{r7, pc}
 801dc6e:	bf00      	nop
 801dc70:	20000ec4 	.word	0x20000ec4

0801dc74 <_ZN14MockNamedValue7setSizeEj>:

void MockNamedValue::setSize(size_t size)
{
 801dc74:	b480      	push	{r7}
 801dc76:	b083      	sub	sp, #12
 801dc78:	af00      	add	r7, sp, #0
 801dc7a:	6078      	str	r0, [r7, #4]
 801dc7c:	6039      	str	r1, [r7, #0]
    size_ = size;
 801dc7e:	687b      	ldr	r3, [r7, #4]
 801dc80:	683a      	ldr	r2, [r7, #0]
 801dc82:	629a      	str	r2, [r3, #40]	; 0x28
}
 801dc84:	bf00      	nop
 801dc86:	370c      	adds	r7, #12
 801dc88:	46bd      	mov	sp, r7
 801dc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc8e:	4770      	bx	lr

0801dc90 <_ZN14MockNamedValue7setNameEPKc>:

void MockNamedValue::setName(const char* name)
{
 801dc90:	b590      	push	{r4, r7, lr}
 801dc92:	b085      	sub	sp, #20
 801dc94:	af00      	add	r7, sp, #0
 801dc96:	6078      	str	r0, [r7, #4]
 801dc98:	6039      	str	r1, [r7, #0]
    name_ = name;
 801dc9a:	687b      	ldr	r3, [r7, #4]
 801dc9c:	1d1c      	adds	r4, r3, #4
 801dc9e:	f107 0308 	add.w	r3, r7, #8
 801dca2:	6839      	ldr	r1, [r7, #0]
 801dca4:	4618      	mov	r0, r3
 801dca6:	f7ef f82c 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801dcaa:	f107 0308 	add.w	r3, r7, #8
 801dcae:	4619      	mov	r1, r3
 801dcb0:	4620      	mov	r0, r4
 801dcb2:	f7ef f892 	bl	800cdda <_ZN12SimpleStringaSERKS_>
 801dcb6:	f107 0308 	add.w	r3, r7, #8
 801dcba:	4618      	mov	r0, r3
 801dcbc:	f7ef fbd9 	bl	800d472 <_ZN12SimpleStringD1Ev>
}
 801dcc0:	bf00      	nop
 801dcc2:	3714      	adds	r7, #20
 801dcc4:	46bd      	mov	sp, r7
 801dcc6:	bd90      	pop	{r4, r7, pc}

0801dcc8 <_ZNK14MockNamedValue7getNameEv>:

SimpleString MockNamedValue::getName() const
{
 801dcc8:	b580      	push	{r7, lr}
 801dcca:	b082      	sub	sp, #8
 801dccc:	af00      	add	r7, sp, #0
 801dcce:	6078      	str	r0, [r7, #4]
 801dcd0:	6039      	str	r1, [r7, #0]
    return name_;
 801dcd2:	683b      	ldr	r3, [r7, #0]
 801dcd4:	3304      	adds	r3, #4
 801dcd6:	4619      	mov	r1, r3
 801dcd8:	6878      	ldr	r0, [r7, #4]
 801dcda:	f7ef f866 	bl	800cdaa <_ZN12SimpleStringC1ERKS_>
}
 801dcde:	6878      	ldr	r0, [r7, #4]
 801dce0:	3708      	adds	r7, #8
 801dce2:	46bd      	mov	sp, r7
 801dce4:	bd80      	pop	{r7, pc}

0801dce6 <_ZNK14MockNamedValue7getTypeEv>:

SimpleString MockNamedValue::getType() const
{
 801dce6:	b580      	push	{r7, lr}
 801dce8:	b082      	sub	sp, #8
 801dcea:	af00      	add	r7, sp, #0
 801dcec:	6078      	str	r0, [r7, #4]
 801dcee:	6039      	str	r1, [r7, #0]
    return type_;
 801dcf0:	683b      	ldr	r3, [r7, #0]
 801dcf2:	330c      	adds	r3, #12
 801dcf4:	4619      	mov	r1, r3
 801dcf6:	6878      	ldr	r0, [r7, #4]
 801dcf8:	f7ef f857 	bl	800cdaa <_ZN12SimpleStringC1ERKS_>
}
 801dcfc:	6878      	ldr	r0, [r7, #4]
 801dcfe:	3708      	adds	r7, #8
 801dd00:	46bd      	mov	sp, r7
 801dd02:	bd80      	pop	{r7, pc}

0801dd04 <_ZNK14MockNamedValue12getBoolValueEv>:

bool MockNamedValue::getBoolValue() const
{
 801dd04:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dd06:	b087      	sub	sp, #28
 801dd08:	af04      	add	r7, sp, #16
 801dd0a:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("bool", type_.asCharString());
 801dd0c:	f7f6 fbdc 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 801dd10:	4604      	mov	r4, r0
 801dd12:	6823      	ldr	r3, [r4, #0]
 801dd14:	3324      	adds	r3, #36	; 0x24
 801dd16:	681d      	ldr	r5, [r3, #0]
 801dd18:	687b      	ldr	r3, [r7, #4]
 801dd1a:	330c      	adds	r3, #12
 801dd1c:	4618      	mov	r0, r3
 801dd1e:	f7ef fb7b 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 801dd22:	4606      	mov	r6, r0
 801dd24:	f7f6 fbe0 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801dd28:	4603      	mov	r3, r0
 801dd2a:	9302      	str	r3, [sp, #8]
 801dd2c:	23c8      	movs	r3, #200	; 0xc8
 801dd2e:	9301      	str	r3, [sp, #4]
 801dd30:	4b06      	ldr	r3, [pc, #24]	; (801dd4c <_ZNK14MockNamedValue12getBoolValueEv+0x48>)
 801dd32:	9300      	str	r3, [sp, #0]
 801dd34:	2300      	movs	r3, #0
 801dd36:	4632      	mov	r2, r6
 801dd38:	4905      	ldr	r1, [pc, #20]	; (801dd50 <_ZNK14MockNamedValue12getBoolValueEv+0x4c>)
 801dd3a:	4620      	mov	r0, r4
 801dd3c:	47a8      	blx	r5
    return value_.boolValue_;
 801dd3e:	687b      	ldr	r3, [r7, #4]
 801dd40:	7e1b      	ldrb	r3, [r3, #24]
}
 801dd42:	4618      	mov	r0, r3
 801dd44:	370c      	adds	r7, #12
 801dd46:	46bd      	mov	sp, r7
 801dd48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dd4a:	bf00      	nop
 801dd4c:	08026810 	.word	0x08026810
 801dd50:	080267d8 	.word	0x080267d8

0801dd54 <_ZNK14MockNamedValue19getUnsignedIntValueEv>:

unsigned int MockNamedValue::getUnsignedIntValue() const
{
 801dd54:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dd56:	b089      	sub	sp, #36	; 0x24
 801dd58:	af04      	add	r7, sp, #16
 801dd5a:	6078      	str	r0, [r7, #4]
    if(type_ == "int" && value_.intValue_ >= 0)
 801dd5c:	687b      	ldr	r3, [r7, #4]
 801dd5e:	f103 040c 	add.w	r4, r3, #12
 801dd62:	f107 0308 	add.w	r3, r7, #8
 801dd66:	4920      	ldr	r1, [pc, #128]	; (801dde8 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x94>)
 801dd68:	4618      	mov	r0, r3
 801dd6a:	f7ee ffca 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801dd6e:	2501      	movs	r5, #1
 801dd70:	f107 0308 	add.w	r3, r7, #8
 801dd74:	4619      	mov	r1, r3
 801dd76:	4620      	mov	r0, r4
 801dd78:	f7ef fb87 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801dd7c:	4603      	mov	r3, r0
 801dd7e:	2b00      	cmp	r3, #0
 801dd80:	d005      	beq.n	801dd8e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801dd82:	687b      	ldr	r3, [r7, #4]
 801dd84:	699b      	ldr	r3, [r3, #24]
 801dd86:	2b00      	cmp	r3, #0
 801dd88:	db01      	blt.n	801dd8e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801dd8a:	2401      	movs	r4, #1
 801dd8c:	e000      	b.n	801dd90 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3c>
 801dd8e:	2400      	movs	r4, #0
 801dd90:	2d00      	cmp	r5, #0
 801dd92:	d004      	beq.n	801dd9e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x4a>
 801dd94:	f107 0308 	add.w	r3, r7, #8
 801dd98:	4618      	mov	r0, r3
 801dd9a:	f7ef fb6a 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801dd9e:	2c00      	cmp	r4, #0
 801dda0:	d002      	beq.n	801dda8 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x54>
        return (unsigned int)value_.intValue_;
 801dda2:	687b      	ldr	r3, [r7, #4]
 801dda4:	699b      	ldr	r3, [r3, #24]
 801dda6:	e01a      	b.n	801ddde <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x8a>
    else
    {
        STRCMP_EQUAL("unsigned int", type_.asCharString());
 801dda8:	f7f6 fb8e 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 801ddac:	4604      	mov	r4, r0
 801ddae:	6823      	ldr	r3, [r4, #0]
 801ddb0:	3324      	adds	r3, #36	; 0x24
 801ddb2:	681d      	ldr	r5, [r3, #0]
 801ddb4:	687b      	ldr	r3, [r7, #4]
 801ddb6:	330c      	adds	r3, #12
 801ddb8:	4618      	mov	r0, r3
 801ddba:	f7ef fb2d 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 801ddbe:	4606      	mov	r6, r0
 801ddc0:	f7f6 fb92 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ddc4:	4603      	mov	r3, r0
 801ddc6:	9302      	str	r3, [sp, #8]
 801ddc8:	23d2      	movs	r3, #210	; 0xd2
 801ddca:	9301      	str	r3, [sp, #4]
 801ddcc:	4b07      	ldr	r3, [pc, #28]	; (801ddec <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x98>)
 801ddce:	9300      	str	r3, [sp, #0]
 801ddd0:	2300      	movs	r3, #0
 801ddd2:	4632      	mov	r2, r6
 801ddd4:	4906      	ldr	r1, [pc, #24]	; (801ddf0 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x9c>)
 801ddd6:	4620      	mov	r0, r4
 801ddd8:	47a8      	blx	r5
        return value_.unsignedIntValue_;
 801ddda:	687b      	ldr	r3, [r7, #4]
 801dddc:	699b      	ldr	r3, [r3, #24]
    }
}
 801ddde:	4618      	mov	r0, r3
 801dde0:	3714      	adds	r7, #20
 801dde2:	46bd      	mov	sp, r7
 801dde4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dde6:	bf00      	nop
 801dde8:	080267d4 	.word	0x080267d4
 801ddec:	08026810 	.word	0x08026810
 801ddf0:	080267e0 	.word	0x080267e0

0801ddf4 <_ZNK14MockNamedValue11getIntValueEv>:

int MockNamedValue::getIntValue() const
{
 801ddf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ddf6:	b087      	sub	sp, #28
 801ddf8:	af04      	add	r7, sp, #16
 801ddfa:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("int", type_.asCharString());
 801ddfc:	f7f6 fb64 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 801de00:	4604      	mov	r4, r0
 801de02:	6823      	ldr	r3, [r4, #0]
 801de04:	3324      	adds	r3, #36	; 0x24
 801de06:	681d      	ldr	r5, [r3, #0]
 801de08:	687b      	ldr	r3, [r7, #4]
 801de0a:	330c      	adds	r3, #12
 801de0c:	4618      	mov	r0, r3
 801de0e:	f7ef fb03 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 801de12:	4606      	mov	r6, r0
 801de14:	f7f6 fb68 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801de18:	4603      	mov	r3, r0
 801de1a:	9302      	str	r3, [sp, #8]
 801de1c:	23d9      	movs	r3, #217	; 0xd9
 801de1e:	9301      	str	r3, [sp, #4]
 801de20:	4b06      	ldr	r3, [pc, #24]	; (801de3c <_ZNK14MockNamedValue11getIntValueEv+0x48>)
 801de22:	9300      	str	r3, [sp, #0]
 801de24:	2300      	movs	r3, #0
 801de26:	4632      	mov	r2, r6
 801de28:	4905      	ldr	r1, [pc, #20]	; (801de40 <_ZNK14MockNamedValue11getIntValueEv+0x4c>)
 801de2a:	4620      	mov	r0, r4
 801de2c:	47a8      	blx	r5
    return value_.intValue_;
 801de2e:	687b      	ldr	r3, [r7, #4]
 801de30:	699b      	ldr	r3, [r3, #24]
}
 801de32:	4618      	mov	r0, r3
 801de34:	370c      	adds	r7, #12
 801de36:	46bd      	mov	sp, r7
 801de38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801de3a:	bf00      	nop
 801de3c:	08026810 	.word	0x08026810
 801de40:	080267d4 	.word	0x080267d4

0801de44 <_ZNK14MockNamedValue15getLongIntValueEv>:

long int MockNamedValue::getLongIntValue() const
{
 801de44:	b5f0      	push	{r4, r5, r6, r7, lr}
 801de46:	b08b      	sub	sp, #44	; 0x2c
 801de48:	af04      	add	r7, sp, #16
 801de4a:	6078      	str	r0, [r7, #4]
    if(type_ == "int")
 801de4c:	687b      	ldr	r3, [r7, #4]
 801de4e:	f103 040c 	add.w	r4, r3, #12
 801de52:	f107 0308 	add.w	r3, r7, #8
 801de56:	4928      	ldr	r1, [pc, #160]	; (801def8 <_ZNK14MockNamedValue15getLongIntValueEv+0xb4>)
 801de58:	4618      	mov	r0, r3
 801de5a:	f7ee ff52 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801de5e:	f107 0308 	add.w	r3, r7, #8
 801de62:	4619      	mov	r1, r3
 801de64:	4620      	mov	r0, r4
 801de66:	f7ef fb10 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801de6a:	4603      	mov	r3, r0
 801de6c:	461c      	mov	r4, r3
 801de6e:	f107 0308 	add.w	r3, r7, #8
 801de72:	4618      	mov	r0, r3
 801de74:	f7ef fafd 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801de78:	2c00      	cmp	r4, #0
 801de7a:	d002      	beq.n	801de82 <_ZNK14MockNamedValue15getLongIntValueEv+0x3e>
        return value_.intValue_;
 801de7c:	687b      	ldr	r3, [r7, #4]
 801de7e:	699b      	ldr	r3, [r3, #24]
 801de80:	e035      	b.n	801deee <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else if(type_ == "unsigned int")
 801de82:	687b      	ldr	r3, [r7, #4]
 801de84:	f103 040c 	add.w	r4, r3, #12
 801de88:	f107 0310 	add.w	r3, r7, #16
 801de8c:	491b      	ldr	r1, [pc, #108]	; (801defc <_ZNK14MockNamedValue15getLongIntValueEv+0xb8>)
 801de8e:	4618      	mov	r0, r3
 801de90:	f7ee ff37 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801de94:	f107 0310 	add.w	r3, r7, #16
 801de98:	4619      	mov	r1, r3
 801de9a:	4620      	mov	r0, r4
 801de9c:	f7ef faf5 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801dea0:	4603      	mov	r3, r0
 801dea2:	461c      	mov	r4, r3
 801dea4:	f107 0310 	add.w	r3, r7, #16
 801dea8:	4618      	mov	r0, r3
 801deaa:	f7ef fae2 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801deae:	2c00      	cmp	r4, #0
 801deb0:	d002      	beq.n	801deb8 <_ZNK14MockNamedValue15getLongIntValueEv+0x74>
        return (long int)value_.unsignedIntValue_;
 801deb2:	687b      	ldr	r3, [r7, #4]
 801deb4:	699b      	ldr	r3, [r3, #24]
 801deb6:	e01a      	b.n	801deee <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else
    {
        STRCMP_EQUAL("long int", type_.asCharString());
 801deb8:	f7f6 fb06 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 801debc:	4604      	mov	r4, r0
 801debe:	6823      	ldr	r3, [r4, #0]
 801dec0:	3324      	adds	r3, #36	; 0x24
 801dec2:	681d      	ldr	r5, [r3, #0]
 801dec4:	687b      	ldr	r3, [r7, #4]
 801dec6:	330c      	adds	r3, #12
 801dec8:	4618      	mov	r0, r3
 801deca:	f7ef faa5 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 801dece:	4606      	mov	r6, r0
 801ded0:	f7f6 fb0a 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ded4:	4603      	mov	r3, r0
 801ded6:	9302      	str	r3, [sp, #8]
 801ded8:	23e5      	movs	r3, #229	; 0xe5
 801deda:	9301      	str	r3, [sp, #4]
 801dedc:	4b08      	ldr	r3, [pc, #32]	; (801df00 <_ZNK14MockNamedValue15getLongIntValueEv+0xbc>)
 801dede:	9300      	str	r3, [sp, #0]
 801dee0:	2300      	movs	r3, #0
 801dee2:	4632      	mov	r2, r6
 801dee4:	4907      	ldr	r1, [pc, #28]	; (801df04 <_ZNK14MockNamedValue15getLongIntValueEv+0xc0>)
 801dee6:	4620      	mov	r0, r4
 801dee8:	47a8      	blx	r5
        return value_.longIntValue_;
 801deea:	687b      	ldr	r3, [r7, #4]
 801deec:	699b      	ldr	r3, [r3, #24]
    }
}
 801deee:	4618      	mov	r0, r3
 801def0:	371c      	adds	r7, #28
 801def2:	46bd      	mov	sp, r7
 801def4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801def6:	bf00      	nop
 801def8:	080267d4 	.word	0x080267d4
 801defc:	080267e0 	.word	0x080267e0
 801df00:	08026810 	.word	0x08026810
 801df04:	080267f0 	.word	0x080267f0

0801df08 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>:

unsigned long int MockNamedValue::getUnsignedLongIntValue() const
{
 801df08:	b5f0      	push	{r4, r5, r6, r7, lr}
 801df0a:	b08d      	sub	sp, #52	; 0x34
 801df0c:	af04      	add	r7, sp, #16
 801df0e:	6078      	str	r0, [r7, #4]
    if(type_ == "unsigned int")
 801df10:	687b      	ldr	r3, [r7, #4]
 801df12:	f103 040c 	add.w	r4, r3, #12
 801df16:	f107 0308 	add.w	r3, r7, #8
 801df1a:	4940      	ldr	r1, [pc, #256]	; (801e01c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x114>)
 801df1c:	4618      	mov	r0, r3
 801df1e:	f7ee fef0 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801df22:	f107 0308 	add.w	r3, r7, #8
 801df26:	4619      	mov	r1, r3
 801df28:	4620      	mov	r0, r4
 801df2a:	f7ef faae 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801df2e:	4603      	mov	r3, r0
 801df30:	461c      	mov	r4, r3
 801df32:	f107 0308 	add.w	r3, r7, #8
 801df36:	4618      	mov	r0, r3
 801df38:	f7ef fa9b 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801df3c:	2c00      	cmp	r4, #0
 801df3e:	d002      	beq.n	801df46 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x3e>
        return value_.unsignedIntValue_;
 801df40:	687b      	ldr	r3, [r7, #4]
 801df42:	699b      	ldr	r3, [r3, #24]
 801df44:	e066      	b.n	801e014 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "int" && value_.intValue_ >= 0)
 801df46:	687b      	ldr	r3, [r7, #4]
 801df48:	f103 040c 	add.w	r4, r3, #12
 801df4c:	f107 0310 	add.w	r3, r7, #16
 801df50:	4933      	ldr	r1, [pc, #204]	; (801e020 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x118>)
 801df52:	4618      	mov	r0, r3
 801df54:	f7ee fed5 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801df58:	2501      	movs	r5, #1
 801df5a:	f107 0310 	add.w	r3, r7, #16
 801df5e:	4619      	mov	r1, r3
 801df60:	4620      	mov	r0, r4
 801df62:	f7ef fa92 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801df66:	4603      	mov	r3, r0
 801df68:	2b00      	cmp	r3, #0
 801df6a:	d005      	beq.n	801df78 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801df6c:	687b      	ldr	r3, [r7, #4]
 801df6e:	699b      	ldr	r3, [r3, #24]
 801df70:	2b00      	cmp	r3, #0
 801df72:	db01      	blt.n	801df78 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801df74:	2401      	movs	r4, #1
 801df76:	e000      	b.n	801df7a <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x72>
 801df78:	2400      	movs	r4, #0
 801df7a:	2d00      	cmp	r5, #0
 801df7c:	d004      	beq.n	801df88 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x80>
 801df7e:	f107 0310 	add.w	r3, r7, #16
 801df82:	4618      	mov	r0, r3
 801df84:	f7ef fa75 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801df88:	2c00      	cmp	r4, #0
 801df8a:	d002      	beq.n	801df92 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x8a>
        return (unsigned long int)value_.intValue_;
 801df8c:	687b      	ldr	r3, [r7, #4]
 801df8e:	699b      	ldr	r3, [r3, #24]
 801df90:	e040      	b.n	801e014 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "long int" && value_.longIntValue_ >= 0)
 801df92:	687b      	ldr	r3, [r7, #4]
 801df94:	f103 040c 	add.w	r4, r3, #12
 801df98:	f107 0318 	add.w	r3, r7, #24
 801df9c:	4921      	ldr	r1, [pc, #132]	; (801e024 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x11c>)
 801df9e:	4618      	mov	r0, r3
 801dfa0:	f7ee feaf 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801dfa4:	2501      	movs	r5, #1
 801dfa6:	f107 0318 	add.w	r3, r7, #24
 801dfaa:	4619      	mov	r1, r3
 801dfac:	4620      	mov	r0, r4
 801dfae:	f7ef fa6c 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801dfb2:	4603      	mov	r3, r0
 801dfb4:	2b00      	cmp	r3, #0
 801dfb6:	d005      	beq.n	801dfc4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801dfb8:	687b      	ldr	r3, [r7, #4]
 801dfba:	699b      	ldr	r3, [r3, #24]
 801dfbc:	2b00      	cmp	r3, #0
 801dfbe:	db01      	blt.n	801dfc4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801dfc0:	2401      	movs	r4, #1
 801dfc2:	e000      	b.n	801dfc6 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbe>
 801dfc4:	2400      	movs	r4, #0
 801dfc6:	2d00      	cmp	r5, #0
 801dfc8:	d004      	beq.n	801dfd4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xcc>
 801dfca:	f107 0318 	add.w	r3, r7, #24
 801dfce:	4618      	mov	r0, r3
 801dfd0:	f7ef fa4f 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801dfd4:	2c00      	cmp	r4, #0
 801dfd6:	d002      	beq.n	801dfde <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xd6>
        return (unsigned long int)value_.longIntValue_;
 801dfd8:	687b      	ldr	r3, [r7, #4]
 801dfda:	699b      	ldr	r3, [r3, #24]
 801dfdc:	e01a      	b.n	801e014 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else
    {
        STRCMP_EQUAL("unsigned long int", type_.asCharString());
 801dfde:	f7f6 fa73 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 801dfe2:	4604      	mov	r4, r0
 801dfe4:	6823      	ldr	r3, [r4, #0]
 801dfe6:	3324      	adds	r3, #36	; 0x24
 801dfe8:	681d      	ldr	r5, [r3, #0]
 801dfea:	687b      	ldr	r3, [r7, #4]
 801dfec:	330c      	adds	r3, #12
 801dfee:	4618      	mov	r0, r3
 801dff0:	f7ef fa12 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 801dff4:	4606      	mov	r6, r0
 801dff6:	f7f6 fa77 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801dffa:	4603      	mov	r3, r0
 801dffc:	9302      	str	r3, [sp, #8]
 801dffe:	23f4      	movs	r3, #244	; 0xf4
 801e000:	9301      	str	r3, [sp, #4]
 801e002:	4b09      	ldr	r3, [pc, #36]	; (801e028 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x120>)
 801e004:	9300      	str	r3, [sp, #0]
 801e006:	2300      	movs	r3, #0
 801e008:	4632      	mov	r2, r6
 801e00a:	4908      	ldr	r1, [pc, #32]	; (801e02c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x124>)
 801e00c:	4620      	mov	r0, r4
 801e00e:	47a8      	blx	r5
        return value_.unsignedLongIntValue_;
 801e010:	687b      	ldr	r3, [r7, #4]
 801e012:	699b      	ldr	r3, [r3, #24]
    }
}
 801e014:	4618      	mov	r0, r3
 801e016:	3724      	adds	r7, #36	; 0x24
 801e018:	46bd      	mov	sp, r7
 801e01a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e01c:	080267e0 	.word	0x080267e0
 801e020:	080267d4 	.word	0x080267d4
 801e024:	080267f0 	.word	0x080267f0
 801e028:	08026810 	.word	0x08026810
 801e02c:	080267fc 	.word	0x080267fc

0801e030 <_ZNK14MockNamedValue19getLongLongIntValueEv>:
}

#else

cpputest_longlong MockNamedValue::getLongLongIntValue() const
{
 801e030:	b5b0      	push	{r4, r5, r7, lr}
 801e032:	b084      	sub	sp, #16
 801e034:	af02      	add	r7, sp, #8
 801e036:	6078      	str	r0, [r7, #4]
 801e038:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801e03a:	f7f6 fa45 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 801e03e:	4604      	mov	r4, r0
 801e040:	6823      	ldr	r3, [r4, #0]
 801e042:	3368      	adds	r3, #104	; 0x68
 801e044:	681d      	ldr	r5, [r3, #0]
 801e046:	f7f6 fa4f 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e04a:	4603      	mov	r3, r0
 801e04c:	9300      	str	r3, [sp, #0]
 801e04e:	f240 1323 	movw	r3, #291	; 0x123
 801e052:	4a06      	ldr	r2, [pc, #24]	; (801e06c <_ZNK14MockNamedValue19getLongLongIntValueEv+0x3c>)
 801e054:	4906      	ldr	r1, [pc, #24]	; (801e070 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x40>)
 801e056:	4620      	mov	r0, r4
 801e058:	47a8      	blx	r5
    return cpputest_longlong(0);
 801e05a:	2100      	movs	r1, #0
 801e05c:	6878      	ldr	r0, [r7, #4]
 801e05e:	f7ec fe87 	bl	800ad70 <_ZN17cpputest_longlongC1Ei>
}
 801e062:	6878      	ldr	r0, [r7, #4]
 801e064:	3708      	adds	r7, #8
 801e066:	46bd      	mov	sp, r7
 801e068:	bdb0      	pop	{r4, r5, r7, pc}
 801e06a:	bf00      	nop
 801e06c:	08026810 	.word	0x08026810
 801e070:	0802682c 	.word	0x0802682c

0801e074 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockNamedValue::getUnsignedLongLongIntValue() const
{
 801e074:	b5b0      	push	{r4, r5, r7, lr}
 801e076:	b084      	sub	sp, #16
 801e078:	af02      	add	r7, sp, #8
 801e07a:	6078      	str	r0, [r7, #4]
 801e07c:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801e07e:	f7f6 fa23 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 801e082:	4604      	mov	r4, r0
 801e084:	6823      	ldr	r3, [r4, #0]
 801e086:	3368      	adds	r3, #104	; 0x68
 801e088:	681d      	ldr	r5, [r3, #0]
 801e08a:	f7f6 fa2d 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e08e:	4603      	mov	r3, r0
 801e090:	9300      	str	r3, [sp, #0]
 801e092:	f240 1329 	movw	r3, #297	; 0x129
 801e096:	4a06      	ldr	r2, [pc, #24]	; (801e0b0 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x3c>)
 801e098:	4906      	ldr	r1, [pc, #24]	; (801e0b4 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x40>)
 801e09a:	4620      	mov	r0, r4
 801e09c:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801e09e:	2100      	movs	r1, #0
 801e0a0:	6878      	ldr	r0, [r7, #4]
 801e0a2:	f7ec fe71 	bl	800ad88 <_ZN18cpputest_ulonglongC1Ei>
}
 801e0a6:	6878      	ldr	r0, [r7, #4]
 801e0a8:	3708      	adds	r7, #8
 801e0aa:	46bd      	mov	sp, r7
 801e0ac:	bdb0      	pop	{r4, r5, r7, pc}
 801e0ae:	bf00      	nop
 801e0b0:	08026810 	.word	0x08026810
 801e0b4:	0802684c 	.word	0x0802684c

0801e0b8 <_ZNK14MockNamedValue14getDoubleValueEv>:

#endif

double MockNamedValue::getDoubleValue() const
{
 801e0b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e0ba:	b087      	sub	sp, #28
 801e0bc:	af04      	add	r7, sp, #16
 801e0be:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801e0c0:	f7f6 fa02 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 801e0c4:	4604      	mov	r4, r0
 801e0c6:	6823      	ldr	r3, [r4, #0]
 801e0c8:	3324      	adds	r3, #36	; 0x24
 801e0ca:	681d      	ldr	r5, [r3, #0]
 801e0cc:	687b      	ldr	r3, [r7, #4]
 801e0ce:	330c      	adds	r3, #12
 801e0d0:	4618      	mov	r0, r3
 801e0d2:	f7ef f9a1 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 801e0d6:	4606      	mov	r6, r0
 801e0d8:	f7f6 fa06 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e0dc:	4603      	mov	r3, r0
 801e0de:	9302      	str	r3, [sp, #8]
 801e0e0:	f240 1331 	movw	r3, #305	; 0x131
 801e0e4:	9301      	str	r3, [sp, #4]
 801e0e6:	4b09      	ldr	r3, [pc, #36]	; (801e10c <_ZNK14MockNamedValue14getDoubleValueEv+0x54>)
 801e0e8:	9300      	str	r3, [sp, #0]
 801e0ea:	2300      	movs	r3, #0
 801e0ec:	4632      	mov	r2, r6
 801e0ee:	4908      	ldr	r1, [pc, #32]	; (801e110 <_ZNK14MockNamedValue14getDoubleValueEv+0x58>)
 801e0f0:	4620      	mov	r0, r4
 801e0f2:	47a8      	blx	r5
    return value_.doubleValue_.value;
 801e0f4:	687b      	ldr	r3, [r7, #4]
 801e0f6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801e0fa:	ec43 2b17 	vmov	d7, r2, r3
}
 801e0fe:	eeb0 0a47 	vmov.f32	s0, s14
 801e102:	eef0 0a67 	vmov.f32	s1, s15
 801e106:	370c      	adds	r7, #12
 801e108:	46bd      	mov	sp, r7
 801e10a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e10c:	08026810 	.word	0x08026810
 801e110:	08026878 	.word	0x08026878

0801e114 <_ZNK14MockNamedValue18getDoubleToleranceEv>:

double MockNamedValue::getDoubleTolerance() const
{
 801e114:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e116:	b087      	sub	sp, #28
 801e118:	af04      	add	r7, sp, #16
 801e11a:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801e11c:	f7f6 f9d4 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 801e120:	4604      	mov	r4, r0
 801e122:	6823      	ldr	r3, [r4, #0]
 801e124:	3324      	adds	r3, #36	; 0x24
 801e126:	681d      	ldr	r5, [r3, #0]
 801e128:	687b      	ldr	r3, [r7, #4]
 801e12a:	330c      	adds	r3, #12
 801e12c:	4618      	mov	r0, r3
 801e12e:	f7ef f973 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 801e132:	4606      	mov	r6, r0
 801e134:	f7f6 f9d8 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e138:	4603      	mov	r3, r0
 801e13a:	9302      	str	r3, [sp, #8]
 801e13c:	f240 1337 	movw	r3, #311	; 0x137
 801e140:	9301      	str	r3, [sp, #4]
 801e142:	4b09      	ldr	r3, [pc, #36]	; (801e168 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x54>)
 801e144:	9300      	str	r3, [sp, #0]
 801e146:	2300      	movs	r3, #0
 801e148:	4632      	mov	r2, r6
 801e14a:	4908      	ldr	r1, [pc, #32]	; (801e16c <_ZNK14MockNamedValue18getDoubleToleranceEv+0x58>)
 801e14c:	4620      	mov	r0, r4
 801e14e:	47a8      	blx	r5
    return value_.doubleValue_.tolerance;
 801e150:	687b      	ldr	r3, [r7, #4]
 801e152:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801e156:	ec43 2b17 	vmov	d7, r2, r3
}
 801e15a:	eeb0 0a47 	vmov.f32	s0, s14
 801e15e:	eef0 0a67 	vmov.f32	s1, s15
 801e162:	370c      	adds	r7, #12
 801e164:	46bd      	mov	sp, r7
 801e166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e168:	08026810 	.word	0x08026810
 801e16c:	08026878 	.word	0x08026878

0801e170 <_ZNK14MockNamedValue14getStringValueEv>:

const char* MockNamedValue::getStringValue() const
{
 801e170:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e172:	b087      	sub	sp, #28
 801e174:	af04      	add	r7, sp, #16
 801e176:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const char*", type_.asCharString());
 801e178:	f7f6 f9a6 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 801e17c:	4604      	mov	r4, r0
 801e17e:	6823      	ldr	r3, [r4, #0]
 801e180:	3324      	adds	r3, #36	; 0x24
 801e182:	681d      	ldr	r5, [r3, #0]
 801e184:	687b      	ldr	r3, [r7, #4]
 801e186:	330c      	adds	r3, #12
 801e188:	4618      	mov	r0, r3
 801e18a:	f7ef f945 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 801e18e:	4606      	mov	r6, r0
 801e190:	f7f6 f9aa 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e194:	4603      	mov	r3, r0
 801e196:	9302      	str	r3, [sp, #8]
 801e198:	f240 133d 	movw	r3, #317	; 0x13d
 801e19c:	9301      	str	r3, [sp, #4]
 801e19e:	4b06      	ldr	r3, [pc, #24]	; (801e1b8 <_ZNK14MockNamedValue14getStringValueEv+0x48>)
 801e1a0:	9300      	str	r3, [sp, #0]
 801e1a2:	2300      	movs	r3, #0
 801e1a4:	4632      	mov	r2, r6
 801e1a6:	4905      	ldr	r1, [pc, #20]	; (801e1bc <_ZNK14MockNamedValue14getStringValueEv+0x4c>)
 801e1a8:	4620      	mov	r0, r4
 801e1aa:	47a8      	blx	r5
    return value_.stringValue_;
 801e1ac:	687b      	ldr	r3, [r7, #4]
 801e1ae:	699b      	ldr	r3, [r3, #24]
}
 801e1b0:	4618      	mov	r0, r3
 801e1b2:	370c      	adds	r7, #12
 801e1b4:	46bd      	mov	sp, r7
 801e1b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e1b8:	08026810 	.word	0x08026810
 801e1bc:	080268a0 	.word	0x080268a0

0801e1c0 <_ZNK14MockNamedValue15getPointerValueEv>:

void* MockNamedValue::getPointerValue() const
{
 801e1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e1c2:	b087      	sub	sp, #28
 801e1c4:	af04      	add	r7, sp, #16
 801e1c6:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void*", type_.asCharString());
 801e1c8:	f7f6 f97e 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 801e1cc:	4604      	mov	r4, r0
 801e1ce:	6823      	ldr	r3, [r4, #0]
 801e1d0:	3324      	adds	r3, #36	; 0x24
 801e1d2:	681d      	ldr	r5, [r3, #0]
 801e1d4:	687b      	ldr	r3, [r7, #4]
 801e1d6:	330c      	adds	r3, #12
 801e1d8:	4618      	mov	r0, r3
 801e1da:	f7ef f91d 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 801e1de:	4606      	mov	r6, r0
 801e1e0:	f7f6 f982 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e1e4:	4603      	mov	r3, r0
 801e1e6:	9302      	str	r3, [sp, #8]
 801e1e8:	f240 1343 	movw	r3, #323	; 0x143
 801e1ec:	9301      	str	r3, [sp, #4]
 801e1ee:	4b06      	ldr	r3, [pc, #24]	; (801e208 <_ZNK14MockNamedValue15getPointerValueEv+0x48>)
 801e1f0:	9300      	str	r3, [sp, #0]
 801e1f2:	2300      	movs	r3, #0
 801e1f4:	4632      	mov	r2, r6
 801e1f6:	4905      	ldr	r1, [pc, #20]	; (801e20c <_ZNK14MockNamedValue15getPointerValueEv+0x4c>)
 801e1f8:	4620      	mov	r0, r4
 801e1fa:	47a8      	blx	r5
    return value_.pointerValue_;
 801e1fc:	687b      	ldr	r3, [r7, #4]
 801e1fe:	699b      	ldr	r3, [r3, #24]
}
 801e200:	4618      	mov	r0, r3
 801e202:	370c      	adds	r7, #12
 801e204:	46bd      	mov	sp, r7
 801e206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e208:	08026810 	.word	0x08026810
 801e20c:	08026880 	.word	0x08026880

0801e210 <_ZNK14MockNamedValue20getConstPointerValueEv>:

const void* MockNamedValue::getConstPointerValue() const
{
 801e210:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e212:	b087      	sub	sp, #28
 801e214:	af04      	add	r7, sp, #16
 801e216:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const void*", type_.asCharString());
 801e218:	f7f6 f956 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 801e21c:	4604      	mov	r4, r0
 801e21e:	6823      	ldr	r3, [r4, #0]
 801e220:	3324      	adds	r3, #36	; 0x24
 801e222:	681d      	ldr	r5, [r3, #0]
 801e224:	687b      	ldr	r3, [r7, #4]
 801e226:	330c      	adds	r3, #12
 801e228:	4618      	mov	r0, r3
 801e22a:	f7ef f8f5 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 801e22e:	4606      	mov	r6, r0
 801e230:	f7f6 f95a 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e234:	4603      	mov	r3, r0
 801e236:	9302      	str	r3, [sp, #8]
 801e238:	f240 1349 	movw	r3, #329	; 0x149
 801e23c:	9301      	str	r3, [sp, #4]
 801e23e:	4b06      	ldr	r3, [pc, #24]	; (801e258 <_ZNK14MockNamedValue20getConstPointerValueEv+0x48>)
 801e240:	9300      	str	r3, [sp, #0]
 801e242:	2300      	movs	r3, #0
 801e244:	4632      	mov	r2, r6
 801e246:	4905      	ldr	r1, [pc, #20]	; (801e25c <_ZNK14MockNamedValue20getConstPointerValueEv+0x4c>)
 801e248:	4620      	mov	r0, r4
 801e24a:	47a8      	blx	r5
    return value_.pointerValue_;
 801e24c:	687b      	ldr	r3, [r7, #4]
 801e24e:	699b      	ldr	r3, [r3, #24]
}
 801e250:	4618      	mov	r0, r3
 801e252:	370c      	adds	r7, #12
 801e254:	46bd      	mov	sp, r7
 801e256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e258:	08026810 	.word	0x08026810
 801e25c:	08026888 	.word	0x08026888

0801e260 <_ZNK14MockNamedValue23getFunctionPointerValueEv>:

void (*MockNamedValue::getFunctionPointerValue() const)()
{
 801e260:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e262:	b087      	sub	sp, #28
 801e264:	af04      	add	r7, sp, #16
 801e266:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void (*)()", type_.asCharString());
 801e268:	f7f6 f92e 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 801e26c:	4604      	mov	r4, r0
 801e26e:	6823      	ldr	r3, [r4, #0]
 801e270:	3324      	adds	r3, #36	; 0x24
 801e272:	681d      	ldr	r5, [r3, #0]
 801e274:	687b      	ldr	r3, [r7, #4]
 801e276:	330c      	adds	r3, #12
 801e278:	4618      	mov	r0, r3
 801e27a:	f7ef f8cd 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 801e27e:	4606      	mov	r6, r0
 801e280:	f7f6 f932 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e284:	4603      	mov	r3, r0
 801e286:	9302      	str	r3, [sp, #8]
 801e288:	f240 134f 	movw	r3, #335	; 0x14f
 801e28c:	9301      	str	r3, [sp, #4]
 801e28e:	4b06      	ldr	r3, [pc, #24]	; (801e2a8 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x48>)
 801e290:	9300      	str	r3, [sp, #0]
 801e292:	2300      	movs	r3, #0
 801e294:	4632      	mov	r2, r6
 801e296:	4905      	ldr	r1, [pc, #20]	; (801e2ac <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x4c>)
 801e298:	4620      	mov	r0, r4
 801e29a:	47a8      	blx	r5
    return value_.functionPointerValue_;
 801e29c:	687b      	ldr	r3, [r7, #4]
 801e29e:	699b      	ldr	r3, [r3, #24]
}
 801e2a0:	4618      	mov	r0, r3
 801e2a2:	370c      	adds	r7, #12
 801e2a4:	46bd      	mov	sp, r7
 801e2a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e2a8:	08026810 	.word	0x08026810
 801e2ac:	08026894 	.word	0x08026894

0801e2b0 <_ZNK14MockNamedValue15getMemoryBufferEv>:

const unsigned char* MockNamedValue::getMemoryBuffer() const
{
 801e2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e2b2:	b087      	sub	sp, #28
 801e2b4:	af04      	add	r7, sp, #16
 801e2b6:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const unsigned char*", type_.asCharString());
 801e2b8:	f7f6 f906 	bl	80144c8 <_ZN10UtestShell10getCurrentEv>
 801e2bc:	4604      	mov	r4, r0
 801e2be:	6823      	ldr	r3, [r4, #0]
 801e2c0:	3324      	adds	r3, #36	; 0x24
 801e2c2:	681d      	ldr	r5, [r3, #0]
 801e2c4:	687b      	ldr	r3, [r7, #4]
 801e2c6:	330c      	adds	r3, #12
 801e2c8:	4618      	mov	r0, r3
 801e2ca:	f7ef f8a5 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 801e2ce:	4606      	mov	r6, r0
 801e2d0:	f7f6 f90a 	bl	80144e8 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e2d4:	4603      	mov	r3, r0
 801e2d6:	9302      	str	r3, [sp, #8]
 801e2d8:	f240 1355 	movw	r3, #341	; 0x155
 801e2dc:	9301      	str	r3, [sp, #4]
 801e2de:	4b06      	ldr	r3, [pc, #24]	; (801e2f8 <_ZNK14MockNamedValue15getMemoryBufferEv+0x48>)
 801e2e0:	9300      	str	r3, [sp, #0]
 801e2e2:	2300      	movs	r3, #0
 801e2e4:	4632      	mov	r2, r6
 801e2e6:	4905      	ldr	r1, [pc, #20]	; (801e2fc <_ZNK14MockNamedValue15getMemoryBufferEv+0x4c>)
 801e2e8:	4620      	mov	r0, r4
 801e2ea:	47a8      	blx	r5
    return value_.memoryBufferValue_;
 801e2ec:	687b      	ldr	r3, [r7, #4]
 801e2ee:	699b      	ldr	r3, [r3, #24]
}
 801e2f0:	4618      	mov	r0, r3
 801e2f2:	370c      	adds	r7, #12
 801e2f4:	46bd      	mov	sp, r7
 801e2f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e2f8:	08026810 	.word	0x08026810
 801e2fc:	080268ac 	.word	0x080268ac

0801e300 <_ZNK14MockNamedValue21getConstObjectPointerEv>:

const void* MockNamedValue::getConstObjectPointer() const
{
 801e300:	b480      	push	{r7}
 801e302:	b083      	sub	sp, #12
 801e304:	af00      	add	r7, sp, #0
 801e306:	6078      	str	r0, [r7, #4]
    return value_.constObjectPointerValue_;
 801e308:	687b      	ldr	r3, [r7, #4]
 801e30a:	699b      	ldr	r3, [r3, #24]
}
 801e30c:	4618      	mov	r0, r3
 801e30e:	370c      	adds	r7, #12
 801e310:	46bd      	mov	sp, r7
 801e312:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e316:	4770      	bx	lr

0801e318 <_ZNK14MockNamedValue16getObjectPointerEv>:

void* MockNamedValue::getObjectPointer() const
{
 801e318:	b480      	push	{r7}
 801e31a:	b083      	sub	sp, #12
 801e31c:	af00      	add	r7, sp, #0
 801e31e:	6078      	str	r0, [r7, #4]
    return value_.objectPointerValue_;
 801e320:	687b      	ldr	r3, [r7, #4]
 801e322:	699b      	ldr	r3, [r3, #24]
}
 801e324:	4618      	mov	r0, r3
 801e326:	370c      	adds	r7, #12
 801e328:	46bd      	mov	sp, r7
 801e32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e32e:	4770      	bx	lr

0801e330 <_ZNK14MockNamedValue7getSizeEv>:

size_t MockNamedValue::getSize() const
{
 801e330:	b480      	push	{r7}
 801e332:	b083      	sub	sp, #12
 801e334:	af00      	add	r7, sp, #0
 801e336:	6078      	str	r0, [r7, #4]
    return size_;
 801e338:	687b      	ldr	r3, [r7, #4]
 801e33a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801e33c:	4618      	mov	r0, r3
 801e33e:	370c      	adds	r7, #12
 801e340:	46bd      	mov	sp, r7
 801e342:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e346:	4770      	bx	lr

0801e348 <_ZNK14MockNamedValue13getComparatorEv>:

MockNamedValueComparator* MockNamedValue::getComparator() const
{
 801e348:	b480      	push	{r7}
 801e34a:	b083      	sub	sp, #12
 801e34c:	af00      	add	r7, sp, #0
 801e34e:	6078      	str	r0, [r7, #4]
    return comparator_;
 801e350:	687b      	ldr	r3, [r7, #4]
 801e352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 801e354:	4618      	mov	r0, r3
 801e356:	370c      	adds	r7, #12
 801e358:	46bd      	mov	sp, r7
 801e35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e35e:	4770      	bx	lr

0801e360 <_ZNK14MockNamedValue9getCopierEv>:

MockNamedValueCopier* MockNamedValue::getCopier() const
{
 801e360:	b480      	push	{r7}
 801e362:	b083      	sub	sp, #12
 801e364:	af00      	add	r7, sp, #0
 801e366:	6078      	str	r0, [r7, #4]
    return copier_;
 801e368:	687b      	ldr	r3, [r7, #4]
 801e36a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 801e36c:	4618      	mov	r0, r3
 801e36e:	370c      	adds	r7, #12
 801e370:	46bd      	mov	sp, r7
 801e372:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e376:	4770      	bx	lr

0801e378 <_ZNK14MockNamedValue6equalsERKS_>:

bool MockNamedValue::equals(const MockNamedValue& p) const
{
 801e378:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e37a:	b0cd      	sub	sp, #308	; 0x134
 801e37c:	af00      	add	r7, sp, #0
 801e37e:	1d3b      	adds	r3, r7, #4
 801e380:	6018      	str	r0, [r3, #0]
 801e382:	463b      	mov	r3, r7
 801e384:	6019      	str	r1, [r3, #0]
    if((type_ == "long int") && (p.type_ == "int"))
 801e386:	2500      	movs	r5, #0
 801e388:	1d3b      	adds	r3, r7, #4
 801e38a:	681b      	ldr	r3, [r3, #0]
 801e38c:	f103 040c 	add.w	r4, r3, #12
 801e390:	f107 0308 	add.w	r3, r7, #8
 801e394:	49bb      	ldr	r1, [pc, #748]	; (801e684 <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801e396:	4618      	mov	r0, r3
 801e398:	f7ee fcb3 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801e39c:	2601      	movs	r6, #1
 801e39e:	f107 0308 	add.w	r3, r7, #8
 801e3a2:	4619      	mov	r1, r3
 801e3a4:	4620      	mov	r0, r4
 801e3a6:	f7ef f870 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801e3aa:	4603      	mov	r3, r0
 801e3ac:	2b00      	cmp	r3, #0
 801e3ae:	d015      	beq.n	801e3dc <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801e3b0:	463b      	mov	r3, r7
 801e3b2:	681b      	ldr	r3, [r3, #0]
 801e3b4:	f103 040c 	add.w	r4, r3, #12
 801e3b8:	f107 0310 	add.w	r3, r7, #16
 801e3bc:	49b2      	ldr	r1, [pc, #712]	; (801e688 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801e3be:	4618      	mov	r0, r3
 801e3c0:	f7ee fc9f 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801e3c4:	2501      	movs	r5, #1
 801e3c6:	f107 0310 	add.w	r3, r7, #16
 801e3ca:	4619      	mov	r1, r3
 801e3cc:	4620      	mov	r0, r4
 801e3ce:	f7ef f85c 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801e3d2:	4603      	mov	r3, r0
 801e3d4:	2b00      	cmp	r3, #0
 801e3d6:	d001      	beq.n	801e3dc <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801e3d8:	2401      	movs	r4, #1
 801e3da:	e000      	b.n	801e3de <_ZNK14MockNamedValue6equalsERKS_+0x66>
 801e3dc:	2400      	movs	r4, #0
 801e3de:	2d00      	cmp	r5, #0
 801e3e0:	d004      	beq.n	801e3ec <_ZNK14MockNamedValue6equalsERKS_+0x74>
 801e3e2:	f107 0310 	add.w	r3, r7, #16
 801e3e6:	4618      	mov	r0, r3
 801e3e8:	f7ef f843 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801e3ec:	2e00      	cmp	r6, #0
 801e3ee:	d004      	beq.n	801e3fa <_ZNK14MockNamedValue6equalsERKS_+0x82>
 801e3f0:	f107 0308 	add.w	r3, r7, #8
 801e3f4:	4618      	mov	r0, r3
 801e3f6:	f7ef f83c 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801e3fa:	2c00      	cmp	r4, #0
 801e3fc:	d00c      	beq.n	801e418 <_ZNK14MockNamedValue6equalsERKS_+0xa0>
        return value_.longIntValue_ == p.value_.intValue_;
 801e3fe:	1d3b      	adds	r3, r7, #4
 801e400:	681b      	ldr	r3, [r3, #0]
 801e402:	699a      	ldr	r2, [r3, #24]
 801e404:	463b      	mov	r3, r7
 801e406:	681b      	ldr	r3, [r3, #0]
 801e408:	699b      	ldr	r3, [r3, #24]
 801e40a:	429a      	cmp	r2, r3
 801e40c:	bf0c      	ite	eq
 801e40e:	2301      	moveq	r3, #1
 801e410:	2300      	movne	r3, #0
 801e412:	b2dc      	uxtb	r4, r3
 801e414:	f000 bd60 	b.w	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "long int"))
 801e418:	2500      	movs	r5, #0
 801e41a:	1d3b      	adds	r3, r7, #4
 801e41c:	681b      	ldr	r3, [r3, #0]
 801e41e:	f103 040c 	add.w	r4, r3, #12
 801e422:	f107 0318 	add.w	r3, r7, #24
 801e426:	4998      	ldr	r1, [pc, #608]	; (801e688 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801e428:	4618      	mov	r0, r3
 801e42a:	f7ee fc6a 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801e42e:	2601      	movs	r6, #1
 801e430:	f107 0318 	add.w	r3, r7, #24
 801e434:	4619      	mov	r1, r3
 801e436:	4620      	mov	r0, r4
 801e438:	f7ef f827 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801e43c:	4603      	mov	r3, r0
 801e43e:	2b00      	cmp	r3, #0
 801e440:	d015      	beq.n	801e46e <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801e442:	463b      	mov	r3, r7
 801e444:	681b      	ldr	r3, [r3, #0]
 801e446:	f103 040c 	add.w	r4, r3, #12
 801e44a:	f107 0320 	add.w	r3, r7, #32
 801e44e:	498d      	ldr	r1, [pc, #564]	; (801e684 <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801e450:	4618      	mov	r0, r3
 801e452:	f7ee fc56 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801e456:	2501      	movs	r5, #1
 801e458:	f107 0320 	add.w	r3, r7, #32
 801e45c:	4619      	mov	r1, r3
 801e45e:	4620      	mov	r0, r4
 801e460:	f7ef f813 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801e464:	4603      	mov	r3, r0
 801e466:	2b00      	cmp	r3, #0
 801e468:	d001      	beq.n	801e46e <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801e46a:	2401      	movs	r4, #1
 801e46c:	e000      	b.n	801e470 <_ZNK14MockNamedValue6equalsERKS_+0xf8>
 801e46e:	2400      	movs	r4, #0
 801e470:	2d00      	cmp	r5, #0
 801e472:	d004      	beq.n	801e47e <_ZNK14MockNamedValue6equalsERKS_+0x106>
 801e474:	f107 0320 	add.w	r3, r7, #32
 801e478:	4618      	mov	r0, r3
 801e47a:	f7ee fffa 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801e47e:	2e00      	cmp	r6, #0
 801e480:	d004      	beq.n	801e48c <_ZNK14MockNamedValue6equalsERKS_+0x114>
 801e482:	f107 0318 	add.w	r3, r7, #24
 801e486:	4618      	mov	r0, r3
 801e488:	f7ee fff3 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801e48c:	2c00      	cmp	r4, #0
 801e48e:	d00c      	beq.n	801e4aa <_ZNK14MockNamedValue6equalsERKS_+0x132>
        return value_.intValue_ == p.value_.longIntValue_;
 801e490:	1d3b      	adds	r3, r7, #4
 801e492:	681b      	ldr	r3, [r3, #0]
 801e494:	699a      	ldr	r2, [r3, #24]
 801e496:	463b      	mov	r3, r7
 801e498:	681b      	ldr	r3, [r3, #0]
 801e49a:	699b      	ldr	r3, [r3, #24]
 801e49c:	429a      	cmp	r2, r3
 801e49e:	bf0c      	ite	eq
 801e4a0:	2301      	moveq	r3, #1
 801e4a2:	2300      	movne	r3, #0
 801e4a4:	b2dc      	uxtb	r4, r3
 801e4a6:	f000 bd17 	b.w	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "int"))
 801e4aa:	2500      	movs	r5, #0
 801e4ac:	1d3b      	adds	r3, r7, #4
 801e4ae:	681b      	ldr	r3, [r3, #0]
 801e4b0:	f103 040c 	add.w	r4, r3, #12
 801e4b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e4b8:	4974      	ldr	r1, [pc, #464]	; (801e68c <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801e4ba:	4618      	mov	r0, r3
 801e4bc:	f7ee fc21 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801e4c0:	2601      	movs	r6, #1
 801e4c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e4c6:	4619      	mov	r1, r3
 801e4c8:	4620      	mov	r0, r4
 801e4ca:	f7ee ffde 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801e4ce:	4603      	mov	r3, r0
 801e4d0:	2b00      	cmp	r3, #0
 801e4d2:	d015      	beq.n	801e500 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801e4d4:	463b      	mov	r3, r7
 801e4d6:	681b      	ldr	r3, [r3, #0]
 801e4d8:	f103 040c 	add.w	r4, r3, #12
 801e4dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e4e0:	4969      	ldr	r1, [pc, #420]	; (801e688 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801e4e2:	4618      	mov	r0, r3
 801e4e4:	f7ee fc0d 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801e4e8:	2501      	movs	r5, #1
 801e4ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e4ee:	4619      	mov	r1, r3
 801e4f0:	4620      	mov	r0, r4
 801e4f2:	f7ee ffca 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801e4f6:	4603      	mov	r3, r0
 801e4f8:	2b00      	cmp	r3, #0
 801e4fa:	d001      	beq.n	801e500 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801e4fc:	2401      	movs	r4, #1
 801e4fe:	e000      	b.n	801e502 <_ZNK14MockNamedValue6equalsERKS_+0x18a>
 801e500:	2400      	movs	r4, #0
 801e502:	2d00      	cmp	r5, #0
 801e504:	d004      	beq.n	801e510 <_ZNK14MockNamedValue6equalsERKS_+0x198>
 801e506:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e50a:	4618      	mov	r0, r3
 801e50c:	f7ee ffb1 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801e510:	2e00      	cmp	r6, #0
 801e512:	d004      	beq.n	801e51e <_ZNK14MockNamedValue6equalsERKS_+0x1a6>
 801e514:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e518:	4618      	mov	r0, r3
 801e51a:	f7ee ffaa 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801e51e:	2c00      	cmp	r4, #0
 801e520:	d012      	beq.n	801e548 <_ZNK14MockNamedValue6equalsERKS_+0x1d0>
        return (p.value_.intValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned int)p.value_.intValue_);
 801e522:	463b      	mov	r3, r7
 801e524:	681b      	ldr	r3, [r3, #0]
 801e526:	699b      	ldr	r3, [r3, #24]
 801e528:	2b00      	cmp	r3, #0
 801e52a:	db0a      	blt.n	801e542 <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801e52c:	1d3b      	adds	r3, r7, #4
 801e52e:	681b      	ldr	r3, [r3, #0]
 801e530:	699b      	ldr	r3, [r3, #24]
 801e532:	463a      	mov	r2, r7
 801e534:	6812      	ldr	r2, [r2, #0]
 801e536:	6992      	ldr	r2, [r2, #24]
 801e538:	4293      	cmp	r3, r2
 801e53a:	d102      	bne.n	801e542 <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801e53c:	2401      	movs	r4, #1
 801e53e:	f000 bccb 	b.w	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e542:	2400      	movs	r4, #0
 801e544:	f000 bcc8 	b.w	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "unsigned int"))
 801e548:	2500      	movs	r5, #0
 801e54a:	1d3b      	adds	r3, r7, #4
 801e54c:	681b      	ldr	r3, [r3, #0]
 801e54e:	f103 040c 	add.w	r4, r3, #12
 801e552:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e556:	494c      	ldr	r1, [pc, #304]	; (801e688 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801e558:	4618      	mov	r0, r3
 801e55a:	f7ee fbd2 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801e55e:	2601      	movs	r6, #1
 801e560:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e564:	4619      	mov	r1, r3
 801e566:	4620      	mov	r0, r4
 801e568:	f7ee ff8f 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801e56c:	4603      	mov	r3, r0
 801e56e:	2b00      	cmp	r3, #0
 801e570:	d015      	beq.n	801e59e <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801e572:	463b      	mov	r3, r7
 801e574:	681b      	ldr	r3, [r3, #0]
 801e576:	f103 040c 	add.w	r4, r3, #12
 801e57a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e57e:	4943      	ldr	r1, [pc, #268]	; (801e68c <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801e580:	4618      	mov	r0, r3
 801e582:	f7ee fbbe 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801e586:	2501      	movs	r5, #1
 801e588:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e58c:	4619      	mov	r1, r3
 801e58e:	4620      	mov	r0, r4
 801e590:	f7ee ff7b 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801e594:	4603      	mov	r3, r0
 801e596:	2b00      	cmp	r3, #0
 801e598:	d001      	beq.n	801e59e <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801e59a:	2401      	movs	r4, #1
 801e59c:	e000      	b.n	801e5a0 <_ZNK14MockNamedValue6equalsERKS_+0x228>
 801e59e:	2400      	movs	r4, #0
 801e5a0:	2d00      	cmp	r5, #0
 801e5a2:	d004      	beq.n	801e5ae <_ZNK14MockNamedValue6equalsERKS_+0x236>
 801e5a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e5a8:	4618      	mov	r0, r3
 801e5aa:	f7ee ff62 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801e5ae:	2e00      	cmp	r6, #0
 801e5b0:	d004      	beq.n	801e5bc <_ZNK14MockNamedValue6equalsERKS_+0x244>
 801e5b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e5b6:	4618      	mov	r0, r3
 801e5b8:	f7ee ff5b 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801e5bc:	2c00      	cmp	r4, #0
 801e5be:	d012      	beq.n	801e5e6 <_ZNK14MockNamedValue6equalsERKS_+0x26e>
        return (value_.intValue_ >= 0) && ((unsigned int)value_.intValue_ == p.value_.unsignedIntValue_);
 801e5c0:	1d3b      	adds	r3, r7, #4
 801e5c2:	681b      	ldr	r3, [r3, #0]
 801e5c4:	699b      	ldr	r3, [r3, #24]
 801e5c6:	2b00      	cmp	r3, #0
 801e5c8:	db0a      	blt.n	801e5e0 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801e5ca:	1d3b      	adds	r3, r7, #4
 801e5cc:	681b      	ldr	r3, [r3, #0]
 801e5ce:	699b      	ldr	r3, [r3, #24]
 801e5d0:	463a      	mov	r2, r7
 801e5d2:	6812      	ldr	r2, [r2, #0]
 801e5d4:	6992      	ldr	r2, [r2, #24]
 801e5d6:	4293      	cmp	r3, r2
 801e5d8:	d102      	bne.n	801e5e0 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801e5da:	2401      	movs	r4, #1
 801e5dc:	f000 bc7c 	b.w	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e5e0:	2400      	movs	r4, #0
 801e5e2:	f000 bc79 	b.w	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "int"))
 801e5e6:	2500      	movs	r5, #0
 801e5e8:	1d3b      	adds	r3, r7, #4
 801e5ea:	681b      	ldr	r3, [r3, #0]
 801e5ec:	f103 040c 	add.w	r4, r3, #12
 801e5f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801e5f4:	4926      	ldr	r1, [pc, #152]	; (801e690 <_ZNK14MockNamedValue6equalsERKS_+0x318>)
 801e5f6:	4618      	mov	r0, r3
 801e5f8:	f7ee fb83 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801e5fc:	2601      	movs	r6, #1
 801e5fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801e602:	4619      	mov	r1, r3
 801e604:	4620      	mov	r0, r4
 801e606:	f7ee ff40 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801e60a:	4603      	mov	r3, r0
 801e60c:	2b00      	cmp	r3, #0
 801e60e:	d015      	beq.n	801e63c <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801e610:	463b      	mov	r3, r7
 801e612:	681b      	ldr	r3, [r3, #0]
 801e614:	f103 040c 	add.w	r4, r3, #12
 801e618:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801e61c:	491a      	ldr	r1, [pc, #104]	; (801e688 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801e61e:	4618      	mov	r0, r3
 801e620:	f7ee fb6f 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801e624:	2501      	movs	r5, #1
 801e626:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801e62a:	4619      	mov	r1, r3
 801e62c:	4620      	mov	r0, r4
 801e62e:	f7ee ff2c 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801e632:	4603      	mov	r3, r0
 801e634:	2b00      	cmp	r3, #0
 801e636:	d001      	beq.n	801e63c <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801e638:	2401      	movs	r4, #1
 801e63a:	e000      	b.n	801e63e <_ZNK14MockNamedValue6equalsERKS_+0x2c6>
 801e63c:	2400      	movs	r4, #0
 801e63e:	2d00      	cmp	r5, #0
 801e640:	d004      	beq.n	801e64c <_ZNK14MockNamedValue6equalsERKS_+0x2d4>
 801e642:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801e646:	4618      	mov	r0, r3
 801e648:	f7ee ff13 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801e64c:	2e00      	cmp	r6, #0
 801e64e:	d004      	beq.n	801e65a <_ZNK14MockNamedValue6equalsERKS_+0x2e2>
 801e650:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801e654:	4618      	mov	r0, r3
 801e656:	f7ee ff0c 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801e65a:	2c00      	cmp	r4, #0
 801e65c:	d01a      	beq.n	801e694 <_ZNK14MockNamedValue6equalsERKS_+0x31c>
        return (p.value_.intValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long)p.value_.intValue_);
 801e65e:	463b      	mov	r3, r7
 801e660:	681b      	ldr	r3, [r3, #0]
 801e662:	699b      	ldr	r3, [r3, #24]
 801e664:	2b00      	cmp	r3, #0
 801e666:	db0a      	blt.n	801e67e <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801e668:	1d3b      	adds	r3, r7, #4
 801e66a:	681b      	ldr	r3, [r3, #0]
 801e66c:	699b      	ldr	r3, [r3, #24]
 801e66e:	463a      	mov	r2, r7
 801e670:	6812      	ldr	r2, [r2, #0]
 801e672:	6992      	ldr	r2, [r2, #24]
 801e674:	4293      	cmp	r3, r2
 801e676:	d102      	bne.n	801e67e <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801e678:	2401      	movs	r4, #1
 801e67a:	f000 bc2d 	b.w	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e67e:	2400      	movs	r4, #0
 801e680:	f000 bc2a 	b.w	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e684:	080267f0 	.word	0x080267f0
 801e688:	080267d4 	.word	0x080267d4
 801e68c:	080267e0 	.word	0x080267e0
 801e690:	080267fc 	.word	0x080267fc
    else if((type_ == "int") && (p.type_ == "unsigned long int"))
 801e694:	2500      	movs	r5, #0
 801e696:	1d3b      	adds	r3, r7, #4
 801e698:	681b      	ldr	r3, [r3, #0]
 801e69a:	f103 040c 	add.w	r4, r3, #12
 801e69e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e6a2:	49b8      	ldr	r1, [pc, #736]	; (801e984 <_ZNK14MockNamedValue6equalsERKS_+0x60c>)
 801e6a4:	4618      	mov	r0, r3
 801e6a6:	f7ee fb2c 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801e6aa:	2601      	movs	r6, #1
 801e6ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e6b0:	4619      	mov	r1, r3
 801e6b2:	4620      	mov	r0, r4
 801e6b4:	f7ee fee9 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801e6b8:	4603      	mov	r3, r0
 801e6ba:	2b00      	cmp	r3, #0
 801e6bc:	d015      	beq.n	801e6ea <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801e6be:	463b      	mov	r3, r7
 801e6c0:	681b      	ldr	r3, [r3, #0]
 801e6c2:	f103 040c 	add.w	r4, r3, #12
 801e6c6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801e6ca:	49af      	ldr	r1, [pc, #700]	; (801e988 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801e6cc:	4618      	mov	r0, r3
 801e6ce:	f7ee fb18 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801e6d2:	2501      	movs	r5, #1
 801e6d4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801e6d8:	4619      	mov	r1, r3
 801e6da:	4620      	mov	r0, r4
 801e6dc:	f7ee fed5 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801e6e0:	4603      	mov	r3, r0
 801e6e2:	2b00      	cmp	r3, #0
 801e6e4:	d001      	beq.n	801e6ea <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801e6e6:	2401      	movs	r4, #1
 801e6e8:	e000      	b.n	801e6ec <_ZNK14MockNamedValue6equalsERKS_+0x374>
 801e6ea:	2400      	movs	r4, #0
 801e6ec:	2d00      	cmp	r5, #0
 801e6ee:	d004      	beq.n	801e6fa <_ZNK14MockNamedValue6equalsERKS_+0x382>
 801e6f0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801e6f4:	4618      	mov	r0, r3
 801e6f6:	f7ee febc 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801e6fa:	2e00      	cmp	r6, #0
 801e6fc:	d004      	beq.n	801e708 <_ZNK14MockNamedValue6equalsERKS_+0x390>
 801e6fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e702:	4618      	mov	r0, r3
 801e704:	f7ee feb5 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801e708:	2c00      	cmp	r4, #0
 801e70a:	d010      	beq.n	801e72e <_ZNK14MockNamedValue6equalsERKS_+0x3b6>
        return (value_.intValue_ >= 0) && ((unsigned long)value_.intValue_ == p.value_.unsignedLongIntValue_);
 801e70c:	1d3b      	adds	r3, r7, #4
 801e70e:	681b      	ldr	r3, [r3, #0]
 801e710:	699b      	ldr	r3, [r3, #24]
 801e712:	2b00      	cmp	r3, #0
 801e714:	db09      	blt.n	801e72a <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801e716:	1d3b      	adds	r3, r7, #4
 801e718:	681b      	ldr	r3, [r3, #0]
 801e71a:	699b      	ldr	r3, [r3, #24]
 801e71c:	463a      	mov	r2, r7
 801e71e:	6812      	ldr	r2, [r2, #0]
 801e720:	6992      	ldr	r2, [r2, #24]
 801e722:	4293      	cmp	r3, r2
 801e724:	d101      	bne.n	801e72a <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801e726:	2401      	movs	r4, #1
 801e728:	e3d6      	b.n	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e72a:	2400      	movs	r4, #0
 801e72c:	e3d4      	b.n	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "long int"))
 801e72e:	2500      	movs	r5, #0
 801e730:	1d3b      	adds	r3, r7, #4
 801e732:	681b      	ldr	r3, [r3, #0]
 801e734:	f103 040c 	add.w	r4, r3, #12
 801e738:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801e73c:	4993      	ldr	r1, [pc, #588]	; (801e98c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801e73e:	4618      	mov	r0, r3
 801e740:	f7ee fadf 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801e744:	2601      	movs	r6, #1
 801e746:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801e74a:	4619      	mov	r1, r3
 801e74c:	4620      	mov	r0, r4
 801e74e:	f7ee fe9c 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801e752:	4603      	mov	r3, r0
 801e754:	2b00      	cmp	r3, #0
 801e756:	d015      	beq.n	801e784 <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801e758:	463b      	mov	r3, r7
 801e75a:	681b      	ldr	r3, [r3, #0]
 801e75c:	f103 040c 	add.w	r4, r3, #12
 801e760:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e764:	498a      	ldr	r1, [pc, #552]	; (801e990 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801e766:	4618      	mov	r0, r3
 801e768:	f7ee facb 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801e76c:	2501      	movs	r5, #1
 801e76e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e772:	4619      	mov	r1, r3
 801e774:	4620      	mov	r0, r4
 801e776:	f7ee fe88 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801e77a:	4603      	mov	r3, r0
 801e77c:	2b00      	cmp	r3, #0
 801e77e:	d001      	beq.n	801e784 <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801e780:	2401      	movs	r4, #1
 801e782:	e000      	b.n	801e786 <_ZNK14MockNamedValue6equalsERKS_+0x40e>
 801e784:	2400      	movs	r4, #0
 801e786:	2d00      	cmp	r5, #0
 801e788:	d004      	beq.n	801e794 <_ZNK14MockNamedValue6equalsERKS_+0x41c>
 801e78a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e78e:	4618      	mov	r0, r3
 801e790:	f7ee fe6f 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801e794:	2e00      	cmp	r6, #0
 801e796:	d004      	beq.n	801e7a2 <_ZNK14MockNamedValue6equalsERKS_+0x42a>
 801e798:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801e79c:	4618      	mov	r0, r3
 801e79e:	f7ee fe68 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801e7a2:	2c00      	cmp	r4, #0
 801e7a4:	d010      	beq.n	801e7c8 <_ZNK14MockNamedValue6equalsERKS_+0x450>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned long)p.value_.longIntValue_);
 801e7a6:	463b      	mov	r3, r7
 801e7a8:	681b      	ldr	r3, [r3, #0]
 801e7aa:	699b      	ldr	r3, [r3, #24]
 801e7ac:	2b00      	cmp	r3, #0
 801e7ae:	db09      	blt.n	801e7c4 <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801e7b0:	1d3b      	adds	r3, r7, #4
 801e7b2:	681b      	ldr	r3, [r3, #0]
 801e7b4:	699b      	ldr	r3, [r3, #24]
 801e7b6:	463a      	mov	r2, r7
 801e7b8:	6812      	ldr	r2, [r2, #0]
 801e7ba:	6992      	ldr	r2, [r2, #24]
 801e7bc:	4293      	cmp	r3, r2
 801e7be:	d101      	bne.n	801e7c4 <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801e7c0:	2401      	movs	r4, #1
 801e7c2:	e389      	b.n	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e7c4:	2400      	movs	r4, #0
 801e7c6:	e387      	b.n	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "long int") && (p.type_ == "unsigned int"))
 801e7c8:	2500      	movs	r5, #0
 801e7ca:	1d3b      	adds	r3, r7, #4
 801e7cc:	681b      	ldr	r3, [r3, #0]
 801e7ce:	f103 040c 	add.w	r4, r3, #12
 801e7d2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801e7d6:	496e      	ldr	r1, [pc, #440]	; (801e990 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801e7d8:	4618      	mov	r0, r3
 801e7da:	f7ee fa92 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801e7de:	2601      	movs	r6, #1
 801e7e0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801e7e4:	4619      	mov	r1, r3
 801e7e6:	4620      	mov	r0, r4
 801e7e8:	f7ee fe4f 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801e7ec:	4603      	mov	r3, r0
 801e7ee:	2b00      	cmp	r3, #0
 801e7f0:	d015      	beq.n	801e81e <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801e7f2:	463b      	mov	r3, r7
 801e7f4:	681b      	ldr	r3, [r3, #0]
 801e7f6:	f103 040c 	add.w	r4, r3, #12
 801e7fa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801e7fe:	4963      	ldr	r1, [pc, #396]	; (801e98c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801e800:	4618      	mov	r0, r3
 801e802:	f7ee fa7e 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801e806:	2501      	movs	r5, #1
 801e808:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801e80c:	4619      	mov	r1, r3
 801e80e:	4620      	mov	r0, r4
 801e810:	f7ee fe3b 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801e814:	4603      	mov	r3, r0
 801e816:	2b00      	cmp	r3, #0
 801e818:	d001      	beq.n	801e81e <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801e81a:	2401      	movs	r4, #1
 801e81c:	e000      	b.n	801e820 <_ZNK14MockNamedValue6equalsERKS_+0x4a8>
 801e81e:	2400      	movs	r4, #0
 801e820:	2d00      	cmp	r5, #0
 801e822:	d004      	beq.n	801e82e <_ZNK14MockNamedValue6equalsERKS_+0x4b6>
 801e824:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801e828:	4618      	mov	r0, r3
 801e82a:	f7ee fe22 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801e82e:	2e00      	cmp	r6, #0
 801e830:	d004      	beq.n	801e83c <_ZNK14MockNamedValue6equalsERKS_+0x4c4>
 801e832:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801e836:	4618      	mov	r0, r3
 801e838:	f7ee fe1b 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801e83c:	2c00      	cmp	r4, #0
 801e83e:	d010      	beq.n	801e862 <_ZNK14MockNamedValue6equalsERKS_+0x4ea>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedIntValue_);
 801e840:	1d3b      	adds	r3, r7, #4
 801e842:	681b      	ldr	r3, [r3, #0]
 801e844:	699b      	ldr	r3, [r3, #24]
 801e846:	2b00      	cmp	r3, #0
 801e848:	db09      	blt.n	801e85e <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801e84a:	1d3b      	adds	r3, r7, #4
 801e84c:	681b      	ldr	r3, [r3, #0]
 801e84e:	699b      	ldr	r3, [r3, #24]
 801e850:	463a      	mov	r2, r7
 801e852:	6812      	ldr	r2, [r2, #0]
 801e854:	6992      	ldr	r2, [r2, #24]
 801e856:	4293      	cmp	r3, r2
 801e858:	d101      	bne.n	801e85e <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801e85a:	2401      	movs	r4, #1
 801e85c:	e33c      	b.n	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e85e:	2400      	movs	r4, #0
 801e860:	e33a      	b.n	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "unsigned long int"))
 801e862:	2500      	movs	r5, #0
 801e864:	1d3b      	adds	r3, r7, #4
 801e866:	681b      	ldr	r3, [r3, #0]
 801e868:	f103 040c 	add.w	r4, r3, #12
 801e86c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e870:	4946      	ldr	r1, [pc, #280]	; (801e98c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801e872:	4618      	mov	r0, r3
 801e874:	f7ee fa45 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801e878:	2601      	movs	r6, #1
 801e87a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e87e:	4619      	mov	r1, r3
 801e880:	4620      	mov	r0, r4
 801e882:	f7ee fe02 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801e886:	4603      	mov	r3, r0
 801e888:	2b00      	cmp	r3, #0
 801e88a:	d015      	beq.n	801e8b8 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801e88c:	463b      	mov	r3, r7
 801e88e:	681b      	ldr	r3, [r3, #0]
 801e890:	f103 040c 	add.w	r4, r3, #12
 801e894:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801e898:	493b      	ldr	r1, [pc, #236]	; (801e988 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801e89a:	4618      	mov	r0, r3
 801e89c:	f7ee fa31 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801e8a0:	2501      	movs	r5, #1
 801e8a2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801e8a6:	4619      	mov	r1, r3
 801e8a8:	4620      	mov	r0, r4
 801e8aa:	f7ee fdee 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801e8ae:	4603      	mov	r3, r0
 801e8b0:	2b00      	cmp	r3, #0
 801e8b2:	d001      	beq.n	801e8b8 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801e8b4:	2401      	movs	r4, #1
 801e8b6:	e000      	b.n	801e8ba <_ZNK14MockNamedValue6equalsERKS_+0x542>
 801e8b8:	2400      	movs	r4, #0
 801e8ba:	2d00      	cmp	r5, #0
 801e8bc:	d004      	beq.n	801e8c8 <_ZNK14MockNamedValue6equalsERKS_+0x550>
 801e8be:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801e8c2:	4618      	mov	r0, r3
 801e8c4:	f7ee fdd5 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801e8c8:	2e00      	cmp	r6, #0
 801e8ca:	d004      	beq.n	801e8d6 <_ZNK14MockNamedValue6equalsERKS_+0x55e>
 801e8cc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e8d0:	4618      	mov	r0, r3
 801e8d2:	f7ee fdce 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801e8d6:	2c00      	cmp	r4, #0
 801e8d8:	d00b      	beq.n	801e8f2 <_ZNK14MockNamedValue6equalsERKS_+0x57a>
        return value_.unsignedIntValue_ == p.value_.unsignedLongIntValue_;
 801e8da:	1d3b      	adds	r3, r7, #4
 801e8dc:	681b      	ldr	r3, [r3, #0]
 801e8de:	699a      	ldr	r2, [r3, #24]
 801e8e0:	463b      	mov	r3, r7
 801e8e2:	681b      	ldr	r3, [r3, #0]
 801e8e4:	699b      	ldr	r3, [r3, #24]
 801e8e6:	429a      	cmp	r2, r3
 801e8e8:	bf0c      	ite	eq
 801e8ea:	2301      	moveq	r3, #1
 801e8ec:	2300      	movne	r3, #0
 801e8ee:	b2dc      	uxtb	r4, r3
 801e8f0:	e2f2      	b.n	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "unsigned int"))
 801e8f2:	2500      	movs	r5, #0
 801e8f4:	1d3b      	adds	r3, r7, #4
 801e8f6:	681b      	ldr	r3, [r3, #0]
 801e8f8:	f103 040c 	add.w	r4, r3, #12
 801e8fc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801e900:	4921      	ldr	r1, [pc, #132]	; (801e988 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801e902:	4618      	mov	r0, r3
 801e904:	f7ee f9fd 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801e908:	2601      	movs	r6, #1
 801e90a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801e90e:	4619      	mov	r1, r3
 801e910:	4620      	mov	r0, r4
 801e912:	f7ee fdba 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801e916:	4603      	mov	r3, r0
 801e918:	2b00      	cmp	r3, #0
 801e91a:	d015      	beq.n	801e948 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801e91c:	463b      	mov	r3, r7
 801e91e:	681b      	ldr	r3, [r3, #0]
 801e920:	f103 040c 	add.w	r4, r3, #12
 801e924:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801e928:	4918      	ldr	r1, [pc, #96]	; (801e98c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801e92a:	4618      	mov	r0, r3
 801e92c:	f7ee f9e9 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801e930:	2501      	movs	r5, #1
 801e932:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801e936:	4619      	mov	r1, r3
 801e938:	4620      	mov	r0, r4
 801e93a:	f7ee fda6 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801e93e:	4603      	mov	r3, r0
 801e940:	2b00      	cmp	r3, #0
 801e942:	d001      	beq.n	801e948 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801e944:	2401      	movs	r4, #1
 801e946:	e000      	b.n	801e94a <_ZNK14MockNamedValue6equalsERKS_+0x5d2>
 801e948:	2400      	movs	r4, #0
 801e94a:	2d00      	cmp	r5, #0
 801e94c:	d004      	beq.n	801e958 <_ZNK14MockNamedValue6equalsERKS_+0x5e0>
 801e94e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801e952:	4618      	mov	r0, r3
 801e954:	f7ee fd8d 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801e958:	2e00      	cmp	r6, #0
 801e95a:	d004      	beq.n	801e966 <_ZNK14MockNamedValue6equalsERKS_+0x5ee>
 801e95c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801e960:	4618      	mov	r0, r3
 801e962:	f7ee fd86 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801e966:	2c00      	cmp	r4, #0
 801e968:	d014      	beq.n	801e994 <_ZNK14MockNamedValue6equalsERKS_+0x61c>
        return value_.unsignedLongIntValue_ == p.value_.unsignedIntValue_;
 801e96a:	1d3b      	adds	r3, r7, #4
 801e96c:	681b      	ldr	r3, [r3, #0]
 801e96e:	699a      	ldr	r2, [r3, #24]
 801e970:	463b      	mov	r3, r7
 801e972:	681b      	ldr	r3, [r3, #0]
 801e974:	699b      	ldr	r3, [r3, #24]
 801e976:	429a      	cmp	r2, r3
 801e978:	bf0c      	ite	eq
 801e97a:	2301      	moveq	r3, #1
 801e97c:	2300      	movne	r3, #0
 801e97e:	b2dc      	uxtb	r4, r3
 801e980:	e2aa      	b.n	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e982:	bf00      	nop
 801e984:	080267d4 	.word	0x080267d4
 801e988:	080267fc 	.word	0x080267fc
 801e98c:	080267e0 	.word	0x080267e0
 801e990:	080267f0 	.word	0x080267f0
    else if((type_ == "long int") && (p.type_ == "unsigned long int"))
 801e994:	2500      	movs	r5, #0
 801e996:	1d3b      	adds	r3, r7, #4
 801e998:	681b      	ldr	r3, [r3, #0]
 801e99a:	f103 040c 	add.w	r4, r3, #12
 801e99e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801e9a2:	49ae      	ldr	r1, [pc, #696]	; (801ec5c <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801e9a4:	4618      	mov	r0, r3
 801e9a6:	f7ee f9ac 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801e9aa:	2601      	movs	r6, #1
 801e9ac:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801e9b0:	4619      	mov	r1, r3
 801e9b2:	4620      	mov	r0, r4
 801e9b4:	f7ee fd69 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801e9b8:	4603      	mov	r3, r0
 801e9ba:	2b00      	cmp	r3, #0
 801e9bc:	d015      	beq.n	801e9ea <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801e9be:	463b      	mov	r3, r7
 801e9c0:	681b      	ldr	r3, [r3, #0]
 801e9c2:	f103 040c 	add.w	r4, r3, #12
 801e9c6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801e9ca:	49a5      	ldr	r1, [pc, #660]	; (801ec60 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801e9cc:	4618      	mov	r0, r3
 801e9ce:	f7ee f998 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801e9d2:	2501      	movs	r5, #1
 801e9d4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801e9d8:	4619      	mov	r1, r3
 801e9da:	4620      	mov	r0, r4
 801e9dc:	f7ee fd55 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801e9e0:	4603      	mov	r3, r0
 801e9e2:	2b00      	cmp	r3, #0
 801e9e4:	d001      	beq.n	801e9ea <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801e9e6:	2401      	movs	r4, #1
 801e9e8:	e000      	b.n	801e9ec <_ZNK14MockNamedValue6equalsERKS_+0x674>
 801e9ea:	2400      	movs	r4, #0
 801e9ec:	2d00      	cmp	r5, #0
 801e9ee:	d004      	beq.n	801e9fa <_ZNK14MockNamedValue6equalsERKS_+0x682>
 801e9f0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801e9f4:	4618      	mov	r0, r3
 801e9f6:	f7ee fd3c 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801e9fa:	2e00      	cmp	r6, #0
 801e9fc:	d004      	beq.n	801ea08 <_ZNK14MockNamedValue6equalsERKS_+0x690>
 801e9fe:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801ea02:	4618      	mov	r0, r3
 801ea04:	f7ee fd35 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801ea08:	2c00      	cmp	r4, #0
 801ea0a:	d010      	beq.n	801ea2e <_ZNK14MockNamedValue6equalsERKS_+0x6b6>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedLongIntValue_);
 801ea0c:	1d3b      	adds	r3, r7, #4
 801ea0e:	681b      	ldr	r3, [r3, #0]
 801ea10:	699b      	ldr	r3, [r3, #24]
 801ea12:	2b00      	cmp	r3, #0
 801ea14:	db09      	blt.n	801ea2a <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801ea16:	1d3b      	adds	r3, r7, #4
 801ea18:	681b      	ldr	r3, [r3, #0]
 801ea1a:	699b      	ldr	r3, [r3, #24]
 801ea1c:	463a      	mov	r2, r7
 801ea1e:	6812      	ldr	r2, [r2, #0]
 801ea20:	6992      	ldr	r2, [r2, #24]
 801ea22:	4293      	cmp	r3, r2
 801ea24:	d101      	bne.n	801ea2a <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801ea26:	2401      	movs	r4, #1
 801ea28:	e256      	b.n	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801ea2a:	2400      	movs	r4, #0
 801ea2c:	e254      	b.n	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "long int"))
 801ea2e:	2500      	movs	r5, #0
 801ea30:	1d3b      	adds	r3, r7, #4
 801ea32:	681b      	ldr	r3, [r3, #0]
 801ea34:	f103 040c 	add.w	r4, r3, #12
 801ea38:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801ea3c:	4988      	ldr	r1, [pc, #544]	; (801ec60 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801ea3e:	4618      	mov	r0, r3
 801ea40:	f7ee f95f 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801ea44:	2601      	movs	r6, #1
 801ea46:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801ea4a:	4619      	mov	r1, r3
 801ea4c:	4620      	mov	r0, r4
 801ea4e:	f7ee fd1c 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801ea52:	4603      	mov	r3, r0
 801ea54:	2b00      	cmp	r3, #0
 801ea56:	d015      	beq.n	801ea84 <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801ea58:	463b      	mov	r3, r7
 801ea5a:	681b      	ldr	r3, [r3, #0]
 801ea5c:	f103 040c 	add.w	r4, r3, #12
 801ea60:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801ea64:	497d      	ldr	r1, [pc, #500]	; (801ec5c <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801ea66:	4618      	mov	r0, r3
 801ea68:	f7ee f94b 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801ea6c:	2501      	movs	r5, #1
 801ea6e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801ea72:	4619      	mov	r1, r3
 801ea74:	4620      	mov	r0, r4
 801ea76:	f7ee fd08 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801ea7a:	4603      	mov	r3, r0
 801ea7c:	2b00      	cmp	r3, #0
 801ea7e:	d001      	beq.n	801ea84 <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801ea80:	2401      	movs	r4, #1
 801ea82:	e000      	b.n	801ea86 <_ZNK14MockNamedValue6equalsERKS_+0x70e>
 801ea84:	2400      	movs	r4, #0
 801ea86:	2d00      	cmp	r5, #0
 801ea88:	d004      	beq.n	801ea94 <_ZNK14MockNamedValue6equalsERKS_+0x71c>
 801ea8a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801ea8e:	4618      	mov	r0, r3
 801ea90:	f7ee fcef 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801ea94:	2e00      	cmp	r6, #0
 801ea96:	d004      	beq.n	801eaa2 <_ZNK14MockNamedValue6equalsERKS_+0x72a>
 801ea98:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801ea9c:	4618      	mov	r0, r3
 801ea9e:	f7ee fce8 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801eaa2:	2c00      	cmp	r4, #0
 801eaa4:	d010      	beq.n	801eac8 <_ZNK14MockNamedValue6equalsERKS_+0x750>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long) p.value_.longIntValue_);
 801eaa6:	463b      	mov	r3, r7
 801eaa8:	681b      	ldr	r3, [r3, #0]
 801eaaa:	699b      	ldr	r3, [r3, #24]
 801eaac:	2b00      	cmp	r3, #0
 801eaae:	db09      	blt.n	801eac4 <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801eab0:	1d3b      	adds	r3, r7, #4
 801eab2:	681b      	ldr	r3, [r3, #0]
 801eab4:	699b      	ldr	r3, [r3, #24]
 801eab6:	463a      	mov	r2, r7
 801eab8:	6812      	ldr	r2, [r2, #0]
 801eaba:	6992      	ldr	r2, [r2, #24]
 801eabc:	4293      	cmp	r3, r2
 801eabe:	d101      	bne.n	801eac4 <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801eac0:	2401      	movs	r4, #1
 801eac2:	e209      	b.n	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801eac4:	2400      	movs	r4, #0
 801eac6:	e207      	b.n	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongIntValue_;
    else if ((type_ == "unsigned long int") && (p.type_ == "unsigned long long int"))
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif

    if (type_ != p.type_) return false;
 801eac8:	1d3b      	adds	r3, r7, #4
 801eaca:	681b      	ldr	r3, [r3, #0]
 801eacc:	f103 020c 	add.w	r2, r3, #12
 801ead0:	463b      	mov	r3, r7
 801ead2:	681b      	ldr	r3, [r3, #0]
 801ead4:	330c      	adds	r3, #12
 801ead6:	4619      	mov	r1, r3
 801ead8:	4610      	mov	r0, r2
 801eada:	f7ee fd1b 	bl	800d514 <_ZneRK12SimpleStringS1_>
 801eade:	4603      	mov	r3, r0
 801eae0:	2b00      	cmp	r3, #0
 801eae2:	d001      	beq.n	801eae8 <_ZNK14MockNamedValue6equalsERKS_+0x770>
 801eae4:	2400      	movs	r4, #0
 801eae6:	e1f7      	b.n	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    if (type_ == "bool")
 801eae8:	1d3b      	adds	r3, r7, #4
 801eaea:	681b      	ldr	r3, [r3, #0]
 801eaec:	f103 040c 	add.w	r4, r3, #12
 801eaf0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801eaf4:	495b      	ldr	r1, [pc, #364]	; (801ec64 <_ZNK14MockNamedValue6equalsERKS_+0x8ec>)
 801eaf6:	4618      	mov	r0, r3
 801eaf8:	f7ee f903 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801eafc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801eb00:	4619      	mov	r1, r3
 801eb02:	4620      	mov	r0, r4
 801eb04:	f7ee fcc1 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801eb08:	4603      	mov	r3, r0
 801eb0a:	461c      	mov	r4, r3
 801eb0c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801eb10:	4618      	mov	r0, r3
 801eb12:	f7ee fcae 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801eb16:	2c00      	cmp	r4, #0
 801eb18:	d00b      	beq.n	801eb32 <_ZNK14MockNamedValue6equalsERKS_+0x7ba>
        return value_.boolValue_ == p.value_.boolValue_;
 801eb1a:	1d3b      	adds	r3, r7, #4
 801eb1c:	681b      	ldr	r3, [r3, #0]
 801eb1e:	7e1a      	ldrb	r2, [r3, #24]
 801eb20:	463b      	mov	r3, r7
 801eb22:	681b      	ldr	r3, [r3, #0]
 801eb24:	7e1b      	ldrb	r3, [r3, #24]
 801eb26:	429a      	cmp	r2, r3
 801eb28:	bf0c      	ite	eq
 801eb2a:	2301      	moveq	r3, #1
 801eb2c:	2300      	movne	r3, #0
 801eb2e:	b2dc      	uxtb	r4, r3
 801eb30:	e1d2      	b.n	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "int")
 801eb32:	1d3b      	adds	r3, r7, #4
 801eb34:	681b      	ldr	r3, [r3, #0]
 801eb36:	f103 040c 	add.w	r4, r3, #12
 801eb3a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801eb3e:	494a      	ldr	r1, [pc, #296]	; (801ec68 <_ZNK14MockNamedValue6equalsERKS_+0x8f0>)
 801eb40:	4618      	mov	r0, r3
 801eb42:	f7ee f8de 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801eb46:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801eb4a:	4619      	mov	r1, r3
 801eb4c:	4620      	mov	r0, r4
 801eb4e:	f7ee fc9c 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801eb52:	4603      	mov	r3, r0
 801eb54:	461c      	mov	r4, r3
 801eb56:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801eb5a:	4618      	mov	r0, r3
 801eb5c:	f7ee fc89 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801eb60:	2c00      	cmp	r4, #0
 801eb62:	d00b      	beq.n	801eb7c <_ZNK14MockNamedValue6equalsERKS_+0x804>
        return value_.intValue_ == p.value_.intValue_;
 801eb64:	1d3b      	adds	r3, r7, #4
 801eb66:	681b      	ldr	r3, [r3, #0]
 801eb68:	699a      	ldr	r2, [r3, #24]
 801eb6a:	463b      	mov	r3, r7
 801eb6c:	681b      	ldr	r3, [r3, #0]
 801eb6e:	699b      	ldr	r3, [r3, #24]
 801eb70:	429a      	cmp	r2, r3
 801eb72:	bf0c      	ite	eq
 801eb74:	2301      	moveq	r3, #1
 801eb76:	2300      	movne	r3, #0
 801eb78:	b2dc      	uxtb	r4, r3
 801eb7a:	e1ad      	b.n	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned int")
 801eb7c:	1d3b      	adds	r3, r7, #4
 801eb7e:	681b      	ldr	r3, [r3, #0]
 801eb80:	f103 040c 	add.w	r4, r3, #12
 801eb84:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801eb88:	4938      	ldr	r1, [pc, #224]	; (801ec6c <_ZNK14MockNamedValue6equalsERKS_+0x8f4>)
 801eb8a:	4618      	mov	r0, r3
 801eb8c:	f7ee f8b9 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801eb90:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801eb94:	4619      	mov	r1, r3
 801eb96:	4620      	mov	r0, r4
 801eb98:	f7ee fc77 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801eb9c:	4603      	mov	r3, r0
 801eb9e:	461c      	mov	r4, r3
 801eba0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801eba4:	4618      	mov	r0, r3
 801eba6:	f7ee fc64 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801ebaa:	2c00      	cmp	r4, #0
 801ebac:	d00b      	beq.n	801ebc6 <_ZNK14MockNamedValue6equalsERKS_+0x84e>
        return value_.unsignedIntValue_ == p.value_.unsignedIntValue_;
 801ebae:	1d3b      	adds	r3, r7, #4
 801ebb0:	681b      	ldr	r3, [r3, #0]
 801ebb2:	699a      	ldr	r2, [r3, #24]
 801ebb4:	463b      	mov	r3, r7
 801ebb6:	681b      	ldr	r3, [r3, #0]
 801ebb8:	699b      	ldr	r3, [r3, #24]
 801ebba:	429a      	cmp	r2, r3
 801ebbc:	bf0c      	ite	eq
 801ebbe:	2301      	moveq	r3, #1
 801ebc0:	2300      	movne	r3, #0
 801ebc2:	b2dc      	uxtb	r4, r3
 801ebc4:	e188      	b.n	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "long int")
 801ebc6:	1d3b      	adds	r3, r7, #4
 801ebc8:	681b      	ldr	r3, [r3, #0]
 801ebca:	f103 040c 	add.w	r4, r3, #12
 801ebce:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801ebd2:	4922      	ldr	r1, [pc, #136]	; (801ec5c <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801ebd4:	4618      	mov	r0, r3
 801ebd6:	f7ee f894 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801ebda:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801ebde:	4619      	mov	r1, r3
 801ebe0:	4620      	mov	r0, r4
 801ebe2:	f7ee fc52 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801ebe6:	4603      	mov	r3, r0
 801ebe8:	461c      	mov	r4, r3
 801ebea:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801ebee:	4618      	mov	r0, r3
 801ebf0:	f7ee fc3f 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801ebf4:	2c00      	cmp	r4, #0
 801ebf6:	d00b      	beq.n	801ec10 <_ZNK14MockNamedValue6equalsERKS_+0x898>
        return value_.longIntValue_ == p.value_.longIntValue_;
 801ebf8:	1d3b      	adds	r3, r7, #4
 801ebfa:	681b      	ldr	r3, [r3, #0]
 801ebfc:	699a      	ldr	r2, [r3, #24]
 801ebfe:	463b      	mov	r3, r7
 801ec00:	681b      	ldr	r3, [r3, #0]
 801ec02:	699b      	ldr	r3, [r3, #24]
 801ec04:	429a      	cmp	r2, r3
 801ec06:	bf0c      	ite	eq
 801ec08:	2301      	moveq	r3, #1
 801ec0a:	2300      	movne	r3, #0
 801ec0c:	b2dc      	uxtb	r4, r3
 801ec0e:	e163      	b.n	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned long int")
 801ec10:	1d3b      	adds	r3, r7, #4
 801ec12:	681b      	ldr	r3, [r3, #0]
 801ec14:	f103 040c 	add.w	r4, r3, #12
 801ec18:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801ec1c:	4910      	ldr	r1, [pc, #64]	; (801ec60 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801ec1e:	4618      	mov	r0, r3
 801ec20:	f7ee f86f 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801ec24:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801ec28:	4619      	mov	r1, r3
 801ec2a:	4620      	mov	r0, r4
 801ec2c:	f7ee fc2d 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801ec30:	4603      	mov	r3, r0
 801ec32:	461c      	mov	r4, r3
 801ec34:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801ec38:	4618      	mov	r0, r3
 801ec3a:	f7ee fc1a 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801ec3e:	2c00      	cmp	r4, #0
 801ec40:	d016      	beq.n	801ec70 <_ZNK14MockNamedValue6equalsERKS_+0x8f8>
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongIntValue_;
 801ec42:	1d3b      	adds	r3, r7, #4
 801ec44:	681b      	ldr	r3, [r3, #0]
 801ec46:	699a      	ldr	r2, [r3, #24]
 801ec48:	463b      	mov	r3, r7
 801ec4a:	681b      	ldr	r3, [r3, #0]
 801ec4c:	699b      	ldr	r3, [r3, #24]
 801ec4e:	429a      	cmp	r2, r3
 801ec50:	bf0c      	ite	eq
 801ec52:	2301      	moveq	r3, #1
 801ec54:	2300      	movne	r3, #0
 801ec56:	b2dc      	uxtb	r4, r3
 801ec58:	e13e      	b.n	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801ec5a:	bf00      	nop
 801ec5c:	080267f0 	.word	0x080267f0
 801ec60:	080267fc 	.word	0x080267fc
 801ec64:	080267d8 	.word	0x080267d8
 801ec68:	080267d4 	.word	0x080267d4
 801ec6c:	080267e0 	.word	0x080267e0
    else if (type_ == "long long int")
        return value_.longLongIntValue_ == p.value_.longLongIntValue_;
    else if (type_ == "unsigned long long int")
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif
    else if (type_ == "const char*")
 801ec70:	1d3b      	adds	r3, r7, #4
 801ec72:	681b      	ldr	r3, [r3, #0]
 801ec74:	f103 040c 	add.w	r4, r3, #12
 801ec78:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801ec7c:	4999      	ldr	r1, [pc, #612]	; (801eee4 <_ZNK14MockNamedValue6equalsERKS_+0xb6c>)
 801ec7e:	4618      	mov	r0, r3
 801ec80:	f7ee f83f 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801ec84:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801ec88:	4619      	mov	r1, r3
 801ec8a:	4620      	mov	r0, r4
 801ec8c:	f7ee fbfd 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801ec90:	4603      	mov	r3, r0
 801ec92:	461c      	mov	r4, r3
 801ec94:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801ec98:	4618      	mov	r0, r3
 801ec9a:	f7ee fbea 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801ec9e:	2c00      	cmp	r4, #0
 801eca0:	d026      	beq.n	801ecf0 <_ZNK14MockNamedValue6equalsERKS_+0x978>
        return SimpleString(value_.stringValue_) == SimpleString(p.value_.stringValue_);
 801eca2:	1d3b      	adds	r3, r7, #4
 801eca4:	681b      	ldr	r3, [r3, #0]
 801eca6:	699a      	ldr	r2, [r3, #24]
 801eca8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801ecac:	4611      	mov	r1, r2
 801ecae:	4618      	mov	r0, r3
 801ecb0:	f7ee f827 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801ecb4:	463b      	mov	r3, r7
 801ecb6:	681b      	ldr	r3, [r3, #0]
 801ecb8:	699a      	ldr	r2, [r3, #24]
 801ecba:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801ecbe:	4611      	mov	r1, r2
 801ecc0:	4618      	mov	r0, r3
 801ecc2:	f7ee f81e 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801ecc6:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801ecca:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801ecce:	4611      	mov	r1, r2
 801ecd0:	4618      	mov	r0, r3
 801ecd2:	f7ee fbda 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801ecd6:	4603      	mov	r3, r0
 801ecd8:	461c      	mov	r4, r3
 801ecda:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801ecde:	4618      	mov	r0, r3
 801ece0:	f7ee fbc7 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801ece4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801ece8:	4618      	mov	r0, r3
 801ecea:	f7ee fbc2 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801ecee:	e0f3      	b.n	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void*")
 801ecf0:	1d3b      	adds	r3, r7, #4
 801ecf2:	681b      	ldr	r3, [r3, #0]
 801ecf4:	f103 040c 	add.w	r4, r3, #12
 801ecf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801ecfc:	497a      	ldr	r1, [pc, #488]	; (801eee8 <_ZNK14MockNamedValue6equalsERKS_+0xb70>)
 801ecfe:	4618      	mov	r0, r3
 801ed00:	f7ed ffff 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801ed04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801ed08:	4619      	mov	r1, r3
 801ed0a:	4620      	mov	r0, r4
 801ed0c:	f7ee fbbd 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801ed10:	4603      	mov	r3, r0
 801ed12:	461c      	mov	r4, r3
 801ed14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801ed18:	4618      	mov	r0, r3
 801ed1a:	f7ee fbaa 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801ed1e:	2c00      	cmp	r4, #0
 801ed20:	d00b      	beq.n	801ed3a <_ZNK14MockNamedValue6equalsERKS_+0x9c2>
        return value_.pointerValue_ == p.value_.pointerValue_;
 801ed22:	1d3b      	adds	r3, r7, #4
 801ed24:	681b      	ldr	r3, [r3, #0]
 801ed26:	699a      	ldr	r2, [r3, #24]
 801ed28:	463b      	mov	r3, r7
 801ed2a:	681b      	ldr	r3, [r3, #0]
 801ed2c:	699b      	ldr	r3, [r3, #24]
 801ed2e:	429a      	cmp	r2, r3
 801ed30:	bf0c      	ite	eq
 801ed32:	2301      	moveq	r3, #1
 801ed34:	2300      	movne	r3, #0
 801ed36:	b2dc      	uxtb	r4, r3
 801ed38:	e0ce      	b.n	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const void*")
 801ed3a:	1d3b      	adds	r3, r7, #4
 801ed3c:	681b      	ldr	r3, [r3, #0]
 801ed3e:	f103 040c 	add.w	r4, r3, #12
 801ed42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801ed46:	4969      	ldr	r1, [pc, #420]	; (801eeec <_ZNK14MockNamedValue6equalsERKS_+0xb74>)
 801ed48:	4618      	mov	r0, r3
 801ed4a:	f7ed ffda 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801ed4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801ed52:	4619      	mov	r1, r3
 801ed54:	4620      	mov	r0, r4
 801ed56:	f7ee fb98 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801ed5a:	4603      	mov	r3, r0
 801ed5c:	461c      	mov	r4, r3
 801ed5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801ed62:	4618      	mov	r0, r3
 801ed64:	f7ee fb85 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801ed68:	2c00      	cmp	r4, #0
 801ed6a:	d00b      	beq.n	801ed84 <_ZNK14MockNamedValue6equalsERKS_+0xa0c>
        return value_.constPointerValue_ == p.value_.constPointerValue_;
 801ed6c:	1d3b      	adds	r3, r7, #4
 801ed6e:	681b      	ldr	r3, [r3, #0]
 801ed70:	699a      	ldr	r2, [r3, #24]
 801ed72:	463b      	mov	r3, r7
 801ed74:	681b      	ldr	r3, [r3, #0]
 801ed76:	699b      	ldr	r3, [r3, #24]
 801ed78:	429a      	cmp	r2, r3
 801ed7a:	bf0c      	ite	eq
 801ed7c:	2301      	moveq	r3, #1
 801ed7e:	2300      	movne	r3, #0
 801ed80:	b2dc      	uxtb	r4, r3
 801ed82:	e0a9      	b.n	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void (*)()")
 801ed84:	1d3b      	adds	r3, r7, #4
 801ed86:	681b      	ldr	r3, [r3, #0]
 801ed88:	f103 040c 	add.w	r4, r3, #12
 801ed8c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801ed90:	4957      	ldr	r1, [pc, #348]	; (801eef0 <_ZNK14MockNamedValue6equalsERKS_+0xb78>)
 801ed92:	4618      	mov	r0, r3
 801ed94:	f7ed ffb5 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801ed98:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801ed9c:	4619      	mov	r1, r3
 801ed9e:	4620      	mov	r0, r4
 801eda0:	f7ee fb73 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801eda4:	4603      	mov	r3, r0
 801eda6:	461c      	mov	r4, r3
 801eda8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801edac:	4618      	mov	r0, r3
 801edae:	f7ee fb60 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801edb2:	2c00      	cmp	r4, #0
 801edb4:	d00b      	beq.n	801edce <_ZNK14MockNamedValue6equalsERKS_+0xa56>
        return value_.functionPointerValue_ == p.value_.functionPointerValue_;
 801edb6:	1d3b      	adds	r3, r7, #4
 801edb8:	681b      	ldr	r3, [r3, #0]
 801edba:	699a      	ldr	r2, [r3, #24]
 801edbc:	463b      	mov	r3, r7
 801edbe:	681b      	ldr	r3, [r3, #0]
 801edc0:	699b      	ldr	r3, [r3, #24]
 801edc2:	429a      	cmp	r2, r3
 801edc4:	bf0c      	ite	eq
 801edc6:	2301      	moveq	r3, #1
 801edc8:	2300      	movne	r3, #0
 801edca:	b2dc      	uxtb	r4, r3
 801edcc:	e084      	b.n	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "double")
 801edce:	1d3b      	adds	r3, r7, #4
 801edd0:	681b      	ldr	r3, [r3, #0]
 801edd2:	f103 040c 	add.w	r4, r3, #12
 801edd6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801edda:	4946      	ldr	r1, [pc, #280]	; (801eef4 <_ZNK14MockNamedValue6equalsERKS_+0xb7c>)
 801eddc:	4618      	mov	r0, r3
 801edde:	f7ed ff90 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801ede2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801ede6:	4619      	mov	r1, r3
 801ede8:	4620      	mov	r0, r4
 801edea:	f7ee fb4e 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801edee:	4603      	mov	r3, r0
 801edf0:	461c      	mov	r4, r3
 801edf2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801edf6:	4618      	mov	r0, r3
 801edf8:	f7ee fb3b 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801edfc:	2c00      	cmp	r4, #0
 801edfe:	d01c      	beq.n	801ee3a <_ZNK14MockNamedValue6equalsERKS_+0xac2>
        return (doubles_equal(value_.doubleValue_.value, p.value_.doubleValue_.value, value_.doubleValue_.tolerance));
 801ee00:	1d3b      	adds	r3, r7, #4
 801ee02:	681b      	ldr	r3, [r3, #0]
 801ee04:	ed93 7b06 	vldr	d7, [r3, #24]
 801ee08:	463b      	mov	r3, r7
 801ee0a:	681b      	ldr	r3, [r3, #0]
 801ee0c:	ed93 6b06 	vldr	d6, [r3, #24]
 801ee10:	1d3b      	adds	r3, r7, #4
 801ee12:	681b      	ldr	r3, [r3, #0]
 801ee14:	ed93 5b08 	vldr	d5, [r3, #32]
 801ee18:	eeb0 2a45 	vmov.f32	s4, s10
 801ee1c:	eef0 2a65 	vmov.f32	s5, s11
 801ee20:	eeb0 1a46 	vmov.f32	s2, s12
 801ee24:	eef0 1a66 	vmov.f32	s3, s13
 801ee28:	eeb0 0a47 	vmov.f32	s0, s14
 801ee2c:	eef0 0a67 	vmov.f32	s1, s15
 801ee30:	f7f3 fe1a 	bl	8012a68 <_Z13doubles_equalddd>
 801ee34:	4603      	mov	r3, r0
 801ee36:	461c      	mov	r4, r3
 801ee38:	e04e      	b.n	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const unsigned char*")
 801ee3a:	1d3b      	adds	r3, r7, #4
 801ee3c:	681b      	ldr	r3, [r3, #0]
 801ee3e:	f103 040c 	add.w	r4, r3, #12
 801ee42:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801ee46:	492c      	ldr	r1, [pc, #176]	; (801eef8 <_ZNK14MockNamedValue6equalsERKS_+0xb80>)
 801ee48:	4618      	mov	r0, r3
 801ee4a:	f7ed ff5a 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801ee4e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801ee52:	4619      	mov	r1, r3
 801ee54:	4620      	mov	r0, r4
 801ee56:	f7ee fb18 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801ee5a:	4603      	mov	r3, r0
 801ee5c:	461c      	mov	r4, r3
 801ee5e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801ee62:	4618      	mov	r0, r3
 801ee64:	f7ee fb05 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801ee68:	2c00      	cmp	r4, #0
 801ee6a:	d01c      	beq.n	801eea6 <_ZNK14MockNamedValue6equalsERKS_+0xb2e>
    {
        if (size_ != p.size_) {
 801ee6c:	1d3b      	adds	r3, r7, #4
 801ee6e:	681b      	ldr	r3, [r3, #0]
 801ee70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801ee72:	463b      	mov	r3, r7
 801ee74:	681b      	ldr	r3, [r3, #0]
 801ee76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ee78:	429a      	cmp	r2, r3
 801ee7a:	d001      	beq.n	801ee80 <_ZNK14MockNamedValue6equalsERKS_+0xb08>
            return false;
 801ee7c:	2400      	movs	r4, #0
 801ee7e:	e02b      	b.n	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        }
        return SimpleString::MemCmp(value_.memoryBufferValue_, p.value_.memoryBufferValue_, size_) == 0;
 801ee80:	1d3b      	adds	r3, r7, #4
 801ee82:	681b      	ldr	r3, [r3, #0]
 801ee84:	6998      	ldr	r0, [r3, #24]
 801ee86:	463b      	mov	r3, r7
 801ee88:	681b      	ldr	r3, [r3, #0]
 801ee8a:	6999      	ldr	r1, [r3, #24]
 801ee8c:	1d3b      	adds	r3, r7, #4
 801ee8e:	681b      	ldr	r3, [r3, #0]
 801ee90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ee92:	461a      	mov	r2, r3
 801ee94:	f7ed fe54 	bl	800cb40 <_ZN12SimpleString6MemCmpEPKvS1_j>
 801ee98:	4603      	mov	r3, r0
 801ee9a:	2b00      	cmp	r3, #0
 801ee9c:	bf0c      	ite	eq
 801ee9e:	2301      	moveq	r3, #1
 801eea0:	2300      	movne	r3, #0
 801eea2:	b2dc      	uxtb	r4, r3
 801eea4:	e018      	b.n	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    }

    if (comparator_)
 801eea6:	1d3b      	adds	r3, r7, #4
 801eea8:	681b      	ldr	r3, [r3, #0]
 801eeaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eeac:	2b00      	cmp	r3, #0
 801eeae:	d012      	beq.n	801eed6 <_ZNK14MockNamedValue6equalsERKS_+0xb5e>
        return comparator_->isEqual(value_.constObjectPointerValue_, p.value_.constObjectPointerValue_);
 801eeb0:	1d3b      	adds	r3, r7, #4
 801eeb2:	681b      	ldr	r3, [r3, #0]
 801eeb4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801eeb6:	1d3b      	adds	r3, r7, #4
 801eeb8:	681b      	ldr	r3, [r3, #0]
 801eeba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eebc:	681b      	ldr	r3, [r3, #0]
 801eebe:	3308      	adds	r3, #8
 801eec0:	681b      	ldr	r3, [r3, #0]
 801eec2:	1d3a      	adds	r2, r7, #4
 801eec4:	6812      	ldr	r2, [r2, #0]
 801eec6:	6991      	ldr	r1, [r2, #24]
 801eec8:	463a      	mov	r2, r7
 801eeca:	6812      	ldr	r2, [r2, #0]
 801eecc:	6992      	ldr	r2, [r2, #24]
 801eece:	4798      	blx	r3
 801eed0:	4603      	mov	r3, r0
 801eed2:	461c      	mov	r4, r3
 801eed4:	e000      	b.n	801eed8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    return false;
 801eed6:	2400      	movs	r4, #0
 801eed8:	4623      	mov	r3, r4
}
 801eeda:	4618      	mov	r0, r3
 801eedc:	f507 779a 	add.w	r7, r7, #308	; 0x134
 801eee0:	46bd      	mov	sp, r7
 801eee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eee4:	080268a0 	.word	0x080268a0
 801eee8:	08026880 	.word	0x08026880
 801eeec:	08026888 	.word	0x08026888
 801eef0:	08026894 	.word	0x08026894
 801eef4:	08026878 	.word	0x08026878
 801eef8:	080268ac 	.word	0x080268ac

0801eefc <_ZNK14MockNamedValue20compatibleForCopyingERKS_>:

bool MockNamedValue::compatibleForCopying(const MockNamedValue& p) const
{
 801eefc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eefe:	b087      	sub	sp, #28
 801ef00:	af00      	add	r7, sp, #0
 801ef02:	6078      	str	r0, [r7, #4]
 801ef04:	6039      	str	r1, [r7, #0]
    if (type_ == p.type_) return true;
 801ef06:	687b      	ldr	r3, [r7, #4]
 801ef08:	f103 020c 	add.w	r2, r3, #12
 801ef0c:	683b      	ldr	r3, [r7, #0]
 801ef0e:	330c      	adds	r3, #12
 801ef10:	4619      	mov	r1, r3
 801ef12:	4610      	mov	r0, r2
 801ef14:	f7ee fab9 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801ef18:	4603      	mov	r3, r0
 801ef1a:	2b00      	cmp	r3, #0
 801ef1c:	d001      	beq.n	801ef22 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x26>
 801ef1e:	2301      	movs	r3, #1
 801ef20:	e03c      	b.n	801ef9c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    if ((type_ == "const void*") && (p.type_ == "void*"))
 801ef22:	2500      	movs	r5, #0
 801ef24:	687b      	ldr	r3, [r7, #4]
 801ef26:	f103 040c 	add.w	r4, r3, #12
 801ef2a:	f107 0308 	add.w	r3, r7, #8
 801ef2e:	491d      	ldr	r1, [pc, #116]	; (801efa4 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa8>)
 801ef30:	4618      	mov	r0, r3
 801ef32:	f7ed fee6 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801ef36:	2601      	movs	r6, #1
 801ef38:	f107 0308 	add.w	r3, r7, #8
 801ef3c:	4619      	mov	r1, r3
 801ef3e:	4620      	mov	r0, r4
 801ef40:	f7ee faa3 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801ef44:	4603      	mov	r3, r0
 801ef46:	2b00      	cmp	r3, #0
 801ef48:	d014      	beq.n	801ef74 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801ef4a:	683b      	ldr	r3, [r7, #0]
 801ef4c:	f103 040c 	add.w	r4, r3, #12
 801ef50:	f107 0310 	add.w	r3, r7, #16
 801ef54:	4914      	ldr	r1, [pc, #80]	; (801efa8 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xac>)
 801ef56:	4618      	mov	r0, r3
 801ef58:	f7ed fed3 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801ef5c:	2501      	movs	r5, #1
 801ef5e:	f107 0310 	add.w	r3, r7, #16
 801ef62:	4619      	mov	r1, r3
 801ef64:	4620      	mov	r0, r4
 801ef66:	f7ee fa90 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801ef6a:	4603      	mov	r3, r0
 801ef6c:	2b00      	cmp	r3, #0
 801ef6e:	d001      	beq.n	801ef74 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801ef70:	2401      	movs	r4, #1
 801ef72:	e000      	b.n	801ef76 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x7a>
 801ef74:	2400      	movs	r4, #0
 801ef76:	2d00      	cmp	r5, #0
 801ef78:	d004      	beq.n	801ef84 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x88>
 801ef7a:	f107 0310 	add.w	r3, r7, #16
 801ef7e:	4618      	mov	r0, r3
 801ef80:	f7ee fa77 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801ef84:	2e00      	cmp	r6, #0
 801ef86:	d004      	beq.n	801ef92 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x96>
 801ef88:	f107 0308 	add.w	r3, r7, #8
 801ef8c:	4618      	mov	r0, r3
 801ef8e:	f7ee fa70 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801ef92:	2c00      	cmp	r4, #0
 801ef94:	d001      	beq.n	801ef9a <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x9e>
        return true;
 801ef96:	2301      	movs	r3, #1
 801ef98:	e000      	b.n	801ef9c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    return false;
 801ef9a:	2300      	movs	r3, #0
}
 801ef9c:	4618      	mov	r0, r3
 801ef9e:	371c      	adds	r7, #28
 801efa0:	46bd      	mov	sp, r7
 801efa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801efa4:	08026888 	.word	0x08026888
 801efa8:	08026880 	.word	0x08026880

0801efac <_ZNK14MockNamedValue8toStringEv>:

SimpleString MockNamedValue::toString() const
{
 801efac:	b590      	push	{r4, r7, lr}
 801efae:	b0b9      	sub	sp, #228	; 0xe4
 801efb0:	af00      	add	r7, sp, #0
 801efb2:	6078      	str	r0, [r7, #4]
 801efb4:	6039      	str	r1, [r7, #0]
    if (type_ == "bool")
 801efb6:	683b      	ldr	r3, [r7, #0]
 801efb8:	f103 040c 	add.w	r4, r3, #12
 801efbc:	f107 0308 	add.w	r3, r7, #8
 801efc0:	49d4      	ldr	r1, [pc, #848]	; (801f314 <_ZNK14MockNamedValue8toStringEv+0x368>)
 801efc2:	4618      	mov	r0, r3
 801efc4:	f7ed fe9d 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801efc8:	f107 0308 	add.w	r3, r7, #8
 801efcc:	4619      	mov	r1, r3
 801efce:	4620      	mov	r0, r4
 801efd0:	f7ee fa5b 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801efd4:	4603      	mov	r3, r0
 801efd6:	461c      	mov	r4, r3
 801efd8:	f107 0308 	add.w	r3, r7, #8
 801efdc:	4618      	mov	r0, r3
 801efde:	f7ee fa48 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801efe2:	2c00      	cmp	r4, #0
 801efe4:	d007      	beq.n	801eff6 <_ZNK14MockNamedValue8toStringEv+0x4a>
        return StringFrom(value_.boolValue_);
 801efe6:	683b      	ldr	r3, [r7, #0]
 801efe8:	7e1a      	ldrb	r2, [r3, #24]
 801efea:	687b      	ldr	r3, [r7, #4]
 801efec:	4611      	mov	r1, r2
 801efee:	4618      	mov	r0, r3
 801eff0:	f7ee fcb0 	bl	800d954 <_Z10StringFromb>
 801eff4:	e23f      	b.n	801f476 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "int")
 801eff6:	683b      	ldr	r3, [r7, #0]
 801eff8:	f103 040c 	add.w	r4, r3, #12
 801effc:	f107 0310 	add.w	r3, r7, #16
 801f000:	49c5      	ldr	r1, [pc, #788]	; (801f318 <_ZNK14MockNamedValue8toStringEv+0x36c>)
 801f002:	4618      	mov	r0, r3
 801f004:	f7ed fe7d 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801f008:	f107 0310 	add.w	r3, r7, #16
 801f00c:	4619      	mov	r1, r3
 801f00e:	4620      	mov	r0, r4
 801f010:	f7ee fa3b 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801f014:	4603      	mov	r3, r0
 801f016:	461c      	mov	r4, r3
 801f018:	f107 0310 	add.w	r3, r7, #16
 801f01c:	4618      	mov	r0, r3
 801f01e:	f7ee fa28 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801f022:	2c00      	cmp	r4, #0
 801f024:	d03b      	beq.n	801f09e <_ZNK14MockNamedValue8toStringEv+0xf2>
        return StringFrom(value_.intValue_) + " " + BracketsFormattedHexStringFrom(value_.intValue_);
 801f026:	683b      	ldr	r3, [r7, #0]
 801f028:	699a      	ldr	r2, [r3, #24]
 801f02a:	f107 0320 	add.w	r3, r7, #32
 801f02e:	4611      	mov	r1, r2
 801f030:	4618      	mov	r0, r3
 801f032:	f7ee fce5 	bl	800da00 <_Z10StringFromi>
 801f036:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f03a:	49b8      	ldr	r1, [pc, #736]	; (801f31c <_ZNK14MockNamedValue8toStringEv+0x370>)
 801f03c:	4618      	mov	r0, r3
 801f03e:	f7ed fe60 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801f042:	f107 0318 	add.w	r3, r7, #24
 801f046:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801f04a:	f107 0120 	add.w	r1, r7, #32
 801f04e:	4618      	mov	r0, r3
 801f050:	f7ee fa71 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 801f054:	683b      	ldr	r3, [r7, #0]
 801f056:	699a      	ldr	r2, [r3, #24]
 801f058:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f05c:	4611      	mov	r1, r2
 801f05e:	4618      	mov	r0, r3
 801f060:	f7ee fdbe 	bl	800dbe0 <_Z30BracketsFormattedHexStringFromi>
 801f064:	687b      	ldr	r3, [r7, #4]
 801f066:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801f06a:	f107 0118 	add.w	r1, r7, #24
 801f06e:	4618      	mov	r0, r3
 801f070:	f7ee fa61 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 801f074:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f078:	4618      	mov	r0, r3
 801f07a:	f7ee f9fa 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801f07e:	f107 0318 	add.w	r3, r7, #24
 801f082:	4618      	mov	r0, r3
 801f084:	f7ee f9f5 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801f088:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f08c:	4618      	mov	r0, r3
 801f08e:	f7ee f9f0 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801f092:	f107 0320 	add.w	r3, r7, #32
 801f096:	4618      	mov	r0, r3
 801f098:	f7ee f9eb 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801f09c:	e1eb      	b.n	801f476 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned int")
 801f09e:	683b      	ldr	r3, [r7, #0]
 801f0a0:	f103 040c 	add.w	r4, r3, #12
 801f0a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801f0a8:	499d      	ldr	r1, [pc, #628]	; (801f320 <_ZNK14MockNamedValue8toStringEv+0x374>)
 801f0aa:	4618      	mov	r0, r3
 801f0ac:	f7ed fe29 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801f0b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801f0b4:	4619      	mov	r1, r3
 801f0b6:	4620      	mov	r0, r4
 801f0b8:	f7ee f9e7 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801f0bc:	4603      	mov	r3, r0
 801f0be:	461c      	mov	r4, r3
 801f0c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801f0c4:	4618      	mov	r0, r3
 801f0c6:	f7ee f9d4 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801f0ca:	2c00      	cmp	r4, #0
 801f0cc:	d03b      	beq.n	801f146 <_ZNK14MockNamedValue8toStringEv+0x19a>
        return StringFrom(value_.unsignedIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedIntValue_);
 801f0ce:	683b      	ldr	r3, [r7, #0]
 801f0d0:	699a      	ldr	r2, [r3, #24]
 801f0d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801f0d6:	4611      	mov	r1, r2
 801f0d8:	4618      	mov	r0, r3
 801f0da:	f7ee fef9 	bl	800ded0 <_Z10StringFromj>
 801f0de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801f0e2:	498e      	ldr	r1, [pc, #568]	; (801f31c <_ZNK14MockNamedValue8toStringEv+0x370>)
 801f0e4:	4618      	mov	r0, r3
 801f0e6:	f7ed fe0c 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801f0ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801f0ee:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801f0f2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801f0f6:	4618      	mov	r0, r3
 801f0f8:	f7ee fa1d 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 801f0fc:	683b      	ldr	r3, [r7, #0]
 801f0fe:	699a      	ldr	r2, [r3, #24]
 801f100:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801f104:	4611      	mov	r1, r2
 801f106:	4618      	mov	r0, r3
 801f108:	f7ee fd86 	bl	800dc18 <_Z30BracketsFormattedHexStringFromj>
 801f10c:	687b      	ldr	r3, [r7, #4]
 801f10e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801f112:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801f116:	4618      	mov	r0, r3
 801f118:	f7ee fa0d 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 801f11c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801f120:	4618      	mov	r0, r3
 801f122:	f7ee f9a6 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801f126:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801f12a:	4618      	mov	r0, r3
 801f12c:	f7ee f9a1 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801f130:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801f134:	4618      	mov	r0, r3
 801f136:	f7ee f99c 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801f13a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801f13e:	4618      	mov	r0, r3
 801f140:	f7ee f997 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801f144:	e197      	b.n	801f476 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long int")
 801f146:	683b      	ldr	r3, [r7, #0]
 801f148:	f103 040c 	add.w	r4, r3, #12
 801f14c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801f150:	4974      	ldr	r1, [pc, #464]	; (801f324 <_ZNK14MockNamedValue8toStringEv+0x378>)
 801f152:	4618      	mov	r0, r3
 801f154:	f7ed fdd5 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801f158:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801f15c:	4619      	mov	r1, r3
 801f15e:	4620      	mov	r0, r4
 801f160:	f7ee f993 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801f164:	4603      	mov	r3, r0
 801f166:	461c      	mov	r4, r3
 801f168:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801f16c:	4618      	mov	r0, r3
 801f16e:	f7ee f980 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801f172:	2c00      	cmp	r4, #0
 801f174:	d03b      	beq.n	801f1ee <_ZNK14MockNamedValue8toStringEv+0x242>
        return StringFrom(value_.longIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longIntValue_);
 801f176:	683b      	ldr	r3, [r7, #0]
 801f178:	699a      	ldr	r2, [r3, #24]
 801f17a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801f17e:	4611      	mov	r1, r2
 801f180:	4618      	mov	r0, r3
 801f182:	f7ee fc4f 	bl	800da24 <_Z10StringFroml>
 801f186:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801f18a:	4964      	ldr	r1, [pc, #400]	; (801f31c <_ZNK14MockNamedValue8toStringEv+0x370>)
 801f18c:	4618      	mov	r0, r3
 801f18e:	f7ed fdb8 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801f192:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801f196:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801f19a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801f19e:	4618      	mov	r0, r3
 801f1a0:	f7ee f9c9 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 801f1a4:	683b      	ldr	r3, [r7, #0]
 801f1a6:	699a      	ldr	r2, [r3, #24]
 801f1a8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801f1ac:	4611      	mov	r1, r2
 801f1ae:	4618      	mov	r0, r3
 801f1b0:	f7ee fd4e 	bl	800dc50 <_Z30BracketsFormattedHexStringFroml>
 801f1b4:	687b      	ldr	r3, [r7, #4]
 801f1b6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801f1ba:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801f1be:	4618      	mov	r0, r3
 801f1c0:	f7ee f9b9 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 801f1c4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801f1c8:	4618      	mov	r0, r3
 801f1ca:	f7ee f952 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801f1ce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801f1d2:	4618      	mov	r0, r3
 801f1d4:	f7ee f94d 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801f1d8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801f1dc:	4618      	mov	r0, r3
 801f1de:	f7ee f948 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801f1e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801f1e6:	4618      	mov	r0, r3
 801f1e8:	f7ee f943 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801f1ec:	e143      	b.n	801f476 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned long int")
 801f1ee:	683b      	ldr	r3, [r7, #0]
 801f1f0:	f103 040c 	add.w	r4, r3, #12
 801f1f4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f1f8:	494b      	ldr	r1, [pc, #300]	; (801f328 <_ZNK14MockNamedValue8toStringEv+0x37c>)
 801f1fa:	4618      	mov	r0, r3
 801f1fc:	f7ed fd81 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801f200:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f204:	4619      	mov	r1, r3
 801f206:	4620      	mov	r0, r4
 801f208:	f7ee f93f 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801f20c:	4603      	mov	r3, r0
 801f20e:	461c      	mov	r4, r3
 801f210:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f214:	4618      	mov	r0, r3
 801f216:	f7ee f92c 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801f21a:	2c00      	cmp	r4, #0
 801f21c:	d03b      	beq.n	801f296 <_ZNK14MockNamedValue8toStringEv+0x2ea>
        return StringFrom(value_.unsignedLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongIntValue_);
 801f21e:	683b      	ldr	r3, [r7, #0]
 801f220:	699a      	ldr	r2, [r3, #24]
 801f222:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801f226:	4611      	mov	r1, r2
 801f228:	4618      	mov	r0, r3
 801f22a:	f7ee fe63 	bl	800def4 <_Z10StringFromm>
 801f22e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801f232:	493a      	ldr	r1, [pc, #232]	; (801f31c <_ZNK14MockNamedValue8toStringEv+0x370>)
 801f234:	4618      	mov	r0, r3
 801f236:	f7ed fd64 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801f23a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801f23e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801f242:	f107 0198 	add.w	r1, r7, #152	; 0x98
 801f246:	4618      	mov	r0, r3
 801f248:	f7ee f975 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 801f24c:	683b      	ldr	r3, [r7, #0]
 801f24e:	699a      	ldr	r2, [r3, #24]
 801f250:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801f254:	4611      	mov	r1, r2
 801f256:	4618      	mov	r0, r3
 801f258:	f7ee fd16 	bl	800dc88 <_Z30BracketsFormattedHexStringFromm>
 801f25c:	687b      	ldr	r3, [r7, #4]
 801f25e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801f262:	f107 0190 	add.w	r1, r7, #144	; 0x90
 801f266:	4618      	mov	r0, r3
 801f268:	f7ee f965 	bl	800d536 <_ZNK12SimpleStringplERKS_>
 801f26c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801f270:	4618      	mov	r0, r3
 801f272:	f7ee f8fe 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801f276:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801f27a:	4618      	mov	r0, r3
 801f27c:	f7ee f8f9 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801f280:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801f284:	4618      	mov	r0, r3
 801f286:	f7ee f8f4 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801f28a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801f28e:	4618      	mov	r0, r3
 801f290:	f7ee f8ef 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801f294:	e0ef      	b.n	801f476 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long long int")
        return StringFrom(value_.longLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longLongIntValue_);
    else if (type_ == "unsigned long long int")
        return StringFrom(value_.unsignedLongLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongLongIntValue_);
#endif
    else if (type_ == "const char*")
 801f296:	683b      	ldr	r3, [r7, #0]
 801f298:	f103 040c 	add.w	r4, r3, #12
 801f29c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801f2a0:	4922      	ldr	r1, [pc, #136]	; (801f32c <_ZNK14MockNamedValue8toStringEv+0x380>)
 801f2a2:	4618      	mov	r0, r3
 801f2a4:	f7ed fd2d 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801f2a8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801f2ac:	4619      	mov	r1, r3
 801f2ae:	4620      	mov	r0, r4
 801f2b0:	f7ee f8eb 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801f2b4:	4603      	mov	r3, r0
 801f2b6:	461c      	mov	r4, r3
 801f2b8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801f2bc:	4618      	mov	r0, r3
 801f2be:	f7ee f8d8 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801f2c2:	2c00      	cmp	r4, #0
 801f2c4:	d006      	beq.n	801f2d4 <_ZNK14MockNamedValue8toStringEv+0x328>
        return value_.stringValue_;
 801f2c6:	683b      	ldr	r3, [r7, #0]
 801f2c8:	699b      	ldr	r3, [r3, #24]
 801f2ca:	4619      	mov	r1, r3
 801f2cc:	6878      	ldr	r0, [r7, #4]
 801f2ce:	f7ed fd18 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801f2d2:	e0d0      	b.n	801f476 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "void*")
 801f2d4:	683b      	ldr	r3, [r7, #0]
 801f2d6:	f103 040c 	add.w	r4, r3, #12
 801f2da:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801f2de:	4914      	ldr	r1, [pc, #80]	; (801f330 <_ZNK14MockNamedValue8toStringEv+0x384>)
 801f2e0:	4618      	mov	r0, r3
 801f2e2:	f7ed fd0e 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801f2e6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801f2ea:	4619      	mov	r1, r3
 801f2ec:	4620      	mov	r0, r4
 801f2ee:	f7ee f8cc 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801f2f2:	4603      	mov	r3, r0
 801f2f4:	461c      	mov	r4, r3
 801f2f6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801f2fa:	4618      	mov	r0, r3
 801f2fc:	f7ee f8b9 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801f300:	2c00      	cmp	r4, #0
 801f302:	d017      	beq.n	801f334 <_ZNK14MockNamedValue8toStringEv+0x388>
        return StringFrom(value_.pointerValue_);
 801f304:	683b      	ldr	r3, [r7, #0]
 801f306:	699a      	ldr	r2, [r3, #24]
 801f308:	687b      	ldr	r3, [r7, #4]
 801f30a:	4611      	mov	r1, r2
 801f30c:	4618      	mov	r0, r3
 801f30e:	f7ee fb9b 	bl	800da48 <_Z10StringFromPKv>
 801f312:	e0b0      	b.n	801f476 <_ZNK14MockNamedValue8toStringEv+0x4ca>
 801f314:	080267d8 	.word	0x080267d8
 801f318:	080267d4 	.word	0x080267d4
 801f31c:	080268c4 	.word	0x080268c4
 801f320:	080267e0 	.word	0x080267e0
 801f324:	080267f0 	.word	0x080267f0
 801f328:	080267fc 	.word	0x080267fc
 801f32c:	080268a0 	.word	0x080268a0
 801f330:	08026880 	.word	0x08026880
    else if (type_ == "void (*)()")
 801f334:	683b      	ldr	r3, [r7, #0]
 801f336:	f103 040c 	add.w	r4, r3, #12
 801f33a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801f33e:	4950      	ldr	r1, [pc, #320]	; (801f480 <_ZNK14MockNamedValue8toStringEv+0x4d4>)
 801f340:	4618      	mov	r0, r3
 801f342:	f7ed fcde 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801f346:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801f34a:	4619      	mov	r1, r3
 801f34c:	4620      	mov	r0, r4
 801f34e:	f7ee f89c 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801f352:	4603      	mov	r3, r0
 801f354:	461c      	mov	r4, r3
 801f356:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801f35a:	4618      	mov	r0, r3
 801f35c:	f7ee f889 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801f360:	2c00      	cmp	r4, #0
 801f362:	d007      	beq.n	801f374 <_ZNK14MockNamedValue8toStringEv+0x3c8>
        return StringFrom(value_.functionPointerValue_);
 801f364:	683b      	ldr	r3, [r7, #0]
 801f366:	699a      	ldr	r2, [r3, #24]
 801f368:	687b      	ldr	r3, [r7, #4]
 801f36a:	4611      	mov	r1, r2
 801f36c:	4618      	mov	r0, r3
 801f36e:	f7ee fb95 	bl	800da9c <_Z10StringFromPFvvE>
 801f372:	e080      	b.n	801f476 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const void*")
 801f374:	683b      	ldr	r3, [r7, #0]
 801f376:	f103 040c 	add.w	r4, r3, #12
 801f37a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801f37e:	4941      	ldr	r1, [pc, #260]	; (801f484 <_ZNK14MockNamedValue8toStringEv+0x4d8>)
 801f380:	4618      	mov	r0, r3
 801f382:	f7ed fcbe 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801f386:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801f38a:	4619      	mov	r1, r3
 801f38c:	4620      	mov	r0, r4
 801f38e:	f7ee f87c 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801f392:	4603      	mov	r3, r0
 801f394:	461c      	mov	r4, r3
 801f396:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801f39a:	4618      	mov	r0, r3
 801f39c:	f7ee f869 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801f3a0:	2c00      	cmp	r4, #0
 801f3a2:	d007      	beq.n	801f3b4 <_ZNK14MockNamedValue8toStringEv+0x408>
        return StringFrom(value_.constPointerValue_);
 801f3a4:	683b      	ldr	r3, [r7, #0]
 801f3a6:	699a      	ldr	r2, [r3, #24]
 801f3a8:	687b      	ldr	r3, [r7, #4]
 801f3aa:	4611      	mov	r1, r2
 801f3ac:	4618      	mov	r0, r3
 801f3ae:	f7ee fb4b 	bl	800da48 <_Z10StringFromPKv>
 801f3b2:	e060      	b.n	801f476 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "double")
 801f3b4:	683b      	ldr	r3, [r7, #0]
 801f3b6:	f103 040c 	add.w	r4, r3, #12
 801f3ba:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801f3be:	4932      	ldr	r1, [pc, #200]	; (801f488 <_ZNK14MockNamedValue8toStringEv+0x4dc>)
 801f3c0:	4618      	mov	r0, r3
 801f3c2:	f7ed fc9e 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801f3c6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801f3ca:	4619      	mov	r1, r3
 801f3cc:	4620      	mov	r0, r4
 801f3ce:	f7ee f85c 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801f3d2:	4603      	mov	r3, r0
 801f3d4:	461c      	mov	r4, r3
 801f3d6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801f3da:	4618      	mov	r0, r3
 801f3dc:	f7ee f849 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801f3e0:	2c00      	cmp	r4, #0
 801f3e2:	d00c      	beq.n	801f3fe <_ZNK14MockNamedValue8toStringEv+0x452>
        return StringFrom(value_.doubleValue_.value);
 801f3e4:	683b      	ldr	r3, [r7, #0]
 801f3e6:	ed93 7b06 	vldr	d7, [r3, #24]
 801f3ea:	687b      	ldr	r3, [r7, #4]
 801f3ec:	2106      	movs	r1, #6
 801f3ee:	eeb0 0a47 	vmov.f32	s0, s14
 801f3f2:	eef0 0a67 	vmov.f32	s1, s15
 801f3f6:	4618      	mov	r0, r3
 801f3f8:	f7ee fd00 	bl	800ddfc <_Z10StringFromdi>
 801f3fc:	e03b      	b.n	801f476 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const unsigned char*")
 801f3fe:	683b      	ldr	r3, [r7, #0]
 801f400:	f103 040c 	add.w	r4, r3, #12
 801f404:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f408:	4920      	ldr	r1, [pc, #128]	; (801f48c <_ZNK14MockNamedValue8toStringEv+0x4e0>)
 801f40a:	4618      	mov	r0, r3
 801f40c:	f7ed fc79 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801f410:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f414:	4619      	mov	r1, r3
 801f416:	4620      	mov	r0, r4
 801f418:	f7ee f837 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801f41c:	4603      	mov	r3, r0
 801f41e:	461c      	mov	r4, r3
 801f420:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f424:	4618      	mov	r0, r3
 801f426:	f7ee f824 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801f42a:	2c00      	cmp	r4, #0
 801f42c:	d008      	beq.n	801f440 <_ZNK14MockNamedValue8toStringEv+0x494>
        return StringFromBinaryWithSizeOrNull(value_.memoryBufferValue_, size_);
 801f42e:	683b      	ldr	r3, [r7, #0]
 801f430:	6999      	ldr	r1, [r3, #24]
 801f432:	683b      	ldr	r3, [r7, #0]
 801f434:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801f436:	687b      	ldr	r3, [r7, #4]
 801f438:	4618      	mov	r0, r3
 801f43a:	f7ee fe73 	bl	800e124 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 801f43e:	e01a      	b.n	801f476 <_ZNK14MockNamedValue8toStringEv+0x4ca>

    if (comparator_)
 801f440:	683b      	ldr	r3, [r7, #0]
 801f442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f444:	2b00      	cmp	r3, #0
 801f446:	d00b      	beq.n	801f460 <_ZNK14MockNamedValue8toStringEv+0x4b4>
        return comparator_->valueToString(value_.constObjectPointerValue_);
 801f448:	683b      	ldr	r3, [r7, #0]
 801f44a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801f44c:	683b      	ldr	r3, [r7, #0]
 801f44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f450:	681b      	ldr	r3, [r3, #0]
 801f452:	330c      	adds	r3, #12
 801f454:	681b      	ldr	r3, [r3, #0]
 801f456:	683a      	ldr	r2, [r7, #0]
 801f458:	6992      	ldr	r2, [r2, #24]
 801f45a:	6878      	ldr	r0, [r7, #4]
 801f45c:	4798      	blx	r3
 801f45e:	e00a      	b.n	801f476 <_ZNK14MockNamedValue8toStringEv+0x4ca>

    return StringFromFormat("No comparator found for type: \"%s\"", type_.asCharString());
 801f460:	683b      	ldr	r3, [r7, #0]
 801f462:	330c      	adds	r3, #12
 801f464:	4618      	mov	r0, r3
 801f466:	f7ed ffd7 	bl	800d418 <_ZNK12SimpleString12asCharStringEv>
 801f46a:	4602      	mov	r2, r0
 801f46c:	687b      	ldr	r3, [r7, #4]
 801f46e:	4908      	ldr	r1, [pc, #32]	; (801f490 <_ZNK14MockNamedValue8toStringEv+0x4e4>)
 801f470:	4618      	mov	r0, r3
 801f472:	f7ee fd05 	bl	800de80 <_Z16StringFromFormatPKcz>

}
 801f476:	6878      	ldr	r0, [r7, #4]
 801f478:	37e4      	adds	r7, #228	; 0xe4
 801f47a:	46bd      	mov	sp, r7
 801f47c:	bd90      	pop	{r4, r7, pc}
 801f47e:	bf00      	nop
 801f480:	08026894 	.word	0x08026894
 801f484:	08026888 	.word	0x08026888
 801f488:	08026878 	.word	0x08026878
 801f48c:	080268ac 	.word	0x080268ac
 801f490:	080268c8 	.word	0x080268c8

0801f494 <_ZN22MockNamedValueListNode7setNextEPS_>:

void MockNamedValueListNode::setNext(MockNamedValueListNode* node)
{
 801f494:	b480      	push	{r7}
 801f496:	b083      	sub	sp, #12
 801f498:	af00      	add	r7, sp, #0
 801f49a:	6078      	str	r0, [r7, #4]
 801f49c:	6039      	str	r1, [r7, #0]
    next_ = node;
 801f49e:	687b      	ldr	r3, [r7, #4]
 801f4a0:	683a      	ldr	r2, [r7, #0]
 801f4a2:	605a      	str	r2, [r3, #4]
}
 801f4a4:	bf00      	nop
 801f4a6:	370c      	adds	r7, #12
 801f4a8:	46bd      	mov	sp, r7
 801f4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4ae:	4770      	bx	lr

0801f4b0 <_ZN22MockNamedValueListNode4nextEv>:

MockNamedValueListNode* MockNamedValueListNode::next()
{
 801f4b0:	b480      	push	{r7}
 801f4b2:	b083      	sub	sp, #12
 801f4b4:	af00      	add	r7, sp, #0
 801f4b6:	6078      	str	r0, [r7, #4]
    return next_;
 801f4b8:	687b      	ldr	r3, [r7, #4]
 801f4ba:	685b      	ldr	r3, [r3, #4]
}
 801f4bc:	4618      	mov	r0, r3
 801f4be:	370c      	adds	r7, #12
 801f4c0:	46bd      	mov	sp, r7
 801f4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4c6:	4770      	bx	lr

0801f4c8 <_ZN22MockNamedValueListNode4itemEv>:

MockNamedValue* MockNamedValueListNode::item()
{
 801f4c8:	b480      	push	{r7}
 801f4ca:	b083      	sub	sp, #12
 801f4cc:	af00      	add	r7, sp, #0
 801f4ce:	6078      	str	r0, [r7, #4]
    return data_;
 801f4d0:	687b      	ldr	r3, [r7, #4]
 801f4d2:	681b      	ldr	r3, [r3, #0]
}
 801f4d4:	4618      	mov	r0, r3
 801f4d6:	370c      	adds	r7, #12
 801f4d8:	46bd      	mov	sp, r7
 801f4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4de:	4770      	bx	lr

0801f4e0 <_ZN22MockNamedValueListNode7destroyEv>:

void MockNamedValueListNode::destroy()
{
 801f4e0:	b580      	push	{r7, lr}
 801f4e2:	b082      	sub	sp, #8
 801f4e4:	af00      	add	r7, sp, #0
 801f4e6:	6078      	str	r0, [r7, #4]
    delete data_;
 801f4e8:	687b      	ldr	r3, [r7, #4]
 801f4ea:	681b      	ldr	r3, [r3, #0]
 801f4ec:	2b00      	cmp	r3, #0
 801f4ee:	d004      	beq.n	801f4fa <_ZN22MockNamedValueListNode7destroyEv+0x1a>
 801f4f0:	681a      	ldr	r2, [r3, #0]
 801f4f2:	3204      	adds	r2, #4
 801f4f4:	6812      	ldr	r2, [r2, #0]
 801f4f6:	4618      	mov	r0, r3
 801f4f8:	4790      	blx	r2
}
 801f4fa:	bf00      	nop
 801f4fc:	3708      	adds	r7, #8
 801f4fe:	46bd      	mov	sp, r7
 801f500:	bd80      	pop	{r7, pc}

0801f502 <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>:

MockNamedValueListNode::MockNamedValueListNode(MockNamedValue* newValue)
 801f502:	b480      	push	{r7}
 801f504:	b083      	sub	sp, #12
 801f506:	af00      	add	r7, sp, #0
 801f508:	6078      	str	r0, [r7, #4]
 801f50a:	6039      	str	r1, [r7, #0]
    : data_(newValue), next_(NULLPTR)
 801f50c:	687b      	ldr	r3, [r7, #4]
 801f50e:	683a      	ldr	r2, [r7, #0]
 801f510:	601a      	str	r2, [r3, #0]
 801f512:	687b      	ldr	r3, [r7, #4]
 801f514:	2200      	movs	r2, #0
 801f516:	605a      	str	r2, [r3, #4]
{
}
 801f518:	687b      	ldr	r3, [r7, #4]
 801f51a:	4618      	mov	r0, r3
 801f51c:	370c      	adds	r7, #12
 801f51e:	46bd      	mov	sp, r7
 801f520:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f524:	4770      	bx	lr

0801f526 <_ZNK22MockNamedValueListNode7getNameEv>:

SimpleString MockNamedValueListNode::getName() const
{
 801f526:	b580      	push	{r7, lr}
 801f528:	b082      	sub	sp, #8
 801f52a:	af00      	add	r7, sp, #0
 801f52c:	6078      	str	r0, [r7, #4]
 801f52e:	6039      	str	r1, [r7, #0]
    return data_->getName();
 801f530:	683b      	ldr	r3, [r7, #0]
 801f532:	6819      	ldr	r1, [r3, #0]
 801f534:	683b      	ldr	r3, [r7, #0]
 801f536:	681b      	ldr	r3, [r3, #0]
 801f538:	681b      	ldr	r3, [r3, #0]
 801f53a:	335c      	adds	r3, #92	; 0x5c
 801f53c:	681b      	ldr	r3, [r3, #0]
 801f53e:	687a      	ldr	r2, [r7, #4]
 801f540:	4610      	mov	r0, r2
 801f542:	4798      	blx	r3
}
 801f544:	6878      	ldr	r0, [r7, #4]
 801f546:	3708      	adds	r7, #8
 801f548:	46bd      	mov	sp, r7
 801f54a:	bd80      	pop	{r7, pc}

0801f54c <_ZNK22MockNamedValueListNode7getTypeEv>:

SimpleString MockNamedValueListNode::getType() const
{
 801f54c:	b580      	push	{r7, lr}
 801f54e:	b082      	sub	sp, #8
 801f550:	af00      	add	r7, sp, #0
 801f552:	6078      	str	r0, [r7, #4]
 801f554:	6039      	str	r1, [r7, #0]
    return data_->getType();
 801f556:	683b      	ldr	r3, [r7, #0]
 801f558:	6819      	ldr	r1, [r3, #0]
 801f55a:	683b      	ldr	r3, [r7, #0]
 801f55c:	681b      	ldr	r3, [r3, #0]
 801f55e:	681b      	ldr	r3, [r3, #0]
 801f560:	3360      	adds	r3, #96	; 0x60
 801f562:	681b      	ldr	r3, [r3, #0]
 801f564:	687a      	ldr	r2, [r7, #4]
 801f566:	4610      	mov	r0, r2
 801f568:	4798      	blx	r3
}
 801f56a:	6878      	ldr	r0, [r7, #4]
 801f56c:	3708      	adds	r7, #8
 801f56e:	46bd      	mov	sp, r7
 801f570:	bd80      	pop	{r7, pc}

0801f572 <_ZN18MockNamedValueListC1Ev>:

MockNamedValueList::MockNamedValueList() : head_(NULLPTR)
 801f572:	b480      	push	{r7}
 801f574:	b083      	sub	sp, #12
 801f576:	af00      	add	r7, sp, #0
 801f578:	6078      	str	r0, [r7, #4]
 801f57a:	687b      	ldr	r3, [r7, #4]
 801f57c:	2200      	movs	r2, #0
 801f57e:	601a      	str	r2, [r3, #0]
{
}
 801f580:	687b      	ldr	r3, [r7, #4]
 801f582:	4618      	mov	r0, r3
 801f584:	370c      	adds	r7, #12
 801f586:	46bd      	mov	sp, r7
 801f588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f58c:	4770      	bx	lr

0801f58e <_ZN18MockNamedValueList5clearEv>:

void MockNamedValueList::clear()
{
 801f58e:	b580      	push	{r7, lr}
 801f590:	b084      	sub	sp, #16
 801f592:	af00      	add	r7, sp, #0
 801f594:	6078      	str	r0, [r7, #4]
    while (head_) {
 801f596:	687b      	ldr	r3, [r7, #4]
 801f598:	681b      	ldr	r3, [r3, #0]
 801f59a:	2b00      	cmp	r3, #0
 801f59c:	d016      	beq.n	801f5cc <_ZN18MockNamedValueList5clearEv+0x3e>
        MockNamedValueListNode* n = head_->next();
 801f59e:	687b      	ldr	r3, [r7, #4]
 801f5a0:	681b      	ldr	r3, [r3, #0]
 801f5a2:	4618      	mov	r0, r3
 801f5a4:	f7ff ff84 	bl	801f4b0 <_ZN22MockNamedValueListNode4nextEv>
 801f5a8:	60f8      	str	r0, [r7, #12]
        head_->destroy();
 801f5aa:	687b      	ldr	r3, [r7, #4]
 801f5ac:	681b      	ldr	r3, [r3, #0]
 801f5ae:	4618      	mov	r0, r3
 801f5b0:	f7ff ff96 	bl	801f4e0 <_ZN22MockNamedValueListNode7destroyEv>
        delete head_;
 801f5b4:	687b      	ldr	r3, [r7, #4]
 801f5b6:	681b      	ldr	r3, [r3, #0]
 801f5b8:	2b00      	cmp	r3, #0
 801f5ba:	d003      	beq.n	801f5c4 <_ZN18MockNamedValueList5clearEv+0x36>
 801f5bc:	2108      	movs	r1, #8
 801f5be:	4618      	mov	r0, r3
 801f5c0:	f7ea fff0 	bl	800a5a4 <_ZdlPvj>
        head_ = n;
 801f5c4:	687b      	ldr	r3, [r7, #4]
 801f5c6:	68fa      	ldr	r2, [r7, #12]
 801f5c8:	601a      	str	r2, [r3, #0]
    while (head_) {
 801f5ca:	e7e4      	b.n	801f596 <_ZN18MockNamedValueList5clearEv+0x8>
    }
}
 801f5cc:	bf00      	nop
 801f5ce:	3710      	adds	r7, #16
 801f5d0:	46bd      	mov	sp, r7
 801f5d2:	bd80      	pop	{r7, pc}

0801f5d4 <_ZN18MockNamedValueList3addEP14MockNamedValue>:

void MockNamedValueList::add(MockNamedValue* newValue)
{
 801f5d4:	b590      	push	{r4, r7, lr}
 801f5d6:	b085      	sub	sp, #20
 801f5d8:	af00      	add	r7, sp, #0
 801f5da:	6078      	str	r0, [r7, #4]
 801f5dc:	6039      	str	r1, [r7, #0]
    MockNamedValueListNode* newNode = new MockNamedValueListNode(newValue);
 801f5de:	f44f 7210 	mov.w	r2, #576	; 0x240
 801f5e2:	4916      	ldr	r1, [pc, #88]	; (801f63c <_ZN18MockNamedValueList3addEP14MockNamedValue+0x68>)
 801f5e4:	2008      	movs	r0, #8
 801f5e6:	f7ea ffc9 	bl	800a57c <_ZnwjPKci>
 801f5ea:	4604      	mov	r4, r0
 801f5ec:	6839      	ldr	r1, [r7, #0]
 801f5ee:	4620      	mov	r0, r4
 801f5f0:	f7ff ff87 	bl	801f502 <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>
 801f5f4:	60bc      	str	r4, [r7, #8]
    if (head_ == NULLPTR)
 801f5f6:	687b      	ldr	r3, [r7, #4]
 801f5f8:	681b      	ldr	r3, [r3, #0]
 801f5fa:	2b00      	cmp	r3, #0
 801f5fc:	d103      	bne.n	801f606 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x32>
        head_ = newNode;
 801f5fe:	687b      	ldr	r3, [r7, #4]
 801f600:	68ba      	ldr	r2, [r7, #8]
 801f602:	601a      	str	r2, [r3, #0]
    else {
        MockNamedValueListNode* lastNode = head_;
        while (lastNode->next()) lastNode = lastNode->next();
        lastNode->setNext(newNode);
    }
}
 801f604:	e016      	b.n	801f634 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x60>
        MockNamedValueListNode* lastNode = head_;
 801f606:	687b      	ldr	r3, [r7, #4]
 801f608:	681b      	ldr	r3, [r3, #0]
 801f60a:	60fb      	str	r3, [r7, #12]
        while (lastNode->next()) lastNode = lastNode->next();
 801f60c:	68f8      	ldr	r0, [r7, #12]
 801f60e:	f7ff ff4f 	bl	801f4b0 <_ZN22MockNamedValueListNode4nextEv>
 801f612:	4603      	mov	r3, r0
 801f614:	2b00      	cmp	r3, #0
 801f616:	bf14      	ite	ne
 801f618:	2301      	movne	r3, #1
 801f61a:	2300      	moveq	r3, #0
 801f61c:	b2db      	uxtb	r3, r3
 801f61e:	2b00      	cmp	r3, #0
 801f620:	d004      	beq.n	801f62c <_ZN18MockNamedValueList3addEP14MockNamedValue+0x58>
 801f622:	68f8      	ldr	r0, [r7, #12]
 801f624:	f7ff ff44 	bl	801f4b0 <_ZN22MockNamedValueListNode4nextEv>
 801f628:	60f8      	str	r0, [r7, #12]
 801f62a:	e7ef      	b.n	801f60c <_ZN18MockNamedValueList3addEP14MockNamedValue+0x38>
        lastNode->setNext(newNode);
 801f62c:	68b9      	ldr	r1, [r7, #8]
 801f62e:	68f8      	ldr	r0, [r7, #12]
 801f630:	f7ff ff30 	bl	801f494 <_ZN22MockNamedValueListNode7setNextEPS_>
}
 801f634:	bf00      	nop
 801f636:	3714      	adds	r7, #20
 801f638:	46bd      	mov	sp, r7
 801f63a:	bd90      	pop	{r4, r7, pc}
 801f63c:	08026810 	.word	0x08026810

0801f640 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>:

MockNamedValue* MockNamedValueList::getValueByName(const SimpleString& name)
{
 801f640:	b590      	push	{r4, r7, lr}
 801f642:	b087      	sub	sp, #28
 801f644:	af00      	add	r7, sp, #0
 801f646:	6078      	str	r0, [r7, #4]
 801f648:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801f64a:	687b      	ldr	r3, [r7, #4]
 801f64c:	681b      	ldr	r3, [r3, #0]
 801f64e:	617b      	str	r3, [r7, #20]
 801f650:	697b      	ldr	r3, [r7, #20]
 801f652:	2b00      	cmp	r3, #0
 801f654:	d01e      	beq.n	801f694 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x54>
        if (p->getName() == name)
 801f656:	f107 030c 	add.w	r3, r7, #12
 801f65a:	6979      	ldr	r1, [r7, #20]
 801f65c:	4618      	mov	r0, r3
 801f65e:	f7ff ff62 	bl	801f526 <_ZNK22MockNamedValueListNode7getNameEv>
 801f662:	f107 030c 	add.w	r3, r7, #12
 801f666:	6839      	ldr	r1, [r7, #0]
 801f668:	4618      	mov	r0, r3
 801f66a:	f7ed ff0e 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801f66e:	4603      	mov	r3, r0
 801f670:	461c      	mov	r4, r3
 801f672:	f107 030c 	add.w	r3, r7, #12
 801f676:	4618      	mov	r0, r3
 801f678:	f7ed fefb 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801f67c:	2c00      	cmp	r4, #0
 801f67e:	d004      	beq.n	801f68a <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x4a>
            return p->item();
 801f680:	6978      	ldr	r0, [r7, #20]
 801f682:	f7ff ff21 	bl	801f4c8 <_ZN22MockNamedValueListNode4itemEv>
 801f686:	4603      	mov	r3, r0
 801f688:	e005      	b.n	801f696 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x56>
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801f68a:	6978      	ldr	r0, [r7, #20]
 801f68c:	f7ff ff10 	bl	801f4b0 <_ZN22MockNamedValueListNode4nextEv>
 801f690:	6178      	str	r0, [r7, #20]
 801f692:	e7dd      	b.n	801f650 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x10>
    return NULLPTR;
 801f694:	2300      	movs	r3, #0
}
 801f696:	4618      	mov	r0, r3
 801f698:	371c      	adds	r7, #28
 801f69a:	46bd      	mov	sp, r7
 801f69c:	bd90      	pop	{r4, r7, pc}

0801f69e <_ZN18MockNamedValueList5beginEv>:

MockNamedValueListNode* MockNamedValueList::begin()
{
 801f69e:	b480      	push	{r7}
 801f6a0:	b083      	sub	sp, #12
 801f6a2:	af00      	add	r7, sp, #0
 801f6a4:	6078      	str	r0, [r7, #4]
    return head_;
 801f6a6:	687b      	ldr	r3, [r7, #4]
 801f6a8:	681b      	ldr	r3, [r3, #0]
}
 801f6aa:	4618      	mov	r0, r3
 801f6ac:	370c      	adds	r7, #12
 801f6ae:	46bd      	mov	sp, r7
 801f6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f6b4:	4770      	bx	lr

0801f6b6 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>:

struct MockNamedValueComparatorsAndCopiersRepositoryNode
{
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801f6b6:	b580      	push	{r7, lr}
 801f6b8:	b084      	sub	sp, #16
 801f6ba:	af00      	add	r7, sp, #0
 801f6bc:	60f8      	str	r0, [r7, #12]
 801f6be:	60b9      	str	r1, [r7, #8]
 801f6c0:	607a      	str	r2, [r7, #4]
 801f6c2:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(NULLPTR), next_(next) {}
 801f6c4:	68fb      	ldr	r3, [r7, #12]
 801f6c6:	68b9      	ldr	r1, [r7, #8]
 801f6c8:	4618      	mov	r0, r3
 801f6ca:	f7ed fb6e 	bl	800cdaa <_ZN12SimpleStringC1ERKS_>
 801f6ce:	68fb      	ldr	r3, [r7, #12]
 801f6d0:	687a      	ldr	r2, [r7, #4]
 801f6d2:	609a      	str	r2, [r3, #8]
 801f6d4:	68fb      	ldr	r3, [r7, #12]
 801f6d6:	2200      	movs	r2, #0
 801f6d8:	60da      	str	r2, [r3, #12]
 801f6da:	68fb      	ldr	r3, [r7, #12]
 801f6dc:	683a      	ldr	r2, [r7, #0]
 801f6de:	611a      	str	r2, [r3, #16]
 801f6e0:	68fb      	ldr	r3, [r7, #12]
 801f6e2:	4618      	mov	r0, r3
 801f6e4:	3710      	adds	r7, #16
 801f6e6:	46bd      	mov	sp, r7
 801f6e8:	bd80      	pop	{r7, pc}

0801f6ea <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801f6ea:	b580      	push	{r7, lr}
 801f6ec:	b084      	sub	sp, #16
 801f6ee:	af00      	add	r7, sp, #0
 801f6f0:	60f8      	str	r0, [r7, #12]
 801f6f2:	60b9      	str	r1, [r7, #8]
 801f6f4:	607a      	str	r2, [r7, #4]
 801f6f6:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(NULLPTR), copier_(copier), next_(next) {}
 801f6f8:	68fb      	ldr	r3, [r7, #12]
 801f6fa:	68b9      	ldr	r1, [r7, #8]
 801f6fc:	4618      	mov	r0, r3
 801f6fe:	f7ed fb54 	bl	800cdaa <_ZN12SimpleStringC1ERKS_>
 801f702:	68fb      	ldr	r3, [r7, #12]
 801f704:	2200      	movs	r2, #0
 801f706:	609a      	str	r2, [r3, #8]
 801f708:	68fb      	ldr	r3, [r7, #12]
 801f70a:	687a      	ldr	r2, [r7, #4]
 801f70c:	60da      	str	r2, [r3, #12]
 801f70e:	68fb      	ldr	r3, [r7, #12]
 801f710:	683a      	ldr	r2, [r7, #0]
 801f712:	611a      	str	r2, [r3, #16]
 801f714:	68fb      	ldr	r3, [r7, #12]
 801f716:	4618      	mov	r0, r3
 801f718:	3710      	adds	r7, #16
 801f71a:	46bd      	mov	sp, r7
 801f71c:	bd80      	pop	{r7, pc}

0801f71e <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801f71e:	b580      	push	{r7, lr}
 801f720:	b084      	sub	sp, #16
 801f722:	af00      	add	r7, sp, #0
 801f724:	60f8      	str	r0, [r7, #12]
 801f726:	60b9      	str	r1, [r7, #8]
 801f728:	607a      	str	r2, [r7, #4]
 801f72a:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(copier), next_(next) {}
 801f72c:	68fb      	ldr	r3, [r7, #12]
 801f72e:	68b9      	ldr	r1, [r7, #8]
 801f730:	4618      	mov	r0, r3
 801f732:	f7ed fb3a 	bl	800cdaa <_ZN12SimpleStringC1ERKS_>
 801f736:	68fb      	ldr	r3, [r7, #12]
 801f738:	687a      	ldr	r2, [r7, #4]
 801f73a:	609a      	str	r2, [r3, #8]
 801f73c:	68fb      	ldr	r3, [r7, #12]
 801f73e:	683a      	ldr	r2, [r7, #0]
 801f740:	60da      	str	r2, [r3, #12]
 801f742:	68fb      	ldr	r3, [r7, #12]
 801f744:	69ba      	ldr	r2, [r7, #24]
 801f746:	611a      	str	r2, [r3, #16]
 801f748:	68fb      	ldr	r3, [r7, #12]
 801f74a:	4618      	mov	r0, r3
 801f74c:	3710      	adds	r7, #16
 801f74e:	46bd      	mov	sp, r7
 801f750:	bd80      	pop	{r7, pc}
	...

0801f754 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>:
    MockNamedValueComparator* comparator_;
    MockNamedValueCopier* copier_;
    MockNamedValueComparatorsAndCopiersRepositoryNode* next_;
};

MockNamedValueComparatorsAndCopiersRepository::MockNamedValueComparatorsAndCopiersRepository() : head_(NULLPTR)
 801f754:	b480      	push	{r7}
 801f756:	b083      	sub	sp, #12
 801f758:	af00      	add	r7, sp, #0
 801f75a:	6078      	str	r0, [r7, #4]
 801f75c:	4a06      	ldr	r2, [pc, #24]	; (801f778 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev+0x24>)
 801f75e:	687b      	ldr	r3, [r7, #4]
 801f760:	601a      	str	r2, [r3, #0]
 801f762:	687b      	ldr	r3, [r7, #4]
 801f764:	2200      	movs	r2, #0
 801f766:	605a      	str	r2, [r3, #4]
{

}
 801f768:	687b      	ldr	r3, [r7, #4]
 801f76a:	4618      	mov	r0, r3
 801f76c:	370c      	adds	r7, #12
 801f76e:	46bd      	mov	sp, r7
 801f770:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f774:	4770      	bx	lr
 801f776:	bf00      	nop
 801f778:	08029424 	.word	0x08029424

0801f77c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>:

MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801f77c:	b580      	push	{r7, lr}
 801f77e:	b082      	sub	sp, #8
 801f780:	af00      	add	r7, sp, #0
 801f782:	6078      	str	r0, [r7, #4]
 801f784:	4a05      	ldr	r2, [pc, #20]	; (801f79c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev+0x20>)
 801f786:	687b      	ldr	r3, [r7, #4]
 801f788:	601a      	str	r2, [r3, #0]
{
    clear();
 801f78a:	6878      	ldr	r0, [r7, #4]
 801f78c:	f000 f825 	bl	801f7da <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
}
 801f790:	687b      	ldr	r3, [r7, #4]
 801f792:	4618      	mov	r0, r3
 801f794:	3708      	adds	r7, #8
 801f796:	46bd      	mov	sp, r7
 801f798:	bd80      	pop	{r7, pc}
 801f79a:	bf00      	nop
 801f79c:	08029424 	.word	0x08029424

0801f7a0 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD0Ev>:
MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801f7a0:	b580      	push	{r7, lr}
 801f7a2:	b082      	sub	sp, #8
 801f7a4:	af00      	add	r7, sp, #0
 801f7a6:	6078      	str	r0, [r7, #4]
}
 801f7a8:	6878      	ldr	r0, [r7, #4]
 801f7aa:	f7ff ffe7 	bl	801f77c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 801f7ae:	2108      	movs	r1, #8
 801f7b0:	6878      	ldr	r0, [r7, #4]
 801f7b2:	f7ea fef7 	bl	800a5a4 <_ZdlPvj>
 801f7b6:	687b      	ldr	r3, [r7, #4]
 801f7b8:	4618      	mov	r0, r3
 801f7ba:	3708      	adds	r7, #8
 801f7bc:	46bd      	mov	sp, r7
 801f7be:	bd80      	pop	{r7, pc}

0801f7c0 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>:
struct MockNamedValueComparatorsAndCopiersRepositoryNode
 801f7c0:	b580      	push	{r7, lr}
 801f7c2:	b082      	sub	sp, #8
 801f7c4:	af00      	add	r7, sp, #0
 801f7c6:	6078      	str	r0, [r7, #4]
 801f7c8:	687b      	ldr	r3, [r7, #4]
 801f7ca:	4618      	mov	r0, r3
 801f7cc:	f7ed fe51 	bl	800d472 <_ZN12SimpleStringD1Ev>
 801f7d0:	687b      	ldr	r3, [r7, #4]
 801f7d2:	4618      	mov	r0, r3
 801f7d4:	3708      	adds	r7, #8
 801f7d6:	46bd      	mov	sp, r7
 801f7d8:	bd80      	pop	{r7, pc}

0801f7da <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>:

void MockNamedValueComparatorsAndCopiersRepository::clear()
{
 801f7da:	b590      	push	{r4, r7, lr}
 801f7dc:	b085      	sub	sp, #20
 801f7de:	af00      	add	r7, sp, #0
 801f7e0:	6078      	str	r0, [r7, #4]
    while (head_) {
 801f7e2:	687b      	ldr	r3, [r7, #4]
 801f7e4:	685b      	ldr	r3, [r3, #4]
 801f7e6:	2b00      	cmp	r3, #0
 801f7e8:	d012      	beq.n	801f810 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x36>
        MockNamedValueComparatorsAndCopiersRepositoryNode* next = head_->next_;
 801f7ea:	687b      	ldr	r3, [r7, #4]
 801f7ec:	685b      	ldr	r3, [r3, #4]
 801f7ee:	691b      	ldr	r3, [r3, #16]
 801f7f0:	60fb      	str	r3, [r7, #12]
        delete head_;
 801f7f2:	687b      	ldr	r3, [r7, #4]
 801f7f4:	685c      	ldr	r4, [r3, #4]
 801f7f6:	2c00      	cmp	r4, #0
 801f7f8:	d006      	beq.n	801f808 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x2e>
 801f7fa:	4620      	mov	r0, r4
 801f7fc:	f7ff ffe0 	bl	801f7c0 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>
 801f800:	2114      	movs	r1, #20
 801f802:	4620      	mov	r0, r4
 801f804:	f7ea fece 	bl	800a5a4 <_ZdlPvj>
        head_ = next;
 801f808:	687b      	ldr	r3, [r7, #4]
 801f80a:	68fa      	ldr	r2, [r7, #12]
 801f80c:	605a      	str	r2, [r3, #4]
    while (head_) {
 801f80e:	e7e8      	b.n	801f7e2 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x8>
    }
}
 801f810:	bf00      	nop
 801f812:	3714      	adds	r7, #20
 801f814:	46bd      	mov	sp, r7
 801f816:	bd90      	pop	{r4, r7, pc}

0801f818 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockNamedValueComparatorsAndCopiersRepository::installComparator(const SimpleString& name, MockNamedValueComparator& comparator)
{
 801f818:	b590      	push	{r4, r7, lr}
 801f81a:	b085      	sub	sp, #20
 801f81c:	af00      	add	r7, sp, #0
 801f81e:	60f8      	str	r0, [r7, #12]
 801f820:	60b9      	str	r1, [r7, #8]
 801f822:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &comparator, head_);
 801f824:	f240 227a 	movw	r2, #634	; 0x27a
 801f828:	4908      	ldr	r1, [pc, #32]	; (801f84c <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x34>)
 801f82a:	2014      	movs	r0, #20
 801f82c:	f7ea fea6 	bl	800a57c <_ZnwjPKci>
 801f830:	4604      	mov	r4, r0
 801f832:	68fb      	ldr	r3, [r7, #12]
 801f834:	685b      	ldr	r3, [r3, #4]
 801f836:	687a      	ldr	r2, [r7, #4]
 801f838:	68b9      	ldr	r1, [r7, #8]
 801f83a:	4620      	mov	r0, r4
 801f83c:	f7ff ff3b 	bl	801f6b6 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>
 801f840:	68fb      	ldr	r3, [r7, #12]
 801f842:	605c      	str	r4, [r3, #4]
}
 801f844:	bf00      	nop
 801f846:	3714      	adds	r7, #20
 801f848:	46bd      	mov	sp, r7
 801f84a:	bd90      	pop	{r4, r7, pc}
 801f84c:	08026810 	.word	0x08026810

0801f850 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockNamedValueComparatorsAndCopiersRepository::installCopier(const SimpleString& name, MockNamedValueCopier& copier)
{
 801f850:	b590      	push	{r4, r7, lr}
 801f852:	b085      	sub	sp, #20
 801f854:	af00      	add	r7, sp, #0
 801f856:	60f8      	str	r0, [r7, #12]
 801f858:	60b9      	str	r1, [r7, #8]
 801f85a:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &copier, head_);
 801f85c:	f240 227f 	movw	r2, #639	; 0x27f
 801f860:	4908      	ldr	r1, [pc, #32]	; (801f884 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier+0x34>)
 801f862:	2014      	movs	r0, #20
 801f864:	f7ea fe8a 	bl	800a57c <_ZnwjPKci>
 801f868:	4604      	mov	r4, r0
 801f86a:	68fb      	ldr	r3, [r7, #12]
 801f86c:	685b      	ldr	r3, [r3, #4]
 801f86e:	687a      	ldr	r2, [r7, #4]
 801f870:	68b9      	ldr	r1, [r7, #8]
 801f872:	4620      	mov	r0, r4
 801f874:	f7ff ff39 	bl	801f6ea <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>
 801f878:	68fb      	ldr	r3, [r7, #12]
 801f87a:	605c      	str	r4, [r3, #4]
}
 801f87c:	bf00      	nop
 801f87e:	3714      	adds	r7, #20
 801f880:	46bd      	mov	sp, r7
 801f882:	bd90      	pop	{r4, r7, pc}
 801f884:	08026810 	.word	0x08026810

0801f888 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString>:

MockNamedValueComparator* MockNamedValueComparatorsAndCopiersRepository::getComparatorForType(const SimpleString& name)
{
 801f888:	b580      	push	{r7, lr}
 801f88a:	b084      	sub	sp, #16
 801f88c:	af00      	add	r7, sp, #0
 801f88e:	6078      	str	r0, [r7, #4]
 801f890:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801f892:	687b      	ldr	r3, [r7, #4]
 801f894:	685b      	ldr	r3, [r3, #4]
 801f896:	60fb      	str	r3, [r7, #12]
 801f898:	68fb      	ldr	r3, [r7, #12]
 801f89a:	2b00      	cmp	r3, #0
 801f89c:	d017      	beq.n	801f8ce <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->comparator_) return p->comparator_;
 801f89e:	68fb      	ldr	r3, [r7, #12]
 801f8a0:	6839      	ldr	r1, [r7, #0]
 801f8a2:	4618      	mov	r0, r3
 801f8a4:	f7ed fdf1 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801f8a8:	4603      	mov	r3, r0
 801f8aa:	2b00      	cmp	r3, #0
 801f8ac:	d005      	beq.n	801f8ba <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801f8ae:	68fb      	ldr	r3, [r7, #12]
 801f8b0:	689b      	ldr	r3, [r3, #8]
 801f8b2:	2b00      	cmp	r3, #0
 801f8b4:	d001      	beq.n	801f8ba <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801f8b6:	2301      	movs	r3, #1
 801f8b8:	e000      	b.n	801f8bc <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x34>
 801f8ba:	2300      	movs	r3, #0
 801f8bc:	2b00      	cmp	r3, #0
 801f8be:	d002      	beq.n	801f8c6 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x3e>
 801f8c0:	68fb      	ldr	r3, [r7, #12]
 801f8c2:	689b      	ldr	r3, [r3, #8]
 801f8c4:	e004      	b.n	801f8d0 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801f8c6:	68fb      	ldr	r3, [r7, #12]
 801f8c8:	691b      	ldr	r3, [r3, #16]
 801f8ca:	60fb      	str	r3, [r7, #12]
 801f8cc:	e7e4      	b.n	801f898 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801f8ce:	2300      	movs	r3, #0
}
 801f8d0:	4618      	mov	r0, r3
 801f8d2:	3710      	adds	r7, #16
 801f8d4:	46bd      	mov	sp, r7
 801f8d6:	bd80      	pop	{r7, pc}

0801f8d8 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString>:

MockNamedValueCopier* MockNamedValueComparatorsAndCopiersRepository::getCopierForType(const SimpleString& name)
{
 801f8d8:	b580      	push	{r7, lr}
 801f8da:	b084      	sub	sp, #16
 801f8dc:	af00      	add	r7, sp, #0
 801f8de:	6078      	str	r0, [r7, #4]
 801f8e0:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801f8e2:	687b      	ldr	r3, [r7, #4]
 801f8e4:	685b      	ldr	r3, [r3, #4]
 801f8e6:	60fb      	str	r3, [r7, #12]
 801f8e8:	68fb      	ldr	r3, [r7, #12]
 801f8ea:	2b00      	cmp	r3, #0
 801f8ec:	d017      	beq.n	801f91e <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->copier_) return p->copier_;
 801f8ee:	68fb      	ldr	r3, [r7, #12]
 801f8f0:	6839      	ldr	r1, [r7, #0]
 801f8f2:	4618      	mov	r0, r3
 801f8f4:	f7ed fdc9 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801f8f8:	4603      	mov	r3, r0
 801f8fa:	2b00      	cmp	r3, #0
 801f8fc:	d005      	beq.n	801f90a <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801f8fe:	68fb      	ldr	r3, [r7, #12]
 801f900:	68db      	ldr	r3, [r3, #12]
 801f902:	2b00      	cmp	r3, #0
 801f904:	d001      	beq.n	801f90a <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801f906:	2301      	movs	r3, #1
 801f908:	e000      	b.n	801f90c <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x34>
 801f90a:	2300      	movs	r3, #0
 801f90c:	2b00      	cmp	r3, #0
 801f90e:	d002      	beq.n	801f916 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x3e>
 801f910:	68fb      	ldr	r3, [r7, #12]
 801f912:	68db      	ldr	r3, [r3, #12]
 801f914:	e004      	b.n	801f920 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801f916:	68fb      	ldr	r3, [r7, #12]
 801f918:	691b      	ldr	r3, [r3, #16]
 801f91a:	60fb      	str	r3, [r7, #12]
 801f91c:	e7e4      	b.n	801f8e8 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801f91e:	2300      	movs	r3, #0
}
 801f920:	4618      	mov	r0, r3
 801f922:	3710      	adds	r7, #16
 801f924:	46bd      	mov	sp, r7
 801f926:	bd80      	pop	{r7, pc}

0801f928 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>:

void MockNamedValueComparatorsAndCopiersRepository::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 801f928:	b590      	push	{r4, r7, lr}
 801f92a:	b087      	sub	sp, #28
 801f92c:	af02      	add	r7, sp, #8
 801f92e:	6078      	str	r0, [r7, #4]
 801f930:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801f932:	683b      	ldr	r3, [r7, #0]
 801f934:	685b      	ldr	r3, [r3, #4]
 801f936:	60fb      	str	r3, [r7, #12]
 801f938:	68fb      	ldr	r3, [r7, #12]
 801f93a:	2b00      	cmp	r3, #0
 801f93c:	d018      	beq.n	801f970 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x48>
      head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(p->name_, p->comparator_, p->copier_, head_);
 801f93e:	f240 2293 	movw	r2, #659	; 0x293
 801f942:	490d      	ldr	r1, [pc, #52]	; (801f978 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x50>)
 801f944:	2014      	movs	r0, #20
 801f946:	f7ea fe19 	bl	800a57c <_ZnwjPKci>
 801f94a:	4604      	mov	r4, r0
 801f94c:	68f9      	ldr	r1, [r7, #12]
 801f94e:	68fb      	ldr	r3, [r7, #12]
 801f950:	689a      	ldr	r2, [r3, #8]
 801f952:	68fb      	ldr	r3, [r7, #12]
 801f954:	68d8      	ldr	r0, [r3, #12]
 801f956:	687b      	ldr	r3, [r7, #4]
 801f958:	685b      	ldr	r3, [r3, #4]
 801f95a:	9300      	str	r3, [sp, #0]
 801f95c:	4603      	mov	r3, r0
 801f95e:	4620      	mov	r0, r4
 801f960:	f7ff fedd 	bl	801f71e <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>
 801f964:	687b      	ldr	r3, [r7, #4]
 801f966:	605c      	str	r4, [r3, #4]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801f968:	68fb      	ldr	r3, [r7, #12]
 801f96a:	691b      	ldr	r3, [r3, #16]
 801f96c:	60fb      	str	r3, [r7, #12]
 801f96e:	e7e3      	b.n	801f938 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x10>
}
 801f970:	bf00      	nop
 801f972:	3714      	adds	r7, #20
 801f974:	46bd      	mov	sp, r7
 801f976:	bd90      	pop	{r4, r7, pc}
 801f978:	08026810 	.word	0x08026810

0801f97c <_ZN10TestFilterC1ERK12SimpleString>:

TestFilter::TestFilter() : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
{
}

TestFilter::TestFilter(const SimpleString& filter) : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
 801f97c:	b580      	push	{r7, lr}
 801f97e:	b082      	sub	sp, #8
 801f980:	af00      	add	r7, sp, #0
 801f982:	6078      	str	r0, [r7, #4]
 801f984:	6039      	str	r1, [r7, #0]
 801f986:	687b      	ldr	r3, [r7, #4]
 801f988:	490b      	ldr	r1, [pc, #44]	; (801f9b8 <_ZN10TestFilterC1ERK12SimpleString+0x3c>)
 801f98a:	4618      	mov	r0, r3
 801f98c:	f7ed f9b9 	bl	800cd02 <_ZN12SimpleStringC1EPKc>
 801f990:	687b      	ldr	r3, [r7, #4]
 801f992:	2200      	movs	r2, #0
 801f994:	721a      	strb	r2, [r3, #8]
 801f996:	687b      	ldr	r3, [r7, #4]
 801f998:	2200      	movs	r2, #0
 801f99a:	725a      	strb	r2, [r3, #9]
 801f99c:	687b      	ldr	r3, [r7, #4]
 801f99e:	2200      	movs	r2, #0
 801f9a0:	60da      	str	r2, [r3, #12]
{
    filter_ = filter;
 801f9a2:	687b      	ldr	r3, [r7, #4]
 801f9a4:	6839      	ldr	r1, [r7, #0]
 801f9a6:	4618      	mov	r0, r3
 801f9a8:	f7ed fa17 	bl	800cdda <_ZN12SimpleStringaSERKS_>
}
 801f9ac:	687b      	ldr	r3, [r7, #4]
 801f9ae:	4618      	mov	r0, r3
 801f9b0:	3708      	adds	r7, #8
 801f9b2:	46bd      	mov	sp, r7
 801f9b4:	bd80      	pop	{r7, pc}
 801f9b6:	bf00      	nop
 801f9b8:	080268ec 	.word	0x080268ec

0801f9bc <_ZN10TestFilter3addEPS_>:
{
    filter_ = filter;
}

TestFilter* TestFilter::add(TestFilter* filter)
{
 801f9bc:	b480      	push	{r7}
 801f9be:	b083      	sub	sp, #12
 801f9c0:	af00      	add	r7, sp, #0
 801f9c2:	6078      	str	r0, [r7, #4]
 801f9c4:	6039      	str	r1, [r7, #0]
    next_ = filter;
 801f9c6:	687b      	ldr	r3, [r7, #4]
 801f9c8:	683a      	ldr	r2, [r7, #0]
 801f9ca:	60da      	str	r2, [r3, #12]
    return this;
 801f9cc:	687b      	ldr	r3, [r7, #4]
}
 801f9ce:	4618      	mov	r0, r3
 801f9d0:	370c      	adds	r7, #12
 801f9d2:	46bd      	mov	sp, r7
 801f9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9d8:	4770      	bx	lr

0801f9da <_ZNK10TestFilter7getNextEv>:

TestFilter* TestFilter::getNext() const
{
 801f9da:	b480      	push	{r7}
 801f9dc:	b083      	sub	sp, #12
 801f9de:	af00      	add	r7, sp, #0
 801f9e0:	6078      	str	r0, [r7, #4]
    return next_;
 801f9e2:	687b      	ldr	r3, [r7, #4]
 801f9e4:	68db      	ldr	r3, [r3, #12]
}
 801f9e6:	4618      	mov	r0, r3
 801f9e8:	370c      	adds	r7, #12
 801f9ea:	46bd      	mov	sp, r7
 801f9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9f0:	4770      	bx	lr

0801f9f2 <_ZN10TestFilter14strictMatchingEv>:

void TestFilter::strictMatching()
{
 801f9f2:	b480      	push	{r7}
 801f9f4:	b083      	sub	sp, #12
 801f9f6:	af00      	add	r7, sp, #0
 801f9f8:	6078      	str	r0, [r7, #4]
    strictMatching_ = true;
 801f9fa:	687b      	ldr	r3, [r7, #4]
 801f9fc:	2201      	movs	r2, #1
 801f9fe:	721a      	strb	r2, [r3, #8]
}
 801fa00:	bf00      	nop
 801fa02:	370c      	adds	r7, #12
 801fa04:	46bd      	mov	sp, r7
 801fa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa0a:	4770      	bx	lr

0801fa0c <_ZN10TestFilter14invertMatchingEv>:

void TestFilter::invertMatching()
{
 801fa0c:	b480      	push	{r7}
 801fa0e:	b083      	sub	sp, #12
 801fa10:	af00      	add	r7, sp, #0
 801fa12:	6078      	str	r0, [r7, #4]
    invertMatching_ = true;
 801fa14:	687b      	ldr	r3, [r7, #4]
 801fa16:	2201      	movs	r2, #1
 801fa18:	725a      	strb	r2, [r3, #9]
}
 801fa1a:	bf00      	nop
 801fa1c:	370c      	adds	r7, #12
 801fa1e:	46bd      	mov	sp, r7
 801fa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa24:	4770      	bx	lr

0801fa26 <_ZNK10TestFilter5matchERK12SimpleString>:

bool TestFilter::match(const SimpleString& name) const
{
 801fa26:	b580      	push	{r7, lr}
 801fa28:	b084      	sub	sp, #16
 801fa2a:	af00      	add	r7, sp, #0
 801fa2c:	6078      	str	r0, [r7, #4]
 801fa2e:	6039      	str	r1, [r7, #0]
    bool matches = false;
 801fa30:	2300      	movs	r3, #0
 801fa32:	73fb      	strb	r3, [r7, #15]

    if(strictMatching_)
 801fa34:	687b      	ldr	r3, [r7, #4]
 801fa36:	7a1b      	ldrb	r3, [r3, #8]
 801fa38:	2b00      	cmp	r3, #0
 801fa3a:	d007      	beq.n	801fa4c <_ZNK10TestFilter5matchERK12SimpleString+0x26>
        matches = name == filter_;
 801fa3c:	687b      	ldr	r3, [r7, #4]
 801fa3e:	4619      	mov	r1, r3
 801fa40:	6838      	ldr	r0, [r7, #0]
 801fa42:	f7ed fd22 	bl	800d48a <_ZeqRK12SimpleStringS1_>
 801fa46:	4603      	mov	r3, r0
 801fa48:	73fb      	strb	r3, [r7, #15]
 801fa4a:	e006      	b.n	801fa5a <_ZNK10TestFilter5matchERK12SimpleString+0x34>
    else
        matches = name.contains(filter_);
 801fa4c:	687b      	ldr	r3, [r7, #4]
 801fa4e:	4619      	mov	r1, r3
 801fa50:	6838      	ldr	r0, [r7, #0]
 801fa52:	f7ed f9d4 	bl	800cdfe <_ZNK12SimpleString8containsERKS_>
 801fa56:	4603      	mov	r3, r0
 801fa58:	73fb      	strb	r3, [r7, #15]

    return invertMatching_ ? !matches : matches;
 801fa5a:	687b      	ldr	r3, [r7, #4]
 801fa5c:	7a5b      	ldrb	r3, [r3, #9]
 801fa5e:	2b00      	cmp	r3, #0
 801fa60:	d004      	beq.n	801fa6c <_ZNK10TestFilter5matchERK12SimpleString+0x46>
 801fa62:	7bfb      	ldrb	r3, [r7, #15]
 801fa64:	f083 0301 	eor.w	r3, r3, #1
 801fa68:	b2db      	uxtb	r3, r3
 801fa6a:	e005      	b.n	801fa78 <_ZNK10TestFilter5matchERK12SimpleString+0x52>
 801fa6c:	7bfb      	ldrb	r3, [r7, #15]
 801fa6e:	2b00      	cmp	r3, #0
 801fa70:	bf14      	ite	ne
 801fa72:	2301      	movne	r3, #1
 801fa74:	2300      	moveq	r3, #0
 801fa76:	b2db      	uxtb	r3, r3
}
 801fa78:	4618      	mov	r0, r3
 801fa7a:	3710      	adds	r7, #16
 801fa7c:	46bd      	mov	sp, r7
 801fa7e:	bd80      	pop	{r7, pc}

0801fa80 <__cxa_guard_acquire>:
 801fa80:	6803      	ldr	r3, [r0, #0]
 801fa82:	07db      	lsls	r3, r3, #31
 801fa84:	d406      	bmi.n	801fa94 <__cxa_guard_acquire+0x14>
 801fa86:	7843      	ldrb	r3, [r0, #1]
 801fa88:	b103      	cbz	r3, 801fa8c <__cxa_guard_acquire+0xc>
 801fa8a:	deff      	udf	#255	; 0xff
 801fa8c:	2301      	movs	r3, #1
 801fa8e:	7043      	strb	r3, [r0, #1]
 801fa90:	4618      	mov	r0, r3
 801fa92:	4770      	bx	lr
 801fa94:	2000      	movs	r0, #0
 801fa96:	4770      	bx	lr

0801fa98 <__cxa_guard_release>:
 801fa98:	2301      	movs	r3, #1
 801fa9a:	6003      	str	r3, [r0, #0]
 801fa9c:	4770      	bx	lr

0801fa9e <__cxa_pure_virtual>:
 801fa9e:	b508      	push	{r3, lr}
 801faa0:	f000 f80c 	bl	801fabc <_ZSt9terminatev>

0801faa4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801faa4:	b508      	push	{r3, lr}
 801faa6:	4780      	blx	r0
 801faa8:	f000 f816 	bl	801fad8 <abort>

0801faac <_ZSt13get_terminatev>:
 801faac:	4b02      	ldr	r3, [pc, #8]	; (801fab8 <_ZSt13get_terminatev+0xc>)
 801faae:	6818      	ldr	r0, [r3, #0]
 801fab0:	f3bf 8f5b 	dmb	ish
 801fab4:	4770      	bx	lr
 801fab6:	bf00      	nop
 801fab8:	20000104 	.word	0x20000104

0801fabc <_ZSt9terminatev>:
 801fabc:	b508      	push	{r3, lr}
 801fabe:	f7ff fff5 	bl	801faac <_ZSt13get_terminatev>
 801fac2:	f7ff ffef 	bl	801faa4 <_ZN10__cxxabiv111__terminateEPFvvE>

0801fac6 <fabs>:
 801fac6:	ec51 0b10 	vmov	r0, r1, d0
 801faca:	ee10 2a10 	vmov	r2, s0
 801face:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801fad2:	ec43 2b10 	vmov	d0, r2, r3
 801fad6:	4770      	bx	lr

0801fad8 <abort>:
 801fad8:	b508      	push	{r3, lr}
 801fada:	2006      	movs	r0, #6
 801fadc:	f000 ff8c 	bl	80209f8 <raise>
 801fae0:	2001      	movs	r0, #1
 801fae2:	f7e1 f94e 	bl	8000d82 <_exit>

0801fae6 <atexit>:
 801fae6:	2300      	movs	r3, #0
 801fae8:	4601      	mov	r1, r0
 801faea:	461a      	mov	r2, r3
 801faec:	4618      	mov	r0, r3
 801faee:	f002 b9d3 	b.w	8021e98 <__register_exitproc>

0801faf2 <atoi>:
 801faf2:	220a      	movs	r2, #10
 801faf4:	2100      	movs	r1, #0
 801faf6:	f001 bdfb 	b.w	80216f0 <strtol>
	...

0801fafc <calloc>:
 801fafc:	4b02      	ldr	r3, [pc, #8]	; (801fb08 <calloc+0xc>)
 801fafe:	460a      	mov	r2, r1
 801fb00:	4601      	mov	r1, r0
 801fb02:	6818      	ldr	r0, [r3, #0]
 801fb04:	f000 bde8 	b.w	80206d8 <_calloc_r>
 801fb08:	20000108 	.word	0x20000108

0801fb0c <__errno>:
 801fb0c:	4b01      	ldr	r3, [pc, #4]	; (801fb14 <__errno+0x8>)
 801fb0e:	6818      	ldr	r0, [r3, #0]
 801fb10:	4770      	bx	lr
 801fb12:	bf00      	nop
 801fb14:	20000108 	.word	0x20000108

0801fb18 <_fclose_r>:
 801fb18:	b570      	push	{r4, r5, r6, lr}
 801fb1a:	4605      	mov	r5, r0
 801fb1c:	460c      	mov	r4, r1
 801fb1e:	b911      	cbnz	r1, 801fb26 <_fclose_r+0xe>
 801fb20:	2600      	movs	r6, #0
 801fb22:	4630      	mov	r0, r6
 801fb24:	bd70      	pop	{r4, r5, r6, pc}
 801fb26:	b118      	cbz	r0, 801fb30 <_fclose_r+0x18>
 801fb28:	6983      	ldr	r3, [r0, #24]
 801fb2a:	b90b      	cbnz	r3, 801fb30 <_fclose_r+0x18>
 801fb2c:	f000 f994 	bl	801fe58 <__sinit>
 801fb30:	4b2c      	ldr	r3, [pc, #176]	; (801fbe4 <_fclose_r+0xcc>)
 801fb32:	429c      	cmp	r4, r3
 801fb34:	d114      	bne.n	801fb60 <_fclose_r+0x48>
 801fb36:	686c      	ldr	r4, [r5, #4]
 801fb38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fb3a:	07d8      	lsls	r0, r3, #31
 801fb3c:	d405      	bmi.n	801fb4a <_fclose_r+0x32>
 801fb3e:	89a3      	ldrh	r3, [r4, #12]
 801fb40:	0599      	lsls	r1, r3, #22
 801fb42:	d402      	bmi.n	801fb4a <_fclose_r+0x32>
 801fb44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fb46:	f000 fd3a 	bl	80205be <__retarget_lock_acquire_recursive>
 801fb4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fb4e:	b98b      	cbnz	r3, 801fb74 <_fclose_r+0x5c>
 801fb50:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801fb52:	f016 0601 	ands.w	r6, r6, #1
 801fb56:	d1e3      	bne.n	801fb20 <_fclose_r+0x8>
 801fb58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fb5a:	f000 fd32 	bl	80205c2 <__retarget_lock_release_recursive>
 801fb5e:	e7e0      	b.n	801fb22 <_fclose_r+0xa>
 801fb60:	4b21      	ldr	r3, [pc, #132]	; (801fbe8 <_fclose_r+0xd0>)
 801fb62:	429c      	cmp	r4, r3
 801fb64:	d101      	bne.n	801fb6a <_fclose_r+0x52>
 801fb66:	68ac      	ldr	r4, [r5, #8]
 801fb68:	e7e6      	b.n	801fb38 <_fclose_r+0x20>
 801fb6a:	4b20      	ldr	r3, [pc, #128]	; (801fbec <_fclose_r+0xd4>)
 801fb6c:	429c      	cmp	r4, r3
 801fb6e:	bf08      	it	eq
 801fb70:	68ec      	ldreq	r4, [r5, #12]
 801fb72:	e7e1      	b.n	801fb38 <_fclose_r+0x20>
 801fb74:	4621      	mov	r1, r4
 801fb76:	4628      	mov	r0, r5
 801fb78:	f000 f842 	bl	801fc00 <__sflush_r>
 801fb7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801fb7e:	4606      	mov	r6, r0
 801fb80:	b133      	cbz	r3, 801fb90 <_fclose_r+0x78>
 801fb82:	6a21      	ldr	r1, [r4, #32]
 801fb84:	4628      	mov	r0, r5
 801fb86:	4798      	blx	r3
 801fb88:	2800      	cmp	r0, #0
 801fb8a:	bfb8      	it	lt
 801fb8c:	f04f 36ff 	movlt.w	r6, #4294967295
 801fb90:	89a3      	ldrh	r3, [r4, #12]
 801fb92:	061a      	lsls	r2, r3, #24
 801fb94:	d503      	bpl.n	801fb9e <_fclose_r+0x86>
 801fb96:	6921      	ldr	r1, [r4, #16]
 801fb98:	4628      	mov	r0, r5
 801fb9a:	f000 fdad 	bl	80206f8 <_free_r>
 801fb9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fba0:	b141      	cbz	r1, 801fbb4 <_fclose_r+0x9c>
 801fba2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fba6:	4299      	cmp	r1, r3
 801fba8:	d002      	beq.n	801fbb0 <_fclose_r+0x98>
 801fbaa:	4628      	mov	r0, r5
 801fbac:	f000 fda4 	bl	80206f8 <_free_r>
 801fbb0:	2300      	movs	r3, #0
 801fbb2:	6363      	str	r3, [r4, #52]	; 0x34
 801fbb4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801fbb6:	b121      	cbz	r1, 801fbc2 <_fclose_r+0xaa>
 801fbb8:	4628      	mov	r0, r5
 801fbba:	f000 fd9d 	bl	80206f8 <_free_r>
 801fbbe:	2300      	movs	r3, #0
 801fbc0:	64a3      	str	r3, [r4, #72]	; 0x48
 801fbc2:	f000 f931 	bl	801fe28 <__sfp_lock_acquire>
 801fbc6:	2300      	movs	r3, #0
 801fbc8:	81a3      	strh	r3, [r4, #12]
 801fbca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fbcc:	07db      	lsls	r3, r3, #31
 801fbce:	d402      	bmi.n	801fbd6 <_fclose_r+0xbe>
 801fbd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fbd2:	f000 fcf6 	bl	80205c2 <__retarget_lock_release_recursive>
 801fbd6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fbd8:	f000 fcef 	bl	80205ba <__retarget_lock_close_recursive>
 801fbdc:	f000 f92a 	bl	801fe34 <__sfp_lock_release>
 801fbe0:	e79f      	b.n	801fb22 <_fclose_r+0xa>
 801fbe2:	bf00      	nop
 801fbe4:	08029518 	.word	0x08029518
 801fbe8:	08029538 	.word	0x08029538
 801fbec:	080294f8 	.word	0x080294f8

0801fbf0 <fclose>:
 801fbf0:	4b02      	ldr	r3, [pc, #8]	; (801fbfc <fclose+0xc>)
 801fbf2:	4601      	mov	r1, r0
 801fbf4:	6818      	ldr	r0, [r3, #0]
 801fbf6:	f7ff bf8f 	b.w	801fb18 <_fclose_r>
 801fbfa:	bf00      	nop
 801fbfc:	20000108 	.word	0x20000108

0801fc00 <__sflush_r>:
 801fc00:	898a      	ldrh	r2, [r1, #12]
 801fc02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fc06:	4605      	mov	r5, r0
 801fc08:	0710      	lsls	r0, r2, #28
 801fc0a:	460c      	mov	r4, r1
 801fc0c:	d458      	bmi.n	801fcc0 <__sflush_r+0xc0>
 801fc0e:	684b      	ldr	r3, [r1, #4]
 801fc10:	2b00      	cmp	r3, #0
 801fc12:	dc05      	bgt.n	801fc20 <__sflush_r+0x20>
 801fc14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801fc16:	2b00      	cmp	r3, #0
 801fc18:	dc02      	bgt.n	801fc20 <__sflush_r+0x20>
 801fc1a:	2000      	movs	r0, #0
 801fc1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fc20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801fc22:	2e00      	cmp	r6, #0
 801fc24:	d0f9      	beq.n	801fc1a <__sflush_r+0x1a>
 801fc26:	2300      	movs	r3, #0
 801fc28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801fc2c:	682f      	ldr	r7, [r5, #0]
 801fc2e:	602b      	str	r3, [r5, #0]
 801fc30:	d032      	beq.n	801fc98 <__sflush_r+0x98>
 801fc32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801fc34:	89a3      	ldrh	r3, [r4, #12]
 801fc36:	075a      	lsls	r2, r3, #29
 801fc38:	d505      	bpl.n	801fc46 <__sflush_r+0x46>
 801fc3a:	6863      	ldr	r3, [r4, #4]
 801fc3c:	1ac0      	subs	r0, r0, r3
 801fc3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801fc40:	b10b      	cbz	r3, 801fc46 <__sflush_r+0x46>
 801fc42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801fc44:	1ac0      	subs	r0, r0, r3
 801fc46:	2300      	movs	r3, #0
 801fc48:	4602      	mov	r2, r0
 801fc4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801fc4c:	6a21      	ldr	r1, [r4, #32]
 801fc4e:	4628      	mov	r0, r5
 801fc50:	47b0      	blx	r6
 801fc52:	1c43      	adds	r3, r0, #1
 801fc54:	89a3      	ldrh	r3, [r4, #12]
 801fc56:	d106      	bne.n	801fc66 <__sflush_r+0x66>
 801fc58:	6829      	ldr	r1, [r5, #0]
 801fc5a:	291d      	cmp	r1, #29
 801fc5c:	d82c      	bhi.n	801fcb8 <__sflush_r+0xb8>
 801fc5e:	4a2a      	ldr	r2, [pc, #168]	; (801fd08 <__sflush_r+0x108>)
 801fc60:	40ca      	lsrs	r2, r1
 801fc62:	07d6      	lsls	r6, r2, #31
 801fc64:	d528      	bpl.n	801fcb8 <__sflush_r+0xb8>
 801fc66:	2200      	movs	r2, #0
 801fc68:	6062      	str	r2, [r4, #4]
 801fc6a:	04d9      	lsls	r1, r3, #19
 801fc6c:	6922      	ldr	r2, [r4, #16]
 801fc6e:	6022      	str	r2, [r4, #0]
 801fc70:	d504      	bpl.n	801fc7c <__sflush_r+0x7c>
 801fc72:	1c42      	adds	r2, r0, #1
 801fc74:	d101      	bne.n	801fc7a <__sflush_r+0x7a>
 801fc76:	682b      	ldr	r3, [r5, #0]
 801fc78:	b903      	cbnz	r3, 801fc7c <__sflush_r+0x7c>
 801fc7a:	6560      	str	r0, [r4, #84]	; 0x54
 801fc7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fc7e:	602f      	str	r7, [r5, #0]
 801fc80:	2900      	cmp	r1, #0
 801fc82:	d0ca      	beq.n	801fc1a <__sflush_r+0x1a>
 801fc84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fc88:	4299      	cmp	r1, r3
 801fc8a:	d002      	beq.n	801fc92 <__sflush_r+0x92>
 801fc8c:	4628      	mov	r0, r5
 801fc8e:	f000 fd33 	bl	80206f8 <_free_r>
 801fc92:	2000      	movs	r0, #0
 801fc94:	6360      	str	r0, [r4, #52]	; 0x34
 801fc96:	e7c1      	b.n	801fc1c <__sflush_r+0x1c>
 801fc98:	6a21      	ldr	r1, [r4, #32]
 801fc9a:	2301      	movs	r3, #1
 801fc9c:	4628      	mov	r0, r5
 801fc9e:	47b0      	blx	r6
 801fca0:	1c41      	adds	r1, r0, #1
 801fca2:	d1c7      	bne.n	801fc34 <__sflush_r+0x34>
 801fca4:	682b      	ldr	r3, [r5, #0]
 801fca6:	2b00      	cmp	r3, #0
 801fca8:	d0c4      	beq.n	801fc34 <__sflush_r+0x34>
 801fcaa:	2b1d      	cmp	r3, #29
 801fcac:	d001      	beq.n	801fcb2 <__sflush_r+0xb2>
 801fcae:	2b16      	cmp	r3, #22
 801fcb0:	d101      	bne.n	801fcb6 <__sflush_r+0xb6>
 801fcb2:	602f      	str	r7, [r5, #0]
 801fcb4:	e7b1      	b.n	801fc1a <__sflush_r+0x1a>
 801fcb6:	89a3      	ldrh	r3, [r4, #12]
 801fcb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fcbc:	81a3      	strh	r3, [r4, #12]
 801fcbe:	e7ad      	b.n	801fc1c <__sflush_r+0x1c>
 801fcc0:	690f      	ldr	r7, [r1, #16]
 801fcc2:	2f00      	cmp	r7, #0
 801fcc4:	d0a9      	beq.n	801fc1a <__sflush_r+0x1a>
 801fcc6:	0793      	lsls	r3, r2, #30
 801fcc8:	680e      	ldr	r6, [r1, #0]
 801fcca:	bf08      	it	eq
 801fccc:	694b      	ldreq	r3, [r1, #20]
 801fcce:	600f      	str	r7, [r1, #0]
 801fcd0:	bf18      	it	ne
 801fcd2:	2300      	movne	r3, #0
 801fcd4:	eba6 0807 	sub.w	r8, r6, r7
 801fcd8:	608b      	str	r3, [r1, #8]
 801fcda:	f1b8 0f00 	cmp.w	r8, #0
 801fcde:	dd9c      	ble.n	801fc1a <__sflush_r+0x1a>
 801fce0:	6a21      	ldr	r1, [r4, #32]
 801fce2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801fce4:	4643      	mov	r3, r8
 801fce6:	463a      	mov	r2, r7
 801fce8:	4628      	mov	r0, r5
 801fcea:	47b0      	blx	r6
 801fcec:	2800      	cmp	r0, #0
 801fcee:	dc06      	bgt.n	801fcfe <__sflush_r+0xfe>
 801fcf0:	89a3      	ldrh	r3, [r4, #12]
 801fcf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fcf6:	81a3      	strh	r3, [r4, #12]
 801fcf8:	f04f 30ff 	mov.w	r0, #4294967295
 801fcfc:	e78e      	b.n	801fc1c <__sflush_r+0x1c>
 801fcfe:	4407      	add	r7, r0
 801fd00:	eba8 0800 	sub.w	r8, r8, r0
 801fd04:	e7e9      	b.n	801fcda <__sflush_r+0xda>
 801fd06:	bf00      	nop
 801fd08:	20400001 	.word	0x20400001

0801fd0c <_fflush_r>:
 801fd0c:	b538      	push	{r3, r4, r5, lr}
 801fd0e:	690b      	ldr	r3, [r1, #16]
 801fd10:	4605      	mov	r5, r0
 801fd12:	460c      	mov	r4, r1
 801fd14:	b913      	cbnz	r3, 801fd1c <_fflush_r+0x10>
 801fd16:	2500      	movs	r5, #0
 801fd18:	4628      	mov	r0, r5
 801fd1a:	bd38      	pop	{r3, r4, r5, pc}
 801fd1c:	b118      	cbz	r0, 801fd26 <_fflush_r+0x1a>
 801fd1e:	6983      	ldr	r3, [r0, #24]
 801fd20:	b90b      	cbnz	r3, 801fd26 <_fflush_r+0x1a>
 801fd22:	f000 f899 	bl	801fe58 <__sinit>
 801fd26:	4b14      	ldr	r3, [pc, #80]	; (801fd78 <_fflush_r+0x6c>)
 801fd28:	429c      	cmp	r4, r3
 801fd2a:	d11b      	bne.n	801fd64 <_fflush_r+0x58>
 801fd2c:	686c      	ldr	r4, [r5, #4]
 801fd2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fd32:	2b00      	cmp	r3, #0
 801fd34:	d0ef      	beq.n	801fd16 <_fflush_r+0xa>
 801fd36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801fd38:	07d0      	lsls	r0, r2, #31
 801fd3a:	d404      	bmi.n	801fd46 <_fflush_r+0x3a>
 801fd3c:	0599      	lsls	r1, r3, #22
 801fd3e:	d402      	bmi.n	801fd46 <_fflush_r+0x3a>
 801fd40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fd42:	f000 fc3c 	bl	80205be <__retarget_lock_acquire_recursive>
 801fd46:	4628      	mov	r0, r5
 801fd48:	4621      	mov	r1, r4
 801fd4a:	f7ff ff59 	bl	801fc00 <__sflush_r>
 801fd4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fd50:	07da      	lsls	r2, r3, #31
 801fd52:	4605      	mov	r5, r0
 801fd54:	d4e0      	bmi.n	801fd18 <_fflush_r+0xc>
 801fd56:	89a3      	ldrh	r3, [r4, #12]
 801fd58:	059b      	lsls	r3, r3, #22
 801fd5a:	d4dd      	bmi.n	801fd18 <_fflush_r+0xc>
 801fd5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fd5e:	f000 fc30 	bl	80205c2 <__retarget_lock_release_recursive>
 801fd62:	e7d9      	b.n	801fd18 <_fflush_r+0xc>
 801fd64:	4b05      	ldr	r3, [pc, #20]	; (801fd7c <_fflush_r+0x70>)
 801fd66:	429c      	cmp	r4, r3
 801fd68:	d101      	bne.n	801fd6e <_fflush_r+0x62>
 801fd6a:	68ac      	ldr	r4, [r5, #8]
 801fd6c:	e7df      	b.n	801fd2e <_fflush_r+0x22>
 801fd6e:	4b04      	ldr	r3, [pc, #16]	; (801fd80 <_fflush_r+0x74>)
 801fd70:	429c      	cmp	r4, r3
 801fd72:	bf08      	it	eq
 801fd74:	68ec      	ldreq	r4, [r5, #12]
 801fd76:	e7da      	b.n	801fd2e <_fflush_r+0x22>
 801fd78:	08029518 	.word	0x08029518
 801fd7c:	08029538 	.word	0x08029538
 801fd80:	080294f8 	.word	0x080294f8

0801fd84 <fflush>:
 801fd84:	4601      	mov	r1, r0
 801fd86:	b920      	cbnz	r0, 801fd92 <fflush+0xe>
 801fd88:	4b04      	ldr	r3, [pc, #16]	; (801fd9c <fflush+0x18>)
 801fd8a:	4905      	ldr	r1, [pc, #20]	; (801fda0 <fflush+0x1c>)
 801fd8c:	6818      	ldr	r0, [r3, #0]
 801fd8e:	f000 babb 	b.w	8020308 <_fwalk_reent>
 801fd92:	4b04      	ldr	r3, [pc, #16]	; (801fda4 <fflush+0x20>)
 801fd94:	6818      	ldr	r0, [r3, #0]
 801fd96:	f7ff bfb9 	b.w	801fd0c <_fflush_r>
 801fd9a:	bf00      	nop
 801fd9c:	08029558 	.word	0x08029558
 801fda0:	0801fd0d 	.word	0x0801fd0d
 801fda4:	20000108 	.word	0x20000108

0801fda8 <std>:
 801fda8:	2300      	movs	r3, #0
 801fdaa:	b510      	push	{r4, lr}
 801fdac:	4604      	mov	r4, r0
 801fdae:	e9c0 3300 	strd	r3, r3, [r0]
 801fdb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801fdb6:	6083      	str	r3, [r0, #8]
 801fdb8:	8181      	strh	r1, [r0, #12]
 801fdba:	6643      	str	r3, [r0, #100]	; 0x64
 801fdbc:	81c2      	strh	r2, [r0, #14]
 801fdbe:	6183      	str	r3, [r0, #24]
 801fdc0:	4619      	mov	r1, r3
 801fdc2:	2208      	movs	r2, #8
 801fdc4:	305c      	adds	r0, #92	; 0x5c
 801fdc6:	f000 fc7f 	bl	80206c8 <memset>
 801fdca:	4b05      	ldr	r3, [pc, #20]	; (801fde0 <std+0x38>)
 801fdcc:	6263      	str	r3, [r4, #36]	; 0x24
 801fdce:	4b05      	ldr	r3, [pc, #20]	; (801fde4 <std+0x3c>)
 801fdd0:	62a3      	str	r3, [r4, #40]	; 0x28
 801fdd2:	4b05      	ldr	r3, [pc, #20]	; (801fde8 <std+0x40>)
 801fdd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801fdd6:	4b05      	ldr	r3, [pc, #20]	; (801fdec <std+0x44>)
 801fdd8:	6224      	str	r4, [r4, #32]
 801fdda:	6323      	str	r3, [r4, #48]	; 0x30
 801fddc:	bd10      	pop	{r4, pc}
 801fdde:	bf00      	nop
 801fde0:	08020a71 	.word	0x08020a71
 801fde4:	08020a97 	.word	0x08020a97
 801fde8:	08020acf 	.word	0x08020acf
 801fdec:	08020af3 	.word	0x08020af3

0801fdf0 <_cleanup_r>:
 801fdf0:	4901      	ldr	r1, [pc, #4]	; (801fdf8 <_cleanup_r+0x8>)
 801fdf2:	f000 ba89 	b.w	8020308 <_fwalk_reent>
 801fdf6:	bf00      	nop
 801fdf8:	0801fd0d 	.word	0x0801fd0d

0801fdfc <__sfmoreglue>:
 801fdfc:	b570      	push	{r4, r5, r6, lr}
 801fdfe:	1e4a      	subs	r2, r1, #1
 801fe00:	2568      	movs	r5, #104	; 0x68
 801fe02:	4355      	muls	r5, r2
 801fe04:	460e      	mov	r6, r1
 801fe06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801fe0a:	f000 fcc5 	bl	8020798 <_malloc_r>
 801fe0e:	4604      	mov	r4, r0
 801fe10:	b140      	cbz	r0, 801fe24 <__sfmoreglue+0x28>
 801fe12:	2100      	movs	r1, #0
 801fe14:	e9c0 1600 	strd	r1, r6, [r0]
 801fe18:	300c      	adds	r0, #12
 801fe1a:	60a0      	str	r0, [r4, #8]
 801fe1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801fe20:	f000 fc52 	bl	80206c8 <memset>
 801fe24:	4620      	mov	r0, r4
 801fe26:	bd70      	pop	{r4, r5, r6, pc}

0801fe28 <__sfp_lock_acquire>:
 801fe28:	4801      	ldr	r0, [pc, #4]	; (801fe30 <__sfp_lock_acquire+0x8>)
 801fe2a:	f000 bbc8 	b.w	80205be <__retarget_lock_acquire_recursive>
 801fe2e:	bf00      	nop
 801fe30:	20000f90 	.word	0x20000f90

0801fe34 <__sfp_lock_release>:
 801fe34:	4801      	ldr	r0, [pc, #4]	; (801fe3c <__sfp_lock_release+0x8>)
 801fe36:	f000 bbc4 	b.w	80205c2 <__retarget_lock_release_recursive>
 801fe3a:	bf00      	nop
 801fe3c:	20000f90 	.word	0x20000f90

0801fe40 <__sinit_lock_acquire>:
 801fe40:	4801      	ldr	r0, [pc, #4]	; (801fe48 <__sinit_lock_acquire+0x8>)
 801fe42:	f000 bbbc 	b.w	80205be <__retarget_lock_acquire_recursive>
 801fe46:	bf00      	nop
 801fe48:	20000f8b 	.word	0x20000f8b

0801fe4c <__sinit_lock_release>:
 801fe4c:	4801      	ldr	r0, [pc, #4]	; (801fe54 <__sinit_lock_release+0x8>)
 801fe4e:	f000 bbb8 	b.w	80205c2 <__retarget_lock_release_recursive>
 801fe52:	bf00      	nop
 801fe54:	20000f8b 	.word	0x20000f8b

0801fe58 <__sinit>:
 801fe58:	b510      	push	{r4, lr}
 801fe5a:	4604      	mov	r4, r0
 801fe5c:	f7ff fff0 	bl	801fe40 <__sinit_lock_acquire>
 801fe60:	69a3      	ldr	r3, [r4, #24]
 801fe62:	b11b      	cbz	r3, 801fe6c <__sinit+0x14>
 801fe64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fe68:	f7ff bff0 	b.w	801fe4c <__sinit_lock_release>
 801fe6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801fe70:	6523      	str	r3, [r4, #80]	; 0x50
 801fe72:	4b13      	ldr	r3, [pc, #76]	; (801fec0 <__sinit+0x68>)
 801fe74:	4a13      	ldr	r2, [pc, #76]	; (801fec4 <__sinit+0x6c>)
 801fe76:	681b      	ldr	r3, [r3, #0]
 801fe78:	62a2      	str	r2, [r4, #40]	; 0x28
 801fe7a:	42a3      	cmp	r3, r4
 801fe7c:	bf04      	itt	eq
 801fe7e:	2301      	moveq	r3, #1
 801fe80:	61a3      	streq	r3, [r4, #24]
 801fe82:	4620      	mov	r0, r4
 801fe84:	f000 f820 	bl	801fec8 <__sfp>
 801fe88:	6060      	str	r0, [r4, #4]
 801fe8a:	4620      	mov	r0, r4
 801fe8c:	f000 f81c 	bl	801fec8 <__sfp>
 801fe90:	60a0      	str	r0, [r4, #8]
 801fe92:	4620      	mov	r0, r4
 801fe94:	f000 f818 	bl	801fec8 <__sfp>
 801fe98:	2200      	movs	r2, #0
 801fe9a:	60e0      	str	r0, [r4, #12]
 801fe9c:	2104      	movs	r1, #4
 801fe9e:	6860      	ldr	r0, [r4, #4]
 801fea0:	f7ff ff82 	bl	801fda8 <std>
 801fea4:	68a0      	ldr	r0, [r4, #8]
 801fea6:	2201      	movs	r2, #1
 801fea8:	2109      	movs	r1, #9
 801feaa:	f7ff ff7d 	bl	801fda8 <std>
 801feae:	68e0      	ldr	r0, [r4, #12]
 801feb0:	2202      	movs	r2, #2
 801feb2:	2112      	movs	r1, #18
 801feb4:	f7ff ff78 	bl	801fda8 <std>
 801feb8:	2301      	movs	r3, #1
 801feba:	61a3      	str	r3, [r4, #24]
 801febc:	e7d2      	b.n	801fe64 <__sinit+0xc>
 801febe:	bf00      	nop
 801fec0:	08029558 	.word	0x08029558
 801fec4:	0801fdf1 	.word	0x0801fdf1

0801fec8 <__sfp>:
 801fec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801feca:	4607      	mov	r7, r0
 801fecc:	f7ff ffac 	bl	801fe28 <__sfp_lock_acquire>
 801fed0:	4b1e      	ldr	r3, [pc, #120]	; (801ff4c <__sfp+0x84>)
 801fed2:	681e      	ldr	r6, [r3, #0]
 801fed4:	69b3      	ldr	r3, [r6, #24]
 801fed6:	b913      	cbnz	r3, 801fede <__sfp+0x16>
 801fed8:	4630      	mov	r0, r6
 801feda:	f7ff ffbd 	bl	801fe58 <__sinit>
 801fede:	3648      	adds	r6, #72	; 0x48
 801fee0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801fee4:	3b01      	subs	r3, #1
 801fee6:	d503      	bpl.n	801fef0 <__sfp+0x28>
 801fee8:	6833      	ldr	r3, [r6, #0]
 801feea:	b30b      	cbz	r3, 801ff30 <__sfp+0x68>
 801feec:	6836      	ldr	r6, [r6, #0]
 801feee:	e7f7      	b.n	801fee0 <__sfp+0x18>
 801fef0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801fef4:	b9d5      	cbnz	r5, 801ff2c <__sfp+0x64>
 801fef6:	4b16      	ldr	r3, [pc, #88]	; (801ff50 <__sfp+0x88>)
 801fef8:	60e3      	str	r3, [r4, #12]
 801fefa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801fefe:	6665      	str	r5, [r4, #100]	; 0x64
 801ff00:	f000 fb5a 	bl	80205b8 <__retarget_lock_init_recursive>
 801ff04:	f7ff ff96 	bl	801fe34 <__sfp_lock_release>
 801ff08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801ff0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801ff10:	6025      	str	r5, [r4, #0]
 801ff12:	61a5      	str	r5, [r4, #24]
 801ff14:	2208      	movs	r2, #8
 801ff16:	4629      	mov	r1, r5
 801ff18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ff1c:	f000 fbd4 	bl	80206c8 <memset>
 801ff20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801ff24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801ff28:	4620      	mov	r0, r4
 801ff2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ff2c:	3468      	adds	r4, #104	; 0x68
 801ff2e:	e7d9      	b.n	801fee4 <__sfp+0x1c>
 801ff30:	2104      	movs	r1, #4
 801ff32:	4638      	mov	r0, r7
 801ff34:	f7ff ff62 	bl	801fdfc <__sfmoreglue>
 801ff38:	4604      	mov	r4, r0
 801ff3a:	6030      	str	r0, [r6, #0]
 801ff3c:	2800      	cmp	r0, #0
 801ff3e:	d1d5      	bne.n	801feec <__sfp+0x24>
 801ff40:	f7ff ff78 	bl	801fe34 <__sfp_lock_release>
 801ff44:	230c      	movs	r3, #12
 801ff46:	603b      	str	r3, [r7, #0]
 801ff48:	e7ee      	b.n	801ff28 <__sfp+0x60>
 801ff4a:	bf00      	nop
 801ff4c:	08029558 	.word	0x08029558
 801ff50:	ffff0001 	.word	0xffff0001

0801ff54 <_fopen_r>:
 801ff54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ff56:	460f      	mov	r7, r1
 801ff58:	4611      	mov	r1, r2
 801ff5a:	aa01      	add	r2, sp, #4
 801ff5c:	4605      	mov	r5, r0
 801ff5e:	f002 f82f 	bl	8021fc0 <__sflags>
 801ff62:	4606      	mov	r6, r0
 801ff64:	b918      	cbnz	r0, 801ff6e <_fopen_r+0x1a>
 801ff66:	2400      	movs	r4, #0
 801ff68:	4620      	mov	r0, r4
 801ff6a:	b003      	add	sp, #12
 801ff6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ff6e:	4628      	mov	r0, r5
 801ff70:	f7ff ffaa 	bl	801fec8 <__sfp>
 801ff74:	4604      	mov	r4, r0
 801ff76:	2800      	cmp	r0, #0
 801ff78:	d0f5      	beq.n	801ff66 <_fopen_r+0x12>
 801ff7a:	4639      	mov	r1, r7
 801ff7c:	9a01      	ldr	r2, [sp, #4]
 801ff7e:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 801ff82:	4628      	mov	r0, r5
 801ff84:	f000 fc62 	bl	802084c <_open_r>
 801ff88:	1e07      	subs	r7, r0, #0
 801ff8a:	da09      	bge.n	801ffa0 <_fopen_r+0x4c>
 801ff8c:	2500      	movs	r5, #0
 801ff8e:	f7ff ff4b 	bl	801fe28 <__sfp_lock_acquire>
 801ff92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ff94:	81a5      	strh	r5, [r4, #12]
 801ff96:	f000 fb10 	bl	80205ba <__retarget_lock_close_recursive>
 801ff9a:	f7ff ff4b 	bl	801fe34 <__sfp_lock_release>
 801ff9e:	e7e2      	b.n	801ff66 <_fopen_r+0x12>
 801ffa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ffa2:	07db      	lsls	r3, r3, #31
 801ffa4:	d405      	bmi.n	801ffb2 <_fopen_r+0x5e>
 801ffa6:	89a3      	ldrh	r3, [r4, #12]
 801ffa8:	0598      	lsls	r0, r3, #22
 801ffaa:	d402      	bmi.n	801ffb2 <_fopen_r+0x5e>
 801ffac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ffae:	f000 fb06 	bl	80205be <__retarget_lock_acquire_recursive>
 801ffb2:	4b0e      	ldr	r3, [pc, #56]	; (801ffec <_fopen_r+0x98>)
 801ffb4:	6263      	str	r3, [r4, #36]	; 0x24
 801ffb6:	4b0e      	ldr	r3, [pc, #56]	; (801fff0 <_fopen_r+0x9c>)
 801ffb8:	62a3      	str	r3, [r4, #40]	; 0x28
 801ffba:	4b0e      	ldr	r3, [pc, #56]	; (801fff4 <_fopen_r+0xa0>)
 801ffbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ffbe:	05f1      	lsls	r1, r6, #23
 801ffc0:	4b0d      	ldr	r3, [pc, #52]	; (801fff8 <_fopen_r+0xa4>)
 801ffc2:	81e7      	strh	r7, [r4, #14]
 801ffc4:	81a6      	strh	r6, [r4, #12]
 801ffc6:	6224      	str	r4, [r4, #32]
 801ffc8:	6323      	str	r3, [r4, #48]	; 0x30
 801ffca:	d505      	bpl.n	801ffd8 <_fopen_r+0x84>
 801ffcc:	2302      	movs	r3, #2
 801ffce:	2200      	movs	r2, #0
 801ffd0:	4621      	mov	r1, r4
 801ffd2:	4628      	mov	r0, r5
 801ffd4:	f000 f888 	bl	80200e8 <_fseek_r>
 801ffd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ffda:	07da      	lsls	r2, r3, #31
 801ffdc:	d4c4      	bmi.n	801ff68 <_fopen_r+0x14>
 801ffde:	89a3      	ldrh	r3, [r4, #12]
 801ffe0:	059b      	lsls	r3, r3, #22
 801ffe2:	d4c1      	bmi.n	801ff68 <_fopen_r+0x14>
 801ffe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ffe6:	f000 faec 	bl	80205c2 <__retarget_lock_release_recursive>
 801ffea:	e7bd      	b.n	801ff68 <_fopen_r+0x14>
 801ffec:	08020a71 	.word	0x08020a71
 801fff0:	08020a97 	.word	0x08020a97
 801fff4:	08020acf 	.word	0x08020acf
 801fff8:	08020af3 	.word	0x08020af3

0801fffc <fopen>:
 801fffc:	4b02      	ldr	r3, [pc, #8]	; (8020008 <fopen+0xc>)
 801fffe:	460a      	mov	r2, r1
 8020000:	4601      	mov	r1, r0
 8020002:	6818      	ldr	r0, [r3, #0]
 8020004:	f7ff bfa6 	b.w	801ff54 <_fopen_r>
 8020008:	20000108 	.word	0x20000108

0802000c <_fputs_r>:
 802000c:	b570      	push	{r4, r5, r6, lr}
 802000e:	460e      	mov	r6, r1
 8020010:	4614      	mov	r4, r2
 8020012:	4605      	mov	r5, r0
 8020014:	b118      	cbz	r0, 802001e <_fputs_r+0x12>
 8020016:	6983      	ldr	r3, [r0, #24]
 8020018:	b90b      	cbnz	r3, 802001e <_fputs_r+0x12>
 802001a:	f7ff ff1d 	bl	801fe58 <__sinit>
 802001e:	4b2b      	ldr	r3, [pc, #172]	; (80200cc <_fputs_r+0xc0>)
 8020020:	429c      	cmp	r4, r3
 8020022:	d11e      	bne.n	8020062 <_fputs_r+0x56>
 8020024:	686c      	ldr	r4, [r5, #4]
 8020026:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020028:	07da      	lsls	r2, r3, #31
 802002a:	d405      	bmi.n	8020038 <_fputs_r+0x2c>
 802002c:	89a3      	ldrh	r3, [r4, #12]
 802002e:	059b      	lsls	r3, r3, #22
 8020030:	d402      	bmi.n	8020038 <_fputs_r+0x2c>
 8020032:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020034:	f000 fac3 	bl	80205be <__retarget_lock_acquire_recursive>
 8020038:	89a3      	ldrh	r3, [r4, #12]
 802003a:	0718      	lsls	r0, r3, #28
 802003c:	d51b      	bpl.n	8020076 <_fputs_r+0x6a>
 802003e:	6923      	ldr	r3, [r4, #16]
 8020040:	b1cb      	cbz	r3, 8020076 <_fputs_r+0x6a>
 8020042:	3e01      	subs	r6, #1
 8020044:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8020048:	bb39      	cbnz	r1, 802009a <_fputs_r+0x8e>
 802004a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 802004c:	f015 0501 	ands.w	r5, r5, #1
 8020050:	d139      	bne.n	80200c6 <_fputs_r+0xba>
 8020052:	89a3      	ldrh	r3, [r4, #12]
 8020054:	0599      	lsls	r1, r3, #22
 8020056:	d402      	bmi.n	802005e <_fputs_r+0x52>
 8020058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802005a:	f000 fab2 	bl	80205c2 <__retarget_lock_release_recursive>
 802005e:	4628      	mov	r0, r5
 8020060:	bd70      	pop	{r4, r5, r6, pc}
 8020062:	4b1b      	ldr	r3, [pc, #108]	; (80200d0 <_fputs_r+0xc4>)
 8020064:	429c      	cmp	r4, r3
 8020066:	d101      	bne.n	802006c <_fputs_r+0x60>
 8020068:	68ac      	ldr	r4, [r5, #8]
 802006a:	e7dc      	b.n	8020026 <_fputs_r+0x1a>
 802006c:	4b19      	ldr	r3, [pc, #100]	; (80200d4 <_fputs_r+0xc8>)
 802006e:	429c      	cmp	r4, r3
 8020070:	bf08      	it	eq
 8020072:	68ec      	ldreq	r4, [r5, #12]
 8020074:	e7d7      	b.n	8020026 <_fputs_r+0x1a>
 8020076:	4621      	mov	r1, r4
 8020078:	4628      	mov	r0, r5
 802007a:	f001 fe9f 	bl	8021dbc <__swsetup_r>
 802007e:	2800      	cmp	r0, #0
 8020080:	d0df      	beq.n	8020042 <_fputs_r+0x36>
 8020082:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020084:	07da      	lsls	r2, r3, #31
 8020086:	d405      	bmi.n	8020094 <_fputs_r+0x88>
 8020088:	89a3      	ldrh	r3, [r4, #12]
 802008a:	059b      	lsls	r3, r3, #22
 802008c:	d402      	bmi.n	8020094 <_fputs_r+0x88>
 802008e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020090:	f000 fa97 	bl	80205c2 <__retarget_lock_release_recursive>
 8020094:	f04f 35ff 	mov.w	r5, #4294967295
 8020098:	e7e1      	b.n	802005e <_fputs_r+0x52>
 802009a:	68a3      	ldr	r3, [r4, #8]
 802009c:	3b01      	subs	r3, #1
 802009e:	2b00      	cmp	r3, #0
 80200a0:	60a3      	str	r3, [r4, #8]
 80200a2:	da04      	bge.n	80200ae <_fputs_r+0xa2>
 80200a4:	69a2      	ldr	r2, [r4, #24]
 80200a6:	4293      	cmp	r3, r2
 80200a8:	db06      	blt.n	80200b8 <_fputs_r+0xac>
 80200aa:	290a      	cmp	r1, #10
 80200ac:	d004      	beq.n	80200b8 <_fputs_r+0xac>
 80200ae:	6823      	ldr	r3, [r4, #0]
 80200b0:	1c5a      	adds	r2, r3, #1
 80200b2:	6022      	str	r2, [r4, #0]
 80200b4:	7019      	strb	r1, [r3, #0]
 80200b6:	e7c5      	b.n	8020044 <_fputs_r+0x38>
 80200b8:	4622      	mov	r2, r4
 80200ba:	4628      	mov	r0, r5
 80200bc:	f001 fe1a 	bl	8021cf4 <__swbuf_r>
 80200c0:	3001      	adds	r0, #1
 80200c2:	d1bf      	bne.n	8020044 <_fputs_r+0x38>
 80200c4:	e7dd      	b.n	8020082 <_fputs_r+0x76>
 80200c6:	460d      	mov	r5, r1
 80200c8:	e7c9      	b.n	802005e <_fputs_r+0x52>
 80200ca:	bf00      	nop
 80200cc:	08029518 	.word	0x08029518
 80200d0:	08029538 	.word	0x08029538
 80200d4:	080294f8 	.word	0x080294f8

080200d8 <fputs>:
 80200d8:	4b02      	ldr	r3, [pc, #8]	; (80200e4 <fputs+0xc>)
 80200da:	460a      	mov	r2, r1
 80200dc:	4601      	mov	r1, r0
 80200de:	6818      	ldr	r0, [r3, #0]
 80200e0:	f7ff bf94 	b.w	802000c <_fputs_r>
 80200e4:	20000108 	.word	0x20000108

080200e8 <_fseek_r>:
 80200e8:	f000 b800 	b.w	80200ec <_fseeko_r>

080200ec <_fseeko_r>:
 80200ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80200f0:	460c      	mov	r4, r1
 80200f2:	4617      	mov	r7, r2
 80200f4:	461e      	mov	r6, r3
 80200f6:	4605      	mov	r5, r0
 80200f8:	b118      	cbz	r0, 8020102 <_fseeko_r+0x16>
 80200fa:	6983      	ldr	r3, [r0, #24]
 80200fc:	b90b      	cbnz	r3, 8020102 <_fseeko_r+0x16>
 80200fe:	f7ff feab 	bl	801fe58 <__sinit>
 8020102:	4b44      	ldr	r3, [pc, #272]	; (8020214 <_fseeko_r+0x128>)
 8020104:	429c      	cmp	r4, r3
 8020106:	d122      	bne.n	802014e <_fseeko_r+0x62>
 8020108:	686c      	ldr	r4, [r5, #4]
 802010a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802010c:	07d9      	lsls	r1, r3, #31
 802010e:	d405      	bmi.n	802011c <_fseeko_r+0x30>
 8020110:	89a3      	ldrh	r3, [r4, #12]
 8020112:	059a      	lsls	r2, r3, #22
 8020114:	d402      	bmi.n	802011c <_fseeko_r+0x30>
 8020116:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020118:	f000 fa51 	bl	80205be <__retarget_lock_acquire_recursive>
 802011c:	89a3      	ldrh	r3, [r4, #12]
 802011e:	f403 7384 	and.w	r3, r3, #264	; 0x108
 8020122:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8020126:	d103      	bne.n	8020130 <_fseeko_r+0x44>
 8020128:	4621      	mov	r1, r4
 802012a:	4628      	mov	r0, r5
 802012c:	f7ff fdee 	bl	801fd0c <_fflush_r>
 8020130:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 8020134:	f1b8 0f00 	cmp.w	r8, #0
 8020138:	d113      	bne.n	8020162 <_fseeko_r+0x76>
 802013a:	231d      	movs	r3, #29
 802013c:	602b      	str	r3, [r5, #0]
 802013e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020140:	07d9      	lsls	r1, r3, #31
 8020142:	d55d      	bpl.n	8020200 <_fseeko_r+0x114>
 8020144:	f04f 36ff 	mov.w	r6, #4294967295
 8020148:	4630      	mov	r0, r6
 802014a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802014e:	4b32      	ldr	r3, [pc, #200]	; (8020218 <_fseeko_r+0x12c>)
 8020150:	429c      	cmp	r4, r3
 8020152:	d101      	bne.n	8020158 <_fseeko_r+0x6c>
 8020154:	68ac      	ldr	r4, [r5, #8]
 8020156:	e7d8      	b.n	802010a <_fseeko_r+0x1e>
 8020158:	4b30      	ldr	r3, [pc, #192]	; (802021c <_fseeko_r+0x130>)
 802015a:	429c      	cmp	r4, r3
 802015c:	bf08      	it	eq
 802015e:	68ec      	ldreq	r4, [r5, #12]
 8020160:	e7d3      	b.n	802010a <_fseeko_r+0x1e>
 8020162:	2e01      	cmp	r6, #1
 8020164:	d036      	beq.n	80201d4 <_fseeko_r+0xe8>
 8020166:	f036 0302 	bics.w	r3, r6, #2
 802016a:	d147      	bne.n	80201fc <_fseeko_r+0x110>
 802016c:	6923      	ldr	r3, [r4, #16]
 802016e:	b91b      	cbnz	r3, 8020178 <_fseeko_r+0x8c>
 8020170:	4621      	mov	r1, r4
 8020172:	4628      	mov	r0, r5
 8020174:	f000 fa4a 	bl	802060c <__smakebuf_r>
 8020178:	4621      	mov	r1, r4
 802017a:	4628      	mov	r0, r5
 802017c:	f7ff fdc6 	bl	801fd0c <_fflush_r>
 8020180:	2800      	cmp	r0, #0
 8020182:	d1dc      	bne.n	802013e <_fseeko_r+0x52>
 8020184:	6a21      	ldr	r1, [r4, #32]
 8020186:	4633      	mov	r3, r6
 8020188:	463a      	mov	r2, r7
 802018a:	4628      	mov	r0, r5
 802018c:	47c0      	blx	r8
 802018e:	3001      	adds	r0, #1
 8020190:	d0d5      	beq.n	802013e <_fseeko_r+0x52>
 8020192:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020194:	b141      	cbz	r1, 80201a8 <_fseeko_r+0xbc>
 8020196:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802019a:	4299      	cmp	r1, r3
 802019c:	d002      	beq.n	80201a4 <_fseeko_r+0xb8>
 802019e:	4628      	mov	r0, r5
 80201a0:	f000 faaa 	bl	80206f8 <_free_r>
 80201a4:	2300      	movs	r3, #0
 80201a6:	6363      	str	r3, [r4, #52]	; 0x34
 80201a8:	6923      	ldr	r3, [r4, #16]
 80201aa:	6023      	str	r3, [r4, #0]
 80201ac:	89a3      	ldrh	r3, [r4, #12]
 80201ae:	2500      	movs	r5, #0
 80201b0:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 80201b4:	6065      	str	r5, [r4, #4]
 80201b6:	81a3      	strh	r3, [r4, #12]
 80201b8:	2208      	movs	r2, #8
 80201ba:	4629      	mov	r1, r5
 80201bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80201c0:	f000 fa82 	bl	80206c8 <memset>
 80201c4:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80201c6:	f016 0601 	ands.w	r6, r6, #1
 80201ca:	d120      	bne.n	802020e <_fseeko_r+0x122>
 80201cc:	89a3      	ldrh	r3, [r4, #12]
 80201ce:	059b      	lsls	r3, r3, #22
 80201d0:	d4ba      	bmi.n	8020148 <_fseeko_r+0x5c>
 80201d2:	e00c      	b.n	80201ee <_fseeko_r+0x102>
 80201d4:	4621      	mov	r1, r4
 80201d6:	4628      	mov	r0, r5
 80201d8:	f000 f822 	bl	8020220 <_ftello_r>
 80201dc:	1c43      	adds	r3, r0, #1
 80201de:	4606      	mov	r6, r0
 80201e0:	d109      	bne.n	80201f6 <_fseeko_r+0x10a>
 80201e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80201e4:	07dd      	lsls	r5, r3, #31
 80201e6:	d4ad      	bmi.n	8020144 <_fseeko_r+0x58>
 80201e8:	89a3      	ldrh	r3, [r4, #12]
 80201ea:	0598      	lsls	r0, r3, #22
 80201ec:	d4aa      	bmi.n	8020144 <_fseeko_r+0x58>
 80201ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80201f0:	f000 f9e7 	bl	80205c2 <__retarget_lock_release_recursive>
 80201f4:	e7a8      	b.n	8020148 <_fseeko_r+0x5c>
 80201f6:	4407      	add	r7, r0
 80201f8:	2600      	movs	r6, #0
 80201fa:	e7b7      	b.n	802016c <_fseeko_r+0x80>
 80201fc:	2316      	movs	r3, #22
 80201fe:	e79d      	b.n	802013c <_fseeko_r+0x50>
 8020200:	89a3      	ldrh	r3, [r4, #12]
 8020202:	059a      	lsls	r2, r3, #22
 8020204:	d49e      	bmi.n	8020144 <_fseeko_r+0x58>
 8020206:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020208:	f000 f9db 	bl	80205c2 <__retarget_lock_release_recursive>
 802020c:	e79a      	b.n	8020144 <_fseeko_r+0x58>
 802020e:	462e      	mov	r6, r5
 8020210:	e79a      	b.n	8020148 <_fseeko_r+0x5c>
 8020212:	bf00      	nop
 8020214:	08029518 	.word	0x08029518
 8020218:	08029538 	.word	0x08029538
 802021c:	080294f8 	.word	0x080294f8

08020220 <_ftello_r>:
 8020220:	b570      	push	{r4, r5, r6, lr}
 8020222:	460c      	mov	r4, r1
 8020224:	4605      	mov	r5, r0
 8020226:	b118      	cbz	r0, 8020230 <_ftello_r+0x10>
 8020228:	6983      	ldr	r3, [r0, #24]
 802022a:	b90b      	cbnz	r3, 8020230 <_ftello_r+0x10>
 802022c:	f7ff fe14 	bl	801fe58 <__sinit>
 8020230:	4b32      	ldr	r3, [pc, #200]	; (80202fc <_ftello_r+0xdc>)
 8020232:	429c      	cmp	r4, r3
 8020234:	d114      	bne.n	8020260 <_ftello_r+0x40>
 8020236:	686c      	ldr	r4, [r5, #4]
 8020238:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802023a:	07da      	lsls	r2, r3, #31
 802023c:	d405      	bmi.n	802024a <_ftello_r+0x2a>
 802023e:	89a3      	ldrh	r3, [r4, #12]
 8020240:	059b      	lsls	r3, r3, #22
 8020242:	d402      	bmi.n	802024a <_ftello_r+0x2a>
 8020244:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020246:	f000 f9ba 	bl	80205be <__retarget_lock_acquire_recursive>
 802024a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802024c:	b9ce      	cbnz	r6, 8020282 <_ftello_r+0x62>
 802024e:	231d      	movs	r3, #29
 8020250:	602b      	str	r3, [r5, #0]
 8020252:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020254:	07de      	lsls	r6, r3, #31
 8020256:	d50d      	bpl.n	8020274 <_ftello_r+0x54>
 8020258:	f04f 35ff 	mov.w	r5, #4294967295
 802025c:	4628      	mov	r0, r5
 802025e:	bd70      	pop	{r4, r5, r6, pc}
 8020260:	4b27      	ldr	r3, [pc, #156]	; (8020300 <_ftello_r+0xe0>)
 8020262:	429c      	cmp	r4, r3
 8020264:	d101      	bne.n	802026a <_ftello_r+0x4a>
 8020266:	68ac      	ldr	r4, [r5, #8]
 8020268:	e7e6      	b.n	8020238 <_ftello_r+0x18>
 802026a:	4b26      	ldr	r3, [pc, #152]	; (8020304 <_ftello_r+0xe4>)
 802026c:	429c      	cmp	r4, r3
 802026e:	bf08      	it	eq
 8020270:	68ec      	ldreq	r4, [r5, #12]
 8020272:	e7e1      	b.n	8020238 <_ftello_r+0x18>
 8020274:	89a3      	ldrh	r3, [r4, #12]
 8020276:	059d      	lsls	r5, r3, #22
 8020278:	d4ee      	bmi.n	8020258 <_ftello_r+0x38>
 802027a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802027c:	f000 f9a1 	bl	80205c2 <__retarget_lock_release_recursive>
 8020280:	e7ea      	b.n	8020258 <_ftello_r+0x38>
 8020282:	89a2      	ldrh	r2, [r4, #12]
 8020284:	f002 030c 	and.w	r3, r2, #12
 8020288:	2b08      	cmp	r3, #8
 802028a:	d119      	bne.n	80202c0 <_ftello_r+0xa0>
 802028c:	6823      	ldr	r3, [r4, #0]
 802028e:	b1bb      	cbz	r3, 80202c0 <_ftello_r+0xa0>
 8020290:	6921      	ldr	r1, [r4, #16]
 8020292:	1a5b      	subs	r3, r3, r1
 8020294:	2b00      	cmp	r3, #0
 8020296:	dd13      	ble.n	80202c0 <_ftello_r+0xa0>
 8020298:	05d0      	lsls	r0, r2, #23
 802029a:	d511      	bpl.n	80202c0 <_ftello_r+0xa0>
 802029c:	2302      	movs	r3, #2
 802029e:	2200      	movs	r2, #0
 80202a0:	6a21      	ldr	r1, [r4, #32]
 80202a2:	4628      	mov	r0, r5
 80202a4:	47b0      	blx	r6
 80202a6:	1c41      	adds	r1, r0, #1
 80202a8:	4605      	mov	r5, r0
 80202aa:	d10d      	bne.n	80202c8 <_ftello_r+0xa8>
 80202ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80202ae:	07da      	lsls	r2, r3, #31
 80202b0:	d4d2      	bmi.n	8020258 <_ftello_r+0x38>
 80202b2:	89a3      	ldrh	r3, [r4, #12]
 80202b4:	059b      	lsls	r3, r3, #22
 80202b6:	d4cf      	bmi.n	8020258 <_ftello_r+0x38>
 80202b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80202ba:	f000 f982 	bl	80205c2 <__retarget_lock_release_recursive>
 80202be:	e7cd      	b.n	802025c <_ftello_r+0x3c>
 80202c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80202c4:	d00f      	beq.n	80202e6 <_ftello_r+0xc6>
 80202c6:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80202c8:	89a2      	ldrh	r2, [r4, #12]
 80202ca:	0756      	lsls	r6, r2, #29
 80202cc:	d50d      	bpl.n	80202ea <_ftello_r+0xca>
 80202ce:	6863      	ldr	r3, [r4, #4]
 80202d0:	1aed      	subs	r5, r5, r3
 80202d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80202d4:	b10b      	cbz	r3, 80202da <_ftello_r+0xba>
 80202d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80202d8:	1aed      	subs	r5, r5, r3
 80202da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80202dc:	07d9      	lsls	r1, r3, #31
 80202de:	d4bd      	bmi.n	802025c <_ftello_r+0x3c>
 80202e0:	0593      	lsls	r3, r2, #22
 80202e2:	d4bb      	bmi.n	802025c <_ftello_r+0x3c>
 80202e4:	e7e8      	b.n	80202b8 <_ftello_r+0x98>
 80202e6:	2301      	movs	r3, #1
 80202e8:	e7da      	b.n	80202a0 <_ftello_r+0x80>
 80202ea:	0710      	lsls	r0, r2, #28
 80202ec:	d5f5      	bpl.n	80202da <_ftello_r+0xba>
 80202ee:	6823      	ldr	r3, [r4, #0]
 80202f0:	2b00      	cmp	r3, #0
 80202f2:	d0f2      	beq.n	80202da <_ftello_r+0xba>
 80202f4:	6921      	ldr	r1, [r4, #16]
 80202f6:	1a5b      	subs	r3, r3, r1
 80202f8:	441d      	add	r5, r3
 80202fa:	e7ee      	b.n	80202da <_ftello_r+0xba>
 80202fc:	08029518 	.word	0x08029518
 8020300:	08029538 	.word	0x08029538
 8020304:	080294f8 	.word	0x080294f8

08020308 <_fwalk_reent>:
 8020308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802030c:	4606      	mov	r6, r0
 802030e:	4688      	mov	r8, r1
 8020310:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8020314:	2700      	movs	r7, #0
 8020316:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802031a:	f1b9 0901 	subs.w	r9, r9, #1
 802031e:	d505      	bpl.n	802032c <_fwalk_reent+0x24>
 8020320:	6824      	ldr	r4, [r4, #0]
 8020322:	2c00      	cmp	r4, #0
 8020324:	d1f7      	bne.n	8020316 <_fwalk_reent+0xe>
 8020326:	4638      	mov	r0, r7
 8020328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802032c:	89ab      	ldrh	r3, [r5, #12]
 802032e:	2b01      	cmp	r3, #1
 8020330:	d907      	bls.n	8020342 <_fwalk_reent+0x3a>
 8020332:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020336:	3301      	adds	r3, #1
 8020338:	d003      	beq.n	8020342 <_fwalk_reent+0x3a>
 802033a:	4629      	mov	r1, r5
 802033c:	4630      	mov	r0, r6
 802033e:	47c0      	blx	r8
 8020340:	4307      	orrs	r7, r0
 8020342:	3568      	adds	r5, #104	; 0x68
 8020344:	e7e9      	b.n	802031a <_fwalk_reent+0x12>
	...

08020348 <__libc_init_array>:
 8020348:	b570      	push	{r4, r5, r6, lr}
 802034a:	4d0d      	ldr	r5, [pc, #52]	; (8020380 <__libc_init_array+0x38>)
 802034c:	4c0d      	ldr	r4, [pc, #52]	; (8020384 <__libc_init_array+0x3c>)
 802034e:	1b64      	subs	r4, r4, r5
 8020350:	10a4      	asrs	r4, r4, #2
 8020352:	2600      	movs	r6, #0
 8020354:	42a6      	cmp	r6, r4
 8020356:	d109      	bne.n	802036c <__libc_init_array+0x24>
 8020358:	4d0b      	ldr	r5, [pc, #44]	; (8020388 <__libc_init_array+0x40>)
 802035a:	4c0c      	ldr	r4, [pc, #48]	; (802038c <__libc_init_array+0x44>)
 802035c:	f003 f8d6 	bl	802350c <_init>
 8020360:	1b64      	subs	r4, r4, r5
 8020362:	10a4      	asrs	r4, r4, #2
 8020364:	2600      	movs	r6, #0
 8020366:	42a6      	cmp	r6, r4
 8020368:	d105      	bne.n	8020376 <__libc_init_array+0x2e>
 802036a:	bd70      	pop	{r4, r5, r6, pc}
 802036c:	f855 3b04 	ldr.w	r3, [r5], #4
 8020370:	4798      	blx	r3
 8020372:	3601      	adds	r6, #1
 8020374:	e7ee      	b.n	8020354 <__libc_init_array+0xc>
 8020376:	f855 3b04 	ldr.w	r3, [r5], #4
 802037a:	4798      	blx	r3
 802037c:	3601      	adds	r6, #1
 802037e:	e7f2      	b.n	8020366 <__libc_init_array+0x1e>
 8020380:	08029af0 	.word	0x08029af0
 8020384:	08029af0 	.word	0x08029af0
 8020388:	08029af0 	.word	0x08029af0
 802038c:	08029b00 	.word	0x08029b00

08020390 <localtime>:
 8020390:	b538      	push	{r3, r4, r5, lr}
 8020392:	4b0b      	ldr	r3, [pc, #44]	; (80203c0 <localtime+0x30>)
 8020394:	681d      	ldr	r5, [r3, #0]
 8020396:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8020398:	4604      	mov	r4, r0
 802039a:	b953      	cbnz	r3, 80203b2 <localtime+0x22>
 802039c:	2024      	movs	r0, #36	; 0x24
 802039e:	f000 f975 	bl	802068c <malloc>
 80203a2:	4602      	mov	r2, r0
 80203a4:	63e8      	str	r0, [r5, #60]	; 0x3c
 80203a6:	b920      	cbnz	r0, 80203b2 <localtime+0x22>
 80203a8:	4b06      	ldr	r3, [pc, #24]	; (80203c4 <localtime+0x34>)
 80203aa:	4807      	ldr	r0, [pc, #28]	; (80203c8 <localtime+0x38>)
 80203ac:	2132      	movs	r1, #50	; 0x32
 80203ae:	f001 fdd9 	bl	8021f64 <__assert_func>
 80203b2:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80203b4:	4620      	mov	r0, r4
 80203b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80203ba:	f000 b807 	b.w	80203cc <localtime_r>
 80203be:	bf00      	nop
 80203c0:	20000108 	.word	0x20000108
 80203c4:	0802955c 	.word	0x0802955c
 80203c8:	08029573 	.word	0x08029573

080203cc <localtime_r>:
 80203cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80203d0:	4607      	mov	r7, r0
 80203d2:	9101      	str	r1, [sp, #4]
 80203d4:	f001 fe90 	bl	80220f8 <__gettzinfo>
 80203d8:	9901      	ldr	r1, [sp, #4]
 80203da:	4680      	mov	r8, r0
 80203dc:	4638      	mov	r0, r7
 80203de:	f001 fe8f 	bl	8022100 <gmtime_r>
 80203e2:	6943      	ldr	r3, [r0, #20]
 80203e4:	079a      	lsls	r2, r3, #30
 80203e6:	4604      	mov	r4, r0
 80203e8:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 80203ec:	d105      	bne.n	80203fa <localtime_r+0x2e>
 80203ee:	2264      	movs	r2, #100	; 0x64
 80203f0:	fb96 f3f2 	sdiv	r3, r6, r2
 80203f4:	fb02 6313 	mls	r3, r2, r3, r6
 80203f8:	bb7b      	cbnz	r3, 802045a <localtime_r+0x8e>
 80203fa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80203fe:	fb96 f5f3 	sdiv	r5, r6, r3
 8020402:	fb03 6515 	mls	r5, r3, r5, r6
 8020406:	fab5 f585 	clz	r5, r5
 802040a:	096d      	lsrs	r5, r5, #5
 802040c:	4b68      	ldr	r3, [pc, #416]	; (80205b0 <localtime_r+0x1e4>)
 802040e:	2230      	movs	r2, #48	; 0x30
 8020410:	fb02 3505 	mla	r5, r2, r5, r3
 8020414:	f001 faa6 	bl	8021964 <__tz_lock>
 8020418:	f001 fab0 	bl	802197c <_tzset_unlocked>
 802041c:	4b65      	ldr	r3, [pc, #404]	; (80205b4 <localtime_r+0x1e8>)
 802041e:	681b      	ldr	r3, [r3, #0]
 8020420:	b353      	cbz	r3, 8020478 <localtime_r+0xac>
 8020422:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8020426:	42b3      	cmp	r3, r6
 8020428:	d119      	bne.n	802045e <localtime_r+0x92>
 802042a:	f8d8 1000 	ldr.w	r1, [r8]
 802042e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8020432:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 8020436:	b9d1      	cbnz	r1, 802046e <localtime_r+0xa2>
 8020438:	4296      	cmp	r6, r2
 802043a:	eb77 0303 	sbcs.w	r3, r7, r3
 802043e:	da23      	bge.n	8020488 <localtime_r+0xbc>
 8020440:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8020444:	4296      	cmp	r6, r2
 8020446:	eb77 0303 	sbcs.w	r3, r7, r3
 802044a:	bfb4      	ite	lt
 802044c:	2301      	movlt	r3, #1
 802044e:	2300      	movge	r3, #0
 8020450:	6223      	str	r3, [r4, #32]
 8020452:	db1b      	blt.n	802048c <localtime_r+0xc0>
 8020454:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 8020458:	e01a      	b.n	8020490 <localtime_r+0xc4>
 802045a:	2501      	movs	r5, #1
 802045c:	e7d6      	b.n	802040c <localtime_r+0x40>
 802045e:	4630      	mov	r0, r6
 8020460:	f001 f9d8 	bl	8021814 <__tzcalc_limits>
 8020464:	2800      	cmp	r0, #0
 8020466:	d1e0      	bne.n	802042a <localtime_r+0x5e>
 8020468:	f04f 33ff 	mov.w	r3, #4294967295
 802046c:	e004      	b.n	8020478 <localtime_r+0xac>
 802046e:	4296      	cmp	r6, r2
 8020470:	eb77 0303 	sbcs.w	r3, r7, r3
 8020474:	da02      	bge.n	802047c <localtime_r+0xb0>
 8020476:	2300      	movs	r3, #0
 8020478:	6223      	str	r3, [r4, #32]
 802047a:	e7eb      	b.n	8020454 <localtime_r+0x88>
 802047c:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8020480:	4296      	cmp	r6, r2
 8020482:	eb77 0303 	sbcs.w	r3, r7, r3
 8020486:	daf6      	bge.n	8020476 <localtime_r+0xaa>
 8020488:	2301      	movs	r3, #1
 802048a:	6223      	str	r3, [r4, #32]
 802048c:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8020490:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8020494:	203c      	movs	r0, #60	; 0x3c
 8020496:	fb91 f6f3 	sdiv	r6, r1, r3
 802049a:	fb03 1316 	mls	r3, r3, r6, r1
 802049e:	6861      	ldr	r1, [r4, #4]
 80204a0:	fb93 f2f0 	sdiv	r2, r3, r0
 80204a4:	fb00 3012 	mls	r0, r0, r2, r3
 80204a8:	6823      	ldr	r3, [r4, #0]
 80204aa:	1a89      	subs	r1, r1, r2
 80204ac:	68a2      	ldr	r2, [r4, #8]
 80204ae:	6061      	str	r1, [r4, #4]
 80204b0:	1a1b      	subs	r3, r3, r0
 80204b2:	1b92      	subs	r2, r2, r6
 80204b4:	2b3b      	cmp	r3, #59	; 0x3b
 80204b6:	6023      	str	r3, [r4, #0]
 80204b8:	60a2      	str	r2, [r4, #8]
 80204ba:	dd35      	ble.n	8020528 <localtime_r+0x15c>
 80204bc:	3101      	adds	r1, #1
 80204be:	6061      	str	r1, [r4, #4]
 80204c0:	3b3c      	subs	r3, #60	; 0x3c
 80204c2:	6023      	str	r3, [r4, #0]
 80204c4:	6863      	ldr	r3, [r4, #4]
 80204c6:	2b3b      	cmp	r3, #59	; 0x3b
 80204c8:	dd34      	ble.n	8020534 <localtime_r+0x168>
 80204ca:	3201      	adds	r2, #1
 80204cc:	60a2      	str	r2, [r4, #8]
 80204ce:	3b3c      	subs	r3, #60	; 0x3c
 80204d0:	6063      	str	r3, [r4, #4]
 80204d2:	68a3      	ldr	r3, [r4, #8]
 80204d4:	2b17      	cmp	r3, #23
 80204d6:	dd33      	ble.n	8020540 <localtime_r+0x174>
 80204d8:	69e2      	ldr	r2, [r4, #28]
 80204da:	3201      	adds	r2, #1
 80204dc:	61e2      	str	r2, [r4, #28]
 80204de:	69a2      	ldr	r2, [r4, #24]
 80204e0:	3201      	adds	r2, #1
 80204e2:	2a06      	cmp	r2, #6
 80204e4:	bfc8      	it	gt
 80204e6:	2200      	movgt	r2, #0
 80204e8:	61a2      	str	r2, [r4, #24]
 80204ea:	68e2      	ldr	r2, [r4, #12]
 80204ec:	3b18      	subs	r3, #24
 80204ee:	3201      	adds	r2, #1
 80204f0:	60a3      	str	r3, [r4, #8]
 80204f2:	6923      	ldr	r3, [r4, #16]
 80204f4:	60e2      	str	r2, [r4, #12]
 80204f6:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80204fa:	428a      	cmp	r2, r1
 80204fc:	dd0e      	ble.n	802051c <localtime_r+0x150>
 80204fe:	2b0b      	cmp	r3, #11
 8020500:	eba2 0201 	sub.w	r2, r2, r1
 8020504:	60e2      	str	r2, [r4, #12]
 8020506:	f103 0201 	add.w	r2, r3, #1
 802050a:	bf09      	itett	eq
 802050c:	6963      	ldreq	r3, [r4, #20]
 802050e:	6122      	strne	r2, [r4, #16]
 8020510:	2200      	moveq	r2, #0
 8020512:	3301      	addeq	r3, #1
 8020514:	bf02      	ittt	eq
 8020516:	6122      	streq	r2, [r4, #16]
 8020518:	6163      	streq	r3, [r4, #20]
 802051a:	61e2      	streq	r2, [r4, #28]
 802051c:	f001 fa28 	bl	8021970 <__tz_unlock>
 8020520:	4620      	mov	r0, r4
 8020522:	b002      	add	sp, #8
 8020524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020528:	2b00      	cmp	r3, #0
 802052a:	dacb      	bge.n	80204c4 <localtime_r+0xf8>
 802052c:	3901      	subs	r1, #1
 802052e:	6061      	str	r1, [r4, #4]
 8020530:	333c      	adds	r3, #60	; 0x3c
 8020532:	e7c6      	b.n	80204c2 <localtime_r+0xf6>
 8020534:	2b00      	cmp	r3, #0
 8020536:	dacc      	bge.n	80204d2 <localtime_r+0x106>
 8020538:	3a01      	subs	r2, #1
 802053a:	60a2      	str	r2, [r4, #8]
 802053c:	333c      	adds	r3, #60	; 0x3c
 802053e:	e7c7      	b.n	80204d0 <localtime_r+0x104>
 8020540:	2b00      	cmp	r3, #0
 8020542:	daeb      	bge.n	802051c <localtime_r+0x150>
 8020544:	69e2      	ldr	r2, [r4, #28]
 8020546:	3a01      	subs	r2, #1
 8020548:	61e2      	str	r2, [r4, #28]
 802054a:	69a2      	ldr	r2, [r4, #24]
 802054c:	3a01      	subs	r2, #1
 802054e:	bf48      	it	mi
 8020550:	2206      	movmi	r2, #6
 8020552:	61a2      	str	r2, [r4, #24]
 8020554:	68e2      	ldr	r2, [r4, #12]
 8020556:	3318      	adds	r3, #24
 8020558:	3a01      	subs	r2, #1
 802055a:	60e2      	str	r2, [r4, #12]
 802055c:	60a3      	str	r3, [r4, #8]
 802055e:	2a00      	cmp	r2, #0
 8020560:	d1dc      	bne.n	802051c <localtime_r+0x150>
 8020562:	6923      	ldr	r3, [r4, #16]
 8020564:	3b01      	subs	r3, #1
 8020566:	d405      	bmi.n	8020574 <localtime_r+0x1a8>
 8020568:	6123      	str	r3, [r4, #16]
 802056a:	6923      	ldr	r3, [r4, #16]
 802056c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8020570:	60e3      	str	r3, [r4, #12]
 8020572:	e7d3      	b.n	802051c <localtime_r+0x150>
 8020574:	230b      	movs	r3, #11
 8020576:	6123      	str	r3, [r4, #16]
 8020578:	6963      	ldr	r3, [r4, #20]
 802057a:	1e5a      	subs	r2, r3, #1
 802057c:	6162      	str	r2, [r4, #20]
 802057e:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 8020582:	0793      	lsls	r3, r2, #30
 8020584:	d105      	bne.n	8020592 <localtime_r+0x1c6>
 8020586:	2164      	movs	r1, #100	; 0x64
 8020588:	fb92 f3f1 	sdiv	r3, r2, r1
 802058c:	fb01 2313 	mls	r3, r1, r3, r2
 8020590:	b963      	cbnz	r3, 80205ac <localtime_r+0x1e0>
 8020592:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8020596:	fb92 f3f1 	sdiv	r3, r2, r1
 802059a:	fb01 2313 	mls	r3, r1, r3, r2
 802059e:	fab3 f383 	clz	r3, r3
 80205a2:	095b      	lsrs	r3, r3, #5
 80205a4:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80205a8:	61e3      	str	r3, [r4, #28]
 80205aa:	e7de      	b.n	802056a <localtime_r+0x19e>
 80205ac:	2301      	movs	r3, #1
 80205ae:	e7f9      	b.n	80205a4 <localtime_r+0x1d8>
 80205b0:	080295d4 	.word	0x080295d4
 80205b4:	20000eec 	.word	0x20000eec

080205b8 <__retarget_lock_init_recursive>:
 80205b8:	4770      	bx	lr

080205ba <__retarget_lock_close_recursive>:
 80205ba:	4770      	bx	lr

080205bc <__retarget_lock_acquire>:
 80205bc:	4770      	bx	lr

080205be <__retarget_lock_acquire_recursive>:
 80205be:	4770      	bx	lr

080205c0 <__retarget_lock_release>:
 80205c0:	4770      	bx	lr

080205c2 <__retarget_lock_release_recursive>:
 80205c2:	4770      	bx	lr

080205c4 <__swhatbuf_r>:
 80205c4:	b570      	push	{r4, r5, r6, lr}
 80205c6:	460e      	mov	r6, r1
 80205c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80205cc:	2900      	cmp	r1, #0
 80205ce:	b096      	sub	sp, #88	; 0x58
 80205d0:	4614      	mov	r4, r2
 80205d2:	461d      	mov	r5, r3
 80205d4:	da07      	bge.n	80205e6 <__swhatbuf_r+0x22>
 80205d6:	2300      	movs	r3, #0
 80205d8:	602b      	str	r3, [r5, #0]
 80205da:	89b3      	ldrh	r3, [r6, #12]
 80205dc:	061a      	lsls	r2, r3, #24
 80205de:	d410      	bmi.n	8020602 <__swhatbuf_r+0x3e>
 80205e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80205e4:	e00e      	b.n	8020604 <__swhatbuf_r+0x40>
 80205e6:	466a      	mov	r2, sp
 80205e8:	f001 fd32 	bl	8022050 <_fstat_r>
 80205ec:	2800      	cmp	r0, #0
 80205ee:	dbf2      	blt.n	80205d6 <__swhatbuf_r+0x12>
 80205f0:	9a01      	ldr	r2, [sp, #4]
 80205f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80205f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80205fa:	425a      	negs	r2, r3
 80205fc:	415a      	adcs	r2, r3
 80205fe:	602a      	str	r2, [r5, #0]
 8020600:	e7ee      	b.n	80205e0 <__swhatbuf_r+0x1c>
 8020602:	2340      	movs	r3, #64	; 0x40
 8020604:	2000      	movs	r0, #0
 8020606:	6023      	str	r3, [r4, #0]
 8020608:	b016      	add	sp, #88	; 0x58
 802060a:	bd70      	pop	{r4, r5, r6, pc}

0802060c <__smakebuf_r>:
 802060c:	898b      	ldrh	r3, [r1, #12]
 802060e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020610:	079d      	lsls	r5, r3, #30
 8020612:	4606      	mov	r6, r0
 8020614:	460c      	mov	r4, r1
 8020616:	d507      	bpl.n	8020628 <__smakebuf_r+0x1c>
 8020618:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802061c:	6023      	str	r3, [r4, #0]
 802061e:	6123      	str	r3, [r4, #16]
 8020620:	2301      	movs	r3, #1
 8020622:	6163      	str	r3, [r4, #20]
 8020624:	b002      	add	sp, #8
 8020626:	bd70      	pop	{r4, r5, r6, pc}
 8020628:	ab01      	add	r3, sp, #4
 802062a:	466a      	mov	r2, sp
 802062c:	f7ff ffca 	bl	80205c4 <__swhatbuf_r>
 8020630:	9900      	ldr	r1, [sp, #0]
 8020632:	4605      	mov	r5, r0
 8020634:	4630      	mov	r0, r6
 8020636:	f000 f8af 	bl	8020798 <_malloc_r>
 802063a:	b948      	cbnz	r0, 8020650 <__smakebuf_r+0x44>
 802063c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020640:	059a      	lsls	r2, r3, #22
 8020642:	d4ef      	bmi.n	8020624 <__smakebuf_r+0x18>
 8020644:	f023 0303 	bic.w	r3, r3, #3
 8020648:	f043 0302 	orr.w	r3, r3, #2
 802064c:	81a3      	strh	r3, [r4, #12]
 802064e:	e7e3      	b.n	8020618 <__smakebuf_r+0xc>
 8020650:	4b0d      	ldr	r3, [pc, #52]	; (8020688 <__smakebuf_r+0x7c>)
 8020652:	62b3      	str	r3, [r6, #40]	; 0x28
 8020654:	89a3      	ldrh	r3, [r4, #12]
 8020656:	6020      	str	r0, [r4, #0]
 8020658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802065c:	81a3      	strh	r3, [r4, #12]
 802065e:	9b00      	ldr	r3, [sp, #0]
 8020660:	6163      	str	r3, [r4, #20]
 8020662:	9b01      	ldr	r3, [sp, #4]
 8020664:	6120      	str	r0, [r4, #16]
 8020666:	b15b      	cbz	r3, 8020680 <__smakebuf_r+0x74>
 8020668:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802066c:	4630      	mov	r0, r6
 802066e:	f001 fdf7 	bl	8022260 <_isatty_r>
 8020672:	b128      	cbz	r0, 8020680 <__smakebuf_r+0x74>
 8020674:	89a3      	ldrh	r3, [r4, #12]
 8020676:	f023 0303 	bic.w	r3, r3, #3
 802067a:	f043 0301 	orr.w	r3, r3, #1
 802067e:	81a3      	strh	r3, [r4, #12]
 8020680:	89a0      	ldrh	r0, [r4, #12]
 8020682:	4305      	orrs	r5, r0
 8020684:	81a5      	strh	r5, [r4, #12]
 8020686:	e7cd      	b.n	8020624 <__smakebuf_r+0x18>
 8020688:	0801fdf1 	.word	0x0801fdf1

0802068c <malloc>:
 802068c:	4b02      	ldr	r3, [pc, #8]	; (8020698 <malloc+0xc>)
 802068e:	4601      	mov	r1, r0
 8020690:	6818      	ldr	r0, [r3, #0]
 8020692:	f000 b881 	b.w	8020798 <_malloc_r>
 8020696:	bf00      	nop
 8020698:	20000108 	.word	0x20000108

0802069c <free>:
 802069c:	4b02      	ldr	r3, [pc, #8]	; (80206a8 <free+0xc>)
 802069e:	4601      	mov	r1, r0
 80206a0:	6818      	ldr	r0, [r3, #0]
 80206a2:	f000 b829 	b.w	80206f8 <_free_r>
 80206a6:	bf00      	nop
 80206a8:	20000108 	.word	0x20000108

080206ac <memcpy>:
 80206ac:	440a      	add	r2, r1
 80206ae:	4291      	cmp	r1, r2
 80206b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80206b4:	d100      	bne.n	80206b8 <memcpy+0xc>
 80206b6:	4770      	bx	lr
 80206b8:	b510      	push	{r4, lr}
 80206ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80206be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80206c2:	4291      	cmp	r1, r2
 80206c4:	d1f9      	bne.n	80206ba <memcpy+0xe>
 80206c6:	bd10      	pop	{r4, pc}

080206c8 <memset>:
 80206c8:	4402      	add	r2, r0
 80206ca:	4603      	mov	r3, r0
 80206cc:	4293      	cmp	r3, r2
 80206ce:	d100      	bne.n	80206d2 <memset+0xa>
 80206d0:	4770      	bx	lr
 80206d2:	f803 1b01 	strb.w	r1, [r3], #1
 80206d6:	e7f9      	b.n	80206cc <memset+0x4>

080206d8 <_calloc_r>:
 80206d8:	b513      	push	{r0, r1, r4, lr}
 80206da:	434a      	muls	r2, r1
 80206dc:	4611      	mov	r1, r2
 80206de:	9201      	str	r2, [sp, #4]
 80206e0:	f000 f85a 	bl	8020798 <_malloc_r>
 80206e4:	4604      	mov	r4, r0
 80206e6:	b118      	cbz	r0, 80206f0 <_calloc_r+0x18>
 80206e8:	9a01      	ldr	r2, [sp, #4]
 80206ea:	2100      	movs	r1, #0
 80206ec:	f7ff ffec 	bl	80206c8 <memset>
 80206f0:	4620      	mov	r0, r4
 80206f2:	b002      	add	sp, #8
 80206f4:	bd10      	pop	{r4, pc}
	...

080206f8 <_free_r>:
 80206f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80206fa:	2900      	cmp	r1, #0
 80206fc:	d048      	beq.n	8020790 <_free_r+0x98>
 80206fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020702:	9001      	str	r0, [sp, #4]
 8020704:	2b00      	cmp	r3, #0
 8020706:	f1a1 0404 	sub.w	r4, r1, #4
 802070a:	bfb8      	it	lt
 802070c:	18e4      	addlt	r4, r4, r3
 802070e:	f001 fddf 	bl	80222d0 <__malloc_lock>
 8020712:	4a20      	ldr	r2, [pc, #128]	; (8020794 <_free_r+0x9c>)
 8020714:	9801      	ldr	r0, [sp, #4]
 8020716:	6813      	ldr	r3, [r2, #0]
 8020718:	4615      	mov	r5, r2
 802071a:	b933      	cbnz	r3, 802072a <_free_r+0x32>
 802071c:	6063      	str	r3, [r4, #4]
 802071e:	6014      	str	r4, [r2, #0]
 8020720:	b003      	add	sp, #12
 8020722:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020726:	f001 bdd9 	b.w	80222dc <__malloc_unlock>
 802072a:	42a3      	cmp	r3, r4
 802072c:	d90b      	bls.n	8020746 <_free_r+0x4e>
 802072e:	6821      	ldr	r1, [r4, #0]
 8020730:	1862      	adds	r2, r4, r1
 8020732:	4293      	cmp	r3, r2
 8020734:	bf04      	itt	eq
 8020736:	681a      	ldreq	r2, [r3, #0]
 8020738:	685b      	ldreq	r3, [r3, #4]
 802073a:	6063      	str	r3, [r4, #4]
 802073c:	bf04      	itt	eq
 802073e:	1852      	addeq	r2, r2, r1
 8020740:	6022      	streq	r2, [r4, #0]
 8020742:	602c      	str	r4, [r5, #0]
 8020744:	e7ec      	b.n	8020720 <_free_r+0x28>
 8020746:	461a      	mov	r2, r3
 8020748:	685b      	ldr	r3, [r3, #4]
 802074a:	b10b      	cbz	r3, 8020750 <_free_r+0x58>
 802074c:	42a3      	cmp	r3, r4
 802074e:	d9fa      	bls.n	8020746 <_free_r+0x4e>
 8020750:	6811      	ldr	r1, [r2, #0]
 8020752:	1855      	adds	r5, r2, r1
 8020754:	42a5      	cmp	r5, r4
 8020756:	d10b      	bne.n	8020770 <_free_r+0x78>
 8020758:	6824      	ldr	r4, [r4, #0]
 802075a:	4421      	add	r1, r4
 802075c:	1854      	adds	r4, r2, r1
 802075e:	42a3      	cmp	r3, r4
 8020760:	6011      	str	r1, [r2, #0]
 8020762:	d1dd      	bne.n	8020720 <_free_r+0x28>
 8020764:	681c      	ldr	r4, [r3, #0]
 8020766:	685b      	ldr	r3, [r3, #4]
 8020768:	6053      	str	r3, [r2, #4]
 802076a:	4421      	add	r1, r4
 802076c:	6011      	str	r1, [r2, #0]
 802076e:	e7d7      	b.n	8020720 <_free_r+0x28>
 8020770:	d902      	bls.n	8020778 <_free_r+0x80>
 8020772:	230c      	movs	r3, #12
 8020774:	6003      	str	r3, [r0, #0]
 8020776:	e7d3      	b.n	8020720 <_free_r+0x28>
 8020778:	6825      	ldr	r5, [r4, #0]
 802077a:	1961      	adds	r1, r4, r5
 802077c:	428b      	cmp	r3, r1
 802077e:	bf04      	itt	eq
 8020780:	6819      	ldreq	r1, [r3, #0]
 8020782:	685b      	ldreq	r3, [r3, #4]
 8020784:	6063      	str	r3, [r4, #4]
 8020786:	bf04      	itt	eq
 8020788:	1949      	addeq	r1, r1, r5
 802078a:	6021      	streq	r1, [r4, #0]
 802078c:	6054      	str	r4, [r2, #4]
 802078e:	e7c7      	b.n	8020720 <_free_r+0x28>
 8020790:	b003      	add	sp, #12
 8020792:	bd30      	pop	{r4, r5, pc}
 8020794:	20000ec8 	.word	0x20000ec8

08020798 <_malloc_r>:
 8020798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802079a:	1ccd      	adds	r5, r1, #3
 802079c:	f025 0503 	bic.w	r5, r5, #3
 80207a0:	3508      	adds	r5, #8
 80207a2:	2d0c      	cmp	r5, #12
 80207a4:	bf38      	it	cc
 80207a6:	250c      	movcc	r5, #12
 80207a8:	2d00      	cmp	r5, #0
 80207aa:	4606      	mov	r6, r0
 80207ac:	db01      	blt.n	80207b2 <_malloc_r+0x1a>
 80207ae:	42a9      	cmp	r1, r5
 80207b0:	d903      	bls.n	80207ba <_malloc_r+0x22>
 80207b2:	230c      	movs	r3, #12
 80207b4:	6033      	str	r3, [r6, #0]
 80207b6:	2000      	movs	r0, #0
 80207b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80207ba:	f001 fd89 	bl	80222d0 <__malloc_lock>
 80207be:	4921      	ldr	r1, [pc, #132]	; (8020844 <_malloc_r+0xac>)
 80207c0:	680a      	ldr	r2, [r1, #0]
 80207c2:	4614      	mov	r4, r2
 80207c4:	b99c      	cbnz	r4, 80207ee <_malloc_r+0x56>
 80207c6:	4f20      	ldr	r7, [pc, #128]	; (8020848 <_malloc_r+0xb0>)
 80207c8:	683b      	ldr	r3, [r7, #0]
 80207ca:	b923      	cbnz	r3, 80207d6 <_malloc_r+0x3e>
 80207cc:	4621      	mov	r1, r4
 80207ce:	4630      	mov	r0, r6
 80207d0:	f000 f8da 	bl	8020988 <_sbrk_r>
 80207d4:	6038      	str	r0, [r7, #0]
 80207d6:	4629      	mov	r1, r5
 80207d8:	4630      	mov	r0, r6
 80207da:	f000 f8d5 	bl	8020988 <_sbrk_r>
 80207de:	1c43      	adds	r3, r0, #1
 80207e0:	d123      	bne.n	802082a <_malloc_r+0x92>
 80207e2:	230c      	movs	r3, #12
 80207e4:	6033      	str	r3, [r6, #0]
 80207e6:	4630      	mov	r0, r6
 80207e8:	f001 fd78 	bl	80222dc <__malloc_unlock>
 80207ec:	e7e3      	b.n	80207b6 <_malloc_r+0x1e>
 80207ee:	6823      	ldr	r3, [r4, #0]
 80207f0:	1b5b      	subs	r3, r3, r5
 80207f2:	d417      	bmi.n	8020824 <_malloc_r+0x8c>
 80207f4:	2b0b      	cmp	r3, #11
 80207f6:	d903      	bls.n	8020800 <_malloc_r+0x68>
 80207f8:	6023      	str	r3, [r4, #0]
 80207fa:	441c      	add	r4, r3
 80207fc:	6025      	str	r5, [r4, #0]
 80207fe:	e004      	b.n	802080a <_malloc_r+0x72>
 8020800:	6863      	ldr	r3, [r4, #4]
 8020802:	42a2      	cmp	r2, r4
 8020804:	bf0c      	ite	eq
 8020806:	600b      	streq	r3, [r1, #0]
 8020808:	6053      	strne	r3, [r2, #4]
 802080a:	4630      	mov	r0, r6
 802080c:	f001 fd66 	bl	80222dc <__malloc_unlock>
 8020810:	f104 000b 	add.w	r0, r4, #11
 8020814:	1d23      	adds	r3, r4, #4
 8020816:	f020 0007 	bic.w	r0, r0, #7
 802081a:	1ac2      	subs	r2, r0, r3
 802081c:	d0cc      	beq.n	80207b8 <_malloc_r+0x20>
 802081e:	1a1b      	subs	r3, r3, r0
 8020820:	50a3      	str	r3, [r4, r2]
 8020822:	e7c9      	b.n	80207b8 <_malloc_r+0x20>
 8020824:	4622      	mov	r2, r4
 8020826:	6864      	ldr	r4, [r4, #4]
 8020828:	e7cc      	b.n	80207c4 <_malloc_r+0x2c>
 802082a:	1cc4      	adds	r4, r0, #3
 802082c:	f024 0403 	bic.w	r4, r4, #3
 8020830:	42a0      	cmp	r0, r4
 8020832:	d0e3      	beq.n	80207fc <_malloc_r+0x64>
 8020834:	1a21      	subs	r1, r4, r0
 8020836:	4630      	mov	r0, r6
 8020838:	f000 f8a6 	bl	8020988 <_sbrk_r>
 802083c:	3001      	adds	r0, #1
 802083e:	d1dd      	bne.n	80207fc <_malloc_r+0x64>
 8020840:	e7cf      	b.n	80207e2 <_malloc_r+0x4a>
 8020842:	bf00      	nop
 8020844:	20000ec8 	.word	0x20000ec8
 8020848:	20000ecc 	.word	0x20000ecc

0802084c <_open_r>:
 802084c:	b538      	push	{r3, r4, r5, lr}
 802084e:	4d07      	ldr	r5, [pc, #28]	; (802086c <_open_r+0x20>)
 8020850:	4604      	mov	r4, r0
 8020852:	4608      	mov	r0, r1
 8020854:	4611      	mov	r1, r2
 8020856:	2200      	movs	r2, #0
 8020858:	602a      	str	r2, [r5, #0]
 802085a:	461a      	mov	r2, r3
 802085c:	f7e0 fb08 	bl	8000e70 <_open>
 8020860:	1c43      	adds	r3, r0, #1
 8020862:	d102      	bne.n	802086a <_open_r+0x1e>
 8020864:	682b      	ldr	r3, [r5, #0]
 8020866:	b103      	cbz	r3, 802086a <_open_r+0x1e>
 8020868:	6023      	str	r3, [r4, #0]
 802086a:	bd38      	pop	{r3, r4, r5, pc}
 802086c:	20000f94 	.word	0x20000f94

08020870 <putchar>:
 8020870:	4b09      	ldr	r3, [pc, #36]	; (8020898 <putchar+0x28>)
 8020872:	b513      	push	{r0, r1, r4, lr}
 8020874:	681c      	ldr	r4, [r3, #0]
 8020876:	4601      	mov	r1, r0
 8020878:	b134      	cbz	r4, 8020888 <putchar+0x18>
 802087a:	69a3      	ldr	r3, [r4, #24]
 802087c:	b923      	cbnz	r3, 8020888 <putchar+0x18>
 802087e:	9001      	str	r0, [sp, #4]
 8020880:	4620      	mov	r0, r4
 8020882:	f7ff fae9 	bl	801fe58 <__sinit>
 8020886:	9901      	ldr	r1, [sp, #4]
 8020888:	68a2      	ldr	r2, [r4, #8]
 802088a:	4620      	mov	r0, r4
 802088c:	b002      	add	sp, #8
 802088e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020892:	f002 b999 	b.w	8022bc8 <_putc_r>
 8020896:	bf00      	nop
 8020898:	20000108 	.word	0x20000108

0802089c <srand>:
 802089c:	b538      	push	{r3, r4, r5, lr}
 802089e:	4b10      	ldr	r3, [pc, #64]	; (80208e0 <srand+0x44>)
 80208a0:	681d      	ldr	r5, [r3, #0]
 80208a2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80208a4:	4604      	mov	r4, r0
 80208a6:	b9b3      	cbnz	r3, 80208d6 <srand+0x3a>
 80208a8:	2018      	movs	r0, #24
 80208aa:	f7ff feef 	bl	802068c <malloc>
 80208ae:	4602      	mov	r2, r0
 80208b0:	63a8      	str	r0, [r5, #56]	; 0x38
 80208b2:	b920      	cbnz	r0, 80208be <srand+0x22>
 80208b4:	4b0b      	ldr	r3, [pc, #44]	; (80208e4 <srand+0x48>)
 80208b6:	480c      	ldr	r0, [pc, #48]	; (80208e8 <srand+0x4c>)
 80208b8:	2142      	movs	r1, #66	; 0x42
 80208ba:	f001 fb53 	bl	8021f64 <__assert_func>
 80208be:	490b      	ldr	r1, [pc, #44]	; (80208ec <srand+0x50>)
 80208c0:	4b0b      	ldr	r3, [pc, #44]	; (80208f0 <srand+0x54>)
 80208c2:	e9c0 1300 	strd	r1, r3, [r0]
 80208c6:	4b0b      	ldr	r3, [pc, #44]	; (80208f4 <srand+0x58>)
 80208c8:	6083      	str	r3, [r0, #8]
 80208ca:	230b      	movs	r3, #11
 80208cc:	8183      	strh	r3, [r0, #12]
 80208ce:	2100      	movs	r1, #0
 80208d0:	2001      	movs	r0, #1
 80208d2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80208d6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80208d8:	2200      	movs	r2, #0
 80208da:	611c      	str	r4, [r3, #16]
 80208dc:	615a      	str	r2, [r3, #20]
 80208de:	bd38      	pop	{r3, r4, r5, pc}
 80208e0:	20000108 	.word	0x20000108
 80208e4:	0802955c 	.word	0x0802955c
 80208e8:	08029634 	.word	0x08029634
 80208ec:	abcd330e 	.word	0xabcd330e
 80208f0:	e66d1234 	.word	0xe66d1234
 80208f4:	0005deec 	.word	0x0005deec

080208f8 <rand>:
 80208f8:	4b17      	ldr	r3, [pc, #92]	; (8020958 <rand+0x60>)
 80208fa:	b510      	push	{r4, lr}
 80208fc:	681c      	ldr	r4, [r3, #0]
 80208fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8020900:	b9b3      	cbnz	r3, 8020930 <rand+0x38>
 8020902:	2018      	movs	r0, #24
 8020904:	f7ff fec2 	bl	802068c <malloc>
 8020908:	63a0      	str	r0, [r4, #56]	; 0x38
 802090a:	b928      	cbnz	r0, 8020918 <rand+0x20>
 802090c:	4602      	mov	r2, r0
 802090e:	4b13      	ldr	r3, [pc, #76]	; (802095c <rand+0x64>)
 8020910:	4813      	ldr	r0, [pc, #76]	; (8020960 <rand+0x68>)
 8020912:	214e      	movs	r1, #78	; 0x4e
 8020914:	f001 fb26 	bl	8021f64 <__assert_func>
 8020918:	4a12      	ldr	r2, [pc, #72]	; (8020964 <rand+0x6c>)
 802091a:	4b13      	ldr	r3, [pc, #76]	; (8020968 <rand+0x70>)
 802091c:	e9c0 2300 	strd	r2, r3, [r0]
 8020920:	4b12      	ldr	r3, [pc, #72]	; (802096c <rand+0x74>)
 8020922:	6083      	str	r3, [r0, #8]
 8020924:	230b      	movs	r3, #11
 8020926:	8183      	strh	r3, [r0, #12]
 8020928:	2201      	movs	r2, #1
 802092a:	2300      	movs	r3, #0
 802092c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8020930:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8020932:	480f      	ldr	r0, [pc, #60]	; (8020970 <rand+0x78>)
 8020934:	690a      	ldr	r2, [r1, #16]
 8020936:	694b      	ldr	r3, [r1, #20]
 8020938:	4c0e      	ldr	r4, [pc, #56]	; (8020974 <rand+0x7c>)
 802093a:	4350      	muls	r0, r2
 802093c:	fb04 0003 	mla	r0, r4, r3, r0
 8020940:	fba2 3404 	umull	r3, r4, r2, r4
 8020944:	1c5a      	adds	r2, r3, #1
 8020946:	4404      	add	r4, r0
 8020948:	f144 0000 	adc.w	r0, r4, #0
 802094c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8020950:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8020954:	bd10      	pop	{r4, pc}
 8020956:	bf00      	nop
 8020958:	20000108 	.word	0x20000108
 802095c:	0802955c 	.word	0x0802955c
 8020960:	08029634 	.word	0x08029634
 8020964:	abcd330e 	.word	0xabcd330e
 8020968:	e66d1234 	.word	0xe66d1234
 802096c:	0005deec 	.word	0x0005deec
 8020970:	5851f42d 	.word	0x5851f42d
 8020974:	4c957f2d 	.word	0x4c957f2d

08020978 <realloc>:
 8020978:	4b02      	ldr	r3, [pc, #8]	; (8020984 <realloc+0xc>)
 802097a:	460a      	mov	r2, r1
 802097c:	4601      	mov	r1, r0
 802097e:	6818      	ldr	r0, [r3, #0]
 8020980:	f001 bcb2 	b.w	80222e8 <_realloc_r>
 8020984:	20000108 	.word	0x20000108

08020988 <_sbrk_r>:
 8020988:	b538      	push	{r3, r4, r5, lr}
 802098a:	4d06      	ldr	r5, [pc, #24]	; (80209a4 <_sbrk_r+0x1c>)
 802098c:	2300      	movs	r3, #0
 802098e:	4604      	mov	r4, r0
 8020990:	4608      	mov	r0, r1
 8020992:	602b      	str	r3, [r5, #0]
 8020994:	f7e0 fa7a 	bl	8000e8c <_sbrk>
 8020998:	1c43      	adds	r3, r0, #1
 802099a:	d102      	bne.n	80209a2 <_sbrk_r+0x1a>
 802099c:	682b      	ldr	r3, [r5, #0]
 802099e:	b103      	cbz	r3, 80209a2 <_sbrk_r+0x1a>
 80209a0:	6023      	str	r3, [r4, #0]
 80209a2:	bd38      	pop	{r3, r4, r5, pc}
 80209a4:	20000f94 	.word	0x20000f94

080209a8 <_raise_r>:
 80209a8:	291f      	cmp	r1, #31
 80209aa:	b538      	push	{r3, r4, r5, lr}
 80209ac:	4604      	mov	r4, r0
 80209ae:	460d      	mov	r5, r1
 80209b0:	d904      	bls.n	80209bc <_raise_r+0x14>
 80209b2:	2316      	movs	r3, #22
 80209b4:	6003      	str	r3, [r0, #0]
 80209b6:	f04f 30ff 	mov.w	r0, #4294967295
 80209ba:	bd38      	pop	{r3, r4, r5, pc}
 80209bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80209be:	b112      	cbz	r2, 80209c6 <_raise_r+0x1e>
 80209c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80209c4:	b94b      	cbnz	r3, 80209da <_raise_r+0x32>
 80209c6:	4620      	mov	r0, r4
 80209c8:	f000 f830 	bl	8020a2c <_getpid_r>
 80209cc:	462a      	mov	r2, r5
 80209ce:	4601      	mov	r1, r0
 80209d0:	4620      	mov	r0, r4
 80209d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80209d6:	f000 b817 	b.w	8020a08 <_kill_r>
 80209da:	2b01      	cmp	r3, #1
 80209dc:	d00a      	beq.n	80209f4 <_raise_r+0x4c>
 80209de:	1c59      	adds	r1, r3, #1
 80209e0:	d103      	bne.n	80209ea <_raise_r+0x42>
 80209e2:	2316      	movs	r3, #22
 80209e4:	6003      	str	r3, [r0, #0]
 80209e6:	2001      	movs	r0, #1
 80209e8:	e7e7      	b.n	80209ba <_raise_r+0x12>
 80209ea:	2400      	movs	r4, #0
 80209ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80209f0:	4628      	mov	r0, r5
 80209f2:	4798      	blx	r3
 80209f4:	2000      	movs	r0, #0
 80209f6:	e7e0      	b.n	80209ba <_raise_r+0x12>

080209f8 <raise>:
 80209f8:	4b02      	ldr	r3, [pc, #8]	; (8020a04 <raise+0xc>)
 80209fa:	4601      	mov	r1, r0
 80209fc:	6818      	ldr	r0, [r3, #0]
 80209fe:	f7ff bfd3 	b.w	80209a8 <_raise_r>
 8020a02:	bf00      	nop
 8020a04:	20000108 	.word	0x20000108

08020a08 <_kill_r>:
 8020a08:	b538      	push	{r3, r4, r5, lr}
 8020a0a:	4d07      	ldr	r5, [pc, #28]	; (8020a28 <_kill_r+0x20>)
 8020a0c:	2300      	movs	r3, #0
 8020a0e:	4604      	mov	r4, r0
 8020a10:	4608      	mov	r0, r1
 8020a12:	4611      	mov	r1, r2
 8020a14:	602b      	str	r3, [r5, #0]
 8020a16:	f7e0 f9a4 	bl	8000d62 <_kill>
 8020a1a:	1c43      	adds	r3, r0, #1
 8020a1c:	d102      	bne.n	8020a24 <_kill_r+0x1c>
 8020a1e:	682b      	ldr	r3, [r5, #0]
 8020a20:	b103      	cbz	r3, 8020a24 <_kill_r+0x1c>
 8020a22:	6023      	str	r3, [r4, #0]
 8020a24:	bd38      	pop	{r3, r4, r5, pc}
 8020a26:	bf00      	nop
 8020a28:	20000f94 	.word	0x20000f94

08020a2c <_getpid_r>:
 8020a2c:	f7e0 b991 	b.w	8000d52 <_getpid>

08020a30 <siprintf>:
 8020a30:	b40e      	push	{r1, r2, r3}
 8020a32:	b500      	push	{lr}
 8020a34:	b09c      	sub	sp, #112	; 0x70
 8020a36:	ab1d      	add	r3, sp, #116	; 0x74
 8020a38:	9002      	str	r0, [sp, #8]
 8020a3a:	9006      	str	r0, [sp, #24]
 8020a3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8020a40:	4809      	ldr	r0, [pc, #36]	; (8020a68 <siprintf+0x38>)
 8020a42:	9107      	str	r1, [sp, #28]
 8020a44:	9104      	str	r1, [sp, #16]
 8020a46:	4909      	ldr	r1, [pc, #36]	; (8020a6c <siprintf+0x3c>)
 8020a48:	f853 2b04 	ldr.w	r2, [r3], #4
 8020a4c:	9105      	str	r1, [sp, #20]
 8020a4e:	6800      	ldr	r0, [r0, #0]
 8020a50:	9301      	str	r3, [sp, #4]
 8020a52:	a902      	add	r1, sp, #8
 8020a54:	f001 fcca 	bl	80223ec <_svfiprintf_r>
 8020a58:	9b02      	ldr	r3, [sp, #8]
 8020a5a:	2200      	movs	r2, #0
 8020a5c:	701a      	strb	r2, [r3, #0]
 8020a5e:	b01c      	add	sp, #112	; 0x70
 8020a60:	f85d eb04 	ldr.w	lr, [sp], #4
 8020a64:	b003      	add	sp, #12
 8020a66:	4770      	bx	lr
 8020a68:	20000108 	.word	0x20000108
 8020a6c:	ffff0208 	.word	0xffff0208

08020a70 <__sread>:
 8020a70:	b510      	push	{r4, lr}
 8020a72:	460c      	mov	r4, r1
 8020a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020a78:	f002 f8ee 	bl	8022c58 <_read_r>
 8020a7c:	2800      	cmp	r0, #0
 8020a7e:	bfab      	itete	ge
 8020a80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8020a82:	89a3      	ldrhlt	r3, [r4, #12]
 8020a84:	181b      	addge	r3, r3, r0
 8020a86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8020a8a:	bfac      	ite	ge
 8020a8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8020a8e:	81a3      	strhlt	r3, [r4, #12]
 8020a90:	bd10      	pop	{r4, pc}

08020a92 <__seofread>:
 8020a92:	2000      	movs	r0, #0
 8020a94:	4770      	bx	lr

08020a96 <__swrite>:
 8020a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020a9a:	461f      	mov	r7, r3
 8020a9c:	898b      	ldrh	r3, [r1, #12]
 8020a9e:	05db      	lsls	r3, r3, #23
 8020aa0:	4605      	mov	r5, r0
 8020aa2:	460c      	mov	r4, r1
 8020aa4:	4616      	mov	r6, r2
 8020aa6:	d505      	bpl.n	8020ab4 <__swrite+0x1e>
 8020aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020aac:	2302      	movs	r3, #2
 8020aae:	2200      	movs	r2, #0
 8020ab0:	f001 fbea 	bl	8022288 <_lseek_r>
 8020ab4:	89a3      	ldrh	r3, [r4, #12]
 8020ab6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020aba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020abe:	81a3      	strh	r3, [r4, #12]
 8020ac0:	4632      	mov	r2, r6
 8020ac2:	463b      	mov	r3, r7
 8020ac4:	4628      	mov	r0, r5
 8020ac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020aca:	f001 b965 	b.w	8021d98 <_write_r>

08020ace <__sseek>:
 8020ace:	b510      	push	{r4, lr}
 8020ad0:	460c      	mov	r4, r1
 8020ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020ad6:	f001 fbd7 	bl	8022288 <_lseek_r>
 8020ada:	1c43      	adds	r3, r0, #1
 8020adc:	89a3      	ldrh	r3, [r4, #12]
 8020ade:	bf15      	itete	ne
 8020ae0:	6560      	strne	r0, [r4, #84]	; 0x54
 8020ae2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020ae6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8020aea:	81a3      	strheq	r3, [r4, #12]
 8020aec:	bf18      	it	ne
 8020aee:	81a3      	strhne	r3, [r4, #12]
 8020af0:	bd10      	pop	{r4, pc}

08020af2 <__sclose>:
 8020af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020af6:	f001 ba53 	b.w	8021fa0 <_close_r>
	...

08020afc <iso_year_adjust>:
 8020afc:	6941      	ldr	r1, [r0, #20]
 8020afe:	2900      	cmp	r1, #0
 8020b00:	f240 736c 	movw	r3, #1900	; 0x76c
 8020b04:	bfa8      	it	ge
 8020b06:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8020b0a:	18ca      	adds	r2, r1, r3
 8020b0c:	078b      	lsls	r3, r1, #30
 8020b0e:	d105      	bne.n	8020b1c <iso_year_adjust+0x20>
 8020b10:	2164      	movs	r1, #100	; 0x64
 8020b12:	fb92 f3f1 	sdiv	r3, r2, r1
 8020b16:	fb01 2313 	mls	r3, r1, r3, r2
 8020b1a:	b9db      	cbnz	r3, 8020b54 <iso_year_adjust+0x58>
 8020b1c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8020b20:	fb92 f3f1 	sdiv	r3, r2, r1
 8020b24:	fb01 2313 	mls	r3, r1, r3, r2
 8020b28:	fab3 f383 	clz	r3, r3
 8020b2c:	095b      	lsrs	r3, r3, #5
 8020b2e:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8020b32:	0040      	lsls	r0, r0, #1
 8020b34:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8020b38:	4418      	add	r0, r3
 8020b3a:	f241 63a2 	movw	r3, #5794	; 0x16a2
 8020b3e:	4298      	cmp	r0, r3
 8020b40:	d03a      	beq.n	8020bb8 <iso_year_adjust+0xbc>
 8020b42:	dc21      	bgt.n	8020b88 <iso_year_adjust+0x8c>
 8020b44:	2801      	cmp	r0, #1
 8020b46:	dc1a      	bgt.n	8020b7e <iso_year_adjust+0x82>
 8020b48:	2800      	cmp	r0, #0
 8020b4a:	bfb4      	ite	lt
 8020b4c:	2000      	movlt	r0, #0
 8020b4e:	f04f 30ff 	movge.w	r0, #4294967295
 8020b52:	4770      	bx	lr
 8020b54:	2301      	movs	r3, #1
 8020b56:	e7ea      	b.n	8020b2e <iso_year_adjust+0x32>
 8020b58:	2817      	cmp	r0, #23
 8020b5a:	d813      	bhi.n	8020b84 <iso_year_adjust+0x88>
 8020b5c:	e8df f000 	tbb	[pc, r0]
 8020b60:	0c0c0c0c 	.word	0x0c0c0c0c
 8020b64:	0c0c1212 	.word	0x0c0c1212
 8020b68:	12121212 	.word	0x12121212
 8020b6c:	12121212 	.word	0x12121212
 8020b70:	0c0c1212 	.word	0x0c0c1212
 8020b74:	0c0c1212 	.word	0x0c0c1212
 8020b78:	f04f 30ff 	mov.w	r0, #4294967295
 8020b7c:	4770      	bx	lr
 8020b7e:	380a      	subs	r0, #10
 8020b80:	2817      	cmp	r0, #23
 8020b82:	d9e9      	bls.n	8020b58 <iso_year_adjust+0x5c>
 8020b84:	2000      	movs	r0, #0
 8020b86:	4770      	bx	lr
 8020b88:	f241 63b4 	movw	r3, #5812	; 0x16b4
 8020b8c:	4298      	cmp	r0, r3
 8020b8e:	dc06      	bgt.n	8020b9e <iso_year_adjust+0xa2>
 8020b90:	f241 63b1 	movw	r3, #5809	; 0x16b1
 8020b94:	4298      	cmp	r0, r3
 8020b96:	bfd4      	ite	le
 8020b98:	2000      	movle	r0, #0
 8020b9a:	2001      	movgt	r0, #1
 8020b9c:	4770      	bx	lr
 8020b9e:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 8020ba2:	3802      	subs	r0, #2
 8020ba4:	2815      	cmp	r0, #21
 8020ba6:	d8ed      	bhi.n	8020b84 <iso_year_adjust+0x88>
 8020ba8:	2301      	movs	r3, #1
 8020baa:	4083      	lsls	r3, r0
 8020bac:	4803      	ldr	r0, [pc, #12]	; (8020bbc <iso_year_adjust+0xc0>)
 8020bae:	4018      	ands	r0, r3
 8020bb0:	3800      	subs	r0, #0
 8020bb2:	bf18      	it	ne
 8020bb4:	2001      	movne	r0, #1
 8020bb6:	4770      	bx	lr
 8020bb8:	2001      	movs	r0, #1
 8020bba:	4770      	bx	lr
 8020bbc:	002a001f 	.word	0x002a001f

08020bc0 <__strftime>:
 8020bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020bc4:	b091      	sub	sp, #68	; 0x44
 8020bc6:	461d      	mov	r5, r3
 8020bc8:	2300      	movs	r3, #0
 8020bca:	4681      	mov	r9, r0
 8020bcc:	4688      	mov	r8, r1
 8020bce:	9304      	str	r3, [sp, #16]
 8020bd0:	461c      	mov	r4, r3
 8020bd2:	7813      	ldrb	r3, [r2, #0]
 8020bd4:	2b00      	cmp	r3, #0
 8020bd6:	f000 84d1 	beq.w	802157c <__strftime+0x9bc>
 8020bda:	2b25      	cmp	r3, #37	; 0x25
 8020bdc:	d11b      	bne.n	8020c16 <__strftime+0x56>
 8020bde:	7857      	ldrb	r7, [r2, #1]
 8020be0:	2f30      	cmp	r7, #48	; 0x30
 8020be2:	d024      	beq.n	8020c2e <__strftime+0x6e>
 8020be4:	2f2b      	cmp	r7, #43	; 0x2b
 8020be6:	d022      	beq.n	8020c2e <__strftime+0x6e>
 8020be8:	f102 0b01 	add.w	fp, r2, #1
 8020bec:	2700      	movs	r7, #0
 8020bee:	f89b 3000 	ldrb.w	r3, [fp]
 8020bf2:	3b31      	subs	r3, #49	; 0x31
 8020bf4:	2b08      	cmp	r3, #8
 8020bf6:	d81d      	bhi.n	8020c34 <__strftime+0x74>
 8020bf8:	4658      	mov	r0, fp
 8020bfa:	220a      	movs	r2, #10
 8020bfc:	a908      	add	r1, sp, #32
 8020bfe:	f000 fdff 	bl	8021800 <strtoul>
 8020c02:	f8dd b020 	ldr.w	fp, [sp, #32]
 8020c06:	4606      	mov	r6, r0
 8020c08:	f89b 3000 	ldrb.w	r3, [fp]
 8020c0c:	2b45      	cmp	r3, #69	; 0x45
 8020c0e:	d113      	bne.n	8020c38 <__strftime+0x78>
 8020c10:	f10b 0b01 	add.w	fp, fp, #1
 8020c14:	e012      	b.n	8020c3c <__strftime+0x7c>
 8020c16:	f108 31ff 	add.w	r1, r8, #4294967295
 8020c1a:	42a1      	cmp	r1, r4
 8020c1c:	d802      	bhi.n	8020c24 <__strftime+0x64>
 8020c1e:	2400      	movs	r4, #0
 8020c20:	f000 bcb2 	b.w	8021588 <__strftime+0x9c8>
 8020c24:	f809 3004 	strb.w	r3, [r9, r4]
 8020c28:	3201      	adds	r2, #1
 8020c2a:	3401      	adds	r4, #1
 8020c2c:	e7d1      	b.n	8020bd2 <__strftime+0x12>
 8020c2e:	f102 0b02 	add.w	fp, r2, #2
 8020c32:	e7dc      	b.n	8020bee <__strftime+0x2e>
 8020c34:	2600      	movs	r6, #0
 8020c36:	e7e7      	b.n	8020c08 <__strftime+0x48>
 8020c38:	2b4f      	cmp	r3, #79	; 0x4f
 8020c3a:	d0e9      	beq.n	8020c10 <__strftime+0x50>
 8020c3c:	f89b 0000 	ldrb.w	r0, [fp]
 8020c40:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8020c44:	2b55      	cmp	r3, #85	; 0x55
 8020c46:	d8ea      	bhi.n	8020c1e <__strftime+0x5e>
 8020c48:	a201      	add	r2, pc, #4	; (adr r2, 8020c50 <__strftime+0x90>)
 8020c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020c4e:	bf00      	nop
 8020c50:	0802156f 	.word	0x0802156f
 8020c54:	08020c1f 	.word	0x08020c1f
 8020c58:	08020c1f 	.word	0x08020c1f
 8020c5c:	08020c1f 	.word	0x08020c1f
 8020c60:	08020c1f 	.word	0x08020c1f
 8020c64:	08020c1f 	.word	0x08020c1f
 8020c68:	08020c1f 	.word	0x08020c1f
 8020c6c:	08020c1f 	.word	0x08020c1f
 8020c70:	08020c1f 	.word	0x08020c1f
 8020c74:	08020c1f 	.word	0x08020c1f
 8020c78:	08020c1f 	.word	0x08020c1f
 8020c7c:	08020c1f 	.word	0x08020c1f
 8020c80:	08020c1f 	.word	0x08020c1f
 8020c84:	08020c1f 	.word	0x08020c1f
 8020c88:	08020c1f 	.word	0x08020c1f
 8020c8c:	08020c1f 	.word	0x08020c1f
 8020c90:	08020c1f 	.word	0x08020c1f
 8020c94:	08020c1f 	.word	0x08020c1f
 8020c98:	08020c1f 	.word	0x08020c1f
 8020c9c:	08020c1f 	.word	0x08020c1f
 8020ca0:	08020c1f 	.word	0x08020c1f
 8020ca4:	08020c1f 	.word	0x08020c1f
 8020ca8:	08020c1f 	.word	0x08020c1f
 8020cac:	08020c1f 	.word	0x08020c1f
 8020cb0:	08020c1f 	.word	0x08020c1f
 8020cb4:	08020c1f 	.word	0x08020c1f
 8020cb8:	08020c1f 	.word	0x08020c1f
 8020cbc:	08020c1f 	.word	0x08020c1f
 8020cc0:	08020de7 	.word	0x08020de7
 8020cc4:	08020e41 	.word	0x08020e41
 8020cc8:	08020eb7 	.word	0x08020eb7
 8020ccc:	08020f51 	.word	0x08020f51
 8020cd0:	08020c1f 	.word	0x08020c1f
 8020cd4:	08020f9d 	.word	0x08020f9d
 8020cd8:	0802107d 	.word	0x0802107d
 8020cdc:	0802117f 	.word	0x0802117f
 8020ce0:	0802118d 	.word	0x0802118d
 8020ce4:	08020c1f 	.word	0x08020c1f
 8020ce8:	08020c1f 	.word	0x08020c1f
 8020cec:	08020c1f 	.word	0x08020c1f
 8020cf0:	080211bd 	.word	0x080211bd
 8020cf4:	08020c1f 	.word	0x08020c1f
 8020cf8:	08020c1f 	.word	0x08020c1f
 8020cfc:	080211d5 	.word	0x080211d5
 8020d00:	08020c1f 	.word	0x08020c1f
 8020d04:	08021223 	.word	0x08021223
 8020d08:	08021339 	.word	0x08021339
 8020d0c:	0802134b 	.word	0x0802134b
 8020d10:	080213a3 	.word	0x080213a3
 8020d14:	080213b3 	.word	0x080213b3
 8020d18:	08021429 	.word	0x08021429
 8020d1c:	08020eaf 	.word	0x08020eaf
 8020d20:	0802145d 	.word	0x0802145d
 8020d24:	0802151b 	.word	0x0802151b
 8020d28:	08020c1f 	.word	0x08020c1f
 8020d2c:	08020c1f 	.word	0x08020c1f
 8020d30:	08020c1f 	.word	0x08020c1f
 8020d34:	08020c1f 	.word	0x08020c1f
 8020d38:	08020c1f 	.word	0x08020c1f
 8020d3c:	08020c1f 	.word	0x08020c1f
 8020d40:	08020da9 	.word	0x08020da9
 8020d44:	08020e15 	.word	0x08020e15
 8020d48:	08020e6f 	.word	0x08020e6f
 8020d4c:	08020f29 	.word	0x08020f29
 8020d50:	08020f29 	.word	0x08020f29
 8020d54:	08020c1f 	.word	0x08020c1f
 8020d58:	08020fe5 	.word	0x08020fe5
 8020d5c:	08020e15 	.word	0x08020e15
 8020d60:	08020c1f 	.word	0x08020c1f
 8020d64:	080211af 	.word	0x080211af
 8020d68:	0802117f 	.word	0x0802117f
 8020d6c:	0802118d 	.word	0x0802118d
 8020d70:	080211b7 	.word	0x080211b7
 8020d74:	080211c1 	.word	0x080211c1
 8020d78:	08020c1f 	.word	0x08020c1f
 8020d7c:	080211d5 	.word	0x080211d5
 8020d80:	08020c1f 	.word	0x08020c1f
 8020d84:	08020e9f 	.word	0x08020e9f
 8020d88:	08021239 	.word	0x08021239
 8020d8c:	0802133d 	.word	0x0802133d
 8020d90:	08021385 	.word	0x08021385
 8020d94:	08020c1f 	.word	0x08020c1f
 8020d98:	08021419 	.word	0x08021419
 8020d9c:	08020ea7 	.word	0x08020ea7
 8020da0:	08021441 	.word	0x08021441
 8020da4:	080214ad 	.word	0x080214ad
 8020da8:	69ab      	ldr	r3, [r5, #24]
 8020daa:	4aa7      	ldr	r2, [pc, #668]	; (8021048 <__strftime+0x488>)
 8020dac:	3318      	adds	r3, #24
 8020dae:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8020db2:	4630      	mov	r0, r6
 8020db4:	f7df fa42 	bl	800023c <strlen>
 8020db8:	3e01      	subs	r6, #1
 8020dba:	4420      	add	r0, r4
 8020dbc:	f108 33ff 	add.w	r3, r8, #4294967295
 8020dc0:	42a0      	cmp	r0, r4
 8020dc2:	d107      	bne.n	8020dd4 <__strftime+0x214>
 8020dc4:	f89b 3000 	ldrb.w	r3, [fp]
 8020dc8:	2b00      	cmp	r3, #0
 8020dca:	f000 83d7 	beq.w	802157c <__strftime+0x9bc>
 8020dce:	f10b 0201 	add.w	r2, fp, #1
 8020dd2:	e6fe      	b.n	8020bd2 <__strftime+0x12>
 8020dd4:	42a3      	cmp	r3, r4
 8020dd6:	f67f af22 	bls.w	8020c1e <__strftime+0x5e>
 8020dda:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8020dde:	f809 2004 	strb.w	r2, [r9, r4]
 8020de2:	3401      	adds	r4, #1
 8020de4:	e7ec      	b.n	8020dc0 <__strftime+0x200>
 8020de6:	69aa      	ldr	r2, [r5, #24]
 8020de8:	4b97      	ldr	r3, [pc, #604]	; (8021048 <__strftime+0x488>)
 8020dea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8020dee:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 8020df0:	4630      	mov	r0, r6
 8020df2:	f7df fa23 	bl	800023c <strlen>
 8020df6:	3e01      	subs	r6, #1
 8020df8:	4420      	add	r0, r4
 8020dfa:	f108 33ff 	add.w	r3, r8, #4294967295
 8020dfe:	42a0      	cmp	r0, r4
 8020e00:	d0e0      	beq.n	8020dc4 <__strftime+0x204>
 8020e02:	42a3      	cmp	r3, r4
 8020e04:	f67f af0b 	bls.w	8020c1e <__strftime+0x5e>
 8020e08:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8020e0c:	f809 2004 	strb.w	r2, [r9, r4]
 8020e10:	3401      	adds	r4, #1
 8020e12:	e7f4      	b.n	8020dfe <__strftime+0x23e>
 8020e14:	4b8c      	ldr	r3, [pc, #560]	; (8021048 <__strftime+0x488>)
 8020e16:	692a      	ldr	r2, [r5, #16]
 8020e18:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8020e1c:	4630      	mov	r0, r6
 8020e1e:	f7df fa0d 	bl	800023c <strlen>
 8020e22:	3e01      	subs	r6, #1
 8020e24:	4420      	add	r0, r4
 8020e26:	f108 33ff 	add.w	r3, r8, #4294967295
 8020e2a:	42a0      	cmp	r0, r4
 8020e2c:	d0ca      	beq.n	8020dc4 <__strftime+0x204>
 8020e2e:	42a3      	cmp	r3, r4
 8020e30:	f67f aef5 	bls.w	8020c1e <__strftime+0x5e>
 8020e34:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8020e38:	f809 2004 	strb.w	r2, [r9, r4]
 8020e3c:	3401      	adds	r4, #1
 8020e3e:	e7f4      	b.n	8020e2a <__strftime+0x26a>
 8020e40:	692b      	ldr	r3, [r5, #16]
 8020e42:	4a81      	ldr	r2, [pc, #516]	; (8021048 <__strftime+0x488>)
 8020e44:	330c      	adds	r3, #12
 8020e46:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8020e4a:	4630      	mov	r0, r6
 8020e4c:	f7df f9f6 	bl	800023c <strlen>
 8020e50:	3e01      	subs	r6, #1
 8020e52:	4420      	add	r0, r4
 8020e54:	f108 33ff 	add.w	r3, r8, #4294967295
 8020e58:	42a0      	cmp	r0, r4
 8020e5a:	d0b3      	beq.n	8020dc4 <__strftime+0x204>
 8020e5c:	42a3      	cmp	r3, r4
 8020e5e:	f67f aede 	bls.w	8020c1e <__strftime+0x5e>
 8020e62:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8020e66:	f809 2004 	strb.w	r2, [r9, r4]
 8020e6a:	3401      	adds	r4, #1
 8020e6c:	e7f4      	b.n	8020e58 <__strftime+0x298>
 8020e6e:	4b76      	ldr	r3, [pc, #472]	; (8021048 <__strftime+0x488>)
 8020e70:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8020e74:	4630      	mov	r0, r6
 8020e76:	f7df f9e1 	bl	800023c <strlen>
 8020e7a:	7833      	ldrb	r3, [r6, #0]
 8020e7c:	2b00      	cmp	r3, #0
 8020e7e:	d0a1      	beq.n	8020dc4 <__strftime+0x204>
 8020e80:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020e82:	9300      	str	r3, [sp, #0]
 8020e84:	4632      	mov	r2, r6
 8020e86:	462b      	mov	r3, r5
 8020e88:	eba8 0104 	sub.w	r1, r8, r4
 8020e8c:	eb09 0004 	add.w	r0, r9, r4
 8020e90:	f7ff fe96 	bl	8020bc0 <__strftime>
 8020e94:	2800      	cmp	r0, #0
 8020e96:	f77f aec2 	ble.w	8020c1e <__strftime+0x5e>
 8020e9a:	4404      	add	r4, r0
 8020e9c:	e792      	b.n	8020dc4 <__strftime+0x204>
 8020e9e:	4b6a      	ldr	r3, [pc, #424]	; (8021048 <__strftime+0x488>)
 8020ea0:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 8020ea4:	e7e6      	b.n	8020e74 <__strftime+0x2b4>
 8020ea6:	4b68      	ldr	r3, [pc, #416]	; (8021048 <__strftime+0x488>)
 8020ea8:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 8020eac:	e7e2      	b.n	8020e74 <__strftime+0x2b4>
 8020eae:	4b66      	ldr	r3, [pc, #408]	; (8021048 <__strftime+0x488>)
 8020eb0:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 8020eb4:	e7de      	b.n	8020e74 <__strftime+0x2b4>
 8020eb6:	4965      	ldr	r1, [pc, #404]	; (802104c <__strftime+0x48c>)
 8020eb8:	f8d5 a014 	ldr.w	sl, [r5, #20]
 8020ebc:	458a      	cmp	sl, r1
 8020ebe:	bfac      	ite	ge
 8020ec0:	2100      	movge	r1, #0
 8020ec2:	2101      	movlt	r1, #1
 8020ec4:	f1ba 0f00 	cmp.w	sl, #0
 8020ec8:	db0e      	blt.n	8020ee8 <__strftime+0x328>
 8020eca:	2064      	movs	r0, #100	; 0x64
 8020ecc:	fb9a f0f0 	sdiv	r0, sl, r0
 8020ed0:	3013      	adds	r0, #19
 8020ed2:	b19f      	cbz	r7, 8020efc <__strftime+0x33c>
 8020ed4:	2863      	cmp	r0, #99	; 0x63
 8020ed6:	dd25      	ble.n	8020f24 <__strftime+0x364>
 8020ed8:	4a5d      	ldr	r2, [pc, #372]	; (8021050 <__strftime+0x490>)
 8020eda:	4b5e      	ldr	r3, [pc, #376]	; (8021054 <__strftime+0x494>)
 8020edc:	2f2b      	cmp	r7, #43	; 0x2b
 8020ede:	bf14      	ite	ne
 8020ee0:	4617      	movne	r7, r2
 8020ee2:	461f      	moveq	r7, r3
 8020ee4:	4a5c      	ldr	r2, [pc, #368]	; (8021058 <__strftime+0x498>)
 8020ee6:	e00b      	b.n	8020f00 <__strftime+0x340>
 8020ee8:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 8020eec:	9105      	str	r1, [sp, #20]
 8020eee:	f001 f835 	bl	8021f5c <abs>
 8020ef2:	2364      	movs	r3, #100	; 0x64
 8020ef4:	9905      	ldr	r1, [sp, #20]
 8020ef6:	fb90 f0f3 	sdiv	r0, r0, r3
 8020efa:	e7ea      	b.n	8020ed2 <__strftime+0x312>
 8020efc:	4f54      	ldr	r7, [pc, #336]	; (8021050 <__strftime+0x490>)
 8020efe:	4a57      	ldr	r2, [pc, #348]	; (802105c <__strftime+0x49c>)
 8020f00:	4b57      	ldr	r3, [pc, #348]	; (8021060 <__strftime+0x4a0>)
 8020f02:	9001      	str	r0, [sp, #4]
 8020f04:	2e02      	cmp	r6, #2
 8020f06:	bf2c      	ite	cs
 8020f08:	ebc1 0606 	rsbcs	r6, r1, r6
 8020f0c:	f1c1 0602 	rsbcc	r6, r1, #2
 8020f10:	494e      	ldr	r1, [pc, #312]	; (802104c <__strftime+0x48c>)
 8020f12:	9600      	str	r6, [sp, #0]
 8020f14:	458a      	cmp	sl, r1
 8020f16:	bfa8      	it	ge
 8020f18:	463b      	movge	r3, r7
 8020f1a:	eba8 0104 	sub.w	r1, r8, r4
 8020f1e:	eb09 0004 	add.w	r0, r9, r4
 8020f22:	e02a      	b.n	8020f7a <__strftime+0x3ba>
 8020f24:	4f4a      	ldr	r7, [pc, #296]	; (8021050 <__strftime+0x490>)
 8020f26:	e7dd      	b.n	8020ee4 <__strftime+0x324>
 8020f28:	494e      	ldr	r1, [pc, #312]	; (8021064 <__strftime+0x4a4>)
 8020f2a:	4a4f      	ldr	r2, [pc, #316]	; (8021068 <__strftime+0x4a8>)
 8020f2c:	68eb      	ldr	r3, [r5, #12]
 8020f2e:	2864      	cmp	r0, #100	; 0x64
 8020f30:	bf08      	it	eq
 8020f32:	460a      	moveq	r2, r1
 8020f34:	eba8 0104 	sub.w	r1, r8, r4
 8020f38:	eb09 0004 	add.w	r0, r9, r4
 8020f3c:	f001 fe9e 	bl	8022c7c <sniprintf>
 8020f40:	2800      	cmp	r0, #0
 8020f42:	f6ff ae6c 	blt.w	8020c1e <__strftime+0x5e>
 8020f46:	4404      	add	r4, r0
 8020f48:	45a0      	cmp	r8, r4
 8020f4a:	f63f af3b 	bhi.w	8020dc4 <__strftime+0x204>
 8020f4e:	e666      	b.n	8020c1e <__strftime+0x5e>
 8020f50:	6968      	ldr	r0, [r5, #20]
 8020f52:	692b      	ldr	r3, [r5, #16]
 8020f54:	68ef      	ldr	r7, [r5, #12]
 8020f56:	2800      	cmp	r0, #0
 8020f58:	eb09 0604 	add.w	r6, r9, r4
 8020f5c:	eba8 0104 	sub.w	r1, r8, r4
 8020f60:	f103 0301 	add.w	r3, r3, #1
 8020f64:	db0c      	blt.n	8020f80 <__strftime+0x3c0>
 8020f66:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8020f6a:	fb90 f2fc 	sdiv	r2, r0, ip
 8020f6e:	fb0c 0212 	mls	r2, ip, r2, r0
 8020f72:	e9cd 7200 	strd	r7, r2, [sp]
 8020f76:	4a3d      	ldr	r2, [pc, #244]	; (802106c <__strftime+0x4ac>)
 8020f78:	4630      	mov	r0, r6
 8020f7a:	f001 fe7f 	bl	8022c7c <sniprintf>
 8020f7e:	e7df      	b.n	8020f40 <__strftime+0x380>
 8020f80:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8020f84:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8020f88:	f000 ffe8 	bl	8021f5c <abs>
 8020f8c:	2264      	movs	r2, #100	; 0x64
 8020f8e:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 8020f92:	fb90 fcf2 	sdiv	ip, r0, r2
 8020f96:	fb0c 0212 	mls	r2, ip, r2, r0
 8020f9a:	e7ea      	b.n	8020f72 <__strftime+0x3b2>
 8020f9c:	2325      	movs	r3, #37	; 0x25
 8020f9e:	f88d 3020 	strb.w	r3, [sp, #32]
 8020fa2:	b187      	cbz	r7, 8020fc6 <__strftime+0x406>
 8020fa4:	2e06      	cmp	r6, #6
 8020fa6:	bf38      	it	cc
 8020fa8:	2606      	movcc	r6, #6
 8020faa:	1fb3      	subs	r3, r6, #6
 8020fac:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 8020fb0:	d10c      	bne.n	8020fcc <__strftime+0x40c>
 8020fb2:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8020fb6:	492e      	ldr	r1, [pc, #184]	; (8021070 <__strftime+0x4b0>)
 8020fb8:	f001 fec0 	bl	8022d3c <strcpy>
 8020fbc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020fbe:	9300      	str	r3, [sp, #0]
 8020fc0:	aa08      	add	r2, sp, #32
 8020fc2:	462b      	mov	r3, r5
 8020fc4:	e760      	b.n	8020e88 <__strftime+0x2c8>
 8020fc6:	272b      	movs	r7, #43	; 0x2b
 8020fc8:	260a      	movs	r6, #10
 8020fca:	e7ee      	b.n	8020faa <__strftime+0x3ea>
 8020fcc:	4a29      	ldr	r2, [pc, #164]	; (8021074 <__strftime+0x4b4>)
 8020fce:	211e      	movs	r1, #30
 8020fd0:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8020fd4:	f001 fe52 	bl	8022c7c <sniprintf>
 8020fd8:	2800      	cmp	r0, #0
 8020fda:	ddea      	ble.n	8020fb2 <__strftime+0x3f2>
 8020fdc:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8020fe0:	4418      	add	r0, r3
 8020fe2:	e7e8      	b.n	8020fb6 <__strftime+0x3f6>
 8020fe4:	4628      	mov	r0, r5
 8020fe6:	f7ff fd89 	bl	8020afc <iso_year_adjust>
 8020fea:	4606      	mov	r6, r0
 8020fec:	6968      	ldr	r0, [r5, #20]
 8020fee:	2800      	cmp	r0, #0
 8020ff0:	db11      	blt.n	8021016 <__strftime+0x456>
 8020ff2:	2264      	movs	r2, #100	; 0x64
 8020ff4:	fb90 f3f2 	sdiv	r3, r0, r2
 8020ff8:	fb02 0313 	mls	r3, r2, r3, r0
 8020ffc:	441e      	add	r6, r3
 8020ffe:	2364      	movs	r3, #100	; 0x64
 8021000:	fb96 f0f3 	sdiv	r0, r6, r3
 8021004:	fb03 6610 	mls	r6, r3, r0, r6
 8021008:	441e      	add	r6, r3
 802100a:	fbb6 f2f3 	udiv	r2, r6, r3
 802100e:	fb03 6312 	mls	r3, r3, r2, r6
 8021012:	4a14      	ldr	r2, [pc, #80]	; (8021064 <__strftime+0x4a4>)
 8021014:	e78e      	b.n	8020f34 <__strftime+0x374>
 8021016:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802101a:	f000 ff9f 	bl	8021f5c <abs>
 802101e:	2364      	movs	r3, #100	; 0x64
 8021020:	2e00      	cmp	r6, #0
 8021022:	fb90 f2f3 	sdiv	r2, r0, r3
 8021026:	fb02 0313 	mls	r3, r2, r3, r0
 802102a:	da05      	bge.n	8021038 <__strftime+0x478>
 802102c:	6969      	ldr	r1, [r5, #20]
 802102e:	4a12      	ldr	r2, [pc, #72]	; (8021078 <__strftime+0x4b8>)
 8021030:	4291      	cmp	r1, r2
 8021032:	bfb8      	it	lt
 8021034:	2601      	movlt	r6, #1
 8021036:	e7e1      	b.n	8020ffc <__strftime+0x43c>
 8021038:	d0e0      	beq.n	8020ffc <__strftime+0x43c>
 802103a:	6969      	ldr	r1, [r5, #20]
 802103c:	4a03      	ldr	r2, [pc, #12]	; (802104c <__strftime+0x48c>)
 802103e:	4291      	cmp	r1, r2
 8021040:	bfb8      	it	lt
 8021042:	f04f 36ff 	movlt.w	r6, #4294967295
 8021046:	e7d9      	b.n	8020ffc <__strftime+0x43c>
 8021048:	08029818 	.word	0x08029818
 802104c:	fffff894 	.word	0xfffff894
 8021050:	0802998b 	.word	0x0802998b
 8021054:	080296a2 	.word	0x080296a2
 8021058:	0802969a 	.word	0x0802969a
 802105c:	08029693 	.word	0x08029693
 8021060:	08029acb 	.word	0x08029acb
 8021064:	080296b2 	.word	0x080296b2
 8021068:	080296a4 	.word	0x080296a4
 802106c:	080296a8 	.word	0x080296a8
 8021070:	080296bb 	.word	0x080296bb
 8021074:	080296b7 	.word	0x080296b7
 8021078:	fffff895 	.word	0xfffff895
 802107c:	4bb6      	ldr	r3, [pc, #728]	; (8021358 <__strftime+0x798>)
 802107e:	6969      	ldr	r1, [r5, #20]
 8021080:	4299      	cmp	r1, r3
 8021082:	bfac      	ite	ge
 8021084:	2300      	movge	r3, #0
 8021086:	2301      	movlt	r3, #1
 8021088:	4628      	mov	r0, r5
 802108a:	e9cd 3105 	strd	r3, r1, [sp, #20]
 802108e:	f7ff fd35 	bl	8020afc <iso_year_adjust>
 8021092:	9906      	ldr	r1, [sp, #24]
 8021094:	2900      	cmp	r1, #0
 8021096:	4682      	mov	sl, r0
 8021098:	db27      	blt.n	80210ea <__strftime+0x52a>
 802109a:	2264      	movs	r2, #100	; 0x64
 802109c:	fb91 f2f2 	sdiv	r2, r1, r2
 80210a0:	3213      	adds	r2, #19
 80210a2:	6968      	ldr	r0, [r5, #20]
 80210a4:	2800      	cmp	r0, #0
 80210a6:	db2b      	blt.n	8021100 <__strftime+0x540>
 80210a8:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80210ac:	fb90 fefc 	sdiv	lr, r0, ip
 80210b0:	fb0c 001e 	mls	r0, ip, lr, r0
 80210b4:	f1ba 0f00 	cmp.w	sl, #0
 80210b8:	da31      	bge.n	802111e <__strftime+0x55e>
 80210ba:	6969      	ldr	r1, [r5, #20]
 80210bc:	4ba7      	ldr	r3, [pc, #668]	; (802135c <__strftime+0x79c>)
 80210be:	4299      	cmp	r1, r3
 80210c0:	db38      	blt.n	8021134 <__strftime+0x574>
 80210c2:	eb0a 0300 	add.w	r3, sl, r0
 80210c6:	1c59      	adds	r1, r3, #1
 80210c8:	d139      	bne.n	802113e <__strftime+0x57e>
 80210ca:	3a01      	subs	r2, #1
 80210cc:	2363      	movs	r3, #99	; 0x63
 80210ce:	2064      	movs	r0, #100	; 0x64
 80210d0:	fb00 3202 	mla	r2, r0, r2, r3
 80210d4:	9b05      	ldr	r3, [sp, #20]
 80210d6:	2b00      	cmp	r3, #0
 80210d8:	d036      	beq.n	8021148 <__strftime+0x588>
 80210da:	232d      	movs	r3, #45	; 0x2d
 80210dc:	f88d 3020 	strb.w	r3, [sp, #32]
 80210e0:	b106      	cbz	r6, 80210e4 <__strftime+0x524>
 80210e2:	3e01      	subs	r6, #1
 80210e4:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 80210e8:	e038      	b.n	802115c <__strftime+0x59c>
 80210ea:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80210ee:	9106      	str	r1, [sp, #24]
 80210f0:	f000 ff34 	bl	8021f5c <abs>
 80210f4:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80210f8:	9906      	ldr	r1, [sp, #24]
 80210fa:	fb90 f2fc 	sdiv	r2, r0, ip
 80210fe:	e7d0      	b.n	80210a2 <__strftime+0x4e2>
 8021100:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8021104:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8021108:	f000 ff28 	bl	8021f5c <abs>
 802110c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8021110:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8021114:	fb90 fefc 	sdiv	lr, r0, ip
 8021118:	fb0e 001c 	mls	r0, lr, ip, r0
 802111c:	e7ca      	b.n	80210b4 <__strftime+0x4f4>
 802111e:	d0d0      	beq.n	80210c2 <__strftime+0x502>
 8021120:	4b8d      	ldr	r3, [pc, #564]	; (8021358 <__strftime+0x798>)
 8021122:	4299      	cmp	r1, r3
 8021124:	bfb4      	ite	lt
 8021126:	2301      	movlt	r3, #1
 8021128:	2300      	movge	r3, #0
 802112a:	9305      	str	r3, [sp, #20]
 802112c:	bfb8      	it	lt
 802112e:	f04f 3aff 	movlt.w	sl, #4294967295
 8021132:	e7c6      	b.n	80210c2 <__strftime+0x502>
 8021134:	f04f 0a01 	mov.w	sl, #1
 8021138:	f8cd a014 	str.w	sl, [sp, #20]
 802113c:	e7c1      	b.n	80210c2 <__strftime+0x502>
 802113e:	2b64      	cmp	r3, #100	; 0x64
 8021140:	bf04      	itt	eq
 8021142:	3201      	addeq	r2, #1
 8021144:	2300      	moveq	r3, #0
 8021146:	e7c2      	b.n	80210ce <__strftime+0x50e>
 8021148:	2f2b      	cmp	r7, #43	; 0x2b
 802114a:	d106      	bne.n	802115a <__strftime+0x59a>
 802114c:	f242 730f 	movw	r3, #9999	; 0x270f
 8021150:	429a      	cmp	r2, r3
 8021152:	d902      	bls.n	802115a <__strftime+0x59a>
 8021154:	f88d 7020 	strb.w	r7, [sp, #32]
 8021158:	e7c2      	b.n	80210e0 <__strftime+0x520>
 802115a:	ab08      	add	r3, sp, #32
 802115c:	2125      	movs	r1, #37	; 0x25
 802115e:	7019      	strb	r1, [r3, #0]
 8021160:	b94f      	cbnz	r7, 8021176 <__strftime+0x5b6>
 8021162:	1c58      	adds	r0, r3, #1
 8021164:	497e      	ldr	r1, [pc, #504]	; (8021360 <__strftime+0x7a0>)
 8021166:	9205      	str	r2, [sp, #20]
 8021168:	f001 fde8 	bl	8022d3c <strcpy>
 802116c:	9a05      	ldr	r2, [sp, #20]
 802116e:	9200      	str	r2, [sp, #0]
 8021170:	4633      	mov	r3, r6
 8021172:	aa08      	add	r2, sp, #32
 8021174:	e059      	b.n	802122a <__strftime+0x66a>
 8021176:	2130      	movs	r1, #48	; 0x30
 8021178:	1c98      	adds	r0, r3, #2
 802117a:	7059      	strb	r1, [r3, #1]
 802117c:	e7f2      	b.n	8021164 <__strftime+0x5a4>
 802117e:	4979      	ldr	r1, [pc, #484]	; (8021364 <__strftime+0x7a4>)
 8021180:	4a79      	ldr	r2, [pc, #484]	; (8021368 <__strftime+0x7a8>)
 8021182:	68ab      	ldr	r3, [r5, #8]
 8021184:	286b      	cmp	r0, #107	; 0x6b
 8021186:	bf08      	it	eq
 8021188:	460a      	moveq	r2, r1
 802118a:	e6d3      	b.n	8020f34 <__strftime+0x374>
 802118c:	68ab      	ldr	r3, [r5, #8]
 802118e:	b163      	cbz	r3, 80211aa <__strftime+0x5ea>
 8021190:	2b0c      	cmp	r3, #12
 8021192:	d004      	beq.n	802119e <__strftime+0x5de>
 8021194:	210c      	movs	r1, #12
 8021196:	fb93 f2f1 	sdiv	r2, r3, r1
 802119a:	fb01 3312 	mls	r3, r1, r2, r3
 802119e:	4972      	ldr	r1, [pc, #456]	; (8021368 <__strftime+0x7a8>)
 80211a0:	4a70      	ldr	r2, [pc, #448]	; (8021364 <__strftime+0x7a4>)
 80211a2:	2849      	cmp	r0, #73	; 0x49
 80211a4:	bf08      	it	eq
 80211a6:	460a      	moveq	r2, r1
 80211a8:	e6c4      	b.n	8020f34 <__strftime+0x374>
 80211aa:	230c      	movs	r3, #12
 80211ac:	e7f7      	b.n	802119e <__strftime+0x5de>
 80211ae:	69eb      	ldr	r3, [r5, #28]
 80211b0:	4a6e      	ldr	r2, [pc, #440]	; (802136c <__strftime+0x7ac>)
 80211b2:	3301      	adds	r3, #1
 80211b4:	e6be      	b.n	8020f34 <__strftime+0x374>
 80211b6:	692b      	ldr	r3, [r5, #16]
 80211b8:	3301      	adds	r3, #1
 80211ba:	e72a      	b.n	8021012 <__strftime+0x452>
 80211bc:	686b      	ldr	r3, [r5, #4]
 80211be:	e728      	b.n	8021012 <__strftime+0x452>
 80211c0:	f108 33ff 	add.w	r3, r8, #4294967295
 80211c4:	42a3      	cmp	r3, r4
 80211c6:	f67f ad2a 	bls.w	8020c1e <__strftime+0x5e>
 80211ca:	230a      	movs	r3, #10
 80211cc:	f809 3004 	strb.w	r3, [r9, r4]
 80211d0:	3401      	adds	r4, #1
 80211d2:	e5f7      	b.n	8020dc4 <__strftime+0x204>
 80211d4:	68ab      	ldr	r3, [r5, #8]
 80211d6:	2b0b      	cmp	r3, #11
 80211d8:	bfcc      	ite	gt
 80211da:	22a4      	movgt	r2, #164	; 0xa4
 80211dc:	22a0      	movle	r2, #160	; 0xa0
 80211de:	4b64      	ldr	r3, [pc, #400]	; (8021370 <__strftime+0x7b0>)
 80211e0:	4413      	add	r3, r2
 80211e2:	685e      	ldr	r6, [r3, #4]
 80211e4:	4630      	mov	r0, r6
 80211e6:	f7df f829 	bl	800023c <strlen>
 80211ea:	1e72      	subs	r2, r6, #1
 80211ec:	4420      	add	r0, r4
 80211ee:	f108 36ff 	add.w	r6, r8, #4294967295
 80211f2:	42a0      	cmp	r0, r4
 80211f4:	f43f ade6 	beq.w	8020dc4 <__strftime+0x204>
 80211f8:	42a6      	cmp	r6, r4
 80211fa:	f67f ad10 	bls.w	8020c1e <__strftime+0x5e>
 80211fe:	f89b 1000 	ldrb.w	r1, [fp]
 8021202:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8021206:	2950      	cmp	r1, #80	; 0x50
 8021208:	d107      	bne.n	802121a <__strftime+0x65a>
 802120a:	495a      	ldr	r1, [pc, #360]	; (8021374 <__strftime+0x7b4>)
 802120c:	5cc9      	ldrb	r1, [r1, r3]
 802120e:	f001 0103 	and.w	r1, r1, #3
 8021212:	2901      	cmp	r1, #1
 8021214:	bf08      	it	eq
 8021216:	3320      	addeq	r3, #32
 8021218:	b2db      	uxtb	r3, r3
 802121a:	f809 3004 	strb.w	r3, [r9, r4]
 802121e:	3401      	adds	r4, #1
 8021220:	e7e7      	b.n	80211f2 <__strftime+0x632>
 8021222:	686b      	ldr	r3, [r5, #4]
 8021224:	9300      	str	r3, [sp, #0]
 8021226:	4a54      	ldr	r2, [pc, #336]	; (8021378 <__strftime+0x7b8>)
 8021228:	68ab      	ldr	r3, [r5, #8]
 802122a:	eba8 0104 	sub.w	r1, r8, r4
 802122e:	eb09 0004 	add.w	r0, r9, r4
 8021232:	f001 fd23 	bl	8022c7c <sniprintf>
 8021236:	e683      	b.n	8020f40 <__strftime+0x380>
 8021238:	6a2b      	ldr	r3, [r5, #32]
 802123a:	2b00      	cmp	r3, #0
 802123c:	db79      	blt.n	8021332 <__strftime+0x772>
 802123e:	f000 fb91 	bl	8021964 <__tz_lock>
 8021242:	9b04      	ldr	r3, [sp, #16]
 8021244:	b90b      	cbnz	r3, 802124a <__strftime+0x68a>
 8021246:	f000 fb99 	bl	802197c <_tzset_unlocked>
 802124a:	f000 ff55 	bl	80220f8 <__gettzinfo>
 802124e:	6a2b      	ldr	r3, [r5, #32]
 8021250:	2b00      	cmp	r3, #0
 8021252:	bfcc      	ite	gt
 8021254:	2350      	movgt	r3, #80	; 0x50
 8021256:	2328      	movle	r3, #40	; 0x28
 8021258:	58c3      	ldr	r3, [r0, r3]
 802125a:	f1c3 0a00 	rsb	sl, r3, #0
 802125e:	f000 fb87 	bl	8021970 <__tz_unlock>
 8021262:	2301      	movs	r3, #1
 8021264:	9304      	str	r3, [sp, #16]
 8021266:	f8d5 c014 	ldr.w	ip, [r5, #20]
 802126a:	4662      	mov	r2, ip
 802126c:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 8021270:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8021274:	9602      	str	r6, [sp, #8]
 8021276:	f143 36ff 	adc.w	r6, r3, #4294967295
 802127a:	9603      	str	r6, [sp, #12]
 802127c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8021280:	2e00      	cmp	r6, #0
 8021282:	f177 0600 	sbcs.w	r6, r7, #0
 8021286:	eba8 0104 	sub.w	r1, r8, r4
 802128a:	eb09 0004 	add.w	r0, r9, r4
 802128e:	da05      	bge.n	802129c <__strftime+0x6dc>
 8021290:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 8021294:	f143 33ff 	adc.w	r3, r3, #4294967295
 8021298:	9602      	str	r6, [sp, #8]
 802129a:	9303      	str	r3, [sp, #12]
 802129c:	9b02      	ldr	r3, [sp, #8]
 802129e:	089e      	lsrs	r6, r3, #2
 80212a0:	9b03      	ldr	r3, [sp, #12]
 80212a2:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 80212a6:	f10c 32ff 	add.w	r2, ip, #4294967295
 80212aa:	109f      	asrs	r7, r3, #2
 80212ac:	2364      	movs	r3, #100	; 0x64
 80212ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80212b2:	1af6      	subs	r6, r6, r3
 80212b4:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 80212b8:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 80212bc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80212c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80212c4:	18f6      	adds	r6, r6, r3
 80212c6:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 80212ca:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 80212ce:	f240 136d 	movw	r3, #365	; 0x16d
 80212d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80212d6:	69eb      	ldr	r3, [r5, #28]
 80212d8:	eb16 060c 	adds.w	r6, r6, ip
 80212dc:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 80212e0:	18f6      	adds	r6, r6, r3
 80212e2:	f04f 0c18 	mov.w	ip, #24
 80212e6:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 80212ea:	fba6 230c 	umull	r2, r3, r6, ip
 80212ee:	68ae      	ldr	r6, [r5, #8]
 80212f0:	fb0c 3307 	mla	r3, ip, r7, r3
 80212f4:	1992      	adds	r2, r2, r6
 80212f6:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 80212fa:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 80212fe:	fba2 670c 	umull	r6, r7, r2, ip
 8021302:	fb0c 7703 	mla	r7, ip, r3, r7
 8021306:	686b      	ldr	r3, [r5, #4]
 8021308:	18f6      	adds	r6, r6, r3
 802130a:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 802130e:	fba6 230c 	umull	r2, r3, r6, ip
 8021312:	682e      	ldr	r6, [r5, #0]
 8021314:	fb0c 3307 	mla	r3, ip, r7, r3
 8021318:	1992      	adds	r2, r2, r6
 802131a:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 802131e:	ebb2 020a 	subs.w	r2, r2, sl
 8021322:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 8021326:	e9cd 2300 	strd	r2, r3, [sp]
 802132a:	4a14      	ldr	r2, [pc, #80]	; (802137c <__strftime+0x7bc>)
 802132c:	f001 fca6 	bl	8022c7c <sniprintf>
 8021330:	e606      	b.n	8020f40 <__strftime+0x380>
 8021332:	f04f 0a00 	mov.w	sl, #0
 8021336:	e796      	b.n	8021266 <__strftime+0x6a6>
 8021338:	682b      	ldr	r3, [r5, #0]
 802133a:	e66a      	b.n	8021012 <__strftime+0x452>
 802133c:	f108 33ff 	add.w	r3, r8, #4294967295
 8021340:	42a3      	cmp	r3, r4
 8021342:	f67f ac6c 	bls.w	8020c1e <__strftime+0x5e>
 8021346:	2309      	movs	r3, #9
 8021348:	e740      	b.n	80211cc <__strftime+0x60c>
 802134a:	682b      	ldr	r3, [r5, #0]
 802134c:	9301      	str	r3, [sp, #4]
 802134e:	686b      	ldr	r3, [r5, #4]
 8021350:	9300      	str	r3, [sp, #0]
 8021352:	4a0b      	ldr	r2, [pc, #44]	; (8021380 <__strftime+0x7c0>)
 8021354:	68ab      	ldr	r3, [r5, #8]
 8021356:	e5e0      	b.n	8020f1a <__strftime+0x35a>
 8021358:	fffff894 	.word	0xfffff894
 802135c:	fffff895 	.word	0xfffff895
 8021360:	080296c3 	.word	0x080296c3
 8021364:	080296a4 	.word	0x080296a4
 8021368:	080296b2 	.word	0x080296b2
 802136c:	080296c7 	.word	0x080296c7
 8021370:	08029818 	.word	0x08029818
 8021374:	0802998d 	.word	0x0802998d
 8021378:	080296d6 	.word	0x080296d6
 802137c:	080296cc 	.word	0x080296cc
 8021380:	080296d1 	.word	0x080296d1
 8021384:	f108 33ff 	add.w	r3, r8, #4294967295
 8021388:	42a3      	cmp	r3, r4
 802138a:	f67f ac48 	bls.w	8020c1e <__strftime+0x5e>
 802138e:	69ab      	ldr	r3, [r5, #24]
 8021390:	eb09 0204 	add.w	r2, r9, r4
 8021394:	3401      	adds	r4, #1
 8021396:	b913      	cbnz	r3, 802139e <__strftime+0x7de>
 8021398:	2337      	movs	r3, #55	; 0x37
 802139a:	7013      	strb	r3, [r2, #0]
 802139c:	e512      	b.n	8020dc4 <__strftime+0x204>
 802139e:	3330      	adds	r3, #48	; 0x30
 80213a0:	e7fb      	b.n	802139a <__strftime+0x7da>
 80213a2:	69eb      	ldr	r3, [r5, #28]
 80213a4:	69aa      	ldr	r2, [r5, #24]
 80213a6:	3307      	adds	r3, #7
 80213a8:	1a9b      	subs	r3, r3, r2
 80213aa:	2207      	movs	r2, #7
 80213ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80213b0:	e62f      	b.n	8021012 <__strftime+0x452>
 80213b2:	4628      	mov	r0, r5
 80213b4:	f7ff fba2 	bl	8020afc <iso_year_adjust>
 80213b8:	69aa      	ldr	r2, [r5, #24]
 80213ba:	b132      	cbz	r2, 80213ca <__strftime+0x80a>
 80213bc:	3a01      	subs	r2, #1
 80213be:	2800      	cmp	r0, #0
 80213c0:	dc28      	bgt.n	8021414 <__strftime+0x854>
 80213c2:	69eb      	ldr	r3, [r5, #28]
 80213c4:	d103      	bne.n	80213ce <__strftime+0x80e>
 80213c6:	330a      	adds	r3, #10
 80213c8:	e7ee      	b.n	80213a8 <__strftime+0x7e8>
 80213ca:	2206      	movs	r2, #6
 80213cc:	e7f7      	b.n	80213be <__strftime+0x7fe>
 80213ce:	6968      	ldr	r0, [r5, #20]
 80213d0:	2800      	cmp	r0, #0
 80213d2:	eba2 0303 	sub.w	r3, r2, r3
 80213d6:	f240 726b 	movw	r2, #1899	; 0x76b
 80213da:	bfa8      	it	ge
 80213dc:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 80213e0:	4410      	add	r0, r2
 80213e2:	0782      	lsls	r2, r0, #30
 80213e4:	d105      	bne.n	80213f2 <__strftime+0x832>
 80213e6:	2264      	movs	r2, #100	; 0x64
 80213e8:	fb90 f1f2 	sdiv	r1, r0, r2
 80213ec:	fb02 0111 	mls	r1, r2, r1, r0
 80213f0:	b971      	cbnz	r1, 8021410 <__strftime+0x850>
 80213f2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80213f6:	fb90 f2f1 	sdiv	r2, r0, r1
 80213fa:	fb01 0212 	mls	r2, r1, r2, r0
 80213fe:	fab2 f282 	clz	r2, r2
 8021402:	0952      	lsrs	r2, r2, #5
 8021404:	1a9a      	subs	r2, r3, r2
 8021406:	2a05      	cmp	r2, #5
 8021408:	bfb4      	ite	lt
 802140a:	2335      	movlt	r3, #53	; 0x35
 802140c:	2334      	movge	r3, #52	; 0x34
 802140e:	e600      	b.n	8021012 <__strftime+0x452>
 8021410:	2201      	movs	r2, #1
 8021412:	e7f7      	b.n	8021404 <__strftime+0x844>
 8021414:	2301      	movs	r3, #1
 8021416:	e5fc      	b.n	8021012 <__strftime+0x452>
 8021418:	f108 33ff 	add.w	r3, r8, #4294967295
 802141c:	42a3      	cmp	r3, r4
 802141e:	f67f abfe 	bls.w	8020c1e <__strftime+0x5e>
 8021422:	69ab      	ldr	r3, [r5, #24]
 8021424:	3330      	adds	r3, #48	; 0x30
 8021426:	e6d1      	b.n	80211cc <__strftime+0x60c>
 8021428:	69ab      	ldr	r3, [r5, #24]
 802142a:	b13b      	cbz	r3, 802143c <__strftime+0x87c>
 802142c:	3b01      	subs	r3, #1
 802142e:	69ea      	ldr	r2, [r5, #28]
 8021430:	3207      	adds	r2, #7
 8021432:	1ad2      	subs	r2, r2, r3
 8021434:	2307      	movs	r3, #7
 8021436:	fb92 f3f3 	sdiv	r3, r2, r3
 802143a:	e5ea      	b.n	8021012 <__strftime+0x452>
 802143c:	2306      	movs	r3, #6
 802143e:	e7f6      	b.n	802142e <__strftime+0x86e>
 8021440:	6968      	ldr	r0, [r5, #20]
 8021442:	2800      	cmp	r0, #0
 8021444:	db05      	blt.n	8021452 <__strftime+0x892>
 8021446:	2264      	movs	r2, #100	; 0x64
 8021448:	fb90 f3f2 	sdiv	r3, r0, r2
 802144c:	fb03 0312 	mls	r3, r3, r2, r0
 8021450:	e5df      	b.n	8021012 <__strftime+0x452>
 8021452:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8021456:	f000 fd81 	bl	8021f5c <abs>
 802145a:	e7f4      	b.n	8021446 <__strftime+0x886>
 802145c:	696b      	ldr	r3, [r5, #20]
 802145e:	4a4c      	ldr	r2, [pc, #304]	; (8021590 <__strftime+0x9d0>)
 8021460:	4293      	cmp	r3, r2
 8021462:	da09      	bge.n	8021478 <__strftime+0x8b8>
 8021464:	212d      	movs	r1, #45	; 0x2d
 8021466:	f88d 1020 	strb.w	r1, [sp, #32]
 802146a:	eba2 0a03 	sub.w	sl, r2, r3
 802146e:	b106      	cbz	r6, 8021472 <__strftime+0x8b2>
 8021470:	3e01      	subs	r6, #1
 8021472:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8021476:	e00b      	b.n	8021490 <__strftime+0x8d0>
 8021478:	2f2b      	cmp	r7, #43	; 0x2b
 802147a:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 802147e:	d106      	bne.n	802148e <__strftime+0x8ce>
 8021480:	f242 730f 	movw	r3, #9999	; 0x270f
 8021484:	459a      	cmp	sl, r3
 8021486:	d902      	bls.n	802148e <__strftime+0x8ce>
 8021488:	f88d 7020 	strb.w	r7, [sp, #32]
 802148c:	e7ef      	b.n	802146e <__strftime+0x8ae>
 802148e:	ab08      	add	r3, sp, #32
 8021490:	2225      	movs	r2, #37	; 0x25
 8021492:	701a      	strb	r2, [r3, #0]
 8021494:	b937      	cbnz	r7, 80214a4 <__strftime+0x8e4>
 8021496:	1c58      	adds	r0, r3, #1
 8021498:	493e      	ldr	r1, [pc, #248]	; (8021594 <__strftime+0x9d4>)
 802149a:	f001 fc4f 	bl	8022d3c <strcpy>
 802149e:	f8cd a000 	str.w	sl, [sp]
 80214a2:	e665      	b.n	8021170 <__strftime+0x5b0>
 80214a4:	2230      	movs	r2, #48	; 0x30
 80214a6:	1c98      	adds	r0, r3, #2
 80214a8:	705a      	strb	r2, [r3, #1]
 80214aa:	e7f5      	b.n	8021498 <__strftime+0x8d8>
 80214ac:	6a2b      	ldr	r3, [r5, #32]
 80214ae:	2b00      	cmp	r3, #0
 80214b0:	f6ff ac88 	blt.w	8020dc4 <__strftime+0x204>
 80214b4:	f000 fa56 	bl	8021964 <__tz_lock>
 80214b8:	9b04      	ldr	r3, [sp, #16]
 80214ba:	b90b      	cbnz	r3, 80214c0 <__strftime+0x900>
 80214bc:	f000 fa5e 	bl	802197c <_tzset_unlocked>
 80214c0:	f000 fe1a 	bl	80220f8 <__gettzinfo>
 80214c4:	6a2b      	ldr	r3, [r5, #32]
 80214c6:	2b00      	cmp	r3, #0
 80214c8:	bfcc      	ite	gt
 80214ca:	2350      	movgt	r3, #80	; 0x50
 80214cc:	2328      	movle	r3, #40	; 0x28
 80214ce:	eb09 0704 	add.w	r7, r9, r4
 80214d2:	58c6      	ldr	r6, [r0, r3]
 80214d4:	f000 fa4c 	bl	8021970 <__tz_unlock>
 80214d8:	4276      	negs	r6, r6
 80214da:	233c      	movs	r3, #60	; 0x3c
 80214dc:	fb96 f0f3 	sdiv	r0, r6, r3
 80214e0:	f000 fece 	bl	8022280 <labs>
 80214e4:	233c      	movs	r3, #60	; 0x3c
 80214e6:	eba8 0a04 	sub.w	sl, r8, r4
 80214ea:	fb90 f2f3 	sdiv	r2, r0, r3
 80214ee:	fb02 0013 	mls	r0, r2, r3, r0
 80214f2:	9000      	str	r0, [sp, #0]
 80214f4:	4a28      	ldr	r2, [pc, #160]	; (8021598 <__strftime+0x9d8>)
 80214f6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80214fa:	4651      	mov	r1, sl
 80214fc:	4638      	mov	r0, r7
 80214fe:	fb96 f3f3 	sdiv	r3, r6, r3
 8021502:	f001 fbbb 	bl	8022c7c <sniprintf>
 8021506:	2800      	cmp	r0, #0
 8021508:	f6ff ab89 	blt.w	8020c1e <__strftime+0x5e>
 802150c:	4404      	add	r4, r0
 802150e:	45a0      	cmp	r8, r4
 8021510:	f67f ab85 	bls.w	8020c1e <__strftime+0x5e>
 8021514:	2301      	movs	r3, #1
 8021516:	9304      	str	r3, [sp, #16]
 8021518:	e454      	b.n	8020dc4 <__strftime+0x204>
 802151a:	6a2b      	ldr	r3, [r5, #32]
 802151c:	2b00      	cmp	r3, #0
 802151e:	f6ff ac51 	blt.w	8020dc4 <__strftime+0x204>
 8021522:	f000 fa1f 	bl	8021964 <__tz_lock>
 8021526:	9b04      	ldr	r3, [sp, #16]
 8021528:	b90b      	cbnz	r3, 802152e <__strftime+0x96e>
 802152a:	f000 fa27 	bl	802197c <_tzset_unlocked>
 802152e:	6a2b      	ldr	r3, [r5, #32]
 8021530:	4a1a      	ldr	r2, [pc, #104]	; (802159c <__strftime+0x9dc>)
 8021532:	2b00      	cmp	r3, #0
 8021534:	bfd4      	ite	le
 8021536:	2300      	movle	r3, #0
 8021538:	2301      	movgt	r3, #1
 802153a:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 802153e:	4630      	mov	r0, r6
 8021540:	f7de fe7c 	bl	800023c <strlen>
 8021544:	3e01      	subs	r6, #1
 8021546:	4420      	add	r0, r4
 8021548:	f108 33ff 	add.w	r3, r8, #4294967295
 802154c:	42a0      	cmp	r0, r4
 802154e:	d102      	bne.n	8021556 <__strftime+0x996>
 8021550:	f000 fa0e 	bl	8021970 <__tz_unlock>
 8021554:	e7de      	b.n	8021514 <__strftime+0x954>
 8021556:	42a3      	cmp	r3, r4
 8021558:	d905      	bls.n	8021566 <__strftime+0x9a6>
 802155a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 802155e:	f809 2004 	strb.w	r2, [r9, r4]
 8021562:	3401      	adds	r4, #1
 8021564:	e7f2      	b.n	802154c <__strftime+0x98c>
 8021566:	f000 fa03 	bl	8021970 <__tz_unlock>
 802156a:	f7ff bb58 	b.w	8020c1e <__strftime+0x5e>
 802156e:	f108 33ff 	add.w	r3, r8, #4294967295
 8021572:	42a3      	cmp	r3, r4
 8021574:	f67f ab53 	bls.w	8020c1e <__strftime+0x5e>
 8021578:	2325      	movs	r3, #37	; 0x25
 802157a:	e627      	b.n	80211cc <__strftime+0x60c>
 802157c:	f1b8 0f00 	cmp.w	r8, #0
 8021580:	d002      	beq.n	8021588 <__strftime+0x9c8>
 8021582:	2300      	movs	r3, #0
 8021584:	f809 3004 	strb.w	r3, [r9, r4]
 8021588:	4620      	mov	r0, r4
 802158a:	b011      	add	sp, #68	; 0x44
 802158c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021590:	fffff894 	.word	0xfffff894
 8021594:	080296c3 	.word	0x080296c3
 8021598:	080296e0 	.word	0x080296e0
 802159c:	2000016c 	.word	0x2000016c

080215a0 <strftime>:
 80215a0:	b513      	push	{r0, r1, r4, lr}
 80215a2:	4c03      	ldr	r4, [pc, #12]	; (80215b0 <strftime+0x10>)
 80215a4:	9400      	str	r4, [sp, #0]
 80215a6:	f7ff fb0b 	bl	8020bc0 <__strftime>
 80215aa:	b002      	add	sp, #8
 80215ac:	bd10      	pop	{r4, pc}
 80215ae:	bf00      	nop
 80215b0:	200001d0 	.word	0x200001d0

080215b4 <strstr>:
 80215b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80215b6:	780c      	ldrb	r4, [r1, #0]
 80215b8:	b164      	cbz	r4, 80215d4 <strstr+0x20>
 80215ba:	4603      	mov	r3, r0
 80215bc:	781a      	ldrb	r2, [r3, #0]
 80215be:	4618      	mov	r0, r3
 80215c0:	1c5e      	adds	r6, r3, #1
 80215c2:	b90a      	cbnz	r2, 80215c8 <strstr+0x14>
 80215c4:	4610      	mov	r0, r2
 80215c6:	e005      	b.n	80215d4 <strstr+0x20>
 80215c8:	4294      	cmp	r4, r2
 80215ca:	d108      	bne.n	80215de <strstr+0x2a>
 80215cc:	460d      	mov	r5, r1
 80215ce:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80215d2:	b902      	cbnz	r2, 80215d6 <strstr+0x22>
 80215d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80215d6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80215da:	4297      	cmp	r7, r2
 80215dc:	d0f7      	beq.n	80215ce <strstr+0x1a>
 80215de:	4633      	mov	r3, r6
 80215e0:	e7ec      	b.n	80215bc <strstr+0x8>
	...

080215e4 <_strtol_l.isra.0>:
 80215e4:	2b01      	cmp	r3, #1
 80215e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80215ea:	d001      	beq.n	80215f0 <_strtol_l.isra.0+0xc>
 80215ec:	2b24      	cmp	r3, #36	; 0x24
 80215ee:	d906      	bls.n	80215fe <_strtol_l.isra.0+0x1a>
 80215f0:	f7fe fa8c 	bl	801fb0c <__errno>
 80215f4:	2316      	movs	r3, #22
 80215f6:	6003      	str	r3, [r0, #0]
 80215f8:	2000      	movs	r0, #0
 80215fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80215fe:	4f3a      	ldr	r7, [pc, #232]	; (80216e8 <_strtol_l.isra.0+0x104>)
 8021600:	468e      	mov	lr, r1
 8021602:	4676      	mov	r6, lr
 8021604:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8021608:	5de5      	ldrb	r5, [r4, r7]
 802160a:	f015 0508 	ands.w	r5, r5, #8
 802160e:	d1f8      	bne.n	8021602 <_strtol_l.isra.0+0x1e>
 8021610:	2c2d      	cmp	r4, #45	; 0x2d
 8021612:	d134      	bne.n	802167e <_strtol_l.isra.0+0x9a>
 8021614:	f89e 4000 	ldrb.w	r4, [lr]
 8021618:	f04f 0801 	mov.w	r8, #1
 802161c:	f106 0e02 	add.w	lr, r6, #2
 8021620:	2b00      	cmp	r3, #0
 8021622:	d05c      	beq.n	80216de <_strtol_l.isra.0+0xfa>
 8021624:	2b10      	cmp	r3, #16
 8021626:	d10c      	bne.n	8021642 <_strtol_l.isra.0+0x5e>
 8021628:	2c30      	cmp	r4, #48	; 0x30
 802162a:	d10a      	bne.n	8021642 <_strtol_l.isra.0+0x5e>
 802162c:	f89e 4000 	ldrb.w	r4, [lr]
 8021630:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8021634:	2c58      	cmp	r4, #88	; 0x58
 8021636:	d14d      	bne.n	80216d4 <_strtol_l.isra.0+0xf0>
 8021638:	f89e 4001 	ldrb.w	r4, [lr, #1]
 802163c:	2310      	movs	r3, #16
 802163e:	f10e 0e02 	add.w	lr, lr, #2
 8021642:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8021646:	f10c 3cff 	add.w	ip, ip, #4294967295
 802164a:	2600      	movs	r6, #0
 802164c:	fbbc f9f3 	udiv	r9, ip, r3
 8021650:	4635      	mov	r5, r6
 8021652:	fb03 ca19 	mls	sl, r3, r9, ip
 8021656:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 802165a:	2f09      	cmp	r7, #9
 802165c:	d818      	bhi.n	8021690 <_strtol_l.isra.0+0xac>
 802165e:	463c      	mov	r4, r7
 8021660:	42a3      	cmp	r3, r4
 8021662:	dd24      	ble.n	80216ae <_strtol_l.isra.0+0xca>
 8021664:	2e00      	cmp	r6, #0
 8021666:	db1f      	blt.n	80216a8 <_strtol_l.isra.0+0xc4>
 8021668:	45a9      	cmp	r9, r5
 802166a:	d31d      	bcc.n	80216a8 <_strtol_l.isra.0+0xc4>
 802166c:	d101      	bne.n	8021672 <_strtol_l.isra.0+0x8e>
 802166e:	45a2      	cmp	sl, r4
 8021670:	db1a      	blt.n	80216a8 <_strtol_l.isra.0+0xc4>
 8021672:	fb05 4503 	mla	r5, r5, r3, r4
 8021676:	2601      	movs	r6, #1
 8021678:	f81e 4b01 	ldrb.w	r4, [lr], #1
 802167c:	e7eb      	b.n	8021656 <_strtol_l.isra.0+0x72>
 802167e:	2c2b      	cmp	r4, #43	; 0x2b
 8021680:	bf08      	it	eq
 8021682:	f89e 4000 	ldrbeq.w	r4, [lr]
 8021686:	46a8      	mov	r8, r5
 8021688:	bf08      	it	eq
 802168a:	f106 0e02 	addeq.w	lr, r6, #2
 802168e:	e7c7      	b.n	8021620 <_strtol_l.isra.0+0x3c>
 8021690:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8021694:	2f19      	cmp	r7, #25
 8021696:	d801      	bhi.n	802169c <_strtol_l.isra.0+0xb8>
 8021698:	3c37      	subs	r4, #55	; 0x37
 802169a:	e7e1      	b.n	8021660 <_strtol_l.isra.0+0x7c>
 802169c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80216a0:	2f19      	cmp	r7, #25
 80216a2:	d804      	bhi.n	80216ae <_strtol_l.isra.0+0xca>
 80216a4:	3c57      	subs	r4, #87	; 0x57
 80216a6:	e7db      	b.n	8021660 <_strtol_l.isra.0+0x7c>
 80216a8:	f04f 36ff 	mov.w	r6, #4294967295
 80216ac:	e7e4      	b.n	8021678 <_strtol_l.isra.0+0x94>
 80216ae:	2e00      	cmp	r6, #0
 80216b0:	da05      	bge.n	80216be <_strtol_l.isra.0+0xda>
 80216b2:	2322      	movs	r3, #34	; 0x22
 80216b4:	6003      	str	r3, [r0, #0]
 80216b6:	4665      	mov	r5, ip
 80216b8:	b942      	cbnz	r2, 80216cc <_strtol_l.isra.0+0xe8>
 80216ba:	4628      	mov	r0, r5
 80216bc:	e79d      	b.n	80215fa <_strtol_l.isra.0+0x16>
 80216be:	f1b8 0f00 	cmp.w	r8, #0
 80216c2:	d000      	beq.n	80216c6 <_strtol_l.isra.0+0xe2>
 80216c4:	426d      	negs	r5, r5
 80216c6:	2a00      	cmp	r2, #0
 80216c8:	d0f7      	beq.n	80216ba <_strtol_l.isra.0+0xd6>
 80216ca:	b10e      	cbz	r6, 80216d0 <_strtol_l.isra.0+0xec>
 80216cc:	f10e 31ff 	add.w	r1, lr, #4294967295
 80216d0:	6011      	str	r1, [r2, #0]
 80216d2:	e7f2      	b.n	80216ba <_strtol_l.isra.0+0xd6>
 80216d4:	2430      	movs	r4, #48	; 0x30
 80216d6:	2b00      	cmp	r3, #0
 80216d8:	d1b3      	bne.n	8021642 <_strtol_l.isra.0+0x5e>
 80216da:	2308      	movs	r3, #8
 80216dc:	e7b1      	b.n	8021642 <_strtol_l.isra.0+0x5e>
 80216de:	2c30      	cmp	r4, #48	; 0x30
 80216e0:	d0a4      	beq.n	802162c <_strtol_l.isra.0+0x48>
 80216e2:	230a      	movs	r3, #10
 80216e4:	e7ad      	b.n	8021642 <_strtol_l.isra.0+0x5e>
 80216e6:	bf00      	nop
 80216e8:	0802998d 	.word	0x0802998d

080216ec <_strtol_r>:
 80216ec:	f7ff bf7a 	b.w	80215e4 <_strtol_l.isra.0>

080216f0 <strtol>:
 80216f0:	4613      	mov	r3, r2
 80216f2:	460a      	mov	r2, r1
 80216f4:	4601      	mov	r1, r0
 80216f6:	4802      	ldr	r0, [pc, #8]	; (8021700 <strtol+0x10>)
 80216f8:	6800      	ldr	r0, [r0, #0]
 80216fa:	f7ff bf73 	b.w	80215e4 <_strtol_l.isra.0>
 80216fe:	bf00      	nop
 8021700:	20000108 	.word	0x20000108

08021704 <_strtoul_l.isra.0>:
 8021704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021708:	4e3b      	ldr	r6, [pc, #236]	; (80217f8 <_strtoul_l.isra.0+0xf4>)
 802170a:	4686      	mov	lr, r0
 802170c:	468c      	mov	ip, r1
 802170e:	4660      	mov	r0, ip
 8021710:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8021714:	5da5      	ldrb	r5, [r4, r6]
 8021716:	f015 0508 	ands.w	r5, r5, #8
 802171a:	d1f8      	bne.n	802170e <_strtoul_l.isra.0+0xa>
 802171c:	2c2d      	cmp	r4, #45	; 0x2d
 802171e:	d134      	bne.n	802178a <_strtoul_l.isra.0+0x86>
 8021720:	f89c 4000 	ldrb.w	r4, [ip]
 8021724:	f04f 0801 	mov.w	r8, #1
 8021728:	f100 0c02 	add.w	ip, r0, #2
 802172c:	2b00      	cmp	r3, #0
 802172e:	d05e      	beq.n	80217ee <_strtoul_l.isra.0+0xea>
 8021730:	2b10      	cmp	r3, #16
 8021732:	d10c      	bne.n	802174e <_strtoul_l.isra.0+0x4a>
 8021734:	2c30      	cmp	r4, #48	; 0x30
 8021736:	d10a      	bne.n	802174e <_strtoul_l.isra.0+0x4a>
 8021738:	f89c 0000 	ldrb.w	r0, [ip]
 802173c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8021740:	2858      	cmp	r0, #88	; 0x58
 8021742:	d14f      	bne.n	80217e4 <_strtoul_l.isra.0+0xe0>
 8021744:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8021748:	2310      	movs	r3, #16
 802174a:	f10c 0c02 	add.w	ip, ip, #2
 802174e:	f04f 37ff 	mov.w	r7, #4294967295
 8021752:	2500      	movs	r5, #0
 8021754:	fbb7 f7f3 	udiv	r7, r7, r3
 8021758:	fb03 f907 	mul.w	r9, r3, r7
 802175c:	ea6f 0909 	mvn.w	r9, r9
 8021760:	4628      	mov	r0, r5
 8021762:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8021766:	2e09      	cmp	r6, #9
 8021768:	d818      	bhi.n	802179c <_strtoul_l.isra.0+0x98>
 802176a:	4634      	mov	r4, r6
 802176c:	42a3      	cmp	r3, r4
 802176e:	dd24      	ble.n	80217ba <_strtoul_l.isra.0+0xb6>
 8021770:	2d00      	cmp	r5, #0
 8021772:	db1f      	blt.n	80217b4 <_strtoul_l.isra.0+0xb0>
 8021774:	4287      	cmp	r7, r0
 8021776:	d31d      	bcc.n	80217b4 <_strtoul_l.isra.0+0xb0>
 8021778:	d101      	bne.n	802177e <_strtoul_l.isra.0+0x7a>
 802177a:	45a1      	cmp	r9, r4
 802177c:	db1a      	blt.n	80217b4 <_strtoul_l.isra.0+0xb0>
 802177e:	fb00 4003 	mla	r0, r0, r3, r4
 8021782:	2501      	movs	r5, #1
 8021784:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8021788:	e7eb      	b.n	8021762 <_strtoul_l.isra.0+0x5e>
 802178a:	2c2b      	cmp	r4, #43	; 0x2b
 802178c:	bf08      	it	eq
 802178e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8021792:	46a8      	mov	r8, r5
 8021794:	bf08      	it	eq
 8021796:	f100 0c02 	addeq.w	ip, r0, #2
 802179a:	e7c7      	b.n	802172c <_strtoul_l.isra.0+0x28>
 802179c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80217a0:	2e19      	cmp	r6, #25
 80217a2:	d801      	bhi.n	80217a8 <_strtoul_l.isra.0+0xa4>
 80217a4:	3c37      	subs	r4, #55	; 0x37
 80217a6:	e7e1      	b.n	802176c <_strtoul_l.isra.0+0x68>
 80217a8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80217ac:	2e19      	cmp	r6, #25
 80217ae:	d804      	bhi.n	80217ba <_strtoul_l.isra.0+0xb6>
 80217b0:	3c57      	subs	r4, #87	; 0x57
 80217b2:	e7db      	b.n	802176c <_strtoul_l.isra.0+0x68>
 80217b4:	f04f 35ff 	mov.w	r5, #4294967295
 80217b8:	e7e4      	b.n	8021784 <_strtoul_l.isra.0+0x80>
 80217ba:	2d00      	cmp	r5, #0
 80217bc:	da07      	bge.n	80217ce <_strtoul_l.isra.0+0xca>
 80217be:	2322      	movs	r3, #34	; 0x22
 80217c0:	f8ce 3000 	str.w	r3, [lr]
 80217c4:	f04f 30ff 	mov.w	r0, #4294967295
 80217c8:	b942      	cbnz	r2, 80217dc <_strtoul_l.isra.0+0xd8>
 80217ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80217ce:	f1b8 0f00 	cmp.w	r8, #0
 80217d2:	d000      	beq.n	80217d6 <_strtoul_l.isra.0+0xd2>
 80217d4:	4240      	negs	r0, r0
 80217d6:	2a00      	cmp	r2, #0
 80217d8:	d0f7      	beq.n	80217ca <_strtoul_l.isra.0+0xc6>
 80217da:	b10d      	cbz	r5, 80217e0 <_strtoul_l.isra.0+0xdc>
 80217dc:	f10c 31ff 	add.w	r1, ip, #4294967295
 80217e0:	6011      	str	r1, [r2, #0]
 80217e2:	e7f2      	b.n	80217ca <_strtoul_l.isra.0+0xc6>
 80217e4:	2430      	movs	r4, #48	; 0x30
 80217e6:	2b00      	cmp	r3, #0
 80217e8:	d1b1      	bne.n	802174e <_strtoul_l.isra.0+0x4a>
 80217ea:	2308      	movs	r3, #8
 80217ec:	e7af      	b.n	802174e <_strtoul_l.isra.0+0x4a>
 80217ee:	2c30      	cmp	r4, #48	; 0x30
 80217f0:	d0a2      	beq.n	8021738 <_strtoul_l.isra.0+0x34>
 80217f2:	230a      	movs	r3, #10
 80217f4:	e7ab      	b.n	802174e <_strtoul_l.isra.0+0x4a>
 80217f6:	bf00      	nop
 80217f8:	0802998d 	.word	0x0802998d

080217fc <_strtoul_r>:
 80217fc:	f7ff bf82 	b.w	8021704 <_strtoul_l.isra.0>

08021800 <strtoul>:
 8021800:	4613      	mov	r3, r2
 8021802:	460a      	mov	r2, r1
 8021804:	4601      	mov	r1, r0
 8021806:	4802      	ldr	r0, [pc, #8]	; (8021810 <strtoul+0x10>)
 8021808:	6800      	ldr	r0, [r0, #0]
 802180a:	f7ff bf7b 	b.w	8021704 <_strtoul_l.isra.0>
 802180e:	bf00      	nop
 8021810:	20000108 	.word	0x20000108

08021814 <__tzcalc_limits>:
 8021814:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021818:	4680      	mov	r8, r0
 802181a:	f000 fc6d 	bl	80220f8 <__gettzinfo>
 802181e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8021822:	4598      	cmp	r8, r3
 8021824:	f340 8098 	ble.w	8021958 <__tzcalc_limits+0x144>
 8021828:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 802182c:	4443      	add	r3, r8
 802182e:	109b      	asrs	r3, r3, #2
 8021830:	f240 126d 	movw	r2, #365	; 0x16d
 8021834:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8021838:	fb02 3505 	mla	r5, r2, r5, r3
 802183c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8021840:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8021844:	fb93 f3f2 	sdiv	r3, r3, r2
 8021848:	441d      	add	r5, r3
 802184a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 802184e:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8021852:	fb98 f7f3 	sdiv	r7, r8, r3
 8021856:	fb03 8717 	mls	r7, r3, r7, r8
 802185a:	4442      	add	r2, r8
 802185c:	fab7 fc87 	clz	ip, r7
 8021860:	fbb2 f2f3 	udiv	r2, r2, r3
 8021864:	f008 0303 	and.w	r3, r8, #3
 8021868:	4415      	add	r5, r2
 802186a:	2264      	movs	r2, #100	; 0x64
 802186c:	f8c0 8004 	str.w	r8, [r0, #4]
 8021870:	fb98 f6f2 	sdiv	r6, r8, r2
 8021874:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8021878:	fb02 8616 	mls	r6, r2, r6, r8
 802187c:	4604      	mov	r4, r0
 802187e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8021882:	9300      	str	r3, [sp, #0]
 8021884:	f04f 0e07 	mov.w	lr, #7
 8021888:	7a22      	ldrb	r2, [r4, #8]
 802188a:	6963      	ldr	r3, [r4, #20]
 802188c:	2a4a      	cmp	r2, #74	; 0x4a
 802188e:	d128      	bne.n	80218e2 <__tzcalc_limits+0xce>
 8021890:	9900      	ldr	r1, [sp, #0]
 8021892:	18ea      	adds	r2, r5, r3
 8021894:	b901      	cbnz	r1, 8021898 <__tzcalc_limits+0x84>
 8021896:	b906      	cbnz	r6, 802189a <__tzcalc_limits+0x86>
 8021898:	bb0f      	cbnz	r7, 80218de <__tzcalc_limits+0xca>
 802189a:	2b3b      	cmp	r3, #59	; 0x3b
 802189c:	bfd4      	ite	le
 802189e:	2300      	movle	r3, #0
 80218a0:	2301      	movgt	r3, #1
 80218a2:	4413      	add	r3, r2
 80218a4:	1e5a      	subs	r2, r3, #1
 80218a6:	69a3      	ldr	r3, [r4, #24]
 80218a8:	492c      	ldr	r1, [pc, #176]	; (802195c <__tzcalc_limits+0x148>)
 80218aa:	fb01 3202 	mla	r2, r1, r2, r3
 80218ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80218b0:	4413      	add	r3, r2
 80218b2:	461a      	mov	r2, r3
 80218b4:	17db      	asrs	r3, r3, #31
 80218b6:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80218ba:	3428      	adds	r4, #40	; 0x28
 80218bc:	45a3      	cmp	fp, r4
 80218be:	d1e3      	bne.n	8021888 <__tzcalc_limits+0x74>
 80218c0:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80218c4:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80218c8:	4294      	cmp	r4, r2
 80218ca:	eb75 0303 	sbcs.w	r3, r5, r3
 80218ce:	bfb4      	ite	lt
 80218d0:	2301      	movlt	r3, #1
 80218d2:	2300      	movge	r3, #0
 80218d4:	6003      	str	r3, [r0, #0]
 80218d6:	2001      	movs	r0, #1
 80218d8:	b003      	add	sp, #12
 80218da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80218de:	2300      	movs	r3, #0
 80218e0:	e7df      	b.n	80218a2 <__tzcalc_limits+0x8e>
 80218e2:	2a44      	cmp	r2, #68	; 0x44
 80218e4:	d101      	bne.n	80218ea <__tzcalc_limits+0xd6>
 80218e6:	18ea      	adds	r2, r5, r3
 80218e8:	e7dd      	b.n	80218a6 <__tzcalc_limits+0x92>
 80218ea:	9a00      	ldr	r2, [sp, #0]
 80218ec:	bb72      	cbnz	r2, 802194c <__tzcalc_limits+0x138>
 80218ee:	2e00      	cmp	r6, #0
 80218f0:	bf0c      	ite	eq
 80218f2:	46e0      	moveq	r8, ip
 80218f4:	f04f 0801 	movne.w	r8, #1
 80218f8:	4919      	ldr	r1, [pc, #100]	; (8021960 <__tzcalc_limits+0x14c>)
 80218fa:	68e2      	ldr	r2, [r4, #12]
 80218fc:	9201      	str	r2, [sp, #4]
 80218fe:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8021902:	fb0a 1808 	mla	r8, sl, r8, r1
 8021906:	462a      	mov	r2, r5
 8021908:	f04f 0900 	mov.w	r9, #0
 802190c:	f1a8 0804 	sub.w	r8, r8, #4
 8021910:	9901      	ldr	r1, [sp, #4]
 8021912:	f109 0901 	add.w	r9, r9, #1
 8021916:	4549      	cmp	r1, r9
 8021918:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 802191c:	dc18      	bgt.n	8021950 <__tzcalc_limits+0x13c>
 802191e:	f102 0804 	add.w	r8, r2, #4
 8021922:	fb98 f9fe 	sdiv	r9, r8, lr
 8021926:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 802192a:	eba8 0909 	sub.w	r9, r8, r9
 802192e:	ebb3 0909 	subs.w	r9, r3, r9
 8021932:	6923      	ldr	r3, [r4, #16]
 8021934:	f103 33ff 	add.w	r3, r3, #4294967295
 8021938:	bf48      	it	mi
 802193a:	f109 0907 	addmi.w	r9, r9, #7
 802193e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8021942:	444b      	add	r3, r9
 8021944:	4553      	cmp	r3, sl
 8021946:	da05      	bge.n	8021954 <__tzcalc_limits+0x140>
 8021948:	441a      	add	r2, r3
 802194a:	e7ac      	b.n	80218a6 <__tzcalc_limits+0x92>
 802194c:	46e0      	mov	r8, ip
 802194e:	e7d3      	b.n	80218f8 <__tzcalc_limits+0xe4>
 8021950:	4452      	add	r2, sl
 8021952:	e7dd      	b.n	8021910 <__tzcalc_limits+0xfc>
 8021954:	3b07      	subs	r3, #7
 8021956:	e7f5      	b.n	8021944 <__tzcalc_limits+0x130>
 8021958:	2000      	movs	r0, #0
 802195a:	e7bd      	b.n	80218d8 <__tzcalc_limits+0xc4>
 802195c:	00015180 	.word	0x00015180
 8021960:	080295d4 	.word	0x080295d4

08021964 <__tz_lock>:
 8021964:	4801      	ldr	r0, [pc, #4]	; (802196c <__tz_lock+0x8>)
 8021966:	f7fe be29 	b.w	80205bc <__retarget_lock_acquire>
 802196a:	bf00      	nop
 802196c:	20000f8f 	.word	0x20000f8f

08021970 <__tz_unlock>:
 8021970:	4801      	ldr	r0, [pc, #4]	; (8021978 <__tz_unlock+0x8>)
 8021972:	f7fe be25 	b.w	80205c0 <__retarget_lock_release>
 8021976:	bf00      	nop
 8021978:	20000f8f 	.word	0x20000f8f

0802197c <_tzset_unlocked>:
 802197c:	4b01      	ldr	r3, [pc, #4]	; (8021984 <_tzset_unlocked+0x8>)
 802197e:	6818      	ldr	r0, [r3, #0]
 8021980:	f000 b802 	b.w	8021988 <_tzset_unlocked_r>
 8021984:	20000108 	.word	0x20000108

08021988 <_tzset_unlocked_r>:
 8021988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802198c:	b08d      	sub	sp, #52	; 0x34
 802198e:	4607      	mov	r7, r0
 8021990:	f000 fbb2 	bl	80220f8 <__gettzinfo>
 8021994:	49ae      	ldr	r1, [pc, #696]	; (8021c50 <_tzset_unlocked_r+0x2c8>)
 8021996:	4eaf      	ldr	r6, [pc, #700]	; (8021c54 <_tzset_unlocked_r+0x2cc>)
 8021998:	4605      	mov	r5, r0
 802199a:	4638      	mov	r0, r7
 802199c:	f000 fba4 	bl	80220e8 <_getenv_r>
 80219a0:	4604      	mov	r4, r0
 80219a2:	b970      	cbnz	r0, 80219c2 <_tzset_unlocked_r+0x3a>
 80219a4:	4bac      	ldr	r3, [pc, #688]	; (8021c58 <_tzset_unlocked_r+0x2d0>)
 80219a6:	4aad      	ldr	r2, [pc, #692]	; (8021c5c <_tzset_unlocked_r+0x2d4>)
 80219a8:	6018      	str	r0, [r3, #0]
 80219aa:	4bad      	ldr	r3, [pc, #692]	; (8021c60 <_tzset_unlocked_r+0x2d8>)
 80219ac:	6018      	str	r0, [r3, #0]
 80219ae:	4bad      	ldr	r3, [pc, #692]	; (8021c64 <_tzset_unlocked_r+0x2dc>)
 80219b0:	6830      	ldr	r0, [r6, #0]
 80219b2:	e9c3 2200 	strd	r2, r2, [r3]
 80219b6:	f7fe fe71 	bl	802069c <free>
 80219ba:	6034      	str	r4, [r6, #0]
 80219bc:	b00d      	add	sp, #52	; 0x34
 80219be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80219c2:	6831      	ldr	r1, [r6, #0]
 80219c4:	2900      	cmp	r1, #0
 80219c6:	d15f      	bne.n	8021a88 <_tzset_unlocked_r+0x100>
 80219c8:	6830      	ldr	r0, [r6, #0]
 80219ca:	f7fe fe67 	bl	802069c <free>
 80219ce:	4620      	mov	r0, r4
 80219d0:	f7de fc34 	bl	800023c <strlen>
 80219d4:	1c41      	adds	r1, r0, #1
 80219d6:	4638      	mov	r0, r7
 80219d8:	f7fe fede 	bl	8020798 <_malloc_r>
 80219dc:	6030      	str	r0, [r6, #0]
 80219de:	2800      	cmp	r0, #0
 80219e0:	d157      	bne.n	8021a92 <_tzset_unlocked_r+0x10a>
 80219e2:	7823      	ldrb	r3, [r4, #0]
 80219e4:	4aa0      	ldr	r2, [pc, #640]	; (8021c68 <_tzset_unlocked_r+0x2e0>)
 80219e6:	49a1      	ldr	r1, [pc, #644]	; (8021c6c <_tzset_unlocked_r+0x2e4>)
 80219e8:	2b3a      	cmp	r3, #58	; 0x3a
 80219ea:	bf08      	it	eq
 80219ec:	3401      	addeq	r4, #1
 80219ee:	ae0a      	add	r6, sp, #40	; 0x28
 80219f0:	4633      	mov	r3, r6
 80219f2:	4620      	mov	r0, r4
 80219f4:	f001 f976 	bl	8022ce4 <siscanf>
 80219f8:	2800      	cmp	r0, #0
 80219fa:	dddf      	ble.n	80219bc <_tzset_unlocked_r+0x34>
 80219fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80219fe:	18e7      	adds	r7, r4, r3
 8021a00:	5ce3      	ldrb	r3, [r4, r3]
 8021a02:	2b2d      	cmp	r3, #45	; 0x2d
 8021a04:	d149      	bne.n	8021a9a <_tzset_unlocked_r+0x112>
 8021a06:	3701      	adds	r7, #1
 8021a08:	f04f 34ff 	mov.w	r4, #4294967295
 8021a0c:	f10d 0a20 	add.w	sl, sp, #32
 8021a10:	f10d 0b1e 	add.w	fp, sp, #30
 8021a14:	f04f 0800 	mov.w	r8, #0
 8021a18:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8021a1c:	4994      	ldr	r1, [pc, #592]	; (8021c70 <_tzset_unlocked_r+0x2e8>)
 8021a1e:	9603      	str	r6, [sp, #12]
 8021a20:	f8cd b000 	str.w	fp, [sp]
 8021a24:	4633      	mov	r3, r6
 8021a26:	aa07      	add	r2, sp, #28
 8021a28:	4638      	mov	r0, r7
 8021a2a:	f8ad 801e 	strh.w	r8, [sp, #30]
 8021a2e:	f8ad 8020 	strh.w	r8, [sp, #32]
 8021a32:	f001 f957 	bl	8022ce4 <siscanf>
 8021a36:	4540      	cmp	r0, r8
 8021a38:	ddc0      	ble.n	80219bc <_tzset_unlocked_r+0x34>
 8021a3a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8021a3e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021a42:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8021c7c <_tzset_unlocked_r+0x2f4>
 8021a46:	213c      	movs	r1, #60	; 0x3c
 8021a48:	fb01 2203 	mla	r2, r1, r3, r2
 8021a4c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8021a50:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8021a54:	fb01 2303 	mla	r3, r1, r3, r2
 8021a58:	435c      	muls	r4, r3
 8021a5a:	62ac      	str	r4, [r5, #40]	; 0x28
 8021a5c:	4c81      	ldr	r4, [pc, #516]	; (8021c64 <_tzset_unlocked_r+0x2dc>)
 8021a5e:	4b82      	ldr	r3, [pc, #520]	; (8021c68 <_tzset_unlocked_r+0x2e0>)
 8021a60:	6023      	str	r3, [r4, #0]
 8021a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021a64:	4981      	ldr	r1, [pc, #516]	; (8021c6c <_tzset_unlocked_r+0x2e4>)
 8021a66:	441f      	add	r7, r3
 8021a68:	464a      	mov	r2, r9
 8021a6a:	4633      	mov	r3, r6
 8021a6c:	4638      	mov	r0, r7
 8021a6e:	f001 f939 	bl	8022ce4 <siscanf>
 8021a72:	4540      	cmp	r0, r8
 8021a74:	dc16      	bgt.n	8021aa4 <_tzset_unlocked_r+0x11c>
 8021a76:	6823      	ldr	r3, [r4, #0]
 8021a78:	6063      	str	r3, [r4, #4]
 8021a7a:	4b77      	ldr	r3, [pc, #476]	; (8021c58 <_tzset_unlocked_r+0x2d0>)
 8021a7c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8021a7e:	601a      	str	r2, [r3, #0]
 8021a80:	4b77      	ldr	r3, [pc, #476]	; (8021c60 <_tzset_unlocked_r+0x2d8>)
 8021a82:	f8c3 8000 	str.w	r8, [r3]
 8021a86:	e799      	b.n	80219bc <_tzset_unlocked_r+0x34>
 8021a88:	f7de fbe0 	bl	800024c <strcmp>
 8021a8c:	2800      	cmp	r0, #0
 8021a8e:	d19b      	bne.n	80219c8 <_tzset_unlocked_r+0x40>
 8021a90:	e794      	b.n	80219bc <_tzset_unlocked_r+0x34>
 8021a92:	4621      	mov	r1, r4
 8021a94:	f001 f952 	bl	8022d3c <strcpy>
 8021a98:	e7a3      	b.n	80219e2 <_tzset_unlocked_r+0x5a>
 8021a9a:	2b2b      	cmp	r3, #43	; 0x2b
 8021a9c:	bf08      	it	eq
 8021a9e:	3701      	addeq	r7, #1
 8021aa0:	2401      	movs	r4, #1
 8021aa2:	e7b3      	b.n	8021a0c <_tzset_unlocked_r+0x84>
 8021aa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021aa6:	f8c4 9004 	str.w	r9, [r4, #4]
 8021aaa:	18fc      	adds	r4, r7, r3
 8021aac:	5cfb      	ldrb	r3, [r7, r3]
 8021aae:	2b2d      	cmp	r3, #45	; 0x2d
 8021ab0:	f040 808b 	bne.w	8021bca <_tzset_unlocked_r+0x242>
 8021ab4:	3401      	adds	r4, #1
 8021ab6:	f04f 37ff 	mov.w	r7, #4294967295
 8021aba:	2300      	movs	r3, #0
 8021abc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021ac0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021ac4:	f8ad 3020 	strh.w	r3, [sp, #32]
 8021ac8:	930a      	str	r3, [sp, #40]	; 0x28
 8021aca:	e9cd a602 	strd	sl, r6, [sp, #8]
 8021ace:	e9cd b600 	strd	fp, r6, [sp]
 8021ad2:	4967      	ldr	r1, [pc, #412]	; (8021c70 <_tzset_unlocked_r+0x2e8>)
 8021ad4:	4633      	mov	r3, r6
 8021ad6:	aa07      	add	r2, sp, #28
 8021ad8:	4620      	mov	r0, r4
 8021ada:	f001 f903 	bl	8022ce4 <siscanf>
 8021ade:	2800      	cmp	r0, #0
 8021ae0:	dc78      	bgt.n	8021bd4 <_tzset_unlocked_r+0x24c>
 8021ae2:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8021ae4:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8021ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021aea:	652f      	str	r7, [r5, #80]	; 0x50
 8021aec:	441c      	add	r4, r3
 8021aee:	462f      	mov	r7, r5
 8021af0:	f04f 0900 	mov.w	r9, #0
 8021af4:	7823      	ldrb	r3, [r4, #0]
 8021af6:	2b2c      	cmp	r3, #44	; 0x2c
 8021af8:	bf08      	it	eq
 8021afa:	3401      	addeq	r4, #1
 8021afc:	f894 8000 	ldrb.w	r8, [r4]
 8021b00:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8021b04:	d178      	bne.n	8021bf8 <_tzset_unlocked_r+0x270>
 8021b06:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8021b0a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8021b0e:	ab09      	add	r3, sp, #36	; 0x24
 8021b10:	9300      	str	r3, [sp, #0]
 8021b12:	4958      	ldr	r1, [pc, #352]	; (8021c74 <_tzset_unlocked_r+0x2ec>)
 8021b14:	9603      	str	r6, [sp, #12]
 8021b16:	4633      	mov	r3, r6
 8021b18:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8021b1c:	4620      	mov	r0, r4
 8021b1e:	f001 f8e1 	bl	8022ce4 <siscanf>
 8021b22:	2803      	cmp	r0, #3
 8021b24:	f47f af4a 	bne.w	80219bc <_tzset_unlocked_r+0x34>
 8021b28:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8021b2c:	1e4b      	subs	r3, r1, #1
 8021b2e:	2b0b      	cmp	r3, #11
 8021b30:	f63f af44 	bhi.w	80219bc <_tzset_unlocked_r+0x34>
 8021b34:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8021b38:	1e53      	subs	r3, r2, #1
 8021b3a:	2b04      	cmp	r3, #4
 8021b3c:	f63f af3e 	bhi.w	80219bc <_tzset_unlocked_r+0x34>
 8021b40:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8021b44:	2b06      	cmp	r3, #6
 8021b46:	f63f af39 	bhi.w	80219bc <_tzset_unlocked_r+0x34>
 8021b4a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8021b4e:	f887 8008 	strb.w	r8, [r7, #8]
 8021b52:	617b      	str	r3, [r7, #20]
 8021b54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021b56:	eb04 0803 	add.w	r8, r4, r3
 8021b5a:	2302      	movs	r3, #2
 8021b5c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021b60:	2300      	movs	r3, #0
 8021b62:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021b66:	f8ad 3020 	strh.w	r3, [sp, #32]
 8021b6a:	930a      	str	r3, [sp, #40]	; 0x28
 8021b6c:	f898 3000 	ldrb.w	r3, [r8]
 8021b70:	2b2f      	cmp	r3, #47	; 0x2f
 8021b72:	d109      	bne.n	8021b88 <_tzset_unlocked_r+0x200>
 8021b74:	e9cd a602 	strd	sl, r6, [sp, #8]
 8021b78:	e9cd b600 	strd	fp, r6, [sp]
 8021b7c:	493e      	ldr	r1, [pc, #248]	; (8021c78 <_tzset_unlocked_r+0x2f0>)
 8021b7e:	4633      	mov	r3, r6
 8021b80:	aa07      	add	r2, sp, #28
 8021b82:	4640      	mov	r0, r8
 8021b84:	f001 f8ae 	bl	8022ce4 <siscanf>
 8021b88:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8021b8c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021b90:	213c      	movs	r1, #60	; 0x3c
 8021b92:	fb01 2203 	mla	r2, r1, r3, r2
 8021b96:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8021b9a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8021b9e:	fb01 2303 	mla	r3, r1, r3, r2
 8021ba2:	61bb      	str	r3, [r7, #24]
 8021ba4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021ba6:	3728      	adds	r7, #40	; 0x28
 8021ba8:	4444      	add	r4, r8
 8021baa:	f1b9 0f00 	cmp.w	r9, #0
 8021bae:	d020      	beq.n	8021bf2 <_tzset_unlocked_r+0x26a>
 8021bb0:	6868      	ldr	r0, [r5, #4]
 8021bb2:	f7ff fe2f 	bl	8021814 <__tzcalc_limits>
 8021bb6:	4b28      	ldr	r3, [pc, #160]	; (8021c58 <_tzset_unlocked_r+0x2d0>)
 8021bb8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8021bba:	601a      	str	r2, [r3, #0]
 8021bbc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8021bbe:	1a9b      	subs	r3, r3, r2
 8021bc0:	4a27      	ldr	r2, [pc, #156]	; (8021c60 <_tzset_unlocked_r+0x2d8>)
 8021bc2:	bf18      	it	ne
 8021bc4:	2301      	movne	r3, #1
 8021bc6:	6013      	str	r3, [r2, #0]
 8021bc8:	e6f8      	b.n	80219bc <_tzset_unlocked_r+0x34>
 8021bca:	2b2b      	cmp	r3, #43	; 0x2b
 8021bcc:	bf08      	it	eq
 8021bce:	3401      	addeq	r4, #1
 8021bd0:	2701      	movs	r7, #1
 8021bd2:	e772      	b.n	8021aba <_tzset_unlocked_r+0x132>
 8021bd4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8021bd8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021bdc:	213c      	movs	r1, #60	; 0x3c
 8021bde:	fb01 2203 	mla	r2, r1, r3, r2
 8021be2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8021be6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8021bea:	fb01 2303 	mla	r3, r1, r3, r2
 8021bee:	435f      	muls	r7, r3
 8021bf0:	e77a      	b.n	8021ae8 <_tzset_unlocked_r+0x160>
 8021bf2:	f04f 0901 	mov.w	r9, #1
 8021bf6:	e77d      	b.n	8021af4 <_tzset_unlocked_r+0x16c>
 8021bf8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8021bfc:	bf06      	itte	eq
 8021bfe:	3401      	addeq	r4, #1
 8021c00:	4643      	moveq	r3, r8
 8021c02:	2344      	movne	r3, #68	; 0x44
 8021c04:	220a      	movs	r2, #10
 8021c06:	a90b      	add	r1, sp, #44	; 0x2c
 8021c08:	4620      	mov	r0, r4
 8021c0a:	9305      	str	r3, [sp, #20]
 8021c0c:	f7ff fdf8 	bl	8021800 <strtoul>
 8021c10:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8021c14:	9b05      	ldr	r3, [sp, #20]
 8021c16:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8021c1a:	45a0      	cmp	r8, r4
 8021c1c:	d114      	bne.n	8021c48 <_tzset_unlocked_r+0x2c0>
 8021c1e:	234d      	movs	r3, #77	; 0x4d
 8021c20:	f1b9 0f00 	cmp.w	r9, #0
 8021c24:	d107      	bne.n	8021c36 <_tzset_unlocked_r+0x2ae>
 8021c26:	722b      	strb	r3, [r5, #8]
 8021c28:	2103      	movs	r1, #3
 8021c2a:	2302      	movs	r3, #2
 8021c2c:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8021c30:	f8c5 9014 	str.w	r9, [r5, #20]
 8021c34:	e791      	b.n	8021b5a <_tzset_unlocked_r+0x1d2>
 8021c36:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8021c3a:	220b      	movs	r2, #11
 8021c3c:	2301      	movs	r3, #1
 8021c3e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8021c42:	2300      	movs	r3, #0
 8021c44:	63eb      	str	r3, [r5, #60]	; 0x3c
 8021c46:	e788      	b.n	8021b5a <_tzset_unlocked_r+0x1d2>
 8021c48:	b280      	uxth	r0, r0
 8021c4a:	723b      	strb	r3, [r7, #8]
 8021c4c:	6178      	str	r0, [r7, #20]
 8021c4e:	e784      	b.n	8021b5a <_tzset_unlocked_r+0x1d2>
 8021c50:	08029914 	.word	0x08029914
 8021c54:	20000ee8 	.word	0x20000ee8
 8021c58:	20000ef0 	.word	0x20000ef0
 8021c5c:	08029917 	.word	0x08029917
 8021c60:	20000eec 	.word	0x20000eec
 8021c64:	2000016c 	.word	0x2000016c
 8021c68:	20000edb 	.word	0x20000edb
 8021c6c:	0802991b 	.word	0x0802991b
 8021c70:	0802993e 	.word	0x0802993e
 8021c74:	0802992a 	.word	0x0802992a
 8021c78:	0802993d 	.word	0x0802993d
 8021c7c:	20000ed0 	.word	0x20000ed0

08021c80 <_vsniprintf_r>:
 8021c80:	b530      	push	{r4, r5, lr}
 8021c82:	1e14      	subs	r4, r2, #0
 8021c84:	4605      	mov	r5, r0
 8021c86:	b09b      	sub	sp, #108	; 0x6c
 8021c88:	4618      	mov	r0, r3
 8021c8a:	da05      	bge.n	8021c98 <_vsniprintf_r+0x18>
 8021c8c:	238b      	movs	r3, #139	; 0x8b
 8021c8e:	602b      	str	r3, [r5, #0]
 8021c90:	f04f 30ff 	mov.w	r0, #4294967295
 8021c94:	b01b      	add	sp, #108	; 0x6c
 8021c96:	bd30      	pop	{r4, r5, pc}
 8021c98:	f44f 7302 	mov.w	r3, #520	; 0x208
 8021c9c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8021ca0:	bf14      	ite	ne
 8021ca2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8021ca6:	4623      	moveq	r3, r4
 8021ca8:	9302      	str	r3, [sp, #8]
 8021caa:	9305      	str	r3, [sp, #20]
 8021cac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021cb0:	9100      	str	r1, [sp, #0]
 8021cb2:	9104      	str	r1, [sp, #16]
 8021cb4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021cb8:	4602      	mov	r2, r0
 8021cba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021cbc:	4669      	mov	r1, sp
 8021cbe:	4628      	mov	r0, r5
 8021cc0:	f000 fb94 	bl	80223ec <_svfiprintf_r>
 8021cc4:	1c43      	adds	r3, r0, #1
 8021cc6:	bfbc      	itt	lt
 8021cc8:	238b      	movlt	r3, #139	; 0x8b
 8021cca:	602b      	strlt	r3, [r5, #0]
 8021ccc:	2c00      	cmp	r4, #0
 8021cce:	d0e1      	beq.n	8021c94 <_vsniprintf_r+0x14>
 8021cd0:	9b00      	ldr	r3, [sp, #0]
 8021cd2:	2200      	movs	r2, #0
 8021cd4:	701a      	strb	r2, [r3, #0]
 8021cd6:	e7dd      	b.n	8021c94 <_vsniprintf_r+0x14>

08021cd8 <vsniprintf>:
 8021cd8:	b507      	push	{r0, r1, r2, lr}
 8021cda:	9300      	str	r3, [sp, #0]
 8021cdc:	4613      	mov	r3, r2
 8021cde:	460a      	mov	r2, r1
 8021ce0:	4601      	mov	r1, r0
 8021ce2:	4803      	ldr	r0, [pc, #12]	; (8021cf0 <vsniprintf+0x18>)
 8021ce4:	6800      	ldr	r0, [r0, #0]
 8021ce6:	f7ff ffcb 	bl	8021c80 <_vsniprintf_r>
 8021cea:	b003      	add	sp, #12
 8021cec:	f85d fb04 	ldr.w	pc, [sp], #4
 8021cf0:	20000108 	.word	0x20000108

08021cf4 <__swbuf_r>:
 8021cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021cf6:	460e      	mov	r6, r1
 8021cf8:	4614      	mov	r4, r2
 8021cfa:	4605      	mov	r5, r0
 8021cfc:	b118      	cbz	r0, 8021d06 <__swbuf_r+0x12>
 8021cfe:	6983      	ldr	r3, [r0, #24]
 8021d00:	b90b      	cbnz	r3, 8021d06 <__swbuf_r+0x12>
 8021d02:	f7fe f8a9 	bl	801fe58 <__sinit>
 8021d06:	4b21      	ldr	r3, [pc, #132]	; (8021d8c <__swbuf_r+0x98>)
 8021d08:	429c      	cmp	r4, r3
 8021d0a:	d12b      	bne.n	8021d64 <__swbuf_r+0x70>
 8021d0c:	686c      	ldr	r4, [r5, #4]
 8021d0e:	69a3      	ldr	r3, [r4, #24]
 8021d10:	60a3      	str	r3, [r4, #8]
 8021d12:	89a3      	ldrh	r3, [r4, #12]
 8021d14:	071a      	lsls	r2, r3, #28
 8021d16:	d52f      	bpl.n	8021d78 <__swbuf_r+0x84>
 8021d18:	6923      	ldr	r3, [r4, #16]
 8021d1a:	b36b      	cbz	r3, 8021d78 <__swbuf_r+0x84>
 8021d1c:	6923      	ldr	r3, [r4, #16]
 8021d1e:	6820      	ldr	r0, [r4, #0]
 8021d20:	1ac0      	subs	r0, r0, r3
 8021d22:	6963      	ldr	r3, [r4, #20]
 8021d24:	b2f6      	uxtb	r6, r6
 8021d26:	4283      	cmp	r3, r0
 8021d28:	4637      	mov	r7, r6
 8021d2a:	dc04      	bgt.n	8021d36 <__swbuf_r+0x42>
 8021d2c:	4621      	mov	r1, r4
 8021d2e:	4628      	mov	r0, r5
 8021d30:	f7fd ffec 	bl	801fd0c <_fflush_r>
 8021d34:	bb30      	cbnz	r0, 8021d84 <__swbuf_r+0x90>
 8021d36:	68a3      	ldr	r3, [r4, #8]
 8021d38:	3b01      	subs	r3, #1
 8021d3a:	60a3      	str	r3, [r4, #8]
 8021d3c:	6823      	ldr	r3, [r4, #0]
 8021d3e:	1c5a      	adds	r2, r3, #1
 8021d40:	6022      	str	r2, [r4, #0]
 8021d42:	701e      	strb	r6, [r3, #0]
 8021d44:	6963      	ldr	r3, [r4, #20]
 8021d46:	3001      	adds	r0, #1
 8021d48:	4283      	cmp	r3, r0
 8021d4a:	d004      	beq.n	8021d56 <__swbuf_r+0x62>
 8021d4c:	89a3      	ldrh	r3, [r4, #12]
 8021d4e:	07db      	lsls	r3, r3, #31
 8021d50:	d506      	bpl.n	8021d60 <__swbuf_r+0x6c>
 8021d52:	2e0a      	cmp	r6, #10
 8021d54:	d104      	bne.n	8021d60 <__swbuf_r+0x6c>
 8021d56:	4621      	mov	r1, r4
 8021d58:	4628      	mov	r0, r5
 8021d5a:	f7fd ffd7 	bl	801fd0c <_fflush_r>
 8021d5e:	b988      	cbnz	r0, 8021d84 <__swbuf_r+0x90>
 8021d60:	4638      	mov	r0, r7
 8021d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021d64:	4b0a      	ldr	r3, [pc, #40]	; (8021d90 <__swbuf_r+0x9c>)
 8021d66:	429c      	cmp	r4, r3
 8021d68:	d101      	bne.n	8021d6e <__swbuf_r+0x7a>
 8021d6a:	68ac      	ldr	r4, [r5, #8]
 8021d6c:	e7cf      	b.n	8021d0e <__swbuf_r+0x1a>
 8021d6e:	4b09      	ldr	r3, [pc, #36]	; (8021d94 <__swbuf_r+0xa0>)
 8021d70:	429c      	cmp	r4, r3
 8021d72:	bf08      	it	eq
 8021d74:	68ec      	ldreq	r4, [r5, #12]
 8021d76:	e7ca      	b.n	8021d0e <__swbuf_r+0x1a>
 8021d78:	4621      	mov	r1, r4
 8021d7a:	4628      	mov	r0, r5
 8021d7c:	f000 f81e 	bl	8021dbc <__swsetup_r>
 8021d80:	2800      	cmp	r0, #0
 8021d82:	d0cb      	beq.n	8021d1c <__swbuf_r+0x28>
 8021d84:	f04f 37ff 	mov.w	r7, #4294967295
 8021d88:	e7ea      	b.n	8021d60 <__swbuf_r+0x6c>
 8021d8a:	bf00      	nop
 8021d8c:	08029518 	.word	0x08029518
 8021d90:	08029538 	.word	0x08029538
 8021d94:	080294f8 	.word	0x080294f8

08021d98 <_write_r>:
 8021d98:	b538      	push	{r3, r4, r5, lr}
 8021d9a:	4d07      	ldr	r5, [pc, #28]	; (8021db8 <_write_r+0x20>)
 8021d9c:	4604      	mov	r4, r0
 8021d9e:	4608      	mov	r0, r1
 8021da0:	4611      	mov	r1, r2
 8021da2:	2200      	movs	r2, #0
 8021da4:	602a      	str	r2, [r5, #0]
 8021da6:	461a      	mov	r2, r3
 8021da8:	f7df f812 	bl	8000dd0 <_write>
 8021dac:	1c43      	adds	r3, r0, #1
 8021dae:	d102      	bne.n	8021db6 <_write_r+0x1e>
 8021db0:	682b      	ldr	r3, [r5, #0]
 8021db2:	b103      	cbz	r3, 8021db6 <_write_r+0x1e>
 8021db4:	6023      	str	r3, [r4, #0]
 8021db6:	bd38      	pop	{r3, r4, r5, pc}
 8021db8:	20000f94 	.word	0x20000f94

08021dbc <__swsetup_r>:
 8021dbc:	4b32      	ldr	r3, [pc, #200]	; (8021e88 <__swsetup_r+0xcc>)
 8021dbe:	b570      	push	{r4, r5, r6, lr}
 8021dc0:	681d      	ldr	r5, [r3, #0]
 8021dc2:	4606      	mov	r6, r0
 8021dc4:	460c      	mov	r4, r1
 8021dc6:	b125      	cbz	r5, 8021dd2 <__swsetup_r+0x16>
 8021dc8:	69ab      	ldr	r3, [r5, #24]
 8021dca:	b913      	cbnz	r3, 8021dd2 <__swsetup_r+0x16>
 8021dcc:	4628      	mov	r0, r5
 8021dce:	f7fe f843 	bl	801fe58 <__sinit>
 8021dd2:	4b2e      	ldr	r3, [pc, #184]	; (8021e8c <__swsetup_r+0xd0>)
 8021dd4:	429c      	cmp	r4, r3
 8021dd6:	d10f      	bne.n	8021df8 <__swsetup_r+0x3c>
 8021dd8:	686c      	ldr	r4, [r5, #4]
 8021dda:	89a3      	ldrh	r3, [r4, #12]
 8021ddc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021de0:	0719      	lsls	r1, r3, #28
 8021de2:	d42c      	bmi.n	8021e3e <__swsetup_r+0x82>
 8021de4:	06dd      	lsls	r5, r3, #27
 8021de6:	d411      	bmi.n	8021e0c <__swsetup_r+0x50>
 8021de8:	2309      	movs	r3, #9
 8021dea:	6033      	str	r3, [r6, #0]
 8021dec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8021df0:	81a3      	strh	r3, [r4, #12]
 8021df2:	f04f 30ff 	mov.w	r0, #4294967295
 8021df6:	e03e      	b.n	8021e76 <__swsetup_r+0xba>
 8021df8:	4b25      	ldr	r3, [pc, #148]	; (8021e90 <__swsetup_r+0xd4>)
 8021dfa:	429c      	cmp	r4, r3
 8021dfc:	d101      	bne.n	8021e02 <__swsetup_r+0x46>
 8021dfe:	68ac      	ldr	r4, [r5, #8]
 8021e00:	e7eb      	b.n	8021dda <__swsetup_r+0x1e>
 8021e02:	4b24      	ldr	r3, [pc, #144]	; (8021e94 <__swsetup_r+0xd8>)
 8021e04:	429c      	cmp	r4, r3
 8021e06:	bf08      	it	eq
 8021e08:	68ec      	ldreq	r4, [r5, #12]
 8021e0a:	e7e6      	b.n	8021dda <__swsetup_r+0x1e>
 8021e0c:	0758      	lsls	r0, r3, #29
 8021e0e:	d512      	bpl.n	8021e36 <__swsetup_r+0x7a>
 8021e10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021e12:	b141      	cbz	r1, 8021e26 <__swsetup_r+0x6a>
 8021e14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021e18:	4299      	cmp	r1, r3
 8021e1a:	d002      	beq.n	8021e22 <__swsetup_r+0x66>
 8021e1c:	4630      	mov	r0, r6
 8021e1e:	f7fe fc6b 	bl	80206f8 <_free_r>
 8021e22:	2300      	movs	r3, #0
 8021e24:	6363      	str	r3, [r4, #52]	; 0x34
 8021e26:	89a3      	ldrh	r3, [r4, #12]
 8021e28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8021e2c:	81a3      	strh	r3, [r4, #12]
 8021e2e:	2300      	movs	r3, #0
 8021e30:	6063      	str	r3, [r4, #4]
 8021e32:	6923      	ldr	r3, [r4, #16]
 8021e34:	6023      	str	r3, [r4, #0]
 8021e36:	89a3      	ldrh	r3, [r4, #12]
 8021e38:	f043 0308 	orr.w	r3, r3, #8
 8021e3c:	81a3      	strh	r3, [r4, #12]
 8021e3e:	6923      	ldr	r3, [r4, #16]
 8021e40:	b94b      	cbnz	r3, 8021e56 <__swsetup_r+0x9a>
 8021e42:	89a3      	ldrh	r3, [r4, #12]
 8021e44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8021e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021e4c:	d003      	beq.n	8021e56 <__swsetup_r+0x9a>
 8021e4e:	4621      	mov	r1, r4
 8021e50:	4630      	mov	r0, r6
 8021e52:	f7fe fbdb 	bl	802060c <__smakebuf_r>
 8021e56:	89a0      	ldrh	r0, [r4, #12]
 8021e58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021e5c:	f010 0301 	ands.w	r3, r0, #1
 8021e60:	d00a      	beq.n	8021e78 <__swsetup_r+0xbc>
 8021e62:	2300      	movs	r3, #0
 8021e64:	60a3      	str	r3, [r4, #8]
 8021e66:	6963      	ldr	r3, [r4, #20]
 8021e68:	425b      	negs	r3, r3
 8021e6a:	61a3      	str	r3, [r4, #24]
 8021e6c:	6923      	ldr	r3, [r4, #16]
 8021e6e:	b943      	cbnz	r3, 8021e82 <__swsetup_r+0xc6>
 8021e70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8021e74:	d1ba      	bne.n	8021dec <__swsetup_r+0x30>
 8021e76:	bd70      	pop	{r4, r5, r6, pc}
 8021e78:	0781      	lsls	r1, r0, #30
 8021e7a:	bf58      	it	pl
 8021e7c:	6963      	ldrpl	r3, [r4, #20]
 8021e7e:	60a3      	str	r3, [r4, #8]
 8021e80:	e7f4      	b.n	8021e6c <__swsetup_r+0xb0>
 8021e82:	2000      	movs	r0, #0
 8021e84:	e7f7      	b.n	8021e76 <__swsetup_r+0xba>
 8021e86:	bf00      	nop
 8021e88:	20000108 	.word	0x20000108
 8021e8c:	08029518 	.word	0x08029518
 8021e90:	08029538 	.word	0x08029538
 8021e94:	080294f8 	.word	0x080294f8

08021e98 <__register_exitproc>:
 8021e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021e9c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8021f58 <__register_exitproc+0xc0>
 8021ea0:	4606      	mov	r6, r0
 8021ea2:	f8d8 0000 	ldr.w	r0, [r8]
 8021ea6:	461f      	mov	r7, r3
 8021ea8:	460d      	mov	r5, r1
 8021eaa:	4691      	mov	r9, r2
 8021eac:	f7fe fb87 	bl	80205be <__retarget_lock_acquire_recursive>
 8021eb0:	4b25      	ldr	r3, [pc, #148]	; (8021f48 <__register_exitproc+0xb0>)
 8021eb2:	681c      	ldr	r4, [r3, #0]
 8021eb4:	b934      	cbnz	r4, 8021ec4 <__register_exitproc+0x2c>
 8021eb6:	4c25      	ldr	r4, [pc, #148]	; (8021f4c <__register_exitproc+0xb4>)
 8021eb8:	601c      	str	r4, [r3, #0]
 8021eba:	4b25      	ldr	r3, [pc, #148]	; (8021f50 <__register_exitproc+0xb8>)
 8021ebc:	b113      	cbz	r3, 8021ec4 <__register_exitproc+0x2c>
 8021ebe:	681b      	ldr	r3, [r3, #0]
 8021ec0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8021ec4:	6863      	ldr	r3, [r4, #4]
 8021ec6:	2b1f      	cmp	r3, #31
 8021ec8:	dd07      	ble.n	8021eda <__register_exitproc+0x42>
 8021eca:	f8d8 0000 	ldr.w	r0, [r8]
 8021ece:	f7fe fb78 	bl	80205c2 <__retarget_lock_release_recursive>
 8021ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8021ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021eda:	b34e      	cbz	r6, 8021f30 <__register_exitproc+0x98>
 8021edc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8021ee0:	b988      	cbnz	r0, 8021f06 <__register_exitproc+0x6e>
 8021ee2:	4b1c      	ldr	r3, [pc, #112]	; (8021f54 <__register_exitproc+0xbc>)
 8021ee4:	b923      	cbnz	r3, 8021ef0 <__register_exitproc+0x58>
 8021ee6:	f8d8 0000 	ldr.w	r0, [r8]
 8021eea:	f7fe fb69 	bl	80205c0 <__retarget_lock_release>
 8021eee:	e7f0      	b.n	8021ed2 <__register_exitproc+0x3a>
 8021ef0:	f44f 7084 	mov.w	r0, #264	; 0x108
 8021ef4:	f7fe fbca 	bl	802068c <malloc>
 8021ef8:	2800      	cmp	r0, #0
 8021efa:	d0f4      	beq.n	8021ee6 <__register_exitproc+0x4e>
 8021efc:	2300      	movs	r3, #0
 8021efe:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8021f02:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8021f06:	6863      	ldr	r3, [r4, #4]
 8021f08:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8021f0c:	2201      	movs	r2, #1
 8021f0e:	409a      	lsls	r2, r3
 8021f10:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8021f14:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8021f18:	4313      	orrs	r3, r2
 8021f1a:	2e02      	cmp	r6, #2
 8021f1c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8021f20:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8021f24:	bf02      	ittt	eq
 8021f26:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8021f2a:	431a      	orreq	r2, r3
 8021f2c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8021f30:	6863      	ldr	r3, [r4, #4]
 8021f32:	f8d8 0000 	ldr.w	r0, [r8]
 8021f36:	1c5a      	adds	r2, r3, #1
 8021f38:	3302      	adds	r3, #2
 8021f3a:	6062      	str	r2, [r4, #4]
 8021f3c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8021f40:	f7fe fb3f 	bl	80205c2 <__retarget_lock_release_recursive>
 8021f44:	2000      	movs	r0, #0
 8021f46:	e7c6      	b.n	8021ed6 <__register_exitproc+0x3e>
 8021f48:	20000f80 	.word	0x20000f80
 8021f4c:	20000ef4 	.word	0x20000ef4
 8021f50:	00000000 	.word	0x00000000
 8021f54:	0802068d 	.word	0x0802068d
 8021f58:	20000174 	.word	0x20000174

08021f5c <abs>:
 8021f5c:	2800      	cmp	r0, #0
 8021f5e:	bfb8      	it	lt
 8021f60:	4240      	neglt	r0, r0
 8021f62:	4770      	bx	lr

08021f64 <__assert_func>:
 8021f64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021f66:	4614      	mov	r4, r2
 8021f68:	461a      	mov	r2, r3
 8021f6a:	4b09      	ldr	r3, [pc, #36]	; (8021f90 <__assert_func+0x2c>)
 8021f6c:	681b      	ldr	r3, [r3, #0]
 8021f6e:	4605      	mov	r5, r0
 8021f70:	68d8      	ldr	r0, [r3, #12]
 8021f72:	b14c      	cbz	r4, 8021f88 <__assert_func+0x24>
 8021f74:	4b07      	ldr	r3, [pc, #28]	; (8021f94 <__assert_func+0x30>)
 8021f76:	9100      	str	r1, [sp, #0]
 8021f78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021f7c:	4906      	ldr	r1, [pc, #24]	; (8021f98 <__assert_func+0x34>)
 8021f7e:	462b      	mov	r3, r5
 8021f80:	f000 f854 	bl	802202c <fiprintf>
 8021f84:	f7fd fda8 	bl	801fad8 <abort>
 8021f88:	4b04      	ldr	r3, [pc, #16]	; (8021f9c <__assert_func+0x38>)
 8021f8a:	461c      	mov	r4, r3
 8021f8c:	e7f3      	b.n	8021f76 <__assert_func+0x12>
 8021f8e:	bf00      	nop
 8021f90:	20000108 	.word	0x20000108
 8021f94:	08029950 	.word	0x08029950
 8021f98:	0802995d 	.word	0x0802995d
 8021f9c:	0802998b 	.word	0x0802998b

08021fa0 <_close_r>:
 8021fa0:	b538      	push	{r3, r4, r5, lr}
 8021fa2:	4d06      	ldr	r5, [pc, #24]	; (8021fbc <_close_r+0x1c>)
 8021fa4:	2300      	movs	r3, #0
 8021fa6:	4604      	mov	r4, r0
 8021fa8:	4608      	mov	r0, r1
 8021faa:	602b      	str	r3, [r5, #0]
 8021fac:	f7de ff2c 	bl	8000e08 <_close>
 8021fb0:	1c43      	adds	r3, r0, #1
 8021fb2:	d102      	bne.n	8021fba <_close_r+0x1a>
 8021fb4:	682b      	ldr	r3, [r5, #0]
 8021fb6:	b103      	cbz	r3, 8021fba <_close_r+0x1a>
 8021fb8:	6023      	str	r3, [r4, #0]
 8021fba:	bd38      	pop	{r3, r4, r5, pc}
 8021fbc:	20000f94 	.word	0x20000f94

08021fc0 <__sflags>:
 8021fc0:	780b      	ldrb	r3, [r1, #0]
 8021fc2:	2b72      	cmp	r3, #114	; 0x72
 8021fc4:	b530      	push	{r4, r5, lr}
 8021fc6:	d022      	beq.n	802200e <__sflags+0x4e>
 8021fc8:	2b77      	cmp	r3, #119	; 0x77
 8021fca:	d024      	beq.n	8022016 <__sflags+0x56>
 8021fcc:	2b61      	cmp	r3, #97	; 0x61
 8021fce:	d027      	beq.n	8022020 <__sflags+0x60>
 8021fd0:	2316      	movs	r3, #22
 8021fd2:	6003      	str	r3, [r0, #0]
 8021fd4:	2000      	movs	r0, #0
 8021fd6:	bd30      	pop	{r4, r5, pc}
 8021fd8:	2d62      	cmp	r5, #98	; 0x62
 8021fda:	d012      	beq.n	8022002 <__sflags+0x42>
 8021fdc:	2d78      	cmp	r5, #120	; 0x78
 8021fde:	d013      	beq.n	8022008 <__sflags+0x48>
 8021fe0:	2d2b      	cmp	r5, #43	; 0x2b
 8021fe2:	d107      	bne.n	8021ff4 <__sflags+0x34>
 8021fe4:	f020 001c 	bic.w	r0, r0, #28
 8021fe8:	f023 0303 	bic.w	r3, r3, #3
 8021fec:	f040 0010 	orr.w	r0, r0, #16
 8021ff0:	f043 0302 	orr.w	r3, r3, #2
 8021ff4:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8021ff8:	2d00      	cmp	r5, #0
 8021ffa:	d1ed      	bne.n	8021fd8 <__sflags+0x18>
 8021ffc:	4323      	orrs	r3, r4
 8021ffe:	6013      	str	r3, [r2, #0]
 8022000:	e7e9      	b.n	8021fd6 <__sflags+0x16>
 8022002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8022006:	e7f5      	b.n	8021ff4 <__sflags+0x34>
 8022008:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 802200c:	e7f2      	b.n	8021ff4 <__sflags+0x34>
 802200e:	2400      	movs	r4, #0
 8022010:	4623      	mov	r3, r4
 8022012:	2004      	movs	r0, #4
 8022014:	e7ee      	b.n	8021ff4 <__sflags+0x34>
 8022016:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 802201a:	2301      	movs	r3, #1
 802201c:	2008      	movs	r0, #8
 802201e:	e7e9      	b.n	8021ff4 <__sflags+0x34>
 8022020:	f44f 7402 	mov.w	r4, #520	; 0x208
 8022024:	2301      	movs	r3, #1
 8022026:	f44f 7084 	mov.w	r0, #264	; 0x108
 802202a:	e7e3      	b.n	8021ff4 <__sflags+0x34>

0802202c <fiprintf>:
 802202c:	b40e      	push	{r1, r2, r3}
 802202e:	b503      	push	{r0, r1, lr}
 8022030:	4601      	mov	r1, r0
 8022032:	ab03      	add	r3, sp, #12
 8022034:	4805      	ldr	r0, [pc, #20]	; (802204c <fiprintf+0x20>)
 8022036:	f853 2b04 	ldr.w	r2, [r3], #4
 802203a:	6800      	ldr	r0, [r0, #0]
 802203c:	9301      	str	r3, [sp, #4]
 802203e:	f000 faff 	bl	8022640 <_vfiprintf_r>
 8022042:	b002      	add	sp, #8
 8022044:	f85d eb04 	ldr.w	lr, [sp], #4
 8022048:	b003      	add	sp, #12
 802204a:	4770      	bx	lr
 802204c:	20000108 	.word	0x20000108

08022050 <_fstat_r>:
 8022050:	b538      	push	{r3, r4, r5, lr}
 8022052:	4d07      	ldr	r5, [pc, #28]	; (8022070 <_fstat_r+0x20>)
 8022054:	2300      	movs	r3, #0
 8022056:	4604      	mov	r4, r0
 8022058:	4608      	mov	r0, r1
 802205a:	4611      	mov	r1, r2
 802205c:	602b      	str	r3, [r5, #0]
 802205e:	f7de fedf 	bl	8000e20 <_fstat>
 8022062:	1c43      	adds	r3, r0, #1
 8022064:	d102      	bne.n	802206c <_fstat_r+0x1c>
 8022066:	682b      	ldr	r3, [r5, #0]
 8022068:	b103      	cbz	r3, 802206c <_fstat_r+0x1c>
 802206a:	6023      	str	r3, [r4, #0]
 802206c:	bd38      	pop	{r3, r4, r5, pc}
 802206e:	bf00      	nop
 8022070:	20000f94 	.word	0x20000f94

08022074 <_findenv_r>:
 8022074:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022078:	4607      	mov	r7, r0
 802207a:	4689      	mov	r9, r1
 802207c:	4616      	mov	r6, r2
 802207e:	f000 fe85 	bl	8022d8c <__env_lock>
 8022082:	4b18      	ldr	r3, [pc, #96]	; (80220e4 <_findenv_r+0x70>)
 8022084:	681c      	ldr	r4, [r3, #0]
 8022086:	469a      	mov	sl, r3
 8022088:	b134      	cbz	r4, 8022098 <_findenv_r+0x24>
 802208a:	464b      	mov	r3, r9
 802208c:	4698      	mov	r8, r3
 802208e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8022092:	b139      	cbz	r1, 80220a4 <_findenv_r+0x30>
 8022094:	293d      	cmp	r1, #61	; 0x3d
 8022096:	d1f9      	bne.n	802208c <_findenv_r+0x18>
 8022098:	4638      	mov	r0, r7
 802209a:	f000 fe7d 	bl	8022d98 <__env_unlock>
 802209e:	2000      	movs	r0, #0
 80220a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80220a4:	eba8 0809 	sub.w	r8, r8, r9
 80220a8:	46a3      	mov	fp, r4
 80220aa:	f854 0b04 	ldr.w	r0, [r4], #4
 80220ae:	2800      	cmp	r0, #0
 80220b0:	d0f2      	beq.n	8022098 <_findenv_r+0x24>
 80220b2:	4642      	mov	r2, r8
 80220b4:	4649      	mov	r1, r9
 80220b6:	f000 fe49 	bl	8022d4c <strncmp>
 80220ba:	2800      	cmp	r0, #0
 80220bc:	d1f4      	bne.n	80220a8 <_findenv_r+0x34>
 80220be:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80220c2:	eb03 0508 	add.w	r5, r3, r8
 80220c6:	f813 3008 	ldrb.w	r3, [r3, r8]
 80220ca:	2b3d      	cmp	r3, #61	; 0x3d
 80220cc:	d1ec      	bne.n	80220a8 <_findenv_r+0x34>
 80220ce:	f8da 3000 	ldr.w	r3, [sl]
 80220d2:	ebab 0303 	sub.w	r3, fp, r3
 80220d6:	109b      	asrs	r3, r3, #2
 80220d8:	4638      	mov	r0, r7
 80220da:	6033      	str	r3, [r6, #0]
 80220dc:	f000 fe5c 	bl	8022d98 <__env_unlock>
 80220e0:	1c68      	adds	r0, r5, #1
 80220e2:	e7dd      	b.n	80220a0 <_findenv_r+0x2c>
 80220e4:	20000000 	.word	0x20000000

080220e8 <_getenv_r>:
 80220e8:	b507      	push	{r0, r1, r2, lr}
 80220ea:	aa01      	add	r2, sp, #4
 80220ec:	f7ff ffc2 	bl	8022074 <_findenv_r>
 80220f0:	b003      	add	sp, #12
 80220f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080220f8 <__gettzinfo>:
 80220f8:	4800      	ldr	r0, [pc, #0]	; (80220fc <__gettzinfo+0x4>)
 80220fa:	4770      	bx	lr
 80220fc:	20000178 	.word	0x20000178

08022100 <gmtime_r>:
 8022100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022104:	e9d0 6700 	ldrd	r6, r7, [r0]
 8022108:	460c      	mov	r4, r1
 802210a:	4a51      	ldr	r2, [pc, #324]	; (8022250 <gmtime_r+0x150>)
 802210c:	2300      	movs	r3, #0
 802210e:	4630      	mov	r0, r6
 8022110:	4639      	mov	r1, r7
 8022112:	f7de fb4f 	bl	80007b4 <__aeabi_ldivmod>
 8022116:	4639      	mov	r1, r7
 8022118:	4605      	mov	r5, r0
 802211a:	4a4d      	ldr	r2, [pc, #308]	; (8022250 <gmtime_r+0x150>)
 802211c:	4630      	mov	r0, r6
 802211e:	2300      	movs	r3, #0
 8022120:	f7de fb48 	bl	80007b4 <__aeabi_ldivmod>
 8022124:	2a00      	cmp	r2, #0
 8022126:	bfbc      	itt	lt
 8022128:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 802212c:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8022130:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8022134:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8022138:	fbb2 f3f1 	udiv	r3, r2, r1
 802213c:	fb01 2213 	mls	r2, r1, r3, r2
 8022140:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8022144:	bfac      	ite	ge
 8022146:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 802214a:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 802214e:	60a3      	str	r3, [r4, #8]
 8022150:	fbb2 f3f1 	udiv	r3, r2, r1
 8022154:	fb01 2213 	mls	r2, r1, r3, r2
 8022158:	6063      	str	r3, [r4, #4]
 802215a:	6022      	str	r2, [r4, #0]
 802215c:	1cc3      	adds	r3, r0, #3
 802215e:	2207      	movs	r2, #7
 8022160:	fb93 f2f2 	sdiv	r2, r3, r2
 8022164:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8022168:	1a9b      	subs	r3, r3, r2
 802216a:	bf48      	it	mi
 802216c:	3307      	addmi	r3, #7
 802216e:	2800      	cmp	r0, #0
 8022170:	61a3      	str	r3, [r4, #24]
 8022172:	bfb8      	it	lt
 8022174:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8022178:	4936      	ldr	r1, [pc, #216]	; (8022254 <gmtime_r+0x154>)
 802217a:	bfae      	itee	ge
 802217c:	fb90 f1f1 	sdivge	r1, r0, r1
 8022180:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8022184:	fb93 f1f1 	sdivlt	r1, r3, r1
 8022188:	4b33      	ldr	r3, [pc, #204]	; (8022258 <gmtime_r+0x158>)
 802218a:	fb03 0001 	mla	r0, r3, r1, r0
 802218e:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8022192:	fbb0 f2f2 	udiv	r2, r0, r2
 8022196:	4402      	add	r2, r0
 8022198:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 802219c:	fbb0 f3fc 	udiv	r3, r0, ip
 80221a0:	1ad2      	subs	r2, r2, r3
 80221a2:	f240 176d 	movw	r7, #365	; 0x16d
 80221a6:	4b2d      	ldr	r3, [pc, #180]	; (802225c <gmtime_r+0x15c>)
 80221a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80221ac:	2664      	movs	r6, #100	; 0x64
 80221ae:	1ad3      	subs	r3, r2, r3
 80221b0:	fbb3 f5f7 	udiv	r5, r3, r7
 80221b4:	fbb3 f3fc 	udiv	r3, r3, ip
 80221b8:	fbb5 f2f6 	udiv	r2, r5, r6
 80221bc:	1ad3      	subs	r3, r2, r3
 80221be:	4403      	add	r3, r0
 80221c0:	fb07 3315 	mls	r3, r7, r5, r3
 80221c4:	2099      	movs	r0, #153	; 0x99
 80221c6:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80221ca:	f10c 0c02 	add.w	ip, ip, #2
 80221ce:	f103 0e01 	add.w	lr, r3, #1
 80221d2:	fbbc f7f0 	udiv	r7, ip, r0
 80221d6:	4378      	muls	r0, r7
 80221d8:	3002      	adds	r0, #2
 80221da:	f04f 0805 	mov.w	r8, #5
 80221de:	fbb0 f0f8 	udiv	r0, r0, r8
 80221e2:	ebae 0000 	sub.w	r0, lr, r0
 80221e6:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80221ea:	45f4      	cmp	ip, lr
 80221ec:	bf94      	ite	ls
 80221ee:	f04f 0c02 	movls.w	ip, #2
 80221f2:	f06f 0c09 	mvnhi.w	ip, #9
 80221f6:	4467      	add	r7, ip
 80221f8:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80221fc:	fb0c 5101 	mla	r1, ip, r1, r5
 8022200:	2f01      	cmp	r7, #1
 8022202:	bf98      	it	ls
 8022204:	3101      	addls	r1, #1
 8022206:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 802220a:	d30c      	bcc.n	8022226 <gmtime_r+0x126>
 802220c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8022210:	61e3      	str	r3, [r4, #28]
 8022212:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 8022216:	2300      	movs	r3, #0
 8022218:	60e0      	str	r0, [r4, #12]
 802221a:	e9c4 7104 	strd	r7, r1, [r4, #16]
 802221e:	6223      	str	r3, [r4, #32]
 8022220:	4620      	mov	r0, r4
 8022222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022226:	f015 0f03 	tst.w	r5, #3
 802222a:	d102      	bne.n	8022232 <gmtime_r+0x132>
 802222c:	fb06 5212 	mls	r2, r6, r2, r5
 8022230:	b95a      	cbnz	r2, 802224a <gmtime_r+0x14a>
 8022232:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8022236:	fbb5 f2f6 	udiv	r2, r5, r6
 802223a:	fb06 5212 	mls	r2, r6, r2, r5
 802223e:	fab2 f282 	clz	r2, r2
 8022242:	0952      	lsrs	r2, r2, #5
 8022244:	333b      	adds	r3, #59	; 0x3b
 8022246:	4413      	add	r3, r2
 8022248:	e7e2      	b.n	8022210 <gmtime_r+0x110>
 802224a:	2201      	movs	r2, #1
 802224c:	e7fa      	b.n	8022244 <gmtime_r+0x144>
 802224e:	bf00      	nop
 8022250:	00015180 	.word	0x00015180
 8022254:	00023ab1 	.word	0x00023ab1
 8022258:	fffdc54f 	.word	0xfffdc54f
 802225c:	00023ab0 	.word	0x00023ab0

08022260 <_isatty_r>:
 8022260:	b538      	push	{r3, r4, r5, lr}
 8022262:	4d06      	ldr	r5, [pc, #24]	; (802227c <_isatty_r+0x1c>)
 8022264:	2300      	movs	r3, #0
 8022266:	4604      	mov	r4, r0
 8022268:	4608      	mov	r0, r1
 802226a:	602b      	str	r3, [r5, #0]
 802226c:	f7de fde8 	bl	8000e40 <_isatty>
 8022270:	1c43      	adds	r3, r0, #1
 8022272:	d102      	bne.n	802227a <_isatty_r+0x1a>
 8022274:	682b      	ldr	r3, [r5, #0]
 8022276:	b103      	cbz	r3, 802227a <_isatty_r+0x1a>
 8022278:	6023      	str	r3, [r4, #0]
 802227a:	bd38      	pop	{r3, r4, r5, pc}
 802227c:	20000f94 	.word	0x20000f94

08022280 <labs>:
 8022280:	2800      	cmp	r0, #0
 8022282:	bfb8      	it	lt
 8022284:	4240      	neglt	r0, r0
 8022286:	4770      	bx	lr

08022288 <_lseek_r>:
 8022288:	b538      	push	{r3, r4, r5, lr}
 802228a:	4d07      	ldr	r5, [pc, #28]	; (80222a8 <_lseek_r+0x20>)
 802228c:	4604      	mov	r4, r0
 802228e:	4608      	mov	r0, r1
 8022290:	4611      	mov	r1, r2
 8022292:	2200      	movs	r2, #0
 8022294:	602a      	str	r2, [r5, #0]
 8022296:	461a      	mov	r2, r3
 8022298:	f7de fddd 	bl	8000e56 <_lseek>
 802229c:	1c43      	adds	r3, r0, #1
 802229e:	d102      	bne.n	80222a6 <_lseek_r+0x1e>
 80222a0:	682b      	ldr	r3, [r5, #0]
 80222a2:	b103      	cbz	r3, 80222a6 <_lseek_r+0x1e>
 80222a4:	6023      	str	r3, [r4, #0]
 80222a6:	bd38      	pop	{r3, r4, r5, pc}
 80222a8:	20000f94 	.word	0x20000f94

080222ac <__ascii_mbtowc>:
 80222ac:	b082      	sub	sp, #8
 80222ae:	b901      	cbnz	r1, 80222b2 <__ascii_mbtowc+0x6>
 80222b0:	a901      	add	r1, sp, #4
 80222b2:	b142      	cbz	r2, 80222c6 <__ascii_mbtowc+0x1a>
 80222b4:	b14b      	cbz	r3, 80222ca <__ascii_mbtowc+0x1e>
 80222b6:	7813      	ldrb	r3, [r2, #0]
 80222b8:	600b      	str	r3, [r1, #0]
 80222ba:	7812      	ldrb	r2, [r2, #0]
 80222bc:	1e10      	subs	r0, r2, #0
 80222be:	bf18      	it	ne
 80222c0:	2001      	movne	r0, #1
 80222c2:	b002      	add	sp, #8
 80222c4:	4770      	bx	lr
 80222c6:	4610      	mov	r0, r2
 80222c8:	e7fb      	b.n	80222c2 <__ascii_mbtowc+0x16>
 80222ca:	f06f 0001 	mvn.w	r0, #1
 80222ce:	e7f8      	b.n	80222c2 <__ascii_mbtowc+0x16>

080222d0 <__malloc_lock>:
 80222d0:	4801      	ldr	r0, [pc, #4]	; (80222d8 <__malloc_lock+0x8>)
 80222d2:	f7fe b974 	b.w	80205be <__retarget_lock_acquire_recursive>
 80222d6:	bf00      	nop
 80222d8:	20000f8c 	.word	0x20000f8c

080222dc <__malloc_unlock>:
 80222dc:	4801      	ldr	r0, [pc, #4]	; (80222e4 <__malloc_unlock+0x8>)
 80222de:	f7fe b970 	b.w	80205c2 <__retarget_lock_release_recursive>
 80222e2:	bf00      	nop
 80222e4:	20000f8c 	.word	0x20000f8c

080222e8 <_realloc_r>:
 80222e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80222ea:	4607      	mov	r7, r0
 80222ec:	4614      	mov	r4, r2
 80222ee:	460e      	mov	r6, r1
 80222f0:	b921      	cbnz	r1, 80222fc <_realloc_r+0x14>
 80222f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80222f6:	4611      	mov	r1, r2
 80222f8:	f7fe ba4e 	b.w	8020798 <_malloc_r>
 80222fc:	b922      	cbnz	r2, 8022308 <_realloc_r+0x20>
 80222fe:	f7fe f9fb 	bl	80206f8 <_free_r>
 8022302:	4625      	mov	r5, r4
 8022304:	4628      	mov	r0, r5
 8022306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022308:	f000 fd66 	bl	8022dd8 <_malloc_usable_size_r>
 802230c:	42a0      	cmp	r0, r4
 802230e:	d20f      	bcs.n	8022330 <_realloc_r+0x48>
 8022310:	4621      	mov	r1, r4
 8022312:	4638      	mov	r0, r7
 8022314:	f7fe fa40 	bl	8020798 <_malloc_r>
 8022318:	4605      	mov	r5, r0
 802231a:	2800      	cmp	r0, #0
 802231c:	d0f2      	beq.n	8022304 <_realloc_r+0x1c>
 802231e:	4631      	mov	r1, r6
 8022320:	4622      	mov	r2, r4
 8022322:	f7fe f9c3 	bl	80206ac <memcpy>
 8022326:	4631      	mov	r1, r6
 8022328:	4638      	mov	r0, r7
 802232a:	f7fe f9e5 	bl	80206f8 <_free_r>
 802232e:	e7e9      	b.n	8022304 <_realloc_r+0x1c>
 8022330:	4635      	mov	r5, r6
 8022332:	e7e7      	b.n	8022304 <_realloc_r+0x1c>

08022334 <__ssputs_r>:
 8022334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022338:	688e      	ldr	r6, [r1, #8]
 802233a:	429e      	cmp	r6, r3
 802233c:	4682      	mov	sl, r0
 802233e:	460c      	mov	r4, r1
 8022340:	4690      	mov	r8, r2
 8022342:	461f      	mov	r7, r3
 8022344:	d838      	bhi.n	80223b8 <__ssputs_r+0x84>
 8022346:	898a      	ldrh	r2, [r1, #12]
 8022348:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802234c:	d032      	beq.n	80223b4 <__ssputs_r+0x80>
 802234e:	6825      	ldr	r5, [r4, #0]
 8022350:	6909      	ldr	r1, [r1, #16]
 8022352:	eba5 0901 	sub.w	r9, r5, r1
 8022356:	6965      	ldr	r5, [r4, #20]
 8022358:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802235c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022360:	3301      	adds	r3, #1
 8022362:	444b      	add	r3, r9
 8022364:	106d      	asrs	r5, r5, #1
 8022366:	429d      	cmp	r5, r3
 8022368:	bf38      	it	cc
 802236a:	461d      	movcc	r5, r3
 802236c:	0553      	lsls	r3, r2, #21
 802236e:	d531      	bpl.n	80223d4 <__ssputs_r+0xa0>
 8022370:	4629      	mov	r1, r5
 8022372:	f7fe fa11 	bl	8020798 <_malloc_r>
 8022376:	4606      	mov	r6, r0
 8022378:	b950      	cbnz	r0, 8022390 <__ssputs_r+0x5c>
 802237a:	230c      	movs	r3, #12
 802237c:	f8ca 3000 	str.w	r3, [sl]
 8022380:	89a3      	ldrh	r3, [r4, #12]
 8022382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022386:	81a3      	strh	r3, [r4, #12]
 8022388:	f04f 30ff 	mov.w	r0, #4294967295
 802238c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022390:	6921      	ldr	r1, [r4, #16]
 8022392:	464a      	mov	r2, r9
 8022394:	f7fe f98a 	bl	80206ac <memcpy>
 8022398:	89a3      	ldrh	r3, [r4, #12]
 802239a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802239e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80223a2:	81a3      	strh	r3, [r4, #12]
 80223a4:	6126      	str	r6, [r4, #16]
 80223a6:	6165      	str	r5, [r4, #20]
 80223a8:	444e      	add	r6, r9
 80223aa:	eba5 0509 	sub.w	r5, r5, r9
 80223ae:	6026      	str	r6, [r4, #0]
 80223b0:	60a5      	str	r5, [r4, #8]
 80223b2:	463e      	mov	r6, r7
 80223b4:	42be      	cmp	r6, r7
 80223b6:	d900      	bls.n	80223ba <__ssputs_r+0x86>
 80223b8:	463e      	mov	r6, r7
 80223ba:	4632      	mov	r2, r6
 80223bc:	6820      	ldr	r0, [r4, #0]
 80223be:	4641      	mov	r1, r8
 80223c0:	f000 fcf0 	bl	8022da4 <memmove>
 80223c4:	68a3      	ldr	r3, [r4, #8]
 80223c6:	6822      	ldr	r2, [r4, #0]
 80223c8:	1b9b      	subs	r3, r3, r6
 80223ca:	4432      	add	r2, r6
 80223cc:	60a3      	str	r3, [r4, #8]
 80223ce:	6022      	str	r2, [r4, #0]
 80223d0:	2000      	movs	r0, #0
 80223d2:	e7db      	b.n	802238c <__ssputs_r+0x58>
 80223d4:	462a      	mov	r2, r5
 80223d6:	f7ff ff87 	bl	80222e8 <_realloc_r>
 80223da:	4606      	mov	r6, r0
 80223dc:	2800      	cmp	r0, #0
 80223de:	d1e1      	bne.n	80223a4 <__ssputs_r+0x70>
 80223e0:	6921      	ldr	r1, [r4, #16]
 80223e2:	4650      	mov	r0, sl
 80223e4:	f7fe f988 	bl	80206f8 <_free_r>
 80223e8:	e7c7      	b.n	802237a <__ssputs_r+0x46>
	...

080223ec <_svfiprintf_r>:
 80223ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223f0:	4698      	mov	r8, r3
 80223f2:	898b      	ldrh	r3, [r1, #12]
 80223f4:	061b      	lsls	r3, r3, #24
 80223f6:	b09d      	sub	sp, #116	; 0x74
 80223f8:	4607      	mov	r7, r0
 80223fa:	460d      	mov	r5, r1
 80223fc:	4614      	mov	r4, r2
 80223fe:	d50e      	bpl.n	802241e <_svfiprintf_r+0x32>
 8022400:	690b      	ldr	r3, [r1, #16]
 8022402:	b963      	cbnz	r3, 802241e <_svfiprintf_r+0x32>
 8022404:	2140      	movs	r1, #64	; 0x40
 8022406:	f7fe f9c7 	bl	8020798 <_malloc_r>
 802240a:	6028      	str	r0, [r5, #0]
 802240c:	6128      	str	r0, [r5, #16]
 802240e:	b920      	cbnz	r0, 802241a <_svfiprintf_r+0x2e>
 8022410:	230c      	movs	r3, #12
 8022412:	603b      	str	r3, [r7, #0]
 8022414:	f04f 30ff 	mov.w	r0, #4294967295
 8022418:	e0d1      	b.n	80225be <_svfiprintf_r+0x1d2>
 802241a:	2340      	movs	r3, #64	; 0x40
 802241c:	616b      	str	r3, [r5, #20]
 802241e:	2300      	movs	r3, #0
 8022420:	9309      	str	r3, [sp, #36]	; 0x24
 8022422:	2320      	movs	r3, #32
 8022424:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022428:	f8cd 800c 	str.w	r8, [sp, #12]
 802242c:	2330      	movs	r3, #48	; 0x30
 802242e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80225d8 <_svfiprintf_r+0x1ec>
 8022432:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022436:	f04f 0901 	mov.w	r9, #1
 802243a:	4623      	mov	r3, r4
 802243c:	469a      	mov	sl, r3
 802243e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022442:	b10a      	cbz	r2, 8022448 <_svfiprintf_r+0x5c>
 8022444:	2a25      	cmp	r2, #37	; 0x25
 8022446:	d1f9      	bne.n	802243c <_svfiprintf_r+0x50>
 8022448:	ebba 0b04 	subs.w	fp, sl, r4
 802244c:	d00b      	beq.n	8022466 <_svfiprintf_r+0x7a>
 802244e:	465b      	mov	r3, fp
 8022450:	4622      	mov	r2, r4
 8022452:	4629      	mov	r1, r5
 8022454:	4638      	mov	r0, r7
 8022456:	f7ff ff6d 	bl	8022334 <__ssputs_r>
 802245a:	3001      	adds	r0, #1
 802245c:	f000 80aa 	beq.w	80225b4 <_svfiprintf_r+0x1c8>
 8022460:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022462:	445a      	add	r2, fp
 8022464:	9209      	str	r2, [sp, #36]	; 0x24
 8022466:	f89a 3000 	ldrb.w	r3, [sl]
 802246a:	2b00      	cmp	r3, #0
 802246c:	f000 80a2 	beq.w	80225b4 <_svfiprintf_r+0x1c8>
 8022470:	2300      	movs	r3, #0
 8022472:	f04f 32ff 	mov.w	r2, #4294967295
 8022476:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802247a:	f10a 0a01 	add.w	sl, sl, #1
 802247e:	9304      	str	r3, [sp, #16]
 8022480:	9307      	str	r3, [sp, #28]
 8022482:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022486:	931a      	str	r3, [sp, #104]	; 0x68
 8022488:	4654      	mov	r4, sl
 802248a:	2205      	movs	r2, #5
 802248c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022490:	4851      	ldr	r0, [pc, #324]	; (80225d8 <_svfiprintf_r+0x1ec>)
 8022492:	f7dd fee5 	bl	8000260 <memchr>
 8022496:	9a04      	ldr	r2, [sp, #16]
 8022498:	b9d8      	cbnz	r0, 80224d2 <_svfiprintf_r+0xe6>
 802249a:	06d0      	lsls	r0, r2, #27
 802249c:	bf44      	itt	mi
 802249e:	2320      	movmi	r3, #32
 80224a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80224a4:	0711      	lsls	r1, r2, #28
 80224a6:	bf44      	itt	mi
 80224a8:	232b      	movmi	r3, #43	; 0x2b
 80224aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80224ae:	f89a 3000 	ldrb.w	r3, [sl]
 80224b2:	2b2a      	cmp	r3, #42	; 0x2a
 80224b4:	d015      	beq.n	80224e2 <_svfiprintf_r+0xf6>
 80224b6:	9a07      	ldr	r2, [sp, #28]
 80224b8:	4654      	mov	r4, sl
 80224ba:	2000      	movs	r0, #0
 80224bc:	f04f 0c0a 	mov.w	ip, #10
 80224c0:	4621      	mov	r1, r4
 80224c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80224c6:	3b30      	subs	r3, #48	; 0x30
 80224c8:	2b09      	cmp	r3, #9
 80224ca:	d94e      	bls.n	802256a <_svfiprintf_r+0x17e>
 80224cc:	b1b0      	cbz	r0, 80224fc <_svfiprintf_r+0x110>
 80224ce:	9207      	str	r2, [sp, #28]
 80224d0:	e014      	b.n	80224fc <_svfiprintf_r+0x110>
 80224d2:	eba0 0308 	sub.w	r3, r0, r8
 80224d6:	fa09 f303 	lsl.w	r3, r9, r3
 80224da:	4313      	orrs	r3, r2
 80224dc:	9304      	str	r3, [sp, #16]
 80224de:	46a2      	mov	sl, r4
 80224e0:	e7d2      	b.n	8022488 <_svfiprintf_r+0x9c>
 80224e2:	9b03      	ldr	r3, [sp, #12]
 80224e4:	1d19      	adds	r1, r3, #4
 80224e6:	681b      	ldr	r3, [r3, #0]
 80224e8:	9103      	str	r1, [sp, #12]
 80224ea:	2b00      	cmp	r3, #0
 80224ec:	bfbb      	ittet	lt
 80224ee:	425b      	neglt	r3, r3
 80224f0:	f042 0202 	orrlt.w	r2, r2, #2
 80224f4:	9307      	strge	r3, [sp, #28]
 80224f6:	9307      	strlt	r3, [sp, #28]
 80224f8:	bfb8      	it	lt
 80224fa:	9204      	strlt	r2, [sp, #16]
 80224fc:	7823      	ldrb	r3, [r4, #0]
 80224fe:	2b2e      	cmp	r3, #46	; 0x2e
 8022500:	d10c      	bne.n	802251c <_svfiprintf_r+0x130>
 8022502:	7863      	ldrb	r3, [r4, #1]
 8022504:	2b2a      	cmp	r3, #42	; 0x2a
 8022506:	d135      	bne.n	8022574 <_svfiprintf_r+0x188>
 8022508:	9b03      	ldr	r3, [sp, #12]
 802250a:	1d1a      	adds	r2, r3, #4
 802250c:	681b      	ldr	r3, [r3, #0]
 802250e:	9203      	str	r2, [sp, #12]
 8022510:	2b00      	cmp	r3, #0
 8022512:	bfb8      	it	lt
 8022514:	f04f 33ff 	movlt.w	r3, #4294967295
 8022518:	3402      	adds	r4, #2
 802251a:	9305      	str	r3, [sp, #20]
 802251c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80225e8 <_svfiprintf_r+0x1fc>
 8022520:	7821      	ldrb	r1, [r4, #0]
 8022522:	2203      	movs	r2, #3
 8022524:	4650      	mov	r0, sl
 8022526:	f7dd fe9b 	bl	8000260 <memchr>
 802252a:	b140      	cbz	r0, 802253e <_svfiprintf_r+0x152>
 802252c:	2340      	movs	r3, #64	; 0x40
 802252e:	eba0 000a 	sub.w	r0, r0, sl
 8022532:	fa03 f000 	lsl.w	r0, r3, r0
 8022536:	9b04      	ldr	r3, [sp, #16]
 8022538:	4303      	orrs	r3, r0
 802253a:	3401      	adds	r4, #1
 802253c:	9304      	str	r3, [sp, #16]
 802253e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022542:	4826      	ldr	r0, [pc, #152]	; (80225dc <_svfiprintf_r+0x1f0>)
 8022544:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022548:	2206      	movs	r2, #6
 802254a:	f7dd fe89 	bl	8000260 <memchr>
 802254e:	2800      	cmp	r0, #0
 8022550:	d038      	beq.n	80225c4 <_svfiprintf_r+0x1d8>
 8022552:	4b23      	ldr	r3, [pc, #140]	; (80225e0 <_svfiprintf_r+0x1f4>)
 8022554:	bb1b      	cbnz	r3, 802259e <_svfiprintf_r+0x1b2>
 8022556:	9b03      	ldr	r3, [sp, #12]
 8022558:	3307      	adds	r3, #7
 802255a:	f023 0307 	bic.w	r3, r3, #7
 802255e:	3308      	adds	r3, #8
 8022560:	9303      	str	r3, [sp, #12]
 8022562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022564:	4433      	add	r3, r6
 8022566:	9309      	str	r3, [sp, #36]	; 0x24
 8022568:	e767      	b.n	802243a <_svfiprintf_r+0x4e>
 802256a:	fb0c 3202 	mla	r2, ip, r2, r3
 802256e:	460c      	mov	r4, r1
 8022570:	2001      	movs	r0, #1
 8022572:	e7a5      	b.n	80224c0 <_svfiprintf_r+0xd4>
 8022574:	2300      	movs	r3, #0
 8022576:	3401      	adds	r4, #1
 8022578:	9305      	str	r3, [sp, #20]
 802257a:	4619      	mov	r1, r3
 802257c:	f04f 0c0a 	mov.w	ip, #10
 8022580:	4620      	mov	r0, r4
 8022582:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022586:	3a30      	subs	r2, #48	; 0x30
 8022588:	2a09      	cmp	r2, #9
 802258a:	d903      	bls.n	8022594 <_svfiprintf_r+0x1a8>
 802258c:	2b00      	cmp	r3, #0
 802258e:	d0c5      	beq.n	802251c <_svfiprintf_r+0x130>
 8022590:	9105      	str	r1, [sp, #20]
 8022592:	e7c3      	b.n	802251c <_svfiprintf_r+0x130>
 8022594:	fb0c 2101 	mla	r1, ip, r1, r2
 8022598:	4604      	mov	r4, r0
 802259a:	2301      	movs	r3, #1
 802259c:	e7f0      	b.n	8022580 <_svfiprintf_r+0x194>
 802259e:	ab03      	add	r3, sp, #12
 80225a0:	9300      	str	r3, [sp, #0]
 80225a2:	462a      	mov	r2, r5
 80225a4:	4b0f      	ldr	r3, [pc, #60]	; (80225e4 <_svfiprintf_r+0x1f8>)
 80225a6:	a904      	add	r1, sp, #16
 80225a8:	4638      	mov	r0, r7
 80225aa:	f3af 8000 	nop.w
 80225ae:	1c42      	adds	r2, r0, #1
 80225b0:	4606      	mov	r6, r0
 80225b2:	d1d6      	bne.n	8022562 <_svfiprintf_r+0x176>
 80225b4:	89ab      	ldrh	r3, [r5, #12]
 80225b6:	065b      	lsls	r3, r3, #25
 80225b8:	f53f af2c 	bmi.w	8022414 <_svfiprintf_r+0x28>
 80225bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80225be:	b01d      	add	sp, #116	; 0x74
 80225c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225c4:	ab03      	add	r3, sp, #12
 80225c6:	9300      	str	r3, [sp, #0]
 80225c8:	462a      	mov	r2, r5
 80225ca:	4b06      	ldr	r3, [pc, #24]	; (80225e4 <_svfiprintf_r+0x1f8>)
 80225cc:	a904      	add	r1, sp, #16
 80225ce:	4638      	mov	r0, r7
 80225d0:	f000 f9d4 	bl	802297c <_printf_i>
 80225d4:	e7eb      	b.n	80225ae <_svfiprintf_r+0x1c2>
 80225d6:	bf00      	nop
 80225d8:	08029a97 	.word	0x08029a97
 80225dc:	08029aa1 	.word	0x08029aa1
 80225e0:	00000000 	.word	0x00000000
 80225e4:	08022335 	.word	0x08022335
 80225e8:	08029a9d 	.word	0x08029a9d

080225ec <__sfputc_r>:
 80225ec:	6893      	ldr	r3, [r2, #8]
 80225ee:	3b01      	subs	r3, #1
 80225f0:	2b00      	cmp	r3, #0
 80225f2:	b410      	push	{r4}
 80225f4:	6093      	str	r3, [r2, #8]
 80225f6:	da08      	bge.n	802260a <__sfputc_r+0x1e>
 80225f8:	6994      	ldr	r4, [r2, #24]
 80225fa:	42a3      	cmp	r3, r4
 80225fc:	db01      	blt.n	8022602 <__sfputc_r+0x16>
 80225fe:	290a      	cmp	r1, #10
 8022600:	d103      	bne.n	802260a <__sfputc_r+0x1e>
 8022602:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022606:	f7ff bb75 	b.w	8021cf4 <__swbuf_r>
 802260a:	6813      	ldr	r3, [r2, #0]
 802260c:	1c58      	adds	r0, r3, #1
 802260e:	6010      	str	r0, [r2, #0]
 8022610:	7019      	strb	r1, [r3, #0]
 8022612:	4608      	mov	r0, r1
 8022614:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022618:	4770      	bx	lr

0802261a <__sfputs_r>:
 802261a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802261c:	4606      	mov	r6, r0
 802261e:	460f      	mov	r7, r1
 8022620:	4614      	mov	r4, r2
 8022622:	18d5      	adds	r5, r2, r3
 8022624:	42ac      	cmp	r4, r5
 8022626:	d101      	bne.n	802262c <__sfputs_r+0x12>
 8022628:	2000      	movs	r0, #0
 802262a:	e007      	b.n	802263c <__sfputs_r+0x22>
 802262c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022630:	463a      	mov	r2, r7
 8022632:	4630      	mov	r0, r6
 8022634:	f7ff ffda 	bl	80225ec <__sfputc_r>
 8022638:	1c43      	adds	r3, r0, #1
 802263a:	d1f3      	bne.n	8022624 <__sfputs_r+0xa>
 802263c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022640 <_vfiprintf_r>:
 8022640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022644:	460d      	mov	r5, r1
 8022646:	b09d      	sub	sp, #116	; 0x74
 8022648:	4614      	mov	r4, r2
 802264a:	4698      	mov	r8, r3
 802264c:	4606      	mov	r6, r0
 802264e:	b118      	cbz	r0, 8022658 <_vfiprintf_r+0x18>
 8022650:	6983      	ldr	r3, [r0, #24]
 8022652:	b90b      	cbnz	r3, 8022658 <_vfiprintf_r+0x18>
 8022654:	f7fd fc00 	bl	801fe58 <__sinit>
 8022658:	4b89      	ldr	r3, [pc, #548]	; (8022880 <_vfiprintf_r+0x240>)
 802265a:	429d      	cmp	r5, r3
 802265c:	d11b      	bne.n	8022696 <_vfiprintf_r+0x56>
 802265e:	6875      	ldr	r5, [r6, #4]
 8022660:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022662:	07d9      	lsls	r1, r3, #31
 8022664:	d405      	bmi.n	8022672 <_vfiprintf_r+0x32>
 8022666:	89ab      	ldrh	r3, [r5, #12]
 8022668:	059a      	lsls	r2, r3, #22
 802266a:	d402      	bmi.n	8022672 <_vfiprintf_r+0x32>
 802266c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802266e:	f7fd ffa6 	bl	80205be <__retarget_lock_acquire_recursive>
 8022672:	89ab      	ldrh	r3, [r5, #12]
 8022674:	071b      	lsls	r3, r3, #28
 8022676:	d501      	bpl.n	802267c <_vfiprintf_r+0x3c>
 8022678:	692b      	ldr	r3, [r5, #16]
 802267a:	b9eb      	cbnz	r3, 80226b8 <_vfiprintf_r+0x78>
 802267c:	4629      	mov	r1, r5
 802267e:	4630      	mov	r0, r6
 8022680:	f7ff fb9c 	bl	8021dbc <__swsetup_r>
 8022684:	b1c0      	cbz	r0, 80226b8 <_vfiprintf_r+0x78>
 8022686:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022688:	07dc      	lsls	r4, r3, #31
 802268a:	d50e      	bpl.n	80226aa <_vfiprintf_r+0x6a>
 802268c:	f04f 30ff 	mov.w	r0, #4294967295
 8022690:	b01d      	add	sp, #116	; 0x74
 8022692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022696:	4b7b      	ldr	r3, [pc, #492]	; (8022884 <_vfiprintf_r+0x244>)
 8022698:	429d      	cmp	r5, r3
 802269a:	d101      	bne.n	80226a0 <_vfiprintf_r+0x60>
 802269c:	68b5      	ldr	r5, [r6, #8]
 802269e:	e7df      	b.n	8022660 <_vfiprintf_r+0x20>
 80226a0:	4b79      	ldr	r3, [pc, #484]	; (8022888 <_vfiprintf_r+0x248>)
 80226a2:	429d      	cmp	r5, r3
 80226a4:	bf08      	it	eq
 80226a6:	68f5      	ldreq	r5, [r6, #12]
 80226a8:	e7da      	b.n	8022660 <_vfiprintf_r+0x20>
 80226aa:	89ab      	ldrh	r3, [r5, #12]
 80226ac:	0598      	lsls	r0, r3, #22
 80226ae:	d4ed      	bmi.n	802268c <_vfiprintf_r+0x4c>
 80226b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80226b2:	f7fd ff86 	bl	80205c2 <__retarget_lock_release_recursive>
 80226b6:	e7e9      	b.n	802268c <_vfiprintf_r+0x4c>
 80226b8:	2300      	movs	r3, #0
 80226ba:	9309      	str	r3, [sp, #36]	; 0x24
 80226bc:	2320      	movs	r3, #32
 80226be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80226c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80226c6:	2330      	movs	r3, #48	; 0x30
 80226c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802288c <_vfiprintf_r+0x24c>
 80226cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80226d0:	f04f 0901 	mov.w	r9, #1
 80226d4:	4623      	mov	r3, r4
 80226d6:	469a      	mov	sl, r3
 80226d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80226dc:	b10a      	cbz	r2, 80226e2 <_vfiprintf_r+0xa2>
 80226de:	2a25      	cmp	r2, #37	; 0x25
 80226e0:	d1f9      	bne.n	80226d6 <_vfiprintf_r+0x96>
 80226e2:	ebba 0b04 	subs.w	fp, sl, r4
 80226e6:	d00b      	beq.n	8022700 <_vfiprintf_r+0xc0>
 80226e8:	465b      	mov	r3, fp
 80226ea:	4622      	mov	r2, r4
 80226ec:	4629      	mov	r1, r5
 80226ee:	4630      	mov	r0, r6
 80226f0:	f7ff ff93 	bl	802261a <__sfputs_r>
 80226f4:	3001      	adds	r0, #1
 80226f6:	f000 80aa 	beq.w	802284e <_vfiprintf_r+0x20e>
 80226fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80226fc:	445a      	add	r2, fp
 80226fe:	9209      	str	r2, [sp, #36]	; 0x24
 8022700:	f89a 3000 	ldrb.w	r3, [sl]
 8022704:	2b00      	cmp	r3, #0
 8022706:	f000 80a2 	beq.w	802284e <_vfiprintf_r+0x20e>
 802270a:	2300      	movs	r3, #0
 802270c:	f04f 32ff 	mov.w	r2, #4294967295
 8022710:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022714:	f10a 0a01 	add.w	sl, sl, #1
 8022718:	9304      	str	r3, [sp, #16]
 802271a:	9307      	str	r3, [sp, #28]
 802271c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022720:	931a      	str	r3, [sp, #104]	; 0x68
 8022722:	4654      	mov	r4, sl
 8022724:	2205      	movs	r2, #5
 8022726:	f814 1b01 	ldrb.w	r1, [r4], #1
 802272a:	4858      	ldr	r0, [pc, #352]	; (802288c <_vfiprintf_r+0x24c>)
 802272c:	f7dd fd98 	bl	8000260 <memchr>
 8022730:	9a04      	ldr	r2, [sp, #16]
 8022732:	b9d8      	cbnz	r0, 802276c <_vfiprintf_r+0x12c>
 8022734:	06d1      	lsls	r1, r2, #27
 8022736:	bf44      	itt	mi
 8022738:	2320      	movmi	r3, #32
 802273a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802273e:	0713      	lsls	r3, r2, #28
 8022740:	bf44      	itt	mi
 8022742:	232b      	movmi	r3, #43	; 0x2b
 8022744:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022748:	f89a 3000 	ldrb.w	r3, [sl]
 802274c:	2b2a      	cmp	r3, #42	; 0x2a
 802274e:	d015      	beq.n	802277c <_vfiprintf_r+0x13c>
 8022750:	9a07      	ldr	r2, [sp, #28]
 8022752:	4654      	mov	r4, sl
 8022754:	2000      	movs	r0, #0
 8022756:	f04f 0c0a 	mov.w	ip, #10
 802275a:	4621      	mov	r1, r4
 802275c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022760:	3b30      	subs	r3, #48	; 0x30
 8022762:	2b09      	cmp	r3, #9
 8022764:	d94e      	bls.n	8022804 <_vfiprintf_r+0x1c4>
 8022766:	b1b0      	cbz	r0, 8022796 <_vfiprintf_r+0x156>
 8022768:	9207      	str	r2, [sp, #28]
 802276a:	e014      	b.n	8022796 <_vfiprintf_r+0x156>
 802276c:	eba0 0308 	sub.w	r3, r0, r8
 8022770:	fa09 f303 	lsl.w	r3, r9, r3
 8022774:	4313      	orrs	r3, r2
 8022776:	9304      	str	r3, [sp, #16]
 8022778:	46a2      	mov	sl, r4
 802277a:	e7d2      	b.n	8022722 <_vfiprintf_r+0xe2>
 802277c:	9b03      	ldr	r3, [sp, #12]
 802277e:	1d19      	adds	r1, r3, #4
 8022780:	681b      	ldr	r3, [r3, #0]
 8022782:	9103      	str	r1, [sp, #12]
 8022784:	2b00      	cmp	r3, #0
 8022786:	bfbb      	ittet	lt
 8022788:	425b      	neglt	r3, r3
 802278a:	f042 0202 	orrlt.w	r2, r2, #2
 802278e:	9307      	strge	r3, [sp, #28]
 8022790:	9307      	strlt	r3, [sp, #28]
 8022792:	bfb8      	it	lt
 8022794:	9204      	strlt	r2, [sp, #16]
 8022796:	7823      	ldrb	r3, [r4, #0]
 8022798:	2b2e      	cmp	r3, #46	; 0x2e
 802279a:	d10c      	bne.n	80227b6 <_vfiprintf_r+0x176>
 802279c:	7863      	ldrb	r3, [r4, #1]
 802279e:	2b2a      	cmp	r3, #42	; 0x2a
 80227a0:	d135      	bne.n	802280e <_vfiprintf_r+0x1ce>
 80227a2:	9b03      	ldr	r3, [sp, #12]
 80227a4:	1d1a      	adds	r2, r3, #4
 80227a6:	681b      	ldr	r3, [r3, #0]
 80227a8:	9203      	str	r2, [sp, #12]
 80227aa:	2b00      	cmp	r3, #0
 80227ac:	bfb8      	it	lt
 80227ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80227b2:	3402      	adds	r4, #2
 80227b4:	9305      	str	r3, [sp, #20]
 80227b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802289c <_vfiprintf_r+0x25c>
 80227ba:	7821      	ldrb	r1, [r4, #0]
 80227bc:	2203      	movs	r2, #3
 80227be:	4650      	mov	r0, sl
 80227c0:	f7dd fd4e 	bl	8000260 <memchr>
 80227c4:	b140      	cbz	r0, 80227d8 <_vfiprintf_r+0x198>
 80227c6:	2340      	movs	r3, #64	; 0x40
 80227c8:	eba0 000a 	sub.w	r0, r0, sl
 80227cc:	fa03 f000 	lsl.w	r0, r3, r0
 80227d0:	9b04      	ldr	r3, [sp, #16]
 80227d2:	4303      	orrs	r3, r0
 80227d4:	3401      	adds	r4, #1
 80227d6:	9304      	str	r3, [sp, #16]
 80227d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80227dc:	482c      	ldr	r0, [pc, #176]	; (8022890 <_vfiprintf_r+0x250>)
 80227de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80227e2:	2206      	movs	r2, #6
 80227e4:	f7dd fd3c 	bl	8000260 <memchr>
 80227e8:	2800      	cmp	r0, #0
 80227ea:	d03f      	beq.n	802286c <_vfiprintf_r+0x22c>
 80227ec:	4b29      	ldr	r3, [pc, #164]	; (8022894 <_vfiprintf_r+0x254>)
 80227ee:	bb1b      	cbnz	r3, 8022838 <_vfiprintf_r+0x1f8>
 80227f0:	9b03      	ldr	r3, [sp, #12]
 80227f2:	3307      	adds	r3, #7
 80227f4:	f023 0307 	bic.w	r3, r3, #7
 80227f8:	3308      	adds	r3, #8
 80227fa:	9303      	str	r3, [sp, #12]
 80227fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80227fe:	443b      	add	r3, r7
 8022800:	9309      	str	r3, [sp, #36]	; 0x24
 8022802:	e767      	b.n	80226d4 <_vfiprintf_r+0x94>
 8022804:	fb0c 3202 	mla	r2, ip, r2, r3
 8022808:	460c      	mov	r4, r1
 802280a:	2001      	movs	r0, #1
 802280c:	e7a5      	b.n	802275a <_vfiprintf_r+0x11a>
 802280e:	2300      	movs	r3, #0
 8022810:	3401      	adds	r4, #1
 8022812:	9305      	str	r3, [sp, #20]
 8022814:	4619      	mov	r1, r3
 8022816:	f04f 0c0a 	mov.w	ip, #10
 802281a:	4620      	mov	r0, r4
 802281c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022820:	3a30      	subs	r2, #48	; 0x30
 8022822:	2a09      	cmp	r2, #9
 8022824:	d903      	bls.n	802282e <_vfiprintf_r+0x1ee>
 8022826:	2b00      	cmp	r3, #0
 8022828:	d0c5      	beq.n	80227b6 <_vfiprintf_r+0x176>
 802282a:	9105      	str	r1, [sp, #20]
 802282c:	e7c3      	b.n	80227b6 <_vfiprintf_r+0x176>
 802282e:	fb0c 2101 	mla	r1, ip, r1, r2
 8022832:	4604      	mov	r4, r0
 8022834:	2301      	movs	r3, #1
 8022836:	e7f0      	b.n	802281a <_vfiprintf_r+0x1da>
 8022838:	ab03      	add	r3, sp, #12
 802283a:	9300      	str	r3, [sp, #0]
 802283c:	462a      	mov	r2, r5
 802283e:	4b16      	ldr	r3, [pc, #88]	; (8022898 <_vfiprintf_r+0x258>)
 8022840:	a904      	add	r1, sp, #16
 8022842:	4630      	mov	r0, r6
 8022844:	f3af 8000 	nop.w
 8022848:	4607      	mov	r7, r0
 802284a:	1c78      	adds	r0, r7, #1
 802284c:	d1d6      	bne.n	80227fc <_vfiprintf_r+0x1bc>
 802284e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022850:	07d9      	lsls	r1, r3, #31
 8022852:	d405      	bmi.n	8022860 <_vfiprintf_r+0x220>
 8022854:	89ab      	ldrh	r3, [r5, #12]
 8022856:	059a      	lsls	r2, r3, #22
 8022858:	d402      	bmi.n	8022860 <_vfiprintf_r+0x220>
 802285a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802285c:	f7fd feb1 	bl	80205c2 <__retarget_lock_release_recursive>
 8022860:	89ab      	ldrh	r3, [r5, #12]
 8022862:	065b      	lsls	r3, r3, #25
 8022864:	f53f af12 	bmi.w	802268c <_vfiprintf_r+0x4c>
 8022868:	9809      	ldr	r0, [sp, #36]	; 0x24
 802286a:	e711      	b.n	8022690 <_vfiprintf_r+0x50>
 802286c:	ab03      	add	r3, sp, #12
 802286e:	9300      	str	r3, [sp, #0]
 8022870:	462a      	mov	r2, r5
 8022872:	4b09      	ldr	r3, [pc, #36]	; (8022898 <_vfiprintf_r+0x258>)
 8022874:	a904      	add	r1, sp, #16
 8022876:	4630      	mov	r0, r6
 8022878:	f000 f880 	bl	802297c <_printf_i>
 802287c:	e7e4      	b.n	8022848 <_vfiprintf_r+0x208>
 802287e:	bf00      	nop
 8022880:	08029518 	.word	0x08029518
 8022884:	08029538 	.word	0x08029538
 8022888:	080294f8 	.word	0x080294f8
 802288c:	08029a97 	.word	0x08029a97
 8022890:	08029aa1 	.word	0x08029aa1
 8022894:	00000000 	.word	0x00000000
 8022898:	0802261b 	.word	0x0802261b
 802289c:	08029a9d 	.word	0x08029a9d

080228a0 <_printf_common>:
 80228a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80228a4:	4616      	mov	r6, r2
 80228a6:	4699      	mov	r9, r3
 80228a8:	688a      	ldr	r2, [r1, #8]
 80228aa:	690b      	ldr	r3, [r1, #16]
 80228ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80228b0:	4293      	cmp	r3, r2
 80228b2:	bfb8      	it	lt
 80228b4:	4613      	movlt	r3, r2
 80228b6:	6033      	str	r3, [r6, #0]
 80228b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80228bc:	4607      	mov	r7, r0
 80228be:	460c      	mov	r4, r1
 80228c0:	b10a      	cbz	r2, 80228c6 <_printf_common+0x26>
 80228c2:	3301      	adds	r3, #1
 80228c4:	6033      	str	r3, [r6, #0]
 80228c6:	6823      	ldr	r3, [r4, #0]
 80228c8:	0699      	lsls	r1, r3, #26
 80228ca:	bf42      	ittt	mi
 80228cc:	6833      	ldrmi	r3, [r6, #0]
 80228ce:	3302      	addmi	r3, #2
 80228d0:	6033      	strmi	r3, [r6, #0]
 80228d2:	6825      	ldr	r5, [r4, #0]
 80228d4:	f015 0506 	ands.w	r5, r5, #6
 80228d8:	d106      	bne.n	80228e8 <_printf_common+0x48>
 80228da:	f104 0a19 	add.w	sl, r4, #25
 80228de:	68e3      	ldr	r3, [r4, #12]
 80228e0:	6832      	ldr	r2, [r6, #0]
 80228e2:	1a9b      	subs	r3, r3, r2
 80228e4:	42ab      	cmp	r3, r5
 80228e6:	dc26      	bgt.n	8022936 <_printf_common+0x96>
 80228e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80228ec:	1e13      	subs	r3, r2, #0
 80228ee:	6822      	ldr	r2, [r4, #0]
 80228f0:	bf18      	it	ne
 80228f2:	2301      	movne	r3, #1
 80228f4:	0692      	lsls	r2, r2, #26
 80228f6:	d42b      	bmi.n	8022950 <_printf_common+0xb0>
 80228f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80228fc:	4649      	mov	r1, r9
 80228fe:	4638      	mov	r0, r7
 8022900:	47c0      	blx	r8
 8022902:	3001      	adds	r0, #1
 8022904:	d01e      	beq.n	8022944 <_printf_common+0xa4>
 8022906:	6823      	ldr	r3, [r4, #0]
 8022908:	68e5      	ldr	r5, [r4, #12]
 802290a:	6832      	ldr	r2, [r6, #0]
 802290c:	f003 0306 	and.w	r3, r3, #6
 8022910:	2b04      	cmp	r3, #4
 8022912:	bf08      	it	eq
 8022914:	1aad      	subeq	r5, r5, r2
 8022916:	68a3      	ldr	r3, [r4, #8]
 8022918:	6922      	ldr	r2, [r4, #16]
 802291a:	bf0c      	ite	eq
 802291c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022920:	2500      	movne	r5, #0
 8022922:	4293      	cmp	r3, r2
 8022924:	bfc4      	itt	gt
 8022926:	1a9b      	subgt	r3, r3, r2
 8022928:	18ed      	addgt	r5, r5, r3
 802292a:	2600      	movs	r6, #0
 802292c:	341a      	adds	r4, #26
 802292e:	42b5      	cmp	r5, r6
 8022930:	d11a      	bne.n	8022968 <_printf_common+0xc8>
 8022932:	2000      	movs	r0, #0
 8022934:	e008      	b.n	8022948 <_printf_common+0xa8>
 8022936:	2301      	movs	r3, #1
 8022938:	4652      	mov	r2, sl
 802293a:	4649      	mov	r1, r9
 802293c:	4638      	mov	r0, r7
 802293e:	47c0      	blx	r8
 8022940:	3001      	adds	r0, #1
 8022942:	d103      	bne.n	802294c <_printf_common+0xac>
 8022944:	f04f 30ff 	mov.w	r0, #4294967295
 8022948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802294c:	3501      	adds	r5, #1
 802294e:	e7c6      	b.n	80228de <_printf_common+0x3e>
 8022950:	18e1      	adds	r1, r4, r3
 8022952:	1c5a      	adds	r2, r3, #1
 8022954:	2030      	movs	r0, #48	; 0x30
 8022956:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802295a:	4422      	add	r2, r4
 802295c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022960:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022964:	3302      	adds	r3, #2
 8022966:	e7c7      	b.n	80228f8 <_printf_common+0x58>
 8022968:	2301      	movs	r3, #1
 802296a:	4622      	mov	r2, r4
 802296c:	4649      	mov	r1, r9
 802296e:	4638      	mov	r0, r7
 8022970:	47c0      	blx	r8
 8022972:	3001      	adds	r0, #1
 8022974:	d0e6      	beq.n	8022944 <_printf_common+0xa4>
 8022976:	3601      	adds	r6, #1
 8022978:	e7d9      	b.n	802292e <_printf_common+0x8e>
	...

0802297c <_printf_i>:
 802297c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022980:	460c      	mov	r4, r1
 8022982:	4691      	mov	r9, r2
 8022984:	7e27      	ldrb	r7, [r4, #24]
 8022986:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022988:	2f78      	cmp	r7, #120	; 0x78
 802298a:	4680      	mov	r8, r0
 802298c:	469a      	mov	sl, r3
 802298e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022992:	d807      	bhi.n	80229a4 <_printf_i+0x28>
 8022994:	2f62      	cmp	r7, #98	; 0x62
 8022996:	d80a      	bhi.n	80229ae <_printf_i+0x32>
 8022998:	2f00      	cmp	r7, #0
 802299a:	f000 80d8 	beq.w	8022b4e <_printf_i+0x1d2>
 802299e:	2f58      	cmp	r7, #88	; 0x58
 80229a0:	f000 80a3 	beq.w	8022aea <_printf_i+0x16e>
 80229a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80229a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80229ac:	e03a      	b.n	8022a24 <_printf_i+0xa8>
 80229ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80229b2:	2b15      	cmp	r3, #21
 80229b4:	d8f6      	bhi.n	80229a4 <_printf_i+0x28>
 80229b6:	a001      	add	r0, pc, #4	; (adr r0, 80229bc <_printf_i+0x40>)
 80229b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80229bc:	08022a15 	.word	0x08022a15
 80229c0:	08022a29 	.word	0x08022a29
 80229c4:	080229a5 	.word	0x080229a5
 80229c8:	080229a5 	.word	0x080229a5
 80229cc:	080229a5 	.word	0x080229a5
 80229d0:	080229a5 	.word	0x080229a5
 80229d4:	08022a29 	.word	0x08022a29
 80229d8:	080229a5 	.word	0x080229a5
 80229dc:	080229a5 	.word	0x080229a5
 80229e0:	080229a5 	.word	0x080229a5
 80229e4:	080229a5 	.word	0x080229a5
 80229e8:	08022b35 	.word	0x08022b35
 80229ec:	08022a59 	.word	0x08022a59
 80229f0:	08022b17 	.word	0x08022b17
 80229f4:	080229a5 	.word	0x080229a5
 80229f8:	080229a5 	.word	0x080229a5
 80229fc:	08022b57 	.word	0x08022b57
 8022a00:	080229a5 	.word	0x080229a5
 8022a04:	08022a59 	.word	0x08022a59
 8022a08:	080229a5 	.word	0x080229a5
 8022a0c:	080229a5 	.word	0x080229a5
 8022a10:	08022b1f 	.word	0x08022b1f
 8022a14:	680b      	ldr	r3, [r1, #0]
 8022a16:	1d1a      	adds	r2, r3, #4
 8022a18:	681b      	ldr	r3, [r3, #0]
 8022a1a:	600a      	str	r2, [r1, #0]
 8022a1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8022a20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022a24:	2301      	movs	r3, #1
 8022a26:	e0a3      	b.n	8022b70 <_printf_i+0x1f4>
 8022a28:	6825      	ldr	r5, [r4, #0]
 8022a2a:	6808      	ldr	r0, [r1, #0]
 8022a2c:	062e      	lsls	r6, r5, #24
 8022a2e:	f100 0304 	add.w	r3, r0, #4
 8022a32:	d50a      	bpl.n	8022a4a <_printf_i+0xce>
 8022a34:	6805      	ldr	r5, [r0, #0]
 8022a36:	600b      	str	r3, [r1, #0]
 8022a38:	2d00      	cmp	r5, #0
 8022a3a:	da03      	bge.n	8022a44 <_printf_i+0xc8>
 8022a3c:	232d      	movs	r3, #45	; 0x2d
 8022a3e:	426d      	negs	r5, r5
 8022a40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022a44:	485e      	ldr	r0, [pc, #376]	; (8022bc0 <_printf_i+0x244>)
 8022a46:	230a      	movs	r3, #10
 8022a48:	e019      	b.n	8022a7e <_printf_i+0x102>
 8022a4a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8022a4e:	6805      	ldr	r5, [r0, #0]
 8022a50:	600b      	str	r3, [r1, #0]
 8022a52:	bf18      	it	ne
 8022a54:	b22d      	sxthne	r5, r5
 8022a56:	e7ef      	b.n	8022a38 <_printf_i+0xbc>
 8022a58:	680b      	ldr	r3, [r1, #0]
 8022a5a:	6825      	ldr	r5, [r4, #0]
 8022a5c:	1d18      	adds	r0, r3, #4
 8022a5e:	6008      	str	r0, [r1, #0]
 8022a60:	0628      	lsls	r0, r5, #24
 8022a62:	d501      	bpl.n	8022a68 <_printf_i+0xec>
 8022a64:	681d      	ldr	r5, [r3, #0]
 8022a66:	e002      	b.n	8022a6e <_printf_i+0xf2>
 8022a68:	0669      	lsls	r1, r5, #25
 8022a6a:	d5fb      	bpl.n	8022a64 <_printf_i+0xe8>
 8022a6c:	881d      	ldrh	r5, [r3, #0]
 8022a6e:	4854      	ldr	r0, [pc, #336]	; (8022bc0 <_printf_i+0x244>)
 8022a70:	2f6f      	cmp	r7, #111	; 0x6f
 8022a72:	bf0c      	ite	eq
 8022a74:	2308      	moveq	r3, #8
 8022a76:	230a      	movne	r3, #10
 8022a78:	2100      	movs	r1, #0
 8022a7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8022a7e:	6866      	ldr	r6, [r4, #4]
 8022a80:	60a6      	str	r6, [r4, #8]
 8022a82:	2e00      	cmp	r6, #0
 8022a84:	bfa2      	ittt	ge
 8022a86:	6821      	ldrge	r1, [r4, #0]
 8022a88:	f021 0104 	bicge.w	r1, r1, #4
 8022a8c:	6021      	strge	r1, [r4, #0]
 8022a8e:	b90d      	cbnz	r5, 8022a94 <_printf_i+0x118>
 8022a90:	2e00      	cmp	r6, #0
 8022a92:	d04d      	beq.n	8022b30 <_printf_i+0x1b4>
 8022a94:	4616      	mov	r6, r2
 8022a96:	fbb5 f1f3 	udiv	r1, r5, r3
 8022a9a:	fb03 5711 	mls	r7, r3, r1, r5
 8022a9e:	5dc7      	ldrb	r7, [r0, r7]
 8022aa0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8022aa4:	462f      	mov	r7, r5
 8022aa6:	42bb      	cmp	r3, r7
 8022aa8:	460d      	mov	r5, r1
 8022aaa:	d9f4      	bls.n	8022a96 <_printf_i+0x11a>
 8022aac:	2b08      	cmp	r3, #8
 8022aae:	d10b      	bne.n	8022ac8 <_printf_i+0x14c>
 8022ab0:	6823      	ldr	r3, [r4, #0]
 8022ab2:	07df      	lsls	r7, r3, #31
 8022ab4:	d508      	bpl.n	8022ac8 <_printf_i+0x14c>
 8022ab6:	6923      	ldr	r3, [r4, #16]
 8022ab8:	6861      	ldr	r1, [r4, #4]
 8022aba:	4299      	cmp	r1, r3
 8022abc:	bfde      	ittt	le
 8022abe:	2330      	movle	r3, #48	; 0x30
 8022ac0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022ac4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8022ac8:	1b92      	subs	r2, r2, r6
 8022aca:	6122      	str	r2, [r4, #16]
 8022acc:	f8cd a000 	str.w	sl, [sp]
 8022ad0:	464b      	mov	r3, r9
 8022ad2:	aa03      	add	r2, sp, #12
 8022ad4:	4621      	mov	r1, r4
 8022ad6:	4640      	mov	r0, r8
 8022ad8:	f7ff fee2 	bl	80228a0 <_printf_common>
 8022adc:	3001      	adds	r0, #1
 8022ade:	d14c      	bne.n	8022b7a <_printf_i+0x1fe>
 8022ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8022ae4:	b004      	add	sp, #16
 8022ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022aea:	4835      	ldr	r0, [pc, #212]	; (8022bc0 <_printf_i+0x244>)
 8022aec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8022af0:	6823      	ldr	r3, [r4, #0]
 8022af2:	680e      	ldr	r6, [r1, #0]
 8022af4:	061f      	lsls	r7, r3, #24
 8022af6:	f856 5b04 	ldr.w	r5, [r6], #4
 8022afa:	600e      	str	r6, [r1, #0]
 8022afc:	d514      	bpl.n	8022b28 <_printf_i+0x1ac>
 8022afe:	07d9      	lsls	r1, r3, #31
 8022b00:	bf44      	itt	mi
 8022b02:	f043 0320 	orrmi.w	r3, r3, #32
 8022b06:	6023      	strmi	r3, [r4, #0]
 8022b08:	b91d      	cbnz	r5, 8022b12 <_printf_i+0x196>
 8022b0a:	6823      	ldr	r3, [r4, #0]
 8022b0c:	f023 0320 	bic.w	r3, r3, #32
 8022b10:	6023      	str	r3, [r4, #0]
 8022b12:	2310      	movs	r3, #16
 8022b14:	e7b0      	b.n	8022a78 <_printf_i+0xfc>
 8022b16:	6823      	ldr	r3, [r4, #0]
 8022b18:	f043 0320 	orr.w	r3, r3, #32
 8022b1c:	6023      	str	r3, [r4, #0]
 8022b1e:	2378      	movs	r3, #120	; 0x78
 8022b20:	4828      	ldr	r0, [pc, #160]	; (8022bc4 <_printf_i+0x248>)
 8022b22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8022b26:	e7e3      	b.n	8022af0 <_printf_i+0x174>
 8022b28:	065e      	lsls	r6, r3, #25
 8022b2a:	bf48      	it	mi
 8022b2c:	b2ad      	uxthmi	r5, r5
 8022b2e:	e7e6      	b.n	8022afe <_printf_i+0x182>
 8022b30:	4616      	mov	r6, r2
 8022b32:	e7bb      	b.n	8022aac <_printf_i+0x130>
 8022b34:	680b      	ldr	r3, [r1, #0]
 8022b36:	6826      	ldr	r6, [r4, #0]
 8022b38:	6960      	ldr	r0, [r4, #20]
 8022b3a:	1d1d      	adds	r5, r3, #4
 8022b3c:	600d      	str	r5, [r1, #0]
 8022b3e:	0635      	lsls	r5, r6, #24
 8022b40:	681b      	ldr	r3, [r3, #0]
 8022b42:	d501      	bpl.n	8022b48 <_printf_i+0x1cc>
 8022b44:	6018      	str	r0, [r3, #0]
 8022b46:	e002      	b.n	8022b4e <_printf_i+0x1d2>
 8022b48:	0671      	lsls	r1, r6, #25
 8022b4a:	d5fb      	bpl.n	8022b44 <_printf_i+0x1c8>
 8022b4c:	8018      	strh	r0, [r3, #0]
 8022b4e:	2300      	movs	r3, #0
 8022b50:	6123      	str	r3, [r4, #16]
 8022b52:	4616      	mov	r6, r2
 8022b54:	e7ba      	b.n	8022acc <_printf_i+0x150>
 8022b56:	680b      	ldr	r3, [r1, #0]
 8022b58:	1d1a      	adds	r2, r3, #4
 8022b5a:	600a      	str	r2, [r1, #0]
 8022b5c:	681e      	ldr	r6, [r3, #0]
 8022b5e:	6862      	ldr	r2, [r4, #4]
 8022b60:	2100      	movs	r1, #0
 8022b62:	4630      	mov	r0, r6
 8022b64:	f7dd fb7c 	bl	8000260 <memchr>
 8022b68:	b108      	cbz	r0, 8022b6e <_printf_i+0x1f2>
 8022b6a:	1b80      	subs	r0, r0, r6
 8022b6c:	6060      	str	r0, [r4, #4]
 8022b6e:	6863      	ldr	r3, [r4, #4]
 8022b70:	6123      	str	r3, [r4, #16]
 8022b72:	2300      	movs	r3, #0
 8022b74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022b78:	e7a8      	b.n	8022acc <_printf_i+0x150>
 8022b7a:	6923      	ldr	r3, [r4, #16]
 8022b7c:	4632      	mov	r2, r6
 8022b7e:	4649      	mov	r1, r9
 8022b80:	4640      	mov	r0, r8
 8022b82:	47d0      	blx	sl
 8022b84:	3001      	adds	r0, #1
 8022b86:	d0ab      	beq.n	8022ae0 <_printf_i+0x164>
 8022b88:	6823      	ldr	r3, [r4, #0]
 8022b8a:	079b      	lsls	r3, r3, #30
 8022b8c:	d413      	bmi.n	8022bb6 <_printf_i+0x23a>
 8022b8e:	68e0      	ldr	r0, [r4, #12]
 8022b90:	9b03      	ldr	r3, [sp, #12]
 8022b92:	4298      	cmp	r0, r3
 8022b94:	bfb8      	it	lt
 8022b96:	4618      	movlt	r0, r3
 8022b98:	e7a4      	b.n	8022ae4 <_printf_i+0x168>
 8022b9a:	2301      	movs	r3, #1
 8022b9c:	4632      	mov	r2, r6
 8022b9e:	4649      	mov	r1, r9
 8022ba0:	4640      	mov	r0, r8
 8022ba2:	47d0      	blx	sl
 8022ba4:	3001      	adds	r0, #1
 8022ba6:	d09b      	beq.n	8022ae0 <_printf_i+0x164>
 8022ba8:	3501      	adds	r5, #1
 8022baa:	68e3      	ldr	r3, [r4, #12]
 8022bac:	9903      	ldr	r1, [sp, #12]
 8022bae:	1a5b      	subs	r3, r3, r1
 8022bb0:	42ab      	cmp	r3, r5
 8022bb2:	dcf2      	bgt.n	8022b9a <_printf_i+0x21e>
 8022bb4:	e7eb      	b.n	8022b8e <_printf_i+0x212>
 8022bb6:	2500      	movs	r5, #0
 8022bb8:	f104 0619 	add.w	r6, r4, #25
 8022bbc:	e7f5      	b.n	8022baa <_printf_i+0x22e>
 8022bbe:	bf00      	nop
 8022bc0:	08029aa8 	.word	0x08029aa8
 8022bc4:	08029ab9 	.word	0x08029ab9

08022bc8 <_putc_r>:
 8022bc8:	b570      	push	{r4, r5, r6, lr}
 8022bca:	460d      	mov	r5, r1
 8022bcc:	4614      	mov	r4, r2
 8022bce:	4606      	mov	r6, r0
 8022bd0:	b118      	cbz	r0, 8022bda <_putc_r+0x12>
 8022bd2:	6983      	ldr	r3, [r0, #24]
 8022bd4:	b90b      	cbnz	r3, 8022bda <_putc_r+0x12>
 8022bd6:	f7fd f93f 	bl	801fe58 <__sinit>
 8022bda:	4b1c      	ldr	r3, [pc, #112]	; (8022c4c <_putc_r+0x84>)
 8022bdc:	429c      	cmp	r4, r3
 8022bde:	d124      	bne.n	8022c2a <_putc_r+0x62>
 8022be0:	6874      	ldr	r4, [r6, #4]
 8022be2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022be4:	07d8      	lsls	r0, r3, #31
 8022be6:	d405      	bmi.n	8022bf4 <_putc_r+0x2c>
 8022be8:	89a3      	ldrh	r3, [r4, #12]
 8022bea:	0599      	lsls	r1, r3, #22
 8022bec:	d402      	bmi.n	8022bf4 <_putc_r+0x2c>
 8022bee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022bf0:	f7fd fce5 	bl	80205be <__retarget_lock_acquire_recursive>
 8022bf4:	68a3      	ldr	r3, [r4, #8]
 8022bf6:	3b01      	subs	r3, #1
 8022bf8:	2b00      	cmp	r3, #0
 8022bfa:	60a3      	str	r3, [r4, #8]
 8022bfc:	da05      	bge.n	8022c0a <_putc_r+0x42>
 8022bfe:	69a2      	ldr	r2, [r4, #24]
 8022c00:	4293      	cmp	r3, r2
 8022c02:	db1c      	blt.n	8022c3e <_putc_r+0x76>
 8022c04:	b2eb      	uxtb	r3, r5
 8022c06:	2b0a      	cmp	r3, #10
 8022c08:	d019      	beq.n	8022c3e <_putc_r+0x76>
 8022c0a:	6823      	ldr	r3, [r4, #0]
 8022c0c:	1c5a      	adds	r2, r3, #1
 8022c0e:	6022      	str	r2, [r4, #0]
 8022c10:	701d      	strb	r5, [r3, #0]
 8022c12:	b2ed      	uxtb	r5, r5
 8022c14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022c16:	07da      	lsls	r2, r3, #31
 8022c18:	d405      	bmi.n	8022c26 <_putc_r+0x5e>
 8022c1a:	89a3      	ldrh	r3, [r4, #12]
 8022c1c:	059b      	lsls	r3, r3, #22
 8022c1e:	d402      	bmi.n	8022c26 <_putc_r+0x5e>
 8022c20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022c22:	f7fd fcce 	bl	80205c2 <__retarget_lock_release_recursive>
 8022c26:	4628      	mov	r0, r5
 8022c28:	bd70      	pop	{r4, r5, r6, pc}
 8022c2a:	4b09      	ldr	r3, [pc, #36]	; (8022c50 <_putc_r+0x88>)
 8022c2c:	429c      	cmp	r4, r3
 8022c2e:	d101      	bne.n	8022c34 <_putc_r+0x6c>
 8022c30:	68b4      	ldr	r4, [r6, #8]
 8022c32:	e7d6      	b.n	8022be2 <_putc_r+0x1a>
 8022c34:	4b07      	ldr	r3, [pc, #28]	; (8022c54 <_putc_r+0x8c>)
 8022c36:	429c      	cmp	r4, r3
 8022c38:	bf08      	it	eq
 8022c3a:	68f4      	ldreq	r4, [r6, #12]
 8022c3c:	e7d1      	b.n	8022be2 <_putc_r+0x1a>
 8022c3e:	4629      	mov	r1, r5
 8022c40:	4622      	mov	r2, r4
 8022c42:	4630      	mov	r0, r6
 8022c44:	f7ff f856 	bl	8021cf4 <__swbuf_r>
 8022c48:	4605      	mov	r5, r0
 8022c4a:	e7e3      	b.n	8022c14 <_putc_r+0x4c>
 8022c4c:	08029518 	.word	0x08029518
 8022c50:	08029538 	.word	0x08029538
 8022c54:	080294f8 	.word	0x080294f8

08022c58 <_read_r>:
 8022c58:	b538      	push	{r3, r4, r5, lr}
 8022c5a:	4d07      	ldr	r5, [pc, #28]	; (8022c78 <_read_r+0x20>)
 8022c5c:	4604      	mov	r4, r0
 8022c5e:	4608      	mov	r0, r1
 8022c60:	4611      	mov	r1, r2
 8022c62:	2200      	movs	r2, #0
 8022c64:	602a      	str	r2, [r5, #0]
 8022c66:	461a      	mov	r2, r3
 8022c68:	f7de f895 	bl	8000d96 <_read>
 8022c6c:	1c43      	adds	r3, r0, #1
 8022c6e:	d102      	bne.n	8022c76 <_read_r+0x1e>
 8022c70:	682b      	ldr	r3, [r5, #0]
 8022c72:	b103      	cbz	r3, 8022c76 <_read_r+0x1e>
 8022c74:	6023      	str	r3, [r4, #0]
 8022c76:	bd38      	pop	{r3, r4, r5, pc}
 8022c78:	20000f94 	.word	0x20000f94

08022c7c <sniprintf>:
 8022c7c:	b40c      	push	{r2, r3}
 8022c7e:	b530      	push	{r4, r5, lr}
 8022c80:	4b17      	ldr	r3, [pc, #92]	; (8022ce0 <sniprintf+0x64>)
 8022c82:	1e0c      	subs	r4, r1, #0
 8022c84:	681d      	ldr	r5, [r3, #0]
 8022c86:	b09d      	sub	sp, #116	; 0x74
 8022c88:	da08      	bge.n	8022c9c <sniprintf+0x20>
 8022c8a:	238b      	movs	r3, #139	; 0x8b
 8022c8c:	602b      	str	r3, [r5, #0]
 8022c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8022c92:	b01d      	add	sp, #116	; 0x74
 8022c94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022c98:	b002      	add	sp, #8
 8022c9a:	4770      	bx	lr
 8022c9c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8022ca0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8022ca4:	bf14      	ite	ne
 8022ca6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8022caa:	4623      	moveq	r3, r4
 8022cac:	9304      	str	r3, [sp, #16]
 8022cae:	9307      	str	r3, [sp, #28]
 8022cb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022cb4:	9002      	str	r0, [sp, #8]
 8022cb6:	9006      	str	r0, [sp, #24]
 8022cb8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8022cbc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8022cbe:	ab21      	add	r3, sp, #132	; 0x84
 8022cc0:	a902      	add	r1, sp, #8
 8022cc2:	4628      	mov	r0, r5
 8022cc4:	9301      	str	r3, [sp, #4]
 8022cc6:	f7ff fb91 	bl	80223ec <_svfiprintf_r>
 8022cca:	1c43      	adds	r3, r0, #1
 8022ccc:	bfbc      	itt	lt
 8022cce:	238b      	movlt	r3, #139	; 0x8b
 8022cd0:	602b      	strlt	r3, [r5, #0]
 8022cd2:	2c00      	cmp	r4, #0
 8022cd4:	d0dd      	beq.n	8022c92 <sniprintf+0x16>
 8022cd6:	9b02      	ldr	r3, [sp, #8]
 8022cd8:	2200      	movs	r2, #0
 8022cda:	701a      	strb	r2, [r3, #0]
 8022cdc:	e7d9      	b.n	8022c92 <sniprintf+0x16>
 8022cde:	bf00      	nop
 8022ce0:	20000108 	.word	0x20000108

08022ce4 <siscanf>:
 8022ce4:	b40e      	push	{r1, r2, r3}
 8022ce6:	b510      	push	{r4, lr}
 8022ce8:	b09f      	sub	sp, #124	; 0x7c
 8022cea:	ac21      	add	r4, sp, #132	; 0x84
 8022cec:	f44f 7101 	mov.w	r1, #516	; 0x204
 8022cf0:	f854 2b04 	ldr.w	r2, [r4], #4
 8022cf4:	9201      	str	r2, [sp, #4]
 8022cf6:	f8ad 101c 	strh.w	r1, [sp, #28]
 8022cfa:	9004      	str	r0, [sp, #16]
 8022cfc:	9008      	str	r0, [sp, #32]
 8022cfe:	f7dd fa9d 	bl	800023c <strlen>
 8022d02:	4b0c      	ldr	r3, [pc, #48]	; (8022d34 <siscanf+0x50>)
 8022d04:	9005      	str	r0, [sp, #20]
 8022d06:	9009      	str	r0, [sp, #36]	; 0x24
 8022d08:	930d      	str	r3, [sp, #52]	; 0x34
 8022d0a:	480b      	ldr	r0, [pc, #44]	; (8022d38 <siscanf+0x54>)
 8022d0c:	9a01      	ldr	r2, [sp, #4]
 8022d0e:	6800      	ldr	r0, [r0, #0]
 8022d10:	9403      	str	r4, [sp, #12]
 8022d12:	2300      	movs	r3, #0
 8022d14:	9311      	str	r3, [sp, #68]	; 0x44
 8022d16:	9316      	str	r3, [sp, #88]	; 0x58
 8022d18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022d1c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022d20:	a904      	add	r1, sp, #16
 8022d22:	4623      	mov	r3, r4
 8022d24:	f000 f8ba 	bl	8022e9c <__ssvfiscanf_r>
 8022d28:	b01f      	add	sp, #124	; 0x7c
 8022d2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022d2e:	b003      	add	sp, #12
 8022d30:	4770      	bx	lr
 8022d32:	bf00      	nop
 8022d34:	08020a93 	.word	0x08020a93
 8022d38:	20000108 	.word	0x20000108

08022d3c <strcpy>:
 8022d3c:	4603      	mov	r3, r0
 8022d3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022d42:	f803 2b01 	strb.w	r2, [r3], #1
 8022d46:	2a00      	cmp	r2, #0
 8022d48:	d1f9      	bne.n	8022d3e <strcpy+0x2>
 8022d4a:	4770      	bx	lr

08022d4c <strncmp>:
 8022d4c:	b510      	push	{r4, lr}
 8022d4e:	b16a      	cbz	r2, 8022d6c <strncmp+0x20>
 8022d50:	3901      	subs	r1, #1
 8022d52:	1884      	adds	r4, r0, r2
 8022d54:	f810 3b01 	ldrb.w	r3, [r0], #1
 8022d58:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8022d5c:	4293      	cmp	r3, r2
 8022d5e:	d103      	bne.n	8022d68 <strncmp+0x1c>
 8022d60:	42a0      	cmp	r0, r4
 8022d62:	d001      	beq.n	8022d68 <strncmp+0x1c>
 8022d64:	2b00      	cmp	r3, #0
 8022d66:	d1f5      	bne.n	8022d54 <strncmp+0x8>
 8022d68:	1a98      	subs	r0, r3, r2
 8022d6a:	bd10      	pop	{r4, pc}
 8022d6c:	4610      	mov	r0, r2
 8022d6e:	e7fc      	b.n	8022d6a <strncmp+0x1e>

08022d70 <__ascii_wctomb>:
 8022d70:	b149      	cbz	r1, 8022d86 <__ascii_wctomb+0x16>
 8022d72:	2aff      	cmp	r2, #255	; 0xff
 8022d74:	bf85      	ittet	hi
 8022d76:	238a      	movhi	r3, #138	; 0x8a
 8022d78:	6003      	strhi	r3, [r0, #0]
 8022d7a:	700a      	strbls	r2, [r1, #0]
 8022d7c:	f04f 30ff 	movhi.w	r0, #4294967295
 8022d80:	bf98      	it	ls
 8022d82:	2001      	movls	r0, #1
 8022d84:	4770      	bx	lr
 8022d86:	4608      	mov	r0, r1
 8022d88:	4770      	bx	lr
	...

08022d8c <__env_lock>:
 8022d8c:	4801      	ldr	r0, [pc, #4]	; (8022d94 <__env_lock+0x8>)
 8022d8e:	f7fd bc16 	b.w	80205be <__retarget_lock_acquire_recursive>
 8022d92:	bf00      	nop
 8022d94:	20000f8a 	.word	0x20000f8a

08022d98 <__env_unlock>:
 8022d98:	4801      	ldr	r0, [pc, #4]	; (8022da0 <__env_unlock+0x8>)
 8022d9a:	f7fd bc12 	b.w	80205c2 <__retarget_lock_release_recursive>
 8022d9e:	bf00      	nop
 8022da0:	20000f8a 	.word	0x20000f8a

08022da4 <memmove>:
 8022da4:	4288      	cmp	r0, r1
 8022da6:	b510      	push	{r4, lr}
 8022da8:	eb01 0402 	add.w	r4, r1, r2
 8022dac:	d902      	bls.n	8022db4 <memmove+0x10>
 8022dae:	4284      	cmp	r4, r0
 8022db0:	4623      	mov	r3, r4
 8022db2:	d807      	bhi.n	8022dc4 <memmove+0x20>
 8022db4:	1e43      	subs	r3, r0, #1
 8022db6:	42a1      	cmp	r1, r4
 8022db8:	d008      	beq.n	8022dcc <memmove+0x28>
 8022dba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022dbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022dc2:	e7f8      	b.n	8022db6 <memmove+0x12>
 8022dc4:	4402      	add	r2, r0
 8022dc6:	4601      	mov	r1, r0
 8022dc8:	428a      	cmp	r2, r1
 8022dca:	d100      	bne.n	8022dce <memmove+0x2a>
 8022dcc:	bd10      	pop	{r4, pc}
 8022dce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022dd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8022dd6:	e7f7      	b.n	8022dc8 <memmove+0x24>

08022dd8 <_malloc_usable_size_r>:
 8022dd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022ddc:	1f18      	subs	r0, r3, #4
 8022dde:	2b00      	cmp	r3, #0
 8022de0:	bfbc      	itt	lt
 8022de2:	580b      	ldrlt	r3, [r1, r0]
 8022de4:	18c0      	addlt	r0, r0, r3
 8022de6:	4770      	bx	lr

08022de8 <_sungetc_r>:
 8022de8:	b538      	push	{r3, r4, r5, lr}
 8022dea:	1c4b      	adds	r3, r1, #1
 8022dec:	4614      	mov	r4, r2
 8022dee:	d103      	bne.n	8022df8 <_sungetc_r+0x10>
 8022df0:	f04f 35ff 	mov.w	r5, #4294967295
 8022df4:	4628      	mov	r0, r5
 8022df6:	bd38      	pop	{r3, r4, r5, pc}
 8022df8:	8993      	ldrh	r3, [r2, #12]
 8022dfa:	f023 0320 	bic.w	r3, r3, #32
 8022dfe:	8193      	strh	r3, [r2, #12]
 8022e00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022e02:	6852      	ldr	r2, [r2, #4]
 8022e04:	b2cd      	uxtb	r5, r1
 8022e06:	b18b      	cbz	r3, 8022e2c <_sungetc_r+0x44>
 8022e08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8022e0a:	4293      	cmp	r3, r2
 8022e0c:	dd08      	ble.n	8022e20 <_sungetc_r+0x38>
 8022e0e:	6823      	ldr	r3, [r4, #0]
 8022e10:	1e5a      	subs	r2, r3, #1
 8022e12:	6022      	str	r2, [r4, #0]
 8022e14:	f803 5c01 	strb.w	r5, [r3, #-1]
 8022e18:	6863      	ldr	r3, [r4, #4]
 8022e1a:	3301      	adds	r3, #1
 8022e1c:	6063      	str	r3, [r4, #4]
 8022e1e:	e7e9      	b.n	8022df4 <_sungetc_r+0xc>
 8022e20:	4621      	mov	r1, r4
 8022e22:	f000 fb39 	bl	8023498 <__submore>
 8022e26:	2800      	cmp	r0, #0
 8022e28:	d0f1      	beq.n	8022e0e <_sungetc_r+0x26>
 8022e2a:	e7e1      	b.n	8022df0 <_sungetc_r+0x8>
 8022e2c:	6921      	ldr	r1, [r4, #16]
 8022e2e:	6823      	ldr	r3, [r4, #0]
 8022e30:	b151      	cbz	r1, 8022e48 <_sungetc_r+0x60>
 8022e32:	4299      	cmp	r1, r3
 8022e34:	d208      	bcs.n	8022e48 <_sungetc_r+0x60>
 8022e36:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8022e3a:	42a9      	cmp	r1, r5
 8022e3c:	d104      	bne.n	8022e48 <_sungetc_r+0x60>
 8022e3e:	3b01      	subs	r3, #1
 8022e40:	3201      	adds	r2, #1
 8022e42:	6023      	str	r3, [r4, #0]
 8022e44:	6062      	str	r2, [r4, #4]
 8022e46:	e7d5      	b.n	8022df4 <_sungetc_r+0xc>
 8022e48:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8022e4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022e50:	6363      	str	r3, [r4, #52]	; 0x34
 8022e52:	2303      	movs	r3, #3
 8022e54:	63a3      	str	r3, [r4, #56]	; 0x38
 8022e56:	4623      	mov	r3, r4
 8022e58:	f803 5f46 	strb.w	r5, [r3, #70]!
 8022e5c:	6023      	str	r3, [r4, #0]
 8022e5e:	2301      	movs	r3, #1
 8022e60:	e7dc      	b.n	8022e1c <_sungetc_r+0x34>

08022e62 <__ssrefill_r>:
 8022e62:	b510      	push	{r4, lr}
 8022e64:	460c      	mov	r4, r1
 8022e66:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8022e68:	b169      	cbz	r1, 8022e86 <__ssrefill_r+0x24>
 8022e6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022e6e:	4299      	cmp	r1, r3
 8022e70:	d001      	beq.n	8022e76 <__ssrefill_r+0x14>
 8022e72:	f7fd fc41 	bl	80206f8 <_free_r>
 8022e76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022e78:	6063      	str	r3, [r4, #4]
 8022e7a:	2000      	movs	r0, #0
 8022e7c:	6360      	str	r0, [r4, #52]	; 0x34
 8022e7e:	b113      	cbz	r3, 8022e86 <__ssrefill_r+0x24>
 8022e80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8022e82:	6023      	str	r3, [r4, #0]
 8022e84:	bd10      	pop	{r4, pc}
 8022e86:	6923      	ldr	r3, [r4, #16]
 8022e88:	6023      	str	r3, [r4, #0]
 8022e8a:	2300      	movs	r3, #0
 8022e8c:	6063      	str	r3, [r4, #4]
 8022e8e:	89a3      	ldrh	r3, [r4, #12]
 8022e90:	f043 0320 	orr.w	r3, r3, #32
 8022e94:	81a3      	strh	r3, [r4, #12]
 8022e96:	f04f 30ff 	mov.w	r0, #4294967295
 8022e9a:	e7f3      	b.n	8022e84 <__ssrefill_r+0x22>

08022e9c <__ssvfiscanf_r>:
 8022e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ea0:	460c      	mov	r4, r1
 8022ea2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8022ea6:	2100      	movs	r1, #0
 8022ea8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8022eac:	49b2      	ldr	r1, [pc, #712]	; (8023178 <__ssvfiscanf_r+0x2dc>)
 8022eae:	91a0      	str	r1, [sp, #640]	; 0x280
 8022eb0:	f10d 0804 	add.w	r8, sp, #4
 8022eb4:	49b1      	ldr	r1, [pc, #708]	; (802317c <__ssvfiscanf_r+0x2e0>)
 8022eb6:	4fb2      	ldr	r7, [pc, #712]	; (8023180 <__ssvfiscanf_r+0x2e4>)
 8022eb8:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8023184 <__ssvfiscanf_r+0x2e8>
 8022ebc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8022ec0:	4606      	mov	r6, r0
 8022ec2:	91a1      	str	r1, [sp, #644]	; 0x284
 8022ec4:	9300      	str	r3, [sp, #0]
 8022ec6:	f892 a000 	ldrb.w	sl, [r2]
 8022eca:	f1ba 0f00 	cmp.w	sl, #0
 8022ece:	f000 8151 	beq.w	8023174 <__ssvfiscanf_r+0x2d8>
 8022ed2:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8022ed6:	f013 0308 	ands.w	r3, r3, #8
 8022eda:	f102 0501 	add.w	r5, r2, #1
 8022ede:	d019      	beq.n	8022f14 <__ssvfiscanf_r+0x78>
 8022ee0:	6863      	ldr	r3, [r4, #4]
 8022ee2:	2b00      	cmp	r3, #0
 8022ee4:	dd0f      	ble.n	8022f06 <__ssvfiscanf_r+0x6a>
 8022ee6:	6823      	ldr	r3, [r4, #0]
 8022ee8:	781a      	ldrb	r2, [r3, #0]
 8022eea:	5cba      	ldrb	r2, [r7, r2]
 8022eec:	0712      	lsls	r2, r2, #28
 8022eee:	d401      	bmi.n	8022ef4 <__ssvfiscanf_r+0x58>
 8022ef0:	462a      	mov	r2, r5
 8022ef2:	e7e8      	b.n	8022ec6 <__ssvfiscanf_r+0x2a>
 8022ef4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8022ef6:	3201      	adds	r2, #1
 8022ef8:	9245      	str	r2, [sp, #276]	; 0x114
 8022efa:	6862      	ldr	r2, [r4, #4]
 8022efc:	3301      	adds	r3, #1
 8022efe:	3a01      	subs	r2, #1
 8022f00:	6062      	str	r2, [r4, #4]
 8022f02:	6023      	str	r3, [r4, #0]
 8022f04:	e7ec      	b.n	8022ee0 <__ssvfiscanf_r+0x44>
 8022f06:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8022f08:	4621      	mov	r1, r4
 8022f0a:	4630      	mov	r0, r6
 8022f0c:	4798      	blx	r3
 8022f0e:	2800      	cmp	r0, #0
 8022f10:	d0e9      	beq.n	8022ee6 <__ssvfiscanf_r+0x4a>
 8022f12:	e7ed      	b.n	8022ef0 <__ssvfiscanf_r+0x54>
 8022f14:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8022f18:	f040 8083 	bne.w	8023022 <__ssvfiscanf_r+0x186>
 8022f1c:	9341      	str	r3, [sp, #260]	; 0x104
 8022f1e:	9343      	str	r3, [sp, #268]	; 0x10c
 8022f20:	7853      	ldrb	r3, [r2, #1]
 8022f22:	2b2a      	cmp	r3, #42	; 0x2a
 8022f24:	bf02      	ittt	eq
 8022f26:	2310      	moveq	r3, #16
 8022f28:	1c95      	addeq	r5, r2, #2
 8022f2a:	9341      	streq	r3, [sp, #260]	; 0x104
 8022f2c:	220a      	movs	r2, #10
 8022f2e:	46ab      	mov	fp, r5
 8022f30:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8022f34:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8022f38:	2b09      	cmp	r3, #9
 8022f3a:	d91d      	bls.n	8022f78 <__ssvfiscanf_r+0xdc>
 8022f3c:	4891      	ldr	r0, [pc, #580]	; (8023184 <__ssvfiscanf_r+0x2e8>)
 8022f3e:	2203      	movs	r2, #3
 8022f40:	f7dd f98e 	bl	8000260 <memchr>
 8022f44:	b140      	cbz	r0, 8022f58 <__ssvfiscanf_r+0xbc>
 8022f46:	2301      	movs	r3, #1
 8022f48:	eba0 0009 	sub.w	r0, r0, r9
 8022f4c:	fa03 f000 	lsl.w	r0, r3, r0
 8022f50:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8022f52:	4318      	orrs	r0, r3
 8022f54:	9041      	str	r0, [sp, #260]	; 0x104
 8022f56:	465d      	mov	r5, fp
 8022f58:	f815 3b01 	ldrb.w	r3, [r5], #1
 8022f5c:	2b78      	cmp	r3, #120	; 0x78
 8022f5e:	d806      	bhi.n	8022f6e <__ssvfiscanf_r+0xd2>
 8022f60:	2b57      	cmp	r3, #87	; 0x57
 8022f62:	d810      	bhi.n	8022f86 <__ssvfiscanf_r+0xea>
 8022f64:	2b25      	cmp	r3, #37	; 0x25
 8022f66:	d05c      	beq.n	8023022 <__ssvfiscanf_r+0x186>
 8022f68:	d856      	bhi.n	8023018 <__ssvfiscanf_r+0x17c>
 8022f6a:	2b00      	cmp	r3, #0
 8022f6c:	d074      	beq.n	8023058 <__ssvfiscanf_r+0x1bc>
 8022f6e:	2303      	movs	r3, #3
 8022f70:	9347      	str	r3, [sp, #284]	; 0x11c
 8022f72:	230a      	movs	r3, #10
 8022f74:	9342      	str	r3, [sp, #264]	; 0x108
 8022f76:	e081      	b.n	802307c <__ssvfiscanf_r+0x1e0>
 8022f78:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8022f7a:	fb02 1303 	mla	r3, r2, r3, r1
 8022f7e:	3b30      	subs	r3, #48	; 0x30
 8022f80:	9343      	str	r3, [sp, #268]	; 0x10c
 8022f82:	465d      	mov	r5, fp
 8022f84:	e7d3      	b.n	8022f2e <__ssvfiscanf_r+0x92>
 8022f86:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8022f8a:	2a20      	cmp	r2, #32
 8022f8c:	d8ef      	bhi.n	8022f6e <__ssvfiscanf_r+0xd2>
 8022f8e:	a101      	add	r1, pc, #4	; (adr r1, 8022f94 <__ssvfiscanf_r+0xf8>)
 8022f90:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8022f94:	08023067 	.word	0x08023067
 8022f98:	08022f6f 	.word	0x08022f6f
 8022f9c:	08022f6f 	.word	0x08022f6f
 8022fa0:	080230c5 	.word	0x080230c5
 8022fa4:	08022f6f 	.word	0x08022f6f
 8022fa8:	08022f6f 	.word	0x08022f6f
 8022fac:	08022f6f 	.word	0x08022f6f
 8022fb0:	08022f6f 	.word	0x08022f6f
 8022fb4:	08022f6f 	.word	0x08022f6f
 8022fb8:	08022f6f 	.word	0x08022f6f
 8022fbc:	08022f6f 	.word	0x08022f6f
 8022fc0:	080230db 	.word	0x080230db
 8022fc4:	080230b1 	.word	0x080230b1
 8022fc8:	0802301f 	.word	0x0802301f
 8022fcc:	0802301f 	.word	0x0802301f
 8022fd0:	0802301f 	.word	0x0802301f
 8022fd4:	08022f6f 	.word	0x08022f6f
 8022fd8:	080230b5 	.word	0x080230b5
 8022fdc:	08022f6f 	.word	0x08022f6f
 8022fe0:	08022f6f 	.word	0x08022f6f
 8022fe4:	08022f6f 	.word	0x08022f6f
 8022fe8:	08022f6f 	.word	0x08022f6f
 8022fec:	080230eb 	.word	0x080230eb
 8022ff0:	080230bd 	.word	0x080230bd
 8022ff4:	0802305f 	.word	0x0802305f
 8022ff8:	08022f6f 	.word	0x08022f6f
 8022ffc:	08022f6f 	.word	0x08022f6f
 8023000:	080230e7 	.word	0x080230e7
 8023004:	08022f6f 	.word	0x08022f6f
 8023008:	080230b1 	.word	0x080230b1
 802300c:	08022f6f 	.word	0x08022f6f
 8023010:	08022f6f 	.word	0x08022f6f
 8023014:	08023067 	.word	0x08023067
 8023018:	3b45      	subs	r3, #69	; 0x45
 802301a:	2b02      	cmp	r3, #2
 802301c:	d8a7      	bhi.n	8022f6e <__ssvfiscanf_r+0xd2>
 802301e:	2305      	movs	r3, #5
 8023020:	e02b      	b.n	802307a <__ssvfiscanf_r+0x1de>
 8023022:	6863      	ldr	r3, [r4, #4]
 8023024:	2b00      	cmp	r3, #0
 8023026:	dd0d      	ble.n	8023044 <__ssvfiscanf_r+0x1a8>
 8023028:	6823      	ldr	r3, [r4, #0]
 802302a:	781a      	ldrb	r2, [r3, #0]
 802302c:	4552      	cmp	r2, sl
 802302e:	f040 80a1 	bne.w	8023174 <__ssvfiscanf_r+0x2d8>
 8023032:	3301      	adds	r3, #1
 8023034:	6862      	ldr	r2, [r4, #4]
 8023036:	6023      	str	r3, [r4, #0]
 8023038:	9b45      	ldr	r3, [sp, #276]	; 0x114
 802303a:	3a01      	subs	r2, #1
 802303c:	3301      	adds	r3, #1
 802303e:	6062      	str	r2, [r4, #4]
 8023040:	9345      	str	r3, [sp, #276]	; 0x114
 8023042:	e755      	b.n	8022ef0 <__ssvfiscanf_r+0x54>
 8023044:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8023046:	4621      	mov	r1, r4
 8023048:	4630      	mov	r0, r6
 802304a:	4798      	blx	r3
 802304c:	2800      	cmp	r0, #0
 802304e:	d0eb      	beq.n	8023028 <__ssvfiscanf_r+0x18c>
 8023050:	9844      	ldr	r0, [sp, #272]	; 0x110
 8023052:	2800      	cmp	r0, #0
 8023054:	f040 8084 	bne.w	8023160 <__ssvfiscanf_r+0x2c4>
 8023058:	f04f 30ff 	mov.w	r0, #4294967295
 802305c:	e086      	b.n	802316c <__ssvfiscanf_r+0x2d0>
 802305e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8023060:	f042 0220 	orr.w	r2, r2, #32
 8023064:	9241      	str	r2, [sp, #260]	; 0x104
 8023066:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8023068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802306c:	9241      	str	r2, [sp, #260]	; 0x104
 802306e:	2210      	movs	r2, #16
 8023070:	2b6f      	cmp	r3, #111	; 0x6f
 8023072:	9242      	str	r2, [sp, #264]	; 0x108
 8023074:	bf34      	ite	cc
 8023076:	2303      	movcc	r3, #3
 8023078:	2304      	movcs	r3, #4
 802307a:	9347      	str	r3, [sp, #284]	; 0x11c
 802307c:	6863      	ldr	r3, [r4, #4]
 802307e:	2b00      	cmp	r3, #0
 8023080:	dd41      	ble.n	8023106 <__ssvfiscanf_r+0x26a>
 8023082:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8023084:	0659      	lsls	r1, r3, #25
 8023086:	d404      	bmi.n	8023092 <__ssvfiscanf_r+0x1f6>
 8023088:	6823      	ldr	r3, [r4, #0]
 802308a:	781a      	ldrb	r2, [r3, #0]
 802308c:	5cba      	ldrb	r2, [r7, r2]
 802308e:	0712      	lsls	r2, r2, #28
 8023090:	d440      	bmi.n	8023114 <__ssvfiscanf_r+0x278>
 8023092:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8023094:	2b02      	cmp	r3, #2
 8023096:	dc4f      	bgt.n	8023138 <__ssvfiscanf_r+0x29c>
 8023098:	466b      	mov	r3, sp
 802309a:	4622      	mov	r2, r4
 802309c:	a941      	add	r1, sp, #260	; 0x104
 802309e:	4630      	mov	r0, r6
 80230a0:	f000 f874 	bl	802318c <_scanf_chars>
 80230a4:	2801      	cmp	r0, #1
 80230a6:	d065      	beq.n	8023174 <__ssvfiscanf_r+0x2d8>
 80230a8:	2802      	cmp	r0, #2
 80230aa:	f47f af21 	bne.w	8022ef0 <__ssvfiscanf_r+0x54>
 80230ae:	e7cf      	b.n	8023050 <__ssvfiscanf_r+0x1b4>
 80230b0:	220a      	movs	r2, #10
 80230b2:	e7dd      	b.n	8023070 <__ssvfiscanf_r+0x1d4>
 80230b4:	2300      	movs	r3, #0
 80230b6:	9342      	str	r3, [sp, #264]	; 0x108
 80230b8:	2303      	movs	r3, #3
 80230ba:	e7de      	b.n	802307a <__ssvfiscanf_r+0x1de>
 80230bc:	2308      	movs	r3, #8
 80230be:	9342      	str	r3, [sp, #264]	; 0x108
 80230c0:	2304      	movs	r3, #4
 80230c2:	e7da      	b.n	802307a <__ssvfiscanf_r+0x1de>
 80230c4:	4629      	mov	r1, r5
 80230c6:	4640      	mov	r0, r8
 80230c8:	f000 f9ac 	bl	8023424 <__sccl>
 80230cc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80230ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80230d2:	9341      	str	r3, [sp, #260]	; 0x104
 80230d4:	4605      	mov	r5, r0
 80230d6:	2301      	movs	r3, #1
 80230d8:	e7cf      	b.n	802307a <__ssvfiscanf_r+0x1de>
 80230da:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80230dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80230e0:	9341      	str	r3, [sp, #260]	; 0x104
 80230e2:	2300      	movs	r3, #0
 80230e4:	e7c9      	b.n	802307a <__ssvfiscanf_r+0x1de>
 80230e6:	2302      	movs	r3, #2
 80230e8:	e7c7      	b.n	802307a <__ssvfiscanf_r+0x1de>
 80230ea:	9841      	ldr	r0, [sp, #260]	; 0x104
 80230ec:	06c3      	lsls	r3, r0, #27
 80230ee:	f53f aeff 	bmi.w	8022ef0 <__ssvfiscanf_r+0x54>
 80230f2:	9b00      	ldr	r3, [sp, #0]
 80230f4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80230f6:	1d19      	adds	r1, r3, #4
 80230f8:	9100      	str	r1, [sp, #0]
 80230fa:	681b      	ldr	r3, [r3, #0]
 80230fc:	07c0      	lsls	r0, r0, #31
 80230fe:	bf4c      	ite	mi
 8023100:	801a      	strhmi	r2, [r3, #0]
 8023102:	601a      	strpl	r2, [r3, #0]
 8023104:	e6f4      	b.n	8022ef0 <__ssvfiscanf_r+0x54>
 8023106:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8023108:	4621      	mov	r1, r4
 802310a:	4630      	mov	r0, r6
 802310c:	4798      	blx	r3
 802310e:	2800      	cmp	r0, #0
 8023110:	d0b7      	beq.n	8023082 <__ssvfiscanf_r+0x1e6>
 8023112:	e79d      	b.n	8023050 <__ssvfiscanf_r+0x1b4>
 8023114:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8023116:	3201      	adds	r2, #1
 8023118:	9245      	str	r2, [sp, #276]	; 0x114
 802311a:	6862      	ldr	r2, [r4, #4]
 802311c:	3a01      	subs	r2, #1
 802311e:	2a00      	cmp	r2, #0
 8023120:	6062      	str	r2, [r4, #4]
 8023122:	dd02      	ble.n	802312a <__ssvfiscanf_r+0x28e>
 8023124:	3301      	adds	r3, #1
 8023126:	6023      	str	r3, [r4, #0]
 8023128:	e7ae      	b.n	8023088 <__ssvfiscanf_r+0x1ec>
 802312a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802312c:	4621      	mov	r1, r4
 802312e:	4630      	mov	r0, r6
 8023130:	4798      	blx	r3
 8023132:	2800      	cmp	r0, #0
 8023134:	d0a8      	beq.n	8023088 <__ssvfiscanf_r+0x1ec>
 8023136:	e78b      	b.n	8023050 <__ssvfiscanf_r+0x1b4>
 8023138:	2b04      	cmp	r3, #4
 802313a:	dc06      	bgt.n	802314a <__ssvfiscanf_r+0x2ae>
 802313c:	466b      	mov	r3, sp
 802313e:	4622      	mov	r2, r4
 8023140:	a941      	add	r1, sp, #260	; 0x104
 8023142:	4630      	mov	r0, r6
 8023144:	f000 f87a 	bl	802323c <_scanf_i>
 8023148:	e7ac      	b.n	80230a4 <__ssvfiscanf_r+0x208>
 802314a:	4b0f      	ldr	r3, [pc, #60]	; (8023188 <__ssvfiscanf_r+0x2ec>)
 802314c:	2b00      	cmp	r3, #0
 802314e:	f43f aecf 	beq.w	8022ef0 <__ssvfiscanf_r+0x54>
 8023152:	466b      	mov	r3, sp
 8023154:	4622      	mov	r2, r4
 8023156:	a941      	add	r1, sp, #260	; 0x104
 8023158:	4630      	mov	r0, r6
 802315a:	f3af 8000 	nop.w
 802315e:	e7a1      	b.n	80230a4 <__ssvfiscanf_r+0x208>
 8023160:	89a3      	ldrh	r3, [r4, #12]
 8023162:	f013 0f40 	tst.w	r3, #64	; 0x40
 8023166:	bf18      	it	ne
 8023168:	f04f 30ff 	movne.w	r0, #4294967295
 802316c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8023170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023174:	9844      	ldr	r0, [sp, #272]	; 0x110
 8023176:	e7f9      	b.n	802316c <__ssvfiscanf_r+0x2d0>
 8023178:	08022de9 	.word	0x08022de9
 802317c:	08022e63 	.word	0x08022e63
 8023180:	0802998d 	.word	0x0802998d
 8023184:	08029a9d 	.word	0x08029a9d
 8023188:	00000000 	.word	0x00000000

0802318c <_scanf_chars>:
 802318c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023190:	4615      	mov	r5, r2
 8023192:	688a      	ldr	r2, [r1, #8]
 8023194:	4680      	mov	r8, r0
 8023196:	460c      	mov	r4, r1
 8023198:	b932      	cbnz	r2, 80231a8 <_scanf_chars+0x1c>
 802319a:	698a      	ldr	r2, [r1, #24]
 802319c:	2a00      	cmp	r2, #0
 802319e:	bf0c      	ite	eq
 80231a0:	2201      	moveq	r2, #1
 80231a2:	f04f 32ff 	movne.w	r2, #4294967295
 80231a6:	608a      	str	r2, [r1, #8]
 80231a8:	6822      	ldr	r2, [r4, #0]
 80231aa:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8023238 <_scanf_chars+0xac>
 80231ae:	06d1      	lsls	r1, r2, #27
 80231b0:	bf5f      	itttt	pl
 80231b2:	681a      	ldrpl	r2, [r3, #0]
 80231b4:	1d11      	addpl	r1, r2, #4
 80231b6:	6019      	strpl	r1, [r3, #0]
 80231b8:	6816      	ldrpl	r6, [r2, #0]
 80231ba:	2700      	movs	r7, #0
 80231bc:	69a0      	ldr	r0, [r4, #24]
 80231be:	b188      	cbz	r0, 80231e4 <_scanf_chars+0x58>
 80231c0:	2801      	cmp	r0, #1
 80231c2:	d107      	bne.n	80231d4 <_scanf_chars+0x48>
 80231c4:	682b      	ldr	r3, [r5, #0]
 80231c6:	781a      	ldrb	r2, [r3, #0]
 80231c8:	6963      	ldr	r3, [r4, #20]
 80231ca:	5c9b      	ldrb	r3, [r3, r2]
 80231cc:	b953      	cbnz	r3, 80231e4 <_scanf_chars+0x58>
 80231ce:	bb27      	cbnz	r7, 802321a <_scanf_chars+0x8e>
 80231d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80231d4:	2802      	cmp	r0, #2
 80231d6:	d120      	bne.n	802321a <_scanf_chars+0x8e>
 80231d8:	682b      	ldr	r3, [r5, #0]
 80231da:	781b      	ldrb	r3, [r3, #0]
 80231dc:	f813 3009 	ldrb.w	r3, [r3, r9]
 80231e0:	071b      	lsls	r3, r3, #28
 80231e2:	d41a      	bmi.n	802321a <_scanf_chars+0x8e>
 80231e4:	6823      	ldr	r3, [r4, #0]
 80231e6:	06da      	lsls	r2, r3, #27
 80231e8:	bf5e      	ittt	pl
 80231ea:	682b      	ldrpl	r3, [r5, #0]
 80231ec:	781b      	ldrbpl	r3, [r3, #0]
 80231ee:	f806 3b01 	strbpl.w	r3, [r6], #1
 80231f2:	682a      	ldr	r2, [r5, #0]
 80231f4:	686b      	ldr	r3, [r5, #4]
 80231f6:	3201      	adds	r2, #1
 80231f8:	602a      	str	r2, [r5, #0]
 80231fa:	68a2      	ldr	r2, [r4, #8]
 80231fc:	3b01      	subs	r3, #1
 80231fe:	3a01      	subs	r2, #1
 8023200:	606b      	str	r3, [r5, #4]
 8023202:	3701      	adds	r7, #1
 8023204:	60a2      	str	r2, [r4, #8]
 8023206:	b142      	cbz	r2, 802321a <_scanf_chars+0x8e>
 8023208:	2b00      	cmp	r3, #0
 802320a:	dcd7      	bgt.n	80231bc <_scanf_chars+0x30>
 802320c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8023210:	4629      	mov	r1, r5
 8023212:	4640      	mov	r0, r8
 8023214:	4798      	blx	r3
 8023216:	2800      	cmp	r0, #0
 8023218:	d0d0      	beq.n	80231bc <_scanf_chars+0x30>
 802321a:	6823      	ldr	r3, [r4, #0]
 802321c:	f013 0310 	ands.w	r3, r3, #16
 8023220:	d105      	bne.n	802322e <_scanf_chars+0xa2>
 8023222:	68e2      	ldr	r2, [r4, #12]
 8023224:	3201      	adds	r2, #1
 8023226:	60e2      	str	r2, [r4, #12]
 8023228:	69a2      	ldr	r2, [r4, #24]
 802322a:	b102      	cbz	r2, 802322e <_scanf_chars+0xa2>
 802322c:	7033      	strb	r3, [r6, #0]
 802322e:	6923      	ldr	r3, [r4, #16]
 8023230:	441f      	add	r7, r3
 8023232:	6127      	str	r7, [r4, #16]
 8023234:	2000      	movs	r0, #0
 8023236:	e7cb      	b.n	80231d0 <_scanf_chars+0x44>
 8023238:	0802998d 	.word	0x0802998d

0802323c <_scanf_i>:
 802323c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023240:	4698      	mov	r8, r3
 8023242:	4b74      	ldr	r3, [pc, #464]	; (8023414 <_scanf_i+0x1d8>)
 8023244:	460c      	mov	r4, r1
 8023246:	4682      	mov	sl, r0
 8023248:	4616      	mov	r6, r2
 802324a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802324e:	b087      	sub	sp, #28
 8023250:	ab03      	add	r3, sp, #12
 8023252:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8023256:	4b70      	ldr	r3, [pc, #448]	; (8023418 <_scanf_i+0x1dc>)
 8023258:	69a1      	ldr	r1, [r4, #24]
 802325a:	4a70      	ldr	r2, [pc, #448]	; (802341c <_scanf_i+0x1e0>)
 802325c:	2903      	cmp	r1, #3
 802325e:	bf18      	it	ne
 8023260:	461a      	movne	r2, r3
 8023262:	68a3      	ldr	r3, [r4, #8]
 8023264:	9201      	str	r2, [sp, #4]
 8023266:	1e5a      	subs	r2, r3, #1
 8023268:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 802326c:	bf88      	it	hi
 802326e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8023272:	4627      	mov	r7, r4
 8023274:	bf82      	ittt	hi
 8023276:	eb03 0905 	addhi.w	r9, r3, r5
 802327a:	f240 135d 	movwhi	r3, #349	; 0x15d
 802327e:	60a3      	strhi	r3, [r4, #8]
 8023280:	f857 3b1c 	ldr.w	r3, [r7], #28
 8023284:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8023288:	bf98      	it	ls
 802328a:	f04f 0900 	movls.w	r9, #0
 802328e:	6023      	str	r3, [r4, #0]
 8023290:	463d      	mov	r5, r7
 8023292:	f04f 0b00 	mov.w	fp, #0
 8023296:	6831      	ldr	r1, [r6, #0]
 8023298:	ab03      	add	r3, sp, #12
 802329a:	7809      	ldrb	r1, [r1, #0]
 802329c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80232a0:	2202      	movs	r2, #2
 80232a2:	f7dc ffdd 	bl	8000260 <memchr>
 80232a6:	b328      	cbz	r0, 80232f4 <_scanf_i+0xb8>
 80232a8:	f1bb 0f01 	cmp.w	fp, #1
 80232ac:	d159      	bne.n	8023362 <_scanf_i+0x126>
 80232ae:	6862      	ldr	r2, [r4, #4]
 80232b0:	b92a      	cbnz	r2, 80232be <_scanf_i+0x82>
 80232b2:	6822      	ldr	r2, [r4, #0]
 80232b4:	2308      	movs	r3, #8
 80232b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80232ba:	6063      	str	r3, [r4, #4]
 80232bc:	6022      	str	r2, [r4, #0]
 80232be:	6822      	ldr	r2, [r4, #0]
 80232c0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80232c4:	6022      	str	r2, [r4, #0]
 80232c6:	68a2      	ldr	r2, [r4, #8]
 80232c8:	1e51      	subs	r1, r2, #1
 80232ca:	60a1      	str	r1, [r4, #8]
 80232cc:	b192      	cbz	r2, 80232f4 <_scanf_i+0xb8>
 80232ce:	6832      	ldr	r2, [r6, #0]
 80232d0:	1c51      	adds	r1, r2, #1
 80232d2:	6031      	str	r1, [r6, #0]
 80232d4:	7812      	ldrb	r2, [r2, #0]
 80232d6:	f805 2b01 	strb.w	r2, [r5], #1
 80232da:	6872      	ldr	r2, [r6, #4]
 80232dc:	3a01      	subs	r2, #1
 80232de:	2a00      	cmp	r2, #0
 80232e0:	6072      	str	r2, [r6, #4]
 80232e2:	dc07      	bgt.n	80232f4 <_scanf_i+0xb8>
 80232e4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80232e8:	4631      	mov	r1, r6
 80232ea:	4650      	mov	r0, sl
 80232ec:	4790      	blx	r2
 80232ee:	2800      	cmp	r0, #0
 80232f0:	f040 8085 	bne.w	80233fe <_scanf_i+0x1c2>
 80232f4:	f10b 0b01 	add.w	fp, fp, #1
 80232f8:	f1bb 0f03 	cmp.w	fp, #3
 80232fc:	d1cb      	bne.n	8023296 <_scanf_i+0x5a>
 80232fe:	6863      	ldr	r3, [r4, #4]
 8023300:	b90b      	cbnz	r3, 8023306 <_scanf_i+0xca>
 8023302:	230a      	movs	r3, #10
 8023304:	6063      	str	r3, [r4, #4]
 8023306:	6863      	ldr	r3, [r4, #4]
 8023308:	4945      	ldr	r1, [pc, #276]	; (8023420 <_scanf_i+0x1e4>)
 802330a:	6960      	ldr	r0, [r4, #20]
 802330c:	1ac9      	subs	r1, r1, r3
 802330e:	f000 f889 	bl	8023424 <__sccl>
 8023312:	f04f 0b00 	mov.w	fp, #0
 8023316:	68a3      	ldr	r3, [r4, #8]
 8023318:	6822      	ldr	r2, [r4, #0]
 802331a:	2b00      	cmp	r3, #0
 802331c:	d03d      	beq.n	802339a <_scanf_i+0x15e>
 802331e:	6831      	ldr	r1, [r6, #0]
 8023320:	6960      	ldr	r0, [r4, #20]
 8023322:	f891 c000 	ldrb.w	ip, [r1]
 8023326:	f810 000c 	ldrb.w	r0, [r0, ip]
 802332a:	2800      	cmp	r0, #0
 802332c:	d035      	beq.n	802339a <_scanf_i+0x15e>
 802332e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8023332:	d124      	bne.n	802337e <_scanf_i+0x142>
 8023334:	0510      	lsls	r0, r2, #20
 8023336:	d522      	bpl.n	802337e <_scanf_i+0x142>
 8023338:	f10b 0b01 	add.w	fp, fp, #1
 802333c:	f1b9 0f00 	cmp.w	r9, #0
 8023340:	d003      	beq.n	802334a <_scanf_i+0x10e>
 8023342:	3301      	adds	r3, #1
 8023344:	f109 39ff 	add.w	r9, r9, #4294967295
 8023348:	60a3      	str	r3, [r4, #8]
 802334a:	6873      	ldr	r3, [r6, #4]
 802334c:	3b01      	subs	r3, #1
 802334e:	2b00      	cmp	r3, #0
 8023350:	6073      	str	r3, [r6, #4]
 8023352:	dd1b      	ble.n	802338c <_scanf_i+0x150>
 8023354:	6833      	ldr	r3, [r6, #0]
 8023356:	3301      	adds	r3, #1
 8023358:	6033      	str	r3, [r6, #0]
 802335a:	68a3      	ldr	r3, [r4, #8]
 802335c:	3b01      	subs	r3, #1
 802335e:	60a3      	str	r3, [r4, #8]
 8023360:	e7d9      	b.n	8023316 <_scanf_i+0xda>
 8023362:	f1bb 0f02 	cmp.w	fp, #2
 8023366:	d1ae      	bne.n	80232c6 <_scanf_i+0x8a>
 8023368:	6822      	ldr	r2, [r4, #0]
 802336a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 802336e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8023372:	d1bf      	bne.n	80232f4 <_scanf_i+0xb8>
 8023374:	2310      	movs	r3, #16
 8023376:	6063      	str	r3, [r4, #4]
 8023378:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802337c:	e7a2      	b.n	80232c4 <_scanf_i+0x88>
 802337e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8023382:	6022      	str	r2, [r4, #0]
 8023384:	780b      	ldrb	r3, [r1, #0]
 8023386:	f805 3b01 	strb.w	r3, [r5], #1
 802338a:	e7de      	b.n	802334a <_scanf_i+0x10e>
 802338c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8023390:	4631      	mov	r1, r6
 8023392:	4650      	mov	r0, sl
 8023394:	4798      	blx	r3
 8023396:	2800      	cmp	r0, #0
 8023398:	d0df      	beq.n	802335a <_scanf_i+0x11e>
 802339a:	6823      	ldr	r3, [r4, #0]
 802339c:	05d9      	lsls	r1, r3, #23
 802339e:	d50d      	bpl.n	80233bc <_scanf_i+0x180>
 80233a0:	42bd      	cmp	r5, r7
 80233a2:	d909      	bls.n	80233b8 <_scanf_i+0x17c>
 80233a4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80233a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80233ac:	4632      	mov	r2, r6
 80233ae:	4650      	mov	r0, sl
 80233b0:	4798      	blx	r3
 80233b2:	f105 39ff 	add.w	r9, r5, #4294967295
 80233b6:	464d      	mov	r5, r9
 80233b8:	42bd      	cmp	r5, r7
 80233ba:	d028      	beq.n	802340e <_scanf_i+0x1d2>
 80233bc:	6822      	ldr	r2, [r4, #0]
 80233be:	f012 0210 	ands.w	r2, r2, #16
 80233c2:	d113      	bne.n	80233ec <_scanf_i+0x1b0>
 80233c4:	702a      	strb	r2, [r5, #0]
 80233c6:	6863      	ldr	r3, [r4, #4]
 80233c8:	9e01      	ldr	r6, [sp, #4]
 80233ca:	4639      	mov	r1, r7
 80233cc:	4650      	mov	r0, sl
 80233ce:	47b0      	blx	r6
 80233d0:	f8d8 3000 	ldr.w	r3, [r8]
 80233d4:	6821      	ldr	r1, [r4, #0]
 80233d6:	1d1a      	adds	r2, r3, #4
 80233d8:	f8c8 2000 	str.w	r2, [r8]
 80233dc:	f011 0f20 	tst.w	r1, #32
 80233e0:	681b      	ldr	r3, [r3, #0]
 80233e2:	d00f      	beq.n	8023404 <_scanf_i+0x1c8>
 80233e4:	6018      	str	r0, [r3, #0]
 80233e6:	68e3      	ldr	r3, [r4, #12]
 80233e8:	3301      	adds	r3, #1
 80233ea:	60e3      	str	r3, [r4, #12]
 80233ec:	1bed      	subs	r5, r5, r7
 80233ee:	44ab      	add	fp, r5
 80233f0:	6925      	ldr	r5, [r4, #16]
 80233f2:	445d      	add	r5, fp
 80233f4:	6125      	str	r5, [r4, #16]
 80233f6:	2000      	movs	r0, #0
 80233f8:	b007      	add	sp, #28
 80233fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80233fe:	f04f 0b00 	mov.w	fp, #0
 8023402:	e7ca      	b.n	802339a <_scanf_i+0x15e>
 8023404:	07ca      	lsls	r2, r1, #31
 8023406:	bf4c      	ite	mi
 8023408:	8018      	strhmi	r0, [r3, #0]
 802340a:	6018      	strpl	r0, [r3, #0]
 802340c:	e7eb      	b.n	80233e6 <_scanf_i+0x1aa>
 802340e:	2001      	movs	r0, #1
 8023410:	e7f2      	b.n	80233f8 <_scanf_i+0x1bc>
 8023412:	bf00      	nop
 8023414:	08026954 	.word	0x08026954
 8023418:	080217fd 	.word	0x080217fd
 802341c:	080216ed 	.word	0x080216ed
 8023420:	08029ae3 	.word	0x08029ae3

08023424 <__sccl>:
 8023424:	b570      	push	{r4, r5, r6, lr}
 8023426:	780b      	ldrb	r3, [r1, #0]
 8023428:	4604      	mov	r4, r0
 802342a:	2b5e      	cmp	r3, #94	; 0x5e
 802342c:	bf0b      	itete	eq
 802342e:	784b      	ldrbeq	r3, [r1, #1]
 8023430:	1c48      	addne	r0, r1, #1
 8023432:	1c88      	addeq	r0, r1, #2
 8023434:	2200      	movne	r2, #0
 8023436:	bf08      	it	eq
 8023438:	2201      	moveq	r2, #1
 802343a:	1e61      	subs	r1, r4, #1
 802343c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8023440:	f801 2f01 	strb.w	r2, [r1, #1]!
 8023444:	42a9      	cmp	r1, r5
 8023446:	d1fb      	bne.n	8023440 <__sccl+0x1c>
 8023448:	b90b      	cbnz	r3, 802344e <__sccl+0x2a>
 802344a:	3801      	subs	r0, #1
 802344c:	bd70      	pop	{r4, r5, r6, pc}
 802344e:	f082 0101 	eor.w	r1, r2, #1
 8023452:	54e1      	strb	r1, [r4, r3]
 8023454:	1c42      	adds	r2, r0, #1
 8023456:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 802345a:	2d2d      	cmp	r5, #45	; 0x2d
 802345c:	f102 36ff 	add.w	r6, r2, #4294967295
 8023460:	4610      	mov	r0, r2
 8023462:	d006      	beq.n	8023472 <__sccl+0x4e>
 8023464:	2d5d      	cmp	r5, #93	; 0x5d
 8023466:	d0f1      	beq.n	802344c <__sccl+0x28>
 8023468:	b90d      	cbnz	r5, 802346e <__sccl+0x4a>
 802346a:	4630      	mov	r0, r6
 802346c:	e7ee      	b.n	802344c <__sccl+0x28>
 802346e:	462b      	mov	r3, r5
 8023470:	e7ef      	b.n	8023452 <__sccl+0x2e>
 8023472:	7816      	ldrb	r6, [r2, #0]
 8023474:	2e5d      	cmp	r6, #93	; 0x5d
 8023476:	d0fa      	beq.n	802346e <__sccl+0x4a>
 8023478:	42b3      	cmp	r3, r6
 802347a:	dcf8      	bgt.n	802346e <__sccl+0x4a>
 802347c:	4618      	mov	r0, r3
 802347e:	3001      	adds	r0, #1
 8023480:	4286      	cmp	r6, r0
 8023482:	5421      	strb	r1, [r4, r0]
 8023484:	dcfb      	bgt.n	802347e <__sccl+0x5a>
 8023486:	43d8      	mvns	r0, r3
 8023488:	4430      	add	r0, r6
 802348a:	1c5d      	adds	r5, r3, #1
 802348c:	42b3      	cmp	r3, r6
 802348e:	bfa8      	it	ge
 8023490:	2000      	movge	r0, #0
 8023492:	182b      	adds	r3, r5, r0
 8023494:	3202      	adds	r2, #2
 8023496:	e7de      	b.n	8023456 <__sccl+0x32>

08023498 <__submore>:
 8023498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802349c:	460c      	mov	r4, r1
 802349e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80234a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80234a4:	4299      	cmp	r1, r3
 80234a6:	d11d      	bne.n	80234e4 <__submore+0x4c>
 80234a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80234ac:	f7fd f974 	bl	8020798 <_malloc_r>
 80234b0:	b918      	cbnz	r0, 80234ba <__submore+0x22>
 80234b2:	f04f 30ff 	mov.w	r0, #4294967295
 80234b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80234ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80234be:	63a3      	str	r3, [r4, #56]	; 0x38
 80234c0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80234c4:	6360      	str	r0, [r4, #52]	; 0x34
 80234c6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80234ca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80234ce:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80234d2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80234d6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80234da:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80234de:	6020      	str	r0, [r4, #0]
 80234e0:	2000      	movs	r0, #0
 80234e2:	e7e8      	b.n	80234b6 <__submore+0x1e>
 80234e4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80234e6:	0077      	lsls	r7, r6, #1
 80234e8:	463a      	mov	r2, r7
 80234ea:	f7fe fefd 	bl	80222e8 <_realloc_r>
 80234ee:	4605      	mov	r5, r0
 80234f0:	2800      	cmp	r0, #0
 80234f2:	d0de      	beq.n	80234b2 <__submore+0x1a>
 80234f4:	eb00 0806 	add.w	r8, r0, r6
 80234f8:	4601      	mov	r1, r0
 80234fa:	4632      	mov	r2, r6
 80234fc:	4640      	mov	r0, r8
 80234fe:	f7fd f8d5 	bl	80206ac <memcpy>
 8023502:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8023506:	f8c4 8000 	str.w	r8, [r4]
 802350a:	e7e9      	b.n	80234e0 <__submore+0x48>

0802350c <_init>:
 802350c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802350e:	bf00      	nop
 8023510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023512:	bc08      	pop	{r3}
 8023514:	469e      	mov	lr, r3
 8023516:	4770      	bx	lr

08023518 <_fini>:
 8023518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802351a:	bf00      	nop
 802351c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802351e:	bc08      	pop	{r3}
 8023520:	469e      	mov	lr, r3
 8023522:	4770      	bx	lr
 8023524:	0000      	movs	r0, r0
	...

08023528 <__time_veneer>:
 8023528:	e51ff004 	ldr	pc, [pc, #-4]	; 802352c <__time_veneer+0x4>
 802352c:	200005c0 	.word	0x200005c0
