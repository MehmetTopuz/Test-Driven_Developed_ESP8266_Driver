
ESP8266-TCP-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000213a0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005970  08021580  08021580  00031580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026ef0  08026ef0  0004033c  2**0
                  CONTENTS
  4 .ARM          00000008  08026ef0  08026ef0  00036ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026ef8  08026ef8  0004033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08026ef8  08026ef8  00036ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  08026f08  08026f08  00036f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  08026f18  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000af8  2000033c  08027254  0004033c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e34  08027254  00040e34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00067e92  00000000  00000000  0004036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000c0d0  00000000  00000000  000a81fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004208  00000000  00000000  000b42d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003fe8  00000000  00000000  000b84d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d849  00000000  00000000  000bc4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c85f  00000000  00000000  000e9d09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110991  00000000  00000000  00116568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00226ef9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00013f94  00000000  00000000  00226f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000033c 	.word	0x2000033c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08021560 	.word	0x08021560

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000340 	.word	0x20000340
 800021c:	08021560 	.word	0x08021560

08000220 <setjmp>:
 8000220:	46ec      	mov	ip, sp
 8000222:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000226:	f04f 0000 	mov.w	r0, #0
 800022a:	4770      	bx	lr

0800022c <longjmp>:
 800022c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000230:	46e5      	mov	sp, ip
 8000232:	0008      	movs	r0, r1
 8000234:	bf08      	it	eq
 8000236:	2001      	moveq	r0, #1
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <strcmp>:
 800024c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000254:	2a01      	cmp	r2, #1
 8000256:	bf28      	it	cs
 8000258:	429a      	cmpcs	r2, r3
 800025a:	d0f7      	beq.n	800024c <strcmp>
 800025c:	1ad0      	subs	r0, r2, r3
 800025e:	4770      	bx	lr

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__gedf2>:
 8000678:	f04f 3cff 	mov.w	ip, #4294967295
 800067c:	e006      	b.n	800068c <__cmpdf2+0x4>
 800067e:	bf00      	nop

08000680 <__ledf2>:
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	e002      	b.n	800068c <__cmpdf2+0x4>
 8000686:	bf00      	nop

08000688 <__cmpdf2>:
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800069c:	bf18      	it	ne
 800069e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006a2:	d01b      	beq.n	80006dc <__cmpdf2+0x54>
 80006a4:	b001      	add	sp, #4
 80006a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006aa:	bf0c      	ite	eq
 80006ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006b0:	ea91 0f03 	teqne	r1, r3
 80006b4:	bf02      	ittt	eq
 80006b6:	ea90 0f02 	teqeq	r0, r2
 80006ba:	2000      	moveq	r0, #0
 80006bc:	4770      	bxeq	lr
 80006be:	f110 0f00 	cmn.w	r0, #0
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf58      	it	pl
 80006c8:	4299      	cmppl	r1, r3
 80006ca:	bf08      	it	eq
 80006cc:	4290      	cmpeq	r0, r2
 80006ce:	bf2c      	ite	cs
 80006d0:	17d8      	asrcs	r0, r3, #31
 80006d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006d6:	f040 0001 	orr.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d102      	bne.n	80006ec <__cmpdf2+0x64>
 80006e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ea:	d107      	bne.n	80006fc <__cmpdf2+0x74>
 80006ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006f4:	d1d6      	bne.n	80006a4 <__cmpdf2+0x1c>
 80006f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006fa:	d0d3      	beq.n	80006a4 <__cmpdf2+0x1c>
 80006fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_cdrcmple>:
 8000704:	4684      	mov	ip, r0
 8000706:	4610      	mov	r0, r2
 8000708:	4662      	mov	r2, ip
 800070a:	468c      	mov	ip, r1
 800070c:	4619      	mov	r1, r3
 800070e:	4663      	mov	r3, ip
 8000710:	e000      	b.n	8000714 <__aeabi_cdcmpeq>
 8000712:	bf00      	nop

08000714 <__aeabi_cdcmpeq>:
 8000714:	b501      	push	{r0, lr}
 8000716:	f7ff ffb7 	bl	8000688 <__cmpdf2>
 800071a:	2800      	cmp	r0, #0
 800071c:	bf48      	it	mi
 800071e:	f110 0f00 	cmnmi.w	r0, #0
 8000722:	bd01      	pop	{r0, pc}

08000724 <__aeabi_dcmpeq>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff fff4 	bl	8000714 <__aeabi_cdcmpeq>
 800072c:	bf0c      	ite	eq
 800072e:	2001      	moveq	r0, #1
 8000730:	2000      	movne	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_dcmplt>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffea 	bl	8000714 <__aeabi_cdcmpeq>
 8000740:	bf34      	ite	cc
 8000742:	2001      	movcc	r0, #1
 8000744:	2000      	movcs	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_dcmple>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffe0 	bl	8000714 <__aeabi_cdcmpeq>
 8000754:	bf94      	ite	ls
 8000756:	2001      	movls	r0, #1
 8000758:	2000      	movhi	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_dcmpge>:
 8000760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000764:	f7ff ffce 	bl	8000704 <__aeabi_cdrcmple>
 8000768:	bf94      	ite	ls
 800076a:	2001      	movls	r0, #1
 800076c:	2000      	movhi	r0, #0
 800076e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000772:	bf00      	nop

08000774 <__aeabi_dcmpgt>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff ffc4 	bl	8000704 <__aeabi_cdrcmple>
 800077c:	bf34      	ite	cc
 800077e:	2001      	movcc	r0, #1
 8000780:	2000      	movcs	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_dcmpun>:
 8000788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800078c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000790:	d102      	bne.n	8000798 <__aeabi_dcmpun+0x10>
 8000792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000796:	d10a      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800079c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a0:	d102      	bne.n	80007a8 <__aeabi_dcmpun+0x20>
 80007a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007a6:	d102      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	f04f 0001 	mov.w	r0, #1
 80007b2:	4770      	bx	lr

080007b4 <__aeabi_ldivmod>:
 80007b4:	b97b      	cbnz	r3, 80007d6 <__aeabi_ldivmod+0x22>
 80007b6:	b972      	cbnz	r2, 80007d6 <__aeabi_ldivmod+0x22>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	bfbe      	ittt	lt
 80007bc:	2000      	movlt	r0, #0
 80007be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007c2:	e006      	blt.n	80007d2 <__aeabi_ldivmod+0x1e>
 80007c4:	bf08      	it	eq
 80007c6:	2800      	cmpeq	r0, #0
 80007c8:	bf1c      	itt	ne
 80007ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ce:	f04f 30ff 	movne.w	r0, #4294967295
 80007d2:	f000 b9b9 	b.w	8000b48 <__aeabi_idiv0>
 80007d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007de:	2900      	cmp	r1, #0
 80007e0:	db09      	blt.n	80007f6 <__aeabi_ldivmod+0x42>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db1a      	blt.n	800081c <__aeabi_ldivmod+0x68>
 80007e6:	f000 f84d 	bl	8000884 <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr
 80007f6:	4240      	negs	r0, r0
 80007f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db1b      	blt.n	8000838 <__aeabi_ldivmod+0x84>
 8000800:	f000 f840 	bl	8000884 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	4252      	negs	r2, r2
 8000816:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800081a:	4770      	bx	lr
 800081c:	4252      	negs	r2, r2
 800081e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000822:	f000 f82f 	bl	8000884 <__udivmoddi4>
 8000826:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082e:	b004      	add	sp, #16
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	4770      	bx	lr
 8000838:	4252      	negs	r2, r2
 800083a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800083e:	f000 f821 	bl	8000884 <__udivmoddi4>
 8000842:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084a:	b004      	add	sp, #16
 800084c:	4252      	negs	r2, r2
 800084e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000852:	4770      	bx	lr

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b96e 	b.w	8000b48 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468c      	mov	ip, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8083 	bne.w	800099a <__udivmoddi4+0x116>
 8000894:	428a      	cmp	r2, r1
 8000896:	4617      	mov	r7, r2
 8000898:	d947      	bls.n	800092a <__udivmoddi4+0xa6>
 800089a:	fab2 f282 	clz	r2, r2
 800089e:	b142      	cbz	r2, 80008b2 <__udivmoddi4+0x2e>
 80008a0:	f1c2 0020 	rsb	r0, r2, #32
 80008a4:	fa24 f000 	lsr.w	r0, r4, r0
 80008a8:	4091      	lsls	r1, r2
 80008aa:	4097      	lsls	r7, r2
 80008ac:	ea40 0c01 	orr.w	ip, r0, r1
 80008b0:	4094      	lsls	r4, r2
 80008b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008b6:	0c23      	lsrs	r3, r4, #16
 80008b8:	fbbc f6f8 	udiv	r6, ip, r8
 80008bc:	fa1f fe87 	uxth.w	lr, r7
 80008c0:	fb08 c116 	mls	r1, r8, r6, ip
 80008c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c8:	fb06 f10e 	mul.w	r1, r6, lr
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x60>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d6:	f080 8119 	bcs.w	8000b0c <__udivmoddi4+0x288>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 8116 	bls.w	8000b0c <__udivmoddi4+0x288>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ec:	fb08 3310 	mls	r3, r8, r0, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d909      	bls.n	8000910 <__udivmoddi4+0x8c>
 80008fc:	193c      	adds	r4, r7, r4
 80008fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000902:	f080 8105 	bcs.w	8000b10 <__udivmoddi4+0x28c>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f240 8102 	bls.w	8000b10 <__udivmoddi4+0x28c>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000914:	eba4 040e 	sub.w	r4, r4, lr
 8000918:	2600      	movs	r6, #0
 800091a:	b11d      	cbz	r5, 8000924 <__udivmoddi4+0xa0>
 800091c:	40d4      	lsrs	r4, r2
 800091e:	2300      	movs	r3, #0
 8000920:	e9c5 4300 	strd	r4, r3, [r5]
 8000924:	4631      	mov	r1, r6
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	b902      	cbnz	r2, 800092e <__udivmoddi4+0xaa>
 800092c:	deff      	udf	#255	; 0xff
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	2a00      	cmp	r2, #0
 8000934:	d150      	bne.n	80009d8 <__udivmoddi4+0x154>
 8000936:	1bcb      	subs	r3, r1, r7
 8000938:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093c:	fa1f f887 	uxth.w	r8, r7
 8000940:	2601      	movs	r6, #1
 8000942:	fbb3 fcfe 	udiv	ip, r3, lr
 8000946:	0c21      	lsrs	r1, r4, #16
 8000948:	fb0e 331c 	mls	r3, lr, ip, r3
 800094c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000950:	fb08 f30c 	mul.w	r3, r8, ip
 8000954:	428b      	cmp	r3, r1
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0xe4>
 8000958:	1879      	adds	r1, r7, r1
 800095a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0xe2>
 8000960:	428b      	cmp	r3, r1
 8000962:	f200 80e9 	bhi.w	8000b38 <__udivmoddi4+0x2b4>
 8000966:	4684      	mov	ip, r0
 8000968:	1ac9      	subs	r1, r1, r3
 800096a:	b2a3      	uxth	r3, r4
 800096c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000970:	fb0e 1110 	mls	r1, lr, r0, r1
 8000974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000978:	fb08 f800 	mul.w	r8, r8, r0
 800097c:	45a0      	cmp	r8, r4
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0x10c>
 8000980:	193c      	adds	r4, r7, r4
 8000982:	f100 33ff 	add.w	r3, r0, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x10a>
 8000988:	45a0      	cmp	r8, r4
 800098a:	f200 80d9 	bhi.w	8000b40 <__udivmoddi4+0x2bc>
 800098e:	4618      	mov	r0, r3
 8000990:	eba4 0408 	sub.w	r4, r4, r8
 8000994:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000998:	e7bf      	b.n	800091a <__udivmoddi4+0x96>
 800099a:	428b      	cmp	r3, r1
 800099c:	d909      	bls.n	80009b2 <__udivmoddi4+0x12e>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	f000 80b1 	beq.w	8000b06 <__udivmoddi4+0x282>
 80009a4:	2600      	movs	r6, #0
 80009a6:	e9c5 0100 	strd	r0, r1, [r5]
 80009aa:	4630      	mov	r0, r6
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	fab3 f683 	clz	r6, r3
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d14a      	bne.n	8000a50 <__udivmoddi4+0x1cc>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0x140>
 80009be:	4282      	cmp	r2, r0
 80009c0:	f200 80b8 	bhi.w	8000b34 <__udivmoddi4+0x2b0>
 80009c4:	1a84      	subs	r4, r0, r2
 80009c6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	468c      	mov	ip, r1
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d0a8      	beq.n	8000924 <__udivmoddi4+0xa0>
 80009d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0xa0>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa20 f603 	lsr.w	r6, r0, r3
 80009e0:	4097      	lsls	r7, r2
 80009e2:	fa01 f002 	lsl.w	r0, r1, r2
 80009e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	4330      	orrs	r0, r6
 80009ee:	0c03      	lsrs	r3, r0, #16
 80009f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009f4:	fa1f f887 	uxth.w	r8, r7
 80009f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a00:	fb06 f108 	mul.w	r1, r6, r8
 8000a04:	4299      	cmp	r1, r3
 8000a06:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x19c>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a12:	f080 808d 	bcs.w	8000b30 <__udivmoddi4+0x2ac>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 808a 	bls.w	8000b30 <__udivmoddi4+0x2ac>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	443b      	add	r3, r7
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b281      	uxth	r1, r0
 8000a24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb00 f308 	mul.w	r3, r0, r8
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x1c4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a3e:	d273      	bcs.n	8000b28 <__udivmoddi4+0x2a4>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d971      	bls.n	8000b28 <__udivmoddi4+0x2a4>
 8000a44:	3802      	subs	r0, #2
 8000a46:	4439      	add	r1, r7
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a4e:	e778      	b.n	8000942 <__udivmoddi4+0xbe>
 8000a50:	f1c6 0c20 	rsb	ip, r6, #32
 8000a54:	fa03 f406 	lsl.w	r4, r3, r6
 8000a58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a62:	fa01 f306 	lsl.w	r3, r1, r6
 8000a66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a6e:	431f      	orrs	r7, r3
 8000a70:	0c3b      	lsrs	r3, r7, #16
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fa1f f884 	uxth.w	r8, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a82:	fb09 fa08 	mul.w	sl, r9, r8
 8000a86:	458a      	cmp	sl, r1
 8000a88:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x220>
 8000a92:	1861      	adds	r1, r4, r1
 8000a94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a98:	d248      	bcs.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9a:	458a      	cmp	sl, r1
 8000a9c:	d946      	bls.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa2:	4421      	add	r1, r4
 8000aa4:	eba1 010a 	sub.w	r1, r1, sl
 8000aa8:	b2bf      	uxth	r7, r7
 8000aaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000aae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ab6:	fb00 f808 	mul.w	r8, r0, r8
 8000aba:	45b8      	cmp	r8, r7
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x24a>
 8000abe:	19e7      	adds	r7, r4, r7
 8000ac0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac4:	d22e      	bcs.n	8000b24 <__udivmoddi4+0x2a0>
 8000ac6:	45b8      	cmp	r8, r7
 8000ac8:	d92c      	bls.n	8000b24 <__udivmoddi4+0x2a0>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4427      	add	r7, r4
 8000ace:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad2:	eba7 0708 	sub.w	r7, r7, r8
 8000ad6:	fba0 8902 	umull	r8, r9, r0, r2
 8000ada:	454f      	cmp	r7, r9
 8000adc:	46c6      	mov	lr, r8
 8000ade:	4649      	mov	r1, r9
 8000ae0:	d31a      	bcc.n	8000b18 <__udivmoddi4+0x294>
 8000ae2:	d017      	beq.n	8000b14 <__udivmoddi4+0x290>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x27a>
 8000ae6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aea:	eb67 0701 	sbc.w	r7, r7, r1
 8000aee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000af2:	40f2      	lsrs	r2, r6
 8000af4:	ea4c 0202 	orr.w	r2, ip, r2
 8000af8:	40f7      	lsrs	r7, r6
 8000afa:	e9c5 2700 	strd	r2, r7, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e70b      	b.n	8000924 <__udivmoddi4+0xa0>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e9      	b.n	80008e4 <__udivmoddi4+0x60>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6fd      	b.n	8000910 <__udivmoddi4+0x8c>
 8000b14:	4543      	cmp	r3, r8
 8000b16:	d2e5      	bcs.n	8000ae4 <__udivmoddi4+0x260>
 8000b18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7df      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b24:	4608      	mov	r0, r1
 8000b26:	e7d2      	b.n	8000ace <__udivmoddi4+0x24a>
 8000b28:	4660      	mov	r0, ip
 8000b2a:	e78d      	b.n	8000a48 <__udivmoddi4+0x1c4>
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	e7b9      	b.n	8000aa4 <__udivmoddi4+0x220>
 8000b30:	4666      	mov	r6, ip
 8000b32:	e775      	b.n	8000a20 <__udivmoddi4+0x19c>
 8000b34:	4630      	mov	r0, r6
 8000b36:	e74a      	b.n	80009ce <__udivmoddi4+0x14a>
 8000b38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b3c:	4439      	add	r1, r7
 8000b3e:	e713      	b.n	8000968 <__udivmoddi4+0xe4>
 8000b40:	3802      	subs	r0, #2
 8000b42:	443c      	add	r4, r7
 8000b44:	e724      	b.n	8000990 <__udivmoddi4+0x10c>
 8000b46:	bf00      	nop

08000b48 <__aeabi_idiv0>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f000 fed3 	bl	800192c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a32      	ldr	r2, [pc, #200]	; (8000c7c <HAL_UART_MspInit+0xe8>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	4a31      	ldr	r2, [pc, #196]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a2b      	ldr	r2, [pc, #172]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f000 fc16 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c08:	e034      	b.n	8000c74 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <HAL_UART_MspInit+0xf0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d12f      	bne.n	8000c74 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480a      	ldr	r0, [pc, #40]	; (8000c88 <HAL_UART_MspInit+0xf4>)
 8000c60:	f000 fbe8 	bl	8001434 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2025      	movs	r0, #37	; 0x25
 8000c6a:	f000 faee 	bl	800124a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c6e:	2025      	movs	r0, #37	; 0x25
 8000c70:	f000 fb05 	bl	800127e <HAL_NVIC_EnableIRQ>
}
 8000c74:	bf00      	nop
 8000c76:	3730      	adds	r7, #48	; 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40008000 	.word	0x40008000
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40013800 	.word	0x40013800
 8000c88:	48000800 	.word	0x48000800

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f99c 	bl	8001014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <USART1_IRQHandler+0x10>)
 8000ce6:	f001 fe01 	bl	80028ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000408 	.word	0x20000408

08000cf4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cf8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cfc:	f000 fd4e 	bl	800179c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d10:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d013      	beq.n	8000d44 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d20:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d24:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00b      	beq.n	8000d44 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d2c:	e000      	b.n	8000d30 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d2e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f9      	beq.n	8000d2e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d3a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d44:	687b      	ldr	r3, [r7, #4]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
	return 1;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_kill>:

int _kill(int pid, int sig)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d6c:	f01c ff02 	bl	801db74 <__errno>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2216      	movs	r2, #22
 8000d74:	601a      	str	r2, [r3, #0]
	return -1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_exit>:

void _exit (int status)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ffe7 	bl	8000d62 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d94:	e7fe      	b.n	8000d94 <_exit+0x12>

08000d96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e00a      	b.n	8000dbe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000da8:	f3af 8000 	nop.w
 8000dac:	4601      	mov	r1, r0
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1c5a      	adds	r2, r3, #1
 8000db2:	60ba      	str	r2, [r7, #8]
 8000db4:	b2ca      	uxtb	r2, r1
 8000db6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	dbf0      	blt.n	8000da8 <_read+0x12>
	}

return len;
 8000dc6:	687b      	ldr	r3, [r7, #4]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	e009      	b.n	8000df6 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	60ba      	str	r2, [r7, #8]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff8a 	bl	8000d04 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3301      	adds	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dbf1      	blt.n	8000de2 <_write+0x12>
	}
	return len;
 8000dfe:	687b      	ldr	r3, [r7, #4]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <_close>:

int _close(int file)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	return -1;
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e30:	605a      	str	r2, [r3, #4]
	return 0;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_isatty>:

int _isatty(int file)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	return 1;
 8000e48:	2301      	movs	r3, #1
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b085      	sub	sp, #20
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
	return 0;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_open>:

int _open(char *path, int flags, ...)
{
 8000e70:	b40e      	push	{r1, r2, r3}
 8000e72:	b480      	push	{r7}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	b003      	add	sp, #12
 8000e8a:	4770      	bx	lr

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f01c fe5a 	bl	801db74 <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20020000 	.word	0x20020000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	2000035c 	.word	0x2000035c
 8000ef4:	20000e38 	.word	0x20000e38

08000ef8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f1e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f22:	490e      	ldr	r1, [pc, #56]	; (8000f5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <LoopForever+0xe>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f38:	4c0b      	ldr	r4, [pc, #44]	; (8000f68 <LoopForever+0x16>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f46:	f7ff ffd7 	bl	8000ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f01d fa31 	bl	801e3b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f4e:	f002 ff45 	bl	8003ddc <main>

08000f52 <LoopForever>:

LoopForever:
    b LoopForever
 8000f52:	e7fe      	b.n	8000f52 <LoopForever>
  ldr   r0, =_estack
 8000f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8000f60:	08026f18 	.word	0x08026f18
  ldr r2, =_sbss
 8000f64:	2000033c 	.word	0x2000033c
  ldr r4, =_ebss
 8000f68:	20000e34 	.word	0x20000e34

08000f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC1_2_IRQHandler>

08000f6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 f95b 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 f80e 	bl	8000fa0 <HAL_InitTick>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	e001      	b.n	8000f94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f90:	f7ff fddc 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f94:	79fb      	ldrb	r3, [r7, #7]

}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_InitTick+0x68>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d022      	beq.n	8000ffa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_InitTick+0x6c>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_InitTick+0x68>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f966 	bl	800129a <HAL_SYSTICK_Config>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10f      	bne.n	8000ff4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b0f      	cmp	r3, #15
 8000fd8:	d809      	bhi.n	8000fee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe2:	f000 f932 	bl	800124a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <HAL_InitTick+0x70>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e007      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e004      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e001      	b.n	8000ffe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000000c 	.word	0x2000000c
 800100c:	20000004 	.word	0x20000004
 8001010:	20000008 	.word	0x20000008

08001014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_IncTick+0x1c>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_IncTick+0x20>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4413      	add	r3, r2
 8001022:	4a03      	ldr	r2, [pc, #12]	; (8001030 <HAL_IncTick+0x1c>)
 8001024:	6013      	str	r3, [r2, #0]
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	20000e20 	.word	0x20000e20
 8001034:	2000000c 	.word	0x2000000c

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000e20 	.word	0x20000e20

08001050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff ffee 	bl	8001038 <HAL_GetTick>
 800105c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001068:	d004      	beq.n	8001074 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_Delay+0x40>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	4413      	add	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001074:	bf00      	nop
 8001076:	f7ff ffdf 	bl	8001038 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	429a      	cmp	r2, r3
 8001084:	d8f7      	bhi.n	8001076 <HAL_Delay+0x26>
  {
  }
}
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2000000c 	.word	0x2000000c

08001094 <__NVIC_SetPriorityGrouping>:
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b0:	4013      	ands	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	60d3      	str	r3, [r2, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_GetPriorityGrouping>:
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <__NVIC_GetPriorityGrouping+0x18>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	f003 0307 	and.w	r3, r3, #7
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_EnableIRQ>:
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	db0b      	blt.n	8001122 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	f003 021f 	and.w	r2, r3, #31
 8001110:	4907      	ldr	r1, [pc, #28]	; (8001130 <__NVIC_EnableIRQ+0x38>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	095b      	lsrs	r3, r3, #5
 8001118:	2001      	movs	r0, #1
 800111a:	fa00 f202 	lsl.w	r2, r0, r2
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000e100 	.word	0xe000e100

08001134 <__NVIC_SetPriority>:
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	; (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	; (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <SysTick_Config>:
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001200:	d301      	bcc.n	8001206 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001202:	2301      	movs	r3, #1
 8001204:	e00f      	b.n	8001226 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <SysTick_Config+0x40>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120e:	210f      	movs	r1, #15
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f7ff ff8e 	bl	8001134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <SysTick_Config+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <SysTick_Config+0x40>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff29 	bl	8001094 <__NVIC_SetPriorityGrouping>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff40 	bl	80010dc <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff90 	bl	8001188 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5f 	bl	8001134 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff33 	bl	80010f8 <__NVIC_EnableIRQ>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffa4 	bl	80011f0 <SysTick_Config>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b085      	sub	sp, #20
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d005      	beq.n	80012d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2204      	movs	r2, #4
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e037      	b.n	8001346 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 020e 	bic.w	r2, r2, #14
 80012e4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012f4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0201 	bic.w	r2, r2, #1
 8001304:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f003 021f 	and.w	r2, r3, #31
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	2101      	movs	r1, #1
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001322:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00c      	beq.n	8001346 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001336:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800133a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001344:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d00d      	beq.n	8001398 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2204      	movs	r2, #4
 8001380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	73fb      	strb	r3, [r7, #15]
 8001396:	e047      	b.n	8001428 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 020e 	bic.w	r2, r2, #14
 80013a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0201 	bic.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	2101      	movs	r1, #1
 80013d6:	fa01 f202 	lsl.w	r2, r1, r2
 80013da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00c      	beq.n	8001408 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001406:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	4798      	blx	r3
    }
  }
  return status;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001442:	e15a      	b.n	80016fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2101      	movs	r1, #1
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	fa01 f303 	lsl.w	r3, r1, r3
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 814c 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d00b      	beq.n	800147c <HAL_GPIO_Init+0x48>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d007      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001470:	2b11      	cmp	r3, #17
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b12      	cmp	r3, #18
 800147a:	d130      	bne.n	80014de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014b2:	2201      	movs	r2, #1
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	f003 0201 	and.w	r2, r3, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0xea>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b12      	cmp	r3, #18
 800151c:	d123      	bne.n	8001566 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	08da      	lsrs	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3208      	adds	r2, #8
 8001526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3208      	adds	r2, #8
 8001560:	6939      	ldr	r1, [r7, #16]
 8001562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0203 	and.w	r2, r3, #3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80a6 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a8:	4b5b      	ldr	r3, [pc, #364]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ac:	4a5a      	ldr	r2, [pc, #360]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6613      	str	r3, [r2, #96]	; 0x60
 80015b4:	4b58      	ldr	r3, [pc, #352]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015c0:	4a56      	ldr	r2, [pc, #344]	; (800171c <HAL_GPIO_Init+0x2e8>)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3302      	adds	r3, #2
 80015c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	220f      	movs	r2, #15
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015ea:	d01f      	beq.n	800162c <HAL_GPIO_Init+0x1f8>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a4c      	ldr	r2, [pc, #304]	; (8001720 <HAL_GPIO_Init+0x2ec>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d019      	beq.n	8001628 <HAL_GPIO_Init+0x1f4>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a4b      	ldr	r2, [pc, #300]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d013      	beq.n	8001624 <HAL_GPIO_Init+0x1f0>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a4a      	ldr	r2, [pc, #296]	; (8001728 <HAL_GPIO_Init+0x2f4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d00d      	beq.n	8001620 <HAL_GPIO_Init+0x1ec>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a49      	ldr	r2, [pc, #292]	; (800172c <HAL_GPIO_Init+0x2f8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d007      	beq.n	800161c <HAL_GPIO_Init+0x1e8>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a48      	ldr	r2, [pc, #288]	; (8001730 <HAL_GPIO_Init+0x2fc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d101      	bne.n	8001618 <HAL_GPIO_Init+0x1e4>
 8001614:	2305      	movs	r3, #5
 8001616:	e00a      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001618:	2306      	movs	r3, #6
 800161a:	e008      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800161c:	2304      	movs	r3, #4
 800161e:	e006      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001620:	2303      	movs	r3, #3
 8001622:	e004      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001624:	2302      	movs	r3, #2
 8001626:	e002      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800162c:	2300      	movs	r3, #0
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	f002 0203 	and.w	r2, r2, #3
 8001634:	0092      	lsls	r2, r2, #2
 8001636:	4093      	lsls	r3, r2
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800163e:	4937      	ldr	r1, [pc, #220]	; (800171c <HAL_GPIO_Init+0x2e8>)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800164c:	4b39      	ldr	r3, [pc, #228]	; (8001734 <HAL_GPIO_Init+0x300>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001670:	4a30      	ldr	r2, [pc, #192]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001676:	4b2f      	ldr	r3, [pc, #188]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800169a:	4a26      	ldr	r2, [pc, #152]	; (8001734 <HAL_GPIO_Init+0x300>)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016c4:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	3301      	adds	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	f47f ae9d 	bne.w	8001444 <HAL_GPIO_Init+0x10>
  }
}
 800170a:	bf00      	nop
 800170c:	bf00      	nop
 800170e:	371c      	adds	r7, #28
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40021000 	.word	0x40021000
 800171c:	40010000 	.word	0x40010000
 8001720:	48000400 	.word	0x48000400
 8001724:	48000800 	.word	0x48000800
 8001728:	48000c00 	.word	0x48000c00
 800172c:	48001000 	.word	0x48001000
 8001730:	48001400 	.word	0x48001400
 8001734:	40010400 	.word	0x40010400

08001738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
 8001744:	4613      	mov	r3, r2
 8001746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001748:	787b      	ldrb	r3, [r7, #1]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800174e:	887a      	ldrh	r2, [r7, #2]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001754:	e002      	b.n	800175c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800177a:	887a      	ldrh	r2, [r7, #2]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4013      	ands	r3, r2
 8001780:	041a      	lsls	r2, r3, #16
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43d9      	mvns	r1, r3
 8001786:	887b      	ldrh	r3, [r7, #2]
 8001788:	400b      	ands	r3, r1
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	619a      	str	r2, [r3, #24]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f806 	bl	80017cc <HAL_GPIO_EXTI_Callback>
  }
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d141      	bne.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017f2:	4b4b      	ldr	r3, [pc, #300]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fe:	d131      	bne.n	8001864 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001800:	4b47      	ldr	r3, [pc, #284]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001806:	4a46      	ldr	r2, [pc, #280]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800180c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001810:	4b43      	ldr	r3, [pc, #268]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001818:	4a41      	ldr	r2, [pc, #260]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001820:	4b40      	ldr	r3, [pc, #256]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2232      	movs	r2, #50	; 0x32
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	4a3f      	ldr	r2, [pc, #252]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	0c9b      	lsrs	r3, r3, #18
 8001832:	3301      	adds	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001836:	e002      	b.n	800183e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3b01      	subs	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800183e:	4b38      	ldr	r3, [pc, #224]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800184a:	d102      	bne.n	8001852 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f2      	bne.n	8001838 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001852:	4b33      	ldr	r3, [pc, #204]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800185e:	d158      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e057      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001864:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800186a:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800186c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001874:	e04d      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800187c:	d141      	bne.n	8001902 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188a:	d131      	bne.n	80018f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800188c:	4b24      	ldr	r3, [pc, #144]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800188e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001892:	4a23      	ldr	r2, [pc, #140]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800189c:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018a4:	4a1e      	ldr	r2, [pc, #120]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2232      	movs	r2, #50	; 0x32
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018b8:	fba2 2303 	umull	r2, r3, r2, r3
 80018bc:	0c9b      	lsrs	r3, r3, #18
 80018be:	3301      	adds	r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018c2:	e002      	b.n	80018ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d6:	d102      	bne.n	80018de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f2      	bne.n	80018c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ea:	d112      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e011      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001900:	e007      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001910:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	40007000 	.word	0x40007000
 8001924:	20000004 	.word	0x20000004
 8001928:	431bde83 	.word	0x431bde83

0800192c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193a:	6093      	str	r3, [r2, #8]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40007000 	.word	0x40007000

0800194c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e308      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d075      	beq.n	8001a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800196a:	4ba3      	ldr	r3, [pc, #652]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001974:	4ba0      	ldr	r3, [pc, #640]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	2b0c      	cmp	r3, #12
 8001982:	d102      	bne.n	800198a <HAL_RCC_OscConfig+0x3e>
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2b03      	cmp	r3, #3
 8001988:	d002      	beq.n	8001990 <HAL_RCC_OscConfig+0x44>
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	2b08      	cmp	r3, #8
 800198e:	d10b      	bne.n	80019a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	4b99      	ldr	r3, [pc, #612]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d05b      	beq.n	8001a54 <HAL_RCC_OscConfig+0x108>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d157      	bne.n	8001a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e2e3      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b0:	d106      	bne.n	80019c0 <HAL_RCC_OscConfig+0x74>
 80019b2:	4b91      	ldr	r3, [pc, #580]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a90      	ldr	r2, [pc, #576]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e01d      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x98>
 80019ca:	4b8b      	ldr	r3, [pc, #556]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a8a      	ldr	r2, [pc, #552]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a87      	ldr	r2, [pc, #540]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019e4:	4b84      	ldr	r3, [pc, #528]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a83      	ldr	r2, [pc, #524]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b81      	ldr	r3, [pc, #516]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a80      	ldr	r2, [pc, #512]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fb18 	bl	8001038 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fb14 	bl	8001038 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e2a8      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a1e:	4b76      	ldr	r3, [pc, #472]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0xc0>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fb04 	bl	8001038 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fb00 	bl	8001038 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e294      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a46:	4b6c      	ldr	r3, [pc, #432]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0xe8>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d075      	beq.n	8001b4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a62:	4b65      	ldr	r3, [pc, #404]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a6c:	4b62      	ldr	r3, [pc, #392]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	2b0c      	cmp	r3, #12
 8001a7a:	d102      	bne.n	8001a82 <HAL_RCC_OscConfig+0x136>
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d002      	beq.n	8001a88 <HAL_RCC_OscConfig+0x13c>
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d11f      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a88:	4b5b      	ldr	r3, [pc, #364]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x154>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e267      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa0:	4b55      	ldr	r3, [pc, #340]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	061b      	lsls	r3, r3, #24
 8001aae:	4952      	ldr	r1, [pc, #328]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ab4:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <HAL_RCC_OscConfig+0x2b0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fa71 	bl	8000fa0 <HAL_InitTick>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d043      	beq.n	8001b4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e253      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d023      	beq.n	8001b18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad0:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a48      	ldr	r2, [pc, #288]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff faac 	bl	8001038 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae4:	f7ff faa8 	bl	8001038 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e23c      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af6:	4b40      	ldr	r3, [pc, #256]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	061b      	lsls	r3, r3, #24
 8001b10:	4939      	ldr	r1, [pc, #228]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
 8001b16:	e01a      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b18:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a36      	ldr	r2, [pc, #216]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff fa88 	bl	8001038 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fa84 	bl	8001038 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e218      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b3e:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x1e0>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d03c      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d01c      	beq.n	8001b9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b62:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b68:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b72:	f7ff fa61 	bl	8001038 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7a:	f7ff fa5d 	bl	8001038 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1f1      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0ef      	beq.n	8001b7a <HAL_RCC_OscConfig+0x22e>
 8001b9a:	e01b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba2:	4a15      	ldr	r2, [pc, #84]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7ff fa44 	bl	8001038 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fa40 	bl	8001038 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e1d4      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1ef      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80ab 	beq.w	8001d38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001be6:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d106      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2b4>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e005      	b.n	8001c02 <HAL_RCC_OscConfig+0x2b6>
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	2300      	movs	r3, #0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00d      	beq.n	8001c22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	4baf      	ldr	r3, [pc, #700]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	4aae      	ldr	r2, [pc, #696]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6593      	str	r3, [r2, #88]	; 0x58
 8001c12:	4bac      	ldr	r3, [pc, #688]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c22:	4ba9      	ldr	r3, [pc, #676]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d118      	bne.n	8001c60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c2e:	4ba6      	ldr	r3, [pc, #664]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4aa5      	ldr	r2, [pc, #660]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3a:	f7ff f9fd 	bl	8001038 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c42:	f7ff f9f9 	bl	8001038 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e18d      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c54:	4b9c      	ldr	r3, [pc, #624]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d108      	bne.n	8001c7a <HAL_RCC_OscConfig+0x32e>
 8001c68:	4b96      	ldr	r3, [pc, #600]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6e:	4a95      	ldr	r2, [pc, #596]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c78:	e024      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	d110      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x358>
 8001c82:	4b90      	ldr	r3, [pc, #576]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c88:	4a8e      	ldr	r2, [pc, #568]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c92:	4b8c      	ldr	r3, [pc, #560]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c98:	4a8a      	ldr	r2, [pc, #552]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca2:	e00f      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001ca4:	4b87      	ldr	r3, [pc, #540]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001caa:	4a86      	ldr	r2, [pc, #536]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb4:	4b83      	ldr	r3, [pc, #524]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	4a82      	ldr	r2, [pc, #520]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cbc:	f023 0304 	bic.w	r3, r3, #4
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d016      	beq.n	8001cfa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f9b4 	bl	8001038 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f9b0 	bl	8001038 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e142      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cea:	4b76      	ldr	r3, [pc, #472]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0ed      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x388>
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f99d 	bl	8001038 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7ff f999 	bl	8001038 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e12b      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d18:	4b6a      	ldr	r3, [pc, #424]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ed      	bne.n	8001d02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d26:	7ffb      	ldrb	r3, [r7, #31]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2c:	4b65      	ldr	r3, [pc, #404]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	4a64      	ldr	r2, [pc, #400]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d03c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01c      	beq.n	8001d86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d4c:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d52:	4a5c      	ldr	r2, [pc, #368]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7ff f96c 	bl	8001038 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d64:	f7ff f968 	bl	8001038 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e0fc      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d76:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0ef      	beq.n	8001d64 <HAL_RCC_OscConfig+0x418>
 8001d84:	e01b      	b.n	8001dbe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d86:	4b4f      	ldr	r3, [pc, #316]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d8c:	4a4d      	ldr	r2, [pc, #308]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d96:	f7ff f94f 	bl	8001038 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d9e:	f7ff f94b 	bl	8001038 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e0df      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001db0:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ef      	bne.n	8001d9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80d3 	beq.w	8001f6e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dc8:	4b3e      	ldr	r3, [pc, #248]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b0c      	cmp	r3, #12
 8001dd2:	f000 808d 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d15a      	bne.n	8001e94 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a38      	ldr	r2, [pc, #224]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dea:	f7ff f925 	bl	8001038 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7ff f921 	bl	8001038 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e0b5      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e04:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e10:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_RCC_OscConfig+0x580>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6a11      	ldr	r1, [r2, #32]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e20:	3a01      	subs	r2, #1
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	4311      	orrs	r1, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e2a:	0212      	lsls	r2, r2, #8
 8001e2c:	4311      	orrs	r1, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e32:	0852      	lsrs	r2, r2, #1
 8001e34:	3a01      	subs	r2, #1
 8001e36:	0552      	lsls	r2, r2, #21
 8001e38:	4311      	orrs	r1, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e3e:	0852      	lsrs	r2, r2, #1
 8001e40:	3a01      	subs	r2, #1
 8001e42:	0652      	lsls	r2, r2, #25
 8001e44:	4311      	orrs	r1, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e4a:	06d2      	lsls	r2, r2, #27
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	491d      	ldr	r1, [pc, #116]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e54:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1a      	ldr	r2, [pc, #104]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f8e4 	bl	8001038 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e74:	f7ff f8e0 	bl	8001038 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e074      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x528>
 8001e92:	e06c      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e9e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea6:	f023 0303 	bic.w	r3, r3, #3
 8001eaa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eb2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f8bc 	bl	8001038 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec2:	e00e      	b.n	8001ee2 <HAL_RCC_OscConfig+0x596>
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7ff f8b2 	bl	8001038 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e046      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee2:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x584>
 8001eee:	e03e      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e039      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f003 0203 	and.w	r2, r3, #3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d12c      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d123      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d11b      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d113      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d109      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f60:	085b      	lsrs	r3, r3, #1
 8001f62:	3b01      	subs	r3, #1
 8001f64:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000

08001f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e11e      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b91      	ldr	r3, [pc, #580]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d910      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b8e      	ldr	r3, [pc, #568]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 020f 	bic.w	r2, r3, #15
 8001faa:	498c      	ldr	r1, [pc, #560]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b8a      	ldr	r3, [pc, #552]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e106      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d073      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d129      	bne.n	800202c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd8:	4b81      	ldr	r3, [pc, #516]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0f4      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001fe8:	f000 f99e 	bl	8002328 <RCC_GetSysClockFreqFromPLLSource>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4a7c      	ldr	r2, [pc, #496]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d93f      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ff6:	4b7a      	ldr	r3, [pc, #488]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800200a:	2b00      	cmp	r3, #0
 800200c:	d033      	beq.n	8002076 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002012:	2b00      	cmp	r3, #0
 8002014:	d12f      	bne.n	8002076 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002016:	4b72      	ldr	r3, [pc, #456]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800201e:	4a70      	ldr	r2, [pc, #448]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002024:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e024      	b.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d107      	bne.n	8002044 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002034:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d109      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0c6      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002044:	4b66      	ldr	r3, [pc, #408]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0be      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002054:	f000 f8ce 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 8002058:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4a61      	ldr	r2, [pc, #388]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d909      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002062:	4b5f      	ldr	r3, [pc, #380]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800206a:	4a5d      	ldr	r2, [pc, #372]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 800206c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002070:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002076:	4b5a      	ldr	r3, [pc, #360]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f023 0203 	bic.w	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4957      	ldr	r1, [pc, #348]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002084:	4313      	orrs	r3, r2
 8002086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002088:	f7fe ffd6 	bl	8001038 <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002090:	f7fe ffd2 	bl	8001038 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	; 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e095      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	4b4e      	ldr	r3, [pc, #312]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 020c 	and.w	r2, r3, #12
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d1eb      	bne.n	8002090 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d023      	beq.n	800210c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d0:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a42      	ldr	r2, [pc, #264]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d007      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80020e8:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80020f0:	4a3b      	ldr	r2, [pc, #236]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f8:	4b39      	ldr	r3, [pc, #228]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	4936      	ldr	r1, [pc, #216]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]
 800210a:	e008      	b.n	800211e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b80      	cmp	r3, #128	; 0x80
 8002110:	d105      	bne.n	800211e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002112:	4b33      	ldr	r3, [pc, #204]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	4a32      	ldr	r2, [pc, #200]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002118:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800211c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800211e:	4b2f      	ldr	r3, [pc, #188]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d21d      	bcs.n	8002168 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 020f 	bic.w	r2, r3, #15
 8002134:	4929      	ldr	r1, [pc, #164]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800213c:	f7fe ff7c 	bl	8001038 <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	e00a      	b.n	800215a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002144:	f7fe ff78 	bl	8001038 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e03b      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d1ed      	bne.n	8002144 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002174:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4917      	ldr	r1, [pc, #92]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002182:	4313      	orrs	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	490f      	ldr	r1, [pc, #60]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021a6:	f000 f825 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	490c      	ldr	r1, [pc, #48]	; (80021e8 <HAL_RCC_ClockConfig+0x26c>)
 80021b8:	5ccb      	ldrb	r3, [r1, r3]
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	fa22 f303 	lsr.w	r3, r2, r3
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_RCC_ClockConfig+0x270>)
 80021c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_RCC_ClockConfig+0x274>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fee8 	bl	8000fa0 <HAL_InitTick>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40022000 	.word	0x40022000
 80021e0:	40021000 	.word	0x40021000
 80021e4:	04c4b400 	.word	0x04c4b400
 80021e8:	0802462c 	.word	0x0802462c
 80021ec:	20000004 	.word	0x20000004
 80021f0:	20000008 	.word	0x20000008

080021f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021fa:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b04      	cmp	r3, #4
 8002204:	d102      	bne.n	800220c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002206:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	e047      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b08      	cmp	r3, #8
 8002216:	d102      	bne.n	800221e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002218:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	e03e      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800221e:	4b23      	ldr	r3, [pc, #140]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b0c      	cmp	r3, #12
 8002228:	d136      	bne.n	8002298 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3301      	adds	r3, #1
 8002240:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d10c      	bne.n	8002262 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002248:	4a1a      	ldr	r2, [pc, #104]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002250:	4a16      	ldr	r2, [pc, #88]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002252:	68d2      	ldr	r2, [r2, #12]
 8002254:	0a12      	lsrs	r2, r2, #8
 8002256:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	617b      	str	r3, [r7, #20]
      break;
 8002260:	e00c      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002262:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	fbb2 f3f3 	udiv	r3, r2, r3
 800226a:	4a10      	ldr	r2, [pc, #64]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800226c:	68d2      	ldr	r2, [r2, #12]
 800226e:	0a12      	lsrs	r2, r2, #8
 8002270:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	617b      	str	r3, [r7, #20]
      break;
 800227a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0e5b      	lsrs	r3, r3, #25
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	3301      	adds	r3, #1
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	e001      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800229c:	693b      	ldr	r3, [r7, #16]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	371c      	adds	r7, #28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	00f42400 	.word	0x00f42400
 80022b4:	016e3600 	.word	0x016e3600

080022b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_RCC_GetHCLKFreq+0x14>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000004 	.word	0x20000004

080022d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022d4:	f7ff fff0 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 80022d8:	4602      	mov	r2, r0
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	4904      	ldr	r1, [pc, #16]	; (80022f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022e6:	5ccb      	ldrb	r3, [r1, r3]
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	0802463c 	.word	0x0802463c

080022fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002300:	f7ff ffda 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 8002304:	4602      	mov	r2, r0
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	0adb      	lsrs	r3, r3, #11
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	4904      	ldr	r1, [pc, #16]	; (8002324 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002312:	5ccb      	ldrb	r3, [r1, r3]
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	0802463c 	.word	0x0802463c

08002328 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800232e:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3301      	adds	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d10c      	bne.n	8002366 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800234c:	4a17      	ldr	r2, [pc, #92]	; (80023ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	fbb2 f3f3 	udiv	r3, r2, r3
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002356:	68d2      	ldr	r2, [r2, #12]
 8002358:	0a12      	lsrs	r2, r2, #8
 800235a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	617b      	str	r3, [r7, #20]
    break;
 8002364:	e00c      	b.n	8002380 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002370:	68d2      	ldr	r2, [r2, #12]
 8002372:	0a12      	lsrs	r2, r2, #8
 8002374:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002378:	fb02 f303 	mul.w	r3, r2, r3
 800237c:	617b      	str	r3, [r7, #20]
    break;
 800237e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0e5b      	lsrs	r3, r3, #25
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	3301      	adds	r3, #1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800239a:	687b      	ldr	r3, [r7, #4]
}
 800239c:	4618      	mov	r0, r3
 800239e:	371c      	adds	r7, #28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	40021000 	.word	0x40021000
 80023ac:	016e3600 	.word	0x016e3600
 80023b0:	00f42400 	.word	0x00f42400

080023b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023bc:	2300      	movs	r3, #0
 80023be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023c0:	2300      	movs	r3, #0
 80023c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 8098 	beq.w	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d6:	4b43      	ldr	r3, [pc, #268]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10d      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	4b40      	ldr	r3, [pc, #256]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	4a3f      	ldr	r2, [pc, #252]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6593      	str	r3, [r2, #88]	; 0x58
 80023ee:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fa:	2301      	movs	r3, #1
 80023fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023fe:	4b3a      	ldr	r3, [pc, #232]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a39      	ldr	r2, [pc, #228]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800240a:	f7fe fe15 	bl	8001038 <HAL_GetTick>
 800240e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002410:	e009      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002412:	f7fe fe11 	bl	8001038 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d902      	bls.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	74fb      	strb	r3, [r7, #19]
        break;
 8002424:	e005      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002426:	4b30      	ldr	r3, [pc, #192]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0ef      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002432:	7cfb      	ldrb	r3, [r7, #19]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d159      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002438:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002442:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d01e      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	d019      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002454:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800245e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002460:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	4a1f      	ldr	r2, [pc, #124]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002470:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002476:	4a1b      	ldr	r2, [pc, #108]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002480:	4a18      	ldr	r2, [pc, #96]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d016      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7fe fdd1 	bl	8001038 <HAL_GetTick>
 8002496:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002498:	e00b      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe fdcd 	bl	8001038 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d902      	bls.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	74fb      	strb	r3, [r7, #19]
            break;
 80024b0:	e006      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ec      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10b      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d4:	4903      	ldr	r1, [pc, #12]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024dc:	e008      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024de:	7cfb      	ldrb	r3, [r7, #19]
 80024e0:	74bb      	strb	r3, [r7, #18]
 80024e2:	e005      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f0:	7c7b      	ldrb	r3, [r7, #17]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d105      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f6:	4baf      	ldr	r3, [pc, #700]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	4aae      	ldr	r2, [pc, #696]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002500:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800250e:	4ba9      	ldr	r3, [pc, #676]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002514:	f023 0203 	bic.w	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	49a5      	ldr	r1, [pc, #660]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002530:	4ba0      	ldr	r3, [pc, #640]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 020c 	bic.w	r2, r3, #12
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	499d      	ldr	r1, [pc, #628]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002552:	4b98      	ldr	r3, [pc, #608]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4994      	ldr	r1, [pc, #592]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002574:	4b8f      	ldr	r3, [pc, #572]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	498c      	ldr	r1, [pc, #560]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002596:	4b87      	ldr	r3, [pc, #540]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	4983      	ldr	r1, [pc, #524]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b8:	4b7e      	ldr	r3, [pc, #504]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	497b      	ldr	r1, [pc, #492]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025da:	4b76      	ldr	r3, [pc, #472]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	4972      	ldr	r1, [pc, #456]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025fc:	4b6d      	ldr	r3, [pc, #436]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	496a      	ldr	r1, [pc, #424]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800261e:	4b65      	ldr	r3, [pc, #404]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	4961      	ldr	r1, [pc, #388]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002640:	4b5c      	ldr	r3, [pc, #368]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002642:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002646:	f023 0203 	bic.w	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	4959      	ldr	r1, [pc, #356]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002662:	4b54      	ldr	r3, [pc, #336]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	4950      	ldr	r1, [pc, #320]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002680:	2b00      	cmp	r3, #0
 8002682:	d015      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002684:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4948      	ldr	r1, [pc, #288]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026a2:	d105      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a4:	4b43      	ldr	r3, [pc, #268]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4a42      	ldr	r2, [pc, #264]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d015      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026bc:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ca:	493a      	ldr	r1, [pc, #232]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026da:	d105      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026dc:	4b35      	ldr	r3, [pc, #212]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4a34      	ldr	r2, [pc, #208]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d015      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026f4:	4b2f      	ldr	r3, [pc, #188]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	492c      	ldr	r1, [pc, #176]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002712:	d105      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002714:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a26      	ldr	r2, [pc, #152]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800271a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800271e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d015      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	491e      	ldr	r1, [pc, #120]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800274a:	d105      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002756:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d015      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4910      	ldr	r1, [pc, #64]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002782:	d105      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800278a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800278e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d018      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4902      	ldr	r1, [pc, #8]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027b2:	e001      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80027b4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027c0:	d105      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027c2:	4b21      	ldr	r3, [pc, #132]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	4a20      	ldr	r2, [pc, #128]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d015      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80027da:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e8:	4917      	ldr	r1, [pc, #92]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f8:	d105      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002804:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d015      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002812:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002814:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002818:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002820:	4909      	ldr	r1, [pc, #36]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002830:	d105      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002832:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	4a04      	ldr	r2, [pc, #16]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800283c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800283e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e042      	b.n	80028e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002864:	2b00      	cmp	r3, #0
 8002866:	d106      	bne.n	8002876 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7fe f98f 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2224      	movs	r2, #36	; 0x24
 800287a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fa80 	bl	8002d94 <UART_SetConfig>
 8002894:	4603      	mov	r3, r0
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e022      	b.n	80028e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fd3e 	bl	8003328 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fdc5 	bl	800346c <UART_CheckIdleState>
 80028e2:	4603      	mov	r3, r0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d118      	bne.n	800294e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d013      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	d104      	bne.n	800293a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 81fb 	beq.w	8002d3a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
      }
      return;
 800294c:	e1f5      	b.n	8002d3a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80ef 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4b73      	ldr	r3, [pc, #460]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4b72      	ldr	r3, [pc, #456]	; (8002b2c <HAL_UART_IRQHandler+0x240>)
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80e4 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d010      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00b      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2201      	movs	r2, #1
 8002986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800298e:	f043 0201 	orr.w	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d010      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00b      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2202      	movs	r2, #2
 80029b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029ba:	f043 0204 	orr.w	r2, r3, #4
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d010      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00b      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2204      	movs	r2, #4
 80029de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029e6:	f043 0202 	orr.w	r2, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d015      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4b48      	ldr	r3, [pc, #288]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 8002a08:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2208      	movs	r2, #8
 8002a14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1c:	f043 0208 	orr.w	r2, r3, #8
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d011      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a4a:	f043 0220 	orr.w	r2, r3, #32
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 816f 	beq.w	8002d3e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d011      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d104      	bne.n	8002a7e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a94:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa0:	2b40      	cmp	r3, #64	; 0x40
 8002aa2:	d004      	beq.n	8002aae <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d031      	beq.n	8002b12 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fda7 	bl	8003602 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abe:	2b40      	cmp	r3, #64	; 0x40
 8002ac0:	d123      	bne.n	8002b0a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d013      	beq.n	8002b02 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ade:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <HAL_UART_IRQHandler+0x244>)
 8002ae0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fc3c 	bl	8001364 <HAL_DMA_Abort_IT>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d017      	beq.n	8002b22 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002afc:	4610      	mov	r0, r2
 8002afe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b00:	e00f      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f930 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b08:	e00b      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f92c 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b10:	e007      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f928 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002b20:	e10d      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b22:	bf00      	nop
    return;
 8002b24:	e10b      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
 8002b26:	bf00      	nop
 8002b28:	10000001 	.word	0x10000001
 8002b2c:	04000120 	.word	0x04000120
 8002b30:	08003667 	.word	0x08003667

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	f040 80ab 	bne.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80a5 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 809f 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2210      	movs	r2, #16
 8002b5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d155      	bne.n	8002c18 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002b76:	893b      	ldrh	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80e2 	beq.w	8002d42 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b84:	893a      	ldrh	r2, [r7, #8]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	f080 80db 	bcs.w	8002d42 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	893a      	ldrh	r2, [r7, #8]
 8002b90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d12b      	bne.n	8002bfc <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bb2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0210 	bic.w	r2, r2, #16
 8002bf0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fb5b 	bl	80012b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f8b3 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c16:	e094      	b.n	8002d42 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 8087 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002c38:	897b      	ldrh	r3, [r7, #10]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8083 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	f023 0301 	bic.w	r3, r3, #1
 8002c62:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0210 	bic.w	r2, r2, #16
 8002c86:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c88:	897b      	ldrh	r3, [r7, #10]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f875 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c92:	e058      	b.n	8002d46 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fd07 	bl	80036c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cb8:	e048      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d012      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d104      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d034      	beq.n	8002d4a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
    }
    return;
 8002ce8:	e02f      	b.n	8002d4a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fcc7 	bl	8003692 <UART_EndTransmit_IT>
    return;
 8002d04:	e022      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fce7 	bl	80036ee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d20:	e014      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00f      	beq.n	8002d4c <HAL_UART_IRQHandler+0x460>
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	da0c      	bge.n	8002d4c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fcd1 	bl	80036da <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d38:	e008      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d3a:	bf00      	nop
 8002d3c:	e006      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d3e:	bf00      	nop
 8002d40:	e004      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d42:	bf00      	nop
 8002d44:	e002      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d46:	bf00      	nop
 8002d48:	e000      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d4a:	bf00      	nop
  }
}
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop

08002d54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d94:	b5b0      	push	{r4, r5, r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4bb1      	ldr	r3, [pc, #708]	; (8003084 <UART_SetConfig+0x2f0>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	69f9      	ldr	r1, [r7, #28]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4aa6      	ldr	r2, [pc, #664]	; (8003088 <UART_SetConfig+0x2f4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002e06:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	69f9      	ldr	r1, [r7, #28]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	f023 010f 	bic.w	r1, r3, #15
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a97      	ldr	r2, [pc, #604]	; (800308c <UART_SetConfig+0x2f8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d120      	bne.n	8002e76 <UART_SetConfig+0xe2>
 8002e34:	4b96      	ldr	r3, [pc, #600]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d816      	bhi.n	8002e70 <UART_SetConfig+0xdc>
 8002e42:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <UART_SetConfig+0xb4>)
 8002e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e48:	08002e59 	.word	0x08002e59
 8002e4c:	08002e65 	.word	0x08002e65
 8002e50:	08002e5f 	.word	0x08002e5f
 8002e54:	08002e6b 	.word	0x08002e6b
 8002e58:	2301      	movs	r3, #1
 8002e5a:	76fb      	strb	r3, [r7, #27]
 8002e5c:	e0e7      	b.n	800302e <UART_SetConfig+0x29a>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	76fb      	strb	r3, [r7, #27]
 8002e62:	e0e4      	b.n	800302e <UART_SetConfig+0x29a>
 8002e64:	2304      	movs	r3, #4
 8002e66:	76fb      	strb	r3, [r7, #27]
 8002e68:	e0e1      	b.n	800302e <UART_SetConfig+0x29a>
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	76fb      	strb	r3, [r7, #27]
 8002e6e:	e0de      	b.n	800302e <UART_SetConfig+0x29a>
 8002e70:	2310      	movs	r3, #16
 8002e72:	76fb      	strb	r3, [r7, #27]
 8002e74:	e0db      	b.n	800302e <UART_SetConfig+0x29a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a86      	ldr	r2, [pc, #536]	; (8003094 <UART_SetConfig+0x300>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d132      	bne.n	8002ee6 <UART_SetConfig+0x152>
 8002e80:	4b83      	ldr	r3, [pc, #524]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b0c      	cmp	r3, #12
 8002e8c:	d828      	bhi.n	8002ee0 <UART_SetConfig+0x14c>
 8002e8e:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <UART_SetConfig+0x100>)
 8002e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e94:	08002ec9 	.word	0x08002ec9
 8002e98:	08002ee1 	.word	0x08002ee1
 8002e9c:	08002ee1 	.word	0x08002ee1
 8002ea0:	08002ee1 	.word	0x08002ee1
 8002ea4:	08002ed5 	.word	0x08002ed5
 8002ea8:	08002ee1 	.word	0x08002ee1
 8002eac:	08002ee1 	.word	0x08002ee1
 8002eb0:	08002ee1 	.word	0x08002ee1
 8002eb4:	08002ecf 	.word	0x08002ecf
 8002eb8:	08002ee1 	.word	0x08002ee1
 8002ebc:	08002ee1 	.word	0x08002ee1
 8002ec0:	08002ee1 	.word	0x08002ee1
 8002ec4:	08002edb 	.word	0x08002edb
 8002ec8:	2300      	movs	r3, #0
 8002eca:	76fb      	strb	r3, [r7, #27]
 8002ecc:	e0af      	b.n	800302e <UART_SetConfig+0x29a>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	76fb      	strb	r3, [r7, #27]
 8002ed2:	e0ac      	b.n	800302e <UART_SetConfig+0x29a>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	76fb      	strb	r3, [r7, #27]
 8002ed8:	e0a9      	b.n	800302e <UART_SetConfig+0x29a>
 8002eda:	2308      	movs	r3, #8
 8002edc:	76fb      	strb	r3, [r7, #27]
 8002ede:	e0a6      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee0:	2310      	movs	r3, #16
 8002ee2:	76fb      	strb	r3, [r7, #27]
 8002ee4:	e0a3      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a6b      	ldr	r2, [pc, #428]	; (8003098 <UART_SetConfig+0x304>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d120      	bne.n	8002f32 <UART_SetConfig+0x19e>
 8002ef0:	4b67      	ldr	r3, [pc, #412]	; (8003090 <UART_SetConfig+0x2fc>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002efa:	2b30      	cmp	r3, #48	; 0x30
 8002efc:	d013      	beq.n	8002f26 <UART_SetConfig+0x192>
 8002efe:	2b30      	cmp	r3, #48	; 0x30
 8002f00:	d814      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d009      	beq.n	8002f1a <UART_SetConfig+0x186>
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d810      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <UART_SetConfig+0x180>
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d006      	beq.n	8002f20 <UART_SetConfig+0x18c>
 8002f12:	e00b      	b.n	8002f2c <UART_SetConfig+0x198>
 8002f14:	2300      	movs	r3, #0
 8002f16:	76fb      	strb	r3, [r7, #27]
 8002f18:	e089      	b.n	800302e <UART_SetConfig+0x29a>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	76fb      	strb	r3, [r7, #27]
 8002f1e:	e086      	b.n	800302e <UART_SetConfig+0x29a>
 8002f20:	2304      	movs	r3, #4
 8002f22:	76fb      	strb	r3, [r7, #27]
 8002f24:	e083      	b.n	800302e <UART_SetConfig+0x29a>
 8002f26:	2308      	movs	r3, #8
 8002f28:	76fb      	strb	r3, [r7, #27]
 8002f2a:	e080      	b.n	800302e <UART_SetConfig+0x29a>
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	76fb      	strb	r3, [r7, #27]
 8002f30:	e07d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a59      	ldr	r2, [pc, #356]	; (800309c <UART_SetConfig+0x308>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d120      	bne.n	8002f7e <UART_SetConfig+0x1ea>
 8002f3c:	4b54      	ldr	r3, [pc, #336]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f46:	2bc0      	cmp	r3, #192	; 0xc0
 8002f48:	d013      	beq.n	8002f72 <UART_SetConfig+0x1de>
 8002f4a:	2bc0      	cmp	r3, #192	; 0xc0
 8002f4c:	d814      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f4e:	2b80      	cmp	r3, #128	; 0x80
 8002f50:	d009      	beq.n	8002f66 <UART_SetConfig+0x1d2>
 8002f52:	2b80      	cmp	r3, #128	; 0x80
 8002f54:	d810      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <UART_SetConfig+0x1cc>
 8002f5a:	2b40      	cmp	r3, #64	; 0x40
 8002f5c:	d006      	beq.n	8002f6c <UART_SetConfig+0x1d8>
 8002f5e:	e00b      	b.n	8002f78 <UART_SetConfig+0x1e4>
 8002f60:	2300      	movs	r3, #0
 8002f62:	76fb      	strb	r3, [r7, #27]
 8002f64:	e063      	b.n	800302e <UART_SetConfig+0x29a>
 8002f66:	2302      	movs	r3, #2
 8002f68:	76fb      	strb	r3, [r7, #27]
 8002f6a:	e060      	b.n	800302e <UART_SetConfig+0x29a>
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	76fb      	strb	r3, [r7, #27]
 8002f70:	e05d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f72:	2308      	movs	r3, #8
 8002f74:	76fb      	strb	r3, [r7, #27]
 8002f76:	e05a      	b.n	800302e <UART_SetConfig+0x29a>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	76fb      	strb	r3, [r7, #27]
 8002f7c:	e057      	b.n	800302e <UART_SetConfig+0x29a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a47      	ldr	r2, [pc, #284]	; (80030a0 <UART_SetConfig+0x30c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d125      	bne.n	8002fd4 <UART_SetConfig+0x240>
 8002f88:	4b41      	ldr	r3, [pc, #260]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f96:	d017      	beq.n	8002fc8 <UART_SetConfig+0x234>
 8002f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f9c:	d817      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa2:	d00b      	beq.n	8002fbc <UART_SetConfig+0x228>
 8002fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa8:	d811      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <UART_SetConfig+0x222>
 8002fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb2:	d006      	beq.n	8002fc2 <UART_SetConfig+0x22e>
 8002fb4:	e00b      	b.n	8002fce <UART_SetConfig+0x23a>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	76fb      	strb	r3, [r7, #27]
 8002fba:	e038      	b.n	800302e <UART_SetConfig+0x29a>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	76fb      	strb	r3, [r7, #27]
 8002fc0:	e035      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	76fb      	strb	r3, [r7, #27]
 8002fc6:	e032      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc8:	2308      	movs	r3, #8
 8002fca:	76fb      	strb	r3, [r7, #27]
 8002fcc:	e02f      	b.n	800302e <UART_SetConfig+0x29a>
 8002fce:	2310      	movs	r3, #16
 8002fd0:	76fb      	strb	r3, [r7, #27]
 8002fd2:	e02c      	b.n	800302e <UART_SetConfig+0x29a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <UART_SetConfig+0x2f4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d125      	bne.n	800302a <UART_SetConfig+0x296>
 8002fde:	4b2c      	ldr	r3, [pc, #176]	; (8003090 <UART_SetConfig+0x2fc>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fe8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fec:	d017      	beq.n	800301e <UART_SetConfig+0x28a>
 8002fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ff2:	d817      	bhi.n	8003024 <UART_SetConfig+0x290>
 8002ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ff8:	d00b      	beq.n	8003012 <UART_SetConfig+0x27e>
 8002ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ffe:	d811      	bhi.n	8003024 <UART_SetConfig+0x290>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <UART_SetConfig+0x278>
 8003004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003008:	d006      	beq.n	8003018 <UART_SetConfig+0x284>
 800300a:	e00b      	b.n	8003024 <UART_SetConfig+0x290>
 800300c:	2300      	movs	r3, #0
 800300e:	76fb      	strb	r3, [r7, #27]
 8003010:	e00d      	b.n	800302e <UART_SetConfig+0x29a>
 8003012:	2302      	movs	r3, #2
 8003014:	76fb      	strb	r3, [r7, #27]
 8003016:	e00a      	b.n	800302e <UART_SetConfig+0x29a>
 8003018:	2304      	movs	r3, #4
 800301a:	76fb      	strb	r3, [r7, #27]
 800301c:	e007      	b.n	800302e <UART_SetConfig+0x29a>
 800301e:	2308      	movs	r3, #8
 8003020:	76fb      	strb	r3, [r7, #27]
 8003022:	e004      	b.n	800302e <UART_SetConfig+0x29a>
 8003024:	2310      	movs	r3, #16
 8003026:	76fb      	strb	r3, [r7, #27]
 8003028:	e001      	b.n	800302e <UART_SetConfig+0x29a>
 800302a:	2310      	movs	r3, #16
 800302c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a15      	ldr	r2, [pc, #84]	; (8003088 <UART_SetConfig+0x2f4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	f040 809f 	bne.w	8003178 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800303a:	7efb      	ldrb	r3, [r7, #27]
 800303c:	2b08      	cmp	r3, #8
 800303e:	d837      	bhi.n	80030b0 <UART_SetConfig+0x31c>
 8003040:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <UART_SetConfig+0x2b4>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	0800306d 	.word	0x0800306d
 800304c:	080030b1 	.word	0x080030b1
 8003050:	08003075 	.word	0x08003075
 8003054:	080030b1 	.word	0x080030b1
 8003058:	0800307b 	.word	0x0800307b
 800305c:	080030b1 	.word	0x080030b1
 8003060:	080030b1 	.word	0x080030b1
 8003064:	080030b1 	.word	0x080030b1
 8003068:	080030a9 	.word	0x080030a9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800306c:	f7ff f930 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003070:	6178      	str	r0, [r7, #20]
        break;
 8003072:	e022      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <UART_SetConfig+0x310>)
 8003076:	617b      	str	r3, [r7, #20]
        break;
 8003078:	e01f      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800307a:	f7ff f8bb 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800307e:	6178      	str	r0, [r7, #20]
        break;
 8003080:	e01b      	b.n	80030ba <UART_SetConfig+0x326>
 8003082:	bf00      	nop
 8003084:	cfff69f3 	.word	0xcfff69f3
 8003088:	40008000 	.word	0x40008000
 800308c:	40013800 	.word	0x40013800
 8003090:	40021000 	.word	0x40021000
 8003094:	40004400 	.word	0x40004400
 8003098:	40004800 	.word	0x40004800
 800309c:	40004c00 	.word	0x40004c00
 80030a0:	40005000 	.word	0x40005000
 80030a4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ac:	617b      	str	r3, [r7, #20]
        break;
 80030ae:	e004      	b.n	80030ba <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	76bb      	strb	r3, [r7, #26]
        break;
 80030b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 811b 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	4a96      	ldr	r2, [pc, #600]	; (8003320 <UART_SetConfig+0x58c>)
 80030c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030cc:	461a      	mov	r2, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80030d4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d305      	bcc.n	80030f2 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d902      	bls.n	80030f8 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	76bb      	strb	r3, [r7, #26]
 80030f6:	e0ff      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f04f 0100 	mov.w	r1, #0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	4a86      	ldr	r2, [pc, #536]	; (8003320 <UART_SetConfig+0x58c>)
 8003106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800310a:	b29a      	uxth	r2, r3
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	f7fd fba0 	bl	8000854 <__aeabi_uldivmod>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	020b      	lsls	r3, r1, #8
 8003126:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800312a:	0202      	lsls	r2, r0, #8
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	6849      	ldr	r1, [r1, #4]
 8003130:	0849      	lsrs	r1, r1, #1
 8003132:	4608      	mov	r0, r1
 8003134:	f04f 0100 	mov.w	r1, #0
 8003138:	1814      	adds	r4, r2, r0
 800313a:	eb43 0501 	adc.w	r5, r3, r1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	461a      	mov	r2, r3
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	4620      	mov	r0, r4
 800314a:	4629      	mov	r1, r5
 800314c:	f7fd fb82 	bl	8000854 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4613      	mov	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800315e:	d308      	bcc.n	8003172 <UART_SetConfig+0x3de>
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003166:	d204      	bcs.n	8003172 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	60da      	str	r2, [r3, #12]
 8003170:	e0c2      	b.n	80032f8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	76bb      	strb	r3, [r7, #26]
 8003176:	e0bf      	b.n	80032f8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003180:	d165      	bne.n	800324e <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8003182:	7efb      	ldrb	r3, [r7, #27]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d828      	bhi.n	80031da <UART_SetConfig+0x446>
 8003188:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <UART_SetConfig+0x3fc>)
 800318a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318e:	bf00      	nop
 8003190:	080031b5 	.word	0x080031b5
 8003194:	080031bd 	.word	0x080031bd
 8003198:	080031c5 	.word	0x080031c5
 800319c:	080031db 	.word	0x080031db
 80031a0:	080031cb 	.word	0x080031cb
 80031a4:	080031db 	.word	0x080031db
 80031a8:	080031db 	.word	0x080031db
 80031ac:	080031db 	.word	0x080031db
 80031b0:	080031d3 	.word	0x080031d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031b4:	f7ff f88c 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 80031b8:	6178      	str	r0, [r7, #20]
        break;
 80031ba:	e013      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031bc:	f7ff f89e 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 80031c0:	6178      	str	r0, [r7, #20]
        break;
 80031c2:	e00f      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031c4:	4b57      	ldr	r3, [pc, #348]	; (8003324 <UART_SetConfig+0x590>)
 80031c6:	617b      	str	r3, [r7, #20]
        break;
 80031c8:	e00c      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ca:	f7ff f813 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80031ce:	6178      	str	r0, [r7, #20]
        break;
 80031d0:	e008      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031d6:	617b      	str	r3, [r7, #20]
        break;
 80031d8:	e004      	b.n	80031e4 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	76bb      	strb	r3, [r7, #26]
        break;
 80031e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8086 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	4a4b      	ldr	r2, [pc, #300]	; (8003320 <UART_SetConfig+0x58c>)
 80031f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031f6:	461a      	mov	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80031fe:	005a      	lsls	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	441a      	add	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	b29b      	uxth	r3, r3
 8003212:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b0f      	cmp	r3, #15
 8003218:	d916      	bls.n	8003248 <UART_SetConfig+0x4b4>
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d212      	bcs.n	8003248 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	b29b      	uxth	r3, r3
 8003226:	f023 030f 	bic.w	r3, r3, #15
 800322a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	b29b      	uxth	r3, r3
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	b29a      	uxth	r2, r3
 8003238:	89fb      	ldrh	r3, [r7, #14]
 800323a:	4313      	orrs	r3, r2
 800323c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	89fa      	ldrh	r2, [r7, #14]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	e057      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	76bb      	strb	r3, [r7, #26]
 800324c:	e054      	b.n	80032f8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800324e:	7efb      	ldrb	r3, [r7, #27]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d828      	bhi.n	80032a6 <UART_SetConfig+0x512>
 8003254:	a201      	add	r2, pc, #4	; (adr r2, 800325c <UART_SetConfig+0x4c8>)
 8003256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325a:	bf00      	nop
 800325c:	08003281 	.word	0x08003281
 8003260:	08003289 	.word	0x08003289
 8003264:	08003291 	.word	0x08003291
 8003268:	080032a7 	.word	0x080032a7
 800326c:	08003297 	.word	0x08003297
 8003270:	080032a7 	.word	0x080032a7
 8003274:	080032a7 	.word	0x080032a7
 8003278:	080032a7 	.word	0x080032a7
 800327c:	0800329f 	.word	0x0800329f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003280:	f7ff f826 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003284:	6178      	str	r0, [r7, #20]
        break;
 8003286:	e013      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003288:	f7ff f838 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 800328c:	6178      	str	r0, [r7, #20]
        break;
 800328e:	e00f      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003290:	4b24      	ldr	r3, [pc, #144]	; (8003324 <UART_SetConfig+0x590>)
 8003292:	617b      	str	r3, [r7, #20]
        break;
 8003294:	e00c      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003296:	f7fe ffad 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800329a:	6178      	str	r0, [r7, #20]
        break;
 800329c:	e008      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800329e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a2:	617b      	str	r3, [r7, #20]
        break;
 80032a4:	e004      	b.n	80032b0 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	76bb      	strb	r3, [r7, #26]
        break;
 80032ae:	bf00      	nop
    }

    if (pclk != 0U)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d020      	beq.n	80032f8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	4a19      	ldr	r2, [pc, #100]	; (8003320 <UART_SetConfig+0x58c>)
 80032bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032c0:	461a      	mov	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	441a      	add	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	b29b      	uxth	r3, r3
 80032da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b0f      	cmp	r3, #15
 80032e0:	d908      	bls.n	80032f4 <UART_SetConfig+0x560>
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e8:	d204      	bcs.n	80032f4 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	e001      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003314:	7ebb      	ldrb	r3, [r7, #26]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3720      	adds	r7, #32
 800331a:	46bd      	mov	sp, r7
 800331c:	bdb0      	pop	{r4, r5, r7, pc}
 800331e:	bf00      	nop
 8003320:	08024644 	.word	0x08024644
 8003324:	00f42400 	.word	0x00f42400

08003328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01a      	beq.n	800343e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003426:	d10a      	bne.n	800343e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	605a      	str	r2, [r3, #4]
  }
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af02      	add	r7, sp, #8
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800347c:	f7fd fddc 	bl	8001038 <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b08      	cmp	r3, #8
 800348e:	d10e      	bne.n	80034ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003490:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f82f 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e025      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d10e      	bne.n	80034da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f819 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e00f      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003512:	e062      	b.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351a:	d05e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351c:	f7fd fd8c 	bl	8001038 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	429a      	cmp	r2, r3
 800352a:	d302      	bcc.n	8003532 <UART_WaitOnFlagUntilTimeout+0x30>
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d11d      	bne.n	800356e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003540:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e045      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d02e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358a:	d126      	bne.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003594:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e00f      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4013      	ands	r3, r2
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d08d      	beq.n	8003514 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003618:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003632:	2b01      	cmp	r3, #1
 8003634:	d107      	bne.n	8003646 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0210 	bic.w	r2, r2, #16
 8003644:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	671a      	str	r2, [r3, #112]	; 0x70
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f7ff fb6f 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff fb4b 	bl	8002d54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_UARTEx_DisableFifoMode+0x16>
 8003714:	2302      	movs	r3, #2
 8003716:	e027      	b.n	8003768 <HAL_UARTEx_DisableFifoMode+0x66>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	; 0x24
 8003724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003746:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003788:	2302      	movs	r3, #2
 800378a:	e02d      	b.n	80037e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2224      	movs	r2, #36	; 0x24
 8003798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f84f 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003804:	2302      	movs	r3, #2
 8003806:	e02d      	b.n	8003864 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2224      	movs	r2, #36	; 0x24
 8003814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f811 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003878:	2b00      	cmp	r3, #0
 800387a:	d108      	bne.n	800388e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800388c:	e031      	b.n	80038f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800388e:	2308      	movs	r3, #8
 8003890:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003892:	2308      	movs	r3, #8
 8003894:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	0e5b      	lsrs	r3, r3, #25
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	0f5b      	lsrs	r3, r3, #29
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038b6:	7bbb      	ldrb	r3, [r7, #14]
 80038b8:	7b3a      	ldrb	r2, [r7, #12]
 80038ba:	4911      	ldr	r1, [pc, #68]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038bc:	5c8a      	ldrb	r2, [r1, r2]
 80038be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038c2:	7b3a      	ldrb	r2, [r7, #12]
 80038c4:	490f      	ldr	r1, [pc, #60]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	7b7a      	ldrb	r2, [r7, #13]
 80038d8:	4909      	ldr	r1, [pc, #36]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038da:	5c8a      	ldrb	r2, [r1, r2]
 80038dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80038e0:	7b7a      	ldrb	r2, [r7, #13]
 80038e2:	4908      	ldr	r1, [pc, #32]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	0802465c 	.word	0x0802465c
 8003904:	08024664 	.word	0x08024664

08003908 <ESP_Init>:

int ESP_Init(void 		(*UART_Transmit)(uint8_t*),
			 uint8_t 	(*UART_Receive)(void),
			 uint32_t 	(*getTick)(void),
			 uint32_t	UART_Buffer_Size)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
	if(UART_Transmit != NULL		&&
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d016      	beq.n	800394a <ESP_Init+0x42>
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d013      	beq.n	800394a <ESP_Init+0x42>
	   UART_Receive	!= NULL			&&
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d010      	beq.n	800394a <ESP_Init+0x42>
	   getTick != NULL)
	{
		ESP8266.UART_Receive 		= UART_Receive;
 8003928:	4a0b      	ldr	r2, [pc, #44]	; (8003958 <ESP_Init+0x50>)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	6053      	str	r3, [r2, #4]
		ESP8266.UART_Transmit 		= UART_Transmit;
 800392e:	4a0a      	ldr	r2, [pc, #40]	; (8003958 <ESP_Init+0x50>)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6013      	str	r3, [r2, #0]
		ESP8266.getTick 			= getTick;
 8003934:	4a08      	ldr	r2, [pc, #32]	; (8003958 <ESP_Init+0x50>)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6093      	str	r3, [r2, #8]

		rx_buffer = ringBuffer_init(UART_Buffer_Size);
 800393a:	6838      	ldr	r0, [r7, #0]
 800393c:	f000 f968 	bl	8003c10 <ringBuffer_init>
 8003940:	4603      	mov	r3, r0
 8003942:	4a06      	ldr	r2, [pc, #24]	; (800395c <ESP_Init+0x54>)
 8003944:	6013      	str	r3, [r2, #0]

		return 1;
 8003946:	2301      	movs	r3, #1
 8003948:	e001      	b.n	800394e <ESP_Init+0x46>
	}
	else
	{
		return -1;
 800394a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000360 	.word	0x20000360
 800395c:	20000498 	.word	0x20000498

08003960 <Send_AT_Command>:


void Send_AT_Command(char *cmd)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]

	ESP8266.UART_Transmit((uint8_t*)cmd);
 8003968:	4b03      	ldr	r3, [pc, #12]	; (8003978 <Send_AT_Command+0x18>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20000360 	.word	0x20000360

0800397c <ESP_UART_ReceiveHandler>:

void ESP_UART_ReceiveHandler(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
	uint8_t rx_data=0;
 8003982:	2300      	movs	r3, #0
 8003984:	71fb      	strb	r3, [r7, #7]

	rx_data = ESP8266.UART_Receive();
 8003986:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <ESP_UART_ReceiveHandler+0x2c>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	4798      	blx	r3
 800398c:	4603      	mov	r3, r0
 800398e:	71fb      	strb	r3, [r7, #7]
	ringBuffer_push(rx_buffer, rx_data);
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <ESP_UART_ReceiveHandler+0x30>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	79fa      	ldrb	r2, [r7, #7]
 8003996:	4611      	mov	r1, r2
 8003998:	4618      	mov	r0, r3
 800399a:	f000 f97a 	bl	8003c92 <ringBuffer_push>
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20000360 	.word	0x20000360
 80039ac:	20000498 	.word	0x20000498

080039b0 <Read_Response>:


uint32_t Read_Response(char * response)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
	return ringBuffer_lookFor(rx_buffer, (uint8_t*)response);
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <Read_Response+0x20>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 f9ea 	bl	8003d98 <ringBuffer_lookFor>
 80039c4:	4603      	mov	r3, r0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20000498 	.word	0x20000498

080039d4 <Wait_Response>:


Status Wait_Response(char* response, uint32_t timeout)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]

	static uint32_t time = 0;
	static uint8_t firstCall = 0;

	if(!firstCall)
 80039de:	4b17      	ldr	r3, [pc, #92]	; (8003a3c <Wait_Response+0x68>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d108      	bne.n	80039f8 <Wait_Response+0x24>
	{
		time = ESP8266.getTick();
 80039e6:	4b16      	ldr	r3, [pc, #88]	; (8003a40 <Wait_Response+0x6c>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	4798      	blx	r3
 80039ec:	4603      	mov	r3, r0
 80039ee:	4a15      	ldr	r2, [pc, #84]	; (8003a44 <Wait_Response+0x70>)
 80039f0:	6013      	str	r3, [r2, #0]
		firstCall = 1;
 80039f2:	4b12      	ldr	r3, [pc, #72]	; (8003a3c <Wait_Response+0x68>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	701a      	strb	r2, [r3, #0]
	}

	if(ringBuffer_lookFor(rx_buffer, (uint8_t*)response))
 80039f8:	4b13      	ldr	r3, [pc, #76]	; (8003a48 <Wait_Response+0x74>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 f9ca 	bl	8003d98 <ringBuffer_lookFor>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d004      	beq.n	8003a14 <Wait_Response+0x40>
	{
		firstCall = 0;
 8003a0a:	4b0c      	ldr	r3, [pc, #48]	; (8003a3c <Wait_Response+0x68>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	701a      	strb	r2, [r3, #0]
		return FOUND;
 8003a10:	2300      	movs	r3, #0
 8003a12:	e00f      	b.n	8003a34 <Wait_Response+0x60>
	}
	else if(ESP8266.getTick() - time >= timeout)
 8003a14:	4b0a      	ldr	r3, [pc, #40]	; (8003a40 <Wait_Response+0x6c>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	4798      	blx	r3
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <Wait_Response+0x70>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d804      	bhi.n	8003a32 <Wait_Response+0x5e>
	{
		firstCall = 0;
 8003a28:	4b04      	ldr	r3, [pc, #16]	; (8003a3c <Wait_Response+0x68>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	701a      	strb	r2, [r3, #0]
		return TIMEOUT_ERROR;
 8003a2e:	2302      	movs	r3, #2
 8003a30:	e000      	b.n	8003a34 <Wait_Response+0x60>
	}
	else
	{
		return IDLE;
 8003a32:	2305      	movs	r3, #5
	}

}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	2000036c 	.word	0x2000036c
 8003a40:	20000360 	.word	0x20000360
 8003a44:	20000370 	.word	0x20000370
 8003a48:	20000498 	.word	0x20000498

08003a4c <Connect_Wifi>:

Status Connect_Wifi(char* ssid, char* password)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b09e      	sub	sp, #120	; 0x78
 8003a50:	af02      	add	r7, sp, #8
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
	static Status response_state = IDLE;

	static uint8_t commandCount = 0,firstCall = 1;

	switch(commandCount)
 8003a56:	4b65      	ldr	r3, [pc, #404]	; (8003bec <Connect_Wifi+0x1a0>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d07b      	beq.n	8003b56 <Connect_Wifi+0x10a>
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	f300 80bd 	bgt.w	8003bde <Connect_Wifi+0x192>
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <Connect_Wifi+0x22>
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d03a      	beq.n	8003ae2 <Connect_Wifi+0x96>
 8003a6c:	e0b7      	b.n	8003bde <Connect_Wifi+0x192>
	{
	case 0:
		if(firstCall)
 8003a6e:	4b60      	ldr	r3, [pc, #384]	; (8003bf0 <Connect_Wifi+0x1a4>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d005      	beq.n	8003a82 <Connect_Wifi+0x36>
		{
			Send_AT_Command(AT_CWMODE_STATION);  // sending AT+CWMODE=1
 8003a76:	485f      	ldr	r0, [pc, #380]	; (8003bf4 <Connect_Wifi+0x1a8>)
 8003a78:	f7ff ff72 	bl	8003960 <Send_AT_Command>
			firstCall = 0;
 8003a7c:	4b5c      	ldr	r3, [pc, #368]	; (8003bf0 <Connect_Wifi+0x1a4>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	701a      	strb	r2, [r3, #0]
		}
		response_state = Wait_Response(AT_RESPONSE_OK, 1000);
 8003a82:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003a86:	485c      	ldr	r0, [pc, #368]	; (8003bf8 <Connect_Wifi+0x1ac>)
 8003a88:	f7ff ffa4 	bl	80039d4 <Wait_Response>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	461a      	mov	r2, r3
 8003a90:	4b5a      	ldr	r3, [pc, #360]	; (8003bfc <Connect_Wifi+0x1b0>)
 8003a92:	701a      	strb	r2, [r3, #0]

		if(response_state == IDLE)
 8003a94:	4b59      	ldr	r3, [pc, #356]	; (8003bfc <Connect_Wifi+0x1b0>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2b05      	cmp	r3, #5
 8003a9a:	d101      	bne.n	8003aa0 <Connect_Wifi+0x54>
		{
			return IDLE;
 8003a9c:	2305      	movs	r3, #5
 8003a9e:	e0a1      	b.n	8003be4 <Connect_Wifi+0x198>
		}
		else if(response_state == FOUND)
 8003aa0:	4b56      	ldr	r3, [pc, #344]	; (8003bfc <Connect_Wifi+0x1b0>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10e      	bne.n	8003ac6 <Connect_Wifi+0x7a>
		{
			commandCount += 1;
 8003aa8:	4b50      	ldr	r3, [pc, #320]	; (8003bec <Connect_Wifi+0x1a0>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	3301      	adds	r3, #1
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	4b4e      	ldr	r3, [pc, #312]	; (8003bec <Connect_Wifi+0x1a0>)
 8003ab2:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003ab4:	4b52      	ldr	r3, [pc, #328]	; (8003c00 <Connect_Wifi+0x1b4>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 f93e 	bl	8003d3a <ringBuffer_flush>
			firstCall = 1;
 8003abe:	4b4c      	ldr	r3, [pc, #304]	; (8003bf0 <Connect_Wifi+0x1a4>)
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	701a      	strb	r2, [r3, #0]
			firstCall = 1;
			return CONNECTION_ERROR;
		}


		break;
 8003ac4:	e08d      	b.n	8003be2 <Connect_Wifi+0x196>
		else if(response_state == TIMEOUT_ERROR)
 8003ac6:	4b4d      	ldr	r3, [pc, #308]	; (8003bfc <Connect_Wifi+0x1b0>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d104      	bne.n	8003ad8 <Connect_Wifi+0x8c>
			firstCall = 1;
 8003ace:	4b48      	ldr	r3, [pc, #288]	; (8003bf0 <Connect_Wifi+0x1a4>)
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	701a      	strb	r2, [r3, #0]
			return TIMEOUT_ERROR;
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e085      	b.n	8003be4 <Connect_Wifi+0x198>
			firstCall = 1;
 8003ad8:	4b45      	ldr	r3, [pc, #276]	; (8003bf0 <Connect_Wifi+0x1a4>)
 8003ada:	2201      	movs	r2, #1
 8003adc:	701a      	strb	r2, [r3, #0]
			return CONNECTION_ERROR;
 8003ade:	2304      	movs	r3, #4
 8003ae0:	e080      	b.n	8003be4 <Connect_Wifi+0x198>
	case 1:
		if(firstCall)
 8003ae2:	4b43      	ldr	r3, [pc, #268]	; (8003bf0 <Connect_Wifi+0x1a4>)
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d005      	beq.n	8003af6 <Connect_Wifi+0xaa>
		{
			Send_AT_Command(AT_CWQAP);  // sending AT+CWQAP
 8003aea:	4846      	ldr	r0, [pc, #280]	; (8003c04 <Connect_Wifi+0x1b8>)
 8003aec:	f7ff ff38 	bl	8003960 <Send_AT_Command>
			firstCall = 0;
 8003af0:	4b3f      	ldr	r3, [pc, #252]	; (8003bf0 <Connect_Wifi+0x1a4>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	701a      	strb	r2, [r3, #0]
		}
		response_state = Wait_Response(AT_RESPONSE_OK, 1000);
 8003af6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003afa:	483f      	ldr	r0, [pc, #252]	; (8003bf8 <Connect_Wifi+0x1ac>)
 8003afc:	f7ff ff6a 	bl	80039d4 <Wait_Response>
 8003b00:	4603      	mov	r3, r0
 8003b02:	461a      	mov	r2, r3
 8003b04:	4b3d      	ldr	r3, [pc, #244]	; (8003bfc <Connect_Wifi+0x1b0>)
 8003b06:	701a      	strb	r2, [r3, #0]

		if(response_state == IDLE)
 8003b08:	4b3c      	ldr	r3, [pc, #240]	; (8003bfc <Connect_Wifi+0x1b0>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2b05      	cmp	r3, #5
 8003b0e:	d101      	bne.n	8003b14 <Connect_Wifi+0xc8>
		{
			return IDLE;
 8003b10:	2305      	movs	r3, #5
 8003b12:	e067      	b.n	8003be4 <Connect_Wifi+0x198>
		}
		else if(response_state == FOUND)
 8003b14:	4b39      	ldr	r3, [pc, #228]	; (8003bfc <Connect_Wifi+0x1b0>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10e      	bne.n	8003b3a <Connect_Wifi+0xee>
		{
			commandCount += 1;
 8003b1c:	4b33      	ldr	r3, [pc, #204]	; (8003bec <Connect_Wifi+0x1a0>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	3301      	adds	r3, #1
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	4b31      	ldr	r3, [pc, #196]	; (8003bec <Connect_Wifi+0x1a0>)
 8003b26:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003b28:	4b35      	ldr	r3, [pc, #212]	; (8003c00 <Connect_Wifi+0x1b4>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 f904 	bl	8003d3a <ringBuffer_flush>
			firstCall = 1;
 8003b32:	4b2f      	ldr	r3, [pc, #188]	; (8003bf0 <Connect_Wifi+0x1a4>)
 8003b34:	2201      	movs	r2, #1
 8003b36:	701a      	strb	r2, [r3, #0]
		{
			firstCall = 1;
			return CONNECTION_ERROR;
		}

		break;
 8003b38:	e053      	b.n	8003be2 <Connect_Wifi+0x196>
		else if(response_state == TIMEOUT_ERROR)
 8003b3a:	4b30      	ldr	r3, [pc, #192]	; (8003bfc <Connect_Wifi+0x1b0>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d104      	bne.n	8003b4c <Connect_Wifi+0x100>
			firstCall = 1;
 8003b42:	4b2b      	ldr	r3, [pc, #172]	; (8003bf0 <Connect_Wifi+0x1a4>)
 8003b44:	2201      	movs	r2, #1
 8003b46:	701a      	strb	r2, [r3, #0]
			return TIMEOUT_ERROR;
 8003b48:	2302      	movs	r3, #2
 8003b4a:	e04b      	b.n	8003be4 <Connect_Wifi+0x198>
			firstCall = 1;
 8003b4c:	4b28      	ldr	r3, [pc, #160]	; (8003bf0 <Connect_Wifi+0x1a4>)
 8003b4e:	2201      	movs	r2, #1
 8003b50:	701a      	strb	r2, [r3, #0]
			return CONNECTION_ERROR;
 8003b52:	2304      	movs	r3, #4
 8003b54:	e046      	b.n	8003be4 <Connect_Wifi+0x198>

	case 2:
	{
		if(firstCall)
 8003b56:	4b26      	ldr	r3, [pc, #152]	; (8003bf0 <Connect_Wifi+0x1a4>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d010      	beq.n	8003b80 <Connect_Wifi+0x134>
		{
			char tx_buffer[100];

			sprintf(tx_buffer,"%s\"%s\",\"%s\"\r\n",AT_CWJAP,ssid,password); 		// AT+CWJAP="<SSID>","<password>"
 8003b5e:	f107 000c 	add.w	r0, r7, #12
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a27      	ldr	r2, [pc, #156]	; (8003c08 <Connect_Wifi+0x1bc>)
 8003b6a:	4928      	ldr	r1, [pc, #160]	; (8003c0c <Connect_Wifi+0x1c0>)
 8003b6c:	f01a ff94 	bl	801ea98 <siprintf>

			Send_AT_Command(tx_buffer);  // sending AT+CWJAP="<SSID>","<password>"
 8003b70:	f107 030c 	add.w	r3, r7, #12
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7ff fef3 	bl	8003960 <Send_AT_Command>
			firstCall = 0;
 8003b7a:	4b1d      	ldr	r3, [pc, #116]	; (8003bf0 <Connect_Wifi+0x1a4>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	701a      	strb	r2, [r3, #0]
		}
		response_state = Wait_Response(AT_RESPONSE_OK, 1000);
 8003b80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b84:	481c      	ldr	r0, [pc, #112]	; (8003bf8 <Connect_Wifi+0x1ac>)
 8003b86:	f7ff ff25 	bl	80039d4 <Wait_Response>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	4b1b      	ldr	r3, [pc, #108]	; (8003bfc <Connect_Wifi+0x1b0>)
 8003b90:	701a      	strb	r2, [r3, #0]

		if(response_state == IDLE)
 8003b92:	4b1a      	ldr	r3, [pc, #104]	; (8003bfc <Connect_Wifi+0x1b0>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b05      	cmp	r3, #5
 8003b98:	d101      	bne.n	8003b9e <Connect_Wifi+0x152>
		{

			return IDLE;
 8003b9a:	2305      	movs	r3, #5
 8003b9c:	e022      	b.n	8003be4 <Connect_Wifi+0x198>
		}
		else if(response_state == FOUND)
 8003b9e:	4b17      	ldr	r3, [pc, #92]	; (8003bfc <Connect_Wifi+0x1b0>)
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10d      	bne.n	8003bc2 <Connect_Wifi+0x176>
		{
			commandCount += 0;
 8003ba6:	4b11      	ldr	r3, [pc, #68]	; (8003bec <Connect_Wifi+0x1a0>)
 8003ba8:	781a      	ldrb	r2, [r3, #0]
 8003baa:	4b10      	ldr	r3, [pc, #64]	; (8003bec <Connect_Wifi+0x1a0>)
 8003bac:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003bae:	4b14      	ldr	r3, [pc, #80]	; (8003c00 <Connect_Wifi+0x1b4>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 f8c1 	bl	8003d3a <ringBuffer_flush>
			firstCall = 1;
 8003bb8:	4b0d      	ldr	r3, [pc, #52]	; (8003bf0 <Connect_Wifi+0x1a4>)
 8003bba:	2201      	movs	r2, #1
 8003bbc:	701a      	strb	r2, [r3, #0]
			return CONNECTION_OK;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e010      	b.n	8003be4 <Connect_Wifi+0x198>
		}
		else if(response_state == TIMEOUT_ERROR)
 8003bc2:	4b0e      	ldr	r3, [pc, #56]	; (8003bfc <Connect_Wifi+0x1b0>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d104      	bne.n	8003bd4 <Connect_Wifi+0x188>
		{
			firstCall = 1;
 8003bca:	4b09      	ldr	r3, [pc, #36]	; (8003bf0 <Connect_Wifi+0x1a4>)
 8003bcc:	2201      	movs	r2, #1
 8003bce:	701a      	strb	r2, [r3, #0]
			return TIMEOUT_ERROR;
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e007      	b.n	8003be4 <Connect_Wifi+0x198>
		}
		else
		{
			firstCall = 1;
 8003bd4:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <Connect_Wifi+0x1a4>)
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	701a      	strb	r2, [r3, #0]
			return CONNECTION_ERROR;
 8003bda:	2304      	movs	r3, #4
 8003bdc:	e002      	b.n	8003be4 <Connect_Wifi+0x198>
		}

		break;
	}

	default: return CONNECTION_ERROR;
 8003bde:	2304      	movs	r3, #4
 8003be0:	e000      	b.n	8003be4 <Connect_Wifi+0x198>





	return FOUND;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3770      	adds	r7, #112	; 0x70
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	20000374 	.word	0x20000374
 8003bf0:	20000010 	.word	0x20000010
 8003bf4:	08021580 	.word	0x08021580
 8003bf8:	08021590 	.word	0x08021590
 8003bfc:	20000011 	.word	0x20000011
 8003c00:	20000498 	.word	0x20000498
 8003c04:	08021594 	.word	0x08021594
 8003c08:	080215a0 	.word	0x080215a0
 8003c0c:	080215ac 	.word	0x080215ac

08003c10 <ringBuffer_init>:
 * @brief 	Initialize the ring buffer. Ring buffer is allocated after this function.
 * @param 	size parameter specifies the size of ring buffer.
 * @retval	RingBuffer typedef structure.
 */
RingBuffer* ringBuffer_init(uint32_t size)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
	RingBuffer* rBuf;

	rBuf = (RingBuffer*)malloc(1*sizeof(RingBuffer));
 8003c18:	2010      	movs	r0, #16
 8003c1a:	f01a fd6b 	bl	801e6f4 <malloc>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	60fb      	str	r3, [r7, #12]
	if(rBuf == NULL)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <ringBuffer_init+0x1c>
	{
		// Error Checks
		return 0;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	e017      	b.n	8003c5c <ringBuffer_init+0x4c>
	}

	rBuf->size = size;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	609a      	str	r2, [r3, #8]
	rBuf->head = 0;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]
	rBuf->tail = 0;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	605a      	str	r2, [r3, #4]

	rBuf->buffer = (uint8_t*)calloc((size_t)size,sizeof(uint8_t));
 8003c3e:	2101      	movs	r1, #1
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f019 ff8f 	bl	801db64 <calloc>
 8003c46:	4603      	mov	r3, r0
 8003c48:	461a      	mov	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	60da      	str	r2, [r3, #12]
	if(rBuf->buffer == NULL)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <ringBuffer_init+0x4a>
		{
			// Error Checks
			return 0;
 8003c56:	2300      	movs	r3, #0
 8003c58:	e000      	b.n	8003c5c <ringBuffer_init+0x4c>
		}

	return rBuf;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <ringBuffer_deInit>:
 * @brief 	De-initialize the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_deInit(RingBuffer* buffer)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
	if(buffer != NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00b      	beq.n	8003c8a <ringBuffer_deInit+0x26>
	{
		if(buffer->buffer != NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d004      	beq.n	8003c84 <ringBuffer_deInit+0x20>
		{
			free(buffer->buffer);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f01a fd40 	bl	801e704 <free>
		}
		free(buffer);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f01a fd3d 	bl	801e704 <free>
	}
}
 8003c8a:	bf00      	nop
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <ringBuffer_push>:
 * @param 	RingBuffer typedef structure.
 * @param 	data is an unsigned 8-bit integer variable to be pushed into the buffer.
 * @retval	None.
 */
void ringBuffer_push(RingBuffer* ringBuffer, uint8_t data)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	70fb      	strb	r3, [r7, #3]
	if(ringBuffer->head != (ringBuffer->size - 1))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d00c      	beq.n	8003cc6 <ringBuffer_push+0x34>
	{
		ringBuffer->buffer[ringBuffer->head] = data;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68da      	ldr	r2, [r3, #12]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	78fa      	ldrb	r2, [r7, #3]
 8003cb8:	701a      	strb	r2, [r3, #0]
		ringBuffer->head += 1;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	601a      	str	r2, [r3, #0]
	else
	{
		ringBuffer->buffer[ringBuffer->head] = data;
		ringBuffer->head = 0;
	}
}
 8003cc4:	e009      	b.n	8003cda <ringBuffer_push+0x48>
		ringBuffer->buffer[ringBuffer->head] = data;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4413      	add	r3, r2
 8003cd0:	78fa      	ldrb	r2, [r7, #3]
 8003cd2:	701a      	strb	r2, [r3, #0]
		ringBuffer->head = 0;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	601a      	str	r2, [r3, #0]
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <ringBuffer_pop>:
 * @brief 	Read data from the buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	unsigned 8-bit integer data to be read from the buffer.
 */
uint8_t ringBuffer_pop(RingBuffer* ringBuffer)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b085      	sub	sp, #20
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
	uint8_t data;

	if(ringBuffer->tail != (ringBuffer->size - 1))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d00d      	beq.n	8003d18 <ringBuffer_pop+0x32>
	{
		data = ringBuffer->buffer[ringBuffer->tail];
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68da      	ldr	r2, [r3, #12]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	4413      	add	r3, r2
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail += 1;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	1c5a      	adds	r2, r3, #1
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	605a      	str	r2, [r3, #4]
		return data;
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
 8003d16:	e00a      	b.n	8003d2e <ringBuffer_pop+0x48>
	}
	else
	{

		data = ringBuffer->buffer[ringBuffer->tail];
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	4413      	add	r3, r2
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail = 0;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	605a      	str	r2, [r3, #4]
		return data;
 8003d2c:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3714      	adds	r7, #20
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <ringBuffer_flush>:
 * @brief 	Clear the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_flush(RingBuffer* ringBuffer)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b082      	sub	sp, #8
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
	memset(ringBuffer->buffer,0x00,ringBuffer->size);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68d8      	ldr	r0, [r3, #12]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	f01a fcef 	bl	801e730 <memset>
}
 8003d52:	bf00      	nop
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <ringBuffer_pushArray>:
 * @param 	RingBuffer typedef structure.
 * @param	data is an unsigned 8-bit data array to be written into the buffer.
 * @retval	None.
 */
void ringBuffer_pushArray(RingBuffer* ringBuffer, uint8_t* data)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b084      	sub	sp, #16
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
 8003d62:	6039      	str	r1, [r7, #0]
	 for(int i = 0; i<strlen((char*)data);i++)
 8003d64:	2300      	movs	r3, #0
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	e00a      	b.n	8003d80 <ringBuffer_pushArray+0x26>
		 ringBuffer_push(ringBuffer, data[i]);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	4413      	add	r3, r2
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	4619      	mov	r1, r3
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7ff ff8c 	bl	8003c92 <ringBuffer_push>
	 for(int i = 0; i<strlen((char*)data);i++)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	6838      	ldr	r0, [r7, #0]
 8003d82:	f7fc fa5b 	bl	800023c <strlen>
 8003d86:	4602      	mov	r2, r0
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d8ed      	bhi.n	8003d6a <ringBuffer_pushArray+0x10>
}
 8003d8e:	bf00      	nop
 8003d90:	bf00      	nop
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <ringBuffer_lookFor>:
 * @param	data is an unsigned 8-bit array to be searched in the buffer.
 * @retval	1: data is available in the buffer.
 * 			0: data is not available in the buffer.
 */
uint32_t ringBuffer_lookFor(RingBuffer* ringBuffer, uint8_t* data)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
	char* str = strstr((char*)ringBuffer->buffer,(char*)data);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	6839      	ldr	r1, [r7, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f01b fc37 	bl	801f61c <strstr>
 8003dae:	60f8      	str	r0, [r7, #12]

	if(str != NULL)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <ringBuffer_lookFor+0x22>
		return 1;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e000      	b.n	8003dbc <ringBuffer_lookFor+0x24>
	else
		return 0;
 8003dba:	2300      	movs	r3, #0

}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <ringBuffer_capacity>:
 * @brief 	Check the size of the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	Size of ring buffer.
 */
uint32_t ringBuffer_capacity(RingBuffer* ringBuffer)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
	return ringBuffer->size;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003de2:	f7fd f8c4 	bl	8000f6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003de6:	f000 f81d 	bl	8003e24 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003dea:	f000 f951 	bl	8004090 <_ZL12MX_GPIO_Initv>
  MX_LPUART1_UART_Init();
 8003dee:	f000 f891 	bl	8003f14 <_ZL20MX_LPUART1_UART_Initv>
  MX_USART1_UART_Init();
 8003df2:	f000 f8ed 	bl	8003fd0 <_ZL19MX_USART1_UART_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const char * av_override[] = { "exe","-v" };      // verbose mode
 8003df6:	4a0a      	ldr	r2, [pc, #40]	; (8003e20 <main+0x44>)
 8003df8:	463b      	mov	r3, r7
 8003dfa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003dfe:	e883 0003 	stmia.w	r3, {r0, r1}
  CommandLineTestRunner::RunAllTests(2, av_override);
 8003e02:	463b      	mov	r3, r7
 8003e04:	4619      	mov	r1, r3
 8003e06:	2002      	movs	r0, #2
 8003e08:	f002 ff20 	bl	8006c4c <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>

  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003e0c:	2120      	movs	r1, #32
 8003e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e12:	f7fd fca9 	bl	8001768 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8003e16:	2064      	movs	r0, #100	; 0x64
 8003e18:	f7fd f91a 	bl	8001050 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003e1c:	e7f6      	b.n	8003e0c <main+0x30>
 8003e1e:	bf00      	nop
 8003e20:	080215c4 	.word	0x080215c4

08003e24 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b0a8      	sub	sp, #160	; 0xa0
 8003e28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e2a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003e2e:	2238      	movs	r2, #56	; 0x38
 8003e30:	2100      	movs	r1, #0
 8003e32:	4618      	mov	r0, r3
 8003e34:	f01a fc7c 	bl	801e730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	605a      	str	r2, [r3, #4]
 8003e42:	609a      	str	r2, [r3, #8]
 8003e44:	60da      	str	r2, [r3, #12]
 8003e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e48:	463b      	mov	r3, r7
 8003e4a:	2254      	movs	r2, #84	; 0x54
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f01a fc6e 	bl	801e730 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003e54:	2000      	movs	r0, #0
 8003e56:	f7fd fcc5 	bl	80017e4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e62:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003e64:	2340      	movs	r3, #64	; 0x40
 8003e66:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e68:	2302      	movs	r3, #2
 8003e6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003e6e:	2302      	movs	r3, #2
 8003e70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003e74:	2304      	movs	r3, #4
 8003e76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003e7a:	2355      	movs	r3, #85	; 0x55
 8003e7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e80:	2302      	movs	r3, #2
 8003e82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003e86:	2302      	movs	r3, #2
 8003e88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e92:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fd fd58 	bl	800194c <HAL_RCC_OscConfig>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	bf14      	ite	ne
 8003ea2:	2301      	movne	r3, #1
 8003ea4:	2300      	moveq	r3, #0
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8003eac:	f000 f960 	bl	8004170 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003eb0:	230f      	movs	r3, #15
 8003eb2:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003ec4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003ec8:	2104      	movs	r1, #4
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fe f856 	bl	8001f7c <HAL_RCC_ClockConfig>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	bf14      	ite	ne
 8003ed6:	2301      	movne	r3, #1
 8003ed8:	2300      	moveq	r3, #0
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8003ee0:	f000 f946 	bl	8004170 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 8003ee4:	2321      	movs	r3, #33	; 0x21
 8003ee6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003eec:	2300      	movs	r3, #0
 8003eee:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ef0:	463b      	mov	r3, r7
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fe fa5e 	bl	80023b4 <HAL_RCCEx_PeriphCLKConfig>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	bf14      	ite	ne
 8003efe:	2301      	movne	r3, #1
 8003f00:	2300      	moveq	r3, #0
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 8003f08:	f000 f932 	bl	8004170 <Error_Handler>
  }
}
 8003f0c:	bf00      	nop
 8003f0e:	37a0      	adds	r7, #160	; 0xa0
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003f18:	4b2b      	ldr	r3, [pc, #172]	; (8003fc8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003f1a:	4a2c      	ldr	r2, [pc, #176]	; (8003fcc <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8003f1c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8003f1e:	4b2a      	ldr	r3, [pc, #168]	; (8003fc8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003f20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f24:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f26:	4b28      	ldr	r3, [pc, #160]	; (8003fc8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003f2c:	4b26      	ldr	r3, [pc, #152]	; (8003fc8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003f32:	4b25      	ldr	r3, [pc, #148]	; (8003fc8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003f38:	4b23      	ldr	r3, [pc, #140]	; (8003fc8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003f3a:	220c      	movs	r2, #12
 8003f3c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f3e:	4b22      	ldr	r3, [pc, #136]	; (8003fc8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f44:	4b20      	ldr	r3, [pc, #128]	; (8003fc8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f4a:	4b1f      	ldr	r3, [pc, #124]	; (8003fc8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f50:	4b1d      	ldr	r3, [pc, #116]	; (8003fc8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003f56:	481c      	ldr	r0, [pc, #112]	; (8003fc8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003f58:	f7fe fc78 	bl	800284c <HAL_UART_Init>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	bf14      	ite	ne
 8003f62:	2301      	movne	r3, #1
 8003f64:	2300      	moveq	r3, #0
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8003f6c:	f000 f900 	bl	8004170 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f70:	2100      	movs	r1, #0
 8003f72:	4815      	ldr	r0, [pc, #84]	; (8003fc8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003f74:	f7ff fbfe 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	bf14      	ite	ne
 8003f7e:	2301      	movne	r3, #1
 8003f80:	2300      	moveq	r3, #0
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 8003f88:	f000 f8f2 	bl	8004170 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	480e      	ldr	r0, [pc, #56]	; (8003fc8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003f90:	f7ff fc2e 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	bf14      	ite	ne
 8003f9a:	2301      	movne	r3, #1
 8003f9c:	2300      	moveq	r3, #0
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 8003fa4:	f000 f8e4 	bl	8004170 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003fa8:	4807      	ldr	r0, [pc, #28]	; (8003fc8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003faa:	f7ff fbaa 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	bf14      	ite	ne
 8003fb4:	2301      	movne	r3, #1
 8003fb6:	2300      	moveq	r3, #0
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 8003fbe:	f000 f8d7 	bl	8004170 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003fc2:	bf00      	nop
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	20000378 	.word	0x20000378
 8003fcc:	40008000 	.word	0x40008000

08003fd0 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003fd4:	4b2c      	ldr	r3, [pc, #176]	; (8004088 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003fd6:	4a2d      	ldr	r2, [pc, #180]	; (800408c <_ZL19MX_USART1_UART_Initv+0xbc>)
 8003fd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003fda:	4b2b      	ldr	r3, [pc, #172]	; (8004088 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003fdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003fe0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003fe2:	4b29      	ldr	r3, [pc, #164]	; (8004088 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003fe8:	4b27      	ldr	r3, [pc, #156]	; (8004088 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003fee:	4b26      	ldr	r3, [pc, #152]	; (8004088 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ff4:	4b24      	ldr	r3, [pc, #144]	; (8004088 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ff6:	220c      	movs	r2, #12
 8003ff8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ffa:	4b23      	ldr	r3, [pc, #140]	; (8004088 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004000:	4b21      	ldr	r3, [pc, #132]	; (8004088 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004002:	2200      	movs	r2, #0
 8004004:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004006:	4b20      	ldr	r3, [pc, #128]	; (8004088 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004008:	2200      	movs	r2, #0
 800400a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800400c:	4b1e      	ldr	r3, [pc, #120]	; (8004088 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800400e:	2200      	movs	r2, #0
 8004010:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004012:	4b1d      	ldr	r3, [pc, #116]	; (8004088 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004014:	2200      	movs	r2, #0
 8004016:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004018:	481b      	ldr	r0, [pc, #108]	; (8004088 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800401a:	f7fe fc17 	bl	800284c <HAL_UART_Init>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	bf14      	ite	ne
 8004024:	2301      	movne	r3, #1
 8004026:	2300      	moveq	r3, #0
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 800402e:	f000 f89f 	bl	8004170 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004032:	2100      	movs	r1, #0
 8004034:	4814      	ldr	r0, [pc, #80]	; (8004088 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004036:	f7ff fb9d 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	bf14      	ite	ne
 8004040:	2301      	movne	r3, #1
 8004042:	2300      	moveq	r3, #0
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 800404a:	f000 f891 	bl	8004170 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800404e:	2100      	movs	r1, #0
 8004050:	480d      	ldr	r0, [pc, #52]	; (8004088 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004052:	f7ff fbcd 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	bf14      	ite	ne
 800405c:	2301      	movne	r3, #1
 800405e:	2300      	moveq	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8004066:	f000 f883 	bl	8004170 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800406a:	4807      	ldr	r0, [pc, #28]	; (8004088 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800406c:	f7ff fb49 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	bf14      	ite	ne
 8004076:	2301      	movne	r3, #1
 8004078:	2300      	moveq	r3, #0
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8004080:	f000 f876 	bl	8004170 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004084:	bf00      	nop
 8004086:	bd80      	pop	{r7, pc}
 8004088:	20000408 	.word	0x20000408
 800408c:	40013800 	.word	0x40013800

08004090 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b08a      	sub	sp, #40	; 0x28
 8004094:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004096:	f107 0314 	add.w	r3, r7, #20
 800409a:	2200      	movs	r2, #0
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	605a      	str	r2, [r3, #4]
 80040a0:	609a      	str	r2, [r3, #8]
 80040a2:	60da      	str	r2, [r3, #12]
 80040a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040a6:	4b2f      	ldr	r3, [pc, #188]	; (8004164 <_ZL12MX_GPIO_Initv+0xd4>)
 80040a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040aa:	4a2e      	ldr	r2, [pc, #184]	; (8004164 <_ZL12MX_GPIO_Initv+0xd4>)
 80040ac:	f043 0304 	orr.w	r3, r3, #4
 80040b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040b2:	4b2c      	ldr	r3, [pc, #176]	; (8004164 <_ZL12MX_GPIO_Initv+0xd4>)
 80040b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80040be:	4b29      	ldr	r3, [pc, #164]	; (8004164 <_ZL12MX_GPIO_Initv+0xd4>)
 80040c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040c2:	4a28      	ldr	r2, [pc, #160]	; (8004164 <_ZL12MX_GPIO_Initv+0xd4>)
 80040c4:	f043 0320 	orr.w	r3, r3, #32
 80040c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040ca:	4b26      	ldr	r3, [pc, #152]	; (8004164 <_ZL12MX_GPIO_Initv+0xd4>)
 80040cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ce:	f003 0320 	and.w	r3, r3, #32
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040d6:	4b23      	ldr	r3, [pc, #140]	; (8004164 <_ZL12MX_GPIO_Initv+0xd4>)
 80040d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040da:	4a22      	ldr	r2, [pc, #136]	; (8004164 <_ZL12MX_GPIO_Initv+0xd4>)
 80040dc:	f043 0301 	orr.w	r3, r3, #1
 80040e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040e2:	4b20      	ldr	r3, [pc, #128]	; (8004164 <_ZL12MX_GPIO_Initv+0xd4>)
 80040e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	60bb      	str	r3, [r7, #8]
 80040ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040ee:	4b1d      	ldr	r3, [pc, #116]	; (8004164 <_ZL12MX_GPIO_Initv+0xd4>)
 80040f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f2:	4a1c      	ldr	r2, [pc, #112]	; (8004164 <_ZL12MX_GPIO_Initv+0xd4>)
 80040f4:	f043 0302 	orr.w	r3, r3, #2
 80040f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040fa:	4b1a      	ldr	r3, [pc, #104]	; (8004164 <_ZL12MX_GPIO_Initv+0xd4>)
 80040fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	607b      	str	r3, [r7, #4]
 8004104:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004106:	2200      	movs	r2, #0
 8004108:	2120      	movs	r1, #32
 800410a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800410e:	f7fd fb13 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004112:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004118:	4b13      	ldr	r3, [pc, #76]	; (8004168 <_ZL12MX_GPIO_Initv+0xd8>)
 800411a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800411c:	2300      	movs	r3, #0
 800411e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004120:	f107 0314 	add.w	r3, r7, #20
 8004124:	4619      	mov	r1, r3
 8004126:	4811      	ldr	r0, [pc, #68]	; (800416c <_ZL12MX_GPIO_Initv+0xdc>)
 8004128:	f7fd f984 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800412c:	2320      	movs	r3, #32
 800412e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004130:	2301      	movs	r3, #1
 8004132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004134:	2300      	movs	r3, #0
 8004136:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004138:	2300      	movs	r3, #0
 800413a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800413c:	f107 0314 	add.w	r3, r7, #20
 8004140:	4619      	mov	r1, r3
 8004142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004146:	f7fd f975 	bl	8001434 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800414a:	2200      	movs	r2, #0
 800414c:	2100      	movs	r1, #0
 800414e:	2028      	movs	r0, #40	; 0x28
 8004150:	f7fd f87b 	bl	800124a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004154:	2028      	movs	r0, #40	; 0x28
 8004156:	f7fd f892 	bl	800127e <HAL_NVIC_EnableIRQ>

}
 800415a:	bf00      	nop
 800415c:	3728      	adds	r7, #40	; 0x28
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	40021000 	.word	0x40021000
 8004168:	10110000 	.word	0x10110000
 800416c:	48000800 	.word	0x48000800

08004170 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004174:	b672      	cpsid	i
}
 8004176:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004178:	e7fe      	b.n	8004178 <Error_Handler+0x8>

0800417a <_ZN14MockActualCall13withParameterERK12SimpleStringPv>:
    MockActualCall& withParameter(const SimpleString& name, unsigned long int value) { return withUnsignedLongIntParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, cpputest_longlong value) { return withLongLongIntParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, cpputest_ulonglong value) { return withUnsignedLongLongIntParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, double value) { return withDoubleParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, const char* value) { return withStringParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, void* value) { return withPointerParameter(name, value); }
 800417a:	b580      	push	{r7, lr}
 800417c:	b084      	sub	sp, #16
 800417e:	af00      	add	r7, sp, #0
 8004180:	60f8      	str	r0, [r7, #12]
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	607a      	str	r2, [r7, #4]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3340      	adds	r3, #64	; 0x40
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	68b9      	ldr	r1, [r7, #8]
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	4798      	blx	r3
 8004196:	4603      	mov	r3, r0
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPv>:
    MockExpectedCall& withParameter(const SimpleString& name, cpputest_longlong value) { return withLongLongIntParameter(name, value); }
    MockExpectedCall& withParameter(const SimpleString& name, cpputest_ulonglong value) { return withUnsignedLongLongIntParameter(name, value); }
    MockExpectedCall& withParameter(const SimpleString& name, double value) { return withDoubleParameter(name, value); }
    MockExpectedCall& withParameter(const SimpleString& name, double value, double tolerance) { return withDoubleParameter(name, value, tolerance); }
    MockExpectedCall& withParameter(const SimpleString& name, const char* value) { return withStringParameter(name, value); }
    MockExpectedCall& withParameter(const SimpleString& name, void* value) { return withPointerParameter(name, value); }
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3350      	adds	r3, #80	; 0x50
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	68b9      	ldr	r1, [r7, #8]
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	4798      	blx	r3
 80041bc:	4603      	mov	r3, r0
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group5setupEv>:
TEST_GROUP(RingBuffer_Test_Group)
{

	RingBuffer* testBuf;

	void setup()
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b082      	sub	sp, #8
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
	{

	   testBuf = ringBuffer_init(50);
 80041ce:	2032      	movs	r0, #50	; 0x32
 80041d0:	f7ff fd1e 	bl	8003c10 <ringBuffer_init>
 80041d4:	4602      	mov	r2, r0
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	605a      	str	r2, [r3, #4]

	}
 80041da:	bf00      	nop
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group8teardownEv>:

	void teardown()
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b082      	sub	sp, #8
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
	{

		ringBuffer_deInit(testBuf);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff fd38 	bl	8003c64 <ringBuffer_deInit>
	}
 80041f4:	bf00      	nop
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>:
TEST_GROUP(RingBuffer_Test_Group)
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4618      	mov	r0, r3
 8004208:	f00e f9be 	bl	8012588 <_ZN5UtestC1Ev>
 800420c:	4a03      	ldr	r2, [pc, #12]	; (800421c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev+0x20>)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4618      	mov	r0, r3
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	080254ec 	.word	0x080254ec

08004220 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>:
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	4a05      	ldr	r2, [pc, #20]	; (8004240 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev+0x20>)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4618      	mov	r0, r3
 8004232:	f00e f9b9 	bl	80125a8 <_ZN5UtestD1Ev>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4618      	mov	r0, r3
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	080254ec 	.word	0x080254ec

08004244 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD0Ev>:
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7ff ffe7 	bl	8004220 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004252:	2108      	movs	r1, #8
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f004 f9db 	bl	8008610 <_ZdlPvj>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4618      	mov	r0, r3
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>:
};


TEST(RingBuffer_Test_Group, InitTest)
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	601a      	str	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	605a      	str	r2, [r3, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff ffbe 	bl	80041fc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004280:	4a03      	ldr	r2, [pc, #12]	; (8004290 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev+0x2c>)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4618      	mov	r0, r3
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	080254cc 	.word	0x080254cc

08004294 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv>:
 8004294:	b590      	push	{r4, r7, lr}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	2224      	movs	r2, #36	; 0x24
 800429e:	4906      	ldr	r1, [pc, #24]	; (80042b8 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv+0x24>)
 80042a0:	2008      	movs	r0, #8
 80042a2:	f004 f9a1 	bl	80085e8 <_ZnwjPKci>
 80042a6:	4604      	mov	r4, r0
 80042a8:	4620      	mov	r0, r4
 80042aa:	f7ff ffdb 	bl	8004264 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>
 80042ae:	4623      	mov	r3, r4
 80042b0:	4618      	mov	r0, r3
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd90      	pop	{r4, r7, pc}
 80042b8:	080215cc 	.word	0x080215cc

080042bc <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>:
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f00c fd7c 	bl	8010dc4 <_ZN10UtestShellC1Ev>
 80042cc:	4a03      	ldr	r2, [pc, #12]	; (80042dc <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev+0x20>)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4618      	mov	r0, r3
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	08025420 	.word	0x08025420

080042e0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv>:
{
 80042e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042e2:	b087      	sub	sp, #28
 80042e4:	af04      	add	r7, sp, #16
 80042e6:	6078      	str	r0, [r7, #4]

   LONGS_EQUAL(50,testBuf->size);
 80042e8:	f00e f924 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 80042ec:	4604      	mov	r4, r0
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	3338      	adds	r3, #56	; 0x38
 80042f2:	681d      	ldr	r5, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	461e      	mov	r6, r3
 80042fc:	f00e f92a 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004300:	4603      	mov	r3, r0
 8004302:	9302      	str	r3, [sp, #8]
 8004304:	2327      	movs	r3, #39	; 0x27
 8004306:	9301      	str	r3, [sp, #4]
 8004308:	4b2a      	ldr	r3, [pc, #168]	; (80043b4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	4b2a      	ldr	r3, [pc, #168]	; (80043b8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd8>)
 800430e:	4632      	mov	r2, r6
 8004310:	2132      	movs	r1, #50	; 0x32
 8004312:	4620      	mov	r0, r4
 8004314:	47a8      	blx	r5
   CHECK(testBuf->buffer != NULL);
 8004316:	f00e f90d 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 800431a:	4604      	mov	r4, r0
 800431c:	6823      	ldr	r3, [r4, #0]
 800431e:	3320      	adds	r3, #32
 8004320:	681d      	ldr	r5, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	2b00      	cmp	r3, #0
 800432a:	bf14      	ite	ne
 800432c:	2301      	movne	r3, #1
 800432e:	2300      	moveq	r3, #0
 8004330:	b2de      	uxtb	r6, r3
 8004332:	f00e f90f 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004336:	4603      	mov	r3, r0
 8004338:	9303      	str	r3, [sp, #12]
 800433a:	2328      	movs	r3, #40	; 0x28
 800433c:	9302      	str	r3, [sp, #8]
 800433e:	4b1d      	ldr	r3, [pc, #116]	; (80043b4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004340:	9301      	str	r3, [sp, #4]
 8004342:	2300      	movs	r3, #0
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	4b1d      	ldr	r3, [pc, #116]	; (80043bc <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xdc>)
 8004348:	4a1d      	ldr	r2, [pc, #116]	; (80043c0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe0>)
 800434a:	4631      	mov	r1, r6
 800434c:	4620      	mov	r0, r4
 800434e:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->head);
 8004350:	f00e f8f0 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 8004354:	4604      	mov	r4, r0
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	3338      	adds	r3, #56	; 0x38
 800435a:	681d      	ldr	r5, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	461e      	mov	r6, r3
 8004364:	f00e f8f6 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004368:	4603      	mov	r3, r0
 800436a:	9302      	str	r3, [sp, #8]
 800436c:	2329      	movs	r3, #41	; 0x29
 800436e:	9301      	str	r3, [sp, #4]
 8004370:	4b10      	ldr	r3, [pc, #64]	; (80043b4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	4b13      	ldr	r3, [pc, #76]	; (80043c4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe4>)
 8004376:	4632      	mov	r2, r6
 8004378:	2100      	movs	r1, #0
 800437a:	4620      	mov	r0, r4
 800437c:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->tail);
 800437e:	f00e f8d9 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 8004382:	4604      	mov	r4, r0
 8004384:	6823      	ldr	r3, [r4, #0]
 8004386:	3338      	adds	r3, #56	; 0x38
 8004388:	681d      	ldr	r5, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	461e      	mov	r6, r3
 8004392:	f00e f8df 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004396:	4603      	mov	r3, r0
 8004398:	9302      	str	r3, [sp, #8]
 800439a:	232a      	movs	r3, #42	; 0x2a
 800439c:	9301      	str	r3, [sp, #4]
 800439e:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	4b09      	ldr	r3, [pc, #36]	; (80043c8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe8>)
 80043a4:	4632      	mov	r2, r6
 80043a6:	2100      	movs	r1, #0
 80043a8:	4620      	mov	r0, r4
 80043aa:	47a8      	blx	r5

}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043b4:	080215cc 	.word	0x080215cc
 80043b8:	080215e0 	.word	0x080215e0
 80043bc:	08021608 	.word	0x08021608
 80043c0:	08021620 	.word	0x08021620
 80043c4:	08021628 	.word	0x08021628
 80043c8:	08021650 	.word	0x08021650

080043cc <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushDataTests)
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	605a      	str	r2, [r3, #4]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7ff ff0a 	bl	80041fc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80043e8:	4a03      	ldr	r2, [pc, #12]	; (80043f8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev+0x2c>)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4618      	mov	r0, r3
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	08025400 	.word	0x08025400

080043fc <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv>:
 80043fc:	b590      	push	{r4, r7, lr}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	222e      	movs	r2, #46	; 0x2e
 8004406:	4906      	ldr	r1, [pc, #24]	; (8004420 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv+0x24>)
 8004408:	2008      	movs	r0, #8
 800440a:	f004 f8ed 	bl	80085e8 <_ZnwjPKci>
 800440e:	4604      	mov	r4, r0
 8004410:	4620      	mov	r0, r4
 8004412:	f7ff ffdb 	bl	80043cc <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>
 8004416:	4623      	mov	r3, r4
 8004418:	4618      	mov	r0, r3
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	bd90      	pop	{r4, r7, pc}
 8004420:	080215cc 	.word	0x080215cc

08004424 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>:
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4618      	mov	r0, r3
 8004430:	f00c fcc8 	bl	8010dc4 <_ZN10UtestShellC1Ev>
 8004434:	4a03      	ldr	r2, [pc, #12]	; (8004444 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev+0x20>)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4618      	mov	r0, r3
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	08025354 	.word	0x08025354

08004448 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv>:
{
 8004448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800444a:	b087      	sub	sp, #28
 800444c:	af04      	add	r7, sp, #16
 800444e:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0x45);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2145      	movs	r1, #69	; 0x45
 8004456:	4618      	mov	r0, r3
 8004458:	f7ff fc1b 	bl	8003c92 <ringBuffer_push>
	LONGS_EQUAL(0x45,testBuf->buffer[0]);
 800445c:	f00e f86a 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 8004460:	4604      	mov	r4, r0
 8004462:	6823      	ldr	r3, [r4, #0]
 8004464:	3338      	adds	r3, #56	; 0x38
 8004466:	681d      	ldr	r5, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	461e      	mov	r6, r3
 8004472:	f00e f86f 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004476:	4603      	mov	r3, r0
 8004478:	9302      	str	r3, [sp, #8]
 800447a:	2331      	movs	r3, #49	; 0x31
 800447c:	9301      	str	r3, [sp, #4]
 800447e:	4b15      	ldr	r3, [pc, #84]	; (80044d4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	4b15      	ldr	r3, [pc, #84]	; (80044d8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x90>)
 8004484:	4632      	mov	r2, r6
 8004486:	2145      	movs	r1, #69	; 0x45
 8004488:	4620      	mov	r0, r4
 800448a:	47a8      	blx	r5

	ringBuffer_push(testBuf, 0x10);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2110      	movs	r1, #16
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff fbfd 	bl	8003c92 <ringBuffer_push>
	LONGS_EQUAL(0x10,testBuf->buffer[1]);
 8004498:	f00e f84c 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 800449c:	4604      	mov	r4, r0
 800449e:	6823      	ldr	r3, [r4, #0]
 80044a0:	3338      	adds	r3, #56	; 0x38
 80044a2:	681d      	ldr	r5, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	3301      	adds	r3, #1
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	461e      	mov	r6, r3
 80044b0:	f00e f850 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80044b4:	4603      	mov	r3, r0
 80044b6:	9302      	str	r3, [sp, #8]
 80044b8:	2334      	movs	r3, #52	; 0x34
 80044ba:	9301      	str	r3, [sp, #4]
 80044bc:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	4b06      	ldr	r3, [pc, #24]	; (80044dc <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x94>)
 80044c2:	4632      	mov	r2, r6
 80044c4:	2110      	movs	r1, #16
 80044c6:	4620      	mov	r0, r4
 80044c8:	47a8      	blx	r5

}
 80044ca:	bf00      	nop
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044d2:	bf00      	nop
 80044d4:	080215cc 	.word	0x080215cc
 80044d8:	08021678 	.word	0x08021678
 80044dc:	080216a8 	.word	0x080216a8

080044e0 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferOverflowTest)
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	601a      	str	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	605a      	str	r2, [r3, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff fe80 	bl	80041fc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80044fc:	4a03      	ldr	r2, [pc, #12]	; (800450c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev+0x2c>)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4618      	mov	r0, r3
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	08025334 	.word	0x08025334

08004510 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv>:
 8004510:	b590      	push	{r4, r7, lr}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	2238      	movs	r2, #56	; 0x38
 800451a:	4906      	ldr	r1, [pc, #24]	; (8004534 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv+0x24>)
 800451c:	2008      	movs	r0, #8
 800451e:	f004 f863 	bl	80085e8 <_ZnwjPKci>
 8004522:	4604      	mov	r4, r0
 8004524:	4620      	mov	r0, r4
 8004526:	f7ff ffdb 	bl	80044e0 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>
 800452a:	4623      	mov	r3, r4
 800452c:	4618      	mov	r0, r3
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	bd90      	pop	{r4, r7, pc}
 8004534:	080215cc 	.word	0x080215cc

08004538 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>:
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4618      	mov	r0, r3
 8004544:	f00c fc3e 	bl	8010dc4 <_ZN10UtestShellC1Ev>
 8004548:	4a03      	ldr	r2, [pc, #12]	; (8004558 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev+0x20>)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	601a      	str	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4618      	mov	r0, r3
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	08025288 	.word	0x08025288

0800455c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv>:
{
 800455c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800455e:	b089      	sub	sp, #36	; 0x24
 8004560:	af04      	add	r7, sp, #16
 8004562:	6078      	str	r0, [r7, #4]
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	3b01      	subs	r3, #1
 800457a:	429a      	cmp	r2, r3
 800457c:	bf0c      	ite	eq
 800457e:	2301      	moveq	r3, #1
 8004580:	2300      	movne	r3, #0
 8004582:	b2db      	uxtb	r3, r3
 8004584:	461a      	mov	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4293      	cmp	r3, r2
 800458a:	da0b      	bge.n	80045a4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x48>
	{
		ringBuffer_push(testBuf, (uint8_t)i);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	b2d2      	uxtb	r2, r2
 8004594:	4611      	mov	r1, r2
 8004596:	4618      	mov	r0, r3
 8004598:	f7ff fb7b 	bl	8003c92 <ringBuffer_push>
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	3301      	adds	r3, #1
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	e7e3      	b.n	800456c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x10>
	}

	ringBuffer_push(testBuf, 0xFF);			// This data must be the first element of buffer.
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	21ff      	movs	r1, #255	; 0xff
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff fb71 	bl	8003c92 <ringBuffer_push>
	LONGS_EQUAL(0xFF,testBuf->buffer[0]);
 80045b0:	f00d ffc0 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 80045b4:	4604      	mov	r4, r0
 80045b6:	6823      	ldr	r3, [r4, #0]
 80045b8:	3338      	adds	r3, #56	; 0x38
 80045ba:	681d      	ldr	r5, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	461e      	mov	r6, r3
 80045c6:	f00d ffc5 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80045ca:	4603      	mov	r3, r0
 80045cc:	9302      	str	r3, [sp, #8]
 80045ce:	2340      	movs	r3, #64	; 0x40
 80045d0:	9301      	str	r3, [sp, #4]
 80045d2:	4b05      	ldr	r3, [pc, #20]	; (80045e8 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x8c>)
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	4b05      	ldr	r3, [pc, #20]	; (80045ec <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x90>)
 80045d8:	4632      	mov	r2, r6
 80045da:	21ff      	movs	r1, #255	; 0xff
 80045dc:	4620      	mov	r0, r4
 80045de:	47a8      	blx	r5
}
 80045e0:	bf00      	nop
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045e8:	080215cc 	.word	0x080215cc
 80045ec:	080216d8 	.word	0x080216d8

080045f0 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopDataTests)
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	605a      	str	r2, [r3, #4]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff fdf8 	bl	80041fc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 800460c:	4a03      	ldr	r2, [pc, #12]	; (800461c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev+0x2c>)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4618      	mov	r0, r3
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	08025268 	.word	0x08025268

08004620 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv>:
 8004620:	b590      	push	{r4, r7, lr}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	2243      	movs	r2, #67	; 0x43
 800462a:	4906      	ldr	r1, [pc, #24]	; (8004644 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv+0x24>)
 800462c:	2008      	movs	r0, #8
 800462e:	f003 ffdb 	bl	80085e8 <_ZnwjPKci>
 8004632:	4604      	mov	r4, r0
 8004634:	4620      	mov	r0, r4
 8004636:	f7ff ffdb 	bl	80045f0 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>
 800463a:	4623      	mov	r3, r4
 800463c:	4618      	mov	r0, r3
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	bd90      	pop	{r4, r7, pc}
 8004644:	080215cc 	.word	0x080215cc

08004648 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>:
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4618      	mov	r0, r3
 8004654:	f00c fbb6 	bl	8010dc4 <_ZN10UtestShellC1Ev>
 8004658:	4a03      	ldr	r2, [pc, #12]	; (8004668 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev+0x20>)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4618      	mov	r0, r3
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	080251bc 	.word	0x080251bc

0800466c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv>:
{
 800466c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800466e:	b089      	sub	sp, #36	; 0x24
 8004670:	af04      	add	r7, sp, #16
 8004672:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0xFF);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	21ff      	movs	r1, #255	; 0xff
 800467a:	4618      	mov	r0, r3
 800467c:	f7ff fb09 	bl	8003c92 <ringBuffer_push>
	uint8_t data = ringBuffer_pop(testBuf); // 0xFF
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff fb2e 	bl	8003ce6 <ringBuffer_pop>
 800468a:	4603      	mov	r3, r0
 800468c:	73fb      	strb	r3, [r7, #15]

	LONGS_EQUAL(0xFF,data);
 800468e:	f00d ff51 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 8004692:	4604      	mov	r4, r0
 8004694:	6823      	ldr	r3, [r4, #0]
 8004696:	3338      	adds	r3, #56	; 0x38
 8004698:	681d      	ldr	r5, [r3, #0]
 800469a:	7bfe      	ldrb	r6, [r7, #15]
 800469c:	f00d ff5a 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80046a0:	4603      	mov	r3, r0
 80046a2:	9302      	str	r3, [sp, #8]
 80046a4:	2348      	movs	r3, #72	; 0x48
 80046a6:	9301      	str	r3, [sp, #4]
 80046a8:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x54>)
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	4b05      	ldr	r3, [pc, #20]	; (80046c4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x58>)
 80046ae:	4632      	mov	r2, r6
 80046b0:	21ff      	movs	r1, #255	; 0xff
 80046b2:	4620      	mov	r0, r4
 80046b4:	47a8      	blx	r5

}
 80046b6:	bf00      	nop
 80046b8:	3714      	adds	r7, #20
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046be:	bf00      	nop
 80046c0:	080215cc 	.word	0x080215cc
 80046c4:	08021708 	.word	0x08021708

080046c8 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	605a      	str	r2, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4618      	mov	r0, r3
 80046e0:	f7ff fd8c 	bl	80041fc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80046e4:	4a03      	ldr	r2, [pc, #12]	; (80046f4 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev+0x2c>)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4618      	mov	r0, r3
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	0802519c 	.word	0x0802519c

080046f8 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv>:
 80046f8:	b590      	push	{r4, r7, lr}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	224c      	movs	r2, #76	; 0x4c
 8004702:	4906      	ldr	r1, [pc, #24]	; (800471c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv+0x24>)
 8004704:	2008      	movs	r0, #8
 8004706:	f003 ff6f 	bl	80085e8 <_ZnwjPKci>
 800470a:	4604      	mov	r4, r0
 800470c:	4620      	mov	r0, r4
 800470e:	f7ff ffdb 	bl	80046c8 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>
 8004712:	4623      	mov	r3, r4
 8004714:	4618      	mov	r0, r3
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	bd90      	pop	{r4, r7, pc}
 800471c:	080215cc 	.word	0x080215cc

08004720 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>:
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4618      	mov	r0, r3
 800472c:	f00c fb4a 	bl	8010dc4 <_ZN10UtestShellC1Ev>
 8004730:	4a03      	ldr	r2, [pc, #12]	; (8004740 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev+0x20>)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4618      	mov	r0, r3
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	080250f0 	.word	0x080250f0

08004744 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv>:
{
 8004744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004746:	b089      	sub	sp, #36	; 0x24
 8004748:	af04      	add	r7, sp, #16
 800474a:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 800474c:	2300      	movs	r3, #0
 800474e:	72fb      	strb	r3, [r7, #11]

	ringBuffer_push(testBuf, 0xAA);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	21aa      	movs	r1, #170	; 0xaa
 8004756:	4618      	mov	r0, r3
 8004758:	f7ff fa9b 	bl	8003c92 <ringBuffer_push>

	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	3b01      	subs	r3, #1
 8004772:	429a      	cmp	r2, r3
 8004774:	bf0c      	ite	eq
 8004776:	2301      	moveq	r3, #1
 8004778:	2300      	movne	r3, #0
 800477a:	b2db      	uxtb	r3, r3
 800477c:	461a      	mov	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4293      	cmp	r3, r2
 8004782:	da0a      	bge.n	800479a <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x56>
	{
		data = ringBuffer_pop(testBuf);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	4618      	mov	r0, r3
 800478a:	f7ff faac 	bl	8003ce6 <ringBuffer_pop>
 800478e:	4603      	mov	r3, r0
 8004790:	72fb      	strb	r3, [r7, #11]
	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	3301      	adds	r3, #1
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	e7e4      	b.n	8004764 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x20>
	}

	data = ringBuffer_pop(testBuf);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	4618      	mov	r0, r3
 80047a0:	f7ff faa1 	bl	8003ce6 <ringBuffer_pop>
 80047a4:	4603      	mov	r3, r0
 80047a6:	72fb      	strb	r3, [r7, #11]

	LONGS_EQUAL(0xAA,data);
 80047a8:	f00d fec4 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 80047ac:	4604      	mov	r4, r0
 80047ae:	6823      	ldr	r3, [r4, #0]
 80047b0:	3338      	adds	r3, #56	; 0x38
 80047b2:	681d      	ldr	r5, [r3, #0]
 80047b4:	7afe      	ldrb	r6, [r7, #11]
 80047b6:	f00d fecd 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80047ba:	4603      	mov	r3, r0
 80047bc:	9302      	str	r3, [sp, #8]
 80047be:	2359      	movs	r3, #89	; 0x59
 80047c0:	9301      	str	r3, [sp, #4]
 80047c2:	4b05      	ldr	r3, [pc, #20]	; (80047d8 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x94>)
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	4b05      	ldr	r3, [pc, #20]	; (80047dc <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x98>)
 80047c8:	4632      	mov	r2, r6
 80047ca:	21aa      	movs	r1, #170	; 0xaa
 80047cc:	4620      	mov	r0, r4
 80047ce:	47a8      	blx	r5
}
 80047d0:	bf00      	nop
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047d8:	080215cc 	.word	0x080215cc
 80047dc:	08021728 	.word	0x08021728

080047e0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferFlushTest)
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	605a      	str	r2, [r3, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7ff fd00 	bl	80041fc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80047fc:	4a03      	ldr	r2, [pc, #12]	; (800480c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev+0x2c>)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4618      	mov	r0, r3
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	080250d0 	.word	0x080250d0

08004810 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv>:
 8004810:	b590      	push	{r4, r7, lr}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	225c      	movs	r2, #92	; 0x5c
 800481a:	4906      	ldr	r1, [pc, #24]	; (8004834 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv+0x24>)
 800481c:	2008      	movs	r0, #8
 800481e:	f003 fee3 	bl	80085e8 <_ZnwjPKci>
 8004822:	4604      	mov	r4, r0
 8004824:	4620      	mov	r0, r4
 8004826:	f7ff ffdb 	bl	80047e0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>
 800482a:	4623      	mov	r3, r4
 800482c:	4618      	mov	r0, r3
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	bd90      	pop	{r4, r7, pc}
 8004834:	080215cc 	.word	0x080215cc

08004838 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>:
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4618      	mov	r0, r3
 8004844:	f00c fabe 	bl	8010dc4 <_ZN10UtestShellC1Ev>
 8004848:	4a03      	ldr	r2, [pc, #12]	; (8004858 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev+0x20>)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4618      	mov	r0, r3
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	08025024 	.word	0x08025024

0800485c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv>:
{
 800485c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800485e:	b089      	sub	sp, #36	; 0x24
 8004860:	af04      	add	r7, sp, #16
 8004862:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004864:	2300      	movs	r3, #0
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	429a      	cmp	r2, r3
 8004872:	d20b      	bcs.n	800488c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0x30>
	{
		ringBuffer_push(testBuf,(uint8_t)i);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	b2d2      	uxtb	r2, r2
 800487c:	4611      	mov	r1, r2
 800487e:	4618      	mov	r0, r3
 8004880:	f7ff fa07 	bl	8003c92 <ringBuffer_push>
	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	3301      	adds	r3, #1
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	e7ed      	b.n	8004868 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xc>
	}
	LONGS_EQUAL(49,testBuf->buffer[testBuf->size - 1]);
 800488c:	f00d fe52 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 8004890:	4604      	mov	r4, r0
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	3338      	adds	r3, #56	; 0x38
 8004896:	681d      	ldr	r5, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	3b01      	subs	r3, #1
 80048a6:	4413      	add	r3, r2
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	461e      	mov	r6, r3
 80048ac:	f00d fe52 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80048b0:	4603      	mov	r3, r0
 80048b2:	9302      	str	r3, [sp, #8]
 80048b4:	2363      	movs	r3, #99	; 0x63
 80048b6:	9301      	str	r3, [sp, #4]
 80048b8:	4b24      	ldr	r3, [pc, #144]	; (800494c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	4b24      	ldr	r3, [pc, #144]	; (8004950 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf4>)
 80048be:	4632      	mov	r2, r6
 80048c0:	2131      	movs	r1, #49	; 0x31
 80048c2:	4620      	mov	r0, r4
 80048c4:	47a8      	blx	r5

	ringBuffer_flush(testBuf);  // clear the buffer
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7ff fa35 	bl	8003d3a <ringBuffer_flush>

	LONGS_EQUAL(0,testBuf->buffer[testBuf->size - 1]);
 80048d0:	f00d fe30 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 80048d4:	4604      	mov	r4, r0
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	3338      	adds	r3, #56	; 0x38
 80048da:	681d      	ldr	r5, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	3b01      	subs	r3, #1
 80048ea:	4413      	add	r3, r2
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	461e      	mov	r6, r3
 80048f0:	f00d fe30 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80048f4:	4603      	mov	r3, r0
 80048f6:	9302      	str	r3, [sp, #8]
 80048f8:	2367      	movs	r3, #103	; 0x67
 80048fa:	9301      	str	r3, [sp, #4]
 80048fc:	4b13      	ldr	r3, [pc, #76]	; (800494c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	4b14      	ldr	r3, [pc, #80]	; (8004954 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf8>)
 8004902:	4632      	mov	r2, r6
 8004904:	2100      	movs	r1, #0
 8004906:	4620      	mov	r0, r4
 8004908:	47a8      	blx	r5
	LONGS_EQUAL(0,testBuf->buffer[testBuf->size/2]);    // check random value  (buffer[25]);
 800490a:	f00d fe13 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 800490e:	4604      	mov	r4, r0
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	3338      	adds	r3, #56	; 0x38
 8004914:	681d      	ldr	r5, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	68da      	ldr	r2, [r3, #12]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	085b      	lsrs	r3, r3, #1
 8004924:	4413      	add	r3, r2
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	461e      	mov	r6, r3
 800492a:	f00d fe13 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800492e:	4603      	mov	r3, r0
 8004930:	9302      	str	r3, [sp, #8]
 8004932:	2368      	movs	r3, #104	; 0x68
 8004934:	9301      	str	r3, [sp, #4]
 8004936:	4b05      	ldr	r3, [pc, #20]	; (800494c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	4b07      	ldr	r3, [pc, #28]	; (8004958 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xfc>)
 800493c:	4632      	mov	r2, r6
 800493e:	2100      	movs	r1, #0
 8004940:	4620      	mov	r0, r4
 8004942:	47a8      	blx	r5
//	for(uint32_t i = 0;i < testBuf->size;i++)  // check all elements of the buffer
//	{
//		LONGS_EQUAL(0,testBuf->buffer[i]);
//	}

}
 8004944:	bf00      	nop
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800494c:	080215cc 	.word	0x080215cc
 8004950:	08021748 	.word	0x08021748
 8004954:	08021784 	.word	0x08021784
 8004958:	080217c0 	.word	0x080217c0

0800495c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushArrayTest)
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	605a      	str	r2, [r3, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4618      	mov	r0, r3
 8004974:	f7ff fc42 	bl	80041fc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004978:	4a03      	ldr	r2, [pc, #12]	; (8004988 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev+0x2c>)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4618      	mov	r0, r3
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	08025004 	.word	0x08025004

0800498c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv>:
 800498c:	b590      	push	{r4, r7, lr}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	2271      	movs	r2, #113	; 0x71
 8004996:	4906      	ldr	r1, [pc, #24]	; (80049b0 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv+0x24>)
 8004998:	2008      	movs	r0, #8
 800499a:	f003 fe25 	bl	80085e8 <_ZnwjPKci>
 800499e:	4604      	mov	r4, r0
 80049a0:	4620      	mov	r0, r4
 80049a2:	f7ff ffdb 	bl	800495c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>
 80049a6:	4623      	mov	r3, r4
 80049a8:	4618      	mov	r0, r3
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd90      	pop	{r4, r7, pc}
 80049b0:	080215cc 	.word	0x080215cc

080049b4 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>:
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4618      	mov	r0, r3
 80049c0:	f00c fa00 	bl	8010dc4 <_ZN10UtestShellC1Ev>
 80049c4:	4a03      	ldr	r2, [pc, #12]	; (80049d4 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev+0x20>)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4618      	mov	r0, r3
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	08024f58 	.word	0x08024f58

080049d8 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv>:
{
 80049d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049da:	b087      	sub	sp, #28
 80049dc:	af04      	add	r7, sp, #16
 80049de:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Test");
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	490e      	ldr	r1, [pc, #56]	; (8004a20 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7ff f9b7 	bl	8003d5a <ringBuffer_pushArray>

	STRCMP_EQUAL("Test",(char*)testBuf->buffer);
 80049ec:	f00d fda2 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 80049f0:	4604      	mov	r4, r0
 80049f2:	6823      	ldr	r3, [r4, #0]
 80049f4:	3324      	adds	r3, #36	; 0x24
 80049f6:	681d      	ldr	r5, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	68de      	ldr	r6, [r3, #12]
 80049fe:	f00d fda9 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004a02:	4603      	mov	r3, r0
 8004a04:	9302      	str	r3, [sp, #8]
 8004a06:	2375      	movs	r3, #117	; 0x75
 8004a08:	9301      	str	r3, [sp, #4]
 8004a0a:	4b06      	ldr	r3, [pc, #24]	; (8004a24 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x4c>)
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	2300      	movs	r3, #0
 8004a10:	4632      	mov	r2, r6
 8004a12:	4903      	ldr	r1, [pc, #12]	; (8004a20 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004a14:	4620      	mov	r0, r4
 8004a16:	47a8      	blx	r5
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a20:	080217f8 	.word	0x080217f8
 8004a24:	080215cc 	.word	0x080215cc

08004a28 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, LookForTest)
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	605a      	str	r2, [r3, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7ff fbdc 	bl	80041fc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004a44:	4a03      	ldr	r2, [pc, #12]	; (8004a54 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev+0x2c>)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	08024f38 	.word	0x08024f38

08004a58 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv>:
 8004a58:	b590      	push	{r4, r7, lr}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	2278      	movs	r2, #120	; 0x78
 8004a62:	4906      	ldr	r1, [pc, #24]	; (8004a7c <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv+0x24>)
 8004a64:	2008      	movs	r0, #8
 8004a66:	f003 fdbf 	bl	80085e8 <_ZnwjPKci>
 8004a6a:	4604      	mov	r4, r0
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	f7ff ffdb 	bl	8004a28 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>
 8004a72:	4623      	mov	r3, r4
 8004a74:	4618      	mov	r0, r3
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd90      	pop	{r4, r7, pc}
 8004a7c:	080215cc 	.word	0x080215cc

08004a80 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>:
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f00c f99a 	bl	8010dc4 <_ZN10UtestShellC1Ev>
 8004a90:	4a03      	ldr	r2, [pc, #12]	; (8004aa0 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev+0x20>)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3708      	adds	r7, #8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	08024e8c 	.word	0x08024e8c

08004aa4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv>:
{
 8004aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aa8:	b08a      	sub	sp, #40	; 0x28
 8004aaa:	af04      	add	r7, sp, #16
 8004aac:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Hello World");
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	494e      	ldr	r1, [pc, #312]	; (8004bec <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7ff f950 	bl	8003d5a <ringBuffer_pushArray>

	STRCMP_EQUAL("Hello World",(char*)testBuf->buffer);
 8004aba:	f00d fd3b 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 8004abe:	4604      	mov	r4, r0
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	3324      	adds	r3, #36	; 0x24
 8004ac4:	681d      	ldr	r5, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	68de      	ldr	r6, [r3, #12]
 8004acc:	f00d fd42 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	9302      	str	r3, [sp, #8]
 8004ad4:	237c      	movs	r3, #124	; 0x7c
 8004ad6:	9301      	str	r3, [sp, #4]
 8004ad8:	4b45      	ldr	r3, [pc, #276]	; (8004bf0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	2300      	movs	r3, #0
 8004ade:	4632      	mov	r2, r6
 8004ae0:	4942      	ldr	r1, [pc, #264]	; (8004bec <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	47a8      	blx	r5
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	4942      	ldr	r1, [pc, #264]	; (8004bf4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7ff f953 	bl	8003d98 <ringBuffer_lookFor>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	bf14      	ite	ne
 8004af8:	2301      	movne	r3, #1
 8004afa:	2300      	moveq	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d05c      	beq.n	8004bbc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x118>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	493b      	ldr	r1, [pc, #236]	; (8004bf4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7ff f945 	bl	8003d98 <ringBuffer_lookFor>
 8004b0e:	4604      	mov	r4, r0
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	4937      	ldr	r1, [pc, #220]	; (8004bf4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff f93e 	bl	8003d98 <ringBuffer_lookFor>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	429c      	cmp	r4, r3
 8004b20:	bf14      	ite	ne
 8004b22:	2301      	movne	r3, #1
 8004b24:	2300      	moveq	r3, #0
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d008      	beq.n	8004b3e <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x9a>
 8004b2c:	f00d fd02 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 8004b30:	6803      	ldr	r3, [r0, #0]
 8004b32:	3370      	adds	r3, #112	; 0x70
 8004b34:	681c      	ldr	r4, [r3, #0]
 8004b36:	237d      	movs	r3, #125	; 0x7d
 8004b38:	4a2d      	ldr	r2, [pc, #180]	; (8004bf0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004b3a:	492f      	ldr	r1, [pc, #188]	; (8004bf8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x154>)
 8004b3c:	47a0      	blx	r4
 8004b3e:	f00d fcf9 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 8004b42:	4604      	mov	r4, r0
 8004b44:	6823      	ldr	r3, [r4, #0]
 8004b46:	3358      	adds	r3, #88	; 0x58
 8004b48:	681d      	ldr	r5, [r3, #0]
 8004b4a:	f107 0308 	add.w	r3, r7, #8
 8004b4e:	2101      	movs	r1, #1
 8004b50:	4618      	mov	r0, r3
 8004b52:	f006 ff8b 	bl	800ba6c <_Z10StringFromi>
 8004b56:	f107 0308 	add.w	r3, r7, #8
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f006 fc92 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 8004b60:	4606      	mov	r6, r0
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	4923      	ldr	r1, [pc, #140]	; (8004bf4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7ff f915 	bl	8003d98 <ringBuffer_lookFor>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	f107 0310 	add.w	r3, r7, #16
 8004b74:	4611      	mov	r1, r2
 8004b76:	4618      	mov	r0, r3
 8004b78:	f007 f9f2 	bl	800bf60 <_Z10StringFromm>
 8004b7c:	f107 0310 	add.w	r3, r7, #16
 8004b80:	4618      	mov	r0, r3
 8004b82:	f006 fc7f 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 8004b86:	4680      	mov	r8, r0
 8004b88:	f00d fce4 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	9303      	str	r3, [sp, #12]
 8004b90:	237d      	movs	r3, #125	; 0x7d
 8004b92:	9302      	str	r3, [sp, #8]
 8004b94:	4b16      	ldr	r3, [pc, #88]	; (8004bf0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004b96:	9301      	str	r3, [sp, #4]
 8004b98:	2300      	movs	r3, #0
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	4643      	mov	r3, r8
 8004b9e:	4632      	mov	r2, r6
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	47a8      	blx	r5
 8004ba6:	f107 0310 	add.w	r3, r7, #16
 8004baa:	4618      	mov	r0, r3
 8004bac:	f006 fc97 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8004bb0:	f107 0308 	add.w	r3, r7, #8
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f006 fc92 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 8004bba:	e012      	b.n	8004be2 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x13e>
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004bbc:	f00d fcba 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 8004bc0:	4604      	mov	r4, r0
 8004bc2:	6823      	ldr	r3, [r4, #0]
 8004bc4:	3338      	adds	r3, #56	; 0x38
 8004bc6:	681d      	ldr	r5, [r3, #0]
 8004bc8:	f00d fcc4 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	9302      	str	r3, [sp, #8]
 8004bd0:	237d      	movs	r3, #125	; 0x7d
 8004bd2:	9301      	str	r3, [sp, #4]
 8004bd4:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	2300      	movs	r3, #0
 8004bda:	2200      	movs	r2, #0
 8004bdc:	2100      	movs	r1, #0
 8004bde:	4620      	mov	r0, r4
 8004be0:	47a8      	blx	r5
}
 8004be2:	bf00      	nop
 8004be4:	3718      	adds	r7, #24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bec:	08021800 	.word	0x08021800
 8004bf0:	080215cc 	.word	0x080215cc
 8004bf4:	0802180c 	.word	0x0802180c
 8004bf8:	08021814 	.word	0x08021814

08004bfc <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, CapacityTest)
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	605a      	str	r2, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff faf2 	bl	80041fc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004c18:	4a03      	ldr	r2, [pc, #12]	; (8004c28 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev+0x2c>)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	601a      	str	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4618      	mov	r0, r3
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	08024e6c 	.word	0x08024e6c

08004c2c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv>:
 8004c2c:	b590      	push	{r4, r7, lr}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	2280      	movs	r2, #128	; 0x80
 8004c36:	4906      	ldr	r1, [pc, #24]	; (8004c50 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv+0x24>)
 8004c38:	2008      	movs	r0, #8
 8004c3a:	f003 fcd5 	bl	80085e8 <_ZnwjPKci>
 8004c3e:	4604      	mov	r4, r0
 8004c40:	4620      	mov	r0, r4
 8004c42:	f7ff ffdb 	bl	8004bfc <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>
 8004c46:	4623      	mov	r3, r4
 8004c48:	4618      	mov	r0, r3
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd90      	pop	{r4, r7, pc}
 8004c50:	080215cc 	.word	0x080215cc

08004c54 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>:
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f00c f8b0 	bl	8010dc4 <_ZN10UtestShellC1Ev>
 8004c64:	4a03      	ldr	r2, [pc, #12]	; (8004c74 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev+0x20>)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	08024dc0 	.word	0x08024dc0

08004c78 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv>:
{
 8004c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c7a:	b087      	sub	sp, #28
 8004c7c:	af04      	add	r7, sp, #16
 8004c7e:	6078      	str	r0, [r7, #4]

	LONGS_EQUAL(50,ringBuffer_capacity(testBuf));
 8004c80:	f00d fc58 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 8004c84:	4604      	mov	r4, r0
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	3338      	adds	r3, #56	; 0x38
 8004c8a:	681d      	ldr	r5, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7ff f897 	bl	8003dc4 <ringBuffer_capacity>
 8004c96:	4603      	mov	r3, r0
 8004c98:	461e      	mov	r6, r3
 8004c9a:	f00d fc5b 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	9302      	str	r3, [sp, #8]
 8004ca2:	2383      	movs	r3, #131	; 0x83
 8004ca4:	9301      	str	r3, [sp, #4]
 8004ca6:	4b05      	ldr	r3, [pc, #20]	; (8004cbc <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x44>)
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	4b05      	ldr	r3, [pc, #20]	; (8004cc0 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x48>)
 8004cac:	4632      	mov	r2, r6
 8004cae:	2132      	movs	r1, #50	; 0x32
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	47a8      	blx	r5

}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cbc:	080215cc 	.word	0x080215cc
 8004cc0:	080218b8 	.word	0x080218b8

08004cc4 <_Z18UART_Transmit_FakePh>:

//char TxString[50];

void UART_Transmit_Fake(uint8_t* data)
{
 8004cc4:	b5b0      	push	{r4, r5, r7, lr}
 8004cc6:	b088      	sub	sp, #32
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
	mock().actualCall("UART_Transmit_Fake").withParameter("data", data);
 8004ccc:	f107 0308 	add.w	r3, r7, #8
 8004cd0:	491c      	ldr	r1, [pc, #112]	; (8004d44 <_Z18UART_Transmit_FakePh+0x80>)
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f006 f84b 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8004cd8:	f107 0308 	add.w	r3, r7, #8
 8004cdc:	2100      	movs	r1, #0
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f004 f91e 	bl	8008f20 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004ce4:	4604      	mov	r4, r0
 8004ce6:	6823      	ldr	r3, [r4, #0]
 8004ce8:	3318      	adds	r3, #24
 8004cea:	681d      	ldr	r5, [r3, #0]
 8004cec:	f107 0310 	add.w	r3, r7, #16
 8004cf0:	4915      	ldr	r1, [pc, #84]	; (8004d48 <_Z18UART_Transmit_FakePh+0x84>)
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f006 f83b 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8004cf8:	f107 0310 	add.w	r3, r7, #16
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	4620      	mov	r0, r4
 8004d00:	47a8      	blx	r5
 8004d02:	4604      	mov	r4, r0
 8004d04:	f107 0318 	add.w	r3, r7, #24
 8004d08:	4910      	ldr	r1, [pc, #64]	; (8004d4c <_Z18UART_Transmit_FakePh+0x88>)
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f006 f82f 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8004d10:	f107 0318 	add.w	r3, r7, #24
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	4619      	mov	r1, r3
 8004d18:	4620      	mov	r0, r4
 8004d1a:	f7ff fa2e 	bl	800417a <_ZN14MockActualCall13withParameterERK12SimpleStringPv>
 8004d1e:	f107 0318 	add.w	r3, r7, #24
 8004d22:	4618      	mov	r0, r3
 8004d24:	f006 fbdb 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8004d28:	f107 0310 	add.w	r3, r7, #16
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f006 fbd6 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8004d32:	f107 0308 	add.w	r3, r7, #8
 8004d36:	4618      	mov	r0, r3
 8004d38:	f006 fbd1 	bl	800b4de <_ZN12SimpleStringD1Ev>
	//memcpy(TxString,data,sizeof(data));
}
 8004d3c:	bf00      	nop
 8004d3e:	3720      	adds	r7, #32
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bdb0      	pop	{r4, r5, r7, pc}
 8004d44:	080218f0 	.word	0x080218f0
 8004d48:	080218f4 	.word	0x080218f4
 8004d4c:	08021908 	.word	0x08021908

08004d50 <_Z17UART_Receive_Fakev>:
uint8_t UART_Receive_Fake(void)
{
 8004d50:	b5b0      	push	{r4, r5, r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0

	return mock().actualCall("UART_Receive_Fake").returnIntValue();
 8004d56:	463b      	mov	r3, r7
 8004d58:	4916      	ldr	r1, [pc, #88]	; (8004db4 <_Z17UART_Receive_Fakev+0x64>)
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f006 f807 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8004d60:	463b      	mov	r3, r7
 8004d62:	2100      	movs	r1, #0
 8004d64:	4618      	mov	r0, r3
 8004d66:	f004 f8db 	bl	8008f20 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004d6a:	4604      	mov	r4, r0
 8004d6c:	6823      	ldr	r3, [r4, #0]
 8004d6e:	3318      	adds	r3, #24
 8004d70:	681d      	ldr	r5, [r3, #0]
 8004d72:	f107 0308 	add.w	r3, r7, #8
 8004d76:	4910      	ldr	r1, [pc, #64]	; (8004db8 <_Z17UART_Receive_Fakev+0x68>)
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f005 fff8 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8004d7e:	f107 0308 	add.w	r3, r7, #8
 8004d82:	4619      	mov	r1, r3
 8004d84:	4620      	mov	r0, r4
 8004d86:	47a8      	blx	r5
 8004d88:	4603      	mov	r3, r0
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	3264      	adds	r2, #100	; 0x64
 8004d8e:	6812      	ldr	r2, [r2, #0]
 8004d90:	4618      	mov	r0, r3
 8004d92:	4790      	blx	r2
 8004d94:	4603      	mov	r3, r0
 8004d96:	b2dc      	uxtb	r4, r3
 8004d98:	f107 0308 	add.w	r3, r7, #8
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f006 fb9e 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8004da2:	463b      	mov	r3, r7
 8004da4:	4618      	mov	r0, r3
 8004da6:	f006 fb9a 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8004daa:	4623      	mov	r3, r4
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bdb0      	pop	{r4, r5, r7, pc}
 8004db4:	080218f0 	.word	0x080218f0
 8004db8:	08021910 	.word	0x08021910

08004dbc <_Z12getTick_Fakev>:

uint32_t time=0;

uint32_t getTick_Fake(void)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
	if(time == 0xFFFFFFFF)
 8004dc0:	4b0a      	ldr	r3, [pc, #40]	; (8004dec <_Z12getTick_Fakev+0x30>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc8:	d103      	bne.n	8004dd2 <_Z12getTick_Fakev+0x16>
		time = 0;
 8004dca:	4b08      	ldr	r3, [pc, #32]	; (8004dec <_Z12getTick_Fakev+0x30>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	e004      	b.n	8004ddc <_Z12getTick_Fakev+0x20>
	else
		time += 1;
 8004dd2:	4b06      	ldr	r3, [pc, #24]	; (8004dec <_Z12getTick_Fakev+0x30>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	4a04      	ldr	r2, [pc, #16]	; (8004dec <_Z12getTick_Fakev+0x30>)
 8004dda:	6013      	str	r3, [r2, #0]
	return time;
 8004ddc:	4b03      	ldr	r3, [pc, #12]	; (8004dec <_Z12getTick_Fakev+0x30>)
 8004dde:	681b      	ldr	r3, [r3, #0]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	200005bc 	.word	0x200005bc

08004df0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv>:
TEST_GROUP(EspDriver_Test_Group)
{



	void setup()
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
	{
		ESP_Init(UART_Transmit_Fake,
 8004df8:	2364      	movs	r3, #100	; 0x64
 8004dfa:	4a04      	ldr	r2, [pc, #16]	; (8004e0c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x1c>)
 8004dfc:	4904      	ldr	r1, [pc, #16]	; (8004e10 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x20>)
 8004dfe:	4805      	ldr	r0, [pc, #20]	; (8004e14 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x24>)
 8004e00:	f7fe fd82 	bl	8003908 <ESP_Init>
				  UART_Receive_Fake,
				  getTick_Fake,
				  100);

	}
 8004e04:	bf00      	nop
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	08004dbd 	.word	0x08004dbd
 8004e10:	08004d51 	.word	0x08004d51
 8004e14:	08004cc5 	.word	0x08004cc5

08004e18 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv>:

	void teardown()
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
	{

		mock().clear();
 8004e20:	f107 0308 	add.w	r3, r7, #8
 8004e24:	490c      	ldr	r1, [pc, #48]	; (8004e58 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x40>)
 8004e26:	4618      	mov	r0, r3
 8004e28:	f005 ffa1 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8004e2c:	f107 0308 	add.w	r3, r7, #8
 8004e30:	2100      	movs	r1, #0
 8004e32:	4618      	mov	r0, r3
 8004e34:	f004 f874 	bl	8008f20 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	329c      	adds	r2, #156	; 0x9c
 8004e3e:	6812      	ldr	r2, [r2, #0]
 8004e40:	4618      	mov	r0, r3
 8004e42:	4790      	blx	r2
 8004e44:	f107 0308 	add.w	r3, r7, #8
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f006 fb48 	bl	800b4de <_ZN12SimpleStringD1Ev>
	}
 8004e4e:	bf00      	nop
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	080218f0 	.word	0x080218f0

08004e5c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>:
TEST_GROUP(EspDriver_Test_Group)
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f00d fb8e 	bl	8012588 <_ZN5UtestC1Ev>
 8004e6c:	4a03      	ldr	r2, [pc, #12]	; (8004e7c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev+0x20>)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4618      	mov	r0, r3
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	08024da0 	.word	0x08024da0

08004e80 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>:
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	4a05      	ldr	r2, [pc, #20]	; (8004ea0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev+0x20>)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f00d fb89 	bl	80125a8 <_ZN5UtestD1Ev>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3708      	adds	r7, #8
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	08024da0 	.word	0x08024da0

08004ea4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD0Ev>:
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7ff ffe7 	bl	8004e80 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8004eb2:	2104      	movs	r1, #4
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f003 fbab 	bl	8008610 <_ZdlPvj>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3708      	adds	r7, #8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>:


};

TEST(EspDriver_Test_Group, Esp_Init_Test)
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7ff ffc4 	bl	8004e5c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8004ed4:	4a03      	ldr	r2, [pc, #12]	; (8004ee4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev+0x20>)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4618      	mov	r0, r3
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	08024d80 	.word	0x08024d80

08004ee8 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv>:
 8004ee8:	b590      	push	{r4, r7, lr}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	22b8      	movs	r2, #184	; 0xb8
 8004ef2:	4906      	ldr	r1, [pc, #24]	; (8004f0c <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv+0x24>)
 8004ef4:	2004      	movs	r0, #4
 8004ef6:	f003 fb77 	bl	80085e8 <_ZnwjPKci>
 8004efa:	4604      	mov	r4, r0
 8004efc:	4620      	mov	r0, r4
 8004efe:	f7ff ffe1 	bl	8004ec4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>
 8004f02:	4623      	mov	r3, r4
 8004f04:	4618      	mov	r0, r3
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd90      	pop	{r4, r7, pc}
 8004f0c:	080215cc 	.word	0x080215cc

08004f10 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>:
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f00b ff52 	bl	8010dc4 <_ZN10UtestShellC1Ev>
 8004f20:	4a03      	ldr	r2, [pc, #12]	; (8004f30 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev+0x20>)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3708      	adds	r7, #8
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	08024cd4 	.word	0x08024cd4

08004f34 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv>:
{
 8004f34:	b5b0      	push	{r4, r5, r7, lr}
 8004f36:	b088      	sub	sp, #32
 8004f38:	af04      	add	r7, sp, #16
 8004f3a:	6078      	str	r0, [r7, #4]

	transmit = UART_Transmit_Fake; // or you can pass UART_Transmit_Fake as a parameter to the function instead of transmit.
 8004f3c:	4b10      	ldr	r3, [pc, #64]	; (8004f80 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 8004f3e:	4a11      	ldr	r2, [pc, #68]	; (8004f84 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x50>)
 8004f40:	601a      	str	r2, [r3, #0]
	int result = ESP_Init(transmit,
 8004f42:	4b0f      	ldr	r3, [pc, #60]	; (8004f80 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 8004f44:	6818      	ldr	r0, [r3, #0]
 8004f46:	2364      	movs	r3, #100	; 0x64
 8004f48:	4a0f      	ldr	r2, [pc, #60]	; (8004f88 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x54>)
 8004f4a:	4910      	ldr	r1, [pc, #64]	; (8004f8c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x58>)
 8004f4c:	f7fe fcdc 	bl	8003908 <ESP_Init>
 8004f50:	60f8      	str	r0, [r7, #12]
//	int result = ESP_Init(UART_Transmit_Fake,
//						  UART_Receive_Fake,
//						  getTick_Fake,
//	  	  	  	  	  	  100);

	LONGS_EQUAL(1,result);
 8004f52:	f00d faef 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 8004f56:	4604      	mov	r4, r0
 8004f58:	6823      	ldr	r3, [r4, #0]
 8004f5a:	3338      	adds	r3, #56	; 0x38
 8004f5c:	681d      	ldr	r5, [r3, #0]
 8004f5e:	f00d faf9 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004f62:	4603      	mov	r3, r0
 8004f64:	9302      	str	r3, [sp, #8]
 8004f66:	23c6      	movs	r3, #198	; 0xc6
 8004f68:	9301      	str	r3, [sp, #4]
 8004f6a:	4b09      	ldr	r3, [pc, #36]	; (8004f90 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x5c>)
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	4b09      	ldr	r3, [pc, #36]	; (8004f94 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x60>)
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	2101      	movs	r1, #1
 8004f74:	4620      	mov	r0, r4
 8004f76:	47a8      	blx	r5

}
 8004f78:	bf00      	nop
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bdb0      	pop	{r4, r5, r7, pc}
 8004f80:	200005c0 	.word	0x200005c0
 8004f84:	08004cc5 	.word	0x08004cc5
 8004f88:	08004dbd 	.word	0x08004dbd
 8004f8c:	08004d51 	.word	0x08004d51
 8004f90:	080215cc 	.word	0x080215cc
 8004f94:	08021924 	.word	0x08021924

08004f98 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7ff ff5a 	bl	8004e5c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8004fa8:	4a03      	ldr	r2, [pc, #12]	; (8004fb8 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev+0x20>)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	08024cb4 	.word	0x08024cb4

08004fbc <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv>:
 8004fbc:	b590      	push	{r4, r7, lr}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	22ca      	movs	r2, #202	; 0xca
 8004fc6:	4906      	ldr	r1, [pc, #24]	; (8004fe0 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv+0x24>)
 8004fc8:	2004      	movs	r0, #4
 8004fca:	f003 fb0d 	bl	80085e8 <_ZnwjPKci>
 8004fce:	4604      	mov	r4, r0
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	f7ff ffe1 	bl	8004f98 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>
 8004fd6:	4623      	mov	r3, r4
 8004fd8:	4618      	mov	r0, r3
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd90      	pop	{r4, r7, pc}
 8004fe0:	080215cc 	.word	0x080215cc

08004fe4 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>:
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f00b fee8 	bl	8010dc4 <_ZN10UtestShellC1Ev>
 8004ff4:	4a03      	ldr	r2, [pc, #12]	; (8005004 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev+0x20>)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	601a      	str	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	08024c08 	.word	0x08024c08

08005008 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv>:
{
 8005008:	b5b0      	push	{r4, r5, r7, lr}
 800500a:	b090      	sub	sp, #64	; 0x40
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
	mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t *)"Test");
 8005010:	f107 0308 	add.w	r3, r7, #8
 8005014:	4947      	ldr	r1, [pc, #284]	; (8005134 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x12c>)
 8005016:	4618      	mov	r0, r3
 8005018:	f005 fea9 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800501c:	f107 0308 	add.w	r3, r7, #8
 8005020:	2100      	movs	r1, #0
 8005022:	4618      	mov	r0, r3
 8005024:	f003 ff7c 	bl	8008f20 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005028:	4604      	mov	r4, r0
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	330c      	adds	r3, #12
 800502e:	681d      	ldr	r5, [r3, #0]
 8005030:	f107 0310 	add.w	r3, r7, #16
 8005034:	4940      	ldr	r1, [pc, #256]	; (8005138 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x130>)
 8005036:	4618      	mov	r0, r3
 8005038:	f005 fe99 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800503c:	f107 0310 	add.w	r3, r7, #16
 8005040:	4619      	mov	r1, r3
 8005042:	4620      	mov	r0, r4
 8005044:	47a8      	blx	r5
 8005046:	4604      	mov	r4, r0
 8005048:	f107 0318 	add.w	r3, r7, #24
 800504c:	493b      	ldr	r1, [pc, #236]	; (800513c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x134>)
 800504e:	4618      	mov	r0, r3
 8005050:	f005 fe8d 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8005054:	f107 0318 	add.w	r3, r7, #24
 8005058:	4a39      	ldr	r2, [pc, #228]	; (8005140 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x138>)
 800505a:	4619      	mov	r1, r3
 800505c:	4620      	mov	r0, r4
 800505e:	f7ff f89f 	bl	80041a0 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPv>
 8005062:	f107 0318 	add.w	r3, r7, #24
 8005066:	4618      	mov	r0, r3
 8005068:	f006 fa39 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800506c:	f107 0310 	add.w	r3, r7, #16
 8005070:	4618      	mov	r0, r3
 8005072:	f006 fa34 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8005076:	f107 0308 	add.w	r3, r7, #8
 800507a:	4618      	mov	r0, r3
 800507c:	f006 fa2f 	bl	800b4de <_ZN12SimpleStringD1Ev>
	Send_AT_Command((char*)"Test");
 8005080:	482f      	ldr	r0, [pc, #188]	; (8005140 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x138>)
 8005082:	f7fe fc6d 	bl	8003960 <Send_AT_Command>
	//STRCMP_EQUAL("Test",TxString);
	mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t *)"AT\r\n");
 8005086:	f107 0320 	add.w	r3, r7, #32
 800508a:	492a      	ldr	r1, [pc, #168]	; (8005134 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x12c>)
 800508c:	4618      	mov	r0, r3
 800508e:	f005 fe6e 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8005092:	f107 0320 	add.w	r3, r7, #32
 8005096:	2100      	movs	r1, #0
 8005098:	4618      	mov	r0, r3
 800509a:	f003 ff41 	bl	8008f20 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800509e:	4604      	mov	r4, r0
 80050a0:	6823      	ldr	r3, [r4, #0]
 80050a2:	330c      	adds	r3, #12
 80050a4:	681d      	ldr	r5, [r3, #0]
 80050a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050aa:	4923      	ldr	r1, [pc, #140]	; (8005138 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x130>)
 80050ac:	4618      	mov	r0, r3
 80050ae:	f005 fe5e 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80050b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050b6:	4619      	mov	r1, r3
 80050b8:	4620      	mov	r0, r4
 80050ba:	47a8      	blx	r5
 80050bc:	4604      	mov	r4, r0
 80050be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80050c2:	491e      	ldr	r1, [pc, #120]	; (800513c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x134>)
 80050c4:	4618      	mov	r0, r3
 80050c6:	f005 fe52 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80050ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80050ce:	4a1d      	ldr	r2, [pc, #116]	; (8005144 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x13c>)
 80050d0:	4619      	mov	r1, r3
 80050d2:	4620      	mov	r0, r4
 80050d4:	f7ff f864 	bl	80041a0 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPv>
 80050d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80050dc:	4618      	mov	r0, r3
 80050de:	f006 f9fe 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80050e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050e6:	4618      	mov	r0, r3
 80050e8:	f006 f9f9 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80050ec:	f107 0320 	add.w	r3, r7, #32
 80050f0:	4618      	mov	r0, r3
 80050f2:	f006 f9f4 	bl	800b4de <_ZN12SimpleStringD1Ev>
	Send_AT_Command((char*)"AT\r\n");
 80050f6:	4813      	ldr	r0, [pc, #76]	; (8005144 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x13c>)
 80050f8:	f7fe fc32 	bl	8003960 <Send_AT_Command>
	mock().checkExpectations();
 80050fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005100:	490c      	ldr	r1, [pc, #48]	; (8005134 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x12c>)
 8005102:	4618      	mov	r0, r3
 8005104:	f005 fe33 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8005108:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800510c:	2100      	movs	r1, #0
 800510e:	4618      	mov	r0, r3
 8005110:	f003 ff06 	bl	8008f20 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005114:	4603      	mov	r3, r0
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	3294      	adds	r2, #148	; 0x94
 800511a:	6812      	ldr	r2, [r2, #0]
 800511c:	4618      	mov	r0, r3
 800511e:	4790      	blx	r2
 8005120:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005124:	4618      	mov	r0, r3
 8005126:	f006 f9da 	bl	800b4de <_ZN12SimpleStringD1Ev>

}
 800512a:	bf00      	nop
 800512c:	3740      	adds	r7, #64	; 0x40
 800512e:	46bd      	mov	sp, r7
 8005130:	bdb0      	pop	{r4, r5, r7, pc}
 8005132:	bf00      	nop
 8005134:	080218f0 	.word	0x080218f0
 8005138:	080218f4 	.word	0x080218f4
 800513c:	08021908 	.word	0x08021908
 8005140:	080217f8 	.word	0x080217f8
 8005144:	08021944 	.word	0x08021944

08005148 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4618      	mov	r0, r3
 8005154:	f7ff fe82 	bl	8004e5c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005158:	4a03      	ldr	r2, [pc, #12]	; (8005168 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev+0x20>)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4618      	mov	r0, r3
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	08024be8 	.word	0x08024be8

0800516c <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv>:
 800516c:	b590      	push	{r4, r7, lr}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	22d5      	movs	r2, #213	; 0xd5
 8005176:	4906      	ldr	r1, [pc, #24]	; (8005190 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv+0x24>)
 8005178:	2004      	movs	r0, #4
 800517a:	f003 fa35 	bl	80085e8 <_ZnwjPKci>
 800517e:	4604      	mov	r4, r0
 8005180:	4620      	mov	r0, r4
 8005182:	f7ff ffe1 	bl	8005148 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>
 8005186:	4623      	mov	r3, r4
 8005188:	4618      	mov	r0, r3
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	bd90      	pop	{r4, r7, pc}
 8005190:	080215cc 	.word	0x080215cc

08005194 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>:
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4618      	mov	r0, r3
 80051a0:	f00b fe10 	bl	8010dc4 <_ZN10UtestShellC1Ev>
 80051a4:	4a03      	ldr	r2, [pc, #12]	; (80051b4 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev+0x20>)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4618      	mov	r0, r3
 80051ae:	3708      	adds	r7, #8
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	08024b3c 	.word	0x08024b3c

080051b8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv>:
{
 80051b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ba:	b099      	sub	sp, #100	; 0x64
 80051bc:	af04      	add	r7, sp, #16
 80051be:	6078      	str	r0, [r7, #4]

	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'O');
 80051c0:	f107 0308 	add.w	r3, r7, #8
 80051c4:	4973      	ldr	r1, [pc, #460]	; (8005394 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1dc>)
 80051c6:	4618      	mov	r0, r3
 80051c8:	f005 fdd1 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80051cc:	f107 0308 	add.w	r3, r7, #8
 80051d0:	2100      	movs	r1, #0
 80051d2:	4618      	mov	r0, r3
 80051d4:	f003 fea4 	bl	8008f20 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80051d8:	4604      	mov	r4, r0
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	330c      	adds	r3, #12
 80051de:	681d      	ldr	r5, [r3, #0]
 80051e0:	f107 0310 	add.w	r3, r7, #16
 80051e4:	496c      	ldr	r1, [pc, #432]	; (8005398 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e0>)
 80051e6:	4618      	mov	r0, r3
 80051e8:	f005 fdc1 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80051ec:	f107 0310 	add.w	r3, r7, #16
 80051f0:	4619      	mov	r1, r3
 80051f2:	4620      	mov	r0, r4
 80051f4:	47a8      	blx	r5
 80051f6:	4603      	mov	r3, r0
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	3264      	adds	r2, #100	; 0x64
 80051fc:	6812      	ldr	r2, [r2, #0]
 80051fe:	214f      	movs	r1, #79	; 0x4f
 8005200:	4618      	mov	r0, r3
 8005202:	4790      	blx	r2
 8005204:	f107 0310 	add.w	r3, r7, #16
 8005208:	4618      	mov	r0, r3
 800520a:	f006 f968 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800520e:	f107 0308 	add.w	r3, r7, #8
 8005212:	4618      	mov	r0, r3
 8005214:	f006 f963 	bl	800b4de <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 8005218:	f7fe fbb0 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'K');
 800521c:	f107 0318 	add.w	r3, r7, #24
 8005220:	495c      	ldr	r1, [pc, #368]	; (8005394 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1dc>)
 8005222:	4618      	mov	r0, r3
 8005224:	f005 fda3 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8005228:	f107 0318 	add.w	r3, r7, #24
 800522c:	2100      	movs	r1, #0
 800522e:	4618      	mov	r0, r3
 8005230:	f003 fe76 	bl	8008f20 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005234:	4604      	mov	r4, r0
 8005236:	6823      	ldr	r3, [r4, #0]
 8005238:	330c      	adds	r3, #12
 800523a:	681d      	ldr	r5, [r3, #0]
 800523c:	f107 0320 	add.w	r3, r7, #32
 8005240:	4955      	ldr	r1, [pc, #340]	; (8005398 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e0>)
 8005242:	4618      	mov	r0, r3
 8005244:	f005 fd93 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8005248:	f107 0320 	add.w	r3, r7, #32
 800524c:	4619      	mov	r1, r3
 800524e:	4620      	mov	r0, r4
 8005250:	47a8      	blx	r5
 8005252:	4603      	mov	r3, r0
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	3264      	adds	r2, #100	; 0x64
 8005258:	6812      	ldr	r2, [r2, #0]
 800525a:	214b      	movs	r1, #75	; 0x4b
 800525c:	4618      	mov	r0, r3
 800525e:	4790      	blx	r2
 8005260:	f107 0320 	add.w	r3, r7, #32
 8005264:	4618      	mov	r0, r3
 8005266:	f006 f93a 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800526a:	f107 0318 	add.w	r3, r7, #24
 800526e:	4618      	mov	r0, r3
 8005270:	f006 f935 	bl	800b4de <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 8005274:	f7fe fb82 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'\r');
 8005278:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800527c:	4945      	ldr	r1, [pc, #276]	; (8005394 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1dc>)
 800527e:	4618      	mov	r0, r3
 8005280:	f005 fd75 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8005284:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005288:	2100      	movs	r1, #0
 800528a:	4618      	mov	r0, r3
 800528c:	f003 fe48 	bl	8008f20 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005290:	4604      	mov	r4, r0
 8005292:	6823      	ldr	r3, [r4, #0]
 8005294:	330c      	adds	r3, #12
 8005296:	681d      	ldr	r5, [r3, #0]
 8005298:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800529c:	493e      	ldr	r1, [pc, #248]	; (8005398 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e0>)
 800529e:	4618      	mov	r0, r3
 80052a0:	f005 fd65 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80052a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80052a8:	4619      	mov	r1, r3
 80052aa:	4620      	mov	r0, r4
 80052ac:	47a8      	blx	r5
 80052ae:	4603      	mov	r3, r0
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	3264      	adds	r2, #100	; 0x64
 80052b4:	6812      	ldr	r2, [r2, #0]
 80052b6:	210d      	movs	r1, #13
 80052b8:	4618      	mov	r0, r3
 80052ba:	4790      	blx	r2
 80052bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80052c0:	4618      	mov	r0, r3
 80052c2:	f006 f90c 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80052c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052ca:	4618      	mov	r0, r3
 80052cc:	f006 f907 	bl	800b4de <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 80052d0:	f7fe fb54 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'\n');
 80052d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80052d8:	492e      	ldr	r1, [pc, #184]	; (8005394 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1dc>)
 80052da:	4618      	mov	r0, r3
 80052dc:	f005 fd47 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80052e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80052e4:	2100      	movs	r1, #0
 80052e6:	4618      	mov	r0, r3
 80052e8:	f003 fe1a 	bl	8008f20 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80052ec:	4604      	mov	r4, r0
 80052ee:	6823      	ldr	r3, [r4, #0]
 80052f0:	330c      	adds	r3, #12
 80052f2:	681d      	ldr	r5, [r3, #0]
 80052f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80052f8:	4927      	ldr	r1, [pc, #156]	; (8005398 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e0>)
 80052fa:	4618      	mov	r0, r3
 80052fc:	f005 fd37 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8005300:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005304:	4619      	mov	r1, r3
 8005306:	4620      	mov	r0, r4
 8005308:	47a8      	blx	r5
 800530a:	4603      	mov	r3, r0
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	3264      	adds	r2, #100	; 0x64
 8005310:	6812      	ldr	r2, [r2, #0]
 8005312:	210a      	movs	r1, #10
 8005314:	4618      	mov	r0, r3
 8005316:	4790      	blx	r2
 8005318:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800531c:	4618      	mov	r0, r3
 800531e:	f006 f8de 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8005322:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005326:	4618      	mov	r0, r3
 8005328:	f006 f8d9 	bl	800b4de <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 800532c:	f7fe fb26 	bl	800397c <ESP_UART_ReceiveHandler>

	STRCMP_EQUAL("OK\r\n",(char*)rx_buffer->buffer);	// check the rx ring buffer.
 8005330:	f00d f900 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 8005334:	4604      	mov	r4, r0
 8005336:	6823      	ldr	r3, [r4, #0]
 8005338:	3324      	adds	r3, #36	; 0x24
 800533a:	681d      	ldr	r5, [r3, #0]
 800533c:	4b17      	ldr	r3, [pc, #92]	; (800539c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e4>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68de      	ldr	r6, [r3, #12]
 8005342:	f00d f907 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005346:	4603      	mov	r3, r0
 8005348:	9302      	str	r3, [sp, #8]
 800534a:	23e1      	movs	r3, #225	; 0xe1
 800534c:	9301      	str	r3, [sp, #4]
 800534e:	4b14      	ldr	r3, [pc, #80]	; (80053a0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e8>)
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	2300      	movs	r3, #0
 8005354:	4632      	mov	r2, r6
 8005356:	4913      	ldr	r1, [pc, #76]	; (80053a4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ec>)
 8005358:	4620      	mov	r0, r4
 800535a:	47a8      	blx	r5
	mock().checkExpectations();
 800535c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005360:	490c      	ldr	r1, [pc, #48]	; (8005394 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1dc>)
 8005362:	4618      	mov	r0, r3
 8005364:	f005 fd03 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8005368:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800536c:	2100      	movs	r1, #0
 800536e:	4618      	mov	r0, r3
 8005370:	f003 fdd6 	bl	8008f20 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005374:	4603      	mov	r3, r0
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	3294      	adds	r2, #148	; 0x94
 800537a:	6812      	ldr	r2, [r2, #0]
 800537c:	4618      	mov	r0, r3
 800537e:	4790      	blx	r2
 8005380:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005384:	4618      	mov	r0, r3
 8005386:	f006 f8aa 	bl	800b4de <_ZN12SimpleStringD1Ev>

}
 800538a:	bf00      	nop
 800538c:	3754      	adds	r7, #84	; 0x54
 800538e:	46bd      	mov	sp, r7
 8005390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005392:	bf00      	nop
 8005394:	080218f0 	.word	0x080218f0
 8005398:	08021910 	.word	0x08021910
 800539c:	20000498 	.word	0x20000498
 80053a0:	080215cc 	.word	0x080215cc
 80053a4:	0802194c 	.word	0x0802194c

080053a8 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_Response_Test)
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7ff fd52 	bl	8004e5c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80053b8:	4a03      	ldr	r2, [pc, #12]	; (80053c8 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev+0x20>)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	601a      	str	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4618      	mov	r0, r3
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	08024b1c 	.word	0x08024b1c

080053cc <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv>:
 80053cc:	b590      	push	{r4, r7, lr}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	22e6      	movs	r2, #230	; 0xe6
 80053d6:	4906      	ldr	r1, [pc, #24]	; (80053f0 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv+0x24>)
 80053d8:	2004      	movs	r0, #4
 80053da:	f003 f905 	bl	80085e8 <_ZnwjPKci>
 80053de:	4604      	mov	r4, r0
 80053e0:	4620      	mov	r0, r4
 80053e2:	f7ff ffe1 	bl	80053a8 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>
 80053e6:	4623      	mov	r3, r4
 80053e8:	4618      	mov	r0, r3
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd90      	pop	{r4, r7, pc}
 80053f0:	080215cc 	.word	0x080215cc

080053f4 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>:
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4618      	mov	r0, r3
 8005400:	f00b fce0 	bl	8010dc4 <_ZN10UtestShellC1Ev>
 8005404:	4a03      	ldr	r2, [pc, #12]	; (8005414 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev+0x20>)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4618      	mov	r0, r3
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	08024a70 	.word	0x08024a70

08005418 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv>:
{
 8005418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800541a:	b093      	sub	sp, #76	; 0x4c
 800541c:	af04      	add	r7, sp, #16
 800541e:	6078      	str	r0, [r7, #4]
	char response[10] = "OK\r\n";
 8005420:	4a40      	ldr	r2, [pc, #256]	; (8005524 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x10c>)
 8005422:	f107 030c 	add.w	r3, r7, #12
 8005426:	e892 0003 	ldmia.w	r2, {r0, r1}
 800542a:	6018      	str	r0, [r3, #0]
 800542c:	3304      	adds	r3, #4
 800542e:	7019      	strb	r1, [r3, #0]
 8005430:	f107 0311 	add.w	r3, r7, #17
 8005434:	2200      	movs	r2, #0
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	711a      	strb	r2, [r3, #4]

	for(int i=0;i<(int)strlen(response);i++)
 800543a:	2300      	movs	r3, #0
 800543c:	637b      	str	r3, [r7, #52]	; 0x34
 800543e:	f107 030c 	add.w	r3, r7, #12
 8005442:	4618      	mov	r0, r3
 8005444:	f7fa fefa 	bl	800023c <strlen>
 8005448:	4603      	mov	r3, r0
 800544a:	461a      	mov	r2, r3
 800544c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800544e:	4293      	cmp	r3, r2
 8005450:	da35      	bge.n	80054be <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xa6>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8005452:	f107 0318 	add.w	r3, r7, #24
 8005456:	4934      	ldr	r1, [pc, #208]	; (8005528 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x110>)
 8005458:	4618      	mov	r0, r3
 800545a:	f005 fc88 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800545e:	f107 0318 	add.w	r3, r7, #24
 8005462:	2100      	movs	r1, #0
 8005464:	4618      	mov	r0, r3
 8005466:	f003 fd5b 	bl	8008f20 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800546a:	4604      	mov	r4, r0
 800546c:	6823      	ldr	r3, [r4, #0]
 800546e:	330c      	adds	r3, #12
 8005470:	681d      	ldr	r5, [r3, #0]
 8005472:	f107 0320 	add.w	r3, r7, #32
 8005476:	492d      	ldr	r1, [pc, #180]	; (800552c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x114>)
 8005478:	4618      	mov	r0, r3
 800547a:	f005 fc78 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800547e:	f107 0320 	add.w	r3, r7, #32
 8005482:	4619      	mov	r1, r3
 8005484:	4620      	mov	r0, r4
 8005486:	47a8      	blx	r5
 8005488:	4603      	mov	r3, r0
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	3264      	adds	r2, #100	; 0x64
 800548e:	6812      	ldr	r2, [r2, #0]
 8005490:	f107 000c 	add.w	r0, r7, #12
 8005494:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005496:	4401      	add	r1, r0
 8005498:	7809      	ldrb	r1, [r1, #0]
 800549a:	4618      	mov	r0, r3
 800549c:	4790      	blx	r2
 800549e:	f107 0320 	add.w	r3, r7, #32
 80054a2:	4618      	mov	r0, r3
 80054a4:	f006 f81b 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80054a8:	f107 0318 	add.w	r3, r7, #24
 80054ac:	4618      	mov	r0, r3
 80054ae:	f006 f816 	bl	800b4de <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 80054b2:	f7fe fa63 	bl	800397c <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 80054b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b8:	3301      	adds	r3, #1
 80054ba:	637b      	str	r3, [r7, #52]	; 0x34
 80054bc:	e7bf      	b.n	800543e <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x26>
	}

	uint32_t result = Read_Response((char*)"OK");
 80054be:	481c      	ldr	r0, [pc, #112]	; (8005530 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x118>)
 80054c0:	f7fe fa76 	bl	80039b0 <Read_Response>
 80054c4:	6338      	str	r0, [r7, #48]	; 0x30

	LONGS_EQUAL(1,result);
 80054c6:	f00d f835 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 80054ca:	4604      	mov	r4, r0
 80054cc:	6823      	ldr	r3, [r4, #0]
 80054ce:	3338      	adds	r3, #56	; 0x38
 80054d0:	681d      	ldr	r5, [r3, #0]
 80054d2:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 80054d4:	f00d f83e 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80054d8:	4603      	mov	r3, r0
 80054da:	9302      	str	r3, [sp, #8]
 80054dc:	23f2      	movs	r3, #242	; 0xf2
 80054de:	9301      	str	r3, [sp, #4]
 80054e0:	4b14      	ldr	r3, [pc, #80]	; (8005534 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x11c>)
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	4b14      	ldr	r3, [pc, #80]	; (8005538 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x120>)
 80054e6:	4632      	mov	r2, r6
 80054e8:	2101      	movs	r1, #1
 80054ea:	4620      	mov	r0, r4
 80054ec:	47a8      	blx	r5
	mock().checkExpectations();
 80054ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054f2:	490d      	ldr	r1, [pc, #52]	; (8005528 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x110>)
 80054f4:	4618      	mov	r0, r3
 80054f6:	f005 fc3a 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80054fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054fe:	2100      	movs	r1, #0
 8005500:	4618      	mov	r0, r3
 8005502:	f003 fd0d 	bl	8008f20 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005506:	4603      	mov	r3, r0
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	3294      	adds	r2, #148	; 0x94
 800550c:	6812      	ldr	r2, [r2, #0]
 800550e:	4618      	mov	r0, r3
 8005510:	4790      	blx	r2
 8005512:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005516:	4618      	mov	r0, r3
 8005518:	f005 ffe1 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 800551c:	bf00      	nop
 800551e:	373c      	adds	r7, #60	; 0x3c
 8005520:	46bd      	mov	sp, r7
 8005522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005524:	08021958 	.word	0x08021958
 8005528:	080218f0 	.word	0x080218f0
 800552c:	08021910 	.word	0x08021910
 8005530:	08021954 	.word	0x08021954
 8005534:	080215cc 	.word	0x080215cc
 8005538:	08021924 	.word	0x08021924

0800553c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>:


TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4618      	mov	r0, r3
 8005548:	f7ff fc88 	bl	8004e5c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800554c:	4a03      	ldr	r2, [pc, #12]	; (800555c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev+0x20>)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4618      	mov	r0, r3
 8005556:	3708      	adds	r7, #8
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	08024a50 	.word	0x08024a50

08005560 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv>:
 8005560:	b590      	push	{r4, r7, lr}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	22f7      	movs	r2, #247	; 0xf7
 800556a:	4906      	ldr	r1, [pc, #24]	; (8005584 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv+0x24>)
 800556c:	2004      	movs	r0, #4
 800556e:	f003 f83b 	bl	80085e8 <_ZnwjPKci>
 8005572:	4604      	mov	r4, r0
 8005574:	4620      	mov	r0, r4
 8005576:	f7ff ffe1 	bl	800553c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>
 800557a:	4623      	mov	r3, r4
 800557c:	4618      	mov	r0, r3
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	bd90      	pop	{r4, r7, pc}
 8005584:	080215cc 	.word	0x080215cc

08005588 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>:
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4618      	mov	r0, r3
 8005594:	f00b fc16 	bl	8010dc4 <_ZN10UtestShellC1Ev>
 8005598:	4a03      	ldr	r2, [pc, #12]	; (80055a8 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev+0x20>)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	601a      	str	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4618      	mov	r0, r3
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	080249a4 	.word	0x080249a4

080055ac <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv>:
{
 80055ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055ae:	b089      	sub	sp, #36	; 0x24
 80055b0:	af04      	add	r7, sp, #16
 80055b2:	6078      	str	r0, [r7, #4]
	Status response_state = IDLE;
 80055b4:	2305      	movs	r3, #5
 80055b6:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		response_state = Wait_Response((char*)"OK", 1000);
 80055b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80055bc:	4811      	ldr	r0, [pc, #68]	; (8005604 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x58>)
 80055be:	f7fe fa09 	bl	80039d4 <Wait_Response>
 80055c2:	4603      	mov	r3, r0
 80055c4:	73fb      	strb	r3, [r7, #15]
		if(response_state != IDLE)
 80055c6:	7bfb      	ldrb	r3, [r7, #15]
 80055c8:	2b05      	cmp	r3, #5
 80055ca:	d100      	bne.n	80055ce <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x22>
		response_state = Wait_Response((char*)"OK", 1000);
 80055cc:	e7f4      	b.n	80055b8 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0xc>
			break;
 80055ce:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 80055d0:	f00c ffb0 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 80055d4:	4604      	mov	r4, r0
 80055d6:	6823      	ldr	r3, [r4, #0]
 80055d8:	3338      	adds	r3, #56	; 0x38
 80055da:	681d      	ldr	r5, [r3, #0]
 80055dc:	7bfe      	ldrb	r6, [r7, #15]
 80055de:	f00c ffb9 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80055e2:	4603      	mov	r3, r0
 80055e4:	9302      	str	r3, [sp, #8]
 80055e6:	f240 1303 	movw	r3, #259	; 0x103
 80055ea:	9301      	str	r3, [sp, #4]
 80055ec:	4b06      	ldr	r3, [pc, #24]	; (8005608 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x5c>)
 80055ee:	9300      	str	r3, [sp, #0]
 80055f0:	4b06      	ldr	r3, [pc, #24]	; (800560c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x60>)
 80055f2:	4632      	mov	r2, r6
 80055f4:	2102      	movs	r1, #2
 80055f6:	4620      	mov	r0, r4
 80055f8:	47a8      	blx	r5

}
 80055fa:	bf00      	nop
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005602:	bf00      	nop
 8005604:	08021954 	.word	0x08021954
 8005608:	080215cc 	.word	0x080215cc
 800560c:	08021964 	.word	0x08021964

08005610 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_Response_Test)
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4618      	mov	r0, r3
 800561c:	f7ff fc1e 	bl	8004e5c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005620:	4a03      	ldr	r2, [pc, #12]	; (8005630 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev+0x20>)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4618      	mov	r0, r3
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	08024984 	.word	0x08024984

08005634 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv>:
 8005634:	b590      	push	{r4, r7, lr}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	f240 1207 	movw	r2, #263	; 0x107
 8005640:	4906      	ldr	r1, [pc, #24]	; (800565c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv+0x28>)
 8005642:	2004      	movs	r0, #4
 8005644:	f002 ffd0 	bl	80085e8 <_ZnwjPKci>
 8005648:	4604      	mov	r4, r0
 800564a:	4620      	mov	r0, r4
 800564c:	f7ff ffe0 	bl	8005610 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>
 8005650:	4623      	mov	r3, r4
 8005652:	4618      	mov	r0, r3
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	bd90      	pop	{r4, r7, pc}
 800565a:	bf00      	nop
 800565c:	080215cc 	.word	0x080215cc

08005660 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>:
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4618      	mov	r0, r3
 800566c:	f00b fbaa 	bl	8010dc4 <_ZN10UtestShellC1Ev>
 8005670:	4a03      	ldr	r2, [pc, #12]	; (8005680 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev+0x20>)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4618      	mov	r0, r3
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	080248d8 	.word	0x080248d8

08005684 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv>:
{
 8005684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005686:	b091      	sub	sp, #68	; 0x44
 8005688:	af04      	add	r7, sp, #16
 800568a:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 800568c:	2305      	movs	r3, #5
 800568e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	char response[10] = "OK\r\n";
 8005692:	4a3b      	ldr	r2, [pc, #236]	; (8005780 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xfc>)
 8005694:	f107 030c 	add.w	r3, r7, #12
 8005698:	e892 0003 	ldmia.w	r2, {r0, r1}
 800569c:	6018      	str	r0, [r3, #0]
 800569e:	3304      	adds	r3, #4
 80056a0:	7019      	strb	r1, [r3, #0]
 80056a2:	f107 0311 	add.w	r3, r7, #17
 80056a6:	2200      	movs	r2, #0
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	711a      	strb	r2, [r3, #4]

	while(1)
	{
		response_state = Wait_Response((char*)"OK",1000);
 80056ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80056b0:	4834      	ldr	r0, [pc, #208]	; (8005784 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x100>)
 80056b2:	f7fe f98f 	bl	80039d4 <Wait_Response>
 80056b6:	4603      	mov	r3, r0
 80056b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		if(response_state != IDLE)
 80056bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80056c0:	2b05      	cmp	r3, #5
 80056c2:	d141      	bne.n	8005748 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xc4>
			break;
		for(int i=0;i<(int)strlen(response);i++)
 80056c4:	2300      	movs	r3, #0
 80056c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056c8:	f107 030c 	add.w	r3, r7, #12
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7fa fdb5 	bl	800023c <strlen>
 80056d2:	4603      	mov	r3, r0
 80056d4:	461a      	mov	r2, r3
 80056d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d8:	4293      	cmp	r3, r2
 80056da:	dae7      	bge.n	80056ac <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x28>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 80056dc:	f107 0318 	add.w	r3, r7, #24
 80056e0:	4929      	ldr	r1, [pc, #164]	; (8005788 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x104>)
 80056e2:	4618      	mov	r0, r3
 80056e4:	f005 fb43 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80056e8:	f107 0318 	add.w	r3, r7, #24
 80056ec:	2100      	movs	r1, #0
 80056ee:	4618      	mov	r0, r3
 80056f0:	f003 fc16 	bl	8008f20 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80056f4:	4604      	mov	r4, r0
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	330c      	adds	r3, #12
 80056fa:	681d      	ldr	r5, [r3, #0]
 80056fc:	f107 0320 	add.w	r3, r7, #32
 8005700:	4922      	ldr	r1, [pc, #136]	; (800578c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x108>)
 8005702:	4618      	mov	r0, r3
 8005704:	f005 fb33 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8005708:	f107 0320 	add.w	r3, r7, #32
 800570c:	4619      	mov	r1, r3
 800570e:	4620      	mov	r0, r4
 8005710:	47a8      	blx	r5
 8005712:	4603      	mov	r3, r0
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	3264      	adds	r2, #100	; 0x64
 8005718:	6812      	ldr	r2, [r2, #0]
 800571a:	f107 000c 	add.w	r0, r7, #12
 800571e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005720:	4401      	add	r1, r0
 8005722:	7809      	ldrb	r1, [r1, #0]
 8005724:	4618      	mov	r0, r3
 8005726:	4790      	blx	r2
 8005728:	f107 0320 	add.w	r3, r7, #32
 800572c:	4618      	mov	r0, r3
 800572e:	f005 fed6 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8005732:	f107 0318 	add.w	r3, r7, #24
 8005736:	4618      	mov	r0, r3
 8005738:	f005 fed1 	bl	800b4de <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 800573c:	f7fe f91e 	bl	800397c <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 8005740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005742:	3301      	adds	r3, #1
 8005744:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005746:	e7bf      	b.n	80056c8 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x44>
			break;
 8005748:	bf00      	nop
		}
	}

	LONGS_EQUAL(FOUND,response_state);
 800574a:	f00c fef3 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 800574e:	4604      	mov	r4, r0
 8005750:	6823      	ldr	r3, [r4, #0]
 8005752:	3338      	adds	r3, #56	; 0x38
 8005754:	681d      	ldr	r5, [r3, #0]
 8005756:	f897 602b 	ldrb.w	r6, [r7, #43]	; 0x2b
 800575a:	f00c fefb 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800575e:	4603      	mov	r3, r0
 8005760:	9302      	str	r3, [sp, #8]
 8005762:	f44f 738d 	mov.w	r3, #282	; 0x11a
 8005766:	9301      	str	r3, [sp, #4]
 8005768:	4b09      	ldr	r3, [pc, #36]	; (8005790 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x10c>)
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	4b09      	ldr	r3, [pc, #36]	; (8005794 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x110>)
 800576e:	4632      	mov	r2, r6
 8005770:	2100      	movs	r1, #0
 8005772:	4620      	mov	r0, r4
 8005774:	47a8      	blx	r5
}
 8005776:	bf00      	nop
 8005778:	3734      	adds	r7, #52	; 0x34
 800577a:	46bd      	mov	sp, r7
 800577c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800577e:	bf00      	nop
 8005780:	08021958 	.word	0x08021958
 8005784:	08021954 	.word	0x08021954
 8005788:	080218f0 	.word	0x080218f0
 800578c:	08021910 	.word	0x08021910
 8005790:	080215cc 	.word	0x080215cc
 8005794:	08021998 	.word	0x08021998

08005798 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7ff fb5a 	bl	8004e5c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80057a8:	4a03      	ldr	r2, [pc, #12]	; (80057b8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4618      	mov	r0, r3
 80057b2:	3708      	adds	r7, #8
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	080248b8 	.word	0x080248b8

080057bc <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv>:
 80057bc:	b590      	push	{r4, r7, lr}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	f240 121d 	movw	r2, #285	; 0x11d
 80057c8:	4906      	ldr	r1, [pc, #24]	; (80057e4 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 80057ca:	2004      	movs	r0, #4
 80057cc:	f002 ff0c 	bl	80085e8 <_ZnwjPKci>
 80057d0:	4604      	mov	r4, r0
 80057d2:	4620      	mov	r0, r4
 80057d4:	f7ff ffe0 	bl	8005798 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>
 80057d8:	4623      	mov	r3, r4
 80057da:	4618      	mov	r0, r3
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd90      	pop	{r4, r7, pc}
 80057e2:	bf00      	nop
 80057e4:	080215cc 	.word	0x080215cc

080057e8 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>:
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f00b fae6 	bl	8010dc4 <_ZN10UtestShellC1Ev>
 80057f8:	4a03      	ldr	r2, [pc, #12]	; (8005808 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4618      	mov	r0, r3
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	0802480c 	.word	0x0802480c

0800580c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 800580c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800580e:	b089      	sub	sp, #36	; 0x24
 8005810:	af04      	add	r7, sp, #16
 8005812:	6078      	str	r0, [r7, #4]
	Status response;

	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8005814:	4911      	ldr	r1, [pc, #68]	; (800585c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x50>)
 8005816:	4812      	ldr	r0, [pc, #72]	; (8005860 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x54>)
 8005818:	f7fe f918 	bl	8003a4c <Connect_Wifi>
 800581c:	4603      	mov	r3, r0
 800581e:	73fb      	strb	r3, [r7, #15]
		if(response != IDLE)
 8005820:	7bfb      	ldrb	r3, [r7, #15]
 8005822:	2b05      	cmp	r3, #5
 8005824:	d100      	bne.n	8005828 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x1c>
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8005826:	e7f5      	b.n	8005814 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x8>
		{
			break;
 8005828:	bf00      	nop
		}
	}

	LONGS_EQUAL(TIMEOUT_ERROR,response);
 800582a:	f00c fe83 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 800582e:	4604      	mov	r4, r0
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	3338      	adds	r3, #56	; 0x38
 8005834:	681d      	ldr	r5, [r3, #0]
 8005836:	7bfe      	ldrb	r6, [r7, #15]
 8005838:	f00c fe8c 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800583c:	4603      	mov	r3, r0
 800583e:	9302      	str	r3, [sp, #8]
 8005840:	f44f 7395 	mov.w	r3, #298	; 0x12a
 8005844:	9301      	str	r3, [sp, #4]
 8005846:	4b07      	ldr	r3, [pc, #28]	; (8005864 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x58>)
 8005848:	9300      	str	r3, [sp, #0]
 800584a:	4b07      	ldr	r3, [pc, #28]	; (8005868 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x5c>)
 800584c:	4632      	mov	r2, r6
 800584e:	2102      	movs	r1, #2
 8005850:	4620      	mov	r0, r4
 8005852:	47a8      	blx	r5

}
 8005854:	bf00      	nop
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800585c:	080219c4 	.word	0x080219c4
 8005860:	080219cc 	.word	0x080219cc
 8005864:	080215cc 	.word	0x080215cc
 8005868:	080219d4 	.word	0x080219d4

0800586c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4618      	mov	r0, r3
 8005878:	f7ff faf0 	bl	8004e5c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800587c:	4a03      	ldr	r2, [pc, #12]	; (800588c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev+0x20>)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4618      	mov	r0, r3
 8005886:	3708      	adds	r7, #8
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	080247ec 	.word	0x080247ec

08005890 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv>:
 8005890:	b590      	push	{r4, r7, lr}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800589c:	4906      	ldr	r1, [pc, #24]	; (80058b8 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv+0x28>)
 800589e:	2004      	movs	r0, #4
 80058a0:	f002 fea2 	bl	80085e8 <_ZnwjPKci>
 80058a4:	4604      	mov	r4, r0
 80058a6:	4620      	mov	r0, r4
 80058a8:	f7ff ffe0 	bl	800586c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>
 80058ac:	4623      	mov	r3, r4
 80058ae:	4618      	mov	r0, r3
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd90      	pop	{r4, r7, pc}
 80058b6:	bf00      	nop
 80058b8:	080215cc 	.word	0x080215cc

080058bc <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>:
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f00b fa7c 	bl	8010dc4 <_ZN10UtestShellC1Ev>
 80058cc:	4a03      	ldr	r2, [pc, #12]	; (80058dc <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev+0x20>)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4618      	mov	r0, r3
 80058d6:	3708      	adds	r7, #8
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	08024740 	.word	0x08024740

080058e0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv>:
{
 80058e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058e2:	b0e3      	sub	sp, #396	; 0x18c
 80058e4:	af04      	add	r7, sp, #16
 80058e6:	1d3b      	adds	r3, r7, #4
 80058e8:	6018      	str	r0, [r3, #0]
	char response_arr[3][50] =
 80058ea:	4a75      	ldr	r2, [pc, #468]	; (8005ac0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e0>)
 80058ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80058f0:	4611      	mov	r1, r2
 80058f2:	2296      	movs	r2, #150	; 0x96
 80058f4:	4618      	mov	r0, r3
 80058f6:	f018 ff0d 	bl	801e714 <memcpy>
	{ "OK\r\n",									// station mode response (AT+CWMODE=1)
	  "OK\r\n",									// check disconnect response (AT+CWQAP)
	  "ERROR\r\n"								// connect wifi command response (AT+CWJAP="SSID","password")
	};

	char fake_tx_buffer[3][50] =
 80058fa:	f107 030c 	add.w	r3, r7, #12
 80058fe:	4a71      	ldr	r2, [pc, #452]	; (8005ac4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e4>)
 8005900:	4618      	mov	r0, r3
 8005902:	4611      	mov	r1, r2
 8005904:	2396      	movs	r3, #150	; 0x96
 8005906:	461a      	mov	r2, r3
 8005908:	f018 ff04 	bl	801e714 <memcpy>
		MACRO_TO_STRING(AT_CWMODE_STATION),
		MACRO_TO_STRING(AT_CWQAP),
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};
	Status response;
	int i = 0;
 800590c:	2300      	movs	r3, #0
 800590e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
	while(1)
	{
		mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t *)fake_tx_buffer[i]);
 8005912:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8005916:	496c      	ldr	r1, [pc, #432]	; (8005ac8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e8>)
 8005918:	4618      	mov	r0, r3
 800591a:	f005 fa28 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800591e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8005922:	2100      	movs	r1, #0
 8005924:	4618      	mov	r0, r3
 8005926:	f003 fafb 	bl	8008f20 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800592a:	4604      	mov	r4, r0
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	330c      	adds	r3, #12
 8005930:	681d      	ldr	r5, [r3, #0]
 8005932:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8005936:	4965      	ldr	r1, [pc, #404]	; (8005acc <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1ec>)
 8005938:	4618      	mov	r0, r3
 800593a:	f005 fa18 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800593e:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8005942:	4619      	mov	r1, r3
 8005944:	4620      	mov	r0, r4
 8005946:	47a8      	blx	r5
 8005948:	4604      	mov	r4, r0
 800594a:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800594e:	4960      	ldr	r1, [pc, #384]	; (8005ad0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f0>)
 8005950:	4618      	mov	r0, r3
 8005952:	f005 fa0c 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8005956:	f107 020c 	add.w	r2, r7, #12
 800595a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800595e:	2132      	movs	r1, #50	; 0x32
 8005960:	fb01 f303 	mul.w	r3, r1, r3
 8005964:	441a      	add	r2, r3
 8005966:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800596a:	4619      	mov	r1, r3
 800596c:	4620      	mov	r0, r4
 800596e:	f7fe fc17 	bl	80041a0 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPv>
 8005972:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8005976:	4618      	mov	r0, r3
 8005978:	f005 fdb1 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800597c:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8005980:	4618      	mov	r0, r3
 8005982:	f005 fdac 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8005986:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800598a:	4618      	mov	r0, r3
 800598c:	f005 fda7 	bl	800b4de <_ZN12SimpleStringD1Ev>

		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8005990:	4950      	ldr	r1, [pc, #320]	; (8005ad4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f4>)
 8005992:	4851      	ldr	r0, [pc, #324]	; (8005ad8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f8>)
 8005994:	f7fe f85a 	bl	8003a4c <Connect_Wifi>
 8005998:	4603      	mov	r3, r0
 800599a:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
		if(response != IDLE)
 800599e:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 80059a2:	2b05      	cmp	r3, #5
 80059a4:	d159      	bne.n	8005a5a <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x17a>
		{
			break;
		}
		for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80059a6:	2300      	movs	r3, #0
 80059a8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80059ac:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80059b0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80059b4:	2132      	movs	r1, #50	; 0x32
 80059b6:	fb01 f303 	mul.w	r3, r1, r3
 80059ba:	4413      	add	r3, r2
 80059bc:	4618      	mov	r0, r3
 80059be:	f7fa fc3d 	bl	800023c <strlen>
 80059c2:	4603      	mov	r3, r0
 80059c4:	461a      	mov	r2, r3
 80059c6:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80059ca:	4293      	cmp	r3, r2
 80059cc:	da3f      	bge.n	8005a4e <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x16e>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response_arr[i][j]);
 80059ce:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80059d2:	493d      	ldr	r1, [pc, #244]	; (8005ac8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e8>)
 80059d4:	4618      	mov	r0, r3
 80059d6:	f005 f9ca 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80059da:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80059de:	2100      	movs	r1, #0
 80059e0:	4618      	mov	r0, r3
 80059e2:	f003 fa9d 	bl	8008f20 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80059e6:	4604      	mov	r4, r0
 80059e8:	6823      	ldr	r3, [r4, #0]
 80059ea:	330c      	adds	r3, #12
 80059ec:	681d      	ldr	r5, [r3, #0]
 80059ee:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80059f2:	493a      	ldr	r1, [pc, #232]	; (8005adc <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1fc>)
 80059f4:	4618      	mov	r0, r3
 80059f6:	f005 f9ba 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80059fa:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80059fe:	4619      	mov	r1, r3
 8005a00:	4620      	mov	r0, r4
 8005a02:	47a8      	blx	r5
 8005a04:	4603      	mov	r3, r0
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	3264      	adds	r2, #100	; 0x64
 8005a0a:	6812      	ldr	r2, [r2, #0]
 8005a0c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8005a10:	2032      	movs	r0, #50	; 0x32
 8005a12:	fb00 f101 	mul.w	r1, r0, r1
 8005a16:	f507 70bc 	add.w	r0, r7, #376	; 0x178
 8005a1a:	4408      	add	r0, r1
 8005a1c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005a20:	4401      	add	r1, r0
 8005a22:	39d4      	subs	r1, #212	; 0xd4
 8005a24:	7809      	ldrb	r1, [r1, #0]
 8005a26:	4618      	mov	r0, r3
 8005a28:	4790      	blx	r2
 8005a2a:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f005 fd55 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8005a34:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f005 fd50 	bl	800b4de <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8005a3e:	f7fd ff9d 	bl	800397c <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005a42:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8005a46:	3301      	adds	r3, #1
 8005a48:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8005a4c:	e7ae      	b.n	80059ac <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xcc>
		}
		i++;
 8005a4e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8005a52:	3301      	adds	r3, #1
 8005a54:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
	}
 8005a58:	e75b      	b.n	8005912 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x32>
			break;
 8005a5a:	bf00      	nop

	mock().checkExpectations();
 8005a5c:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8005a60:	4919      	ldr	r1, [pc, #100]	; (8005ac8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e8>)
 8005a62:	4618      	mov	r0, r3
 8005a64:	f005 f983 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8005a68:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f003 fa56 	bl	8008f20 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005a74:	4603      	mov	r3, r0
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	3294      	adds	r2, #148	; 0x94
 8005a7a:	6812      	ldr	r2, [r2, #0]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	4790      	blx	r2
 8005a80:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8005a84:	4618      	mov	r0, r3
 8005a86:	f005 fd2a 	bl	800b4de <_ZN12SimpleStringD1Ev>

	LONGS_EQUAL(CONNECTION_ERROR,response);
 8005a8a:	f00c fd53 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 8005a8e:	4604      	mov	r4, r0
 8005a90:	6823      	ldr	r3, [r4, #0]
 8005a92:	3338      	adds	r3, #56	; 0x38
 8005a94:	681d      	ldr	r5, [r3, #0]
 8005a96:	f897 616f 	ldrb.w	r6, [r7, #367]	; 0x16f
 8005a9a:	f00c fd5b 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	9302      	str	r3, [sp, #8]
 8005aa2:	f240 1351 	movw	r3, #337	; 0x151
 8005aa6:	9301      	str	r3, [sp, #4]
 8005aa8:	4b0d      	ldr	r3, [pc, #52]	; (8005ae0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x200>)
 8005aaa:	9300      	str	r3, [sp, #0]
 8005aac:	4b0d      	ldr	r3, [pc, #52]	; (8005ae4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x204>)
 8005aae:	4632      	mov	r2, r6
 8005ab0:	2104      	movs	r1, #4
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	47a8      	blx	r5

}
 8005ab6:	bf00      	nop
 8005ab8:	f507 77be 	add.w	r7, r7, #380	; 0x17c
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ac0:	08021a30 	.word	0x08021a30
 8005ac4:	08021ac8 	.word	0x08021ac8
 8005ac8:	080218f0 	.word	0x080218f0
 8005acc:	080218f4 	.word	0x080218f4
 8005ad0:	08021908 	.word	0x08021908
 8005ad4:	080219c4 	.word	0x080219c4
 8005ad8:	080219cc 	.word	0x080219cc
 8005adc:	08021910 	.word	0x08021910
 8005ae0:	080215cc 	.word	0x080215cc
 8005ae4:	08021a00 	.word	0x08021a00

08005ae8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7ff f9b2 	bl	8004e5c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005af8:	4a03      	ldr	r2, [pc, #12]	; (8005b08 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev+0x20>)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4618      	mov	r0, r3
 8005b02:	3708      	adds	r7, #8
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	08024720 	.word	0x08024720

08005b0c <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv>:
 8005b0c:	b590      	push	{r4, r7, lr}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	f240 1255 	movw	r2, #341	; 0x155
 8005b18:	4906      	ldr	r1, [pc, #24]	; (8005b34 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv+0x28>)
 8005b1a:	2004      	movs	r0, #4
 8005b1c:	f002 fd64 	bl	80085e8 <_ZnwjPKci>
 8005b20:	4604      	mov	r4, r0
 8005b22:	4620      	mov	r0, r4
 8005b24:	f7ff ffe0 	bl	8005ae8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>
 8005b28:	4623      	mov	r3, r4
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	370c      	adds	r7, #12
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd90      	pop	{r4, r7, pc}
 8005b32:	bf00      	nop
 8005b34:	080215cc 	.word	0x080215cc

08005b38 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>:
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f00b f93e 	bl	8010dc4 <_ZN10UtestShellC1Ev>
 8005b48:	4a03      	ldr	r2, [pc, #12]	; (8005b58 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev+0x20>)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4618      	mov	r0, r3
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	08024674 	.word	0x08024674

08005b5c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv>:
{
 8005b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b5e:	b0ef      	sub	sp, #444	; 0x1bc
 8005b60:	af04      	add	r7, sp, #16
 8005b62:	1d3b      	adds	r3, r7, #4
 8005b64:	6018      	str	r0, [r3, #0]
	char response_arr[4][50] =
 8005b66:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	23c8      	movs	r3, #200	; 0xc8
 8005b6e:	461a      	mov	r2, r3
 8005b70:	2100      	movs	r1, #0
 8005b72:	f018 fddd 	bl	801e730 <memset>
 8005b76:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005b7a:	4986      	ldr	r1, [pc, #536]	; (8005d94 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x238>)
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	c903      	ldmia	r1, {r0, r1}
 8005b80:	6018      	str	r0, [r3, #0]
 8005b82:	3304      	adds	r3, #4
 8005b84:	7019      	strb	r1, [r3, #0]
 8005b86:	1d53      	adds	r3, r2, #5
 8005b88:	222d      	movs	r2, #45	; 0x2d
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f018 fdcf 	bl	801e730 <memset>
 8005b92:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005b96:	4b80      	ldr	r3, [pc, #512]	; (8005d98 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x23c>)
 8005b98:	f102 0432 	add.w	r4, r2, #50	; 0x32
 8005b9c:	cb03      	ldmia	r3!, {r0, r1}
 8005b9e:	6020      	str	r0, [r4, #0]
 8005ba0:	6061      	str	r1, [r4, #4]
 8005ba2:	f102 033a 	add.w	r3, r2, #58	; 0x3a
 8005ba6:	222a      	movs	r2, #42	; 0x2a
 8005ba8:	2100      	movs	r1, #0
 8005baa:	4618      	mov	r0, r3
 8005bac:	f018 fdc0 	bl	801e730 <memset>
 8005bb0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005bb4:	4977      	ldr	r1, [pc, #476]	; (8005d94 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x238>)
 8005bb6:	f102 0364 	add.w	r3, r2, #100	; 0x64
 8005bba:	c903      	ldmia	r1, {r0, r1}
 8005bbc:	6018      	str	r0, [r3, #0]
 8005bbe:	3304      	adds	r3, #4
 8005bc0:	7019      	strb	r1, [r3, #0]
 8005bc2:	f102 0369 	add.w	r3, r2, #105	; 0x69
 8005bc6:	222d      	movs	r2, #45	; 0x2d
 8005bc8:	2100      	movs	r1, #0
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f018 fdb0 	bl	801e730 <memset>
	{ "OK\r\n",									// station mode response
	  "ERROR\r\n",								// check wifi connection response
	  "OK\r\n"								// connect wifi command response
	};

	char fake_tx_buffer[3][50] =
 8005bd0:	f107 030c 	add.w	r3, r7, #12
 8005bd4:	4a71      	ldr	r2, [pc, #452]	; (8005d9c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x240>)
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	4611      	mov	r1, r2
 8005bda:	2396      	movs	r3, #150	; 0x96
 8005bdc:	461a      	mov	r2, r3
 8005bde:	f018 fd99 	bl	801e714 <memcpy>
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};


	Status response;
	int i = 0;
 8005be2:	2300      	movs	r3, #0
 8005be4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	while(1)
	{
		mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t *)fake_tx_buffer[i]);
 8005be8:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8005bec:	496c      	ldr	r1, [pc, #432]	; (8005da0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x244>)
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f005 f8bd 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8005bf4:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f003 f990 	bl	8008f20 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005c00:	4604      	mov	r4, r0
 8005c02:	6823      	ldr	r3, [r4, #0]
 8005c04:	330c      	adds	r3, #12
 8005c06:	681d      	ldr	r5, [r3, #0]
 8005c08:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8005c0c:	4965      	ldr	r1, [pc, #404]	; (8005da4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x248>)
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f005 f8ad 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8005c14:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8005c18:	4619      	mov	r1, r3
 8005c1a:	4620      	mov	r0, r4
 8005c1c:	47a8      	blx	r5
 8005c1e:	4604      	mov	r4, r0
 8005c20:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8005c24:	4960      	ldr	r1, [pc, #384]	; (8005da8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x24c>)
 8005c26:	4618      	mov	r0, r3
 8005c28:	f005 f8a1 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8005c2c:	f107 020c 	add.w	r2, r7, #12
 8005c30:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005c34:	2132      	movs	r1, #50	; 0x32
 8005c36:	fb01 f303 	mul.w	r3, r1, r3
 8005c3a:	441a      	add	r2, r3
 8005c3c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8005c40:	4619      	mov	r1, r3
 8005c42:	4620      	mov	r0, r4
 8005c44:	f7fe faac 	bl	80041a0 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPv>
 8005c48:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f005 fc46 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8005c52:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8005c56:	4618      	mov	r0, r3
 8005c58:	f005 fc41 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8005c5c:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8005c60:	4618      	mov	r0, r3
 8005c62:	f005 fc3c 	bl	800b4de <_ZN12SimpleStringD1Ev>

		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8005c66:	4951      	ldr	r1, [pc, #324]	; (8005dac <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x250>)
 8005c68:	4851      	ldr	r0, [pc, #324]	; (8005db0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x254>)
 8005c6a:	f7fd feef 	bl	8003a4c <Connect_Wifi>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
		if(response != IDLE)
 8005c74:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8005c78:	2b05      	cmp	r3, #5
 8005c7a:	d158      	bne.n	8005d2e <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1d2>
		{
			break;
		}
		for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005c82:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005c86:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005c8a:	2132      	movs	r1, #50	; 0x32
 8005c8c:	fb01 f303 	mul.w	r3, r1, r3
 8005c90:	4413      	add	r3, r2
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fa fad2 	bl	800023c <strlen>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	da3e      	bge.n	8005d22 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1c6>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response_arr[i][j]);
 8005ca4:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8005ca8:	493d      	ldr	r1, [pc, #244]	; (8005da0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x244>)
 8005caa:	4618      	mov	r0, r3
 8005cac:	f005 f85f 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8005cb0:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f003 f932 	bl	8008f20 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005cbc:	4604      	mov	r4, r0
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	330c      	adds	r3, #12
 8005cc2:	681d      	ldr	r5, [r3, #0]
 8005cc4:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8005cc8:	493a      	ldr	r1, [pc, #232]	; (8005db4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x258>)
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f005 f84f 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8005cd0:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	47a8      	blx	r5
 8005cda:	4603      	mov	r3, r0
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	3264      	adds	r2, #100	; 0x64
 8005ce0:	6812      	ldr	r2, [r2, #0]
 8005ce2:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8005ce6:	f8d7 11a4 	ldr.w	r1, [r7, #420]	; 0x1a4
 8005cea:	2432      	movs	r4, #50	; 0x32
 8005cec:	fb04 f101 	mul.w	r1, r4, r1
 8005cf0:	4408      	add	r0, r1
 8005cf2:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8005cf6:	4401      	add	r1, r0
 8005cf8:	7809      	ldrb	r1, [r1, #0]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	4790      	blx	r2
 8005cfe:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8005d02:	4618      	mov	r0, r3
 8005d04:	f005 fbeb 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8005d08:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f005 fbe6 	bl	800b4de <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8005d12:	f7fd fe33 	bl	800397c <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005d16:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005d20:	e7af      	b.n	8005c82 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x126>
		}
		i++;
 8005d22:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005d26:	3301      	adds	r3, #1
 8005d28:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	}
 8005d2c:	e75c      	b.n	8005be8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x8c>
			break;
 8005d2e:	bf00      	nop
	mock().checkExpectations();
 8005d30:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8005d34:	491a      	ldr	r1, [pc, #104]	; (8005da0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x244>)
 8005d36:	4618      	mov	r0, r3
 8005d38:	f005 f819 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8005d3c:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8005d40:	2100      	movs	r1, #0
 8005d42:	4618      	mov	r0, r3
 8005d44:	f003 f8ec 	bl	8008f20 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	3294      	adds	r2, #148	; 0x94
 8005d4e:	6812      	ldr	r2, [r2, #0]
 8005d50:	4618      	mov	r0, r3
 8005d52:	4790      	blx	r2
 8005d54:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f005 fbc0 	bl	800b4de <_ZN12SimpleStringD1Ev>

	LONGS_EQUAL(CONNECTION_OK,response);
 8005d5e:	f00c fbe9 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 8005d62:	4604      	mov	r4, r0
 8005d64:	6823      	ldr	r3, [r4, #0]
 8005d66:	3338      	adds	r3, #56	; 0x38
 8005d68:	681d      	ldr	r5, [r3, #0]
 8005d6a:	f897 619f 	ldrb.w	r6, [r7, #415]	; 0x19f
 8005d6e:	f00c fbf1 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005d72:	4603      	mov	r3, r0
 8005d74:	9302      	str	r3, [sp, #8]
 8005d76:	f240 1379 	movw	r3, #377	; 0x179
 8005d7a:	9301      	str	r3, [sp, #4]
 8005d7c:	4b0e      	ldr	r3, [pc, #56]	; (8005db8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x25c>)
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	4b0e      	ldr	r3, [pc, #56]	; (8005dbc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x260>)
 8005d82:	4632      	mov	r2, r6
 8005d84:	2103      	movs	r1, #3
 8005d86:	4620      	mov	r0, r4
 8005d88:	47a8      	blx	r5

}
 8005d8a:	bf00      	nop
 8005d8c:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d94:	08021b8c 	.word	0x08021b8c
 8005d98:	08021bc0 	.word	0x08021bc0
 8005d9c:	08021ac8 	.word	0x08021ac8
 8005da0:	080218f0 	.word	0x080218f0
 8005da4:	080218f4 	.word	0x080218f4
 8005da8:	08021908 	.word	0x08021908
 8005dac:	080219c4 	.word	0x080219c4
 8005db0:	080219cc 	.word	0x080219cc
 8005db4:	08021910 	.word	0x08021910
 8005db8:	080215cc 	.word	0x080215cc
 8005dbc:	08021b60 	.word	0x08021b60

08005dc0 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	4a05      	ldr	r2, [pc, #20]	; (8005de0 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev+0x20>)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f00b f84b 	bl	8010e6c <_ZN10UtestShellD1Ev>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3708      	adds	r7, #8
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	08024674 	.word	0x08024674

08005de4 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD0Ev>:
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f7ff ffe7 	bl	8005dc0 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
 8005df2:	211c      	movs	r1, #28
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f002 fc0b 	bl	8008610 <_ZdlPvj>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>:
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	4a05      	ldr	r2, [pc, #20]	; (8005e24 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev+0x20>)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	601a      	str	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7ff f833 	bl	8004e80 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3708      	adds	r7, #8
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	08024720 	.word	0x08024720

08005e28 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD0Ev>:
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f7ff ffe7 	bl	8005e04 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>
 8005e36:	2104      	movs	r1, #4
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f002 fbe9 	bl	8008610 <_ZdlPvj>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4618      	mov	r0, r3
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	4a05      	ldr	r2, [pc, #20]	; (8005e68 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev+0x20>)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	601a      	str	r2, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f00b f807 	bl	8010e6c <_ZN10UtestShellD1Ev>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4618      	mov	r0, r3
 8005e62:	3708      	adds	r7, #8
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	08024740 	.word	0x08024740

08005e6c <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD0Ev>:
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f7ff ffe7 	bl	8005e48 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
 8005e7a:	211c      	movs	r1, #28
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f002 fbc7 	bl	8008610 <_ZdlPvj>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4618      	mov	r0, r3
 8005e86:	3708      	adds	r7, #8
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>:
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	4a05      	ldr	r2, [pc, #20]	; (8005eac <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev+0x20>)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	601a      	str	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7fe ffef 	bl	8004e80 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3708      	adds	r7, #8
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	080247ec 	.word	0x080247ec

08005eb0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD0Ev>:
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f7ff ffe7 	bl	8005e8c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>
 8005ebe:	2104      	movs	r1, #4
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f002 fba5 	bl	8008610 <_ZdlPvj>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3708      	adds	r7, #8
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	4a05      	ldr	r2, [pc, #20]	; (8005ef0 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	601a      	str	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f00a ffc3 	bl	8010e6c <_ZN10UtestShellD1Ev>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3708      	adds	r7, #8
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	0802480c 	.word	0x0802480c

08005ef4 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD0Ev>:
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f7ff ffe7 	bl	8005ed0 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
 8005f02:	211c      	movs	r1, #28
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f002 fb83 	bl	8008610 <_ZdlPvj>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3708      	adds	r7, #8
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>:
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	4a05      	ldr	r2, [pc, #20]	; (8005f34 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7fe ffab 	bl	8004e80 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3708      	adds	r7, #8
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	080248b8 	.word	0x080248b8

08005f38 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD0Ev>:
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f7ff ffe7 	bl	8005f14 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>
 8005f46:	2104      	movs	r1, #4
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f002 fb61 	bl	8008610 <_ZdlPvj>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4618      	mov	r0, r3
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	4a05      	ldr	r2, [pc, #20]	; (8005f78 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev+0x20>)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f00a ff7f 	bl	8010e6c <_ZN10UtestShellD1Ev>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4618      	mov	r0, r3
 8005f72:	3708      	adds	r7, #8
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	080248d8 	.word	0x080248d8

08005f7c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD0Ev>:
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f7ff ffe7 	bl	8005f58 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
 8005f8a:	211c      	movs	r1, #28
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f002 fb3f 	bl	8008610 <_ZdlPvj>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4618      	mov	r0, r3
 8005f96:	3708      	adds	r7, #8
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>:
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	4a05      	ldr	r2, [pc, #20]	; (8005fbc <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev+0x20>)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	601a      	str	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7fe ff67 	bl	8004e80 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3708      	adds	r7, #8
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	08024984 	.word	0x08024984

08005fc0 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD0Ev>:
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7ff ffe7 	bl	8005f9c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>
 8005fce:	2104      	movs	r1, #4
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f002 fb1d 	bl	8008610 <_ZdlPvj>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3708      	adds	r7, #8
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	4a05      	ldr	r2, [pc, #20]	; (8006000 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev+0x20>)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f00a ff3b 	bl	8010e6c <_ZN10UtestShellD1Ev>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	080249a4 	.word	0x080249a4

08006004 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD0Ev>:
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f7ff ffe7 	bl	8005fe0 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
 8006012:	211c      	movs	r1, #28
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f002 fafb 	bl	8008610 <_ZdlPvj>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4618      	mov	r0, r3
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>:
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	4a05      	ldr	r2, [pc, #20]	; (8006044 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev+0x20>)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4618      	mov	r0, r3
 8006036:	f7fe ff23 	bl	8004e80 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4618      	mov	r0, r3
 800603e:	3708      	adds	r7, #8
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	08024a50 	.word	0x08024a50

08006048 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD0Ev>:
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f7ff ffe7 	bl	8006024 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>
 8006056:	2104      	movs	r1, #4
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f002 fad9 	bl	8008610 <_ZdlPvj>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4618      	mov	r0, r3
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_Response_Test)
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	4a05      	ldr	r2, [pc, #20]	; (8006088 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev+0x20>)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4618      	mov	r0, r3
 800607a:	f00a fef7 	bl	8010e6c <_ZN10UtestShellD1Ev>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4618      	mov	r0, r3
 8006082:	3708      	adds	r7, #8
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	08024a70 	.word	0x08024a70

0800608c <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD0Ev>:
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f7ff ffe7 	bl	8006068 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
 800609a:	211c      	movs	r1, #28
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f002 fab7 	bl	8008610 <_ZdlPvj>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4618      	mov	r0, r3
 80060a6:	3708      	adds	r7, #8
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>:
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	4a05      	ldr	r2, [pc, #20]	; (80060cc <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev+0x20>)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	601a      	str	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4618      	mov	r0, r3
 80060be:	f7fe fedf 	bl	8004e80 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4618      	mov	r0, r3
 80060c6:	3708      	adds	r7, #8
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	08024b1c 	.word	0x08024b1c

080060d0 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD0Ev>:
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f7ff ffe7 	bl	80060ac <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>
 80060de:	2104      	movs	r1, #4
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f002 fa95 	bl	8008610 <_ZdlPvj>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4618      	mov	r0, r3
 80060ea:	3708      	adds	r7, #8
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	4a05      	ldr	r2, [pc, #20]	; (8006110 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev+0x20>)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	601a      	str	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4618      	mov	r0, r3
 8006102:	f00a feb3 	bl	8010e6c <_ZN10UtestShellD1Ev>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4618      	mov	r0, r3
 800610a:	3708      	adds	r7, #8
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	08024b3c 	.word	0x08024b3c

08006114 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD0Ev>:
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f7ff ffe7 	bl	80060f0 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
 8006122:	211c      	movs	r1, #28
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f002 fa73 	bl	8008610 <_ZdlPvj>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4618      	mov	r0, r3
 800612e:	3708      	adds	r7, #8
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>:
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	4a05      	ldr	r2, [pc, #20]	; (8006154 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev+0x20>)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	601a      	str	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4618      	mov	r0, r3
 8006146:	f7fe fe9b 	bl	8004e80 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4618      	mov	r0, r3
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	08024be8 	.word	0x08024be8

08006158 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD0Ev>:
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f7ff ffe7 	bl	8006134 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>
 8006166:	2104      	movs	r1, #4
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f002 fa51 	bl	8008610 <_ZdlPvj>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4618      	mov	r0, r3
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	4a05      	ldr	r2, [pc, #20]	; (8006198 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev+0x20>)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4618      	mov	r0, r3
 800618a:	f00a fe6f 	bl	8010e6c <_ZN10UtestShellD1Ev>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4618      	mov	r0, r3
 8006192:	3708      	adds	r7, #8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	08024c08 	.word	0x08024c08

0800619c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD0Ev>:
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f7ff ffe7 	bl	8006178 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
 80061aa:	211c      	movs	r1, #28
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f002 fa2f 	bl	8008610 <_ZdlPvj>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4618      	mov	r0, r3
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>:
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	4a05      	ldr	r2, [pc, #20]	; (80061dc <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev+0x20>)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7fe fe57 	bl	8004e80 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4618      	mov	r0, r3
 80061d6:	3708      	adds	r7, #8
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	08024cb4 	.word	0x08024cb4

080061e0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD0Ev>:
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f7ff ffe7 	bl	80061bc <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>
 80061ee:	2104      	movs	r1, #4
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f002 fa0d 	bl	8008610 <_ZdlPvj>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4618      	mov	r0, r3
 80061fa:	3708      	adds	r7, #8
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	4a05      	ldr	r2, [pc, #20]	; (8006220 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev+0x20>)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	601a      	str	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4618      	mov	r0, r3
 8006212:	f00a fe2b 	bl	8010e6c <_ZN10UtestShellD1Ev>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4618      	mov	r0, r3
 800621a:	3708      	adds	r7, #8
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	08024cd4 	.word	0x08024cd4

08006224 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD0Ev>:
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f7ff ffe7 	bl	8006200 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
 8006232:	211c      	movs	r1, #28
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f002 f9eb 	bl	8008610 <_ZdlPvj>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4618      	mov	r0, r3
 800623e:	3708      	adds	r7, #8
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>:
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	4a05      	ldr	r2, [pc, #20]	; (8006264 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev+0x20>)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4618      	mov	r0, r3
 8006256:	f7fe fe13 	bl	8004e80 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4618      	mov	r0, r3
 800625e:	3708      	adds	r7, #8
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	08024d80 	.word	0x08024d80

08006268 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD0Ev>:
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f7ff ffe7 	bl	8006244 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>
 8006276:	2104      	movs	r1, #4
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f002 f9c9 	bl	8008610 <_ZdlPvj>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4618      	mov	r0, r3
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, CapacityTest)
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	4a05      	ldr	r2, [pc, #20]	; (80062a8 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev+0x20>)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	601a      	str	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4618      	mov	r0, r3
 800629a:	f00a fde7 	bl	8010e6c <_ZN10UtestShellD1Ev>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4618      	mov	r0, r3
 80062a2:	3708      	adds	r7, #8
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	08024dc0 	.word	0x08024dc0

080062ac <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD0Ev>:
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f7ff ffe7 	bl	8006288 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
 80062ba:	211c      	movs	r1, #28
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f002 f9a7 	bl	8008610 <_ZdlPvj>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4618      	mov	r0, r3
 80062c6:	3708      	adds	r7, #8
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>:
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	4a05      	ldr	r2, [pc, #20]	; (80062ec <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev+0x20>)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	601a      	str	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4618      	mov	r0, r3
 80062de:	f7fd ff9f 	bl	8004220 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4618      	mov	r0, r3
 80062e6:	3708      	adds	r7, #8
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	08024e6c 	.word	0x08024e6c

080062f0 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD0Ev>:
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f7ff ffe7 	bl	80062cc <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>
 80062fe:	2108      	movs	r1, #8
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f002 f985 	bl	8008610 <_ZdlPvj>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4618      	mov	r0, r3
 800630a:	3708      	adds	r7, #8
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, LookForTest)
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	4a05      	ldr	r2, [pc, #20]	; (8006330 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev+0x20>)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	601a      	str	r2, [r3, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4618      	mov	r0, r3
 8006322:	f00a fda3 	bl	8010e6c <_ZN10UtestShellD1Ev>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4618      	mov	r0, r3
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	08024e8c 	.word	0x08024e8c

08006334 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD0Ev>:
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f7ff ffe7 	bl	8006310 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
 8006342:	211c      	movs	r1, #28
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f002 f963 	bl	8008610 <_ZdlPvj>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4618      	mov	r0, r3
 800634e:	3708      	adds	r7, #8
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>:
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	4a05      	ldr	r2, [pc, #20]	; (8006374 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev+0x20>)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	601a      	str	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4618      	mov	r0, r3
 8006366:	f7fd ff5b 	bl	8004220 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4618      	mov	r0, r3
 800636e:	3708      	adds	r7, #8
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	08024f38 	.word	0x08024f38

08006378 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD0Ev>:
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f7ff ffe7 	bl	8006354 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>
 8006386:	2108      	movs	r1, #8
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f002 f941 	bl	8008610 <_ZdlPvj>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4618      	mov	r0, r3
 8006392:	3708      	adds	r7, #8
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushArrayTest)
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	4a05      	ldr	r2, [pc, #20]	; (80063b8 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev+0x20>)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4618      	mov	r0, r3
 80063aa:	f00a fd5f 	bl	8010e6c <_ZN10UtestShellD1Ev>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4618      	mov	r0, r3
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	08024f58 	.word	0x08024f58

080063bc <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD0Ev>:
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f7ff ffe7 	bl	8006398 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
 80063ca:	211c      	movs	r1, #28
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f002 f91f 	bl	8008610 <_ZdlPvj>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4618      	mov	r0, r3
 80063d6:	3708      	adds	r7, #8
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>:
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	4a05      	ldr	r2, [pc, #20]	; (80063fc <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev+0x20>)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	601a      	str	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7fd ff17 	bl	8004220 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4618      	mov	r0, r3
 80063f6:	3708      	adds	r7, #8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	08025004 	.word	0x08025004

08006400 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD0Ev>:
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f7ff ffe7 	bl	80063dc <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>
 800640e:	2108      	movs	r1, #8
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f002 f8fd 	bl	8008610 <_ZdlPvj>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4618      	mov	r0, r3
 800641a:	3708      	adds	r7, #8
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	4a05      	ldr	r2, [pc, #20]	; (8006440 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev+0x20>)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	601a      	str	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4618      	mov	r0, r3
 8006432:	f00a fd1b 	bl	8010e6c <_ZN10UtestShellD1Ev>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4618      	mov	r0, r3
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	08025024 	.word	0x08025024

08006444 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD0Ev>:
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f7ff ffe7 	bl	8006420 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
 8006452:	211c      	movs	r1, #28
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f002 f8db 	bl	8008610 <_ZdlPvj>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4618      	mov	r0, r3
 800645e:	3708      	adds	r7, #8
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>:
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	4a05      	ldr	r2, [pc, #20]	; (8006484 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev+0x20>)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	601a      	str	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4618      	mov	r0, r3
 8006476:	f7fd fed3 	bl	8004220 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4618      	mov	r0, r3
 800647e:	3708      	adds	r7, #8
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	080250d0 	.word	0x080250d0

08006488 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD0Ev>:
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f7ff ffe7 	bl	8006464 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>
 8006496:	2108      	movs	r1, #8
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f002 f8b9 	bl	8008610 <_ZdlPvj>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4618      	mov	r0, r3
 80064a2:	3708      	adds	r7, #8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	4a05      	ldr	r2, [pc, #20]	; (80064c8 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev+0x20>)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	601a      	str	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4618      	mov	r0, r3
 80064ba:	f00a fcd7 	bl	8010e6c <_ZN10UtestShellD1Ev>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4618      	mov	r0, r3
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	080250f0 	.word	0x080250f0

080064cc <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD0Ev>:
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f7ff ffe7 	bl	80064a8 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
 80064da:	211c      	movs	r1, #28
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f002 f897 	bl	8008610 <_ZdlPvj>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4618      	mov	r0, r3
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>:
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	4a05      	ldr	r2, [pc, #20]	; (800650c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev+0x20>)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	601a      	str	r2, [r3, #0]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7fd fe8f 	bl	8004220 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4618      	mov	r0, r3
 8006506:	3708      	adds	r7, #8
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	0802519c 	.word	0x0802519c

08006510 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD0Ev>:
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f7ff ffe7 	bl	80064ec <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>
 800651e:	2108      	movs	r1, #8
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f002 f875 	bl	8008610 <_ZdlPvj>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4618      	mov	r0, r3
 800652a:	3708      	adds	r7, #8
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopDataTests)
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	4a05      	ldr	r2, [pc, #20]	; (8006550 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev+0x20>)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4618      	mov	r0, r3
 8006542:	f00a fc93 	bl	8010e6c <_ZN10UtestShellD1Ev>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4618      	mov	r0, r3
 800654a:	3708      	adds	r7, #8
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	080251bc 	.word	0x080251bc

08006554 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD0Ev>:
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f7ff ffe7 	bl	8006530 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
 8006562:	211c      	movs	r1, #28
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f002 f853 	bl	8008610 <_ZdlPvj>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4618      	mov	r0, r3
 800656e:	3708      	adds	r7, #8
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>:
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	4a05      	ldr	r2, [pc, #20]	; (8006594 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev+0x20>)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	601a      	str	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4618      	mov	r0, r3
 8006586:	f7fd fe4b 	bl	8004220 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4618      	mov	r0, r3
 800658e:	3708      	adds	r7, #8
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	08025268 	.word	0x08025268

08006598 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD0Ev>:
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f7ff ffe7 	bl	8006574 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>
 80065a6:	2108      	movs	r1, #8
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f002 f831 	bl	8008610 <_ZdlPvj>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4618      	mov	r0, r3
 80065b2:	3708      	adds	r7, #8
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	4a05      	ldr	r2, [pc, #20]	; (80065d8 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev+0x20>)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	601a      	str	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f00a fc4f 	bl	8010e6c <_ZN10UtestShellD1Ev>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4618      	mov	r0, r3
 80065d2:	3708      	adds	r7, #8
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	08025288 	.word	0x08025288

080065dc <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD0Ev>:
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f7ff ffe7 	bl	80065b8 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
 80065ea:	211c      	movs	r1, #28
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f002 f80f 	bl	8008610 <_ZdlPvj>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4618      	mov	r0, r3
 80065f6:	3708      	adds	r7, #8
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>:
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	4a05      	ldr	r2, [pc, #20]	; (800661c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev+0x20>)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	601a      	str	r2, [r3, #0]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4618      	mov	r0, r3
 800660e:	f7fd fe07 	bl	8004220 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4618      	mov	r0, r3
 8006616:	3708      	adds	r7, #8
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	08025334 	.word	0x08025334

08006620 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD0Ev>:
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f7ff ffe7 	bl	80065fc <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>
 800662e:	2108      	movs	r1, #8
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f001 ffed 	bl	8008610 <_ZdlPvj>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4618      	mov	r0, r3
 800663a:	3708      	adds	r7, #8
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushDataTests)
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	4a05      	ldr	r2, [pc, #20]	; (8006660 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev+0x20>)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	601a      	str	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4618      	mov	r0, r3
 8006652:	f00a fc0b 	bl	8010e6c <_ZN10UtestShellD1Ev>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4618      	mov	r0, r3
 800665a:	3708      	adds	r7, #8
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	08025354 	.word	0x08025354

08006664 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD0Ev>:
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f7ff ffe7 	bl	8006640 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
 8006672:	211c      	movs	r1, #28
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f001 ffcb 	bl	8008610 <_ZdlPvj>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4618      	mov	r0, r3
 800667e:	3708      	adds	r7, #8
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>:
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	4a05      	ldr	r2, [pc, #20]	; (80066a4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev+0x20>)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	601a      	str	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4618      	mov	r0, r3
 8006696:	f7fd fdc3 	bl	8004220 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4618      	mov	r0, r3
 800669e:	3708      	adds	r7, #8
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	08025400 	.word	0x08025400

080066a8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD0Ev>:
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f7ff ffe7 	bl	8006684 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>
 80066b6:	2108      	movs	r1, #8
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f001 ffa9 	bl	8008610 <_ZdlPvj>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4618      	mov	r0, r3
 80066c2:	3708      	adds	r7, #8
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, InitTest)
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	4a05      	ldr	r2, [pc, #20]	; (80066e8 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev+0x20>)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	601a      	str	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4618      	mov	r0, r3
 80066da:	f00a fbc7 	bl	8010e6c <_ZN10UtestShellD1Ev>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4618      	mov	r0, r3
 80066e2:	3708      	adds	r7, #8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	08025420 	.word	0x08025420

080066ec <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD0Ev>:
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f7ff ffe7 	bl	80066c8 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
 80066fa:	211c      	movs	r1, #28
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f001 ff87 	bl	8008610 <_ZdlPvj>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4618      	mov	r0, r3
 8006706:	3708      	adds	r7, #8
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>:
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	4a05      	ldr	r2, [pc, #20]	; (800672c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev+0x20>)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	601a      	str	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4618      	mov	r0, r3
 800671e:	f7fd fd7f 	bl	8004220 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4618      	mov	r0, r3
 8006726:	3708      	adds	r7, #8
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	080254cc 	.word	0x080254cc

08006730 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD0Ev>:
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f7ff ffe7 	bl	800670c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>
 800673e:	2108      	movs	r1, #8
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f001 ff65 	bl	8008610 <_ZdlPvj>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4618      	mov	r0, r3
 800674a:	3708      	adds	r7, #8
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <_Z41__static_initialization_and_destruction_0ii>:
}
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af02      	add	r7, sp, #8
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b01      	cmp	r3, #1
 800675e:	f040 80f4 	bne.w	800694a <_Z41__static_initialization_and_destruction_0ii+0x1fa>
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006768:	4293      	cmp	r3, r2
 800676a:	f040 80ee 	bne.w	800694a <_Z41__static_initialization_and_destruction_0ii+0x1fa>
TEST(RingBuffer_Test_Group, InitTest)
 800676e:	48a6      	ldr	r0, [pc, #664]	; (8006a08 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8006770:	f7fd fda4 	bl	80042bc <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>
 8006774:	2324      	movs	r3, #36	; 0x24
 8006776:	9301      	str	r3, [sp, #4]
 8006778:	4ba4      	ldr	r3, [pc, #656]	; (8006a0c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	4ba4      	ldr	r3, [pc, #656]	; (8006a10 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 800677e:	4aa5      	ldr	r2, [pc, #660]	; (8006a14 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8006780:	49a1      	ldr	r1, [pc, #644]	; (8006a08 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8006782:	48a5      	ldr	r0, [pc, #660]	; (8006a18 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8006784:	f00c f96e 	bl	8012a64 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushDataTests)
 8006788:	48a4      	ldr	r0, [pc, #656]	; (8006a1c <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 800678a:	f7fd fe4b 	bl	8004424 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>
 800678e:	232e      	movs	r3, #46	; 0x2e
 8006790:	9301      	str	r3, [sp, #4]
 8006792:	4b9e      	ldr	r3, [pc, #632]	; (8006a0c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	4ba2      	ldr	r3, [pc, #648]	; (8006a20 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8006798:	4a9e      	ldr	r2, [pc, #632]	; (8006a14 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 800679a:	49a0      	ldr	r1, [pc, #640]	; (8006a1c <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 800679c:	48a1      	ldr	r0, [pc, #644]	; (8006a24 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 800679e:	f00c f961 	bl	8012a64 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 80067a2:	48a1      	ldr	r0, [pc, #644]	; (8006a28 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 80067a4:	f7fd fec8 	bl	8004538 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>
 80067a8:	2338      	movs	r3, #56	; 0x38
 80067aa:	9301      	str	r3, [sp, #4]
 80067ac:	4b97      	ldr	r3, [pc, #604]	; (8006a0c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	4b9e      	ldr	r3, [pc, #632]	; (8006a2c <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 80067b2:	4a98      	ldr	r2, [pc, #608]	; (8006a14 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 80067b4:	499c      	ldr	r1, [pc, #624]	; (8006a28 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 80067b6:	489e      	ldr	r0, [pc, #632]	; (8006a30 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 80067b8:	f00c f954 	bl	8012a64 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopDataTests)
 80067bc:	489d      	ldr	r0, [pc, #628]	; (8006a34 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 80067be:	f7fd ff43 	bl	8004648 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>
 80067c2:	2343      	movs	r3, #67	; 0x43
 80067c4:	9301      	str	r3, [sp, #4]
 80067c6:	4b91      	ldr	r3, [pc, #580]	; (8006a0c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	4b9b      	ldr	r3, [pc, #620]	; (8006a38 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 80067cc:	4a91      	ldr	r2, [pc, #580]	; (8006a14 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 80067ce:	4999      	ldr	r1, [pc, #612]	; (8006a34 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 80067d0:	489a      	ldr	r0, [pc, #616]	; (8006a3c <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 80067d2:	f00c f947 	bl	8012a64 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 80067d6:	489a      	ldr	r0, [pc, #616]	; (8006a40 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 80067d8:	f7fd ffa2 	bl	8004720 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>
 80067dc:	234c      	movs	r3, #76	; 0x4c
 80067de:	9301      	str	r3, [sp, #4]
 80067e0:	4b8a      	ldr	r3, [pc, #552]	; (8006a0c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 80067e2:	9300      	str	r3, [sp, #0]
 80067e4:	4b97      	ldr	r3, [pc, #604]	; (8006a44 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 80067e6:	4a8b      	ldr	r2, [pc, #556]	; (8006a14 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 80067e8:	4995      	ldr	r1, [pc, #596]	; (8006a40 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 80067ea:	4897      	ldr	r0, [pc, #604]	; (8006a48 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 80067ec:	f00c f93a 	bl	8012a64 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 80067f0:	4896      	ldr	r0, [pc, #600]	; (8006a4c <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 80067f2:	f7fe f821 	bl	8004838 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>
 80067f6:	235c      	movs	r3, #92	; 0x5c
 80067f8:	9301      	str	r3, [sp, #4]
 80067fa:	4b84      	ldr	r3, [pc, #528]	; (8006a0c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 80067fc:	9300      	str	r3, [sp, #0]
 80067fe:	4b94      	ldr	r3, [pc, #592]	; (8006a50 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8006800:	4a84      	ldr	r2, [pc, #528]	; (8006a14 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8006802:	4992      	ldr	r1, [pc, #584]	; (8006a4c <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8006804:	4893      	ldr	r0, [pc, #588]	; (8006a54 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8006806:	f00c f92d 	bl	8012a64 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushArrayTest)
 800680a:	4893      	ldr	r0, [pc, #588]	; (8006a58 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 800680c:	f7fe f8d2 	bl	80049b4 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>
 8006810:	2371      	movs	r3, #113	; 0x71
 8006812:	9301      	str	r3, [sp, #4]
 8006814:	4b7d      	ldr	r3, [pc, #500]	; (8006a0c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	4b90      	ldr	r3, [pc, #576]	; (8006a5c <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800681a:	4a7e      	ldr	r2, [pc, #504]	; (8006a14 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 800681c:	498e      	ldr	r1, [pc, #568]	; (8006a58 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 800681e:	4890      	ldr	r0, [pc, #576]	; (8006a60 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8006820:	f00c f920 	bl	8012a64 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, LookForTest)
 8006824:	488f      	ldr	r0, [pc, #572]	; (8006a64 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8006826:	f7fe f92b 	bl	8004a80 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>
 800682a:	2378      	movs	r3, #120	; 0x78
 800682c:	9301      	str	r3, [sp, #4]
 800682e:	4b77      	ldr	r3, [pc, #476]	; (8006a0c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	4b8d      	ldr	r3, [pc, #564]	; (8006a68 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8006834:	4a77      	ldr	r2, [pc, #476]	; (8006a14 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8006836:	498b      	ldr	r1, [pc, #556]	; (8006a64 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8006838:	488c      	ldr	r0, [pc, #560]	; (8006a6c <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 800683a:	f00c f913 	bl	8012a64 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, CapacityTest)
 800683e:	488c      	ldr	r0, [pc, #560]	; (8006a70 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8006840:	f7fe fa08 	bl	8004c54 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>
 8006844:	2380      	movs	r3, #128	; 0x80
 8006846:	9301      	str	r3, [sp, #4]
 8006848:	4b70      	ldr	r3, [pc, #448]	; (8006a0c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	4b89      	ldr	r3, [pc, #548]	; (8006a74 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 800684e:	4a71      	ldr	r2, [pc, #452]	; (8006a14 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8006850:	4987      	ldr	r1, [pc, #540]	; (8006a70 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8006852:	4889      	ldr	r0, [pc, #548]	; (8006a78 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8006854:	f00c f906 	bl	8012a64 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8006858:	4888      	ldr	r0, [pc, #544]	; (8006a7c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800685a:	f7fe fb59 	bl	8004f10 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>
 800685e:	23b8      	movs	r3, #184	; 0xb8
 8006860:	9301      	str	r3, [sp, #4]
 8006862:	4b6a      	ldr	r3, [pc, #424]	; (8006a0c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	4b86      	ldr	r3, [pc, #536]	; (8006a80 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8006868:	4a86      	ldr	r2, [pc, #536]	; (8006a84 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 800686a:	4984      	ldr	r1, [pc, #528]	; (8006a7c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800686c:	4886      	ldr	r0, [pc, #536]	; (8006a88 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 800686e:	f00c f8f9 	bl	8012a64 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8006872:	4886      	ldr	r0, [pc, #536]	; (8006a8c <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8006874:	f7fe fbb6 	bl	8004fe4 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>
 8006878:	23ca      	movs	r3, #202	; 0xca
 800687a:	9301      	str	r3, [sp, #4]
 800687c:	4b63      	ldr	r3, [pc, #396]	; (8006a0c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800687e:	9300      	str	r3, [sp, #0]
 8006880:	4b83      	ldr	r3, [pc, #524]	; (8006a90 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8006882:	4a80      	ldr	r2, [pc, #512]	; (8006a84 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8006884:	4981      	ldr	r1, [pc, #516]	; (8006a8c <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8006886:	4883      	ldr	r0, [pc, #524]	; (8006a94 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8006888:	f00c f8ec 	bl	8012a64 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 800688c:	4882      	ldr	r0, [pc, #520]	; (8006a98 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 800688e:	f7fe fc81 	bl	8005194 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>
 8006892:	23d5      	movs	r3, #213	; 0xd5
 8006894:	9301      	str	r3, [sp, #4]
 8006896:	4b5d      	ldr	r3, [pc, #372]	; (8006a0c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	4b80      	ldr	r3, [pc, #512]	; (8006a9c <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 800689c:	4a79      	ldr	r2, [pc, #484]	; (8006a84 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 800689e:	497e      	ldr	r1, [pc, #504]	; (8006a98 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 80068a0:	487f      	ldr	r0, [pc, #508]	; (8006aa0 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 80068a2:	f00c f8df 	bl	8012a64 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_Response_Test)
 80068a6:	487f      	ldr	r0, [pc, #508]	; (8006aa4 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 80068a8:	f7fe fda4 	bl	80053f4 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>
 80068ac:	23e6      	movs	r3, #230	; 0xe6
 80068ae:	9301      	str	r3, [sp, #4]
 80068b0:	4b56      	ldr	r3, [pc, #344]	; (8006a0c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 80068b2:	9300      	str	r3, [sp, #0]
 80068b4:	4b7c      	ldr	r3, [pc, #496]	; (8006aa8 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 80068b6:	4a73      	ldr	r2, [pc, #460]	; (8006a84 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 80068b8:	497a      	ldr	r1, [pc, #488]	; (8006aa4 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 80068ba:	487c      	ldr	r0, [pc, #496]	; (8006aac <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 80068bc:	f00c f8d2 	bl	8012a64 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 80068c0:	487b      	ldr	r0, [pc, #492]	; (8006ab0 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 80068c2:	f7fe fe61 	bl	8005588 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>
 80068c6:	23f7      	movs	r3, #247	; 0xf7
 80068c8:	9301      	str	r3, [sp, #4]
 80068ca:	4b50      	ldr	r3, [pc, #320]	; (8006a0c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 80068cc:	9300      	str	r3, [sp, #0]
 80068ce:	4b79      	ldr	r3, [pc, #484]	; (8006ab4 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 80068d0:	4a6c      	ldr	r2, [pc, #432]	; (8006a84 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 80068d2:	4977      	ldr	r1, [pc, #476]	; (8006ab0 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 80068d4:	4878      	ldr	r0, [pc, #480]	; (8006ab8 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 80068d6:	f00c f8c5 	bl	8012a64 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 80068da:	4878      	ldr	r0, [pc, #480]	; (8006abc <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 80068dc:	f7fe fec0 	bl	8005660 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>
 80068e0:	f240 1307 	movw	r3, #263	; 0x107
 80068e4:	9301      	str	r3, [sp, #4]
 80068e6:	4b49      	ldr	r3, [pc, #292]	; (8006a0c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 80068e8:	9300      	str	r3, [sp, #0]
 80068ea:	4b75      	ldr	r3, [pc, #468]	; (8006ac0 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 80068ec:	4a65      	ldr	r2, [pc, #404]	; (8006a84 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 80068ee:	4973      	ldr	r1, [pc, #460]	; (8006abc <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 80068f0:	4874      	ldr	r0, [pc, #464]	; (8006ac4 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 80068f2:	f00c f8b7 	bl	8012a64 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 80068f6:	4874      	ldr	r0, [pc, #464]	; (8006ac8 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 80068f8:	f7fe ff76 	bl	80057e8 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>
 80068fc:	f240 131d 	movw	r3, #285	; 0x11d
 8006900:	9301      	str	r3, [sp, #4]
 8006902:	4b42      	ldr	r3, [pc, #264]	; (8006a0c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	4b71      	ldr	r3, [pc, #452]	; (8006acc <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 8006908:	4a5e      	ldr	r2, [pc, #376]	; (8006a84 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 800690a:	496f      	ldr	r1, [pc, #444]	; (8006ac8 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 800690c:	4870      	ldr	r0, [pc, #448]	; (8006ad0 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 800690e:	f00c f8a9 	bl	8012a64 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8006912:	4870      	ldr	r0, [pc, #448]	; (8006ad4 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8006914:	f7fe ffd2 	bl	80058bc <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>
 8006918:	f44f 7397 	mov.w	r3, #302	; 0x12e
 800691c:	9301      	str	r3, [sp, #4]
 800691e:	4b3b      	ldr	r3, [pc, #236]	; (8006a0c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8006920:	9300      	str	r3, [sp, #0]
 8006922:	4b6d      	ldr	r3, [pc, #436]	; (8006ad8 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8006924:	4a57      	ldr	r2, [pc, #348]	; (8006a84 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8006926:	496b      	ldr	r1, [pc, #428]	; (8006ad4 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8006928:	486c      	ldr	r0, [pc, #432]	; (8006adc <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 800692a:	f00c f89b 	bl	8012a64 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 800692e:	486c      	ldr	r0, [pc, #432]	; (8006ae0 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8006930:	f7ff f902 	bl	8005b38 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>
 8006934:	f240 1355 	movw	r3, #341	; 0x155
 8006938:	9301      	str	r3, [sp, #4]
 800693a:	4b34      	ldr	r3, [pc, #208]	; (8006a0c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	4b69      	ldr	r3, [pc, #420]	; (8006ae4 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8006940:	4a50      	ldr	r2, [pc, #320]	; (8006a84 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8006942:	4967      	ldr	r1, [pc, #412]	; (8006ae0 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8006944:	4868      	ldr	r0, [pc, #416]	; (8006ae8 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8006946:	f00c f88d 	bl	8012a64 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2b00      	cmp	r3, #0
 800694e:	f040 80e5 	bne.w	8006b1c <_Z41__static_initialization_and_destruction_0ii+0x3cc>
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006958:	4293      	cmp	r3, r2
 800695a:	f040 80df 	bne.w	8006b1c <_Z41__static_initialization_and_destruction_0ii+0x3cc>
 800695e:	4862      	ldr	r0, [pc, #392]	; (8006ae8 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8006960:	f00c f8aa 	bl	8012ab8 <_ZN13TestInstallerD1Ev>
 8006964:	485e      	ldr	r0, [pc, #376]	; (8006ae0 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8006966:	f7ff fa2b 	bl	8005dc0 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 800696a:	485c      	ldr	r0, [pc, #368]	; (8006adc <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 800696c:	f00c f8a4 	bl	8012ab8 <_ZN13TestInstallerD1Ev>
 8006970:	4858      	ldr	r0, [pc, #352]	; (8006ad4 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8006972:	f7ff fa69 	bl	8005e48 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8006976:	4856      	ldr	r0, [pc, #344]	; (8006ad0 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8006978:	f00c f89e 	bl	8012ab8 <_ZN13TestInstallerD1Ev>
 800697c:	4852      	ldr	r0, [pc, #328]	; (8006ac8 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 800697e:	f7ff faa7 	bl	8005ed0 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8006982:	4850      	ldr	r0, [pc, #320]	; (8006ac4 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8006984:	f00c f898 	bl	8012ab8 <_ZN13TestInstallerD1Ev>
 8006988:	484c      	ldr	r0, [pc, #304]	; (8006abc <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 800698a:	f7ff fae5 	bl	8005f58 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 800698e:	484a      	ldr	r0, [pc, #296]	; (8006ab8 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8006990:	f00c f892 	bl	8012ab8 <_ZN13TestInstallerD1Ev>
 8006994:	4846      	ldr	r0, [pc, #280]	; (8006ab0 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8006996:	f7ff fb23 	bl	8005fe0 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_Response_Test)
 800699a:	4844      	ldr	r0, [pc, #272]	; (8006aac <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 800699c:	f00c f88c 	bl	8012ab8 <_ZN13TestInstallerD1Ev>
 80069a0:	4840      	ldr	r0, [pc, #256]	; (8006aa4 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 80069a2:	f7ff fb61 	bl	8006068 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 80069a6:	483e      	ldr	r0, [pc, #248]	; (8006aa0 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 80069a8:	f00c f886 	bl	8012ab8 <_ZN13TestInstallerD1Ev>
 80069ac:	483a      	ldr	r0, [pc, #232]	; (8006a98 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 80069ae:	f7ff fb9f 	bl	80060f0 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 80069b2:	4838      	ldr	r0, [pc, #224]	; (8006a94 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 80069b4:	f00c f880 	bl	8012ab8 <_ZN13TestInstallerD1Ev>
 80069b8:	4834      	ldr	r0, [pc, #208]	; (8006a8c <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 80069ba:	f7ff fbdd 	bl	8006178 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 80069be:	4832      	ldr	r0, [pc, #200]	; (8006a88 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 80069c0:	f00c f87a 	bl	8012ab8 <_ZN13TestInstallerD1Ev>
 80069c4:	482d      	ldr	r0, [pc, #180]	; (8006a7c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 80069c6:	f7ff fc1b 	bl	8006200 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
TEST(RingBuffer_Test_Group, CapacityTest)
 80069ca:	482b      	ldr	r0, [pc, #172]	; (8006a78 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 80069cc:	f00c f874 	bl	8012ab8 <_ZN13TestInstallerD1Ev>
 80069d0:	4827      	ldr	r0, [pc, #156]	; (8006a70 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 80069d2:	f7ff fc59 	bl	8006288 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, LookForTest)
 80069d6:	4825      	ldr	r0, [pc, #148]	; (8006a6c <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 80069d8:	f00c f86e 	bl	8012ab8 <_ZN13TestInstallerD1Ev>
 80069dc:	4821      	ldr	r0, [pc, #132]	; (8006a64 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 80069de:	f7ff fc97 	bl	8006310 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushArrayTest)
 80069e2:	481f      	ldr	r0, [pc, #124]	; (8006a60 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 80069e4:	f00c f868 	bl	8012ab8 <_ZN13TestInstallerD1Ev>
 80069e8:	481b      	ldr	r0, [pc, #108]	; (8006a58 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 80069ea:	f7ff fcd5 	bl	8006398 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 80069ee:	4819      	ldr	r0, [pc, #100]	; (8006a54 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 80069f0:	f00c f862 	bl	8012ab8 <_ZN13TestInstallerD1Ev>
 80069f4:	4815      	ldr	r0, [pc, #84]	; (8006a4c <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 80069f6:	f7ff fd13 	bl	8006420 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 80069fa:	4813      	ldr	r0, [pc, #76]	; (8006a48 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 80069fc:	f00c f85c 	bl	8012ab8 <_ZN13TestInstallerD1Ev>
 8006a00:	480f      	ldr	r0, [pc, #60]	; (8006a40 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8006a02:	f7ff fd51 	bl	80064a8 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
 8006a06:	e071      	b.n	8006aec <_Z41__static_initialization_and_destruction_0ii+0x39c>
 8006a08:	2000049c 	.word	0x2000049c
 8006a0c:	080215cc 	.word	0x080215cc
 8006a10:	08021bf4 	.word	0x08021bf4
 8006a14:	08021c00 	.word	0x08021c00
 8006a18:	200004b8 	.word	0x200004b8
 8006a1c:	200004bc 	.word	0x200004bc
 8006a20:	08021c18 	.word	0x08021c18
 8006a24:	200004d8 	.word	0x200004d8
 8006a28:	200004dc 	.word	0x200004dc
 8006a2c:	08021c28 	.word	0x08021c28
 8006a30:	200004f8 	.word	0x200004f8
 8006a34:	200004fc 	.word	0x200004fc
 8006a38:	08021c3c 	.word	0x08021c3c
 8006a3c:	20000518 	.word	0x20000518
 8006a40:	2000051c 	.word	0x2000051c
 8006a44:	08021c4c 	.word	0x08021c4c
 8006a48:	20000538 	.word	0x20000538
 8006a4c:	2000053c 	.word	0x2000053c
 8006a50:	08021c64 	.word	0x08021c64
 8006a54:	20000558 	.word	0x20000558
 8006a58:	2000055c 	.word	0x2000055c
 8006a5c:	08021c74 	.word	0x08021c74
 8006a60:	20000578 	.word	0x20000578
 8006a64:	2000057c 	.word	0x2000057c
 8006a68:	08021c84 	.word	0x08021c84
 8006a6c:	20000598 	.word	0x20000598
 8006a70:	2000059c 	.word	0x2000059c
 8006a74:	08021c90 	.word	0x08021c90
 8006a78:	200005b8 	.word	0x200005b8
 8006a7c:	200005c4 	.word	0x200005c4
 8006a80:	08021ca0 	.word	0x08021ca0
 8006a84:	08021cb0 	.word	0x08021cb0
 8006a88:	200005e0 	.word	0x200005e0
 8006a8c:	200005e4 	.word	0x200005e4
 8006a90:	08021cc8 	.word	0x08021cc8
 8006a94:	20000600 	.word	0x20000600
 8006a98:	20000604 	.word	0x20000604
 8006a9c:	08021ce0 	.word	0x08021ce0
 8006aa0:	20000620 	.word	0x20000620
 8006aa4:	20000624 	.word	0x20000624
 8006aa8:	08021cfc 	.word	0x08021cfc
 8006aac:	20000640 	.word	0x20000640
 8006ab0:	20000644 	.word	0x20000644
 8006ab4:	08021d10 	.word	0x08021d10
 8006ab8:	20000660 	.word	0x20000660
 8006abc:	20000664 	.word	0x20000664
 8006ac0:	08021d2c 	.word	0x08021d2c
 8006ac4:	20000680 	.word	0x20000680
 8006ac8:	20000684 	.word	0x20000684
 8006acc:	08021d40 	.word	0x08021d40
 8006ad0:	200006a0 	.word	0x200006a0
 8006ad4:	200006a4 	.word	0x200006a4
 8006ad8:	08021d5c 	.word	0x08021d5c
 8006adc:	200006c0 	.word	0x200006c0
 8006ae0:	200006c4 	.word	0x200006c4
 8006ae4:	08021d74 	.word	0x08021d74
 8006ae8:	200006e0 	.word	0x200006e0
TEST(RingBuffer_Test_Group, PopDataTests)
 8006aec:	480d      	ldr	r0, [pc, #52]	; (8006b24 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 8006aee:	f00b ffe3 	bl	8012ab8 <_ZN13TestInstallerD1Ev>
 8006af2:	480d      	ldr	r0, [pc, #52]	; (8006b28 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8006af4:	f7ff fd1c 	bl	8006530 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8006af8:	480c      	ldr	r0, [pc, #48]	; (8006b2c <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 8006afa:	f00b ffdd 	bl	8012ab8 <_ZN13TestInstallerD1Ev>
 8006afe:	480c      	ldr	r0, [pc, #48]	; (8006b30 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8006b00:	f7ff fd5a 	bl	80065b8 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushDataTests)
 8006b04:	480b      	ldr	r0, [pc, #44]	; (8006b34 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8006b06:	f00b ffd7 	bl	8012ab8 <_ZN13TestInstallerD1Ev>
 8006b0a:	480b      	ldr	r0, [pc, #44]	; (8006b38 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 8006b0c:	f7ff fd98 	bl	8006640 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, InitTest)
 8006b10:	480a      	ldr	r0, [pc, #40]	; (8006b3c <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 8006b12:	f00b ffd1 	bl	8012ab8 <_ZN13TestInstallerD1Ev>
 8006b16:	480a      	ldr	r0, [pc, #40]	; (8006b40 <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 8006b18:	f7ff fdd6 	bl	80066c8 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
}
 8006b1c:	bf00      	nop
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	20000518 	.word	0x20000518
 8006b28:	200004fc 	.word	0x200004fc
 8006b2c:	200004f8 	.word	0x200004f8
 8006b30:	200004dc 	.word	0x200004dc
 8006b34:	200004d8 	.word	0x200004d8
 8006b38:	200004bc 	.word	0x200004bc
 8006b3c:	200004b8 	.word	0x200004b8
 8006b40:	2000049c 	.word	0x2000049c

08006b44 <_GLOBAL__sub_I_rx_buffer>:
 8006b44:	b580      	push	{r7, lr}
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006b4c:	2001      	movs	r0, #1
 8006b4e:	f7ff fdff 	bl	8006750 <_Z41__static_initialization_and_destruction_0ii>
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <_GLOBAL__sub_D_rx_buffer>:
 8006b54:	b580      	push	{r7, lr}
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006b5c:	2000      	movs	r0, #0
 8006b5e:	f7ff fdf7 	bl	8006750 <_Z41__static_initialization_and_destruction_0ii>
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <_ZNK10TestResult11getRunCountEv>:

    size_t getTestCount() const
    {
        return testCount_;
    }
    size_t getRunCount() const
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
    {
        return runCount_;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	68db      	ldr	r3, [r3, #12]
    }
 8006b70:	4618      	mov	r0, r3
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <_ZNK10TestResult15getIgnoredCountEv>:
    }
    size_t getFilteredOutCount() const
    {
        return filteredOutCount_;
    }
    size_t getIgnoredCount() const
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
    {
        return ignoredCount_;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	69db      	ldr	r3, [r3, #28]
    }
 8006b88:	4618      	mov	r0, r3
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <_ZNK10TestResult15getFailureCountEv>:
    size_t getFailureCount() const
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
    {
        return failureCount_;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	695b      	ldr	r3, [r3, #20]
    }
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <_ZNK10TestResult9isFailureEv>:

    bool isFailure() const
 8006bac:	b590      	push	{r4, r7, lr}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
    {
        return (getFailureCount() != 0) || (getRunCount() + getIgnoredCount() == 0);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7ff ffed 	bl	8006b94 <_ZNK10TestResult15getFailureCountEv>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10a      	bne.n	8006bd6 <_ZNK10TestResult9isFailureEv+0x2a>
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f7ff ffcf 	bl	8006b64 <_ZNK10TestResult11getRunCountEv>
 8006bc6:	4604      	mov	r4, r0
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f7ff ffd7 	bl	8006b7c <_ZNK10TestResult15getIgnoredCountEv>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	4423      	add	r3, r4
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d101      	bne.n	8006bda <_ZNK10TestResult9isFailureEv+0x2e>
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e000      	b.n	8006bdc <_ZNK10TestResult9isFailureEv+0x30>
 8006bda:	2300      	movs	r3, #0
    }
 8006bdc:	4618      	mov	r0, r3
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd90      	pop	{r4, r7, pc}

08006be4 <_ZN17ConsoleTestOutputC1Ev>:
///////////////////////////////////////////////////////////////////////////////

class ConsoleTestOutput: public TestOutput
{
public:
    explicit ConsoleTestOutput()
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
    {
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f007 fde6 	bl	800e7c0 <_ZN10TestOutputC1Ev>
 8006bf4:	4a03      	ldr	r2, [pc, #12]	; (8006c04 <_ZN17ConsoleTestOutputC1Ev+0x20>)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	601a      	str	r2, [r3, #0]
    }
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3708      	adds	r7, #8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	08025b80 	.word	0x08025b80

08006c08 <_ZN17ConsoleTestOutputD1Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
    {
 8006c10:	4a05      	ldr	r2, [pc, #20]	; (8006c28 <_ZN17ConsoleTestOutputD1Ev+0x20>)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	601a      	str	r2, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f007 fdef 	bl	800e7fc <_ZN10TestOutputD1Ev>
    }
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4618      	mov	r0, r3
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	08025b80 	.word	0x08025b80

08006c2c <_ZN17ConsoleTestOutputD0Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
    }
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f7ff ffe7 	bl	8006c08 <_ZN17ConsoleTestOutputD1Ev>
 8006c3a:	2110      	movs	r1, #16
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f001 fce7 	bl	8008610 <_ZdlPvj>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4618      	mov	r0, r3
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>:
{
    return RunAllTests(ac, (const char *const *) av);
}

int CommandLineTestRunner::RunAllTests(int ac, const char *const *av)
{
 8006c4c:	b5b0      	push	{r4, r5, r7, lr}
 8006c4e:	b098      	sub	sp, #96	; 0x60
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
    int result = 0;
 8006c56:	2300      	movs	r3, #0
 8006c58:	65fb      	str	r3, [r7, #92]	; 0x5c
    ConsoleTestOutput backupOutput;
 8006c5a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7ff ffc0 	bl	8006be4 <_ZN17ConsoleTestOutputC1Ev>

    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8006c64:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006c68:	4935      	ldr	r1, [pc, #212]	; (8006d40 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f004 f87f 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8006c70:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8006c74:	f107 0318 	add.w	r3, r7, #24
 8006c78:	2200      	movs	r2, #0
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f001 ff6a 	bl	8008b54 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>
 8006c80:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006c84:	4618      	mov	r0, r3
 8006c86:	f004 fc2a 	bl	800b4de <_ZN12SimpleStringD1Ev>
    memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
 8006c8a:	f107 0318 	add.w	r3, r7, #24
 8006c8e:	2101      	movs	r1, #1
 8006c90:	4618      	mov	r0, r3
 8006c92:	f001 ff2f 	bl	8008af4 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>
    TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
 8006c96:	f009 fb21 	bl	80102dc <_ZN12TestRegistry18getCurrentRegistryEv>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	3234      	adds	r2, #52	; 0x34
 8006ca0:	6812      	ldr	r2, [r2, #0]
 8006ca2:	f107 0118 	add.w	r1, r7, #24
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	4790      	blx	r2

    {
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8006caa:	f009 fb17 	bl	80102dc <_ZN12TestRegistry18getCurrentRegistryEv>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	f107 0008 	add.w	r0, r7, #8
 8006cb4:	683a      	ldr	r2, [r7, #0]
 8006cb6:	6879      	ldr	r1, [r7, #4]
 8006cb8:	f000 f844 	bl	8006d44 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>
        result = runner.runAllTestsMain();
 8006cbc:	f107 0308 	add.w	r3, r7, #8
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 f899 	bl	8006df8 <_ZN21CommandLineTestRunner15runAllTestsMainEv>
 8006cc6:	65f8      	str	r0, [r7, #92]	; 0x5c
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8006cc8:	f107 0308 	add.w	r3, r7, #8
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f000 f863 	bl	8006d98 <_ZN21CommandLineTestRunnerD1Ev>
    }

    if (result == 0) {
 8006cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10c      	bne.n	8006cf2 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xa6>
        backupOutput << memLeakWarn.FinalReport(0);
 8006cd8:	f107 0318 	add.w	r3, r7, #24
 8006cdc:	2100      	movs	r1, #0
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f002 f83a 	bl	8008d58 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006cea:	4611      	mov	r1, r2
 8006cec:	4618      	mov	r0, r3
 8006cee:	f007 fe27 	bl	800e940 <_ZlsR10TestOutputPKc>
    }
    TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);
 8006cf2:	f009 faf3 	bl	80102dc <_ZN12TestRegistry18getCurrentRegistryEv>
 8006cf6:	4604      	mov	r4, r0
 8006cf8:	6823      	ldr	r3, [r4, #0]
 8006cfa:	3344      	adds	r3, #68	; 0x44
 8006cfc:	681d      	ldr	r5, [r3, #0]
 8006cfe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006d02:	490f      	ldr	r1, [pc, #60]	; (8006d40 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8006d04:	4618      	mov	r0, r3
 8006d06:	f004 f832 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8006d0a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006d0e:	4619      	mov	r1, r3
 8006d10:	4620      	mov	r0, r4
 8006d12:	47a8      	blx	r5
 8006d14:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f004 fbe0 	bl	800b4de <_ZN12SimpleStringD1Ev>
    return result;
 8006d1e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8006d20:	f107 0318 	add.w	r3, r7, #24
 8006d24:	4618      	mov	r0, r3
 8006d26:	f001 ff4d 	bl	8008bc4 <_ZN23MemoryLeakWarningPluginD1Ev>
    ConsoleTestOutput backupOutput;
 8006d2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7ff ff6a 	bl	8006c08 <_ZN17ConsoleTestOutputD1Ev>
    return result;
 8006d34:	4623      	mov	r3, r4
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3760      	adds	r7, #96	; 0x60
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bdb0      	pop	{r4, r5, r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	08021d88 	.word	0x08021d88

08006d44 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>:

CommandLineTestRunner::CommandLineTestRunner(int ac, const char *const *av, TestRegistry* registry) :
 8006d44:	b590      	push	{r4, r7, lr}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
 8006d50:	603b      	str	r3, [r7, #0]
    output_(NULLPTR), arguments_(NULLPTR), registry_(registry)
 8006d52:	4a0f      	ldr	r2, [pc, #60]	; (8006d90 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x4c>)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	601a      	str	r2, [r3, #0]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	605a      	str	r2, [r3, #4]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	609a      	str	r2, [r3, #8]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	60da      	str	r2, [r3, #12]
{
    arguments_ = new CommandLineArguments(ac, av);
 8006d6a:	2241      	movs	r2, #65	; 0x41
 8006d6c:	4909      	ldr	r1, [pc, #36]	; (8006d94 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x50>)
 8006d6e:	2038      	movs	r0, #56	; 0x38
 8006d70:	f001 fc3a 	bl	80085e8 <_ZnwjPKci>
 8006d74:	4604      	mov	r4, r0
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	68b9      	ldr	r1, [r7, #8]
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	f00c f84a 	bl	8012e14 <_ZN20CommandLineArgumentsC1EiPKPKc>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	609c      	str	r4, [r3, #8]
}
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	4618      	mov	r0, r3
 8006d88:	3714      	adds	r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd90      	pop	{r4, r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	0802550c 	.word	0x0802550c
 8006d94:	08021d9c 	.word	0x08021d9c

08006d98 <_ZN21CommandLineTestRunnerD1Ev>:

CommandLineTestRunner::~CommandLineTestRunner()
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	4a0c      	ldr	r2, [pc, #48]	; (8006dd4 <_ZN21CommandLineTestRunnerD1Ev+0x3c>)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	601a      	str	r2, [r3, #0]
{
    delete arguments_;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d004      	beq.n	8006db8 <_ZN21CommandLineTestRunnerD1Ev+0x20>
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	3204      	adds	r2, #4
 8006db2:	6812      	ldr	r2, [r2, #0]
 8006db4:	4618      	mov	r0, r3
 8006db6:	4790      	blx	r2
    delete output_;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d004      	beq.n	8006dca <_ZN21CommandLineTestRunnerD1Ev+0x32>
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	3204      	adds	r2, #4
 8006dc4:	6812      	ldr	r2, [r2, #0]
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	4790      	blx	r2
}
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	0802550c 	.word	0x0802550c

08006dd8 <_ZN21CommandLineTestRunnerD0Ev>:
CommandLineTestRunner::~CommandLineTestRunner()
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
}
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f7ff ffd9 	bl	8006d98 <_ZN21CommandLineTestRunnerD1Ev>
 8006de6:	2110      	movs	r1, #16
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f001 fc11 	bl	8008610 <_ZdlPvj>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4618      	mov	r0, r3
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <_ZN21CommandLineTestRunner15runAllTestsMainEv>:

int CommandLineTestRunner::runAllTestsMain()
{
 8006df8:	b5b0      	push	{r4, r5, r7, lr}
 8006dfa:	b08c      	sub	sp, #48	; 0x30
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
    int testResult = 1;
 8006e00:	2301      	movs	r3, #1
 8006e02:	62fb      	str	r3, [r7, #44]	; 0x2c

    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8006e04:	f107 031c 	add.w	r3, r7, #28
 8006e08:	4929      	ldr	r1, [pc, #164]	; (8006eb0 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f003 ffaf 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8006e10:	f107 021c 	add.w	r2, r7, #28
 8006e14:	f107 0308 	add.w	r3, r7, #8
 8006e18:	4611      	mov	r1, r2
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f008 fe1c 	bl	800fa58 <_ZN16SetPointerPluginC1ERK12SimpleString>
 8006e20:	f107 031c 	add.w	r3, r7, #28
 8006e24:	4618      	mov	r0, r3
 8006e26:	f004 fb5a 	bl	800b4de <_ZN12SimpleStringD1Ev>
    registry_->installPlugin(&pPlugin);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68da      	ldr	r2, [r3, #12]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	3334      	adds	r3, #52	; 0x34
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f107 0108 	add.w	r1, r7, #8
 8006e3c:	4610      	mov	r0, r2
 8006e3e:	4798      	blx	r3

    if (parseArguments(registry_->getFirstPlugin()))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	68da      	ldr	r2, [r3, #12]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	333c      	adds	r3, #60	; 0x3c
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4610      	mov	r0, r2
 8006e50:	4798      	blx	r3
 8006e52:	4603      	mov	r3, r0
 8006e54:	4619      	mov	r1, r3
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 fa3e 	bl	80072d8 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d003      	beq.n	8006e6a <_ZN21CommandLineTestRunner15runAllTestsMainEv+0x72>
        testResult = runAllTests();
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f8ac 	bl	8006fc0 <_ZN21CommandLineTestRunner11runAllTestsEv>
 8006e68:	62f8      	str	r0, [r7, #44]	; 0x2c

    registry_->removePluginByName(DEF_PLUGIN_SET_POINTER);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	68dd      	ldr	r5, [r3, #12]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	3344      	adds	r3, #68	; 0x44
 8006e76:	681c      	ldr	r4, [r3, #0]
 8006e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e7c:	490c      	ldr	r1, [pc, #48]	; (8006eb0 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f003 ff75 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8006e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e88:	4619      	mov	r1, r3
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	47a0      	blx	r4
 8006e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e92:	4618      	mov	r0, r3
 8006e94:	f004 fb23 	bl	800b4de <_ZN12SimpleStringD1Ev>
    return testResult;
 8006e98:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8006e9a:	f107 0308 	add.w	r3, r7, #8
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f000 faaa 	bl	80073f8 <_ZN16SetPointerPluginD1Ev>
    return testResult;
 8006ea4:	4623      	mov	r3, r4
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3730      	adds	r7, #48	; 0x30
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bdb0      	pop	{r4, r5, r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	08021dc0 	.word	0x08021dc0

08006eb4 <_ZN21CommandLineTestRunner17initializeTestRunEv>:

void CommandLineTestRunner::initializeTestRun()
{
 8006eb4:	b5b0      	push	{r4, r5, r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
    registry_->setGroupFilters(arguments_->getGroupFilters());
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	68dd      	ldr	r5, [r3, #12]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	3330      	adds	r3, #48	; 0x30
 8006ec8:	681c      	ldr	r4, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f00c fce0 	bl	8013894 <_ZNK20CommandLineArguments15getGroupFiltersEv>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	4628      	mov	r0, r5
 8006eda:	47a0      	blx	r4
    registry_->setNameFilters(arguments_->getNameFilters());
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	68dd      	ldr	r5, [r3, #12]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	332c      	adds	r3, #44	; 0x2c
 8006ee8:	681c      	ldr	r4, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f00c fcdc 	bl	80138ac <_ZNK20CommandLineArguments14getNameFiltersEv>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	4628      	mov	r0, r5
 8006efa:	47a0      	blx	r4

    if (arguments_->isVerbose()) output_->verbose(TestOutput::level_verbose);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	4618      	mov	r0, r3
 8006f02:	f00c fc2b 	bl	801375c <_ZNK20CommandLineArguments9isVerboseEv>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d009      	beq.n	8006f20 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x6c>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685a      	ldr	r2, [r3, #4]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	3320      	adds	r3, #32
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2101      	movs	r1, #1
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	4798      	blx	r3
    if (arguments_->isVeryVerbose()) output_->verbose(TestOutput::level_veryVerbose);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	4618      	mov	r0, r3
 8006f26:	f00c fc25 	bl	8013774 <_ZNK20CommandLineArguments13isVeryVerboseEv>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d009      	beq.n	8006f44 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x90>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685a      	ldr	r2, [r3, #4]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	3320      	adds	r3, #32
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2102      	movs	r1, #2
 8006f40:	4610      	mov	r0, r2
 8006f42:	4798      	blx	r3
    if (arguments_->isColor()) output_->color();
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f00c fc1f 	bl	801378c <_ZNK20CommandLineArguments7isColorEv>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d008      	beq.n	8006f66 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xb2>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685a      	ldr	r2, [r3, #4]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	3324      	adds	r3, #36	; 0x24
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4610      	mov	r0, r2
 8006f64:	4798      	blx	r3
    if (arguments_->runTestsInSeperateProcess()) registry_->setRunTestsInSeperateProcess();
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f00c fc4a 	bl	8013804 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d008      	beq.n	8006f88 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xd4>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	68da      	ldr	r2, [r3, #12]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3360      	adds	r3, #96	; 0x60
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4610      	mov	r0, r2
 8006f86:	4798      	blx	r3
    if (arguments_->isRunIgnored()) registry_->setRunIgnored();
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f00c fc2d 	bl	80137ec <_ZNK20CommandLineArguments12isRunIgnoredEv>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d004      	beq.n	8006fa2 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xee>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f009 fa19 	bl	80103d4 <_ZN12TestRegistry13setRunIgnoredEv>
    if (arguments_->isCrashingOnFail()) UtestShell::setCrashOnFail();
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f00c fc50 	bl	801384c <_ZNK20CommandLineArguments16isCrashingOnFailEv>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d001      	beq.n	8006fb6 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x102>
 8006fb2:	f00b fadb 	bl	801256c <_ZN10UtestShell14setCrashOnFailEv>
}
 8006fb6:	bf00      	nop
 8006fb8:	3708      	adds	r7, #8
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006fc0 <_ZN21CommandLineTestRunner11runAllTestsEv>:

int CommandLineTestRunner::runAllTests()
{
 8006fc0:	b5b0      	push	{r4, r5, r7, lr}
 8006fc2:	b094      	sub	sp, #80	; 0x50
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
    initializeTestRun();
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f7ff ff73 	bl	8006eb4 <_ZN21CommandLineTestRunner17initializeTestRunEv>
    size_t loopCount = 0;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t failedTestCount = 0;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t failedExecutionCount = 0;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	647b      	str	r3, [r7, #68]	; 0x44
    size_t repeatCount = arguments_->getRepeatCount();
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f00c fc1c 	bl	801381c <_ZNK20CommandLineArguments14getRepeatCountEv>
 8006fe4:	6438      	str	r0, [r7, #64]	; 0x40

    if (arguments_->isListingTestGroupNames())
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f00c fbda 	bl	80137a4 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d019      	beq.n	800702a <_ZN21CommandLineTestRunner11runAllTestsEv+0x6a>
    {
        TestResult tr(*output_);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	f107 0308 	add.w	r3, r7, #8
 8006ffe:	4611      	mov	r1, r2
 8007000:	4618      	mov	r0, r3
 8007002:	f009 fbaf 	bl	8010764 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupNames(tr);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	68da      	ldr	r2, [r3, #12]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	3320      	adds	r3, #32
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f107 0108 	add.w	r1, r7, #8
 8007018:	4610      	mov	r0, r2
 800701a:	4798      	blx	r3
        return 0;
 800701c:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800701e:	f107 0308 	add.w	r3, r7, #8
 8007022:	4618      	mov	r0, r3
 8007024:	f009 fbd6 	bl	80107d4 <_ZN10TestResultD1Ev>
 8007028:	e0e1      	b.n	80071ee <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestGroupAndCaseNames())
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	4618      	mov	r0, r3
 8007030:	f00c fbc4 	bl	80137bc <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d019      	beq.n	800706e <_ZN21CommandLineTestRunner11runAllTestsEv+0xae>
    {
        TestResult tr(*output_);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685a      	ldr	r2, [r3, #4]
 800703e:	f107 0308 	add.w	r3, r7, #8
 8007042:	4611      	mov	r1, r2
 8007044:	4618      	mov	r0, r3
 8007046:	f009 fb8d 	bl	8010764 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupAndCaseNames(tr);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	68da      	ldr	r2, [r3, #12]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	3324      	adds	r3, #36	; 0x24
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f107 0108 	add.w	r1, r7, #8
 800705c:	4610      	mov	r0, r2
 800705e:	4798      	blx	r3
        return 0;
 8007060:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8007062:	f107 0308 	add.w	r3, r7, #8
 8007066:	4618      	mov	r0, r3
 8007068:	f009 fbb4 	bl	80107d4 <_ZN10TestResultD1Ev>
 800706c:	e0bf      	b.n	80071ee <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestLocations())
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	4618      	mov	r0, r3
 8007074:	f00c fbae 	bl	80137d4 <_ZNK20CommandLineArguments22isListingTestLocationsEv>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d019      	beq.n	80070b2 <_ZN21CommandLineTestRunner11runAllTestsEv+0xf2>
    {
        TestResult tr(*output_);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	f107 0308 	add.w	r3, r7, #8
 8007086:	4611      	mov	r1, r2
 8007088:	4618      	mov	r0, r3
 800708a:	f009 fb6b 	bl	8010764 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestLocations(tr);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	68da      	ldr	r2, [r3, #12]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	3328      	adds	r3, #40	; 0x28
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f107 0108 	add.w	r1, r7, #8
 80070a0:	4610      	mov	r0, r2
 80070a2:	4798      	blx	r3
        return 0;
 80070a4:	2400      	movs	r4, #0
        TestResult tr(*output_);
 80070a6:	f107 0308 	add.w	r3, r7, #8
 80070aa:	4618      	mov	r0, r3
 80070ac:	f009 fb92 	bl	80107d4 <_ZN10TestResultD1Ev>
 80070b0:	e09d      	b.n	80071ee <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isReversing())
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	4618      	mov	r0, r3
 80070b8:	f00c fbbc 	bl	8013834 <_ZNK20CommandLineArguments11isReversingEv>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d008      	beq.n	80070d4 <_ZN21CommandLineTestRunner11runAllTestsEv+0x114>
        registry_->reverseTests();
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	68da      	ldr	r2, [r3, #12]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	331c      	adds	r3, #28
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4610      	mov	r0, r2
 80070d2:	4798      	blx	r3

    if (arguments_->isShuffling())
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	4618      	mov	r0, r3
 80070da:	f00c fbc3 	bl	8013864 <_ZNK20CommandLineArguments11isShufflingEv>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d023      	beq.n	800712c <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
    {
        output_->print("Test order shuffling enabled with seed: ");
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685a      	ldr	r2, [r3, #4]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	332c      	adds	r3, #44	; 0x2c
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4941      	ldr	r1, [pc, #260]	; (80071f8 <_ZN21CommandLineTestRunner11runAllTestsEv+0x238>)
 80070f4:	4610      	mov	r0, r2
 80070f6:	4798      	blx	r3
        output_->print(arguments_->getShuffleSeed());
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685d      	ldr	r5, [r3, #4]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	3334      	adds	r3, #52	; 0x34
 8007104:	681c      	ldr	r4, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	4618      	mov	r0, r3
 800710c:	f00c fbb6 	bl	801387c <_ZNK20CommandLineArguments14getShuffleSeedEv>
 8007110:	4603      	mov	r3, r0
 8007112:	4619      	mov	r1, r3
 8007114:	4628      	mov	r0, r5
 8007116:	47a0      	blx	r4
        output_->print("\n");
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685a      	ldr	r2, [r3, #4]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	332c      	adds	r3, #44	; 0x2c
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4935      	ldr	r1, [pc, #212]	; (80071fc <_ZN21CommandLineTestRunner11runAllTestsEv+0x23c>)
 8007128:	4610      	mov	r0, r2
 800712a:	4798      	blx	r3
    }
    while (loopCount++ < repeatCount) {
 800712c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800712e:	1c5a      	adds	r2, r3, #1
 8007130:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007132:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007134:	429a      	cmp	r2, r3
 8007136:	bf8c      	ite	hi
 8007138:	2301      	movhi	r3, #1
 800713a:	2300      	movls	r3, #0
 800713c:	b2db      	uxtb	r3, r3
 800713e:	2b00      	cmp	r3, #0
 8007140:	d04e      	beq.n	80071e0 <_ZN21CommandLineTestRunner11runAllTestsEv+0x220>

        if (arguments_->isShuffling())
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	4618      	mov	r0, r3
 8007148:	f00c fb8c 	bl	8013864 <_ZNK20CommandLineArguments11isShufflingEv>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00f      	beq.n	8007172 <_ZN21CommandLineTestRunner11runAllTestsEv+0x1b2>
            registry_->shuffleTests(arguments_->getShuffleSeed());
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	68dd      	ldr	r5, [r3, #12]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	3318      	adds	r3, #24
 800715e:	681c      	ldr	r4, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	4618      	mov	r0, r3
 8007166:	f00c fb89 	bl	801387c <_ZNK20CommandLineArguments14getShuffleSeedEv>
 800716a:	4603      	mov	r3, r0
 800716c:	4619      	mov	r1, r3
 800716e:	4628      	mov	r0, r5
 8007170:	47a0      	blx	r4

        output_->printTestRun(loopCount, repeatCount);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6858      	ldr	r0, [r3, #4]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	3340      	adds	r3, #64	; 0x40
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007182:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007184:	4798      	blx	r3
        TestResult tr(*output_);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	685a      	ldr	r2, [r3, #4]
 800718a:	f107 0308 	add.w	r3, r7, #8
 800718e:	4611      	mov	r1, r2
 8007190:	4618      	mov	r0, r3
 8007192:	f009 fae7 	bl	8010764 <_ZN10TestResultC1ER10TestOutput>
        registry_->runAllTests(tr);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	68da      	ldr	r2, [r3, #12]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	3314      	adds	r3, #20
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f107 0108 	add.w	r1, r7, #8
 80071a8:	4610      	mov	r0, r2
 80071aa:	4798      	blx	r3
        failedTestCount += tr.getFailureCount();
 80071ac:	f107 0308 	add.w	r3, r7, #8
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7ff fcef 	bl	8006b94 <_ZNK10TestResult15getFailureCountEv>
 80071b6:	4602      	mov	r2, r0
 80071b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071ba:	4413      	add	r3, r2
 80071bc:	64bb      	str	r3, [r7, #72]	; 0x48
        if (tr.isFailure()) {
 80071be:	f107 0308 	add.w	r3, r7, #8
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7ff fcf2 	bl	8006bac <_ZNK10TestResult9isFailureEv>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d002      	beq.n	80071d4 <_ZN21CommandLineTestRunner11runAllTestsEv+0x214>
            failedExecutionCount++;
 80071ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071d0:	3301      	adds	r3, #1
 80071d2:	647b      	str	r3, [r7, #68]	; 0x44
        TestResult tr(*output_);
 80071d4:	f107 0308 	add.w	r3, r7, #8
 80071d8:	4618      	mov	r0, r3
 80071da:	f009 fafb 	bl	80107d4 <_ZN10TestResultD1Ev>
    while (loopCount++ < repeatCount) {
 80071de:	e7a5      	b.n	800712c <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
        }
    }
    return (int) (failedTestCount != 0 ? failedTestCount : failedExecutionCount);
 80071e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d001      	beq.n	80071ea <_ZN21CommandLineTestRunner11runAllTestsEv+0x22a>
 80071e6:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 80071e8:	e000      	b.n	80071ec <_ZN21CommandLineTestRunner11runAllTestsEv+0x22c>
 80071ea:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80071ec:	bf00      	nop
 80071ee:	4623      	mov	r3, r4
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3750      	adds	r7, #80	; 0x50
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bdb0      	pop	{r4, r5, r7, pc}
 80071f8:	08021dd4 	.word	0x08021dd4
 80071fc:	08021e00 	.word	0x08021e00

08007200 <_ZN21CommandLineTestRunner20createTeamCityOutputEv>:

TestOutput* CommandLineTestRunner::createTeamCityOutput()
{
 8007200:	b590      	push	{r4, r7, lr}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
    return new TeamCityTestOutput;
 8007208:	229d      	movs	r2, #157	; 0x9d
 800720a:	4906      	ldr	r1, [pc, #24]	; (8007224 <_ZN21CommandLineTestRunner20createTeamCityOutputEv+0x24>)
 800720c:	201c      	movs	r0, #28
 800720e:	f001 f9eb 	bl	80085e8 <_ZnwjPKci>
 8007212:	4604      	mov	r4, r0
 8007214:	4620      	mov	r0, r4
 8007216:	f005 f955 	bl	800c4c4 <_ZN18TeamCityTestOutputC1Ev>
 800721a:	4623      	mov	r3, r4
}
 800721c:	4618      	mov	r0, r3
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	bd90      	pop	{r4, r7, pc}
 8007224:	08021d9c 	.word	0x08021d9c

08007228 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString>:

TestOutput* CommandLineTestRunner::createJUnitOutput(const SimpleString& packageName)
{
 8007228:	b590      	push	{r4, r7, lr}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
    JUnitTestOutput* junitOutput = new JUnitTestOutput;
 8007232:	22a2      	movs	r2, #162	; 0xa2
 8007234:	490a      	ldr	r1, [pc, #40]	; (8007260 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x38>)
 8007236:	2014      	movs	r0, #20
 8007238:	f001 f9d6 	bl	80085e8 <_ZnwjPKci>
 800723c:	4604      	mov	r4, r0
 800723e:	4620      	mov	r0, r4
 8007240:	f000 f980 	bl	8007544 <_ZN15JUnitTestOutputC1Ev>
 8007244:	60fc      	str	r4, [r7, #12]
    if (junitOutput != NULLPTR) {
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d003      	beq.n	8007254 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x2c>
      junitOutput->setPackageName(packageName);
 800724c:	6839      	ldr	r1, [r7, #0]
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f000 fbb2 	bl	80079b8 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>
    }
    return junitOutput;
 8007254:	68fb      	ldr	r3, [r7, #12]
}
 8007256:	4618      	mov	r0, r3
 8007258:	3714      	adds	r7, #20
 800725a:	46bd      	mov	sp, r7
 800725c:	bd90      	pop	{r4, r7, pc}
 800725e:	bf00      	nop
 8007260:	08021d9c 	.word	0x08021d9c

08007264 <_ZN21CommandLineTestRunner19createConsoleOutputEv>:

TestOutput* CommandLineTestRunner::createConsoleOutput()
{
 8007264:	b590      	push	{r4, r7, lr}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
    return new ConsoleTestOutput;
 800726c:	22ab      	movs	r2, #171	; 0xab
 800726e:	4906      	ldr	r1, [pc, #24]	; (8007288 <_ZN21CommandLineTestRunner19createConsoleOutputEv+0x24>)
 8007270:	2010      	movs	r0, #16
 8007272:	f001 f9b9 	bl	80085e8 <_ZnwjPKci>
 8007276:	4604      	mov	r4, r0
 8007278:	4620      	mov	r0, r4
 800727a:	f7ff fcb3 	bl	8006be4 <_ZN17ConsoleTestOutputC1Ev>
 800727e:	4623      	mov	r3, r4
}
 8007280:	4618      	mov	r0, r3
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	bd90      	pop	{r4, r7, pc}
 8007288:	08021d9c 	.word	0x08021d9c

0800728c <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_>:

TestOutput* CommandLineTestRunner::createCompositeOutput(TestOutput* outputOne, TestOutput* outputTwo)
{
 800728c:	b590      	push	{r4, r7, lr}
 800728e:	b087      	sub	sp, #28
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
  CompositeTestOutput* composite = new CompositeTestOutput;
 8007298:	22b0      	movs	r2, #176	; 0xb0
 800729a:	490e      	ldr	r1, [pc, #56]	; (80072d4 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_+0x48>)
 800729c:	2018      	movs	r0, #24
 800729e:	f001 f9a3 	bl	80085e8 <_ZnwjPKci>
 80072a2:	4604      	mov	r4, r0
 80072a4:	4620      	mov	r0, r4
 80072a6:	f007 ff83 	bl	800f1b0 <_ZN19CompositeTestOutputC1Ev>
 80072aa:	617c      	str	r4, [r7, #20]
  composite->setOutputOne(outputOne);
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	335c      	adds	r3, #92	; 0x5c
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68b9      	ldr	r1, [r7, #8]
 80072b6:	6978      	ldr	r0, [r7, #20]
 80072b8:	4798      	blx	r3
  composite->setOutputTwo(outputTwo);
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	3360      	adds	r3, #96	; 0x60
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	6879      	ldr	r1, [r7, #4]
 80072c4:	6978      	ldr	r0, [r7, #20]
 80072c6:	4798      	blx	r3
  return composite;
 80072c8:	697b      	ldr	r3, [r7, #20]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	371c      	adds	r7, #28
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd90      	pop	{r4, r7, pc}
 80072d2:	bf00      	nop
 80072d4:	08021d9c 	.word	0x08021d9c

080072d8 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>:

bool CommandLineTestRunner::parseArguments(TestPlugin* plugin)
{
 80072d8:	b5b0      	push	{r4, r5, r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  if (!arguments_->parse(plugin)) {
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	6839      	ldr	r1, [r7, #0]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f00b fe4f 	bl	8012f8c <_ZN20CommandLineArguments5parseEP10TestPlugin>
 80072ee:	4603      	mov	r3, r0
 80072f0:	f083 0301 	eor.w	r3, r3, #1
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d029      	beq.n	800734e <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x76>
    output_ = createConsoleOutput();
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	3310      	adds	r3, #16
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	4798      	blx	r3
 8007306:	4602      	mov	r2, r0
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	605a      	str	r2, [r3, #4]
    output_->print((arguments_->needHelp()) ? arguments_->help() : arguments_->usage());
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685d      	ldr	r5, [r3, #4]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	332c      	adds	r3, #44	; 0x2c
 8007318:	681c      	ldr	r4, [r3, #0]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	4618      	mov	r0, r3
 8007320:	f00c fa10 	bl	8013744 <_ZNK20CommandLineArguments8needHelpEv>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d006      	beq.n	8007338 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x60>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	4618      	mov	r0, r3
 8007330:	f00c f9fa 	bl	8013728 <_ZNK20CommandLineArguments4helpEv>
 8007334:	4603      	mov	r3, r0
 8007336:	e005      	b.n	8007344 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x6c>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	4618      	mov	r0, r3
 800733e:	f00c f9e5 	bl	801370c <_ZNK20CommandLineArguments5usageEv>
 8007342:	4603      	mov	r3, r0
 8007344:	4619      	mov	r1, r3
 8007346:	4628      	mov	r0, r5
 8007348:	47a0      	blx	r4
    return false;
 800734a:	2300      	movs	r3, #0
 800734c:	e050      	b.n	80073f0 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x118>
  }

  if (arguments_->isJUnitOutput()) {
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	4618      	mov	r0, r3
 8007354:	f00d f84c 	bl	80143f0 <_ZNK20CommandLineArguments13isJUnitOutputEv>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d02c      	beq.n	80073b8 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0xe0>
    output_= createJUnitOutput(arguments_->getPackageName());
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	330c      	adds	r3, #12
 8007364:	681c      	ldr	r4, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	4618      	mov	r0, r3
 800736c:	f00d f864 	bl	8014438 <_ZNK20CommandLineArguments14getPackageNameEv>
 8007370:	4603      	mov	r3, r0
 8007372:	4619      	mov	r1, r3
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	47a0      	blx	r4
 8007378:	4602      	mov	r2, r0
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	605a      	str	r2, [r3, #4]
    if (arguments_->isVerbose())
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	4618      	mov	r0, r3
 8007384:	f00c f9ea 	bl	801375c <_ZNK20CommandLineArguments9isVerboseEv>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d02f      	beq.n	80073ee <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
      output_ = createCompositeOutput(output_, createConsoleOutput());
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	3314      	adds	r3, #20
 8007394:	681c      	ldr	r4, [r3, #0]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	685d      	ldr	r5, [r3, #4]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	3310      	adds	r3, #16
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	4798      	blx	r3
 80073a6:	4603      	mov	r3, r0
 80073a8:	461a      	mov	r2, r3
 80073aa:	4629      	mov	r1, r5
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	47a0      	blx	r4
 80073b0:	4602      	mov	r2, r0
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	605a      	str	r2, [r3, #4]
 80073b6:	e01a      	b.n	80073ee <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else if (arguments_->isTeamCityOutput()) {
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	4618      	mov	r0, r3
 80073be:	f00d f829 	bl	8014414 <_ZNK20CommandLineArguments16isTeamCityOutputEv>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d009      	beq.n	80073dc <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x104>
    output_ = createTeamCityOutput();
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	3308      	adds	r3, #8
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	4798      	blx	r3
 80073d4:	4602      	mov	r2, r0
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	605a      	str	r2, [r3, #4]
 80073da:	e008      	b.n	80073ee <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else
    output_ = createConsoleOutput();
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	3310      	adds	r3, #16
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	4798      	blx	r3
 80073e8:	4602      	mov	r2, r0
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	605a      	str	r2, [r3, #4]
  return true;
 80073ee:	2301      	movs	r3, #1
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3708      	adds	r7, #8
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bdb0      	pop	{r4, r5, r7, pc}

080073f8 <_ZN16SetPointerPluginD1Ev>:
//
///////////////////////////////////////////////////////////////////////////////

extern void CppUTestStore(void **location);

class SetPointerPlugin: public TestPlugin
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	4a05      	ldr	r2, [pc, #20]	; (8007418 <_ZN16SetPointerPluginD1Ev+0x20>)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	601a      	str	r2, [r3, #0]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4618      	mov	r0, r3
 800740a:	f008 f9e7 	bl	800f7dc <_ZN10TestPluginD1Ev>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4618      	mov	r0, r3
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	08025c8c 	.word	0x08025c8c

0800741c <_ZN16SetPointerPluginD0Ev>:
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f7ff ffe7 	bl	80073f8 <_ZN16SetPointerPluginD1Ev>
 800742a:	2114      	movs	r1, #20
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f001 f8ef 	bl	8008610 <_ZdlPvj>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4618      	mov	r0, r3
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <_ZNK10TestResult13getCheckCountEv>:
    size_t getCheckCount() const
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
        return checkCount_;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	691b      	ldr	r3, [r3, #16]
    }
 8007448:	4618      	mov	r0, r3
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <_ZN23JUnitTestCaseResultNodeC1Ev>:
#include "CppUTest/TestFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

struct JUnitTestCaseResultNode
{
    JUnitTestCaseResultNode() :
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
        execTime_(0), failure_(NULLPTR), ignored_(false), lineNumber_ (0), checkCount_ (0), next_(NULLPTR)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4910      	ldr	r1, [pc, #64]	; (80074a0 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8007460:	4618      	mov	r0, r3
 8007462:	f003 fc84 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	609a      	str	r2, [r3, #8]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	60da      	str	r2, [r3, #12]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	741a      	strb	r2, [r3, #16]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	3314      	adds	r3, #20
 800747c:	4908      	ldr	r1, [pc, #32]	; (80074a0 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 800747e:	4618      	mov	r0, r3
 8007480:	f003 fc75 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	61da      	str	r2, [r3, #28]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	621a      	str	r2, [r3, #32]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4618      	mov	r0, r3
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	08021e04 	.word	0x08021e04

080074a4 <_ZN20JUnitTestGroupResultC1Ev>:
    JUnitTestCaseResultNode* next_;
};

struct JUnitTestGroupResult
{
    JUnitTestGroupResult() :
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
        testCount_(0), failureCount_(0), totalCheckCount_(0), startTime_(0), groupExecTime_(0), head_(NULLPTR), tail_(NULLPTR)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	601a      	str	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	605a      	str	r2, [r3, #4]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	609a      	str	r2, [r3, #8]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	60da      	str	r2, [r3, #12]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	611a      	str	r2, [r3, #16]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	3314      	adds	r3, #20
 80074ce:	4907      	ldr	r1, [pc, #28]	; (80074ec <_ZN20JUnitTestGroupResultC1Ev+0x48>)
 80074d0:	4618      	mov	r0, r3
 80074d2:	f003 fc4c 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	61da      	str	r2, [r3, #28]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	621a      	str	r2, [r3, #32]
    {
    }
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4618      	mov	r0, r3
 80074e6:	3708      	adds	r7, #8
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	08021e04 	.word	0x08021e04

080074f0 <_ZN20JUnitTestGroupResultD1Ev>:
struct JUnitTestGroupResult
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	3314      	adds	r3, #20
 80074fc:	4618      	mov	r0, r3
 80074fe:	f003 ffee 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4618      	mov	r0, r3
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <_ZN19JUnitTestOutputImplC1Ev>:
    SimpleString group_;
    JUnitTestCaseResultNode* head_;
    JUnitTestCaseResultNode* tail_;
};

struct JUnitTestOutputImpl
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4618      	mov	r0, r3
 8007518:	f7ff ffc4 	bl	80074a4 <_ZN20JUnitTestGroupResultC1Ev>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	3328      	adds	r3, #40	; 0x28
 8007520:	4907      	ldr	r1, [pc, #28]	; (8007540 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 8007522:	4618      	mov	r0, r3
 8007524:	f003 fc23 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	3330      	adds	r3, #48	; 0x30
 800752c:	4904      	ldr	r1, [pc, #16]	; (8007540 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 800752e:	4618      	mov	r0, r3
 8007530:	f003 fc1d 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4618      	mov	r0, r3
 8007538:	3708      	adds	r7, #8
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	08021e04 	.word	0x08021e04

08007544 <_ZN15JUnitTestOutputC1Ev>:
    PlatformSpecificFile file_;
    SimpleString package_;
    SimpleString stdOutput_;
};

JUnitTestOutput::JUnitTestOutput() :
 8007544:	b590      	push	{r4, r7, lr}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
    impl_(new JUnitTestOutputImpl)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4618      	mov	r0, r3
 8007550:	f007 f936 	bl	800e7c0 <_ZN10TestOutputC1Ev>
 8007554:	4a09      	ldr	r2, [pc, #36]	; (800757c <_ZN15JUnitTestOutputC1Ev+0x38>)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	601a      	str	r2, [r3, #0]
 800755a:	224d      	movs	r2, #77	; 0x4d
 800755c:	4908      	ldr	r1, [pc, #32]	; (8007580 <_ZN15JUnitTestOutputC1Ev+0x3c>)
 800755e:	2038      	movs	r0, #56	; 0x38
 8007560:	f001 f842 	bl	80085e8 <_ZnwjPKci>
 8007564:	4604      	mov	r4, r0
 8007566:	4620      	mov	r0, r4
 8007568:	f7ff ffd0 	bl	800750c <_ZN19JUnitTestOutputImplC1Ev>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	611c      	str	r4, [r3, #16]
{
}
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4618      	mov	r0, r3
 8007574:	370c      	adds	r7, #12
 8007576:	46bd      	mov	sp, r7
 8007578:	bd90      	pop	{r4, r7, pc}
 800757a:	bf00      	nop
 800757c:	0802552c 	.word	0x0802552c
 8007580:	08021e08 	.word	0x08021e08

08007584 <_ZN19JUnitTestOutputImplD1Ev>:
struct JUnitTestOutputImpl
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	3330      	adds	r3, #48	; 0x30
 8007590:	4618      	mov	r0, r3
 8007592:	f003 ffa4 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	3328      	adds	r3, #40	; 0x28
 800759a:	4618      	mov	r0, r3
 800759c:	f003 ff9f 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7ff ffa4 	bl	80074f0 <_ZN20JUnitTestGroupResultD1Ev>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4618      	mov	r0, r3
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
	...

080075b4 <_ZN15JUnitTestOutputD1Ev>:

JUnitTestOutput::~JUnitTestOutput()
 80075b4:	b590      	push	{r4, r7, lr}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	4a0c      	ldr	r2, [pc, #48]	; (80075f0 <_ZN15JUnitTestOutputD1Ev+0x3c>)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	601a      	str	r2, [r3, #0]
{
    resetTestGroupResult();
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f838 	bl	8007638 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
    delete impl_;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	691c      	ldr	r4, [r3, #16]
 80075cc:	2c00      	cmp	r4, #0
 80075ce:	d006      	beq.n	80075de <_ZN15JUnitTestOutputD1Ev+0x2a>
 80075d0:	4620      	mov	r0, r4
 80075d2:	f7ff ffd7 	bl	8007584 <_ZN19JUnitTestOutputImplD1Ev>
 80075d6:	2138      	movs	r1, #56	; 0x38
 80075d8:	4620      	mov	r0, r4
 80075da:	f001 f819 	bl	8008610 <_ZdlPvj>
JUnitTestOutput::~JUnitTestOutput()
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4618      	mov	r0, r3
 80075e2:	f007 f90b 	bl	800e7fc <_ZN10TestOutputD1Ev>
}
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4618      	mov	r0, r3
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd90      	pop	{r4, r7, pc}
 80075f0:	0802552c 	.word	0x0802552c

080075f4 <_ZN15JUnitTestOutputD0Ev>:
JUnitTestOutput::~JUnitTestOutput()
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
}
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f7ff ffd9 	bl	80075b4 <_ZN15JUnitTestOutputD1Ev>
 8007602:	2114      	movs	r1, #20
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f001 f803 	bl	8008610 <_ZdlPvj>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4618      	mov	r0, r3
 800760e:	3708      	adds	r7, #8
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <_ZN23JUnitTestCaseResultNodeD1Ev>:
struct JUnitTestCaseResultNode
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	3314      	adds	r3, #20
 8007620:	4618      	mov	r0, r3
 8007622:	f003 ff5c 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4618      	mov	r0, r3
 800762a:	f003 ff58 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4618      	mov	r0, r3
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <_ZN15JUnitTestOutput20resetTestGroupResultEv>:

void JUnitTestOutput::resetTestGroupResult()
{
 8007638:	b590      	push	{r4, r7, lr}
 800763a:	b087      	sub	sp, #28
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
    impl_->results_.testCount_ = 0;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	2200      	movs	r2, #0
 8007646:	601a      	str	r2, [r3, #0]
    impl_->results_.failureCount_ = 0;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	2200      	movs	r2, #0
 800764e:	605a      	str	r2, [r3, #4]
    impl_->results_.group_ = "";
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	f103 0414 	add.w	r4, r3, #20
 8007658:	f107 0308 	add.w	r3, r7, #8
 800765c:	491d      	ldr	r1, [pc, #116]	; (80076d4 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x9c>)
 800765e:	4618      	mov	r0, r3
 8007660:	f003 fb85 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8007664:	f107 0308 	add.w	r3, r7, #8
 8007668:	4619      	mov	r1, r3
 800766a:	4620      	mov	r0, r4
 800766c:	f003 fbeb 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 8007670:	f107 0308 	add.w	r3, r7, #8
 8007674:	4618      	mov	r0, r3
 8007676:	f003 ff32 	bl	800b4de <_ZN12SimpleStringD1Ev>
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	69db      	ldr	r3, [r3, #28]
 8007680:	617b      	str	r3, [r7, #20]
    while (cur) {
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d018      	beq.n	80076ba <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x82>
        JUnitTestCaseResultNode* tmp = cur->next_;
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768c:	613b      	str	r3, [r7, #16]
        delete cur->failure_;
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d004      	beq.n	80076a0 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x68>
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	3204      	adds	r2, #4
 800769a:	6812      	ldr	r2, [r2, #0]
 800769c:	4618      	mov	r0, r3
 800769e:	4790      	blx	r2
        delete cur;
 80076a0:	697c      	ldr	r4, [r7, #20]
 80076a2:	2c00      	cmp	r4, #0
 80076a4:	d006      	beq.n	80076b4 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x7c>
 80076a6:	4620      	mov	r0, r4
 80076a8:	f7ff ffb4 	bl	8007614 <_ZN23JUnitTestCaseResultNodeD1Ev>
 80076ac:	2128      	movs	r1, #40	; 0x28
 80076ae:	4620      	mov	r0, r4
 80076b0:	f000 ffae 	bl	8008610 <_ZdlPvj>
        cur = tmp;
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	617b      	str	r3, [r7, #20]
    while (cur) {
 80076b8:	e7e3      	b.n	8007682 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x4a>
    }
    impl_->results_.head_ = NULLPTR;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	2200      	movs	r2, #0
 80076c0:	61da      	str	r2, [r3, #28]
    impl_->results_.tail_ = NULLPTR;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	2200      	movs	r2, #0
 80076c8:	621a      	str	r2, [r3, #32]
}
 80076ca:	bf00      	nop
 80076cc:	371c      	adds	r7, #28
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd90      	pop	{r4, r7, pc}
 80076d2:	bf00      	nop
 80076d4:	08021e04 	.word	0x08021e04

080076d8 <_ZN15JUnitTestOutput17printTestsStartedEv>:

void JUnitTestOutput::printTestsStarted()
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <_ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
}
 80076f6:	bf00      	nop
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr

08007702 <_ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult>:

void JUnitTestOutput::printCurrentTestEnded(const TestResult& result)
{
 8007702:	b590      	push	{r4, r7, lr}
 8007704:	b083      	sub	sp, #12
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
 800770a:	6039      	str	r1, [r7, #0]
    impl_->results_.tail_->execTime_ = result.getCurrentTestTotalExecutionTime();
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	6a1c      	ldr	r4, [r3, #32]
 8007712:	6838      	ldr	r0, [r7, #0]
 8007714:	f009 f9c6 	bl	8010aa4 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 8007718:	4603      	mov	r3, r0
 800771a:	60a3      	str	r3, [r4, #8]
    impl_->results_.tail_->checkCount_ = result.getCheckCount();
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	6a1c      	ldr	r4, [r3, #32]
 8007722:	6838      	ldr	r0, [r7, #0]
 8007724:	f7ff fe8a 	bl	800743c <_ZNK10TestResult13getCheckCountEv>
 8007728:	4603      	mov	r3, r0
 800772a:	6223      	str	r3, [r4, #32]
}
 800772c:	bf00      	nop
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	bd90      	pop	{r4, r7, pc}

08007734 <_ZN15JUnitTestOutput15printTestsEndedERK10TestResult>:

void JUnitTestOutput::printTestsEnded(const TestResult& /*result*/)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
}
 800773e:	bf00      	nop
 8007740:	370c      	adds	r7, #12
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <_ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult>:

void JUnitTestOutput::printCurrentGroupEnded(const TestResult& result)
{
 800774a:	b590      	push	{r4, r7, lr}
 800774c:	b083      	sub	sp, #12
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	6039      	str	r1, [r7, #0]
    impl_->results_.groupExecTime_ = result.getCurrentGroupTotalExecutionTime();
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	691c      	ldr	r4, [r3, #16]
 8007758:	6838      	ldr	r0, [r7, #0]
 800775a:	f009 f9af 	bl	8010abc <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>
 800775e:	4603      	mov	r3, r0
 8007760:	6123      	str	r3, [r4, #16]
    writeTestGroupToFile();
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	3364      	adds	r3, #100	; 0x64
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	4798      	blx	r3
    resetTestGroupResult();
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7ff ff62 	bl	8007638 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
}
 8007774:	bf00      	nop
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	bd90      	pop	{r4, r7, pc}

0800777c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800777c:	b590      	push	{r4, r7, lr}
 800777e:	b089      	sub	sp, #36	; 0x24
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
    impl_->results_.testCount_++;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	3201      	adds	r2, #1
 800778e:	601a      	str	r2, [r3, #0]
    impl_->results_.group_ = test.getGroup();
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	f103 0414 	add.w	r4, r3, #20
 8007798:	f107 0308 	add.w	r3, r7, #8
 800779c:	6839      	ldr	r1, [r7, #0]
 800779e:	4618      	mov	r0, r3
 80077a0:	f009 fcef 	bl	8011182 <_ZNK10UtestShell8getGroupEv>
 80077a4:	f107 0308 	add.w	r3, r7, #8
 80077a8:	4619      	mov	r1, r3
 80077aa:	4620      	mov	r0, r4
 80077ac:	f003 fb4b 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 80077b0:	f107 0308 	add.w	r3, r7, #8
 80077b4:	4618      	mov	r0, r3
 80077b6:	f003 fe92 	bl	800b4de <_ZN12SimpleStringD1Ev>
    impl_->results_.startTime_ = (size_t) GetPlatformSpecificTimeInMillis();
 80077ba:	4b3c      	ldr	r3, [pc, #240]	; (80078ac <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x130>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4798      	blx	r3
 80077c0:	4602      	mov	r2, r0
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	60da      	str	r2, [r3, #12]

    if (impl_->results_.tail_ == NULLPTR) {
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d110      	bne.n	80077f4 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x78>
        impl_->results_.head_ = impl_->results_.tail_
                = new JUnitTestCaseResultNode;
 80077d2:	2288      	movs	r2, #136	; 0x88
 80077d4:	4936      	ldr	r1, [pc, #216]	; (80078b0 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 80077d6:	2028      	movs	r0, #40	; 0x28
 80077d8:	f000 ff06 	bl	80085e8 <_ZnwjPKci>
 80077dc:	4604      	mov	r4, r0
 80077de:	4620      	mov	r0, r4
 80077e0:	f7ff fe38 	bl	8007454 <_ZN23JUnitTestCaseResultNodeC1Ev>
        impl_->results_.head_ = impl_->results_.tail_
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	691b      	ldr	r3, [r3, #16]
                = new JUnitTestCaseResultNode;
 80077e8:	621c      	str	r4, [r3, #32]
        impl_->results_.head_ = impl_->results_.tail_
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	6912      	ldr	r2, [r2, #16]
 80077ee:	6a1b      	ldr	r3, [r3, #32]
 80077f0:	61d3      	str	r3, [r2, #28]
 80077f2:	e013      	b.n	800781c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0xa0>
    }
    else {
        impl_->results_.tail_->next_ = new JUnitTestCaseResultNode;
 80077f4:	228b      	movs	r2, #139	; 0x8b
 80077f6:	492e      	ldr	r1, [pc, #184]	; (80078b0 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 80077f8:	2028      	movs	r0, #40	; 0x28
 80077fa:	f000 fef5 	bl	80085e8 <_ZnwjPKci>
 80077fe:	4604      	mov	r4, r0
 8007800:	4620      	mov	r0, r4
 8007802:	f7ff fe27 	bl	8007454 <_ZN23JUnitTestCaseResultNodeC1Ev>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	6a1b      	ldr	r3, [r3, #32]
 800780c:	625c      	str	r4, [r3, #36]	; 0x24
        impl_->results_.tail_ = impl_->results_.tail_->next_;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	6a1a      	ldr	r2, [r3, #32]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800781a:	621a      	str	r2, [r3, #32]
    }
    impl_->results_.tail_->name_ = test.getName();
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	6a1b      	ldr	r3, [r3, #32]
 8007822:	461c      	mov	r4, r3
 8007824:	f107 0310 	add.w	r3, r7, #16
 8007828:	6839      	ldr	r1, [r7, #0]
 800782a:	4618      	mov	r0, r3
 800782c:	f009 fc9a 	bl	8011164 <_ZNK10UtestShell7getNameEv>
 8007830:	f107 0310 	add.w	r3, r7, #16
 8007834:	4619      	mov	r1, r3
 8007836:	4620      	mov	r0, r4
 8007838:	f003 fb05 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 800783c:	f107 0310 	add.w	r3, r7, #16
 8007840:	4618      	mov	r0, r3
 8007842:	f003 fe4c 	bl	800b4de <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->file_ = test.getFile();
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	6a1b      	ldr	r3, [r3, #32]
 800784c:	f103 0414 	add.w	r4, r3, #20
 8007850:	f107 0318 	add.w	r3, r7, #24
 8007854:	6839      	ldr	r1, [r7, #0]
 8007856:	4618      	mov	r0, r3
 8007858:	f009 fd55 	bl	8011306 <_ZNK10UtestShell7getFileEv>
 800785c:	f107 0318 	add.w	r3, r7, #24
 8007860:	4619      	mov	r1, r3
 8007862:	4620      	mov	r0, r4
 8007864:	f003 faef 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 8007868:	f107 0318 	add.w	r3, r7, #24
 800786c:	4618      	mov	r0, r3
 800786e:	f003 fe36 	bl	800b4de <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->lineNumber_ = test.getLineNumber();
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	6a1c      	ldr	r4, [r3, #32]
 8007878:	6838      	ldr	r0, [r7, #0]
 800787a:	f009 fd53 	bl	8011324 <_ZNK10UtestShell13getLineNumberEv>
 800787e:	4603      	mov	r3, r0
 8007880:	61e3      	str	r3, [r4, #28]
    if (!test.willRun()) {
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	3318      	adds	r3, #24
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	6838      	ldr	r0, [r7, #0]
 800788c:	4798      	blx	r3
 800788e:	4603      	mov	r3, r0
 8007890:	f083 0301 	eor.w	r3, r3, #1
 8007894:	b2db      	uxtb	r3, r3
 8007896:	2b00      	cmp	r3, #0
 8007898:	d004      	beq.n	80078a4 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x128>
        impl_->results_.tail_->ignored_ = true;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	6a1b      	ldr	r3, [r3, #32]
 80078a0:	2201      	movs	r2, #1
 80078a2:	741a      	strb	r2, [r3, #16]
    }
}
 80078a4:	bf00      	nop
 80078a6:	3724      	adds	r7, #36	; 0x24
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd90      	pop	{r4, r7, pc}
 80078ac:	200000a8 	.word	0x200000a8
 80078b0:	08021e08 	.word	0x08021e08

080078b4 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::createFileName(const SimpleString& group)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b08a      	sub	sp, #40	; 0x28
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	607a      	str	r2, [r7, #4]
    SimpleString fileName = "cpputest_";
 80078c0:	f107 0310 	add.w	r3, r7, #16
 80078c4:	4928      	ldr	r1, [pc, #160]	; (8007968 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb4>)
 80078c6:	4618      	mov	r0, r3
 80078c8:	f003 fa51 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
    if (!impl_->package_.isEmpty()) {
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	3328      	adds	r3, #40	; 0x28
 80078d2:	4618      	mov	r0, r3
 80078d4:	f003 fdf2 	bl	800b4bc <_ZNK12SimpleString7isEmptyEv>
 80078d8:	4603      	mov	r3, r0
 80078da:	f083 0301 	eor.w	r3, r3, #1
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00f      	beq.n	8007904 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0x50>
        fileName += impl_->package_;
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80078ec:	f107 0310 	add.w	r3, r7, #16
 80078f0:	4611      	mov	r1, r2
 80078f2:	4618      	mov	r0, r3
 80078f4:	f003 fe70 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
        fileName += "_";
 80078f8:	f107 0310 	add.w	r3, r7, #16
 80078fc:	491b      	ldr	r1, [pc, #108]	; (800796c <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb8>)
 80078fe:	4618      	mov	r0, r3
 8007900:	f003 fe7c 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    }
    fileName += group;
 8007904:	f107 0310 	add.w	r3, r7, #16
 8007908:	6879      	ldr	r1, [r7, #4]
 800790a:	4618      	mov	r0, r3
 800790c:	f003 fe64 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
    return encodeFileName(fileName) + ".xml";
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	3384      	adds	r3, #132	; 0x84
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f107 0018 	add.w	r0, r7, #24
 800791c:	f107 0210 	add.w	r2, r7, #16
 8007920:	68b9      	ldr	r1, [r7, #8]
 8007922:	4798      	blx	r3
 8007924:	f107 0320 	add.w	r3, r7, #32
 8007928:	4911      	ldr	r1, [pc, #68]	; (8007970 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xbc>)
 800792a:	4618      	mov	r0, r3
 800792c:	f003 fa1f 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f107 0220 	add.w	r2, r7, #32
 8007936:	f107 0118 	add.w	r1, r7, #24
 800793a:	4618      	mov	r0, r3
 800793c:	f003 fe31 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 8007940:	f107 0320 	add.w	r3, r7, #32
 8007944:	4618      	mov	r0, r3
 8007946:	f003 fdca 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800794a:	f107 0318 	add.w	r3, r7, #24
 800794e:	4618      	mov	r0, r3
 8007950:	f003 fdc5 	bl	800b4de <_ZN12SimpleStringD1Ev>
    SimpleString fileName = "cpputest_";
 8007954:	f107 0310 	add.w	r3, r7, #16
 8007958:	4618      	mov	r0, r3
 800795a:	f003 fdc0 	bl	800b4de <_ZN12SimpleStringD1Ev>
    return encodeFileName(fileName) + ".xml";
 800795e:	bf00      	nop
}
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	3728      	adds	r7, #40	; 0x28
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	08021e24 	.word	0x08021e24
 800796c:	08021e30 	.word	0x08021e30
 8007970:	08021e34 	.word	0x08021e34

08007974 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::encodeFileName(const SimpleString& fileName)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b086      	sub	sp, #24
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
    // special character list based on: https://en.wikipedia.org/wiki/Filename
    static const char* const forbiddenCharacters = "/\\?%*:|\"<>";

    SimpleString result = fileName;
 8007980:	6879      	ldr	r1, [r7, #4]
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f003 fa47 	bl	800ae16 <_ZN12SimpleStringC1ERKS_>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 8007988:	4b0a      	ldr	r3, [pc, #40]	; (80079b4 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x40>)
 800798a:	617b      	str	r3, [r7, #20]
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00a      	beq.n	80079aa <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x36>
        result.replace(*sym, '_');
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	225f      	movs	r2, #95	; 0x5f
 800799a:	4619      	mov	r1, r3
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f003 fbcc 	bl	800b13a <_ZN12SimpleString7replaceEcc>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	3301      	adds	r3, #1
 80079a6:	617b      	str	r3, [r7, #20]
 80079a8:	e7f0      	b.n	800798c <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x18>
    }
    return result;
 80079aa:	bf00      	nop
}
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	3718      	adds	r7, #24
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	08021e3c 	.word	0x08021e3c

080079b8 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>:

void JUnitTestOutput::setPackageName(const SimpleString& package)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
    if (impl_ != NULLPTR) {
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d006      	beq.n	80079d8 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString+0x20>
        impl_->package_ = package;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	3328      	adds	r3, #40	; 0x28
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	4618      	mov	r0, r3
 80079d4:	f003 fa37 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
    }
}
 80079d8:	bf00      	nop
 80079da:	3708      	adds	r7, #8
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <_ZN15JUnitTestOutput14writeXmlHeaderEv>:

void JUnitTestOutput::writeXmlHeader()
{
 80079e0:	b590      	push	{r4, r7, lr}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
    writeToFile("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	3368      	adds	r3, #104	; 0x68
 80079ee:	681c      	ldr	r4, [r3, #0]
 80079f0:	f107 0308 	add.w	r3, r7, #8
 80079f4:	4908      	ldr	r1, [pc, #32]	; (8007a18 <_ZN15JUnitTestOutput14writeXmlHeaderEv+0x38>)
 80079f6:	4618      	mov	r0, r3
 80079f8:	f003 f9b9 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80079fc:	f107 0308 	add.w	r3, r7, #8
 8007a00:	4619      	mov	r1, r3
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	47a0      	blx	r4
 8007a06:	f107 0308 	add.w	r3, r7, #8
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f003 fd67 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 8007a10:	bf00      	nop
 8007a12:	3714      	adds	r7, #20
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd90      	pop	{r4, r7, pc}
 8007a18:	08021e48 	.word	0x08021e48

08007a1c <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv>:

void JUnitTestOutput::writeTestSuiteSummary()
{
 8007a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a20:	b08a      	sub	sp, #40	; 0x28
 8007a22:	af04      	add	r7, sp, #16
 8007a24:	6078      	str	r0, [r7, #4]
    SimpleString
            buf =
                    StringFromFormat(
                            "<testsuite errors=\"0\" failures=\"%d\" hostname=\"localhost\" name=\"%s\" tests=\"%d\" time=\"%d.%03d\" timestamp=\"%s\">\n",
                            (int)impl_->results_.failureCount_,
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	685b      	ldr	r3, [r3, #4]
                            impl_->results_.group_.asCharString(),
                            (int) impl_->results_.testCount_,
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
                            GetPlatformSpecificTimeString());
 8007a2c:	4698      	mov	r8, r3
                            impl_->results_.group_.asCharString(),
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	691b      	ldr	r3, [r3, #16]
                            GetPlatformSpecificTimeString());
 8007a32:	3314      	adds	r3, #20
 8007a34:	4618      	mov	r0, r3
 8007a36:	f003 fd25 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 8007a3a:	4604      	mov	r4, r0
                            (int) impl_->results_.testCount_,
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	681b      	ldr	r3, [r3, #0]
                            GetPlatformSpecificTimeString());
 8007a42:	461d      	mov	r5, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	4a23      	ldr	r2, [pc, #140]	; (8007ad8 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8007a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a50:	099b      	lsrs	r3, r3, #6
                            GetPlatformSpecificTimeString());
 8007a52:	461e      	mov	r6, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	691a      	ldr	r2, [r3, #16]
 8007a5a:	4b1f      	ldr	r3, [pc, #124]	; (8007ad8 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8007a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8007a60:	099b      	lsrs	r3, r3, #6
 8007a62:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007a66:	fb01 f303 	mul.w	r3, r1, r3
 8007a6a:	1ad3      	subs	r3, r2, r3
                            GetPlatformSpecificTimeString());
 8007a6c:	603b      	str	r3, [r7, #0]
 8007a6e:	4b1b      	ldr	r3, [pc, #108]	; (8007adc <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc0>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4798      	blx	r3
 8007a74:	4603      	mov	r3, r0
 8007a76:	f107 0008 	add.w	r0, r7, #8
 8007a7a:	9303      	str	r3, [sp, #12]
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	9302      	str	r3, [sp, #8]
 8007a80:	9601      	str	r6, [sp, #4]
 8007a82:	9500      	str	r5, [sp, #0]
 8007a84:	4623      	mov	r3, r4
 8007a86:	4642      	mov	r2, r8
 8007a88:	4915      	ldr	r1, [pc, #84]	; (8007ae0 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc4>)
 8007a8a:	f004 fa2f 	bl	800beec <_Z16StringFromFormatPKcz>
    writeToFile(buf.asCharString());
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	3368      	adds	r3, #104	; 0x68
 8007a94:	681c      	ldr	r4, [r3, #0]
 8007a96:	f107 0308 	add.w	r3, r7, #8
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f003 fcf2 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	f107 0310 	add.w	r3, r7, #16
 8007aa6:	4611      	mov	r1, r2
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f003 f960 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8007aae:	f107 0310 	add.w	r3, r7, #16
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	47a0      	blx	r4
 8007ab8:	f107 0310 	add.w	r3, r7, #16
 8007abc:	4618      	mov	r0, r3
 8007abe:	f003 fd0e 	bl	800b4de <_ZN12SimpleStringD1Ev>
                            GetPlatformSpecificTimeString());
 8007ac2:	f107 0308 	add.w	r3, r7, #8
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f003 fd09 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 8007acc:	bf00      	nop
 8007ace:	3718      	adds	r7, #24
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ad6:	bf00      	nop
 8007ad8:	10624dd3 	.word	0x10624dd3
 8007adc:	200000ac 	.word	0x200000ac
 8007ae0:	08021e74 	.word	0x08021e74

08007ae4 <_ZN15JUnitTestOutput15writePropertiesEv>:

void JUnitTestOutput::writeProperties()
{
 8007ae4:	b590      	push	{r4, r7, lr}
 8007ae6:	b087      	sub	sp, #28
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
    writeToFile("<properties>\n");
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	3368      	adds	r3, #104	; 0x68
 8007af2:	681c      	ldr	r4, [r3, #0]
 8007af4:	f107 0308 	add.w	r3, r7, #8
 8007af8:	4912      	ldr	r1, [pc, #72]	; (8007b44 <_ZN15JUnitTestOutput15writePropertiesEv+0x60>)
 8007afa:	4618      	mov	r0, r3
 8007afc:	f003 f937 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8007b00:	f107 0308 	add.w	r3, r7, #8
 8007b04:	4619      	mov	r1, r3
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	47a0      	blx	r4
 8007b0a:	f107 0308 	add.w	r3, r7, #8
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f003 fce5 	bl	800b4de <_ZN12SimpleStringD1Ev>
    writeToFile("</properties>\n");
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	3368      	adds	r3, #104	; 0x68
 8007b1a:	681c      	ldr	r4, [r3, #0]
 8007b1c:	f107 0310 	add.w	r3, r7, #16
 8007b20:	4909      	ldr	r1, [pc, #36]	; (8007b48 <_ZN15JUnitTestOutput15writePropertiesEv+0x64>)
 8007b22:	4618      	mov	r0, r3
 8007b24:	f003 f923 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8007b28:	f107 0310 	add.w	r3, r7, #16
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	47a0      	blx	r4
 8007b32:	f107 0310 	add.w	r3, r7, #16
 8007b36:	4618      	mov	r0, r3
 8007b38:	f003 fcd1 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 8007b3c:	bf00      	nop
 8007b3e:	371c      	adds	r7, #28
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd90      	pop	{r4, r7, pc}
 8007b44:	08021ee4 	.word	0x08021ee4
 8007b48:	08021ef4 	.word	0x08021ef4

08007b4c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString>:

SimpleString JUnitTestOutput::encodeXmlText(const SimpleString& textbody)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	607a      	str	r2, [r7, #4]
    SimpleString buf = textbody.asCharString();
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f003 fc93 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	4619      	mov	r1, r3
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f003 f903 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
    buf.replace("&", "&amp;");
 8007b68:	4a0e      	ldr	r2, [pc, #56]	; (8007ba4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x58>)
 8007b6a:	490f      	ldr	r1, [pc, #60]	; (8007ba8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x5c>)
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f003 fb13 	bl	800b198 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\"", "&quot;");
 8007b72:	4a0e      	ldr	r2, [pc, #56]	; (8007bac <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x60>)
 8007b74:	490e      	ldr	r1, [pc, #56]	; (8007bb0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x64>)
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f003 fb0e 	bl	800b198 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("<", "&lt;");
 8007b7c:	4a0d      	ldr	r2, [pc, #52]	; (8007bb4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x68>)
 8007b7e:	490e      	ldr	r1, [pc, #56]	; (8007bb8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x6c>)
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f003 fb09 	bl	800b198 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace(">", "&gt;");
 8007b86:	4a0d      	ldr	r2, [pc, #52]	; (8007bbc <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x70>)
 8007b88:	490d      	ldr	r1, [pc, #52]	; (8007bc0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x74>)
 8007b8a:	68f8      	ldr	r0, [r7, #12]
 8007b8c:	f003 fb04 	bl	800b198 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\n", "{newline}");
 8007b90:	4a0c      	ldr	r2, [pc, #48]	; (8007bc4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x78>)
 8007b92:	490d      	ldr	r1, [pc, #52]	; (8007bc8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x7c>)
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f003 faff 	bl	800b198 <_ZN12SimpleString7replaceEPKcS1_>
    return buf;
 8007b9a:	bf00      	nop
}
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	08021f04 	.word	0x08021f04
 8007ba8:	08021f0c 	.word	0x08021f0c
 8007bac:	08021f10 	.word	0x08021f10
 8007bb0:	08021f18 	.word	0x08021f18
 8007bb4:	08021f1c 	.word	0x08021f1c
 8007bb8:	08021f24 	.word	0x08021f24
 8007bbc:	08021f28 	.word	0x08021f28
 8007bc0:	08021f30 	.word	0x08021f30
 8007bc4:	08021f34 	.word	0x08021f34
 8007bc8:	08021f40 	.word	0x08021f40

08007bcc <_ZN15JUnitTestOutput14writeTestCasesEv>:

void JUnitTestOutput::writeTestCases()
{
 8007bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd0:	b096      	sub	sp, #88	; 0x58
 8007bd2:	af08      	add	r7, sp, #32
 8007bd4:	60f8      	str	r0, [r7, #12]
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	69db      	ldr	r3, [r3, #28]
 8007bdc:	637b      	str	r3, [r7, #52]	; 0x34

    while (cur) {
 8007bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f000 80b2 	beq.w	8007d4a <_ZN15JUnitTestOutput14writeTestCasesEv+0x17e>
        SimpleString buf = StringFromFormat(
                "<testcase classname=\"%s%s%s\" name=\"%s\" assertions=\"%d\" time=\"%d.%03d\" file=\"%s\" line=\"%d\">\n",
                impl_->package_.asCharString(),
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	691b      	ldr	r3, [r3, #16]
                impl_->results_.group_.asCharString(),
                cur->name_.asCharString(),
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
                cur->file_.asCharString(),
                (int) cur->lineNumber_);
 8007bea:	3328      	adds	r3, #40	; 0x28
 8007bec:	4618      	mov	r0, r3
 8007bee:	f003 fc49 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 8007bf2:	4680      	mov	r8, r0
                impl_->package_.isEmpty() ? "" : ".",
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	3328      	adds	r3, #40	; 0x28
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f003 fc5e 	bl	800b4bc <_ZNK12SimpleString7isEmptyEv>
 8007c00:	4603      	mov	r3, r0
                (int) cur->lineNumber_);
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d001      	beq.n	8007c0a <_ZN15JUnitTestOutput14writeTestCasesEv+0x3e>
 8007c06:	4c53      	ldr	r4, [pc, #332]	; (8007d54 <_ZN15JUnitTestOutput14writeTestCasesEv+0x188>)
 8007c08:	e000      	b.n	8007c0c <_ZN15JUnitTestOutput14writeTestCasesEv+0x40>
 8007c0a:	4c53      	ldr	r4, [pc, #332]	; (8007d58 <_ZN15JUnitTestOutput14writeTestCasesEv+0x18c>)
                impl_->results_.group_.asCharString(),
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	691b      	ldr	r3, [r3, #16]
                (int) cur->lineNumber_);
 8007c10:	3314      	adds	r3, #20
 8007c12:	4618      	mov	r0, r3
 8007c14:	f003 fc36 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 8007c18:	4605      	mov	r5, r0
 8007c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f003 fc31 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 8007c22:	4606      	mov	r6, r0
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
 8007c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c26:	6a1a      	ldr	r2, [r3, #32]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8007c30:	60bb      	str	r3, [r7, #8]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8007c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	4a49      	ldr	r2, [pc, #292]	; (8007d5c <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8007c38:	fba2 2303 	umull	r2, r3, r2, r3
 8007c3c:	099b      	lsrs	r3, r3, #6
                (int) cur->lineNumber_);
 8007c3e:	607b      	str	r3, [r7, #4]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8007c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c42:	689a      	ldr	r2, [r3, #8]
 8007c44:	4b45      	ldr	r3, [pc, #276]	; (8007d5c <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8007c46:	fba3 1302 	umull	r1, r3, r3, r2
 8007c4a:	099b      	lsrs	r3, r3, #6
 8007c4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007c50:	fb01 f303 	mul.w	r3, r1, r3
 8007c54:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8007c56:	603b      	str	r3, [r7, #0]
 8007c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c5a:	3314      	adds	r3, #20
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f003 fc11 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 8007c62:	4602      	mov	r2, r0
 8007c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c66:	69db      	ldr	r3, [r3, #28]
 8007c68:	f107 0014 	add.w	r0, r7, #20
 8007c6c:	9306      	str	r3, [sp, #24]
 8007c6e:	9205      	str	r2, [sp, #20]
 8007c70:	683a      	ldr	r2, [r7, #0]
 8007c72:	9204      	str	r2, [sp, #16]
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	9203      	str	r2, [sp, #12]
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	9302      	str	r3, [sp, #8]
 8007c7c:	9601      	str	r6, [sp, #4]
 8007c7e:	9500      	str	r5, [sp, #0]
 8007c80:	4623      	mov	r3, r4
 8007c82:	4642      	mov	r2, r8
 8007c84:	4936      	ldr	r1, [pc, #216]	; (8007d60 <_ZN15JUnitTestOutput14writeTestCasesEv+0x194>)
 8007c86:	f004 f931 	bl	800beec <_Z16StringFromFormatPKcz>
        writeToFile(buf.asCharString());
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3368      	adds	r3, #104	; 0x68
 8007c90:	681c      	ldr	r4, [r3, #0]
 8007c92:	f107 0314 	add.w	r3, r7, #20
 8007c96:	4618      	mov	r0, r3
 8007c98:	f003 fbf4 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	f107 031c 	add.w	r3, r7, #28
 8007ca2:	4611      	mov	r1, r2
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f003 f862 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8007caa:	f107 031c 	add.w	r3, r7, #28
 8007cae:	4619      	mov	r1, r3
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	47a0      	blx	r4
 8007cb4:	f107 031c 	add.w	r3, r7, #28
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f003 fc10 	bl	800b4de <_ZN12SimpleStringD1Ev>

        impl_->results_.totalCheckCount_ = cur->checkCount_;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cc4:	6a12      	ldr	r2, [r2, #32]
 8007cc6:	609a      	str	r2, [r3, #8]

        if (cur->failure_) {
 8007cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d007      	beq.n	8007ce0 <_ZN15JUnitTestOutput14writeTestCasesEv+0x114>
            writeFailure(cur);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	3388      	adds	r3, #136	; 0x88
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	4798      	blx	r3
 8007cde:	e017      	b.n	8007d10 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
        }
        else if (cur->ignored_) {
 8007ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ce2:	7c1b      	ldrb	r3, [r3, #16]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d013      	beq.n	8007d10 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
            writeToFile("<skipped />\n");
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	3368      	adds	r3, #104	; 0x68
 8007cee:	681c      	ldr	r4, [r3, #0]
 8007cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cf4:	491b      	ldr	r1, [pc, #108]	; (8007d64 <_ZN15JUnitTestOutput14writeTestCasesEv+0x198>)
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f003 f839 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8007cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d00:	4619      	mov	r1, r3
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	47a0      	blx	r4
 8007d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f003 fbe7 	bl	800b4de <_ZN12SimpleStringD1Ev>
        }
        writeToFile("</testcase>\n");
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	3368      	adds	r3, #104	; 0x68
 8007d16:	681c      	ldr	r4, [r3, #0]
 8007d18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d1c:	4912      	ldr	r1, [pc, #72]	; (8007d68 <_ZN15JUnitTestOutput14writeTestCasesEv+0x19c>)
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f003 f825 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8007d24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d28:	4619      	mov	r1, r3
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	47a0      	blx	r4
 8007d2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d32:	4618      	mov	r0, r3
 8007d34:	f003 fbd3 	bl	800b4de <_ZN12SimpleStringD1Ev>
        cur = cur->next_;
 8007d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3c:	637b      	str	r3, [r7, #52]	; 0x34
                (int) cur->lineNumber_);
 8007d3e:	f107 0314 	add.w	r3, r7, #20
 8007d42:	4618      	mov	r0, r3
 8007d44:	f003 fbcb 	bl	800b4de <_ZN12SimpleStringD1Ev>
    while (cur) {
 8007d48:	e749      	b.n	8007bde <_ZN15JUnitTestOutput14writeTestCasesEv+0x12>
    }
}
 8007d4a:	bf00      	nop
 8007d4c:	3738      	adds	r7, #56	; 0x38
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d54:	08021e04 	.word	0x08021e04
 8007d58:	08021f44 	.word	0x08021f44
 8007d5c:	10624dd3 	.word	0x10624dd3
 8007d60:	08021f48 	.word	0x08021f48
 8007d64:	08021fa4 	.word	0x08021fa4
 8007d68:	08021fb4 	.word	0x08021fb4

08007d6c <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode>:

void JUnitTestOutput::writeFailure(JUnitTestCaseResultNode* node)
{
 8007d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d6e:	b091      	sub	sp, #68	; 0x44
 8007d70:	af02      	add	r7, sp, #8
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
    SimpleString buf = StringFromFormat(
            "<failure message=\"%s:%d: %s\" type=\"AssertionFailedError\">\n",
            node->failure_->getFileName().asCharString(),
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	68d9      	ldr	r1, [r3, #12]
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	3308      	adds	r3, #8
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f107 0210 	add.w	r2, r7, #16
 8007d88:	4610      	mov	r0, r2
 8007d8a:	4798      	blx	r3
            (int) node->failure_->getFailureLineNumber(),
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8007d8c:	f107 0310 	add.w	r3, r7, #16
 8007d90:	4618      	mov	r0, r3
 8007d92:	f003 fb77 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 8007d96:	4605      	mov	r5, r0
            (int) node->failure_->getFailureLineNumber(),
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	68da      	ldr	r2, [r3, #12]
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	3314      	adds	r3, #20
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4610      	mov	r0, r2
 8007da8:	4798      	blx	r3
 8007daa:	4603      	mov	r3, r0
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8007dac:	461e      	mov	r6, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	3380      	adds	r3, #128	; 0x80
 8007db4:	681c      	ldr	r4, [r3, #0]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	68d9      	ldr	r1, [r3, #12]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	3318      	adds	r3, #24
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f107 0220 	add.w	r2, r7, #32
 8007dc8:	4610      	mov	r0, r2
 8007dca:	4798      	blx	r3
 8007dcc:	f107 0318 	add.w	r3, r7, #24
 8007dd0:	f107 0220 	add.w	r2, r7, #32
 8007dd4:	6879      	ldr	r1, [r7, #4]
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	47a0      	blx	r4
 8007dda:	f107 0318 	add.w	r3, r7, #24
 8007dde:	4618      	mov	r0, r3
 8007de0:	f003 fb50 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 8007de4:	4603      	mov	r3, r0
 8007de6:	f107 0008 	add.w	r0, r7, #8
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	4633      	mov	r3, r6
 8007dee:	462a      	mov	r2, r5
 8007df0:	4924      	ldr	r1, [pc, #144]	; (8007e84 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x118>)
 8007df2:	f004 f87b 	bl	800beec <_Z16StringFromFormatPKcz>
 8007df6:	f107 0318 	add.w	r3, r7, #24
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f003 fb6f 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8007e00:	f107 0320 	add.w	r3, r7, #32
 8007e04:	4618      	mov	r0, r3
 8007e06:	f003 fb6a 	bl	800b4de <_ZN12SimpleStringD1Ev>
            node->failure_->getFileName().asCharString(),
 8007e0a:	f107 0310 	add.w	r3, r7, #16
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f003 fb65 	bl	800b4de <_ZN12SimpleStringD1Ev>
    writeToFile(buf.asCharString());
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	3368      	adds	r3, #104	; 0x68
 8007e1a:	681c      	ldr	r4, [r3, #0]
 8007e1c:	f107 0308 	add.w	r3, r7, #8
 8007e20:	4618      	mov	r0, r3
 8007e22:	f003 fb2f 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 8007e26:	4602      	mov	r2, r0
 8007e28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007e2c:	4611      	mov	r1, r2
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f002 ff9d 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8007e34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007e38:	4619      	mov	r1, r3
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	47a0      	blx	r4
 8007e3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007e42:	4618      	mov	r0, r3
 8007e44:	f003 fb4b 	bl	800b4de <_ZN12SimpleStringD1Ev>
    writeToFile("</failure>\n");
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	3368      	adds	r3, #104	; 0x68
 8007e4e:	681c      	ldr	r4, [r3, #0]
 8007e50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e54:	490c      	ldr	r1, [pc, #48]	; (8007e88 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x11c>)
 8007e56:	4618      	mov	r0, r3
 8007e58:	f002 ff89 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8007e5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e60:	4619      	mov	r1, r3
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	47a0      	blx	r4
 8007e66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f003 fb37 	bl	800b4de <_ZN12SimpleStringD1Ev>
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8007e70:	f107 0308 	add.w	r3, r7, #8
 8007e74:	4618      	mov	r0, r3
 8007e76:	f003 fb32 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 8007e7a:	bf00      	nop
 8007e7c:	373c      	adds	r7, #60	; 0x3c
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e82:	bf00      	nop
 8007e84:	08021fc4 	.word	0x08021fc4
 8007e88:	08022000 	.word	0x08022000

08007e8c <_ZN15JUnitTestOutput15writeFileEndingEv>:


void JUnitTestOutput::writeFileEnding()
{
 8007e8c:	b590      	push	{r4, r7, lr}
 8007e8e:	b08d      	sub	sp, #52	; 0x34
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
    writeToFile("<system-out>");
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	3368      	adds	r3, #104	; 0x68
 8007e9a:	681c      	ldr	r4, [r3, #0]
 8007e9c:	f107 0308 	add.w	r3, r7, #8
 8007ea0:	4933      	ldr	r1, [pc, #204]	; (8007f70 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe4>)
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f002 ff63 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8007ea8:	f107 0308 	add.w	r3, r7, #8
 8007eac:	4619      	mov	r1, r3
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	47a0      	blx	r4
 8007eb2:	f107 0308 	add.w	r3, r7, #8
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f003 fb11 	bl	800b4de <_ZN12SimpleStringD1Ev>
    writeToFile(encodeXmlText(impl_->stdOutput_));
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	3368      	adds	r3, #104	; 0x68
 8007ec2:	681c      	ldr	r4, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	3380      	adds	r3, #128	; 0x80
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	6912      	ldr	r2, [r2, #16]
 8007ed0:	3230      	adds	r2, #48	; 0x30
 8007ed2:	f107 0010 	add.w	r0, r7, #16
 8007ed6:	6879      	ldr	r1, [r7, #4]
 8007ed8:	4798      	blx	r3
 8007eda:	f107 0310 	add.w	r3, r7, #16
 8007ede:	4619      	mov	r1, r3
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	47a0      	blx	r4
 8007ee4:	f107 0310 	add.w	r3, r7, #16
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f003 faf8 	bl	800b4de <_ZN12SimpleStringD1Ev>
    writeToFile("</system-out>\n");
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	3368      	adds	r3, #104	; 0x68
 8007ef4:	681c      	ldr	r4, [r3, #0]
 8007ef6:	f107 0318 	add.w	r3, r7, #24
 8007efa:	491e      	ldr	r1, [pc, #120]	; (8007f74 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe8>)
 8007efc:	4618      	mov	r0, r3
 8007efe:	f002 ff36 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8007f02:	f107 0318 	add.w	r3, r7, #24
 8007f06:	4619      	mov	r1, r3
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	47a0      	blx	r4
 8007f0c:	f107 0318 	add.w	r3, r7, #24
 8007f10:	4618      	mov	r0, r3
 8007f12:	f003 fae4 	bl	800b4de <_ZN12SimpleStringD1Ev>
    writeToFile("<system-err></system-err>\n");
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	3368      	adds	r3, #104	; 0x68
 8007f1c:	681c      	ldr	r4, [r3, #0]
 8007f1e:	f107 0320 	add.w	r3, r7, #32
 8007f22:	4915      	ldr	r1, [pc, #84]	; (8007f78 <_ZN15JUnitTestOutput15writeFileEndingEv+0xec>)
 8007f24:	4618      	mov	r0, r3
 8007f26:	f002 ff22 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8007f2a:	f107 0320 	add.w	r3, r7, #32
 8007f2e:	4619      	mov	r1, r3
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	47a0      	blx	r4
 8007f34:	f107 0320 	add.w	r3, r7, #32
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f003 fad0 	bl	800b4de <_ZN12SimpleStringD1Ev>
    writeToFile("</testsuite>\n");
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	3368      	adds	r3, #104	; 0x68
 8007f44:	681c      	ldr	r4, [r3, #0]
 8007f46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f4a:	490c      	ldr	r1, [pc, #48]	; (8007f7c <_ZN15JUnitTestOutput15writeFileEndingEv+0xf0>)
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f002 ff0e 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8007f52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f56:	4619      	mov	r1, r3
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	47a0      	blx	r4
 8007f5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f60:	4618      	mov	r0, r3
 8007f62:	f003 fabc 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 8007f66:	bf00      	nop
 8007f68:	3734      	adds	r7, #52	; 0x34
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd90      	pop	{r4, r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	0802200c 	.word	0x0802200c
 8007f74:	0802201c 	.word	0x0802201c
 8007f78:	0802202c 	.word	0x0802202c
 8007f7c:	08022048 	.word	0x08022048

08007f80 <_ZN15JUnitTestOutput20writeTestGroupToFileEv>:

void JUnitTestOutput::writeTestGroupToFile()
{
 8007f80:	b590      	push	{r4, r7, lr}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
    openFileForWrite(createFileName(impl_->results_.group_));
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	3360      	adds	r3, #96	; 0x60
 8007f8e:	681c      	ldr	r4, [r3, #0]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	335c      	adds	r3, #92	; 0x5c
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	6912      	ldr	r2, [r2, #16]
 8007f9c:	3214      	adds	r2, #20
 8007f9e:	f107 0008 	add.w	r0, r7, #8
 8007fa2:	6879      	ldr	r1, [r7, #4]
 8007fa4:	4798      	blx	r3
 8007fa6:	f107 0308 	add.w	r3, r7, #8
 8007faa:	4619      	mov	r1, r3
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	47a0      	blx	r4
 8007fb0:	f107 0308 	add.w	r3, r7, #8
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f003 fa92 	bl	800b4de <_ZN12SimpleStringD1Ev>
    writeXmlHeader();
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	3370      	adds	r3, #112	; 0x70
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	4798      	blx	r3
    writeTestSuiteSummary();
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	3374      	adds	r3, #116	; 0x74
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	4798      	blx	r3
    writeProperties();
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	3378      	adds	r3, #120	; 0x78
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	4798      	blx	r3
    writeTestCases();
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	337c      	adds	r3, #124	; 0x7c
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	4798      	blx	r3
    writeFileEnding();
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	338c      	adds	r3, #140	; 0x8c
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	4798      	blx	r3
    closeFile();
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	336c      	adds	r3, #108	; 0x6c
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	4798      	blx	r3
}
 8008002:	bf00      	nop
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	bd90      	pop	{r4, r7, pc}

0800800a <_ZN15JUnitTestOutput11printBufferEPKc>:

// LCOV_EXCL_START

void JUnitTestOutput::printBuffer(const char*)
{
 800800a:	b480      	push	{r7}
 800800c:	b083      	sub	sp, #12
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
 8008012:	6039      	str	r1, [r7, #0]
}
 8008014:	bf00      	nop
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <_ZN15JUnitTestOutput5printEPKc>:

void JUnitTestOutput::print(const char *output)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
    impl_->stdOutput_ += output;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	3330      	adds	r3, #48	; 0x30
 8008030:	6839      	ldr	r1, [r7, #0]
 8008032:	4618      	mov	r0, r3
 8008034:	f003 fae2 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
}
 8008038:	bf00      	nop
 800803a:	3708      	adds	r7, #8
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <_ZN15JUnitTestOutput5printEl>:

void JUnitTestOutput::print(long)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
}
 800804a:	bf00      	nop
 800804c:	370c      	adds	r7, #12
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr

08008056 <_ZN15JUnitTestOutput5printEj>:

void JUnitTestOutput::print(size_t)
{
 8008056:	b480      	push	{r7}
 8008058:	b083      	sub	sp, #12
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
 800805e:	6039      	str	r1, [r7, #0]
}
 8008060:	bf00      	nop
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <_ZN15JUnitTestOutput5flushEv>:

void JUnitTestOutput::flush()
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
}
 8008074:	bf00      	nop
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <_ZN15JUnitTestOutput12printFailureERK11TestFailure>:

// LCOV_EXCL_STOP

void JUnitTestOutput::printFailure(const TestFailure& failure)
{
 8008080:	b590      	push	{r4, r7, lr}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
    if (impl_->results_.tail_->failure_ == NULLPTR) {
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	6a1b      	ldr	r3, [r3, #32]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d113      	bne.n	80080be <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x3e>
        impl_->results_.failureCount_++;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	685a      	ldr	r2, [r3, #4]
 800809c:	3201      	adds	r2, #1
 800809e:	605a      	str	r2, [r3, #4]
        impl_->results_.tail_->failure_ = new TestFailure(failure);
 80080a0:	f240 1233 	movw	r2, #307	; 0x133
 80080a4:	4908      	ldr	r1, [pc, #32]	; (80080c8 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x48>)
 80080a6:	2034      	movs	r0, #52	; 0x34
 80080a8:	f000 fa9e 	bl	80085e8 <_ZnwjPKci>
 80080ac:	4604      	mov	r4, r0
 80080ae:	6839      	ldr	r1, [r7, #0]
 80080b0:	4620      	mov	r0, r4
 80080b2:	f004 fd37 	bl	800cb24 <_ZN11TestFailureC1ERKS_>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	6a1b      	ldr	r3, [r3, #32]
 80080bc:	60dc      	str	r4, [r3, #12]
    }
}
 80080be:	bf00      	nop
 80080c0:	370c      	adds	r7, #12
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd90      	pop	{r4, r7, pc}
 80080c6:	bf00      	nop
 80080c8:	08021e08 	.word	0x08021e08

080080cc <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString>:

void JUnitTestOutput::openFileForWrite(const SimpleString& fileName)
{
 80080cc:	b5b0      	push	{r4, r5, r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
    impl_->file_ = PlatformSpecificFOpen(fileName.asCharString(), "w");
 80080d6:	4b08      	ldr	r3, [pc, #32]	; (80080f8 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x2c>)
 80080d8:	681d      	ldr	r5, [r3, #0]
 80080da:	6838      	ldr	r0, [r7, #0]
 80080dc:	f003 f9d2 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 80080e0:	4602      	mov	r2, r0
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	691c      	ldr	r4, [r3, #16]
 80080e6:	4905      	ldr	r1, [pc, #20]	; (80080fc <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x30>)
 80080e8:	4610      	mov	r0, r2
 80080ea:	47a8      	blx	r5
 80080ec:	4603      	mov	r3, r0
 80080ee:	6263      	str	r3, [r4, #36]	; 0x24
}
 80080f0:	bf00      	nop
 80080f2:	3708      	adds	r7, #8
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bdb0      	pop	{r4, r5, r7, pc}
 80080f8:	200000b4 	.word	0x200000b4
 80080fc:	08022058 	.word	0x08022058

08008100 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString>:

void JUnitTestOutput::writeToFile(const SimpleString& buffer)
{
 8008100:	b590      	push	{r4, r7, lr}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
    PlatformSpecificFPuts(buffer.asCharString(), impl_->file_);
 800810a:	4b08      	ldr	r3, [pc, #32]	; (800812c <_ZN15JUnitTestOutput11writeToFileERK12SimpleString+0x2c>)
 800810c:	681c      	ldr	r4, [r3, #0]
 800810e:	6838      	ldr	r0, [r7, #0]
 8008110:	f003 f9b8 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 8008114:	4602      	mov	r2, r0
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811c:	4619      	mov	r1, r3
 800811e:	4610      	mov	r0, r2
 8008120:	47a0      	blx	r4
}
 8008122:	bf00      	nop
 8008124:	370c      	adds	r7, #12
 8008126:	46bd      	mov	sp, r7
 8008128:	bd90      	pop	{r4, r7, pc}
 800812a:	bf00      	nop
 800812c:	200000b8 	.word	0x200000b8

08008130 <_ZN15JUnitTestOutput9closeFileEv>:

void JUnitTestOutput::closeFile()
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
    PlatformSpecificFClose(impl_->file_);
 8008138:	4b05      	ldr	r3, [pc, #20]	; (8008150 <_ZN15JUnitTestOutput9closeFileEv+0x20>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	6912      	ldr	r2, [r2, #16]
 8008140:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008142:	4610      	mov	r0, r2
 8008144:	4798      	blx	r3
}
 8008146:	bf00      	nop
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	200000bc 	.word	0x200000bc

08008154 <_ZN10TestPlugin14parseArgumentsEiPKPKci>:
    virtual bool parseArguments(int /* ac */, const char *const * /* av */, int /* index */ )
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
 8008160:	603b      	str	r3, [r7, #0]
        return false;
 8008162:	2300      	movs	r3, #0
    }
 8008164:	4618      	mov	r0, r3
 8008166:	3714      	adds	r7, #20
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <_ZN17MemoryLeakFailureD1Ev>:
class SimpleMutex;

class MemoryLeakFailure
{
public:
    virtual ~MemoryLeakFailure()
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
    {
 8008178:	4a04      	ldr	r2, [pc, #16]	; (800818c <_ZN17MemoryLeakFailureD1Ev+0x1c>)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	601a      	str	r2, [r3, #0]
    }
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	4618      	mov	r0, r3
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr
 800818c:	080255d8 	.word	0x080255d8

08008190 <_ZN17MemoryLeakFailureD0Ev>:
    virtual ~MemoryLeakFailure()
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
    }
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f7ff ffe9 	bl	8008170 <_ZN17MemoryLeakFailureD1Ev>
 800819e:	2104      	movs	r1, #4
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 fa35 	bl	8008610 <_ZdlPvj>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4618      	mov	r0, r3
 80081aa:	3708      	adds	r7, #8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <_ZN18MemLeakScopedMutexC1Ev>:
#if CPPUTEST_USE_MEM_LEAK_DETECTION

class MemLeakScopedMutex
{
public:
    MemLeakScopedMutex() : lock(MemoryLeakWarningPlugin::getGlobalDetector()->getMutex()) { }
 80081b0:	b590      	push	{r4, r7, lr}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	687c      	ldr	r4, [r7, #4]
 80081ba:	f000 fc71 	bl	8008aa0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80081be:	4603      	mov	r3, r0
 80081c0:	4618      	mov	r0, r3
 80081c2:	f00c ff6c 	bl	801509e <_ZN18MemoryLeakDetector8getMutexEv>
 80081c6:	4603      	mov	r3, r0
 80081c8:	4619      	mov	r1, r3
 80081ca:	4620      	mov	r0, r4
 80081cc:	f002 fb24 	bl	800a818 <_ZN15ScopedMutexLockC1EP11SimpleMutex>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4618      	mov	r0, r3
 80081d4:	370c      	adds	r7, #12
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd90      	pop	{r4, r7, pc}

080081da <_ZN18MemLeakScopedMutexD1Ev>:
class MemLeakScopedMutex
 80081da:	b580      	push	{r7, lr}
 80081dc:	b082      	sub	sp, #8
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4618      	mov	r0, r3
 80081e6:	f002 fb29 	bl	800a83c <_ZN15ScopedMutexLockD1Ev>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4618      	mov	r0, r3
 80081ee:	3708      	adds	r7, #8
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <_ZL15mem_leak_mallocjPKcj>:
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
}


static void* mem_leak_malloc(size_t size, const char* file, size_t line)
{
 80081f4:	b590      	push	{r4, r7, lr}
 80081f6:	b087      	sub	sp, #28
 80081f8:	af02      	add	r7, sp, #8
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	607a      	str	r2, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentMallocAllocator(), size, file, line, true);
 8008200:	f000 fc4e 	bl	8008aa0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008204:	4604      	mov	r4, r0
 8008206:	f006 f8df 	bl	800e3c8 <_Z25getCurrentMallocAllocatorv>
 800820a:	4601      	mov	r1, r0
 800820c:	2301      	movs	r3, #1
 800820e:	9301      	str	r3, [sp, #4]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	9300      	str	r3, [sp, #0]
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	68fa      	ldr	r2, [r7, #12]
 8008218:	4620      	mov	r0, r4
 800821a:	f00d f983 	bl	8015524 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800821e:	4603      	mov	r3, r0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3714      	adds	r7, #20
 8008224:	46bd      	mov	sp, r7
 8008226:	bd90      	pop	{r4, r7, pc}

08008228 <_ZL13mem_leak_freePvPKcj>:

static void mem_leak_free(void* buffer, const char* file, size_t line)
{
 8008228:	b590      	push	{r4, r7, lr}
 800822a:	b087      	sub	sp, #28
 800822c:	af02      	add	r7, sp, #8
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) buffer);
 8008234:	f000 fc34 	bl	8008aa0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008238:	4603      	mov	r3, r0
 800823a:	68f9      	ldr	r1, [r7, #12]
 800823c:	4618      	mov	r0, r3
 800823e:	f00c ffdd 	bl	80151fc <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentMallocAllocator(), (char*) buffer, file, line, true);
 8008242:	f000 fc2d 	bl	8008aa0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008246:	4604      	mov	r4, r0
 8008248:	f006 f8be 	bl	800e3c8 <_Z25getCurrentMallocAllocatorv>
 800824c:	4601      	mov	r1, r0
 800824e:	2301      	movs	r3, #1
 8008250:	9301      	str	r3, [sp, #4]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	9300      	str	r3, [sp, #0]
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	4620      	mov	r0, r4
 800825c:	f00d f996 	bl	801558c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8008260:	bf00      	nop
 8008262:	3714      	adds	r7, #20
 8008264:	46bd      	mov	sp, r7
 8008266:	bd90      	pop	{r4, r7, pc}

08008268 <_ZL16mem_leak_reallocPvjPKcj>:

static void* mem_leak_realloc(void* memory, size_t size, const char* file, size_t line)
{
 8008268:	b590      	push	{r4, r7, lr}
 800826a:	b089      	sub	sp, #36	; 0x24
 800826c:	af04      	add	r7, sp, #16
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	607a      	str	r2, [r7, #4]
 8008274:	603b      	str	r3, [r7, #0]
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
 8008276:	f000 fc13 	bl	8008aa0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800827a:	4604      	mov	r4, r0
 800827c:	f006 f8a4 	bl	800e3c8 <_Z25getCurrentMallocAllocatorv>
 8008280:	4601      	mov	r1, r0
 8008282:	2301      	movs	r3, #1
 8008284:	9302      	str	r3, [sp, #8]
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	9301      	str	r3, [sp, #4]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	9300      	str	r3, [sp, #0]
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	68fa      	ldr	r2, [r7, #12]
 8008292:	4620      	mov	r0, r4
 8008294:	f00d f9de 	bl	8015654 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>
 8008298:	4603      	mov	r3, r0
}
 800829a:	4618      	mov	r0, r3
 800829c:	3714      	adds	r7, #20
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd90      	pop	{r4, r7, pc}
	...

080082a4 <_ZL13normal_mallocjPKcj>:

#endif

static void* normal_malloc(size_t size, const char*, size_t)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	607a      	str	r2, [r7, #4]
    return PlatformSpecificMalloc(size);
 80082b0:	4b04      	ldr	r3, [pc, #16]	; (80082c4 <_ZL13normal_mallocjPKcj+0x20>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	4798      	blx	r3
 80082b8:	4603      	mov	r3, r0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	200000c8 	.word	0x200000c8

080082c8 <_ZL14normal_reallocPvjPKcj>:

static void* normal_realloc(void* memory, size_t size, const char*, size_t)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
 80082d4:	603b      	str	r3, [r7, #0]
    return PlatformSpecificRealloc(memory, size);
 80082d6:	4b05      	ldr	r3, [pc, #20]	; (80082ec <_ZL14normal_reallocPvjPKcj+0x24>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68b9      	ldr	r1, [r7, #8]
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	4798      	blx	r3
 80082e0:	4603      	mov	r3, r0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	200000cc 	.word	0x200000cc

080082f0 <_ZL11normal_freePvPKcj>:

static void normal_free(void* buffer, const char*, size_t)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
    PlatformSpecificFree(buffer);
 80082fc:	4b03      	ldr	r3, [pc, #12]	; (800830c <_ZL11normal_freePvPKcj+0x1c>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	4798      	blx	r3
}
 8008304:	bf00      	nop
 8008306:	3710      	adds	r7, #16
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	200000d0 	.word	0x200000d0

08008310 <_ZL32threadsafe_mem_leak_operator_newj>:
#else
#define UT_THROW_BAD_ALLOC_WHEN_NULL(memory)
#endif

static void* threadsafe_mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8008310:	b590      	push	{r4, r7, lr}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
    MemLeakScopedMutex lock;
 8008318:	f107 0308 	add.w	r3, r7, #8
 800831c:	4618      	mov	r0, r3
 800831e:	f7ff ff47 	bl	80081b0 <_ZN18MemLeakScopedMutexC1Ev>
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8008322:	f000 fbbd 	bl	8008aa0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008326:	4604      	mov	r4, r0
 8008328:	f005 ff9e 	bl	800e268 <_Z22getCurrentNewAllocatorv>
 800832c:	4601      	mov	r1, r0
 800832e:	2300      	movs	r3, #0
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	4620      	mov	r0, r4
 8008334:	f00d f864 	bl	8015400 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8008338:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800833a:	68fc      	ldr	r4, [r7, #12]
    MemLeakScopedMutex lock;
 800833c:	f107 0308 	add.w	r3, r7, #8
 8008340:	4618      	mov	r0, r3
 8008342:	f7ff ff4a 	bl	80081da <_ZN18MemLeakScopedMutexD1Ev>
    return memory;
 8008346:	4623      	mov	r3, r4
}
 8008348:	4618      	mov	r0, r3
 800834a:	3714      	adds	r7, #20
 800834c:	46bd      	mov	sp, r7
 800834e:	bd90      	pop	{r4, r7, pc}

08008350 <_ZL21mem_leak_operator_newj>:
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
}


static void* mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8008350:	b590      	push	{r4, r7, lr}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8008358:	f000 fba2 	bl	8008aa0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800835c:	4604      	mov	r4, r0
 800835e:	f005 ff83 	bl	800e268 <_Z22getCurrentNewAllocatorv>
 8008362:	4601      	mov	r1, r0
 8008364:	2300      	movs	r3, #0
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	4620      	mov	r0, r4
 800836a:	f00d f849 	bl	8015400 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800836e:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8008370:	68fb      	ldr	r3, [r7, #12]
}
 8008372:	4618      	mov	r0, r3
 8008374:	3714      	adds	r7, #20
 8008376:	46bd      	mov	sp, r7
 8008378:	bd90      	pop	{r4, r7, pc}

0800837a <_ZL29mem_leak_operator_new_nothrowj>:

static void* mem_leak_operator_new_nothrow (size_t size) UT_NOTHROW
{
 800837a:	b590      	push	{r4, r7, lr}
 800837c:	b083      	sub	sp, #12
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8008382:	f000 fb8d 	bl	8008aa0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008386:	4604      	mov	r4, r0
 8008388:	f005 ff6e 	bl	800e268 <_Z22getCurrentNewAllocatorv>
 800838c:	4601      	mov	r1, r0
 800838e:	2300      	movs	r3, #0
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	4620      	mov	r0, r4
 8008394:	f00d f834 	bl	8015400 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8008398:	4603      	mov	r3, r0
}
 800839a:	4618      	mov	r0, r3
 800839c:	370c      	adds	r7, #12
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd90      	pop	{r4, r7, pc}

080083a2 <_ZL27mem_leak_operator_new_debugjPKcj>:

static void* mem_leak_operator_new_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 80083a2:	b590      	push	{r4, r7, lr}
 80083a4:	b089      	sub	sp, #36	; 0x24
 80083a6:	af02      	add	r7, sp, #8
 80083a8:	60f8      	str	r0, [r7, #12]
 80083aa:	60b9      	str	r1, [r7, #8]
 80083ac:	607a      	str	r2, [r7, #4]
    void *memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size, file, line);
 80083ae:	f000 fb77 	bl	8008aa0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80083b2:	4604      	mov	r4, r0
 80083b4:	f005 ff58 	bl	800e268 <_Z22getCurrentNewAllocatorv>
 80083b8:	4601      	mov	r1, r0
 80083ba:	2300      	movs	r3, #0
 80083bc:	9301      	str	r3, [sp, #4]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	9300      	str	r3, [sp, #0]
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	68fa      	ldr	r2, [r7, #12]
 80083c6:	4620      	mov	r0, r4
 80083c8:	f00d f8ac 	bl	8015524 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 80083cc:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80083ce:	697b      	ldr	r3, [r7, #20]
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	371c      	adds	r7, #28
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd90      	pop	{r4, r7, pc}

080083d8 <_ZL27mem_leak_operator_new_arrayj>:

static void* mem_leak_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 80083d8:	b590      	push	{r4, r7, lr}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 80083e0:	f000 fb5e 	bl	8008aa0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80083e4:	4604      	mov	r4, r0
 80083e6:	f005 ff97 	bl	800e318 <_Z27getCurrentNewArrayAllocatorv>
 80083ea:	4601      	mov	r1, r0
 80083ec:	2300      	movs	r3, #0
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	4620      	mov	r0, r4
 80083f2:	f00d f805 	bl	8015400 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 80083f6:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80083f8:	68fb      	ldr	r3, [r7, #12]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3714      	adds	r7, #20
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd90      	pop	{r4, r7, pc}

08008402 <_ZL35mem_leak_operator_new_array_nothrowj>:

static void* mem_leak_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 8008402:	b590      	push	{r4, r7, lr}
 8008404:	b083      	sub	sp, #12
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 800840a:	f000 fb49 	bl	8008aa0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800840e:	4604      	mov	r4, r0
 8008410:	f005 ff82 	bl	800e318 <_Z27getCurrentNewArrayAllocatorv>
 8008414:	4601      	mov	r1, r0
 8008416:	2300      	movs	r3, #0
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	4620      	mov	r0, r4
 800841c:	f00c fff0 	bl	8015400 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8008420:	4603      	mov	r3, r0
}
 8008422:	4618      	mov	r0, r3
 8008424:	370c      	adds	r7, #12
 8008426:	46bd      	mov	sp, r7
 8008428:	bd90      	pop	{r4, r7, pc}

0800842a <_ZL33mem_leak_operator_new_array_debugjPKcj>:

static void* mem_leak_operator_new_array_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 800842a:	b590      	push	{r4, r7, lr}
 800842c:	b089      	sub	sp, #36	; 0x24
 800842e:	af02      	add	r7, sp, #8
 8008430:	60f8      	str	r0, [r7, #12]
 8008432:	60b9      	str	r1, [r7, #8]
 8008434:	607a      	str	r2, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size, file, line);
 8008436:	f000 fb33 	bl	8008aa0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800843a:	4604      	mov	r4, r0
 800843c:	f005 ff6c 	bl	800e318 <_Z27getCurrentNewArrayAllocatorv>
 8008440:	4601      	mov	r1, r0
 8008442:	2300      	movs	r3, #0
 8008444:	9301      	str	r3, [sp, #4]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	9300      	str	r3, [sp, #0]
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	4620      	mov	r0, r4
 8008450:	f00d f868 	bl	8015524 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8008454:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8008456:	697b      	ldr	r3, [r7, #20]
}
 8008458:	4618      	mov	r0, r3
 800845a:	371c      	adds	r7, #28
 800845c:	46bd      	mov	sp, r7
 800845e:	bd90      	pop	{r4, r7, pc}

08008460 <_ZL24mem_leak_operator_deletePv>:

static void mem_leak_operator_delete (void* mem) UT_NOTHROW
{
 8008460:	b590      	push	{r4, r7, lr}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 8008468:	f000 fb1a 	bl	8008aa0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800846c:	4603      	mov	r3, r0
 800846e:	6879      	ldr	r1, [r7, #4]
 8008470:	4618      	mov	r0, r3
 8008472:	f00c fec3 	bl	80151fc <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewAllocator(), (char*) mem);
 8008476:	f000 fb13 	bl	8008aa0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800847a:	4604      	mov	r4, r0
 800847c:	f005 fef4 	bl	800e268 <_Z22getCurrentNewAllocatorv>
 8008480:	4601      	mov	r1, r0
 8008482:	2300      	movs	r3, #0
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	4620      	mov	r0, r4
 8008488:	f00d f8ca 	bl	8015620 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 800848c:	bf00      	nop
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	bd90      	pop	{r4, r7, pc}

08008494 <_ZL30mem_leak_operator_delete_arrayPv>:

static void mem_leak_operator_delete_array (void* mem) UT_NOTHROW
{
 8008494:	b590      	push	{r4, r7, lr}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 800849c:	f000 fb00 	bl	8008aa0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80084a0:	4603      	mov	r3, r0
 80084a2:	6879      	ldr	r1, [r7, #4]
 80084a4:	4618      	mov	r0, r3
 80084a6:	f00c fea9 	bl	80151fc <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
 80084aa:	f000 faf9 	bl	8008aa0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80084ae:	4604      	mov	r4, r0
 80084b0:	f005 ff32 	bl	800e318 <_Z27getCurrentNewArrayAllocatorv>
 80084b4:	4601      	mov	r1, r0
 80084b6:	2300      	movs	r3, #0
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	4620      	mov	r0, r4
 80084bc:	f00d f8b0 	bl	8015620 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd90      	pop	{r4, r7, pc}

080084c8 <_ZL19normal_operator_newj>:

static void* normal_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 80084d0:	4b04      	ldr	r3, [pc, #16]	; (80084e4 <_ZL19normal_operator_newj+0x1c>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	4798      	blx	r3
 80084d8:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80084da:	68fb      	ldr	r3, [r7, #12]
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	200000c8 	.word	0x200000c8

080084e8 <_ZL27normal_operator_new_nothrowj>:

static void* normal_operator_new_nothrow (size_t size) UT_NOTHROW
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 80084f0:	4b04      	ldr	r3, [pc, #16]	; (8008504 <_ZL27normal_operator_new_nothrowj+0x1c>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	4798      	blx	r3
 80084f8:	4603      	mov	r3, r0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3708      	adds	r7, #8
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	200000c8 	.word	0x200000c8

08008508 <_ZL25normal_operator_new_debugjPKcj>:

static void* normal_operator_new_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b086      	sub	sp, #24
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8008514:	4b04      	ldr	r3, [pc, #16]	; (8008528 <_ZL25normal_operator_new_debugjPKcj+0x20>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	4798      	blx	r3
 800851c:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800851e:	697b      	ldr	r3, [r7, #20]
}
 8008520:	4618      	mov	r0, r3
 8008522:	3718      	adds	r7, #24
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	200000c8 	.word	0x200000c8

0800852c <_ZL25normal_operator_new_arrayj>:

static void* normal_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8008534:	4b04      	ldr	r3, [pc, #16]	; (8008548 <_ZL25normal_operator_new_arrayj+0x1c>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	4798      	blx	r3
 800853c:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800853e:	68fb      	ldr	r3, [r7, #12]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3710      	adds	r7, #16
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}
 8008548:	200000c8 	.word	0x200000c8

0800854c <_ZL33normal_operator_new_array_nothrowj>:

static void* normal_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 8008554:	4b04      	ldr	r3, [pc, #16]	; (8008568 <_ZL33normal_operator_new_array_nothrowj+0x1c>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	4798      	blx	r3
 800855c:	4603      	mov	r3, r0
}
 800855e:	4618      	mov	r0, r3
 8008560:	3708      	adds	r7, #8
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	200000c8 	.word	0x200000c8

0800856c <_ZL31normal_operator_new_array_debugjPKcj>:

static void* normal_operator_new_array_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b086      	sub	sp, #24
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8008578:	4b04      	ldr	r3, [pc, #16]	; (800858c <_ZL31normal_operator_new_array_debugjPKcj+0x20>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	4798      	blx	r3
 8008580:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8008582:	697b      	ldr	r3, [r7, #20]
}
 8008584:	4618      	mov	r0, r3
 8008586:	3718      	adds	r7, #24
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	200000c8 	.word	0x200000c8

08008590 <_ZL22normal_operator_deletePv>:

static void normal_operator_delete (void* mem) UT_NOTHROW
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 8008598:	4b03      	ldr	r3, [pc, #12]	; (80085a8 <_ZL22normal_operator_deletePv+0x18>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	4798      	blx	r3
}
 80085a0:	bf00      	nop
 80085a2:	3708      	adds	r7, #8
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	200000d0 	.word	0x200000d0

080085ac <_ZL28normal_operator_delete_arrayPv>:

static void normal_operator_delete_array (void* mem) UT_NOTHROW
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 80085b4:	4b03      	ldr	r3, [pc, #12]	; (80085c4 <_ZL28normal_operator_delete_arrayPv+0x18>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	4798      	blx	r3
}
 80085bc:	bf00      	nop
 80085be:	3708      	adds	r7, #8
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	200000d0 	.word	0x200000d0

080085c8 <_Znwj>:
static void (*saved_operator_delete_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete;
static void (*saved_operator_delete_array_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete_array;
static int save_counter = 0;

void* operator new(size_t size) UT_THROW(std::bad_alloc)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
    return operator_new_fptr(size);
 80085d0:	4b04      	ldr	r3, [pc, #16]	; (80085e4 <_Znwj+0x1c>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	4798      	blx	r3
 80085d8:	4603      	mov	r3, r0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3708      	adds	r7, #8
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	2000002c 	.word	0x2000002c

080085e8 <_ZnwjPKci>:

void* operator new(size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	607a      	str	r2, [r7, #4]
    return operator_new_debug_fptr(size, file, (size_t)line);
 80085f4:	4b05      	ldr	r3, [pc, #20]	; (800860c <_ZnwjPKci+0x24>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	68b9      	ldr	r1, [r7, #8]
 80085fc:	68f8      	ldr	r0, [r7, #12]
 80085fe:	4798      	blx	r3
 8008600:	4603      	mov	r3, r0
}
 8008602:	4618      	mov	r0, r3
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	20000034 	.word	0x20000034

08008610 <_ZdlPvj>:
    operator_delete_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete (void* mem, size_t) UT_NOTHROW
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
    operator_delete_fptr(mem);
 800861a:	4b04      	ldr	r3, [pc, #16]	; (800862c <_ZdlPvj+0x1c>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	4798      	blx	r3
}
 8008622:	bf00      	nop
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	20000044 	.word	0x20000044

08008630 <_ZnajPKci>:
{
    return operator_new_array_fptr(size);
}

void* operator new [](size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
    return operator_new_array_debug_fptr(size, file, (size_t)line);
 800863c:	4b05      	ldr	r3, [pc, #20]	; (8008654 <_ZnajPKci+0x24>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	68b9      	ldr	r1, [r7, #8]
 8008644:	68f8      	ldr	r0, [r7, #12]
 8008646:	4798      	blx	r3
 8008648:	4603      	mov	r3, r0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	20000040 	.word	0x20000040

08008658 <_ZdaPv>:
{
    return operator_new_array_debug_fptr(size, file, line);
}

void operator delete[](void* mem) UT_NOTHROW
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
     operator_delete_array_fptr(mem);
 8008660:	4b03      	ldr	r3, [pc, #12]	; (8008670 <_ZdaPv+0x18>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	4798      	blx	r3
}
 8008668:	bf00      	nop
 800866a:	3708      	adds	r7, #8
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	20000048 	.word	0x20000048

08008674 <_ZdaPvj>:
     operator_delete_array_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete[] (void* mem, size_t) UT_NOTHROW
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
     operator_delete_array_fptr(mem);
 800867e:	4b04      	ldr	r3, [pc, #16]	; (8008690 <_ZdaPvj+0x1c>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	4798      	blx	r3
}
 8008686:	bf00      	nop
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	20000048 	.word	0x20000048

08008694 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>:

#endif
#endif

void MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
{
 8008694:	b480      	push	{r7}
 8008696:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    operator_new_fptr = normal_operator_new;
 8008698:	4b12      	ldr	r3, [pc, #72]	; (80086e4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x50>)
 800869a:	4a13      	ldr	r2, [pc, #76]	; (80086e8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x54>)
 800869c:	601a      	str	r2, [r3, #0]
    operator_new_nothrow_fptr = normal_operator_new_nothrow;
 800869e:	4b13      	ldr	r3, [pc, #76]	; (80086ec <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x58>)
 80086a0:	4a13      	ldr	r2, [pc, #76]	; (80086f0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x5c>)
 80086a2:	601a      	str	r2, [r3, #0]
    operator_new_debug_fptr = normal_operator_new_debug;
 80086a4:	4b13      	ldr	r3, [pc, #76]	; (80086f4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x60>)
 80086a6:	4a14      	ldr	r2, [pc, #80]	; (80086f8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x64>)
 80086a8:	601a      	str	r2, [r3, #0]
    operator_new_array_fptr = normal_operator_new_array;
 80086aa:	4b14      	ldr	r3, [pc, #80]	; (80086fc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x68>)
 80086ac:	4a14      	ldr	r2, [pc, #80]	; (8008700 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x6c>)
 80086ae:	601a      	str	r2, [r3, #0]
    operator_new_array_nothrow_fptr = normal_operator_new_array_nothrow;
 80086b0:	4b14      	ldr	r3, [pc, #80]	; (8008704 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x70>)
 80086b2:	4a15      	ldr	r2, [pc, #84]	; (8008708 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x74>)
 80086b4:	601a      	str	r2, [r3, #0]
    operator_new_array_debug_fptr = normal_operator_new_array_debug;
 80086b6:	4b15      	ldr	r3, [pc, #84]	; (800870c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x78>)
 80086b8:	4a15      	ldr	r2, [pc, #84]	; (8008710 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x7c>)
 80086ba:	601a      	str	r2, [r3, #0]
    operator_delete_fptr = normal_operator_delete;
 80086bc:	4b15      	ldr	r3, [pc, #84]	; (8008714 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x80>)
 80086be:	4a16      	ldr	r2, [pc, #88]	; (8008718 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x84>)
 80086c0:	601a      	str	r2, [r3, #0]
    operator_delete_array_fptr = normal_operator_delete_array;
 80086c2:	4b16      	ldr	r3, [pc, #88]	; (800871c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x88>)
 80086c4:	4a16      	ldr	r2, [pc, #88]	; (8008720 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x8c>)
 80086c6:	601a      	str	r2, [r3, #0]
    malloc_fptr = normal_malloc;
 80086c8:	4b16      	ldr	r3, [pc, #88]	; (8008724 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x90>)
 80086ca:	4a17      	ldr	r2, [pc, #92]	; (8008728 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x94>)
 80086cc:	601a      	str	r2, [r3, #0]
    realloc_fptr = normal_realloc;
 80086ce:	4b17      	ldr	r3, [pc, #92]	; (800872c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x98>)
 80086d0:	4a17      	ldr	r2, [pc, #92]	; (8008730 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x9c>)
 80086d2:	601a      	str	r2, [r3, #0]
    free_fptr = normal_free;
 80086d4:	4b17      	ldr	r3, [pc, #92]	; (8008734 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa0>)
 80086d6:	4a18      	ldr	r2, [pc, #96]	; (8008738 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa4>)
 80086d8:	601a      	str	r2, [r3, #0]

#endif
}
 80086da:	bf00      	nop
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr
 80086e4:	2000002c 	.word	0x2000002c
 80086e8:	080084c9 	.word	0x080084c9
 80086ec:	20000030 	.word	0x20000030
 80086f0:	080084e9 	.word	0x080084e9
 80086f4:	20000034 	.word	0x20000034
 80086f8:	08008509 	.word	0x08008509
 80086fc:	20000038 	.word	0x20000038
 8008700:	0800852d 	.word	0x0800852d
 8008704:	2000003c 	.word	0x2000003c
 8008708:	0800854d 	.word	0x0800854d
 800870c:	20000040 	.word	0x20000040
 8008710:	0800856d 	.word	0x0800856d
 8008714:	20000044 	.word	0x20000044
 8008718:	08008591 	.word	0x08008591
 800871c:	20000048 	.word	0x20000048
 8008720:	080085ad 	.word	0x080085ad
 8008724:	20000014 	.word	0x20000014
 8008728:	080082a5 	.word	0x080082a5
 800872c:	2000001c 	.word	0x2000001c
 8008730:	080082c9 	.word	0x080082c9
 8008734:	20000018 	.word	0x20000018
 8008738:	080082f1 	.word	0x080082f1

0800873c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>:
    free_fptr = threadsafe_mem_leak_free;
#endif
}

bool MemoryLeakWarningPlugin::areNewDeleteOverloaded()
{
 800873c:	b480      	push	{r7}
 800873e:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    return operator_new_fptr == mem_leak_operator_new || operator_new_fptr == threadsafe_mem_leak_operator_new;
 8008740:	4b08      	ldr	r3, [pc, #32]	; (8008764 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a08      	ldr	r2, [pc, #32]	; (8008768 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x2c>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d004      	beq.n	8008754 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x18>
 800874a:	4b06      	ldr	r3, [pc, #24]	; (8008764 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a07      	ldr	r2, [pc, #28]	; (800876c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x30>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d101      	bne.n	8008758 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1c>
 8008754:	2301      	movs	r3, #1
 8008756:	e000      	b.n	800875a <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1e>
 8008758:	2300      	movs	r3, #0
#else
    return false;
#endif
}
 800875a:	4618      	mov	r0, r3
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr
 8008764:	2000002c 	.word	0x2000002c
 8008768:	08008351 	.word	0x08008351
 800876c:	08008311 	.word	0x08008311

08008770 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
{
 8008770:	b580      	push	{r7, lr}
 8008772:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (++save_counter > 1) return;
 8008774:	4b1f      	ldr	r3, [pc, #124]	; (80087f4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	3301      	adds	r3, #1
 800877a:	4a1e      	ldr	r2, [pc, #120]	; (80087f4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800877c:	6013      	str	r3, [r2, #0]
 800877e:	4b1d      	ldr	r3, [pc, #116]	; (80087f4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2b01      	cmp	r3, #1
 8008784:	bfcc      	ite	gt
 8008786:	2301      	movgt	r3, #1
 8008788:	2300      	movle	r3, #0
 800878a:	b2db      	uxtb	r3, r3
 800878c:	2b00      	cmp	r3, #0
 800878e:	d12e      	bne.n	80087ee <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x7e>
    saved_operator_new_fptr = operator_new_fptr;
 8008790:	4b19      	ldr	r3, [pc, #100]	; (80087f8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x88>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a19      	ldr	r2, [pc, #100]	; (80087fc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x8c>)
 8008796:	6013      	str	r3, [r2, #0]
    saved_operator_new_nothrow_fptr = operator_new_nothrow_fptr;
 8008798:	4b19      	ldr	r3, [pc, #100]	; (8008800 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x90>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a19      	ldr	r2, [pc, #100]	; (8008804 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x94>)
 800879e:	6013      	str	r3, [r2, #0]
    saved_operator_new_debug_fptr = operator_new_debug_fptr;
 80087a0:	4b19      	ldr	r3, [pc, #100]	; (8008808 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x98>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a19      	ldr	r2, [pc, #100]	; (800880c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x9c>)
 80087a6:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_fptr = operator_new_array_fptr;
 80087a8:	4b19      	ldr	r3, [pc, #100]	; (8008810 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa0>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a19      	ldr	r2, [pc, #100]	; (8008814 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa4>)
 80087ae:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_nothrow_fptr = operator_new_array_nothrow_fptr;
 80087b0:	4b19      	ldr	r3, [pc, #100]	; (8008818 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa8>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a19      	ldr	r2, [pc, #100]	; (800881c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xac>)
 80087b6:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_debug_fptr = operator_new_array_debug_fptr;
 80087b8:	4b19      	ldr	r3, [pc, #100]	; (8008820 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb0>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a19      	ldr	r2, [pc, #100]	; (8008824 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb4>)
 80087be:	6013      	str	r3, [r2, #0]
    saved_operator_delete_fptr = operator_delete_fptr;
 80087c0:	4b19      	ldr	r3, [pc, #100]	; (8008828 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb8>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a19      	ldr	r2, [pc, #100]	; (800882c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xbc>)
 80087c6:	6013      	str	r3, [r2, #0]
    saved_operator_delete_array_fptr = operator_delete_array_fptr;
 80087c8:	4b19      	ldr	r3, [pc, #100]	; (8008830 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc0>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a19      	ldr	r2, [pc, #100]	; (8008834 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc4>)
 80087ce:	6013      	str	r3, [r2, #0]
    saved_malloc_fptr = malloc_fptr;
 80087d0:	4b19      	ldr	r3, [pc, #100]	; (8008838 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc8>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a19      	ldr	r2, [pc, #100]	; (800883c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xcc>)
 80087d6:	6013      	str	r3, [r2, #0]
    saved_realloc_fptr = realloc_fptr;
 80087d8:	4b19      	ldr	r3, [pc, #100]	; (8008840 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd0>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a19      	ldr	r2, [pc, #100]	; (8008844 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd4>)
 80087de:	6013      	str	r3, [r2, #0]
    saved_free_fptr = free_fptr;
 80087e0:	4b19      	ldr	r3, [pc, #100]	; (8008848 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd8>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a19      	ldr	r2, [pc, #100]	; (800884c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xdc>)
 80087e6:	6013      	str	r3, [r2, #0]
    turnOffNewDeleteOverloads();
 80087e8:	f7ff ff54 	bl	8008694 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
 80087ec:	e000      	b.n	80087f0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x80>
    if (++save_counter > 1) return;
 80087ee:	bf00      	nop
#endif
}
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	200006e4 	.word	0x200006e4
 80087f8:	2000002c 	.word	0x2000002c
 80087fc:	2000004c 	.word	0x2000004c
 8008800:	20000030 	.word	0x20000030
 8008804:	20000050 	.word	0x20000050
 8008808:	20000034 	.word	0x20000034
 800880c:	20000054 	.word	0x20000054
 8008810:	20000038 	.word	0x20000038
 8008814:	20000058 	.word	0x20000058
 8008818:	2000003c 	.word	0x2000003c
 800881c:	2000005c 	.word	0x2000005c
 8008820:	20000040 	.word	0x20000040
 8008824:	20000060 	.word	0x20000060
 8008828:	20000044 	.word	0x20000044
 800882c:	20000064 	.word	0x20000064
 8008830:	20000048 	.word	0x20000048
 8008834:	20000068 	.word	0x20000068
 8008838:	20000014 	.word	0x20000014
 800883c:	20000020 	.word	0x20000020
 8008840:	2000001c 	.word	0x2000001c
 8008844:	20000028 	.word	0x20000028
 8008848:	20000018 	.word	0x20000018
 800884c:	20000024 	.word	0x20000024

08008850 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::restoreNewDeleteOverloads()
{
 8008850:	b480      	push	{r7}
 8008852:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (--save_counter > 0) return;
 8008854:	4b1f      	ldr	r3, [pc, #124]	; (80088d4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	3b01      	subs	r3, #1
 800885a:	4a1e      	ldr	r2, [pc, #120]	; (80088d4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800885c:	6013      	str	r3, [r2, #0]
 800885e:	4b1d      	ldr	r3, [pc, #116]	; (80088d4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2b00      	cmp	r3, #0
 8008864:	bfcc      	ite	gt
 8008866:	2301      	movgt	r3, #1
 8008868:	2300      	movle	r3, #0
 800886a:	b2db      	uxtb	r3, r3
 800886c:	2b00      	cmp	r3, #0
 800886e:	d12c      	bne.n	80088ca <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7a>
    operator_new_fptr = saved_operator_new_fptr;
 8008870:	4b19      	ldr	r3, [pc, #100]	; (80088d8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x88>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a19      	ldr	r2, [pc, #100]	; (80088dc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x8c>)
 8008876:	6013      	str	r3, [r2, #0]
    operator_new_nothrow_fptr = saved_operator_new_nothrow_fptr;
 8008878:	4b19      	ldr	r3, [pc, #100]	; (80088e0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x90>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a19      	ldr	r2, [pc, #100]	; (80088e4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x94>)
 800887e:	6013      	str	r3, [r2, #0]
    operator_new_debug_fptr = saved_operator_new_debug_fptr;
 8008880:	4b19      	ldr	r3, [pc, #100]	; (80088e8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x98>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a19      	ldr	r2, [pc, #100]	; (80088ec <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x9c>)
 8008886:	6013      	str	r3, [r2, #0]
    operator_new_array_fptr = saved_operator_new_array_fptr;
 8008888:	4b19      	ldr	r3, [pc, #100]	; (80088f0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa0>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a19      	ldr	r2, [pc, #100]	; (80088f4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa4>)
 800888e:	6013      	str	r3, [r2, #0]
    operator_new_array_nothrow_fptr = saved_operator_new_array_nothrow_fptr;
 8008890:	4b19      	ldr	r3, [pc, #100]	; (80088f8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa8>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a19      	ldr	r2, [pc, #100]	; (80088fc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xac>)
 8008896:	6013      	str	r3, [r2, #0]
    operator_new_array_debug_fptr = saved_operator_new_array_debug_fptr;
 8008898:	4b19      	ldr	r3, [pc, #100]	; (8008900 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb0>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a19      	ldr	r2, [pc, #100]	; (8008904 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb4>)
 800889e:	6013      	str	r3, [r2, #0]
    operator_delete_fptr = saved_operator_delete_fptr;
 80088a0:	4b19      	ldr	r3, [pc, #100]	; (8008908 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb8>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a19      	ldr	r2, [pc, #100]	; (800890c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xbc>)
 80088a6:	6013      	str	r3, [r2, #0]
    operator_delete_array_fptr = saved_operator_delete_array_fptr;
 80088a8:	4b19      	ldr	r3, [pc, #100]	; (8008910 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc0>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a19      	ldr	r2, [pc, #100]	; (8008914 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc4>)
 80088ae:	6013      	str	r3, [r2, #0]
    malloc_fptr = saved_malloc_fptr;
 80088b0:	4b19      	ldr	r3, [pc, #100]	; (8008918 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc8>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a19      	ldr	r2, [pc, #100]	; (800891c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xcc>)
 80088b6:	6013      	str	r3, [r2, #0]
    realloc_fptr = saved_realloc_fptr;
 80088b8:	4b19      	ldr	r3, [pc, #100]	; (8008920 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd0>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a19      	ldr	r2, [pc, #100]	; (8008924 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd4>)
 80088be:	6013      	str	r3, [r2, #0]
    free_fptr = saved_free_fptr;
 80088c0:	4b19      	ldr	r3, [pc, #100]	; (8008928 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd8>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a19      	ldr	r2, [pc, #100]	; (800892c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xdc>)
 80088c6:	6013      	str	r3, [r2, #0]
 80088c8:	e000      	b.n	80088cc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7c>
    if (--save_counter > 0) return;
 80088ca:	bf00      	nop
#endif
}
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr
 80088d4:	200006e4 	.word	0x200006e4
 80088d8:	2000004c 	.word	0x2000004c
 80088dc:	2000002c 	.word	0x2000002c
 80088e0:	20000050 	.word	0x20000050
 80088e4:	20000030 	.word	0x20000030
 80088e8:	20000054 	.word	0x20000054
 80088ec:	20000034 	.word	0x20000034
 80088f0:	20000058 	.word	0x20000058
 80088f4:	20000038 	.word	0x20000038
 80088f8:	2000005c 	.word	0x2000005c
 80088fc:	2000003c 	.word	0x2000003c
 8008900:	20000060 	.word	0x20000060
 8008904:	20000040 	.word	0x20000040
 8008908:	20000064 	.word	0x20000064
 800890c:	20000044 	.word	0x20000044
 8008910:	20000068 	.word	0x20000068
 8008914:	20000048 	.word	0x20000048
 8008918:	20000020 	.word	0x20000020
 800891c:	20000014 	.word	0x20000014
 8008920:	20000028 	.word	0x20000028
 8008924:	2000001c 	.word	0x2000001c
 8008928:	20000024 	.word	0x20000024
 800892c:	20000018 	.word	0x20000018

08008930 <_ZN25MemoryLeakWarningReporterD1Ev>:
}

class MemoryLeakWarningReporter: public MemoryLeakFailure
{
public:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
    {
 8008938:	4a05      	ldr	r2, [pc, #20]	; (8008950 <_ZN25MemoryLeakWarningReporterD1Ev+0x20>)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	601a      	str	r2, [r3, #0]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4618      	mov	r0, r3
 8008942:	f7ff fc15 	bl	8008170 <_ZN17MemoryLeakFailureD1Ev>
    }
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4618      	mov	r0, r3
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}
 8008950:	080255c4 	.word	0x080255c4

08008954 <_ZN25MemoryLeakWarningReporterD0Ev>:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
    }
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f7ff ffe7 	bl	8008930 <_ZN25MemoryLeakWarningReporterD1Ev>
 8008962:	2104      	movs	r1, #4
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f7ff fe53 	bl	8008610 <_ZdlPvj>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4618      	mov	r0, r3
 800896e:	3708      	adds	r7, #8
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <_ZN14TestTerminatorC1Ev>:
    virtual void testBody();
};

//////////////////// TestTerminator

class TestTerminator
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	4a04      	ldr	r2, [pc, #16]	; (8008990 <_ZN14TestTerminatorC1Ev+0x1c>)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	601a      	str	r2, [r3, #0]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4618      	mov	r0, r3
 8008986:	370c      	adds	r7, #12
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr
 8008990:	08025f70 	.word	0x08025f70

08008994 <_ZN31TestTerminatorWithoutExceptionsC1Ev>:
public:
    virtual void exitCurrentTest() const _override;
    virtual ~NormalTestTerminator() _destructor_override;
};

class TestTerminatorWithoutExceptions  : public TestTerminator
 8008994:	b580      	push	{r7, lr}
 8008996:	b082      	sub	sp, #8
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4618      	mov	r0, r3
 80089a0:	f7ff ffe8 	bl	8008974 <_ZN14TestTerminatorC1Ev>
 80089a4:	4a03      	ldr	r2, [pc, #12]	; (80089b4 <_ZN31TestTerminatorWithoutExceptionsC1Ev+0x20>)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	601a      	str	r2, [r3, #0]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4618      	mov	r0, r3
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	08025f48 	.word	0x08025f48

080089b8 <_ZN25MemoryLeakWarningReporter4failEPc>:

    virtual void fail(char* fail_string) _override
 80089b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089ba:	b099      	sub	sp, #100	; 0x64
 80089bc:	af02      	add	r7, sp, #8
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
    {
        UtestShell* currentTest = UtestShell::getCurrent();
 80089c2:	f009 fdb7 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 80089c6:	6578      	str	r0, [r7, #84]	; 0x54
        currentTest->failWith(FailFailure(currentTest, currentTest->getName().asCharString(), currentTest->getLineNumber(), fail_string), TestTerminatorWithoutExceptions());
 80089c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	339c      	adds	r3, #156	; 0x9c
 80089ce:	681c      	ldr	r4, [r3, #0]
 80089d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80089d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089d6:	4618      	mov	r0, r3
 80089d8:	f008 fbc4 	bl	8011164 <_ZNK10UtestShell7getNameEv>
 80089dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80089e0:	4618      	mov	r0, r3
 80089e2:	f002 fd4f 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 80089e6:	4605      	mov	r5, r0
 80089e8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80089ea:	f008 fc9b 	bl	8011324 <_ZNK10UtestShell13getLineNumberEv>
 80089ee:	4606      	mov	r6, r0
 80089f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	4618      	mov	r0, r3
 80089f8:	f002 f9b9 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80089fc:	f107 000c 	add.w	r0, r7, #12
 8008a00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008a04:	9300      	str	r3, [sp, #0]
 8008a06:	4633      	mov	r3, r6
 8008a08:	462a      	mov	r2, r5
 8008a0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008a0c:	f004 fd14 	bl	800d438 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 8008a10:	2300      	movs	r3, #0
 8008a12:	653b      	str	r3, [r7, #80]	; 0x50
 8008a14:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7ff ffbb 	bl	8008994 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 8008a1e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008a22:	f107 030c 	add.w	r3, r7, #12
 8008a26:	4619      	mov	r1, r3
 8008a28:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008a2a:	47a0      	blx	r4
 8008a2c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008a30:	4618      	mov	r0, r3
 8008a32:	f009 fe79 	bl	8012728 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 8008a36:	f107 030c 	add.w	r3, r7, #12
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f000 f9ac 	bl	8008d98 <_ZN11FailFailureD1Ev>
 8008a40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008a44:	4618      	mov	r0, r3
 8008a46:	f002 fd4a 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8008a4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f002 fd45 	bl	800b4de <_ZN12SimpleStringD1Ev>
    } // LCOV_EXCL_LINE
 8008a54:	bf00      	nop
 8008a56:	375c      	adds	r7, #92	; 0x5c
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008a5c <_ZN17MemoryLeakFailureC1Ev>:
class MemoryLeakFailure
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	4a04      	ldr	r2, [pc, #16]	; (8008a78 <_ZN17MemoryLeakFailureC1Ev+0x1c>)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	601a      	str	r2, [r3, #0]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr
 8008a78:	080255d8 	.word	0x080255d8

08008a7c <_ZN25MemoryLeakWarningReporterC1Ev>:
class MemoryLeakWarningReporter: public MemoryLeakFailure
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7ff ffe8 	bl	8008a5c <_ZN17MemoryLeakFailureC1Ev>
 8008a8c:	4a03      	ldr	r2, [pc, #12]	; (8008a9c <_ZN25MemoryLeakWarningReporterC1Ev+0x20>)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	601a      	str	r2, [r3, #0]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4618      	mov	r0, r3
 8008a96:	3708      	adds	r7, #8
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	080255c4 	.word	0x080255c4

08008aa0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>:

static MemoryLeakFailure* globalReporter = NULLPTR;
static MemoryLeakDetector* globalDetector = NULLPTR;

MemoryLeakDetector* MemoryLeakWarningPlugin::getGlobalDetector()
{
 8008aa0:	b598      	push	{r3, r4, r7, lr}
 8008aa2:	af00      	add	r7, sp, #0
    if (globalDetector == NULLPTR) {
 8008aa4:	4b11      	ldr	r3, [pc, #68]	; (8008aec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d11b      	bne.n	8008ae4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x44>
        saveAndDisableNewDeleteOverloads();
 8008aac:	f7ff fe60 	bl	8008770 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>

        globalReporter = new MemoryLeakWarningReporter;
 8008ab0:	2004      	movs	r0, #4
 8008ab2:	f7ff fd89 	bl	80085c8 <_Znwj>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	461c      	mov	r4, r3
 8008aba:	4620      	mov	r0, r4
 8008abc:	f7ff ffde 	bl	8008a7c <_ZN25MemoryLeakWarningReporterC1Ev>
 8008ac0:	4b0b      	ldr	r3, [pc, #44]	; (8008af0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 8008ac2:	601c      	str	r4, [r3, #0]
        globalDetector = new MemoryLeakDetector(globalReporter);
 8008ac4:	f241 1050 	movw	r0, #4432	; 0x1150
 8008ac8:	f7ff fd7e 	bl	80085c8 <_Znwj>
 8008acc:	4603      	mov	r3, r0
 8008ace:	461c      	mov	r4, r3
 8008ad0:	4b07      	ldr	r3, [pc, #28]	; (8008af0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	f00c fa3e 	bl	8014f58 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>
 8008adc:	4b03      	ldr	r3, [pc, #12]	; (8008aec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 8008ade:	601c      	str	r4, [r3, #0]

        restoreNewDeleteOverloads();
 8008ae0:	f7ff feb6 	bl	8008850 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>
    }
    return globalDetector;
 8008ae4:	4b01      	ldr	r3, [pc, #4]	; (8008aec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	bd98      	pop	{r3, r4, r7, pc}
 8008aec:	200006ec 	.word	0x200006ec
 8008af0:	200006e8 	.word	0x200006e8

08008af4 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>:
{
    return globalReporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool des)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	460b      	mov	r3, r1
 8008afe:	70fb      	strb	r3, [r7, #3]
    destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_ = des;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	78fa      	ldrb	r2, [r7, #3]
 8008b04:	765a      	strb	r2, [r3, #25]
}
 8008b06:	bf00      	nop
 8008b08:	370c      	adds	r7, #12
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr
	...

08008b14 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>:
    globalDetector = detector;
    globalReporter = reporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetector()
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	af00      	add	r7, sp, #0
    turnOffNewDeleteOverloads();
 8008b18:	f7ff fdbc 	bl	8008694 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
    delete globalDetector;
 8008b1c:	4b0b      	ldr	r3, [pc, #44]	; (8008b4c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d004      	beq.n	8008b2e <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x1a>
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	3204      	adds	r2, #4
 8008b28:	6812      	ldr	r2, [r2, #0]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	4790      	blx	r2
    delete globalReporter;
 8008b2e:	4b08      	ldr	r3, [pc, #32]	; (8008b50 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x3c>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d004      	beq.n	8008b40 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x2c>
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	3204      	adds	r2, #4
 8008b3a:	6812      	ldr	r2, [r2, #0]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	4790      	blx	r2
    globalDetector = NULLPTR;
 8008b40:	4b02      	ldr	r3, [pc, #8]	; (8008b4c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 8008b42:	2200      	movs	r2, #0
 8008b44:	601a      	str	r2, [r3, #0]
}
 8008b46:	bf00      	nop
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	200006ec 	.word	0x200006ec
 8008b50:	200006e8 	.word	0x200006e8

08008b54 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>:
void MemoryLeakWarningPlugin::expectLeaksInTest(size_t n)
{
    expectedLeaks_ = n;
}

MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString& name, MemoryLeakDetector* localDetector) :
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	60b9      	str	r1, [r7, #8]
 8008b5e:	607a      	str	r2, [r7, #4]
    TestPlugin(name), ignoreAllWarnings_(false), destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_(false), expectedLeaks_(0)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	68b9      	ldr	r1, [r7, #8]
 8008b64:	4618      	mov	r0, r3
 8008b66:	f006 fdfd 	bl	800f764 <_ZN10TestPluginC1ERK12SimpleString>
 8008b6a:	4a14      	ldr	r2, [pc, #80]	; (8008bbc <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x68>)
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	601a      	str	r2, [r3, #0]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2200      	movs	r2, #0
 8008b74:	761a      	strb	r2, [r3, #24]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	765a      	strb	r2, [r3, #25]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	61da      	str	r2, [r3, #28]
{
    if (firstPlugin_ == NULLPTR) firstPlugin_ = this;
 8008b82:	4b0f      	ldr	r3, [pc, #60]	; (8008bc0 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d102      	bne.n	8008b90 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x3c>
 8008b8a:	4a0d      	ldr	r2, [pc, #52]	; (8008bc0 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6013      	str	r3, [r2, #0]

    if (localDetector) memLeakDetector_ = localDetector;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d003      	beq.n	8008b9e <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x4a>
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	615a      	str	r2, [r3, #20]
 8008b9c:	e004      	b.n	8008ba8 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x54>
    else memLeakDetector_ = getGlobalDetector();
 8008b9e:	f7ff ff7f 	bl	8008aa0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	615a      	str	r2, [r3, #20]

    memLeakDetector_->enable();
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	695b      	ldr	r3, [r3, #20]
 8008bac:	4618      	mov	r0, r3
 8008bae:	f00c fa69 	bl	8015084 <_ZN18MemoryLeakDetector6enableEv>
}
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	080255ec 	.word	0x080255ec
 8008bc0:	200006f0 	.word	0x200006f0

08008bc4 <_ZN23MemoryLeakWarningPluginD1Ev>:

MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	4a09      	ldr	r2, [pc, #36]	; (8008bf4 <_ZN23MemoryLeakWarningPluginD1Ev+0x30>)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	601a      	str	r2, [r3, #0]
{
    if (destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_) {
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	7e5b      	ldrb	r3, [r3, #25]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d003      	beq.n	8008be2 <_ZN23MemoryLeakWarningPluginD1Ev+0x1e>
        MemoryLeakWarningPlugin::turnOffNewDeleteOverloads();
 8008bda:	f7ff fd5b 	bl	8008694 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
        MemoryLeakWarningPlugin::destroyGlobalDetector();
 8008bde:	f7ff ff99 	bl	8008b14 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4618      	mov	r0, r3
 8008be6:	f006 fdf9 	bl	800f7dc <_ZN10TestPluginD1Ev>
    }
}
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4618      	mov	r0, r3
 8008bee:	3708      	adds	r7, #8
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	080255ec 	.word	0x080255ec

08008bf8 <_ZN23MemoryLeakWarningPluginD0Ev>:
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
}
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f7ff ffdf 	bl	8008bc4 <_ZN23MemoryLeakWarningPluginD1Ev>
 8008c06:	2124      	movs	r1, #36	; 0x24
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f7ff fd01 	bl	8008610 <_ZdlPvj>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4618      	mov	r0, r3
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <_ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::preTestAction(UtestShell& /*test*/, TestResult& result)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	607a      	str	r2, [r7, #4]
    memLeakDetector_->startChecking();
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	695b      	ldr	r3, [r3, #20]
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f00c fa0e 	bl	801504a <_ZN18MemoryLeakDetector13startCheckingEv>
    failureCount_ = result.getFailureCount();
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f7fd ffb0 	bl	8006b94 <_ZNK10TestResult15getFailureCountEv>
 8008c34:	4602      	mov	r2, r0
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	621a      	str	r2, [r3, #32]
}
 8008c3a:	bf00      	nop
 8008c3c:	3710      	adds	r7, #16
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
	...

08008c44 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::postTestAction(UtestShell& test, TestResult& result)
{
 8008c44:	b590      	push	{r4, r7, lr}
 8008c46:	b097      	sub	sp, #92	; 0x5c
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	607a      	str	r2, [r7, #4]
    memLeakDetector_->stopChecking();
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	695b      	ldr	r3, [r3, #20]
 8008c54:	4618      	mov	r0, r3
 8008c56:	f00c fa08 	bl	801506a <_ZN18MemoryLeakDetector12stopCheckingEv>
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_checking);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	695b      	ldr	r3, [r3, #20]
 8008c5e:	2103      	movs	r1, #3
 8008c60:	4618      	mov	r0, r3
 8008c62:	f00c fda5 	bl	80157b0 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 8008c66:	6578      	str	r0, [r7, #84]	; 0x54

    if (!ignoreAllWarnings_ && expectedLeaks_ != leaks && failureCount_ == result.getFailureCount()) {
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	7e1b      	ldrb	r3, [r3, #24]
 8008c6c:	f083 0301 	eor.w	r3, r3, #1
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00e      	beq.n	8008c94 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	69db      	ldr	r3, [r3, #28]
 8008c7a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d009      	beq.n	8008c94 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6a1c      	ldr	r4, [r3, #32]
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f7fd ff85 	bl	8006b94 <_ZNK10TestResult15getFailureCountEv>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	d101      	bne.n	8008c94 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 8008c90:	2301      	movs	r3, #1
 8008c92:	e000      	b.n	8008c96 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x52>
 8008c94:	2300      	movs	r3, #0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d04c      	beq.n	8008d34 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        if(MemoryLeakWarningPlugin::areNewDeleteOverloaded()) {
 8008c9a:	f7ff fd4f 	bl	800873c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d028      	beq.n	8008cf6 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xb2>
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	695b      	ldr	r3, [r3, #20]
 8008ca8:	2103      	movs	r1, #3
 8008caa:	4618      	mov	r0, r3
 8008cac:	f00c fd45 	bl	801573a <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008cb6:	4611      	mov	r1, r2
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f002 f858 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8008cbe:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8008cc2:	f107 0310 	add.w	r3, r7, #16
 8008cc6:	68b9      	ldr	r1, [r7, #8]
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f003 feaf 	bl	800ca2c <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 8008cce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f002 fc03 	bl	800b4de <_ZN12SimpleStringD1Ev>
            result.addFailure(f);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	3334      	adds	r3, #52	; 0x34
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f107 0210 	add.w	r2, r7, #16
 8008ce4:	4611      	mov	r1, r2
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	4798      	blx	r3
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 8008cea:	f107 0310 	add.w	r3, r7, #16
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f003 ff5c 	bl	800cbac <_ZN11TestFailureD1Ev>
 8008cf4:	e01e      	b.n	8008d34 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        } else if(expectedLeaks_ > 0) {
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	69db      	ldr	r3, [r3, #28]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d01a      	beq.n	8008d34 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
            result.print(StringFromFormat("Warning: Expected %d leak(s), but leak detection was disabled", (int) expectedLeaks_).asCharString());
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	3338      	adds	r3, #56	; 0x38
 8008d04:	681c      	ldr	r4, [r3, #0]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	69db      	ldr	r3, [r3, #28]
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008d10:	4910      	ldr	r1, [pc, #64]	; (8008d54 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x110>)
 8008d12:	4618      	mov	r0, r3
 8008d14:	f003 f8ea 	bl	800beec <_Z16StringFromFormatPKcz>
 8008d18:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f002 fbb1 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 8008d22:	4603      	mov	r3, r0
 8008d24:	4619      	mov	r1, r3
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	47a0      	blx	r4
 8008d2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f002 fbd5 	bl	800b4de <_ZN12SimpleStringD1Ev>
        }
    }
    memLeakDetector_->markCheckingPeriodLeaksAsNonCheckingPeriod();
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	695b      	ldr	r3, [r3, #20]
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f00c fd13 	bl	8015764 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>
    ignoreAllWarnings_ = false;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	761a      	strb	r2, [r3, #24]
    expectedLeaks_ = 0;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2200      	movs	r2, #0
 8008d48:	61da      	str	r2, [r3, #28]
}
 8008d4a:	bf00      	nop
 8008d4c:	375c      	adds	r7, #92	; 0x5c
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd90      	pop	{r4, r7, pc}
 8008d52:	bf00      	nop
 8008d54:	0802205c 	.word	0x0802205c

08008d58 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>:

const char* MemoryLeakWarningPlugin::FinalReport(size_t toBeDeletedLeaks)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_enabled);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	695b      	ldr	r3, [r3, #20]
 8008d66:	2102      	movs	r1, #2
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f00c fd21 	bl	80157b0 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 8008d6e:	60f8      	str	r0, [r7, #12]
    if (leaks != toBeDeletedLeaks) return memLeakDetector_->report(mem_leak_period_enabled);
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d007      	beq.n	8008d88 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x30>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	695b      	ldr	r3, [r3, #20]
 8008d7c:	2102      	movs	r1, #2
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f00c fcdb 	bl	801573a <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 8008d84:	4603      	mov	r3, r0
 8008d86:	e000      	b.n	8008d8a <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x32>
    return "";
 8008d88:	4b02      	ldr	r3, [pc, #8]	; (8008d94 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x3c>)
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3710      	adds	r7, #16
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	0802209c 	.word	0x0802209c

08008d98 <_ZN11FailFailureD1Ev>:
{
public:
    CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& textString = "");
};

class FailFailure : public TestFailure
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	4a05      	ldr	r2, [pc, #20]	; (8008db8 <_ZN11FailFailureD1Ev+0x20>)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	601a      	str	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4618      	mov	r0, r3
 8008daa:	f003 feff 	bl	800cbac <_ZN11TestFailureD1Ev>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4618      	mov	r0, r3
 8008db2:	3708      	adds	r7, #8
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	08025634 	.word	0x08025634

08008dbc <_ZN11FailFailureD0Ev>:
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f7ff ffe7 	bl	8008d98 <_ZN11FailFailureD1Ev>
 8008dca:	2134      	movs	r1, #52	; 0x34
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f7ff fc1f 	bl	8008610 <_ZdlPvj>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3708      	adds	r7, #8
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <_ZN17cpputest_longlongC1Ei>:

struct cpputest_longlong
{
#if defined(__cplusplus)
  cpputest_longlong() {}
  cpputest_longlong(int) {}
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4618      	mov	r0, r3
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <_ZN18cpputest_ulonglongC1Ei>:

struct cpputest_ulonglong
{
#if defined(__cplusplus)
  cpputest_ulonglong() {}
  cpputest_ulonglong(int) {}
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4618      	mov	r0, r3
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <_ZN19MockFailureReporterC1Ev>:
class MockFailureReporter
{
protected:
    bool crashOnFailure_;
public:
    MockFailureReporter() : crashOnFailure_(false){}
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	4a06      	ldr	r2, [pc, #24]	; (8008e30 <_ZN19MockFailureReporterC1Ev+0x24>)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	601a      	str	r2, [r3, #0]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	711a      	strb	r2, [r3, #4]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4618      	mov	r0, r3
 8008e24:	370c      	adds	r7, #12
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	08026810 	.word	0x08026810

08008e34 <_ZN19MockFailureReporterD1Ev>:
    virtual ~MockFailureReporter() {}
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	4a04      	ldr	r2, [pc, #16]	; (8008e50 <_ZN19MockFailureReporterD1Ev+0x1c>)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	601a      	str	r2, [r3, #0]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4618      	mov	r0, r3
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr
 8008e50:	08026810 	.word	0x08026810

08008e54 <_ZN19MockFailureReporterD0Ev>:
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f7ff ffe9 	bl	8008e34 <_ZN19MockFailureReporterD1Ev>
 8008e62:	2108      	movs	r1, #8
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f7ff fbd3 	bl	8008610 <_ZdlPvj>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <_ZN11MockFailureD1Ev>:

class MockFailure : public TestFailure
{
public:
    MockFailure(UtestShell* test);
    virtual ~MockFailure() _destructor_override {}
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	4a05      	ldr	r2, [pc, #20]	; (8008e94 <_ZN11MockFailureD1Ev+0x20>)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	601a      	str	r2, [r3, #0]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4618      	mov	r0, r3
 8008e86:	f003 fe91 	bl	800cbac <_ZN11TestFailureD1Ev>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3708      	adds	r7, #8
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	08025788 	.word	0x08025788

08008e98 <_ZN11MockFailureD0Ev>:
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f7ff ffe7 	bl	8008e74 <_ZN11MockFailureD1Ev>
 8008ea6:	2134      	movs	r1, #52	; 0x34
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f7ff fbb1 	bl	8008610 <_ZdlPvj>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3708      	adds	r7, #8
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <_ZN14MockNamedValueC1ERKS_>:
class MockNamedValueComparatorsAndCopiersRepository;
class MockNamedValue
{
public:
    MockNamedValue(const SimpleString& name);
    DEFAULT_COPY_CONSTRUCTOR(MockNamedValue)
 8008eb8:	b590      	push	{r4, r7, lr}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
 8008ec2:	4a16      	ldr	r2, [pc, #88]	; (8008f1c <_ZN14MockNamedValueC1ERKS_+0x64>)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	601a      	str	r2, [r3, #0]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	1d1a      	adds	r2, r3, #4
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	3304      	adds	r3, #4
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	4610      	mov	r0, r2
 8008ed4:	f001 ff9f 	bl	800ae16 <_ZN12SimpleStringC1ERKS_>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f103 020c 	add.w	r2, r3, #12
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	330c      	adds	r3, #12
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	f001 ff96 	bl	800ae16 <_ZN12SimpleStringC1ERKS_>
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	f102 0418 	add.w	r4, r2, #24
 8008ef2:	3318      	adds	r3, #24
 8008ef4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008ef6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	629a      	str	r2, [r3, #40]	; 0x28
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	62da      	str	r2, [r3, #44]	; 0x2c
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	631a      	str	r2, [r3, #48]	; 0x30
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4618      	mov	r0, r3
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd90      	pop	{r4, r7, pc}
 8008f1c:	08026850 	.word	0x08026850

08008f20 <_Z4mockRK12SimpleStringP19MockFailureReporter>:
#define MOCK_SUPPORT_SCOPE_PREFIX "!!!$$$MockingSupportScope$$$!!!"

static MockSupport global_mock;

MockSupport& mock(const SimpleString& mockName, MockFailureReporter* failureReporterForThisCall)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
    MockSupport& mock_support = (mockName != "") ? *global_mock.getMockSupportScope(mockName) : global_mock;
 8008f2a:	f107 030c 	add.w	r3, r7, #12
 8008f2e:	4916      	ldr	r1, [pc, #88]	; (8008f88 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x68>)
 8008f30:	4618      	mov	r0, r3
 8008f32:	f001 ff1c 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8008f36:	f107 030c 	add.w	r3, r7, #12
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f002 fb1f 	bl	800b580 <_ZneRK12SimpleStringS1_>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d005      	beq.n	8008f54 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x34>
 8008f48:	6879      	ldr	r1, [r7, #4]
 8008f4a:	4810      	ldr	r0, [pc, #64]	; (8008f8c <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 8008f4c:	f000 ff70 	bl	8009e30 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>
 8008f50:	4603      	mov	r3, r0
 8008f52:	e000      	b.n	8008f56 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x36>
 8008f54:	4b0d      	ldr	r3, [pc, #52]	; (8008f8c <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 8008f56:	617b      	str	r3, [r7, #20]
 8008f58:	f107 030c 	add.w	r3, r7, #12
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f002 fabe 	bl	800b4de <_ZN12SimpleStringD1Ev>
    mock_support.setActiveReporter(failureReporterForThisCall);
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	33a8      	adds	r3, #168	; 0xa8
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	6839      	ldr	r1, [r7, #0]
 8008f6c:	6978      	ldr	r0, [r7, #20]
 8008f6e:	4798      	blx	r3
    mock_support.setDefaultComparatorsAndCopiersRepository();
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	33ac      	adds	r3, #172	; 0xac
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	6978      	ldr	r0, [r7, #20]
 8008f7a:	4798      	blx	r3
    return mock_support;
 8008f7c:	697b      	ldr	r3, [r7, #20]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3718      	adds	r7, #24
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	080220a0 	.word	0x080220a0
 8008f8c:	200006f4 	.word	0x200006f4

08008f90 <_ZN11MockSupportC1ERK12SimpleString>:

MockSupport::MockSupport(const SimpleString& mockName)
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
    : actualCallOrder_(0), expectedCallOrder_(0), strictOrdering_(false), standardReporter_(&defaultReporter_), ignoreOtherCalls_(false), enabled_(true), lastActualFunctionCall_(NULLPTR), mockName_(mockName), tracing_(false)
 8008f9a:	4a21      	ldr	r2, [pc, #132]	; (8009020 <_ZN11MockSupportC1ERK12SimpleString+0x90>)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	601a      	str	r2, [r3, #0]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	605a      	str	r2, [r3, #4]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	609a      	str	r2, [r3, #8]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	731a      	strb	r2, [r3, #12]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f103 0218 	add.w	r2, r3, #24
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	615a      	str	r2, [r3, #20]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	3318      	adds	r3, #24
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7ff ff23 	bl	8008e0c <_ZN19MockFailureReporterC1Ev>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	3320      	adds	r3, #32
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f010 fefc 	bl	8019dc8 <_ZN21MockExpectedCallsListC1Ev>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	62da      	str	r2, [r3, #44]	; 0x2c
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	3330      	adds	r3, #48	; 0x30
 8008fea:	4618      	mov	r0, r3
 8008fec:	f014 fbea 	bl	801d7c4 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	3338      	adds	r3, #56	; 0x38
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f014 faf4 	bl	801d5e2 <_ZN18MockNamedValueListC1Ev>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	333c      	adds	r3, #60	; 0x3c
 8008ffe:	6839      	ldr	r1, [r7, #0]
 8009000:	4618      	mov	r0, r3
 8009002:	f001 ff08 	bl	800ae16 <_ZN12SimpleStringC1ERKS_>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
{
    setActiveReporter(NULLPTR);
 800900e:	2100      	movs	r1, #0
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 f894 	bl	800913e <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>
}
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	4618      	mov	r0, r3
 800901a:	3708      	adds	r7, #8
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}
 8009020:	08025660 	.word	0x08025660

08009024 <_ZN11MockSupportD1Ev>:

MockSupport::~MockSupport()
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	4a0d      	ldr	r2, [pc, #52]	; (8009064 <_ZN11MockSupportD1Ev+0x40>)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	601a      	str	r2, [r3, #0]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	333c      	adds	r3, #60	; 0x3c
 8009036:	4618      	mov	r0, r3
 8009038:	f002 fa51 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	3330      	adds	r3, #48	; 0x30
 8009040:	4618      	mov	r0, r3
 8009042:	f014 fbd3 	bl	801d7ec <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	3320      	adds	r3, #32
 800904a:	4618      	mov	r0, r3
 800904c:	f010 fed0 	bl	8019df0 <_ZN21MockExpectedCallsListD1Ev>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	3318      	adds	r3, #24
 8009054:	4618      	mov	r0, r3
 8009056:	f7ff feed 	bl	8008e34 <_ZN19MockFailureReporterD1Ev>
{
}
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4618      	mov	r0, r3
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	08025660 	.word	0x08025660

08009068 <_ZN11MockSupportD0Ev>:
MockSupport::~MockSupport()
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
}
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f7ff ffd7 	bl	8009024 <_ZN11MockSupportD1Ev>
 8009076:	2148      	movs	r1, #72	; 0x48
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f7ff fac9 	bl	8008610 <_ZdlPvj>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4618      	mov	r0, r3
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <_ZN11MockSupport14crashOnFailureEb>:

void MockSupport::crashOnFailure(bool shouldCrash)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	460b      	mov	r3, r1
 8009092:	70fb      	strb	r3, [r7, #3]
    activeReporter_->crashOnFailure(shouldCrash);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	691a      	ldr	r2, [r3, #16]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	3310      	adds	r3, #16
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	78f9      	ldrb	r1, [r7, #3]
 80090a4:	4610      	mov	r0, r2
 80090a6:	4798      	blx	r3
}
 80090a8:	bf00      	nop
 80090aa:	3708      	adds	r7, #8
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter>:

void MockSupport::setMockFailureStandardReporter(MockFailureReporter* reporter)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
    standardReporter_ = (reporter != NULLPTR) ? reporter : &defaultReporter_;
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d102      	bne.n	80090c6 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x16>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	3318      	adds	r3, #24
 80090c4:	e000      	b.n	80090c8 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x18>
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	687a      	ldr	r2, [r7, #4]
 80090ca:	6153      	str	r3, [r2, #20]

    if (lastActualFunctionCall_)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d00a      	beq.n	80090ea <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x3a>
        lastActualFunctionCall_->setMockFailureReporter(standardReporter_);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	33c8      	adds	r3, #200	; 0xc8
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	6952      	ldr	r2, [r2, #20]
 80090e6:	4611      	mov	r1, r2
 80090e8:	4798      	blx	r3

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	3338      	adds	r3, #56	; 0x38
 80090ee:	4618      	mov	r0, r3
 80090f0:	f014 fb0d 	bl	801d70e <_ZN18MockNamedValueList5beginEv>
 80090f4:	60f8      	str	r0, [r7, #12]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d01c      	beq.n	8009136 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x86>
        if (getMockSupport(p)) getMockSupport(p)->setMockFailureStandardReporter(standardReporter_);
 80090fc:	68f9      	ldr	r1, [r7, #12]
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 ff26 	bl	8009f50 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	bf14      	ite	ne
 800910a:	2301      	movne	r3, #1
 800910c:	2300      	moveq	r3, #0
 800910e:	b2db      	uxtb	r3, r3
 8009110:	2b00      	cmp	r3, #0
 8009112:	d00b      	beq.n	800912c <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x7c>
 8009114:	68f9      	ldr	r1, [r7, #12]
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 ff1a 	bl	8009f50 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800911c:	4603      	mov	r3, r0
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	32a4      	adds	r2, #164	; 0xa4
 8009122:	6812      	ldr	r2, [r2, #0]
 8009124:	6879      	ldr	r1, [r7, #4]
 8009126:	6949      	ldr	r1, [r1, #20]
 8009128:	4618      	mov	r0, r3
 800912a:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800912c:	68f8      	ldr	r0, [r7, #12]
 800912e:	f014 f9f7 	bl	801d520 <_ZN22MockNamedValueListNode4nextEv>
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	e7df      	b.n	80090f6 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x46>
}
 8009136:	bf00      	nop
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>:

void MockSupport::setActiveReporter(MockFailureReporter* reporter)
{
 800913e:	b480      	push	{r7}
 8009140:	b083      	sub	sp, #12
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
 8009146:	6039      	str	r1, [r7, #0]
    activeReporter_ = (reporter) ? reporter : standardReporter_;
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d102      	bne.n	8009154 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x16>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	695b      	ldr	r3, [r3, #20]
 8009152:	e000      	b.n	8009156 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x18>
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	6113      	str	r3, [r2, #16]
}
 800915a:	bf00      	nop
 800915c:	370c      	adds	r7, #12
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr

08009166 <_ZN11MockSupport41setDefaultComparatorsAndCopiersRepositoryEv>:

void MockSupport::setDefaultComparatorsAndCopiersRepository()
{
 8009166:	b580      	push	{r7, lr}
 8009168:	b082      	sub	sp, #8
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
    MockNamedValue::setDefaultComparatorsAndCopiersRepository(&comparatorsAndCopiersRepository_);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	3330      	adds	r3, #48	; 0x30
 8009172:	4618      	mov	r0, r3
 8009174:	f012 fb10 	bl	801b798 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>
}
 8009178:	bf00      	nop
 800917a:	3708      	adds	r7, #8
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockSupport::installComparator(const SimpleString& typeName, MockNamedValueComparator& comparator)
{
 8009180:	b590      	push	{r4, r7, lr}
 8009182:	b087      	sub	sp, #28
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installComparator(typeName, comparator);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	3330      	adds	r3, #48	; 0x30
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	68b9      	ldr	r1, [r7, #8]
 8009194:	4618      	mov	r0, r3
 8009196:	f014 fb77 	bl	801d888 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	3338      	adds	r3, #56	; 0x38
 800919e:	4618      	mov	r0, r3
 80091a0:	f014 fab5 	bl	801d70e <_ZN18MockNamedValueList5beginEv>
 80091a4:	6178      	str	r0, [r7, #20]
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d01c      	beq.n	80091e6 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installComparator(typeName, comparator);
 80091ac:	6979      	ldr	r1, [r7, #20]
 80091ae:	68f8      	ldr	r0, [r7, #12]
 80091b0:	f000 fece 	bl	8009f50 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	bf14      	ite	ne
 80091ba:	2301      	movne	r3, #1
 80091bc:	2300      	moveq	r3, #0
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d00b      	beq.n	80091dc <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x5c>
 80091c4:	6979      	ldr	r1, [r7, #20]
 80091c6:	68f8      	ldr	r0, [r7, #12]
 80091c8:	f000 fec2 	bl	8009f50 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80091cc:	4603      	mov	r3, r0
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	32b0      	adds	r2, #176	; 0xb0
 80091d2:	6814      	ldr	r4, [r2, #0]
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	68b9      	ldr	r1, [r7, #8]
 80091d8:	4618      	mov	r0, r3
 80091da:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80091dc:	6978      	ldr	r0, [r7, #20]
 80091de:	f014 f99f 	bl	801d520 <_ZN22MockNamedValueListNode4nextEv>
 80091e2:	6178      	str	r0, [r7, #20]
 80091e4:	e7df      	b.n	80091a6 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x26>
}
 80091e6:	bf00      	nop
 80091e8:	371c      	adds	r7, #28
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd90      	pop	{r4, r7, pc}

080091ee <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockSupport::installCopier(const SimpleString& typeName, MockNamedValueCopier& copier)
{
 80091ee:	b590      	push	{r4, r7, lr}
 80091f0:	b087      	sub	sp, #28
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	60f8      	str	r0, [r7, #12]
 80091f6:	60b9      	str	r1, [r7, #8]
 80091f8:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installCopier(typeName, copier);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	3330      	adds	r3, #48	; 0x30
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	68b9      	ldr	r1, [r7, #8]
 8009202:	4618      	mov	r0, r3
 8009204:	f014 fb5c 	bl	801d8c0 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	3338      	adds	r3, #56	; 0x38
 800920c:	4618      	mov	r0, r3
 800920e:	f014 fa7e 	bl	801d70e <_ZN18MockNamedValueList5beginEv>
 8009212:	6178      	str	r0, [r7, #20]
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d01c      	beq.n	8009254 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installCopier(typeName, copier);
 800921a:	6979      	ldr	r1, [r7, #20]
 800921c:	68f8      	ldr	r0, [r7, #12]
 800921e:	f000 fe97 	bl	8009f50 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009222:	4603      	mov	r3, r0
 8009224:	2b00      	cmp	r3, #0
 8009226:	bf14      	ite	ne
 8009228:	2301      	movne	r3, #1
 800922a:	2300      	moveq	r3, #0
 800922c:	b2db      	uxtb	r3, r3
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00b      	beq.n	800924a <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x5c>
 8009232:	6979      	ldr	r1, [r7, #20]
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f000 fe8b 	bl	8009f50 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800923a:	4603      	mov	r3, r0
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	32b4      	adds	r2, #180	; 0xb4
 8009240:	6814      	ldr	r4, [r2, #0]
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	68b9      	ldr	r1, [r7, #8]
 8009246:	4618      	mov	r0, r3
 8009248:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800924a:	6978      	ldr	r0, [r7, #20]
 800924c:	f014 f968 	bl	801d520 <_ZN22MockNamedValueListNode4nextEv>
 8009250:	6178      	str	r0, [r7, #20]
 8009252:	e7df      	b.n	8009214 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x26>
}
 8009254:	bf00      	nop
 8009256:	371c      	adds	r7, #28
 8009258:	46bd      	mov	sp, r7
 800925a:	bd90      	pop	{r4, r7, pc}

0800925c <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository>:

void MockSupport::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
    comparatorsAndCopiersRepository_.installComparatorsAndCopiers(repository);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	3330      	adds	r3, #48	; 0x30
 800926a:	6839      	ldr	r1, [r7, #0]
 800926c:	4618      	mov	r0, r3
 800926e:	f014 fb93 	bl	801d998 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	3338      	adds	r3, #56	; 0x38
 8009276:	4618      	mov	r0, r3
 8009278:	f014 fa49 	bl	801d70e <_ZN18MockNamedValueList5beginEv>
 800927c:	60f8      	str	r0, [r7, #12]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d01b      	beq.n	80092bc <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x60>
        if (getMockSupport(p)) getMockSupport(p)->installComparatorsAndCopiers(repository);
 8009284:	68f9      	ldr	r1, [r7, #12]
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 fe62 	bl	8009f50 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800928c:	4603      	mov	r3, r0
 800928e:	2b00      	cmp	r3, #0
 8009290:	bf14      	ite	ne
 8009292:	2301      	movne	r3, #1
 8009294:	2300      	moveq	r3, #0
 8009296:	b2db      	uxtb	r3, r3
 8009298:	2b00      	cmp	r3, #0
 800929a:	d00a      	beq.n	80092b2 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x56>
 800929c:	68f9      	ldr	r1, [r7, #12]
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 fe56 	bl	8009f50 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80092a4:	4603      	mov	r3, r0
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	32b8      	adds	r2, #184	; 0xb8
 80092aa:	6812      	ldr	r2, [r2, #0]
 80092ac:	6839      	ldr	r1, [r7, #0]
 80092ae:	4618      	mov	r0, r3
 80092b0:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80092b2:	68f8      	ldr	r0, [r7, #12]
 80092b4:	f014 f934 	bl	801d520 <_ZN22MockNamedValueListNode4nextEv>
 80092b8:	60f8      	str	r0, [r7, #12]
 80092ba:	e7e0      	b.n	800927e <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x22>
}
 80092bc:	bf00      	nop
 80092be:	3710      	adds	r7, #16
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv>:

void MockSupport::removeAllComparatorsAndCopiers()
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
    comparatorsAndCopiersRepository_.clear();
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	3330      	adds	r3, #48	; 0x30
 80092d0:	4618      	mov	r0, r3
 80092d2:	f014 faba 	bl	801d84a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	3338      	adds	r3, #56	; 0x38
 80092da:	4618      	mov	r0, r3
 80092dc:	f014 fa17 	bl	801d70e <_ZN18MockNamedValueList5beginEv>
 80092e0:	60f8      	str	r0, [r7, #12]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d01a      	beq.n	800931e <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x5a>
        if (getMockSupport(p)) getMockSupport(p)->removeAllComparatorsAndCopiers();
 80092e8:	68f9      	ldr	r1, [r7, #12]
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 fe30 	bl	8009f50 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80092f0:	4603      	mov	r3, r0
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	bf14      	ite	ne
 80092f6:	2301      	movne	r3, #1
 80092f8:	2300      	moveq	r3, #0
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d009      	beq.n	8009314 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x50>
 8009300:	68f9      	ldr	r1, [r7, #12]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 fe24 	bl	8009f50 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009308:	4603      	mov	r3, r0
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	32bc      	adds	r2, #188	; 0xbc
 800930e:	6812      	ldr	r2, [r2, #0]
 8009310:	4618      	mov	r0, r3
 8009312:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	f014 f903 	bl	801d520 <_ZN22MockNamedValueListNode4nextEv>
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	e7e1      	b.n	80092e2 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x1e>
}
 800931e:	bf00      	nop
 8009320:	3710      	adds	r7, #16
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <_ZN11MockSupport5clearEv>:

void MockSupport::clear()
{
 8009326:	b580      	push	{r7, lr}
 8009328:	b084      	sub	sp, #16
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
    delete lastActualFunctionCall_;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009332:	2b00      	cmp	r3, #0
 8009334:	d004      	beq.n	8009340 <_ZN11MockSupport5clearEv+0x1a>
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	3204      	adds	r2, #4
 800933a:	6812      	ldr	r2, [r2, #0]
 800933c:	4618      	mov	r0, r3
 800933e:	4790      	blx	r2
    lastActualFunctionCall_ = NULLPTR;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2200      	movs	r2, #0
 8009344:	62da      	str	r2, [r3, #44]	; 0x2c

    tracing_ = false;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    MockActualCallTrace::clearInstance();
 800934e:	f00e fe0d 	bl	8017f6c <_ZN19MockActualCallTrace13clearInstanceEv>

    expectations_.deleteAllExpectationsAndClearList();
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	3320      	adds	r3, #32
 8009356:	4618      	mov	r0, r3
 8009358:	f011 f937 	bl	801a5ca <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>
    ignoreOtherCalls_ = false;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    enabled_ = true;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2201      	movs	r2, #1
 8009368:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    actualCallOrder_ = 0;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	605a      	str	r2, [r3, #4]
    expectedCallOrder_ = 0;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	609a      	str	r2, [r3, #8]
    strictOrdering_ = false;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	731a      	strb	r2, [r3, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	3338      	adds	r3, #56	; 0x38
 8009382:	4618      	mov	r0, r3
 8009384:	f014 f9c3 	bl	801d70e <_ZN18MockNamedValueList5beginEv>
 8009388:	60f8      	str	r0, [r7, #12]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d01a      	beq.n	80093c6 <_ZN11MockSupport5clearEv+0xa0>
        MockSupport* support = getMockSupport(p);
 8009390:	68f9      	ldr	r1, [r7, #12]
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 fddc 	bl	8009f50 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009398:	60b8      	str	r0, [r7, #8]
        if (support) {
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d00d      	beq.n	80093bc <_ZN11MockSupport5clearEv+0x96>
            support->clear();
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	339c      	adds	r3, #156	; 0x9c
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	68b8      	ldr	r0, [r7, #8]
 80093aa:	4798      	blx	r3
            delete support;
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d004      	beq.n	80093bc <_ZN11MockSupport5clearEv+0x96>
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	3204      	adds	r2, #4
 80093b6:	6812      	ldr	r2, [r2, #0]
 80093b8:	4618      	mov	r0, r3
 80093ba:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 80093bc:	68f8      	ldr	r0, [r7, #12]
 80093be:	f014 f8af 	bl	801d520 <_ZN22MockNamedValueListNode4nextEv>
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	e7e1      	b.n	800938a <_ZN11MockSupport5clearEv+0x64>
        }
    }
    data_.clear();
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	3338      	adds	r3, #56	; 0x38
 80093ca:	4618      	mov	r0, r3
 80093cc:	f014 f917 	bl	801d5fe <_ZN18MockNamedValueList5clearEv>
}
 80093d0:	bf00      	nop
 80093d2:	3710      	adds	r7, #16
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <_ZN11MockSupport11strictOrderEv>:

void MockSupport::strictOrder()
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
    strictOrdering_ = true;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2201      	movs	r2, #1
 80093e4:	731a      	strb	r2, [r3, #12]
}
 80093e6:	bf00      	nop
 80093e8:	370c      	adds	r7, #12
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr
	...

080093f4 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>:

SimpleString MockSupport::appendScopeToName(const SimpleString& functionName)
{
 80093f4:	b590      	push	{r4, r7, lr}
 80093f6:	b089      	sub	sp, #36	; 0x24
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	60f8      	str	r0, [r7, #12]
 80093fc:	60b9      	str	r1, [r7, #8]
 80093fe:	607a      	str	r2, [r7, #4]
    if (mockName_.isEmpty()) return functionName;
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	333c      	adds	r3, #60	; 0x3c
 8009404:	4618      	mov	r0, r3
 8009406:	f002 f859 	bl	800b4bc <_ZNK12SimpleString7isEmptyEv>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d004      	beq.n	800941a <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x26>
 8009410:	6879      	ldr	r1, [r7, #4]
 8009412:	68f8      	ldr	r0, [r7, #12]
 8009414:	f001 fcff 	bl	800ae16 <_ZN12SimpleStringC1ERKS_>
 8009418:	e021      	b.n	800945e <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x6a>
    return mockName_ + "::" + functionName;
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8009420:	f107 0318 	add.w	r3, r7, #24
 8009424:	4910      	ldr	r1, [pc, #64]	; (8009468 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x74>)
 8009426:	4618      	mov	r0, r3
 8009428:	f001 fca1 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800942c:	f107 0310 	add.w	r3, r7, #16
 8009430:	f107 0218 	add.w	r2, r7, #24
 8009434:	4621      	mov	r1, r4
 8009436:	4618      	mov	r0, r3
 8009438:	f002 f8b3 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f107 0110 	add.w	r1, r7, #16
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	4618      	mov	r0, r3
 8009446:	f002 f8ac 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 800944a:	f107 0310 	add.w	r3, r7, #16
 800944e:	4618      	mov	r0, r3
 8009450:	f002 f845 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8009454:	f107 0318 	add.w	r3, r7, #24
 8009458:	4618      	mov	r0, r3
 800945a:	f002 f840 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	3724      	adds	r7, #36	; 0x24
 8009462:	46bd      	mov	sp, r7
 8009464:	bd90      	pop	{r4, r7, pc}
 8009466:	bf00      	nop
 8009468:	080220a4 	.word	0x080220a4

0800946c <_ZN11MockSupport13expectOneCallERK12SimpleString>:

MockExpectedCall& MockSupport::expectOneCall(const SimpleString& functionName)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
    return expectNCalls(1, functionName);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	3314      	adds	r3, #20
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	683a      	ldr	r2, [r7, #0]
 8009480:	2101      	movs	r1, #1
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	4798      	blx	r3
 8009486:	4603      	mov	r3, r0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3708      	adds	r7, #8
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <_ZN11MockSupport12expectNoCallERK12SimpleString>:

void MockSupport::expectNoCall(const SimpleString& functionName)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
    expectNCalls(0, functionName);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	3314      	adds	r3, #20
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	683a      	ldr	r2, [r7, #0]
 80094a4:	2100      	movs	r1, #0
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	4798      	blx	r3
}
 80094aa:	bf00      	nop
 80094ac:	3708      	adds	r7, #8
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
	...

080094b4 <_ZN11MockSupport12expectNCallsEjRK12SimpleString>:

MockExpectedCall& MockSupport::expectNCalls(unsigned int amount, const SimpleString& functionName)
{
 80094b4:	b590      	push	{r4, r7, lr}
 80094b6:	b089      	sub	sp, #36	; 0x24
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	60b9      	str	r1, [r7, #8]
 80094be:	607a      	str	r2, [r7, #4]
    if (!enabled_) return MockIgnoredExpectedCall::instance();
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80094c6:	f083 0301 	eor.w	r3, r3, #1
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d003      	beq.n	80094d8 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x24>
 80094d0:	f010 fbf6 	bl	8019cc0 <_ZN23MockIgnoredExpectedCall8instanceEv>
 80094d4:	4603      	mov	r3, r0
 80094d6:	e041      	b.n	800955c <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xa8>

    countCheck();
 80094d8:	68f8      	ldr	r0, [r7, #12]
 80094da:	f000 fb1b 	bl	8009b14 <_ZN11MockSupport10countCheckEv>

    MockCheckedExpectedCall* call = new MockCheckedExpectedCall(amount);
 80094de:	22a5      	movs	r2, #165	; 0xa5
 80094e0:	4920      	ldr	r1, [pc, #128]	; (8009564 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xb0>)
 80094e2:	2070      	movs	r0, #112	; 0x70
 80094e4:	f7ff f880 	bl	80085e8 <_ZnwjPKci>
 80094e8:	4604      	mov	r4, r0
 80094ea:	68b9      	ldr	r1, [r7, #8]
 80094ec:	4620      	mov	r0, r4
 80094ee:	f00f f8f3 	bl	80186d8 <_ZN23MockCheckedExpectedCallC1Ej>
 80094f2:	61fc      	str	r4, [r7, #28]
    call->withName(appendScopeToName(functionName));
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	3308      	adds	r3, #8
 80094fa:	681c      	ldr	r4, [r3, #0]
 80094fc:	f107 0314 	add.w	r3, r7, #20
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	68f9      	ldr	r1, [r7, #12]
 8009504:	4618      	mov	r0, r3
 8009506:	f7ff ff75 	bl	80093f4 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>
 800950a:	f107 0314 	add.w	r3, r7, #20
 800950e:	4619      	mov	r1, r3
 8009510:	69f8      	ldr	r0, [r7, #28]
 8009512:	47a0      	blx	r4
 8009514:	f107 0314 	add.w	r3, r7, #20
 8009518:	4618      	mov	r0, r3
 800951a:	f001 ffe0 	bl	800b4de <_ZN12SimpleStringD1Ev>
    if (strictOrdering_) {
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	7b1b      	ldrb	r3, [r3, #12]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d013      	beq.n	800954e <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x9a>
        call->withCallOrder(expectedCallOrder_ + 1, expectedCallOrder_ + amount);
 8009526:	69fb      	ldr	r3, [r7, #28]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	3310      	adds	r3, #16
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	68fa      	ldr	r2, [r7, #12]
 8009530:	6892      	ldr	r2, [r2, #8]
 8009532:	1c50      	adds	r0, r2, #1
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	6891      	ldr	r1, [r2, #8]
 8009538:	68ba      	ldr	r2, [r7, #8]
 800953a:	440a      	add	r2, r1
 800953c:	4601      	mov	r1, r0
 800953e:	69f8      	ldr	r0, [r7, #28]
 8009540:	4798      	blx	r3
        expectedCallOrder_ += amount;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	689a      	ldr	r2, [r3, #8]
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	441a      	add	r2, r3
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	609a      	str	r2, [r3, #8]
    }
    expectations_.addExpectedCall(call);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	3320      	adds	r3, #32
 8009552:	69f9      	ldr	r1, [r7, #28]
 8009554:	4618      	mov	r0, r3
 8009556:	f010 fd89 	bl	801a06c <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>
    return *call;
 800955a:	69fb      	ldr	r3, [r7, #28]
}
 800955c:	4618      	mov	r0, r3
 800955e:	3724      	adds	r7, #36	; 0x24
 8009560:	46bd      	mov	sp, r7
 8009562:	bd90      	pop	{r4, r7, pc}
 8009564:	080220a8 	.word	0x080220a8

08009568 <_ZN11MockSupport16createActualCallEv>:

MockCheckedActualCall* MockSupport::createActualCall()
{
 8009568:	b5b0      	push	{r4, r5, r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
    lastActualFunctionCall_ = new MockCheckedActualCall(++actualCallOrder_, activeReporter_, expectations_);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	1c5a      	adds	r2, r3, #1
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	605a      	str	r2, [r3, #4]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	685d      	ldr	r5, [r3, #4]
 800957e:	22b1      	movs	r2, #177	; 0xb1
 8009580:	490a      	ldr	r1, [pc, #40]	; (80095ac <_ZN11MockSupport16createActualCallEv+0x44>)
 8009582:	202c      	movs	r0, #44	; 0x2c
 8009584:	f7ff f830 	bl	80085e8 <_ZnwjPKci>
 8009588:	4604      	mov	r4, r0
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	691a      	ldr	r2, [r3, #16]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	3320      	adds	r3, #32
 8009592:	4629      	mov	r1, r5
 8009594:	4620      	mov	r0, r4
 8009596:	f00c fbdb 	bl	8015d50 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	62dc      	str	r4, [r3, #44]	; 0x2c
    return lastActualFunctionCall_;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3708      	adds	r7, #8
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bdb0      	pop	{r4, r5, r7, pc}
 80095aa:	bf00      	nop
 80095ac:	080220a8 	.word	0x080220a8

080095b0 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>:

bool MockSupport::callIsIgnored(const SimpleString& functionName)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
    return ignoreOtherCalls_ && !expectations_.hasExpectationWithName(functionName);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d00d      	beq.n	80095e0 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	3320      	adds	r3, #32
 80095c8:	6839      	ldr	r1, [r7, #0]
 80095ca:	4618      	mov	r0, r3
 80095cc:	f010 fd2a 	bl	801a024 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>
 80095d0:	4603      	mov	r3, r0
 80095d2:	f083 0301 	eor.w	r3, r3, #1
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d001      	beq.n	80095e0 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 80095dc:	2301      	movs	r3, #1
 80095de:	e000      	b.n	80095e2 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x32>
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3708      	adds	r7, #8
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <_ZN11MockSupport10actualCallERK12SimpleString>:

MockActualCall& MockSupport::actualCall(const SimpleString& functionName)
{
 80095ea:	b590      	push	{r4, r7, lr}
 80095ec:	b087      	sub	sp, #28
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	6039      	str	r1, [r7, #0]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 80095f4:	f107 030c 	add.w	r3, r7, #12
 80095f8:	683a      	ldr	r2, [r7, #0]
 80095fa:	6879      	ldr	r1, [r7, #4]
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7ff fef9 	bl	80093f4 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>

    if (lastActualFunctionCall_) {
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009606:	2b00      	cmp	r3, #0
 8009608:	d014      	beq.n	8009634 <_ZN11MockSupport10actualCallERK12SimpleString+0x4a>
        lastActualFunctionCall_->checkExpectations();
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	33c4      	adds	r3, #196	; 0xc4
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4610      	mov	r0, r2
 800961a:	4798      	blx	r3
        delete lastActualFunctionCall_;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009620:	2b00      	cmp	r3, #0
 8009622:	d004      	beq.n	800962e <_ZN11MockSupport10actualCallERK12SimpleString+0x44>
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	3204      	adds	r2, #4
 8009628:	6812      	ldr	r2, [r2, #0]
 800962a:	4618      	mov	r0, r3
 800962c:	4790      	blx	r2
        lastActualFunctionCall_ = NULLPTR;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    if (!enabled_) return MockIgnoredActualCall::instance();
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800963a:	f083 0301 	eor.w	r3, r3, #1
 800963e:	b2db      	uxtb	r3, r3
 8009640:	2b00      	cmp	r3, #0
 8009642:	d004      	beq.n	800964e <_ZN11MockSupport10actualCallERK12SimpleString+0x64>
 8009644:	f00e fcbe 	bl	8017fc4 <_ZN21MockIgnoredActualCall8instanceEv>
 8009648:	4603      	mov	r3, r0
 800964a:	461c      	mov	r4, r3
 800964c:	e02f      	b.n	80096ae <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    if (tracing_) return MockActualCallTrace::instance().withName(scopeFunctionName);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009654:	2b00      	cmp	r3, #0
 8009656:	d00b      	beq.n	8009670 <_ZN11MockSupport10actualCallERK12SimpleString+0x86>
 8009658:	f00e fc6e 	bl	8017f38 <_ZN19MockActualCallTrace8instanceEv>
 800965c:	4603      	mov	r3, r0
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	3208      	adds	r2, #8
 8009662:	6812      	ldr	r2, [r2, #0]
 8009664:	f107 010c 	add.w	r1, r7, #12
 8009668:	4618      	mov	r0, r3
 800966a:	4790      	blx	r2
 800966c:	4604      	mov	r4, r0
 800966e:	e01e      	b.n	80096ae <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>


    if (callIsIgnored(scopeFunctionName)) {
 8009670:	f107 030c 	add.w	r3, r7, #12
 8009674:	4619      	mov	r1, r3
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f7ff ff9a 	bl	80095b0 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>
 800967c:	4603      	mov	r3, r0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d004      	beq.n	800968c <_ZN11MockSupport10actualCallERK12SimpleString+0xa2>
        return MockIgnoredActualCall::instance();
 8009682:	f00e fc9f 	bl	8017fc4 <_ZN21MockIgnoredActualCall8instanceEv>
 8009686:	4603      	mov	r3, r0
 8009688:	461c      	mov	r4, r3
 800968a:	e010      	b.n	80096ae <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    }

    MockCheckedActualCall* call = createActualCall();
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	33c0      	adds	r3, #192	; 0xc0
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	4798      	blx	r3
 8009698:	6178      	str	r0, [r7, #20]
    call->withName(scopeFunctionName);
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	3308      	adds	r3, #8
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f107 020c 	add.w	r2, r7, #12
 80096a6:	4611      	mov	r1, r2
 80096a8:	6978      	ldr	r0, [r7, #20]
 80096aa:	4798      	blx	r3
    return *call;
 80096ac:	697c      	ldr	r4, [r7, #20]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 80096ae:	f107 030c 	add.w	r3, r7, #12
 80096b2:	4618      	mov	r0, r3
 80096b4:	f001 ff13 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80096b8:	4623      	mov	r3, r4
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	371c      	adds	r7, #28
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd90      	pop	{r4, r7, pc}

080096c2 <_ZN11MockSupport16ignoreOtherCallsEv>:

void MockSupport::ignoreOtherCalls()
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b084      	sub	sp, #16
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
    ignoreOtherCalls_ = true;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2201      	movs	r2, #1
 80096ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	3338      	adds	r3, #56	; 0x38
 80096d6:	4618      	mov	r0, r3
 80096d8:	f014 f819 	bl	801d70e <_ZN18MockNamedValueList5beginEv>
 80096dc:	60f8      	str	r0, [r7, #12]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d01a      	beq.n	800971a <_ZN11MockSupport16ignoreOtherCallsEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->ignoreOtherCalls();
 80096e4:	68f9      	ldr	r1, [r7, #12]
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 fc32 	bl	8009f50 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	bf14      	ite	ne
 80096f2:	2301      	movne	r3, #1
 80096f4:	2300      	moveq	r3, #0
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d009      	beq.n	8009710 <_ZN11MockSupport16ignoreOtherCallsEv+0x4e>
 80096fc:	68f9      	ldr	r1, [r7, #12]
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 fc26 	bl	8009f50 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009704:	4603      	mov	r3, r0
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	3290      	adds	r2, #144	; 0x90
 800970a:	6812      	ldr	r2, [r2, #0]
 800970c:	4618      	mov	r0, r3
 800970e:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009710:	68f8      	ldr	r0, [r7, #12]
 8009712:	f013 ff05 	bl	801d520 <_ZN22MockNamedValueListNode4nextEv>
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	e7e1      	b.n	80096de <_ZN11MockSupport16ignoreOtherCallsEv+0x1c>
}
 800971a:	bf00      	nop
 800971c:	3710      	adds	r7, #16
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <_ZN11MockSupport7disableEv>:

void MockSupport::disable()
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b084      	sub	sp, #16
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	3338      	adds	r3, #56	; 0x38
 8009736:	4618      	mov	r0, r3
 8009738:	f013 ffe9 	bl	801d70e <_ZN18MockNamedValueList5beginEv>
 800973c:	60f8      	str	r0, [r7, #12]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d01a      	beq.n	800977a <_ZN11MockSupport7disableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->disable();
 8009744:	68f9      	ldr	r1, [r7, #12]
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 fc02 	bl	8009f50 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800974c:	4603      	mov	r3, r0
 800974e:	2b00      	cmp	r3, #0
 8009750:	bf14      	ite	ne
 8009752:	2301      	movne	r3, #1
 8009754:	2300      	moveq	r3, #0
 8009756:	b2db      	uxtb	r3, r3
 8009758:	2b00      	cmp	r3, #0
 800975a:	d009      	beq.n	8009770 <_ZN11MockSupport7disableEv+0x4e>
 800975c:	68f9      	ldr	r1, [r7, #12]
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 fbf6 	bl	8009f50 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009764:	4603      	mov	r3, r0
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	3284      	adds	r2, #132	; 0x84
 800976a:	6812      	ldr	r2, [r2, #0]
 800976c:	4618      	mov	r0, r3
 800976e:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f013 fed5 	bl	801d520 <_ZN22MockNamedValueListNode4nextEv>
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	e7e1      	b.n	800973e <_ZN11MockSupport7disableEv+0x1c>
}
 800977a:	bf00      	nop
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <_ZN11MockSupport6enableEv>:

void MockSupport::enable()
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b084      	sub	sp, #16
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2201      	movs	r2, #1
 800978e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	3338      	adds	r3, #56	; 0x38
 8009796:	4618      	mov	r0, r3
 8009798:	f013 ffb9 	bl	801d70e <_ZN18MockNamedValueList5beginEv>
 800979c:	60f8      	str	r0, [r7, #12]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d01a      	beq.n	80097da <_ZN11MockSupport6enableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->enable();
 80097a4:	68f9      	ldr	r1, [r7, #12]
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 fbd2 	bl	8009f50 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80097ac:	4603      	mov	r3, r0
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	bf14      	ite	ne
 80097b2:	2301      	movne	r3, #1
 80097b4:	2300      	moveq	r3, #0
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d009      	beq.n	80097d0 <_ZN11MockSupport6enableEv+0x4e>
 80097bc:	68f9      	ldr	r1, [r7, #12]
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 fbc6 	bl	8009f50 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80097c4:	4603      	mov	r3, r0
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	3288      	adds	r2, #136	; 0x88
 80097ca:	6812      	ldr	r2, [r2, #0]
 80097cc:	4618      	mov	r0, r3
 80097ce:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80097d0:	68f8      	ldr	r0, [r7, #12]
 80097d2:	f013 fea5 	bl	801d520 <_ZN22MockNamedValueListNode4nextEv>
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	e7e1      	b.n	800979e <_ZN11MockSupport6enableEv+0x1c>
}
 80097da:	bf00      	nop
 80097dc:	3710      	adds	r7, #16
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <_ZN11MockSupport7tracingEb>:

void MockSupport::tracing(bool enabled)
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b084      	sub	sp, #16
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
 80097ea:	460b      	mov	r3, r1
 80097ec:	70fb      	strb	r3, [r7, #3]
    tracing_ = enabled;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	78fa      	ldrb	r2, [r7, #3]
 80097f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	3338      	adds	r3, #56	; 0x38
 80097fa:	4618      	mov	r0, r3
 80097fc:	f013 ff87 	bl	801d70e <_ZN18MockNamedValueList5beginEv>
 8009800:	60f8      	str	r0, [r7, #12]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d01b      	beq.n	8009840 <_ZN11MockSupport7tracingEb+0x5e>
        if (getMockSupport(p)) getMockSupport(p)->tracing(enabled);
 8009808:	68f9      	ldr	r1, [r7, #12]
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 fba0 	bl	8009f50 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009810:	4603      	mov	r3, r0
 8009812:	2b00      	cmp	r3, #0
 8009814:	bf14      	ite	ne
 8009816:	2301      	movne	r3, #1
 8009818:	2300      	moveq	r3, #0
 800981a:	b2db      	uxtb	r3, r3
 800981c:	2b00      	cmp	r3, #0
 800981e:	d00a      	beq.n	8009836 <_ZN11MockSupport7tracingEb+0x54>
 8009820:	68f9      	ldr	r1, [r7, #12]
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 fb94 	bl	8009f50 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009828:	4603      	mov	r3, r0
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	328c      	adds	r2, #140	; 0x8c
 800982e:	6812      	ldr	r2, [r2, #0]
 8009830:	78f9      	ldrb	r1, [r7, #3]
 8009832:	4618      	mov	r0, r3
 8009834:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009836:	68f8      	ldr	r0, [r7, #12]
 8009838:	f013 fe72 	bl	801d520 <_ZN22MockNamedValueListNode4nextEv>
 800983c:	60f8      	str	r0, [r7, #12]
 800983e:	e7e0      	b.n	8009802 <_ZN11MockSupport7tracingEb+0x20>
}
 8009840:	bf00      	nop
 8009842:	3710      	adds	r7, #16
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <_ZN11MockSupport17expectedCallsLeftEv>:
{
    return MockActualCallTrace::instance().getTraceOutput();
}

bool MockSupport::expectedCallsLeft()
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
    int callsLeft = expectations_.hasUnfulfilledExpectations();
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	3320      	adds	r3, #32
 8009854:	4618      	mov	r0, r3
 8009856:	f010 fbc1 	bl	8019fdc <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>
 800985a:	4603      	mov	r3, r0
 800985c:	60fb      	str	r3, [r7, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	3338      	adds	r3, #56	; 0x38
 8009862:	4618      	mov	r0, r3
 8009864:	f013 ff53 	bl	801d70e <_ZN18MockNamedValueList5beginEv>
 8009868:	60b8      	str	r0, [r7, #8]
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d01f      	beq.n	80098b0 <_ZN11MockSupport17expectedCallsLeftEv+0x68>
        if (getMockSupport(p)) callsLeft += getMockSupport(p)->expectedCallsLeft();
 8009870:	68b9      	ldr	r1, [r7, #8]
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 fb6c 	bl	8009f50 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009878:	4603      	mov	r3, r0
 800987a:	2b00      	cmp	r3, #0
 800987c:	bf14      	ite	ne
 800987e:	2301      	movne	r3, #1
 8009880:	2300      	moveq	r3, #0
 8009882:	b2db      	uxtb	r3, r3
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00e      	beq.n	80098a6 <_ZN11MockSupport17expectedCallsLeftEv+0x5e>
 8009888:	68b9      	ldr	r1, [r7, #8]
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fb60 	bl	8009f50 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009890:	4603      	mov	r3, r0
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	3298      	adds	r2, #152	; 0x98
 8009896:	6812      	ldr	r2, [r2, #0]
 8009898:	4618      	mov	r0, r3
 800989a:	4790      	blx	r2
 800989c:	4603      	mov	r3, r0
 800989e:	461a      	mov	r2, r3
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	4413      	add	r3, r2
 80098a4:	60fb      	str	r3, [r7, #12]
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80098a6:	68b8      	ldr	r0, [r7, #8]
 80098a8:	f013 fe3a 	bl	801d520 <_ZN22MockNamedValueListNode4nextEv>
 80098ac:	60b8      	str	r0, [r7, #8]
 80098ae:	e7dc      	b.n	800986a <_ZN11MockSupport17expectedCallsLeftEv+0x22>

    return callsLeft != 0;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	bf14      	ite	ne
 80098b6:	2301      	movne	r3, #1
 80098b8:	2300      	moveq	r3, #0
 80098ba:	b2db      	uxtb	r3, r3
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <_ZN11MockSupport26wasLastActualCallFulfilledEv>:

bool MockSupport::wasLastActualCallFulfilled()
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_ && !lastActualFunctionCall_->isFulfilled())
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d010      	beq.n	80098f6 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	33bc      	adds	r3, #188	; 0xbc
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4610      	mov	r0, r2
 80098e4:	4798      	blx	r3
 80098e6:	4603      	mov	r3, r0
 80098e8:	f083 0301 	eor.w	r3, r3, #1
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d001      	beq.n	80098f6 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 80098f2:	2301      	movs	r3, #1
 80098f4:	e000      	b.n	80098f8 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x34>
 80098f6:	2300      	movs	r3, #0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d001      	beq.n	8009900 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x3c>
        return false;
 80098fc:	2300      	movs	r3, #0
 80098fe:	e02a      	b.n	8009956 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	3338      	adds	r3, #56	; 0x38
 8009904:	4618      	mov	r0, r3
 8009906:	f013 ff02 	bl	801d70e <_ZN18MockNamedValueList5beginEv>
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d020      	beq.n	8009954 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x90>
        if (getMockSupport(p) && !getMockSupport(p)->wasLastActualCallFulfilled())
 8009912:	68f9      	ldr	r1, [r7, #12]
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 fb1b 	bl	8009f50 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	d00f      	beq.n	8009940 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 8009920:	68f9      	ldr	r1, [r7, #12]
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 fb14 	bl	8009f50 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009928:	4603      	mov	r3, r0
 800992a:	4618      	mov	r0, r3
 800992c:	f7ff ffca 	bl	80098c4 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 8009930:	4603      	mov	r3, r0
 8009932:	f083 0301 	eor.w	r3, r3, #1
 8009936:	b2db      	uxtb	r3, r3
 8009938:	2b00      	cmp	r3, #0
 800993a:	d001      	beq.n	8009940 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800993c:	2301      	movs	r3, #1
 800993e:	e000      	b.n	8009942 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7e>
 8009940:	2300      	movs	r3, #0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d001      	beq.n	800994a <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x86>
                return false;
 8009946:	2300      	movs	r3, #0
 8009948:	e005      	b.n	8009956 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f013 fde8 	bl	801d520 <_ZN22MockNamedValueListNode4nextEv>
 8009950:	60f8      	str	r0, [r7, #12]
 8009952:	e7db      	b.n	800990c <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x48>

    return true;
 8009954:	2301      	movs	r3, #1
}
 8009956:	4618      	mov	r0, r3
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>:

void MockSupport::failTestWithExpectedCallsNotFulfilled()
{
 800995e:	b580      	push	{r7, lr}
 8009960:	b092      	sub	sp, #72	; 0x48
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 8009966:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800996a:	4618      	mov	r0, r3
 800996c:	f010 fa2c 	bl	8019dc8 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f103 0220 	add.w	r2, r3, #32
 8009976:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800997a:	4611      	mov	r1, r2
 800997c:	4618      	mov	r0, r3
 800997e:	f010 fbf3 	bl	801a168 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	3338      	adds	r3, #56	; 0x38
 8009986:	4618      	mov	r0, r3
 8009988:	f013 fec1 	bl	801d70e <_ZN18MockNamedValueList5beginEv>
 800998c:	6478      	str	r0, [r7, #68]	; 0x44
 800998e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009990:	2b00      	cmp	r3, #0
 8009992:	d01d      	beq.n	80099d0 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x72>
        if(getMockSupport(p))
 8009994:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 fada 	bl	8009f50 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800999c:	4603      	mov	r3, r0
 800999e:	2b00      	cmp	r3, #0
 80099a0:	bf14      	ite	ne
 80099a2:	2301      	movne	r3, #1
 80099a4:	2300      	moveq	r3, #0
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d00c      	beq.n	80099c6 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 80099ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 face 	bl	8009f50 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80099b4:	4603      	mov	r3, r0
 80099b6:	f103 0220 	add.w	r2, r3, #32
 80099ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80099be:	4611      	mov	r1, r2
 80099c0:	4618      	mov	r0, r3
 80099c2:	f010 fbd1 	bl	801a168 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 80099c6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80099c8:	f013 fdaa 	bl	801d520 <_ZN22MockNamedValueListNode4nextEv>
 80099cc:	6478      	str	r0, [r7, #68]	; 0x44
 80099ce:	e7de      	b.n	800998e <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x30>

    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	691a      	ldr	r2, [r3, #16]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	691b      	ldr	r3, [r3, #16]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	330c      	adds	r3, #12
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4610      	mov	r0, r2
 80099e0:	4798      	blx	r3
 80099e2:	4601      	mov	r1, r0
 80099e4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80099e8:	f107 0308 	add.w	r3, r7, #8
 80099ec:	4618      	mov	r0, r3
 80099ee:	f011 f9f5 	bl	801addc <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	33c4      	adds	r3, #196	; 0xc4
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f107 0208 	add.w	r2, r7, #8
 80099fe:	4611      	mov	r1, r2
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	4798      	blx	r3
    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 8009a04:	f107 0308 	add.w	r3, r7, #8
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f000 fe6d 	bl	800a6e8 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
    MockExpectedCallsList expectationsList;
 8009a0e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009a12:	4618      	mov	r0, r3
 8009a14:	f010 f9ec 	bl	8019df0 <_ZN21MockExpectedCallsListD1Ev>
}
 8009a18:	bf00      	nop
 8009a1a:	3748      	adds	r7, #72	; 0x48
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>:

void MockSupport::failTestWithOutOfOrderCalls()
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b092      	sub	sp, #72	; 0x48
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 8009a28:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f010 f9cb 	bl	8019dc8 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f103 0220 	add.w	r2, r3, #32
 8009a38:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009a3c:	4611      	mov	r1, r2
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f010 fb92 	bl	801a168 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	3338      	adds	r3, #56	; 0x38
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f013 fe60 	bl	801d70e <_ZN18MockNamedValueList5beginEv>
 8009a4e:	6478      	str	r0, [r7, #68]	; 0x44
 8009a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d01d      	beq.n	8009a92 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x72>
        if(getMockSupport(p))
 8009a56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 fa79 	bl	8009f50 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	bf14      	ite	ne
 8009a64:	2301      	movne	r3, #1
 8009a66:	2300      	moveq	r3, #0
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d00c      	beq.n	8009a88 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 8009a6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 fa6d 	bl	8009f50 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009a76:	4603      	mov	r3, r0
 8009a78:	f103 0220 	add.w	r2, r3, #32
 8009a7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009a80:	4611      	mov	r1, r2
 8009a82:	4618      	mov	r0, r3
 8009a84:	f010 fb70 	bl	801a168 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 8009a88:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009a8a:	f013 fd49 	bl	801d520 <_ZN22MockNamedValueListNode4nextEv>
 8009a8e:	6478      	str	r0, [r7, #68]	; 0x44
 8009a90:	e7de      	b.n	8009a50 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x30>

    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	691a      	ldr	r2, [r3, #16]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	691b      	ldr	r3, [r3, #16]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	330c      	adds	r3, #12
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4610      	mov	r0, r2
 8009aa2:	4798      	blx	r3
 8009aa4:	4601      	mov	r1, r0
 8009aa6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8009aaa:	f107 0308 	add.w	r3, r7, #8
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f011 fa38 	bl	801af24 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	33c4      	adds	r3, #196	; 0xc4
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f107 0208 	add.w	r2, r7, #8
 8009ac0:	4611      	mov	r1, r2
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	4798      	blx	r3
    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 8009ac6:	f107 0308 	add.w	r3, r7, #8
 8009aca:	4618      	mov	r0, r3
 8009acc:	f000 fe2e 	bl	800a72c <_ZN20MockCallOrderFailureD1Ev>
    MockExpectedCallsList expectationsList;
 8009ad0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f010 f98b 	bl	8019df0 <_ZN21MockExpectedCallsListD1Ev>
}
 8009ada:	bf00      	nop
 8009adc:	3748      	adds	r7, #72	; 0x48
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <_ZN11MockSupport8failTestER11MockFailure>:

void MockSupport::failTest(MockFailure& failure)
{
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b082      	sub	sp, #8
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
 8009aea:	6039      	str	r1, [r7, #0]
    clear();
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	339c      	adds	r3, #156	; 0x9c
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	4798      	blx	r3
    activeReporter_->failTest(failure);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	691a      	ldr	r2, [r3, #16]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	691b      	ldr	r3, [r3, #16]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	3308      	adds	r3, #8
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	6839      	ldr	r1, [r7, #0]
 8009b08:	4610      	mov	r0, r2
 8009b0a:	4798      	blx	r3
}
 8009b0c:	bf00      	nop
 8009b0e:	3708      	adds	r7, #8
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <_ZN11MockSupport10countCheckEv>:

void MockSupport::countCheck()
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
    UtestShell::getCurrent()->countCheck();
 8009b1c:	f008 fd0a 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 8009b20:	4603      	mov	r3, r0
 8009b22:	4618      	mov	r0, r3
 8009b24:	f007 fb78 	bl	8011218 <_ZN10UtestShell10countCheckEv>
}
 8009b28:	bf00      	nop
 8009b2a:	3708      	adds	r7, #8
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>:

void MockSupport::checkExpectationsOfLastActualCall()
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
    if(lastActualFunctionCall_)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d008      	beq.n	8009b52 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x22>
        lastActualFunctionCall_->checkExpectations();
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	33c4      	adds	r3, #196	; 0xc4
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4610      	mov	r0, r2
 8009b50:	4798      	blx	r3

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	3338      	adds	r3, #56	; 0x38
 8009b56:	4618      	mov	r0, r3
 8009b58:	f013 fdd9 	bl	801d70e <_ZN18MockNamedValueList5beginEv>
 8009b5c:	60f8      	str	r0, [r7, #12]
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d023      	beq.n	8009bac <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x7c>
        if(getMockSupport(p) && getMockSupport(p)->lastActualFunctionCall_)
 8009b64:	68f9      	ldr	r1, [r7, #12]
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 f9f2 	bl	8009f50 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d009      	beq.n	8009b86 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 8009b72:	68f9      	ldr	r1, [r7, #12]
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 f9eb 	bl	8009f50 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d001      	beq.n	8009b86 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 8009b82:	2301      	movs	r3, #1
 8009b84:	e000      	b.n	8009b88 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x58>
 8009b86:	2300      	movs	r3, #0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d00a      	beq.n	8009ba2 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x72>
            getMockSupport(p)->lastActualFunctionCall_->checkExpectations();
 8009b8c:	68f9      	ldr	r1, [r7, #12]
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 f9de 	bl	8009f50 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009b94:	4603      	mov	r3, r0
 8009b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	32c4      	adds	r2, #196	; 0xc4
 8009b9c:	6812      	ldr	r2, [r2, #0]
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	4790      	blx	r2
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	f013 fcbc 	bl	801d520 <_ZN22MockNamedValueListNode4nextEv>
 8009ba8:	60f8      	str	r0, [r7, #12]
 8009baa:	e7d8      	b.n	8009b5e <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x2e>
}
 8009bac:	bf00      	nop
 8009bae:	3710      	adds	r7, #16
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <_ZN11MockSupport18hasCallsOutOfOrderEv>:

bool MockSupport::hasCallsOutOfOrder()
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
    if (expectations_.hasCallsOutOfOrder())
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	3320      	adds	r3, #32
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f010 f947 	bl	8019e54 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d001      	beq.n	8009bd0 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x1c>
    {
        return true;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	e027      	b.n	8009c20 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    }
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	3338      	adds	r3, #56	; 0x38
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f013 fd9a 	bl	801d70e <_ZN18MockNamedValueList5beginEv>
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d01d      	beq.n	8009c1e <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6a>
        if (getMockSupport(p) && getMockSupport(p)->hasCallsOutOfOrder())
 8009be2:	68f9      	ldr	r1, [r7, #12]
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 f9b3 	bl	8009f50 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d00c      	beq.n	8009c0a <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 8009bf0:	68f9      	ldr	r1, [r7, #12]
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 f9ac 	bl	8009f50 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f7ff ffda 	bl	8009bb4 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 8009c00:	4603      	mov	r3, r0
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d001      	beq.n	8009c0a <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 8009c06:	2301      	movs	r3, #1
 8009c08:	e000      	b.n	8009c0c <_ZN11MockSupport18hasCallsOutOfOrderEv+0x58>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d001      	beq.n	8009c14 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x60>
        {
            return true;
 8009c10:	2301      	movs	r3, #1
 8009c12:	e005      	b.n	8009c20 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009c14:	68f8      	ldr	r0, [r7, #12]
 8009c16:	f013 fc83 	bl	801d520 <_ZN22MockNamedValueListNode4nextEv>
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	e7de      	b.n	8009bdc <_ZN11MockSupport18hasCallsOutOfOrderEv+0x28>
        }
    return false;
 8009c1e:	2300      	movs	r3, #0
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3710      	adds	r7, #16
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <_ZN11MockSupport17checkExpectationsEv>:

void MockSupport::checkExpectations()
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
    checkExpectationsOfLastActualCall();
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f7ff ff7d 	bl	8009b30 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>

    if (wasLastActualCallFulfilled() && expectedCallsLeft())
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f7ff fe44 	bl	80098c4 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d00a      	beq.n	8009c58 <_ZN11MockSupport17checkExpectationsEv+0x30>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	3398      	adds	r3, #152	; 0x98
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	4798      	blx	r3
 8009c4e:	4603      	mov	r3, r0
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d001      	beq.n	8009c58 <_ZN11MockSupport17checkExpectationsEv+0x30>
 8009c54:	2301      	movs	r3, #1
 8009c56:	e000      	b.n	8009c5a <_ZN11MockSupport17checkExpectationsEv+0x32>
 8009c58:	2300      	movs	r3, #0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d002      	beq.n	8009c64 <_ZN11MockSupport17checkExpectationsEv+0x3c>
        failTestWithExpectedCallsNotFulfilled();
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f7ff fe7d 	bl	800995e <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>

    if (hasCallsOutOfOrder())
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f7ff ffa5 	bl	8009bb4 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d002      	beq.n	8009c76 <_ZN11MockSupport17checkExpectationsEv+0x4e>
        failTestWithOutOfOrderCalls();
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f7ff fed5 	bl	8009a20 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>
}
 8009c76:	bf00      	nop
 8009c78:	3708      	adds	r7, #8
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <_ZN11MockSupport7hasDataERK12SimpleString>:


bool MockSupport::hasData(const SimpleString& name)
{
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	b082      	sub	sp, #8
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	6078      	str	r0, [r7, #4]
 8009c86:	6039      	str	r1, [r7, #0]
    return data_.getValueByName(name) != NULLPTR;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	3338      	adds	r3, #56	; 0x38
 8009c8c:	6839      	ldr	r1, [r7, #0]
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f013 fd0e 	bl	801d6b0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8009c94:	4603      	mov	r3, r0
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	bf14      	ite	ne
 8009c9a:	2301      	movne	r3, #1
 8009c9c:	2300      	moveq	r3, #0
 8009c9e:	b2db      	uxtb	r3, r3
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3708      	adds	r7, #8
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>:

MockNamedValue* MockSupport::retrieveDataFromStore(const SimpleString& name)
{
 8009ca8:	b590      	push	{r4, r7, lr}
 8009caa:	b085      	sub	sp, #20
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
    MockNamedValue* newData = data_.getValueByName(name);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	3338      	adds	r3, #56	; 0x38
 8009cb6:	6839      	ldr	r1, [r7, #0]
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f013 fcf9 	bl	801d6b0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8009cbe:	60f8      	str	r0, [r7, #12]
    if (newData == NULLPTR) {
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d111      	bne.n	8009cea <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x42>
        newData = new MockNamedValue(name);
 8009cc6:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009cca:	490a      	ldr	r1, [pc, #40]	; (8009cf4 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x4c>)
 8009ccc:	2038      	movs	r0, #56	; 0x38
 8009cce:	f7fe fc8b 	bl	80085e8 <_ZnwjPKci>
 8009cd2:	4604      	mov	r4, r0
 8009cd4:	6839      	ldr	r1, [r7, #0]
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	f011 fd6e 	bl	801b7b8 <_ZN14MockNamedValueC1ERK12SimpleString>
 8009cdc:	60fc      	str	r4, [r7, #12]
        data_.add(newData);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	3338      	adds	r3, #56	; 0x38
 8009ce2:	68f9      	ldr	r1, [r7, #12]
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f013 fcad 	bl	801d644 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    }
    return newData;
 8009cea:	68fb      	ldr	r3, [r7, #12]
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3714      	adds	r7, #20
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd90      	pop	{r4, r7, pc}
 8009cf4:	080220a8 	.word	0x080220a8

08009cf8 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setValue(value);
}

void MockSupport::setDataObject(const SimpleString& name, const SimpleString& type, void* value)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b086      	sub	sp, #24
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]
 8009d04:	603b      	str	r3, [r7, #0]
    MockNamedValue* newData = retrieveDataFromStore(name);
 8009d06:	68b9      	ldr	r1, [r7, #8]
 8009d08:	68f8      	ldr	r0, [r7, #12]
 8009d0a:	f7ff ffcd 	bl	8009ca8 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>
 8009d0e:	6178      	str	r0, [r7, #20]
    newData->setObjectPointer(type, value);
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	3344      	adds	r3, #68	; 0x44
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	683a      	ldr	r2, [r7, #0]
 8009d1a:	6879      	ldr	r1, [r7, #4]
 8009d1c:	6978      	ldr	r0, [r7, #20]
 8009d1e:	4798      	blx	r3
}
 8009d20:	bf00      	nop
 8009d22:	3718      	adds	r7, #24
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <_ZN11MockSupport7getDataERK12SimpleString>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setConstObjectPointer(type, value);
}

MockNamedValue MockSupport::getData(const SimpleString& name)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b088      	sub	sp, #32
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	607a      	str	r2, [r7, #4]
    MockNamedValue* value = data_.getValueByName(name);
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	3338      	adds	r3, #56	; 0x38
 8009d38:	6879      	ldr	r1, [r7, #4]
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f013 fcb8 	bl	801d6b0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8009d40:	61f8      	str	r0, [r7, #28]
    if (value == NULLPTR)
 8009d42:	69fb      	ldr	r3, [r7, #28]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d111      	bne.n	8009d6c <_ZN11MockSupport7getDataERK12SimpleString+0x44>
        return MockNamedValue("");
 8009d48:	f107 0314 	add.w	r3, r7, #20
 8009d4c:	490b      	ldr	r1, [pc, #44]	; (8009d7c <_ZN11MockSupport7getDataERK12SimpleString+0x54>)
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f001 f80d 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8009d54:	f107 0314 	add.w	r3, r7, #20
 8009d58:	4619      	mov	r1, r3
 8009d5a:	68f8      	ldr	r0, [r7, #12]
 8009d5c:	f011 fd2c 	bl	801b7b8 <_ZN14MockNamedValueC1ERK12SimpleString>
 8009d60:	f107 0314 	add.w	r3, r7, #20
 8009d64:	4618      	mov	r0, r3
 8009d66:	f001 fbba 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8009d6a:	e003      	b.n	8009d74 <_ZN11MockSupport7getDataERK12SimpleString+0x4c>
    return *value;
 8009d6c:	69f9      	ldr	r1, [r7, #28]
 8009d6e:	68f8      	ldr	r0, [r7, #12]
 8009d70:	f7ff f8a2 	bl	8008eb8 <_ZN14MockNamedValueC1ERKS_>
}
 8009d74:	68f8      	ldr	r0, [r7, #12]
 8009d76:	3720      	adds	r7, #32
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	080220a0 	.word	0x080220a0

08009d80 <_ZN11MockSupport5cloneERK12SimpleString>:

MockSupport* MockSupport::clone(const SimpleString& mockName)
{
 8009d80:	b590      	push	{r4, r7, lr}
 8009d82:	b085      	sub	sp, #20
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
    MockSupport* newMock = new MockSupport(mockName);
 8009d8a:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009d8e:	4927      	ldr	r1, [pc, #156]	; (8009e2c <_ZN11MockSupport5cloneERK12SimpleString+0xac>)
 8009d90:	2048      	movs	r0, #72	; 0x48
 8009d92:	f7fe fc29 	bl	80085e8 <_ZnwjPKci>
 8009d96:	4604      	mov	r4, r0
 8009d98:	6839      	ldr	r1, [r7, #0]
 8009d9a:	4620      	mov	r0, r4
 8009d9c:	f7ff f8f8 	bl	8008f90 <_ZN11MockSupportC1ERK12SimpleString>
 8009da0:	60fc      	str	r4, [r7, #12]
    newMock->setMockFailureStandardReporter(standardReporter_);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	33a4      	adds	r3, #164	; 0xa4
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	6952      	ldr	r2, [r2, #20]
 8009dae:	4611      	mov	r1, r2
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	4798      	blx	r3
    if (ignoreOtherCalls_) newMock->ignoreOtherCalls();
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d005      	beq.n	8009dca <_ZN11MockSupport5cloneERK12SimpleString+0x4a>
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	3390      	adds	r3, #144	; 0x90
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	68f8      	ldr	r0, [r7, #12]
 8009dc8:	4798      	blx	r3

    if (!enabled_) newMock->disable();
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8009dd0:	f083 0301 	eor.w	r3, r3, #1
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d005      	beq.n	8009de6 <_ZN11MockSupport5cloneERK12SimpleString+0x66>
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	3384      	adds	r3, #132	; 0x84
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	68f8      	ldr	r0, [r7, #12]
 8009de4:	4798      	blx	r3

    if (strictOrdering_) newMock->strictOrder();
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	7b1b      	ldrb	r3, [r3, #12]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d005      	beq.n	8009dfa <_ZN11MockSupport5cloneERK12SimpleString+0x7a>
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	3308      	adds	r3, #8
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	68f8      	ldr	r0, [r7, #12]
 8009df8:	4798      	blx	r3

    newMock->tracing(tracing_);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	338c      	adds	r3, #140	; 0x8c
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 8009e08:	4611      	mov	r1, r2
 8009e0a:	68f8      	ldr	r0, [r7, #12]
 8009e0c:	4798      	blx	r3
    newMock->installComparatorsAndCopiers(comparatorsAndCopiersRepository_);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	33b8      	adds	r3, #184	; 0xb8
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	3230      	adds	r2, #48	; 0x30
 8009e1a:	4611      	mov	r1, r2
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	4798      	blx	r3
    return newMock;
 8009e20:	68fb      	ldr	r3, [r7, #12]
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3714      	adds	r7, #20
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd90      	pop	{r4, r7, pc}
 8009e2a:	bf00      	nop
 8009e2c:	080220a8 	.word	0x080220a8

08009e30 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>:

MockSupport* MockSupport::getMockSupportScope(const SimpleString& name)
{
 8009e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e32:	b0ab      	sub	sp, #172	; 0xac
 8009e34:	af04      	add	r7, sp, #16
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 8009e3a:	f107 0308 	add.w	r3, r7, #8
 8009e3e:	4941      	ldr	r1, [pc, #260]	; (8009f44 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x114>)
 8009e40:	4618      	mov	r0, r3
 8009e42:	f000 ff94 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
    mockingSupportName += name;
 8009e46:	f107 0308 	add.w	r3, r7, #8
 8009e4a:	6839      	ldr	r1, [r7, #0]
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f001 fbc3 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>

    if (hasData(mockingSupportName)) {
 8009e52:	f107 0308 	add.w	r3, r7, #8
 8009e56:	4619      	mov	r1, r3
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f7ff ff10 	bl	8009c7e <_ZN11MockSupport7hasDataERK12SimpleString>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d048      	beq.n	8009ef6 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xc6>
        STRCMP_EQUAL("MockSupport", getData(mockingSupportName).getType().asCharString());
 8009e64:	f008 fb66 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 8009e68:	4604      	mov	r4, r0
 8009e6a:	6823      	ldr	r3, [r4, #0]
 8009e6c:	3324      	adds	r3, #36	; 0x24
 8009e6e:	681d      	ldr	r5, [r3, #0]
 8009e70:	f107 0318 	add.w	r3, r7, #24
 8009e74:	f107 0208 	add.w	r2, r7, #8
 8009e78:	6879      	ldr	r1, [r7, #4]
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7ff ff54 	bl	8009d28 <_ZN11MockSupport7getDataERK12SimpleString>
 8009e80:	f107 0310 	add.w	r3, r7, #16
 8009e84:	f107 0218 	add.w	r2, r7, #24
 8009e88:	4611      	mov	r1, r2
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f011 ff63 	bl	801bd56 <_ZNK14MockNamedValue7getTypeEv>
 8009e90:	f107 0310 	add.w	r3, r7, #16
 8009e94:	4618      	mov	r0, r3
 8009e96:	f001 faf5 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 8009e9a:	4606      	mov	r6, r0
 8009e9c:	f008 fb5a 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	9302      	str	r3, [sp, #8]
 8009ea4:	f240 13bd 	movw	r3, #445	; 0x1bd
 8009ea8:	9301      	str	r3, [sp, #4]
 8009eaa:	4b27      	ldr	r3, [pc, #156]	; (8009f48 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x118>)
 8009eac:	9300      	str	r3, [sp, #0]
 8009eae:	2300      	movs	r3, #0
 8009eb0:	4632      	mov	r2, r6
 8009eb2:	4926      	ldr	r1, [pc, #152]	; (8009f4c <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	47a8      	blx	r5
 8009eb8:	f107 0310 	add.w	r3, r7, #16
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f001 fb0e 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8009ec2:	f107 0318 	add.w	r3, r7, #24
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f011 fca0 	bl	801b80c <_ZN14MockNamedValueD1Ev>
        return (MockSupport*) getData(mockingSupportName).getObjectPointer();
 8009ecc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009ed0:	f107 0208 	add.w	r2, r7, #8
 8009ed4:	6879      	ldr	r1, [r7, #4]
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7ff ff26 	bl	8009d28 <_ZN11MockSupport7getDataERK12SimpleString>
 8009edc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f012 fa51 	bl	801c388 <_ZNK14MockNamedValue16getObjectPointerEv>
 8009ee6:	4604      	mov	r4, r0
 8009ee8:	bf00      	nop
 8009eea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f011 fc8c 	bl	801b80c <_ZN14MockNamedValueD1Ev>
 8009ef4:	e01b      	b.n	8009f2e <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xfe>
    }

    MockSupport *newMock = clone(name);
 8009ef6:	6839      	ldr	r1, [r7, #0]
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f7ff ff41 	bl	8009d80 <_ZN11MockSupport5cloneERK12SimpleString>
 8009efe:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    setDataObject(mockingSupportName, "MockSupport", newMock);
 8009f02:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009f06:	4911      	ldr	r1, [pc, #68]	; (8009f4c <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f000 ff30 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8009f0e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8009f12:	f107 0108 	add.w	r1, r7, #8
 8009f16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f7ff feec 	bl	8009cf8 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>
 8009f20:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009f24:	4618      	mov	r0, r3
 8009f26:	f001 fada 	bl	800b4de <_ZN12SimpleStringD1Ev>
    return newMock;
 8009f2a:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 8009f2e:	f107 0308 	add.w	r3, r7, #8
 8009f32:	4618      	mov	r0, r3
 8009f34:	f001 fad3 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8009f38:	4623      	mov	r3, r4
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	379c      	adds	r7, #156	; 0x9c
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f42:	bf00      	nop
 8009f44:	080220c0 	.word	0x080220c0
 8009f48:	080220a8 	.word	0x080220a8
 8009f4c:	080220e0 	.word	0x080220e0

08009f50 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>:

MockSupport* MockSupport::getMockSupport(MockNamedValueListNode* node)
{
 8009f50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f54:	b08b      	sub	sp, #44	; 0x2c
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
 8009f5a:	6039      	str	r1, [r7, #0]
    if (node->getType() == "MockSupport" && node->getName().contains(MOCK_SUPPORT_SCOPE_PREFIX))
 8009f5c:	2500      	movs	r5, #0
 8009f5e:	2600      	movs	r6, #0
 8009f60:	f107 0308 	add.w	r3, r7, #8
 8009f64:	6839      	ldr	r1, [r7, #0]
 8009f66:	4618      	mov	r0, r3
 8009f68:	f013 fb28 	bl	801d5bc <_ZNK22MockNamedValueListNode7getTypeEv>
 8009f6c:	f04f 0801 	mov.w	r8, #1
 8009f70:	f107 0310 	add.w	r3, r7, #16
 8009f74:	492e      	ldr	r1, [pc, #184]	; (800a030 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe0>)
 8009f76:	4618      	mov	r0, r3
 8009f78:	f000 fef9 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8009f7c:	f04f 0901 	mov.w	r9, #1
 8009f80:	f107 0210 	add.w	r2, r7, #16
 8009f84:	f107 0308 	add.w	r3, r7, #8
 8009f88:	4611      	mov	r1, r2
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f001 fab3 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 8009f90:	4603      	mov	r3, r0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d01a      	beq.n	8009fcc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 8009f96:	f107 0318 	add.w	r3, r7, #24
 8009f9a:	6839      	ldr	r1, [r7, #0]
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f013 fafa 	bl	801d596 <_ZNK22MockNamedValueListNode7getNameEv>
 8009fa2:	2501      	movs	r5, #1
 8009fa4:	f107 0320 	add.w	r3, r7, #32
 8009fa8:	4922      	ldr	r1, [pc, #136]	; (800a034 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe4>)
 8009faa:	4618      	mov	r0, r3
 8009fac:	f000 fedf 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8009fb0:	2601      	movs	r6, #1
 8009fb2:	f107 0220 	add.w	r2, r7, #32
 8009fb6:	f107 0318 	add.w	r3, r7, #24
 8009fba:	4611      	mov	r1, r2
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f000 ff54 	bl	800ae6a <_ZNK12SimpleString8containsERKS_>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d001      	beq.n	8009fcc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 8009fc8:	2401      	movs	r4, #1
 8009fca:	e000      	b.n	8009fce <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7e>
 8009fcc:	2400      	movs	r4, #0
 8009fce:	2e00      	cmp	r6, #0
 8009fd0:	d004      	beq.n	8009fdc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x8c>
 8009fd2:	f107 0320 	add.w	r3, r7, #32
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f001 fa81 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8009fdc:	2d00      	cmp	r5, #0
 8009fde:	d004      	beq.n	8009fea <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x9a>
 8009fe0:	f107 0318 	add.w	r3, r7, #24
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f001 fa7a 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8009fea:	f1b9 0f00 	cmp.w	r9, #0
 8009fee:	d004      	beq.n	8009ffa <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xaa>
 8009ff0:	f107 0310 	add.w	r3, r7, #16
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f001 fa72 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8009ffa:	f1b8 0f00 	cmp.w	r8, #0
 8009ffe:	d004      	beq.n	800a00a <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xba>
 800a000:	f107 0308 	add.w	r3, r7, #8
 800a004:	4618      	mov	r0, r3
 800a006:	f001 fa6a 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800a00a:	2c00      	cmp	r4, #0
 800a00c:	d00a      	beq.n	800a024 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd4>
        return (MockSupport*) node->item()->getObjectPointer();
 800a00e:	6838      	ldr	r0, [r7, #0]
 800a010:	f013 fa92 	bl	801d538 <_ZN22MockNamedValueListNode4itemEv>
 800a014:	4603      	mov	r3, r0
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	32a0      	adds	r2, #160	; 0xa0
 800a01a:	6812      	ldr	r2, [r2, #0]
 800a01c:	4618      	mov	r0, r3
 800a01e:	4790      	blx	r2
 800a020:	4603      	mov	r3, r0
 800a022:	e000      	b.n	800a026 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd6>
    return NULLPTR;
 800a024:	2300      	movs	r3, #0
}
 800a026:	4618      	mov	r0, r3
 800a028:	372c      	adds	r7, #44	; 0x2c
 800a02a:	46bd      	mov	sp, r7
 800a02c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a030:	080220e0 	.word	0x080220e0
 800a034:	080220c0 	.word	0x080220c0

0800a038 <_ZN11MockSupport11returnValueEv>:

MockNamedValue MockSupport::returnValue()
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b084      	sub	sp, #16
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->returnValue();
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a046:	2b00      	cmp	r3, #0
 800a048:	d00a      	beq.n	800a060 <_ZN11MockSupport11returnValueEv+0x28>
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	3354      	adds	r3, #84	; 0x54
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	4610      	mov	r0, r2
 800a05c:	4798      	blx	r3
 800a05e:	e010      	b.n	800a082 <_ZN11MockSupport11returnValueEv+0x4a>
    return MockNamedValue("");
 800a060:	f107 0308 	add.w	r3, r7, #8
 800a064:	4909      	ldr	r1, [pc, #36]	; (800a08c <_ZN11MockSupport11returnValueEv+0x54>)
 800a066:	4618      	mov	r0, r3
 800a068:	f000 fe81 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800a06c:	f107 0308 	add.w	r3, r7, #8
 800a070:	4619      	mov	r1, r3
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f011 fba0 	bl	801b7b8 <_ZN14MockNamedValueC1ERK12SimpleString>
 800a078:	f107 0308 	add.w	r3, r7, #8
 800a07c:	4618      	mov	r0, r3
 800a07e:	f001 fa2e 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	3710      	adds	r7, #16
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop
 800a08c:	080220a0 	.word	0x080220a0

0800a090 <_ZN11MockSupport15boolReturnValueEv>:

bool MockSupport::boolReturnValue()
{
 800a090:	b590      	push	{r4, r7, lr}
 800a092:	b091      	sub	sp, #68	; 0x44
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	3320      	adds	r3, #32
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f107 0208 	add.w	r2, r7, #8
 800a0a4:	6879      	ldr	r1, [r7, #4]
 800a0a6:	4610      	mov	r0, r2
 800a0a8:	4798      	blx	r3
 800a0aa:	f107 0308 	add.w	r3, r7, #8
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f011 fe60 	bl	801bd74 <_ZNK14MockNamedValue12getBoolValueEv>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	461c      	mov	r4, r3
 800a0b8:	bf00      	nop
 800a0ba:	f107 0308 	add.w	r3, r7, #8
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f011 fba4 	bl	801b80c <_ZN14MockNamedValueD1Ev>
 800a0c4:	4623      	mov	r3, r4
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3744      	adds	r7, #68	; 0x44
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd90      	pop	{r4, r7, pc}

0800a0ce <_ZN11MockSupport22unsignedIntReturnValueEv>:

unsigned int MockSupport::unsignedIntReturnValue()
{
 800a0ce:	b590      	push	{r4, r7, lr}
 800a0d0:	b091      	sub	sp, #68	; 0x44
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	3320      	adds	r3, #32
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f107 0208 	add.w	r2, r7, #8
 800a0e2:	6879      	ldr	r1, [r7, #4]
 800a0e4:	4610      	mov	r0, r2
 800a0e6:	4798      	blx	r3
 800a0e8:	f107 0308 	add.w	r3, r7, #8
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f011 fe69 	bl	801bdc4 <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 800a0f2:	4604      	mov	r4, r0
 800a0f4:	bf00      	nop
 800a0f6:	f107 0308 	add.w	r3, r7, #8
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f011 fb86 	bl	801b80c <_ZN14MockNamedValueD1Ev>
 800a100:	4623      	mov	r3, r4
}
 800a102:	4618      	mov	r0, r3
 800a104:	3744      	adds	r7, #68	; 0x44
 800a106:	46bd      	mov	sp, r7
 800a108:	bd90      	pop	{r4, r7, pc}

0800a10a <_ZN11MockSupport14intReturnValueEv>:

int MockSupport::intReturnValue()
{
 800a10a:	b590      	push	{r4, r7, lr}
 800a10c:	b091      	sub	sp, #68	; 0x44
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	3320      	adds	r3, #32
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f107 0208 	add.w	r2, r7, #8
 800a11e:	6879      	ldr	r1, [r7, #4]
 800a120:	4610      	mov	r0, r2
 800a122:	4798      	blx	r3
 800a124:	f107 0308 	add.w	r3, r7, #8
 800a128:	4618      	mov	r0, r3
 800a12a:	f011 fe9b 	bl	801be64 <_ZNK14MockNamedValue11getIntValueEv>
 800a12e:	4604      	mov	r4, r0
 800a130:	bf00      	nop
 800a132:	f107 0308 	add.w	r3, r7, #8
 800a136:	4618      	mov	r0, r3
 800a138:	f011 fb68 	bl	801b80c <_ZN14MockNamedValueD1Ev>
 800a13c:	4623      	mov	r3, r4
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3744      	adds	r7, #68	; 0x44
 800a142:	46bd      	mov	sp, r7
 800a144:	bd90      	pop	{r4, r7, pc}

0800a146 <_ZN11MockSupport26returnStringValueOrDefaultEPKc>:

const char * MockSupport::returnStringValueOrDefault(const char * defaultValue)
{
 800a146:	b580      	push	{r7, lr}
 800a148:	b082      	sub	sp, #8
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
 800a14e:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	331c      	adds	r3, #28
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	4798      	blx	r3
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d007      	beq.n	800a172 <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2c>
        return stringReturnValue();
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	335c      	adds	r3, #92	; 0x5c
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	4798      	blx	r3
 800a16e:	4603      	mov	r3, r0
 800a170:	e000      	b.n	800a174 <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2e>
    }
    return defaultValue;
 800a172:	683b      	ldr	r3, [r7, #0]
}
 800a174:	4618      	mov	r0, r3
 800a176:	3708      	adds	r7, #8
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <_ZN11MockSupport26returnDoubleValueOrDefaultEd>:

double MockSupport::returnDoubleValueOrDefault(double defaultValue)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	ed87 0b00 	vstr	d0, [r7]
    if (hasReturnValue()) {
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	331c      	adds	r3, #28
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	68f8      	ldr	r0, [r7, #12]
 800a192:	4798      	blx	r3
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d00a      	beq.n	800a1b0 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x34>
        return doubleReturnValue();
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	3368      	adds	r3, #104	; 0x68
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	68f8      	ldr	r0, [r7, #12]
 800a1a4:	4798      	blx	r3
 800a1a6:	eeb0 7a40 	vmov.f32	s14, s0
 800a1aa:	eef0 7a60 	vmov.f32	s15, s1
 800a1ae:	e001      	b.n	800a1b4 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x38>
    }
    return defaultValue;
 800a1b0:	ed97 7b00 	vldr	d7, [r7]
}
 800a1b4:	eeb0 0a47 	vmov.f32	s0, s14
 800a1b8:	eef0 0a67 	vmov.f32	s1, s15
 800a1bc:	3710      	adds	r7, #16
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}

0800a1c2 <_ZN11MockSupport27returnLongIntValueOrDefaultEl>:

long int MockSupport::returnLongIntValueOrDefault(long int defaultValue)
{
 800a1c2:	b580      	push	{r7, lr}
 800a1c4:	b082      	sub	sp, #8
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
 800a1ca:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	331c      	adds	r3, #28
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	4798      	blx	r3
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d007      	beq.n	800a1ee <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2c>
        return longIntReturnValue();
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	3338      	adds	r3, #56	; 0x38
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	4798      	blx	r3
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	e000      	b.n	800a1f0 <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2e>
    }
    return defaultValue;
 800a1ee:	683b      	ldr	r3, [r7, #0]
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3708      	adds	r7, #8
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <_ZN11MockSupport24returnBoolValueOrDefaultEb>:

bool MockSupport::returnBoolValueOrDefault(bool defaultValue)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	460b      	mov	r3, r1
 800a202:	70fb      	strb	r3, [r7, #3]
    if (hasReturnValue()) {
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	331c      	adds	r3, #28
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	4798      	blx	r3
 800a210:	4603      	mov	r3, r0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d007      	beq.n	800a226 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x2e>
        return boolReturnValue();
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	3324      	adds	r3, #36	; 0x24
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	4798      	blx	r3
 800a222:	4603      	mov	r3, r0
 800a224:	e000      	b.n	800a228 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x30>
    }
    return defaultValue;
 800a226:	78fb      	ldrb	r3, [r7, #3]
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3708      	adds	r7, #8
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <_ZN11MockSupport23returnIntValueOrDefaultEi>:

int MockSupport::returnIntValueOrDefault(int defaultValue)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	331c      	adds	r3, #28
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	4798      	blx	r3
 800a246:	4603      	mov	r3, r0
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d007      	beq.n	800a25c <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2c>
        return intReturnValue();
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	332c      	adds	r3, #44	; 0x2c
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	4798      	blx	r3
 800a258:	4603      	mov	r3, r0
 800a25a:	e000      	b.n	800a25e <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2e>
    }
    return defaultValue;
 800a25c:	683b      	ldr	r3, [r7, #0]
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3708      	adds	r7, #8
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}

0800a266 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockSupport::returnUnsignedIntValueOrDefault(unsigned int defaultValue)
{
 800a266:	b580      	push	{r7, lr}
 800a268:	b082      	sub	sp, #8
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
 800a26e:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	331c      	adds	r3, #28
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	4798      	blx	r3
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d007      	beq.n	800a292 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2c>
        return unsignedIntReturnValue();
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	3334      	adds	r3, #52	; 0x34
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	4798      	blx	r3
 800a28e:	4603      	mov	r3, r0
 800a290:	e000      	b.n	800a294 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2e>
    }
    return defaultValue;
 800a292:	683b      	ldr	r3, [r7, #0]
}
 800a294:	4618      	mov	r0, r3
 800a296:	3708      	adds	r7, #8
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockSupport::returnUnsignedLongIntValueOrDefault(unsigned long int defaultValue)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	331c      	adds	r3, #28
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	4798      	blx	r3
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d007      	beq.n	800a2c8 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2c>
        return unsignedLongIntReturnValue();
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	3340      	adds	r3, #64	; 0x40
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	4798      	blx	r3
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	e000      	b.n	800a2ca <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2e>
    }
    return defaultValue;
 800a2c8:	683b      	ldr	r3, [r7, #0]
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3708      	adds	r7, #8
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}

0800a2d2 <_ZN11MockSupport18longIntReturnValueEv>:

long int MockSupport::longIntReturnValue()
{
 800a2d2:	b590      	push	{r4, r7, lr}
 800a2d4:	b091      	sub	sp, #68	; 0x44
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	3320      	adds	r3, #32
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f107 0208 	add.w	r2, r7, #8
 800a2e6:	6879      	ldr	r1, [r7, #4]
 800a2e8:	4610      	mov	r0, r2
 800a2ea:	4798      	blx	r3
 800a2ec:	f107 0308 	add.w	r3, r7, #8
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f011 fddf 	bl	801beb4 <_ZNK14MockNamedValue15getLongIntValueEv>
 800a2f6:	4604      	mov	r4, r0
 800a2f8:	bf00      	nop
 800a2fa:	f107 0308 	add.w	r3, r7, #8
 800a2fe:	4618      	mov	r0, r3
 800a300:	f011 fa84 	bl	801b80c <_ZN14MockNamedValueD1Ev>
 800a304:	4623      	mov	r3, r4
}
 800a306:	4618      	mov	r0, r3
 800a308:	3744      	adds	r7, #68	; 0x44
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd90      	pop	{r4, r7, pc}

0800a30e <_ZN11MockSupport26unsignedLongIntReturnValueEv>:

unsigned long int MockSupport::unsignedLongIntReturnValue()
{
 800a30e:	b590      	push	{r4, r7, lr}
 800a310:	b091      	sub	sp, #68	; 0x44
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	3320      	adds	r3, #32
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f107 0208 	add.w	r2, r7, #8
 800a322:	6879      	ldr	r1, [r7, #4]
 800a324:	4610      	mov	r0, r2
 800a326:	4798      	blx	r3
 800a328:	f107 0308 	add.w	r3, r7, #8
 800a32c:	4618      	mov	r0, r3
 800a32e:	f011 fe23 	bl	801bf78 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 800a332:	4604      	mov	r4, r0
 800a334:	bf00      	nop
 800a336:	f107 0308 	add.w	r3, r7, #8
 800a33a:	4618      	mov	r0, r3
 800a33c:	f011 fa66 	bl	801b80c <_ZN14MockNamedValueD1Ev>
 800a340:	4623      	mov	r3, r4
}
 800a342:	4618      	mov	r0, r3
 800a344:	3744      	adds	r7, #68	; 0x44
 800a346:	46bd      	mov	sp, r7
 800a348:	bd90      	pop	{r4, r7, pc}
	...

0800a34c <_ZN11MockSupport22longLongIntReturnValueEv>:
}

#else

cpputest_longlong MockSupport::longLongIntReturnValue()
{
 800a34c:	b5b0      	push	{r4, r5, r7, lr}
 800a34e:	b084      	sub	sp, #16
 800a350:	af02      	add	r7, sp, #8
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 800a356:	f008 f8ed 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 800a35a:	4604      	mov	r4, r0
 800a35c:	6823      	ldr	r3, [r4, #0]
 800a35e:	3368      	adds	r3, #104	; 0x68
 800a360:	681d      	ldr	r5, [r3, #0]
 800a362:	f008 f8f7 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a366:	4603      	mov	r3, r0
 800a368:	9300      	str	r3, [sp, #0]
 800a36a:	f240 2345 	movw	r3, #581	; 0x245
 800a36e:	4a06      	ldr	r2, [pc, #24]	; (800a388 <_ZN11MockSupport22longLongIntReturnValueEv+0x3c>)
 800a370:	4906      	ldr	r1, [pc, #24]	; (800a38c <_ZN11MockSupport22longLongIntReturnValueEv+0x40>)
 800a372:	4620      	mov	r0, r4
 800a374:	47a8      	blx	r5
    return cpputest_longlong(0);
 800a376:	2100      	movs	r1, #0
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f7fe fd2f 	bl	8008ddc <_ZN17cpputest_longlongC1Ei>
}
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	3708      	adds	r7, #8
 800a382:	46bd      	mov	sp, r7
 800a384:	bdb0      	pop	{r4, r5, r7, pc}
 800a386:	bf00      	nop
 800a388:	080220a8 	.word	0x080220a8
 800a38c:	080220ec 	.word	0x080220ec

0800a390 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv>:

cpputest_ulonglong MockSupport::unsignedLongLongIntReturnValue()
{
 800a390:	b5b0      	push	{r4, r5, r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af02      	add	r7, sp, #8
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 800a39a:	f008 f8cb 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 800a39e:	4604      	mov	r4, r0
 800a3a0:	6823      	ldr	r3, [r4, #0]
 800a3a2:	3368      	adds	r3, #104	; 0x68
 800a3a4:	681d      	ldr	r5, [r3, #0]
 800a3a6:	f008 f8d5 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	9300      	str	r3, [sp, #0]
 800a3ae:	f240 234b 	movw	r3, #587	; 0x24b
 800a3b2:	4a06      	ldr	r2, [pc, #24]	; (800a3cc <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x3c>)
 800a3b4:	4906      	ldr	r1, [pc, #24]	; (800a3d0 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x40>)
 800a3b6:	4620      	mov	r0, r4
 800a3b8:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 800a3ba:	2100      	movs	r1, #0
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f7fe fd19 	bl	8008df4 <_ZN18cpputest_ulonglongC1Ei>
}
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	3708      	adds	r7, #8
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bdb0      	pop	{r4, r5, r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	080220a8 	.word	0x080220a8
 800a3d0:	0802210c 	.word	0x0802210c

0800a3d4 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockSupport::returnLongLongIntValueOrDefault(cpputest_longlong defaultValue)
{
 800a3d4:	b5b0      	push	{r4, r5, r7, lr}
 800a3d6:	b086      	sub	sp, #24
 800a3d8:	af02      	add	r7, sp, #8
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	60b9      	str	r1, [r7, #8]
 800a3de:	4639      	mov	r1, r7
 800a3e0:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 800a3e4:	f008 f8a6 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 800a3e8:	4604      	mov	r4, r0
 800a3ea:	6823      	ldr	r3, [r4, #0]
 800a3ec:	3368      	adds	r3, #104	; 0x68
 800a3ee:	681d      	ldr	r5, [r3, #0]
 800a3f0:	f008 f8b0 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	9300      	str	r3, [sp, #0]
 800a3f8:	f240 2351 	movw	r3, #593	; 0x251
 800a3fc:	4a06      	ldr	r2, [pc, #24]	; (800a418 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 800a3fe:	4907      	ldr	r1, [pc, #28]	; (800a41c <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 800a400:	4620      	mov	r0, r4
 800a402:	47a8      	blx	r5
    return defaultValue;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	461a      	mov	r2, r3
 800a408:	463b      	mov	r3, r7
 800a40a:	cb03      	ldmia	r3!, {r0, r1}
 800a40c:	6010      	str	r0, [r2, #0]
 800a40e:	6051      	str	r1, [r2, #4]
}
 800a410:	68f8      	ldr	r0, [r7, #12]
 800a412:	3710      	adds	r7, #16
 800a414:	46bd      	mov	sp, r7
 800a416:	bdb0      	pop	{r4, r5, r7, pc}
 800a418:	080220a8 	.word	0x080220a8
 800a41c:	080220ec 	.word	0x080220ec

0800a420 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockSupport::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong defaultValue)
{
 800a420:	b5b0      	push	{r4, r5, r7, lr}
 800a422:	b086      	sub	sp, #24
 800a424:	af02      	add	r7, sp, #8
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	4639      	mov	r1, r7
 800a42c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 800a430:	f008 f880 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 800a434:	4604      	mov	r4, r0
 800a436:	6823      	ldr	r3, [r4, #0]
 800a438:	3368      	adds	r3, #104	; 0x68
 800a43a:	681d      	ldr	r5, [r3, #0]
 800a43c:	f008 f88a 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a440:	4603      	mov	r3, r0
 800a442:	9300      	str	r3, [sp, #0]
 800a444:	f240 2357 	movw	r3, #599	; 0x257
 800a448:	4a06      	ldr	r2, [pc, #24]	; (800a464 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 800a44a:	4907      	ldr	r1, [pc, #28]	; (800a468 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 800a44c:	4620      	mov	r0, r4
 800a44e:	47a8      	blx	r5
    return defaultValue;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	461a      	mov	r2, r3
 800a454:	463b      	mov	r3, r7
 800a456:	cb03      	ldmia	r3!, {r0, r1}
 800a458:	6010      	str	r0, [r2, #0]
 800a45a:	6051      	str	r1, [r2, #4]
}
 800a45c:	68f8      	ldr	r0, [r7, #12]
 800a45e:	3710      	adds	r7, #16
 800a460:	46bd      	mov	sp, r7
 800a462:	bdb0      	pop	{r4, r5, r7, pc}
 800a464:	080220a8 	.word	0x080220a8
 800a468:	0802210c 	.word	0x0802210c

0800a46c <_ZN11MockSupport17stringReturnValueEv>:

#endif

const char* MockSupport::stringReturnValue()
{
 800a46c:	b590      	push	{r4, r7, lr}
 800a46e:	b091      	sub	sp, #68	; 0x44
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	3320      	adds	r3, #32
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f107 0208 	add.w	r2, r7, #8
 800a480:	6879      	ldr	r1, [r7, #4]
 800a482:	4610      	mov	r0, r2
 800a484:	4798      	blx	r3
 800a486:	f107 0308 	add.w	r3, r7, #8
 800a48a:	4618      	mov	r0, r3
 800a48c:	f011 fea8 	bl	801c1e0 <_ZNK14MockNamedValue14getStringValueEv>
 800a490:	4604      	mov	r4, r0
 800a492:	bf00      	nop
 800a494:	f107 0308 	add.w	r3, r7, #8
 800a498:	4618      	mov	r0, r3
 800a49a:	f011 f9b7 	bl	801b80c <_ZN14MockNamedValueD1Ev>
 800a49e:	4623      	mov	r3, r4
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3744      	adds	r7, #68	; 0x44
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd90      	pop	{r4, r7, pc}

0800a4a8 <_ZN11MockSupport17doubleReturnValueEv>:

double MockSupport::doubleReturnValue()
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	ed2d 8b02 	vpush	{d8}
 800a4ae:	b090      	sub	sp, #64	; 0x40
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	3320      	adds	r3, #32
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f107 0208 	add.w	r2, r7, #8
 800a4c0:	6879      	ldr	r1, [r7, #4]
 800a4c2:	4610      	mov	r0, r2
 800a4c4:	4798      	blx	r3
 800a4c6:	f107 0308 	add.w	r3, r7, #8
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f011 fe2c 	bl	801c128 <_ZNK14MockNamedValue14getDoubleValueEv>
 800a4d0:	eeb0 8a40 	vmov.f32	s16, s0
 800a4d4:	eef0 8a60 	vmov.f32	s17, s1
 800a4d8:	bf00      	nop
 800a4da:	f107 0308 	add.w	r3, r7, #8
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f011 f994 	bl	801b80c <_ZN14MockNamedValueD1Ev>
 800a4e4:	eeb0 7a48 	vmov.f32	s14, s16
 800a4e8:	eef0 7a68 	vmov.f32	s15, s17
}
 800a4ec:	eeb0 0a47 	vmov.f32	s0, s14
 800a4f0:	eef0 0a67 	vmov.f32	s1, s15
 800a4f4:	3740      	adds	r7, #64	; 0x40
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	ecbd 8b02 	vpop	{d8}
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <_ZN11MockSupport27returnPointerValueOrDefaultEPv>:

void * MockSupport::returnPointerValueOrDefault(void * defaultValue)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b082      	sub	sp, #8
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
 800a506:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	331c      	adds	r3, #28
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	4798      	blx	r3
 800a514:	4603      	mov	r3, r0
 800a516:	2b00      	cmp	r3, #0
 800a518:	d007      	beq.n	800a52a <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2c>
        return pointerReturnValue();
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	336c      	adds	r3, #108	; 0x6c
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	4798      	blx	r3
 800a526:	4603      	mov	r3, r0
 800a528:	e000      	b.n	800a52c <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2e>
    }
    return defaultValue;
 800a52a:	683b      	ldr	r3, [r7, #0]
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3708      	adds	r7, #8
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv>:

const void* MockSupport::returnConstPointerValueOrDefault(const void * defaultValue)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	331c      	adds	r3, #28
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	4798      	blx	r3
 800a54a:	4603      	mov	r3, r0
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d007      	beq.n	800a560 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2c>
        return constPointerReturnValue();
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	3378      	adds	r3, #120	; 0x78
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	4798      	blx	r3
 800a55c:	4603      	mov	r3, r0
 800a55e:	e000      	b.n	800a562 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2e>
    }
    return defaultValue;
 800a560:	683b      	ldr	r3, [r7, #0]
}
 800a562:	4618      	mov	r0, r3
 800a564:	3708      	adds	r7, #8
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockSupport::returnFunctionPointerValueOrDefault(void (*defaultValue)()))()
{
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b082      	sub	sp, #8
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
 800a572:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	331c      	adds	r3, #28
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	4798      	blx	r3
 800a580:	4603      	mov	r3, r0
 800a582:	2b00      	cmp	r3, #0
 800a584:	d007      	beq.n	800a596 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2c>
        return functionPointerReturnValue();
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	3380      	adds	r3, #128	; 0x80
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	4798      	blx	r3
 800a592:	4603      	mov	r3, r0
 800a594:	e000      	b.n	800a598 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2e>
    }
    return defaultValue;
 800a596:	683b      	ldr	r3, [r7, #0]
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3708      	adds	r7, #8
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <_ZN11MockSupport18pointerReturnValueEv>:

void* MockSupport::pointerReturnValue()
{
 800a5a0:	b590      	push	{r4, r7, lr}
 800a5a2:	b091      	sub	sp, #68	; 0x44
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	3320      	adds	r3, #32
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f107 0208 	add.w	r2, r7, #8
 800a5b4:	6879      	ldr	r1, [r7, #4]
 800a5b6:	4610      	mov	r0, r2
 800a5b8:	4798      	blx	r3
 800a5ba:	f107 0308 	add.w	r3, r7, #8
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f011 fe36 	bl	801c230 <_ZNK14MockNamedValue15getPointerValueEv>
 800a5c4:	4604      	mov	r4, r0
 800a5c6:	bf00      	nop
 800a5c8:	f107 0308 	add.w	r3, r7, #8
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f011 f91d 	bl	801b80c <_ZN14MockNamedValueD1Ev>
 800a5d2:	4623      	mov	r3, r4
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3744      	adds	r7, #68	; 0x44
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd90      	pop	{r4, r7, pc}

0800a5dc <_ZN11MockSupport23constPointerReturnValueEv>:

const void* MockSupport::constPointerReturnValue()
{
 800a5dc:	b590      	push	{r4, r7, lr}
 800a5de:	b091      	sub	sp, #68	; 0x44
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	3320      	adds	r3, #32
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f107 0208 	add.w	r2, r7, #8
 800a5f0:	6879      	ldr	r1, [r7, #4]
 800a5f2:	4610      	mov	r0, r2
 800a5f4:	4798      	blx	r3
 800a5f6:	f107 0308 	add.w	r3, r7, #8
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f011 fe40 	bl	801c280 <_ZNK14MockNamedValue20getConstPointerValueEv>
 800a600:	4604      	mov	r4, r0
 800a602:	bf00      	nop
 800a604:	f107 0308 	add.w	r3, r7, #8
 800a608:	4618      	mov	r0, r3
 800a60a:	f011 f8ff 	bl	801b80c <_ZN14MockNamedValueD1Ev>
 800a60e:	4623      	mov	r3, r4
}
 800a610:	4618      	mov	r0, r3
 800a612:	3744      	adds	r7, #68	; 0x44
 800a614:	46bd      	mov	sp, r7
 800a616:	bd90      	pop	{r4, r7, pc}

0800a618 <_ZN11MockSupport26functionPointerReturnValueEv>:

void (*MockSupport::functionPointerReturnValue())()
{
 800a618:	b590      	push	{r4, r7, lr}
 800a61a:	b091      	sub	sp, #68	; 0x44
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	3320      	adds	r3, #32
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f107 0208 	add.w	r2, r7, #8
 800a62c:	6879      	ldr	r1, [r7, #4]
 800a62e:	4610      	mov	r0, r2
 800a630:	4798      	blx	r3
 800a632:	f107 0308 	add.w	r3, r7, #8
 800a636:	4618      	mov	r0, r3
 800a638:	f011 fe4a 	bl	801c2d0 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 800a63c:	4604      	mov	r4, r0
 800a63e:	bf00      	nop
 800a640:	f107 0308 	add.w	r3, r7, #8
 800a644:	4618      	mov	r0, r3
 800a646:	f011 f8e1 	bl	801b80c <_ZN14MockNamedValueD1Ev>
 800a64a:	4623      	mov	r3, r4
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3744      	adds	r7, #68	; 0x44
 800a650:	46bd      	mov	sp, r7
 800a652:	bd90      	pop	{r4, r7, pc}

0800a654 <_ZN11MockSupport14hasReturnValueEv>:

bool MockSupport::hasReturnValue()
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->hasReturnValue();
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a660:	2b00      	cmp	r3, #0
 800a662:	d00a      	beq.n	800a67a <_ZN11MockSupport14hasReturnValueEv+0x26>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	3350      	adds	r3, #80	; 0x50
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	4610      	mov	r0, r2
 800a674:	4798      	blx	r3
 800a676:	4603      	mov	r3, r0
 800a678:	e000      	b.n	800a67c <_ZN11MockSupport14hasReturnValueEv+0x28>
    return false;
 800a67a:	2300      	movs	r3, #0
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3708      	adds	r7, #8
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <_Z41__static_initialization_and_destruction_0ii>:
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2b01      	cmp	r3, #1
 800a692:	d115      	bne.n	800a6c0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d110      	bne.n	800a6c0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
static MockSupport global_mock;
 800a69e:	f107 0308 	add.w	r3, r7, #8
 800a6a2:	490f      	ldr	r1, [pc, #60]	; (800a6e0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f000 fb62 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800a6aa:	f107 0308 	add.w	r3, r7, #8
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	480c      	ldr	r0, [pc, #48]	; (800a6e4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800a6b2:	f7fe fc6d 	bl	8008f90 <_ZN11MockSupportC1ERK12SimpleString>
 800a6b6:	f107 0308 	add.w	r3, r7, #8
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f000 ff0f 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d107      	bne.n	800a6d6 <_Z41__static_initialization_and_destruction_0ii+0x52>
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d102      	bne.n	800a6d6 <_Z41__static_initialization_and_destruction_0ii+0x52>
 800a6d0:	4804      	ldr	r0, [pc, #16]	; (800a6e4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800a6d2:	f7fe fca7 	bl	8009024 <_ZN11MockSupportD1Ev>
}
 800a6d6:	bf00      	nop
 800a6d8:	3710      	adds	r7, #16
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	080220a0 	.word	0x080220a0
 800a6e4:	200006f4 	.word	0x200006f4

0800a6e8 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>:
protected:
    void addExpectationsAndCallHistory(const MockExpectedCallsList& expectations);
    void addExpectationsAndCallHistoryRelatedTo(const SimpleString& function, const MockExpectedCallsList& expectations);
};

class MockExpectedCallsDidntHappenFailure : public MockFailure
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b082      	sub	sp, #8
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	4a05      	ldr	r2, [pc, #20]	; (800a708 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev+0x20>)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	601a      	str	r2, [r3, #0]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7fe fbbb 	bl	8008e74 <_ZN11MockFailureD1Ev>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	4618      	mov	r0, r3
 800a702:	3708      	adds	r7, #8
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}
 800a708:	0802575c 	.word	0x0802575c

0800a70c <_ZN35MockExpectedCallsDidntHappenFailureD0Ev>:
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f7ff ffe7 	bl	800a6e8 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
 800a71a:	2134      	movs	r1, #52	; 0x34
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f7fd ff77 	bl	8008610 <_ZdlPvj>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	4618      	mov	r0, r3
 800a726:	3708      	adds	r7, #8
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <_ZN20MockCallOrderFailureD1Ev>:
{
public:
    MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations);
};

class MockCallOrderFailure : public MockFailure
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	4a05      	ldr	r2, [pc, #20]	; (800a74c <_ZN20MockCallOrderFailureD1Ev+0x20>)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	601a      	str	r2, [r3, #0]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	4618      	mov	r0, r3
 800a73e:	f7fe fb99 	bl	8008e74 <_ZN11MockFailureD1Ev>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	4618      	mov	r0, r3
 800a746:	3708      	adds	r7, #8
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}
 800a74c:	08025730 	.word	0x08025730

0800a750 <_ZN20MockCallOrderFailureD0Ev>:
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f7ff ffe7 	bl	800a72c <_ZN20MockCallOrderFailureD1Ev>
 800a75e:	2134      	movs	r1, #52	; 0x34
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f7fd ff55 	bl	8008610 <_ZdlPvj>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	4618      	mov	r0, r3
 800a76a:	3708      	adds	r7, #8
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <_GLOBAL__sub_I__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800a770:	b580      	push	{r7, lr}
 800a772:	af00      	add	r7, sp, #0
 800a774:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a778:	2001      	movs	r0, #1
 800a77a:	f7ff ff83 	bl	800a684 <_Z41__static_initialization_and_destruction_0ii>
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <_GLOBAL__sub_D__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800a780:	b580      	push	{r7, lr}
 800a782:	af00      	add	r7, sp, #0
 800a784:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a788:	2000      	movs	r0, #0
 800a78a:	f7ff ff7b 	bl	800a684 <_Z41__static_initialization_and_destruction_0ii>
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <_ZN11SimpleMutexC1Ev>:
 */
#include "CppUTest/TestHarness.h"
#include "CppUTest/SimpleMutex.h"


SimpleMutex::SimpleMutex(void)
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
{
    psMtx = PlatformSpecificMutexCreate();
 800a798:	4b05      	ldr	r3, [pc, #20]	; (800a7b0 <_ZN11SimpleMutexC1Ev+0x20>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4798      	blx	r3
 800a79e:	4602      	mov	r2, r0
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	601a      	str	r2, [r3, #0]
}
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3708      	adds	r7, #8
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	200000f0 	.word	0x200000f0

0800a7b4 <_ZN11SimpleMutexD1Ev>:

SimpleMutex::~SimpleMutex(void)
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b082      	sub	sp, #8
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
{
    PlatformSpecificMutexDestroy(psMtx);
 800a7bc:	4b05      	ldr	r3, [pc, #20]	; (800a7d4 <_ZN11SimpleMutexD1Ev+0x20>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	6812      	ldr	r2, [r2, #0]
 800a7c4:	4610      	mov	r0, r2
 800a7c6:	4798      	blx	r3
}
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3708      	adds	r7, #8
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	200000fc 	.word	0x200000fc

0800a7d8 <_ZN11SimpleMutex4LockEv>:

void SimpleMutex::Lock(void)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexLock(psMtx);
 800a7e0:	4b04      	ldr	r3, [pc, #16]	; (800a7f4 <_ZN11SimpleMutex4LockEv+0x1c>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	6812      	ldr	r2, [r2, #0]
 800a7e8:	4610      	mov	r0, r2
 800a7ea:	4798      	blx	r3
}
 800a7ec:	bf00      	nop
 800a7ee:	3708      	adds	r7, #8
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}
 800a7f4:	200000f4 	.word	0x200000f4

0800a7f8 <_ZN11SimpleMutex6UnlockEv>:

void SimpleMutex::Unlock(void)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b082      	sub	sp, #8
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexUnlock(psMtx);
 800a800:	4b04      	ldr	r3, [pc, #16]	; (800a814 <_ZN11SimpleMutex6UnlockEv+0x1c>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	6812      	ldr	r2, [r2, #0]
 800a808:	4610      	mov	r0, r2
 800a80a:	4798      	blx	r3
}
 800a80c:	bf00      	nop
 800a80e:	3708      	adds	r7, #8
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	200000f8 	.word	0x200000f8

0800a818 <_ZN15ScopedMutexLockC1EP11SimpleMutex>:


ScopedMutexLock::ScopedMutexLock(SimpleMutex *mtx) :
 800a818:	b580      	push	{r7, lr}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
    mutex(mtx)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	683a      	ldr	r2, [r7, #0]
 800a826:	601a      	str	r2, [r3, #0]
{
    mutex->Lock();
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4618      	mov	r0, r3
 800a82e:	f7ff ffd3 	bl	800a7d8 <_ZN11SimpleMutex4LockEv>
}
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	4618      	mov	r0, r3
 800a836:	3708      	adds	r7, #8
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <_ZN15ScopedMutexLockD1Ev>:

ScopedMutexLock::~ScopedMutexLock()
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b082      	sub	sp, #8
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
{
    mutex->Unlock();
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4618      	mov	r0, r3
 800a84a:	f7ff ffd5 	bl	800a7f8 <_ZN11SimpleMutex6UnlockEv>
}
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	4618      	mov	r0, r3
 800a852:	3708      	adds	r7, #8
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <_ZN12SimpleString18getStringAllocatorEv>:
}

TestMemoryAllocator* SimpleString::stringAllocator_ = NULLPTR;

TestMemoryAllocator* SimpleString::getStringAllocator()
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	af00      	add	r7, sp, #0
    if (stringAllocator_ == NULLPTR)
 800a85c:	4b05      	ldr	r3, [pc, #20]	; (800a874 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d103      	bne.n	800a86c <_ZN12SimpleString18getStringAllocatorEv+0x14>
        return defaultNewArrayAllocator();
 800a864:	f003 fd7a 	bl	800e35c <_Z24defaultNewArrayAllocatorv>
 800a868:	4603      	mov	r3, r0
 800a86a:	e001      	b.n	800a870 <_ZN12SimpleString18getStringAllocatorEv+0x18>
    return stringAllocator_;
 800a86c:	4b01      	ldr	r3, [pc, #4]	; (800a874 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800a86e:	681b      	ldr	r3, [r3, #0]
}
 800a870:	4618      	mov	r0, r3
 800a872:	bd80      	pop	{r7, pc}
 800a874:	2000073c 	.word	0x2000073c

0800a878 <_ZN12SimpleString17allocStringBufferEjPKcj>:
    stringAllocator_ = allocator;
}

/* Avoid using the memory leak detector INSIDE SimpleString as its used inside the detector */
char* SimpleString::allocStringBuffer(size_t _size, const char* file, size_t line)
{
 800a878:	b590      	push	{r4, r7, lr}
 800a87a:	b085      	sub	sp, #20
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	60b9      	str	r1, [r7, #8]
 800a882:	607a      	str	r2, [r7, #4]
    return getStringAllocator()->alloc_memory(_size, file, line);
 800a884:	f7ff ffe8 	bl	800a858 <_ZN12SimpleString18getStringAllocatorEv>
 800a888:	6803      	ldr	r3, [r0, #0]
 800a88a:	3308      	adds	r3, #8
 800a88c:	681c      	ldr	r4, [r3, #0]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	68ba      	ldr	r2, [r7, #8]
 800a892:	68f9      	ldr	r1, [r7, #12]
 800a894:	47a0      	blx	r4
 800a896:	4603      	mov	r3, r0
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3714      	adds	r7, #20
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd90      	pop	{r4, r7, pc}

0800a8a0 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>:

void SimpleString::deallocStringBuffer(char* str, size_t size, const char* file, size_t line)
{
 800a8a0:	b590      	push	{r4, r7, lr}
 800a8a2:	b087      	sub	sp, #28
 800a8a4:	af02      	add	r7, sp, #8
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	60b9      	str	r1, [r7, #8]
 800a8aa:	607a      	str	r2, [r7, #4]
 800a8ac:	603b      	str	r3, [r7, #0]
    getStringAllocator()->free_memory(str, size, file, line);
 800a8ae:	f7ff ffd3 	bl	800a858 <_ZN12SimpleString18getStringAllocatorEv>
 800a8b2:	6803      	ldr	r3, [r0, #0]
 800a8b4:	330c      	adds	r3, #12
 800a8b6:	681c      	ldr	r4, [r3, #0]
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	9300      	str	r3, [sp, #0]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	68ba      	ldr	r2, [r7, #8]
 800a8c0:	68f9      	ldr	r1, [r7, #12]
 800a8c2:	47a0      	blx	r4
}
 800a8c4:	bf00      	nop
 800a8c6:	3714      	adds	r7, #20
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd90      	pop	{r4, r7, pc}

0800a8cc <_ZNK12SimpleString14getEmptyStringEv>:

char* SimpleString::getEmptyString() const
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
    char* empty = allocStringBuffer(1, __FILE__, __LINE__);
 800a8d4:	2284      	movs	r2, #132	; 0x84
 800a8d6:	4906      	ldr	r1, [pc, #24]	; (800a8f0 <_ZNK12SimpleString14getEmptyStringEv+0x24>)
 800a8d8:	2001      	movs	r0, #1
 800a8da:	f7ff ffcd 	bl	800a878 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800a8de:	60f8      	str	r0, [r7, #12]
    empty[0] = '\0';
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	701a      	strb	r2, [r3, #0]
    return empty;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3710      	adds	r7, #16
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}
 800a8f0:	08022138 	.word	0x08022138

0800a8f4 <_ZN12SimpleString4AtoUEPKc>:

// does not support + or - prefixes
unsigned SimpleString::AtoU(const char* str)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	4618      	mov	r0, r3
 800a902:	f001 f809 	bl	800b918 <_ZN12SimpleString7isSpaceEc>
 800a906:	4603      	mov	r3, r0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d003      	beq.n	800a914 <_ZN12SimpleString4AtoUEPKc+0x20>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	3301      	adds	r3, #1
 800a910:	607b      	str	r3, [r7, #4]
 800a912:	e7f3      	b.n	800a8fc <_ZN12SimpleString4AtoUEPKc+0x8>

    unsigned result = 0;
 800a914:	2300      	movs	r3, #0
 800a916:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	4618      	mov	r0, r3
 800a91e:	f000 ffe7 	bl	800b8f0 <_ZN12SimpleString7isDigitEc>
 800a922:	4603      	mov	r3, r0
 800a924:	2b00      	cmp	r3, #0
 800a926:	d005      	beq.n	800a934 <_ZN12SimpleString4AtoUEPKc+0x40>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	2b2f      	cmp	r3, #47	; 0x2f
 800a92e:	d901      	bls.n	800a934 <_ZN12SimpleString4AtoUEPKc+0x40>
 800a930:	2301      	movs	r3, #1
 800a932:	e000      	b.n	800a936 <_ZN12SimpleString4AtoUEPKc+0x42>
 800a934:	2300      	movs	r3, #0
 800a936:	2b00      	cmp	r3, #0
 800a938:	d010      	beq.n	800a95c <_ZN12SimpleString4AtoUEPKc+0x68>
    {
        result *= 10;
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	4613      	mov	r3, r2
 800a93e:	009b      	lsls	r3, r3, #2
 800a940:	4413      	add	r3, r2
 800a942:	005b      	lsls	r3, r3, #1
 800a944:	60fb      	str	r3, [r7, #12]
        result += static_cast<unsigned>(*str - '0');
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	461a      	mov	r2, r3
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	4413      	add	r3, r2
 800a950:	3b30      	subs	r3, #48	; 0x30
 800a952:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	3301      	adds	r3, #1
 800a958:	607b      	str	r3, [r7, #4]
 800a95a:	e7dd      	b.n	800a918 <_ZN12SimpleString4AtoUEPKc+0x24>
    }
    return result;
 800a95c:	68fb      	ldr	r3, [r7, #12]
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3710      	adds	r7, #16
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}

0800a966 <_ZN12SimpleString4AtoIEPKc>:

int SimpleString::AtoI(const char* str)
{
 800a966:	b580      	push	{r7, lr}
 800a968:	b084      	sub	sp, #16
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	4618      	mov	r0, r3
 800a974:	f000 ffd0 	bl	800b918 <_ZN12SimpleString7isSpaceEc>
 800a978:	4603      	mov	r3, r0
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d003      	beq.n	800a986 <_ZN12SimpleString4AtoIEPKc+0x20>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	3301      	adds	r3, #1
 800a982:	607b      	str	r3, [r7, #4]
 800a984:	e7f3      	b.n	800a96e <_ZN12SimpleString4AtoIEPKc+0x8>

    char first_char = *str;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	72fb      	strb	r3, [r7, #11]
    if (first_char == '-' || first_char == '+') str++;
 800a98c:	7afb      	ldrb	r3, [r7, #11]
 800a98e:	2b2d      	cmp	r3, #45	; 0x2d
 800a990:	d002      	beq.n	800a998 <_ZN12SimpleString4AtoIEPKc+0x32>
 800a992:	7afb      	ldrb	r3, [r7, #11]
 800a994:	2b2b      	cmp	r3, #43	; 0x2b
 800a996:	d102      	bne.n	800a99e <_ZN12SimpleString4AtoIEPKc+0x38>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	3301      	adds	r3, #1
 800a99c:	607b      	str	r3, [r7, #4]

    int  result = 0;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f000 ffa2 	bl	800b8f0 <_ZN12SimpleString7isDigitEc>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d00f      	beq.n	800a9d2 <_ZN12SimpleString4AtoIEPKc+0x6c>
    {
        result *= 10;
 800a9b2:	68fa      	ldr	r2, [r7, #12]
 800a9b4:	4613      	mov	r3, r2
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	4413      	add	r3, r2
 800a9ba:	005b      	lsls	r3, r3, #1
 800a9bc:	60fb      	str	r3, [r7, #12]
        result += *str - '0';
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	3b30      	subs	r3, #48	; 0x30
 800a9c4:	68fa      	ldr	r2, [r7, #12]
 800a9c6:	4413      	add	r3, r2
 800a9c8:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	607b      	str	r3, [r7, #4]
 800a9d0:	e7e7      	b.n	800a9a2 <_ZN12SimpleString4AtoIEPKc+0x3c>
    }
    return (first_char == '-') ? -result : result;
 800a9d2:	7afb      	ldrb	r3, [r7, #11]
 800a9d4:	2b2d      	cmp	r3, #45	; 0x2d
 800a9d6:	d102      	bne.n	800a9de <_ZN12SimpleString4AtoIEPKc+0x78>
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	425b      	negs	r3, r3
 800a9dc:	e000      	b.n	800a9e0 <_ZN12SimpleString4AtoIEPKc+0x7a>
 800a9de:	68fb      	ldr	r3, [r7, #12]
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3710      	adds	r7, #16
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <_ZN12SimpleString6StrCmpEPKcS1_>:

int SimpleString::StrCmp(const char* s1, const char* s2)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b083      	sub	sp, #12
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	6039      	str	r1, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d00c      	beq.n	800aa14 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	781a      	ldrb	r2, [r3, #0]
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d106      	bne.n	800aa14 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
       ++s1;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	3301      	adds	r3, #1
 800aa0a:	607b      	str	r3, [r7, #4]
       ++s2;
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	3301      	adds	r3, #1
 800aa10:	603b      	str	r3, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800aa12:	e7ee      	b.n	800a9f2 <_ZN12SimpleString6StrCmpEPKcS1_+0xa>
   }
   return *(const unsigned char *) s1 - *(const unsigned char *) s2;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	461a      	mov	r2, r3
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	1ad3      	subs	r3, r2, r3
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <_ZN12SimpleString6StrLenEPKc>:

size_t SimpleString::StrLen(const char* str)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b085      	sub	sp, #20
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
    size_t n = (size_t)-1;
 800aa34:	f04f 33ff 	mov.w	r3, #4294967295
 800aa38:	60fb      	str	r3, [r7, #12]
    do n++; while (*str++);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	60fb      	str	r3, [r7, #12]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	1c5a      	adds	r2, r3, #1
 800aa44:	607a      	str	r2, [r7, #4]
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	bf14      	ite	ne
 800aa4c:	2301      	movne	r3, #1
 800aa4e:	2300      	moveq	r3, #0
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d000      	beq.n	800aa58 <_ZN12SimpleString6StrLenEPKc+0x2c>
 800aa56:	e7f0      	b.n	800aa3a <_ZN12SimpleString6StrLenEPKc+0xe>
    return n;
 800aa58:	68fb      	ldr	r3, [r7, #12]
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3714      	adds	r7, #20
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr

0800aa66 <_ZN12SimpleString7StrNCmpEPKcS1_j>:

int SimpleString::StrNCmp(const char* s1, const char* s2, size_t n)
{
 800aa66:	b480      	push	{r7}
 800aa68:	b085      	sub	sp, #20
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	60f8      	str	r0, [r7, #12]
 800aa6e:	60b9      	str	r1, [r7, #8]
 800aa70:	607a      	str	r2, [r7, #4]
    while (n && *s1 && *s1 == *s2) {
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d013      	beq.n	800aaa0 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d00f      	beq.n	800aaa0 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	781a      	ldrb	r2, [r3, #0]
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d109      	bne.n	800aaa0 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
        --n;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	3b01      	subs	r3, #1
 800aa90:	607b      	str	r3, [r7, #4]
        ++s1;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	3301      	adds	r3, #1
 800aa96:	60fb      	str	r3, [r7, #12]
        ++s2;
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	60bb      	str	r3, [r7, #8]
    while (n && *s1 && *s1 == *s2) {
 800aa9e:	e7e8      	b.n	800aa72 <_ZN12SimpleString7StrNCmpEPKcS1_j+0xc>
    }
    return n ? *(const unsigned char *) s1 - *(const unsigned char *) s2 : 0;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d006      	beq.n	800aab4 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x4e>
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	461a      	mov	r2, r3
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	1ad3      	subs	r3, r2, r3
 800aab2:	e000      	b.n	800aab6 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x50>
 800aab4:	2300      	movs	r3, #0
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3714      	adds	r7, #20
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr

0800aac2 <_ZN12SimpleString7StrNCpyEPcPKcj>:

char* SimpleString::StrNCpy(char* s1, const char* s2, size_t n)
{
 800aac2:	b480      	push	{r7}
 800aac4:	b087      	sub	sp, #28
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	60f8      	str	r0, [r7, #12]
 800aaca:	60b9      	str	r1, [r7, #8]
 800aacc:	607a      	str	r2, [r7, #4]
    char* result = s1;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	617b      	str	r3, [r7, #20]

    if((NULLPTR == s1) || (0 == n)) return result;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d002      	beq.n	800aade <_ZN12SimpleString7StrNCpyEPcPKcj+0x1c>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d101      	bne.n	800aae2 <_ZN12SimpleString7StrNCpyEPcPKcj+0x20>
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	e01e      	b.n	800ab20 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5e>

    *s1 = *s2;
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	781a      	ldrb	r2, [r3, #0]
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	3b01      	subs	r3, #1
 800aaee:	607b      	str	r3, [r7, #4]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d005      	beq.n	800ab02 <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d001      	beq.n	800ab02 <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800aafe:	2301      	movs	r3, #1
 800ab00:	e000      	b.n	800ab04 <_ZN12SimpleString7StrNCpyEPcPKcj+0x42>
 800ab02:	2300      	movs	r3, #0
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d00a      	beq.n	800ab1e <_ZN12SimpleString7StrNCpyEPcPKcj+0x5c>
        *++s1 = *++s2;
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	60bb      	str	r3, [r7, #8]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	3301      	adds	r3, #1
 800ab12:	60fb      	str	r3, [r7, #12]
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	781a      	ldrb	r2, [r3, #0]
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800ab1c:	e7e5      	b.n	800aaea <_ZN12SimpleString7StrNCpyEPcPKcj+0x28>
    }
    return result;
 800ab1e:	697b      	ldr	r3, [r7, #20]
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	371c      	adds	r7, #28
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	4770      	bx	lr

0800ab2c <_ZN12SimpleString6StrStrEPKcS1_>:

const char* SimpleString::StrStr(const char* s1, const char* s2)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b082      	sub	sp, #8
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	6039      	str	r1, [r7, #0]
    if(!*s2) return s1;
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d101      	bne.n	800ab42 <_ZN12SimpleString6StrStrEPKcS1_+0x16>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	e01b      	b.n	800ab7a <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d016      	beq.n	800ab78 <_ZN12SimpleString6StrStrEPKcS1_+0x4c>
        if (StrNCmp(s1, s2, StrLen(s2)) == 0)
 800ab4a:	6838      	ldr	r0, [r7, #0]
 800ab4c:	f7ff ff6e 	bl	800aa2c <_ZN12SimpleString6StrLenEPKc>
 800ab50:	4603      	mov	r3, r0
 800ab52:	461a      	mov	r2, r3
 800ab54:	6839      	ldr	r1, [r7, #0]
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f7ff ff85 	bl	800aa66 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	bf0c      	ite	eq
 800ab62:	2301      	moveq	r3, #1
 800ab64:	2300      	movne	r3, #0
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d001      	beq.n	800ab70 <_ZN12SimpleString6StrStrEPKcS1_+0x44>
            return s1;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	e004      	b.n	800ab7a <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	3301      	adds	r3, #1
 800ab74:	607b      	str	r3, [r7, #4]
 800ab76:	e7e4      	b.n	800ab42 <_ZN12SimpleString6StrStrEPKcS1_+0x16>
    return NULLPTR;
 800ab78:	2300      	movs	r3, #0
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3708      	adds	r7, #8
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <_ZN12SimpleString7ToLowerEc>:

char SimpleString::ToLower(char ch)
{
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b082      	sub	sp, #8
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	4603      	mov	r3, r0
 800ab8a:	71fb      	strb	r3, [r7, #7]
    return isUpper(ch) ? (char)((int)ch + ('a' - 'A')) : ch;
 800ab8c:	79fb      	ldrb	r3, [r7, #7]
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f000 fed9 	bl	800b946 <_ZN12SimpleString7isUpperEc>
 800ab94:	4603      	mov	r3, r0
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d003      	beq.n	800aba2 <_ZN12SimpleString7ToLowerEc+0x20>
 800ab9a:	79fb      	ldrb	r3, [r7, #7]
 800ab9c:	3320      	adds	r3, #32
 800ab9e:	b2db      	uxtb	r3, r3
 800aba0:	e000      	b.n	800aba4 <_ZN12SimpleString7ToLowerEc+0x22>
 800aba2:	79fb      	ldrb	r3, [r7, #7]
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3708      	adds	r7, #8
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <_ZN12SimpleString6MemCmpEPKvS1_j>:

int SimpleString::MemCmp(const void* s1, const void *s2, size_t n)
{
 800abac:	b480      	push	{r7}
 800abae:	b087      	sub	sp, #28
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	60f8      	str	r0, [r7, #12]
 800abb4:	60b9      	str	r1, [r7, #8]
 800abb6:	607a      	str	r2, [r7, #4]
    const unsigned char* p1 = (const unsigned char*) s1;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	617b      	str	r3, [r7, #20]
    const unsigned char* p2 = (const unsigned char*) s2;
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	613b      	str	r3, [r7, #16]

    while (n--)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	1e5a      	subs	r2, r3, #1
 800abc4:	607a      	str	r2, [r7, #4]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	bf14      	ite	ne
 800abca:	2301      	movne	r3, #1
 800abcc:	2300      	moveq	r3, #0
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d013      	beq.n	800abfc <_ZN12SimpleString6MemCmpEPKvS1_j+0x50>
        if (*p1 != *p2) {
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	781a      	ldrb	r2, [r3, #0]
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	429a      	cmp	r2, r3
 800abde:	d006      	beq.n	800abee <_ZN12SimpleString6MemCmpEPKvS1_j+0x42>
            return *p1 - *p2;
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	781b      	ldrb	r3, [r3, #0]
 800abe4:	461a      	mov	r2, r3
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	1ad3      	subs	r3, r2, r3
 800abec:	e007      	b.n	800abfe <_ZN12SimpleString6MemCmpEPKvS1_j+0x52>
        } else {
            ++p1;
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	3301      	adds	r3, #1
 800abf2:	617b      	str	r3, [r7, #20]
            ++p2;
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	3301      	adds	r3, #1
 800abf8:	613b      	str	r3, [r7, #16]
    while (n--)
 800abfa:	e7e1      	b.n	800abc0 <_ZN12SimpleString6MemCmpEPKvS1_j+0x14>
        }
    return 0;
 800abfc:	2300      	movs	r3, #0
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	371c      	adds	r7, #28
 800ac02:	46bd      	mov	sp, r7
 800ac04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac08:	4770      	bx	lr
	...

0800ac0c <_ZN12SimpleString24deallocateInternalBufferEv>:

void SimpleString::deallocateInternalBuffer()
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b082      	sub	sp, #8
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
    if (buffer_) {
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d00d      	beq.n	800ac38 <_ZN12SimpleString24deallocateInternalBufferEv+0x2c>
        deallocStringBuffer(buffer_, bufferSize_, __FILE__, __LINE__);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6818      	ldr	r0, [r3, #0]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6859      	ldr	r1, [r3, #4]
 800ac24:	23ee      	movs	r3, #238	; 0xee
 800ac26:	4a06      	ldr	r2, [pc, #24]	; (800ac40 <_ZN12SimpleString24deallocateInternalBufferEv+0x34>)
 800ac28:	f7ff fe3a 	bl	800a8a0 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
        buffer_ = NULLPTR;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	601a      	str	r2, [r3, #0]
        bufferSize_ = 0;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2200      	movs	r2, #0
 800ac36:	605a      	str	r2, [r3, #4]
    }
}
 800ac38:	bf00      	nop
 800ac3a:	3708      	adds	r7, #8
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}
 800ac40:	08022138 	.word	0x08022138

0800ac44 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>:

void SimpleString::setInternalBufferAsEmptyString()
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b082      	sub	sp, #8
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
    deallocateInternalBuffer();
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f7ff ffdd 	bl	800ac0c <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = 1;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2201      	movs	r2, #1
 800ac56:	605a      	str	r2, [r3, #4]
    buffer_ = getEmptyString();
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f7ff fe37 	bl	800a8cc <_ZNK12SimpleString14getEmptyStringEv>
 800ac5e:	4602      	mov	r2, r0
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	601a      	str	r2, [r3, #0]
}
 800ac64:	bf00      	nop
 800ac66:	3708      	adds	r7, #8
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer, size_t bufferSize)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b084      	sub	sp, #16
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	60f8      	str	r0, [r7, #12]
 800ac74:	60b9      	str	r1, [r7, #8]
 800ac76:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800ac78:	68f8      	ldr	r0, [r7, #12]
 800ac7a:	f7ff ffc7 	bl	800ac0c <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	605a      	str	r2, [r3, #4]
    buffer_ = copyToNewBuffer(otherBuffer, bufferSize_);
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	4619      	mov	r1, r3
 800ac8a:	68b8      	ldr	r0, [r7, #8]
 800ac8c:	f000 fe12 	bl	800b8b4 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800ac90:	4602      	mov	r2, r0
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	601a      	str	r2, [r3, #0]
}
 800ac96:	bf00      	nop
 800ac98:	3710      	adds	r7, #16
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
	...

0800aca0 <_ZN12SimpleString28setInternalBufferToNewBufferEj>:

void SimpleString::setInternalBufferToNewBuffer(size_t bufferSize)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b082      	sub	sp, #8
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	6039      	str	r1, [r7, #0]
    deallocateInternalBuffer();
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f7ff ffae 	bl	800ac0c <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	683a      	ldr	r2, [r7, #0]
 800acb4:	605a      	str	r2, [r3, #4]
    buffer_ = allocStringBuffer(bufferSize_, __FILE__, __LINE__);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	f240 1209 	movw	r2, #265	; 0x109
 800acbe:	4907      	ldr	r1, [pc, #28]	; (800acdc <_ZN12SimpleString28setInternalBufferToNewBufferEj+0x3c>)
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7ff fdd9 	bl	800a878 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800acc6:	4602      	mov	r2, r0
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	2200      	movs	r2, #0
 800acd2:	701a      	strb	r2, [r3, #0]
}
 800acd4:	bf00      	nop
 800acd6:	3708      	adds	r7, #8
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}
 800acdc:	08022138 	.word	0x08022138

0800ace0 <_ZN12SimpleString19setInternalBufferToEPcj>:

void SimpleString::setInternalBufferTo(char* buffer, size_t bufferSize)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b084      	sub	sp, #16
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800acec:	68f8      	ldr	r0, [r7, #12]
 800acee:	f7ff ff8d 	bl	800ac0c <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	605a      	str	r2, [r3, #4]
    buffer_ = buffer;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	68ba      	ldr	r2, [r7, #8]
 800acfc:	601a      	str	r2, [r3, #0]
}
 800acfe:	bf00      	nop
 800ad00:	3710      	adds	r7, #16
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}

0800ad06 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>:

void SimpleString::copyBufferToNewInternalBuffer(const SimpleString& otherBuffer)
{
 800ad06:	b590      	push	{r4, r7, lr}
 800ad08:	b083      	sub	sp, #12
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	6078      	str	r0, [r7, #4]
 800ad0e:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer.buffer_, otherBuffer.size() + 1);
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	681c      	ldr	r4, [r3, #0]
 800ad14:	6838      	ldr	r0, [r7, #0]
 800ad16:	f000 fbc1 	bl	800b49c <_ZNK12SimpleString4sizeEv>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	3301      	adds	r3, #1
 800ad1e:	461a      	mov	r2, r3
 800ad20:	4621      	mov	r1, r4
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f7ff ffa2 	bl	800ac6c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800ad28:	bf00      	nop
 800ad2a:	370c      	adds	r7, #12
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd90      	pop	{r4, r7, pc}

0800ad30 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer, StrLen(otherBuffer) + 1);
 800ad3a:	6838      	ldr	r0, [r7, #0]
 800ad3c:	f7ff fe76 	bl	800aa2c <_ZN12SimpleString6StrLenEPKc>
 800ad40:	4603      	mov	r3, r0
 800ad42:	3301      	adds	r3, #1
 800ad44:	461a      	mov	r2, r3
 800ad46:	6839      	ldr	r1, [r7, #0]
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f7ff ff8f 	bl	800ac6c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800ad4e:	bf00      	nop
 800ad50:	3708      	adds	r7, #8
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}

0800ad56 <_ZNK12SimpleString9getBufferEv>:

const char* SimpleString::getBuffer() const
{
 800ad56:	b480      	push	{r7}
 800ad58:	b083      	sub	sp, #12
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	6078      	str	r0, [r7, #4]
    return buffer_;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	370c      	adds	r7, #12
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr

0800ad6e <_ZN12SimpleStringC1EPKc>:

SimpleString::SimpleString(const char *otherBuffer)
 800ad6e:	b580      	push	{r7, lr}
 800ad70:	b082      	sub	sp, #8
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	6078      	str	r0, [r7, #4]
 800ad76:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	601a      	str	r2, [r3, #0]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2200      	movs	r2, #0
 800ad82:	605a      	str	r2, [r3, #4]
{
    if (otherBuffer == NULLPTR)
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d103      	bne.n	800ad92 <_ZN12SimpleStringC1EPKc+0x24>
        setInternalBufferAsEmptyString();
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f7ff ff5a 	bl	800ac44 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800ad90:	e003      	b.n	800ad9a <_ZN12SimpleStringC1EPKc+0x2c>
    else
        copyBufferToNewInternalBuffer(otherBuffer);
 800ad92:	6839      	ldr	r1, [r7, #0]
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f7ff ffcb 	bl	800ad30 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3708      	adds	r7, #8
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <_ZN12SimpleStringC1EPKcj>:

SimpleString::SimpleString(const char *other, size_t repeatCount)
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b088      	sub	sp, #32
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	60f8      	str	r0, [r7, #12]
 800adac:	60b9      	str	r1, [r7, #8]
 800adae:	607a      	str	r2, [r7, #4]
    : buffer_(NULLPTR), bufferSize_(0)
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2200      	movs	r2, #0
 800adb4:	601a      	str	r2, [r3, #0]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2200      	movs	r2, #0
 800adba:	605a      	str	r2, [r3, #4]
{
    size_t otherStringLength = StrLen(other);
 800adbc:	68b8      	ldr	r0, [r7, #8]
 800adbe:	f7ff fe35 	bl	800aa2c <_ZN12SimpleString6StrLenEPKc>
 800adc2:	6178      	str	r0, [r7, #20]
    setInternalBufferToNewBuffer(otherStringLength * repeatCount + 1);
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	fb02 f303 	mul.w	r3, r2, r3
 800adcc:	3301      	adds	r3, #1
 800adce:	4619      	mov	r1, r3
 800add0:	68f8      	ldr	r0, [r7, #12]
 800add2:	f7ff ff65 	bl	800aca0 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    char* next = buffer_;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800addc:	2300      	movs	r3, #0
 800adde:	61bb      	str	r3, [r7, #24]
 800ade0:	69ba      	ldr	r2, [r7, #24]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d20e      	bcs.n	800ae06 <_ZN12SimpleStringC1EPKcj+0x62>
        StrNCpy(next, other, otherStringLength + 1);
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	3301      	adds	r3, #1
 800adec:	461a      	mov	r2, r3
 800adee:	68b9      	ldr	r1, [r7, #8]
 800adf0:	69f8      	ldr	r0, [r7, #28]
 800adf2:	f7ff fe66 	bl	800aac2 <_ZN12SimpleString7StrNCpyEPcPKcj>
        next += otherStringLength;
 800adf6:	69fa      	ldr	r2, [r7, #28]
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	4413      	add	r3, r2
 800adfc:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800adfe:	69bb      	ldr	r3, [r7, #24]
 800ae00:	3301      	adds	r3, #1
 800ae02:	61bb      	str	r3, [r7, #24]
 800ae04:	e7ec      	b.n	800ade0 <_ZN12SimpleStringC1EPKcj+0x3c>
    }
    *next = 0;
 800ae06:	69fb      	ldr	r3, [r7, #28]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	701a      	strb	r2, [r3, #0]
}
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3720      	adds	r7, #32
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}

0800ae16 <_ZN12SimpleStringC1ERKS_>:

SimpleString::SimpleString(const SimpleString& other)
 800ae16:	b580      	push	{r7, lr}
 800ae18:	b082      	sub	sp, #8
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
 800ae1e:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	601a      	str	r2, [r3, #0]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	605a      	str	r2, [r3, #4]
{
    copyBufferToNewInternalBuffer(other.getBuffer());
 800ae2c:	6838      	ldr	r0, [r7, #0]
 800ae2e:	f7ff ff92 	bl	800ad56 <_ZNK12SimpleString9getBufferEv>
 800ae32:	4603      	mov	r3, r0
 800ae34:	4619      	mov	r1, r3
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f7ff ff7a 	bl	800ad30 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3708      	adds	r7, #8
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}

0800ae46 <_ZN12SimpleStringaSERKS_>:

SimpleString& SimpleString::operator=(const SimpleString& other)
{
 800ae46:	b580      	push	{r7, lr}
 800ae48:	b082      	sub	sp, #8
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	6078      	str	r0, [r7, #4]
 800ae4e:	6039      	str	r1, [r7, #0]
    if (this != &other)
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d003      	beq.n	800ae60 <_ZN12SimpleStringaSERKS_+0x1a>
        copyBufferToNewInternalBuffer(other);
 800ae58:	6839      	ldr	r1, [r7, #0]
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f7ff ff53 	bl	800ad06 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>
    return *this;
 800ae60:	687b      	ldr	r3, [r7, #4]
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3708      	adds	r7, #8
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}

0800ae6a <_ZNK12SimpleString8containsERKS_>:

bool SimpleString::contains(const SimpleString& other) const
{
 800ae6a:	b590      	push	{r4, r7, lr}
 800ae6c:	b083      	sub	sp, #12
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
 800ae72:	6039      	str	r1, [r7, #0]
    return StrStr(getBuffer(), other.getBuffer()) != NULLPTR;
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f7ff ff6e 	bl	800ad56 <_ZNK12SimpleString9getBufferEv>
 800ae7a:	4604      	mov	r4, r0
 800ae7c:	6838      	ldr	r0, [r7, #0]
 800ae7e:	f7ff ff6a 	bl	800ad56 <_ZNK12SimpleString9getBufferEv>
 800ae82:	4603      	mov	r3, r0
 800ae84:	4619      	mov	r1, r3
 800ae86:	4620      	mov	r0, r4
 800ae88:	f7ff fe50 	bl	800ab2c <_ZN12SimpleString6StrStrEPKcS1_>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	bf14      	ite	ne
 800ae92:	2301      	movne	r3, #1
 800ae94:	2300      	moveq	r3, #0
 800ae96:	b2db      	uxtb	r3, r3
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	370c      	adds	r7, #12
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd90      	pop	{r4, r7, pc}

0800aea0 <_ZNK12SimpleString14containsNoCaseERKS_>:

bool SimpleString::containsNoCase(const SimpleString& other) const
{
 800aea0:	b590      	push	{r4, r7, lr}
 800aea2:	b087      	sub	sp, #28
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
    return lowerCase().contains(other.lowerCase());
 800aeaa:	f107 0308 	add.w	r3, r7, #8
 800aeae:	6879      	ldr	r1, [r7, #4]
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f000 fabb 	bl	800b42c <_ZNK12SimpleString9lowerCaseEv>
 800aeb6:	f107 0310 	add.w	r3, r7, #16
 800aeba:	6839      	ldr	r1, [r7, #0]
 800aebc:	4618      	mov	r0, r3
 800aebe:	f000 fab5 	bl	800b42c <_ZNK12SimpleString9lowerCaseEv>
 800aec2:	f107 0210 	add.w	r2, r7, #16
 800aec6:	f107 0308 	add.w	r3, r7, #8
 800aeca:	4611      	mov	r1, r2
 800aecc:	4618      	mov	r0, r3
 800aece:	f7ff ffcc 	bl	800ae6a <_ZNK12SimpleString8containsERKS_>
 800aed2:	4603      	mov	r3, r0
 800aed4:	461c      	mov	r4, r3
 800aed6:	bf00      	nop
 800aed8:	f107 0310 	add.w	r3, r7, #16
 800aedc:	4618      	mov	r0, r3
 800aede:	f000 fafe 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800aee2:	f107 0308 	add.w	r3, r7, #8
 800aee6:	4618      	mov	r0, r3
 800aee8:	f000 faf9 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800aeec:	4623      	mov	r3, r4
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	371c      	adds	r7, #28
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd90      	pop	{r4, r7, pc}

0800aef6 <_ZNK12SimpleString10startsWithERKS_>:

bool SimpleString::startsWith(const SimpleString& other) const
{
 800aef6:	b590      	push	{r4, r7, lr}
 800aef8:	b083      	sub	sp, #12
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	6078      	str	r0, [r7, #4]
 800aefe:	6039      	str	r1, [r7, #0]
    if (other.size() == 0) return true;
 800af00:	6838      	ldr	r0, [r7, #0]
 800af02:	f000 facb 	bl	800b49c <_ZNK12SimpleString4sizeEv>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	bf0c      	ite	eq
 800af0c:	2301      	moveq	r3, #1
 800af0e:	2300      	movne	r3, #0
 800af10:	b2db      	uxtb	r3, r3
 800af12:	2b00      	cmp	r3, #0
 800af14:	d001      	beq.n	800af1a <_ZNK12SimpleString10startsWithERKS_+0x24>
 800af16:	2301      	movs	r3, #1
 800af18:	e022      	b.n	800af60 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else if (size() == 0) return false;
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 fabe 	bl	800b49c <_ZNK12SimpleString4sizeEv>
 800af20:	4603      	mov	r3, r0
 800af22:	2b00      	cmp	r3, #0
 800af24:	bf0c      	ite	eq
 800af26:	2301      	moveq	r3, #1
 800af28:	2300      	movne	r3, #0
 800af2a:	b2db      	uxtb	r3, r3
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d001      	beq.n	800af34 <_ZNK12SimpleString10startsWithERKS_+0x3e>
 800af30:	2300      	movs	r3, #0
 800af32:	e015      	b.n	800af60 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else return StrStr(getBuffer(), other.getBuffer()) == getBuffer();
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f7ff ff0e 	bl	800ad56 <_ZNK12SimpleString9getBufferEv>
 800af3a:	4604      	mov	r4, r0
 800af3c:	6838      	ldr	r0, [r7, #0]
 800af3e:	f7ff ff0a 	bl	800ad56 <_ZNK12SimpleString9getBufferEv>
 800af42:	4603      	mov	r3, r0
 800af44:	4619      	mov	r1, r3
 800af46:	4620      	mov	r0, r4
 800af48:	f7ff fdf0 	bl	800ab2c <_ZN12SimpleString6StrStrEPKcS1_>
 800af4c:	4604      	mov	r4, r0
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f7ff ff01 	bl	800ad56 <_ZNK12SimpleString9getBufferEv>
 800af54:	4603      	mov	r3, r0
 800af56:	429c      	cmp	r4, r3
 800af58:	bf0c      	ite	eq
 800af5a:	2301      	moveq	r3, #1
 800af5c:	2300      	movne	r3, #0
 800af5e:	b2db      	uxtb	r3, r3
}
 800af60:	4618      	mov	r0, r3
 800af62:	370c      	adds	r7, #12
 800af64:	46bd      	mov	sp, r7
 800af66:	bd90      	pop	{r4, r7, pc}

0800af68 <_ZNK12SimpleString8endsWithERKS_>:

bool SimpleString::endsWith(const SimpleString& other) const
{
 800af68:	b590      	push	{r4, r7, lr}
 800af6a:	b085      	sub	sp, #20
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
    size_t length = size();
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 fa92 	bl	800b49c <_ZNK12SimpleString4sizeEv>
 800af78:	60f8      	str	r0, [r7, #12]
    size_t other_length = other.size();
 800af7a:	6838      	ldr	r0, [r7, #0]
 800af7c:	f000 fa8e 	bl	800b49c <_ZNK12SimpleString4sizeEv>
 800af80:	60b8      	str	r0, [r7, #8]

    if (other_length == 0) return true;
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d101      	bne.n	800af8c <_ZNK12SimpleString8endsWithERKS_+0x24>
 800af88:	2301      	movs	r3, #1
 800af8a:	e020      	b.n	800afce <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length == 0) return false;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d101      	bne.n	800af96 <_ZNK12SimpleString8endsWithERKS_+0x2e>
 800af92:	2300      	movs	r3, #0
 800af94:	e01b      	b.n	800afce <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length < other_length) return false;
 800af96:	68fa      	ldr	r2, [r7, #12]
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d201      	bcs.n	800afa2 <_ZNK12SimpleString8endsWithERKS_+0x3a>
 800af9e:	2300      	movs	r3, #0
 800afa0:	e015      	b.n	800afce <_ZNK12SimpleString8endsWithERKS_+0x66>

    return StrCmp(getBuffer() + length - other_length, other.getBuffer()) == 0;
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f7ff fed7 	bl	800ad56 <_ZNK12SimpleString9getBufferEv>
 800afa8:	4601      	mov	r1, r0
 800afaa:	68fa      	ldr	r2, [r7, #12]
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	1ad3      	subs	r3, r2, r3
 800afb0:	18cc      	adds	r4, r1, r3
 800afb2:	6838      	ldr	r0, [r7, #0]
 800afb4:	f7ff fecf 	bl	800ad56 <_ZNK12SimpleString9getBufferEv>
 800afb8:	4603      	mov	r3, r0
 800afba:	4619      	mov	r1, r3
 800afbc:	4620      	mov	r0, r4
 800afbe:	f7ff fd13 	bl	800a9e8 <_ZN12SimpleString6StrCmpEPKcS1_>
 800afc2:	4603      	mov	r3, r0
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	bf0c      	ite	eq
 800afc8:	2301      	moveq	r3, #1
 800afca:	2300      	movne	r3, #0
 800afcc:	b2db      	uxtb	r3, r3
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3714      	adds	r7, #20
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd90      	pop	{r4, r7, pc}

0800afd6 <_ZNK12SimpleString5countERKS_>:

size_t SimpleString::count(const SimpleString& substr) const
{
 800afd6:	b580      	push	{r7, lr}
 800afd8:	b086      	sub	sp, #24
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6078      	str	r0, [r7, #4]
 800afde:	6039      	str	r1, [r7, #0]
    size_t num = 0;
 800afe0:	2300      	movs	r3, #0
 800afe2:	617b      	str	r3, [r7, #20]
    const char* str = getBuffer();
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f7ff feb6 	bl	800ad56 <_ZNK12SimpleString9getBufferEv>
 800afea:	6138      	str	r0, [r7, #16]
    const char* strpart = NULL;
 800afec:	2300      	movs	r3, #0
 800afee:	60fb      	str	r3, [r7, #12]
    if (*str){
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	781b      	ldrb	r3, [r3, #0]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d008      	beq.n	800b00a <_ZNK12SimpleString5countERKS_+0x34>
        strpart = StrStr(str, substr.getBuffer());
 800aff8:	6838      	ldr	r0, [r7, #0]
 800affa:	f7ff feac 	bl	800ad56 <_ZNK12SimpleString9getBufferEv>
 800affe:	4603      	mov	r3, r0
 800b000:	4619      	mov	r1, r3
 800b002:	6938      	ldr	r0, [r7, #16]
 800b004:	f7ff fd92 	bl	800ab2c <_ZN12SimpleString6StrStrEPKcS1_>
 800b008:	60f8      	str	r0, [r7, #12]
    }
    while (*str && strpart) {
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d014      	beq.n	800b03c <_ZNK12SimpleString5countERKS_+0x66>
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d011      	beq.n	800b03c <_ZNK12SimpleString5countERKS_+0x66>
        str = strpart;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	613b      	str	r3, [r7, #16]
        str++;
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	3301      	adds	r3, #1
 800b020:	613b      	str	r3, [r7, #16]
        num++;
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	3301      	adds	r3, #1
 800b026:	617b      	str	r3, [r7, #20]
        strpart = StrStr(str, substr.getBuffer());
 800b028:	6838      	ldr	r0, [r7, #0]
 800b02a:	f7ff fe94 	bl	800ad56 <_ZNK12SimpleString9getBufferEv>
 800b02e:	4603      	mov	r3, r0
 800b030:	4619      	mov	r1, r3
 800b032:	6938      	ldr	r0, [r7, #16]
 800b034:	f7ff fd7a 	bl	800ab2c <_ZN12SimpleString6StrStrEPKcS1_>
 800b038:	60f8      	str	r0, [r7, #12]
    while (*str && strpart) {
 800b03a:	e7e6      	b.n	800b00a <_ZNK12SimpleString5countERKS_+0x34>
    }
    return num;
 800b03c:	697b      	ldr	r3, [r7, #20]
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3718      	adds	r7, #24
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}

0800b046 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>:

void SimpleString::split(const SimpleString& delimiter, SimpleStringCollection& col) const
{
 800b046:	b590      	push	{r4, r7, lr}
 800b048:	b091      	sub	sp, #68	; 0x44
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	60f8      	str	r0, [r7, #12]
 800b04e:	60b9      	str	r1, [r7, #8]
 800b050:	607a      	str	r2, [r7, #4]
    size_t num = count(delimiter);
 800b052:	68b9      	ldr	r1, [r7, #8]
 800b054:	68f8      	ldr	r0, [r7, #12]
 800b056:	f7ff ffbe 	bl	800afd6 <_ZNK12SimpleString5countERKS_>
 800b05a:	6378      	str	r0, [r7, #52]	; 0x34
    size_t extraEndToken = (endsWith(delimiter)) ? 0 : 1U;
 800b05c:	68b9      	ldr	r1, [r7, #8]
 800b05e:	68f8      	ldr	r0, [r7, #12]
 800b060:	f7ff ff82 	bl	800af68 <_ZNK12SimpleString8endsWithERKS_>
 800b064:	4603      	mov	r3, r0
 800b066:	2b00      	cmp	r3, #0
 800b068:	d001      	beq.n	800b06e <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x28>
 800b06a:	2300      	movs	r3, #0
 800b06c:	e000      	b.n	800b070 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x2a>
 800b06e:	2301      	movs	r3, #1
 800b070:	633b      	str	r3, [r7, #48]	; 0x30
    col.allocate(num + extraEndToken);
 800b072:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b076:	4413      	add	r3, r2
 800b078:	4619      	mov	r1, r3
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f001 f95c 	bl	800c338 <_ZN22SimpleStringCollection8allocateEj>

    const char* str = getBuffer();
 800b080:	68f8      	ldr	r0, [r7, #12]
 800b082:	f7ff fe68 	bl	800ad56 <_ZNK12SimpleString9getBufferEv>
 800b086:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char* prev;
    for (size_t i = 0; i < num; ++i) {
 800b088:	2300      	movs	r3, #0
 800b08a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b08c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b08e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b090:	429a      	cmp	r2, r3
 800b092:	d235      	bcs.n	800b100 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xba>
        prev = str;
 800b094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b096:	62fb      	str	r3, [r7, #44]	; 0x2c
        str = StrStr(str, delimiter.getBuffer()) + 1;
 800b098:	68b8      	ldr	r0, [r7, #8]
 800b09a:	f7ff fe5c 	bl	800ad56 <_ZNK12SimpleString9getBufferEv>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b0a4:	f7ff fd42 	bl	800ab2c <_ZN12SimpleString6StrStrEPKcS1_>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        col[i] = SimpleString(prev).subString(0, size_t (str - prev));
 800b0ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f001 f9db 	bl	800c46c <_ZN22SimpleStringCollectionixEj>
 800b0b6:	4604      	mov	r4, r0
 800b0b8:	f107 031c 	add.w	r3, r7, #28
 800b0bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7ff fe55 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800b0c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0c8:	1ad3      	subs	r3, r2, r3
 800b0ca:	f107 0014 	add.w	r0, r7, #20
 800b0ce:	f107 011c 	add.w	r1, r7, #28
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f000 fb0c 	bl	800b6f0 <_ZNK12SimpleString9subStringEjj>
 800b0d8:	f107 0314 	add.w	r3, r7, #20
 800b0dc:	4619      	mov	r1, r3
 800b0de:	4620      	mov	r0, r4
 800b0e0:	f7ff feb1 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 800b0e4:	f107 0314 	add.w	r3, r7, #20
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f000 f9f8 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800b0ee:	f107 031c 	add.w	r3, r7, #28
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f000 f9f3 	bl	800b4de <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < num; ++i) {
 800b0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0fa:	3301      	adds	r3, #1
 800b0fc:	63bb      	str	r3, [r7, #56]	; 0x38
 800b0fe:	e7c5      	b.n	800b08c <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x46>
    }
    if (extraEndToken) {
 800b100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b102:	2b00      	cmp	r3, #0
 800b104:	d015      	beq.n	800b132 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xec>
        col[num] = str;
 800b106:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f001 f9af 	bl	800c46c <_ZN22SimpleStringCollectionixEj>
 800b10e:	4604      	mov	r4, r0
 800b110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b114:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b116:	4618      	mov	r0, r3
 800b118:	f7ff fe29 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800b11c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b120:	4619      	mov	r1, r3
 800b122:	4620      	mov	r0, r4
 800b124:	f7ff fe8f 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 800b128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b12c:	4618      	mov	r0, r3
 800b12e:	f000 f9d6 	bl	800b4de <_ZN12SimpleStringD1Ev>
    }
}
 800b132:	bf00      	nop
 800b134:	3744      	adds	r7, #68	; 0x44
 800b136:	46bd      	mov	sp, r7
 800b138:	bd90      	pop	{r4, r7, pc}

0800b13a <_ZN12SimpleString7replaceEcc>:

void SimpleString::replace(char to, char with)
{
 800b13a:	b580      	push	{r7, lr}
 800b13c:	b084      	sub	sp, #16
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
 800b142:	460b      	mov	r3, r1
 800b144:	70fb      	strb	r3, [r7, #3]
 800b146:	4613      	mov	r3, r2
 800b148:	70bb      	strb	r3, [r7, #2]
    size_t s = size();
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 f9a6 	bl	800b49c <_ZNK12SimpleString4sizeEv>
 800b150:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < s; i++) {
 800b152:	2300      	movs	r3, #0
 800b154:	60fb      	str	r3, [r7, #12]
 800b156:	68fa      	ldr	r2, [r7, #12]
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d218      	bcs.n	800b190 <_ZN12SimpleString7replaceEcc+0x56>
        if (getBuffer()[i] == to) buffer_[i] = with;
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f7ff fdf9 	bl	800ad56 <_ZNK12SimpleString9getBufferEv>
 800b164:	4602      	mov	r2, r0
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	4413      	add	r3, r2
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	78fa      	ldrb	r2, [r7, #3]
 800b16e:	429a      	cmp	r2, r3
 800b170:	bf0c      	ite	eq
 800b172:	2301      	moveq	r3, #1
 800b174:	2300      	movne	r3, #0
 800b176:	b2db      	uxtb	r3, r3
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d005      	beq.n	800b188 <_ZN12SimpleString7replaceEcc+0x4e>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681a      	ldr	r2, [r3, #0]
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	4413      	add	r3, r2
 800b184:	78ba      	ldrb	r2, [r7, #2]
 800b186:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < s; i++) {
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	3301      	adds	r3, #1
 800b18c:	60fb      	str	r3, [r7, #12]
 800b18e:	e7e2      	b.n	800b156 <_ZN12SimpleString7replaceEcc+0x1c>
    }
}
 800b190:	bf00      	nop
 800b192:	3710      	adds	r7, #16
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <_ZN12SimpleString7replaceEPKcS1_>:

void SimpleString::replace(const char* to, const char* with)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b08e      	sub	sp, #56	; 0x38
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	60b9      	str	r1, [r7, #8]
 800b1a2:	607a      	str	r2, [r7, #4]
    size_t c = count(to);
 800b1a4:	f107 0310 	add.w	r3, r7, #16
 800b1a8:	68b9      	ldr	r1, [r7, #8]
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f7ff fddf 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800b1b0:	f107 0310 	add.w	r3, r7, #16
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	68f8      	ldr	r0, [r7, #12]
 800b1b8:	f7ff ff0d 	bl	800afd6 <_ZNK12SimpleString5countERKS_>
 800b1bc:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b1be:	f107 0310 	add.w	r3, r7, #16
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f000 f98b 	bl	800b4de <_ZN12SimpleStringD1Ev>
    if (c == 0) {
 800b1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d071      	beq.n	800b2b2 <_ZN12SimpleString7replaceEPKcS1_+0x11a>
        return;
    }
    size_t len = size();
 800b1ce:	68f8      	ldr	r0, [r7, #12]
 800b1d0:	f000 f964 	bl	800b49c <_ZNK12SimpleString4sizeEv>
 800b1d4:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t tolen = StrLen(to);
 800b1d6:	68b8      	ldr	r0, [r7, #8]
 800b1d8:	f7ff fc28 	bl	800aa2c <_ZN12SimpleString6StrLenEPKc>
 800b1dc:	6278      	str	r0, [r7, #36]	; 0x24
    size_t withlen = StrLen(with);
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f7ff fc24 	bl	800aa2c <_ZN12SimpleString6StrLenEPKc>
 800b1e4:	6238      	str	r0, [r7, #32]

    size_t newsize = len + (withlen * c) - (tolen * c) + 1;
 800b1e6:	6a3b      	ldr	r3, [r7, #32]
 800b1e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1ea:	fb02 f203 	mul.w	r2, r2, r3
 800b1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f0:	441a      	add	r2, r3
 800b1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b1f6:	fb01 f303 	mul.w	r3, r1, r3
 800b1fa:	1ad3      	subs	r3, r2, r3
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	61fb      	str	r3, [r7, #28]

    if (newsize > 1) {
 800b200:	69fb      	ldr	r3, [r7, #28]
 800b202:	2b01      	cmp	r3, #1
 800b204:	d951      	bls.n	800b2aa <_ZN12SimpleString7replaceEPKcS1_+0x112>
        char* newbuf = allocStringBuffer(newsize, __FILE__, __LINE__);
 800b206:	f240 129d 	movw	r2, #413	; 0x19d
 800b20a:	492c      	ldr	r1, [pc, #176]	; (800b2bc <_ZN12SimpleString7replaceEPKcS1_+0x124>)
 800b20c:	69f8      	ldr	r0, [r7, #28]
 800b20e:	f7ff fb33 	bl	800a878 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800b212:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0, j = 0; i < len;) {
 800b214:	2300      	movs	r3, #0
 800b216:	637b      	str	r3, [r7, #52]	; 0x34
 800b218:	2300      	movs	r3, #0
 800b21a:	633b      	str	r3, [r7, #48]	; 0x30
 800b21c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b220:	429a      	cmp	r2, r3
 800b222:	d236      	bcs.n	800b292 <_ZN12SimpleString7replaceEPKcS1_+0xfa>
            if (StrNCmp(&getBuffer()[i], to, tolen) == 0) {
 800b224:	68f8      	ldr	r0, [r7, #12]
 800b226:	f7ff fd96 	bl	800ad56 <_ZNK12SimpleString9getBufferEv>
 800b22a:	4602      	mov	r2, r0
 800b22c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b22e:	4413      	add	r3, r2
 800b230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b232:	68b9      	ldr	r1, [r7, #8]
 800b234:	4618      	mov	r0, r3
 800b236:	f7ff fc16 	bl	800aa66 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800b23a:	4603      	mov	r3, r0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	bf0c      	ite	eq
 800b240:	2301      	moveq	r3, #1
 800b242:	2300      	movne	r3, #0
 800b244:	b2db      	uxtb	r3, r3
 800b246:	2b00      	cmp	r3, #0
 800b248:	d011      	beq.n	800b26e <_ZN12SimpleString7replaceEPKcS1_+0xd6>
                StrNCpy(&newbuf[j], with, withlen + 1);
 800b24a:	69ba      	ldr	r2, [r7, #24]
 800b24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b24e:	18d0      	adds	r0, r2, r3
 800b250:	6a3b      	ldr	r3, [r7, #32]
 800b252:	3301      	adds	r3, #1
 800b254:	461a      	mov	r2, r3
 800b256:	6879      	ldr	r1, [r7, #4]
 800b258:	f7ff fc33 	bl	800aac2 <_ZN12SimpleString7StrNCpyEPcPKcj>
                j += withlen;
 800b25c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b25e:	6a3b      	ldr	r3, [r7, #32]
 800b260:	4413      	add	r3, r2
 800b262:	633b      	str	r3, [r7, #48]	; 0x30
                i += tolen;
 800b264:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b268:	4413      	add	r3, r2
 800b26a:	637b      	str	r3, [r7, #52]	; 0x34
 800b26c:	e7d6      	b.n	800b21c <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
            else {
                newbuf[j] = getBuffer()[i];
 800b26e:	68f8      	ldr	r0, [r7, #12]
 800b270:	f7ff fd71 	bl	800ad56 <_ZNK12SimpleString9getBufferEv>
 800b274:	4602      	mov	r2, r0
 800b276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b278:	441a      	add	r2, r3
 800b27a:	69b9      	ldr	r1, [r7, #24]
 800b27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b27e:	440b      	add	r3, r1
 800b280:	7812      	ldrb	r2, [r2, #0]
 800b282:	701a      	strb	r2, [r3, #0]
                j++;
 800b284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b286:	3301      	adds	r3, #1
 800b288:	633b      	str	r3, [r7, #48]	; 0x30
                i++;
 800b28a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b28c:	3301      	adds	r3, #1
 800b28e:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t i = 0, j = 0; i < len;) {
 800b290:	e7c4      	b.n	800b21c <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
        }
        newbuf[newsize - 1] = '\0';
 800b292:	69fb      	ldr	r3, [r7, #28]
 800b294:	3b01      	subs	r3, #1
 800b296:	69ba      	ldr	r2, [r7, #24]
 800b298:	4413      	add	r3, r2
 800b29a:	2200      	movs	r2, #0
 800b29c:	701a      	strb	r2, [r3, #0]
        setInternalBufferTo(newbuf, newsize);
 800b29e:	69fa      	ldr	r2, [r7, #28]
 800b2a0:	69b9      	ldr	r1, [r7, #24]
 800b2a2:	68f8      	ldr	r0, [r7, #12]
 800b2a4:	f7ff fd1c 	bl	800ace0 <_ZN12SimpleString19setInternalBufferToEPcj>
 800b2a8:	e004      	b.n	800b2b4 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
    }
    else
        setInternalBufferAsEmptyString();
 800b2aa:	68f8      	ldr	r0, [r7, #12]
 800b2ac:	f7ff fcca 	bl	800ac44 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800b2b0:	e000      	b.n	800b2b4 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
        return;
 800b2b2:	bf00      	nop
}
 800b2b4:	3738      	adds	r7, #56	; 0x38
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	08022138 	.word	0x08022138

0800b2c0 <_ZNK12SimpleString9printableEv>:

SimpleString SimpleString::printable() const
{
 800b2c0:	b590      	push	{r4, r7, lr}
 800b2c2:	b089      	sub	sp, #36	; 0x24
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
        "\\v",
        "\\f",
        "\\r"
    };

    SimpleString result;
 800b2ca:	493b      	ldr	r1, [pc, #236]	; (800b3b8 <_ZNK12SimpleString9printableEv+0xf8>)
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f7ff fd4e 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
    result.setInternalBufferToNewBuffer(getPrintableSize() + 1);
 800b2d2:	6838      	ldr	r0, [r7, #0]
 800b2d4:	f000 f876 	bl	800b3c4 <_ZNK12SimpleString16getPrintableSizeEv>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	3301      	adds	r3, #1
 800b2dc:	4619      	mov	r1, r3
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f7ff fcde 	bl	800aca0 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    size_t str_size = size();
 800b2e4:	6838      	ldr	r0, [r7, #0]
 800b2e6:	f000 f8d9 	bl	800b49c <_ZNK12SimpleString4sizeEv>
 800b2ea:	6178      	str	r0, [r7, #20]
    size_t j = 0;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	61bb      	str	r3, [r7, #24]
 800b2f4:	69ba      	ldr	r2, [r7, #24]
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	d252      	bcs.n	800b3a2 <_ZNK12SimpleString9printableEv+0xe2>
    {
        char c = buffer_[i];
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	69bb      	ldr	r3, [r7, #24]
 800b302:	4413      	add	r3, r2
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	74fb      	strb	r3, [r7, #19]
        if (isControlWithShortEscapeSequence(c))
 800b308:	7cfb      	ldrb	r3, [r7, #19]
 800b30a:	4618      	mov	r0, r3
 800b30c:	f000 fb43 	bl	800b996 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800b310:	4603      	mov	r3, r0
 800b312:	2b00      	cmp	r3, #0
 800b314:	d012      	beq.n	800b33c <_ZNK12SimpleString9printableEv+0x7c>
        {
            StrNCpy(&result.buffer_[j], shortEscapeCodes[(unsigned char)(c - '\a')], 2);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681a      	ldr	r2, [r3, #0]
 800b31a:	69fb      	ldr	r3, [r7, #28]
 800b31c:	18d0      	adds	r0, r2, r3
 800b31e:	7cfb      	ldrb	r3, [r7, #19]
 800b320:	3b07      	subs	r3, #7
 800b322:	b2db      	uxtb	r3, r3
 800b324:	461a      	mov	r2, r3
 800b326:	4b25      	ldr	r3, [pc, #148]	; (800b3bc <_ZNK12SimpleString9printableEv+0xfc>)
 800b328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b32c:	2202      	movs	r2, #2
 800b32e:	4619      	mov	r1, r3
 800b330:	f7ff fbc7 	bl	800aac2 <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 2;
 800b334:	69fb      	ldr	r3, [r7, #28]
 800b336:	3302      	adds	r3, #2
 800b338:	61fb      	str	r3, [r7, #28]
 800b33a:	e02e      	b.n	800b39a <_ZNK12SimpleString9printableEv+0xda>
        }
        else if (isControl(c))
 800b33c:	7cfb      	ldrb	r3, [r7, #19]
 800b33e:	4618      	mov	r0, r3
 800b340:	f000 fb15 	bl	800b96e <_ZN12SimpleString9isControlEc>
 800b344:	4603      	mov	r3, r0
 800b346:	2b00      	cmp	r3, #0
 800b348:	d01e      	beq.n	800b388 <_ZNK12SimpleString9printableEv+0xc8>
        {
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800b34a:	7cfa      	ldrb	r2, [r7, #19]
 800b34c:	f107 0308 	add.w	r3, r7, #8
 800b350:	491b      	ldr	r1, [pc, #108]	; (800b3c0 <_ZNK12SimpleString9printableEv+0x100>)
 800b352:	4618      	mov	r0, r3
 800b354:	f000 fdca 	bl	800beec <_Z16StringFromFormatPKcz>
            StrNCpy(&result.buffer_[j], hexEscapeCode.asCharString(), 4);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681a      	ldr	r2, [r3, #0]
 800b35c:	69fb      	ldr	r3, [r7, #28]
 800b35e:	18d4      	adds	r4, r2, r3
 800b360:	f107 0308 	add.w	r3, r7, #8
 800b364:	4618      	mov	r0, r3
 800b366:	f000 f88d 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2204      	movs	r2, #4
 800b36e:	4619      	mov	r1, r3
 800b370:	4620      	mov	r0, r4
 800b372:	f7ff fba6 	bl	800aac2 <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 4;
 800b376:	69fb      	ldr	r3, [r7, #28]
 800b378:	3304      	adds	r3, #4
 800b37a:	61fb      	str	r3, [r7, #28]
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800b37c:	f107 0308 	add.w	r3, r7, #8
 800b380:	4618      	mov	r0, r3
 800b382:	f000 f8ac 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800b386:	e008      	b.n	800b39a <_ZNK12SimpleString9printableEv+0xda>
        }
        else
        {
            result.buffer_[j] = c;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681a      	ldr	r2, [r3, #0]
 800b38c:	69fb      	ldr	r3, [r7, #28]
 800b38e:	4413      	add	r3, r2
 800b390:	7cfa      	ldrb	r2, [r7, #19]
 800b392:	701a      	strb	r2, [r3, #0]
            j++;
 800b394:	69fb      	ldr	r3, [r7, #28]
 800b396:	3301      	adds	r3, #1
 800b398:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800b39a:	69bb      	ldr	r3, [r7, #24]
 800b39c:	3301      	adds	r3, #1
 800b39e:	61bb      	str	r3, [r7, #24]
 800b3a0:	e7a8      	b.n	800b2f4 <_ZNK12SimpleString9printableEv+0x34>
        }
    }
    result.buffer_[j] = 0;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681a      	ldr	r2, [r3, #0]
 800b3a6:	69fb      	ldr	r3, [r7, #28]
 800b3a8:	4413      	add	r3, r2
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	701a      	strb	r2, [r3, #0]

    return result;
 800b3ae:	bf00      	nop
}
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	3724      	adds	r7, #36	; 0x24
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd90      	pop	{r4, r7, pc}
 800b3b8:	080221f8 	.word	0x080221f8
 800b3bc:	2000006c 	.word	0x2000006c
 800b3c0:	080221fc 	.word	0x080221fc

0800b3c4 <_ZNK12SimpleString16getPrintableSizeEv>:

size_t SimpleString::getPrintableSize() const
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b086      	sub	sp, #24
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
    size_t str_size = size();
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f000 f865 	bl	800b49c <_ZNK12SimpleString4sizeEv>
 800b3d2:	60f8      	str	r0, [r7, #12]
    size_t printable_str_size = str_size;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < str_size; i++)
 800b3d8:	2300      	movs	r3, #0
 800b3da:	613b      	str	r3, [r7, #16]
 800b3dc:	693a      	ldr	r2, [r7, #16]
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d21e      	bcs.n	800b422 <_ZNK12SimpleString16getPrintableSizeEv+0x5e>
    {
        char c = buffer_[i];
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	4413      	add	r3, r2
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	72fb      	strb	r3, [r7, #11]
        if (isControlWithShortEscapeSequence(c))
 800b3f0:	7afb      	ldrb	r3, [r7, #11]
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f000 facf 	bl	800b996 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d003      	beq.n	800b406 <_ZNK12SimpleString16getPrintableSizeEv+0x42>
        {
            printable_str_size += 1;
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	3301      	adds	r3, #1
 800b402:	617b      	str	r3, [r7, #20]
 800b404:	e009      	b.n	800b41a <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        }
        else if (isControl(c))
 800b406:	7afb      	ldrb	r3, [r7, #11]
 800b408:	4618      	mov	r0, r3
 800b40a:	f000 fab0 	bl	800b96e <_ZN12SimpleString9isControlEc>
 800b40e:	4603      	mov	r3, r0
 800b410:	2b00      	cmp	r3, #0
 800b412:	d002      	beq.n	800b41a <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        {
            printable_str_size += 3;
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	3303      	adds	r3, #3
 800b418:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < str_size; i++)
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	3301      	adds	r3, #1
 800b41e:	613b      	str	r3, [r7, #16]
 800b420:	e7dc      	b.n	800b3dc <_ZNK12SimpleString16getPrintableSizeEv+0x18>
        }
    }

    return printable_str_size;
 800b422:	697b      	ldr	r3, [r7, #20]
}
 800b424:	4618      	mov	r0, r3
 800b426:	3718      	adds	r7, #24
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <_ZNK12SimpleString9lowerCaseEv>:

SimpleString SimpleString::lowerCase() const
{
 800b42c:	b590      	push	{r4, r7, lr}
 800b42e:	b085      	sub	sp, #20
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	6039      	str	r1, [r7, #0]
    SimpleString str(*this);
 800b436:	6839      	ldr	r1, [r7, #0]
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f7ff fcec 	bl	800ae16 <_ZN12SimpleStringC1ERKS_>

    size_t str_size = str.size();
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f000 f82c 	bl	800b49c <_ZNK12SimpleString4sizeEv>
 800b444:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < str_size; i++)
 800b446:	2300      	movs	r3, #0
 800b448:	60fb      	str	r3, [r7, #12]
 800b44a:	68fa      	ldr	r2, [r7, #12]
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	429a      	cmp	r2, r3
 800b450:	d213      	bcs.n	800b47a <_ZNK12SimpleString9lowerCaseEv+0x4e>
        str.buffer_[i] = ToLower(str.getBuffer()[i]);
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f7ff fc7f 	bl	800ad56 <_ZNK12SimpleString9getBufferEv>
 800b458:	4602      	mov	r2, r0
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	4413      	add	r3, r2
 800b45e:	7819      	ldrb	r1, [r3, #0]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681a      	ldr	r2, [r3, #0]
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	18d4      	adds	r4, r2, r3
 800b468:	4608      	mov	r0, r1
 800b46a:	f7ff fb8a 	bl	800ab82 <_ZN12SimpleString7ToLowerEc>
 800b46e:	4603      	mov	r3, r0
 800b470:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < str_size; i++)
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	3301      	adds	r3, #1
 800b476:	60fb      	str	r3, [r7, #12]
 800b478:	e7e7      	b.n	800b44a <_ZNK12SimpleString9lowerCaseEv+0x1e>

    return str;
 800b47a:	bf00      	nop
}
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	3714      	adds	r7, #20
 800b480:	46bd      	mov	sp, r7
 800b482:	bd90      	pop	{r4, r7, pc}

0800b484 <_ZNK12SimpleString12asCharStringEv>:

const char *SimpleString::asCharString() const
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
    return getBuffer();
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f7ff fc62 	bl	800ad56 <_ZNK12SimpleString9getBufferEv>
 800b492:	4603      	mov	r3, r0
}
 800b494:	4618      	mov	r0, r3
 800b496:	3708      	adds	r7, #8
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <_ZNK12SimpleString4sizeEv>:

size_t SimpleString::size() const
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b082      	sub	sp, #8
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
    return StrLen(getBuffer());
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f7ff fc56 	bl	800ad56 <_ZNK12SimpleString9getBufferEv>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f7ff fabd 	bl	800aa2c <_ZN12SimpleString6StrLenEPKc>
 800b4b2:	4603      	mov	r3, r0
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3708      	adds	r7, #8
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <_ZNK12SimpleString7isEmptyEv>:

bool SimpleString::isEmpty() const
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b082      	sub	sp, #8
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
    return size() == 0;
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f7ff ffe9 	bl	800b49c <_ZNK12SimpleString4sizeEv>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	bf0c      	ite	eq
 800b4d0:	2301      	moveq	r3, #1
 800b4d2:	2300      	movne	r3, #0
 800b4d4:	b2db      	uxtb	r3, r3
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3708      	adds	r7, #8
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}

0800b4de <_ZN12SimpleStringD1Ev>:

SimpleString::~SimpleString()
 800b4de:	b580      	push	{r7, lr}
 800b4e0:	b082      	sub	sp, #8
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	6078      	str	r0, [r7, #4]
{
    deallocateInternalBuffer();
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f7ff fb90 	bl	800ac0c <_ZN12SimpleString24deallocateInternalBufferEv>
}
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3708      	adds	r7, #8
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}

0800b4f6 <_ZeqRK12SimpleStringS1_>:

bool operator==(const SimpleString& left, const SimpleString& right)
{
 800b4f6:	b590      	push	{r4, r7, lr}
 800b4f8:	b083      	sub	sp, #12
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	6078      	str	r0, [r7, #4]
 800b4fe:	6039      	str	r1, [r7, #0]
    return 0 == SimpleString::StrCmp(left.asCharString(), right.asCharString());
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f7ff ffbf 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 800b506:	4604      	mov	r4, r0
 800b508:	6838      	ldr	r0, [r7, #0]
 800b50a:	f7ff ffbb 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 800b50e:	4603      	mov	r3, r0
 800b510:	4619      	mov	r1, r3
 800b512:	4620      	mov	r0, r4
 800b514:	f7ff fa68 	bl	800a9e8 <_ZN12SimpleString6StrCmpEPKcS1_>
 800b518:	4603      	mov	r3, r0
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	bf0c      	ite	eq
 800b51e:	2301      	moveq	r3, #1
 800b520:	2300      	movne	r3, #0
 800b522:	b2db      	uxtb	r3, r3
}
 800b524:	4618      	mov	r0, r3
 800b526:	370c      	adds	r7, #12
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd90      	pop	{r4, r7, pc}

0800b52c <_ZNK12SimpleString12equalsNoCaseERKS_>:

bool SimpleString::equalsNoCase(const SimpleString& str) const
{
 800b52c:	b590      	push	{r4, r7, lr}
 800b52e:	b087      	sub	sp, #28
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
    return lowerCase() == str.lowerCase();
 800b536:	f107 0308 	add.w	r3, r7, #8
 800b53a:	6879      	ldr	r1, [r7, #4]
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7ff ff75 	bl	800b42c <_ZNK12SimpleString9lowerCaseEv>
 800b542:	f107 0310 	add.w	r3, r7, #16
 800b546:	6839      	ldr	r1, [r7, #0]
 800b548:	4618      	mov	r0, r3
 800b54a:	f7ff ff6f 	bl	800b42c <_ZNK12SimpleString9lowerCaseEv>
 800b54e:	f107 0210 	add.w	r2, r7, #16
 800b552:	f107 0308 	add.w	r3, r7, #8
 800b556:	4611      	mov	r1, r2
 800b558:	4618      	mov	r0, r3
 800b55a:	f7ff ffcc 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 800b55e:	4603      	mov	r3, r0
 800b560:	461c      	mov	r4, r3
 800b562:	f107 0310 	add.w	r3, r7, #16
 800b566:	4618      	mov	r0, r3
 800b568:	f7ff ffb9 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800b56c:	f107 0308 	add.w	r3, r7, #8
 800b570:	4618      	mov	r0, r3
 800b572:	f7ff ffb4 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800b576:	4623      	mov	r3, r4
}
 800b578:	4618      	mov	r0, r3
 800b57a:	371c      	adds	r7, #28
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd90      	pop	{r4, r7, pc}

0800b580 <_ZneRK12SimpleStringS1_>:


bool operator!=(const SimpleString& left, const SimpleString& right)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b082      	sub	sp, #8
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	6039      	str	r1, [r7, #0]
    return !(left == right);
 800b58a:	6839      	ldr	r1, [r7, #0]
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f7ff ffb2 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 800b592:	4603      	mov	r3, r0
 800b594:	f083 0301 	eor.w	r3, r3, #1
 800b598:	b2db      	uxtb	r3, r3
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3708      	adds	r7, #8
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <_ZNK12SimpleStringplERKS_>:

SimpleString SimpleString::operator+(const SimpleString& rhs) const
{
 800b5a2:	b580      	push	{r7, lr}
 800b5a4:	b084      	sub	sp, #16
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	60f8      	str	r0, [r7, #12]
 800b5aa:	60b9      	str	r1, [r7, #8]
 800b5ac:	607a      	str	r2, [r7, #4]
    SimpleString t(getBuffer());
 800b5ae:	68b8      	ldr	r0, [r7, #8]
 800b5b0:	f7ff fbd1 	bl	800ad56 <_ZNK12SimpleString9getBufferEv>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	f7ff fbd8 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
    t += rhs.getBuffer();
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f7ff fbc9 	bl	800ad56 <_ZNK12SimpleString9getBufferEv>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	4619      	mov	r1, r3
 800b5c8:	68f8      	ldr	r0, [r7, #12]
 800b5ca:	f000 f817 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    return t;
 800b5ce:	bf00      	nop
}
 800b5d0:	68f8      	ldr	r0, [r7, #12]
 800b5d2:	3710      	adds	r7, #16
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}

0800b5d8 <_ZN12SimpleStringpLERKS_>:

SimpleString& SimpleString::operator+=(const SimpleString& rhs)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b082      	sub	sp, #8
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]
    return operator+=(rhs.getBuffer());
 800b5e2:	6838      	ldr	r0, [r7, #0]
 800b5e4:	f7ff fbb7 	bl	800ad56 <_ZNK12SimpleString9getBufferEv>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 f805 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
 800b5f2:	4603      	mov	r3, r0
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3708      	adds	r7, #8
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}

0800b5fc <_ZN12SimpleStringpLEPKc>:

SimpleString& SimpleString::operator+=(const char* rhs)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b086      	sub	sp, #24
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	6039      	str	r1, [r7, #0]
    size_t originalSize = this->size();
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f7ff ff48 	bl	800b49c <_ZNK12SimpleString4sizeEv>
 800b60c:	6178      	str	r0, [r7, #20]
    size_t additionalStringSize = StrLen(rhs) + 1;
 800b60e:	6838      	ldr	r0, [r7, #0]
 800b610:	f7ff fa0c 	bl	800aa2c <_ZN12SimpleString6StrLenEPKc>
 800b614:	4603      	mov	r3, r0
 800b616:	3301      	adds	r3, #1
 800b618:	613b      	str	r3, [r7, #16]
    size_t sizeOfNewString = originalSize + additionalStringSize;
 800b61a:	697a      	ldr	r2, [r7, #20]
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	4413      	add	r3, r2
 800b620:	60fb      	str	r3, [r7, #12]
    char* tbuffer = copyToNewBuffer(this->getBuffer(), sizeOfNewString);
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f7ff fb97 	bl	800ad56 <_ZNK12SimpleString9getBufferEv>
 800b628:	4603      	mov	r3, r0
 800b62a:	68f9      	ldr	r1, [r7, #12]
 800b62c:	4618      	mov	r0, r3
 800b62e:	f000 f941 	bl	800b8b4 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800b632:	60b8      	str	r0, [r7, #8]
    StrNCpy(tbuffer + originalSize, rhs, additionalStringSize);
 800b634:	68ba      	ldr	r2, [r7, #8]
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	4413      	add	r3, r2
 800b63a:	693a      	ldr	r2, [r7, #16]
 800b63c:	6839      	ldr	r1, [r7, #0]
 800b63e:	4618      	mov	r0, r3
 800b640:	f7ff fa3f 	bl	800aac2 <_ZN12SimpleString7StrNCpyEPcPKcj>

    setInternalBufferTo(tbuffer, sizeOfNewString);
 800b644:	68fa      	ldr	r2, [r7, #12]
 800b646:	68b9      	ldr	r1, [r7, #8]
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f7ff fb49 	bl	800ace0 <_ZN12SimpleString19setInternalBufferToEPcj>
    return *this;
 800b64e:	687b      	ldr	r3, [r7, #4]
}
 800b650:	4618      	mov	r0, r3
 800b652:	3718      	adds	r7, #24
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}

0800b658 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>:

void SimpleString::padStringsToSameLength(SimpleString& str1, SimpleString& str2, char padCharacter)
{
 800b658:	b590      	push	{r4, r7, lr}
 800b65a:	b08b      	sub	sp, #44	; 0x2c
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	60b9      	str	r1, [r7, #8]
 800b662:	4613      	mov	r3, r2
 800b664:	71fb      	strb	r3, [r7, #7]
    if (str1.size() > str2.size()) {
 800b666:	68f8      	ldr	r0, [r7, #12]
 800b668:	f7ff ff18 	bl	800b49c <_ZNK12SimpleString4sizeEv>
 800b66c:	4604      	mov	r4, r0
 800b66e:	68b8      	ldr	r0, [r7, #8]
 800b670:	f7ff ff14 	bl	800b49c <_ZNK12SimpleString4sizeEv>
 800b674:	4603      	mov	r3, r0
 800b676:	429c      	cmp	r4, r3
 800b678:	bf8c      	ite	hi
 800b67a:	2301      	movhi	r3, #1
 800b67c:	2300      	movls	r3, #0
 800b67e:	b2db      	uxtb	r3, r3
 800b680:	2b00      	cmp	r3, #0
 800b682:	d006      	beq.n	800b692 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x3a>
        padStringsToSameLength(str2, str1, padCharacter);
 800b684:	79fb      	ldrb	r3, [r7, #7]
 800b686:	461a      	mov	r2, r3
 800b688:	68f9      	ldr	r1, [r7, #12]
 800b68a:	68b8      	ldr	r0, [r7, #8]
 800b68c:	f7ff ffe4 	bl	800b658 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>
 800b690:	e02b      	b.n	800b6ea <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x92>
        return;
    }

    char pad[2];
    pad[0] = padCharacter;
 800b692:	79fb      	ldrb	r3, [r7, #7]
 800b694:	753b      	strb	r3, [r7, #20]
    pad[1] = 0;
 800b696:	2300      	movs	r3, #0
 800b698:	757b      	strb	r3, [r7, #21]
    str1 = SimpleString(pad, str2.size() - str1.size()) + str1;
 800b69a:	68b8      	ldr	r0, [r7, #8]
 800b69c:	f7ff fefe 	bl	800b49c <_ZNK12SimpleString4sizeEv>
 800b6a0:	4604      	mov	r4, r0
 800b6a2:	68f8      	ldr	r0, [r7, #12]
 800b6a4:	f7ff fefa 	bl	800b49c <_ZNK12SimpleString4sizeEv>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	1ae2      	subs	r2, r4, r3
 800b6ac:	f107 0114 	add.w	r1, r7, #20
 800b6b0:	f107 0320 	add.w	r3, r7, #32
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f7ff fb75 	bl	800ada4 <_ZN12SimpleStringC1EPKcj>
 800b6ba:	f107 0318 	add.w	r3, r7, #24
 800b6be:	f107 0120 	add.w	r1, r7, #32
 800b6c2:	68fa      	ldr	r2, [r7, #12]
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f7ff ff6c 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 800b6ca:	f107 0318 	add.w	r3, r7, #24
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	68f8      	ldr	r0, [r7, #12]
 800b6d2:	f7ff fbb8 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 800b6d6:	f107 0318 	add.w	r3, r7, #24
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f7ff feff 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800b6e0:	f107 0320 	add.w	r3, r7, #32
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f7ff fefa 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 800b6ea:	372c      	adds	r7, #44	; 0x2c
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd90      	pop	{r4, r7, pc}

0800b6f0 <_ZNK12SimpleString9subStringEjj>:

SimpleString SimpleString::subString(size_t beginPos, size_t amount) const
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b086      	sub	sp, #24
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	60b9      	str	r1, [r7, #8]
 800b6fa:	607a      	str	r2, [r7, #4]
 800b6fc:	603b      	str	r3, [r7, #0]
    if (beginPos > size()-1) return "";
 800b6fe:	68b8      	ldr	r0, [r7, #8]
 800b700:	f7ff fecc 	bl	800b49c <_ZNK12SimpleString4sizeEv>
 800b704:	4603      	mov	r3, r0
 800b706:	3b01      	subs	r3, #1
 800b708:	687a      	ldr	r2, [r7, #4]
 800b70a:	429a      	cmp	r2, r3
 800b70c:	bf8c      	ite	hi
 800b70e:	2301      	movhi	r3, #1
 800b710:	2300      	movls	r3, #0
 800b712:	b2db      	uxtb	r3, r3
 800b714:	2b00      	cmp	r3, #0
 800b716:	d004      	beq.n	800b722 <_ZNK12SimpleString9subStringEjj+0x32>
 800b718:	4919      	ldr	r1, [pc, #100]	; (800b780 <_ZNK12SimpleString9subStringEjj+0x90>)
 800b71a:	68f8      	ldr	r0, [r7, #12]
 800b71c:	f7ff fb27 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800b720:	e029      	b.n	800b776 <_ZNK12SimpleString9subStringEjj+0x86>

    SimpleString newString = getBuffer() + beginPos;
 800b722:	68b8      	ldr	r0, [r7, #8]
 800b724:	f7ff fb17 	bl	800ad56 <_ZNK12SimpleString9getBufferEv>
 800b728:	4602      	mov	r2, r0
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	441a      	add	r2, r3
 800b72e:	f107 0310 	add.w	r3, r7, #16
 800b732:	4611      	mov	r1, r2
 800b734:	4618      	mov	r0, r3
 800b736:	f7ff fb1a 	bl	800ad6e <_ZN12SimpleStringC1EPKc>

    if (newString.size() > amount)
 800b73a:	f107 0310 	add.w	r3, r7, #16
 800b73e:	4618      	mov	r0, r3
 800b740:	f7ff feac 	bl	800b49c <_ZNK12SimpleString4sizeEv>
 800b744:	4602      	mov	r2, r0
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	4293      	cmp	r3, r2
 800b74a:	bf34      	ite	cc
 800b74c:	2301      	movcc	r3, #1
 800b74e:	2300      	movcs	r3, #0
 800b750:	b2db      	uxtb	r3, r3
 800b752:	2b00      	cmp	r3, #0
 800b754:	d004      	beq.n	800b760 <_ZNK12SimpleString9subStringEjj+0x70>
        newString.buffer_[amount] = '\0';
 800b756:	693a      	ldr	r2, [r7, #16]
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	4413      	add	r3, r2
 800b75c:	2200      	movs	r2, #0
 800b75e:	701a      	strb	r2, [r3, #0]

    return newString;
 800b760:	f107 0310 	add.w	r3, r7, #16
 800b764:	4619      	mov	r1, r3
 800b766:	68f8      	ldr	r0, [r7, #12]
 800b768:	f7ff fb55 	bl	800ae16 <_ZN12SimpleStringC1ERKS_>
    SimpleString newString = getBuffer() + beginPos;
 800b76c:	f107 0310 	add.w	r3, r7, #16
 800b770:	4618      	mov	r0, r3
 800b772:	f7ff feb4 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 800b776:	68f8      	ldr	r0, [r7, #12]
 800b778:	3718      	adds	r7, #24
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	080221f8 	.word	0x080221f8

0800b784 <_ZNK12SimpleString9subStringEj>:

SimpleString SimpleString::subString(size_t beginPos) const
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b084      	sub	sp, #16
 800b788:	af00      	add	r7, sp, #0
 800b78a:	60f8      	str	r0, [r7, #12]
 800b78c:	60b9      	str	r1, [r7, #8]
 800b78e:	607a      	str	r2, [r7, #4]
    return subString(beginPos, npos);
 800b790:	68f8      	ldr	r0, [r7, #12]
 800b792:	f04f 33ff 	mov.w	r3, #4294967295
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	68b9      	ldr	r1, [r7, #8]
 800b79a:	f7ff ffa9 	bl	800b6f0 <_ZNK12SimpleString9subStringEjj>
}
 800b79e:	68f8      	ldr	r0, [r7, #12]
 800b7a0:	3710      	adds	r7, #16
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}

0800b7a6 <_ZNK12SimpleString2atEj>:

char SimpleString::at(size_t pos) const
{
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b082      	sub	sp, #8
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
 800b7ae:	6039      	str	r1, [r7, #0]
    return getBuffer()[pos];
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f7ff fad0 	bl	800ad56 <_ZNK12SimpleString9getBufferEv>
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	4413      	add	r3, r2
 800b7bc:	781b      	ldrb	r3, [r3, #0]
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3708      	adds	r7, #8
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}

0800b7c6 <_ZNK12SimpleString4findEc>:

size_t SimpleString::find(char ch) const
{
 800b7c6:	b580      	push	{r7, lr}
 800b7c8:	b082      	sub	sp, #8
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]
 800b7ce:	460b      	mov	r3, r1
 800b7d0:	70fb      	strb	r3, [r7, #3]
    return findFrom(0, ch);
 800b7d2:	78fb      	ldrb	r3, [r7, #3]
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	2100      	movs	r1, #0
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f000 f805 	bl	800b7e8 <_ZNK12SimpleString8findFromEjc>
 800b7de:	4603      	mov	r3, r0
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3708      	adds	r7, #8
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}

0800b7e8 <_ZNK12SimpleString8findFromEjc>:

size_t SimpleString::findFrom(size_t starting_position, char ch) const
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b086      	sub	sp, #24
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	60f8      	str	r0, [r7, #12]
 800b7f0:	60b9      	str	r1, [r7, #8]
 800b7f2:	4613      	mov	r3, r2
 800b7f4:	71fb      	strb	r3, [r7, #7]
    size_t length = size();
 800b7f6:	68f8      	ldr	r0, [r7, #12]
 800b7f8:	f7ff fe50 	bl	800b49c <_ZNK12SimpleString4sizeEv>
 800b7fc:	6138      	str	r0, [r7, #16]
    for (size_t i = starting_position; i < length; i++)
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	617b      	str	r3, [r7, #20]
 800b802:	697a      	ldr	r2, [r7, #20]
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	429a      	cmp	r2, r3
 800b808:	d213      	bcs.n	800b832 <_ZNK12SimpleString8findFromEjc+0x4a>
        if (at(i) == ch) return i;
 800b80a:	6979      	ldr	r1, [r7, #20]
 800b80c:	68f8      	ldr	r0, [r7, #12]
 800b80e:	f7ff ffca 	bl	800b7a6 <_ZNK12SimpleString2atEj>
 800b812:	4603      	mov	r3, r0
 800b814:	461a      	mov	r2, r3
 800b816:	79fb      	ldrb	r3, [r7, #7]
 800b818:	4293      	cmp	r3, r2
 800b81a:	bf0c      	ite	eq
 800b81c:	2301      	moveq	r3, #1
 800b81e:	2300      	movne	r3, #0
 800b820:	b2db      	uxtb	r3, r3
 800b822:	2b00      	cmp	r3, #0
 800b824:	d001      	beq.n	800b82a <_ZNK12SimpleString8findFromEjc+0x42>
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	e005      	b.n	800b836 <_ZNK12SimpleString8findFromEjc+0x4e>
    for (size_t i = starting_position; i < length; i++)
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	3301      	adds	r3, #1
 800b82e:	617b      	str	r3, [r7, #20]
 800b830:	e7e7      	b.n	800b802 <_ZNK12SimpleString8findFromEjc+0x1a>
    return npos;
 800b832:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b836:	4618      	mov	r0, r3
 800b838:	3718      	adds	r7, #24
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
	...

0800b840 <_ZNK12SimpleString17subStringFromTillEcc>:

SimpleString SimpleString::subStringFromTill(char startChar, char lastExcludedChar) const
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b086      	sub	sp, #24
 800b844:	af00      	add	r7, sp, #0
 800b846:	60f8      	str	r0, [r7, #12]
 800b848:	60b9      	str	r1, [r7, #8]
 800b84a:	4611      	mov	r1, r2
 800b84c:	461a      	mov	r2, r3
 800b84e:	460b      	mov	r3, r1
 800b850:	71fb      	strb	r3, [r7, #7]
 800b852:	4613      	mov	r3, r2
 800b854:	71bb      	strb	r3, [r7, #6]
    size_t beginPos = find(startChar);
 800b856:	79fb      	ldrb	r3, [r7, #7]
 800b858:	4619      	mov	r1, r3
 800b85a:	68b8      	ldr	r0, [r7, #8]
 800b85c:	f7ff ffb3 	bl	800b7c6 <_ZNK12SimpleString4findEc>
 800b860:	6178      	str	r0, [r7, #20]
    if (beginPos == npos) return "";
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b868:	d104      	bne.n	800b874 <_ZNK12SimpleString17subStringFromTillEcc+0x34>
 800b86a:	4911      	ldr	r1, [pc, #68]	; (800b8b0 <_ZNK12SimpleString17subStringFromTillEcc+0x70>)
 800b86c:	68f8      	ldr	r0, [r7, #12]
 800b86e:	f7ff fa7e 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800b872:	e019      	b.n	800b8a8 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    size_t endPos = findFrom(beginPos, lastExcludedChar);
 800b874:	79bb      	ldrb	r3, [r7, #6]
 800b876:	461a      	mov	r2, r3
 800b878:	6979      	ldr	r1, [r7, #20]
 800b87a:	68b8      	ldr	r0, [r7, #8]
 800b87c:	f7ff ffb4 	bl	800b7e8 <_ZNK12SimpleString8findFromEjc>
 800b880:	6138      	str	r0, [r7, #16]
    if (endPos == npos) return subString(beginPos);
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b888:	d106      	bne.n	800b898 <_ZNK12SimpleString17subStringFromTillEcc+0x58>
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	697a      	ldr	r2, [r7, #20]
 800b88e:	68b9      	ldr	r1, [r7, #8]
 800b890:	4618      	mov	r0, r3
 800b892:	f7ff ff77 	bl	800b784 <_ZNK12SimpleString9subStringEj>
 800b896:	e007      	b.n	800b8a8 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    return subString(beginPos, endPos - beginPos);
 800b898:	693a      	ldr	r2, [r7, #16]
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	1ad3      	subs	r3, r2, r3
 800b89e:	68f8      	ldr	r0, [r7, #12]
 800b8a0:	697a      	ldr	r2, [r7, #20]
 800b8a2:	68b9      	ldr	r1, [r7, #8]
 800b8a4:	f7ff ff24 	bl	800b6f0 <_ZNK12SimpleString9subStringEjj>
}
 800b8a8:	68f8      	ldr	r0, [r7, #12]
 800b8aa:	3718      	adds	r7, #24
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}
 800b8b0:	080221f8 	.word	0x080221f8

0800b8b4 <_ZN12SimpleString15copyToNewBufferEPKcj>:

char* SimpleString::copyToNewBuffer(const char* bufferToCopy, size_t bufferSize)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b084      	sub	sp, #16
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	6039      	str	r1, [r7, #0]
    char* newBuffer = allocStringBuffer(bufferSize, __FILE__, __LINE__);
 800b8be:	f240 2275 	movw	r2, #629	; 0x275
 800b8c2:	490a      	ldr	r1, [pc, #40]	; (800b8ec <_ZN12SimpleString15copyToNewBufferEPKcj+0x38>)
 800b8c4:	6838      	ldr	r0, [r7, #0]
 800b8c6:	f7fe ffd7 	bl	800a878 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800b8ca:	60f8      	str	r0, [r7, #12]
    StrNCpy(newBuffer, bufferToCopy, bufferSize);
 800b8cc:	683a      	ldr	r2, [r7, #0]
 800b8ce:	6879      	ldr	r1, [r7, #4]
 800b8d0:	68f8      	ldr	r0, [r7, #12]
 800b8d2:	f7ff f8f6 	bl	800aac2 <_ZN12SimpleString7StrNCpyEPcPKcj>
    newBuffer[bufferSize-1] = '\0';
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	3b01      	subs	r3, #1
 800b8da:	68fa      	ldr	r2, [r7, #12]
 800b8dc:	4413      	add	r3, r2
 800b8de:	2200      	movs	r2, #0
 800b8e0:	701a      	strb	r2, [r3, #0]
    return newBuffer;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3710      	adds	r7, #16
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}
 800b8ec:	08022138 	.word	0x08022138

0800b8f0 <_ZN12SimpleString7isDigitEc>:
    StrNCpy(bufferToCopy, getBuffer(), sizeToCopy);
    bufferToCopy[sizeToCopy] = '\0';
}

bool SimpleString::isDigit(char ch)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b083      	sub	sp, #12
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	71fb      	strb	r3, [r7, #7]
    return '0' <= ch && '9' >= ch;
 800b8fa:	79fb      	ldrb	r3, [r7, #7]
 800b8fc:	2b2f      	cmp	r3, #47	; 0x2f
 800b8fe:	d904      	bls.n	800b90a <_ZN12SimpleString7isDigitEc+0x1a>
 800b900:	79fb      	ldrb	r3, [r7, #7]
 800b902:	2b39      	cmp	r3, #57	; 0x39
 800b904:	d801      	bhi.n	800b90a <_ZN12SimpleString7isDigitEc+0x1a>
 800b906:	2301      	movs	r3, #1
 800b908:	e000      	b.n	800b90c <_ZN12SimpleString7isDigitEc+0x1c>
 800b90a:	2300      	movs	r3, #0
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	370c      	adds	r7, #12
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <_ZN12SimpleString7isSpaceEc>:

bool SimpleString::isSpace(char ch)
{
 800b918:	b480      	push	{r7}
 800b91a:	b083      	sub	sp, #12
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	4603      	mov	r3, r0
 800b920:	71fb      	strb	r3, [r7, #7]
    return (ch == ' ') || (0x08 < ch && 0x0E > ch);
 800b922:	79fb      	ldrb	r3, [r7, #7]
 800b924:	2b20      	cmp	r3, #32
 800b926:	d005      	beq.n	800b934 <_ZN12SimpleString7isSpaceEc+0x1c>
 800b928:	79fb      	ldrb	r3, [r7, #7]
 800b92a:	2b08      	cmp	r3, #8
 800b92c:	d904      	bls.n	800b938 <_ZN12SimpleString7isSpaceEc+0x20>
 800b92e:	79fb      	ldrb	r3, [r7, #7]
 800b930:	2b0d      	cmp	r3, #13
 800b932:	d801      	bhi.n	800b938 <_ZN12SimpleString7isSpaceEc+0x20>
 800b934:	2301      	movs	r3, #1
 800b936:	e000      	b.n	800b93a <_ZN12SimpleString7isSpaceEc+0x22>
 800b938:	2300      	movs	r3, #0
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	370c      	adds	r7, #12
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr

0800b946 <_ZN12SimpleString7isUpperEc>:

bool SimpleString::isUpper(char ch)
{
 800b946:	b480      	push	{r7}
 800b948:	b083      	sub	sp, #12
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	4603      	mov	r3, r0
 800b94e:	71fb      	strb	r3, [r7, #7]
    return 'A' <= ch && 'Z' >= ch;
 800b950:	79fb      	ldrb	r3, [r7, #7]
 800b952:	2b40      	cmp	r3, #64	; 0x40
 800b954:	d904      	bls.n	800b960 <_ZN12SimpleString7isUpperEc+0x1a>
 800b956:	79fb      	ldrb	r3, [r7, #7]
 800b958:	2b5a      	cmp	r3, #90	; 0x5a
 800b95a:	d801      	bhi.n	800b960 <_ZN12SimpleString7isUpperEc+0x1a>
 800b95c:	2301      	movs	r3, #1
 800b95e:	e000      	b.n	800b962 <_ZN12SimpleString7isUpperEc+0x1c>
 800b960:	2300      	movs	r3, #0
}
 800b962:	4618      	mov	r0, r3
 800b964:	370c      	adds	r7, #12
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr

0800b96e <_ZN12SimpleString9isControlEc>:

bool SimpleString::isControl(char ch)
{
 800b96e:	b480      	push	{r7}
 800b970:	b083      	sub	sp, #12
 800b972:	af00      	add	r7, sp, #0
 800b974:	4603      	mov	r3, r0
 800b976:	71fb      	strb	r3, [r7, #7]
    return ch < ' ' || ch == char(0x7F);
 800b978:	79fb      	ldrb	r3, [r7, #7]
 800b97a:	2b1f      	cmp	r3, #31
 800b97c:	d902      	bls.n	800b984 <_ZN12SimpleString9isControlEc+0x16>
 800b97e:	79fb      	ldrb	r3, [r7, #7]
 800b980:	2b7f      	cmp	r3, #127	; 0x7f
 800b982:	d101      	bne.n	800b988 <_ZN12SimpleString9isControlEc+0x1a>
 800b984:	2301      	movs	r3, #1
 800b986:	e000      	b.n	800b98a <_ZN12SimpleString9isControlEc+0x1c>
 800b988:	2300      	movs	r3, #0
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	370c      	adds	r7, #12
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr

0800b996 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>:

bool SimpleString::isControlWithShortEscapeSequence(char ch)
{
 800b996:	b480      	push	{r7}
 800b998:	b083      	sub	sp, #12
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	4603      	mov	r3, r0
 800b99e:	71fb      	strb	r3, [r7, #7]
    return '\a' <= ch && '\r' >= ch;
 800b9a0:	79fb      	ldrb	r3, [r7, #7]
 800b9a2:	2b06      	cmp	r3, #6
 800b9a4:	d904      	bls.n	800b9b0 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800b9a6:	79fb      	ldrb	r3, [r7, #7]
 800b9a8:	2b0d      	cmp	r3, #13
 800b9aa:	d801      	bhi.n	800b9b0 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	e000      	b.n	800b9b2 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1c>
 800b9b0:	2300      	movs	r3, #0
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	370c      	adds	r7, #12
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9bc:	4770      	bx	lr
	...

0800b9c0 <_Z10StringFromb>:

SimpleString StringFrom(bool value)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	70fb      	strb	r3, [r7, #3]
    return SimpleString(StringFromFormat("%s", value ? "true" : "false"));
 800b9cc:	78fb      	ldrb	r3, [r7, #3]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d001      	beq.n	800b9d6 <_Z10StringFromb+0x16>
 800b9d2:	4a06      	ldr	r2, [pc, #24]	; (800b9ec <_Z10StringFromb+0x2c>)
 800b9d4:	e000      	b.n	800b9d8 <_Z10StringFromb+0x18>
 800b9d6:	4a06      	ldr	r2, [pc, #24]	; (800b9f0 <_Z10StringFromb+0x30>)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	4906      	ldr	r1, [pc, #24]	; (800b9f4 <_Z10StringFromb+0x34>)
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f000 fa85 	bl	800beec <_Z16StringFromFormatPKcz>
}
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	3708      	adds	r7, #8
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
 800b9ea:	bf00      	nop
 800b9ec:	08022204 	.word	0x08022204
 800b9f0:	0802220c 	.word	0x0802220c
 800b9f4:	08022214 	.word	0x08022214

0800b9f8 <_Z10StringFromPKc>:

SimpleString StringFrom(const char *value)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b082      	sub	sp, #8
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]
    return SimpleString(value);
 800ba02:	6839      	ldr	r1, [r7, #0]
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f7ff f9b2 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
}
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	3708      	adds	r7, #8
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
	...

0800ba14 <_Z25PrintableStringFromOrNullPKc>:
{
    return (expected) ? StringFrom(expected) : StringFrom("(null)");
}

SimpleString PrintableStringFromOrNull(const char * expected)
{
 800ba14:	b590      	push	{r4, r7, lr}
 800ba16:	b085      	sub	sp, #20
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
    return (expected) ? StringFrom(expected).printable() : StringFrom("(null)");
 800ba1e:	2400      	movs	r4, #0
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d00e      	beq.n	800ba44 <_Z25PrintableStringFromOrNullPKc+0x30>
 800ba26:	f107 0308 	add.w	r3, r7, #8
 800ba2a:	6839      	ldr	r1, [r7, #0]
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f7ff ffe3 	bl	800b9f8 <_Z10StringFromPKc>
 800ba32:	2401      	movs	r4, #1
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f107 0208 	add.w	r2, r7, #8
 800ba3a:	4611      	mov	r1, r2
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f7ff fc3f 	bl	800b2c0 <_ZNK12SimpleString9printableEv>
 800ba42:	e004      	b.n	800ba4e <_Z25PrintableStringFromOrNullPKc+0x3a>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	4908      	ldr	r1, [pc, #32]	; (800ba68 <_Z25PrintableStringFromOrNullPKc+0x54>)
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f7ff ffd5 	bl	800b9f8 <_Z10StringFromPKc>
 800ba4e:	2c00      	cmp	r4, #0
 800ba50:	d004      	beq.n	800ba5c <_Z25PrintableStringFromOrNullPKc+0x48>
 800ba52:	f107 0308 	add.w	r3, r7, #8
 800ba56:	4618      	mov	r0, r3
 800ba58:	f7ff fd41 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800ba5c:	bf00      	nop
}
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	3714      	adds	r7, #20
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd90      	pop	{r4, r7, pc}
 800ba66:	bf00      	nop
 800ba68:	08022218 	.word	0x08022218

0800ba6c <_Z10StringFromi>:

SimpleString StringFrom(int value)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b082      	sub	sp, #8
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%d", value);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	683a      	ldr	r2, [r7, #0]
 800ba7a:	4904      	ldr	r1, [pc, #16]	; (800ba8c <_Z10StringFromi+0x20>)
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f000 fa35 	bl	800beec <_Z16StringFromFormatPKcz>
}
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	3708      	adds	r7, #8
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	08022220 	.word	0x08022220

0800ba90 <_Z10StringFroml>:

SimpleString StringFrom(long value)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%ld", value);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	683a      	ldr	r2, [r7, #0]
 800ba9e:	4904      	ldr	r1, [pc, #16]	; (800bab0 <_Z10StringFroml+0x20>)
 800baa0:	4618      	mov	r0, r3
 800baa2:	f000 fa23 	bl	800beec <_Z16StringFromFormatPKcz>
}
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	3708      	adds	r7, #8
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop
 800bab0:	08022224 	.word	0x08022224

0800bab4 <_Z10StringFromPKv>:

SimpleString StringFrom(const void* value)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b086      	sub	sp, #24
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800babe:	f107 0308 	add.w	r3, r7, #8
 800bac2:	4910      	ldr	r1, [pc, #64]	; (800bb04 <_Z10StringFromPKv+0x50>)
 800bac4:	4618      	mov	r0, r3
 800bac6:	f7ff f952 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800baca:	f107 0310 	add.w	r3, r7, #16
 800bace:	6839      	ldr	r1, [r7, #0]
 800bad0:	4618      	mov	r0, r3
 800bad2:	f000 f9a1 	bl	800be18 <_Z13HexStringFromPKv>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f107 0210 	add.w	r2, r7, #16
 800badc:	f107 0108 	add.w	r1, r7, #8
 800bae0:	4618      	mov	r0, r3
 800bae2:	f7ff fd5e 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 800bae6:	f107 0310 	add.w	r3, r7, #16
 800baea:	4618      	mov	r0, r3
 800baec:	f7ff fcf7 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800baf0:	f107 0308 	add.w	r3, r7, #8
 800baf4:	4618      	mov	r0, r3
 800baf6:	f7ff fcf2 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800bafa:	bf00      	nop
}
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	3718      	adds	r7, #24
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}
 800bb04:	08022228 	.word	0x08022228

0800bb08 <_Z10StringFromPFvvE>:

SimpleString StringFrom(void (*value)())
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b086      	sub	sp, #24
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
 800bb10:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800bb12:	f107 0308 	add.w	r3, r7, #8
 800bb16:	4910      	ldr	r1, [pc, #64]	; (800bb58 <_Z10StringFromPFvvE+0x50>)
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7ff f928 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800bb1e:	f107 0310 	add.w	r3, r7, #16
 800bb22:	6839      	ldr	r1, [r7, #0]
 800bb24:	4618      	mov	r0, r3
 800bb26:	f000 f98b 	bl	800be40 <_Z13HexStringFromPFvvE>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f107 0210 	add.w	r2, r7, #16
 800bb30:	f107 0108 	add.w	r1, r7, #8
 800bb34:	4618      	mov	r0, r3
 800bb36:	f7ff fd34 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 800bb3a:	f107 0310 	add.w	r3, r7, #16
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7ff fccd 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800bb44:	f107 0308 	add.w	r3, r7, #8
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f7ff fcc8 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800bb4e:	bf00      	nop
}
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	3718      	adds	r7, #24
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}
 800bb58:	08022228 	.word	0x08022228

0800bb5c <_Z13HexStringFroml>:

SimpleString HexStringFrom(long value)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	683a      	ldr	r2, [r7, #0]
 800bb6a:	4904      	ldr	r1, [pc, #16]	; (800bb7c <_Z13HexStringFroml+0x20>)
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f000 f9bd 	bl	800beec <_Z16StringFromFormatPKcz>
}
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	3708      	adds	r7, #8
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
 800bb7a:	bf00      	nop
 800bb7c:	0802222c 	.word	0x0802222c

0800bb80 <_Z13HexStringFromi>:

SimpleString HexStringFrom(int value)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b082      	sub	sp, #8
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	683a      	ldr	r2, [r7, #0]
 800bb8e:	4904      	ldr	r1, [pc, #16]	; (800bba0 <_Z13HexStringFromi+0x20>)
 800bb90:	4618      	mov	r0, r3
 800bb92:	f000 f9ab 	bl	800beec <_Z16StringFromFormatPKcz>
}
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	3708      	adds	r7, #8
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}
 800bb9e:	bf00      	nop
 800bba0:	08022230 	.word	0x08022230

0800bba4 <_Z13HexStringFroma>:

SimpleString HexStringFrom(signed char value)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b086      	sub	sp, #24
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	460b      	mov	r3, r1
 800bbae:	70fb      	strb	r3, [r7, #3]
    SimpleString result = StringFromFormat("%x", value);
 800bbb0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	4912      	ldr	r1, [pc, #72]	; (800bc00 <_Z13HexStringFroma+0x5c>)
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f000 f997 	bl	800beec <_Z16StringFromFormatPKcz>
    if(value < 0) {
 800bbbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	da16      	bge.n	800bbf4 <_Z13HexStringFroma+0x50>
        size_t size = result.size();
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f7ff fc68 	bl	800b49c <_ZNK12SimpleString4sizeEv>
 800bbcc:	6178      	str	r0, [r7, #20]
        result = result.subString(size-(CPPUTEST_CHAR_BIT/4));
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	1e9a      	subs	r2, r3, #2
 800bbd2:	f107 030c 	add.w	r3, r7, #12
 800bbd6:	6879      	ldr	r1, [r7, #4]
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7ff fdd3 	bl	800b784 <_ZNK12SimpleString9subStringEj>
 800bbde:	f107 030c 	add.w	r3, r7, #12
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f7ff f92e 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 800bbea:	f107 030c 	add.w	r3, r7, #12
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f7ff fc75 	bl	800b4de <_ZN12SimpleStringD1Ev>
    }
    return result;
 800bbf4:	bf00      	nop
}
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	3718      	adds	r7, #24
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	08022230 	.word	0x08022230

0800bc04 <_Z13HexStringFromm>:

SimpleString HexStringFrom(unsigned long value)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b082      	sub	sp, #8
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	683a      	ldr	r2, [r7, #0]
 800bc12:	4904      	ldr	r1, [pc, #16]	; (800bc24 <_Z13HexStringFromm+0x20>)
 800bc14:	4618      	mov	r0, r3
 800bc16:	f000 f969 	bl	800beec <_Z16StringFromFormatPKcz>
}
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	3708      	adds	r7, #8
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}
 800bc22:	bf00      	nop
 800bc24:	0802222c 	.word	0x0802222c

0800bc28 <_Z13HexStringFromj>:

SimpleString HexStringFrom(unsigned int value)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	683a      	ldr	r2, [r7, #0]
 800bc36:	4904      	ldr	r1, [pc, #16]	; (800bc48 <_Z13HexStringFromj+0x20>)
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f000 f957 	bl	800beec <_Z16StringFromFormatPKcz>
}
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	3708      	adds	r7, #8
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
 800bc46:	bf00      	nop
 800bc48:	08022230 	.word	0x08022230

0800bc4c <_Z30BracketsFormattedHexStringFromi>:

SimpleString BracketsFormattedHexStringFrom(int value)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b084      	sub	sp, #16
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800bc56:	f107 0308 	add.w	r3, r7, #8
 800bc5a:	6839      	ldr	r1, [r7, #0]
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7ff ff8f 	bl	800bb80 <_Z13HexStringFromi>
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f107 0208 	add.w	r2, r7, #8
 800bc68:	4611      	mov	r1, r2
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f000 f87e 	bl	800bd6c <_Z26BracketsFormattedHexString12SimpleString>
 800bc70:	f107 0308 	add.w	r3, r7, #8
 800bc74:	4618      	mov	r0, r3
 800bc76:	f7ff fc32 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800bc7a:	bf00      	nop
}
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	3710      	adds	r7, #16
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <_Z30BracketsFormattedHexStringFromj>:

SimpleString BracketsFormattedHexStringFrom(unsigned int value)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b084      	sub	sp, #16
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800bc8e:	f107 0308 	add.w	r3, r7, #8
 800bc92:	6839      	ldr	r1, [r7, #0]
 800bc94:	4618      	mov	r0, r3
 800bc96:	f7ff ffc7 	bl	800bc28 <_Z13HexStringFromj>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f107 0208 	add.w	r2, r7, #8
 800bca0:	4611      	mov	r1, r2
 800bca2:	4618      	mov	r0, r3
 800bca4:	f000 f862 	bl	800bd6c <_Z26BracketsFormattedHexString12SimpleString>
 800bca8:	f107 0308 	add.w	r3, r7, #8
 800bcac:	4618      	mov	r0, r3
 800bcae:	f7ff fc16 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800bcb2:	bf00      	nop
}
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	3710      	adds	r7, #16
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <_Z30BracketsFormattedHexStringFroml>:

SimpleString BracketsFormattedHexStringFrom(long value)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b084      	sub	sp, #16
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800bcc6:	f107 0308 	add.w	r3, r7, #8
 800bcca:	6839      	ldr	r1, [r7, #0]
 800bccc:	4618      	mov	r0, r3
 800bcce:	f7ff ff45 	bl	800bb5c <_Z13HexStringFroml>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f107 0208 	add.w	r2, r7, #8
 800bcd8:	4611      	mov	r1, r2
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f000 f846 	bl	800bd6c <_Z26BracketsFormattedHexString12SimpleString>
 800bce0:	f107 0308 	add.w	r3, r7, #8
 800bce4:	4618      	mov	r0, r3
 800bce6:	f7ff fbfa 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800bcea:	bf00      	nop
}
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	3710      	adds	r7, #16
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <_Z30BracketsFormattedHexStringFromm>:


SimpleString BracketsFormattedHexStringFrom(unsigned long value)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b084      	sub	sp, #16
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800bcfe:	f107 0308 	add.w	r3, r7, #8
 800bd02:	6839      	ldr	r1, [r7, #0]
 800bd04:	4618      	mov	r0, r3
 800bd06:	f7ff ff7d 	bl	800bc04 <_Z13HexStringFromm>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f107 0208 	add.w	r2, r7, #8
 800bd10:	4611      	mov	r1, r2
 800bd12:	4618      	mov	r0, r3
 800bd14:	f000 f82a 	bl	800bd6c <_Z26BracketsFormattedHexString12SimpleString>
 800bd18:	f107 0308 	add.w	r3, r7, #8
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f7ff fbde 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800bd22:	bf00      	nop
}
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	3710      	adds	r7, #16
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <_Z30BracketsFormattedHexStringFroma>:

SimpleString BracketsFormattedHexStringFrom(signed char value)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b084      	sub	sp, #16
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	460b      	mov	r3, r1
 800bd36:	70fb      	strb	r3, [r7, #3]
    return BracketsFormattedHexString(HexStringFrom(value));
 800bd38:	f107 0308 	add.w	r3, r7, #8
 800bd3c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800bd40:	4611      	mov	r1, r2
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7ff ff2e 	bl	800bba4 <_Z13HexStringFroma>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f107 0208 	add.w	r2, r7, #8
 800bd4e:	4611      	mov	r1, r2
 800bd50:	4618      	mov	r0, r3
 800bd52:	f000 f80b 	bl	800bd6c <_Z26BracketsFormattedHexString12SimpleString>
 800bd56:	f107 0308 	add.w	r3, r7, #8
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f7ff fbbf 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800bd60:	bf00      	nop
}
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	3710      	adds	r7, #16
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}
	...

0800bd6c <_Z26BracketsFormattedHexString12SimpleString>:

SimpleString BracketsFormattedHexString(SimpleString hexString)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b088      	sub	sp, #32
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	6039      	str	r1, [r7, #0]
    return SimpleString("(0x") + hexString + ")" ;
 800bd76:	f107 0310 	add.w	r3, r7, #16
 800bd7a:	4917      	ldr	r1, [pc, #92]	; (800bdd8 <_Z26BracketsFormattedHexString12SimpleString+0x6c>)
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f7fe fff6 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800bd82:	f107 0308 	add.w	r3, r7, #8
 800bd86:	f107 0110 	add.w	r1, r7, #16
 800bd8a:	683a      	ldr	r2, [r7, #0]
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f7ff fc08 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 800bd92:	f107 0318 	add.w	r3, r7, #24
 800bd96:	4911      	ldr	r1, [pc, #68]	; (800bddc <_Z26BracketsFormattedHexString12SimpleString+0x70>)
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7fe ffe8 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f107 0218 	add.w	r2, r7, #24
 800bda4:	f107 0108 	add.w	r1, r7, #8
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f7ff fbfa 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 800bdae:	f107 0318 	add.w	r3, r7, #24
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7ff fb93 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800bdb8:	f107 0308 	add.w	r3, r7, #8
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f7ff fb8e 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800bdc2:	f107 0310 	add.w	r3, r7, #16
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f7ff fb89 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800bdcc:	bf00      	nop
}
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	3720      	adds	r7, #32
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	08022234 	.word	0x08022234
 800bddc:	08022238 	.word	0x08022238

0800bde0 <_ZL25convertPointerToLongValuePKv>:
}

#else   /* CPPUTEST_USE_LONG_LONG */

static long convertPointerToLongValue(const void* value)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b085      	sub	sp, #20
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800bde8:	1d3b      	adds	r3, r7, #4
 800bdea:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3714      	adds	r7, #20
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr

0800bdfc <_ZL33convertFunctionPointerToLongValuePFvvE>:

static long convertFunctionPointerToLongValue(void (*value)())
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b085      	sub	sp, #20
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800be04:	1d3b      	adds	r3, r7, #4
 800be06:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3714      	adds	r7, #20
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr

0800be18 <_Z13HexStringFromPKv>:
{
    return "<ulonglong_unsupported>";
}

SimpleString HexStringFrom(const void* value)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b082      	sub	sp, #8
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
 800be20:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertPointerToLongValue(value));
 800be22:	6838      	ldr	r0, [r7, #0]
 800be24:	f7ff ffdc 	bl	800bde0 <_ZL25convertPointerToLongValuePKv>
 800be28:	4602      	mov	r2, r0
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	4903      	ldr	r1, [pc, #12]	; (800be3c <_Z13HexStringFromPKv+0x24>)
 800be2e:	4618      	mov	r0, r3
 800be30:	f000 f85c 	bl	800beec <_Z16StringFromFormatPKcz>
}
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	3708      	adds	r7, #8
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}
 800be3c:	0802222c 	.word	0x0802222c

0800be40 <_Z13HexStringFromPFvvE>:

SimpleString HexStringFrom(void (*value)())
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b082      	sub	sp, #8
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
 800be48:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertFunctionPointerToLongValue(value));
 800be4a:	6838      	ldr	r0, [r7, #0]
 800be4c:	f7ff ffd6 	bl	800bdfc <_ZL33convertFunctionPointerToLongValuePFvvE>
 800be50:	4602      	mov	r2, r0
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	4903      	ldr	r1, [pc, #12]	; (800be64 <_Z13HexStringFromPFvvE+0x24>)
 800be56:	4618      	mov	r0, r3
 800be58:	f000 f848 	bl	800beec <_Z16StringFromFormatPKcz>
}
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	3708      	adds	r7, #8
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}
 800be64:	0802222c 	.word	0x0802222c

0800be68 <_Z10StringFromdi>:
}

#endif  /* CPPUTEST_USE_LONG_LONG */

SimpleString StringFrom(double value, int precision)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b086      	sub	sp, #24
 800be6c:	af02      	add	r7, sp, #8
 800be6e:	60f8      	str	r0, [r7, #12]
 800be70:	ed87 0b00 	vstr	d0, [r7]
 800be74:	60b9      	str	r1, [r7, #8]
    if (PlatformSpecificIsNan(value))
 800be76:	4b18      	ldr	r3, [pc, #96]	; (800bed8 <_Z10StringFromdi+0x70>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	ed97 0b00 	vldr	d0, [r7]
 800be7e:	4798      	blx	r3
 800be80:	4603      	mov	r3, r0
 800be82:	2b00      	cmp	r3, #0
 800be84:	bf14      	ite	ne
 800be86:	2301      	movne	r3, #1
 800be88:	2300      	moveq	r3, #0
 800be8a:	b2db      	uxtb	r3, r3
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d004      	beq.n	800be9a <_Z10StringFromdi+0x32>
        return "Nan - Not a number";
 800be90:	4912      	ldr	r1, [pc, #72]	; (800bedc <_Z10StringFromdi+0x74>)
 800be92:	68f8      	ldr	r0, [r7, #12]
 800be94:	f7fe ff6b 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800be98:	e01a      	b.n	800bed0 <_Z10StringFromdi+0x68>
    else if (PlatformSpecificIsInf(value))
 800be9a:	4b11      	ldr	r3, [pc, #68]	; (800bee0 <_Z10StringFromdi+0x78>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	ed97 0b00 	vldr	d0, [r7]
 800bea2:	4798      	blx	r3
 800bea4:	4603      	mov	r3, r0
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	bf14      	ite	ne
 800beaa:	2301      	movne	r3, #1
 800beac:	2300      	moveq	r3, #0
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d004      	beq.n	800bebe <_Z10StringFromdi+0x56>
        return "Inf - Infinity";
 800beb4:	490b      	ldr	r1, [pc, #44]	; (800bee4 <_Z10StringFromdi+0x7c>)
 800beb6:	68f8      	ldr	r0, [r7, #12]
 800beb8:	f7fe ff59 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800bebc:	e008      	b.n	800bed0 <_Z10StringFromdi+0x68>
    else
        return StringFromFormat("%.*g", precision, value);
 800bebe:	68f8      	ldr	r0, [r7, #12]
 800bec0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bec4:	e9cd 2300 	strd	r2, r3, [sp]
 800bec8:	68ba      	ldr	r2, [r7, #8]
 800beca:	4907      	ldr	r1, [pc, #28]	; (800bee8 <_Z10StringFromdi+0x80>)
 800becc:	f000 f80e 	bl	800beec <_Z16StringFromFormatPKcz>
}
 800bed0:	68f8      	ldr	r0, [r7, #12]
 800bed2:	3710      	adds	r7, #16
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}
 800bed8:	200000e8 	.word	0x200000e8
 800bedc:	0802226c 	.word	0x0802226c
 800bee0:	200000ec 	.word	0x200000ec
 800bee4:	08022280 	.word	0x08022280
 800bee8:	08022290 	.word	0x08022290

0800beec <_Z16StringFromFormatPKcz>:
{
    return SimpleString(value);
}

SimpleString StringFromFormat(const char* format, ...)
{
 800beec:	b40e      	push	{r1, r2, r3}
 800beee:	b580      	push	{r7, lr}
 800bef0:	b087      	sub	sp, #28
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]
    SimpleString resultString;
 800bef6:	4910      	ldr	r1, [pc, #64]	; (800bf38 <_Z16StringFromFormatPKcz+0x4c>)
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f7fe ff38 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
    va_list arguments;
    va_start(arguments, format);
 800befe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bf02:	60fb      	str	r3, [r7, #12]

    resultString = VStringFromFormat(format, arguments);
 800bf04:	f107 0310 	add.w	r3, r7, #16
 800bf08:	68fa      	ldr	r2, [r7, #12]
 800bf0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f000 f839 	bl	800bf84 <_Z17VStringFromFormatPKcSt9__va_list>
 800bf12:	f107 0310 	add.w	r3, r7, #16
 800bf16:	4619      	mov	r1, r3
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f7fe ff94 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 800bf1e:	f107 0310 	add.w	r3, r7, #16
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7ff fadb 	bl	800b4de <_ZN12SimpleStringD1Ev>
    va_end(arguments);
    return resultString;
 800bf28:	bf00      	nop
}
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	371c      	adds	r7, #28
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bf34:	b003      	add	sp, #12
 800bf36:	4770      	bx	lr
 800bf38:	080221f8 	.word	0x080221f8

0800bf3c <_Z10StringFromj>:

SimpleString StringFrom(unsigned int i)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%u", i);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	683a      	ldr	r2, [r7, #0]
 800bf4a:	4904      	ldr	r1, [pc, #16]	; (800bf5c <_Z10StringFromj+0x20>)
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f7ff ffcd 	bl	800beec <_Z16StringFromFormatPKcz>
}
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	3708      	adds	r7, #8
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
 800bf5a:	bf00      	nop
 800bf5c:	0802229c 	.word	0x0802229c

0800bf60 <_Z10StringFromm>:
}

#endif

SimpleString StringFrom(unsigned long i)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b082      	sub	sp, #8
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lu", i);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	683a      	ldr	r2, [r7, #0]
 800bf6e:	4904      	ldr	r1, [pc, #16]	; (800bf80 <_Z10StringFromm+0x20>)
 800bf70:	4618      	mov	r0, r3
 800bf72:	f7ff ffbb 	bl	800beec <_Z16StringFromFormatPKcz>
}
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	3708      	adds	r7, #8
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	080222a0 	.word	0x080222a0

0800bf84 <_Z17VStringFromFormatPKcSt9__va_list>:

SimpleString VStringFromFormat(const char* format, va_list args)
{
 800bf84:	b590      	push	{r4, r7, lr}
 800bf86:	b0a7      	sub	sp, #156	; 0x9c
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	60f8      	str	r0, [r7, #12]
 800bf8c:	60b9      	str	r1, [r7, #8]
 800bf8e:	607a      	str	r2, [r7, #4]
    va_list argsCopy;
    va_copy(argsCopy, args);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	67bb      	str	r3, [r7, #120]	; 0x78
    enum
    {
        sizeOfdefaultBuffer = 100
    };
    char defaultBuffer[sizeOfdefaultBuffer];
    SimpleString resultString;
 800bf94:	492e      	ldr	r1, [pc, #184]	; (800c050 <_Z17VStringFromFormatPKcSt9__va_list+0xcc>)
 800bf96:	68f8      	ldr	r0, [r7, #12]
 800bf98:	f7fe fee9 	bl	800ad6e <_ZN12SimpleStringC1EPKc>

    size_t size = (size_t)PlatformSpecificVSNprintf(defaultBuffer, sizeOfdefaultBuffer, format, args);
 800bf9c:	4b2d      	ldr	r3, [pc, #180]	; (800c054 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800bf9e:	681c      	ldr	r4, [r3, #0]
 800bfa0:	f107 0014 	add.w	r0, r7, #20
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	68ba      	ldr	r2, [r7, #8]
 800bfa8:	2164      	movs	r1, #100	; 0x64
 800bfaa:	47a0      	blx	r4
 800bfac:	4603      	mov	r3, r0
 800bfae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (size < sizeOfdefaultBuffer) {
 800bfb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bfb6:	2b63      	cmp	r3, #99	; 0x63
 800bfb8:	d813      	bhi.n	800bfe2 <_Z17VStringFromFormatPKcSt9__va_list+0x5e>
        resultString = SimpleString(defaultBuffer);
 800bfba:	f107 0214 	add.w	r2, r7, #20
 800bfbe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800bfc2:	4611      	mov	r1, r2
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f7fe fed2 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800bfca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800bfce:	4619      	mov	r1, r3
 800bfd0:	68f8      	ldr	r0, [r7, #12]
 800bfd2:	f7fe ff38 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 800bfd6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f7ff fa7f 	bl	800b4de <_ZN12SimpleStringD1Ev>
        resultString = SimpleString(newBuffer);

        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
    }
    va_end(argsCopy);
    return resultString;
 800bfe0:	e031      	b.n	800c046 <_Z17VStringFromFormatPKcSt9__va_list+0xc2>
        size_t newBufferSize = size + 1;
 800bfe2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        char* newBuffer = SimpleString::allocStringBuffer(newBufferSize, __FILE__, __LINE__);
 800bfec:	f240 32c3 	movw	r2, #963	; 0x3c3
 800bff0:	4919      	ldr	r1, [pc, #100]	; (800c058 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800bff2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800bff6:	f7fe fc3f 	bl	800a878 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800bffa:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        PlatformSpecificVSNprintf(newBuffer, newBufferSize, format, argsCopy);
 800bffe:	4b15      	ldr	r3, [pc, #84]	; (800c054 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800c000:	681c      	ldr	r4, [r3, #0]
 800c002:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c004:	68ba      	ldr	r2, [r7, #8]
 800c006:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c00a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800c00e:	47a0      	blx	r4
        resultString = SimpleString(newBuffer);
 800c010:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800c014:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800c018:	4618      	mov	r0, r3
 800c01a:	f7fe fea8 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800c01e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800c022:	4619      	mov	r1, r3
 800c024:	68f8      	ldr	r0, [r7, #12]
 800c026:	f7fe ff0e 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 800c02a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800c02e:	4618      	mov	r0, r3
 800c030:	f7ff fa55 	bl	800b4de <_ZN12SimpleStringD1Ev>
        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
 800c034:	f240 33c7 	movw	r3, #967	; 0x3c7
 800c038:	4a07      	ldr	r2, [pc, #28]	; (800c058 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800c03a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c03e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800c042:	f7fe fc2d 	bl	800a8a0 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
    return resultString;
 800c046:	bf00      	nop
}
 800c048:	68f8      	ldr	r0, [r7, #12]
 800c04a:	379c      	adds	r7, #156	; 0x9c
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd90      	pop	{r4, r7, pc}
 800c050:	080221f8 	.word	0x080221f8
 800c054:	200000b0 	.word	0x200000b0
 800c058:	08022138 	.word	0x08022138

0800c05c <_Z16StringFromBinaryPKhj>:

SimpleString StringFromBinary(const unsigned char* value, size_t size)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b08a      	sub	sp, #40	; 0x28
 800c060:	af00      	add	r7, sp, #0
 800c062:	60f8      	str	r0, [r7, #12]
 800c064:	60b9      	str	r1, [r7, #8]
 800c066:	607a      	str	r2, [r7, #4]
    SimpleString result;
 800c068:	491f      	ldr	r1, [pc, #124]	; (800c0e8 <_Z16StringFromBinaryPKhj+0x8c>)
 800c06a:	68f8      	ldr	r0, [r7, #12]
 800c06c:	f7fe fe7f 	bl	800ad6e <_ZN12SimpleStringC1EPKc>

    for (size_t i = 0; i < size; i++) {
 800c070:	2300      	movs	r3, #0
 800c072:	627b      	str	r3, [r7, #36]	; 0x24
 800c074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	429a      	cmp	r2, r3
 800c07a:	d219      	bcs.n	800c0b0 <_Z16StringFromBinaryPKhj+0x54>
        result += StringFromFormat("%02X ", value[i]);
 800c07c:	68ba      	ldr	r2, [r7, #8]
 800c07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c080:	4413      	add	r3, r2
 800c082:	781b      	ldrb	r3, [r3, #0]
 800c084:	461a      	mov	r2, r3
 800c086:	f107 0314 	add.w	r3, r7, #20
 800c08a:	4918      	ldr	r1, [pc, #96]	; (800c0ec <_Z16StringFromBinaryPKhj+0x90>)
 800c08c:	4618      	mov	r0, r3
 800c08e:	f7ff ff2d 	bl	800beec <_Z16StringFromFormatPKcz>
 800c092:	f107 0314 	add.w	r3, r7, #20
 800c096:	4619      	mov	r1, r3
 800c098:	68f8      	ldr	r0, [r7, #12]
 800c09a:	f7ff fa9d 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 800c09e:	f107 0314 	add.w	r3, r7, #20
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7ff fa1b 	bl	800b4de <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < size; i++) {
 800c0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	627b      	str	r3, [r7, #36]	; 0x24
 800c0ae:	e7e1      	b.n	800c074 <_Z16StringFromBinaryPKhj+0x18>
    }
    result = result.subString(0, result.size() - 1);
 800c0b0:	68f8      	ldr	r0, [r7, #12]
 800c0b2:	f7ff f9f3 	bl	800b49c <_ZNK12SimpleString4sizeEv>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	3b01      	subs	r3, #1
 800c0ba:	f107 001c 	add.w	r0, r7, #28
 800c0be:	2200      	movs	r2, #0
 800c0c0:	68f9      	ldr	r1, [r7, #12]
 800c0c2:	f7ff fb15 	bl	800b6f0 <_ZNK12SimpleString9subStringEjj>
 800c0c6:	f107 031c 	add.w	r3, r7, #28
 800c0ca:	4619      	mov	r1, r3
 800c0cc:	68f8      	ldr	r0, [r7, #12]
 800c0ce:	f7fe feba 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 800c0d2:	f107 031c 	add.w	r3, r7, #28
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7ff fa01 	bl	800b4de <_ZN12SimpleStringD1Ev>

    return result;
 800c0dc:	bf00      	nop
}
 800c0de:	68f8      	ldr	r0, [r7, #12]
 800c0e0:	3728      	adds	r7, #40	; 0x28
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	080221f8 	.word	0x080221f8
 800c0ec:	080222a4 	.word	0x080222a4

0800c0f0 <_Z22StringFromBinaryOrNullPKhj>:

SimpleString StringFromBinaryOrNull(const unsigned char* value, size_t size)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b084      	sub	sp, #16
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	60f8      	str	r0, [r7, #12]
 800c0f8:	60b9      	str	r1, [r7, #8]
 800c0fa:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinary(value, size) : StringFrom("(null)");
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d006      	beq.n	800c110 <_Z22StringFromBinaryOrNullPKhj+0x20>
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	687a      	ldr	r2, [r7, #4]
 800c106:	68b9      	ldr	r1, [r7, #8]
 800c108:	4618      	mov	r0, r3
 800c10a:	f7ff ffa7 	bl	800c05c <_Z16StringFromBinaryPKhj>
 800c10e:	e004      	b.n	800c11a <_Z22StringFromBinaryOrNullPKhj+0x2a>
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	4904      	ldr	r1, [pc, #16]	; (800c124 <_Z22StringFromBinaryOrNullPKhj+0x34>)
 800c114:	4618      	mov	r0, r3
 800c116:	f7ff fc6f 	bl	800b9f8 <_Z10StringFromPKc>
}
 800c11a:	68f8      	ldr	r0, [r7, #12]
 800c11c:	3710      	adds	r7, #16
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
 800c122:	bf00      	nop
 800c124:	08022218 	.word	0x08022218

0800c128 <_Z24StringFromBinaryWithSizePKhj>:

SimpleString StringFromBinaryWithSize(const unsigned char* value, size_t size)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b088      	sub	sp, #32
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	60f8      	str	r0, [r7, #12]
 800c130:	60b9      	str	r1, [r7, #8]
 800c132:	607a      	str	r2, [r7, #4]
    SimpleString result = StringFromFormat("Size = %u | HexContents = ", (unsigned) size);
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	687a      	ldr	r2, [r7, #4]
 800c138:	4913      	ldr	r1, [pc, #76]	; (800c188 <_Z24StringFromBinaryWithSizePKhj+0x60>)
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7ff fed6 	bl	800beec <_Z16StringFromFormatPKcz>
    size_t displayedSize = ((size > 128) ? 128 : size);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2b80      	cmp	r3, #128	; 0x80
 800c144:	bf28      	it	cs
 800c146:	2380      	movcs	r3, #128	; 0x80
 800c148:	61fb      	str	r3, [r7, #28]
    result += StringFromBinaryOrNull(value, displayedSize);
 800c14a:	f107 0314 	add.w	r3, r7, #20
 800c14e:	69fa      	ldr	r2, [r7, #28]
 800c150:	68b9      	ldr	r1, [r7, #8]
 800c152:	4618      	mov	r0, r3
 800c154:	f7ff ffcc 	bl	800c0f0 <_Z22StringFromBinaryOrNullPKhj>
 800c158:	f107 0314 	add.w	r3, r7, #20
 800c15c:	4619      	mov	r1, r3
 800c15e:	68f8      	ldr	r0, [r7, #12]
 800c160:	f7ff fa3a 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 800c164:	f107 0314 	add.w	r3, r7, #20
 800c168:	4618      	mov	r0, r3
 800c16a:	f7ff f9b8 	bl	800b4de <_ZN12SimpleStringD1Ev>
    if (size > displayedSize)
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	69fb      	ldr	r3, [r7, #28]
 800c172:	429a      	cmp	r2, r3
 800c174:	d903      	bls.n	800c17e <_Z24StringFromBinaryWithSizePKhj+0x56>
    {
        result += " ...";
 800c176:	4905      	ldr	r1, [pc, #20]	; (800c18c <_Z24StringFromBinaryWithSizePKhj+0x64>)
 800c178:	68f8      	ldr	r0, [r7, #12]
 800c17a:	f7ff fa3f 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    }
    return result;
 800c17e:	bf00      	nop
}
 800c180:	68f8      	ldr	r0, [r7, #12]
 800c182:	3720      	adds	r7, #32
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}
 800c188:	080222ac 	.word	0x080222ac
 800c18c:	080222c8 	.word	0x080222c8

0800c190 <_Z30StringFromBinaryWithSizeOrNullPKhj>:

SimpleString StringFromBinaryWithSizeOrNull(const unsigned char* value, size_t size)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b084      	sub	sp, #16
 800c194:	af00      	add	r7, sp, #0
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	60b9      	str	r1, [r7, #8]
 800c19a:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinaryWithSize(value, size) : StringFrom("(null)");
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d006      	beq.n	800c1b0 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x20>
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	687a      	ldr	r2, [r7, #4]
 800c1a6:	68b9      	ldr	r1, [r7, #8]
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f7ff ffbd 	bl	800c128 <_Z24StringFromBinaryWithSizePKhj>
 800c1ae:	e004      	b.n	800c1ba <_Z30StringFromBinaryWithSizeOrNullPKhj+0x2a>
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	4904      	ldr	r1, [pc, #16]	; (800c1c4 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x34>)
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f7ff fc1f 	bl	800b9f8 <_Z10StringFromPKc>
}
 800c1ba:	68f8      	ldr	r0, [r7, #12]
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	08022218 	.word	0x08022218

0800c1c8 <_Z20StringFromMaskedBitsmmj>:

SimpleString StringFromMaskedBits(unsigned long value, unsigned long mask, size_t byteCount)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b088      	sub	sp, #32
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	60f8      	str	r0, [r7, #12]
 800c1d0:	60b9      	str	r1, [r7, #8]
 800c1d2:	607a      	str	r2, [r7, #4]
 800c1d4:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800c1d6:	4925      	ldr	r1, [pc, #148]	; (800c26c <_Z20StringFromMaskedBitsmmj+0xa4>)
 800c1d8:	68f8      	ldr	r0, [r7, #12]
 800c1da:	f7fe fdc8 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
    size_t bitCount = (byteCount > sizeof(unsigned long)) ? (sizeof(unsigned long) * CPPUTEST_CHAR_BIT) : (byteCount * CPPUTEST_CHAR_BIT);
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	2b04      	cmp	r3, #4
 800c1e2:	d802      	bhi.n	800c1ea <_Z20StringFromMaskedBitsmmj+0x22>
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	00db      	lsls	r3, r3, #3
 800c1e8:	e000      	b.n	800c1ec <_Z20StringFromMaskedBitsmmj+0x24>
 800c1ea:	2320      	movs	r3, #32
 800c1ec:	61bb      	str	r3, [r7, #24]
    const unsigned long msbMask = (((unsigned long) 1) << (bitCount - 1));
 800c1ee:	69bb      	ldr	r3, [r7, #24]
 800c1f0:	3b01      	subs	r3, #1
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	fa02 f303 	lsl.w	r3, r2, r3
 800c1f8:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < bitCount; i++) {
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	61fb      	str	r3, [r7, #28]
 800c1fe:	69fa      	ldr	r2, [r7, #28]
 800c200:	69bb      	ldr	r3, [r7, #24]
 800c202:	429a      	cmp	r2, r3
 800c204:	d22d      	bcs.n	800c262 <_Z20StringFromMaskedBitsmmj+0x9a>
        if (mask & msbMask) {
 800c206:	687a      	ldr	r2, [r7, #4]
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	4013      	ands	r3, r2
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d00c      	beq.n	800c22a <_Z20StringFromMaskedBitsmmj+0x62>
            result += (value & msbMask) ? "1" : "0";
 800c210:	68ba      	ldr	r2, [r7, #8]
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	4013      	ands	r3, r2
 800c216:	2b00      	cmp	r3, #0
 800c218:	d001      	beq.n	800c21e <_Z20StringFromMaskedBitsmmj+0x56>
 800c21a:	4b15      	ldr	r3, [pc, #84]	; (800c270 <_Z20StringFromMaskedBitsmmj+0xa8>)
 800c21c:	e000      	b.n	800c220 <_Z20StringFromMaskedBitsmmj+0x58>
 800c21e:	4b15      	ldr	r3, [pc, #84]	; (800c274 <_Z20StringFromMaskedBitsmmj+0xac>)
 800c220:	4619      	mov	r1, r3
 800c222:	68f8      	ldr	r0, [r7, #12]
 800c224:	f7ff f9ea 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
 800c228:	e003      	b.n	800c232 <_Z20StringFromMaskedBitsmmj+0x6a>
        }
        else {
            result += "x";
 800c22a:	4913      	ldr	r1, [pc, #76]	; (800c278 <_Z20StringFromMaskedBitsmmj+0xb0>)
 800c22c:	68f8      	ldr	r0, [r7, #12]
 800c22e:	f7ff f9e5 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
        }

        if (((i % 8) == 7) && (i != (bitCount - 1))) {
 800c232:	69fb      	ldr	r3, [r7, #28]
 800c234:	f003 0307 	and.w	r3, r3, #7
 800c238:	2b07      	cmp	r3, #7
 800c23a:	d108      	bne.n	800c24e <_Z20StringFromMaskedBitsmmj+0x86>
 800c23c:	69bb      	ldr	r3, [r7, #24]
 800c23e:	3b01      	subs	r3, #1
 800c240:	69fa      	ldr	r2, [r7, #28]
 800c242:	429a      	cmp	r2, r3
 800c244:	d003      	beq.n	800c24e <_Z20StringFromMaskedBitsmmj+0x86>
            result += " ";
 800c246:	490d      	ldr	r1, [pc, #52]	; (800c27c <_Z20StringFromMaskedBitsmmj+0xb4>)
 800c248:	68f8      	ldr	r0, [r7, #12]
 800c24a:	f7ff f9d7 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
        }

        value <<= 1;
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	005b      	lsls	r3, r3, #1
 800c252:	60bb      	str	r3, [r7, #8]
        mask <<= 1;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	005b      	lsls	r3, r3, #1
 800c258:	607b      	str	r3, [r7, #4]
    for (size_t i = 0; i < bitCount; i++) {
 800c25a:	69fb      	ldr	r3, [r7, #28]
 800c25c:	3301      	adds	r3, #1
 800c25e:	61fb      	str	r3, [r7, #28]
 800c260:	e7cd      	b.n	800c1fe <_Z20StringFromMaskedBitsmmj+0x36>
    }

    return result;
 800c262:	bf00      	nop
}
 800c264:	68f8      	ldr	r0, [r7, #12]
 800c266:	3720      	adds	r7, #32
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}
 800c26c:	080221f8 	.word	0x080221f8
 800c270:	080222d0 	.word	0x080222d0
 800c274:	080222d4 	.word	0x080222d4
 800c278:	080222d8 	.word	0x080222d8
 800c27c:	080222dc 	.word	0x080222dc

0800c280 <_Z23StringFromOrdinalNumberj>:

SimpleString StringFromOrdinalNumber(unsigned int number)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b084      	sub	sp, #16
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	6039      	str	r1, [r7, #0]
    unsigned int onesDigit = number % 10;
 800c28a:	683a      	ldr	r2, [r7, #0]
 800c28c:	4b18      	ldr	r3, [pc, #96]	; (800c2f0 <_Z23StringFromOrdinalNumberj+0x70>)
 800c28e:	fba3 1302 	umull	r1, r3, r3, r2
 800c292:	08d9      	lsrs	r1, r3, #3
 800c294:	460b      	mov	r3, r1
 800c296:	009b      	lsls	r3, r3, #2
 800c298:	440b      	add	r3, r1
 800c29a:	005b      	lsls	r3, r3, #1
 800c29c:	1ad3      	subs	r3, r2, r3
 800c29e:	60bb      	str	r3, [r7, #8]

    const char* suffix;
    if (number >= 11 && number <= 13) {
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	2b0a      	cmp	r3, #10
 800c2a4:	d905      	bls.n	800c2b2 <_Z23StringFromOrdinalNumberj+0x32>
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	2b0d      	cmp	r3, #13
 800c2aa:	d802      	bhi.n	800c2b2 <_Z23StringFromOrdinalNumberj+0x32>
        suffix = "th";
 800c2ac:	4b11      	ldr	r3, [pc, #68]	; (800c2f4 <_Z23StringFromOrdinalNumberj+0x74>)
 800c2ae:	60fb      	str	r3, [r7, #12]
 800c2b0:	e013      	b.n	800c2da <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (3 == onesDigit) {
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	2b03      	cmp	r3, #3
 800c2b6:	d102      	bne.n	800c2be <_Z23StringFromOrdinalNumberj+0x3e>
        suffix = "rd";
 800c2b8:	4b0f      	ldr	r3, [pc, #60]	; (800c2f8 <_Z23StringFromOrdinalNumberj+0x78>)
 800c2ba:	60fb      	str	r3, [r7, #12]
 800c2bc:	e00d      	b.n	800c2da <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (2 == onesDigit) {
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	2b02      	cmp	r3, #2
 800c2c2:	d102      	bne.n	800c2ca <_Z23StringFromOrdinalNumberj+0x4a>
        suffix = "nd";
 800c2c4:	4b0d      	ldr	r3, [pc, #52]	; (800c2fc <_Z23StringFromOrdinalNumberj+0x7c>)
 800c2c6:	60fb      	str	r3, [r7, #12]
 800c2c8:	e007      	b.n	800c2da <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (1 == onesDigit) {
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	d102      	bne.n	800c2d6 <_Z23StringFromOrdinalNumberj+0x56>
        suffix = "st";
 800c2d0:	4b0b      	ldr	r3, [pc, #44]	; (800c300 <_Z23StringFromOrdinalNumberj+0x80>)
 800c2d2:	60fb      	str	r3, [r7, #12]
 800c2d4:	e001      	b.n	800c2da <_Z23StringFromOrdinalNumberj+0x5a>
    } else {
        suffix = "th";
 800c2d6:	4b07      	ldr	r3, [pc, #28]	; (800c2f4 <_Z23StringFromOrdinalNumberj+0x74>)
 800c2d8:	60fb      	str	r3, [r7, #12]
    }

    return StringFromFormat("%u%s", number, suffix);
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	683a      	ldr	r2, [r7, #0]
 800c2e0:	4908      	ldr	r1, [pc, #32]	; (800c304 <_Z23StringFromOrdinalNumberj+0x84>)
 800c2e2:	f7ff fe03 	bl	800beec <_Z16StringFromFormatPKcz>
}
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	3710      	adds	r7, #16
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}
 800c2ee:	bf00      	nop
 800c2f0:	cccccccd 	.word	0xcccccccd
 800c2f4:	080222e0 	.word	0x080222e0
 800c2f8:	080222e4 	.word	0x080222e4
 800c2fc:	080222e8 	.word	0x080222e8
 800c300:	080222ec 	.word	0x080222ec
 800c304:	080222f0 	.word	0x080222f0

0800c308 <_ZN22SimpleStringCollectionC1Ev>:

SimpleStringCollection::SimpleStringCollection()
 800c308:	b580      	push	{r7, lr}
 800c30a:	b082      	sub	sp, #8
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	3304      	adds	r3, #4
 800c314:	4907      	ldr	r1, [pc, #28]	; (800c334 <_ZN22SimpleStringCollectionC1Ev+0x2c>)
 800c316:	4618      	mov	r0, r3
 800c318:	f7fe fd29 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
{
    collection_ = NULLPTR;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2200      	movs	r2, #0
 800c320:	601a      	str	r2, [r3, #0]
    size_ = 0;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2200      	movs	r2, #0
 800c326:	60da      	str	r2, [r3, #12]
}
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	4618      	mov	r0, r3
 800c32c:	3708      	adds	r7, #8
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
 800c332:	bf00      	nop
 800c334:	080221f8 	.word	0x080221f8

0800c338 <_ZN22SimpleStringCollection8allocateEj>:

void SimpleStringCollection::allocate(size_t _size)
{
 800c338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c33a:	b083      	sub	sp, #12
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
 800c340:	6039      	str	r1, [r7, #0]
    delete[] collection_;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d01e      	beq.n	800c388 <_ZN22SimpleStringCollection8allocateEj+0x50>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681a      	ldr	r2, [r3, #0]
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	3b04      	subs	r3, #4
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	00db      	lsls	r3, r3, #3
 800c358:	18d4      	adds	r4, r2, r3
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	429c      	cmp	r4, r3
 800c360:	d004      	beq.n	800c36c <_ZN22SimpleStringCollection8allocateEj+0x34>
 800c362:	3c08      	subs	r4, #8
 800c364:	4620      	mov	r0, r4
 800c366:	f7ff f8ba 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800c36a:	e7f6      	b.n	800c35a <_ZN22SimpleStringCollection8allocateEj+0x22>
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f1a3 0208 	sub.w	r2, r3, #8
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	3b04      	subs	r3, #4
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	3301      	adds	r3, #1
 800c37e:	00db      	lsls	r3, r3, #3
 800c380:	4619      	mov	r1, r3
 800c382:	4610      	mov	r0, r2
 800c384:	f7fc f976 	bl	8008674 <_ZdaPvj>

    size_ = _size;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	683a      	ldr	r2, [r7, #0]
 800c38c:	60da      	str	r2, [r3, #12]
    collection_ = new SimpleString[size_];
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	68dc      	ldr	r4, [r3, #12]
 800c392:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800c396:	d202      	bcs.n	800c39e <_ZN22SimpleStringCollection8allocateEj+0x66>
 800c398:	1c63      	adds	r3, r4, #1
 800c39a:	00db      	lsls	r3, r3, #3
 800c39c:	e001      	b.n	800c3a2 <_ZN22SimpleStringCollection8allocateEj+0x6a>
 800c39e:	f04f 33ff 	mov.w	r3, #4294967295
 800c3a2:	f240 4227 	movw	r2, #1063	; 0x427
 800c3a6:	4910      	ldr	r1, [pc, #64]	; (800c3e8 <_ZN22SimpleStringCollection8allocateEj+0xb0>)
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f7fc f941 	bl	8008630 <_ZnajPKci>
 800c3ae:	4605      	mov	r5, r0
 800c3b0:	1d2b      	adds	r3, r5, #4
 800c3b2:	3b04      	subs	r3, #4
 800c3b4:	2208      	movs	r2, #8
 800c3b6:	601a      	str	r2, [r3, #0]
 800c3b8:	1d2b      	adds	r3, r5, #4
 800c3ba:	601c      	str	r4, [r3, #0]
 800c3bc:	f105 0308 	add.w	r3, r5, #8
 800c3c0:	1e62      	subs	r2, r4, #1
 800c3c2:	4614      	mov	r4, r2
 800c3c4:	461e      	mov	r6, r3
 800c3c6:	2c00      	cmp	r4, #0
 800c3c8:	db06      	blt.n	800c3d8 <_ZN22SimpleStringCollection8allocateEj+0xa0>
 800c3ca:	4908      	ldr	r1, [pc, #32]	; (800c3ec <_ZN22SimpleStringCollection8allocateEj+0xb4>)
 800c3cc:	4630      	mov	r0, r6
 800c3ce:	f7fe fcce 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800c3d2:	3608      	adds	r6, #8
 800c3d4:	3c01      	subs	r4, #1
 800c3d6:	e7f6      	b.n	800c3c6 <_ZN22SimpleStringCollection8allocateEj+0x8e>
 800c3d8:	f105 0208 	add.w	r2, r5, #8
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	601a      	str	r2, [r3, #0]
}
 800c3e0:	bf00      	nop
 800c3e2:	370c      	adds	r7, #12
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3e8:	08022138 	.word	0x08022138
 800c3ec:	080221f8 	.word	0x080221f8

0800c3f0 <_ZN22SimpleStringCollectionD1Ev>:

SimpleStringCollection::~SimpleStringCollection()
 800c3f0:	b590      	push	{r4, r7, lr}
 800c3f2:	b083      	sub	sp, #12
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
{
    delete[] (collection_);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d01e      	beq.n	800c43e <_ZN22SimpleStringCollectionD1Ev+0x4e>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681a      	ldr	r2, [r3, #0]
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	3b04      	subs	r3, #4
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	00db      	lsls	r3, r3, #3
 800c40e:	18d4      	adds	r4, r2, r3
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	429c      	cmp	r4, r3
 800c416:	d004      	beq.n	800c422 <_ZN22SimpleStringCollectionD1Ev+0x32>
 800c418:	3c08      	subs	r4, #8
 800c41a:	4620      	mov	r0, r4
 800c41c:	f7ff f85f 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800c420:	e7f6      	b.n	800c410 <_ZN22SimpleStringCollectionD1Ev+0x20>
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	f1a3 0208 	sub.w	r2, r3, #8
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	3b04      	subs	r3, #4
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	3301      	adds	r3, #1
 800c434:	00db      	lsls	r3, r3, #3
 800c436:	4619      	mov	r1, r3
 800c438:	4610      	mov	r0, r2
 800c43a:	f7fc f91b 	bl	8008674 <_ZdaPvj>
SimpleStringCollection::~SimpleStringCollection()
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	3304      	adds	r3, #4
 800c442:	4618      	mov	r0, r3
 800c444:	f7ff f84b 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	4618      	mov	r0, r3
 800c44c:	370c      	adds	r7, #12
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd90      	pop	{r4, r7, pc}

0800c452 <_ZNK22SimpleStringCollection4sizeEv>:

size_t SimpleStringCollection::size() const
{
 800c452:	b480      	push	{r7}
 800c454:	b083      	sub	sp, #12
 800c456:	af00      	add	r7, sp, #0
 800c458:	6078      	str	r0, [r7, #4]
    return size_;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	68db      	ldr	r3, [r3, #12]
}
 800c45e:	4618      	mov	r0, r3
 800c460:	370c      	adds	r7, #12
 800c462:	46bd      	mov	sp, r7
 800c464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c468:	4770      	bx	lr
	...

0800c46c <_ZN22SimpleStringCollectionixEj>:

SimpleString& SimpleStringCollection::operator[](size_t index)
{
 800c46c:	b590      	push	{r4, r7, lr}
 800c46e:	b085      	sub	sp, #20
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	6039      	str	r1, [r7, #0]
    if (index >= size_) {
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	68db      	ldr	r3, [r3, #12]
 800c47a:	683a      	ldr	r2, [r7, #0]
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d315      	bcc.n	800c4ac <_ZN22SimpleStringCollectionixEj+0x40>
        empty_ = "";
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	1d1c      	adds	r4, r3, #4
 800c484:	f107 0308 	add.w	r3, r7, #8
 800c488:	490d      	ldr	r1, [pc, #52]	; (800c4c0 <_ZN22SimpleStringCollectionixEj+0x54>)
 800c48a:	4618      	mov	r0, r3
 800c48c:	f7fe fc6f 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800c490:	f107 0308 	add.w	r3, r7, #8
 800c494:	4619      	mov	r1, r3
 800c496:	4620      	mov	r0, r4
 800c498:	f7fe fcd5 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 800c49c:	f107 0308 	add.w	r3, r7, #8
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f7ff f81c 	bl	800b4de <_ZN12SimpleStringD1Ev>
        return empty_;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	3304      	adds	r3, #4
 800c4aa:	e004      	b.n	800c4b6 <_ZN22SimpleStringCollectionixEj+0x4a>
    }

    return collection_[index];
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681a      	ldr	r2, [r3, #0]
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	00db      	lsls	r3, r3, #3
 800c4b4:	4413      	add	r3, r2
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3714      	adds	r7, #20
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd90      	pop	{r4, r7, pc}
 800c4be:	bf00      	nop
 800c4c0:	080221f8 	.word	0x080221f8

0800c4c4 <_ZN18TeamCityTestOutputC1Ev>:
#include "CppUTest/TestHarness.h"
#include "CppUTest/TeamCityTestOutput.h"

TeamCityTestOutput::TeamCityTestOutput() : currtest_(NULLPTR), currGroup_()
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f7fa fb88 	bl	8006be4 <_ZN17ConsoleTestOutputC1Ev>
 800c4d4:	4a08      	ldr	r2, [pc, #32]	; (800c4f8 <_ZN18TeamCityTestOutputC1Ev+0x34>)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	601a      	str	r2, [r3, #0]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	611a      	str	r2, [r3, #16]
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	3314      	adds	r3, #20
 800c4e4:	4905      	ldr	r1, [pc, #20]	; (800c4fc <_ZN18TeamCityTestOutputC1Ev+0x38>)
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f7fe fc41 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
{
}
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3708      	adds	r7, #8
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}
 800c4f6:	bf00      	nop
 800c4f8:	080257b4 	.word	0x080257b4
 800c4fc:	080222f8 	.word	0x080222f8

0800c500 <_ZN18TeamCityTestOutputD1Ev>:

TeamCityTestOutput::~TeamCityTestOutput()
 800c500:	b580      	push	{r7, lr}
 800c502:	b082      	sub	sp, #8
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	4a08      	ldr	r2, [pc, #32]	; (800c52c <_ZN18TeamCityTestOutputD1Ev+0x2c>)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	601a      	str	r2, [r3, #0]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	3314      	adds	r3, #20
 800c512:	4618      	mov	r0, r3
 800c514:	f7fe ffe3 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	4618      	mov	r0, r3
 800c51c:	f7fa fb74 	bl	8006c08 <_ZN17ConsoleTestOutputD1Ev>
{
}
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	4618      	mov	r0, r3
 800c524:	3708      	adds	r7, #8
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	080257b4 	.word	0x080257b4

0800c530 <_ZN18TeamCityTestOutputD0Ev>:
TeamCityTestOutput::~TeamCityTestOutput()
 800c530:	b580      	push	{r7, lr}
 800c532:	b082      	sub	sp, #8
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
}
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f7ff ffe1 	bl	800c500 <_ZN18TeamCityTestOutputD1Ev>
 800c53e:	211c      	movs	r1, #28
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f7fc f865 	bl	8008610 <_ZdlPvj>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	4618      	mov	r0, r3
 800c54a:	3708      	adds	r7, #8
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}

0800c550 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b086      	sub	sp, #24
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
 800c558:	6039      	str	r1, [r7, #0]
    print("##teamcity[testStarted name='");
 800c55a:	687a      	ldr	r2, [r7, #4]
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	332c      	adds	r3, #44	; 0x2c
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	492b      	ldr	r1, [pc, #172]	; (800c614 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc4>)
 800c566:	4610      	mov	r0, r2
 800c568:	4798      	blx	r3
    printEscaped(test.getName().asCharString());
 800c56a:	f107 0308 	add.w	r3, r7, #8
 800c56e:	6839      	ldr	r1, [r7, #0]
 800c570:	4618      	mov	r0, r3
 800c572:	f004 fdf7 	bl	8011164 <_ZNK10UtestShell7getNameEv>
 800c576:	f107 0308 	add.w	r3, r7, #8
 800c57a:	4618      	mov	r0, r3
 800c57c:	f7fe ff82 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 800c580:	4603      	mov	r3, r0
 800c582:	4619      	mov	r1, r3
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f000 f919 	bl	800c7bc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800c58a:	f107 0308 	add.w	r3, r7, #8
 800c58e:	4618      	mov	r0, r3
 800c590:	f7fe ffa5 	bl	800b4de <_ZN12SimpleStringD1Ev>
    print("']\n");
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	332c      	adds	r3, #44	; 0x2c
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	491e      	ldr	r1, [pc, #120]	; (800c618 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800c5a0:	4610      	mov	r0, r2
 800c5a2:	4798      	blx	r3
    if (!test.willRun()) {
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	3318      	adds	r3, #24
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	6838      	ldr	r0, [r7, #0]
 800c5ae:	4798      	blx	r3
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	f083 0301 	eor.w	r3, r3, #1
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d024      	beq.n	800c606 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xb6>
        print("##teamcity[testIgnored name='");
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	332c      	adds	r3, #44	; 0x2c
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	4915      	ldr	r1, [pc, #84]	; (800c61c <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xcc>)
 800c5c8:	4610      	mov	r0, r2
 800c5ca:	4798      	blx	r3
        printEscaped(test.getName().asCharString());
 800c5cc:	f107 0310 	add.w	r3, r7, #16
 800c5d0:	6839      	ldr	r1, [r7, #0]
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f004 fdc6 	bl	8011164 <_ZNK10UtestShell7getNameEv>
 800c5d8:	f107 0310 	add.w	r3, r7, #16
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7fe ff51 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	4619      	mov	r1, r3
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 f8e8 	bl	800c7bc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800c5ec:	f107 0310 	add.w	r3, r7, #16
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f7fe ff74 	bl	800b4de <_ZN12SimpleStringD1Ev>
        print("']\n");
 800c5f6:	687a      	ldr	r2, [r7, #4]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	332c      	adds	r3, #44	; 0x2c
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	4905      	ldr	r1, [pc, #20]	; (800c618 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800c602:	4610      	mov	r0, r2
 800c604:	4798      	blx	r3
    }
    currtest_ = &test;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	683a      	ldr	r2, [r7, #0]
 800c60a:	611a      	str	r2, [r3, #16]
}
 800c60c:	bf00      	nop
 800c60e:	3718      	adds	r7, #24
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}
 800c614:	080222fc 	.word	0x080222fc
 800c618:	0802231c 	.word	0x0802231c
 800c61c:	08022320 	.word	0x08022320

0800c620 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800c620:	b5b0      	push	{r4, r5, r7, lr}
 800c622:	b084      	sub	sp, #16
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	6039      	str	r1, [r7, #0]
    if (!currtest_)
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	691b      	ldr	r3, [r3, #16]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d03b      	beq.n	800c6aa <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8a>
        return;

    print("##teamcity[testFinished name='");
 800c632:	687a      	ldr	r2, [r7, #4]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	332c      	adds	r3, #44	; 0x2c
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	491d      	ldr	r1, [pc, #116]	; (800c6b4 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x94>)
 800c63e:	4610      	mov	r0, r2
 800c640:	4798      	blx	r3
    printEscaped(currtest_->getName().asCharString());
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	691a      	ldr	r2, [r3, #16]
 800c646:	f107 0308 	add.w	r3, r7, #8
 800c64a:	4611      	mov	r1, r2
 800c64c:	4618      	mov	r0, r3
 800c64e:	f004 fd89 	bl	8011164 <_ZNK10UtestShell7getNameEv>
 800c652:	f107 0308 	add.w	r3, r7, #8
 800c656:	4618      	mov	r0, r3
 800c658:	f7fe ff14 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 800c65c:	4603      	mov	r3, r0
 800c65e:	4619      	mov	r1, r3
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f000 f8ab 	bl	800c7bc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800c666:	f107 0308 	add.w	r3, r7, #8
 800c66a:	4618      	mov	r0, r3
 800c66c:	f7fe ff37 	bl	800b4de <_ZN12SimpleStringD1Ev>
    print("' duration='");
 800c670:	687a      	ldr	r2, [r7, #4]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	332c      	adds	r3, #44	; 0x2c
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	490f      	ldr	r1, [pc, #60]	; (800c6b8 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x98>)
 800c67c:	4610      	mov	r0, r2
 800c67e:	4798      	blx	r3
    print(res.getCurrentTestTotalExecutionTime());
 800c680:	687d      	ldr	r5, [r7, #4]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	3334      	adds	r3, #52	; 0x34
 800c688:	681c      	ldr	r4, [r3, #0]
 800c68a:	6838      	ldr	r0, [r7, #0]
 800c68c:	f004 fa0a 	bl	8010aa4 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800c690:	4603      	mov	r3, r0
 800c692:	4619      	mov	r1, r3
 800c694:	4628      	mov	r0, r5
 800c696:	47a0      	blx	r4
    print("']\n");
 800c698:	687a      	ldr	r2, [r7, #4]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	332c      	adds	r3, #44	; 0x2c
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	4906      	ldr	r1, [pc, #24]	; (800c6bc <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x9c>)
 800c6a4:	4610      	mov	r0, r2
 800c6a6:	4798      	blx	r3
 800c6a8:	e000      	b.n	800c6ac <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8c>
        return;
 800c6aa:	bf00      	nop
}
 800c6ac:	3710      	adds	r7, #16
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bdb0      	pop	{r4, r5, r7, pc}
 800c6b2:	bf00      	nop
 800c6b4:	08022340 	.word	0x08022340
 800c6b8:	08022360 	.word	0x08022360
 800c6bc:	0802231c 	.word	0x0802231c

0800c6c0 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800c6c0:	b590      	push	{r4, r7, lr}
 800c6c2:	b085      	sub	sp, #20
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
 800c6c8:	6039      	str	r1, [r7, #0]
    currGroup_ = test.getGroup();
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f103 0414 	add.w	r4, r3, #20
 800c6d0:	f107 0308 	add.w	r3, r7, #8
 800c6d4:	6839      	ldr	r1, [r7, #0]
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f004 fd53 	bl	8011182 <_ZNK10UtestShell8getGroupEv>
 800c6dc:	f107 0308 	add.w	r3, r7, #8
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	4620      	mov	r0, r4
 800c6e4:	f7fe fbaf 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 800c6e8:	f107 0308 	add.w	r3, r7, #8
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f7fe fef6 	bl	800b4de <_ZN12SimpleStringD1Ev>
    print("##teamcity[testSuiteStarted name='");
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	332c      	adds	r3, #44	; 0x2c
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	490c      	ldr	r1, [pc, #48]	; (800c730 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x70>)
 800c6fe:	4610      	mov	r0, r2
 800c700:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	3314      	adds	r3, #20
 800c706:	4618      	mov	r0, r3
 800c708:	f7fe febc 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 800c70c:	4603      	mov	r3, r0
 800c70e:	4619      	mov	r1, r3
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f000 f853 	bl	800c7bc <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800c716:	687a      	ldr	r2, [r7, #4]
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	332c      	adds	r3, #44	; 0x2c
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4904      	ldr	r1, [pc, #16]	; (800c734 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x74>)
 800c722:	4610      	mov	r0, r2
 800c724:	4798      	blx	r3
}
 800c726:	bf00      	nop
 800c728:	3714      	adds	r7, #20
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd90      	pop	{r4, r7, pc}
 800c72e:	bf00      	nop
 800c730:	08022370 	.word	0x08022370
 800c734:	0802231c 	.word	0x0802231c

0800c738 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800c738:	b590      	push	{r4, r7, lr}
 800c73a:	b085      	sub	sp, #20
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]
    if (currGroup_ == "")
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f103 0414 	add.w	r4, r3, #20
 800c748:	f107 0308 	add.w	r3, r7, #8
 800c74c:	4918      	ldr	r1, [pc, #96]	; (800c7b0 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x78>)
 800c74e:	4618      	mov	r0, r3
 800c750:	f7fe fb0d 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800c754:	f107 0308 	add.w	r3, r7, #8
 800c758:	4619      	mov	r1, r3
 800c75a:	4620      	mov	r0, r4
 800c75c:	f7fe fecb 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 800c760:	4603      	mov	r3, r0
 800c762:	461c      	mov	r4, r3
 800c764:	f107 0308 	add.w	r3, r7, #8
 800c768:	4618      	mov	r0, r3
 800c76a:	f7fe feb8 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800c76e:	2c00      	cmp	r4, #0
 800c770:	d11a      	bne.n	800c7a8 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x70>
        return;

    print("##teamcity[testSuiteFinished name='");
 800c772:	687a      	ldr	r2, [r7, #4]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	332c      	adds	r3, #44	; 0x2c
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	490d      	ldr	r1, [pc, #52]	; (800c7b4 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x7c>)
 800c77e:	4610      	mov	r0, r2
 800c780:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	3314      	adds	r3, #20
 800c786:	4618      	mov	r0, r3
 800c788:	f7fe fe7c 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 800c78c:	4603      	mov	r3, r0
 800c78e:	4619      	mov	r1, r3
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f000 f813 	bl	800c7bc <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800c796:	687a      	ldr	r2, [r7, #4]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	332c      	adds	r3, #44	; 0x2c
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4905      	ldr	r1, [pc, #20]	; (800c7b8 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x80>)
 800c7a2:	4610      	mov	r0, r2
 800c7a4:	4798      	blx	r3
 800c7a6:	e000      	b.n	800c7aa <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x72>
        return;
 800c7a8:	bf00      	nop
}
 800c7aa:	3714      	adds	r7, #20
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd90      	pop	{r4, r7, pc}
 800c7b0:	080222f8 	.word	0x080222f8
 800c7b4:	08022394 	.word	0x08022394
 800c7b8:	0802231c 	.word	0x0802231c

0800c7bc <_ZN18TeamCityTestOutput12printEscapedEPKc>:

void TeamCityTestOutput::printEscaped(const char* s)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b084      	sub	sp, #16
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	6039      	str	r1, [r7, #0]
    while (*s) {
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	781b      	ldrb	r3, [r3, #0]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d03f      	beq.n	800c84e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x92>
        char str[3];
        if ((*s == '\'') || (*s == '|') || (*s == '[') || (*s == ']')) {
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	781b      	ldrb	r3, [r3, #0]
 800c7d2:	2b27      	cmp	r3, #39	; 0x27
 800c7d4:	d00b      	beq.n	800c7ee <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	781b      	ldrb	r3, [r3, #0]
 800c7da:	2b7c      	cmp	r3, #124	; 0x7c
 800c7dc:	d007      	beq.n	800c7ee <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	781b      	ldrb	r3, [r3, #0]
 800c7e2:	2b5b      	cmp	r3, #91	; 0x5b
 800c7e4:	d003      	beq.n	800c7ee <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	781b      	ldrb	r3, [r3, #0]
 800c7ea:	2b5d      	cmp	r3, #93	; 0x5d
 800c7ec:	d107      	bne.n	800c7fe <_ZN18TeamCityTestOutput12printEscapedEPKc+0x42>
            str[0] = '|';
 800c7ee:	237c      	movs	r3, #124	; 0x7c
 800c7f0:	733b      	strb	r3, [r7, #12]
            str[1] = *s;
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	781b      	ldrb	r3, [r3, #0]
 800c7f6:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	73bb      	strb	r3, [r7, #14]
 800c7fc:	e01a      	b.n	800c834 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\r') {
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	2b0d      	cmp	r3, #13
 800c804:	d106      	bne.n	800c814 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x58>
            str[0] = '|';
 800c806:	237c      	movs	r3, #124	; 0x7c
 800c808:	733b      	strb	r3, [r7, #12]
            str[1] = 'r';
 800c80a:	2372      	movs	r3, #114	; 0x72
 800c80c:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800c80e:	2300      	movs	r3, #0
 800c810:	73bb      	strb	r3, [r7, #14]
 800c812:	e00f      	b.n	800c834 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\n') {
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	2b0a      	cmp	r3, #10
 800c81a:	d106      	bne.n	800c82a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x6e>
            str[0] = '|';
 800c81c:	237c      	movs	r3, #124	; 0x7c
 800c81e:	733b      	strb	r3, [r7, #12]
            str[1] = 'n';
 800c820:	236e      	movs	r3, #110	; 0x6e
 800c822:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800c824:	2300      	movs	r3, #0
 800c826:	73bb      	strb	r3, [r7, #14]
 800c828:	e004      	b.n	800c834 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else {
            str[0] = *s;
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	733b      	strb	r3, [r7, #12]
            str[1] = 0;
 800c830:	2300      	movs	r3, #0
 800c832:	737b      	strb	r3, [r7, #13]
        }
        printBuffer(str);
 800c834:	687a      	ldr	r2, [r7, #4]
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	3328      	adds	r3, #40	; 0x28
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	f107 010c 	add.w	r1, r7, #12
 800c842:	4610      	mov	r0, r2
 800c844:	4798      	blx	r3
        s++;
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	3301      	adds	r3, #1
 800c84a:	603b      	str	r3, [r7, #0]
    while (*s) {
 800c84c:	e7bb      	b.n	800c7c6 <_ZN18TeamCityTestOutput12printEscapedEPKc+0xa>
    }
}
 800c84e:	bf00      	nop
 800c850:	3710      	adds	r7, #16
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}
	...

0800c858 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure>:

void TeamCityTestOutput::printFailure(const TestFailure& failure)
{
 800c858:	b5b0      	push	{r4, r5, r7, lr}
 800c85a:	b08a      	sub	sp, #40	; 0x28
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	6039      	str	r1, [r7, #0]
    print("##teamcity[testFailed name='");
 800c862:	687a      	ldr	r2, [r7, #4]
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	332c      	adds	r3, #44	; 0x2c
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	4968      	ldr	r1, [pc, #416]	; (800ca10 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1b8>)
 800c86e:	4610      	mov	r0, r2
 800c870:	4798      	blx	r3
    printEscaped(failure.getTestNameOnly().asCharString());
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	3310      	adds	r3, #16
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f107 0208 	add.w	r2, r7, #8
 800c87e:	6839      	ldr	r1, [r7, #0]
 800c880:	4610      	mov	r0, r2
 800c882:	4798      	blx	r3
 800c884:	f107 0308 	add.w	r3, r7, #8
 800c888:	4618      	mov	r0, r3
 800c88a:	f7fe fdfb 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 800c88e:	4603      	mov	r3, r0
 800c890:	4619      	mov	r1, r3
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f7ff ff92 	bl	800c7bc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800c898:	f107 0308 	add.w	r3, r7, #8
 800c89c:	4618      	mov	r0, r3
 800c89e:	f7fe fe1e 	bl	800b4de <_ZN12SimpleStringD1Ev>
    print("' message='");
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	332c      	adds	r3, #44	; 0x2c
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	4959      	ldr	r1, [pc, #356]	; (800ca14 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1bc>)
 800c8ae:	4610      	mov	r0, r2
 800c8b0:	4798      	blx	r3
    if (failure.isOutsideTestFile() || failure.isInHelperFunction()) {
 800c8b2:	6838      	ldr	r0, [r7, #0]
 800c8b4:	f000 fa15 	bl	800cce2 <_ZNK11TestFailure17isOutsideTestFileEv>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d105      	bne.n	800c8ca <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x72>
 800c8be:	6838      	ldr	r0, [r7, #0]
 800c8c0:	f000 fa21 	bl	800cd06 <_ZNK11TestFailure18isInHelperFunctionEv>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d001      	beq.n	800c8ce <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x76>
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	e000      	b.n	800c8d0 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x78>
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d042      	beq.n	800c95a <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x102>
        print("TEST failed (");
 800c8d4:	687a      	ldr	r2, [r7, #4]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	332c      	adds	r3, #44	; 0x2c
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	494e      	ldr	r1, [pc, #312]	; (800ca18 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c0>)
 800c8e0:	4610      	mov	r0, r2
 800c8e2:	4798      	blx	r3
        print(failure.getTestFileName().asCharString());
 800c8e4:	687d      	ldr	r5, [r7, #4]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	332c      	adds	r3, #44	; 0x2c
 800c8ec:	681c      	ldr	r4, [r3, #0]
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	331c      	adds	r3, #28
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f107 0210 	add.w	r2, r7, #16
 800c8fa:	6839      	ldr	r1, [r7, #0]
 800c8fc:	4610      	mov	r0, r2
 800c8fe:	4798      	blx	r3
 800c900:	f107 0310 	add.w	r3, r7, #16
 800c904:	4618      	mov	r0, r3
 800c906:	f7fe fdbd 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 800c90a:	4603      	mov	r3, r0
 800c90c:	4619      	mov	r1, r3
 800c90e:	4628      	mov	r0, r5
 800c910:	47a0      	blx	r4
 800c912:	f107 0310 	add.w	r3, r7, #16
 800c916:	4618      	mov	r0, r3
 800c918:	f7fe fde1 	bl	800b4de <_ZN12SimpleStringD1Ev>
        print(":");
 800c91c:	687a      	ldr	r2, [r7, #4]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	332c      	adds	r3, #44	; 0x2c
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	493d      	ldr	r1, [pc, #244]	; (800ca1c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800c928:	4610      	mov	r0, r2
 800c92a:	4798      	blx	r3
        print(failure.getTestLineNumber());
 800c92c:	687d      	ldr	r5, [r7, #4]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	3334      	adds	r3, #52	; 0x34
 800c934:	681c      	ldr	r4, [r3, #0]
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	3320      	adds	r3, #32
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	6838      	ldr	r0, [r7, #0]
 800c940:	4798      	blx	r3
 800c942:	4603      	mov	r3, r0
 800c944:	4619      	mov	r1, r3
 800c946:	4628      	mov	r0, r5
 800c948:	47a0      	blx	r4
        print("): ");
 800c94a:	687a      	ldr	r2, [r7, #4]
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	332c      	adds	r3, #44	; 0x2c
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4932      	ldr	r1, [pc, #200]	; (800ca20 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c8>)
 800c956:	4610      	mov	r0, r2
 800c958:	4798      	blx	r3
    }

    printEscaped(failure.getFileName().asCharString());
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	3308      	adds	r3, #8
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	f107 0218 	add.w	r2, r7, #24
 800c966:	6839      	ldr	r1, [r7, #0]
 800c968:	4610      	mov	r0, r2
 800c96a:	4798      	blx	r3
 800c96c:	f107 0318 	add.w	r3, r7, #24
 800c970:	4618      	mov	r0, r3
 800c972:	f7fe fd87 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 800c976:	4603      	mov	r3, r0
 800c978:	4619      	mov	r1, r3
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f7ff ff1e 	bl	800c7bc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800c980:	f107 0318 	add.w	r3, r7, #24
 800c984:	4618      	mov	r0, r3
 800c986:	f7fe fdaa 	bl	800b4de <_ZN12SimpleStringD1Ev>
    print(":");
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	332c      	adds	r3, #44	; 0x2c
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	4921      	ldr	r1, [pc, #132]	; (800ca1c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800c996:	4610      	mov	r0, r2
 800c998:	4798      	blx	r3
    print(failure.getFailureLineNumber());
 800c99a:	687d      	ldr	r5, [r7, #4]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	3334      	adds	r3, #52	; 0x34
 800c9a2:	681c      	ldr	r4, [r3, #0]
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	3314      	adds	r3, #20
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	6838      	ldr	r0, [r7, #0]
 800c9ae:	4798      	blx	r3
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	4619      	mov	r1, r3
 800c9b4:	4628      	mov	r0, r5
 800c9b6:	47a0      	blx	r4

    print("' details='");
 800c9b8:	687a      	ldr	r2, [r7, #4]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	332c      	adds	r3, #44	; 0x2c
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	4918      	ldr	r1, [pc, #96]	; (800ca24 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1cc>)
 800c9c4:	4610      	mov	r0, r2
 800c9c6:	4798      	blx	r3
    printEscaped(failure.getMessage().asCharString());
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	3318      	adds	r3, #24
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f107 0220 	add.w	r2, r7, #32
 800c9d4:	6839      	ldr	r1, [r7, #0]
 800c9d6:	4610      	mov	r0, r2
 800c9d8:	4798      	blx	r3
 800c9da:	f107 0320 	add.w	r3, r7, #32
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7fe fd50 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	4619      	mov	r1, r3
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f7ff fee7 	bl	800c7bc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800c9ee:	f107 0320 	add.w	r3, r7, #32
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f7fe fd73 	bl	800b4de <_ZN12SimpleStringD1Ev>
    print("']\n");
 800c9f8:	687a      	ldr	r2, [r7, #4]
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	332c      	adds	r3, #44	; 0x2c
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	4909      	ldr	r1, [pc, #36]	; (800ca28 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1d0>)
 800ca04:	4610      	mov	r0, r2
 800ca06:	4798      	blx	r3
}
 800ca08:	bf00      	nop
 800ca0a:	3728      	adds	r7, #40	; 0x28
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bdb0      	pop	{r4, r5, r7, pc}
 800ca10:	080223b8 	.word	0x080223b8
 800ca14:	080223d8 	.word	0x080223d8
 800ca18:	080223e4 	.word	0x080223e4
 800ca1c:	080223f4 	.word	0x080223f4
 800ca20:	080223f8 	.word	0x080223f8
 800ca24:	080223fc 	.word	0x080223fc
 800ca28:	0802231c 	.word	0x0802231c

0800ca2c <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>:
TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& theMessage) :
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNumber), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
{
}

TestFailure::TestFailure(UtestShell* test, const SimpleString& theMessage) :
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b084      	sub	sp, #16
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	60f8      	str	r0, [r7, #12]
 800ca34:	60b9      	str	r1, [r7, #8]
 800ca36:	607a      	str	r2, [r7, #4]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(test->getFile()), lineNumber_(test->getLineNumber()), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
 800ca38:	4a1a      	ldr	r2, [pc, #104]	; (800caa4 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString+0x78>)
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	601a      	str	r2, [r3, #0]
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	3314      	adds	r3, #20
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	68fa      	ldr	r2, [r7, #12]
 800ca48:	3204      	adds	r2, #4
 800ca4a:	68b9      	ldr	r1, [r7, #8]
 800ca4c:	4610      	mov	r0, r2
 800ca4e:	4798      	blx	r3
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	330c      	adds	r3, #12
 800ca54:	68b9      	ldr	r1, [r7, #8]
 800ca56:	4618      	mov	r0, r3
 800ca58:	f004 fb84 	bl	8011164 <_ZNK10UtestShell7getNameEv>
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	3314      	adds	r3, #20
 800ca60:	68b9      	ldr	r1, [r7, #8]
 800ca62:	4618      	mov	r0, r3
 800ca64:	f004 fc4f 	bl	8011306 <_ZNK10UtestShell7getFileEv>
 800ca68:	68b8      	ldr	r0, [r7, #8]
 800ca6a:	f004 fc5b 	bl	8011324 <_ZNK10UtestShell13getLineNumberEv>
 800ca6e:	4602      	mov	r2, r0
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	61da      	str	r2, [r3, #28]
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	3320      	adds	r3, #32
 800ca78:	68b9      	ldr	r1, [r7, #8]
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f004 fc43 	bl	8011306 <_ZNK10UtestShell7getFileEv>
 800ca80:	68b8      	ldr	r0, [r7, #8]
 800ca82:	f004 fc4f 	bl	8011324 <_ZNK10UtestShell13getLineNumberEv>
 800ca86:	4602      	mov	r2, r0
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	629a      	str	r2, [r3, #40]	; 0x28
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	332c      	adds	r3, #44	; 0x2c
 800ca90:	6879      	ldr	r1, [r7, #4]
 800ca92:	4618      	mov	r0, r3
 800ca94:	f7fe f9bf 	bl	800ae16 <_ZN12SimpleStringC1ERKS_>
{
}
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3710      	adds	r7, #16
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}
 800caa2:	bf00      	nop
 800caa4:	08025a80 	.word	0x08025a80

0800caa8 <_ZN11TestFailureC1EP10UtestShellPKcj>:

TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNum) :
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b084      	sub	sp, #16
 800caac:	af00      	add	r7, sp, #0
 800caae:	60f8      	str	r0, [r7, #12]
 800cab0:	60b9      	str	r1, [r7, #8]
 800cab2:	607a      	str	r2, [r7, #4]
 800cab4:	603b      	str	r3, [r7, #0]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNum), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_("no message")
 800cab6:	4a19      	ldr	r2, [pc, #100]	; (800cb1c <_ZN11TestFailureC1EP10UtestShellPKcj+0x74>)
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	601a      	str	r2, [r3, #0]
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	3314      	adds	r3, #20
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	68fa      	ldr	r2, [r7, #12]
 800cac6:	3204      	adds	r2, #4
 800cac8:	68b9      	ldr	r1, [r7, #8]
 800caca:	4610      	mov	r0, r2
 800cacc:	4798      	blx	r3
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	330c      	adds	r3, #12
 800cad2:	68b9      	ldr	r1, [r7, #8]
 800cad4:	4618      	mov	r0, r3
 800cad6:	f004 fb45 	bl	8011164 <_ZNK10UtestShell7getNameEv>
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	3314      	adds	r3, #20
 800cade:	6879      	ldr	r1, [r7, #4]
 800cae0:	4618      	mov	r0, r3
 800cae2:	f7fe f944 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	683a      	ldr	r2, [r7, #0]
 800caea:	61da      	str	r2, [r3, #28]
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	3320      	adds	r3, #32
 800caf0:	68b9      	ldr	r1, [r7, #8]
 800caf2:	4618      	mov	r0, r3
 800caf4:	f004 fc07 	bl	8011306 <_ZNK10UtestShell7getFileEv>
 800caf8:	68b8      	ldr	r0, [r7, #8]
 800cafa:	f004 fc13 	bl	8011324 <_ZNK10UtestShell13getLineNumberEv>
 800cafe:	4602      	mov	r2, r0
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	629a      	str	r2, [r3, #40]	; 0x28
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	332c      	adds	r3, #44	; 0x2c
 800cb08:	4905      	ldr	r1, [pc, #20]	; (800cb20 <_ZN11TestFailureC1EP10UtestShellPKcj+0x78>)
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7fe f92f 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
{
}
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	4618      	mov	r0, r3
 800cb14:	3710      	adds	r7, #16
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}
 800cb1a:	bf00      	nop
 800cb1c:	08025a80 	.word	0x08025a80
 800cb20:	08022408 	.word	0x08022408

0800cb24 <_ZN11TestFailureC1ERKS_>:

TestFailure::TestFailure(const TestFailure& f) :
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b082      	sub	sp, #8
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	6039      	str	r1, [r7, #0]
    testName_(f.testName_), testNameOnly_(f.testNameOnly_), fileName_(f.fileName_), lineNumber_(f.lineNumber_), testFileName_(f.testFileName_), testLineNumber_(f.testLineNumber_), message_(f.message_)
 800cb2e:	4a1e      	ldr	r2, [pc, #120]	; (800cba8 <_ZN11TestFailureC1ERKS_+0x84>)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	601a      	str	r2, [r3, #0]
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	1d1a      	adds	r2, r3, #4
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	3304      	adds	r3, #4
 800cb3c:	4619      	mov	r1, r3
 800cb3e:	4610      	mov	r0, r2
 800cb40:	f7fe f969 	bl	800ae16 <_ZN12SimpleStringC1ERKS_>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f103 020c 	add.w	r2, r3, #12
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	330c      	adds	r3, #12
 800cb4e:	4619      	mov	r1, r3
 800cb50:	4610      	mov	r0, r2
 800cb52:	f7fe f960 	bl	800ae16 <_ZN12SimpleStringC1ERKS_>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f103 0214 	add.w	r2, r3, #20
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	3314      	adds	r3, #20
 800cb60:	4619      	mov	r1, r3
 800cb62:	4610      	mov	r0, r2
 800cb64:	f7fe f957 	bl	800ae16 <_ZN12SimpleStringC1ERKS_>
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	69da      	ldr	r2, [r3, #28]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	61da      	str	r2, [r3, #28]
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f103 0220 	add.w	r2, r3, #32
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	3320      	adds	r3, #32
 800cb7a:	4619      	mov	r1, r3
 800cb7c:	4610      	mov	r0, r2
 800cb7e:	f7fe f94a 	bl	800ae16 <_ZN12SimpleStringC1ERKS_>
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	629a      	str	r2, [r3, #40]	; 0x28
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	332c      	adds	r3, #44	; 0x2c
 800cb94:	4619      	mov	r1, r3
 800cb96:	4610      	mov	r0, r2
 800cb98:	f7fe f93d 	bl	800ae16 <_ZN12SimpleStringC1ERKS_>
{
}
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3708      	adds	r7, #8
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}
 800cba6:	bf00      	nop
 800cba8:	08025a80 	.word	0x08025a80

0800cbac <_ZN11TestFailureD1Ev>:


TestFailure::~TestFailure()
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b082      	sub	sp, #8
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	4a10      	ldr	r2, [pc, #64]	; (800cbf8 <_ZN11TestFailureD1Ev+0x4c>)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	601a      	str	r2, [r3, #0]
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	332c      	adds	r3, #44	; 0x2c
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f7fe fc8d 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	3320      	adds	r3, #32
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f7fe fc88 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	3314      	adds	r3, #20
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f7fe fc83 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	330c      	adds	r3, #12
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f7fe fc7e 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	3304      	adds	r3, #4
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f7fe fc79 	bl	800b4de <_ZN12SimpleStringD1Ev>
{
}
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3708      	adds	r7, #8
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	bf00      	nop
 800cbf8:	08025a80 	.word	0x08025a80

0800cbfc <_ZN11TestFailureD0Ev>:
TestFailure::~TestFailure()
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b082      	sub	sp, #8
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
}
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	f7ff ffd1 	bl	800cbac <_ZN11TestFailureD1Ev>
 800cc0a:	2134      	movs	r1, #52	; 0x34
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f7fb fcff 	bl	8008610 <_ZdlPvj>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	4618      	mov	r0, r3
 800cc16:	3708      	adds	r7, #8
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}

0800cc1c <_ZNK11TestFailure11getFileNameEv>:

SimpleString TestFailure::getFileName() const
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b082      	sub	sp, #8
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	6039      	str	r1, [r7, #0]
    return fileName_;
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	3314      	adds	r3, #20
 800cc2a:	4619      	mov	r1, r3
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f7fe f8f2 	bl	800ae16 <_ZN12SimpleStringC1ERKS_>
}
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	3708      	adds	r7, #8
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}

0800cc3a <_ZNK11TestFailure15getTestFileNameEv>:

SimpleString TestFailure::getTestFileName() const
{
 800cc3a:	b580      	push	{r7, lr}
 800cc3c:	b082      	sub	sp, #8
 800cc3e:	af00      	add	r7, sp, #0
 800cc40:	6078      	str	r0, [r7, #4]
 800cc42:	6039      	str	r1, [r7, #0]
    return testFileName_;
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	3320      	adds	r3, #32
 800cc48:	4619      	mov	r1, r3
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f7fe f8e3 	bl	800ae16 <_ZN12SimpleStringC1ERKS_>
}
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	3708      	adds	r7, #8
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <_ZNK11TestFailure11getTestNameEv>:

SimpleString TestFailure::getTestName() const
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	6039      	str	r1, [r7, #0]
    return testName_;
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	3304      	adds	r3, #4
 800cc66:	4619      	mov	r1, r3
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f7fe f8d4 	bl	800ae16 <_ZN12SimpleStringC1ERKS_>
}
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	3708      	adds	r7, #8
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}

0800cc76 <_ZNK11TestFailure15getTestNameOnlyEv>:

SimpleString TestFailure::getTestNameOnly() const
{
 800cc76:	b580      	push	{r7, lr}
 800cc78:	b082      	sub	sp, #8
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	6078      	str	r0, [r7, #4]
 800cc7e:	6039      	str	r1, [r7, #0]
    return testNameOnly_;
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	330c      	adds	r3, #12
 800cc84:	4619      	mov	r1, r3
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f7fe f8c5 	bl	800ae16 <_ZN12SimpleStringC1ERKS_>
}
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	3708      	adds	r7, #8
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <_ZNK11TestFailure20getFailureLineNumberEv>:

size_t TestFailure::getFailureLineNumber() const
{
 800cc94:	b480      	push	{r7}
 800cc96:	b083      	sub	sp, #12
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	69db      	ldr	r3, [r3, #28]
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	370c      	adds	r7, #12
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr

0800ccac <_ZNK11TestFailure17getTestLineNumberEv>:

size_t TestFailure::getTestLineNumber() const
{
 800ccac:	b480      	push	{r7}
 800ccae:	b083      	sub	sp, #12
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
    return testLineNumber_;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800ccb8:	4618      	mov	r0, r3
 800ccba:	370c      	adds	r7, #12
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc2:	4770      	bx	lr

0800ccc4 <_ZNK11TestFailure10getMessageEv>:

SimpleString TestFailure::getMessage() const
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b082      	sub	sp, #8
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	6039      	str	r1, [r7, #0]
    return message_;
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	332c      	adds	r3, #44	; 0x2c
 800ccd2:	4619      	mov	r1, r3
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f7fe f89e 	bl	800ae16 <_ZN12SimpleStringC1ERKS_>
}
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	3708      	adds	r7, #8
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}

0800cce2 <_ZNK11TestFailure17isOutsideTestFileEv>:

bool TestFailure::isOutsideTestFile() const
{
 800cce2:	b580      	push	{r7, lr}
 800cce4:	b082      	sub	sp, #8
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	6078      	str	r0, [r7, #4]
    return testFileName_ != fileName_;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f103 0220 	add.w	r2, r3, #32
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	3314      	adds	r3, #20
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	4610      	mov	r0, r2
 800ccf8:	f7fe fc42 	bl	800b580 <_ZneRK12SimpleStringS1_>
 800ccfc:	4603      	mov	r3, r0
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3708      	adds	r7, #8
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}

0800cd06 <_ZNK11TestFailure18isInHelperFunctionEv>:

bool TestFailure::isInHelperFunction() const
{
 800cd06:	b480      	push	{r7}
 800cd08:	b083      	sub	sp, #12
 800cd0a:	af00      	add	r7, sp, #0
 800cd0c:	6078      	str	r0, [r7, #4]
    return lineNumber_ < testLineNumber_;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	69da      	ldr	r2, [r3, #28]
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd16:	429a      	cmp	r2, r3
 800cd18:	bf34      	ite	cc
 800cd1a:	2301      	movcc	r3, #1
 800cd1c:	2300      	movcs	r3, #0
 800cd1e:	b2db      	uxtb	r3, r3
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	370c      	adds	r7, #12
 800cd24:	46bd      	mov	sp, r7
 800cd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2a:	4770      	bx	lr

0800cd2c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>:

SimpleString TestFailure::createButWasString(const SimpleString& expected, const SimpleString& actual)
{
 800cd2c:	b590      	push	{r4, r7, lr}
 800cd2e:	b085      	sub	sp, #20
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	60f8      	str	r0, [r7, #12]
 800cd34:	60b9      	str	r1, [r7, #8]
 800cd36:	607a      	str	r2, [r7, #4]
 800cd38:	603b      	str	r3, [r7, #0]
    return StringFromFormat("expected <%s>\n\tbut was  <%s>", expected.asCharString(), actual.asCharString());
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f7fe fba2 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 800cd40:	4604      	mov	r4, r0
 800cd42:	6838      	ldr	r0, [r7, #0]
 800cd44:	f7fe fb9e 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	68f8      	ldr	r0, [r7, #12]
 800cd4c:	4622      	mov	r2, r4
 800cd4e:	4903      	ldr	r1, [pc, #12]	; (800cd5c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_+0x30>)
 800cd50:	f7ff f8cc 	bl	800beec <_Z16StringFromFormatPKcz>
}
 800cd54:	68f8      	ldr	r0, [r7, #12]
 800cd56:	3714      	adds	r7, #20
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd90      	pop	{r4, r7, pc}
 800cd5c:	08022414 	.word	0x08022414

0800cd60 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>:

SimpleString TestFailure::createDifferenceAtPosString(const SimpleString& actual, size_t offset, size_t reportedPosition)
{
 800cd60:	b590      	push	{r4, r7, lr}
 800cd62:	b097      	sub	sp, #92	; 0x5c
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	60f8      	str	r0, [r7, #12]
 800cd68:	60b9      	str	r1, [r7, #8]
 800cd6a:	607a      	str	r2, [r7, #4]
 800cd6c:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800cd6e:	494c      	ldr	r1, [pc, #304]	; (800cea0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x140>)
 800cd70:	68f8      	ldr	r0, [r7, #12]
 800cd72:	f7fd fffc 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
    const size_t extraCharactersWindow = 20;
 800cd76:	2314      	movs	r3, #20
 800cd78:	657b      	str	r3, [r7, #84]	; 0x54
    const size_t halfOfExtraCharactersWindow = extraCharactersWindow / 2;
 800cd7a:	230a      	movs	r3, #10
 800cd7c:	653b      	str	r3, [r7, #80]	; 0x50

    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800cd7e:	f107 0320 	add.w	r3, r7, #32
 800cd82:	220a      	movs	r2, #10
 800cd84:	4947      	ldr	r1, [pc, #284]	; (800cea4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7fe f80c 	bl	800ada4 <_ZN12SimpleStringC1EPKcj>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800cd8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cd90:	f107 0120 	add.w	r1, r7, #32
 800cd94:	687a      	ldr	r2, [r7, #4]
 800cd96:	4618      	mov	r0, r3
 800cd98:	f7fe fc03 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 800cd9c:	f107 0318 	add.w	r3, r7, #24
 800cda0:	f107 0220 	add.w	r2, r7, #32
 800cda4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f7fe fbfa 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 800cdae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f7fe fb93 	bl	800b4de <_ZN12SimpleStringD1Ev>
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800cdb8:	f107 0310 	add.w	r3, r7, #16
 800cdbc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cdbe:	493a      	ldr	r1, [pc, #232]	; (800cea8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x148>)
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f7ff f893 	bl	800beec <_Z16StringFromFormatPKcz>

    result += "\n";
 800cdc6:	4939      	ldr	r1, [pc, #228]	; (800ceac <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x14c>)
 800cdc8:	68f8      	ldr	r0, [r7, #12]
 800cdca:	f7fe fc17 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    result += StringFromFormat("\t%s%s>\n", differentString.asCharString(), actualString.subString(offset, extraCharactersWindow).asCharString());
 800cdce:	f107 0310 	add.w	r3, r7, #16
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f7fe fb56 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 800cdd8:	4604      	mov	r4, r0
 800cdda:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800cdde:	f107 0118 	add.w	r1, r7, #24
 800cde2:	2314      	movs	r3, #20
 800cde4:	683a      	ldr	r2, [r7, #0]
 800cde6:	f7fe fc83 	bl	800b6f0 <_ZNK12SimpleString9subStringEjj>
 800cdea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f7fe fb48 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800cdfa:	4622      	mov	r2, r4
 800cdfc:	492c      	ldr	r1, [pc, #176]	; (800ceb0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x150>)
 800cdfe:	f7ff f875 	bl	800beec <_Z16StringFromFormatPKcz>
 800ce02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ce06:	4619      	mov	r1, r3
 800ce08:	68f8      	ldr	r0, [r7, #12]
 800ce0a:	f7fe fbe5 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 800ce0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ce12:	4618      	mov	r0, r3
 800ce14:	f7fe fb63 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800ce18:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f7fe fb5e 	bl	800b4de <_ZN12SimpleStringD1Ev>


    result += StringFromFormat("\t%s^", SimpleString(" ", (differentString.size() + halfOfExtraCharactersWindow)).asCharString());
 800ce22:	f107 0310 	add.w	r3, r7, #16
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7fe fb38 	bl	800b49c <_ZNK12SimpleString4sizeEv>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	f103 020a 	add.w	r2, r3, #10
 800ce32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ce36:	491b      	ldr	r1, [pc, #108]	; (800cea4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f7fd ffb3 	bl	800ada4 <_ZN12SimpleStringC1EPKcj>
 800ce3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ce42:	4618      	mov	r0, r3
 800ce44:	f7fe fb1e 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 800ce48:	4602      	mov	r2, r0
 800ce4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ce4e:	4919      	ldr	r1, [pc, #100]	; (800ceb4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x154>)
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7ff f84b 	bl	800beec <_Z16StringFromFormatPKcz>
 800ce56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	68f8      	ldr	r0, [r7, #12]
 800ce5e:	f7fe fbbb 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 800ce62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ce66:	4618      	mov	r0, r3
 800ce68:	f7fe fb39 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800ce6c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ce70:	4618      	mov	r0, r3
 800ce72:	f7fe fb34 	bl	800b4de <_ZN12SimpleStringD1Ev>
    return result;
 800ce76:	bf00      	nop
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800ce78:	f107 0310 	add.w	r3, r7, #16
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f7fe fb2e 	bl	800b4de <_ZN12SimpleStringD1Ev>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800ce82:	f107 0318 	add.w	r3, r7, #24
 800ce86:	4618      	mov	r0, r3
 800ce88:	f7fe fb29 	bl	800b4de <_ZN12SimpleStringD1Ev>
    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800ce8c:	f107 0320 	add.w	r3, r7, #32
 800ce90:	4618      	mov	r0, r3
 800ce92:	f7fe fb24 	bl	800b4de <_ZN12SimpleStringD1Ev>
    return result;
 800ce96:	bf00      	nop
}
 800ce98:	68f8      	ldr	r0, [r7, #12]
 800ce9a:	375c      	adds	r7, #92	; 0x5c
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd90      	pop	{r4, r7, pc}
 800cea0:	08022434 	.word	0x08022434
 800cea4:	08022438 	.word	0x08022438
 800cea8:	0802243c 	.word	0x0802243c
 800ceac:	08022464 	.word	0x08022464
 800ceb0:	08022468 	.word	0x08022468
 800ceb4:	08022470 	.word	0x08022470

0800ceb8 <_ZN11TestFailure14createUserTextERK12SimpleString>:

SimpleString TestFailure::createUserText(const SimpleString& text)
{
 800ceb8:	b590      	push	{r4, r7, lr}
 800ceba:	b087      	sub	sp, #28
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	60f8      	str	r0, [r7, #12]
 800cec0:	60b9      	str	r1, [r7, #8]
 800cec2:	607a      	str	r2, [r7, #4]
    SimpleString userMessage = "";
 800cec4:	491a      	ldr	r1, [pc, #104]	; (800cf30 <_ZN11TestFailure14createUserTextERK12SimpleString+0x78>)
 800cec6:	68f8      	ldr	r0, [r7, #12]
 800cec8:	f7fd ff51 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
    if (!text.isEmpty())
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f7fe faf5 	bl	800b4bc <_ZNK12SimpleString7isEmptyEv>
 800ced2:	4603      	mov	r3, r0
 800ced4:	f083 0301 	eor.w	r3, r3, #1
 800ced8:	b2db      	uxtb	r3, r3
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d022      	beq.n	800cf24 <_ZN11TestFailure14createUserTextERK12SimpleString+0x6c>
    {
        //This is a kludge to turn off "Message: " for this case.
        //I don't think "Message: " adds anything, as you get to see the
        //message. I propose we remove "Message: " lead in
        if (!text.startsWith("LONGS_EQUAL"))
 800cede:	f107 0310 	add.w	r3, r7, #16
 800cee2:	4914      	ldr	r1, [pc, #80]	; (800cf34 <_ZN11TestFailure14createUserTextERK12SimpleString+0x7c>)
 800cee4:	4618      	mov	r0, r3
 800cee6:	f7fd ff42 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800ceea:	f107 0310 	add.w	r3, r7, #16
 800ceee:	4619      	mov	r1, r3
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f7fe f800 	bl	800aef6 <_ZNK12SimpleString10startsWithERKS_>
 800cef6:	4603      	mov	r3, r0
 800cef8:	f083 0301 	eor.w	r3, r3, #1
 800cefc:	b2dc      	uxtb	r4, r3
 800cefe:	f107 0310 	add.w	r3, r7, #16
 800cf02:	4618      	mov	r0, r3
 800cf04:	f7fe faeb 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800cf08:	2c00      	cmp	r4, #0
 800cf0a:	d003      	beq.n	800cf14 <_ZN11TestFailure14createUserTextERK12SimpleString+0x5c>
            userMessage += "Message: ";
 800cf0c:	490a      	ldr	r1, [pc, #40]	; (800cf38 <_ZN11TestFailure14createUserTextERK12SimpleString+0x80>)
 800cf0e:	68f8      	ldr	r0, [r7, #12]
 800cf10:	f7fe fb74 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
        userMessage += text;
 800cf14:	6879      	ldr	r1, [r7, #4]
 800cf16:	68f8      	ldr	r0, [r7, #12]
 800cf18:	f7fe fb5e 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
        userMessage += "\n\t";
 800cf1c:	4907      	ldr	r1, [pc, #28]	; (800cf3c <_ZN11TestFailure14createUserTextERK12SimpleString+0x84>)
 800cf1e:	68f8      	ldr	r0, [r7, #12]
 800cf20:	f7fe fb6c 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    }
    return userMessage;
 800cf24:	bf00      	nop
}
 800cf26:	68f8      	ldr	r0, [r7, #12]
 800cf28:	371c      	adds	r7, #28
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd90      	pop	{r4, r7, pc}
 800cf2e:	bf00      	nop
 800cf30:	08022434 	.word	0x08022434
 800cf34:	08022478 	.word	0x08022478
 800cf38:	08022484 	.word	0x08022484
 800cf3c:	08022490 	.word	0x08022490

0800cf40 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:
    message_ = createUserText(text);

    message_ += createButWasString(StringFromOrNull(expected), StringFromOrNull(actual));
}

EqualsFailure::EqualsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800cf40:	b590      	push	{r4, r7, lr}
 800cf42:	b089      	sub	sp, #36	; 0x24
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	60f8      	str	r0, [r7, #12]
 800cf48:	60b9      	str	r1, [r7, #8]
 800cf4a:	607a      	str	r2, [r7, #4]
 800cf4c:	603b      	str	r3, [r7, #0]
    : TestFailure(test, fileName, lineNumber)
 800cf4e:	68f8      	ldr	r0, [r7, #12]
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	687a      	ldr	r2, [r7, #4]
 800cf54:	68b9      	ldr	r1, [r7, #8]
 800cf56:	f7ff fda7 	bl	800caa8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800cf5a:	4a19      	ldr	r2, [pc, #100]	; (800cfc0 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x80>)
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cf66:	68f9      	ldr	r1, [r7, #12]
 800cf68:	f107 0310 	add.w	r3, r7, #16
 800cf6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f7ff ffa2 	bl	800ceb8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800cf74:	f107 0310 	add.w	r3, r7, #16
 800cf78:	4619      	mov	r1, r3
 800cf7a:	4620      	mov	r0, r4
 800cf7c:	f7fd ff63 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 800cf80:	f107 0310 	add.w	r3, r7, #16
 800cf84:	4618      	mov	r0, r3
 800cf86:	f7fe faaa 	bl	800b4de <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expected, actual);
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cf90:	68f9      	ldr	r1, [r7, #12]
 800cf92:	f107 0018 	add.w	r0, r7, #24
 800cf96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf9a:	f7ff fec7 	bl	800cd2c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800cf9e:	f107 0318 	add.w	r3, r7, #24
 800cfa2:	4619      	mov	r1, r3
 800cfa4:	4620      	mov	r0, r4
 800cfa6:	f7fe fb17 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 800cfaa:	f107 0318 	add.w	r3, r7, #24
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f7fe fa95 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3724      	adds	r7, #36	; 0x24
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd90      	pop	{r4, r7, pc}
 800cfbe:	bf00      	nop
 800cfc0:	08025a54 	.word	0x08025a54

0800cfc4 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>:

DoublesEqualFailure::DoublesEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, double expected, double actual, double threshold, const SimpleString& text)
 800cfc4:	b5b0      	push	{r4, r5, r7, lr}
 800cfc6:	b094      	sub	sp, #80	; 0x50
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6278      	str	r0, [r7, #36]	; 0x24
 800cfcc:	6239      	str	r1, [r7, #32]
 800cfce:	61fa      	str	r2, [r7, #28]
 800cfd0:	61bb      	str	r3, [r7, #24]
 800cfd2:	ed87 0b04 	vstr	d0, [r7, #16]
 800cfd6:	ed87 1b02 	vstr	d1, [r7, #8]
 800cfda:	ed87 2b00 	vstr	d2, [r7]
: TestFailure(test, fileName, lineNumber)
 800cfde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cfe0:	69bb      	ldr	r3, [r7, #24]
 800cfe2:	69fa      	ldr	r2, [r7, #28]
 800cfe4:	6a39      	ldr	r1, [r7, #32]
 800cfe6:	f7ff fd5f 	bl	800caa8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800cfea:	4a4a      	ldr	r2, [pc, #296]	; (800d114 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x150>)
 800cfec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfee:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800cff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cff6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cff8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cffc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cffe:	4618      	mov	r0, r3
 800d000:	f7ff ff5a 	bl	800ceb8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d004:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d008:	4619      	mov	r1, r3
 800d00a:	4620      	mov	r0, r4
 800d00c:	f7fd ff1b 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 800d010:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d014:	4618      	mov	r0, r3
 800d016:	f7fe fa62 	bl	800b4de <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFrom(expected, 7), StringFrom(actual, 7));
 800d01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d020:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800d022:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d026:	2107      	movs	r1, #7
 800d028:	ed97 0b04 	vldr	d0, [r7, #16]
 800d02c:	4618      	mov	r0, r3
 800d02e:	f7fe ff1b 	bl	800be68 <_Z10StringFromdi>
 800d032:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d036:	2107      	movs	r1, #7
 800d038:	ed97 0b02 	vldr	d0, [r7, #8]
 800d03c:	4618      	mov	r0, r3
 800d03e:	f7fe ff13 	bl	800be68 <_Z10StringFromdi>
 800d042:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800d046:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d04a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d04e:	4629      	mov	r1, r5
 800d050:	f7ff fe6c 	bl	800cd2c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800d054:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d058:	4619      	mov	r1, r3
 800d05a:	4620      	mov	r0, r4
 800d05c:	f7fe fabc 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 800d060:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d064:	4618      	mov	r0, r3
 800d066:	f7fe fa3a 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800d06a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d06e:	4618      	mov	r0, r3
 800d070:	f7fe fa35 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800d074:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d078:	4618      	mov	r0, r3
 800d07a:	f7fe fa30 	bl	800b4de <_ZN12SimpleStringD1Ev>
    message_ += " threshold used was <";
 800d07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d080:	332c      	adds	r3, #44	; 0x2c
 800d082:	4925      	ldr	r1, [pc, #148]	; (800d118 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x154>)
 800d084:	4618      	mov	r0, r3
 800d086:	f7fe fab9 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(threshold, 7);
 800d08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d090:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d094:	2107      	movs	r1, #7
 800d096:	ed97 0b00 	vldr	d0, [r7]
 800d09a:	4618      	mov	r0, r3
 800d09c:	f7fe fee4 	bl	800be68 <_Z10StringFromdi>
 800d0a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d0a4:	4619      	mov	r1, r3
 800d0a6:	4620      	mov	r0, r4
 800d0a8:	f7fe fa96 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 800d0ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f7fe fa14 	bl	800b4de <_ZN12SimpleStringD1Ev>
    message_ += ">";
 800d0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b8:	332c      	adds	r3, #44	; 0x2c
 800d0ba:	4918      	ldr	r1, [pc, #96]	; (800d11c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x158>)
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f7fe fa9d 	bl	800b5fc <_ZN12SimpleStringpLEPKc>

    if (PlatformSpecificIsNan(expected) || PlatformSpecificIsNan(actual) || PlatformSpecificIsNan(threshold))
 800d0c2:	4b17      	ldr	r3, [pc, #92]	; (800d120 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	ed97 0b04 	vldr	d0, [r7, #16]
 800d0ca:	4798      	blx	r3
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d10f      	bne.n	800d0f2 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800d0d2:	4b13      	ldr	r3, [pc, #76]	; (800d120 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	ed97 0b02 	vldr	d0, [r7, #8]
 800d0da:	4798      	blx	r3
 800d0dc:	4603      	mov	r3, r0
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d107      	bne.n	800d0f2 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800d0e2:	4b0f      	ldr	r3, [pc, #60]	; (800d120 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	ed97 0b00 	vldr	d0, [r7]
 800d0ea:	4798      	blx	r3
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d001      	beq.n	800d0f6 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x132>
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	e000      	b.n	800d0f8 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x134>
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d005      	beq.n	800d108 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x144>
        message_ += "\n\tCannot make comparisons with Nan";
 800d0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0fe:	332c      	adds	r3, #44	; 0x2c
 800d100:	4908      	ldr	r1, [pc, #32]	; (800d124 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x160>)
 800d102:	4618      	mov	r0, r3
 800d104:	f7fe fa7a 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
}
 800d108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d10a:	4618      	mov	r0, r3
 800d10c:	3750      	adds	r7, #80	; 0x50
 800d10e:	46bd      	mov	sp, r7
 800d110:	bdb0      	pop	{r4, r5, r7, pc}
 800d112:	bf00      	nop
 800d114:	08025a28 	.word	0x08025a28
 800d118:	08022494 	.word	0x08022494
 800d11c:	080224ac 	.word	0x080224ac
 800d120:	200000e8 	.word	0x200000e8
 800d124:	080224b0 	.word	0x080224b0

0800d128 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckEqualFailure::CheckEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800d128:	b590      	push	{r4, r7, lr}
 800d12a:	b093      	sub	sp, #76	; 0x4c
 800d12c:	af02      	add	r7, sp, #8
 800d12e:	60f8      	str	r0, [r7, #12]
 800d130:	60b9      	str	r1, [r7, #8]
 800d132:	607a      	str	r2, [r7, #4]
 800d134:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800d136:	68f8      	ldr	r0, [r7, #12]
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	687a      	ldr	r2, [r7, #4]
 800d13c:	68b9      	ldr	r1, [r7, #8]
 800d13e:	f7ff fcb3 	bl	800caa8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d142:	4a4f      	ldr	r2, [pc, #316]	; (800d280 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x158>)
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d14e:	68f9      	ldr	r1, [r7, #12]
 800d150:	f107 0320 	add.w	r3, r7, #32
 800d154:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d156:	4618      	mov	r0, r3
 800d158:	f7ff feae 	bl	800ceb8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d15c:	f107 0320 	add.w	r3, r7, #32
 800d160:	4619      	mov	r1, r3
 800d162:	4620      	mov	r0, r4
 800d164:	f7fd fe6f 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 800d168:	f107 0320 	add.w	r3, r7, #32
 800d16c:	4618      	mov	r0, r3
 800d16e:	f7fe f9b6 	bl	800b4de <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800d172:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d174:	f7fe f986 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 800d178:	4602      	mov	r2, r0
 800d17a:	f107 0318 	add.w	r3, r7, #24
 800d17e:	4611      	mov	r1, r2
 800d180:	4618      	mov	r0, r3
 800d182:	f7fe fc47 	bl	800ba14 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800d186:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d188:	f7fe f97c 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 800d18c:	4602      	mov	r2, r0
 800d18e:	f107 0310 	add.w	r3, r7, #16
 800d192:	4611      	mov	r1, r2
 800d194:	4618      	mov	r0, r3
 800d196:	f7fe fc3d 	bl	800ba14 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d1a0:	68f9      	ldr	r1, [r7, #12]
 800d1a2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800d1a6:	f107 0310 	add.w	r3, r7, #16
 800d1aa:	f107 0218 	add.w	r2, r7, #24
 800d1ae:	f7ff fdbd 	bl	800cd2c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800d1b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d1b6:	4619      	mov	r1, r3
 800d1b8:	4620      	mov	r0, r4
 800d1ba:	f7fe fa0d 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 800d1be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7fe f98b 	bl	800b4de <_ZN12SimpleStringD1Ev>

    size_t failStart;
    for (failStart = 0; actual.at(failStart) == expected.at(failStart); failStart++)
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d1cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d1ce:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d1d0:	f7fe fae9 	bl	800b7a6 <_ZNK12SimpleString2atEj>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	461c      	mov	r4, r3
 800d1d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d1da:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d1dc:	f7fe fae3 	bl	800b7a6 <_ZNK12SimpleString2atEj>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	429c      	cmp	r4, r3
 800d1e4:	bf0c      	ite	eq
 800d1e6:	2301      	moveq	r3, #1
 800d1e8:	2300      	movne	r3, #0
 800d1ea:	b2db      	uxtb	r3, r3
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d003      	beq.n	800d1f8 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd0>
 800d1f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1f2:	3301      	adds	r3, #1
 800d1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d1f6:	e7e9      	b.n	800d1cc <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xa4>
        ;
    size_t failStartPrintable;
    for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	63bb      	str	r3, [r7, #56]	; 0x38
 800d1fc:	f107 0310 	add.w	r3, r7, #16
 800d200:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d202:	4618      	mov	r0, r3
 800d204:	f7fe facf 	bl	800b7a6 <_ZNK12SimpleString2atEj>
 800d208:	4603      	mov	r3, r0
 800d20a:	461c      	mov	r4, r3
 800d20c:	f107 0318 	add.w	r3, r7, #24
 800d210:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d212:	4618      	mov	r0, r3
 800d214:	f7fe fac7 	bl	800b7a6 <_ZNK12SimpleString2atEj>
 800d218:	4603      	mov	r3, r0
 800d21a:	429c      	cmp	r4, r3
 800d21c:	bf0c      	ite	eq
 800d21e:	2301      	moveq	r3, #1
 800d220:	2300      	movne	r3, #0
 800d222:	b2db      	uxtb	r3, r3
 800d224:	2b00      	cmp	r3, #0
 800d226:	d003      	beq.n	800d230 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x108>
 800d228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d22a:	3301      	adds	r3, #1
 800d22c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d22e:	e7e5      	b.n	800d1fc <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd4>
        ;
    message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d236:	68f9      	ldr	r1, [r7, #12]
 800d238:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800d23c:	f107 0210 	add.w	r2, r7, #16
 800d240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d242:	9300      	str	r3, [sp, #0]
 800d244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d246:	f7ff fd8b 	bl	800cd60 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800d24a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d24e:	4619      	mov	r1, r3
 800d250:	4620      	mov	r0, r4
 800d252:	f7fe f9c1 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 800d256:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d25a:	4618      	mov	r0, r3
 800d25c:	f7fe f93f 	bl	800b4de <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800d260:	f107 0310 	add.w	r3, r7, #16
 800d264:	4618      	mov	r0, r3
 800d266:	f7fe f93a 	bl	800b4de <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800d26a:	f107 0318 	add.w	r3, r7, #24
 800d26e:	4618      	mov	r0, r3
 800d270:	f7fe f935 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	4618      	mov	r0, r3
 800d278:	3744      	adds	r7, #68	; 0x44
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd90      	pop	{r4, r7, pc}
 800d27e:	bf00      	nop
 800d280:	080259fc 	.word	0x080259fc

0800d284 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ComparisonFailure::ComparisonFailure(UtestShell *test, const char *fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString &comparisonString, const SimpleString &text)
 800d284:	b590      	push	{r4, r7, lr}
 800d286:	b087      	sub	sp, #28
 800d288:	af00      	add	r7, sp, #0
 800d28a:	60f8      	str	r0, [r7, #12]
 800d28c:	60b9      	str	r1, [r7, #8]
 800d28e:	607a      	str	r2, [r7, #4]
 800d290:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800d292:	68f8      	ldr	r0, [r7, #12]
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	687a      	ldr	r2, [r7, #4]
 800d298:	68b9      	ldr	r1, [r7, #8]
 800d29a:	f7ff fc05 	bl	800caa8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d29e:	4a1a      	ldr	r2, [pc, #104]	; (800d308 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d2aa:	68f9      	ldr	r1, [r7, #12]
 800d2ac:	f107 0310 	add.w	r3, r7, #16
 800d2b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f7ff fe00 	bl	800ceb8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d2b8:	f107 0310 	add.w	r3, r7, #16
 800d2bc:	4619      	mov	r1, r3
 800d2be:	4620      	mov	r0, r4
 800d2c0:	f7fd fdc1 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 800d2c4:	f107 0310 	add.w	r3, r7, #16
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f7fe f908 	bl	800b4de <_ZN12SimpleStringD1Ev>
    message_ += checkString;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	332c      	adds	r3, #44	; 0x2c
 800d2d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	f7fe f97f 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	332c      	adds	r3, #44	; 0x2c
 800d2de:	490b      	ldr	r1, [pc, #44]	; (800d30c <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f7fe f98b 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    message_ += comparisonString;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	332c      	adds	r3, #44	; 0x2c
 800d2ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f7fe f973 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	332c      	adds	r3, #44	; 0x2c
 800d2f6:	4906      	ldr	r1, [pc, #24]	; (800d310 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f7fe f97f 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
}
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	4618      	mov	r0, r3
 800d302:	371c      	adds	r7, #28
 800d304:	46bd      	mov	sp, r7
 800d306:	bd90      	pop	{r4, r7, pc}
 800d308:	080259d0 	.word	0x080259d0
 800d30c:	080224d4 	.word	0x080224d4
 800d310:	080224d8 	.word	0x080224d8

0800d314 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ContainsFailure::ContainsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800d314:	b5b0      	push	{r4, r5, r7, lr}
 800d316:	b088      	sub	sp, #32
 800d318:	af00      	add	r7, sp, #0
 800d31a:	60f8      	str	r0, [r7, #12]
 800d31c:	60b9      	str	r1, [r7, #8]
 800d31e:	607a      	str	r2, [r7, #4]
 800d320:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800d322:	68f8      	ldr	r0, [r7, #12]
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	687a      	ldr	r2, [r7, #4]
 800d328:	68b9      	ldr	r1, [r7, #8]
 800d32a:	f7ff fbbd 	bl	800caa8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d32e:	4a1c      	ldr	r2, [pc, #112]	; (800d3a0 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d33a:	68f9      	ldr	r1, [r7, #12]
 800d33c:	f107 0310 	add.w	r3, r7, #16
 800d340:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d342:	4618      	mov	r0, r3
 800d344:	f7ff fdb8 	bl	800ceb8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d348:	f107 0310 	add.w	r3, r7, #16
 800d34c:	4619      	mov	r1, r3
 800d34e:	4620      	mov	r0, r4
 800d350:	f7fd fd79 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 800d354:	f107 0310 	add.w	r3, r7, #16
 800d358:	4618      	mov	r0, r3
 800d35a:	f7fe f8c0 	bl	800b4de <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("actual <%s>\n\tdid not contain  <%s>", actual.asCharString(), expected.asCharString());
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d364:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d366:	f7fe f88d 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 800d36a:	4605      	mov	r5, r0
 800d36c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d36e:	f7fe f889 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 800d372:	4603      	mov	r3, r0
 800d374:	f107 0018 	add.w	r0, r7, #24
 800d378:	462a      	mov	r2, r5
 800d37a:	490a      	ldr	r1, [pc, #40]	; (800d3a4 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x90>)
 800d37c:	f7fe fdb6 	bl	800beec <_Z16StringFromFormatPKcz>
 800d380:	f107 0318 	add.w	r3, r7, #24
 800d384:	4619      	mov	r1, r3
 800d386:	4620      	mov	r0, r4
 800d388:	f7fe f926 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 800d38c:	f107 0318 	add.w	r3, r7, #24
 800d390:	4618      	mov	r0, r3
 800d392:	f7fe f8a4 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	4618      	mov	r0, r3
 800d39a:	3720      	adds	r7, #32
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bdb0      	pop	{r4, r5, r7, pc}
 800d3a0:	080259a4 	.word	0x080259a4
 800d3a4:	080224e4 	.word	0x080224e4

0800d3a8 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckFailure::CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& text)
 800d3a8:	b590      	push	{r4, r7, lr}
 800d3aa:	b087      	sub	sp, #28
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	60f8      	str	r0, [r7, #12]
 800d3b0:	60b9      	str	r1, [r7, #8]
 800d3b2:	607a      	str	r2, [r7, #4]
 800d3b4:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800d3b6:	68f8      	ldr	r0, [r7, #12]
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	687a      	ldr	r2, [r7, #4]
 800d3bc:	68b9      	ldr	r1, [r7, #8]
 800d3be:	f7ff fb73 	bl	800caa8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d3c2:	4a1a      	ldr	r2, [pc, #104]	; (800d42c <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d3ce:	68f9      	ldr	r1, [r7, #12]
 800d3d0:	f107 0310 	add.w	r3, r7, #16
 800d3d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f7ff fd6e 	bl	800ceb8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d3dc:	f107 0310 	add.w	r3, r7, #16
 800d3e0:	4619      	mov	r1, r3
 800d3e2:	4620      	mov	r0, r4
 800d3e4:	f7fd fd2f 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 800d3e8:	f107 0310 	add.w	r3, r7, #16
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7fe f876 	bl	800b4de <_ZN12SimpleStringD1Ev>

    message_ += checkString;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	332c      	adds	r3, #44	; 0x2c
 800d3f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7fe f8ed 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	332c      	adds	r3, #44	; 0x2c
 800d402:	490b      	ldr	r1, [pc, #44]	; (800d430 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800d404:	4618      	mov	r0, r3
 800d406:	f7fe f8f9 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    message_ += conditionString;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	332c      	adds	r3, #44	; 0x2c
 800d40e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d410:	4618      	mov	r0, r3
 800d412:	f7fe f8e1 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	332c      	adds	r3, #44	; 0x2c
 800d41a:	4906      	ldr	r1, [pc, #24]	; (800d434 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800d41c:	4618      	mov	r0, r3
 800d41e:	f7fe f8ed 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
}
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	4618      	mov	r0, r3
 800d426:	371c      	adds	r7, #28
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd90      	pop	{r4, r7, pc}
 800d42c:	08025978 	.word	0x08025978
 800d430:	080224d4 	.word	0x080224d4
 800d434:	080224d8 	.word	0x080224d8

0800d438 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>:

FailFailure::FailFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& message) : TestFailure(test, fileName, lineNumber)
 800d438:	b580      	push	{r7, lr}
 800d43a:	b084      	sub	sp, #16
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	60f8      	str	r0, [r7, #12]
 800d440:	60b9      	str	r1, [r7, #8]
 800d442:	607a      	str	r2, [r7, #4]
 800d444:	603b      	str	r3, [r7, #0]
 800d446:	68f8      	ldr	r0, [r7, #12]
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	687a      	ldr	r2, [r7, #4]
 800d44c:	68b9      	ldr	r1, [r7, #8]
 800d44e:	f7ff fb2b 	bl	800caa8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d452:	4a07      	ldr	r2, [pc, #28]	; (800d470 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString+0x38>)
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	601a      	str	r2, [r3, #0]
{
    message_ = message;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	332c      	adds	r3, #44	; 0x2c
 800d45c:	69b9      	ldr	r1, [r7, #24]
 800d45e:	4618      	mov	r0, r3
 800d460:	f7fd fcf1 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
}
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	4618      	mov	r0, r3
 800d468:	3710      	adds	r7, #16
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}
 800d46e:	bf00      	nop
 800d470:	08025634 	.word	0x08025634

0800d474 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>:

LongsEqualFailure::LongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, long expected, long actual, const SimpleString& text)
 800d474:	b590      	push	{r4, r7, lr}
 800d476:	b09d      	sub	sp, #116	; 0x74
 800d478:	af00      	add	r7, sp, #0
 800d47a:	60f8      	str	r0, [r7, #12]
 800d47c:	60b9      	str	r1, [r7, #8]
 800d47e:	607a      	str	r2, [r7, #4]
 800d480:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800d482:	68f8      	ldr	r0, [r7, #12]
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	687a      	ldr	r2, [r7, #4]
 800d488:	68b9      	ldr	r1, [r7, #8]
 800d48a:	f7ff fb0d 	bl	800caa8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d48e:	4a5d      	ldr	r2, [pc, #372]	; (800d604 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x190>)
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d49a:	68f9      	ldr	r1, [r7, #12]
 800d49c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d4a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f7ff fd07 	bl	800ceb8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d4aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d4ae:	4619      	mov	r1, r3
 800d4b0:	4620      	mov	r0, r4
 800d4b2:	f7fd fcc8 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 800d4b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f7fe f80f 	bl	800b4de <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800d4c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d4c4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f7fe fae1 	bl	800ba90 <_Z10StringFroml>
    SimpleString eDecimal = StringFrom(expected);
 800d4ce:	f107 0320 	add.w	r3, r7, #32
 800d4d2:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f7fe fada 	bl	800ba90 <_Z10StringFroml>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800d4dc:	f107 0120 	add.w	r1, r7, #32
 800d4e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d4e4:	2220      	movs	r2, #32
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f7fe f8b6 	bl	800b658 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800d4ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d4f0:	4945      	ldr	r1, [pc, #276]	; (800d608 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f7fd fc3b 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800d4f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d4fc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800d500:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d504:	4618      	mov	r0, r3
 800d506:	f7fe f84c 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 800d50a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d50e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800d512:	4618      	mov	r0, r3
 800d514:	f7fe fbd2 	bl	800bcbc <_Z30BracketsFormattedHexStringFroml>
 800d518:	f107 0318 	add.w	r3, r7, #24
 800d51c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800d520:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d524:	4618      	mov	r0, r3
 800d526:	f7fe f83c 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 800d52a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d52e:	4618      	mov	r0, r3
 800d530:	f7fd ffd5 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800d534:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d538:	4618      	mov	r0, r3
 800d53a:	f7fd ffd0 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800d53e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d542:	4618      	mov	r0, r3
 800d544:	f7fd ffcb 	bl	800b4de <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800d548:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d54c:	492e      	ldr	r1, [pc, #184]	; (800d608 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800d54e:	4618      	mov	r0, r3
 800d550:	f7fd fc0d 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800d554:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d558:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d55c:	f107 0120 	add.w	r1, r7, #32
 800d560:	4618      	mov	r0, r3
 800d562:	f7fe f81e 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 800d566:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d56a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d56e:	4618      	mov	r0, r3
 800d570:	f7fe fba4 	bl	800bcbc <_Z30BracketsFormattedHexStringFroml>
 800d574:	f107 0310 	add.w	r3, r7, #16
 800d578:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d57c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800d580:	4618      	mov	r0, r3
 800d582:	f7fe f80e 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 800d586:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d58a:	4618      	mov	r0, r3
 800d58c:	f7fd ffa7 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800d590:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d594:	4618      	mov	r0, r3
 800d596:	f7fd ffa2 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800d59a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f7fd ff9d 	bl	800b4de <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d5aa:	68f9      	ldr	r1, [r7, #12]
 800d5ac:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800d5b0:	f107 0318 	add.w	r3, r7, #24
 800d5b4:	f107 0210 	add.w	r2, r7, #16
 800d5b8:	f7ff fbb8 	bl	800cd2c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800d5bc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d5c0:	4619      	mov	r1, r3
 800d5c2:	4620      	mov	r0, r4
 800d5c4:	f7fe f808 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 800d5c8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f7fd ff86 	bl	800b4de <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800d5d2:	f107 0310 	add.w	r3, r7, #16
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f7fd ff81 	bl	800b4de <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800d5dc:	f107 0318 	add.w	r3, r7, #24
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7fd ff7c 	bl	800b4de <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800d5e6:	f107 0320 	add.w	r3, r7, #32
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f7fd ff77 	bl	800b4de <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800d5f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f7fd ff72 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3774      	adds	r7, #116	; 0x74
 800d600:	46bd      	mov	sp, r7
 800d602:	bd90      	pop	{r4, r7, pc}
 800d604:	0802594c 	.word	0x0802594c
 800d608:	08022438 	.word	0x08022438

0800d60c <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>:

UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, const SimpleString& text)
 800d60c:	b590      	push	{r4, r7, lr}
 800d60e:	b09d      	sub	sp, #116	; 0x74
 800d610:	af00      	add	r7, sp, #0
 800d612:	60f8      	str	r0, [r7, #12]
 800d614:	60b9      	str	r1, [r7, #8]
 800d616:	607a      	str	r2, [r7, #4]
 800d618:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800d61a:	68f8      	ldr	r0, [r7, #12]
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	687a      	ldr	r2, [r7, #4]
 800d620:	68b9      	ldr	r1, [r7, #8]
 800d622:	f7ff fa41 	bl	800caa8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d626:	4a5d      	ldr	r2, [pc, #372]	; (800d79c <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x190>)
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d632:	68f9      	ldr	r1, [r7, #12]
 800d634:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d638:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d63c:	4618      	mov	r0, r3
 800d63e:	f7ff fc3b 	bl	800ceb8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d642:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d646:	4619      	mov	r1, r3
 800d648:	4620      	mov	r0, r4
 800d64a:	f7fd fbfc 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 800d64e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d652:	4618      	mov	r0, r3
 800d654:	f7fd ff43 	bl	800b4de <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800d658:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d65c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800d660:	4618      	mov	r0, r3
 800d662:	f7fe fc7d 	bl	800bf60 <_Z10StringFromm>
    SimpleString eDecimal = StringFrom(expected);
 800d666:	f107 0320 	add.w	r3, r7, #32
 800d66a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d66e:	4618      	mov	r0, r3
 800d670:	f7fe fc76 	bl	800bf60 <_Z10StringFromm>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800d674:	f107 0120 	add.w	r1, r7, #32
 800d678:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d67c:	2220      	movs	r2, #32
 800d67e:	4618      	mov	r0, r3
 800d680:	f7fd ffea 	bl	800b658 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800d684:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d688:	4945      	ldr	r1, [pc, #276]	; (800d7a0 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800d68a:	4618      	mov	r0, r3
 800d68c:	f7fd fb6f 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800d690:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d694:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800d698:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d69c:	4618      	mov	r0, r3
 800d69e:	f7fd ff80 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 800d6a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d6a6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	f7fe fb22 	bl	800bcf4 <_Z30BracketsFormattedHexStringFromm>
 800d6b0:	f107 0318 	add.w	r3, r7, #24
 800d6b4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800d6b8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f7fd ff70 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 800d6c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f7fd ff09 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800d6cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f7fd ff04 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800d6d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f7fd feff 	bl	800b4de <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800d6e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d6e4:	492e      	ldr	r1, [pc, #184]	; (800d7a0 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f7fd fb41 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800d6ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d6f0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d6f4:	f107 0120 	add.w	r1, r7, #32
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7fd ff52 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 800d6fe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d702:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d706:	4618      	mov	r0, r3
 800d708:	f7fe faf4 	bl	800bcf4 <_Z30BracketsFormattedHexStringFromm>
 800d70c:	f107 0310 	add.w	r3, r7, #16
 800d710:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d714:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800d718:	4618      	mov	r0, r3
 800d71a:	f7fd ff42 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 800d71e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d722:	4618      	mov	r0, r3
 800d724:	f7fd fedb 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800d728:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d72c:	4618      	mov	r0, r3
 800d72e:	f7fd fed6 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800d732:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d736:	4618      	mov	r0, r3
 800d738:	f7fd fed1 	bl	800b4de <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expectedReported, actualReported);
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d742:	68f9      	ldr	r1, [r7, #12]
 800d744:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800d748:	f107 0318 	add.w	r3, r7, #24
 800d74c:	f107 0210 	add.w	r2, r7, #16
 800d750:	f7ff faec 	bl	800cd2c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800d754:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d758:	4619      	mov	r1, r3
 800d75a:	4620      	mov	r0, r4
 800d75c:	f7fd ff3c 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 800d760:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d764:	4618      	mov	r0, r3
 800d766:	f7fd feba 	bl	800b4de <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800d76a:	f107 0310 	add.w	r3, r7, #16
 800d76e:	4618      	mov	r0, r3
 800d770:	f7fd feb5 	bl	800b4de <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800d774:	f107 0318 	add.w	r3, r7, #24
 800d778:	4618      	mov	r0, r3
 800d77a:	f7fd feb0 	bl	800b4de <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800d77e:	f107 0320 	add.w	r3, r7, #32
 800d782:	4618      	mov	r0, r3
 800d784:	f7fd feab 	bl	800b4de <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800d788:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d78c:	4618      	mov	r0, r3
 800d78e:	f7fd fea6 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	4618      	mov	r0, r3
 800d796:	3774      	adds	r7, #116	; 0x74
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd90      	pop	{r4, r7, pc}
 800d79c:	08025920 	.word	0x08025920
 800d7a0:	08022438 	.word	0x08022438

0800d7a4 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>:
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
    message_ += createButWasString(expectedReported, actualReported);
}

SignedBytesEqualFailure::SignedBytesEqualFailure (UtestShell* test, const char* fileName, size_t lineNumber, signed char expected, signed char actual, const SimpleString& text)
 800d7a4:	b590      	push	{r4, r7, lr}
 800d7a6:	b09d      	sub	sp, #116	; 0x74
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	60f8      	str	r0, [r7, #12]
 800d7ac:	60b9      	str	r1, [r7, #8]
 800d7ae:	607a      	str	r2, [r7, #4]
 800d7b0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800d7b2:	68f8      	ldr	r0, [r7, #12]
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	687a      	ldr	r2, [r7, #4]
 800d7b8:	68b9      	ldr	r1, [r7, #8]
 800d7ba:	f7ff f975 	bl	800caa8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d7be:	4a5f      	ldr	r2, [pc, #380]	; (800d93c <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x198>)
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d7ca:	68f9      	ldr	r1, [r7, #12]
 800d7cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d7d0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	f7ff fb6f 	bl	800ceb8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d7da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d7de:	4619      	mov	r1, r3
 800d7e0:	4620      	mov	r0, r4
 800d7e2:	f7fd fb30 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 800d7e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f7fd fe77 	bl	800b4de <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom((int)actual);
 800d7f0:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800d7f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d7f8:	4611      	mov	r1, r2
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f7fe f936 	bl	800ba6c <_Z10StringFromi>
    SimpleString eDecimal = StringFrom((int)expected);
 800d800:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800d804:	f107 0320 	add.w	r3, r7, #32
 800d808:	4611      	mov	r1, r2
 800d80a:	4618      	mov	r0, r3
 800d80c:	f7fe f92e 	bl	800ba6c <_Z10StringFromi>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800d810:	f107 0120 	add.w	r1, r7, #32
 800d814:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d818:	2220      	movs	r2, #32
 800d81a:	4618      	mov	r0, r3
 800d81c:	f7fd ff1c 	bl	800b658 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800d820:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d824:	4946      	ldr	r1, [pc, #280]	; (800d940 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800d826:	4618      	mov	r0, r3
 800d828:	f7fd faa1 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800d82c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d830:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800d834:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d838:	4618      	mov	r0, r3
 800d83a:	f7fd feb2 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 800d83e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d842:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800d846:	4611      	mov	r1, r2
 800d848:	4618      	mov	r0, r3
 800d84a:	f7fe fa6f 	bl	800bd2c <_Z30BracketsFormattedHexStringFroma>
 800d84e:	f107 0318 	add.w	r3, r7, #24
 800d852:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800d856:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d85a:	4618      	mov	r0, r3
 800d85c:	f7fd fea1 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 800d860:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d864:	4618      	mov	r0, r3
 800d866:	f7fd fe3a 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800d86a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d86e:	4618      	mov	r0, r3
 800d870:	f7fd fe35 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800d874:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d878:	4618      	mov	r0, r3
 800d87a:	f7fd fe30 	bl	800b4de <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800d87e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d882:	492f      	ldr	r1, [pc, #188]	; (800d940 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800d884:	4618      	mov	r0, r3
 800d886:	f7fd fa72 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800d88a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d88e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d892:	f107 0120 	add.w	r1, r7, #32
 800d896:	4618      	mov	r0, r3
 800d898:	f7fd fe83 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 800d89c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d8a0:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800d8a4:	4611      	mov	r1, r2
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f7fe fa40 	bl	800bd2c <_Z30BracketsFormattedHexStringFroma>
 800d8ac:	f107 0310 	add.w	r3, r7, #16
 800d8b0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d8b4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	f7fd fe72 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 800d8be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f7fd fe0b 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800d8c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f7fd fe06 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800d8d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f7fd fe01 	bl	800b4de <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d8e2:	68f9      	ldr	r1, [r7, #12]
 800d8e4:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800d8e8:	f107 0318 	add.w	r3, r7, #24
 800d8ec:	f107 0210 	add.w	r2, r7, #16
 800d8f0:	f7ff fa1c 	bl	800cd2c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800d8f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d8f8:	4619      	mov	r1, r3
 800d8fa:	4620      	mov	r0, r4
 800d8fc:	f7fd fe6c 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 800d900:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d904:	4618      	mov	r0, r3
 800d906:	f7fd fdea 	bl	800b4de <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800d90a:	f107 0310 	add.w	r3, r7, #16
 800d90e:	4618      	mov	r0, r3
 800d910:	f7fd fde5 	bl	800b4de <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800d914:	f107 0318 	add.w	r3, r7, #24
 800d918:	4618      	mov	r0, r3
 800d91a:	f7fd fde0 	bl	800b4de <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom((int)expected);
 800d91e:	f107 0320 	add.w	r3, r7, #32
 800d922:	4618      	mov	r0, r3
 800d924:	f7fd fddb 	bl	800b4de <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom((int)actual);
 800d928:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d92c:	4618      	mov	r0, r3
 800d92e:	f7fd fdd6 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	4618      	mov	r0, r3
 800d936:	3774      	adds	r7, #116	; 0x74
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd90      	pop	{r4, r7, pc}
 800d93c:	080258f4 	.word	0x080258f4
 800d940:	08022438 	.word	0x08022438

0800d944 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualFailure::StringEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800d944:	b590      	push	{r4, r7, lr}
 800d946:	b093      	sub	sp, #76	; 0x4c
 800d948:	af02      	add	r7, sp, #8
 800d94a:	60f8      	str	r0, [r7, #12]
 800d94c:	60b9      	str	r1, [r7, #8]
 800d94e:	607a      	str	r2, [r7, #4]
 800d950:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800d952:	68f8      	ldr	r0, [r7, #12]
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	687a      	ldr	r2, [r7, #4]
 800d958:	68b9      	ldr	r1, [r7, #8]
 800d95a:	f7ff f8a5 	bl	800caa8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d95e:	4a4a      	ldr	r2, [pc, #296]	; (800da88 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x144>)
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d96a:	68f9      	ldr	r1, [r7, #12]
 800d96c:	f107 0320 	add.w	r3, r7, #32
 800d970:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d972:	4618      	mov	r0, r3
 800d974:	f7ff faa0 	bl	800ceb8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d978:	f107 0320 	add.w	r3, r7, #32
 800d97c:	4619      	mov	r1, r3
 800d97e:	4620      	mov	r0, r4
 800d980:	f7fd fa61 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 800d984:	f107 0320 	add.w	r3, r7, #32
 800d988:	4618      	mov	r0, r3
 800d98a:	f7fd fda8 	bl	800b4de <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800d98e:	f107 0318 	add.w	r3, r7, #24
 800d992:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d994:	4618      	mov	r0, r3
 800d996:	f7fe f83d 	bl	800ba14 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800d99a:	f107 0310 	add.w	r3, r7, #16
 800d99e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f7fe f837 	bl	800ba14 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d9ac:	68f9      	ldr	r1, [r7, #12]
 800d9ae:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800d9b2:	f107 0310 	add.w	r3, r7, #16
 800d9b6:	f107 0218 	add.w	r2, r7, #24
 800d9ba:	f7ff f9b7 	bl	800cd2c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800d9be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d9c2:	4619      	mov	r1, r3
 800d9c4:	4620      	mov	r0, r4
 800d9c6:	f7fd fe07 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 800d9ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f7fd fd85 	bl	800b4de <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800d9d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d046      	beq.n	800da68 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
 800d9da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d043      	beq.n	800da68 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
    {
        size_t failStart;
        for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d9e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d9e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9e8:	4413      	add	r3, r2
 800d9ea:	781a      	ldrb	r2, [r3, #0]
 800d9ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d9ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9f0:	440b      	add	r3, r1
 800d9f2:	781b      	ldrb	r3, [r3, #0]
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d103      	bne.n	800da00 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xbc>
 800d9f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9fa:	3301      	adds	r3, #1
 800d9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d9fe:	e7f1      	b.n	800d9e4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800da00:	2300      	movs	r3, #0
 800da02:	63bb      	str	r3, [r7, #56]	; 0x38
 800da04:	f107 0310 	add.w	r3, r7, #16
 800da08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800da0a:	4618      	mov	r0, r3
 800da0c:	f7fd fecb 	bl	800b7a6 <_ZNK12SimpleString2atEj>
 800da10:	4603      	mov	r3, r0
 800da12:	461c      	mov	r4, r3
 800da14:	f107 0318 	add.w	r3, r7, #24
 800da18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7fd fec3 	bl	800b7a6 <_ZNK12SimpleString2atEj>
 800da20:	4603      	mov	r3, r0
 800da22:	429c      	cmp	r4, r3
 800da24:	bf0c      	ite	eq
 800da26:	2301      	moveq	r3, #1
 800da28:	2300      	movne	r3, #0
 800da2a:	b2db      	uxtb	r3, r3
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d003      	beq.n	800da38 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xf4>
 800da30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da32:	3301      	adds	r3, #1
 800da34:	63bb      	str	r3, [r7, #56]	; 0x38
 800da36:	e7e5      	b.n	800da04 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xc0>
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800da3e:	68f9      	ldr	r1, [r7, #12]
 800da40:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800da44:	f107 0210 	add.w	r2, r7, #16
 800da48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da4a:	9300      	str	r3, [sp, #0]
 800da4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da4e:	f7ff f987 	bl	800cd60 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800da52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800da56:	4619      	mov	r1, r3
 800da58:	4620      	mov	r0, r4
 800da5a:	f7fd fdbd 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 800da5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800da62:	4618      	mov	r0, r3
 800da64:	f7fd fd3b 	bl	800b4de <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800da68:	f107 0310 	add.w	r3, r7, #16
 800da6c:	4618      	mov	r0, r3
 800da6e:	f7fd fd36 	bl	800b4de <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800da72:	f107 0318 	add.w	r3, r7, #24
 800da76:	4618      	mov	r0, r3
 800da78:	f7fd fd31 	bl	800b4de <_ZN12SimpleStringD1Ev>
    }
}
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	4618      	mov	r0, r3
 800da80:	3744      	adds	r7, #68	; 0x44
 800da82:	46bd      	mov	sp, r7
 800da84:	bd90      	pop	{r4, r7, pc}
 800da86:	bf00      	nop
 800da88:	080258c8 	.word	0x080258c8

0800da8c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800da8c:	b590      	push	{r4, r7, lr}
 800da8e:	b093      	sub	sp, #76	; 0x4c
 800da90:	af02      	add	r7, sp, #8
 800da92:	60f8      	str	r0, [r7, #12]
 800da94:	60b9      	str	r1, [r7, #8]
 800da96:	607a      	str	r2, [r7, #4]
 800da98:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800da9a:	68f8      	ldr	r0, [r7, #12]
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	687a      	ldr	r2, [r7, #4]
 800daa0:	68b9      	ldr	r1, [r7, #8]
 800daa2:	f7ff f801 	bl	800caa8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800daa6:	4a55      	ldr	r2, [pc, #340]	; (800dbfc <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x170>)
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800dab2:	68f9      	ldr	r1, [r7, #12]
 800dab4:	f107 0320 	add.w	r3, r7, #32
 800dab8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800daba:	4618      	mov	r0, r3
 800dabc:	f7ff f9fc 	bl	800ceb8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800dac0:	f107 0320 	add.w	r3, r7, #32
 800dac4:	4619      	mov	r1, r3
 800dac6:	4620      	mov	r0, r4
 800dac8:	f7fd f9bd 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 800dacc:	f107 0320 	add.w	r3, r7, #32
 800dad0:	4618      	mov	r0, r3
 800dad2:	f7fd fd04 	bl	800b4de <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800dad6:	f107 0318 	add.w	r3, r7, #24
 800dada:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dadc:	4618      	mov	r0, r3
 800dade:	f7fd ff99 	bl	800ba14 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800dae2:	f107 0310 	add.w	r3, r7, #16
 800dae6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dae8:	4618      	mov	r0, r3
 800daea:	f7fd ff93 	bl	800ba14 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800daf4:	68f9      	ldr	r1, [r7, #12]
 800daf6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800dafa:	f107 0310 	add.w	r3, r7, #16
 800dafe:	f107 0218 	add.w	r2, r7, #24
 800db02:	f7ff f913 	bl	800cd2c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800db06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800db0a:	4619      	mov	r1, r3
 800db0c:	4620      	mov	r0, r4
 800db0e:	f7fd fd63 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 800db12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800db16:	4618      	mov	r0, r3
 800db18:	f7fd fce1 	bl	800b4de <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800db1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d05c      	beq.n	800dbdc <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
 800db22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db24:	2b00      	cmp	r3, #0
 800db26:	d059      	beq.n	800dbdc <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
    {
        size_t failStart;
        for (failStart = 0; SimpleString::ToLower(actual[failStart]) == SimpleString::ToLower(expected[failStart]); failStart++)
 800db28:	2300      	movs	r3, #0
 800db2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800db2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db30:	4413      	add	r3, r2
 800db32:	781b      	ldrb	r3, [r3, #0]
 800db34:	4618      	mov	r0, r3
 800db36:	f7fd f824 	bl	800ab82 <_ZN12SimpleString7ToLowerEc>
 800db3a:	4603      	mov	r3, r0
 800db3c:	461c      	mov	r4, r3
 800db3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800db40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db42:	4413      	add	r3, r2
 800db44:	781b      	ldrb	r3, [r3, #0]
 800db46:	4618      	mov	r0, r3
 800db48:	f7fd f81b 	bl	800ab82 <_ZN12SimpleString7ToLowerEc>
 800db4c:	4603      	mov	r3, r0
 800db4e:	429c      	cmp	r4, r3
 800db50:	bf0c      	ite	eq
 800db52:	2301      	moveq	r3, #1
 800db54:	2300      	movne	r3, #0
 800db56:	b2db      	uxtb	r3, r3
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d003      	beq.n	800db64 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xd8>
 800db5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db5e:	3301      	adds	r3, #1
 800db60:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db62:	e7e3      	b.n	800db2c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0;
 800db64:	2300      	movs	r3, #0
 800db66:	63bb      	str	r3, [r7, #56]	; 0x38
             SimpleString::ToLower(printableActual.at(failStartPrintable)) == SimpleString::ToLower(printableExpected.at(failStartPrintable));
 800db68:	f107 0310 	add.w	r3, r7, #16
 800db6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800db6e:	4618      	mov	r0, r3
 800db70:	f7fd fe19 	bl	800b7a6 <_ZNK12SimpleString2atEj>
 800db74:	4603      	mov	r3, r0
 800db76:	4618      	mov	r0, r3
 800db78:	f7fd f803 	bl	800ab82 <_ZN12SimpleString7ToLowerEc>
 800db7c:	4603      	mov	r3, r0
 800db7e:	461c      	mov	r4, r3
 800db80:	f107 0318 	add.w	r3, r7, #24
 800db84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800db86:	4618      	mov	r0, r3
 800db88:	f7fd fe0d 	bl	800b7a6 <_ZNK12SimpleString2atEj>
 800db8c:	4603      	mov	r3, r0
 800db8e:	4618      	mov	r0, r3
 800db90:	f7fc fff7 	bl	800ab82 <_ZN12SimpleString7ToLowerEc>
 800db94:	4603      	mov	r3, r0
 800db96:	429c      	cmp	r4, r3
 800db98:	bf0c      	ite	eq
 800db9a:	2301      	moveq	r3, #1
 800db9c:	2300      	movne	r3, #0
 800db9e:	b2db      	uxtb	r3, r3
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d003      	beq.n	800dbac <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x120>
        for (failStartPrintable = 0;
 800dba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dba6:	3301      	adds	r3, #1
 800dba8:	63bb      	str	r3, [r7, #56]	; 0x38
 800dbaa:	e7dd      	b.n	800db68 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xdc>
             failStartPrintable++)
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800dbb2:	68f9      	ldr	r1, [r7, #12]
 800dbb4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800dbb8:	f107 0210 	add.w	r2, r7, #16
 800dbbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbbe:	9300      	str	r3, [sp, #0]
 800dbc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbc2:	f7ff f8cd 	bl	800cd60 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800dbc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dbca:	4619      	mov	r1, r3
 800dbcc:	4620      	mov	r0, r4
 800dbce:	f7fd fd03 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 800dbd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f7fd fc81 	bl	800b4de <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800dbdc:	f107 0310 	add.w	r3, r7, #16
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f7fd fc7c 	bl	800b4de <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800dbe6:	f107 0318 	add.w	r3, r7, #24
 800dbea:	4618      	mov	r0, r3
 800dbec:	f7fd fc77 	bl	800b4de <_ZN12SimpleStringD1Ev>
    }
}
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3744      	adds	r7, #68	; 0x44
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd90      	pop	{r4, r7, pc}
 800dbfa:	bf00      	nop
 800dbfc:	0802589c 	.word	0x0802589c

0800dc00 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>:

BinaryEqualFailure::BinaryEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const unsigned char* expected,
 800dc00:	b5b0      	push	{r4, r5, r7, lr}
 800dc02:	b092      	sub	sp, #72	; 0x48
 800dc04:	af02      	add	r7, sp, #8
 800dc06:	60f8      	str	r0, [r7, #12]
 800dc08:	60b9      	str	r1, [r7, #8]
 800dc0a:	607a      	str	r2, [r7, #4]
 800dc0c:	603b      	str	r3, [r7, #0]
                                       const unsigned char* actual, size_t size, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800dc0e:	68f8      	ldr	r0, [r7, #12]
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	687a      	ldr	r2, [r7, #4]
 800dc14:	68b9      	ldr	r1, [r7, #8]
 800dc16:	f7fe ff47 	bl	800caa8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800dc1a:	4a40      	ldr	r2, [pc, #256]	; (800dd1c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x11c>)
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800dc26:	68f9      	ldr	r1, [r7, #12]
 800dc28:	f107 031c 	add.w	r3, r7, #28
 800dc2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7ff f942 	bl	800ceb8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800dc34:	f107 031c 	add.w	r3, r7, #28
 800dc38:	4619      	mov	r1, r3
 800dc3a:	4620      	mov	r0, r4
 800dc3c:	f7fd f903 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 800dc40:	f107 031c 	add.w	r3, r7, #28
 800dc44:	4618      	mov	r0, r3
 800dc46:	f7fd fc4a 	bl	800b4de <_ZN12SimpleStringD1Ev>

    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800dc4a:	f107 0314 	add.w	r3, r7, #20
 800dc4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dc50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dc52:	4618      	mov	r0, r3
 800dc54:	f7fe fa4c 	bl	800c0f0 <_Z22StringFromBinaryOrNullPKhj>

	message_ += createButWasString(StringFromBinaryOrNull(expected, size), actualHex);
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800dc5e:	68fd      	ldr	r5, [r7, #12]
 800dc60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dc64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dc66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f7fe fa41 	bl	800c0f0 <_Z22StringFromBinaryOrNullPKhj>
 800dc6e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800dc72:	f107 0314 	add.w	r3, r7, #20
 800dc76:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800dc7a:	4629      	mov	r1, r5
 800dc7c:	f7ff f856 	bl	800cd2c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800dc80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dc84:	4619      	mov	r1, r3
 800dc86:	4620      	mov	r0, r4
 800dc88:	f7fd fca6 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 800dc8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dc90:	4618      	mov	r0, r3
 800dc92:	f7fd fc24 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800dc96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f7fd fc1f 	bl	800b4de <_ZN12SimpleStringD1Ev>
	if ((expected) && (actual))
 800dca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d02f      	beq.n	800dd06 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
 800dca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d02c      	beq.n	800dd06 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
	{
		size_t failStart;
		for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800dcac:	2300      	movs	r3, #0
 800dcae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dcb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dcb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcb4:	4413      	add	r3, r2
 800dcb6:	781a      	ldrb	r2, [r3, #0]
 800dcb8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dcba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcbc:	440b      	add	r3, r1
 800dcbe:	781b      	ldrb	r3, [r3, #0]
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d103      	bne.n	800dccc <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xcc>
 800dcc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcc6:	3301      	adds	r3, #1
 800dcc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dcca:	e7f1      	b.n	800dcb0 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xb0>
			;
		message_ += createDifferenceAtPosString(actualHex, (failStart * 3 + 1), failStart);
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800dcd2:	68f9      	ldr	r1, [r7, #12]
 800dcd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dcd6:	4613      	mov	r3, r2
 800dcd8:	005b      	lsls	r3, r3, #1
 800dcda:	4413      	add	r3, r2
 800dcdc:	1c5d      	adds	r5, r3, #1
 800dcde:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800dce2:	f107 0214 	add.w	r2, r7, #20
 800dce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dce8:	9300      	str	r3, [sp, #0]
 800dcea:	462b      	mov	r3, r5
 800dcec:	f7ff f838 	bl	800cd60 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800dcf0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800dcf4:	4619      	mov	r1, r3
 800dcf6:	4620      	mov	r0, r4
 800dcf8:	f7fd fc6e 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 800dcfc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800dd00:	4618      	mov	r0, r3
 800dd02:	f7fd fbec 	bl	800b4de <_ZN12SimpleStringD1Ev>
    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800dd06:	f107 0314 	add.w	r3, r7, #20
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f7fd fbe7 	bl	800b4de <_ZN12SimpleStringD1Ev>
	}
}
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	4618      	mov	r0, r3
 800dd14:	3740      	adds	r7, #64	; 0x40
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bdb0      	pop	{r4, r5, r7, pc}
 800dd1a:	bf00      	nop
 800dd1c:	08025870 	.word	0x08025870

0800dd20 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>:

BitsEqualFailure::BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual,
 800dd20:	b5b0      	push	{r4, r5, r7, lr}
 800dd22:	b08c      	sub	sp, #48	; 0x30
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	60f8      	str	r0, [r7, #12]
 800dd28:	60b9      	str	r1, [r7, #8]
 800dd2a:	607a      	str	r2, [r7, #4]
 800dd2c:	603b      	str	r3, [r7, #0]
                                   unsigned long mask, size_t byteCount, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800dd2e:	68f8      	ldr	r0, [r7, #12]
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	687a      	ldr	r2, [r7, #4]
 800dd34:	68b9      	ldr	r1, [r7, #8]
 800dd36:	f7fe feb7 	bl	800caa8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800dd3a:	4a26      	ldr	r2, [pc, #152]	; (800ddd4 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString+0xb4>)
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800dd46:	68f9      	ldr	r1, [r7, #12]
 800dd48:	f107 0310 	add.w	r3, r7, #16
 800dd4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f7ff f8b2 	bl	800ceb8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800dd54:	f107 0310 	add.w	r3, r7, #16
 800dd58:	4619      	mov	r1, r3
 800dd5a:	4620      	mov	r0, r4
 800dd5c:	f7fd f873 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 800dd60:	f107 0310 	add.w	r3, r7, #16
 800dd64:	4618      	mov	r0, r3
 800dd66:	f7fd fbba 	bl	800b4de <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFromMaskedBits(expected, mask, byteCount), StringFromMaskedBits(actual, mask, byteCount));
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800dd70:	68fd      	ldr	r5, [r7, #12]
 800dd72:	f107 0020 	add.w	r0, r7, #32
 800dd76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dd7c:	f7fe fa24 	bl	800c1c8 <_Z20StringFromMaskedBitsmmj>
 800dd80:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800dd84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd88:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dd8a:	f7fe fa1d 	bl	800c1c8 <_Z20StringFromMaskedBitsmmj>
 800dd8e:	f107 0018 	add.w	r0, r7, #24
 800dd92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dd96:	f107 0220 	add.w	r2, r7, #32
 800dd9a:	4629      	mov	r1, r5
 800dd9c:	f7fe ffc6 	bl	800cd2c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800dda0:	f107 0318 	add.w	r3, r7, #24
 800dda4:	4619      	mov	r1, r3
 800dda6:	4620      	mov	r0, r4
 800dda8:	f7fd fc16 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 800ddac:	f107 0318 	add.w	r3, r7, #24
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f7fd fb94 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800ddb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f7fd fb8f 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800ddc0:	f107 0320 	add.w	r3, r7, #32
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f7fd fb8a 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	4618      	mov	r0, r3
 800ddce:	3730      	adds	r7, #48	; 0x30
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bdb0      	pop	{r4, r5, r7, pc}
 800ddd4:	08025844 	.word	0x08025844

0800ddd8 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>:

FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell* test, const char* fileName, size_t lineNumber,
 800ddd8:	b590      	push	{r4, r7, lr}
 800ddda:	b089      	sub	sp, #36	; 0x24
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	60f8      	str	r0, [r7, #12]
 800dde0:	60b9      	str	r1, [r7, #8]
 800dde2:	607a      	str	r2, [r7, #4]
 800dde4:	603b      	str	r3, [r7, #0]
                                                     const SimpleString& featureName, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800dde6:	68f8      	ldr	r0, [r7, #12]
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	687a      	ldr	r2, [r7, #4]
 800ddec:	68b9      	ldr	r1, [r7, #8]
 800ddee:	f7fe fe5b 	bl	800caa8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800ddf2:	4a1a      	ldr	r2, [pc, #104]	; (800de5c <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x84>)
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ddfe:	68f9      	ldr	r1, [r7, #12]
 800de00:	f107 0310 	add.w	r3, r7, #16
 800de04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de06:	4618      	mov	r0, r3
 800de08:	f7ff f856 	bl	800ceb8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800de0c:	f107 0310 	add.w	r3, r7, #16
 800de10:	4619      	mov	r1, r3
 800de12:	4620      	mov	r0, r4
 800de14:	f7fd f817 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 800de18:	f107 0310 	add.w	r3, r7, #16
 800de1c:	4618      	mov	r0, r3
 800de1e:	f7fd fb5e 	bl	800b4de <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("The feature \"%s\" is not supported in this environment or with the feature set selected when building the library.", featureName.asCharString());
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800de28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de2a:	f7fd fb2b 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 800de2e:	4602      	mov	r2, r0
 800de30:	f107 0318 	add.w	r3, r7, #24
 800de34:	490a      	ldr	r1, [pc, #40]	; (800de60 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x88>)
 800de36:	4618      	mov	r0, r3
 800de38:	f7fe f858 	bl	800beec <_Z16StringFromFormatPKcz>
 800de3c:	f107 0318 	add.w	r3, r7, #24
 800de40:	4619      	mov	r1, r3
 800de42:	4620      	mov	r0, r4
 800de44:	f7fd fbc8 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 800de48:	f107 0318 	add.w	r3, r7, #24
 800de4c:	4618      	mov	r0, r3
 800de4e:	f7fd fb46 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	4618      	mov	r0, r3
 800de56:	3724      	adds	r7, #36	; 0x24
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd90      	pop	{r4, r7, pc}
 800de5c:	08025818 	.word	0x08025818
 800de60:	08022508 	.word	0x08022508

0800de64 <_ZN25FeatureUnsupportedFailureD1Ev>:
{
public:
	BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const SimpleString& text);
};

class FeatureUnsupportedFailure : public TestFailure
 800de64:	b580      	push	{r7, lr}
 800de66:	b082      	sub	sp, #8
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
 800de6c:	4a05      	ldr	r2, [pc, #20]	; (800de84 <_ZN25FeatureUnsupportedFailureD1Ev+0x20>)
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	601a      	str	r2, [r3, #0]
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	4618      	mov	r0, r3
 800de76:	f7fe fe99 	bl	800cbac <_ZN11TestFailureD1Ev>
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	4618      	mov	r0, r3
 800de7e:	3708      	adds	r7, #8
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}
 800de84:	08025818 	.word	0x08025818

0800de88 <_ZN25FeatureUnsupportedFailureD0Ev>:
 800de88:	b580      	push	{r7, lr}
 800de8a:	b082      	sub	sp, #8
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f7ff ffe7 	bl	800de64 <_ZN25FeatureUnsupportedFailureD1Ev>
 800de96:	2134      	movs	r1, #52	; 0x34
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f7fa fbb9 	bl	8008610 <_ZdlPvj>
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	4618      	mov	r0, r3
 800dea2:	3708      	adds	r7, #8
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}

0800dea8 <_ZN16BitsEqualFailureD1Ev>:
class BitsEqualFailure : public TestFailure
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b082      	sub	sp, #8
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
 800deb0:	4a05      	ldr	r2, [pc, #20]	; (800dec8 <_ZN16BitsEqualFailureD1Ev+0x20>)
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	601a      	str	r2, [r3, #0]
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	4618      	mov	r0, r3
 800deba:	f7fe fe77 	bl	800cbac <_ZN11TestFailureD1Ev>
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	4618      	mov	r0, r3
 800dec2:	3708      	adds	r7, #8
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bd80      	pop	{r7, pc}
 800dec8:	08025844 	.word	0x08025844

0800decc <_ZN16BitsEqualFailureD0Ev>:
 800decc:	b580      	push	{r7, lr}
 800dece:	b082      	sub	sp, #8
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f7ff ffe7 	bl	800dea8 <_ZN16BitsEqualFailureD1Ev>
 800deda:	2134      	movs	r1, #52	; 0x34
 800dedc:	6878      	ldr	r0, [r7, #4]
 800dede:	f7fa fb97 	bl	8008610 <_ZdlPvj>
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	4618      	mov	r0, r3
 800dee6:	3708      	adds	r7, #8
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}

0800deec <_ZN18BinaryEqualFailureD1Ev>:
class BinaryEqualFailure : public TestFailure
 800deec:	b580      	push	{r7, lr}
 800deee:	b082      	sub	sp, #8
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	4a05      	ldr	r2, [pc, #20]	; (800df0c <_ZN18BinaryEqualFailureD1Ev+0x20>)
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	601a      	str	r2, [r3, #0]
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	4618      	mov	r0, r3
 800defe:	f7fe fe55 	bl	800cbac <_ZN11TestFailureD1Ev>
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	4618      	mov	r0, r3
 800df06:	3708      	adds	r7, #8
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}
 800df0c:	08025870 	.word	0x08025870

0800df10 <_ZN18BinaryEqualFailureD0Ev>:
 800df10:	b580      	push	{r7, lr}
 800df12:	b082      	sub	sp, #8
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	f7ff ffe7 	bl	800deec <_ZN18BinaryEqualFailureD1Ev>
 800df1e:	2134      	movs	r1, #52	; 0x34
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f7fa fb75 	bl	8008610 <_ZdlPvj>
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	4618      	mov	r0, r3
 800df2a:	3708      	adds	r7, #8
 800df2c:	46bd      	mov	sp, r7
 800df2e:	bd80      	pop	{r7, pc}

0800df30 <_ZN24StringEqualNoCaseFailureD1Ev>:
class StringEqualNoCaseFailure : public TestFailure
 800df30:	b580      	push	{r7, lr}
 800df32:	b082      	sub	sp, #8
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
 800df38:	4a05      	ldr	r2, [pc, #20]	; (800df50 <_ZN24StringEqualNoCaseFailureD1Ev+0x20>)
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	601a      	str	r2, [r3, #0]
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	4618      	mov	r0, r3
 800df42:	f7fe fe33 	bl	800cbac <_ZN11TestFailureD1Ev>
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	4618      	mov	r0, r3
 800df4a:	3708      	adds	r7, #8
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}
 800df50:	0802589c 	.word	0x0802589c

0800df54 <_ZN24StringEqualNoCaseFailureD0Ev>:
 800df54:	b580      	push	{r7, lr}
 800df56:	b082      	sub	sp, #8
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f7ff ffe7 	bl	800df30 <_ZN24StringEqualNoCaseFailureD1Ev>
 800df62:	2134      	movs	r1, #52	; 0x34
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	f7fa fb53 	bl	8008610 <_ZdlPvj>
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	4618      	mov	r0, r3
 800df6e:	3708      	adds	r7, #8
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}

0800df74 <_ZN18StringEqualFailureD1Ev>:
class StringEqualFailure : public TestFailure
 800df74:	b580      	push	{r7, lr}
 800df76:	b082      	sub	sp, #8
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
 800df7c:	4a05      	ldr	r2, [pc, #20]	; (800df94 <_ZN18StringEqualFailureD1Ev+0x20>)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	601a      	str	r2, [r3, #0]
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	4618      	mov	r0, r3
 800df86:	f7fe fe11 	bl	800cbac <_ZN11TestFailureD1Ev>
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	4618      	mov	r0, r3
 800df8e:	3708      	adds	r7, #8
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}
 800df94:	080258c8 	.word	0x080258c8

0800df98 <_ZN18StringEqualFailureD0Ev>:
 800df98:	b580      	push	{r7, lr}
 800df9a:	b082      	sub	sp, #8
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
 800dfa0:	6878      	ldr	r0, [r7, #4]
 800dfa2:	f7ff ffe7 	bl	800df74 <_ZN18StringEqualFailureD1Ev>
 800dfa6:	2134      	movs	r1, #52	; 0x34
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	f7fa fb31 	bl	8008610 <_ZdlPvj>
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3708      	adds	r7, #8
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}

0800dfb8 <_ZN23SignedBytesEqualFailureD1Ev>:
class SignedBytesEqualFailure : public TestFailure
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b082      	sub	sp, #8
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
 800dfc0:	4a05      	ldr	r2, [pc, #20]	; (800dfd8 <_ZN23SignedBytesEqualFailureD1Ev+0x20>)
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	601a      	str	r2, [r3, #0]
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f7fe fdef 	bl	800cbac <_ZN11TestFailureD1Ev>
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	3708      	adds	r7, #8
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}
 800dfd8:	080258f4 	.word	0x080258f4

0800dfdc <_ZN23SignedBytesEqualFailureD0Ev>:
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b082      	sub	sp, #8
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
 800dfe4:	6878      	ldr	r0, [r7, #4]
 800dfe6:	f7ff ffe7 	bl	800dfb8 <_ZN23SignedBytesEqualFailureD1Ev>
 800dfea:	2134      	movs	r1, #52	; 0x34
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	f7fa fb0f 	bl	8008610 <_ZdlPvj>
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	4618      	mov	r0, r3
 800dff6:	3708      	adds	r7, #8
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bd80      	pop	{r7, pc}

0800dffc <_ZN25UnsignedLongsEqualFailureD1Ev>:
class UnsignedLongsEqualFailure : public TestFailure
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b082      	sub	sp, #8
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
 800e004:	4a05      	ldr	r2, [pc, #20]	; (800e01c <_ZN25UnsignedLongsEqualFailureD1Ev+0x20>)
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	601a      	str	r2, [r3, #0]
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	4618      	mov	r0, r3
 800e00e:	f7fe fdcd 	bl	800cbac <_ZN11TestFailureD1Ev>
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	4618      	mov	r0, r3
 800e016:	3708      	adds	r7, #8
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}
 800e01c:	08025920 	.word	0x08025920

0800e020 <_ZN25UnsignedLongsEqualFailureD0Ev>:
 800e020:	b580      	push	{r7, lr}
 800e022:	b082      	sub	sp, #8
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	f7ff ffe7 	bl	800dffc <_ZN25UnsignedLongsEqualFailureD1Ev>
 800e02e:	2134      	movs	r1, #52	; 0x34
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f7fa faed 	bl	8008610 <_ZdlPvj>
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	4618      	mov	r0, r3
 800e03a:	3708      	adds	r7, #8
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}

0800e040 <_ZN17LongsEqualFailureD1Ev>:
class LongsEqualFailure : public TestFailure
 800e040:	b580      	push	{r7, lr}
 800e042:	b082      	sub	sp, #8
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	4a05      	ldr	r2, [pc, #20]	; (800e060 <_ZN17LongsEqualFailureD1Ev+0x20>)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	601a      	str	r2, [r3, #0]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	4618      	mov	r0, r3
 800e052:	f7fe fdab 	bl	800cbac <_ZN11TestFailureD1Ev>
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	4618      	mov	r0, r3
 800e05a:	3708      	adds	r7, #8
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd80      	pop	{r7, pc}
 800e060:	0802594c 	.word	0x0802594c

0800e064 <_ZN17LongsEqualFailureD0Ev>:
 800e064:	b580      	push	{r7, lr}
 800e066:	b082      	sub	sp, #8
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
 800e06c:	6878      	ldr	r0, [r7, #4]
 800e06e:	f7ff ffe7 	bl	800e040 <_ZN17LongsEqualFailureD1Ev>
 800e072:	2134      	movs	r1, #52	; 0x34
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f7fa facb 	bl	8008610 <_ZdlPvj>
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	4618      	mov	r0, r3
 800e07e:	3708      	adds	r7, #8
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}

0800e084 <_ZN12CheckFailureD1Ev>:
class CheckFailure : public TestFailure
 800e084:	b580      	push	{r7, lr}
 800e086:	b082      	sub	sp, #8
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	4a05      	ldr	r2, [pc, #20]	; (800e0a4 <_ZN12CheckFailureD1Ev+0x20>)
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	601a      	str	r2, [r3, #0]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	4618      	mov	r0, r3
 800e096:	f7fe fd89 	bl	800cbac <_ZN11TestFailureD1Ev>
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	4618      	mov	r0, r3
 800e09e:	3708      	adds	r7, #8
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	bd80      	pop	{r7, pc}
 800e0a4:	08025978 	.word	0x08025978

0800e0a8 <_ZN12CheckFailureD0Ev>:
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b082      	sub	sp, #8
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
 800e0b0:	6878      	ldr	r0, [r7, #4]
 800e0b2:	f7ff ffe7 	bl	800e084 <_ZN12CheckFailureD1Ev>
 800e0b6:	2134      	movs	r1, #52	; 0x34
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	f7fa faa9 	bl	8008610 <_ZdlPvj>
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	3708      	adds	r7, #8
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}

0800e0c8 <_ZN15ContainsFailureD1Ev>:
class ContainsFailure: public TestFailure
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b082      	sub	sp, #8
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
 800e0d0:	4a05      	ldr	r2, [pc, #20]	; (800e0e8 <_ZN15ContainsFailureD1Ev+0x20>)
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	601a      	str	r2, [r3, #0]
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f7fe fd67 	bl	800cbac <_ZN11TestFailureD1Ev>
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3708      	adds	r7, #8
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}
 800e0e8:	080259a4 	.word	0x080259a4

0800e0ec <_ZN15ContainsFailureD0Ev>:
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b082      	sub	sp, #8
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
 800e0f4:	6878      	ldr	r0, [r7, #4]
 800e0f6:	f7ff ffe7 	bl	800e0c8 <_ZN15ContainsFailureD1Ev>
 800e0fa:	2134      	movs	r1, #52	; 0x34
 800e0fc:	6878      	ldr	r0, [r7, #4]
 800e0fe:	f7fa fa87 	bl	8008610 <_ZdlPvj>
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	4618      	mov	r0, r3
 800e106:	3708      	adds	r7, #8
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}

0800e10c <_ZN17ComparisonFailureD1Ev>:
class ComparisonFailure : public TestFailure
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b082      	sub	sp, #8
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
 800e114:	4a05      	ldr	r2, [pc, #20]	; (800e12c <_ZN17ComparisonFailureD1Ev+0x20>)
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	601a      	str	r2, [r3, #0]
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	4618      	mov	r0, r3
 800e11e:	f7fe fd45 	bl	800cbac <_ZN11TestFailureD1Ev>
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	4618      	mov	r0, r3
 800e126:	3708      	adds	r7, #8
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}
 800e12c:	080259d0 	.word	0x080259d0

0800e130 <_ZN17ComparisonFailureD0Ev>:
 800e130:	b580      	push	{r7, lr}
 800e132:	b082      	sub	sp, #8
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f7ff ffe7 	bl	800e10c <_ZN17ComparisonFailureD1Ev>
 800e13e:	2134      	movs	r1, #52	; 0x34
 800e140:	6878      	ldr	r0, [r7, #4]
 800e142:	f7fa fa65 	bl	8008610 <_ZdlPvj>
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	4618      	mov	r0, r3
 800e14a:	3708      	adds	r7, #8
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}

0800e150 <_ZN17CheckEqualFailureD1Ev>:
class CheckEqualFailure : public TestFailure
 800e150:	b580      	push	{r7, lr}
 800e152:	b082      	sub	sp, #8
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	4a05      	ldr	r2, [pc, #20]	; (800e170 <_ZN17CheckEqualFailureD1Ev+0x20>)
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	601a      	str	r2, [r3, #0]
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	4618      	mov	r0, r3
 800e162:	f7fe fd23 	bl	800cbac <_ZN11TestFailureD1Ev>
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	4618      	mov	r0, r3
 800e16a:	3708      	adds	r7, #8
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}
 800e170:	080259fc 	.word	0x080259fc

0800e174 <_ZN17CheckEqualFailureD0Ev>:
 800e174:	b580      	push	{r7, lr}
 800e176:	b082      	sub	sp, #8
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f7ff ffe7 	bl	800e150 <_ZN17CheckEqualFailureD1Ev>
 800e182:	2134      	movs	r1, #52	; 0x34
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f7fa fa43 	bl	8008610 <_ZdlPvj>
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	4618      	mov	r0, r3
 800e18e:	3708      	adds	r7, #8
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}

0800e194 <_ZN19DoublesEqualFailureD1Ev>:
class DoublesEqualFailure: public TestFailure
 800e194:	b580      	push	{r7, lr}
 800e196:	b082      	sub	sp, #8
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
 800e19c:	4a05      	ldr	r2, [pc, #20]	; (800e1b4 <_ZN19DoublesEqualFailureD1Ev+0x20>)
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	601a      	str	r2, [r3, #0]
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	f7fe fd01 	bl	800cbac <_ZN11TestFailureD1Ev>
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	3708      	adds	r7, #8
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}
 800e1b4:	08025a28 	.word	0x08025a28

0800e1b8 <_ZN19DoublesEqualFailureD0Ev>:
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b082      	sub	sp, #8
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f7ff ffe7 	bl	800e194 <_ZN19DoublesEqualFailureD1Ev>
 800e1c6:	2134      	movs	r1, #52	; 0x34
 800e1c8:	6878      	ldr	r0, [r7, #4]
 800e1ca:	f7fa fa21 	bl	8008610 <_ZdlPvj>
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	3708      	adds	r7, #8
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	bd80      	pop	{r7, pc}

0800e1d8 <_ZN13EqualsFailureD1Ev>:
class EqualsFailure: public TestFailure
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b082      	sub	sp, #8
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
 800e1e0:	4a05      	ldr	r2, [pc, #20]	; (800e1f8 <_ZN13EqualsFailureD1Ev+0x20>)
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	601a      	str	r2, [r3, #0]
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	f7fe fcdf 	bl	800cbac <_ZN11TestFailureD1Ev>
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	3708      	adds	r7, #8
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}
 800e1f8:	08025a54 	.word	0x08025a54

0800e1fc <_ZN13EqualsFailureD0Ev>:
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b082      	sub	sp, #8
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
 800e204:	6878      	ldr	r0, [r7, #4]
 800e206:	f7ff ffe7 	bl	800e1d8 <_ZN13EqualsFailureD1Ev>
 800e20a:	2134      	movs	r1, #52	; 0x34
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f7fa f9ff 	bl	8008610 <_ZdlPvj>
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	4618      	mov	r0, r3
 800e216:	3708      	adds	r7, #8
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}

0800e21c <_ZL13checkedMallocj>:
#include "CppUTest/TestMemoryAllocator.h"
#include "CppUTest/PlatformSpecificFunctions.h"
#include "CppUTest/MemoryLeakDetector.h"

static char* checkedMalloc(size_t size)
{
 800e21c:	b5b0      	push	{r4, r5, r7, lr}
 800e21e:	b086      	sub	sp, #24
 800e220:	af02      	add	r7, sp, #8
 800e222:	6078      	str	r0, [r7, #4]
    char* mem = (char*) PlatformSpecificMalloc(size);
 800e224:	4b0d      	ldr	r3, [pc, #52]	; (800e25c <_ZL13checkedMallocj+0x40>)
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	4798      	blx	r3
 800e22c:	60f8      	str	r0, [r7, #12]
    if (mem == NULLPTR)
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d10e      	bne.n	800e252 <_ZL13checkedMallocj+0x36>
    FAIL("malloc returned null pointer");
 800e234:	f004 f97e 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 800e238:	4604      	mov	r4, r0
 800e23a:	6823      	ldr	r3, [r4, #0]
 800e23c:	3368      	adds	r3, #104	; 0x68
 800e23e:	681d      	ldr	r5, [r3, #0]
 800e240:	f004 f988 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800e244:	4603      	mov	r3, r0
 800e246:	9300      	str	r3, [sp, #0]
 800e248:	2325      	movs	r3, #37	; 0x25
 800e24a:	4a05      	ldr	r2, [pc, #20]	; (800e260 <_ZL13checkedMallocj+0x44>)
 800e24c:	4905      	ldr	r1, [pc, #20]	; (800e264 <_ZL13checkedMallocj+0x48>)
 800e24e:	4620      	mov	r0, r4
 800e250:	47a8      	blx	r5
    return mem;
 800e252:	68fb      	ldr	r3, [r7, #12]
}
 800e254:	4618      	mov	r0, r3
 800e256:	3710      	adds	r7, #16
 800e258:	46bd      	mov	sp, r7
 800e25a:	bdb0      	pop	{r4, r5, r7, pc}
 800e25c:	200000c8 	.word	0x200000c8
 800e260:	0802257c 	.word	0x0802257c
 800e264:	0802259c 	.word	0x0802259c

0800e268 <_Z22getCurrentNewAllocatorv>:
{
    currentNewAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewAllocator()
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	af00      	add	r7, sp, #0
    if (currentNewAllocator == NULLPTR) setCurrentNewAllocatorToDefault();
 800e26c:	4b04      	ldr	r3, [pc, #16]	; (800e280 <_Z22getCurrentNewAllocatorv+0x18>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d101      	bne.n	800e278 <_Z22getCurrentNewAllocatorv+0x10>
 800e274:	f000 f806 	bl	800e284 <_Z31setCurrentNewAllocatorToDefaultv>
    return currentNewAllocator;
 800e278:	4b01      	ldr	r3, [pc, #4]	; (800e280 <_Z22getCurrentNewAllocatorv+0x18>)
 800e27a:	681b      	ldr	r3, [r3, #0]
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	bd80      	pop	{r7, pc}
 800e280:	20000740 	.word	0x20000740

0800e284 <_Z31setCurrentNewAllocatorToDefaultv>:

void setCurrentNewAllocatorToDefault()
{
 800e284:	b580      	push	{r7, lr}
 800e286:	af00      	add	r7, sp, #0
    currentNewAllocator = defaultNewAllocator();
 800e288:	f000 f810 	bl	800e2ac <_Z19defaultNewAllocatorv>
 800e28c:	4603      	mov	r3, r0
 800e28e:	4a02      	ldr	r2, [pc, #8]	; (800e298 <_Z31setCurrentNewAllocatorToDefaultv+0x14>)
 800e290:	6013      	str	r3, [r2, #0]
}
 800e292:	bf00      	nop
 800e294:	bd80      	pop	{r7, pc}
 800e296:	bf00      	nop
 800e298:	20000740 	.word	0x20000740

0800e29c <__tcf_0>:

TestMemoryAllocator* defaultNewAllocator()
{
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800e29c:	b580      	push	{r7, lr}
 800e29e:	af00      	add	r7, sp, #0
 800e2a0:	4801      	ldr	r0, [pc, #4]	; (800e2a8 <__tcf_0+0xc>)
 800e2a2:	f000 f909 	bl	800e4b8 <_ZN19TestMemoryAllocatorD1Ev>
 800e2a6:	bd80      	pop	{r7, pc}
 800e2a8:	2000074c 	.word	0x2000074c

0800e2ac <_Z19defaultNewAllocatorv>:
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800e2b0:	4b13      	ldr	r3, [pc, #76]	; (800e300 <_Z19defaultNewAllocatorv+0x54>)
 800e2b2:	781b      	ldrb	r3, [r3, #0]
 800e2b4:	f3bf 8f5b 	dmb	ish
 800e2b8:	b2db      	uxtb	r3, r3
 800e2ba:	f003 0301 	and.w	r3, r3, #1
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	bf0c      	ite	eq
 800e2c2:	2301      	moveq	r3, #1
 800e2c4:	2300      	movne	r3, #0
 800e2c6:	b2db      	uxtb	r3, r3
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d016      	beq.n	800e2fa <_Z19defaultNewAllocatorv+0x4e>
 800e2cc:	480c      	ldr	r0, [pc, #48]	; (800e300 <_Z19defaultNewAllocatorv+0x54>)
 800e2ce:	f00f fc0f 	bl	801daf0 <__cxa_guard_acquire>
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	bf14      	ite	ne
 800e2d8:	2301      	movne	r3, #1
 800e2da:	2300      	moveq	r3, #0
 800e2dc:	b2db      	uxtb	r3, r3
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d00b      	beq.n	800e2fa <_Z19defaultNewAllocatorv+0x4e>
 800e2e2:	4b08      	ldr	r3, [pc, #32]	; (800e304 <_Z19defaultNewAllocatorv+0x58>)
 800e2e4:	4a08      	ldr	r2, [pc, #32]	; (800e308 <_Z19defaultNewAllocatorv+0x5c>)
 800e2e6:	4909      	ldr	r1, [pc, #36]	; (800e30c <_Z19defaultNewAllocatorv+0x60>)
 800e2e8:	4809      	ldr	r0, [pc, #36]	; (800e310 <_Z19defaultNewAllocatorv+0x64>)
 800e2ea:	f000 f8c5 	bl	800e478 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800e2ee:	4804      	ldr	r0, [pc, #16]	; (800e300 <_Z19defaultNewAllocatorv+0x54>)
 800e2f0:	f00f fc0a 	bl	801db08 <__cxa_guard_release>
 800e2f4:	4807      	ldr	r0, [pc, #28]	; (800e314 <_Z19defaultNewAllocatorv+0x68>)
 800e2f6:	f00f fc2e 	bl	801db56 <atexit>
    return &allocator;
 800e2fa:	4b05      	ldr	r3, [pc, #20]	; (800e310 <_Z19defaultNewAllocatorv+0x64>)
}
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	bd80      	pop	{r7, pc}
 800e300:	20000760 	.word	0x20000760
 800e304:	080225bc 	.word	0x080225bc
 800e308:	080225c4 	.word	0x080225c4
 800e30c:	080225c8 	.word	0x080225c8
 800e310:	2000074c 	.word	0x2000074c
 800e314:	0800e29d 	.word	0x0800e29d

0800e318 <_Z27getCurrentNewArrayAllocatorv>:
{
    currentNewArrayAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewArrayAllocator()
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	af00      	add	r7, sp, #0
    if (currentNewArrayAllocator == NULLPTR) setCurrentNewArrayAllocatorToDefault();
 800e31c:	4b04      	ldr	r3, [pc, #16]	; (800e330 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d101      	bne.n	800e328 <_Z27getCurrentNewArrayAllocatorv+0x10>
 800e324:	f000 f806 	bl	800e334 <_Z36setCurrentNewArrayAllocatorToDefaultv>
    return currentNewArrayAllocator;
 800e328:	4b01      	ldr	r3, [pc, #4]	; (800e330 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800e32a:	681b      	ldr	r3, [r3, #0]
}
 800e32c:	4618      	mov	r0, r3
 800e32e:	bd80      	pop	{r7, pc}
 800e330:	20000744 	.word	0x20000744

0800e334 <_Z36setCurrentNewArrayAllocatorToDefaultv>:

void setCurrentNewArrayAllocatorToDefault()
{
 800e334:	b580      	push	{r7, lr}
 800e336:	af00      	add	r7, sp, #0
    currentNewArrayAllocator = defaultNewArrayAllocator();
 800e338:	f000 f810 	bl	800e35c <_Z24defaultNewArrayAllocatorv>
 800e33c:	4603      	mov	r3, r0
 800e33e:	4a02      	ldr	r2, [pc, #8]	; (800e348 <_Z36setCurrentNewArrayAllocatorToDefaultv+0x14>)
 800e340:	6013      	str	r3, [r2, #0]
}
 800e342:	bf00      	nop
 800e344:	bd80      	pop	{r7, pc}
 800e346:	bf00      	nop
 800e348:	20000744 	.word	0x20000744

0800e34c <__tcf_1>:

TestMemoryAllocator* defaultNewArrayAllocator()
{
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800e34c:	b580      	push	{r7, lr}
 800e34e:	af00      	add	r7, sp, #0
 800e350:	4801      	ldr	r0, [pc, #4]	; (800e358 <__tcf_1+0xc>)
 800e352:	f000 f8b1 	bl	800e4b8 <_ZN19TestMemoryAllocatorD1Ev>
 800e356:	bd80      	pop	{r7, pc}
 800e358:	20000764 	.word	0x20000764

0800e35c <_Z24defaultNewArrayAllocatorv>:
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800e360:	4b13      	ldr	r3, [pc, #76]	; (800e3b0 <_Z24defaultNewArrayAllocatorv+0x54>)
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	f3bf 8f5b 	dmb	ish
 800e368:	b2db      	uxtb	r3, r3
 800e36a:	f003 0301 	and.w	r3, r3, #1
 800e36e:	2b00      	cmp	r3, #0
 800e370:	bf0c      	ite	eq
 800e372:	2301      	moveq	r3, #1
 800e374:	2300      	movne	r3, #0
 800e376:	b2db      	uxtb	r3, r3
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d016      	beq.n	800e3aa <_Z24defaultNewArrayAllocatorv+0x4e>
 800e37c:	480c      	ldr	r0, [pc, #48]	; (800e3b0 <_Z24defaultNewArrayAllocatorv+0x54>)
 800e37e:	f00f fbb7 	bl	801daf0 <__cxa_guard_acquire>
 800e382:	4603      	mov	r3, r0
 800e384:	2b00      	cmp	r3, #0
 800e386:	bf14      	ite	ne
 800e388:	2301      	movne	r3, #1
 800e38a:	2300      	moveq	r3, #0
 800e38c:	b2db      	uxtb	r3, r3
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d00b      	beq.n	800e3aa <_Z24defaultNewArrayAllocatorv+0x4e>
 800e392:	4b08      	ldr	r3, [pc, #32]	; (800e3b4 <_Z24defaultNewArrayAllocatorv+0x58>)
 800e394:	4a08      	ldr	r2, [pc, #32]	; (800e3b8 <_Z24defaultNewArrayAllocatorv+0x5c>)
 800e396:	4909      	ldr	r1, [pc, #36]	; (800e3bc <_Z24defaultNewArrayAllocatorv+0x60>)
 800e398:	4809      	ldr	r0, [pc, #36]	; (800e3c0 <_Z24defaultNewArrayAllocatorv+0x64>)
 800e39a:	f000 f86d 	bl	800e478 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800e39e:	4804      	ldr	r0, [pc, #16]	; (800e3b0 <_Z24defaultNewArrayAllocatorv+0x54>)
 800e3a0:	f00f fbb2 	bl	801db08 <__cxa_guard_release>
 800e3a4:	4807      	ldr	r0, [pc, #28]	; (800e3c4 <_Z24defaultNewArrayAllocatorv+0x68>)
 800e3a6:	f00f fbd6 	bl	801db56 <atexit>
    return &allocator;
 800e3aa:	4b05      	ldr	r3, [pc, #20]	; (800e3c0 <_Z24defaultNewArrayAllocatorv+0x64>)
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	bd80      	pop	{r7, pc}
 800e3b0:	20000778 	.word	0x20000778
 800e3b4:	080225e0 	.word	0x080225e0
 800e3b8:	080225ec 	.word	0x080225ec
 800e3bc:	080225f4 	.word	0x080225f4
 800e3c0:	20000764 	.word	0x20000764
 800e3c4:	0800e34d 	.word	0x0800e34d

0800e3c8 <_Z25getCurrentMallocAllocatorv>:
{
    currentMallocAllocator = allocator;
}

TestMemoryAllocator* getCurrentMallocAllocator()
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	af00      	add	r7, sp, #0
    if (currentMallocAllocator == NULLPTR) setCurrentMallocAllocatorToDefault();
 800e3cc:	4b04      	ldr	r3, [pc, #16]	; (800e3e0 <_Z25getCurrentMallocAllocatorv+0x18>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d101      	bne.n	800e3d8 <_Z25getCurrentMallocAllocatorv+0x10>
 800e3d4:	f000 f806 	bl	800e3e4 <_Z34setCurrentMallocAllocatorToDefaultv>
    return currentMallocAllocator;
 800e3d8:	4b01      	ldr	r3, [pc, #4]	; (800e3e0 <_Z25getCurrentMallocAllocatorv+0x18>)
 800e3da:	681b      	ldr	r3, [r3, #0]
}
 800e3dc:	4618      	mov	r0, r3
 800e3de:	bd80      	pop	{r7, pc}
 800e3e0:	20000748 	.word	0x20000748

0800e3e4 <_Z34setCurrentMallocAllocatorToDefaultv>:

void setCurrentMallocAllocatorToDefault()
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	af00      	add	r7, sp, #0
    currentMallocAllocator = defaultMallocAllocator();
 800e3e8:	f000 f810 	bl	800e40c <_Z22defaultMallocAllocatorv>
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	4a02      	ldr	r2, [pc, #8]	; (800e3f8 <_Z34setCurrentMallocAllocatorToDefaultv+0x14>)
 800e3f0:	6013      	str	r3, [r2, #0]
}
 800e3f2:	bf00      	nop
 800e3f4:	bd80      	pop	{r7, pc}
 800e3f6:	bf00      	nop
 800e3f8:	20000748 	.word	0x20000748

0800e3fc <__tcf_2>:

TestMemoryAllocator* defaultMallocAllocator()
{
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	af00      	add	r7, sp, #0
 800e400:	4801      	ldr	r0, [pc, #4]	; (800e408 <__tcf_2+0xc>)
 800e402:	f000 f859 	bl	800e4b8 <_ZN19TestMemoryAllocatorD1Ev>
 800e406:	bd80      	pop	{r7, pc}
 800e408:	2000077c 	.word	0x2000077c

0800e40c <_Z22defaultMallocAllocatorv>:
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800e410:	4b13      	ldr	r3, [pc, #76]	; (800e460 <_Z22defaultMallocAllocatorv+0x54>)
 800e412:	781b      	ldrb	r3, [r3, #0]
 800e414:	f3bf 8f5b 	dmb	ish
 800e418:	b2db      	uxtb	r3, r3
 800e41a:	f003 0301 	and.w	r3, r3, #1
 800e41e:	2b00      	cmp	r3, #0
 800e420:	bf0c      	ite	eq
 800e422:	2301      	moveq	r3, #1
 800e424:	2300      	movne	r3, #0
 800e426:	b2db      	uxtb	r3, r3
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d016      	beq.n	800e45a <_Z22defaultMallocAllocatorv+0x4e>
 800e42c:	480c      	ldr	r0, [pc, #48]	; (800e460 <_Z22defaultMallocAllocatorv+0x54>)
 800e42e:	f00f fb5f 	bl	801daf0 <__cxa_guard_acquire>
 800e432:	4603      	mov	r3, r0
 800e434:	2b00      	cmp	r3, #0
 800e436:	bf14      	ite	ne
 800e438:	2301      	movne	r3, #1
 800e43a:	2300      	moveq	r3, #0
 800e43c:	b2db      	uxtb	r3, r3
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d00b      	beq.n	800e45a <_Z22defaultMallocAllocatorv+0x4e>
 800e442:	4b08      	ldr	r3, [pc, #32]	; (800e464 <_Z22defaultMallocAllocatorv+0x58>)
 800e444:	4a08      	ldr	r2, [pc, #32]	; (800e468 <_Z22defaultMallocAllocatorv+0x5c>)
 800e446:	4909      	ldr	r1, [pc, #36]	; (800e46c <_Z22defaultMallocAllocatorv+0x60>)
 800e448:	4809      	ldr	r0, [pc, #36]	; (800e470 <_Z22defaultMallocAllocatorv+0x64>)
 800e44a:	f000 f815 	bl	800e478 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800e44e:	4804      	ldr	r0, [pc, #16]	; (800e460 <_Z22defaultMallocAllocatorv+0x54>)
 800e450:	f00f fb5a 	bl	801db08 <__cxa_guard_release>
 800e454:	4807      	ldr	r0, [pc, #28]	; (800e474 <_Z22defaultMallocAllocatorv+0x68>)
 800e456:	f00f fb7e 	bl	801db56 <atexit>
    return &allocator;
 800e45a:	4b05      	ldr	r3, [pc, #20]	; (800e470 <_Z22defaultMallocAllocatorv+0x64>)
}
 800e45c:	4618      	mov	r0, r3
 800e45e:	bd80      	pop	{r7, pc}
 800e460:	20000790 	.word	0x20000790
 800e464:	08022610 	.word	0x08022610
 800e468:	08022618 	.word	0x08022618
 800e46c:	08022620 	.word	0x08022620
 800e470:	2000077c 	.word	0x2000077c
 800e474:	0800e3fd 	.word	0x0800e3fd

0800e478 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>:
    if (originalMallocAllocator) setCurrentMallocAllocator(originalMallocAllocator);
    if (originalNewAllocator) setCurrentNewAllocator(originalNewAllocator);
    if (originalNewArrayAllocator) setCurrentNewArrayAllocator(originalNewArrayAllocator);
}

TestMemoryAllocator::TestMemoryAllocator(const char* name_str, const char* alloc_name_str, const char* free_name_str)
 800e478:	b480      	push	{r7}
 800e47a:	b085      	sub	sp, #20
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	60f8      	str	r0, [r7, #12]
 800e480:	60b9      	str	r1, [r7, #8]
 800e482:	607a      	str	r2, [r7, #4]
 800e484:	603b      	str	r3, [r7, #0]
    : name_(name_str), alloc_name_(alloc_name_str), free_name_(free_name_str), hasBeenDestroyed_(false)
 800e486:	4a0b      	ldr	r2, [pc, #44]	; (800e4b4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_+0x3c>)
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	601a      	str	r2, [r3, #0]
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	68ba      	ldr	r2, [r7, #8]
 800e490:	605a      	str	r2, [r3, #4]
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	687a      	ldr	r2, [r7, #4]
 800e496:	609a      	str	r2, [r3, #8]
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	683a      	ldr	r2, [r7, #0]
 800e49c:	60da      	str	r2, [r3, #12]
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	741a      	strb	r2, [r3, #16]
{
}
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	3714      	adds	r7, #20
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b0:	4770      	bx	lr
 800e4b2:	bf00      	nop
 800e4b4:	08025ae0 	.word	0x08025ae0

0800e4b8 <_ZN19TestMemoryAllocatorD1Ev>:

TestMemoryAllocator::~TestMemoryAllocator()
 800e4b8:	b480      	push	{r7}
 800e4ba:	b083      	sub	sp, #12
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
 800e4c0:	4a06      	ldr	r2, [pc, #24]	; (800e4dc <_ZN19TestMemoryAllocatorD1Ev+0x24>)
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	601a      	str	r2, [r3, #0]
{
    hasBeenDestroyed_ = true;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2201      	movs	r2, #1
 800e4ca:	741a      	strb	r2, [r3, #16]
}
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	370c      	adds	r7, #12
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d8:	4770      	bx	lr
 800e4da:	bf00      	nop
 800e4dc:	08025ae0 	.word	0x08025ae0

0800e4e0 <_ZN19TestMemoryAllocatorD0Ev>:
TestMemoryAllocator::~TestMemoryAllocator()
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b082      	sub	sp, #8
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
}
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	f7ff ffe5 	bl	800e4b8 <_ZN19TestMemoryAllocatorD1Ev>
 800e4ee:	2114      	movs	r1, #20
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f7fa f88d 	bl	8008610 <_ZdlPvj>
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	3708      	adds	r7, #8
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}

0800e500 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>:

bool TestMemoryAllocator::hasBeenDestroyed()
{
 800e500:	b480      	push	{r7}
 800e502:	b083      	sub	sp, #12
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
    return hasBeenDestroyed_;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	7c1b      	ldrb	r3, [r3, #16]
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	370c      	adds	r7, #12
 800e510:	46bd      	mov	sp, r7
 800e512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e516:	4770      	bx	lr

0800e518 <_ZN19TestMemoryAllocator13isOfEqualTypeEPS_>:

bool TestMemoryAllocator::isOfEqualType(TestMemoryAllocator* allocator)
{
 800e518:	b590      	push	{r4, r7, lr}
 800e51a:	b083      	sub	sp, #12
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	6039      	str	r1, [r7, #0]
    return SimpleString::StrCmp(this->name(), allocator->name()) == 0;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	3310      	adds	r3, #16
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	6878      	ldr	r0, [r7, #4]
 800e52c:	4798      	blx	r3
 800e52e:	4604      	mov	r4, r0
 800e530:	683b      	ldr	r3, [r7, #0]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	3310      	adds	r3, #16
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	6838      	ldr	r0, [r7, #0]
 800e53a:	4798      	blx	r3
 800e53c:	4603      	mov	r3, r0
 800e53e:	4619      	mov	r1, r3
 800e540:	4620      	mov	r0, r4
 800e542:	f7fc fa51 	bl	800a9e8 <_ZN12SimpleString6StrCmpEPKcS1_>
 800e546:	4603      	mov	r3, r0
 800e548:	2b00      	cmp	r3, #0
 800e54a:	bf0c      	ite	eq
 800e54c:	2301      	moveq	r3, #1
 800e54e:	2300      	movne	r3, #0
 800e550:	b2db      	uxtb	r3, r3
}
 800e552:	4618      	mov	r0, r3
 800e554:	370c      	adds	r7, #12
 800e556:	46bd      	mov	sp, r7
 800e558:	bd90      	pop	{r4, r7, pc}
	...

0800e55c <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj>:

char* TestMemoryAllocator::allocMemoryLeakNode(size_t size)
{
 800e55c:	b590      	push	{r4, r7, lr}
 800e55e:	b083      	sub	sp, #12
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
 800e564:	6039      	str	r1, [r7, #0]
    return alloc_memory(size, "MemoryLeakNode", 1);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	3308      	adds	r3, #8
 800e56c:	681c      	ldr	r4, [r3, #0]
 800e56e:	2301      	movs	r3, #1
 800e570:	4a04      	ldr	r2, [pc, #16]	; (800e584 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj+0x28>)
 800e572:	6839      	ldr	r1, [r7, #0]
 800e574:	6878      	ldr	r0, [r7, #4]
 800e576:	47a0      	blx	r4
 800e578:	4603      	mov	r3, r0
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	370c      	adds	r7, #12
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd90      	pop	{r4, r7, pc}
 800e582:	bf00      	nop
 800e584:	0802263c 	.word	0x0802263c

0800e588 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc>:

void TestMemoryAllocator::freeMemoryLeakNode(char* memory)
{
 800e588:	b590      	push	{r4, r7, lr}
 800e58a:	b085      	sub	sp, #20
 800e58c:	af02      	add	r7, sp, #8
 800e58e:	6078      	str	r0, [r7, #4]
 800e590:	6039      	str	r1, [r7, #0]
    free_memory(memory, 0, "MemoryLeakNode", 1);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	330c      	adds	r3, #12
 800e598:	681c      	ldr	r4, [r3, #0]
 800e59a:	2301      	movs	r3, #1
 800e59c:	9300      	str	r3, [sp, #0]
 800e59e:	4b04      	ldr	r3, [pc, #16]	; (800e5b0 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc+0x28>)
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	6839      	ldr	r1, [r7, #0]
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	47a0      	blx	r4
}
 800e5a8:	bf00      	nop
 800e5aa:	370c      	adds	r7, #12
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	bd90      	pop	{r4, r7, pc}
 800e5b0:	0802263c 	.word	0x0802263c

0800e5b4 <_ZN19TestMemoryAllocator12alloc_memoryEjPKcj>:

char* TestMemoryAllocator::alloc_memory(size_t size, const char*, size_t)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b084      	sub	sp, #16
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	60f8      	str	r0, [r7, #12]
 800e5bc:	60b9      	str	r1, [r7, #8]
 800e5be:	607a      	str	r2, [r7, #4]
 800e5c0:	603b      	str	r3, [r7, #0]
    return checkedMalloc(size);
 800e5c2:	68b8      	ldr	r0, [r7, #8]
 800e5c4:	f7ff fe2a 	bl	800e21c <_ZL13checkedMallocj>
 800e5c8:	4603      	mov	r3, r0
}
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	3710      	adds	r7, #16
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}
	...

0800e5d4 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj>:

void TestMemoryAllocator::free_memory(char* memory, size_t, const char*, size_t)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b084      	sub	sp, #16
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	60f8      	str	r0, [r7, #12]
 800e5dc:	60b9      	str	r1, [r7, #8]
 800e5de:	607a      	str	r2, [r7, #4]
 800e5e0:	603b      	str	r3, [r7, #0]
    PlatformSpecificFree(memory);
 800e5e2:	4b04      	ldr	r3, [pc, #16]	; (800e5f4 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj+0x20>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	68b8      	ldr	r0, [r7, #8]
 800e5e8:	4798      	blx	r3
}
 800e5ea:	bf00      	nop
 800e5ec:	3710      	adds	r7, #16
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}
 800e5f2:	bf00      	nop
 800e5f4:	200000d0 	.word	0x200000d0

0800e5f8 <_ZNK19TestMemoryAllocator4nameEv>:

const char* TestMemoryAllocator::name() const
{
 800e5f8:	b480      	push	{r7}
 800e5fa:	b083      	sub	sp, #12
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
    return name_;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	685b      	ldr	r3, [r3, #4]
}
 800e604:	4618      	mov	r0, r3
 800e606:	370c      	adds	r7, #12
 800e608:	46bd      	mov	sp, r7
 800e60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60e:	4770      	bx	lr

0800e610 <_ZNK19TestMemoryAllocator10alloc_nameEv>:

const char* TestMemoryAllocator::alloc_name() const
{
 800e610:	b480      	push	{r7}
 800e612:	b083      	sub	sp, #12
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
    return alloc_name_;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	689b      	ldr	r3, [r3, #8]
}
 800e61c:	4618      	mov	r0, r3
 800e61e:	370c      	adds	r7, #12
 800e620:	46bd      	mov	sp, r7
 800e622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e626:	4770      	bx	lr

0800e628 <_ZNK19TestMemoryAllocator9free_nameEv>:

const char* TestMemoryAllocator::free_name() const
{
 800e628:	b480      	push	{r7}
 800e62a:	b083      	sub	sp, #12
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
    return free_name_;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	68db      	ldr	r3, [r3, #12]
}
 800e634:	4618      	mov	r0, r3
 800e636:	370c      	adds	r7, #12
 800e638:	46bd      	mov	sp, r7
 800e63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63e:	4770      	bx	lr

0800e640 <_ZN19TestMemoryAllocator15actualAllocatorEv>:

TestMemoryAllocator* TestMemoryAllocator::actualAllocator()
{
 800e640:	b480      	push	{r7}
 800e642:	b083      	sub	sp, #12
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
    return this;
 800e648:	687b      	ldr	r3, [r7, #4]
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	370c      	adds	r7, #12
 800e64e:	46bd      	mov	sp, r7
 800e650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e654:	4770      	bx	lr
	...

0800e658 <_ZN20NullUnknownAllocatorD1Ev>:

    return TestMemoryAllocator::alloc_memory(size, file, line);
}


NullUnknownAllocator::~NullUnknownAllocator()
 800e658:	b580      	push	{r7, lr}
 800e65a:	b082      	sub	sp, #8
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
 800e660:	4a05      	ldr	r2, [pc, #20]	; (800e678 <_ZN20NullUnknownAllocatorD1Ev+0x20>)
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	601a      	str	r2, [r3, #0]
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	4618      	mov	r0, r3
 800e66a:	f7ff ff25 	bl	800e4b8 <_ZN19TestMemoryAllocatorD1Ev>
{
}
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	4618      	mov	r0, r3
 800e672:	3708      	adds	r7, #8
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}
 800e678:	08025aac 	.word	0x08025aac

0800e67c <_ZN20NullUnknownAllocatorD0Ev>:
NullUnknownAllocator::~NullUnknownAllocator()
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b082      	sub	sp, #8
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
}
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f7ff ffe7 	bl	800e658 <_ZN20NullUnknownAllocatorD1Ev>
 800e68a:	2114      	movs	r1, #20
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f7f9 ffbf 	bl	8008610 <_ZdlPvj>
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	4618      	mov	r0, r3
 800e696:	3708      	adds	r7, #8
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd80      	pop	{r7, pc}

0800e69c <_ZN20NullUnknownAllocator12alloc_memoryEjPKcj>:

char* NullUnknownAllocator::alloc_memory(size_t /*size*/, const char*, size_t)
{
 800e69c:	b480      	push	{r7}
 800e69e:	b085      	sub	sp, #20
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	60f8      	str	r0, [r7, #12]
 800e6a4:	60b9      	str	r1, [r7, #8]
 800e6a6:	607a      	str	r2, [r7, #4]
 800e6a8:	603b      	str	r3, [r7, #0]
    return NULLPTR;
 800e6aa:	2300      	movs	r3, #0
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3714      	adds	r7, #20
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b6:	4770      	bx	lr

0800e6b8 <_ZN20NullUnknownAllocator11free_memoryEPcjPKcj>:

void NullUnknownAllocator::free_memory(char* /*memory*/, size_t, const char*, size_t)
{
 800e6b8:	b480      	push	{r7}
 800e6ba:	b085      	sub	sp, #20
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	60f8      	str	r0, [r7, #12]
 800e6c0:	60b9      	str	r1, [r7, #8]
 800e6c2:	607a      	str	r2, [r7, #4]
 800e6c4:	603b      	str	r3, [r7, #0]
}
 800e6c6:	bf00      	nop
 800e6c8:	3714      	adds	r7, #20
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d0:	4770      	bx	lr
	...

0800e6d4 <_ZN20NullUnknownAllocatorC1Ev>:

NullUnknownAllocator::NullUnknownAllocator()
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b082      	sub	sp, #8
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
    : TestMemoryAllocator("Null Allocator", "unknown", "unknown")
 800e6dc:	6878      	ldr	r0, [r7, #4]
 800e6de:	4b06      	ldr	r3, [pc, #24]	; (800e6f8 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800e6e0:	4a05      	ldr	r2, [pc, #20]	; (800e6f8 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800e6e2:	4906      	ldr	r1, [pc, #24]	; (800e6fc <_ZN20NullUnknownAllocatorC1Ev+0x28>)
 800e6e4:	f7ff fec8 	bl	800e478 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800e6e8:	4a05      	ldr	r2, [pc, #20]	; (800e700 <_ZN20NullUnknownAllocatorC1Ev+0x2c>)
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	601a      	str	r2, [r3, #0]
{
}
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	3708      	adds	r7, #8
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}
 800e6f8:	08022670 	.word	0x08022670
 800e6fc:	08022678 	.word	0x08022678
 800e700:	08025aac 	.word	0x08025aac

0800e704 <__tcf_3>:


TestMemoryAllocator* NullUnknownAllocator::defaultAllocator()
{
    static NullUnknownAllocator allocator;
 800e704:	b580      	push	{r7, lr}
 800e706:	af00      	add	r7, sp, #0
 800e708:	4801      	ldr	r0, [pc, #4]	; (800e710 <__tcf_3+0xc>)
 800e70a:	f7ff ffa5 	bl	800e658 <_ZN20NullUnknownAllocatorD1Ev>
 800e70e:	bd80      	pop	{r7, pc}
 800e710:	20000794 	.word	0x20000794

0800e714 <_ZN20NullUnknownAllocator16defaultAllocatorEv>:
{
 800e714:	b580      	push	{r7, lr}
 800e716:	af00      	add	r7, sp, #0
    static NullUnknownAllocator allocator;
 800e718:	4b12      	ldr	r3, [pc, #72]	; (800e764 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800e71a:	781b      	ldrb	r3, [r3, #0]
 800e71c:	f3bf 8f5b 	dmb	ish
 800e720:	b2db      	uxtb	r3, r3
 800e722:	f003 0301 	and.w	r3, r3, #1
 800e726:	2b00      	cmp	r3, #0
 800e728:	bf0c      	ite	eq
 800e72a:	2301      	moveq	r3, #1
 800e72c:	2300      	movne	r3, #0
 800e72e:	b2db      	uxtb	r3, r3
 800e730:	2b00      	cmp	r3, #0
 800e732:	d013      	beq.n	800e75c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800e734:	480b      	ldr	r0, [pc, #44]	; (800e764 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800e736:	f00f f9db 	bl	801daf0 <__cxa_guard_acquire>
 800e73a:	4603      	mov	r3, r0
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	bf14      	ite	ne
 800e740:	2301      	movne	r3, #1
 800e742:	2300      	moveq	r3, #0
 800e744:	b2db      	uxtb	r3, r3
 800e746:	2b00      	cmp	r3, #0
 800e748:	d008      	beq.n	800e75c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800e74a:	4807      	ldr	r0, [pc, #28]	; (800e768 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
 800e74c:	f7ff ffc2 	bl	800e6d4 <_ZN20NullUnknownAllocatorC1Ev>
 800e750:	4804      	ldr	r0, [pc, #16]	; (800e764 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800e752:	f00f f9d9 	bl	801db08 <__cxa_guard_release>
 800e756:	4805      	ldr	r0, [pc, #20]	; (800e76c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x58>)
 800e758:	f00f f9fd 	bl	801db56 <atexit>
    return &allocator;
 800e75c:	4b02      	ldr	r3, [pc, #8]	; (800e768 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
}
 800e75e:	4618      	mov	r0, r3
 800e760:	bd80      	pop	{r7, pc}
 800e762:	bf00      	nop
 800e764:	200007a8 	.word	0x200007a8
 800e768:	20000794 	.word	0x20000794
 800e76c:	0800e705 	.word	0x0800e705

0800e770 <_ZNK10TestResult12getTestCountEv>:
    size_t getTestCount() const
 800e770:	b480      	push	{r7}
 800e772:	b083      	sub	sp, #12
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
        return testCount_;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	689b      	ldr	r3, [r3, #8]
    }
 800e77c:	4618      	mov	r0, r3
 800e77e:	370c      	adds	r7, #12
 800e780:	46bd      	mov	sp, r7
 800e782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e786:	4770      	bx	lr

0800e788 <_ZNK10TestResult19getFilteredOutCountEv>:
    size_t getFilteredOutCount() const
 800e788:	b480      	push	{r7}
 800e78a:	b083      	sub	sp, #12
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
        return filteredOutCount_;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	699b      	ldr	r3, [r3, #24]
    }
 800e794:	4618      	mov	r0, r3
 800e796:	370c      	adds	r7, #12
 800e798:	46bd      	mov	sp, r7
 800e79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79e:	4770      	bx	lr

0800e7a0 <_ZN10TestOutput21getWorkingEnvironmentEv>:
{
    workingEnvironment_ = workEnvironment;
}

TestOutput::WorkingEnvironment TestOutput::getWorkingEnvironment()
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	af00      	add	r7, sp, #0
    if (workingEnvironment_ == TestOutput::detectEnvironment)
 800e7a4:	4b05      	ldr	r3, [pc, #20]	; (800e7bc <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800e7a6:	781b      	ldrb	r3, [r3, #0]
 800e7a8:	2b02      	cmp	r3, #2
 800e7aa:	d103      	bne.n	800e7b4 <_ZN10TestOutput21getWorkingEnvironmentEv+0x14>
        return PlatformSpecificGetWorkingEnvironment();
 800e7ac:	f004 fa4a 	bl	8012c44 <_Z37PlatformSpecificGetWorkingEnvironmentv>
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	e001      	b.n	800e7b8 <_ZN10TestOutput21getWorkingEnvironmentEv+0x18>
    return workingEnvironment_;
 800e7b4:	4b01      	ldr	r3, [pc, #4]	; (800e7bc <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800e7b6:	781b      	ldrb	r3, [r3, #0]
}
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	bd80      	pop	{r7, pc}
 800e7bc:	20000088 	.word	0x20000088

0800e7c0 <_ZN10TestOutputC1Ev>:


TestOutput::TestOutput() :
 800e7c0:	b480      	push	{r7}
 800e7c2:	b083      	sub	sp, #12
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
    dotCount_(0), verbose_(level_quiet), color_(false), progressIndication_(".")
 800e7c8:	4a0a      	ldr	r2, [pc, #40]	; (800e7f4 <_ZN10TestOutputC1Ev+0x34>)
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	601a      	str	r2, [r3, #0]
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	605a      	str	r2, [r3, #4]
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	721a      	strb	r2, [r3, #8]
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	2200      	movs	r2, #0
 800e7de:	725a      	strb	r2, [r3, #9]
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	4a05      	ldr	r2, [pc, #20]	; (800e7f8 <_ZN10TestOutputC1Ev+0x38>)
 800e7e4:	60da      	str	r2, [r3, #12]
{
}
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	370c      	adds	r7, #12
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f2:	4770      	bx	lr
 800e7f4:	08025be4 	.word	0x08025be4
 800e7f8:	08022a78 	.word	0x08022a78

0800e7fc <_ZN10TestOutputD1Ev>:

TestOutput::~TestOutput()
 800e7fc:	b480      	push	{r7}
 800e7fe:	b083      	sub	sp, #12
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
 800e804:	4a04      	ldr	r2, [pc, #16]	; (800e818 <_ZN10TestOutputD1Ev+0x1c>)
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	601a      	str	r2, [r3, #0]
{
}
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	4618      	mov	r0, r3
 800e80e:	370c      	adds	r7, #12
 800e810:	46bd      	mov	sp, r7
 800e812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e816:	4770      	bx	lr
 800e818:	08025be4 	.word	0x08025be4

0800e81c <_ZN10TestOutput7verboseENS_14VerbosityLevelE>:

void TestOutput::verbose(VerbosityLevel level)
{
 800e81c:	b480      	push	{r7}
 800e81e:	b083      	sub	sp, #12
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
 800e824:	460b      	mov	r3, r1
 800e826:	70fb      	strb	r3, [r7, #3]
    verbose_ = level;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	78fa      	ldrb	r2, [r7, #3]
 800e82c:	721a      	strb	r2, [r3, #8]
}
 800e82e:	bf00      	nop
 800e830:	370c      	adds	r7, #12
 800e832:	46bd      	mov	sp, r7
 800e834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e838:	4770      	bx	lr

0800e83a <_ZN10TestOutput5colorEv>:

void TestOutput::color()
{
 800e83a:	b480      	push	{r7}
 800e83c:	b083      	sub	sp, #12
 800e83e:	af00      	add	r7, sp, #0
 800e840:	6078      	str	r0, [r7, #4]
    color_ = true;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2201      	movs	r2, #1
 800e846:	725a      	strb	r2, [r3, #9]
}
 800e848:	bf00      	nop
 800e84a:	370c      	adds	r7, #12
 800e84c:	46bd      	mov	sp, r7
 800e84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e852:	4770      	bx	lr

0800e854 <_ZN10TestOutput5printEPKc>:

void TestOutput::print(const char* str)
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b082      	sub	sp, #8
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
 800e85c:	6039      	str	r1, [r7, #0]
    printBuffer(str);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	3328      	adds	r3, #40	; 0x28
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	6839      	ldr	r1, [r7, #0]
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	4798      	blx	r3
}
 800e86c:	bf00      	nop
 800e86e:	3708      	adds	r7, #8
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}

0800e874 <_ZN10TestOutput5printEl>:

void TestOutput::print(long n)
{
 800e874:	b590      	push	{r4, r7, lr}
 800e876:	b085      	sub	sp, #20
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
 800e87c:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	332c      	adds	r3, #44	; 0x2c
 800e884:	681c      	ldr	r4, [r3, #0]
 800e886:	f107 0308 	add.w	r3, r7, #8
 800e88a:	6839      	ldr	r1, [r7, #0]
 800e88c:	4618      	mov	r0, r3
 800e88e:	f7fd f8ff 	bl	800ba90 <_Z10StringFroml>
 800e892:	f107 0308 	add.w	r3, r7, #8
 800e896:	4618      	mov	r0, r3
 800e898:	f7fc fdf4 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 800e89c:	4603      	mov	r3, r0
 800e89e:	4619      	mov	r1, r3
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	47a0      	blx	r4
 800e8a4:	f107 0308 	add.w	r3, r7, #8
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f7fc fe18 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 800e8ae:	bf00      	nop
 800e8b0:	3714      	adds	r7, #20
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd90      	pop	{r4, r7, pc}

0800e8b6 <_ZN10TestOutput5printEj>:

void TestOutput::print(size_t n)
{
 800e8b6:	b590      	push	{r4, r7, lr}
 800e8b8:	b085      	sub	sp, #20
 800e8ba:	af00      	add	r7, sp, #0
 800e8bc:	6078      	str	r0, [r7, #4]
 800e8be:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	332c      	adds	r3, #44	; 0x2c
 800e8c6:	681c      	ldr	r4, [r3, #0]
 800e8c8:	f107 0308 	add.w	r3, r7, #8
 800e8cc:	6839      	ldr	r1, [r7, #0]
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f7fd fb34 	bl	800bf3c <_Z10StringFromj>
 800e8d4:	f107 0308 	add.w	r3, r7, #8
 800e8d8:	4618      	mov	r0, r3
 800e8da:	f7fc fdd3 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	4619      	mov	r1, r3
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	47a0      	blx	r4
 800e8e6:	f107 0308 	add.w	r3, r7, #8
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7fc fdf7 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 800e8f0:	bf00      	nop
 800e8f2:	3714      	adds	r7, #20
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd90      	pop	{r4, r7, pc}

0800e8f8 <_ZN10TestOutput11printDoubleEd>:

void TestOutput::printDouble(double d)
{
 800e8f8:	b590      	push	{r4, r7, lr}
 800e8fa:	b087      	sub	sp, #28
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	60f8      	str	r0, [r7, #12]
 800e900:	ed87 0b00 	vstr	d0, [r7]
    print(StringFrom(d).asCharString());
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	332c      	adds	r3, #44	; 0x2c
 800e90a:	681c      	ldr	r4, [r3, #0]
 800e90c:	f107 0310 	add.w	r3, r7, #16
 800e910:	2106      	movs	r1, #6
 800e912:	ed97 0b00 	vldr	d0, [r7]
 800e916:	4618      	mov	r0, r3
 800e918:	f7fd faa6 	bl	800be68 <_Z10StringFromdi>
 800e91c:	f107 0310 	add.w	r3, r7, #16
 800e920:	4618      	mov	r0, r3
 800e922:	f7fc fdaf 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 800e926:	4603      	mov	r3, r0
 800e928:	4619      	mov	r1, r3
 800e92a:	68f8      	ldr	r0, [r7, #12]
 800e92c:	47a0      	blx	r4
 800e92e:	f107 0310 	add.w	r3, r7, #16
 800e932:	4618      	mov	r0, r3
 800e934:	f7fc fdd3 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 800e938:	bf00      	nop
 800e93a:	371c      	adds	r7, #28
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd90      	pop	{r4, r7, pc}

0800e940 <_ZlsR10TestOutputPKc>:

TestOutput& operator<<(TestOutput& p, const char* s)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b082      	sub	sp, #8
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
 800e948:	6039      	str	r1, [r7, #0]
    p.print(s);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	332c      	adds	r3, #44	; 0x2c
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	6839      	ldr	r1, [r7, #0]
 800e954:	6878      	ldr	r0, [r7, #4]
 800e956:	4798      	blx	r3
    return p;
 800e958:	687b      	ldr	r3, [r7, #4]
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	3708      	adds	r7, #8
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}
	...

0800e964 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell>:
    p.print(i);
    return p;
}

void TestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800e964:	b590      	push	{r4, r7, lr}
 800e966:	b085      	sub	sp, #20
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
 800e96c:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) print(test.getFormattedName().asCharString());
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	7a1b      	ldrb	r3, [r3, #8]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d01a      	beq.n	800e9ac <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x48>
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	332c      	adds	r3, #44	; 0x2c
 800e97c:	681c      	ldr	r4, [r3, #0]
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	3314      	adds	r3, #20
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	f107 0208 	add.w	r2, r7, #8
 800e98a:	6839      	ldr	r1, [r7, #0]
 800e98c:	4610      	mov	r0, r2
 800e98e:	4798      	blx	r3
 800e990:	f107 0308 	add.w	r3, r7, #8
 800e994:	4618      	mov	r0, r3
 800e996:	f7fc fd75 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 800e99a:	4603      	mov	r3, r0
 800e99c:	4619      	mov	r1, r3
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	47a0      	blx	r4
 800e9a2:	f107 0308 	add.w	r3, r7, #8
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f7fc fd99 	bl	800b4de <_ZN12SimpleStringD1Ev>

    if (test.willRun()) {
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	3318      	adds	r3, #24
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	6838      	ldr	r0, [r7, #0]
 800e9b6:	4798      	blx	r3
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d007      	beq.n	800e9ce <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x6a>
       setProgressIndicator(".");
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	3344      	adds	r3, #68	; 0x44
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	4907      	ldr	r1, [pc, #28]	; (800e9e4 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x80>)
 800e9c8:	6878      	ldr	r0, [r7, #4]
 800e9ca:	4798      	blx	r3
    }
    else {
       setProgressIndicator("!");
    }
}
 800e9cc:	e006      	b.n	800e9dc <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x78>
       setProgressIndicator("!");
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	3344      	adds	r3, #68	; 0x44
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	4904      	ldr	r1, [pc, #16]	; (800e9e8 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x84>)
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	4798      	blx	r3
}
 800e9dc:	bf00      	nop
 800e9de:	3714      	adds	r7, #20
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bd90      	pop	{r4, r7, pc}
 800e9e4:	08022a78 	.word	0x08022a78
 800e9e8:	08022a7c 	.word	0x08022a7c

0800e9ec <_ZN10TestOutput21printCurrentTestEndedERK10TestResult>:

void TestOutput::printCurrentTestEnded(const TestResult& res)
{
 800e9ec:	b590      	push	{r4, r7, lr}
 800e9ee:	b083      	sub	sp, #12
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
 800e9f4:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) {
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	7a1b      	ldrb	r3, [r3, #8]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d019      	beq.n	800ea32 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x46>
        print(" - ");
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	332c      	adds	r3, #44	; 0x2c
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	4910      	ldr	r1, [pc, #64]	; (800ea48 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x5c>)
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	4798      	blx	r3
        print(res.getCurrentTestTotalExecutionTime());
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	3334      	adds	r3, #52	; 0x34
 800ea12:	681c      	ldr	r4, [r3, #0]
 800ea14:	6838      	ldr	r0, [r7, #0]
 800ea16:	f002 f845 	bl	8010aa4 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	4619      	mov	r1, r3
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	47a0      	blx	r4
        print(" ms\n");
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	332c      	adds	r3, #44	; 0x2c
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	4908      	ldr	r1, [pc, #32]	; (800ea4c <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x60>)
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	4798      	blx	r3
    }
    else {
        printProgressIndicator();
    }
}
 800ea30:	e005      	b.n	800ea3e <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x52>
        printProgressIndicator();
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	3358      	adds	r3, #88	; 0x58
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	6878      	ldr	r0, [r7, #4]
 800ea3c:	4798      	blx	r3
}
 800ea3e:	bf00      	nop
 800ea40:	370c      	adds	r7, #12
 800ea42:	46bd      	mov	sp, r7
 800ea44:	bd90      	pop	{r4, r7, pc}
 800ea46:	bf00      	nop
 800ea48:	08022a80 	.word	0x08022a80
 800ea4c:	08022a84 	.word	0x08022a84

0800ea50 <_ZN10TestOutput22printProgressIndicatorEv>:

void TestOutput::printProgressIndicator()
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b082      	sub	sp, #8
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
    print(progressIndication_);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	332c      	adds	r3, #44	; 0x2c
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	687a      	ldr	r2, [r7, #4]
 800ea62:	68d2      	ldr	r2, [r2, #12]
 800ea64:	4611      	mov	r1, r2
 800ea66:	6878      	ldr	r0, [r7, #4]
 800ea68:	4798      	blx	r3
    if (++dotCount_ % 50 == 0) print("\n");
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	685b      	ldr	r3, [r3, #4]
 800ea6e:	1c5a      	adds	r2, r3, #1
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	605a      	str	r2, [r3, #4]
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	685a      	ldr	r2, [r3, #4]
 800ea78:	4b0d      	ldr	r3, [pc, #52]	; (800eab0 <_ZN10TestOutput22printProgressIndicatorEv+0x60>)
 800ea7a:	fb83 1302 	smull	r1, r3, r3, r2
 800ea7e:	1119      	asrs	r1, r3, #4
 800ea80:	17d3      	asrs	r3, r2, #31
 800ea82:	1acb      	subs	r3, r1, r3
 800ea84:	2132      	movs	r1, #50	; 0x32
 800ea86:	fb01 f303 	mul.w	r3, r1, r3
 800ea8a:	1ad3      	subs	r3, r2, r3
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	bf0c      	ite	eq
 800ea90:	2301      	moveq	r3, #1
 800ea92:	2300      	movne	r3, #0
 800ea94:	b2db      	uxtb	r3, r3
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d006      	beq.n	800eaa8 <_ZN10TestOutput22printProgressIndicatorEv+0x58>
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	332c      	adds	r3, #44	; 0x2c
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	4904      	ldr	r1, [pc, #16]	; (800eab4 <_ZN10TestOutput22printProgressIndicatorEv+0x64>)
 800eaa4:	6878      	ldr	r0, [r7, #4]
 800eaa6:	4798      	blx	r3
}
 800eaa8:	bf00      	nop
 800eaaa:	3708      	adds	r7, #8
 800eaac:	46bd      	mov	sp, r7
 800eaae:	bd80      	pop	{r7, pc}
 800eab0:	51eb851f 	.word	0x51eb851f
 800eab4:	08022a8c 	.word	0x08022a8c

0800eab8 <_ZN10TestOutput20setProgressIndicatorEPKc>:

void TestOutput::setProgressIndicator(const char* indicator)
{
 800eab8:	b480      	push	{r7}
 800eaba:	b083      	sub	sp, #12
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
 800eac0:	6039      	str	r1, [r7, #0]
    progressIndication_ = indicator;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	683a      	ldr	r2, [r7, #0]
 800eac6:	60da      	str	r2, [r3, #12]
}
 800eac8:	bf00      	nop
 800eaca:	370c      	adds	r7, #12
 800eacc:	46bd      	mov	sp, r7
 800eace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead2:	4770      	bx	lr

0800ead4 <_ZN10TestOutput17printTestsStartedEv>:

void TestOutput::printTestsStarted()
{
 800ead4:	b480      	push	{r7}
 800ead6:	b083      	sub	sp, #12
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
}
 800eadc:	bf00      	nop
 800eade:	370c      	adds	r7, #12
 800eae0:	46bd      	mov	sp, r7
 800eae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae6:	4770      	bx	lr

0800eae8 <_ZN10TestOutput24printCurrentGroupStartedERK10UtestShell>:

void TestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 800eae8:	b480      	push	{r7}
 800eaea:	b083      	sub	sp, #12
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
 800eaf0:	6039      	str	r1, [r7, #0]
}
 800eaf2:	bf00      	nop
 800eaf4:	370c      	adds	r7, #12
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafc:	4770      	bx	lr

0800eafe <_ZN10TestOutput22printCurrentGroupEndedERK10TestResult>:

void TestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800eafe:	b480      	push	{r7}
 800eb00:	b083      	sub	sp, #12
 800eb02:	af00      	add	r7, sp, #0
 800eb04:	6078      	str	r0, [r7, #4]
 800eb06:	6039      	str	r1, [r7, #0]
}
 800eb08:	bf00      	nop
 800eb0a:	370c      	adds	r7, #12
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb12:	4770      	bx	lr

0800eb14 <_ZN10TestOutput15printTestsEndedERK10TestResult>:

void TestOutput::printTestsEnded(const TestResult& result)
{
 800eb14:	b590      	push	{r4, r7, lr}
 800eb16:	b085      	sub	sp, #20
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
 800eb1c:	6039      	str	r1, [r7, #0]
    print("\n");
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	332c      	adds	r3, #44	; 0x2c
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	496f      	ldr	r1, [pc, #444]	; (800ece4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d0>)
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	4798      	blx	r3
    const bool isFailure = result.isFailure();
 800eb2c:	6838      	ldr	r0, [r7, #0]
 800eb2e:	f7f8 f83d 	bl	8006bac <_ZNK10TestResult9isFailureEv>
 800eb32:	4603      	mov	r3, r0
 800eb34:	73fb      	strb	r3, [r7, #15]
    const size_t failureCount = result.getFailureCount();
 800eb36:	6838      	ldr	r0, [r7, #0]
 800eb38:	f7f8 f82c 	bl	8006b94 <_ZNK10TestResult15getFailureCountEv>
 800eb3c:	60b8      	str	r0, [r7, #8]
    if (isFailure) {
 800eb3e:	7bfb      	ldrb	r3, [r7, #15]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d02b      	beq.n	800eb9c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x88>
        if (color_) {
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	7a5b      	ldrb	r3, [r3, #9]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d006      	beq.n	800eb5a <_ZN10TestOutput15printTestsEndedERK10TestResult+0x46>
            print("\033[31;1m");
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	332c      	adds	r3, #44	; 0x2c
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	4964      	ldr	r1, [pc, #400]	; (800ece8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d4>)
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	4798      	blx	r3
        }
        print("Errors (");
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	332c      	adds	r3, #44	; 0x2c
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	4962      	ldr	r1, [pc, #392]	; (800ecec <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d8>)
 800eb64:	6878      	ldr	r0, [r7, #4]
 800eb66:	4798      	blx	r3
        if (failureCount > 0) {
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d00e      	beq.n	800eb8c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x78>
            print(failureCount);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	3334      	adds	r3, #52	; 0x34
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	68b9      	ldr	r1, [r7, #8]
 800eb78:	6878      	ldr	r0, [r7, #4]
 800eb7a:	4798      	blx	r3
            print(" failures, ");
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	332c      	adds	r3, #44	; 0x2c
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	495a      	ldr	r1, [pc, #360]	; (800ecf0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1dc>)
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	4798      	blx	r3
 800eb8a:	e019      	b.n	800ebc0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
        else {
            print("ran nothing, ");
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	332c      	adds	r3, #44	; 0x2c
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	4957      	ldr	r1, [pc, #348]	; (800ecf4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e0>)
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	4798      	blx	r3
 800eb9a:	e011      	b.n	800ebc0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
    }
    else {
        if (color_) {
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	7a5b      	ldrb	r3, [r3, #9]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d006      	beq.n	800ebb2 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x9e>
            print("\033[32;1m");
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	332c      	adds	r3, #44	; 0x2c
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	4952      	ldr	r1, [pc, #328]	; (800ecf8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e4>)
 800ebae:	6878      	ldr	r0, [r7, #4]
 800ebb0:	4798      	blx	r3
        }
        print("OK (");
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	332c      	adds	r3, #44	; 0x2c
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	4950      	ldr	r1, [pc, #320]	; (800ecfc <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e8>)
 800ebbc:	6878      	ldr	r0, [r7, #4]
 800ebbe:	4798      	blx	r3
    }
    print(result.getTestCount());
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	3334      	adds	r3, #52	; 0x34
 800ebc6:	681c      	ldr	r4, [r3, #0]
 800ebc8:	6838      	ldr	r0, [r7, #0]
 800ebca:	f7ff fdd1 	bl	800e770 <_ZNK10TestResult12getTestCountEv>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	4619      	mov	r1, r3
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	47a0      	blx	r4
    print(" tests, ");
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	332c      	adds	r3, #44	; 0x2c
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	4948      	ldr	r1, [pc, #288]	; (800ed00 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1ec>)
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	4798      	blx	r3
    print(result.getRunCount());
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	3334      	adds	r3, #52	; 0x34
 800ebea:	681c      	ldr	r4, [r3, #0]
 800ebec:	6838      	ldr	r0, [r7, #0]
 800ebee:	f7f7 ffb9 	bl	8006b64 <_ZNK10TestResult11getRunCountEv>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	4619      	mov	r1, r3
 800ebf6:	6878      	ldr	r0, [r7, #4]
 800ebf8:	47a0      	blx	r4
    print(" ran, ");
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	332c      	adds	r3, #44	; 0x2c
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	4940      	ldr	r1, [pc, #256]	; (800ed04 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f0>)
 800ec04:	6878      	ldr	r0, [r7, #4]
 800ec06:	4798      	blx	r3
    print(result.getCheckCount());
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	3334      	adds	r3, #52	; 0x34
 800ec0e:	681c      	ldr	r4, [r3, #0]
 800ec10:	6838      	ldr	r0, [r7, #0]
 800ec12:	f7f8 fc13 	bl	800743c <_ZNK10TestResult13getCheckCountEv>
 800ec16:	4603      	mov	r3, r0
 800ec18:	4619      	mov	r1, r3
 800ec1a:	6878      	ldr	r0, [r7, #4]
 800ec1c:	47a0      	blx	r4
    print(" checks, ");
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	332c      	adds	r3, #44	; 0x2c
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	4938      	ldr	r1, [pc, #224]	; (800ed08 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f4>)
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	4798      	blx	r3
    print(result.getIgnoredCount());
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	3334      	adds	r3, #52	; 0x34
 800ec32:	681c      	ldr	r4, [r3, #0]
 800ec34:	6838      	ldr	r0, [r7, #0]
 800ec36:	f7f7 ffa1 	bl	8006b7c <_ZNK10TestResult15getIgnoredCountEv>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	4619      	mov	r1, r3
 800ec3e:	6878      	ldr	r0, [r7, #4]
 800ec40:	47a0      	blx	r4
    print(" ignored, ");
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	332c      	adds	r3, #44	; 0x2c
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	4930      	ldr	r1, [pc, #192]	; (800ed0c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f8>)
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	4798      	blx	r3
    print(result.getFilteredOutCount());
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	3334      	adds	r3, #52	; 0x34
 800ec56:	681c      	ldr	r4, [r3, #0]
 800ec58:	6838      	ldr	r0, [r7, #0]
 800ec5a:	f7ff fd95 	bl	800e788 <_ZNK10TestResult19getFilteredOutCountEv>
 800ec5e:	4603      	mov	r3, r0
 800ec60:	4619      	mov	r1, r3
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	47a0      	blx	r4
    print(" filtered out, ");
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	332c      	adds	r3, #44	; 0x2c
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	4928      	ldr	r1, [pc, #160]	; (800ed10 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1fc>)
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	4798      	blx	r3
    print(result.getTotalExecutionTime());
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	3334      	adds	r3, #52	; 0x34
 800ec7a:	681c      	ldr	r4, [r3, #0]
 800ec7c:	6838      	ldr	r0, [r7, #0]
 800ec7e:	f001 ff05 	bl	8010a8c <_ZNK10TestResult21getTotalExecutionTimeEv>
 800ec82:	4603      	mov	r3, r0
 800ec84:	4619      	mov	r1, r3
 800ec86:	6878      	ldr	r0, [r7, #4]
 800ec88:	47a0      	blx	r4
    print(" ms)");
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	332c      	adds	r3, #44	; 0x2c
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	4920      	ldr	r1, [pc, #128]	; (800ed14 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x200>)
 800ec94:	6878      	ldr	r0, [r7, #4]
 800ec96:	4798      	blx	r3
    if (color_) {
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	7a5b      	ldrb	r3, [r3, #9]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d006      	beq.n	800ecae <_ZN10TestOutput15printTestsEndedERK10TestResult+0x19a>
        print("\033[m");
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	332c      	adds	r3, #44	; 0x2c
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	491b      	ldr	r1, [pc, #108]	; (800ed18 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x204>)
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	4798      	blx	r3
    }
    if (isFailure && failureCount == 0) {
 800ecae:	7bfb      	ldrb	r3, [r7, #15]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d009      	beq.n	800ecc8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d106      	bne.n	800ecc8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
              "This often happens because of linking errors or typos in test filter.");
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	332c      	adds	r3, #44	; 0x2c
 800ecc0:	681b      	ldr	r3, [r3, #0]
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
 800ecc2:	4916      	ldr	r1, [pc, #88]	; (800ed1c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x208>)
 800ecc4:	6878      	ldr	r0, [r7, #4]
 800ecc6:	4798      	blx	r3
    }
    print("\n\n");
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	332c      	adds	r3, #44	; 0x2c
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	4913      	ldr	r1, [pc, #76]	; (800ed20 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x20c>)
 800ecd2:	6878      	ldr	r0, [r7, #4]
 800ecd4:	4798      	blx	r3

    dotCount_ = 0;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2200      	movs	r2, #0
 800ecda:	605a      	str	r2, [r3, #4]
}
 800ecdc:	bf00      	nop
 800ecde:	3714      	adds	r7, #20
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd90      	pop	{r4, r7, pc}
 800ece4:	08022a8c 	.word	0x08022a8c
 800ece8:	08022a90 	.word	0x08022a90
 800ecec:	08022a98 	.word	0x08022a98
 800ecf0:	08022aa4 	.word	0x08022aa4
 800ecf4:	08022ab0 	.word	0x08022ab0
 800ecf8:	08022ac0 	.word	0x08022ac0
 800ecfc:	08022ac8 	.word	0x08022ac8
 800ed00:	08022ad0 	.word	0x08022ad0
 800ed04:	08022adc 	.word	0x08022adc
 800ed08:	08022ae4 	.word	0x08022ae4
 800ed0c:	08022af0 	.word	0x08022af0
 800ed10:	08022afc 	.word	0x08022afc
 800ed14:	08022b0c 	.word	0x08022b0c
 800ed18:	08022b14 	.word	0x08022b14
 800ed1c:	08022b18 	.word	0x08022b18
 800ed20:	08022bbc 	.word	0x08022bbc

0800ed24 <_ZN10TestOutput12printTestRunEjj>:

void TestOutput::printTestRun(size_t number, size_t total)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b084      	sub	sp, #16
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	60f8      	str	r0, [r7, #12]
 800ed2c:	60b9      	str	r1, [r7, #8]
 800ed2e:	607a      	str	r2, [r7, #4]
    if (total > 1) {
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2b01      	cmp	r3, #1
 800ed34:	d922      	bls.n	800ed7c <_ZN10TestOutput12printTestRunEjj+0x58>
        print("Test run ");
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	332c      	adds	r3, #44	; 0x2c
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	4911      	ldr	r1, [pc, #68]	; (800ed84 <_ZN10TestOutput12printTestRunEjj+0x60>)
 800ed40:	68f8      	ldr	r0, [r7, #12]
 800ed42:	4798      	blx	r3
        print(number);
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	3334      	adds	r3, #52	; 0x34
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	68b9      	ldr	r1, [r7, #8]
 800ed4e:	68f8      	ldr	r0, [r7, #12]
 800ed50:	4798      	blx	r3
        print(" of ");
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	332c      	adds	r3, #44	; 0x2c
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	490b      	ldr	r1, [pc, #44]	; (800ed88 <_ZN10TestOutput12printTestRunEjj+0x64>)
 800ed5c:	68f8      	ldr	r0, [r7, #12]
 800ed5e:	4798      	blx	r3
        print(total);
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	3334      	adds	r3, #52	; 0x34
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	6879      	ldr	r1, [r7, #4]
 800ed6a:	68f8      	ldr	r0, [r7, #12]
 800ed6c:	4798      	blx	r3
        print("\n");
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	332c      	adds	r3, #44	; 0x2c
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	4905      	ldr	r1, [pc, #20]	; (800ed8c <_ZN10TestOutput12printTestRunEjj+0x68>)
 800ed78:	68f8      	ldr	r0, [r7, #12]
 800ed7a:	4798      	blx	r3
    }
}
 800ed7c:	bf00      	nop
 800ed7e:	3710      	adds	r7, #16
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}
 800ed84:	08022bc0 	.word	0x08022bc0
 800ed88:	08022bcc 	.word	0x08022bcc
 800ed8c:	08022a8c 	.word	0x08022a8c

0800ed90 <_ZN10TestOutput12printFailureERK11TestFailure>:

void TestOutput::printFailure(const TestFailure& failure)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b084      	sub	sp, #16
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
 800ed98:	6039      	str	r1, [r7, #0]
    if (failure.isOutsideTestFile() || failure.isInHelperFunction())
 800ed9a:	6838      	ldr	r0, [r7, #0]
 800ed9c:	f7fd ffa1 	bl	800cce2 <_ZNK11TestFailure17isOutsideTestFileEv>
 800eda0:	4603      	mov	r3, r0
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d105      	bne.n	800edb2 <_ZN10TestOutput12printFailureERK11TestFailure+0x22>
 800eda6:	6838      	ldr	r0, [r7, #0]
 800eda8:	f7fd ffad 	bl	800cd06 <_ZNK11TestFailure18isInHelperFunctionEv>
 800edac:	4603      	mov	r3, r0
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d001      	beq.n	800edb6 <_ZN10TestOutput12printFailureERK11TestFailure+0x26>
 800edb2:	2301      	movs	r3, #1
 800edb4:	e000      	b.n	800edb8 <_ZN10TestOutput12printFailureERK11TestFailure+0x28>
 800edb6:	2300      	movs	r3, #0
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d004      	beq.n	800edc6 <_ZN10TestOutput12printFailureERK11TestFailure+0x36>
        printFileAndLineForTestAndFailure(failure);
 800edbc:	6839      	ldr	r1, [r7, #0]
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f000 f81d 	bl	800edfe <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>
 800edc4:	e003      	b.n	800edce <_ZN10TestOutput12printFailureERK11TestFailure+0x3e>
    else
        printFileAndLineForFailure(failure);
 800edc6:	6839      	ldr	r1, [r7, #0]
 800edc8:	6878      	ldr	r0, [r7, #4]
 800edca:	f000 f86b 	bl	800eea4 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>

    printFailureMessage(failure.getMessage());
 800edce:	683b      	ldr	r3, [r7, #0]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	3318      	adds	r3, #24
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	f107 0208 	add.w	r2, r7, #8
 800edda:	6839      	ldr	r1, [r7, #0]
 800eddc:	4610      	mov	r0, r2
 800edde:	4798      	blx	r3
 800ede0:	f107 0308 	add.w	r3, r7, #8
 800ede4:	4619      	mov	r1, r3
 800ede6:	6878      	ldr	r0, [r7, #4]
 800ede8:	f000 f8b2 	bl	800ef50 <_ZN10TestOutput19printFailureMessageE12SimpleString>
 800edec:	f107 0308 	add.w	r3, r7, #8
 800edf0:	4618      	mov	r0, r3
 800edf2:	f7fc fb74 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 800edf6:	bf00      	nop
 800edf8:	3710      	adds	r7, #16
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}

0800edfe <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>:

void TestOutput::printFileAndLineForTestAndFailure(const TestFailure& failure)
{
 800edfe:	b580      	push	{r7, lr}
 800ee00:	b088      	sub	sp, #32
 800ee02:	af00      	add	r7, sp, #0
 800ee04:	6078      	str	r0, [r7, #4]
 800ee06:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getTestFileName(), failure.getTestLineNumber());
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	331c      	adds	r3, #28
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	f107 0208 	add.w	r2, r7, #8
 800ee14:	6839      	ldr	r1, [r7, #0]
 800ee16:	4610      	mov	r0, r2
 800ee18:	4798      	blx	r3
 800ee1a:	683b      	ldr	r3, [r7, #0]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	3320      	adds	r3, #32
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	6838      	ldr	r0, [r7, #0]
 800ee24:	4798      	blx	r3
 800ee26:	4602      	mov	r2, r0
 800ee28:	f107 0308 	add.w	r3, r7, #8
 800ee2c:	4619      	mov	r1, r3
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f000 f8be 	bl	800efb0 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800ee34:	f107 0308 	add.w	r3, r7, #8
 800ee38:	4618      	mov	r0, r3
 800ee3a:	f7fc fb50 	bl	800b4de <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	330c      	adds	r3, #12
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	f107 0210 	add.w	r2, r7, #16
 800ee4a:	6839      	ldr	r1, [r7, #0]
 800ee4c:	4610      	mov	r0, r2
 800ee4e:	4798      	blx	r3
 800ee50:	f107 0310 	add.w	r3, r7, #16
 800ee54:	4619      	mov	r1, r3
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	f000 f85c 	bl	800ef14 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800ee5c:	f107 0310 	add.w	r3, r7, #16
 800ee60:	4618      	mov	r0, r3
 800ee62:	f7fc fb3c 	bl	800b4de <_ZN12SimpleStringD1Ev>
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	3308      	adds	r3, #8
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	f107 0218 	add.w	r2, r7, #24
 800ee72:	6839      	ldr	r1, [r7, #0]
 800ee74:	4610      	mov	r0, r2
 800ee76:	4798      	blx	r3
 800ee78:	683b      	ldr	r3, [r7, #0]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	3314      	adds	r3, #20
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	6838      	ldr	r0, [r7, #0]
 800ee82:	4798      	blx	r3
 800ee84:	4602      	mov	r2, r0
 800ee86:	f107 0318 	add.w	r3, r7, #24
 800ee8a:	4619      	mov	r1, r3
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	f000 f88f 	bl	800efb0 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800ee92:	f107 0318 	add.w	r3, r7, #24
 800ee96:	4618      	mov	r0, r3
 800ee98:	f7fc fb21 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 800ee9c:	bf00      	nop
 800ee9e:	3720      	adds	r7, #32
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}

0800eea4 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>:

void TestOutput::printFileAndLineForFailure(const TestFailure& failure)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b086      	sub	sp, #24
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
 800eeac:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	3308      	adds	r3, #8
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	f107 0208 	add.w	r2, r7, #8
 800eeba:	6839      	ldr	r1, [r7, #0]
 800eebc:	4610      	mov	r0, r2
 800eebe:	4798      	blx	r3
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	3314      	adds	r3, #20
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	6838      	ldr	r0, [r7, #0]
 800eeca:	4798      	blx	r3
 800eecc:	4602      	mov	r2, r0
 800eece:	f107 0308 	add.w	r3, r7, #8
 800eed2:	4619      	mov	r1, r3
 800eed4:	6878      	ldr	r0, [r7, #4]
 800eed6:	f000 f86b 	bl	800efb0 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800eeda:	f107 0308 	add.w	r3, r7, #8
 800eede:	4618      	mov	r0, r3
 800eee0:	f7fc fafd 	bl	800b4de <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	330c      	adds	r3, #12
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	f107 0210 	add.w	r2, r7, #16
 800eef0:	6839      	ldr	r1, [r7, #0]
 800eef2:	4610      	mov	r0, r2
 800eef4:	4798      	blx	r3
 800eef6:	f107 0310 	add.w	r3, r7, #16
 800eefa:	4619      	mov	r1, r3
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f000 f809 	bl	800ef14 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800ef02:	f107 0310 	add.w	r3, r7, #16
 800ef06:	4618      	mov	r0, r3
 800ef08:	f7fc fae9 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 800ef0c:	bf00      	nop
 800ef0e:	3718      	adds	r7, #24
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}

0800ef14 <_ZN10TestOutput18printFailureInTestE12SimpleString>:

void TestOutput::printFailureInTest(SimpleString testName)
{
 800ef14:	b590      	push	{r4, r7, lr}
 800ef16:	b083      	sub	sp, #12
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
 800ef1c:	6039      	str	r1, [r7, #0]
    print(" Failure in ");
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	332c      	adds	r3, #44	; 0x2c
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	4909      	ldr	r1, [pc, #36]	; (800ef4c <_ZN10TestOutput18printFailureInTestE12SimpleString+0x38>)
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	4798      	blx	r3
    print(testName.asCharString());
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	332c      	adds	r3, #44	; 0x2c
 800ef32:	681c      	ldr	r4, [r3, #0]
 800ef34:	6838      	ldr	r0, [r7, #0]
 800ef36:	f7fc faa5 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	4619      	mov	r1, r3
 800ef3e:	6878      	ldr	r0, [r7, #4]
 800ef40:	47a0      	blx	r4
}
 800ef42:	bf00      	nop
 800ef44:	370c      	adds	r7, #12
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd90      	pop	{r4, r7, pc}
 800ef4a:	bf00      	nop
 800ef4c:	08022bd4 	.word	0x08022bd4

0800ef50 <_ZN10TestOutput19printFailureMessageE12SimpleString>:

void TestOutput::printFailureMessage(SimpleString reason)
{
 800ef50:	b590      	push	{r4, r7, lr}
 800ef52:	b083      	sub	sp, #12
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
 800ef58:	6039      	str	r1, [r7, #0]
    print("\n");
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	332c      	adds	r3, #44	; 0x2c
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	4910      	ldr	r1, [pc, #64]	; (800efa4 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x54>)
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	4798      	blx	r3
    print("\t");
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	332c      	adds	r3, #44	; 0x2c
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	490d      	ldr	r1, [pc, #52]	; (800efa8 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x58>)
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	4798      	blx	r3
    print(reason.asCharString());
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	332c      	adds	r3, #44	; 0x2c
 800ef7c:	681c      	ldr	r4, [r3, #0]
 800ef7e:	6838      	ldr	r0, [r7, #0]
 800ef80:	f7fc fa80 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 800ef84:	4603      	mov	r3, r0
 800ef86:	4619      	mov	r1, r3
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	47a0      	blx	r4
    print("\n\n");
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	332c      	adds	r3, #44	; 0x2c
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	4905      	ldr	r1, [pc, #20]	; (800efac <_ZN10TestOutput19printFailureMessageE12SimpleString+0x5c>)
 800ef96:	6878      	ldr	r0, [r7, #4]
 800ef98:	4798      	blx	r3
}
 800ef9a:	bf00      	nop
 800ef9c:	370c      	adds	r7, #12
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd90      	pop	{r4, r7, pc}
 800efa2:	bf00      	nop
 800efa4:	08022a8c 	.word	0x08022a8c
 800efa8:	08022be4 	.word	0x08022be4
 800efac:	08022bbc 	.word	0x08022bbc

0800efb0 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>:

void TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString file, size_t lineNumber)
{
 800efb0:	b590      	push	{r4, r7, lr}
 800efb2:	b089      	sub	sp, #36	; 0x24
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	60f8      	str	r0, [r7, #12]
 800efb8:	60b9      	str	r1, [r7, #8]
 800efba:	607a      	str	r2, [r7, #4]
    if (TestOutput::getWorkingEnvironment() == TestOutput::visualStudio)
 800efbc:	f7ff fbf0 	bl	800e7a0 <_ZN10TestOutput21getWorkingEnvironmentEv>
 800efc0:	4603      	mov	r3, r0
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	bf0c      	ite	eq
 800efc6:	2301      	moveq	r3, #1
 800efc8:	2300      	movne	r3, #0
 800efca:	b2db      	uxtb	r3, r3
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d015      	beq.n	800effc <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x4c>
        printVisualStudioErrorInFileOnLine(file, lineNumber);
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	3354      	adds	r3, #84	; 0x54
 800efd6:	681c      	ldr	r4, [r3, #0]
 800efd8:	f107 0310 	add.w	r3, r7, #16
 800efdc:	68b9      	ldr	r1, [r7, #8]
 800efde:	4618      	mov	r0, r3
 800efe0:	f7fb ff19 	bl	800ae16 <_ZN12SimpleStringC1ERKS_>
 800efe4:	f107 0310 	add.w	r3, r7, #16
 800efe8:	687a      	ldr	r2, [r7, #4]
 800efea:	4619      	mov	r1, r3
 800efec:	68f8      	ldr	r0, [r7, #12]
 800efee:	47a0      	blx	r4
 800eff0:	f107 0310 	add.w	r3, r7, #16
 800eff4:	4618      	mov	r0, r3
 800eff6:	f7fc fa72 	bl	800b4de <_ZN12SimpleStringD1Ev>
    else
        printEclipseErrorInFileOnLine(file, lineNumber);
}
 800effa:	e014      	b.n	800f026 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x76>
        printEclipseErrorInFileOnLine(file, lineNumber);
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	3350      	adds	r3, #80	; 0x50
 800f002:	681c      	ldr	r4, [r3, #0]
 800f004:	f107 0318 	add.w	r3, r7, #24
 800f008:	68b9      	ldr	r1, [r7, #8]
 800f00a:	4618      	mov	r0, r3
 800f00c:	f7fb ff03 	bl	800ae16 <_ZN12SimpleStringC1ERKS_>
 800f010:	f107 0318 	add.w	r3, r7, #24
 800f014:	687a      	ldr	r2, [r7, #4]
 800f016:	4619      	mov	r1, r3
 800f018:	68f8      	ldr	r0, [r7, #12]
 800f01a:	47a0      	blx	r4
 800f01c:	f107 0318 	add.w	r3, r7, #24
 800f020:	4618      	mov	r0, r3
 800f022:	f7fc fa5c 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 800f026:	bf00      	nop
 800f028:	3724      	adds	r7, #36	; 0x24
 800f02a:	46bd      	mov	sp, r7
 800f02c:	bd90      	pop	{r4, r7, pc}
	...

0800f030 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printEclipseErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800f030:	b590      	push	{r4, r7, lr}
 800f032:	b085      	sub	sp, #20
 800f034:	af00      	add	r7, sp, #0
 800f036:	60f8      	str	r0, [r7, #12]
 800f038:	60b9      	str	r1, [r7, #8]
 800f03a:	607a      	str	r2, [r7, #4]
    print("\n");
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	332c      	adds	r3, #44	; 0x2c
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	4916      	ldr	r1, [pc, #88]	; (800f0a0 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x70>)
 800f046:	68f8      	ldr	r0, [r7, #12]
 800f048:	4798      	blx	r3
    print(file.asCharString());
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	332c      	adds	r3, #44	; 0x2c
 800f050:	681c      	ldr	r4, [r3, #0]
 800f052:	68b8      	ldr	r0, [r7, #8]
 800f054:	f7fc fa16 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 800f058:	4603      	mov	r3, r0
 800f05a:	4619      	mov	r1, r3
 800f05c:	68f8      	ldr	r0, [r7, #12]
 800f05e:	47a0      	blx	r4
    print(":");
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	332c      	adds	r3, #44	; 0x2c
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	490e      	ldr	r1, [pc, #56]	; (800f0a4 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800f06a:	68f8      	ldr	r0, [r7, #12]
 800f06c:	4798      	blx	r3
    print(lineNumber);
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	3334      	adds	r3, #52	; 0x34
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	6879      	ldr	r1, [r7, #4]
 800f078:	68f8      	ldr	r0, [r7, #12]
 800f07a:	4798      	blx	r3
    print(":");
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	332c      	adds	r3, #44	; 0x2c
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	4907      	ldr	r1, [pc, #28]	; (800f0a4 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800f086:	68f8      	ldr	r0, [r7, #12]
 800f088:	4798      	blx	r3
    print(" error:");
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	332c      	adds	r3, #44	; 0x2c
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	4905      	ldr	r1, [pc, #20]	; (800f0a8 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x78>)
 800f094:	68f8      	ldr	r0, [r7, #12]
 800f096:	4798      	blx	r3
}
 800f098:	bf00      	nop
 800f09a:	3714      	adds	r7, #20
 800f09c:	46bd      	mov	sp, r7
 800f09e:	bd90      	pop	{r4, r7, pc}
 800f0a0:	08022a8c 	.word	0x08022a8c
 800f0a4:	08022be8 	.word	0x08022be8
 800f0a8:	08022bec 	.word	0x08022bec

0800f0ac <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printVisualStudioErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800f0ac:	b590      	push	{r4, r7, lr}
 800f0ae:	b085      	sub	sp, #20
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	60f8      	str	r0, [r7, #12]
 800f0b4:	60b9      	str	r1, [r7, #8]
 800f0b6:	607a      	str	r2, [r7, #4]
    print("\n");
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	332c      	adds	r3, #44	; 0x2c
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	4916      	ldr	r1, [pc, #88]	; (800f11c <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x70>)
 800f0c2:	68f8      	ldr	r0, [r7, #12]
 800f0c4:	4798      	blx	r3
    print(file.asCharString());
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	332c      	adds	r3, #44	; 0x2c
 800f0cc:	681c      	ldr	r4, [r3, #0]
 800f0ce:	68b8      	ldr	r0, [r7, #8]
 800f0d0:	f7fc f9d8 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	4619      	mov	r1, r3
 800f0d8:	68f8      	ldr	r0, [r7, #12]
 800f0da:	47a0      	blx	r4
    print("(");
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	332c      	adds	r3, #44	; 0x2c
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	490e      	ldr	r1, [pc, #56]	; (800f120 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x74>)
 800f0e6:	68f8      	ldr	r0, [r7, #12]
 800f0e8:	4798      	blx	r3
    print(lineNumber);
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	3334      	adds	r3, #52	; 0x34
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	6879      	ldr	r1, [r7, #4]
 800f0f4:	68f8      	ldr	r0, [r7, #12]
 800f0f6:	4798      	blx	r3
    print("):");
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	332c      	adds	r3, #44	; 0x2c
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	4908      	ldr	r1, [pc, #32]	; (800f124 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x78>)
 800f102:	68f8      	ldr	r0, [r7, #12]
 800f104:	4798      	blx	r3
    print(" error:");
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	332c      	adds	r3, #44	; 0x2c
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	4906      	ldr	r1, [pc, #24]	; (800f128 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x7c>)
 800f110:	68f8      	ldr	r0, [r7, #12]
 800f112:	4798      	blx	r3
}
 800f114:	bf00      	nop
 800f116:	3714      	adds	r7, #20
 800f118:	46bd      	mov	sp, r7
 800f11a:	bd90      	pop	{r4, r7, pc}
 800f11c:	08022a8c 	.word	0x08022a8c
 800f120:	08022bf4 	.word	0x08022bf4
 800f124:	08022bf8 	.word	0x08022bf8
 800f128:	08022bec 	.word	0x08022bec

0800f12c <_ZN10TestOutput16printVeryVerboseEPKc>:

void TestOutput::printVeryVerbose(const char* str)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b082      	sub	sp, #8
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
 800f134:	6039      	str	r1, [r7, #0]
    if(verbose_ == level_veryVerbose)
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	7a1b      	ldrb	r3, [r3, #8]
 800f13a:	2b02      	cmp	r3, #2
 800f13c:	d106      	bne.n	800f14c <_ZN10TestOutput16printVeryVerboseEPKc+0x20>
        printBuffer(str);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	3328      	adds	r3, #40	; 0x28
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	6839      	ldr	r1, [r7, #0]
 800f148:	6878      	ldr	r0, [r7, #4]
 800f14a:	4798      	blx	r3
}
 800f14c:	bf00      	nop
 800f14e:	3708      	adds	r7, #8
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}

0800f154 <_ZN17ConsoleTestOutput11printBufferEPKc>:


void ConsoleTestOutput::printBuffer(const char* s)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b082      	sub	sp, #8
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	6039      	str	r1, [r7, #0]
    while (*s) {
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	781b      	ldrb	r3, [r3, #0]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d009      	beq.n	800f17a <_ZN17ConsoleTestOutput11printBufferEPKc+0x26>
        PlatformSpecificPutchar(*s);
 800f166:	4b0a      	ldr	r3, [pc, #40]	; (800f190 <_ZN17ConsoleTestOutput11printBufferEPKc+0x3c>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	683a      	ldr	r2, [r7, #0]
 800f16c:	7812      	ldrb	r2, [r2, #0]
 800f16e:	4610      	mov	r0, r2
 800f170:	4798      	blx	r3
        s++;
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	3301      	adds	r3, #1
 800f176:	603b      	str	r3, [r7, #0]
    while (*s) {
 800f178:	e7f1      	b.n	800f15e <_ZN17ConsoleTestOutput11printBufferEPKc+0xa>
    }
    flush();
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	334c      	adds	r3, #76	; 0x4c
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	6878      	ldr	r0, [r7, #4]
 800f184:	4798      	blx	r3
}
 800f186:	bf00      	nop
 800f188:	3708      	adds	r7, #8
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}
 800f18e:	bf00      	nop
 800f190:	200000c0 	.word	0x200000c0

0800f194 <_ZN17ConsoleTestOutput5flushEv>:

void ConsoleTestOutput::flush()
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b082      	sub	sp, #8
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
    PlatformSpecificFlush();
 800f19c:	4b03      	ldr	r3, [pc, #12]	; (800f1ac <_ZN17ConsoleTestOutput5flushEv+0x18>)
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	4798      	blx	r3
}
 800f1a2:	bf00      	nop
 800f1a4:	3708      	adds	r7, #8
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}
 800f1aa:	bf00      	nop
 800f1ac:	200000c4 	.word	0x200000c4

0800f1b0 <_ZN19CompositeTestOutputC1Ev>:

StringBufferTestOutput::~StringBufferTestOutput()
{
}

CompositeTestOutput::CompositeTestOutput()
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b082      	sub	sp, #8
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
  : outputOne_(NULLPTR), outputTwo_(NULLPTR)
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f7ff fb00 	bl	800e7c0 <_ZN10TestOutputC1Ev>
 800f1c0:	4a06      	ldr	r2, [pc, #24]	; (800f1dc <_ZN19CompositeTestOutputC1Ev+0x2c>)
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	601a      	str	r2, [r3, #0]
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	611a      	str	r2, [r3, #16]
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	615a      	str	r2, [r3, #20]
{
}
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3708      	adds	r7, #8
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	bd80      	pop	{r7, pc}
 800f1dc:	08025b14 	.word	0x08025b14

0800f1e0 <_ZN19CompositeTestOutputD1Ev>:

CompositeTestOutput::~CompositeTestOutput()
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b082      	sub	sp, #8
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
 800f1e8:	4a0e      	ldr	r2, [pc, #56]	; (800f224 <_ZN19CompositeTestOutputD1Ev+0x44>)
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	601a      	str	r2, [r3, #0]
{
  delete outputOne_;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	691b      	ldr	r3, [r3, #16]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d004      	beq.n	800f200 <_ZN19CompositeTestOutputD1Ev+0x20>
 800f1f6:	681a      	ldr	r2, [r3, #0]
 800f1f8:	3204      	adds	r2, #4
 800f1fa:	6812      	ldr	r2, [r2, #0]
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	4790      	blx	r2
  delete outputTwo_;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	695b      	ldr	r3, [r3, #20]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d004      	beq.n	800f212 <_ZN19CompositeTestOutputD1Ev+0x32>
 800f208:	681a      	ldr	r2, [r3, #0]
 800f20a:	3204      	adds	r2, #4
 800f20c:	6812      	ldr	r2, [r2, #0]
 800f20e:	4618      	mov	r0, r3
 800f210:	4790      	blx	r2
CompositeTestOutput::~CompositeTestOutput()
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	4618      	mov	r0, r3
 800f216:	f7ff faf1 	bl	800e7fc <_ZN10TestOutputD1Ev>
}
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	4618      	mov	r0, r3
 800f21e:	3708      	adds	r7, #8
 800f220:	46bd      	mov	sp, r7
 800f222:	bd80      	pop	{r7, pc}
 800f224:	08025b14 	.word	0x08025b14

0800f228 <_ZN19CompositeTestOutputD0Ev>:
CompositeTestOutput::~CompositeTestOutput()
 800f228:	b580      	push	{r7, lr}
 800f22a:	b082      	sub	sp, #8
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
}
 800f230:	6878      	ldr	r0, [r7, #4]
 800f232:	f7ff ffd5 	bl	800f1e0 <_ZN19CompositeTestOutputD1Ev>
 800f236:	2118      	movs	r1, #24
 800f238:	6878      	ldr	r0, [r7, #4]
 800f23a:	f7f9 f9e9 	bl	8008610 <_ZdlPvj>
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	4618      	mov	r0, r3
 800f242:	3708      	adds	r7, #8
 800f244:	46bd      	mov	sp, r7
 800f246:	bd80      	pop	{r7, pc}

0800f248 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput>:

void CompositeTestOutput::setOutputOne(TestOutput* output)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b082      	sub	sp, #8
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
 800f250:	6039      	str	r1, [r7, #0]
  delete outputOne_;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	691b      	ldr	r3, [r3, #16]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d004      	beq.n	800f264 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput+0x1c>
 800f25a:	681a      	ldr	r2, [r3, #0]
 800f25c:	3204      	adds	r2, #4
 800f25e:	6812      	ldr	r2, [r2, #0]
 800f260:	4618      	mov	r0, r3
 800f262:	4790      	blx	r2
  outputOne_ = output;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	683a      	ldr	r2, [r7, #0]
 800f268:	611a      	str	r2, [r3, #16]
}
 800f26a:	bf00      	nop
 800f26c:	3708      	adds	r7, #8
 800f26e:	46bd      	mov	sp, r7
 800f270:	bd80      	pop	{r7, pc}

0800f272 <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput>:

void CompositeTestOutput::setOutputTwo(TestOutput* output)
{
 800f272:	b580      	push	{r7, lr}
 800f274:	b082      	sub	sp, #8
 800f276:	af00      	add	r7, sp, #0
 800f278:	6078      	str	r0, [r7, #4]
 800f27a:	6039      	str	r1, [r7, #0]
  delete outputTwo_;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	695b      	ldr	r3, [r3, #20]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d004      	beq.n	800f28e <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput+0x1c>
 800f284:	681a      	ldr	r2, [r3, #0]
 800f286:	3204      	adds	r2, #4
 800f288:	6812      	ldr	r2, [r2, #0]
 800f28a:	4618      	mov	r0, r3
 800f28c:	4790      	blx	r2
  outputTwo_ = output;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	683a      	ldr	r2, [r7, #0]
 800f292:	615a      	str	r2, [r3, #20]
}
 800f294:	bf00      	nop
 800f296:	3708      	adds	r7, #8
 800f298:	46bd      	mov	sp, r7
 800f29a:	bd80      	pop	{r7, pc}

0800f29c <_ZN19CompositeTestOutput17printTestsStartedEv>:

void CompositeTestOutput::printTestsStarted()
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b082      	sub	sp, #8
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->printTestsStarted();
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	691b      	ldr	r3, [r3, #16]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d008      	beq.n	800f2be <_ZN19CompositeTestOutput17printTestsStartedEv+0x22>
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	691a      	ldr	r2, [r3, #16]
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	691b      	ldr	r3, [r3, #16]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	3308      	adds	r3, #8
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	4610      	mov	r0, r2
 800f2bc:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsStarted();
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	695b      	ldr	r3, [r3, #20]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d008      	beq.n	800f2d8 <_ZN19CompositeTestOutput17printTestsStartedEv+0x3c>
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	695a      	ldr	r2, [r3, #20]
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	695b      	ldr	r3, [r3, #20]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	3308      	adds	r3, #8
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	4610      	mov	r0, r2
 800f2d6:	4798      	blx	r3
}
 800f2d8:	bf00      	nop
 800f2da:	3708      	adds	r7, #8
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}

0800f2e0 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult>:

void CompositeTestOutput::printTestsEnded(const TestResult& result)
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b082      	sub	sp, #8
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
 800f2e8:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printTestsEnded(result);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	691b      	ldr	r3, [r3, #16]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d009      	beq.n	800f306 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x26>
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	691a      	ldr	r2, [r3, #16]
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	691b      	ldr	r3, [r3, #16]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	330c      	adds	r3, #12
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	6839      	ldr	r1, [r7, #0]
 800f302:	4610      	mov	r0, r2
 800f304:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsEnded(result);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	695b      	ldr	r3, [r3, #20]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d009      	beq.n	800f322 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x42>
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	695a      	ldr	r2, [r3, #20]
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	695b      	ldr	r3, [r3, #20]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	330c      	adds	r3, #12
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	6839      	ldr	r1, [r7, #0]
 800f31e:	4610      	mov	r0, r2
 800f320:	4798      	blx	r3
}
 800f322:	bf00      	nop
 800f324:	3708      	adds	r7, #8
 800f326:	46bd      	mov	sp, r7
 800f328:	bd80      	pop	{r7, pc}

0800f32a <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800f32a:	b580      	push	{r7, lr}
 800f32c:	b082      	sub	sp, #8
 800f32e:	af00      	add	r7, sp, #0
 800f330:	6078      	str	r0, [r7, #4]
 800f332:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestStarted(test);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	691b      	ldr	r3, [r3, #16]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d009      	beq.n	800f350 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x26>
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	691a      	ldr	r2, [r3, #16]
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	691b      	ldr	r3, [r3, #16]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	3310      	adds	r3, #16
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	6839      	ldr	r1, [r7, #0]
 800f34c:	4610      	mov	r0, r2
 800f34e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestStarted(test);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	695b      	ldr	r3, [r3, #20]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d009      	beq.n	800f36c <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x42>
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	695a      	ldr	r2, [r3, #20]
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	695b      	ldr	r3, [r3, #20]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	3310      	adds	r3, #16
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	6839      	ldr	r1, [r7, #0]
 800f368:	4610      	mov	r0, r2
 800f36a:	4798      	blx	r3
}
 800f36c:	bf00      	nop
 800f36e:	3708      	adds	r7, #8
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}

0800f374 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult>:

void CompositeTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b082      	sub	sp, #8
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
 800f37c:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestEnded(res);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	691b      	ldr	r3, [r3, #16]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d009      	beq.n	800f39a <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x26>
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	691a      	ldr	r2, [r3, #16]
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	691b      	ldr	r3, [r3, #16]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	3314      	adds	r3, #20
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	6839      	ldr	r1, [r7, #0]
 800f396:	4610      	mov	r0, r2
 800f398:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestEnded(res);
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	695b      	ldr	r3, [r3, #20]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d009      	beq.n	800f3b6 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x42>
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	695a      	ldr	r2, [r3, #20]
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	695b      	ldr	r3, [r3, #20]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	3314      	adds	r3, #20
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	6839      	ldr	r1, [r7, #0]
 800f3b2:	4610      	mov	r0, r2
 800f3b4:	4798      	blx	r3
}
 800f3b6:	bf00      	nop
 800f3b8:	3708      	adds	r7, #8
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bd80      	pop	{r7, pc}

0800f3be <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800f3be:	b580      	push	{r7, lr}
 800f3c0:	b082      	sub	sp, #8
 800f3c2:	af00      	add	r7, sp, #0
 800f3c4:	6078      	str	r0, [r7, #4]
 800f3c6:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupStarted(test);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	691b      	ldr	r3, [r3, #16]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d009      	beq.n	800f3e4 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x26>
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	691a      	ldr	r2, [r3, #16]
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	691b      	ldr	r3, [r3, #16]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	3318      	adds	r3, #24
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	6839      	ldr	r1, [r7, #0]
 800f3e0:	4610      	mov	r0, r2
 800f3e2:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupStarted(test);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	695b      	ldr	r3, [r3, #20]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d009      	beq.n	800f400 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x42>
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	695a      	ldr	r2, [r3, #20]
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	695b      	ldr	r3, [r3, #20]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	3318      	adds	r3, #24
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	6839      	ldr	r1, [r7, #0]
 800f3fc:	4610      	mov	r0, r2
 800f3fe:	4798      	blx	r3
}
 800f400:	bf00      	nop
 800f402:	3708      	adds	r7, #8
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}

0800f408 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult>:

void CompositeTestOutput::printCurrentGroupEnded(const TestResult& res)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b082      	sub	sp, #8
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
 800f410:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupEnded(res);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	691b      	ldr	r3, [r3, #16]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d009      	beq.n	800f42e <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x26>
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	691a      	ldr	r2, [r3, #16]
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	691b      	ldr	r3, [r3, #16]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	331c      	adds	r3, #28
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	6839      	ldr	r1, [r7, #0]
 800f42a:	4610      	mov	r0, r2
 800f42c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupEnded(res);
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	695b      	ldr	r3, [r3, #20]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d009      	beq.n	800f44a <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x42>
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	695a      	ldr	r2, [r3, #20]
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	695b      	ldr	r3, [r3, #20]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	331c      	adds	r3, #28
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	6839      	ldr	r1, [r7, #0]
 800f446:	4610      	mov	r0, r2
 800f448:	4798      	blx	r3
}
 800f44a:	bf00      	nop
 800f44c:	3708      	adds	r7, #8
 800f44e:	46bd      	mov	sp, r7
 800f450:	bd80      	pop	{r7, pc}

0800f452 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE>:

void CompositeTestOutput::verbose(VerbosityLevel level)
{
 800f452:	b580      	push	{r7, lr}
 800f454:	b082      	sub	sp, #8
 800f456:	af00      	add	r7, sp, #0
 800f458:	6078      	str	r0, [r7, #4]
 800f45a:	460b      	mov	r3, r1
 800f45c:	70fb      	strb	r3, [r7, #3]
  if (outputOne_) outputOne_->verbose(level);
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	691b      	ldr	r3, [r3, #16]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d009      	beq.n	800f47a <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x28>
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	691a      	ldr	r2, [r3, #16]
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	691b      	ldr	r3, [r3, #16]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	3320      	adds	r3, #32
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	78f9      	ldrb	r1, [r7, #3]
 800f476:	4610      	mov	r0, r2
 800f478:	4798      	blx	r3
  if (outputTwo_) outputTwo_->verbose(level);
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	695b      	ldr	r3, [r3, #20]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d009      	beq.n	800f496 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x44>
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	695a      	ldr	r2, [r3, #20]
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	695b      	ldr	r3, [r3, #20]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	3320      	adds	r3, #32
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	78f9      	ldrb	r1, [r7, #3]
 800f492:	4610      	mov	r0, r2
 800f494:	4798      	blx	r3
}
 800f496:	bf00      	nop
 800f498:	3708      	adds	r7, #8
 800f49a:	46bd      	mov	sp, r7
 800f49c:	bd80      	pop	{r7, pc}

0800f49e <_ZN19CompositeTestOutput5colorEv>:

void CompositeTestOutput::color()
{
 800f49e:	b580      	push	{r7, lr}
 800f4a0:	b082      	sub	sp, #8
 800f4a2:	af00      	add	r7, sp, #0
 800f4a4:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->color();
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	691b      	ldr	r3, [r3, #16]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d008      	beq.n	800f4c0 <_ZN19CompositeTestOutput5colorEv+0x22>
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	691a      	ldr	r2, [r3, #16]
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	691b      	ldr	r3, [r3, #16]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	3324      	adds	r3, #36	; 0x24
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	4610      	mov	r0, r2
 800f4be:	4798      	blx	r3
  if (outputTwo_) outputTwo_->color();
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	695b      	ldr	r3, [r3, #20]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d008      	beq.n	800f4da <_ZN19CompositeTestOutput5colorEv+0x3c>
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	695a      	ldr	r2, [r3, #20]
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	695b      	ldr	r3, [r3, #20]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	3324      	adds	r3, #36	; 0x24
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	4610      	mov	r0, r2
 800f4d8:	4798      	blx	r3
}
 800f4da:	bf00      	nop
 800f4dc:	3708      	adds	r7, #8
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}

0800f4e2 <_ZN19CompositeTestOutput11printBufferEPKc>:

void CompositeTestOutput::printBuffer(const char* buffer)
{
 800f4e2:	b580      	push	{r7, lr}
 800f4e4:	b082      	sub	sp, #8
 800f4e6:	af00      	add	r7, sp, #0
 800f4e8:	6078      	str	r0, [r7, #4]
 800f4ea:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printBuffer(buffer);
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	691b      	ldr	r3, [r3, #16]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d009      	beq.n	800f508 <_ZN19CompositeTestOutput11printBufferEPKc+0x26>
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	691a      	ldr	r2, [r3, #16]
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	691b      	ldr	r3, [r3, #16]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	3328      	adds	r3, #40	; 0x28
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	6839      	ldr	r1, [r7, #0]
 800f504:	4610      	mov	r0, r2
 800f506:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printBuffer(buffer);
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	695b      	ldr	r3, [r3, #20]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d009      	beq.n	800f524 <_ZN19CompositeTestOutput11printBufferEPKc+0x42>
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	695a      	ldr	r2, [r3, #20]
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	695b      	ldr	r3, [r3, #20]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	3328      	adds	r3, #40	; 0x28
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	6839      	ldr	r1, [r7, #0]
 800f520:	4610      	mov	r0, r2
 800f522:	4798      	blx	r3
}
 800f524:	bf00      	nop
 800f526:	3708      	adds	r7, #8
 800f528:	46bd      	mov	sp, r7
 800f52a:	bd80      	pop	{r7, pc}

0800f52c <_ZN19CompositeTestOutput5printEPKc>:

void CompositeTestOutput::print(const char* buffer)
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b082      	sub	sp, #8
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
 800f534:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(buffer);
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	691b      	ldr	r3, [r3, #16]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d009      	beq.n	800f552 <_ZN19CompositeTestOutput5printEPKc+0x26>
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	691a      	ldr	r2, [r3, #16]
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	691b      	ldr	r3, [r3, #16]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	332c      	adds	r3, #44	; 0x2c
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	6839      	ldr	r1, [r7, #0]
 800f54e:	4610      	mov	r0, r2
 800f550:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(buffer);
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	695b      	ldr	r3, [r3, #20]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d009      	beq.n	800f56e <_ZN19CompositeTestOutput5printEPKc+0x42>
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	695a      	ldr	r2, [r3, #20]
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	695b      	ldr	r3, [r3, #20]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	332c      	adds	r3, #44	; 0x2c
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	6839      	ldr	r1, [r7, #0]
 800f56a:	4610      	mov	r0, r2
 800f56c:	4798      	blx	r3
}
 800f56e:	bf00      	nop
 800f570:	3708      	adds	r7, #8
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}

0800f576 <_ZN19CompositeTestOutput5printEl>:

void CompositeTestOutput::print(long number)
{
 800f576:	b580      	push	{r7, lr}
 800f578:	b082      	sub	sp, #8
 800f57a:	af00      	add	r7, sp, #0
 800f57c:	6078      	str	r0, [r7, #4]
 800f57e:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	691b      	ldr	r3, [r3, #16]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d009      	beq.n	800f59c <_ZN19CompositeTestOutput5printEl+0x26>
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	691a      	ldr	r2, [r3, #16]
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	691b      	ldr	r3, [r3, #16]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	3330      	adds	r3, #48	; 0x30
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	6839      	ldr	r1, [r7, #0]
 800f598:	4610      	mov	r0, r2
 800f59a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	695b      	ldr	r3, [r3, #20]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d009      	beq.n	800f5b8 <_ZN19CompositeTestOutput5printEl+0x42>
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	695a      	ldr	r2, [r3, #20]
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	695b      	ldr	r3, [r3, #20]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	3330      	adds	r3, #48	; 0x30
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	6839      	ldr	r1, [r7, #0]
 800f5b4:	4610      	mov	r0, r2
 800f5b6:	4798      	blx	r3
}
 800f5b8:	bf00      	nop
 800f5ba:	3708      	adds	r7, #8
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bd80      	pop	{r7, pc}

0800f5c0 <_ZN19CompositeTestOutput5printEj>:

void CompositeTestOutput::print(size_t number)
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b082      	sub	sp, #8
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
 800f5c8:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	691b      	ldr	r3, [r3, #16]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d009      	beq.n	800f5e6 <_ZN19CompositeTestOutput5printEj+0x26>
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	691a      	ldr	r2, [r3, #16]
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	691b      	ldr	r3, [r3, #16]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	3334      	adds	r3, #52	; 0x34
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	6839      	ldr	r1, [r7, #0]
 800f5e2:	4610      	mov	r0, r2
 800f5e4:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	695b      	ldr	r3, [r3, #20]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d009      	beq.n	800f602 <_ZN19CompositeTestOutput5printEj+0x42>
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	695a      	ldr	r2, [r3, #20]
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	695b      	ldr	r3, [r3, #20]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	3334      	adds	r3, #52	; 0x34
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	6839      	ldr	r1, [r7, #0]
 800f5fe:	4610      	mov	r0, r2
 800f600:	4798      	blx	r3
}
 800f602:	bf00      	nop
 800f604:	3708      	adds	r7, #8
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}

0800f60a <_ZN19CompositeTestOutput11printDoubleEd>:

void CompositeTestOutput::printDouble(double number)
{
 800f60a:	b580      	push	{r7, lr}
 800f60c:	b084      	sub	sp, #16
 800f60e:	af00      	add	r7, sp, #0
 800f610:	60f8      	str	r0, [r7, #12]
 800f612:	ed87 0b00 	vstr	d0, [r7]
  if (outputOne_) outputOne_->printDouble(number);
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	691b      	ldr	r3, [r3, #16]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d00a      	beq.n	800f634 <_ZN19CompositeTestOutput11printDoubleEd+0x2a>
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	691a      	ldr	r2, [r3, #16]
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	691b      	ldr	r3, [r3, #16]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	3338      	adds	r3, #56	; 0x38
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	ed97 0b00 	vldr	d0, [r7]
 800f630:	4610      	mov	r0, r2
 800f632:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printDouble(number);
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	695b      	ldr	r3, [r3, #20]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d00a      	beq.n	800f652 <_ZN19CompositeTestOutput11printDoubleEd+0x48>
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	695a      	ldr	r2, [r3, #20]
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	695b      	ldr	r3, [r3, #20]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	3338      	adds	r3, #56	; 0x38
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	ed97 0b00 	vldr	d0, [r7]
 800f64e:	4610      	mov	r0, r2
 800f650:	4798      	blx	r3
}
 800f652:	bf00      	nop
 800f654:	3710      	adds	r7, #16
 800f656:	46bd      	mov	sp, r7
 800f658:	bd80      	pop	{r7, pc}

0800f65a <_ZN19CompositeTestOutput12printFailureERK11TestFailure>:

void CompositeTestOutput::printFailure(const TestFailure& failure)
{
 800f65a:	b580      	push	{r7, lr}
 800f65c:	b082      	sub	sp, #8
 800f65e:	af00      	add	r7, sp, #0
 800f660:	6078      	str	r0, [r7, #4]
 800f662:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printFailure(failure);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	691b      	ldr	r3, [r3, #16]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d009      	beq.n	800f680 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x26>
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	691a      	ldr	r2, [r3, #16]
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	691b      	ldr	r3, [r3, #16]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	333c      	adds	r3, #60	; 0x3c
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	6839      	ldr	r1, [r7, #0]
 800f67c:	4610      	mov	r0, r2
 800f67e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printFailure(failure);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	695b      	ldr	r3, [r3, #20]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d009      	beq.n	800f69c <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x42>
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	695a      	ldr	r2, [r3, #20]
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	695b      	ldr	r3, [r3, #20]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	333c      	adds	r3, #60	; 0x3c
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	6839      	ldr	r1, [r7, #0]
 800f698:	4610      	mov	r0, r2
 800f69a:	4798      	blx	r3
}
 800f69c:	bf00      	nop
 800f69e:	3708      	adds	r7, #8
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}

0800f6a4 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc>:

void CompositeTestOutput::setProgressIndicator(const char* indicator)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b082      	sub	sp, #8
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
 800f6ac:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->setProgressIndicator(indicator);
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	691b      	ldr	r3, [r3, #16]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d009      	beq.n	800f6ca <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x26>
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	691a      	ldr	r2, [r3, #16]
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	691b      	ldr	r3, [r3, #16]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	3344      	adds	r3, #68	; 0x44
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	6839      	ldr	r1, [r7, #0]
 800f6c6:	4610      	mov	r0, r2
 800f6c8:	4798      	blx	r3
  if (outputTwo_) outputTwo_->setProgressIndicator(indicator);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	695b      	ldr	r3, [r3, #20]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d009      	beq.n	800f6e6 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x42>
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	695a      	ldr	r2, [r3, #20]
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	695b      	ldr	r3, [r3, #20]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	3344      	adds	r3, #68	; 0x44
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	6839      	ldr	r1, [r7, #0]
 800f6e2:	4610      	mov	r0, r2
 800f6e4:	4798      	blx	r3
}
 800f6e6:	bf00      	nop
 800f6e8:	3708      	adds	r7, #8
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	bd80      	pop	{r7, pc}

0800f6ee <_ZN19CompositeTestOutput5flushEv>:

void CompositeTestOutput::flush()
{
 800f6ee:	b580      	push	{r7, lr}
 800f6f0:	b082      	sub	sp, #8
 800f6f2:	af00      	add	r7, sp, #0
 800f6f4:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->flush();
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	691b      	ldr	r3, [r3, #16]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d008      	beq.n	800f710 <_ZN19CompositeTestOutput5flushEv+0x22>
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	691a      	ldr	r2, [r3, #16]
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	691b      	ldr	r3, [r3, #16]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	334c      	adds	r3, #76	; 0x4c
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	4610      	mov	r0, r2
 800f70e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->flush();
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	695b      	ldr	r3, [r3, #20]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d008      	beq.n	800f72a <_ZN19CompositeTestOutput5flushEv+0x3c>
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	695a      	ldr	r2, [r3, #20]
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	695b      	ldr	r3, [r3, #20]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	334c      	adds	r3, #76	; 0x4c
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	4610      	mov	r0, r2
 800f728:	4798      	blx	r3
}
 800f72a:	bf00      	nop
 800f72c:	3708      	adds	r7, #8
 800f72e:	46bd      	mov	sp, r7
 800f730:	bd80      	pop	{r7, pc}

0800f732 <_ZN10TestPlugin13preTestActionER10UtestShellR10TestResult>:
    virtual void preTestAction(UtestShell&, TestResult&)
 800f732:	b480      	push	{r7}
 800f734:	b085      	sub	sp, #20
 800f736:	af00      	add	r7, sp, #0
 800f738:	60f8      	str	r0, [r7, #12]
 800f73a:	60b9      	str	r1, [r7, #8]
 800f73c:	607a      	str	r2, [r7, #4]
    }
 800f73e:	bf00      	nop
 800f740:	3714      	adds	r7, #20
 800f742:	46bd      	mov	sp, r7
 800f744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f748:	4770      	bx	lr

0800f74a <_ZN10TestPlugin14postTestActionER10UtestShellR10TestResult>:
    virtual void postTestAction(UtestShell&, TestResult&)
 800f74a:	b480      	push	{r7}
 800f74c:	b085      	sub	sp, #20
 800f74e:	af00      	add	r7, sp, #0
 800f750:	60f8      	str	r0, [r7, #12]
 800f752:	60b9      	str	r1, [r7, #8]
 800f754:	607a      	str	r2, [r7, #4]
    }
 800f756:	bf00      	nop
 800f758:	3714      	adds	r7, #20
 800f75a:	46bd      	mov	sp, r7
 800f75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f760:	4770      	bx	lr
	...

0800f764 <_ZN10TestPluginC1ERK12SimpleString>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestPlugin.h"

TestPlugin::TestPlugin(const SimpleString& name) :
 800f764:	b580      	push	{r7, lr}
 800f766:	b082      	sub	sp, #8
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
 800f76c:	6039      	str	r1, [r7, #0]
    next_(NullTestPlugin::instance()), name_(name), enabled_(true)
 800f76e:	4a0b      	ldr	r2, [pc, #44]	; (800f79c <_ZN10TestPluginC1ERK12SimpleString+0x38>)
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	601a      	str	r2, [r3, #0]
 800f774:	f000 f9ce 	bl	800fb14 <_ZN14NullTestPlugin8instanceEv>
 800f778:	4602      	mov	r2, r0
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	605a      	str	r2, [r3, #4]
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	3308      	adds	r3, #8
 800f782:	6839      	ldr	r1, [r7, #0]
 800f784:	4618      	mov	r0, r3
 800f786:	f7fb fb46 	bl	800ae16 <_ZN12SimpleStringC1ERKS_>
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	2201      	movs	r2, #1
 800f78e:	741a      	strb	r2, [r3, #16]
{
}
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	4618      	mov	r0, r3
 800f794:	3708      	adds	r7, #8
 800f796:	46bd      	mov	sp, r7
 800f798:	bd80      	pop	{r7, pc}
 800f79a:	bf00      	nop
 800f79c:	08025cd0 	.word	0x08025cd0

0800f7a0 <_ZN10TestPluginC1EPS_>:

TestPlugin::TestPlugin(TestPlugin* next) :
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b082      	sub	sp, #8
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
 800f7a8:	6039      	str	r1, [r7, #0]
    next_(next), name_("null"), enabled_(true)
 800f7aa:	4a0a      	ldr	r2, [pc, #40]	; (800f7d4 <_ZN10TestPluginC1EPS_+0x34>)
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	601a      	str	r2, [r3, #0]
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	683a      	ldr	r2, [r7, #0]
 800f7b4:	605a      	str	r2, [r3, #4]
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	3308      	adds	r3, #8
 800f7ba:	4907      	ldr	r1, [pc, #28]	; (800f7d8 <_ZN10TestPluginC1EPS_+0x38>)
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f7fb fad6 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2201      	movs	r2, #1
 800f7c6:	741a      	strb	r2, [r3, #16]
{
}
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	3708      	adds	r7, #8
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}
 800f7d2:	bf00      	nop
 800f7d4:	08025cd0 	.word	0x08025cd0
 800f7d8:	08022bfc 	.word	0x08022bfc

0800f7dc <_ZN10TestPluginD1Ev>:

TestPlugin::~TestPlugin()
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b082      	sub	sp, #8
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
 800f7e4:	4a06      	ldr	r2, [pc, #24]	; (800f800 <_ZN10TestPluginD1Ev+0x24>)
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	601a      	str	r2, [r3, #0]
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	3308      	adds	r3, #8
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f7fb fe75 	bl	800b4de <_ZN12SimpleStringD1Ev>
{
}
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	3708      	adds	r7, #8
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd80      	pop	{r7, pc}
 800f7fe:	bf00      	nop
 800f800:	08025cd0 	.word	0x08025cd0

0800f804 <_ZN10TestPluginD0Ev>:
TestPlugin::~TestPlugin()
 800f804:	b580      	push	{r7, lr}
 800f806:	b082      	sub	sp, #8
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
}
 800f80c:	6878      	ldr	r0, [r7, #4]
 800f80e:	f7ff ffe5 	bl	800f7dc <_ZN10TestPluginD1Ev>
 800f812:	2114      	movs	r1, #20
 800f814:	6878      	ldr	r0, [r7, #4]
 800f816:	f7f8 fefb 	bl	8008610 <_ZdlPvj>
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	4618      	mov	r0, r3
 800f81e:	3708      	adds	r7, #8
 800f820:	46bd      	mov	sp, r7
 800f822:	bd80      	pop	{r7, pc}

0800f824 <_ZN10TestPlugin9addPluginEPS_>:

TestPlugin* TestPlugin::addPlugin(TestPlugin* plugin)
{
 800f824:	b480      	push	{r7}
 800f826:	b083      	sub	sp, #12
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
 800f82c:	6039      	str	r1, [r7, #0]
    next_ = plugin;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	683a      	ldr	r2, [r7, #0]
 800f832:	605a      	str	r2, [r3, #4]
    return this;
 800f834:	687b      	ldr	r3, [r7, #4]
}
 800f836:	4618      	mov	r0, r3
 800f838:	370c      	adds	r7, #12
 800f83a:	46bd      	mov	sp, r7
 800f83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f840:	4770      	bx	lr

0800f842 <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPreTestAction(UtestShell& test, TestResult& result)
{
 800f842:	b580      	push	{r7, lr}
 800f844:	b084      	sub	sp, #16
 800f846:	af00      	add	r7, sp, #0
 800f848:	60f8      	str	r0, [r7, #12]
 800f84a:	60b9      	str	r1, [r7, #8]
 800f84c:	607a      	str	r2, [r7, #4]
    if (enabled_) preTestAction(test, result);
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	7c1b      	ldrb	r3, [r3, #16]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d007      	beq.n	800f866 <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult+0x24>
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	3308      	adds	r3, #8
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	687a      	ldr	r2, [r7, #4]
 800f860:	68b9      	ldr	r1, [r7, #8]
 800f862:	68f8      	ldr	r0, [r7, #12]
 800f864:	4798      	blx	r3
    next_->runAllPreTestAction(test, result);
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	6858      	ldr	r0, [r3, #4]
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	685b      	ldr	r3, [r3, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	3314      	adds	r3, #20
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	687a      	ldr	r2, [r7, #4]
 800f876:	68b9      	ldr	r1, [r7, #8]
 800f878:	4798      	blx	r3
}
 800f87a:	bf00      	nop
 800f87c:	3710      	adds	r7, #16
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}

0800f882 <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPostTestAction(UtestShell& test, TestResult& result)
{
 800f882:	b580      	push	{r7, lr}
 800f884:	b084      	sub	sp, #16
 800f886:	af00      	add	r7, sp, #0
 800f888:	60f8      	str	r0, [r7, #12]
 800f88a:	60b9      	str	r1, [r7, #8]
 800f88c:	607a      	str	r2, [r7, #4]
    next_ ->runAllPostTestAction(test, result);
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	6858      	ldr	r0, [r3, #4]
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	685b      	ldr	r3, [r3, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	3318      	adds	r3, #24
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	687a      	ldr	r2, [r7, #4]
 800f89e:	68b9      	ldr	r1, [r7, #8]
 800f8a0:	4798      	blx	r3
    if (enabled_) postTestAction(test, result);
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	7c1b      	ldrb	r3, [r3, #16]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d007      	beq.n	800f8ba <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult+0x38>
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	330c      	adds	r3, #12
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	687a      	ldr	r2, [r7, #4]
 800f8b4:	68b9      	ldr	r1, [r7, #8]
 800f8b6:	68f8      	ldr	r0, [r7, #12]
 800f8b8:	4798      	blx	r3
}
 800f8ba:	bf00      	nop
 800f8bc:	3710      	adds	r7, #16
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	bd80      	pop	{r7, pc}

0800f8c2 <_ZN10TestPlugin17parseAllArgumentsEiPPci>:

bool TestPlugin::parseAllArguments(int ac, char** av, int index)
{
 800f8c2:	b590      	push	{r4, r7, lr}
 800f8c4:	b085      	sub	sp, #20
 800f8c6:	af00      	add	r7, sp, #0
 800f8c8:	60f8      	str	r0, [r7, #12]
 800f8ca:	60b9      	str	r1, [r7, #8]
 800f8cc:	607a      	str	r2, [r7, #4]
 800f8ce:	603b      	str	r3, [r7, #0]
    return parseAllArguments(ac, const_cast<const char *const *> (av), index);
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	331c      	adds	r3, #28
 800f8d6:	681c      	ldr	r4, [r3, #0]
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	687a      	ldr	r2, [r7, #4]
 800f8dc:	68b9      	ldr	r1, [r7, #8]
 800f8de:	68f8      	ldr	r0, [r7, #12]
 800f8e0:	47a0      	blx	r4
 800f8e2:	4603      	mov	r3, r0
}
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	3714      	adds	r7, #20
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	bd90      	pop	{r4, r7, pc}

0800f8ec <_ZN10TestPlugin17parseAllArgumentsEiPKPKci>:

bool TestPlugin::parseAllArguments(int ac, const char *const *av, int index)
{
 800f8ec:	b590      	push	{r4, r7, lr}
 800f8ee:	b085      	sub	sp, #20
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	60f8      	str	r0, [r7, #12]
 800f8f4:	60b9      	str	r1, [r7, #8]
 800f8f6:	607a      	str	r2, [r7, #4]
 800f8f8:	603b      	str	r3, [r7, #0]
    if (parseArguments(ac, av, index)) return true;
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	3310      	adds	r3, #16
 800f900:	681c      	ldr	r4, [r3, #0]
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	687a      	ldr	r2, [r7, #4]
 800f906:	68b9      	ldr	r1, [r7, #8]
 800f908:	68f8      	ldr	r0, [r7, #12]
 800f90a:	47a0      	blx	r4
 800f90c:	4603      	mov	r3, r0
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d001      	beq.n	800f916 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x2a>
 800f912:	2301      	movs	r3, #1
 800f914:	e011      	b.n	800f93a <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    if (next_) return next_->parseAllArguments(ac, av, index);
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	685b      	ldr	r3, [r3, #4]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d00c      	beq.n	800f938 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4c>
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	6858      	ldr	r0, [r3, #4]
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	685b      	ldr	r3, [r3, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	331c      	adds	r3, #28
 800f92a:	681c      	ldr	r4, [r3, #0]
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	687a      	ldr	r2, [r7, #4]
 800f930:	68b9      	ldr	r1, [r7, #8]
 800f932:	47a0      	blx	r4
 800f934:	4603      	mov	r3, r0
 800f936:	e000      	b.n	800f93a <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    return false;
 800f938:	2300      	movs	r3, #0
}
 800f93a:	4618      	mov	r0, r3
 800f93c:	3714      	adds	r7, #20
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd90      	pop	{r4, r7, pc}

0800f942 <_ZN10TestPlugin7getNameEv>:

const SimpleString& TestPlugin::getName()
{
 800f942:	b480      	push	{r7}
 800f944:	b083      	sub	sp, #12
 800f946:	af00      	add	r7, sp, #0
 800f948:	6078      	str	r0, [r7, #4]
    return name_;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	3308      	adds	r3, #8
}
 800f94e:	4618      	mov	r0, r3
 800f950:	370c      	adds	r7, #12
 800f952:	46bd      	mov	sp, r7
 800f954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f958:	4770      	bx	lr

0800f95a <_ZN10TestPlugin15getPluginByNameERK12SimpleString>:

TestPlugin* TestPlugin::getPluginByName(const SimpleString& name)
{
 800f95a:	b580      	push	{r7, lr}
 800f95c:	b082      	sub	sp, #8
 800f95e:	af00      	add	r7, sp, #0
 800f960:	6078      	str	r0, [r7, #4]
 800f962:	6039      	str	r1, [r7, #0]
    if (name == name_) return this;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	3308      	adds	r3, #8
 800f968:	4619      	mov	r1, r3
 800f96a:	6838      	ldr	r0, [r7, #0]
 800f96c:	f7fb fdc3 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 800f970:	4603      	mov	r3, r0
 800f972:	2b00      	cmp	r3, #0
 800f974:	d001      	beq.n	800f97a <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x20>
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	e00d      	b.n	800f996 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    if (next_) return next_->getPluginByName(name);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	685b      	ldr	r3, [r3, #4]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d007      	beq.n	800f992 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x38>
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	685b      	ldr	r3, [r3, #4]
 800f986:	6839      	ldr	r1, [r7, #0]
 800f988:	4618      	mov	r0, r3
 800f98a:	f7ff ffe6 	bl	800f95a <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 800f98e:	4603      	mov	r3, r0
 800f990:	e001      	b.n	800f996 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    return (next_);
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	685b      	ldr	r3, [r3, #4]
}
 800f996:	4618      	mov	r0, r3
 800f998:	3708      	adds	r7, #8
 800f99a:	46bd      	mov	sp, r7
 800f99c:	bd80      	pop	{r7, pc}

0800f99e <_ZN10TestPlugin7getNextEv>:

TestPlugin* TestPlugin::getNext()
{
 800f99e:	b480      	push	{r7}
 800f9a0:	b083      	sub	sp, #12
 800f9a2:	af00      	add	r7, sp, #0
 800f9a4:	6078      	str	r0, [r7, #4]
    return next_;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	685b      	ldr	r3, [r3, #4]
}
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	370c      	adds	r7, #12
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b4:	4770      	bx	lr

0800f9b6 <_ZN10TestPlugin18removePluginByNameERK12SimpleString>:
TestPlugin* TestPlugin::removePluginByName(const SimpleString& name)
{
 800f9b6:	b580      	push	{r7, lr}
 800f9b8:	b084      	sub	sp, #16
 800f9ba:	af00      	add	r7, sp, #0
 800f9bc:	6078      	str	r0, [r7, #4]
 800f9be:	6039      	str	r1, [r7, #0]
    TestPlugin* removed = NULLPTR;
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	60fb      	str	r3, [r7, #12]
    if (next_ && next_->getName() == name) {
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	685b      	ldr	r3, [r3, #4]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d00e      	beq.n	800f9ea <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	685b      	ldr	r3, [r3, #4]
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f7ff ffb6 	bl	800f942 <_ZN10TestPlugin7getNameEv>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	6839      	ldr	r1, [r7, #0]
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f7fb fd8b 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d001      	beq.n	800f9ea <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 800f9e6:	2301      	movs	r3, #1
 800f9e8:	e000      	b.n	800f9ec <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x36>
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d007      	beq.n	800fa00 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x4a>
        removed = next_;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	685b      	ldr	r3, [r3, #4]
 800f9f4:	60fb      	str	r3, [r7, #12]
        next_ = next_->next_;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	685b      	ldr	r3, [r3, #4]
 800f9fa:	685a      	ldr	r2, [r3, #4]
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	605a      	str	r2, [r3, #4]
    }
    return removed;
 800fa00:	68fb      	ldr	r3, [r7, #12]
}
 800fa02:	4618      	mov	r0, r3
 800fa04:	3710      	adds	r7, #16
 800fa06:	46bd      	mov	sp, r7
 800fa08:	bd80      	pop	{r7, pc}

0800fa0a <_ZN10TestPlugin7disableEv>:

void TestPlugin::disable()
{
 800fa0a:	b480      	push	{r7}
 800fa0c:	b083      	sub	sp, #12
 800fa0e:	af00      	add	r7, sp, #0
 800fa10:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	2200      	movs	r2, #0
 800fa16:	741a      	strb	r2, [r3, #16]
}
 800fa18:	bf00      	nop
 800fa1a:	370c      	adds	r7, #12
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa22:	4770      	bx	lr

0800fa24 <_ZN10TestPlugin6enableEv>:

void TestPlugin::enable()
{
 800fa24:	b480      	push	{r7}
 800fa26:	b083      	sub	sp, #12
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	2201      	movs	r2, #1
 800fa30:	741a      	strb	r2, [r3, #16]
}
 800fa32:	bf00      	nop
 800fa34:	370c      	adds	r7, #12
 800fa36:	46bd      	mov	sp, r7
 800fa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3c:	4770      	bx	lr

0800fa3e <_ZN10TestPlugin9isEnabledEv>:

bool TestPlugin::isEnabled()
{
 800fa3e:	b480      	push	{r7}
 800fa40:	b083      	sub	sp, #12
 800fa42:	af00      	add	r7, sp, #0
 800fa44:	6078      	str	r0, [r7, #4]
    return enabled_;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	7c1b      	ldrb	r3, [r3, #16]
}
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	370c      	adds	r7, #12
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa54:	4770      	bx	lr
	...

0800fa58 <_ZN16SetPointerPluginC1ERK12SimpleString>:
//////// SetPlugin

static int pointerTableIndex;
static cpputest_pair setlist[SetPointerPlugin::MAX_SET];

SetPointerPlugin::SetPointerPlugin(const SimpleString& name) :
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b082      	sub	sp, #8
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
 800fa60:	6039      	str	r1, [r7, #0]
    TestPlugin(name)
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	6839      	ldr	r1, [r7, #0]
 800fa66:	4618      	mov	r0, r3
 800fa68:	f7ff fe7c 	bl	800f764 <_ZN10TestPluginC1ERK12SimpleString>
 800fa6c:	4a05      	ldr	r2, [pc, #20]	; (800fa84 <_ZN16SetPointerPluginC1ERK12SimpleString+0x2c>)
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	601a      	str	r2, [r3, #0]
{
    pointerTableIndex = 0;
 800fa72:	4b05      	ldr	r3, [pc, #20]	; (800fa88 <_ZN16SetPointerPluginC1ERK12SimpleString+0x30>)
 800fa74:	2200      	movs	r2, #0
 800fa76:	601a      	str	r2, [r3, #0]
}
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	3708      	adds	r7, #8
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd80      	pop	{r7, pc}
 800fa82:	bf00      	nop
 800fa84:	08025c8c 	.word	0x08025c8c
 800fa88:	200007ac 	.word	0x200007ac

0800fa8c <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult>:
    setlist[pointerTableIndex].orig = function;
    pointerTableIndex++;
}

void SetPointerPlugin::postTestAction(UtestShell& /*test*/, TestResult& /*result*/)
{
 800fa8c:	b480      	push	{r7}
 800fa8e:	b087      	sub	sp, #28
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	60f8      	str	r0, [r7, #12]
 800fa94:	60b9      	str	r1, [r7, #8]
 800fa96:	607a      	str	r2, [r7, #4]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 800fa98:	4b0e      	ldr	r3, [pc, #56]	; (800fad4 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	3b01      	subs	r3, #1
 800fa9e:	617b      	str	r3, [r7, #20]
 800faa0:	697b      	ldr	r3, [r7, #20]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	db0d      	blt.n	800fac2 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x36>
        *((void**) setlist[i].orig) = setlist[i].orig_value;
 800faa6:	4a0c      	ldr	r2, [pc, #48]	; (800fad8 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 800faa8:	697b      	ldr	r3, [r7, #20]
 800faaa:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800faae:	490a      	ldr	r1, [pc, #40]	; (800fad8 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 800fab0:	697b      	ldr	r3, [r7, #20]
 800fab2:	00db      	lsls	r3, r3, #3
 800fab4:	440b      	add	r3, r1
 800fab6:	685b      	ldr	r3, [r3, #4]
 800fab8:	6013      	str	r3, [r2, #0]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 800faba:	697b      	ldr	r3, [r7, #20]
 800fabc:	3b01      	subs	r3, #1
 800fabe:	617b      	str	r3, [r7, #20]
 800fac0:	e7ee      	b.n	800faa0 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x14>
    pointerTableIndex = 0;
 800fac2:	4b04      	ldr	r3, [pc, #16]	; (800fad4 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 800fac4:	2200      	movs	r2, #0
 800fac6:	601a      	str	r2, [r3, #0]
}
 800fac8:	bf00      	nop
 800faca:	371c      	adds	r7, #28
 800facc:	46bd      	mov	sp, r7
 800face:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad2:	4770      	bx	lr
 800fad4:	200007ac 	.word	0x200007ac
 800fad8:	200007b0 	.word	0x200007b0

0800fadc <_ZN14NullTestPluginC1Ev>:

//////// NullPlugin

NullTestPlugin::NullTestPlugin() :
 800fadc:	b580      	push	{r7, lr}
 800fade:	b082      	sub	sp, #8
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
    TestPlugin(NULLPTR)
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2100      	movs	r1, #0
 800fae8:	4618      	mov	r0, r3
 800faea:	f7ff fe59 	bl	800f7a0 <_ZN10TestPluginC1EPS_>
 800faee:	4a04      	ldr	r2, [pc, #16]	; (800fb00 <_ZN14NullTestPluginC1Ev+0x24>)
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	601a      	str	r2, [r3, #0]
{
}
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	4618      	mov	r0, r3
 800faf8:	3708      	adds	r7, #8
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd80      	pop	{r7, pc}
 800fafe:	bf00      	nop
 800fb00:	08025c48 	.word	0x08025c48

0800fb04 <__tcf_0>:

NullTestPlugin* NullTestPlugin::instance()
{
    static NullTestPlugin _instance;
 800fb04:	b580      	push	{r7, lr}
 800fb06:	af00      	add	r7, sp, #0
 800fb08:	4801      	ldr	r0, [pc, #4]	; (800fb10 <__tcf_0+0xc>)
 800fb0a:	f000 f849 	bl	800fba0 <_ZN14NullTestPluginD1Ev>
 800fb0e:	bd80      	pop	{r7, pc}
 800fb10:	200008b0 	.word	0x200008b0

0800fb14 <_ZN14NullTestPlugin8instanceEv>:
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	af00      	add	r7, sp, #0
    static NullTestPlugin _instance;
 800fb18:	4b12      	ldr	r3, [pc, #72]	; (800fb64 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800fb1a:	781b      	ldrb	r3, [r3, #0]
 800fb1c:	f3bf 8f5b 	dmb	ish
 800fb20:	b2db      	uxtb	r3, r3
 800fb22:	f003 0301 	and.w	r3, r3, #1
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	bf0c      	ite	eq
 800fb2a:	2301      	moveq	r3, #1
 800fb2c:	2300      	movne	r3, #0
 800fb2e:	b2db      	uxtb	r3, r3
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d013      	beq.n	800fb5c <_ZN14NullTestPlugin8instanceEv+0x48>
 800fb34:	480b      	ldr	r0, [pc, #44]	; (800fb64 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800fb36:	f00d ffdb 	bl	801daf0 <__cxa_guard_acquire>
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	bf14      	ite	ne
 800fb40:	2301      	movne	r3, #1
 800fb42:	2300      	moveq	r3, #0
 800fb44:	b2db      	uxtb	r3, r3
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d008      	beq.n	800fb5c <_ZN14NullTestPlugin8instanceEv+0x48>
 800fb4a:	4807      	ldr	r0, [pc, #28]	; (800fb68 <_ZN14NullTestPlugin8instanceEv+0x54>)
 800fb4c:	f7ff ffc6 	bl	800fadc <_ZN14NullTestPluginC1Ev>
 800fb50:	4804      	ldr	r0, [pc, #16]	; (800fb64 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800fb52:	f00d ffd9 	bl	801db08 <__cxa_guard_release>
 800fb56:	4805      	ldr	r0, [pc, #20]	; (800fb6c <_ZN14NullTestPlugin8instanceEv+0x58>)
 800fb58:	f00d fffd 	bl	801db56 <atexit>
    return &_instance;
 800fb5c:	4b02      	ldr	r3, [pc, #8]	; (800fb68 <_ZN14NullTestPlugin8instanceEv+0x54>)
}
 800fb5e:	4618      	mov	r0, r3
 800fb60:	bd80      	pop	{r7, pc}
 800fb62:	bf00      	nop
 800fb64:	200008c4 	.word	0x200008c4
 800fb68:	200008b0 	.word	0x200008b0
 800fb6c:	0800fb05 	.word	0x0800fb05

0800fb70 <_ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
{
 800fb70:	b480      	push	{r7}
 800fb72:	b085      	sub	sp, #20
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	60f8      	str	r0, [r7, #12]
 800fb78:	60b9      	str	r1, [r7, #8]
 800fb7a:	607a      	str	r2, [r7, #4]
}
 800fb7c:	bf00      	nop
 800fb7e:	3714      	adds	r7, #20
 800fb80:	46bd      	mov	sp, r7
 800fb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb86:	4770      	bx	lr

0800fb88 <_ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
{
 800fb88:	b480      	push	{r7}
 800fb8a:	b085      	sub	sp, #20
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	60f8      	str	r0, [r7, #12]
 800fb90:	60b9      	str	r1, [r7, #8]
 800fb92:	607a      	str	r2, [r7, #4]
}
 800fb94:	bf00      	nop
 800fb96:	3714      	adds	r7, #20
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9e:	4770      	bx	lr

0800fba0 <_ZN14NullTestPluginD1Ev>:

#define UT_PTR_SET(a, b) do { CppUTestStore( (void**)&a ); a = b; } while(0)

///////////// Null Plugin

class NullTestPlugin: public TestPlugin
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b082      	sub	sp, #8
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
 800fba8:	4a05      	ldr	r2, [pc, #20]	; (800fbc0 <_ZN14NullTestPluginD1Ev+0x20>)
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	601a      	str	r2, [r3, #0]
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f7ff fe13 	bl	800f7dc <_ZN10TestPluginD1Ev>
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	4618      	mov	r0, r3
 800fbba:	3708      	adds	r7, #8
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	bd80      	pop	{r7, pc}
 800fbc0:	08025c48 	.word	0x08025c48

0800fbc4 <_ZN14NullTestPluginD0Ev>:
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b082      	sub	sp, #8
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
 800fbcc:	6878      	ldr	r0, [r7, #4]
 800fbce:	f7ff ffe7 	bl	800fba0 <_ZN14NullTestPluginD1Ev>
 800fbd2:	2114      	movs	r1, #20
 800fbd4:	6878      	ldr	r0, [r7, #4]
 800fbd6:	f7f8 fd1b 	bl	8008610 <_ZdlPvj>
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	4618      	mov	r0, r3
 800fbde:	3708      	adds	r7, #8
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bd80      	pop	{r7, pc}

0800fbe4 <_ZN12TestRegistryC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestRegistry.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestRegistry::TestRegistry() :
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b082      	sub	sp, #8
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
    tests_(NULLPTR), nameFilters_(NULLPTR), groupFilters_(NULLPTR), firstPlugin_(NullTestPlugin::instance()), runInSeperateProcess_(false), currentRepetition_(0), runIgnored_(false)
 800fbec:	4a0f      	ldr	r2, [pc, #60]	; (800fc2c <_ZN12TestRegistryC1Ev+0x48>)
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	601a      	str	r2, [r3, #0]
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	605a      	str	r2, [r3, #4]
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	609a      	str	r2, [r3, #8]
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	2200      	movs	r2, #0
 800fc02:	60da      	str	r2, [r3, #12]
 800fc04:	f7ff ff86 	bl	800fb14 <_ZN14NullTestPlugin8instanceEv>
 800fc08:	4602      	mov	r2, r0
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	611a      	str	r2, [r3, #16]
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	2200      	movs	r2, #0
 800fc12:	751a      	strb	r2, [r3, #20]
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2200      	movs	r2, #0
 800fc18:	619a      	str	r2, [r3, #24]
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	771a      	strb	r2, [r3, #28]
{
}
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	4618      	mov	r0, r3
 800fc24:	3708      	adds	r7, #8
 800fc26:	46bd      	mov	sp, r7
 800fc28:	bd80      	pop	{r7, pc}
 800fc2a:	bf00      	nop
 800fc2c:	08025d14 	.word	0x08025d14

0800fc30 <_ZN12TestRegistryD1Ev>:

TestRegistry::~TestRegistry()
 800fc30:	b480      	push	{r7}
 800fc32:	b083      	sub	sp, #12
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
 800fc38:	4a04      	ldr	r2, [pc, #16]	; (800fc4c <_ZN12TestRegistryD1Ev+0x1c>)
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	601a      	str	r2, [r3, #0]
{
}
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	4618      	mov	r0, r3
 800fc42:	370c      	adds	r7, #12
 800fc44:	46bd      	mov	sp, r7
 800fc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4a:	4770      	bx	lr
 800fc4c:	08025d14 	.word	0x08025d14

0800fc50 <_ZN12TestRegistryD0Ev>:
TestRegistry::~TestRegistry()
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b082      	sub	sp, #8
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
}
 800fc58:	6878      	ldr	r0, [r7, #4]
 800fc5a:	f7ff ffe9 	bl	800fc30 <_ZN12TestRegistryD1Ev>
 800fc5e:	2120      	movs	r1, #32
 800fc60:	6878      	ldr	r0, [r7, #4]
 800fc62:	f7f8 fcd5 	bl	8008610 <_ZdlPvj>
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	4618      	mov	r0, r3
 800fc6a:	3708      	adds	r7, #8
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bd80      	pop	{r7, pc}

0800fc70 <_ZN12TestRegistry7addTestEP10UtestShell>:

void TestRegistry::addTest(UtestShell *test)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b082      	sub	sp, #8
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
 800fc78:	6039      	str	r1, [r7, #0]
    tests_ = test->addTest(tests_);
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	3308      	adds	r3, #8
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	687a      	ldr	r2, [r7, #4]
 800fc84:	6852      	ldr	r2, [r2, #4]
 800fc86:	4611      	mov	r1, r2
 800fc88:	6838      	ldr	r0, [r7, #0]
 800fc8a:	4798      	blx	r3
 800fc8c:	4602      	mov	r2, r0
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	605a      	str	r2, [r3, #4]
}
 800fc92:	bf00      	nop
 800fc94:	3708      	adds	r7, #8
 800fc96:	46bd      	mov	sp, r7
 800fc98:	bd80      	pop	{r7, pc}

0800fc9a <_ZN12TestRegistry11runAllTestsER10TestResult>:

void TestRegistry::runAllTests(TestResult& result)
{
 800fc9a:	b580      	push	{r7, lr}
 800fc9c:	b084      	sub	sp, #16
 800fc9e:	af00      	add	r7, sp, #0
 800fca0:	6078      	str	r0, [r7, #4]
 800fca2:	6039      	str	r1, [r7, #0]
    bool groupStart = true;
 800fca4:	2301      	movs	r3, #1
 800fca6:	73fb      	strb	r3, [r7, #15]

    result.testsStarted();
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	3308      	adds	r3, #8
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	6838      	ldr	r0, [r7, #0]
 800fcb2:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	685b      	ldr	r3, [r3, #4]
 800fcb8:	60bb      	str	r3, [r7, #8]
 800fcba:	68bb      	ldr	r3, [r7, #8]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d05c      	beq.n	800fd7a <_ZN12TestRegistry11runAllTestsER10TestResult+0xe0>
        if (runInSeperateProcess_) test->setRunInSeperateProcess();
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	7d1b      	ldrb	r3, [r3, #20]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d005      	beq.n	800fcd4 <_ZN12TestRegistry11runAllTestsER10TestResult+0x3a>
 800fcc8:	68bb      	ldr	r3, [r7, #8]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	3380      	adds	r3, #128	; 0x80
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	68b8      	ldr	r0, [r7, #8]
 800fcd2:	4798      	blx	r3
        if (runIgnored_) test->setRunIgnored();
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	7f1b      	ldrb	r3, [r3, #28]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d005      	beq.n	800fce8 <_ZN12TestRegistry11runAllTestsER10TestResult+0x4e>
 800fcdc:	68bb      	ldr	r3, [r7, #8]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	3384      	adds	r3, #132	; 0x84
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	68b8      	ldr	r0, [r7, #8]
 800fce6:	4798      	blx	r3

        if (groupStart) {
 800fce8:	7bfb      	ldrb	r3, [r7, #15]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d008      	beq.n	800fd00 <_ZN12TestRegistry11runAllTestsER10TestResult+0x66>
            result.currentGroupStarted(test);
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	3310      	adds	r3, #16
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	68b9      	ldr	r1, [r7, #8]
 800fcf8:	6838      	ldr	r0, [r7, #0]
 800fcfa:	4798      	blx	r3
            groupStart = false;
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	73fb      	strb	r3, [r7, #15]
        }

        result.countTest();
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	3320      	adds	r3, #32
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	6838      	ldr	r0, [r7, #0]
 800fd0a:	4798      	blx	r3
        if (testShouldRun(test, result)) {
 800fd0c:	683a      	ldr	r2, [r7, #0]
 800fd0e:	68b9      	ldr	r1, [r7, #8]
 800fd10:	6878      	ldr	r0, [r7, #4]
 800fd12:	f000 fb79 	bl	8010408 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 800fd16:	4603      	mov	r3, r0
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d016      	beq.n	800fd4a <_ZN12TestRegistry11runAllTestsER10TestResult+0xb0>
            result.currentTestStarted(test);
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	3318      	adds	r3, #24
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	68b9      	ldr	r1, [r7, #8]
 800fd26:	6838      	ldr	r0, [r7, #0]
 800fd28:	4798      	blx	r3
            test->runOneTest(firstPlugin_, result);
 800fd2a:	68bb      	ldr	r3, [r7, #8]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	3390      	adds	r3, #144	; 0x90
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	687a      	ldr	r2, [r7, #4]
 800fd34:	6911      	ldr	r1, [r2, #16]
 800fd36:	683a      	ldr	r2, [r7, #0]
 800fd38:	68b8      	ldr	r0, [r7, #8]
 800fd3a:	4798      	blx	r3
            result.currentTestEnded(test);
 800fd3c:	683b      	ldr	r3, [r7, #0]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	331c      	adds	r3, #28
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	68b9      	ldr	r1, [r7, #8]
 800fd46:	6838      	ldr	r0, [r7, #0]
 800fd48:	4798      	blx	r3
        }

        if (endOfGroup(test)) {
 800fd4a:	68b9      	ldr	r1, [r7, #8]
 800fd4c:	6878      	ldr	r0, [r7, #4]
 800fd4e:	f000 fa5b 	bl	8010208 <_ZN12TestRegistry10endOfGroupEP10UtestShell>
 800fd52:	4603      	mov	r3, r0
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d008      	beq.n	800fd6a <_ZN12TestRegistry11runAllTestsER10TestResult+0xd0>
            groupStart = true;
 800fd58:	2301      	movs	r3, #1
 800fd5a:	73fb      	strb	r3, [r7, #15]
            result.currentGroupEnded(test);
 800fd5c:	683b      	ldr	r3, [r7, #0]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	3314      	adds	r3, #20
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	68b9      	ldr	r1, [r7, #8]
 800fd66:	6838      	ldr	r0, [r7, #0]
 800fd68:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	330c      	adds	r3, #12
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	68b8      	ldr	r0, [r7, #8]
 800fd74:	4798      	blx	r3
 800fd76:	60b8      	str	r0, [r7, #8]
 800fd78:	e79f      	b.n	800fcba <_ZN12TestRegistry11runAllTestsER10TestResult+0x20>
        }
    }
    result.testsEnded();
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	330c      	adds	r3, #12
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	6838      	ldr	r0, [r7, #0]
 800fd84:	4798      	blx	r3
    currentRepetition_++;
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	699b      	ldr	r3, [r3, #24]
 800fd8a:	1c5a      	adds	r2, r3, #1
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	619a      	str	r2, [r3, #24]
}
 800fd90:	bf00      	nop
 800fd92:	3710      	adds	r7, #16
 800fd94:	46bd      	mov	sp, r7
 800fd96:	bd80      	pop	{r7, pc}

0800fd98 <_ZN12TestRegistry18listTestGroupNamesER10TestResult>:

void TestRegistry::listTestGroupNames(TestResult& result)
{
 800fd98:	b590      	push	{r4, r7, lr}
 800fd9a:	b08f      	sub	sp, #60	; 0x3c
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
 800fda0:	6039      	str	r1, [r7, #0]
    SimpleString groupList;
 800fda2:	f107 0314 	add.w	r3, r7, #20
 800fda6:	4953      	ldr	r1, [pc, #332]	; (800fef4 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800fda8:	4618      	mov	r0, r3
 800fdaa:	f7fa ffe0 	bl	800ad6e <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	685b      	ldr	r3, [r3, #4]
 800fdb2:	637b      	str	r3, [r7, #52]	; 0x34
 800fdb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d04d      	beq.n	800fe56 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xbe>
        SimpleString gname;
 800fdba:	f107 030c 	add.w	r3, r7, #12
 800fdbe:	494d      	ldr	r1, [pc, #308]	; (800fef4 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	f7fa ffd4 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
        gname += "#";
 800fdc6:	f107 030c 	add.w	r3, r7, #12
 800fdca:	494b      	ldr	r1, [pc, #300]	; (800fef8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800fdcc:	4618      	mov	r0, r3
 800fdce:	f7fb fc15 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
        gname += test->getGroup();
 800fdd2:	f107 031c 	add.w	r3, r7, #28
 800fdd6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fdd8:	4618      	mov	r0, r3
 800fdda:	f001 f9d2 	bl	8011182 <_ZNK10UtestShell8getGroupEv>
 800fdde:	f107 021c 	add.w	r2, r7, #28
 800fde2:	f107 030c 	add.w	r3, r7, #12
 800fde6:	4611      	mov	r1, r2
 800fde8:	4618      	mov	r0, r3
 800fdea:	f7fb fbf5 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 800fdee:	f107 031c 	add.w	r3, r7, #28
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	f7fb fb73 	bl	800b4de <_ZN12SimpleStringD1Ev>
        gname += "#";
 800fdf8:	f107 030c 	add.w	r3, r7, #12
 800fdfc:	493e      	ldr	r1, [pc, #248]	; (800fef8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800fdfe:	4618      	mov	r0, r3
 800fe00:	f7fb fbfc 	bl	800b5fc <_ZN12SimpleStringpLEPKc>

        if (!groupList.contains(gname)) {
 800fe04:	f107 020c 	add.w	r2, r7, #12
 800fe08:	f107 0314 	add.w	r3, r7, #20
 800fe0c:	4611      	mov	r1, r2
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f7fb f82b 	bl	800ae6a <_ZNK12SimpleString8containsERKS_>
 800fe14:	4603      	mov	r3, r0
 800fe16:	f083 0301 	eor.w	r3, r3, #1
 800fe1a:	b2db      	uxtb	r3, r3
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d00d      	beq.n	800fe3c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xa4>
            groupList += gname;
 800fe20:	f107 020c 	add.w	r2, r7, #12
 800fe24:	f107 0314 	add.w	r3, r7, #20
 800fe28:	4611      	mov	r1, r2
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	f7fb fbd4 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
            groupList += " ";
 800fe30:	f107 0314 	add.w	r3, r7, #20
 800fe34:	4931      	ldr	r1, [pc, #196]	; (800fefc <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 800fe36:	4618      	mov	r0, r3
 800fe38:	f7fb fbe0 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
        SimpleString gname;
 800fe3c:	f107 030c 	add.w	r3, r7, #12
 800fe40:	4618      	mov	r0, r3
 800fe42:	f7fb fb4c 	bl	800b4de <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800fe46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	330c      	adds	r3, #12
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fe50:	4798      	blx	r3
 800fe52:	6378      	str	r0, [r7, #52]	; 0x34
 800fe54:	e7ae      	b.n	800fdb4 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x1c>
        }
    }

    groupList.replace("#", "");
 800fe56:	f107 0314 	add.w	r3, r7, #20
 800fe5a:	4a26      	ldr	r2, [pc, #152]	; (800fef4 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800fe5c:	4926      	ldr	r1, [pc, #152]	; (800fef8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800fe5e:	4618      	mov	r0, r3
 800fe60:	f7fb f99a 	bl	800b198 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupList.endsWith(" "))
 800fe64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe68:	4924      	ldr	r1, [pc, #144]	; (800fefc <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7fa ff7f 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 800fe70:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800fe74:	f107 0314 	add.w	r3, r7, #20
 800fe78:	4611      	mov	r1, r2
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	f7fb f874 	bl	800af68 <_ZNK12SimpleString8endsWithERKS_>
 800fe80:	4603      	mov	r3, r0
 800fe82:	461c      	mov	r4, r3
 800fe84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe88:	4618      	mov	r0, r3
 800fe8a:	f7fb fb28 	bl	800b4de <_ZN12SimpleStringD1Ev>
 800fe8e:	2c00      	cmp	r4, #0
 800fe90:	d01a      	beq.n	800fec8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x130>
        groupList = groupList.subString(0, groupList.size() - 1);
 800fe92:	f107 0314 	add.w	r3, r7, #20
 800fe96:	4618      	mov	r0, r3
 800fe98:	f7fb fb00 	bl	800b49c <_ZNK12SimpleString4sizeEv>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	3b01      	subs	r3, #1
 800fea0:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800fea4:	f107 0114 	add.w	r1, r7, #20
 800fea8:	2200      	movs	r2, #0
 800feaa:	f7fb fc21 	bl	800b6f0 <_ZNK12SimpleString9subStringEjj>
 800feae:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800feb2:	f107 0314 	add.w	r3, r7, #20
 800feb6:	4611      	mov	r1, r2
 800feb8:	4618      	mov	r0, r3
 800feba:	f7fa ffc4 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 800febe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fec2:	4618      	mov	r0, r3
 800fec4:	f7fb fb0b 	bl	800b4de <_ZN12SimpleStringD1Ev>
    result.print(groupList.asCharString());
 800fec8:	683b      	ldr	r3, [r7, #0]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	3338      	adds	r3, #56	; 0x38
 800fece:	681c      	ldr	r4, [r3, #0]
 800fed0:	f107 0314 	add.w	r3, r7, #20
 800fed4:	4618      	mov	r0, r3
 800fed6:	f7fb fad5 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 800feda:	4603      	mov	r3, r0
 800fedc:	4619      	mov	r1, r3
 800fede:	6838      	ldr	r0, [r7, #0]
 800fee0:	47a0      	blx	r4
    SimpleString groupList;
 800fee2:	f107 0314 	add.w	r3, r7, #20
 800fee6:	4618      	mov	r0, r3
 800fee8:	f7fb faf9 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 800feec:	bf00      	nop
 800feee:	373c      	adds	r7, #60	; 0x3c
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd90      	pop	{r4, r7, pc}
 800fef4:	08022c4c 	.word	0x08022c4c
 800fef8:	08022c50 	.word	0x08022c50
 800fefc:	08022c54 	.word	0x08022c54

0800ff00 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult>:

void TestRegistry::listTestGroupAndCaseNames(TestResult& result)
{
 800ff00:	b590      	push	{r4, r7, lr}
 800ff02:	b091      	sub	sp, #68	; 0x44
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
 800ff08:	6039      	str	r1, [r7, #0]
    SimpleString groupAndNameList;
 800ff0a:	f107 0314 	add.w	r3, r7, #20
 800ff0e:	4964      	ldr	r1, [pc, #400]	; (80100a0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800ff10:	4618      	mov	r0, r3
 800ff12:	f7fa ff2c 	bl	800ad6e <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	685b      	ldr	r3, [r3, #4]
 800ff1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ff1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d06e      	beq.n	8010000 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x100>
        if (testShouldRun(test, result)) {
 800ff22:	683a      	ldr	r2, [r7, #0]
 800ff24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ff26:	6878      	ldr	r0, [r7, #4]
 800ff28:	f000 fa6e 	bl	8010408 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d05e      	beq.n	800fff0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xf0>
            SimpleString groupAndName;
 800ff32:	f107 030c 	add.w	r3, r7, #12
 800ff36:	495a      	ldr	r1, [pc, #360]	; (80100a0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800ff38:	4618      	mov	r0, r3
 800ff3a:	f7fa ff18 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
            groupAndName += "#";
 800ff3e:	f107 030c 	add.w	r3, r7, #12
 800ff42:	4958      	ldr	r1, [pc, #352]	; (80100a4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800ff44:	4618      	mov	r0, r3
 800ff46:	f7fb fb59 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getGroup();
 800ff4a:	f107 031c 	add.w	r3, r7, #28
 800ff4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ff50:	4618      	mov	r0, r3
 800ff52:	f001 f916 	bl	8011182 <_ZNK10UtestShell8getGroupEv>
 800ff56:	f107 021c 	add.w	r2, r7, #28
 800ff5a:	f107 030c 	add.w	r3, r7, #12
 800ff5e:	4611      	mov	r1, r2
 800ff60:	4618      	mov	r0, r3
 800ff62:	f7fb fb39 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 800ff66:	f107 031c 	add.w	r3, r7, #28
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f7fb fab7 	bl	800b4de <_ZN12SimpleStringD1Ev>
            groupAndName += ".";
 800ff70:	f107 030c 	add.w	r3, r7, #12
 800ff74:	494c      	ldr	r1, [pc, #304]	; (80100a8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a8>)
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7fb fb40 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getName();
 800ff7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ff82:	4618      	mov	r0, r3
 800ff84:	f001 f8ee 	bl	8011164 <_ZNK10UtestShell7getNameEv>
 800ff88:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ff8c:	f107 030c 	add.w	r3, r7, #12
 800ff90:	4611      	mov	r1, r2
 800ff92:	4618      	mov	r0, r3
 800ff94:	f7fb fb20 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 800ff98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	f7fb fa9e 	bl	800b4de <_ZN12SimpleStringD1Ev>
            groupAndName += "#";
 800ffa2:	f107 030c 	add.w	r3, r7, #12
 800ffa6:	493f      	ldr	r1, [pc, #252]	; (80100a4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	f7fb fb27 	bl	800b5fc <_ZN12SimpleStringpLEPKc>

            if (!groupAndNameList.contains(groupAndName)) {
 800ffae:	f107 020c 	add.w	r2, r7, #12
 800ffb2:	f107 0314 	add.w	r3, r7, #20
 800ffb6:	4611      	mov	r1, r2
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f7fa ff56 	bl	800ae6a <_ZNK12SimpleString8containsERKS_>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	f083 0301 	eor.w	r3, r3, #1
 800ffc4:	b2db      	uxtb	r3, r3
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d00d      	beq.n	800ffe6 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xe6>
                groupAndNameList += groupAndName;
 800ffca:	f107 020c 	add.w	r2, r7, #12
 800ffce:	f107 0314 	add.w	r3, r7, #20
 800ffd2:	4611      	mov	r1, r2
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	f7fb faff 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
                groupAndNameList += " ";
 800ffda:	f107 0314 	add.w	r3, r7, #20
 800ffde:	4933      	ldr	r1, [pc, #204]	; (80100ac <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f7fb fb0b 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
            SimpleString groupAndName;
 800ffe6:	f107 030c 	add.w	r3, r7, #12
 800ffea:	4618      	mov	r0, r3
 800ffec:	f7fb fa77 	bl	800b4de <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800fff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	330c      	adds	r3, #12
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fffa:	4798      	blx	r3
 800fffc:	63f8      	str	r0, [r7, #60]	; 0x3c
 800fffe:	e78d      	b.n	800ff1c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1c>
            }
        }
    }

    groupAndNameList.replace("#", "");
 8010000:	f107 0314 	add.w	r3, r7, #20
 8010004:	4a26      	ldr	r2, [pc, #152]	; (80100a0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8010006:	4927      	ldr	r1, [pc, #156]	; (80100a4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8010008:	4618      	mov	r0, r3
 801000a:	f7fb f8c5 	bl	800b198 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupAndNameList.endsWith(" "))
 801000e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010012:	4926      	ldr	r1, [pc, #152]	; (80100ac <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 8010014:	4618      	mov	r0, r3
 8010016:	f7fa feaa 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801001a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801001e:	f107 0314 	add.w	r3, r7, #20
 8010022:	4611      	mov	r1, r2
 8010024:	4618      	mov	r0, r3
 8010026:	f7fa ff9f 	bl	800af68 <_ZNK12SimpleString8endsWithERKS_>
 801002a:	4603      	mov	r3, r0
 801002c:	461c      	mov	r4, r3
 801002e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010032:	4618      	mov	r0, r3
 8010034:	f7fb fa53 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8010038:	2c00      	cmp	r4, #0
 801003a:	d01a      	beq.n	8010072 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x172>
        groupAndNameList = groupAndNameList.subString(0, groupAndNameList.size() - 1);
 801003c:	f107 0314 	add.w	r3, r7, #20
 8010040:	4618      	mov	r0, r3
 8010042:	f7fb fa2b 	bl	800b49c <_ZNK12SimpleString4sizeEv>
 8010046:	4603      	mov	r3, r0
 8010048:	3b01      	subs	r3, #1
 801004a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801004e:	f107 0114 	add.w	r1, r7, #20
 8010052:	2200      	movs	r2, #0
 8010054:	f7fb fb4c 	bl	800b6f0 <_ZNK12SimpleString9subStringEjj>
 8010058:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801005c:	f107 0314 	add.w	r3, r7, #20
 8010060:	4611      	mov	r1, r2
 8010062:	4618      	mov	r0, r3
 8010064:	f7fa feef 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 8010068:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801006c:	4618      	mov	r0, r3
 801006e:	f7fb fa36 	bl	800b4de <_ZN12SimpleStringD1Ev>
    result.print(groupAndNameList.asCharString());
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	3338      	adds	r3, #56	; 0x38
 8010078:	681c      	ldr	r4, [r3, #0]
 801007a:	f107 0314 	add.w	r3, r7, #20
 801007e:	4618      	mov	r0, r3
 8010080:	f7fb fa00 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 8010084:	4603      	mov	r3, r0
 8010086:	4619      	mov	r1, r3
 8010088:	6838      	ldr	r0, [r7, #0]
 801008a:	47a0      	blx	r4
    SimpleString groupAndNameList;
 801008c:	f107 0314 	add.w	r3, r7, #20
 8010090:	4618      	mov	r0, r3
 8010092:	f7fb fa24 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 8010096:	bf00      	nop
 8010098:	3744      	adds	r7, #68	; 0x44
 801009a:	46bd      	mov	sp, r7
 801009c:	bd90      	pop	{r4, r7, pc}
 801009e:	bf00      	nop
 80100a0:	08022c4c 	.word	0x08022c4c
 80100a4:	08022c50 	.word	0x08022c50
 80100a8:	08022c58 	.word	0x08022c58
 80100ac:	08022c54 	.word	0x08022c54

080100b0 <_ZN12TestRegistry17listTestLocationsER10TestResult>:

void TestRegistry::listTestLocations(TestResult& result)
{
 80100b0:	b590      	push	{r4, r7, lr}
 80100b2:	b091      	sub	sp, #68	; 0x44
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
 80100b8:	6039      	str	r1, [r7, #0]
    SimpleString testLocations;
 80100ba:	f107 0314 	add.w	r3, r7, #20
 80100be:	494f      	ldr	r1, [pc, #316]	; (80101fc <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 80100c0:	4618      	mov	r0, r3
 80100c2:	f7fa fe54 	bl	800ad6e <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	685b      	ldr	r3, [r3, #4]
 80100ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80100cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d07d      	beq.n	80101ce <_ZN12TestRegistry17listTestLocationsER10TestResult+0x11e>
            SimpleString testLocation;
 80100d2:	f107 030c 	add.w	r3, r7, #12
 80100d6:	4949      	ldr	r1, [pc, #292]	; (80101fc <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 80100d8:	4618      	mov	r0, r3
 80100da:	f7fa fe48 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
            testLocation += test->getGroup();
 80100de:	f107 031c 	add.w	r3, r7, #28
 80100e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80100e4:	4618      	mov	r0, r3
 80100e6:	f001 f84c 	bl	8011182 <_ZNK10UtestShell8getGroupEv>
 80100ea:	f107 021c 	add.w	r2, r7, #28
 80100ee:	f107 030c 	add.w	r3, r7, #12
 80100f2:	4611      	mov	r1, r2
 80100f4:	4618      	mov	r0, r3
 80100f6:	f7fb fa6f 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 80100fa:	f107 031c 	add.w	r3, r7, #28
 80100fe:	4618      	mov	r0, r3
 8010100:	f7fb f9ed 	bl	800b4de <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8010104:	f107 030c 	add.w	r3, r7, #12
 8010108:	493d      	ldr	r1, [pc, #244]	; (8010200 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 801010a:	4618      	mov	r0, r3
 801010c:	f7fb fa76 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
            testLocation += test->getName();
 8010110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010114:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010116:	4618      	mov	r0, r3
 8010118:	f001 f824 	bl	8011164 <_ZNK10UtestShell7getNameEv>
 801011c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010120:	f107 030c 	add.w	r3, r7, #12
 8010124:	4611      	mov	r1, r2
 8010126:	4618      	mov	r0, r3
 8010128:	f7fb fa56 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 801012c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010130:	4618      	mov	r0, r3
 8010132:	f7fb f9d4 	bl	800b4de <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8010136:	f107 030c 	add.w	r3, r7, #12
 801013a:	4931      	ldr	r1, [pc, #196]	; (8010200 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 801013c:	4618      	mov	r0, r3
 801013e:	f7fb fa5d 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
            testLocation += test->getFile();
 8010142:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010146:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010148:	4618      	mov	r0, r3
 801014a:	f001 f8dc 	bl	8011306 <_ZNK10UtestShell7getFileEv>
 801014e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8010152:	f107 030c 	add.w	r3, r7, #12
 8010156:	4611      	mov	r1, r2
 8010158:	4618      	mov	r0, r3
 801015a:	f7fb fa3d 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 801015e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010162:	4618      	mov	r0, r3
 8010164:	f7fb f9bb 	bl	800b4de <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8010168:	f107 030c 	add.w	r3, r7, #12
 801016c:	4924      	ldr	r1, [pc, #144]	; (8010200 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 801016e:	4618      	mov	r0, r3
 8010170:	f7fb fa44 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
            testLocation += StringFromFormat("%d\n",(int) test->getLineNumber());
 8010174:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010176:	f001 f8d5 	bl	8011324 <_ZNK10UtestShell13getLineNumberEv>
 801017a:	4603      	mov	r3, r0
 801017c:	461a      	mov	r2, r3
 801017e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010182:	4920      	ldr	r1, [pc, #128]	; (8010204 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x154>)
 8010184:	4618      	mov	r0, r3
 8010186:	f7fb feb1 	bl	800beec <_Z16StringFromFormatPKcz>
 801018a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801018e:	f107 030c 	add.w	r3, r7, #12
 8010192:	4611      	mov	r1, r2
 8010194:	4618      	mov	r0, r3
 8010196:	f7fb fa1f 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 801019a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801019e:	4618      	mov	r0, r3
 80101a0:	f7fb f99d 	bl	800b4de <_ZN12SimpleStringD1Ev>

            testLocations += testLocation;
 80101a4:	f107 020c 	add.w	r2, r7, #12
 80101a8:	f107 0314 	add.w	r3, r7, #20
 80101ac:	4611      	mov	r1, r2
 80101ae:	4618      	mov	r0, r3
 80101b0:	f7fb fa12 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
            SimpleString testLocation;
 80101b4:	f107 030c 	add.w	r3, r7, #12
 80101b8:	4618      	mov	r0, r3
 80101ba:	f7fb f990 	bl	800b4de <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80101be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	330c      	adds	r3, #12
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80101c8:	4798      	blx	r3
 80101ca:	63f8      	str	r0, [r7, #60]	; 0x3c
 80101cc:	e77e      	b.n	80100cc <_ZN12TestRegistry17listTestLocationsER10TestResult+0x1c>
    }

    result.print(testLocations.asCharString());
 80101ce:	683b      	ldr	r3, [r7, #0]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	3338      	adds	r3, #56	; 0x38
 80101d4:	681c      	ldr	r4, [r3, #0]
 80101d6:	f107 0314 	add.w	r3, r7, #20
 80101da:	4618      	mov	r0, r3
 80101dc:	f7fb f952 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 80101e0:	4603      	mov	r3, r0
 80101e2:	4619      	mov	r1, r3
 80101e4:	6838      	ldr	r0, [r7, #0]
 80101e6:	47a0      	blx	r4
    SimpleString testLocations;
 80101e8:	f107 0314 	add.w	r3, r7, #20
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7fb f976 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 80101f2:	bf00      	nop
 80101f4:	3744      	adds	r7, #68	; 0x44
 80101f6:	46bd      	mov	sp, r7
 80101f8:	bd90      	pop	{r4, r7, pc}
 80101fa:	bf00      	nop
 80101fc:	08022c4c 	.word	0x08022c4c
 8010200:	08022c58 	.word	0x08022c58
 8010204:	08022c5c 	.word	0x08022c5c

08010208 <_ZN12TestRegistry10endOfGroupEP10UtestShell>:

bool TestRegistry::endOfGroup(UtestShell* test)
{
 8010208:	b5f0      	push	{r4, r5, r6, r7, lr}
 801020a:	b087      	sub	sp, #28
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
 8010210:	6039      	str	r1, [r7, #0]
    return (!test || !test->getNext() || test->getGroup() != test->getNext()->getGroup());
 8010212:	2400      	movs	r4, #0
 8010214:	2500      	movs	r5, #0
 8010216:	683b      	ldr	r3, [r7, #0]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d028      	beq.n	801026e <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 801021c:	683b      	ldr	r3, [r7, #0]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	330c      	adds	r3, #12
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	6838      	ldr	r0, [r7, #0]
 8010226:	4798      	blx	r3
 8010228:	4603      	mov	r3, r0
 801022a:	2b00      	cmp	r3, #0
 801022c:	d01f      	beq.n	801026e <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 801022e:	f107 0308 	add.w	r3, r7, #8
 8010232:	6839      	ldr	r1, [r7, #0]
 8010234:	4618      	mov	r0, r3
 8010236:	f000 ffa4 	bl	8011182 <_ZNK10UtestShell8getGroupEv>
 801023a:	2401      	movs	r4, #1
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	330c      	adds	r3, #12
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	6838      	ldr	r0, [r7, #0]
 8010246:	4798      	blx	r3
 8010248:	4602      	mov	r2, r0
 801024a:	f107 0310 	add.w	r3, r7, #16
 801024e:	4611      	mov	r1, r2
 8010250:	4618      	mov	r0, r3
 8010252:	f000 ff96 	bl	8011182 <_ZNK10UtestShell8getGroupEv>
 8010256:	2501      	movs	r5, #1
 8010258:	f107 0210 	add.w	r2, r7, #16
 801025c:	f107 0308 	add.w	r3, r7, #8
 8010260:	4611      	mov	r1, r2
 8010262:	4618      	mov	r0, r3
 8010264:	f7fb f98c 	bl	800b580 <_ZneRK12SimpleStringS1_>
 8010268:	4603      	mov	r3, r0
 801026a:	2b00      	cmp	r3, #0
 801026c:	d001      	beq.n	8010272 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6a>
 801026e:	2601      	movs	r6, #1
 8010270:	e000      	b.n	8010274 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6c>
 8010272:	2600      	movs	r6, #0
 8010274:	2d00      	cmp	r5, #0
 8010276:	d004      	beq.n	8010282 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x7a>
 8010278:	f107 0310 	add.w	r3, r7, #16
 801027c:	4618      	mov	r0, r3
 801027e:	f7fb f92e 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8010282:	2c00      	cmp	r4, #0
 8010284:	d004      	beq.n	8010290 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x88>
 8010286:	f107 0308 	add.w	r3, r7, #8
 801028a:	4618      	mov	r0, r3
 801028c:	f7fb f927 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8010290:	4633      	mov	r3, r6
}
 8010292:	4618      	mov	r0, r3
 8010294:	371c      	adds	r7, #28
 8010296:	46bd      	mov	sp, r7
 8010298:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801029a <_ZN12TestRegistry10countTestsEv>:

size_t TestRegistry::countTests()
{
 801029a:	b580      	push	{r7, lr}
 801029c:	b082      	sub	sp, #8
 801029e:	af00      	add	r7, sp, #0
 80102a0:	6078      	str	r0, [r7, #4]
    return tests_ ? tests_->countTests() : 0;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	685b      	ldr	r3, [r3, #4]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d00a      	beq.n	80102c0 <_ZN12TestRegistry10countTestsEv+0x26>
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	685a      	ldr	r2, [r3, #4]
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	685b      	ldr	r3, [r3, #4]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	3310      	adds	r3, #16
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	4610      	mov	r0, r2
 80102ba:	4798      	blx	r3
 80102bc:	4603      	mov	r3, r0
 80102be:	e000      	b.n	80102c2 <_ZN12TestRegistry10countTestsEv+0x28>
 80102c0:	2300      	movs	r3, #0
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	3708      	adds	r7, #8
 80102c6:	46bd      	mov	sp, r7
 80102c8:	bd80      	pop	{r7, pc}
	...

080102cc <__tcf_0>:

TestRegistry* TestRegistry::currentRegistry_ = NULLPTR;

TestRegistry* TestRegistry::getCurrentRegistry()
{
    static TestRegistry registry;
 80102cc:	b580      	push	{r7, lr}
 80102ce:	af00      	add	r7, sp, #0
 80102d0:	4801      	ldr	r0, [pc, #4]	; (80102d8 <__tcf_0+0xc>)
 80102d2:	f7ff fcad 	bl	800fc30 <_ZN12TestRegistryD1Ev>
 80102d6:	bd80      	pop	{r7, pc}
 80102d8:	200008cc 	.word	0x200008cc

080102dc <_ZN12TestRegistry18getCurrentRegistryEv>:
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	af00      	add	r7, sp, #0
    static TestRegistry registry;
 80102e0:	4b15      	ldr	r3, [pc, #84]	; (8010338 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 80102e2:	781b      	ldrb	r3, [r3, #0]
 80102e4:	f3bf 8f5b 	dmb	ish
 80102e8:	b2db      	uxtb	r3, r3
 80102ea:	f003 0301 	and.w	r3, r3, #1
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	bf0c      	ite	eq
 80102f2:	2301      	moveq	r3, #1
 80102f4:	2300      	movne	r3, #0
 80102f6:	b2db      	uxtb	r3, r3
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d013      	beq.n	8010324 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 80102fc:	480e      	ldr	r0, [pc, #56]	; (8010338 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 80102fe:	f00d fbf7 	bl	801daf0 <__cxa_guard_acquire>
 8010302:	4603      	mov	r3, r0
 8010304:	2b00      	cmp	r3, #0
 8010306:	bf14      	ite	ne
 8010308:	2301      	movne	r3, #1
 801030a:	2300      	moveq	r3, #0
 801030c:	b2db      	uxtb	r3, r3
 801030e:	2b00      	cmp	r3, #0
 8010310:	d008      	beq.n	8010324 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 8010312:	480a      	ldr	r0, [pc, #40]	; (801033c <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
 8010314:	f7ff fc66 	bl	800fbe4 <_ZN12TestRegistryC1Ev>
 8010318:	4807      	ldr	r0, [pc, #28]	; (8010338 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 801031a:	f00d fbf5 	bl	801db08 <__cxa_guard_release>
 801031e:	4808      	ldr	r0, [pc, #32]	; (8010340 <_ZN12TestRegistry18getCurrentRegistryEv+0x64>)
 8010320:	f00d fc19 	bl	801db56 <atexit>
    return (currentRegistry_ == NULLPTR) ? &registry : currentRegistry_;
 8010324:	4b07      	ldr	r3, [pc, #28]	; (8010344 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d002      	beq.n	8010332 <_ZN12TestRegistry18getCurrentRegistryEv+0x56>
 801032c:	4b05      	ldr	r3, [pc, #20]	; (8010344 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	e000      	b.n	8010334 <_ZN12TestRegistry18getCurrentRegistryEv+0x58>
 8010332:	4b02      	ldr	r3, [pc, #8]	; (801033c <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
}
 8010334:	4618      	mov	r0, r3
 8010336:	bd80      	pop	{r7, pc}
 8010338:	200008ec 	.word	0x200008ec
 801033c:	200008cc 	.word	0x200008cc
 8010340:	080102cd 	.word	0x080102cd
 8010344:	200008c8 	.word	0x200008c8

08010348 <_ZN12TestRegistry18setCurrentRegistryEPS_>:

void TestRegistry::setCurrentRegistry(TestRegistry* registry)
{
 8010348:	b480      	push	{r7}
 801034a:	b083      	sub	sp, #12
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
 8010350:	6039      	str	r1, [r7, #0]
    currentRegistry_ = registry;
 8010352:	4a04      	ldr	r2, [pc, #16]	; (8010364 <_ZN12TestRegistry18setCurrentRegistryEPS_+0x1c>)
 8010354:	683b      	ldr	r3, [r7, #0]
 8010356:	6013      	str	r3, [r2, #0]
}
 8010358:	bf00      	nop
 801035a:	370c      	adds	r7, #12
 801035c:	46bd      	mov	sp, r7
 801035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010362:	4770      	bx	lr
 8010364:	200008c8 	.word	0x200008c8

08010368 <_ZN12TestRegistry15unDoLastAddTestEv>:

void TestRegistry::unDoLastAddTest()
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b082      	sub	sp, #8
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
    tests_ = tests_ ? tests_->getNext() : NULLPTR;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	685b      	ldr	r3, [r3, #4]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d00a      	beq.n	801038e <_ZN12TestRegistry15unDoLastAddTestEv+0x26>
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	685a      	ldr	r2, [r3, #4]
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	685b      	ldr	r3, [r3, #4]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	330c      	adds	r3, #12
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	4610      	mov	r0, r2
 8010388:	4798      	blx	r3
 801038a:	4603      	mov	r3, r0
 801038c:	e000      	b.n	8010390 <_ZN12TestRegistry15unDoLastAddTestEv+0x28>
 801038e:	2300      	movs	r3, #0
 8010390:	687a      	ldr	r2, [r7, #4]
 8010392:	6053      	str	r3, [r2, #4]

}
 8010394:	bf00      	nop
 8010396:	3708      	adds	r7, #8
 8010398:	46bd      	mov	sp, r7
 801039a:	bd80      	pop	{r7, pc}

0801039c <_ZN12TestRegistry14setNameFiltersEPK10TestFilter>:

void TestRegistry::setNameFilters(const TestFilter* filters)
{
 801039c:	b480      	push	{r7}
 801039e:	b083      	sub	sp, #12
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
 80103a4:	6039      	str	r1, [r7, #0]
    nameFilters_ = filters;
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	683a      	ldr	r2, [r7, #0]
 80103aa:	609a      	str	r2, [r3, #8]
}
 80103ac:	bf00      	nop
 80103ae:	370c      	adds	r7, #12
 80103b0:	46bd      	mov	sp, r7
 80103b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b6:	4770      	bx	lr

080103b8 <_ZN12TestRegistry15setGroupFiltersEPK10TestFilter>:

void TestRegistry::setGroupFilters(const TestFilter* filters)
{
 80103b8:	b480      	push	{r7}
 80103ba:	b083      	sub	sp, #12
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
 80103c0:	6039      	str	r1, [r7, #0]
    groupFilters_ = filters;
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	683a      	ldr	r2, [r7, #0]
 80103c6:	60da      	str	r2, [r3, #12]
}
 80103c8:	bf00      	nop
 80103ca:	370c      	adds	r7, #12
 80103cc:	46bd      	mov	sp, r7
 80103ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d2:	4770      	bx	lr

080103d4 <_ZN12TestRegistry13setRunIgnoredEv>:

void TestRegistry::setRunIgnored()
{
 80103d4:	b480      	push	{r7}
 80103d6:	b083      	sub	sp, #12
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
    runIgnored_ = true;
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2201      	movs	r2, #1
 80103e0:	771a      	strb	r2, [r3, #28]
}
 80103e2:	bf00      	nop
 80103e4:	370c      	adds	r7, #12
 80103e6:	46bd      	mov	sp, r7
 80103e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ec:	4770      	bx	lr

080103ee <_ZN12TestRegistry28setRunTestsInSeperateProcessEv>:

void TestRegistry::setRunTestsInSeperateProcess()
{
 80103ee:	b480      	push	{r7}
 80103f0:	b083      	sub	sp, #12
 80103f2:	af00      	add	r7, sp, #0
 80103f4:	6078      	str	r0, [r7, #4]
    runInSeperateProcess_ = true;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	2201      	movs	r2, #1
 80103fa:	751a      	strb	r2, [r3, #20]
}
 80103fc:	bf00      	nop
 80103fe:	370c      	adds	r7, #12
 8010400:	46bd      	mov	sp, r7
 8010402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010406:	4770      	bx	lr

08010408 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>:
{
    return currentRepetition_;
}

bool TestRegistry::testShouldRun(UtestShell* test, TestResult& result)
{
 8010408:	b580      	push	{r7, lr}
 801040a:	b084      	sub	sp, #16
 801040c:	af00      	add	r7, sp, #0
 801040e:	60f8      	str	r0, [r7, #12]
 8010410:	60b9      	str	r1, [r7, #8]
 8010412:	607a      	str	r2, [r7, #4]
    if (test->shouldRun(groupFilters_, nameFilters_)) return true;
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	68d9      	ldr	r1, [r3, #12]
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	689b      	ldr	r3, [r3, #8]
 801041c:	461a      	mov	r2, r3
 801041e:	68b8      	ldr	r0, [r7, #8]
 8010420:	f000 ffbb 	bl	801139a <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>
 8010424:	4603      	mov	r3, r0
 8010426:	2b00      	cmp	r3, #0
 8010428:	d001      	beq.n	801042e <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x26>
 801042a:	2301      	movs	r3, #1
 801042c:	e006      	b.n	801043c <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x34>
    else {
        result.countFilteredOut();
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	332c      	adds	r3, #44	; 0x2c
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	6878      	ldr	r0, [r7, #4]
 8010438:	4798      	blx	r3
        return false;
 801043a:	2300      	movs	r3, #0
    }
}
 801043c:	4618      	mov	r0, r3
 801043e:	3710      	adds	r7, #16
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}

08010444 <_ZN12TestRegistry12resetPluginsEv>:

void TestRegistry::resetPlugins()
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b082      	sub	sp, #8
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
    firstPlugin_ = NullTestPlugin::instance();
 801044c:	f7ff fb62 	bl	800fb14 <_ZN14NullTestPlugin8instanceEv>
 8010450:	4602      	mov	r2, r0
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	611a      	str	r2, [r3, #16]
}
 8010456:	bf00      	nop
 8010458:	3708      	adds	r7, #8
 801045a:	46bd      	mov	sp, r7
 801045c:	bd80      	pop	{r7, pc}

0801045e <_ZN12TestRegistry13installPluginEP10TestPlugin>:

void TestRegistry::installPlugin(TestPlugin* plugin)
{
 801045e:	b580      	push	{r7, lr}
 8010460:	b082      	sub	sp, #8
 8010462:	af00      	add	r7, sp, #0
 8010464:	6078      	str	r0, [r7, #4]
 8010466:	6039      	str	r1, [r7, #0]
    firstPlugin_ = plugin->addPlugin(firstPlugin_);
 8010468:	683b      	ldr	r3, [r7, #0]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	3324      	adds	r3, #36	; 0x24
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	687a      	ldr	r2, [r7, #4]
 8010472:	6912      	ldr	r2, [r2, #16]
 8010474:	4611      	mov	r1, r2
 8010476:	6838      	ldr	r0, [r7, #0]
 8010478:	4798      	blx	r3
 801047a:	4602      	mov	r2, r0
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	611a      	str	r2, [r3, #16]
}
 8010480:	bf00      	nop
 8010482:	3708      	adds	r7, #8
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}

08010488 <_ZN12TestRegistry14getFirstPluginEv>:

TestPlugin* TestRegistry::getFirstPlugin()
{
 8010488:	b480      	push	{r7}
 801048a:	b083      	sub	sp, #12
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
    return firstPlugin_;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	691b      	ldr	r3, [r3, #16]
}
 8010494:	4618      	mov	r0, r3
 8010496:	370c      	adds	r7, #12
 8010498:	46bd      	mov	sp, r7
 801049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049e:	4770      	bx	lr

080104a0 <_ZN12TestRegistry15getPluginByNameERK12SimpleString>:

TestPlugin* TestRegistry::getPluginByName(const SimpleString& name)
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b082      	sub	sp, #8
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
 80104a8:	6039      	str	r1, [r7, #0]
    return firstPlugin_->getPluginByName(name);
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	691b      	ldr	r3, [r3, #16]
 80104ae:	6839      	ldr	r1, [r7, #0]
 80104b0:	4618      	mov	r0, r3
 80104b2:	f7ff fa52 	bl	800f95a <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 80104b6:	4603      	mov	r3, r0
}
 80104b8:	4618      	mov	r0, r3
 80104ba:	3708      	adds	r7, #8
 80104bc:	46bd      	mov	sp, r7
 80104be:	bd80      	pop	{r7, pc}

080104c0 <_ZN12TestRegistry18removePluginByNameERK12SimpleString>:

void TestRegistry::removePluginByName(const SimpleString& name)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b082      	sub	sp, #8
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
 80104c8:	6039      	str	r1, [r7, #0]
    if (firstPlugin_->removePluginByName(name) == firstPlugin_) firstPlugin_ = firstPlugin_->getNext();
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	691a      	ldr	r2, [r3, #16]
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	691b      	ldr	r3, [r3, #16]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	3328      	adds	r3, #40	; 0x28
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	6839      	ldr	r1, [r7, #0]
 80104da:	4610      	mov	r0, r2
 80104dc:	4798      	blx	r3
 80104de:	4602      	mov	r2, r0
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	691b      	ldr	r3, [r3, #16]
 80104e4:	429a      	cmp	r2, r3
 80104e6:	bf0c      	ite	eq
 80104e8:	2301      	moveq	r3, #1
 80104ea:	2300      	movne	r3, #0
 80104ec:	b2db      	uxtb	r3, r3
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d00b      	beq.n	801050a <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x4a>
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	691a      	ldr	r2, [r3, #16]
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	691b      	ldr	r3, [r3, #16]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	332c      	adds	r3, #44	; 0x2c
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	4610      	mov	r0, r2
 8010502:	4798      	blx	r3
 8010504:	4602      	mov	r2, r0
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	611a      	str	r2, [r3, #16]
    if (firstPlugin_->getName() == name) firstPlugin_ = firstPlugin_->getNext();
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	691b      	ldr	r3, [r3, #16]
 801050e:	4618      	mov	r0, r3
 8010510:	f7ff fa17 	bl	800f942 <_ZN10TestPlugin7getNameEv>
 8010514:	4603      	mov	r3, r0
 8010516:	6839      	ldr	r1, [r7, #0]
 8010518:	4618      	mov	r0, r3
 801051a:	f7fa ffec 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801051e:	4603      	mov	r3, r0
 8010520:	2b00      	cmp	r3, #0
 8010522:	d00b      	beq.n	801053c <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x7c>
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	691a      	ldr	r2, [r3, #16]
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	691b      	ldr	r3, [r3, #16]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	332c      	adds	r3, #44	; 0x2c
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	4610      	mov	r0, r2
 8010534:	4798      	blx	r3
 8010536:	4602      	mov	r2, r0
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	611a      	str	r2, [r3, #16]
    firstPlugin_->removePluginByName(name);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	691a      	ldr	r2, [r3, #16]
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	691b      	ldr	r3, [r3, #16]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	3328      	adds	r3, #40	; 0x28
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	6839      	ldr	r1, [r7, #0]
 801054c:	4610      	mov	r0, r2
 801054e:	4798      	blx	r3
}
 8010550:	bf00      	nop
 8010552:	3708      	adds	r7, #8
 8010554:	46bd      	mov	sp, r7
 8010556:	bd80      	pop	{r7, pc}

08010558 <_ZN12TestRegistry12countPluginsEv>:

int TestRegistry::countPlugins()
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b084      	sub	sp, #16
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
    int count = 0;
 8010560:	2300      	movs	r3, #0
 8010562:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	691b      	ldr	r3, [r3, #16]
 8010568:	60bb      	str	r3, [r7, #8]
 801056a:	f7ff fad3 	bl	800fb14 <_ZN14NullTestPlugin8instanceEv>
 801056e:	4602      	mov	r2, r0
 8010570:	68bb      	ldr	r3, [r7, #8]
 8010572:	4293      	cmp	r3, r2
 8010574:	bf14      	ite	ne
 8010576:	2301      	movne	r3, #1
 8010578:	2300      	moveq	r3, #0
 801057a:	b2db      	uxtb	r3, r3
 801057c:	2b00      	cmp	r3, #0
 801057e:	d00a      	beq.n	8010596 <_ZN12TestRegistry12countPluginsEv+0x3e>
        count++;
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	3301      	adds	r3, #1
 8010584:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 8010586:	68bb      	ldr	r3, [r7, #8]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	332c      	adds	r3, #44	; 0x2c
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	68b8      	ldr	r0, [r7, #8]
 8010590:	4798      	blx	r3
 8010592:	60b8      	str	r0, [r7, #8]
 8010594:	e7e9      	b.n	801056a <_ZN12TestRegistry12countPluginsEv+0x12>
    return count;
 8010596:	68fb      	ldr	r3, [r7, #12]
}
 8010598:	4618      	mov	r0, r3
 801059a:	3710      	adds	r7, #16
 801059c:	46bd      	mov	sp, r7
 801059e:	bd80      	pop	{r7, pc}

080105a0 <_ZN12TestRegistry12getFirstTestEv>:


UtestShell* TestRegistry::getFirstTest()
{
 80105a0:	b480      	push	{r7}
 80105a2:	b083      	sub	sp, #12
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
    return tests_;
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	685b      	ldr	r3, [r3, #4]
}
 80105ac:	4618      	mov	r0, r3
 80105ae:	370c      	adds	r7, #12
 80105b0:	46bd      	mov	sp, r7
 80105b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b6:	4770      	bx	lr

080105b8 <_ZN12TestRegistry12shuffleTestsEj>:

void TestRegistry::shuffleTests(size_t seed)
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b084      	sub	sp, #16
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
 80105c0:	6039      	str	r1, [r7, #0]
    UtestShellPointerArray array(getFirstTest());
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	334c      	adds	r3, #76	; 0x4c
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	4798      	blx	r3
 80105ce:	4602      	mov	r2, r0
 80105d0:	f107 0308 	add.w	r3, r7, #8
 80105d4:	4611      	mov	r1, r2
 80105d6:	4618      	mov	r0, r3
 80105d8:	f002 f8f8 	bl	80127cc <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.shuffle(seed);
 80105dc:	f107 0308 	add.w	r3, r7, #8
 80105e0:	6839      	ldr	r1, [r7, #0]
 80105e2:	4618      	mov	r0, r3
 80105e4:	f002 f980 	bl	80128e8 <_ZN22UtestShellPointerArray7shuffleEj>
    tests_ = array.getFirstTest();
 80105e8:	f107 0308 	add.w	r3, r7, #8
 80105ec:	4618      	mov	r0, r3
 80105ee:	f002 fa13 	bl	8012a18 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 80105f2:	4602      	mov	r2, r0
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 80105f8:	f107 0308 	add.w	r3, r7, #8
 80105fc:	4618      	mov	r0, r3
 80105fe:	f002 f939 	bl	8012874 <_ZN22UtestShellPointerArrayD1Ev>
}
 8010602:	bf00      	nop
 8010604:	3710      	adds	r7, #16
 8010606:	46bd      	mov	sp, r7
 8010608:	bd80      	pop	{r7, pc}

0801060a <_ZN12TestRegistry12reverseTestsEv>:

void TestRegistry::reverseTests()
{
 801060a:	b580      	push	{r7, lr}
 801060c:	b084      	sub	sp, #16
 801060e:	af00      	add	r7, sp, #0
 8010610:	6078      	str	r0, [r7, #4]
    UtestShellPointerArray array(getFirstTest());
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	334c      	adds	r3, #76	; 0x4c
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	6878      	ldr	r0, [r7, #4]
 801061c:	4798      	blx	r3
 801061e:	4602      	mov	r2, r0
 8010620:	f107 0308 	add.w	r3, r7, #8
 8010624:	4611      	mov	r1, r2
 8010626:	4618      	mov	r0, r3
 8010628:	f002 f8d0 	bl	80127cc <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.reverse();
 801062c:	f107 0308 	add.w	r3, r7, #8
 8010630:	4618      	mov	r0, r3
 8010632:	f002 f995 	bl	8012960 <_ZN22UtestShellPointerArray7reverseEv>
    tests_ = array.getFirstTest();
 8010636:	f107 0308 	add.w	r3, r7, #8
 801063a:	4618      	mov	r0, r3
 801063c:	f002 f9ec 	bl	8012a18 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 8010640:	4602      	mov	r2, r0
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 8010646:	f107 0308 	add.w	r3, r7, #8
 801064a:	4618      	mov	r0, r3
 801064c:	f002 f912 	bl	8012874 <_ZN22UtestShellPointerArrayD1Ev>
}
 8010650:	bf00      	nop
 8010652:	3710      	adds	r7, #16
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}

08010658 <_ZN12TestRegistry15getTestWithNextEP10UtestShell>:

UtestShell* TestRegistry::getTestWithNext(UtestShell* test)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b084      	sub	sp, #16
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
 8010660:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	685b      	ldr	r3, [r3, #4]
 8010666:	60fb      	str	r3, [r7, #12]
    while (current && current->getNext() != test)
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d00b      	beq.n	8010686 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	330c      	adds	r3, #12
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	68f8      	ldr	r0, [r7, #12]
 8010678:	4798      	blx	r3
 801067a:	4602      	mov	r2, r0
 801067c:	683b      	ldr	r3, [r7, #0]
 801067e:	4293      	cmp	r3, r2
 8010680:	d001      	beq.n	8010686 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 8010682:	2301      	movs	r3, #1
 8010684:	e000      	b.n	8010688 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x30>
 8010686:	2300      	movs	r3, #0
 8010688:	2b00      	cmp	r3, #0
 801068a:	d007      	beq.n	801069c <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x44>
        current = current->getNext();
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	330c      	adds	r3, #12
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	68f8      	ldr	r0, [r7, #12]
 8010696:	4798      	blx	r3
 8010698:	60f8      	str	r0, [r7, #12]
    while (current && current->getNext() != test)
 801069a:	e7e5      	b.n	8010668 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x10>
    return current;
 801069c:	68fb      	ldr	r3, [r7, #12]
}
 801069e:	4618      	mov	r0, r3
 80106a0:	3710      	adds	r7, #16
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}

080106a6 <_ZN12TestRegistry16findTestWithNameERK12SimpleString>:

UtestShell* TestRegistry::findTestWithName(const SimpleString& name)
{
 80106a6:	b590      	push	{r4, r7, lr}
 80106a8:	b087      	sub	sp, #28
 80106aa:	af00      	add	r7, sp, #0
 80106ac:	6078      	str	r0, [r7, #4]
 80106ae:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	685b      	ldr	r3, [r3, #4]
 80106b4:	617b      	str	r3, [r7, #20]
    while (current) {
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d01e      	beq.n	80106fa <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x54>
        if (current->getName() == name)
 80106bc:	f107 030c 	add.w	r3, r7, #12
 80106c0:	6979      	ldr	r1, [r7, #20]
 80106c2:	4618      	mov	r0, r3
 80106c4:	f000 fd4e 	bl	8011164 <_ZNK10UtestShell7getNameEv>
 80106c8:	f107 030c 	add.w	r3, r7, #12
 80106cc:	6839      	ldr	r1, [r7, #0]
 80106ce:	4618      	mov	r0, r3
 80106d0:	f7fa ff11 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 80106d4:	4603      	mov	r3, r0
 80106d6:	461c      	mov	r4, r3
 80106d8:	f107 030c 	add.w	r3, r7, #12
 80106dc:	4618      	mov	r0, r3
 80106de:	f7fa fefe 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80106e2:	2c00      	cmp	r4, #0
 80106e4:	d001      	beq.n	80106ea <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x44>
            return current;
 80106e6:	697b      	ldr	r3, [r7, #20]
 80106e8:	e008      	b.n	80106fc <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x56>
        current = current->getNext();
 80106ea:	697b      	ldr	r3, [r7, #20]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	330c      	adds	r3, #12
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	6978      	ldr	r0, [r7, #20]
 80106f4:	4798      	blx	r3
 80106f6:	6178      	str	r0, [r7, #20]
    while (current) {
 80106f8:	e7dd      	b.n	80106b6 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x10>
    }
    return NULLPTR;
 80106fa:	2300      	movs	r3, #0
}
 80106fc:	4618      	mov	r0, r3
 80106fe:	371c      	adds	r7, #28
 8010700:	46bd      	mov	sp, r7
 8010702:	bd90      	pop	{r4, r7, pc}

08010704 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString>:

UtestShell* TestRegistry::findTestWithGroup(const SimpleString& group)
{
 8010704:	b590      	push	{r4, r7, lr}
 8010706:	b087      	sub	sp, #28
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
 801070c:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	685b      	ldr	r3, [r3, #4]
 8010712:	617b      	str	r3, [r7, #20]
    while (current) {
 8010714:	697b      	ldr	r3, [r7, #20]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d01e      	beq.n	8010758 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x54>
        if (current->getGroup() == group)
 801071a:	f107 030c 	add.w	r3, r7, #12
 801071e:	6979      	ldr	r1, [r7, #20]
 8010720:	4618      	mov	r0, r3
 8010722:	f000 fd2e 	bl	8011182 <_ZNK10UtestShell8getGroupEv>
 8010726:	f107 030c 	add.w	r3, r7, #12
 801072a:	6839      	ldr	r1, [r7, #0]
 801072c:	4618      	mov	r0, r3
 801072e:	f7fa fee2 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 8010732:	4603      	mov	r3, r0
 8010734:	461c      	mov	r4, r3
 8010736:	f107 030c 	add.w	r3, r7, #12
 801073a:	4618      	mov	r0, r3
 801073c:	f7fa fecf 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8010740:	2c00      	cmp	r4, #0
 8010742:	d001      	beq.n	8010748 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x44>
            return current;
 8010744:	697b      	ldr	r3, [r7, #20]
 8010746:	e008      	b.n	801075a <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x56>
        current = current->getNext();
 8010748:	697b      	ldr	r3, [r7, #20]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	330c      	adds	r3, #12
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	6978      	ldr	r0, [r7, #20]
 8010752:	4798      	blx	r3
 8010754:	6178      	str	r0, [r7, #20]
    while (current) {
 8010756:	e7dd      	b.n	8010714 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x10>
    }
    return NULLPTR;
 8010758:	2300      	movs	r3, #0
}
 801075a:	4618      	mov	r0, r3
 801075c:	371c      	adds	r7, #28
 801075e:	46bd      	mov	sp, r7
 8010760:	bd90      	pop	{r4, r7, pc}
	...

08010764 <_ZN10TestResultC1ER10TestOutput>:
#include "CppUTest/TestResult.h"
#include "CppUTest/TestFailure.h"
#include "CppUTest/TestOutput.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestResult::TestResult(TestOutput& p) :
 8010764:	b480      	push	{r7}
 8010766:	b083      	sub	sp, #12
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
 801076c:	6039      	str	r1, [r7, #0]
    output_(p), testCount_(0), runCount_(0), checkCount_(0), failureCount_(0), filteredOutCount_(0), ignoredCount_(0), totalExecutionTime_(0), timeStarted_(0), currentTestTimeStarted_(0),
            currentTestTotalExecutionTime_(0), currentGroupTimeStarted_(0), currentGroupTotalExecutionTime_(0)
 801076e:	4a18      	ldr	r2, [pc, #96]	; (80107d0 <_ZN10TestResultC1ER10TestOutput+0x6c>)
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	601a      	str	r2, [r3, #0]
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	683a      	ldr	r2, [r7, #0]
 8010778:	605a      	str	r2, [r3, #4]
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	2200      	movs	r2, #0
 801077e:	609a      	str	r2, [r3, #8]
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	2200      	movs	r2, #0
 8010784:	60da      	str	r2, [r3, #12]
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	2200      	movs	r2, #0
 801078a:	611a      	str	r2, [r3, #16]
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	2200      	movs	r2, #0
 8010790:	615a      	str	r2, [r3, #20]
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	2200      	movs	r2, #0
 8010796:	619a      	str	r2, [r3, #24]
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	2200      	movs	r2, #0
 801079c:	61da      	str	r2, [r3, #28]
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	2200      	movs	r2, #0
 80107a2:	621a      	str	r2, [r3, #32]
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2200      	movs	r2, #0
 80107a8:	625a      	str	r2, [r3, #36]	; 0x24
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	2200      	movs	r2, #0
 80107ae:	629a      	str	r2, [r3, #40]	; 0x28
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2200      	movs	r2, #0
 80107b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	2200      	movs	r2, #0
 80107ba:	631a      	str	r2, [r3, #48]	; 0x30
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	2200      	movs	r2, #0
 80107c0:	635a      	str	r2, [r3, #52]	; 0x34
{
}
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	4618      	mov	r0, r3
 80107c6:	370c      	adds	r7, #12
 80107c8:	46bd      	mov	sp, r7
 80107ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ce:	4770      	bx	lr
 80107d0:	08025d80 	.word	0x08025d80

080107d4 <_ZN10TestResultD1Ev>:

TestResult::~TestResult()
 80107d4:	b480      	push	{r7}
 80107d6:	b083      	sub	sp, #12
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
 80107dc:	4a04      	ldr	r2, [pc, #16]	; (80107f0 <_ZN10TestResultD1Ev+0x1c>)
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	601a      	str	r2, [r3, #0]
{
}
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	4618      	mov	r0, r3
 80107e6:	370c      	adds	r7, #12
 80107e8:	46bd      	mov	sp, r7
 80107ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ee:	4770      	bx	lr
 80107f0:	08025d80 	.word	0x08025d80

080107f4 <_ZN10TestResultD0Ev>:
TestResult::~TestResult()
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b082      	sub	sp, #8
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
}
 80107fc:	6878      	ldr	r0, [r7, #4]
 80107fe:	f7ff ffe9 	bl	80107d4 <_ZN10TestResultD1Ev>
 8010802:	2138      	movs	r1, #56	; 0x38
 8010804:	6878      	ldr	r0, [r7, #4]
 8010806:	f7f7 ff03 	bl	8008610 <_ZdlPvj>
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	4618      	mov	r0, r3
 801080e:	3708      	adds	r7, #8
 8010810:	46bd      	mov	sp, r7
 8010812:	bd80      	pop	{r7, pc}

08010814 <_ZN10TestResult19currentGroupStartedEP10UtestShell>:

void TestResult::currentGroupStarted(UtestShell* test)
{
 8010814:	b580      	push	{r7, lr}
 8010816:	b082      	sub	sp, #8
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]
 801081c:	6039      	str	r1, [r7, #0]
    output_.printCurrentGroupStarted(*test);
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	685a      	ldr	r2, [r3, #4]
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	685b      	ldr	r3, [r3, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	3318      	adds	r3, #24
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	6839      	ldr	r1, [r7, #0]
 801082e:	4610      	mov	r0, r2
 8010830:	4798      	blx	r3
    currentGroupTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8010832:	4b05      	ldr	r3, [pc, #20]	; (8010848 <_ZN10TestResult19currentGroupStartedEP10UtestShell+0x34>)
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	4798      	blx	r3
 8010838:	4603      	mov	r3, r0
 801083a:	461a      	mov	r2, r3
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8010840:	bf00      	nop
 8010842:	3708      	adds	r7, #8
 8010844:	46bd      	mov	sp, r7
 8010846:	bd80      	pop	{r7, pc}
 8010848:	200000a8 	.word	0x200000a8

0801084c <_ZN10TestResult17currentGroupEndedEP10UtestShell>:

void TestResult::currentGroupEnded(UtestShell* /*test*/)
{
 801084c:	b580      	push	{r7, lr}
 801084e:	b082      	sub	sp, #8
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
 8010854:	6039      	str	r1, [r7, #0]
    currentGroupTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentGroupTimeStarted_;
 8010856:	4b0c      	ldr	r3, [pc, #48]	; (8010888 <_ZN10TestResult17currentGroupEndedEP10UtestShell+0x3c>)
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	4798      	blx	r3
 801085c:	4603      	mov	r3, r0
 801085e:	461a      	mov	r2, r3
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010864:	1ad2      	subs	r2, r2, r3
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	635a      	str	r2, [r3, #52]	; 0x34
    output_.printCurrentGroupEnded(*this);
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	685a      	ldr	r2, [r3, #4]
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	685b      	ldr	r3, [r3, #4]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	331c      	adds	r3, #28
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	6879      	ldr	r1, [r7, #4]
 801087a:	4610      	mov	r0, r2
 801087c:	4798      	blx	r3
}
 801087e:	bf00      	nop
 8010880:	3708      	adds	r7, #8
 8010882:	46bd      	mov	sp, r7
 8010884:	bd80      	pop	{r7, pc}
 8010886:	bf00      	nop
 8010888:	200000a8 	.word	0x200000a8

0801088c <_ZN10TestResult18currentTestStartedEP10UtestShell>:

void TestResult::currentTestStarted(UtestShell* test)
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b082      	sub	sp, #8
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
 8010894:	6039      	str	r1, [r7, #0]
    output_.printCurrentTestStarted(*test);
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	685a      	ldr	r2, [r3, #4]
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	685b      	ldr	r3, [r3, #4]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	3310      	adds	r3, #16
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	6839      	ldr	r1, [r7, #0]
 80108a6:	4610      	mov	r0, r2
 80108a8:	4798      	blx	r3
    currentTestTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 80108aa:	4b05      	ldr	r3, [pc, #20]	; (80108c0 <_ZN10TestResult18currentTestStartedEP10UtestShell+0x34>)
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	4798      	blx	r3
 80108b0:	4603      	mov	r3, r0
 80108b2:	461a      	mov	r2, r3
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80108b8:	bf00      	nop
 80108ba:	3708      	adds	r7, #8
 80108bc:	46bd      	mov	sp, r7
 80108be:	bd80      	pop	{r7, pc}
 80108c0:	200000a8 	.word	0x200000a8

080108c4 <_ZN10TestResult5printEPKc>:

void TestResult::print(const char* text)
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b082      	sub	sp, #8
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
 80108cc:	6039      	str	r1, [r7, #0]
    output_.print(text);
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	685a      	ldr	r2, [r3, #4]
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	685b      	ldr	r3, [r3, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	332c      	adds	r3, #44	; 0x2c
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	6839      	ldr	r1, [r7, #0]
 80108de:	4610      	mov	r0, r2
 80108e0:	4798      	blx	r3
}
 80108e2:	bf00      	nop
 80108e4:	3708      	adds	r7, #8
 80108e6:	46bd      	mov	sp, r7
 80108e8:	bd80      	pop	{r7, pc}

080108ea <_ZN10TestResult16printVeryVerboseEPKc>:

void TestResult::printVeryVerbose(const char* text)
{
 80108ea:	b580      	push	{r7, lr}
 80108ec:	b082      	sub	sp, #8
 80108ee:	af00      	add	r7, sp, #0
 80108f0:	6078      	str	r0, [r7, #4]
 80108f2:	6039      	str	r1, [r7, #0]
    output_.printVeryVerbose(text);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	685a      	ldr	r2, [r3, #4]
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	685b      	ldr	r3, [r3, #4]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	3348      	adds	r3, #72	; 0x48
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	6839      	ldr	r1, [r7, #0]
 8010904:	4610      	mov	r0, r2
 8010906:	4798      	blx	r3
}
 8010908:	bf00      	nop
 801090a:	3708      	adds	r7, #8
 801090c:	46bd      	mov	sp, r7
 801090e:	bd80      	pop	{r7, pc}

08010910 <_ZN10TestResult16currentTestEndedEP10UtestShell>:

void TestResult::currentTestEnded(UtestShell* /*test*/)
{
 8010910:	b580      	push	{r7, lr}
 8010912:	b082      	sub	sp, #8
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
 8010918:	6039      	str	r1, [r7, #0]
    currentTestTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentTestTimeStarted_;
 801091a:	4b0c      	ldr	r3, [pc, #48]	; (801094c <_ZN10TestResult16currentTestEndedEP10UtestShell+0x3c>)
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	4798      	blx	r3
 8010920:	4603      	mov	r3, r0
 8010922:	461a      	mov	r2, r3
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010928:	1ad2      	subs	r2, r2, r3
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	62da      	str	r2, [r3, #44]	; 0x2c
    output_.printCurrentTestEnded(*this);
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	685a      	ldr	r2, [r3, #4]
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	685b      	ldr	r3, [r3, #4]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	3314      	adds	r3, #20
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	6879      	ldr	r1, [r7, #4]
 801093e:	4610      	mov	r0, r2
 8010940:	4798      	blx	r3

}
 8010942:	bf00      	nop
 8010944:	3708      	adds	r7, #8
 8010946:	46bd      	mov	sp, r7
 8010948:	bd80      	pop	{r7, pc}
 801094a:	bf00      	nop
 801094c:	200000a8 	.word	0x200000a8

08010950 <_ZN10TestResult10addFailureERK11TestFailure>:

void TestResult::addFailure(const TestFailure& failure)
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b082      	sub	sp, #8
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
 8010958:	6039      	str	r1, [r7, #0]
    output_.printFailure(failure);
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	685a      	ldr	r2, [r3, #4]
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	685b      	ldr	r3, [r3, #4]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	333c      	adds	r3, #60	; 0x3c
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	6839      	ldr	r1, [r7, #0]
 801096a:	4610      	mov	r0, r2
 801096c:	4798      	blx	r3
    failureCount_++;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	695b      	ldr	r3, [r3, #20]
 8010972:	1c5a      	adds	r2, r3, #1
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	615a      	str	r2, [r3, #20]
}
 8010978:	bf00      	nop
 801097a:	3708      	adds	r7, #8
 801097c:	46bd      	mov	sp, r7
 801097e:	bd80      	pop	{r7, pc}

08010980 <_ZN10TestResult9countTestEv>:

void TestResult::countTest()
{
 8010980:	b480      	push	{r7}
 8010982:	b083      	sub	sp, #12
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
    testCount_++;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	689b      	ldr	r3, [r3, #8]
 801098c:	1c5a      	adds	r2, r3, #1
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	609a      	str	r2, [r3, #8]
}
 8010992:	bf00      	nop
 8010994:	370c      	adds	r7, #12
 8010996:	46bd      	mov	sp, r7
 8010998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099c:	4770      	bx	lr

0801099e <_ZN10TestResult8countRunEv>:

void TestResult::countRun()
{
 801099e:	b480      	push	{r7}
 80109a0:	b083      	sub	sp, #12
 80109a2:	af00      	add	r7, sp, #0
 80109a4:	6078      	str	r0, [r7, #4]
    runCount_++;
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	68db      	ldr	r3, [r3, #12]
 80109aa:	1c5a      	adds	r2, r3, #1
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	60da      	str	r2, [r3, #12]
}
 80109b0:	bf00      	nop
 80109b2:	370c      	adds	r7, #12
 80109b4:	46bd      	mov	sp, r7
 80109b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ba:	4770      	bx	lr

080109bc <_ZN10TestResult10countCheckEv>:

void TestResult::countCheck()
{
 80109bc:	b480      	push	{r7}
 80109be:	b083      	sub	sp, #12
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
    checkCount_++;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	691b      	ldr	r3, [r3, #16]
 80109c8:	1c5a      	adds	r2, r3, #1
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	611a      	str	r2, [r3, #16]
}
 80109ce:	bf00      	nop
 80109d0:	370c      	adds	r7, #12
 80109d2:	46bd      	mov	sp, r7
 80109d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d8:	4770      	bx	lr

080109da <_ZN10TestResult16countFilteredOutEv>:

void TestResult::countFilteredOut()
{
 80109da:	b480      	push	{r7}
 80109dc:	b083      	sub	sp, #12
 80109de:	af00      	add	r7, sp, #0
 80109e0:	6078      	str	r0, [r7, #4]
    filteredOutCount_++;
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	699b      	ldr	r3, [r3, #24]
 80109e6:	1c5a      	adds	r2, r3, #1
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	619a      	str	r2, [r3, #24]
}
 80109ec:	bf00      	nop
 80109ee:	370c      	adds	r7, #12
 80109f0:	46bd      	mov	sp, r7
 80109f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f6:	4770      	bx	lr

080109f8 <_ZN10TestResult12countIgnoredEv>:

void TestResult::countIgnored()
{
 80109f8:	b480      	push	{r7}
 80109fa:	b083      	sub	sp, #12
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
    ignoredCount_++;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	69db      	ldr	r3, [r3, #28]
 8010a04:	1c5a      	adds	r2, r3, #1
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	61da      	str	r2, [r3, #28]
}
 8010a0a:	bf00      	nop
 8010a0c:	370c      	adds	r7, #12
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a14:	4770      	bx	lr
	...

08010a18 <_ZN10TestResult12testsStartedEv>:

void TestResult::testsStarted()
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b082      	sub	sp, #8
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
    timeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8010a20:	4b09      	ldr	r3, [pc, #36]	; (8010a48 <_ZN10TestResult12testsStartedEv+0x30>)
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	4798      	blx	r3
 8010a26:	4603      	mov	r3, r0
 8010a28:	461a      	mov	r2, r3
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	625a      	str	r2, [r3, #36]	; 0x24
    output_.printTestsStarted();
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	685a      	ldr	r2, [r3, #4]
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	685b      	ldr	r3, [r3, #4]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	3308      	adds	r3, #8
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	4610      	mov	r0, r2
 8010a3e:	4798      	blx	r3
}
 8010a40:	bf00      	nop
 8010a42:	3708      	adds	r7, #8
 8010a44:	46bd      	mov	sp, r7
 8010a46:	bd80      	pop	{r7, pc}
 8010a48:	200000a8 	.word	0x200000a8

08010a4c <_ZN10TestResult10testsEndedEv>:

void TestResult::testsEnded()
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b084      	sub	sp, #16
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
    size_t timeEnded = (size_t) GetPlatformSpecificTimeInMillis();
 8010a54:	4b0c      	ldr	r3, [pc, #48]	; (8010a88 <_ZN10TestResult10testsEndedEv+0x3c>)
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	4798      	blx	r3
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	60fb      	str	r3, [r7, #12]
    totalExecutionTime_ = timeEnded - timeStarted_;
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a62:	68fa      	ldr	r2, [r7, #12]
 8010a64:	1ad2      	subs	r2, r2, r3
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	621a      	str	r2, [r3, #32]
    output_.printTestsEnded(*this);
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	685a      	ldr	r2, [r3, #4]
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	685b      	ldr	r3, [r3, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	330c      	adds	r3, #12
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	6879      	ldr	r1, [r7, #4]
 8010a7a:	4610      	mov	r0, r2
 8010a7c:	4798      	blx	r3
}
 8010a7e:	bf00      	nop
 8010a80:	3710      	adds	r7, #16
 8010a82:	46bd      	mov	sp, r7
 8010a84:	bd80      	pop	{r7, pc}
 8010a86:	bf00      	nop
 8010a88:	200000a8 	.word	0x200000a8

08010a8c <_ZNK10TestResult21getTotalExecutionTimeEv>:

size_t TestResult::getTotalExecutionTime() const
{
 8010a8c:	b480      	push	{r7}
 8010a8e:	b083      	sub	sp, #12
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
    return totalExecutionTime_;
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	6a1b      	ldr	r3, [r3, #32]
}
 8010a98:	4618      	mov	r0, r3
 8010a9a:	370c      	adds	r7, #12
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa2:	4770      	bx	lr

08010aa4 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>:
{
    totalExecutionTime_ = exTime;
}

size_t TestResult::getCurrentTestTotalExecutionTime() const
{
 8010aa4:	b480      	push	{r7}
 8010aa6:	b083      	sub	sp, #12
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	6078      	str	r0, [r7, #4]
    return currentTestTotalExecutionTime_;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	370c      	adds	r7, #12
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aba:	4770      	bx	lr

08010abc <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>:

size_t TestResult::getCurrentGroupTotalExecutionTime() const
{
 8010abc:	b480      	push	{r7}
 8010abe:	b083      	sub	sp, #12
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
    return currentGroupTotalExecutionTime_;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8010ac8:	4618      	mov	r0, r3
 8010aca:	370c      	adds	r7, #12
 8010acc:	46bd      	mov	sp, r7
 8010ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad2:	4770      	bx	lr

08010ad4 <_Z13doubles_equalddd>:
#if defined(__GNUC__) && __GNUC__ >= 11
# define NEEDS_DISABLE_NULL_WARNING
#endif /* GCC >= 11 */

bool doubles_equal(double d1, double d2, double threshold)
{
 8010ad4:	b590      	push	{r4, r7, lr}
 8010ad6:	b087      	sub	sp, #28
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	ed87 0b04 	vstr	d0, [r7, #16]
 8010ade:	ed87 1b02 	vstr	d1, [r7, #8]
 8010ae2:	ed87 2b00 	vstr	d2, [r7]
    if (PlatformSpecificIsNan(d1) || PlatformSpecificIsNan(d2) || PlatformSpecificIsNan(threshold))
 8010ae6:	4b2c      	ldr	r3, [pc, #176]	; (8010b98 <_Z13doubles_equalddd+0xc4>)
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	ed97 0b04 	vldr	d0, [r7, #16]
 8010aee:	4798      	blx	r3
 8010af0:	4603      	mov	r3, r0
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d10f      	bne.n	8010b16 <_Z13doubles_equalddd+0x42>
 8010af6:	4b28      	ldr	r3, [pc, #160]	; (8010b98 <_Z13doubles_equalddd+0xc4>)
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	ed97 0b02 	vldr	d0, [r7, #8]
 8010afe:	4798      	blx	r3
 8010b00:	4603      	mov	r3, r0
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d107      	bne.n	8010b16 <_Z13doubles_equalddd+0x42>
 8010b06:	4b24      	ldr	r3, [pc, #144]	; (8010b98 <_Z13doubles_equalddd+0xc4>)
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	ed97 0b00 	vldr	d0, [r7]
 8010b0e:	4798      	blx	r3
 8010b10:	4603      	mov	r3, r0
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d001      	beq.n	8010b1a <_Z13doubles_equalddd+0x46>
 8010b16:	2301      	movs	r3, #1
 8010b18:	e000      	b.n	8010b1c <_Z13doubles_equalddd+0x48>
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d001      	beq.n	8010b24 <_Z13doubles_equalddd+0x50>
        return false;
 8010b20:	2300      	movs	r3, #0
 8010b22:	e035      	b.n	8010b90 <_Z13doubles_equalddd+0xbc>

    if (PlatformSpecificIsInf(d1) && PlatformSpecificIsInf(d2))
 8010b24:	4b1d      	ldr	r3, [pc, #116]	; (8010b9c <_Z13doubles_equalddd+0xc8>)
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	ed97 0b04 	vldr	d0, [r7, #16]
 8010b2c:	4798      	blx	r3
 8010b2e:	4603      	mov	r3, r0
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d009      	beq.n	8010b48 <_Z13doubles_equalddd+0x74>
 8010b34:	4b19      	ldr	r3, [pc, #100]	; (8010b9c <_Z13doubles_equalddd+0xc8>)
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	ed97 0b02 	vldr	d0, [r7, #8]
 8010b3c:	4798      	blx	r3
 8010b3e:	4603      	mov	r3, r0
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d001      	beq.n	8010b48 <_Z13doubles_equalddd+0x74>
 8010b44:	2301      	movs	r3, #1
 8010b46:	e000      	b.n	8010b4a <_Z13doubles_equalddd+0x76>
 8010b48:	2300      	movs	r3, #0
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d001      	beq.n	8010b52 <_Z13doubles_equalddd+0x7e>
    {
        return true;
 8010b4e:	2301      	movs	r3, #1
 8010b50:	e01e      	b.n	8010b90 <_Z13doubles_equalddd+0xbc>
    }

    return PlatformSpecificFabs(d1 - d2) <= threshold;
 8010b52:	4b13      	ldr	r3, [pc, #76]	; (8010ba0 <_Z13doubles_equalddd+0xcc>)
 8010b54:	681c      	ldr	r4, [r3, #0]
 8010b56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010b5a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8010b5e:	f7ef fbd3 	bl	8000308 <__aeabi_dsub>
 8010b62:	4602      	mov	r2, r0
 8010b64:	460b      	mov	r3, r1
 8010b66:	ec43 2b17 	vmov	d7, r2, r3
 8010b6a:	eeb0 0a47 	vmov.f32	s0, s14
 8010b6e:	eef0 0a67 	vmov.f32	s1, s15
 8010b72:	47a0      	blx	r4
 8010b74:	ec53 2b10 	vmov	r2, r3, d0
 8010b78:	2101      	movs	r1, #1
 8010b7a:	460c      	mov	r4, r1
 8010b7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010b80:	f7ef fdee 	bl	8000760 <__aeabi_dcmpge>
 8010b84:	4603      	mov	r3, r0
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d101      	bne.n	8010b8e <_Z13doubles_equalddd+0xba>
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	461c      	mov	r4, r3
 8010b8e:	b2e3      	uxtb	r3, r4
}
 8010b90:	4618      	mov	r0, r3
 8010b92:	371c      	adds	r7, #28
 8010b94:	46bd      	mov	sp, r7
 8010b96:	bd90      	pop	{r4, r7, pc}
 8010b98:	200000e8 	.word	0x200000e8
 8010b9c:	200000ec 	.word	0x200000ec
 8010ba0:	200000dc 	.word	0x200000dc

08010ba4 <_ZN22OutsideTestRunnerUTest13getTestResultEv>:
 */
class OutsideTestRunnerUTest: public UtestShell
{
public:
    static OutsideTestRunnerUTest& instance();
    virtual TestResult& getTestResult()
 8010ba4:	b480      	push	{r7}
 8010ba6:	b083      	sub	sp, #12
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
    {
        return defaultTestResult;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	332c      	adds	r3, #44	; 0x2c
    }
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	370c      	adds	r7, #12
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bba:	4770      	bx	lr

08010bbc <_ZN22OutsideTestRunnerUTestD1Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 8010bbc:	b580      	push	{r7, lr}
 8010bbe:	b082      	sub	sp, #8
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	6078      	str	r0, [r7, #4]
    {
 8010bc4:	4a0a      	ldr	r2, [pc, #40]	; (8010bf0 <_ZN22OutsideTestRunnerUTestD1Ev+0x34>)
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	601a      	str	r2, [r3, #0]
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	332c      	adds	r3, #44	; 0x2c
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f7ff fe00 	bl	80107d4 <_ZN10TestResultD1Ev>
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	331c      	adds	r3, #28
 8010bd8:	4618      	mov	r0, r3
 8010bda:	f7f6 f815 	bl	8006c08 <_ZN17ConsoleTestOutputD1Ev>
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	4618      	mov	r0, r3
 8010be2:	f000 f943 	bl	8010e6c <_ZN10UtestShellD1Ev>
    }
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	4618      	mov	r0, r3
 8010bea:	3708      	adds	r7, #8
 8010bec:	46bd      	mov	sp, r7
 8010bee:	bd80      	pop	{r7, pc}
 8010bf0:	08025dc8 	.word	0x08025dc8

08010bf4 <_ZN22OutsideTestRunnerUTestD0Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b082      	sub	sp, #8
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
    }
 8010bfc:	6878      	ldr	r0, [r7, #4]
 8010bfe:	f7ff ffdd 	bl	8010bbc <_ZN22OutsideTestRunnerUTestD1Ev>
 8010c02:	2164      	movs	r1, #100	; 0x64
 8010c04:	6878      	ldr	r0, [r7, #4]
 8010c06:	f7f7 fd03 	bl	8008610 <_ZdlPvj>
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	3708      	adds	r7, #8
 8010c10:	46bd      	mov	sp, r7
 8010c12:	bd80      	pop	{r7, pc}

08010c14 <_ZN22OutsideTestRunnerUTestC1Ev>:
private:
    OutsideTestRunnerUTest() :
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b084      	sub	sp, #16
 8010c18:	af02      	add	r7, sp, #8
 8010c1a:	6078      	str	r0, [r7, #4]
        UtestShell("\n\t NOTE: Assertion happened without being in a test run (perhaps in main?)", "\n\t       Something is very wrong. Check this assertion and fix", "unknown file", 0),
                defaultTestResult(defaultOutput)
 8010c1c:	6878      	ldr	r0, [r7, #4]
 8010c1e:	2300      	movs	r3, #0
 8010c20:	9300      	str	r3, [sp, #0]
 8010c22:	4b0d      	ldr	r3, [pc, #52]	; (8010c58 <_ZN22OutsideTestRunnerUTestC1Ev+0x44>)
 8010c24:	4a0d      	ldr	r2, [pc, #52]	; (8010c5c <_ZN22OutsideTestRunnerUTestC1Ev+0x48>)
 8010c26:	490e      	ldr	r1, [pc, #56]	; (8010c60 <_ZN22OutsideTestRunnerUTestC1Ev+0x4c>)
 8010c28:	f000 f8f8 	bl	8010e1c <_ZN10UtestShellC1EPKcS1_S1_j>
 8010c2c:	4a0d      	ldr	r2, [pc, #52]	; (8010c64 <_ZN22OutsideTestRunnerUTestC1Ev+0x50>)
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	601a      	str	r2, [r3, #0]
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	331c      	adds	r3, #28
 8010c36:	4618      	mov	r0, r3
 8010c38:	f7f5 ffd4 	bl	8006be4 <_ZN17ConsoleTestOutputC1Ev>
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	331c      	adds	r3, #28
 8010c46:	4619      	mov	r1, r3
 8010c48:	4610      	mov	r0, r2
 8010c4a:	f7ff fd8b 	bl	8010764 <_ZN10TestResultC1ER10TestOutput>
    {
    }
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	4618      	mov	r0, r3
 8010c52:	3708      	adds	r7, #8
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}
 8010c58:	08022c60 	.word	0x08022c60
 8010c5c:	08022c70 	.word	0x08022c70
 8010c60:	08022cb0 	.word	0x08022cb0
 8010c64:	08025dc8 	.word	0x08025dc8

08010c68 <__tcf_0>:
    TestResult defaultTestResult;
};

OutsideTestRunnerUTest& OutsideTestRunnerUTest::instance()
{
    static OutsideTestRunnerUTest instance_;
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	af00      	add	r7, sp, #0
 8010c6c:	4801      	ldr	r0, [pc, #4]	; (8010c74 <__tcf_0+0xc>)
 8010c6e:	f7ff ffa5 	bl	8010bbc <_ZN22OutsideTestRunnerUTestD1Ev>
 8010c72:	bd80      	pop	{r7, pc}
 8010c74:	200008f0 	.word	0x200008f0

08010c78 <_ZN22OutsideTestRunnerUTest8instanceEv>:
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	af00      	add	r7, sp, #0
    static OutsideTestRunnerUTest instance_;
 8010c7c:	4b12      	ldr	r3, [pc, #72]	; (8010cc8 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8010c7e:	781b      	ldrb	r3, [r3, #0]
 8010c80:	f3bf 8f5b 	dmb	ish
 8010c84:	b2db      	uxtb	r3, r3
 8010c86:	f003 0301 	and.w	r3, r3, #1
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	bf0c      	ite	eq
 8010c8e:	2301      	moveq	r3, #1
 8010c90:	2300      	movne	r3, #0
 8010c92:	b2db      	uxtb	r3, r3
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d013      	beq.n	8010cc0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 8010c98:	480b      	ldr	r0, [pc, #44]	; (8010cc8 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8010c9a:	f00c ff29 	bl	801daf0 <__cxa_guard_acquire>
 8010c9e:	4603      	mov	r3, r0
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	bf14      	ite	ne
 8010ca4:	2301      	movne	r3, #1
 8010ca6:	2300      	moveq	r3, #0
 8010ca8:	b2db      	uxtb	r3, r3
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d008      	beq.n	8010cc0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 8010cae:	4807      	ldr	r0, [pc, #28]	; (8010ccc <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
 8010cb0:	f7ff ffb0 	bl	8010c14 <_ZN22OutsideTestRunnerUTestC1Ev>
 8010cb4:	4804      	ldr	r0, [pc, #16]	; (8010cc8 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8010cb6:	f00c ff27 	bl	801db08 <__cxa_guard_release>
 8010cba:	4805      	ldr	r0, [pc, #20]	; (8010cd0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x58>)
 8010cbc:	f00c ff4b 	bl	801db56 <atexit>
    return instance_;
 8010cc0:	4b02      	ldr	r3, [pc, #8]	; (8010ccc <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
}
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	bd80      	pop	{r7, pc}
 8010cc6:	bf00      	nop
 8010cc8:	20000954 	.word	0x20000954
 8010ccc:	200008f0 	.word	0x200008f0
 8010cd0:	08010c69 	.word	0x08010c69

08010cd4 <helperDoTestSetup>:
 */

extern "C" {

    static void helperDoTestSetup(void* data)
    {
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b082      	sub	sp, #8
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->setup();
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	330c      	adds	r3, #12
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	6878      	ldr	r0, [r7, #4]
 8010ce6:	4798      	blx	r3
    }
 8010ce8:	bf00      	nop
 8010cea:	3708      	adds	r7, #8
 8010cec:	46bd      	mov	sp, r7
 8010cee:	bd80      	pop	{r7, pc}

08010cf0 <helperDoTestBody>:

    static void helperDoTestBody(void* data)
    {
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b082      	sub	sp, #8
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->testBody();
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	3314      	adds	r3, #20
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	6878      	ldr	r0, [r7, #4]
 8010d02:	4798      	blx	r3
    }
 8010d04:	bf00      	nop
 8010d06:	3708      	adds	r7, #8
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	bd80      	pop	{r7, pc}

08010d0c <helperDoTestTeardown>:

    static void helperDoTestTeardown(void* data)
    {
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b082      	sub	sp, #8
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->teardown();
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	3310      	adds	r3, #16
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	6878      	ldr	r0, [r7, #4]
 8010d1e:	4798      	blx	r3
    }
 8010d20:	bf00      	nop
 8010d22:	3708      	adds	r7, #8
 8010d24:	46bd      	mov	sp, r7
 8010d26:	bd80      	pop	{r7, pc}

08010d28 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>:

    struct HelperTestRunInfo
    {
        HelperTestRunInfo(UtestShell* shell, TestPlugin* plugin, TestResult* result) : shell_(shell), plugin_(plugin), result_(result){}
 8010d28:	b480      	push	{r7}
 8010d2a:	b085      	sub	sp, #20
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	60f8      	str	r0, [r7, #12]
 8010d30:	60b9      	str	r1, [r7, #8]
 8010d32:	607a      	str	r2, [r7, #4]
 8010d34:	603b      	str	r3, [r7, #0]
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	68ba      	ldr	r2, [r7, #8]
 8010d3a:	601a      	str	r2, [r3, #0]
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	687a      	ldr	r2, [r7, #4]
 8010d40:	605a      	str	r2, [r3, #4]
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	683a      	ldr	r2, [r7, #0]
 8010d46:	609a      	str	r2, [r3, #8]
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	3714      	adds	r7, #20
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d54:	4770      	bx	lr

08010d56 <helperDoRunOneTestInCurrentProcess>:
        TestPlugin* plugin_;
        TestResult* result_;
    };

    static void helperDoRunOneTestInCurrentProcess(void* data)
    {
 8010d56:	b580      	push	{r7, lr}
 8010d58:	b086      	sub	sp, #24
 8010d5a:	af00      	add	r7, sp, #0
 8010d5c:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 8010d62:	697b      	ldr	r3, [r7, #20]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 8010d68:	697b      	ldr	r3, [r7, #20]
 8010d6a:	685b      	ldr	r3, [r3, #4]
 8010d6c:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 8010d6e:	697b      	ldr	r3, [r7, #20]
 8010d70:	689b      	ldr	r3, [r3, #8]
 8010d72:	60bb      	str	r3, [r7, #8]

        shell->runOneTestInCurrentProcess(plugin, *result);
 8010d74:	693b      	ldr	r3, [r7, #16]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	3394      	adds	r3, #148	; 0x94
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	68ba      	ldr	r2, [r7, #8]
 8010d7e:	68f9      	ldr	r1, [r7, #12]
 8010d80:	6938      	ldr	r0, [r7, #16]
 8010d82:	4798      	blx	r3
    }
 8010d84:	bf00      	nop
 8010d86:	3718      	adds	r7, #24
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	bd80      	pop	{r7, pc}

08010d8c <helperDoRunOneTestSeperateProcess>:

    static void helperDoRunOneTestSeperateProcess(void* data)
    {
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b086      	sub	sp, #24
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 8010d98:	697b      	ldr	r3, [r7, #20]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 8010d9e:	697b      	ldr	r3, [r7, #20]
 8010da0:	685b      	ldr	r3, [r3, #4]
 8010da2:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 8010da4:	697b      	ldr	r3, [r7, #20]
 8010da6:	689b      	ldr	r3, [r3, #8]
 8010da8:	60bb      	str	r3, [r7, #8]
        PlatformSpecificRunTestInASeperateProcess(shell, plugin, result);
 8010daa:	4b05      	ldr	r3, [pc, #20]	; (8010dc0 <helperDoRunOneTestSeperateProcess+0x34>)
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	68ba      	ldr	r2, [r7, #8]
 8010db0:	68f9      	ldr	r1, [r7, #12]
 8010db2:	6938      	ldr	r0, [r7, #16]
 8010db4:	4798      	blx	r3
    }
 8010db6:	bf00      	nop
 8010db8:	3718      	adds	r7, #24
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	bd80      	pop	{r7, pc}
 8010dbe:	bf00      	nop
 8010dc0:	2000009c 	.word	0x2000009c

08010dc4 <_ZN10UtestShellC1Ev>:

const TestTerminator *UtestShell::currentTestTerminator_ = &normalTestTerminator;

/******************************** */

UtestShell::UtestShell() :
 8010dc4:	b480      	push	{r7}
 8010dc6:	b083      	sub	sp, #12
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
    group_("UndefinedTestGroup"), name_("UndefinedTest"), file_("UndefinedFile"), lineNumber_(0), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 8010dcc:	4a0f      	ldr	r2, [pc, #60]	; (8010e0c <_ZN10UtestShellC1Ev+0x48>)
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	601a      	str	r2, [r3, #0]
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	4a0e      	ldr	r2, [pc, #56]	; (8010e10 <_ZN10UtestShellC1Ev+0x4c>)
 8010dd6:	605a      	str	r2, [r3, #4]
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	4a0e      	ldr	r2, [pc, #56]	; (8010e14 <_ZN10UtestShellC1Ev+0x50>)
 8010ddc:	609a      	str	r2, [r3, #8]
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	4a0d      	ldr	r2, [pc, #52]	; (8010e18 <_ZN10UtestShellC1Ev+0x54>)
 8010de2:	60da      	str	r2, [r3, #12]
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	2200      	movs	r2, #0
 8010de8:	611a      	str	r2, [r3, #16]
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	2200      	movs	r2, #0
 8010dee:	615a      	str	r2, [r3, #20]
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	2200      	movs	r2, #0
 8010df4:	761a      	strb	r2, [r3, #24]
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	2200      	movs	r2, #0
 8010dfa:	765a      	strb	r2, [r3, #25]
{
}
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	4618      	mov	r0, r3
 8010e00:	370c      	adds	r7, #12
 8010e02:	46bd      	mov	sp, r7
 8010e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e08:	4770      	bx	lr
 8010e0a:	bf00      	nop
 8010e0c:	08025e88 	.word	0x08025e88
 8010e10:	08022cfc 	.word	0x08022cfc
 8010e14:	08022d10 	.word	0x08022d10
 8010e18:	08022d20 	.word	0x08022d20

08010e1c <_ZN10UtestShellC1EPKcS1_S1_j>:

UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber) :
 8010e1c:	b480      	push	{r7}
 8010e1e:	b085      	sub	sp, #20
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	60f8      	str	r0, [r7, #12]
 8010e24:	60b9      	str	r1, [r7, #8]
 8010e26:	607a      	str	r2, [r7, #4]
 8010e28:	603b      	str	r3, [r7, #0]
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 8010e2a:	4a0f      	ldr	r2, [pc, #60]	; (8010e68 <_ZN10UtestShellC1EPKcS1_S1_j+0x4c>)
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	601a      	str	r2, [r3, #0]
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	68ba      	ldr	r2, [r7, #8]
 8010e34:	605a      	str	r2, [r3, #4]
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	687a      	ldr	r2, [r7, #4]
 8010e3a:	609a      	str	r2, [r3, #8]
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	683a      	ldr	r2, [r7, #0]
 8010e40:	60da      	str	r2, [r3, #12]
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	69ba      	ldr	r2, [r7, #24]
 8010e46:	611a      	str	r2, [r3, #16]
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	615a      	str	r2, [r3, #20]
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	2200      	movs	r2, #0
 8010e52:	761a      	strb	r2, [r3, #24]
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	2200      	movs	r2, #0
 8010e58:	765a      	strb	r2, [r3, #25]
{
}
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	3714      	adds	r7, #20
 8010e60:	46bd      	mov	sp, r7
 8010e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e66:	4770      	bx	lr
 8010e68:	08025e88 	.word	0x08025e88

08010e6c <_ZN10UtestShellD1Ev>:
UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber, UtestShell* nextTest) :
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(nextTest), isRunAsSeperateProcess_(false), hasFailed_(false)
{
}

UtestShell::~UtestShell()
 8010e6c:	b480      	push	{r7}
 8010e6e:	b083      	sub	sp, #12
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
 8010e74:	4a04      	ldr	r2, [pc, #16]	; (8010e88 <_ZN10UtestShellD1Ev+0x1c>)
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	601a      	str	r2, [r3, #0]
{
}
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	370c      	adds	r7, #12
 8010e80:	46bd      	mov	sp, r7
 8010e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e86:	4770      	bx	lr
 8010e88:	08025e88 	.word	0x08025e88

08010e8c <_ZN10UtestShellD0Ev>:
UtestShell::~UtestShell()
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b082      	sub	sp, #8
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
}
 8010e94:	6878      	ldr	r0, [r7, #4]
 8010e96:	f7ff ffe9 	bl	8010e6c <_ZN10UtestShellD1Ev>
 8010e9a:	211c      	movs	r1, #28
 8010e9c:	6878      	ldr	r0, [r7, #4]
 8010e9e:	f7f7 fbb7 	bl	8008610 <_ZdlPvj>
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	3708      	adds	r7, #8
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	bd80      	pop	{r7, pc}

08010eac <_ZL18defaultCrashMethodv>:
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wnonnull"
#endif /* NEEDS_DISABLE_NULL_WARNING */

static void defaultCrashMethod()
{
 8010eac:	b580      	push	{r7, lr}
 8010eae:	b082      	sub	sp, #8
 8010eb0:	af00      	add	r7, sp, #0
    UtestShell* ptr = (UtestShell*) NULLPTR;
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	607b      	str	r3, [r7, #4]
    ptr->countTests();
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	3310      	adds	r3, #16
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	6878      	ldr	r0, [r7, #4]
 8010ec0:	4798      	blx	r3
}
 8010ec2:	bf00      	nop
 8010ec4:	3708      	adds	r7, #8
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bd80      	pop	{r7, pc}
	...

08010ecc <_ZN10UtestShell5crashEv>:
{
    pleaseCrashMeRightNow = defaultCrashMethod;
}

void UtestShell::crash()
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	af00      	add	r7, sp, #0
    pleaseCrashMeRightNow();
 8010ed0:	4b02      	ldr	r3, [pc, #8]	; (8010edc <_ZN10UtestShell5crashEv+0x10>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	4798      	blx	r3
}
 8010ed6:	bf00      	nop
 8010ed8:	bd80      	pop	{r7, pc}
 8010eda:	bf00      	nop
 8010edc:	20000098 	.word	0x20000098

08010ee0 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult>:

void UtestShell::runOneTest(TestPlugin* plugin, TestResult& result)
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b088      	sub	sp, #32
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	60f8      	str	r0, [r7, #12]
 8010ee8:	60b9      	str	r1, [r7, #8]
 8010eea:	607a      	str	r2, [r7, #4]
    hasFailed_ = false;
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	2200      	movs	r2, #0
 8010ef0:	765a      	strb	r2, [r3, #25]
    result.countRun();
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	3324      	adds	r3, #36	; 0x24
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	6878      	ldr	r0, [r7, #4]
 8010efc:	4798      	blx	r3
    HelperTestRunInfo runInfo(this, plugin, &result);
 8010efe:	f107 0014 	add.w	r0, r7, #20
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	68ba      	ldr	r2, [r7, #8]
 8010f06:	68f9      	ldr	r1, [r7, #12]
 8010f08:	f7ff ff0e 	bl	8010d28 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>
    if (isRunInSeperateProcess())
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	337c      	adds	r3, #124	; 0x7c
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	68f8      	ldr	r0, [r7, #12]
 8010f16:	4798      	blx	r3
 8010f18:	4603      	mov	r3, r0
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d007      	beq.n	8010f2e <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x4e>
        PlatformSpecificSetJmp(helperDoRunOneTestSeperateProcess, &runInfo);
 8010f1e:	4b09      	ldr	r3, [pc, #36]	; (8010f44 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	f107 0214 	add.w	r2, r7, #20
 8010f26:	4611      	mov	r1, r2
 8010f28:	4807      	ldr	r0, [pc, #28]	; (8010f48 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x68>)
 8010f2a:	4798      	blx	r3
    else
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
}
 8010f2c:	e006      	b.n	8010f3c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x5c>
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
 8010f2e:	4b05      	ldr	r3, [pc, #20]	; (8010f44 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	f107 0214 	add.w	r2, r7, #20
 8010f36:	4611      	mov	r1, r2
 8010f38:	4804      	ldr	r0, [pc, #16]	; (8010f4c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x6c>)
 8010f3a:	4798      	blx	r3
}
 8010f3c:	bf00      	nop
 8010f3e:	3720      	adds	r7, #32
 8010f40:	46bd      	mov	sp, r7
 8010f42:	bd80      	pop	{r7, pc}
 8010f44:	200000a4 	.word	0x200000a4
 8010f48:	08010d8d 	.word	0x08010d8d
 8010f4c:	08010d57 	.word	0x08010d57

08010f50 <_ZN10UtestShell10createTestEv>:

Utest* UtestShell::createTest()
{
 8010f50:	b590      	push	{r4, r7, lr}
 8010f52:	b083      	sub	sp, #12
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
    return new Utest();
 8010f58:	22d3      	movs	r2, #211	; 0xd3
 8010f5a:	4906      	ldr	r1, [pc, #24]	; (8010f74 <_ZN10UtestShell10createTestEv+0x24>)
 8010f5c:	2004      	movs	r0, #4
 8010f5e:	f7f7 fb43 	bl	80085e8 <_ZnwjPKci>
 8010f62:	4604      	mov	r4, r0
 8010f64:	4620      	mov	r0, r4
 8010f66:	f001 fb0f 	bl	8012588 <_ZN5UtestC1Ev>
 8010f6a:	4623      	mov	r3, r4
}
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	370c      	adds	r7, #12
 8010f70:	46bd      	mov	sp, r7
 8010f72:	bd90      	pop	{r4, r7, pc}
 8010f74:	08022d30 	.word	0x08022d30

08010f78 <_ZN10UtestShell11destroyTestEP5Utest>:

void UtestShell::destroyTest(Utest* test)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b082      	sub	sp, #8
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
 8010f80:	6039      	str	r1, [r7, #0]
    delete test;
 8010f82:	683b      	ldr	r3, [r7, #0]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d004      	beq.n	8010f92 <_ZN10UtestShell11destroyTestEP5Utest+0x1a>
 8010f88:	681a      	ldr	r2, [r3, #0]
 8010f8a:	3204      	adds	r2, #4
 8010f8c:	6812      	ldr	r2, [r2, #0]
 8010f8e:	4618      	mov	r0, r3
 8010f90:	4790      	blx	r2
}
 8010f92:	bf00      	nop
 8010f94:	3708      	adds	r7, #8
 8010f96:	46bd      	mov	sp, r7
 8010f98:	bd80      	pop	{r7, pc}
	...

08010f9c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult>:

void UtestShell::runOneTestInCurrentProcess(TestPlugin* plugin, TestResult& result)
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b088      	sub	sp, #32
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	60f8      	str	r0, [r7, #12]
 8010fa4:	60b9      	str	r1, [r7, #8]
 8010fa6:	607a      	str	r2, [r7, #4]
    result.printVeryVerbose("\n-- before runAllPreTestAction: ");
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	333c      	adds	r3, #60	; 0x3c
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	4940      	ldr	r1, [pc, #256]	; (80110b4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x118>)
 8010fb2:	6878      	ldr	r0, [r7, #4]
 8010fb4:	4798      	blx	r3
    plugin->runAllPreTestAction(*this, result);
 8010fb6:	68bb      	ldr	r3, [r7, #8]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	3314      	adds	r3, #20
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	687a      	ldr	r2, [r7, #4]
 8010fc0:	68f9      	ldr	r1, [r7, #12]
 8010fc2:	68b8      	ldr	r0, [r7, #8]
 8010fc4:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPreTestAction: ");
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	333c      	adds	r3, #60	; 0x3c
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	493a      	ldr	r1, [pc, #232]	; (80110b8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x11c>)
 8010fd0:	6878      	ldr	r0, [r7, #4]
 8010fd2:	4798      	blx	r3

    //save test context, so that test class can be tested
    UtestShell* savedTest = UtestShell::getCurrent();
 8010fd4:	f001 faae 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 8010fd8:	61f8      	str	r0, [r7, #28]
    TestResult* savedResult = UtestShell::getTestResult();
 8010fda:	68f8      	ldr	r0, [r7, #12]
 8010fdc:	f001 fa90 	bl	8012500 <_ZN10UtestShell13getTestResultEv>
 8010fe0:	61b8      	str	r0, [r7, #24]

    UtestShell::setTestResult(&result);
 8010fe2:	6879      	ldr	r1, [r7, #4]
 8010fe4:	68f8      	ldr	r0, [r7, #12]
 8010fe6:	f001 fa6b 	bl	80124c0 <_ZN10UtestShell13setTestResultEP10TestResult>
    UtestShell::setCurrentTest(this);
 8010fea:	68f9      	ldr	r1, [r7, #12]
 8010fec:	68f8      	ldr	r0, [r7, #12]
 8010fee:	f001 fa77 	bl	80124e0 <_ZN10UtestShell14setCurrentTestEPS_>

    result.printVeryVerbose("\n---- before createTest: ");
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	333c      	adds	r3, #60	; 0x3c
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	4930      	ldr	r1, [pc, #192]	; (80110bc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x120>)
 8010ffc:	6878      	ldr	r0, [r7, #4]
 8010ffe:	4798      	blx	r3
    Utest* testToRun = createTest();
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	3388      	adds	r3, #136	; 0x88
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	68f8      	ldr	r0, [r7, #12]
 801100a:	4798      	blx	r3
 801100c:	6178      	str	r0, [r7, #20]
    result.printVeryVerbose("\n---- after createTest: ");
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	333c      	adds	r3, #60	; 0x3c
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	492a      	ldr	r1, [pc, #168]	; (80110c0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x124>)
 8011018:	6878      	ldr	r0, [r7, #4]
 801101a:	4798      	blx	r3

    result.printVeryVerbose("\n------ before runTest: ");
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	333c      	adds	r3, #60	; 0x3c
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	4927      	ldr	r1, [pc, #156]	; (80110c4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x128>)
 8011026:	6878      	ldr	r0, [r7, #4]
 8011028:	4798      	blx	r3
    testToRun->run();
 801102a:	697b      	ldr	r3, [r7, #20]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	3308      	adds	r3, #8
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	6978      	ldr	r0, [r7, #20]
 8011034:	4798      	blx	r3
    result.printVeryVerbose("\n------ after runTest: ");
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	333c      	adds	r3, #60	; 0x3c
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	4922      	ldr	r1, [pc, #136]	; (80110c8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x12c>)
 8011040:	6878      	ldr	r0, [r7, #4]
 8011042:	4798      	blx	r3

    UtestShell::setCurrentTest(savedTest);
 8011044:	69f9      	ldr	r1, [r7, #28]
 8011046:	68f8      	ldr	r0, [r7, #12]
 8011048:	f001 fa4a 	bl	80124e0 <_ZN10UtestShell14setCurrentTestEPS_>
    UtestShell::setTestResult(savedResult);
 801104c:	69b9      	ldr	r1, [r7, #24]
 801104e:	68f8      	ldr	r0, [r7, #12]
 8011050:	f001 fa36 	bl	80124c0 <_ZN10UtestShell13setTestResultEP10TestResult>

    result.printVeryVerbose("\n---- before destroyTest: ");
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	333c      	adds	r3, #60	; 0x3c
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	491b      	ldr	r1, [pc, #108]	; (80110cc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x130>)
 801105e:	6878      	ldr	r0, [r7, #4]
 8011060:	4798      	blx	r3
    destroyTest(testToRun);
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	338c      	adds	r3, #140	; 0x8c
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	6979      	ldr	r1, [r7, #20]
 801106c:	68f8      	ldr	r0, [r7, #12]
 801106e:	4798      	blx	r3
    result.printVeryVerbose("\n---- after destroyTest: ");
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	333c      	adds	r3, #60	; 0x3c
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	4915      	ldr	r1, [pc, #84]	; (80110d0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x134>)
 801107a:	6878      	ldr	r0, [r7, #4]
 801107c:	4798      	blx	r3

    result.printVeryVerbose("\n-- before runAllPostTestAction: ");
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	333c      	adds	r3, #60	; 0x3c
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	4913      	ldr	r1, [pc, #76]	; (80110d4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x138>)
 8011088:	6878      	ldr	r0, [r7, #4]
 801108a:	4798      	blx	r3
    plugin->runAllPostTestAction(*this, result);
 801108c:	68bb      	ldr	r3, [r7, #8]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	3318      	adds	r3, #24
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	687a      	ldr	r2, [r7, #4]
 8011096:	68f9      	ldr	r1, [r7, #12]
 8011098:	68b8      	ldr	r0, [r7, #8]
 801109a:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPostTestAction: ");
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	333c      	adds	r3, #60	; 0x3c
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	490c      	ldr	r1, [pc, #48]	; (80110d8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x13c>)
 80110a6:	6878      	ldr	r0, [r7, #4]
 80110a8:	4798      	blx	r3
}
 80110aa:	bf00      	nop
 80110ac:	3720      	adds	r7, #32
 80110ae:	46bd      	mov	sp, r7
 80110b0:	bd80      	pop	{r7, pc}
 80110b2:	bf00      	nop
 80110b4:	08022d44 	.word	0x08022d44
 80110b8:	08022d68 	.word	0x08022d68
 80110bc:	08022d88 	.word	0x08022d88
 80110c0:	08022da4 	.word	0x08022da4
 80110c4:	08022dc0 	.word	0x08022dc0
 80110c8:	08022ddc 	.word	0x08022ddc
 80110cc:	08022df4 	.word	0x08022df4
 80110d0:	08022e10 	.word	0x08022e10
 80110d4:	08022e2c 	.word	0x08022e2c
 80110d8:	08022e50 	.word	0x08022e50

080110dc <_ZNK10UtestShell7getNextEv>:

UtestShell *UtestShell::getNext() const
{
 80110dc:	b480      	push	{r7}
 80110de:	b083      	sub	sp, #12
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
    return next_;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	695b      	ldr	r3, [r3, #20]
}
 80110e8:	4618      	mov	r0, r3
 80110ea:	370c      	adds	r7, #12
 80110ec:	46bd      	mov	sp, r7
 80110ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f2:	4770      	bx	lr

080110f4 <_ZN10UtestShell7addTestEPS_>:

UtestShell* UtestShell::addTest(UtestShell *test)
{
 80110f4:	b480      	push	{r7}
 80110f6:	b083      	sub	sp, #12
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	6078      	str	r0, [r7, #4]
 80110fc:	6039      	str	r1, [r7, #0]
    next_ = test;
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	683a      	ldr	r2, [r7, #0]
 8011102:	615a      	str	r2, [r3, #20]
    return this;
 8011104:	687b      	ldr	r3, [r7, #4]
}
 8011106:	4618      	mov	r0, r3
 8011108:	370c      	adds	r7, #12
 801110a:	46bd      	mov	sp, r7
 801110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011110:	4770      	bx	lr

08011112 <_ZN10UtestShell10countTestsEv>:

size_t UtestShell::countTests()
{
 8011112:	b580      	push	{r7, lr}
 8011114:	b082      	sub	sp, #8
 8011116:	af00      	add	r7, sp, #0
 8011118:	6078      	str	r0, [r7, #4]
    return next_ ? next_->countTests() + 1 : 1;
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	695b      	ldr	r3, [r3, #20]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d00b      	beq.n	801113a <_ZN10UtestShell10countTestsEv+0x28>
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	695a      	ldr	r2, [r3, #20]
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	695b      	ldr	r3, [r3, #20]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	3310      	adds	r3, #16
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	4610      	mov	r0, r2
 8011132:	4798      	blx	r3
 8011134:	4603      	mov	r3, r0
 8011136:	3301      	adds	r3, #1
 8011138:	e000      	b.n	801113c <_ZN10UtestShell10countTestsEv+0x2a>
 801113a:	2301      	movs	r3, #1
}
 801113c:	4618      	mov	r0, r3
 801113e:	3708      	adds	r7, #8
 8011140:	46bd      	mov	sp, r7
 8011142:	bd80      	pop	{r7, pc}

08011144 <_ZNK10UtestShell12getMacroNameEv>:

SimpleString UtestShell::getMacroName() const
{
 8011144:	b580      	push	{r7, lr}
 8011146:	b082      	sub	sp, #8
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
 801114c:	6039      	str	r1, [r7, #0]
    return "TEST";
 801114e:	4904      	ldr	r1, [pc, #16]	; (8011160 <_ZNK10UtestShell12getMacroNameEv+0x1c>)
 8011150:	6878      	ldr	r0, [r7, #4]
 8011152:	f7f9 fe0c 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
}
 8011156:	6878      	ldr	r0, [r7, #4]
 8011158:	3708      	adds	r7, #8
 801115a:	46bd      	mov	sp, r7
 801115c:	bd80      	pop	{r7, pc}
 801115e:	bf00      	nop
 8011160:	08022e74 	.word	0x08022e74

08011164 <_ZNK10UtestShell7getNameEv>:

const SimpleString UtestShell::getName() const
{
 8011164:	b580      	push	{r7, lr}
 8011166:	b082      	sub	sp, #8
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
 801116c:	6039      	str	r1, [r7, #0]
    return SimpleString(name_);
 801116e:	683b      	ldr	r3, [r7, #0]
 8011170:	689b      	ldr	r3, [r3, #8]
 8011172:	4619      	mov	r1, r3
 8011174:	6878      	ldr	r0, [r7, #4]
 8011176:	f7f9 fdfa 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
}
 801117a:	6878      	ldr	r0, [r7, #4]
 801117c:	3708      	adds	r7, #8
 801117e:	46bd      	mov	sp, r7
 8011180:	bd80      	pop	{r7, pc}

08011182 <_ZNK10UtestShell8getGroupEv>:

const SimpleString UtestShell::getGroup() const
{
 8011182:	b580      	push	{r7, lr}
 8011184:	b082      	sub	sp, #8
 8011186:	af00      	add	r7, sp, #0
 8011188:	6078      	str	r0, [r7, #4]
 801118a:	6039      	str	r1, [r7, #0]
    return SimpleString(group_);
 801118c:	683b      	ldr	r3, [r7, #0]
 801118e:	685b      	ldr	r3, [r3, #4]
 8011190:	4619      	mov	r1, r3
 8011192:	6878      	ldr	r0, [r7, #4]
 8011194:	f7f9 fdeb 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
}
 8011198:	6878      	ldr	r0, [r7, #4]
 801119a:	3708      	adds	r7, #8
 801119c:	46bd      	mov	sp, r7
 801119e:	bd80      	pop	{r7, pc}

080111a0 <_ZNK10UtestShell16getFormattedNameEv>:

SimpleString UtestShell::getFormattedName() const
{
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b082      	sub	sp, #8
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
 80111a8:	6039      	str	r1, [r7, #0]
    SimpleString formattedName(getMacroName());
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	33a0      	adds	r3, #160	; 0xa0
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	687a      	ldr	r2, [r7, #4]
 80111b4:	6839      	ldr	r1, [r7, #0]
 80111b6:	4610      	mov	r0, r2
 80111b8:	4798      	blx	r3
    formattedName += "(";
 80111ba:	490e      	ldr	r1, [pc, #56]	; (80111f4 <_ZNK10UtestShell16getFormattedNameEv+0x54>)
 80111bc:	6878      	ldr	r0, [r7, #4]
 80111be:	f7fa fa1d 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    formattedName += group_;
 80111c2:	683b      	ldr	r3, [r7, #0]
 80111c4:	685b      	ldr	r3, [r3, #4]
 80111c6:	4619      	mov	r1, r3
 80111c8:	6878      	ldr	r0, [r7, #4]
 80111ca:	f7fa fa17 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    formattedName += ", ";
 80111ce:	490a      	ldr	r1, [pc, #40]	; (80111f8 <_ZNK10UtestShell16getFormattedNameEv+0x58>)
 80111d0:	6878      	ldr	r0, [r7, #4]
 80111d2:	f7fa fa13 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    formattedName += name_;
 80111d6:	683b      	ldr	r3, [r7, #0]
 80111d8:	689b      	ldr	r3, [r3, #8]
 80111da:	4619      	mov	r1, r3
 80111dc:	6878      	ldr	r0, [r7, #4]
 80111de:	f7fa fa0d 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    formattedName += ")";
 80111e2:	4906      	ldr	r1, [pc, #24]	; (80111fc <_ZNK10UtestShell16getFormattedNameEv+0x5c>)
 80111e4:	6878      	ldr	r0, [r7, #4]
 80111e6:	f7fa fa09 	bl	800b5fc <_ZN12SimpleStringpLEPKc>

    return formattedName;
 80111ea:	bf00      	nop
}
 80111ec:	6878      	ldr	r0, [r7, #4]
 80111ee:	3708      	adds	r7, #8
 80111f0:	46bd      	mov	sp, r7
 80111f2:	bd80      	pop	{r7, pc}
 80111f4:	08022e7c 	.word	0x08022e7c
 80111f8:	08022e80 	.word	0x08022e80
 80111fc:	08022e84 	.word	0x08022e84

08011200 <_ZNK10UtestShell9hasFailedEv>:

bool UtestShell::hasFailed() const
{
 8011200:	b480      	push	{r7}
 8011202:	b083      	sub	sp, #12
 8011204:	af00      	add	r7, sp, #0
 8011206:	6078      	str	r0, [r7, #4]
    return hasFailed_;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	7e5b      	ldrb	r3, [r3, #25]
}
 801120c:	4618      	mov	r0, r3
 801120e:	370c      	adds	r7, #12
 8011210:	46bd      	mov	sp, r7
 8011212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011216:	4770      	bx	lr

08011218 <_ZN10UtestShell10countCheckEv>:

void UtestShell::countCheck()
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b082      	sub	sp, #8
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
    getTestResult()->countCheck();
 8011220:	6878      	ldr	r0, [r7, #4]
 8011222:	f001 f96d 	bl	8012500 <_ZN10UtestShell13getTestResultEv>
 8011226:	4603      	mov	r3, r0
 8011228:	681a      	ldr	r2, [r3, #0]
 801122a:	3228      	adds	r2, #40	; 0x28
 801122c:	6812      	ldr	r2, [r2, #0]
 801122e:	4618      	mov	r0, r3
 8011230:	4790      	blx	r2
}
 8011232:	bf00      	nop
 8011234:	3708      	adds	r7, #8
 8011236:	46bd      	mov	sp, r7
 8011238:	bd80      	pop	{r7, pc}

0801123a <_ZNK10UtestShell7willRunEv>:

bool UtestShell::willRun() const
{
 801123a:	b480      	push	{r7}
 801123c:	b083      	sub	sp, #12
 801123e:	af00      	add	r7, sp, #0
 8011240:	6078      	str	r0, [r7, #4]
    return true;
 8011242:	2301      	movs	r3, #1
}
 8011244:	4618      	mov	r0, r3
 8011246:	370c      	adds	r7, #12
 8011248:	46bd      	mov	sp, r7
 801124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124e:	4770      	bx	lr

08011250 <_ZNK10UtestShell22isRunInSeperateProcessEv>:

bool UtestShell::isRunInSeperateProcess() const
{
 8011250:	b480      	push	{r7}
 8011252:	b083      	sub	sp, #12
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
    return isRunAsSeperateProcess_;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	7e1b      	ldrb	r3, [r3, #24]
}
 801125c:	4618      	mov	r0, r3
 801125e:	370c      	adds	r7, #12
 8011260:	46bd      	mov	sp, r7
 8011262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011266:	4770      	bx	lr

08011268 <_ZN10UtestShell23setRunInSeperateProcessEv>:

void UtestShell::setRunInSeperateProcess()
{
 8011268:	b480      	push	{r7}
 801126a:	b083      	sub	sp, #12
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
    isRunAsSeperateProcess_ = true;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	2201      	movs	r2, #1
 8011274:	761a      	strb	r2, [r3, #24]
}
 8011276:	bf00      	nop
 8011278:	370c      	adds	r7, #12
 801127a:	46bd      	mov	sp, r7
 801127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011280:	4770      	bx	lr

08011282 <_ZN10UtestShell13setRunIgnoredEv>:


void UtestShell::setRunIgnored()
{
 8011282:	b480      	push	{r7}
 8011284:	b083      	sub	sp, #12
 8011286:	af00      	add	r7, sp, #0
 8011288:	6078      	str	r0, [r7, #4]

}
 801128a:	bf00      	nop
 801128c:	370c      	adds	r7, #12
 801128e:	46bd      	mov	sp, r7
 8011290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011294:	4770      	bx	lr

08011296 <_ZN10UtestShell11setFileNameEPKc>:

void UtestShell::setFileName(const char* fileName)
{
 8011296:	b480      	push	{r7}
 8011298:	b083      	sub	sp, #12
 801129a:	af00      	add	r7, sp, #0
 801129c:	6078      	str	r0, [r7, #4]
 801129e:	6039      	str	r1, [r7, #0]
    file_ = fileName;
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	683a      	ldr	r2, [r7, #0]
 80112a4:	60da      	str	r2, [r3, #12]
}
 80112a6:	bf00      	nop
 80112a8:	370c      	adds	r7, #12
 80112aa:	46bd      	mov	sp, r7
 80112ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b0:	4770      	bx	lr

080112b2 <_ZN10UtestShell13setLineNumberEj>:

void UtestShell::setLineNumber(size_t lineNumber)
{
 80112b2:	b480      	push	{r7}
 80112b4:	b083      	sub	sp, #12
 80112b6:	af00      	add	r7, sp, #0
 80112b8:	6078      	str	r0, [r7, #4]
 80112ba:	6039      	str	r1, [r7, #0]
    lineNumber_ = lineNumber;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	683a      	ldr	r2, [r7, #0]
 80112c0:	611a      	str	r2, [r3, #16]
}
 80112c2:	bf00      	nop
 80112c4:	370c      	adds	r7, #12
 80112c6:	46bd      	mov	sp, r7
 80112c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112cc:	4770      	bx	lr

080112ce <_ZN10UtestShell12setGroupNameEPKc>:

void UtestShell::setGroupName(const char* groupName)
{
 80112ce:	b480      	push	{r7}
 80112d0:	b083      	sub	sp, #12
 80112d2:	af00      	add	r7, sp, #0
 80112d4:	6078      	str	r0, [r7, #4]
 80112d6:	6039      	str	r1, [r7, #0]
    group_ = groupName;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	683a      	ldr	r2, [r7, #0]
 80112dc:	605a      	str	r2, [r3, #4]
}
 80112de:	bf00      	nop
 80112e0:	370c      	adds	r7, #12
 80112e2:	46bd      	mov	sp, r7
 80112e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e8:	4770      	bx	lr

080112ea <_ZN10UtestShell11setTestNameEPKc>:

void UtestShell::setTestName(const char* testName)
{
 80112ea:	b480      	push	{r7}
 80112ec:	b083      	sub	sp, #12
 80112ee:	af00      	add	r7, sp, #0
 80112f0:	6078      	str	r0, [r7, #4]
 80112f2:	6039      	str	r1, [r7, #0]
    name_ = testName;
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	683a      	ldr	r2, [r7, #0]
 80112f8:	609a      	str	r2, [r3, #8]
}
 80112fa:	bf00      	nop
 80112fc:	370c      	adds	r7, #12
 80112fe:	46bd      	mov	sp, r7
 8011300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011304:	4770      	bx	lr

08011306 <_ZNK10UtestShell7getFileEv>:

const SimpleString UtestShell::getFile() const
{
 8011306:	b580      	push	{r7, lr}
 8011308:	b082      	sub	sp, #8
 801130a:	af00      	add	r7, sp, #0
 801130c:	6078      	str	r0, [r7, #4]
 801130e:	6039      	str	r1, [r7, #0]
    return SimpleString(file_);
 8011310:	683b      	ldr	r3, [r7, #0]
 8011312:	68db      	ldr	r3, [r3, #12]
 8011314:	4619      	mov	r1, r3
 8011316:	6878      	ldr	r0, [r7, #4]
 8011318:	f7f9 fd29 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
}
 801131c:	6878      	ldr	r0, [r7, #4]
 801131e:	3708      	adds	r7, #8
 8011320:	46bd      	mov	sp, r7
 8011322:	bd80      	pop	{r7, pc}

08011324 <_ZNK10UtestShell13getLineNumberEv>:

size_t UtestShell::getLineNumber() const
{
 8011324:	b480      	push	{r7}
 8011326:	b083      	sub	sp, #12
 8011328:	af00      	add	r7, sp, #0
 801132a:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	691b      	ldr	r3, [r3, #16]
}
 8011330:	4618      	mov	r0, r3
 8011332:	370c      	adds	r7, #12
 8011334:	46bd      	mov	sp, r7
 8011336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133a:	4770      	bx	lr

0801133c <_ZNK10UtestShell5matchEPKcPK10TestFilter>:

bool UtestShell::match(const char* target, const TestFilter* filters) const
{
 801133c:	b590      	push	{r4, r7, lr}
 801133e:	b087      	sub	sp, #28
 8011340:	af00      	add	r7, sp, #0
 8011342:	60f8      	str	r0, [r7, #12]
 8011344:	60b9      	str	r1, [r7, #8]
 8011346:	607a      	str	r2, [r7, #4]
    if(filters == NULLPTR) return true;
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d101      	bne.n	8011352 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>
 801134e:	2301      	movs	r3, #1
 8011350:	e01f      	b.n	8011392 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>

    for(; filters != NULLPTR; filters = filters->getNext())
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d01b      	beq.n	8011390 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x54>
        if(filters->match(target)) return true;
 8011358:	f107 0310 	add.w	r3, r7, #16
 801135c:	68b9      	ldr	r1, [r7, #8]
 801135e:	4618      	mov	r0, r3
 8011360:	f7f9 fd05 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8011364:	f107 0310 	add.w	r3, r7, #16
 8011368:	4619      	mov	r1, r3
 801136a:	6878      	ldr	r0, [r7, #4]
 801136c:	f00c fb93 	bl	801da96 <_ZNK10TestFilter5matchERK12SimpleString>
 8011370:	4603      	mov	r3, r0
 8011372:	461c      	mov	r4, r3
 8011374:	f107 0310 	add.w	r3, r7, #16
 8011378:	4618      	mov	r0, r3
 801137a:	f7fa f8b0 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801137e:	2c00      	cmp	r4, #0
 8011380:	d001      	beq.n	8011386 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x4a>
 8011382:	2301      	movs	r3, #1
 8011384:	e005      	b.n	8011392 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>
    for(; filters != NULLPTR; filters = filters->getNext())
 8011386:	6878      	ldr	r0, [r7, #4]
 8011388:	f00c fb5f 	bl	801da4a <_ZNK10TestFilter7getNextEv>
 801138c:	6078      	str	r0, [r7, #4]
 801138e:	e7e0      	b.n	8011352 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>

    return false;
 8011390:	2300      	movs	r3, #0
}
 8011392:	4618      	mov	r0, r3
 8011394:	371c      	adds	r7, #28
 8011396:	46bd      	mov	sp, r7
 8011398:	bd90      	pop	{r4, r7, pc}

0801139a <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>:

bool UtestShell::shouldRun(const TestFilter* groupFilters, const TestFilter* nameFilters) const
{
 801139a:	b580      	push	{r7, lr}
 801139c:	b084      	sub	sp, #16
 801139e:	af00      	add	r7, sp, #0
 80113a0:	60f8      	str	r0, [r7, #12]
 80113a2:	60b9      	str	r1, [r7, #8]
 80113a4:	607a      	str	r2, [r7, #4]
    return match(group_, groupFilters) && match(name_, nameFilters);
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	685b      	ldr	r3, [r3, #4]
 80113aa:	68ba      	ldr	r2, [r7, #8]
 80113ac:	4619      	mov	r1, r3
 80113ae:	68f8      	ldr	r0, [r7, #12]
 80113b0:	f7ff ffc4 	bl	801133c <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 80113b4:	4603      	mov	r3, r0
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d00b      	beq.n	80113d2 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	689b      	ldr	r3, [r3, #8]
 80113be:	687a      	ldr	r2, [r7, #4]
 80113c0:	4619      	mov	r1, r3
 80113c2:	68f8      	ldr	r0, [r7, #12]
 80113c4:	f7ff ffba 	bl	801133c <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 80113c8:	4603      	mov	r3, r0
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d001      	beq.n	80113d2 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 80113ce:	2301      	movs	r3, #1
 80113d0:	e000      	b.n	80113d4 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x3a>
 80113d2:	2300      	movs	r3, #0
}
 80113d4:	4618      	mov	r0, r3
 80113d6:	3710      	adds	r7, #16
 80113d8:	46bd      	mov	sp, r7
 80113da:	bd80      	pop	{r7, pc}

080113dc <_ZN10UtestShell8failWithERK11TestFailure>:

void UtestShell::failWith(const TestFailure& failure)
{
 80113dc:	b590      	push	{r4, r7, lr}
 80113de:	b083      	sub	sp, #12
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	6039      	str	r1, [r7, #0]
    failWith(failure, getCurrentTestTerminator());
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	339c      	adds	r3, #156	; 0x9c
 80113ec:	681c      	ldr	r4, [r3, #0]
 80113ee:	f001 f8b1 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80113f2:	4603      	mov	r3, r0
 80113f4:	461a      	mov	r2, r3
 80113f6:	6839      	ldr	r1, [r7, #0]
 80113f8:	6878      	ldr	r0, [r7, #4]
 80113fa:	47a0      	blx	r4
} // LCOV_EXCL_LINE
 80113fc:	bf00      	nop
 80113fe:	370c      	adds	r7, #12
 8011400:	46bd      	mov	sp, r7
 8011402:	bd90      	pop	{r4, r7, pc}

08011404 <_ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator>:

void UtestShell::failWith(const TestFailure& failure, const TestTerminator& terminator)
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b084      	sub	sp, #16
 8011408:	af00      	add	r7, sp, #0
 801140a:	60f8      	str	r0, [r7, #12]
 801140c:	60b9      	str	r1, [r7, #8]
 801140e:	607a      	str	r2, [r7, #4]
    hasFailed_ = true;
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	2201      	movs	r2, #1
 8011414:	765a      	strb	r2, [r3, #25]
    getTestResult()->addFailure(failure);
 8011416:	68f8      	ldr	r0, [r7, #12]
 8011418:	f001 f872 	bl	8012500 <_ZN10UtestShell13getTestResultEv>
 801141c:	4603      	mov	r3, r0
 801141e:	681a      	ldr	r2, [r3, #0]
 8011420:	3234      	adds	r2, #52	; 0x34
 8011422:	6812      	ldr	r2, [r2, #0]
 8011424:	68b9      	ldr	r1, [r7, #8]
 8011426:	4618      	mov	r0, r3
 8011428:	4790      	blx	r2
    terminator.exitCurrentTest();
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	6878      	ldr	r0, [r7, #4]
 8011432:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8011434:	bf00      	nop
 8011436:	3710      	adds	r7, #16
 8011438:	46bd      	mov	sp, r7
 801143a:	bd80      	pop	{r7, pc}

0801143c <_ZN10UtestShell8exitTestERK14TestTerminator>:

void UtestShell::exitTest(const TestTerminator& terminator)
{
 801143c:	b580      	push	{r7, lr}
 801143e:	b082      	sub	sp, #8
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
 8011444:	6039      	str	r1, [r7, #0]
    terminator.exitCurrentTest();
 8011446:	683b      	ldr	r3, [r7, #0]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	6838      	ldr	r0, [r7, #0]
 801144e:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8011450:	bf00      	nop
 8011452:	3708      	adds	r7, #8
 8011454:	46bd      	mov	sp, r7
 8011456:	bd80      	pop	{r7, pc}

08011458 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertTrue(bool condition, const char *checkString, const char *conditionString, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011458:	b590      	push	{r4, r7, lr}
 801145a:	b09d      	sub	sp, #116	; 0x74
 801145c:	af04      	add	r7, sp, #16
 801145e:	60f8      	str	r0, [r7, #12]
 8011460:	607a      	str	r2, [r7, #4]
 8011462:	603b      	str	r3, [r7, #0]
 8011464:	460b      	mov	r3, r1
 8011466:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8011468:	68f8      	ldr	r0, [r7, #12]
 801146a:	f001 f849 	bl	8012500 <_ZN10UtestShell13getTestResultEv>
 801146e:	4603      	mov	r3, r0
 8011470:	681a      	ldr	r2, [r3, #0]
 8011472:	3228      	adds	r2, #40	; 0x28
 8011474:	6812      	ldr	r2, [r2, #0]
 8011476:	4618      	mov	r0, r3
 8011478:	4790      	blx	r2
    if (!condition)
 801147a:	7afb      	ldrb	r3, [r7, #11]
 801147c:	f083 0301 	eor.w	r3, r3, #1
 8011480:	b2db      	uxtb	r3, r3
 8011482:	2b00      	cmp	r3, #0
 8011484:	d03f      	beq.n	8011506 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(CheckFailure(this, fileName, lineNumber, checkString, conditionString, text), testTerminator);
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	339c      	adds	r3, #156	; 0x9c
 801148c:	681c      	ldr	r4, [r3, #0]
 801148e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011492:	6879      	ldr	r1, [r7, #4]
 8011494:	4618      	mov	r0, r3
 8011496:	f7f9 fc6a 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801149a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801149e:	6839      	ldr	r1, [r7, #0]
 80114a0:	4618      	mov	r0, r3
 80114a2:	f7f9 fc64 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80114a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80114aa:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80114ac:	4618      	mov	r0, r3
 80114ae:	f7f9 fc5e 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80114b2:	f107 0014 	add.w	r0, r7, #20
 80114b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80114ba:	9302      	str	r3, [sp, #8]
 80114bc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80114c0:	9301      	str	r3, [sp, #4]
 80114c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80114c6:	9300      	str	r3, [sp, #0]
 80114c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80114ca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80114cc:	68f9      	ldr	r1, [r7, #12]
 80114ce:	f7fb ff6b 	bl	800d3a8 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80114d2:	f107 0314 	add.w	r3, r7, #20
 80114d6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80114d8:	4619      	mov	r1, r3
 80114da:	68f8      	ldr	r0, [r7, #12]
 80114dc:	47a0      	blx	r4
 80114de:	f107 0314 	add.w	r3, r7, #20
 80114e2:	4618      	mov	r0, r3
 80114e4:	f7fc fdce 	bl	800e084 <_ZN12CheckFailureD1Ev>
 80114e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80114ec:	4618      	mov	r0, r3
 80114ee:	f7f9 fff6 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80114f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80114f6:	4618      	mov	r0, r3
 80114f8:	f7f9 fff1 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80114fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011500:	4618      	mov	r0, r3
 8011502:	f7f9 ffec 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 8011506:	bf00      	nop
 8011508:	3764      	adds	r7, #100	; 0x64
 801150a:	46bd      	mov	sp, r7
 801150c:	bd90      	pop	{r4, r7, pc}

0801150e <_ZN10UtestShell4failEPKcS1_jRK14TestTerminator>:

void UtestShell::fail(const char *text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801150e:	b590      	push	{r4, r7, lr}
 8011510:	b097      	sub	sp, #92	; 0x5c
 8011512:	af02      	add	r7, sp, #8
 8011514:	60f8      	str	r0, [r7, #12]
 8011516:	60b9      	str	r1, [r7, #8]
 8011518:	607a      	str	r2, [r7, #4]
 801151a:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801151c:	68f8      	ldr	r0, [r7, #12]
 801151e:	f000 ffef 	bl	8012500 <_ZN10UtestShell13getTestResultEv>
 8011522:	4603      	mov	r3, r0
 8011524:	681a      	ldr	r2, [r3, #0]
 8011526:	3228      	adds	r2, #40	; 0x28
 8011528:	6812      	ldr	r2, [r2, #0]
 801152a:	4618      	mov	r0, r3
 801152c:	4790      	blx	r2
    failWith(FailFailure(this, fileName, lineNumber, text), testTerminator);
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	339c      	adds	r3, #156	; 0x9c
 8011534:	681c      	ldr	r4, [r3, #0]
 8011536:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801153a:	68b9      	ldr	r1, [r7, #8]
 801153c:	4618      	mov	r0, r3
 801153e:	f7f9 fc16 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8011542:	f107 0014 	add.w	r0, r7, #20
 8011546:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801154a:	9300      	str	r3, [sp, #0]
 801154c:	683b      	ldr	r3, [r7, #0]
 801154e:	687a      	ldr	r2, [r7, #4]
 8011550:	68f9      	ldr	r1, [r7, #12]
 8011552:	f7fb ff71 	bl	800d438 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 8011556:	f107 0314 	add.w	r3, r7, #20
 801155a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801155c:	4619      	mov	r1, r3
 801155e:	68f8      	ldr	r0, [r7, #12]
 8011560:	47a0      	blx	r4
 8011562:	f107 0314 	add.w	r3, r7, #20
 8011566:	4618      	mov	r0, r3
 8011568:	f7f7 fc16 	bl	8008d98 <_ZN11FailFailureD1Ev>
 801156c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011570:	4618      	mov	r0, r3
 8011572:	f7f9 ffb4 	bl	800b4de <_ZN12SimpleStringD1Ev>
} // LCOV_EXCL_LINE
 8011576:	bf00      	nop
 8011578:	3754      	adds	r7, #84	; 0x54
 801157a:	46bd      	mov	sp, r7
 801157c:	bd90      	pop	{r4, r7, pc}

0801157e <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801157e:	b590      	push	{r4, r7, lr}
 8011580:	b0a7      	sub	sp, #156	; 0x9c
 8011582:	af04      	add	r7, sp, #16
 8011584:	60f8      	str	r0, [r7, #12]
 8011586:	60b9      	str	r1, [r7, #8]
 8011588:	607a      	str	r2, [r7, #4]
 801158a:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801158c:	68f8      	ldr	r0, [r7, #12]
 801158e:	f000 ffb7 	bl	8012500 <_ZN10UtestShell13getTestResultEv>
 8011592:	4603      	mov	r3, r0
 8011594:	681a      	ldr	r2, [r3, #0]
 8011596:	3228      	adds	r2, #40	; 0x28
 8011598:	6812      	ldr	r2, [r2, #0]
 801159a:	4618      	mov	r0, r3
 801159c:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d102      	bne.n	80115aa <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x2c>
 80115a4:	68bb      	ldr	r3, [r7, #8]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d068      	beq.n	801167c <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0xfe>
    if (actual == NULLPTR || expected == NULLPTR)
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d002      	beq.n	80115b6 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x38>
 80115b0:	68bb      	ldr	r3, [r7, #8]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d12a      	bne.n	801160c <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x8e>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	339c      	adds	r3, #156	; 0x9c
 80115bc:	681c      	ldr	r4, [r3, #0]
 80115be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80115c2:	6839      	ldr	r1, [r7, #0]
 80115c4:	4618      	mov	r0, r3
 80115c6:	f7f9 fbd2 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80115ca:	f107 0010 	add.w	r0, r7, #16
 80115ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80115d2:	9302      	str	r3, [sp, #8]
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	9301      	str	r3, [sp, #4]
 80115d8:	68bb      	ldr	r3, [r7, #8]
 80115da:	9300      	str	r3, [sp, #0]
 80115dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80115e0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80115e4:	68f9      	ldr	r1, [r7, #12]
 80115e6:	f7fc f9ad 	bl	800d944 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80115ea:	f107 0310 	add.w	r3, r7, #16
 80115ee:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80115f2:	4619      	mov	r1, r3
 80115f4:	68f8      	ldr	r0, [r7, #12]
 80115f6:	47a0      	blx	r4
 80115f8:	f107 0310 	add.w	r3, r7, #16
 80115fc:	4618      	mov	r0, r3
 80115fe:	f7fc fcb9 	bl	800df74 <_ZN18StringEqualFailureD1Ev>
 8011602:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011606:	4618      	mov	r0, r3
 8011608:	f7f9 ff69 	bl	800b4de <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrCmp(expected, actual) != 0)
 801160c:	6879      	ldr	r1, [r7, #4]
 801160e:	68b8      	ldr	r0, [r7, #8]
 8011610:	f7f9 f9ea 	bl	800a9e8 <_ZN12SimpleString6StrCmpEPKcS1_>
 8011614:	4603      	mov	r3, r0
 8011616:	2b00      	cmp	r3, #0
 8011618:	bf14      	ite	ne
 801161a:	2301      	movne	r3, #1
 801161c:	2300      	moveq	r3, #0
 801161e:	b2db      	uxtb	r3, r3
 8011620:	2b00      	cmp	r3, #0
 8011622:	d02c      	beq.n	801167e <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	339c      	adds	r3, #156	; 0x9c
 801162a:	681c      	ldr	r4, [r3, #0]
 801162c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011630:	6839      	ldr	r1, [r7, #0]
 8011632:	4618      	mov	r0, r3
 8011634:	f7f9 fb9b 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8011638:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 801163c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011640:	9302      	str	r3, [sp, #8]
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	9301      	str	r3, [sp, #4]
 8011646:	68bb      	ldr	r3, [r7, #8]
 8011648:	9300      	str	r3, [sp, #0]
 801164a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801164e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011652:	68f9      	ldr	r1, [r7, #12]
 8011654:	f7fc f976 	bl	800d944 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8011658:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801165c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8011660:	4619      	mov	r1, r3
 8011662:	68f8      	ldr	r0, [r7, #12]
 8011664:	47a0      	blx	r4
 8011666:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801166a:	4618      	mov	r0, r3
 801166c:	f7fc fc82 	bl	800df74 <_ZN18StringEqualFailureD1Ev>
 8011670:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011674:	4618      	mov	r0, r3
 8011676:	f7f9 ff32 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801167a:	e000      	b.n	801167e <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
    if (actual == NULLPTR && expected == NULLPTR) return;
 801167c:	bf00      	nop
}
 801167e:	378c      	adds	r7, #140	; 0x8c
 8011680:	46bd      	mov	sp, r7
 8011682:	bd90      	pop	{r4, r7, pc}

08011684 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrNEqual(const char* expected, const char* actual, size_t length, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011684:	b590      	push	{r4, r7, lr}
 8011686:	b0a7      	sub	sp, #156	; 0x9c
 8011688:	af04      	add	r7, sp, #16
 801168a:	60f8      	str	r0, [r7, #12]
 801168c:	60b9      	str	r1, [r7, #8]
 801168e:	607a      	str	r2, [r7, #4]
 8011690:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011692:	68f8      	ldr	r0, [r7, #12]
 8011694:	f000 ff34 	bl	8012500 <_ZN10UtestShell13getTestResultEv>
 8011698:	4603      	mov	r3, r0
 801169a:	681a      	ldr	r2, [r3, #0]
 801169c:	3228      	adds	r2, #40	; 0x28
 801169e:	6812      	ldr	r2, [r2, #0]
 80116a0:	4618      	mov	r0, r3
 80116a2:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d102      	bne.n	80116b0 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x2c>
 80116aa:	68bb      	ldr	r3, [r7, #8]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d06b      	beq.n	8011788 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x104>
    if (actual == NULLPTR || expected == NULLPTR)
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d002      	beq.n	80116bc <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x38>
 80116b6:	68bb      	ldr	r3, [r7, #8]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d12b      	bne.n	8011714 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x90>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	339c      	adds	r3, #156	; 0x9c
 80116c2:	681c      	ldr	r4, [r3, #0]
 80116c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80116c8:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80116cc:	4618      	mov	r0, r3
 80116ce:	f7f9 fb4e 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80116d2:	f107 0010 	add.w	r0, r7, #16
 80116d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80116da:	9302      	str	r3, [sp, #8]
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	9301      	str	r3, [sp, #4]
 80116e0:	68bb      	ldr	r3, [r7, #8]
 80116e2:	9300      	str	r3, [sp, #0]
 80116e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80116e8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80116ec:	68f9      	ldr	r1, [r7, #12]
 80116ee:	f7fc f929 	bl	800d944 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80116f2:	f107 0310 	add.w	r3, r7, #16
 80116f6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80116fa:	4619      	mov	r1, r3
 80116fc:	68f8      	ldr	r0, [r7, #12]
 80116fe:	47a0      	blx	r4
 8011700:	f107 0310 	add.w	r3, r7, #16
 8011704:	4618      	mov	r0, r3
 8011706:	f7fc fc35 	bl	800df74 <_ZN18StringEqualFailureD1Ev>
 801170a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801170e:	4618      	mov	r0, r3
 8011710:	f7f9 fee5 	bl	800b4de <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrNCmp(expected, actual, length) != 0)
 8011714:	683a      	ldr	r2, [r7, #0]
 8011716:	6879      	ldr	r1, [r7, #4]
 8011718:	68b8      	ldr	r0, [r7, #8]
 801171a:	f7f9 f9a4 	bl	800aa66 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 801171e:	4603      	mov	r3, r0
 8011720:	2b00      	cmp	r3, #0
 8011722:	bf14      	ite	ne
 8011724:	2301      	movne	r3, #1
 8011726:	2300      	moveq	r3, #0
 8011728:	b2db      	uxtb	r3, r3
 801172a:	2b00      	cmp	r3, #0
 801172c:	d02d      	beq.n	801178a <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	339c      	adds	r3, #156	; 0x9c
 8011734:	681c      	ldr	r4, [r3, #0]
 8011736:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801173a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801173e:	4618      	mov	r0, r3
 8011740:	f7f9 fb15 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8011744:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8011748:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801174c:	9302      	str	r3, [sp, #8]
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	9301      	str	r3, [sp, #4]
 8011752:	68bb      	ldr	r3, [r7, #8]
 8011754:	9300      	str	r3, [sp, #0]
 8011756:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801175a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801175e:	68f9      	ldr	r1, [r7, #12]
 8011760:	f7fc f8f0 	bl	800d944 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8011764:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011768:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801176c:	4619      	mov	r1, r3
 801176e:	68f8      	ldr	r0, [r7, #12]
 8011770:	47a0      	blx	r4
 8011772:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011776:	4618      	mov	r0, r3
 8011778:	f7fc fbfc 	bl	800df74 <_ZN18StringEqualFailureD1Ev>
 801177c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011780:	4618      	mov	r0, r3
 8011782:	f7f9 feac 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8011786:	e000      	b.n	801178a <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8011788:	bf00      	nop
}
 801178a:	378c      	adds	r7, #140	; 0x8c
 801178c:	46bd      	mov	sp, r7
 801178e:	bd90      	pop	{r4, r7, pc}

08011790 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8011790:	b590      	push	{r4, r7, lr}
 8011792:	b0ab      	sub	sp, #172	; 0xac
 8011794:	af04      	add	r7, sp, #16
 8011796:	60f8      	str	r0, [r7, #12]
 8011798:	60b9      	str	r1, [r7, #8]
 801179a:	607a      	str	r2, [r7, #4]
 801179c:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801179e:	68f8      	ldr	r0, [r7, #12]
 80117a0:	f000 feae 	bl	8012500 <_ZN10UtestShell13getTestResultEv>
 80117a4:	4603      	mov	r3, r0
 80117a6:	681a      	ldr	r2, [r3, #0]
 80117a8:	3228      	adds	r2, #40	; 0x28
 80117aa:	6812      	ldr	r2, [r2, #0]
 80117ac:	4618      	mov	r0, r3
 80117ae:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d102      	bne.n	80117bc <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x2c>
 80117b6:	68bb      	ldr	r3, [r7, #8]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d07c      	beq.n	80118b6 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x126>
    if (actual == NULLPTR || expected == NULLPTR)
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d002      	beq.n	80117c8 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x38>
 80117c2:	68bb      	ldr	r3, [r7, #8]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d128      	bne.n	801181a <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x8a>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	3398      	adds	r3, #152	; 0x98
 80117ce:	681c      	ldr	r4, [r3, #0]
 80117d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80117d4:	6839      	ldr	r1, [r7, #0]
 80117d6:	4618      	mov	r0, r3
 80117d8:	f7f9 fac9 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80117dc:	f107 0010 	add.w	r0, r7, #16
 80117e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80117e4:	9302      	str	r3, [sp, #8]
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	9301      	str	r3, [sp, #4]
 80117ea:	68bb      	ldr	r3, [r7, #8]
 80117ec:	9300      	str	r3, [sp, #0]
 80117ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80117f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80117f6:	68f9      	ldr	r1, [r7, #12]
 80117f8:	f7fc f948 	bl	800da8c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80117fc:	f107 0310 	add.w	r3, r7, #16
 8011800:	4619      	mov	r1, r3
 8011802:	68f8      	ldr	r0, [r7, #12]
 8011804:	47a0      	blx	r4
 8011806:	f107 0310 	add.w	r3, r7, #16
 801180a:	4618      	mov	r0, r3
 801180c:	f7fc fb90 	bl	800df30 <_ZN24StringEqualNoCaseFailureD1Ev>
 8011810:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011814:	4618      	mov	r0, r3
 8011816:	f7f9 fe62 	bl	800b4de <_ZN12SimpleStringD1Ev>
    if (!SimpleString(expected).equalsNoCase(actual))
 801181a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801181e:	68b9      	ldr	r1, [r7, #8]
 8011820:	4618      	mov	r0, r3
 8011822:	f7f9 faa4 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8011826:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801182a:	6879      	ldr	r1, [r7, #4]
 801182c:	4618      	mov	r0, r3
 801182e:	f7f9 fa9e 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8011832:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8011836:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801183a:	4611      	mov	r1, r2
 801183c:	4618      	mov	r0, r3
 801183e:	f7f9 fe75 	bl	800b52c <_ZNK12SimpleString12equalsNoCaseERKS_>
 8011842:	4603      	mov	r3, r0
 8011844:	f083 0301 	eor.w	r3, r3, #1
 8011848:	b2dc      	uxtb	r4, r3
 801184a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801184e:	4618      	mov	r0, r3
 8011850:	f7f9 fe45 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8011854:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011858:	4618      	mov	r0, r3
 801185a:	f7f9 fe40 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801185e:	2c00      	cmp	r4, #0
 8011860:	d02a      	beq.n	80118b8 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	3398      	adds	r3, #152	; 0x98
 8011868:	681c      	ldr	r4, [r3, #0]
 801186a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801186e:	6839      	ldr	r1, [r7, #0]
 8011870:	4618      	mov	r0, r3
 8011872:	f7f9 fa7c 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8011876:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 801187a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801187e:	9302      	str	r3, [sp, #8]
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	9301      	str	r3, [sp, #4]
 8011884:	68bb      	ldr	r3, [r7, #8]
 8011886:	9300      	str	r3, [sp, #0]
 8011888:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801188c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011890:	68f9      	ldr	r1, [r7, #12]
 8011892:	f7fc f8fb 	bl	800da8c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8011896:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801189a:	4619      	mov	r1, r3
 801189c:	68f8      	ldr	r0, [r7, #12]
 801189e:	47a0      	blx	r4
 80118a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80118a4:	4618      	mov	r0, r3
 80118a6:	f7fc fb43 	bl	800df30 <_ZN24StringEqualNoCaseFailureD1Ev>
 80118aa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80118ae:	4618      	mov	r0, r3
 80118b0:	f7f9 fe15 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80118b4:	e000      	b.n	80118b8 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80118b6:	bf00      	nop
}
 80118b8:	379c      	adds	r7, #156	; 0x9c
 80118ba:	46bd      	mov	sp, r7
 80118bc:	bd90      	pop	{r4, r7, pc}

080118be <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 80118be:	b590      	push	{r4, r7, lr}
 80118c0:	b0b3      	sub	sp, #204	; 0xcc
 80118c2:	af04      	add	r7, sp, #16
 80118c4:	60f8      	str	r0, [r7, #12]
 80118c6:	60b9      	str	r1, [r7, #8]
 80118c8:	607a      	str	r2, [r7, #4]
 80118ca:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80118cc:	68f8      	ldr	r0, [r7, #12]
 80118ce:	f000 fe17 	bl	8012500 <_ZN10UtestShell13getTestResultEv>
 80118d2:	4603      	mov	r3, r0
 80118d4:	681a      	ldr	r2, [r3, #0]
 80118d6:	3228      	adds	r2, #40	; 0x28
 80118d8:	6812      	ldr	r2, [r2, #0]
 80118da:	4618      	mov	r0, r3
 80118dc:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d103      	bne.n	80118ec <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x2e>
 80118e4:	68bb      	ldr	r3, [r7, #8]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	f000 80ad 	beq.w	8011a46 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d002      	beq.n	80118f8 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x3a>
 80118f2:	68bb      	ldr	r3, [r7, #8]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d140      	bne.n	801197a <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	3398      	adds	r3, #152	; 0x98
 80118fe:	681c      	ldr	r4, [r3, #0]
 8011900:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011904:	68b9      	ldr	r1, [r7, #8]
 8011906:	4618      	mov	r0, r3
 8011908:	f7f9 fa31 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801190c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011910:	6879      	ldr	r1, [r7, #4]
 8011912:	4618      	mov	r0, r3
 8011914:	f7f9 fa2b 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8011918:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801191c:	6839      	ldr	r1, [r7, #0]
 801191e:	4618      	mov	r0, r3
 8011920:	f7f9 fa25 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8011924:	f107 0010 	add.w	r0, r7, #16
 8011928:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801192c:	9302      	str	r3, [sp, #8]
 801192e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011932:	9301      	str	r3, [sp, #4]
 8011934:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011938:	9300      	str	r3, [sp, #0]
 801193a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801193e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8011942:	68f9      	ldr	r1, [r7, #12]
 8011944:	f7fb fce6 	bl	800d314 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011948:	f107 0310 	add.w	r3, r7, #16
 801194c:	4619      	mov	r1, r3
 801194e:	68f8      	ldr	r0, [r7, #12]
 8011950:	47a0      	blx	r4
 8011952:	f107 0310 	add.w	r3, r7, #16
 8011956:	4618      	mov	r0, r3
 8011958:	f7fc fbb6 	bl	800e0c8 <_ZN15ContainsFailureD1Ev>
 801195c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011960:	4618      	mov	r0, r3
 8011962:	f7f9 fdbc 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8011966:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801196a:	4618      	mov	r0, r3
 801196c:	f7f9 fdb7 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8011970:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011974:	4618      	mov	r0, r3
 8011976:	f7f9 fdb2 	bl	800b4de <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).contains(expected))
 801197a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801197e:	6879      	ldr	r1, [r7, #4]
 8011980:	4618      	mov	r0, r3
 8011982:	f7f9 f9f4 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8011986:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801198a:	68b9      	ldr	r1, [r7, #8]
 801198c:	4618      	mov	r0, r3
 801198e:	f7f9 f9ee 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8011992:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8011996:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801199a:	4611      	mov	r1, r2
 801199c:	4618      	mov	r0, r3
 801199e:	f7f9 fa64 	bl	800ae6a <_ZNK12SimpleString8containsERKS_>
 80119a2:	4603      	mov	r3, r0
 80119a4:	f083 0301 	eor.w	r3, r3, #1
 80119a8:	b2dc      	uxtb	r4, r3
 80119aa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80119ae:	4618      	mov	r0, r3
 80119b0:	f7f9 fd95 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80119b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80119b8:	4618      	mov	r0, r3
 80119ba:	f7f9 fd90 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80119be:	2c00      	cmp	r4, #0
 80119c0:	d042      	beq.n	8011a48 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	3398      	adds	r3, #152	; 0x98
 80119c8:	681c      	ldr	r4, [r3, #0]
 80119ca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80119ce:	68b9      	ldr	r1, [r7, #8]
 80119d0:	4618      	mov	r0, r3
 80119d2:	f7f9 f9cc 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80119d6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80119da:	6879      	ldr	r1, [r7, #4]
 80119dc:	4618      	mov	r0, r3
 80119de:	f7f9 f9c6 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80119e2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80119e6:	6839      	ldr	r1, [r7, #0]
 80119e8:	4618      	mov	r0, r3
 80119ea:	f7f9 f9c0 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80119ee:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80119f2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80119f6:	9302      	str	r3, [sp, #8]
 80119f8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80119fc:	9301      	str	r3, [sp, #4]
 80119fe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011a02:	9300      	str	r3, [sp, #0]
 8011a04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011a08:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8011a0c:	68f9      	ldr	r1, [r7, #12]
 8011a0e:	f7fb fc81 	bl	800d314 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011a12:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011a16:	4619      	mov	r1, r3
 8011a18:	68f8      	ldr	r0, [r7, #12]
 8011a1a:	47a0      	blx	r4
 8011a1c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011a20:	4618      	mov	r0, r3
 8011a22:	f7fc fb51 	bl	800e0c8 <_ZN15ContainsFailureD1Ev>
 8011a26:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	f7f9 fd57 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8011a30:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011a34:	4618      	mov	r0, r3
 8011a36:	f7f9 fd52 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8011a3a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011a3e:	4618      	mov	r0, r3
 8011a40:	f7f9 fd4d 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8011a44:	e000      	b.n	8011a48 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8011a46:	bf00      	nop
}
 8011a48:	37bc      	adds	r7, #188	; 0xbc
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	bd90      	pop	{r4, r7, pc}

08011a4e <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8011a4e:	b590      	push	{r4, r7, lr}
 8011a50:	b0b3      	sub	sp, #204	; 0xcc
 8011a52:	af04      	add	r7, sp, #16
 8011a54:	60f8      	str	r0, [r7, #12]
 8011a56:	60b9      	str	r1, [r7, #8]
 8011a58:	607a      	str	r2, [r7, #4]
 8011a5a:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011a5c:	68f8      	ldr	r0, [r7, #12]
 8011a5e:	f000 fd4f 	bl	8012500 <_ZN10UtestShell13getTestResultEv>
 8011a62:	4603      	mov	r3, r0
 8011a64:	681a      	ldr	r2, [r3, #0]
 8011a66:	3228      	adds	r2, #40	; 0x28
 8011a68:	6812      	ldr	r2, [r2, #0]
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d103      	bne.n	8011a7c <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x2e>
 8011a74:	68bb      	ldr	r3, [r7, #8]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	f000 80ad 	beq.w	8011bd6 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d002      	beq.n	8011a88 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x3a>
 8011a82:	68bb      	ldr	r3, [r7, #8]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d140      	bne.n	8011b0a <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	3398      	adds	r3, #152	; 0x98
 8011a8e:	681c      	ldr	r4, [r3, #0]
 8011a90:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011a94:	68b9      	ldr	r1, [r7, #8]
 8011a96:	4618      	mov	r0, r3
 8011a98:	f7f9 f969 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8011a9c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011aa0:	6879      	ldr	r1, [r7, #4]
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	f7f9 f963 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8011aa8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011aac:	6839      	ldr	r1, [r7, #0]
 8011aae:	4618      	mov	r0, r3
 8011ab0:	f7f9 f95d 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8011ab4:	f107 0010 	add.w	r0, r7, #16
 8011ab8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011abc:	9302      	str	r3, [sp, #8]
 8011abe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011ac2:	9301      	str	r3, [sp, #4]
 8011ac4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011ac8:	9300      	str	r3, [sp, #0]
 8011aca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011ace:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8011ad2:	68f9      	ldr	r1, [r7, #12]
 8011ad4:	f7fb fc1e 	bl	800d314 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011ad8:	f107 0310 	add.w	r3, r7, #16
 8011adc:	4619      	mov	r1, r3
 8011ade:	68f8      	ldr	r0, [r7, #12]
 8011ae0:	47a0      	blx	r4
 8011ae2:	f107 0310 	add.w	r3, r7, #16
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	f7fc faee 	bl	800e0c8 <_ZN15ContainsFailureD1Ev>
 8011aec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011af0:	4618      	mov	r0, r3
 8011af2:	f7f9 fcf4 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8011af6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011afa:	4618      	mov	r0, r3
 8011afc:	f7f9 fcef 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8011b00:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011b04:	4618      	mov	r0, r3
 8011b06:	f7f9 fcea 	bl	800b4de <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).containsNoCase(expected))
 8011b0a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011b0e:	6879      	ldr	r1, [r7, #4]
 8011b10:	4618      	mov	r0, r3
 8011b12:	f7f9 f92c 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8011b16:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011b1a:	68b9      	ldr	r1, [r7, #8]
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f7f9 f926 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8011b22:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8011b26:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011b2a:	4611      	mov	r1, r2
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	f7f9 f9b7 	bl	800aea0 <_ZNK12SimpleString14containsNoCaseERKS_>
 8011b32:	4603      	mov	r3, r0
 8011b34:	f083 0301 	eor.w	r3, r3, #1
 8011b38:	b2dc      	uxtb	r4, r3
 8011b3a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011b3e:	4618      	mov	r0, r3
 8011b40:	f7f9 fccd 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8011b44:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f7f9 fcc8 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8011b4e:	2c00      	cmp	r4, #0
 8011b50:	d042      	beq.n	8011bd8 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	3398      	adds	r3, #152	; 0x98
 8011b58:	681c      	ldr	r4, [r3, #0]
 8011b5a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011b5e:	68b9      	ldr	r1, [r7, #8]
 8011b60:	4618      	mov	r0, r3
 8011b62:	f7f9 f904 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8011b66:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011b6a:	6879      	ldr	r1, [r7, #4]
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	f7f9 f8fe 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8011b72:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011b76:	6839      	ldr	r1, [r7, #0]
 8011b78:	4618      	mov	r0, r3
 8011b7a:	f7f9 f8f8 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8011b7e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8011b82:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011b86:	9302      	str	r3, [sp, #8]
 8011b88:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011b8c:	9301      	str	r3, [sp, #4]
 8011b8e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011b92:	9300      	str	r3, [sp, #0]
 8011b94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011b98:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8011b9c:	68f9      	ldr	r1, [r7, #12]
 8011b9e:	f7fb fbb9 	bl	800d314 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011ba2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011ba6:	4619      	mov	r1, r3
 8011ba8:	68f8      	ldr	r0, [r7, #12]
 8011baa:	47a0      	blx	r4
 8011bac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	f7fc fa89 	bl	800e0c8 <_ZN15ContainsFailureD1Ev>
 8011bb6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f7f9 fc8f 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8011bc0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	f7f9 fc8a 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8011bca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011bce:	4618      	mov	r0, r3
 8011bd0:	f7f9 fc85 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8011bd4:	e000      	b.n	8011bd8 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8011bd6:	bf00      	nop
}
 8011bd8:	37bc      	adds	r7, #188	; 0xbc
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	bd90      	pop	{r4, r7, pc}

08011bde <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator>:

void UtestShell::assertLongsEqual(long expected, long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011bde:	b590      	push	{r4, r7, lr}
 8011be0:	b099      	sub	sp, #100	; 0x64
 8011be2:	af04      	add	r7, sp, #16
 8011be4:	60f8      	str	r0, [r7, #12]
 8011be6:	60b9      	str	r1, [r7, #8]
 8011be8:	607a      	str	r2, [r7, #4]
 8011bea:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011bec:	68f8      	ldr	r0, [r7, #12]
 8011bee:	f000 fc87 	bl	8012500 <_ZN10UtestShell13getTestResultEv>
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	681a      	ldr	r2, [r3, #0]
 8011bf6:	3228      	adds	r2, #40	; 0x28
 8011bf8:	6812      	ldr	r2, [r2, #0]
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	4790      	blx	r2
    if (expected != actual)
 8011bfe:	68ba      	ldr	r2, [r7, #8]
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	429a      	cmp	r2, r3
 8011c04:	d027      	beq.n	8011c56 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator+0x78>
        failWith(LongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	339c      	adds	r3, #156	; 0x9c
 8011c0c:	681c      	ldr	r4, [r3, #0]
 8011c0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011c12:	6839      	ldr	r1, [r7, #0]
 8011c14:	4618      	mov	r0, r3
 8011c16:	f7f9 f8aa 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8011c1a:	f107 0014 	add.w	r0, r7, #20
 8011c1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011c22:	9302      	str	r3, [sp, #8]
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	9301      	str	r3, [sp, #4]
 8011c28:	68bb      	ldr	r3, [r7, #8]
 8011c2a:	9300      	str	r3, [sp, #0]
 8011c2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011c2e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011c30:	68f9      	ldr	r1, [r7, #12]
 8011c32:	f7fb fc1f 	bl	800d474 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>
 8011c36:	f107 0314 	add.w	r3, r7, #20
 8011c3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011c3c:	4619      	mov	r1, r3
 8011c3e:	68f8      	ldr	r0, [r7, #12]
 8011c40:	47a0      	blx	r4
 8011c42:	f107 0314 	add.w	r3, r7, #20
 8011c46:	4618      	mov	r0, r3
 8011c48:	f7fc f9fa 	bl	800e040 <_ZN17LongsEqualFailureD1Ev>
 8011c4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011c50:	4618      	mov	r0, r3
 8011c52:	f7f9 fc44 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 8011c56:	bf00      	nop
 8011c58:	3754      	adds	r7, #84	; 0x54
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	bd90      	pop	{r4, r7, pc}

08011c5e <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongsEqual(unsigned long expected, unsigned long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011c5e:	b590      	push	{r4, r7, lr}
 8011c60:	b099      	sub	sp, #100	; 0x64
 8011c62:	af04      	add	r7, sp, #16
 8011c64:	60f8      	str	r0, [r7, #12]
 8011c66:	60b9      	str	r1, [r7, #8]
 8011c68:	607a      	str	r2, [r7, #4]
 8011c6a:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011c6c:	68f8      	ldr	r0, [r7, #12]
 8011c6e:	f000 fc47 	bl	8012500 <_ZN10UtestShell13getTestResultEv>
 8011c72:	4603      	mov	r3, r0
 8011c74:	681a      	ldr	r2, [r3, #0]
 8011c76:	3228      	adds	r2, #40	; 0x28
 8011c78:	6812      	ldr	r2, [r2, #0]
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	4790      	blx	r2
    if (expected != actual)
 8011c7e:	68ba      	ldr	r2, [r7, #8]
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	429a      	cmp	r2, r3
 8011c84:	d027      	beq.n	8011cd6 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator+0x78>
        failWith(UnsignedLongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	339c      	adds	r3, #156	; 0x9c
 8011c8c:	681c      	ldr	r4, [r3, #0]
 8011c8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011c92:	6839      	ldr	r1, [r7, #0]
 8011c94:	4618      	mov	r0, r3
 8011c96:	f7f9 f86a 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8011c9a:	f107 0014 	add.w	r0, r7, #20
 8011c9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011ca2:	9302      	str	r3, [sp, #8]
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	9301      	str	r3, [sp, #4]
 8011ca8:	68bb      	ldr	r3, [r7, #8]
 8011caa:	9300      	str	r3, [sp, #0]
 8011cac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011cae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011cb0:	68f9      	ldr	r1, [r7, #12]
 8011cb2:	f7fb fcab 	bl	800d60c <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>
 8011cb6:	f107 0314 	add.w	r3, r7, #20
 8011cba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011cbc:	4619      	mov	r1, r3
 8011cbe:	68f8      	ldr	r0, [r7, #12]
 8011cc0:	47a0      	blx	r4
 8011cc2:	f107 0314 	add.w	r3, r7, #20
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	f7fc f998 	bl	800dffc <_ZN25UnsignedLongsEqualFailureD1Ev>
 8011ccc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	f7f9 fc04 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 8011cd6:	bf00      	nop
 8011cd8:	3754      	adds	r7, #84	; 0x54
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	bd90      	pop	{r4, r7, pc}
	...

08011ce0 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertLongLongsEqual(cpputest_longlong expected, cpputest_longlong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011ce0:	b082      	sub	sp, #8
 8011ce2:	b590      	push	{r4, r7, lr}
 8011ce4:	b099      	sub	sp, #100	; 0x64
 8011ce6:	af02      	add	r7, sp, #8
 8011ce8:	60f8      	str	r0, [r7, #12]
 8011cea:	1d38      	adds	r0, r7, #4
 8011cec:	e880 0006 	stmia.w	r0, {r1, r2}
 8011cf0:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 8011cf2:	68f8      	ldr	r0, [r7, #12]
 8011cf4:	f000 fc04 	bl	8012500 <_ZN10UtestShell13getTestResultEv>
 8011cf8:	4603      	mov	r3, r0
 8011cfa:	681a      	ldr	r2, [r3, #0]
 8011cfc:	3228      	adds	r2, #40	; 0x28
 8011cfe:	6812      	ldr	r2, [r2, #0]
 8011d00:	4618      	mov	r0, r3
 8011d02:	4790      	blx	r2
    if (expected != actual)
        failWith(LongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	339c      	adds	r3, #156	; 0x9c
 8011d0a:	681c      	ldr	r4, [r3, #0]
 8011d0c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011d10:	4919      	ldr	r1, [pc, #100]	; (8011d78 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator+0x98>)
 8011d12:	4618      	mov	r0, r3
 8011d14:	f7f9 f82b 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8011d18:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011d1c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8011d1e:	4618      	mov	r0, r3
 8011d20:	f7f9 f825 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8011d24:	f107 0014 	add.w	r0, r7, #20
 8011d28:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011d2c:	9301      	str	r3, [sp, #4]
 8011d2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011d32:	9300      	str	r3, [sp, #0]
 8011d34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011d36:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011d38:	68f9      	ldr	r1, [r7, #12]
 8011d3a:	f7fc f84d 	bl	800ddd8 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8011d3e:	f107 0314 	add.w	r3, r7, #20
 8011d42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011d46:	4619      	mov	r1, r3
 8011d48:	68f8      	ldr	r0, [r7, #12]
 8011d4a:	47a0      	blx	r4
 8011d4c:	f107 0314 	add.w	r3, r7, #20
 8011d50:	4618      	mov	r0, r3
 8011d52:	f7fc f887 	bl	800de64 <_ZN25FeatureUnsupportedFailureD1Ev>
 8011d56:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	f7f9 fbbf 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8011d60:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011d64:	4618      	mov	r0, r3
 8011d66:	f7f9 fbba 	bl	800b4de <_ZN12SimpleStringD1Ev>
#endif
}
 8011d6a:	bf00      	nop
 8011d6c:	375c      	adds	r7, #92	; 0x5c
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8011d74:	b002      	add	sp, #8
 8011d76:	4770      	bx	lr
 8011d78:	08022e88 	.word	0x08022e88

08011d7c <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongLongsEqual(cpputest_ulonglong expected, cpputest_ulonglong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011d7c:	b082      	sub	sp, #8
 8011d7e:	b590      	push	{r4, r7, lr}
 8011d80:	b099      	sub	sp, #100	; 0x64
 8011d82:	af02      	add	r7, sp, #8
 8011d84:	60f8      	str	r0, [r7, #12]
 8011d86:	1d38      	adds	r0, r7, #4
 8011d88:	e880 0006 	stmia.w	r0, {r1, r2}
 8011d8c:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 8011d8e:	68f8      	ldr	r0, [r7, #12]
 8011d90:	f000 fbb6 	bl	8012500 <_ZN10UtestShell13getTestResultEv>
 8011d94:	4603      	mov	r3, r0
 8011d96:	681a      	ldr	r2, [r3, #0]
 8011d98:	3228      	adds	r2, #40	; 0x28
 8011d9a:	6812      	ldr	r2, [r2, #0]
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	4790      	blx	r2
    if (expected != actual)
        failWith(UnsignedLongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	339c      	adds	r3, #156	; 0x9c
 8011da6:	681c      	ldr	r4, [r3, #0]
 8011da8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011dac:	4919      	ldr	r1, [pc, #100]	; (8011e14 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator+0x98>)
 8011dae:	4618      	mov	r0, r3
 8011db0:	f7f8 ffdd 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8011db4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011db8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8011dba:	4618      	mov	r0, r3
 8011dbc:	f7f8 ffd7 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8011dc0:	f107 0014 	add.w	r0, r7, #20
 8011dc4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011dc8:	9301      	str	r3, [sp, #4]
 8011dca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011dce:	9300      	str	r3, [sp, #0]
 8011dd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011dd2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011dd4:	68f9      	ldr	r1, [r7, #12]
 8011dd6:	f7fb ffff 	bl	800ddd8 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8011dda:	f107 0314 	add.w	r3, r7, #20
 8011dde:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011de2:	4619      	mov	r1, r3
 8011de4:	68f8      	ldr	r0, [r7, #12]
 8011de6:	47a0      	blx	r4
 8011de8:	f107 0314 	add.w	r3, r7, #20
 8011dec:	4618      	mov	r0, r3
 8011dee:	f7fc f839 	bl	800de64 <_ZN25FeatureUnsupportedFailureD1Ev>
 8011df2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011df6:	4618      	mov	r0, r3
 8011df8:	f7f9 fb71 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8011dfc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011e00:	4618      	mov	r0, r3
 8011e02:	f7f9 fb6c 	bl	800b4de <_ZN12SimpleStringD1Ev>
#endif
}
 8011e06:	bf00      	nop
 8011e08:	375c      	adds	r7, #92	; 0x5c
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8011e10:	b002      	add	sp, #8
 8011e12:	4770      	bx	lr
 8011e14:	08022e88 	.word	0x08022e88

08011e18 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator>:

void UtestShell::assertSignedBytesEqual(signed char expected, signed char actual, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011e18:	b590      	push	{r4, r7, lr}
 8011e1a:	b099      	sub	sp, #100	; 0x64
 8011e1c:	af04      	add	r7, sp, #16
 8011e1e:	60f8      	str	r0, [r7, #12]
 8011e20:	607b      	str	r3, [r7, #4]
 8011e22:	460b      	mov	r3, r1
 8011e24:	72fb      	strb	r3, [r7, #11]
 8011e26:	4613      	mov	r3, r2
 8011e28:	72bb      	strb	r3, [r7, #10]
    getTestResult()->countCheck();
 8011e2a:	68f8      	ldr	r0, [r7, #12]
 8011e2c:	f000 fb68 	bl	8012500 <_ZN10UtestShell13getTestResultEv>
 8011e30:	4603      	mov	r3, r0
 8011e32:	681a      	ldr	r2, [r3, #0]
 8011e34:	3228      	adds	r2, #40	; 0x28
 8011e36:	6812      	ldr	r2, [r2, #0]
 8011e38:	4618      	mov	r0, r3
 8011e3a:	4790      	blx	r2
    if (expected != actual)
 8011e3c:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8011e40:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8011e44:	429a      	cmp	r2, r3
 8011e46:	d029      	beq.n	8011e9c <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator+0x84>
        failWith(SignedBytesEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	339c      	adds	r3, #156	; 0x9c
 8011e4e:	681c      	ldr	r4, [r3, #0]
 8011e50:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011e54:	6879      	ldr	r1, [r7, #4]
 8011e56:	4618      	mov	r0, r3
 8011e58:	f7f8 ff89 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8011e5c:	f107 0014 	add.w	r0, r7, #20
 8011e60:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011e64:	9302      	str	r3, [sp, #8]
 8011e66:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8011e6a:	9301      	str	r3, [sp, #4]
 8011e6c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011e70:	9300      	str	r3, [sp, #0]
 8011e72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011e74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011e76:	68f9      	ldr	r1, [r7, #12]
 8011e78:	f7fb fc94 	bl	800d7a4 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>
 8011e7c:	f107 0314 	add.w	r3, r7, #20
 8011e80:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011e82:	4619      	mov	r1, r3
 8011e84:	68f8      	ldr	r0, [r7, #12]
 8011e86:	47a0      	blx	r4
 8011e88:	f107 0314 	add.w	r3, r7, #20
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	f7fc f893 	bl	800dfb8 <_ZN23SignedBytesEqualFailureD1Ev>
 8011e92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011e96:	4618      	mov	r0, r3
 8011e98:	f7f9 fb21 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 8011e9c:	bf00      	nop
 8011e9e:	3754      	adds	r7, #84	; 0x54
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	bd90      	pop	{r4, r7, pc}

08011ea4 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertPointersEqual(const void* expected, const void* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011ea4:	b590      	push	{r4, r7, lr}
 8011ea6:	b09d      	sub	sp, #116	; 0x74
 8011ea8:	af04      	add	r7, sp, #16
 8011eaa:	60f8      	str	r0, [r7, #12]
 8011eac:	60b9      	str	r1, [r7, #8]
 8011eae:	607a      	str	r2, [r7, #4]
 8011eb0:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011eb2:	68f8      	ldr	r0, [r7, #12]
 8011eb4:	f000 fb24 	bl	8012500 <_ZN10UtestShell13getTestResultEv>
 8011eb8:	4603      	mov	r3, r0
 8011eba:	681a      	ldr	r2, [r3, #0]
 8011ebc:	3228      	adds	r2, #40	; 0x28
 8011ebe:	6812      	ldr	r2, [r2, #0]
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	4790      	blx	r2
    if (expected != actual)
 8011ec4:	68ba      	ldr	r2, [r7, #8]
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	429a      	cmp	r2, r3
 8011eca:	d03f      	beq.n	8011f4c <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	339c      	adds	r3, #156	; 0x9c
 8011ed2:	681c      	ldr	r4, [r3, #0]
 8011ed4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011ed8:	68b9      	ldr	r1, [r7, #8]
 8011eda:	4618      	mov	r0, r3
 8011edc:	f7f9 fdea 	bl	800bab4 <_Z10StringFromPKv>
 8011ee0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011ee4:	6879      	ldr	r1, [r7, #4]
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	f7f9 fde4 	bl	800bab4 <_Z10StringFromPKv>
 8011eec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011ef0:	6839      	ldr	r1, [r7, #0]
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	f7f8 ff3b 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8011ef8:	f107 0014 	add.w	r0, r7, #20
 8011efc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011f00:	9302      	str	r3, [sp, #8]
 8011f02:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011f06:	9301      	str	r3, [sp, #4]
 8011f08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011f0c:	9300      	str	r3, [sp, #0]
 8011f0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011f10:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011f12:	68f9      	ldr	r1, [r7, #12]
 8011f14:	f7fb f814 	bl	800cf40 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011f18:	f107 0314 	add.w	r3, r7, #20
 8011f1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011f1e:	4619      	mov	r1, r3
 8011f20:	68f8      	ldr	r0, [r7, #12]
 8011f22:	47a0      	blx	r4
 8011f24:	f107 0314 	add.w	r3, r7, #20
 8011f28:	4618      	mov	r0, r3
 8011f2a:	f7fc f955 	bl	800e1d8 <_ZN13EqualsFailureD1Ev>
 8011f2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011f32:	4618      	mov	r0, r3
 8011f34:	f7f9 fad3 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8011f38:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	f7f9 face 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8011f42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011f46:	4618      	mov	r0, r3
 8011f48:	f7f9 fac9 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 8011f4c:	bf00      	nop
 8011f4e:	3764      	adds	r7, #100	; 0x64
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bd90      	pop	{r4, r7, pc}

08011f54 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertFunctionPointersEqual(void (*expected)(), void (*actual)(), const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011f54:	b590      	push	{r4, r7, lr}
 8011f56:	b09d      	sub	sp, #116	; 0x74
 8011f58:	af04      	add	r7, sp, #16
 8011f5a:	60f8      	str	r0, [r7, #12]
 8011f5c:	60b9      	str	r1, [r7, #8]
 8011f5e:	607a      	str	r2, [r7, #4]
 8011f60:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011f62:	68f8      	ldr	r0, [r7, #12]
 8011f64:	f000 facc 	bl	8012500 <_ZN10UtestShell13getTestResultEv>
 8011f68:	4603      	mov	r3, r0
 8011f6a:	681a      	ldr	r2, [r3, #0]
 8011f6c:	3228      	adds	r2, #40	; 0x28
 8011f6e:	6812      	ldr	r2, [r2, #0]
 8011f70:	4618      	mov	r0, r3
 8011f72:	4790      	blx	r2
    if (expected != actual)
 8011f74:	68ba      	ldr	r2, [r7, #8]
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	429a      	cmp	r2, r3
 8011f7a:	d03f      	beq.n	8011ffc <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	339c      	adds	r3, #156	; 0x9c
 8011f82:	681c      	ldr	r4, [r3, #0]
 8011f84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011f88:	68b9      	ldr	r1, [r7, #8]
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	f7f9 fdbc 	bl	800bb08 <_Z10StringFromPFvvE>
 8011f90:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011f94:	6879      	ldr	r1, [r7, #4]
 8011f96:	4618      	mov	r0, r3
 8011f98:	f7f9 fdb6 	bl	800bb08 <_Z10StringFromPFvvE>
 8011f9c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011fa0:	6839      	ldr	r1, [r7, #0]
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	f7f8 fee3 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8011fa8:	f107 0014 	add.w	r0, r7, #20
 8011fac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011fb0:	9302      	str	r3, [sp, #8]
 8011fb2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011fb6:	9301      	str	r3, [sp, #4]
 8011fb8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011fbc:	9300      	str	r3, [sp, #0]
 8011fbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011fc0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011fc2:	68f9      	ldr	r1, [r7, #12]
 8011fc4:	f7fa ffbc 	bl	800cf40 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011fc8:	f107 0314 	add.w	r3, r7, #20
 8011fcc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011fce:	4619      	mov	r1, r3
 8011fd0:	68f8      	ldr	r0, [r7, #12]
 8011fd2:	47a0      	blx	r4
 8011fd4:	f107 0314 	add.w	r3, r7, #20
 8011fd8:	4618      	mov	r0, r3
 8011fda:	f7fc f8fd 	bl	800e1d8 <_ZN13EqualsFailureD1Ev>
 8011fde:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	f7f9 fa7b 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8011fe8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011fec:	4618      	mov	r0, r3
 8011fee:	f7f9 fa76 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8011ff2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	f7f9 fa71 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 8011ffc:	bf00      	nop
 8011ffe:	3764      	adds	r7, #100	; 0x64
 8012000:	46bd      	mov	sp, r7
 8012002:	bd90      	pop	{r4, r7, pc}

08012004 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator>:

void UtestShell::assertDoublesEqual(double expected, double actual, double threshold, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8012004:	b590      	push	{r4, r7, lr}
 8012006:	b09d      	sub	sp, #116	; 0x74
 8012008:	af02      	add	r7, sp, #8
 801200a:	6278      	str	r0, [r7, #36]	; 0x24
 801200c:	ed87 0b06 	vstr	d0, [r7, #24]
 8012010:	ed87 1b04 	vstr	d1, [r7, #16]
 8012014:	ed87 2b02 	vstr	d2, [r7, #8]
 8012018:	6239      	str	r1, [r7, #32]
 801201a:	607a      	str	r2, [r7, #4]
 801201c:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801201e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012020:	f000 fa6e 	bl	8012500 <_ZN10UtestShell13getTestResultEv>
 8012024:	4603      	mov	r3, r0
 8012026:	681a      	ldr	r2, [r3, #0]
 8012028:	3228      	adds	r2, #40	; 0x28
 801202a:	6812      	ldr	r2, [r2, #0]
 801202c:	4618      	mov	r0, r3
 801202e:	4790      	blx	r2
    if (!doubles_equal(expected, actual, threshold))
 8012030:	ed97 2b02 	vldr	d2, [r7, #8]
 8012034:	ed97 1b04 	vldr	d1, [r7, #16]
 8012038:	ed97 0b06 	vldr	d0, [r7, #24]
 801203c:	f7fe fd4a 	bl	8010ad4 <_Z13doubles_equalddd>
 8012040:	4603      	mov	r3, r0
 8012042:	f083 0301 	eor.w	r3, r3, #1
 8012046:	b2db      	uxtb	r3, r3
 8012048:	2b00      	cmp	r3, #0
 801204a:	d029      	beq.n	80120a0 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator+0x9c>
        failWith(DoublesEqualFailure(this, fileName, lineNumber, expected, actual, threshold, text), testTerminator);
 801204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	339c      	adds	r3, #156	; 0x9c
 8012052:	681c      	ldr	r4, [r3, #0]
 8012054:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012058:	6a39      	ldr	r1, [r7, #32]
 801205a:	4618      	mov	r0, r3
 801205c:	f7f8 fe87 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8012060:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8012064:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012068:	9300      	str	r3, [sp, #0]
 801206a:	ed97 2b02 	vldr	d2, [r7, #8]
 801206e:	ed97 1b04 	vldr	d1, [r7, #16]
 8012072:	ed97 0b06 	vldr	d0, [r7, #24]
 8012076:	683b      	ldr	r3, [r7, #0]
 8012078:	687a      	ldr	r2, [r7, #4]
 801207a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801207c:	f7fa ffa2 	bl	800cfc4 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>
 8012080:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012084:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012086:	4619      	mov	r1, r3
 8012088:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801208a:	47a0      	blx	r4
 801208c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012090:	4618      	mov	r0, r3
 8012092:	f7fc f87f 	bl	800e194 <_ZN19DoublesEqualFailureD1Ev>
 8012096:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801209a:	4618      	mov	r0, r3
 801209c:	f7f9 fa1f 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 80120a0:	bf00      	nop
 80120a2:	376c      	adds	r7, #108	; 0x6c
 80120a4:	46bd      	mov	sp, r7
 80120a6:	bd90      	pop	{r4, r7, pc}

080120a8 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator>:

void UtestShell::assertBinaryEqual(const void *expected, const void *actual, size_t length, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80120a8:	b590      	push	{r4, r7, lr}
 80120aa:	b0a7      	sub	sp, #156	; 0x9c
 80120ac:	af04      	add	r7, sp, #16
 80120ae:	60f8      	str	r0, [r7, #12]
 80120b0:	60b9      	str	r1, [r7, #8]
 80120b2:	607a      	str	r2, [r7, #4]
 80120b4:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80120b6:	68f8      	ldr	r0, [r7, #12]
 80120b8:	f000 fa22 	bl	8012500 <_ZN10UtestShell13getTestResultEv>
 80120bc:	4603      	mov	r3, r0
 80120be:	681a      	ldr	r2, [r3, #0]
 80120c0:	3228      	adds	r2, #40	; 0x28
 80120c2:	6812      	ldr	r2, [r2, #0]
 80120c4:	4618      	mov	r0, r3
 80120c6:	4790      	blx	r2
	if (length == 0) return;
 80120c8:	683b      	ldr	r3, [r7, #0]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d075      	beq.n	80121ba <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x112>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d102      	bne.n	80120da <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x32>
 80120d4:	68bb      	ldr	r3, [r7, #8]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d071      	beq.n	80121be <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x116>
    if (actual == NULLPTR || expected == NULLPTR)
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d002      	beq.n	80120e6 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x3e>
 80120e0:	68bb      	ldr	r3, [r7, #8]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d12d      	bne.n	8012142 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x9a>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	339c      	adds	r3, #156	; 0x9c
 80120ec:	681c      	ldr	r4, [r3, #0]
 80120ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80120f2:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80120f6:	4618      	mov	r0, r3
 80120f8:	f7f8 fe39 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80120fc:	f107 0010 	add.w	r0, r7, #16
 8012100:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012104:	9303      	str	r3, [sp, #12]
 8012106:	683b      	ldr	r3, [r7, #0]
 8012108:	9302      	str	r3, [sp, #8]
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	9301      	str	r3, [sp, #4]
 801210e:	68bb      	ldr	r3, [r7, #8]
 8012110:	9300      	str	r3, [sp, #0]
 8012112:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012116:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801211a:	68f9      	ldr	r1, [r7, #12]
 801211c:	f7fb fd70 	bl	800dc00 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 8012120:	f107 0310 	add.w	r3, r7, #16
 8012124:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8012128:	4619      	mov	r1, r3
 801212a:	68f8      	ldr	r0, [r7, #12]
 801212c:	47a0      	blx	r4
 801212e:	f107 0310 	add.w	r3, r7, #16
 8012132:	4618      	mov	r0, r3
 8012134:	f7fb feda 	bl	800deec <_ZN18BinaryEqualFailureD1Ev>
 8012138:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801213c:	4618      	mov	r0, r3
 801213e:	f7f9 f9ce 	bl	800b4de <_ZN12SimpleStringD1Ev>
    if (SimpleString::MemCmp(expected, actual, length) != 0)
 8012142:	683a      	ldr	r2, [r7, #0]
 8012144:	6879      	ldr	r1, [r7, #4]
 8012146:	68b8      	ldr	r0, [r7, #8]
 8012148:	f7f8 fd30 	bl	800abac <_ZN12SimpleString6MemCmpEPKvS1_j>
 801214c:	4603      	mov	r3, r0
 801214e:	2b00      	cmp	r3, #0
 8012150:	bf14      	ite	ne
 8012152:	2301      	movne	r3, #1
 8012154:	2300      	moveq	r3, #0
 8012156:	b2db      	uxtb	r3, r3
 8012158:	2b00      	cmp	r3, #0
 801215a:	d031      	beq.n	80121c0 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	339c      	adds	r3, #156	; 0x9c
 8012162:	681c      	ldr	r4, [r3, #0]
 8012164:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012168:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801216c:	4618      	mov	r0, r3
 801216e:	f7f8 fdfe 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8012172:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8012176:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801217a:	9303      	str	r3, [sp, #12]
 801217c:	683b      	ldr	r3, [r7, #0]
 801217e:	9302      	str	r3, [sp, #8]
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	9301      	str	r3, [sp, #4]
 8012184:	68bb      	ldr	r3, [r7, #8]
 8012186:	9300      	str	r3, [sp, #0]
 8012188:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801218c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8012190:	68f9      	ldr	r1, [r7, #12]
 8012192:	f7fb fd35 	bl	800dc00 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 8012196:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801219a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801219e:	4619      	mov	r1, r3
 80121a0:	68f8      	ldr	r0, [r7, #12]
 80121a2:	47a0      	blx	r4
 80121a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80121a8:	4618      	mov	r0, r3
 80121aa:	f7fb fe9f 	bl	800deec <_ZN18BinaryEqualFailureD1Ev>
 80121ae:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80121b2:	4618      	mov	r0, r3
 80121b4:	f7f9 f993 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80121b8:	e002      	b.n	80121c0 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
	if (length == 0) return;
 80121ba:	bf00      	nop
 80121bc:	e000      	b.n	80121c0 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80121be:	bf00      	nop
}
 80121c0:	378c      	adds	r7, #140	; 0x8c
 80121c2:	46bd      	mov	sp, r7
 80121c4:	bd90      	pop	{r4, r7, pc}

080121c6 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator>:

void UtestShell::assertBitsEqual(unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80121c6:	b590      	push	{r4, r7, lr}
 80121c8:	b09b      	sub	sp, #108	; 0x6c
 80121ca:	af06      	add	r7, sp, #24
 80121cc:	60f8      	str	r0, [r7, #12]
 80121ce:	60b9      	str	r1, [r7, #8]
 80121d0:	607a      	str	r2, [r7, #4]
 80121d2:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80121d4:	68f8      	ldr	r0, [r7, #12]
 80121d6:	f000 f993 	bl	8012500 <_ZN10UtestShell13getTestResultEv>
 80121da:	4603      	mov	r3, r0
 80121dc:	681a      	ldr	r2, [r3, #0]
 80121de:	3228      	adds	r2, #40	; 0x28
 80121e0:	6812      	ldr	r2, [r2, #0]
 80121e2:	4618      	mov	r0, r3
 80121e4:	4790      	blx	r2
    if ((expected & mask) != (actual & mask))
 80121e6:	68ba      	ldr	r2, [r7, #8]
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	405a      	eors	r2, r3
 80121ec:	683b      	ldr	r3, [r7, #0]
 80121ee:	4013      	ands	r3, r2
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d02b      	beq.n	801224c <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator+0x86>
        failWith(BitsEqualFailure(this, fileName, lineNumber, expected, actual, mask, byteCount, text), testTerminator);
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	339c      	adds	r3, #156	; 0x9c
 80121fa:	681c      	ldr	r4, [r3, #0]
 80121fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012200:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8012202:	4618      	mov	r0, r3
 8012204:	f7f8 fdb3 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8012208:	f107 0014 	add.w	r0, r7, #20
 801220c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012210:	9304      	str	r3, [sp, #16]
 8012212:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012214:	9303      	str	r3, [sp, #12]
 8012216:	683b      	ldr	r3, [r7, #0]
 8012218:	9302      	str	r3, [sp, #8]
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	9301      	str	r3, [sp, #4]
 801221e:	68bb      	ldr	r3, [r7, #8]
 8012220:	9300      	str	r3, [sp, #0]
 8012222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012224:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012226:	68f9      	ldr	r1, [r7, #12]
 8012228:	f7fb fd7a 	bl	800dd20 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>
 801222c:	f107 0314 	add.w	r3, r7, #20
 8012230:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012232:	4619      	mov	r1, r3
 8012234:	68f8      	ldr	r0, [r7, #12]
 8012236:	47a0      	blx	r4
 8012238:	f107 0314 	add.w	r3, r7, #20
 801223c:	4618      	mov	r0, r3
 801223e:	f7fb fe33 	bl	800dea8 <_ZN16BitsEqualFailureD1Ev>
 8012242:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012246:	4618      	mov	r0, r3
 8012248:	f7f9 f949 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 801224c:	bf00      	nop
 801224e:	3754      	adds	r7, #84	; 0x54
 8012250:	46bd      	mov	sp, r7
 8012252:	bd90      	pop	{r4, r7, pc}

08012254 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertEquals(bool failed, const char* expected, const char* actual, const char* text, const char* file, size_t line, const TestTerminator& testTerminator)
{
 8012254:	b590      	push	{r4, r7, lr}
 8012256:	b09d      	sub	sp, #116	; 0x74
 8012258:	af04      	add	r7, sp, #16
 801225a:	60f8      	str	r0, [r7, #12]
 801225c:	607a      	str	r2, [r7, #4]
 801225e:	603b      	str	r3, [r7, #0]
 8012260:	460b      	mov	r3, r1
 8012262:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8012264:	68f8      	ldr	r0, [r7, #12]
 8012266:	f000 f94b 	bl	8012500 <_ZN10UtestShell13getTestResultEv>
 801226a:	4603      	mov	r3, r0
 801226c:	681a      	ldr	r2, [r3, #0]
 801226e:	3228      	adds	r2, #40	; 0x28
 8012270:	6812      	ldr	r2, [r2, #0]
 8012272:	4618      	mov	r0, r3
 8012274:	4790      	blx	r2
    if (failed)
 8012276:	7afb      	ldrb	r3, [r7, #11]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d03f      	beq.n	80122fc <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator+0xa8>
        failWith(CheckEqualFailure(this, file, line, expected, actual, text), testTerminator);
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	339c      	adds	r3, #156	; 0x9c
 8012282:	681c      	ldr	r4, [r3, #0]
 8012284:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012288:	6879      	ldr	r1, [r7, #4]
 801228a:	4618      	mov	r0, r3
 801228c:	f7f8 fd6f 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8012290:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012294:	6839      	ldr	r1, [r7, #0]
 8012296:	4618      	mov	r0, r3
 8012298:	f7f8 fd69 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801229c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80122a0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80122a2:	4618      	mov	r0, r3
 80122a4:	f7f8 fd63 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80122a8:	f107 0014 	add.w	r0, r7, #20
 80122ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80122b0:	9302      	str	r3, [sp, #8]
 80122b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80122b6:	9301      	str	r3, [sp, #4]
 80122b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80122bc:	9300      	str	r3, [sp, #0]
 80122be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80122c0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80122c2:	68f9      	ldr	r1, [r7, #12]
 80122c4:	f7fa ff30 	bl	800d128 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80122c8:	f107 0314 	add.w	r3, r7, #20
 80122cc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80122ce:	4619      	mov	r1, r3
 80122d0:	68f8      	ldr	r0, [r7, #12]
 80122d2:	47a0      	blx	r4
 80122d4:	f107 0314 	add.w	r3, r7, #20
 80122d8:	4618      	mov	r0, r3
 80122da:	f7fb ff39 	bl	800e150 <_ZN17CheckEqualFailureD1Ev>
 80122de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80122e2:	4618      	mov	r0, r3
 80122e4:	f7f9 f8fb 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80122e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80122ec:	4618      	mov	r0, r3
 80122ee:	f7f9 f8f6 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80122f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80122f6:	4618      	mov	r0, r3
 80122f8:	f7f9 f8f1 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 80122fc:	bf00      	nop
 80122fe:	3764      	adds	r7, #100	; 0x64
 8012300:	46bd      	mov	sp, r7
 8012302:	bd90      	pop	{r4, r7, pc}

08012304 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCompare(bool comparison, const char *checkString, const char *comparisonString, const char *text, const char *fileName, size_t lineNumber, const TestTerminator &testTerminator)
{
 8012304:	b590      	push	{r4, r7, lr}
 8012306:	b09d      	sub	sp, #116	; 0x74
 8012308:	af04      	add	r7, sp, #16
 801230a:	60f8      	str	r0, [r7, #12]
 801230c:	607a      	str	r2, [r7, #4]
 801230e:	603b      	str	r3, [r7, #0]
 8012310:	460b      	mov	r3, r1
 8012312:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8012314:	68f8      	ldr	r0, [r7, #12]
 8012316:	f000 f8f3 	bl	8012500 <_ZN10UtestShell13getTestResultEv>
 801231a:	4603      	mov	r3, r0
 801231c:	681a      	ldr	r2, [r3, #0]
 801231e:	3228      	adds	r2, #40	; 0x28
 8012320:	6812      	ldr	r2, [r2, #0]
 8012322:	4618      	mov	r0, r3
 8012324:	4790      	blx	r2
    if (!comparison)
 8012326:	7afb      	ldrb	r3, [r7, #11]
 8012328:	f083 0301 	eor.w	r3, r3, #1
 801232c:	b2db      	uxtb	r3, r3
 801232e:	2b00      	cmp	r3, #0
 8012330:	d03f      	beq.n	80123b2 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(ComparisonFailure(this, fileName, lineNumber, checkString, comparisonString, text), testTerminator);
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	339c      	adds	r3, #156	; 0x9c
 8012338:	681c      	ldr	r4, [r3, #0]
 801233a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801233e:	6879      	ldr	r1, [r7, #4]
 8012340:	4618      	mov	r0, r3
 8012342:	f7f8 fd14 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8012346:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801234a:	6839      	ldr	r1, [r7, #0]
 801234c:	4618      	mov	r0, r3
 801234e:	f7f8 fd0e 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8012352:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012356:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8012358:	4618      	mov	r0, r3
 801235a:	f7f8 fd08 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801235e:	f107 0014 	add.w	r0, r7, #20
 8012362:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012366:	9302      	str	r3, [sp, #8]
 8012368:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801236c:	9301      	str	r3, [sp, #4]
 801236e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012372:	9300      	str	r3, [sp, #0]
 8012374:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012376:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012378:	68f9      	ldr	r1, [r7, #12]
 801237a:	f7fa ff83 	bl	800d284 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 801237e:	f107 0314 	add.w	r3, r7, #20
 8012382:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012384:	4619      	mov	r1, r3
 8012386:	68f8      	ldr	r0, [r7, #12]
 8012388:	47a0      	blx	r4
 801238a:	f107 0314 	add.w	r3, r7, #20
 801238e:	4618      	mov	r0, r3
 8012390:	f7fb febc 	bl	800e10c <_ZN17ComparisonFailureD1Ev>
 8012394:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012398:	4618      	mov	r0, r3
 801239a:	f7f9 f8a0 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801239e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80123a2:	4618      	mov	r0, r3
 80123a4:	f7f9 f89b 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80123a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80123ac:	4618      	mov	r0, r3
 80123ae:	f7f9 f896 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 80123b2:	bf00      	nop
 80123b4:	3764      	adds	r7, #100	; 0x64
 80123b6:	46bd      	mov	sp, r7
 80123b8:	bd90      	pop	{r4, r7, pc}
	...

080123bc <_ZN10UtestShell5printEPKcS1_j>:

void UtestShell::print(const char *text, const char* fileName, size_t lineNumber)
{
 80123bc:	b5b0      	push	{r4, r5, r7, lr}
 80123be:	b088      	sub	sp, #32
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	60f8      	str	r0, [r7, #12]
 80123c4:	60b9      	str	r1, [r7, #8]
 80123c6:	607a      	str	r2, [r7, #4]
 80123c8:	603b      	str	r3, [r7, #0]
    SimpleString stringToPrint = "\n";
 80123ca:	f107 0310 	add.w	r3, r7, #16
 80123ce:	4924      	ldr	r1, [pc, #144]	; (8012460 <_ZN10UtestShell5printEPKcS1_j+0xa4>)
 80123d0:	4618      	mov	r0, r3
 80123d2:	f7f8 fccc 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
    stringToPrint += fileName;
 80123d6:	f107 0310 	add.w	r3, r7, #16
 80123da:	6879      	ldr	r1, [r7, #4]
 80123dc:	4618      	mov	r0, r3
 80123de:	f7f9 f90d 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    stringToPrint += ":";
 80123e2:	f107 0310 	add.w	r3, r7, #16
 80123e6:	491f      	ldr	r1, [pc, #124]	; (8012464 <_ZN10UtestShell5printEPKcS1_j+0xa8>)
 80123e8:	4618      	mov	r0, r3
 80123ea:	f7f9 f907 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    stringToPrint += StringFrom(lineNumber);
 80123ee:	f107 0318 	add.w	r3, r7, #24
 80123f2:	6839      	ldr	r1, [r7, #0]
 80123f4:	4618      	mov	r0, r3
 80123f6:	f7f9 fda1 	bl	800bf3c <_Z10StringFromj>
 80123fa:	f107 0218 	add.w	r2, r7, #24
 80123fe:	f107 0310 	add.w	r3, r7, #16
 8012402:	4611      	mov	r1, r2
 8012404:	4618      	mov	r0, r3
 8012406:	f7f9 f8e7 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 801240a:	f107 0318 	add.w	r3, r7, #24
 801240e:	4618      	mov	r0, r3
 8012410:	f7f9 f865 	bl	800b4de <_ZN12SimpleStringD1Ev>
    stringToPrint += " ";
 8012414:	f107 0310 	add.w	r3, r7, #16
 8012418:	4913      	ldr	r1, [pc, #76]	; (8012468 <_ZN10UtestShell5printEPKcS1_j+0xac>)
 801241a:	4618      	mov	r0, r3
 801241c:	f7f9 f8ee 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    stringToPrint += text;
 8012420:	f107 0310 	add.w	r3, r7, #16
 8012424:	68b9      	ldr	r1, [r7, #8]
 8012426:	4618      	mov	r0, r3
 8012428:	f7f9 f8e8 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    getTestResult()->print(stringToPrint.asCharString());
 801242c:	68f8      	ldr	r0, [r7, #12]
 801242e:	f000 f867 	bl	8012500 <_ZN10UtestShell13getTestResultEv>
 8012432:	4604      	mov	r4, r0
 8012434:	6823      	ldr	r3, [r4, #0]
 8012436:	3338      	adds	r3, #56	; 0x38
 8012438:	681d      	ldr	r5, [r3, #0]
 801243a:	f107 0310 	add.w	r3, r7, #16
 801243e:	4618      	mov	r0, r3
 8012440:	f7f9 f820 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 8012444:	4603      	mov	r3, r0
 8012446:	4619      	mov	r1, r3
 8012448:	4620      	mov	r0, r4
 801244a:	47a8      	blx	r5
    SimpleString stringToPrint = "\n";
 801244c:	f107 0310 	add.w	r3, r7, #16
 8012450:	4618      	mov	r0, r3
 8012452:	f7f9 f844 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 8012456:	bf00      	nop
 8012458:	3720      	adds	r7, #32
 801245a:	46bd      	mov	sp, r7
 801245c:	bdb0      	pop	{r4, r5, r7, pc}
 801245e:	bf00      	nop
 8012460:	08022ea0 	.word	0x08022ea0
 8012464:	08022ea4 	.word	0x08022ea4
 8012468:	08022ea8 	.word	0x08022ea8

0801246c <_ZN10UtestShell5printERK12SimpleStringPKcj>:

void UtestShell::print(const SimpleString& text, const char* fileName, size_t lineNumber)
{
 801246c:	b590      	push	{r4, r7, lr}
 801246e:	b085      	sub	sp, #20
 8012470:	af00      	add	r7, sp, #0
 8012472:	60f8      	str	r0, [r7, #12]
 8012474:	60b9      	str	r1, [r7, #8]
 8012476:	607a      	str	r2, [r7, #4]
 8012478:	603b      	str	r3, [r7, #0]
    print(text.asCharString(), fileName, lineNumber);
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	3370      	adds	r3, #112	; 0x70
 8012480:	681c      	ldr	r4, [r3, #0]
 8012482:	68b8      	ldr	r0, [r7, #8]
 8012484:	f7f8 fffe 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 8012488:	4601      	mov	r1, r0
 801248a:	683b      	ldr	r3, [r7, #0]
 801248c:	687a      	ldr	r2, [r7, #4]
 801248e:	68f8      	ldr	r0, [r7, #12]
 8012490:	47a0      	blx	r4
}
 8012492:	bf00      	nop
 8012494:	3714      	adds	r7, #20
 8012496:	46bd      	mov	sp, r7
 8012498:	bd90      	pop	{r4, r7, pc}

0801249a <_ZN10UtestShell16printVeryVerboseEPKc>:

void UtestShell::printVeryVerbose(const char* text)
{
 801249a:	b580      	push	{r7, lr}
 801249c:	b082      	sub	sp, #8
 801249e:	af00      	add	r7, sp, #0
 80124a0:	6078      	str	r0, [r7, #4]
 80124a2:	6039      	str	r1, [r7, #0]
    getTestResult()->printVeryVerbose(text);
 80124a4:	6878      	ldr	r0, [r7, #4]
 80124a6:	f000 f82b 	bl	8012500 <_ZN10UtestShell13getTestResultEv>
 80124aa:	4603      	mov	r3, r0
 80124ac:	681a      	ldr	r2, [r3, #0]
 80124ae:	323c      	adds	r2, #60	; 0x3c
 80124b0:	6812      	ldr	r2, [r2, #0]
 80124b2:	6839      	ldr	r1, [r7, #0]
 80124b4:	4618      	mov	r0, r3
 80124b6:	4790      	blx	r2
}
 80124b8:	bf00      	nop
 80124ba:	3708      	adds	r7, #8
 80124bc:	46bd      	mov	sp, r7
 80124be:	bd80      	pop	{r7, pc}

080124c0 <_ZN10UtestShell13setTestResultEP10TestResult>:

TestResult* UtestShell::testResult_ = NULLPTR;
UtestShell* UtestShell::currentTest_ = NULLPTR;

void UtestShell::setTestResult(TestResult* result)
{
 80124c0:	b480      	push	{r7}
 80124c2:	b083      	sub	sp, #12
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	6078      	str	r0, [r7, #4]
 80124c8:	6039      	str	r1, [r7, #0]
    testResult_ = result;
 80124ca:	4a04      	ldr	r2, [pc, #16]	; (80124dc <_ZN10UtestShell13setTestResultEP10TestResult+0x1c>)
 80124cc:	683b      	ldr	r3, [r7, #0]
 80124ce:	6013      	str	r3, [r2, #0]
}
 80124d0:	bf00      	nop
 80124d2:	370c      	adds	r7, #12
 80124d4:	46bd      	mov	sp, r7
 80124d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124da:	4770      	bx	lr
 80124dc:	20000958 	.word	0x20000958

080124e0 <_ZN10UtestShell14setCurrentTestEPS_>:

void UtestShell::setCurrentTest(UtestShell* test)
{
 80124e0:	b480      	push	{r7}
 80124e2:	b083      	sub	sp, #12
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	6078      	str	r0, [r7, #4]
 80124e8:	6039      	str	r1, [r7, #0]
    currentTest_ = test;
 80124ea:	4a04      	ldr	r2, [pc, #16]	; (80124fc <_ZN10UtestShell14setCurrentTestEPS_+0x1c>)
 80124ec:	683b      	ldr	r3, [r7, #0]
 80124ee:	6013      	str	r3, [r2, #0]
}
 80124f0:	bf00      	nop
 80124f2:	370c      	adds	r7, #12
 80124f4:	46bd      	mov	sp, r7
 80124f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fa:	4770      	bx	lr
 80124fc:	2000095c 	.word	0x2000095c

08012500 <_ZN10UtestShell13getTestResultEv>:

TestResult* UtestShell::getTestResult()
{
 8012500:	b580      	push	{r7, lr}
 8012502:	b082      	sub	sp, #8
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
    if (testResult_ == NULLPTR)
 8012508:	4b09      	ldr	r3, [pc, #36]	; (8012530 <_ZN10UtestShell13getTestResultEv+0x30>)
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d109      	bne.n	8012524 <_ZN10UtestShell13getTestResultEv+0x24>
        return &OutsideTestRunnerUTest::instance().getTestResult();
 8012510:	f7fe fbb2 	bl	8010c78 <_ZN22OutsideTestRunnerUTest8instanceEv>
 8012514:	4603      	mov	r3, r0
 8012516:	681a      	ldr	r2, [r3, #0]
 8012518:	32a4      	adds	r2, #164	; 0xa4
 801251a:	6812      	ldr	r2, [r2, #0]
 801251c:	4618      	mov	r0, r3
 801251e:	4790      	blx	r2
 8012520:	4603      	mov	r3, r0
 8012522:	e001      	b.n	8012528 <_ZN10UtestShell13getTestResultEv+0x28>
    return testResult_;
 8012524:	4b02      	ldr	r3, [pc, #8]	; (8012530 <_ZN10UtestShell13getTestResultEv+0x30>)
 8012526:	681b      	ldr	r3, [r3, #0]
}
 8012528:	4618      	mov	r0, r3
 801252a:	3708      	adds	r7, #8
 801252c:	46bd      	mov	sp, r7
 801252e:	bd80      	pop	{r7, pc}
 8012530:	20000958 	.word	0x20000958

08012534 <_ZN10UtestShell10getCurrentEv>:

UtestShell* UtestShell::getCurrent()
{
 8012534:	b580      	push	{r7, lr}
 8012536:	af00      	add	r7, sp, #0
    if (currentTest_ == NULLPTR)
 8012538:	4b05      	ldr	r3, [pc, #20]	; (8012550 <_ZN10UtestShell10getCurrentEv+0x1c>)
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d103      	bne.n	8012548 <_ZN10UtestShell10getCurrentEv+0x14>
        return &OutsideTestRunnerUTest::instance();
 8012540:	f7fe fb9a 	bl	8010c78 <_ZN22OutsideTestRunnerUTest8instanceEv>
 8012544:	4603      	mov	r3, r0
 8012546:	e001      	b.n	801254c <_ZN10UtestShell10getCurrentEv+0x18>
    return currentTest_;
 8012548:	4b01      	ldr	r3, [pc, #4]	; (8012550 <_ZN10UtestShell10getCurrentEv+0x1c>)
 801254a:	681b      	ldr	r3, [r3, #0]
}
 801254c:	4618      	mov	r0, r3
 801254e:	bd80      	pop	{r7, pc}
 8012550:	2000095c 	.word	0x2000095c

08012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>:

const TestTerminator &UtestShell::getCurrentTestTerminator()
{
 8012554:	b480      	push	{r7}
 8012556:	af00      	add	r7, sp, #0
    return *currentTestTerminator_;
 8012558:	4b03      	ldr	r3, [pc, #12]	; (8012568 <_ZN10UtestShell24getCurrentTestTerminatorEv+0x14>)
 801255a:	681b      	ldr	r3, [r3, #0]
}
 801255c:	4618      	mov	r0, r3
 801255e:	46bd      	mov	sp, r7
 8012560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012564:	4770      	bx	lr
 8012566:	bf00      	nop
 8012568:	20000094 	.word	0x20000094

0801256c <_ZN10UtestShell14setCrashOnFailEv>:

void UtestShell::setCrashOnFail()
{
 801256c:	b480      	push	{r7}
 801256e:	af00      	add	r7, sp, #0
    currentTestTerminator_ = &crashingTestTerminator;
 8012570:	4b03      	ldr	r3, [pc, #12]	; (8012580 <_ZN10UtestShell14setCrashOnFailEv+0x14>)
 8012572:	4a04      	ldr	r2, [pc, #16]	; (8012584 <_ZN10UtestShell14setCrashOnFailEv+0x18>)
 8012574:	601a      	str	r2, [r3, #0]
}
 8012576:	bf00      	nop
 8012578:	46bd      	mov	sp, r7
 801257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801257e:	4770      	bx	lr
 8012580:	20000094 	.word	0x20000094
 8012584:	20000090 	.word	0x20000090

08012588 <_ZN5UtestC1Ev>:
{
}

////////////// Utest ////////////

Utest::Utest()
 8012588:	b480      	push	{r7}
 801258a:	b083      	sub	sp, #12
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
 8012590:	4a04      	ldr	r2, [pc, #16]	; (80125a4 <_ZN5UtestC1Ev+0x1c>)
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	601a      	str	r2, [r3, #0]
{
}
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	4618      	mov	r0, r3
 801259a:	370c      	adds	r7, #12
 801259c:	46bd      	mov	sp, r7
 801259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a2:	4770      	bx	lr
 80125a4:	08025f84 	.word	0x08025f84

080125a8 <_ZN5UtestD1Ev>:

Utest::~Utest()
 80125a8:	b480      	push	{r7}
 80125aa:	b083      	sub	sp, #12
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]
 80125b0:	4a04      	ldr	r2, [pc, #16]	; (80125c4 <_ZN5UtestD1Ev+0x1c>)
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	601a      	str	r2, [r3, #0]
{
}
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	4618      	mov	r0, r3
 80125ba:	370c      	adds	r7, #12
 80125bc:	46bd      	mov	sp, r7
 80125be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c2:	4770      	bx	lr
 80125c4:	08025f84 	.word	0x08025f84

080125c8 <_ZN5UtestD0Ev>:
Utest::~Utest()
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b082      	sub	sp, #8
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	6078      	str	r0, [r7, #4]
}
 80125d0:	6878      	ldr	r0, [r7, #4]
 80125d2:	f7ff ffe9 	bl	80125a8 <_ZN5UtestD1Ev>
 80125d6:	2104      	movs	r1, #4
 80125d8:	6878      	ldr	r0, [r7, #4]
 80125da:	f7f6 f819 	bl	8008610 <_ZdlPvj>
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	4618      	mov	r0, r3
 80125e2:	3708      	adds	r7, #8
 80125e4:	46bd      	mov	sp, r7
 80125e6:	bd80      	pop	{r7, pc}

080125e8 <_ZN5Utest3runEv>:

}
#else

void Utest::run()
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b082      	sub	sp, #8
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
    if (PlatformSpecificSetJmp(helperDoTestSetup, this)) {
 80125f0:	4b0d      	ldr	r3, [pc, #52]	; (8012628 <_ZN5Utest3runEv+0x40>)
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	6879      	ldr	r1, [r7, #4]
 80125f6:	480d      	ldr	r0, [pc, #52]	; (801262c <_ZN5Utest3runEv+0x44>)
 80125f8:	4798      	blx	r3
 80125fa:	4603      	mov	r3, r0
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	bf14      	ite	ne
 8012600:	2301      	movne	r3, #1
 8012602:	2300      	moveq	r3, #0
 8012604:	b2db      	uxtb	r3, r3
 8012606:	2b00      	cmp	r3, #0
 8012608:	d004      	beq.n	8012614 <_ZN5Utest3runEv+0x2c>
        PlatformSpecificSetJmp(helperDoTestBody, this);
 801260a:	4b07      	ldr	r3, [pc, #28]	; (8012628 <_ZN5Utest3runEv+0x40>)
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	6879      	ldr	r1, [r7, #4]
 8012610:	4807      	ldr	r0, [pc, #28]	; (8012630 <_ZN5Utest3runEv+0x48>)
 8012612:	4798      	blx	r3
    }
    PlatformSpecificSetJmp(helperDoTestTeardown, this);
 8012614:	4b04      	ldr	r3, [pc, #16]	; (8012628 <_ZN5Utest3runEv+0x40>)
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	6879      	ldr	r1, [r7, #4]
 801261a:	4806      	ldr	r0, [pc, #24]	; (8012634 <_ZN5Utest3runEv+0x4c>)
 801261c:	4798      	blx	r3
}
 801261e:	bf00      	nop
 8012620:	3708      	adds	r7, #8
 8012622:	46bd      	mov	sp, r7
 8012624:	bd80      	pop	{r7, pc}
 8012626:	bf00      	nop
 8012628:	200000a4 	.word	0x200000a4
 801262c:	08010cd5 	.word	0x08010cd5
 8012630:	08010cf1 	.word	0x08010cf1
 8012634:	08010d0d 	.word	0x08010d0d

08012638 <_ZN5Utest5setupEv>:

#endif

void Utest::setup()
{
 8012638:	b480      	push	{r7}
 801263a:	b083      	sub	sp, #12
 801263c:	af00      	add	r7, sp, #0
 801263e:	6078      	str	r0, [r7, #4]
}
 8012640:	bf00      	nop
 8012642:	370c      	adds	r7, #12
 8012644:	46bd      	mov	sp, r7
 8012646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264a:	4770      	bx	lr

0801264c <_ZN5Utest8testBodyEv>:

void Utest::testBody()
{
 801264c:	b480      	push	{r7}
 801264e:	b083      	sub	sp, #12
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
}
 8012654:	bf00      	nop
 8012656:	370c      	adds	r7, #12
 8012658:	46bd      	mov	sp, r7
 801265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801265e:	4770      	bx	lr

08012660 <_ZN5Utest8teardownEv>:

void Utest::teardown()
{
 8012660:	b480      	push	{r7}
 8012662:	b083      	sub	sp, #12
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
}
 8012668:	bf00      	nop
 801266a:	370c      	adds	r7, #12
 801266c:	46bd      	mov	sp, r7
 801266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012672:	4770      	bx	lr

08012674 <_ZN14TestTerminatorD1Ev>:


/////////////////// Terminators

TestTerminator::~TestTerminator()
 8012674:	b480      	push	{r7}
 8012676:	b083      	sub	sp, #12
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
 801267c:	4a04      	ldr	r2, [pc, #16]	; (8012690 <_ZN14TestTerminatorD1Ev+0x1c>)
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	601a      	str	r2, [r3, #0]
{
}
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	4618      	mov	r0, r3
 8012686:	370c      	adds	r7, #12
 8012688:	46bd      	mov	sp, r7
 801268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801268e:	4770      	bx	lr
 8012690:	08025f70 	.word	0x08025f70

08012694 <_ZNK20NormalTestTerminator15exitCurrentTestEv>:

void NormalTestTerminator::exitCurrentTest() const
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b084      	sub	sp, #16
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
    #if CPPUTEST_USE_STD_CPP_LIB
        throw CppUTestFailedException();
    #else
        TestTerminatorWithoutExceptions().exitCurrentTest();
 801269c:	2300      	movs	r3, #0
 801269e:	60fb      	str	r3, [r7, #12]
 80126a0:	f107 030c 	add.w	r3, r7, #12
 80126a4:	4618      	mov	r0, r3
 80126a6:	f7f6 f975 	bl	8008994 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 80126aa:	f107 030c 	add.w	r3, r7, #12
 80126ae:	4618      	mov	r0, r3
 80126b0:	f000 f82c 	bl	801270c <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>
 80126b4:	f107 030c 	add.w	r3, r7, #12
 80126b8:	4618      	mov	r0, r3
 80126ba:	f000 f835 	bl	8012728 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
    #endif
}
 80126be:	bf00      	nop
 80126c0:	3710      	adds	r7, #16
 80126c2:	46bd      	mov	sp, r7
 80126c4:	bd80      	pop	{r7, pc}
	...

080126c8 <_ZN20NormalTestTerminatorD1Ev>:

NormalTestTerminator::~NormalTestTerminator()
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b082      	sub	sp, #8
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
 80126d0:	4a05      	ldr	r2, [pc, #20]	; (80126e8 <_ZN20NormalTestTerminatorD1Ev+0x20>)
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	601a      	str	r2, [r3, #0]
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	4618      	mov	r0, r3
 80126da:	f7ff ffcb 	bl	8012674 <_ZN14TestTerminatorD1Ev>
{
}
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	4618      	mov	r0, r3
 80126e2:	3708      	adds	r7, #8
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}
 80126e8:	08025f5c 	.word	0x08025f5c

080126ec <_ZN20NormalTestTerminatorD0Ev>:
NormalTestTerminator::~NormalTestTerminator()
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b082      	sub	sp, #8
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	6078      	str	r0, [r7, #4]
}
 80126f4:	6878      	ldr	r0, [r7, #4]
 80126f6:	f7ff ffe7 	bl	80126c8 <_ZN20NormalTestTerminatorD1Ev>
 80126fa:	2104      	movs	r1, #4
 80126fc:	6878      	ldr	r0, [r7, #4]
 80126fe:	f7f5 ff87 	bl	8008610 <_ZdlPvj>
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	4618      	mov	r0, r3
 8012706:	3708      	adds	r7, #8
 8012708:	46bd      	mov	sp, r7
 801270a:	bd80      	pop	{r7, pc}

0801270c <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>:

void TestTerminatorWithoutExceptions::exitCurrentTest() const
{
 801270c:	b580      	push	{r7, lr}
 801270e:	b082      	sub	sp, #8
 8012710:	af00      	add	r7, sp, #0
 8012712:	6078      	str	r0, [r7, #4]
    PlatformSpecificLongJmp();
 8012714:	4b03      	ldr	r3, [pc, #12]	; (8012724 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv+0x18>)
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	4798      	blx	r3
} // LCOV_EXCL_LINE
 801271a:	bf00      	nop
 801271c:	3708      	adds	r7, #8
 801271e:	46bd      	mov	sp, r7
 8012720:	bd80      	pop	{r7, pc}
 8012722:	bf00      	nop
 8012724:	200000a0 	.word	0x200000a0

08012728 <_ZN31TestTerminatorWithoutExceptionsD1Ev>:

TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8012728:	b580      	push	{r7, lr}
 801272a:	b082      	sub	sp, #8
 801272c:	af00      	add	r7, sp, #0
 801272e:	6078      	str	r0, [r7, #4]
 8012730:	4a05      	ldr	r2, [pc, #20]	; (8012748 <_ZN31TestTerminatorWithoutExceptionsD1Ev+0x20>)
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	601a      	str	r2, [r3, #0]
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	4618      	mov	r0, r3
 801273a:	f7ff ff9b 	bl	8012674 <_ZN14TestTerminatorD1Ev>
{
}
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	4618      	mov	r0, r3
 8012742:	3708      	adds	r7, #8
 8012744:	46bd      	mov	sp, r7
 8012746:	bd80      	pop	{r7, pc}
 8012748:	08025f48 	.word	0x08025f48

0801274c <_ZN31TestTerminatorWithoutExceptionsD0Ev>:
TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 801274c:	b580      	push	{r7, lr}
 801274e:	b082      	sub	sp, #8
 8012750:	af00      	add	r7, sp, #0
 8012752:	6078      	str	r0, [r7, #4]
}
 8012754:	6878      	ldr	r0, [r7, #4]
 8012756:	f7ff ffe7 	bl	8012728 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 801275a:	2104      	movs	r1, #4
 801275c:	6878      	ldr	r0, [r7, #4]
 801275e:	f7f5 ff57 	bl	8008610 <_ZdlPvj>
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	4618      	mov	r0, r3
 8012766:	3708      	adds	r7, #8
 8012768:	46bd      	mov	sp, r7
 801276a:	bd80      	pop	{r7, pc}

0801276c <_ZNK22CrashingTestTerminator15exitCurrentTestEv>:

void CrashingTestTerminator::exitCurrentTest() const
{
 801276c:	b580      	push	{r7, lr}
 801276e:	b082      	sub	sp, #8
 8012770:	af00      	add	r7, sp, #0
 8012772:	6078      	str	r0, [r7, #4]
    UtestShell::crash();
 8012774:	f7fe fbaa 	bl	8010ecc <_ZN10UtestShell5crashEv>
    NormalTestTerminator::exitCurrentTest();
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	4618      	mov	r0, r3
 801277c:	f7ff ff8a 	bl	8012694 <_ZNK20NormalTestTerminator15exitCurrentTestEv>
}
 8012780:	bf00      	nop
 8012782:	3708      	adds	r7, #8
 8012784:	46bd      	mov	sp, r7
 8012786:	bd80      	pop	{r7, pc}

08012788 <_ZN22CrashingTestTerminatorD1Ev>:

CrashingTestTerminator::~CrashingTestTerminator()
 8012788:	b580      	push	{r7, lr}
 801278a:	b082      	sub	sp, #8
 801278c:	af00      	add	r7, sp, #0
 801278e:	6078      	str	r0, [r7, #4]
 8012790:	4a05      	ldr	r2, [pc, #20]	; (80127a8 <_ZN22CrashingTestTerminatorD1Ev+0x20>)
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	601a      	str	r2, [r3, #0]
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	4618      	mov	r0, r3
 801279a:	f7ff ff95 	bl	80126c8 <_ZN20NormalTestTerminatorD1Ev>
{
}
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	4618      	mov	r0, r3
 80127a2:	3708      	adds	r7, #8
 80127a4:	46bd      	mov	sp, r7
 80127a6:	bd80      	pop	{r7, pc}
 80127a8:	08025f34 	.word	0x08025f34

080127ac <_ZN22CrashingTestTerminatorD0Ev>:
CrashingTestTerminator::~CrashingTestTerminator()
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b082      	sub	sp, #8
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	6078      	str	r0, [r7, #4]
}
 80127b4:	6878      	ldr	r0, [r7, #4]
 80127b6:	f7ff ffe7 	bl	8012788 <_ZN22CrashingTestTerminatorD1Ev>
 80127ba:	2104      	movs	r1, #4
 80127bc:	6878      	ldr	r0, [r7, #4]
 80127be:	f7f5 ff27 	bl	8008610 <_ZdlPvj>
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	4618      	mov	r0, r3
 80127c6:	3708      	adds	r7, #8
 80127c8:	46bd      	mov	sp, r7
 80127ca:	bd80      	pop	{r7, pc}

080127cc <_ZN22UtestShellPointerArrayC1EP10UtestShell>:
    runIgnored_ = true;
}

//////////////////// UtestShellPointerArray

UtestShellPointerArray::UtestShellPointerArray(UtestShell* firstTest)
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b084      	sub	sp, #16
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
 80127d4:	6039      	str	r1, [r7, #0]
    : arrayOfTests_(NULLPTR), count_(0)
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	2200      	movs	r2, #0
 80127da:	601a      	str	r2, [r3, #0]
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	2200      	movs	r2, #0
 80127e0:	605a      	str	r2, [r3, #4]
{
    count_ = (firstTest) ? firstTest->countTests() : 0;
 80127e2:	683b      	ldr	r3, [r7, #0]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d007      	beq.n	80127f8 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2c>
 80127e8:	683b      	ldr	r3, [r7, #0]
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	3310      	adds	r3, #16
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	6838      	ldr	r0, [r7, #0]
 80127f2:	4798      	blx	r3
 80127f4:	4603      	mov	r3, r0
 80127f6:	e000      	b.n	80127fa <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2e>
 80127f8:	2300      	movs	r3, #0
 80127fa:	687a      	ldr	r2, [r7, #4]
 80127fc:	6053      	str	r3, [r2, #4]
    if (count_ == 0) return;
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	685b      	ldr	r3, [r3, #4]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d02d      	beq.n	8012862 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x96>

    arrayOfTests_ = new UtestShell*[count_];
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	685b      	ldr	r3, [r3, #4]
 801280a:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 801280e:	4293      	cmp	r3, r2
 8012810:	d201      	bcs.n	8012816 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4a>
 8012812:	009b      	lsls	r3, r3, #2
 8012814:	e001      	b.n	801281a <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4e>
 8012816:	f04f 33ff 	mov.w	r3, #4294967295
 801281a:	f240 3237 	movw	r2, #823	; 0x337
 801281e:	4914      	ldr	r1, [pc, #80]	; (8012870 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0xa4>)
 8012820:	4618      	mov	r0, r3
 8012822:	f7f5 ff05 	bl	8008630 <_ZnajPKci>
 8012826:	4602      	mov	r2, r0
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	601a      	str	r2, [r3, #0]

    UtestShell*currentTest = firstTest;
 801282c:	683b      	ldr	r3, [r7, #0]
 801282e:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8012830:	2300      	movs	r3, #0
 8012832:	60bb      	str	r3, [r7, #8]
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	685b      	ldr	r3, [r3, #4]
 8012838:	68ba      	ldr	r2, [r7, #8]
 801283a:	429a      	cmp	r2, r3
 801283c:	d212      	bcs.n	8012864 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x98>
    {
        arrayOfTests_[i] = currentTest;
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	681a      	ldr	r2, [r3, #0]
 8012842:	68bb      	ldr	r3, [r7, #8]
 8012844:	009b      	lsls	r3, r3, #2
 8012846:	4413      	add	r3, r2
 8012848:	68fa      	ldr	r2, [r7, #12]
 801284a:	601a      	str	r2, [r3, #0]
        currentTest = currentTest->getNext();
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	330c      	adds	r3, #12
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	68f8      	ldr	r0, [r7, #12]
 8012856:	4798      	blx	r3
 8012858:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 801285a:	68bb      	ldr	r3, [r7, #8]
 801285c:	3301      	adds	r3, #1
 801285e:	60bb      	str	r3, [r7, #8]
 8012860:	e7e8      	b.n	8012834 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x68>
    if (count_ == 0) return;
 8012862:	bf00      	nop
    }
}
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	4618      	mov	r0, r3
 8012868:	3710      	adds	r7, #16
 801286a:	46bd      	mov	sp, r7
 801286c:	bd80      	pop	{r7, pc}
 801286e:	bf00      	nop
 8012870:	08022d30 	.word	0x08022d30

08012874 <_ZN22UtestShellPointerArrayD1Ev>:

UtestShellPointerArray::~UtestShellPointerArray()
 8012874:	b580      	push	{r7, lr}
 8012876:	b082      	sub	sp, #8
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
{
    delete [] arrayOfTests_;
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d004      	beq.n	801288e <_ZN22UtestShellPointerArrayD1Ev+0x1a>
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	4618      	mov	r0, r3
 801288a:	f7f5 fee5 	bl	8008658 <_ZdaPv>
}
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	4618      	mov	r0, r3
 8012892:	3708      	adds	r7, #8
 8012894:	46bd      	mov	sp, r7
 8012896:	bd80      	pop	{r7, pc}

08012898 <_ZN22UtestShellPointerArray4swapEjj>:

void UtestShellPointerArray::swap(size_t index1, size_t index2)
{
 8012898:	b480      	push	{r7}
 801289a:	b087      	sub	sp, #28
 801289c:	af00      	add	r7, sp, #0
 801289e:	60f8      	str	r0, [r7, #12]
 80128a0:	60b9      	str	r1, [r7, #8]
 80128a2:	607a      	str	r2, [r7, #4]
        UtestShell* e2 = arrayOfTests_[index2];
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	681a      	ldr	r2, [r3, #0]
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	009b      	lsls	r3, r3, #2
 80128ac:	4413      	add	r3, r2
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	617b      	str	r3, [r7, #20]
        UtestShell* e1 = arrayOfTests_[index1];
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	681a      	ldr	r2, [r3, #0]
 80128b6:	68bb      	ldr	r3, [r7, #8]
 80128b8:	009b      	lsls	r3, r3, #2
 80128ba:	4413      	add	r3, r2
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	613b      	str	r3, [r7, #16]
        arrayOfTests_[index1] = e2;
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	681a      	ldr	r2, [r3, #0]
 80128c4:	68bb      	ldr	r3, [r7, #8]
 80128c6:	009b      	lsls	r3, r3, #2
 80128c8:	4413      	add	r3, r2
 80128ca:	697a      	ldr	r2, [r7, #20]
 80128cc:	601a      	str	r2, [r3, #0]
        arrayOfTests_[index2] = e1;
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	681a      	ldr	r2, [r3, #0]
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	009b      	lsls	r3, r3, #2
 80128d6:	4413      	add	r3, r2
 80128d8:	693a      	ldr	r2, [r7, #16]
 80128da:	601a      	str	r2, [r3, #0]
}
 80128dc:	bf00      	nop
 80128de:	371c      	adds	r7, #28
 80128e0:	46bd      	mov	sp, r7
 80128e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e6:	4770      	bx	lr

080128e8 <_ZN22UtestShellPointerArray7shuffleEj>:

void UtestShellPointerArray::shuffle(size_t seed)
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b084      	sub	sp, #16
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
 80128f0:	6039      	str	r1, [r7, #0]
    if (count_ == 0) return;
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	685b      	ldr	r3, [r3, #4]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d028      	beq.n	801294c <_ZN22UtestShellPointerArray7shuffleEj+0x64>

    PlatformSpecificSrand((unsigned int) seed);
 80128fa:	4b17      	ldr	r3, [pc, #92]	; (8012958 <_ZN22UtestShellPointerArray7shuffleEj+0x70>)
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	6838      	ldr	r0, [r7, #0]
 8012900:	4798      	blx	r3

    for (size_t i = count_ - 1; i >= 1; --i)
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	685b      	ldr	r3, [r3, #4]
 8012906:	3b01      	subs	r3, #1
 8012908:	60fb      	str	r3, [r7, #12]
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d019      	beq.n	8012944 <_ZN22UtestShellPointerArray7shuffleEj+0x5c>
    {
        if (count_ == 0) return;
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	685b      	ldr	r3, [r3, #4]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d01b      	beq.n	8012950 <_ZN22UtestShellPointerArray7shuffleEj+0x68>

        const size_t j = ((size_t)PlatformSpecificRand()) % (i + 1); // distribution biased by modulo, but good enough for shuffling
 8012918:	4b10      	ldr	r3, [pc, #64]	; (801295c <_ZN22UtestShellPointerArray7shuffleEj+0x74>)
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	4798      	blx	r3
 801291e:	4603      	mov	r3, r0
 8012920:	461a      	mov	r2, r3
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	3301      	adds	r3, #1
 8012926:	fbb2 f1f3 	udiv	r1, r2, r3
 801292a:	fb03 f301 	mul.w	r3, r3, r1
 801292e:	1ad3      	subs	r3, r2, r3
 8012930:	60bb      	str	r3, [r7, #8]
        swap(i, j);
 8012932:	68ba      	ldr	r2, [r7, #8]
 8012934:	68f9      	ldr	r1, [r7, #12]
 8012936:	6878      	ldr	r0, [r7, #4]
 8012938:	f7ff ffae 	bl	8012898 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = count_ - 1; i >= 1; --i)
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	3b01      	subs	r3, #1
 8012940:	60fb      	str	r3, [r7, #12]
 8012942:	e7e2      	b.n	801290a <_ZN22UtestShellPointerArray7shuffleEj+0x22>
   }
   relinkTestsInOrder();
 8012944:	6878      	ldr	r0, [r7, #4]
 8012946:	f000 f834 	bl	80129b2 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 801294a:	e002      	b.n	8012952 <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
    if (count_ == 0) return;
 801294c:	bf00      	nop
 801294e:	e000      	b.n	8012952 <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
        if (count_ == 0) return;
 8012950:	bf00      	nop
}
 8012952:	3710      	adds	r7, #16
 8012954:	46bd      	mov	sp, r7
 8012956:	bd80      	pop	{r7, pc}
 8012958:	200000e0 	.word	0x200000e0
 801295c:	200000e4 	.word	0x200000e4

08012960 <_ZN22UtestShellPointerArray7reverseEv>:

void UtestShellPointerArray::reverse()
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b086      	sub	sp, #24
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
    if (count_ == 0) return;
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	685b      	ldr	r3, [r3, #4]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d01c      	beq.n	80129aa <_ZN22UtestShellPointerArray7reverseEv+0x4a>

    size_t halfCount = count_ / 2;
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	685b      	ldr	r3, [r3, #4]
 8012974:	085b      	lsrs	r3, r3, #1
 8012976:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < halfCount; i++)
 8012978:	2300      	movs	r3, #0
 801297a:	617b      	str	r3, [r7, #20]
 801297c:	697a      	ldr	r2, [r7, #20]
 801297e:	693b      	ldr	r3, [r7, #16]
 8012980:	429a      	cmp	r2, r3
 8012982:	d20e      	bcs.n	80129a2 <_ZN22UtestShellPointerArray7reverseEv+0x42>
    {
        size_t j = count_ - i - 1;
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	685a      	ldr	r2, [r3, #4]
 8012988:	697b      	ldr	r3, [r7, #20]
 801298a:	1ad3      	subs	r3, r2, r3
 801298c:	3b01      	subs	r3, #1
 801298e:	60fb      	str	r3, [r7, #12]
        swap(i, j);
 8012990:	68fa      	ldr	r2, [r7, #12]
 8012992:	6979      	ldr	r1, [r7, #20]
 8012994:	6878      	ldr	r0, [r7, #4]
 8012996:	f7ff ff7f 	bl	8012898 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = 0; i < halfCount; i++)
 801299a:	697b      	ldr	r3, [r7, #20]
 801299c:	3301      	adds	r3, #1
 801299e:	617b      	str	r3, [r7, #20]
 80129a0:	e7ec      	b.n	801297c <_ZN22UtestShellPointerArray7reverseEv+0x1c>
   }
   relinkTestsInOrder();
 80129a2:	6878      	ldr	r0, [r7, #4]
 80129a4:	f000 f805 	bl	80129b2 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 80129a8:	e000      	b.n	80129ac <_ZN22UtestShellPointerArray7reverseEv+0x4c>
    if (count_ == 0) return;
 80129aa:	bf00      	nop
}
 80129ac:	3718      	adds	r7, #24
 80129ae:	46bd      	mov	sp, r7
 80129b0:	bd80      	pop	{r7, pc}

080129b2 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>:

void UtestShellPointerArray::relinkTestsInOrder()
{
 80129b2:	b580      	push	{r7, lr}
 80129b4:	b084      	sub	sp, #16
 80129b6:	af00      	add	r7, sp, #0
 80129b8:	6078      	str	r0, [r7, #4]
    UtestShell *tests = NULLPTR;
 80129ba:	2300      	movs	r3, #0
 80129bc:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 80129be:	2300      	movs	r3, #0
 80129c0:	60bb      	str	r3, [r7, #8]
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	685b      	ldr	r3, [r3, #4]
 80129c6:	68ba      	ldr	r2, [r7, #8]
 80129c8:	429a      	cmp	r2, r3
 80129ca:	d221      	bcs.n	8012a10 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x5e>
        tests = arrayOfTests_[count_ - i - 1]->addTest(tests);
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	681a      	ldr	r2, [r3, #0]
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	6859      	ldr	r1, [r3, #4]
 80129d4:	68bb      	ldr	r3, [r7, #8]
 80129d6:	1acb      	subs	r3, r1, r3
 80129d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80129dc:	3b01      	subs	r3, #1
 80129de:	009b      	lsls	r3, r3, #2
 80129e0:	4413      	add	r3, r2
 80129e2:	6818      	ldr	r0, [r3, #0]
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	681a      	ldr	r2, [r3, #0]
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	6859      	ldr	r1, [r3, #4]
 80129ec:	68bb      	ldr	r3, [r7, #8]
 80129ee:	1acb      	subs	r3, r1, r3
 80129f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80129f4:	3b01      	subs	r3, #1
 80129f6:	009b      	lsls	r3, r3, #2
 80129f8:	4413      	add	r3, r2
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	3308      	adds	r3, #8
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	68f9      	ldr	r1, [r7, #12]
 8012a04:	4798      	blx	r3
 8012a06:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8012a08:	68bb      	ldr	r3, [r7, #8]
 8012a0a:	3301      	adds	r3, #1
 8012a0c:	60bb      	str	r3, [r7, #8]
 8012a0e:	e7d8      	b.n	80129c2 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x10>
}
 8012a10:	bf00      	nop
 8012a12:	3710      	adds	r7, #16
 8012a14:	46bd      	mov	sp, r7
 8012a16:	bd80      	pop	{r7, pc}

08012a18 <_ZNK22UtestShellPointerArray12getFirstTestEv>:

UtestShell* UtestShellPointerArray::getFirstTest() const
{
 8012a18:	b580      	push	{r7, lr}
 8012a1a:	b082      	sub	sp, #8
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	6078      	str	r0, [r7, #4]
    return get(0);
 8012a20:	2100      	movs	r1, #0
 8012a22:	6878      	ldr	r0, [r7, #4]
 8012a24:	f000 f805 	bl	8012a32 <_ZNK22UtestShellPointerArray3getEj>
 8012a28:	4603      	mov	r3, r0
}
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	3708      	adds	r7, #8
 8012a2e:	46bd      	mov	sp, r7
 8012a30:	bd80      	pop	{r7, pc}

08012a32 <_ZNK22UtestShellPointerArray3getEj>:

UtestShell* UtestShellPointerArray::get(size_t index) const
{
 8012a32:	b480      	push	{r7}
 8012a34:	b083      	sub	sp, #12
 8012a36:	af00      	add	r7, sp, #0
 8012a38:	6078      	str	r0, [r7, #4]
 8012a3a:	6039      	str	r1, [r7, #0]
    if (index >= count_) return NULLPTR;
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	685b      	ldr	r3, [r3, #4]
 8012a40:	683a      	ldr	r2, [r7, #0]
 8012a42:	429a      	cmp	r2, r3
 8012a44:	d301      	bcc.n	8012a4a <_ZNK22UtestShellPointerArray3getEj+0x18>
 8012a46:	2300      	movs	r3, #0
 8012a48:	e005      	b.n	8012a56 <_ZNK22UtestShellPointerArray3getEj+0x24>
    return arrayOfTests_[index];
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	681a      	ldr	r2, [r3, #0]
 8012a4e:	683b      	ldr	r3, [r7, #0]
 8012a50:	009b      	lsls	r3, r3, #2
 8012a52:	4413      	add	r3, r2
 8012a54:	681b      	ldr	r3, [r3, #0]
}
 8012a56:	4618      	mov	r0, r3
 8012a58:	370c      	adds	r7, #12
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a60:	4770      	bx	lr
	...

08012a64 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>:



////////////// TestInstaller ////////////

TestInstaller::TestInstaller(UtestShell& shell, const char* groupName, const char* testName, const char* fileName, size_t lineNumber)
 8012a64:	b580      	push	{r7, lr}
 8012a66:	b084      	sub	sp, #16
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	60f8      	str	r0, [r7, #12]
 8012a6c:	60b9      	str	r1, [r7, #8]
 8012a6e:	607a      	str	r2, [r7, #4]
 8012a70:	603b      	str	r3, [r7, #0]
 8012a72:	4a10      	ldr	r2, [pc, #64]	; (8012ab4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j+0x50>)
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	601a      	str	r2, [r3, #0]
{
    shell.setGroupName(groupName);
 8012a78:	6879      	ldr	r1, [r7, #4]
 8012a7a:	68b8      	ldr	r0, [r7, #8]
 8012a7c:	f7fe fc27 	bl	80112ce <_ZN10UtestShell12setGroupNameEPKc>
    shell.setTestName(testName);
 8012a80:	6839      	ldr	r1, [r7, #0]
 8012a82:	68b8      	ldr	r0, [r7, #8]
 8012a84:	f7fe fc31 	bl	80112ea <_ZN10UtestShell11setTestNameEPKc>
    shell.setFileName(fileName);
 8012a88:	69b9      	ldr	r1, [r7, #24]
 8012a8a:	68b8      	ldr	r0, [r7, #8]
 8012a8c:	f7fe fc03 	bl	8011296 <_ZN10UtestShell11setFileNameEPKc>
    shell.setLineNumber(lineNumber);
 8012a90:	69f9      	ldr	r1, [r7, #28]
 8012a92:	68b8      	ldr	r0, [r7, #8]
 8012a94:	f7fe fc0d 	bl	80112b2 <_ZN10UtestShell13setLineNumberEj>
    TestRegistry::getCurrentRegistry()->addTest(&shell);
 8012a98:	f7fd fc20 	bl	80102dc <_ZN12TestRegistry18getCurrentRegistryEv>
 8012a9c:	4603      	mov	r3, r0
 8012a9e:	681a      	ldr	r2, [r3, #0]
 8012aa0:	3208      	adds	r2, #8
 8012aa2:	6812      	ldr	r2, [r2, #0]
 8012aa4:	68b9      	ldr	r1, [r7, #8]
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	4790      	blx	r2
}
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	4618      	mov	r0, r3
 8012aae:	3710      	adds	r7, #16
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	bd80      	pop	{r7, pc}
 8012ab4:	08025e78 	.word	0x08025e78

08012ab8 <_ZN13TestInstallerD1Ev>:

TestInstaller::~TestInstaller()
 8012ab8:	b480      	push	{r7}
 8012aba:	b083      	sub	sp, #12
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	6078      	str	r0, [r7, #4]
 8012ac0:	4a04      	ldr	r2, [pc, #16]	; (8012ad4 <_ZN13TestInstallerD1Ev+0x1c>)
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	601a      	str	r2, [r3, #0]
{
}
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	4618      	mov	r0, r3
 8012aca:	370c      	adds	r7, #12
 8012acc:	46bd      	mov	sp, r7
 8012ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad2:	4770      	bx	lr
 8012ad4:	08025e78 	.word	0x08025e78

08012ad8 <_ZN13TestInstallerD0Ev>:
TestInstaller::~TestInstaller()
 8012ad8:	b580      	push	{r7, lr}
 8012ada:	b082      	sub	sp, #8
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	6078      	str	r0, [r7, #4]
}
 8012ae0:	6878      	ldr	r0, [r7, #4]
 8012ae2:	f7ff ffe9 	bl	8012ab8 <_ZN13TestInstallerD1Ev>
 8012ae6:	2104      	movs	r1, #4
 8012ae8:	6878      	ldr	r0, [r7, #4]
 8012aea:	f7f5 fd91 	bl	8008610 <_ZdlPvj>
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	4618      	mov	r0, r3
 8012af2:	3708      	adds	r7, #8
 8012af4:	46bd      	mov	sp, r7
 8012af6:	bd80      	pop	{r7, pc}

08012af8 <_Z41__static_initialization_and_destruction_0ii>:

void TestInstaller::unDo()
{
    TestRegistry::getCurrentRegistry()->unDoLastAddTest();
}
 8012af8:	b580      	push	{r7, lr}
 8012afa:	b082      	sub	sp, #8
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
 8012b00:	6039      	str	r1, [r7, #0]
static const CrashingTestTerminator crashingTestTerminator;
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d10a      	bne.n	8012b1e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8012b08:	683b      	ldr	r3, [r7, #0]
 8012b0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012b0e:	4293      	cmp	r3, r2
 8012b10:	d105      	bne.n	8012b1e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8012b12:	4805      	ldr	r0, [pc, #20]	; (8012b28 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8012b14:	f7ff fe38 	bl	8012788 <_ZN22CrashingTestTerminatorD1Ev>
static const NormalTestTerminator normalTestTerminator;
 8012b18:	4804      	ldr	r0, [pc, #16]	; (8012b2c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8012b1a:	f7ff fdd5 	bl	80126c8 <_ZN20NormalTestTerminatorD1Ev>
}
 8012b1e:	bf00      	nop
 8012b20:	3708      	adds	r7, #8
 8012b22:	46bd      	mov	sp, r7
 8012b24:	bd80      	pop	{r7, pc}
 8012b26:	bf00      	nop
 8012b28:	20000090 	.word	0x20000090
 8012b2c:	2000008c 	.word	0x2000008c

08012b30 <_GLOBAL__sub_I__Z13doubles_equalddd>:
 8012b30:	b580      	push	{r7, lr}
 8012b32:	af00      	add	r7, sp, #0
 8012b34:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012b38:	2001      	movs	r0, #1
 8012b3a:	f7ff ffdd 	bl	8012af8 <_Z41__static_initialization_and_destruction_0ii>
 8012b3e:	bd80      	pop	{r7, pc}

08012b40 <_GLOBAL__sub_D__Z13doubles_equalddd>:
 8012b40:	b580      	push	{r7, lr}
 8012b42:	af00      	add	r7, sp, #0
 8012b44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012b48:	2000      	movs	r0, #0
 8012b4a:	f7ff ffd5 	bl	8012af8 <_Z41__static_initialization_and_destruction_0ii>
 8012b4e:	bd80      	pop	{r7, pc}

08012b50 <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 8012b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b52:	b083      	sub	sp, #12
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	ed87 0b00 	vstr	d0, [r7]
 8012b5a:	683c      	ldr	r4, [r7, #0]
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8012b62:	2301      	movs	r3, #1
 8012b64:	461e      	mov	r6, r3
 8012b66:	f04f 32ff 	mov.w	r2, #4294967295
 8012b6a:	4b10      	ldr	r3, [pc, #64]	; (8012bac <_ZSt5isinfd+0x5c>)
 8012b6c:	4620      	mov	r0, r4
 8012b6e:	4629      	mov	r1, r5
 8012b70:	f7ed fe0a 	bl	8000788 <__aeabi_dcmpun>
 8012b74:	4603      	mov	r3, r0
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d10b      	bne.n	8012b92 <_ZSt5isinfd+0x42>
 8012b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8012b7e:	4b0b      	ldr	r3, [pc, #44]	; (8012bac <_ZSt5isinfd+0x5c>)
 8012b80:	4620      	mov	r0, r4
 8012b82:	4629      	mov	r1, r5
 8012b84:	f7ed fde2 	bl	800074c <__aeabi_dcmple>
 8012b88:	4603      	mov	r3, r0
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d101      	bne.n	8012b92 <_ZSt5isinfd+0x42>
 8012b8e:	2300      	movs	r3, #0
 8012b90:	461e      	mov	r6, r3
 8012b92:	b2f3      	uxtb	r3, r6
 8012b94:	f083 0301 	eor.w	r3, r3, #1
 8012b98:	b2db      	uxtb	r3, r3
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	bf14      	ite	ne
 8012b9e:	2301      	movne	r3, #1
 8012ba0:	2300      	moveq	r3, #0
 8012ba2:	b2db      	uxtb	r3, r3
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	370c      	adds	r7, #12
 8012ba8:	46bd      	mov	sp, r7
 8012baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012bac:	7fefffff 	.word	0x7fefffff

08012bb0 <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 8012bb0:	b590      	push	{r4, r7, lr}
 8012bb2:	b083      	sub	sp, #12
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	ed87 0b00 	vstr	d0, [r7]
 8012bba:	2301      	movs	r3, #1
 8012bbc:	461c      	mov	r4, r3
 8012bbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012bc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012bc6:	f7ed fddf 	bl	8000788 <__aeabi_dcmpun>
 8012bca:	4603      	mov	r3, r0
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d101      	bne.n	8012bd4 <_ZSt5isnand+0x24>
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	461c      	mov	r4, r3
 8012bd4:	b2e3      	uxtb	r3, r4
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	bf14      	ite	ne
 8012bda:	2301      	movne	r3, #1
 8012bdc:	2300      	moveq	r3, #0
 8012bde:	b2db      	uxtb	r3, r3
 8012be0:	4618      	mov	r0, r3
 8012be2:	370c      	adds	r7, #12
 8012be4:	46bd      	mov	sp, r7
 8012be6:	bd90      	pop	{r4, r7, pc}

08012be8 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult>:

// There is a possibility that a compiler provides fork but not waitpid.
#if !defined(CPPUTEST_HAVE_FORK) || !defined(CPPUTEST_HAVE_WAITPID)

static void GccPlatformSpecificRunTestInASeperateProcess(UtestShell* shell, TestPlugin*, TestResult* result)
{
 8012be8:	b590      	push	{r4, r7, lr}
 8012bea:	b095      	sub	sp, #84	; 0x54
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	60f8      	str	r0, [r7, #12]
 8012bf0:	60b9      	str	r1, [r7, #8]
 8012bf2:	607a      	str	r2, [r7, #4]
    result->addFailure(TestFailure(shell, "-p doesn't work on this platform, as it is lacking fork.\b"));
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	3334      	adds	r3, #52	; 0x34
 8012bfa:	681c      	ldr	r4, [r3, #0]
 8012bfc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012c00:	490f      	ldr	r1, [pc, #60]	; (8012c40 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult+0x58>)
 8012c02:	4618      	mov	r0, r3
 8012c04:	f7f8 f8b3 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8012c08:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8012c0c:	f107 0314 	add.w	r3, r7, #20
 8012c10:	68f9      	ldr	r1, [r7, #12]
 8012c12:	4618      	mov	r0, r3
 8012c14:	f7f9 ff0a 	bl	800ca2c <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 8012c18:	f107 0314 	add.w	r3, r7, #20
 8012c1c:	4619      	mov	r1, r3
 8012c1e:	6878      	ldr	r0, [r7, #4]
 8012c20:	47a0      	blx	r4
 8012c22:	f107 0314 	add.w	r3, r7, #20
 8012c26:	4618      	mov	r0, r3
 8012c28:	f7f9 ffc0 	bl	800cbac <_ZN11TestFailureD1Ev>
 8012c2c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012c30:	4618      	mov	r0, r3
 8012c32:	f7f8 fc54 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 8012c36:	bf00      	nop
 8012c38:	3754      	adds	r7, #84	; 0x54
 8012c3a:	46bd      	mov	sp, r7
 8012c3c:	bd90      	pop	{r4, r7, pc}
 8012c3e:	bf00      	nop
 8012c40:	08022eb8 	.word	0x08022eb8

08012c44 <_Z37PlatformSpecificGetWorkingEnvironmentv>:
}

#endif

TestOutput::WorkingEnvironment PlatformSpecificGetWorkingEnvironment()
{
 8012c44:	b480      	push	{r7}
 8012c46:	af00      	add	r7, sp, #0
    return TestOutput::eclipse;
 8012c48:	2301      	movs	r3, #1
}
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	46bd      	mov	sp, r7
 8012c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c52:	4770      	bx	lr

08012c54 <PlatformSpecificSetJmpImplementation>:
int (*PlatformSpecificWaitPid)(int, int*, int) = PlatformSpecificWaitPidImplementation;

extern "C" {

static int PlatformSpecificSetJmpImplementation(void (*function) (void* data), void* data)
{
 8012c54:	b580      	push	{r7, lr}
 8012c56:	b082      	sub	sp, #8
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	6078      	str	r0, [r7, #4]
 8012c5c:	6039      	str	r1, [r7, #0]
    if (0 == setjmp(test_exit_jmp_buf[jmp_buf_index])) {
 8012c5e:	4b13      	ldr	r3, [pc, #76]	; (8012cac <PlatformSpecificSetJmpImplementation+0x58>)
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	225c      	movs	r2, #92	; 0x5c
 8012c64:	fb02 f303 	mul.w	r3, r2, r3
 8012c68:	4a11      	ldr	r2, [pc, #68]	; (8012cb0 <PlatformSpecificSetJmpImplementation+0x5c>)
 8012c6a:	4413      	add	r3, r2
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	f7ed fad7 	bl	8000220 <setjmp>
 8012c72:	4603      	mov	r3, r0
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	bf0c      	ite	eq
 8012c78:	2301      	moveq	r3, #1
 8012c7a:	2300      	movne	r3, #0
 8012c7c:	b2db      	uxtb	r3, r3
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d00e      	beq.n	8012ca0 <PlatformSpecificSetJmpImplementation+0x4c>
        jmp_buf_index++;
 8012c82:	4b0a      	ldr	r3, [pc, #40]	; (8012cac <PlatformSpecificSetJmpImplementation+0x58>)
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	3301      	adds	r3, #1
 8012c88:	4a08      	ldr	r2, [pc, #32]	; (8012cac <PlatformSpecificSetJmpImplementation+0x58>)
 8012c8a:	6013      	str	r3, [r2, #0]
        function(data);
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	6838      	ldr	r0, [r7, #0]
 8012c90:	4798      	blx	r3
        jmp_buf_index--;
 8012c92:	4b06      	ldr	r3, [pc, #24]	; (8012cac <PlatformSpecificSetJmpImplementation+0x58>)
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	3b01      	subs	r3, #1
 8012c98:	4a04      	ldr	r2, [pc, #16]	; (8012cac <PlatformSpecificSetJmpImplementation+0x58>)
 8012c9a:	6013      	str	r3, [r2, #0]
        return 1;
 8012c9c:	2301      	movs	r3, #1
 8012c9e:	e000      	b.n	8012ca2 <PlatformSpecificSetJmpImplementation+0x4e>
    }
    return 0;
 8012ca0:	2300      	movs	r3, #0
}
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	3708      	adds	r7, #8
 8012ca6:	46bd      	mov	sp, r7
 8012ca8:	bd80      	pop	{r7, pc}
 8012caa:	bf00      	nop
 8012cac:	20000cf8 	.word	0x20000cf8
 8012cb0:	20000960 	.word	0x20000960

08012cb4 <PlatformSpecificLongJmpImplementation>:
 #if !((__clang_major__ == 3) && (__clang_minor__ == 0))
 _no_return_
 #endif
#endif
static void PlatformSpecificLongJmpImplementation()
{
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	af00      	add	r7, sp, #0
    jmp_buf_index--;
 8012cb8:	4b07      	ldr	r3, [pc, #28]	; (8012cd8 <PlatformSpecificLongJmpImplementation+0x24>)
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	3b01      	subs	r3, #1
 8012cbe:	4a06      	ldr	r2, [pc, #24]	; (8012cd8 <PlatformSpecificLongJmpImplementation+0x24>)
 8012cc0:	6013      	str	r3, [r2, #0]
    longjmp(test_exit_jmp_buf[jmp_buf_index], 1);
 8012cc2:	4b05      	ldr	r3, [pc, #20]	; (8012cd8 <PlatformSpecificLongJmpImplementation+0x24>)
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	225c      	movs	r2, #92	; 0x5c
 8012cc8:	fb02 f303 	mul.w	r3, r2, r3
 8012ccc:	4a03      	ldr	r2, [pc, #12]	; (8012cdc <PlatformSpecificLongJmpImplementation+0x28>)
 8012cce:	4413      	add	r3, r2
 8012cd0:	2101      	movs	r1, #1
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	f7ed faaa 	bl	800022c <longjmp>
 8012cd8:	20000cf8 	.word	0x20000cf8
 8012cdc:	20000960 	.word	0x20000960

08012ce0 <TimeInMillisImplementation>:
void (*PlatformSpecificRestoreJumpBuffer)() = PlatformSpecificRestoreJumpBufferImplementation;

///////////// Time in millis

static long TimeInMillisImplementation()
{
 8012ce0:	b480      	push	{r7}
 8012ce2:	af00      	add	r7, sp, #0
    struct timeval tv;
    struct timezone tz;
    gettimeofday(&tv, &tz);
    return (tv.tv_sec * 1000) + (long)((double)tv.tv_usec * 0.001);
#else
    return 0;
 8012ce4:	2300      	movs	r3, #0
#endif
}
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cee:	4770      	bx	lr

08012cf0 <TimeStringImplementation>:

static const char* TimeStringImplementation()
{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b084      	sub	sp, #16
 8012cf4:	af00      	add	r7, sp, #0
    time_t theTime = time(NULLPTR);
 8012cf6:	2000      	movs	r0, #0
 8012cf8:	f00e ec3e 	blx	8021578 <__time_veneer>
 8012cfc:	4602      	mov	r2, r0
 8012cfe:	460b      	mov	r3, r1
 8012d00:	e9c7 2300 	strd	r2, r3, [r7]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
    static struct tm lastlocaltime;
    localtime_s(&lastlocaltime, &theTime);
    struct tm *tmp = &lastlocaltime;
#else
    struct tm *tmp = localtime(&theTime);
 8012d04:	463b      	mov	r3, r7
 8012d06:	4618      	mov	r0, r3
 8012d08:	f00b fb76 	bl	801e3f8 <localtime>
 8012d0c:	60f8      	str	r0, [r7, #12]
#endif
    strftime(dateTime, 80, "%Y-%m-%dT%H:%M:%S", tmp);
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	4a04      	ldr	r2, [pc, #16]	; (8012d24 <TimeStringImplementation+0x34>)
 8012d12:	2150      	movs	r1, #80	; 0x50
 8012d14:	4804      	ldr	r0, [pc, #16]	; (8012d28 <TimeStringImplementation+0x38>)
 8012d16:	f00c fc77 	bl	801f608 <strftime>
    return dateTime;
 8012d1a:	4b03      	ldr	r3, [pc, #12]	; (8012d28 <TimeStringImplementation+0x38>)
}
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	3710      	adds	r7, #16
 8012d20:	46bd      	mov	sp, r7
 8012d22:	bd80      	pop	{r7, pc}
 8012d24:	08022ef4 	.word	0x08022ef4
 8012d28:	20000cfc 	.word	0x20000cfc

08012d2c <PlatformSpecificFOpenImplementation>:
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#endif
int (*PlatformSpecificVSNprintf)(char *str, size_t size, const char* format, va_list va_args_list) = vsnprintf;

static PlatformSpecificFile PlatformSpecificFOpenImplementation(const char* filename, const char* flag)
{
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b082      	sub	sp, #8
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]
 8012d34:	6039      	str	r1, [r7, #0]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
  FILE* file;
   fopen_s(&file, filename, flag);
   return file;
#else
   return fopen(filename, flag);
 8012d36:	6839      	ldr	r1, [r7, #0]
 8012d38:	6878      	ldr	r0, [r7, #4]
 8012d3a:	f00b f993 	bl	801e064 <fopen>
 8012d3e:	4603      	mov	r3, r0
#endif
}
 8012d40:	4618      	mov	r0, r3
 8012d42:	3708      	adds	r7, #8
 8012d44:	46bd      	mov	sp, r7
 8012d46:	bd80      	pop	{r7, pc}

08012d48 <PlatformSpecificFPutsImplementation>:

static void PlatformSpecificFPutsImplementation(const char* str, PlatformSpecificFile file)
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b082      	sub	sp, #8
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
 8012d50:	6039      	str	r1, [r7, #0]
   fputs(str, (FILE*)file);
 8012d52:	6839      	ldr	r1, [r7, #0]
 8012d54:	6878      	ldr	r0, [r7, #4]
 8012d56:	f00b f9f3 	bl	801e140 <fputs>
}
 8012d5a:	bf00      	nop
 8012d5c:	3708      	adds	r7, #8
 8012d5e:	46bd      	mov	sp, r7
 8012d60:	bd80      	pop	{r7, pc}

08012d62 <PlatformSpecificFCloseImplementation>:

static void PlatformSpecificFCloseImplementation(PlatformSpecificFile file)
{
 8012d62:	b580      	push	{r7, lr}
 8012d64:	b082      	sub	sp, #8
 8012d66:	af00      	add	r7, sp, #0
 8012d68:	6078      	str	r0, [r7, #4]
   fclose((FILE*)file);
 8012d6a:	6878      	ldr	r0, [r7, #4]
 8012d6c:	f00a ff74 	bl	801dc58 <fclose>
}
 8012d70:	bf00      	nop
 8012d72:	3708      	adds	r7, #8
 8012d74:	46bd      	mov	sp, r7
 8012d76:	bd80      	pop	{r7, pc}

08012d78 <PlatformSpecificFlushImplementation>:

static void PlatformSpecificFlushImplementation()
{
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	af00      	add	r7, sp, #0
  fflush(stdout);
 8012d7c:	4b03      	ldr	r3, [pc, #12]	; (8012d8c <PlatformSpecificFlushImplementation+0x14>)
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	689b      	ldr	r3, [r3, #8]
 8012d82:	4618      	mov	r0, r3
 8012d84:	f00b f832 	bl	801ddec <fflush>
}
 8012d88:	bf00      	nop
 8012d8a:	bd80      	pop	{r7, pc}
 8012d8c:	20000108 	.word	0x20000108

08012d90 <IsNanImplementation>:
#if defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8))
#pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

static int IsNanImplementation(double d)
{
 8012d90:	b580      	push	{r7, lr}
 8012d92:	b082      	sub	sp, #8
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	ed87 0b00 	vstr	d0, [r7]
    return isnan(d);
 8012d9a:	ed97 0b00 	vldr	d0, [r7]
 8012d9e:	f7ff ff07 	bl	8012bb0 <_ZSt5isnand>
 8012da2:	4603      	mov	r3, r0
}
 8012da4:	4618      	mov	r0, r3
 8012da6:	3708      	adds	r7, #8
 8012da8:	46bd      	mov	sp, r7
 8012daa:	bd80      	pop	{r7, pc}

08012dac <IsInfImplementation>:

static int IsInfImplementation(double d)
{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b082      	sub	sp, #8
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	ed87 0b00 	vstr	d0, [r7]
    return isinf(d);
 8012db6:	ed97 0b00 	vldr	d0, [r7]
 8012dba:	f7ff fec9 	bl	8012b50 <_ZSt5isinfd>
 8012dbe:	4603      	mov	r3, r0
}
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	3708      	adds	r7, #8
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	bd80      	pop	{r7, pc}

08012dc8 <PThreadMutexCreate>:
int (*PlatformSpecificIsNan)(double) = IsNanImplementation;
int (*PlatformSpecificIsInf)(double) = IsInfImplementation;
int (*PlatformSpecificAtExit)(void(*func)(void)) = atexit;  /// this was undefined before

static PlatformSpecificMutex PThreadMutexCreate(void)
{
 8012dc8:	b480      	push	{r7}
 8012dca:	af00      	add	r7, sp, #0
    pthread_mutex_t *mutex = new pthread_mutex_t;

    pthread_mutex_init(mutex, NULLPTR);
    return (PlatformSpecificMutex)mutex;
#else
    return NULLPTR;
 8012dcc:	2300      	movs	r3, #0
#endif

}
 8012dce:	4618      	mov	r0, r3
 8012dd0:	46bd      	mov	sp, r7
 8012dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd6:	4770      	bx	lr

08012dd8 <PThreadMutexLock>:
{
    pthread_mutex_lock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexLock(PlatformSpecificMutex)
{
 8012dd8:	b480      	push	{r7}
 8012dda:	b083      	sub	sp, #12
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	6078      	str	r0, [r7, #4]
}
 8012de0:	bf00      	nop
 8012de2:	370c      	adds	r7, #12
 8012de4:	46bd      	mov	sp, r7
 8012de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dea:	4770      	bx	lr

08012dec <PThreadMutexUnlock>:
{
    pthread_mutex_unlock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexUnlock(PlatformSpecificMutex)
{
 8012dec:	b480      	push	{r7}
 8012dee:	b083      	sub	sp, #12
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	6078      	str	r0, [r7, #4]
}
 8012df4:	bf00      	nop
 8012df6:	370c      	adds	r7, #12
 8012df8:	46bd      	mov	sp, r7
 8012dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dfe:	4770      	bx	lr

08012e00 <PThreadMutexDestroy>:
    pthread_mutex_destroy(mutex);
    delete mutex;
}
#else
static void PThreadMutexDestroy(PlatformSpecificMutex)
{
 8012e00:	b480      	push	{r7}
 8012e02:	b083      	sub	sp, #12
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	6078      	str	r0, [r7, #4]
}
 8012e08:	bf00      	nop
 8012e0a:	370c      	adds	r7, #12
 8012e0c:	46bd      	mov	sp, r7
 8012e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e12:	4770      	bx	lr

08012e14 <_ZN20CommandLineArgumentsC1EiPKPKc>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/CommandLineArguments.h"
#include "CppUTest/PlatformSpecificFunctions.h"

CommandLineArguments::CommandLineArguments(int ac, const char *const *av) :
 8012e14:	b580      	push	{r7, lr}
 8012e16:	b084      	sub	sp, #16
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	60f8      	str	r0, [r7, #12]
 8012e1c:	60b9      	str	r1, [r7, #8]
 8012e1e:	607a      	str	r2, [r7, #4]
    ac_(ac), av_(av), needHelp_(false), verbose_(false), veryVerbose_(false), color_(false), runTestsAsSeperateProcess_(false), listTestGroupNames_(false), listTestGroupAndCaseNames_(false), listTestLocations_(false), runIgnored_(false), reversing_(false), crashOnFail_(false), shuffling_(false), shufflingPreSeeded_(false), repeat_(1), shuffleSeed_(0), groupFilters_(NULLPTR), nameFilters_(NULLPTR), outputType_(OUTPUT_ECLIPSE)
 8012e20:	4a25      	ldr	r2, [pc, #148]	; (8012eb8 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa4>)
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	601a      	str	r2, [r3, #0]
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	68ba      	ldr	r2, [r7, #8]
 8012e2a:	605a      	str	r2, [r3, #4]
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	687a      	ldr	r2, [r7, #4]
 8012e30:	609a      	str	r2, [r3, #8]
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	2200      	movs	r2, #0
 8012e36:	731a      	strb	r2, [r3, #12]
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	2200      	movs	r2, #0
 8012e3c:	735a      	strb	r2, [r3, #13]
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	2200      	movs	r2, #0
 8012e42:	739a      	strb	r2, [r3, #14]
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	2200      	movs	r2, #0
 8012e48:	73da      	strb	r2, [r3, #15]
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	2200      	movs	r2, #0
 8012e4e:	741a      	strb	r2, [r3, #16]
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	2200      	movs	r2, #0
 8012e54:	745a      	strb	r2, [r3, #17]
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	2200      	movs	r2, #0
 8012e5a:	749a      	strb	r2, [r3, #18]
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	2200      	movs	r2, #0
 8012e60:	74da      	strb	r2, [r3, #19]
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	2200      	movs	r2, #0
 8012e66:	751a      	strb	r2, [r3, #20]
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	2200      	movs	r2, #0
 8012e6c:	755a      	strb	r2, [r3, #21]
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	2200      	movs	r2, #0
 8012e72:	759a      	strb	r2, [r3, #22]
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	2200      	movs	r2, #0
 8012e78:	75da      	strb	r2, [r3, #23]
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	2200      	movs	r2, #0
 8012e7e:	761a      	strb	r2, [r3, #24]
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	2201      	movs	r2, #1
 8012e84:	61da      	str	r2, [r3, #28]
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	2200      	movs	r2, #0
 8012e8a:	621a      	str	r2, [r3, #32]
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	2200      	movs	r2, #0
 8012e90:	625a      	str	r2, [r3, #36]	; 0x24
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	2200      	movs	r2, #0
 8012e96:	629a      	str	r2, [r3, #40]	; 0x28
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	3330      	adds	r3, #48	; 0x30
 8012ea4:	4905      	ldr	r1, [pc, #20]	; (8012ebc <_ZN20CommandLineArgumentsC1EiPKPKc+0xa8>)
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f7f7 ff61 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
{
}
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	4618      	mov	r0, r3
 8012eb0:	3710      	adds	r7, #16
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	bd80      	pop	{r7, pc}
 8012eb6:	bf00      	nop
 8012eb8:	08025fa4 	.word	0x08025fa4
 8012ebc:	08022f08 	.word	0x08022f08

08012ec0 <_ZN10TestFilterD1Ev>:
#ifndef TESTFILTER_H_
#define TESTFILTER_H_

#include "SimpleString.h"

class TestFilter
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	b082      	sub	sp, #8
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	6078      	str	r0, [r7, #4]
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	4618      	mov	r0, r3
 8012ecc:	f7f8 fb07 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	3708      	adds	r7, #8
 8012ed6:	46bd      	mov	sp, r7
 8012ed8:	bd80      	pop	{r7, pc}
	...

08012edc <_ZN20CommandLineArgumentsD1Ev>:

CommandLineArguments::~CommandLineArguments()
 8012edc:	b590      	push	{r4, r7, lr}
 8012ede:	b085      	sub	sp, #20
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
 8012ee4:	4a20      	ldr	r2, [pc, #128]	; (8012f68 <_ZN20CommandLineArgumentsD1Ev+0x8c>)
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	601a      	str	r2, [r3, #0]
{
    while(groupFilters_) {
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d015      	beq.n	8012f1e <_ZN20CommandLineArgumentsD1Ev+0x42>
        TestFilter* current = groupFilters_;
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ef6:	60fb      	str	r3, [r7, #12]
        groupFilters_ = groupFilters_->getNext();
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012efc:	4618      	mov	r0, r3
 8012efe:	f00a fda4 	bl	801da4a <_ZNK10TestFilter7getNextEv>
 8012f02:	4602      	mov	r2, r0
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	625a      	str	r2, [r3, #36]	; 0x24
        delete current;
 8012f08:	68fc      	ldr	r4, [r7, #12]
 8012f0a:	2c00      	cmp	r4, #0
 8012f0c:	d0ed      	beq.n	8012eea <_ZN20CommandLineArgumentsD1Ev+0xe>
 8012f0e:	4620      	mov	r0, r4
 8012f10:	f7ff ffd6 	bl	8012ec0 <_ZN10TestFilterD1Ev>
 8012f14:	2110      	movs	r1, #16
 8012f16:	4620      	mov	r0, r4
 8012f18:	f7f5 fb7a 	bl	8008610 <_ZdlPvj>
    while(groupFilters_) {
 8012f1c:	e7e5      	b.n	8012eea <_ZN20CommandLineArgumentsD1Ev+0xe>
    }
    while(nameFilters_) {
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d015      	beq.n	8012f52 <_ZN20CommandLineArgumentsD1Ev+0x76>
        TestFilter* current = nameFilters_;
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f2a:	60bb      	str	r3, [r7, #8]
        nameFilters_ = nameFilters_->getNext();
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f30:	4618      	mov	r0, r3
 8012f32:	f00a fd8a 	bl	801da4a <_ZNK10TestFilter7getNextEv>
 8012f36:	4602      	mov	r2, r0
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	629a      	str	r2, [r3, #40]	; 0x28
        delete current;
 8012f3c:	68bc      	ldr	r4, [r7, #8]
 8012f3e:	2c00      	cmp	r4, #0
 8012f40:	d0ed      	beq.n	8012f1e <_ZN20CommandLineArgumentsD1Ev+0x42>
 8012f42:	4620      	mov	r0, r4
 8012f44:	f7ff ffbc 	bl	8012ec0 <_ZN10TestFilterD1Ev>
 8012f48:	2110      	movs	r1, #16
 8012f4a:	4620      	mov	r0, r4
 8012f4c:	f7f5 fb60 	bl	8008610 <_ZdlPvj>
    while(nameFilters_) {
 8012f50:	e7e5      	b.n	8012f1e <_ZN20CommandLineArgumentsD1Ev+0x42>
CommandLineArguments::~CommandLineArguments()
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	3330      	adds	r3, #48	; 0x30
 8012f56:	4618      	mov	r0, r3
 8012f58:	f7f8 fac1 	bl	800b4de <_ZN12SimpleStringD1Ev>
    }
}
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	4618      	mov	r0, r3
 8012f60:	3714      	adds	r7, #20
 8012f62:	46bd      	mov	sp, r7
 8012f64:	bd90      	pop	{r4, r7, pc}
 8012f66:	bf00      	nop
 8012f68:	08025fa4 	.word	0x08025fa4

08012f6c <_ZN20CommandLineArgumentsD0Ev>:
CommandLineArguments::~CommandLineArguments()
 8012f6c:	b580      	push	{r7, lr}
 8012f6e:	b082      	sub	sp, #8
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	6078      	str	r0, [r7, #4]
}
 8012f74:	6878      	ldr	r0, [r7, #4]
 8012f76:	f7ff ffb1 	bl	8012edc <_ZN20CommandLineArgumentsD1Ev>
 8012f7a:	2138      	movs	r1, #56	; 0x38
 8012f7c:	6878      	ldr	r0, [r7, #4]
 8012f7e:	f7f5 fb47 	bl	8008610 <_ZdlPvj>
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	4618      	mov	r0, r3
 8012f86:	3708      	adds	r7, #8
 8012f88:	46bd      	mov	sp, r7
 8012f8a:	bd80      	pop	{r7, pc}

08012f8c <_ZN20CommandLineArguments5parseEP10TestPlugin>:

bool CommandLineArguments::parse(TestPlugin* plugin)
{
 8012f8c:	b5b0      	push	{r4, r5, r7, lr}
 8012f8e:	b0be      	sub	sp, #248	; 0xf8
 8012f90:	af02      	add	r7, sp, #8
 8012f92:	6078      	str	r0, [r7, #4]
 8012f94:	6039      	str	r1, [r7, #0]
 8012f96:	2400      	movs	r4, #0
    bool correctParameters = true;
 8012f98:	2301      	movs	r3, #1
 8012f9a:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    for (int i = 1; i < ac_; i++) {
 8012f9e:	2301      	movs	r3, #1
 8012fa0:	613b      	str	r3, [r7, #16]
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	685a      	ldr	r2, [r3, #4]
 8012fa6:	693b      	ldr	r3, [r7, #16]
 8012fa8:	429a      	cmp	r2, r3
 8012faa:	f340 83a4 	ble.w	80136f6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76a>
        SimpleString argument = av_[i];
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	689a      	ldr	r2, [r3, #8]
 8012fb2:	693b      	ldr	r3, [r7, #16]
 8012fb4:	009b      	lsls	r3, r3, #2
 8012fb6:	4413      	add	r3, r2
 8012fb8:	681a      	ldr	r2, [r3, #0]
 8012fba:	f107 0308 	add.w	r3, r7, #8
 8012fbe:	4611      	mov	r1, r2
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f7f7 fed4 	bl	800ad6e <_ZN12SimpleStringC1EPKc>

        if (argument == "-h") {
 8012fc6:	f107 0314 	add.w	r3, r7, #20
 8012fca:	49c8      	ldr	r1, [pc, #800]	; (80132ec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x360>)
 8012fcc:	4618      	mov	r0, r3
 8012fce:	f7f7 fece 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8012fd2:	f107 0214 	add.w	r2, r7, #20
 8012fd6:	f107 0308 	add.w	r3, r7, #8
 8012fda:	4611      	mov	r1, r2
 8012fdc:	4618      	mov	r0, r3
 8012fde:	f7f8 fa8a 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	461d      	mov	r5, r3
 8012fe6:	f107 0314 	add.w	r3, r7, #20
 8012fea:	4618      	mov	r0, r3
 8012fec:	f7f8 fa77 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8012ff0:	2d00      	cmp	r5, #0
 8012ff2:	d006      	beq.n	8013002 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76>
            needHelp_ = true;
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	2201      	movs	r2, #1
 8012ff8:	731a      	strb	r2, [r3, #12]
            correctParameters = false;
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8013000:	e366      	b.n	80136d0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        }
        else if (argument == "-v") verbose_ = true;
 8013002:	f107 031c 	add.w	r3, r7, #28
 8013006:	49ba      	ldr	r1, [pc, #744]	; (80132f0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x364>)
 8013008:	4618      	mov	r0, r3
 801300a:	f7f7 feb0 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801300e:	f107 021c 	add.w	r2, r7, #28
 8013012:	f107 0308 	add.w	r3, r7, #8
 8013016:	4611      	mov	r1, r2
 8013018:	4618      	mov	r0, r3
 801301a:	f7f8 fa6c 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801301e:	4603      	mov	r3, r0
 8013020:	461d      	mov	r5, r3
 8013022:	f107 031c 	add.w	r3, r7, #28
 8013026:	4618      	mov	r0, r3
 8013028:	f7f8 fa59 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801302c:	2d00      	cmp	r5, #0
 801302e:	d003      	beq.n	8013038 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xac>
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	2201      	movs	r2, #1
 8013034:	735a      	strb	r2, [r3, #13]
 8013036:	e34b      	b.n	80136d0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-vv") veryVerbose_ = true;
 8013038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801303c:	49ad      	ldr	r1, [pc, #692]	; (80132f4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x368>)
 801303e:	4618      	mov	r0, r3
 8013040:	f7f7 fe95 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8013044:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013048:	f107 0308 	add.w	r3, r7, #8
 801304c:	4611      	mov	r1, r2
 801304e:	4618      	mov	r0, r3
 8013050:	f7f8 fa51 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 8013054:	4603      	mov	r3, r0
 8013056:	461d      	mov	r5, r3
 8013058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801305c:	4618      	mov	r0, r3
 801305e:	f7f8 fa3e 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8013062:	2d00      	cmp	r5, #0
 8013064:	d003      	beq.n	801306e <_ZN20CommandLineArguments5parseEP10TestPlugin+0xe2>
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	2201      	movs	r2, #1
 801306a:	739a      	strb	r2, [r3, #14]
 801306c:	e330      	b.n	80136d0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-c") color_ = true;
 801306e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013072:	49a1      	ldr	r1, [pc, #644]	; (80132f8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x36c>)
 8013074:	4618      	mov	r0, r3
 8013076:	f7f7 fe7a 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801307a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801307e:	f107 0308 	add.w	r3, r7, #8
 8013082:	4611      	mov	r1, r2
 8013084:	4618      	mov	r0, r3
 8013086:	f7f8 fa36 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801308a:	4603      	mov	r3, r0
 801308c:	461d      	mov	r5, r3
 801308e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013092:	4618      	mov	r0, r3
 8013094:	f7f8 fa23 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8013098:	2d00      	cmp	r5, #0
 801309a:	d003      	beq.n	80130a4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x118>
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	2201      	movs	r2, #1
 80130a0:	73da      	strb	r2, [r3, #15]
 80130a2:	e315      	b.n	80136d0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-p") runTestsAsSeperateProcess_ = true;
 80130a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80130a8:	4994      	ldr	r1, [pc, #592]	; (80132fc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x370>)
 80130aa:	4618      	mov	r0, r3
 80130ac:	f7f7 fe5f 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80130b0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80130b4:	f107 0308 	add.w	r3, r7, #8
 80130b8:	4611      	mov	r1, r2
 80130ba:	4618      	mov	r0, r3
 80130bc:	f7f8 fa1b 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 80130c0:	4603      	mov	r3, r0
 80130c2:	461d      	mov	r5, r3
 80130c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80130c8:	4618      	mov	r0, r3
 80130ca:	f7f8 fa08 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80130ce:	2d00      	cmp	r5, #0
 80130d0:	d003      	beq.n	80130da <_ZN20CommandLineArguments5parseEP10TestPlugin+0x14e>
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	2201      	movs	r2, #1
 80130d6:	741a      	strb	r2, [r3, #16]
 80130d8:	e2fa      	b.n	80136d0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-b") reversing_ = true;
 80130da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80130de:	4988      	ldr	r1, [pc, #544]	; (8013300 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x374>)
 80130e0:	4618      	mov	r0, r3
 80130e2:	f7f7 fe44 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80130e6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80130ea:	f107 0308 	add.w	r3, r7, #8
 80130ee:	4611      	mov	r1, r2
 80130f0:	4618      	mov	r0, r3
 80130f2:	f7f8 fa00 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 80130f6:	4603      	mov	r3, r0
 80130f8:	461d      	mov	r5, r3
 80130fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80130fe:	4618      	mov	r0, r3
 8013100:	f7f8 f9ed 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8013104:	2d00      	cmp	r5, #0
 8013106:	d003      	beq.n	8013110 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x184>
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	2201      	movs	r2, #1
 801310c:	755a      	strb	r2, [r3, #21]
 801310e:	e2df      	b.n	80136d0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-lg") listTestGroupNames_ = true;
 8013110:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013114:	497b      	ldr	r1, [pc, #492]	; (8013304 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x378>)
 8013116:	4618      	mov	r0, r3
 8013118:	f7f7 fe29 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801311c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8013120:	f107 0308 	add.w	r3, r7, #8
 8013124:	4611      	mov	r1, r2
 8013126:	4618      	mov	r0, r3
 8013128:	f7f8 f9e5 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801312c:	4603      	mov	r3, r0
 801312e:	461d      	mov	r5, r3
 8013130:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013134:	4618      	mov	r0, r3
 8013136:	f7f8 f9d2 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801313a:	2d00      	cmp	r5, #0
 801313c:	d003      	beq.n	8013146 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1ba>
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	2201      	movs	r2, #1
 8013142:	745a      	strb	r2, [r3, #17]
 8013144:	e2c4      	b.n	80136d0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ln") listTestGroupAndCaseNames_ = true;
 8013146:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801314a:	496f      	ldr	r1, [pc, #444]	; (8013308 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x37c>)
 801314c:	4618      	mov	r0, r3
 801314e:	f7f7 fe0e 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8013152:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8013156:	f107 0308 	add.w	r3, r7, #8
 801315a:	4611      	mov	r1, r2
 801315c:	4618      	mov	r0, r3
 801315e:	f7f8 f9ca 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 8013162:	4603      	mov	r3, r0
 8013164:	461d      	mov	r5, r3
 8013166:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801316a:	4618      	mov	r0, r3
 801316c:	f7f8 f9b7 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8013170:	2d00      	cmp	r5, #0
 8013172:	d003      	beq.n	801317c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1f0>
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	2201      	movs	r2, #1
 8013178:	749a      	strb	r2, [r3, #18]
 801317a:	e2a9      	b.n	80136d0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ll") listTestLocations_ = true;
 801317c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013180:	4962      	ldr	r1, [pc, #392]	; (801330c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x380>)
 8013182:	4618      	mov	r0, r3
 8013184:	f7f7 fdf3 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8013188:	f107 0254 	add.w	r2, r7, #84	; 0x54
 801318c:	f107 0308 	add.w	r3, r7, #8
 8013190:	4611      	mov	r1, r2
 8013192:	4618      	mov	r0, r3
 8013194:	f7f8 f9af 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 8013198:	4603      	mov	r3, r0
 801319a:	461d      	mov	r5, r3
 801319c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80131a0:	4618      	mov	r0, r3
 80131a2:	f7f8 f99c 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80131a6:	2d00      	cmp	r5, #0
 80131a8:	d003      	beq.n	80131b2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x226>
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	2201      	movs	r2, #1
 80131ae:	74da      	strb	r2, [r3, #19]
 80131b0:	e28e      	b.n	80136d0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ri") runIgnored_ = true;
 80131b2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80131b6:	4956      	ldr	r1, [pc, #344]	; (8013310 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x384>)
 80131b8:	4618      	mov	r0, r3
 80131ba:	f7f7 fdd8 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80131be:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80131c2:	f107 0308 	add.w	r3, r7, #8
 80131c6:	4611      	mov	r1, r2
 80131c8:	4618      	mov	r0, r3
 80131ca:	f7f8 f994 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 80131ce:	4603      	mov	r3, r0
 80131d0:	461d      	mov	r5, r3
 80131d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80131d6:	4618      	mov	r0, r3
 80131d8:	f7f8 f981 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80131dc:	2d00      	cmp	r5, #0
 80131de:	d003      	beq.n	80131e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x25c>
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	2201      	movs	r2, #1
 80131e4:	751a      	strb	r2, [r3, #20]
 80131e6:	e273      	b.n	80136d0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-f") crashOnFail_ = true;
 80131e8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80131ec:	4949      	ldr	r1, [pc, #292]	; (8013314 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x388>)
 80131ee:	4618      	mov	r0, r3
 80131f0:	f7f7 fdbd 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80131f4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80131f8:	f107 0308 	add.w	r3, r7, #8
 80131fc:	4611      	mov	r1, r2
 80131fe:	4618      	mov	r0, r3
 8013200:	f7f8 f979 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 8013204:	4603      	mov	r3, r0
 8013206:	461d      	mov	r5, r3
 8013208:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801320c:	4618      	mov	r0, r3
 801320e:	f7f8 f966 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8013212:	2d00      	cmp	r5, #0
 8013214:	d003      	beq.n	801321e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x292>
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	2201      	movs	r2, #1
 801321a:	759a      	strb	r2, [r3, #22]
 801321c:	e258      	b.n	80136d0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-r")) setRepeatCount(ac_, av_, i);
 801321e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013222:	493d      	ldr	r1, [pc, #244]	; (8013318 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x38c>)
 8013224:	4618      	mov	r0, r3
 8013226:	f7f7 fda2 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801322a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801322e:	f107 0308 	add.w	r3, r7, #8
 8013232:	4611      	mov	r1, r2
 8013234:	4618      	mov	r0, r3
 8013236:	f7f7 fe5e 	bl	800aef6 <_ZNK12SimpleString10startsWithERKS_>
 801323a:	4603      	mov	r3, r0
 801323c:	461d      	mov	r5, r3
 801323e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013242:	4618      	mov	r0, r3
 8013244:	f7f8 f94b 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8013248:	2d00      	cmp	r5, #0
 801324a:	d009      	beq.n	8013260 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x2d4>
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	6859      	ldr	r1, [r3, #4]
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	689a      	ldr	r2, [r3, #8]
 8013254:	f107 0310 	add.w	r3, r7, #16
 8013258:	6878      	ldr	r0, [r7, #4]
 801325a:	f000 fb33 	bl	80138c4 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>
 801325e:	e237      	b.n	80136d0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-g")) addGroupFilter(ac_, av_, i);
 8013260:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8013264:	492d      	ldr	r1, [pc, #180]	; (801331c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x390>)
 8013266:	4618      	mov	r0, r3
 8013268:	f7f7 fd81 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801326c:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8013270:	f107 0308 	add.w	r3, r7, #8
 8013274:	4611      	mov	r1, r2
 8013276:	4618      	mov	r0, r3
 8013278:	f7f7 fe3d 	bl	800aef6 <_ZNK12SimpleString10startsWithERKS_>
 801327c:	4603      	mov	r3, r0
 801327e:	461d      	mov	r5, r3
 8013280:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8013284:	4618      	mov	r0, r3
 8013286:	f7f8 f92a 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801328a:	2d00      	cmp	r5, #0
 801328c:	d009      	beq.n	80132a2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x316>
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	6859      	ldr	r1, [r3, #4]
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	689a      	ldr	r2, [r3, #8]
 8013296:	f107 0310 	add.w	r3, r7, #16
 801329a:	6878      	ldr	r0, [r7, #4]
 801329c:	f000 fc40 	bl	8013b20 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>
 80132a0:	e216      	b.n	80136d0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-t")) correctParameters = addGroupDotNameFilter(ac_, av_, i);
 80132a2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80132a6:	491e      	ldr	r1, [pc, #120]	; (8013320 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x394>)
 80132a8:	4618      	mov	r0, r3
 80132aa:	f7f7 fd60 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80132ae:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80132b2:	f107 0308 	add.w	r3, r7, #8
 80132b6:	4611      	mov	r1, r2
 80132b8:	4618      	mov	r0, r3
 80132ba:	f7f7 fe1c 	bl	800aef6 <_ZNK12SimpleString10startsWithERKS_>
 80132be:	4603      	mov	r3, r0
 80132c0:	461d      	mov	r5, r3
 80132c2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80132c6:	4618      	mov	r0, r3
 80132c8:	f7f8 f909 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80132cc:	2d00      	cmp	r5, #0
 80132ce:	d029      	beq.n	8013324 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x398>
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	6859      	ldr	r1, [r3, #4]
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	689a      	ldr	r2, [r3, #8]
 80132d8:	f107 0310 	add.w	r3, r7, #16
 80132dc:	6878      	ldr	r0, [r7, #4]
 80132de:	f000 fc61 	bl	8013ba4 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>
 80132e2:	4603      	mov	r3, r0
 80132e4:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80132e8:	e1f2      	b.n	80136d0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 80132ea:	bf00      	nop
 80132ec:	08022f0c 	.word	0x08022f0c
 80132f0:	08022f10 	.word	0x08022f10
 80132f4:	08022f14 	.word	0x08022f14
 80132f8:	08022f18 	.word	0x08022f18
 80132fc:	08022f1c 	.word	0x08022f1c
 8013300:	08022f20 	.word	0x08022f20
 8013304:	08022f24 	.word	0x08022f24
 8013308:	08022f28 	.word	0x08022f28
 801330c:	08022f2c 	.word	0x08022f2c
 8013310:	08022f30 	.word	0x08022f30
 8013314:	08022f34 	.word	0x08022f34
 8013318:	08022f38 	.word	0x08022f38
 801331c:	08022f3c 	.word	0x08022f3c
 8013320:	08022f40 	.word	0x08022f40
        else if (argument.startsWith("-sg")) addStrictGroupFilter(ac_, av_, i);
 8013324:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8013328:	49b9      	ldr	r1, [pc, #740]	; (8013610 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x684>)
 801332a:	4618      	mov	r0, r3
 801332c:	f7f7 fd1f 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8013330:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8013334:	f107 0308 	add.w	r3, r7, #8
 8013338:	4611      	mov	r1, r2
 801333a:	4618      	mov	r0, r3
 801333c:	f7f7 fddb 	bl	800aef6 <_ZNK12SimpleString10startsWithERKS_>
 8013340:	4603      	mov	r3, r0
 8013342:	461d      	mov	r5, r3
 8013344:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8013348:	4618      	mov	r0, r3
 801334a:	f7f8 f8c8 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801334e:	2d00      	cmp	r5, #0
 8013350:	d009      	beq.n	8013366 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x3da>
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	6859      	ldr	r1, [r3, #4]
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	689a      	ldr	r2, [r3, #8]
 801335a:	f107 0310 	add.w	r3, r7, #16
 801335e:	6878      	ldr	r0, [r7, #4]
 8013360:	f000 fccc 	bl	8013cfc <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>
 8013364:	e1b4      	b.n	80136d0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xg")) addExcludeGroupFilter(ac_, av_, i);
 8013366:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801336a:	49aa      	ldr	r1, [pc, #680]	; (8013614 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x688>)
 801336c:	4618      	mov	r0, r3
 801336e:	f7f7 fcfe 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8013372:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8013376:	f107 0308 	add.w	r3, r7, #8
 801337a:	4611      	mov	r1, r2
 801337c:	4618      	mov	r0, r3
 801337e:	f7f7 fdba 	bl	800aef6 <_ZNK12SimpleString10startsWithERKS_>
 8013382:	4603      	mov	r3, r0
 8013384:	461d      	mov	r5, r3
 8013386:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801338a:	4618      	mov	r0, r3
 801338c:	f7f8 f8a7 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8013390:	2d00      	cmp	r5, #0
 8013392:	d009      	beq.n	80133a8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x41c>
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	6859      	ldr	r1, [r3, #4]
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	689a      	ldr	r2, [r3, #8]
 801339c:	f107 0310 	add.w	r3, r7, #16
 80133a0:	6878      	ldr	r0, [r7, #4]
 80133a2:	f000 fcf1 	bl	8013d88 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>
 80133a6:	e193      	b.n	80136d0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsg")) addExcludeStrictGroupFilter(ac_, av_, i);
 80133a8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80133ac:	499a      	ldr	r1, [pc, #616]	; (8013618 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x68c>)
 80133ae:	4618      	mov	r0, r3
 80133b0:	f7f7 fcdd 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80133b4:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80133b8:	f107 0308 	add.w	r3, r7, #8
 80133bc:	4611      	mov	r1, r2
 80133be:	4618      	mov	r0, r3
 80133c0:	f7f7 fd99 	bl	800aef6 <_ZNK12SimpleString10startsWithERKS_>
 80133c4:	4603      	mov	r3, r0
 80133c6:	461d      	mov	r5, r3
 80133c8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80133cc:	4618      	mov	r0, r3
 80133ce:	f7f8 f886 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80133d2:	2d00      	cmp	r5, #0
 80133d4:	d009      	beq.n	80133ea <_ZN20CommandLineArguments5parseEP10TestPlugin+0x45e>
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	6859      	ldr	r1, [r3, #4]
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	689a      	ldr	r2, [r3, #8]
 80133de:	f107 0310 	add.w	r3, r7, #16
 80133e2:	6878      	ldr	r0, [r7, #4]
 80133e4:	f000 fd16 	bl	8013e14 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>
 80133e8:	e172      	b.n	80136d0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-n")) addNameFilter(ac_, av_, i);
 80133ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80133ee:	498b      	ldr	r1, [pc, #556]	; (801361c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x690>)
 80133f0:	4618      	mov	r0, r3
 80133f2:	f7f7 fcbc 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80133f6:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80133fa:	f107 0308 	add.w	r3, r7, #8
 80133fe:	4611      	mov	r1, r2
 8013400:	4618      	mov	r0, r3
 8013402:	f7f7 fd78 	bl	800aef6 <_ZNK12SimpleString10startsWithERKS_>
 8013406:	4603      	mov	r3, r0
 8013408:	461d      	mov	r5, r3
 801340a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801340e:	4618      	mov	r0, r3
 8013410:	f7f8 f865 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8013414:	2d00      	cmp	r5, #0
 8013416:	d009      	beq.n	801342c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4a0>
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	6859      	ldr	r1, [r3, #4]
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	689a      	ldr	r2, [r3, #8]
 8013420:	f107 0310 	add.w	r3, r7, #16
 8013424:	6878      	ldr	r0, [r7, #4]
 8013426:	f000 fd3d 	bl	8013ea4 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>
 801342a:	e151      	b.n	80136d0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-sn")) addStrictNameFilter(ac_, av_, i);
 801342c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8013430:	497b      	ldr	r1, [pc, #492]	; (8013620 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x694>)
 8013432:	4618      	mov	r0, r3
 8013434:	f7f7 fc9b 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8013438:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 801343c:	f107 0308 	add.w	r3, r7, #8
 8013440:	4611      	mov	r1, r2
 8013442:	4618      	mov	r0, r3
 8013444:	f7f7 fd57 	bl	800aef6 <_ZNK12SimpleString10startsWithERKS_>
 8013448:	4603      	mov	r3, r0
 801344a:	461d      	mov	r5, r3
 801344c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8013450:	4618      	mov	r0, r3
 8013452:	f7f8 f844 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8013456:	2d00      	cmp	r5, #0
 8013458:	d009      	beq.n	801346e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4e2>
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	6859      	ldr	r1, [r3, #4]
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	689a      	ldr	r2, [r3, #8]
 8013462:	f107 0310 	add.w	r3, r7, #16
 8013466:	6878      	ldr	r0, [r7, #4]
 8013468:	f000 fd5e 	bl	8013f28 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>
 801346c:	e130      	b.n	80136d0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xn")) addExcludeNameFilter(ac_, av_, i);
 801346e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013472:	496c      	ldr	r1, [pc, #432]	; (8013624 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x698>)
 8013474:	4618      	mov	r0, r3
 8013476:	f7f7 fc7a 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801347a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 801347e:	f107 0308 	add.w	r3, r7, #8
 8013482:	4611      	mov	r1, r2
 8013484:	4618      	mov	r0, r3
 8013486:	f7f7 fd36 	bl	800aef6 <_ZNK12SimpleString10startsWithERKS_>
 801348a:	4603      	mov	r3, r0
 801348c:	461d      	mov	r5, r3
 801348e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013492:	4618      	mov	r0, r3
 8013494:	f7f8 f823 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8013498:	2d00      	cmp	r5, #0
 801349a:	d009      	beq.n	80134b0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x524>
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	6859      	ldr	r1, [r3, #4]
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	689a      	ldr	r2, [r3, #8]
 80134a4:	f107 0310 	add.w	r3, r7, #16
 80134a8:	6878      	ldr	r0, [r7, #4]
 80134aa:	f000 fd83 	bl	8013fb4 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>
 80134ae:	e10f      	b.n	80136d0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsn")) addExcludeStrictNameFilter(ac_, av_, i);
 80134b0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80134b4:	495c      	ldr	r1, [pc, #368]	; (8013628 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x69c>)
 80134b6:	4618      	mov	r0, r3
 80134b8:	f7f7 fc59 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80134bc:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80134c0:	f107 0308 	add.w	r3, r7, #8
 80134c4:	4611      	mov	r1, r2
 80134c6:	4618      	mov	r0, r3
 80134c8:	f7f7 fd15 	bl	800aef6 <_ZNK12SimpleString10startsWithERKS_>
 80134cc:	4603      	mov	r3, r0
 80134ce:	461d      	mov	r5, r3
 80134d0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80134d4:	4618      	mov	r0, r3
 80134d6:	f7f8 f802 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80134da:	2d00      	cmp	r5, #0
 80134dc:	d009      	beq.n	80134f2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x566>
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	6859      	ldr	r1, [r3, #4]
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	689a      	ldr	r2, [r3, #8]
 80134e6:	f107 0310 	add.w	r3, r7, #16
 80134ea:	6878      	ldr	r0, [r7, #4]
 80134ec:	f000 fda8 	bl	8014040 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>
 80134f0:	e0ee      	b.n	80136d0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-s")) correctParameters = setShuffle(ac_, av_, i);
 80134f2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80134f6:	494d      	ldr	r1, [pc, #308]	; (801362c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a0>)
 80134f8:	4618      	mov	r0, r3
 80134fa:	f7f7 fc38 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80134fe:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8013502:	f107 0308 	add.w	r3, r7, #8
 8013506:	4611      	mov	r1, r2
 8013508:	4618      	mov	r0, r3
 801350a:	f7f7 fcf4 	bl	800aef6 <_ZNK12SimpleString10startsWithERKS_>
 801350e:	4603      	mov	r3, r0
 8013510:	461d      	mov	r5, r3
 8013512:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8013516:	4618      	mov	r0, r3
 8013518:	f7f7 ffe1 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801351c:	2d00      	cmp	r5, #0
 801351e:	d00c      	beq.n	801353a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5ae>
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	6859      	ldr	r1, [r3, #4]
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	689a      	ldr	r2, [r3, #8]
 8013528:	f107 0310 	add.w	r3, r7, #16
 801352c:	6878      	ldr	r0, [r7, #4]
 801352e:	f000 fa29 	bl	8013984 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>
 8013532:	4603      	mov	r3, r0
 8013534:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8013538:	e0ca      	b.n	80136d0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "TEST(");
 801353a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801353e:	493c      	ldr	r1, [pc, #240]	; (8013630 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 8013540:	4618      	mov	r0, r3
 8013542:	f7f7 fc14 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8013546:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 801354a:	f107 0308 	add.w	r3, r7, #8
 801354e:	4611      	mov	r1, r2
 8013550:	4618      	mov	r0, r3
 8013552:	f7f7 fcd0 	bl	800aef6 <_ZNK12SimpleString10startsWithERKS_>
 8013556:	4603      	mov	r3, r0
 8013558:	461d      	mov	r5, r3
 801355a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801355e:	4618      	mov	r0, r3
 8013560:	f7f7 ffbd 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8013564:	2d00      	cmp	r5, #0
 8013566:	d00b      	beq.n	8013580 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5f4>
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	6859      	ldr	r1, [r3, #4]
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	689a      	ldr	r2, [r3, #8]
 8013570:	f107 0310 	add.w	r3, r7, #16
 8013574:	482e      	ldr	r0, [pc, #184]	; (8013630 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 8013576:	9000      	str	r0, [sp, #0]
 8013578:	6878      	ldr	r0, [r7, #4]
 801357a:	f000 fda9 	bl	80140d0 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 801357e:	e0a7      	b.n	80136d0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("IGNORE_TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "IGNORE_TEST(");
 8013580:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8013584:	492b      	ldr	r1, [pc, #172]	; (8013634 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 8013586:	4618      	mov	r0, r3
 8013588:	f7f7 fbf1 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801358c:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8013590:	f107 0308 	add.w	r3, r7, #8
 8013594:	4611      	mov	r1, r2
 8013596:	4618      	mov	r0, r3
 8013598:	f7f7 fcad 	bl	800aef6 <_ZNK12SimpleString10startsWithERKS_>
 801359c:	4603      	mov	r3, r0
 801359e:	461d      	mov	r5, r3
 80135a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80135a4:	4618      	mov	r0, r3
 80135a6:	f7f7 ff9a 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80135aa:	2d00      	cmp	r5, #0
 80135ac:	d00b      	beq.n	80135c6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x63a>
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	6859      	ldr	r1, [r3, #4]
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	689a      	ldr	r2, [r3, #8]
 80135b6:	f107 0310 	add.w	r3, r7, #16
 80135ba:	481e      	ldr	r0, [pc, #120]	; (8013634 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 80135bc:	9000      	str	r0, [sp, #0]
 80135be:	6878      	ldr	r0, [r7, #4]
 80135c0:	f000 fd86 	bl	80140d0 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 80135c4:	e084      	b.n	80136d0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-o")) correctParameters = setOutputType(ac_, av_, i);
 80135c6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80135ca:	491b      	ldr	r1, [pc, #108]	; (8013638 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6ac>)
 80135cc:	4618      	mov	r0, r3
 80135ce:	f7f7 fbce 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80135d2:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 80135d6:	f107 0308 	add.w	r3, r7, #8
 80135da:	4611      	mov	r1, r2
 80135dc:	4618      	mov	r0, r3
 80135de:	f7f7 fc8a 	bl	800aef6 <_ZNK12SimpleString10startsWithERKS_>
 80135e2:	4603      	mov	r3, r0
 80135e4:	461d      	mov	r5, r3
 80135e6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80135ea:	4618      	mov	r0, r3
 80135ec:	f7f7 ff77 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80135f0:	2d00      	cmp	r5, #0
 80135f2:	d023      	beq.n	801363c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6b0>
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	6859      	ldr	r1, [r3, #4]
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	689a      	ldr	r2, [r3, #8]
 80135fc:	f107 0310 	add.w	r3, r7, #16
 8013600:	6878      	ldr	r0, [r7, #4]
 8013602:	f000 fe3b 	bl	801427c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>
 8013606:	4603      	mov	r3, r0
 8013608:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 801360c:	e060      	b.n	80136d0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 801360e:	bf00      	nop
 8013610:	08022f44 	.word	0x08022f44
 8013614:	08022f48 	.word	0x08022f48
 8013618:	08022f4c 	.word	0x08022f4c
 801361c:	08022f54 	.word	0x08022f54
 8013620:	08022f58 	.word	0x08022f58
 8013624:	08022f5c 	.word	0x08022f5c
 8013628:	08022f60 	.word	0x08022f60
 801362c:	08022f68 	.word	0x08022f68
 8013630:	08022f6c 	.word	0x08022f6c
 8013634:	08022f74 	.word	0x08022f74
 8013638:	08022f84 	.word	0x08022f84
        else if (argument.startsWith("-p")) correctParameters = plugin->parseAllArguments(ac_, av_, i);
 801363c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8013640:	4930      	ldr	r1, [pc, #192]	; (8013704 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x778>)
 8013642:	4618      	mov	r0, r3
 8013644:	f7f7 fb93 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8013648:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801364c:	f107 0308 	add.w	r3, r7, #8
 8013650:	4611      	mov	r1, r2
 8013652:	4618      	mov	r0, r3
 8013654:	f7f7 fc4f 	bl	800aef6 <_ZNK12SimpleString10startsWithERKS_>
 8013658:	4603      	mov	r3, r0
 801365a:	461d      	mov	r5, r3
 801365c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8013660:	4618      	mov	r0, r3
 8013662:	f7f7 ff3c 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8013666:	2d00      	cmp	r5, #0
 8013668:	d00e      	beq.n	8013688 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6fc>
 801366a:	683b      	ldr	r3, [r7, #0]
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	331c      	adds	r3, #28
 8013670:	681d      	ldr	r5, [r3, #0]
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	6859      	ldr	r1, [r3, #4]
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	689a      	ldr	r2, [r3, #8]
 801367a:	693b      	ldr	r3, [r7, #16]
 801367c:	6838      	ldr	r0, [r7, #0]
 801367e:	47a8      	blx	r5
 8013680:	4603      	mov	r3, r0
 8013682:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8013686:	e023      	b.n	80136d0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-k")) setPackageName(ac_, av_, i);
 8013688:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801368c:	491e      	ldr	r1, [pc, #120]	; (8013708 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x77c>)
 801368e:	4618      	mov	r0, r3
 8013690:	f7f7 fb6d 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8013694:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8013698:	f107 0308 	add.w	r3, r7, #8
 801369c:	4611      	mov	r1, r2
 801369e:	4618      	mov	r0, r3
 80136a0:	f7f7 fc29 	bl	800aef6 <_ZNK12SimpleString10startsWithERKS_>
 80136a4:	4603      	mov	r3, r0
 80136a6:	461d      	mov	r5, r3
 80136a8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80136ac:	4618      	mov	r0, r3
 80136ae:	f7f7 ff16 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80136b2:	2d00      	cmp	r5, #0
 80136b4:	d009      	beq.n	80136ca <_ZN20CommandLineArguments5parseEP10TestPlugin+0x73e>
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	6859      	ldr	r1, [r3, #4]
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	689a      	ldr	r2, [r3, #8]
 80136be:	f107 0310 	add.w	r3, r7, #16
 80136c2:	6878      	ldr	r0, [r7, #4]
 80136c4:	f000 fd98 	bl	80141f8 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>
 80136c8:	e002      	b.n	80136d0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else correctParameters = false;
 80136ca:	2300      	movs	r3, #0
 80136cc:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

        if (correctParameters == false) {
 80136d0:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d102      	bne.n	80136de <_ZN20CommandLineArguments5parseEP10TestPlugin+0x752>
            return false;
 80136d8:	2400      	movs	r4, #0
 80136da:	2500      	movs	r5, #0
 80136dc:	e000      	b.n	80136e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x754>
        SimpleString argument = av_[i];
 80136de:	2501      	movs	r5, #1
 80136e0:	f107 0308 	add.w	r3, r7, #8
 80136e4:	4618      	mov	r0, r3
 80136e6:	f7f7 fefa 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80136ea:	2d01      	cmp	r5, #1
 80136ec:	d104      	bne.n	80136f8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76c>
    for (int i = 1; i < ac_; i++) {
 80136ee:	693b      	ldr	r3, [r7, #16]
 80136f0:	3301      	adds	r3, #1
 80136f2:	613b      	str	r3, [r7, #16]
 80136f4:	e455      	b.n	8012fa2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x16>
        }
    }
    return true;
 80136f6:	2401      	movs	r4, #1
 80136f8:	4623      	mov	r3, r4
}
 80136fa:	4618      	mov	r0, r3
 80136fc:	37f0      	adds	r7, #240	; 0xf0
 80136fe:	46bd      	mov	sp, r7
 8013700:	bdb0      	pop	{r4, r5, r7, pc}
 8013702:	bf00      	nop
 8013704:	08022f1c 	.word	0x08022f1c
 8013708:	08022f88 	.word	0x08022f88

0801370c <_ZNK20CommandLineArguments5usageEv>:

const char* CommandLineArguments::usage() const
{
 801370c:	b480      	push	{r7}
 801370e:	b083      	sub	sp, #12
 8013710:	af00      	add	r7, sp, #0
 8013712:	6078      	str	r0, [r7, #4]
    return "use -h for more extensive help\n"
           "usage [-h] [-v] [-vv] [-c] [-p] [-lg] [-ln] [-ri] [-r#] [-f]\n"
           "      [-g|sg|xg|xsg groupName]... [-n|sn|xn|xsn testName]... [-t groupName.testName]...\n"
           "      [-b] [-s [randomizerSeed>0]] [\"TEST(groupName, testName)\"]...\n"
           "      [-o{normal, junit, teamcity}] [-k packageName]\n";
 8013714:	4b03      	ldr	r3, [pc, #12]	; (8013724 <_ZNK20CommandLineArguments5usageEv+0x18>)
}
 8013716:	4618      	mov	r0, r3
 8013718:	370c      	adds	r7, #12
 801371a:	46bd      	mov	sp, r7
 801371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013720:	4770      	bx	lr
 8013722:	bf00      	nop
 8013724:	08022f8c 	.word	0x08022f8c

08013728 <_ZNK20CommandLineArguments4helpEv>:

const char* CommandLineArguments::help() const
{
 8013728:	b480      	push	{r7}
 801372a:	b083      	sub	sp, #12
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
      "Options that control how the tests are run:\n"
      "  -p               - run tests in a separate process.\n"
      "  -b               - run the tests backwards, reversing the normal way\n"
      "  -s [seed]        - shuffle tests randomly. Seed is optional\n"
      "  -r#              - repeat the tests some number (#) of times, or twice if # is not specified.\n"
      "  -f               - Cause the tests to crash on failure (to allow the test to be debugged if necessary)\n";
 8013730:	4b03      	ldr	r3, [pc, #12]	; (8013740 <_ZNK20CommandLineArguments4helpEv+0x18>)
}
 8013732:	4618      	mov	r0, r3
 8013734:	370c      	adds	r7, #12
 8013736:	46bd      	mov	sp, r7
 8013738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801373c:	4770      	bx	lr
 801373e:	bf00      	nop
 8013740:	080230bc 	.word	0x080230bc

08013744 <_ZNK20CommandLineArguments8needHelpEv>:

bool CommandLineArguments::needHelp() const
{
 8013744:	b480      	push	{r7}
 8013746:	b083      	sub	sp, #12
 8013748:	af00      	add	r7, sp, #0
 801374a:	6078      	str	r0, [r7, #4]
    return needHelp_;
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	7b1b      	ldrb	r3, [r3, #12]
}
 8013750:	4618      	mov	r0, r3
 8013752:	370c      	adds	r7, #12
 8013754:	46bd      	mov	sp, r7
 8013756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801375a:	4770      	bx	lr

0801375c <_ZNK20CommandLineArguments9isVerboseEv>:

bool CommandLineArguments::isVerbose() const
{
 801375c:	b480      	push	{r7}
 801375e:	b083      	sub	sp, #12
 8013760:	af00      	add	r7, sp, #0
 8013762:	6078      	str	r0, [r7, #4]
    return verbose_;
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	7b5b      	ldrb	r3, [r3, #13]
}
 8013768:	4618      	mov	r0, r3
 801376a:	370c      	adds	r7, #12
 801376c:	46bd      	mov	sp, r7
 801376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013772:	4770      	bx	lr

08013774 <_ZNK20CommandLineArguments13isVeryVerboseEv>:

bool CommandLineArguments::isVeryVerbose() const
{
 8013774:	b480      	push	{r7}
 8013776:	b083      	sub	sp, #12
 8013778:	af00      	add	r7, sp, #0
 801377a:	6078      	str	r0, [r7, #4]
    return veryVerbose_;
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	7b9b      	ldrb	r3, [r3, #14]
}
 8013780:	4618      	mov	r0, r3
 8013782:	370c      	adds	r7, #12
 8013784:	46bd      	mov	sp, r7
 8013786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801378a:	4770      	bx	lr

0801378c <_ZNK20CommandLineArguments7isColorEv>:

bool CommandLineArguments::isColor() const
{
 801378c:	b480      	push	{r7}
 801378e:	b083      	sub	sp, #12
 8013790:	af00      	add	r7, sp, #0
 8013792:	6078      	str	r0, [r7, #4]
    return color_;
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	7bdb      	ldrb	r3, [r3, #15]
}
 8013798:	4618      	mov	r0, r3
 801379a:	370c      	adds	r7, #12
 801379c:	46bd      	mov	sp, r7
 801379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a2:	4770      	bx	lr

080137a4 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>:

bool CommandLineArguments::isListingTestGroupNames() const
{
 80137a4:	b480      	push	{r7}
 80137a6:	b083      	sub	sp, #12
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	6078      	str	r0, [r7, #4]
    return listTestGroupNames_;
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	7c5b      	ldrb	r3, [r3, #17]
}
 80137b0:	4618      	mov	r0, r3
 80137b2:	370c      	adds	r7, #12
 80137b4:	46bd      	mov	sp, r7
 80137b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ba:	4770      	bx	lr

080137bc <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>:

bool CommandLineArguments::isListingTestGroupAndCaseNames() const
{
 80137bc:	b480      	push	{r7}
 80137be:	b083      	sub	sp, #12
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	6078      	str	r0, [r7, #4]
    return listTestGroupAndCaseNames_;
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	7c9b      	ldrb	r3, [r3, #18]
}
 80137c8:	4618      	mov	r0, r3
 80137ca:	370c      	adds	r7, #12
 80137cc:	46bd      	mov	sp, r7
 80137ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d2:	4770      	bx	lr

080137d4 <_ZNK20CommandLineArguments22isListingTestLocationsEv>:

bool CommandLineArguments::isListingTestLocations() const
{
 80137d4:	b480      	push	{r7}
 80137d6:	b083      	sub	sp, #12
 80137d8:	af00      	add	r7, sp, #0
 80137da:	6078      	str	r0, [r7, #4]
    return listTestLocations_;
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	7cdb      	ldrb	r3, [r3, #19]
}
 80137e0:	4618      	mov	r0, r3
 80137e2:	370c      	adds	r7, #12
 80137e4:	46bd      	mov	sp, r7
 80137e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ea:	4770      	bx	lr

080137ec <_ZNK20CommandLineArguments12isRunIgnoredEv>:

bool CommandLineArguments::isRunIgnored() const
{
 80137ec:	b480      	push	{r7}
 80137ee:	b083      	sub	sp, #12
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	6078      	str	r0, [r7, #4]
    return runIgnored_;
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	7d1b      	ldrb	r3, [r3, #20]
}
 80137f8:	4618      	mov	r0, r3
 80137fa:	370c      	adds	r7, #12
 80137fc:	46bd      	mov	sp, r7
 80137fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013802:	4770      	bx	lr

08013804 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>:

bool CommandLineArguments::runTestsInSeperateProcess() const
{
 8013804:	b480      	push	{r7}
 8013806:	b083      	sub	sp, #12
 8013808:	af00      	add	r7, sp, #0
 801380a:	6078      	str	r0, [r7, #4]
    return runTestsAsSeperateProcess_;
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	7c1b      	ldrb	r3, [r3, #16]
}
 8013810:	4618      	mov	r0, r3
 8013812:	370c      	adds	r7, #12
 8013814:	46bd      	mov	sp, r7
 8013816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801381a:	4770      	bx	lr

0801381c <_ZNK20CommandLineArguments14getRepeatCountEv>:


size_t CommandLineArguments::getRepeatCount() const
{
 801381c:	b480      	push	{r7}
 801381e:	b083      	sub	sp, #12
 8013820:	af00      	add	r7, sp, #0
 8013822:	6078      	str	r0, [r7, #4]
    return repeat_;
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	69db      	ldr	r3, [r3, #28]
}
 8013828:	4618      	mov	r0, r3
 801382a:	370c      	adds	r7, #12
 801382c:	46bd      	mov	sp, r7
 801382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013832:	4770      	bx	lr

08013834 <_ZNK20CommandLineArguments11isReversingEv>:

bool CommandLineArguments::isReversing() const
{
 8013834:	b480      	push	{r7}
 8013836:	b083      	sub	sp, #12
 8013838:	af00      	add	r7, sp, #0
 801383a:	6078      	str	r0, [r7, #4]
    return reversing_;
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	7d5b      	ldrb	r3, [r3, #21]
}
 8013840:	4618      	mov	r0, r3
 8013842:	370c      	adds	r7, #12
 8013844:	46bd      	mov	sp, r7
 8013846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801384a:	4770      	bx	lr

0801384c <_ZNK20CommandLineArguments16isCrashingOnFailEv>:

bool CommandLineArguments::isCrashingOnFail() const
{
 801384c:	b480      	push	{r7}
 801384e:	b083      	sub	sp, #12
 8013850:	af00      	add	r7, sp, #0
 8013852:	6078      	str	r0, [r7, #4]
    return crashOnFail_;
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	7d9b      	ldrb	r3, [r3, #22]
}
 8013858:	4618      	mov	r0, r3
 801385a:	370c      	adds	r7, #12
 801385c:	46bd      	mov	sp, r7
 801385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013862:	4770      	bx	lr

08013864 <_ZNK20CommandLineArguments11isShufflingEv>:

bool CommandLineArguments::isShuffling() const
{
 8013864:	b480      	push	{r7}
 8013866:	b083      	sub	sp, #12
 8013868:	af00      	add	r7, sp, #0
 801386a:	6078      	str	r0, [r7, #4]
    return shuffling_;
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	7ddb      	ldrb	r3, [r3, #23]
}
 8013870:	4618      	mov	r0, r3
 8013872:	370c      	adds	r7, #12
 8013874:	46bd      	mov	sp, r7
 8013876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801387a:	4770      	bx	lr

0801387c <_ZNK20CommandLineArguments14getShuffleSeedEv>:

size_t CommandLineArguments::getShuffleSeed() const
{
 801387c:	b480      	push	{r7}
 801387e:	b083      	sub	sp, #12
 8013880:	af00      	add	r7, sp, #0
 8013882:	6078      	str	r0, [r7, #4]
    return shuffleSeed_;
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	6a1b      	ldr	r3, [r3, #32]
}
 8013888:	4618      	mov	r0, r3
 801388a:	370c      	adds	r7, #12
 801388c:	46bd      	mov	sp, r7
 801388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013892:	4770      	bx	lr

08013894 <_ZNK20CommandLineArguments15getGroupFiltersEv>:

const TestFilter* CommandLineArguments::getGroupFilters() const
{
 8013894:	b480      	push	{r7}
 8013896:	b083      	sub	sp, #12
 8013898:	af00      	add	r7, sp, #0
 801389a:	6078      	str	r0, [r7, #4]
    return groupFilters_;
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80138a0:	4618      	mov	r0, r3
 80138a2:	370c      	adds	r7, #12
 80138a4:	46bd      	mov	sp, r7
 80138a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138aa:	4770      	bx	lr

080138ac <_ZNK20CommandLineArguments14getNameFiltersEv>:

const TestFilter* CommandLineArguments::getNameFilters() const
{
 80138ac:	b480      	push	{r7}
 80138ae:	b083      	sub	sp, #12
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	6078      	str	r0, [r7, #4]
    return nameFilters_;
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80138b8:	4618      	mov	r0, r3
 80138ba:	370c      	adds	r7, #12
 80138bc:	46bd      	mov	sp, r7
 80138be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c2:	4770      	bx	lr

080138c4 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>:

void CommandLineArguments::setRepeatCount(int ac, const char *const *av, int& i)
{
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b086      	sub	sp, #24
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	60f8      	str	r0, [r7, #12]
 80138cc:	60b9      	str	r1, [r7, #8]
 80138ce:	607a      	str	r2, [r7, #4]
 80138d0:	603b      	str	r3, [r7, #0]
    repeat_ = 0;
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	2200      	movs	r2, #0
 80138d6:	61da      	str	r2, [r3, #28]

    SimpleString repeatParameter(av[i]);
 80138d8:	683b      	ldr	r3, [r7, #0]
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	009b      	lsls	r3, r3, #2
 80138de:	687a      	ldr	r2, [r7, #4]
 80138e0:	4413      	add	r3, r2
 80138e2:	681a      	ldr	r2, [r3, #0]
 80138e4:	f107 0310 	add.w	r3, r7, #16
 80138e8:	4611      	mov	r1, r2
 80138ea:	4618      	mov	r0, r3
 80138ec:	f7f7 fa3f 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
    if (repeatParameter.size() > 2) repeat_ = (size_t) (SimpleString::AtoI(av[i] + 2));
 80138f0:	f107 0310 	add.w	r3, r7, #16
 80138f4:	4618      	mov	r0, r3
 80138f6:	f7f7 fdd1 	bl	800b49c <_ZNK12SimpleString4sizeEv>
 80138fa:	4603      	mov	r3, r0
 80138fc:	2b02      	cmp	r3, #2
 80138fe:	bf8c      	ite	hi
 8013900:	2301      	movhi	r3, #1
 8013902:	2300      	movls	r3, #0
 8013904:	b2db      	uxtb	r3, r3
 8013906:	2b00      	cmp	r3, #0
 8013908:	d00e      	beq.n	8013928 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x64>
 801390a:	683b      	ldr	r3, [r7, #0]
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	009b      	lsls	r3, r3, #2
 8013910:	687a      	ldr	r2, [r7, #4]
 8013912:	4413      	add	r3, r2
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	3302      	adds	r3, #2
 8013918:	4618      	mov	r0, r3
 801391a:	f7f7 f824 	bl	800a966 <_ZN12SimpleString4AtoIEPKc>
 801391e:	4603      	mov	r3, r0
 8013920:	461a      	mov	r2, r3
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	61da      	str	r2, [r3, #28]
 8013926:	e01c      	b.n	8013962 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
    else if (i + 1 < ac) {
 8013928:	683b      	ldr	r3, [r7, #0]
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	3301      	adds	r3, #1
 801392e:	68ba      	ldr	r2, [r7, #8]
 8013930:	429a      	cmp	r2, r3
 8013932:	dd16      	ble.n	8013962 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
        repeat_ = (size_t) (SimpleString::AtoI(av[i + 1]));
 8013934:	683b      	ldr	r3, [r7, #0]
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	3301      	adds	r3, #1
 801393a:	009b      	lsls	r3, r3, #2
 801393c:	687a      	ldr	r2, [r7, #4]
 801393e:	4413      	add	r3, r2
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	4618      	mov	r0, r3
 8013944:	f7f7 f80f 	bl	800a966 <_ZN12SimpleString4AtoIEPKc>
 8013948:	4603      	mov	r3, r0
 801394a:	461a      	mov	r2, r3
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	61da      	str	r2, [r3, #28]
        if (repeat_ != 0) i++;
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	69db      	ldr	r3, [r3, #28]
 8013954:	2b00      	cmp	r3, #0
 8013956:	d004      	beq.n	8013962 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
 8013958:	683b      	ldr	r3, [r7, #0]
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	1c5a      	adds	r2, r3, #1
 801395e:	683b      	ldr	r3, [r7, #0]
 8013960:	601a      	str	r2, [r3, #0]
    }

    if (0 == repeat_) repeat_ = 2;
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	69db      	ldr	r3, [r3, #28]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d102      	bne.n	8013970 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0xac>
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	2202      	movs	r2, #2
 801396e:	61da      	str	r2, [r3, #28]
    SimpleString repeatParameter(av[i]);
 8013970:	f107 0310 	add.w	r3, r7, #16
 8013974:	4618      	mov	r0, r3
 8013976:	f7f7 fdb2 	bl	800b4de <_ZN12SimpleStringD1Ev>

}
 801397a:	bf00      	nop
 801397c:	3718      	adds	r7, #24
 801397e:	46bd      	mov	sp, r7
 8013980:	bd80      	pop	{r7, pc}
	...

08013984 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>:

bool CommandLineArguments::setShuffle(int ac, const char * const *av, int& i)
{
 8013984:	b590      	push	{r4, r7, lr}
 8013986:	b089      	sub	sp, #36	; 0x24
 8013988:	af00      	add	r7, sp, #0
 801398a:	60f8      	str	r0, [r7, #12]
 801398c:	60b9      	str	r1, [r7, #8]
 801398e:	607a      	str	r2, [r7, #4]
 8013990:	603b      	str	r3, [r7, #0]
    shuffling_ = true;
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	2201      	movs	r2, #1
 8013996:	75da      	strb	r2, [r3, #23]
    shuffleSeed_ = (unsigned int)GetPlatformSpecificTimeInMillis();
 8013998:	4b34      	ldr	r3, [pc, #208]	; (8013a6c <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xe8>)
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	4798      	blx	r3
 801399e:	4603      	mov	r3, r0
 80139a0:	461a      	mov	r2, r3
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	621a      	str	r2, [r3, #32]
    if (shuffleSeed_ == 0) shuffleSeed_++;
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	6a1b      	ldr	r3, [r3, #32]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d104      	bne.n	80139b8 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x34>
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	6a1b      	ldr	r3, [r3, #32]
 80139b2:	1c5a      	adds	r2, r3, #1
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	621a      	str	r2, [r3, #32]

    SimpleString shuffleParameter = av[i];
 80139b8:	683b      	ldr	r3, [r7, #0]
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	009b      	lsls	r3, r3, #2
 80139be:	687a      	ldr	r2, [r7, #4]
 80139c0:	4413      	add	r3, r2
 80139c2:	681a      	ldr	r2, [r3, #0]
 80139c4:	f107 0314 	add.w	r3, r7, #20
 80139c8:	4611      	mov	r1, r2
 80139ca:	4618      	mov	r0, r3
 80139cc:	f7f7 f9cf 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
    if (shuffleParameter.size() > 2) {
 80139d0:	f107 0314 	add.w	r3, r7, #20
 80139d4:	4618      	mov	r0, r3
 80139d6:	f7f7 fd61 	bl	800b49c <_ZNK12SimpleString4sizeEv>
 80139da:	4603      	mov	r3, r0
 80139dc:	2b02      	cmp	r3, #2
 80139de:	bf8c      	ite	hi
 80139e0:	2301      	movhi	r3, #1
 80139e2:	2300      	movls	r3, #0
 80139e4:	b2db      	uxtb	r3, r3
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d010      	beq.n	8013a0c <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x88>
        shufflingPreSeeded_ = true;
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	2201      	movs	r2, #1
 80139ee:	761a      	strb	r2, [r3, #24]
        shuffleSeed_ = SimpleString::AtoU(av[i] + 2);
 80139f0:	683b      	ldr	r3, [r7, #0]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	009b      	lsls	r3, r3, #2
 80139f6:	687a      	ldr	r2, [r7, #4]
 80139f8:	4413      	add	r3, r2
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	3302      	adds	r3, #2
 80139fe:	4618      	mov	r0, r3
 8013a00:	f7f6 ff78 	bl	800a8f4 <_ZN12SimpleString4AtoUEPKc>
 8013a04:	4602      	mov	r2, r0
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	621a      	str	r2, [r3, #32]
 8013a0a:	e01e      	b.n	8013a4a <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
    } else if (i + 1 < ac) {
 8013a0c:	683b      	ldr	r3, [r7, #0]
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	3301      	adds	r3, #1
 8013a12:	68ba      	ldr	r2, [r7, #8]
 8013a14:	429a      	cmp	r2, r3
 8013a16:	dd18      	ble.n	8013a4a <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        unsigned int parsedParameter = SimpleString::AtoU(av[i + 1]);
 8013a18:	683b      	ldr	r3, [r7, #0]
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	3301      	adds	r3, #1
 8013a1e:	009b      	lsls	r3, r3, #2
 8013a20:	687a      	ldr	r2, [r7, #4]
 8013a22:	4413      	add	r3, r2
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	4618      	mov	r0, r3
 8013a28:	f7f6 ff64 	bl	800a8f4 <_ZN12SimpleString4AtoUEPKc>
 8013a2c:	61f8      	str	r0, [r7, #28]
        if (parsedParameter != 0)
 8013a2e:	69fb      	ldr	r3, [r7, #28]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d00a      	beq.n	8013a4a <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        {
            shufflingPreSeeded_ = true;
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	2201      	movs	r2, #1
 8013a38:	761a      	strb	r2, [r3, #24]
            shuffleSeed_ = parsedParameter;
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	69fa      	ldr	r2, [r7, #28]
 8013a3e:	621a      	str	r2, [r3, #32]
            i++;
 8013a40:	683b      	ldr	r3, [r7, #0]
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	1c5a      	adds	r2, r3, #1
 8013a46:	683b      	ldr	r3, [r7, #0]
 8013a48:	601a      	str	r2, [r3, #0]
        }
    }
    return (shuffleSeed_ != 0);
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	6a1b      	ldr	r3, [r3, #32]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	bf14      	ite	ne
 8013a52:	2301      	movne	r3, #1
 8013a54:	2300      	moveq	r3, #0
 8013a56:	b2dc      	uxtb	r4, r3
    SimpleString shuffleParameter = av[i];
 8013a58:	f107 0314 	add.w	r3, r7, #20
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	f7f7 fd3e 	bl	800b4de <_ZN12SimpleStringD1Ev>
    return (shuffleSeed_ != 0);
 8013a62:	4623      	mov	r3, r4
}
 8013a64:	4618      	mov	r0, r3
 8013a66:	3724      	adds	r7, #36	; 0x24
 8013a68:	46bd      	mov	sp, r7
 8013a6a:	bd90      	pop	{r4, r7, pc}
 8013a6c:	200000a8 	.word	0x200000a8

08013a70 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>:

SimpleString CommandLineArguments::getParameterField(int ac, const char * const *av, int& i, const SimpleString& parameterName)
{
 8013a70:	b580      	push	{r7, lr}
 8013a72:	b088      	sub	sp, #32
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	60f8      	str	r0, [r7, #12]
 8013a78:	60b9      	str	r1, [r7, #8]
 8013a7a:	607a      	str	r2, [r7, #4]
 8013a7c:	603b      	str	r3, [r7, #0]
    size_t parameterLength = parameterName.size();
 8013a7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013a80:	f7f7 fd0c 	bl	800b49c <_ZNK12SimpleString4sizeEv>
 8013a84:	61f8      	str	r0, [r7, #28]
    SimpleString parameter(av[i]);
 8013a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	009b      	lsls	r3, r3, #2
 8013a8c:	683a      	ldr	r2, [r7, #0]
 8013a8e:	4413      	add	r3, r2
 8013a90:	681a      	ldr	r2, [r3, #0]
 8013a92:	f107 0314 	add.w	r3, r7, #20
 8013a96:	4611      	mov	r1, r2
 8013a98:	4618      	mov	r0, r3
 8013a9a:	f7f7 f968 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
    if (parameter.size() >  parameterLength) return av[i] + parameterLength;
 8013a9e:	f107 0314 	add.w	r3, r7, #20
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	f7f7 fcfa 	bl	800b49c <_ZNK12SimpleString4sizeEv>
 8013aa8:	4602      	mov	r2, r0
 8013aaa:	69fb      	ldr	r3, [r7, #28]
 8013aac:	4293      	cmp	r3, r2
 8013aae:	bf34      	ite	cc
 8013ab0:	2301      	movcc	r3, #1
 8013ab2:	2300      	movcs	r3, #0
 8013ab4:	b2db      	uxtb	r3, r3
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d00c      	beq.n	8013ad4 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x64>
 8013aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	009b      	lsls	r3, r3, #2
 8013ac0:	683a      	ldr	r2, [r7, #0]
 8013ac2:	4413      	add	r3, r2
 8013ac4:	681a      	ldr	r2, [r3, #0]
 8013ac6:	69fb      	ldr	r3, [r7, #28]
 8013ac8:	4413      	add	r3, r2
 8013aca:	4619      	mov	r1, r3
 8013acc:	68f8      	ldr	r0, [r7, #12]
 8013ace:	f7f7 f94e 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8013ad2:	e019      	b.n	8013b08 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    else if (i + 1 < ac) return av[++i];
 8013ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	3301      	adds	r3, #1
 8013ada:	687a      	ldr	r2, [r7, #4]
 8013adc:	429a      	cmp	r2, r3
 8013ade:	dd0f      	ble.n	8013b00 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x90>
 8013ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	1c5a      	adds	r2, r3, #1
 8013ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ae8:	601a      	str	r2, [r3, #0]
 8013aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	009b      	lsls	r3, r3, #2
 8013af0:	683a      	ldr	r2, [r7, #0]
 8013af2:	4413      	add	r3, r2
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	4619      	mov	r1, r3
 8013af8:	68f8      	ldr	r0, [r7, #12]
 8013afa:	f7f7 f938 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8013afe:	e003      	b.n	8013b08 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    return "";
 8013b00:	4906      	ldr	r1, [pc, #24]	; (8013b1c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0xac>)
 8013b02:	68f8      	ldr	r0, [r7, #12]
 8013b04:	f7f7 f933 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
    SimpleString parameter(av[i]);
 8013b08:	f107 0314 	add.w	r3, r7, #20
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	f7f7 fce6 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 8013b12:	68f8      	ldr	r0, [r7, #12]
 8013b14:	3720      	adds	r7, #32
 8013b16:	46bd      	mov	sp, r7
 8013b18:	bd80      	pop	{r7, pc}
 8013b1a:	bf00      	nop
 8013b1c:	08022f08 	.word	0x08022f08

08013b20 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>:

void CommandLineArguments::addGroupFilter(int ac, const char *const *av, int& i)
{
 8013b20:	b5b0      	push	{r4, r5, r7, lr}
 8013b22:	b08c      	sub	sp, #48	; 0x30
 8013b24:	af02      	add	r7, sp, #8
 8013b26:	60f8      	str	r0, [r7, #12]
 8013b28:	60b9      	str	r1, [r7, #8]
 8013b2a:	607a      	str	r2, [r7, #4]
 8013b2c:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-g"));
 8013b2e:	f107 031c 	add.w	r3, r7, #28
 8013b32:	491a      	ldr	r1, [pc, #104]	; (8013b9c <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x7c>)
 8013b34:	4618      	mov	r0, r3
 8013b36:	f7f7 f91a 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8013b3a:	f107 0014 	add.w	r0, r7, #20
 8013b3e:	f107 031c 	add.w	r3, r7, #28
 8013b42:	9301      	str	r3, [sp, #4]
 8013b44:	683b      	ldr	r3, [r7, #0]
 8013b46:	9300      	str	r3, [sp, #0]
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	68ba      	ldr	r2, [r7, #8]
 8013b4c:	68f9      	ldr	r1, [r7, #12]
 8013b4e:	f7ff ff8f 	bl	8013a70 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013b52:	f107 0514 	add.w	r5, r7, #20
 8013b56:	f44f 7289 	mov.w	r2, #274	; 0x112
 8013b5a:	4911      	ldr	r1, [pc, #68]	; (8013ba0 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x80>)
 8013b5c:	2010      	movs	r0, #16
 8013b5e:	f7f4 fd43 	bl	80085e8 <_ZnwjPKci>
 8013b62:	4604      	mov	r4, r0
 8013b64:	4629      	mov	r1, r5
 8013b66:	4620      	mov	r0, r4
 8013b68:	f009 ff40 	bl	801d9ec <_ZN10TestFilterC1ERK12SimpleString>
 8013b6c:	627c      	str	r4, [r7, #36]	; 0x24
 8013b6e:	f107 0314 	add.w	r3, r7, #20
 8013b72:	4618      	mov	r0, r3
 8013b74:	f7f7 fcb3 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8013b78:	f107 031c 	add.w	r3, r7, #28
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	f7f7 fcae 	bl	800b4de <_ZN12SimpleStringD1Ev>
    groupFilters_ = groupFilter->add(groupFilters_);
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b86:	4619      	mov	r1, r3
 8013b88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013b8a:	f009 ff4f 	bl	801da2c <_ZN10TestFilter3addEPS_>
 8013b8e:	4602      	mov	r2, r0
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	625a      	str	r2, [r3, #36]	; 0x24
}
 8013b94:	bf00      	nop
 8013b96:	3728      	adds	r7, #40	; 0x28
 8013b98:	46bd      	mov	sp, r7
 8013b9a:	bdb0      	pop	{r4, r5, r7, pc}
 8013b9c:	08022f3c 	.word	0x08022f3c
 8013ba0:	080238d0 	.word	0x080238d0

08013ba4 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>:

bool CommandLineArguments::addGroupDotNameFilter(int ac, const char *const *av, int& i)
{
 8013ba4:	b5b0      	push	{r4, r5, r7, lr}
 8013ba6:	b092      	sub	sp, #72	; 0x48
 8013ba8:	af02      	add	r7, sp, #8
 8013baa:	60f8      	str	r0, [r7, #12]
 8013bac:	60b9      	str	r1, [r7, #8]
 8013bae:	607a      	str	r2, [r7, #4]
 8013bb0:	603b      	str	r3, [r7, #0]
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 8013bb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013bb6:	494e      	ldr	r1, [pc, #312]	; (8013cf0 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x14c>)
 8013bb8:	4618      	mov	r0, r3
 8013bba:	f7f7 f8d8 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8013bbe:	f107 0020 	add.w	r0, r7, #32
 8013bc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013bc6:	9301      	str	r3, [sp, #4]
 8013bc8:	683b      	ldr	r3, [r7, #0]
 8013bca:	9300      	str	r3, [sp, #0]
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	68ba      	ldr	r2, [r7, #8]
 8013bd0:	68f9      	ldr	r1, [r7, #12]
 8013bd2:	f7ff ff4d 	bl	8013a70 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013bd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013bda:	4618      	mov	r0, r3
 8013bdc:	f7f7 fc7f 	bl	800b4de <_ZN12SimpleStringD1Ev>
    SimpleStringCollection collection;
 8013be0:	f107 0310 	add.w	r3, r7, #16
 8013be4:	4618      	mov	r0, r3
 8013be6:	f7f8 fb8f 	bl	800c308 <_ZN22SimpleStringCollectionC1Ev>
    groupDotName.split(".", collection);
 8013bea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013bee:	4941      	ldr	r1, [pc, #260]	; (8013cf4 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x150>)
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	f7f7 f8bc 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8013bf6:	f107 0210 	add.w	r2, r7, #16
 8013bfa:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8013bfe:	f107 0320 	add.w	r3, r7, #32
 8013c02:	4618      	mov	r0, r3
 8013c04:	f7f7 fa1f 	bl	800b046 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>
 8013c08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	f7f7 fc66 	bl	800b4de <_ZN12SimpleStringD1Ev>

    if (collection.size() != 2) return false;
 8013c12:	f107 0310 	add.w	r3, r7, #16
 8013c16:	4618      	mov	r0, r3
 8013c18:	f7f8 fc1b 	bl	800c452 <_ZNK22SimpleStringCollection4sizeEv>
 8013c1c:	4603      	mov	r3, r0
 8013c1e:	2b02      	cmp	r3, #2
 8013c20:	bf14      	ite	ne
 8013c22:	2301      	movne	r3, #1
 8013c24:	2300      	moveq	r3, #0
 8013c26:	b2db      	uxtb	r3, r3
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d001      	beq.n	8013c30 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x8c>
 8013c2c:	2400      	movs	r4, #0
 8013c2e:	e04f      	b.n	8013cd0 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x12c>

    groupFilters_ = (new TestFilter(collection[0].subString(0, collection[0].size()-1)))->add(groupFilters_);
 8013c30:	f107 0310 	add.w	r3, r7, #16
 8013c34:	2100      	movs	r1, #0
 8013c36:	4618      	mov	r0, r3
 8013c38:	f7f8 fc18 	bl	800c46c <_ZN22SimpleStringCollectionixEj>
 8013c3c:	4604      	mov	r4, r0
 8013c3e:	f107 0310 	add.w	r3, r7, #16
 8013c42:	2100      	movs	r1, #0
 8013c44:	4618      	mov	r0, r3
 8013c46:	f7f8 fc11 	bl	800c46c <_ZN22SimpleStringCollectionixEj>
 8013c4a:	4603      	mov	r3, r0
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	f7f7 fc25 	bl	800b49c <_ZNK12SimpleString4sizeEv>
 8013c52:	4603      	mov	r3, r0
 8013c54:	3b01      	subs	r3, #1
 8013c56:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8013c5a:	2200      	movs	r2, #0
 8013c5c:	4621      	mov	r1, r4
 8013c5e:	f7f7 fd47 	bl	800b6f0 <_ZNK12SimpleString9subStringEjj>
 8013c62:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8013c66:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8013c6a:	4923      	ldr	r1, [pc, #140]	; (8013cf8 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8013c6c:	2010      	movs	r0, #16
 8013c6e:	f7f4 fcbb 	bl	80085e8 <_ZnwjPKci>
 8013c72:	4604      	mov	r4, r0
 8013c74:	4629      	mov	r1, r5
 8013c76:	4620      	mov	r0, r4
 8013c78:	f009 feb8 	bl	801d9ec <_ZN10TestFilterC1ERK12SimpleString>
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c80:	4619      	mov	r1, r3
 8013c82:	4620      	mov	r0, r4
 8013c84:	f009 fed2 	bl	801da2c <_ZN10TestFilter3addEPS_>
 8013c88:	4602      	mov	r2, r0
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	625a      	str	r2, [r3, #36]	; 0x24
 8013c8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013c92:	4618      	mov	r0, r3
 8013c94:	f7f7 fc23 	bl	800b4de <_ZN12SimpleStringD1Ev>
    nameFilters_ = (new TestFilter(collection[1]))->add(nameFilters_);
 8013c98:	f107 0310 	add.w	r3, r7, #16
 8013c9c:	2101      	movs	r1, #1
 8013c9e:	4618      	mov	r0, r3
 8013ca0:	f7f8 fbe4 	bl	800c46c <_ZN22SimpleStringCollectionixEj>
 8013ca4:	4605      	mov	r5, r0
 8013ca6:	f240 121f 	movw	r2, #287	; 0x11f
 8013caa:	4913      	ldr	r1, [pc, #76]	; (8013cf8 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8013cac:	2010      	movs	r0, #16
 8013cae:	f7f4 fc9b 	bl	80085e8 <_ZnwjPKci>
 8013cb2:	4604      	mov	r4, r0
 8013cb4:	4629      	mov	r1, r5
 8013cb6:	4620      	mov	r0, r4
 8013cb8:	f009 fe98 	bl	801d9ec <_ZN10TestFilterC1ERK12SimpleString>
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013cc0:	4619      	mov	r1, r3
 8013cc2:	4620      	mov	r0, r4
 8013cc4:	f009 feb2 	bl	801da2c <_ZN10TestFilter3addEPS_>
 8013cc8:	4602      	mov	r2, r0
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 8013cce:	2401      	movs	r4, #1
    SimpleStringCollection collection;
 8013cd0:	f107 0310 	add.w	r3, r7, #16
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	f7f8 fb8b 	bl	800c3f0 <_ZN22SimpleStringCollectionD1Ev>
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 8013cda:	f107 0320 	add.w	r3, r7, #32
 8013cde:	4618      	mov	r0, r3
 8013ce0:	f7f7 fbfd 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8013ce4:	4623      	mov	r3, r4
}
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	3740      	adds	r7, #64	; 0x40
 8013cea:	46bd      	mov	sp, r7
 8013cec:	bdb0      	pop	{r4, r5, r7, pc}
 8013cee:	bf00      	nop
 8013cf0:	08022f40 	.word	0x08022f40
 8013cf4:	080238f0 	.word	0x080238f0
 8013cf8:	080238d0 	.word	0x080238d0

08013cfc <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8013cfc:	b5b0      	push	{r4, r5, r7, lr}
 8013cfe:	b08c      	sub	sp, #48	; 0x30
 8013d00:	af02      	add	r7, sp, #8
 8013d02:	60f8      	str	r0, [r7, #12]
 8013d04:	60b9      	str	r1, [r7, #8]
 8013d06:	607a      	str	r2, [r7, #4]
 8013d08:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-sg"));
 8013d0a:	f107 031c 	add.w	r3, r7, #28
 8013d0e:	491c      	ldr	r1, [pc, #112]	; (8013d80 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x84>)
 8013d10:	4618      	mov	r0, r3
 8013d12:	f7f7 f82c 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8013d16:	f107 0014 	add.w	r0, r7, #20
 8013d1a:	f107 031c 	add.w	r3, r7, #28
 8013d1e:	9301      	str	r3, [sp, #4]
 8013d20:	683b      	ldr	r3, [r7, #0]
 8013d22:	9300      	str	r3, [sp, #0]
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	68ba      	ldr	r2, [r7, #8]
 8013d28:	68f9      	ldr	r1, [r7, #12]
 8013d2a:	f7ff fea1 	bl	8013a70 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013d2e:	f107 0514 	add.w	r5, r7, #20
 8013d32:	f240 1225 	movw	r2, #293	; 0x125
 8013d36:	4913      	ldr	r1, [pc, #76]	; (8013d84 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x88>)
 8013d38:	2010      	movs	r0, #16
 8013d3a:	f7f4 fc55 	bl	80085e8 <_ZnwjPKci>
 8013d3e:	4604      	mov	r4, r0
 8013d40:	4629      	mov	r1, r5
 8013d42:	4620      	mov	r0, r4
 8013d44:	f009 fe52 	bl	801d9ec <_ZN10TestFilterC1ERK12SimpleString>
 8013d48:	627c      	str	r4, [r7, #36]	; 0x24
 8013d4a:	f107 0314 	add.w	r3, r7, #20
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f7f7 fbc5 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8013d54:	f107 031c 	add.w	r3, r7, #28
 8013d58:	4618      	mov	r0, r3
 8013d5a:	f7f7 fbc0 	bl	800b4de <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8013d5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013d60:	f009 fe7f 	bl	801da62 <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d68:	4619      	mov	r1, r3
 8013d6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013d6c:	f009 fe5e 	bl	801da2c <_ZN10TestFilter3addEPS_>
 8013d70:	4602      	mov	r2, r0
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	625a      	str	r2, [r3, #36]	; 0x24
}
 8013d76:	bf00      	nop
 8013d78:	3728      	adds	r7, #40	; 0x28
 8013d7a:	46bd      	mov	sp, r7
 8013d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8013d7e:	bf00      	nop
 8013d80:	08022f44 	.word	0x08022f44
 8013d84:	080238d0 	.word	0x080238d0

08013d88 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeGroupFilter(int ac, const char *const *av, int& i)
{
 8013d88:	b5b0      	push	{r4, r5, r7, lr}
 8013d8a:	b08c      	sub	sp, #48	; 0x30
 8013d8c:	af02      	add	r7, sp, #8
 8013d8e:	60f8      	str	r0, [r7, #12]
 8013d90:	60b9      	str	r1, [r7, #8]
 8013d92:	607a      	str	r2, [r7, #4]
 8013d94:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xg"));
 8013d96:	f107 031c 	add.w	r3, r7, #28
 8013d9a:	491c      	ldr	r1, [pc, #112]	; (8013e0c <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x84>)
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	f7f6 ffe6 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8013da2:	f107 0014 	add.w	r0, r7, #20
 8013da6:	f107 031c 	add.w	r3, r7, #28
 8013daa:	9301      	str	r3, [sp, #4]
 8013dac:	683b      	ldr	r3, [r7, #0]
 8013dae:	9300      	str	r3, [sp, #0]
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	68ba      	ldr	r2, [r7, #8]
 8013db4:	68f9      	ldr	r1, [r7, #12]
 8013db6:	f7ff fe5b 	bl	8013a70 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013dba:	f107 0514 	add.w	r5, r7, #20
 8013dbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013dc2:	4913      	ldr	r1, [pc, #76]	; (8013e10 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x88>)
 8013dc4:	2010      	movs	r0, #16
 8013dc6:	f7f4 fc0f 	bl	80085e8 <_ZnwjPKci>
 8013dca:	4604      	mov	r4, r0
 8013dcc:	4629      	mov	r1, r5
 8013dce:	4620      	mov	r0, r4
 8013dd0:	f009 fe0c 	bl	801d9ec <_ZN10TestFilterC1ERK12SimpleString>
 8013dd4:	627c      	str	r4, [r7, #36]	; 0x24
 8013dd6:	f107 0314 	add.w	r3, r7, #20
 8013dda:	4618      	mov	r0, r3
 8013ddc:	f7f7 fb7f 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8013de0:	f107 031c 	add.w	r3, r7, #28
 8013de4:	4618      	mov	r0, r3
 8013de6:	f7f7 fb7a 	bl	800b4de <_ZN12SimpleStringD1Ev>
    groupFilter->invertMatching();
 8013dea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013dec:	f009 fe46 	bl	801da7c <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013df4:	4619      	mov	r1, r3
 8013df6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013df8:	f009 fe18 	bl	801da2c <_ZN10TestFilter3addEPS_>
 8013dfc:	4602      	mov	r2, r0
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	625a      	str	r2, [r3, #36]	; 0x24
}
 8013e02:	bf00      	nop
 8013e04:	3728      	adds	r7, #40	; 0x28
 8013e06:	46bd      	mov	sp, r7
 8013e08:	bdb0      	pop	{r4, r5, r7, pc}
 8013e0a:	bf00      	nop
 8013e0c:	08022f48 	.word	0x08022f48
 8013e10:	080238d0 	.word	0x080238d0

08013e14 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8013e14:	b5b0      	push	{r4, r5, r7, lr}
 8013e16:	b08c      	sub	sp, #48	; 0x30
 8013e18:	af02      	add	r7, sp, #8
 8013e1a:	60f8      	str	r0, [r7, #12]
 8013e1c:	60b9      	str	r1, [r7, #8]
 8013e1e:	607a      	str	r2, [r7, #4]
 8013e20:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xsg"));
 8013e22:	f107 031c 	add.w	r3, r7, #28
 8013e26:	491d      	ldr	r1, [pc, #116]	; (8013e9c <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x88>)
 8013e28:	4618      	mov	r0, r3
 8013e2a:	f7f6 ffa0 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8013e2e:	f107 0014 	add.w	r0, r7, #20
 8013e32:	f107 031c 	add.w	r3, r7, #28
 8013e36:	9301      	str	r3, [sp, #4]
 8013e38:	683b      	ldr	r3, [r7, #0]
 8013e3a:	9300      	str	r3, [sp, #0]
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	68ba      	ldr	r2, [r7, #8]
 8013e40:	68f9      	ldr	r1, [r7, #12]
 8013e42:	f7ff fe15 	bl	8013a70 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013e46:	f107 0514 	add.w	r5, r7, #20
 8013e4a:	f240 1233 	movw	r2, #307	; 0x133
 8013e4e:	4914      	ldr	r1, [pc, #80]	; (8013ea0 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x8c>)
 8013e50:	2010      	movs	r0, #16
 8013e52:	f7f4 fbc9 	bl	80085e8 <_ZnwjPKci>
 8013e56:	4604      	mov	r4, r0
 8013e58:	4629      	mov	r1, r5
 8013e5a:	4620      	mov	r0, r4
 8013e5c:	f009 fdc6 	bl	801d9ec <_ZN10TestFilterC1ERK12SimpleString>
 8013e60:	627c      	str	r4, [r7, #36]	; 0x24
 8013e62:	f107 0314 	add.w	r3, r7, #20
 8013e66:	4618      	mov	r0, r3
 8013e68:	f7f7 fb39 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8013e6c:	f107 031c 	add.w	r3, r7, #28
 8013e70:	4618      	mov	r0, r3
 8013e72:	f7f7 fb34 	bl	800b4de <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8013e76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e78:	f009 fdf3 	bl	801da62 <_ZN10TestFilter14strictMatchingEv>
    groupFilter->invertMatching();
 8013e7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e7e:	f009 fdfd 	bl	801da7c <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e86:	4619      	mov	r1, r3
 8013e88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e8a:	f009 fdcf 	bl	801da2c <_ZN10TestFilter3addEPS_>
 8013e8e:	4602      	mov	r2, r0
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	625a      	str	r2, [r3, #36]	; 0x24
}
 8013e94:	bf00      	nop
 8013e96:	3728      	adds	r7, #40	; 0x28
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	bdb0      	pop	{r4, r5, r7, pc}
 8013e9c:	08022f4c 	.word	0x08022f4c
 8013ea0:	080238d0 	.word	0x080238d0

08013ea4 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>:

void CommandLineArguments::addNameFilter(int ac, const char *const *av, int& i)
{
 8013ea4:	b5b0      	push	{r4, r5, r7, lr}
 8013ea6:	b08c      	sub	sp, #48	; 0x30
 8013ea8:	af02      	add	r7, sp, #8
 8013eaa:	60f8      	str	r0, [r7, #12]
 8013eac:	60b9      	str	r1, [r7, #8]
 8013eae:	607a      	str	r2, [r7, #4]
 8013eb0:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, i, "-n"));
 8013eb2:	f107 031c 	add.w	r3, r7, #28
 8013eb6:	491a      	ldr	r1, [pc, #104]	; (8013f20 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x7c>)
 8013eb8:	4618      	mov	r0, r3
 8013eba:	f7f6 ff58 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8013ebe:	f107 0014 	add.w	r0, r7, #20
 8013ec2:	f107 031c 	add.w	r3, r7, #28
 8013ec6:	9301      	str	r3, [sp, #4]
 8013ec8:	683b      	ldr	r3, [r7, #0]
 8013eca:	9300      	str	r3, [sp, #0]
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	68ba      	ldr	r2, [r7, #8]
 8013ed0:	68f9      	ldr	r1, [r7, #12]
 8013ed2:	f7ff fdcd 	bl	8013a70 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013ed6:	f107 0514 	add.w	r5, r7, #20
 8013eda:	f240 123b 	movw	r2, #315	; 0x13b
 8013ede:	4911      	ldr	r1, [pc, #68]	; (8013f24 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x80>)
 8013ee0:	2010      	movs	r0, #16
 8013ee2:	f7f4 fb81 	bl	80085e8 <_ZnwjPKci>
 8013ee6:	4604      	mov	r4, r0
 8013ee8:	4629      	mov	r1, r5
 8013eea:	4620      	mov	r0, r4
 8013eec:	f009 fd7e 	bl	801d9ec <_ZN10TestFilterC1ERK12SimpleString>
 8013ef0:	627c      	str	r4, [r7, #36]	; 0x24
 8013ef2:	f107 0314 	add.w	r3, r7, #20
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	f7f7 faf1 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8013efc:	f107 031c 	add.w	r3, r7, #28
 8013f00:	4618      	mov	r0, r3
 8013f02:	f7f7 faec 	bl	800b4de <_ZN12SimpleStringD1Ev>
    nameFilters_ = nameFilter->add(nameFilters_);
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f0a:	4619      	mov	r1, r3
 8013f0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013f0e:	f009 fd8d 	bl	801da2c <_ZN10TestFilter3addEPS_>
 8013f12:	4602      	mov	r2, r0
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8013f18:	bf00      	nop
 8013f1a:	3728      	adds	r7, #40	; 0x28
 8013f1c:	46bd      	mov	sp, r7
 8013f1e:	bdb0      	pop	{r4, r5, r7, pc}
 8013f20:	08022f54 	.word	0x08022f54
 8013f24:	080238d0 	.word	0x080238d0

08013f28 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addStrictNameFilter(int ac, const char *const *av, int& index)
{
 8013f28:	b5b0      	push	{r4, r5, r7, lr}
 8013f2a:	b08c      	sub	sp, #48	; 0x30
 8013f2c:	af02      	add	r7, sp, #8
 8013f2e:	60f8      	str	r0, [r7, #12]
 8013f30:	60b9      	str	r1, [r7, #8]
 8013f32:	607a      	str	r2, [r7, #4]
 8013f34:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-sn"));
 8013f36:	f107 031c 	add.w	r3, r7, #28
 8013f3a:	491c      	ldr	r1, [pc, #112]	; (8013fac <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x84>)
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	f7f6 ff16 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8013f42:	f107 0014 	add.w	r0, r7, #20
 8013f46:	f107 031c 	add.w	r3, r7, #28
 8013f4a:	9301      	str	r3, [sp, #4]
 8013f4c:	683b      	ldr	r3, [r7, #0]
 8013f4e:	9300      	str	r3, [sp, #0]
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	68ba      	ldr	r2, [r7, #8]
 8013f54:	68f9      	ldr	r1, [r7, #12]
 8013f56:	f7ff fd8b 	bl	8013a70 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013f5a:	f107 0514 	add.w	r5, r7, #20
 8013f5e:	f240 1241 	movw	r2, #321	; 0x141
 8013f62:	4913      	ldr	r1, [pc, #76]	; (8013fb0 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x88>)
 8013f64:	2010      	movs	r0, #16
 8013f66:	f7f4 fb3f 	bl	80085e8 <_ZnwjPKci>
 8013f6a:	4604      	mov	r4, r0
 8013f6c:	4629      	mov	r1, r5
 8013f6e:	4620      	mov	r0, r4
 8013f70:	f009 fd3c 	bl	801d9ec <_ZN10TestFilterC1ERK12SimpleString>
 8013f74:	627c      	str	r4, [r7, #36]	; 0x24
 8013f76:	f107 0314 	add.w	r3, r7, #20
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	f7f7 faaf 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8013f80:	f107 031c 	add.w	r3, r7, #28
 8013f84:	4618      	mov	r0, r3
 8013f86:	f7f7 faaa 	bl	800b4de <_ZN12SimpleStringD1Ev>
    nameFilter->strictMatching();
 8013f8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013f8c:	f009 fd69 	bl	801da62 <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f94:	4619      	mov	r1, r3
 8013f96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013f98:	f009 fd48 	bl	801da2c <_ZN10TestFilter3addEPS_>
 8013f9c:	4602      	mov	r2, r0
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8013fa2:	bf00      	nop
 8013fa4:	3728      	adds	r7, #40	; 0x28
 8013fa6:	46bd      	mov	sp, r7
 8013fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8013faa:	bf00      	nop
 8013fac:	08022f58 	.word	0x08022f58
 8013fb0:	080238d0 	.word	0x080238d0

08013fb4 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeNameFilter(int ac, const char *const *av, int& index)
{
 8013fb4:	b5b0      	push	{r4, r5, r7, lr}
 8013fb6:	b08c      	sub	sp, #48	; 0x30
 8013fb8:	af02      	add	r7, sp, #8
 8013fba:	60f8      	str	r0, [r7, #12]
 8013fbc:	60b9      	str	r1, [r7, #8]
 8013fbe:	607a      	str	r2, [r7, #4]
 8013fc0:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xn"));
 8013fc2:	f107 031c 	add.w	r3, r7, #28
 8013fc6:	491c      	ldr	r1, [pc, #112]	; (8014038 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x84>)
 8013fc8:	4618      	mov	r0, r3
 8013fca:	f7f6 fed0 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8013fce:	f107 0014 	add.w	r0, r7, #20
 8013fd2:	f107 031c 	add.w	r3, r7, #28
 8013fd6:	9301      	str	r3, [sp, #4]
 8013fd8:	683b      	ldr	r3, [r7, #0]
 8013fda:	9300      	str	r3, [sp, #0]
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	68ba      	ldr	r2, [r7, #8]
 8013fe0:	68f9      	ldr	r1, [r7, #12]
 8013fe2:	f7ff fd45 	bl	8013a70 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013fe6:	f107 0514 	add.w	r5, r7, #20
 8013fea:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8013fee:	4913      	ldr	r1, [pc, #76]	; (801403c <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x88>)
 8013ff0:	2010      	movs	r0, #16
 8013ff2:	f7f4 faf9 	bl	80085e8 <_ZnwjPKci>
 8013ff6:	4604      	mov	r4, r0
 8013ff8:	4629      	mov	r1, r5
 8013ffa:	4620      	mov	r0, r4
 8013ffc:	f009 fcf6 	bl	801d9ec <_ZN10TestFilterC1ERK12SimpleString>
 8014000:	627c      	str	r4, [r7, #36]	; 0x24
 8014002:	f107 0314 	add.w	r3, r7, #20
 8014006:	4618      	mov	r0, r3
 8014008:	f7f7 fa69 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801400c:	f107 031c 	add.w	r3, r7, #28
 8014010:	4618      	mov	r0, r3
 8014012:	f7f7 fa64 	bl	800b4de <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 8014016:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014018:	f009 fd30 	bl	801da7c <_ZN10TestFilter14invertMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014020:	4619      	mov	r1, r3
 8014022:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014024:	f009 fd02 	bl	801da2c <_ZN10TestFilter3addEPS_>
 8014028:	4602      	mov	r2, r0
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	629a      	str	r2, [r3, #40]	; 0x28
}
 801402e:	bf00      	nop
 8014030:	3728      	adds	r7, #40	; 0x28
 8014032:	46bd      	mov	sp, r7
 8014034:	bdb0      	pop	{r4, r5, r7, pc}
 8014036:	bf00      	nop
 8014038:	08022f5c 	.word	0x08022f5c
 801403c:	080238d0 	.word	0x080238d0

08014040 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictNameFilter(int ac, const char *const *av, int& index)
{
 8014040:	b5b0      	push	{r4, r5, r7, lr}
 8014042:	b08c      	sub	sp, #48	; 0x30
 8014044:	af02      	add	r7, sp, #8
 8014046:	60f8      	str	r0, [r7, #12]
 8014048:	60b9      	str	r1, [r7, #8]
 801404a:	607a      	str	r2, [r7, #4]
 801404c:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xsn"));
 801404e:	f107 031c 	add.w	r3, r7, #28
 8014052:	491d      	ldr	r1, [pc, #116]	; (80140c8 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x88>)
 8014054:	4618      	mov	r0, r3
 8014056:	f7f6 fe8a 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801405a:	f107 0014 	add.w	r0, r7, #20
 801405e:	f107 031c 	add.w	r3, r7, #28
 8014062:	9301      	str	r3, [sp, #4]
 8014064:	683b      	ldr	r3, [r7, #0]
 8014066:	9300      	str	r3, [sp, #0]
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	68ba      	ldr	r2, [r7, #8]
 801406c:	68f9      	ldr	r1, [r7, #12]
 801406e:	f7ff fcff 	bl	8013a70 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8014072:	f107 0514 	add.w	r5, r7, #20
 8014076:	f240 124f 	movw	r2, #335	; 0x14f
 801407a:	4914      	ldr	r1, [pc, #80]	; (80140cc <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x8c>)
 801407c:	2010      	movs	r0, #16
 801407e:	f7f4 fab3 	bl	80085e8 <_ZnwjPKci>
 8014082:	4604      	mov	r4, r0
 8014084:	4629      	mov	r1, r5
 8014086:	4620      	mov	r0, r4
 8014088:	f009 fcb0 	bl	801d9ec <_ZN10TestFilterC1ERK12SimpleString>
 801408c:	627c      	str	r4, [r7, #36]	; 0x24
 801408e:	f107 0314 	add.w	r3, r7, #20
 8014092:	4618      	mov	r0, r3
 8014094:	f7f7 fa23 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8014098:	f107 031c 	add.w	r3, r7, #28
 801409c:	4618      	mov	r0, r3
 801409e:	f7f7 fa1e 	bl	800b4de <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 80140a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80140a4:	f009 fcea 	bl	801da7c <_ZN10TestFilter14invertMatchingEv>
    nameFilter->strictMatching();
 80140a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80140aa:	f009 fcda 	bl	801da62 <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140b2:	4619      	mov	r1, r3
 80140b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80140b6:	f009 fcb9 	bl	801da2c <_ZN10TestFilter3addEPS_>
 80140ba:	4602      	mov	r2, r0
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80140c0:	bf00      	nop
 80140c2:	3728      	adds	r7, #40	; 0x28
 80140c4:	46bd      	mov	sp, r7
 80140c6:	bdb0      	pop	{r4, r5, r7, pc}
 80140c8:	08022f60 	.word	0x08022f60
 80140cc:	080238d0 	.word	0x080238d0

080140d0 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>:

void CommandLineArguments::addTestToRunBasedOnVerboseOutput(int ac, const char *const *av, int& index, const char* parameterName)
{
 80140d0:	b5b0      	push	{r4, r5, r7, lr}
 80140d2:	b092      	sub	sp, #72	; 0x48
 80140d4:	af02      	add	r7, sp, #8
 80140d6:	60f8      	str	r0, [r7, #12]
 80140d8:	60b9      	str	r1, [r7, #8]
 80140da:	607a      	str	r2, [r7, #4]
 80140dc:	603b      	str	r3, [r7, #0]
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 80140de:	f107 0320 	add.w	r3, r7, #32
 80140e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80140e4:	4618      	mov	r0, r3
 80140e6:	f7f6 fe42 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80140ea:	f107 0018 	add.w	r0, r7, #24
 80140ee:	f107 0320 	add.w	r3, r7, #32
 80140f2:	9301      	str	r3, [sp, #4]
 80140f4:	683b      	ldr	r3, [r7, #0]
 80140f6:	9300      	str	r3, [sp, #0]
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	68ba      	ldr	r2, [r7, #8]
 80140fc:	68f9      	ldr	r1, [r7, #12]
 80140fe:	f7ff fcb7 	bl	8013a70 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8014102:	f107 0320 	add.w	r3, r7, #32
 8014106:	4618      	mov	r0, r3
 8014108:	f7f7 f9e9 	bl	800b4de <_ZN12SimpleStringD1Ev>
    SimpleString testname = wholename.subStringFromTill(',', ')');
 801410c:	f107 0010 	add.w	r0, r7, #16
 8014110:	f107 0118 	add.w	r1, r7, #24
 8014114:	2329      	movs	r3, #41	; 0x29
 8014116:	222c      	movs	r2, #44	; 0x2c
 8014118:	f7f7 fb92 	bl	800b840 <_ZNK12SimpleString17subStringFromTillEcc>
    testname = testname.subString(2);
 801411c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014120:	f107 0110 	add.w	r1, r7, #16
 8014124:	2202      	movs	r2, #2
 8014126:	4618      	mov	r0, r3
 8014128:	f7f7 fb2c 	bl	800b784 <_ZNK12SimpleString9subStringEj>
 801412c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014130:	f107 0310 	add.w	r3, r7, #16
 8014134:	4611      	mov	r1, r2
 8014136:	4618      	mov	r0, r3
 8014138:	f7f6 fe85 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 801413c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014140:	4618      	mov	r0, r3
 8014142:	f7f7 f9cc 	bl	800b4de <_ZN12SimpleStringD1Ev>
    TestFilter* namefilter = new TestFilter(testname);
 8014146:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 801414a:	492a      	ldr	r1, [pc, #168]	; (80141f4 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 801414c:	2010      	movs	r0, #16
 801414e:	f7f4 fa4b 	bl	80085e8 <_ZnwjPKci>
 8014152:	4604      	mov	r4, r0
 8014154:	f107 0310 	add.w	r3, r7, #16
 8014158:	4619      	mov	r1, r3
 801415a:	4620      	mov	r0, r4
 801415c:	f009 fc46 	bl	801d9ec <_ZN10TestFilterC1ERK12SimpleString>
 8014160:	63fc      	str	r4, [r7, #60]	; 0x3c
    TestFilter* groupfilter = new TestFilter(wholename.subStringFromTill(wholename.at(0), ','));
 8014162:	f107 0318 	add.w	r3, r7, #24
 8014166:	2100      	movs	r1, #0
 8014168:	4618      	mov	r0, r3
 801416a:	f7f7 fb1c 	bl	800b7a6 <_ZNK12SimpleString2atEj>
 801416e:	4603      	mov	r3, r0
 8014170:	461a      	mov	r2, r3
 8014172:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8014176:	f107 0118 	add.w	r1, r7, #24
 801417a:	232c      	movs	r3, #44	; 0x2c
 801417c:	f7f7 fb60 	bl	800b840 <_ZNK12SimpleString17subStringFromTillEcc>
 8014180:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8014184:	f240 125b 	movw	r2, #347	; 0x15b
 8014188:	491a      	ldr	r1, [pc, #104]	; (80141f4 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 801418a:	2010      	movs	r0, #16
 801418c:	f7f4 fa2c 	bl	80085e8 <_ZnwjPKci>
 8014190:	4604      	mov	r4, r0
 8014192:	4629      	mov	r1, r5
 8014194:	4620      	mov	r0, r4
 8014196:	f009 fc29 	bl	801d9ec <_ZN10TestFilterC1ERK12SimpleString>
 801419a:	63bc      	str	r4, [r7, #56]	; 0x38
 801419c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80141a0:	4618      	mov	r0, r3
 80141a2:	f7f7 f99c 	bl	800b4de <_ZN12SimpleStringD1Ev>
    namefilter->strictMatching();
 80141a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80141a8:	f009 fc5b 	bl	801da62 <_ZN10TestFilter14strictMatchingEv>
    groupfilter->strictMatching();
 80141ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80141ae:	f009 fc58 	bl	801da62 <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupfilter->add(groupFilters_);
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141b6:	4619      	mov	r1, r3
 80141b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80141ba:	f009 fc37 	bl	801da2c <_ZN10TestFilter3addEPS_>
 80141be:	4602      	mov	r2, r0
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	625a      	str	r2, [r3, #36]	; 0x24
    nameFilters_ = namefilter->add(nameFilters_);
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80141c8:	4619      	mov	r1, r3
 80141ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80141cc:	f009 fc2e 	bl	801da2c <_ZN10TestFilter3addEPS_>
 80141d0:	4602      	mov	r2, r0
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	629a      	str	r2, [r3, #40]	; 0x28
    SimpleString testname = wholename.subStringFromTill(',', ')');
 80141d6:	f107 0310 	add.w	r3, r7, #16
 80141da:	4618      	mov	r0, r3
 80141dc:	f7f7 f97f 	bl	800b4de <_ZN12SimpleStringD1Ev>
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 80141e0:	f107 0318 	add.w	r3, r7, #24
 80141e4:	4618      	mov	r0, r3
 80141e6:	f7f7 f97a 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 80141ea:	bf00      	nop
 80141ec:	3740      	adds	r7, #64	; 0x40
 80141ee:	46bd      	mov	sp, r7
 80141f0:	bdb0      	pop	{r4, r5, r7, pc}
 80141f2:	bf00      	nop
 80141f4:	080238d0 	.word	0x080238d0

080141f8 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>:

void CommandLineArguments::setPackageName(int ac, const char *const *av, int& i)
{
 80141f8:	b590      	push	{r4, r7, lr}
 80141fa:	b08b      	sub	sp, #44	; 0x2c
 80141fc:	af02      	add	r7, sp, #8
 80141fe:	60f8      	str	r0, [r7, #12]
 8014200:	60b9      	str	r1, [r7, #8]
 8014202:	607a      	str	r2, [r7, #4]
 8014204:	603b      	str	r3, [r7, #0]
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8014206:	f107 0318 	add.w	r3, r7, #24
 801420a:	491b      	ldr	r1, [pc, #108]	; (8014278 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x80>)
 801420c:	4618      	mov	r0, r3
 801420e:	f7f6 fdae 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8014212:	f107 0010 	add.w	r0, r7, #16
 8014216:	f107 0318 	add.w	r3, r7, #24
 801421a:	9301      	str	r3, [sp, #4]
 801421c:	683b      	ldr	r3, [r7, #0]
 801421e:	9300      	str	r3, [sp, #0]
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	68ba      	ldr	r2, [r7, #8]
 8014224:	68f9      	ldr	r1, [r7, #12]
 8014226:	f7ff fc23 	bl	8013a70 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801422a:	f107 0318 	add.w	r3, r7, #24
 801422e:	4618      	mov	r0, r3
 8014230:	f7f7 f955 	bl	800b4de <_ZN12SimpleStringD1Ev>
    if (packageName.size() == 0) return;
 8014234:	f107 0310 	add.w	r3, r7, #16
 8014238:	4618      	mov	r0, r3
 801423a:	f7f7 f92f 	bl	800b49c <_ZNK12SimpleString4sizeEv>
 801423e:	4603      	mov	r3, r0
 8014240:	2b00      	cmp	r3, #0
 8014242:	bf0c      	ite	eq
 8014244:	2301      	moveq	r3, #1
 8014246:	2300      	movne	r3, #0
 8014248:	b2db      	uxtb	r3, r3
 801424a:	2b00      	cmp	r3, #0
 801424c:	d001      	beq.n	8014252 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x5a>
 801424e:	2400      	movs	r4, #0
 8014250:	e008      	b.n	8014264 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x6c>

    packageName_ = packageName;
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	3330      	adds	r3, #48	; 0x30
 8014256:	f107 0210 	add.w	r2, r7, #16
 801425a:	4611      	mov	r1, r2
 801425c:	4618      	mov	r0, r3
 801425e:	f7f6 fdf2 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8014262:	2401      	movs	r4, #1
 8014264:	f107 0310 	add.w	r3, r7, #16
 8014268:	4618      	mov	r0, r3
 801426a:	f7f7 f938 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801426e:	2c01      	cmp	r4, #1
}
 8014270:	3724      	adds	r7, #36	; 0x24
 8014272:	46bd      	mov	sp, r7
 8014274:	bd90      	pop	{r4, r7, pc}
 8014276:	bf00      	nop
 8014278:	08022f88 	.word	0x08022f88

0801427c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>:

bool CommandLineArguments::setOutputType(int ac, const char *const *av, int& i)
{
 801427c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801427e:	b093      	sub	sp, #76	; 0x4c
 8014280:	af02      	add	r7, sp, #8
 8014282:	60f8      	str	r0, [r7, #12]
 8014284:	60b9      	str	r1, [r7, #8]
 8014286:	607a      	str	r2, [r7, #4]
 8014288:	603b      	str	r3, [r7, #0]
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 801428a:	f107 0318 	add.w	r3, r7, #24
 801428e:	4953      	ldr	r1, [pc, #332]	; (80143dc <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x160>)
 8014290:	4618      	mov	r0, r3
 8014292:	f7f6 fd6c 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8014296:	f107 0010 	add.w	r0, r7, #16
 801429a:	f107 0318 	add.w	r3, r7, #24
 801429e:	9301      	str	r3, [sp, #4]
 80142a0:	683b      	ldr	r3, [r7, #0]
 80142a2:	9300      	str	r3, [sp, #0]
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	68ba      	ldr	r2, [r7, #8]
 80142a8:	68f9      	ldr	r1, [r7, #12]
 80142aa:	f7ff fbe1 	bl	8013a70 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80142ae:	f107 0318 	add.w	r3, r7, #24
 80142b2:	4618      	mov	r0, r3
 80142b4:	f7f7 f913 	bl	800b4de <_ZN12SimpleStringD1Ev>
    if (outputType.size() == 0) return false;
 80142b8:	f107 0310 	add.w	r3, r7, #16
 80142bc:	4618      	mov	r0, r3
 80142be:	f7f7 f8ed 	bl	800b49c <_ZNK12SimpleString4sizeEv>
 80142c2:	4603      	mov	r3, r0
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	bf0c      	ite	eq
 80142c8:	2301      	moveq	r3, #1
 80142ca:	2300      	movne	r3, #0
 80142cc:	b2db      	uxtb	r3, r3
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d001      	beq.n	80142d6 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x5a>
 80142d2:	2400      	movs	r4, #0
 80142d4:	e078      	b.n	80143c8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>

    if (outputType == "normal" || outputType == "eclipse") {
 80142d6:	2500      	movs	r5, #0
 80142d8:	f107 0320 	add.w	r3, r7, #32
 80142dc:	4940      	ldr	r1, [pc, #256]	; (80143e0 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x164>)
 80142de:	4618      	mov	r0, r3
 80142e0:	f7f6 fd45 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80142e4:	2601      	movs	r6, #1
 80142e6:	f107 0220 	add.w	r2, r7, #32
 80142ea:	f107 0310 	add.w	r3, r7, #16
 80142ee:	4611      	mov	r1, r2
 80142f0:	4618      	mov	r0, r3
 80142f2:	f7f7 f900 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 80142f6:	4603      	mov	r3, r0
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d111      	bne.n	8014320 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa4>
 80142fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014300:	4938      	ldr	r1, [pc, #224]	; (80143e4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x168>)
 8014302:	4618      	mov	r0, r3
 8014304:	f7f6 fd33 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8014308:	2501      	movs	r5, #1
 801430a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801430e:	f107 0310 	add.w	r3, r7, #16
 8014312:	4611      	mov	r1, r2
 8014314:	4618      	mov	r0, r3
 8014316:	f7f7 f8ee 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801431a:	4603      	mov	r3, r0
 801431c:	2b00      	cmp	r3, #0
 801431e:	d001      	beq.n	8014324 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa8>
 8014320:	2401      	movs	r4, #1
 8014322:	e000      	b.n	8014326 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xaa>
 8014324:	2400      	movs	r4, #0
 8014326:	2d00      	cmp	r5, #0
 8014328:	d004      	beq.n	8014334 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xb8>
 801432a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801432e:	4618      	mov	r0, r3
 8014330:	f7f7 f8d5 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8014334:	2e00      	cmp	r6, #0
 8014336:	d004      	beq.n	8014342 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xc6>
 8014338:	f107 0320 	add.w	r3, r7, #32
 801433c:	4618      	mov	r0, r3
 801433e:	f7f7 f8ce 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8014342:	2c00      	cmp	r4, #0
 8014344:	d005      	beq.n	8014352 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xd6>
        outputType_ = OUTPUT_ECLIPSE;
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	2200      	movs	r2, #0
 801434a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 801434e:	2401      	movs	r4, #1
 8014350:	e03a      	b.n	80143c8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "junit") {
 8014352:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014356:	4924      	ldr	r1, [pc, #144]	; (80143e8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x16c>)
 8014358:	4618      	mov	r0, r3
 801435a:	f7f6 fd08 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801435e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014362:	f107 0310 	add.w	r3, r7, #16
 8014366:	4611      	mov	r1, r2
 8014368:	4618      	mov	r0, r3
 801436a:	f7f7 f8c4 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801436e:	4603      	mov	r3, r0
 8014370:	461c      	mov	r4, r3
 8014372:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014376:	4618      	mov	r0, r3
 8014378:	f7f7 f8b1 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801437c:	2c00      	cmp	r4, #0
 801437e:	d005      	beq.n	801438c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x110>
        outputType_ = OUTPUT_JUNIT;
 8014380:	68fb      	ldr	r3, [r7, #12]
 8014382:	2201      	movs	r2, #1
 8014384:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8014388:	2401      	movs	r4, #1
 801438a:	e01d      	b.n	80143c8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "teamcity") {
 801438c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8014390:	4916      	ldr	r1, [pc, #88]	; (80143ec <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x170>)
 8014392:	4618      	mov	r0, r3
 8014394:	f7f6 fceb 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8014398:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801439c:	f107 0310 	add.w	r3, r7, #16
 80143a0:	4611      	mov	r1, r2
 80143a2:	4618      	mov	r0, r3
 80143a4:	f7f7 f8a7 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 80143a8:	4603      	mov	r3, r0
 80143aa:	461c      	mov	r4, r3
 80143ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80143b0:	4618      	mov	r0, r3
 80143b2:	f7f7 f894 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80143b6:	2c00      	cmp	r4, #0
 80143b8:	d005      	beq.n	80143c6 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14a>
        outputType_ = OUTPUT_TEAMCITY;
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	2202      	movs	r2, #2
 80143be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 80143c2:	2401      	movs	r4, #1
 80143c4:	e000      	b.n	80143c8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }

    return false;
 80143c6:	2400      	movs	r4, #0
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 80143c8:	f107 0310 	add.w	r3, r7, #16
 80143cc:	4618      	mov	r0, r3
 80143ce:	f7f7 f886 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80143d2:	4623      	mov	r3, r4
}
 80143d4:	4618      	mov	r0, r3
 80143d6:	3744      	adds	r7, #68	; 0x44
 80143d8:	46bd      	mov	sp, r7
 80143da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143dc:	08022f84 	.word	0x08022f84
 80143e0:	080238f4 	.word	0x080238f4
 80143e4:	080238fc 	.word	0x080238fc
 80143e8:	08023904 	.word	0x08023904
 80143ec:	0802390c 	.word	0x0802390c

080143f0 <_ZNK20CommandLineArguments13isJUnitOutputEv>:
{
    return outputType_ == OUTPUT_ECLIPSE;
}

bool CommandLineArguments::isJUnitOutput() const
{
 80143f0:	b480      	push	{r7}
 80143f2:	b083      	sub	sp, #12
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_JUNIT;
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80143fe:	2b01      	cmp	r3, #1
 8014400:	bf0c      	ite	eq
 8014402:	2301      	moveq	r3, #1
 8014404:	2300      	movne	r3, #0
 8014406:	b2db      	uxtb	r3, r3
}
 8014408:	4618      	mov	r0, r3
 801440a:	370c      	adds	r7, #12
 801440c:	46bd      	mov	sp, r7
 801440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014412:	4770      	bx	lr

08014414 <_ZNK20CommandLineArguments16isTeamCityOutputEv>:

bool CommandLineArguments::isTeamCityOutput() const
{
 8014414:	b480      	push	{r7}
 8014416:	b083      	sub	sp, #12
 8014418:	af00      	add	r7, sp, #0
 801441a:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_TEAMCITY;
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014422:	2b02      	cmp	r3, #2
 8014424:	bf0c      	ite	eq
 8014426:	2301      	moveq	r3, #1
 8014428:	2300      	movne	r3, #0
 801442a:	b2db      	uxtb	r3, r3
}
 801442c:	4618      	mov	r0, r3
 801442e:	370c      	adds	r7, #12
 8014430:	46bd      	mov	sp, r7
 8014432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014436:	4770      	bx	lr

08014438 <_ZNK20CommandLineArguments14getPackageNameEv>:

const SimpleString& CommandLineArguments::getPackageName() const
{
 8014438:	b480      	push	{r7}
 801443a:	b083      	sub	sp, #12
 801443c:	af00      	add	r7, sp, #0
 801443e:	6078      	str	r0, [r7, #4]
    return packageName_;
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	3330      	adds	r3, #48	; 0x30
}
 8014444:	4618      	mov	r0, r3
 8014446:	370c      	adds	r7, #12
 8014448:	46bd      	mov	sp, r7
 801444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801444e:	4770      	bx	lr

08014450 <_ZN22MemoryLeakDetectorListC1Ev>:
    MemoryLeakDetectorNode* next_;
};

struct MemoryLeakDetectorList
{
    MemoryLeakDetectorList() :
 8014450:	b480      	push	{r7}
 8014452:	b083      	sub	sp, #12
 8014454:	af00      	add	r7, sp, #0
 8014456:	6078      	str	r0, [r7, #4]
        head_(NULLPTR)
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	2200      	movs	r2, #0
 801445c:	601a      	str	r2, [r3, #0]
    {}
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	4618      	mov	r0, r3
 8014462:	370c      	adds	r7, #12
 8014464:	46bd      	mov	sp, r7
 8014466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801446a:	4770      	bx	lr

0801446c <_ZN18SimpleStringBufferC1Ev>:

static const char* UNKNOWN = "<unknown>";

static const char GuardBytes[] = {'B','A','S'};

SimpleStringBuffer::SimpleStringBuffer() :
 801446c:	b480      	push	{r7}
 801446e:	b083      	sub	sp, #12
 8014470:	af00      	add	r7, sp, #0
 8014472:	6078      	str	r0, [r7, #4]
    positions_filled_(0), write_limit_(SIMPLE_STRING_BUFFER_LEN-1)
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801447a:	2200      	movs	r2, #0
 801447c:	601a      	str	r2, [r3, #0]
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014484:	3304      	adds	r3, #4
 8014486:	f640 72ff 	movw	r2, #4095	; 0xfff
 801448a:	601a      	str	r2, [r3, #0]
{
    buffer_[0] = '\0';
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	2200      	movs	r2, #0
 8014490:	701a      	strb	r2, [r3, #0]
}
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	4618      	mov	r0, r3
 8014496:	370c      	adds	r7, #12
 8014498:	46bd      	mov	sp, r7
 801449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801449e:	4770      	bx	lr

080144a0 <_ZN18SimpleStringBuffer5clearEv>:

void SimpleStringBuffer::clear()
{
 80144a0:	b480      	push	{r7}
 80144a2:	b083      	sub	sp, #12
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
    positions_filled_ = 0;
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80144ae:	2200      	movs	r2, #0
 80144b0:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	2200      	movs	r2, #0
 80144b6:	701a      	strb	r2, [r3, #0]
}
 80144b8:	bf00      	nop
 80144ba:	370c      	adds	r7, #12
 80144bc:	46bd      	mov	sp, r7
 80144be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144c2:	4770      	bx	lr

080144c4 <_ZN18SimpleStringBuffer3addEPKcz>:

void SimpleStringBuffer::add(const char* format, ...)
{
 80144c4:	b40e      	push	{r1, r2, r3}
 80144c6:	b590      	push	{r4, r7, lr}
 80144c8:	b086      	sub	sp, #24
 80144ca:	af00      	add	r7, sp, #0
 80144cc:	6078      	str	r0, [r7, #4]
    const size_t positions_left = write_limit_ - positions_filled_;
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80144d4:	3304      	adds	r3, #4
 80144d6:	681a      	ldr	r2, [r3, #0]
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	1ad3      	subs	r3, r2, r3
 80144e2:	617b      	str	r3, [r7, #20]
    if (positions_left == 0) return;
 80144e4:	697b      	ldr	r3, [r7, #20]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d032      	beq.n	8014550 <_ZN18SimpleStringBuffer3addEPKcz+0x8c>

    va_list arguments;
    va_start(arguments, format);
 80144ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80144ee:	60fb      	str	r3, [r7, #12]
    const int count = PlatformSpecificVSNprintf(buffer_ + positions_filled_, positions_left+1, format, arguments);
 80144f0:	4b1b      	ldr	r3, [pc, #108]	; (8014560 <_ZN18SimpleStringBuffer3addEPKcz+0x9c>)
 80144f2:	681c      	ldr	r4, [r3, #0]
 80144f4:	687a      	ldr	r2, [r7, #4]
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	18d0      	adds	r0, r2, r3
 8014500:	697b      	ldr	r3, [r7, #20]
 8014502:	1c59      	adds	r1, r3, #1
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014508:	47a0      	blx	r4
 801450a:	6138      	str	r0, [r7, #16]
    if (count > 0) positions_filled_ += (size_t) count;
 801450c:	693b      	ldr	r3, [r7, #16]
 801450e:	2b00      	cmp	r3, #0
 8014510:	dd09      	ble.n	8014526 <_ZN18SimpleStringBuffer3addEPKcz+0x62>
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014518:	681a      	ldr	r2, [r3, #0]
 801451a:	693b      	ldr	r3, [r7, #16]
 801451c:	441a      	add	r2, r3
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014524:	601a      	str	r2, [r3, #0]
    if (positions_filled_ > write_limit_) positions_filled_ = write_limit_;
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801452c:	681a      	ldr	r2, [r3, #0]
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014534:	3304      	adds	r3, #4
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	429a      	cmp	r2, r3
 801453a:	d90a      	bls.n	8014552 <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014542:	3304      	adds	r3, #4
 8014544:	681a      	ldr	r2, [r3, #0]
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801454c:	601a      	str	r2, [r3, #0]
 801454e:	e000      	b.n	8014552 <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
    if (positions_left == 0) return;
 8014550:	bf00      	nop
    va_end(arguments);
}
 8014552:	3718      	adds	r7, #24
 8014554:	46bd      	mov	sp, r7
 8014556:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 801455a:	b003      	add	sp, #12
 801455c:	4770      	bx	lr
 801455e:	bf00      	nop
 8014560:	200000b0 	.word	0x200000b0

08014564 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>:

void SimpleStringBuffer::addMemoryDump(const void* memory, size_t memorySize)
{
 8014564:	b580      	push	{r7, lr}
 8014566:	b08c      	sub	sp, #48	; 0x30
 8014568:	af00      	add	r7, sp, #0
 801456a:	60f8      	str	r0, [r7, #12]
 801456c:	60b9      	str	r1, [r7, #8]
 801456e:	607a      	str	r2, [r7, #4]
    const unsigned char* byteMemory = (const unsigned char*)memory;
 8014570:	68bb      	ldr	r3, [r7, #8]
 8014572:	61fb      	str	r3, [r7, #28]
    const size_t maxLineBytes = 16;
 8014574:	2310      	movs	r3, #16
 8014576:	61bb      	str	r3, [r7, #24]
    size_t currentPos = 0;
 8014578:	2300      	movs	r3, #0
 801457a:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t p;

    while (currentPos < memorySize) {
 801457c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	429a      	cmp	r2, r3
 8014582:	d273      	bcs.n	801466c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x108>
        add("    %04lx: ", (unsigned long) currentPos);
 8014584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014586:	493b      	ldr	r1, [pc, #236]	; (8014674 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x110>)
 8014588:	68f8      	ldr	r0, [r7, #12]
 801458a:	f7ff ff9b 	bl	80144c4 <_ZN18SimpleStringBuffer3addEPKcz>
        size_t bytesInLine = memorySize - currentPos;
 801458e:	687a      	ldr	r2, [r7, #4]
 8014590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014592:	1ad3      	subs	r3, r2, r3
 8014594:	627b      	str	r3, [r7, #36]	; 0x24
        if (bytesInLine > maxLineBytes) {
 8014596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014598:	2b10      	cmp	r3, #16
 801459a:	d901      	bls.n	80145a0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x3c>
            bytesInLine = maxLineBytes;
 801459c:	2310      	movs	r3, #16
 801459e:	627b      	str	r3, [r7, #36]	; 0x24
        }
        const size_t leftoverBytes = maxLineBytes - bytesInLine;
 80145a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145a2:	f1c3 0310 	rsb	r3, r3, #16
 80145a6:	617b      	str	r3, [r7, #20]

        for (p = 0; p < bytesInLine; p++) {
 80145a8:	2300      	movs	r3, #0
 80145aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80145ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80145ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145b0:	429a      	cmp	r2, r3
 80145b2:	d215      	bcs.n	80145e0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x7c>
            add("%02hx ", (unsigned short) byteMemory[currentPos + p]);
 80145b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80145b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145b8:	4413      	add	r3, r2
 80145ba:	69fa      	ldr	r2, [r7, #28]
 80145bc:	4413      	add	r3, r2
 80145be:	781b      	ldrb	r3, [r3, #0]
 80145c0:	461a      	mov	r2, r3
 80145c2:	492d      	ldr	r1, [pc, #180]	; (8014678 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x114>)
 80145c4:	68f8      	ldr	r0, [r7, #12]
 80145c6:	f7ff ff7d 	bl	80144c4 <_ZN18SimpleStringBuffer3addEPKcz>
            if (p == ((maxLineBytes / 2) - 1)) {
 80145ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145cc:	2b07      	cmp	r3, #7
 80145ce:	d103      	bne.n	80145d8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x74>
                add(" ");
 80145d0:	492a      	ldr	r1, [pc, #168]	; (801467c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 80145d2:	68f8      	ldr	r0, [r7, #12]
 80145d4:	f7ff ff76 	bl	80144c4 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 80145d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145da:	3301      	adds	r3, #1
 80145dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80145de:	e7e5      	b.n	80145ac <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x48>
            }
        }
        for (p = 0; p < leftoverBytes; p++) {
 80145e0:	2300      	movs	r3, #0
 80145e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80145e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80145e6:	697b      	ldr	r3, [r7, #20]
 80145e8:	429a      	cmp	r2, r3
 80145ea:	d207      	bcs.n	80145fc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x98>
            add("   ");
 80145ec:	4924      	ldr	r1, [pc, #144]	; (8014680 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x11c>)
 80145ee:	68f8      	ldr	r0, [r7, #12]
 80145f0:	f7ff ff68 	bl	80144c4 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < leftoverBytes; p++) {
 80145f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145f6:	3301      	adds	r3, #1
 80145f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80145fa:	e7f3      	b.n	80145e4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x80>
        }
        if (leftoverBytes > (maxLineBytes/2)) {
 80145fc:	697b      	ldr	r3, [r7, #20]
 80145fe:	2b08      	cmp	r3, #8
 8014600:	d903      	bls.n	801460a <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xa6>
            add(" ");
 8014602:	491e      	ldr	r1, [pc, #120]	; (801467c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8014604:	68f8      	ldr	r0, [r7, #12]
 8014606:	f7ff ff5d 	bl	80144c4 <_ZN18SimpleStringBuffer3addEPKcz>
        }

        add("|");
 801460a:	491e      	ldr	r1, [pc, #120]	; (8014684 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x120>)
 801460c:	68f8      	ldr	r0, [r7, #12]
 801460e:	f7ff ff59 	bl	80144c4 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8014612:	2300      	movs	r3, #0
 8014614:	62bb      	str	r3, [r7, #40]	; 0x28
 8014616:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801461a:	429a      	cmp	r2, r3
 801461c:	d21d      	bcs.n	801465a <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xf6>
            char toAdd = (char)byteMemory[currentPos + p];
 801461e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014622:	4413      	add	r3, r2
 8014624:	69fa      	ldr	r2, [r7, #28]
 8014626:	4413      	add	r3, r2
 8014628:	781b      	ldrb	r3, [r3, #0]
 801462a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (toAdd < ' ' || toAdd > '~') {
 801462e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014632:	2b1f      	cmp	r3, #31
 8014634:	d903      	bls.n	801463e <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xda>
 8014636:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801463a:	2b7e      	cmp	r3, #126	; 0x7e
 801463c:	d902      	bls.n	8014644 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xe0>
                toAdd = '.';
 801463e:	232e      	movs	r3, #46	; 0x2e
 8014640:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
            add("%c", (int)toAdd);
 8014644:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014648:	461a      	mov	r2, r3
 801464a:	490f      	ldr	r1, [pc, #60]	; (8014688 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x124>)
 801464c:	68f8      	ldr	r0, [r7, #12]
 801464e:	f7ff ff39 	bl	80144c4 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8014652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014654:	3301      	adds	r3, #1
 8014656:	62bb      	str	r3, [r7, #40]	; 0x28
 8014658:	e7dd      	b.n	8014616 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xb2>
        }
        add("|\n");
 801465a:	490c      	ldr	r1, [pc, #48]	; (801468c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x128>)
 801465c:	68f8      	ldr	r0, [r7, #12]
 801465e:	f7ff ff31 	bl	80144c4 <_ZN18SimpleStringBuffer3addEPKcz>
        currentPos += bytesInLine;
 8014662:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014666:	4413      	add	r3, r2
 8014668:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (currentPos < memorySize) {
 801466a:	e787      	b.n	801457c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x18>
    }
}
 801466c:	bf00      	nop
 801466e:	3730      	adds	r7, #48	; 0x30
 8014670:	46bd      	mov	sp, r7
 8014672:	bd80      	pop	{r7, pc}
 8014674:	08023924 	.word	0x08023924
 8014678:	08023930 	.word	0x08023930
 801467c:	08023938 	.word	0x08023938
 8014680:	0802393c 	.word	0x0802393c
 8014684:	08023940 	.word	0x08023940
 8014688:	08023944 	.word	0x08023944
 801468c:	08023948 	.word	0x08023948

08014690 <_ZN18SimpleStringBuffer8toStringEv>:

char* SimpleStringBuffer::toString()
{
 8014690:	b480      	push	{r7}
 8014692:	b083      	sub	sp, #12
 8014694:	af00      	add	r7, sp, #0
 8014696:	6078      	str	r0, [r7, #4]
    return buffer_;
 8014698:	687b      	ldr	r3, [r7, #4]
}
 801469a:	4618      	mov	r0, r3
 801469c:	370c      	adds	r7, #12
 801469e:	46bd      	mov	sp, r7
 80146a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146a4:	4770      	bx	lr

080146a6 <_ZN18SimpleStringBuffer13setWriteLimitEj>:

void SimpleStringBuffer::setWriteLimit(size_t write_limit)
{
 80146a6:	b480      	push	{r7}
 80146a8:	b083      	sub	sp, #12
 80146aa:	af00      	add	r7, sp, #0
 80146ac:	6078      	str	r0, [r7, #4]
 80146ae:	6039      	str	r1, [r7, #0]
    write_limit_ = write_limit;
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80146b6:	3304      	adds	r3, #4
 80146b8:	683a      	ldr	r2, [r7, #0]
 80146ba:	601a      	str	r2, [r3, #0]
    if (write_limit_ > SIMPLE_STRING_BUFFER_LEN-1)
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80146c2:	3304      	adds	r3, #4
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80146ca:	d306      	bcc.n	80146da <_ZN18SimpleStringBuffer13setWriteLimitEj+0x34>
        write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80146d2:	3304      	adds	r3, #4
 80146d4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80146d8:	601a      	str	r2, [r3, #0]
}
 80146da:	bf00      	nop
 80146dc:	370c      	adds	r7, #12
 80146de:	46bd      	mov	sp, r7
 80146e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e4:	4770      	bx	lr

080146e6 <_ZN18SimpleStringBuffer15resetWriteLimitEv>:
void SimpleStringBuffer::resetWriteLimit()
{
 80146e6:	b480      	push	{r7}
 80146e8:	b083      	sub	sp, #12
 80146ea:	af00      	add	r7, sp, #0
 80146ec:	6078      	str	r0, [r7, #4]
    write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80146f4:	3304      	adds	r3, #4
 80146f6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80146fa:	601a      	str	r2, [r3, #0]
}
 80146fc:	bf00      	nop
 80146fe:	370c      	adds	r7, #12
 8014700:	46bd      	mov	sp, r7
 8014702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014706:	4770      	bx	lr

08014708 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>:

bool SimpleStringBuffer::reachedItsCapacity()
{
 8014708:	b480      	push	{r7}
 801470a:	b083      	sub	sp, #12
 801470c:	af00      	add	r7, sp, #0
 801470e:	6078      	str	r0, [r7, #4]
    return positions_filled_ >= write_limit_;
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014716:	681a      	ldr	r2, [r3, #0]
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801471e:	3304      	adds	r3, #4
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	429a      	cmp	r2, r3
 8014724:	bf2c      	ite	cs
 8014726:	2301      	movcs	r3, #1
 8014728:	2300      	movcc	r3, #0
 801472a:	b2db      	uxtb	r3, r3
}
 801472c:	4618      	mov	r0, r3
 801472e:	370c      	adds	r7, #12
 8014730:	46bd      	mov	sp, r7
 8014732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014736:	4770      	bx	lr

08014738 <_ZN28MemoryLeakOutputStringBufferC1Ev>:
#define MEM_LEAK_ADDITION_MALLOC_WARNING "NOTE:\n" \
                                         "\tMemory leak reports about malloc and free can be caused by allocating using the cpputest version of malloc,\n" \
                                         "\tbut deallocate using the standard free.\n" \
                                         "\tIf this is the case, check whether your malloc/free replacements are working (#define malloc cpputest_malloc etc).\n"

MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
 8014738:	b580      	push	{r7, lr}
 801473a:	b082      	sub	sp, #8
 801473c:	af00      	add	r7, sp, #0
 801473e:	6078      	str	r0, [r7, #4]
    : total_leaks_(0), giveWarningOnUsingMalloc_(false)
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	2200      	movs	r2, #0
 8014744:	601a      	str	r2, [r3, #0]
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	2200      	movs	r2, #0
 801474a:	711a      	strb	r2, [r3, #4]
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	3308      	adds	r3, #8
 8014750:	4618      	mov	r0, r3
 8014752:	f7ff fe8b 	bl	801446c <_ZN18SimpleStringBufferC1Ev>
{
}
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	4618      	mov	r0, r3
 801475a:	3708      	adds	r7, #8
 801475c:	46bd      	mov	sp, r7
 801475e:	bd80      	pop	{r7, pc}

08014760 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addAllocationLocation(const char* allocationFile, size_t allocationLineNumber, size_t allocationSize, TestMemoryAllocator* allocator)
{
 8014760:	b5b0      	push	{r4, r5, r7, lr}
 8014762:	b086      	sub	sp, #24
 8014764:	af02      	add	r7, sp, #8
 8014766:	60f8      	str	r0, [r7, #12]
 8014768:	60b9      	str	r1, [r7, #8]
 801476a:	607a      	str	r2, [r7, #4]
 801476c:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   allocated at file: %s line: %d size: %lu type: %s\n", allocationFile, (int) allocationLineNumber, (unsigned long) allocationSize, allocator->alloc_name());
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	f103 0408 	add.w	r4, r3, #8
 8014774:	687d      	ldr	r5, [r7, #4]
 8014776:	6a3b      	ldr	r3, [r7, #32]
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	3314      	adds	r3, #20
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	6a38      	ldr	r0, [r7, #32]
 8014780:	4798      	blx	r3
 8014782:	4603      	mov	r3, r0
 8014784:	9301      	str	r3, [sp, #4]
 8014786:	683b      	ldr	r3, [r7, #0]
 8014788:	9300      	str	r3, [sp, #0]
 801478a:	462b      	mov	r3, r5
 801478c:	68ba      	ldr	r2, [r7, #8]
 801478e:	4904      	ldr	r1, [pc, #16]	; (80147a0 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator+0x40>)
 8014790:	4620      	mov	r0, r4
 8014792:	f7ff fe97 	bl	80144c4 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8014796:	bf00      	nop
 8014798:	3710      	adds	r7, #16
 801479a:	46bd      	mov	sp, r7
 801479c:	bdb0      	pop	{r4, r5, r7, pc}
 801479e:	bf00      	nop
 80147a0:	0802394c 	.word	0x0802394c

080147a4 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addDeallocationLocation(const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* allocator)
{
 80147a4:	b5b0      	push	{r4, r5, r7, lr}
 80147a6:	b086      	sub	sp, #24
 80147a8:	af02      	add	r7, sp, #8
 80147aa:	60f8      	str	r0, [r7, #12]
 80147ac:	60b9      	str	r1, [r7, #8]
 80147ae:	607a      	str	r2, [r7, #4]
 80147b0:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   deallocated at file: %s line: %d type: %s\n", freeFile, (int) freeLineNumber, allocator->free_name());
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	f103 0408 	add.w	r4, r3, #8
 80147b8:	687d      	ldr	r5, [r7, #4]
 80147ba:	683b      	ldr	r3, [r7, #0]
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	3318      	adds	r3, #24
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	6838      	ldr	r0, [r7, #0]
 80147c4:	4798      	blx	r3
 80147c6:	4603      	mov	r3, r0
 80147c8:	9300      	str	r3, [sp, #0]
 80147ca:	462b      	mov	r3, r5
 80147cc:	68ba      	ldr	r2, [r7, #8]
 80147ce:	4904      	ldr	r1, [pc, #16]	; (80147e0 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator+0x3c>)
 80147d0:	4620      	mov	r0, r4
 80147d2:	f7ff fe77 	bl	80144c4 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80147d6:	bf00      	nop
 80147d8:	3710      	adds	r7, #16
 80147da:	46bd      	mov	sp, r7
 80147dc:	bdb0      	pop	{r4, r5, r7, pc}
 80147de:	bf00      	nop
 80147e0:	08023984 	.word	0x08023984

080147e4 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>:

void MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
{
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b082      	sub	sp, #8
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("No memory leaks were detected.");
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	3308      	adds	r3, #8
 80147f0:	4903      	ldr	r1, [pc, #12]	; (8014800 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv+0x1c>)
 80147f2:	4618      	mov	r0, r3
 80147f4:	f7ff fe66 	bl	80144c4 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80147f8:	bf00      	nop
 80147fa:	3708      	adds	r7, #8
 80147fc:	46bd      	mov	sp, r7
 80147fe:	bd80      	pop	{r7, pc}
 8014800:	080239b4 	.word	0x080239b4

08014804 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
{
 8014804:	b580      	push	{r7, lr}
 8014806:	b084      	sub	sp, #16
 8014808:	af00      	add	r7, sp, #0
 801480a:	6078      	str	r0, [r7, #4]
    giveWarningOnUsingMalloc_ = false;
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	2200      	movs	r2, #0
 8014810:	711a      	strb	r2, [r3, #4]
    total_leaks_ = 0;
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	2200      	movs	r2, #0
 8014816:	601a      	str	r2, [r3, #0]

    size_t memory_leak_normal_footer_size = sizeof(MEM_LEAK_FOOTER) + 10 + sizeof(MEM_LEAK_TOO_MUCH); /* the number of leaks */
 8014818:	2367      	movs	r3, #103	; 0x67
 801481a:	60fb      	str	r3, [r7, #12]
    size_t memory_leak_foot_size_with_malloc_warning = memory_leak_normal_footer_size + sizeof(MEM_LEAK_ADDITION_MALLOC_WARNING);
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	f203 1311 	addw	r3, r3, #273	; 0x111
 8014822:	60bb      	str	r3, [r7, #8]

    outputBuffer_.setWriteLimit(SimpleStringBuffer::SIMPLE_STRING_BUFFER_LEN - memory_leak_foot_size_with_malloc_warning);
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	f103 0208 	add.w	r2, r3, #8
 801482a:	68bb      	ldr	r3, [r7, #8]
 801482c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8014830:	4619      	mov	r1, r3
 8014832:	4610      	mov	r0, r2
 8014834:	f7ff ff37 	bl	80146a6 <_ZN18SimpleStringBuffer13setWriteLimitEj>
}
 8014838:	bf00      	nop
 801483a:	3710      	adds	r7, #16
 801483c:	46bd      	mov	sp, r7
 801483e:	bd80      	pop	{r7, pc}

08014840 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>:

void MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode* leak)
{
 8014840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014842:	b089      	sub	sp, #36	; 0x24
 8014844:	af04      	add	r7, sp, #16
 8014846:	60f8      	str	r0, [r7, #12]
 8014848:	60b9      	str	r1, [r7, #8]
    if (total_leaks_ == 0) {
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	2b00      	cmp	r3, #0
 8014850:	d102      	bne.n	8014858 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0x18>
        addMemoryLeakHeader();
 8014852:	68f8      	ldr	r0, [r7, #12]
 8014854:	f000 f882 	bl	801495c <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>
    }

    total_leaks_++;
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	1c5a      	adds	r2, r3, #1
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	601a      	str	r2, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	f103 0508 	add.w	r5, r3, #8
 8014868:	68bb      	ldr	r3, [r7, #8]
 801486a:	685e      	ldr	r6, [r3, #4]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 801486c:	68bb      	ldr	r3, [r7, #8]
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	607b      	str	r3, [r7, #4]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8014872:	68bb      	ldr	r3, [r7, #8]
 8014874:	68dc      	ldr	r4, [r3, #12]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8014876:	68bb      	ldr	r3, [r7, #8]
 8014878:	691b      	ldr	r3, [r3, #16]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 801487a:	603b      	str	r3, [r7, #0]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 801487c:	68bb      	ldr	r3, [r7, #8]
 801487e:	695a      	ldr	r2, [r3, #20]
 8014880:	68bb      	ldr	r3, [r7, #8]
 8014882:	695b      	ldr	r3, [r3, #20]
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	3314      	adds	r3, #20
 8014888:	681b      	ldr	r3, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 801488a:	4610      	mov	r0, r2
 801488c:	4798      	blx	r3
 801488e:	4602      	mov	r2, r0
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8014890:	68bb      	ldr	r3, [r7, #8]
 8014892:	689b      	ldr	r3, [r3, #8]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8014894:	9303      	str	r3, [sp, #12]
 8014896:	9202      	str	r2, [sp, #8]
 8014898:	683a      	ldr	r2, [r7, #0]
 801489a:	9201      	str	r2, [sp, #4]
 801489c:	9400      	str	r4, [sp, #0]
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	4632      	mov	r2, r6
 80148a2:	4915      	ldr	r1, [pc, #84]	; (80148f8 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb8>)
 80148a4:	4628      	mov	r0, r5
 80148a6:	f7ff fe0d 	bl	80144c4 <_ZN18SimpleStringBuffer3addEPKcz>
    outputBuffer_.addMemoryDump(leak->memory_, leak->size_);
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	f103 0008 	add.w	r0, r3, #8
 80148b0:	68bb      	ldr	r3, [r7, #8]
 80148b2:	6899      	ldr	r1, [r3, #8]
 80148b4:	68bb      	ldr	r3, [r7, #8]
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	461a      	mov	r2, r3
 80148ba:	f7ff fe53 	bl	8014564 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>

    if (SimpleString::StrCmp(leak->allocator_->alloc_name(), (const char*) "malloc") == 0)
 80148be:	68bb      	ldr	r3, [r7, #8]
 80148c0:	695a      	ldr	r2, [r3, #20]
 80148c2:	68bb      	ldr	r3, [r7, #8]
 80148c4:	695b      	ldr	r3, [r3, #20]
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	3314      	adds	r3, #20
 80148ca:	681b      	ldr	r3, [r3, #0]
 80148cc:	4610      	mov	r0, r2
 80148ce:	4798      	blx	r3
 80148d0:	4603      	mov	r3, r0
 80148d2:	490a      	ldr	r1, [pc, #40]	; (80148fc <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xbc>)
 80148d4:	4618      	mov	r0, r3
 80148d6:	f7f6 f887 	bl	800a9e8 <_ZN12SimpleString6StrCmpEPKcS1_>
 80148da:	4603      	mov	r3, r0
 80148dc:	2b00      	cmp	r3, #0
 80148de:	bf0c      	ite	eq
 80148e0:	2301      	moveq	r3, #1
 80148e2:	2300      	movne	r3, #0
 80148e4:	b2db      	uxtb	r3, r3
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d002      	beq.n	80148f0 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb0>
        giveWarningOnUsingMalloc_ = true;
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	2201      	movs	r2, #1
 80148ee:	711a      	strb	r2, [r3, #4]
}
 80148f0:	bf00      	nop
 80148f2:	3714      	adds	r7, #20
 80148f4:	46bd      	mov	sp, r7
 80148f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148f8:	080239d4 	.word	0x080239d4
 80148fc:	08023a34 	.word	0x08023a34

08014900 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
{
 8014900:	b580      	push	{r7, lr}
 8014902:	b084      	sub	sp, #16
 8014904:	af00      	add	r7, sp, #0
 8014906:	6078      	str	r0, [r7, #4]
    if (total_leaks_ == 0) {
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	2b00      	cmp	r3, #0
 801490e:	d103      	bne.n	8014918 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x18>
        addNoMemoryLeaksMessage();
 8014910:	6878      	ldr	r0, [r7, #4]
 8014912:	f7ff ff67 	bl	80147e4 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>
        return;
 8014916:	e01e      	b.n	8014956 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
    }

    bool buffer_reached_its_capacity = outputBuffer_.reachedItsCapacity();
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	3308      	adds	r3, #8
 801491c:	4618      	mov	r0, r3
 801491e:	f7ff fef3 	bl	8014708 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>
 8014922:	4603      	mov	r3, r0
 8014924:	73fb      	strb	r3, [r7, #15]
    outputBuffer_.resetWriteLimit();
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	3308      	adds	r3, #8
 801492a:	4618      	mov	r0, r3
 801492c:	f7ff fedb 	bl	80146e6 <_ZN18SimpleStringBuffer15resetWriteLimitEv>

    if (buffer_reached_its_capacity)
 8014930:	7bfb      	ldrb	r3, [r7, #15]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d002      	beq.n	801493c <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x3c>
        addErrorMessageForTooMuchLeaks();
 8014936:	6878      	ldr	r0, [r7, #4]
 8014938:	f000 f820 	bl	801497c <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>

    addMemoryLeakFooter(total_leaks_);
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	4619      	mov	r1, r3
 8014942:	6878      	ldr	r0, [r7, #4]
 8014944:	f000 f82a 	bl	801499c <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>

    if (giveWarningOnUsingMalloc_)
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	791b      	ldrb	r3, [r3, #4]
 801494c:	2b00      	cmp	r3, #0
 801494e:	d002      	beq.n	8014956 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
        addWarningForUsingMalloc();
 8014950:	6878      	ldr	r0, [r7, #4]
 8014952:	f000 f839 	bl	80149c8 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>

}
 8014956:	3710      	adds	r7, #16
 8014958:	46bd      	mov	sp, r7
 801495a:	bd80      	pop	{r7, pc}

0801495c <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>:

void MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
{
 801495c:	b580      	push	{r7, lr}
 801495e:	b082      	sub	sp, #8
 8014960:	af00      	add	r7, sp, #0
 8014962:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("Memory leak(s) found.\n");
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	3308      	adds	r3, #8
 8014968:	4903      	ldr	r1, [pc, #12]	; (8014978 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv+0x1c>)
 801496a:	4618      	mov	r0, r3
 801496c:	f7ff fdaa 	bl	80144c4 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8014970:	bf00      	nop
 8014972:	3708      	adds	r7, #8
 8014974:	46bd      	mov	sp, r7
 8014976:	bd80      	pop	{r7, pc}
 8014978:	08023a3c 	.word	0x08023a3c

0801497c <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>:

void MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
{
 801497c:	b580      	push	{r7, lr}
 801497e:	b082      	sub	sp, #8
 8014980:	af00      	add	r7, sp, #0
 8014982:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_TOO_MUCH);
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	3308      	adds	r3, #8
 8014988:	4903      	ldr	r1, [pc, #12]	; (8014998 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv+0x1c>)
 801498a:	4618      	mov	r0, r3
 801498c:	f7ff fd9a 	bl	80144c4 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8014990:	bf00      	nop
 8014992:	3708      	adds	r7, #8
 8014994:	46bd      	mov	sp, r7
 8014996:	bd80      	pop	{r7, pc}
 8014998:	08023a54 	.word	0x08023a54

0801499c <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>:

void MemoryLeakOutputStringBuffer::addMemoryLeakFooter(size_t amountOfLeaks)
{
 801499c:	b580      	push	{r7, lr}
 801499e:	b082      	sub	sp, #8
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	6078      	str	r0, [r7, #4]
 80149a4:	6039      	str	r1, [r7, #0]
    outputBuffer_.add("%s %d\n", MEM_LEAK_FOOTER, (int) amountOfLeaks);
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	f103 0008 	add.w	r0, r3, #8
 80149ac:	683b      	ldr	r3, [r7, #0]
 80149ae:	4a04      	ldr	r2, [pc, #16]	; (80149c0 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x24>)
 80149b0:	4904      	ldr	r1, [pc, #16]	; (80149c4 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x28>)
 80149b2:	f7ff fd87 	bl	80144c4 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80149b6:	bf00      	nop
 80149b8:	3708      	adds	r7, #8
 80149ba:	46bd      	mov	sp, r7
 80149bc:	bd80      	pop	{r7, pc}
 80149be:	bf00      	nop
 80149c0:	08023a9c 	.word	0x08023a9c
 80149c4:	08023ab4 	.word	0x08023ab4

080149c8 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>:

void MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
{
 80149c8:	b580      	push	{r7, lr}
 80149ca:	b082      	sub	sp, #8
 80149cc:	af00      	add	r7, sp, #0
 80149ce:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_ADDITION_MALLOC_WARNING);
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	3308      	adds	r3, #8
 80149d4:	4903      	ldr	r1, [pc, #12]	; (80149e4 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv+0x1c>)
 80149d6:	4618      	mov	r0, r3
 80149d8:	f7ff fd74 	bl	80144c4 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80149dc:	bf00      	nop
 80149de:	3708      	adds	r7, #8
 80149e0:	46bd      	mov	sp, r7
 80149e2:	bd80      	pop	{r7, pc}
 80149e4:	08023abc 	.word	0x08023abc

080149e8 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char* freeFile, size_t freeLine, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 80149e8:	b580      	push	{r7, lr}
 80149ea:	b08a      	sub	sp, #40	; 0x28
 80149ec:	af06      	add	r7, sp, #24
 80149ee:	60f8      	str	r0, [r7, #12]
 80149f0:	60b9      	str	r1, [r7, #8]
 80149f2:	607a      	str	r2, [r7, #4]
 80149f4:	603b      	str	r3, [r7, #0]
    reportFailure("Deallocating non-allocated memory\n", "<unknown>", 0, 0, NullUnknownAllocator::defaultAllocator(), freeFile, freeLine, freeAllocator, reporter);
 80149f6:	f7f9 fe8d 	bl	800e714 <_ZN20NullUnknownAllocator16defaultAllocatorEv>
 80149fa:	4602      	mov	r2, r0
 80149fc:	69bb      	ldr	r3, [r7, #24]
 80149fe:	9305      	str	r3, [sp, #20]
 8014a00:	683b      	ldr	r3, [r7, #0]
 8014a02:	9304      	str	r3, [sp, #16]
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	9303      	str	r3, [sp, #12]
 8014a08:	68bb      	ldr	r3, [r7, #8]
 8014a0a:	9302      	str	r3, [sp, #8]
 8014a0c:	9201      	str	r2, [sp, #4]
 8014a0e:	2300      	movs	r3, #0
 8014a10:	9300      	str	r3, [sp, #0]
 8014a12:	2300      	movs	r3, #0
 8014a14:	4a04      	ldr	r2, [pc, #16]	; (8014a28 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x40>)
 8014a16:	4905      	ldr	r1, [pc, #20]	; (8014a2c <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x44>)
 8014a18:	68f8      	ldr	r0, [r7, #12]
 8014a1a:	f000 f855 	bl	8014ac8 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8014a1e:	bf00      	nop
 8014a20:	3710      	adds	r7, #16
 8014a22:	46bd      	mov	sp, r7
 8014a24:	bd80      	pop	{r7, pc}
 8014a26:	bf00      	nop
 8014a28:	08023918 	.word	0x08023918
 8014a2c:	08023bd0 	.word	0x08023bd0

08014a30 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8014a30:	b590      	push	{r4, r7, lr}
 8014a32:	b08b      	sub	sp, #44	; 0x2c
 8014a34:	af06      	add	r7, sp, #24
 8014a36:	60f8      	str	r0, [r7, #12]
 8014a38:	60b9      	str	r1, [r7, #8]
 8014a3a:	607a      	str	r2, [r7, #4]
 8014a3c:	603b      	str	r3, [r7, #0]
    reportFailure("Allocation/deallocation type mismatch\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8014a3e:	68bb      	ldr	r3, [r7, #8]
 8014a40:	68d8      	ldr	r0, [r3, #12]
 8014a42:	68bb      	ldr	r3, [r7, #8]
 8014a44:	691c      	ldr	r4, [r3, #16]
 8014a46:	68bb      	ldr	r3, [r7, #8]
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	68ba      	ldr	r2, [r7, #8]
 8014a4c:	6952      	ldr	r2, [r2, #20]
 8014a4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014a50:	9105      	str	r1, [sp, #20]
 8014a52:	6a39      	ldr	r1, [r7, #32]
 8014a54:	9104      	str	r1, [sp, #16]
 8014a56:	6839      	ldr	r1, [r7, #0]
 8014a58:	9103      	str	r1, [sp, #12]
 8014a5a:	6879      	ldr	r1, [r7, #4]
 8014a5c:	9102      	str	r1, [sp, #8]
 8014a5e:	9201      	str	r2, [sp, #4]
 8014a60:	9300      	str	r3, [sp, #0]
 8014a62:	4623      	mov	r3, r4
 8014a64:	4602      	mov	r2, r0
 8014a66:	4904      	ldr	r1, [pc, #16]	; (8014a78 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8014a68:	68f8      	ldr	r0, [r7, #12]
 8014a6a:	f000 f82d 	bl	8014ac8 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8014a6e:	bf00      	nop
 8014a70:	3714      	adds	r7, #20
 8014a72:	46bd      	mov	sp, r7
 8014a74:	bd90      	pop	{r4, r7, pc}
 8014a76:	bf00      	nop
 8014a78:	08023bf4 	.word	0x08023bf4

08014a7c <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8014a7c:	b590      	push	{r4, r7, lr}
 8014a7e:	b08b      	sub	sp, #44	; 0x2c
 8014a80:	af06      	add	r7, sp, #24
 8014a82:	60f8      	str	r0, [r7, #12]
 8014a84:	60b9      	str	r1, [r7, #8]
 8014a86:	607a      	str	r2, [r7, #4]
 8014a88:	603b      	str	r3, [r7, #0]
        reportFailure("Memory corruption (written out of bounds?)\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8014a8a:	68bb      	ldr	r3, [r7, #8]
 8014a8c:	68d8      	ldr	r0, [r3, #12]
 8014a8e:	68bb      	ldr	r3, [r7, #8]
 8014a90:	691c      	ldr	r4, [r3, #16]
 8014a92:	68bb      	ldr	r3, [r7, #8]
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	68ba      	ldr	r2, [r7, #8]
 8014a98:	6952      	ldr	r2, [r2, #20]
 8014a9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014a9c:	9105      	str	r1, [sp, #20]
 8014a9e:	6a39      	ldr	r1, [r7, #32]
 8014aa0:	9104      	str	r1, [sp, #16]
 8014aa2:	6839      	ldr	r1, [r7, #0]
 8014aa4:	9103      	str	r1, [sp, #12]
 8014aa6:	6879      	ldr	r1, [r7, #4]
 8014aa8:	9102      	str	r1, [sp, #8]
 8014aaa:	9201      	str	r2, [sp, #4]
 8014aac:	9300      	str	r3, [sp, #0]
 8014aae:	4623      	mov	r3, r4
 8014ab0:	4602      	mov	r2, r0
 8014ab2:	4904      	ldr	r1, [pc, #16]	; (8014ac4 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8014ab4:	68f8      	ldr	r0, [r7, #12]
 8014ab6:	f000 f807 	bl	8014ac8 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8014aba:	bf00      	nop
 8014abc:	3714      	adds	r7, #20
 8014abe:	46bd      	mov	sp, r7
 8014ac0:	bd90      	pop	{r4, r7, pc}
 8014ac2:	bf00      	nop
 8014ac4:	08023c1c 	.word	0x08023c1c

08014ac8 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportFailure(const char* message, const char* allocFile, size_t allocLine, size_t allocSize, TestMemoryAllocator* allocAllocator, const char* freeFile, size_t freeLine,
        TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8014ac8:	b590      	push	{r4, r7, lr}
 8014aca:	b087      	sub	sp, #28
 8014acc:	af02      	add	r7, sp, #8
 8014ace:	60f8      	str	r0, [r7, #12]
 8014ad0:	60b9      	str	r1, [r7, #8]
 8014ad2:	607a      	str	r2, [r7, #4]
 8014ad4:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("%s", message);
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	3308      	adds	r3, #8
 8014ada:	68ba      	ldr	r2, [r7, #8]
 8014adc:	4910      	ldr	r1, [pc, #64]	; (8014b20 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure+0x58>)
 8014ade:	4618      	mov	r0, r3
 8014ae0:	f7ff fcf0 	bl	80144c4 <_ZN18SimpleStringBuffer3addEPKcz>
    addAllocationLocation(allocFile, allocLine, allocSize, allocAllocator);
 8014ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ae6:	9300      	str	r3, [sp, #0]
 8014ae8:	6a3b      	ldr	r3, [r7, #32]
 8014aea:	683a      	ldr	r2, [r7, #0]
 8014aec:	6879      	ldr	r1, [r7, #4]
 8014aee:	68f8      	ldr	r0, [r7, #12]
 8014af0:	f7ff fe36 	bl	8014760 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>
    addDeallocationLocation(freeFile, freeLine, freeAllocator);
 8014af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014af6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014af8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014afa:	68f8      	ldr	r0, [r7, #12]
 8014afc:	f7ff fe52 	bl	80147a4 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>
    reporter->fail(toString());
 8014b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	3308      	adds	r3, #8
 8014b06:	681c      	ldr	r4, [r3, #0]
 8014b08:	68f8      	ldr	r0, [r7, #12]
 8014b0a:	f000 f80b 	bl	8014b24 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8014b0e:	4603      	mov	r3, r0
 8014b10:	4619      	mov	r1, r3
 8014b12:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014b14:	47a0      	blx	r4
}
 8014b16:	bf00      	nop
 8014b18:	3714      	adds	r7, #20
 8014b1a:	46bd      	mov	sp, r7
 8014b1c:	bd90      	pop	{r4, r7, pc}
 8014b1e:	bf00      	nop
 8014b20:	08023c48 	.word	0x08023c48

08014b24 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>:


char* MemoryLeakOutputStringBuffer::toString()
{
 8014b24:	b580      	push	{r7, lr}
 8014b26:	b082      	sub	sp, #8
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	6078      	str	r0, [r7, #4]
    return outputBuffer_.toString();
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	3308      	adds	r3, #8
 8014b30:	4618      	mov	r0, r3
 8014b32:	f7ff fdad 	bl	8014690 <_ZN18SimpleStringBuffer8toStringEv>
 8014b36:	4603      	mov	r3, r0
}
 8014b38:	4618      	mov	r0, r3
 8014b3a:	3708      	adds	r7, #8
 8014b3c:	46bd      	mov	sp, r7
 8014b3e:	bd80      	pop	{r7, pc}

08014b40 <_ZN28MemoryLeakOutputStringBuffer5clearEv>:

void MemoryLeakOutputStringBuffer::clear()
{
 8014b40:	b580      	push	{r7, lr}
 8014b42:	b082      	sub	sp, #8
 8014b44:	af00      	add	r7, sp, #0
 8014b46:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	3308      	adds	r3, #8
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	f7ff fca7 	bl	80144a0 <_ZN18SimpleStringBuffer5clearEv>
}
 8014b52:	bf00      	nop
 8014b54:	3708      	adds	r7, #8
 8014b56:	46bd      	mov	sp, r7
 8014b58:	bd80      	pop	{r7, pc}

08014b5a <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>:

////////////////////////

void MemoryLeakDetectorNode::init(char* memory, unsigned number, size_t size, TestMemoryAllocator* allocator, MemLeakPeriod period, unsigned char allocation_stage, const char* file, size_t line)
{
 8014b5a:	b480      	push	{r7}
 8014b5c:	b085      	sub	sp, #20
 8014b5e:	af00      	add	r7, sp, #0
 8014b60:	60f8      	str	r0, [r7, #12]
 8014b62:	60b9      	str	r1, [r7, #8]
 8014b64:	607a      	str	r2, [r7, #4]
 8014b66:	603b      	str	r3, [r7, #0]
    number_ = number;
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	687a      	ldr	r2, [r7, #4]
 8014b6c:	605a      	str	r2, [r3, #4]
    memory_ = memory;
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	68ba      	ldr	r2, [r7, #8]
 8014b72:	609a      	str	r2, [r3, #8]
    size_ = size;
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	683a      	ldr	r2, [r7, #0]
 8014b78:	601a      	str	r2, [r3, #0]
    allocator_ = allocator;
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	69ba      	ldr	r2, [r7, #24]
 8014b7e:	615a      	str	r2, [r3, #20]
    period_ = period;
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	7f3a      	ldrb	r2, [r7, #28]
 8014b84:	761a      	strb	r2, [r3, #24]
    allocation_stage_ = allocation_stage;
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	f897 2020 	ldrb.w	r2, [r7, #32]
 8014b8c:	765a      	strb	r2, [r3, #25]
    file_ = file;
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014b92:	60da      	str	r2, [r3, #12]
    line_ = line;
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014b98:	611a      	str	r2, [r3, #16]
}
 8014b9a:	bf00      	nop
 8014b9c:	3714      	adds	r7, #20
 8014b9e:	46bd      	mov	sp, r7
 8014ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ba4:	4770      	bx	lr

08014ba6 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>:

///////////////////////

bool MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8014ba6:	b480      	push	{r7}
 8014ba8:	b085      	sub	sp, #20
 8014baa:	af00      	add	r7, sp, #0
 8014bac:	60f8      	str	r0, [r7, #12]
 8014bae:	60b9      	str	r1, [r7, #8]
 8014bb0:	4613      	mov	r3, r2
 8014bb2:	71fb      	strb	r3, [r7, #7]
    return period == mem_leak_period_all || node->period_ == period || (node->period_ != mem_leak_period_disabled && period == mem_leak_period_enabled);
 8014bb4:	79fb      	ldrb	r3, [r7, #7]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d00b      	beq.n	8014bd2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 8014bba:	68bb      	ldr	r3, [r7, #8]
 8014bbc:	7e1b      	ldrb	r3, [r3, #24]
 8014bbe:	79fa      	ldrb	r2, [r7, #7]
 8014bc0:	429a      	cmp	r2, r3
 8014bc2:	d006      	beq.n	8014bd2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 8014bc4:	68bb      	ldr	r3, [r7, #8]
 8014bc6:	7e1b      	ldrb	r3, [r3, #24]
 8014bc8:	2b01      	cmp	r3, #1
 8014bca:	d004      	beq.n	8014bd6 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8014bcc:	79fb      	ldrb	r3, [r7, #7]
 8014bce:	2b02      	cmp	r3, #2
 8014bd0:	d101      	bne.n	8014bd6 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8014bd2:	2301      	movs	r3, #1
 8014bd4:	e000      	b.n	8014bd8 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x32>
 8014bd6:	2300      	movs	r3, #0
}
 8014bd8:	4618      	mov	r0, r3
 8014bda:	3714      	adds	r7, #20
 8014bdc:	46bd      	mov	sp, r7
 8014bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be2:	4770      	bx	lr

08014be4 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>:
        cur = cur->next_;
    }
}

void MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode* node)
{
 8014be4:	b480      	push	{r7}
 8014be6:	b083      	sub	sp, #12
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	6078      	str	r0, [r7, #4]
 8014bec:	6039      	str	r1, [r7, #0]
    node->next_ = head_;
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	681a      	ldr	r2, [r3, #0]
 8014bf2:	683b      	ldr	r3, [r7, #0]
 8014bf4:	61da      	str	r2, [r3, #28]
    head_ = node;
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	683a      	ldr	r2, [r7, #0]
 8014bfa:	601a      	str	r2, [r3, #0]
}
 8014bfc:	bf00      	nop
 8014bfe:	370c      	adds	r7, #12
 8014c00:	46bd      	mov	sp, r7
 8014c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c06:	4770      	bx	lr

08014c08 <_ZN22MemoryLeakDetectorList10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::removeNode(char* memory)
{
 8014c08:	b480      	push	{r7}
 8014c0a:	b085      	sub	sp, #20
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	6078      	str	r0, [r7, #4]
 8014c10:	6039      	str	r1, [r7, #0]
    MemoryLeakDetectorNode* cur = head_;
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	60fb      	str	r3, [r7, #12]
    MemoryLeakDetectorNode* prev = NULLPTR;
 8014c18:	2300      	movs	r3, #0
 8014c1a:	60bb      	str	r3, [r7, #8]
    while (cur) {
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d019      	beq.n	8014c56 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x4e>
        if (cur->memory_ == memory) {
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	689b      	ldr	r3, [r3, #8]
 8014c26:	683a      	ldr	r2, [r7, #0]
 8014c28:	429a      	cmp	r2, r3
 8014c2a:	d10e      	bne.n	8014c4a <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x42>
            if (prev) {
 8014c2c:	68bb      	ldr	r3, [r7, #8]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d005      	beq.n	8014c3e <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x36>
                prev->next_ = cur->next_;
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	69da      	ldr	r2, [r3, #28]
 8014c36:	68bb      	ldr	r3, [r7, #8]
 8014c38:	61da      	str	r2, [r3, #28]
                return cur;
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	e00c      	b.n	8014c58 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
            else {
                head_ = cur->next_;
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	69da      	ldr	r2, [r3, #28]
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	601a      	str	r2, [r3, #0]
                return cur;
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	e006      	b.n	8014c58 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
        }
        prev = cur;
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	60bb      	str	r3, [r7, #8]
        cur = cur->next_;
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	69db      	ldr	r3, [r3, #28]
 8014c52:	60fb      	str	r3, [r7, #12]
    while (cur) {
 8014c54:	e7e2      	b.n	8014c1c <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x14>
    }
    return NULLPTR;
 8014c56:	2300      	movs	r3, #0
}
 8014c58:	4618      	mov	r0, r3
 8014c5a:	3714      	adds	r7, #20
 8014c5c:	46bd      	mov	sp, r7
 8014c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c62:	4770      	bx	lr

08014c64 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::retrieveNode(char* memory)
{
 8014c64:	b480      	push	{r7}
 8014c66:	b085      	sub	sp, #20
 8014c68:	af00      	add	r7, sp, #0
 8014c6a:	6078      	str	r0, [r7, #4]
 8014c6c:	6039      	str	r1, [r7, #0]
  MemoryLeakDetectorNode* cur = head_;
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d00a      	beq.n	8014c90 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2c>
    if (cur->memory_ == memory)
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	689b      	ldr	r3, [r3, #8]
 8014c7e:	683a      	ldr	r2, [r7, #0]
 8014c80:	429a      	cmp	r2, r3
 8014c82:	d101      	bne.n	8014c88 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x24>
      return cur;
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	e004      	b.n	8014c92 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2e>
    cur = cur->next_;
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	69db      	ldr	r3, [r3, #28]
 8014c8c:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8014c8e:	e7f1      	b.n	8014c74 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x10>
  }
  return NULLPTR;
 8014c90:	2300      	movs	r3, #0
}
 8014c92:	4618      	mov	r0, r3
 8014c94:	3714      	adds	r7, #20
 8014c96:	46bd      	mov	sp, r7
 8014c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c9c:	4770      	bx	lr

08014c9e <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8014c9e:	b580      	push	{r7, lr}
 8014ca0:	b086      	sub	sp, #24
 8014ca2:	af00      	add	r7, sp, #0
 8014ca4:	60f8      	str	r0, [r7, #12]
 8014ca6:	60b9      	str	r1, [r7, #8]
 8014ca8:	4613      	mov	r3, r2
 8014caa:	71fb      	strb	r3, [r7, #7]
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8014cac:	68bb      	ldr	r3, [r7, #8]
 8014cae:	617b      	str	r3, [r7, #20]
 8014cb0:	697b      	ldr	r3, [r7, #20]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d00e      	beq.n	8014cd4 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x36>
        if (isInPeriod(cur, period)) return cur;
 8014cb6:	79fb      	ldrb	r3, [r7, #7]
 8014cb8:	461a      	mov	r2, r3
 8014cba:	6979      	ldr	r1, [r7, #20]
 8014cbc:	68f8      	ldr	r0, [r7, #12]
 8014cbe:	f7ff ff72 	bl	8014ba6 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8014cc2:	4603      	mov	r3, r0
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d001      	beq.n	8014ccc <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2e>
 8014cc8:	697b      	ldr	r3, [r7, #20]
 8014cca:	e004      	b.n	8014cd6 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x38>
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8014ccc:	697b      	ldr	r3, [r7, #20]
 8014cce:	69db      	ldr	r3, [r3, #28]
 8014cd0:	617b      	str	r3, [r7, #20]
 8014cd2:	e7ed      	b.n	8014cb0 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x12>
    return NULLPTR;
 8014cd4:	2300      	movs	r3, #0
}
 8014cd6:	4618      	mov	r0, r3
 8014cd8:	3718      	adds	r7, #24
 8014cda:	46bd      	mov	sp, r7
 8014cdc:	bd80      	pop	{r7, pc}

08014cde <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>:
        if (isInAllocationStage(cur, allocation_stage)) return cur;
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod period)
{
 8014cde:	b580      	push	{r7, lr}
 8014ce0:	b082      	sub	sp, #8
 8014ce2:	af00      	add	r7, sp, #0
 8014ce4:	6078      	str	r0, [r7, #4]
 8014ce6:	460b      	mov	r3, r1
 8014ce8:	70fb      	strb	r3, [r7, #3]
    return getLeakFrom(head_, period);
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	78fa      	ldrb	r2, [r7, #3]
 8014cf0:	4619      	mov	r1, r3
 8014cf2:	6878      	ldr	r0, [r7, #4]
 8014cf4:	f7ff ffd3 	bl	8014c9e <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8014cf8:	4603      	mov	r3, r0
}
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	3708      	adds	r7, #8
 8014cfe:	46bd      	mov	sp, r7
 8014d00:	bd80      	pop	{r7, pc}

08014d02 <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
{
    return getLeakForAllocationStageFrom(head_, allocation_stage);
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8014d02:	b580      	push	{r7, lr}
 8014d04:	b084      	sub	sp, #16
 8014d06:	af00      	add	r7, sp, #0
 8014d08:	60f8      	str	r0, [r7, #12]
 8014d0a:	60b9      	str	r1, [r7, #8]
 8014d0c:	4613      	mov	r3, r2
 8014d0e:	71fb      	strb	r3, [r7, #7]
    return getLeakFrom(node->next_, period);
 8014d10:	68bb      	ldr	r3, [r7, #8]
 8014d12:	69db      	ldr	r3, [r3, #28]
 8014d14:	79fa      	ldrb	r2, [r7, #7]
 8014d16:	4619      	mov	r1, r3
 8014d18:	68f8      	ldr	r0, [r7, #12]
 8014d1a:	f7ff ffc0 	bl	8014c9e <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8014d1e:	4603      	mov	r3, r0
}
 8014d20:	4618      	mov	r0, r3
 8014d22:	3710      	adds	r7, #16
 8014d24:	46bd      	mov	sp, r7
 8014d26:	bd80      	pop	{r7, pc}

08014d28 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>:
}



size_t MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod period)
{
 8014d28:	b580      	push	{r7, lr}
 8014d2a:	b084      	sub	sp, #16
 8014d2c:	af00      	add	r7, sp, #0
 8014d2e:	6078      	str	r0, [r7, #4]
 8014d30:	460b      	mov	r3, r1
 8014d32:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8014d34:	2300      	movs	r3, #0
 8014d36:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	60bb      	str	r3, [r7, #8]
 8014d3e:	68bb      	ldr	r3, [r7, #8]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d00f      	beq.n	8014d64 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x3c>
        if (isInPeriod(node, period)) total_leaks++;
 8014d44:	78fb      	ldrb	r3, [r7, #3]
 8014d46:	461a      	mov	r2, r3
 8014d48:	68b9      	ldr	r1, [r7, #8]
 8014d4a:	6878      	ldr	r0, [r7, #4]
 8014d4c:	f7ff ff2b 	bl	8014ba6 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8014d50:	4603      	mov	r3, r0
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d002      	beq.n	8014d5c <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x34>
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	3301      	adds	r3, #1
 8014d5a:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8014d5c:	68bb      	ldr	r3, [r7, #8]
 8014d5e:	69db      	ldr	r3, [r3, #28]
 8014d60:	60bb      	str	r3, [r7, #8]
 8014d62:	e7ec      	b.n	8014d3e <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x16>
    }
    return total_leaks;
 8014d64:	68fb      	ldr	r3, [r7, #12]
}
 8014d66:	4618      	mov	r0, r3
 8014d68:	3710      	adds	r7, #16
 8014d6a:	46bd      	mov	sp, r7
 8014d6c:	bd80      	pop	{r7, pc}
	...

08014d70 <_ZN23MemoryLeakDetectorTable4hashEPc>:

/////////////////////////////////////////////////////////////

unsigned long MemoryLeakDetectorTable::hash(char* memory)
{
 8014d70:	b480      	push	{r7}
 8014d72:	b083      	sub	sp, #12
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	6078      	str	r0, [r7, #4]
 8014d78:	6039      	str	r1, [r7, #0]
    return (unsigned long)((size_t)memory % hash_prime);
 8014d7a:	6839      	ldr	r1, [r7, #0]
 8014d7c:	4b09      	ldr	r3, [pc, #36]	; (8014da4 <_ZN23MemoryLeakDetectorTable4hashEPc+0x34>)
 8014d7e:	fba3 2301 	umull	r2, r3, r3, r1
 8014d82:	1aca      	subs	r2, r1, r3
 8014d84:	0852      	lsrs	r2, r2, #1
 8014d86:	4413      	add	r3, r2
 8014d88:	099a      	lsrs	r2, r3, #6
 8014d8a:	4613      	mov	r3, r2
 8014d8c:	00db      	lsls	r3, r3, #3
 8014d8e:	4413      	add	r3, r2
 8014d90:	00db      	lsls	r3, r3, #3
 8014d92:	4413      	add	r3, r2
 8014d94:	1aca      	subs	r2, r1, r3
 8014d96:	4613      	mov	r3, r2
}
 8014d98:	4618      	mov	r0, r3
 8014d9a:	370c      	adds	r7, #12
 8014d9c:	46bd      	mov	sp, r7
 8014d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da2:	4770      	bx	lr
 8014da4:	c0e07039 	.word	0xc0e07039

08014da8 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>:
    for (int i = 0; i < hash_prime; i++)
        table_[i].clearAllAccounting(period);
}

void MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode* node)
{
 8014da8:	b580      	push	{r7, lr}
 8014daa:	b082      	sub	sp, #8
 8014dac:	af00      	add	r7, sp, #0
 8014dae:	6078      	str	r0, [r7, #4]
 8014db0:	6039      	str	r1, [r7, #0]
    table_[hash(node->memory_)].addNewNode(node);
 8014db2:	683b      	ldr	r3, [r7, #0]
 8014db4:	689b      	ldr	r3, [r3, #8]
 8014db6:	4619      	mov	r1, r3
 8014db8:	6878      	ldr	r0, [r7, #4]
 8014dba:	f7ff ffd9 	bl	8014d70 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8014dbe:	4603      	mov	r3, r0
 8014dc0:	009b      	lsls	r3, r3, #2
 8014dc2:	687a      	ldr	r2, [r7, #4]
 8014dc4:	4413      	add	r3, r2
 8014dc6:	6839      	ldr	r1, [r7, #0]
 8014dc8:	4618      	mov	r0, r3
 8014dca:	f7ff ff0b 	bl	8014be4 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>
}
 8014dce:	bf00      	nop
 8014dd0:	3708      	adds	r7, #8
 8014dd2:	46bd      	mov	sp, r7
 8014dd4:	bd80      	pop	{r7, pc}

08014dd6 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::removeNode(char* memory)
{
 8014dd6:	b580      	push	{r7, lr}
 8014dd8:	b082      	sub	sp, #8
 8014dda:	af00      	add	r7, sp, #0
 8014ddc:	6078      	str	r0, [r7, #4]
 8014dde:	6039      	str	r1, [r7, #0]
    return table_[hash(memory)].removeNode(memory);
 8014de0:	6839      	ldr	r1, [r7, #0]
 8014de2:	6878      	ldr	r0, [r7, #4]
 8014de4:	f7ff ffc4 	bl	8014d70 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8014de8:	4603      	mov	r3, r0
 8014dea:	009b      	lsls	r3, r3, #2
 8014dec:	687a      	ldr	r2, [r7, #4]
 8014dee:	4413      	add	r3, r2
 8014df0:	6839      	ldr	r1, [r7, #0]
 8014df2:	4618      	mov	r0, r3
 8014df4:	f7ff ff08 	bl	8014c08 <_ZN22MemoryLeakDetectorList10removeNodeEPc>
 8014df8:	4603      	mov	r3, r0
}
 8014dfa:	4618      	mov	r0, r3
 8014dfc:	3708      	adds	r7, #8
 8014dfe:	46bd      	mov	sp, r7
 8014e00:	bd80      	pop	{r7, pc}

08014e02 <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::retrieveNode(char* memory)
{
 8014e02:	b580      	push	{r7, lr}
 8014e04:	b082      	sub	sp, #8
 8014e06:	af00      	add	r7, sp, #0
 8014e08:	6078      	str	r0, [r7, #4]
 8014e0a:	6039      	str	r1, [r7, #0]
  return table_[hash(memory)].retrieveNode(memory);
 8014e0c:	6839      	ldr	r1, [r7, #0]
 8014e0e:	6878      	ldr	r0, [r7, #4]
 8014e10:	f7ff ffae 	bl	8014d70 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8014e14:	4603      	mov	r3, r0
 8014e16:	009b      	lsls	r3, r3, #2
 8014e18:	687a      	ldr	r2, [r7, #4]
 8014e1a:	4413      	add	r3, r2
 8014e1c:	6839      	ldr	r1, [r7, #0]
 8014e1e:	4618      	mov	r0, r3
 8014e20:	f7ff ff20 	bl	8014c64 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>
 8014e24:	4603      	mov	r3, r0
}
 8014e26:	4618      	mov	r0, r3
 8014e28:	3708      	adds	r7, #8
 8014e2a:	46bd      	mov	sp, r7
 8014e2c:	bd80      	pop	{r7, pc}

08014e2e <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod period)
{
 8014e2e:	b580      	push	{r7, lr}
 8014e30:	b084      	sub	sp, #16
 8014e32:	af00      	add	r7, sp, #0
 8014e34:	6078      	str	r0, [r7, #4]
 8014e36:	460b      	mov	r3, r1
 8014e38:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8014e3a:	2300      	movs	r3, #0
 8014e3c:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8014e3e:	2300      	movs	r3, #0
 8014e40:	60bb      	str	r3, [r7, #8]
 8014e42:	68bb      	ldr	r3, [r7, #8]
 8014e44:	2b48      	cmp	r3, #72	; 0x48
 8014e46:	dc10      	bgt.n	8014e6a <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x3c>
        total_leaks += table_[i].getTotalLeaks(period);
 8014e48:	68bb      	ldr	r3, [r7, #8]
 8014e4a:	009b      	lsls	r3, r3, #2
 8014e4c:	687a      	ldr	r2, [r7, #4]
 8014e4e:	4413      	add	r3, r2
 8014e50:	78fa      	ldrb	r2, [r7, #3]
 8014e52:	4611      	mov	r1, r2
 8014e54:	4618      	mov	r0, r3
 8014e56:	f7ff ff67 	bl	8014d28 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>
 8014e5a:	4602      	mov	r2, r0
 8014e5c:	68fb      	ldr	r3, [r7, #12]
 8014e5e:	4413      	add	r3, r2
 8014e60:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8014e62:	68bb      	ldr	r3, [r7, #8]
 8014e64:	3301      	adds	r3, #1
 8014e66:	60bb      	str	r3, [r7, #8]
 8014e68:	e7eb      	b.n	8014e42 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x14>
    return total_leaks;
 8014e6a:	68fb      	ldr	r3, [r7, #12]
}
 8014e6c:	4618      	mov	r0, r3
 8014e6e:	3710      	adds	r7, #16
 8014e70:	46bd      	mov	sp, r7
 8014e72:	bd80      	pop	{r7, pc}

08014e74 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod period)
{
 8014e74:	b580      	push	{r7, lr}
 8014e76:	b084      	sub	sp, #16
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	6078      	str	r0, [r7, #4]
 8014e7c:	460b      	mov	r3, r1
 8014e7e:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < hash_prime; i++) {
 8014e80:	2300      	movs	r3, #0
 8014e82:	60fb      	str	r3, [r7, #12]
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	2b48      	cmp	r3, #72	; 0x48
 8014e88:	dc12      	bgt.n	8014eb0 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3c>
        MemoryLeakDetectorNode* node = table_[i].getFirstLeak(period);
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	009b      	lsls	r3, r3, #2
 8014e8e:	687a      	ldr	r2, [r7, #4]
 8014e90:	4413      	add	r3, r2
 8014e92:	78fa      	ldrb	r2, [r7, #3]
 8014e94:	4611      	mov	r1, r2
 8014e96:	4618      	mov	r0, r3
 8014e98:	f7ff ff21 	bl	8014cde <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8014e9c:	60b8      	str	r0, [r7, #8]
        if (node) return node;
 8014e9e:	68bb      	ldr	r3, [r7, #8]
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d001      	beq.n	8014ea8 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x34>
 8014ea4:	68bb      	ldr	r3, [r7, #8]
 8014ea6:	e004      	b.n	8014eb2 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3e>
    for (int i = 0; i < hash_prime; i++) {
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	3301      	adds	r3, #1
 8014eac:	60fb      	str	r3, [r7, #12]
 8014eae:	e7e9      	b.n	8014e84 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x10>
    }
    return NULLPTR;
 8014eb0:	2300      	movs	r3, #0
}
 8014eb2:	4618      	mov	r0, r3
 8014eb4:	3710      	adds	r7, #16
 8014eb6:	46bd      	mov	sp, r7
 8014eb8:	bd80      	pop	{r7, pc}

08014eba <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
    }
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode* leak, MemLeakPeriod period)
{
 8014eba:	b580      	push	{r7, lr}
 8014ebc:	b086      	sub	sp, #24
 8014ebe:	af00      	add	r7, sp, #0
 8014ec0:	60f8      	str	r0, [r7, #12]
 8014ec2:	60b9      	str	r1, [r7, #8]
 8014ec4:	4613      	mov	r3, r2
 8014ec6:	71fb      	strb	r3, [r7, #7]
    unsigned long i = hash(leak->memory_);
 8014ec8:	68bb      	ldr	r3, [r7, #8]
 8014eca:	689b      	ldr	r3, [r3, #8]
 8014ecc:	4619      	mov	r1, r3
 8014ece:	68f8      	ldr	r0, [r7, #12]
 8014ed0:	f7ff ff4e 	bl	8014d70 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8014ed4:	6178      	str	r0, [r7, #20]
    MemoryLeakDetectorNode* node = table_[i].getNextLeak(leak, period);
 8014ed6:	697b      	ldr	r3, [r7, #20]
 8014ed8:	009b      	lsls	r3, r3, #2
 8014eda:	68fa      	ldr	r2, [r7, #12]
 8014edc:	4413      	add	r3, r2
 8014ede:	79fa      	ldrb	r2, [r7, #7]
 8014ee0:	68b9      	ldr	r1, [r7, #8]
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	f7ff ff0d 	bl	8014d02 <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8014ee8:	6138      	str	r0, [r7, #16]
    if (node) return node;
 8014eea:	693b      	ldr	r3, [r7, #16]
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d001      	beq.n	8014ef4 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x3a>
 8014ef0:	693b      	ldr	r3, [r7, #16]
 8014ef2:	e019      	b.n	8014f28 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>

    for (++i; i < hash_prime; i++) {
 8014ef4:	697b      	ldr	r3, [r7, #20]
 8014ef6:	3301      	adds	r3, #1
 8014ef8:	617b      	str	r3, [r7, #20]
 8014efa:	697b      	ldr	r3, [r7, #20]
 8014efc:	2b48      	cmp	r3, #72	; 0x48
 8014efe:	d812      	bhi.n	8014f26 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6c>
        node = table_[i].getFirstLeak(period);
 8014f00:	697b      	ldr	r3, [r7, #20]
 8014f02:	009b      	lsls	r3, r3, #2
 8014f04:	68fa      	ldr	r2, [r7, #12]
 8014f06:	4413      	add	r3, r2
 8014f08:	79fa      	ldrb	r2, [r7, #7]
 8014f0a:	4611      	mov	r1, r2
 8014f0c:	4618      	mov	r0, r3
 8014f0e:	f7ff fee6 	bl	8014cde <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8014f12:	6138      	str	r0, [r7, #16]
        if (node) return node;
 8014f14:	693b      	ldr	r3, [r7, #16]
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d001      	beq.n	8014f1e <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x64>
 8014f1a:	693b      	ldr	r3, [r7, #16]
 8014f1c:	e004      	b.n	8014f28 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>
    for (++i; i < hash_prime; i++) {
 8014f1e:	697b      	ldr	r3, [r7, #20]
 8014f20:	3301      	adds	r3, #1
 8014f22:	617b      	str	r3, [r7, #20]
 8014f24:	e7e9      	b.n	8014efa <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x40>
    }
    return NULLPTR;
 8014f26:	2300      	movs	r3, #0
}
 8014f28:	4618      	mov	r0, r3
 8014f2a:	3718      	adds	r7, #24
 8014f2c:	46bd      	mov	sp, r7
 8014f2e:	bd80      	pop	{r7, pc}

08014f30 <_ZN23MemoryLeakDetectorTableC1Ev>:

private:
    MemoryLeakDetectorNode* head_;
};

struct MemoryLeakDetectorTable
 8014f30:	b5b0      	push	{r4, r5, r7, lr}
 8014f32:	b082      	sub	sp, #8
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	2448      	movs	r4, #72	; 0x48
 8014f3c:	461d      	mov	r5, r3
 8014f3e:	2c00      	cmp	r4, #0
 8014f40:	db05      	blt.n	8014f4e <_ZN23MemoryLeakDetectorTableC1Ev+0x1e>
 8014f42:	4628      	mov	r0, r5
 8014f44:	f7ff fa84 	bl	8014450 <_ZN22MemoryLeakDetectorListC1Ev>
 8014f48:	3504      	adds	r5, #4
 8014f4a:	3c01      	subs	r4, #1
 8014f4c:	e7f7      	b.n	8014f3e <_ZN23MemoryLeakDetectorTableC1Ev+0xe>
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	4618      	mov	r0, r3
 8014f52:	3708      	adds	r7, #8
 8014f54:	46bd      	mov	sp, r7
 8014f56:	bdb0      	pop	{r4, r5, r7, pc}

08014f58 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>:
    return NULLPTR;
}

/////////////////////////////////////////////////////////////

MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure* reporter)
 8014f58:	b590      	push	{r4, r7, lr}
 8014f5a:	b083      	sub	sp, #12
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	6078      	str	r0, [r7, #4]
 8014f60:	6039      	str	r1, [r7, #0]
 8014f62:	4a1d      	ldr	r2, [pc, #116]	; (8014fd8 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x80>)
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	601a      	str	r2, [r3, #0]
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	330c      	adds	r3, #12
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	f7ff fbe3 	bl	8014738 <_ZN28MemoryLeakOutputStringBufferC1Ev>
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014f78:	331c      	adds	r3, #28
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	f7ff ffd8 	bl	8014f30 <_ZN23MemoryLeakDetectorTableC1Ev>
{
    doAllocationTypeChecking_ = true;
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014f86:	2201      	movs	r2, #1
 8014f88:	701a      	strb	r2, [r3, #0]
    allocationSequenceNumber_ = 1;
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014f90:	3304      	adds	r3, #4
 8014f92:	2201      	movs	r2, #1
 8014f94:	601a      	str	r2, [r3, #0]
    current_period_ = mem_leak_period_disabled;
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	2201      	movs	r2, #1
 8014f9a:	721a      	strb	r2, [r3, #8]
    current_allocation_stage_ = 0;
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014fa2:	3308      	adds	r3, #8
 8014fa4:	2200      	movs	r2, #0
 8014fa6:	701a      	strb	r2, [r3, #0]
    reporter_ = reporter;
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	683a      	ldr	r2, [r7, #0]
 8014fac:	605a      	str	r2, [r3, #4]
    mutex_ = new SimpleMutex;
 8014fae:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 8014fb2:	490a      	ldr	r1, [pc, #40]	; (8014fdc <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x84>)
 8014fb4:	2004      	movs	r0, #4
 8014fb6:	f7f3 fb17 	bl	80085e8 <_ZnwjPKci>
 8014fba:	4604      	mov	r4, r0
 8014fbc:	4620      	mov	r0, r4
 8014fbe:	f7f5 fbe7 	bl	800a790 <_ZN11SimpleMutexC1Ev>
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014fc8:	330c      	adds	r3, #12
 8014fca:	601c      	str	r4, [r3, #0]
}
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	4618      	mov	r0, r3
 8014fd0:	370c      	adds	r7, #12
 8014fd2:	46bd      	mov	sp, r7
 8014fd4:	bd90      	pop	{r4, r7, pc}
 8014fd6:	bf00      	nop
 8014fd8:	08025fb8 	.word	0x08025fb8
 8014fdc:	08023c4c 	.word	0x08023c4c

08014fe0 <_ZN18MemoryLeakDetectorD1Ev>:

MemoryLeakDetector::~MemoryLeakDetector()
 8014fe0:	b590      	push	{r4, r7, lr}
 8014fe2:	b083      	sub	sp, #12
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	6078      	str	r0, [r7, #4]
 8014fe8:	4a0e      	ldr	r2, [pc, #56]	; (8015024 <_ZN18MemoryLeakDetectorD1Ev+0x44>)
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	601a      	str	r2, [r3, #0]
{
    if (mutex_)
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014ff4:	330c      	adds	r3, #12
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d00d      	beq.n	8015018 <_ZN18MemoryLeakDetectorD1Ev+0x38>
    {
        delete mutex_;
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8015002:	330c      	adds	r3, #12
 8015004:	681c      	ldr	r4, [r3, #0]
 8015006:	2c00      	cmp	r4, #0
 8015008:	d006      	beq.n	8015018 <_ZN18MemoryLeakDetectorD1Ev+0x38>
 801500a:	4620      	mov	r0, r4
 801500c:	f7f5 fbd2 	bl	800a7b4 <_ZN11SimpleMutexD1Ev>
 8015010:	2104      	movs	r1, #4
 8015012:	4620      	mov	r0, r4
 8015014:	f7f3 fafc 	bl	8008610 <_ZdlPvj>
    }
}
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	4618      	mov	r0, r3
 801501c:	370c      	adds	r7, #12
 801501e:	46bd      	mov	sp, r7
 8015020:	bd90      	pop	{r4, r7, pc}
 8015022:	bf00      	nop
 8015024:	08025fb8 	.word	0x08025fb8

08015028 <_ZN18MemoryLeakDetectorD0Ev>:
MemoryLeakDetector::~MemoryLeakDetector()
 8015028:	b580      	push	{r7, lr}
 801502a:	b082      	sub	sp, #8
 801502c:	af00      	add	r7, sp, #0
 801502e:	6078      	str	r0, [r7, #4]
}
 8015030:	6878      	ldr	r0, [r7, #4]
 8015032:	f7ff ffd5 	bl	8014fe0 <_ZN18MemoryLeakDetectorD1Ev>
 8015036:	f241 1150 	movw	r1, #4432	; 0x1150
 801503a:	6878      	ldr	r0, [r7, #4]
 801503c:	f7f3 fae8 	bl	8008610 <_ZdlPvj>
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	4618      	mov	r0, r3
 8015044:	3708      	adds	r7, #8
 8015046:	46bd      	mov	sp, r7
 8015048:	bd80      	pop	{r7, pc}

0801504a <_ZN18MemoryLeakDetector13startCheckingEv>:
{
    memoryTable_.clearAllAccounting(period);
}

void MemoryLeakDetector::startChecking()
{
 801504a:	b580      	push	{r7, lr}
 801504c:	b082      	sub	sp, #8
 801504e:	af00      	add	r7, sp, #0
 8015050:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	330c      	adds	r3, #12
 8015056:	4618      	mov	r0, r3
 8015058:	f7ff fd72 	bl	8014b40 <_ZN28MemoryLeakOutputStringBuffer5clearEv>
    current_period_ = mem_leak_period_checking;
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	2203      	movs	r2, #3
 8015060:	721a      	strb	r2, [r3, #8]
}
 8015062:	bf00      	nop
 8015064:	3708      	adds	r7, #8
 8015066:	46bd      	mov	sp, r7
 8015068:	bd80      	pop	{r7, pc}

0801506a <_ZN18MemoryLeakDetector12stopCheckingEv>:

void MemoryLeakDetector::stopChecking()
{
 801506a:	b480      	push	{r7}
 801506c:	b083      	sub	sp, #12
 801506e:	af00      	add	r7, sp, #0
 8015070:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	2202      	movs	r2, #2
 8015076:	721a      	strb	r2, [r3, #8]
}
 8015078:	bf00      	nop
 801507a:	370c      	adds	r7, #12
 801507c:	46bd      	mov	sp, r7
 801507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015082:	4770      	bx	lr

08015084 <_ZN18MemoryLeakDetector6enableEv>:
{
    return current_allocation_stage_;
}

void MemoryLeakDetector::enable()
{
 8015084:	b480      	push	{r7}
 8015086:	b083      	sub	sp, #12
 8015088:	af00      	add	r7, sp, #0
 801508a:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	2202      	movs	r2, #2
 8015090:	721a      	strb	r2, [r3, #8]
}
 8015092:	bf00      	nop
 8015094:	370c      	adds	r7, #12
 8015096:	46bd      	mov	sp, r7
 8015098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801509c:	4770      	bx	lr

0801509e <_ZN18MemoryLeakDetector8getMutexEv>:
{
    current_allocation_stage_--;
}

SimpleMutex *MemoryLeakDetector::getMutex()
{
 801509e:	b480      	push	{r7}
 80150a0:	b083      	sub	sp, #12
 80150a2:	af00      	add	r7, sp, #0
 80150a4:	6078      	str	r0, [r7, #4]
    return mutex_;
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80150ac:	330c      	adds	r3, #12
 80150ae:	681b      	ldr	r3, [r3, #0]
}
 80150b0:	4618      	mov	r0, r3
 80150b2:	370c      	adds	r7, #12
 80150b4:	46bd      	mov	sp, r7
 80150b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ba:	4770      	bx	lr

080150bc <_ZL31calculateVoidPointerAlignedSizej>:

static size_t calculateVoidPointerAlignedSize(size_t size)
{
 80150bc:	b480      	push	{r7}
 80150be:	b083      	sub	sp, #12
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	6078      	str	r0, [r7, #4]
#ifndef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
    return (sizeof(void*) - (size % sizeof(void*))) + size;
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	f023 0303 	bic.w	r3, r3, #3
 80150ca:	3304      	adds	r3, #4
#else
   return size;
#endif
}
 80150cc:	4618      	mov	r0, r3
 80150ce:	370c      	adds	r7, #12
 80150d0:	46bd      	mov	sp, r7
 80150d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d6:	4770      	bx	lr

080150d8 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>:

size_t MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(size_t size)
{
 80150d8:	b580      	push	{r7, lr}
 80150da:	b082      	sub	sp, #8
 80150dc:	af00      	add	r7, sp, #0
 80150de:	6078      	str	r0, [r7, #4]
 80150e0:	6039      	str	r1, [r7, #0]
    return calculateVoidPointerAlignedSize(size + memory_corruption_buffer_size);
 80150e2:	683b      	ldr	r3, [r7, #0]
 80150e4:	3303      	adds	r3, #3
 80150e6:	4618      	mov	r0, r3
 80150e8:	f7ff ffe8 	bl	80150bc <_ZL31calculateVoidPointerAlignedSizej>
 80150ec:	4603      	mov	r3, r0
}
 80150ee:	4618      	mov	r0, r3
 80150f0:	3708      	adds	r7, #8
 80150f2:	46bd      	mov	sp, r7
 80150f4:	bd80      	pop	{r7, pc}

080150f6 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>:

MemoryLeakDetectorNode* MemoryLeakDetector::getNodeFromMemoryPointer(char* memory, size_t memory_size)
{
 80150f6:	b580      	push	{r7, lr}
 80150f8:	b084      	sub	sp, #16
 80150fa:	af00      	add	r7, sp, #0
 80150fc:	60f8      	str	r0, [r7, #12]
 80150fe:	60b9      	str	r1, [r7, #8]
 8015100:	607a      	str	r2, [r7, #4]
    return (MemoryLeakDetectorNode*) (void*) (memory + sizeOfMemoryWithCorruptionInfo(memory_size));
 8015102:	6879      	ldr	r1, [r7, #4]
 8015104:	68f8      	ldr	r0, [r7, #12]
 8015106:	f7ff ffe7 	bl	80150d8 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 801510a:	4602      	mov	r2, r0
 801510c:	68bb      	ldr	r3, [r7, #8]
 801510e:	4413      	add	r3, r2
}
 8015110:	4618      	mov	r0, r3
 8015112:	3710      	adds	r7, #16
 8015114:	46bd      	mov	sp, r7
 8015116:	bd80      	pop	{r7, pc}

08015118 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>:

void MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode * node, char *new_memory, size_t size, TestMemoryAllocator *allocator, const char *file, size_t line)
{
 8015118:	b580      	push	{r7, lr}
 801511a:	b08a      	sub	sp, #40	; 0x28
 801511c:	af06      	add	r7, sp, #24
 801511e:	60f8      	str	r0, [r7, #12]
 8015120:	60b9      	str	r1, [r7, #8]
 8015122:	607a      	str	r2, [r7, #4]
 8015124:	603b      	str	r3, [r7, #0]
    node->init(new_memory, allocationSequenceNumber_++, size, allocator, current_period_, current_allocation_stage_, file, line);
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801512c:	3304      	adds	r3, #4
 801512e:	681a      	ldr	r2, [r3, #0]
 8015130:	1c51      	adds	r1, r2, #1
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8015138:	3304      	adds	r3, #4
 801513a:	6019      	str	r1, [r3, #0]
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	7a19      	ldrb	r1, [r3, #8]
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8015146:	3308      	adds	r3, #8
 8015148:	781b      	ldrb	r3, [r3, #0]
 801514a:	6a38      	ldr	r0, [r7, #32]
 801514c:	9004      	str	r0, [sp, #16]
 801514e:	69f8      	ldr	r0, [r7, #28]
 8015150:	9003      	str	r0, [sp, #12]
 8015152:	9302      	str	r3, [sp, #8]
 8015154:	9101      	str	r1, [sp, #4]
 8015156:	69bb      	ldr	r3, [r7, #24]
 8015158:	9300      	str	r3, [sp, #0]
 801515a:	683b      	ldr	r3, [r7, #0]
 801515c:	6879      	ldr	r1, [r7, #4]
 801515e:	68b8      	ldr	r0, [r7, #8]
 8015160:	f7ff fcfb 	bl	8014b5a <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>
    addMemoryCorruptionInformation(node->memory_ + node->size_);
 8015164:	68bb      	ldr	r3, [r7, #8]
 8015166:	689a      	ldr	r2, [r3, #8]
 8015168:	68bb      	ldr	r3, [r7, #8]
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	4413      	add	r3, r2
 801516e:	4619      	mov	r1, r3
 8015170:	68f8      	ldr	r0, [r7, #12]
 8015172:	f000 f861 	bl	8015238 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>
    memoryTable_.addNewNode(node);
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801517c:	331c      	adds	r3, #28
 801517e:	68b9      	ldr	r1, [r7, #8]
 8015180:	4618      	mov	r0, r3
 8015182:	f7ff fe11 	bl	8014da8 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>
}
 8015186:	bf00      	nop
 8015188:	3710      	adds	r7, #16
 801518a:	46bd      	mov	sp, r7
 801518c:	bd80      	pop	{r7, pc}

0801518e <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 801518e:	b580      	push	{r7, lr}
 8015190:	b08a      	sub	sp, #40	; 0x28
 8015192:	af04      	add	r7, sp, #16
 8015194:	60f8      	str	r0, [r7, #12]
 8015196:	60b9      	str	r1, [r7, #8]
 8015198:	607a      	str	r2, [r7, #4]
 801519a:	603b      	str	r3, [r7, #0]
    char* new_memory = reallocateMemoryWithAccountingInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 801519c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80151a0:	9302      	str	r3, [sp, #8]
 80151a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151a4:	9301      	str	r3, [sp, #4]
 80151a6:	6a3b      	ldr	r3, [r7, #32]
 80151a8:	9300      	str	r3, [sp, #0]
 80151aa:	683b      	ldr	r3, [r7, #0]
 80151ac:	687a      	ldr	r2, [r7, #4]
 80151ae:	68b9      	ldr	r1, [r7, #8]
 80151b0:	68f8      	ldr	r0, [r7, #12]
 80151b2:	f000 f96f 	bl	8015494 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>
 80151b6:	6178      	str	r0, [r7, #20]
    if (new_memory == NULLPTR) return NULLPTR;
 80151b8:	697b      	ldr	r3, [r7, #20]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d101      	bne.n	80151c2 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x34>
 80151be:	2300      	movs	r3, #0
 80151c0:	e017      	b.n	80151f2 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x64>

    MemoryLeakDetectorNode *node = createMemoryLeakAccountingInformation(allocator, size, new_memory, allocatNodesSeperately);
 80151c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80151c6:	9300      	str	r3, [sp, #0]
 80151c8:	697b      	ldr	r3, [r7, #20]
 80151ca:	683a      	ldr	r2, [r7, #0]
 80151cc:	68b9      	ldr	r1, [r7, #8]
 80151ce:	68f8      	ldr	r0, [r7, #12]
 80151d0:	f000 f98a 	bl	80154e8 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 80151d4:	6138      	str	r0, [r7, #16]
    storeLeakInformation(node, new_memory, size, allocator, file, line);
 80151d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151d8:	9302      	str	r3, [sp, #8]
 80151da:	6a3b      	ldr	r3, [r7, #32]
 80151dc:	9301      	str	r3, [sp, #4]
 80151de:	68bb      	ldr	r3, [r7, #8]
 80151e0:	9300      	str	r3, [sp, #0]
 80151e2:	683b      	ldr	r3, [r7, #0]
 80151e4:	697a      	ldr	r2, [r7, #20]
 80151e6:	6939      	ldr	r1, [r7, #16]
 80151e8:	68f8      	ldr	r0, [r7, #12]
 80151ea:	f7ff ff95 	bl	8015118 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 80151ee:	693b      	ldr	r3, [r7, #16]
 80151f0:	689b      	ldr	r3, [r3, #8]
}
 80151f2:	4618      	mov	r0, r3
 80151f4:	3718      	adds	r7, #24
 80151f6:	46bd      	mov	sp, r7
 80151f8:	bd80      	pop	{r7, pc}
	...

080151fc <_ZN18MemoryLeakDetector16invalidateMemoryEPc>:

void MemoryLeakDetector::invalidateMemory(char* memory)
{
 80151fc:	b580      	push	{r7, lr}
 80151fe:	b084      	sub	sp, #16
 8015200:	af00      	add	r7, sp, #0
 8015202:	6078      	str	r0, [r7, #4]
 8015204:	6039      	str	r1, [r7, #0]
#ifndef CPPUTEST_DISABLE_HEAP_POISON
  MemoryLeakDetectorNode* node = memoryTable_.retrieveNode(memory);
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801520c:	331c      	adds	r3, #28
 801520e:	6839      	ldr	r1, [r7, #0]
 8015210:	4618      	mov	r0, r3
 8015212:	f7ff fdf6 	bl	8014e02 <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>
 8015216:	60f8      	str	r0, [r7, #12]
  if (node)
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d006      	beq.n	801522c <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x30>
    PlatformSpecificMemset(memory, 0xCD, node->size_);
 801521e:	4b05      	ldr	r3, [pc, #20]	; (8015234 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x38>)
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	68fa      	ldr	r2, [r7, #12]
 8015224:	6812      	ldr	r2, [r2, #0]
 8015226:	21cd      	movs	r1, #205	; 0xcd
 8015228:	6838      	ldr	r0, [r7, #0]
 801522a:	4798      	blx	r3
#endif
}
 801522c:	bf00      	nop
 801522e:	3710      	adds	r7, #16
 8015230:	46bd      	mov	sp, r7
 8015232:	bd80      	pop	{r7, pc}
 8015234:	200000d8 	.word	0x200000d8

08015238 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>:

void MemoryLeakDetector::addMemoryCorruptionInformation(char* memory)
{
 8015238:	b480      	push	{r7}
 801523a:	b085      	sub	sp, #20
 801523c:	af00      	add	r7, sp, #0
 801523e:	6078      	str	r0, [r7, #4]
 8015240:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8015242:	2300      	movs	r3, #0
 8015244:	60fb      	str	r3, [r7, #12]
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	2b02      	cmp	r3, #2
 801524a:	d812      	bhi.n	8015272 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x3a>
      memory[i] = GuardBytes[i % sizeof(GuardBytes)];
 801524c:	68f9      	ldr	r1, [r7, #12]
 801524e:	4b0c      	ldr	r3, [pc, #48]	; (8015280 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x48>)
 8015250:	fba3 2301 	umull	r2, r3, r3, r1
 8015254:	085a      	lsrs	r2, r3, #1
 8015256:	4613      	mov	r3, r2
 8015258:	005b      	lsls	r3, r3, #1
 801525a:	4413      	add	r3, r2
 801525c:	1aca      	subs	r2, r1, r3
 801525e:	6839      	ldr	r1, [r7, #0]
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	440b      	add	r3, r1
 8015264:	4907      	ldr	r1, [pc, #28]	; (8015284 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x4c>)
 8015266:	5c8a      	ldrb	r2, [r1, r2]
 8015268:	701a      	strb	r2, [r3, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	3301      	adds	r3, #1
 801526e:	60fb      	str	r3, [r7, #12]
 8015270:	e7e9      	b.n	8015246 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0xe>
}
 8015272:	bf00      	nop
 8015274:	3714      	adds	r7, #20
 8015276:	46bd      	mov	sp, r7
 8015278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801527c:	4770      	bx	lr
 801527e:	bf00      	nop
 8015280:	aaaaaaab 	.word	0xaaaaaaab
 8015284:	08025fac 	.word	0x08025fac

08015288 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>:

bool MemoryLeakDetector::validMemoryCorruptionInformation(char* memory)
{
 8015288:	b480      	push	{r7}
 801528a:	b085      	sub	sp, #20
 801528c:	af00      	add	r7, sp, #0
 801528e:	6078      	str	r0, [r7, #4]
 8015290:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8015292:	2300      	movs	r3, #0
 8015294:	60fb      	str	r3, [r7, #12]
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	2b02      	cmp	r3, #2
 801529a:	d816      	bhi.n	80152ca <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x42>
      if (memory[i] != GuardBytes[i % sizeof(GuardBytes)])
 801529c:	683a      	ldr	r2, [r7, #0]
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	4413      	add	r3, r2
 80152a2:	7818      	ldrb	r0, [r3, #0]
 80152a4:	68f9      	ldr	r1, [r7, #12]
 80152a6:	4b0c      	ldr	r3, [pc, #48]	; (80152d8 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x50>)
 80152a8:	fba3 2301 	umull	r2, r3, r3, r1
 80152ac:	085a      	lsrs	r2, r3, #1
 80152ae:	4613      	mov	r3, r2
 80152b0:	005b      	lsls	r3, r3, #1
 80152b2:	4413      	add	r3, r2
 80152b4:	1aca      	subs	r2, r1, r3
 80152b6:	4b09      	ldr	r3, [pc, #36]	; (80152dc <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x54>)
 80152b8:	5c9b      	ldrb	r3, [r3, r2]
 80152ba:	4298      	cmp	r0, r3
 80152bc:	d001      	beq.n	80152c2 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x3a>
          return false;
 80152be:	2300      	movs	r3, #0
 80152c0:	e004      	b.n	80152cc <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x44>
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	3301      	adds	r3, #1
 80152c6:	60fb      	str	r3, [r7, #12]
 80152c8:	e7e5      	b.n	8015296 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0xe>
   return true;
 80152ca:	2301      	movs	r3, #1
}
 80152cc:	4618      	mov	r0, r3
 80152ce:	3714      	adds	r7, #20
 80152d0:	46bd      	mov	sp, r7
 80152d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152d6:	4770      	bx	lr
 80152d8:	aaaaaaab 	.word	0xaaaaaaab
 80152dc:	08025fac 	.word	0x08025fac

080152e0 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>:

bool MemoryLeakDetector::matchingAllocation(TestMemoryAllocator *alloc_allocator, TestMemoryAllocator *free_allocator)
{
 80152e0:	b580      	push	{r7, lr}
 80152e2:	b084      	sub	sp, #16
 80152e4:	af00      	add	r7, sp, #0
 80152e6:	60f8      	str	r0, [r7, #12]
 80152e8:	60b9      	str	r1, [r7, #8]
 80152ea:	607a      	str	r2, [r7, #4]
    if (alloc_allocator == free_allocator) return true;
 80152ec:	68ba      	ldr	r2, [r7, #8]
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	429a      	cmp	r2, r3
 80152f2:	d101      	bne.n	80152f8 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x18>
 80152f4:	2301      	movs	r3, #1
 80152f6:	e013      	b.n	8015320 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    if (!doAllocationTypeChecking_) return true;
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80152fe:	781b      	ldrb	r3, [r3, #0]
 8015300:	f083 0301 	eor.w	r3, r3, #1
 8015304:	b2db      	uxtb	r3, r3
 8015306:	2b00      	cmp	r3, #0
 8015308:	d001      	beq.n	801530e <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x2e>
 801530a:	2301      	movs	r3, #1
 801530c:	e008      	b.n	8015320 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    return free_allocator->isOfEqualType(alloc_allocator);
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	331c      	adds	r3, #28
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	68b9      	ldr	r1, [r7, #8]
 8015318:	6878      	ldr	r0, [r7, #4]
 801531a:	4798      	blx	r3
 801531c:	4603      	mov	r3, r0
 801531e:	bf00      	nop
}
 8015320:	4618      	mov	r0, r3
 8015322:	3710      	adds	r7, #16
 8015324:	46bd      	mov	sp, r7
 8015326:	bd80      	pop	{r7, pc}

08015328 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>:

void MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode* node, const char* file, size_t line, TestMemoryAllocator* allocator, bool allocateNodesSeperately)
{
 8015328:	b590      	push	{r4, r7, lr}
 801532a:	b087      	sub	sp, #28
 801532c:	af02      	add	r7, sp, #8
 801532e:	60f8      	str	r0, [r7, #12]
 8015330:	60b9      	str	r1, [r7, #8]
 8015332:	607a      	str	r2, [r7, #4]
 8015334:	603b      	str	r3, [r7, #0]
    if (!matchingAllocation(node->allocator_->actualAllocator(), allocator->actualAllocator()))
 8015336:	68bb      	ldr	r3, [r7, #8]
 8015338:	695a      	ldr	r2, [r3, #20]
 801533a:	68bb      	ldr	r3, [r7, #8]
 801533c:	695b      	ldr	r3, [r3, #20]
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	3328      	adds	r3, #40	; 0x28
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	4610      	mov	r0, r2
 8015346:	4798      	blx	r3
 8015348:	4604      	mov	r4, r0
 801534a:	6a3b      	ldr	r3, [r7, #32]
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	3328      	adds	r3, #40	; 0x28
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	6a38      	ldr	r0, [r7, #32]
 8015354:	4798      	blx	r3
 8015356:	4603      	mov	r3, r0
 8015358:	461a      	mov	r2, r3
 801535a:	4621      	mov	r1, r4
 801535c:	68f8      	ldr	r0, [r7, #12]
 801535e:	f7ff ffbf 	bl	80152e0 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>
 8015362:	4603      	mov	r3, r0
 8015364:	f083 0301 	eor.w	r3, r3, #1
 8015368:	b2db      	uxtb	r3, r3
 801536a:	2b00      	cmp	r3, #0
 801536c:	d014      	beq.n	8015398 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0x70>
        outputBuffer_.reportAllocationDeallocationMismatchFailure(node, file, line, allocator->actualAllocator(), reporter_);
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	f103 040c 	add.w	r4, r3, #12
 8015374:	6a3b      	ldr	r3, [r7, #32]
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	3328      	adds	r3, #40	; 0x28
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	6a38      	ldr	r0, [r7, #32]
 801537e:	4798      	blx	r3
 8015380:	4602      	mov	r2, r0
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	685b      	ldr	r3, [r3, #4]
 8015386:	9301      	str	r3, [sp, #4]
 8015388:	9200      	str	r2, [sp, #0]
 801538a:	683b      	ldr	r3, [r7, #0]
 801538c:	687a      	ldr	r2, [r7, #4]
 801538e:	68b9      	ldr	r1, [r7, #8]
 8015390:	4620      	mov	r0, r4
 8015392:	f7ff fb4d 	bl	8014a30 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
    else if (allocateNodesSeperately)
        allocator->freeMemoryLeakNode((char*) node);
}
 8015396:	e02e      	b.n	80153f6 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
 8015398:	68bb      	ldr	r3, [r7, #8]
 801539a:	689a      	ldr	r2, [r3, #8]
 801539c:	68bb      	ldr	r3, [r7, #8]
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	4413      	add	r3, r2
 80153a2:	4619      	mov	r1, r3
 80153a4:	68f8      	ldr	r0, [r7, #12]
 80153a6:	f7ff ff6f 	bl	8015288 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>
 80153aa:	4603      	mov	r3, r0
 80153ac:	f083 0301 	eor.w	r3, r3, #1
 80153b0:	b2db      	uxtb	r3, r3
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d014      	beq.n	80153e0 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xb8>
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	f103 040c 	add.w	r4, r3, #12
 80153bc:	6a3b      	ldr	r3, [r7, #32]
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	3328      	adds	r3, #40	; 0x28
 80153c2:	681b      	ldr	r3, [r3, #0]
 80153c4:	6a38      	ldr	r0, [r7, #32]
 80153c6:	4798      	blx	r3
 80153c8:	4602      	mov	r2, r0
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	685b      	ldr	r3, [r3, #4]
 80153ce:	9301      	str	r3, [sp, #4]
 80153d0:	9200      	str	r2, [sp, #0]
 80153d2:	683b      	ldr	r3, [r7, #0]
 80153d4:	687a      	ldr	r2, [r7, #4]
 80153d6:	68b9      	ldr	r1, [r7, #8]
 80153d8:	4620      	mov	r0, r4
 80153da:	f7ff fb4f 	bl	8014a7c <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
}
 80153de:	e00a      	b.n	80153f6 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (allocateNodesSeperately)
 80153e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d006      	beq.n	80153f6 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
        allocator->freeMemoryLeakNode((char*) node);
 80153e8:	6a3b      	ldr	r3, [r7, #32]
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	3324      	adds	r3, #36	; 0x24
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	68b9      	ldr	r1, [r7, #8]
 80153f2:	6a38      	ldr	r0, [r7, #32]
 80153f4:	4798      	blx	r3
}
 80153f6:	bf00      	nop
 80153f8:	3714      	adds	r7, #20
 80153fa:	46bd      	mov	sp, r7
 80153fc:	bd90      	pop	{r4, r7, pc}
	...

08015400 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, bool allocatNodesSeperately)
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b086      	sub	sp, #24
 8015404:	af02      	add	r7, sp, #8
 8015406:	60f8      	str	r0, [r7, #12]
 8015408:	60b9      	str	r1, [r7, #8]
 801540a:	607a      	str	r2, [r7, #4]
 801540c:	70fb      	strb	r3, [r7, #3]
    return allocMemory(allocator, size, UNKNOWN, 0, allocatNodesSeperately);
 801540e:	4b08      	ldr	r3, [pc, #32]	; (8015430 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb+0x30>)
 8015410:	681a      	ldr	r2, [r3, #0]
 8015412:	78fb      	ldrb	r3, [r7, #3]
 8015414:	9301      	str	r3, [sp, #4]
 8015416:	2300      	movs	r3, #0
 8015418:	9300      	str	r3, [sp, #0]
 801541a:	4613      	mov	r3, r2
 801541c:	687a      	ldr	r2, [r7, #4]
 801541e:	68b9      	ldr	r1, [r7, #8]
 8015420:	68f8      	ldr	r0, [r7, #12]
 8015422:	f000 f87f 	bl	8015524 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8015426:	4603      	mov	r3, r0
}
 8015428:	4618      	mov	r0, r3
 801542a:	3710      	adds	r7, #16
 801542c:	46bd      	mov	sp, r7
 801542e:	bd80      	pop	{r7, pc}
 8015430:	20000100 	.word	0x20000100

08015434 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8015434:	b590      	push	{r4, r7, lr}
 8015436:	b085      	sub	sp, #20
 8015438:	af00      	add	r7, sp, #0
 801543a:	60f8      	str	r0, [r7, #12]
 801543c:	60b9      	str	r1, [r7, #8]
 801543e:	607a      	str	r2, [r7, #4]
 8015440:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size), file, line);
 8015442:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015446:	2b00      	cmp	r3, #0
 8015448:	d00e      	beq.n	8015468 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x34>
 801544a:	68bb      	ldr	r3, [r7, #8]
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	3308      	adds	r3, #8
 8015450:	681c      	ldr	r4, [r3, #0]
 8015452:	6879      	ldr	r1, [r7, #4]
 8015454:	68f8      	ldr	r0, [r7, #12]
 8015456:	f7ff fe3f 	bl	80150d8 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 801545a:	4601      	mov	r1, r0
 801545c:	6a3b      	ldr	r3, [r7, #32]
 801545e:	683a      	ldr	r2, [r7, #0]
 8015460:	68b8      	ldr	r0, [r7, #8]
 8015462:	47a0      	blx	r4
 8015464:	4603      	mov	r3, r0
 8015466:	e010      	b.n	801548a <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x56>
    else return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode), file, line);
 8015468:	68bb      	ldr	r3, [r7, #8]
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	3308      	adds	r3, #8
 801546e:	681c      	ldr	r4, [r3, #0]
 8015470:	6879      	ldr	r1, [r7, #4]
 8015472:	68f8      	ldr	r0, [r7, #12]
 8015474:	f7ff fe30 	bl	80150d8 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8015478:	4603      	mov	r3, r0
 801547a:	f103 0120 	add.w	r1, r3, #32
 801547e:	6a3b      	ldr	r3, [r7, #32]
 8015480:	683a      	ldr	r2, [r7, #0]
 8015482:	68b8      	ldr	r0, [r7, #8]
 8015484:	47a0      	blx	r4
 8015486:	4603      	mov	r3, r0
 8015488:	bf00      	nop
}
 801548a:	4618      	mov	r0, r3
 801548c:	3714      	adds	r7, #20
 801548e:	46bd      	mov	sp, r7
 8015490:	bd90      	pop	{r4, r7, pc}
	...

08015494 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator* /*allocator*/, char* memory, size_t size, const char* /*file*/, size_t /*line*/, bool allocatNodesSeperately)
{
 8015494:	b590      	push	{r4, r7, lr}
 8015496:	b085      	sub	sp, #20
 8015498:	af00      	add	r7, sp, #0
 801549a:	60f8      	str	r0, [r7, #12]
 801549c:	60b9      	str	r1, [r7, #8]
 801549e:	607a      	str	r2, [r7, #4]
 80154a0:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size));
 80154a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d00b      	beq.n	80154c2 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x2e>
 80154aa:	4b0e      	ldr	r3, [pc, #56]	; (80154e4 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 80154ac:	681c      	ldr	r4, [r3, #0]
 80154ae:	6839      	ldr	r1, [r7, #0]
 80154b0:	68f8      	ldr	r0, [r7, #12]
 80154b2:	f7ff fe11 	bl	80150d8 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 80154b6:	4603      	mov	r3, r0
 80154b8:	4619      	mov	r1, r3
 80154ba:	6878      	ldr	r0, [r7, #4]
 80154bc:	47a0      	blx	r4
 80154be:	4603      	mov	r3, r0
 80154c0:	e00c      	b.n	80154dc <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x48>
    else return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode));
 80154c2:	4b08      	ldr	r3, [pc, #32]	; (80154e4 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 80154c4:	681c      	ldr	r4, [r3, #0]
 80154c6:	6839      	ldr	r1, [r7, #0]
 80154c8:	68f8      	ldr	r0, [r7, #12]
 80154ca:	f7ff fe05 	bl	80150d8 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 80154ce:	4603      	mov	r3, r0
 80154d0:	3320      	adds	r3, #32
 80154d2:	4619      	mov	r1, r3
 80154d4:	6878      	ldr	r0, [r7, #4]
 80154d6:	47a0      	blx	r4
 80154d8:	4603      	mov	r3, r0
 80154da:	bf00      	nop
}
 80154dc:	4618      	mov	r0, r3
 80154de:	3714      	adds	r7, #20
 80154e0:	46bd      	mov	sp, r7
 80154e2:	bd90      	pop	{r4, r7, pc}
 80154e4:	200000cc 	.word	0x200000cc

080154e8 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>:

MemoryLeakDetectorNode* MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator* allocator, size_t size, char* memory, bool allocatNodesSeperately)
{
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b084      	sub	sp, #16
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	60f8      	str	r0, [r7, #12]
 80154f0:	60b9      	str	r1, [r7, #8]
 80154f2:	607a      	str	r2, [r7, #4]
 80154f4:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (MemoryLeakDetectorNode*) (void*) allocator->allocMemoryLeakNode(sizeof(MemoryLeakDetectorNode));
 80154f6:	7e3b      	ldrb	r3, [r7, #24]
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d008      	beq.n	801550e <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x26>
 80154fc:	68bb      	ldr	r3, [r7, #8]
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	3320      	adds	r3, #32
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	2120      	movs	r1, #32
 8015506:	68b8      	ldr	r0, [r7, #8]
 8015508:	4798      	blx	r3
 801550a:	4603      	mov	r3, r0
 801550c:	e006      	b.n	801551c <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x34>
    else return getNodeFromMemoryPointer(memory, size);
 801550e:	687a      	ldr	r2, [r7, #4]
 8015510:	6839      	ldr	r1, [r7, #0]
 8015512:	68f8      	ldr	r0, [r7, #12]
 8015514:	f7ff fdef 	bl	80150f6 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>
 8015518:	4603      	mov	r3, r0
 801551a:	bf00      	nop
}
 801551c:	4618      	mov	r0, r3
 801551e:	3710      	adds	r7, #16
 8015520:	46bd      	mov	sp, r7
 8015522:	bd80      	pop	{r7, pc}

08015524 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8015524:	b580      	push	{r7, lr}
 8015526:	b08a      	sub	sp, #40	; 0x28
 8015528:	af04      	add	r7, sp, #16
 801552a:	60f8      	str	r0, [r7, #12]
 801552c:	60b9      	str	r1, [r7, #8]
 801552e:	607a      	str	r2, [r7, #4]
 8015530:	603b      	str	r3, [r7, #0]
     * If the same allocation is used and the wrong free is called, it will deallocate the memory leak information
     * without the memory leak detector ever noticing it!
     * So, for malloc, we'll allocate the memory separately so we can detect this and give a proper error.
     */

    char* memory = allocateMemoryWithAccountingInformation(allocator, size, file, line, allocatNodesSeperately);
 8015532:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015536:	9301      	str	r3, [sp, #4]
 8015538:	6a3b      	ldr	r3, [r7, #32]
 801553a:	9300      	str	r3, [sp, #0]
 801553c:	683b      	ldr	r3, [r7, #0]
 801553e:	687a      	ldr	r2, [r7, #4]
 8015540:	68b9      	ldr	r1, [r7, #8]
 8015542:	68f8      	ldr	r0, [r7, #12]
 8015544:	f7ff ff76 	bl	8015434 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>
 8015548:	6178      	str	r0, [r7, #20]
    if (memory == NULLPTR) return NULLPTR;
 801554a:	697b      	ldr	r3, [r7, #20]
 801554c:	2b00      	cmp	r3, #0
 801554e:	d101      	bne.n	8015554 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x30>
 8015550:	2300      	movs	r3, #0
 8015552:	e017      	b.n	8015584 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x60>
    MemoryLeakDetectorNode* node = createMemoryLeakAccountingInformation(allocator, size, memory, allocatNodesSeperately);
 8015554:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015558:	9300      	str	r3, [sp, #0]
 801555a:	697b      	ldr	r3, [r7, #20]
 801555c:	687a      	ldr	r2, [r7, #4]
 801555e:	68b9      	ldr	r1, [r7, #8]
 8015560:	68f8      	ldr	r0, [r7, #12]
 8015562:	f7ff ffc1 	bl	80154e8 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8015566:	6138      	str	r0, [r7, #16]

    storeLeakInformation(node, memory, size, allocator, file, line);
 8015568:	6a3b      	ldr	r3, [r7, #32]
 801556a:	9302      	str	r3, [sp, #8]
 801556c:	683b      	ldr	r3, [r7, #0]
 801556e:	9301      	str	r3, [sp, #4]
 8015570:	68bb      	ldr	r3, [r7, #8]
 8015572:	9300      	str	r3, [sp, #0]
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	697a      	ldr	r2, [r7, #20]
 8015578:	6939      	ldr	r1, [r7, #16]
 801557a:	68f8      	ldr	r0, [r7, #12]
 801557c:	f7ff fdcc 	bl	8015118 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8015580:	693b      	ldr	r3, [r7, #16]
 8015582:	689b      	ldr	r3, [r3, #8]
}
 8015584:	4618      	mov	r0, r3
 8015586:	3718      	adds	r7, #24
 8015588:	46bd      	mov	sp, r7
 801558a:	bd80      	pop	{r7, pc}

0801558c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>:
    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
    if (allocatNodesSeperately) allocator->freeMemoryLeakNode( (char*) node);
}

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, const char* file, size_t line, bool allocatNodesSeperately)
{
 801558c:	b590      	push	{r4, r7, lr}
 801558e:	b089      	sub	sp, #36	; 0x24
 8015590:	af02      	add	r7, sp, #8
 8015592:	60f8      	str	r0, [r7, #12]
 8015594:	60b9      	str	r1, [r7, #8]
 8015596:	607a      	str	r2, [r7, #4]
 8015598:	603b      	str	r3, [r7, #0]
    if (memory == NULLPTR) return;
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	2b00      	cmp	r3, #0
 801559e:	d03a      	beq.n	8015616 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8a>

    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80155a6:	331c      	adds	r3, #28
 80155a8:	6879      	ldr	r1, [r7, #4]
 80155aa:	4618      	mov	r0, r3
 80155ac:	f7ff fc13 	bl	8014dd6 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 80155b0:	6178      	str	r0, [r7, #20]
    if (node == NULLPTR) {
 80155b2:	697b      	ldr	r3, [r7, #20]
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d10b      	bne.n	80155d0 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x44>
        outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	f103 000c 	add.w	r0, r3, #12
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	685b      	ldr	r3, [r3, #4]
 80155c2:	9300      	str	r3, [sp, #0]
 80155c4:	68bb      	ldr	r3, [r7, #8]
 80155c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80155c8:	6839      	ldr	r1, [r7, #0]
 80155ca:	f7ff fa0d 	bl	80149e8 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
        return;
 80155ce:	e023      	b.n	8015618 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    }
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (!allocator->hasBeenDestroyed()) {
 80155d0:	68b8      	ldr	r0, [r7, #8]
 80155d2:	f7f8 ff95 	bl	800e500 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>
 80155d6:	4603      	mov	r3, r0
 80155d8:	f083 0301 	eor.w	r3, r3, #1
 80155dc:	b2db      	uxtb	r3, r3
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d01a      	beq.n	8015618 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
        size_t size = node->size_;
 80155e2:	697b      	ldr	r3, [r7, #20]
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	613b      	str	r3, [r7, #16]
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 80155e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80155ec:	9301      	str	r3, [sp, #4]
 80155ee:	68bb      	ldr	r3, [r7, #8]
 80155f0:	9300      	str	r3, [sp, #0]
 80155f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155f4:	683a      	ldr	r2, [r7, #0]
 80155f6:	6979      	ldr	r1, [r7, #20]
 80155f8:	68f8      	ldr	r0, [r7, #12]
 80155fa:	f7ff fe95 	bl	8015328 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
        allocator->free_memory((char*) memory, size, file, line);
 80155fe:	68bb      	ldr	r3, [r7, #8]
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	330c      	adds	r3, #12
 8015604:	681c      	ldr	r4, [r3, #0]
 8015606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015608:	9300      	str	r3, [sp, #0]
 801560a:	683b      	ldr	r3, [r7, #0]
 801560c:	693a      	ldr	r2, [r7, #16]
 801560e:	6879      	ldr	r1, [r7, #4]
 8015610:	68b8      	ldr	r0, [r7, #8]
 8015612:	47a0      	blx	r4
 8015614:	e000      	b.n	8015618 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    if (memory == NULLPTR) return;
 8015616:	bf00      	nop
    }
}
 8015618:	371c      	adds	r7, #28
 801561a:	46bd      	mov	sp, r7
 801561c:	bd90      	pop	{r4, r7, pc}
	...

08015620 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>:

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, bool allocatNodesSeperately)
{
 8015620:	b580      	push	{r7, lr}
 8015622:	b086      	sub	sp, #24
 8015624:	af02      	add	r7, sp, #8
 8015626:	60f8      	str	r0, [r7, #12]
 8015628:	60b9      	str	r1, [r7, #8]
 801562a:	607a      	str	r2, [r7, #4]
 801562c:	70fb      	strb	r3, [r7, #3]
    deallocMemory(allocator, (char*) memory, UNKNOWN, 0, allocatNodesSeperately);
 801562e:	4b08      	ldr	r3, [pc, #32]	; (8015650 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb+0x30>)
 8015630:	681a      	ldr	r2, [r3, #0]
 8015632:	78fb      	ldrb	r3, [r7, #3]
 8015634:	9301      	str	r3, [sp, #4]
 8015636:	2300      	movs	r3, #0
 8015638:	9300      	str	r3, [sp, #0]
 801563a:	4613      	mov	r3, r2
 801563c:	687a      	ldr	r2, [r7, #4]
 801563e:	68b9      	ldr	r1, [r7, #8]
 8015640:	68f8      	ldr	r0, [r7, #12]
 8015642:	f7ff ffa3 	bl	801558c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8015646:	bf00      	nop
 8015648:	3710      	adds	r7, #16
 801564a:	46bd      	mov	sp, r7
 801564c:	bd80      	pop	{r7, pc}
 801564e:	bf00      	nop
 8015650:	20000100 	.word	0x20000100

08015654 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>:
        deallocMemory(allocator, memory, __FILE__, __LINE__);
    }
}

char* MemoryLeakDetector::reallocMemory(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8015654:	b580      	push	{r7, lr}
 8015656:	b08a      	sub	sp, #40	; 0x28
 8015658:	af04      	add	r7, sp, #16
 801565a:	60f8      	str	r0, [r7, #12]
 801565c:	60b9      	str	r1, [r7, #8]
 801565e:	607a      	str	r2, [r7, #4]
 8015660:	603b      	str	r3, [r7, #0]
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (memory) {
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	2b00      	cmp	r3, #0
 8015666:	d023      	beq.n	80156b0 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x5c>
        MemoryLeakDetectorNode* node = memoryTable_.removeNode(memory);
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801566e:	331c      	adds	r3, #28
 8015670:	6879      	ldr	r1, [r7, #4]
 8015672:	4618      	mov	r0, r3
 8015674:	f7ff fbaf 	bl	8014dd6 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8015678:	6178      	str	r0, [r7, #20]
        if (node == NULLPTR) {
 801567a:	697b      	ldr	r3, [r7, #20]
 801567c:	2b00      	cmp	r3, #0
 801567e:	d10c      	bne.n	801569a <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x46>
            outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	f103 000c 	add.w	r0, r3, #12
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	685b      	ldr	r3, [r3, #4]
 801568a:	9300      	str	r3, [sp, #0]
 801568c:	68bb      	ldr	r3, [r7, #8]
 801568e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015690:	6a39      	ldr	r1, [r7, #32]
 8015692:	f7ff f9a9 	bl	80149e8 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
            return NULLPTR;
 8015696:	2300      	movs	r3, #0
 8015698:	e019      	b.n	80156ce <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x7a>
        }
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 801569a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801569e:	9301      	str	r3, [sp, #4]
 80156a0:	68bb      	ldr	r3, [r7, #8]
 80156a2:	9300      	str	r3, [sp, #0]
 80156a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156a6:	6a3a      	ldr	r2, [r7, #32]
 80156a8:	6979      	ldr	r1, [r7, #20]
 80156aa:	68f8      	ldr	r0, [r7, #12]
 80156ac:	f7ff fe3c 	bl	8015328 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
    }
    return reallocateMemoryAndLeakInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 80156b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80156b4:	9302      	str	r3, [sp, #8]
 80156b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156b8:	9301      	str	r3, [sp, #4]
 80156ba:	6a3b      	ldr	r3, [r7, #32]
 80156bc:	9300      	str	r3, [sp, #0]
 80156be:	683b      	ldr	r3, [r7, #0]
 80156c0:	687a      	ldr	r2, [r7, #4]
 80156c2:	68b9      	ldr	r1, [r7, #8]
 80156c4:	68f8      	ldr	r0, [r7, #12]
 80156c6:	f7ff fd62 	bl	801518e <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>
 80156ca:	4603      	mov	r3, r0
 80156cc:	bf00      	nop
}
 80156ce:	4618      	mov	r0, r3
 80156d0:	3718      	adds	r7, #24
 80156d2:	46bd      	mov	sp, r7
 80156d4:	bd80      	pop	{r7, pc}

080156d6 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>:

void MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod period)
{
 80156d6:	b580      	push	{r7, lr}
 80156d8:	b084      	sub	sp, #16
 80156da:	af00      	add	r7, sp, #0
 80156dc:	6078      	str	r0, [r7, #4]
 80156de:	460b      	mov	r3, r1
 80156e0:	70fb      	strb	r3, [r7, #3]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(period);
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80156e8:	331c      	adds	r3, #28
 80156ea:	78fa      	ldrb	r2, [r7, #3]
 80156ec:	4611      	mov	r1, r2
 80156ee:	4618      	mov	r0, r3
 80156f0:	f7ff fbc0 	bl	8014e74 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 80156f4:	60f8      	str	r0, [r7, #12]

    outputBuffer_.startMemoryLeakReporting();
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	330c      	adds	r3, #12
 80156fa:	4618      	mov	r0, r3
 80156fc:	f7ff f882 	bl	8014804 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>

    while (leak) {
 8015700:	68fb      	ldr	r3, [r7, #12]
 8015702:	2b00      	cmp	r3, #0
 8015704:	d010      	beq.n	8015728 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x52>
        outputBuffer_.reportMemoryLeak(leak);
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	330c      	adds	r3, #12
 801570a:	68f9      	ldr	r1, [r7, #12]
 801570c:	4618      	mov	r0, r3
 801570e:	f7ff f897 	bl	8014840 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>
        leak = memoryTable_.getNextLeak(leak, period);
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015718:	331c      	adds	r3, #28
 801571a:	78fa      	ldrb	r2, [r7, #3]
 801571c:	68f9      	ldr	r1, [r7, #12]
 801571e:	4618      	mov	r0, r3
 8015720:	f7ff fbcb 	bl	8014eba <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8015724:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8015726:	e7eb      	b.n	8015700 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x2a>
    }

    outputBuffer_.stopMemoryLeakReporting();
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	330c      	adds	r3, #12
 801572c:	4618      	mov	r0, r3
 801572e:	f7ff f8e7 	bl	8014900 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>
}
 8015732:	bf00      	nop
 8015734:	3710      	adds	r7, #16
 8015736:	46bd      	mov	sp, r7
 8015738:	bd80      	pop	{r7, pc}

0801573a <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>:

const char* MemoryLeakDetector::report(MemLeakPeriod period)
{
 801573a:	b580      	push	{r7, lr}
 801573c:	b082      	sub	sp, #8
 801573e:	af00      	add	r7, sp, #0
 8015740:	6078      	str	r0, [r7, #4]
 8015742:	460b      	mov	r3, r1
 8015744:	70fb      	strb	r3, [r7, #3]
    ConstructMemoryLeakReport(period);
 8015746:	78fb      	ldrb	r3, [r7, #3]
 8015748:	4619      	mov	r1, r3
 801574a:	6878      	ldr	r0, [r7, #4]
 801574c:	f7ff ffc3 	bl	80156d6 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>

    return outputBuffer_.toString();
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	330c      	adds	r3, #12
 8015754:	4618      	mov	r0, r3
 8015756:	f7ff f9e5 	bl	8014b24 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 801575a:	4603      	mov	r3, r0
}
 801575c:	4618      	mov	r0, r3
 801575e:	3708      	adds	r7, #8
 8015760:	46bd      	mov	sp, r7
 8015762:	bd80      	pop	{r7, pc}

08015764 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>:

void MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
{
 8015764:	b580      	push	{r7, lr}
 8015766:	b084      	sub	sp, #16
 8015768:	af00      	add	r7, sp, #0
 801576a:	6078      	str	r0, [r7, #4]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(mem_leak_period_checking);
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015772:	331c      	adds	r3, #28
 8015774:	2103      	movs	r1, #3
 8015776:	4618      	mov	r0, r3
 8015778:	f7ff fb7c 	bl	8014e74 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 801577c:	60f8      	str	r0, [r7, #12]
    while (leak) {
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	2b00      	cmp	r3, #0
 8015782:	d011      	beq.n	80157a8 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x44>
        if (leak->period_ == mem_leak_period_checking) leak->period_ = mem_leak_period_enabled;
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	7e1b      	ldrb	r3, [r3, #24]
 8015788:	2b03      	cmp	r3, #3
 801578a:	d102      	bne.n	8015792 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x2e>
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	2202      	movs	r2, #2
 8015790:	761a      	strb	r2, [r3, #24]
        leak = memoryTable_.getNextLeak(leak, mem_leak_period_checking);
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015798:	331c      	adds	r3, #28
 801579a:	2203      	movs	r2, #3
 801579c:	68f9      	ldr	r1, [r7, #12]
 801579e:	4618      	mov	r0, r3
 80157a0:	f7ff fb8b 	bl	8014eba <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80157a4:	60f8      	str	r0, [r7, #12]
    while (leak) {
 80157a6:	e7ea      	b.n	801577e <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x1a>
    }
}
 80157a8:	bf00      	nop
 80157aa:	3710      	adds	r7, #16
 80157ac:	46bd      	mov	sp, r7
 80157ae:	bd80      	pop	{r7, pc}

080157b0 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod period)
{
 80157b0:	b580      	push	{r7, lr}
 80157b2:	b082      	sub	sp, #8
 80157b4:	af00      	add	r7, sp, #0
 80157b6:	6078      	str	r0, [r7, #4]
 80157b8:	460b      	mov	r3, r1
 80157ba:	70fb      	strb	r3, [r7, #3]
    return memoryTable_.getTotalLeaks(period);
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80157c2:	331c      	adds	r3, #28
 80157c4:	78fa      	ldrb	r2, [r7, #3]
 80157c6:	4611      	mov	r1, r2
 80157c8:	4618      	mov	r0, r3
 80157ca:	f7ff fb30 	bl	8014e2e <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>
 80157ce:	4603      	mov	r3, r0
}
 80157d0:	4618      	mov	r0, r3
 80157d2:	3708      	adds	r7, #8
 80157d4:	46bd      	mov	sp, r7
 80157d6:	bd80      	pop	{r7, pc}

080157d8 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>:
        SimpleString name_;
        SimpleString type_;
        void* ptr_;

        MockOutputParametersListNode* next_;
        MockOutputParametersListNode(const SimpleString& name, const SimpleString& type, void* ptr)
 80157d8:	b580      	push	{r7, lr}
 80157da:	b084      	sub	sp, #16
 80157dc:	af00      	add	r7, sp, #0
 80157de:	60f8      	str	r0, [r7, #12]
 80157e0:	60b9      	str	r1, [r7, #8]
 80157e2:	607a      	str	r2, [r7, #4]
 80157e4:	603b      	str	r3, [r7, #0]
            : name_(name), type_(type), ptr_(ptr), next_(NULLPTR) {}
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	68b9      	ldr	r1, [r7, #8]
 80157ea:	4618      	mov	r0, r3
 80157ec:	f7f5 fb13 	bl	800ae16 <_ZN12SimpleStringC1ERKS_>
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	3308      	adds	r3, #8
 80157f4:	6879      	ldr	r1, [r7, #4]
 80157f6:	4618      	mov	r0, r3
 80157f8:	f7f5 fb0d 	bl	800ae16 <_ZN12SimpleStringC1ERKS_>
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	683a      	ldr	r2, [r7, #0]
 8015800:	611a      	str	r2, [r3, #16]
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	2200      	movs	r2, #0
 8015806:	615a      	str	r2, [r3, #20]
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	4618      	mov	r0, r3
 801580c:	3710      	adds	r7, #16
 801580e:	46bd      	mov	sp, r7
 8015810:	bd80      	pop	{r7, pc}

08015812 <_ZN21MockIgnoredActualCall8withNameERK12SimpleString>:
};

class MockIgnoredActualCall: public MockActualCall
{
public:
    virtual MockActualCall& withName(const SimpleString&) _override { return *this;}
 8015812:	b480      	push	{r7}
 8015814:	b083      	sub	sp, #12
 8015816:	af00      	add	r7, sp, #0
 8015818:	6078      	str	r0, [r7, #4]
 801581a:	6039      	str	r1, [r7, #0]
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	4618      	mov	r0, r3
 8015820:	370c      	adds	r7, #12
 8015822:	46bd      	mov	sp, r7
 8015824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015828:	4770      	bx	lr

0801582a <_ZN21MockIgnoredActualCall13withCallOrderEj>:
    virtual MockActualCall& withCallOrder(unsigned int) _override { return *this; }
 801582a:	b480      	push	{r7}
 801582c:	b083      	sub	sp, #12
 801582e:	af00      	add	r7, sp, #0
 8015830:	6078      	str	r0, [r7, #4]
 8015832:	6039      	str	r1, [r7, #0]
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	4618      	mov	r0, r3
 8015838:	370c      	adds	r7, #12
 801583a:	46bd      	mov	sp, r7
 801583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015840:	4770      	bx	lr

08015842 <_ZN21MockIgnoredActualCall17withBoolParameterERK12SimpleStringb>:
    virtual MockActualCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 8015842:	b480      	push	{r7}
 8015844:	b085      	sub	sp, #20
 8015846:	af00      	add	r7, sp, #0
 8015848:	60f8      	str	r0, [r7, #12]
 801584a:	60b9      	str	r1, [r7, #8]
 801584c:	4613      	mov	r3, r2
 801584e:	71fb      	strb	r3, [r7, #7]
 8015850:	68fb      	ldr	r3, [r7, #12]
 8015852:	4618      	mov	r0, r3
 8015854:	3714      	adds	r7, #20
 8015856:	46bd      	mov	sp, r7
 8015858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801585c:	4770      	bx	lr

0801585e <_ZN21MockIgnoredActualCall16withIntParameterERK12SimpleStringi>:
    virtual MockActualCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 801585e:	b480      	push	{r7}
 8015860:	b085      	sub	sp, #20
 8015862:	af00      	add	r7, sp, #0
 8015864:	60f8      	str	r0, [r7, #12]
 8015866:	60b9      	str	r1, [r7, #8]
 8015868:	607a      	str	r2, [r7, #4]
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	4618      	mov	r0, r3
 801586e:	3714      	adds	r7, #20
 8015870:	46bd      	mov	sp, r7
 8015872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015876:	4770      	bx	lr

08015878 <_ZN21MockIgnoredActualCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockActualCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override { return *this; }
 8015878:	b480      	push	{r7}
 801587a:	b085      	sub	sp, #20
 801587c:	af00      	add	r7, sp, #0
 801587e:	60f8      	str	r0, [r7, #12]
 8015880:	60b9      	str	r1, [r7, #8]
 8015882:	607a      	str	r2, [r7, #4]
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	4618      	mov	r0, r3
 8015888:	3714      	adds	r7, #20
 801588a:	46bd      	mov	sp, r7
 801588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015890:	4770      	bx	lr

08015892 <_ZN21MockIgnoredActualCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockActualCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 8015892:	b480      	push	{r7}
 8015894:	b085      	sub	sp, #20
 8015896:	af00      	add	r7, sp, #0
 8015898:	60f8      	str	r0, [r7, #12]
 801589a:	60b9      	str	r1, [r7, #8]
 801589c:	607a      	str	r2, [r7, #4]
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	4618      	mov	r0, r3
 80158a2:	3714      	adds	r7, #20
 80158a4:	46bd      	mov	sp, r7
 80158a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158aa:	4770      	bx	lr

080158ac <_ZN21MockIgnoredActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockActualCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 80158ac:	b480      	push	{r7}
 80158ae:	b085      	sub	sp, #20
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	60f8      	str	r0, [r7, #12]
 80158b4:	60b9      	str	r1, [r7, #8]
 80158b6:	607a      	str	r2, [r7, #4]
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	4618      	mov	r0, r3
 80158bc:	3714      	adds	r7, #20
 80158be:	46bd      	mov	sp, r7
 80158c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158c4:	4770      	bx	lr

080158c6 <_ZN21MockIgnoredActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockActualCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 80158c6:	b480      	push	{r7}
 80158c8:	b085      	sub	sp, #20
 80158ca:	af00      	add	r7, sp, #0
 80158cc:	60f8      	str	r0, [r7, #12]
 80158ce:	60b9      	str	r1, [r7, #8]
 80158d0:	4639      	mov	r1, r7
 80158d2:	e881 000c 	stmia.w	r1, {r2, r3}
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	4618      	mov	r0, r3
 80158da:	3714      	adds	r7, #20
 80158dc:	46bd      	mov	sp, r7
 80158de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e2:	4770      	bx	lr

080158e4 <_ZN21MockIgnoredActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockActualCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 80158e4:	b480      	push	{r7}
 80158e6:	b085      	sub	sp, #20
 80158e8:	af00      	add	r7, sp, #0
 80158ea:	60f8      	str	r0, [r7, #12]
 80158ec:	60b9      	str	r1, [r7, #8]
 80158ee:	4639      	mov	r1, r7
 80158f0:	e881 000c 	stmia.w	r1, {r2, r3}
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	4618      	mov	r0, r3
 80158f8:	3714      	adds	r7, #20
 80158fa:	46bd      	mov	sp, r7
 80158fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015900:	4770      	bx	lr

08015902 <_ZN21MockIgnoredActualCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockActualCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 8015902:	b480      	push	{r7}
 8015904:	b085      	sub	sp, #20
 8015906:	af00      	add	r7, sp, #0
 8015908:	60f8      	str	r0, [r7, #12]
 801590a:	60b9      	str	r1, [r7, #8]
 801590c:	ed87 0b00 	vstr	d0, [r7]
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	4618      	mov	r0, r3
 8015914:	3714      	adds	r7, #20
 8015916:	46bd      	mov	sp, r7
 8015918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801591c:	4770      	bx	lr

0801591e <_ZN21MockIgnoredActualCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockActualCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 801591e:	b480      	push	{r7}
 8015920:	b085      	sub	sp, #20
 8015922:	af00      	add	r7, sp, #0
 8015924:	60f8      	str	r0, [r7, #12]
 8015926:	60b9      	str	r1, [r7, #8]
 8015928:	607a      	str	r2, [r7, #4]
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	4618      	mov	r0, r3
 801592e:	3714      	adds	r7, #20
 8015930:	46bd      	mov	sp, r7
 8015932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015936:	4770      	bx	lr

08015938 <_ZN21MockIgnoredActualCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockActualCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 8015938:	b480      	push	{r7}
 801593a:	b085      	sub	sp, #20
 801593c:	af00      	add	r7, sp, #0
 801593e:	60f8      	str	r0, [r7, #12]
 8015940:	60b9      	str	r1, [r7, #8]
 8015942:	607a      	str	r2, [r7, #4]
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	4618      	mov	r0, r3
 8015948:	3714      	adds	r7, #20
 801594a:	46bd      	mov	sp, r7
 801594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015950:	4770      	bx	lr

08015952 <_ZN21MockIgnoredActualCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockActualCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 8015952:	b480      	push	{r7}
 8015954:	b085      	sub	sp, #20
 8015956:	af00      	add	r7, sp, #0
 8015958:	60f8      	str	r0, [r7, #12]
 801595a:	60b9      	str	r1, [r7, #8]
 801595c:	607a      	str	r2, [r7, #4]
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	4618      	mov	r0, r3
 8015962:	3714      	adds	r7, #20
 8015964:	46bd      	mov	sp, r7
 8015966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801596a:	4770      	bx	lr

0801596c <_ZN21MockIgnoredActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockActualCall& withFunctionPointerParameter(const SimpleString& , void (*)()) _override { return *this; }
 801596c:	b480      	push	{r7}
 801596e:	b085      	sub	sp, #20
 8015970:	af00      	add	r7, sp, #0
 8015972:	60f8      	str	r0, [r7, #12]
 8015974:	60b9      	str	r1, [r7, #8]
 8015976:	607a      	str	r2, [r7, #4]
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	4618      	mov	r0, r3
 801597c:	3714      	adds	r7, #20
 801597e:	46bd      	mov	sp, r7
 8015980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015984:	4770      	bx	lr

08015986 <_ZN21MockIgnoredActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockActualCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override  { return *this; }
 8015986:	b480      	push	{r7}
 8015988:	b085      	sub	sp, #20
 801598a:	af00      	add	r7, sp, #0
 801598c:	60f8      	str	r0, [r7, #12]
 801598e:	60b9      	str	r1, [r7, #8]
 8015990:	607a      	str	r2, [r7, #4]
 8015992:	603b      	str	r3, [r7, #0]
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	4618      	mov	r0, r3
 8015998:	3714      	adds	r7, #20
 801599a:	46bd      	mov	sp, r7
 801599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159a0:	4770      	bx	lr

080159a2 <_ZN21MockIgnoredActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockActualCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 80159a2:	b480      	push	{r7}
 80159a4:	b085      	sub	sp, #20
 80159a6:	af00      	add	r7, sp, #0
 80159a8:	60f8      	str	r0, [r7, #12]
 80159aa:	60b9      	str	r1, [r7, #8]
 80159ac:	607a      	str	r2, [r7, #4]
 80159ae:	603b      	str	r3, [r7, #0]
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	4618      	mov	r0, r3
 80159b4:	3714      	adds	r7, #20
 80159b6:	46bd      	mov	sp, r7
 80159b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159bc:	4770      	bx	lr

080159be <_ZN21MockIgnoredActualCall19withOutputParameterERK12SimpleStringPv>:
    virtual MockActualCall& withOutputParameter(const SimpleString&, void*) _override { return *this; }
 80159be:	b480      	push	{r7}
 80159c0:	b085      	sub	sp, #20
 80159c2:	af00      	add	r7, sp, #0
 80159c4:	60f8      	str	r0, [r7, #12]
 80159c6:	60b9      	str	r1, [r7, #8]
 80159c8:	607a      	str	r2, [r7, #4]
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	4618      	mov	r0, r3
 80159ce:	3714      	adds	r7, #20
 80159d0:	46bd      	mov	sp, r7
 80159d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159d6:	4770      	bx	lr

080159d8 <_ZN21MockIgnoredActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:
    virtual MockActualCall& withOutputParameterOfType(const SimpleString&, const SimpleString&, void*) _override { return *this; }
 80159d8:	b480      	push	{r7}
 80159da:	b085      	sub	sp, #20
 80159dc:	af00      	add	r7, sp, #0
 80159de:	60f8      	str	r0, [r7, #12]
 80159e0:	60b9      	str	r1, [r7, #8]
 80159e2:	607a      	str	r2, [r7, #4]
 80159e4:	603b      	str	r3, [r7, #0]
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	4618      	mov	r0, r3
 80159ea:	3714      	adds	r7, #20
 80159ec:	46bd      	mov	sp, r7
 80159ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159f2:	4770      	bx	lr

080159f4 <_ZN21MockIgnoredActualCall14hasReturnValueEv>:

    virtual bool hasReturnValue() _override { return false; }
 80159f4:	b480      	push	{r7}
 80159f6:	b083      	sub	sp, #12
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	6078      	str	r0, [r7, #4]
 80159fc:	2300      	movs	r3, #0
 80159fe:	4618      	mov	r0, r3
 8015a00:	370c      	adds	r7, #12
 8015a02:	46bd      	mov	sp, r7
 8015a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a08:	4770      	bx	lr
	...

08015a0c <_ZN21MockIgnoredActualCall11returnValueEv>:
    virtual MockNamedValue returnValue() _override { return MockNamedValue(""); }
 8015a0c:	b580      	push	{r7, lr}
 8015a0e:	b084      	sub	sp, #16
 8015a10:	af00      	add	r7, sp, #0
 8015a12:	6078      	str	r0, [r7, #4]
 8015a14:	6039      	str	r1, [r7, #0]
 8015a16:	f107 0308 	add.w	r3, r7, #8
 8015a1a:	4909      	ldr	r1, [pc, #36]	; (8015a40 <_ZN21MockIgnoredActualCall11returnValueEv+0x34>)
 8015a1c:	4618      	mov	r0, r3
 8015a1e:	f7f5 f9a6 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8015a22:	f107 0308 	add.w	r3, r7, #8
 8015a26:	4619      	mov	r1, r3
 8015a28:	6878      	ldr	r0, [r7, #4]
 8015a2a:	f005 fec5 	bl	801b7b8 <_ZN14MockNamedValueC1ERK12SimpleString>
 8015a2e:	f107 0308 	add.w	r3, r7, #8
 8015a32:	4618      	mov	r0, r3
 8015a34:	f7f5 fd53 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8015a38:	6878      	ldr	r0, [r7, #4]
 8015a3a:	3710      	adds	r7, #16
 8015a3c:	46bd      	mov	sp, r7
 8015a3e:	bd80      	pop	{r7, pc}
 8015a40:	08023c6c 	.word	0x08023c6c

08015a44 <_ZN21MockIgnoredActualCall24returnBoolValueOrDefaultEb>:

    virtual bool returnBoolValueOrDefault(bool value) _override { return value; }
 8015a44:	b480      	push	{r7}
 8015a46:	b083      	sub	sp, #12
 8015a48:	af00      	add	r7, sp, #0
 8015a4a:	6078      	str	r0, [r7, #4]
 8015a4c:	460b      	mov	r3, r1
 8015a4e:	70fb      	strb	r3, [r7, #3]
 8015a50:	78fb      	ldrb	r3, [r7, #3]
 8015a52:	4618      	mov	r0, r3
 8015a54:	370c      	adds	r7, #12
 8015a56:	46bd      	mov	sp, r7
 8015a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a5c:	4770      	bx	lr

08015a5e <_ZN21MockIgnoredActualCall15returnBoolValueEv>:
    virtual bool returnBoolValue() _override { return false; }
 8015a5e:	b480      	push	{r7}
 8015a60:	b083      	sub	sp, #12
 8015a62:	af00      	add	r7, sp, #0
 8015a64:	6078      	str	r0, [r7, #4]
 8015a66:	2300      	movs	r3, #0
 8015a68:	4618      	mov	r0, r3
 8015a6a:	370c      	adds	r7, #12
 8015a6c:	46bd      	mov	sp, r7
 8015a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a72:	4770      	bx	lr

08015a74 <_ZN21MockIgnoredActualCall14returnIntValueEv>:

    virtual int returnIntValue() _override { return 0; }
 8015a74:	b480      	push	{r7}
 8015a76:	b083      	sub	sp, #12
 8015a78:	af00      	add	r7, sp, #0
 8015a7a:	6078      	str	r0, [r7, #4]
 8015a7c:	2300      	movs	r3, #0
 8015a7e:	4618      	mov	r0, r3
 8015a80:	370c      	adds	r7, #12
 8015a82:	46bd      	mov	sp, r7
 8015a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a88:	4770      	bx	lr

08015a8a <_ZN21MockIgnoredActualCall23returnIntValueOrDefaultEi>:
    virtual int returnIntValueOrDefault(int value) _override { return value; }
 8015a8a:	b480      	push	{r7}
 8015a8c:	b083      	sub	sp, #12
 8015a8e:	af00      	add	r7, sp, #0
 8015a90:	6078      	str	r0, [r7, #4]
 8015a92:	6039      	str	r1, [r7, #0]
 8015a94:	683b      	ldr	r3, [r7, #0]
 8015a96:	4618      	mov	r0, r3
 8015a98:	370c      	adds	r7, #12
 8015a9a:	46bd      	mov	sp, r7
 8015a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aa0:	4770      	bx	lr

08015aa2 <_ZN21MockIgnoredActualCall26returnUnsignedLongIntValueEv>:

    virtual unsigned long int returnUnsignedLongIntValue() _override { return 0; }
 8015aa2:	b480      	push	{r7}
 8015aa4:	b083      	sub	sp, #12
 8015aa6:	af00      	add	r7, sp, #0
 8015aa8:	6078      	str	r0, [r7, #4]
 8015aaa:	2300      	movs	r3, #0
 8015aac:	4618      	mov	r0, r3
 8015aae:	370c      	adds	r7, #12
 8015ab0:	46bd      	mov	sp, r7
 8015ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ab6:	4770      	bx	lr

08015ab8 <_ZN21MockIgnoredActualCall35returnUnsignedLongIntValueOrDefaultEm>:
    virtual unsigned long int returnUnsignedLongIntValueOrDefault(unsigned long int value) _override { return value; }
 8015ab8:	b480      	push	{r7}
 8015aba:	b083      	sub	sp, #12
 8015abc:	af00      	add	r7, sp, #0
 8015abe:	6078      	str	r0, [r7, #4]
 8015ac0:	6039      	str	r1, [r7, #0]
 8015ac2:	683b      	ldr	r3, [r7, #0]
 8015ac4:	4618      	mov	r0, r3
 8015ac6:	370c      	adds	r7, #12
 8015ac8:	46bd      	mov	sp, r7
 8015aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ace:	4770      	bx	lr

08015ad0 <_ZN21MockIgnoredActualCall18returnLongIntValueEv>:

    virtual long int returnLongIntValue() _override { return 0; }
 8015ad0:	b480      	push	{r7}
 8015ad2:	b083      	sub	sp, #12
 8015ad4:	af00      	add	r7, sp, #0
 8015ad6:	6078      	str	r0, [r7, #4]
 8015ad8:	2300      	movs	r3, #0
 8015ada:	4618      	mov	r0, r3
 8015adc:	370c      	adds	r7, #12
 8015ade:	46bd      	mov	sp, r7
 8015ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ae4:	4770      	bx	lr

08015ae6 <_ZN21MockIgnoredActualCall27returnLongIntValueOrDefaultEl>:
    virtual long int returnLongIntValueOrDefault(long int value) _override { return value; }
 8015ae6:	b480      	push	{r7}
 8015ae8:	b083      	sub	sp, #12
 8015aea:	af00      	add	r7, sp, #0
 8015aec:	6078      	str	r0, [r7, #4]
 8015aee:	6039      	str	r1, [r7, #0]
 8015af0:	683b      	ldr	r3, [r7, #0]
 8015af2:	4618      	mov	r0, r3
 8015af4:	370c      	adds	r7, #12
 8015af6:	46bd      	mov	sp, r7
 8015af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015afc:	4770      	bx	lr

08015afe <_ZN21MockIgnoredActualCall30returnUnsignedLongLongIntValueEv>:

    virtual cpputest_ulonglong returnUnsignedLongLongIntValue() _override { return 0; }
 8015afe:	b580      	push	{r7, lr}
 8015b00:	b082      	sub	sp, #8
 8015b02:	af00      	add	r7, sp, #0
 8015b04:	6078      	str	r0, [r7, #4]
 8015b06:	6039      	str	r1, [r7, #0]
 8015b08:	2100      	movs	r1, #0
 8015b0a:	6878      	ldr	r0, [r7, #4]
 8015b0c:	f7f3 f972 	bl	8008df4 <_ZN18cpputest_ulonglongC1Ei>
 8015b10:	6878      	ldr	r0, [r7, #4]
 8015b12:	3708      	adds	r7, #8
 8015b14:	46bd      	mov	sp, r7
 8015b16:	bd80      	pop	{r7, pc}

08015b18 <_ZN21MockIgnoredActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:
    virtual cpputest_ulonglong returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong value) _override { return value; }
 8015b18:	b480      	push	{r7}
 8015b1a:	b085      	sub	sp, #20
 8015b1c:	af00      	add	r7, sp, #0
 8015b1e:	60f8      	str	r0, [r7, #12]
 8015b20:	60b9      	str	r1, [r7, #8]
 8015b22:	4639      	mov	r1, r7
 8015b24:	e881 000c 	stmia.w	r1, {r2, r3}
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	461a      	mov	r2, r3
 8015b2c:	463b      	mov	r3, r7
 8015b2e:	cb03      	ldmia	r3!, {r0, r1}
 8015b30:	6010      	str	r0, [r2, #0]
 8015b32:	6051      	str	r1, [r2, #4]
 8015b34:	68f8      	ldr	r0, [r7, #12]
 8015b36:	3714      	adds	r7, #20
 8015b38:	46bd      	mov	sp, r7
 8015b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b3e:	4770      	bx	lr

08015b40 <_ZN21MockIgnoredActualCall22returnLongLongIntValueEv>:

    virtual cpputest_longlong returnLongLongIntValue() _override { return 0; }
 8015b40:	b580      	push	{r7, lr}
 8015b42:	b082      	sub	sp, #8
 8015b44:	af00      	add	r7, sp, #0
 8015b46:	6078      	str	r0, [r7, #4]
 8015b48:	6039      	str	r1, [r7, #0]
 8015b4a:	2100      	movs	r1, #0
 8015b4c:	6878      	ldr	r0, [r7, #4]
 8015b4e:	f7f3 f945 	bl	8008ddc <_ZN17cpputest_longlongC1Ei>
 8015b52:	6878      	ldr	r0, [r7, #4]
 8015b54:	3708      	adds	r7, #8
 8015b56:	46bd      	mov	sp, r7
 8015b58:	bd80      	pop	{r7, pc}

08015b5a <_ZN21MockIgnoredActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:
    virtual cpputest_longlong returnLongLongIntValueOrDefault(cpputest_longlong value) _override { return value; }
 8015b5a:	b480      	push	{r7}
 8015b5c:	b085      	sub	sp, #20
 8015b5e:	af00      	add	r7, sp, #0
 8015b60:	60f8      	str	r0, [r7, #12]
 8015b62:	60b9      	str	r1, [r7, #8]
 8015b64:	4639      	mov	r1, r7
 8015b66:	e881 000c 	stmia.w	r1, {r2, r3}
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	461a      	mov	r2, r3
 8015b6e:	463b      	mov	r3, r7
 8015b70:	cb03      	ldmia	r3!, {r0, r1}
 8015b72:	6010      	str	r0, [r2, #0]
 8015b74:	6051      	str	r1, [r2, #4]
 8015b76:	68f8      	ldr	r0, [r7, #12]
 8015b78:	3714      	adds	r7, #20
 8015b7a:	46bd      	mov	sp, r7
 8015b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b80:	4770      	bx	lr

08015b82 <_ZN21MockIgnoredActualCall22returnUnsignedIntValueEv>:

    virtual unsigned int returnUnsignedIntValue() _override { return 0; }
 8015b82:	b480      	push	{r7}
 8015b84:	b083      	sub	sp, #12
 8015b86:	af00      	add	r7, sp, #0
 8015b88:	6078      	str	r0, [r7, #4]
 8015b8a:	2300      	movs	r3, #0
 8015b8c:	4618      	mov	r0, r3
 8015b8e:	370c      	adds	r7, #12
 8015b90:	46bd      	mov	sp, r7
 8015b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b96:	4770      	bx	lr

08015b98 <_ZN21MockIgnoredActualCall31returnUnsignedIntValueOrDefaultEj>:
    virtual unsigned int returnUnsignedIntValueOrDefault(unsigned int value) _override { return value; }
 8015b98:	b480      	push	{r7}
 8015b9a:	b083      	sub	sp, #12
 8015b9c:	af00      	add	r7, sp, #0
 8015b9e:	6078      	str	r0, [r7, #4]
 8015ba0:	6039      	str	r1, [r7, #0]
 8015ba2:	683b      	ldr	r3, [r7, #0]
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	370c      	adds	r7, #12
 8015ba8:	46bd      	mov	sp, r7
 8015baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bae:	4770      	bx	lr

08015bb0 <_ZN21MockIgnoredActualCall17returnDoubleValueEv>:

    virtual double returnDoubleValue() _override { return 0.0; }
 8015bb0:	b480      	push	{r7}
 8015bb2:	b083      	sub	sp, #12
 8015bb4:	af00      	add	r7, sp, #0
 8015bb6:	6078      	str	r0, [r7, #4]
 8015bb8:	f04f 0200 	mov.w	r2, #0
 8015bbc:	f04f 0300 	mov.w	r3, #0
 8015bc0:	ec43 2b17 	vmov	d7, r2, r3
 8015bc4:	eeb0 0a47 	vmov.f32	s0, s14
 8015bc8:	eef0 0a67 	vmov.f32	s1, s15
 8015bcc:	370c      	adds	r7, #12
 8015bce:	46bd      	mov	sp, r7
 8015bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bd4:	4770      	bx	lr

08015bd6 <_ZN21MockIgnoredActualCall26returnDoubleValueOrDefaultEd>:
    virtual double returnDoubleValueOrDefault(double value) _override { return value; }
 8015bd6:	b480      	push	{r7}
 8015bd8:	b085      	sub	sp, #20
 8015bda:	af00      	add	r7, sp, #0
 8015bdc:	60f8      	str	r0, [r7, #12]
 8015bde:	ed87 0b00 	vstr	d0, [r7]
 8015be2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015be6:	ec43 2b17 	vmov	d7, r2, r3
 8015bea:	eeb0 0a47 	vmov.f32	s0, s14
 8015bee:	eef0 0a67 	vmov.f32	s1, s15
 8015bf2:	3714      	adds	r7, #20
 8015bf4:	46bd      	mov	sp, r7
 8015bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bfa:	4770      	bx	lr

08015bfc <_ZN21MockIgnoredActualCall17returnStringValueEv>:

    virtual const char * returnStringValue() _override { return ""; }
 8015bfc:	b480      	push	{r7}
 8015bfe:	b083      	sub	sp, #12
 8015c00:	af00      	add	r7, sp, #0
 8015c02:	6078      	str	r0, [r7, #4]
 8015c04:	4b03      	ldr	r3, [pc, #12]	; (8015c14 <_ZN21MockIgnoredActualCall17returnStringValueEv+0x18>)
 8015c06:	4618      	mov	r0, r3
 8015c08:	370c      	adds	r7, #12
 8015c0a:	46bd      	mov	sp, r7
 8015c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c10:	4770      	bx	lr
 8015c12:	bf00      	nop
 8015c14:	08023c6c 	.word	0x08023c6c

08015c18 <_ZN21MockIgnoredActualCall26returnStringValueOrDefaultEPKc>:
    virtual const char * returnStringValueOrDefault(const char * value) _override { return value; }
 8015c18:	b480      	push	{r7}
 8015c1a:	b083      	sub	sp, #12
 8015c1c:	af00      	add	r7, sp, #0
 8015c1e:	6078      	str	r0, [r7, #4]
 8015c20:	6039      	str	r1, [r7, #0]
 8015c22:	683b      	ldr	r3, [r7, #0]
 8015c24:	4618      	mov	r0, r3
 8015c26:	370c      	adds	r7, #12
 8015c28:	46bd      	mov	sp, r7
 8015c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c2e:	4770      	bx	lr

08015c30 <_ZN21MockIgnoredActualCall18returnPointerValueEv>:

    virtual void * returnPointerValue() _override { return NULLPTR; }
 8015c30:	b480      	push	{r7}
 8015c32:	b083      	sub	sp, #12
 8015c34:	af00      	add	r7, sp, #0
 8015c36:	6078      	str	r0, [r7, #4]
 8015c38:	2300      	movs	r3, #0
 8015c3a:	4618      	mov	r0, r3
 8015c3c:	370c      	adds	r7, #12
 8015c3e:	46bd      	mov	sp, r7
 8015c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c44:	4770      	bx	lr

08015c46 <_ZN21MockIgnoredActualCall27returnPointerValueOrDefaultEPv>:
    virtual void * returnPointerValueOrDefault(void * value) _override { return value; }
 8015c46:	b480      	push	{r7}
 8015c48:	b083      	sub	sp, #12
 8015c4a:	af00      	add	r7, sp, #0
 8015c4c:	6078      	str	r0, [r7, #4]
 8015c4e:	6039      	str	r1, [r7, #0]
 8015c50:	683b      	ldr	r3, [r7, #0]
 8015c52:	4618      	mov	r0, r3
 8015c54:	370c      	adds	r7, #12
 8015c56:	46bd      	mov	sp, r7
 8015c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c5c:	4770      	bx	lr

08015c5e <_ZN21MockIgnoredActualCall23returnConstPointerValueEv>:

    virtual const void * returnConstPointerValue() _override { return NULLPTR; }
 8015c5e:	b480      	push	{r7}
 8015c60:	b083      	sub	sp, #12
 8015c62:	af00      	add	r7, sp, #0
 8015c64:	6078      	str	r0, [r7, #4]
 8015c66:	2300      	movs	r3, #0
 8015c68:	4618      	mov	r0, r3
 8015c6a:	370c      	adds	r7, #12
 8015c6c:	46bd      	mov	sp, r7
 8015c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c72:	4770      	bx	lr

08015c74 <_ZN21MockIgnoredActualCall32returnConstPointerValueOrDefaultEPKv>:
    virtual const void * returnConstPointerValueOrDefault(const void * value) _override { return value; }
 8015c74:	b480      	push	{r7}
 8015c76:	b083      	sub	sp, #12
 8015c78:	af00      	add	r7, sp, #0
 8015c7a:	6078      	str	r0, [r7, #4]
 8015c7c:	6039      	str	r1, [r7, #0]
 8015c7e:	683b      	ldr	r3, [r7, #0]
 8015c80:	4618      	mov	r0, r3
 8015c82:	370c      	adds	r7, #12
 8015c84:	46bd      	mov	sp, r7
 8015c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c8a:	4770      	bx	lr

08015c8c <_ZN21MockIgnoredActualCall26returnFunctionPointerValueEv>:

    virtual void (*returnFunctionPointerValue())() _override { return NULLPTR; }
 8015c8c:	b480      	push	{r7}
 8015c8e:	b083      	sub	sp, #12
 8015c90:	af00      	add	r7, sp, #0
 8015c92:	6078      	str	r0, [r7, #4]
 8015c94:	2300      	movs	r3, #0
 8015c96:	4618      	mov	r0, r3
 8015c98:	370c      	adds	r7, #12
 8015c9a:	46bd      	mov	sp, r7
 8015c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ca0:	4770      	bx	lr

08015ca2 <_ZN21MockIgnoredActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:
    virtual void (*returnFunctionPointerValueOrDefault(void (*value)()))() _override { return value; }
 8015ca2:	b480      	push	{r7}
 8015ca4:	b083      	sub	sp, #12
 8015ca6:	af00      	add	r7, sp, #0
 8015ca8:	6078      	str	r0, [r7, #4]
 8015caa:	6039      	str	r1, [r7, #0]
 8015cac:	683b      	ldr	r3, [r7, #0]
 8015cae:	4618      	mov	r0, r3
 8015cb0:	370c      	adds	r7, #12
 8015cb2:	46bd      	mov	sp, r7
 8015cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cb8:	4770      	bx	lr

08015cba <_ZN21MockIgnoredActualCall8onObjectEPKv>:

    virtual MockActualCall& onObject(const void* ) _override { return *this; }
 8015cba:	b480      	push	{r7}
 8015cbc:	b083      	sub	sp, #12
 8015cbe:	af00      	add	r7, sp, #0
 8015cc0:	6078      	str	r0, [r7, #4]
 8015cc2:	6039      	str	r1, [r7, #0]
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	4618      	mov	r0, r3
 8015cc8:	370c      	adds	r7, #12
 8015cca:	46bd      	mov	sp, r7
 8015ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cd0:	4770      	bx	lr
	...

08015cd4 <_ZN14MockActualCallC1Ev>:
#include "CppUTestExt/MockCheckedActualCall.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"
#include "CppUTestExt/MockFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

MockActualCall::MockActualCall()
 8015cd4:	b480      	push	{r7}
 8015cd6:	b083      	sub	sp, #12
 8015cd8:	af00      	add	r7, sp, #0
 8015cda:	6078      	str	r0, [r7, #4]
 8015cdc:	4a04      	ldr	r2, [pc, #16]	; (8015cf0 <_ZN14MockActualCallC1Ev+0x1c>)
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	601a      	str	r2, [r3, #0]
{
}
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	4618      	mov	r0, r3
 8015ce6:	370c      	adds	r7, #12
 8015ce8:	46bd      	mov	sp, r7
 8015cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cee:	4770      	bx	lr
 8015cf0:	080263b0 	.word	0x080263b0

08015cf4 <_ZN14MockActualCallD1Ev>:

MockActualCall::~MockActualCall()
 8015cf4:	b480      	push	{r7}
 8015cf6:	b083      	sub	sp, #12
 8015cf8:	af00      	add	r7, sp, #0
 8015cfa:	6078      	str	r0, [r7, #4]
 8015cfc:	4a04      	ldr	r2, [pc, #16]	; (8015d10 <_ZN14MockActualCallD1Ev+0x1c>)
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	601a      	str	r2, [r3, #0]
{
}
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	4618      	mov	r0, r3
 8015d06:	370c      	adds	r7, #12
 8015d08:	46bd      	mov	sp, r7
 8015d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d0e:	4770      	bx	lr
 8015d10:	080263b0 	.word	0x080263b0

08015d14 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>:

void MockCheckedActualCall::setName(const SimpleString& name)
{
 8015d14:	b580      	push	{r7, lr}
 8015d16:	b082      	sub	sp, #8
 8015d18:	af00      	add	r7, sp, #0
 8015d1a:	6078      	str	r0, [r7, #4]
 8015d1c:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	3304      	adds	r3, #4
 8015d22:	6839      	ldr	r1, [r7, #0]
 8015d24:	4618      	mov	r0, r3
 8015d26:	f7f5 f88e 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
}
 8015d2a:	bf00      	nop
 8015d2c:	3708      	adds	r7, #8
 8015d2e:	46bd      	mov	sp, r7
 8015d30:	bd80      	pop	{r7, pc}

08015d32 <_ZNK21MockCheckedActualCall7getNameEv>:

SimpleString MockCheckedActualCall::getName() const
{
 8015d32:	b580      	push	{r7, lr}
 8015d34:	b082      	sub	sp, #8
 8015d36:	af00      	add	r7, sp, #0
 8015d38:	6078      	str	r0, [r7, #4]
 8015d3a:	6039      	str	r1, [r7, #0]
    return functionName_;
 8015d3c:	683b      	ldr	r3, [r7, #0]
 8015d3e:	3304      	adds	r3, #4
 8015d40:	4619      	mov	r1, r3
 8015d42:	6878      	ldr	r0, [r7, #4]
 8015d44:	f7f5 f867 	bl	800ae16 <_ZN12SimpleStringC1ERKS_>
}
 8015d48:	6878      	ldr	r0, [r7, #4]
 8015d4a:	3708      	adds	r7, #8
 8015d4c:	46bd      	mov	sp, r7
 8015d4e:	bd80      	pop	{r7, pc}

08015d50 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>:

MockCheckedActualCall::MockCheckedActualCall(unsigned int callOrder, MockFailureReporter* reporter, const MockExpectedCallsList& allExpectations)
 8015d50:	b580      	push	{r7, lr}
 8015d52:	b084      	sub	sp, #16
 8015d54:	af00      	add	r7, sp, #0
 8015d56:	60f8      	str	r0, [r7, #12]
 8015d58:	60b9      	str	r1, [r7, #8]
 8015d5a:	607a      	str	r2, [r7, #4]
 8015d5c:	603b      	str	r3, [r7, #0]
    : callOrder_(callOrder), reporter_(reporter), state_(CALL_SUCCEED), expectationsChecked_(false), matchingExpectation_(NULLPTR),
      allExpectations_(allExpectations), outputParameterExpectations_(NULLPTR)
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	4618      	mov	r0, r3
 8015d62:	f7ff ffb7 	bl	8015cd4 <_ZN14MockActualCallC1Ev>
 8015d66:	4a17      	ldr	r2, [pc, #92]	; (8015dc4 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x74>)
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	601a      	str	r2, [r3, #0]
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	3304      	adds	r3, #4
 8015d70:	4915      	ldr	r1, [pc, #84]	; (8015dc8 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x78>)
 8015d72:	4618      	mov	r0, r3
 8015d74:	f7f4 fffb 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8015d78:	68fb      	ldr	r3, [r7, #12]
 8015d7a:	68ba      	ldr	r2, [r7, #8]
 8015d7c:	60da      	str	r2, [r3, #12]
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	687a      	ldr	r2, [r7, #4]
 8015d82:	611a      	str	r2, [r3, #16]
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	2202      	movs	r2, #2
 8015d88:	751a      	strb	r2, [r3, #20]
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	2200      	movs	r2, #0
 8015d8e:	755a      	strb	r2, [r3, #21]
 8015d90:	68fb      	ldr	r3, [r7, #12]
 8015d92:	2200      	movs	r2, #0
 8015d94:	619a      	str	r2, [r3, #24]
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	331c      	adds	r3, #28
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	f004 f814 	bl	8019dc8 <_ZN21MockExpectedCallsListC1Ev>
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	683a      	ldr	r2, [r7, #0]
 8015da4:	625a      	str	r2, [r3, #36]	; 0x24
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	2200      	movs	r2, #0
 8015daa:	629a      	str	r2, [r3, #40]	; 0x28
{
    potentiallyMatchingExpectations_.addPotentiallyMatchingExpectations(allExpectations);
 8015dac:	68fb      	ldr	r3, [r7, #12]
 8015dae:	331c      	adds	r3, #28
 8015db0:	6839      	ldr	r1, [r7, #0]
 8015db2:	4618      	mov	r0, r3
 8015db4:	f004 f986 	bl	801a0c4 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>
}
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	4618      	mov	r0, r3
 8015dbc:	3710      	adds	r7, #16
 8015dbe:	46bd      	mov	sp, r7
 8015dc0:	bd80      	pop	{r7, pc}
 8015dc2:	bf00      	nop
 8015dc4:	080262b0 	.word	0x080262b0
 8015dc8:	08023c6c 	.word	0x08023c6c

08015dcc <_ZN21MockCheckedActualCallD1Ev>:

MockCheckedActualCall::~MockCheckedActualCall()
 8015dcc:	b580      	push	{r7, lr}
 8015dce:	b082      	sub	sp, #8
 8015dd0:	af00      	add	r7, sp, #0
 8015dd2:	6078      	str	r0, [r7, #4]
 8015dd4:	4a0c      	ldr	r2, [pc, #48]	; (8015e08 <_ZN21MockCheckedActualCallD1Ev+0x3c>)
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	601a      	str	r2, [r3, #0]
{
    cleanUpOutputParameterList();
 8015dda:	6878      	ldr	r0, [r7, #4]
 8015ddc:	f001 fae4 	bl	80173a8 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>
MockCheckedActualCall::~MockCheckedActualCall()
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	331c      	adds	r3, #28
 8015de4:	4618      	mov	r0, r3
 8015de6:	f004 f803 	bl	8019df0 <_ZN21MockExpectedCallsListD1Ev>
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	3304      	adds	r3, #4
 8015dee:	4618      	mov	r0, r3
 8015df0:	f7f5 fb75 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	4618      	mov	r0, r3
 8015df8:	f7ff ff7c 	bl	8015cf4 <_ZN14MockActualCallD1Ev>
}
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	4618      	mov	r0, r3
 8015e00:	3708      	adds	r7, #8
 8015e02:	46bd      	mov	sp, r7
 8015e04:	bd80      	pop	{r7, pc}
 8015e06:	bf00      	nop
 8015e08:	080262b0 	.word	0x080262b0

08015e0c <_ZN21MockCheckedActualCallD0Ev>:
MockCheckedActualCall::~MockCheckedActualCall()
 8015e0c:	b580      	push	{r7, lr}
 8015e0e:	b082      	sub	sp, #8
 8015e10:	af00      	add	r7, sp, #0
 8015e12:	6078      	str	r0, [r7, #4]
}
 8015e14:	6878      	ldr	r0, [r7, #4]
 8015e16:	f7ff ffd9 	bl	8015dcc <_ZN21MockCheckedActualCallD1Ev>
 8015e1a:	212c      	movs	r1, #44	; 0x2c
 8015e1c:	6878      	ldr	r0, [r7, #4]
 8015e1e:	f7f2 fbf7 	bl	8008610 <_ZdlPvj>
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	4618      	mov	r0, r3
 8015e26:	3708      	adds	r7, #8
 8015e28:	46bd      	mov	sp, r7
 8015e2a:	bd80      	pop	{r7, pc}

08015e2c <_ZN21MockCheckedActualCall22setMockFailureReporterEP19MockFailureReporter>:

void MockCheckedActualCall::setMockFailureReporter(MockFailureReporter* reporter)
{
 8015e2c:	b480      	push	{r7}
 8015e2e:	b083      	sub	sp, #12
 8015e30:	af00      	add	r7, sp, #0
 8015e32:	6078      	str	r0, [r7, #4]
 8015e34:	6039      	str	r1, [r7, #0]
    reporter_ = reporter;
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	683a      	ldr	r2, [r7, #0]
 8015e3a:	611a      	str	r2, [r3, #16]
}
 8015e3c:	bf00      	nop
 8015e3e:	370c      	adds	r7, #12
 8015e40:	46bd      	mov	sp, r7
 8015e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e46:	4770      	bx	lr

08015e48 <_ZNK21MockCheckedActualCall7getTestEv>:

UtestShell* MockCheckedActualCall::getTest() const
{
 8015e48:	b580      	push	{r7, lr}
 8015e4a:	b082      	sub	sp, #8
 8015e4c:	af00      	add	r7, sp, #0
 8015e4e:	6078      	str	r0, [r7, #4]
    return reporter_->getTestToFail();
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	691a      	ldr	r2, [r3, #16]
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	691b      	ldr	r3, [r3, #16]
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	330c      	adds	r3, #12
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	4610      	mov	r0, r2
 8015e60:	4798      	blx	r3
 8015e62:	4603      	mov	r3, r0
}
 8015e64:	4618      	mov	r0, r3
 8015e66:	3708      	adds	r7, #8
 8015e68:	46bd      	mov	sp, r7
 8015e6a:	bd80      	pop	{r7, pc}

08015e6c <_ZN21MockCheckedActualCall8failTestERK11MockFailure>:

void MockCheckedActualCall::failTest(const MockFailure& failure)
{
 8015e6c:	b580      	push	{r7, lr}
 8015e6e:	b082      	sub	sp, #8
 8015e70:	af00      	add	r7, sp, #0
 8015e72:	6078      	str	r0, [r7, #4]
 8015e74:	6039      	str	r1, [r7, #0]
    if (!hasFailed()) {
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	33c0      	adds	r3, #192	; 0xc0
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	6878      	ldr	r0, [r7, #4]
 8015e80:	4798      	blx	r3
 8015e82:	4603      	mov	r3, r0
 8015e84:	f083 0301 	eor.w	r3, r3, #1
 8015e88:	b2db      	uxtb	r3, r3
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d010      	beq.n	8015eb0 <_ZN21MockCheckedActualCall8failTestERK11MockFailure+0x44>
        setState(CALL_FAILED);
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	33ec      	adds	r3, #236	; 0xec
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	2101      	movs	r1, #1
 8015e98:	6878      	ldr	r0, [r7, #4]
 8015e9a:	4798      	blx	r3
        reporter_->failTest(failure);
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	691a      	ldr	r2, [r3, #16]
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	691b      	ldr	r3, [r3, #16]
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	3308      	adds	r3, #8
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	6839      	ldr	r1, [r7, #0]
 8015eac:	4610      	mov	r0, r2
 8015eae:	4798      	blx	r3
    }
}
 8015eb0:	bf00      	nop
 8015eb2:	3708      	adds	r7, #8
 8015eb4:	46bd      	mov	sp, r7
 8015eb6:	bd80      	pop	{r7, pc}

08015eb8 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall>:

void MockCheckedActualCall::copyOutputParameters(MockCheckedExpectedCall* expectedCall)
{
 8015eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ebc:	b0bc      	sub	sp, #240	; 0xf0
 8015ebe:	af00      	add	r7, sp, #0
 8015ec0:	6078      	str	r0, [r7, #4]
 8015ec2:	6039      	str	r1, [r7, #0]
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ec8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8015ecc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	f000 80f5 	beq.w	80160c0 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x208>
    {
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 8015ed6:	683b      	ldr	r3, [r7, #0]
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	339c      	adds	r3, #156	; 0x9c
 8015edc:	681b      	ldr	r3, [r3, #0]
 8015ede:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8015ee2:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8015ee6:	6839      	ldr	r1, [r7, #0]
 8015ee8:	4798      	blx	r3
        MockNamedValueCopier* copier = outputParameter.getCopier();
 8015eea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015eee:	4618      	mov	r0, r3
 8015ef0:	f006 fa6e 	bl	801c3d0 <_ZNK14MockNamedValue9getCopierEv>
 8015ef4:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        if (copier)
 8015ef8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d013      	beq.n	8015f28 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x70>
        {
            copier->copy(p->ptr_, outputParameter.getConstObjectPointer());
 8015f00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	3308      	adds	r3, #8
 8015f08:	681c      	ldr	r4, [r3, #0]
 8015f0a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015f0e:	691d      	ldr	r5, [r3, #16]
 8015f10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015f14:	4618      	mov	r0, r3
 8015f16:	f006 fa2b 	bl	801c370 <_ZNK14MockNamedValue21getConstObjectPointerEv>
 8015f1a:	4603      	mov	r3, r0
 8015f1c:	461a      	mov	r2, r3
 8015f1e:	4629      	mov	r1, r5
 8015f20:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8015f24:	47a0      	blx	r4
 8015f26:	e0c0      	b.n	80160aa <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if ((outputParameter.getType() == "const void*") && (p->type_ == "void*"))
 8015f28:	2500      	movs	r5, #0
 8015f2a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015f2e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8015f32:	4611      	mov	r1, r2
 8015f34:	4618      	mov	r0, r3
 8015f36:	f005 ff0e 	bl	801bd56 <_ZNK14MockNamedValue7getTypeEv>
 8015f3a:	2601      	movs	r6, #1
 8015f3c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8015f40:	4962      	ldr	r1, [pc, #392]	; (80160cc <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x214>)
 8015f42:	4618      	mov	r0, r3
 8015f44:	f7f4 ff13 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8015f48:	f04f 0801 	mov.w	r8, #1
 8015f4c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8015f50:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015f54:	4611      	mov	r1, r2
 8015f56:	4618      	mov	r0, r3
 8015f58:	f7f5 facd 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 8015f5c:	4603      	mov	r3, r0
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d015      	beq.n	8015f8e <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 8015f62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015f66:	f103 0408 	add.w	r4, r3, #8
 8015f6a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8015f6e:	4958      	ldr	r1, [pc, #352]	; (80160d0 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x218>)
 8015f70:	4618      	mov	r0, r3
 8015f72:	f7f4 fefc 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8015f76:	2501      	movs	r5, #1
 8015f78:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8015f7c:	4619      	mov	r1, r3
 8015f7e:	4620      	mov	r0, r4
 8015f80:	f7f5 fab9 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 8015f84:	4603      	mov	r3, r0
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d001      	beq.n	8015f8e <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 8015f8a:	2401      	movs	r4, #1
 8015f8c:	e000      	b.n	8015f90 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd8>
 8015f8e:	2400      	movs	r4, #0
 8015f90:	2d00      	cmp	r5, #0
 8015f92:	d004      	beq.n	8015f9e <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xe6>
 8015f94:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8015f98:	4618      	mov	r0, r3
 8015f9a:	f7f5 faa0 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8015f9e:	f1b8 0f00 	cmp.w	r8, #0
 8015fa2:	d004      	beq.n	8015fae <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xf6>
 8015fa4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8015fa8:	4618      	mov	r0, r3
 8015faa:	f7f5 fa98 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8015fae:	2e00      	cmp	r6, #0
 8015fb0:	d004      	beq.n	8015fbc <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x104>
 8015fb2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015fb6:	4618      	mov	r0, r3
 8015fb8:	f7f5 fa91 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8015fbc:	2c00      	cmp	r4, #0
 8015fbe:	d018      	beq.n	8015ff2 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x13a>
        {
            const void* data = outputParameter.getConstPointerValue();
 8015fc0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015fc4:	4618      	mov	r0, r3
 8015fc6:	f006 f95b 	bl	801c280 <_ZNK14MockNamedValue20getConstPointerValueEv>
 8015fca:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
            size_t size = outputParameter.getSize();
 8015fce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	f006 f9e4 	bl	801c3a0 <_ZNK14MockNamedValue7getSizeEv>
 8015fd8:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
            PlatformSpecificMemCpy(p->ptr_, data, size);
 8015fdc:	4b3d      	ldr	r3, [pc, #244]	; (80160d4 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x21c>)
 8015fde:	681b      	ldr	r3, [r3, #0]
 8015fe0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8015fe4:	6910      	ldr	r0, [r2, #16]
 8015fe6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8015fea:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8015fee:	4798      	blx	r3
 8015ff0:	e05b      	b.n	80160aa <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if (outputParameter.getName() != "")
 8015ff2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8015ff6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8015ffa:	4611      	mov	r1, r2
 8015ffc:	4618      	mov	r0, r3
 8015ffe:	f005 fe9b 	bl	801bd38 <_ZNK14MockNamedValue7getNameEv>
 8016002:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8016006:	4934      	ldr	r1, [pc, #208]	; (80160d8 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x220>)
 8016008:	4618      	mov	r0, r3
 801600a:	f7f4 feb0 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801600e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8016012:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8016016:	4611      	mov	r1, r2
 8016018:	4618      	mov	r0, r3
 801601a:	f7f5 fab1 	bl	800b580 <_ZneRK12SimpleStringS1_>
 801601e:	4603      	mov	r3, r0
 8016020:	461c      	mov	r4, r3
 8016022:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8016026:	4618      	mov	r0, r3
 8016028:	f7f5 fa59 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801602c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8016030:	4618      	mov	r0, r3
 8016032:	f7f5 fa54 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8016036:	2c00      	cmp	r4, #0
 8016038:	d037      	beq.n	80160aa <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        {
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 801603a:	683b      	ldr	r3, [r7, #0]
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	339c      	adds	r3, #156	; 0x9c
 8016040:	681b      	ldr	r3, [r3, #0]
 8016042:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8016046:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 801604a:	6839      	ldr	r1, [r7, #0]
 801604c:	4798      	blx	r3
 801604e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8016052:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8016056:	4611      	mov	r1, r2
 8016058:	4618      	mov	r0, r3
 801605a:	f005 fe7c 	bl	801bd56 <_ZNK14MockNamedValue7getTypeEv>
 801605e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8016062:	4618      	mov	r0, r3
 8016064:	f005 fbd2 	bl	801b80c <_ZN14MockNamedValueD1Ev>
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	33cc      	adds	r3, #204	; 0xcc
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	6878      	ldr	r0, [r7, #4]
 8016072:	4798      	blx	r3
 8016074:	4601      	mov	r1, r0
 8016076:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801607a:	f107 030c 	add.w	r3, r7, #12
 801607e:	4618      	mov	r0, r3
 8016080:	f005 faee 	bl	801b660 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>
            failTest(failure);
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	681b      	ldr	r3, [r3, #0]
 8016088:	33dc      	adds	r3, #220	; 0xdc
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	f107 020c 	add.w	r2, r7, #12
 8016090:	4611      	mov	r1, r2
 8016092:	6878      	ldr	r0, [r7, #4]
 8016094:	4798      	blx	r3
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 8016096:	f107 030c 	add.w	r3, r7, #12
 801609a:	4618      	mov	r0, r3
 801609c:	f001 ffe2 	bl	8018064 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 80160a0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80160a4:	4618      	mov	r0, r3
 80160a6:	f7f5 fa1a 	bl	800b4de <_ZN12SimpleStringD1Ev>
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 80160aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80160ae:	4618      	mov	r0, r3
 80160b0:	f005 fbac 	bl	801b80c <_ZN14MockNamedValueD1Ev>
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 80160b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80160b8:	695b      	ldr	r3, [r3, #20]
 80160ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80160be:	e705      	b.n	8015ecc <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x14>
        }
    }
}
 80160c0:	bf00      	nop
 80160c2:	37f0      	adds	r7, #240	; 0xf0
 80160c4:	46bd      	mov	sp, r7
 80160c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160ca:	bf00      	nop
 80160cc:	08023c70 	.word	0x08023c70
 80160d0:	08023c7c 	.word	0x08023c7c
 80160d4:	200000d4 	.word	0x200000d4
 80160d8:	08023c6c 	.word	0x08023c6c

080160dc <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv>:

void MockCheckedActualCall::completeCallWhenMatchIsFound()
{
 80160dc:	b580      	push	{r7, lr}
 80160de:	b084      	sub	sp, #16
 80160e0:	af00      	add	r7, sp, #0
 80160e2:	6078      	str	r0, [r7, #4]
    // Expectations that don't ignore parameters have higher fulfillment preference than those that ignore parameters

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstFinalizedMatchingExpectation();
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	331c      	adds	r3, #28
 80160e8:	4618      	mov	r0, r3
 80160ea:	f004 f9bb 	bl	801a464 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>
 80160ee:	4602      	mov	r2, r0
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	699b      	ldr	r3, [r3, #24]
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d00f      	beq.n	801611c <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x40>
        copyOutputParameters(matchingExpectation_);
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	33d4      	adds	r3, #212	; 0xd4
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	687a      	ldr	r2, [r7, #4]
 8016106:	6992      	ldr	r2, [r2, #24]
 8016108:	4611      	mov	r1, r2
 801610a:	6878      	ldr	r0, [r7, #4]
 801610c:	4798      	blx	r3
        callHasSucceeded();
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	33d0      	adds	r3, #208	; 0xd0
 8016114:	681b      	ldr	r3, [r3, #0]
 8016116:	6878      	ldr	r0, [r7, #4]
 8016118:	4798      	blx	r3
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
        if (matchingExpectationWithIgnoredParameters) {
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
        }
    }
}
 801611a:	e00f      	b.n	801613c <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	331c      	adds	r3, #28
 8016120:	4618      	mov	r0, r3
 8016122:	f004 f9cc 	bl	801a4be <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>
 8016126:	60f8      	str	r0, [r7, #12]
        if (matchingExpectationWithIgnoredParameters) {
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	2b00      	cmp	r3, #0
 801612c:	d006      	beq.n	801613c <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	681b      	ldr	r3, [r3, #0]
 8016132:	33d4      	adds	r3, #212	; 0xd4
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	68f9      	ldr	r1, [r7, #12]
 8016138:	6878      	ldr	r0, [r7, #4]
 801613a:	4798      	blx	r3
}
 801613c:	bf00      	nop
 801613e:	3710      	adds	r7, #16
 8016140:	46bd      	mov	sp, r7
 8016142:	bd80      	pop	{r7, pc}

08016144 <_ZN21MockCheckedActualCall16callHasSucceededEv>:

void MockCheckedActualCall::callHasSucceeded()
{
 8016144:	b580      	push	{r7, lr}
 8016146:	b082      	sub	sp, #8
 8016148:	af00      	add	r7, sp, #0
 801614a:	6078      	str	r0, [r7, #4]
    setState(CALL_SUCCEED);
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	33ec      	adds	r3, #236	; 0xec
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	2102      	movs	r1, #2
 8016156:	6878      	ldr	r0, [r7, #4]
 8016158:	4798      	blx	r3
}
 801615a:	bf00      	nop
 801615c:	3708      	adds	r7, #8
 801615e:	46bd      	mov	sp, r7
 8016160:	bd80      	pop	{r7, pc}

08016162 <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv>:

void MockCheckedActualCall::discardCurrentlyMatchingExpectations()
{
 8016162:	b580      	push	{r7, lr}
 8016164:	b082      	sub	sp, #8
 8016166:	af00      	add	r7, sp, #0
 8016168:	6078      	str	r0, [r7, #4]
    if (matchingExpectation_)
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	699b      	ldr	r3, [r3, #24]
 801616e:	2b00      	cmp	r3, #0
 8016170:	d00b      	beq.n	801618a <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv+0x28>
    {
        matchingExpectation_->resetActualCallMatchingState();
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	699a      	ldr	r2, [r3, #24]
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	699b      	ldr	r3, [r3, #24]
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	33ec      	adds	r3, #236	; 0xec
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	4610      	mov	r0, r2
 8016182:	4798      	blx	r3
        matchingExpectation_ = NULLPTR;
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	2200      	movs	r2, #0
 8016188:	619a      	str	r2, [r3, #24]
    }
    potentiallyMatchingExpectations_.onlyKeepUnmatchingExpectations();
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	331c      	adds	r3, #28
 801618e:	4618      	mov	r0, r3
 8016190:	f004 f85c 	bl	801a24c <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>
}
 8016194:	bf00      	nop
 8016196:	3708      	adds	r7, #8
 8016198:	46bd      	mov	sp, r7
 801619a:	bd80      	pop	{r7, pc}

0801619c <_ZN21MockCheckedActualCall8withNameERK12SimpleString>:

MockActualCall& MockCheckedActualCall::withName(const SimpleString& name)
{
 801619c:	b590      	push	{r4, r7, lr}
 801619e:	b091      	sub	sp, #68	; 0x44
 80161a0:	af00      	add	r7, sp, #0
 80161a2:	6078      	str	r0, [r7, #4]
 80161a4:	6039      	str	r1, [r7, #0]
    setName(name);
 80161a6:	6839      	ldr	r1, [r7, #0]
 80161a8:	6878      	ldr	r0, [r7, #4]
 80161aa:	f7ff fdb3 	bl	8015d14 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>
    setState(CALL_IN_PROGRESS);
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	681b      	ldr	r3, [r3, #0]
 80161b2:	33ec      	adds	r3, #236	; 0xec
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	2100      	movs	r1, #0
 80161b8:	6878      	ldr	r0, [r7, #4]
 80161ba:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsRelatedTo(name);
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	331c      	adds	r3, #28
 80161c0:	6839      	ldr	r1, [r7, #0]
 80161c2:	4618      	mov	r0, r3
 80161c4:	f003 ffec 	bl	801a1a0 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>
    if (potentiallyMatchingExpectations_.isEmpty()) {
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	331c      	adds	r3, #28
 80161cc:	4618      	mov	r0, r3
 80161ce:	f003 fe7c 	bl	8019eca <_ZNK21MockExpectedCallsList7isEmptyEv>
 80161d2:	4603      	mov	r3, r0
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d01d      	beq.n	8016214 <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x78>
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	33cc      	adds	r3, #204	; 0xcc
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	6878      	ldr	r0, [r7, #4]
 80161e2:	4798      	blx	r3
 80161e4:	4601      	mov	r1, r0
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161ea:	f107 000c 	add.w	r0, r7, #12
 80161ee:	683a      	ldr	r2, [r7, #0]
 80161f0:	f004 fe24 	bl	801ae3c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
        failTest(failure);
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	681b      	ldr	r3, [r3, #0]
 80161f8:	33dc      	adds	r3, #220	; 0xdc
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	f107 020c 	add.w	r2, r7, #12
 8016200:	4611      	mov	r1, r2
 8016202:	6878      	ldr	r0, [r7, #4]
 8016204:	4798      	blx	r3
        return *this;
 8016206:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 8016208:	f107 030c 	add.w	r3, r7, #12
 801620c:	4618      	mov	r0, r3
 801620e:	f001 ff4b 	bl	80180a8 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 8016212:	e006      	b.n	8016222 <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x86>
    }

    completeCallWhenMatchIsFound();
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	681b      	ldr	r3, [r3, #0]
 8016218:	33d8      	adds	r3, #216	; 0xd8
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	6878      	ldr	r0, [r7, #4]
 801621e:	4798      	blx	r3

    return *this;
 8016220:	687c      	ldr	r4, [r7, #4]
 8016222:	4623      	mov	r3, r4
}
 8016224:	4618      	mov	r0, r3
 8016226:	3744      	adds	r7, #68	; 0x44
 8016228:	46bd      	mov	sp, r7
 801622a:	bd90      	pop	{r4, r7, pc}

0801622c <_ZN21MockCheckedActualCall13withCallOrderEj>:

MockActualCall& MockCheckedActualCall::withCallOrder(unsigned int)
{
 801622c:	b480      	push	{r7}
 801622e:	b083      	sub	sp, #12
 8016230:	af00      	add	r7, sp, #0
 8016232:	6078      	str	r0, [r7, #4]
 8016234:	6039      	str	r1, [r7, #0]
    return *this;
 8016236:	687b      	ldr	r3, [r7, #4]
}
 8016238:	4618      	mov	r0, r3
 801623a:	370c      	adds	r7, #12
 801623c:	46bd      	mov	sp, r7
 801623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016242:	4770      	bx	lr

08016244 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkInputParameter(const MockNamedValue& actualParameter)
{
 8016244:	b590      	push	{r4, r7, lr}
 8016246:	b097      	sub	sp, #92	; 0x5c
 8016248:	af02      	add	r7, sp, #8
 801624a:	6078      	str	r0, [r7, #4]
 801624c:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	33c0      	adds	r3, #192	; 0xc0
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	6878      	ldr	r0, [r7, #4]
 8016258:	4798      	blx	r3
 801625a:	4603      	mov	r3, r0
 801625c:	2b00      	cmp	r3, #0
 801625e:	d164      	bne.n	801632a <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	33ec      	adds	r3, #236	; 0xec
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	2100      	movs	r1, #0
 801626a:	6878      	ldr	r0, [r7, #4]
 801626c:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	33e8      	adds	r3, #232	; 0xe8
 8016274:	681b      	ldr	r3, [r3, #0]
 8016276:	6878      	ldr	r0, [r7, #4]
 8016278:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithInputParameter(actualParameter);
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	331c      	adds	r3, #28
 801627e:	6839      	ldr	r1, [r7, #0]
 8016280:	4618      	mov	r0, r3
 8016282:	f004 f86b 	bl	801a35c <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	331c      	adds	r3, #28
 801628a:	4618      	mov	r0, r3
 801628c:	f003 fe1d 	bl	8019eca <_ZNK21MockExpectedCallsList7isEmptyEv>
 8016290:	4603      	mov	r3, r0
 8016292:	2b00      	cmp	r3, #0
 8016294:	d02b      	beq.n	80162ee <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	681b      	ldr	r3, [r3, #0]
 801629a:	33cc      	adds	r3, #204	; 0xcc
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	6878      	ldr	r0, [r7, #4]
 80162a0:	4798      	blx	r3
 80162a2:	4604      	mov	r4, r0
 80162a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80162a8:	6879      	ldr	r1, [r7, #4]
 80162aa:	4618      	mov	r0, r3
 80162ac:	f7ff fd41 	bl	8015d32 <_ZNK21MockCheckedActualCall7getNameEv>
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162b4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80162b8:	f107 000c 	add.w	r0, r7, #12
 80162bc:	9300      	str	r3, [sp, #0]
 80162be:	683b      	ldr	r3, [r7, #0]
 80162c0:	4621      	mov	r1, r4
 80162c2:	f004 fe7f 	bl	801afc4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 80162c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80162ca:	4618      	mov	r0, r3
 80162cc:	f7f5 f907 	bl	800b4de <_ZN12SimpleStringD1Ev>
        failTest(failure);
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	33dc      	adds	r3, #220	; 0xdc
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	f107 020c 	add.w	r2, r7, #12
 80162dc:	4611      	mov	r1, r2
 80162de:	6878      	ldr	r0, [r7, #4]
 80162e0:	4798      	blx	r3
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 80162e2:	f107 030c 	add.w	r3, r7, #12
 80162e6:	4618      	mov	r0, r3
 80162e8:	f001 ff00 	bl	80180ec <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 80162ec:	e01e      	b.n	801632c <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.parameterWasPassed(actualParameter.getName());
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	f103 041c 	add.w	r4, r3, #28
 80162f4:	683b      	ldr	r3, [r7, #0]
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	335c      	adds	r3, #92	; 0x5c
 80162fa:	681b      	ldr	r3, [r3, #0]
 80162fc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8016300:	6839      	ldr	r1, [r7, #0]
 8016302:	4610      	mov	r0, r2
 8016304:	4798      	blx	r3
 8016306:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801630a:	4619      	mov	r1, r3
 801630c:	4620      	mov	r0, r4
 801630e:	f004 f9b8 	bl	801a682 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>
 8016312:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016316:	4618      	mov	r0, r3
 8016318:	f7f5 f8e1 	bl	800b4de <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	33d8      	adds	r3, #216	; 0xd8
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	6878      	ldr	r0, [r7, #4]
 8016326:	4798      	blx	r3
 8016328:	e000      	b.n	801632c <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
 801632a:	bf00      	nop
}
 801632c:	3754      	adds	r7, #84	; 0x54
 801632e:	46bd      	mov	sp, r7
 8016330:	bd90      	pop	{r4, r7, pc}

08016332 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkOutputParameter(const MockNamedValue& outputParameter)
{
 8016332:	b590      	push	{r4, r7, lr}
 8016334:	b097      	sub	sp, #92	; 0x5c
 8016336:	af02      	add	r7, sp, #8
 8016338:	6078      	str	r0, [r7, #4]
 801633a:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	33c0      	adds	r3, #192	; 0xc0
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	6878      	ldr	r0, [r7, #4]
 8016346:	4798      	blx	r3
 8016348:	4603      	mov	r3, r0
 801634a:	2b00      	cmp	r3, #0
 801634c:	d164      	bne.n	8016418 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	33ec      	adds	r3, #236	; 0xec
 8016354:	681b      	ldr	r3, [r3, #0]
 8016356:	2100      	movs	r1, #0
 8016358:	6878      	ldr	r0, [r7, #4]
 801635a:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	33e8      	adds	r3, #232	; 0xe8
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	6878      	ldr	r0, [r7, #4]
 8016366:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithOutputParameter(outputParameter);
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	331c      	adds	r3, #28
 801636c:	6839      	ldr	r1, [r7, #0]
 801636e:	4618      	mov	r0, r3
 8016370:	f004 f820 	bl	801a3b4 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	331c      	adds	r3, #28
 8016378:	4618      	mov	r0, r3
 801637a:	f003 fda6 	bl	8019eca <_ZNK21MockExpectedCallsList7isEmptyEv>
 801637e:	4603      	mov	r3, r0
 8016380:	2b00      	cmp	r3, #0
 8016382:	d02b      	beq.n	80163dc <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	681b      	ldr	r3, [r3, #0]
 8016388:	33cc      	adds	r3, #204	; 0xcc
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	6878      	ldr	r0, [r7, #4]
 801638e:	4798      	blx	r3
 8016390:	4604      	mov	r4, r0
 8016392:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016396:	6879      	ldr	r1, [r7, #4]
 8016398:	4618      	mov	r0, r3
 801639a:	f7ff fcca 	bl	8015d32 <_ZNK21MockCheckedActualCall7getNameEv>
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163a2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80163a6:	f107 000c 	add.w	r0, r7, #12
 80163aa:	9300      	str	r3, [sp, #0]
 80163ac:	683b      	ldr	r3, [r7, #0]
 80163ae:	4621      	mov	r1, r4
 80163b0:	f004 ff6a 	bl	801b288 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 80163b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80163b8:	4618      	mov	r0, r3
 80163ba:	f7f5 f890 	bl	800b4de <_ZN12SimpleStringD1Ev>
        failTest(failure);
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	681b      	ldr	r3, [r3, #0]
 80163c2:	33dc      	adds	r3, #220	; 0xdc
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	f107 020c 	add.w	r2, r7, #12
 80163ca:	4611      	mov	r1, r2
 80163cc:	6878      	ldr	r0, [r7, #4]
 80163ce:	4798      	blx	r3
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 80163d0:	f107 030c 	add.w	r3, r7, #12
 80163d4:	4618      	mov	r0, r3
 80163d6:	f001 feab 	bl	8018130 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 80163da:	e01e      	b.n	801641a <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.outputParameterWasPassed(outputParameter.getName());
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	f103 041c 	add.w	r4, r3, #28
 80163e2:	683b      	ldr	r3, [r7, #0]
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	335c      	adds	r3, #92	; 0x5c
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80163ee:	6839      	ldr	r1, [r7, #0]
 80163f0:	4610      	mov	r0, r2
 80163f2:	4798      	blx	r3
 80163f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80163f8:	4619      	mov	r1, r3
 80163fa:	4620      	mov	r0, r4
 80163fc:	f004 f95e 	bl	801a6bc <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>
 8016400:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016404:	4618      	mov	r0, r3
 8016406:	f7f5 f86a 	bl	800b4de <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	33d8      	adds	r3, #216	; 0xd8
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	6878      	ldr	r0, [r7, #4]
 8016414:	4798      	blx	r3
 8016416:	e000      	b.n	801641a <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
 8016418:	bf00      	nop
}
 801641a:	3754      	adds	r7, #84	; 0x54
 801641c:	46bd      	mov	sp, r7
 801641e:	bd90      	pop	{r4, r7, pc}

08016420 <_ZN21MockCheckedActualCall17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockCheckedActualCall::withBoolParameter(const SimpleString& name, bool value)
{
 8016420:	b590      	push	{r4, r7, lr}
 8016422:	b093      	sub	sp, #76	; 0x4c
 8016424:	af00      	add	r7, sp, #0
 8016426:	60f8      	str	r0, [r7, #12]
 8016428:	60b9      	str	r1, [r7, #8]
 801642a:	4613      	mov	r3, r2
 801642c:	71fb      	strb	r3, [r7, #7]
    MockNamedValue actualParameter(name);
 801642e:	f107 0310 	add.w	r3, r7, #16
 8016432:	68b9      	ldr	r1, [r7, #8]
 8016434:	4618      	mov	r0, r3
 8016436:	f005 f9bf 	bl	801b7b8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801643a:	79fa      	ldrb	r2, [r7, #7]
 801643c:	f107 0310 	add.w	r3, r7, #16
 8016440:	4611      	mov	r1, r2
 8016442:	4618      	mov	r0, r3
 8016444:	f005 fa0a 	bl	801b85c <_ZN14MockNamedValue8setValueEb>
    checkInputParameter(actualParameter);
 8016448:	68fb      	ldr	r3, [r7, #12]
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	33e0      	adds	r3, #224	; 0xe0
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	f107 0210 	add.w	r2, r7, #16
 8016454:	4611      	mov	r1, r2
 8016456:	68f8      	ldr	r0, [r7, #12]
 8016458:	4798      	blx	r3
    return *this;
 801645a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801645c:	f107 0310 	add.w	r3, r7, #16
 8016460:	4618      	mov	r0, r3
 8016462:	f005 f9d3 	bl	801b80c <_ZN14MockNamedValueD1Ev>
    return *this;
 8016466:	4623      	mov	r3, r4
}
 8016468:	4618      	mov	r0, r3
 801646a:	374c      	adds	r7, #76	; 0x4c
 801646c:	46bd      	mov	sp, r7
 801646e:	bd90      	pop	{r4, r7, pc}

08016470 <_ZN21MockCheckedActualCall24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockCheckedActualCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 8016470:	b590      	push	{r4, r7, lr}
 8016472:	b093      	sub	sp, #76	; 0x4c
 8016474:	af00      	add	r7, sp, #0
 8016476:	60f8      	str	r0, [r7, #12]
 8016478:	60b9      	str	r1, [r7, #8]
 801647a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801647c:	f107 0310 	add.w	r3, r7, #16
 8016480:	68b9      	ldr	r1, [r7, #8]
 8016482:	4618      	mov	r0, r3
 8016484:	f005 f998 	bl	801b7b8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016488:	f107 0310 	add.w	r3, r7, #16
 801648c:	6879      	ldr	r1, [r7, #4]
 801648e:	4618      	mov	r0, r3
 8016490:	f005 fa08 	bl	801b8a4 <_ZN14MockNamedValue8setValueEj>
    checkInputParameter(actualParameter);
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	33e0      	adds	r3, #224	; 0xe0
 801649a:	681b      	ldr	r3, [r3, #0]
 801649c:	f107 0210 	add.w	r2, r7, #16
 80164a0:	4611      	mov	r1, r2
 80164a2:	68f8      	ldr	r0, [r7, #12]
 80164a4:	4798      	blx	r3
    return *this;
 80164a6:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80164a8:	f107 0310 	add.w	r3, r7, #16
 80164ac:	4618      	mov	r0, r3
 80164ae:	f005 f9ad 	bl	801b80c <_ZN14MockNamedValueD1Ev>
    return *this;
 80164b2:	4623      	mov	r3, r4
}
 80164b4:	4618      	mov	r0, r3
 80164b6:	374c      	adds	r7, #76	; 0x4c
 80164b8:	46bd      	mov	sp, r7
 80164ba:	bd90      	pop	{r4, r7, pc}

080164bc <_ZN21MockCheckedActualCall16withIntParameterERK12SimpleStringi>:

MockActualCall& MockCheckedActualCall::withIntParameter(const SimpleString& name, int value)
{
 80164bc:	b590      	push	{r4, r7, lr}
 80164be:	b093      	sub	sp, #76	; 0x4c
 80164c0:	af00      	add	r7, sp, #0
 80164c2:	60f8      	str	r0, [r7, #12]
 80164c4:	60b9      	str	r1, [r7, #8]
 80164c6:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80164c8:	f107 0310 	add.w	r3, r7, #16
 80164cc:	68b9      	ldr	r1, [r7, #8]
 80164ce:	4618      	mov	r0, r3
 80164d0:	f005 f972 	bl	801b7b8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80164d4:	f107 0310 	add.w	r3, r7, #16
 80164d8:	6879      	ldr	r1, [r7, #4]
 80164da:	4618      	mov	r0, r3
 80164dc:	f005 fa04 	bl	801b8e8 <_ZN14MockNamedValue8setValueEi>
    checkInputParameter(actualParameter);
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	33e0      	adds	r3, #224	; 0xe0
 80164e6:	681b      	ldr	r3, [r3, #0]
 80164e8:	f107 0210 	add.w	r2, r7, #16
 80164ec:	4611      	mov	r1, r2
 80164ee:	68f8      	ldr	r0, [r7, #12]
 80164f0:	4798      	blx	r3
    return *this;
 80164f2:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80164f4:	f107 0310 	add.w	r3, r7, #16
 80164f8:	4618      	mov	r0, r3
 80164fa:	f005 f987 	bl	801b80c <_ZN14MockNamedValueD1Ev>
    return *this;
 80164fe:	4623      	mov	r3, r4
}
 8016500:	4618      	mov	r0, r3
 8016502:	374c      	adds	r7, #76	; 0x4c
 8016504:	46bd      	mov	sp, r7
 8016506:	bd90      	pop	{r4, r7, pc}

08016508 <_ZN21MockCheckedActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockCheckedActualCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8016508:	b590      	push	{r4, r7, lr}
 801650a:	b093      	sub	sp, #76	; 0x4c
 801650c:	af00      	add	r7, sp, #0
 801650e:	60f8      	str	r0, [r7, #12]
 8016510:	60b9      	str	r1, [r7, #8]
 8016512:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8016514:	f107 0310 	add.w	r3, r7, #16
 8016518:	68b9      	ldr	r1, [r7, #8]
 801651a:	4618      	mov	r0, r3
 801651c:	f005 f94c 	bl	801b7b8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016520:	f107 0310 	add.w	r3, r7, #16
 8016524:	6879      	ldr	r1, [r7, #4]
 8016526:	4618      	mov	r0, r3
 8016528:	f005 fa22 	bl	801b970 <_ZN14MockNamedValue8setValueEm>
    checkInputParameter(actualParameter);
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	33e0      	adds	r3, #224	; 0xe0
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	f107 0210 	add.w	r2, r7, #16
 8016538:	4611      	mov	r1, r2
 801653a:	68f8      	ldr	r0, [r7, #12]
 801653c:	4798      	blx	r3
    return *this;
 801653e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016540:	f107 0310 	add.w	r3, r7, #16
 8016544:	4618      	mov	r0, r3
 8016546:	f005 f961 	bl	801b80c <_ZN14MockNamedValueD1Ev>
    return *this;
 801654a:	4623      	mov	r3, r4
}
 801654c:	4618      	mov	r0, r3
 801654e:	374c      	adds	r7, #76	; 0x4c
 8016550:	46bd      	mov	sp, r7
 8016552:	bd90      	pop	{r4, r7, pc}

08016554 <_ZN21MockCheckedActualCall20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockCheckedActualCall::withLongIntParameter(const SimpleString& name, long int value)
{
 8016554:	b590      	push	{r4, r7, lr}
 8016556:	b093      	sub	sp, #76	; 0x4c
 8016558:	af00      	add	r7, sp, #0
 801655a:	60f8      	str	r0, [r7, #12]
 801655c:	60b9      	str	r1, [r7, #8]
 801655e:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8016560:	f107 0310 	add.w	r3, r7, #16
 8016564:	68b9      	ldr	r1, [r7, #8]
 8016566:	4618      	mov	r0, r3
 8016568:	f005 f926 	bl	801b7b8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801656c:	f107 0310 	add.w	r3, r7, #16
 8016570:	6879      	ldr	r1, [r7, #4]
 8016572:	4618      	mov	r0, r3
 8016574:	f005 f9da 	bl	801b92c <_ZN14MockNamedValue8setValueEl>
    checkInputParameter(actualParameter);
 8016578:	68fb      	ldr	r3, [r7, #12]
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	33e0      	adds	r3, #224	; 0xe0
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	f107 0210 	add.w	r2, r7, #16
 8016584:	4611      	mov	r1, r2
 8016586:	68f8      	ldr	r0, [r7, #12]
 8016588:	4798      	blx	r3
    return *this;
 801658a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801658c:	f107 0310 	add.w	r3, r7, #16
 8016590:	4618      	mov	r0, r3
 8016592:	f005 f93b 	bl	801b80c <_ZN14MockNamedValueD1Ev>
    return *this;
 8016596:	4623      	mov	r3, r4
}
 8016598:	4618      	mov	r0, r3
 801659a:	374c      	adds	r7, #76	; 0x4c
 801659c:	46bd      	mov	sp, r7
 801659e:	bd90      	pop	{r4, r7, pc}

080165a0 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockCheckedActualCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 80165a0:	b5b0      	push	{r4, r5, r7, lr}
 80165a2:	b086      	sub	sp, #24
 80165a4:	af02      	add	r7, sp, #8
 80165a6:	60f8      	str	r0, [r7, #12]
 80165a8:	60b9      	str	r1, [r7, #8]
 80165aa:	4639      	mov	r1, r7
 80165ac:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 80165b0:	f7fb ffc0 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 80165b4:	4604      	mov	r4, r0
 80165b6:	6823      	ldr	r3, [r4, #0]
 80165b8:	3368      	adds	r3, #104	; 0x68
 80165ba:	681d      	ldr	r5, [r3, #0]
 80165bc:	f7fb ffca 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80165c0:	4603      	mov	r3, r0
 80165c2:	9300      	str	r3, [sp, #0]
 80165c4:	f44f 7385 	mov.w	r3, #266	; 0x10a
 80165c8:	4a04      	ldr	r2, [pc, #16]	; (80165dc <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 80165ca:	4905      	ldr	r1, [pc, #20]	; (80165e0 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 80165cc:	4620      	mov	r0, r4
 80165ce:	47a8      	blx	r5
    return *this;
 80165d0:	68fb      	ldr	r3, [r7, #12]
}
 80165d2:	4618      	mov	r0, r3
 80165d4:	3710      	adds	r7, #16
 80165d6:	46bd      	mov	sp, r7
 80165d8:	bdb0      	pop	{r4, r5, r7, pc}
 80165da:	bf00      	nop
 80165dc:	08023c84 	.word	0x08023c84
 80165e0:	08023ca0 	.word	0x08023ca0

080165e4 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockCheckedActualCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 80165e4:	b5b0      	push	{r4, r5, r7, lr}
 80165e6:	b086      	sub	sp, #24
 80165e8:	af02      	add	r7, sp, #8
 80165ea:	60f8      	str	r0, [r7, #12]
 80165ec:	60b9      	str	r1, [r7, #8]
 80165ee:	4639      	mov	r1, r7
 80165f0:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 80165f4:	f7fb ff9e 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 80165f8:	4604      	mov	r4, r0
 80165fa:	6823      	ldr	r3, [r4, #0]
 80165fc:	3368      	adds	r3, #104	; 0x68
 80165fe:	681d      	ldr	r5, [r3, #0]
 8016600:	f7fb ffa8 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016604:	4603      	mov	r3, r0
 8016606:	9300      	str	r3, [sp, #0]
 8016608:	f44f 7388 	mov.w	r3, #272	; 0x110
 801660c:	4a04      	ldr	r2, [pc, #16]	; (8016620 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801660e:	4905      	ldr	r1, [pc, #20]	; (8016624 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 8016610:	4620      	mov	r0, r4
 8016612:	47a8      	blx	r5
    return *this;
 8016614:	68fb      	ldr	r3, [r7, #12]
}
 8016616:	4618      	mov	r0, r3
 8016618:	3710      	adds	r7, #16
 801661a:	46bd      	mov	sp, r7
 801661c:	bdb0      	pop	{r4, r5, r7, pc}
 801661e:	bf00      	nop
 8016620:	08023c84 	.word	0x08023c84
 8016624:	08023ccc 	.word	0x08023ccc

08016628 <_ZN21MockCheckedActualCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockCheckedActualCall::withDoubleParameter(const SimpleString& name, double value)
{
 8016628:	b590      	push	{r4, r7, lr}
 801662a:	b093      	sub	sp, #76	; 0x4c
 801662c:	af00      	add	r7, sp, #0
 801662e:	60f8      	str	r0, [r7, #12]
 8016630:	60b9      	str	r1, [r7, #8]
 8016632:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue actualParameter(name);
 8016636:	f107 0310 	add.w	r3, r7, #16
 801663a:	68b9      	ldr	r1, [r7, #8]
 801663c:	4618      	mov	r0, r3
 801663e:	f005 f8bb 	bl	801b7b8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016642:	f107 0310 	add.w	r3, r7, #16
 8016646:	ed97 0b00 	vldr	d0, [r7]
 801664a:	4618      	mov	r0, r3
 801664c:	f005 f9f0 	bl	801ba30 <_ZN14MockNamedValue8setValueEd>
    checkInputParameter(actualParameter);
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	33e0      	adds	r3, #224	; 0xe0
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	f107 0210 	add.w	r2, r7, #16
 801665c:	4611      	mov	r1, r2
 801665e:	68f8      	ldr	r0, [r7, #12]
 8016660:	4798      	blx	r3
    return *this;
 8016662:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016664:	f107 0310 	add.w	r3, r7, #16
 8016668:	4618      	mov	r0, r3
 801666a:	f005 f8cf 	bl	801b80c <_ZN14MockNamedValueD1Ev>
    return *this;
 801666e:	4623      	mov	r3, r4
}
 8016670:	4618      	mov	r0, r3
 8016672:	374c      	adds	r7, #76	; 0x4c
 8016674:	46bd      	mov	sp, r7
 8016676:	bd90      	pop	{r4, r7, pc}

08016678 <_ZN21MockCheckedActualCall19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockCheckedActualCall::withStringParameter(const SimpleString& name, const char* value)
{
 8016678:	b590      	push	{r4, r7, lr}
 801667a:	b093      	sub	sp, #76	; 0x4c
 801667c:	af00      	add	r7, sp, #0
 801667e:	60f8      	str	r0, [r7, #12]
 8016680:	60b9      	str	r1, [r7, #8]
 8016682:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8016684:	f107 0310 	add.w	r3, r7, #16
 8016688:	68b9      	ldr	r1, [r7, #8]
 801668a:	4618      	mov	r0, r3
 801668c:	f005 f894 	bl	801b7b8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016690:	f107 0310 	add.w	r3, r7, #16
 8016694:	6879      	ldr	r1, [r7, #4]
 8016696:	4618      	mov	r0, r3
 8016698:	f005 fa74 	bl	801bb84 <_ZN14MockNamedValue8setValueEPKc>
    checkInputParameter(actualParameter);
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	33e0      	adds	r3, #224	; 0xe0
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	f107 0210 	add.w	r2, r7, #16
 80166a8:	4611      	mov	r1, r2
 80166aa:	68f8      	ldr	r0, [r7, #12]
 80166ac:	4798      	blx	r3
    return *this;
 80166ae:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80166b0:	f107 0310 	add.w	r3, r7, #16
 80166b4:	4618      	mov	r0, r3
 80166b6:	f005 f8a9 	bl	801b80c <_ZN14MockNamedValueD1Ev>
    return *this;
 80166ba:	4623      	mov	r3, r4
}
 80166bc:	4618      	mov	r0, r3
 80166be:	374c      	adds	r7, #76	; 0x4c
 80166c0:	46bd      	mov	sp, r7
 80166c2:	bd90      	pop	{r4, r7, pc}

080166c4 <_ZN21MockCheckedActualCall20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withPointerParameter(const SimpleString& name, void* value)
{
 80166c4:	b590      	push	{r4, r7, lr}
 80166c6:	b093      	sub	sp, #76	; 0x4c
 80166c8:	af00      	add	r7, sp, #0
 80166ca:	60f8      	str	r0, [r7, #12]
 80166cc:	60b9      	str	r1, [r7, #8]
 80166ce:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80166d0:	f107 0310 	add.w	r3, r7, #16
 80166d4:	68b9      	ldr	r1, [r7, #8]
 80166d6:	4618      	mov	r0, r3
 80166d8:	f005 f86e 	bl	801b7b8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80166dc:	f107 0310 	add.w	r3, r7, #16
 80166e0:	6879      	ldr	r1, [r7, #4]
 80166e2:	4618      	mov	r0, r3
 80166e4:	f005 f9e8 	bl	801bab8 <_ZN14MockNamedValue8setValueEPv>
    checkInputParameter(actualParameter);
 80166e8:	68fb      	ldr	r3, [r7, #12]
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	33e0      	adds	r3, #224	; 0xe0
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	f107 0210 	add.w	r2, r7, #16
 80166f4:	4611      	mov	r1, r2
 80166f6:	68f8      	ldr	r0, [r7, #12]
 80166f8:	4798      	blx	r3
    return *this;
 80166fa:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80166fc:	f107 0310 	add.w	r3, r7, #16
 8016700:	4618      	mov	r0, r3
 8016702:	f005 f883 	bl	801b80c <_ZN14MockNamedValueD1Ev>
    return *this;
 8016706:	4623      	mov	r3, r4
}
 8016708:	4618      	mov	r0, r3
 801670a:	374c      	adds	r7, #76	; 0x4c
 801670c:	46bd      	mov	sp, r7
 801670e:	bd90      	pop	{r4, r7, pc}

08016710 <_ZN21MockCheckedActualCall25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockCheckedActualCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 8016710:	b590      	push	{r4, r7, lr}
 8016712:	b093      	sub	sp, #76	; 0x4c
 8016714:	af00      	add	r7, sp, #0
 8016716:	60f8      	str	r0, [r7, #12]
 8016718:	60b9      	str	r1, [r7, #8]
 801671a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801671c:	f107 0310 	add.w	r3, r7, #16
 8016720:	68b9      	ldr	r1, [r7, #8]
 8016722:	4618      	mov	r0, r3
 8016724:	f005 f848 	bl	801b7b8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016728:	f107 0310 	add.w	r3, r7, #16
 801672c:	6879      	ldr	r1, [r7, #4]
 801672e:	4618      	mov	r0, r3
 8016730:	f005 f9e4 	bl	801bafc <_ZN14MockNamedValue8setValueEPKv>
    checkInputParameter(actualParameter);
 8016734:	68fb      	ldr	r3, [r7, #12]
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	33e0      	adds	r3, #224	; 0xe0
 801673a:	681b      	ldr	r3, [r3, #0]
 801673c:	f107 0210 	add.w	r2, r7, #16
 8016740:	4611      	mov	r1, r2
 8016742:	68f8      	ldr	r0, [r7, #12]
 8016744:	4798      	blx	r3
    return *this;
 8016746:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016748:	f107 0310 	add.w	r3, r7, #16
 801674c:	4618      	mov	r0, r3
 801674e:	f005 f85d 	bl	801b80c <_ZN14MockNamedValueD1Ev>
    return *this;
 8016752:	4623      	mov	r3, r4
}
 8016754:	4618      	mov	r0, r3
 8016756:	374c      	adds	r7, #76	; 0x4c
 8016758:	46bd      	mov	sp, r7
 801675a:	bd90      	pop	{r4, r7, pc}

0801675c <_ZN21MockCheckedActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockCheckedActualCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 801675c:	b590      	push	{r4, r7, lr}
 801675e:	b093      	sub	sp, #76	; 0x4c
 8016760:	af00      	add	r7, sp, #0
 8016762:	60f8      	str	r0, [r7, #12]
 8016764:	60b9      	str	r1, [r7, #8]
 8016766:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8016768:	f107 0310 	add.w	r3, r7, #16
 801676c:	68b9      	ldr	r1, [r7, #8]
 801676e:	4618      	mov	r0, r3
 8016770:	f005 f822 	bl	801b7b8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016774:	f107 0310 	add.w	r3, r7, #16
 8016778:	6879      	ldr	r1, [r7, #4]
 801677a:	4618      	mov	r0, r3
 801677c:	f005 f9e0 	bl	801bb40 <_ZN14MockNamedValue8setValueEPFvvE>
    checkInputParameter(actualParameter);
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	681b      	ldr	r3, [r3, #0]
 8016784:	33e0      	adds	r3, #224	; 0xe0
 8016786:	681b      	ldr	r3, [r3, #0]
 8016788:	f107 0210 	add.w	r2, r7, #16
 801678c:	4611      	mov	r1, r2
 801678e:	68f8      	ldr	r0, [r7, #12]
 8016790:	4798      	blx	r3
    return *this;
 8016792:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016794:	f107 0310 	add.w	r3, r7, #16
 8016798:	4618      	mov	r0, r3
 801679a:	f005 f837 	bl	801b80c <_ZN14MockNamedValueD1Ev>
    return *this;
 801679e:	4623      	mov	r3, r4
}
 80167a0:	4618      	mov	r0, r3
 80167a2:	374c      	adds	r7, #76	; 0x4c
 80167a4:	46bd      	mov	sp, r7
 80167a6:	bd90      	pop	{r4, r7, pc}

080167a8 <_ZN21MockCheckedActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockCheckedActualCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 80167a8:	b590      	push	{r4, r7, lr}
 80167aa:	b093      	sub	sp, #76	; 0x4c
 80167ac:	af00      	add	r7, sp, #0
 80167ae:	60f8      	str	r0, [r7, #12]
 80167b0:	60b9      	str	r1, [r7, #8]
 80167b2:	607a      	str	r2, [r7, #4]
 80167b4:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 80167b6:	f107 0310 	add.w	r3, r7, #16
 80167ba:	68b9      	ldr	r1, [r7, #8]
 80167bc:	4618      	mov	r0, r3
 80167be:	f004 fffb 	bl	801b7b8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setMemoryBuffer(value, size);
 80167c2:	f107 0310 	add.w	r3, r7, #16
 80167c6:	683a      	ldr	r2, [r7, #0]
 80167c8:	6879      	ldr	r1, [r7, #4]
 80167ca:	4618      	mov	r0, r3
 80167cc:	f005 f9fc 	bl	801bbc8 <_ZN14MockNamedValue15setMemoryBufferEPKhj>
    checkInputParameter(actualParameter);
 80167d0:	68fb      	ldr	r3, [r7, #12]
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	33e0      	adds	r3, #224	; 0xe0
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	f107 0210 	add.w	r2, r7, #16
 80167dc:	4611      	mov	r1, r2
 80167de:	68f8      	ldr	r0, [r7, #12]
 80167e0:	4798      	blx	r3
    return *this;
 80167e2:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80167e4:	f107 0310 	add.w	r3, r7, #16
 80167e8:	4618      	mov	r0, r3
 80167ea:	f005 f80f 	bl	801b80c <_ZN14MockNamedValueD1Ev>
    return *this;
 80167ee:	4623      	mov	r3, r4
}
 80167f0:	4618      	mov	r0, r3
 80167f2:	374c      	adds	r7, #76	; 0x4c
 80167f4:	46bd      	mov	sp, r7
 80167f6:	bd90      	pop	{r4, r7, pc}

080167f8 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockCheckedActualCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 80167f8:	b590      	push	{r4, r7, lr}
 80167fa:	b0a1      	sub	sp, #132	; 0x84
 80167fc:	af00      	add	r7, sp, #0
 80167fe:	60f8      	str	r0, [r7, #12]
 8016800:	60b9      	str	r1, [r7, #8]
 8016802:	607a      	str	r2, [r7, #4]
 8016804:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 8016806:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801680a:	6879      	ldr	r1, [r7, #4]
 801680c:	4618      	mov	r0, r3
 801680e:	f004 ffd3 	bl	801b7b8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setConstObjectPointer(type, value);
 8016812:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016816:	683a      	ldr	r2, [r7, #0]
 8016818:	68b9      	ldr	r1, [r7, #8]
 801681a:	4618      	mov	r0, r3
 801681c:	f005 f9fa 	bl	801bc14 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>

    if (actualParameter.getComparator() == NULLPTR) {
 8016820:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016824:	4618      	mov	r0, r3
 8016826:	f005 fdc7 	bl	801c3b8 <_ZNK14MockNamedValue13getComparatorEv>
 801682a:	4603      	mov	r3, r0
 801682c:	2b00      	cmp	r3, #0
 801682e:	bf0c      	ite	eq
 8016830:	2301      	moveq	r3, #1
 8016832:	2300      	movne	r3, #0
 8016834:	b2db      	uxtb	r3, r3
 8016836:	2b00      	cmp	r3, #0
 8016838:	d01c      	beq.n	8016874 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x7c>
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	33cc      	adds	r3, #204	; 0xcc
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	68f8      	ldr	r0, [r7, #12]
 8016844:	4798      	blx	r3
 8016846:	4601      	mov	r1, r0
 8016848:	f107 0314 	add.w	r3, r7, #20
 801684c:	68ba      	ldr	r2, [r7, #8]
 801684e:	4618      	mov	r0, r3
 8016850:	f004 fed6 	bl	801b600 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>
        failTest(failure);
 8016854:	68fb      	ldr	r3, [r7, #12]
 8016856:	681b      	ldr	r3, [r3, #0]
 8016858:	33dc      	adds	r3, #220	; 0xdc
 801685a:	681b      	ldr	r3, [r3, #0]
 801685c:	f107 0214 	add.w	r2, r7, #20
 8016860:	4611      	mov	r1, r2
 8016862:	68f8      	ldr	r0, [r7, #12]
 8016864:	4798      	blx	r3
        return *this;
 8016866:	68fc      	ldr	r4, [r7, #12]
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 8016868:	f107 0314 	add.w	r3, r7, #20
 801686c:	4618      	mov	r0, r3
 801686e:	f001 fc81 	bl	8018174 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 8016872:	e009      	b.n	8016888 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x90>
    }
    checkInputParameter(actualParameter);
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	681b      	ldr	r3, [r3, #0]
 8016878:	33e0      	adds	r3, #224	; 0xe0
 801687a:	681b      	ldr	r3, [r3, #0]
 801687c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8016880:	4611      	mov	r1, r2
 8016882:	68f8      	ldr	r0, [r7, #12]
 8016884:	4798      	blx	r3
    return *this;
 8016886:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016888:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801688c:	4618      	mov	r0, r3
 801688e:	f004 ffbd 	bl	801b80c <_ZN14MockNamedValueD1Ev>
 8016892:	4623      	mov	r3, r4
}
 8016894:	4618      	mov	r0, r3
 8016896:	3784      	adds	r7, #132	; 0x84
 8016898:	46bd      	mov	sp, r7
 801689a:	bd90      	pop	{r4, r7, pc}

0801689c <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withOutputParameter(const SimpleString& name, void* output)
{
 801689c:	b590      	push	{r4, r7, lr}
 801689e:	b095      	sub	sp, #84	; 0x54
 80168a0:	af00      	add	r7, sp, #0
 80168a2:	60f8      	str	r0, [r7, #12]
 80168a4:	60b9      	str	r1, [r7, #8]
 80168a6:	607a      	str	r2, [r7, #4]
    addOutputParameter(name, "void*", output);
 80168a8:	68fb      	ldr	r3, [r7, #12]
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	33f0      	adds	r3, #240	; 0xf0
 80168ae:	681c      	ldr	r4, [r3, #0]
 80168b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80168b4:	4917      	ldr	r1, [pc, #92]	; (8016914 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv+0x78>)
 80168b6:	4618      	mov	r0, r3
 80168b8:	f7f4 fa59 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80168bc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	68b9      	ldr	r1, [r7, #8]
 80168c4:	68f8      	ldr	r0, [r7, #12]
 80168c6:	47a0      	blx	r4
 80168c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80168cc:	4618      	mov	r0, r3
 80168ce:	f7f4 fe06 	bl	800b4de <_ZN12SimpleStringD1Ev>

    MockNamedValue outputParameter(name);
 80168d2:	f107 0310 	add.w	r3, r7, #16
 80168d6:	68b9      	ldr	r1, [r7, #8]
 80168d8:	4618      	mov	r0, r3
 80168da:	f004 ff6d 	bl	801b7b8 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setValue(output);
 80168de:	f107 0310 	add.w	r3, r7, #16
 80168e2:	6879      	ldr	r1, [r7, #4]
 80168e4:	4618      	mov	r0, r3
 80168e6:	f005 f8e7 	bl	801bab8 <_ZN14MockNamedValue8setValueEPv>
    checkOutputParameter(outputParameter);
 80168ea:	68fb      	ldr	r3, [r7, #12]
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	33e4      	adds	r3, #228	; 0xe4
 80168f0:	681b      	ldr	r3, [r3, #0]
 80168f2:	f107 0210 	add.w	r2, r7, #16
 80168f6:	4611      	mov	r1, r2
 80168f8:	68f8      	ldr	r0, [r7, #12]
 80168fa:	4798      	blx	r3

    return *this;
 80168fc:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 80168fe:	f107 0310 	add.w	r3, r7, #16
 8016902:	4618      	mov	r0, r3
 8016904:	f004 ff82 	bl	801b80c <_ZN14MockNamedValueD1Ev>
    return *this;
 8016908:	4623      	mov	r3, r4
}
 801690a:	4618      	mov	r0, r3
 801690c:	3754      	adds	r7, #84	; 0x54
 801690e:	46bd      	mov	sp, r7
 8016910:	bd90      	pop	{r4, r7, pc}
 8016912:	bf00      	nop
 8016914:	08023c7c 	.word	0x08023c7c

08016918 <_ZN21MockCheckedActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockCheckedActualCall::withOutputParameterOfType(const SimpleString& type, const SimpleString& name, void* output)
{
 8016918:	b590      	push	{r4, r7, lr}
 801691a:	b093      	sub	sp, #76	; 0x4c
 801691c:	af00      	add	r7, sp, #0
 801691e:	60f8      	str	r0, [r7, #12]
 8016920:	60b9      	str	r1, [r7, #8]
 8016922:	607a      	str	r2, [r7, #4]
 8016924:	603b      	str	r3, [r7, #0]
    addOutputParameter(name, type, output);
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	33f0      	adds	r3, #240	; 0xf0
 801692c:	681c      	ldr	r4, [r3, #0]
 801692e:	683b      	ldr	r3, [r7, #0]
 8016930:	68ba      	ldr	r2, [r7, #8]
 8016932:	6879      	ldr	r1, [r7, #4]
 8016934:	68f8      	ldr	r0, [r7, #12]
 8016936:	47a0      	blx	r4

    MockNamedValue outputParameter(name);
 8016938:	f107 0310 	add.w	r3, r7, #16
 801693c:	6879      	ldr	r1, [r7, #4]
 801693e:	4618      	mov	r0, r3
 8016940:	f004 ff3a 	bl	801b7b8 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setConstObjectPointer(type, output);
 8016944:	f107 0310 	add.w	r3, r7, #16
 8016948:	683a      	ldr	r2, [r7, #0]
 801694a:	68b9      	ldr	r1, [r7, #8]
 801694c:	4618      	mov	r0, r3
 801694e:	f005 f961 	bl	801bc14 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>
    checkOutputParameter(outputParameter);
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	33e4      	adds	r3, #228	; 0xe4
 8016958:	681b      	ldr	r3, [r3, #0]
 801695a:	f107 0210 	add.w	r2, r7, #16
 801695e:	4611      	mov	r1, r2
 8016960:	68f8      	ldr	r0, [r7, #12]
 8016962:	4798      	blx	r3

    return *this;
 8016964:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 8016966:	f107 0310 	add.w	r3, r7, #16
 801696a:	4618      	mov	r0, r3
 801696c:	f004 ff4e 	bl	801b80c <_ZN14MockNamedValueD1Ev>
    return *this;
 8016970:	4623      	mov	r3, r4
}
 8016972:	4618      	mov	r0, r3
 8016974:	374c      	adds	r7, #76	; 0x4c
 8016976:	46bd      	mov	sp, r7
 8016978:	bd90      	pop	{r4, r7, pc}

0801697a <_ZNK21MockCheckedActualCall11isFulfilledEv>:

bool MockCheckedActualCall::isFulfilled() const
{
 801697a:	b480      	push	{r7}
 801697c:	b083      	sub	sp, #12
 801697e:	af00      	add	r7, sp, #0
 8016980:	6078      	str	r0, [r7, #4]
    return state_ == CALL_SUCCEED;
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	7d1b      	ldrb	r3, [r3, #20]
 8016986:	2b02      	cmp	r3, #2
 8016988:	bf0c      	ite	eq
 801698a:	2301      	moveq	r3, #1
 801698c:	2300      	movne	r3, #0
 801698e:	b2db      	uxtb	r3, r3
}
 8016990:	4618      	mov	r0, r3
 8016992:	370c      	adds	r7, #12
 8016994:	46bd      	mov	sp, r7
 8016996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801699a:	4770      	bx	lr

0801699c <_ZNK21MockCheckedActualCall9hasFailedEv>:

bool MockCheckedActualCall::hasFailed() const
{
 801699c:	b480      	push	{r7}
 801699e:	b083      	sub	sp, #12
 80169a0:	af00      	add	r7, sp, #0
 80169a2:	6078      	str	r0, [r7, #4]
    return state_ == CALL_FAILED;
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	7d1b      	ldrb	r3, [r3, #20]
 80169a8:	2b01      	cmp	r3, #1
 80169aa:	bf0c      	ite	eq
 80169ac:	2301      	moveq	r3, #1
 80169ae:	2300      	movne	r3, #0
 80169b0:	b2db      	uxtb	r3, r3
}
 80169b2:	4618      	mov	r0, r3
 80169b4:	370c      	adds	r7, #12
 80169b6:	46bd      	mov	sp, r7
 80169b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169bc:	4770      	bx	lr
	...

080169c0 <_ZN21MockCheckedActualCall17checkExpectationsEv>:

void MockCheckedActualCall::checkExpectations()
{
 80169c0:	b5b0      	push	{r4, r5, r7, lr}
 80169c2:	b096      	sub	sp, #88	; 0x58
 80169c4:	af02      	add	r7, sp, #8
 80169c6:	6078      	str	r0, [r7, #4]
    if(expectationsChecked_) {
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	7d5b      	ldrb	r3, [r3, #21]
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	f040 80bc 	bne.w	8016b4a <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18a>
        return;
    }

    expectationsChecked_ = true;
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	2201      	movs	r2, #1
 80169d6:	755a      	strb	r2, [r3, #21]

    if (state_ != CALL_IN_PROGRESS) {
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	7d1b      	ldrb	r3, [r3, #20]
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d014      	beq.n	8016a0a <_ZN21MockCheckedActualCall17checkExpectationsEv+0x4a>
        if(state_ == CALL_SUCCEED) {
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	7d1b      	ldrb	r3, [r3, #20]
 80169e4:	2b02      	cmp	r3, #2
 80169e6:	d10a      	bne.n	80169fe <_ZN21MockCheckedActualCall17checkExpectationsEv+0x3e>
            matchingExpectation_->callWasMade(callOrder_);
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	6998      	ldr	r0, [r3, #24]
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	699b      	ldr	r3, [r3, #24]
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	33d8      	adds	r3, #216	; 0xd8
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	687a      	ldr	r2, [r7, #4]
 80169f8:	68d2      	ldr	r2, [r2, #12]
 80169fa:	4611      	mov	r1, r2
 80169fc:	4798      	blx	r3
        }
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	331c      	adds	r3, #28
 8016a02:	4618      	mov	r0, r3
 8016a04:	f003 fe07 	bl	801a616 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 8016a08:	e0a0      	b.n	8016b4c <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasFinalizedMatchingExpectations())
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	331c      	adds	r3, #28
 8016a0e:	4618      	mov	r0, r3
 8016a10:	f003 fac3 	bl	8019f9a <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>
 8016a14:	4603      	mov	r3, r0
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d00f      	beq.n	8016a3a <_ZN21MockCheckedActualCall17checkExpectationsEv+0x7a>
        FAIL("Actual call is in progress, but there are finalized matching expectations when checking expectations. This cannot happen."); // LCOV_EXCL_LINE
 8016a1a:	f7fb fd8b 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 8016a1e:	4604      	mov	r4, r0
 8016a20:	6823      	ldr	r3, [r4, #0]
 8016a22:	3368      	adds	r3, #104	; 0x68
 8016a24:	681d      	ldr	r5, [r3, #0]
 8016a26:	f7fb fd95 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016a2a:	4603      	mov	r3, r0
 8016a2c:	9300      	str	r3, [sp, #0]
 8016a2e:	f240 1385 	movw	r3, #389	; 0x185
 8016a32:	4a48      	ldr	r2, [pc, #288]	; (8016b54 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x194>)
 8016a34:	4948      	ldr	r1, [pc, #288]	; (8016b58 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x198>)
 8016a36:	4620      	mov	r0, r4
 8016a38:	47a8      	blx	r5

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstMatchingExpectation();
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	331c      	adds	r3, #28
 8016a3e:	4618      	mov	r0, r3
 8016a40:	f003 fd5f 	bl	801a502 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>
 8016a44:	4602      	mov	r2, r0
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	699b      	ldr	r3, [r3, #24]
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d01f      	beq.n	8016a92 <_ZN21MockCheckedActualCall17checkExpectationsEv+0xd2>
        matchingExpectation_->finalizeActualCallMatch();
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	699a      	ldr	r2, [r3, #24]
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	699b      	ldr	r3, [r3, #24]
 8016a5a:	681b      	ldr	r3, [r3, #0]
 8016a5c:	33e4      	adds	r3, #228	; 0xe4
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	4610      	mov	r0, r2
 8016a62:	4798      	blx	r3
        callHasSucceeded();
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	33d0      	adds	r3, #208	; 0xd0
 8016a6a:	681b      	ldr	r3, [r3, #0]
 8016a6c:	6878      	ldr	r0, [r7, #4]
 8016a6e:	4798      	blx	r3
        matchingExpectation_->callWasMade(callOrder_);
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	6998      	ldr	r0, [r3, #24]
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	699b      	ldr	r3, [r3, #24]
 8016a78:	681b      	ldr	r3, [r3, #0]
 8016a7a:	33d8      	adds	r3, #216	; 0xd8
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	687a      	ldr	r2, [r7, #4]
 8016a80:	68d2      	ldr	r2, [r2, #12]
 8016a82:	4611      	mov	r1, r2
 8016a84:	4798      	blx	r3
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	331c      	adds	r3, #28
 8016a8a:	4618      	mov	r0, r3
 8016a8c:	f003 fdc3 	bl	801a616 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 8016a90:	e05c      	b.n	8016b4c <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasUnmatchingExpectationsBecauseOfMissingParameters()) {
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	331c      	adds	r3, #28
 8016a96:	4618      	mov	r0, r3
 8016a98:	f003 ffc4 	bl	801aa24 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>
 8016a9c:	4603      	mov	r3, r0
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d029      	beq.n	8016af6 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x136>
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	681b      	ldr	r3, [r3, #0]
 8016aa6:	33cc      	adds	r3, #204	; 0xcc
 8016aa8:	681b      	ldr	r3, [r3, #0]
 8016aaa:	6878      	ldr	r0, [r7, #4]
 8016aac:	4798      	blx	r3
 8016aae:	4604      	mov	r4, r0
 8016ab0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016ab4:	6879      	ldr	r1, [r7, #4]
 8016ab6:	4618      	mov	r0, r3
 8016ab8:	f7ff f93b 	bl	8015d32 <_ZNK21MockCheckedActualCall7getNameEv>
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ac0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8016ac4:	f107 000c 	add.w	r0, r7, #12
 8016ac8:	4621      	mov	r1, r4
 8016aca:	f004 fd21 	bl	801b510 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 8016ace:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016ad2:	4618      	mov	r0, r3
 8016ad4:	f7f4 fd03 	bl	800b4de <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	33dc      	adds	r3, #220	; 0xdc
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	f107 020c 	add.w	r2, r7, #12
 8016ae4:	4611      	mov	r1, r2
 8016ae6:	6878      	ldr	r0, [r7, #4]
 8016ae8:	4798      	blx	r3
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8016aea:	f107 030c 	add.w	r3, r7, #12
 8016aee:	4618      	mov	r0, r3
 8016af0:	f001 fb62 	bl	80181b8 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 8016af4:	e02a      	b.n	8016b4c <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }
    else {
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	33cc      	adds	r3, #204	; 0xcc
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	6878      	ldr	r0, [r7, #4]
 8016b00:	4798      	blx	r3
 8016b02:	4604      	mov	r4, r0
 8016b04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016b08:	6879      	ldr	r1, [r7, #4]
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	f7ff f911 	bl	8015d32 <_ZNK21MockCheckedActualCall7getNameEv>
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b14:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8016b18:	f107 000c 	add.w	r0, r7, #12
 8016b1c:	4621      	mov	r1, r4
 8016b1e:	f004 fe05 	bl	801b72c <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 8016b22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016b26:	4618      	mov	r0, r3
 8016b28:	f7f4 fcd9 	bl	800b4de <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	33dc      	adds	r3, #220	; 0xdc
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	f107 020c 	add.w	r2, r7, #12
 8016b38:	4611      	mov	r1, r2
 8016b3a:	6878      	ldr	r0, [r7, #4]
 8016b3c:	4798      	blx	r3
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8016b3e:	f107 030c 	add.w	r3, r7, #12
 8016b42:	4618      	mov	r0, r3
 8016b44:	f001 fb5a 	bl	80181fc <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 8016b48:	e000      	b.n	8016b4c <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
        return;
 8016b4a:	bf00      	nop
    }
}
 8016b4c:	3750      	adds	r7, #80	; 0x50
 8016b4e:	46bd      	mov	sp, r7
 8016b50:	bdb0      	pop	{r4, r5, r7, pc}
 8016b52:	bf00      	nop
 8016b54:	08023c84 	.word	0x08023c84
 8016b58:	08023cec 	.word	0x08023cec

08016b5c <_ZN21MockCheckedActualCall8setStateENS_15ActualCallStateE>:

void MockCheckedActualCall::setState(ActualCallState state)
{
 8016b5c:	b480      	push	{r7}
 8016b5e:	b083      	sub	sp, #12
 8016b60:	af00      	add	r7, sp, #0
 8016b62:	6078      	str	r0, [r7, #4]
 8016b64:	460b      	mov	r3, r1
 8016b66:	70fb      	strb	r3, [r7, #3]
    state_ = state;
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	78fa      	ldrb	r2, [r7, #3]
 8016b6c:	751a      	strb	r2, [r3, #20]
}
 8016b6e:	bf00      	nop
 8016b70:	370c      	adds	r7, #12
 8016b72:	46bd      	mov	sp, r7
 8016b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b78:	4770      	bx	lr
	...

08016b7c <_ZN21MockCheckedActualCall11returnValueEv>:

MockNamedValue MockCheckedActualCall::returnValue()
{
 8016b7c:	b580      	push	{r7, lr}
 8016b7e:	b084      	sub	sp, #16
 8016b80:	af00      	add	r7, sp, #0
 8016b82:	6078      	str	r0, [r7, #4]
 8016b84:	6039      	str	r1, [r7, #0]
    checkExpectations();
 8016b86:	683b      	ldr	r3, [r7, #0]
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	33c4      	adds	r3, #196	; 0xc4
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	6838      	ldr	r0, [r7, #0]
 8016b90:	4798      	blx	r3
    if (matchingExpectation_)
 8016b92:	683b      	ldr	r3, [r7, #0]
 8016b94:	699b      	ldr	r3, [r3, #24]
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d00a      	beq.n	8016bb0 <_ZN21MockCheckedActualCall11returnValueEv+0x34>
        return matchingExpectation_->returnValue();
 8016b9a:	683b      	ldr	r3, [r7, #0]
 8016b9c:	6999      	ldr	r1, [r3, #24]
 8016b9e:	683b      	ldr	r3, [r7, #0]
 8016ba0:	699b      	ldr	r3, [r3, #24]
 8016ba2:	681b      	ldr	r3, [r3, #0]
 8016ba4:	3394      	adds	r3, #148	; 0x94
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	687a      	ldr	r2, [r7, #4]
 8016baa:	4610      	mov	r0, r2
 8016bac:	4798      	blx	r3
 8016bae:	e010      	b.n	8016bd2 <_ZN21MockCheckedActualCall11returnValueEv+0x56>
    return MockNamedValue("no return value");
 8016bb0:	f107 0308 	add.w	r3, r7, #8
 8016bb4:	4909      	ldr	r1, [pc, #36]	; (8016bdc <_ZN21MockCheckedActualCall11returnValueEv+0x60>)
 8016bb6:	4618      	mov	r0, r3
 8016bb8:	f7f4 f8d9 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8016bbc:	f107 0308 	add.w	r3, r7, #8
 8016bc0:	4619      	mov	r1, r3
 8016bc2:	6878      	ldr	r0, [r7, #4]
 8016bc4:	f004 fdf8 	bl	801b7b8 <_ZN14MockNamedValueC1ERK12SimpleString>
 8016bc8:	f107 0308 	add.w	r3, r7, #8
 8016bcc:	4618      	mov	r0, r3
 8016bce:	f7f4 fc86 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 8016bd2:	6878      	ldr	r0, [r7, #4]
 8016bd4:	3710      	adds	r7, #16
 8016bd6:	46bd      	mov	sp, r7
 8016bd8:	bd80      	pop	{r7, pc}
 8016bda:	bf00      	nop
 8016bdc:	08023d68 	.word	0x08023d68

08016be0 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb>:

bool MockCheckedActualCall::returnBoolValueOrDefault(bool default_value)
{
 8016be0:	b580      	push	{r7, lr}
 8016be2:	b082      	sub	sp, #8
 8016be4:	af00      	add	r7, sp, #0
 8016be6:	6078      	str	r0, [r7, #4]
 8016be8:	460b      	mov	r3, r1
 8016bea:	70fb      	strb	r3, [r7, #3]
    if (!hasReturnValue()) {
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	3350      	adds	r3, #80	; 0x50
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	6878      	ldr	r0, [r7, #4]
 8016bf6:	4798      	blx	r3
 8016bf8:	4603      	mov	r3, r0
 8016bfa:	f083 0301 	eor.w	r3, r3, #1
 8016bfe:	b2db      	uxtb	r3, r3
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d001      	beq.n	8016c08 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x28>
        return default_value;
 8016c04:	78fb      	ldrb	r3, [r7, #3]
 8016c06:	e007      	b.n	8016c18 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x38>
    }
    return returnBoolValue();
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	335c      	adds	r3, #92	; 0x5c
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	6878      	ldr	r0, [r7, #4]
 8016c12:	4798      	blx	r3
 8016c14:	4603      	mov	r3, r0
 8016c16:	bf00      	nop
}
 8016c18:	4618      	mov	r0, r3
 8016c1a:	3708      	adds	r7, #8
 8016c1c:	46bd      	mov	sp, r7
 8016c1e:	bd80      	pop	{r7, pc}

08016c20 <_ZN21MockCheckedActualCall15returnBoolValueEv>:

bool MockCheckedActualCall::returnBoolValue()
{
 8016c20:	b590      	push	{r4, r7, lr}
 8016c22:	b091      	sub	sp, #68	; 0x44
 8016c24:	af00      	add	r7, sp, #0
 8016c26:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	681b      	ldr	r3, [r3, #0]
 8016c2c:	3354      	adds	r3, #84	; 0x54
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	f107 0208 	add.w	r2, r7, #8
 8016c34:	6879      	ldr	r1, [r7, #4]
 8016c36:	4610      	mov	r0, r2
 8016c38:	4798      	blx	r3
 8016c3a:	f107 0308 	add.w	r3, r7, #8
 8016c3e:	4618      	mov	r0, r3
 8016c40:	f005 f898 	bl	801bd74 <_ZNK14MockNamedValue12getBoolValueEv>
 8016c44:	4603      	mov	r3, r0
 8016c46:	461c      	mov	r4, r3
 8016c48:	bf00      	nop
 8016c4a:	f107 0308 	add.w	r3, r7, #8
 8016c4e:	4618      	mov	r0, r3
 8016c50:	f004 fddc 	bl	801b80c <_ZN14MockNamedValueD1Ev>
 8016c54:	4623      	mov	r3, r4
}
 8016c56:	4618      	mov	r0, r3
 8016c58:	3744      	adds	r7, #68	; 0x44
 8016c5a:	46bd      	mov	sp, r7
 8016c5c:	bd90      	pop	{r4, r7, pc}

08016c5e <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi>:

int MockCheckedActualCall::returnIntValueOrDefault(int default_value)
{
 8016c5e:	b580      	push	{r7, lr}
 8016c60:	b082      	sub	sp, #8
 8016c62:	af00      	add	r7, sp, #0
 8016c64:	6078      	str	r0, [r7, #4]
 8016c66:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	681b      	ldr	r3, [r3, #0]
 8016c6c:	3350      	adds	r3, #80	; 0x50
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	6878      	ldr	r0, [r7, #4]
 8016c72:	4798      	blx	r3
 8016c74:	4603      	mov	r3, r0
 8016c76:	f083 0301 	eor.w	r3, r3, #1
 8016c7a:	b2db      	uxtb	r3, r3
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d001      	beq.n	8016c84 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x26>
        return default_value;
 8016c80:	683b      	ldr	r3, [r7, #0]
 8016c82:	e007      	b.n	8016c94 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x36>
    }
    return returnIntValue();
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	3364      	adds	r3, #100	; 0x64
 8016c8a:	681b      	ldr	r3, [r3, #0]
 8016c8c:	6878      	ldr	r0, [r7, #4]
 8016c8e:	4798      	blx	r3
 8016c90:	4603      	mov	r3, r0
 8016c92:	bf00      	nop
}
 8016c94:	4618      	mov	r0, r3
 8016c96:	3708      	adds	r7, #8
 8016c98:	46bd      	mov	sp, r7
 8016c9a:	bd80      	pop	{r7, pc}

08016c9c <_ZN21MockCheckedActualCall14returnIntValueEv>:

int MockCheckedActualCall::returnIntValue()
{
 8016c9c:	b590      	push	{r4, r7, lr}
 8016c9e:	b091      	sub	sp, #68	; 0x44
 8016ca0:	af00      	add	r7, sp, #0
 8016ca2:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	681b      	ldr	r3, [r3, #0]
 8016ca8:	3354      	adds	r3, #84	; 0x54
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	f107 0208 	add.w	r2, r7, #8
 8016cb0:	6879      	ldr	r1, [r7, #4]
 8016cb2:	4610      	mov	r0, r2
 8016cb4:	4798      	blx	r3
 8016cb6:	f107 0308 	add.w	r3, r7, #8
 8016cba:	4618      	mov	r0, r3
 8016cbc:	f005 f8d2 	bl	801be64 <_ZNK14MockNamedValue11getIntValueEv>
 8016cc0:	4604      	mov	r4, r0
 8016cc2:	bf00      	nop
 8016cc4:	f107 0308 	add.w	r3, r7, #8
 8016cc8:	4618      	mov	r0, r3
 8016cca:	f004 fd9f 	bl	801b80c <_ZN14MockNamedValueD1Ev>
 8016cce:	4623      	mov	r3, r4
}
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	3744      	adds	r7, #68	; 0x44
 8016cd4:	46bd      	mov	sp, r7
 8016cd6:	bd90      	pop	{r4, r7, pc}

08016cd8 <_ZN21MockCheckedActualCall26returnUnsignedLongIntValueEv>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValue()
{
 8016cd8:	b590      	push	{r4, r7, lr}
 8016cda:	b091      	sub	sp, #68	; 0x44
 8016cdc:	af00      	add	r7, sp, #0
 8016cde:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	681b      	ldr	r3, [r3, #0]
 8016ce4:	3354      	adds	r3, #84	; 0x54
 8016ce6:	681b      	ldr	r3, [r3, #0]
 8016ce8:	f107 0208 	add.w	r2, r7, #8
 8016cec:	6879      	ldr	r1, [r7, #4]
 8016cee:	4610      	mov	r0, r2
 8016cf0:	4798      	blx	r3
 8016cf2:	f107 0308 	add.w	r3, r7, #8
 8016cf6:	4618      	mov	r0, r3
 8016cf8:	f005 f93e 	bl	801bf78 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 8016cfc:	4604      	mov	r4, r0
 8016cfe:	bf00      	nop
 8016d00:	f107 0308 	add.w	r3, r7, #8
 8016d04:	4618      	mov	r0, r3
 8016d06:	f004 fd81 	bl	801b80c <_ZN14MockNamedValueD1Ev>
 8016d0a:	4623      	mov	r3, r4
}
 8016d0c:	4618      	mov	r0, r3
 8016d0e:	3744      	adds	r7, #68	; 0x44
 8016d10:	46bd      	mov	sp, r7
 8016d12:	bd90      	pop	{r4, r7, pc}

08016d14 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValueOrDefault(unsigned long int default_value)
{
 8016d14:	b580      	push	{r7, lr}
 8016d16:	b082      	sub	sp, #8
 8016d18:	af00      	add	r7, sp, #0
 8016d1a:	6078      	str	r0, [r7, #4]
 8016d1c:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	3350      	adds	r3, #80	; 0x50
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	6878      	ldr	r0, [r7, #4]
 8016d28:	4798      	blx	r3
 8016d2a:	4603      	mov	r3, r0
 8016d2c:	f083 0301 	eor.w	r3, r3, #1
 8016d30:	b2db      	uxtb	r3, r3
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d001      	beq.n	8016d3a <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x26>
        return default_value;
 8016d36:	683b      	ldr	r3, [r7, #0]
 8016d38:	e007      	b.n	8016d4a <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x36>
    }
    return returnUnsignedLongIntValue();
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	3368      	adds	r3, #104	; 0x68
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	6878      	ldr	r0, [r7, #4]
 8016d44:	4798      	blx	r3
 8016d46:	4603      	mov	r3, r0
 8016d48:	bf00      	nop
}
 8016d4a:	4618      	mov	r0, r3
 8016d4c:	3708      	adds	r7, #8
 8016d4e:	46bd      	mov	sp, r7
 8016d50:	bd80      	pop	{r7, pc}

08016d52 <_ZN21MockCheckedActualCall18returnLongIntValueEv>:

long int MockCheckedActualCall::returnLongIntValue()
{
 8016d52:	b590      	push	{r4, r7, lr}
 8016d54:	b091      	sub	sp, #68	; 0x44
 8016d56:	af00      	add	r7, sp, #0
 8016d58:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	681b      	ldr	r3, [r3, #0]
 8016d5e:	3354      	adds	r3, #84	; 0x54
 8016d60:	681b      	ldr	r3, [r3, #0]
 8016d62:	f107 0208 	add.w	r2, r7, #8
 8016d66:	6879      	ldr	r1, [r7, #4]
 8016d68:	4610      	mov	r0, r2
 8016d6a:	4798      	blx	r3
 8016d6c:	f107 0308 	add.w	r3, r7, #8
 8016d70:	4618      	mov	r0, r3
 8016d72:	f005 f89f 	bl	801beb4 <_ZNK14MockNamedValue15getLongIntValueEv>
 8016d76:	4604      	mov	r4, r0
 8016d78:	bf00      	nop
 8016d7a:	f107 0308 	add.w	r3, r7, #8
 8016d7e:	4618      	mov	r0, r3
 8016d80:	f004 fd44 	bl	801b80c <_ZN14MockNamedValueD1Ev>
 8016d84:	4623      	mov	r3, r4
}
 8016d86:	4618      	mov	r0, r3
 8016d88:	3744      	adds	r7, #68	; 0x44
 8016d8a:	46bd      	mov	sp, r7
 8016d8c:	bd90      	pop	{r4, r7, pc}

08016d8e <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl>:

long int MockCheckedActualCall::returnLongIntValueOrDefault(long int default_value)
{
 8016d8e:	b580      	push	{r7, lr}
 8016d90:	b082      	sub	sp, #8
 8016d92:	af00      	add	r7, sp, #0
 8016d94:	6078      	str	r0, [r7, #4]
 8016d96:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	3350      	adds	r3, #80	; 0x50
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	6878      	ldr	r0, [r7, #4]
 8016da2:	4798      	blx	r3
 8016da4:	4603      	mov	r3, r0
 8016da6:	f083 0301 	eor.w	r3, r3, #1
 8016daa:	b2db      	uxtb	r3, r3
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d001      	beq.n	8016db4 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x26>
        return default_value;
 8016db0:	683b      	ldr	r3, [r7, #0]
 8016db2:	e007      	b.n	8016dc4 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x36>
    }
    return returnLongIntValue();
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	3370      	adds	r3, #112	; 0x70
 8016dba:	681b      	ldr	r3, [r3, #0]
 8016dbc:	6878      	ldr	r0, [r7, #4]
 8016dbe:	4798      	blx	r3
 8016dc0:	4603      	mov	r3, r0
 8016dc2:	bf00      	nop
}
 8016dc4:	4618      	mov	r0, r3
 8016dc6:	3708      	adds	r7, #8
 8016dc8:	46bd      	mov	sp, r7
 8016dca:	bd80      	pop	{r7, pc}

08016dcc <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv>:
}

#else

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValue()
{
 8016dcc:	b5b0      	push	{r4, r5, r7, lr}
 8016dce:	b084      	sub	sp, #16
 8016dd0:	af02      	add	r7, sp, #8
 8016dd2:	6078      	str	r0, [r7, #4]
 8016dd4:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 8016dd6:	f7fb fbad 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 8016dda:	4604      	mov	r4, r0
 8016ddc:	6823      	ldr	r3, [r4, #0]
 8016dde:	3368      	adds	r3, #104	; 0x68
 8016de0:	681d      	ldr	r5, [r3, #0]
 8016de2:	f7fb fbb7 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016de6:	4603      	mov	r3, r0
 8016de8:	9300      	str	r3, [sp, #0]
 8016dea:	f240 13fb 	movw	r3, #507	; 0x1fb
 8016dee:	4a06      	ldr	r2, [pc, #24]	; (8016e08 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x3c>)
 8016df0:	4906      	ldr	r1, [pc, #24]	; (8016e0c <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x40>)
 8016df2:	4620      	mov	r0, r4
 8016df4:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8016df6:	2100      	movs	r1, #0
 8016df8:	6878      	ldr	r0, [r7, #4]
 8016dfa:	f7f1 fffb 	bl	8008df4 <_ZN18cpputest_ulonglongC1Ei>
}
 8016dfe:	6878      	ldr	r0, [r7, #4]
 8016e00:	3708      	adds	r7, #8
 8016e02:	46bd      	mov	sp, r7
 8016e04:	bdb0      	pop	{r4, r5, r7, pc}
 8016e06:	bf00      	nop
 8016e08:	08023c84 	.word	0x08023c84
 8016e0c:	08023ca0 	.word	0x08023ca0

08016e10 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong default_value)
{
 8016e10:	b5b0      	push	{r4, r5, r7, lr}
 8016e12:	b086      	sub	sp, #24
 8016e14:	af02      	add	r7, sp, #8
 8016e16:	60f8      	str	r0, [r7, #12]
 8016e18:	60b9      	str	r1, [r7, #8]
 8016e1a:	4639      	mov	r1, r7
 8016e1c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8016e20:	f7fb fb88 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 8016e24:	4604      	mov	r4, r0
 8016e26:	6823      	ldr	r3, [r4, #0]
 8016e28:	3368      	adds	r3, #104	; 0x68
 8016e2a:	681d      	ldr	r5, [r3, #0]
 8016e2c:	f7fb fb92 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016e30:	4603      	mov	r3, r0
 8016e32:	9300      	str	r3, [sp, #0]
 8016e34:	f240 2301 	movw	r3, #513	; 0x201
 8016e38:	4a06      	ldr	r2, [pc, #24]	; (8016e54 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 8016e3a:	4907      	ldr	r1, [pc, #28]	; (8016e58 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 8016e3c:	4620      	mov	r0, r4
 8016e3e:	47a8      	blx	r5
    return default_value;
 8016e40:	68fb      	ldr	r3, [r7, #12]
 8016e42:	461a      	mov	r2, r3
 8016e44:	463b      	mov	r3, r7
 8016e46:	cb03      	ldmia	r3!, {r0, r1}
 8016e48:	6010      	str	r0, [r2, #0]
 8016e4a:	6051      	str	r1, [r2, #4]
}
 8016e4c:	68f8      	ldr	r0, [r7, #12]
 8016e4e:	3710      	adds	r7, #16
 8016e50:	46bd      	mov	sp, r7
 8016e52:	bdb0      	pop	{r4, r5, r7, pc}
 8016e54:	08023c84 	.word	0x08023c84
 8016e58:	08023ca0 	.word	0x08023ca0

08016e5c <_ZN21MockCheckedActualCall22returnLongLongIntValueEv>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValue()
{
 8016e5c:	b5b0      	push	{r4, r5, r7, lr}
 8016e5e:	b084      	sub	sp, #16
 8016e60:	af02      	add	r7, sp, #8
 8016e62:	6078      	str	r0, [r7, #4]
 8016e64:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 8016e66:	f7fb fb65 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 8016e6a:	4604      	mov	r4, r0
 8016e6c:	6823      	ldr	r3, [r4, #0]
 8016e6e:	3368      	adds	r3, #104	; 0x68
 8016e70:	681d      	ldr	r5, [r3, #0]
 8016e72:	f7fb fb6f 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016e76:	4603      	mov	r3, r0
 8016e78:	9300      	str	r3, [sp, #0]
 8016e7a:	f240 2307 	movw	r3, #519	; 0x207
 8016e7e:	4a06      	ldr	r2, [pc, #24]	; (8016e98 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x3c>)
 8016e80:	4906      	ldr	r1, [pc, #24]	; (8016e9c <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x40>)
 8016e82:	4620      	mov	r0, r4
 8016e84:	47a8      	blx	r5
    return cpputest_longlong(0);
 8016e86:	2100      	movs	r1, #0
 8016e88:	6878      	ldr	r0, [r7, #4]
 8016e8a:	f7f1 ffa7 	bl	8008ddc <_ZN17cpputest_longlongC1Ei>
}
 8016e8e:	6878      	ldr	r0, [r7, #4]
 8016e90:	3708      	adds	r7, #8
 8016e92:	46bd      	mov	sp, r7
 8016e94:	bdb0      	pop	{r4, r5, r7, pc}
 8016e96:	bf00      	nop
 8016e98:	08023c84 	.word	0x08023c84
 8016e9c:	08023ccc 	.word	0x08023ccc

08016ea0 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValueOrDefault(cpputest_longlong default_value)
{
 8016ea0:	b5b0      	push	{r4, r5, r7, lr}
 8016ea2:	b086      	sub	sp, #24
 8016ea4:	af02      	add	r7, sp, #8
 8016ea6:	60f8      	str	r0, [r7, #12]
 8016ea8:	60b9      	str	r1, [r7, #8]
 8016eaa:	4639      	mov	r1, r7
 8016eac:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8016eb0:	f7fb fb40 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 8016eb4:	4604      	mov	r4, r0
 8016eb6:	6823      	ldr	r3, [r4, #0]
 8016eb8:	3368      	adds	r3, #104	; 0x68
 8016eba:	681d      	ldr	r5, [r3, #0]
 8016ebc:	f7fb fb4a 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016ec0:	4603      	mov	r3, r0
 8016ec2:	9300      	str	r3, [sp, #0]
 8016ec4:	f240 230d 	movw	r3, #525	; 0x20d
 8016ec8:	4a06      	ldr	r2, [pc, #24]	; (8016ee4 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 8016eca:	4907      	ldr	r1, [pc, #28]	; (8016ee8 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 8016ecc:	4620      	mov	r0, r4
 8016ece:	47a8      	blx	r5
    return default_value;
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	461a      	mov	r2, r3
 8016ed4:	463b      	mov	r3, r7
 8016ed6:	cb03      	ldmia	r3!, {r0, r1}
 8016ed8:	6010      	str	r0, [r2, #0]
 8016eda:	6051      	str	r1, [r2, #4]
}
 8016edc:	68f8      	ldr	r0, [r7, #12]
 8016ede:	3710      	adds	r7, #16
 8016ee0:	46bd      	mov	sp, r7
 8016ee2:	bdb0      	pop	{r4, r5, r7, pc}
 8016ee4:	08023c84 	.word	0x08023c84
 8016ee8:	08023ccc 	.word	0x08023ccc

08016eec <_ZN21MockCheckedActualCall17returnDoubleValueEv>:

#endif

double MockCheckedActualCall::returnDoubleValue()
{
 8016eec:	b580      	push	{r7, lr}
 8016eee:	ed2d 8b02 	vpush	{d8}
 8016ef2:	b090      	sub	sp, #64	; 0x40
 8016ef4:	af00      	add	r7, sp, #0
 8016ef6:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	3354      	adds	r3, #84	; 0x54
 8016efe:	681b      	ldr	r3, [r3, #0]
 8016f00:	f107 0208 	add.w	r2, r7, #8
 8016f04:	6879      	ldr	r1, [r7, #4]
 8016f06:	4610      	mov	r0, r2
 8016f08:	4798      	blx	r3
 8016f0a:	f107 0308 	add.w	r3, r7, #8
 8016f0e:	4618      	mov	r0, r3
 8016f10:	f005 f90a 	bl	801c128 <_ZNK14MockNamedValue14getDoubleValueEv>
 8016f14:	eeb0 8a40 	vmov.f32	s16, s0
 8016f18:	eef0 8a60 	vmov.f32	s17, s1
 8016f1c:	bf00      	nop
 8016f1e:	f107 0308 	add.w	r3, r7, #8
 8016f22:	4618      	mov	r0, r3
 8016f24:	f004 fc72 	bl	801b80c <_ZN14MockNamedValueD1Ev>
 8016f28:	eeb0 7a48 	vmov.f32	s14, s16
 8016f2c:	eef0 7a68 	vmov.f32	s15, s17
}
 8016f30:	eeb0 0a47 	vmov.f32	s0, s14
 8016f34:	eef0 0a67 	vmov.f32	s1, s15
 8016f38:	3740      	adds	r7, #64	; 0x40
 8016f3a:	46bd      	mov	sp, r7
 8016f3c:	ecbd 8b02 	vpop	{d8}
 8016f40:	bd80      	pop	{r7, pc}

08016f42 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd>:

double MockCheckedActualCall::returnDoubleValueOrDefault(double default_value)
{
 8016f42:	b580      	push	{r7, lr}
 8016f44:	b084      	sub	sp, #16
 8016f46:	af00      	add	r7, sp, #0
 8016f48:	60f8      	str	r0, [r7, #12]
 8016f4a:	ed87 0b00 	vstr	d0, [r7]
    if (!hasReturnValue()) {
 8016f4e:	68fb      	ldr	r3, [r7, #12]
 8016f50:	681b      	ldr	r3, [r3, #0]
 8016f52:	3350      	adds	r3, #80	; 0x50
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	68f8      	ldr	r0, [r7, #12]
 8016f58:	4798      	blx	r3
 8016f5a:	4603      	mov	r3, r0
 8016f5c:	f083 0301 	eor.w	r3, r3, #1
 8016f60:	b2db      	uxtb	r3, r3
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d002      	beq.n	8016f6c <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x2a>
        return default_value;
 8016f66:	ed97 7b00 	vldr	d7, [r7]
 8016f6a:	e00a      	b.n	8016f82 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x40>
    }
    return returnDoubleValue();
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	681b      	ldr	r3, [r3, #0]
 8016f70:	3398      	adds	r3, #152	; 0x98
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	68f8      	ldr	r0, [r7, #12]
 8016f76:	4798      	blx	r3
 8016f78:	eeb0 7a40 	vmov.f32	s14, s0
 8016f7c:	eef0 7a60 	vmov.f32	s15, s1
 8016f80:	bf00      	nop
}
 8016f82:	eeb0 0a47 	vmov.f32	s0, s14
 8016f86:	eef0 0a67 	vmov.f32	s1, s15
 8016f8a:	3710      	adds	r7, #16
 8016f8c:	46bd      	mov	sp, r7
 8016f8e:	bd80      	pop	{r7, pc}

08016f90 <_ZN21MockCheckedActualCall22returnUnsignedIntValueEv>:

unsigned int MockCheckedActualCall::returnUnsignedIntValue()
{
 8016f90:	b590      	push	{r4, r7, lr}
 8016f92:	b091      	sub	sp, #68	; 0x44
 8016f94:	af00      	add	r7, sp, #0
 8016f96:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	681b      	ldr	r3, [r3, #0]
 8016f9c:	3354      	adds	r3, #84	; 0x54
 8016f9e:	681b      	ldr	r3, [r3, #0]
 8016fa0:	f107 0208 	add.w	r2, r7, #8
 8016fa4:	6879      	ldr	r1, [r7, #4]
 8016fa6:	4610      	mov	r0, r2
 8016fa8:	4798      	blx	r3
 8016faa:	f107 0308 	add.w	r3, r7, #8
 8016fae:	4618      	mov	r0, r3
 8016fb0:	f004 ff08 	bl	801bdc4 <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 8016fb4:	4604      	mov	r4, r0
 8016fb6:	bf00      	nop
 8016fb8:	f107 0308 	add.w	r3, r7, #8
 8016fbc:	4618      	mov	r0, r3
 8016fbe:	f004 fc25 	bl	801b80c <_ZN14MockNamedValueD1Ev>
 8016fc2:	4623      	mov	r3, r4
}
 8016fc4:	4618      	mov	r0, r3
 8016fc6:	3744      	adds	r7, #68	; 0x44
 8016fc8:	46bd      	mov	sp, r7
 8016fca:	bd90      	pop	{r4, r7, pc}

08016fcc <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockCheckedActualCall::returnUnsignedIntValueOrDefault(unsigned int default_value)
{
 8016fcc:	b580      	push	{r7, lr}
 8016fce:	b082      	sub	sp, #8
 8016fd0:	af00      	add	r7, sp, #0
 8016fd2:	6078      	str	r0, [r7, #4]
 8016fd4:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	681b      	ldr	r3, [r3, #0]
 8016fda:	3350      	adds	r3, #80	; 0x50
 8016fdc:	681b      	ldr	r3, [r3, #0]
 8016fde:	6878      	ldr	r0, [r7, #4]
 8016fe0:	4798      	blx	r3
 8016fe2:	4603      	mov	r3, r0
 8016fe4:	f083 0301 	eor.w	r3, r3, #1
 8016fe8:	b2db      	uxtb	r3, r3
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d001      	beq.n	8016ff2 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x26>
        return default_value;
 8016fee:	683b      	ldr	r3, [r7, #0]
 8016ff0:	e007      	b.n	8017002 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x36>
    }
    return returnUnsignedIntValue();
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	681b      	ldr	r3, [r3, #0]
 8016ff6:	3388      	adds	r3, #136	; 0x88
 8016ff8:	681b      	ldr	r3, [r3, #0]
 8016ffa:	6878      	ldr	r0, [r7, #4]
 8016ffc:	4798      	blx	r3
 8016ffe:	4603      	mov	r3, r0
 8017000:	bf00      	nop
}
 8017002:	4618      	mov	r0, r3
 8017004:	3708      	adds	r7, #8
 8017006:	46bd      	mov	sp, r7
 8017008:	bd80      	pop	{r7, pc}

0801700a <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv>:

void * MockCheckedActualCall::returnPointerValueOrDefault(void * default_value)
{
 801700a:	b580      	push	{r7, lr}
 801700c:	b082      	sub	sp, #8
 801700e:	af00      	add	r7, sp, #0
 8017010:	6078      	str	r0, [r7, #4]
 8017012:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	681b      	ldr	r3, [r3, #0]
 8017018:	3350      	adds	r3, #80	; 0x50
 801701a:	681b      	ldr	r3, [r3, #0]
 801701c:	6878      	ldr	r0, [r7, #4]
 801701e:	4798      	blx	r3
 8017020:	4603      	mov	r3, r0
 8017022:	f083 0301 	eor.w	r3, r3, #1
 8017026:	b2db      	uxtb	r3, r3
 8017028:	2b00      	cmp	r3, #0
 801702a:	d001      	beq.n	8017030 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x26>
        return default_value;
 801702c:	683b      	ldr	r3, [r7, #0]
 801702e:	e007      	b.n	8017040 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x36>
    }
    return returnPointerValue();
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	33a0      	adds	r3, #160	; 0xa0
 8017036:	681b      	ldr	r3, [r3, #0]
 8017038:	6878      	ldr	r0, [r7, #4]
 801703a:	4798      	blx	r3
 801703c:	4603      	mov	r3, r0
 801703e:	bf00      	nop
}
 8017040:	4618      	mov	r0, r3
 8017042:	3708      	adds	r7, #8
 8017044:	46bd      	mov	sp, r7
 8017046:	bd80      	pop	{r7, pc}

08017048 <_ZN21MockCheckedActualCall18returnPointerValueEv>:

void * MockCheckedActualCall::returnPointerValue()
{
 8017048:	b590      	push	{r4, r7, lr}
 801704a:	b091      	sub	sp, #68	; 0x44
 801704c:	af00      	add	r7, sp, #0
 801704e:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	3354      	adds	r3, #84	; 0x54
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	f107 0208 	add.w	r2, r7, #8
 801705c:	6879      	ldr	r1, [r7, #4]
 801705e:	4610      	mov	r0, r2
 8017060:	4798      	blx	r3
 8017062:	f107 0308 	add.w	r3, r7, #8
 8017066:	4618      	mov	r0, r3
 8017068:	f005 f8e2 	bl	801c230 <_ZNK14MockNamedValue15getPointerValueEv>
 801706c:	4604      	mov	r4, r0
 801706e:	bf00      	nop
 8017070:	f107 0308 	add.w	r3, r7, #8
 8017074:	4618      	mov	r0, r3
 8017076:	f004 fbc9 	bl	801b80c <_ZN14MockNamedValueD1Ev>
 801707a:	4623      	mov	r3, r4
}
 801707c:	4618      	mov	r0, r3
 801707e:	3744      	adds	r7, #68	; 0x44
 8017080:	46bd      	mov	sp, r7
 8017082:	bd90      	pop	{r4, r7, pc}

08017084 <_ZN21MockCheckedActualCall23returnConstPointerValueEv>:

const void * MockCheckedActualCall::returnConstPointerValue()
{
 8017084:	b590      	push	{r4, r7, lr}
 8017086:	b091      	sub	sp, #68	; 0x44
 8017088:	af00      	add	r7, sp, #0
 801708a:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	681b      	ldr	r3, [r3, #0]
 8017090:	3354      	adds	r3, #84	; 0x54
 8017092:	681b      	ldr	r3, [r3, #0]
 8017094:	f107 0208 	add.w	r2, r7, #8
 8017098:	6879      	ldr	r1, [r7, #4]
 801709a:	4610      	mov	r0, r2
 801709c:	4798      	blx	r3
 801709e:	f107 0308 	add.w	r3, r7, #8
 80170a2:	4618      	mov	r0, r3
 80170a4:	f005 f8ec 	bl	801c280 <_ZNK14MockNamedValue20getConstPointerValueEv>
 80170a8:	4604      	mov	r4, r0
 80170aa:	bf00      	nop
 80170ac:	f107 0308 	add.w	r3, r7, #8
 80170b0:	4618      	mov	r0, r3
 80170b2:	f004 fbab 	bl	801b80c <_ZN14MockNamedValueD1Ev>
 80170b6:	4623      	mov	r3, r4
}
 80170b8:	4618      	mov	r0, r3
 80170ba:	3744      	adds	r7, #68	; 0x44
 80170bc:	46bd      	mov	sp, r7
 80170be:	bd90      	pop	{r4, r7, pc}

080170c0 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv>:

const void * MockCheckedActualCall::returnConstPointerValueOrDefault(const void * default_value)
{
 80170c0:	b580      	push	{r7, lr}
 80170c2:	b082      	sub	sp, #8
 80170c4:	af00      	add	r7, sp, #0
 80170c6:	6078      	str	r0, [r7, #4]
 80170c8:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	681b      	ldr	r3, [r3, #0]
 80170ce:	3350      	adds	r3, #80	; 0x50
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	6878      	ldr	r0, [r7, #4]
 80170d4:	4798      	blx	r3
 80170d6:	4603      	mov	r3, r0
 80170d8:	f083 0301 	eor.w	r3, r3, #1
 80170dc:	b2db      	uxtb	r3, r3
 80170de:	2b00      	cmp	r3, #0
 80170e0:	d001      	beq.n	80170e6 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x26>
        return default_value;
 80170e2:	683b      	ldr	r3, [r7, #0]
 80170e4:	e007      	b.n	80170f6 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x36>
    }
    return returnConstPointerValue();
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	33a8      	adds	r3, #168	; 0xa8
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	6878      	ldr	r0, [r7, #4]
 80170f0:	4798      	blx	r3
 80170f2:	4603      	mov	r3, r0
 80170f4:	bf00      	nop
}
 80170f6:	4618      	mov	r0, r3
 80170f8:	3708      	adds	r7, #8
 80170fa:	46bd      	mov	sp, r7
 80170fc:	bd80      	pop	{r7, pc}

080170fe <_ZN21MockCheckedActualCall26returnFunctionPointerValueEv>:

void (*MockCheckedActualCall::returnFunctionPointerValue())()
{
 80170fe:	b590      	push	{r4, r7, lr}
 8017100:	b091      	sub	sp, #68	; 0x44
 8017102:	af00      	add	r7, sp, #0
 8017104:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	681b      	ldr	r3, [r3, #0]
 801710a:	3354      	adds	r3, #84	; 0x54
 801710c:	681b      	ldr	r3, [r3, #0]
 801710e:	f107 0208 	add.w	r2, r7, #8
 8017112:	6879      	ldr	r1, [r7, #4]
 8017114:	4610      	mov	r0, r2
 8017116:	4798      	blx	r3
 8017118:	f107 0308 	add.w	r3, r7, #8
 801711c:	4618      	mov	r0, r3
 801711e:	f005 f8d7 	bl	801c2d0 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 8017122:	4604      	mov	r4, r0
 8017124:	bf00      	nop
 8017126:	f107 0308 	add.w	r3, r7, #8
 801712a:	4618      	mov	r0, r3
 801712c:	f004 fb6e 	bl	801b80c <_ZN14MockNamedValueD1Ev>
 8017130:	4623      	mov	r3, r4
}
 8017132:	4618      	mov	r0, r3
 8017134:	3744      	adds	r7, #68	; 0x44
 8017136:	46bd      	mov	sp, r7
 8017138:	bd90      	pop	{r4, r7, pc}

0801713a <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockCheckedActualCall::returnFunctionPointerValueOrDefault(void (*default_value)()))()
{
 801713a:	b580      	push	{r7, lr}
 801713c:	b082      	sub	sp, #8
 801713e:	af00      	add	r7, sp, #0
 8017140:	6078      	str	r0, [r7, #4]
 8017142:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	681b      	ldr	r3, [r3, #0]
 8017148:	3350      	adds	r3, #80	; 0x50
 801714a:	681b      	ldr	r3, [r3, #0]
 801714c:	6878      	ldr	r0, [r7, #4]
 801714e:	4798      	blx	r3
 8017150:	4603      	mov	r3, r0
 8017152:	f083 0301 	eor.w	r3, r3, #1
 8017156:	b2db      	uxtb	r3, r3
 8017158:	2b00      	cmp	r3, #0
 801715a:	d001      	beq.n	8017160 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x26>
        return default_value;
 801715c:	683b      	ldr	r3, [r7, #0]
 801715e:	e007      	b.n	8017170 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x36>
    }
    return returnFunctionPointerValue();
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	681b      	ldr	r3, [r3, #0]
 8017164:	33b0      	adds	r3, #176	; 0xb0
 8017166:	681b      	ldr	r3, [r3, #0]
 8017168:	6878      	ldr	r0, [r7, #4]
 801716a:	4798      	blx	r3
 801716c:	4603      	mov	r3, r0
 801716e:	bf00      	nop
}
 8017170:	4618      	mov	r0, r3
 8017172:	3708      	adds	r7, #8
 8017174:	46bd      	mov	sp, r7
 8017176:	bd80      	pop	{r7, pc}

08017178 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc>:

const char * MockCheckedActualCall::returnStringValueOrDefault(const char * default_value)
{
 8017178:	b580      	push	{r7, lr}
 801717a:	b082      	sub	sp, #8
 801717c:	af00      	add	r7, sp, #0
 801717e:	6078      	str	r0, [r7, #4]
 8017180:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	3350      	adds	r3, #80	; 0x50
 8017188:	681b      	ldr	r3, [r3, #0]
 801718a:	6878      	ldr	r0, [r7, #4]
 801718c:	4798      	blx	r3
 801718e:	4603      	mov	r3, r0
 8017190:	f083 0301 	eor.w	r3, r3, #1
 8017194:	b2db      	uxtb	r3, r3
 8017196:	2b00      	cmp	r3, #0
 8017198:	d001      	beq.n	801719e <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x26>
        return default_value;
 801719a:	683b      	ldr	r3, [r7, #0]
 801719c:	e007      	b.n	80171ae <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x36>
    }
    return returnStringValue();
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	3394      	adds	r3, #148	; 0x94
 80171a4:	681b      	ldr	r3, [r3, #0]
 80171a6:	6878      	ldr	r0, [r7, #4]
 80171a8:	4798      	blx	r3
 80171aa:	4603      	mov	r3, r0
 80171ac:	bf00      	nop
}
 80171ae:	4618      	mov	r0, r3
 80171b0:	3708      	adds	r7, #8
 80171b2:	46bd      	mov	sp, r7
 80171b4:	bd80      	pop	{r7, pc}

080171b6 <_ZN21MockCheckedActualCall17returnStringValueEv>:

const char * MockCheckedActualCall::returnStringValue()
{
 80171b6:	b590      	push	{r4, r7, lr}
 80171b8:	b091      	sub	sp, #68	; 0x44
 80171ba:	af00      	add	r7, sp, #0
 80171bc:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	681b      	ldr	r3, [r3, #0]
 80171c2:	3354      	adds	r3, #84	; 0x54
 80171c4:	681b      	ldr	r3, [r3, #0]
 80171c6:	f107 0208 	add.w	r2, r7, #8
 80171ca:	6879      	ldr	r1, [r7, #4]
 80171cc:	4610      	mov	r0, r2
 80171ce:	4798      	blx	r3
 80171d0:	f107 0308 	add.w	r3, r7, #8
 80171d4:	4618      	mov	r0, r3
 80171d6:	f005 f803 	bl	801c1e0 <_ZNK14MockNamedValue14getStringValueEv>
 80171da:	4604      	mov	r4, r0
 80171dc:	bf00      	nop
 80171de:	f107 0308 	add.w	r3, r7, #8
 80171e2:	4618      	mov	r0, r3
 80171e4:	f004 fb12 	bl	801b80c <_ZN14MockNamedValueD1Ev>
 80171e8:	4623      	mov	r3, r4
}
 80171ea:	4618      	mov	r0, r3
 80171ec:	3744      	adds	r7, #68	; 0x44
 80171ee:	46bd      	mov	sp, r7
 80171f0:	bd90      	pop	{r4, r7, pc}

080171f2 <_ZN21MockCheckedActualCall14hasReturnValueEv>:

bool MockCheckedActualCall::hasReturnValue()
{
 80171f2:	b590      	push	{r4, r7, lr}
 80171f4:	b093      	sub	sp, #76	; 0x4c
 80171f6:	af00      	add	r7, sp, #0
 80171f8:	6078      	str	r0, [r7, #4]
    return ! returnValue().getName().isEmpty();
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	681b      	ldr	r3, [r3, #0]
 80171fe:	3354      	adds	r3, #84	; 0x54
 8017200:	681b      	ldr	r3, [r3, #0]
 8017202:	f107 0210 	add.w	r2, r7, #16
 8017206:	6879      	ldr	r1, [r7, #4]
 8017208:	4610      	mov	r0, r2
 801720a:	4798      	blx	r3
 801720c:	f107 0308 	add.w	r3, r7, #8
 8017210:	f107 0210 	add.w	r2, r7, #16
 8017214:	4611      	mov	r1, r2
 8017216:	4618      	mov	r0, r3
 8017218:	f004 fd8e 	bl	801bd38 <_ZNK14MockNamedValue7getNameEv>
 801721c:	f107 0308 	add.w	r3, r7, #8
 8017220:	4618      	mov	r0, r3
 8017222:	f7f4 f94b 	bl	800b4bc <_ZNK12SimpleString7isEmptyEv>
 8017226:	4603      	mov	r3, r0
 8017228:	f083 0301 	eor.w	r3, r3, #1
 801722c:	b2dc      	uxtb	r4, r3
 801722e:	f107 0308 	add.w	r3, r7, #8
 8017232:	4618      	mov	r0, r3
 8017234:	f7f4 f953 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8017238:	f107 0310 	add.w	r3, r7, #16
 801723c:	4618      	mov	r0, r3
 801723e:	f004 fae5 	bl	801b80c <_ZN14MockNamedValueD1Ev>
 8017242:	4623      	mov	r3, r4
}
 8017244:	4618      	mov	r0, r3
 8017246:	374c      	adds	r7, #76	; 0x4c
 8017248:	46bd      	mov	sp, r7
 801724a:	bd90      	pop	{r4, r7, pc}

0801724c <_ZN21MockCheckedActualCall8onObjectEPKv>:

MockActualCall& MockCheckedActualCall::onObject(const void* objectPtr)
{
 801724c:	b590      	push	{r4, r7, lr}
 801724e:	b095      	sub	sp, #84	; 0x54
 8017250:	af02      	add	r7, sp, #8
 8017252:	6078      	str	r0, [r7, #4]
 8017254:	6039      	str	r1, [r7, #0]
    if(hasFailed()) {
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	681b      	ldr	r3, [r3, #0]
 801725a:	33c0      	adds	r3, #192	; 0xc0
 801725c:	681b      	ldr	r3, [r3, #0]
 801725e:	6878      	ldr	r0, [r7, #4]
 8017260:	4798      	blx	r3
 8017262:	4603      	mov	r3, r0
 8017264:	2b00      	cmp	r3, #0
 8017266:	d001      	beq.n	801726c <_ZN21MockCheckedActualCall8onObjectEPKv+0x20>
        return *this;
 8017268:	687c      	ldr	r4, [r7, #4]
 801726a:	e053      	b.n	8017314 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    // Currently matching expectations are not discarded because the passed object
    // is ignored if not specifically set in the expectation

    potentiallyMatchingExpectations_.onlyKeepExpectationsOnObject(objectPtr);
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	331c      	adds	r3, #28
 8017270:	6839      	ldr	r1, [r7, #0]
 8017272:	4618      	mov	r0, r3
 8017274:	f003 f8ca 	bl	801a40c <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>

    if ((!matchingExpectation_) && potentiallyMatchingExpectations_.isEmpty()) {
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	699b      	ldr	r3, [r3, #24]
 801727c:	2b00      	cmp	r3, #0
 801727e:	d109      	bne.n	8017294 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	331c      	adds	r3, #28
 8017284:	4618      	mov	r0, r3
 8017286:	f002 fe20 	bl	8019eca <_ZNK21MockExpectedCallsList7isEmptyEv>
 801728a:	4603      	mov	r3, r0
 801728c:	2b00      	cmp	r3, #0
 801728e:	d001      	beq.n	8017294 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 8017290:	2301      	movs	r3, #1
 8017292:	e000      	b.n	8017296 <_ZN21MockCheckedActualCall8onObjectEPKv+0x4a>
 8017294:	2300      	movs	r3, #0
 8017296:	2b00      	cmp	r3, #0
 8017298:	d02c      	beq.n	80172f4 <_ZN21MockCheckedActualCall8onObjectEPKv+0xa8>
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	681b      	ldr	r3, [r3, #0]
 801729e:	33cc      	adds	r3, #204	; 0xcc
 80172a0:	681b      	ldr	r3, [r3, #0]
 80172a2:	6878      	ldr	r0, [r7, #4]
 80172a4:	4798      	blx	r3
 80172a6:	4604      	mov	r4, r0
 80172a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80172ac:	6879      	ldr	r1, [r7, #4]
 80172ae:	4618      	mov	r0, r3
 80172b0:	f7fe fd3f 	bl	8015d32 <_ZNK21MockCheckedActualCall7getNameEv>
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172b8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80172bc:	f107 000c 	add.w	r0, r7, #12
 80172c0:	9300      	str	r3, [sp, #0]
 80172c2:	683b      	ldr	r3, [r7, #0]
 80172c4:	4621      	mov	r1, r4
 80172c6:	f004 f9fb 	bl	801b6c0 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>
 80172ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80172ce:	4618      	mov	r0, r3
 80172d0:	f7f4 f905 	bl	800b4de <_ZN12SimpleStringD1Ev>
        failTest(failure);
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	33dc      	adds	r3, #220	; 0xdc
 80172da:	681b      	ldr	r3, [r3, #0]
 80172dc:	f107 020c 	add.w	r2, r7, #12
 80172e0:	4611      	mov	r1, r2
 80172e2:	6878      	ldr	r0, [r7, #4]
 80172e4:	4798      	blx	r3
        return *this;
 80172e6:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 80172e8:	f107 030c 	add.w	r3, r7, #12
 80172ec:	4618      	mov	r0, r3
 80172ee:	f000 ffa7 	bl	8018240 <_ZN27MockUnexpectedObjectFailureD1Ev>
 80172f2:	e00f      	b.n	8017314 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    potentiallyMatchingExpectations_.wasPassedToObject();
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	331c      	adds	r3, #28
 80172f8:	4618      	mov	r0, r3
 80172fa:	f003 f9a7 	bl	801a64c <_ZN21MockExpectedCallsList17wasPassedToObjectEv>

    if (!matchingExpectation_) {
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	699b      	ldr	r3, [r3, #24]
 8017302:	2b00      	cmp	r3, #0
 8017304:	d105      	bne.n	8017312 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc6>
        completeCallWhenMatchIsFound();
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	681b      	ldr	r3, [r3, #0]
 801730a:	33d8      	adds	r3, #216	; 0xd8
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	6878      	ldr	r0, [r7, #4]
 8017310:	4798      	blx	r3
    }

    return *this;
 8017312:	687c      	ldr	r4, [r7, #4]
 8017314:	4623      	mov	r3, r4
}
 8017316:	4618      	mov	r0, r3
 8017318:	374c      	adds	r7, #76	; 0x4c
 801731a:	46bd      	mov	sp, r7
 801731c:	bd90      	pop	{r4, r7, pc}
	...

08017320 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv>:

void MockCheckedActualCall::addOutputParameter(const SimpleString& name, const SimpleString& type, void* ptr)
{
 8017320:	b590      	push	{r4, r7, lr}
 8017322:	b087      	sub	sp, #28
 8017324:	af00      	add	r7, sp, #0
 8017326:	60f8      	str	r0, [r7, #12]
 8017328:	60b9      	str	r1, [r7, #8]
 801732a:	607a      	str	r2, [r7, #4]
 801732c:	603b      	str	r3, [r7, #0]
    MockOutputParametersListNode* newNode = new MockOutputParametersListNode(name, type, ptr);
 801732e:	f240 2282 	movw	r2, #642	; 0x282
 8017332:	4913      	ldr	r1, [pc, #76]	; (8017380 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x60>)
 8017334:	2018      	movs	r0, #24
 8017336:	f7f1 f957 	bl	80085e8 <_ZnwjPKci>
 801733a:	4604      	mov	r4, r0
 801733c:	683b      	ldr	r3, [r7, #0]
 801733e:	687a      	ldr	r2, [r7, #4]
 8017340:	68b9      	ldr	r1, [r7, #8]
 8017342:	4620      	mov	r0, r4
 8017344:	f7fe fa48 	bl	80157d8 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>
 8017348:	613c      	str	r4, [r7, #16]

    if (outputParameterExpectations_ == NULLPTR)
 801734a:	68fb      	ldr	r3, [r7, #12]
 801734c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801734e:	2b00      	cmp	r3, #0
 8017350:	d103      	bne.n	801735a <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x3a>
        outputParameterExpectations_ = newNode;
 8017352:	68fb      	ldr	r3, [r7, #12]
 8017354:	693a      	ldr	r2, [r7, #16]
 8017356:	629a      	str	r2, [r3, #40]	; 0x28
    else {
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
        while (lastNode->next_) lastNode = lastNode->next_;
        lastNode->next_ = newNode;
    }
}
 8017358:	e00d      	b.n	8017376 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x56>
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
 801735a:	68fb      	ldr	r3, [r7, #12]
 801735c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801735e:	617b      	str	r3, [r7, #20]
        while (lastNode->next_) lastNode = lastNode->next_;
 8017360:	697b      	ldr	r3, [r7, #20]
 8017362:	695b      	ldr	r3, [r3, #20]
 8017364:	2b00      	cmp	r3, #0
 8017366:	d003      	beq.n	8017370 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x50>
 8017368:	697b      	ldr	r3, [r7, #20]
 801736a:	695b      	ldr	r3, [r3, #20]
 801736c:	617b      	str	r3, [r7, #20]
 801736e:	e7f7      	b.n	8017360 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x40>
        lastNode->next_ = newNode;
 8017370:	697b      	ldr	r3, [r7, #20]
 8017372:	693a      	ldr	r2, [r7, #16]
 8017374:	615a      	str	r2, [r3, #20]
}
 8017376:	bf00      	nop
 8017378:	371c      	adds	r7, #28
 801737a:	46bd      	mov	sp, r7
 801737c:	bd90      	pop	{r4, r7, pc}
 801737e:	bf00      	nop
 8017380:	08023c84 	.word	0x08023c84

08017384 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>:
    class MockOutputParametersListNode
 8017384:	b580      	push	{r7, lr}
 8017386:	b082      	sub	sp, #8
 8017388:	af00      	add	r7, sp, #0
 801738a:	6078      	str	r0, [r7, #4]
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	3308      	adds	r3, #8
 8017390:	4618      	mov	r0, r3
 8017392:	f7f4 f8a4 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	4618      	mov	r0, r3
 801739a:	f7f4 f8a0 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	4618      	mov	r0, r3
 80173a2:	3708      	adds	r7, #8
 80173a4:	46bd      	mov	sp, r7
 80173a6:	bd80      	pop	{r7, pc}

080173a8 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>:

void MockCheckedActualCall::cleanUpOutputParameterList()
{
 80173a8:	b590      	push	{r4, r7, lr}
 80173aa:	b085      	sub	sp, #20
 80173ac:	af00      	add	r7, sp, #0
 80173ae:	6078      	str	r0, [r7, #4]
    MockOutputParametersListNode* current = outputParameterExpectations_;
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80173b4:	60fb      	str	r3, [r7, #12]
    MockOutputParametersListNode* toBeDeleted = NULLPTR;
 80173b6:	2300      	movs	r3, #0
 80173b8:	60bb      	str	r3, [r7, #8]

    while (current) {
 80173ba:	68fb      	ldr	r3, [r7, #12]
 80173bc:	2b00      	cmp	r3, #0
 80173be:	d012      	beq.n	80173e6 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x3e>
        toBeDeleted = current;
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	60bb      	str	r3, [r7, #8]
        outputParameterExpectations_ = current = current->next_;
 80173c4:	68fb      	ldr	r3, [r7, #12]
 80173c6:	695b      	ldr	r3, [r3, #20]
 80173c8:	60fb      	str	r3, [r7, #12]
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	68fa      	ldr	r2, [r7, #12]
 80173ce:	629a      	str	r2, [r3, #40]	; 0x28
        delete toBeDeleted;
 80173d0:	68bc      	ldr	r4, [r7, #8]
 80173d2:	2c00      	cmp	r4, #0
 80173d4:	d0f1      	beq.n	80173ba <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
 80173d6:	4620      	mov	r0, r4
 80173d8:	f7ff ffd4 	bl	8017384 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>
 80173dc:	2118      	movs	r1, #24
 80173de:	4620      	mov	r0, r4
 80173e0:	f7f1 f916 	bl	8008610 <_ZdlPvj>
    while (current) {
 80173e4:	e7e9      	b.n	80173ba <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
    }
}
 80173e6:	bf00      	nop
 80173e8:	3714      	adds	r7, #20
 80173ea:	46bd      	mov	sp, r7
 80173ec:	bd90      	pop	{r4, r7, pc}
	...

080173f0 <_ZN19MockActualCallTraceC1Ev>:


MockActualCallTrace::MockActualCallTrace()
 80173f0:	b580      	push	{r7, lr}
 80173f2:	b082      	sub	sp, #8
 80173f4:	af00      	add	r7, sp, #0
 80173f6:	6078      	str	r0, [r7, #4]
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	4618      	mov	r0, r3
 80173fc:	f7fe fc6a 	bl	8015cd4 <_ZN14MockActualCallC1Ev>
 8017400:	4a06      	ldr	r2, [pc, #24]	; (801741c <_ZN19MockActualCallTraceC1Ev+0x2c>)
 8017402:	687b      	ldr	r3, [r7, #4]
 8017404:	601a      	str	r2, [r3, #0]
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	3304      	adds	r3, #4
 801740a:	4905      	ldr	r1, [pc, #20]	; (8017420 <_ZN19MockActualCallTraceC1Ev+0x30>)
 801740c:	4618      	mov	r0, r3
 801740e:	f7f3 fcae 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
{
}
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	4618      	mov	r0, r3
 8017416:	3708      	adds	r7, #8
 8017418:	46bd      	mov	sp, r7
 801741a:	bd80      	pop	{r7, pc}
 801741c:	080261ec 	.word	0x080261ec
 8017420:	08023c6c 	.word	0x08023c6c

08017424 <_ZN19MockActualCallTraceD1Ev>:

MockActualCallTrace::~MockActualCallTrace()
 8017424:	b580      	push	{r7, lr}
 8017426:	b082      	sub	sp, #8
 8017428:	af00      	add	r7, sp, #0
 801742a:	6078      	str	r0, [r7, #4]
 801742c:	4a08      	ldr	r2, [pc, #32]	; (8017450 <_ZN19MockActualCallTraceD1Ev+0x2c>)
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	601a      	str	r2, [r3, #0]
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	3304      	adds	r3, #4
 8017436:	4618      	mov	r0, r3
 8017438:	f7f4 f851 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	4618      	mov	r0, r3
 8017440:	f7fe fc58 	bl	8015cf4 <_ZN14MockActualCallD1Ev>
{
}
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	4618      	mov	r0, r3
 8017448:	3708      	adds	r7, #8
 801744a:	46bd      	mov	sp, r7
 801744c:	bd80      	pop	{r7, pc}
 801744e:	bf00      	nop
 8017450:	080261ec 	.word	0x080261ec

08017454 <_ZN19MockActualCallTraceD0Ev>:
MockActualCallTrace::~MockActualCallTrace()
 8017454:	b580      	push	{r7, lr}
 8017456:	b082      	sub	sp, #8
 8017458:	af00      	add	r7, sp, #0
 801745a:	6078      	str	r0, [r7, #4]
}
 801745c:	6878      	ldr	r0, [r7, #4]
 801745e:	f7ff ffe1 	bl	8017424 <_ZN19MockActualCallTraceD1Ev>
 8017462:	210c      	movs	r1, #12
 8017464:	6878      	ldr	r0, [r7, #4]
 8017466:	f7f1 f8d3 	bl	8008610 <_ZdlPvj>
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	4618      	mov	r0, r3
 801746e:	3708      	adds	r7, #8
 8017470:	46bd      	mov	sp, r7
 8017472:	bd80      	pop	{r7, pc}

08017474 <_ZN19MockActualCallTrace8withNameERK12SimpleString>:

MockActualCall& MockActualCallTrace::withName(const SimpleString& name)
{
 8017474:	b580      	push	{r7, lr}
 8017476:	b082      	sub	sp, #8
 8017478:	af00      	add	r7, sp, #0
 801747a:	6078      	str	r0, [r7, #4]
 801747c:	6039      	str	r1, [r7, #0]
    traceBuffer_ += "\nFunction name:";
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	3304      	adds	r3, #4
 8017482:	4907      	ldr	r1, [pc, #28]	; (80174a0 <_ZN19MockActualCallTrace8withNameERK12SimpleString+0x2c>)
 8017484:	4618      	mov	r0, r3
 8017486:	f7f4 f8b9 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	3304      	adds	r3, #4
 801748e:	6839      	ldr	r1, [r7, #0]
 8017490:	4618      	mov	r0, r3
 8017492:	f7f4 f8a1 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
    return *this;
 8017496:	687b      	ldr	r3, [r7, #4]
}
 8017498:	4618      	mov	r0, r3
 801749a:	3708      	adds	r7, #8
 801749c:	46bd      	mov	sp, r7
 801749e:	bd80      	pop	{r7, pc}
 80174a0:	08023d78 	.word	0x08023d78

080174a4 <_ZN19MockActualCallTrace13withCallOrderEj>:

MockActualCall& MockActualCallTrace::withCallOrder(unsigned int callOrder)
{
 80174a4:	b590      	push	{r4, r7, lr}
 80174a6:	b085      	sub	sp, #20
 80174a8:	af00      	add	r7, sp, #0
 80174aa:	6078      	str	r0, [r7, #4]
 80174ac:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " withCallOrder:";
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	3304      	adds	r3, #4
 80174b2:	490e      	ldr	r1, [pc, #56]	; (80174ec <_ZN19MockActualCallTrace13withCallOrderEj+0x48>)
 80174b4:	4618      	mov	r0, r3
 80174b6:	f7f4 f8a1 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(callOrder);
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	1d1c      	adds	r4, r3, #4
 80174be:	f107 0308 	add.w	r3, r7, #8
 80174c2:	6839      	ldr	r1, [r7, #0]
 80174c4:	4618      	mov	r0, r3
 80174c6:	f7f4 fd39 	bl	800bf3c <_Z10StringFromj>
 80174ca:	f107 0308 	add.w	r3, r7, #8
 80174ce:	4619      	mov	r1, r3
 80174d0:	4620      	mov	r0, r4
 80174d2:	f7f4 f881 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 80174d6:	f107 0308 	add.w	r3, r7, #8
 80174da:	4618      	mov	r0, r3
 80174dc:	f7f3 ffff 	bl	800b4de <_ZN12SimpleStringD1Ev>
    return *this;
 80174e0:	687b      	ldr	r3, [r7, #4]
}
 80174e2:	4618      	mov	r0, r3
 80174e4:	3714      	adds	r7, #20
 80174e6:	46bd      	mov	sp, r7
 80174e8:	bd90      	pop	{r4, r7, pc}
 80174ea:	bf00      	nop
 80174ec:	08023d88 	.word	0x08023d88

080174f0 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>:

void MockActualCallTrace::addParameterName(const SimpleString& name)
{
 80174f0:	b580      	push	{r7, lr}
 80174f2:	b082      	sub	sp, #8
 80174f4:	af00      	add	r7, sp, #0
 80174f6:	6078      	str	r0, [r7, #4]
 80174f8:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " ";
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	3304      	adds	r3, #4
 80174fe:	490a      	ldr	r1, [pc, #40]	; (8017528 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x38>)
 8017500:	4618      	mov	r0, r3
 8017502:	f7f4 f87b 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	3304      	adds	r3, #4
 801750a:	6839      	ldr	r1, [r7, #0]
 801750c:	4618      	mov	r0, r3
 801750e:	f7f4 f863 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
    traceBuffer_ += ":";
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	3304      	adds	r3, #4
 8017516:	4905      	ldr	r1, [pc, #20]	; (801752c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x3c>)
 8017518:	4618      	mov	r0, r3
 801751a:	f7f4 f86f 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
}
 801751e:	bf00      	nop
 8017520:	3708      	adds	r7, #8
 8017522:	46bd      	mov	sp, r7
 8017524:	bd80      	pop	{r7, pc}
 8017526:	bf00      	nop
 8017528:	08023d98 	.word	0x08023d98
 801752c:	08023d9c 	.word	0x08023d9c

08017530 <_ZN19MockActualCallTrace17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockActualCallTrace::withBoolParameter(const SimpleString& name, bool value)
{
 8017530:	b590      	push	{r4, r7, lr}
 8017532:	b087      	sub	sp, #28
 8017534:	af00      	add	r7, sp, #0
 8017536:	60f8      	str	r0, [r7, #12]
 8017538:	60b9      	str	r1, [r7, #8]
 801753a:	4613      	mov	r3, r2
 801753c:	71fb      	strb	r3, [r7, #7]
    addParameterName(name);
 801753e:	68b9      	ldr	r1, [r7, #8]
 8017540:	68f8      	ldr	r0, [r7, #12]
 8017542:	f7ff ffd5 	bl	80174f0 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8017546:	68fb      	ldr	r3, [r7, #12]
 8017548:	1d1c      	adds	r4, r3, #4
 801754a:	f107 0310 	add.w	r3, r7, #16
 801754e:	79fa      	ldrb	r2, [r7, #7]
 8017550:	4611      	mov	r1, r2
 8017552:	4618      	mov	r0, r3
 8017554:	f7f4 fa34 	bl	800b9c0 <_Z10StringFromb>
 8017558:	f107 0310 	add.w	r3, r7, #16
 801755c:	4619      	mov	r1, r3
 801755e:	4620      	mov	r0, r4
 8017560:	f7f4 f83a 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 8017564:	f107 0310 	add.w	r3, r7, #16
 8017568:	4618      	mov	r0, r3
 801756a:	f7f3 ffb8 	bl	800b4de <_ZN12SimpleStringD1Ev>
    return *this;
 801756e:	68fb      	ldr	r3, [r7, #12]
}
 8017570:	4618      	mov	r0, r3
 8017572:	371c      	adds	r7, #28
 8017574:	46bd      	mov	sp, r7
 8017576:	bd90      	pop	{r4, r7, pc}

08017578 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockActualCallTrace::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 8017578:	b590      	push	{r4, r7, lr}
 801757a:	b08f      	sub	sp, #60	; 0x3c
 801757c:	af00      	add	r7, sp, #0
 801757e:	60f8      	str	r0, [r7, #12]
 8017580:	60b9      	str	r1, [r7, #8]
 8017582:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8017584:	68b9      	ldr	r1, [r7, #8]
 8017586:	68f8      	ldr	r0, [r7, #12]
 8017588:	f7ff ffb2 	bl	80174f0 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 801758c:	68fb      	ldr	r3, [r7, #12]
 801758e:	1d1c      	adds	r4, r3, #4
 8017590:	f107 0320 	add.w	r3, r7, #32
 8017594:	6879      	ldr	r1, [r7, #4]
 8017596:	4618      	mov	r0, r3
 8017598:	f7f4 fcd0 	bl	800bf3c <_Z10StringFromj>
 801759c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80175a0:	491f      	ldr	r1, [pc, #124]	; (8017620 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj+0xa8>)
 80175a2:	4618      	mov	r0, r3
 80175a4:	f7f3 fbe3 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80175a8:	f107 0318 	add.w	r3, r7, #24
 80175ac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80175b0:	f107 0120 	add.w	r1, r7, #32
 80175b4:	4618      	mov	r0, r3
 80175b6:	f7f3 fff4 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 80175ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80175be:	6879      	ldr	r1, [r7, #4]
 80175c0:	4618      	mov	r0, r3
 80175c2:	f7f4 fb5f 	bl	800bc84 <_Z30BracketsFormattedHexStringFromj>
 80175c6:	f107 0310 	add.w	r3, r7, #16
 80175ca:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80175ce:	f107 0118 	add.w	r1, r7, #24
 80175d2:	4618      	mov	r0, r3
 80175d4:	f7f3 ffe5 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 80175d8:	f107 0310 	add.w	r3, r7, #16
 80175dc:	4619      	mov	r1, r3
 80175de:	4620      	mov	r0, r4
 80175e0:	f7f3 fffa 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 80175e4:	f107 0310 	add.w	r3, r7, #16
 80175e8:	4618      	mov	r0, r3
 80175ea:	f7f3 ff78 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80175ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80175f2:	4618      	mov	r0, r3
 80175f4:	f7f3 ff73 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80175f8:	f107 0318 	add.w	r3, r7, #24
 80175fc:	4618      	mov	r0, r3
 80175fe:	f7f3 ff6e 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8017602:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017606:	4618      	mov	r0, r3
 8017608:	f7f3 ff69 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801760c:	f107 0320 	add.w	r3, r7, #32
 8017610:	4618      	mov	r0, r3
 8017612:	f7f3 ff64 	bl	800b4de <_ZN12SimpleStringD1Ev>
    return *this;
 8017616:	68fb      	ldr	r3, [r7, #12]
}
 8017618:	4618      	mov	r0, r3
 801761a:	373c      	adds	r7, #60	; 0x3c
 801761c:	46bd      	mov	sp, r7
 801761e:	bd90      	pop	{r4, r7, pc}
 8017620:	08023d98 	.word	0x08023d98

08017624 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi>:

MockActualCall& MockActualCallTrace::withIntParameter(const SimpleString& name, int value)
{
 8017624:	b590      	push	{r4, r7, lr}
 8017626:	b08f      	sub	sp, #60	; 0x3c
 8017628:	af00      	add	r7, sp, #0
 801762a:	60f8      	str	r0, [r7, #12]
 801762c:	60b9      	str	r1, [r7, #8]
 801762e:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8017630:	68b9      	ldr	r1, [r7, #8]
 8017632:	68f8      	ldr	r0, [r7, #12]
 8017634:	f7ff ff5c 	bl	80174f0 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8017638:	68fb      	ldr	r3, [r7, #12]
 801763a:	1d1c      	adds	r4, r3, #4
 801763c:	f107 0320 	add.w	r3, r7, #32
 8017640:	6879      	ldr	r1, [r7, #4]
 8017642:	4618      	mov	r0, r3
 8017644:	f7f4 fa12 	bl	800ba6c <_Z10StringFromi>
 8017648:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801764c:	491f      	ldr	r1, [pc, #124]	; (80176cc <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi+0xa8>)
 801764e:	4618      	mov	r0, r3
 8017650:	f7f3 fb8d 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8017654:	f107 0318 	add.w	r3, r7, #24
 8017658:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801765c:	f107 0120 	add.w	r1, r7, #32
 8017660:	4618      	mov	r0, r3
 8017662:	f7f3 ff9e 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 8017666:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801766a:	6879      	ldr	r1, [r7, #4]
 801766c:	4618      	mov	r0, r3
 801766e:	f7f4 faed 	bl	800bc4c <_Z30BracketsFormattedHexStringFromi>
 8017672:	f107 0310 	add.w	r3, r7, #16
 8017676:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801767a:	f107 0118 	add.w	r1, r7, #24
 801767e:	4618      	mov	r0, r3
 8017680:	f7f3 ff8f 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 8017684:	f107 0310 	add.w	r3, r7, #16
 8017688:	4619      	mov	r1, r3
 801768a:	4620      	mov	r0, r4
 801768c:	f7f3 ffa4 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 8017690:	f107 0310 	add.w	r3, r7, #16
 8017694:	4618      	mov	r0, r3
 8017696:	f7f3 ff22 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801769a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801769e:	4618      	mov	r0, r3
 80176a0:	f7f3 ff1d 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80176a4:	f107 0318 	add.w	r3, r7, #24
 80176a8:	4618      	mov	r0, r3
 80176aa:	f7f3 ff18 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80176ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80176b2:	4618      	mov	r0, r3
 80176b4:	f7f3 ff13 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80176b8:	f107 0320 	add.w	r3, r7, #32
 80176bc:	4618      	mov	r0, r3
 80176be:	f7f3 ff0e 	bl	800b4de <_ZN12SimpleStringD1Ev>
    return *this;
 80176c2:	68fb      	ldr	r3, [r7, #12]
}
 80176c4:	4618      	mov	r0, r3
 80176c6:	373c      	adds	r7, #60	; 0x3c
 80176c8:	46bd      	mov	sp, r7
 80176ca:	bd90      	pop	{r4, r7, pc}
 80176cc:	08023d98 	.word	0x08023d98

080176d0 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockActualCallTrace::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 80176d0:	b590      	push	{r4, r7, lr}
 80176d2:	b08f      	sub	sp, #60	; 0x3c
 80176d4:	af00      	add	r7, sp, #0
 80176d6:	60f8      	str	r0, [r7, #12]
 80176d8:	60b9      	str	r1, [r7, #8]
 80176da:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80176dc:	68b9      	ldr	r1, [r7, #8]
 80176de:	68f8      	ldr	r0, [r7, #12]
 80176e0:	f7ff ff06 	bl	80174f0 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	1d1c      	adds	r4, r3, #4
 80176e8:	f107 0320 	add.w	r3, r7, #32
 80176ec:	6879      	ldr	r1, [r7, #4]
 80176ee:	4618      	mov	r0, r3
 80176f0:	f7f4 fc36 	bl	800bf60 <_Z10StringFromm>
 80176f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80176f8:	491f      	ldr	r1, [pc, #124]	; (8017778 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm+0xa8>)
 80176fa:	4618      	mov	r0, r3
 80176fc:	f7f3 fb37 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8017700:	f107 0318 	add.w	r3, r7, #24
 8017704:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8017708:	f107 0120 	add.w	r1, r7, #32
 801770c:	4618      	mov	r0, r3
 801770e:	f7f3 ff48 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 8017712:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017716:	6879      	ldr	r1, [r7, #4]
 8017718:	4618      	mov	r0, r3
 801771a:	f7f4 faeb 	bl	800bcf4 <_Z30BracketsFormattedHexStringFromm>
 801771e:	f107 0310 	add.w	r3, r7, #16
 8017722:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8017726:	f107 0118 	add.w	r1, r7, #24
 801772a:	4618      	mov	r0, r3
 801772c:	f7f3 ff39 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 8017730:	f107 0310 	add.w	r3, r7, #16
 8017734:	4619      	mov	r1, r3
 8017736:	4620      	mov	r0, r4
 8017738:	f7f3 ff4e 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 801773c:	f107 0310 	add.w	r3, r7, #16
 8017740:	4618      	mov	r0, r3
 8017742:	f7f3 fecc 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8017746:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801774a:	4618      	mov	r0, r3
 801774c:	f7f3 fec7 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8017750:	f107 0318 	add.w	r3, r7, #24
 8017754:	4618      	mov	r0, r3
 8017756:	f7f3 fec2 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801775a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801775e:	4618      	mov	r0, r3
 8017760:	f7f3 febd 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8017764:	f107 0320 	add.w	r3, r7, #32
 8017768:	4618      	mov	r0, r3
 801776a:	f7f3 feb8 	bl	800b4de <_ZN12SimpleStringD1Ev>
    return *this;
 801776e:	68fb      	ldr	r3, [r7, #12]
}
 8017770:	4618      	mov	r0, r3
 8017772:	373c      	adds	r7, #60	; 0x3c
 8017774:	46bd      	mov	sp, r7
 8017776:	bd90      	pop	{r4, r7, pc}
 8017778:	08023d98 	.word	0x08023d98

0801777c <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockActualCallTrace::withLongIntParameter(const SimpleString& name, long int value)
{
 801777c:	b590      	push	{r4, r7, lr}
 801777e:	b08f      	sub	sp, #60	; 0x3c
 8017780:	af00      	add	r7, sp, #0
 8017782:	60f8      	str	r0, [r7, #12]
 8017784:	60b9      	str	r1, [r7, #8]
 8017786:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8017788:	68b9      	ldr	r1, [r7, #8]
 801778a:	68f8      	ldr	r0, [r7, #12]
 801778c:	f7ff feb0 	bl	80174f0 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	1d1c      	adds	r4, r3, #4
 8017794:	f107 0320 	add.w	r3, r7, #32
 8017798:	6879      	ldr	r1, [r7, #4]
 801779a:	4618      	mov	r0, r3
 801779c:	f7f4 f978 	bl	800ba90 <_Z10StringFroml>
 80177a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80177a4:	491f      	ldr	r1, [pc, #124]	; (8017824 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl+0xa8>)
 80177a6:	4618      	mov	r0, r3
 80177a8:	f7f3 fae1 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80177ac:	f107 0318 	add.w	r3, r7, #24
 80177b0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80177b4:	f107 0120 	add.w	r1, r7, #32
 80177b8:	4618      	mov	r0, r3
 80177ba:	f7f3 fef2 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 80177be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80177c2:	6879      	ldr	r1, [r7, #4]
 80177c4:	4618      	mov	r0, r3
 80177c6:	f7f4 fa79 	bl	800bcbc <_Z30BracketsFormattedHexStringFroml>
 80177ca:	f107 0310 	add.w	r3, r7, #16
 80177ce:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80177d2:	f107 0118 	add.w	r1, r7, #24
 80177d6:	4618      	mov	r0, r3
 80177d8:	f7f3 fee3 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 80177dc:	f107 0310 	add.w	r3, r7, #16
 80177e0:	4619      	mov	r1, r3
 80177e2:	4620      	mov	r0, r4
 80177e4:	f7f3 fef8 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 80177e8:	f107 0310 	add.w	r3, r7, #16
 80177ec:	4618      	mov	r0, r3
 80177ee:	f7f3 fe76 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80177f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80177f6:	4618      	mov	r0, r3
 80177f8:	f7f3 fe71 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80177fc:	f107 0318 	add.w	r3, r7, #24
 8017800:	4618      	mov	r0, r3
 8017802:	f7f3 fe6c 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8017806:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801780a:	4618      	mov	r0, r3
 801780c:	f7f3 fe67 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8017810:	f107 0320 	add.w	r3, r7, #32
 8017814:	4618      	mov	r0, r3
 8017816:	f7f3 fe62 	bl	800b4de <_ZN12SimpleStringD1Ev>
    return *this;
 801781a:	68fb      	ldr	r3, [r7, #12]
}
 801781c:	4618      	mov	r0, r3
 801781e:	373c      	adds	r7, #60	; 0x3c
 8017820:	46bd      	mov	sp, r7
 8017822:	bd90      	pop	{r4, r7, pc}
 8017824:	08023d98 	.word	0x08023d98

08017828 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockActualCallTrace::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8017828:	b5b0      	push	{r4, r5, r7, lr}
 801782a:	b086      	sub	sp, #24
 801782c:	af02      	add	r7, sp, #8
 801782e:	60f8      	str	r0, [r7, #12]
 8017830:	60b9      	str	r1, [r7, #8]
 8017832:	4639      	mov	r1, r7
 8017834:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8017838:	f7fa fe7c 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 801783c:	4604      	mov	r4, r0
 801783e:	6823      	ldr	r3, [r4, #0]
 8017840:	3368      	adds	r3, #104	; 0x68
 8017842:	681d      	ldr	r5, [r3, #0]
 8017844:	f7fa fe86 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017848:	4603      	mov	r3, r0
 801784a:	9300      	str	r3, [sp, #0]
 801784c:	f240 23ee 	movw	r3, #750	; 0x2ee
 8017850:	4a04      	ldr	r2, [pc, #16]	; (8017864 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 8017852:	4905      	ldr	r1, [pc, #20]	; (8017868 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 8017854:	4620      	mov	r0, r4
 8017856:	47a8      	blx	r5
    return *this;
 8017858:	68fb      	ldr	r3, [r7, #12]
}
 801785a:	4618      	mov	r0, r3
 801785c:	3710      	adds	r7, #16
 801785e:	46bd      	mov	sp, r7
 8017860:	bdb0      	pop	{r4, r5, r7, pc}
 8017862:	bf00      	nop
 8017864:	08023c84 	.word	0x08023c84
 8017868:	08023ca0 	.word	0x08023ca0

0801786c <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockActualCallTrace::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 801786c:	b5b0      	push	{r4, r5, r7, lr}
 801786e:	b086      	sub	sp, #24
 8017870:	af02      	add	r7, sp, #8
 8017872:	60f8      	str	r0, [r7, #12]
 8017874:	60b9      	str	r1, [r7, #8]
 8017876:	4639      	mov	r1, r7
 8017878:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801787c:	f7fa fe5a 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 8017880:	4604      	mov	r4, r0
 8017882:	6823      	ldr	r3, [r4, #0]
 8017884:	3368      	adds	r3, #104	; 0x68
 8017886:	681d      	ldr	r5, [r3, #0]
 8017888:	f7fa fe64 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801788c:	4603      	mov	r3, r0
 801788e:	9300      	str	r3, [sp, #0]
 8017890:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 8017894:	4a04      	ldr	r2, [pc, #16]	; (80178a8 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 8017896:	4905      	ldr	r1, [pc, #20]	; (80178ac <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 8017898:	4620      	mov	r0, r4
 801789a:	47a8      	blx	r5
    return *this;
 801789c:	68fb      	ldr	r3, [r7, #12]
}
 801789e:	4618      	mov	r0, r3
 80178a0:	3710      	adds	r7, #16
 80178a2:	46bd      	mov	sp, r7
 80178a4:	bdb0      	pop	{r4, r5, r7, pc}
 80178a6:	bf00      	nop
 80178a8:	08023c84 	.word	0x08023c84
 80178ac:	08023ccc 	.word	0x08023ccc

080178b0 <_ZN19MockActualCallTrace19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockActualCallTrace::withDoubleParameter(const SimpleString& name, double value)
{
 80178b0:	b590      	push	{r4, r7, lr}
 80178b2:	b087      	sub	sp, #28
 80178b4:	af00      	add	r7, sp, #0
 80178b6:	60f8      	str	r0, [r7, #12]
 80178b8:	60b9      	str	r1, [r7, #8]
 80178ba:	ed87 0b00 	vstr	d0, [r7]
    addParameterName(name);
 80178be:	68b9      	ldr	r1, [r7, #8]
 80178c0:	68f8      	ldr	r0, [r7, #12]
 80178c2:	f7ff fe15 	bl	80174f0 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80178c6:	68fb      	ldr	r3, [r7, #12]
 80178c8:	1d1c      	adds	r4, r3, #4
 80178ca:	f107 0310 	add.w	r3, r7, #16
 80178ce:	2106      	movs	r1, #6
 80178d0:	ed97 0b00 	vldr	d0, [r7]
 80178d4:	4618      	mov	r0, r3
 80178d6:	f7f4 fac7 	bl	800be68 <_Z10StringFromdi>
 80178da:	f107 0310 	add.w	r3, r7, #16
 80178de:	4619      	mov	r1, r3
 80178e0:	4620      	mov	r0, r4
 80178e2:	f7f3 fe79 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 80178e6:	f107 0310 	add.w	r3, r7, #16
 80178ea:	4618      	mov	r0, r3
 80178ec:	f7f3 fdf7 	bl	800b4de <_ZN12SimpleStringD1Ev>
    return *this;
 80178f0:	68fb      	ldr	r3, [r7, #12]
}
 80178f2:	4618      	mov	r0, r3
 80178f4:	371c      	adds	r7, #28
 80178f6:	46bd      	mov	sp, r7
 80178f8:	bd90      	pop	{r4, r7, pc}

080178fa <_ZN19MockActualCallTrace19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockActualCallTrace::withStringParameter(const SimpleString& name, const char* value)
{
 80178fa:	b590      	push	{r4, r7, lr}
 80178fc:	b087      	sub	sp, #28
 80178fe:	af00      	add	r7, sp, #0
 8017900:	60f8      	str	r0, [r7, #12]
 8017902:	60b9      	str	r1, [r7, #8]
 8017904:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8017906:	68b9      	ldr	r1, [r7, #8]
 8017908:	68f8      	ldr	r0, [r7, #12]
 801790a:	f7ff fdf1 	bl	80174f0 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	1d1c      	adds	r4, r3, #4
 8017912:	f107 0310 	add.w	r3, r7, #16
 8017916:	6879      	ldr	r1, [r7, #4]
 8017918:	4618      	mov	r0, r3
 801791a:	f7f4 f86d 	bl	800b9f8 <_Z10StringFromPKc>
 801791e:	f107 0310 	add.w	r3, r7, #16
 8017922:	4619      	mov	r1, r3
 8017924:	4620      	mov	r0, r4
 8017926:	f7f3 fe57 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 801792a:	f107 0310 	add.w	r3, r7, #16
 801792e:	4618      	mov	r0, r3
 8017930:	f7f3 fdd5 	bl	800b4de <_ZN12SimpleStringD1Ev>
    return *this;
 8017934:	68fb      	ldr	r3, [r7, #12]
}
 8017936:	4618      	mov	r0, r3
 8017938:	371c      	adds	r7, #28
 801793a:	46bd      	mov	sp, r7
 801793c:	bd90      	pop	{r4, r7, pc}

0801793e <_ZN19MockActualCallTrace20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withPointerParameter(const SimpleString& name, void* value)
{
 801793e:	b590      	push	{r4, r7, lr}
 8017940:	b087      	sub	sp, #28
 8017942:	af00      	add	r7, sp, #0
 8017944:	60f8      	str	r0, [r7, #12]
 8017946:	60b9      	str	r1, [r7, #8]
 8017948:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801794a:	68b9      	ldr	r1, [r7, #8]
 801794c:	68f8      	ldr	r0, [r7, #12]
 801794e:	f7ff fdcf 	bl	80174f0 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8017952:	68fb      	ldr	r3, [r7, #12]
 8017954:	1d1c      	adds	r4, r3, #4
 8017956:	f107 0310 	add.w	r3, r7, #16
 801795a:	6879      	ldr	r1, [r7, #4]
 801795c:	4618      	mov	r0, r3
 801795e:	f7f4 f8a9 	bl	800bab4 <_Z10StringFromPKv>
 8017962:	f107 0310 	add.w	r3, r7, #16
 8017966:	4619      	mov	r1, r3
 8017968:	4620      	mov	r0, r4
 801796a:	f7f3 fe35 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 801796e:	f107 0310 	add.w	r3, r7, #16
 8017972:	4618      	mov	r0, r3
 8017974:	f7f3 fdb3 	bl	800b4de <_ZN12SimpleStringD1Ev>
    return *this;
 8017978:	68fb      	ldr	r3, [r7, #12]
}
 801797a:	4618      	mov	r0, r3
 801797c:	371c      	adds	r7, #28
 801797e:	46bd      	mov	sp, r7
 8017980:	bd90      	pop	{r4, r7, pc}

08017982 <_ZN19MockActualCallTrace25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockActualCallTrace::withConstPointerParameter(const SimpleString& name, const void* value)
{
 8017982:	b590      	push	{r4, r7, lr}
 8017984:	b087      	sub	sp, #28
 8017986:	af00      	add	r7, sp, #0
 8017988:	60f8      	str	r0, [r7, #12]
 801798a:	60b9      	str	r1, [r7, #8]
 801798c:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801798e:	68b9      	ldr	r1, [r7, #8]
 8017990:	68f8      	ldr	r0, [r7, #12]
 8017992:	f7ff fdad 	bl	80174f0 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8017996:	68fb      	ldr	r3, [r7, #12]
 8017998:	1d1c      	adds	r4, r3, #4
 801799a:	f107 0310 	add.w	r3, r7, #16
 801799e:	6879      	ldr	r1, [r7, #4]
 80179a0:	4618      	mov	r0, r3
 80179a2:	f7f4 f887 	bl	800bab4 <_Z10StringFromPKv>
 80179a6:	f107 0310 	add.w	r3, r7, #16
 80179aa:	4619      	mov	r1, r3
 80179ac:	4620      	mov	r0, r4
 80179ae:	f7f3 fe13 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 80179b2:	f107 0310 	add.w	r3, r7, #16
 80179b6:	4618      	mov	r0, r3
 80179b8:	f7f3 fd91 	bl	800b4de <_ZN12SimpleStringD1Ev>
    return *this;
 80179bc:	68fb      	ldr	r3, [r7, #12]
}
 80179be:	4618      	mov	r0, r3
 80179c0:	371c      	adds	r7, #28
 80179c2:	46bd      	mov	sp, r7
 80179c4:	bd90      	pop	{r4, r7, pc}

080179c6 <_ZN19MockActualCallTrace28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockActualCallTrace::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 80179c6:	b590      	push	{r4, r7, lr}
 80179c8:	b087      	sub	sp, #28
 80179ca:	af00      	add	r7, sp, #0
 80179cc:	60f8      	str	r0, [r7, #12]
 80179ce:	60b9      	str	r1, [r7, #8]
 80179d0:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80179d2:	68b9      	ldr	r1, [r7, #8]
 80179d4:	68f8      	ldr	r0, [r7, #12]
 80179d6:	f7ff fd8b 	bl	80174f0 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80179da:	68fb      	ldr	r3, [r7, #12]
 80179dc:	1d1c      	adds	r4, r3, #4
 80179de:	f107 0310 	add.w	r3, r7, #16
 80179e2:	6879      	ldr	r1, [r7, #4]
 80179e4:	4618      	mov	r0, r3
 80179e6:	f7f4 f88f 	bl	800bb08 <_Z10StringFromPFvvE>
 80179ea:	f107 0310 	add.w	r3, r7, #16
 80179ee:	4619      	mov	r1, r3
 80179f0:	4620      	mov	r0, r4
 80179f2:	f7f3 fdf1 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 80179f6:	f107 0310 	add.w	r3, r7, #16
 80179fa:	4618      	mov	r0, r3
 80179fc:	f7f3 fd6f 	bl	800b4de <_ZN12SimpleStringD1Ev>
    return *this;
 8017a00:	68fb      	ldr	r3, [r7, #12]
}
 8017a02:	4618      	mov	r0, r3
 8017a04:	371c      	adds	r7, #28
 8017a06:	46bd      	mov	sp, r7
 8017a08:	bd90      	pop	{r4, r7, pc}

08017a0a <_ZN19MockActualCallTrace25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockActualCallTrace::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 8017a0a:	b590      	push	{r4, r7, lr}
 8017a0c:	b087      	sub	sp, #28
 8017a0e:	af00      	add	r7, sp, #0
 8017a10:	60f8      	str	r0, [r7, #12]
 8017a12:	60b9      	str	r1, [r7, #8]
 8017a14:	607a      	str	r2, [r7, #4]
 8017a16:	603b      	str	r3, [r7, #0]
    addParameterName(name);
 8017a18:	68b9      	ldr	r1, [r7, #8]
 8017a1a:	68f8      	ldr	r0, [r7, #12]
 8017a1c:	f7ff fd68 	bl	80174f0 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFromBinaryWithSizeOrNull(value, size);
 8017a20:	68fb      	ldr	r3, [r7, #12]
 8017a22:	1d1c      	adds	r4, r3, #4
 8017a24:	f107 0310 	add.w	r3, r7, #16
 8017a28:	683a      	ldr	r2, [r7, #0]
 8017a2a:	6879      	ldr	r1, [r7, #4]
 8017a2c:	4618      	mov	r0, r3
 8017a2e:	f7f4 fbaf 	bl	800c190 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 8017a32:	f107 0310 	add.w	r3, r7, #16
 8017a36:	4619      	mov	r1, r3
 8017a38:	4620      	mov	r0, r4
 8017a3a:	f7f3 fdcd 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 8017a3e:	f107 0310 	add.w	r3, r7, #16
 8017a42:	4618      	mov	r0, r3
 8017a44:	f7f3 fd4b 	bl	800b4de <_ZN12SimpleStringD1Ev>
    return *this;
 8017a48:	68fb      	ldr	r3, [r7, #12]
}
 8017a4a:	4618      	mov	r0, r3
 8017a4c:	371c      	adds	r7, #28
 8017a4e:	46bd      	mov	sp, r7
 8017a50:	bd90      	pop	{r4, r7, pc}
	...

08017a54 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockActualCallTrace::withParameterOfType(const SimpleString& typeName, const SimpleString& name, const void* value)
{
 8017a54:	b590      	push	{r4, r7, lr}
 8017a56:	b087      	sub	sp, #28
 8017a58:	af00      	add	r7, sp, #0
 8017a5a:	60f8      	str	r0, [r7, #12]
 8017a5c:	60b9      	str	r1, [r7, #8]
 8017a5e:	607a      	str	r2, [r7, #4]
 8017a60:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 8017a62:	68fb      	ldr	r3, [r7, #12]
 8017a64:	3304      	adds	r3, #4
 8017a66:	4913      	ldr	r1, [pc, #76]	; (8017ab4 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv+0x60>)
 8017a68:	4618      	mov	r0, r3
 8017a6a:	f7f3 fdc7 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 8017a6e:	68fb      	ldr	r3, [r7, #12]
 8017a70:	3304      	adds	r3, #4
 8017a72:	68b9      	ldr	r1, [r7, #8]
 8017a74:	4618      	mov	r0, r3
 8017a76:	f7f3 fdaf 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 8017a7a:	6879      	ldr	r1, [r7, #4]
 8017a7c:	68f8      	ldr	r0, [r7, #12]
 8017a7e:	f7ff fd37 	bl	80174f0 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8017a82:	68fb      	ldr	r3, [r7, #12]
 8017a84:	1d1c      	adds	r4, r3, #4
 8017a86:	f107 0310 	add.w	r3, r7, #16
 8017a8a:	6839      	ldr	r1, [r7, #0]
 8017a8c:	4618      	mov	r0, r3
 8017a8e:	f7f4 f811 	bl	800bab4 <_Z10StringFromPKv>
 8017a92:	f107 0310 	add.w	r3, r7, #16
 8017a96:	4619      	mov	r1, r3
 8017a98:	4620      	mov	r0, r4
 8017a9a:	f7f3 fd9d 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 8017a9e:	f107 0310 	add.w	r3, r7, #16
 8017aa2:	4618      	mov	r0, r3
 8017aa4:	f7f3 fd1b 	bl	800b4de <_ZN12SimpleStringD1Ev>
    return *this;
 8017aa8:	68fb      	ldr	r3, [r7, #12]
}
 8017aaa:	4618      	mov	r0, r3
 8017aac:	371c      	adds	r7, #28
 8017aae:	46bd      	mov	sp, r7
 8017ab0:	bd90      	pop	{r4, r7, pc}
 8017ab2:	bf00      	nop
 8017ab4:	08023d98 	.word	0x08023d98

08017ab8 <_ZN19MockActualCallTrace19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withOutputParameter(const SimpleString& name, void* output)
{
 8017ab8:	b590      	push	{r4, r7, lr}
 8017aba:	b087      	sub	sp, #28
 8017abc:	af00      	add	r7, sp, #0
 8017abe:	60f8      	str	r0, [r7, #12]
 8017ac0:	60b9      	str	r1, [r7, #8]
 8017ac2:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8017ac4:	68b9      	ldr	r1, [r7, #8]
 8017ac6:	68f8      	ldr	r0, [r7, #12]
 8017ac8:	f7ff fd12 	bl	80174f0 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 8017acc:	68fb      	ldr	r3, [r7, #12]
 8017ace:	1d1c      	adds	r4, r3, #4
 8017ad0:	f107 0310 	add.w	r3, r7, #16
 8017ad4:	6879      	ldr	r1, [r7, #4]
 8017ad6:	4618      	mov	r0, r3
 8017ad8:	f7f3 ffec 	bl	800bab4 <_Z10StringFromPKv>
 8017adc:	f107 0310 	add.w	r3, r7, #16
 8017ae0:	4619      	mov	r1, r3
 8017ae2:	4620      	mov	r0, r4
 8017ae4:	f7f3 fd78 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 8017ae8:	f107 0310 	add.w	r3, r7, #16
 8017aec:	4618      	mov	r0, r3
 8017aee:	f7f3 fcf6 	bl	800b4de <_ZN12SimpleStringD1Ev>
    return *this;
 8017af2:	68fb      	ldr	r3, [r7, #12]
}
 8017af4:	4618      	mov	r0, r3
 8017af6:	371c      	adds	r7, #28
 8017af8:	46bd      	mov	sp, r7
 8017afa:	bd90      	pop	{r4, r7, pc}

08017afc <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockActualCallTrace::withOutputParameterOfType(const SimpleString& typeName, const SimpleString& name, void* output)
{
 8017afc:	b590      	push	{r4, r7, lr}
 8017afe:	b087      	sub	sp, #28
 8017b00:	af00      	add	r7, sp, #0
 8017b02:	60f8      	str	r0, [r7, #12]
 8017b04:	60b9      	str	r1, [r7, #8]
 8017b06:	607a      	str	r2, [r7, #4]
 8017b08:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 8017b0a:	68fb      	ldr	r3, [r7, #12]
 8017b0c:	3304      	adds	r3, #4
 8017b0e:	4913      	ldr	r1, [pc, #76]	; (8017b5c <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv+0x60>)
 8017b10:	4618      	mov	r0, r3
 8017b12:	f7f3 fd73 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 8017b16:	68fb      	ldr	r3, [r7, #12]
 8017b18:	3304      	adds	r3, #4
 8017b1a:	68b9      	ldr	r1, [r7, #8]
 8017b1c:	4618      	mov	r0, r3
 8017b1e:	f7f3 fd5b 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 8017b22:	6879      	ldr	r1, [r7, #4]
 8017b24:	68f8      	ldr	r0, [r7, #12]
 8017b26:	f7ff fce3 	bl	80174f0 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 8017b2a:	68fb      	ldr	r3, [r7, #12]
 8017b2c:	1d1c      	adds	r4, r3, #4
 8017b2e:	f107 0310 	add.w	r3, r7, #16
 8017b32:	6839      	ldr	r1, [r7, #0]
 8017b34:	4618      	mov	r0, r3
 8017b36:	f7f3 ffbd 	bl	800bab4 <_Z10StringFromPKv>
 8017b3a:	f107 0310 	add.w	r3, r7, #16
 8017b3e:	4619      	mov	r1, r3
 8017b40:	4620      	mov	r0, r4
 8017b42:	f7f3 fd49 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 8017b46:	f107 0310 	add.w	r3, r7, #16
 8017b4a:	4618      	mov	r0, r3
 8017b4c:	f7f3 fcc7 	bl	800b4de <_ZN12SimpleStringD1Ev>
    return *this;
 8017b50:	68fb      	ldr	r3, [r7, #12]
}
 8017b52:	4618      	mov	r0, r3
 8017b54:	371c      	adds	r7, #28
 8017b56:	46bd      	mov	sp, r7
 8017b58:	bd90      	pop	{r4, r7, pc}
 8017b5a:	bf00      	nop
 8017b5c:	08023d98 	.word	0x08023d98

08017b60 <_ZN19MockActualCallTrace14hasReturnValueEv>:

bool MockActualCallTrace::hasReturnValue()
{
 8017b60:	b480      	push	{r7}
 8017b62:	b083      	sub	sp, #12
 8017b64:	af00      	add	r7, sp, #0
 8017b66:	6078      	str	r0, [r7, #4]
    return false;
 8017b68:	2300      	movs	r3, #0
}
 8017b6a:	4618      	mov	r0, r3
 8017b6c:	370c      	adds	r7, #12
 8017b6e:	46bd      	mov	sp, r7
 8017b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b74:	4770      	bx	lr
	...

08017b78 <_ZN19MockActualCallTrace11returnValueEv>:

MockNamedValue MockActualCallTrace::returnValue()
{
 8017b78:	b580      	push	{r7, lr}
 8017b7a:	b084      	sub	sp, #16
 8017b7c:	af00      	add	r7, sp, #0
 8017b7e:	6078      	str	r0, [r7, #4]
 8017b80:	6039      	str	r1, [r7, #0]
    return MockNamedValue("");
 8017b82:	f107 0308 	add.w	r3, r7, #8
 8017b86:	4909      	ldr	r1, [pc, #36]	; (8017bac <_ZN19MockActualCallTrace11returnValueEv+0x34>)
 8017b88:	4618      	mov	r0, r3
 8017b8a:	f7f3 f8f0 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8017b8e:	f107 0308 	add.w	r3, r7, #8
 8017b92:	4619      	mov	r1, r3
 8017b94:	6878      	ldr	r0, [r7, #4]
 8017b96:	f003 fe0f 	bl	801b7b8 <_ZN14MockNamedValueC1ERK12SimpleString>
 8017b9a:	f107 0308 	add.w	r3, r7, #8
 8017b9e:	4618      	mov	r0, r3
 8017ba0:	f7f3 fc9d 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 8017ba4:	6878      	ldr	r0, [r7, #4]
 8017ba6:	3710      	adds	r7, #16
 8017ba8:	46bd      	mov	sp, r7
 8017baa:	bd80      	pop	{r7, pc}
 8017bac:	08023c6c 	.word	0x08023c6c

08017bb0 <_ZN19MockActualCallTrace18returnLongIntValueEv>:

long int MockActualCallTrace::returnLongIntValue()
{
 8017bb0:	b480      	push	{r7}
 8017bb2:	b083      	sub	sp, #12
 8017bb4:	af00      	add	r7, sp, #0
 8017bb6:	6078      	str	r0, [r7, #4]
    return 0;
 8017bb8:	2300      	movs	r3, #0
}
 8017bba:	4618      	mov	r0, r3
 8017bbc:	370c      	adds	r7, #12
 8017bbe:	46bd      	mov	sp, r7
 8017bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bc4:	4770      	bx	lr

08017bc6 <_ZN19MockActualCallTrace26returnUnsignedLongIntValueEv>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValue()
{
 8017bc6:	b480      	push	{r7}
 8017bc8:	b083      	sub	sp, #12
 8017bca:	af00      	add	r7, sp, #0
 8017bcc:	6078      	str	r0, [r7, #4]
    return 0;
 8017bce:	2300      	movs	r3, #0
}
 8017bd0:	4618      	mov	r0, r3
 8017bd2:	370c      	adds	r7, #12
 8017bd4:	46bd      	mov	sp, r7
 8017bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bda:	4770      	bx	lr

08017bdc <_ZN19MockActualCallTrace35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValueOrDefault(unsigned long)
{
 8017bdc:	b480      	push	{r7}
 8017bde:	b083      	sub	sp, #12
 8017be0:	af00      	add	r7, sp, #0
 8017be2:	6078      	str	r0, [r7, #4]
 8017be4:	6039      	str	r1, [r7, #0]
    return 0;
 8017be6:	2300      	movs	r3, #0
}
 8017be8:	4618      	mov	r0, r3
 8017bea:	370c      	adds	r7, #12
 8017bec:	46bd      	mov	sp, r7
 8017bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bf2:	4770      	bx	lr

08017bf4 <_ZN19MockActualCallTrace27returnLongIntValueOrDefaultEl>:

long int MockActualCallTrace::returnLongIntValueOrDefault(long int)
{
 8017bf4:	b480      	push	{r7}
 8017bf6:	b083      	sub	sp, #12
 8017bf8:	af00      	add	r7, sp, #0
 8017bfa:	6078      	str	r0, [r7, #4]
 8017bfc:	6039      	str	r1, [r7, #0]
    return 0;
 8017bfe:	2300      	movs	r3, #0
}
 8017c00:	4618      	mov	r0, r3
 8017c02:	370c      	adds	r7, #12
 8017c04:	46bd      	mov	sp, r7
 8017c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c0a:	4770      	bx	lr

08017c0c <_ZN19MockActualCallTrace22returnLongLongIntValueEv>:
}

#else

cpputest_longlong MockActualCallTrace::returnLongLongIntValue()
{
 8017c0c:	b5b0      	push	{r4, r5, r7, lr}
 8017c0e:	b084      	sub	sp, #16
 8017c10:	af02      	add	r7, sp, #8
 8017c12:	6078      	str	r0, [r7, #4]
 8017c14:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 8017c16:	f7fa fc8d 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 8017c1a:	4604      	mov	r4, r0
 8017c1c:	6823      	ldr	r3, [r4, #0]
 8017c1e:	3368      	adds	r3, #104	; 0x68
 8017c20:	681d      	ldr	r5, [r3, #0]
 8017c22:	f7fa fc97 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017c26:	4603      	mov	r3, r0
 8017c28:	9300      	str	r3, [sp, #0]
 8017c2a:	f240 3375 	movw	r3, #885	; 0x375
 8017c2e:	4a06      	ldr	r2, [pc, #24]	; (8017c48 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x3c>)
 8017c30:	4906      	ldr	r1, [pc, #24]	; (8017c4c <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x40>)
 8017c32:	4620      	mov	r0, r4
 8017c34:	47a8      	blx	r5
    return cpputest_longlong(0);
 8017c36:	2100      	movs	r1, #0
 8017c38:	6878      	ldr	r0, [r7, #4]
 8017c3a:	f7f1 f8cf 	bl	8008ddc <_ZN17cpputest_longlongC1Ei>
}
 8017c3e:	6878      	ldr	r0, [r7, #4]
 8017c40:	3708      	adds	r7, #8
 8017c42:	46bd      	mov	sp, r7
 8017c44:	bdb0      	pop	{r4, r5, r7, pc}
 8017c46:	bf00      	nop
 8017c48:	08023c84 	.word	0x08023c84
 8017c4c:	08023ccc 	.word	0x08023ccc

08017c50 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValue()
{
 8017c50:	b5b0      	push	{r4, r5, r7, lr}
 8017c52:	b084      	sub	sp, #16
 8017c54:	af02      	add	r7, sp, #8
 8017c56:	6078      	str	r0, [r7, #4]
 8017c58:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 8017c5a:	f7fa fc6b 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 8017c5e:	4604      	mov	r4, r0
 8017c60:	6823      	ldr	r3, [r4, #0]
 8017c62:	3368      	adds	r3, #104	; 0x68
 8017c64:	681d      	ldr	r5, [r3, #0]
 8017c66:	f7fa fc75 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017c6a:	4603      	mov	r3, r0
 8017c6c:	9300      	str	r3, [sp, #0]
 8017c6e:	f240 337b 	movw	r3, #891	; 0x37b
 8017c72:	4a06      	ldr	r2, [pc, #24]	; (8017c8c <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x3c>)
 8017c74:	4906      	ldr	r1, [pc, #24]	; (8017c90 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x40>)
 8017c76:	4620      	mov	r0, r4
 8017c78:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8017c7a:	2100      	movs	r1, #0
 8017c7c:	6878      	ldr	r0, [r7, #4]
 8017c7e:	f7f1 f8b9 	bl	8008df4 <_ZN18cpputest_ulonglongC1Ei>
}
 8017c82:	6878      	ldr	r0, [r7, #4]
 8017c84:	3708      	adds	r7, #8
 8017c86:	46bd      	mov	sp, r7
 8017c88:	bdb0      	pop	{r4, r5, r7, pc}
 8017c8a:	bf00      	nop
 8017c8c:	08023c84 	.word	0x08023c84
 8017c90:	08023ca0 	.word	0x08023ca0

08017c94 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong)
{
 8017c94:	b5b0      	push	{r4, r5, r7, lr}
 8017c96:	b086      	sub	sp, #24
 8017c98:	af02      	add	r7, sp, #8
 8017c9a:	60f8      	str	r0, [r7, #12]
 8017c9c:	60b9      	str	r1, [r7, #8]
 8017c9e:	4639      	mov	r1, r7
 8017ca0:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8017ca4:	f7fa fc46 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 8017ca8:	4604      	mov	r4, r0
 8017caa:	6823      	ldr	r3, [r4, #0]
 8017cac:	3368      	adds	r3, #104	; 0x68
 8017cae:	681d      	ldr	r5, [r3, #0]
 8017cb0:	f7fa fc50 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017cb4:	4603      	mov	r3, r0
 8017cb6:	9300      	str	r3, [sp, #0]
 8017cb8:	f240 3381 	movw	r3, #897	; 0x381
 8017cbc:	4a05      	ldr	r2, [pc, #20]	; (8017cd4 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x40>)
 8017cbe:	4906      	ldr	r1, [pc, #24]	; (8017cd8 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 8017cc0:	4620      	mov	r0, r4
 8017cc2:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8017cc4:	2100      	movs	r1, #0
 8017cc6:	68f8      	ldr	r0, [r7, #12]
 8017cc8:	f7f1 f894 	bl	8008df4 <_ZN18cpputest_ulonglongC1Ei>
}
 8017ccc:	68f8      	ldr	r0, [r7, #12]
 8017cce:	3710      	adds	r7, #16
 8017cd0:	46bd      	mov	sp, r7
 8017cd2:	bdb0      	pop	{r4, r5, r7, pc}
 8017cd4:	08023c84 	.word	0x08023c84
 8017cd8:	08023ca0 	.word	0x08023ca0

08017cdc <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockActualCallTrace::returnLongLongIntValueOrDefault(cpputest_longlong)
{
 8017cdc:	b5b0      	push	{r4, r5, r7, lr}
 8017cde:	b086      	sub	sp, #24
 8017ce0:	af02      	add	r7, sp, #8
 8017ce2:	60f8      	str	r0, [r7, #12]
 8017ce4:	60b9      	str	r1, [r7, #8]
 8017ce6:	4639      	mov	r1, r7
 8017ce8:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8017cec:	f7fa fc22 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 8017cf0:	4604      	mov	r4, r0
 8017cf2:	6823      	ldr	r3, [r4, #0]
 8017cf4:	3368      	adds	r3, #104	; 0x68
 8017cf6:	681d      	ldr	r5, [r3, #0]
 8017cf8:	f7fa fc2c 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017cfc:	4603      	mov	r3, r0
 8017cfe:	9300      	str	r3, [sp, #0]
 8017d00:	f240 3387 	movw	r3, #903	; 0x387
 8017d04:	4a05      	ldr	r2, [pc, #20]	; (8017d1c <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x40>)
 8017d06:	4906      	ldr	r1, [pc, #24]	; (8017d20 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 8017d08:	4620      	mov	r0, r4
 8017d0a:	47a8      	blx	r5
    return cpputest_longlong(0);
 8017d0c:	2100      	movs	r1, #0
 8017d0e:	68f8      	ldr	r0, [r7, #12]
 8017d10:	f7f1 f864 	bl	8008ddc <_ZN17cpputest_longlongC1Ei>
}
 8017d14:	68f8      	ldr	r0, [r7, #12]
 8017d16:	3710      	adds	r7, #16
 8017d18:	46bd      	mov	sp, r7
 8017d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8017d1c:	08023c84 	.word	0x08023c84
 8017d20:	08023ccc 	.word	0x08023ccc

08017d24 <_ZN19MockActualCallTrace15returnBoolValueEv>:

#endif

bool MockActualCallTrace::returnBoolValue()
{
 8017d24:	b480      	push	{r7}
 8017d26:	b083      	sub	sp, #12
 8017d28:	af00      	add	r7, sp, #0
 8017d2a:	6078      	str	r0, [r7, #4]
    return false;
 8017d2c:	2300      	movs	r3, #0
}
 8017d2e:	4618      	mov	r0, r3
 8017d30:	370c      	adds	r7, #12
 8017d32:	46bd      	mov	sp, r7
 8017d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d38:	4770      	bx	lr

08017d3a <_ZN19MockActualCallTrace24returnBoolValueOrDefaultEb>:

bool MockActualCallTrace::returnBoolValueOrDefault(bool)
{
 8017d3a:	b480      	push	{r7}
 8017d3c:	b083      	sub	sp, #12
 8017d3e:	af00      	add	r7, sp, #0
 8017d40:	6078      	str	r0, [r7, #4]
 8017d42:	460b      	mov	r3, r1
 8017d44:	70fb      	strb	r3, [r7, #3]
    return false;
 8017d46:	2300      	movs	r3, #0
}
 8017d48:	4618      	mov	r0, r3
 8017d4a:	370c      	adds	r7, #12
 8017d4c:	46bd      	mov	sp, r7
 8017d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d52:	4770      	bx	lr

08017d54 <_ZN19MockActualCallTrace14returnIntValueEv>:

int MockActualCallTrace::returnIntValue()
{
 8017d54:	b480      	push	{r7}
 8017d56:	b083      	sub	sp, #12
 8017d58:	af00      	add	r7, sp, #0
 8017d5a:	6078      	str	r0, [r7, #4]
    return 0;
 8017d5c:	2300      	movs	r3, #0
}
 8017d5e:	4618      	mov	r0, r3
 8017d60:	370c      	adds	r7, #12
 8017d62:	46bd      	mov	sp, r7
 8017d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d68:	4770      	bx	lr

08017d6a <_ZN19MockActualCallTrace17returnDoubleValueEv>:

double MockActualCallTrace::returnDoubleValue()
{
 8017d6a:	b480      	push	{r7}
 8017d6c:	b083      	sub	sp, #12
 8017d6e:	af00      	add	r7, sp, #0
 8017d70:	6078      	str	r0, [r7, #4]
    return 0.0;
 8017d72:	f04f 0200 	mov.w	r2, #0
 8017d76:	f04f 0300 	mov.w	r3, #0
 8017d7a:	ec43 2b17 	vmov	d7, r2, r3
}
 8017d7e:	eeb0 0a47 	vmov.f32	s0, s14
 8017d82:	eef0 0a67 	vmov.f32	s1, s15
 8017d86:	370c      	adds	r7, #12
 8017d88:	46bd      	mov	sp, r7
 8017d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d8e:	4770      	bx	lr

08017d90 <_ZN19MockActualCallTrace26returnDoubleValueOrDefaultEd>:

double MockActualCallTrace::returnDoubleValueOrDefault(double)
{
 8017d90:	b580      	push	{r7, lr}
 8017d92:	b084      	sub	sp, #16
 8017d94:	af00      	add	r7, sp, #0
 8017d96:	60f8      	str	r0, [r7, #12]
 8017d98:	ed87 0b00 	vstr	d0, [r7]
    return returnDoubleValue();
 8017d9c:	68fb      	ldr	r3, [r7, #12]
 8017d9e:	681b      	ldr	r3, [r3, #0]
 8017da0:	3398      	adds	r3, #152	; 0x98
 8017da2:	681b      	ldr	r3, [r3, #0]
 8017da4:	68f8      	ldr	r0, [r7, #12]
 8017da6:	4798      	blx	r3
 8017da8:	eeb0 7a40 	vmov.f32	s14, s0
 8017dac:	eef0 7a60 	vmov.f32	s15, s1
}
 8017db0:	eeb0 0a47 	vmov.f32	s0, s14
 8017db4:	eef0 0a67 	vmov.f32	s1, s15
 8017db8:	3710      	adds	r7, #16
 8017dba:	46bd      	mov	sp, r7
 8017dbc:	bd80      	pop	{r7, pc}

08017dbe <_ZN19MockActualCallTrace22returnUnsignedIntValueEv>:

unsigned int MockActualCallTrace::returnUnsignedIntValue()
{
 8017dbe:	b480      	push	{r7}
 8017dc0:	b083      	sub	sp, #12
 8017dc2:	af00      	add	r7, sp, #0
 8017dc4:	6078      	str	r0, [r7, #4]
    return 0;
 8017dc6:	2300      	movs	r3, #0
}
 8017dc8:	4618      	mov	r0, r3
 8017dca:	370c      	adds	r7, #12
 8017dcc:	46bd      	mov	sp, r7
 8017dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dd2:	4770      	bx	lr

08017dd4 <_ZN19MockActualCallTrace18returnPointerValueEv>:

void * MockActualCallTrace::returnPointerValue()
{
 8017dd4:	b480      	push	{r7}
 8017dd6:	b083      	sub	sp, #12
 8017dd8:	af00      	add	r7, sp, #0
 8017dda:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8017ddc:	2300      	movs	r3, #0
}
 8017dde:	4618      	mov	r0, r3
 8017de0:	370c      	adds	r7, #12
 8017de2:	46bd      	mov	sp, r7
 8017de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017de8:	4770      	bx	lr

08017dea <_ZN19MockActualCallTrace23returnConstPointerValueEv>:

const void * MockActualCallTrace::returnConstPointerValue()
{
 8017dea:	b480      	push	{r7}
 8017dec:	b083      	sub	sp, #12
 8017dee:	af00      	add	r7, sp, #0
 8017df0:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8017df2:	2300      	movs	r3, #0
}
 8017df4:	4618      	mov	r0, r3
 8017df6:	370c      	adds	r7, #12
 8017df8:	46bd      	mov	sp, r7
 8017dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dfe:	4770      	bx	lr

08017e00 <_ZN19MockActualCallTrace26returnFunctionPointerValueEv>:

void (*MockActualCallTrace::returnFunctionPointerValue())()
{
 8017e00:	b480      	push	{r7}
 8017e02:	b083      	sub	sp, #12
 8017e04:	af00      	add	r7, sp, #0
 8017e06:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8017e08:	2300      	movs	r3, #0
}
 8017e0a:	4618      	mov	r0, r3
 8017e0c:	370c      	adds	r7, #12
 8017e0e:	46bd      	mov	sp, r7
 8017e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e14:	4770      	bx	lr

08017e16 <_ZN19MockActualCallTrace32returnConstPointerValueOrDefaultEPKv>:

const void * MockActualCallTrace::returnConstPointerValueOrDefault(const void *)
{
 8017e16:	b580      	push	{r7, lr}
 8017e18:	b082      	sub	sp, #8
 8017e1a:	af00      	add	r7, sp, #0
 8017e1c:	6078      	str	r0, [r7, #4]
 8017e1e:	6039      	str	r1, [r7, #0]
    return returnConstPointerValue();
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	681b      	ldr	r3, [r3, #0]
 8017e24:	33a8      	adds	r3, #168	; 0xa8
 8017e26:	681b      	ldr	r3, [r3, #0]
 8017e28:	6878      	ldr	r0, [r7, #4]
 8017e2a:	4798      	blx	r3
 8017e2c:	4603      	mov	r3, r0
}
 8017e2e:	4618      	mov	r0, r3
 8017e30:	3708      	adds	r7, #8
 8017e32:	46bd      	mov	sp, r7
 8017e34:	bd80      	pop	{r7, pc}

08017e36 <_ZN19MockActualCallTrace27returnPointerValueOrDefaultEPv>:

void * MockActualCallTrace::returnPointerValueOrDefault(void *)
{
 8017e36:	b580      	push	{r7, lr}
 8017e38:	b082      	sub	sp, #8
 8017e3a:	af00      	add	r7, sp, #0
 8017e3c:	6078      	str	r0, [r7, #4]
 8017e3e:	6039      	str	r1, [r7, #0]
    return returnPointerValue();
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	681b      	ldr	r3, [r3, #0]
 8017e44:	33a0      	adds	r3, #160	; 0xa0
 8017e46:	681b      	ldr	r3, [r3, #0]
 8017e48:	6878      	ldr	r0, [r7, #4]
 8017e4a:	4798      	blx	r3
 8017e4c:	4603      	mov	r3, r0
}
 8017e4e:	4618      	mov	r0, r3
 8017e50:	3708      	adds	r7, #8
 8017e52:	46bd      	mov	sp, r7
 8017e54:	bd80      	pop	{r7, pc}

08017e56 <_ZN19MockActualCallTrace35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockActualCallTrace::returnFunctionPointerValueOrDefault(void (*)()))()
{
 8017e56:	b580      	push	{r7, lr}
 8017e58:	b082      	sub	sp, #8
 8017e5a:	af00      	add	r7, sp, #0
 8017e5c:	6078      	str	r0, [r7, #4]
 8017e5e:	6039      	str	r1, [r7, #0]
    return returnFunctionPointerValue();
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	681b      	ldr	r3, [r3, #0]
 8017e64:	33b0      	adds	r3, #176	; 0xb0
 8017e66:	681b      	ldr	r3, [r3, #0]
 8017e68:	6878      	ldr	r0, [r7, #4]
 8017e6a:	4798      	blx	r3
 8017e6c:	4603      	mov	r3, r0
}
 8017e6e:	4618      	mov	r0, r3
 8017e70:	3708      	adds	r7, #8
 8017e72:	46bd      	mov	sp, r7
 8017e74:	bd80      	pop	{r7, pc}
	...

08017e78 <_ZN19MockActualCallTrace17returnStringValueEv>:

const char * MockActualCallTrace::returnStringValue()
{
 8017e78:	b480      	push	{r7}
 8017e7a:	b083      	sub	sp, #12
 8017e7c:	af00      	add	r7, sp, #0
 8017e7e:	6078      	str	r0, [r7, #4]
    return "";
 8017e80:	4b03      	ldr	r3, [pc, #12]	; (8017e90 <_ZN19MockActualCallTrace17returnStringValueEv+0x18>)
}
 8017e82:	4618      	mov	r0, r3
 8017e84:	370c      	adds	r7, #12
 8017e86:	46bd      	mov	sp, r7
 8017e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e8c:	4770      	bx	lr
 8017e8e:	bf00      	nop
 8017e90:	08023c6c 	.word	0x08023c6c

08017e94 <_ZN19MockActualCallTrace26returnStringValueOrDefaultEPKc>:

const char * MockActualCallTrace::returnStringValueOrDefault(const char *)
{
 8017e94:	b580      	push	{r7, lr}
 8017e96:	b082      	sub	sp, #8
 8017e98:	af00      	add	r7, sp, #0
 8017e9a:	6078      	str	r0, [r7, #4]
 8017e9c:	6039      	str	r1, [r7, #0]
    return returnStringValue();
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	681b      	ldr	r3, [r3, #0]
 8017ea2:	3394      	adds	r3, #148	; 0x94
 8017ea4:	681b      	ldr	r3, [r3, #0]
 8017ea6:	6878      	ldr	r0, [r7, #4]
 8017ea8:	4798      	blx	r3
 8017eaa:	4603      	mov	r3, r0
}
 8017eac:	4618      	mov	r0, r3
 8017eae:	3708      	adds	r7, #8
 8017eb0:	46bd      	mov	sp, r7
 8017eb2:	bd80      	pop	{r7, pc}

08017eb4 <_ZN19MockActualCallTrace23returnIntValueOrDefaultEi>:

int MockActualCallTrace::returnIntValueOrDefault(int)
{
 8017eb4:	b480      	push	{r7}
 8017eb6:	b083      	sub	sp, #12
 8017eb8:	af00      	add	r7, sp, #0
 8017eba:	6078      	str	r0, [r7, #4]
 8017ebc:	6039      	str	r1, [r7, #0]
    return 0;
 8017ebe:	2300      	movs	r3, #0
}
 8017ec0:	4618      	mov	r0, r3
 8017ec2:	370c      	adds	r7, #12
 8017ec4:	46bd      	mov	sp, r7
 8017ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eca:	4770      	bx	lr

08017ecc <_ZN19MockActualCallTrace31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockActualCallTrace::returnUnsignedIntValueOrDefault(unsigned int)
{
 8017ecc:	b580      	push	{r7, lr}
 8017ece:	b082      	sub	sp, #8
 8017ed0:	af00      	add	r7, sp, #0
 8017ed2:	6078      	str	r0, [r7, #4]
 8017ed4:	6039      	str	r1, [r7, #0]
    return returnUnsignedIntValue();
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	3388      	adds	r3, #136	; 0x88
 8017edc:	681b      	ldr	r3, [r3, #0]
 8017ede:	6878      	ldr	r0, [r7, #4]
 8017ee0:	4798      	blx	r3
 8017ee2:	4603      	mov	r3, r0
}
 8017ee4:	4618      	mov	r0, r3
 8017ee6:	3708      	adds	r7, #8
 8017ee8:	46bd      	mov	sp, r7
 8017eea:	bd80      	pop	{r7, pc}

08017eec <_ZN19MockActualCallTrace8onObjectEPKv>:

MockActualCall& MockActualCallTrace::onObject(const void* objectPtr)
{
 8017eec:	b590      	push	{r4, r7, lr}
 8017eee:	b085      	sub	sp, #20
 8017ef0:	af00      	add	r7, sp, #0
 8017ef2:	6078      	str	r0, [r7, #4]
 8017ef4:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " onObject:";
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	3304      	adds	r3, #4
 8017efa:	490e      	ldr	r1, [pc, #56]	; (8017f34 <_ZN19MockActualCallTrace8onObjectEPKv+0x48>)
 8017efc:	4618      	mov	r0, r3
 8017efe:	f7f3 fb7d 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(objectPtr);
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	1d1c      	adds	r4, r3, #4
 8017f06:	f107 0308 	add.w	r3, r7, #8
 8017f0a:	6839      	ldr	r1, [r7, #0]
 8017f0c:	4618      	mov	r0, r3
 8017f0e:	f7f3 fdd1 	bl	800bab4 <_Z10StringFromPKv>
 8017f12:	f107 0308 	add.w	r3, r7, #8
 8017f16:	4619      	mov	r1, r3
 8017f18:	4620      	mov	r0, r4
 8017f1a:	f7f3 fb5d 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 8017f1e:	f107 0308 	add.w	r3, r7, #8
 8017f22:	4618      	mov	r0, r3
 8017f24:	f7f3 fadb 	bl	800b4de <_ZN12SimpleStringD1Ev>
    return *this;
 8017f28:	687b      	ldr	r3, [r7, #4]
}
 8017f2a:	4618      	mov	r0, r3
 8017f2c:	3714      	adds	r7, #20
 8017f2e:	46bd      	mov	sp, r7
 8017f30:	bd90      	pop	{r4, r7, pc}
 8017f32:	bf00      	nop
 8017f34:	08023da0 	.word	0x08023da0

08017f38 <_ZN19MockActualCallTrace8instanceEv>:
}

MockActualCallTrace* MockActualCallTrace::instance_ = NULLPTR;

MockActualCallTrace& MockActualCallTrace::instance()
{
 8017f38:	b598      	push	{r3, r4, r7, lr}
 8017f3a:	af00      	add	r7, sp, #0
    if (instance_ == NULLPTR)
 8017f3c:	4b09      	ldr	r3, [pc, #36]	; (8017f64 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8017f3e:	681b      	ldr	r3, [r3, #0]
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	d10b      	bne.n	8017f5c <_ZN19MockActualCallTrace8instanceEv+0x24>
        instance_ = new MockActualCallTrace;
 8017f44:	f240 32f3 	movw	r2, #1011	; 0x3f3
 8017f48:	4907      	ldr	r1, [pc, #28]	; (8017f68 <_ZN19MockActualCallTrace8instanceEv+0x30>)
 8017f4a:	200c      	movs	r0, #12
 8017f4c:	f7f0 fb4c 	bl	80085e8 <_ZnwjPKci>
 8017f50:	4604      	mov	r4, r0
 8017f52:	4620      	mov	r0, r4
 8017f54:	f7ff fa4c 	bl	80173f0 <_ZN19MockActualCallTraceC1Ev>
 8017f58:	4b02      	ldr	r3, [pc, #8]	; (8017f64 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8017f5a:	601c      	str	r4, [r3, #0]
    return *instance_;
 8017f5c:	4b01      	ldr	r3, [pc, #4]	; (8017f64 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8017f5e:	681b      	ldr	r3, [r3, #0]
}
 8017f60:	4618      	mov	r0, r3
 8017f62:	bd98      	pop	{r3, r4, r7, pc}
 8017f64:	20000d4c 	.word	0x20000d4c
 8017f68:	08023c84 	.word	0x08023c84

08017f6c <_ZN19MockActualCallTrace13clearInstanceEv>:

void MockActualCallTrace::clearInstance()
{
 8017f6c:	b580      	push	{r7, lr}
 8017f6e:	af00      	add	r7, sp, #0
    delete instance_;
 8017f70:	4b06      	ldr	r3, [pc, #24]	; (8017f8c <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 8017f72:	681b      	ldr	r3, [r3, #0]
 8017f74:	2b00      	cmp	r3, #0
 8017f76:	d004      	beq.n	8017f82 <_ZN19MockActualCallTrace13clearInstanceEv+0x16>
 8017f78:	681a      	ldr	r2, [r3, #0]
 8017f7a:	3204      	adds	r2, #4
 8017f7c:	6812      	ldr	r2, [r2, #0]
 8017f7e:	4618      	mov	r0, r3
 8017f80:	4790      	blx	r2
    instance_ = NULLPTR;
 8017f82:	4b02      	ldr	r3, [pc, #8]	; (8017f8c <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 8017f84:	2200      	movs	r2, #0
 8017f86:	601a      	str	r2, [r3, #0]
}
 8017f88:	bf00      	nop
 8017f8a:	bd80      	pop	{r7, pc}
 8017f8c:	20000d4c 	.word	0x20000d4c

08017f90 <_ZN21MockIgnoredActualCallC1Ev>:
class MockIgnoredActualCall: public MockActualCall
 8017f90:	b580      	push	{r7, lr}
 8017f92:	b082      	sub	sp, #8
 8017f94:	af00      	add	r7, sp, #0
 8017f96:	6078      	str	r0, [r7, #4]
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	4618      	mov	r0, r3
 8017f9c:	f7fd fe9a 	bl	8015cd4 <_ZN14MockActualCallC1Ev>
 8017fa0:	4a03      	ldr	r2, [pc, #12]	; (8017fb0 <_ZN21MockIgnoredActualCallC1Ev+0x20>)
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	601a      	str	r2, [r3, #0]
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	4618      	mov	r0, r3
 8017faa:	3708      	adds	r7, #8
 8017fac:	46bd      	mov	sp, r7
 8017fae:	bd80      	pop	{r7, pc}
 8017fb0:	08026128 	.word	0x08026128

08017fb4 <__tcf_0>:

MockIgnoredActualCall& MockIgnoredActualCall::instance()
{
    static MockIgnoredActualCall call;
 8017fb4:	b580      	push	{r7, lr}
 8017fb6:	af00      	add	r7, sp, #0
 8017fb8:	4801      	ldr	r0, [pc, #4]	; (8017fc0 <__tcf_0+0xc>)
 8017fba:	f000 f831 	bl	8018020 <_ZN21MockIgnoredActualCallD1Ev>
 8017fbe:	bd80      	pop	{r7, pc}
 8017fc0:	20000d50 	.word	0x20000d50

08017fc4 <_ZN21MockIgnoredActualCall8instanceEv>:
{
 8017fc4:	b580      	push	{r7, lr}
 8017fc6:	af00      	add	r7, sp, #0
    static MockIgnoredActualCall call;
 8017fc8:	4b12      	ldr	r3, [pc, #72]	; (8018014 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8017fca:	781b      	ldrb	r3, [r3, #0]
 8017fcc:	f3bf 8f5b 	dmb	ish
 8017fd0:	b2db      	uxtb	r3, r3
 8017fd2:	f003 0301 	and.w	r3, r3, #1
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	bf0c      	ite	eq
 8017fda:	2301      	moveq	r3, #1
 8017fdc:	2300      	movne	r3, #0
 8017fde:	b2db      	uxtb	r3, r3
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d013      	beq.n	801800c <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 8017fe4:	480b      	ldr	r0, [pc, #44]	; (8018014 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8017fe6:	f005 fd83 	bl	801daf0 <__cxa_guard_acquire>
 8017fea:	4603      	mov	r3, r0
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	bf14      	ite	ne
 8017ff0:	2301      	movne	r3, #1
 8017ff2:	2300      	moveq	r3, #0
 8017ff4:	b2db      	uxtb	r3, r3
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d008      	beq.n	801800c <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 8017ffa:	4807      	ldr	r0, [pc, #28]	; (8018018 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
 8017ffc:	f7ff ffc8 	bl	8017f90 <_ZN21MockIgnoredActualCallC1Ev>
 8018000:	4804      	ldr	r0, [pc, #16]	; (8018014 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8018002:	f005 fd81 	bl	801db08 <__cxa_guard_release>
 8018006:	4805      	ldr	r0, [pc, #20]	; (801801c <_ZN21MockIgnoredActualCall8instanceEv+0x58>)
 8018008:	f005 fda5 	bl	801db56 <atexit>
    return call;
 801800c:	4b02      	ldr	r3, [pc, #8]	; (8018018 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
}
 801800e:	4618      	mov	r0, r3
 8018010:	bd80      	pop	{r7, pc}
 8018012:	bf00      	nop
 8018014:	20000d54 	.word	0x20000d54
 8018018:	20000d50 	.word	0x20000d50
 801801c:	08017fb5 	.word	0x08017fb5

08018020 <_ZN21MockIgnoredActualCallD1Ev>:
 8018020:	b580      	push	{r7, lr}
 8018022:	b082      	sub	sp, #8
 8018024:	af00      	add	r7, sp, #0
 8018026:	6078      	str	r0, [r7, #4]
 8018028:	4a05      	ldr	r2, [pc, #20]	; (8018040 <_ZN21MockIgnoredActualCallD1Ev+0x20>)
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	601a      	str	r2, [r3, #0]
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	4618      	mov	r0, r3
 8018032:	f7fd fe5f 	bl	8015cf4 <_ZN14MockActualCallD1Ev>
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	4618      	mov	r0, r3
 801803a:	3708      	adds	r7, #8
 801803c:	46bd      	mov	sp, r7
 801803e:	bd80      	pop	{r7, pc}
 8018040:	08026128 	.word	0x08026128

08018044 <_ZN21MockIgnoredActualCallD0Ev>:
 8018044:	b580      	push	{r7, lr}
 8018046:	b082      	sub	sp, #8
 8018048:	af00      	add	r7, sp, #0
 801804a:	6078      	str	r0, [r7, #4]
 801804c:	6878      	ldr	r0, [r7, #4]
 801804e:	f7ff ffe7 	bl	8018020 <_ZN21MockIgnoredActualCallD1Ev>
 8018052:	2104      	movs	r1, #4
 8018054:	6878      	ldr	r0, [r7, #4]
 8018056:	f7f0 fadb 	bl	8008610 <_ZdlPvj>
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	4618      	mov	r0, r3
 801805e:	3708      	adds	r7, #8
 8018060:	46bd      	mov	sp, r7
 8018062:	bd80      	pop	{r7, pc}

08018064 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>:
{
public:
    MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName);
};

class MockNoWayToCopyCustomTypeFailure : public MockFailure
 8018064:	b580      	push	{r7, lr}
 8018066:	b082      	sub	sp, #8
 8018068:	af00      	add	r7, sp, #0
 801806a:	6078      	str	r0, [r7, #4]
 801806c:	4a05      	ldr	r2, [pc, #20]	; (8018084 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev+0x20>)
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	601a      	str	r2, [r3, #0]
 8018072:	687b      	ldr	r3, [r7, #4]
 8018074:	4618      	mov	r0, r3
 8018076:	f7f0 fefd 	bl	8008e74 <_ZN11MockFailureD1Ev>
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	4618      	mov	r0, r3
 801807e:	3708      	adds	r7, #8
 8018080:	46bd      	mov	sp, r7
 8018082:	bd80      	pop	{r7, pc}
 8018084:	08026020 	.word	0x08026020

08018088 <_ZN32MockNoWayToCopyCustomTypeFailureD0Ev>:
 8018088:	b580      	push	{r7, lr}
 801808a:	b082      	sub	sp, #8
 801808c:	af00      	add	r7, sp, #0
 801808e:	6078      	str	r0, [r7, #4]
 8018090:	6878      	ldr	r0, [r7, #4]
 8018092:	f7ff ffe7 	bl	8018064 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
 8018096:	2134      	movs	r1, #52	; 0x34
 8018098:	6878      	ldr	r0, [r7, #4]
 801809a:	f7f0 fab9 	bl	8008610 <_ZdlPvj>
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	4618      	mov	r0, r3
 80180a2:	3708      	adds	r7, #8
 80180a4:	46bd      	mov	sp, r7
 80180a6:	bd80      	pop	{r7, pc}

080180a8 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>:
class MockUnexpectedCallHappenedFailure : public MockFailure
 80180a8:	b580      	push	{r7, lr}
 80180aa:	b082      	sub	sp, #8
 80180ac:	af00      	add	r7, sp, #0
 80180ae:	6078      	str	r0, [r7, #4]
 80180b0:	4a05      	ldr	r2, [pc, #20]	; (80180c8 <_ZN33MockUnexpectedCallHappenedFailureD1Ev+0x20>)
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	601a      	str	r2, [r3, #0]
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	4618      	mov	r0, r3
 80180ba:	f7f0 fedb 	bl	8008e74 <_ZN11MockFailureD1Ev>
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	4618      	mov	r0, r3
 80180c2:	3708      	adds	r7, #8
 80180c4:	46bd      	mov	sp, r7
 80180c6:	bd80      	pop	{r7, pc}
 80180c8:	080260fc 	.word	0x080260fc

080180cc <_ZN33MockUnexpectedCallHappenedFailureD0Ev>:
 80180cc:	b580      	push	{r7, lr}
 80180ce:	b082      	sub	sp, #8
 80180d0:	af00      	add	r7, sp, #0
 80180d2:	6078      	str	r0, [r7, #4]
 80180d4:	6878      	ldr	r0, [r7, #4]
 80180d6:	f7ff ffe7 	bl	80180a8 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 80180da:	2134      	movs	r1, #52	; 0x34
 80180dc:	6878      	ldr	r0, [r7, #4]
 80180de:	f7f0 fa97 	bl	8008610 <_ZdlPvj>
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	4618      	mov	r0, r3
 80180e6:	3708      	adds	r7, #8
 80180e8:	46bd      	mov	sp, r7
 80180ea:	bd80      	pop	{r7, pc}

080180ec <_ZN35MockUnexpectedInputParameterFailureD1Ev>:
class MockUnexpectedInputParameterFailure : public MockFailure
 80180ec:	b580      	push	{r7, lr}
 80180ee:	b082      	sub	sp, #8
 80180f0:	af00      	add	r7, sp, #0
 80180f2:	6078      	str	r0, [r7, #4]
 80180f4:	4a05      	ldr	r2, [pc, #20]	; (801810c <_ZN35MockUnexpectedInputParameterFailureD1Ev+0x20>)
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	601a      	str	r2, [r3, #0]
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	4618      	mov	r0, r3
 80180fe:	f7f0 feb9 	bl	8008e74 <_ZN11MockFailureD1Ev>
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	4618      	mov	r0, r3
 8018106:	3708      	adds	r7, #8
 8018108:	46bd      	mov	sp, r7
 801810a:	bd80      	pop	{r7, pc}
 801810c:	080260d0 	.word	0x080260d0

08018110 <_ZN35MockUnexpectedInputParameterFailureD0Ev>:
 8018110:	b580      	push	{r7, lr}
 8018112:	b082      	sub	sp, #8
 8018114:	af00      	add	r7, sp, #0
 8018116:	6078      	str	r0, [r7, #4]
 8018118:	6878      	ldr	r0, [r7, #4]
 801811a:	f7ff ffe7 	bl	80180ec <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 801811e:	2134      	movs	r1, #52	; 0x34
 8018120:	6878      	ldr	r0, [r7, #4]
 8018122:	f7f0 fa75 	bl	8008610 <_ZdlPvj>
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	4618      	mov	r0, r3
 801812a:	3708      	adds	r7, #8
 801812c:	46bd      	mov	sp, r7
 801812e:	bd80      	pop	{r7, pc}

08018130 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>:
class MockUnexpectedOutputParameterFailure : public MockFailure
 8018130:	b580      	push	{r7, lr}
 8018132:	b082      	sub	sp, #8
 8018134:	af00      	add	r7, sp, #0
 8018136:	6078      	str	r0, [r7, #4]
 8018138:	4a05      	ldr	r2, [pc, #20]	; (8018150 <_ZN36MockUnexpectedOutputParameterFailureD1Ev+0x20>)
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	601a      	str	r2, [r3, #0]
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	4618      	mov	r0, r3
 8018142:	f7f0 fe97 	bl	8008e74 <_ZN11MockFailureD1Ev>
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	4618      	mov	r0, r3
 801814a:	3708      	adds	r7, #8
 801814c:	46bd      	mov	sp, r7
 801814e:	bd80      	pop	{r7, pc}
 8018150:	080260a4 	.word	0x080260a4

08018154 <_ZN36MockUnexpectedOutputParameterFailureD0Ev>:
 8018154:	b580      	push	{r7, lr}
 8018156:	b082      	sub	sp, #8
 8018158:	af00      	add	r7, sp, #0
 801815a:	6078      	str	r0, [r7, #4]
 801815c:	6878      	ldr	r0, [r7, #4]
 801815e:	f7ff ffe7 	bl	8018130 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 8018162:	2134      	movs	r1, #52	; 0x34
 8018164:	6878      	ldr	r0, [r7, #4]
 8018166:	f7f0 fa53 	bl	8008610 <_ZdlPvj>
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	4618      	mov	r0, r3
 801816e:	3708      	adds	r7, #8
 8018170:	46bd      	mov	sp, r7
 8018172:	bd80      	pop	{r7, pc}

08018174 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>:
class MockNoWayToCompareCustomTypeFailure : public MockFailure
 8018174:	b580      	push	{r7, lr}
 8018176:	b082      	sub	sp, #8
 8018178:	af00      	add	r7, sp, #0
 801817a:	6078      	str	r0, [r7, #4]
 801817c:	4a05      	ldr	r2, [pc, #20]	; (8018194 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev+0x20>)
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	601a      	str	r2, [r3, #0]
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	4618      	mov	r0, r3
 8018186:	f7f0 fe75 	bl	8008e74 <_ZN11MockFailureD1Ev>
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	4618      	mov	r0, r3
 801818e:	3708      	adds	r7, #8
 8018190:	46bd      	mov	sp, r7
 8018192:	bd80      	pop	{r7, pc}
 8018194:	0802604c 	.word	0x0802604c

08018198 <_ZN35MockNoWayToCompareCustomTypeFailureD0Ev>:
 8018198:	b580      	push	{r7, lr}
 801819a:	b082      	sub	sp, #8
 801819c:	af00      	add	r7, sp, #0
 801819e:	6078      	str	r0, [r7, #4]
 80181a0:	6878      	ldr	r0, [r7, #4]
 80181a2:	f7ff ffe7 	bl	8018174 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 80181a6:	2134      	movs	r1, #52	; 0x34
 80181a8:	6878      	ldr	r0, [r7, #4]
 80181aa:	f7f0 fa31 	bl	8008610 <_ZdlPvj>
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	4618      	mov	r0, r3
 80181b2:	3708      	adds	r7, #8
 80181b4:	46bd      	mov	sp, r7
 80181b6:	bd80      	pop	{r7, pc}

080181b8 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>:
class MockExpectedParameterDidntHappenFailure : public MockFailure
 80181b8:	b580      	push	{r7, lr}
 80181ba:	b082      	sub	sp, #8
 80181bc:	af00      	add	r7, sp, #0
 80181be:	6078      	str	r0, [r7, #4]
 80181c0:	4a05      	ldr	r2, [pc, #20]	; (80181d8 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev+0x20>)
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	601a      	str	r2, [r3, #0]
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	4618      	mov	r0, r3
 80181ca:	f7f0 fe53 	bl	8008e74 <_ZN11MockFailureD1Ev>
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	4618      	mov	r0, r3
 80181d2:	3708      	adds	r7, #8
 80181d4:	46bd      	mov	sp, r7
 80181d6:	bd80      	pop	{r7, pc}
 80181d8:	08026078 	.word	0x08026078

080181dc <_ZN39MockExpectedParameterDidntHappenFailureD0Ev>:
 80181dc:	b580      	push	{r7, lr}
 80181de:	b082      	sub	sp, #8
 80181e0:	af00      	add	r7, sp, #0
 80181e2:	6078      	str	r0, [r7, #4]
 80181e4:	6878      	ldr	r0, [r7, #4]
 80181e6:	f7ff ffe7 	bl	80181b8 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 80181ea:	2134      	movs	r1, #52	; 0x34
 80181ec:	6878      	ldr	r0, [r7, #4]
 80181ee:	f7f0 fa0f 	bl	8008610 <_ZdlPvj>
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	4618      	mov	r0, r3
 80181f6:	3708      	adds	r7, #8
 80181f8:	46bd      	mov	sp, r7
 80181fa:	bd80      	pop	{r7, pc}

080181fc <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>:
{
public:
    MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* expected, const MockExpectedCallsList& expectations);
};

class MockExpectedObjectDidntHappenFailure : public MockFailure
 80181fc:	b580      	push	{r7, lr}
 80181fe:	b082      	sub	sp, #8
 8018200:	af00      	add	r7, sp, #0
 8018202:	6078      	str	r0, [r7, #4]
 8018204:	4a05      	ldr	r2, [pc, #20]	; (801821c <_ZN36MockExpectedObjectDidntHappenFailureD1Ev+0x20>)
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	601a      	str	r2, [r3, #0]
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	4618      	mov	r0, r3
 801820e:	f7f0 fe31 	bl	8008e74 <_ZN11MockFailureD1Ev>
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	4618      	mov	r0, r3
 8018216:	3708      	adds	r7, #8
 8018218:	46bd      	mov	sp, r7
 801821a:	bd80      	pop	{r7, pc}
 801821c:	08025fc8 	.word	0x08025fc8

08018220 <_ZN36MockExpectedObjectDidntHappenFailureD0Ev>:
 8018220:	b580      	push	{r7, lr}
 8018222:	b082      	sub	sp, #8
 8018224:	af00      	add	r7, sp, #0
 8018226:	6078      	str	r0, [r7, #4]
 8018228:	6878      	ldr	r0, [r7, #4]
 801822a:	f7ff ffe7 	bl	80181fc <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 801822e:	2134      	movs	r1, #52	; 0x34
 8018230:	6878      	ldr	r0, [r7, #4]
 8018232:	f7f0 f9ed 	bl	8008610 <_ZdlPvj>
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	4618      	mov	r0, r3
 801823a:	3708      	adds	r7, #8
 801823c:	46bd      	mov	sp, r7
 801823e:	bd80      	pop	{r7, pc}

08018240 <_ZN27MockUnexpectedObjectFailureD1Ev>:
class MockUnexpectedObjectFailure : public MockFailure
 8018240:	b580      	push	{r7, lr}
 8018242:	b082      	sub	sp, #8
 8018244:	af00      	add	r7, sp, #0
 8018246:	6078      	str	r0, [r7, #4]
 8018248:	4a05      	ldr	r2, [pc, #20]	; (8018260 <_ZN27MockUnexpectedObjectFailureD1Ev+0x20>)
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	601a      	str	r2, [r3, #0]
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	4618      	mov	r0, r3
 8018252:	f7f0 fe0f 	bl	8008e74 <_ZN11MockFailureD1Ev>
 8018256:	687b      	ldr	r3, [r7, #4]
 8018258:	4618      	mov	r0, r3
 801825a:	3708      	adds	r7, #8
 801825c:	46bd      	mov	sp, r7
 801825e:	bd80      	pop	{r7, pc}
 8018260:	08025ff4 	.word	0x08025ff4

08018264 <_ZN27MockUnexpectedObjectFailureD0Ev>:
 8018264:	b580      	push	{r7, lr}
 8018266:	b082      	sub	sp, #8
 8018268:	af00      	add	r7, sp, #0
 801826a:	6078      	str	r0, [r7, #4]
 801826c:	6878      	ldr	r0, [r7, #4]
 801826e:	f7ff ffe7 	bl	8018240 <_ZN27MockUnexpectedObjectFailureD1Ev>
 8018272:	2134      	movs	r1, #52	; 0x34
 8018274:	6878      	ldr	r0, [r7, #4]
 8018276:	f7f0 f9cb 	bl	8008610 <_ZdlPvj>
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	4618      	mov	r0, r3
 801827e:	3708      	adds	r7, #8
 8018280:	46bd      	mov	sp, r7
 8018282:	bd80      	pop	{r7, pc}

08018284 <_ZN23MockCheckedExpectedCall13withCallOrderEj>:
    MockCheckedExpectedCall();
    MockCheckedExpectedCall(unsigned int numCalls);
    virtual ~MockCheckedExpectedCall() _destructor_override;

    virtual MockExpectedCall& withName(const SimpleString& name) _override;
    virtual MockExpectedCall& withCallOrder(unsigned int callOrder) _override { return withCallOrder(callOrder, callOrder); }
 8018284:	b580      	push	{r7, lr}
 8018286:	b082      	sub	sp, #8
 8018288:	af00      	add	r7, sp, #0
 801828a:	6078      	str	r0, [r7, #4]
 801828c:	6039      	str	r1, [r7, #0]
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	681b      	ldr	r3, [r3, #0]
 8018292:	3310      	adds	r3, #16
 8018294:	681b      	ldr	r3, [r3, #0]
 8018296:	683a      	ldr	r2, [r7, #0]
 8018298:	6839      	ldr	r1, [r7, #0]
 801829a:	6878      	ldr	r0, [r7, #4]
 801829c:	4798      	blx	r3
 801829e:	4603      	mov	r3, r0
 80182a0:	4618      	mov	r0, r3
 80182a2:	3708      	adds	r7, #8
 80182a4:	46bd      	mov	sp, r7
 80182a6:	bd80      	pop	{r7, pc}

080182a8 <_ZN23MockIgnoredExpectedCall8withNameERK12SimpleString>:

class MockIgnoredExpectedCall: public MockExpectedCall
{
public:

    virtual MockExpectedCall& withName(const SimpleString&) _override { return *this;}
 80182a8:	b480      	push	{r7}
 80182aa:	b083      	sub	sp, #12
 80182ac:	af00      	add	r7, sp, #0
 80182ae:	6078      	str	r0, [r7, #4]
 80182b0:	6039      	str	r1, [r7, #0]
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	4618      	mov	r0, r3
 80182b6:	370c      	adds	r7, #12
 80182b8:	46bd      	mov	sp, r7
 80182ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182be:	4770      	bx	lr

080182c0 <_ZN23MockIgnoredExpectedCall13withCallOrderEj>:
    virtual MockExpectedCall& withCallOrder(unsigned int) _override { return *this; }
 80182c0:	b480      	push	{r7}
 80182c2:	b083      	sub	sp, #12
 80182c4:	af00      	add	r7, sp, #0
 80182c6:	6078      	str	r0, [r7, #4]
 80182c8:	6039      	str	r1, [r7, #0]
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	4618      	mov	r0, r3
 80182ce:	370c      	adds	r7, #12
 80182d0:	46bd      	mov	sp, r7
 80182d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182d6:	4770      	bx	lr

080182d8 <_ZN23MockIgnoredExpectedCall13withCallOrderEjj>:
    virtual MockExpectedCall& withCallOrder(unsigned int, unsigned int) _override { return *this; }
 80182d8:	b480      	push	{r7}
 80182da:	b085      	sub	sp, #20
 80182dc:	af00      	add	r7, sp, #0
 80182de:	60f8      	str	r0, [r7, #12]
 80182e0:	60b9      	str	r1, [r7, #8]
 80182e2:	607a      	str	r2, [r7, #4]
 80182e4:	68fb      	ldr	r3, [r7, #12]
 80182e6:	4618      	mov	r0, r3
 80182e8:	3714      	adds	r7, #20
 80182ea:	46bd      	mov	sp, r7
 80182ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182f0:	4770      	bx	lr

080182f2 <_ZN23MockIgnoredExpectedCall17withBoolParameterERK12SimpleStringb>:
    virtual MockExpectedCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 80182f2:	b480      	push	{r7}
 80182f4:	b085      	sub	sp, #20
 80182f6:	af00      	add	r7, sp, #0
 80182f8:	60f8      	str	r0, [r7, #12]
 80182fa:	60b9      	str	r1, [r7, #8]
 80182fc:	4613      	mov	r3, r2
 80182fe:	71fb      	strb	r3, [r7, #7]
 8018300:	68fb      	ldr	r3, [r7, #12]
 8018302:	4618      	mov	r0, r3
 8018304:	3714      	adds	r7, #20
 8018306:	46bd      	mov	sp, r7
 8018308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801830c:	4770      	bx	lr

0801830e <_ZN23MockIgnoredExpectedCall16withIntParameterERK12SimpleStringi>:
    virtual MockExpectedCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 801830e:	b480      	push	{r7}
 8018310:	b085      	sub	sp, #20
 8018312:	af00      	add	r7, sp, #0
 8018314:	60f8      	str	r0, [r7, #12]
 8018316:	60b9      	str	r1, [r7, #8]
 8018318:	607a      	str	r2, [r7, #4]
 801831a:	68fb      	ldr	r3, [r7, #12]
 801831c:	4618      	mov	r0, r3
 801831e:	3714      	adds	r7, #20
 8018320:	46bd      	mov	sp, r7
 8018322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018326:	4770      	bx	lr

08018328 <_ZN23MockIgnoredExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockExpectedCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override{ return *this; }
 8018328:	b480      	push	{r7}
 801832a:	b085      	sub	sp, #20
 801832c:	af00      	add	r7, sp, #0
 801832e:	60f8      	str	r0, [r7, #12]
 8018330:	60b9      	str	r1, [r7, #8]
 8018332:	607a      	str	r2, [r7, #4]
 8018334:	68fb      	ldr	r3, [r7, #12]
 8018336:	4618      	mov	r0, r3
 8018338:	3714      	adds	r7, #20
 801833a:	46bd      	mov	sp, r7
 801833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018340:	4770      	bx	lr

08018342 <_ZN23MockIgnoredExpectedCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockExpectedCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 8018342:	b480      	push	{r7}
 8018344:	b085      	sub	sp, #20
 8018346:	af00      	add	r7, sp, #0
 8018348:	60f8      	str	r0, [r7, #12]
 801834a:	60b9      	str	r1, [r7, #8]
 801834c:	607a      	str	r2, [r7, #4]
 801834e:	68fb      	ldr	r3, [r7, #12]
 8018350:	4618      	mov	r0, r3
 8018352:	3714      	adds	r7, #20
 8018354:	46bd      	mov	sp, r7
 8018356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801835a:	4770      	bx	lr

0801835c <_ZN23MockIgnoredExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockExpectedCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 801835c:	b480      	push	{r7}
 801835e:	b085      	sub	sp, #20
 8018360:	af00      	add	r7, sp, #0
 8018362:	60f8      	str	r0, [r7, #12]
 8018364:	60b9      	str	r1, [r7, #8]
 8018366:	607a      	str	r2, [r7, #4]
 8018368:	68fb      	ldr	r3, [r7, #12]
 801836a:	4618      	mov	r0, r3
 801836c:	3714      	adds	r7, #20
 801836e:	46bd      	mov	sp, r7
 8018370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018374:	4770      	bx	lr

08018376 <_ZN23MockIgnoredExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockExpectedCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 8018376:	b480      	push	{r7}
 8018378:	b085      	sub	sp, #20
 801837a:	af00      	add	r7, sp, #0
 801837c:	60f8      	str	r0, [r7, #12]
 801837e:	60b9      	str	r1, [r7, #8]
 8018380:	4639      	mov	r1, r7
 8018382:	e881 000c 	stmia.w	r1, {r2, r3}
 8018386:	68fb      	ldr	r3, [r7, #12]
 8018388:	4618      	mov	r0, r3
 801838a:	3714      	adds	r7, #20
 801838c:	46bd      	mov	sp, r7
 801838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018392:	4770      	bx	lr

08018394 <_ZN23MockIgnoredExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockExpectedCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 8018394:	b480      	push	{r7}
 8018396:	b085      	sub	sp, #20
 8018398:	af00      	add	r7, sp, #0
 801839a:	60f8      	str	r0, [r7, #12]
 801839c:	60b9      	str	r1, [r7, #8]
 801839e:	4639      	mov	r1, r7
 80183a0:	e881 000c 	stmia.w	r1, {r2, r3}
 80183a4:	68fb      	ldr	r3, [r7, #12]
 80183a6:	4618      	mov	r0, r3
 80183a8:	3714      	adds	r7, #20
 80183aa:	46bd      	mov	sp, r7
 80183ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183b0:	4770      	bx	lr

080183b2 <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 80183b2:	b480      	push	{r7}
 80183b4:	b085      	sub	sp, #20
 80183b6:	af00      	add	r7, sp, #0
 80183b8:	60f8      	str	r0, [r7, #12]
 80183ba:	60b9      	str	r1, [r7, #8]
 80183bc:	ed87 0b00 	vstr	d0, [r7]
 80183c0:	68fb      	ldr	r3, [r7, #12]
 80183c2:	4618      	mov	r0, r3
 80183c4:	3714      	adds	r7, #20
 80183c6:	46bd      	mov	sp, r7
 80183c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183cc:	4770      	bx	lr

080183ce <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringdd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double, double) _override { return *this; }
 80183ce:	b480      	push	{r7}
 80183d0:	b087      	sub	sp, #28
 80183d2:	af00      	add	r7, sp, #0
 80183d4:	6178      	str	r0, [r7, #20]
 80183d6:	6139      	str	r1, [r7, #16]
 80183d8:	ed87 0b02 	vstr	d0, [r7, #8]
 80183dc:	ed87 1b00 	vstr	d1, [r7]
 80183e0:	697b      	ldr	r3, [r7, #20]
 80183e2:	4618      	mov	r0, r3
 80183e4:	371c      	adds	r7, #28
 80183e6:	46bd      	mov	sp, r7
 80183e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183ec:	4770      	bx	lr

080183ee <_ZN23MockIgnoredExpectedCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockExpectedCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 80183ee:	b480      	push	{r7}
 80183f0:	b085      	sub	sp, #20
 80183f2:	af00      	add	r7, sp, #0
 80183f4:	60f8      	str	r0, [r7, #12]
 80183f6:	60b9      	str	r1, [r7, #8]
 80183f8:	607a      	str	r2, [r7, #4]
 80183fa:	68fb      	ldr	r3, [r7, #12]
 80183fc:	4618      	mov	r0, r3
 80183fe:	3714      	adds	r7, #20
 8018400:	46bd      	mov	sp, r7
 8018402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018406:	4770      	bx	lr

08018408 <_ZN23MockIgnoredExpectedCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockExpectedCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 8018408:	b480      	push	{r7}
 801840a:	b085      	sub	sp, #20
 801840c:	af00      	add	r7, sp, #0
 801840e:	60f8      	str	r0, [r7, #12]
 8018410:	60b9      	str	r1, [r7, #8]
 8018412:	607a      	str	r2, [r7, #4]
 8018414:	68fb      	ldr	r3, [r7, #12]
 8018416:	4618      	mov	r0, r3
 8018418:	3714      	adds	r7, #20
 801841a:	46bd      	mov	sp, r7
 801841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018420:	4770      	bx	lr

08018422 <_ZN23MockIgnoredExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockExpectedCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 8018422:	b480      	push	{r7}
 8018424:	b085      	sub	sp, #20
 8018426:	af00      	add	r7, sp, #0
 8018428:	60f8      	str	r0, [r7, #12]
 801842a:	60b9      	str	r1, [r7, #8]
 801842c:	607a      	str	r2, [r7, #4]
 801842e:	68fb      	ldr	r3, [r7, #12]
 8018430:	4618      	mov	r0, r3
 8018432:	3714      	adds	r7, #20
 8018434:	46bd      	mov	sp, r7
 8018436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801843a:	4770      	bx	lr

0801843c <_ZN23MockIgnoredExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockExpectedCall& withFunctionPointerParameter(const SimpleString& , void(*)()) _override { return *this; }
 801843c:	b480      	push	{r7}
 801843e:	b085      	sub	sp, #20
 8018440:	af00      	add	r7, sp, #0
 8018442:	60f8      	str	r0, [r7, #12]
 8018444:	60b9      	str	r1, [r7, #8]
 8018446:	607a      	str	r2, [r7, #4]
 8018448:	68fb      	ldr	r3, [r7, #12]
 801844a:	4618      	mov	r0, r3
 801844c:	3714      	adds	r7, #20
 801844e:	46bd      	mov	sp, r7
 8018450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018454:	4770      	bx	lr

08018456 <_ZN23MockIgnoredExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockExpectedCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override { return *this; }
 8018456:	b480      	push	{r7}
 8018458:	b085      	sub	sp, #20
 801845a:	af00      	add	r7, sp, #0
 801845c:	60f8      	str	r0, [r7, #12]
 801845e:	60b9      	str	r1, [r7, #8]
 8018460:	607a      	str	r2, [r7, #4]
 8018462:	603b      	str	r3, [r7, #0]
 8018464:	68fb      	ldr	r3, [r7, #12]
 8018466:	4618      	mov	r0, r3
 8018468:	3714      	adds	r7, #20
 801846a:	46bd      	mov	sp, r7
 801846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018470:	4770      	bx	lr

08018472 <_ZN23MockIgnoredExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 8018472:	b480      	push	{r7}
 8018474:	b085      	sub	sp, #20
 8018476:	af00      	add	r7, sp, #0
 8018478:	60f8      	str	r0, [r7, #12]
 801847a:	60b9      	str	r1, [r7, #8]
 801847c:	607a      	str	r2, [r7, #4]
 801847e:	603b      	str	r3, [r7, #0]
 8018480:	68fb      	ldr	r3, [r7, #12]
 8018482:	4618      	mov	r0, r3
 8018484:	3714      	adds	r7, #20
 8018486:	46bd      	mov	sp, r7
 8018488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801848c:	4770      	bx	lr

0801848e <_ZN23MockIgnoredExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:
    virtual MockExpectedCall& withOutputParameterReturning(const SimpleString&, const void*, size_t) _override { return *this; }
 801848e:	b480      	push	{r7}
 8018490:	b085      	sub	sp, #20
 8018492:	af00      	add	r7, sp, #0
 8018494:	60f8      	str	r0, [r7, #12]
 8018496:	60b9      	str	r1, [r7, #8]
 8018498:	607a      	str	r2, [r7, #4]
 801849a:	603b      	str	r3, [r7, #0]
 801849c:	68fb      	ldr	r3, [r7, #12]
 801849e:	4618      	mov	r0, r3
 80184a0:	3714      	adds	r7, #20
 80184a2:	46bd      	mov	sp, r7
 80184a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184a8:	4770      	bx	lr

080184aa <_ZN23MockIgnoredExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withOutputParameterOfTypeReturning(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 80184aa:	b480      	push	{r7}
 80184ac:	b085      	sub	sp, #20
 80184ae:	af00      	add	r7, sp, #0
 80184b0:	60f8      	str	r0, [r7, #12]
 80184b2:	60b9      	str	r1, [r7, #8]
 80184b4:	607a      	str	r2, [r7, #4]
 80184b6:	603b      	str	r3, [r7, #0]
 80184b8:	68fb      	ldr	r3, [r7, #12]
 80184ba:	4618      	mov	r0, r3
 80184bc:	3714      	adds	r7, #20
 80184be:	46bd      	mov	sp, r7
 80184c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184c4:	4770      	bx	lr

080184c6 <_ZN23MockIgnoredExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:
    virtual MockExpectedCall& withUnmodifiedOutputParameter(const SimpleString&) _override { return *this; }
 80184c6:	b480      	push	{r7}
 80184c8:	b083      	sub	sp, #12
 80184ca:	af00      	add	r7, sp, #0
 80184cc:	6078      	str	r0, [r7, #4]
 80184ce:	6039      	str	r1, [r7, #0]
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	4618      	mov	r0, r3
 80184d4:	370c      	adds	r7, #12
 80184d6:	46bd      	mov	sp, r7
 80184d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184dc:	4770      	bx	lr

080184de <_ZN23MockIgnoredExpectedCall21ignoreOtherParametersEv>:
    virtual MockExpectedCall& ignoreOtherParameters() _override { return *this;}
 80184de:	b480      	push	{r7}
 80184e0:	b083      	sub	sp, #12
 80184e2:	af00      	add	r7, sp, #0
 80184e4:	6078      	str	r0, [r7, #4]
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	4618      	mov	r0, r3
 80184ea:	370c      	adds	r7, #12
 80184ec:	46bd      	mov	sp, r7
 80184ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184f2:	4770      	bx	lr

080184f4 <_ZN23MockIgnoredExpectedCall14andReturnValueEb>:

    virtual MockExpectedCall& andReturnValue(bool) _override { return *this; }
 80184f4:	b480      	push	{r7}
 80184f6:	b083      	sub	sp, #12
 80184f8:	af00      	add	r7, sp, #0
 80184fa:	6078      	str	r0, [r7, #4]
 80184fc:	460b      	mov	r3, r1
 80184fe:	70fb      	strb	r3, [r7, #3]
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	4618      	mov	r0, r3
 8018504:	370c      	adds	r7, #12
 8018506:	46bd      	mov	sp, r7
 8018508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801850c:	4770      	bx	lr

0801850e <_ZN23MockIgnoredExpectedCall14andReturnValueEi>:
    virtual MockExpectedCall& andReturnValue(int) _override { return *this; }
 801850e:	b480      	push	{r7}
 8018510:	b083      	sub	sp, #12
 8018512:	af00      	add	r7, sp, #0
 8018514:	6078      	str	r0, [r7, #4]
 8018516:	6039      	str	r1, [r7, #0]
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	4618      	mov	r0, r3
 801851c:	370c      	adds	r7, #12
 801851e:	46bd      	mov	sp, r7
 8018520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018524:	4770      	bx	lr

08018526 <_ZN23MockIgnoredExpectedCall14andReturnValueEj>:
    virtual MockExpectedCall& andReturnValue(unsigned int) _override { return *this; }
 8018526:	b480      	push	{r7}
 8018528:	b083      	sub	sp, #12
 801852a:	af00      	add	r7, sp, #0
 801852c:	6078      	str	r0, [r7, #4]
 801852e:	6039      	str	r1, [r7, #0]
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	4618      	mov	r0, r3
 8018534:	370c      	adds	r7, #12
 8018536:	46bd      	mov	sp, r7
 8018538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801853c:	4770      	bx	lr

0801853e <_ZN23MockIgnoredExpectedCall14andReturnValueEl>:
    virtual MockExpectedCall& andReturnValue(long int) _override { return *this; }
 801853e:	b480      	push	{r7}
 8018540:	b083      	sub	sp, #12
 8018542:	af00      	add	r7, sp, #0
 8018544:	6078      	str	r0, [r7, #4]
 8018546:	6039      	str	r1, [r7, #0]
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	4618      	mov	r0, r3
 801854c:	370c      	adds	r7, #12
 801854e:	46bd      	mov	sp, r7
 8018550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018554:	4770      	bx	lr

08018556 <_ZN23MockIgnoredExpectedCall14andReturnValueEm>:
    virtual MockExpectedCall& andReturnValue(unsigned long int) _override { return *this; }
 8018556:	b480      	push	{r7}
 8018558:	b083      	sub	sp, #12
 801855a:	af00      	add	r7, sp, #0
 801855c:	6078      	str	r0, [r7, #4]
 801855e:	6039      	str	r1, [r7, #0]
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	4618      	mov	r0, r3
 8018564:	370c      	adds	r7, #12
 8018566:	46bd      	mov	sp, r7
 8018568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801856c:	4770      	bx	lr

0801856e <_ZN23MockIgnoredExpectedCall14andReturnValueE17cpputest_longlong>:
    virtual MockExpectedCall& andReturnValue(cpputest_longlong) _override { return *this; }
 801856e:	b480      	push	{r7}
 8018570:	b085      	sub	sp, #20
 8018572:	af00      	add	r7, sp, #0
 8018574:	60f8      	str	r0, [r7, #12]
 8018576:	1d3b      	adds	r3, r7, #4
 8018578:	e883 0006 	stmia.w	r3, {r1, r2}
 801857c:	68fb      	ldr	r3, [r7, #12]
 801857e:	4618      	mov	r0, r3
 8018580:	3714      	adds	r7, #20
 8018582:	46bd      	mov	sp, r7
 8018584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018588:	4770      	bx	lr

0801858a <_ZN23MockIgnoredExpectedCall14andReturnValueE18cpputest_ulonglong>:
    virtual MockExpectedCall& andReturnValue(cpputest_ulonglong) _override { return *this; }
 801858a:	b480      	push	{r7}
 801858c:	b085      	sub	sp, #20
 801858e:	af00      	add	r7, sp, #0
 8018590:	60f8      	str	r0, [r7, #12]
 8018592:	1d3b      	adds	r3, r7, #4
 8018594:	e883 0006 	stmia.w	r3, {r1, r2}
 8018598:	68fb      	ldr	r3, [r7, #12]
 801859a:	4618      	mov	r0, r3
 801859c:	3714      	adds	r7, #20
 801859e:	46bd      	mov	sp, r7
 80185a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185a4:	4770      	bx	lr

080185a6 <_ZN23MockIgnoredExpectedCall14andReturnValueEd>:
    virtual MockExpectedCall& andReturnValue(double) _override { return *this;}
 80185a6:	b480      	push	{r7}
 80185a8:	b085      	sub	sp, #20
 80185aa:	af00      	add	r7, sp, #0
 80185ac:	60f8      	str	r0, [r7, #12]
 80185ae:	ed87 0b00 	vstr	d0, [r7]
 80185b2:	68fb      	ldr	r3, [r7, #12]
 80185b4:	4618      	mov	r0, r3
 80185b6:	3714      	adds	r7, #20
 80185b8:	46bd      	mov	sp, r7
 80185ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185be:	4770      	bx	lr

080185c0 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKc>:
    virtual MockExpectedCall& andReturnValue(const char*) _override { return *this; }
 80185c0:	b480      	push	{r7}
 80185c2:	b083      	sub	sp, #12
 80185c4:	af00      	add	r7, sp, #0
 80185c6:	6078      	str	r0, [r7, #4]
 80185c8:	6039      	str	r1, [r7, #0]
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	4618      	mov	r0, r3
 80185ce:	370c      	adds	r7, #12
 80185d0:	46bd      	mov	sp, r7
 80185d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185d6:	4770      	bx	lr

080185d8 <_ZN23MockIgnoredExpectedCall14andReturnValueEPv>:
    virtual MockExpectedCall& andReturnValue(void*) _override { return *this; }
 80185d8:	b480      	push	{r7}
 80185da:	b083      	sub	sp, #12
 80185dc:	af00      	add	r7, sp, #0
 80185de:	6078      	str	r0, [r7, #4]
 80185e0:	6039      	str	r1, [r7, #0]
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	4618      	mov	r0, r3
 80185e6:	370c      	adds	r7, #12
 80185e8:	46bd      	mov	sp, r7
 80185ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185ee:	4770      	bx	lr

080185f0 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKv>:
    virtual MockExpectedCall& andReturnValue(const void*) _override { return *this; }
 80185f0:	b480      	push	{r7}
 80185f2:	b083      	sub	sp, #12
 80185f4:	af00      	add	r7, sp, #0
 80185f6:	6078      	str	r0, [r7, #4]
 80185f8:	6039      	str	r1, [r7, #0]
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	4618      	mov	r0, r3
 80185fe:	370c      	adds	r7, #12
 8018600:	46bd      	mov	sp, r7
 8018602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018606:	4770      	bx	lr

08018608 <_ZN23MockIgnoredExpectedCall14andReturnValueEPFvvE>:
    virtual MockExpectedCall& andReturnValue(void (*)()) _override { return *this; }
 8018608:	b480      	push	{r7}
 801860a:	b083      	sub	sp, #12
 801860c:	af00      	add	r7, sp, #0
 801860e:	6078      	str	r0, [r7, #4]
 8018610:	6039      	str	r1, [r7, #0]
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	4618      	mov	r0, r3
 8018616:	370c      	adds	r7, #12
 8018618:	46bd      	mov	sp, r7
 801861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801861e:	4770      	bx	lr

08018620 <_ZN23MockIgnoredExpectedCall8onObjectEPv>:

    virtual MockExpectedCall& onObject(void*) _override { return *this; }
 8018620:	b480      	push	{r7}
 8018622:	b083      	sub	sp, #12
 8018624:	af00      	add	r7, sp, #0
 8018626:	6078      	str	r0, [r7, #4]
 8018628:	6039      	str	r1, [r7, #0]
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	4618      	mov	r0, r3
 801862e:	370c      	adds	r7, #12
 8018630:	46bd      	mov	sp, r7
 8018632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018636:	4770      	bx	lr

08018638 <_ZN16MockExpectedCallC1Ev>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCall::MockExpectedCall()
 8018638:	b480      	push	{r7}
 801863a:	b083      	sub	sp, #12
 801863c:	af00      	add	r7, sp, #0
 801863e:	6078      	str	r0, [r7, #4]
 8018640:	4a04      	ldr	r2, [pc, #16]	; (8018654 <_ZN16MockExpectedCallC1Ev+0x1c>)
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	601a      	str	r2, [r3, #0]
{
}
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	4618      	mov	r0, r3
 801864a:	370c      	adds	r7, #12
 801864c:	46bd      	mov	sp, r7
 801864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018652:	4770      	bx	lr
 8018654:	080266cc 	.word	0x080266cc

08018658 <_ZN16MockExpectedCallD1Ev>:

MockExpectedCall::~MockExpectedCall()
 8018658:	b480      	push	{r7}
 801865a:	b083      	sub	sp, #12
 801865c:	af00      	add	r7, sp, #0
 801865e:	6078      	str	r0, [r7, #4]
 8018660:	4a04      	ldr	r2, [pc, #16]	; (8018674 <_ZN16MockExpectedCallD1Ev+0x1c>)
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	601a      	str	r2, [r3, #0]
{
}
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	4618      	mov	r0, r3
 801866a:	370c      	adds	r7, #12
 801866c:	46bd      	mov	sp, r7
 801866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018672:	4770      	bx	lr
 8018674:	080266cc 	.word	0x080266cc

08018678 <_Z10StringFromRK14MockNamedValue>:

SimpleString StringFrom(const MockNamedValue& parameter)
{
 8018678:	b580      	push	{r7, lr}
 801867a:	b082      	sub	sp, #8
 801867c:	af00      	add	r7, sp, #0
 801867e:	6078      	str	r0, [r7, #4]
 8018680:	6039      	str	r1, [r7, #0]
    return parameter.toString();
 8018682:	683b      	ldr	r3, [r7, #0]
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	3358      	adds	r3, #88	; 0x58
 8018688:	681b      	ldr	r3, [r3, #0]
 801868a:	687a      	ldr	r2, [r7, #4]
 801868c:	6839      	ldr	r1, [r7, #0]
 801868e:	4610      	mov	r0, r2
 8018690:	4798      	blx	r3
}
 8018692:	6878      	ldr	r0, [r7, #4]
 8018694:	3708      	adds	r7, #8
 8018696:	46bd      	mov	sp, r7
 8018698:	bd80      	pop	{r7, pc}

0801869a <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>:

void MockCheckedExpectedCall::setName(const SimpleString& name)
{
 801869a:	b580      	push	{r7, lr}
 801869c:	b082      	sub	sp, #8
 801869e:	af00      	add	r7, sp, #0
 80186a0:	6078      	str	r0, [r7, #4]
 80186a2:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	3304      	adds	r3, #4
 80186a8:	6839      	ldr	r1, [r7, #0]
 80186aa:	4618      	mov	r0, r3
 80186ac:	f7f2 fbcb 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
}
 80186b0:	bf00      	nop
 80186b2:	3708      	adds	r7, #8
 80186b4:	46bd      	mov	sp, r7
 80186b6:	bd80      	pop	{r7, pc}

080186b8 <_ZNK23MockCheckedExpectedCall7getNameEv>:

SimpleString MockCheckedExpectedCall::getName() const
{
 80186b8:	b580      	push	{r7, lr}
 80186ba:	b082      	sub	sp, #8
 80186bc:	af00      	add	r7, sp, #0
 80186be:	6078      	str	r0, [r7, #4]
 80186c0:	6039      	str	r1, [r7, #0]
    return functionName_;
 80186c2:	683b      	ldr	r3, [r7, #0]
 80186c4:	3304      	adds	r3, #4
 80186c6:	4619      	mov	r1, r3
 80186c8:	6878      	ldr	r0, [r7, #4]
 80186ca:	f7f2 fba4 	bl	800ae16 <_ZN12SimpleStringC1ERKS_>
}
 80186ce:	6878      	ldr	r0, [r7, #4]
 80186d0:	3708      	adds	r7, #8
 80186d2:	46bd      	mov	sp, r7
 80186d4:	bd80      	pop	{r7, pc}
	...

080186d8 <_ZN23MockCheckedExpectedCallC1Ej>:
{
    inputParameters_ = new MockNamedValueList();
    outputParameters_ = new MockNamedValueList();
}

MockCheckedExpectedCall::MockCheckedExpectedCall(unsigned int numCalls)
 80186d8:	b590      	push	{r4, r7, lr}
 80186da:	b085      	sub	sp, #20
 80186dc:	af00      	add	r7, sp, #0
 80186de:	6078      	str	r0, [r7, #4]
 80186e0:	6039      	str	r1, [r7, #0]
    : ignoreOtherParameters_(false), isActualCallMatchFinalized_(false),
      initialExpectedCallOrder_(NO_EXPECTED_CALL_ORDER), finalExpectedCallOrder_(NO_EXPECTED_CALL_ORDER),
      outOfOrder_(false), returnValue_(""), objectPtr_(NULLPTR), isSpecificObjectExpected_(false), wasPassedToObject_(true),
      actualCalls_(0), expectedCalls_(numCalls)
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	4618      	mov	r0, r3
 80186e6:	f7ff ffa7 	bl	8018638 <_ZN16MockExpectedCallC1Ev>
 80186ea:	4a2c      	ldr	r2, [pc, #176]	; (801879c <_ZN23MockCheckedExpectedCallC1Ej+0xc4>)
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	601a      	str	r2, [r3, #0]
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	3304      	adds	r3, #4
 80186f4:	492a      	ldr	r1, [pc, #168]	; (80187a0 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 80186f6:	4618      	mov	r0, r3
 80186f8:	f7f2 fb39 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80186fc:	687b      	ldr	r3, [r7, #4]
 80186fe:	2200      	movs	r2, #0
 8018700:	731a      	strb	r2, [r3, #12]
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	2200      	movs	r2, #0
 8018706:	735a      	strb	r2, [r3, #13]
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	2200      	movs	r2, #0
 801870c:	611a      	str	r2, [r3, #16]
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	2200      	movs	r2, #0
 8018712:	615a      	str	r2, [r3, #20]
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	2200      	movs	r2, #0
 8018718:	761a      	strb	r2, [r3, #24]
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8018720:	f107 0308 	add.w	r3, r7, #8
 8018724:	491e      	ldr	r1, [pc, #120]	; (80187a0 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 8018726:	4618      	mov	r0, r3
 8018728:	f7f2 fb21 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801872c:	f107 0308 	add.w	r3, r7, #8
 8018730:	4619      	mov	r1, r3
 8018732:	4620      	mov	r0, r4
 8018734:	f003 f840 	bl	801b7b8 <_ZN14MockNamedValueC1ERK12SimpleString>
 8018738:	f107 0308 	add.w	r3, r7, #8
 801873c:	4618      	mov	r0, r3
 801873e:	f7f2 fece 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	2200      	movs	r2, #0
 8018746:	661a      	str	r2, [r3, #96]	; 0x60
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	2200      	movs	r2, #0
 801874c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	2201      	movs	r2, #1
 8018754:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	2200      	movs	r2, #0
 801875c:	669a      	str	r2, [r3, #104]	; 0x68
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	683a      	ldr	r2, [r7, #0]
 8018762:	66da      	str	r2, [r3, #108]	; 0x6c
{
    inputParameters_ = new MockNamedValueList();
 8018764:	2246      	movs	r2, #70	; 0x46
 8018766:	490f      	ldr	r1, [pc, #60]	; (80187a4 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 8018768:	2004      	movs	r0, #4
 801876a:	f7ef ff3d 	bl	80085e8 <_ZnwjPKci>
 801876e:	4604      	mov	r4, r0
 8018770:	4620      	mov	r0, r4
 8018772:	f004 ff36 	bl	801d5e2 <_ZN18MockNamedValueListC1Ev>
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	61dc      	str	r4, [r3, #28]
    outputParameters_ = new MockNamedValueList();
 801877a:	2247      	movs	r2, #71	; 0x47
 801877c:	4909      	ldr	r1, [pc, #36]	; (80187a4 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 801877e:	2004      	movs	r0, #4
 8018780:	f7ef ff32 	bl	80085e8 <_ZnwjPKci>
 8018784:	4604      	mov	r4, r0
 8018786:	4620      	mov	r0, r4
 8018788:	f004 ff2b 	bl	801d5e2 <_ZN18MockNamedValueListC1Ev>
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	621c      	str	r4, [r3, #32]
}
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	4618      	mov	r0, r3
 8018794:	3714      	adds	r7, #20
 8018796:	46bd      	mov	sp, r7
 8018798:	bd90      	pop	{r4, r7, pc}
 801879a:	bf00      	nop
 801879c:	08026510 	.word	0x08026510
 80187a0:	08023dac 	.word	0x08023dac
 80187a4:	08023db0 	.word	0x08023db0

080187a8 <_ZN23MockCheckedExpectedCallD1Ev>:

MockCheckedExpectedCall::~MockCheckedExpectedCall()
 80187a8:	b580      	push	{r7, lr}
 80187aa:	b082      	sub	sp, #8
 80187ac:	af00      	add	r7, sp, #0
 80187ae:	6078      	str	r0, [r7, #4]
 80187b0:	4a17      	ldr	r2, [pc, #92]	; (8018810 <_ZN23MockCheckedExpectedCallD1Ev+0x68>)
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	601a      	str	r2, [r3, #0]
{
    inputParameters_->clear();
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	69db      	ldr	r3, [r3, #28]
 80187ba:	4618      	mov	r0, r3
 80187bc:	f004 ff1f 	bl	801d5fe <_ZN18MockNamedValueList5clearEv>
    delete inputParameters_;
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	69db      	ldr	r3, [r3, #28]
 80187c4:	2b00      	cmp	r3, #0
 80187c6:	d003      	beq.n	80187d0 <_ZN23MockCheckedExpectedCallD1Ev+0x28>
 80187c8:	2104      	movs	r1, #4
 80187ca:	4618      	mov	r0, r3
 80187cc:	f7ef ff20 	bl	8008610 <_ZdlPvj>
    outputParameters_->clear();
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	6a1b      	ldr	r3, [r3, #32]
 80187d4:	4618      	mov	r0, r3
 80187d6:	f004 ff12 	bl	801d5fe <_ZN18MockNamedValueList5clearEv>
    delete outputParameters_;
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	6a1b      	ldr	r3, [r3, #32]
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d003      	beq.n	80187ea <_ZN23MockCheckedExpectedCallD1Ev+0x42>
 80187e2:	2104      	movs	r1, #4
 80187e4:	4618      	mov	r0, r3
 80187e6:	f7ef ff13 	bl	8008610 <_ZdlPvj>
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 80187ea:	687b      	ldr	r3, [r7, #4]
 80187ec:	3328      	adds	r3, #40	; 0x28
 80187ee:	4618      	mov	r0, r3
 80187f0:	f003 f80c 	bl	801b80c <_ZN14MockNamedValueD1Ev>
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	3304      	adds	r3, #4
 80187f8:	4618      	mov	r0, r3
 80187fa:	f7f2 fe70 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	4618      	mov	r0, r3
 8018802:	f7ff ff29 	bl	8018658 <_ZN16MockExpectedCallD1Ev>
}
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	4618      	mov	r0, r3
 801880a:	3708      	adds	r7, #8
 801880c:	46bd      	mov	sp, r7
 801880e:	bd80      	pop	{r7, pc}
 8018810:	08026510 	.word	0x08026510

08018814 <_ZN23MockCheckedExpectedCallD0Ev>:
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 8018814:	b580      	push	{r7, lr}
 8018816:	b082      	sub	sp, #8
 8018818:	af00      	add	r7, sp, #0
 801881a:	6078      	str	r0, [r7, #4]
}
 801881c:	6878      	ldr	r0, [r7, #4]
 801881e:	f7ff ffc3 	bl	80187a8 <_ZN23MockCheckedExpectedCallD1Ev>
 8018822:	2170      	movs	r1, #112	; 0x70
 8018824:	6878      	ldr	r0, [r7, #4]
 8018826:	f7ef fef3 	bl	8008610 <_ZdlPvj>
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	4618      	mov	r0, r3
 801882e:	3708      	adds	r7, #8
 8018830:	46bd      	mov	sp, r7
 8018832:	bd80      	pop	{r7, pc}

08018834 <_ZN23MockCheckedExpectedCall8withNameERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withName(const SimpleString& name)
{
 8018834:	b580      	push	{r7, lr}
 8018836:	b082      	sub	sp, #8
 8018838:	af00      	add	r7, sp, #0
 801883a:	6078      	str	r0, [r7, #4]
 801883c:	6039      	str	r1, [r7, #0]
    setName(name);
 801883e:	6839      	ldr	r1, [r7, #0]
 8018840:	6878      	ldr	r0, [r7, #4]
 8018842:	f7ff ff2a 	bl	801869a <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>
    return *this;
 8018846:	687b      	ldr	r3, [r7, #4]
}
 8018848:	4618      	mov	r0, r3
 801884a:	3708      	adds	r7, #8
 801884c:	46bd      	mov	sp, r7
 801884e:	bd80      	pop	{r7, pc}

08018850 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb>:

MockExpectedCall& MockCheckedExpectedCall::withBoolParameter(const SimpleString& name, bool value)
{
 8018850:	b590      	push	{r4, r7, lr}
 8018852:	b087      	sub	sp, #28
 8018854:	af00      	add	r7, sp, #0
 8018856:	60f8      	str	r0, [r7, #12]
 8018858:	60b9      	str	r1, [r7, #8]
 801885a:	4613      	mov	r3, r2
 801885c:	71fb      	strb	r3, [r7, #7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801885e:	225a      	movs	r2, #90	; 0x5a
 8018860:	490e      	ldr	r1, [pc, #56]	; (801889c <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb+0x4c>)
 8018862:	2038      	movs	r0, #56	; 0x38
 8018864:	f7ef fec0 	bl	80085e8 <_ZnwjPKci>
 8018868:	4604      	mov	r4, r0
 801886a:	68b9      	ldr	r1, [r7, #8]
 801886c:	4620      	mov	r0, r4
 801886e:	f001 f851 	bl	8019914 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018872:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8018874:	68fb      	ldr	r3, [r7, #12]
 8018876:	69db      	ldr	r3, [r3, #28]
 8018878:	6979      	ldr	r1, [r7, #20]
 801887a:	4618      	mov	r0, r3
 801887c:	f004 fee2 	bl	801d644 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8018880:	697b      	ldr	r3, [r7, #20]
 8018882:	681b      	ldr	r3, [r3, #0]
 8018884:	3308      	adds	r3, #8
 8018886:	681b      	ldr	r3, [r3, #0]
 8018888:	79fa      	ldrb	r2, [r7, #7]
 801888a:	4611      	mov	r1, r2
 801888c:	6978      	ldr	r0, [r7, #20]
 801888e:	4798      	blx	r3
    return *this;
 8018890:	68fb      	ldr	r3, [r7, #12]
}
 8018892:	4618      	mov	r0, r3
 8018894:	371c      	adds	r7, #28
 8018896:	46bd      	mov	sp, r7
 8018898:	bd90      	pop	{r4, r7, pc}
 801889a:	bf00      	nop
 801889c:	08023db0 	.word	0x08023db0

080188a0 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 80188a0:	b590      	push	{r4, r7, lr}
 80188a2:	b087      	sub	sp, #28
 80188a4:	af00      	add	r7, sp, #0
 80188a6:	60f8      	str	r0, [r7, #12]
 80188a8:	60b9      	str	r1, [r7, #8]
 80188aa:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80188ac:	2262      	movs	r2, #98	; 0x62
 80188ae:	490e      	ldr	r1, [pc, #56]	; (80188e8 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj+0x48>)
 80188b0:	2038      	movs	r0, #56	; 0x38
 80188b2:	f7ef fe99 	bl	80085e8 <_ZnwjPKci>
 80188b6:	4604      	mov	r4, r0
 80188b8:	68b9      	ldr	r1, [r7, #8]
 80188ba:	4620      	mov	r0, r4
 80188bc:	f001 f82a 	bl	8019914 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80188c0:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80188c2:	68fb      	ldr	r3, [r7, #12]
 80188c4:	69db      	ldr	r3, [r3, #28]
 80188c6:	6979      	ldr	r1, [r7, #20]
 80188c8:	4618      	mov	r0, r3
 80188ca:	f004 febb 	bl	801d644 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 80188ce:	697b      	ldr	r3, [r7, #20]
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	3310      	adds	r3, #16
 80188d4:	681b      	ldr	r3, [r3, #0]
 80188d6:	6879      	ldr	r1, [r7, #4]
 80188d8:	6978      	ldr	r0, [r7, #20]
 80188da:	4798      	blx	r3
    return *this;
 80188dc:	68fb      	ldr	r3, [r7, #12]
}
 80188de:	4618      	mov	r0, r3
 80188e0:	371c      	adds	r7, #28
 80188e2:	46bd      	mov	sp, r7
 80188e4:	bd90      	pop	{r4, r7, pc}
 80188e6:	bf00      	nop
 80188e8:	08023db0 	.word	0x08023db0

080188ec <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi>:

MockExpectedCall& MockCheckedExpectedCall::withIntParameter(const SimpleString& name, int value)
{
 80188ec:	b590      	push	{r4, r7, lr}
 80188ee:	b087      	sub	sp, #28
 80188f0:	af00      	add	r7, sp, #0
 80188f2:	60f8      	str	r0, [r7, #12]
 80188f4:	60b9      	str	r1, [r7, #8]
 80188f6:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80188f8:	226a      	movs	r2, #106	; 0x6a
 80188fa:	490e      	ldr	r1, [pc, #56]	; (8018934 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi+0x48>)
 80188fc:	2038      	movs	r0, #56	; 0x38
 80188fe:	f7ef fe73 	bl	80085e8 <_ZnwjPKci>
 8018902:	4604      	mov	r4, r0
 8018904:	68b9      	ldr	r1, [r7, #8]
 8018906:	4620      	mov	r0, r4
 8018908:	f001 f804 	bl	8019914 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801890c:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801890e:	68fb      	ldr	r3, [r7, #12]
 8018910:	69db      	ldr	r3, [r3, #28]
 8018912:	6979      	ldr	r1, [r7, #20]
 8018914:	4618      	mov	r0, r3
 8018916:	f004 fe95 	bl	801d644 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801891a:	697b      	ldr	r3, [r7, #20]
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	330c      	adds	r3, #12
 8018920:	681b      	ldr	r3, [r3, #0]
 8018922:	6879      	ldr	r1, [r7, #4]
 8018924:	6978      	ldr	r0, [r7, #20]
 8018926:	4798      	blx	r3
    return *this;
 8018928:	68fb      	ldr	r3, [r7, #12]
}
 801892a:	4618      	mov	r0, r3
 801892c:	371c      	adds	r7, #28
 801892e:	46bd      	mov	sp, r7
 8018930:	bd90      	pop	{r4, r7, pc}
 8018932:	bf00      	nop
 8018934:	08023db0 	.word	0x08023db0

08018938 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl>:

MockExpectedCall& MockCheckedExpectedCall::withLongIntParameter(const SimpleString& name, long int value)
{
 8018938:	b590      	push	{r4, r7, lr}
 801893a:	b087      	sub	sp, #28
 801893c:	af00      	add	r7, sp, #0
 801893e:	60f8      	str	r0, [r7, #12]
 8018940:	60b9      	str	r1, [r7, #8]
 8018942:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018944:	2272      	movs	r2, #114	; 0x72
 8018946:	490e      	ldr	r1, [pc, #56]	; (8018980 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl+0x48>)
 8018948:	2038      	movs	r0, #56	; 0x38
 801894a:	f7ef fe4d 	bl	80085e8 <_ZnwjPKci>
 801894e:	4604      	mov	r4, r0
 8018950:	68b9      	ldr	r1, [r7, #8]
 8018952:	4620      	mov	r0, r4
 8018954:	f000 ffde 	bl	8019914 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018958:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801895a:	68fb      	ldr	r3, [r7, #12]
 801895c:	69db      	ldr	r3, [r3, #28]
 801895e:	6979      	ldr	r1, [r7, #20]
 8018960:	4618      	mov	r0, r3
 8018962:	f004 fe6f 	bl	801d644 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8018966:	697b      	ldr	r3, [r7, #20]
 8018968:	681b      	ldr	r3, [r3, #0]
 801896a:	3314      	adds	r3, #20
 801896c:	681b      	ldr	r3, [r3, #0]
 801896e:	6879      	ldr	r1, [r7, #4]
 8018970:	6978      	ldr	r0, [r7, #20]
 8018972:	4798      	blx	r3
    return *this;
 8018974:	68fb      	ldr	r3, [r7, #12]
}
 8018976:	4618      	mov	r0, r3
 8018978:	371c      	adds	r7, #28
 801897a:	46bd      	mov	sp, r7
 801897c:	bd90      	pop	{r4, r7, pc}
 801897e:	bf00      	nop
 8018980:	08023db0 	.word	0x08023db0

08018984 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8018984:	b590      	push	{r4, r7, lr}
 8018986:	b087      	sub	sp, #28
 8018988:	af00      	add	r7, sp, #0
 801898a:	60f8      	str	r0, [r7, #12]
 801898c:	60b9      	str	r1, [r7, #8]
 801898e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018990:	227a      	movs	r2, #122	; 0x7a
 8018992:	490e      	ldr	r1, [pc, #56]	; (80189cc <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm+0x48>)
 8018994:	2038      	movs	r0, #56	; 0x38
 8018996:	f7ef fe27 	bl	80085e8 <_ZnwjPKci>
 801899a:	4604      	mov	r4, r0
 801899c:	68b9      	ldr	r1, [r7, #8]
 801899e:	4620      	mov	r0, r4
 80189a0:	f000 ffb8 	bl	8019914 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80189a4:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80189a6:	68fb      	ldr	r3, [r7, #12]
 80189a8:	69db      	ldr	r3, [r3, #28]
 80189aa:	6979      	ldr	r1, [r7, #20]
 80189ac:	4618      	mov	r0, r3
 80189ae:	f004 fe49 	bl	801d644 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 80189b2:	697b      	ldr	r3, [r7, #20]
 80189b4:	681b      	ldr	r3, [r3, #0]
 80189b6:	3318      	adds	r3, #24
 80189b8:	681b      	ldr	r3, [r3, #0]
 80189ba:	6879      	ldr	r1, [r7, #4]
 80189bc:	6978      	ldr	r0, [r7, #20]
 80189be:	4798      	blx	r3
    return *this;
 80189c0:	68fb      	ldr	r3, [r7, #12]
}
 80189c2:	4618      	mov	r0, r3
 80189c4:	371c      	adds	r7, #28
 80189c6:	46bd      	mov	sp, r7
 80189c8:	bd90      	pop	{r4, r7, pc}
 80189ca:	bf00      	nop
 80189cc:	08023db0 	.word	0x08023db0

080189d0 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 80189d0:	b5b0      	push	{r4, r5, r7, lr}
 80189d2:	b086      	sub	sp, #24
 80189d4:	af02      	add	r7, sp, #8
 80189d6:	60f8      	str	r0, [r7, #12]
 80189d8:	60b9      	str	r1, [r7, #8]
 80189da:	4639      	mov	r1, r7
 80189dc:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 80189e0:	f7f9 fda8 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 80189e4:	4604      	mov	r4, r0
 80189e6:	6823      	ldr	r3, [r4, #0]
 80189e8:	3368      	adds	r3, #104	; 0x68
 80189ea:	681d      	ldr	r5, [r3, #0]
 80189ec:	f7f9 fdb2 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80189f0:	4603      	mov	r3, r0
 80189f2:	9300      	str	r3, [sp, #0]
 80189f4:	2396      	movs	r3, #150	; 0x96
 80189f6:	4a04      	ldr	r2, [pc, #16]	; (8018a08 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x38>)
 80189f8:	4904      	ldr	r1, [pc, #16]	; (8018a0c <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 80189fa:	4620      	mov	r0, r4
 80189fc:	47a8      	blx	r5
    return *this;
 80189fe:	68fb      	ldr	r3, [r7, #12]
}
 8018a00:	4618      	mov	r0, r3
 8018a02:	3710      	adds	r7, #16
 8018a04:	46bd      	mov	sp, r7
 8018a06:	bdb0      	pop	{r4, r5, r7, pc}
 8018a08:	08023db0 	.word	0x08023db0
 8018a0c:	08023dcc 	.word	0x08023dcc

08018a10 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8018a10:	b5b0      	push	{r4, r5, r7, lr}
 8018a12:	b086      	sub	sp, #24
 8018a14:	af02      	add	r7, sp, #8
 8018a16:	60f8      	str	r0, [r7, #12]
 8018a18:	60b9      	str	r1, [r7, #8]
 8018a1a:	4639      	mov	r1, r7
 8018a1c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8018a20:	f7f9 fd88 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 8018a24:	4604      	mov	r4, r0
 8018a26:	6823      	ldr	r3, [r4, #0]
 8018a28:	3368      	adds	r3, #104	; 0x68
 8018a2a:	681d      	ldr	r5, [r3, #0]
 8018a2c:	f7f9 fd92 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018a30:	4603      	mov	r3, r0
 8018a32:	9300      	str	r3, [sp, #0]
 8018a34:	239c      	movs	r3, #156	; 0x9c
 8018a36:	4a04      	ldr	r2, [pc, #16]	; (8018a48 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x38>)
 8018a38:	4904      	ldr	r1, [pc, #16]	; (8018a4c <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 8018a3a:	4620      	mov	r0, r4
 8018a3c:	47a8      	blx	r5
    return *this;
 8018a3e:	68fb      	ldr	r3, [r7, #12]
}
 8018a40:	4618      	mov	r0, r3
 8018a42:	3710      	adds	r7, #16
 8018a44:	46bd      	mov	sp, r7
 8018a46:	bdb0      	pop	{r4, r5, r7, pc}
 8018a48:	08023db0 	.word	0x08023db0
 8018a4c:	08023dec 	.word	0x08023dec

08018a50 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value)
{
 8018a50:	b590      	push	{r4, r7, lr}
 8018a52:	b087      	sub	sp, #28
 8018a54:	af00      	add	r7, sp, #0
 8018a56:	60f8      	str	r0, [r7, #12]
 8018a58:	60b9      	str	r1, [r7, #8]
 8018a5a:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018a5e:	22a4      	movs	r2, #164	; 0xa4
 8018a60:	490e      	ldr	r1, [pc, #56]	; (8018a9c <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd+0x4c>)
 8018a62:	2038      	movs	r0, #56	; 0x38
 8018a64:	f7ef fdc0 	bl	80085e8 <_ZnwjPKci>
 8018a68:	4604      	mov	r4, r0
 8018a6a:	68b9      	ldr	r1, [r7, #8]
 8018a6c:	4620      	mov	r0, r4
 8018a6e:	f000 ff51 	bl	8019914 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018a72:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8018a74:	68fb      	ldr	r3, [r7, #12]
 8018a76:	69db      	ldr	r3, [r3, #28]
 8018a78:	6979      	ldr	r1, [r7, #20]
 8018a7a:	4618      	mov	r0, r3
 8018a7c:	f004 fde2 	bl	801d644 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8018a80:	697b      	ldr	r3, [r7, #20]
 8018a82:	681b      	ldr	r3, [r3, #0]
 8018a84:	3324      	adds	r3, #36	; 0x24
 8018a86:	681b      	ldr	r3, [r3, #0]
 8018a88:	ed97 0b00 	vldr	d0, [r7]
 8018a8c:	6978      	ldr	r0, [r7, #20]
 8018a8e:	4798      	blx	r3
    return *this;
 8018a90:	68fb      	ldr	r3, [r7, #12]
}
 8018a92:	4618      	mov	r0, r3
 8018a94:	371c      	adds	r7, #28
 8018a96:	46bd      	mov	sp, r7
 8018a98:	bd90      	pop	{r4, r7, pc}
 8018a9a:	bf00      	nop
 8018a9c:	08023db0 	.word	0x08023db0

08018aa0 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd>:

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value, double tolerance)
{
 8018aa0:	b590      	push	{r4, r7, lr}
 8018aa2:	b089      	sub	sp, #36	; 0x24
 8018aa4:	af00      	add	r7, sp, #0
 8018aa6:	6178      	str	r0, [r7, #20]
 8018aa8:	6139      	str	r1, [r7, #16]
 8018aaa:	ed87 0b02 	vstr	d0, [r7, #8]
 8018aae:	ed87 1b00 	vstr	d1, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018ab2:	22ac      	movs	r2, #172	; 0xac
 8018ab4:	490f      	ldr	r1, [pc, #60]	; (8018af4 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd+0x54>)
 8018ab6:	2038      	movs	r0, #56	; 0x38
 8018ab8:	f7ef fd96 	bl	80085e8 <_ZnwjPKci>
 8018abc:	4604      	mov	r4, r0
 8018abe:	6939      	ldr	r1, [r7, #16]
 8018ac0:	4620      	mov	r0, r4
 8018ac2:	f000 ff27 	bl	8019914 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018ac6:	61fc      	str	r4, [r7, #28]
    inputParameters_->add(newParameter);
 8018ac8:	697b      	ldr	r3, [r7, #20]
 8018aca:	69db      	ldr	r3, [r3, #28]
 8018acc:	69f9      	ldr	r1, [r7, #28]
 8018ace:	4618      	mov	r0, r3
 8018ad0:	f004 fdb8 	bl	801d644 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value, tolerance);
 8018ad4:	69fb      	ldr	r3, [r7, #28]
 8018ad6:	681b      	ldr	r3, [r3, #0]
 8018ad8:	3328      	adds	r3, #40	; 0x28
 8018ada:	681b      	ldr	r3, [r3, #0]
 8018adc:	ed97 1b00 	vldr	d1, [r7]
 8018ae0:	ed97 0b02 	vldr	d0, [r7, #8]
 8018ae4:	69f8      	ldr	r0, [r7, #28]
 8018ae6:	4798      	blx	r3
    return *this;
 8018ae8:	697b      	ldr	r3, [r7, #20]
}
 8018aea:	4618      	mov	r0, r3
 8018aec:	3724      	adds	r7, #36	; 0x24
 8018aee:	46bd      	mov	sp, r7
 8018af0:	bd90      	pop	{r4, r7, pc}
 8018af2:	bf00      	nop
 8018af4:	08023db0 	.word	0x08023db0

08018af8 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc>:

MockExpectedCall& MockCheckedExpectedCall::withStringParameter(const SimpleString& name, const char* value)
{
 8018af8:	b590      	push	{r4, r7, lr}
 8018afa:	b087      	sub	sp, #28
 8018afc:	af00      	add	r7, sp, #0
 8018afe:	60f8      	str	r0, [r7, #12]
 8018b00:	60b9      	str	r1, [r7, #8]
 8018b02:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018b04:	22b4      	movs	r2, #180	; 0xb4
 8018b06:	490e      	ldr	r1, [pc, #56]	; (8018b40 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc+0x48>)
 8018b08:	2038      	movs	r0, #56	; 0x38
 8018b0a:	f7ef fd6d 	bl	80085e8 <_ZnwjPKci>
 8018b0e:	4604      	mov	r4, r0
 8018b10:	68b9      	ldr	r1, [r7, #8]
 8018b12:	4620      	mov	r0, r4
 8018b14:	f000 fefe 	bl	8019914 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018b18:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8018b1a:	68fb      	ldr	r3, [r7, #12]
 8018b1c:	69db      	ldr	r3, [r3, #28]
 8018b1e:	6979      	ldr	r1, [r7, #20]
 8018b20:	4618      	mov	r0, r3
 8018b22:	f004 fd8f 	bl	801d644 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8018b26:	697b      	ldr	r3, [r7, #20]
 8018b28:	681b      	ldr	r3, [r3, #0]
 8018b2a:	3338      	adds	r3, #56	; 0x38
 8018b2c:	681b      	ldr	r3, [r3, #0]
 8018b2e:	6879      	ldr	r1, [r7, #4]
 8018b30:	6978      	ldr	r0, [r7, #20]
 8018b32:	4798      	blx	r3
    return *this;
 8018b34:	68fb      	ldr	r3, [r7, #12]
}
 8018b36:	4618      	mov	r0, r3
 8018b38:	371c      	adds	r7, #28
 8018b3a:	46bd      	mov	sp, r7
 8018b3c:	bd90      	pop	{r4, r7, pc}
 8018b3e:	bf00      	nop
 8018b40:	08023db0 	.word	0x08023db0

08018b44 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv>:

MockExpectedCall& MockCheckedExpectedCall::withPointerParameter(const SimpleString& name, void* value)
{
 8018b44:	b590      	push	{r4, r7, lr}
 8018b46:	b087      	sub	sp, #28
 8018b48:	af00      	add	r7, sp, #0
 8018b4a:	60f8      	str	r0, [r7, #12]
 8018b4c:	60b9      	str	r1, [r7, #8]
 8018b4e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018b50:	22bc      	movs	r2, #188	; 0xbc
 8018b52:	490e      	ldr	r1, [pc, #56]	; (8018b8c <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv+0x48>)
 8018b54:	2038      	movs	r0, #56	; 0x38
 8018b56:	f7ef fd47 	bl	80085e8 <_ZnwjPKci>
 8018b5a:	4604      	mov	r4, r0
 8018b5c:	68b9      	ldr	r1, [r7, #8]
 8018b5e:	4620      	mov	r0, r4
 8018b60:	f000 fed8 	bl	8019914 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018b64:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8018b66:	68fb      	ldr	r3, [r7, #12]
 8018b68:	69db      	ldr	r3, [r3, #28]
 8018b6a:	6979      	ldr	r1, [r7, #20]
 8018b6c:	4618      	mov	r0, r3
 8018b6e:	f004 fd69 	bl	801d644 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8018b72:	697b      	ldr	r3, [r7, #20]
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	332c      	adds	r3, #44	; 0x2c
 8018b78:	681b      	ldr	r3, [r3, #0]
 8018b7a:	6879      	ldr	r1, [r7, #4]
 8018b7c:	6978      	ldr	r0, [r7, #20]
 8018b7e:	4798      	blx	r3
    return *this;
 8018b80:	68fb      	ldr	r3, [r7, #12]
}
 8018b82:	4618      	mov	r0, r3
 8018b84:	371c      	adds	r7, #28
 8018b86:	46bd      	mov	sp, r7
 8018b88:	bd90      	pop	{r4, r7, pc}
 8018b8a:	bf00      	nop
 8018b8c:	08023db0 	.word	0x08023db0

08018b90 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:

MockExpectedCall& MockCheckedExpectedCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 8018b90:	b590      	push	{r4, r7, lr}
 8018b92:	b087      	sub	sp, #28
 8018b94:	af00      	add	r7, sp, #0
 8018b96:	60f8      	str	r0, [r7, #12]
 8018b98:	60b9      	str	r1, [r7, #8]
 8018b9a:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018b9c:	22c4      	movs	r2, #196	; 0xc4
 8018b9e:	490e      	ldr	r1, [pc, #56]	; (8018bd8 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv+0x48>)
 8018ba0:	2038      	movs	r0, #56	; 0x38
 8018ba2:	f7ef fd21 	bl	80085e8 <_ZnwjPKci>
 8018ba6:	4604      	mov	r4, r0
 8018ba8:	68b9      	ldr	r1, [r7, #8]
 8018baa:	4620      	mov	r0, r4
 8018bac:	f000 feb2 	bl	8019914 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018bb0:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8018bb2:	68fb      	ldr	r3, [r7, #12]
 8018bb4:	69db      	ldr	r3, [r3, #28]
 8018bb6:	6979      	ldr	r1, [r7, #20]
 8018bb8:	4618      	mov	r0, r3
 8018bba:	f004 fd43 	bl	801d644 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8018bbe:	697b      	ldr	r3, [r7, #20]
 8018bc0:	681b      	ldr	r3, [r3, #0]
 8018bc2:	3330      	adds	r3, #48	; 0x30
 8018bc4:	681b      	ldr	r3, [r3, #0]
 8018bc6:	6879      	ldr	r1, [r7, #4]
 8018bc8:	6978      	ldr	r0, [r7, #20]
 8018bca:	4798      	blx	r3
    return *this;
 8018bcc:	68fb      	ldr	r3, [r7, #12]
}
 8018bce:	4618      	mov	r0, r3
 8018bd0:	371c      	adds	r7, #28
 8018bd2:	46bd      	mov	sp, r7
 8018bd4:	bd90      	pop	{r4, r7, pc}
 8018bd6:	bf00      	nop
 8018bd8:	08023db0 	.word	0x08023db0

08018bdc <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 8018bdc:	b590      	push	{r4, r7, lr}
 8018bde:	b087      	sub	sp, #28
 8018be0:	af00      	add	r7, sp, #0
 8018be2:	60f8      	str	r0, [r7, #12]
 8018be4:	60b9      	str	r1, [r7, #8]
 8018be6:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018be8:	22cc      	movs	r2, #204	; 0xcc
 8018bea:	490e      	ldr	r1, [pc, #56]	; (8018c24 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE+0x48>)
 8018bec:	2038      	movs	r0, #56	; 0x38
 8018bee:	f7ef fcfb 	bl	80085e8 <_ZnwjPKci>
 8018bf2:	4604      	mov	r4, r0
 8018bf4:	68b9      	ldr	r1, [r7, #8]
 8018bf6:	4620      	mov	r0, r4
 8018bf8:	f000 fe8c 	bl	8019914 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018bfc:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8018bfe:	68fb      	ldr	r3, [r7, #12]
 8018c00:	69db      	ldr	r3, [r3, #28]
 8018c02:	6979      	ldr	r1, [r7, #20]
 8018c04:	4618      	mov	r0, r3
 8018c06:	f004 fd1d 	bl	801d644 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8018c0a:	697b      	ldr	r3, [r7, #20]
 8018c0c:	681b      	ldr	r3, [r3, #0]
 8018c0e:	3334      	adds	r3, #52	; 0x34
 8018c10:	681b      	ldr	r3, [r3, #0]
 8018c12:	6879      	ldr	r1, [r7, #4]
 8018c14:	6978      	ldr	r0, [r7, #20]
 8018c16:	4798      	blx	r3
    return *this;
 8018c18:	68fb      	ldr	r3, [r7, #12]
}
 8018c1a:	4618      	mov	r0, r3
 8018c1c:	371c      	adds	r7, #28
 8018c1e:	46bd      	mov	sp, r7
 8018c20:	bd90      	pop	{r4, r7, pc}
 8018c22:	bf00      	nop
 8018c24:	08023db0 	.word	0x08023db0

08018c28 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockExpectedCall& MockCheckedExpectedCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 8018c28:	b590      	push	{r4, r7, lr}
 8018c2a:	b087      	sub	sp, #28
 8018c2c:	af00      	add	r7, sp, #0
 8018c2e:	60f8      	str	r0, [r7, #12]
 8018c30:	60b9      	str	r1, [r7, #8]
 8018c32:	607a      	str	r2, [r7, #4]
 8018c34:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018c36:	22d4      	movs	r2, #212	; 0xd4
 8018c38:	490e      	ldr	r1, [pc, #56]	; (8018c74 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj+0x4c>)
 8018c3a:	2038      	movs	r0, #56	; 0x38
 8018c3c:	f7ef fcd4 	bl	80085e8 <_ZnwjPKci>
 8018c40:	4604      	mov	r4, r0
 8018c42:	68b9      	ldr	r1, [r7, #8]
 8018c44:	4620      	mov	r0, r4
 8018c46:	f000 fe65 	bl	8019914 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018c4a:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8018c4c:	68fb      	ldr	r3, [r7, #12]
 8018c4e:	69db      	ldr	r3, [r3, #28]
 8018c50:	6979      	ldr	r1, [r7, #20]
 8018c52:	4618      	mov	r0, r3
 8018c54:	f004 fcf6 	bl	801d644 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setMemoryBuffer(value, size);
 8018c58:	697b      	ldr	r3, [r7, #20]
 8018c5a:	681b      	ldr	r3, [r3, #0]
 8018c5c:	333c      	adds	r3, #60	; 0x3c
 8018c5e:	681b      	ldr	r3, [r3, #0]
 8018c60:	683a      	ldr	r2, [r7, #0]
 8018c62:	6879      	ldr	r1, [r7, #4]
 8018c64:	6978      	ldr	r0, [r7, #20]
 8018c66:	4798      	blx	r3
    return *this;
 8018c68:	68fb      	ldr	r3, [r7, #12]
}
 8018c6a:	4618      	mov	r0, r3
 8018c6c:	371c      	adds	r7, #28
 8018c6e:	46bd      	mov	sp, r7
 8018c70:	bd90      	pop	{r4, r7, pc}
 8018c72:	bf00      	nop
 8018c74:	08023db0 	.word	0x08023db0

08018c78 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 8018c78:	b590      	push	{r4, r7, lr}
 8018c7a:	b087      	sub	sp, #28
 8018c7c:	af00      	add	r7, sp, #0
 8018c7e:	60f8      	str	r0, [r7, #12]
 8018c80:	60b9      	str	r1, [r7, #8]
 8018c82:	607a      	str	r2, [r7, #4]
 8018c84:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018c86:	22dc      	movs	r2, #220	; 0xdc
 8018c88:	490e      	ldr	r1, [pc, #56]	; (8018cc4 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x4c>)
 8018c8a:	2038      	movs	r0, #56	; 0x38
 8018c8c:	f7ef fcac 	bl	80085e8 <_ZnwjPKci>
 8018c90:	4604      	mov	r4, r0
 8018c92:	6879      	ldr	r1, [r7, #4]
 8018c94:	4620      	mov	r0, r4
 8018c96:	f000 fe3d 	bl	8019914 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018c9a:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8018c9c:	68fb      	ldr	r3, [r7, #12]
 8018c9e:	69db      	ldr	r3, [r3, #28]
 8018ca0:	6979      	ldr	r1, [r7, #20]
 8018ca2:	4618      	mov	r0, r3
 8018ca4:	f004 fcce 	bl	801d644 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 8018ca8:	697b      	ldr	r3, [r7, #20]
 8018caa:	681b      	ldr	r3, [r3, #0]
 8018cac:	3340      	adds	r3, #64	; 0x40
 8018cae:	681b      	ldr	r3, [r3, #0]
 8018cb0:	683a      	ldr	r2, [r7, #0]
 8018cb2:	68b9      	ldr	r1, [r7, #8]
 8018cb4:	6978      	ldr	r0, [r7, #20]
 8018cb6:	4798      	blx	r3
    return *this;
 8018cb8:	68fb      	ldr	r3, [r7, #12]
}
 8018cba:	4618      	mov	r0, r3
 8018cbc:	371c      	adds	r7, #28
 8018cbe:	46bd      	mov	sp, r7
 8018cc0:	bd90      	pop	{r4, r7, pc}
 8018cc2:	bf00      	nop
 8018cc4:	08023db0 	.word	0x08023db0

08018cc8 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterReturning(const SimpleString& name, const void* value, size_t size)
{
 8018cc8:	b590      	push	{r4, r7, lr}
 8018cca:	b087      	sub	sp, #28
 8018ccc:	af00      	add	r7, sp, #0
 8018cce:	60f8      	str	r0, [r7, #12]
 8018cd0:	60b9      	str	r1, [r7, #8]
 8018cd2:	607a      	str	r2, [r7, #4]
 8018cd4:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018cd6:	22e4      	movs	r2, #228	; 0xe4
 8018cd8:	4911      	ldr	r1, [pc, #68]	; (8018d20 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj+0x58>)
 8018cda:	2038      	movs	r0, #56	; 0x38
 8018cdc:	f7ef fc84 	bl	80085e8 <_ZnwjPKci>
 8018ce0:	4604      	mov	r4, r0
 8018ce2:	68b9      	ldr	r1, [r7, #8]
 8018ce4:	4620      	mov	r0, r4
 8018ce6:	f000 fe15 	bl	8019914 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018cea:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 8018cec:	68fb      	ldr	r3, [r7, #12]
 8018cee:	6a1b      	ldr	r3, [r3, #32]
 8018cf0:	6979      	ldr	r1, [r7, #20]
 8018cf2:	4618      	mov	r0, r3
 8018cf4:	f004 fca6 	bl	801d644 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8018cf8:	697b      	ldr	r3, [r7, #20]
 8018cfa:	681b      	ldr	r3, [r3, #0]
 8018cfc:	3330      	adds	r3, #48	; 0x30
 8018cfe:	681b      	ldr	r3, [r3, #0]
 8018d00:	6879      	ldr	r1, [r7, #4]
 8018d02:	6978      	ldr	r0, [r7, #20]
 8018d04:	4798      	blx	r3
    newParameter->setSize(size);
 8018d06:	697b      	ldr	r3, [r7, #20]
 8018d08:	681b      	ldr	r3, [r3, #0]
 8018d0a:	3348      	adds	r3, #72	; 0x48
 8018d0c:	681b      	ldr	r3, [r3, #0]
 8018d0e:	6839      	ldr	r1, [r7, #0]
 8018d10:	6978      	ldr	r0, [r7, #20]
 8018d12:	4798      	blx	r3
    return *this;
 8018d14:	68fb      	ldr	r3, [r7, #12]
}
 8018d16:	4618      	mov	r0, r3
 8018d18:	371c      	adds	r7, #28
 8018d1a:	46bd      	mov	sp, r7
 8018d1c:	bd90      	pop	{r4, r7, pc}
 8018d1e:	bf00      	nop
 8018d20:	08023db0 	.word	0x08023db0

08018d24 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterOfTypeReturning(const SimpleString& type, const SimpleString& name, const void* value)
{
 8018d24:	b590      	push	{r4, r7, lr}
 8018d26:	b087      	sub	sp, #28
 8018d28:	af00      	add	r7, sp, #0
 8018d2a:	60f8      	str	r0, [r7, #12]
 8018d2c:	60b9      	str	r1, [r7, #8]
 8018d2e:	607a      	str	r2, [r7, #4]
 8018d30:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018d32:	22ed      	movs	r2, #237	; 0xed
 8018d34:	490e      	ldr	r1, [pc, #56]	; (8018d70 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv+0x4c>)
 8018d36:	2038      	movs	r0, #56	; 0x38
 8018d38:	f7ef fc56 	bl	80085e8 <_ZnwjPKci>
 8018d3c:	4604      	mov	r4, r0
 8018d3e:	6879      	ldr	r1, [r7, #4]
 8018d40:	4620      	mov	r0, r4
 8018d42:	f000 fde7 	bl	8019914 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018d46:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 8018d48:	68fb      	ldr	r3, [r7, #12]
 8018d4a:	6a1b      	ldr	r3, [r3, #32]
 8018d4c:	6979      	ldr	r1, [r7, #20]
 8018d4e:	4618      	mov	r0, r3
 8018d50:	f004 fc78 	bl	801d644 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 8018d54:	697b      	ldr	r3, [r7, #20]
 8018d56:	681b      	ldr	r3, [r3, #0]
 8018d58:	3340      	adds	r3, #64	; 0x40
 8018d5a:	681b      	ldr	r3, [r3, #0]
 8018d5c:	683a      	ldr	r2, [r7, #0]
 8018d5e:	68b9      	ldr	r1, [r7, #8]
 8018d60:	6978      	ldr	r0, [r7, #20]
 8018d62:	4798      	blx	r3
    return *this;
 8018d64:	68fb      	ldr	r3, [r7, #12]
}
 8018d66:	4618      	mov	r0, r3
 8018d68:	371c      	adds	r7, #28
 8018d6a:	46bd      	mov	sp, r7
 8018d6c:	bd90      	pop	{r4, r7, pc}
 8018d6e:	bf00      	nop
 8018d70:	08023db0 	.word	0x08023db0

08018d74 <_ZN23MockCheckedExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withUnmodifiedOutputParameter(const SimpleString& name)
{
 8018d74:	b590      	push	{r4, r7, lr}
 8018d76:	b083      	sub	sp, #12
 8018d78:	af00      	add	r7, sp, #0
 8018d7a:	6078      	str	r0, [r7, #4]
 8018d7c:	6039      	str	r1, [r7, #0]
    return withOutputParameterReturning(name, NULLPTR, 0);
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	681b      	ldr	r3, [r3, #0]
 8018d82:	3318      	adds	r3, #24
 8018d84:	681c      	ldr	r4, [r3, #0]
 8018d86:	2300      	movs	r3, #0
 8018d88:	2200      	movs	r2, #0
 8018d8a:	6839      	ldr	r1, [r7, #0]
 8018d8c:	6878      	ldr	r0, [r7, #4]
 8018d8e:	47a0      	blx	r4
 8018d90:	4603      	mov	r3, r0
}
 8018d92:	4618      	mov	r0, r3
 8018d94:	370c      	adds	r7, #12
 8018d96:	46bd      	mov	sp, r7
 8018d98:	bd90      	pop	{r4, r7, pc}
	...

08018d9c <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterType(const SimpleString& name)
{
 8018d9c:	b580      	push	{r7, lr}
 8018d9e:	b086      	sub	sp, #24
 8018da0:	af00      	add	r7, sp, #0
 8018da2:	60f8      	str	r0, [r7, #12]
 8018da4:	60b9      	str	r1, [r7, #8]
 8018da6:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 8018da8:	68bb      	ldr	r3, [r7, #8]
 8018daa:	69db      	ldr	r3, [r3, #28]
 8018dac:	6879      	ldr	r1, [r7, #4]
 8018dae:	4618      	mov	r0, r3
 8018db0:	f004 fc7e 	bl	801d6b0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8018db4:	6178      	str	r0, [r7, #20]
    return (p) ? p->getType() : StringFrom("");
 8018db6:	697b      	ldr	r3, [r7, #20]
 8018db8:	2b00      	cmp	r3, #0
 8018dba:	d008      	beq.n	8018dce <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x32>
 8018dbc:	697b      	ldr	r3, [r7, #20]
 8018dbe:	681b      	ldr	r3, [r3, #0]
 8018dc0:	3360      	adds	r3, #96	; 0x60
 8018dc2:	681b      	ldr	r3, [r3, #0]
 8018dc4:	68fa      	ldr	r2, [r7, #12]
 8018dc6:	6979      	ldr	r1, [r7, #20]
 8018dc8:	4610      	mov	r0, r2
 8018dca:	4798      	blx	r3
 8018dcc:	e004      	b.n	8018dd8 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x3c>
 8018dce:	68fb      	ldr	r3, [r7, #12]
 8018dd0:	4903      	ldr	r1, [pc, #12]	; (8018de0 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x44>)
 8018dd2:	4618      	mov	r0, r3
 8018dd4:	f7f2 fe10 	bl	800b9f8 <_Z10StringFromPKc>
}
 8018dd8:	68f8      	ldr	r0, [r7, #12]
 8018dda:	3718      	adds	r7, #24
 8018ddc:	46bd      	mov	sp, r7
 8018dde:	bd80      	pop	{r7, pc}
 8018de0:	08023dac 	.word	0x08023dac

08018de4 <_ZN23MockCheckedExpectedCall25hasInputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasInputParameterWithName(const SimpleString& name)
{
 8018de4:	b580      	push	{r7, lr}
 8018de6:	b084      	sub	sp, #16
 8018de8:	af00      	add	r7, sp, #0
 8018dea:	6078      	str	r0, [r7, #4]
 8018dec:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	69db      	ldr	r3, [r3, #28]
 8018df2:	6839      	ldr	r1, [r7, #0]
 8018df4:	4618      	mov	r0, r3
 8018df6:	f004 fc5b 	bl	801d6b0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8018dfa:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 8018dfc:	68fb      	ldr	r3, [r7, #12]
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	bf14      	ite	ne
 8018e02:	2301      	movne	r3, #1
 8018e04:	2300      	moveq	r3, #0
 8018e06:	b2db      	uxtb	r3, r3
}
 8018e08:	4618      	mov	r0, r3
 8018e0a:	3710      	adds	r7, #16
 8018e0c:	46bd      	mov	sp, r7
 8018e0e:	bd80      	pop	{r7, pc}

08018e10 <_ZN23MockCheckedExpectedCall26hasOutputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasOutputParameterWithName(const SimpleString& name)
{
 8018e10:	b580      	push	{r7, lr}
 8018e12:	b084      	sub	sp, #16
 8018e14:	af00      	add	r7, sp, #0
 8018e16:	6078      	str	r0, [r7, #4]
 8018e18:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	6a1b      	ldr	r3, [r3, #32]
 8018e1e:	6839      	ldr	r1, [r7, #0]
 8018e20:	4618      	mov	r0, r3
 8018e22:	f004 fc45 	bl	801d6b0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8018e26:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 8018e28:	68fb      	ldr	r3, [r7, #12]
 8018e2a:	2b00      	cmp	r3, #0
 8018e2c:	bf14      	ite	ne
 8018e2e:	2301      	movne	r3, #1
 8018e30:	2300      	moveq	r3, #0
 8018e32:	b2db      	uxtb	r3, r3
}
 8018e34:	4618      	mov	r0, r3
 8018e36:	3710      	adds	r7, #16
 8018e38:	46bd      	mov	sp, r7
 8018e3a:	bd80      	pop	{r7, pc}

08018e3c <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getInputParameter(const SimpleString& name)
{
 8018e3c:	b590      	push	{r4, r7, lr}
 8018e3e:	b089      	sub	sp, #36	; 0x24
 8018e40:	af00      	add	r7, sp, #0
 8018e42:	60f8      	str	r0, [r7, #12]
 8018e44:	60b9      	str	r1, [r7, #8]
 8018e46:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 8018e48:	68bb      	ldr	r3, [r7, #8]
 8018e4a:	69db      	ldr	r3, [r3, #28]
 8018e4c:	6879      	ldr	r1, [r7, #4]
 8018e4e:	4618      	mov	r0, r3
 8018e50:	f004 fc2e 	bl	801d6b0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8018e54:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 8018e56:	2400      	movs	r4, #0
 8018e58:	69fb      	ldr	r3, [r7, #28]
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d004      	beq.n	8018e68 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x2c>
 8018e5e:	69f9      	ldr	r1, [r7, #28]
 8018e60:	68f8      	ldr	r0, [r7, #12]
 8018e62:	f7f0 f829 	bl	8008eb8 <_ZN14MockNamedValueC1ERKS_>
 8018e66:	e00c      	b.n	8018e82 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x46>
 8018e68:	f107 0314 	add.w	r3, r7, #20
 8018e6c:	490a      	ldr	r1, [pc, #40]	; (8018e98 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x5c>)
 8018e6e:	4618      	mov	r0, r3
 8018e70:	f7f1 ff7d 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8018e74:	2401      	movs	r4, #1
 8018e76:	f107 0314 	add.w	r3, r7, #20
 8018e7a:	4619      	mov	r1, r3
 8018e7c:	68f8      	ldr	r0, [r7, #12]
 8018e7e:	f002 fc9b 	bl	801b7b8 <_ZN14MockNamedValueC1ERK12SimpleString>
 8018e82:	2c00      	cmp	r4, #0
 8018e84:	d004      	beq.n	8018e90 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x54>
 8018e86:	f107 0314 	add.w	r3, r7, #20
 8018e8a:	4618      	mov	r0, r3
 8018e8c:	f7f2 fb27 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 8018e90:	68f8      	ldr	r0, [r7, #12]
 8018e92:	3724      	adds	r7, #36	; 0x24
 8018e94:	46bd      	mov	sp, r7
 8018e96:	bd90      	pop	{r4, r7, pc}
 8018e98:	08023dac 	.word	0x08023dac

08018e9c <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getOutputParameter(const SimpleString& name)
{
 8018e9c:	b590      	push	{r4, r7, lr}
 8018e9e:	b089      	sub	sp, #36	; 0x24
 8018ea0:	af00      	add	r7, sp, #0
 8018ea2:	60f8      	str	r0, [r7, #12]
 8018ea4:	60b9      	str	r1, [r7, #8]
 8018ea6:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 8018ea8:	68bb      	ldr	r3, [r7, #8]
 8018eaa:	6a1b      	ldr	r3, [r3, #32]
 8018eac:	6879      	ldr	r1, [r7, #4]
 8018eae:	4618      	mov	r0, r3
 8018eb0:	f004 fbfe 	bl	801d6b0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8018eb4:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 8018eb6:	2400      	movs	r4, #0
 8018eb8:	69fb      	ldr	r3, [r7, #28]
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	d004      	beq.n	8018ec8 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x2c>
 8018ebe:	69f9      	ldr	r1, [r7, #28]
 8018ec0:	68f8      	ldr	r0, [r7, #12]
 8018ec2:	f7ef fff9 	bl	8008eb8 <_ZN14MockNamedValueC1ERKS_>
 8018ec6:	e00c      	b.n	8018ee2 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x46>
 8018ec8:	f107 0314 	add.w	r3, r7, #20
 8018ecc:	490a      	ldr	r1, [pc, #40]	; (8018ef8 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x5c>)
 8018ece:	4618      	mov	r0, r3
 8018ed0:	f7f1 ff4d 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 8018ed4:	2401      	movs	r4, #1
 8018ed6:	f107 0314 	add.w	r3, r7, #20
 8018eda:	4619      	mov	r1, r3
 8018edc:	68f8      	ldr	r0, [r7, #12]
 8018ede:	f002 fc6b 	bl	801b7b8 <_ZN14MockNamedValueC1ERK12SimpleString>
 8018ee2:	2c00      	cmp	r4, #0
 8018ee4:	d004      	beq.n	8018ef0 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x54>
 8018ee6:	f107 0314 	add.w	r3, r7, #20
 8018eea:	4618      	mov	r0, r3
 8018eec:	f7f2 faf7 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 8018ef0:	68f8      	ldr	r0, [r7, #12]
 8018ef2:	3724      	adds	r7, #36	; 0x24
 8018ef4:	46bd      	mov	sp, r7
 8018ef6:	bd90      	pop	{r4, r7, pc}
 8018ef8:	08023dac 	.word	0x08023dac

08018efc <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv>:

bool MockCheckedExpectedCall::areParametersMatchingActualCall()
{
 8018efc:	b580      	push	{r7, lr}
 8018efe:	b084      	sub	sp, #16
 8018f00:	af00      	add	r7, sp, #0
 8018f02:	6078      	str	r0, [r7, #4]
    MockNamedValueListNode* p;
    for (p = inputParameters_->begin(); p; p = p->next())
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	69db      	ldr	r3, [r3, #28]
 8018f08:	4618      	mov	r0, r3
 8018f0a:	f004 fc00 	bl	801d70e <_ZN18MockNamedValueList5beginEv>
 8018f0e:	60f8      	str	r0, [r7, #12]
 8018f10:	68fb      	ldr	r3, [r7, #12]
 8018f12:	2b00      	cmp	r3, #0
 8018f14:	d014      	beq.n	8018f40 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x44>
        if (! item(p)->isMatchingActualCall())
 8018f16:	68f9      	ldr	r1, [r7, #12]
 8018f18:	6878      	ldr	r0, [r7, #4]
 8018f1a:	f000 fced 	bl	80198f8 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8018f1e:	4603      	mov	r3, r0
 8018f20:	4618      	mov	r0, r3
 8018f22:	f000 fd1f 	bl	8019964 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 8018f26:	4603      	mov	r3, r0
 8018f28:	f083 0301 	eor.w	r3, r3, #1
 8018f2c:	b2db      	uxtb	r3, r3
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	d001      	beq.n	8018f36 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x3a>
            return false;
 8018f32:	2300      	movs	r3, #0
 8018f34:	e023      	b.n	8018f7e <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = inputParameters_->begin(); p; p = p->next())
 8018f36:	68f8      	ldr	r0, [r7, #12]
 8018f38:	f004 faf2 	bl	801d520 <_ZN22MockNamedValueListNode4nextEv>
 8018f3c:	60f8      	str	r0, [r7, #12]
 8018f3e:	e7e7      	b.n	8018f10 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x14>
    for (p = outputParameters_->begin(); p; p = p->next())
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	6a1b      	ldr	r3, [r3, #32]
 8018f44:	4618      	mov	r0, r3
 8018f46:	f004 fbe2 	bl	801d70e <_ZN18MockNamedValueList5beginEv>
 8018f4a:	60f8      	str	r0, [r7, #12]
 8018f4c:	68fb      	ldr	r3, [r7, #12]
 8018f4e:	2b00      	cmp	r3, #0
 8018f50:	d014      	beq.n	8018f7c <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x80>
        if (! item(p)->isMatchingActualCall())
 8018f52:	68f9      	ldr	r1, [r7, #12]
 8018f54:	6878      	ldr	r0, [r7, #4]
 8018f56:	f000 fccf 	bl	80198f8 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8018f5a:	4603      	mov	r3, r0
 8018f5c:	4618      	mov	r0, r3
 8018f5e:	f000 fd01 	bl	8019964 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 8018f62:	4603      	mov	r3, r0
 8018f64:	f083 0301 	eor.w	r3, r3, #1
 8018f68:	b2db      	uxtb	r3, r3
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	d001      	beq.n	8018f72 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x76>
            return false;
 8018f6e:	2300      	movs	r3, #0
 8018f70:	e005      	b.n	8018f7e <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = outputParameters_->begin(); p; p = p->next())
 8018f72:	68f8      	ldr	r0, [r7, #12]
 8018f74:	f004 fad4 	bl	801d520 <_ZN22MockNamedValueListNode4nextEv>
 8018f78:	60f8      	str	r0, [r7, #12]
 8018f7a:	e7e7      	b.n	8018f4c <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x50>
    return true;
 8018f7c:	2301      	movs	r3, #1
}
 8018f7e:	4618      	mov	r0, r3
 8018f80:	3710      	adds	r7, #16
 8018f82:	46bd      	mov	sp, r7
 8018f84:	bd80      	pop	{r7, pc}

08018f86 <_ZN23MockCheckedExpectedCall21ignoreOtherParametersEv>:

MockExpectedCall& MockCheckedExpectedCall::ignoreOtherParameters()
{
 8018f86:	b480      	push	{r7}
 8018f88:	b083      	sub	sp, #12
 8018f8a:	af00      	add	r7, sp, #0
 8018f8c:	6078      	str	r0, [r7, #4]
    ignoreOtherParameters_ = true;
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	2201      	movs	r2, #1
 8018f92:	731a      	strb	r2, [r3, #12]
    return *this;
 8018f94:	687b      	ldr	r3, [r7, #4]
}
 8018f96:	4618      	mov	r0, r3
 8018f98:	370c      	adds	r7, #12
 8018f9a:	46bd      	mov	sp, r7
 8018f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fa0:	4770      	bx	lr

08018fa2 <_ZN23MockCheckedExpectedCall11isFulfilledEv>:

bool MockCheckedExpectedCall::isFulfilled()
{
 8018fa2:	b480      	push	{r7}
 8018fa4:	b083      	sub	sp, #12
 8018fa6:	af00      	add	r7, sp, #0
 8018fa8:	6078      	str	r0, [r7, #4]
    return (actualCalls_ == expectedCalls_);
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8018fae:	687b      	ldr	r3, [r7, #4]
 8018fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018fb2:	429a      	cmp	r2, r3
 8018fb4:	bf0c      	ite	eq
 8018fb6:	2301      	moveq	r3, #1
 8018fb8:	2300      	movne	r3, #0
 8018fba:	b2db      	uxtb	r3, r3
}
 8018fbc:	4618      	mov	r0, r3
 8018fbe:	370c      	adds	r7, #12
 8018fc0:	46bd      	mov	sp, r7
 8018fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fc6:	4770      	bx	lr

08018fc8 <_ZN23MockCheckedExpectedCall19canMatchActualCallsEv>:

bool MockCheckedExpectedCall::canMatchActualCalls()
{
 8018fc8:	b480      	push	{r7}
 8018fca:	b083      	sub	sp, #12
 8018fcc:	af00      	add	r7, sp, #0
 8018fce:	6078      	str	r0, [r7, #4]
    return (actualCalls_ < expectedCalls_);
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018fd8:	429a      	cmp	r2, r3
 8018fda:	bf34      	ite	cc
 8018fdc:	2301      	movcc	r3, #1
 8018fde:	2300      	movcs	r3, #0
 8018fe0:	b2db      	uxtb	r3, r3
}
 8018fe2:	4618      	mov	r0, r3
 8018fe4:	370c      	adds	r7, #12
 8018fe6:	46bd      	mov	sp, r7
 8018fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fec:	4770      	bx	lr

08018fee <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv>:

bool MockCheckedExpectedCall::isMatchingActualCallAndFinalized()
{
 8018fee:	b580      	push	{r7, lr}
 8018ff0:	b082      	sub	sp, #8
 8018ff2:	af00      	add	r7, sp, #0
 8018ff4:	6078      	str	r0, [r7, #4]
    return isMatchingActualCall() && (!ignoreOtherParameters_ || isActualCallMatchFinalized_);
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	681b      	ldr	r3, [r3, #0]
 8018ffa:	33cc      	adds	r3, #204	; 0xcc
 8018ffc:	681b      	ldr	r3, [r3, #0]
 8018ffe:	6878      	ldr	r0, [r7, #4]
 8019000:	4798      	blx	r3
 8019002:	4603      	mov	r3, r0
 8019004:	2b00      	cmp	r3, #0
 8019006:	d00c      	beq.n	8019022 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	7b1b      	ldrb	r3, [r3, #12]
 801900c:	f083 0301 	eor.w	r3, r3, #1
 8019010:	b2db      	uxtb	r3, r3
 8019012:	2b00      	cmp	r3, #0
 8019014:	d103      	bne.n	801901e <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x30>
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	7b5b      	ldrb	r3, [r3, #13]
 801901a:	2b00      	cmp	r3, #0
 801901c:	d001      	beq.n	8019022 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801901e:	2301      	movs	r3, #1
 8019020:	e000      	b.n	8019024 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x36>
 8019022:	2300      	movs	r3, #0
}
 8019024:	4618      	mov	r0, r3
 8019026:	3708      	adds	r7, #8
 8019028:	46bd      	mov	sp, r7
 801902a:	bd80      	pop	{r7, pc}

0801902c <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::isMatchingActualCall()
{
 801902c:	b580      	push	{r7, lr}
 801902e:	b082      	sub	sp, #8
 8019030:	af00      	add	r7, sp, #0
 8019032:	6078      	str	r0, [r7, #4]
    return areParametersMatchingActualCall() && wasPassedToObject_;
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	681b      	ldr	r3, [r3, #0]
 8019038:	33d0      	adds	r3, #208	; 0xd0
 801903a:	681b      	ldr	r3, [r3, #0]
 801903c:	6878      	ldr	r0, [r7, #4]
 801903e:	4798      	blx	r3
 8019040:	4603      	mov	r3, r0
 8019042:	2b00      	cmp	r3, #0
 8019044:	d006      	beq.n	8019054 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 801904c:	2b00      	cmp	r3, #0
 801904e:	d001      	beq.n	8019054 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 8019050:	2301      	movs	r3, #1
 8019052:	e000      	b.n	8019056 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x2a>
 8019054:	2300      	movs	r3, #0
}
 8019056:	4618      	mov	r0, r3
 8019058:	3708      	adds	r7, #8
 801905a:	46bd      	mov	sp, r7
 801905c:	bd80      	pop	{r7, pc}

0801905e <_ZN23MockCheckedExpectedCall11callWasMadeEj>:

void MockCheckedExpectedCall::callWasMade(unsigned int callOrder)
{
 801905e:	b580      	push	{r7, lr}
 8019060:	b082      	sub	sp, #8
 8019062:	af00      	add	r7, sp, #0
 8019064:	6078      	str	r0, [r7, #4]
 8019066:	6039      	str	r1, [r7, #0]
    actualCalls_++;
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801906c:	1c5a      	adds	r2, r3, #1
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	669a      	str	r2, [r3, #104]	; 0x68

    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	691b      	ldr	r3, [r3, #16]
 8019076:	2b00      	cmp	r3, #0
 8019078:	d00c      	beq.n	8019094 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	691b      	ldr	r3, [r3, #16]
    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801907e:	683a      	ldr	r2, [r7, #0]
 8019080:	429a      	cmp	r2, r3
 8019082:	d304      	bcc.n	801908e <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x30>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	695b      	ldr	r3, [r3, #20]
 8019088:	683a      	ldr	r2, [r7, #0]
 801908a:	429a      	cmp	r2, r3
 801908c:	d902      	bls.n	8019094 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
        outOfOrder_ = true;
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	2201      	movs	r2, #1
 8019092:	761a      	strb	r2, [r3, #24]
    }

    resetActualCallMatchingState();
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	681b      	ldr	r3, [r3, #0]
 8019098:	33ec      	adds	r3, #236	; 0xec
 801909a:	681b      	ldr	r3, [r3, #0]
 801909c:	6878      	ldr	r0, [r7, #4]
 801909e:	4798      	blx	r3
}
 80190a0:	bf00      	nop
 80190a2:	3708      	adds	r7, #8
 80190a4:	46bd      	mov	sp, r7
 80190a6:	bd80      	pop	{r7, pc}

080190a8 <_ZN23MockCheckedExpectedCall23finalizeActualCallMatchEv>:

void MockCheckedExpectedCall::finalizeActualCallMatch()
{
 80190a8:	b480      	push	{r7}
 80190aa:	b083      	sub	sp, #12
 80190ac:	af00      	add	r7, sp, #0
 80190ae:	6078      	str	r0, [r7, #4]
    isActualCallMatchFinalized_ = true;
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	2201      	movs	r2, #1
 80190b4:	735a      	strb	r2, [r3, #13]
}
 80190b6:	bf00      	nop
 80190b8:	370c      	adds	r7, #12
 80190ba:	46bd      	mov	sp, r7
 80190bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190c0:	4770      	bx	lr

080190c2 <_ZN23MockCheckedExpectedCall17wasPassedToObjectEv>:


void MockCheckedExpectedCall::wasPassedToObject()
{
 80190c2:	b480      	push	{r7}
 80190c4:	b083      	sub	sp, #12
 80190c6:	af00      	add	r7, sp, #0
 80190c8:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = true;
 80190ca:	687b      	ldr	r3, [r7, #4]
 80190cc:	2201      	movs	r2, #1
 80190ce:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
}
 80190d2:	bf00      	nop
 80190d4:	370c      	adds	r7, #12
 80190d6:	46bd      	mov	sp, r7
 80190d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190dc:	4770      	bx	lr

080190de <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv>:

void MockCheckedExpectedCall::resetActualCallMatchingState()
{
 80190de:	b580      	push	{r7, lr}
 80190e0:	b084      	sub	sp, #16
 80190e2:	af00      	add	r7, sp, #0
 80190e4:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = !isSpecificObjectExpected_;
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80190ec:	f083 0301 	eor.w	r3, r3, #1
 80190f0:	b2da      	uxtb	r2, r3
 80190f2:	687b      	ldr	r3, [r7, #4]
 80190f4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    isActualCallMatchFinalized_ = false;
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	2200      	movs	r2, #0
 80190fc:	735a      	strb	r2, [r3, #13]

    MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next())
 80190fe:	687b      	ldr	r3, [r7, #4]
 8019100:	69db      	ldr	r3, [r3, #28]
 8019102:	4618      	mov	r0, r3
 8019104:	f004 fb03 	bl	801d70e <_ZN18MockNamedValueList5beginEv>
 8019108:	60f8      	str	r0, [r7, #12]
 801910a:	68fb      	ldr	r3, [r7, #12]
 801910c:	2b00      	cmp	r3, #0
 801910e:	d00d      	beq.n	801912c <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x4e>
        item(p)->setMatchesActualCall(false);
 8019110:	68f9      	ldr	r1, [r7, #12]
 8019112:	6878      	ldr	r0, [r7, #4]
 8019114:	f000 fbf0 	bl	80198f8 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8019118:	4603      	mov	r3, r0
 801911a:	2100      	movs	r1, #0
 801911c:	4618      	mov	r0, r3
 801911e:	f000 fc11 	bl	8019944 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = inputParameters_->begin(); p; p = p->next())
 8019122:	68f8      	ldr	r0, [r7, #12]
 8019124:	f004 f9fc 	bl	801d520 <_ZN22MockNamedValueListNode4nextEv>
 8019128:	60f8      	str	r0, [r7, #12]
 801912a:	e7ee      	b.n	801910a <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x2c>
    for (p = outputParameters_->begin(); p; p = p->next())
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	6a1b      	ldr	r3, [r3, #32]
 8019130:	4618      	mov	r0, r3
 8019132:	f004 faec 	bl	801d70e <_ZN18MockNamedValueList5beginEv>
 8019136:	60f8      	str	r0, [r7, #12]
 8019138:	68fb      	ldr	r3, [r7, #12]
 801913a:	2b00      	cmp	r3, #0
 801913c:	d00d      	beq.n	801915a <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x7c>
        item(p)->setMatchesActualCall(false);
 801913e:	68f9      	ldr	r1, [r7, #12]
 8019140:	6878      	ldr	r0, [r7, #4]
 8019142:	f000 fbd9 	bl	80198f8 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8019146:	4603      	mov	r3, r0
 8019148:	2100      	movs	r1, #0
 801914a:	4618      	mov	r0, r3
 801914c:	f000 fbfa 	bl	8019944 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = outputParameters_->begin(); p; p = p->next())
 8019150:	68f8      	ldr	r0, [r7, #12]
 8019152:	f004 f9e5 	bl	801d520 <_ZN22MockNamedValueListNode4nextEv>
 8019156:	60f8      	str	r0, [r7, #12]
 8019158:	e7ee      	b.n	8019138 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x5a>
}
 801915a:	bf00      	nop
 801915c:	3710      	adds	r7, #16
 801915e:	46bd      	mov	sp, r7
 8019160:	bd80      	pop	{r7, pc}

08019162 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::inputParameterWasPassed(const SimpleString& name)
{
 8019162:	b590      	push	{r4, r7, lr}
 8019164:	b087      	sub	sp, #28
 8019166:	af00      	add	r7, sp, #0
 8019168:	6078      	str	r0, [r7, #4]
 801916a:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	69db      	ldr	r3, [r3, #28]
 8019170:	4618      	mov	r0, r3
 8019172:	f004 facc 	bl	801d70e <_ZN18MockNamedValueList5beginEv>
 8019176:	6178      	str	r0, [r7, #20]
 8019178:	697b      	ldr	r3, [r7, #20]
 801917a:	2b00      	cmp	r3, #0
 801917c:	d022      	beq.n	80191c4 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801917e:	f107 030c 	add.w	r3, r7, #12
 8019182:	6979      	ldr	r1, [r7, #20]
 8019184:	4618      	mov	r0, r3
 8019186:	f004 fa06 	bl	801d596 <_ZNK22MockNamedValueListNode7getNameEv>
 801918a:	f107 030c 	add.w	r3, r7, #12
 801918e:	6839      	ldr	r1, [r7, #0]
 8019190:	4618      	mov	r0, r3
 8019192:	f7f2 f9b0 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 8019196:	4603      	mov	r3, r0
 8019198:	461c      	mov	r4, r3
 801919a:	f107 030c 	add.w	r3, r7, #12
 801919e:	4618      	mov	r0, r3
 80191a0:	f7f2 f99d 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80191a4:	2c00      	cmp	r4, #0
 80191a6:	d008      	beq.n	80191ba <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 80191a8:	6979      	ldr	r1, [r7, #20]
 80191aa:	6878      	ldr	r0, [r7, #4]
 80191ac:	f000 fba4 	bl	80198f8 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 80191b0:	4603      	mov	r3, r0
 80191b2:	2101      	movs	r1, #1
 80191b4:	4618      	mov	r0, r3
 80191b6:	f000 fbc5 	bl	8019944 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 80191ba:	6978      	ldr	r0, [r7, #20]
 80191bc:	f004 f9b0 	bl	801d520 <_ZN22MockNamedValueListNode4nextEv>
 80191c0:	6178      	str	r0, [r7, #20]
 80191c2:	e7d9      	b.n	8019178 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x16>
    }
}
 80191c4:	bf00      	nop
 80191c6:	371c      	adds	r7, #28
 80191c8:	46bd      	mov	sp, r7
 80191ca:	bd90      	pop	{r4, r7, pc}

080191cc <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::outputParameterWasPassed(const SimpleString& name)
{
 80191cc:	b590      	push	{r4, r7, lr}
 80191ce:	b087      	sub	sp, #28
 80191d0:	af00      	add	r7, sp, #0
 80191d2:	6078      	str	r0, [r7, #4]
 80191d4:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 80191d6:	687b      	ldr	r3, [r7, #4]
 80191d8:	6a1b      	ldr	r3, [r3, #32]
 80191da:	4618      	mov	r0, r3
 80191dc:	f004 fa97 	bl	801d70e <_ZN18MockNamedValueList5beginEv>
 80191e0:	6178      	str	r0, [r7, #20]
 80191e2:	697b      	ldr	r3, [r7, #20]
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	d022      	beq.n	801922e <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 80191e8:	f107 030c 	add.w	r3, r7, #12
 80191ec:	6979      	ldr	r1, [r7, #20]
 80191ee:	4618      	mov	r0, r3
 80191f0:	f004 f9d1 	bl	801d596 <_ZNK22MockNamedValueListNode7getNameEv>
 80191f4:	f107 030c 	add.w	r3, r7, #12
 80191f8:	6839      	ldr	r1, [r7, #0]
 80191fa:	4618      	mov	r0, r3
 80191fc:	f7f2 f97b 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 8019200:	4603      	mov	r3, r0
 8019202:	461c      	mov	r4, r3
 8019204:	f107 030c 	add.w	r3, r7, #12
 8019208:	4618      	mov	r0, r3
 801920a:	f7f2 f968 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801920e:	2c00      	cmp	r4, #0
 8019210:	d008      	beq.n	8019224 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 8019212:	6979      	ldr	r1, [r7, #20]
 8019214:	6878      	ldr	r0, [r7, #4]
 8019216:	f000 fb6f 	bl	80198f8 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801921a:	4603      	mov	r3, r0
 801921c:	2101      	movs	r1, #1
 801921e:	4618      	mov	r0, r3
 8019220:	f000 fb90 	bl	8019944 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 8019224:	6978      	ldr	r0, [r7, #20]
 8019226:	f004 f97b 	bl	801d520 <_ZN22MockNamedValueListNode4nextEv>
 801922a:	6178      	str	r0, [r7, #20]
 801922c:	e7d9      	b.n	80191e2 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801922e:	bf00      	nop
 8019230:	371c      	adds	r7, #28
 8019232:	46bd      	mov	sp, r7
 8019234:	bd90      	pop	{r4, r7, pc}
	...

08019238 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterValueString(const SimpleString& name)
{
 8019238:	b580      	push	{r7, lr}
 801923a:	b086      	sub	sp, #24
 801923c:	af00      	add	r7, sp, #0
 801923e:	60f8      	str	r0, [r7, #12]
 8019240:	60b9      	str	r1, [r7, #8]
 8019242:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 8019244:	68bb      	ldr	r3, [r7, #8]
 8019246:	69db      	ldr	r3, [r3, #28]
 8019248:	6879      	ldr	r1, [r7, #4]
 801924a:	4618      	mov	r0, r3
 801924c:	f004 fa30 	bl	801d6b0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8019250:	6178      	str	r0, [r7, #20]
    return (p) ? StringFrom(*p) : "failed";
 8019252:	697b      	ldr	r3, [r7, #20]
 8019254:	2b00      	cmp	r3, #0
 8019256:	d005      	beq.n	8019264 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x2c>
 8019258:	68fb      	ldr	r3, [r7, #12]
 801925a:	6979      	ldr	r1, [r7, #20]
 801925c:	4618      	mov	r0, r3
 801925e:	f7ff fa0b 	bl	8018678 <_Z10StringFromRK14MockNamedValue>
 8019262:	e003      	b.n	801926c <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x34>
 8019264:	4903      	ldr	r1, [pc, #12]	; (8019274 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x3c>)
 8019266:	68f8      	ldr	r0, [r7, #12]
 8019268:	f7f1 fd81 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
}
 801926c:	68f8      	ldr	r0, [r7, #12]
 801926e:	3718      	adds	r7, #24
 8019270:	46bd      	mov	sp, r7
 8019272:	bd80      	pop	{r7, pc}
 8019274:	08023e18 	.word	0x08023e18

08019278 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasInputParameter(const MockNamedValue& parameter)
{
 8019278:	b590      	push	{r4, r7, lr}
 801927a:	b087      	sub	sp, #28
 801927c:	af00      	add	r7, sp, #0
 801927e:	6078      	str	r0, [r7, #4]
 8019280:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(parameter.getName());
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	69dc      	ldr	r4, [r3, #28]
 8019286:	683b      	ldr	r3, [r7, #0]
 8019288:	681b      	ldr	r3, [r3, #0]
 801928a:	335c      	adds	r3, #92	; 0x5c
 801928c:	681b      	ldr	r3, [r3, #0]
 801928e:	f107 020c 	add.w	r2, r7, #12
 8019292:	6839      	ldr	r1, [r7, #0]
 8019294:	4610      	mov	r0, r2
 8019296:	4798      	blx	r3
 8019298:	f107 030c 	add.w	r3, r7, #12
 801929c:	4619      	mov	r1, r3
 801929e:	4620      	mov	r0, r4
 80192a0:	f004 fa06 	bl	801d6b0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 80192a4:	6178      	str	r0, [r7, #20]
 80192a6:	f107 030c 	add.w	r3, r7, #12
 80192aa:	4618      	mov	r0, r3
 80192ac:	f7f2 f917 	bl	800b4de <_ZN12SimpleStringD1Ev>
    return (p) ? p->equals(parameter) : ignoreOtherParameters_;
 80192b0:	697b      	ldr	r3, [r7, #20]
 80192b2:	2b00      	cmp	r3, #0
 80192b4:	d00d      	beq.n	80192d2 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x5a>
 80192b6:	697b      	ldr	r3, [r7, #20]
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	3350      	adds	r3, #80	; 0x50
 80192bc:	681b      	ldr	r3, [r3, #0]
 80192be:	6839      	ldr	r1, [r7, #0]
 80192c0:	6978      	ldr	r0, [r7, #20]
 80192c2:	4798      	blx	r3
 80192c4:	4603      	mov	r3, r0
 80192c6:	2b00      	cmp	r3, #0
 80192c8:	bf14      	ite	ne
 80192ca:	2301      	movne	r3, #1
 80192cc:	2300      	moveq	r3, #0
 80192ce:	b2db      	uxtb	r3, r3
 80192d0:	e006      	b.n	80192e0 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x68>
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	7b1b      	ldrb	r3, [r3, #12]
 80192d6:	2b00      	cmp	r3, #0
 80192d8:	bf14      	ite	ne
 80192da:	2301      	movne	r3, #1
 80192dc:	2300      	moveq	r3, #0
 80192de:	b2db      	uxtb	r3, r3
}
 80192e0:	4618      	mov	r0, r3
 80192e2:	371c      	adds	r7, #28
 80192e4:	46bd      	mov	sp, r7
 80192e6:	bd90      	pop	{r4, r7, pc}

080192e8 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasOutputParameter(const MockNamedValue& parameter)
{
 80192e8:	b590      	push	{r4, r7, lr}
 80192ea:	b087      	sub	sp, #28
 80192ec:	af00      	add	r7, sp, #0
 80192ee:	6078      	str	r0, [r7, #4]
 80192f0:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(parameter.getName());
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	6a1c      	ldr	r4, [r3, #32]
 80192f6:	683b      	ldr	r3, [r7, #0]
 80192f8:	681b      	ldr	r3, [r3, #0]
 80192fa:	335c      	adds	r3, #92	; 0x5c
 80192fc:	681b      	ldr	r3, [r3, #0]
 80192fe:	f107 020c 	add.w	r2, r7, #12
 8019302:	6839      	ldr	r1, [r7, #0]
 8019304:	4610      	mov	r0, r2
 8019306:	4798      	blx	r3
 8019308:	f107 030c 	add.w	r3, r7, #12
 801930c:	4619      	mov	r1, r3
 801930e:	4620      	mov	r0, r4
 8019310:	f004 f9ce 	bl	801d6b0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8019314:	6178      	str	r0, [r7, #20]
 8019316:	f107 030c 	add.w	r3, r7, #12
 801931a:	4618      	mov	r0, r3
 801931c:	f7f2 f8df 	bl	800b4de <_ZN12SimpleStringD1Ev>
    return (p) ? p->compatibleForCopying(parameter) : ignoreOtherParameters_;
 8019320:	697b      	ldr	r3, [r7, #20]
 8019322:	2b00      	cmp	r3, #0
 8019324:	d00d      	beq.n	8019342 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x5a>
 8019326:	697b      	ldr	r3, [r7, #20]
 8019328:	681b      	ldr	r3, [r3, #0]
 801932a:	3354      	adds	r3, #84	; 0x54
 801932c:	681b      	ldr	r3, [r3, #0]
 801932e:	6839      	ldr	r1, [r7, #0]
 8019330:	6978      	ldr	r0, [r7, #20]
 8019332:	4798      	blx	r3
 8019334:	4603      	mov	r3, r0
 8019336:	2b00      	cmp	r3, #0
 8019338:	bf14      	ite	ne
 801933a:	2301      	movne	r3, #1
 801933c:	2300      	moveq	r3, #0
 801933e:	b2db      	uxtb	r3, r3
 8019340:	e006      	b.n	8019350 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x68>
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	7b1b      	ldrb	r3, [r3, #12]
 8019346:	2b00      	cmp	r3, #0
 8019348:	bf14      	ite	ne
 801934a:	2301      	movne	r3, #1
 801934c:	2300      	moveq	r3, #0
 801934e:	b2db      	uxtb	r3, r3
}
 8019350:	4618      	mov	r0, r3
 8019352:	371c      	adds	r7, #28
 8019354:	46bd      	mov	sp, r7
 8019356:	bd90      	pop	{r4, r7, pc}

08019358 <_ZN23MockCheckedExpectedCall12callToStringEv>:

SimpleString MockCheckedExpectedCall::callToString()
{
 8019358:	b5f0      	push	{r4, r5, r6, r7, lr}
 801935a:	b0a1      	sub	sp, #132	; 0x84
 801935c:	af02      	add	r7, sp, #8
 801935e:	6078      	str	r0, [r7, #4]
 8019360:	6039      	str	r1, [r7, #0]
    SimpleString str;
 8019362:	49bc      	ldr	r1, [pc, #752]	; (8019654 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 8019364:	6878      	ldr	r0, [r7, #4]
 8019366:	f7f1 fd02 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
    if (isSpecificObjectExpected_)
 801936a:	683b      	ldr	r3, [r7, #0]
 801936c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8019370:	2b00      	cmp	r3, #0
 8019372:	d012      	beq.n	801939a <_ZN23MockCheckedExpectedCall12callToStringEv+0x42>
        str = StringFromFormat("(object address: %p)::", objectPtr_);
 8019374:	683b      	ldr	r3, [r7, #0]
 8019376:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8019378:	f107 030c 	add.w	r3, r7, #12
 801937c:	49b6      	ldr	r1, [pc, #728]	; (8019658 <_ZN23MockCheckedExpectedCall12callToStringEv+0x300>)
 801937e:	4618      	mov	r0, r3
 8019380:	f7f2 fdb4 	bl	800beec <_Z16StringFromFormatPKcz>
 8019384:	f107 030c 	add.w	r3, r7, #12
 8019388:	4619      	mov	r1, r3
 801938a:	6878      	ldr	r0, [r7, #4]
 801938c:	f7f1 fd5b 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 8019390:	f107 030c 	add.w	r3, r7, #12
 8019394:	4618      	mov	r0, r3
 8019396:	f7f2 f8a2 	bl	800b4de <_ZN12SimpleStringD1Ev>

    str += getName();
 801939a:	f107 0314 	add.w	r3, r7, #20
 801939e:	6839      	ldr	r1, [r7, #0]
 80193a0:	4618      	mov	r0, r3
 80193a2:	f7ff f989 	bl	80186b8 <_ZNK23MockCheckedExpectedCall7getNameEv>
 80193a6:	f107 0314 	add.w	r3, r7, #20
 80193aa:	4619      	mov	r1, r3
 80193ac:	6878      	ldr	r0, [r7, #4]
 80193ae:	f7f2 f913 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 80193b2:	f107 0314 	add.w	r3, r7, #20
 80193b6:	4618      	mov	r0, r3
 80193b8:	f7f2 f891 	bl	800b4de <_ZN12SimpleStringD1Ev>
    str += " -> ";
 80193bc:	49a7      	ldr	r1, [pc, #668]	; (801965c <_ZN23MockCheckedExpectedCall12callToStringEv+0x304>)
 80193be:	6878      	ldr	r0, [r7, #4]
 80193c0:	f7f2 f91c 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    if (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) {
 80193c4:	683b      	ldr	r3, [r7, #0]
 80193c6:	691b      	ldr	r3, [r3, #16]
 80193c8:	2b00      	cmp	r3, #0
 80193ca:	d02d      	beq.n	8019428 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        if (initialExpectedCallOrder_ == finalExpectedCallOrder_) {
 80193cc:	683b      	ldr	r3, [r7, #0]
 80193ce:	691a      	ldr	r2, [r3, #16]
 80193d0:	683b      	ldr	r3, [r7, #0]
 80193d2:	695b      	ldr	r3, [r3, #20]
 80193d4:	429a      	cmp	r2, r3
 80193d6:	d113      	bne.n	8019400 <_ZN23MockCheckedExpectedCall12callToStringEv+0xa8>
            str += StringFromFormat("expected call order: <%u> -> ", initialExpectedCallOrder_);
 80193d8:	683b      	ldr	r3, [r7, #0]
 80193da:	691a      	ldr	r2, [r3, #16]
 80193dc:	f107 031c 	add.w	r3, r7, #28
 80193e0:	499f      	ldr	r1, [pc, #636]	; (8019660 <_ZN23MockCheckedExpectedCall12callToStringEv+0x308>)
 80193e2:	4618      	mov	r0, r3
 80193e4:	f7f2 fd82 	bl	800beec <_Z16StringFromFormatPKcz>
 80193e8:	f107 031c 	add.w	r3, r7, #28
 80193ec:	4619      	mov	r1, r3
 80193ee:	6878      	ldr	r0, [r7, #4]
 80193f0:	f7f2 f8f2 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 80193f4:	f107 031c 	add.w	r3, r7, #28
 80193f8:	4618      	mov	r0, r3
 80193fa:	f7f2 f870 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80193fe:	e013      	b.n	8019428 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        } else {
            str += StringFromFormat("expected calls order: <%u..%u> -> ", initialExpectedCallOrder_, finalExpectedCallOrder_);
 8019400:	683b      	ldr	r3, [r7, #0]
 8019402:	691a      	ldr	r2, [r3, #16]
 8019404:	683b      	ldr	r3, [r7, #0]
 8019406:	695b      	ldr	r3, [r3, #20]
 8019408:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801940c:	4995      	ldr	r1, [pc, #596]	; (8019664 <_ZN23MockCheckedExpectedCall12callToStringEv+0x30c>)
 801940e:	f7f2 fd6d 	bl	800beec <_Z16StringFromFormatPKcz>
 8019412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019416:	4619      	mov	r1, r3
 8019418:	6878      	ldr	r0, [r7, #4]
 801941a:	f7f2 f8dd 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 801941e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019422:	4618      	mov	r0, r3
 8019424:	f7f2 f85b 	bl	800b4de <_ZN12SimpleStringD1Ev>
        }
    }

    if (inputParameters_->begin() == NULLPTR && outputParameters_->begin() == NULLPTR) {
 8019428:	683b      	ldr	r3, [r7, #0]
 801942a:	69db      	ldr	r3, [r3, #28]
 801942c:	4618      	mov	r0, r3
 801942e:	f004 f96e 	bl	801d70e <_ZN18MockNamedValueList5beginEv>
 8019432:	4603      	mov	r3, r0
 8019434:	2b00      	cmp	r3, #0
 8019436:	d109      	bne.n	801944c <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 8019438:	683b      	ldr	r3, [r7, #0]
 801943a:	6a1b      	ldr	r3, [r3, #32]
 801943c:	4618      	mov	r0, r3
 801943e:	f004 f966 	bl	801d70e <_ZN18MockNamedValueList5beginEv>
 8019442:	4603      	mov	r3, r0
 8019444:	2b00      	cmp	r3, #0
 8019446:	d101      	bne.n	801944c <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 8019448:	2301      	movs	r3, #1
 801944a:	e000      	b.n	801944e <_ZN23MockCheckedExpectedCall12callToStringEv+0xf6>
 801944c:	2300      	movs	r3, #0
 801944e:	2b00      	cmp	r3, #0
 8019450:	d00b      	beq.n	801946a <_ZN23MockCheckedExpectedCall12callToStringEv+0x112>
        str += (ignoreOtherParameters_) ? "all parameters ignored" : "no parameters";
 8019452:	683b      	ldr	r3, [r7, #0]
 8019454:	7b1b      	ldrb	r3, [r3, #12]
 8019456:	2b00      	cmp	r3, #0
 8019458:	d001      	beq.n	801945e <_ZN23MockCheckedExpectedCall12callToStringEv+0x106>
 801945a:	4b83      	ldr	r3, [pc, #524]	; (8019668 <_ZN23MockCheckedExpectedCall12callToStringEv+0x310>)
 801945c:	e000      	b.n	8019460 <_ZN23MockCheckedExpectedCall12callToStringEv+0x108>
 801945e:	4b83      	ldr	r3, [pc, #524]	; (801966c <_ZN23MockCheckedExpectedCall12callToStringEv+0x314>)
 8019460:	4619      	mov	r1, r3
 8019462:	6878      	ldr	r0, [r7, #4]
 8019464:	f7f2 f8ca 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
 8019468:	e0e3      	b.n	8019632 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
    } else {
        MockNamedValueListNode* p;

        for (p = inputParameters_->begin(); p; p = p->next()) {
 801946a:	683b      	ldr	r3, [r7, #0]
 801946c:	69db      	ldr	r3, [r3, #28]
 801946e:	4618      	mov	r0, r3
 8019470:	f004 f94d 	bl	801d70e <_ZN18MockNamedValueList5beginEv>
 8019474:	6778      	str	r0, [r7, #116]	; 0x74
 8019476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019478:	2b00      	cmp	r3, #0
 801947a:	d069      	beq.n	8019550 <_ZN23MockCheckedExpectedCall12callToStringEv+0x1f8>
            str += StringFromFormat("%s %s: <%s>", p->getType().asCharString(), p->getName().asCharString(), getInputParameterValueString(p->getName()).asCharString());
 801947c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019480:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8019482:	4618      	mov	r0, r3
 8019484:	f004 f89a 	bl	801d5bc <_ZNK22MockNamedValueListNode7getTypeEv>
 8019488:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801948c:	4618      	mov	r0, r3
 801948e:	f7f1 fff9 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 8019492:	4605      	mov	r5, r0
 8019494:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019498:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801949a:	4618      	mov	r0, r3
 801949c:	f004 f87b 	bl	801d596 <_ZNK22MockNamedValueListNode7getNameEv>
 80194a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80194a4:	4618      	mov	r0, r3
 80194a6:	f7f1 ffed 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 80194aa:	4606      	mov	r6, r0
 80194ac:	683b      	ldr	r3, [r7, #0]
 80194ae:	681b      	ldr	r3, [r3, #0]
 80194b0:	33a4      	adds	r3, #164	; 0xa4
 80194b2:	681c      	ldr	r4, [r3, #0]
 80194b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80194b8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80194ba:	4618      	mov	r0, r3
 80194bc:	f004 f86b 	bl	801d596 <_ZNK22MockNamedValueListNode7getNameEv>
 80194c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80194c4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80194c8:	6839      	ldr	r1, [r7, #0]
 80194ca:	4618      	mov	r0, r3
 80194cc:	47a0      	blx	r4
 80194ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80194d2:	4618      	mov	r0, r3
 80194d4:	f7f1 ffd6 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 80194d8:	4603      	mov	r3, r0
 80194da:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80194de:	9300      	str	r3, [sp, #0]
 80194e0:	4633      	mov	r3, r6
 80194e2:	462a      	mov	r2, r5
 80194e4:	4962      	ldr	r1, [pc, #392]	; (8019670 <_ZN23MockCheckedExpectedCall12callToStringEv+0x318>)
 80194e6:	f7f2 fd01 	bl	800beec <_Z16StringFromFormatPKcz>
 80194ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80194ee:	4619      	mov	r1, r3
 80194f0:	6878      	ldr	r0, [r7, #4]
 80194f2:	f7f2 f871 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 80194f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80194fa:	4618      	mov	r0, r3
 80194fc:	f7f1 ffef 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8019500:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019504:	4618      	mov	r0, r3
 8019506:	f7f1 ffea 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801950a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801950e:	4618      	mov	r0, r3
 8019510:	f7f1 ffe5 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8019514:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019518:	4618      	mov	r0, r3
 801951a:	f7f1 ffe0 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801951e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019522:	4618      	mov	r0, r3
 8019524:	f7f1 ffdb 	bl	800b4de <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 8019528:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801952a:	f003 fff9 	bl	801d520 <_ZN22MockNamedValueListNode4nextEv>
 801952e:	4603      	mov	r3, r0
 8019530:	2b00      	cmp	r3, #0
 8019532:	bf14      	ite	ne
 8019534:	2301      	movne	r3, #1
 8019536:	2300      	moveq	r3, #0
 8019538:	b2db      	uxtb	r3, r3
 801953a:	2b00      	cmp	r3, #0
 801953c:	d003      	beq.n	8019546 <_ZN23MockCheckedExpectedCall12callToStringEv+0x1ee>
 801953e:	494d      	ldr	r1, [pc, #308]	; (8019674 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 8019540:	6878      	ldr	r0, [r7, #4]
 8019542:	f7f2 f85b 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
        for (p = inputParameters_->begin(); p; p = p->next()) {
 8019546:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8019548:	f003 ffea 	bl	801d520 <_ZN22MockNamedValueListNode4nextEv>
 801954c:	6778      	str	r0, [r7, #116]	; 0x74
 801954e:	e792      	b.n	8019476 <_ZN23MockCheckedExpectedCall12callToStringEv+0x11e>
        }

        if (inputParameters_->begin() && outputParameters_->begin())
 8019550:	683b      	ldr	r3, [r7, #0]
 8019552:	69db      	ldr	r3, [r3, #28]
 8019554:	4618      	mov	r0, r3
 8019556:	f004 f8da 	bl	801d70e <_ZN18MockNamedValueList5beginEv>
 801955a:	4603      	mov	r3, r0
 801955c:	2b00      	cmp	r3, #0
 801955e:	d009      	beq.n	8019574 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 8019560:	683b      	ldr	r3, [r7, #0]
 8019562:	6a1b      	ldr	r3, [r3, #32]
 8019564:	4618      	mov	r0, r3
 8019566:	f004 f8d2 	bl	801d70e <_ZN18MockNamedValueList5beginEv>
 801956a:	4603      	mov	r3, r0
 801956c:	2b00      	cmp	r3, #0
 801956e:	d001      	beq.n	8019574 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 8019570:	2301      	movs	r3, #1
 8019572:	e000      	b.n	8019576 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21e>
 8019574:	2300      	movs	r3, #0
 8019576:	2b00      	cmp	r3, #0
 8019578:	d003      	beq.n	8019582 <_ZN23MockCheckedExpectedCall12callToStringEv+0x22a>
        {
            str += ", ";
 801957a:	493e      	ldr	r1, [pc, #248]	; (8019674 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801957c:	6878      	ldr	r0, [r7, #4]
 801957e:	f7f2 f83d 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
        }

        for (p = outputParameters_->begin(); p; p = p->next()) {
 8019582:	683b      	ldr	r3, [r7, #0]
 8019584:	6a1b      	ldr	r3, [r3, #32]
 8019586:	4618      	mov	r0, r3
 8019588:	f004 f8c1 	bl	801d70e <_ZN18MockNamedValueList5beginEv>
 801958c:	6778      	str	r0, [r7, #116]	; 0x74
 801958e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019590:	2b00      	cmp	r3, #0
 8019592:	d046      	beq.n	8019622 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ca>
            str += StringFromFormat("%s %s: <output>", p->getType().asCharString(), p->getName().asCharString());
 8019594:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8019598:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801959a:	4618      	mov	r0, r3
 801959c:	f004 f80e 	bl	801d5bc <_ZNK22MockNamedValueListNode7getTypeEv>
 80195a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80195a4:	4618      	mov	r0, r3
 80195a6:	f7f1 ff6d 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 80195aa:	4604      	mov	r4, r0
 80195ac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80195b0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80195b2:	4618      	mov	r0, r3
 80195b4:	f003 ffef 	bl	801d596 <_ZNK22MockNamedValueListNode7getNameEv>
 80195b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80195bc:	4618      	mov	r0, r3
 80195be:	f7f1 ff61 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 80195c2:	4603      	mov	r3, r0
 80195c4:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80195c8:	4622      	mov	r2, r4
 80195ca:	492b      	ldr	r1, [pc, #172]	; (8019678 <_ZN23MockCheckedExpectedCall12callToStringEv+0x320>)
 80195cc:	f7f2 fc8e 	bl	800beec <_Z16StringFromFormatPKcz>
 80195d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80195d4:	4619      	mov	r1, r3
 80195d6:	6878      	ldr	r0, [r7, #4]
 80195d8:	f7f1 fffe 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 80195dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80195e0:	4618      	mov	r0, r3
 80195e2:	f7f1 ff7c 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80195e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80195ea:	4618      	mov	r0, r3
 80195ec:	f7f1 ff77 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80195f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80195f4:	4618      	mov	r0, r3
 80195f6:	f7f1 ff72 	bl	800b4de <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 80195fa:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80195fc:	f003 ff90 	bl	801d520 <_ZN22MockNamedValueListNode4nextEv>
 8019600:	4603      	mov	r3, r0
 8019602:	2b00      	cmp	r3, #0
 8019604:	bf14      	ite	ne
 8019606:	2301      	movne	r3, #1
 8019608:	2300      	moveq	r3, #0
 801960a:	b2db      	uxtb	r3, r3
 801960c:	2b00      	cmp	r3, #0
 801960e:	d003      	beq.n	8019618 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2c0>
 8019610:	4918      	ldr	r1, [pc, #96]	; (8019674 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 8019612:	6878      	ldr	r0, [r7, #4]
 8019614:	f7f1 fff2 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
        for (p = outputParameters_->begin(); p; p = p->next()) {
 8019618:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801961a:	f003 ff81 	bl	801d520 <_ZN22MockNamedValueListNode4nextEv>
 801961e:	6778      	str	r0, [r7, #116]	; 0x74
 8019620:	e7b5      	b.n	801958e <_ZN23MockCheckedExpectedCall12callToStringEv+0x236>
        }

        if (ignoreOtherParameters_)
 8019622:	683b      	ldr	r3, [r7, #0]
 8019624:	7b1b      	ldrb	r3, [r3, #12]
 8019626:	2b00      	cmp	r3, #0
 8019628:	d003      	beq.n	8019632 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
            str += ", other parameters are ignored";
 801962a:	4914      	ldr	r1, [pc, #80]	; (801967c <_ZN23MockCheckedExpectedCall12callToStringEv+0x324>)
 801962c:	6878      	ldr	r0, [r7, #4]
 801962e:	f7f1 ffe5 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    }

    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 8019632:	683b      	ldr	r3, [r7, #0]
 8019634:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 8019636:	683b      	ldr	r3, [r7, #0]
 8019638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801963a:	2b01      	cmp	r3, #1
 801963c:	d101      	bne.n	8019642 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ea>
 801963e:	4c05      	ldr	r4, [pc, #20]	; (8019654 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 8019640:	e000      	b.n	8019644 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ec>
 8019642:	4c0f      	ldr	r4, [pc, #60]	; (8019680 <_ZN23MockCheckedExpectedCall12callToStringEv+0x328>)
 8019644:	683b      	ldr	r3, [r7, #0]
 8019646:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 8019648:	683a      	ldr	r2, [r7, #0]
 801964a:	6e92      	ldr	r2, [r2, #104]	; 0x68
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801964c:	2a01      	cmp	r2, #1
 801964e:	d119      	bne.n	8019684 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32c>
 8019650:	4a00      	ldr	r2, [pc, #0]	; (8019654 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 8019652:	e018      	b.n	8019686 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32e>
 8019654:	08023dac 	.word	0x08023dac
 8019658:	08023e20 	.word	0x08023e20
 801965c:	08023e38 	.word	0x08023e38
 8019660:	08023e40 	.word	0x08023e40
 8019664:	08023e60 	.word	0x08023e60
 8019668:	08023e84 	.word	0x08023e84
 801966c:	08023e9c 	.word	0x08023e9c
 8019670:	08023eac 	.word	0x08023eac
 8019674:	08023eb8 	.word	0x08023eb8
 8019678:	08023ebc 	.word	0x08023ebc
 801967c:	08023ecc 	.word	0x08023ecc
 8019680:	08023eec 	.word	0x08023eec
 8019684:	4a0c      	ldr	r2, [pc, #48]	; (80196b8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x360>)
 8019686:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 801968a:	9201      	str	r2, [sp, #4]
 801968c:	9300      	str	r3, [sp, #0]
 801968e:	4623      	mov	r3, r4
 8019690:	460a      	mov	r2, r1
 8019692:	490a      	ldr	r1, [pc, #40]	; (80196bc <_ZN23MockCheckedExpectedCall12callToStringEv+0x364>)
 8019694:	f7f2 fc2a 	bl	800beec <_Z16StringFromFormatPKcz>
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 8019698:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801969c:	4619      	mov	r1, r3
 801969e:	6878      	ldr	r0, [r7, #4]
 80196a0:	f7f1 ff9a 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 80196a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80196a8:	4618      	mov	r0, r3
 80196aa:	f7f1 ff18 	bl	800b4de <_ZN12SimpleStringD1Ev>

    return str;
 80196ae:	bf00      	nop
}
 80196b0:	6878      	ldr	r0, [r7, #4]
 80196b2:	377c      	adds	r7, #124	; 0x7c
 80196b4:	46bd      	mov	sp, r7
 80196b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80196b8:	08023eec 	.word	0x08023eec
 80196bc:	08023ef0 	.word	0x08023ef0

080196c0 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv>:

SimpleString MockCheckedExpectedCall::missingParametersToString()
{
 80196c0:	b590      	push	{r4, r7, lr}
 80196c2:	b095      	sub	sp, #84	; 0x54
 80196c4:	af00      	add	r7, sp, #0
 80196c6:	6078      	str	r0, [r7, #4]
 80196c8:	6039      	str	r1, [r7, #0]
    SimpleString str;
 80196ca:	496c      	ldr	r1, [pc, #432]	; (801987c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 80196cc:	6878      	ldr	r0, [r7, #4]
 80196ce:	f7f1 fb4e 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
	MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next()) {
 80196d2:	683b      	ldr	r3, [r7, #0]
 80196d4:	69db      	ldr	r3, [r3, #28]
 80196d6:	4618      	mov	r0, r3
 80196d8:	f004 f819 	bl	801d70e <_ZN18MockNamedValueList5beginEv>
 80196dc:	64f8      	str	r0, [r7, #76]	; 0x4c
 80196de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80196e0:	2b00      	cmp	r3, #0
 80196e2:	d05e      	beq.n	80197a2 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xe2>
        if (! item(p)->isMatchingActualCall()) {
 80196e4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80196e6:	6838      	ldr	r0, [r7, #0]
 80196e8:	f000 f906 	bl	80198f8 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 80196ec:	4603      	mov	r3, r0
 80196ee:	4618      	mov	r0, r3
 80196f0:	f000 f938 	bl	8019964 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 80196f4:	4603      	mov	r3, r0
 80196f6:	f083 0301 	eor.w	r3, r3, #1
 80196fa:	b2db      	uxtb	r3, r3
 80196fc:	2b00      	cmp	r3, #0
 80196fe:	d04b      	beq.n	8019798 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xd8>
            if (str != "") str += ", ";
 8019700:	f107 030c 	add.w	r3, r7, #12
 8019704:	495d      	ldr	r1, [pc, #372]	; (801987c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 8019706:	4618      	mov	r0, r3
 8019708:	f7f1 fb31 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801970c:	f107 030c 	add.w	r3, r7, #12
 8019710:	4619      	mov	r1, r3
 8019712:	6878      	ldr	r0, [r7, #4]
 8019714:	f7f1 ff34 	bl	800b580 <_ZneRK12SimpleStringS1_>
 8019718:	4603      	mov	r3, r0
 801971a:	461c      	mov	r4, r3
 801971c:	f107 030c 	add.w	r3, r7, #12
 8019720:	4618      	mov	r0, r3
 8019722:	f7f1 fedc 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8019726:	2c00      	cmp	r4, #0
 8019728:	d003      	beq.n	8019732 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x72>
 801972a:	4955      	ldr	r1, [pc, #340]	; (8019880 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801972c:	6878      	ldr	r0, [r7, #4]
 801972e:	f7f1 ff65 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 8019732:	f107 031c 	add.w	r3, r7, #28
 8019736:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8019738:	4618      	mov	r0, r3
 801973a:	f003 ff3f 	bl	801d5bc <_ZNK22MockNamedValueListNode7getTypeEv>
 801973e:	f107 031c 	add.w	r3, r7, #28
 8019742:	4618      	mov	r0, r3
 8019744:	f7f1 fe9e 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 8019748:	4604      	mov	r4, r0
 801974a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801974e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8019750:	4618      	mov	r0, r3
 8019752:	f003 ff20 	bl	801d596 <_ZNK22MockNamedValueListNode7getNameEv>
 8019756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801975a:	4618      	mov	r0, r3
 801975c:	f7f1 fe92 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 8019760:	4603      	mov	r3, r0
 8019762:	f107 0014 	add.w	r0, r7, #20
 8019766:	4622      	mov	r2, r4
 8019768:	4946      	ldr	r1, [pc, #280]	; (8019884 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801976a:	f7f2 fbbf 	bl	800beec <_Z16StringFromFormatPKcz>
 801976e:	f107 0314 	add.w	r3, r7, #20
 8019772:	4619      	mov	r1, r3
 8019774:	6878      	ldr	r0, [r7, #4]
 8019776:	f7f1 ff2f 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 801977a:	f107 0314 	add.w	r3, r7, #20
 801977e:	4618      	mov	r0, r3
 8019780:	f7f1 fead 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8019784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019788:	4618      	mov	r0, r3
 801978a:	f7f1 fea8 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801978e:	f107 031c 	add.w	r3, r7, #28
 8019792:	4618      	mov	r0, r3
 8019794:	f7f1 fea3 	bl	800b4de <_ZN12SimpleStringD1Ev>
    for (p = inputParameters_->begin(); p; p = p->next()) {
 8019798:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801979a:	f003 fec1 	bl	801d520 <_ZN22MockNamedValueListNode4nextEv>
 801979e:	64f8      	str	r0, [r7, #76]	; 0x4c
 80197a0:	e79d      	b.n	80196de <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1e>
        }
    }
    for (p = outputParameters_->begin(); p; p = p->next()) {
 80197a2:	683b      	ldr	r3, [r7, #0]
 80197a4:	6a1b      	ldr	r3, [r3, #32]
 80197a6:	4618      	mov	r0, r3
 80197a8:	f003 ffb1 	bl	801d70e <_ZN18MockNamedValueList5beginEv>
 80197ac:	64f8      	str	r0, [r7, #76]	; 0x4c
 80197ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80197b0:	2b00      	cmp	r3, #0
 80197b2:	d05e      	beq.n	8019872 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1b2>
        if (! item(p)->isMatchingActualCall()) {
 80197b4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80197b6:	6838      	ldr	r0, [r7, #0]
 80197b8:	f000 f89e 	bl	80198f8 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 80197bc:	4603      	mov	r3, r0
 80197be:	4618      	mov	r0, r3
 80197c0:	f000 f8d0 	bl	8019964 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 80197c4:	4603      	mov	r3, r0
 80197c6:	f083 0301 	eor.w	r3, r3, #1
 80197ca:	b2db      	uxtb	r3, r3
 80197cc:	2b00      	cmp	r3, #0
 80197ce:	d04b      	beq.n	8019868 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1a8>
            if (str != "") str += ", ";
 80197d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80197d4:	4929      	ldr	r1, [pc, #164]	; (801987c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 80197d6:	4618      	mov	r0, r3
 80197d8:	f7f1 fac9 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 80197dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80197e0:	4619      	mov	r1, r3
 80197e2:	6878      	ldr	r0, [r7, #4]
 80197e4:	f7f1 fecc 	bl	800b580 <_ZneRK12SimpleStringS1_>
 80197e8:	4603      	mov	r3, r0
 80197ea:	461c      	mov	r4, r3
 80197ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80197f0:	4618      	mov	r0, r3
 80197f2:	f7f1 fe74 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80197f6:	2c00      	cmp	r4, #0
 80197f8:	d003      	beq.n	8019802 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x142>
 80197fa:	4921      	ldr	r1, [pc, #132]	; (8019880 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 80197fc:	6878      	ldr	r0, [r7, #4]
 80197fe:	f7f1 fefd 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 8019802:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019806:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8019808:	4618      	mov	r0, r3
 801980a:	f003 fed7 	bl	801d5bc <_ZNK22MockNamedValueListNode7getTypeEv>
 801980e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019812:	4618      	mov	r0, r3
 8019814:	f7f1 fe36 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 8019818:	4604      	mov	r4, r0
 801981a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801981e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8019820:	4618      	mov	r0, r3
 8019822:	f003 feb8 	bl	801d596 <_ZNK22MockNamedValueListNode7getNameEv>
 8019826:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801982a:	4618      	mov	r0, r3
 801982c:	f7f1 fe2a 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 8019830:	4603      	mov	r3, r0
 8019832:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8019836:	4622      	mov	r2, r4
 8019838:	4912      	ldr	r1, [pc, #72]	; (8019884 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801983a:	f7f2 fb57 	bl	800beec <_Z16StringFromFormatPKcz>
 801983e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019842:	4619      	mov	r1, r3
 8019844:	6878      	ldr	r0, [r7, #4]
 8019846:	f7f1 fec7 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 801984a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801984e:	4618      	mov	r0, r3
 8019850:	f7f1 fe45 	bl	800b4de <_ZN12SimpleStringD1Ev>
 8019854:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019858:	4618      	mov	r0, r3
 801985a:	f7f1 fe40 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801985e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019862:	4618      	mov	r0, r3
 8019864:	f7f1 fe3b 	bl	800b4de <_ZN12SimpleStringD1Ev>
    for (p = outputParameters_->begin(); p; p = p->next()) {
 8019868:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801986a:	f003 fe59 	bl	801d520 <_ZN22MockNamedValueListNode4nextEv>
 801986e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8019870:	e79d      	b.n	80197ae <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xee>
        }
    }
    return str;
 8019872:	bf00      	nop
}
 8019874:	6878      	ldr	r0, [r7, #4]
 8019876:	3754      	adds	r7, #84	; 0x54
 8019878:	46bd      	mov	sp, r7
 801987a:	bd90      	pop	{r4, r7, pc}
 801987c:	08023dac 	.word	0x08023dac
 8019880:	08023eb8 	.word	0x08023eb8
 8019884:	08023f18 	.word	0x08023f18

08019888 <_ZN23MockCheckedExpectedCall9relatesToERK12SimpleString>:

bool MockCheckedExpectedCall::relatesTo(const SimpleString& functionName)
{
 8019888:	b590      	push	{r4, r7, lr}
 801988a:	b085      	sub	sp, #20
 801988c:	af00      	add	r7, sp, #0
 801988e:	6078      	str	r0, [r7, #4]
 8019890:	6039      	str	r1, [r7, #0]
    return functionName == getName();
 8019892:	f107 0308 	add.w	r3, r7, #8
 8019896:	6879      	ldr	r1, [r7, #4]
 8019898:	4618      	mov	r0, r3
 801989a:	f7fe ff0d 	bl	80186b8 <_ZNK23MockCheckedExpectedCall7getNameEv>
 801989e:	f107 0308 	add.w	r3, r7, #8
 80198a2:	4619      	mov	r1, r3
 80198a4:	6838      	ldr	r0, [r7, #0]
 80198a6:	f7f1 fe26 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 80198aa:	4603      	mov	r3, r0
 80198ac:	461c      	mov	r4, r3
 80198ae:	f107 0308 	add.w	r3, r7, #8
 80198b2:	4618      	mov	r0, r3
 80198b4:	f7f1 fe13 	bl	800b4de <_ZN12SimpleStringD1Ev>
 80198b8:	4623      	mov	r3, r4
}
 80198ba:	4618      	mov	r0, r3
 80198bc:	3714      	adds	r7, #20
 80198be:	46bd      	mov	sp, r7
 80198c0:	bd90      	pop	{r4, r7, pc}

080198c2 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv>:

bool MockCheckedExpectedCall::relatesToObject(const void* objectPtr) const
{
 80198c2:	b480      	push	{r7}
 80198c4:	b083      	sub	sp, #12
 80198c6:	af00      	add	r7, sp, #0
 80198c8:	6078      	str	r0, [r7, #4]
 80198ca:	6039      	str	r1, [r7, #0]
    return (!isSpecificObjectExpected_) || (objectPtr_ == objectPtr);
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80198d2:	f083 0301 	eor.w	r3, r3, #1
 80198d6:	b2db      	uxtb	r3, r3
 80198d8:	2b00      	cmp	r3, #0
 80198da:	d104      	bne.n	80198e6 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x24>
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80198e0:	683a      	ldr	r2, [r7, #0]
 80198e2:	429a      	cmp	r2, r3
 80198e4:	d101      	bne.n	80198ea <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x28>
 80198e6:	2301      	movs	r3, #1
 80198e8:	e000      	b.n	80198ec <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x2a>
 80198ea:	2300      	movs	r3, #0
}
 80198ec:	4618      	mov	r0, r3
 80198ee:	370c      	adds	r7, #12
 80198f0:	46bd      	mov	sp, r7
 80198f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198f6:	4770      	bx	lr

080198f8 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>:

MockCheckedExpectedCall::MockExpectedFunctionParameter* MockCheckedExpectedCall::item(MockNamedValueListNode* node)
{
 80198f8:	b580      	push	{r7, lr}
 80198fa:	b082      	sub	sp, #8
 80198fc:	af00      	add	r7, sp, #0
 80198fe:	6078      	str	r0, [r7, #4]
 8019900:	6039      	str	r1, [r7, #0]
    return (MockExpectedFunctionParameter*) node->item();
 8019902:	6838      	ldr	r0, [r7, #0]
 8019904:	f003 fe18 	bl	801d538 <_ZN22MockNamedValueListNode4itemEv>
 8019908:	4603      	mov	r3, r0
}
 801990a:	4618      	mov	r0, r3
 801990c:	3708      	adds	r7, #8
 801990e:	46bd      	mov	sp, r7
 8019910:	bd80      	pop	{r7, pc}
	...

08019914 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>:

MockCheckedExpectedCall::MockExpectedFunctionParameter::MockExpectedFunctionParameter(const SimpleString& name)
 8019914:	b580      	push	{r7, lr}
 8019916:	b082      	sub	sp, #8
 8019918:	af00      	add	r7, sp, #0
 801991a:	6078      	str	r0, [r7, #4]
 801991c:	6039      	str	r1, [r7, #0]
            : MockNamedValue(name), matchesActualCall_(false)
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	6839      	ldr	r1, [r7, #0]
 8019922:	4618      	mov	r0, r3
 8019924:	f001 ff48 	bl	801b7b8 <_ZN14MockNamedValueC1ERK12SimpleString>
 8019928:	4a05      	ldr	r2, [pc, #20]	; (8019940 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString+0x2c>)
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	601a      	str	r2, [r3, #0]
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	2200      	movs	r2, #0
 8019932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
{
}
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	4618      	mov	r0, r3
 801993a:	3708      	adds	r7, #8
 801993c:	46bd      	mov	sp, r7
 801993e:	bd80      	pop	{r7, pc}
 8019940:	08026614 	.word	0x08026614

08019944 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>:

void MockCheckedExpectedCall::MockExpectedFunctionParameter::setMatchesActualCall(bool b)
{
 8019944:	b480      	push	{r7}
 8019946:	b083      	sub	sp, #12
 8019948:	af00      	add	r7, sp, #0
 801994a:	6078      	str	r0, [r7, #4]
 801994c:	460b      	mov	r3, r1
 801994e:	70fb      	strb	r3, [r7, #3]
    matchesActualCall_ = b;
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	78fa      	ldrb	r2, [r7, #3]
 8019954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8019958:	bf00      	nop
 801995a:	370c      	adds	r7, #12
 801995c:	46bd      	mov	sp, r7
 801995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019962:	4770      	bx	lr

08019964 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::MockExpectedFunctionParameter::isMatchingActualCall() const
{
 8019964:	b480      	push	{r7}
 8019966:	b083      	sub	sp, #12
 8019968:	af00      	add	r7, sp, #0
 801996a:	6078      	str	r0, [r7, #4]
    return matchesActualCall_;
 801996c:	687b      	ldr	r3, [r7, #4]
 801996e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 8019972:	4618      	mov	r0, r3
 8019974:	370c      	adds	r7, #12
 8019976:	46bd      	mov	sp, r7
 8019978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801997c:	4770      	bx	lr
	...

08019980 <_ZN23MockCheckedExpectedCall14andReturnValueEb>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(bool value)
{
 8019980:	b580      	push	{r7, lr}
 8019982:	b082      	sub	sp, #8
 8019984:	af00      	add	r7, sp, #0
 8019986:	6078      	str	r0, [r7, #4]
 8019988:	460b      	mov	r3, r1
 801998a:	70fb      	strb	r3, [r7, #3]
    returnValue_.setName("returnValue");
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	3328      	adds	r3, #40	; 0x28
 8019990:	4907      	ldr	r1, [pc, #28]	; (80199b0 <_ZN23MockCheckedExpectedCall14andReturnValueEb+0x30>)
 8019992:	4618      	mov	r0, r3
 8019994:	f002 f9b4 	bl	801bd00 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	3328      	adds	r3, #40	; 0x28
 801999c:	78fa      	ldrb	r2, [r7, #3]
 801999e:	4611      	mov	r1, r2
 80199a0:	4618      	mov	r0, r3
 80199a2:	f001 ff5b 	bl	801b85c <_ZN14MockNamedValue8setValueEb>
    return *this;
 80199a6:	687b      	ldr	r3, [r7, #4]
}
 80199a8:	4618      	mov	r0, r3
 80199aa:	3708      	adds	r7, #8
 80199ac:	46bd      	mov	sp, r7
 80199ae:	bd80      	pop	{r7, pc}
 80199b0:	08023f20 	.word	0x08023f20

080199b4 <_ZN23MockCheckedExpectedCall14andReturnValueEj>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned int value)
{
 80199b4:	b580      	push	{r7, lr}
 80199b6:	b082      	sub	sp, #8
 80199b8:	af00      	add	r7, sp, #0
 80199ba:	6078      	str	r0, [r7, #4]
 80199bc:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 80199be:	687b      	ldr	r3, [r7, #4]
 80199c0:	3328      	adds	r3, #40	; 0x28
 80199c2:	4907      	ldr	r1, [pc, #28]	; (80199e0 <_ZN23MockCheckedExpectedCall14andReturnValueEj+0x2c>)
 80199c4:	4618      	mov	r0, r3
 80199c6:	f002 f99b 	bl	801bd00 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	3328      	adds	r3, #40	; 0x28
 80199ce:	6839      	ldr	r1, [r7, #0]
 80199d0:	4618      	mov	r0, r3
 80199d2:	f001 ff67 	bl	801b8a4 <_ZN14MockNamedValue8setValueEj>
    return *this;
 80199d6:	687b      	ldr	r3, [r7, #4]
}
 80199d8:	4618      	mov	r0, r3
 80199da:	3708      	adds	r7, #8
 80199dc:	46bd      	mov	sp, r7
 80199de:	bd80      	pop	{r7, pc}
 80199e0:	08023f20 	.word	0x08023f20

080199e4 <_ZN23MockCheckedExpectedCall14andReturnValueEi>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(int value)
{
 80199e4:	b580      	push	{r7, lr}
 80199e6:	b082      	sub	sp, #8
 80199e8:	af00      	add	r7, sp, #0
 80199ea:	6078      	str	r0, [r7, #4]
 80199ec:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	3328      	adds	r3, #40	; 0x28
 80199f2:	4907      	ldr	r1, [pc, #28]	; (8019a10 <_ZN23MockCheckedExpectedCall14andReturnValueEi+0x2c>)
 80199f4:	4618      	mov	r0, r3
 80199f6:	f002 f983 	bl	801bd00 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 80199fa:	687b      	ldr	r3, [r7, #4]
 80199fc:	3328      	adds	r3, #40	; 0x28
 80199fe:	6839      	ldr	r1, [r7, #0]
 8019a00:	4618      	mov	r0, r3
 8019a02:	f001 ff71 	bl	801b8e8 <_ZN14MockNamedValue8setValueEi>
    return *this;
 8019a06:	687b      	ldr	r3, [r7, #4]
}
 8019a08:	4618      	mov	r0, r3
 8019a0a:	3708      	adds	r7, #8
 8019a0c:	46bd      	mov	sp, r7
 8019a0e:	bd80      	pop	{r7, pc}
 8019a10:	08023f20 	.word	0x08023f20

08019a14 <_ZN23MockCheckedExpectedCall14andReturnValueEl>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(long int value)
{
 8019a14:	b580      	push	{r7, lr}
 8019a16:	b082      	sub	sp, #8
 8019a18:	af00      	add	r7, sp, #0
 8019a1a:	6078      	str	r0, [r7, #4]
 8019a1c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8019a1e:	687b      	ldr	r3, [r7, #4]
 8019a20:	3328      	adds	r3, #40	; 0x28
 8019a22:	4907      	ldr	r1, [pc, #28]	; (8019a40 <_ZN23MockCheckedExpectedCall14andReturnValueEl+0x2c>)
 8019a24:	4618      	mov	r0, r3
 8019a26:	f002 f96b 	bl	801bd00 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8019a2a:	687b      	ldr	r3, [r7, #4]
 8019a2c:	3328      	adds	r3, #40	; 0x28
 8019a2e:	6839      	ldr	r1, [r7, #0]
 8019a30:	4618      	mov	r0, r3
 8019a32:	f001 ff7b 	bl	801b92c <_ZN14MockNamedValue8setValueEl>
    return *this;
 8019a36:	687b      	ldr	r3, [r7, #4]
}
 8019a38:	4618      	mov	r0, r3
 8019a3a:	3708      	adds	r7, #8
 8019a3c:	46bd      	mov	sp, r7
 8019a3e:	bd80      	pop	{r7, pc}
 8019a40:	08023f20 	.word	0x08023f20

08019a44 <_ZN23MockCheckedExpectedCall14andReturnValueEm>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned long int value)
{
 8019a44:	b580      	push	{r7, lr}
 8019a46:	b082      	sub	sp, #8
 8019a48:	af00      	add	r7, sp, #0
 8019a4a:	6078      	str	r0, [r7, #4]
 8019a4c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	3328      	adds	r3, #40	; 0x28
 8019a52:	4907      	ldr	r1, [pc, #28]	; (8019a70 <_ZN23MockCheckedExpectedCall14andReturnValueEm+0x2c>)
 8019a54:	4618      	mov	r0, r3
 8019a56:	f002 f953 	bl	801bd00 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	3328      	adds	r3, #40	; 0x28
 8019a5e:	6839      	ldr	r1, [r7, #0]
 8019a60:	4618      	mov	r0, r3
 8019a62:	f001 ff85 	bl	801b970 <_ZN14MockNamedValue8setValueEm>
    return *this;
 8019a66:	687b      	ldr	r3, [r7, #4]
}
 8019a68:	4618      	mov	r0, r3
 8019a6a:	3708      	adds	r7, #8
 8019a6c:	46bd      	mov	sp, r7
 8019a6e:	bd80      	pop	{r7, pc}
 8019a70:	08023f20 	.word	0x08023f20

08019a74 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_longlong)
{
 8019a74:	b5b0      	push	{r4, r5, r7, lr}
 8019a76:	b086      	sub	sp, #24
 8019a78:	af02      	add	r7, sp, #8
 8019a7a:	60f8      	str	r0, [r7, #12]
 8019a7c:	1d3b      	adds	r3, r7, #4
 8019a7e:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 8019a82:	f7f8 fd57 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 8019a86:	4604      	mov	r4, r0
 8019a88:	6823      	ldr	r3, [r4, #0]
 8019a8a:	3368      	adds	r3, #104	; 0x68
 8019a8c:	681d      	ldr	r5, [r3, #0]
 8019a8e:	f7f8 fd61 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019a92:	4603      	mov	r3, r0
 8019a94:	9300      	str	r3, [sp, #0]
 8019a96:	f240 2319 	movw	r3, #537	; 0x219
 8019a9a:	4a04      	ldr	r2, [pc, #16]	; (8019aac <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x38>)
 8019a9c:	4904      	ldr	r1, [pc, #16]	; (8019ab0 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x3c>)
 8019a9e:	4620      	mov	r0, r4
 8019aa0:	47a8      	blx	r5
    return *this;
 8019aa2:	68fb      	ldr	r3, [r7, #12]
}
 8019aa4:	4618      	mov	r0, r3
 8019aa6:	3710      	adds	r7, #16
 8019aa8:	46bd      	mov	sp, r7
 8019aaa:	bdb0      	pop	{r4, r5, r7, pc}
 8019aac:	08023db0 	.word	0x08023db0
 8019ab0:	08023dcc 	.word	0x08023dcc

08019ab4 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_ulonglong)
{
 8019ab4:	b5b0      	push	{r4, r5, r7, lr}
 8019ab6:	b086      	sub	sp, #24
 8019ab8:	af02      	add	r7, sp, #8
 8019aba:	60f8      	str	r0, [r7, #12]
 8019abc:	1d3b      	adds	r3, r7, #4
 8019abe:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 8019ac2:	f7f8 fd37 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 8019ac6:	4604      	mov	r4, r0
 8019ac8:	6823      	ldr	r3, [r4, #0]
 8019aca:	3368      	adds	r3, #104	; 0x68
 8019acc:	681d      	ldr	r5, [r3, #0]
 8019ace:	f7f8 fd41 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019ad2:	4603      	mov	r3, r0
 8019ad4:	9300      	str	r3, [sp, #0]
 8019ad6:	f240 231f 	movw	r3, #543	; 0x21f
 8019ada:	4a04      	ldr	r2, [pc, #16]	; (8019aec <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x38>)
 8019adc:	4904      	ldr	r1, [pc, #16]	; (8019af0 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x3c>)
 8019ade:	4620      	mov	r0, r4
 8019ae0:	47a8      	blx	r5
    return *this;
 8019ae2:	68fb      	ldr	r3, [r7, #12]
}
 8019ae4:	4618      	mov	r0, r3
 8019ae6:	3710      	adds	r7, #16
 8019ae8:	46bd      	mov	sp, r7
 8019aea:	bdb0      	pop	{r4, r5, r7, pc}
 8019aec:	08023db0 	.word	0x08023db0
 8019af0:	08023dec 	.word	0x08023dec

08019af4 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc>:

#endif

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const char* value)
{
 8019af4:	b580      	push	{r7, lr}
 8019af6:	b082      	sub	sp, #8
 8019af8:	af00      	add	r7, sp, #0
 8019afa:	6078      	str	r0, [r7, #4]
 8019afc:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	3328      	adds	r3, #40	; 0x28
 8019b02:	4907      	ldr	r1, [pc, #28]	; (8019b20 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc+0x2c>)
 8019b04:	4618      	mov	r0, r3
 8019b06:	f002 f8fb 	bl	801bd00 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	3328      	adds	r3, #40	; 0x28
 8019b0e:	6839      	ldr	r1, [r7, #0]
 8019b10:	4618      	mov	r0, r3
 8019b12:	f002 f837 	bl	801bb84 <_ZN14MockNamedValue8setValueEPKc>
    return *this;
 8019b16:	687b      	ldr	r3, [r7, #4]
}
 8019b18:	4618      	mov	r0, r3
 8019b1a:	3708      	adds	r7, #8
 8019b1c:	46bd      	mov	sp, r7
 8019b1e:	bd80      	pop	{r7, pc}
 8019b20:	08023f20 	.word	0x08023f20

08019b24 <_ZN23MockCheckedExpectedCall14andReturnValueEd>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(double value)
{
 8019b24:	b580      	push	{r7, lr}
 8019b26:	b084      	sub	sp, #16
 8019b28:	af00      	add	r7, sp, #0
 8019b2a:	60f8      	str	r0, [r7, #12]
 8019b2c:	ed87 0b00 	vstr	d0, [r7]
    returnValue_.setName("returnValue");
 8019b30:	68fb      	ldr	r3, [r7, #12]
 8019b32:	3328      	adds	r3, #40	; 0x28
 8019b34:	4907      	ldr	r1, [pc, #28]	; (8019b54 <_ZN23MockCheckedExpectedCall14andReturnValueEd+0x30>)
 8019b36:	4618      	mov	r0, r3
 8019b38:	f002 f8e2 	bl	801bd00 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8019b3c:	68fb      	ldr	r3, [r7, #12]
 8019b3e:	3328      	adds	r3, #40	; 0x28
 8019b40:	ed97 0b00 	vldr	d0, [r7]
 8019b44:	4618      	mov	r0, r3
 8019b46:	f001 ff73 	bl	801ba30 <_ZN14MockNamedValue8setValueEd>
    return *this;
 8019b4a:	68fb      	ldr	r3, [r7, #12]
}
 8019b4c:	4618      	mov	r0, r3
 8019b4e:	3710      	adds	r7, #16
 8019b50:	46bd      	mov	sp, r7
 8019b52:	bd80      	pop	{r7, pc}
 8019b54:	08023f20 	.word	0x08023f20

08019b58 <_ZN23MockCheckedExpectedCall14andReturnValueEPv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void* value)
{
 8019b58:	b580      	push	{r7, lr}
 8019b5a:	b082      	sub	sp, #8
 8019b5c:	af00      	add	r7, sp, #0
 8019b5e:	6078      	str	r0, [r7, #4]
 8019b60:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	3328      	adds	r3, #40	; 0x28
 8019b66:	4907      	ldr	r1, [pc, #28]	; (8019b84 <_ZN23MockCheckedExpectedCall14andReturnValueEPv+0x2c>)
 8019b68:	4618      	mov	r0, r3
 8019b6a:	f002 f8c9 	bl	801bd00 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	3328      	adds	r3, #40	; 0x28
 8019b72:	6839      	ldr	r1, [r7, #0]
 8019b74:	4618      	mov	r0, r3
 8019b76:	f001 ff9f 	bl	801bab8 <_ZN14MockNamedValue8setValueEPv>
    return *this;
 8019b7a:	687b      	ldr	r3, [r7, #4]
}
 8019b7c:	4618      	mov	r0, r3
 8019b7e:	3708      	adds	r7, #8
 8019b80:	46bd      	mov	sp, r7
 8019b82:	bd80      	pop	{r7, pc}
 8019b84:	08023f20 	.word	0x08023f20

08019b88 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const void* value)
{
 8019b88:	b580      	push	{r7, lr}
 8019b8a:	b082      	sub	sp, #8
 8019b8c:	af00      	add	r7, sp, #0
 8019b8e:	6078      	str	r0, [r7, #4]
 8019b90:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	3328      	adds	r3, #40	; 0x28
 8019b96:	4907      	ldr	r1, [pc, #28]	; (8019bb4 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv+0x2c>)
 8019b98:	4618      	mov	r0, r3
 8019b9a:	f002 f8b1 	bl	801bd00 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8019b9e:	687b      	ldr	r3, [r7, #4]
 8019ba0:	3328      	adds	r3, #40	; 0x28
 8019ba2:	6839      	ldr	r1, [r7, #0]
 8019ba4:	4618      	mov	r0, r3
 8019ba6:	f001 ffa9 	bl	801bafc <_ZN14MockNamedValue8setValueEPKv>
    return *this;
 8019baa:	687b      	ldr	r3, [r7, #4]
}
 8019bac:	4618      	mov	r0, r3
 8019bae:	3708      	adds	r7, #8
 8019bb0:	46bd      	mov	sp, r7
 8019bb2:	bd80      	pop	{r7, pc}
 8019bb4:	08023f20 	.word	0x08023f20

08019bb8 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void (*value)())
{
 8019bb8:	b580      	push	{r7, lr}
 8019bba:	b082      	sub	sp, #8
 8019bbc:	af00      	add	r7, sp, #0
 8019bbe:	6078      	str	r0, [r7, #4]
 8019bc0:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	3328      	adds	r3, #40	; 0x28
 8019bc6:	4907      	ldr	r1, [pc, #28]	; (8019be4 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE+0x2c>)
 8019bc8:	4618      	mov	r0, r3
 8019bca:	f002 f899 	bl	801bd00 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8019bce:	687b      	ldr	r3, [r7, #4]
 8019bd0:	3328      	adds	r3, #40	; 0x28
 8019bd2:	6839      	ldr	r1, [r7, #0]
 8019bd4:	4618      	mov	r0, r3
 8019bd6:	f001 ffb3 	bl	801bb40 <_ZN14MockNamedValue8setValueEPFvvE>
    return *this;
 8019bda:	687b      	ldr	r3, [r7, #4]
}
 8019bdc:	4618      	mov	r0, r3
 8019bde:	3708      	adds	r7, #8
 8019be0:	46bd      	mov	sp, r7
 8019be2:	bd80      	pop	{r7, pc}
 8019be4:	08023f20 	.word	0x08023f20

08019be8 <_ZN23MockCheckedExpectedCall8onObjectEPv>:

MockExpectedCall& MockCheckedExpectedCall::onObject(void* objectPtr)
{
 8019be8:	b480      	push	{r7}
 8019bea:	b083      	sub	sp, #12
 8019bec:	af00      	add	r7, sp, #0
 8019bee:	6078      	str	r0, [r7, #4]
 8019bf0:	6039      	str	r1, [r7, #0]
    isSpecificObjectExpected_ = true;
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	2201      	movs	r2, #1
 8019bf6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    wasPassedToObject_ = false;
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	2200      	movs	r2, #0
 8019bfe:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    objectPtr_ = objectPtr;
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	683a      	ldr	r2, [r7, #0]
 8019c06:	661a      	str	r2, [r3, #96]	; 0x60
    return *this;
 8019c08:	687b      	ldr	r3, [r7, #4]
}
 8019c0a:	4618      	mov	r0, r3
 8019c0c:	370c      	adds	r7, #12
 8019c0e:	46bd      	mov	sp, r7
 8019c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c14:	4770      	bx	lr

08019c16 <_ZN23MockCheckedExpectedCall11returnValueEv>:

MockNamedValue MockCheckedExpectedCall::returnValue()
{
 8019c16:	b580      	push	{r7, lr}
 8019c18:	b082      	sub	sp, #8
 8019c1a:	af00      	add	r7, sp, #0
 8019c1c:	6078      	str	r0, [r7, #4]
 8019c1e:	6039      	str	r1, [r7, #0]
    return returnValue_;
 8019c20:	683b      	ldr	r3, [r7, #0]
 8019c22:	3328      	adds	r3, #40	; 0x28
 8019c24:	4619      	mov	r1, r3
 8019c26:	6878      	ldr	r0, [r7, #4]
 8019c28:	f7ef f946 	bl	8008eb8 <_ZN14MockNamedValueC1ERKS_>
}
 8019c2c:	6878      	ldr	r0, [r7, #4]
 8019c2e:	3708      	adds	r7, #8
 8019c30:	46bd      	mov	sp, r7
 8019c32:	bd80      	pop	{r7, pc}

08019c34 <_ZN23MockCheckedExpectedCall13withCallOrderEjj>:

MockExpectedCall& MockCheckedExpectedCall::withCallOrder(unsigned int initialCallOrder, unsigned int finalCallOrder)
{
 8019c34:	b480      	push	{r7}
 8019c36:	b085      	sub	sp, #20
 8019c38:	af00      	add	r7, sp, #0
 8019c3a:	60f8      	str	r0, [r7, #12]
 8019c3c:	60b9      	str	r1, [r7, #8]
 8019c3e:	607a      	str	r2, [r7, #4]
    initialExpectedCallOrder_ = initialCallOrder;
 8019c40:	68fb      	ldr	r3, [r7, #12]
 8019c42:	68ba      	ldr	r2, [r7, #8]
 8019c44:	611a      	str	r2, [r3, #16]
    finalExpectedCallOrder_ = finalCallOrder;
 8019c46:	68fb      	ldr	r3, [r7, #12]
 8019c48:	687a      	ldr	r2, [r7, #4]
 8019c4a:	615a      	str	r2, [r3, #20]
    return *this;
 8019c4c:	68fb      	ldr	r3, [r7, #12]
}
 8019c4e:	4618      	mov	r0, r3
 8019c50:	3714      	adds	r7, #20
 8019c52:	46bd      	mov	sp, r7
 8019c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c58:	4770      	bx	lr

08019c5a <_ZNK23MockCheckedExpectedCall12isOutOfOrderEv>:

bool MockCheckedExpectedCall::isOutOfOrder() const
{
 8019c5a:	b480      	push	{r7}
 8019c5c:	b083      	sub	sp, #12
 8019c5e:	af00      	add	r7, sp, #0
 8019c60:	6078      	str	r0, [r7, #4]
    return outOfOrder_;
 8019c62:	687b      	ldr	r3, [r7, #4]
 8019c64:	7e1b      	ldrb	r3, [r3, #24]
}
 8019c66:	4618      	mov	r0, r3
 8019c68:	370c      	adds	r7, #12
 8019c6a:	46bd      	mov	sp, r7
 8019c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c70:	4770      	bx	lr

08019c72 <_ZNK23MockCheckedExpectedCall23getActualCallsFulfilledEv>:

unsigned int MockCheckedExpectedCall::getActualCallsFulfilled() const
{
 8019c72:	b480      	push	{r7}
 8019c74:	b083      	sub	sp, #12
 8019c76:	af00      	add	r7, sp, #0
 8019c78:	6078      	str	r0, [r7, #4]
    return actualCalls_;
 8019c7a:	687b      	ldr	r3, [r7, #4]
 8019c7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
 8019c7e:	4618      	mov	r0, r3
 8019c80:	370c      	adds	r7, #12
 8019c82:	46bd      	mov	sp, r7
 8019c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c88:	4770      	bx	lr
	...

08019c8c <_ZN23MockIgnoredExpectedCallC1Ev>:
class MockIgnoredExpectedCall: public MockExpectedCall
 8019c8c:	b580      	push	{r7, lr}
 8019c8e:	b082      	sub	sp, #8
 8019c90:	af00      	add	r7, sp, #0
 8019c92:	6078      	str	r0, [r7, #4]
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	4618      	mov	r0, r3
 8019c98:	f7fe fcce 	bl	8018638 <_ZN16MockExpectedCallC1Ev>
 8019c9c:	4a03      	ldr	r2, [pc, #12]	; (8019cac <_ZN23MockIgnoredExpectedCallC1Ev+0x20>)
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	601a      	str	r2, [r3, #0]
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	4618      	mov	r0, r3
 8019ca6:	3708      	adds	r7, #8
 8019ca8:	46bd      	mov	sp, r7
 8019caa:	bd80      	pop	{r7, pc}
 8019cac:	08026474 	.word	0x08026474

08019cb0 <__tcf_0>:

MockExpectedCall& MockIgnoredExpectedCall::instance()
{
    static MockIgnoredExpectedCall call;
 8019cb0:	b580      	push	{r7, lr}
 8019cb2:	af00      	add	r7, sp, #0
 8019cb4:	4801      	ldr	r0, [pc, #4]	; (8019cbc <__tcf_0+0xc>)
 8019cb6:	f000 f831 	bl	8019d1c <_ZN23MockIgnoredExpectedCallD1Ev>
 8019cba:	bd80      	pop	{r7, pc}
 8019cbc:	20000d58 	.word	0x20000d58

08019cc0 <_ZN23MockIgnoredExpectedCall8instanceEv>:
{
 8019cc0:	b580      	push	{r7, lr}
 8019cc2:	af00      	add	r7, sp, #0
    static MockIgnoredExpectedCall call;
 8019cc4:	4b12      	ldr	r3, [pc, #72]	; (8019d10 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 8019cc6:	781b      	ldrb	r3, [r3, #0]
 8019cc8:	f3bf 8f5b 	dmb	ish
 8019ccc:	b2db      	uxtb	r3, r3
 8019cce:	f003 0301 	and.w	r3, r3, #1
 8019cd2:	2b00      	cmp	r3, #0
 8019cd4:	bf0c      	ite	eq
 8019cd6:	2301      	moveq	r3, #1
 8019cd8:	2300      	movne	r3, #0
 8019cda:	b2db      	uxtb	r3, r3
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d013      	beq.n	8019d08 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 8019ce0:	480b      	ldr	r0, [pc, #44]	; (8019d10 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 8019ce2:	f003 ff05 	bl	801daf0 <__cxa_guard_acquire>
 8019ce6:	4603      	mov	r3, r0
 8019ce8:	2b00      	cmp	r3, #0
 8019cea:	bf14      	ite	ne
 8019cec:	2301      	movne	r3, #1
 8019cee:	2300      	moveq	r3, #0
 8019cf0:	b2db      	uxtb	r3, r3
 8019cf2:	2b00      	cmp	r3, #0
 8019cf4:	d008      	beq.n	8019d08 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 8019cf6:	4807      	ldr	r0, [pc, #28]	; (8019d14 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
 8019cf8:	f7ff ffc8 	bl	8019c8c <_ZN23MockIgnoredExpectedCallC1Ev>
 8019cfc:	4804      	ldr	r0, [pc, #16]	; (8019d10 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 8019cfe:	f003 ff03 	bl	801db08 <__cxa_guard_release>
 8019d02:	4805      	ldr	r0, [pc, #20]	; (8019d18 <_ZN23MockIgnoredExpectedCall8instanceEv+0x58>)
 8019d04:	f003 ff27 	bl	801db56 <atexit>
    return call;
 8019d08:	4b02      	ldr	r3, [pc, #8]	; (8019d14 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
}
 8019d0a:	4618      	mov	r0, r3
 8019d0c:	bd80      	pop	{r7, pc}
 8019d0e:	bf00      	nop
 8019d10:	20000d5c 	.word	0x20000d5c
 8019d14:	20000d58 	.word	0x20000d58
 8019d18:	08019cb1 	.word	0x08019cb1

08019d1c <_ZN23MockIgnoredExpectedCallD1Ev>:
 8019d1c:	b580      	push	{r7, lr}
 8019d1e:	b082      	sub	sp, #8
 8019d20:	af00      	add	r7, sp, #0
 8019d22:	6078      	str	r0, [r7, #4]
 8019d24:	4a05      	ldr	r2, [pc, #20]	; (8019d3c <_ZN23MockIgnoredExpectedCallD1Ev+0x20>)
 8019d26:	687b      	ldr	r3, [r7, #4]
 8019d28:	601a      	str	r2, [r3, #0]
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	4618      	mov	r0, r3
 8019d2e:	f7fe fc93 	bl	8018658 <_ZN16MockExpectedCallD1Ev>
 8019d32:	687b      	ldr	r3, [r7, #4]
 8019d34:	4618      	mov	r0, r3
 8019d36:	3708      	adds	r7, #8
 8019d38:	46bd      	mov	sp, r7
 8019d3a:	bd80      	pop	{r7, pc}
 8019d3c:	08026474 	.word	0x08026474

08019d40 <_ZN23MockIgnoredExpectedCallD0Ev>:
 8019d40:	b580      	push	{r7, lr}
 8019d42:	b082      	sub	sp, #8
 8019d44:	af00      	add	r7, sp, #0
 8019d46:	6078      	str	r0, [r7, #4]
 8019d48:	6878      	ldr	r0, [r7, #4]
 8019d4a:	f7ff ffe7 	bl	8019d1c <_ZN23MockIgnoredExpectedCallD1Ev>
 8019d4e:	2104      	movs	r1, #4
 8019d50:	6878      	ldr	r0, [r7, #4]
 8019d52:	f7ee fc5d 	bl	8008610 <_ZdlPvj>
 8019d56:	687b      	ldr	r3, [r7, #4]
 8019d58:	4618      	mov	r0, r3
 8019d5a:	3708      	adds	r7, #8
 8019d5c:	46bd      	mov	sp, r7
 8019d5e:	bd80      	pop	{r7, pc}

08019d60 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>:
    class MockExpectedFunctionParameter : public MockNamedValue
 8019d60:	b580      	push	{r7, lr}
 8019d62:	b082      	sub	sp, #8
 8019d64:	af00      	add	r7, sp, #0
 8019d66:	6078      	str	r0, [r7, #4]
 8019d68:	4a05      	ldr	r2, [pc, #20]	; (8019d80 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev+0x20>)
 8019d6a:	687b      	ldr	r3, [r7, #4]
 8019d6c:	601a      	str	r2, [r3, #0]
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	4618      	mov	r0, r3
 8019d72:	f001 fd4b 	bl	801b80c <_ZN14MockNamedValueD1Ev>
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	4618      	mov	r0, r3
 8019d7a:	3708      	adds	r7, #8
 8019d7c:	46bd      	mov	sp, r7
 8019d7e:	bd80      	pop	{r7, pc}
 8019d80:	08026614 	.word	0x08026614

08019d84 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD0Ev>:
 8019d84:	b580      	push	{r7, lr}
 8019d86:	b082      	sub	sp, #8
 8019d88:	af00      	add	r7, sp, #0
 8019d8a:	6078      	str	r0, [r7, #4]
 8019d8c:	6878      	ldr	r0, [r7, #4]
 8019d8e:	f7ff ffe7 	bl	8019d60 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>
 8019d92:	2138      	movs	r1, #56	; 0x38
 8019d94:	6878      	ldr	r0, [r7, #4]
 8019d96:	f7ee fc3b 	bl	8008610 <_ZdlPvj>
 8019d9a:	687b      	ldr	r3, [r7, #4]
 8019d9c:	4618      	mov	r0, r3
 8019d9e:	3708      	adds	r7, #8
 8019da0:	46bd      	mov	sp, r7
 8019da2:	bd80      	pop	{r7, pc}

08019da4 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>:
    {
    public:
        MockCheckedExpectedCall* expectedCall_;

        MockExpectedCallsListNode* next_;
        MockExpectedCallsListNode(MockCheckedExpectedCall* expectedCall)
 8019da4:	b480      	push	{r7}
 8019da6:	b083      	sub	sp, #12
 8019da8:	af00      	add	r7, sp, #0
 8019daa:	6078      	str	r0, [r7, #4]
 8019dac:	6039      	str	r1, [r7, #0]
            : expectedCall_(expectedCall), next_(NULLPTR) {}
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	683a      	ldr	r2, [r7, #0]
 8019db2:	601a      	str	r2, [r3, #0]
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	2200      	movs	r2, #0
 8019db8:	605a      	str	r2, [r3, #4]
 8019dba:	687b      	ldr	r3, [r7, #4]
 8019dbc:	4618      	mov	r0, r3
 8019dbe:	370c      	adds	r7, #12
 8019dc0:	46bd      	mov	sp, r7
 8019dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dc6:	4770      	bx	lr

08019dc8 <_ZN21MockExpectedCallsListC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockExpectedCallsList.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCallsList::MockExpectedCallsList() : head_(NULLPTR)
 8019dc8:	b480      	push	{r7}
 8019dca:	b083      	sub	sp, #12
 8019dcc:	af00      	add	r7, sp, #0
 8019dce:	6078      	str	r0, [r7, #4]
 8019dd0:	4a06      	ldr	r2, [pc, #24]	; (8019dec <_ZN21MockExpectedCallsListC1Ev+0x24>)
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	601a      	str	r2, [r3, #0]
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	2200      	movs	r2, #0
 8019dda:	605a      	str	r2, [r3, #4]
{
}
 8019ddc:	687b      	ldr	r3, [r7, #4]
 8019dde:	4618      	mov	r0, r3
 8019de0:	370c      	adds	r7, #12
 8019de2:	46bd      	mov	sp, r7
 8019de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019de8:	4770      	bx	lr
 8019dea:	bf00      	nop
 8019dec:	08026768 	.word	0x08026768

08019df0 <_ZN21MockExpectedCallsListD1Ev>:

MockExpectedCallsList::~MockExpectedCallsList()
 8019df0:	b580      	push	{r7, lr}
 8019df2:	b084      	sub	sp, #16
 8019df4:	af00      	add	r7, sp, #0
 8019df6:	6078      	str	r0, [r7, #4]
 8019df8:	4a0d      	ldr	r2, [pc, #52]	; (8019e30 <_ZN21MockExpectedCallsListD1Ev+0x40>)
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	601a      	str	r2, [r3, #0]
{
    while (head_) {
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	685b      	ldr	r3, [r3, #4]
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	d00f      	beq.n	8019e26 <_ZN21MockExpectedCallsListD1Ev+0x36>
        MockExpectedCallsListNode* next = head_->next_;
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	685b      	ldr	r3, [r3, #4]
 8019e0a:	685b      	ldr	r3, [r3, #4]
 8019e0c:	60fb      	str	r3, [r7, #12]
        delete head_;
 8019e0e:	687b      	ldr	r3, [r7, #4]
 8019e10:	685b      	ldr	r3, [r3, #4]
 8019e12:	2b00      	cmp	r3, #0
 8019e14:	d003      	beq.n	8019e1e <_ZN21MockExpectedCallsListD1Ev+0x2e>
 8019e16:	2108      	movs	r1, #8
 8019e18:	4618      	mov	r0, r3
 8019e1a:	f7ee fbf9 	bl	8008610 <_ZdlPvj>
        head_ = next;
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	68fa      	ldr	r2, [r7, #12]
 8019e22:	605a      	str	r2, [r3, #4]
    while (head_) {
 8019e24:	e7eb      	b.n	8019dfe <_ZN21MockExpectedCallsListD1Ev+0xe>
    }
}
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	4618      	mov	r0, r3
 8019e2a:	3710      	adds	r7, #16
 8019e2c:	46bd      	mov	sp, r7
 8019e2e:	bd80      	pop	{r7, pc}
 8019e30:	08026768 	.word	0x08026768

08019e34 <_ZN21MockExpectedCallsListD0Ev>:
MockExpectedCallsList::~MockExpectedCallsList()
 8019e34:	b580      	push	{r7, lr}
 8019e36:	b082      	sub	sp, #8
 8019e38:	af00      	add	r7, sp, #0
 8019e3a:	6078      	str	r0, [r7, #4]
}
 8019e3c:	6878      	ldr	r0, [r7, #4]
 8019e3e:	f7ff ffd7 	bl	8019df0 <_ZN21MockExpectedCallsListD1Ev>
 8019e42:	2108      	movs	r1, #8
 8019e44:	6878      	ldr	r0, [r7, #4]
 8019e46:	f7ee fbe3 	bl	8008610 <_ZdlPvj>
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	4618      	mov	r0, r3
 8019e4e:	3708      	adds	r7, #8
 8019e50:	46bd      	mov	sp, r7
 8019e52:	bd80      	pop	{r7, pc}

08019e54 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>:

bool MockExpectedCallsList::hasCallsOutOfOrder() const
{
 8019e54:	b580      	push	{r7, lr}
 8019e56:	b084      	sub	sp, #16
 8019e58:	af00      	add	r7, sp, #0
 8019e5a:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	685b      	ldr	r3, [r3, #4]
 8019e60:	60fb      	str	r3, [r7, #12]
 8019e62:	68fb      	ldr	r3, [r7, #12]
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	d011      	beq.n	8019e8c <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x38>
        if (p->expectedCall_->isOutOfOrder())
 8019e68:	68fb      	ldr	r3, [r7, #12]
 8019e6a:	681a      	ldr	r2, [r3, #0]
 8019e6c:	68fb      	ldr	r3, [r7, #12]
 8019e6e:	681b      	ldr	r3, [r3, #0]
 8019e70:	681b      	ldr	r3, [r3, #0]
 8019e72:	33d4      	adds	r3, #212	; 0xd4
 8019e74:	681b      	ldr	r3, [r3, #0]
 8019e76:	4610      	mov	r0, r2
 8019e78:	4798      	blx	r3
 8019e7a:	4603      	mov	r3, r0
 8019e7c:	2b00      	cmp	r3, #0
 8019e7e:	d001      	beq.n	8019e84 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x30>
            return true;
 8019e80:	2301      	movs	r3, #1
 8019e82:	e004      	b.n	8019e8e <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019e84:	68fb      	ldr	r3, [r7, #12]
 8019e86:	685b      	ldr	r3, [r3, #4]
 8019e88:	60fb      	str	r3, [r7, #12]
 8019e8a:	e7ea      	b.n	8019e62 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0xe>
    return false;
 8019e8c:	2300      	movs	r3, #0
}
 8019e8e:	4618      	mov	r0, r3
 8019e90:	3710      	adds	r7, #16
 8019e92:	46bd      	mov	sp, r7
 8019e94:	bd80      	pop	{r7, pc}

08019e96 <_ZNK21MockExpectedCallsList4sizeEv>:

unsigned int MockExpectedCallsList::size() const
{
 8019e96:	b480      	push	{r7}
 8019e98:	b085      	sub	sp, #20
 8019e9a:	af00      	add	r7, sp, #0
 8019e9c:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 8019e9e:	2300      	movs	r3, #0
 8019ea0:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	685b      	ldr	r3, [r3, #4]
 8019ea6:	60bb      	str	r3, [r7, #8]
 8019ea8:	68bb      	ldr	r3, [r7, #8]
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	d006      	beq.n	8019ebc <_ZNK21MockExpectedCallsList4sizeEv+0x26>
        count++;
 8019eae:	68fb      	ldr	r3, [r7, #12]
 8019eb0:	3301      	adds	r3, #1
 8019eb2:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019eb4:	68bb      	ldr	r3, [r7, #8]
 8019eb6:	685b      	ldr	r3, [r3, #4]
 8019eb8:	60bb      	str	r3, [r7, #8]
 8019eba:	e7f5      	b.n	8019ea8 <_ZNK21MockExpectedCallsList4sizeEv+0x12>
    return count;
 8019ebc:	68fb      	ldr	r3, [r7, #12]
}
 8019ebe:	4618      	mov	r0, r3
 8019ec0:	3714      	adds	r7, #20
 8019ec2:	46bd      	mov	sp, r7
 8019ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ec8:	4770      	bx	lr

08019eca <_ZNK21MockExpectedCallsList7isEmptyEv>:

bool MockExpectedCallsList::isEmpty() const
{
 8019eca:	b480      	push	{r7}
 8019ecc:	b083      	sub	sp, #12
 8019ece:	af00      	add	r7, sp, #0
 8019ed0:	6078      	str	r0, [r7, #4]
    return head_ == NULLPTR;
 8019ed2:	687b      	ldr	r3, [r7, #4]
 8019ed4:	685b      	ldr	r3, [r3, #4]
 8019ed6:	2b00      	cmp	r3, #0
 8019ed8:	bf0c      	ite	eq
 8019eda:	2301      	moveq	r3, #1
 8019edc:	2300      	movne	r3, #0
 8019ede:	b2db      	uxtb	r3, r3
}
 8019ee0:	4618      	mov	r0, r3
 8019ee2:	370c      	adds	r7, #12
 8019ee4:	46bd      	mov	sp, r7
 8019ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eea:	4770      	bx	lr

08019eec <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString>:

unsigned int MockExpectedCallsList::amountOfActualCallsFulfilledFor(const SimpleString& name) const
{
 8019eec:	b580      	push	{r7, lr}
 8019eee:	b084      	sub	sp, #16
 8019ef0:	af00      	add	r7, sp, #0
 8019ef2:	6078      	str	r0, [r7, #4]
 8019ef4:	6039      	str	r1, [r7, #0]
    unsigned int count = 0;
 8019ef6:	2300      	movs	r3, #0
 8019ef8:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019efa:	687b      	ldr	r3, [r7, #4]
 8019efc:	685b      	ldr	r3, [r3, #4]
 8019efe:	60bb      	str	r3, [r7, #8]
 8019f00:	68bb      	ldr	r3, [r7, #8]
 8019f02:	2b00      	cmp	r3, #0
 8019f04:	d01d      	beq.n	8019f42 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x56>
        if (p->expectedCall_->relatesTo(name)) {
 8019f06:	68bb      	ldr	r3, [r7, #8]
 8019f08:	681a      	ldr	r2, [r3, #0]
 8019f0a:	68bb      	ldr	r3, [r7, #8]
 8019f0c:	681b      	ldr	r3, [r3, #0]
 8019f0e:	681b      	ldr	r3, [r3, #0]
 8019f10:	33b8      	adds	r3, #184	; 0xb8
 8019f12:	681b      	ldr	r3, [r3, #0]
 8019f14:	6839      	ldr	r1, [r7, #0]
 8019f16:	4610      	mov	r0, r2
 8019f18:	4798      	blx	r3
 8019f1a:	4603      	mov	r3, r0
 8019f1c:	2b00      	cmp	r3, #0
 8019f1e:	d00c      	beq.n	8019f3a <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x4e>
            count += p->expectedCall_->getActualCallsFulfilled();
 8019f20:	68bb      	ldr	r3, [r7, #8]
 8019f22:	681a      	ldr	r2, [r3, #0]
 8019f24:	68bb      	ldr	r3, [r7, #8]
 8019f26:	681b      	ldr	r3, [r3, #0]
 8019f28:	681b      	ldr	r3, [r3, #0]
 8019f2a:	33f8      	adds	r3, #248	; 0xf8
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	4610      	mov	r0, r2
 8019f30:	4798      	blx	r3
 8019f32:	4602      	mov	r2, r0
 8019f34:	68fb      	ldr	r3, [r7, #12]
 8019f36:	4413      	add	r3, r2
 8019f38:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019f3a:	68bb      	ldr	r3, [r7, #8]
 8019f3c:	685b      	ldr	r3, [r3, #4]
 8019f3e:	60bb      	str	r3, [r7, #8]
 8019f40:	e7de      	b.n	8019f00 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x14>
        }
    }
    return count;
 8019f42:	68fb      	ldr	r3, [r7, #12]
}
 8019f44:	4618      	mov	r0, r3
 8019f46:	3710      	adds	r7, #16
 8019f48:	46bd      	mov	sp, r7
 8019f4a:	bd80      	pop	{r7, pc}

08019f4c <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv>:

unsigned int MockExpectedCallsList::amountOfUnfulfilledExpectations() const
{
 8019f4c:	b580      	push	{r7, lr}
 8019f4e:	b084      	sub	sp, #16
 8019f50:	af00      	add	r7, sp, #0
 8019f52:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 8019f54:	2300      	movs	r3, #0
 8019f56:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019f58:	687b      	ldr	r3, [r7, #4]
 8019f5a:	685b      	ldr	r3, [r3, #4]
 8019f5c:	60bb      	str	r3, [r7, #8]
 8019f5e:	68bb      	ldr	r3, [r7, #8]
 8019f60:	2b00      	cmp	r3, #0
 8019f62:	d015      	beq.n	8019f90 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x44>
        if (! p->expectedCall_->isFulfilled()) count++;
 8019f64:	68bb      	ldr	r3, [r7, #8]
 8019f66:	681a      	ldr	r2, [r3, #0]
 8019f68:	68bb      	ldr	r3, [r7, #8]
 8019f6a:	681b      	ldr	r3, [r3, #0]
 8019f6c:	681b      	ldr	r3, [r3, #0]
 8019f6e:	33c0      	adds	r3, #192	; 0xc0
 8019f70:	681b      	ldr	r3, [r3, #0]
 8019f72:	4610      	mov	r0, r2
 8019f74:	4798      	blx	r3
 8019f76:	4603      	mov	r3, r0
 8019f78:	f083 0301 	eor.w	r3, r3, #1
 8019f7c:	b2db      	uxtb	r3, r3
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	d002      	beq.n	8019f88 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x3c>
 8019f82:	68fb      	ldr	r3, [r7, #12]
 8019f84:	3301      	adds	r3, #1
 8019f86:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019f88:	68bb      	ldr	r3, [r7, #8]
 8019f8a:	685b      	ldr	r3, [r3, #4]
 8019f8c:	60bb      	str	r3, [r7, #8]
 8019f8e:	e7e6      	b.n	8019f5e <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x12>
    return count;
 8019f90:	68fb      	ldr	r3, [r7, #12]
}
 8019f92:	4618      	mov	r0, r3
 8019f94:	3710      	adds	r7, #16
 8019f96:	46bd      	mov	sp, r7
 8019f98:	bd80      	pop	{r7, pc}

08019f9a <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>:

bool MockExpectedCallsList::hasFinalizedMatchingExpectations() const
{
 8019f9a:	b580      	push	{r7, lr}
 8019f9c:	b084      	sub	sp, #16
 8019f9e:	af00      	add	r7, sp, #0
 8019fa0:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	685b      	ldr	r3, [r3, #4]
 8019fa6:	60fb      	str	r3, [r7, #12]
 8019fa8:	68fb      	ldr	r3, [r7, #12]
 8019faa:	2b00      	cmp	r3, #0
 8019fac:	d011      	beq.n	8019fd2 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x38>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 8019fae:	68fb      	ldr	r3, [r7, #12]
 8019fb0:	681a      	ldr	r2, [r3, #0]
 8019fb2:	68fb      	ldr	r3, [r7, #12]
 8019fb4:	681b      	ldr	r3, [r3, #0]
 8019fb6:	681b      	ldr	r3, [r3, #0]
 8019fb8:	33c8      	adds	r3, #200	; 0xc8
 8019fba:	681b      	ldr	r3, [r3, #0]
 8019fbc:	4610      	mov	r0, r2
 8019fbe:	4798      	blx	r3
 8019fc0:	4603      	mov	r3, r0
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	d001      	beq.n	8019fca <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x30>
            return true;
 8019fc6:	2301      	movs	r3, #1
 8019fc8:	e004      	b.n	8019fd4 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019fca:	68fb      	ldr	r3, [r7, #12]
 8019fcc:	685b      	ldr	r3, [r3, #4]
 8019fce:	60fb      	str	r3, [r7, #12]
 8019fd0:	e7ea      	b.n	8019fa8 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0xe>
        }
    }
    return false;
 8019fd2:	2300      	movs	r3, #0
}
 8019fd4:	4618      	mov	r0, r3
 8019fd6:	3710      	adds	r7, #16
 8019fd8:	46bd      	mov	sp, r7
 8019fda:	bd80      	pop	{r7, pc}

08019fdc <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>:

bool MockExpectedCallsList::hasUnfulfilledExpectations() const
{
 8019fdc:	b580      	push	{r7, lr}
 8019fde:	b084      	sub	sp, #16
 8019fe0:	af00      	add	r7, sp, #0
 8019fe2:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	685b      	ldr	r3, [r3, #4]
 8019fe8:	60fb      	str	r3, [r7, #12]
 8019fea:	68fb      	ldr	r3, [r7, #12]
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	d014      	beq.n	801a01a <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x3e>
        if (!p->expectedCall_->isFulfilled()) {
 8019ff0:	68fb      	ldr	r3, [r7, #12]
 8019ff2:	681a      	ldr	r2, [r3, #0]
 8019ff4:	68fb      	ldr	r3, [r7, #12]
 8019ff6:	681b      	ldr	r3, [r3, #0]
 8019ff8:	681b      	ldr	r3, [r3, #0]
 8019ffa:	33c0      	adds	r3, #192	; 0xc0
 8019ffc:	681b      	ldr	r3, [r3, #0]
 8019ffe:	4610      	mov	r0, r2
 801a000:	4798      	blx	r3
 801a002:	4603      	mov	r3, r0
 801a004:	f083 0301 	eor.w	r3, r3, #1
 801a008:	b2db      	uxtb	r3, r3
 801a00a:	2b00      	cmp	r3, #0
 801a00c:	d001      	beq.n	801a012 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x36>
            return true;
 801a00e:	2301      	movs	r3, #1
 801a010:	e004      	b.n	801a01c <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a012:	68fb      	ldr	r3, [r7, #12]
 801a014:	685b      	ldr	r3, [r3, #4]
 801a016:	60fb      	str	r3, [r7, #12]
 801a018:	e7e7      	b.n	8019fea <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0xe>
        }
    }
    return false;
 801a01a:	2300      	movs	r3, #0
}
 801a01c:	4618      	mov	r0, r3
 801a01e:	3710      	adds	r7, #16
 801a020:	46bd      	mov	sp, r7
 801a022:	bd80      	pop	{r7, pc}

0801a024 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>:

bool MockExpectedCallsList::hasExpectationWithName(const SimpleString& name) const
{
 801a024:	b580      	push	{r7, lr}
 801a026:	b084      	sub	sp, #16
 801a028:	af00      	add	r7, sp, #0
 801a02a:	6078      	str	r0, [r7, #4]
 801a02c:	6039      	str	r1, [r7, #0]
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	685b      	ldr	r3, [r3, #4]
 801a032:	60fb      	str	r3, [r7, #12]
 801a034:	68fb      	ldr	r3, [r7, #12]
 801a036:	2b00      	cmp	r3, #0
 801a038:	d012      	beq.n	801a060 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3c>
            if (p->expectedCall_->relatesTo(name))
 801a03a:	68fb      	ldr	r3, [r7, #12]
 801a03c:	681a      	ldr	r2, [r3, #0]
 801a03e:	68fb      	ldr	r3, [r7, #12]
 801a040:	681b      	ldr	r3, [r3, #0]
 801a042:	681b      	ldr	r3, [r3, #0]
 801a044:	33b8      	adds	r3, #184	; 0xb8
 801a046:	681b      	ldr	r3, [r3, #0]
 801a048:	6839      	ldr	r1, [r7, #0]
 801a04a:	4610      	mov	r0, r2
 801a04c:	4798      	blx	r3
 801a04e:	4603      	mov	r3, r0
 801a050:	2b00      	cmp	r3, #0
 801a052:	d001      	beq.n	801a058 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x34>
                return true;
 801a054:	2301      	movs	r3, #1
 801a056:	e004      	b.n	801a062 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3e>
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a058:	68fb      	ldr	r3, [r7, #12]
 801a05a:	685b      	ldr	r3, [r3, #4]
 801a05c:	60fb      	str	r3, [r7, #12]
 801a05e:	e7e9      	b.n	801a034 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x10>
    return false;
 801a060:	2300      	movs	r3, #0
}
 801a062:	4618      	mov	r0, r3
 801a064:	3710      	adds	r7, #16
 801a066:	46bd      	mov	sp, r7
 801a068:	bd80      	pop	{r7, pc}
	...

0801a06c <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>:

void MockExpectedCallsList::addExpectedCall(MockCheckedExpectedCall* call)
{
 801a06c:	b590      	push	{r4, r7, lr}
 801a06e:	b085      	sub	sp, #20
 801a070:	af00      	add	r7, sp, #0
 801a072:	6078      	str	r0, [r7, #4]
 801a074:	6039      	str	r1, [r7, #0]
    MockExpectedCallsListNode* newCall = new MockExpectedCallsListNode(call);
 801a076:	2273      	movs	r2, #115	; 0x73
 801a078:	4911      	ldr	r1, [pc, #68]	; (801a0c0 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x54>)
 801a07a:	2008      	movs	r0, #8
 801a07c:	f7ee fab4 	bl	80085e8 <_ZnwjPKci>
 801a080:	4604      	mov	r4, r0
 801a082:	6839      	ldr	r1, [r7, #0]
 801a084:	4620      	mov	r0, r4
 801a086:	f7ff fe8d 	bl	8019da4 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>
 801a08a:	60bc      	str	r4, [r7, #8]

    if (head_ == NULLPTR)
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	685b      	ldr	r3, [r3, #4]
 801a090:	2b00      	cmp	r3, #0
 801a092:	d103      	bne.n	801a09c <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x30>
        head_ = newCall;
 801a094:	687b      	ldr	r3, [r7, #4]
 801a096:	68ba      	ldr	r2, [r7, #8]
 801a098:	605a      	str	r2, [r3, #4]
    else {
        MockExpectedCallsListNode* lastCall = head_;
        while (lastCall->next_) lastCall = lastCall->next_;
        lastCall->next_ = newCall;
    }
}
 801a09a:	e00d      	b.n	801a0b8 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x4c>
        MockExpectedCallsListNode* lastCall = head_;
 801a09c:	687b      	ldr	r3, [r7, #4]
 801a09e:	685b      	ldr	r3, [r3, #4]
 801a0a0:	60fb      	str	r3, [r7, #12]
        while (lastCall->next_) lastCall = lastCall->next_;
 801a0a2:	68fb      	ldr	r3, [r7, #12]
 801a0a4:	685b      	ldr	r3, [r3, #4]
 801a0a6:	2b00      	cmp	r3, #0
 801a0a8:	d003      	beq.n	801a0b2 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x46>
 801a0aa:	68fb      	ldr	r3, [r7, #12]
 801a0ac:	685b      	ldr	r3, [r3, #4]
 801a0ae:	60fb      	str	r3, [r7, #12]
 801a0b0:	e7f7      	b.n	801a0a2 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x36>
        lastCall->next_ = newCall;
 801a0b2:	68fb      	ldr	r3, [r7, #12]
 801a0b4:	68ba      	ldr	r2, [r7, #8]
 801a0b6:	605a      	str	r2, [r3, #4]
}
 801a0b8:	bf00      	nop
 801a0ba:	3714      	adds	r7, #20
 801a0bc:	46bd      	mov	sp, r7
 801a0be:	bd90      	pop	{r4, r7, pc}
 801a0c0:	08023f2c 	.word	0x08023f2c

0801a0c4 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>:

void MockExpectedCallsList::addPotentiallyMatchingExpectations(const MockExpectedCallsList& list)
{
 801a0c4:	b580      	push	{r7, lr}
 801a0c6:	b084      	sub	sp, #16
 801a0c8:	af00      	add	r7, sp, #0
 801a0ca:	6078      	str	r0, [r7, #4]
 801a0cc:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801a0ce:	683b      	ldr	r3, [r7, #0]
 801a0d0:	685b      	ldr	r3, [r3, #4]
 801a0d2:	60fb      	str	r3, [r7, #12]
 801a0d4:	68fb      	ldr	r3, [r7, #12]
 801a0d6:	2b00      	cmp	r3, #0
 801a0d8:	d018      	beq.n	801a10c <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x48>
        if (p->expectedCall_->canMatchActualCalls())
 801a0da:	68fb      	ldr	r3, [r7, #12]
 801a0dc:	681a      	ldr	r2, [r3, #0]
 801a0de:	68fb      	ldr	r3, [r7, #12]
 801a0e0:	681b      	ldr	r3, [r3, #0]
 801a0e2:	681b      	ldr	r3, [r3, #0]
 801a0e4:	33c4      	adds	r3, #196	; 0xc4
 801a0e6:	681b      	ldr	r3, [r3, #0]
 801a0e8:	4610      	mov	r0, r2
 801a0ea:	4798      	blx	r3
 801a0ec:	4603      	mov	r3, r0
 801a0ee:	2b00      	cmp	r3, #0
 801a0f0:	d008      	beq.n	801a104 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x40>
            addExpectedCall(p->expectedCall_);
 801a0f2:	687b      	ldr	r3, [r7, #4]
 801a0f4:	681b      	ldr	r3, [r3, #0]
 801a0f6:	3330      	adds	r3, #48	; 0x30
 801a0f8:	681b      	ldr	r3, [r3, #0]
 801a0fa:	68fa      	ldr	r2, [r7, #12]
 801a0fc:	6812      	ldr	r2, [r2, #0]
 801a0fe:	4611      	mov	r1, r2
 801a100:	6878      	ldr	r0, [r7, #4]
 801a102:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801a104:	68fb      	ldr	r3, [r7, #12]
 801a106:	685b      	ldr	r3, [r3, #4]
 801a108:	60fb      	str	r3, [r7, #12]
 801a10a:	e7e3      	b.n	801a0d4 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x10>
}
 801a10c:	bf00      	nop
 801a10e:	3710      	adds	r7, #16
 801a110:	46bd      	mov	sp, r7
 801a112:	bd80      	pop	{r7, pc}

0801a114 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>:

void MockExpectedCallsList::addExpectationsRelatedTo(const SimpleString& name, const MockExpectedCallsList& list)
{
 801a114:	b580      	push	{r7, lr}
 801a116:	b086      	sub	sp, #24
 801a118:	af00      	add	r7, sp, #0
 801a11a:	60f8      	str	r0, [r7, #12]
 801a11c:	60b9      	str	r1, [r7, #8]
 801a11e:	607a      	str	r2, [r7, #4]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801a120:	687b      	ldr	r3, [r7, #4]
 801a122:	685b      	ldr	r3, [r3, #4]
 801a124:	617b      	str	r3, [r7, #20]
 801a126:	697b      	ldr	r3, [r7, #20]
 801a128:	2b00      	cmp	r3, #0
 801a12a:	d019      	beq.n	801a160 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x4c>
        if (p->expectedCall_->relatesTo(name))
 801a12c:	697b      	ldr	r3, [r7, #20]
 801a12e:	681a      	ldr	r2, [r3, #0]
 801a130:	697b      	ldr	r3, [r7, #20]
 801a132:	681b      	ldr	r3, [r3, #0]
 801a134:	681b      	ldr	r3, [r3, #0]
 801a136:	33b8      	adds	r3, #184	; 0xb8
 801a138:	681b      	ldr	r3, [r3, #0]
 801a13a:	68b9      	ldr	r1, [r7, #8]
 801a13c:	4610      	mov	r0, r2
 801a13e:	4798      	blx	r3
 801a140:	4603      	mov	r3, r0
 801a142:	2b00      	cmp	r3, #0
 801a144:	d008      	beq.n	801a158 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x44>
            addExpectedCall(p->expectedCall_);
 801a146:	68fb      	ldr	r3, [r7, #12]
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	3330      	adds	r3, #48	; 0x30
 801a14c:	681b      	ldr	r3, [r3, #0]
 801a14e:	697a      	ldr	r2, [r7, #20]
 801a150:	6812      	ldr	r2, [r2, #0]
 801a152:	4611      	mov	r1, r2
 801a154:	68f8      	ldr	r0, [r7, #12]
 801a156:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801a158:	697b      	ldr	r3, [r7, #20]
 801a15a:	685b      	ldr	r3, [r3, #4]
 801a15c:	617b      	str	r3, [r7, #20]
 801a15e:	e7e2      	b.n	801a126 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x12>
}
 801a160:	bf00      	nop
 801a162:	3718      	adds	r7, #24
 801a164:	46bd      	mov	sp, r7
 801a166:	bd80      	pop	{r7, pc}

0801a168 <_ZN21MockExpectedCallsList15addExpectationsERKS_>:

void MockExpectedCallsList::addExpectations(const MockExpectedCallsList& list)
{
 801a168:	b580      	push	{r7, lr}
 801a16a:	b084      	sub	sp, #16
 801a16c:	af00      	add	r7, sp, #0
 801a16e:	6078      	str	r0, [r7, #4]
 801a170:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801a172:	683b      	ldr	r3, [r7, #0]
 801a174:	685b      	ldr	r3, [r3, #4]
 801a176:	60fb      	str	r3, [r7, #12]
 801a178:	68fb      	ldr	r3, [r7, #12]
 801a17a:	2b00      	cmp	r3, #0
 801a17c:	d00c      	beq.n	801a198 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x30>
        addExpectedCall(p->expectedCall_);
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	3330      	adds	r3, #48	; 0x30
 801a184:	681b      	ldr	r3, [r3, #0]
 801a186:	68fa      	ldr	r2, [r7, #12]
 801a188:	6812      	ldr	r2, [r2, #0]
 801a18a:	4611      	mov	r1, r2
 801a18c:	6878      	ldr	r0, [r7, #4]
 801a18e:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801a190:	68fb      	ldr	r3, [r7, #12]
 801a192:	685b      	ldr	r3, [r3, #4]
 801a194:	60fb      	str	r3, [r7, #12]
 801a196:	e7ef      	b.n	801a178 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x10>
}
 801a198:	bf00      	nop
 801a19a:	3710      	adds	r7, #16
 801a19c:	46bd      	mov	sp, r7
 801a19e:	bd80      	pop	{r7, pc}

0801a1a0 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsRelatedTo(const SimpleString& name)
{
 801a1a0:	b580      	push	{r7, lr}
 801a1a2:	b084      	sub	sp, #16
 801a1a4:	af00      	add	r7, sp, #0
 801a1a6:	6078      	str	r0, [r7, #4]
 801a1a8:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a1aa:	687b      	ldr	r3, [r7, #4]
 801a1ac:	685b      	ldr	r3, [r3, #4]
 801a1ae:	60fb      	str	r3, [r7, #12]
 801a1b0:	68fb      	ldr	r3, [r7, #12]
 801a1b2:	2b00      	cmp	r3, #0
 801a1b4:	d016      	beq.n	801a1e4 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x44>
        if (! p->expectedCall_->relatesTo(name))
 801a1b6:	68fb      	ldr	r3, [r7, #12]
 801a1b8:	681a      	ldr	r2, [r3, #0]
 801a1ba:	68fb      	ldr	r3, [r7, #12]
 801a1bc:	681b      	ldr	r3, [r3, #0]
 801a1be:	681b      	ldr	r3, [r3, #0]
 801a1c0:	33b8      	adds	r3, #184	; 0xb8
 801a1c2:	681b      	ldr	r3, [r3, #0]
 801a1c4:	6839      	ldr	r1, [r7, #0]
 801a1c6:	4610      	mov	r0, r2
 801a1c8:	4798      	blx	r3
 801a1ca:	4603      	mov	r3, r0
 801a1cc:	f083 0301 	eor.w	r3, r3, #1
 801a1d0:	b2db      	uxtb	r3, r3
 801a1d2:	2b00      	cmp	r3, #0
 801a1d4:	d002      	beq.n	801a1dc <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801a1d6:	68fb      	ldr	r3, [r7, #12]
 801a1d8:	2200      	movs	r2, #0
 801a1da:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a1dc:	68fb      	ldr	r3, [r7, #12]
 801a1de:	685b      	ldr	r3, [r3, #4]
 801a1e0:	60fb      	str	r3, [r7, #12]
 801a1e2:	e7e5      	b.n	801a1b0 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x10>

    pruneEmptyNodeFromList();
 801a1e4:	687b      	ldr	r3, [r7, #4]
 801a1e6:	681b      	ldr	r3, [r3, #0]
 801a1e8:	3388      	adds	r3, #136	; 0x88
 801a1ea:	681b      	ldr	r3, [r3, #0]
 801a1ec:	6878      	ldr	r0, [r7, #4]
 801a1ee:	4798      	blx	r3
}
 801a1f0:	bf00      	nop
 801a1f2:	3710      	adds	r7, #16
 801a1f4:	46bd      	mov	sp, r7
 801a1f6:	bd80      	pop	{r7, pc}

0801a1f8 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>:

void MockExpectedCallsList::onlyKeepOutOfOrderExpectations()
{
 801a1f8:	b580      	push	{r7, lr}
 801a1fa:	b084      	sub	sp, #16
 801a1fc:	af00      	add	r7, sp, #0
 801a1fe:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	685b      	ldr	r3, [r3, #4]
 801a204:	60fb      	str	r3, [r7, #12]
 801a206:	68fb      	ldr	r3, [r7, #12]
 801a208:	2b00      	cmp	r3, #0
 801a20a:	d015      	beq.n	801a238 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x40>
        if (!p->expectedCall_->isOutOfOrder())
 801a20c:	68fb      	ldr	r3, [r7, #12]
 801a20e:	681a      	ldr	r2, [r3, #0]
 801a210:	68fb      	ldr	r3, [r7, #12]
 801a212:	681b      	ldr	r3, [r3, #0]
 801a214:	681b      	ldr	r3, [r3, #0]
 801a216:	33d4      	adds	r3, #212	; 0xd4
 801a218:	681b      	ldr	r3, [r3, #0]
 801a21a:	4610      	mov	r0, r2
 801a21c:	4798      	blx	r3
 801a21e:	4603      	mov	r3, r0
 801a220:	f083 0301 	eor.w	r3, r3, #1
 801a224:	b2db      	uxtb	r3, r3
 801a226:	2b00      	cmp	r3, #0
 801a228:	d002      	beq.n	801a230 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x38>
            p->expectedCall_ = NULLPTR;
 801a22a:	68fb      	ldr	r3, [r7, #12]
 801a22c:	2200      	movs	r2, #0
 801a22e:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a230:	68fb      	ldr	r3, [r7, #12]
 801a232:	685b      	ldr	r3, [r3, #4]
 801a234:	60fb      	str	r3, [r7, #12]
 801a236:	e7e6      	b.n	801a206 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0xe>
    pruneEmptyNodeFromList();
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	681b      	ldr	r3, [r3, #0]
 801a23c:	3388      	adds	r3, #136	; 0x88
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	6878      	ldr	r0, [r7, #4]
 801a242:	4798      	blx	r3
}
 801a244:	bf00      	nop
 801a246:	3710      	adds	r7, #16
 801a248:	46bd      	mov	sp, r7
 801a24a:	bd80      	pop	{r7, pc}

0801a24c <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>:

void MockExpectedCallsList::onlyKeepUnmatchingExpectations()
{
 801a24c:	b580      	push	{r7, lr}
 801a24e:	b084      	sub	sp, #16
 801a250:	af00      	add	r7, sp, #0
 801a252:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	685b      	ldr	r3, [r3, #4]
 801a258:	60fb      	str	r3, [r7, #12]
 801a25a:	68fb      	ldr	r3, [r7, #12]
 801a25c:	2b00      	cmp	r3, #0
 801a25e:	d01b      	beq.n	801a298 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x4c>
        if (p->expectedCall_->isMatchingActualCallAndFinalized())
 801a260:	68fb      	ldr	r3, [r7, #12]
 801a262:	681a      	ldr	r2, [r3, #0]
 801a264:	68fb      	ldr	r3, [r7, #12]
 801a266:	681b      	ldr	r3, [r3, #0]
 801a268:	681b      	ldr	r3, [r3, #0]
 801a26a:	33c8      	adds	r3, #200	; 0xc8
 801a26c:	681b      	ldr	r3, [r3, #0]
 801a26e:	4610      	mov	r0, r2
 801a270:	4798      	blx	r3
 801a272:	4603      	mov	r3, r0
 801a274:	2b00      	cmp	r3, #0
 801a276:	d00b      	beq.n	801a290 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x44>
        {
            p->expectedCall_->resetActualCallMatchingState();
 801a278:	68fb      	ldr	r3, [r7, #12]
 801a27a:	681a      	ldr	r2, [r3, #0]
 801a27c:	68fb      	ldr	r3, [r7, #12]
 801a27e:	681b      	ldr	r3, [r3, #0]
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	33ec      	adds	r3, #236	; 0xec
 801a284:	681b      	ldr	r3, [r3, #0]
 801a286:	4610      	mov	r0, r2
 801a288:	4798      	blx	r3
            p->expectedCall_ = NULLPTR;
 801a28a:	68fb      	ldr	r3, [r7, #12]
 801a28c:	2200      	movs	r2, #0
 801a28e:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a290:	68fb      	ldr	r3, [r7, #12]
 801a292:	685b      	ldr	r3, [r3, #4]
 801a294:	60fb      	str	r3, [r7, #12]
 801a296:	e7e0      	b.n	801a25a <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0xe>
        }

    pruneEmptyNodeFromList();
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	681b      	ldr	r3, [r3, #0]
 801a29c:	3388      	adds	r3, #136	; 0x88
 801a29e:	681b      	ldr	r3, [r3, #0]
 801a2a0:	6878      	ldr	r0, [r7, #4]
 801a2a2:	4798      	blx	r3
}
 801a2a4:	bf00      	nop
 801a2a6:	3710      	adds	r7, #16
 801a2a8:	46bd      	mov	sp, r7
 801a2aa:	bd80      	pop	{r7, pc}

0801a2ac <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameterName(const SimpleString& name)
{
 801a2ac:	b580      	push	{r7, lr}
 801a2ae:	b084      	sub	sp, #16
 801a2b0:	af00      	add	r7, sp, #0
 801a2b2:	6078      	str	r0, [r7, #4]
 801a2b4:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	685b      	ldr	r3, [r3, #4]
 801a2ba:	60fb      	str	r3, [r7, #12]
 801a2bc:	68fb      	ldr	r3, [r7, #12]
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	d016      	beq.n	801a2f0 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasInputParameterWithName(name))
 801a2c2:	68fb      	ldr	r3, [r7, #12]
 801a2c4:	681a      	ldr	r2, [r3, #0]
 801a2c6:	68fb      	ldr	r3, [r7, #12]
 801a2c8:	681b      	ldr	r3, [r3, #0]
 801a2ca:	681b      	ldr	r3, [r3, #0]
 801a2cc:	33a8      	adds	r3, #168	; 0xa8
 801a2ce:	681b      	ldr	r3, [r3, #0]
 801a2d0:	6839      	ldr	r1, [r7, #0]
 801a2d2:	4610      	mov	r0, r2
 801a2d4:	4798      	blx	r3
 801a2d6:	4603      	mov	r3, r0
 801a2d8:	f083 0301 	eor.w	r3, r3, #1
 801a2dc:	b2db      	uxtb	r3, r3
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	d002      	beq.n	801a2e8 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801a2e2:	68fb      	ldr	r3, [r7, #12]
 801a2e4:	2200      	movs	r2, #0
 801a2e6:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a2e8:	68fb      	ldr	r3, [r7, #12]
 801a2ea:	685b      	ldr	r3, [r3, #4]
 801a2ec:	60fb      	str	r3, [r7, #12]
 801a2ee:	e7e5      	b.n	801a2bc <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801a2f0:	687b      	ldr	r3, [r7, #4]
 801a2f2:	681b      	ldr	r3, [r3, #0]
 801a2f4:	3388      	adds	r3, #136	; 0x88
 801a2f6:	681b      	ldr	r3, [r3, #0]
 801a2f8:	6878      	ldr	r0, [r7, #4]
 801a2fa:	4798      	blx	r3
}
 801a2fc:	bf00      	nop
 801a2fe:	3710      	adds	r7, #16
 801a300:	46bd      	mov	sp, r7
 801a302:	bd80      	pop	{r7, pc}

0801a304 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameterName(const SimpleString& name)
{
 801a304:	b580      	push	{r7, lr}
 801a306:	b084      	sub	sp, #16
 801a308:	af00      	add	r7, sp, #0
 801a30a:	6078      	str	r0, [r7, #4]
 801a30c:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	685b      	ldr	r3, [r3, #4]
 801a312:	60fb      	str	r3, [r7, #12]
 801a314:	68fb      	ldr	r3, [r7, #12]
 801a316:	2b00      	cmp	r3, #0
 801a318:	d016      	beq.n	801a348 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasOutputParameterWithName(name))
 801a31a:	68fb      	ldr	r3, [r7, #12]
 801a31c:	681a      	ldr	r2, [r3, #0]
 801a31e:	68fb      	ldr	r3, [r7, #12]
 801a320:	681b      	ldr	r3, [r3, #0]
 801a322:	681b      	ldr	r3, [r3, #0]
 801a324:	33b0      	adds	r3, #176	; 0xb0
 801a326:	681b      	ldr	r3, [r3, #0]
 801a328:	6839      	ldr	r1, [r7, #0]
 801a32a:	4610      	mov	r0, r2
 801a32c:	4798      	blx	r3
 801a32e:	4603      	mov	r3, r0
 801a330:	f083 0301 	eor.w	r3, r3, #1
 801a334:	b2db      	uxtb	r3, r3
 801a336:	2b00      	cmp	r3, #0
 801a338:	d002      	beq.n	801a340 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801a33a:	68fb      	ldr	r3, [r7, #12]
 801a33c:	2200      	movs	r2, #0
 801a33e:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a340:	68fb      	ldr	r3, [r7, #12]
 801a342:	685b      	ldr	r3, [r3, #4]
 801a344:	60fb      	str	r3, [r7, #12]
 801a346:	e7e5      	b.n	801a314 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801a348:	687b      	ldr	r3, [r7, #4]
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	3388      	adds	r3, #136	; 0x88
 801a34e:	681b      	ldr	r3, [r3, #0]
 801a350:	6878      	ldr	r0, [r7, #4]
 801a352:	4798      	blx	r3
}
 801a354:	bf00      	nop
 801a356:	3710      	adds	r7, #16
 801a358:	46bd      	mov	sp, r7
 801a35a:	bd80      	pop	{r7, pc}

0801a35c <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameter(const MockNamedValue& parameter)
{
 801a35c:	b580      	push	{r7, lr}
 801a35e:	b084      	sub	sp, #16
 801a360:	af00      	add	r7, sp, #0
 801a362:	6078      	str	r0, [r7, #4]
 801a364:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	685b      	ldr	r3, [r3, #4]
 801a36a:	60fb      	str	r3, [r7, #12]
 801a36c:	68fb      	ldr	r3, [r7, #12]
 801a36e:	2b00      	cmp	r3, #0
 801a370:	d016      	beq.n	801a3a0 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasInputParameter(parameter))
 801a372:	68fb      	ldr	r3, [r7, #12]
 801a374:	681a      	ldr	r2, [r3, #0]
 801a376:	68fb      	ldr	r3, [r7, #12]
 801a378:	681b      	ldr	r3, [r3, #0]
 801a37a:	681b      	ldr	r3, [r3, #0]
 801a37c:	33ac      	adds	r3, #172	; 0xac
 801a37e:	681b      	ldr	r3, [r3, #0]
 801a380:	6839      	ldr	r1, [r7, #0]
 801a382:	4610      	mov	r0, r2
 801a384:	4798      	blx	r3
 801a386:	4603      	mov	r3, r0
 801a388:	f083 0301 	eor.w	r3, r3, #1
 801a38c:	b2db      	uxtb	r3, r3
 801a38e:	2b00      	cmp	r3, #0
 801a390:	d002      	beq.n	801a398 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801a392:	68fb      	ldr	r3, [r7, #12]
 801a394:	2200      	movs	r2, #0
 801a396:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a398:	68fb      	ldr	r3, [r7, #12]
 801a39a:	685b      	ldr	r3, [r3, #4]
 801a39c:	60fb      	str	r3, [r7, #12]
 801a39e:	e7e5      	b.n	801a36c <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801a3a0:	687b      	ldr	r3, [r7, #4]
 801a3a2:	681b      	ldr	r3, [r3, #0]
 801a3a4:	3388      	adds	r3, #136	; 0x88
 801a3a6:	681b      	ldr	r3, [r3, #0]
 801a3a8:	6878      	ldr	r0, [r7, #4]
 801a3aa:	4798      	blx	r3
}
 801a3ac:	bf00      	nop
 801a3ae:	3710      	adds	r7, #16
 801a3b0:	46bd      	mov	sp, r7
 801a3b2:	bd80      	pop	{r7, pc}

0801a3b4 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameter(const MockNamedValue& parameter)
{
 801a3b4:	b580      	push	{r7, lr}
 801a3b6:	b084      	sub	sp, #16
 801a3b8:	af00      	add	r7, sp, #0
 801a3ba:	6078      	str	r0, [r7, #4]
 801a3bc:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	685b      	ldr	r3, [r3, #4]
 801a3c2:	60fb      	str	r3, [r7, #12]
 801a3c4:	68fb      	ldr	r3, [r7, #12]
 801a3c6:	2b00      	cmp	r3, #0
 801a3c8:	d016      	beq.n	801a3f8 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasOutputParameter(parameter))
 801a3ca:	68fb      	ldr	r3, [r7, #12]
 801a3cc:	681a      	ldr	r2, [r3, #0]
 801a3ce:	68fb      	ldr	r3, [r7, #12]
 801a3d0:	681b      	ldr	r3, [r3, #0]
 801a3d2:	681b      	ldr	r3, [r3, #0]
 801a3d4:	33b4      	adds	r3, #180	; 0xb4
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	6839      	ldr	r1, [r7, #0]
 801a3da:	4610      	mov	r0, r2
 801a3dc:	4798      	blx	r3
 801a3de:	4603      	mov	r3, r0
 801a3e0:	f083 0301 	eor.w	r3, r3, #1
 801a3e4:	b2db      	uxtb	r3, r3
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	d002      	beq.n	801a3f0 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801a3ea:	68fb      	ldr	r3, [r7, #12]
 801a3ec:	2200      	movs	r2, #0
 801a3ee:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a3f0:	68fb      	ldr	r3, [r7, #12]
 801a3f2:	685b      	ldr	r3, [r3, #4]
 801a3f4:	60fb      	str	r3, [r7, #12]
 801a3f6:	e7e5      	b.n	801a3c4 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	681b      	ldr	r3, [r3, #0]
 801a3fc:	3388      	adds	r3, #136	; 0x88
 801a3fe:	681b      	ldr	r3, [r3, #0]
 801a400:	6878      	ldr	r0, [r7, #4]
 801a402:	4798      	blx	r3
}
 801a404:	bf00      	nop
 801a406:	3710      	adds	r7, #16
 801a408:	46bd      	mov	sp, r7
 801a40a:	bd80      	pop	{r7, pc}

0801a40c <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>:

void MockExpectedCallsList::onlyKeepExpectationsOnObject(const void* objectPtr)
{
 801a40c:	b580      	push	{r7, lr}
 801a40e:	b084      	sub	sp, #16
 801a410:	af00      	add	r7, sp, #0
 801a412:	6078      	str	r0, [r7, #4]
 801a414:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a416:	687b      	ldr	r3, [r7, #4]
 801a418:	685b      	ldr	r3, [r3, #4]
 801a41a:	60fb      	str	r3, [r7, #12]
 801a41c:	68fb      	ldr	r3, [r7, #12]
 801a41e:	2b00      	cmp	r3, #0
 801a420:	d016      	beq.n	801a450 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x44>
        if (! p->expectedCall_->relatesToObject(objectPtr))
 801a422:	68fb      	ldr	r3, [r7, #12]
 801a424:	681a      	ldr	r2, [r3, #0]
 801a426:	68fb      	ldr	r3, [r7, #12]
 801a428:	681b      	ldr	r3, [r3, #0]
 801a42a:	681b      	ldr	r3, [r3, #0]
 801a42c:	33bc      	adds	r3, #188	; 0xbc
 801a42e:	681b      	ldr	r3, [r3, #0]
 801a430:	6839      	ldr	r1, [r7, #0]
 801a432:	4610      	mov	r0, r2
 801a434:	4798      	blx	r3
 801a436:	4603      	mov	r3, r0
 801a438:	f083 0301 	eor.w	r3, r3, #1
 801a43c:	b2db      	uxtb	r3, r3
 801a43e:	2b00      	cmp	r3, #0
 801a440:	d002      	beq.n	801a448 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x3c>
            p->expectedCall_ = NULLPTR;
 801a442:	68fb      	ldr	r3, [r7, #12]
 801a444:	2200      	movs	r2, #0
 801a446:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a448:	68fb      	ldr	r3, [r7, #12]
 801a44a:	685b      	ldr	r3, [r3, #4]
 801a44c:	60fb      	str	r3, [r7, #12]
 801a44e:	e7e5      	b.n	801a41c <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x10>
    pruneEmptyNodeFromList();
 801a450:	687b      	ldr	r3, [r7, #4]
 801a452:	681b      	ldr	r3, [r3, #0]
 801a454:	3388      	adds	r3, #136	; 0x88
 801a456:	681b      	ldr	r3, [r3, #0]
 801a458:	6878      	ldr	r0, [r7, #4]
 801a45a:	4798      	blx	r3
}
 801a45c:	bf00      	nop
 801a45e:	3710      	adds	r7, #16
 801a460:	46bd      	mov	sp, r7
 801a462:	bd80      	pop	{r7, pc}

0801a464 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstFinalizedMatchingExpectation()
{
 801a464:	b580      	push	{r7, lr}
 801a466:	b084      	sub	sp, #16
 801a468:	af00      	add	r7, sp, #0
 801a46a:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	685b      	ldr	r3, [r3, #4]
 801a470:	60fb      	str	r3, [r7, #12]
 801a472:	68fb      	ldr	r3, [r7, #12]
 801a474:	2b00      	cmp	r3, #0
 801a476:	d01d      	beq.n	801a4b4 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801a478:	68fb      	ldr	r3, [r7, #12]
 801a47a:	681a      	ldr	r2, [r3, #0]
 801a47c:	68fb      	ldr	r3, [r7, #12]
 801a47e:	681b      	ldr	r3, [r3, #0]
 801a480:	681b      	ldr	r3, [r3, #0]
 801a482:	33c8      	adds	r3, #200	; 0xc8
 801a484:	681b      	ldr	r3, [r3, #0]
 801a486:	4610      	mov	r0, r2
 801a488:	4798      	blx	r3
 801a48a:	4603      	mov	r3, r0
 801a48c:	2b00      	cmp	r3, #0
 801a48e:	d00d      	beq.n	801a4ac <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801a490:	68fb      	ldr	r3, [r7, #12]
 801a492:	681b      	ldr	r3, [r3, #0]
 801a494:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801a496:	68fb      	ldr	r3, [r7, #12]
 801a498:	2200      	movs	r2, #0
 801a49a:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801a49c:	687b      	ldr	r3, [r7, #4]
 801a49e:	681b      	ldr	r3, [r3, #0]
 801a4a0:	3388      	adds	r3, #136	; 0x88
 801a4a2:	681b      	ldr	r3, [r3, #0]
 801a4a4:	6878      	ldr	r0, [r7, #4]
 801a4a6:	4798      	blx	r3
            return matchingCall;
 801a4a8:	68bb      	ldr	r3, [r7, #8]
 801a4aa:	e004      	b.n	801a4b6 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a4ac:	68fb      	ldr	r3, [r7, #12]
 801a4ae:	685b      	ldr	r3, [r3, #4]
 801a4b0:	60fb      	str	r3, [r7, #12]
 801a4b2:	e7de      	b.n	801a472 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801a4b4:	2300      	movs	r3, #0
}
 801a4b6:	4618      	mov	r0, r3
 801a4b8:	3710      	adds	r7, #16
 801a4ba:	46bd      	mov	sp, r7
 801a4bc:	bd80      	pop	{r7, pc}

0801a4be <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::getFirstMatchingExpectation()
{
 801a4be:	b580      	push	{r7, lr}
 801a4c0:	b084      	sub	sp, #16
 801a4c2:	af00      	add	r7, sp, #0
 801a4c4:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a4c6:	687b      	ldr	r3, [r7, #4]
 801a4c8:	685b      	ldr	r3, [r3, #4]
 801a4ca:	60fb      	str	r3, [r7, #12]
 801a4cc:	68fb      	ldr	r3, [r7, #12]
 801a4ce:	2b00      	cmp	r3, #0
 801a4d0:	d012      	beq.n	801a4f8 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3a>
        if (p->expectedCall_->isMatchingActualCall()) {
 801a4d2:	68fb      	ldr	r3, [r7, #12]
 801a4d4:	681a      	ldr	r2, [r3, #0]
 801a4d6:	68fb      	ldr	r3, [r7, #12]
 801a4d8:	681b      	ldr	r3, [r3, #0]
 801a4da:	681b      	ldr	r3, [r3, #0]
 801a4dc:	33cc      	adds	r3, #204	; 0xcc
 801a4de:	681b      	ldr	r3, [r3, #0]
 801a4e0:	4610      	mov	r0, r2
 801a4e2:	4798      	blx	r3
 801a4e4:	4603      	mov	r3, r0
 801a4e6:	2b00      	cmp	r3, #0
 801a4e8:	d002      	beq.n	801a4f0 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x32>
            return p->expectedCall_;
 801a4ea:	68fb      	ldr	r3, [r7, #12]
 801a4ec:	681b      	ldr	r3, [r3, #0]
 801a4ee:	e004      	b.n	801a4fa <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3c>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a4f0:	68fb      	ldr	r3, [r7, #12]
 801a4f2:	685b      	ldr	r3, [r3, #4]
 801a4f4:	60fb      	str	r3, [r7, #12]
 801a4f6:	e7e9      	b.n	801a4cc <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801a4f8:	2300      	movs	r3, #0
}
 801a4fa:	4618      	mov	r0, r3
 801a4fc:	3710      	adds	r7, #16
 801a4fe:	46bd      	mov	sp, r7
 801a500:	bd80      	pop	{r7, pc}

0801a502 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstMatchingExpectation()
{
 801a502:	b580      	push	{r7, lr}
 801a504:	b084      	sub	sp, #16
 801a506:	af00      	add	r7, sp, #0
 801a508:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	685b      	ldr	r3, [r3, #4]
 801a50e:	60fb      	str	r3, [r7, #12]
 801a510:	68fb      	ldr	r3, [r7, #12]
 801a512:	2b00      	cmp	r3, #0
 801a514:	d01d      	beq.n	801a552 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCall()) {
 801a516:	68fb      	ldr	r3, [r7, #12]
 801a518:	681a      	ldr	r2, [r3, #0]
 801a51a:	68fb      	ldr	r3, [r7, #12]
 801a51c:	681b      	ldr	r3, [r3, #0]
 801a51e:	681b      	ldr	r3, [r3, #0]
 801a520:	33cc      	adds	r3, #204	; 0xcc
 801a522:	681b      	ldr	r3, [r3, #0]
 801a524:	4610      	mov	r0, r2
 801a526:	4798      	blx	r3
 801a528:	4603      	mov	r3, r0
 801a52a:	2b00      	cmp	r3, #0
 801a52c:	d00d      	beq.n	801a54a <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801a52e:	68fb      	ldr	r3, [r7, #12]
 801a530:	681b      	ldr	r3, [r3, #0]
 801a532:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801a534:	68fb      	ldr	r3, [r7, #12]
 801a536:	2200      	movs	r2, #0
 801a538:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	681b      	ldr	r3, [r3, #0]
 801a53e:	3388      	adds	r3, #136	; 0x88
 801a540:	681b      	ldr	r3, [r3, #0]
 801a542:	6878      	ldr	r0, [r7, #4]
 801a544:	4798      	blx	r3
            return matchingCall;
 801a546:	68bb      	ldr	r3, [r7, #8]
 801a548:	e004      	b.n	801a554 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a54a:	68fb      	ldr	r3, [r7, #12]
 801a54c:	685b      	ldr	r3, [r3, #4]
 801a54e:	60fb      	str	r3, [r7, #12]
 801a550:	e7de      	b.n	801a510 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801a552:	2300      	movs	r3, #0
}
 801a554:	4618      	mov	r0, r3
 801a556:	3710      	adds	r7, #16
 801a558:	46bd      	mov	sp, r7
 801a55a:	bd80      	pop	{r7, pc}

0801a55c <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv>:

void MockExpectedCallsList::pruneEmptyNodeFromList()
{
 801a55c:	b580      	push	{r7, lr}
 801a55e:	b086      	sub	sp, #24
 801a560:	af00      	add	r7, sp, #0
 801a562:	6078      	str	r0, [r7, #4]
    MockExpectedCallsListNode* current = head_;
 801a564:	687b      	ldr	r3, [r7, #4]
 801a566:	685b      	ldr	r3, [r3, #4]
 801a568:	617b      	str	r3, [r7, #20]
    MockExpectedCallsListNode* previous = NULLPTR;
 801a56a:	2300      	movs	r3, #0
 801a56c:	613b      	str	r3, [r7, #16]
    MockExpectedCallsListNode* toBeDeleted = NULLPTR;
 801a56e:	2300      	movs	r3, #0
 801a570:	60fb      	str	r3, [r7, #12]

    while (current) {
 801a572:	697b      	ldr	r3, [r7, #20]
 801a574:	2b00      	cmp	r3, #0
 801a576:	d024      	beq.n	801a5c2 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x66>
        if (current->expectedCall_ == NULLPTR) {
 801a578:	697b      	ldr	r3, [r7, #20]
 801a57a:	681b      	ldr	r3, [r3, #0]
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	d11a      	bne.n	801a5b6 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x5a>
            toBeDeleted = current;
 801a580:	697b      	ldr	r3, [r7, #20]
 801a582:	60fb      	str	r3, [r7, #12]
            if (previous == NULLPTR)
 801a584:	693b      	ldr	r3, [r7, #16]
 801a586:	2b00      	cmp	r3, #0
 801a588:	d106      	bne.n	801a598 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x3c>
                head_ = current = current->next_;
 801a58a:	697b      	ldr	r3, [r7, #20]
 801a58c:	685b      	ldr	r3, [r3, #4]
 801a58e:	617b      	str	r3, [r7, #20]
 801a590:	687b      	ldr	r3, [r7, #4]
 801a592:	697a      	ldr	r2, [r7, #20]
 801a594:	605a      	str	r2, [r3, #4]
 801a596:	e006      	b.n	801a5a6 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x4a>
            else
                current = previous->next_ = current->next_;
 801a598:	697b      	ldr	r3, [r7, #20]
 801a59a:	685a      	ldr	r2, [r3, #4]
 801a59c:	693b      	ldr	r3, [r7, #16]
 801a59e:	605a      	str	r2, [r3, #4]
 801a5a0:	693b      	ldr	r3, [r7, #16]
 801a5a2:	685b      	ldr	r3, [r3, #4]
 801a5a4:	617b      	str	r3, [r7, #20]
            delete toBeDeleted;
 801a5a6:	68fb      	ldr	r3, [r7, #12]
 801a5a8:	2b00      	cmp	r3, #0
 801a5aa:	d0e2      	beq.n	801a572 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
 801a5ac:	2108      	movs	r1, #8
 801a5ae:	4618      	mov	r0, r3
 801a5b0:	f7ee f82e 	bl	8008610 <_ZdlPvj>
 801a5b4:	e7dd      	b.n	801a572 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
        else {
            previous = current;
 801a5b6:	697b      	ldr	r3, [r7, #20]
 801a5b8:	613b      	str	r3, [r7, #16]
            current = current->next_;
 801a5ba:	697b      	ldr	r3, [r7, #20]
 801a5bc:	685b      	ldr	r3, [r3, #4]
 801a5be:	617b      	str	r3, [r7, #20]
    while (current) {
 801a5c0:	e7d7      	b.n	801a572 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
    }
}
 801a5c2:	bf00      	nop
 801a5c4:	3718      	adds	r7, #24
 801a5c6:	46bd      	mov	sp, r7
 801a5c8:	bd80      	pop	{r7, pc}

0801a5ca <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>:

void MockExpectedCallsList::deleteAllExpectationsAndClearList()
{
 801a5ca:	b580      	push	{r7, lr}
 801a5cc:	b084      	sub	sp, #16
 801a5ce:	af00      	add	r7, sp, #0
 801a5d0:	6078      	str	r0, [r7, #4]
    while (head_) {
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	685b      	ldr	r3, [r3, #4]
 801a5d6:	2b00      	cmp	r3, #0
 801a5d8:	d019      	beq.n	801a60e <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x44>
        MockExpectedCallsListNode* next = head_->next_;
 801a5da:	687b      	ldr	r3, [r7, #4]
 801a5dc:	685b      	ldr	r3, [r3, #4]
 801a5de:	685b      	ldr	r3, [r3, #4]
 801a5e0:	60fb      	str	r3, [r7, #12]
        delete head_->expectedCall_;
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	685b      	ldr	r3, [r3, #4]
 801a5e6:	681b      	ldr	r3, [r3, #0]
 801a5e8:	2b00      	cmp	r3, #0
 801a5ea:	d004      	beq.n	801a5f6 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x2c>
 801a5ec:	681a      	ldr	r2, [r3, #0]
 801a5ee:	3204      	adds	r2, #4
 801a5f0:	6812      	ldr	r2, [r2, #0]
 801a5f2:	4618      	mov	r0, r3
 801a5f4:	4790      	blx	r2
        delete head_;
 801a5f6:	687b      	ldr	r3, [r7, #4]
 801a5f8:	685b      	ldr	r3, [r3, #4]
 801a5fa:	2b00      	cmp	r3, #0
 801a5fc:	d003      	beq.n	801a606 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x3c>
 801a5fe:	2108      	movs	r1, #8
 801a600:	4618      	mov	r0, r3
 801a602:	f7ee f805 	bl	8008610 <_ZdlPvj>
        head_ = next;
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	68fa      	ldr	r2, [r7, #12]
 801a60a:	605a      	str	r2, [r3, #4]
    while (head_) {
 801a60c:	e7e1      	b.n	801a5d2 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x8>
    }
}
 801a60e:	bf00      	nop
 801a610:	3710      	adds	r7, #16
 801a612:	46bd      	mov	sp, r7
 801a614:	bd80      	pop	{r7, pc}

0801a616 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>:

void MockExpectedCallsList::resetActualCallMatchingState()
{
 801a616:	b580      	push	{r7, lr}
 801a618:	b084      	sub	sp, #16
 801a61a:	af00      	add	r7, sp, #0
 801a61c:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	685b      	ldr	r3, [r3, #4]
 801a622:	60fb      	str	r3, [r7, #12]
 801a624:	68fb      	ldr	r3, [r7, #12]
 801a626:	2b00      	cmp	r3, #0
 801a628:	d00c      	beq.n	801a644 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0x2e>
        p->expectedCall_->resetActualCallMatchingState();
 801a62a:	68fb      	ldr	r3, [r7, #12]
 801a62c:	681a      	ldr	r2, [r3, #0]
 801a62e:	68fb      	ldr	r3, [r7, #12]
 801a630:	681b      	ldr	r3, [r3, #0]
 801a632:	681b      	ldr	r3, [r3, #0]
 801a634:	33ec      	adds	r3, #236	; 0xec
 801a636:	681b      	ldr	r3, [r3, #0]
 801a638:	4610      	mov	r0, r2
 801a63a:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a63c:	68fb      	ldr	r3, [r7, #12]
 801a63e:	685b      	ldr	r3, [r3, #4]
 801a640:	60fb      	str	r3, [r7, #12]
 801a642:	e7ef      	b.n	801a624 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0xe>
}
 801a644:	bf00      	nop
 801a646:	3710      	adds	r7, #16
 801a648:	46bd      	mov	sp, r7
 801a64a:	bd80      	pop	{r7, pc}

0801a64c <_ZN21MockExpectedCallsList17wasPassedToObjectEv>:

void MockExpectedCallsList::wasPassedToObject()
{
 801a64c:	b580      	push	{r7, lr}
 801a64e:	b084      	sub	sp, #16
 801a650:	af00      	add	r7, sp, #0
 801a652:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a654:	687b      	ldr	r3, [r7, #4]
 801a656:	685b      	ldr	r3, [r3, #4]
 801a658:	60fb      	str	r3, [r7, #12]
 801a65a:	68fb      	ldr	r3, [r7, #12]
 801a65c:	2b00      	cmp	r3, #0
 801a65e:	d00c      	beq.n	801a67a <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0x2e>
        p->expectedCall_->wasPassedToObject();
 801a660:	68fb      	ldr	r3, [r7, #12]
 801a662:	681a      	ldr	r2, [r3, #0]
 801a664:	68fb      	ldr	r3, [r7, #12]
 801a666:	681b      	ldr	r3, [r3, #0]
 801a668:	681b      	ldr	r3, [r3, #0]
 801a66a:	33e8      	adds	r3, #232	; 0xe8
 801a66c:	681b      	ldr	r3, [r3, #0]
 801a66e:	4610      	mov	r0, r2
 801a670:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a672:	68fb      	ldr	r3, [r7, #12]
 801a674:	685b      	ldr	r3, [r3, #4]
 801a676:	60fb      	str	r3, [r7, #12]
 801a678:	e7ef      	b.n	801a65a <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0xe>
}
 801a67a:	bf00      	nop
 801a67c:	3710      	adds	r7, #16
 801a67e:	46bd      	mov	sp, r7
 801a680:	bd80      	pop	{r7, pc}

0801a682 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>:


void MockExpectedCallsList::parameterWasPassed(const SimpleString& parameterName)
{
 801a682:	b580      	push	{r7, lr}
 801a684:	b084      	sub	sp, #16
 801a686:	af00      	add	r7, sp, #0
 801a688:	6078      	str	r0, [r7, #4]
 801a68a:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	685b      	ldr	r3, [r3, #4]
 801a690:	60fb      	str	r3, [r7, #12]
 801a692:	68fb      	ldr	r3, [r7, #12]
 801a694:	2b00      	cmp	r3, #0
 801a696:	d00d      	beq.n	801a6b4 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->inputParameterWasPassed(parameterName);
 801a698:	68fb      	ldr	r3, [r7, #12]
 801a69a:	681a      	ldr	r2, [r3, #0]
 801a69c:	68fb      	ldr	r3, [r7, #12]
 801a69e:	681b      	ldr	r3, [r3, #0]
 801a6a0:	681b      	ldr	r3, [r3, #0]
 801a6a2:	33dc      	adds	r3, #220	; 0xdc
 801a6a4:	681b      	ldr	r3, [r3, #0]
 801a6a6:	6839      	ldr	r1, [r7, #0]
 801a6a8:	4610      	mov	r0, r2
 801a6aa:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a6ac:	68fb      	ldr	r3, [r7, #12]
 801a6ae:	685b      	ldr	r3, [r3, #4]
 801a6b0:	60fb      	str	r3, [r7, #12]
 801a6b2:	e7ee      	b.n	801a692 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x10>
}
 801a6b4:	bf00      	nop
 801a6b6:	3710      	adds	r7, #16
 801a6b8:	46bd      	mov	sp, r7
 801a6ba:	bd80      	pop	{r7, pc}

0801a6bc <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>:

void MockExpectedCallsList::outputParameterWasPassed(const SimpleString& parameterName)
{
 801a6bc:	b580      	push	{r7, lr}
 801a6be:	b084      	sub	sp, #16
 801a6c0:	af00      	add	r7, sp, #0
 801a6c2:	6078      	str	r0, [r7, #4]
 801a6c4:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	685b      	ldr	r3, [r3, #4]
 801a6ca:	60fb      	str	r3, [r7, #12]
 801a6cc:	68fb      	ldr	r3, [r7, #12]
 801a6ce:	2b00      	cmp	r3, #0
 801a6d0:	d00d      	beq.n	801a6ee <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->outputParameterWasPassed(parameterName);
 801a6d2:	68fb      	ldr	r3, [r7, #12]
 801a6d4:	681a      	ldr	r2, [r3, #0]
 801a6d6:	68fb      	ldr	r3, [r7, #12]
 801a6d8:	681b      	ldr	r3, [r3, #0]
 801a6da:	681b      	ldr	r3, [r3, #0]
 801a6dc:	33e0      	adds	r3, #224	; 0xe0
 801a6de:	681b      	ldr	r3, [r3, #0]
 801a6e0:	6839      	ldr	r1, [r7, #0]
 801a6e2:	4610      	mov	r0, r2
 801a6e4:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a6e6:	68fb      	ldr	r3, [r7, #12]
 801a6e8:	685b      	ldr	r3, [r3, #4]
 801a6ea:	60fb      	str	r3, [r7, #12]
 801a6ec:	e7ee      	b.n	801a6cc <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x10>
}
 801a6ee:	bf00      	nop
 801a6f0:	3710      	adds	r7, #16
 801a6f2:	46bd      	mov	sp, r7
 801a6f4:	bd80      	pop	{r7, pc}
	...

0801a6f8 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>:

static SimpleString stringOrNoneTextWhenEmpty(const SimpleString& inputString, const SimpleString& linePrefix)
{
 801a6f8:	b590      	push	{r4, r7, lr}
 801a6fa:	b087      	sub	sp, #28
 801a6fc:	af00      	add	r7, sp, #0
 801a6fe:	60f8      	str	r0, [r7, #12]
 801a700:	60b9      	str	r1, [r7, #8]
 801a702:	607a      	str	r2, [r7, #4]
    SimpleString str = inputString;
 801a704:	68b9      	ldr	r1, [r7, #8]
 801a706:	68f8      	ldr	r0, [r7, #12]
 801a708:	f7f0 fb85 	bl	800ae16 <_ZN12SimpleStringC1ERKS_>
    if (str == "") {
 801a70c:	f107 0310 	add.w	r3, r7, #16
 801a710:	490f      	ldr	r1, [pc, #60]	; (801a750 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x58>)
 801a712:	4618      	mov	r0, r3
 801a714:	f7f0 fb2b 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801a718:	f107 0310 	add.w	r3, r7, #16
 801a71c:	4619      	mov	r1, r3
 801a71e:	68f8      	ldr	r0, [r7, #12]
 801a720:	f7f0 fee9 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801a724:	4603      	mov	r3, r0
 801a726:	461c      	mov	r4, r3
 801a728:	f107 0310 	add.w	r3, r7, #16
 801a72c:	4618      	mov	r0, r3
 801a72e:	f7f0 fed6 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801a732:	2c00      	cmp	r4, #0
 801a734:	d007      	beq.n	801a746 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x4e>
        str += linePrefix;
 801a736:	6879      	ldr	r1, [r7, #4]
 801a738:	68f8      	ldr	r0, [r7, #12]
 801a73a:	f7f0 ff4d 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
        str += "<none>";
 801a73e:	4905      	ldr	r1, [pc, #20]	; (801a754 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x5c>)
 801a740:	68f8      	ldr	r0, [r7, #12]
 801a742:	f7f0 ff5b 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    }
    return str;
 801a746:	bf00      	nop
}
 801a748:	68f8      	ldr	r0, [r7, #12]
 801a74a:	371c      	adds	r7, #28
 801a74c:	46bd      	mov	sp, r7
 801a74e:	bd90      	pop	{r4, r7, pc}
 801a750:	08023f50 	.word	0x08023f50
 801a754:	08023f54 	.word	0x08023f54

0801a758 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>:

static SimpleString appendStringOnANewLine(const SimpleString& inputString, const SimpleString& linePrefix, const SimpleString& stringToAppend)
{
 801a758:	b590      	push	{r4, r7, lr}
 801a75a:	b087      	sub	sp, #28
 801a75c:	af00      	add	r7, sp, #0
 801a75e:	60f8      	str	r0, [r7, #12]
 801a760:	60b9      	str	r1, [r7, #8]
 801a762:	607a      	str	r2, [r7, #4]
 801a764:	603b      	str	r3, [r7, #0]
    SimpleString str = inputString;
 801a766:	68b9      	ldr	r1, [r7, #8]
 801a768:	68f8      	ldr	r0, [r7, #12]
 801a76a:	f7f0 fb54 	bl	800ae16 <_ZN12SimpleStringC1ERKS_>
    if (str != "") str += "\n";
 801a76e:	f107 0310 	add.w	r3, r7, #16
 801a772:	4912      	ldr	r1, [pc, #72]	; (801a7bc <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x64>)
 801a774:	4618      	mov	r0, r3
 801a776:	f7f0 fafa 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801a77a:	f107 0310 	add.w	r3, r7, #16
 801a77e:	4619      	mov	r1, r3
 801a780:	68f8      	ldr	r0, [r7, #12]
 801a782:	f7f0 fefd 	bl	800b580 <_ZneRK12SimpleStringS1_>
 801a786:	4603      	mov	r3, r0
 801a788:	461c      	mov	r4, r3
 801a78a:	f107 0310 	add.w	r3, r7, #16
 801a78e:	4618      	mov	r0, r3
 801a790:	f7f0 fea5 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801a794:	2c00      	cmp	r4, #0
 801a796:	d003      	beq.n	801a7a0 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x48>
 801a798:	4909      	ldr	r1, [pc, #36]	; (801a7c0 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x68>)
 801a79a:	68f8      	ldr	r0, [r7, #12]
 801a79c:	f7f0 ff2e 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    str += linePrefix;
 801a7a0:	6879      	ldr	r1, [r7, #4]
 801a7a2:	68f8      	ldr	r0, [r7, #12]
 801a7a4:	f7f0 ff18 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
    str += stringToAppend;
 801a7a8:	6839      	ldr	r1, [r7, #0]
 801a7aa:	68f8      	ldr	r0, [r7, #12]
 801a7ac:	f7f0 ff14 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
    return str;
 801a7b0:	bf00      	nop
}
 801a7b2:	68f8      	ldr	r0, [r7, #12]
 801a7b4:	371c      	adds	r7, #28
 801a7b6:	46bd      	mov	sp, r7
 801a7b8:	bd90      	pop	{r4, r7, pc}
 801a7ba:	bf00      	nop
 801a7bc:	08023f50 	.word	0x08023f50
 801a7c0:	08023f5c 	.word	0x08023f5c

0801a7c4 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::unfulfilledCallsToString(const SimpleString& linePrefix) const
{
 801a7c4:	b580      	push	{r7, lr}
 801a7c6:	b08c      	sub	sp, #48	; 0x30
 801a7c8:	af00      	add	r7, sp, #0
 801a7ca:	60f8      	str	r0, [r7, #12]
 801a7cc:	60b9      	str	r1, [r7, #8]
 801a7ce:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801a7d0:	f107 0314 	add.w	r3, r7, #20
 801a7d4:	4929      	ldr	r1, [pc, #164]	; (801a87c <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0xb8>)
 801a7d6:	4618      	mov	r0, r3
 801a7d8:	f7f0 fac9 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a7dc:	68bb      	ldr	r3, [r7, #8]
 801a7de:	685b      	ldr	r3, [r3, #4]
 801a7e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7e4:	2b00      	cmp	r3, #0
 801a7e6:	d038      	beq.n	801a85a <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x96>
        if (!p->expectedCall_->isFulfilled())
 801a7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7ea:	681a      	ldr	r2, [r3, #0]
 801a7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7ee:	681b      	ldr	r3, [r3, #0]
 801a7f0:	681b      	ldr	r3, [r3, #0]
 801a7f2:	33c0      	adds	r3, #192	; 0xc0
 801a7f4:	681b      	ldr	r3, [r3, #0]
 801a7f6:	4610      	mov	r0, r2
 801a7f8:	4798      	blx	r3
 801a7fa:	4603      	mov	r3, r0
 801a7fc:	f083 0301 	eor.w	r3, r3, #1
 801a800:	b2db      	uxtb	r3, r3
 801a802:	2b00      	cmp	r3, #0
 801a804:	d025      	beq.n	801a852 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x8e>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801a806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a808:	6819      	ldr	r1, [r3, #0]
 801a80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a80c:	681b      	ldr	r3, [r3, #0]
 801a80e:	681b      	ldr	r3, [r3, #0]
 801a810:	33f0      	adds	r3, #240	; 0xf0
 801a812:	681b      	ldr	r3, [r3, #0]
 801a814:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801a818:	4610      	mov	r0, r2
 801a81a:	4798      	blx	r3
 801a81c:	f107 001c 	add.w	r0, r7, #28
 801a820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a824:	f107 0114 	add.w	r1, r7, #20
 801a828:	687a      	ldr	r2, [r7, #4]
 801a82a:	f7ff ff95 	bl	801a758 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801a82e:	f107 021c 	add.w	r2, r7, #28
 801a832:	f107 0314 	add.w	r3, r7, #20
 801a836:	4611      	mov	r1, r2
 801a838:	4618      	mov	r0, r3
 801a83a:	f7f0 fb04 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 801a83e:	f107 031c 	add.w	r3, r7, #28
 801a842:	4618      	mov	r0, r3
 801a844:	f7f0 fe4b 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801a848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a84c:	4618      	mov	r0, r3
 801a84e:	f7f0 fe46 	bl	800b4de <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a854:	685b      	ldr	r3, [r3, #4]
 801a856:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a858:	e7c3      	b.n	801a7e2 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x1e>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801a85a:	68fb      	ldr	r3, [r7, #12]
 801a85c:	f107 0114 	add.w	r1, r7, #20
 801a860:	687a      	ldr	r2, [r7, #4]
 801a862:	4618      	mov	r0, r3
 801a864:	f7ff ff48 	bl	801a6f8 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801a868:	f107 0314 	add.w	r3, r7, #20
 801a86c:	4618      	mov	r0, r3
 801a86e:	f7f0 fe36 	bl	800b4de <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801a872:	bf00      	nop
}
 801a874:	68f8      	ldr	r0, [r7, #12]
 801a876:	3730      	adds	r7, #48	; 0x30
 801a878:	46bd      	mov	sp, r7
 801a87a:	bd80      	pop	{r7, pc}
 801a87c:	08023f50 	.word	0x08023f50

0801a880 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::fulfilledCallsToString(const SimpleString& linePrefix) const
{
 801a880:	b580      	push	{r7, lr}
 801a882:	b08c      	sub	sp, #48	; 0x30
 801a884:	af00      	add	r7, sp, #0
 801a886:	60f8      	str	r0, [r7, #12]
 801a888:	60b9      	str	r1, [r7, #8]
 801a88a:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801a88c:	f107 0314 	add.w	r3, r7, #20
 801a890:	4928      	ldr	r1, [pc, #160]	; (801a934 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0xb4>)
 801a892:	4618      	mov	r0, r3
 801a894:	f7f0 fa6b 	bl	800ad6e <_ZN12SimpleStringC1EPKc>

    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a898:	68bb      	ldr	r3, [r7, #8]
 801a89a:	685b      	ldr	r3, [r3, #4]
 801a89c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8a0:	2b00      	cmp	r3, #0
 801a8a2:	d035      	beq.n	801a910 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x90>
        if (p->expectedCall_->isFulfilled())
 801a8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8a6:	681a      	ldr	r2, [r3, #0]
 801a8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8aa:	681b      	ldr	r3, [r3, #0]
 801a8ac:	681b      	ldr	r3, [r3, #0]
 801a8ae:	33c0      	adds	r3, #192	; 0xc0
 801a8b0:	681b      	ldr	r3, [r3, #0]
 801a8b2:	4610      	mov	r0, r2
 801a8b4:	4798      	blx	r3
 801a8b6:	4603      	mov	r3, r0
 801a8b8:	2b00      	cmp	r3, #0
 801a8ba:	d025      	beq.n	801a908 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x88>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801a8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8be:	6819      	ldr	r1, [r3, #0]
 801a8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8c2:	681b      	ldr	r3, [r3, #0]
 801a8c4:	681b      	ldr	r3, [r3, #0]
 801a8c6:	33f0      	adds	r3, #240	; 0xf0
 801a8c8:	681b      	ldr	r3, [r3, #0]
 801a8ca:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801a8ce:	4610      	mov	r0, r2
 801a8d0:	4798      	blx	r3
 801a8d2:	f107 001c 	add.w	r0, r7, #28
 801a8d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a8da:	f107 0114 	add.w	r1, r7, #20
 801a8de:	687a      	ldr	r2, [r7, #4]
 801a8e0:	f7ff ff3a 	bl	801a758 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801a8e4:	f107 021c 	add.w	r2, r7, #28
 801a8e8:	f107 0314 	add.w	r3, r7, #20
 801a8ec:	4611      	mov	r1, r2
 801a8ee:	4618      	mov	r0, r3
 801a8f0:	f7f0 faa9 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 801a8f4:	f107 031c 	add.w	r3, r7, #28
 801a8f8:	4618      	mov	r0, r3
 801a8fa:	f7f0 fdf0 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801a8fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a902:	4618      	mov	r0, r3
 801a904:	f7f0 fdeb 	bl	800b4de <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a90a:	685b      	ldr	r3, [r3, #4]
 801a90c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a90e:	e7c6      	b.n	801a89e <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x1e>

    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801a910:	68fb      	ldr	r3, [r7, #12]
 801a912:	f107 0114 	add.w	r1, r7, #20
 801a916:	687a      	ldr	r2, [r7, #4]
 801a918:	4618      	mov	r0, r3
 801a91a:	f7ff feed 	bl	801a6f8 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801a91e:	f107 0314 	add.w	r3, r7, #20
 801a922:	4618      	mov	r0, r3
 801a924:	f7f0 fddb 	bl	800b4de <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801a928:	bf00      	nop
}
 801a92a:	68f8      	ldr	r0, [r7, #12]
 801a92c:	3730      	adds	r7, #48	; 0x30
 801a92e:	46bd      	mov	sp, r7
 801a930:	bd80      	pop	{r7, pc}
 801a932:	bf00      	nop
 801a934:	08023f50 	.word	0x08023f50

0801a938 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>:

SimpleString MockExpectedCallsList::missingParametersToString() const
{
 801a938:	b580      	push	{r7, lr}
 801a93a:	b08e      	sub	sp, #56	; 0x38
 801a93c:	af00      	add	r7, sp, #0
 801a93e:	6078      	str	r0, [r7, #4]
 801a940:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801a942:	f107 030c 	add.w	r3, r7, #12
 801a946:	4936      	ldr	r1, [pc, #216]	; (801aa20 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801a948:	4618      	mov	r0, r3
 801a94a:	f7f0 fa10 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a94e:	683b      	ldr	r3, [r7, #0]
 801a950:	685b      	ldr	r3, [r3, #4]
 801a952:	637b      	str	r3, [r7, #52]	; 0x34
 801a954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a956:	2b00      	cmp	r3, #0
 801a958:	d044      	beq.n	801a9e4 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xac>
        if (! p->expectedCall_->isMatchingActualCall())
 801a95a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a95c:	681a      	ldr	r2, [r3, #0]
 801a95e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a960:	681b      	ldr	r3, [r3, #0]
 801a962:	681b      	ldr	r3, [r3, #0]
 801a964:	33cc      	adds	r3, #204	; 0xcc
 801a966:	681b      	ldr	r3, [r3, #0]
 801a968:	4610      	mov	r0, r2
 801a96a:	4798      	blx	r3
 801a96c:	4603      	mov	r3, r0
 801a96e:	f083 0301 	eor.w	r3, r3, #1
 801a972:	b2db      	uxtb	r3, r3
 801a974:	2b00      	cmp	r3, #0
 801a976:	d031      	beq.n	801a9dc <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xa4>
            str = appendStringOnANewLine(str, "", p->expectedCall_->missingParametersToString());
 801a978:	f107 031c 	add.w	r3, r7, #28
 801a97c:	4928      	ldr	r1, [pc, #160]	; (801aa20 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801a97e:	4618      	mov	r0, r3
 801a980:	f7f0 f9f5 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801a984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a986:	6819      	ldr	r1, [r3, #0]
 801a988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a98a:	681b      	ldr	r3, [r3, #0]
 801a98c:	681b      	ldr	r3, [r3, #0]
 801a98e:	33f4      	adds	r3, #244	; 0xf4
 801a990:	681b      	ldr	r3, [r3, #0]
 801a992:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801a996:	4610      	mov	r0, r2
 801a998:	4798      	blx	r3
 801a99a:	f107 0014 	add.w	r0, r7, #20
 801a99e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a9a2:	f107 021c 	add.w	r2, r7, #28
 801a9a6:	f107 010c 	add.w	r1, r7, #12
 801a9aa:	f7ff fed5 	bl	801a758 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801a9ae:	f107 0214 	add.w	r2, r7, #20
 801a9b2:	f107 030c 	add.w	r3, r7, #12
 801a9b6:	4611      	mov	r1, r2
 801a9b8:	4618      	mov	r0, r3
 801a9ba:	f7f0 fa44 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 801a9be:	f107 0314 	add.w	r3, r7, #20
 801a9c2:	4618      	mov	r0, r3
 801a9c4:	f7f0 fd8b 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801a9c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a9cc:	4618      	mov	r0, r3
 801a9ce:	f7f0 fd86 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801a9d2:	f107 031c 	add.w	r3, r7, #28
 801a9d6:	4618      	mov	r0, r3
 801a9d8:	f7f0 fd81 	bl	800b4de <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a9dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a9de:	685b      	ldr	r3, [r3, #4]
 801a9e0:	637b      	str	r3, [r7, #52]	; 0x34
 801a9e2:	e7b7      	b.n	801a954 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0x1c>

    return stringOrNoneTextWhenEmpty(str, "");
 801a9e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a9e8:	490d      	ldr	r1, [pc, #52]	; (801aa20 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801a9ea:	4618      	mov	r0, r3
 801a9ec:	f7f0 f9bf 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801a9f0:	687b      	ldr	r3, [r7, #4]
 801a9f2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801a9f6:	f107 010c 	add.w	r1, r7, #12
 801a9fa:	4618      	mov	r0, r3
 801a9fc:	f7ff fe7c 	bl	801a6f8 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
 801aa00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801aa04:	4618      	mov	r0, r3
 801aa06:	f7f0 fd6a 	bl	800b4de <_ZN12SimpleStringD1Ev>
    SimpleString str;
 801aa0a:	f107 030c 	add.w	r3, r7, #12
 801aa0e:	4618      	mov	r0, r3
 801aa10:	f7f0 fd65 	bl	800b4de <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, "");
 801aa14:	bf00      	nop
}
 801aa16:	6878      	ldr	r0, [r7, #4]
 801aa18:	3738      	adds	r7, #56	; 0x38
 801aa1a:	46bd      	mov	sp, r7
 801aa1c:	bd80      	pop	{r7, pc}
 801aa1e:	bf00      	nop
 801aa20:	08023f50 	.word	0x08023f50

0801aa24 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>:

bool MockExpectedCallsList::hasUnmatchingExpectationsBecauseOfMissingParameters() const
{
 801aa24:	b580      	push	{r7, lr}
 801aa26:	b084      	sub	sp, #16
 801aa28:	af00      	add	r7, sp, #0
 801aa2a:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	685b      	ldr	r3, [r3, #4]
 801aa30:	60fb      	str	r3, [r7, #12]
 801aa32:	68fb      	ldr	r3, [r7, #12]
 801aa34:	2b00      	cmp	r3, #0
 801aa36:	d014      	beq.n	801aa62 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x3e>
        if (! p->expectedCall_->areParametersMatchingActualCall())
 801aa38:	68fb      	ldr	r3, [r7, #12]
 801aa3a:	681a      	ldr	r2, [r3, #0]
 801aa3c:	68fb      	ldr	r3, [r7, #12]
 801aa3e:	681b      	ldr	r3, [r3, #0]
 801aa40:	681b      	ldr	r3, [r3, #0]
 801aa42:	33d0      	adds	r3, #208	; 0xd0
 801aa44:	681b      	ldr	r3, [r3, #0]
 801aa46:	4610      	mov	r0, r2
 801aa48:	4798      	blx	r3
 801aa4a:	4603      	mov	r3, r0
 801aa4c:	f083 0301 	eor.w	r3, r3, #1
 801aa50:	b2db      	uxtb	r3, r3
 801aa52:	2b00      	cmp	r3, #0
 801aa54:	d001      	beq.n	801aa5a <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x36>
            return true;
 801aa56:	2301      	movs	r3, #1
 801aa58:	e004      	b.n	801aa64 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801aa5a:	68fb      	ldr	r3, [r7, #12]
 801aa5c:	685b      	ldr	r3, [r3, #4]
 801aa5e:	60fb      	str	r3, [r7, #12]
 801aa60:	e7e7      	b.n	801aa32 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0xe>
    return false;
 801aa62:	2300      	movs	r3, #0
}
 801aa64:	4618      	mov	r0, r3
 801aa66:	3710      	adds	r7, #16
 801aa68:	46bd      	mov	sp, r7
 801aa6a:	bd80      	pop	{r7, pc}

0801aa6c <_ZN19MockFailureReporter14crashOnFailureEb>:
    virtual void crashOnFailure(bool shouldCrash) { crashOnFailure_ = shouldCrash; }
 801aa6c:	b480      	push	{r7}
 801aa6e:	b083      	sub	sp, #12
 801aa70:	af00      	add	r7, sp, #0
 801aa72:	6078      	str	r0, [r7, #4]
 801aa74:	460b      	mov	r3, r1
 801aa76:	70fb      	strb	r3, [r7, #3]
 801aa78:	687b      	ldr	r3, [r7, #4]
 801aa7a:	78fa      	ldrb	r2, [r7, #3]
 801aa7c:	711a      	strb	r2, [r3, #4]
 801aa7e:	bf00      	nop
 801aa80:	370c      	adds	r7, #12
 801aa82:	46bd      	mov	sp, r7
 801aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa88:	4770      	bx	lr
	...

0801aa8c <_ZN33MockFailureReporterTestTerminatorC1Eb>:
#include "CppUTestExt/MockNamedValue.h"

class MockFailureReporterTestTerminator : public TestTerminator
{
public:
    MockFailureReporterTestTerminator(bool crashOnFailure) : crashOnFailure_(crashOnFailure)
 801aa8c:	b580      	push	{r7, lr}
 801aa8e:	b082      	sub	sp, #8
 801aa90:	af00      	add	r7, sp, #0
 801aa92:	6078      	str	r0, [r7, #4]
 801aa94:	460b      	mov	r3, r1
 801aa96:	70fb      	strb	r3, [r7, #3]
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	4618      	mov	r0, r3
 801aa9c:	f7ed ff6a 	bl	8008974 <_ZN14TestTerminatorC1Ev>
 801aaa0:	4a05      	ldr	r2, [pc, #20]	; (801aab8 <_ZN33MockFailureReporterTestTerminatorC1Eb+0x2c>)
 801aaa2:	687b      	ldr	r3, [r7, #4]
 801aaa4:	601a      	str	r2, [r3, #0]
 801aaa6:	687b      	ldr	r3, [r7, #4]
 801aaa8:	78fa      	ldrb	r2, [r7, #3]
 801aaaa:	711a      	strb	r2, [r3, #4]
    {
    }
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	4618      	mov	r0, r3
 801aab0:	3708      	adds	r7, #8
 801aab2:	46bd      	mov	sp, r7
 801aab4:	bd80      	pop	{r7, pc}
 801aab6:	bf00      	nop
 801aab8:	080267fc 	.word	0x080267fc

0801aabc <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv>:

    virtual void exitCurrentTest() const _override
 801aabc:	b580      	push	{r7, lr}
 801aabe:	b082      	sub	sp, #8
 801aac0:	af00      	add	r7, sp, #0
 801aac2:	6078      	str	r0, [r7, #4]
    {
        if (crashOnFailure_)
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	791b      	ldrb	r3, [r3, #4]
 801aac8:	2b00      	cmp	r3, #0
 801aaca:	d001      	beq.n	801aad0 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv+0x14>
            UT_CRASH();
 801aacc:	f7f6 f9fe 	bl	8010ecc <_ZN10UtestShell5crashEv>

        UtestShell::getCurrentTestTerminator().exitCurrentTest();
 801aad0:	f7f7 fd40 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801aad4:	4603      	mov	r3, r0
 801aad6:	681a      	ldr	r2, [r3, #0]
 801aad8:	6812      	ldr	r2, [r2, #0]
 801aada:	4618      	mov	r0, r3
 801aadc:	4790      	blx	r2
    } // LCOV_EXCL_LINE
 801aade:	bf00      	nop
 801aae0:	3708      	adds	r7, #8
 801aae2:	46bd      	mov	sp, r7
 801aae4:	bd80      	pop	{r7, pc}
	...

0801aae8 <_ZN33MockFailureReporterTestTerminatorD1Ev>:

    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801aae8:	b580      	push	{r7, lr}
 801aaea:	b082      	sub	sp, #8
 801aaec:	af00      	add	r7, sp, #0
 801aaee:	6078      	str	r0, [r7, #4]
    {
 801aaf0:	4a05      	ldr	r2, [pc, #20]	; (801ab08 <_ZN33MockFailureReporterTestTerminatorD1Ev+0x20>)
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	601a      	str	r2, [r3, #0]
 801aaf6:	687b      	ldr	r3, [r7, #4]
 801aaf8:	4618      	mov	r0, r3
 801aafa:	f7f7 fdbb 	bl	8012674 <_ZN14TestTerminatorD1Ev>
    }
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	4618      	mov	r0, r3
 801ab02:	3708      	adds	r7, #8
 801ab04:	46bd      	mov	sp, r7
 801ab06:	bd80      	pop	{r7, pc}
 801ab08:	080267fc 	.word	0x080267fc

0801ab0c <_ZN33MockFailureReporterTestTerminatorD0Ev>:
    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801ab0c:	b580      	push	{r7, lr}
 801ab0e:	b082      	sub	sp, #8
 801ab10:	af00      	add	r7, sp, #0
 801ab12:	6078      	str	r0, [r7, #4]
    }
 801ab14:	6878      	ldr	r0, [r7, #4]
 801ab16:	f7ff ffe7 	bl	801aae8 <_ZN33MockFailureReporterTestTerminatorD1Ev>
 801ab1a:	2108      	movs	r1, #8
 801ab1c:	6878      	ldr	r0, [r7, #4]
 801ab1e:	f7ed fd77 	bl	8008610 <_ZdlPvj>
 801ab22:	687b      	ldr	r3, [r7, #4]
 801ab24:	4618      	mov	r0, r3
 801ab26:	3708      	adds	r7, #8
 801ab28:	46bd      	mov	sp, r7
 801ab2a:	bd80      	pop	{r7, pc}

0801ab2c <_ZN19MockFailureReporter8failTestERK11MockFailure>:
    bool crashOnFailure_;

};

void MockFailureReporter::failTest(const MockFailure& failure)
{
 801ab2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ab2e:	b085      	sub	sp, #20
 801ab30:	af00      	add	r7, sp, #0
 801ab32:	6078      	str	r0, [r7, #4]
 801ab34:	6039      	str	r1, [r7, #0]
    if (!getTestToFail()->hasFailed())
 801ab36:	687b      	ldr	r3, [r7, #4]
 801ab38:	681b      	ldr	r3, [r3, #0]
 801ab3a:	330c      	adds	r3, #12
 801ab3c:	681b      	ldr	r3, [r3, #0]
 801ab3e:	6878      	ldr	r0, [r7, #4]
 801ab40:	4798      	blx	r3
 801ab42:	4603      	mov	r3, r0
 801ab44:	681a      	ldr	r2, [r3, #0]
 801ab46:	321c      	adds	r2, #28
 801ab48:	6812      	ldr	r2, [r2, #0]
 801ab4a:	4618      	mov	r0, r3
 801ab4c:	4790      	blx	r2
 801ab4e:	4603      	mov	r3, r0
 801ab50:	f083 0301 	eor.w	r3, r3, #1
 801ab54:	b2db      	uxtb	r3, r3
 801ab56:	2b00      	cmp	r3, #0
 801ab58:	d01d      	beq.n	801ab96 <_ZN19MockFailureReporter8failTestERK11MockFailure+0x6a>
        getTestToFail()->failWith(failure, MockFailureReporterTestTerminator(crashOnFailure_));
 801ab5a:	687b      	ldr	r3, [r7, #4]
 801ab5c:	681b      	ldr	r3, [r3, #0]
 801ab5e:	330c      	adds	r3, #12
 801ab60:	681b      	ldr	r3, [r3, #0]
 801ab62:	6878      	ldr	r0, [r7, #4]
 801ab64:	4798      	blx	r3
 801ab66:	4604      	mov	r4, r0
 801ab68:	6823      	ldr	r3, [r4, #0]
 801ab6a:	339c      	adds	r3, #156	; 0x9c
 801ab6c:	681d      	ldr	r5, [r3, #0]
 801ab6e:	683e      	ldr	r6, [r7, #0]
 801ab70:	687b      	ldr	r3, [r7, #4]
 801ab72:	791a      	ldrb	r2, [r3, #4]
 801ab74:	f107 0308 	add.w	r3, r7, #8
 801ab78:	4611      	mov	r1, r2
 801ab7a:	4618      	mov	r0, r3
 801ab7c:	f7ff ff86 	bl	801aa8c <_ZN33MockFailureReporterTestTerminatorC1Eb>
 801ab80:	f107 0308 	add.w	r3, r7, #8
 801ab84:	461a      	mov	r2, r3
 801ab86:	4631      	mov	r1, r6
 801ab88:	4620      	mov	r0, r4
 801ab8a:	47a8      	blx	r5
 801ab8c:	f107 0308 	add.w	r3, r7, #8
 801ab90:	4618      	mov	r0, r3
 801ab92:	f7ff ffa9 	bl	801aae8 <_ZN33MockFailureReporterTestTerminatorD1Ev>
} // LCOV_EXCL_LINE
 801ab96:	bf00      	nop
 801ab98:	3714      	adds	r7, #20
 801ab9a:	46bd      	mov	sp, r7
 801ab9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ab9e <_ZN19MockFailureReporter13getTestToFailEv>:

UtestShell* MockFailureReporter::getTestToFail()
{
 801ab9e:	b580      	push	{r7, lr}
 801aba0:	b082      	sub	sp, #8
 801aba2:	af00      	add	r7, sp, #0
 801aba4:	6078      	str	r0, [r7, #4]
    return UtestShell::getCurrent();
 801aba6:	f7f7 fcc5 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 801abaa:	4603      	mov	r3, r0
}
 801abac:	4618      	mov	r0, r3
 801abae:	3708      	adds	r7, #8
 801abb0:	46bd      	mov	sp, r7
 801abb2:	bd80      	pop	{r7, pc}

0801abb4 <_ZN11MockFailureC1EP10UtestShell>:

MockFailure::MockFailure(UtestShell* test) : TestFailure(test, "Test failed with MockFailure without an error! Something went seriously wrong.")
 801abb4:	b590      	push	{r4, r7, lr}
 801abb6:	b085      	sub	sp, #20
 801abb8:	af00      	add	r7, sp, #0
 801abba:	6078      	str	r0, [r7, #4]
 801abbc:	6039      	str	r1, [r7, #0]
 801abbe:	687c      	ldr	r4, [r7, #4]
 801abc0:	f107 0308 	add.w	r3, r7, #8
 801abc4:	490b      	ldr	r1, [pc, #44]	; (801abf4 <_ZN11MockFailureC1EP10UtestShell+0x40>)
 801abc6:	4618      	mov	r0, r3
 801abc8:	f7f0 f8d1 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801abcc:	f107 0308 	add.w	r3, r7, #8
 801abd0:	461a      	mov	r2, r3
 801abd2:	6839      	ldr	r1, [r7, #0]
 801abd4:	4620      	mov	r0, r4
 801abd6:	f7f1 ff29 	bl	800ca2c <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 801abda:	f107 0308 	add.w	r3, r7, #8
 801abde:	4618      	mov	r0, r3
 801abe0:	f7f0 fc7d 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801abe4:	4a04      	ldr	r2, [pc, #16]	; (801abf8 <_ZN11MockFailureC1EP10UtestShell+0x44>)
 801abe6:	687b      	ldr	r3, [r7, #4]
 801abe8:	601a      	str	r2, [r3, #0]
{
}
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	4618      	mov	r0, r3
 801abee:	3714      	adds	r7, #20
 801abf0:	46bd      	mov	sp, r7
 801abf2:	bd90      	pop	{r4, r7, pc}
 801abf4:	08023f60 	.word	0x08023f60
 801abf8:	08025788 	.word	0x08025788

0801abfc <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistory(const MockExpectedCallsList& expectations)
{
 801abfc:	b5b0      	push	{r4, r5, r7, lr}
 801abfe:	b08a      	sub	sp, #40	; 0x28
 801ac00:	af00      	add	r7, sp, #0
 801ac02:	6078      	str	r0, [r7, #4]
 801ac04:	6039      	str	r1, [r7, #0]
    message_ += "\tEXPECTED calls that WERE NOT fulfilled:\n";
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	332c      	adds	r3, #44	; 0x2c
 801ac0a:	492b      	ldr	r1, [pc, #172]	; (801acb8 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xbc>)
 801ac0c:	4618      	mov	r0, r3
 801ac0e:	f7f0 fcf5 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    message_ += expectations.unfulfilledCallsToString("\t\t");
 801ac12:	687b      	ldr	r3, [r7, #4]
 801ac14:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801ac18:	683b      	ldr	r3, [r7, #0]
 801ac1a:	681b      	ldr	r3, [r3, #0]
 801ac1c:	337c      	adds	r3, #124	; 0x7c
 801ac1e:	681c      	ldr	r4, [r3, #0]
 801ac20:	f107 0310 	add.w	r3, r7, #16
 801ac24:	4925      	ldr	r1, [pc, #148]	; (801acbc <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801ac26:	4618      	mov	r0, r3
 801ac28:	f7f0 f8a1 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801ac2c:	f107 0308 	add.w	r3, r7, #8
 801ac30:	f107 0210 	add.w	r2, r7, #16
 801ac34:	6839      	ldr	r1, [r7, #0]
 801ac36:	4618      	mov	r0, r3
 801ac38:	47a0      	blx	r4
 801ac3a:	f107 0308 	add.w	r3, r7, #8
 801ac3e:	4619      	mov	r1, r3
 801ac40:	4628      	mov	r0, r5
 801ac42:	f7f0 fcc9 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 801ac46:	f107 0308 	add.w	r3, r7, #8
 801ac4a:	4618      	mov	r0, r3
 801ac4c:	f7f0 fc47 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801ac50:	f107 0310 	add.w	r3, r7, #16
 801ac54:	4618      	mov	r0, r3
 801ac56:	f7f0 fc42 	bl	800b4de <_ZN12SimpleStringD1Ev>
    message_ += "\n\tEXPECTED calls that WERE fulfilled:\n";
 801ac5a:	687b      	ldr	r3, [r7, #4]
 801ac5c:	332c      	adds	r3, #44	; 0x2c
 801ac5e:	4918      	ldr	r1, [pc, #96]	; (801acc0 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc4>)
 801ac60:	4618      	mov	r0, r3
 801ac62:	f7f0 fccb 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    message_ += expectations.fulfilledCallsToString("\t\t");
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801ac6c:	683b      	ldr	r3, [r7, #0]
 801ac6e:	681b      	ldr	r3, [r3, #0]
 801ac70:	3380      	adds	r3, #128	; 0x80
 801ac72:	681c      	ldr	r4, [r3, #0]
 801ac74:	f107 0320 	add.w	r3, r7, #32
 801ac78:	4910      	ldr	r1, [pc, #64]	; (801acbc <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801ac7a:	4618      	mov	r0, r3
 801ac7c:	f7f0 f877 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801ac80:	f107 0318 	add.w	r3, r7, #24
 801ac84:	f107 0220 	add.w	r2, r7, #32
 801ac88:	6839      	ldr	r1, [r7, #0]
 801ac8a:	4618      	mov	r0, r3
 801ac8c:	47a0      	blx	r4
 801ac8e:	f107 0318 	add.w	r3, r7, #24
 801ac92:	4619      	mov	r1, r3
 801ac94:	4628      	mov	r0, r5
 801ac96:	f7f0 fc9f 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 801ac9a:	f107 0318 	add.w	r3, r7, #24
 801ac9e:	4618      	mov	r0, r3
 801aca0:	f7f0 fc1d 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801aca4:	f107 0320 	add.w	r3, r7, #32
 801aca8:	4618      	mov	r0, r3
 801acaa:	f7f0 fc18 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 801acae:	bf00      	nop
 801acb0:	3728      	adds	r7, #40	; 0x28
 801acb2:	46bd      	mov	sp, r7
 801acb4:	bdb0      	pop	{r4, r5, r7, pc}
 801acb6:	bf00      	nop
 801acb8:	08023fb0 	.word	0x08023fb0
 801acbc:	08023fdc 	.word	0x08023fdc
 801acc0:	08023fe0 	.word	0x08023fe0

0801acc4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistoryRelatedTo(const SimpleString& name, const MockExpectedCallsList& expectations)
{
 801acc4:	b590      	push	{r4, r7, lr}
 801acc6:	b08f      	sub	sp, #60	; 0x3c
 801acc8:	af00      	add	r7, sp, #0
 801acca:	60f8      	str	r0, [r7, #12]
 801accc:	60b9      	str	r1, [r7, #8]
 801acce:	607a      	str	r2, [r7, #4]
    MockExpectedCallsList expectationsForFunction;
 801acd0:	f107 0310 	add.w	r3, r7, #16
 801acd4:	4618      	mov	r0, r3
 801acd6:	f7ff f877 	bl	8019dc8 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(name, expectations);
 801acda:	f107 0310 	add.w	r3, r7, #16
 801acde:	687a      	ldr	r2, [r7, #4]
 801ace0:	68b9      	ldr	r1, [r7, #8]
 801ace2:	4618      	mov	r0, r3
 801ace4:	f7ff fa16 	bl	801a114 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ += "\tEXPECTED calls that WERE NOT fulfilled related to function: ";
 801ace8:	68fb      	ldr	r3, [r7, #12]
 801acea:	332c      	adds	r3, #44	; 0x2c
 801acec:	4937      	ldr	r1, [pc, #220]	; (801adcc <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x108>)
 801acee:	4618      	mov	r0, r3
 801acf0:	f7f0 fc84 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801acf4:	68fb      	ldr	r3, [r7, #12]
 801acf6:	332c      	adds	r3, #44	; 0x2c
 801acf8:	68b9      	ldr	r1, [r7, #8]
 801acfa:	4618      	mov	r0, r3
 801acfc:	f7f0 fc6c 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801ad00:	68fb      	ldr	r3, [r7, #12]
 801ad02:	332c      	adds	r3, #44	; 0x2c
 801ad04:	4932      	ldr	r1, [pc, #200]	; (801add0 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801ad06:	4618      	mov	r0, r3
 801ad08:	f7f0 fc78 	bl	800b5fc <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.unfulfilledCallsToString("\t\t");
 801ad0c:	68fb      	ldr	r3, [r7, #12]
 801ad0e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ad12:	f107 0320 	add.w	r3, r7, #32
 801ad16:	492f      	ldr	r1, [pc, #188]	; (801add4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801ad18:	4618      	mov	r0, r3
 801ad1a:	f7f0 f828 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801ad1e:	f107 0318 	add.w	r3, r7, #24
 801ad22:	f107 0220 	add.w	r2, r7, #32
 801ad26:	f107 0110 	add.w	r1, r7, #16
 801ad2a:	4618      	mov	r0, r3
 801ad2c:	f7ff fd4a 	bl	801a7c4 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>
 801ad30:	f107 0318 	add.w	r3, r7, #24
 801ad34:	4619      	mov	r1, r3
 801ad36:	4620      	mov	r0, r4
 801ad38:	f7f0 fc4e 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 801ad3c:	f107 0318 	add.w	r3, r7, #24
 801ad40:	4618      	mov	r0, r3
 801ad42:	f7f0 fbcc 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801ad46:	f107 0320 	add.w	r3, r7, #32
 801ad4a:	4618      	mov	r0, r3
 801ad4c:	f7f0 fbc7 	bl	800b4de <_ZN12SimpleStringD1Ev>

    message_ += "\n\tEXPECTED calls that WERE fulfilled related to function: ";
 801ad50:	68fb      	ldr	r3, [r7, #12]
 801ad52:	332c      	adds	r3, #44	; 0x2c
 801ad54:	4920      	ldr	r1, [pc, #128]	; (801add8 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x114>)
 801ad56:	4618      	mov	r0, r3
 801ad58:	f7f0 fc50 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801ad5c:	68fb      	ldr	r3, [r7, #12]
 801ad5e:	332c      	adds	r3, #44	; 0x2c
 801ad60:	68b9      	ldr	r1, [r7, #8]
 801ad62:	4618      	mov	r0, r3
 801ad64:	f7f0 fc38 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801ad68:	68fb      	ldr	r3, [r7, #12]
 801ad6a:	332c      	adds	r3, #44	; 0x2c
 801ad6c:	4918      	ldr	r1, [pc, #96]	; (801add0 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801ad6e:	4618      	mov	r0, r3
 801ad70:	f7f0 fc44 	bl	800b5fc <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.fulfilledCallsToString("\t\t");
 801ad74:	68fb      	ldr	r3, [r7, #12]
 801ad76:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ad7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ad7e:	4915      	ldr	r1, [pc, #84]	; (801add4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801ad80:	4618      	mov	r0, r3
 801ad82:	f7ef fff4 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801ad86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ad8a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801ad8e:	f107 0110 	add.w	r1, r7, #16
 801ad92:	4618      	mov	r0, r3
 801ad94:	f7ff fd74 	bl	801a880 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>
 801ad98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ad9c:	4619      	mov	r1, r3
 801ad9e:	4620      	mov	r0, r4
 801ada0:	f7f0 fc1a 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 801ada4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ada8:	4618      	mov	r0, r3
 801adaa:	f7f0 fb98 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801adae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801adb2:	4618      	mov	r0, r3
 801adb4:	f7f0 fb93 	bl	800b4de <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801adb8:	f107 0310 	add.w	r3, r7, #16
 801adbc:	4618      	mov	r0, r3
 801adbe:	f7ff f817 	bl	8019df0 <_ZN21MockExpectedCallsListD1Ev>
}
 801adc2:	bf00      	nop
 801adc4:	373c      	adds	r7, #60	; 0x3c
 801adc6:	46bd      	mov	sp, r7
 801adc8:	bd90      	pop	{r4, r7, pc}
 801adca:	bf00      	nop
 801adcc:	08024008 	.word	0x08024008
 801add0:	08024048 	.word	0x08024048
 801add4:	08023fdc 	.word	0x08023fdc
 801add8:	0802404c 	.word	0x0802404c

0801addc <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockExpectedCallsDidntHappenFailure::MockExpectedCallsDidntHappenFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801addc:	b590      	push	{r4, r7, lr}
 801adde:	b087      	sub	sp, #28
 801ade0:	af00      	add	r7, sp, #0
 801ade2:	60f8      	str	r0, [r7, #12]
 801ade4:	60b9      	str	r1, [r7, #8]
 801ade6:	607a      	str	r2, [r7, #4]
 801ade8:	68fb      	ldr	r3, [r7, #12]
 801adea:	68b9      	ldr	r1, [r7, #8]
 801adec:	4618      	mov	r0, r3
 801adee:	f7ff fee1 	bl	801abb4 <_ZN11MockFailureC1EP10UtestShell>
 801adf2:	4a10      	ldr	r2, [pc, #64]	; (801ae34 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x58>)
 801adf4:	68fb      	ldr	r3, [r7, #12]
 801adf6:	601a      	str	r2, [r3, #0]
{
    message_ = "Mock Failure: Expected call WAS NOT fulfilled.\n";
 801adf8:	68fb      	ldr	r3, [r7, #12]
 801adfa:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801adfe:	f107 0310 	add.w	r3, r7, #16
 801ae02:	490d      	ldr	r1, [pc, #52]	; (801ae38 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x5c>)
 801ae04:	4618      	mov	r0, r3
 801ae06:	f7ef ffb2 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801ae0a:	f107 0310 	add.w	r3, r7, #16
 801ae0e:	4619      	mov	r1, r3
 801ae10:	4620      	mov	r0, r4
 801ae12:	f7f0 f818 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 801ae16:	f107 0310 	add.w	r3, r7, #16
 801ae1a:	4618      	mov	r0, r3
 801ae1c:	f7f0 fb5f 	bl	800b4de <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistory(expectations);
 801ae20:	68fb      	ldr	r3, [r7, #12]
 801ae22:	6879      	ldr	r1, [r7, #4]
 801ae24:	4618      	mov	r0, r3
 801ae26:	f7ff fee9 	bl	801abfc <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801ae2a:	68fb      	ldr	r3, [r7, #12]
 801ae2c:	4618      	mov	r0, r3
 801ae2e:	371c      	adds	r7, #28
 801ae30:	46bd      	mov	sp, r7
 801ae32:	bd90      	pop	{r4, r7, pc}
 801ae34:	0802575c 	.word	0x0802575c
 801ae38:	08024088 	.word	0x08024088

0801ae3c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockUnexpectedCallHappenedFailure::MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations) : MockFailure(test)
 801ae3c:	b590      	push	{r4, r7, lr}
 801ae3e:	b08d      	sub	sp, #52	; 0x34
 801ae40:	af00      	add	r7, sp, #0
 801ae42:	60f8      	str	r0, [r7, #12]
 801ae44:	60b9      	str	r1, [r7, #8]
 801ae46:	607a      	str	r2, [r7, #4]
 801ae48:	603b      	str	r3, [r7, #0]
 801ae4a:	68fb      	ldr	r3, [r7, #12]
 801ae4c:	68b9      	ldr	r1, [r7, #8]
 801ae4e:	4618      	mov	r0, r3
 801ae50:	f7ff feb0 	bl	801abb4 <_ZN11MockFailureC1EP10UtestShell>
 801ae54:	4a2f      	ldr	r2, [pc, #188]	; (801af14 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xd8>)
 801ae56:	68fb      	ldr	r3, [r7, #12]
 801ae58:	601a      	str	r2, [r3, #0]
{
    unsigned int amountOfActualCalls = expectations.amountOfActualCallsFulfilledFor(name);
 801ae5a:	683b      	ldr	r3, [r7, #0]
 801ae5c:	681b      	ldr	r3, [r3, #0]
 801ae5e:	3310      	adds	r3, #16
 801ae60:	681b      	ldr	r3, [r3, #0]
 801ae62:	6879      	ldr	r1, [r7, #4]
 801ae64:	6838      	ldr	r0, [r7, #0]
 801ae66:	4798      	blx	r3
 801ae68:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (amountOfActualCalls > 0) {
 801ae6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae6c:	2b00      	cmp	r3, #0
 801ae6e:	d027      	beq.n	801aec0 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x84>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801ae70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae72:	1c5a      	adds	r2, r3, #1
 801ae74:	f107 0314 	add.w	r3, r7, #20
 801ae78:	4611      	mov	r1, r2
 801ae7a:	4618      	mov	r0, r3
 801ae7c:	f7f1 fa00 	bl	800c280 <_Z23StringFromOrdinalNumberj>
        message_ = StringFromFormat("Mock Failure: Unexpected additional (%s) call to function: ", ordinalNumber.asCharString());
 801ae80:	68fb      	ldr	r3, [r7, #12]
 801ae82:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ae86:	f107 0314 	add.w	r3, r7, #20
 801ae8a:	4618      	mov	r0, r3
 801ae8c:	f7f0 fafa 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 801ae90:	4602      	mov	r2, r0
 801ae92:	f107 031c 	add.w	r3, r7, #28
 801ae96:	4920      	ldr	r1, [pc, #128]	; (801af18 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801ae98:	4618      	mov	r0, r3
 801ae9a:	f7f1 f827 	bl	800beec <_Z16StringFromFormatPKcz>
 801ae9e:	f107 031c 	add.w	r3, r7, #28
 801aea2:	4619      	mov	r1, r3
 801aea4:	4620      	mov	r0, r4
 801aea6:	f7ef ffce 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 801aeaa:	f107 031c 	add.w	r3, r7, #28
 801aeae:	4618      	mov	r0, r3
 801aeb0:	f7f0 fb15 	bl	800b4de <_ZN12SimpleStringD1Ev>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801aeb4:	f107 0314 	add.w	r3, r7, #20
 801aeb8:	4618      	mov	r0, r3
 801aeba:	f7f0 fb10 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801aebe:	e013      	b.n	801aee8 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xac>
    } else {
        message_ = "Mock Failure: Unexpected call to function: ";
 801aec0:	68fb      	ldr	r3, [r7, #12]
 801aec2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801aec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801aeca:	4914      	ldr	r1, [pc, #80]	; (801af1c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801aecc:	4618      	mov	r0, r3
 801aece:	f7ef ff4e 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801aed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801aed6:	4619      	mov	r1, r3
 801aed8:	4620      	mov	r0, r4
 801aeda:	f7ef ffb4 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 801aede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801aee2:	4618      	mov	r0, r3
 801aee4:	f7f0 fafb 	bl	800b4de <_ZN12SimpleStringD1Ev>
    }
    message_ += name;
 801aee8:	68fb      	ldr	r3, [r7, #12]
 801aeea:	332c      	adds	r3, #44	; 0x2c
 801aeec:	6879      	ldr	r1, [r7, #4]
 801aeee:	4618      	mov	r0, r3
 801aef0:	f7f0 fb72 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801aef4:	68fb      	ldr	r3, [r7, #12]
 801aef6:	332c      	adds	r3, #44	; 0x2c
 801aef8:	4909      	ldr	r1, [pc, #36]	; (801af20 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801aefa:	4618      	mov	r0, r3
 801aefc:	f7f0 fb7e 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectations);
 801af00:	68fb      	ldr	r3, [r7, #12]
 801af02:	6839      	ldr	r1, [r7, #0]
 801af04:	4618      	mov	r0, r3
 801af06:	f7ff fe79 	bl	801abfc <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801af0a:	68fb      	ldr	r3, [r7, #12]
 801af0c:	4618      	mov	r0, r3
 801af0e:	3734      	adds	r7, #52	; 0x34
 801af10:	46bd      	mov	sp, r7
 801af12:	bd90      	pop	{r4, r7, pc}
 801af14:	080260fc 	.word	0x080260fc
 801af18:	080240b8 	.word	0x080240b8
 801af1c:	080240f4 	.word	0x080240f4
 801af20:	08024048 	.word	0x08024048

0801af24 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockCallOrderFailure::MockCallOrderFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801af24:	b590      	push	{r4, r7, lr}
 801af26:	b089      	sub	sp, #36	; 0x24
 801af28:	af00      	add	r7, sp, #0
 801af2a:	60f8      	str	r0, [r7, #12]
 801af2c:	60b9      	str	r1, [r7, #8]
 801af2e:	607a      	str	r2, [r7, #4]
 801af30:	68fb      	ldr	r3, [r7, #12]
 801af32:	68b9      	ldr	r1, [r7, #8]
 801af34:	4618      	mov	r0, r3
 801af36:	f7ff fe3d 	bl	801abb4 <_ZN11MockFailureC1EP10UtestShell>
 801af3a:	4a1f      	ldr	r2, [pc, #124]	; (801afb8 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x94>)
 801af3c:	68fb      	ldr	r3, [r7, #12]
 801af3e:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForOutOfOrder;
 801af40:	f107 0310 	add.w	r3, r7, #16
 801af44:	4618      	mov	r0, r3
 801af46:	f7fe ff3f 	bl	8019dc8 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForOutOfOrder.addExpectations(expectations);
 801af4a:	f107 0310 	add.w	r3, r7, #16
 801af4e:	6879      	ldr	r1, [r7, #4]
 801af50:	4618      	mov	r0, r3
 801af52:	f7ff f909 	bl	801a168 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    expectationsForOutOfOrder.onlyKeepOutOfOrderExpectations();
 801af56:	f107 0310 	add.w	r3, r7, #16
 801af5a:	4618      	mov	r0, r3
 801af5c:	f7ff f94c 	bl	801a1f8 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>

    message_ = "Mock Failure: Out of order calls";
 801af60:	68fb      	ldr	r3, [r7, #12]
 801af62:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801af66:	f107 0318 	add.w	r3, r7, #24
 801af6a:	4914      	ldr	r1, [pc, #80]	; (801afbc <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x98>)
 801af6c:	4618      	mov	r0, r3
 801af6e:	f7ef fefe 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801af72:	f107 0318 	add.w	r3, r7, #24
 801af76:	4619      	mov	r1, r3
 801af78:	4620      	mov	r0, r4
 801af7a:	f7ef ff64 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 801af7e:	f107 0318 	add.w	r3, r7, #24
 801af82:	4618      	mov	r0, r3
 801af84:	f7f0 faab 	bl	800b4de <_ZN12SimpleStringD1Ev>
    message_ += "\n";
 801af88:	68fb      	ldr	r3, [r7, #12]
 801af8a:	332c      	adds	r3, #44	; 0x2c
 801af8c:	490c      	ldr	r1, [pc, #48]	; (801afc0 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x9c>)
 801af8e:	4618      	mov	r0, r3
 801af90:	f7f0 fb34 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectationsForOutOfOrder);
 801af94:	68fb      	ldr	r3, [r7, #12]
 801af96:	f107 0210 	add.w	r2, r7, #16
 801af9a:	4611      	mov	r1, r2
 801af9c:	4618      	mov	r0, r3
 801af9e:	f7ff fe2d 	bl	801abfc <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
    MockExpectedCallsList expectationsForOutOfOrder;
 801afa2:	f107 0310 	add.w	r3, r7, #16
 801afa6:	4618      	mov	r0, r3
 801afa8:	f7fe ff22 	bl	8019df0 <_ZN21MockExpectedCallsListD1Ev>
}
 801afac:	68fb      	ldr	r3, [r7, #12]
 801afae:	4618      	mov	r0, r3
 801afb0:	3724      	adds	r7, #36	; 0x24
 801afb2:	46bd      	mov	sp, r7
 801afb4:	bd90      	pop	{r4, r7, pc}
 801afb6:	bf00      	nop
 801afb8:	08025730 	.word	0x08025730
 801afbc:	08024120 	.word	0x08024120
 801afc0:	08024048 	.word	0x08024048

0801afc4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedInputParameterFailure::MockUnexpectedInputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801afc4:	b590      	push	{r4, r7, lr}
 801afc6:	b099      	sub	sp, #100	; 0x64
 801afc8:	af00      	add	r7, sp, #0
 801afca:	60f8      	str	r0, [r7, #12]
 801afcc:	60b9      	str	r1, [r7, #8]
 801afce:	607a      	str	r2, [r7, #4]
 801afd0:	603b      	str	r3, [r7, #0]
 801afd2:	68fb      	ldr	r3, [r7, #12]
 801afd4:	68b9      	ldr	r1, [r7, #8]
 801afd6:	4618      	mov	r0, r3
 801afd8:	f7ff fdec 	bl	801abb4 <_ZN11MockFailureC1EP10UtestShell>
 801afdc:	4a9e      	ldr	r2, [pc, #632]	; (801b258 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x294>)
 801afde:	68fb      	ldr	r3, [r7, #12]
 801afe0:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801afe2:	f107 0310 	add.w	r3, r7, #16
 801afe6:	4618      	mov	r0, r3
 801afe8:	f7fe feee 	bl	8019dc8 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801afec:	f107 0310 	add.w	r3, r7, #16
 801aff0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801aff2:	6879      	ldr	r1, [r7, #4]
 801aff4:	4618      	mov	r0, r3
 801aff6:	f7ff f88d 	bl	801a114 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithInputParameterName(parameter.getName());
 801affa:	683b      	ldr	r3, [r7, #0]
 801affc:	681b      	ldr	r3, [r3, #0]
 801affe:	335c      	adds	r3, #92	; 0x5c
 801b000:	681b      	ldr	r3, [r3, #0]
 801b002:	f107 0218 	add.w	r2, r7, #24
 801b006:	6839      	ldr	r1, [r7, #0]
 801b008:	4610      	mov	r0, r2
 801b00a:	4798      	blx	r3
 801b00c:	f107 0218 	add.w	r2, r7, #24
 801b010:	f107 0310 	add.w	r3, r7, #16
 801b014:	4611      	mov	r1, r2
 801b016:	4618      	mov	r0, r3
 801b018:	f7ff f948 	bl	801a2ac <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>
 801b01c:	f107 0318 	add.w	r3, r7, #24
 801b020:	4618      	mov	r0, r3
 801b022:	f7f0 fa5c 	bl	800b4de <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801b026:	f107 0310 	add.w	r3, r7, #16
 801b02a:	4618      	mov	r0, r3
 801b02c:	f7fe ff4d 	bl	8019eca <_ZNK21MockExpectedCallsList7isEmptyEv>
 801b030:	4603      	mov	r3, r0
 801b032:	2b00      	cmp	r3, #0
 801b034:	d037      	beq.n	801b0a6 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected parameter name to function \"";
 801b036:	68fb      	ldr	r3, [r7, #12]
 801b038:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b03c:	f107 0320 	add.w	r3, r7, #32
 801b040:	4986      	ldr	r1, [pc, #536]	; (801b25c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x298>)
 801b042:	4618      	mov	r0, r3
 801b044:	f7ef fe93 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801b048:	f107 0320 	add.w	r3, r7, #32
 801b04c:	4619      	mov	r1, r3
 801b04e:	4620      	mov	r0, r4
 801b050:	f7ef fef9 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 801b054:	f107 0320 	add.w	r3, r7, #32
 801b058:	4618      	mov	r0, r3
 801b05a:	f7f0 fa40 	bl	800b4de <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801b05e:	68fb      	ldr	r3, [r7, #12]
 801b060:	332c      	adds	r3, #44	; 0x2c
 801b062:	6879      	ldr	r1, [r7, #4]
 801b064:	4618      	mov	r0, r3
 801b066:	f7f0 fab7 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801b06a:	68fb      	ldr	r3, [r7, #12]
 801b06c:	332c      	adds	r3, #44	; 0x2c
 801b06e:	497c      	ldr	r1, [pc, #496]	; (801b260 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x29c>)
 801b070:	4618      	mov	r0, r3
 801b072:	f7f0 fac3 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801b076:	68fb      	ldr	r3, [r7, #12]
 801b078:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b07c:	683b      	ldr	r3, [r7, #0]
 801b07e:	681b      	ldr	r3, [r3, #0]
 801b080:	335c      	adds	r3, #92	; 0x5c
 801b082:	681b      	ldr	r3, [r3, #0]
 801b084:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801b088:	6839      	ldr	r1, [r7, #0]
 801b08a:	4610      	mov	r0, r2
 801b08c:	4798      	blx	r3
 801b08e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b092:	4619      	mov	r1, r3
 801b094:	4620      	mov	r0, r4
 801b096:	f7f0 fa9f 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 801b09a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b09e:	4618      	mov	r0, r3
 801b0a0:	f7f0 fa1d 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801b0a4:	e056      	b.n	801b154 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x190>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter value to parameter \"";
 801b0a6:	68fb      	ldr	r3, [r7, #12]
 801b0a8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b0ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b0b0:	496c      	ldr	r1, [pc, #432]	; (801b264 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a0>)
 801b0b2:	4618      	mov	r0, r3
 801b0b4:	f7ef fe5b 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801b0b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b0bc:	4619      	mov	r1, r3
 801b0be:	4620      	mov	r0, r4
 801b0c0:	f7ef fec1 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 801b0c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b0c8:	4618      	mov	r0, r3
 801b0ca:	f7f0 fa08 	bl	800b4de <_ZN12SimpleStringD1Ev>
        message_ += parameter.getName();
 801b0ce:	68fb      	ldr	r3, [r7, #12]
 801b0d0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b0d4:	683b      	ldr	r3, [r7, #0]
 801b0d6:	681b      	ldr	r3, [r3, #0]
 801b0d8:	335c      	adds	r3, #92	; 0x5c
 801b0da:	681b      	ldr	r3, [r3, #0]
 801b0dc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801b0e0:	6839      	ldr	r1, [r7, #0]
 801b0e2:	4610      	mov	r0, r2
 801b0e4:	4798      	blx	r3
 801b0e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b0ea:	4619      	mov	r1, r3
 801b0ec:	4620      	mov	r0, r4
 801b0ee:	f7f0 fa73 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 801b0f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b0f6:	4618      	mov	r0, r3
 801b0f8:	f7f0 f9f1 	bl	800b4de <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801b0fc:	68fb      	ldr	r3, [r7, #12]
 801b0fe:	332c      	adds	r3, #44	; 0x2c
 801b100:	4959      	ldr	r1, [pc, #356]	; (801b268 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a4>)
 801b102:	4618      	mov	r0, r3
 801b104:	f7f0 fa7a 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801b108:	68fb      	ldr	r3, [r7, #12]
 801b10a:	332c      	adds	r3, #44	; 0x2c
 801b10c:	6879      	ldr	r1, [r7, #4]
 801b10e:	4618      	mov	r0, r3
 801b110:	f7f0 fa62 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
        message_ += "\": <";
 801b114:	68fb      	ldr	r3, [r7, #12]
 801b116:	332c      	adds	r3, #44	; 0x2c
 801b118:	4954      	ldr	r1, [pc, #336]	; (801b26c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a8>)
 801b11a:	4618      	mov	r0, r3
 801b11c:	f7f0 fa6e 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
        message_ += StringFrom(parameter);
 801b120:	68fb      	ldr	r3, [r7, #12]
 801b122:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b126:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b12a:	6839      	ldr	r1, [r7, #0]
 801b12c:	4618      	mov	r0, r3
 801b12e:	f7fd faa3 	bl	8018678 <_Z10StringFromRK14MockNamedValue>
 801b132:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b136:	4619      	mov	r1, r3
 801b138:	4620      	mov	r0, r4
 801b13a:	f7f0 fa4d 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 801b13e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b142:	4618      	mov	r0, r3
 801b144:	f7f0 f9cb 	bl	800b4de <_ZN12SimpleStringD1Ev>
        message_ += ">";
 801b148:	68fb      	ldr	r3, [r7, #12]
 801b14a:	332c      	adds	r3, #44	; 0x2c
 801b14c:	4948      	ldr	r1, [pc, #288]	; (801b270 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801b14e:	4618      	mov	r0, r3
 801b150:	f7f0 fa54 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801b154:	68fb      	ldr	r3, [r7, #12]
 801b156:	332c      	adds	r3, #44	; 0x2c
 801b158:	4946      	ldr	r1, [pc, #280]	; (801b274 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801b15a:	4618      	mov	r0, r3
 801b15c:	f7f0 fa4e 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801b160:	68fb      	ldr	r3, [r7, #12]
 801b162:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801b164:	6879      	ldr	r1, [r7, #4]
 801b166:	4618      	mov	r0, r3
 801b168:	f7ff fdac 	bl	801acc4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected parameter passed to function: ";
 801b16c:	68fb      	ldr	r3, [r7, #12]
 801b16e:	332c      	adds	r3, #44	; 0x2c
 801b170:	4941      	ldr	r1, [pc, #260]	; (801b278 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b4>)
 801b172:	4618      	mov	r0, r3
 801b174:	f7f0 fa42 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801b178:	68fb      	ldr	r3, [r7, #12]
 801b17a:	332c      	adds	r3, #44	; 0x2c
 801b17c:	6879      	ldr	r1, [r7, #4]
 801b17e:	4618      	mov	r0, r3
 801b180:	f7f0 fa2a 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801b184:	68fb      	ldr	r3, [r7, #12]
 801b186:	332c      	adds	r3, #44	; 0x2c
 801b188:	493a      	ldr	r1, [pc, #232]	; (801b274 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801b18a:	4618      	mov	r0, r3
 801b18c:	f7f0 fa36 	bl	800b5fc <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801b190:	68fb      	ldr	r3, [r7, #12]
 801b192:	332c      	adds	r3, #44	; 0x2c
 801b194:	4939      	ldr	r1, [pc, #228]	; (801b27c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b8>)
 801b196:	4618      	mov	r0, r3
 801b198:	f7f0 fa30 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801b19c:	68fb      	ldr	r3, [r7, #12]
 801b19e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b1a2:	683b      	ldr	r3, [r7, #0]
 801b1a4:	681b      	ldr	r3, [r3, #0]
 801b1a6:	3360      	adds	r3, #96	; 0x60
 801b1a8:	681b      	ldr	r3, [r3, #0]
 801b1aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801b1ae:	6839      	ldr	r1, [r7, #0]
 801b1b0:	4610      	mov	r0, r2
 801b1b2:	4798      	blx	r3
 801b1b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b1b8:	4619      	mov	r1, r3
 801b1ba:	4620      	mov	r0, r4
 801b1bc:	f7f0 fa0c 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 801b1c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b1c4:	4618      	mov	r0, r3
 801b1c6:	f7f0 f98a 	bl	800b4de <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801b1ca:	68fb      	ldr	r3, [r7, #12]
 801b1cc:	332c      	adds	r3, #44	; 0x2c
 801b1ce:	492c      	ldr	r1, [pc, #176]	; (801b280 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2bc>)
 801b1d0:	4618      	mov	r0, r3
 801b1d2:	f7f0 fa13 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801b1d6:	68fb      	ldr	r3, [r7, #12]
 801b1d8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b1dc:	683b      	ldr	r3, [r7, #0]
 801b1de:	681b      	ldr	r3, [r3, #0]
 801b1e0:	335c      	adds	r3, #92	; 0x5c
 801b1e2:	681b      	ldr	r3, [r3, #0]
 801b1e4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801b1e8:	6839      	ldr	r1, [r7, #0]
 801b1ea:	4610      	mov	r0, r2
 801b1ec:	4798      	blx	r3
 801b1ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b1f2:	4619      	mov	r1, r3
 801b1f4:	4620      	mov	r0, r4
 801b1f6:	f7f0 f9ef 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 801b1fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b1fe:	4618      	mov	r0, r3
 801b200:	f7f0 f96d 	bl	800b4de <_ZN12SimpleStringD1Ev>
    message_ += ": <";
 801b204:	68fb      	ldr	r3, [r7, #12]
 801b206:	332c      	adds	r3, #44	; 0x2c
 801b208:	491e      	ldr	r1, [pc, #120]	; (801b284 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2c0>)
 801b20a:	4618      	mov	r0, r3
 801b20c:	f7f0 f9f6 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(parameter);
 801b210:	68fb      	ldr	r3, [r7, #12]
 801b212:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b216:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b21a:	6839      	ldr	r1, [r7, #0]
 801b21c:	4618      	mov	r0, r3
 801b21e:	f7fd fa2b 	bl	8018678 <_Z10StringFromRK14MockNamedValue>
 801b222:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b226:	4619      	mov	r1, r3
 801b228:	4620      	mov	r0, r4
 801b22a:	f7f0 f9d5 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 801b22e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b232:	4618      	mov	r0, r3
 801b234:	f7f0 f953 	bl	800b4de <_ZN12SimpleStringD1Ev>
    message_ += ">";
 801b238:	68fb      	ldr	r3, [r7, #12]
 801b23a:	332c      	adds	r3, #44	; 0x2c
 801b23c:	490c      	ldr	r1, [pc, #48]	; (801b270 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801b23e:	4618      	mov	r0, r3
 801b240:	f7f0 f9dc 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801b244:	f107 0310 	add.w	r3, r7, #16
 801b248:	4618      	mov	r0, r3
 801b24a:	f7fe fdd1 	bl	8019df0 <_ZN21MockExpectedCallsListD1Ev>
}
 801b24e:	68fb      	ldr	r3, [r7, #12]
 801b250:	4618      	mov	r0, r3
 801b252:	3764      	adds	r7, #100	; 0x64
 801b254:	46bd      	mov	sp, r7
 801b256:	bd90      	pop	{r4, r7, pc}
 801b258:	080260d0 	.word	0x080260d0
 801b25c:	08024144 	.word	0x08024144
 801b260:	0802417c 	.word	0x0802417c
 801b264:	08024180 	.word	0x08024180
 801b268:	080241b8 	.word	0x080241b8
 801b26c:	080241c8 	.word	0x080241c8
 801b270:	080241d0 	.word	0x080241d0
 801b274:	08024048 	.word	0x08024048
 801b278:	080241d4 	.word	0x080241d4
 801b27c:	08023fdc 	.word	0x08023fdc
 801b280:	08024208 	.word	0x08024208
 801b284:	0802420c 	.word	0x0802420c

0801b288 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedOutputParameterFailure::MockUnexpectedOutputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801b288:	b590      	push	{r4, r7, lr}
 801b28a:	b097      	sub	sp, #92	; 0x5c
 801b28c:	af00      	add	r7, sp, #0
 801b28e:	60f8      	str	r0, [r7, #12]
 801b290:	60b9      	str	r1, [r7, #8]
 801b292:	607a      	str	r2, [r7, #4]
 801b294:	603b      	str	r3, [r7, #0]
 801b296:	68fb      	ldr	r3, [r7, #12]
 801b298:	68b9      	ldr	r1, [r7, #8]
 801b29a:	4618      	mov	r0, r3
 801b29c:	f7ff fc8a 	bl	801abb4 <_ZN11MockFailureC1EP10UtestShell>
 801b2a0:	4a90      	ldr	r2, [pc, #576]	; (801b4e4 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x25c>)
 801b2a2:	68fb      	ldr	r3, [r7, #12]
 801b2a4:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801b2a6:	f107 0310 	add.w	r3, r7, #16
 801b2aa:	4618      	mov	r0, r3
 801b2ac:	f7fe fd8c 	bl	8019dc8 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801b2b0:	f107 0310 	add.w	r3, r7, #16
 801b2b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801b2b6:	6879      	ldr	r1, [r7, #4]
 801b2b8:	4618      	mov	r0, r3
 801b2ba:	f7fe ff2b 	bl	801a114 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithOutputParameterName(parameter.getName());
 801b2be:	683b      	ldr	r3, [r7, #0]
 801b2c0:	681b      	ldr	r3, [r3, #0]
 801b2c2:	335c      	adds	r3, #92	; 0x5c
 801b2c4:	681b      	ldr	r3, [r3, #0]
 801b2c6:	f107 0218 	add.w	r2, r7, #24
 801b2ca:	6839      	ldr	r1, [r7, #0]
 801b2cc:	4610      	mov	r0, r2
 801b2ce:	4798      	blx	r3
 801b2d0:	f107 0218 	add.w	r2, r7, #24
 801b2d4:	f107 0310 	add.w	r3, r7, #16
 801b2d8:	4611      	mov	r1, r2
 801b2da:	4618      	mov	r0, r3
 801b2dc:	f7ff f812 	bl	801a304 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>
 801b2e0:	f107 0318 	add.w	r3, r7, #24
 801b2e4:	4618      	mov	r0, r3
 801b2e6:	f7f0 f8fa 	bl	800b4de <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801b2ea:	f107 0310 	add.w	r3, r7, #16
 801b2ee:	4618      	mov	r0, r3
 801b2f0:	f7fe fdeb 	bl	8019eca <_ZNK21MockExpectedCallsList7isEmptyEv>
 801b2f4:	4603      	mov	r3, r0
 801b2f6:	2b00      	cmp	r3, #0
 801b2f8:	d037      	beq.n	801b36a <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected output parameter name to function \"";
 801b2fa:	68fb      	ldr	r3, [r7, #12]
 801b2fc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b300:	f107 0320 	add.w	r3, r7, #32
 801b304:	4978      	ldr	r1, [pc, #480]	; (801b4e8 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x260>)
 801b306:	4618      	mov	r0, r3
 801b308:	f7ef fd31 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801b30c:	f107 0320 	add.w	r3, r7, #32
 801b310:	4619      	mov	r1, r3
 801b312:	4620      	mov	r0, r4
 801b314:	f7ef fd97 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 801b318:	f107 0320 	add.w	r3, r7, #32
 801b31c:	4618      	mov	r0, r3
 801b31e:	f7f0 f8de 	bl	800b4de <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801b322:	68fb      	ldr	r3, [r7, #12]
 801b324:	332c      	adds	r3, #44	; 0x2c
 801b326:	6879      	ldr	r1, [r7, #4]
 801b328:	4618      	mov	r0, r3
 801b32a:	f7f0 f955 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801b32e:	68fb      	ldr	r3, [r7, #12]
 801b330:	332c      	adds	r3, #44	; 0x2c
 801b332:	496e      	ldr	r1, [pc, #440]	; (801b4ec <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x264>)
 801b334:	4618      	mov	r0, r3
 801b336:	f7f0 f961 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801b33a:	68fb      	ldr	r3, [r7, #12]
 801b33c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b340:	683b      	ldr	r3, [r7, #0]
 801b342:	681b      	ldr	r3, [r3, #0]
 801b344:	335c      	adds	r3, #92	; 0x5c
 801b346:	681b      	ldr	r3, [r3, #0]
 801b348:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801b34c:	6839      	ldr	r1, [r7, #0]
 801b34e:	4610      	mov	r0, r2
 801b350:	4798      	blx	r3
 801b352:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b356:	4619      	mov	r1, r3
 801b358:	4620      	mov	r0, r4
 801b35a:	f7f0 f93d 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 801b35e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b362:	4618      	mov	r0, r3
 801b364:	f7f0 f8bb 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801b368:	e059      	b.n	801b41e <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x196>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter type \"";
 801b36a:	68fb      	ldr	r3, [r7, #12]
 801b36c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b370:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b374:	495e      	ldr	r1, [pc, #376]	; (801b4f0 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x268>)
 801b376:	4618      	mov	r0, r3
 801b378:	f7ef fcf9 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801b37c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b380:	4619      	mov	r1, r3
 801b382:	4620      	mov	r0, r4
 801b384:	f7ef fd5f 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 801b388:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b38c:	4618      	mov	r0, r3
 801b38e:	f7f0 f8a6 	bl	800b4de <_ZN12SimpleStringD1Ev>
        message_ += parameter.getType();
 801b392:	68fb      	ldr	r3, [r7, #12]
 801b394:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b398:	683b      	ldr	r3, [r7, #0]
 801b39a:	681b      	ldr	r3, [r3, #0]
 801b39c:	3360      	adds	r3, #96	; 0x60
 801b39e:	681b      	ldr	r3, [r3, #0]
 801b3a0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801b3a4:	6839      	ldr	r1, [r7, #0]
 801b3a6:	4610      	mov	r0, r2
 801b3a8:	4798      	blx	r3
 801b3aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b3ae:	4619      	mov	r1, r3
 801b3b0:	4620      	mov	r0, r4
 801b3b2:	f7f0 f911 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 801b3b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b3ba:	4618      	mov	r0, r3
 801b3bc:	f7f0 f88f 	bl	800b4de <_ZN12SimpleStringD1Ev>
        message_ += "\" to output parameter \"";
 801b3c0:	68fb      	ldr	r3, [r7, #12]
 801b3c2:	332c      	adds	r3, #44	; 0x2c
 801b3c4:	494b      	ldr	r1, [pc, #300]	; (801b4f4 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x26c>)
 801b3c6:	4618      	mov	r0, r3
 801b3c8:	f7f0 f918 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801b3cc:	68fb      	ldr	r3, [r7, #12]
 801b3ce:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b3d2:	683b      	ldr	r3, [r7, #0]
 801b3d4:	681b      	ldr	r3, [r3, #0]
 801b3d6:	335c      	adds	r3, #92	; 0x5c
 801b3d8:	681b      	ldr	r3, [r3, #0]
 801b3da:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801b3de:	6839      	ldr	r1, [r7, #0]
 801b3e0:	4610      	mov	r0, r2
 801b3e2:	4798      	blx	r3
 801b3e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b3e8:	4619      	mov	r1, r3
 801b3ea:	4620      	mov	r0, r4
 801b3ec:	f7f0 f8f4 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 801b3f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b3f4:	4618      	mov	r0, r3
 801b3f6:	f7f0 f872 	bl	800b4de <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801b3fa:	68fb      	ldr	r3, [r7, #12]
 801b3fc:	332c      	adds	r3, #44	; 0x2c
 801b3fe:	493e      	ldr	r1, [pc, #248]	; (801b4f8 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x270>)
 801b400:	4618      	mov	r0, r3
 801b402:	f7f0 f8fb 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801b406:	68fb      	ldr	r3, [r7, #12]
 801b408:	332c      	adds	r3, #44	; 0x2c
 801b40a:	6879      	ldr	r1, [r7, #4]
 801b40c:	4618      	mov	r0, r3
 801b40e:	f7f0 f8e3 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
        message_ += "\"";
 801b412:	68fb      	ldr	r3, [r7, #12]
 801b414:	332c      	adds	r3, #44	; 0x2c
 801b416:	4939      	ldr	r1, [pc, #228]	; (801b4fc <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x274>)
 801b418:	4618      	mov	r0, r3
 801b41a:	f7f0 f8ef 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801b41e:	68fb      	ldr	r3, [r7, #12]
 801b420:	332c      	adds	r3, #44	; 0x2c
 801b422:	4937      	ldr	r1, [pc, #220]	; (801b500 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801b424:	4618      	mov	r0, r3
 801b426:	f7f0 f8e9 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801b42a:	68fb      	ldr	r3, [r7, #12]
 801b42c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801b42e:	6879      	ldr	r1, [r7, #4]
 801b430:	4618      	mov	r0, r3
 801b432:	f7ff fc47 	bl	801acc4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected output parameter passed to function: ";
 801b436:	68fb      	ldr	r3, [r7, #12]
 801b438:	332c      	adds	r3, #44	; 0x2c
 801b43a:	4932      	ldr	r1, [pc, #200]	; (801b504 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x27c>)
 801b43c:	4618      	mov	r0, r3
 801b43e:	f7f0 f8dd 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801b442:	68fb      	ldr	r3, [r7, #12]
 801b444:	332c      	adds	r3, #44	; 0x2c
 801b446:	6879      	ldr	r1, [r7, #4]
 801b448:	4618      	mov	r0, r3
 801b44a:	f7f0 f8c5 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801b44e:	68fb      	ldr	r3, [r7, #12]
 801b450:	332c      	adds	r3, #44	; 0x2c
 801b452:	492b      	ldr	r1, [pc, #172]	; (801b500 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801b454:	4618      	mov	r0, r3
 801b456:	f7f0 f8d1 	bl	800b5fc <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801b45a:	68fb      	ldr	r3, [r7, #12]
 801b45c:	332c      	adds	r3, #44	; 0x2c
 801b45e:	492a      	ldr	r1, [pc, #168]	; (801b508 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x280>)
 801b460:	4618      	mov	r0, r3
 801b462:	f7f0 f8cb 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801b466:	68fb      	ldr	r3, [r7, #12]
 801b468:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b46c:	683b      	ldr	r3, [r7, #0]
 801b46e:	681b      	ldr	r3, [r3, #0]
 801b470:	3360      	adds	r3, #96	; 0x60
 801b472:	681b      	ldr	r3, [r3, #0]
 801b474:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801b478:	6839      	ldr	r1, [r7, #0]
 801b47a:	4610      	mov	r0, r2
 801b47c:	4798      	blx	r3
 801b47e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b482:	4619      	mov	r1, r3
 801b484:	4620      	mov	r0, r4
 801b486:	f7f0 f8a7 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 801b48a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b48e:	4618      	mov	r0, r3
 801b490:	f7f0 f825 	bl	800b4de <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801b494:	68fb      	ldr	r3, [r7, #12]
 801b496:	332c      	adds	r3, #44	; 0x2c
 801b498:	491c      	ldr	r1, [pc, #112]	; (801b50c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x284>)
 801b49a:	4618      	mov	r0, r3
 801b49c:	f7f0 f8ae 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801b4a0:	68fb      	ldr	r3, [r7, #12]
 801b4a2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b4a6:	683b      	ldr	r3, [r7, #0]
 801b4a8:	681b      	ldr	r3, [r3, #0]
 801b4aa:	335c      	adds	r3, #92	; 0x5c
 801b4ac:	681b      	ldr	r3, [r3, #0]
 801b4ae:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801b4b2:	6839      	ldr	r1, [r7, #0]
 801b4b4:	4610      	mov	r0, r2
 801b4b6:	4798      	blx	r3
 801b4b8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b4bc:	4619      	mov	r1, r3
 801b4be:	4620      	mov	r0, r4
 801b4c0:	f7f0 f88a 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 801b4c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b4c8:	4618      	mov	r0, r3
 801b4ca:	f7f0 f808 	bl	800b4de <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801b4ce:	f107 0310 	add.w	r3, r7, #16
 801b4d2:	4618      	mov	r0, r3
 801b4d4:	f7fe fc8c 	bl	8019df0 <_ZN21MockExpectedCallsListD1Ev>
}
 801b4d8:	68fb      	ldr	r3, [r7, #12]
 801b4da:	4618      	mov	r0, r3
 801b4dc:	375c      	adds	r7, #92	; 0x5c
 801b4de:	46bd      	mov	sp, r7
 801b4e0:	bd90      	pop	{r4, r7, pc}
 801b4e2:	bf00      	nop
 801b4e4:	080260a4 	.word	0x080260a4
 801b4e8:	08024210 	.word	0x08024210
 801b4ec:	0802417c 	.word	0x0802417c
 801b4f0:	08024250 	.word	0x08024250
 801b4f4:	0802427c 	.word	0x0802427c
 801b4f8:	080241b8 	.word	0x080241b8
 801b4fc:	08024294 	.word	0x08024294
 801b500:	08024048 	.word	0x08024048
 801b504:	08024298 	.word	0x08024298
 801b508:	08023fdc 	.word	0x08023fdc
 801b50c:	08024208 	.word	0x08024208

0801b510 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedParameterDidntHappenFailure::MockExpectedParameterDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801b510:	b590      	push	{r4, r7, lr}
 801b512:	b08b      	sub	sp, #44	; 0x2c
 801b514:	af00      	add	r7, sp, #0
 801b516:	60f8      	str	r0, [r7, #12]
 801b518:	60b9      	str	r1, [r7, #8]
 801b51a:	607a      	str	r2, [r7, #4]
 801b51c:	603b      	str	r3, [r7, #0]
 801b51e:	68fb      	ldr	r3, [r7, #12]
 801b520:	68b9      	ldr	r1, [r7, #8]
 801b522:	4618      	mov	r0, r3
 801b524:	f7ff fb46 	bl	801abb4 <_ZN11MockFailureC1EP10UtestShell>
 801b528:	4a30      	ldr	r2, [pc, #192]	; (801b5ec <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801b52a:	68fb      	ldr	r3, [r7, #12]
 801b52c:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunction;
 801b52e:	f107 0310 	add.w	r3, r7, #16
 801b532:	4618      	mov	r0, r3
 801b534:	f7fe fc48 	bl	8019dc8 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(functionName, expectations);
 801b538:	f107 0310 	add.w	r3, r7, #16
 801b53c:	683a      	ldr	r2, [r7, #0]
 801b53e:	6879      	ldr	r1, [r7, #4]
 801b540:	4618      	mov	r0, r3
 801b542:	f7fe fde7 	bl	801a114 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ = "Mock Failure: Expected parameter for function \"";
 801b546:	68fb      	ldr	r3, [r7, #12]
 801b548:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b54c:	f107 0318 	add.w	r3, r7, #24
 801b550:	4927      	ldr	r1, [pc, #156]	; (801b5f0 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801b552:	4618      	mov	r0, r3
 801b554:	f7ef fc0b 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801b558:	f107 0318 	add.w	r3, r7, #24
 801b55c:	4619      	mov	r1, r3
 801b55e:	4620      	mov	r0, r4
 801b560:	f7ef fc71 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 801b564:	f107 0318 	add.w	r3, r7, #24
 801b568:	4618      	mov	r0, r3
 801b56a:	f7ef ffb8 	bl	800b4de <_ZN12SimpleStringD1Ev>
    message_ += functionName;
 801b56e:	68fb      	ldr	r3, [r7, #12]
 801b570:	332c      	adds	r3, #44	; 0x2c
 801b572:	6879      	ldr	r1, [r7, #4]
 801b574:	4618      	mov	r0, r3
 801b576:	f7f0 f82f 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
    message_ += "\" did not happen.\n";
 801b57a:	68fb      	ldr	r3, [r7, #12]
 801b57c:	332c      	adds	r3, #44	; 0x2c
 801b57e:	491d      	ldr	r1, [pc, #116]	; (801b5f4 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801b580:	4618      	mov	r0, r3
 801b582:	f7f0 f83b 	bl	800b5fc <_ZN12SimpleStringpLEPKc>

    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801b586:	68fb      	ldr	r3, [r7, #12]
 801b588:	683a      	ldr	r2, [r7, #0]
 801b58a:	6879      	ldr	r1, [r7, #4]
 801b58c:	4618      	mov	r0, r3
 801b58e:	f7ff fb99 	bl	801acc4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tMISSING parameters that didn't happen:\n";
 801b592:	68fb      	ldr	r3, [r7, #12]
 801b594:	332c      	adds	r3, #44	; 0x2c
 801b596:	4918      	ldr	r1, [pc, #96]	; (801b5f8 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe8>)
 801b598:	4618      	mov	r0, r3
 801b59a:	f7f0 f82f 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    message_ += "\t\t";
 801b59e:	68fb      	ldr	r3, [r7, #12]
 801b5a0:	332c      	adds	r3, #44	; 0x2c
 801b5a2:	4916      	ldr	r1, [pc, #88]	; (801b5fc <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xec>)
 801b5a4:	4618      	mov	r0, r3
 801b5a6:	f7f0 f829 	bl	800b5fc <_ZN12SimpleStringpLEPKc>
    message_ += expectationsForFunction.missingParametersToString();
 801b5aa:	68fb      	ldr	r3, [r7, #12]
 801b5ac:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b5b0:	f107 0320 	add.w	r3, r7, #32
 801b5b4:	f107 0210 	add.w	r2, r7, #16
 801b5b8:	4611      	mov	r1, r2
 801b5ba:	4618      	mov	r0, r3
 801b5bc:	f7ff f9bc 	bl	801a938 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>
 801b5c0:	f107 0320 	add.w	r3, r7, #32
 801b5c4:	4619      	mov	r1, r3
 801b5c6:	4620      	mov	r0, r4
 801b5c8:	f7f0 f806 	bl	800b5d8 <_ZN12SimpleStringpLERKS_>
 801b5cc:	f107 0320 	add.w	r3, r7, #32
 801b5d0:	4618      	mov	r0, r3
 801b5d2:	f7ef ff84 	bl	800b4de <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801b5d6:	f107 0310 	add.w	r3, r7, #16
 801b5da:	4618      	mov	r0, r3
 801b5dc:	f7fe fc08 	bl	8019df0 <_ZN21MockExpectedCallsListD1Ev>
}
 801b5e0:	68fb      	ldr	r3, [r7, #12]
 801b5e2:	4618      	mov	r0, r3
 801b5e4:	372c      	adds	r7, #44	; 0x2c
 801b5e6:	46bd      	mov	sp, r7
 801b5e8:	bd90      	pop	{r4, r7, pc}
 801b5ea:	bf00      	nop
 801b5ec:	08026078 	.word	0x08026078
 801b5f0:	080242d4 	.word	0x080242d4
 801b5f4:	08024304 	.word	0x08024304
 801b5f8:	08024318 	.word	0x08024318
 801b5fc:	08023fdc 	.word	0x08023fdc

0801b600 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCompareCustomTypeFailure::MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801b600:	b590      	push	{r4, r7, lr}
 801b602:	b087      	sub	sp, #28
 801b604:	af00      	add	r7, sp, #0
 801b606:	60f8      	str	r0, [r7, #12]
 801b608:	60b9      	str	r1, [r7, #8]
 801b60a:	607a      	str	r2, [r7, #4]
 801b60c:	68fb      	ldr	r3, [r7, #12]
 801b60e:	68b9      	ldr	r1, [r7, #8]
 801b610:	4618      	mov	r0, r3
 801b612:	f7ff facf 	bl	801abb4 <_ZN11MockFailureC1EP10UtestShell>
 801b616:	4a10      	ldr	r2, [pc, #64]	; (801b658 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801b618:	68fb      	ldr	r3, [r7, #12]
 801b61a:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to compare type <%s>. Please install a MockNamedValueComparator.", typeName.asCharString());
 801b61c:	68fb      	ldr	r3, [r7, #12]
 801b61e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b622:	6878      	ldr	r0, [r7, #4]
 801b624:	f7ef ff2e 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 801b628:	4602      	mov	r2, r0
 801b62a:	f107 0310 	add.w	r3, r7, #16
 801b62e:	490b      	ldr	r1, [pc, #44]	; (801b65c <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801b630:	4618      	mov	r0, r3
 801b632:	f7f0 fc5b 	bl	800beec <_Z16StringFromFormatPKcz>
 801b636:	f107 0310 	add.w	r3, r7, #16
 801b63a:	4619      	mov	r1, r3
 801b63c:	4620      	mov	r0, r4
 801b63e:	f7ef fc02 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 801b642:	f107 0310 	add.w	r3, r7, #16
 801b646:	4618      	mov	r0, r3
 801b648:	f7ef ff49 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 801b64c:	68fb      	ldr	r3, [r7, #12]
 801b64e:	4618      	mov	r0, r3
 801b650:	371c      	adds	r7, #28
 801b652:	46bd      	mov	sp, r7
 801b654:	bd90      	pop	{r4, r7, pc}
 801b656:	bf00      	nop
 801b658:	0802604c 	.word	0x0802604c
 801b65c:	08024344 	.word	0x08024344

0801b660 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCopyCustomTypeFailure::MockNoWayToCopyCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801b660:	b590      	push	{r4, r7, lr}
 801b662:	b087      	sub	sp, #28
 801b664:	af00      	add	r7, sp, #0
 801b666:	60f8      	str	r0, [r7, #12]
 801b668:	60b9      	str	r1, [r7, #8]
 801b66a:	607a      	str	r2, [r7, #4]
 801b66c:	68fb      	ldr	r3, [r7, #12]
 801b66e:	68b9      	ldr	r1, [r7, #8]
 801b670:	4618      	mov	r0, r3
 801b672:	f7ff fa9f 	bl	801abb4 <_ZN11MockFailureC1EP10UtestShell>
 801b676:	4a10      	ldr	r2, [pc, #64]	; (801b6b8 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801b678:	68fb      	ldr	r3, [r7, #12]
 801b67a:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to copy type <%s>. Please install a MockNamedValueCopier.", typeName.asCharString());
 801b67c:	68fb      	ldr	r3, [r7, #12]
 801b67e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b682:	6878      	ldr	r0, [r7, #4]
 801b684:	f7ef fefe 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 801b688:	4602      	mov	r2, r0
 801b68a:	f107 0310 	add.w	r3, r7, #16
 801b68e:	490b      	ldr	r1, [pc, #44]	; (801b6bc <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801b690:	4618      	mov	r0, r3
 801b692:	f7f0 fc2b 	bl	800beec <_Z16StringFromFormatPKcz>
 801b696:	f107 0310 	add.w	r3, r7, #16
 801b69a:	4619      	mov	r1, r3
 801b69c:	4620      	mov	r0, r4
 801b69e:	f7ef fbd2 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 801b6a2:	f107 0310 	add.w	r3, r7, #16
 801b6a6:	4618      	mov	r0, r3
 801b6a8:	f7ef ff19 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 801b6ac:	68fb      	ldr	r3, [r7, #12]
 801b6ae:	4618      	mov	r0, r3
 801b6b0:	371c      	adds	r7, #28
 801b6b2:	46bd      	mov	sp, r7
 801b6b4:	bd90      	pop	{r4, r7, pc}
 801b6b6:	bf00      	nop
 801b6b8:	08026020 	.word	0x08026020
 801b6bc:	0802439c 	.word	0x0802439c

0801b6c0 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>:

MockUnexpectedObjectFailure::MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* actual, const MockExpectedCallsList& expectations) : MockFailure(test)
 801b6c0:	b590      	push	{r4, r7, lr}
 801b6c2:	b087      	sub	sp, #28
 801b6c4:	af00      	add	r7, sp, #0
 801b6c6:	60f8      	str	r0, [r7, #12]
 801b6c8:	60b9      	str	r1, [r7, #8]
 801b6ca:	607a      	str	r2, [r7, #4]
 801b6cc:	603b      	str	r3, [r7, #0]
 801b6ce:	68fb      	ldr	r3, [r7, #12]
 801b6d0:	68b9      	ldr	r1, [r7, #8]
 801b6d2:	4618      	mov	r0, r3
 801b6d4:	f7ff fa6e 	bl	801abb4 <_ZN11MockFailureC1EP10UtestShell>
 801b6d8:	4a12      	ldr	r2, [pc, #72]	; (801b724 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x64>)
 801b6da:	68fb      	ldr	r3, [r7, #12]
 801b6dc:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801b6de:	68fb      	ldr	r3, [r7, #12]
 801b6e0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
 801b6e4:	6878      	ldr	r0, [r7, #4]
 801b6e6:	f7ef fecd 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 801b6ea:	4602      	mov	r2, r0
 801b6ec:	f107 0010 	add.w	r0, r7, #16
 801b6f0:	683b      	ldr	r3, [r7, #0]
 801b6f2:	490d      	ldr	r1, [pc, #52]	; (801b728 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x68>)
 801b6f4:	f7f0 fbfa 	bl	800beec <_Z16StringFromFormatPKcz>
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801b6f8:	f107 0310 	add.w	r3, r7, #16
 801b6fc:	4619      	mov	r1, r3
 801b6fe:	4620      	mov	r0, r4
 801b700:	f7ef fba1 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 801b704:	f107 0310 	add.w	r3, r7, #16
 801b708:	4618      	mov	r0, r3
 801b70a:	f7ef fee8 	bl	800b4de <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801b70e:	68fb      	ldr	r3, [r7, #12]
 801b710:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b712:	6879      	ldr	r1, [r7, #4]
 801b714:	4618      	mov	r0, r3
 801b716:	f7ff fad5 	bl	801acc4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801b71a:	68fb      	ldr	r3, [r7, #12]
 801b71c:	4618      	mov	r0, r3
 801b71e:	371c      	adds	r7, #28
 801b720:	46bd      	mov	sp, r7
 801b722:	bd90      	pop	{r4, r7, pc}
 801b724:	08025ff4 	.word	0x08025ff4
 801b728:	080243ec 	.word	0x080243ec

0801b72c <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedObjectDidntHappenFailure::MockExpectedObjectDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801b72c:	b590      	push	{r4, r7, lr}
 801b72e:	b087      	sub	sp, #28
 801b730:	af00      	add	r7, sp, #0
 801b732:	60f8      	str	r0, [r7, #12]
 801b734:	60b9      	str	r1, [r7, #8]
 801b736:	607a      	str	r2, [r7, #4]
 801b738:	603b      	str	r3, [r7, #0]
 801b73a:	68fb      	ldr	r3, [r7, #12]
 801b73c:	68b9      	ldr	r1, [r7, #8]
 801b73e:	4618      	mov	r0, r3
 801b740:	f7ff fa38 	bl	801abb4 <_ZN11MockFailureC1EP10UtestShell>
 801b744:	4a12      	ldr	r2, [pc, #72]	; (801b790 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x64>)
 801b746:	68fb      	ldr	r3, [r7, #12]
 801b748:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("Mock Failure: Expected call on object for function \"%s\" but it did not happen.\n", functionName.asCharString());
 801b74a:	68fb      	ldr	r3, [r7, #12]
 801b74c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b750:	6878      	ldr	r0, [r7, #4]
 801b752:	f7ef fe97 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 801b756:	4602      	mov	r2, r0
 801b758:	f107 0310 	add.w	r3, r7, #16
 801b75c:	490d      	ldr	r1, [pc, #52]	; (801b794 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x68>)
 801b75e:	4618      	mov	r0, r3
 801b760:	f7f0 fbc4 	bl	800beec <_Z16StringFromFormatPKcz>
 801b764:	f107 0310 	add.w	r3, r7, #16
 801b768:	4619      	mov	r1, r3
 801b76a:	4620      	mov	r0, r4
 801b76c:	f7ef fb6b 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 801b770:	f107 0310 	add.w	r3, r7, #16
 801b774:	4618      	mov	r0, r3
 801b776:	f7ef feb2 	bl	800b4de <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801b77a:	68fb      	ldr	r3, [r7, #12]
 801b77c:	683a      	ldr	r2, [r7, #0]
 801b77e:	6879      	ldr	r1, [r7, #4]
 801b780:	4618      	mov	r0, r3
 801b782:	f7ff fa9f 	bl	801acc4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801b786:	68fb      	ldr	r3, [r7, #12]
 801b788:	4618      	mov	r0, r3
 801b78a:	371c      	adds	r7, #28
 801b78c:	46bd      	mov	sp, r7
 801b78e:	bd90      	pop	{r4, r7, pc}
 801b790:	08025fc8 	.word	0x08025fc8
 801b794:	08024450 	.word	0x08024450

0801b798 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>:

MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::defaultRepository_ = NULLPTR;
const double MockNamedValue::defaultDoubleTolerance = 0.005;

void MockNamedValue::setDefaultComparatorsAndCopiersRepository(MockNamedValueComparatorsAndCopiersRepository* repository)
{
 801b798:	b480      	push	{r7}
 801b79a:	b083      	sub	sp, #12
 801b79c:	af00      	add	r7, sp, #0
 801b79e:	6078      	str	r0, [r7, #4]
    defaultRepository_ = repository;
 801b7a0:	4a04      	ldr	r2, [pc, #16]	; (801b7b4 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository+0x1c>)
 801b7a2:	687b      	ldr	r3, [r7, #4]
 801b7a4:	6013      	str	r3, [r2, #0]
}
 801b7a6:	bf00      	nop
 801b7a8:	370c      	adds	r7, #12
 801b7aa:	46bd      	mov	sp, r7
 801b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7b0:	4770      	bx	lr
 801b7b2:	bf00      	nop
 801b7b4:	20000d60 	.word	0x20000d60

0801b7b8 <_ZN14MockNamedValueC1ERK12SimpleString>:
MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::getDefaultComparatorsAndCopiersRepository()
{
    return defaultRepository_;
}

MockNamedValue::MockNamedValue(const SimpleString& name) : name_(name), type_("int"), size_(0), comparator_(NULLPTR), copier_(NULLPTR)
 801b7b8:	b580      	push	{r7, lr}
 801b7ba:	b082      	sub	sp, #8
 801b7bc:	af00      	add	r7, sp, #0
 801b7be:	6078      	str	r0, [r7, #4]
 801b7c0:	6039      	str	r1, [r7, #0]
 801b7c2:	4a10      	ldr	r2, [pc, #64]	; (801b804 <_ZN14MockNamedValueC1ERK12SimpleString+0x4c>)
 801b7c4:	687b      	ldr	r3, [r7, #4]
 801b7c6:	601a      	str	r2, [r3, #0]
 801b7c8:	687b      	ldr	r3, [r7, #4]
 801b7ca:	3304      	adds	r3, #4
 801b7cc:	6839      	ldr	r1, [r7, #0]
 801b7ce:	4618      	mov	r0, r3
 801b7d0:	f7ef fb21 	bl	800ae16 <_ZN12SimpleStringC1ERKS_>
 801b7d4:	687b      	ldr	r3, [r7, #4]
 801b7d6:	330c      	adds	r3, #12
 801b7d8:	490b      	ldr	r1, [pc, #44]	; (801b808 <_ZN14MockNamedValueC1ERK12SimpleString+0x50>)
 801b7da:	4618      	mov	r0, r3
 801b7dc:	f7ef fac7 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801b7e0:	687b      	ldr	r3, [r7, #4]
 801b7e2:	2200      	movs	r2, #0
 801b7e4:	629a      	str	r2, [r3, #40]	; 0x28
 801b7e6:	687b      	ldr	r3, [r7, #4]
 801b7e8:	2200      	movs	r2, #0
 801b7ea:	62da      	str	r2, [r3, #44]	; 0x2c
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	2200      	movs	r2, #0
 801b7f0:	631a      	str	r2, [r3, #48]	; 0x30
{
    value_.intValue_ = 0;
 801b7f2:	687b      	ldr	r3, [r7, #4]
 801b7f4:	2200      	movs	r2, #0
 801b7f6:	619a      	str	r2, [r3, #24]
}
 801b7f8:	687b      	ldr	r3, [r7, #4]
 801b7fa:	4618      	mov	r0, r3
 801b7fc:	3708      	adds	r7, #8
 801b7fe:	46bd      	mov	sp, r7
 801b800:	bd80      	pop	{r7, pc}
 801b802:	bf00      	nop
 801b804:	08026850 	.word	0x08026850
 801b808:	080244a0 	.word	0x080244a0

0801b80c <_ZN14MockNamedValueD1Ev>:

MockNamedValue::~MockNamedValue()
 801b80c:	b580      	push	{r7, lr}
 801b80e:	b082      	sub	sp, #8
 801b810:	af00      	add	r7, sp, #0
 801b812:	6078      	str	r0, [r7, #4]
 801b814:	4a08      	ldr	r2, [pc, #32]	; (801b838 <_ZN14MockNamedValueD1Ev+0x2c>)
 801b816:	687b      	ldr	r3, [r7, #4]
 801b818:	601a      	str	r2, [r3, #0]
 801b81a:	687b      	ldr	r3, [r7, #4]
 801b81c:	330c      	adds	r3, #12
 801b81e:	4618      	mov	r0, r3
 801b820:	f7ef fe5d 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801b824:	687b      	ldr	r3, [r7, #4]
 801b826:	3304      	adds	r3, #4
 801b828:	4618      	mov	r0, r3
 801b82a:	f7ef fe58 	bl	800b4de <_ZN12SimpleStringD1Ev>
{
}
 801b82e:	687b      	ldr	r3, [r7, #4]
 801b830:	4618      	mov	r0, r3
 801b832:	3708      	adds	r7, #8
 801b834:	46bd      	mov	sp, r7
 801b836:	bd80      	pop	{r7, pc}
 801b838:	08026850 	.word	0x08026850

0801b83c <_ZN14MockNamedValueD0Ev>:
MockNamedValue::~MockNamedValue()
 801b83c:	b580      	push	{r7, lr}
 801b83e:	b082      	sub	sp, #8
 801b840:	af00      	add	r7, sp, #0
 801b842:	6078      	str	r0, [r7, #4]
}
 801b844:	6878      	ldr	r0, [r7, #4]
 801b846:	f7ff ffe1 	bl	801b80c <_ZN14MockNamedValueD1Ev>
 801b84a:	2138      	movs	r1, #56	; 0x38
 801b84c:	6878      	ldr	r0, [r7, #4]
 801b84e:	f7ec fedf 	bl	8008610 <_ZdlPvj>
 801b852:	687b      	ldr	r3, [r7, #4]
 801b854:	4618      	mov	r0, r3
 801b856:	3708      	adds	r7, #8
 801b858:	46bd      	mov	sp, r7
 801b85a:	bd80      	pop	{r7, pc}

0801b85c <_ZN14MockNamedValue8setValueEb>:

void MockNamedValue::setValue(bool value)
{
 801b85c:	b590      	push	{r4, r7, lr}
 801b85e:	b085      	sub	sp, #20
 801b860:	af00      	add	r7, sp, #0
 801b862:	6078      	str	r0, [r7, #4]
 801b864:	460b      	mov	r3, r1
 801b866:	70fb      	strb	r3, [r7, #3]
    type_ = "bool";
 801b868:	687b      	ldr	r3, [r7, #4]
 801b86a:	f103 040c 	add.w	r4, r3, #12
 801b86e:	f107 0308 	add.w	r3, r7, #8
 801b872:	490b      	ldr	r1, [pc, #44]	; (801b8a0 <_ZN14MockNamedValue8setValueEb+0x44>)
 801b874:	4618      	mov	r0, r3
 801b876:	f7ef fa7a 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801b87a:	f107 0308 	add.w	r3, r7, #8
 801b87e:	4619      	mov	r1, r3
 801b880:	4620      	mov	r0, r4
 801b882:	f7ef fae0 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 801b886:	f107 0308 	add.w	r3, r7, #8
 801b88a:	4618      	mov	r0, r3
 801b88c:	f7ef fe27 	bl	800b4de <_ZN12SimpleStringD1Ev>
    value_.boolValue_ = value;
 801b890:	687b      	ldr	r3, [r7, #4]
 801b892:	78fa      	ldrb	r2, [r7, #3]
 801b894:	761a      	strb	r2, [r3, #24]
}
 801b896:	bf00      	nop
 801b898:	3714      	adds	r7, #20
 801b89a:	46bd      	mov	sp, r7
 801b89c:	bd90      	pop	{r4, r7, pc}
 801b89e:	bf00      	nop
 801b8a0:	080244a4 	.word	0x080244a4

0801b8a4 <_ZN14MockNamedValue8setValueEj>:

void MockNamedValue::setValue(unsigned int value)
{
 801b8a4:	b590      	push	{r4, r7, lr}
 801b8a6:	b085      	sub	sp, #20
 801b8a8:	af00      	add	r7, sp, #0
 801b8aa:	6078      	str	r0, [r7, #4]
 801b8ac:	6039      	str	r1, [r7, #0]
    type_ = "unsigned int";
 801b8ae:	687b      	ldr	r3, [r7, #4]
 801b8b0:	f103 040c 	add.w	r4, r3, #12
 801b8b4:	f107 0308 	add.w	r3, r7, #8
 801b8b8:	490a      	ldr	r1, [pc, #40]	; (801b8e4 <_ZN14MockNamedValue8setValueEj+0x40>)
 801b8ba:	4618      	mov	r0, r3
 801b8bc:	f7ef fa57 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801b8c0:	f107 0308 	add.w	r3, r7, #8
 801b8c4:	4619      	mov	r1, r3
 801b8c6:	4620      	mov	r0, r4
 801b8c8:	f7ef fabd 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 801b8cc:	f107 0308 	add.w	r3, r7, #8
 801b8d0:	4618      	mov	r0, r3
 801b8d2:	f7ef fe04 	bl	800b4de <_ZN12SimpleStringD1Ev>
    value_.unsignedIntValue_ = value;
 801b8d6:	687b      	ldr	r3, [r7, #4]
 801b8d8:	683a      	ldr	r2, [r7, #0]
 801b8da:	619a      	str	r2, [r3, #24]
}
 801b8dc:	bf00      	nop
 801b8de:	3714      	adds	r7, #20
 801b8e0:	46bd      	mov	sp, r7
 801b8e2:	bd90      	pop	{r4, r7, pc}
 801b8e4:	080244ac 	.word	0x080244ac

0801b8e8 <_ZN14MockNamedValue8setValueEi>:

void MockNamedValue::setValue(int value)
{
 801b8e8:	b590      	push	{r4, r7, lr}
 801b8ea:	b085      	sub	sp, #20
 801b8ec:	af00      	add	r7, sp, #0
 801b8ee:	6078      	str	r0, [r7, #4]
 801b8f0:	6039      	str	r1, [r7, #0]
    type_ = "int";
 801b8f2:	687b      	ldr	r3, [r7, #4]
 801b8f4:	f103 040c 	add.w	r4, r3, #12
 801b8f8:	f107 0308 	add.w	r3, r7, #8
 801b8fc:	490a      	ldr	r1, [pc, #40]	; (801b928 <_ZN14MockNamedValue8setValueEi+0x40>)
 801b8fe:	4618      	mov	r0, r3
 801b900:	f7ef fa35 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801b904:	f107 0308 	add.w	r3, r7, #8
 801b908:	4619      	mov	r1, r3
 801b90a:	4620      	mov	r0, r4
 801b90c:	f7ef fa9b 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 801b910:	f107 0308 	add.w	r3, r7, #8
 801b914:	4618      	mov	r0, r3
 801b916:	f7ef fde2 	bl	800b4de <_ZN12SimpleStringD1Ev>
    value_.intValue_ = value;
 801b91a:	687b      	ldr	r3, [r7, #4]
 801b91c:	683a      	ldr	r2, [r7, #0]
 801b91e:	619a      	str	r2, [r3, #24]
}
 801b920:	bf00      	nop
 801b922:	3714      	adds	r7, #20
 801b924:	46bd      	mov	sp, r7
 801b926:	bd90      	pop	{r4, r7, pc}
 801b928:	080244a0 	.word	0x080244a0

0801b92c <_ZN14MockNamedValue8setValueEl>:

void MockNamedValue::setValue(long int value)
{
 801b92c:	b590      	push	{r4, r7, lr}
 801b92e:	b085      	sub	sp, #20
 801b930:	af00      	add	r7, sp, #0
 801b932:	6078      	str	r0, [r7, #4]
 801b934:	6039      	str	r1, [r7, #0]
    type_ = "long int";
 801b936:	687b      	ldr	r3, [r7, #4]
 801b938:	f103 040c 	add.w	r4, r3, #12
 801b93c:	f107 0308 	add.w	r3, r7, #8
 801b940:	490a      	ldr	r1, [pc, #40]	; (801b96c <_ZN14MockNamedValue8setValueEl+0x40>)
 801b942:	4618      	mov	r0, r3
 801b944:	f7ef fa13 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801b948:	f107 0308 	add.w	r3, r7, #8
 801b94c:	4619      	mov	r1, r3
 801b94e:	4620      	mov	r0, r4
 801b950:	f7ef fa79 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 801b954:	f107 0308 	add.w	r3, r7, #8
 801b958:	4618      	mov	r0, r3
 801b95a:	f7ef fdc0 	bl	800b4de <_ZN12SimpleStringD1Ev>
    value_.longIntValue_ = value;
 801b95e:	687b      	ldr	r3, [r7, #4]
 801b960:	683a      	ldr	r2, [r7, #0]
 801b962:	619a      	str	r2, [r3, #24]
}
 801b964:	bf00      	nop
 801b966:	3714      	adds	r7, #20
 801b968:	46bd      	mov	sp, r7
 801b96a:	bd90      	pop	{r4, r7, pc}
 801b96c:	080244bc 	.word	0x080244bc

0801b970 <_ZN14MockNamedValue8setValueEm>:

void MockNamedValue::setValue(unsigned long int value)
{
 801b970:	b590      	push	{r4, r7, lr}
 801b972:	b085      	sub	sp, #20
 801b974:	af00      	add	r7, sp, #0
 801b976:	6078      	str	r0, [r7, #4]
 801b978:	6039      	str	r1, [r7, #0]
    type_ = "unsigned long int";
 801b97a:	687b      	ldr	r3, [r7, #4]
 801b97c:	f103 040c 	add.w	r4, r3, #12
 801b980:	f107 0308 	add.w	r3, r7, #8
 801b984:	490a      	ldr	r1, [pc, #40]	; (801b9b0 <_ZN14MockNamedValue8setValueEm+0x40>)
 801b986:	4618      	mov	r0, r3
 801b988:	f7ef f9f1 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801b98c:	f107 0308 	add.w	r3, r7, #8
 801b990:	4619      	mov	r1, r3
 801b992:	4620      	mov	r0, r4
 801b994:	f7ef fa57 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 801b998:	f107 0308 	add.w	r3, r7, #8
 801b99c:	4618      	mov	r0, r3
 801b99e:	f7ef fd9e 	bl	800b4de <_ZN12SimpleStringD1Ev>
    value_.unsignedLongIntValue_ = value;
 801b9a2:	687b      	ldr	r3, [r7, #4]
 801b9a4:	683a      	ldr	r2, [r7, #0]
 801b9a6:	619a      	str	r2, [r3, #24]
}
 801b9a8:	bf00      	nop
 801b9aa:	3714      	adds	r7, #20
 801b9ac:	46bd      	mov	sp, r7
 801b9ae:	bd90      	pop	{r4, r7, pc}
 801b9b0:	080244c8 	.word	0x080244c8

0801b9b4 <_ZN14MockNamedValue8setValueE17cpputest_longlong>:
}

#else

void MockNamedValue::setValue(cpputest_longlong)
{
 801b9b4:	b5b0      	push	{r4, r5, r7, lr}
 801b9b6:	b086      	sub	sp, #24
 801b9b8:	af02      	add	r7, sp, #8
 801b9ba:	60f8      	str	r0, [r7, #12]
 801b9bc:	1d3b      	adds	r3, r7, #4
 801b9be:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801b9c2:	f7f6 fdb7 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 801b9c6:	4604      	mov	r4, r0
 801b9c8:	6823      	ldr	r3, [r4, #0]
 801b9ca:	3368      	adds	r3, #104	; 0x68
 801b9cc:	681d      	ldr	r5, [r3, #0]
 801b9ce:	f7f6 fdc1 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b9d2:	4603      	mov	r3, r0
 801b9d4:	9300      	str	r3, [sp, #0]
 801b9d6:	2367      	movs	r3, #103	; 0x67
 801b9d8:	4a03      	ldr	r2, [pc, #12]	; (801b9e8 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x34>)
 801b9da:	4904      	ldr	r1, [pc, #16]	; (801b9ec <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x38>)
 801b9dc:	4620      	mov	r0, r4
 801b9de:	47a8      	blx	r5
}
 801b9e0:	bf00      	nop
 801b9e2:	3710      	adds	r7, #16
 801b9e4:	46bd      	mov	sp, r7
 801b9e6:	bdb0      	pop	{r4, r5, r7, pc}
 801b9e8:	080244dc 	.word	0x080244dc
 801b9ec:	080244f8 	.word	0x080244f8

0801b9f0 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong>:

void MockNamedValue::setValue(cpputest_ulonglong)
{
 801b9f0:	b5b0      	push	{r4, r5, r7, lr}
 801b9f2:	b086      	sub	sp, #24
 801b9f4:	af02      	add	r7, sp, #8
 801b9f6:	60f8      	str	r0, [r7, #12]
 801b9f8:	1d3b      	adds	r3, r7, #4
 801b9fa:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801b9fe:	f7f6 fd99 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 801ba02:	4604      	mov	r4, r0
 801ba04:	6823      	ldr	r3, [r4, #0]
 801ba06:	3368      	adds	r3, #104	; 0x68
 801ba08:	681d      	ldr	r5, [r3, #0]
 801ba0a:	f7f6 fda3 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ba0e:	4603      	mov	r3, r0
 801ba10:	9300      	str	r3, [sp, #0]
 801ba12:	236c      	movs	r3, #108	; 0x6c
 801ba14:	4a03      	ldr	r2, [pc, #12]	; (801ba24 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x34>)
 801ba16:	4904      	ldr	r1, [pc, #16]	; (801ba28 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x38>)
 801ba18:	4620      	mov	r0, r4
 801ba1a:	47a8      	blx	r5
}
 801ba1c:	bf00      	nop
 801ba1e:	3710      	adds	r7, #16
 801ba20:	46bd      	mov	sp, r7
 801ba22:	bdb0      	pop	{r4, r5, r7, pc}
 801ba24:	080244dc 	.word	0x080244dc
 801ba28:	08024518 	.word	0x08024518
 801ba2c:	00000000 	.word	0x00000000

0801ba30 <_ZN14MockNamedValue8setValueEd>:

#endif

void MockNamedValue::setValue(double value)
{
 801ba30:	b580      	push	{r7, lr}
 801ba32:	b084      	sub	sp, #16
 801ba34:	af00      	add	r7, sp, #0
 801ba36:	60f8      	str	r0, [r7, #12]
 801ba38:	ed87 0b00 	vstr	d0, [r7]
    setValue(value, defaultDoubleTolerance);
 801ba3c:	68fb      	ldr	r3, [r7, #12]
 801ba3e:	681b      	ldr	r3, [r3, #0]
 801ba40:	3328      	adds	r3, #40	; 0x28
 801ba42:	681b      	ldr	r3, [r3, #0]
 801ba44:	ed9f 1b04 	vldr	d1, [pc, #16]	; 801ba58 <_ZN14MockNamedValue8setValueEd+0x28>
 801ba48:	ed97 0b00 	vldr	d0, [r7]
 801ba4c:	68f8      	ldr	r0, [r7, #12]
 801ba4e:	4798      	blx	r3
}
 801ba50:	bf00      	nop
 801ba52:	3710      	adds	r7, #16
 801ba54:	46bd      	mov	sp, r7
 801ba56:	bd80      	pop	{r7, pc}
 801ba58:	47ae147b 	.word	0x47ae147b
 801ba5c:	3f747ae1 	.word	0x3f747ae1

0801ba60 <_ZN14MockNamedValue8setValueEdd>:

void MockNamedValue::setValue(double value, double tolerance)
{
 801ba60:	b590      	push	{r4, r7, lr}
 801ba62:	b089      	sub	sp, #36	; 0x24
 801ba64:	af00      	add	r7, sp, #0
 801ba66:	6178      	str	r0, [r7, #20]
 801ba68:	ed87 0b02 	vstr	d0, [r7, #8]
 801ba6c:	ed87 1b00 	vstr	d1, [r7]
    type_ = "double";
 801ba70:	697b      	ldr	r3, [r7, #20]
 801ba72:	f103 040c 	add.w	r4, r3, #12
 801ba76:	f107 0318 	add.w	r3, r7, #24
 801ba7a:	490e      	ldr	r1, [pc, #56]	; (801bab4 <_ZN14MockNamedValue8setValueEdd+0x54>)
 801ba7c:	4618      	mov	r0, r3
 801ba7e:	f7ef f976 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801ba82:	f107 0318 	add.w	r3, r7, #24
 801ba86:	4619      	mov	r1, r3
 801ba88:	4620      	mov	r0, r4
 801ba8a:	f7ef f9dc 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 801ba8e:	f107 0318 	add.w	r3, r7, #24
 801ba92:	4618      	mov	r0, r3
 801ba94:	f7ef fd23 	bl	800b4de <_ZN12SimpleStringD1Ev>
    value_.doubleValue_.value = value;
 801ba98:	6979      	ldr	r1, [r7, #20]
 801ba9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801ba9e:	e9c1 2306 	strd	r2, r3, [r1, #24]
    value_.doubleValue_.tolerance = tolerance;
 801baa2:	6979      	ldr	r1, [r7, #20]
 801baa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 801baa8:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 801baac:	bf00      	nop
 801baae:	3724      	adds	r7, #36	; 0x24
 801bab0:	46bd      	mov	sp, r7
 801bab2:	bd90      	pop	{r4, r7, pc}
 801bab4:	08024544 	.word	0x08024544

0801bab8 <_ZN14MockNamedValue8setValueEPv>:

void MockNamedValue::setValue(void* value)
{
 801bab8:	b590      	push	{r4, r7, lr}
 801baba:	b085      	sub	sp, #20
 801babc:	af00      	add	r7, sp, #0
 801babe:	6078      	str	r0, [r7, #4]
 801bac0:	6039      	str	r1, [r7, #0]
    type_ = "void*";
 801bac2:	687b      	ldr	r3, [r7, #4]
 801bac4:	f103 040c 	add.w	r4, r3, #12
 801bac8:	f107 0308 	add.w	r3, r7, #8
 801bacc:	490a      	ldr	r1, [pc, #40]	; (801baf8 <_ZN14MockNamedValue8setValueEPv+0x40>)
 801bace:	4618      	mov	r0, r3
 801bad0:	f7ef f94d 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801bad4:	f107 0308 	add.w	r3, r7, #8
 801bad8:	4619      	mov	r1, r3
 801bada:	4620      	mov	r0, r4
 801badc:	f7ef f9b3 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 801bae0:	f107 0308 	add.w	r3, r7, #8
 801bae4:	4618      	mov	r0, r3
 801bae6:	f7ef fcfa 	bl	800b4de <_ZN12SimpleStringD1Ev>
    value_.pointerValue_ = value;
 801baea:	687b      	ldr	r3, [r7, #4]
 801baec:	683a      	ldr	r2, [r7, #0]
 801baee:	619a      	str	r2, [r3, #24]
}
 801baf0:	bf00      	nop
 801baf2:	3714      	adds	r7, #20
 801baf4:	46bd      	mov	sp, r7
 801baf6:	bd90      	pop	{r4, r7, pc}
 801baf8:	0802454c 	.word	0x0802454c

0801bafc <_ZN14MockNamedValue8setValueEPKv>:

void MockNamedValue::setValue(const void* value)
{
 801bafc:	b590      	push	{r4, r7, lr}
 801bafe:	b085      	sub	sp, #20
 801bb00:	af00      	add	r7, sp, #0
 801bb02:	6078      	str	r0, [r7, #4]
 801bb04:	6039      	str	r1, [r7, #0]
    type_ = "const void*";
 801bb06:	687b      	ldr	r3, [r7, #4]
 801bb08:	f103 040c 	add.w	r4, r3, #12
 801bb0c:	f107 0308 	add.w	r3, r7, #8
 801bb10:	490a      	ldr	r1, [pc, #40]	; (801bb3c <_ZN14MockNamedValue8setValueEPKv+0x40>)
 801bb12:	4618      	mov	r0, r3
 801bb14:	f7ef f92b 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801bb18:	f107 0308 	add.w	r3, r7, #8
 801bb1c:	4619      	mov	r1, r3
 801bb1e:	4620      	mov	r0, r4
 801bb20:	f7ef f991 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 801bb24:	f107 0308 	add.w	r3, r7, #8
 801bb28:	4618      	mov	r0, r3
 801bb2a:	f7ef fcd8 	bl	800b4de <_ZN12SimpleStringD1Ev>
    value_.constPointerValue_ = value;
 801bb2e:	687b      	ldr	r3, [r7, #4]
 801bb30:	683a      	ldr	r2, [r7, #0]
 801bb32:	619a      	str	r2, [r3, #24]
}
 801bb34:	bf00      	nop
 801bb36:	3714      	adds	r7, #20
 801bb38:	46bd      	mov	sp, r7
 801bb3a:	bd90      	pop	{r4, r7, pc}
 801bb3c:	08024554 	.word	0x08024554

0801bb40 <_ZN14MockNamedValue8setValueEPFvvE>:

void MockNamedValue::setValue(void (*value)())
{
 801bb40:	b590      	push	{r4, r7, lr}
 801bb42:	b085      	sub	sp, #20
 801bb44:	af00      	add	r7, sp, #0
 801bb46:	6078      	str	r0, [r7, #4]
 801bb48:	6039      	str	r1, [r7, #0]
    type_ = "void (*)()";
 801bb4a:	687b      	ldr	r3, [r7, #4]
 801bb4c:	f103 040c 	add.w	r4, r3, #12
 801bb50:	f107 0308 	add.w	r3, r7, #8
 801bb54:	490a      	ldr	r1, [pc, #40]	; (801bb80 <_ZN14MockNamedValue8setValueEPFvvE+0x40>)
 801bb56:	4618      	mov	r0, r3
 801bb58:	f7ef f909 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801bb5c:	f107 0308 	add.w	r3, r7, #8
 801bb60:	4619      	mov	r1, r3
 801bb62:	4620      	mov	r0, r4
 801bb64:	f7ef f96f 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 801bb68:	f107 0308 	add.w	r3, r7, #8
 801bb6c:	4618      	mov	r0, r3
 801bb6e:	f7ef fcb6 	bl	800b4de <_ZN12SimpleStringD1Ev>
    value_.functionPointerValue_ = value;
 801bb72:	687b      	ldr	r3, [r7, #4]
 801bb74:	683a      	ldr	r2, [r7, #0]
 801bb76:	619a      	str	r2, [r3, #24]
}
 801bb78:	bf00      	nop
 801bb7a:	3714      	adds	r7, #20
 801bb7c:	46bd      	mov	sp, r7
 801bb7e:	bd90      	pop	{r4, r7, pc}
 801bb80:	08024560 	.word	0x08024560

0801bb84 <_ZN14MockNamedValue8setValueEPKc>:

void MockNamedValue::setValue(const char* value)
{
 801bb84:	b590      	push	{r4, r7, lr}
 801bb86:	b085      	sub	sp, #20
 801bb88:	af00      	add	r7, sp, #0
 801bb8a:	6078      	str	r0, [r7, #4]
 801bb8c:	6039      	str	r1, [r7, #0]
    type_ = "const char*";
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	f103 040c 	add.w	r4, r3, #12
 801bb94:	f107 0308 	add.w	r3, r7, #8
 801bb98:	490a      	ldr	r1, [pc, #40]	; (801bbc4 <_ZN14MockNamedValue8setValueEPKc+0x40>)
 801bb9a:	4618      	mov	r0, r3
 801bb9c:	f7ef f8e7 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801bba0:	f107 0308 	add.w	r3, r7, #8
 801bba4:	4619      	mov	r1, r3
 801bba6:	4620      	mov	r0, r4
 801bba8:	f7ef f94d 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 801bbac:	f107 0308 	add.w	r3, r7, #8
 801bbb0:	4618      	mov	r0, r3
 801bbb2:	f7ef fc94 	bl	800b4de <_ZN12SimpleStringD1Ev>
    value_.stringValue_ = value;
 801bbb6:	687b      	ldr	r3, [r7, #4]
 801bbb8:	683a      	ldr	r2, [r7, #0]
 801bbba:	619a      	str	r2, [r3, #24]
}
 801bbbc:	bf00      	nop
 801bbbe:	3714      	adds	r7, #20
 801bbc0:	46bd      	mov	sp, r7
 801bbc2:	bd90      	pop	{r4, r7, pc}
 801bbc4:	0802456c 	.word	0x0802456c

0801bbc8 <_ZN14MockNamedValue15setMemoryBufferEPKhj>:

void MockNamedValue::setMemoryBuffer(const unsigned char* value, size_t size)
{
 801bbc8:	b590      	push	{r4, r7, lr}
 801bbca:	b087      	sub	sp, #28
 801bbcc:	af00      	add	r7, sp, #0
 801bbce:	60f8      	str	r0, [r7, #12]
 801bbd0:	60b9      	str	r1, [r7, #8]
 801bbd2:	607a      	str	r2, [r7, #4]
    type_ = "const unsigned char*";
 801bbd4:	68fb      	ldr	r3, [r7, #12]
 801bbd6:	f103 040c 	add.w	r4, r3, #12
 801bbda:	f107 0310 	add.w	r3, r7, #16
 801bbde:	490c      	ldr	r1, [pc, #48]	; (801bc10 <_ZN14MockNamedValue15setMemoryBufferEPKhj+0x48>)
 801bbe0:	4618      	mov	r0, r3
 801bbe2:	f7ef f8c4 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801bbe6:	f107 0310 	add.w	r3, r7, #16
 801bbea:	4619      	mov	r1, r3
 801bbec:	4620      	mov	r0, r4
 801bbee:	f7ef f92a 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 801bbf2:	f107 0310 	add.w	r3, r7, #16
 801bbf6:	4618      	mov	r0, r3
 801bbf8:	f7ef fc71 	bl	800b4de <_ZN12SimpleStringD1Ev>
    value_.memoryBufferValue_ = value;
 801bbfc:	68fb      	ldr	r3, [r7, #12]
 801bbfe:	68ba      	ldr	r2, [r7, #8]
 801bc00:	619a      	str	r2, [r3, #24]
    size_ = size;
 801bc02:	68fb      	ldr	r3, [r7, #12]
 801bc04:	687a      	ldr	r2, [r7, #4]
 801bc06:	629a      	str	r2, [r3, #40]	; 0x28
}
 801bc08:	bf00      	nop
 801bc0a:	371c      	adds	r7, #28
 801bc0c:	46bd      	mov	sp, r7
 801bc0e:	bd90      	pop	{r4, r7, pc}
 801bc10:	08024578 	.word	0x08024578

0801bc14 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>:

void MockNamedValue::setConstObjectPointer(const SimpleString& type, const void* objectPtr)
{
 801bc14:	b580      	push	{r7, lr}
 801bc16:	b084      	sub	sp, #16
 801bc18:	af00      	add	r7, sp, #0
 801bc1a:	60f8      	str	r0, [r7, #12]
 801bc1c:	60b9      	str	r1, [r7, #8]
 801bc1e:	607a      	str	r2, [r7, #4]
    type_ = type;
 801bc20:	68fb      	ldr	r3, [r7, #12]
 801bc22:	330c      	adds	r3, #12
 801bc24:	68b9      	ldr	r1, [r7, #8]
 801bc26:	4618      	mov	r0, r3
 801bc28:	f7ef f90d 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
    value_.constObjectPointerValue_ = objectPtr;
 801bc2c:	68fb      	ldr	r3, [r7, #12]
 801bc2e:	687a      	ldr	r2, [r7, #4]
 801bc30:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801bc32:	4b11      	ldr	r3, [pc, #68]	; (801bc78 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801bc34:	681b      	ldr	r3, [r3, #0]
 801bc36:	2b00      	cmp	r3, #0
 801bc38:	d019      	beq.n	801bc6e <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801bc3a:	4b0f      	ldr	r3, [pc, #60]	; (801bc78 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801bc3c:	681a      	ldr	r2, [r3, #0]
 801bc3e:	4b0e      	ldr	r3, [pc, #56]	; (801bc78 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801bc40:	681b      	ldr	r3, [r3, #0]
 801bc42:	681b      	ldr	r3, [r3, #0]
 801bc44:	3314      	adds	r3, #20
 801bc46:	681b      	ldr	r3, [r3, #0]
 801bc48:	68b9      	ldr	r1, [r7, #8]
 801bc4a:	4610      	mov	r0, r2
 801bc4c:	4798      	blx	r3
 801bc4e:	4602      	mov	r2, r0
 801bc50:	68fb      	ldr	r3, [r7, #12]
 801bc52:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801bc54:	4b08      	ldr	r3, [pc, #32]	; (801bc78 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801bc56:	681a      	ldr	r2, [r3, #0]
 801bc58:	4b07      	ldr	r3, [pc, #28]	; (801bc78 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801bc5a:	681b      	ldr	r3, [r3, #0]
 801bc5c:	681b      	ldr	r3, [r3, #0]
 801bc5e:	3318      	adds	r3, #24
 801bc60:	681b      	ldr	r3, [r3, #0]
 801bc62:	68b9      	ldr	r1, [r7, #8]
 801bc64:	4610      	mov	r0, r2
 801bc66:	4798      	blx	r3
 801bc68:	4602      	mov	r2, r0
 801bc6a:	68fb      	ldr	r3, [r7, #12]
 801bc6c:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801bc6e:	bf00      	nop
 801bc70:	3710      	adds	r7, #16
 801bc72:	46bd      	mov	sp, r7
 801bc74:	bd80      	pop	{r7, pc}
 801bc76:	bf00      	nop
 801bc78:	20000d60 	.word	0x20000d60

0801bc7c <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv>:

void MockNamedValue::setObjectPointer(const SimpleString& type, void* objectPtr)
{
 801bc7c:	b580      	push	{r7, lr}
 801bc7e:	b084      	sub	sp, #16
 801bc80:	af00      	add	r7, sp, #0
 801bc82:	60f8      	str	r0, [r7, #12]
 801bc84:	60b9      	str	r1, [r7, #8]
 801bc86:	607a      	str	r2, [r7, #4]
    type_ = type;
 801bc88:	68fb      	ldr	r3, [r7, #12]
 801bc8a:	330c      	adds	r3, #12
 801bc8c:	68b9      	ldr	r1, [r7, #8]
 801bc8e:	4618      	mov	r0, r3
 801bc90:	f7ef f8d9 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
    value_.objectPointerValue_ = objectPtr;
 801bc94:	68fb      	ldr	r3, [r7, #12]
 801bc96:	687a      	ldr	r2, [r7, #4]
 801bc98:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801bc9a:	4b11      	ldr	r3, [pc, #68]	; (801bce0 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801bc9c:	681b      	ldr	r3, [r3, #0]
 801bc9e:	2b00      	cmp	r3, #0
 801bca0:	d019      	beq.n	801bcd6 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801bca2:	4b0f      	ldr	r3, [pc, #60]	; (801bce0 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801bca4:	681a      	ldr	r2, [r3, #0]
 801bca6:	4b0e      	ldr	r3, [pc, #56]	; (801bce0 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801bca8:	681b      	ldr	r3, [r3, #0]
 801bcaa:	681b      	ldr	r3, [r3, #0]
 801bcac:	3314      	adds	r3, #20
 801bcae:	681b      	ldr	r3, [r3, #0]
 801bcb0:	68b9      	ldr	r1, [r7, #8]
 801bcb2:	4610      	mov	r0, r2
 801bcb4:	4798      	blx	r3
 801bcb6:	4602      	mov	r2, r0
 801bcb8:	68fb      	ldr	r3, [r7, #12]
 801bcba:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801bcbc:	4b08      	ldr	r3, [pc, #32]	; (801bce0 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801bcbe:	681a      	ldr	r2, [r3, #0]
 801bcc0:	4b07      	ldr	r3, [pc, #28]	; (801bce0 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801bcc2:	681b      	ldr	r3, [r3, #0]
 801bcc4:	681b      	ldr	r3, [r3, #0]
 801bcc6:	3318      	adds	r3, #24
 801bcc8:	681b      	ldr	r3, [r3, #0]
 801bcca:	68b9      	ldr	r1, [r7, #8]
 801bccc:	4610      	mov	r0, r2
 801bcce:	4798      	blx	r3
 801bcd0:	4602      	mov	r2, r0
 801bcd2:	68fb      	ldr	r3, [r7, #12]
 801bcd4:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801bcd6:	bf00      	nop
 801bcd8:	3710      	adds	r7, #16
 801bcda:	46bd      	mov	sp, r7
 801bcdc:	bd80      	pop	{r7, pc}
 801bcde:	bf00      	nop
 801bce0:	20000d60 	.word	0x20000d60

0801bce4 <_ZN14MockNamedValue7setSizeEj>:

void MockNamedValue::setSize(size_t size)
{
 801bce4:	b480      	push	{r7}
 801bce6:	b083      	sub	sp, #12
 801bce8:	af00      	add	r7, sp, #0
 801bcea:	6078      	str	r0, [r7, #4]
 801bcec:	6039      	str	r1, [r7, #0]
    size_ = size;
 801bcee:	687b      	ldr	r3, [r7, #4]
 801bcf0:	683a      	ldr	r2, [r7, #0]
 801bcf2:	629a      	str	r2, [r3, #40]	; 0x28
}
 801bcf4:	bf00      	nop
 801bcf6:	370c      	adds	r7, #12
 801bcf8:	46bd      	mov	sp, r7
 801bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcfe:	4770      	bx	lr

0801bd00 <_ZN14MockNamedValue7setNameEPKc>:

void MockNamedValue::setName(const char* name)
{
 801bd00:	b590      	push	{r4, r7, lr}
 801bd02:	b085      	sub	sp, #20
 801bd04:	af00      	add	r7, sp, #0
 801bd06:	6078      	str	r0, [r7, #4]
 801bd08:	6039      	str	r1, [r7, #0]
    name_ = name;
 801bd0a:	687b      	ldr	r3, [r7, #4]
 801bd0c:	1d1c      	adds	r4, r3, #4
 801bd0e:	f107 0308 	add.w	r3, r7, #8
 801bd12:	6839      	ldr	r1, [r7, #0]
 801bd14:	4618      	mov	r0, r3
 801bd16:	f7ef f82a 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801bd1a:	f107 0308 	add.w	r3, r7, #8
 801bd1e:	4619      	mov	r1, r3
 801bd20:	4620      	mov	r0, r4
 801bd22:	f7ef f890 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
 801bd26:	f107 0308 	add.w	r3, r7, #8
 801bd2a:	4618      	mov	r0, r3
 801bd2c:	f7ef fbd7 	bl	800b4de <_ZN12SimpleStringD1Ev>
}
 801bd30:	bf00      	nop
 801bd32:	3714      	adds	r7, #20
 801bd34:	46bd      	mov	sp, r7
 801bd36:	bd90      	pop	{r4, r7, pc}

0801bd38 <_ZNK14MockNamedValue7getNameEv>:

SimpleString MockNamedValue::getName() const
{
 801bd38:	b580      	push	{r7, lr}
 801bd3a:	b082      	sub	sp, #8
 801bd3c:	af00      	add	r7, sp, #0
 801bd3e:	6078      	str	r0, [r7, #4]
 801bd40:	6039      	str	r1, [r7, #0]
    return name_;
 801bd42:	683b      	ldr	r3, [r7, #0]
 801bd44:	3304      	adds	r3, #4
 801bd46:	4619      	mov	r1, r3
 801bd48:	6878      	ldr	r0, [r7, #4]
 801bd4a:	f7ef f864 	bl	800ae16 <_ZN12SimpleStringC1ERKS_>
}
 801bd4e:	6878      	ldr	r0, [r7, #4]
 801bd50:	3708      	adds	r7, #8
 801bd52:	46bd      	mov	sp, r7
 801bd54:	bd80      	pop	{r7, pc}

0801bd56 <_ZNK14MockNamedValue7getTypeEv>:

SimpleString MockNamedValue::getType() const
{
 801bd56:	b580      	push	{r7, lr}
 801bd58:	b082      	sub	sp, #8
 801bd5a:	af00      	add	r7, sp, #0
 801bd5c:	6078      	str	r0, [r7, #4]
 801bd5e:	6039      	str	r1, [r7, #0]
    return type_;
 801bd60:	683b      	ldr	r3, [r7, #0]
 801bd62:	330c      	adds	r3, #12
 801bd64:	4619      	mov	r1, r3
 801bd66:	6878      	ldr	r0, [r7, #4]
 801bd68:	f7ef f855 	bl	800ae16 <_ZN12SimpleStringC1ERKS_>
}
 801bd6c:	6878      	ldr	r0, [r7, #4]
 801bd6e:	3708      	adds	r7, #8
 801bd70:	46bd      	mov	sp, r7
 801bd72:	bd80      	pop	{r7, pc}

0801bd74 <_ZNK14MockNamedValue12getBoolValueEv>:

bool MockNamedValue::getBoolValue() const
{
 801bd74:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bd76:	b087      	sub	sp, #28
 801bd78:	af04      	add	r7, sp, #16
 801bd7a:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("bool", type_.asCharString());
 801bd7c:	f7f6 fbda 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 801bd80:	4604      	mov	r4, r0
 801bd82:	6823      	ldr	r3, [r4, #0]
 801bd84:	3324      	adds	r3, #36	; 0x24
 801bd86:	681d      	ldr	r5, [r3, #0]
 801bd88:	687b      	ldr	r3, [r7, #4]
 801bd8a:	330c      	adds	r3, #12
 801bd8c:	4618      	mov	r0, r3
 801bd8e:	f7ef fb79 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 801bd92:	4606      	mov	r6, r0
 801bd94:	f7f6 fbde 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801bd98:	4603      	mov	r3, r0
 801bd9a:	9302      	str	r3, [sp, #8]
 801bd9c:	23c8      	movs	r3, #200	; 0xc8
 801bd9e:	9301      	str	r3, [sp, #4]
 801bda0:	4b06      	ldr	r3, [pc, #24]	; (801bdbc <_ZNK14MockNamedValue12getBoolValueEv+0x48>)
 801bda2:	9300      	str	r3, [sp, #0]
 801bda4:	2300      	movs	r3, #0
 801bda6:	4632      	mov	r2, r6
 801bda8:	4905      	ldr	r1, [pc, #20]	; (801bdc0 <_ZNK14MockNamedValue12getBoolValueEv+0x4c>)
 801bdaa:	4620      	mov	r0, r4
 801bdac:	47a8      	blx	r5
    return value_.boolValue_;
 801bdae:	687b      	ldr	r3, [r7, #4]
 801bdb0:	7e1b      	ldrb	r3, [r3, #24]
}
 801bdb2:	4618      	mov	r0, r3
 801bdb4:	370c      	adds	r7, #12
 801bdb6:	46bd      	mov	sp, r7
 801bdb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bdba:	bf00      	nop
 801bdbc:	080244dc 	.word	0x080244dc
 801bdc0:	080244a4 	.word	0x080244a4

0801bdc4 <_ZNK14MockNamedValue19getUnsignedIntValueEv>:

unsigned int MockNamedValue::getUnsignedIntValue() const
{
 801bdc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bdc6:	b089      	sub	sp, #36	; 0x24
 801bdc8:	af04      	add	r7, sp, #16
 801bdca:	6078      	str	r0, [r7, #4]
    if(type_ == "int" && value_.intValue_ >= 0)
 801bdcc:	687b      	ldr	r3, [r7, #4]
 801bdce:	f103 040c 	add.w	r4, r3, #12
 801bdd2:	f107 0308 	add.w	r3, r7, #8
 801bdd6:	4920      	ldr	r1, [pc, #128]	; (801be58 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x94>)
 801bdd8:	4618      	mov	r0, r3
 801bdda:	f7ee ffc8 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801bdde:	2501      	movs	r5, #1
 801bde0:	f107 0308 	add.w	r3, r7, #8
 801bde4:	4619      	mov	r1, r3
 801bde6:	4620      	mov	r0, r4
 801bde8:	f7ef fb85 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801bdec:	4603      	mov	r3, r0
 801bdee:	2b00      	cmp	r3, #0
 801bdf0:	d005      	beq.n	801bdfe <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801bdf2:	687b      	ldr	r3, [r7, #4]
 801bdf4:	699b      	ldr	r3, [r3, #24]
 801bdf6:	2b00      	cmp	r3, #0
 801bdf8:	db01      	blt.n	801bdfe <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801bdfa:	2401      	movs	r4, #1
 801bdfc:	e000      	b.n	801be00 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3c>
 801bdfe:	2400      	movs	r4, #0
 801be00:	2d00      	cmp	r5, #0
 801be02:	d004      	beq.n	801be0e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x4a>
 801be04:	f107 0308 	add.w	r3, r7, #8
 801be08:	4618      	mov	r0, r3
 801be0a:	f7ef fb68 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801be0e:	2c00      	cmp	r4, #0
 801be10:	d002      	beq.n	801be18 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x54>
        return (unsigned int)value_.intValue_;
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	699b      	ldr	r3, [r3, #24]
 801be16:	e01a      	b.n	801be4e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x8a>
    else
    {
        STRCMP_EQUAL("unsigned int", type_.asCharString());
 801be18:	f7f6 fb8c 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 801be1c:	4604      	mov	r4, r0
 801be1e:	6823      	ldr	r3, [r4, #0]
 801be20:	3324      	adds	r3, #36	; 0x24
 801be22:	681d      	ldr	r5, [r3, #0]
 801be24:	687b      	ldr	r3, [r7, #4]
 801be26:	330c      	adds	r3, #12
 801be28:	4618      	mov	r0, r3
 801be2a:	f7ef fb2b 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 801be2e:	4606      	mov	r6, r0
 801be30:	f7f6 fb90 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801be34:	4603      	mov	r3, r0
 801be36:	9302      	str	r3, [sp, #8]
 801be38:	23d2      	movs	r3, #210	; 0xd2
 801be3a:	9301      	str	r3, [sp, #4]
 801be3c:	4b07      	ldr	r3, [pc, #28]	; (801be5c <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x98>)
 801be3e:	9300      	str	r3, [sp, #0]
 801be40:	2300      	movs	r3, #0
 801be42:	4632      	mov	r2, r6
 801be44:	4906      	ldr	r1, [pc, #24]	; (801be60 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x9c>)
 801be46:	4620      	mov	r0, r4
 801be48:	47a8      	blx	r5
        return value_.unsignedIntValue_;
 801be4a:	687b      	ldr	r3, [r7, #4]
 801be4c:	699b      	ldr	r3, [r3, #24]
    }
}
 801be4e:	4618      	mov	r0, r3
 801be50:	3714      	adds	r7, #20
 801be52:	46bd      	mov	sp, r7
 801be54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801be56:	bf00      	nop
 801be58:	080244a0 	.word	0x080244a0
 801be5c:	080244dc 	.word	0x080244dc
 801be60:	080244ac 	.word	0x080244ac

0801be64 <_ZNK14MockNamedValue11getIntValueEv>:

int MockNamedValue::getIntValue() const
{
 801be64:	b5f0      	push	{r4, r5, r6, r7, lr}
 801be66:	b087      	sub	sp, #28
 801be68:	af04      	add	r7, sp, #16
 801be6a:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("int", type_.asCharString());
 801be6c:	f7f6 fb62 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 801be70:	4604      	mov	r4, r0
 801be72:	6823      	ldr	r3, [r4, #0]
 801be74:	3324      	adds	r3, #36	; 0x24
 801be76:	681d      	ldr	r5, [r3, #0]
 801be78:	687b      	ldr	r3, [r7, #4]
 801be7a:	330c      	adds	r3, #12
 801be7c:	4618      	mov	r0, r3
 801be7e:	f7ef fb01 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 801be82:	4606      	mov	r6, r0
 801be84:	f7f6 fb66 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801be88:	4603      	mov	r3, r0
 801be8a:	9302      	str	r3, [sp, #8]
 801be8c:	23d9      	movs	r3, #217	; 0xd9
 801be8e:	9301      	str	r3, [sp, #4]
 801be90:	4b06      	ldr	r3, [pc, #24]	; (801beac <_ZNK14MockNamedValue11getIntValueEv+0x48>)
 801be92:	9300      	str	r3, [sp, #0]
 801be94:	2300      	movs	r3, #0
 801be96:	4632      	mov	r2, r6
 801be98:	4905      	ldr	r1, [pc, #20]	; (801beb0 <_ZNK14MockNamedValue11getIntValueEv+0x4c>)
 801be9a:	4620      	mov	r0, r4
 801be9c:	47a8      	blx	r5
    return value_.intValue_;
 801be9e:	687b      	ldr	r3, [r7, #4]
 801bea0:	699b      	ldr	r3, [r3, #24]
}
 801bea2:	4618      	mov	r0, r3
 801bea4:	370c      	adds	r7, #12
 801bea6:	46bd      	mov	sp, r7
 801bea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801beaa:	bf00      	nop
 801beac:	080244dc 	.word	0x080244dc
 801beb0:	080244a0 	.word	0x080244a0

0801beb4 <_ZNK14MockNamedValue15getLongIntValueEv>:

long int MockNamedValue::getLongIntValue() const
{
 801beb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801beb6:	b08b      	sub	sp, #44	; 0x2c
 801beb8:	af04      	add	r7, sp, #16
 801beba:	6078      	str	r0, [r7, #4]
    if(type_ == "int")
 801bebc:	687b      	ldr	r3, [r7, #4]
 801bebe:	f103 040c 	add.w	r4, r3, #12
 801bec2:	f107 0308 	add.w	r3, r7, #8
 801bec6:	4928      	ldr	r1, [pc, #160]	; (801bf68 <_ZNK14MockNamedValue15getLongIntValueEv+0xb4>)
 801bec8:	4618      	mov	r0, r3
 801beca:	f7ee ff50 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801bece:	f107 0308 	add.w	r3, r7, #8
 801bed2:	4619      	mov	r1, r3
 801bed4:	4620      	mov	r0, r4
 801bed6:	f7ef fb0e 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801beda:	4603      	mov	r3, r0
 801bedc:	461c      	mov	r4, r3
 801bede:	f107 0308 	add.w	r3, r7, #8
 801bee2:	4618      	mov	r0, r3
 801bee4:	f7ef fafb 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801bee8:	2c00      	cmp	r4, #0
 801beea:	d002      	beq.n	801bef2 <_ZNK14MockNamedValue15getLongIntValueEv+0x3e>
        return value_.intValue_;
 801beec:	687b      	ldr	r3, [r7, #4]
 801beee:	699b      	ldr	r3, [r3, #24]
 801bef0:	e035      	b.n	801bf5e <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else if(type_ == "unsigned int")
 801bef2:	687b      	ldr	r3, [r7, #4]
 801bef4:	f103 040c 	add.w	r4, r3, #12
 801bef8:	f107 0310 	add.w	r3, r7, #16
 801befc:	491b      	ldr	r1, [pc, #108]	; (801bf6c <_ZNK14MockNamedValue15getLongIntValueEv+0xb8>)
 801befe:	4618      	mov	r0, r3
 801bf00:	f7ee ff35 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801bf04:	f107 0310 	add.w	r3, r7, #16
 801bf08:	4619      	mov	r1, r3
 801bf0a:	4620      	mov	r0, r4
 801bf0c:	f7ef faf3 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801bf10:	4603      	mov	r3, r0
 801bf12:	461c      	mov	r4, r3
 801bf14:	f107 0310 	add.w	r3, r7, #16
 801bf18:	4618      	mov	r0, r3
 801bf1a:	f7ef fae0 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801bf1e:	2c00      	cmp	r4, #0
 801bf20:	d002      	beq.n	801bf28 <_ZNK14MockNamedValue15getLongIntValueEv+0x74>
        return (long int)value_.unsignedIntValue_;
 801bf22:	687b      	ldr	r3, [r7, #4]
 801bf24:	699b      	ldr	r3, [r3, #24]
 801bf26:	e01a      	b.n	801bf5e <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else
    {
        STRCMP_EQUAL("long int", type_.asCharString());
 801bf28:	f7f6 fb04 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 801bf2c:	4604      	mov	r4, r0
 801bf2e:	6823      	ldr	r3, [r4, #0]
 801bf30:	3324      	adds	r3, #36	; 0x24
 801bf32:	681d      	ldr	r5, [r3, #0]
 801bf34:	687b      	ldr	r3, [r7, #4]
 801bf36:	330c      	adds	r3, #12
 801bf38:	4618      	mov	r0, r3
 801bf3a:	f7ef faa3 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 801bf3e:	4606      	mov	r6, r0
 801bf40:	f7f6 fb08 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801bf44:	4603      	mov	r3, r0
 801bf46:	9302      	str	r3, [sp, #8]
 801bf48:	23e5      	movs	r3, #229	; 0xe5
 801bf4a:	9301      	str	r3, [sp, #4]
 801bf4c:	4b08      	ldr	r3, [pc, #32]	; (801bf70 <_ZNK14MockNamedValue15getLongIntValueEv+0xbc>)
 801bf4e:	9300      	str	r3, [sp, #0]
 801bf50:	2300      	movs	r3, #0
 801bf52:	4632      	mov	r2, r6
 801bf54:	4907      	ldr	r1, [pc, #28]	; (801bf74 <_ZNK14MockNamedValue15getLongIntValueEv+0xc0>)
 801bf56:	4620      	mov	r0, r4
 801bf58:	47a8      	blx	r5
        return value_.longIntValue_;
 801bf5a:	687b      	ldr	r3, [r7, #4]
 801bf5c:	699b      	ldr	r3, [r3, #24]
    }
}
 801bf5e:	4618      	mov	r0, r3
 801bf60:	371c      	adds	r7, #28
 801bf62:	46bd      	mov	sp, r7
 801bf64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bf66:	bf00      	nop
 801bf68:	080244a0 	.word	0x080244a0
 801bf6c:	080244ac 	.word	0x080244ac
 801bf70:	080244dc 	.word	0x080244dc
 801bf74:	080244bc 	.word	0x080244bc

0801bf78 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>:

unsigned long int MockNamedValue::getUnsignedLongIntValue() const
{
 801bf78:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bf7a:	b08d      	sub	sp, #52	; 0x34
 801bf7c:	af04      	add	r7, sp, #16
 801bf7e:	6078      	str	r0, [r7, #4]
    if(type_ == "unsigned int")
 801bf80:	687b      	ldr	r3, [r7, #4]
 801bf82:	f103 040c 	add.w	r4, r3, #12
 801bf86:	f107 0308 	add.w	r3, r7, #8
 801bf8a:	4940      	ldr	r1, [pc, #256]	; (801c08c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x114>)
 801bf8c:	4618      	mov	r0, r3
 801bf8e:	f7ee feee 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801bf92:	f107 0308 	add.w	r3, r7, #8
 801bf96:	4619      	mov	r1, r3
 801bf98:	4620      	mov	r0, r4
 801bf9a:	f7ef faac 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801bf9e:	4603      	mov	r3, r0
 801bfa0:	461c      	mov	r4, r3
 801bfa2:	f107 0308 	add.w	r3, r7, #8
 801bfa6:	4618      	mov	r0, r3
 801bfa8:	f7ef fa99 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801bfac:	2c00      	cmp	r4, #0
 801bfae:	d002      	beq.n	801bfb6 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x3e>
        return value_.unsignedIntValue_;
 801bfb0:	687b      	ldr	r3, [r7, #4]
 801bfb2:	699b      	ldr	r3, [r3, #24]
 801bfb4:	e066      	b.n	801c084 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "int" && value_.intValue_ >= 0)
 801bfb6:	687b      	ldr	r3, [r7, #4]
 801bfb8:	f103 040c 	add.w	r4, r3, #12
 801bfbc:	f107 0310 	add.w	r3, r7, #16
 801bfc0:	4933      	ldr	r1, [pc, #204]	; (801c090 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x118>)
 801bfc2:	4618      	mov	r0, r3
 801bfc4:	f7ee fed3 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801bfc8:	2501      	movs	r5, #1
 801bfca:	f107 0310 	add.w	r3, r7, #16
 801bfce:	4619      	mov	r1, r3
 801bfd0:	4620      	mov	r0, r4
 801bfd2:	f7ef fa90 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801bfd6:	4603      	mov	r3, r0
 801bfd8:	2b00      	cmp	r3, #0
 801bfda:	d005      	beq.n	801bfe8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801bfdc:	687b      	ldr	r3, [r7, #4]
 801bfde:	699b      	ldr	r3, [r3, #24]
 801bfe0:	2b00      	cmp	r3, #0
 801bfe2:	db01      	blt.n	801bfe8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801bfe4:	2401      	movs	r4, #1
 801bfe6:	e000      	b.n	801bfea <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x72>
 801bfe8:	2400      	movs	r4, #0
 801bfea:	2d00      	cmp	r5, #0
 801bfec:	d004      	beq.n	801bff8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x80>
 801bfee:	f107 0310 	add.w	r3, r7, #16
 801bff2:	4618      	mov	r0, r3
 801bff4:	f7ef fa73 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801bff8:	2c00      	cmp	r4, #0
 801bffa:	d002      	beq.n	801c002 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x8a>
        return (unsigned long int)value_.intValue_;
 801bffc:	687b      	ldr	r3, [r7, #4]
 801bffe:	699b      	ldr	r3, [r3, #24]
 801c000:	e040      	b.n	801c084 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "long int" && value_.longIntValue_ >= 0)
 801c002:	687b      	ldr	r3, [r7, #4]
 801c004:	f103 040c 	add.w	r4, r3, #12
 801c008:	f107 0318 	add.w	r3, r7, #24
 801c00c:	4921      	ldr	r1, [pc, #132]	; (801c094 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x11c>)
 801c00e:	4618      	mov	r0, r3
 801c010:	f7ee fead 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801c014:	2501      	movs	r5, #1
 801c016:	f107 0318 	add.w	r3, r7, #24
 801c01a:	4619      	mov	r1, r3
 801c01c:	4620      	mov	r0, r4
 801c01e:	f7ef fa6a 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801c022:	4603      	mov	r3, r0
 801c024:	2b00      	cmp	r3, #0
 801c026:	d005      	beq.n	801c034 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801c028:	687b      	ldr	r3, [r7, #4]
 801c02a:	699b      	ldr	r3, [r3, #24]
 801c02c:	2b00      	cmp	r3, #0
 801c02e:	db01      	blt.n	801c034 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801c030:	2401      	movs	r4, #1
 801c032:	e000      	b.n	801c036 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbe>
 801c034:	2400      	movs	r4, #0
 801c036:	2d00      	cmp	r5, #0
 801c038:	d004      	beq.n	801c044 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xcc>
 801c03a:	f107 0318 	add.w	r3, r7, #24
 801c03e:	4618      	mov	r0, r3
 801c040:	f7ef fa4d 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801c044:	2c00      	cmp	r4, #0
 801c046:	d002      	beq.n	801c04e <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xd6>
        return (unsigned long int)value_.longIntValue_;
 801c048:	687b      	ldr	r3, [r7, #4]
 801c04a:	699b      	ldr	r3, [r3, #24]
 801c04c:	e01a      	b.n	801c084 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else
    {
        STRCMP_EQUAL("unsigned long int", type_.asCharString());
 801c04e:	f7f6 fa71 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 801c052:	4604      	mov	r4, r0
 801c054:	6823      	ldr	r3, [r4, #0]
 801c056:	3324      	adds	r3, #36	; 0x24
 801c058:	681d      	ldr	r5, [r3, #0]
 801c05a:	687b      	ldr	r3, [r7, #4]
 801c05c:	330c      	adds	r3, #12
 801c05e:	4618      	mov	r0, r3
 801c060:	f7ef fa10 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 801c064:	4606      	mov	r6, r0
 801c066:	f7f6 fa75 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c06a:	4603      	mov	r3, r0
 801c06c:	9302      	str	r3, [sp, #8]
 801c06e:	23f4      	movs	r3, #244	; 0xf4
 801c070:	9301      	str	r3, [sp, #4]
 801c072:	4b09      	ldr	r3, [pc, #36]	; (801c098 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x120>)
 801c074:	9300      	str	r3, [sp, #0]
 801c076:	2300      	movs	r3, #0
 801c078:	4632      	mov	r2, r6
 801c07a:	4908      	ldr	r1, [pc, #32]	; (801c09c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x124>)
 801c07c:	4620      	mov	r0, r4
 801c07e:	47a8      	blx	r5
        return value_.unsignedLongIntValue_;
 801c080:	687b      	ldr	r3, [r7, #4]
 801c082:	699b      	ldr	r3, [r3, #24]
    }
}
 801c084:	4618      	mov	r0, r3
 801c086:	3724      	adds	r7, #36	; 0x24
 801c088:	46bd      	mov	sp, r7
 801c08a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c08c:	080244ac 	.word	0x080244ac
 801c090:	080244a0 	.word	0x080244a0
 801c094:	080244bc 	.word	0x080244bc
 801c098:	080244dc 	.word	0x080244dc
 801c09c:	080244c8 	.word	0x080244c8

0801c0a0 <_ZNK14MockNamedValue19getLongLongIntValueEv>:
}

#else

cpputest_longlong MockNamedValue::getLongLongIntValue() const
{
 801c0a0:	b5b0      	push	{r4, r5, r7, lr}
 801c0a2:	b084      	sub	sp, #16
 801c0a4:	af02      	add	r7, sp, #8
 801c0a6:	6078      	str	r0, [r7, #4]
 801c0a8:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801c0aa:	f7f6 fa43 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 801c0ae:	4604      	mov	r4, r0
 801c0b0:	6823      	ldr	r3, [r4, #0]
 801c0b2:	3368      	adds	r3, #104	; 0x68
 801c0b4:	681d      	ldr	r5, [r3, #0]
 801c0b6:	f7f6 fa4d 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c0ba:	4603      	mov	r3, r0
 801c0bc:	9300      	str	r3, [sp, #0]
 801c0be:	f240 1323 	movw	r3, #291	; 0x123
 801c0c2:	4a06      	ldr	r2, [pc, #24]	; (801c0dc <_ZNK14MockNamedValue19getLongLongIntValueEv+0x3c>)
 801c0c4:	4906      	ldr	r1, [pc, #24]	; (801c0e0 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x40>)
 801c0c6:	4620      	mov	r0, r4
 801c0c8:	47a8      	blx	r5
    return cpputest_longlong(0);
 801c0ca:	2100      	movs	r1, #0
 801c0cc:	6878      	ldr	r0, [r7, #4]
 801c0ce:	f7ec fe85 	bl	8008ddc <_ZN17cpputest_longlongC1Ei>
}
 801c0d2:	6878      	ldr	r0, [r7, #4]
 801c0d4:	3708      	adds	r7, #8
 801c0d6:	46bd      	mov	sp, r7
 801c0d8:	bdb0      	pop	{r4, r5, r7, pc}
 801c0da:	bf00      	nop
 801c0dc:	080244dc 	.word	0x080244dc
 801c0e0:	080244f8 	.word	0x080244f8

0801c0e4 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockNamedValue::getUnsignedLongLongIntValue() const
{
 801c0e4:	b5b0      	push	{r4, r5, r7, lr}
 801c0e6:	b084      	sub	sp, #16
 801c0e8:	af02      	add	r7, sp, #8
 801c0ea:	6078      	str	r0, [r7, #4]
 801c0ec:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801c0ee:	f7f6 fa21 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 801c0f2:	4604      	mov	r4, r0
 801c0f4:	6823      	ldr	r3, [r4, #0]
 801c0f6:	3368      	adds	r3, #104	; 0x68
 801c0f8:	681d      	ldr	r5, [r3, #0]
 801c0fa:	f7f6 fa2b 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c0fe:	4603      	mov	r3, r0
 801c100:	9300      	str	r3, [sp, #0]
 801c102:	f240 1329 	movw	r3, #297	; 0x129
 801c106:	4a06      	ldr	r2, [pc, #24]	; (801c120 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x3c>)
 801c108:	4906      	ldr	r1, [pc, #24]	; (801c124 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x40>)
 801c10a:	4620      	mov	r0, r4
 801c10c:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801c10e:	2100      	movs	r1, #0
 801c110:	6878      	ldr	r0, [r7, #4]
 801c112:	f7ec fe6f 	bl	8008df4 <_ZN18cpputest_ulonglongC1Ei>
}
 801c116:	6878      	ldr	r0, [r7, #4]
 801c118:	3708      	adds	r7, #8
 801c11a:	46bd      	mov	sp, r7
 801c11c:	bdb0      	pop	{r4, r5, r7, pc}
 801c11e:	bf00      	nop
 801c120:	080244dc 	.word	0x080244dc
 801c124:	08024518 	.word	0x08024518

0801c128 <_ZNK14MockNamedValue14getDoubleValueEv>:

#endif

double MockNamedValue::getDoubleValue() const
{
 801c128:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c12a:	b087      	sub	sp, #28
 801c12c:	af04      	add	r7, sp, #16
 801c12e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801c130:	f7f6 fa00 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 801c134:	4604      	mov	r4, r0
 801c136:	6823      	ldr	r3, [r4, #0]
 801c138:	3324      	adds	r3, #36	; 0x24
 801c13a:	681d      	ldr	r5, [r3, #0]
 801c13c:	687b      	ldr	r3, [r7, #4]
 801c13e:	330c      	adds	r3, #12
 801c140:	4618      	mov	r0, r3
 801c142:	f7ef f99f 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 801c146:	4606      	mov	r6, r0
 801c148:	f7f6 fa04 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c14c:	4603      	mov	r3, r0
 801c14e:	9302      	str	r3, [sp, #8]
 801c150:	f240 1331 	movw	r3, #305	; 0x131
 801c154:	9301      	str	r3, [sp, #4]
 801c156:	4b09      	ldr	r3, [pc, #36]	; (801c17c <_ZNK14MockNamedValue14getDoubleValueEv+0x54>)
 801c158:	9300      	str	r3, [sp, #0]
 801c15a:	2300      	movs	r3, #0
 801c15c:	4632      	mov	r2, r6
 801c15e:	4908      	ldr	r1, [pc, #32]	; (801c180 <_ZNK14MockNamedValue14getDoubleValueEv+0x58>)
 801c160:	4620      	mov	r0, r4
 801c162:	47a8      	blx	r5
    return value_.doubleValue_.value;
 801c164:	687b      	ldr	r3, [r7, #4]
 801c166:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801c16a:	ec43 2b17 	vmov	d7, r2, r3
}
 801c16e:	eeb0 0a47 	vmov.f32	s0, s14
 801c172:	eef0 0a67 	vmov.f32	s1, s15
 801c176:	370c      	adds	r7, #12
 801c178:	46bd      	mov	sp, r7
 801c17a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c17c:	080244dc 	.word	0x080244dc
 801c180:	08024544 	.word	0x08024544

0801c184 <_ZNK14MockNamedValue18getDoubleToleranceEv>:

double MockNamedValue::getDoubleTolerance() const
{
 801c184:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c186:	b087      	sub	sp, #28
 801c188:	af04      	add	r7, sp, #16
 801c18a:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801c18c:	f7f6 f9d2 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 801c190:	4604      	mov	r4, r0
 801c192:	6823      	ldr	r3, [r4, #0]
 801c194:	3324      	adds	r3, #36	; 0x24
 801c196:	681d      	ldr	r5, [r3, #0]
 801c198:	687b      	ldr	r3, [r7, #4]
 801c19a:	330c      	adds	r3, #12
 801c19c:	4618      	mov	r0, r3
 801c19e:	f7ef f971 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 801c1a2:	4606      	mov	r6, r0
 801c1a4:	f7f6 f9d6 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c1a8:	4603      	mov	r3, r0
 801c1aa:	9302      	str	r3, [sp, #8]
 801c1ac:	f240 1337 	movw	r3, #311	; 0x137
 801c1b0:	9301      	str	r3, [sp, #4]
 801c1b2:	4b09      	ldr	r3, [pc, #36]	; (801c1d8 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x54>)
 801c1b4:	9300      	str	r3, [sp, #0]
 801c1b6:	2300      	movs	r3, #0
 801c1b8:	4632      	mov	r2, r6
 801c1ba:	4908      	ldr	r1, [pc, #32]	; (801c1dc <_ZNK14MockNamedValue18getDoubleToleranceEv+0x58>)
 801c1bc:	4620      	mov	r0, r4
 801c1be:	47a8      	blx	r5
    return value_.doubleValue_.tolerance;
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801c1c6:	ec43 2b17 	vmov	d7, r2, r3
}
 801c1ca:	eeb0 0a47 	vmov.f32	s0, s14
 801c1ce:	eef0 0a67 	vmov.f32	s1, s15
 801c1d2:	370c      	adds	r7, #12
 801c1d4:	46bd      	mov	sp, r7
 801c1d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c1d8:	080244dc 	.word	0x080244dc
 801c1dc:	08024544 	.word	0x08024544

0801c1e0 <_ZNK14MockNamedValue14getStringValueEv>:

const char* MockNamedValue::getStringValue() const
{
 801c1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c1e2:	b087      	sub	sp, #28
 801c1e4:	af04      	add	r7, sp, #16
 801c1e6:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const char*", type_.asCharString());
 801c1e8:	f7f6 f9a4 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 801c1ec:	4604      	mov	r4, r0
 801c1ee:	6823      	ldr	r3, [r4, #0]
 801c1f0:	3324      	adds	r3, #36	; 0x24
 801c1f2:	681d      	ldr	r5, [r3, #0]
 801c1f4:	687b      	ldr	r3, [r7, #4]
 801c1f6:	330c      	adds	r3, #12
 801c1f8:	4618      	mov	r0, r3
 801c1fa:	f7ef f943 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 801c1fe:	4606      	mov	r6, r0
 801c200:	f7f6 f9a8 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c204:	4603      	mov	r3, r0
 801c206:	9302      	str	r3, [sp, #8]
 801c208:	f240 133d 	movw	r3, #317	; 0x13d
 801c20c:	9301      	str	r3, [sp, #4]
 801c20e:	4b06      	ldr	r3, [pc, #24]	; (801c228 <_ZNK14MockNamedValue14getStringValueEv+0x48>)
 801c210:	9300      	str	r3, [sp, #0]
 801c212:	2300      	movs	r3, #0
 801c214:	4632      	mov	r2, r6
 801c216:	4905      	ldr	r1, [pc, #20]	; (801c22c <_ZNK14MockNamedValue14getStringValueEv+0x4c>)
 801c218:	4620      	mov	r0, r4
 801c21a:	47a8      	blx	r5
    return value_.stringValue_;
 801c21c:	687b      	ldr	r3, [r7, #4]
 801c21e:	699b      	ldr	r3, [r3, #24]
}
 801c220:	4618      	mov	r0, r3
 801c222:	370c      	adds	r7, #12
 801c224:	46bd      	mov	sp, r7
 801c226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c228:	080244dc 	.word	0x080244dc
 801c22c:	0802456c 	.word	0x0802456c

0801c230 <_ZNK14MockNamedValue15getPointerValueEv>:

void* MockNamedValue::getPointerValue() const
{
 801c230:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c232:	b087      	sub	sp, #28
 801c234:	af04      	add	r7, sp, #16
 801c236:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void*", type_.asCharString());
 801c238:	f7f6 f97c 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 801c23c:	4604      	mov	r4, r0
 801c23e:	6823      	ldr	r3, [r4, #0]
 801c240:	3324      	adds	r3, #36	; 0x24
 801c242:	681d      	ldr	r5, [r3, #0]
 801c244:	687b      	ldr	r3, [r7, #4]
 801c246:	330c      	adds	r3, #12
 801c248:	4618      	mov	r0, r3
 801c24a:	f7ef f91b 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 801c24e:	4606      	mov	r6, r0
 801c250:	f7f6 f980 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c254:	4603      	mov	r3, r0
 801c256:	9302      	str	r3, [sp, #8]
 801c258:	f240 1343 	movw	r3, #323	; 0x143
 801c25c:	9301      	str	r3, [sp, #4]
 801c25e:	4b06      	ldr	r3, [pc, #24]	; (801c278 <_ZNK14MockNamedValue15getPointerValueEv+0x48>)
 801c260:	9300      	str	r3, [sp, #0]
 801c262:	2300      	movs	r3, #0
 801c264:	4632      	mov	r2, r6
 801c266:	4905      	ldr	r1, [pc, #20]	; (801c27c <_ZNK14MockNamedValue15getPointerValueEv+0x4c>)
 801c268:	4620      	mov	r0, r4
 801c26a:	47a8      	blx	r5
    return value_.pointerValue_;
 801c26c:	687b      	ldr	r3, [r7, #4]
 801c26e:	699b      	ldr	r3, [r3, #24]
}
 801c270:	4618      	mov	r0, r3
 801c272:	370c      	adds	r7, #12
 801c274:	46bd      	mov	sp, r7
 801c276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c278:	080244dc 	.word	0x080244dc
 801c27c:	0802454c 	.word	0x0802454c

0801c280 <_ZNK14MockNamedValue20getConstPointerValueEv>:

const void* MockNamedValue::getConstPointerValue() const
{
 801c280:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c282:	b087      	sub	sp, #28
 801c284:	af04      	add	r7, sp, #16
 801c286:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const void*", type_.asCharString());
 801c288:	f7f6 f954 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 801c28c:	4604      	mov	r4, r0
 801c28e:	6823      	ldr	r3, [r4, #0]
 801c290:	3324      	adds	r3, #36	; 0x24
 801c292:	681d      	ldr	r5, [r3, #0]
 801c294:	687b      	ldr	r3, [r7, #4]
 801c296:	330c      	adds	r3, #12
 801c298:	4618      	mov	r0, r3
 801c29a:	f7ef f8f3 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 801c29e:	4606      	mov	r6, r0
 801c2a0:	f7f6 f958 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c2a4:	4603      	mov	r3, r0
 801c2a6:	9302      	str	r3, [sp, #8]
 801c2a8:	f240 1349 	movw	r3, #329	; 0x149
 801c2ac:	9301      	str	r3, [sp, #4]
 801c2ae:	4b06      	ldr	r3, [pc, #24]	; (801c2c8 <_ZNK14MockNamedValue20getConstPointerValueEv+0x48>)
 801c2b0:	9300      	str	r3, [sp, #0]
 801c2b2:	2300      	movs	r3, #0
 801c2b4:	4632      	mov	r2, r6
 801c2b6:	4905      	ldr	r1, [pc, #20]	; (801c2cc <_ZNK14MockNamedValue20getConstPointerValueEv+0x4c>)
 801c2b8:	4620      	mov	r0, r4
 801c2ba:	47a8      	blx	r5
    return value_.pointerValue_;
 801c2bc:	687b      	ldr	r3, [r7, #4]
 801c2be:	699b      	ldr	r3, [r3, #24]
}
 801c2c0:	4618      	mov	r0, r3
 801c2c2:	370c      	adds	r7, #12
 801c2c4:	46bd      	mov	sp, r7
 801c2c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c2c8:	080244dc 	.word	0x080244dc
 801c2cc:	08024554 	.word	0x08024554

0801c2d0 <_ZNK14MockNamedValue23getFunctionPointerValueEv>:

void (*MockNamedValue::getFunctionPointerValue() const)()
{
 801c2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c2d2:	b087      	sub	sp, #28
 801c2d4:	af04      	add	r7, sp, #16
 801c2d6:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void (*)()", type_.asCharString());
 801c2d8:	f7f6 f92c 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 801c2dc:	4604      	mov	r4, r0
 801c2de:	6823      	ldr	r3, [r4, #0]
 801c2e0:	3324      	adds	r3, #36	; 0x24
 801c2e2:	681d      	ldr	r5, [r3, #0]
 801c2e4:	687b      	ldr	r3, [r7, #4]
 801c2e6:	330c      	adds	r3, #12
 801c2e8:	4618      	mov	r0, r3
 801c2ea:	f7ef f8cb 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 801c2ee:	4606      	mov	r6, r0
 801c2f0:	f7f6 f930 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c2f4:	4603      	mov	r3, r0
 801c2f6:	9302      	str	r3, [sp, #8]
 801c2f8:	f240 134f 	movw	r3, #335	; 0x14f
 801c2fc:	9301      	str	r3, [sp, #4]
 801c2fe:	4b06      	ldr	r3, [pc, #24]	; (801c318 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x48>)
 801c300:	9300      	str	r3, [sp, #0]
 801c302:	2300      	movs	r3, #0
 801c304:	4632      	mov	r2, r6
 801c306:	4905      	ldr	r1, [pc, #20]	; (801c31c <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x4c>)
 801c308:	4620      	mov	r0, r4
 801c30a:	47a8      	blx	r5
    return value_.functionPointerValue_;
 801c30c:	687b      	ldr	r3, [r7, #4]
 801c30e:	699b      	ldr	r3, [r3, #24]
}
 801c310:	4618      	mov	r0, r3
 801c312:	370c      	adds	r7, #12
 801c314:	46bd      	mov	sp, r7
 801c316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c318:	080244dc 	.word	0x080244dc
 801c31c:	08024560 	.word	0x08024560

0801c320 <_ZNK14MockNamedValue15getMemoryBufferEv>:

const unsigned char* MockNamedValue::getMemoryBuffer() const
{
 801c320:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c322:	b087      	sub	sp, #28
 801c324:	af04      	add	r7, sp, #16
 801c326:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const unsigned char*", type_.asCharString());
 801c328:	f7f6 f904 	bl	8012534 <_ZN10UtestShell10getCurrentEv>
 801c32c:	4604      	mov	r4, r0
 801c32e:	6823      	ldr	r3, [r4, #0]
 801c330:	3324      	adds	r3, #36	; 0x24
 801c332:	681d      	ldr	r5, [r3, #0]
 801c334:	687b      	ldr	r3, [r7, #4]
 801c336:	330c      	adds	r3, #12
 801c338:	4618      	mov	r0, r3
 801c33a:	f7ef f8a3 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 801c33e:	4606      	mov	r6, r0
 801c340:	f7f6 f908 	bl	8012554 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c344:	4603      	mov	r3, r0
 801c346:	9302      	str	r3, [sp, #8]
 801c348:	f240 1355 	movw	r3, #341	; 0x155
 801c34c:	9301      	str	r3, [sp, #4]
 801c34e:	4b06      	ldr	r3, [pc, #24]	; (801c368 <_ZNK14MockNamedValue15getMemoryBufferEv+0x48>)
 801c350:	9300      	str	r3, [sp, #0]
 801c352:	2300      	movs	r3, #0
 801c354:	4632      	mov	r2, r6
 801c356:	4905      	ldr	r1, [pc, #20]	; (801c36c <_ZNK14MockNamedValue15getMemoryBufferEv+0x4c>)
 801c358:	4620      	mov	r0, r4
 801c35a:	47a8      	blx	r5
    return value_.memoryBufferValue_;
 801c35c:	687b      	ldr	r3, [r7, #4]
 801c35e:	699b      	ldr	r3, [r3, #24]
}
 801c360:	4618      	mov	r0, r3
 801c362:	370c      	adds	r7, #12
 801c364:	46bd      	mov	sp, r7
 801c366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c368:	080244dc 	.word	0x080244dc
 801c36c:	08024578 	.word	0x08024578

0801c370 <_ZNK14MockNamedValue21getConstObjectPointerEv>:

const void* MockNamedValue::getConstObjectPointer() const
{
 801c370:	b480      	push	{r7}
 801c372:	b083      	sub	sp, #12
 801c374:	af00      	add	r7, sp, #0
 801c376:	6078      	str	r0, [r7, #4]
    return value_.constObjectPointerValue_;
 801c378:	687b      	ldr	r3, [r7, #4]
 801c37a:	699b      	ldr	r3, [r3, #24]
}
 801c37c:	4618      	mov	r0, r3
 801c37e:	370c      	adds	r7, #12
 801c380:	46bd      	mov	sp, r7
 801c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c386:	4770      	bx	lr

0801c388 <_ZNK14MockNamedValue16getObjectPointerEv>:

void* MockNamedValue::getObjectPointer() const
{
 801c388:	b480      	push	{r7}
 801c38a:	b083      	sub	sp, #12
 801c38c:	af00      	add	r7, sp, #0
 801c38e:	6078      	str	r0, [r7, #4]
    return value_.objectPointerValue_;
 801c390:	687b      	ldr	r3, [r7, #4]
 801c392:	699b      	ldr	r3, [r3, #24]
}
 801c394:	4618      	mov	r0, r3
 801c396:	370c      	adds	r7, #12
 801c398:	46bd      	mov	sp, r7
 801c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c39e:	4770      	bx	lr

0801c3a0 <_ZNK14MockNamedValue7getSizeEv>:

size_t MockNamedValue::getSize() const
{
 801c3a0:	b480      	push	{r7}
 801c3a2:	b083      	sub	sp, #12
 801c3a4:	af00      	add	r7, sp, #0
 801c3a6:	6078      	str	r0, [r7, #4]
    return size_;
 801c3a8:	687b      	ldr	r3, [r7, #4]
 801c3aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801c3ac:	4618      	mov	r0, r3
 801c3ae:	370c      	adds	r7, #12
 801c3b0:	46bd      	mov	sp, r7
 801c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3b6:	4770      	bx	lr

0801c3b8 <_ZNK14MockNamedValue13getComparatorEv>:

MockNamedValueComparator* MockNamedValue::getComparator() const
{
 801c3b8:	b480      	push	{r7}
 801c3ba:	b083      	sub	sp, #12
 801c3bc:	af00      	add	r7, sp, #0
 801c3be:	6078      	str	r0, [r7, #4]
    return comparator_;
 801c3c0:	687b      	ldr	r3, [r7, #4]
 801c3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 801c3c4:	4618      	mov	r0, r3
 801c3c6:	370c      	adds	r7, #12
 801c3c8:	46bd      	mov	sp, r7
 801c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3ce:	4770      	bx	lr

0801c3d0 <_ZNK14MockNamedValue9getCopierEv>:

MockNamedValueCopier* MockNamedValue::getCopier() const
{
 801c3d0:	b480      	push	{r7}
 801c3d2:	b083      	sub	sp, #12
 801c3d4:	af00      	add	r7, sp, #0
 801c3d6:	6078      	str	r0, [r7, #4]
    return copier_;
 801c3d8:	687b      	ldr	r3, [r7, #4]
 801c3da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 801c3dc:	4618      	mov	r0, r3
 801c3de:	370c      	adds	r7, #12
 801c3e0:	46bd      	mov	sp, r7
 801c3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3e6:	4770      	bx	lr

0801c3e8 <_ZNK14MockNamedValue6equalsERKS_>:

bool MockNamedValue::equals(const MockNamedValue& p) const
{
 801c3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c3ea:	b0cd      	sub	sp, #308	; 0x134
 801c3ec:	af00      	add	r7, sp, #0
 801c3ee:	1d3b      	adds	r3, r7, #4
 801c3f0:	6018      	str	r0, [r3, #0]
 801c3f2:	463b      	mov	r3, r7
 801c3f4:	6019      	str	r1, [r3, #0]
    if((type_ == "long int") && (p.type_ == "int"))
 801c3f6:	2500      	movs	r5, #0
 801c3f8:	1d3b      	adds	r3, r7, #4
 801c3fa:	681b      	ldr	r3, [r3, #0]
 801c3fc:	f103 040c 	add.w	r4, r3, #12
 801c400:	f107 0308 	add.w	r3, r7, #8
 801c404:	49bb      	ldr	r1, [pc, #748]	; (801c6f4 <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801c406:	4618      	mov	r0, r3
 801c408:	f7ee fcb1 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801c40c:	2601      	movs	r6, #1
 801c40e:	f107 0308 	add.w	r3, r7, #8
 801c412:	4619      	mov	r1, r3
 801c414:	4620      	mov	r0, r4
 801c416:	f7ef f86e 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801c41a:	4603      	mov	r3, r0
 801c41c:	2b00      	cmp	r3, #0
 801c41e:	d015      	beq.n	801c44c <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801c420:	463b      	mov	r3, r7
 801c422:	681b      	ldr	r3, [r3, #0]
 801c424:	f103 040c 	add.w	r4, r3, #12
 801c428:	f107 0310 	add.w	r3, r7, #16
 801c42c:	49b2      	ldr	r1, [pc, #712]	; (801c6f8 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801c42e:	4618      	mov	r0, r3
 801c430:	f7ee fc9d 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801c434:	2501      	movs	r5, #1
 801c436:	f107 0310 	add.w	r3, r7, #16
 801c43a:	4619      	mov	r1, r3
 801c43c:	4620      	mov	r0, r4
 801c43e:	f7ef f85a 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801c442:	4603      	mov	r3, r0
 801c444:	2b00      	cmp	r3, #0
 801c446:	d001      	beq.n	801c44c <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801c448:	2401      	movs	r4, #1
 801c44a:	e000      	b.n	801c44e <_ZNK14MockNamedValue6equalsERKS_+0x66>
 801c44c:	2400      	movs	r4, #0
 801c44e:	2d00      	cmp	r5, #0
 801c450:	d004      	beq.n	801c45c <_ZNK14MockNamedValue6equalsERKS_+0x74>
 801c452:	f107 0310 	add.w	r3, r7, #16
 801c456:	4618      	mov	r0, r3
 801c458:	f7ef f841 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801c45c:	2e00      	cmp	r6, #0
 801c45e:	d004      	beq.n	801c46a <_ZNK14MockNamedValue6equalsERKS_+0x82>
 801c460:	f107 0308 	add.w	r3, r7, #8
 801c464:	4618      	mov	r0, r3
 801c466:	f7ef f83a 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801c46a:	2c00      	cmp	r4, #0
 801c46c:	d00c      	beq.n	801c488 <_ZNK14MockNamedValue6equalsERKS_+0xa0>
        return value_.longIntValue_ == p.value_.intValue_;
 801c46e:	1d3b      	adds	r3, r7, #4
 801c470:	681b      	ldr	r3, [r3, #0]
 801c472:	699a      	ldr	r2, [r3, #24]
 801c474:	463b      	mov	r3, r7
 801c476:	681b      	ldr	r3, [r3, #0]
 801c478:	699b      	ldr	r3, [r3, #24]
 801c47a:	429a      	cmp	r2, r3
 801c47c:	bf0c      	ite	eq
 801c47e:	2301      	moveq	r3, #1
 801c480:	2300      	movne	r3, #0
 801c482:	b2dc      	uxtb	r4, r3
 801c484:	f000 bd60 	b.w	801cf48 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "long int"))
 801c488:	2500      	movs	r5, #0
 801c48a:	1d3b      	adds	r3, r7, #4
 801c48c:	681b      	ldr	r3, [r3, #0]
 801c48e:	f103 040c 	add.w	r4, r3, #12
 801c492:	f107 0318 	add.w	r3, r7, #24
 801c496:	4998      	ldr	r1, [pc, #608]	; (801c6f8 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801c498:	4618      	mov	r0, r3
 801c49a:	f7ee fc68 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801c49e:	2601      	movs	r6, #1
 801c4a0:	f107 0318 	add.w	r3, r7, #24
 801c4a4:	4619      	mov	r1, r3
 801c4a6:	4620      	mov	r0, r4
 801c4a8:	f7ef f825 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801c4ac:	4603      	mov	r3, r0
 801c4ae:	2b00      	cmp	r3, #0
 801c4b0:	d015      	beq.n	801c4de <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801c4b2:	463b      	mov	r3, r7
 801c4b4:	681b      	ldr	r3, [r3, #0]
 801c4b6:	f103 040c 	add.w	r4, r3, #12
 801c4ba:	f107 0320 	add.w	r3, r7, #32
 801c4be:	498d      	ldr	r1, [pc, #564]	; (801c6f4 <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801c4c0:	4618      	mov	r0, r3
 801c4c2:	f7ee fc54 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801c4c6:	2501      	movs	r5, #1
 801c4c8:	f107 0320 	add.w	r3, r7, #32
 801c4cc:	4619      	mov	r1, r3
 801c4ce:	4620      	mov	r0, r4
 801c4d0:	f7ef f811 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801c4d4:	4603      	mov	r3, r0
 801c4d6:	2b00      	cmp	r3, #0
 801c4d8:	d001      	beq.n	801c4de <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801c4da:	2401      	movs	r4, #1
 801c4dc:	e000      	b.n	801c4e0 <_ZNK14MockNamedValue6equalsERKS_+0xf8>
 801c4de:	2400      	movs	r4, #0
 801c4e0:	2d00      	cmp	r5, #0
 801c4e2:	d004      	beq.n	801c4ee <_ZNK14MockNamedValue6equalsERKS_+0x106>
 801c4e4:	f107 0320 	add.w	r3, r7, #32
 801c4e8:	4618      	mov	r0, r3
 801c4ea:	f7ee fff8 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801c4ee:	2e00      	cmp	r6, #0
 801c4f0:	d004      	beq.n	801c4fc <_ZNK14MockNamedValue6equalsERKS_+0x114>
 801c4f2:	f107 0318 	add.w	r3, r7, #24
 801c4f6:	4618      	mov	r0, r3
 801c4f8:	f7ee fff1 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801c4fc:	2c00      	cmp	r4, #0
 801c4fe:	d00c      	beq.n	801c51a <_ZNK14MockNamedValue6equalsERKS_+0x132>
        return value_.intValue_ == p.value_.longIntValue_;
 801c500:	1d3b      	adds	r3, r7, #4
 801c502:	681b      	ldr	r3, [r3, #0]
 801c504:	699a      	ldr	r2, [r3, #24]
 801c506:	463b      	mov	r3, r7
 801c508:	681b      	ldr	r3, [r3, #0]
 801c50a:	699b      	ldr	r3, [r3, #24]
 801c50c:	429a      	cmp	r2, r3
 801c50e:	bf0c      	ite	eq
 801c510:	2301      	moveq	r3, #1
 801c512:	2300      	movne	r3, #0
 801c514:	b2dc      	uxtb	r4, r3
 801c516:	f000 bd17 	b.w	801cf48 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "int"))
 801c51a:	2500      	movs	r5, #0
 801c51c:	1d3b      	adds	r3, r7, #4
 801c51e:	681b      	ldr	r3, [r3, #0]
 801c520:	f103 040c 	add.w	r4, r3, #12
 801c524:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c528:	4974      	ldr	r1, [pc, #464]	; (801c6fc <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801c52a:	4618      	mov	r0, r3
 801c52c:	f7ee fc1f 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801c530:	2601      	movs	r6, #1
 801c532:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c536:	4619      	mov	r1, r3
 801c538:	4620      	mov	r0, r4
 801c53a:	f7ee ffdc 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801c53e:	4603      	mov	r3, r0
 801c540:	2b00      	cmp	r3, #0
 801c542:	d015      	beq.n	801c570 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801c544:	463b      	mov	r3, r7
 801c546:	681b      	ldr	r3, [r3, #0]
 801c548:	f103 040c 	add.w	r4, r3, #12
 801c54c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c550:	4969      	ldr	r1, [pc, #420]	; (801c6f8 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801c552:	4618      	mov	r0, r3
 801c554:	f7ee fc0b 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801c558:	2501      	movs	r5, #1
 801c55a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c55e:	4619      	mov	r1, r3
 801c560:	4620      	mov	r0, r4
 801c562:	f7ee ffc8 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801c566:	4603      	mov	r3, r0
 801c568:	2b00      	cmp	r3, #0
 801c56a:	d001      	beq.n	801c570 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801c56c:	2401      	movs	r4, #1
 801c56e:	e000      	b.n	801c572 <_ZNK14MockNamedValue6equalsERKS_+0x18a>
 801c570:	2400      	movs	r4, #0
 801c572:	2d00      	cmp	r5, #0
 801c574:	d004      	beq.n	801c580 <_ZNK14MockNamedValue6equalsERKS_+0x198>
 801c576:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c57a:	4618      	mov	r0, r3
 801c57c:	f7ee ffaf 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801c580:	2e00      	cmp	r6, #0
 801c582:	d004      	beq.n	801c58e <_ZNK14MockNamedValue6equalsERKS_+0x1a6>
 801c584:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c588:	4618      	mov	r0, r3
 801c58a:	f7ee ffa8 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801c58e:	2c00      	cmp	r4, #0
 801c590:	d012      	beq.n	801c5b8 <_ZNK14MockNamedValue6equalsERKS_+0x1d0>
        return (p.value_.intValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned int)p.value_.intValue_);
 801c592:	463b      	mov	r3, r7
 801c594:	681b      	ldr	r3, [r3, #0]
 801c596:	699b      	ldr	r3, [r3, #24]
 801c598:	2b00      	cmp	r3, #0
 801c59a:	db0a      	blt.n	801c5b2 <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801c59c:	1d3b      	adds	r3, r7, #4
 801c59e:	681b      	ldr	r3, [r3, #0]
 801c5a0:	699b      	ldr	r3, [r3, #24]
 801c5a2:	463a      	mov	r2, r7
 801c5a4:	6812      	ldr	r2, [r2, #0]
 801c5a6:	6992      	ldr	r2, [r2, #24]
 801c5a8:	4293      	cmp	r3, r2
 801c5aa:	d102      	bne.n	801c5b2 <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801c5ac:	2401      	movs	r4, #1
 801c5ae:	f000 bccb 	b.w	801cf48 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801c5b2:	2400      	movs	r4, #0
 801c5b4:	f000 bcc8 	b.w	801cf48 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "unsigned int"))
 801c5b8:	2500      	movs	r5, #0
 801c5ba:	1d3b      	adds	r3, r7, #4
 801c5bc:	681b      	ldr	r3, [r3, #0]
 801c5be:	f103 040c 	add.w	r4, r3, #12
 801c5c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c5c6:	494c      	ldr	r1, [pc, #304]	; (801c6f8 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801c5c8:	4618      	mov	r0, r3
 801c5ca:	f7ee fbd0 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801c5ce:	2601      	movs	r6, #1
 801c5d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c5d4:	4619      	mov	r1, r3
 801c5d6:	4620      	mov	r0, r4
 801c5d8:	f7ee ff8d 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801c5dc:	4603      	mov	r3, r0
 801c5de:	2b00      	cmp	r3, #0
 801c5e0:	d015      	beq.n	801c60e <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801c5e2:	463b      	mov	r3, r7
 801c5e4:	681b      	ldr	r3, [r3, #0]
 801c5e6:	f103 040c 	add.w	r4, r3, #12
 801c5ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c5ee:	4943      	ldr	r1, [pc, #268]	; (801c6fc <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801c5f0:	4618      	mov	r0, r3
 801c5f2:	f7ee fbbc 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801c5f6:	2501      	movs	r5, #1
 801c5f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c5fc:	4619      	mov	r1, r3
 801c5fe:	4620      	mov	r0, r4
 801c600:	f7ee ff79 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801c604:	4603      	mov	r3, r0
 801c606:	2b00      	cmp	r3, #0
 801c608:	d001      	beq.n	801c60e <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801c60a:	2401      	movs	r4, #1
 801c60c:	e000      	b.n	801c610 <_ZNK14MockNamedValue6equalsERKS_+0x228>
 801c60e:	2400      	movs	r4, #0
 801c610:	2d00      	cmp	r5, #0
 801c612:	d004      	beq.n	801c61e <_ZNK14MockNamedValue6equalsERKS_+0x236>
 801c614:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c618:	4618      	mov	r0, r3
 801c61a:	f7ee ff60 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801c61e:	2e00      	cmp	r6, #0
 801c620:	d004      	beq.n	801c62c <_ZNK14MockNamedValue6equalsERKS_+0x244>
 801c622:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c626:	4618      	mov	r0, r3
 801c628:	f7ee ff59 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801c62c:	2c00      	cmp	r4, #0
 801c62e:	d012      	beq.n	801c656 <_ZNK14MockNamedValue6equalsERKS_+0x26e>
        return (value_.intValue_ >= 0) && ((unsigned int)value_.intValue_ == p.value_.unsignedIntValue_);
 801c630:	1d3b      	adds	r3, r7, #4
 801c632:	681b      	ldr	r3, [r3, #0]
 801c634:	699b      	ldr	r3, [r3, #24]
 801c636:	2b00      	cmp	r3, #0
 801c638:	db0a      	blt.n	801c650 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801c63a:	1d3b      	adds	r3, r7, #4
 801c63c:	681b      	ldr	r3, [r3, #0]
 801c63e:	699b      	ldr	r3, [r3, #24]
 801c640:	463a      	mov	r2, r7
 801c642:	6812      	ldr	r2, [r2, #0]
 801c644:	6992      	ldr	r2, [r2, #24]
 801c646:	4293      	cmp	r3, r2
 801c648:	d102      	bne.n	801c650 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801c64a:	2401      	movs	r4, #1
 801c64c:	f000 bc7c 	b.w	801cf48 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801c650:	2400      	movs	r4, #0
 801c652:	f000 bc79 	b.w	801cf48 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "int"))
 801c656:	2500      	movs	r5, #0
 801c658:	1d3b      	adds	r3, r7, #4
 801c65a:	681b      	ldr	r3, [r3, #0]
 801c65c:	f103 040c 	add.w	r4, r3, #12
 801c660:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c664:	4926      	ldr	r1, [pc, #152]	; (801c700 <_ZNK14MockNamedValue6equalsERKS_+0x318>)
 801c666:	4618      	mov	r0, r3
 801c668:	f7ee fb81 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801c66c:	2601      	movs	r6, #1
 801c66e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c672:	4619      	mov	r1, r3
 801c674:	4620      	mov	r0, r4
 801c676:	f7ee ff3e 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801c67a:	4603      	mov	r3, r0
 801c67c:	2b00      	cmp	r3, #0
 801c67e:	d015      	beq.n	801c6ac <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801c680:	463b      	mov	r3, r7
 801c682:	681b      	ldr	r3, [r3, #0]
 801c684:	f103 040c 	add.w	r4, r3, #12
 801c688:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c68c:	491a      	ldr	r1, [pc, #104]	; (801c6f8 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801c68e:	4618      	mov	r0, r3
 801c690:	f7ee fb6d 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801c694:	2501      	movs	r5, #1
 801c696:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c69a:	4619      	mov	r1, r3
 801c69c:	4620      	mov	r0, r4
 801c69e:	f7ee ff2a 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801c6a2:	4603      	mov	r3, r0
 801c6a4:	2b00      	cmp	r3, #0
 801c6a6:	d001      	beq.n	801c6ac <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801c6a8:	2401      	movs	r4, #1
 801c6aa:	e000      	b.n	801c6ae <_ZNK14MockNamedValue6equalsERKS_+0x2c6>
 801c6ac:	2400      	movs	r4, #0
 801c6ae:	2d00      	cmp	r5, #0
 801c6b0:	d004      	beq.n	801c6bc <_ZNK14MockNamedValue6equalsERKS_+0x2d4>
 801c6b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c6b6:	4618      	mov	r0, r3
 801c6b8:	f7ee ff11 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801c6bc:	2e00      	cmp	r6, #0
 801c6be:	d004      	beq.n	801c6ca <_ZNK14MockNamedValue6equalsERKS_+0x2e2>
 801c6c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c6c4:	4618      	mov	r0, r3
 801c6c6:	f7ee ff0a 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801c6ca:	2c00      	cmp	r4, #0
 801c6cc:	d01a      	beq.n	801c704 <_ZNK14MockNamedValue6equalsERKS_+0x31c>
        return (p.value_.intValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long)p.value_.intValue_);
 801c6ce:	463b      	mov	r3, r7
 801c6d0:	681b      	ldr	r3, [r3, #0]
 801c6d2:	699b      	ldr	r3, [r3, #24]
 801c6d4:	2b00      	cmp	r3, #0
 801c6d6:	db0a      	blt.n	801c6ee <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801c6d8:	1d3b      	adds	r3, r7, #4
 801c6da:	681b      	ldr	r3, [r3, #0]
 801c6dc:	699b      	ldr	r3, [r3, #24]
 801c6de:	463a      	mov	r2, r7
 801c6e0:	6812      	ldr	r2, [r2, #0]
 801c6e2:	6992      	ldr	r2, [r2, #24]
 801c6e4:	4293      	cmp	r3, r2
 801c6e6:	d102      	bne.n	801c6ee <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801c6e8:	2401      	movs	r4, #1
 801c6ea:	f000 bc2d 	b.w	801cf48 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801c6ee:	2400      	movs	r4, #0
 801c6f0:	f000 bc2a 	b.w	801cf48 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801c6f4:	080244bc 	.word	0x080244bc
 801c6f8:	080244a0 	.word	0x080244a0
 801c6fc:	080244ac 	.word	0x080244ac
 801c700:	080244c8 	.word	0x080244c8
    else if((type_ == "int") && (p.type_ == "unsigned long int"))
 801c704:	2500      	movs	r5, #0
 801c706:	1d3b      	adds	r3, r7, #4
 801c708:	681b      	ldr	r3, [r3, #0]
 801c70a:	f103 040c 	add.w	r4, r3, #12
 801c70e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c712:	49b8      	ldr	r1, [pc, #736]	; (801c9f4 <_ZNK14MockNamedValue6equalsERKS_+0x60c>)
 801c714:	4618      	mov	r0, r3
 801c716:	f7ee fb2a 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801c71a:	2601      	movs	r6, #1
 801c71c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c720:	4619      	mov	r1, r3
 801c722:	4620      	mov	r0, r4
 801c724:	f7ee fee7 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801c728:	4603      	mov	r3, r0
 801c72a:	2b00      	cmp	r3, #0
 801c72c:	d015      	beq.n	801c75a <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801c72e:	463b      	mov	r3, r7
 801c730:	681b      	ldr	r3, [r3, #0]
 801c732:	f103 040c 	add.w	r4, r3, #12
 801c736:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801c73a:	49af      	ldr	r1, [pc, #700]	; (801c9f8 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801c73c:	4618      	mov	r0, r3
 801c73e:	f7ee fb16 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801c742:	2501      	movs	r5, #1
 801c744:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801c748:	4619      	mov	r1, r3
 801c74a:	4620      	mov	r0, r4
 801c74c:	f7ee fed3 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801c750:	4603      	mov	r3, r0
 801c752:	2b00      	cmp	r3, #0
 801c754:	d001      	beq.n	801c75a <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801c756:	2401      	movs	r4, #1
 801c758:	e000      	b.n	801c75c <_ZNK14MockNamedValue6equalsERKS_+0x374>
 801c75a:	2400      	movs	r4, #0
 801c75c:	2d00      	cmp	r5, #0
 801c75e:	d004      	beq.n	801c76a <_ZNK14MockNamedValue6equalsERKS_+0x382>
 801c760:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801c764:	4618      	mov	r0, r3
 801c766:	f7ee feba 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801c76a:	2e00      	cmp	r6, #0
 801c76c:	d004      	beq.n	801c778 <_ZNK14MockNamedValue6equalsERKS_+0x390>
 801c76e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c772:	4618      	mov	r0, r3
 801c774:	f7ee feb3 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801c778:	2c00      	cmp	r4, #0
 801c77a:	d010      	beq.n	801c79e <_ZNK14MockNamedValue6equalsERKS_+0x3b6>
        return (value_.intValue_ >= 0) && ((unsigned long)value_.intValue_ == p.value_.unsignedLongIntValue_);
 801c77c:	1d3b      	adds	r3, r7, #4
 801c77e:	681b      	ldr	r3, [r3, #0]
 801c780:	699b      	ldr	r3, [r3, #24]
 801c782:	2b00      	cmp	r3, #0
 801c784:	db09      	blt.n	801c79a <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801c786:	1d3b      	adds	r3, r7, #4
 801c788:	681b      	ldr	r3, [r3, #0]
 801c78a:	699b      	ldr	r3, [r3, #24]
 801c78c:	463a      	mov	r2, r7
 801c78e:	6812      	ldr	r2, [r2, #0]
 801c790:	6992      	ldr	r2, [r2, #24]
 801c792:	4293      	cmp	r3, r2
 801c794:	d101      	bne.n	801c79a <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801c796:	2401      	movs	r4, #1
 801c798:	e3d6      	b.n	801cf48 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801c79a:	2400      	movs	r4, #0
 801c79c:	e3d4      	b.n	801cf48 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "long int"))
 801c79e:	2500      	movs	r5, #0
 801c7a0:	1d3b      	adds	r3, r7, #4
 801c7a2:	681b      	ldr	r3, [r3, #0]
 801c7a4:	f103 040c 	add.w	r4, r3, #12
 801c7a8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801c7ac:	4993      	ldr	r1, [pc, #588]	; (801c9fc <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801c7ae:	4618      	mov	r0, r3
 801c7b0:	f7ee fadd 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801c7b4:	2601      	movs	r6, #1
 801c7b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801c7ba:	4619      	mov	r1, r3
 801c7bc:	4620      	mov	r0, r4
 801c7be:	f7ee fe9a 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801c7c2:	4603      	mov	r3, r0
 801c7c4:	2b00      	cmp	r3, #0
 801c7c6:	d015      	beq.n	801c7f4 <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801c7c8:	463b      	mov	r3, r7
 801c7ca:	681b      	ldr	r3, [r3, #0]
 801c7cc:	f103 040c 	add.w	r4, r3, #12
 801c7d0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c7d4:	498a      	ldr	r1, [pc, #552]	; (801ca00 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801c7d6:	4618      	mov	r0, r3
 801c7d8:	f7ee fac9 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801c7dc:	2501      	movs	r5, #1
 801c7de:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c7e2:	4619      	mov	r1, r3
 801c7e4:	4620      	mov	r0, r4
 801c7e6:	f7ee fe86 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801c7ea:	4603      	mov	r3, r0
 801c7ec:	2b00      	cmp	r3, #0
 801c7ee:	d001      	beq.n	801c7f4 <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801c7f0:	2401      	movs	r4, #1
 801c7f2:	e000      	b.n	801c7f6 <_ZNK14MockNamedValue6equalsERKS_+0x40e>
 801c7f4:	2400      	movs	r4, #0
 801c7f6:	2d00      	cmp	r5, #0
 801c7f8:	d004      	beq.n	801c804 <_ZNK14MockNamedValue6equalsERKS_+0x41c>
 801c7fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c7fe:	4618      	mov	r0, r3
 801c800:	f7ee fe6d 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801c804:	2e00      	cmp	r6, #0
 801c806:	d004      	beq.n	801c812 <_ZNK14MockNamedValue6equalsERKS_+0x42a>
 801c808:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801c80c:	4618      	mov	r0, r3
 801c80e:	f7ee fe66 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801c812:	2c00      	cmp	r4, #0
 801c814:	d010      	beq.n	801c838 <_ZNK14MockNamedValue6equalsERKS_+0x450>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned long)p.value_.longIntValue_);
 801c816:	463b      	mov	r3, r7
 801c818:	681b      	ldr	r3, [r3, #0]
 801c81a:	699b      	ldr	r3, [r3, #24]
 801c81c:	2b00      	cmp	r3, #0
 801c81e:	db09      	blt.n	801c834 <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801c820:	1d3b      	adds	r3, r7, #4
 801c822:	681b      	ldr	r3, [r3, #0]
 801c824:	699b      	ldr	r3, [r3, #24]
 801c826:	463a      	mov	r2, r7
 801c828:	6812      	ldr	r2, [r2, #0]
 801c82a:	6992      	ldr	r2, [r2, #24]
 801c82c:	4293      	cmp	r3, r2
 801c82e:	d101      	bne.n	801c834 <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801c830:	2401      	movs	r4, #1
 801c832:	e389      	b.n	801cf48 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801c834:	2400      	movs	r4, #0
 801c836:	e387      	b.n	801cf48 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "long int") && (p.type_ == "unsigned int"))
 801c838:	2500      	movs	r5, #0
 801c83a:	1d3b      	adds	r3, r7, #4
 801c83c:	681b      	ldr	r3, [r3, #0]
 801c83e:	f103 040c 	add.w	r4, r3, #12
 801c842:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801c846:	496e      	ldr	r1, [pc, #440]	; (801ca00 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801c848:	4618      	mov	r0, r3
 801c84a:	f7ee fa90 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801c84e:	2601      	movs	r6, #1
 801c850:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801c854:	4619      	mov	r1, r3
 801c856:	4620      	mov	r0, r4
 801c858:	f7ee fe4d 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801c85c:	4603      	mov	r3, r0
 801c85e:	2b00      	cmp	r3, #0
 801c860:	d015      	beq.n	801c88e <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801c862:	463b      	mov	r3, r7
 801c864:	681b      	ldr	r3, [r3, #0]
 801c866:	f103 040c 	add.w	r4, r3, #12
 801c86a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c86e:	4963      	ldr	r1, [pc, #396]	; (801c9fc <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801c870:	4618      	mov	r0, r3
 801c872:	f7ee fa7c 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801c876:	2501      	movs	r5, #1
 801c878:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c87c:	4619      	mov	r1, r3
 801c87e:	4620      	mov	r0, r4
 801c880:	f7ee fe39 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801c884:	4603      	mov	r3, r0
 801c886:	2b00      	cmp	r3, #0
 801c888:	d001      	beq.n	801c88e <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801c88a:	2401      	movs	r4, #1
 801c88c:	e000      	b.n	801c890 <_ZNK14MockNamedValue6equalsERKS_+0x4a8>
 801c88e:	2400      	movs	r4, #0
 801c890:	2d00      	cmp	r5, #0
 801c892:	d004      	beq.n	801c89e <_ZNK14MockNamedValue6equalsERKS_+0x4b6>
 801c894:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c898:	4618      	mov	r0, r3
 801c89a:	f7ee fe20 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801c89e:	2e00      	cmp	r6, #0
 801c8a0:	d004      	beq.n	801c8ac <_ZNK14MockNamedValue6equalsERKS_+0x4c4>
 801c8a2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801c8a6:	4618      	mov	r0, r3
 801c8a8:	f7ee fe19 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801c8ac:	2c00      	cmp	r4, #0
 801c8ae:	d010      	beq.n	801c8d2 <_ZNK14MockNamedValue6equalsERKS_+0x4ea>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedIntValue_);
 801c8b0:	1d3b      	adds	r3, r7, #4
 801c8b2:	681b      	ldr	r3, [r3, #0]
 801c8b4:	699b      	ldr	r3, [r3, #24]
 801c8b6:	2b00      	cmp	r3, #0
 801c8b8:	db09      	blt.n	801c8ce <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801c8ba:	1d3b      	adds	r3, r7, #4
 801c8bc:	681b      	ldr	r3, [r3, #0]
 801c8be:	699b      	ldr	r3, [r3, #24]
 801c8c0:	463a      	mov	r2, r7
 801c8c2:	6812      	ldr	r2, [r2, #0]
 801c8c4:	6992      	ldr	r2, [r2, #24]
 801c8c6:	4293      	cmp	r3, r2
 801c8c8:	d101      	bne.n	801c8ce <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801c8ca:	2401      	movs	r4, #1
 801c8cc:	e33c      	b.n	801cf48 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801c8ce:	2400      	movs	r4, #0
 801c8d0:	e33a      	b.n	801cf48 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "unsigned long int"))
 801c8d2:	2500      	movs	r5, #0
 801c8d4:	1d3b      	adds	r3, r7, #4
 801c8d6:	681b      	ldr	r3, [r3, #0]
 801c8d8:	f103 040c 	add.w	r4, r3, #12
 801c8dc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801c8e0:	4946      	ldr	r1, [pc, #280]	; (801c9fc <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801c8e2:	4618      	mov	r0, r3
 801c8e4:	f7ee fa43 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801c8e8:	2601      	movs	r6, #1
 801c8ea:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801c8ee:	4619      	mov	r1, r3
 801c8f0:	4620      	mov	r0, r4
 801c8f2:	f7ee fe00 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801c8f6:	4603      	mov	r3, r0
 801c8f8:	2b00      	cmp	r3, #0
 801c8fa:	d015      	beq.n	801c928 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801c8fc:	463b      	mov	r3, r7
 801c8fe:	681b      	ldr	r3, [r3, #0]
 801c900:	f103 040c 	add.w	r4, r3, #12
 801c904:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801c908:	493b      	ldr	r1, [pc, #236]	; (801c9f8 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801c90a:	4618      	mov	r0, r3
 801c90c:	f7ee fa2f 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801c910:	2501      	movs	r5, #1
 801c912:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801c916:	4619      	mov	r1, r3
 801c918:	4620      	mov	r0, r4
 801c91a:	f7ee fdec 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801c91e:	4603      	mov	r3, r0
 801c920:	2b00      	cmp	r3, #0
 801c922:	d001      	beq.n	801c928 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801c924:	2401      	movs	r4, #1
 801c926:	e000      	b.n	801c92a <_ZNK14MockNamedValue6equalsERKS_+0x542>
 801c928:	2400      	movs	r4, #0
 801c92a:	2d00      	cmp	r5, #0
 801c92c:	d004      	beq.n	801c938 <_ZNK14MockNamedValue6equalsERKS_+0x550>
 801c92e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801c932:	4618      	mov	r0, r3
 801c934:	f7ee fdd3 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801c938:	2e00      	cmp	r6, #0
 801c93a:	d004      	beq.n	801c946 <_ZNK14MockNamedValue6equalsERKS_+0x55e>
 801c93c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801c940:	4618      	mov	r0, r3
 801c942:	f7ee fdcc 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801c946:	2c00      	cmp	r4, #0
 801c948:	d00b      	beq.n	801c962 <_ZNK14MockNamedValue6equalsERKS_+0x57a>
        return value_.unsignedIntValue_ == p.value_.unsignedLongIntValue_;
 801c94a:	1d3b      	adds	r3, r7, #4
 801c94c:	681b      	ldr	r3, [r3, #0]
 801c94e:	699a      	ldr	r2, [r3, #24]
 801c950:	463b      	mov	r3, r7
 801c952:	681b      	ldr	r3, [r3, #0]
 801c954:	699b      	ldr	r3, [r3, #24]
 801c956:	429a      	cmp	r2, r3
 801c958:	bf0c      	ite	eq
 801c95a:	2301      	moveq	r3, #1
 801c95c:	2300      	movne	r3, #0
 801c95e:	b2dc      	uxtb	r4, r3
 801c960:	e2f2      	b.n	801cf48 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "unsigned int"))
 801c962:	2500      	movs	r5, #0
 801c964:	1d3b      	adds	r3, r7, #4
 801c966:	681b      	ldr	r3, [r3, #0]
 801c968:	f103 040c 	add.w	r4, r3, #12
 801c96c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c970:	4921      	ldr	r1, [pc, #132]	; (801c9f8 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801c972:	4618      	mov	r0, r3
 801c974:	f7ee f9fb 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801c978:	2601      	movs	r6, #1
 801c97a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c97e:	4619      	mov	r1, r3
 801c980:	4620      	mov	r0, r4
 801c982:	f7ee fdb8 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801c986:	4603      	mov	r3, r0
 801c988:	2b00      	cmp	r3, #0
 801c98a:	d015      	beq.n	801c9b8 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801c98c:	463b      	mov	r3, r7
 801c98e:	681b      	ldr	r3, [r3, #0]
 801c990:	f103 040c 	add.w	r4, r3, #12
 801c994:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801c998:	4918      	ldr	r1, [pc, #96]	; (801c9fc <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801c99a:	4618      	mov	r0, r3
 801c99c:	f7ee f9e7 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801c9a0:	2501      	movs	r5, #1
 801c9a2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801c9a6:	4619      	mov	r1, r3
 801c9a8:	4620      	mov	r0, r4
 801c9aa:	f7ee fda4 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801c9ae:	4603      	mov	r3, r0
 801c9b0:	2b00      	cmp	r3, #0
 801c9b2:	d001      	beq.n	801c9b8 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801c9b4:	2401      	movs	r4, #1
 801c9b6:	e000      	b.n	801c9ba <_ZNK14MockNamedValue6equalsERKS_+0x5d2>
 801c9b8:	2400      	movs	r4, #0
 801c9ba:	2d00      	cmp	r5, #0
 801c9bc:	d004      	beq.n	801c9c8 <_ZNK14MockNamedValue6equalsERKS_+0x5e0>
 801c9be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801c9c2:	4618      	mov	r0, r3
 801c9c4:	f7ee fd8b 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801c9c8:	2e00      	cmp	r6, #0
 801c9ca:	d004      	beq.n	801c9d6 <_ZNK14MockNamedValue6equalsERKS_+0x5ee>
 801c9cc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c9d0:	4618      	mov	r0, r3
 801c9d2:	f7ee fd84 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801c9d6:	2c00      	cmp	r4, #0
 801c9d8:	d014      	beq.n	801ca04 <_ZNK14MockNamedValue6equalsERKS_+0x61c>
        return value_.unsignedLongIntValue_ == p.value_.unsignedIntValue_;
 801c9da:	1d3b      	adds	r3, r7, #4
 801c9dc:	681b      	ldr	r3, [r3, #0]
 801c9de:	699a      	ldr	r2, [r3, #24]
 801c9e0:	463b      	mov	r3, r7
 801c9e2:	681b      	ldr	r3, [r3, #0]
 801c9e4:	699b      	ldr	r3, [r3, #24]
 801c9e6:	429a      	cmp	r2, r3
 801c9e8:	bf0c      	ite	eq
 801c9ea:	2301      	moveq	r3, #1
 801c9ec:	2300      	movne	r3, #0
 801c9ee:	b2dc      	uxtb	r4, r3
 801c9f0:	e2aa      	b.n	801cf48 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801c9f2:	bf00      	nop
 801c9f4:	080244a0 	.word	0x080244a0
 801c9f8:	080244c8 	.word	0x080244c8
 801c9fc:	080244ac 	.word	0x080244ac
 801ca00:	080244bc 	.word	0x080244bc
    else if((type_ == "long int") && (p.type_ == "unsigned long int"))
 801ca04:	2500      	movs	r5, #0
 801ca06:	1d3b      	adds	r3, r7, #4
 801ca08:	681b      	ldr	r3, [r3, #0]
 801ca0a:	f103 040c 	add.w	r4, r3, #12
 801ca0e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801ca12:	49ae      	ldr	r1, [pc, #696]	; (801cccc <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801ca14:	4618      	mov	r0, r3
 801ca16:	f7ee f9aa 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801ca1a:	2601      	movs	r6, #1
 801ca1c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801ca20:	4619      	mov	r1, r3
 801ca22:	4620      	mov	r0, r4
 801ca24:	f7ee fd67 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801ca28:	4603      	mov	r3, r0
 801ca2a:	2b00      	cmp	r3, #0
 801ca2c:	d015      	beq.n	801ca5a <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801ca2e:	463b      	mov	r3, r7
 801ca30:	681b      	ldr	r3, [r3, #0]
 801ca32:	f103 040c 	add.w	r4, r3, #12
 801ca36:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801ca3a:	49a5      	ldr	r1, [pc, #660]	; (801ccd0 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801ca3c:	4618      	mov	r0, r3
 801ca3e:	f7ee f996 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801ca42:	2501      	movs	r5, #1
 801ca44:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801ca48:	4619      	mov	r1, r3
 801ca4a:	4620      	mov	r0, r4
 801ca4c:	f7ee fd53 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801ca50:	4603      	mov	r3, r0
 801ca52:	2b00      	cmp	r3, #0
 801ca54:	d001      	beq.n	801ca5a <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801ca56:	2401      	movs	r4, #1
 801ca58:	e000      	b.n	801ca5c <_ZNK14MockNamedValue6equalsERKS_+0x674>
 801ca5a:	2400      	movs	r4, #0
 801ca5c:	2d00      	cmp	r5, #0
 801ca5e:	d004      	beq.n	801ca6a <_ZNK14MockNamedValue6equalsERKS_+0x682>
 801ca60:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801ca64:	4618      	mov	r0, r3
 801ca66:	f7ee fd3a 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801ca6a:	2e00      	cmp	r6, #0
 801ca6c:	d004      	beq.n	801ca78 <_ZNK14MockNamedValue6equalsERKS_+0x690>
 801ca6e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801ca72:	4618      	mov	r0, r3
 801ca74:	f7ee fd33 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801ca78:	2c00      	cmp	r4, #0
 801ca7a:	d010      	beq.n	801ca9e <_ZNK14MockNamedValue6equalsERKS_+0x6b6>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedLongIntValue_);
 801ca7c:	1d3b      	adds	r3, r7, #4
 801ca7e:	681b      	ldr	r3, [r3, #0]
 801ca80:	699b      	ldr	r3, [r3, #24]
 801ca82:	2b00      	cmp	r3, #0
 801ca84:	db09      	blt.n	801ca9a <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801ca86:	1d3b      	adds	r3, r7, #4
 801ca88:	681b      	ldr	r3, [r3, #0]
 801ca8a:	699b      	ldr	r3, [r3, #24]
 801ca8c:	463a      	mov	r2, r7
 801ca8e:	6812      	ldr	r2, [r2, #0]
 801ca90:	6992      	ldr	r2, [r2, #24]
 801ca92:	4293      	cmp	r3, r2
 801ca94:	d101      	bne.n	801ca9a <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801ca96:	2401      	movs	r4, #1
 801ca98:	e256      	b.n	801cf48 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801ca9a:	2400      	movs	r4, #0
 801ca9c:	e254      	b.n	801cf48 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "long int"))
 801ca9e:	2500      	movs	r5, #0
 801caa0:	1d3b      	adds	r3, r7, #4
 801caa2:	681b      	ldr	r3, [r3, #0]
 801caa4:	f103 040c 	add.w	r4, r3, #12
 801caa8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801caac:	4988      	ldr	r1, [pc, #544]	; (801ccd0 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801caae:	4618      	mov	r0, r3
 801cab0:	f7ee f95d 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801cab4:	2601      	movs	r6, #1
 801cab6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801caba:	4619      	mov	r1, r3
 801cabc:	4620      	mov	r0, r4
 801cabe:	f7ee fd1a 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801cac2:	4603      	mov	r3, r0
 801cac4:	2b00      	cmp	r3, #0
 801cac6:	d015      	beq.n	801caf4 <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801cac8:	463b      	mov	r3, r7
 801caca:	681b      	ldr	r3, [r3, #0]
 801cacc:	f103 040c 	add.w	r4, r3, #12
 801cad0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801cad4:	497d      	ldr	r1, [pc, #500]	; (801cccc <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801cad6:	4618      	mov	r0, r3
 801cad8:	f7ee f949 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801cadc:	2501      	movs	r5, #1
 801cade:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801cae2:	4619      	mov	r1, r3
 801cae4:	4620      	mov	r0, r4
 801cae6:	f7ee fd06 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801caea:	4603      	mov	r3, r0
 801caec:	2b00      	cmp	r3, #0
 801caee:	d001      	beq.n	801caf4 <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801caf0:	2401      	movs	r4, #1
 801caf2:	e000      	b.n	801caf6 <_ZNK14MockNamedValue6equalsERKS_+0x70e>
 801caf4:	2400      	movs	r4, #0
 801caf6:	2d00      	cmp	r5, #0
 801caf8:	d004      	beq.n	801cb04 <_ZNK14MockNamedValue6equalsERKS_+0x71c>
 801cafa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801cafe:	4618      	mov	r0, r3
 801cb00:	f7ee fced 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801cb04:	2e00      	cmp	r6, #0
 801cb06:	d004      	beq.n	801cb12 <_ZNK14MockNamedValue6equalsERKS_+0x72a>
 801cb08:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801cb0c:	4618      	mov	r0, r3
 801cb0e:	f7ee fce6 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801cb12:	2c00      	cmp	r4, #0
 801cb14:	d010      	beq.n	801cb38 <_ZNK14MockNamedValue6equalsERKS_+0x750>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long) p.value_.longIntValue_);
 801cb16:	463b      	mov	r3, r7
 801cb18:	681b      	ldr	r3, [r3, #0]
 801cb1a:	699b      	ldr	r3, [r3, #24]
 801cb1c:	2b00      	cmp	r3, #0
 801cb1e:	db09      	blt.n	801cb34 <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801cb20:	1d3b      	adds	r3, r7, #4
 801cb22:	681b      	ldr	r3, [r3, #0]
 801cb24:	699b      	ldr	r3, [r3, #24]
 801cb26:	463a      	mov	r2, r7
 801cb28:	6812      	ldr	r2, [r2, #0]
 801cb2a:	6992      	ldr	r2, [r2, #24]
 801cb2c:	4293      	cmp	r3, r2
 801cb2e:	d101      	bne.n	801cb34 <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801cb30:	2401      	movs	r4, #1
 801cb32:	e209      	b.n	801cf48 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801cb34:	2400      	movs	r4, #0
 801cb36:	e207      	b.n	801cf48 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongIntValue_;
    else if ((type_ == "unsigned long int") && (p.type_ == "unsigned long long int"))
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif

    if (type_ != p.type_) return false;
 801cb38:	1d3b      	adds	r3, r7, #4
 801cb3a:	681b      	ldr	r3, [r3, #0]
 801cb3c:	f103 020c 	add.w	r2, r3, #12
 801cb40:	463b      	mov	r3, r7
 801cb42:	681b      	ldr	r3, [r3, #0]
 801cb44:	330c      	adds	r3, #12
 801cb46:	4619      	mov	r1, r3
 801cb48:	4610      	mov	r0, r2
 801cb4a:	f7ee fd19 	bl	800b580 <_ZneRK12SimpleStringS1_>
 801cb4e:	4603      	mov	r3, r0
 801cb50:	2b00      	cmp	r3, #0
 801cb52:	d001      	beq.n	801cb58 <_ZNK14MockNamedValue6equalsERKS_+0x770>
 801cb54:	2400      	movs	r4, #0
 801cb56:	e1f7      	b.n	801cf48 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    if (type_ == "bool")
 801cb58:	1d3b      	adds	r3, r7, #4
 801cb5a:	681b      	ldr	r3, [r3, #0]
 801cb5c:	f103 040c 	add.w	r4, r3, #12
 801cb60:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801cb64:	495b      	ldr	r1, [pc, #364]	; (801ccd4 <_ZNK14MockNamedValue6equalsERKS_+0x8ec>)
 801cb66:	4618      	mov	r0, r3
 801cb68:	f7ee f901 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801cb6c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801cb70:	4619      	mov	r1, r3
 801cb72:	4620      	mov	r0, r4
 801cb74:	f7ee fcbf 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801cb78:	4603      	mov	r3, r0
 801cb7a:	461c      	mov	r4, r3
 801cb7c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801cb80:	4618      	mov	r0, r3
 801cb82:	f7ee fcac 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801cb86:	2c00      	cmp	r4, #0
 801cb88:	d00b      	beq.n	801cba2 <_ZNK14MockNamedValue6equalsERKS_+0x7ba>
        return value_.boolValue_ == p.value_.boolValue_;
 801cb8a:	1d3b      	adds	r3, r7, #4
 801cb8c:	681b      	ldr	r3, [r3, #0]
 801cb8e:	7e1a      	ldrb	r2, [r3, #24]
 801cb90:	463b      	mov	r3, r7
 801cb92:	681b      	ldr	r3, [r3, #0]
 801cb94:	7e1b      	ldrb	r3, [r3, #24]
 801cb96:	429a      	cmp	r2, r3
 801cb98:	bf0c      	ite	eq
 801cb9a:	2301      	moveq	r3, #1
 801cb9c:	2300      	movne	r3, #0
 801cb9e:	b2dc      	uxtb	r4, r3
 801cba0:	e1d2      	b.n	801cf48 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "int")
 801cba2:	1d3b      	adds	r3, r7, #4
 801cba4:	681b      	ldr	r3, [r3, #0]
 801cba6:	f103 040c 	add.w	r4, r3, #12
 801cbaa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801cbae:	494a      	ldr	r1, [pc, #296]	; (801ccd8 <_ZNK14MockNamedValue6equalsERKS_+0x8f0>)
 801cbb0:	4618      	mov	r0, r3
 801cbb2:	f7ee f8dc 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801cbb6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801cbba:	4619      	mov	r1, r3
 801cbbc:	4620      	mov	r0, r4
 801cbbe:	f7ee fc9a 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801cbc2:	4603      	mov	r3, r0
 801cbc4:	461c      	mov	r4, r3
 801cbc6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801cbca:	4618      	mov	r0, r3
 801cbcc:	f7ee fc87 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801cbd0:	2c00      	cmp	r4, #0
 801cbd2:	d00b      	beq.n	801cbec <_ZNK14MockNamedValue6equalsERKS_+0x804>
        return value_.intValue_ == p.value_.intValue_;
 801cbd4:	1d3b      	adds	r3, r7, #4
 801cbd6:	681b      	ldr	r3, [r3, #0]
 801cbd8:	699a      	ldr	r2, [r3, #24]
 801cbda:	463b      	mov	r3, r7
 801cbdc:	681b      	ldr	r3, [r3, #0]
 801cbde:	699b      	ldr	r3, [r3, #24]
 801cbe0:	429a      	cmp	r2, r3
 801cbe2:	bf0c      	ite	eq
 801cbe4:	2301      	moveq	r3, #1
 801cbe6:	2300      	movne	r3, #0
 801cbe8:	b2dc      	uxtb	r4, r3
 801cbea:	e1ad      	b.n	801cf48 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned int")
 801cbec:	1d3b      	adds	r3, r7, #4
 801cbee:	681b      	ldr	r3, [r3, #0]
 801cbf0:	f103 040c 	add.w	r4, r3, #12
 801cbf4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801cbf8:	4938      	ldr	r1, [pc, #224]	; (801ccdc <_ZNK14MockNamedValue6equalsERKS_+0x8f4>)
 801cbfa:	4618      	mov	r0, r3
 801cbfc:	f7ee f8b7 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801cc00:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801cc04:	4619      	mov	r1, r3
 801cc06:	4620      	mov	r0, r4
 801cc08:	f7ee fc75 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801cc0c:	4603      	mov	r3, r0
 801cc0e:	461c      	mov	r4, r3
 801cc10:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801cc14:	4618      	mov	r0, r3
 801cc16:	f7ee fc62 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801cc1a:	2c00      	cmp	r4, #0
 801cc1c:	d00b      	beq.n	801cc36 <_ZNK14MockNamedValue6equalsERKS_+0x84e>
        return value_.unsignedIntValue_ == p.value_.unsignedIntValue_;
 801cc1e:	1d3b      	adds	r3, r7, #4
 801cc20:	681b      	ldr	r3, [r3, #0]
 801cc22:	699a      	ldr	r2, [r3, #24]
 801cc24:	463b      	mov	r3, r7
 801cc26:	681b      	ldr	r3, [r3, #0]
 801cc28:	699b      	ldr	r3, [r3, #24]
 801cc2a:	429a      	cmp	r2, r3
 801cc2c:	bf0c      	ite	eq
 801cc2e:	2301      	moveq	r3, #1
 801cc30:	2300      	movne	r3, #0
 801cc32:	b2dc      	uxtb	r4, r3
 801cc34:	e188      	b.n	801cf48 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "long int")
 801cc36:	1d3b      	adds	r3, r7, #4
 801cc38:	681b      	ldr	r3, [r3, #0]
 801cc3a:	f103 040c 	add.w	r4, r3, #12
 801cc3e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801cc42:	4922      	ldr	r1, [pc, #136]	; (801cccc <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801cc44:	4618      	mov	r0, r3
 801cc46:	f7ee f892 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801cc4a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801cc4e:	4619      	mov	r1, r3
 801cc50:	4620      	mov	r0, r4
 801cc52:	f7ee fc50 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801cc56:	4603      	mov	r3, r0
 801cc58:	461c      	mov	r4, r3
 801cc5a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801cc5e:	4618      	mov	r0, r3
 801cc60:	f7ee fc3d 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801cc64:	2c00      	cmp	r4, #0
 801cc66:	d00b      	beq.n	801cc80 <_ZNK14MockNamedValue6equalsERKS_+0x898>
        return value_.longIntValue_ == p.value_.longIntValue_;
 801cc68:	1d3b      	adds	r3, r7, #4
 801cc6a:	681b      	ldr	r3, [r3, #0]
 801cc6c:	699a      	ldr	r2, [r3, #24]
 801cc6e:	463b      	mov	r3, r7
 801cc70:	681b      	ldr	r3, [r3, #0]
 801cc72:	699b      	ldr	r3, [r3, #24]
 801cc74:	429a      	cmp	r2, r3
 801cc76:	bf0c      	ite	eq
 801cc78:	2301      	moveq	r3, #1
 801cc7a:	2300      	movne	r3, #0
 801cc7c:	b2dc      	uxtb	r4, r3
 801cc7e:	e163      	b.n	801cf48 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned long int")
 801cc80:	1d3b      	adds	r3, r7, #4
 801cc82:	681b      	ldr	r3, [r3, #0]
 801cc84:	f103 040c 	add.w	r4, r3, #12
 801cc88:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801cc8c:	4910      	ldr	r1, [pc, #64]	; (801ccd0 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801cc8e:	4618      	mov	r0, r3
 801cc90:	f7ee f86d 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801cc94:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801cc98:	4619      	mov	r1, r3
 801cc9a:	4620      	mov	r0, r4
 801cc9c:	f7ee fc2b 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801cca0:	4603      	mov	r3, r0
 801cca2:	461c      	mov	r4, r3
 801cca4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801cca8:	4618      	mov	r0, r3
 801ccaa:	f7ee fc18 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801ccae:	2c00      	cmp	r4, #0
 801ccb0:	d016      	beq.n	801cce0 <_ZNK14MockNamedValue6equalsERKS_+0x8f8>
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongIntValue_;
 801ccb2:	1d3b      	adds	r3, r7, #4
 801ccb4:	681b      	ldr	r3, [r3, #0]
 801ccb6:	699a      	ldr	r2, [r3, #24]
 801ccb8:	463b      	mov	r3, r7
 801ccba:	681b      	ldr	r3, [r3, #0]
 801ccbc:	699b      	ldr	r3, [r3, #24]
 801ccbe:	429a      	cmp	r2, r3
 801ccc0:	bf0c      	ite	eq
 801ccc2:	2301      	moveq	r3, #1
 801ccc4:	2300      	movne	r3, #0
 801ccc6:	b2dc      	uxtb	r4, r3
 801ccc8:	e13e      	b.n	801cf48 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801ccca:	bf00      	nop
 801cccc:	080244bc 	.word	0x080244bc
 801ccd0:	080244c8 	.word	0x080244c8
 801ccd4:	080244a4 	.word	0x080244a4
 801ccd8:	080244a0 	.word	0x080244a0
 801ccdc:	080244ac 	.word	0x080244ac
    else if (type_ == "long long int")
        return value_.longLongIntValue_ == p.value_.longLongIntValue_;
    else if (type_ == "unsigned long long int")
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif
    else if (type_ == "const char*")
 801cce0:	1d3b      	adds	r3, r7, #4
 801cce2:	681b      	ldr	r3, [r3, #0]
 801cce4:	f103 040c 	add.w	r4, r3, #12
 801cce8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801ccec:	4999      	ldr	r1, [pc, #612]	; (801cf54 <_ZNK14MockNamedValue6equalsERKS_+0xb6c>)
 801ccee:	4618      	mov	r0, r3
 801ccf0:	f7ee f83d 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801ccf4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801ccf8:	4619      	mov	r1, r3
 801ccfa:	4620      	mov	r0, r4
 801ccfc:	f7ee fbfb 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801cd00:	4603      	mov	r3, r0
 801cd02:	461c      	mov	r4, r3
 801cd04:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801cd08:	4618      	mov	r0, r3
 801cd0a:	f7ee fbe8 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801cd0e:	2c00      	cmp	r4, #0
 801cd10:	d026      	beq.n	801cd60 <_ZNK14MockNamedValue6equalsERKS_+0x978>
        return SimpleString(value_.stringValue_) == SimpleString(p.value_.stringValue_);
 801cd12:	1d3b      	adds	r3, r7, #4
 801cd14:	681b      	ldr	r3, [r3, #0]
 801cd16:	699a      	ldr	r2, [r3, #24]
 801cd18:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801cd1c:	4611      	mov	r1, r2
 801cd1e:	4618      	mov	r0, r3
 801cd20:	f7ee f825 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801cd24:	463b      	mov	r3, r7
 801cd26:	681b      	ldr	r3, [r3, #0]
 801cd28:	699a      	ldr	r2, [r3, #24]
 801cd2a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801cd2e:	4611      	mov	r1, r2
 801cd30:	4618      	mov	r0, r3
 801cd32:	f7ee f81c 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801cd36:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801cd3a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801cd3e:	4611      	mov	r1, r2
 801cd40:	4618      	mov	r0, r3
 801cd42:	f7ee fbd8 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801cd46:	4603      	mov	r3, r0
 801cd48:	461c      	mov	r4, r3
 801cd4a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801cd4e:	4618      	mov	r0, r3
 801cd50:	f7ee fbc5 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801cd54:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801cd58:	4618      	mov	r0, r3
 801cd5a:	f7ee fbc0 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801cd5e:	e0f3      	b.n	801cf48 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void*")
 801cd60:	1d3b      	adds	r3, r7, #4
 801cd62:	681b      	ldr	r3, [r3, #0]
 801cd64:	f103 040c 	add.w	r4, r3, #12
 801cd68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801cd6c:	497a      	ldr	r1, [pc, #488]	; (801cf58 <_ZNK14MockNamedValue6equalsERKS_+0xb70>)
 801cd6e:	4618      	mov	r0, r3
 801cd70:	f7ed fffd 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801cd74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801cd78:	4619      	mov	r1, r3
 801cd7a:	4620      	mov	r0, r4
 801cd7c:	f7ee fbbb 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801cd80:	4603      	mov	r3, r0
 801cd82:	461c      	mov	r4, r3
 801cd84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801cd88:	4618      	mov	r0, r3
 801cd8a:	f7ee fba8 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801cd8e:	2c00      	cmp	r4, #0
 801cd90:	d00b      	beq.n	801cdaa <_ZNK14MockNamedValue6equalsERKS_+0x9c2>
        return value_.pointerValue_ == p.value_.pointerValue_;
 801cd92:	1d3b      	adds	r3, r7, #4
 801cd94:	681b      	ldr	r3, [r3, #0]
 801cd96:	699a      	ldr	r2, [r3, #24]
 801cd98:	463b      	mov	r3, r7
 801cd9a:	681b      	ldr	r3, [r3, #0]
 801cd9c:	699b      	ldr	r3, [r3, #24]
 801cd9e:	429a      	cmp	r2, r3
 801cda0:	bf0c      	ite	eq
 801cda2:	2301      	moveq	r3, #1
 801cda4:	2300      	movne	r3, #0
 801cda6:	b2dc      	uxtb	r4, r3
 801cda8:	e0ce      	b.n	801cf48 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const void*")
 801cdaa:	1d3b      	adds	r3, r7, #4
 801cdac:	681b      	ldr	r3, [r3, #0]
 801cdae:	f103 040c 	add.w	r4, r3, #12
 801cdb2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801cdb6:	4969      	ldr	r1, [pc, #420]	; (801cf5c <_ZNK14MockNamedValue6equalsERKS_+0xb74>)
 801cdb8:	4618      	mov	r0, r3
 801cdba:	f7ed ffd8 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801cdbe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801cdc2:	4619      	mov	r1, r3
 801cdc4:	4620      	mov	r0, r4
 801cdc6:	f7ee fb96 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801cdca:	4603      	mov	r3, r0
 801cdcc:	461c      	mov	r4, r3
 801cdce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801cdd2:	4618      	mov	r0, r3
 801cdd4:	f7ee fb83 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801cdd8:	2c00      	cmp	r4, #0
 801cdda:	d00b      	beq.n	801cdf4 <_ZNK14MockNamedValue6equalsERKS_+0xa0c>
        return value_.constPointerValue_ == p.value_.constPointerValue_;
 801cddc:	1d3b      	adds	r3, r7, #4
 801cdde:	681b      	ldr	r3, [r3, #0]
 801cde0:	699a      	ldr	r2, [r3, #24]
 801cde2:	463b      	mov	r3, r7
 801cde4:	681b      	ldr	r3, [r3, #0]
 801cde6:	699b      	ldr	r3, [r3, #24]
 801cde8:	429a      	cmp	r2, r3
 801cdea:	bf0c      	ite	eq
 801cdec:	2301      	moveq	r3, #1
 801cdee:	2300      	movne	r3, #0
 801cdf0:	b2dc      	uxtb	r4, r3
 801cdf2:	e0a9      	b.n	801cf48 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void (*)()")
 801cdf4:	1d3b      	adds	r3, r7, #4
 801cdf6:	681b      	ldr	r3, [r3, #0]
 801cdf8:	f103 040c 	add.w	r4, r3, #12
 801cdfc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801ce00:	4957      	ldr	r1, [pc, #348]	; (801cf60 <_ZNK14MockNamedValue6equalsERKS_+0xb78>)
 801ce02:	4618      	mov	r0, r3
 801ce04:	f7ed ffb3 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801ce08:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801ce0c:	4619      	mov	r1, r3
 801ce0e:	4620      	mov	r0, r4
 801ce10:	f7ee fb71 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801ce14:	4603      	mov	r3, r0
 801ce16:	461c      	mov	r4, r3
 801ce18:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801ce1c:	4618      	mov	r0, r3
 801ce1e:	f7ee fb5e 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801ce22:	2c00      	cmp	r4, #0
 801ce24:	d00b      	beq.n	801ce3e <_ZNK14MockNamedValue6equalsERKS_+0xa56>
        return value_.functionPointerValue_ == p.value_.functionPointerValue_;
 801ce26:	1d3b      	adds	r3, r7, #4
 801ce28:	681b      	ldr	r3, [r3, #0]
 801ce2a:	699a      	ldr	r2, [r3, #24]
 801ce2c:	463b      	mov	r3, r7
 801ce2e:	681b      	ldr	r3, [r3, #0]
 801ce30:	699b      	ldr	r3, [r3, #24]
 801ce32:	429a      	cmp	r2, r3
 801ce34:	bf0c      	ite	eq
 801ce36:	2301      	moveq	r3, #1
 801ce38:	2300      	movne	r3, #0
 801ce3a:	b2dc      	uxtb	r4, r3
 801ce3c:	e084      	b.n	801cf48 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "double")
 801ce3e:	1d3b      	adds	r3, r7, #4
 801ce40:	681b      	ldr	r3, [r3, #0]
 801ce42:	f103 040c 	add.w	r4, r3, #12
 801ce46:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801ce4a:	4946      	ldr	r1, [pc, #280]	; (801cf64 <_ZNK14MockNamedValue6equalsERKS_+0xb7c>)
 801ce4c:	4618      	mov	r0, r3
 801ce4e:	f7ed ff8e 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801ce52:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801ce56:	4619      	mov	r1, r3
 801ce58:	4620      	mov	r0, r4
 801ce5a:	f7ee fb4c 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801ce5e:	4603      	mov	r3, r0
 801ce60:	461c      	mov	r4, r3
 801ce62:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801ce66:	4618      	mov	r0, r3
 801ce68:	f7ee fb39 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801ce6c:	2c00      	cmp	r4, #0
 801ce6e:	d01c      	beq.n	801ceaa <_ZNK14MockNamedValue6equalsERKS_+0xac2>
        return (doubles_equal(value_.doubleValue_.value, p.value_.doubleValue_.value, value_.doubleValue_.tolerance));
 801ce70:	1d3b      	adds	r3, r7, #4
 801ce72:	681b      	ldr	r3, [r3, #0]
 801ce74:	ed93 7b06 	vldr	d7, [r3, #24]
 801ce78:	463b      	mov	r3, r7
 801ce7a:	681b      	ldr	r3, [r3, #0]
 801ce7c:	ed93 6b06 	vldr	d6, [r3, #24]
 801ce80:	1d3b      	adds	r3, r7, #4
 801ce82:	681b      	ldr	r3, [r3, #0]
 801ce84:	ed93 5b08 	vldr	d5, [r3, #32]
 801ce88:	eeb0 2a45 	vmov.f32	s4, s10
 801ce8c:	eef0 2a65 	vmov.f32	s5, s11
 801ce90:	eeb0 1a46 	vmov.f32	s2, s12
 801ce94:	eef0 1a66 	vmov.f32	s3, s13
 801ce98:	eeb0 0a47 	vmov.f32	s0, s14
 801ce9c:	eef0 0a67 	vmov.f32	s1, s15
 801cea0:	f7f3 fe18 	bl	8010ad4 <_Z13doubles_equalddd>
 801cea4:	4603      	mov	r3, r0
 801cea6:	461c      	mov	r4, r3
 801cea8:	e04e      	b.n	801cf48 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const unsigned char*")
 801ceaa:	1d3b      	adds	r3, r7, #4
 801ceac:	681b      	ldr	r3, [r3, #0]
 801ceae:	f103 040c 	add.w	r4, r3, #12
 801ceb2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801ceb6:	492c      	ldr	r1, [pc, #176]	; (801cf68 <_ZNK14MockNamedValue6equalsERKS_+0xb80>)
 801ceb8:	4618      	mov	r0, r3
 801ceba:	f7ed ff58 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801cebe:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801cec2:	4619      	mov	r1, r3
 801cec4:	4620      	mov	r0, r4
 801cec6:	f7ee fb16 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801ceca:	4603      	mov	r3, r0
 801cecc:	461c      	mov	r4, r3
 801cece:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801ced2:	4618      	mov	r0, r3
 801ced4:	f7ee fb03 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801ced8:	2c00      	cmp	r4, #0
 801ceda:	d01c      	beq.n	801cf16 <_ZNK14MockNamedValue6equalsERKS_+0xb2e>
    {
        if (size_ != p.size_) {
 801cedc:	1d3b      	adds	r3, r7, #4
 801cede:	681b      	ldr	r3, [r3, #0]
 801cee0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801cee2:	463b      	mov	r3, r7
 801cee4:	681b      	ldr	r3, [r3, #0]
 801cee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cee8:	429a      	cmp	r2, r3
 801ceea:	d001      	beq.n	801cef0 <_ZNK14MockNamedValue6equalsERKS_+0xb08>
            return false;
 801ceec:	2400      	movs	r4, #0
 801ceee:	e02b      	b.n	801cf48 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        }
        return SimpleString::MemCmp(value_.memoryBufferValue_, p.value_.memoryBufferValue_, size_) == 0;
 801cef0:	1d3b      	adds	r3, r7, #4
 801cef2:	681b      	ldr	r3, [r3, #0]
 801cef4:	6998      	ldr	r0, [r3, #24]
 801cef6:	463b      	mov	r3, r7
 801cef8:	681b      	ldr	r3, [r3, #0]
 801cefa:	6999      	ldr	r1, [r3, #24]
 801cefc:	1d3b      	adds	r3, r7, #4
 801cefe:	681b      	ldr	r3, [r3, #0]
 801cf00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf02:	461a      	mov	r2, r3
 801cf04:	f7ed fe52 	bl	800abac <_ZN12SimpleString6MemCmpEPKvS1_j>
 801cf08:	4603      	mov	r3, r0
 801cf0a:	2b00      	cmp	r3, #0
 801cf0c:	bf0c      	ite	eq
 801cf0e:	2301      	moveq	r3, #1
 801cf10:	2300      	movne	r3, #0
 801cf12:	b2dc      	uxtb	r4, r3
 801cf14:	e018      	b.n	801cf48 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    }

    if (comparator_)
 801cf16:	1d3b      	adds	r3, r7, #4
 801cf18:	681b      	ldr	r3, [r3, #0]
 801cf1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cf1c:	2b00      	cmp	r3, #0
 801cf1e:	d012      	beq.n	801cf46 <_ZNK14MockNamedValue6equalsERKS_+0xb5e>
        return comparator_->isEqual(value_.constObjectPointerValue_, p.value_.constObjectPointerValue_);
 801cf20:	1d3b      	adds	r3, r7, #4
 801cf22:	681b      	ldr	r3, [r3, #0]
 801cf24:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801cf26:	1d3b      	adds	r3, r7, #4
 801cf28:	681b      	ldr	r3, [r3, #0]
 801cf2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cf2c:	681b      	ldr	r3, [r3, #0]
 801cf2e:	3308      	adds	r3, #8
 801cf30:	681b      	ldr	r3, [r3, #0]
 801cf32:	1d3a      	adds	r2, r7, #4
 801cf34:	6812      	ldr	r2, [r2, #0]
 801cf36:	6991      	ldr	r1, [r2, #24]
 801cf38:	463a      	mov	r2, r7
 801cf3a:	6812      	ldr	r2, [r2, #0]
 801cf3c:	6992      	ldr	r2, [r2, #24]
 801cf3e:	4798      	blx	r3
 801cf40:	4603      	mov	r3, r0
 801cf42:	461c      	mov	r4, r3
 801cf44:	e000      	b.n	801cf48 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    return false;
 801cf46:	2400      	movs	r4, #0
 801cf48:	4623      	mov	r3, r4
}
 801cf4a:	4618      	mov	r0, r3
 801cf4c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 801cf50:	46bd      	mov	sp, r7
 801cf52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cf54:	0802456c 	.word	0x0802456c
 801cf58:	0802454c 	.word	0x0802454c
 801cf5c:	08024554 	.word	0x08024554
 801cf60:	08024560 	.word	0x08024560
 801cf64:	08024544 	.word	0x08024544
 801cf68:	08024578 	.word	0x08024578

0801cf6c <_ZNK14MockNamedValue20compatibleForCopyingERKS_>:

bool MockNamedValue::compatibleForCopying(const MockNamedValue& p) const
{
 801cf6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cf6e:	b087      	sub	sp, #28
 801cf70:	af00      	add	r7, sp, #0
 801cf72:	6078      	str	r0, [r7, #4]
 801cf74:	6039      	str	r1, [r7, #0]
    if (type_ == p.type_) return true;
 801cf76:	687b      	ldr	r3, [r7, #4]
 801cf78:	f103 020c 	add.w	r2, r3, #12
 801cf7c:	683b      	ldr	r3, [r7, #0]
 801cf7e:	330c      	adds	r3, #12
 801cf80:	4619      	mov	r1, r3
 801cf82:	4610      	mov	r0, r2
 801cf84:	f7ee fab7 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801cf88:	4603      	mov	r3, r0
 801cf8a:	2b00      	cmp	r3, #0
 801cf8c:	d001      	beq.n	801cf92 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x26>
 801cf8e:	2301      	movs	r3, #1
 801cf90:	e03c      	b.n	801d00c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    if ((type_ == "const void*") && (p.type_ == "void*"))
 801cf92:	2500      	movs	r5, #0
 801cf94:	687b      	ldr	r3, [r7, #4]
 801cf96:	f103 040c 	add.w	r4, r3, #12
 801cf9a:	f107 0308 	add.w	r3, r7, #8
 801cf9e:	491d      	ldr	r1, [pc, #116]	; (801d014 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa8>)
 801cfa0:	4618      	mov	r0, r3
 801cfa2:	f7ed fee4 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801cfa6:	2601      	movs	r6, #1
 801cfa8:	f107 0308 	add.w	r3, r7, #8
 801cfac:	4619      	mov	r1, r3
 801cfae:	4620      	mov	r0, r4
 801cfb0:	f7ee faa1 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801cfb4:	4603      	mov	r3, r0
 801cfb6:	2b00      	cmp	r3, #0
 801cfb8:	d014      	beq.n	801cfe4 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801cfba:	683b      	ldr	r3, [r7, #0]
 801cfbc:	f103 040c 	add.w	r4, r3, #12
 801cfc0:	f107 0310 	add.w	r3, r7, #16
 801cfc4:	4914      	ldr	r1, [pc, #80]	; (801d018 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xac>)
 801cfc6:	4618      	mov	r0, r3
 801cfc8:	f7ed fed1 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801cfcc:	2501      	movs	r5, #1
 801cfce:	f107 0310 	add.w	r3, r7, #16
 801cfd2:	4619      	mov	r1, r3
 801cfd4:	4620      	mov	r0, r4
 801cfd6:	f7ee fa8e 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801cfda:	4603      	mov	r3, r0
 801cfdc:	2b00      	cmp	r3, #0
 801cfde:	d001      	beq.n	801cfe4 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801cfe0:	2401      	movs	r4, #1
 801cfe2:	e000      	b.n	801cfe6 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x7a>
 801cfe4:	2400      	movs	r4, #0
 801cfe6:	2d00      	cmp	r5, #0
 801cfe8:	d004      	beq.n	801cff4 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x88>
 801cfea:	f107 0310 	add.w	r3, r7, #16
 801cfee:	4618      	mov	r0, r3
 801cff0:	f7ee fa75 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801cff4:	2e00      	cmp	r6, #0
 801cff6:	d004      	beq.n	801d002 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x96>
 801cff8:	f107 0308 	add.w	r3, r7, #8
 801cffc:	4618      	mov	r0, r3
 801cffe:	f7ee fa6e 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801d002:	2c00      	cmp	r4, #0
 801d004:	d001      	beq.n	801d00a <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x9e>
        return true;
 801d006:	2301      	movs	r3, #1
 801d008:	e000      	b.n	801d00c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    return false;
 801d00a:	2300      	movs	r3, #0
}
 801d00c:	4618      	mov	r0, r3
 801d00e:	371c      	adds	r7, #28
 801d010:	46bd      	mov	sp, r7
 801d012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d014:	08024554 	.word	0x08024554
 801d018:	0802454c 	.word	0x0802454c

0801d01c <_ZNK14MockNamedValue8toStringEv>:

SimpleString MockNamedValue::toString() const
{
 801d01c:	b590      	push	{r4, r7, lr}
 801d01e:	b0b9      	sub	sp, #228	; 0xe4
 801d020:	af00      	add	r7, sp, #0
 801d022:	6078      	str	r0, [r7, #4]
 801d024:	6039      	str	r1, [r7, #0]
    if (type_ == "bool")
 801d026:	683b      	ldr	r3, [r7, #0]
 801d028:	f103 040c 	add.w	r4, r3, #12
 801d02c:	f107 0308 	add.w	r3, r7, #8
 801d030:	49d4      	ldr	r1, [pc, #848]	; (801d384 <_ZNK14MockNamedValue8toStringEv+0x368>)
 801d032:	4618      	mov	r0, r3
 801d034:	f7ed fe9b 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801d038:	f107 0308 	add.w	r3, r7, #8
 801d03c:	4619      	mov	r1, r3
 801d03e:	4620      	mov	r0, r4
 801d040:	f7ee fa59 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801d044:	4603      	mov	r3, r0
 801d046:	461c      	mov	r4, r3
 801d048:	f107 0308 	add.w	r3, r7, #8
 801d04c:	4618      	mov	r0, r3
 801d04e:	f7ee fa46 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801d052:	2c00      	cmp	r4, #0
 801d054:	d007      	beq.n	801d066 <_ZNK14MockNamedValue8toStringEv+0x4a>
        return StringFrom(value_.boolValue_);
 801d056:	683b      	ldr	r3, [r7, #0]
 801d058:	7e1a      	ldrb	r2, [r3, #24]
 801d05a:	687b      	ldr	r3, [r7, #4]
 801d05c:	4611      	mov	r1, r2
 801d05e:	4618      	mov	r0, r3
 801d060:	f7ee fcae 	bl	800b9c0 <_Z10StringFromb>
 801d064:	e23f      	b.n	801d4e6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "int")
 801d066:	683b      	ldr	r3, [r7, #0]
 801d068:	f103 040c 	add.w	r4, r3, #12
 801d06c:	f107 0310 	add.w	r3, r7, #16
 801d070:	49c5      	ldr	r1, [pc, #788]	; (801d388 <_ZNK14MockNamedValue8toStringEv+0x36c>)
 801d072:	4618      	mov	r0, r3
 801d074:	f7ed fe7b 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801d078:	f107 0310 	add.w	r3, r7, #16
 801d07c:	4619      	mov	r1, r3
 801d07e:	4620      	mov	r0, r4
 801d080:	f7ee fa39 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801d084:	4603      	mov	r3, r0
 801d086:	461c      	mov	r4, r3
 801d088:	f107 0310 	add.w	r3, r7, #16
 801d08c:	4618      	mov	r0, r3
 801d08e:	f7ee fa26 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801d092:	2c00      	cmp	r4, #0
 801d094:	d03b      	beq.n	801d10e <_ZNK14MockNamedValue8toStringEv+0xf2>
        return StringFrom(value_.intValue_) + " " + BracketsFormattedHexStringFrom(value_.intValue_);
 801d096:	683b      	ldr	r3, [r7, #0]
 801d098:	699a      	ldr	r2, [r3, #24]
 801d09a:	f107 0320 	add.w	r3, r7, #32
 801d09e:	4611      	mov	r1, r2
 801d0a0:	4618      	mov	r0, r3
 801d0a2:	f7ee fce3 	bl	800ba6c <_Z10StringFromi>
 801d0a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d0aa:	49b8      	ldr	r1, [pc, #736]	; (801d38c <_ZNK14MockNamedValue8toStringEv+0x370>)
 801d0ac:	4618      	mov	r0, r3
 801d0ae:	f7ed fe5e 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801d0b2:	f107 0318 	add.w	r3, r7, #24
 801d0b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801d0ba:	f107 0120 	add.w	r1, r7, #32
 801d0be:	4618      	mov	r0, r3
 801d0c0:	f7ee fa6f 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 801d0c4:	683b      	ldr	r3, [r7, #0]
 801d0c6:	699a      	ldr	r2, [r3, #24]
 801d0c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d0cc:	4611      	mov	r1, r2
 801d0ce:	4618      	mov	r0, r3
 801d0d0:	f7ee fdbc 	bl	800bc4c <_Z30BracketsFormattedHexStringFromi>
 801d0d4:	687b      	ldr	r3, [r7, #4]
 801d0d6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801d0da:	f107 0118 	add.w	r1, r7, #24
 801d0de:	4618      	mov	r0, r3
 801d0e0:	f7ee fa5f 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 801d0e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d0e8:	4618      	mov	r0, r3
 801d0ea:	f7ee f9f8 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801d0ee:	f107 0318 	add.w	r3, r7, #24
 801d0f2:	4618      	mov	r0, r3
 801d0f4:	f7ee f9f3 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801d0f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d0fc:	4618      	mov	r0, r3
 801d0fe:	f7ee f9ee 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801d102:	f107 0320 	add.w	r3, r7, #32
 801d106:	4618      	mov	r0, r3
 801d108:	f7ee f9e9 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801d10c:	e1eb      	b.n	801d4e6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned int")
 801d10e:	683b      	ldr	r3, [r7, #0]
 801d110:	f103 040c 	add.w	r4, r3, #12
 801d114:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d118:	499d      	ldr	r1, [pc, #628]	; (801d390 <_ZNK14MockNamedValue8toStringEv+0x374>)
 801d11a:	4618      	mov	r0, r3
 801d11c:	f7ed fe27 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801d120:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d124:	4619      	mov	r1, r3
 801d126:	4620      	mov	r0, r4
 801d128:	f7ee f9e5 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801d12c:	4603      	mov	r3, r0
 801d12e:	461c      	mov	r4, r3
 801d130:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d134:	4618      	mov	r0, r3
 801d136:	f7ee f9d2 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801d13a:	2c00      	cmp	r4, #0
 801d13c:	d03b      	beq.n	801d1b6 <_ZNK14MockNamedValue8toStringEv+0x19a>
        return StringFrom(value_.unsignedIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedIntValue_);
 801d13e:	683b      	ldr	r3, [r7, #0]
 801d140:	699a      	ldr	r2, [r3, #24]
 801d142:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d146:	4611      	mov	r1, r2
 801d148:	4618      	mov	r0, r3
 801d14a:	f7ee fef7 	bl	800bf3c <_Z10StringFromj>
 801d14e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d152:	498e      	ldr	r1, [pc, #568]	; (801d38c <_ZNK14MockNamedValue8toStringEv+0x370>)
 801d154:	4618      	mov	r0, r3
 801d156:	f7ed fe0a 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801d15a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d15e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801d162:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801d166:	4618      	mov	r0, r3
 801d168:	f7ee fa1b 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 801d16c:	683b      	ldr	r3, [r7, #0]
 801d16e:	699a      	ldr	r2, [r3, #24]
 801d170:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d174:	4611      	mov	r1, r2
 801d176:	4618      	mov	r0, r3
 801d178:	f7ee fd84 	bl	800bc84 <_Z30BracketsFormattedHexStringFromj>
 801d17c:	687b      	ldr	r3, [r7, #4]
 801d17e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801d182:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801d186:	4618      	mov	r0, r3
 801d188:	f7ee fa0b 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 801d18c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d190:	4618      	mov	r0, r3
 801d192:	f7ee f9a4 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801d196:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d19a:	4618      	mov	r0, r3
 801d19c:	f7ee f99f 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801d1a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d1a4:	4618      	mov	r0, r3
 801d1a6:	f7ee f99a 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801d1aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d1ae:	4618      	mov	r0, r3
 801d1b0:	f7ee f995 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801d1b4:	e197      	b.n	801d4e6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long int")
 801d1b6:	683b      	ldr	r3, [r7, #0]
 801d1b8:	f103 040c 	add.w	r4, r3, #12
 801d1bc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801d1c0:	4974      	ldr	r1, [pc, #464]	; (801d394 <_ZNK14MockNamedValue8toStringEv+0x378>)
 801d1c2:	4618      	mov	r0, r3
 801d1c4:	f7ed fdd3 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801d1c8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801d1cc:	4619      	mov	r1, r3
 801d1ce:	4620      	mov	r0, r4
 801d1d0:	f7ee f991 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801d1d4:	4603      	mov	r3, r0
 801d1d6:	461c      	mov	r4, r3
 801d1d8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801d1dc:	4618      	mov	r0, r3
 801d1de:	f7ee f97e 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801d1e2:	2c00      	cmp	r4, #0
 801d1e4:	d03b      	beq.n	801d25e <_ZNK14MockNamedValue8toStringEv+0x242>
        return StringFrom(value_.longIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longIntValue_);
 801d1e6:	683b      	ldr	r3, [r7, #0]
 801d1e8:	699a      	ldr	r2, [r3, #24]
 801d1ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801d1ee:	4611      	mov	r1, r2
 801d1f0:	4618      	mov	r0, r3
 801d1f2:	f7ee fc4d 	bl	800ba90 <_Z10StringFroml>
 801d1f6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801d1fa:	4964      	ldr	r1, [pc, #400]	; (801d38c <_ZNK14MockNamedValue8toStringEv+0x370>)
 801d1fc:	4618      	mov	r0, r3
 801d1fe:	f7ed fdb6 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801d202:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d206:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801d20a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801d20e:	4618      	mov	r0, r3
 801d210:	f7ee f9c7 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 801d214:	683b      	ldr	r3, [r7, #0]
 801d216:	699a      	ldr	r2, [r3, #24]
 801d218:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801d21c:	4611      	mov	r1, r2
 801d21e:	4618      	mov	r0, r3
 801d220:	f7ee fd4c 	bl	800bcbc <_Z30BracketsFormattedHexStringFroml>
 801d224:	687b      	ldr	r3, [r7, #4]
 801d226:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801d22a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801d22e:	4618      	mov	r0, r3
 801d230:	f7ee f9b7 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 801d234:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801d238:	4618      	mov	r0, r3
 801d23a:	f7ee f950 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801d23e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d242:	4618      	mov	r0, r3
 801d244:	f7ee f94b 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801d248:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801d24c:	4618      	mov	r0, r3
 801d24e:	f7ee f946 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801d252:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801d256:	4618      	mov	r0, r3
 801d258:	f7ee f941 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801d25c:	e143      	b.n	801d4e6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned long int")
 801d25e:	683b      	ldr	r3, [r7, #0]
 801d260:	f103 040c 	add.w	r4, r3, #12
 801d264:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801d268:	494b      	ldr	r1, [pc, #300]	; (801d398 <_ZNK14MockNamedValue8toStringEv+0x37c>)
 801d26a:	4618      	mov	r0, r3
 801d26c:	f7ed fd7f 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801d270:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801d274:	4619      	mov	r1, r3
 801d276:	4620      	mov	r0, r4
 801d278:	f7ee f93d 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801d27c:	4603      	mov	r3, r0
 801d27e:	461c      	mov	r4, r3
 801d280:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801d284:	4618      	mov	r0, r3
 801d286:	f7ee f92a 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801d28a:	2c00      	cmp	r4, #0
 801d28c:	d03b      	beq.n	801d306 <_ZNK14MockNamedValue8toStringEv+0x2ea>
        return StringFrom(value_.unsignedLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongIntValue_);
 801d28e:	683b      	ldr	r3, [r7, #0]
 801d290:	699a      	ldr	r2, [r3, #24]
 801d292:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801d296:	4611      	mov	r1, r2
 801d298:	4618      	mov	r0, r3
 801d29a:	f7ee fe61 	bl	800bf60 <_Z10StringFromm>
 801d29e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801d2a2:	493a      	ldr	r1, [pc, #232]	; (801d38c <_ZNK14MockNamedValue8toStringEv+0x370>)
 801d2a4:	4618      	mov	r0, r3
 801d2a6:	f7ed fd62 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801d2aa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801d2ae:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801d2b2:	f107 0198 	add.w	r1, r7, #152	; 0x98
 801d2b6:	4618      	mov	r0, r3
 801d2b8:	f7ee f973 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 801d2bc:	683b      	ldr	r3, [r7, #0]
 801d2be:	699a      	ldr	r2, [r3, #24]
 801d2c0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801d2c4:	4611      	mov	r1, r2
 801d2c6:	4618      	mov	r0, r3
 801d2c8:	f7ee fd14 	bl	800bcf4 <_Z30BracketsFormattedHexStringFromm>
 801d2cc:	687b      	ldr	r3, [r7, #4]
 801d2ce:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801d2d2:	f107 0190 	add.w	r1, r7, #144	; 0x90
 801d2d6:	4618      	mov	r0, r3
 801d2d8:	f7ee f963 	bl	800b5a2 <_ZNK12SimpleStringplERKS_>
 801d2dc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801d2e0:	4618      	mov	r0, r3
 801d2e2:	f7ee f8fc 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801d2e6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801d2ea:	4618      	mov	r0, r3
 801d2ec:	f7ee f8f7 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801d2f0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801d2f4:	4618      	mov	r0, r3
 801d2f6:	f7ee f8f2 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801d2fa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801d2fe:	4618      	mov	r0, r3
 801d300:	f7ee f8ed 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801d304:	e0ef      	b.n	801d4e6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long long int")
        return StringFrom(value_.longLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longLongIntValue_);
    else if (type_ == "unsigned long long int")
        return StringFrom(value_.unsignedLongLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongLongIntValue_);
#endif
    else if (type_ == "const char*")
 801d306:	683b      	ldr	r3, [r7, #0]
 801d308:	f103 040c 	add.w	r4, r3, #12
 801d30c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d310:	4922      	ldr	r1, [pc, #136]	; (801d39c <_ZNK14MockNamedValue8toStringEv+0x380>)
 801d312:	4618      	mov	r0, r3
 801d314:	f7ed fd2b 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801d318:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d31c:	4619      	mov	r1, r3
 801d31e:	4620      	mov	r0, r4
 801d320:	f7ee f8e9 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801d324:	4603      	mov	r3, r0
 801d326:	461c      	mov	r4, r3
 801d328:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d32c:	4618      	mov	r0, r3
 801d32e:	f7ee f8d6 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801d332:	2c00      	cmp	r4, #0
 801d334:	d006      	beq.n	801d344 <_ZNK14MockNamedValue8toStringEv+0x328>
        return value_.stringValue_;
 801d336:	683b      	ldr	r3, [r7, #0]
 801d338:	699b      	ldr	r3, [r3, #24]
 801d33a:	4619      	mov	r1, r3
 801d33c:	6878      	ldr	r0, [r7, #4]
 801d33e:	f7ed fd16 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801d342:	e0d0      	b.n	801d4e6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "void*")
 801d344:	683b      	ldr	r3, [r7, #0]
 801d346:	f103 040c 	add.w	r4, r3, #12
 801d34a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801d34e:	4914      	ldr	r1, [pc, #80]	; (801d3a0 <_ZNK14MockNamedValue8toStringEv+0x384>)
 801d350:	4618      	mov	r0, r3
 801d352:	f7ed fd0c 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801d356:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801d35a:	4619      	mov	r1, r3
 801d35c:	4620      	mov	r0, r4
 801d35e:	f7ee f8ca 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801d362:	4603      	mov	r3, r0
 801d364:	461c      	mov	r4, r3
 801d366:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801d36a:	4618      	mov	r0, r3
 801d36c:	f7ee f8b7 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801d370:	2c00      	cmp	r4, #0
 801d372:	d017      	beq.n	801d3a4 <_ZNK14MockNamedValue8toStringEv+0x388>
        return StringFrom(value_.pointerValue_);
 801d374:	683b      	ldr	r3, [r7, #0]
 801d376:	699a      	ldr	r2, [r3, #24]
 801d378:	687b      	ldr	r3, [r7, #4]
 801d37a:	4611      	mov	r1, r2
 801d37c:	4618      	mov	r0, r3
 801d37e:	f7ee fb99 	bl	800bab4 <_Z10StringFromPKv>
 801d382:	e0b0      	b.n	801d4e6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
 801d384:	080244a4 	.word	0x080244a4
 801d388:	080244a0 	.word	0x080244a0
 801d38c:	08024590 	.word	0x08024590
 801d390:	080244ac 	.word	0x080244ac
 801d394:	080244bc 	.word	0x080244bc
 801d398:	080244c8 	.word	0x080244c8
 801d39c:	0802456c 	.word	0x0802456c
 801d3a0:	0802454c 	.word	0x0802454c
    else if (type_ == "void (*)()")
 801d3a4:	683b      	ldr	r3, [r7, #0]
 801d3a6:	f103 040c 	add.w	r4, r3, #12
 801d3aa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801d3ae:	4950      	ldr	r1, [pc, #320]	; (801d4f0 <_ZNK14MockNamedValue8toStringEv+0x4d4>)
 801d3b0:	4618      	mov	r0, r3
 801d3b2:	f7ed fcdc 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801d3b6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801d3ba:	4619      	mov	r1, r3
 801d3bc:	4620      	mov	r0, r4
 801d3be:	f7ee f89a 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801d3c2:	4603      	mov	r3, r0
 801d3c4:	461c      	mov	r4, r3
 801d3c6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801d3ca:	4618      	mov	r0, r3
 801d3cc:	f7ee f887 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801d3d0:	2c00      	cmp	r4, #0
 801d3d2:	d007      	beq.n	801d3e4 <_ZNK14MockNamedValue8toStringEv+0x3c8>
        return StringFrom(value_.functionPointerValue_);
 801d3d4:	683b      	ldr	r3, [r7, #0]
 801d3d6:	699a      	ldr	r2, [r3, #24]
 801d3d8:	687b      	ldr	r3, [r7, #4]
 801d3da:	4611      	mov	r1, r2
 801d3dc:	4618      	mov	r0, r3
 801d3de:	f7ee fb93 	bl	800bb08 <_Z10StringFromPFvvE>
 801d3e2:	e080      	b.n	801d4e6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const void*")
 801d3e4:	683b      	ldr	r3, [r7, #0]
 801d3e6:	f103 040c 	add.w	r4, r3, #12
 801d3ea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801d3ee:	4941      	ldr	r1, [pc, #260]	; (801d4f4 <_ZNK14MockNamedValue8toStringEv+0x4d8>)
 801d3f0:	4618      	mov	r0, r3
 801d3f2:	f7ed fcbc 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801d3f6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801d3fa:	4619      	mov	r1, r3
 801d3fc:	4620      	mov	r0, r4
 801d3fe:	f7ee f87a 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801d402:	4603      	mov	r3, r0
 801d404:	461c      	mov	r4, r3
 801d406:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801d40a:	4618      	mov	r0, r3
 801d40c:	f7ee f867 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801d410:	2c00      	cmp	r4, #0
 801d412:	d007      	beq.n	801d424 <_ZNK14MockNamedValue8toStringEv+0x408>
        return StringFrom(value_.constPointerValue_);
 801d414:	683b      	ldr	r3, [r7, #0]
 801d416:	699a      	ldr	r2, [r3, #24]
 801d418:	687b      	ldr	r3, [r7, #4]
 801d41a:	4611      	mov	r1, r2
 801d41c:	4618      	mov	r0, r3
 801d41e:	f7ee fb49 	bl	800bab4 <_Z10StringFromPKv>
 801d422:	e060      	b.n	801d4e6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "double")
 801d424:	683b      	ldr	r3, [r7, #0]
 801d426:	f103 040c 	add.w	r4, r3, #12
 801d42a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801d42e:	4932      	ldr	r1, [pc, #200]	; (801d4f8 <_ZNK14MockNamedValue8toStringEv+0x4dc>)
 801d430:	4618      	mov	r0, r3
 801d432:	f7ed fc9c 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801d436:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801d43a:	4619      	mov	r1, r3
 801d43c:	4620      	mov	r0, r4
 801d43e:	f7ee f85a 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801d442:	4603      	mov	r3, r0
 801d444:	461c      	mov	r4, r3
 801d446:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801d44a:	4618      	mov	r0, r3
 801d44c:	f7ee f847 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801d450:	2c00      	cmp	r4, #0
 801d452:	d00c      	beq.n	801d46e <_ZNK14MockNamedValue8toStringEv+0x452>
        return StringFrom(value_.doubleValue_.value);
 801d454:	683b      	ldr	r3, [r7, #0]
 801d456:	ed93 7b06 	vldr	d7, [r3, #24]
 801d45a:	687b      	ldr	r3, [r7, #4]
 801d45c:	2106      	movs	r1, #6
 801d45e:	eeb0 0a47 	vmov.f32	s0, s14
 801d462:	eef0 0a67 	vmov.f32	s1, s15
 801d466:	4618      	mov	r0, r3
 801d468:	f7ee fcfe 	bl	800be68 <_Z10StringFromdi>
 801d46c:	e03b      	b.n	801d4e6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const unsigned char*")
 801d46e:	683b      	ldr	r3, [r7, #0]
 801d470:	f103 040c 	add.w	r4, r3, #12
 801d474:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801d478:	4920      	ldr	r1, [pc, #128]	; (801d4fc <_ZNK14MockNamedValue8toStringEv+0x4e0>)
 801d47a:	4618      	mov	r0, r3
 801d47c:	f7ed fc77 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801d480:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801d484:	4619      	mov	r1, r3
 801d486:	4620      	mov	r0, r4
 801d488:	f7ee f835 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801d48c:	4603      	mov	r3, r0
 801d48e:	461c      	mov	r4, r3
 801d490:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801d494:	4618      	mov	r0, r3
 801d496:	f7ee f822 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801d49a:	2c00      	cmp	r4, #0
 801d49c:	d008      	beq.n	801d4b0 <_ZNK14MockNamedValue8toStringEv+0x494>
        return StringFromBinaryWithSizeOrNull(value_.memoryBufferValue_, size_);
 801d49e:	683b      	ldr	r3, [r7, #0]
 801d4a0:	6999      	ldr	r1, [r3, #24]
 801d4a2:	683b      	ldr	r3, [r7, #0]
 801d4a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801d4a6:	687b      	ldr	r3, [r7, #4]
 801d4a8:	4618      	mov	r0, r3
 801d4aa:	f7ee fe71 	bl	800c190 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 801d4ae:	e01a      	b.n	801d4e6 <_ZNK14MockNamedValue8toStringEv+0x4ca>

    if (comparator_)
 801d4b0:	683b      	ldr	r3, [r7, #0]
 801d4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d4b4:	2b00      	cmp	r3, #0
 801d4b6:	d00b      	beq.n	801d4d0 <_ZNK14MockNamedValue8toStringEv+0x4b4>
        return comparator_->valueToString(value_.constObjectPointerValue_);
 801d4b8:	683b      	ldr	r3, [r7, #0]
 801d4ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801d4bc:	683b      	ldr	r3, [r7, #0]
 801d4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d4c0:	681b      	ldr	r3, [r3, #0]
 801d4c2:	330c      	adds	r3, #12
 801d4c4:	681b      	ldr	r3, [r3, #0]
 801d4c6:	683a      	ldr	r2, [r7, #0]
 801d4c8:	6992      	ldr	r2, [r2, #24]
 801d4ca:	6878      	ldr	r0, [r7, #4]
 801d4cc:	4798      	blx	r3
 801d4ce:	e00a      	b.n	801d4e6 <_ZNK14MockNamedValue8toStringEv+0x4ca>

    return StringFromFormat("No comparator found for type: \"%s\"", type_.asCharString());
 801d4d0:	683b      	ldr	r3, [r7, #0]
 801d4d2:	330c      	adds	r3, #12
 801d4d4:	4618      	mov	r0, r3
 801d4d6:	f7ed ffd5 	bl	800b484 <_ZNK12SimpleString12asCharStringEv>
 801d4da:	4602      	mov	r2, r0
 801d4dc:	687b      	ldr	r3, [r7, #4]
 801d4de:	4908      	ldr	r1, [pc, #32]	; (801d500 <_ZNK14MockNamedValue8toStringEv+0x4e4>)
 801d4e0:	4618      	mov	r0, r3
 801d4e2:	f7ee fd03 	bl	800beec <_Z16StringFromFormatPKcz>

}
 801d4e6:	6878      	ldr	r0, [r7, #4]
 801d4e8:	37e4      	adds	r7, #228	; 0xe4
 801d4ea:	46bd      	mov	sp, r7
 801d4ec:	bd90      	pop	{r4, r7, pc}
 801d4ee:	bf00      	nop
 801d4f0:	08024560 	.word	0x08024560
 801d4f4:	08024554 	.word	0x08024554
 801d4f8:	08024544 	.word	0x08024544
 801d4fc:	08024578 	.word	0x08024578
 801d500:	08024594 	.word	0x08024594

0801d504 <_ZN22MockNamedValueListNode7setNextEPS_>:

void MockNamedValueListNode::setNext(MockNamedValueListNode* node)
{
 801d504:	b480      	push	{r7}
 801d506:	b083      	sub	sp, #12
 801d508:	af00      	add	r7, sp, #0
 801d50a:	6078      	str	r0, [r7, #4]
 801d50c:	6039      	str	r1, [r7, #0]
    next_ = node;
 801d50e:	687b      	ldr	r3, [r7, #4]
 801d510:	683a      	ldr	r2, [r7, #0]
 801d512:	605a      	str	r2, [r3, #4]
}
 801d514:	bf00      	nop
 801d516:	370c      	adds	r7, #12
 801d518:	46bd      	mov	sp, r7
 801d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d51e:	4770      	bx	lr

0801d520 <_ZN22MockNamedValueListNode4nextEv>:

MockNamedValueListNode* MockNamedValueListNode::next()
{
 801d520:	b480      	push	{r7}
 801d522:	b083      	sub	sp, #12
 801d524:	af00      	add	r7, sp, #0
 801d526:	6078      	str	r0, [r7, #4]
    return next_;
 801d528:	687b      	ldr	r3, [r7, #4]
 801d52a:	685b      	ldr	r3, [r3, #4]
}
 801d52c:	4618      	mov	r0, r3
 801d52e:	370c      	adds	r7, #12
 801d530:	46bd      	mov	sp, r7
 801d532:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d536:	4770      	bx	lr

0801d538 <_ZN22MockNamedValueListNode4itemEv>:

MockNamedValue* MockNamedValueListNode::item()
{
 801d538:	b480      	push	{r7}
 801d53a:	b083      	sub	sp, #12
 801d53c:	af00      	add	r7, sp, #0
 801d53e:	6078      	str	r0, [r7, #4]
    return data_;
 801d540:	687b      	ldr	r3, [r7, #4]
 801d542:	681b      	ldr	r3, [r3, #0]
}
 801d544:	4618      	mov	r0, r3
 801d546:	370c      	adds	r7, #12
 801d548:	46bd      	mov	sp, r7
 801d54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d54e:	4770      	bx	lr

0801d550 <_ZN22MockNamedValueListNode7destroyEv>:

void MockNamedValueListNode::destroy()
{
 801d550:	b580      	push	{r7, lr}
 801d552:	b082      	sub	sp, #8
 801d554:	af00      	add	r7, sp, #0
 801d556:	6078      	str	r0, [r7, #4]
    delete data_;
 801d558:	687b      	ldr	r3, [r7, #4]
 801d55a:	681b      	ldr	r3, [r3, #0]
 801d55c:	2b00      	cmp	r3, #0
 801d55e:	d004      	beq.n	801d56a <_ZN22MockNamedValueListNode7destroyEv+0x1a>
 801d560:	681a      	ldr	r2, [r3, #0]
 801d562:	3204      	adds	r2, #4
 801d564:	6812      	ldr	r2, [r2, #0]
 801d566:	4618      	mov	r0, r3
 801d568:	4790      	blx	r2
}
 801d56a:	bf00      	nop
 801d56c:	3708      	adds	r7, #8
 801d56e:	46bd      	mov	sp, r7
 801d570:	bd80      	pop	{r7, pc}

0801d572 <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>:

MockNamedValueListNode::MockNamedValueListNode(MockNamedValue* newValue)
 801d572:	b480      	push	{r7}
 801d574:	b083      	sub	sp, #12
 801d576:	af00      	add	r7, sp, #0
 801d578:	6078      	str	r0, [r7, #4]
 801d57a:	6039      	str	r1, [r7, #0]
    : data_(newValue), next_(NULLPTR)
 801d57c:	687b      	ldr	r3, [r7, #4]
 801d57e:	683a      	ldr	r2, [r7, #0]
 801d580:	601a      	str	r2, [r3, #0]
 801d582:	687b      	ldr	r3, [r7, #4]
 801d584:	2200      	movs	r2, #0
 801d586:	605a      	str	r2, [r3, #4]
{
}
 801d588:	687b      	ldr	r3, [r7, #4]
 801d58a:	4618      	mov	r0, r3
 801d58c:	370c      	adds	r7, #12
 801d58e:	46bd      	mov	sp, r7
 801d590:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d594:	4770      	bx	lr

0801d596 <_ZNK22MockNamedValueListNode7getNameEv>:

SimpleString MockNamedValueListNode::getName() const
{
 801d596:	b580      	push	{r7, lr}
 801d598:	b082      	sub	sp, #8
 801d59a:	af00      	add	r7, sp, #0
 801d59c:	6078      	str	r0, [r7, #4]
 801d59e:	6039      	str	r1, [r7, #0]
    return data_->getName();
 801d5a0:	683b      	ldr	r3, [r7, #0]
 801d5a2:	6819      	ldr	r1, [r3, #0]
 801d5a4:	683b      	ldr	r3, [r7, #0]
 801d5a6:	681b      	ldr	r3, [r3, #0]
 801d5a8:	681b      	ldr	r3, [r3, #0]
 801d5aa:	335c      	adds	r3, #92	; 0x5c
 801d5ac:	681b      	ldr	r3, [r3, #0]
 801d5ae:	687a      	ldr	r2, [r7, #4]
 801d5b0:	4610      	mov	r0, r2
 801d5b2:	4798      	blx	r3
}
 801d5b4:	6878      	ldr	r0, [r7, #4]
 801d5b6:	3708      	adds	r7, #8
 801d5b8:	46bd      	mov	sp, r7
 801d5ba:	bd80      	pop	{r7, pc}

0801d5bc <_ZNK22MockNamedValueListNode7getTypeEv>:

SimpleString MockNamedValueListNode::getType() const
{
 801d5bc:	b580      	push	{r7, lr}
 801d5be:	b082      	sub	sp, #8
 801d5c0:	af00      	add	r7, sp, #0
 801d5c2:	6078      	str	r0, [r7, #4]
 801d5c4:	6039      	str	r1, [r7, #0]
    return data_->getType();
 801d5c6:	683b      	ldr	r3, [r7, #0]
 801d5c8:	6819      	ldr	r1, [r3, #0]
 801d5ca:	683b      	ldr	r3, [r7, #0]
 801d5cc:	681b      	ldr	r3, [r3, #0]
 801d5ce:	681b      	ldr	r3, [r3, #0]
 801d5d0:	3360      	adds	r3, #96	; 0x60
 801d5d2:	681b      	ldr	r3, [r3, #0]
 801d5d4:	687a      	ldr	r2, [r7, #4]
 801d5d6:	4610      	mov	r0, r2
 801d5d8:	4798      	blx	r3
}
 801d5da:	6878      	ldr	r0, [r7, #4]
 801d5dc:	3708      	adds	r7, #8
 801d5de:	46bd      	mov	sp, r7
 801d5e0:	bd80      	pop	{r7, pc}

0801d5e2 <_ZN18MockNamedValueListC1Ev>:

MockNamedValueList::MockNamedValueList() : head_(NULLPTR)
 801d5e2:	b480      	push	{r7}
 801d5e4:	b083      	sub	sp, #12
 801d5e6:	af00      	add	r7, sp, #0
 801d5e8:	6078      	str	r0, [r7, #4]
 801d5ea:	687b      	ldr	r3, [r7, #4]
 801d5ec:	2200      	movs	r2, #0
 801d5ee:	601a      	str	r2, [r3, #0]
{
}
 801d5f0:	687b      	ldr	r3, [r7, #4]
 801d5f2:	4618      	mov	r0, r3
 801d5f4:	370c      	adds	r7, #12
 801d5f6:	46bd      	mov	sp, r7
 801d5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5fc:	4770      	bx	lr

0801d5fe <_ZN18MockNamedValueList5clearEv>:

void MockNamedValueList::clear()
{
 801d5fe:	b580      	push	{r7, lr}
 801d600:	b084      	sub	sp, #16
 801d602:	af00      	add	r7, sp, #0
 801d604:	6078      	str	r0, [r7, #4]
    while (head_) {
 801d606:	687b      	ldr	r3, [r7, #4]
 801d608:	681b      	ldr	r3, [r3, #0]
 801d60a:	2b00      	cmp	r3, #0
 801d60c:	d016      	beq.n	801d63c <_ZN18MockNamedValueList5clearEv+0x3e>
        MockNamedValueListNode* n = head_->next();
 801d60e:	687b      	ldr	r3, [r7, #4]
 801d610:	681b      	ldr	r3, [r3, #0]
 801d612:	4618      	mov	r0, r3
 801d614:	f7ff ff84 	bl	801d520 <_ZN22MockNamedValueListNode4nextEv>
 801d618:	60f8      	str	r0, [r7, #12]
        head_->destroy();
 801d61a:	687b      	ldr	r3, [r7, #4]
 801d61c:	681b      	ldr	r3, [r3, #0]
 801d61e:	4618      	mov	r0, r3
 801d620:	f7ff ff96 	bl	801d550 <_ZN22MockNamedValueListNode7destroyEv>
        delete head_;
 801d624:	687b      	ldr	r3, [r7, #4]
 801d626:	681b      	ldr	r3, [r3, #0]
 801d628:	2b00      	cmp	r3, #0
 801d62a:	d003      	beq.n	801d634 <_ZN18MockNamedValueList5clearEv+0x36>
 801d62c:	2108      	movs	r1, #8
 801d62e:	4618      	mov	r0, r3
 801d630:	f7ea ffee 	bl	8008610 <_ZdlPvj>
        head_ = n;
 801d634:	687b      	ldr	r3, [r7, #4]
 801d636:	68fa      	ldr	r2, [r7, #12]
 801d638:	601a      	str	r2, [r3, #0]
    while (head_) {
 801d63a:	e7e4      	b.n	801d606 <_ZN18MockNamedValueList5clearEv+0x8>
    }
}
 801d63c:	bf00      	nop
 801d63e:	3710      	adds	r7, #16
 801d640:	46bd      	mov	sp, r7
 801d642:	bd80      	pop	{r7, pc}

0801d644 <_ZN18MockNamedValueList3addEP14MockNamedValue>:

void MockNamedValueList::add(MockNamedValue* newValue)
{
 801d644:	b590      	push	{r4, r7, lr}
 801d646:	b085      	sub	sp, #20
 801d648:	af00      	add	r7, sp, #0
 801d64a:	6078      	str	r0, [r7, #4]
 801d64c:	6039      	str	r1, [r7, #0]
    MockNamedValueListNode* newNode = new MockNamedValueListNode(newValue);
 801d64e:	f44f 7210 	mov.w	r2, #576	; 0x240
 801d652:	4916      	ldr	r1, [pc, #88]	; (801d6ac <_ZN18MockNamedValueList3addEP14MockNamedValue+0x68>)
 801d654:	2008      	movs	r0, #8
 801d656:	f7ea ffc7 	bl	80085e8 <_ZnwjPKci>
 801d65a:	4604      	mov	r4, r0
 801d65c:	6839      	ldr	r1, [r7, #0]
 801d65e:	4620      	mov	r0, r4
 801d660:	f7ff ff87 	bl	801d572 <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>
 801d664:	60bc      	str	r4, [r7, #8]
    if (head_ == NULLPTR)
 801d666:	687b      	ldr	r3, [r7, #4]
 801d668:	681b      	ldr	r3, [r3, #0]
 801d66a:	2b00      	cmp	r3, #0
 801d66c:	d103      	bne.n	801d676 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x32>
        head_ = newNode;
 801d66e:	687b      	ldr	r3, [r7, #4]
 801d670:	68ba      	ldr	r2, [r7, #8]
 801d672:	601a      	str	r2, [r3, #0]
    else {
        MockNamedValueListNode* lastNode = head_;
        while (lastNode->next()) lastNode = lastNode->next();
        lastNode->setNext(newNode);
    }
}
 801d674:	e016      	b.n	801d6a4 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x60>
        MockNamedValueListNode* lastNode = head_;
 801d676:	687b      	ldr	r3, [r7, #4]
 801d678:	681b      	ldr	r3, [r3, #0]
 801d67a:	60fb      	str	r3, [r7, #12]
        while (lastNode->next()) lastNode = lastNode->next();
 801d67c:	68f8      	ldr	r0, [r7, #12]
 801d67e:	f7ff ff4f 	bl	801d520 <_ZN22MockNamedValueListNode4nextEv>
 801d682:	4603      	mov	r3, r0
 801d684:	2b00      	cmp	r3, #0
 801d686:	bf14      	ite	ne
 801d688:	2301      	movne	r3, #1
 801d68a:	2300      	moveq	r3, #0
 801d68c:	b2db      	uxtb	r3, r3
 801d68e:	2b00      	cmp	r3, #0
 801d690:	d004      	beq.n	801d69c <_ZN18MockNamedValueList3addEP14MockNamedValue+0x58>
 801d692:	68f8      	ldr	r0, [r7, #12]
 801d694:	f7ff ff44 	bl	801d520 <_ZN22MockNamedValueListNode4nextEv>
 801d698:	60f8      	str	r0, [r7, #12]
 801d69a:	e7ef      	b.n	801d67c <_ZN18MockNamedValueList3addEP14MockNamedValue+0x38>
        lastNode->setNext(newNode);
 801d69c:	68b9      	ldr	r1, [r7, #8]
 801d69e:	68f8      	ldr	r0, [r7, #12]
 801d6a0:	f7ff ff30 	bl	801d504 <_ZN22MockNamedValueListNode7setNextEPS_>
}
 801d6a4:	bf00      	nop
 801d6a6:	3714      	adds	r7, #20
 801d6a8:	46bd      	mov	sp, r7
 801d6aa:	bd90      	pop	{r4, r7, pc}
 801d6ac:	080244dc 	.word	0x080244dc

0801d6b0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>:

MockNamedValue* MockNamedValueList::getValueByName(const SimpleString& name)
{
 801d6b0:	b590      	push	{r4, r7, lr}
 801d6b2:	b087      	sub	sp, #28
 801d6b4:	af00      	add	r7, sp, #0
 801d6b6:	6078      	str	r0, [r7, #4]
 801d6b8:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801d6ba:	687b      	ldr	r3, [r7, #4]
 801d6bc:	681b      	ldr	r3, [r3, #0]
 801d6be:	617b      	str	r3, [r7, #20]
 801d6c0:	697b      	ldr	r3, [r7, #20]
 801d6c2:	2b00      	cmp	r3, #0
 801d6c4:	d01e      	beq.n	801d704 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x54>
        if (p->getName() == name)
 801d6c6:	f107 030c 	add.w	r3, r7, #12
 801d6ca:	6979      	ldr	r1, [r7, #20]
 801d6cc:	4618      	mov	r0, r3
 801d6ce:	f7ff ff62 	bl	801d596 <_ZNK22MockNamedValueListNode7getNameEv>
 801d6d2:	f107 030c 	add.w	r3, r7, #12
 801d6d6:	6839      	ldr	r1, [r7, #0]
 801d6d8:	4618      	mov	r0, r3
 801d6da:	f7ed ff0c 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801d6de:	4603      	mov	r3, r0
 801d6e0:	461c      	mov	r4, r3
 801d6e2:	f107 030c 	add.w	r3, r7, #12
 801d6e6:	4618      	mov	r0, r3
 801d6e8:	f7ed fef9 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801d6ec:	2c00      	cmp	r4, #0
 801d6ee:	d004      	beq.n	801d6fa <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x4a>
            return p->item();
 801d6f0:	6978      	ldr	r0, [r7, #20]
 801d6f2:	f7ff ff21 	bl	801d538 <_ZN22MockNamedValueListNode4itemEv>
 801d6f6:	4603      	mov	r3, r0
 801d6f8:	e005      	b.n	801d706 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x56>
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801d6fa:	6978      	ldr	r0, [r7, #20]
 801d6fc:	f7ff ff10 	bl	801d520 <_ZN22MockNamedValueListNode4nextEv>
 801d700:	6178      	str	r0, [r7, #20]
 801d702:	e7dd      	b.n	801d6c0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x10>
    return NULLPTR;
 801d704:	2300      	movs	r3, #0
}
 801d706:	4618      	mov	r0, r3
 801d708:	371c      	adds	r7, #28
 801d70a:	46bd      	mov	sp, r7
 801d70c:	bd90      	pop	{r4, r7, pc}

0801d70e <_ZN18MockNamedValueList5beginEv>:

MockNamedValueListNode* MockNamedValueList::begin()
{
 801d70e:	b480      	push	{r7}
 801d710:	b083      	sub	sp, #12
 801d712:	af00      	add	r7, sp, #0
 801d714:	6078      	str	r0, [r7, #4]
    return head_;
 801d716:	687b      	ldr	r3, [r7, #4]
 801d718:	681b      	ldr	r3, [r3, #0]
}
 801d71a:	4618      	mov	r0, r3
 801d71c:	370c      	adds	r7, #12
 801d71e:	46bd      	mov	sp, r7
 801d720:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d724:	4770      	bx	lr

0801d726 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>:

struct MockNamedValueComparatorsAndCopiersRepositoryNode
{
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801d726:	b580      	push	{r7, lr}
 801d728:	b084      	sub	sp, #16
 801d72a:	af00      	add	r7, sp, #0
 801d72c:	60f8      	str	r0, [r7, #12]
 801d72e:	60b9      	str	r1, [r7, #8]
 801d730:	607a      	str	r2, [r7, #4]
 801d732:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(NULLPTR), next_(next) {}
 801d734:	68fb      	ldr	r3, [r7, #12]
 801d736:	68b9      	ldr	r1, [r7, #8]
 801d738:	4618      	mov	r0, r3
 801d73a:	f7ed fb6c 	bl	800ae16 <_ZN12SimpleStringC1ERKS_>
 801d73e:	68fb      	ldr	r3, [r7, #12]
 801d740:	687a      	ldr	r2, [r7, #4]
 801d742:	609a      	str	r2, [r3, #8]
 801d744:	68fb      	ldr	r3, [r7, #12]
 801d746:	2200      	movs	r2, #0
 801d748:	60da      	str	r2, [r3, #12]
 801d74a:	68fb      	ldr	r3, [r7, #12]
 801d74c:	683a      	ldr	r2, [r7, #0]
 801d74e:	611a      	str	r2, [r3, #16]
 801d750:	68fb      	ldr	r3, [r7, #12]
 801d752:	4618      	mov	r0, r3
 801d754:	3710      	adds	r7, #16
 801d756:	46bd      	mov	sp, r7
 801d758:	bd80      	pop	{r7, pc}

0801d75a <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801d75a:	b580      	push	{r7, lr}
 801d75c:	b084      	sub	sp, #16
 801d75e:	af00      	add	r7, sp, #0
 801d760:	60f8      	str	r0, [r7, #12]
 801d762:	60b9      	str	r1, [r7, #8]
 801d764:	607a      	str	r2, [r7, #4]
 801d766:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(NULLPTR), copier_(copier), next_(next) {}
 801d768:	68fb      	ldr	r3, [r7, #12]
 801d76a:	68b9      	ldr	r1, [r7, #8]
 801d76c:	4618      	mov	r0, r3
 801d76e:	f7ed fb52 	bl	800ae16 <_ZN12SimpleStringC1ERKS_>
 801d772:	68fb      	ldr	r3, [r7, #12]
 801d774:	2200      	movs	r2, #0
 801d776:	609a      	str	r2, [r3, #8]
 801d778:	68fb      	ldr	r3, [r7, #12]
 801d77a:	687a      	ldr	r2, [r7, #4]
 801d77c:	60da      	str	r2, [r3, #12]
 801d77e:	68fb      	ldr	r3, [r7, #12]
 801d780:	683a      	ldr	r2, [r7, #0]
 801d782:	611a      	str	r2, [r3, #16]
 801d784:	68fb      	ldr	r3, [r7, #12]
 801d786:	4618      	mov	r0, r3
 801d788:	3710      	adds	r7, #16
 801d78a:	46bd      	mov	sp, r7
 801d78c:	bd80      	pop	{r7, pc}

0801d78e <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801d78e:	b580      	push	{r7, lr}
 801d790:	b084      	sub	sp, #16
 801d792:	af00      	add	r7, sp, #0
 801d794:	60f8      	str	r0, [r7, #12]
 801d796:	60b9      	str	r1, [r7, #8]
 801d798:	607a      	str	r2, [r7, #4]
 801d79a:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(copier), next_(next) {}
 801d79c:	68fb      	ldr	r3, [r7, #12]
 801d79e:	68b9      	ldr	r1, [r7, #8]
 801d7a0:	4618      	mov	r0, r3
 801d7a2:	f7ed fb38 	bl	800ae16 <_ZN12SimpleStringC1ERKS_>
 801d7a6:	68fb      	ldr	r3, [r7, #12]
 801d7a8:	687a      	ldr	r2, [r7, #4]
 801d7aa:	609a      	str	r2, [r3, #8]
 801d7ac:	68fb      	ldr	r3, [r7, #12]
 801d7ae:	683a      	ldr	r2, [r7, #0]
 801d7b0:	60da      	str	r2, [r3, #12]
 801d7b2:	68fb      	ldr	r3, [r7, #12]
 801d7b4:	69ba      	ldr	r2, [r7, #24]
 801d7b6:	611a      	str	r2, [r3, #16]
 801d7b8:	68fb      	ldr	r3, [r7, #12]
 801d7ba:	4618      	mov	r0, r3
 801d7bc:	3710      	adds	r7, #16
 801d7be:	46bd      	mov	sp, r7
 801d7c0:	bd80      	pop	{r7, pc}
	...

0801d7c4 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>:
    MockNamedValueComparator* comparator_;
    MockNamedValueCopier* copier_;
    MockNamedValueComparatorsAndCopiersRepositoryNode* next_;
};

MockNamedValueComparatorsAndCopiersRepository::MockNamedValueComparatorsAndCopiersRepository() : head_(NULLPTR)
 801d7c4:	b480      	push	{r7}
 801d7c6:	b083      	sub	sp, #12
 801d7c8:	af00      	add	r7, sp, #0
 801d7ca:	6078      	str	r0, [r7, #4]
 801d7cc:	4a06      	ldr	r2, [pc, #24]	; (801d7e8 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev+0x24>)
 801d7ce:	687b      	ldr	r3, [r7, #4]
 801d7d0:	601a      	str	r2, [r3, #0]
 801d7d2:	687b      	ldr	r3, [r7, #4]
 801d7d4:	2200      	movs	r2, #0
 801d7d6:	605a      	str	r2, [r3, #4]
{

}
 801d7d8:	687b      	ldr	r3, [r7, #4]
 801d7da:	4618      	mov	r0, r3
 801d7dc:	370c      	adds	r7, #12
 801d7de:	46bd      	mov	sp, r7
 801d7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7e4:	4770      	bx	lr
 801d7e6:	bf00      	nop
 801d7e8:	0802682c 	.word	0x0802682c

0801d7ec <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>:

MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801d7ec:	b580      	push	{r7, lr}
 801d7ee:	b082      	sub	sp, #8
 801d7f0:	af00      	add	r7, sp, #0
 801d7f2:	6078      	str	r0, [r7, #4]
 801d7f4:	4a05      	ldr	r2, [pc, #20]	; (801d80c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev+0x20>)
 801d7f6:	687b      	ldr	r3, [r7, #4]
 801d7f8:	601a      	str	r2, [r3, #0]
{
    clear();
 801d7fa:	6878      	ldr	r0, [r7, #4]
 801d7fc:	f000 f825 	bl	801d84a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
}
 801d800:	687b      	ldr	r3, [r7, #4]
 801d802:	4618      	mov	r0, r3
 801d804:	3708      	adds	r7, #8
 801d806:	46bd      	mov	sp, r7
 801d808:	bd80      	pop	{r7, pc}
 801d80a:	bf00      	nop
 801d80c:	0802682c 	.word	0x0802682c

0801d810 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD0Ev>:
MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801d810:	b580      	push	{r7, lr}
 801d812:	b082      	sub	sp, #8
 801d814:	af00      	add	r7, sp, #0
 801d816:	6078      	str	r0, [r7, #4]
}
 801d818:	6878      	ldr	r0, [r7, #4]
 801d81a:	f7ff ffe7 	bl	801d7ec <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 801d81e:	2108      	movs	r1, #8
 801d820:	6878      	ldr	r0, [r7, #4]
 801d822:	f7ea fef5 	bl	8008610 <_ZdlPvj>
 801d826:	687b      	ldr	r3, [r7, #4]
 801d828:	4618      	mov	r0, r3
 801d82a:	3708      	adds	r7, #8
 801d82c:	46bd      	mov	sp, r7
 801d82e:	bd80      	pop	{r7, pc}

0801d830 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>:
struct MockNamedValueComparatorsAndCopiersRepositoryNode
 801d830:	b580      	push	{r7, lr}
 801d832:	b082      	sub	sp, #8
 801d834:	af00      	add	r7, sp, #0
 801d836:	6078      	str	r0, [r7, #4]
 801d838:	687b      	ldr	r3, [r7, #4]
 801d83a:	4618      	mov	r0, r3
 801d83c:	f7ed fe4f 	bl	800b4de <_ZN12SimpleStringD1Ev>
 801d840:	687b      	ldr	r3, [r7, #4]
 801d842:	4618      	mov	r0, r3
 801d844:	3708      	adds	r7, #8
 801d846:	46bd      	mov	sp, r7
 801d848:	bd80      	pop	{r7, pc}

0801d84a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>:

void MockNamedValueComparatorsAndCopiersRepository::clear()
{
 801d84a:	b590      	push	{r4, r7, lr}
 801d84c:	b085      	sub	sp, #20
 801d84e:	af00      	add	r7, sp, #0
 801d850:	6078      	str	r0, [r7, #4]
    while (head_) {
 801d852:	687b      	ldr	r3, [r7, #4]
 801d854:	685b      	ldr	r3, [r3, #4]
 801d856:	2b00      	cmp	r3, #0
 801d858:	d012      	beq.n	801d880 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x36>
        MockNamedValueComparatorsAndCopiersRepositoryNode* next = head_->next_;
 801d85a:	687b      	ldr	r3, [r7, #4]
 801d85c:	685b      	ldr	r3, [r3, #4]
 801d85e:	691b      	ldr	r3, [r3, #16]
 801d860:	60fb      	str	r3, [r7, #12]
        delete head_;
 801d862:	687b      	ldr	r3, [r7, #4]
 801d864:	685c      	ldr	r4, [r3, #4]
 801d866:	2c00      	cmp	r4, #0
 801d868:	d006      	beq.n	801d878 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x2e>
 801d86a:	4620      	mov	r0, r4
 801d86c:	f7ff ffe0 	bl	801d830 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>
 801d870:	2114      	movs	r1, #20
 801d872:	4620      	mov	r0, r4
 801d874:	f7ea fecc 	bl	8008610 <_ZdlPvj>
        head_ = next;
 801d878:	687b      	ldr	r3, [r7, #4]
 801d87a:	68fa      	ldr	r2, [r7, #12]
 801d87c:	605a      	str	r2, [r3, #4]
    while (head_) {
 801d87e:	e7e8      	b.n	801d852 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x8>
    }
}
 801d880:	bf00      	nop
 801d882:	3714      	adds	r7, #20
 801d884:	46bd      	mov	sp, r7
 801d886:	bd90      	pop	{r4, r7, pc}

0801d888 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockNamedValueComparatorsAndCopiersRepository::installComparator(const SimpleString& name, MockNamedValueComparator& comparator)
{
 801d888:	b590      	push	{r4, r7, lr}
 801d88a:	b085      	sub	sp, #20
 801d88c:	af00      	add	r7, sp, #0
 801d88e:	60f8      	str	r0, [r7, #12]
 801d890:	60b9      	str	r1, [r7, #8]
 801d892:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &comparator, head_);
 801d894:	f240 227a 	movw	r2, #634	; 0x27a
 801d898:	4908      	ldr	r1, [pc, #32]	; (801d8bc <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x34>)
 801d89a:	2014      	movs	r0, #20
 801d89c:	f7ea fea4 	bl	80085e8 <_ZnwjPKci>
 801d8a0:	4604      	mov	r4, r0
 801d8a2:	68fb      	ldr	r3, [r7, #12]
 801d8a4:	685b      	ldr	r3, [r3, #4]
 801d8a6:	687a      	ldr	r2, [r7, #4]
 801d8a8:	68b9      	ldr	r1, [r7, #8]
 801d8aa:	4620      	mov	r0, r4
 801d8ac:	f7ff ff3b 	bl	801d726 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>
 801d8b0:	68fb      	ldr	r3, [r7, #12]
 801d8b2:	605c      	str	r4, [r3, #4]
}
 801d8b4:	bf00      	nop
 801d8b6:	3714      	adds	r7, #20
 801d8b8:	46bd      	mov	sp, r7
 801d8ba:	bd90      	pop	{r4, r7, pc}
 801d8bc:	080244dc 	.word	0x080244dc

0801d8c0 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockNamedValueComparatorsAndCopiersRepository::installCopier(const SimpleString& name, MockNamedValueCopier& copier)
{
 801d8c0:	b590      	push	{r4, r7, lr}
 801d8c2:	b085      	sub	sp, #20
 801d8c4:	af00      	add	r7, sp, #0
 801d8c6:	60f8      	str	r0, [r7, #12]
 801d8c8:	60b9      	str	r1, [r7, #8]
 801d8ca:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &copier, head_);
 801d8cc:	f240 227f 	movw	r2, #639	; 0x27f
 801d8d0:	4908      	ldr	r1, [pc, #32]	; (801d8f4 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier+0x34>)
 801d8d2:	2014      	movs	r0, #20
 801d8d4:	f7ea fe88 	bl	80085e8 <_ZnwjPKci>
 801d8d8:	4604      	mov	r4, r0
 801d8da:	68fb      	ldr	r3, [r7, #12]
 801d8dc:	685b      	ldr	r3, [r3, #4]
 801d8de:	687a      	ldr	r2, [r7, #4]
 801d8e0:	68b9      	ldr	r1, [r7, #8]
 801d8e2:	4620      	mov	r0, r4
 801d8e4:	f7ff ff39 	bl	801d75a <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>
 801d8e8:	68fb      	ldr	r3, [r7, #12]
 801d8ea:	605c      	str	r4, [r3, #4]
}
 801d8ec:	bf00      	nop
 801d8ee:	3714      	adds	r7, #20
 801d8f0:	46bd      	mov	sp, r7
 801d8f2:	bd90      	pop	{r4, r7, pc}
 801d8f4:	080244dc 	.word	0x080244dc

0801d8f8 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString>:

MockNamedValueComparator* MockNamedValueComparatorsAndCopiersRepository::getComparatorForType(const SimpleString& name)
{
 801d8f8:	b580      	push	{r7, lr}
 801d8fa:	b084      	sub	sp, #16
 801d8fc:	af00      	add	r7, sp, #0
 801d8fe:	6078      	str	r0, [r7, #4]
 801d900:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801d902:	687b      	ldr	r3, [r7, #4]
 801d904:	685b      	ldr	r3, [r3, #4]
 801d906:	60fb      	str	r3, [r7, #12]
 801d908:	68fb      	ldr	r3, [r7, #12]
 801d90a:	2b00      	cmp	r3, #0
 801d90c:	d017      	beq.n	801d93e <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->comparator_) return p->comparator_;
 801d90e:	68fb      	ldr	r3, [r7, #12]
 801d910:	6839      	ldr	r1, [r7, #0]
 801d912:	4618      	mov	r0, r3
 801d914:	f7ed fdef 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801d918:	4603      	mov	r3, r0
 801d91a:	2b00      	cmp	r3, #0
 801d91c:	d005      	beq.n	801d92a <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801d91e:	68fb      	ldr	r3, [r7, #12]
 801d920:	689b      	ldr	r3, [r3, #8]
 801d922:	2b00      	cmp	r3, #0
 801d924:	d001      	beq.n	801d92a <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801d926:	2301      	movs	r3, #1
 801d928:	e000      	b.n	801d92c <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x34>
 801d92a:	2300      	movs	r3, #0
 801d92c:	2b00      	cmp	r3, #0
 801d92e:	d002      	beq.n	801d936 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x3e>
 801d930:	68fb      	ldr	r3, [r7, #12]
 801d932:	689b      	ldr	r3, [r3, #8]
 801d934:	e004      	b.n	801d940 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801d936:	68fb      	ldr	r3, [r7, #12]
 801d938:	691b      	ldr	r3, [r3, #16]
 801d93a:	60fb      	str	r3, [r7, #12]
 801d93c:	e7e4      	b.n	801d908 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801d93e:	2300      	movs	r3, #0
}
 801d940:	4618      	mov	r0, r3
 801d942:	3710      	adds	r7, #16
 801d944:	46bd      	mov	sp, r7
 801d946:	bd80      	pop	{r7, pc}

0801d948 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString>:

MockNamedValueCopier* MockNamedValueComparatorsAndCopiersRepository::getCopierForType(const SimpleString& name)
{
 801d948:	b580      	push	{r7, lr}
 801d94a:	b084      	sub	sp, #16
 801d94c:	af00      	add	r7, sp, #0
 801d94e:	6078      	str	r0, [r7, #4]
 801d950:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801d952:	687b      	ldr	r3, [r7, #4]
 801d954:	685b      	ldr	r3, [r3, #4]
 801d956:	60fb      	str	r3, [r7, #12]
 801d958:	68fb      	ldr	r3, [r7, #12]
 801d95a:	2b00      	cmp	r3, #0
 801d95c:	d017      	beq.n	801d98e <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->copier_) return p->copier_;
 801d95e:	68fb      	ldr	r3, [r7, #12]
 801d960:	6839      	ldr	r1, [r7, #0]
 801d962:	4618      	mov	r0, r3
 801d964:	f7ed fdc7 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801d968:	4603      	mov	r3, r0
 801d96a:	2b00      	cmp	r3, #0
 801d96c:	d005      	beq.n	801d97a <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801d96e:	68fb      	ldr	r3, [r7, #12]
 801d970:	68db      	ldr	r3, [r3, #12]
 801d972:	2b00      	cmp	r3, #0
 801d974:	d001      	beq.n	801d97a <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801d976:	2301      	movs	r3, #1
 801d978:	e000      	b.n	801d97c <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x34>
 801d97a:	2300      	movs	r3, #0
 801d97c:	2b00      	cmp	r3, #0
 801d97e:	d002      	beq.n	801d986 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x3e>
 801d980:	68fb      	ldr	r3, [r7, #12]
 801d982:	68db      	ldr	r3, [r3, #12]
 801d984:	e004      	b.n	801d990 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801d986:	68fb      	ldr	r3, [r7, #12]
 801d988:	691b      	ldr	r3, [r3, #16]
 801d98a:	60fb      	str	r3, [r7, #12]
 801d98c:	e7e4      	b.n	801d958 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801d98e:	2300      	movs	r3, #0
}
 801d990:	4618      	mov	r0, r3
 801d992:	3710      	adds	r7, #16
 801d994:	46bd      	mov	sp, r7
 801d996:	bd80      	pop	{r7, pc}

0801d998 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>:

void MockNamedValueComparatorsAndCopiersRepository::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 801d998:	b590      	push	{r4, r7, lr}
 801d99a:	b087      	sub	sp, #28
 801d99c:	af02      	add	r7, sp, #8
 801d99e:	6078      	str	r0, [r7, #4]
 801d9a0:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801d9a2:	683b      	ldr	r3, [r7, #0]
 801d9a4:	685b      	ldr	r3, [r3, #4]
 801d9a6:	60fb      	str	r3, [r7, #12]
 801d9a8:	68fb      	ldr	r3, [r7, #12]
 801d9aa:	2b00      	cmp	r3, #0
 801d9ac:	d018      	beq.n	801d9e0 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x48>
      head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(p->name_, p->comparator_, p->copier_, head_);
 801d9ae:	f240 2293 	movw	r2, #659	; 0x293
 801d9b2:	490d      	ldr	r1, [pc, #52]	; (801d9e8 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x50>)
 801d9b4:	2014      	movs	r0, #20
 801d9b6:	f7ea fe17 	bl	80085e8 <_ZnwjPKci>
 801d9ba:	4604      	mov	r4, r0
 801d9bc:	68f9      	ldr	r1, [r7, #12]
 801d9be:	68fb      	ldr	r3, [r7, #12]
 801d9c0:	689a      	ldr	r2, [r3, #8]
 801d9c2:	68fb      	ldr	r3, [r7, #12]
 801d9c4:	68d8      	ldr	r0, [r3, #12]
 801d9c6:	687b      	ldr	r3, [r7, #4]
 801d9c8:	685b      	ldr	r3, [r3, #4]
 801d9ca:	9300      	str	r3, [sp, #0]
 801d9cc:	4603      	mov	r3, r0
 801d9ce:	4620      	mov	r0, r4
 801d9d0:	f7ff fedd 	bl	801d78e <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>
 801d9d4:	687b      	ldr	r3, [r7, #4]
 801d9d6:	605c      	str	r4, [r3, #4]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801d9d8:	68fb      	ldr	r3, [r7, #12]
 801d9da:	691b      	ldr	r3, [r3, #16]
 801d9dc:	60fb      	str	r3, [r7, #12]
 801d9de:	e7e3      	b.n	801d9a8 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x10>
}
 801d9e0:	bf00      	nop
 801d9e2:	3714      	adds	r7, #20
 801d9e4:	46bd      	mov	sp, r7
 801d9e6:	bd90      	pop	{r4, r7, pc}
 801d9e8:	080244dc 	.word	0x080244dc

0801d9ec <_ZN10TestFilterC1ERK12SimpleString>:

TestFilter::TestFilter() : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
{
}

TestFilter::TestFilter(const SimpleString& filter) : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
 801d9ec:	b580      	push	{r7, lr}
 801d9ee:	b082      	sub	sp, #8
 801d9f0:	af00      	add	r7, sp, #0
 801d9f2:	6078      	str	r0, [r7, #4]
 801d9f4:	6039      	str	r1, [r7, #0]
 801d9f6:	687b      	ldr	r3, [r7, #4]
 801d9f8:	490b      	ldr	r1, [pc, #44]	; (801da28 <_ZN10TestFilterC1ERK12SimpleString+0x3c>)
 801d9fa:	4618      	mov	r0, r3
 801d9fc:	f7ed f9b7 	bl	800ad6e <_ZN12SimpleStringC1EPKc>
 801da00:	687b      	ldr	r3, [r7, #4]
 801da02:	2200      	movs	r2, #0
 801da04:	721a      	strb	r2, [r3, #8]
 801da06:	687b      	ldr	r3, [r7, #4]
 801da08:	2200      	movs	r2, #0
 801da0a:	725a      	strb	r2, [r3, #9]
 801da0c:	687b      	ldr	r3, [r7, #4]
 801da0e:	2200      	movs	r2, #0
 801da10:	60da      	str	r2, [r3, #12]
{
    filter_ = filter;
 801da12:	687b      	ldr	r3, [r7, #4]
 801da14:	6839      	ldr	r1, [r7, #0]
 801da16:	4618      	mov	r0, r3
 801da18:	f7ed fa15 	bl	800ae46 <_ZN12SimpleStringaSERKS_>
}
 801da1c:	687b      	ldr	r3, [r7, #4]
 801da1e:	4618      	mov	r0, r3
 801da20:	3708      	adds	r7, #8
 801da22:	46bd      	mov	sp, r7
 801da24:	bd80      	pop	{r7, pc}
 801da26:	bf00      	nop
 801da28:	080245b8 	.word	0x080245b8

0801da2c <_ZN10TestFilter3addEPS_>:
{
    filter_ = filter;
}

TestFilter* TestFilter::add(TestFilter* filter)
{
 801da2c:	b480      	push	{r7}
 801da2e:	b083      	sub	sp, #12
 801da30:	af00      	add	r7, sp, #0
 801da32:	6078      	str	r0, [r7, #4]
 801da34:	6039      	str	r1, [r7, #0]
    next_ = filter;
 801da36:	687b      	ldr	r3, [r7, #4]
 801da38:	683a      	ldr	r2, [r7, #0]
 801da3a:	60da      	str	r2, [r3, #12]
    return this;
 801da3c:	687b      	ldr	r3, [r7, #4]
}
 801da3e:	4618      	mov	r0, r3
 801da40:	370c      	adds	r7, #12
 801da42:	46bd      	mov	sp, r7
 801da44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da48:	4770      	bx	lr

0801da4a <_ZNK10TestFilter7getNextEv>:

TestFilter* TestFilter::getNext() const
{
 801da4a:	b480      	push	{r7}
 801da4c:	b083      	sub	sp, #12
 801da4e:	af00      	add	r7, sp, #0
 801da50:	6078      	str	r0, [r7, #4]
    return next_;
 801da52:	687b      	ldr	r3, [r7, #4]
 801da54:	68db      	ldr	r3, [r3, #12]
}
 801da56:	4618      	mov	r0, r3
 801da58:	370c      	adds	r7, #12
 801da5a:	46bd      	mov	sp, r7
 801da5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da60:	4770      	bx	lr

0801da62 <_ZN10TestFilter14strictMatchingEv>:

void TestFilter::strictMatching()
{
 801da62:	b480      	push	{r7}
 801da64:	b083      	sub	sp, #12
 801da66:	af00      	add	r7, sp, #0
 801da68:	6078      	str	r0, [r7, #4]
    strictMatching_ = true;
 801da6a:	687b      	ldr	r3, [r7, #4]
 801da6c:	2201      	movs	r2, #1
 801da6e:	721a      	strb	r2, [r3, #8]
}
 801da70:	bf00      	nop
 801da72:	370c      	adds	r7, #12
 801da74:	46bd      	mov	sp, r7
 801da76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da7a:	4770      	bx	lr

0801da7c <_ZN10TestFilter14invertMatchingEv>:

void TestFilter::invertMatching()
{
 801da7c:	b480      	push	{r7}
 801da7e:	b083      	sub	sp, #12
 801da80:	af00      	add	r7, sp, #0
 801da82:	6078      	str	r0, [r7, #4]
    invertMatching_ = true;
 801da84:	687b      	ldr	r3, [r7, #4]
 801da86:	2201      	movs	r2, #1
 801da88:	725a      	strb	r2, [r3, #9]
}
 801da8a:	bf00      	nop
 801da8c:	370c      	adds	r7, #12
 801da8e:	46bd      	mov	sp, r7
 801da90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da94:	4770      	bx	lr

0801da96 <_ZNK10TestFilter5matchERK12SimpleString>:

bool TestFilter::match(const SimpleString& name) const
{
 801da96:	b580      	push	{r7, lr}
 801da98:	b084      	sub	sp, #16
 801da9a:	af00      	add	r7, sp, #0
 801da9c:	6078      	str	r0, [r7, #4]
 801da9e:	6039      	str	r1, [r7, #0]
    bool matches = false;
 801daa0:	2300      	movs	r3, #0
 801daa2:	73fb      	strb	r3, [r7, #15]

    if(strictMatching_)
 801daa4:	687b      	ldr	r3, [r7, #4]
 801daa6:	7a1b      	ldrb	r3, [r3, #8]
 801daa8:	2b00      	cmp	r3, #0
 801daaa:	d007      	beq.n	801dabc <_ZNK10TestFilter5matchERK12SimpleString+0x26>
        matches = name == filter_;
 801daac:	687b      	ldr	r3, [r7, #4]
 801daae:	4619      	mov	r1, r3
 801dab0:	6838      	ldr	r0, [r7, #0]
 801dab2:	f7ed fd20 	bl	800b4f6 <_ZeqRK12SimpleStringS1_>
 801dab6:	4603      	mov	r3, r0
 801dab8:	73fb      	strb	r3, [r7, #15]
 801daba:	e006      	b.n	801daca <_ZNK10TestFilter5matchERK12SimpleString+0x34>
    else
        matches = name.contains(filter_);
 801dabc:	687b      	ldr	r3, [r7, #4]
 801dabe:	4619      	mov	r1, r3
 801dac0:	6838      	ldr	r0, [r7, #0]
 801dac2:	f7ed f9d2 	bl	800ae6a <_ZNK12SimpleString8containsERKS_>
 801dac6:	4603      	mov	r3, r0
 801dac8:	73fb      	strb	r3, [r7, #15]

    return invertMatching_ ? !matches : matches;
 801daca:	687b      	ldr	r3, [r7, #4]
 801dacc:	7a5b      	ldrb	r3, [r3, #9]
 801dace:	2b00      	cmp	r3, #0
 801dad0:	d004      	beq.n	801dadc <_ZNK10TestFilter5matchERK12SimpleString+0x46>
 801dad2:	7bfb      	ldrb	r3, [r7, #15]
 801dad4:	f083 0301 	eor.w	r3, r3, #1
 801dad8:	b2db      	uxtb	r3, r3
 801dada:	e005      	b.n	801dae8 <_ZNK10TestFilter5matchERK12SimpleString+0x52>
 801dadc:	7bfb      	ldrb	r3, [r7, #15]
 801dade:	2b00      	cmp	r3, #0
 801dae0:	bf14      	ite	ne
 801dae2:	2301      	movne	r3, #1
 801dae4:	2300      	moveq	r3, #0
 801dae6:	b2db      	uxtb	r3, r3
}
 801dae8:	4618      	mov	r0, r3
 801daea:	3710      	adds	r7, #16
 801daec:	46bd      	mov	sp, r7
 801daee:	bd80      	pop	{r7, pc}

0801daf0 <__cxa_guard_acquire>:
 801daf0:	6803      	ldr	r3, [r0, #0]
 801daf2:	07db      	lsls	r3, r3, #31
 801daf4:	d406      	bmi.n	801db04 <__cxa_guard_acquire+0x14>
 801daf6:	7843      	ldrb	r3, [r0, #1]
 801daf8:	b103      	cbz	r3, 801dafc <__cxa_guard_acquire+0xc>
 801dafa:	deff      	udf	#255	; 0xff
 801dafc:	2301      	movs	r3, #1
 801dafe:	7043      	strb	r3, [r0, #1]
 801db00:	4618      	mov	r0, r3
 801db02:	4770      	bx	lr
 801db04:	2000      	movs	r0, #0
 801db06:	4770      	bx	lr

0801db08 <__cxa_guard_release>:
 801db08:	2301      	movs	r3, #1
 801db0a:	6003      	str	r3, [r0, #0]
 801db0c:	4770      	bx	lr

0801db0e <__cxa_pure_virtual>:
 801db0e:	b508      	push	{r3, lr}
 801db10:	f000 f80c 	bl	801db2c <_ZSt9terminatev>

0801db14 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801db14:	b508      	push	{r3, lr}
 801db16:	4780      	blx	r0
 801db18:	f000 f816 	bl	801db48 <abort>

0801db1c <_ZSt13get_terminatev>:
 801db1c:	4b02      	ldr	r3, [pc, #8]	; (801db28 <_ZSt13get_terminatev+0xc>)
 801db1e:	6818      	ldr	r0, [r3, #0]
 801db20:	f3bf 8f5b 	dmb	ish
 801db24:	4770      	bx	lr
 801db26:	bf00      	nop
 801db28:	20000104 	.word	0x20000104

0801db2c <_ZSt9terminatev>:
 801db2c:	b508      	push	{r3, lr}
 801db2e:	f7ff fff5 	bl	801db1c <_ZSt13get_terminatev>
 801db32:	f7ff ffef 	bl	801db14 <_ZN10__cxxabiv111__terminateEPFvvE>

0801db36 <fabs>:
 801db36:	ec51 0b10 	vmov	r0, r1, d0
 801db3a:	ee10 2a10 	vmov	r2, s0
 801db3e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801db42:	ec43 2b10 	vmov	d0, r2, r3
 801db46:	4770      	bx	lr

0801db48 <abort>:
 801db48:	b508      	push	{r3, lr}
 801db4a:	2006      	movs	r0, #6
 801db4c:	f000 ff88 	bl	801ea60 <raise>
 801db50:	2001      	movs	r0, #1
 801db52:	f7e3 f916 	bl	8000d82 <_exit>

0801db56 <atexit>:
 801db56:	2300      	movs	r3, #0
 801db58:	4601      	mov	r1, r0
 801db5a:	461a      	mov	r2, r3
 801db5c:	4618      	mov	r0, r3
 801db5e:	f002 b93f 	b.w	801fde0 <__register_exitproc>
	...

0801db64 <calloc>:
 801db64:	4b02      	ldr	r3, [pc, #8]	; (801db70 <calloc+0xc>)
 801db66:	460a      	mov	r2, r1
 801db68:	4601      	mov	r1, r0
 801db6a:	6818      	ldr	r0, [r3, #0]
 801db6c:	f000 bde8 	b.w	801e740 <_calloc_r>
 801db70:	20000108 	.word	0x20000108

0801db74 <__errno>:
 801db74:	4b01      	ldr	r3, [pc, #4]	; (801db7c <__errno+0x8>)
 801db76:	6818      	ldr	r0, [r3, #0]
 801db78:	4770      	bx	lr
 801db7a:	bf00      	nop
 801db7c:	20000108 	.word	0x20000108

0801db80 <_fclose_r>:
 801db80:	b570      	push	{r4, r5, r6, lr}
 801db82:	4605      	mov	r5, r0
 801db84:	460c      	mov	r4, r1
 801db86:	b911      	cbnz	r1, 801db8e <_fclose_r+0xe>
 801db88:	2600      	movs	r6, #0
 801db8a:	4630      	mov	r0, r6
 801db8c:	bd70      	pop	{r4, r5, r6, pc}
 801db8e:	b118      	cbz	r0, 801db98 <_fclose_r+0x18>
 801db90:	6983      	ldr	r3, [r0, #24]
 801db92:	b90b      	cbnz	r3, 801db98 <_fclose_r+0x18>
 801db94:	f000 f994 	bl	801dec0 <__sinit>
 801db98:	4b2c      	ldr	r3, [pc, #176]	; (801dc4c <_fclose_r+0xcc>)
 801db9a:	429c      	cmp	r4, r3
 801db9c:	d114      	bne.n	801dbc8 <_fclose_r+0x48>
 801db9e:	686c      	ldr	r4, [r5, #4]
 801dba0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dba2:	07d8      	lsls	r0, r3, #31
 801dba4:	d405      	bmi.n	801dbb2 <_fclose_r+0x32>
 801dba6:	89a3      	ldrh	r3, [r4, #12]
 801dba8:	0599      	lsls	r1, r3, #22
 801dbaa:	d402      	bmi.n	801dbb2 <_fclose_r+0x32>
 801dbac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dbae:	f000 fd3a 	bl	801e626 <__retarget_lock_acquire_recursive>
 801dbb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dbb6:	b98b      	cbnz	r3, 801dbdc <_fclose_r+0x5c>
 801dbb8:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801dbba:	f016 0601 	ands.w	r6, r6, #1
 801dbbe:	d1e3      	bne.n	801db88 <_fclose_r+0x8>
 801dbc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dbc2:	f000 fd32 	bl	801e62a <__retarget_lock_release_recursive>
 801dbc6:	e7e0      	b.n	801db8a <_fclose_r+0xa>
 801dbc8:	4b21      	ldr	r3, [pc, #132]	; (801dc50 <_fclose_r+0xd0>)
 801dbca:	429c      	cmp	r4, r3
 801dbcc:	d101      	bne.n	801dbd2 <_fclose_r+0x52>
 801dbce:	68ac      	ldr	r4, [r5, #8]
 801dbd0:	e7e6      	b.n	801dba0 <_fclose_r+0x20>
 801dbd2:	4b20      	ldr	r3, [pc, #128]	; (801dc54 <_fclose_r+0xd4>)
 801dbd4:	429c      	cmp	r4, r3
 801dbd6:	bf08      	it	eq
 801dbd8:	68ec      	ldreq	r4, [r5, #12]
 801dbda:	e7e1      	b.n	801dba0 <_fclose_r+0x20>
 801dbdc:	4621      	mov	r1, r4
 801dbde:	4628      	mov	r0, r5
 801dbe0:	f000 f842 	bl	801dc68 <__sflush_r>
 801dbe4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801dbe6:	4606      	mov	r6, r0
 801dbe8:	b133      	cbz	r3, 801dbf8 <_fclose_r+0x78>
 801dbea:	6a21      	ldr	r1, [r4, #32]
 801dbec:	4628      	mov	r0, r5
 801dbee:	4798      	blx	r3
 801dbf0:	2800      	cmp	r0, #0
 801dbf2:	bfb8      	it	lt
 801dbf4:	f04f 36ff 	movlt.w	r6, #4294967295
 801dbf8:	89a3      	ldrh	r3, [r4, #12]
 801dbfa:	061a      	lsls	r2, r3, #24
 801dbfc:	d503      	bpl.n	801dc06 <_fclose_r+0x86>
 801dbfe:	6921      	ldr	r1, [r4, #16]
 801dc00:	4628      	mov	r0, r5
 801dc02:	f000 fdad 	bl	801e760 <_free_r>
 801dc06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dc08:	b141      	cbz	r1, 801dc1c <_fclose_r+0x9c>
 801dc0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dc0e:	4299      	cmp	r1, r3
 801dc10:	d002      	beq.n	801dc18 <_fclose_r+0x98>
 801dc12:	4628      	mov	r0, r5
 801dc14:	f000 fda4 	bl	801e760 <_free_r>
 801dc18:	2300      	movs	r3, #0
 801dc1a:	6363      	str	r3, [r4, #52]	; 0x34
 801dc1c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801dc1e:	b121      	cbz	r1, 801dc2a <_fclose_r+0xaa>
 801dc20:	4628      	mov	r0, r5
 801dc22:	f000 fd9d 	bl	801e760 <_free_r>
 801dc26:	2300      	movs	r3, #0
 801dc28:	64a3      	str	r3, [r4, #72]	; 0x48
 801dc2a:	f000 f931 	bl	801de90 <__sfp_lock_acquire>
 801dc2e:	2300      	movs	r3, #0
 801dc30:	81a3      	strh	r3, [r4, #12]
 801dc32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dc34:	07db      	lsls	r3, r3, #31
 801dc36:	d402      	bmi.n	801dc3e <_fclose_r+0xbe>
 801dc38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dc3a:	f000 fcf6 	bl	801e62a <__retarget_lock_release_recursive>
 801dc3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dc40:	f000 fcef 	bl	801e622 <__retarget_lock_close_recursive>
 801dc44:	f000 f92a 	bl	801de9c <__sfp_lock_release>
 801dc48:	e79f      	b.n	801db8a <_fclose_r+0xa>
 801dc4a:	bf00      	nop
 801dc4c:	08026920 	.word	0x08026920
 801dc50:	08026940 	.word	0x08026940
 801dc54:	08026900 	.word	0x08026900

0801dc58 <fclose>:
 801dc58:	4b02      	ldr	r3, [pc, #8]	; (801dc64 <fclose+0xc>)
 801dc5a:	4601      	mov	r1, r0
 801dc5c:	6818      	ldr	r0, [r3, #0]
 801dc5e:	f7ff bf8f 	b.w	801db80 <_fclose_r>
 801dc62:	bf00      	nop
 801dc64:	20000108 	.word	0x20000108

0801dc68 <__sflush_r>:
 801dc68:	898a      	ldrh	r2, [r1, #12]
 801dc6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc6e:	4605      	mov	r5, r0
 801dc70:	0710      	lsls	r0, r2, #28
 801dc72:	460c      	mov	r4, r1
 801dc74:	d458      	bmi.n	801dd28 <__sflush_r+0xc0>
 801dc76:	684b      	ldr	r3, [r1, #4]
 801dc78:	2b00      	cmp	r3, #0
 801dc7a:	dc05      	bgt.n	801dc88 <__sflush_r+0x20>
 801dc7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801dc7e:	2b00      	cmp	r3, #0
 801dc80:	dc02      	bgt.n	801dc88 <__sflush_r+0x20>
 801dc82:	2000      	movs	r0, #0
 801dc84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dc88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dc8a:	2e00      	cmp	r6, #0
 801dc8c:	d0f9      	beq.n	801dc82 <__sflush_r+0x1a>
 801dc8e:	2300      	movs	r3, #0
 801dc90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801dc94:	682f      	ldr	r7, [r5, #0]
 801dc96:	602b      	str	r3, [r5, #0]
 801dc98:	d032      	beq.n	801dd00 <__sflush_r+0x98>
 801dc9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801dc9c:	89a3      	ldrh	r3, [r4, #12]
 801dc9e:	075a      	lsls	r2, r3, #29
 801dca0:	d505      	bpl.n	801dcae <__sflush_r+0x46>
 801dca2:	6863      	ldr	r3, [r4, #4]
 801dca4:	1ac0      	subs	r0, r0, r3
 801dca6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801dca8:	b10b      	cbz	r3, 801dcae <__sflush_r+0x46>
 801dcaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801dcac:	1ac0      	subs	r0, r0, r3
 801dcae:	2300      	movs	r3, #0
 801dcb0:	4602      	mov	r2, r0
 801dcb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dcb4:	6a21      	ldr	r1, [r4, #32]
 801dcb6:	4628      	mov	r0, r5
 801dcb8:	47b0      	blx	r6
 801dcba:	1c43      	adds	r3, r0, #1
 801dcbc:	89a3      	ldrh	r3, [r4, #12]
 801dcbe:	d106      	bne.n	801dcce <__sflush_r+0x66>
 801dcc0:	6829      	ldr	r1, [r5, #0]
 801dcc2:	291d      	cmp	r1, #29
 801dcc4:	d82c      	bhi.n	801dd20 <__sflush_r+0xb8>
 801dcc6:	4a2a      	ldr	r2, [pc, #168]	; (801dd70 <__sflush_r+0x108>)
 801dcc8:	40ca      	lsrs	r2, r1
 801dcca:	07d6      	lsls	r6, r2, #31
 801dccc:	d528      	bpl.n	801dd20 <__sflush_r+0xb8>
 801dcce:	2200      	movs	r2, #0
 801dcd0:	6062      	str	r2, [r4, #4]
 801dcd2:	04d9      	lsls	r1, r3, #19
 801dcd4:	6922      	ldr	r2, [r4, #16]
 801dcd6:	6022      	str	r2, [r4, #0]
 801dcd8:	d504      	bpl.n	801dce4 <__sflush_r+0x7c>
 801dcda:	1c42      	adds	r2, r0, #1
 801dcdc:	d101      	bne.n	801dce2 <__sflush_r+0x7a>
 801dcde:	682b      	ldr	r3, [r5, #0]
 801dce0:	b903      	cbnz	r3, 801dce4 <__sflush_r+0x7c>
 801dce2:	6560      	str	r0, [r4, #84]	; 0x54
 801dce4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dce6:	602f      	str	r7, [r5, #0]
 801dce8:	2900      	cmp	r1, #0
 801dcea:	d0ca      	beq.n	801dc82 <__sflush_r+0x1a>
 801dcec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dcf0:	4299      	cmp	r1, r3
 801dcf2:	d002      	beq.n	801dcfa <__sflush_r+0x92>
 801dcf4:	4628      	mov	r0, r5
 801dcf6:	f000 fd33 	bl	801e760 <_free_r>
 801dcfa:	2000      	movs	r0, #0
 801dcfc:	6360      	str	r0, [r4, #52]	; 0x34
 801dcfe:	e7c1      	b.n	801dc84 <__sflush_r+0x1c>
 801dd00:	6a21      	ldr	r1, [r4, #32]
 801dd02:	2301      	movs	r3, #1
 801dd04:	4628      	mov	r0, r5
 801dd06:	47b0      	blx	r6
 801dd08:	1c41      	adds	r1, r0, #1
 801dd0a:	d1c7      	bne.n	801dc9c <__sflush_r+0x34>
 801dd0c:	682b      	ldr	r3, [r5, #0]
 801dd0e:	2b00      	cmp	r3, #0
 801dd10:	d0c4      	beq.n	801dc9c <__sflush_r+0x34>
 801dd12:	2b1d      	cmp	r3, #29
 801dd14:	d001      	beq.n	801dd1a <__sflush_r+0xb2>
 801dd16:	2b16      	cmp	r3, #22
 801dd18:	d101      	bne.n	801dd1e <__sflush_r+0xb6>
 801dd1a:	602f      	str	r7, [r5, #0]
 801dd1c:	e7b1      	b.n	801dc82 <__sflush_r+0x1a>
 801dd1e:	89a3      	ldrh	r3, [r4, #12]
 801dd20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dd24:	81a3      	strh	r3, [r4, #12]
 801dd26:	e7ad      	b.n	801dc84 <__sflush_r+0x1c>
 801dd28:	690f      	ldr	r7, [r1, #16]
 801dd2a:	2f00      	cmp	r7, #0
 801dd2c:	d0a9      	beq.n	801dc82 <__sflush_r+0x1a>
 801dd2e:	0793      	lsls	r3, r2, #30
 801dd30:	680e      	ldr	r6, [r1, #0]
 801dd32:	bf08      	it	eq
 801dd34:	694b      	ldreq	r3, [r1, #20]
 801dd36:	600f      	str	r7, [r1, #0]
 801dd38:	bf18      	it	ne
 801dd3a:	2300      	movne	r3, #0
 801dd3c:	eba6 0807 	sub.w	r8, r6, r7
 801dd40:	608b      	str	r3, [r1, #8]
 801dd42:	f1b8 0f00 	cmp.w	r8, #0
 801dd46:	dd9c      	ble.n	801dc82 <__sflush_r+0x1a>
 801dd48:	6a21      	ldr	r1, [r4, #32]
 801dd4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801dd4c:	4643      	mov	r3, r8
 801dd4e:	463a      	mov	r2, r7
 801dd50:	4628      	mov	r0, r5
 801dd52:	47b0      	blx	r6
 801dd54:	2800      	cmp	r0, #0
 801dd56:	dc06      	bgt.n	801dd66 <__sflush_r+0xfe>
 801dd58:	89a3      	ldrh	r3, [r4, #12]
 801dd5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dd5e:	81a3      	strh	r3, [r4, #12]
 801dd60:	f04f 30ff 	mov.w	r0, #4294967295
 801dd64:	e78e      	b.n	801dc84 <__sflush_r+0x1c>
 801dd66:	4407      	add	r7, r0
 801dd68:	eba8 0800 	sub.w	r8, r8, r0
 801dd6c:	e7e9      	b.n	801dd42 <__sflush_r+0xda>
 801dd6e:	bf00      	nop
 801dd70:	20400001 	.word	0x20400001

0801dd74 <_fflush_r>:
 801dd74:	b538      	push	{r3, r4, r5, lr}
 801dd76:	690b      	ldr	r3, [r1, #16]
 801dd78:	4605      	mov	r5, r0
 801dd7a:	460c      	mov	r4, r1
 801dd7c:	b913      	cbnz	r3, 801dd84 <_fflush_r+0x10>
 801dd7e:	2500      	movs	r5, #0
 801dd80:	4628      	mov	r0, r5
 801dd82:	bd38      	pop	{r3, r4, r5, pc}
 801dd84:	b118      	cbz	r0, 801dd8e <_fflush_r+0x1a>
 801dd86:	6983      	ldr	r3, [r0, #24]
 801dd88:	b90b      	cbnz	r3, 801dd8e <_fflush_r+0x1a>
 801dd8a:	f000 f899 	bl	801dec0 <__sinit>
 801dd8e:	4b14      	ldr	r3, [pc, #80]	; (801dde0 <_fflush_r+0x6c>)
 801dd90:	429c      	cmp	r4, r3
 801dd92:	d11b      	bne.n	801ddcc <_fflush_r+0x58>
 801dd94:	686c      	ldr	r4, [r5, #4]
 801dd96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dd9a:	2b00      	cmp	r3, #0
 801dd9c:	d0ef      	beq.n	801dd7e <_fflush_r+0xa>
 801dd9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801dda0:	07d0      	lsls	r0, r2, #31
 801dda2:	d404      	bmi.n	801ddae <_fflush_r+0x3a>
 801dda4:	0599      	lsls	r1, r3, #22
 801dda6:	d402      	bmi.n	801ddae <_fflush_r+0x3a>
 801dda8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ddaa:	f000 fc3c 	bl	801e626 <__retarget_lock_acquire_recursive>
 801ddae:	4628      	mov	r0, r5
 801ddb0:	4621      	mov	r1, r4
 801ddb2:	f7ff ff59 	bl	801dc68 <__sflush_r>
 801ddb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ddb8:	07da      	lsls	r2, r3, #31
 801ddba:	4605      	mov	r5, r0
 801ddbc:	d4e0      	bmi.n	801dd80 <_fflush_r+0xc>
 801ddbe:	89a3      	ldrh	r3, [r4, #12]
 801ddc0:	059b      	lsls	r3, r3, #22
 801ddc2:	d4dd      	bmi.n	801dd80 <_fflush_r+0xc>
 801ddc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ddc6:	f000 fc30 	bl	801e62a <__retarget_lock_release_recursive>
 801ddca:	e7d9      	b.n	801dd80 <_fflush_r+0xc>
 801ddcc:	4b05      	ldr	r3, [pc, #20]	; (801dde4 <_fflush_r+0x70>)
 801ddce:	429c      	cmp	r4, r3
 801ddd0:	d101      	bne.n	801ddd6 <_fflush_r+0x62>
 801ddd2:	68ac      	ldr	r4, [r5, #8]
 801ddd4:	e7df      	b.n	801dd96 <_fflush_r+0x22>
 801ddd6:	4b04      	ldr	r3, [pc, #16]	; (801dde8 <_fflush_r+0x74>)
 801ddd8:	429c      	cmp	r4, r3
 801ddda:	bf08      	it	eq
 801dddc:	68ec      	ldreq	r4, [r5, #12]
 801ddde:	e7da      	b.n	801dd96 <_fflush_r+0x22>
 801dde0:	08026920 	.word	0x08026920
 801dde4:	08026940 	.word	0x08026940
 801dde8:	08026900 	.word	0x08026900

0801ddec <fflush>:
 801ddec:	4601      	mov	r1, r0
 801ddee:	b920      	cbnz	r0, 801ddfa <fflush+0xe>
 801ddf0:	4b04      	ldr	r3, [pc, #16]	; (801de04 <fflush+0x18>)
 801ddf2:	4905      	ldr	r1, [pc, #20]	; (801de08 <fflush+0x1c>)
 801ddf4:	6818      	ldr	r0, [r3, #0]
 801ddf6:	f000 babb 	b.w	801e370 <_fwalk_reent>
 801ddfa:	4b04      	ldr	r3, [pc, #16]	; (801de0c <fflush+0x20>)
 801ddfc:	6818      	ldr	r0, [r3, #0]
 801ddfe:	f7ff bfb9 	b.w	801dd74 <_fflush_r>
 801de02:	bf00      	nop
 801de04:	08026960 	.word	0x08026960
 801de08:	0801dd75 	.word	0x0801dd75
 801de0c:	20000108 	.word	0x20000108

0801de10 <std>:
 801de10:	2300      	movs	r3, #0
 801de12:	b510      	push	{r4, lr}
 801de14:	4604      	mov	r4, r0
 801de16:	e9c0 3300 	strd	r3, r3, [r0]
 801de1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801de1e:	6083      	str	r3, [r0, #8]
 801de20:	8181      	strh	r1, [r0, #12]
 801de22:	6643      	str	r3, [r0, #100]	; 0x64
 801de24:	81c2      	strh	r2, [r0, #14]
 801de26:	6183      	str	r3, [r0, #24]
 801de28:	4619      	mov	r1, r3
 801de2a:	2208      	movs	r2, #8
 801de2c:	305c      	adds	r0, #92	; 0x5c
 801de2e:	f000 fc7f 	bl	801e730 <memset>
 801de32:	4b05      	ldr	r3, [pc, #20]	; (801de48 <std+0x38>)
 801de34:	6263      	str	r3, [r4, #36]	; 0x24
 801de36:	4b05      	ldr	r3, [pc, #20]	; (801de4c <std+0x3c>)
 801de38:	62a3      	str	r3, [r4, #40]	; 0x28
 801de3a:	4b05      	ldr	r3, [pc, #20]	; (801de50 <std+0x40>)
 801de3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801de3e:	4b05      	ldr	r3, [pc, #20]	; (801de54 <std+0x44>)
 801de40:	6224      	str	r4, [r4, #32]
 801de42:	6323      	str	r3, [r4, #48]	; 0x30
 801de44:	bd10      	pop	{r4, pc}
 801de46:	bf00      	nop
 801de48:	0801ead9 	.word	0x0801ead9
 801de4c:	0801eaff 	.word	0x0801eaff
 801de50:	0801eb37 	.word	0x0801eb37
 801de54:	0801eb5b 	.word	0x0801eb5b

0801de58 <_cleanup_r>:
 801de58:	4901      	ldr	r1, [pc, #4]	; (801de60 <_cleanup_r+0x8>)
 801de5a:	f000 ba89 	b.w	801e370 <_fwalk_reent>
 801de5e:	bf00      	nop
 801de60:	0801dd75 	.word	0x0801dd75

0801de64 <__sfmoreglue>:
 801de64:	b570      	push	{r4, r5, r6, lr}
 801de66:	1e4a      	subs	r2, r1, #1
 801de68:	2568      	movs	r5, #104	; 0x68
 801de6a:	4355      	muls	r5, r2
 801de6c:	460e      	mov	r6, r1
 801de6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801de72:	f000 fcc5 	bl	801e800 <_malloc_r>
 801de76:	4604      	mov	r4, r0
 801de78:	b140      	cbz	r0, 801de8c <__sfmoreglue+0x28>
 801de7a:	2100      	movs	r1, #0
 801de7c:	e9c0 1600 	strd	r1, r6, [r0]
 801de80:	300c      	adds	r0, #12
 801de82:	60a0      	str	r0, [r4, #8]
 801de84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801de88:	f000 fc52 	bl	801e730 <memset>
 801de8c:	4620      	mov	r0, r4
 801de8e:	bd70      	pop	{r4, r5, r6, pc}

0801de90 <__sfp_lock_acquire>:
 801de90:	4801      	ldr	r0, [pc, #4]	; (801de98 <__sfp_lock_acquire+0x8>)
 801de92:	f000 bbc8 	b.w	801e626 <__retarget_lock_acquire_recursive>
 801de96:	bf00      	nop
 801de98:	20000e2c 	.word	0x20000e2c

0801de9c <__sfp_lock_release>:
 801de9c:	4801      	ldr	r0, [pc, #4]	; (801dea4 <__sfp_lock_release+0x8>)
 801de9e:	f000 bbc4 	b.w	801e62a <__retarget_lock_release_recursive>
 801dea2:	bf00      	nop
 801dea4:	20000e2c 	.word	0x20000e2c

0801dea8 <__sinit_lock_acquire>:
 801dea8:	4801      	ldr	r0, [pc, #4]	; (801deb0 <__sinit_lock_acquire+0x8>)
 801deaa:	f000 bbbc 	b.w	801e626 <__retarget_lock_acquire_recursive>
 801deae:	bf00      	nop
 801deb0:	20000e27 	.word	0x20000e27

0801deb4 <__sinit_lock_release>:
 801deb4:	4801      	ldr	r0, [pc, #4]	; (801debc <__sinit_lock_release+0x8>)
 801deb6:	f000 bbb8 	b.w	801e62a <__retarget_lock_release_recursive>
 801deba:	bf00      	nop
 801debc:	20000e27 	.word	0x20000e27

0801dec0 <__sinit>:
 801dec0:	b510      	push	{r4, lr}
 801dec2:	4604      	mov	r4, r0
 801dec4:	f7ff fff0 	bl	801dea8 <__sinit_lock_acquire>
 801dec8:	69a3      	ldr	r3, [r4, #24]
 801deca:	b11b      	cbz	r3, 801ded4 <__sinit+0x14>
 801decc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ded0:	f7ff bff0 	b.w	801deb4 <__sinit_lock_release>
 801ded4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801ded8:	6523      	str	r3, [r4, #80]	; 0x50
 801deda:	4b13      	ldr	r3, [pc, #76]	; (801df28 <__sinit+0x68>)
 801dedc:	4a13      	ldr	r2, [pc, #76]	; (801df2c <__sinit+0x6c>)
 801dede:	681b      	ldr	r3, [r3, #0]
 801dee0:	62a2      	str	r2, [r4, #40]	; 0x28
 801dee2:	42a3      	cmp	r3, r4
 801dee4:	bf04      	itt	eq
 801dee6:	2301      	moveq	r3, #1
 801dee8:	61a3      	streq	r3, [r4, #24]
 801deea:	4620      	mov	r0, r4
 801deec:	f000 f820 	bl	801df30 <__sfp>
 801def0:	6060      	str	r0, [r4, #4]
 801def2:	4620      	mov	r0, r4
 801def4:	f000 f81c 	bl	801df30 <__sfp>
 801def8:	60a0      	str	r0, [r4, #8]
 801defa:	4620      	mov	r0, r4
 801defc:	f000 f818 	bl	801df30 <__sfp>
 801df00:	2200      	movs	r2, #0
 801df02:	60e0      	str	r0, [r4, #12]
 801df04:	2104      	movs	r1, #4
 801df06:	6860      	ldr	r0, [r4, #4]
 801df08:	f7ff ff82 	bl	801de10 <std>
 801df0c:	68a0      	ldr	r0, [r4, #8]
 801df0e:	2201      	movs	r2, #1
 801df10:	2109      	movs	r1, #9
 801df12:	f7ff ff7d 	bl	801de10 <std>
 801df16:	68e0      	ldr	r0, [r4, #12]
 801df18:	2202      	movs	r2, #2
 801df1a:	2112      	movs	r1, #18
 801df1c:	f7ff ff78 	bl	801de10 <std>
 801df20:	2301      	movs	r3, #1
 801df22:	61a3      	str	r3, [r4, #24]
 801df24:	e7d2      	b.n	801decc <__sinit+0xc>
 801df26:	bf00      	nop
 801df28:	08026960 	.word	0x08026960
 801df2c:	0801de59 	.word	0x0801de59

0801df30 <__sfp>:
 801df30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df32:	4607      	mov	r7, r0
 801df34:	f7ff ffac 	bl	801de90 <__sfp_lock_acquire>
 801df38:	4b1e      	ldr	r3, [pc, #120]	; (801dfb4 <__sfp+0x84>)
 801df3a:	681e      	ldr	r6, [r3, #0]
 801df3c:	69b3      	ldr	r3, [r6, #24]
 801df3e:	b913      	cbnz	r3, 801df46 <__sfp+0x16>
 801df40:	4630      	mov	r0, r6
 801df42:	f7ff ffbd 	bl	801dec0 <__sinit>
 801df46:	3648      	adds	r6, #72	; 0x48
 801df48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801df4c:	3b01      	subs	r3, #1
 801df4e:	d503      	bpl.n	801df58 <__sfp+0x28>
 801df50:	6833      	ldr	r3, [r6, #0]
 801df52:	b30b      	cbz	r3, 801df98 <__sfp+0x68>
 801df54:	6836      	ldr	r6, [r6, #0]
 801df56:	e7f7      	b.n	801df48 <__sfp+0x18>
 801df58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801df5c:	b9d5      	cbnz	r5, 801df94 <__sfp+0x64>
 801df5e:	4b16      	ldr	r3, [pc, #88]	; (801dfb8 <__sfp+0x88>)
 801df60:	60e3      	str	r3, [r4, #12]
 801df62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801df66:	6665      	str	r5, [r4, #100]	; 0x64
 801df68:	f000 fb5a 	bl	801e620 <__retarget_lock_init_recursive>
 801df6c:	f7ff ff96 	bl	801de9c <__sfp_lock_release>
 801df70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801df74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801df78:	6025      	str	r5, [r4, #0]
 801df7a:	61a5      	str	r5, [r4, #24]
 801df7c:	2208      	movs	r2, #8
 801df7e:	4629      	mov	r1, r5
 801df80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801df84:	f000 fbd4 	bl	801e730 <memset>
 801df88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801df8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801df90:	4620      	mov	r0, r4
 801df92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801df94:	3468      	adds	r4, #104	; 0x68
 801df96:	e7d9      	b.n	801df4c <__sfp+0x1c>
 801df98:	2104      	movs	r1, #4
 801df9a:	4638      	mov	r0, r7
 801df9c:	f7ff ff62 	bl	801de64 <__sfmoreglue>
 801dfa0:	4604      	mov	r4, r0
 801dfa2:	6030      	str	r0, [r6, #0]
 801dfa4:	2800      	cmp	r0, #0
 801dfa6:	d1d5      	bne.n	801df54 <__sfp+0x24>
 801dfa8:	f7ff ff78 	bl	801de9c <__sfp_lock_release>
 801dfac:	230c      	movs	r3, #12
 801dfae:	603b      	str	r3, [r7, #0]
 801dfb0:	e7ee      	b.n	801df90 <__sfp+0x60>
 801dfb2:	bf00      	nop
 801dfb4:	08026960 	.word	0x08026960
 801dfb8:	ffff0001 	.word	0xffff0001

0801dfbc <_fopen_r>:
 801dfbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dfbe:	460f      	mov	r7, r1
 801dfc0:	4611      	mov	r1, r2
 801dfc2:	aa01      	add	r2, sp, #4
 801dfc4:	4605      	mov	r5, r0
 801dfc6:	f001 ff9f 	bl	801ff08 <__sflags>
 801dfca:	4606      	mov	r6, r0
 801dfcc:	b918      	cbnz	r0, 801dfd6 <_fopen_r+0x1a>
 801dfce:	2400      	movs	r4, #0
 801dfd0:	4620      	mov	r0, r4
 801dfd2:	b003      	add	sp, #12
 801dfd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dfd6:	4628      	mov	r0, r5
 801dfd8:	f7ff ffaa 	bl	801df30 <__sfp>
 801dfdc:	4604      	mov	r4, r0
 801dfde:	2800      	cmp	r0, #0
 801dfe0:	d0f5      	beq.n	801dfce <_fopen_r+0x12>
 801dfe2:	4639      	mov	r1, r7
 801dfe4:	9a01      	ldr	r2, [sp, #4]
 801dfe6:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 801dfea:	4628      	mov	r0, r5
 801dfec:	f000 fc62 	bl	801e8b4 <_open_r>
 801dff0:	1e07      	subs	r7, r0, #0
 801dff2:	da09      	bge.n	801e008 <_fopen_r+0x4c>
 801dff4:	2500      	movs	r5, #0
 801dff6:	f7ff ff4b 	bl	801de90 <__sfp_lock_acquire>
 801dffa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dffc:	81a5      	strh	r5, [r4, #12]
 801dffe:	f000 fb10 	bl	801e622 <__retarget_lock_close_recursive>
 801e002:	f7ff ff4b 	bl	801de9c <__sfp_lock_release>
 801e006:	e7e2      	b.n	801dfce <_fopen_r+0x12>
 801e008:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e00a:	07db      	lsls	r3, r3, #31
 801e00c:	d405      	bmi.n	801e01a <_fopen_r+0x5e>
 801e00e:	89a3      	ldrh	r3, [r4, #12]
 801e010:	0598      	lsls	r0, r3, #22
 801e012:	d402      	bmi.n	801e01a <_fopen_r+0x5e>
 801e014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e016:	f000 fb06 	bl	801e626 <__retarget_lock_acquire_recursive>
 801e01a:	4b0e      	ldr	r3, [pc, #56]	; (801e054 <_fopen_r+0x98>)
 801e01c:	6263      	str	r3, [r4, #36]	; 0x24
 801e01e:	4b0e      	ldr	r3, [pc, #56]	; (801e058 <_fopen_r+0x9c>)
 801e020:	62a3      	str	r3, [r4, #40]	; 0x28
 801e022:	4b0e      	ldr	r3, [pc, #56]	; (801e05c <_fopen_r+0xa0>)
 801e024:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e026:	05f1      	lsls	r1, r6, #23
 801e028:	4b0d      	ldr	r3, [pc, #52]	; (801e060 <_fopen_r+0xa4>)
 801e02a:	81e7      	strh	r7, [r4, #14]
 801e02c:	81a6      	strh	r6, [r4, #12]
 801e02e:	6224      	str	r4, [r4, #32]
 801e030:	6323      	str	r3, [r4, #48]	; 0x30
 801e032:	d505      	bpl.n	801e040 <_fopen_r+0x84>
 801e034:	2302      	movs	r3, #2
 801e036:	2200      	movs	r2, #0
 801e038:	4621      	mov	r1, r4
 801e03a:	4628      	mov	r0, r5
 801e03c:	f000 f888 	bl	801e150 <_fseek_r>
 801e040:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e042:	07da      	lsls	r2, r3, #31
 801e044:	d4c4      	bmi.n	801dfd0 <_fopen_r+0x14>
 801e046:	89a3      	ldrh	r3, [r4, #12]
 801e048:	059b      	lsls	r3, r3, #22
 801e04a:	d4c1      	bmi.n	801dfd0 <_fopen_r+0x14>
 801e04c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e04e:	f000 faec 	bl	801e62a <__retarget_lock_release_recursive>
 801e052:	e7bd      	b.n	801dfd0 <_fopen_r+0x14>
 801e054:	0801ead9 	.word	0x0801ead9
 801e058:	0801eaff 	.word	0x0801eaff
 801e05c:	0801eb37 	.word	0x0801eb37
 801e060:	0801eb5b 	.word	0x0801eb5b

0801e064 <fopen>:
 801e064:	4b02      	ldr	r3, [pc, #8]	; (801e070 <fopen+0xc>)
 801e066:	460a      	mov	r2, r1
 801e068:	4601      	mov	r1, r0
 801e06a:	6818      	ldr	r0, [r3, #0]
 801e06c:	f7ff bfa6 	b.w	801dfbc <_fopen_r>
 801e070:	20000108 	.word	0x20000108

0801e074 <_fputs_r>:
 801e074:	b570      	push	{r4, r5, r6, lr}
 801e076:	460e      	mov	r6, r1
 801e078:	4614      	mov	r4, r2
 801e07a:	4605      	mov	r5, r0
 801e07c:	b118      	cbz	r0, 801e086 <_fputs_r+0x12>
 801e07e:	6983      	ldr	r3, [r0, #24]
 801e080:	b90b      	cbnz	r3, 801e086 <_fputs_r+0x12>
 801e082:	f7ff ff1d 	bl	801dec0 <__sinit>
 801e086:	4b2b      	ldr	r3, [pc, #172]	; (801e134 <_fputs_r+0xc0>)
 801e088:	429c      	cmp	r4, r3
 801e08a:	d11e      	bne.n	801e0ca <_fputs_r+0x56>
 801e08c:	686c      	ldr	r4, [r5, #4]
 801e08e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e090:	07da      	lsls	r2, r3, #31
 801e092:	d405      	bmi.n	801e0a0 <_fputs_r+0x2c>
 801e094:	89a3      	ldrh	r3, [r4, #12]
 801e096:	059b      	lsls	r3, r3, #22
 801e098:	d402      	bmi.n	801e0a0 <_fputs_r+0x2c>
 801e09a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e09c:	f000 fac3 	bl	801e626 <__retarget_lock_acquire_recursive>
 801e0a0:	89a3      	ldrh	r3, [r4, #12]
 801e0a2:	0718      	lsls	r0, r3, #28
 801e0a4:	d51b      	bpl.n	801e0de <_fputs_r+0x6a>
 801e0a6:	6923      	ldr	r3, [r4, #16]
 801e0a8:	b1cb      	cbz	r3, 801e0de <_fputs_r+0x6a>
 801e0aa:	3e01      	subs	r6, #1
 801e0ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801e0b0:	bb39      	cbnz	r1, 801e102 <_fputs_r+0x8e>
 801e0b2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801e0b4:	f015 0501 	ands.w	r5, r5, #1
 801e0b8:	d139      	bne.n	801e12e <_fputs_r+0xba>
 801e0ba:	89a3      	ldrh	r3, [r4, #12]
 801e0bc:	0599      	lsls	r1, r3, #22
 801e0be:	d402      	bmi.n	801e0c6 <_fputs_r+0x52>
 801e0c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e0c2:	f000 fab2 	bl	801e62a <__retarget_lock_release_recursive>
 801e0c6:	4628      	mov	r0, r5
 801e0c8:	bd70      	pop	{r4, r5, r6, pc}
 801e0ca:	4b1b      	ldr	r3, [pc, #108]	; (801e138 <_fputs_r+0xc4>)
 801e0cc:	429c      	cmp	r4, r3
 801e0ce:	d101      	bne.n	801e0d4 <_fputs_r+0x60>
 801e0d0:	68ac      	ldr	r4, [r5, #8]
 801e0d2:	e7dc      	b.n	801e08e <_fputs_r+0x1a>
 801e0d4:	4b19      	ldr	r3, [pc, #100]	; (801e13c <_fputs_r+0xc8>)
 801e0d6:	429c      	cmp	r4, r3
 801e0d8:	bf08      	it	eq
 801e0da:	68ec      	ldreq	r4, [r5, #12]
 801e0dc:	e7d7      	b.n	801e08e <_fputs_r+0x1a>
 801e0de:	4621      	mov	r1, r4
 801e0e0:	4628      	mov	r0, r5
 801e0e2:	f001 fe0f 	bl	801fd04 <__swsetup_r>
 801e0e6:	2800      	cmp	r0, #0
 801e0e8:	d0df      	beq.n	801e0aa <_fputs_r+0x36>
 801e0ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e0ec:	07da      	lsls	r2, r3, #31
 801e0ee:	d405      	bmi.n	801e0fc <_fputs_r+0x88>
 801e0f0:	89a3      	ldrh	r3, [r4, #12]
 801e0f2:	059b      	lsls	r3, r3, #22
 801e0f4:	d402      	bmi.n	801e0fc <_fputs_r+0x88>
 801e0f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e0f8:	f000 fa97 	bl	801e62a <__retarget_lock_release_recursive>
 801e0fc:	f04f 35ff 	mov.w	r5, #4294967295
 801e100:	e7e1      	b.n	801e0c6 <_fputs_r+0x52>
 801e102:	68a3      	ldr	r3, [r4, #8]
 801e104:	3b01      	subs	r3, #1
 801e106:	2b00      	cmp	r3, #0
 801e108:	60a3      	str	r3, [r4, #8]
 801e10a:	da04      	bge.n	801e116 <_fputs_r+0xa2>
 801e10c:	69a2      	ldr	r2, [r4, #24]
 801e10e:	4293      	cmp	r3, r2
 801e110:	db06      	blt.n	801e120 <_fputs_r+0xac>
 801e112:	290a      	cmp	r1, #10
 801e114:	d004      	beq.n	801e120 <_fputs_r+0xac>
 801e116:	6823      	ldr	r3, [r4, #0]
 801e118:	1c5a      	adds	r2, r3, #1
 801e11a:	6022      	str	r2, [r4, #0]
 801e11c:	7019      	strb	r1, [r3, #0]
 801e11e:	e7c5      	b.n	801e0ac <_fputs_r+0x38>
 801e120:	4622      	mov	r2, r4
 801e122:	4628      	mov	r0, r5
 801e124:	f001 fd8a 	bl	801fc3c <__swbuf_r>
 801e128:	3001      	adds	r0, #1
 801e12a:	d1bf      	bne.n	801e0ac <_fputs_r+0x38>
 801e12c:	e7dd      	b.n	801e0ea <_fputs_r+0x76>
 801e12e:	460d      	mov	r5, r1
 801e130:	e7c9      	b.n	801e0c6 <_fputs_r+0x52>
 801e132:	bf00      	nop
 801e134:	08026920 	.word	0x08026920
 801e138:	08026940 	.word	0x08026940
 801e13c:	08026900 	.word	0x08026900

0801e140 <fputs>:
 801e140:	4b02      	ldr	r3, [pc, #8]	; (801e14c <fputs+0xc>)
 801e142:	460a      	mov	r2, r1
 801e144:	4601      	mov	r1, r0
 801e146:	6818      	ldr	r0, [r3, #0]
 801e148:	f7ff bf94 	b.w	801e074 <_fputs_r>
 801e14c:	20000108 	.word	0x20000108

0801e150 <_fseek_r>:
 801e150:	f000 b800 	b.w	801e154 <_fseeko_r>

0801e154 <_fseeko_r>:
 801e154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e158:	460c      	mov	r4, r1
 801e15a:	4617      	mov	r7, r2
 801e15c:	461e      	mov	r6, r3
 801e15e:	4605      	mov	r5, r0
 801e160:	b118      	cbz	r0, 801e16a <_fseeko_r+0x16>
 801e162:	6983      	ldr	r3, [r0, #24]
 801e164:	b90b      	cbnz	r3, 801e16a <_fseeko_r+0x16>
 801e166:	f7ff feab 	bl	801dec0 <__sinit>
 801e16a:	4b44      	ldr	r3, [pc, #272]	; (801e27c <_fseeko_r+0x128>)
 801e16c:	429c      	cmp	r4, r3
 801e16e:	d122      	bne.n	801e1b6 <_fseeko_r+0x62>
 801e170:	686c      	ldr	r4, [r5, #4]
 801e172:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e174:	07d9      	lsls	r1, r3, #31
 801e176:	d405      	bmi.n	801e184 <_fseeko_r+0x30>
 801e178:	89a3      	ldrh	r3, [r4, #12]
 801e17a:	059a      	lsls	r2, r3, #22
 801e17c:	d402      	bmi.n	801e184 <_fseeko_r+0x30>
 801e17e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e180:	f000 fa51 	bl	801e626 <__retarget_lock_acquire_recursive>
 801e184:	89a3      	ldrh	r3, [r4, #12]
 801e186:	f403 7384 	and.w	r3, r3, #264	; 0x108
 801e18a:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 801e18e:	d103      	bne.n	801e198 <_fseeko_r+0x44>
 801e190:	4621      	mov	r1, r4
 801e192:	4628      	mov	r0, r5
 801e194:	f7ff fdee 	bl	801dd74 <_fflush_r>
 801e198:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 801e19c:	f1b8 0f00 	cmp.w	r8, #0
 801e1a0:	d113      	bne.n	801e1ca <_fseeko_r+0x76>
 801e1a2:	231d      	movs	r3, #29
 801e1a4:	602b      	str	r3, [r5, #0]
 801e1a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e1a8:	07d9      	lsls	r1, r3, #31
 801e1aa:	d55d      	bpl.n	801e268 <_fseeko_r+0x114>
 801e1ac:	f04f 36ff 	mov.w	r6, #4294967295
 801e1b0:	4630      	mov	r0, r6
 801e1b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e1b6:	4b32      	ldr	r3, [pc, #200]	; (801e280 <_fseeko_r+0x12c>)
 801e1b8:	429c      	cmp	r4, r3
 801e1ba:	d101      	bne.n	801e1c0 <_fseeko_r+0x6c>
 801e1bc:	68ac      	ldr	r4, [r5, #8]
 801e1be:	e7d8      	b.n	801e172 <_fseeko_r+0x1e>
 801e1c0:	4b30      	ldr	r3, [pc, #192]	; (801e284 <_fseeko_r+0x130>)
 801e1c2:	429c      	cmp	r4, r3
 801e1c4:	bf08      	it	eq
 801e1c6:	68ec      	ldreq	r4, [r5, #12]
 801e1c8:	e7d3      	b.n	801e172 <_fseeko_r+0x1e>
 801e1ca:	2e01      	cmp	r6, #1
 801e1cc:	d036      	beq.n	801e23c <_fseeko_r+0xe8>
 801e1ce:	f036 0302 	bics.w	r3, r6, #2
 801e1d2:	d147      	bne.n	801e264 <_fseeko_r+0x110>
 801e1d4:	6923      	ldr	r3, [r4, #16]
 801e1d6:	b91b      	cbnz	r3, 801e1e0 <_fseeko_r+0x8c>
 801e1d8:	4621      	mov	r1, r4
 801e1da:	4628      	mov	r0, r5
 801e1dc:	f000 fa4a 	bl	801e674 <__smakebuf_r>
 801e1e0:	4621      	mov	r1, r4
 801e1e2:	4628      	mov	r0, r5
 801e1e4:	f7ff fdc6 	bl	801dd74 <_fflush_r>
 801e1e8:	2800      	cmp	r0, #0
 801e1ea:	d1dc      	bne.n	801e1a6 <_fseeko_r+0x52>
 801e1ec:	6a21      	ldr	r1, [r4, #32]
 801e1ee:	4633      	mov	r3, r6
 801e1f0:	463a      	mov	r2, r7
 801e1f2:	4628      	mov	r0, r5
 801e1f4:	47c0      	blx	r8
 801e1f6:	3001      	adds	r0, #1
 801e1f8:	d0d5      	beq.n	801e1a6 <_fseeko_r+0x52>
 801e1fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e1fc:	b141      	cbz	r1, 801e210 <_fseeko_r+0xbc>
 801e1fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e202:	4299      	cmp	r1, r3
 801e204:	d002      	beq.n	801e20c <_fseeko_r+0xb8>
 801e206:	4628      	mov	r0, r5
 801e208:	f000 faaa 	bl	801e760 <_free_r>
 801e20c:	2300      	movs	r3, #0
 801e20e:	6363      	str	r3, [r4, #52]	; 0x34
 801e210:	6923      	ldr	r3, [r4, #16]
 801e212:	6023      	str	r3, [r4, #0]
 801e214:	89a3      	ldrh	r3, [r4, #12]
 801e216:	2500      	movs	r5, #0
 801e218:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 801e21c:	6065      	str	r5, [r4, #4]
 801e21e:	81a3      	strh	r3, [r4, #12]
 801e220:	2208      	movs	r2, #8
 801e222:	4629      	mov	r1, r5
 801e224:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e228:	f000 fa82 	bl	801e730 <memset>
 801e22c:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801e22e:	f016 0601 	ands.w	r6, r6, #1
 801e232:	d120      	bne.n	801e276 <_fseeko_r+0x122>
 801e234:	89a3      	ldrh	r3, [r4, #12]
 801e236:	059b      	lsls	r3, r3, #22
 801e238:	d4ba      	bmi.n	801e1b0 <_fseeko_r+0x5c>
 801e23a:	e00c      	b.n	801e256 <_fseeko_r+0x102>
 801e23c:	4621      	mov	r1, r4
 801e23e:	4628      	mov	r0, r5
 801e240:	f000 f822 	bl	801e288 <_ftello_r>
 801e244:	1c43      	adds	r3, r0, #1
 801e246:	4606      	mov	r6, r0
 801e248:	d109      	bne.n	801e25e <_fseeko_r+0x10a>
 801e24a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e24c:	07dd      	lsls	r5, r3, #31
 801e24e:	d4ad      	bmi.n	801e1ac <_fseeko_r+0x58>
 801e250:	89a3      	ldrh	r3, [r4, #12]
 801e252:	0598      	lsls	r0, r3, #22
 801e254:	d4aa      	bmi.n	801e1ac <_fseeko_r+0x58>
 801e256:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e258:	f000 f9e7 	bl	801e62a <__retarget_lock_release_recursive>
 801e25c:	e7a8      	b.n	801e1b0 <_fseeko_r+0x5c>
 801e25e:	4407      	add	r7, r0
 801e260:	2600      	movs	r6, #0
 801e262:	e7b7      	b.n	801e1d4 <_fseeko_r+0x80>
 801e264:	2316      	movs	r3, #22
 801e266:	e79d      	b.n	801e1a4 <_fseeko_r+0x50>
 801e268:	89a3      	ldrh	r3, [r4, #12]
 801e26a:	059a      	lsls	r2, r3, #22
 801e26c:	d49e      	bmi.n	801e1ac <_fseeko_r+0x58>
 801e26e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e270:	f000 f9db 	bl	801e62a <__retarget_lock_release_recursive>
 801e274:	e79a      	b.n	801e1ac <_fseeko_r+0x58>
 801e276:	462e      	mov	r6, r5
 801e278:	e79a      	b.n	801e1b0 <_fseeko_r+0x5c>
 801e27a:	bf00      	nop
 801e27c:	08026920 	.word	0x08026920
 801e280:	08026940 	.word	0x08026940
 801e284:	08026900 	.word	0x08026900

0801e288 <_ftello_r>:
 801e288:	b570      	push	{r4, r5, r6, lr}
 801e28a:	460c      	mov	r4, r1
 801e28c:	4605      	mov	r5, r0
 801e28e:	b118      	cbz	r0, 801e298 <_ftello_r+0x10>
 801e290:	6983      	ldr	r3, [r0, #24]
 801e292:	b90b      	cbnz	r3, 801e298 <_ftello_r+0x10>
 801e294:	f7ff fe14 	bl	801dec0 <__sinit>
 801e298:	4b32      	ldr	r3, [pc, #200]	; (801e364 <_ftello_r+0xdc>)
 801e29a:	429c      	cmp	r4, r3
 801e29c:	d114      	bne.n	801e2c8 <_ftello_r+0x40>
 801e29e:	686c      	ldr	r4, [r5, #4]
 801e2a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e2a2:	07da      	lsls	r2, r3, #31
 801e2a4:	d405      	bmi.n	801e2b2 <_ftello_r+0x2a>
 801e2a6:	89a3      	ldrh	r3, [r4, #12]
 801e2a8:	059b      	lsls	r3, r3, #22
 801e2aa:	d402      	bmi.n	801e2b2 <_ftello_r+0x2a>
 801e2ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e2ae:	f000 f9ba 	bl	801e626 <__retarget_lock_acquire_recursive>
 801e2b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e2b4:	b9ce      	cbnz	r6, 801e2ea <_ftello_r+0x62>
 801e2b6:	231d      	movs	r3, #29
 801e2b8:	602b      	str	r3, [r5, #0]
 801e2ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e2bc:	07de      	lsls	r6, r3, #31
 801e2be:	d50d      	bpl.n	801e2dc <_ftello_r+0x54>
 801e2c0:	f04f 35ff 	mov.w	r5, #4294967295
 801e2c4:	4628      	mov	r0, r5
 801e2c6:	bd70      	pop	{r4, r5, r6, pc}
 801e2c8:	4b27      	ldr	r3, [pc, #156]	; (801e368 <_ftello_r+0xe0>)
 801e2ca:	429c      	cmp	r4, r3
 801e2cc:	d101      	bne.n	801e2d2 <_ftello_r+0x4a>
 801e2ce:	68ac      	ldr	r4, [r5, #8]
 801e2d0:	e7e6      	b.n	801e2a0 <_ftello_r+0x18>
 801e2d2:	4b26      	ldr	r3, [pc, #152]	; (801e36c <_ftello_r+0xe4>)
 801e2d4:	429c      	cmp	r4, r3
 801e2d6:	bf08      	it	eq
 801e2d8:	68ec      	ldreq	r4, [r5, #12]
 801e2da:	e7e1      	b.n	801e2a0 <_ftello_r+0x18>
 801e2dc:	89a3      	ldrh	r3, [r4, #12]
 801e2de:	059d      	lsls	r5, r3, #22
 801e2e0:	d4ee      	bmi.n	801e2c0 <_ftello_r+0x38>
 801e2e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e2e4:	f000 f9a1 	bl	801e62a <__retarget_lock_release_recursive>
 801e2e8:	e7ea      	b.n	801e2c0 <_ftello_r+0x38>
 801e2ea:	89a2      	ldrh	r2, [r4, #12]
 801e2ec:	f002 030c 	and.w	r3, r2, #12
 801e2f0:	2b08      	cmp	r3, #8
 801e2f2:	d119      	bne.n	801e328 <_ftello_r+0xa0>
 801e2f4:	6823      	ldr	r3, [r4, #0]
 801e2f6:	b1bb      	cbz	r3, 801e328 <_ftello_r+0xa0>
 801e2f8:	6921      	ldr	r1, [r4, #16]
 801e2fa:	1a5b      	subs	r3, r3, r1
 801e2fc:	2b00      	cmp	r3, #0
 801e2fe:	dd13      	ble.n	801e328 <_ftello_r+0xa0>
 801e300:	05d0      	lsls	r0, r2, #23
 801e302:	d511      	bpl.n	801e328 <_ftello_r+0xa0>
 801e304:	2302      	movs	r3, #2
 801e306:	2200      	movs	r2, #0
 801e308:	6a21      	ldr	r1, [r4, #32]
 801e30a:	4628      	mov	r0, r5
 801e30c:	47b0      	blx	r6
 801e30e:	1c41      	adds	r1, r0, #1
 801e310:	4605      	mov	r5, r0
 801e312:	d10d      	bne.n	801e330 <_ftello_r+0xa8>
 801e314:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e316:	07da      	lsls	r2, r3, #31
 801e318:	d4d2      	bmi.n	801e2c0 <_ftello_r+0x38>
 801e31a:	89a3      	ldrh	r3, [r4, #12]
 801e31c:	059b      	lsls	r3, r3, #22
 801e31e:	d4cf      	bmi.n	801e2c0 <_ftello_r+0x38>
 801e320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e322:	f000 f982 	bl	801e62a <__retarget_lock_release_recursive>
 801e326:	e7cd      	b.n	801e2c4 <_ftello_r+0x3c>
 801e328:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e32c:	d00f      	beq.n	801e34e <_ftello_r+0xc6>
 801e32e:	6d65      	ldr	r5, [r4, #84]	; 0x54
 801e330:	89a2      	ldrh	r2, [r4, #12]
 801e332:	0756      	lsls	r6, r2, #29
 801e334:	d50d      	bpl.n	801e352 <_ftello_r+0xca>
 801e336:	6863      	ldr	r3, [r4, #4]
 801e338:	1aed      	subs	r5, r5, r3
 801e33a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e33c:	b10b      	cbz	r3, 801e342 <_ftello_r+0xba>
 801e33e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e340:	1aed      	subs	r5, r5, r3
 801e342:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e344:	07d9      	lsls	r1, r3, #31
 801e346:	d4bd      	bmi.n	801e2c4 <_ftello_r+0x3c>
 801e348:	0593      	lsls	r3, r2, #22
 801e34a:	d4bb      	bmi.n	801e2c4 <_ftello_r+0x3c>
 801e34c:	e7e8      	b.n	801e320 <_ftello_r+0x98>
 801e34e:	2301      	movs	r3, #1
 801e350:	e7da      	b.n	801e308 <_ftello_r+0x80>
 801e352:	0710      	lsls	r0, r2, #28
 801e354:	d5f5      	bpl.n	801e342 <_ftello_r+0xba>
 801e356:	6823      	ldr	r3, [r4, #0]
 801e358:	2b00      	cmp	r3, #0
 801e35a:	d0f2      	beq.n	801e342 <_ftello_r+0xba>
 801e35c:	6921      	ldr	r1, [r4, #16]
 801e35e:	1a5b      	subs	r3, r3, r1
 801e360:	441d      	add	r5, r3
 801e362:	e7ee      	b.n	801e342 <_ftello_r+0xba>
 801e364:	08026920 	.word	0x08026920
 801e368:	08026940 	.word	0x08026940
 801e36c:	08026900 	.word	0x08026900

0801e370 <_fwalk_reent>:
 801e370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e374:	4606      	mov	r6, r0
 801e376:	4688      	mov	r8, r1
 801e378:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e37c:	2700      	movs	r7, #0
 801e37e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e382:	f1b9 0901 	subs.w	r9, r9, #1
 801e386:	d505      	bpl.n	801e394 <_fwalk_reent+0x24>
 801e388:	6824      	ldr	r4, [r4, #0]
 801e38a:	2c00      	cmp	r4, #0
 801e38c:	d1f7      	bne.n	801e37e <_fwalk_reent+0xe>
 801e38e:	4638      	mov	r0, r7
 801e390:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e394:	89ab      	ldrh	r3, [r5, #12]
 801e396:	2b01      	cmp	r3, #1
 801e398:	d907      	bls.n	801e3aa <_fwalk_reent+0x3a>
 801e39a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e39e:	3301      	adds	r3, #1
 801e3a0:	d003      	beq.n	801e3aa <_fwalk_reent+0x3a>
 801e3a2:	4629      	mov	r1, r5
 801e3a4:	4630      	mov	r0, r6
 801e3a6:	47c0      	blx	r8
 801e3a8:	4307      	orrs	r7, r0
 801e3aa:	3568      	adds	r5, #104	; 0x68
 801e3ac:	e7e9      	b.n	801e382 <_fwalk_reent+0x12>
	...

0801e3b0 <__libc_init_array>:
 801e3b0:	b570      	push	{r4, r5, r6, lr}
 801e3b2:	4d0d      	ldr	r5, [pc, #52]	; (801e3e8 <__libc_init_array+0x38>)
 801e3b4:	4c0d      	ldr	r4, [pc, #52]	; (801e3ec <__libc_init_array+0x3c>)
 801e3b6:	1b64      	subs	r4, r4, r5
 801e3b8:	10a4      	asrs	r4, r4, #2
 801e3ba:	2600      	movs	r6, #0
 801e3bc:	42a6      	cmp	r6, r4
 801e3be:	d109      	bne.n	801e3d4 <__libc_init_array+0x24>
 801e3c0:	4d0b      	ldr	r5, [pc, #44]	; (801e3f0 <__libc_init_array+0x40>)
 801e3c2:	4c0c      	ldr	r4, [pc, #48]	; (801e3f4 <__libc_init_array+0x44>)
 801e3c4:	f003 f8cc 	bl	8021560 <_init>
 801e3c8:	1b64      	subs	r4, r4, r5
 801e3ca:	10a4      	asrs	r4, r4, #2
 801e3cc:	2600      	movs	r6, #0
 801e3ce:	42a6      	cmp	r6, r4
 801e3d0:	d105      	bne.n	801e3de <__libc_init_array+0x2e>
 801e3d2:	bd70      	pop	{r4, r5, r6, pc}
 801e3d4:	f855 3b04 	ldr.w	r3, [r5], #4
 801e3d8:	4798      	blx	r3
 801e3da:	3601      	adds	r6, #1
 801e3dc:	e7ee      	b.n	801e3bc <__libc_init_array+0xc>
 801e3de:	f855 3b04 	ldr.w	r3, [r5], #4
 801e3e2:	4798      	blx	r3
 801e3e4:	3601      	adds	r6, #1
 801e3e6:	e7f2      	b.n	801e3ce <__libc_init_array+0x1e>
 801e3e8:	08026ef8 	.word	0x08026ef8
 801e3ec:	08026ef8 	.word	0x08026ef8
 801e3f0:	08026ef8 	.word	0x08026ef8
 801e3f4:	08026f08 	.word	0x08026f08

0801e3f8 <localtime>:
 801e3f8:	b538      	push	{r3, r4, r5, lr}
 801e3fa:	4b0b      	ldr	r3, [pc, #44]	; (801e428 <localtime+0x30>)
 801e3fc:	681d      	ldr	r5, [r3, #0]
 801e3fe:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801e400:	4604      	mov	r4, r0
 801e402:	b953      	cbnz	r3, 801e41a <localtime+0x22>
 801e404:	2024      	movs	r0, #36	; 0x24
 801e406:	f000 f975 	bl	801e6f4 <malloc>
 801e40a:	4602      	mov	r2, r0
 801e40c:	63e8      	str	r0, [r5, #60]	; 0x3c
 801e40e:	b920      	cbnz	r0, 801e41a <localtime+0x22>
 801e410:	4b06      	ldr	r3, [pc, #24]	; (801e42c <localtime+0x34>)
 801e412:	4807      	ldr	r0, [pc, #28]	; (801e430 <localtime+0x38>)
 801e414:	2132      	movs	r1, #50	; 0x32
 801e416:	f001 fd49 	bl	801feac <__assert_func>
 801e41a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 801e41c:	4620      	mov	r0, r4
 801e41e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e422:	f000 b807 	b.w	801e434 <localtime_r>
 801e426:	bf00      	nop
 801e428:	20000108 	.word	0x20000108
 801e42c:	08026964 	.word	0x08026964
 801e430:	0802697b 	.word	0x0802697b

0801e434 <localtime_r>:
 801e434:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801e438:	4607      	mov	r7, r0
 801e43a:	9101      	str	r1, [sp, #4]
 801e43c:	f001 fe00 	bl	8020040 <__gettzinfo>
 801e440:	9901      	ldr	r1, [sp, #4]
 801e442:	4680      	mov	r8, r0
 801e444:	4638      	mov	r0, r7
 801e446:	f001 fdff 	bl	8020048 <gmtime_r>
 801e44a:	6943      	ldr	r3, [r0, #20]
 801e44c:	079a      	lsls	r2, r3, #30
 801e44e:	4604      	mov	r4, r0
 801e450:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 801e454:	d105      	bne.n	801e462 <localtime_r+0x2e>
 801e456:	2264      	movs	r2, #100	; 0x64
 801e458:	fb96 f3f2 	sdiv	r3, r6, r2
 801e45c:	fb02 6313 	mls	r3, r2, r3, r6
 801e460:	bb7b      	cbnz	r3, 801e4c2 <localtime_r+0x8e>
 801e462:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801e466:	fb96 f5f3 	sdiv	r5, r6, r3
 801e46a:	fb03 6515 	mls	r5, r3, r5, r6
 801e46e:	fab5 f585 	clz	r5, r5
 801e472:	096d      	lsrs	r5, r5, #5
 801e474:	4b68      	ldr	r3, [pc, #416]	; (801e618 <localtime_r+0x1e4>)
 801e476:	2230      	movs	r2, #48	; 0x30
 801e478:	fb02 3505 	mla	r5, r2, r5, r3
 801e47c:	f001 fa16 	bl	801f8ac <__tz_lock>
 801e480:	f001 fa20 	bl	801f8c4 <_tzset_unlocked>
 801e484:	4b65      	ldr	r3, [pc, #404]	; (801e61c <localtime_r+0x1e8>)
 801e486:	681b      	ldr	r3, [r3, #0]
 801e488:	b353      	cbz	r3, 801e4e0 <localtime_r+0xac>
 801e48a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801e48e:	42b3      	cmp	r3, r6
 801e490:	d119      	bne.n	801e4c6 <localtime_r+0x92>
 801e492:	f8d8 1000 	ldr.w	r1, [r8]
 801e496:	e9d7 6700 	ldrd	r6, r7, [r7]
 801e49a:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 801e49e:	b9d1      	cbnz	r1, 801e4d6 <localtime_r+0xa2>
 801e4a0:	4296      	cmp	r6, r2
 801e4a2:	eb77 0303 	sbcs.w	r3, r7, r3
 801e4a6:	da23      	bge.n	801e4f0 <localtime_r+0xbc>
 801e4a8:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801e4ac:	4296      	cmp	r6, r2
 801e4ae:	eb77 0303 	sbcs.w	r3, r7, r3
 801e4b2:	bfb4      	ite	lt
 801e4b4:	2301      	movlt	r3, #1
 801e4b6:	2300      	movge	r3, #0
 801e4b8:	6223      	str	r3, [r4, #32]
 801e4ba:	db1b      	blt.n	801e4f4 <localtime_r+0xc0>
 801e4bc:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 801e4c0:	e01a      	b.n	801e4f8 <localtime_r+0xc4>
 801e4c2:	2501      	movs	r5, #1
 801e4c4:	e7d6      	b.n	801e474 <localtime_r+0x40>
 801e4c6:	4630      	mov	r0, r6
 801e4c8:	f001 f948 	bl	801f75c <__tzcalc_limits>
 801e4cc:	2800      	cmp	r0, #0
 801e4ce:	d1e0      	bne.n	801e492 <localtime_r+0x5e>
 801e4d0:	f04f 33ff 	mov.w	r3, #4294967295
 801e4d4:	e004      	b.n	801e4e0 <localtime_r+0xac>
 801e4d6:	4296      	cmp	r6, r2
 801e4d8:	eb77 0303 	sbcs.w	r3, r7, r3
 801e4dc:	da02      	bge.n	801e4e4 <localtime_r+0xb0>
 801e4de:	2300      	movs	r3, #0
 801e4e0:	6223      	str	r3, [r4, #32]
 801e4e2:	e7eb      	b.n	801e4bc <localtime_r+0x88>
 801e4e4:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801e4e8:	4296      	cmp	r6, r2
 801e4ea:	eb77 0303 	sbcs.w	r3, r7, r3
 801e4ee:	daf6      	bge.n	801e4de <localtime_r+0xaa>
 801e4f0:	2301      	movs	r3, #1
 801e4f2:	6223      	str	r3, [r4, #32]
 801e4f4:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 801e4f8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801e4fc:	203c      	movs	r0, #60	; 0x3c
 801e4fe:	fb91 f6f3 	sdiv	r6, r1, r3
 801e502:	fb03 1316 	mls	r3, r3, r6, r1
 801e506:	6861      	ldr	r1, [r4, #4]
 801e508:	fb93 f2f0 	sdiv	r2, r3, r0
 801e50c:	fb00 3012 	mls	r0, r0, r2, r3
 801e510:	6823      	ldr	r3, [r4, #0]
 801e512:	1a89      	subs	r1, r1, r2
 801e514:	68a2      	ldr	r2, [r4, #8]
 801e516:	6061      	str	r1, [r4, #4]
 801e518:	1a1b      	subs	r3, r3, r0
 801e51a:	1b92      	subs	r2, r2, r6
 801e51c:	2b3b      	cmp	r3, #59	; 0x3b
 801e51e:	6023      	str	r3, [r4, #0]
 801e520:	60a2      	str	r2, [r4, #8]
 801e522:	dd35      	ble.n	801e590 <localtime_r+0x15c>
 801e524:	3101      	adds	r1, #1
 801e526:	6061      	str	r1, [r4, #4]
 801e528:	3b3c      	subs	r3, #60	; 0x3c
 801e52a:	6023      	str	r3, [r4, #0]
 801e52c:	6863      	ldr	r3, [r4, #4]
 801e52e:	2b3b      	cmp	r3, #59	; 0x3b
 801e530:	dd34      	ble.n	801e59c <localtime_r+0x168>
 801e532:	3201      	adds	r2, #1
 801e534:	60a2      	str	r2, [r4, #8]
 801e536:	3b3c      	subs	r3, #60	; 0x3c
 801e538:	6063      	str	r3, [r4, #4]
 801e53a:	68a3      	ldr	r3, [r4, #8]
 801e53c:	2b17      	cmp	r3, #23
 801e53e:	dd33      	ble.n	801e5a8 <localtime_r+0x174>
 801e540:	69e2      	ldr	r2, [r4, #28]
 801e542:	3201      	adds	r2, #1
 801e544:	61e2      	str	r2, [r4, #28]
 801e546:	69a2      	ldr	r2, [r4, #24]
 801e548:	3201      	adds	r2, #1
 801e54a:	2a06      	cmp	r2, #6
 801e54c:	bfc8      	it	gt
 801e54e:	2200      	movgt	r2, #0
 801e550:	61a2      	str	r2, [r4, #24]
 801e552:	68e2      	ldr	r2, [r4, #12]
 801e554:	3b18      	subs	r3, #24
 801e556:	3201      	adds	r2, #1
 801e558:	60a3      	str	r3, [r4, #8]
 801e55a:	6923      	ldr	r3, [r4, #16]
 801e55c:	60e2      	str	r2, [r4, #12]
 801e55e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801e562:	428a      	cmp	r2, r1
 801e564:	dd0e      	ble.n	801e584 <localtime_r+0x150>
 801e566:	2b0b      	cmp	r3, #11
 801e568:	eba2 0201 	sub.w	r2, r2, r1
 801e56c:	60e2      	str	r2, [r4, #12]
 801e56e:	f103 0201 	add.w	r2, r3, #1
 801e572:	bf09      	itett	eq
 801e574:	6963      	ldreq	r3, [r4, #20]
 801e576:	6122      	strne	r2, [r4, #16]
 801e578:	2200      	moveq	r2, #0
 801e57a:	3301      	addeq	r3, #1
 801e57c:	bf02      	ittt	eq
 801e57e:	6122      	streq	r2, [r4, #16]
 801e580:	6163      	streq	r3, [r4, #20]
 801e582:	61e2      	streq	r2, [r4, #28]
 801e584:	f001 f998 	bl	801f8b8 <__tz_unlock>
 801e588:	4620      	mov	r0, r4
 801e58a:	b002      	add	sp, #8
 801e58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e590:	2b00      	cmp	r3, #0
 801e592:	dacb      	bge.n	801e52c <localtime_r+0xf8>
 801e594:	3901      	subs	r1, #1
 801e596:	6061      	str	r1, [r4, #4]
 801e598:	333c      	adds	r3, #60	; 0x3c
 801e59a:	e7c6      	b.n	801e52a <localtime_r+0xf6>
 801e59c:	2b00      	cmp	r3, #0
 801e59e:	dacc      	bge.n	801e53a <localtime_r+0x106>
 801e5a0:	3a01      	subs	r2, #1
 801e5a2:	60a2      	str	r2, [r4, #8]
 801e5a4:	333c      	adds	r3, #60	; 0x3c
 801e5a6:	e7c7      	b.n	801e538 <localtime_r+0x104>
 801e5a8:	2b00      	cmp	r3, #0
 801e5aa:	daeb      	bge.n	801e584 <localtime_r+0x150>
 801e5ac:	69e2      	ldr	r2, [r4, #28]
 801e5ae:	3a01      	subs	r2, #1
 801e5b0:	61e2      	str	r2, [r4, #28]
 801e5b2:	69a2      	ldr	r2, [r4, #24]
 801e5b4:	3a01      	subs	r2, #1
 801e5b6:	bf48      	it	mi
 801e5b8:	2206      	movmi	r2, #6
 801e5ba:	61a2      	str	r2, [r4, #24]
 801e5bc:	68e2      	ldr	r2, [r4, #12]
 801e5be:	3318      	adds	r3, #24
 801e5c0:	3a01      	subs	r2, #1
 801e5c2:	60e2      	str	r2, [r4, #12]
 801e5c4:	60a3      	str	r3, [r4, #8]
 801e5c6:	2a00      	cmp	r2, #0
 801e5c8:	d1dc      	bne.n	801e584 <localtime_r+0x150>
 801e5ca:	6923      	ldr	r3, [r4, #16]
 801e5cc:	3b01      	subs	r3, #1
 801e5ce:	d405      	bmi.n	801e5dc <localtime_r+0x1a8>
 801e5d0:	6123      	str	r3, [r4, #16]
 801e5d2:	6923      	ldr	r3, [r4, #16]
 801e5d4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801e5d8:	60e3      	str	r3, [r4, #12]
 801e5da:	e7d3      	b.n	801e584 <localtime_r+0x150>
 801e5dc:	230b      	movs	r3, #11
 801e5de:	6123      	str	r3, [r4, #16]
 801e5e0:	6963      	ldr	r3, [r4, #20]
 801e5e2:	1e5a      	subs	r2, r3, #1
 801e5e4:	6162      	str	r2, [r4, #20]
 801e5e6:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 801e5ea:	0793      	lsls	r3, r2, #30
 801e5ec:	d105      	bne.n	801e5fa <localtime_r+0x1c6>
 801e5ee:	2164      	movs	r1, #100	; 0x64
 801e5f0:	fb92 f3f1 	sdiv	r3, r2, r1
 801e5f4:	fb01 2313 	mls	r3, r1, r3, r2
 801e5f8:	b963      	cbnz	r3, 801e614 <localtime_r+0x1e0>
 801e5fa:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801e5fe:	fb92 f3f1 	sdiv	r3, r2, r1
 801e602:	fb01 2313 	mls	r3, r1, r3, r2
 801e606:	fab3 f383 	clz	r3, r3
 801e60a:	095b      	lsrs	r3, r3, #5
 801e60c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801e610:	61e3      	str	r3, [r4, #28]
 801e612:	e7de      	b.n	801e5d2 <localtime_r+0x19e>
 801e614:	2301      	movs	r3, #1
 801e616:	e7f9      	b.n	801e60c <localtime_r+0x1d8>
 801e618:	080269dc 	.word	0x080269dc
 801e61c:	20000d88 	.word	0x20000d88

0801e620 <__retarget_lock_init_recursive>:
 801e620:	4770      	bx	lr

0801e622 <__retarget_lock_close_recursive>:
 801e622:	4770      	bx	lr

0801e624 <__retarget_lock_acquire>:
 801e624:	4770      	bx	lr

0801e626 <__retarget_lock_acquire_recursive>:
 801e626:	4770      	bx	lr

0801e628 <__retarget_lock_release>:
 801e628:	4770      	bx	lr

0801e62a <__retarget_lock_release_recursive>:
 801e62a:	4770      	bx	lr

0801e62c <__swhatbuf_r>:
 801e62c:	b570      	push	{r4, r5, r6, lr}
 801e62e:	460e      	mov	r6, r1
 801e630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e634:	2900      	cmp	r1, #0
 801e636:	b096      	sub	sp, #88	; 0x58
 801e638:	4614      	mov	r4, r2
 801e63a:	461d      	mov	r5, r3
 801e63c:	da07      	bge.n	801e64e <__swhatbuf_r+0x22>
 801e63e:	2300      	movs	r3, #0
 801e640:	602b      	str	r3, [r5, #0]
 801e642:	89b3      	ldrh	r3, [r6, #12]
 801e644:	061a      	lsls	r2, r3, #24
 801e646:	d410      	bmi.n	801e66a <__swhatbuf_r+0x3e>
 801e648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e64c:	e00e      	b.n	801e66c <__swhatbuf_r+0x40>
 801e64e:	466a      	mov	r2, sp
 801e650:	f001 fca2 	bl	801ff98 <_fstat_r>
 801e654:	2800      	cmp	r0, #0
 801e656:	dbf2      	blt.n	801e63e <__swhatbuf_r+0x12>
 801e658:	9a01      	ldr	r2, [sp, #4]
 801e65a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e65e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e662:	425a      	negs	r2, r3
 801e664:	415a      	adcs	r2, r3
 801e666:	602a      	str	r2, [r5, #0]
 801e668:	e7ee      	b.n	801e648 <__swhatbuf_r+0x1c>
 801e66a:	2340      	movs	r3, #64	; 0x40
 801e66c:	2000      	movs	r0, #0
 801e66e:	6023      	str	r3, [r4, #0]
 801e670:	b016      	add	sp, #88	; 0x58
 801e672:	bd70      	pop	{r4, r5, r6, pc}

0801e674 <__smakebuf_r>:
 801e674:	898b      	ldrh	r3, [r1, #12]
 801e676:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e678:	079d      	lsls	r5, r3, #30
 801e67a:	4606      	mov	r6, r0
 801e67c:	460c      	mov	r4, r1
 801e67e:	d507      	bpl.n	801e690 <__smakebuf_r+0x1c>
 801e680:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e684:	6023      	str	r3, [r4, #0]
 801e686:	6123      	str	r3, [r4, #16]
 801e688:	2301      	movs	r3, #1
 801e68a:	6163      	str	r3, [r4, #20]
 801e68c:	b002      	add	sp, #8
 801e68e:	bd70      	pop	{r4, r5, r6, pc}
 801e690:	ab01      	add	r3, sp, #4
 801e692:	466a      	mov	r2, sp
 801e694:	f7ff ffca 	bl	801e62c <__swhatbuf_r>
 801e698:	9900      	ldr	r1, [sp, #0]
 801e69a:	4605      	mov	r5, r0
 801e69c:	4630      	mov	r0, r6
 801e69e:	f000 f8af 	bl	801e800 <_malloc_r>
 801e6a2:	b948      	cbnz	r0, 801e6b8 <__smakebuf_r+0x44>
 801e6a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e6a8:	059a      	lsls	r2, r3, #22
 801e6aa:	d4ef      	bmi.n	801e68c <__smakebuf_r+0x18>
 801e6ac:	f023 0303 	bic.w	r3, r3, #3
 801e6b0:	f043 0302 	orr.w	r3, r3, #2
 801e6b4:	81a3      	strh	r3, [r4, #12]
 801e6b6:	e7e3      	b.n	801e680 <__smakebuf_r+0xc>
 801e6b8:	4b0d      	ldr	r3, [pc, #52]	; (801e6f0 <__smakebuf_r+0x7c>)
 801e6ba:	62b3      	str	r3, [r6, #40]	; 0x28
 801e6bc:	89a3      	ldrh	r3, [r4, #12]
 801e6be:	6020      	str	r0, [r4, #0]
 801e6c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e6c4:	81a3      	strh	r3, [r4, #12]
 801e6c6:	9b00      	ldr	r3, [sp, #0]
 801e6c8:	6163      	str	r3, [r4, #20]
 801e6ca:	9b01      	ldr	r3, [sp, #4]
 801e6cc:	6120      	str	r0, [r4, #16]
 801e6ce:	b15b      	cbz	r3, 801e6e8 <__smakebuf_r+0x74>
 801e6d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e6d4:	4630      	mov	r0, r6
 801e6d6:	f001 fd67 	bl	80201a8 <_isatty_r>
 801e6da:	b128      	cbz	r0, 801e6e8 <__smakebuf_r+0x74>
 801e6dc:	89a3      	ldrh	r3, [r4, #12]
 801e6de:	f023 0303 	bic.w	r3, r3, #3
 801e6e2:	f043 0301 	orr.w	r3, r3, #1
 801e6e6:	81a3      	strh	r3, [r4, #12]
 801e6e8:	89a0      	ldrh	r0, [r4, #12]
 801e6ea:	4305      	orrs	r5, r0
 801e6ec:	81a5      	strh	r5, [r4, #12]
 801e6ee:	e7cd      	b.n	801e68c <__smakebuf_r+0x18>
 801e6f0:	0801de59 	.word	0x0801de59

0801e6f4 <malloc>:
 801e6f4:	4b02      	ldr	r3, [pc, #8]	; (801e700 <malloc+0xc>)
 801e6f6:	4601      	mov	r1, r0
 801e6f8:	6818      	ldr	r0, [r3, #0]
 801e6fa:	f000 b881 	b.w	801e800 <_malloc_r>
 801e6fe:	bf00      	nop
 801e700:	20000108 	.word	0x20000108

0801e704 <free>:
 801e704:	4b02      	ldr	r3, [pc, #8]	; (801e710 <free+0xc>)
 801e706:	4601      	mov	r1, r0
 801e708:	6818      	ldr	r0, [r3, #0]
 801e70a:	f000 b829 	b.w	801e760 <_free_r>
 801e70e:	bf00      	nop
 801e710:	20000108 	.word	0x20000108

0801e714 <memcpy>:
 801e714:	440a      	add	r2, r1
 801e716:	4291      	cmp	r1, r2
 801e718:	f100 33ff 	add.w	r3, r0, #4294967295
 801e71c:	d100      	bne.n	801e720 <memcpy+0xc>
 801e71e:	4770      	bx	lr
 801e720:	b510      	push	{r4, lr}
 801e722:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e726:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e72a:	4291      	cmp	r1, r2
 801e72c:	d1f9      	bne.n	801e722 <memcpy+0xe>
 801e72e:	bd10      	pop	{r4, pc}

0801e730 <memset>:
 801e730:	4402      	add	r2, r0
 801e732:	4603      	mov	r3, r0
 801e734:	4293      	cmp	r3, r2
 801e736:	d100      	bne.n	801e73a <memset+0xa>
 801e738:	4770      	bx	lr
 801e73a:	f803 1b01 	strb.w	r1, [r3], #1
 801e73e:	e7f9      	b.n	801e734 <memset+0x4>

0801e740 <_calloc_r>:
 801e740:	b513      	push	{r0, r1, r4, lr}
 801e742:	434a      	muls	r2, r1
 801e744:	4611      	mov	r1, r2
 801e746:	9201      	str	r2, [sp, #4]
 801e748:	f000 f85a 	bl	801e800 <_malloc_r>
 801e74c:	4604      	mov	r4, r0
 801e74e:	b118      	cbz	r0, 801e758 <_calloc_r+0x18>
 801e750:	9a01      	ldr	r2, [sp, #4]
 801e752:	2100      	movs	r1, #0
 801e754:	f7ff ffec 	bl	801e730 <memset>
 801e758:	4620      	mov	r0, r4
 801e75a:	b002      	add	sp, #8
 801e75c:	bd10      	pop	{r4, pc}
	...

0801e760 <_free_r>:
 801e760:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e762:	2900      	cmp	r1, #0
 801e764:	d048      	beq.n	801e7f8 <_free_r+0x98>
 801e766:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e76a:	9001      	str	r0, [sp, #4]
 801e76c:	2b00      	cmp	r3, #0
 801e76e:	f1a1 0404 	sub.w	r4, r1, #4
 801e772:	bfb8      	it	lt
 801e774:	18e4      	addlt	r4, r4, r3
 801e776:	f001 fd4f 	bl	8020218 <__malloc_lock>
 801e77a:	4a20      	ldr	r2, [pc, #128]	; (801e7fc <_free_r+0x9c>)
 801e77c:	9801      	ldr	r0, [sp, #4]
 801e77e:	6813      	ldr	r3, [r2, #0]
 801e780:	4615      	mov	r5, r2
 801e782:	b933      	cbnz	r3, 801e792 <_free_r+0x32>
 801e784:	6063      	str	r3, [r4, #4]
 801e786:	6014      	str	r4, [r2, #0]
 801e788:	b003      	add	sp, #12
 801e78a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e78e:	f001 bd49 	b.w	8020224 <__malloc_unlock>
 801e792:	42a3      	cmp	r3, r4
 801e794:	d90b      	bls.n	801e7ae <_free_r+0x4e>
 801e796:	6821      	ldr	r1, [r4, #0]
 801e798:	1862      	adds	r2, r4, r1
 801e79a:	4293      	cmp	r3, r2
 801e79c:	bf04      	itt	eq
 801e79e:	681a      	ldreq	r2, [r3, #0]
 801e7a0:	685b      	ldreq	r3, [r3, #4]
 801e7a2:	6063      	str	r3, [r4, #4]
 801e7a4:	bf04      	itt	eq
 801e7a6:	1852      	addeq	r2, r2, r1
 801e7a8:	6022      	streq	r2, [r4, #0]
 801e7aa:	602c      	str	r4, [r5, #0]
 801e7ac:	e7ec      	b.n	801e788 <_free_r+0x28>
 801e7ae:	461a      	mov	r2, r3
 801e7b0:	685b      	ldr	r3, [r3, #4]
 801e7b2:	b10b      	cbz	r3, 801e7b8 <_free_r+0x58>
 801e7b4:	42a3      	cmp	r3, r4
 801e7b6:	d9fa      	bls.n	801e7ae <_free_r+0x4e>
 801e7b8:	6811      	ldr	r1, [r2, #0]
 801e7ba:	1855      	adds	r5, r2, r1
 801e7bc:	42a5      	cmp	r5, r4
 801e7be:	d10b      	bne.n	801e7d8 <_free_r+0x78>
 801e7c0:	6824      	ldr	r4, [r4, #0]
 801e7c2:	4421      	add	r1, r4
 801e7c4:	1854      	adds	r4, r2, r1
 801e7c6:	42a3      	cmp	r3, r4
 801e7c8:	6011      	str	r1, [r2, #0]
 801e7ca:	d1dd      	bne.n	801e788 <_free_r+0x28>
 801e7cc:	681c      	ldr	r4, [r3, #0]
 801e7ce:	685b      	ldr	r3, [r3, #4]
 801e7d0:	6053      	str	r3, [r2, #4]
 801e7d2:	4421      	add	r1, r4
 801e7d4:	6011      	str	r1, [r2, #0]
 801e7d6:	e7d7      	b.n	801e788 <_free_r+0x28>
 801e7d8:	d902      	bls.n	801e7e0 <_free_r+0x80>
 801e7da:	230c      	movs	r3, #12
 801e7dc:	6003      	str	r3, [r0, #0]
 801e7de:	e7d3      	b.n	801e788 <_free_r+0x28>
 801e7e0:	6825      	ldr	r5, [r4, #0]
 801e7e2:	1961      	adds	r1, r4, r5
 801e7e4:	428b      	cmp	r3, r1
 801e7e6:	bf04      	itt	eq
 801e7e8:	6819      	ldreq	r1, [r3, #0]
 801e7ea:	685b      	ldreq	r3, [r3, #4]
 801e7ec:	6063      	str	r3, [r4, #4]
 801e7ee:	bf04      	itt	eq
 801e7f0:	1949      	addeq	r1, r1, r5
 801e7f2:	6021      	streq	r1, [r4, #0]
 801e7f4:	6054      	str	r4, [r2, #4]
 801e7f6:	e7c7      	b.n	801e788 <_free_r+0x28>
 801e7f8:	b003      	add	sp, #12
 801e7fa:	bd30      	pop	{r4, r5, pc}
 801e7fc:	20000d64 	.word	0x20000d64

0801e800 <_malloc_r>:
 801e800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e802:	1ccd      	adds	r5, r1, #3
 801e804:	f025 0503 	bic.w	r5, r5, #3
 801e808:	3508      	adds	r5, #8
 801e80a:	2d0c      	cmp	r5, #12
 801e80c:	bf38      	it	cc
 801e80e:	250c      	movcc	r5, #12
 801e810:	2d00      	cmp	r5, #0
 801e812:	4606      	mov	r6, r0
 801e814:	db01      	blt.n	801e81a <_malloc_r+0x1a>
 801e816:	42a9      	cmp	r1, r5
 801e818:	d903      	bls.n	801e822 <_malloc_r+0x22>
 801e81a:	230c      	movs	r3, #12
 801e81c:	6033      	str	r3, [r6, #0]
 801e81e:	2000      	movs	r0, #0
 801e820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e822:	f001 fcf9 	bl	8020218 <__malloc_lock>
 801e826:	4921      	ldr	r1, [pc, #132]	; (801e8ac <_malloc_r+0xac>)
 801e828:	680a      	ldr	r2, [r1, #0]
 801e82a:	4614      	mov	r4, r2
 801e82c:	b99c      	cbnz	r4, 801e856 <_malloc_r+0x56>
 801e82e:	4f20      	ldr	r7, [pc, #128]	; (801e8b0 <_malloc_r+0xb0>)
 801e830:	683b      	ldr	r3, [r7, #0]
 801e832:	b923      	cbnz	r3, 801e83e <_malloc_r+0x3e>
 801e834:	4621      	mov	r1, r4
 801e836:	4630      	mov	r0, r6
 801e838:	f000 f8da 	bl	801e9f0 <_sbrk_r>
 801e83c:	6038      	str	r0, [r7, #0]
 801e83e:	4629      	mov	r1, r5
 801e840:	4630      	mov	r0, r6
 801e842:	f000 f8d5 	bl	801e9f0 <_sbrk_r>
 801e846:	1c43      	adds	r3, r0, #1
 801e848:	d123      	bne.n	801e892 <_malloc_r+0x92>
 801e84a:	230c      	movs	r3, #12
 801e84c:	6033      	str	r3, [r6, #0]
 801e84e:	4630      	mov	r0, r6
 801e850:	f001 fce8 	bl	8020224 <__malloc_unlock>
 801e854:	e7e3      	b.n	801e81e <_malloc_r+0x1e>
 801e856:	6823      	ldr	r3, [r4, #0]
 801e858:	1b5b      	subs	r3, r3, r5
 801e85a:	d417      	bmi.n	801e88c <_malloc_r+0x8c>
 801e85c:	2b0b      	cmp	r3, #11
 801e85e:	d903      	bls.n	801e868 <_malloc_r+0x68>
 801e860:	6023      	str	r3, [r4, #0]
 801e862:	441c      	add	r4, r3
 801e864:	6025      	str	r5, [r4, #0]
 801e866:	e004      	b.n	801e872 <_malloc_r+0x72>
 801e868:	6863      	ldr	r3, [r4, #4]
 801e86a:	42a2      	cmp	r2, r4
 801e86c:	bf0c      	ite	eq
 801e86e:	600b      	streq	r3, [r1, #0]
 801e870:	6053      	strne	r3, [r2, #4]
 801e872:	4630      	mov	r0, r6
 801e874:	f001 fcd6 	bl	8020224 <__malloc_unlock>
 801e878:	f104 000b 	add.w	r0, r4, #11
 801e87c:	1d23      	adds	r3, r4, #4
 801e87e:	f020 0007 	bic.w	r0, r0, #7
 801e882:	1ac2      	subs	r2, r0, r3
 801e884:	d0cc      	beq.n	801e820 <_malloc_r+0x20>
 801e886:	1a1b      	subs	r3, r3, r0
 801e888:	50a3      	str	r3, [r4, r2]
 801e88a:	e7c9      	b.n	801e820 <_malloc_r+0x20>
 801e88c:	4622      	mov	r2, r4
 801e88e:	6864      	ldr	r4, [r4, #4]
 801e890:	e7cc      	b.n	801e82c <_malloc_r+0x2c>
 801e892:	1cc4      	adds	r4, r0, #3
 801e894:	f024 0403 	bic.w	r4, r4, #3
 801e898:	42a0      	cmp	r0, r4
 801e89a:	d0e3      	beq.n	801e864 <_malloc_r+0x64>
 801e89c:	1a21      	subs	r1, r4, r0
 801e89e:	4630      	mov	r0, r6
 801e8a0:	f000 f8a6 	bl	801e9f0 <_sbrk_r>
 801e8a4:	3001      	adds	r0, #1
 801e8a6:	d1dd      	bne.n	801e864 <_malloc_r+0x64>
 801e8a8:	e7cf      	b.n	801e84a <_malloc_r+0x4a>
 801e8aa:	bf00      	nop
 801e8ac:	20000d64 	.word	0x20000d64
 801e8b0:	20000d68 	.word	0x20000d68

0801e8b4 <_open_r>:
 801e8b4:	b538      	push	{r3, r4, r5, lr}
 801e8b6:	4d07      	ldr	r5, [pc, #28]	; (801e8d4 <_open_r+0x20>)
 801e8b8:	4604      	mov	r4, r0
 801e8ba:	4608      	mov	r0, r1
 801e8bc:	4611      	mov	r1, r2
 801e8be:	2200      	movs	r2, #0
 801e8c0:	602a      	str	r2, [r5, #0]
 801e8c2:	461a      	mov	r2, r3
 801e8c4:	f7e2 fad4 	bl	8000e70 <_open>
 801e8c8:	1c43      	adds	r3, r0, #1
 801e8ca:	d102      	bne.n	801e8d2 <_open_r+0x1e>
 801e8cc:	682b      	ldr	r3, [r5, #0]
 801e8ce:	b103      	cbz	r3, 801e8d2 <_open_r+0x1e>
 801e8d0:	6023      	str	r3, [r4, #0]
 801e8d2:	bd38      	pop	{r3, r4, r5, pc}
 801e8d4:	20000e30 	.word	0x20000e30

0801e8d8 <putchar>:
 801e8d8:	4b09      	ldr	r3, [pc, #36]	; (801e900 <putchar+0x28>)
 801e8da:	b513      	push	{r0, r1, r4, lr}
 801e8dc:	681c      	ldr	r4, [r3, #0]
 801e8de:	4601      	mov	r1, r0
 801e8e0:	b134      	cbz	r4, 801e8f0 <putchar+0x18>
 801e8e2:	69a3      	ldr	r3, [r4, #24]
 801e8e4:	b923      	cbnz	r3, 801e8f0 <putchar+0x18>
 801e8e6:	9001      	str	r0, [sp, #4]
 801e8e8:	4620      	mov	r0, r4
 801e8ea:	f7ff fae9 	bl	801dec0 <__sinit>
 801e8ee:	9901      	ldr	r1, [sp, #4]
 801e8f0:	68a2      	ldr	r2, [r4, #8]
 801e8f2:	4620      	mov	r0, r4
 801e8f4:	b002      	add	sp, #8
 801e8f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e8fa:	f002 b909 	b.w	8020b10 <_putc_r>
 801e8fe:	bf00      	nop
 801e900:	20000108 	.word	0x20000108

0801e904 <srand>:
 801e904:	b538      	push	{r3, r4, r5, lr}
 801e906:	4b10      	ldr	r3, [pc, #64]	; (801e948 <srand+0x44>)
 801e908:	681d      	ldr	r5, [r3, #0]
 801e90a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801e90c:	4604      	mov	r4, r0
 801e90e:	b9b3      	cbnz	r3, 801e93e <srand+0x3a>
 801e910:	2018      	movs	r0, #24
 801e912:	f7ff feef 	bl	801e6f4 <malloc>
 801e916:	4602      	mov	r2, r0
 801e918:	63a8      	str	r0, [r5, #56]	; 0x38
 801e91a:	b920      	cbnz	r0, 801e926 <srand+0x22>
 801e91c:	4b0b      	ldr	r3, [pc, #44]	; (801e94c <srand+0x48>)
 801e91e:	480c      	ldr	r0, [pc, #48]	; (801e950 <srand+0x4c>)
 801e920:	2142      	movs	r1, #66	; 0x42
 801e922:	f001 fac3 	bl	801feac <__assert_func>
 801e926:	490b      	ldr	r1, [pc, #44]	; (801e954 <srand+0x50>)
 801e928:	4b0b      	ldr	r3, [pc, #44]	; (801e958 <srand+0x54>)
 801e92a:	e9c0 1300 	strd	r1, r3, [r0]
 801e92e:	4b0b      	ldr	r3, [pc, #44]	; (801e95c <srand+0x58>)
 801e930:	6083      	str	r3, [r0, #8]
 801e932:	230b      	movs	r3, #11
 801e934:	8183      	strh	r3, [r0, #12]
 801e936:	2100      	movs	r1, #0
 801e938:	2001      	movs	r0, #1
 801e93a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801e93e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801e940:	2200      	movs	r2, #0
 801e942:	611c      	str	r4, [r3, #16]
 801e944:	615a      	str	r2, [r3, #20]
 801e946:	bd38      	pop	{r3, r4, r5, pc}
 801e948:	20000108 	.word	0x20000108
 801e94c:	08026964 	.word	0x08026964
 801e950:	08026a3c 	.word	0x08026a3c
 801e954:	abcd330e 	.word	0xabcd330e
 801e958:	e66d1234 	.word	0xe66d1234
 801e95c:	0005deec 	.word	0x0005deec

0801e960 <rand>:
 801e960:	4b17      	ldr	r3, [pc, #92]	; (801e9c0 <rand+0x60>)
 801e962:	b510      	push	{r4, lr}
 801e964:	681c      	ldr	r4, [r3, #0]
 801e966:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e968:	b9b3      	cbnz	r3, 801e998 <rand+0x38>
 801e96a:	2018      	movs	r0, #24
 801e96c:	f7ff fec2 	bl	801e6f4 <malloc>
 801e970:	63a0      	str	r0, [r4, #56]	; 0x38
 801e972:	b928      	cbnz	r0, 801e980 <rand+0x20>
 801e974:	4602      	mov	r2, r0
 801e976:	4b13      	ldr	r3, [pc, #76]	; (801e9c4 <rand+0x64>)
 801e978:	4813      	ldr	r0, [pc, #76]	; (801e9c8 <rand+0x68>)
 801e97a:	214e      	movs	r1, #78	; 0x4e
 801e97c:	f001 fa96 	bl	801feac <__assert_func>
 801e980:	4a12      	ldr	r2, [pc, #72]	; (801e9cc <rand+0x6c>)
 801e982:	4b13      	ldr	r3, [pc, #76]	; (801e9d0 <rand+0x70>)
 801e984:	e9c0 2300 	strd	r2, r3, [r0]
 801e988:	4b12      	ldr	r3, [pc, #72]	; (801e9d4 <rand+0x74>)
 801e98a:	6083      	str	r3, [r0, #8]
 801e98c:	230b      	movs	r3, #11
 801e98e:	8183      	strh	r3, [r0, #12]
 801e990:	2201      	movs	r2, #1
 801e992:	2300      	movs	r3, #0
 801e994:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801e998:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801e99a:	480f      	ldr	r0, [pc, #60]	; (801e9d8 <rand+0x78>)
 801e99c:	690a      	ldr	r2, [r1, #16]
 801e99e:	694b      	ldr	r3, [r1, #20]
 801e9a0:	4c0e      	ldr	r4, [pc, #56]	; (801e9dc <rand+0x7c>)
 801e9a2:	4350      	muls	r0, r2
 801e9a4:	fb04 0003 	mla	r0, r4, r3, r0
 801e9a8:	fba2 3404 	umull	r3, r4, r2, r4
 801e9ac:	1c5a      	adds	r2, r3, #1
 801e9ae:	4404      	add	r4, r0
 801e9b0:	f144 0000 	adc.w	r0, r4, #0
 801e9b4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801e9b8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801e9bc:	bd10      	pop	{r4, pc}
 801e9be:	bf00      	nop
 801e9c0:	20000108 	.word	0x20000108
 801e9c4:	08026964 	.word	0x08026964
 801e9c8:	08026a3c 	.word	0x08026a3c
 801e9cc:	abcd330e 	.word	0xabcd330e
 801e9d0:	e66d1234 	.word	0xe66d1234
 801e9d4:	0005deec 	.word	0x0005deec
 801e9d8:	5851f42d 	.word	0x5851f42d
 801e9dc:	4c957f2d 	.word	0x4c957f2d

0801e9e0 <realloc>:
 801e9e0:	4b02      	ldr	r3, [pc, #8]	; (801e9ec <realloc+0xc>)
 801e9e2:	460a      	mov	r2, r1
 801e9e4:	4601      	mov	r1, r0
 801e9e6:	6818      	ldr	r0, [r3, #0]
 801e9e8:	f001 bc22 	b.w	8020230 <_realloc_r>
 801e9ec:	20000108 	.word	0x20000108

0801e9f0 <_sbrk_r>:
 801e9f0:	b538      	push	{r3, r4, r5, lr}
 801e9f2:	4d06      	ldr	r5, [pc, #24]	; (801ea0c <_sbrk_r+0x1c>)
 801e9f4:	2300      	movs	r3, #0
 801e9f6:	4604      	mov	r4, r0
 801e9f8:	4608      	mov	r0, r1
 801e9fa:	602b      	str	r3, [r5, #0]
 801e9fc:	f7e2 fa46 	bl	8000e8c <_sbrk>
 801ea00:	1c43      	adds	r3, r0, #1
 801ea02:	d102      	bne.n	801ea0a <_sbrk_r+0x1a>
 801ea04:	682b      	ldr	r3, [r5, #0]
 801ea06:	b103      	cbz	r3, 801ea0a <_sbrk_r+0x1a>
 801ea08:	6023      	str	r3, [r4, #0]
 801ea0a:	bd38      	pop	{r3, r4, r5, pc}
 801ea0c:	20000e30 	.word	0x20000e30

0801ea10 <_raise_r>:
 801ea10:	291f      	cmp	r1, #31
 801ea12:	b538      	push	{r3, r4, r5, lr}
 801ea14:	4604      	mov	r4, r0
 801ea16:	460d      	mov	r5, r1
 801ea18:	d904      	bls.n	801ea24 <_raise_r+0x14>
 801ea1a:	2316      	movs	r3, #22
 801ea1c:	6003      	str	r3, [r0, #0]
 801ea1e:	f04f 30ff 	mov.w	r0, #4294967295
 801ea22:	bd38      	pop	{r3, r4, r5, pc}
 801ea24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ea26:	b112      	cbz	r2, 801ea2e <_raise_r+0x1e>
 801ea28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ea2c:	b94b      	cbnz	r3, 801ea42 <_raise_r+0x32>
 801ea2e:	4620      	mov	r0, r4
 801ea30:	f000 f830 	bl	801ea94 <_getpid_r>
 801ea34:	462a      	mov	r2, r5
 801ea36:	4601      	mov	r1, r0
 801ea38:	4620      	mov	r0, r4
 801ea3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ea3e:	f000 b817 	b.w	801ea70 <_kill_r>
 801ea42:	2b01      	cmp	r3, #1
 801ea44:	d00a      	beq.n	801ea5c <_raise_r+0x4c>
 801ea46:	1c59      	adds	r1, r3, #1
 801ea48:	d103      	bne.n	801ea52 <_raise_r+0x42>
 801ea4a:	2316      	movs	r3, #22
 801ea4c:	6003      	str	r3, [r0, #0]
 801ea4e:	2001      	movs	r0, #1
 801ea50:	e7e7      	b.n	801ea22 <_raise_r+0x12>
 801ea52:	2400      	movs	r4, #0
 801ea54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ea58:	4628      	mov	r0, r5
 801ea5a:	4798      	blx	r3
 801ea5c:	2000      	movs	r0, #0
 801ea5e:	e7e0      	b.n	801ea22 <_raise_r+0x12>

0801ea60 <raise>:
 801ea60:	4b02      	ldr	r3, [pc, #8]	; (801ea6c <raise+0xc>)
 801ea62:	4601      	mov	r1, r0
 801ea64:	6818      	ldr	r0, [r3, #0]
 801ea66:	f7ff bfd3 	b.w	801ea10 <_raise_r>
 801ea6a:	bf00      	nop
 801ea6c:	20000108 	.word	0x20000108

0801ea70 <_kill_r>:
 801ea70:	b538      	push	{r3, r4, r5, lr}
 801ea72:	4d07      	ldr	r5, [pc, #28]	; (801ea90 <_kill_r+0x20>)
 801ea74:	2300      	movs	r3, #0
 801ea76:	4604      	mov	r4, r0
 801ea78:	4608      	mov	r0, r1
 801ea7a:	4611      	mov	r1, r2
 801ea7c:	602b      	str	r3, [r5, #0]
 801ea7e:	f7e2 f970 	bl	8000d62 <_kill>
 801ea82:	1c43      	adds	r3, r0, #1
 801ea84:	d102      	bne.n	801ea8c <_kill_r+0x1c>
 801ea86:	682b      	ldr	r3, [r5, #0]
 801ea88:	b103      	cbz	r3, 801ea8c <_kill_r+0x1c>
 801ea8a:	6023      	str	r3, [r4, #0]
 801ea8c:	bd38      	pop	{r3, r4, r5, pc}
 801ea8e:	bf00      	nop
 801ea90:	20000e30 	.word	0x20000e30

0801ea94 <_getpid_r>:
 801ea94:	f7e2 b95d 	b.w	8000d52 <_getpid>

0801ea98 <siprintf>:
 801ea98:	b40e      	push	{r1, r2, r3}
 801ea9a:	b500      	push	{lr}
 801ea9c:	b09c      	sub	sp, #112	; 0x70
 801ea9e:	ab1d      	add	r3, sp, #116	; 0x74
 801eaa0:	9002      	str	r0, [sp, #8]
 801eaa2:	9006      	str	r0, [sp, #24]
 801eaa4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801eaa8:	4809      	ldr	r0, [pc, #36]	; (801ead0 <siprintf+0x38>)
 801eaaa:	9107      	str	r1, [sp, #28]
 801eaac:	9104      	str	r1, [sp, #16]
 801eaae:	4909      	ldr	r1, [pc, #36]	; (801ead4 <siprintf+0x3c>)
 801eab0:	f853 2b04 	ldr.w	r2, [r3], #4
 801eab4:	9105      	str	r1, [sp, #20]
 801eab6:	6800      	ldr	r0, [r0, #0]
 801eab8:	9301      	str	r3, [sp, #4]
 801eaba:	a902      	add	r1, sp, #8
 801eabc:	f001 fc3a 	bl	8020334 <_svfiprintf_r>
 801eac0:	9b02      	ldr	r3, [sp, #8]
 801eac2:	2200      	movs	r2, #0
 801eac4:	701a      	strb	r2, [r3, #0]
 801eac6:	b01c      	add	sp, #112	; 0x70
 801eac8:	f85d eb04 	ldr.w	lr, [sp], #4
 801eacc:	b003      	add	sp, #12
 801eace:	4770      	bx	lr
 801ead0:	20000108 	.word	0x20000108
 801ead4:	ffff0208 	.word	0xffff0208

0801ead8 <__sread>:
 801ead8:	b510      	push	{r4, lr}
 801eada:	460c      	mov	r4, r1
 801eadc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eae0:	f002 f85e 	bl	8020ba0 <_read_r>
 801eae4:	2800      	cmp	r0, #0
 801eae6:	bfab      	itete	ge
 801eae8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801eaea:	89a3      	ldrhlt	r3, [r4, #12]
 801eaec:	181b      	addge	r3, r3, r0
 801eaee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801eaf2:	bfac      	ite	ge
 801eaf4:	6563      	strge	r3, [r4, #84]	; 0x54
 801eaf6:	81a3      	strhlt	r3, [r4, #12]
 801eaf8:	bd10      	pop	{r4, pc}

0801eafa <__seofread>:
 801eafa:	2000      	movs	r0, #0
 801eafc:	4770      	bx	lr

0801eafe <__swrite>:
 801eafe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eb02:	461f      	mov	r7, r3
 801eb04:	898b      	ldrh	r3, [r1, #12]
 801eb06:	05db      	lsls	r3, r3, #23
 801eb08:	4605      	mov	r5, r0
 801eb0a:	460c      	mov	r4, r1
 801eb0c:	4616      	mov	r6, r2
 801eb0e:	d505      	bpl.n	801eb1c <__swrite+0x1e>
 801eb10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eb14:	2302      	movs	r3, #2
 801eb16:	2200      	movs	r2, #0
 801eb18:	f001 fb5a 	bl	80201d0 <_lseek_r>
 801eb1c:	89a3      	ldrh	r3, [r4, #12]
 801eb1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801eb22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801eb26:	81a3      	strh	r3, [r4, #12]
 801eb28:	4632      	mov	r2, r6
 801eb2a:	463b      	mov	r3, r7
 801eb2c:	4628      	mov	r0, r5
 801eb2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801eb32:	f001 b8d5 	b.w	801fce0 <_write_r>

0801eb36 <__sseek>:
 801eb36:	b510      	push	{r4, lr}
 801eb38:	460c      	mov	r4, r1
 801eb3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eb3e:	f001 fb47 	bl	80201d0 <_lseek_r>
 801eb42:	1c43      	adds	r3, r0, #1
 801eb44:	89a3      	ldrh	r3, [r4, #12]
 801eb46:	bf15      	itete	ne
 801eb48:	6560      	strne	r0, [r4, #84]	; 0x54
 801eb4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801eb4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801eb52:	81a3      	strheq	r3, [r4, #12]
 801eb54:	bf18      	it	ne
 801eb56:	81a3      	strhne	r3, [r4, #12]
 801eb58:	bd10      	pop	{r4, pc}

0801eb5a <__sclose>:
 801eb5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eb5e:	f001 b9c3 	b.w	801fee8 <_close_r>
	...

0801eb64 <iso_year_adjust>:
 801eb64:	6941      	ldr	r1, [r0, #20]
 801eb66:	2900      	cmp	r1, #0
 801eb68:	f240 736c 	movw	r3, #1900	; 0x76c
 801eb6c:	bfa8      	it	ge
 801eb6e:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 801eb72:	18ca      	adds	r2, r1, r3
 801eb74:	078b      	lsls	r3, r1, #30
 801eb76:	d105      	bne.n	801eb84 <iso_year_adjust+0x20>
 801eb78:	2164      	movs	r1, #100	; 0x64
 801eb7a:	fb92 f3f1 	sdiv	r3, r2, r1
 801eb7e:	fb01 2313 	mls	r3, r1, r3, r2
 801eb82:	b9db      	cbnz	r3, 801ebbc <iso_year_adjust+0x58>
 801eb84:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801eb88:	fb92 f3f1 	sdiv	r3, r2, r1
 801eb8c:	fb01 2313 	mls	r3, r1, r3, r2
 801eb90:	fab3 f383 	clz	r3, r3
 801eb94:	095b      	lsrs	r3, r3, #5
 801eb96:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 801eb9a:	0040      	lsls	r0, r0, #1
 801eb9c:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 801eba0:	4418      	add	r0, r3
 801eba2:	f241 63a2 	movw	r3, #5794	; 0x16a2
 801eba6:	4298      	cmp	r0, r3
 801eba8:	d03a      	beq.n	801ec20 <iso_year_adjust+0xbc>
 801ebaa:	dc21      	bgt.n	801ebf0 <iso_year_adjust+0x8c>
 801ebac:	2801      	cmp	r0, #1
 801ebae:	dc1a      	bgt.n	801ebe6 <iso_year_adjust+0x82>
 801ebb0:	2800      	cmp	r0, #0
 801ebb2:	bfb4      	ite	lt
 801ebb4:	2000      	movlt	r0, #0
 801ebb6:	f04f 30ff 	movge.w	r0, #4294967295
 801ebba:	4770      	bx	lr
 801ebbc:	2301      	movs	r3, #1
 801ebbe:	e7ea      	b.n	801eb96 <iso_year_adjust+0x32>
 801ebc0:	2817      	cmp	r0, #23
 801ebc2:	d813      	bhi.n	801ebec <iso_year_adjust+0x88>
 801ebc4:	e8df f000 	tbb	[pc, r0]
 801ebc8:	0c0c0c0c 	.word	0x0c0c0c0c
 801ebcc:	0c0c1212 	.word	0x0c0c1212
 801ebd0:	12121212 	.word	0x12121212
 801ebd4:	12121212 	.word	0x12121212
 801ebd8:	0c0c1212 	.word	0x0c0c1212
 801ebdc:	0c0c1212 	.word	0x0c0c1212
 801ebe0:	f04f 30ff 	mov.w	r0, #4294967295
 801ebe4:	4770      	bx	lr
 801ebe6:	380a      	subs	r0, #10
 801ebe8:	2817      	cmp	r0, #23
 801ebea:	d9e9      	bls.n	801ebc0 <iso_year_adjust+0x5c>
 801ebec:	2000      	movs	r0, #0
 801ebee:	4770      	bx	lr
 801ebf0:	f241 63b4 	movw	r3, #5812	; 0x16b4
 801ebf4:	4298      	cmp	r0, r3
 801ebf6:	dc06      	bgt.n	801ec06 <iso_year_adjust+0xa2>
 801ebf8:	f241 63b1 	movw	r3, #5809	; 0x16b1
 801ebfc:	4298      	cmp	r0, r3
 801ebfe:	bfd4      	ite	le
 801ec00:	2000      	movle	r0, #0
 801ec02:	2001      	movgt	r0, #1
 801ec04:	4770      	bx	lr
 801ec06:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 801ec0a:	3802      	subs	r0, #2
 801ec0c:	2815      	cmp	r0, #21
 801ec0e:	d8ed      	bhi.n	801ebec <iso_year_adjust+0x88>
 801ec10:	2301      	movs	r3, #1
 801ec12:	4083      	lsls	r3, r0
 801ec14:	4803      	ldr	r0, [pc, #12]	; (801ec24 <iso_year_adjust+0xc0>)
 801ec16:	4018      	ands	r0, r3
 801ec18:	3800      	subs	r0, #0
 801ec1a:	bf18      	it	ne
 801ec1c:	2001      	movne	r0, #1
 801ec1e:	4770      	bx	lr
 801ec20:	2001      	movs	r0, #1
 801ec22:	4770      	bx	lr
 801ec24:	002a001f 	.word	0x002a001f

0801ec28 <__strftime>:
 801ec28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec2c:	b091      	sub	sp, #68	; 0x44
 801ec2e:	461d      	mov	r5, r3
 801ec30:	2300      	movs	r3, #0
 801ec32:	4681      	mov	r9, r0
 801ec34:	4688      	mov	r8, r1
 801ec36:	9304      	str	r3, [sp, #16]
 801ec38:	461c      	mov	r4, r3
 801ec3a:	7813      	ldrb	r3, [r2, #0]
 801ec3c:	2b00      	cmp	r3, #0
 801ec3e:	f000 84d1 	beq.w	801f5e4 <__strftime+0x9bc>
 801ec42:	2b25      	cmp	r3, #37	; 0x25
 801ec44:	d11b      	bne.n	801ec7e <__strftime+0x56>
 801ec46:	7857      	ldrb	r7, [r2, #1]
 801ec48:	2f30      	cmp	r7, #48	; 0x30
 801ec4a:	d024      	beq.n	801ec96 <__strftime+0x6e>
 801ec4c:	2f2b      	cmp	r7, #43	; 0x2b
 801ec4e:	d022      	beq.n	801ec96 <__strftime+0x6e>
 801ec50:	f102 0b01 	add.w	fp, r2, #1
 801ec54:	2700      	movs	r7, #0
 801ec56:	f89b 3000 	ldrb.w	r3, [fp]
 801ec5a:	3b31      	subs	r3, #49	; 0x31
 801ec5c:	2b08      	cmp	r3, #8
 801ec5e:	d81d      	bhi.n	801ec9c <__strftime+0x74>
 801ec60:	4658      	mov	r0, fp
 801ec62:	220a      	movs	r2, #10
 801ec64:	a908      	add	r1, sp, #32
 801ec66:	f000 fd6f 	bl	801f748 <strtoul>
 801ec6a:	f8dd b020 	ldr.w	fp, [sp, #32]
 801ec6e:	4606      	mov	r6, r0
 801ec70:	f89b 3000 	ldrb.w	r3, [fp]
 801ec74:	2b45      	cmp	r3, #69	; 0x45
 801ec76:	d113      	bne.n	801eca0 <__strftime+0x78>
 801ec78:	f10b 0b01 	add.w	fp, fp, #1
 801ec7c:	e012      	b.n	801eca4 <__strftime+0x7c>
 801ec7e:	f108 31ff 	add.w	r1, r8, #4294967295
 801ec82:	42a1      	cmp	r1, r4
 801ec84:	d802      	bhi.n	801ec8c <__strftime+0x64>
 801ec86:	2400      	movs	r4, #0
 801ec88:	f000 bcb2 	b.w	801f5f0 <__strftime+0x9c8>
 801ec8c:	f809 3004 	strb.w	r3, [r9, r4]
 801ec90:	3201      	adds	r2, #1
 801ec92:	3401      	adds	r4, #1
 801ec94:	e7d1      	b.n	801ec3a <__strftime+0x12>
 801ec96:	f102 0b02 	add.w	fp, r2, #2
 801ec9a:	e7dc      	b.n	801ec56 <__strftime+0x2e>
 801ec9c:	2600      	movs	r6, #0
 801ec9e:	e7e7      	b.n	801ec70 <__strftime+0x48>
 801eca0:	2b4f      	cmp	r3, #79	; 0x4f
 801eca2:	d0e9      	beq.n	801ec78 <__strftime+0x50>
 801eca4:	f89b 0000 	ldrb.w	r0, [fp]
 801eca8:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 801ecac:	2b55      	cmp	r3, #85	; 0x55
 801ecae:	d8ea      	bhi.n	801ec86 <__strftime+0x5e>
 801ecb0:	a201      	add	r2, pc, #4	; (adr r2, 801ecb8 <__strftime+0x90>)
 801ecb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ecb6:	bf00      	nop
 801ecb8:	0801f5d7 	.word	0x0801f5d7
 801ecbc:	0801ec87 	.word	0x0801ec87
 801ecc0:	0801ec87 	.word	0x0801ec87
 801ecc4:	0801ec87 	.word	0x0801ec87
 801ecc8:	0801ec87 	.word	0x0801ec87
 801eccc:	0801ec87 	.word	0x0801ec87
 801ecd0:	0801ec87 	.word	0x0801ec87
 801ecd4:	0801ec87 	.word	0x0801ec87
 801ecd8:	0801ec87 	.word	0x0801ec87
 801ecdc:	0801ec87 	.word	0x0801ec87
 801ece0:	0801ec87 	.word	0x0801ec87
 801ece4:	0801ec87 	.word	0x0801ec87
 801ece8:	0801ec87 	.word	0x0801ec87
 801ecec:	0801ec87 	.word	0x0801ec87
 801ecf0:	0801ec87 	.word	0x0801ec87
 801ecf4:	0801ec87 	.word	0x0801ec87
 801ecf8:	0801ec87 	.word	0x0801ec87
 801ecfc:	0801ec87 	.word	0x0801ec87
 801ed00:	0801ec87 	.word	0x0801ec87
 801ed04:	0801ec87 	.word	0x0801ec87
 801ed08:	0801ec87 	.word	0x0801ec87
 801ed0c:	0801ec87 	.word	0x0801ec87
 801ed10:	0801ec87 	.word	0x0801ec87
 801ed14:	0801ec87 	.word	0x0801ec87
 801ed18:	0801ec87 	.word	0x0801ec87
 801ed1c:	0801ec87 	.word	0x0801ec87
 801ed20:	0801ec87 	.word	0x0801ec87
 801ed24:	0801ec87 	.word	0x0801ec87
 801ed28:	0801ee4f 	.word	0x0801ee4f
 801ed2c:	0801eea9 	.word	0x0801eea9
 801ed30:	0801ef1f 	.word	0x0801ef1f
 801ed34:	0801efb9 	.word	0x0801efb9
 801ed38:	0801ec87 	.word	0x0801ec87
 801ed3c:	0801f005 	.word	0x0801f005
 801ed40:	0801f0e5 	.word	0x0801f0e5
 801ed44:	0801f1e7 	.word	0x0801f1e7
 801ed48:	0801f1f5 	.word	0x0801f1f5
 801ed4c:	0801ec87 	.word	0x0801ec87
 801ed50:	0801ec87 	.word	0x0801ec87
 801ed54:	0801ec87 	.word	0x0801ec87
 801ed58:	0801f225 	.word	0x0801f225
 801ed5c:	0801ec87 	.word	0x0801ec87
 801ed60:	0801ec87 	.word	0x0801ec87
 801ed64:	0801f23d 	.word	0x0801f23d
 801ed68:	0801ec87 	.word	0x0801ec87
 801ed6c:	0801f28b 	.word	0x0801f28b
 801ed70:	0801f3a1 	.word	0x0801f3a1
 801ed74:	0801f3b3 	.word	0x0801f3b3
 801ed78:	0801f40b 	.word	0x0801f40b
 801ed7c:	0801f41b 	.word	0x0801f41b
 801ed80:	0801f491 	.word	0x0801f491
 801ed84:	0801ef17 	.word	0x0801ef17
 801ed88:	0801f4c5 	.word	0x0801f4c5
 801ed8c:	0801f583 	.word	0x0801f583
 801ed90:	0801ec87 	.word	0x0801ec87
 801ed94:	0801ec87 	.word	0x0801ec87
 801ed98:	0801ec87 	.word	0x0801ec87
 801ed9c:	0801ec87 	.word	0x0801ec87
 801eda0:	0801ec87 	.word	0x0801ec87
 801eda4:	0801ec87 	.word	0x0801ec87
 801eda8:	0801ee11 	.word	0x0801ee11
 801edac:	0801ee7d 	.word	0x0801ee7d
 801edb0:	0801eed7 	.word	0x0801eed7
 801edb4:	0801ef91 	.word	0x0801ef91
 801edb8:	0801ef91 	.word	0x0801ef91
 801edbc:	0801ec87 	.word	0x0801ec87
 801edc0:	0801f04d 	.word	0x0801f04d
 801edc4:	0801ee7d 	.word	0x0801ee7d
 801edc8:	0801ec87 	.word	0x0801ec87
 801edcc:	0801f217 	.word	0x0801f217
 801edd0:	0801f1e7 	.word	0x0801f1e7
 801edd4:	0801f1f5 	.word	0x0801f1f5
 801edd8:	0801f21f 	.word	0x0801f21f
 801eddc:	0801f229 	.word	0x0801f229
 801ede0:	0801ec87 	.word	0x0801ec87
 801ede4:	0801f23d 	.word	0x0801f23d
 801ede8:	0801ec87 	.word	0x0801ec87
 801edec:	0801ef07 	.word	0x0801ef07
 801edf0:	0801f2a1 	.word	0x0801f2a1
 801edf4:	0801f3a5 	.word	0x0801f3a5
 801edf8:	0801f3ed 	.word	0x0801f3ed
 801edfc:	0801ec87 	.word	0x0801ec87
 801ee00:	0801f481 	.word	0x0801f481
 801ee04:	0801ef0f 	.word	0x0801ef0f
 801ee08:	0801f4a9 	.word	0x0801f4a9
 801ee0c:	0801f515 	.word	0x0801f515
 801ee10:	69ab      	ldr	r3, [r5, #24]
 801ee12:	4aa7      	ldr	r2, [pc, #668]	; (801f0b0 <__strftime+0x488>)
 801ee14:	3318      	adds	r3, #24
 801ee16:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801ee1a:	4630      	mov	r0, r6
 801ee1c:	f7e1 fa0e 	bl	800023c <strlen>
 801ee20:	3e01      	subs	r6, #1
 801ee22:	4420      	add	r0, r4
 801ee24:	f108 33ff 	add.w	r3, r8, #4294967295
 801ee28:	42a0      	cmp	r0, r4
 801ee2a:	d107      	bne.n	801ee3c <__strftime+0x214>
 801ee2c:	f89b 3000 	ldrb.w	r3, [fp]
 801ee30:	2b00      	cmp	r3, #0
 801ee32:	f000 83d7 	beq.w	801f5e4 <__strftime+0x9bc>
 801ee36:	f10b 0201 	add.w	r2, fp, #1
 801ee3a:	e6fe      	b.n	801ec3a <__strftime+0x12>
 801ee3c:	42a3      	cmp	r3, r4
 801ee3e:	f67f af22 	bls.w	801ec86 <__strftime+0x5e>
 801ee42:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801ee46:	f809 2004 	strb.w	r2, [r9, r4]
 801ee4a:	3401      	adds	r4, #1
 801ee4c:	e7ec      	b.n	801ee28 <__strftime+0x200>
 801ee4e:	69aa      	ldr	r2, [r5, #24]
 801ee50:	4b97      	ldr	r3, [pc, #604]	; (801f0b0 <__strftime+0x488>)
 801ee52:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801ee56:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 801ee58:	4630      	mov	r0, r6
 801ee5a:	f7e1 f9ef 	bl	800023c <strlen>
 801ee5e:	3e01      	subs	r6, #1
 801ee60:	4420      	add	r0, r4
 801ee62:	f108 33ff 	add.w	r3, r8, #4294967295
 801ee66:	42a0      	cmp	r0, r4
 801ee68:	d0e0      	beq.n	801ee2c <__strftime+0x204>
 801ee6a:	42a3      	cmp	r3, r4
 801ee6c:	f67f af0b 	bls.w	801ec86 <__strftime+0x5e>
 801ee70:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801ee74:	f809 2004 	strb.w	r2, [r9, r4]
 801ee78:	3401      	adds	r4, #1
 801ee7a:	e7f4      	b.n	801ee66 <__strftime+0x23e>
 801ee7c:	4b8c      	ldr	r3, [pc, #560]	; (801f0b0 <__strftime+0x488>)
 801ee7e:	692a      	ldr	r2, [r5, #16]
 801ee80:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801ee84:	4630      	mov	r0, r6
 801ee86:	f7e1 f9d9 	bl	800023c <strlen>
 801ee8a:	3e01      	subs	r6, #1
 801ee8c:	4420      	add	r0, r4
 801ee8e:	f108 33ff 	add.w	r3, r8, #4294967295
 801ee92:	42a0      	cmp	r0, r4
 801ee94:	d0ca      	beq.n	801ee2c <__strftime+0x204>
 801ee96:	42a3      	cmp	r3, r4
 801ee98:	f67f aef5 	bls.w	801ec86 <__strftime+0x5e>
 801ee9c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801eea0:	f809 2004 	strb.w	r2, [r9, r4]
 801eea4:	3401      	adds	r4, #1
 801eea6:	e7f4      	b.n	801ee92 <__strftime+0x26a>
 801eea8:	692b      	ldr	r3, [r5, #16]
 801eeaa:	4a81      	ldr	r2, [pc, #516]	; (801f0b0 <__strftime+0x488>)
 801eeac:	330c      	adds	r3, #12
 801eeae:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801eeb2:	4630      	mov	r0, r6
 801eeb4:	f7e1 f9c2 	bl	800023c <strlen>
 801eeb8:	3e01      	subs	r6, #1
 801eeba:	4420      	add	r0, r4
 801eebc:	f108 33ff 	add.w	r3, r8, #4294967295
 801eec0:	42a0      	cmp	r0, r4
 801eec2:	d0b3      	beq.n	801ee2c <__strftime+0x204>
 801eec4:	42a3      	cmp	r3, r4
 801eec6:	f67f aede 	bls.w	801ec86 <__strftime+0x5e>
 801eeca:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801eece:	f809 2004 	strb.w	r2, [r9, r4]
 801eed2:	3401      	adds	r4, #1
 801eed4:	e7f4      	b.n	801eec0 <__strftime+0x298>
 801eed6:	4b76      	ldr	r3, [pc, #472]	; (801f0b0 <__strftime+0x488>)
 801eed8:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 801eedc:	4630      	mov	r0, r6
 801eede:	f7e1 f9ad 	bl	800023c <strlen>
 801eee2:	7833      	ldrb	r3, [r6, #0]
 801eee4:	2b00      	cmp	r3, #0
 801eee6:	d0a1      	beq.n	801ee2c <__strftime+0x204>
 801eee8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801eeea:	9300      	str	r3, [sp, #0]
 801eeec:	4632      	mov	r2, r6
 801eeee:	462b      	mov	r3, r5
 801eef0:	eba8 0104 	sub.w	r1, r8, r4
 801eef4:	eb09 0004 	add.w	r0, r9, r4
 801eef8:	f7ff fe96 	bl	801ec28 <__strftime>
 801eefc:	2800      	cmp	r0, #0
 801eefe:	f77f aec2 	ble.w	801ec86 <__strftime+0x5e>
 801ef02:	4404      	add	r4, r0
 801ef04:	e792      	b.n	801ee2c <__strftime+0x204>
 801ef06:	4b6a      	ldr	r3, [pc, #424]	; (801f0b0 <__strftime+0x488>)
 801ef08:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 801ef0c:	e7e6      	b.n	801eedc <__strftime+0x2b4>
 801ef0e:	4b68      	ldr	r3, [pc, #416]	; (801f0b0 <__strftime+0x488>)
 801ef10:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 801ef14:	e7e2      	b.n	801eedc <__strftime+0x2b4>
 801ef16:	4b66      	ldr	r3, [pc, #408]	; (801f0b0 <__strftime+0x488>)
 801ef18:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 801ef1c:	e7de      	b.n	801eedc <__strftime+0x2b4>
 801ef1e:	4965      	ldr	r1, [pc, #404]	; (801f0b4 <__strftime+0x48c>)
 801ef20:	f8d5 a014 	ldr.w	sl, [r5, #20]
 801ef24:	458a      	cmp	sl, r1
 801ef26:	bfac      	ite	ge
 801ef28:	2100      	movge	r1, #0
 801ef2a:	2101      	movlt	r1, #1
 801ef2c:	f1ba 0f00 	cmp.w	sl, #0
 801ef30:	db0e      	blt.n	801ef50 <__strftime+0x328>
 801ef32:	2064      	movs	r0, #100	; 0x64
 801ef34:	fb9a f0f0 	sdiv	r0, sl, r0
 801ef38:	3013      	adds	r0, #19
 801ef3a:	b19f      	cbz	r7, 801ef64 <__strftime+0x33c>
 801ef3c:	2863      	cmp	r0, #99	; 0x63
 801ef3e:	dd25      	ble.n	801ef8c <__strftime+0x364>
 801ef40:	4a5d      	ldr	r2, [pc, #372]	; (801f0b8 <__strftime+0x490>)
 801ef42:	4b5e      	ldr	r3, [pc, #376]	; (801f0bc <__strftime+0x494>)
 801ef44:	2f2b      	cmp	r7, #43	; 0x2b
 801ef46:	bf14      	ite	ne
 801ef48:	4617      	movne	r7, r2
 801ef4a:	461f      	moveq	r7, r3
 801ef4c:	4a5c      	ldr	r2, [pc, #368]	; (801f0c0 <__strftime+0x498>)
 801ef4e:	e00b      	b.n	801ef68 <__strftime+0x340>
 801ef50:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 801ef54:	9105      	str	r1, [sp, #20]
 801ef56:	f000 ffa5 	bl	801fea4 <abs>
 801ef5a:	2364      	movs	r3, #100	; 0x64
 801ef5c:	9905      	ldr	r1, [sp, #20]
 801ef5e:	fb90 f0f3 	sdiv	r0, r0, r3
 801ef62:	e7ea      	b.n	801ef3a <__strftime+0x312>
 801ef64:	4f54      	ldr	r7, [pc, #336]	; (801f0b8 <__strftime+0x490>)
 801ef66:	4a57      	ldr	r2, [pc, #348]	; (801f0c4 <__strftime+0x49c>)
 801ef68:	4b57      	ldr	r3, [pc, #348]	; (801f0c8 <__strftime+0x4a0>)
 801ef6a:	9001      	str	r0, [sp, #4]
 801ef6c:	2e02      	cmp	r6, #2
 801ef6e:	bf2c      	ite	cs
 801ef70:	ebc1 0606 	rsbcs	r6, r1, r6
 801ef74:	f1c1 0602 	rsbcc	r6, r1, #2
 801ef78:	494e      	ldr	r1, [pc, #312]	; (801f0b4 <__strftime+0x48c>)
 801ef7a:	9600      	str	r6, [sp, #0]
 801ef7c:	458a      	cmp	sl, r1
 801ef7e:	bfa8      	it	ge
 801ef80:	463b      	movge	r3, r7
 801ef82:	eba8 0104 	sub.w	r1, r8, r4
 801ef86:	eb09 0004 	add.w	r0, r9, r4
 801ef8a:	e02a      	b.n	801efe2 <__strftime+0x3ba>
 801ef8c:	4f4a      	ldr	r7, [pc, #296]	; (801f0b8 <__strftime+0x490>)
 801ef8e:	e7dd      	b.n	801ef4c <__strftime+0x324>
 801ef90:	494e      	ldr	r1, [pc, #312]	; (801f0cc <__strftime+0x4a4>)
 801ef92:	4a4f      	ldr	r2, [pc, #316]	; (801f0d0 <__strftime+0x4a8>)
 801ef94:	68eb      	ldr	r3, [r5, #12]
 801ef96:	2864      	cmp	r0, #100	; 0x64
 801ef98:	bf08      	it	eq
 801ef9a:	460a      	moveq	r2, r1
 801ef9c:	eba8 0104 	sub.w	r1, r8, r4
 801efa0:	eb09 0004 	add.w	r0, r9, r4
 801efa4:	f001 fe0e 	bl	8020bc4 <sniprintf>
 801efa8:	2800      	cmp	r0, #0
 801efaa:	f6ff ae6c 	blt.w	801ec86 <__strftime+0x5e>
 801efae:	4404      	add	r4, r0
 801efb0:	45a0      	cmp	r8, r4
 801efb2:	f63f af3b 	bhi.w	801ee2c <__strftime+0x204>
 801efb6:	e666      	b.n	801ec86 <__strftime+0x5e>
 801efb8:	6968      	ldr	r0, [r5, #20]
 801efba:	692b      	ldr	r3, [r5, #16]
 801efbc:	68ef      	ldr	r7, [r5, #12]
 801efbe:	2800      	cmp	r0, #0
 801efc0:	eb09 0604 	add.w	r6, r9, r4
 801efc4:	eba8 0104 	sub.w	r1, r8, r4
 801efc8:	f103 0301 	add.w	r3, r3, #1
 801efcc:	db0c      	blt.n	801efe8 <__strftime+0x3c0>
 801efce:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801efd2:	fb90 f2fc 	sdiv	r2, r0, ip
 801efd6:	fb0c 0212 	mls	r2, ip, r2, r0
 801efda:	e9cd 7200 	strd	r7, r2, [sp]
 801efde:	4a3d      	ldr	r2, [pc, #244]	; (801f0d4 <__strftime+0x4ac>)
 801efe0:	4630      	mov	r0, r6
 801efe2:	f001 fdef 	bl	8020bc4 <sniprintf>
 801efe6:	e7df      	b.n	801efa8 <__strftime+0x380>
 801efe8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801efec:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801eff0:	f000 ff58 	bl	801fea4 <abs>
 801eff4:	2264      	movs	r2, #100	; 0x64
 801eff6:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 801effa:	fb90 fcf2 	sdiv	ip, r0, r2
 801effe:	fb0c 0212 	mls	r2, ip, r2, r0
 801f002:	e7ea      	b.n	801efda <__strftime+0x3b2>
 801f004:	2325      	movs	r3, #37	; 0x25
 801f006:	f88d 3020 	strb.w	r3, [sp, #32]
 801f00a:	b187      	cbz	r7, 801f02e <__strftime+0x406>
 801f00c:	2e06      	cmp	r6, #6
 801f00e:	bf38      	it	cc
 801f010:	2606      	movcc	r6, #6
 801f012:	1fb3      	subs	r3, r6, #6
 801f014:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 801f018:	d10c      	bne.n	801f034 <__strftime+0x40c>
 801f01a:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 801f01e:	492e      	ldr	r1, [pc, #184]	; (801f0d8 <__strftime+0x4b0>)
 801f020:	f001 fe30 	bl	8020c84 <strcpy>
 801f024:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f026:	9300      	str	r3, [sp, #0]
 801f028:	aa08      	add	r2, sp, #32
 801f02a:	462b      	mov	r3, r5
 801f02c:	e760      	b.n	801eef0 <__strftime+0x2c8>
 801f02e:	272b      	movs	r7, #43	; 0x2b
 801f030:	260a      	movs	r6, #10
 801f032:	e7ee      	b.n	801f012 <__strftime+0x3ea>
 801f034:	4a29      	ldr	r2, [pc, #164]	; (801f0dc <__strftime+0x4b4>)
 801f036:	211e      	movs	r1, #30
 801f038:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 801f03c:	f001 fdc2 	bl	8020bc4 <sniprintf>
 801f040:	2800      	cmp	r0, #0
 801f042:	ddea      	ble.n	801f01a <__strftime+0x3f2>
 801f044:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 801f048:	4418      	add	r0, r3
 801f04a:	e7e8      	b.n	801f01e <__strftime+0x3f6>
 801f04c:	4628      	mov	r0, r5
 801f04e:	f7ff fd89 	bl	801eb64 <iso_year_adjust>
 801f052:	4606      	mov	r6, r0
 801f054:	6968      	ldr	r0, [r5, #20]
 801f056:	2800      	cmp	r0, #0
 801f058:	db11      	blt.n	801f07e <__strftime+0x456>
 801f05a:	2264      	movs	r2, #100	; 0x64
 801f05c:	fb90 f3f2 	sdiv	r3, r0, r2
 801f060:	fb02 0313 	mls	r3, r2, r3, r0
 801f064:	441e      	add	r6, r3
 801f066:	2364      	movs	r3, #100	; 0x64
 801f068:	fb96 f0f3 	sdiv	r0, r6, r3
 801f06c:	fb03 6610 	mls	r6, r3, r0, r6
 801f070:	441e      	add	r6, r3
 801f072:	fbb6 f2f3 	udiv	r2, r6, r3
 801f076:	fb03 6312 	mls	r3, r3, r2, r6
 801f07a:	4a14      	ldr	r2, [pc, #80]	; (801f0cc <__strftime+0x4a4>)
 801f07c:	e78e      	b.n	801ef9c <__strftime+0x374>
 801f07e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801f082:	f000 ff0f 	bl	801fea4 <abs>
 801f086:	2364      	movs	r3, #100	; 0x64
 801f088:	2e00      	cmp	r6, #0
 801f08a:	fb90 f2f3 	sdiv	r2, r0, r3
 801f08e:	fb02 0313 	mls	r3, r2, r3, r0
 801f092:	da05      	bge.n	801f0a0 <__strftime+0x478>
 801f094:	6969      	ldr	r1, [r5, #20]
 801f096:	4a12      	ldr	r2, [pc, #72]	; (801f0e0 <__strftime+0x4b8>)
 801f098:	4291      	cmp	r1, r2
 801f09a:	bfb8      	it	lt
 801f09c:	2601      	movlt	r6, #1
 801f09e:	e7e1      	b.n	801f064 <__strftime+0x43c>
 801f0a0:	d0e0      	beq.n	801f064 <__strftime+0x43c>
 801f0a2:	6969      	ldr	r1, [r5, #20]
 801f0a4:	4a03      	ldr	r2, [pc, #12]	; (801f0b4 <__strftime+0x48c>)
 801f0a6:	4291      	cmp	r1, r2
 801f0a8:	bfb8      	it	lt
 801f0aa:	f04f 36ff 	movlt.w	r6, #4294967295
 801f0ae:	e7d9      	b.n	801f064 <__strftime+0x43c>
 801f0b0:	08026c20 	.word	0x08026c20
 801f0b4:	fffff894 	.word	0xfffff894
 801f0b8:	08026d93 	.word	0x08026d93
 801f0bc:	08026aaa 	.word	0x08026aaa
 801f0c0:	08026aa2 	.word	0x08026aa2
 801f0c4:	08026a9b 	.word	0x08026a9b
 801f0c8:	08026ed3 	.word	0x08026ed3
 801f0cc:	08026aba 	.word	0x08026aba
 801f0d0:	08026aac 	.word	0x08026aac
 801f0d4:	08026ab0 	.word	0x08026ab0
 801f0d8:	08026ac3 	.word	0x08026ac3
 801f0dc:	08026abf 	.word	0x08026abf
 801f0e0:	fffff895 	.word	0xfffff895
 801f0e4:	4bb6      	ldr	r3, [pc, #728]	; (801f3c0 <__strftime+0x798>)
 801f0e6:	6969      	ldr	r1, [r5, #20]
 801f0e8:	4299      	cmp	r1, r3
 801f0ea:	bfac      	ite	ge
 801f0ec:	2300      	movge	r3, #0
 801f0ee:	2301      	movlt	r3, #1
 801f0f0:	4628      	mov	r0, r5
 801f0f2:	e9cd 3105 	strd	r3, r1, [sp, #20]
 801f0f6:	f7ff fd35 	bl	801eb64 <iso_year_adjust>
 801f0fa:	9906      	ldr	r1, [sp, #24]
 801f0fc:	2900      	cmp	r1, #0
 801f0fe:	4682      	mov	sl, r0
 801f100:	db27      	blt.n	801f152 <__strftime+0x52a>
 801f102:	2264      	movs	r2, #100	; 0x64
 801f104:	fb91 f2f2 	sdiv	r2, r1, r2
 801f108:	3213      	adds	r2, #19
 801f10a:	6968      	ldr	r0, [r5, #20]
 801f10c:	2800      	cmp	r0, #0
 801f10e:	db2b      	blt.n	801f168 <__strftime+0x540>
 801f110:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801f114:	fb90 fefc 	sdiv	lr, r0, ip
 801f118:	fb0c 001e 	mls	r0, ip, lr, r0
 801f11c:	f1ba 0f00 	cmp.w	sl, #0
 801f120:	da31      	bge.n	801f186 <__strftime+0x55e>
 801f122:	6969      	ldr	r1, [r5, #20]
 801f124:	4ba7      	ldr	r3, [pc, #668]	; (801f3c4 <__strftime+0x79c>)
 801f126:	4299      	cmp	r1, r3
 801f128:	db38      	blt.n	801f19c <__strftime+0x574>
 801f12a:	eb0a 0300 	add.w	r3, sl, r0
 801f12e:	1c59      	adds	r1, r3, #1
 801f130:	d139      	bne.n	801f1a6 <__strftime+0x57e>
 801f132:	3a01      	subs	r2, #1
 801f134:	2363      	movs	r3, #99	; 0x63
 801f136:	2064      	movs	r0, #100	; 0x64
 801f138:	fb00 3202 	mla	r2, r0, r2, r3
 801f13c:	9b05      	ldr	r3, [sp, #20]
 801f13e:	2b00      	cmp	r3, #0
 801f140:	d036      	beq.n	801f1b0 <__strftime+0x588>
 801f142:	232d      	movs	r3, #45	; 0x2d
 801f144:	f88d 3020 	strb.w	r3, [sp, #32]
 801f148:	b106      	cbz	r6, 801f14c <__strftime+0x524>
 801f14a:	3e01      	subs	r6, #1
 801f14c:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 801f150:	e038      	b.n	801f1c4 <__strftime+0x59c>
 801f152:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 801f156:	9106      	str	r1, [sp, #24]
 801f158:	f000 fea4 	bl	801fea4 <abs>
 801f15c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801f160:	9906      	ldr	r1, [sp, #24]
 801f162:	fb90 f2fc 	sdiv	r2, r0, ip
 801f166:	e7d0      	b.n	801f10a <__strftime+0x4e2>
 801f168:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801f16c:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801f170:	f000 fe98 	bl	801fea4 <abs>
 801f174:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801f178:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801f17c:	fb90 fefc 	sdiv	lr, r0, ip
 801f180:	fb0e 001c 	mls	r0, lr, ip, r0
 801f184:	e7ca      	b.n	801f11c <__strftime+0x4f4>
 801f186:	d0d0      	beq.n	801f12a <__strftime+0x502>
 801f188:	4b8d      	ldr	r3, [pc, #564]	; (801f3c0 <__strftime+0x798>)
 801f18a:	4299      	cmp	r1, r3
 801f18c:	bfb4      	ite	lt
 801f18e:	2301      	movlt	r3, #1
 801f190:	2300      	movge	r3, #0
 801f192:	9305      	str	r3, [sp, #20]
 801f194:	bfb8      	it	lt
 801f196:	f04f 3aff 	movlt.w	sl, #4294967295
 801f19a:	e7c6      	b.n	801f12a <__strftime+0x502>
 801f19c:	f04f 0a01 	mov.w	sl, #1
 801f1a0:	f8cd a014 	str.w	sl, [sp, #20]
 801f1a4:	e7c1      	b.n	801f12a <__strftime+0x502>
 801f1a6:	2b64      	cmp	r3, #100	; 0x64
 801f1a8:	bf04      	itt	eq
 801f1aa:	3201      	addeq	r2, #1
 801f1ac:	2300      	moveq	r3, #0
 801f1ae:	e7c2      	b.n	801f136 <__strftime+0x50e>
 801f1b0:	2f2b      	cmp	r7, #43	; 0x2b
 801f1b2:	d106      	bne.n	801f1c2 <__strftime+0x59a>
 801f1b4:	f242 730f 	movw	r3, #9999	; 0x270f
 801f1b8:	429a      	cmp	r2, r3
 801f1ba:	d902      	bls.n	801f1c2 <__strftime+0x59a>
 801f1bc:	f88d 7020 	strb.w	r7, [sp, #32]
 801f1c0:	e7c2      	b.n	801f148 <__strftime+0x520>
 801f1c2:	ab08      	add	r3, sp, #32
 801f1c4:	2125      	movs	r1, #37	; 0x25
 801f1c6:	7019      	strb	r1, [r3, #0]
 801f1c8:	b94f      	cbnz	r7, 801f1de <__strftime+0x5b6>
 801f1ca:	1c58      	adds	r0, r3, #1
 801f1cc:	497e      	ldr	r1, [pc, #504]	; (801f3c8 <__strftime+0x7a0>)
 801f1ce:	9205      	str	r2, [sp, #20]
 801f1d0:	f001 fd58 	bl	8020c84 <strcpy>
 801f1d4:	9a05      	ldr	r2, [sp, #20]
 801f1d6:	9200      	str	r2, [sp, #0]
 801f1d8:	4633      	mov	r3, r6
 801f1da:	aa08      	add	r2, sp, #32
 801f1dc:	e059      	b.n	801f292 <__strftime+0x66a>
 801f1de:	2130      	movs	r1, #48	; 0x30
 801f1e0:	1c98      	adds	r0, r3, #2
 801f1e2:	7059      	strb	r1, [r3, #1]
 801f1e4:	e7f2      	b.n	801f1cc <__strftime+0x5a4>
 801f1e6:	4979      	ldr	r1, [pc, #484]	; (801f3cc <__strftime+0x7a4>)
 801f1e8:	4a79      	ldr	r2, [pc, #484]	; (801f3d0 <__strftime+0x7a8>)
 801f1ea:	68ab      	ldr	r3, [r5, #8]
 801f1ec:	286b      	cmp	r0, #107	; 0x6b
 801f1ee:	bf08      	it	eq
 801f1f0:	460a      	moveq	r2, r1
 801f1f2:	e6d3      	b.n	801ef9c <__strftime+0x374>
 801f1f4:	68ab      	ldr	r3, [r5, #8]
 801f1f6:	b163      	cbz	r3, 801f212 <__strftime+0x5ea>
 801f1f8:	2b0c      	cmp	r3, #12
 801f1fa:	d004      	beq.n	801f206 <__strftime+0x5de>
 801f1fc:	210c      	movs	r1, #12
 801f1fe:	fb93 f2f1 	sdiv	r2, r3, r1
 801f202:	fb01 3312 	mls	r3, r1, r2, r3
 801f206:	4972      	ldr	r1, [pc, #456]	; (801f3d0 <__strftime+0x7a8>)
 801f208:	4a70      	ldr	r2, [pc, #448]	; (801f3cc <__strftime+0x7a4>)
 801f20a:	2849      	cmp	r0, #73	; 0x49
 801f20c:	bf08      	it	eq
 801f20e:	460a      	moveq	r2, r1
 801f210:	e6c4      	b.n	801ef9c <__strftime+0x374>
 801f212:	230c      	movs	r3, #12
 801f214:	e7f7      	b.n	801f206 <__strftime+0x5de>
 801f216:	69eb      	ldr	r3, [r5, #28]
 801f218:	4a6e      	ldr	r2, [pc, #440]	; (801f3d4 <__strftime+0x7ac>)
 801f21a:	3301      	adds	r3, #1
 801f21c:	e6be      	b.n	801ef9c <__strftime+0x374>
 801f21e:	692b      	ldr	r3, [r5, #16]
 801f220:	3301      	adds	r3, #1
 801f222:	e72a      	b.n	801f07a <__strftime+0x452>
 801f224:	686b      	ldr	r3, [r5, #4]
 801f226:	e728      	b.n	801f07a <__strftime+0x452>
 801f228:	f108 33ff 	add.w	r3, r8, #4294967295
 801f22c:	42a3      	cmp	r3, r4
 801f22e:	f67f ad2a 	bls.w	801ec86 <__strftime+0x5e>
 801f232:	230a      	movs	r3, #10
 801f234:	f809 3004 	strb.w	r3, [r9, r4]
 801f238:	3401      	adds	r4, #1
 801f23a:	e5f7      	b.n	801ee2c <__strftime+0x204>
 801f23c:	68ab      	ldr	r3, [r5, #8]
 801f23e:	2b0b      	cmp	r3, #11
 801f240:	bfcc      	ite	gt
 801f242:	22a4      	movgt	r2, #164	; 0xa4
 801f244:	22a0      	movle	r2, #160	; 0xa0
 801f246:	4b64      	ldr	r3, [pc, #400]	; (801f3d8 <__strftime+0x7b0>)
 801f248:	4413      	add	r3, r2
 801f24a:	685e      	ldr	r6, [r3, #4]
 801f24c:	4630      	mov	r0, r6
 801f24e:	f7e0 fff5 	bl	800023c <strlen>
 801f252:	1e72      	subs	r2, r6, #1
 801f254:	4420      	add	r0, r4
 801f256:	f108 36ff 	add.w	r6, r8, #4294967295
 801f25a:	42a0      	cmp	r0, r4
 801f25c:	f43f ade6 	beq.w	801ee2c <__strftime+0x204>
 801f260:	42a6      	cmp	r6, r4
 801f262:	f67f ad10 	bls.w	801ec86 <__strftime+0x5e>
 801f266:	f89b 1000 	ldrb.w	r1, [fp]
 801f26a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801f26e:	2950      	cmp	r1, #80	; 0x50
 801f270:	d107      	bne.n	801f282 <__strftime+0x65a>
 801f272:	495a      	ldr	r1, [pc, #360]	; (801f3dc <__strftime+0x7b4>)
 801f274:	5cc9      	ldrb	r1, [r1, r3]
 801f276:	f001 0103 	and.w	r1, r1, #3
 801f27a:	2901      	cmp	r1, #1
 801f27c:	bf08      	it	eq
 801f27e:	3320      	addeq	r3, #32
 801f280:	b2db      	uxtb	r3, r3
 801f282:	f809 3004 	strb.w	r3, [r9, r4]
 801f286:	3401      	adds	r4, #1
 801f288:	e7e7      	b.n	801f25a <__strftime+0x632>
 801f28a:	686b      	ldr	r3, [r5, #4]
 801f28c:	9300      	str	r3, [sp, #0]
 801f28e:	4a54      	ldr	r2, [pc, #336]	; (801f3e0 <__strftime+0x7b8>)
 801f290:	68ab      	ldr	r3, [r5, #8]
 801f292:	eba8 0104 	sub.w	r1, r8, r4
 801f296:	eb09 0004 	add.w	r0, r9, r4
 801f29a:	f001 fc93 	bl	8020bc4 <sniprintf>
 801f29e:	e683      	b.n	801efa8 <__strftime+0x380>
 801f2a0:	6a2b      	ldr	r3, [r5, #32]
 801f2a2:	2b00      	cmp	r3, #0
 801f2a4:	db79      	blt.n	801f39a <__strftime+0x772>
 801f2a6:	f000 fb01 	bl	801f8ac <__tz_lock>
 801f2aa:	9b04      	ldr	r3, [sp, #16]
 801f2ac:	b90b      	cbnz	r3, 801f2b2 <__strftime+0x68a>
 801f2ae:	f000 fb09 	bl	801f8c4 <_tzset_unlocked>
 801f2b2:	f000 fec5 	bl	8020040 <__gettzinfo>
 801f2b6:	6a2b      	ldr	r3, [r5, #32]
 801f2b8:	2b00      	cmp	r3, #0
 801f2ba:	bfcc      	ite	gt
 801f2bc:	2350      	movgt	r3, #80	; 0x50
 801f2be:	2328      	movle	r3, #40	; 0x28
 801f2c0:	58c3      	ldr	r3, [r0, r3]
 801f2c2:	f1c3 0a00 	rsb	sl, r3, #0
 801f2c6:	f000 faf7 	bl	801f8b8 <__tz_unlock>
 801f2ca:	2301      	movs	r3, #1
 801f2cc:	9304      	str	r3, [sp, #16]
 801f2ce:	f8d5 c014 	ldr.w	ip, [r5, #20]
 801f2d2:	4662      	mov	r2, ip
 801f2d4:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 801f2d8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801f2dc:	9602      	str	r6, [sp, #8]
 801f2de:	f143 36ff 	adc.w	r6, r3, #4294967295
 801f2e2:	9603      	str	r6, [sp, #12]
 801f2e4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f2e8:	2e00      	cmp	r6, #0
 801f2ea:	f177 0600 	sbcs.w	r6, r7, #0
 801f2ee:	eba8 0104 	sub.w	r1, r8, r4
 801f2f2:	eb09 0004 	add.w	r0, r9, r4
 801f2f6:	da05      	bge.n	801f304 <__strftime+0x6dc>
 801f2f8:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 801f2fc:	f143 33ff 	adc.w	r3, r3, #4294967295
 801f300:	9602      	str	r6, [sp, #8]
 801f302:	9303      	str	r3, [sp, #12]
 801f304:	9b02      	ldr	r3, [sp, #8]
 801f306:	089e      	lsrs	r6, r3, #2
 801f308:	9b03      	ldr	r3, [sp, #12]
 801f30a:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 801f30e:	f10c 32ff 	add.w	r2, ip, #4294967295
 801f312:	109f      	asrs	r7, r3, #2
 801f314:	2364      	movs	r3, #100	; 0x64
 801f316:	fb92 f3f3 	sdiv	r3, r2, r3
 801f31a:	1af6      	subs	r6, r6, r3
 801f31c:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 801f320:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 801f324:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801f328:	fb92 f3f3 	sdiv	r3, r2, r3
 801f32c:	18f6      	adds	r6, r6, r3
 801f32e:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801f332:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 801f336:	f240 136d 	movw	r3, #365	; 0x16d
 801f33a:	fb03 fc0c 	mul.w	ip, r3, ip
 801f33e:	69eb      	ldr	r3, [r5, #28]
 801f340:	eb16 060c 	adds.w	r6, r6, ip
 801f344:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 801f348:	18f6      	adds	r6, r6, r3
 801f34a:	f04f 0c18 	mov.w	ip, #24
 801f34e:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801f352:	fba6 230c 	umull	r2, r3, r6, ip
 801f356:	68ae      	ldr	r6, [r5, #8]
 801f358:	fb0c 3307 	mla	r3, ip, r7, r3
 801f35c:	1992      	adds	r2, r2, r6
 801f35e:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 801f362:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 801f366:	fba2 670c 	umull	r6, r7, r2, ip
 801f36a:	fb0c 7703 	mla	r7, ip, r3, r7
 801f36e:	686b      	ldr	r3, [r5, #4]
 801f370:	18f6      	adds	r6, r6, r3
 801f372:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801f376:	fba6 230c 	umull	r2, r3, r6, ip
 801f37a:	682e      	ldr	r6, [r5, #0]
 801f37c:	fb0c 3307 	mla	r3, ip, r7, r3
 801f380:	1992      	adds	r2, r2, r6
 801f382:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 801f386:	ebb2 020a 	subs.w	r2, r2, sl
 801f38a:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 801f38e:	e9cd 2300 	strd	r2, r3, [sp]
 801f392:	4a14      	ldr	r2, [pc, #80]	; (801f3e4 <__strftime+0x7bc>)
 801f394:	f001 fc16 	bl	8020bc4 <sniprintf>
 801f398:	e606      	b.n	801efa8 <__strftime+0x380>
 801f39a:	f04f 0a00 	mov.w	sl, #0
 801f39e:	e796      	b.n	801f2ce <__strftime+0x6a6>
 801f3a0:	682b      	ldr	r3, [r5, #0]
 801f3a2:	e66a      	b.n	801f07a <__strftime+0x452>
 801f3a4:	f108 33ff 	add.w	r3, r8, #4294967295
 801f3a8:	42a3      	cmp	r3, r4
 801f3aa:	f67f ac6c 	bls.w	801ec86 <__strftime+0x5e>
 801f3ae:	2309      	movs	r3, #9
 801f3b0:	e740      	b.n	801f234 <__strftime+0x60c>
 801f3b2:	682b      	ldr	r3, [r5, #0]
 801f3b4:	9301      	str	r3, [sp, #4]
 801f3b6:	686b      	ldr	r3, [r5, #4]
 801f3b8:	9300      	str	r3, [sp, #0]
 801f3ba:	4a0b      	ldr	r2, [pc, #44]	; (801f3e8 <__strftime+0x7c0>)
 801f3bc:	68ab      	ldr	r3, [r5, #8]
 801f3be:	e5e0      	b.n	801ef82 <__strftime+0x35a>
 801f3c0:	fffff894 	.word	0xfffff894
 801f3c4:	fffff895 	.word	0xfffff895
 801f3c8:	08026acb 	.word	0x08026acb
 801f3cc:	08026aac 	.word	0x08026aac
 801f3d0:	08026aba 	.word	0x08026aba
 801f3d4:	08026acf 	.word	0x08026acf
 801f3d8:	08026c20 	.word	0x08026c20
 801f3dc:	08026d95 	.word	0x08026d95
 801f3e0:	08026ade 	.word	0x08026ade
 801f3e4:	08026ad4 	.word	0x08026ad4
 801f3e8:	08026ad9 	.word	0x08026ad9
 801f3ec:	f108 33ff 	add.w	r3, r8, #4294967295
 801f3f0:	42a3      	cmp	r3, r4
 801f3f2:	f67f ac48 	bls.w	801ec86 <__strftime+0x5e>
 801f3f6:	69ab      	ldr	r3, [r5, #24]
 801f3f8:	eb09 0204 	add.w	r2, r9, r4
 801f3fc:	3401      	adds	r4, #1
 801f3fe:	b913      	cbnz	r3, 801f406 <__strftime+0x7de>
 801f400:	2337      	movs	r3, #55	; 0x37
 801f402:	7013      	strb	r3, [r2, #0]
 801f404:	e512      	b.n	801ee2c <__strftime+0x204>
 801f406:	3330      	adds	r3, #48	; 0x30
 801f408:	e7fb      	b.n	801f402 <__strftime+0x7da>
 801f40a:	69eb      	ldr	r3, [r5, #28]
 801f40c:	69aa      	ldr	r2, [r5, #24]
 801f40e:	3307      	adds	r3, #7
 801f410:	1a9b      	subs	r3, r3, r2
 801f412:	2207      	movs	r2, #7
 801f414:	fb93 f3f2 	sdiv	r3, r3, r2
 801f418:	e62f      	b.n	801f07a <__strftime+0x452>
 801f41a:	4628      	mov	r0, r5
 801f41c:	f7ff fba2 	bl	801eb64 <iso_year_adjust>
 801f420:	69aa      	ldr	r2, [r5, #24]
 801f422:	b132      	cbz	r2, 801f432 <__strftime+0x80a>
 801f424:	3a01      	subs	r2, #1
 801f426:	2800      	cmp	r0, #0
 801f428:	dc28      	bgt.n	801f47c <__strftime+0x854>
 801f42a:	69eb      	ldr	r3, [r5, #28]
 801f42c:	d103      	bne.n	801f436 <__strftime+0x80e>
 801f42e:	330a      	adds	r3, #10
 801f430:	e7ee      	b.n	801f410 <__strftime+0x7e8>
 801f432:	2206      	movs	r2, #6
 801f434:	e7f7      	b.n	801f426 <__strftime+0x7fe>
 801f436:	6968      	ldr	r0, [r5, #20]
 801f438:	2800      	cmp	r0, #0
 801f43a:	eba2 0303 	sub.w	r3, r2, r3
 801f43e:	f240 726b 	movw	r2, #1899	; 0x76b
 801f442:	bfa8      	it	ge
 801f444:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 801f448:	4410      	add	r0, r2
 801f44a:	0782      	lsls	r2, r0, #30
 801f44c:	d105      	bne.n	801f45a <__strftime+0x832>
 801f44e:	2264      	movs	r2, #100	; 0x64
 801f450:	fb90 f1f2 	sdiv	r1, r0, r2
 801f454:	fb02 0111 	mls	r1, r2, r1, r0
 801f458:	b971      	cbnz	r1, 801f478 <__strftime+0x850>
 801f45a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801f45e:	fb90 f2f1 	sdiv	r2, r0, r1
 801f462:	fb01 0212 	mls	r2, r1, r2, r0
 801f466:	fab2 f282 	clz	r2, r2
 801f46a:	0952      	lsrs	r2, r2, #5
 801f46c:	1a9a      	subs	r2, r3, r2
 801f46e:	2a05      	cmp	r2, #5
 801f470:	bfb4      	ite	lt
 801f472:	2335      	movlt	r3, #53	; 0x35
 801f474:	2334      	movge	r3, #52	; 0x34
 801f476:	e600      	b.n	801f07a <__strftime+0x452>
 801f478:	2201      	movs	r2, #1
 801f47a:	e7f7      	b.n	801f46c <__strftime+0x844>
 801f47c:	2301      	movs	r3, #1
 801f47e:	e5fc      	b.n	801f07a <__strftime+0x452>
 801f480:	f108 33ff 	add.w	r3, r8, #4294967295
 801f484:	42a3      	cmp	r3, r4
 801f486:	f67f abfe 	bls.w	801ec86 <__strftime+0x5e>
 801f48a:	69ab      	ldr	r3, [r5, #24]
 801f48c:	3330      	adds	r3, #48	; 0x30
 801f48e:	e6d1      	b.n	801f234 <__strftime+0x60c>
 801f490:	69ab      	ldr	r3, [r5, #24]
 801f492:	b13b      	cbz	r3, 801f4a4 <__strftime+0x87c>
 801f494:	3b01      	subs	r3, #1
 801f496:	69ea      	ldr	r2, [r5, #28]
 801f498:	3207      	adds	r2, #7
 801f49a:	1ad2      	subs	r2, r2, r3
 801f49c:	2307      	movs	r3, #7
 801f49e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f4a2:	e5ea      	b.n	801f07a <__strftime+0x452>
 801f4a4:	2306      	movs	r3, #6
 801f4a6:	e7f6      	b.n	801f496 <__strftime+0x86e>
 801f4a8:	6968      	ldr	r0, [r5, #20]
 801f4aa:	2800      	cmp	r0, #0
 801f4ac:	db05      	blt.n	801f4ba <__strftime+0x892>
 801f4ae:	2264      	movs	r2, #100	; 0x64
 801f4b0:	fb90 f3f2 	sdiv	r3, r0, r2
 801f4b4:	fb03 0312 	mls	r3, r3, r2, r0
 801f4b8:	e5df      	b.n	801f07a <__strftime+0x452>
 801f4ba:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801f4be:	f000 fcf1 	bl	801fea4 <abs>
 801f4c2:	e7f4      	b.n	801f4ae <__strftime+0x886>
 801f4c4:	696b      	ldr	r3, [r5, #20]
 801f4c6:	4a4c      	ldr	r2, [pc, #304]	; (801f5f8 <__strftime+0x9d0>)
 801f4c8:	4293      	cmp	r3, r2
 801f4ca:	da09      	bge.n	801f4e0 <__strftime+0x8b8>
 801f4cc:	212d      	movs	r1, #45	; 0x2d
 801f4ce:	f88d 1020 	strb.w	r1, [sp, #32]
 801f4d2:	eba2 0a03 	sub.w	sl, r2, r3
 801f4d6:	b106      	cbz	r6, 801f4da <__strftime+0x8b2>
 801f4d8:	3e01      	subs	r6, #1
 801f4da:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 801f4de:	e00b      	b.n	801f4f8 <__strftime+0x8d0>
 801f4e0:	2f2b      	cmp	r7, #43	; 0x2b
 801f4e2:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 801f4e6:	d106      	bne.n	801f4f6 <__strftime+0x8ce>
 801f4e8:	f242 730f 	movw	r3, #9999	; 0x270f
 801f4ec:	459a      	cmp	sl, r3
 801f4ee:	d902      	bls.n	801f4f6 <__strftime+0x8ce>
 801f4f0:	f88d 7020 	strb.w	r7, [sp, #32]
 801f4f4:	e7ef      	b.n	801f4d6 <__strftime+0x8ae>
 801f4f6:	ab08      	add	r3, sp, #32
 801f4f8:	2225      	movs	r2, #37	; 0x25
 801f4fa:	701a      	strb	r2, [r3, #0]
 801f4fc:	b937      	cbnz	r7, 801f50c <__strftime+0x8e4>
 801f4fe:	1c58      	adds	r0, r3, #1
 801f500:	493e      	ldr	r1, [pc, #248]	; (801f5fc <__strftime+0x9d4>)
 801f502:	f001 fbbf 	bl	8020c84 <strcpy>
 801f506:	f8cd a000 	str.w	sl, [sp]
 801f50a:	e665      	b.n	801f1d8 <__strftime+0x5b0>
 801f50c:	2230      	movs	r2, #48	; 0x30
 801f50e:	1c98      	adds	r0, r3, #2
 801f510:	705a      	strb	r2, [r3, #1]
 801f512:	e7f5      	b.n	801f500 <__strftime+0x8d8>
 801f514:	6a2b      	ldr	r3, [r5, #32]
 801f516:	2b00      	cmp	r3, #0
 801f518:	f6ff ac88 	blt.w	801ee2c <__strftime+0x204>
 801f51c:	f000 f9c6 	bl	801f8ac <__tz_lock>
 801f520:	9b04      	ldr	r3, [sp, #16]
 801f522:	b90b      	cbnz	r3, 801f528 <__strftime+0x900>
 801f524:	f000 f9ce 	bl	801f8c4 <_tzset_unlocked>
 801f528:	f000 fd8a 	bl	8020040 <__gettzinfo>
 801f52c:	6a2b      	ldr	r3, [r5, #32]
 801f52e:	2b00      	cmp	r3, #0
 801f530:	bfcc      	ite	gt
 801f532:	2350      	movgt	r3, #80	; 0x50
 801f534:	2328      	movle	r3, #40	; 0x28
 801f536:	eb09 0704 	add.w	r7, r9, r4
 801f53a:	58c6      	ldr	r6, [r0, r3]
 801f53c:	f000 f9bc 	bl	801f8b8 <__tz_unlock>
 801f540:	4276      	negs	r6, r6
 801f542:	233c      	movs	r3, #60	; 0x3c
 801f544:	fb96 f0f3 	sdiv	r0, r6, r3
 801f548:	f000 fe3e 	bl	80201c8 <labs>
 801f54c:	233c      	movs	r3, #60	; 0x3c
 801f54e:	eba8 0a04 	sub.w	sl, r8, r4
 801f552:	fb90 f2f3 	sdiv	r2, r0, r3
 801f556:	fb02 0013 	mls	r0, r2, r3, r0
 801f55a:	9000      	str	r0, [sp, #0]
 801f55c:	4a28      	ldr	r2, [pc, #160]	; (801f600 <__strftime+0x9d8>)
 801f55e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801f562:	4651      	mov	r1, sl
 801f564:	4638      	mov	r0, r7
 801f566:	fb96 f3f3 	sdiv	r3, r6, r3
 801f56a:	f001 fb2b 	bl	8020bc4 <sniprintf>
 801f56e:	2800      	cmp	r0, #0
 801f570:	f6ff ab89 	blt.w	801ec86 <__strftime+0x5e>
 801f574:	4404      	add	r4, r0
 801f576:	45a0      	cmp	r8, r4
 801f578:	f67f ab85 	bls.w	801ec86 <__strftime+0x5e>
 801f57c:	2301      	movs	r3, #1
 801f57e:	9304      	str	r3, [sp, #16]
 801f580:	e454      	b.n	801ee2c <__strftime+0x204>
 801f582:	6a2b      	ldr	r3, [r5, #32]
 801f584:	2b00      	cmp	r3, #0
 801f586:	f6ff ac51 	blt.w	801ee2c <__strftime+0x204>
 801f58a:	f000 f98f 	bl	801f8ac <__tz_lock>
 801f58e:	9b04      	ldr	r3, [sp, #16]
 801f590:	b90b      	cbnz	r3, 801f596 <__strftime+0x96e>
 801f592:	f000 f997 	bl	801f8c4 <_tzset_unlocked>
 801f596:	6a2b      	ldr	r3, [r5, #32]
 801f598:	4a1a      	ldr	r2, [pc, #104]	; (801f604 <__strftime+0x9dc>)
 801f59a:	2b00      	cmp	r3, #0
 801f59c:	bfd4      	ite	le
 801f59e:	2300      	movle	r3, #0
 801f5a0:	2301      	movgt	r3, #1
 801f5a2:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801f5a6:	4630      	mov	r0, r6
 801f5a8:	f7e0 fe48 	bl	800023c <strlen>
 801f5ac:	3e01      	subs	r6, #1
 801f5ae:	4420      	add	r0, r4
 801f5b0:	f108 33ff 	add.w	r3, r8, #4294967295
 801f5b4:	42a0      	cmp	r0, r4
 801f5b6:	d102      	bne.n	801f5be <__strftime+0x996>
 801f5b8:	f000 f97e 	bl	801f8b8 <__tz_unlock>
 801f5bc:	e7de      	b.n	801f57c <__strftime+0x954>
 801f5be:	42a3      	cmp	r3, r4
 801f5c0:	d905      	bls.n	801f5ce <__strftime+0x9a6>
 801f5c2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801f5c6:	f809 2004 	strb.w	r2, [r9, r4]
 801f5ca:	3401      	adds	r4, #1
 801f5cc:	e7f2      	b.n	801f5b4 <__strftime+0x98c>
 801f5ce:	f000 f973 	bl	801f8b8 <__tz_unlock>
 801f5d2:	f7ff bb58 	b.w	801ec86 <__strftime+0x5e>
 801f5d6:	f108 33ff 	add.w	r3, r8, #4294967295
 801f5da:	42a3      	cmp	r3, r4
 801f5dc:	f67f ab53 	bls.w	801ec86 <__strftime+0x5e>
 801f5e0:	2325      	movs	r3, #37	; 0x25
 801f5e2:	e627      	b.n	801f234 <__strftime+0x60c>
 801f5e4:	f1b8 0f00 	cmp.w	r8, #0
 801f5e8:	d002      	beq.n	801f5f0 <__strftime+0x9c8>
 801f5ea:	2300      	movs	r3, #0
 801f5ec:	f809 3004 	strb.w	r3, [r9, r4]
 801f5f0:	4620      	mov	r0, r4
 801f5f2:	b011      	add	sp, #68	; 0x44
 801f5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f5f8:	fffff894 	.word	0xfffff894
 801f5fc:	08026acb 	.word	0x08026acb
 801f600:	08026ae8 	.word	0x08026ae8
 801f604:	2000016c 	.word	0x2000016c

0801f608 <strftime>:
 801f608:	b513      	push	{r0, r1, r4, lr}
 801f60a:	4c03      	ldr	r4, [pc, #12]	; (801f618 <strftime+0x10>)
 801f60c:	9400      	str	r4, [sp, #0]
 801f60e:	f7ff fb0b 	bl	801ec28 <__strftime>
 801f612:	b002      	add	sp, #8
 801f614:	bd10      	pop	{r4, pc}
 801f616:	bf00      	nop
 801f618:	200001d0 	.word	0x200001d0

0801f61c <strstr>:
 801f61c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f61e:	780c      	ldrb	r4, [r1, #0]
 801f620:	b164      	cbz	r4, 801f63c <strstr+0x20>
 801f622:	4603      	mov	r3, r0
 801f624:	781a      	ldrb	r2, [r3, #0]
 801f626:	4618      	mov	r0, r3
 801f628:	1c5e      	adds	r6, r3, #1
 801f62a:	b90a      	cbnz	r2, 801f630 <strstr+0x14>
 801f62c:	4610      	mov	r0, r2
 801f62e:	e005      	b.n	801f63c <strstr+0x20>
 801f630:	4294      	cmp	r4, r2
 801f632:	d108      	bne.n	801f646 <strstr+0x2a>
 801f634:	460d      	mov	r5, r1
 801f636:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801f63a:	b902      	cbnz	r2, 801f63e <strstr+0x22>
 801f63c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f63e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801f642:	4297      	cmp	r7, r2
 801f644:	d0f7      	beq.n	801f636 <strstr+0x1a>
 801f646:	4633      	mov	r3, r6
 801f648:	e7ec      	b.n	801f624 <strstr+0x8>
	...

0801f64c <_strtoul_l.isra.0>:
 801f64c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f650:	4e3b      	ldr	r6, [pc, #236]	; (801f740 <_strtoul_l.isra.0+0xf4>)
 801f652:	4686      	mov	lr, r0
 801f654:	468c      	mov	ip, r1
 801f656:	4660      	mov	r0, ip
 801f658:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801f65c:	5da5      	ldrb	r5, [r4, r6]
 801f65e:	f015 0508 	ands.w	r5, r5, #8
 801f662:	d1f8      	bne.n	801f656 <_strtoul_l.isra.0+0xa>
 801f664:	2c2d      	cmp	r4, #45	; 0x2d
 801f666:	d134      	bne.n	801f6d2 <_strtoul_l.isra.0+0x86>
 801f668:	f89c 4000 	ldrb.w	r4, [ip]
 801f66c:	f04f 0801 	mov.w	r8, #1
 801f670:	f100 0c02 	add.w	ip, r0, #2
 801f674:	2b00      	cmp	r3, #0
 801f676:	d05e      	beq.n	801f736 <_strtoul_l.isra.0+0xea>
 801f678:	2b10      	cmp	r3, #16
 801f67a:	d10c      	bne.n	801f696 <_strtoul_l.isra.0+0x4a>
 801f67c:	2c30      	cmp	r4, #48	; 0x30
 801f67e:	d10a      	bne.n	801f696 <_strtoul_l.isra.0+0x4a>
 801f680:	f89c 0000 	ldrb.w	r0, [ip]
 801f684:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801f688:	2858      	cmp	r0, #88	; 0x58
 801f68a:	d14f      	bne.n	801f72c <_strtoul_l.isra.0+0xe0>
 801f68c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801f690:	2310      	movs	r3, #16
 801f692:	f10c 0c02 	add.w	ip, ip, #2
 801f696:	f04f 37ff 	mov.w	r7, #4294967295
 801f69a:	2500      	movs	r5, #0
 801f69c:	fbb7 f7f3 	udiv	r7, r7, r3
 801f6a0:	fb03 f907 	mul.w	r9, r3, r7
 801f6a4:	ea6f 0909 	mvn.w	r9, r9
 801f6a8:	4628      	mov	r0, r5
 801f6aa:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801f6ae:	2e09      	cmp	r6, #9
 801f6b0:	d818      	bhi.n	801f6e4 <_strtoul_l.isra.0+0x98>
 801f6b2:	4634      	mov	r4, r6
 801f6b4:	42a3      	cmp	r3, r4
 801f6b6:	dd24      	ble.n	801f702 <_strtoul_l.isra.0+0xb6>
 801f6b8:	2d00      	cmp	r5, #0
 801f6ba:	db1f      	blt.n	801f6fc <_strtoul_l.isra.0+0xb0>
 801f6bc:	4287      	cmp	r7, r0
 801f6be:	d31d      	bcc.n	801f6fc <_strtoul_l.isra.0+0xb0>
 801f6c0:	d101      	bne.n	801f6c6 <_strtoul_l.isra.0+0x7a>
 801f6c2:	45a1      	cmp	r9, r4
 801f6c4:	db1a      	blt.n	801f6fc <_strtoul_l.isra.0+0xb0>
 801f6c6:	fb00 4003 	mla	r0, r0, r3, r4
 801f6ca:	2501      	movs	r5, #1
 801f6cc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801f6d0:	e7eb      	b.n	801f6aa <_strtoul_l.isra.0+0x5e>
 801f6d2:	2c2b      	cmp	r4, #43	; 0x2b
 801f6d4:	bf08      	it	eq
 801f6d6:	f89c 4000 	ldrbeq.w	r4, [ip]
 801f6da:	46a8      	mov	r8, r5
 801f6dc:	bf08      	it	eq
 801f6de:	f100 0c02 	addeq.w	ip, r0, #2
 801f6e2:	e7c7      	b.n	801f674 <_strtoul_l.isra.0+0x28>
 801f6e4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801f6e8:	2e19      	cmp	r6, #25
 801f6ea:	d801      	bhi.n	801f6f0 <_strtoul_l.isra.0+0xa4>
 801f6ec:	3c37      	subs	r4, #55	; 0x37
 801f6ee:	e7e1      	b.n	801f6b4 <_strtoul_l.isra.0+0x68>
 801f6f0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801f6f4:	2e19      	cmp	r6, #25
 801f6f6:	d804      	bhi.n	801f702 <_strtoul_l.isra.0+0xb6>
 801f6f8:	3c57      	subs	r4, #87	; 0x57
 801f6fa:	e7db      	b.n	801f6b4 <_strtoul_l.isra.0+0x68>
 801f6fc:	f04f 35ff 	mov.w	r5, #4294967295
 801f700:	e7e4      	b.n	801f6cc <_strtoul_l.isra.0+0x80>
 801f702:	2d00      	cmp	r5, #0
 801f704:	da07      	bge.n	801f716 <_strtoul_l.isra.0+0xca>
 801f706:	2322      	movs	r3, #34	; 0x22
 801f708:	f8ce 3000 	str.w	r3, [lr]
 801f70c:	f04f 30ff 	mov.w	r0, #4294967295
 801f710:	b942      	cbnz	r2, 801f724 <_strtoul_l.isra.0+0xd8>
 801f712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f716:	f1b8 0f00 	cmp.w	r8, #0
 801f71a:	d000      	beq.n	801f71e <_strtoul_l.isra.0+0xd2>
 801f71c:	4240      	negs	r0, r0
 801f71e:	2a00      	cmp	r2, #0
 801f720:	d0f7      	beq.n	801f712 <_strtoul_l.isra.0+0xc6>
 801f722:	b10d      	cbz	r5, 801f728 <_strtoul_l.isra.0+0xdc>
 801f724:	f10c 31ff 	add.w	r1, ip, #4294967295
 801f728:	6011      	str	r1, [r2, #0]
 801f72a:	e7f2      	b.n	801f712 <_strtoul_l.isra.0+0xc6>
 801f72c:	2430      	movs	r4, #48	; 0x30
 801f72e:	2b00      	cmp	r3, #0
 801f730:	d1b1      	bne.n	801f696 <_strtoul_l.isra.0+0x4a>
 801f732:	2308      	movs	r3, #8
 801f734:	e7af      	b.n	801f696 <_strtoul_l.isra.0+0x4a>
 801f736:	2c30      	cmp	r4, #48	; 0x30
 801f738:	d0a2      	beq.n	801f680 <_strtoul_l.isra.0+0x34>
 801f73a:	230a      	movs	r3, #10
 801f73c:	e7ab      	b.n	801f696 <_strtoul_l.isra.0+0x4a>
 801f73e:	bf00      	nop
 801f740:	08026d95 	.word	0x08026d95

0801f744 <_strtoul_r>:
 801f744:	f7ff bf82 	b.w	801f64c <_strtoul_l.isra.0>

0801f748 <strtoul>:
 801f748:	4613      	mov	r3, r2
 801f74a:	460a      	mov	r2, r1
 801f74c:	4601      	mov	r1, r0
 801f74e:	4802      	ldr	r0, [pc, #8]	; (801f758 <strtoul+0x10>)
 801f750:	6800      	ldr	r0, [r0, #0]
 801f752:	f7ff bf7b 	b.w	801f64c <_strtoul_l.isra.0>
 801f756:	bf00      	nop
 801f758:	20000108 	.word	0x20000108

0801f75c <__tzcalc_limits>:
 801f75c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f760:	4680      	mov	r8, r0
 801f762:	f000 fc6d 	bl	8020040 <__gettzinfo>
 801f766:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801f76a:	4598      	cmp	r8, r3
 801f76c:	f340 8098 	ble.w	801f8a0 <__tzcalc_limits+0x144>
 801f770:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 801f774:	4443      	add	r3, r8
 801f776:	109b      	asrs	r3, r3, #2
 801f778:	f240 126d 	movw	r2, #365	; 0x16d
 801f77c:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 801f780:	fb02 3505 	mla	r5, r2, r5, r3
 801f784:	f06f 0263 	mvn.w	r2, #99	; 0x63
 801f788:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 801f78c:	fb93 f3f2 	sdiv	r3, r3, r2
 801f790:	441d      	add	r5, r3
 801f792:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801f796:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801f79a:	fb98 f7f3 	sdiv	r7, r8, r3
 801f79e:	fb03 8717 	mls	r7, r3, r7, r8
 801f7a2:	4442      	add	r2, r8
 801f7a4:	fab7 fc87 	clz	ip, r7
 801f7a8:	fbb2 f2f3 	udiv	r2, r2, r3
 801f7ac:	f008 0303 	and.w	r3, r8, #3
 801f7b0:	4415      	add	r5, r2
 801f7b2:	2264      	movs	r2, #100	; 0x64
 801f7b4:	f8c0 8004 	str.w	r8, [r0, #4]
 801f7b8:	fb98 f6f2 	sdiv	r6, r8, r2
 801f7bc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801f7c0:	fb02 8616 	mls	r6, r2, r6, r8
 801f7c4:	4604      	mov	r4, r0
 801f7c6:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801f7ca:	9300      	str	r3, [sp, #0]
 801f7cc:	f04f 0e07 	mov.w	lr, #7
 801f7d0:	7a22      	ldrb	r2, [r4, #8]
 801f7d2:	6963      	ldr	r3, [r4, #20]
 801f7d4:	2a4a      	cmp	r2, #74	; 0x4a
 801f7d6:	d128      	bne.n	801f82a <__tzcalc_limits+0xce>
 801f7d8:	9900      	ldr	r1, [sp, #0]
 801f7da:	18ea      	adds	r2, r5, r3
 801f7dc:	b901      	cbnz	r1, 801f7e0 <__tzcalc_limits+0x84>
 801f7de:	b906      	cbnz	r6, 801f7e2 <__tzcalc_limits+0x86>
 801f7e0:	bb0f      	cbnz	r7, 801f826 <__tzcalc_limits+0xca>
 801f7e2:	2b3b      	cmp	r3, #59	; 0x3b
 801f7e4:	bfd4      	ite	le
 801f7e6:	2300      	movle	r3, #0
 801f7e8:	2301      	movgt	r3, #1
 801f7ea:	4413      	add	r3, r2
 801f7ec:	1e5a      	subs	r2, r3, #1
 801f7ee:	69a3      	ldr	r3, [r4, #24]
 801f7f0:	492c      	ldr	r1, [pc, #176]	; (801f8a4 <__tzcalc_limits+0x148>)
 801f7f2:	fb01 3202 	mla	r2, r1, r2, r3
 801f7f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801f7f8:	4413      	add	r3, r2
 801f7fa:	461a      	mov	r2, r3
 801f7fc:	17db      	asrs	r3, r3, #31
 801f7fe:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801f802:	3428      	adds	r4, #40	; 0x28
 801f804:	45a3      	cmp	fp, r4
 801f806:	d1e3      	bne.n	801f7d0 <__tzcalc_limits+0x74>
 801f808:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 801f80c:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 801f810:	4294      	cmp	r4, r2
 801f812:	eb75 0303 	sbcs.w	r3, r5, r3
 801f816:	bfb4      	ite	lt
 801f818:	2301      	movlt	r3, #1
 801f81a:	2300      	movge	r3, #0
 801f81c:	6003      	str	r3, [r0, #0]
 801f81e:	2001      	movs	r0, #1
 801f820:	b003      	add	sp, #12
 801f822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f826:	2300      	movs	r3, #0
 801f828:	e7df      	b.n	801f7ea <__tzcalc_limits+0x8e>
 801f82a:	2a44      	cmp	r2, #68	; 0x44
 801f82c:	d101      	bne.n	801f832 <__tzcalc_limits+0xd6>
 801f82e:	18ea      	adds	r2, r5, r3
 801f830:	e7dd      	b.n	801f7ee <__tzcalc_limits+0x92>
 801f832:	9a00      	ldr	r2, [sp, #0]
 801f834:	bb72      	cbnz	r2, 801f894 <__tzcalc_limits+0x138>
 801f836:	2e00      	cmp	r6, #0
 801f838:	bf0c      	ite	eq
 801f83a:	46e0      	moveq	r8, ip
 801f83c:	f04f 0801 	movne.w	r8, #1
 801f840:	4919      	ldr	r1, [pc, #100]	; (801f8a8 <__tzcalc_limits+0x14c>)
 801f842:	68e2      	ldr	r2, [r4, #12]
 801f844:	9201      	str	r2, [sp, #4]
 801f846:	f04f 0a30 	mov.w	sl, #48	; 0x30
 801f84a:	fb0a 1808 	mla	r8, sl, r8, r1
 801f84e:	462a      	mov	r2, r5
 801f850:	f04f 0900 	mov.w	r9, #0
 801f854:	f1a8 0804 	sub.w	r8, r8, #4
 801f858:	9901      	ldr	r1, [sp, #4]
 801f85a:	f109 0901 	add.w	r9, r9, #1
 801f85e:	4549      	cmp	r1, r9
 801f860:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 801f864:	dc18      	bgt.n	801f898 <__tzcalc_limits+0x13c>
 801f866:	f102 0804 	add.w	r8, r2, #4
 801f86a:	fb98 f9fe 	sdiv	r9, r8, lr
 801f86e:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 801f872:	eba8 0909 	sub.w	r9, r8, r9
 801f876:	ebb3 0909 	subs.w	r9, r3, r9
 801f87a:	6923      	ldr	r3, [r4, #16]
 801f87c:	f103 33ff 	add.w	r3, r3, #4294967295
 801f880:	bf48      	it	mi
 801f882:	f109 0907 	addmi.w	r9, r9, #7
 801f886:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801f88a:	444b      	add	r3, r9
 801f88c:	4553      	cmp	r3, sl
 801f88e:	da05      	bge.n	801f89c <__tzcalc_limits+0x140>
 801f890:	441a      	add	r2, r3
 801f892:	e7ac      	b.n	801f7ee <__tzcalc_limits+0x92>
 801f894:	46e0      	mov	r8, ip
 801f896:	e7d3      	b.n	801f840 <__tzcalc_limits+0xe4>
 801f898:	4452      	add	r2, sl
 801f89a:	e7dd      	b.n	801f858 <__tzcalc_limits+0xfc>
 801f89c:	3b07      	subs	r3, #7
 801f89e:	e7f5      	b.n	801f88c <__tzcalc_limits+0x130>
 801f8a0:	2000      	movs	r0, #0
 801f8a2:	e7bd      	b.n	801f820 <__tzcalc_limits+0xc4>
 801f8a4:	00015180 	.word	0x00015180
 801f8a8:	080269dc 	.word	0x080269dc

0801f8ac <__tz_lock>:
 801f8ac:	4801      	ldr	r0, [pc, #4]	; (801f8b4 <__tz_lock+0x8>)
 801f8ae:	f7fe beb9 	b.w	801e624 <__retarget_lock_acquire>
 801f8b2:	bf00      	nop
 801f8b4:	20000e2b 	.word	0x20000e2b

0801f8b8 <__tz_unlock>:
 801f8b8:	4801      	ldr	r0, [pc, #4]	; (801f8c0 <__tz_unlock+0x8>)
 801f8ba:	f7fe beb5 	b.w	801e628 <__retarget_lock_release>
 801f8be:	bf00      	nop
 801f8c0:	20000e2b 	.word	0x20000e2b

0801f8c4 <_tzset_unlocked>:
 801f8c4:	4b01      	ldr	r3, [pc, #4]	; (801f8cc <_tzset_unlocked+0x8>)
 801f8c6:	6818      	ldr	r0, [r3, #0]
 801f8c8:	f000 b802 	b.w	801f8d0 <_tzset_unlocked_r>
 801f8cc:	20000108 	.word	0x20000108

0801f8d0 <_tzset_unlocked_r>:
 801f8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8d4:	b08d      	sub	sp, #52	; 0x34
 801f8d6:	4607      	mov	r7, r0
 801f8d8:	f000 fbb2 	bl	8020040 <__gettzinfo>
 801f8dc:	49ae      	ldr	r1, [pc, #696]	; (801fb98 <_tzset_unlocked_r+0x2c8>)
 801f8de:	4eaf      	ldr	r6, [pc, #700]	; (801fb9c <_tzset_unlocked_r+0x2cc>)
 801f8e0:	4605      	mov	r5, r0
 801f8e2:	4638      	mov	r0, r7
 801f8e4:	f000 fba4 	bl	8020030 <_getenv_r>
 801f8e8:	4604      	mov	r4, r0
 801f8ea:	b970      	cbnz	r0, 801f90a <_tzset_unlocked_r+0x3a>
 801f8ec:	4bac      	ldr	r3, [pc, #688]	; (801fba0 <_tzset_unlocked_r+0x2d0>)
 801f8ee:	4aad      	ldr	r2, [pc, #692]	; (801fba4 <_tzset_unlocked_r+0x2d4>)
 801f8f0:	6018      	str	r0, [r3, #0]
 801f8f2:	4bad      	ldr	r3, [pc, #692]	; (801fba8 <_tzset_unlocked_r+0x2d8>)
 801f8f4:	6018      	str	r0, [r3, #0]
 801f8f6:	4bad      	ldr	r3, [pc, #692]	; (801fbac <_tzset_unlocked_r+0x2dc>)
 801f8f8:	6830      	ldr	r0, [r6, #0]
 801f8fa:	e9c3 2200 	strd	r2, r2, [r3]
 801f8fe:	f7fe ff01 	bl	801e704 <free>
 801f902:	6034      	str	r4, [r6, #0]
 801f904:	b00d      	add	sp, #52	; 0x34
 801f906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f90a:	6831      	ldr	r1, [r6, #0]
 801f90c:	2900      	cmp	r1, #0
 801f90e:	d15f      	bne.n	801f9d0 <_tzset_unlocked_r+0x100>
 801f910:	6830      	ldr	r0, [r6, #0]
 801f912:	f7fe fef7 	bl	801e704 <free>
 801f916:	4620      	mov	r0, r4
 801f918:	f7e0 fc90 	bl	800023c <strlen>
 801f91c:	1c41      	adds	r1, r0, #1
 801f91e:	4638      	mov	r0, r7
 801f920:	f7fe ff6e 	bl	801e800 <_malloc_r>
 801f924:	6030      	str	r0, [r6, #0]
 801f926:	2800      	cmp	r0, #0
 801f928:	d157      	bne.n	801f9da <_tzset_unlocked_r+0x10a>
 801f92a:	7823      	ldrb	r3, [r4, #0]
 801f92c:	4aa0      	ldr	r2, [pc, #640]	; (801fbb0 <_tzset_unlocked_r+0x2e0>)
 801f92e:	49a1      	ldr	r1, [pc, #644]	; (801fbb4 <_tzset_unlocked_r+0x2e4>)
 801f930:	2b3a      	cmp	r3, #58	; 0x3a
 801f932:	bf08      	it	eq
 801f934:	3401      	addeq	r4, #1
 801f936:	ae0a      	add	r6, sp, #40	; 0x28
 801f938:	4633      	mov	r3, r6
 801f93a:	4620      	mov	r0, r4
 801f93c:	f001 f976 	bl	8020c2c <siscanf>
 801f940:	2800      	cmp	r0, #0
 801f942:	dddf      	ble.n	801f904 <_tzset_unlocked_r+0x34>
 801f944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f946:	18e7      	adds	r7, r4, r3
 801f948:	5ce3      	ldrb	r3, [r4, r3]
 801f94a:	2b2d      	cmp	r3, #45	; 0x2d
 801f94c:	d149      	bne.n	801f9e2 <_tzset_unlocked_r+0x112>
 801f94e:	3701      	adds	r7, #1
 801f950:	f04f 34ff 	mov.w	r4, #4294967295
 801f954:	f10d 0a20 	add.w	sl, sp, #32
 801f958:	f10d 0b1e 	add.w	fp, sp, #30
 801f95c:	f04f 0800 	mov.w	r8, #0
 801f960:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801f964:	4994      	ldr	r1, [pc, #592]	; (801fbb8 <_tzset_unlocked_r+0x2e8>)
 801f966:	9603      	str	r6, [sp, #12]
 801f968:	f8cd b000 	str.w	fp, [sp]
 801f96c:	4633      	mov	r3, r6
 801f96e:	aa07      	add	r2, sp, #28
 801f970:	4638      	mov	r0, r7
 801f972:	f8ad 801e 	strh.w	r8, [sp, #30]
 801f976:	f8ad 8020 	strh.w	r8, [sp, #32]
 801f97a:	f001 f957 	bl	8020c2c <siscanf>
 801f97e:	4540      	cmp	r0, r8
 801f980:	ddc0      	ble.n	801f904 <_tzset_unlocked_r+0x34>
 801f982:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801f986:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801f98a:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801fbc4 <_tzset_unlocked_r+0x2f4>
 801f98e:	213c      	movs	r1, #60	; 0x3c
 801f990:	fb01 2203 	mla	r2, r1, r3, r2
 801f994:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801f998:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801f99c:	fb01 2303 	mla	r3, r1, r3, r2
 801f9a0:	435c      	muls	r4, r3
 801f9a2:	62ac      	str	r4, [r5, #40]	; 0x28
 801f9a4:	4c81      	ldr	r4, [pc, #516]	; (801fbac <_tzset_unlocked_r+0x2dc>)
 801f9a6:	4b82      	ldr	r3, [pc, #520]	; (801fbb0 <_tzset_unlocked_r+0x2e0>)
 801f9a8:	6023      	str	r3, [r4, #0]
 801f9aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f9ac:	4981      	ldr	r1, [pc, #516]	; (801fbb4 <_tzset_unlocked_r+0x2e4>)
 801f9ae:	441f      	add	r7, r3
 801f9b0:	464a      	mov	r2, r9
 801f9b2:	4633      	mov	r3, r6
 801f9b4:	4638      	mov	r0, r7
 801f9b6:	f001 f939 	bl	8020c2c <siscanf>
 801f9ba:	4540      	cmp	r0, r8
 801f9bc:	dc16      	bgt.n	801f9ec <_tzset_unlocked_r+0x11c>
 801f9be:	6823      	ldr	r3, [r4, #0]
 801f9c0:	6063      	str	r3, [r4, #4]
 801f9c2:	4b77      	ldr	r3, [pc, #476]	; (801fba0 <_tzset_unlocked_r+0x2d0>)
 801f9c4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801f9c6:	601a      	str	r2, [r3, #0]
 801f9c8:	4b77      	ldr	r3, [pc, #476]	; (801fba8 <_tzset_unlocked_r+0x2d8>)
 801f9ca:	f8c3 8000 	str.w	r8, [r3]
 801f9ce:	e799      	b.n	801f904 <_tzset_unlocked_r+0x34>
 801f9d0:	f7e0 fc3c 	bl	800024c <strcmp>
 801f9d4:	2800      	cmp	r0, #0
 801f9d6:	d19b      	bne.n	801f910 <_tzset_unlocked_r+0x40>
 801f9d8:	e794      	b.n	801f904 <_tzset_unlocked_r+0x34>
 801f9da:	4621      	mov	r1, r4
 801f9dc:	f001 f952 	bl	8020c84 <strcpy>
 801f9e0:	e7a3      	b.n	801f92a <_tzset_unlocked_r+0x5a>
 801f9e2:	2b2b      	cmp	r3, #43	; 0x2b
 801f9e4:	bf08      	it	eq
 801f9e6:	3701      	addeq	r7, #1
 801f9e8:	2401      	movs	r4, #1
 801f9ea:	e7b3      	b.n	801f954 <_tzset_unlocked_r+0x84>
 801f9ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f9ee:	f8c4 9004 	str.w	r9, [r4, #4]
 801f9f2:	18fc      	adds	r4, r7, r3
 801f9f4:	5cfb      	ldrb	r3, [r7, r3]
 801f9f6:	2b2d      	cmp	r3, #45	; 0x2d
 801f9f8:	f040 808b 	bne.w	801fb12 <_tzset_unlocked_r+0x242>
 801f9fc:	3401      	adds	r4, #1
 801f9fe:	f04f 37ff 	mov.w	r7, #4294967295
 801fa02:	2300      	movs	r3, #0
 801fa04:	f8ad 301c 	strh.w	r3, [sp, #28]
 801fa08:	f8ad 301e 	strh.w	r3, [sp, #30]
 801fa0c:	f8ad 3020 	strh.w	r3, [sp, #32]
 801fa10:	930a      	str	r3, [sp, #40]	; 0x28
 801fa12:	e9cd a602 	strd	sl, r6, [sp, #8]
 801fa16:	e9cd b600 	strd	fp, r6, [sp]
 801fa1a:	4967      	ldr	r1, [pc, #412]	; (801fbb8 <_tzset_unlocked_r+0x2e8>)
 801fa1c:	4633      	mov	r3, r6
 801fa1e:	aa07      	add	r2, sp, #28
 801fa20:	4620      	mov	r0, r4
 801fa22:	f001 f903 	bl	8020c2c <siscanf>
 801fa26:	2800      	cmp	r0, #0
 801fa28:	dc78      	bgt.n	801fb1c <_tzset_unlocked_r+0x24c>
 801fa2a:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 801fa2c:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 801fa30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fa32:	652f      	str	r7, [r5, #80]	; 0x50
 801fa34:	441c      	add	r4, r3
 801fa36:	462f      	mov	r7, r5
 801fa38:	f04f 0900 	mov.w	r9, #0
 801fa3c:	7823      	ldrb	r3, [r4, #0]
 801fa3e:	2b2c      	cmp	r3, #44	; 0x2c
 801fa40:	bf08      	it	eq
 801fa42:	3401      	addeq	r4, #1
 801fa44:	f894 8000 	ldrb.w	r8, [r4]
 801fa48:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801fa4c:	d178      	bne.n	801fb40 <_tzset_unlocked_r+0x270>
 801fa4e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801fa52:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801fa56:	ab09      	add	r3, sp, #36	; 0x24
 801fa58:	9300      	str	r3, [sp, #0]
 801fa5a:	4958      	ldr	r1, [pc, #352]	; (801fbbc <_tzset_unlocked_r+0x2ec>)
 801fa5c:	9603      	str	r6, [sp, #12]
 801fa5e:	4633      	mov	r3, r6
 801fa60:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 801fa64:	4620      	mov	r0, r4
 801fa66:	f001 f8e1 	bl	8020c2c <siscanf>
 801fa6a:	2803      	cmp	r0, #3
 801fa6c:	f47f af4a 	bne.w	801f904 <_tzset_unlocked_r+0x34>
 801fa70:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801fa74:	1e4b      	subs	r3, r1, #1
 801fa76:	2b0b      	cmp	r3, #11
 801fa78:	f63f af44 	bhi.w	801f904 <_tzset_unlocked_r+0x34>
 801fa7c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801fa80:	1e53      	subs	r3, r2, #1
 801fa82:	2b04      	cmp	r3, #4
 801fa84:	f63f af3e 	bhi.w	801f904 <_tzset_unlocked_r+0x34>
 801fa88:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801fa8c:	2b06      	cmp	r3, #6
 801fa8e:	f63f af39 	bhi.w	801f904 <_tzset_unlocked_r+0x34>
 801fa92:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801fa96:	f887 8008 	strb.w	r8, [r7, #8]
 801fa9a:	617b      	str	r3, [r7, #20]
 801fa9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fa9e:	eb04 0803 	add.w	r8, r4, r3
 801faa2:	2302      	movs	r3, #2
 801faa4:	f8ad 301c 	strh.w	r3, [sp, #28]
 801faa8:	2300      	movs	r3, #0
 801faaa:	f8ad 301e 	strh.w	r3, [sp, #30]
 801faae:	f8ad 3020 	strh.w	r3, [sp, #32]
 801fab2:	930a      	str	r3, [sp, #40]	; 0x28
 801fab4:	f898 3000 	ldrb.w	r3, [r8]
 801fab8:	2b2f      	cmp	r3, #47	; 0x2f
 801faba:	d109      	bne.n	801fad0 <_tzset_unlocked_r+0x200>
 801fabc:	e9cd a602 	strd	sl, r6, [sp, #8]
 801fac0:	e9cd b600 	strd	fp, r6, [sp]
 801fac4:	493e      	ldr	r1, [pc, #248]	; (801fbc0 <_tzset_unlocked_r+0x2f0>)
 801fac6:	4633      	mov	r3, r6
 801fac8:	aa07      	add	r2, sp, #28
 801faca:	4640      	mov	r0, r8
 801facc:	f001 f8ae 	bl	8020c2c <siscanf>
 801fad0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801fad4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801fad8:	213c      	movs	r1, #60	; 0x3c
 801fada:	fb01 2203 	mla	r2, r1, r3, r2
 801fade:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801fae2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801fae6:	fb01 2303 	mla	r3, r1, r3, r2
 801faea:	61bb      	str	r3, [r7, #24]
 801faec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801faee:	3728      	adds	r7, #40	; 0x28
 801faf0:	4444      	add	r4, r8
 801faf2:	f1b9 0f00 	cmp.w	r9, #0
 801faf6:	d020      	beq.n	801fb3a <_tzset_unlocked_r+0x26a>
 801faf8:	6868      	ldr	r0, [r5, #4]
 801fafa:	f7ff fe2f 	bl	801f75c <__tzcalc_limits>
 801fafe:	4b28      	ldr	r3, [pc, #160]	; (801fba0 <_tzset_unlocked_r+0x2d0>)
 801fb00:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801fb02:	601a      	str	r2, [r3, #0]
 801fb04:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801fb06:	1a9b      	subs	r3, r3, r2
 801fb08:	4a27      	ldr	r2, [pc, #156]	; (801fba8 <_tzset_unlocked_r+0x2d8>)
 801fb0a:	bf18      	it	ne
 801fb0c:	2301      	movne	r3, #1
 801fb0e:	6013      	str	r3, [r2, #0]
 801fb10:	e6f8      	b.n	801f904 <_tzset_unlocked_r+0x34>
 801fb12:	2b2b      	cmp	r3, #43	; 0x2b
 801fb14:	bf08      	it	eq
 801fb16:	3401      	addeq	r4, #1
 801fb18:	2701      	movs	r7, #1
 801fb1a:	e772      	b.n	801fa02 <_tzset_unlocked_r+0x132>
 801fb1c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801fb20:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801fb24:	213c      	movs	r1, #60	; 0x3c
 801fb26:	fb01 2203 	mla	r2, r1, r3, r2
 801fb2a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801fb2e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801fb32:	fb01 2303 	mla	r3, r1, r3, r2
 801fb36:	435f      	muls	r7, r3
 801fb38:	e77a      	b.n	801fa30 <_tzset_unlocked_r+0x160>
 801fb3a:	f04f 0901 	mov.w	r9, #1
 801fb3e:	e77d      	b.n	801fa3c <_tzset_unlocked_r+0x16c>
 801fb40:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 801fb44:	bf06      	itte	eq
 801fb46:	3401      	addeq	r4, #1
 801fb48:	4643      	moveq	r3, r8
 801fb4a:	2344      	movne	r3, #68	; 0x44
 801fb4c:	220a      	movs	r2, #10
 801fb4e:	a90b      	add	r1, sp, #44	; 0x2c
 801fb50:	4620      	mov	r0, r4
 801fb52:	9305      	str	r3, [sp, #20]
 801fb54:	f7ff fdf8 	bl	801f748 <strtoul>
 801fb58:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801fb5c:	9b05      	ldr	r3, [sp, #20]
 801fb5e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801fb62:	45a0      	cmp	r8, r4
 801fb64:	d114      	bne.n	801fb90 <_tzset_unlocked_r+0x2c0>
 801fb66:	234d      	movs	r3, #77	; 0x4d
 801fb68:	f1b9 0f00 	cmp.w	r9, #0
 801fb6c:	d107      	bne.n	801fb7e <_tzset_unlocked_r+0x2ae>
 801fb6e:	722b      	strb	r3, [r5, #8]
 801fb70:	2103      	movs	r1, #3
 801fb72:	2302      	movs	r3, #2
 801fb74:	e9c5 1303 	strd	r1, r3, [r5, #12]
 801fb78:	f8c5 9014 	str.w	r9, [r5, #20]
 801fb7c:	e791      	b.n	801faa2 <_tzset_unlocked_r+0x1d2>
 801fb7e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801fb82:	220b      	movs	r2, #11
 801fb84:	2301      	movs	r3, #1
 801fb86:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 801fb8a:	2300      	movs	r3, #0
 801fb8c:	63eb      	str	r3, [r5, #60]	; 0x3c
 801fb8e:	e788      	b.n	801faa2 <_tzset_unlocked_r+0x1d2>
 801fb90:	b280      	uxth	r0, r0
 801fb92:	723b      	strb	r3, [r7, #8]
 801fb94:	6178      	str	r0, [r7, #20]
 801fb96:	e784      	b.n	801faa2 <_tzset_unlocked_r+0x1d2>
 801fb98:	08026d1c 	.word	0x08026d1c
 801fb9c:	20000d84 	.word	0x20000d84
 801fba0:	20000d8c 	.word	0x20000d8c
 801fba4:	08026d1f 	.word	0x08026d1f
 801fba8:	20000d88 	.word	0x20000d88
 801fbac:	2000016c 	.word	0x2000016c
 801fbb0:	20000d77 	.word	0x20000d77
 801fbb4:	08026d23 	.word	0x08026d23
 801fbb8:	08026d46 	.word	0x08026d46
 801fbbc:	08026d32 	.word	0x08026d32
 801fbc0:	08026d45 	.word	0x08026d45
 801fbc4:	20000d6c 	.word	0x20000d6c

0801fbc8 <_vsniprintf_r>:
 801fbc8:	b530      	push	{r4, r5, lr}
 801fbca:	1e14      	subs	r4, r2, #0
 801fbcc:	4605      	mov	r5, r0
 801fbce:	b09b      	sub	sp, #108	; 0x6c
 801fbd0:	4618      	mov	r0, r3
 801fbd2:	da05      	bge.n	801fbe0 <_vsniprintf_r+0x18>
 801fbd4:	238b      	movs	r3, #139	; 0x8b
 801fbd6:	602b      	str	r3, [r5, #0]
 801fbd8:	f04f 30ff 	mov.w	r0, #4294967295
 801fbdc:	b01b      	add	sp, #108	; 0x6c
 801fbde:	bd30      	pop	{r4, r5, pc}
 801fbe0:	f44f 7302 	mov.w	r3, #520	; 0x208
 801fbe4:	f8ad 300c 	strh.w	r3, [sp, #12]
 801fbe8:	bf14      	ite	ne
 801fbea:	f104 33ff 	addne.w	r3, r4, #4294967295
 801fbee:	4623      	moveq	r3, r4
 801fbf0:	9302      	str	r3, [sp, #8]
 801fbf2:	9305      	str	r3, [sp, #20]
 801fbf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801fbf8:	9100      	str	r1, [sp, #0]
 801fbfa:	9104      	str	r1, [sp, #16]
 801fbfc:	f8ad 300e 	strh.w	r3, [sp, #14]
 801fc00:	4602      	mov	r2, r0
 801fc02:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801fc04:	4669      	mov	r1, sp
 801fc06:	4628      	mov	r0, r5
 801fc08:	f000 fb94 	bl	8020334 <_svfiprintf_r>
 801fc0c:	1c43      	adds	r3, r0, #1
 801fc0e:	bfbc      	itt	lt
 801fc10:	238b      	movlt	r3, #139	; 0x8b
 801fc12:	602b      	strlt	r3, [r5, #0]
 801fc14:	2c00      	cmp	r4, #0
 801fc16:	d0e1      	beq.n	801fbdc <_vsniprintf_r+0x14>
 801fc18:	9b00      	ldr	r3, [sp, #0]
 801fc1a:	2200      	movs	r2, #0
 801fc1c:	701a      	strb	r2, [r3, #0]
 801fc1e:	e7dd      	b.n	801fbdc <_vsniprintf_r+0x14>

0801fc20 <vsniprintf>:
 801fc20:	b507      	push	{r0, r1, r2, lr}
 801fc22:	9300      	str	r3, [sp, #0]
 801fc24:	4613      	mov	r3, r2
 801fc26:	460a      	mov	r2, r1
 801fc28:	4601      	mov	r1, r0
 801fc2a:	4803      	ldr	r0, [pc, #12]	; (801fc38 <vsniprintf+0x18>)
 801fc2c:	6800      	ldr	r0, [r0, #0]
 801fc2e:	f7ff ffcb 	bl	801fbc8 <_vsniprintf_r>
 801fc32:	b003      	add	sp, #12
 801fc34:	f85d fb04 	ldr.w	pc, [sp], #4
 801fc38:	20000108 	.word	0x20000108

0801fc3c <__swbuf_r>:
 801fc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fc3e:	460e      	mov	r6, r1
 801fc40:	4614      	mov	r4, r2
 801fc42:	4605      	mov	r5, r0
 801fc44:	b118      	cbz	r0, 801fc4e <__swbuf_r+0x12>
 801fc46:	6983      	ldr	r3, [r0, #24]
 801fc48:	b90b      	cbnz	r3, 801fc4e <__swbuf_r+0x12>
 801fc4a:	f7fe f939 	bl	801dec0 <__sinit>
 801fc4e:	4b21      	ldr	r3, [pc, #132]	; (801fcd4 <__swbuf_r+0x98>)
 801fc50:	429c      	cmp	r4, r3
 801fc52:	d12b      	bne.n	801fcac <__swbuf_r+0x70>
 801fc54:	686c      	ldr	r4, [r5, #4]
 801fc56:	69a3      	ldr	r3, [r4, #24]
 801fc58:	60a3      	str	r3, [r4, #8]
 801fc5a:	89a3      	ldrh	r3, [r4, #12]
 801fc5c:	071a      	lsls	r2, r3, #28
 801fc5e:	d52f      	bpl.n	801fcc0 <__swbuf_r+0x84>
 801fc60:	6923      	ldr	r3, [r4, #16]
 801fc62:	b36b      	cbz	r3, 801fcc0 <__swbuf_r+0x84>
 801fc64:	6923      	ldr	r3, [r4, #16]
 801fc66:	6820      	ldr	r0, [r4, #0]
 801fc68:	1ac0      	subs	r0, r0, r3
 801fc6a:	6963      	ldr	r3, [r4, #20]
 801fc6c:	b2f6      	uxtb	r6, r6
 801fc6e:	4283      	cmp	r3, r0
 801fc70:	4637      	mov	r7, r6
 801fc72:	dc04      	bgt.n	801fc7e <__swbuf_r+0x42>
 801fc74:	4621      	mov	r1, r4
 801fc76:	4628      	mov	r0, r5
 801fc78:	f7fe f87c 	bl	801dd74 <_fflush_r>
 801fc7c:	bb30      	cbnz	r0, 801fccc <__swbuf_r+0x90>
 801fc7e:	68a3      	ldr	r3, [r4, #8]
 801fc80:	3b01      	subs	r3, #1
 801fc82:	60a3      	str	r3, [r4, #8]
 801fc84:	6823      	ldr	r3, [r4, #0]
 801fc86:	1c5a      	adds	r2, r3, #1
 801fc88:	6022      	str	r2, [r4, #0]
 801fc8a:	701e      	strb	r6, [r3, #0]
 801fc8c:	6963      	ldr	r3, [r4, #20]
 801fc8e:	3001      	adds	r0, #1
 801fc90:	4283      	cmp	r3, r0
 801fc92:	d004      	beq.n	801fc9e <__swbuf_r+0x62>
 801fc94:	89a3      	ldrh	r3, [r4, #12]
 801fc96:	07db      	lsls	r3, r3, #31
 801fc98:	d506      	bpl.n	801fca8 <__swbuf_r+0x6c>
 801fc9a:	2e0a      	cmp	r6, #10
 801fc9c:	d104      	bne.n	801fca8 <__swbuf_r+0x6c>
 801fc9e:	4621      	mov	r1, r4
 801fca0:	4628      	mov	r0, r5
 801fca2:	f7fe f867 	bl	801dd74 <_fflush_r>
 801fca6:	b988      	cbnz	r0, 801fccc <__swbuf_r+0x90>
 801fca8:	4638      	mov	r0, r7
 801fcaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fcac:	4b0a      	ldr	r3, [pc, #40]	; (801fcd8 <__swbuf_r+0x9c>)
 801fcae:	429c      	cmp	r4, r3
 801fcb0:	d101      	bne.n	801fcb6 <__swbuf_r+0x7a>
 801fcb2:	68ac      	ldr	r4, [r5, #8]
 801fcb4:	e7cf      	b.n	801fc56 <__swbuf_r+0x1a>
 801fcb6:	4b09      	ldr	r3, [pc, #36]	; (801fcdc <__swbuf_r+0xa0>)
 801fcb8:	429c      	cmp	r4, r3
 801fcba:	bf08      	it	eq
 801fcbc:	68ec      	ldreq	r4, [r5, #12]
 801fcbe:	e7ca      	b.n	801fc56 <__swbuf_r+0x1a>
 801fcc0:	4621      	mov	r1, r4
 801fcc2:	4628      	mov	r0, r5
 801fcc4:	f000 f81e 	bl	801fd04 <__swsetup_r>
 801fcc8:	2800      	cmp	r0, #0
 801fcca:	d0cb      	beq.n	801fc64 <__swbuf_r+0x28>
 801fccc:	f04f 37ff 	mov.w	r7, #4294967295
 801fcd0:	e7ea      	b.n	801fca8 <__swbuf_r+0x6c>
 801fcd2:	bf00      	nop
 801fcd4:	08026920 	.word	0x08026920
 801fcd8:	08026940 	.word	0x08026940
 801fcdc:	08026900 	.word	0x08026900

0801fce0 <_write_r>:
 801fce0:	b538      	push	{r3, r4, r5, lr}
 801fce2:	4d07      	ldr	r5, [pc, #28]	; (801fd00 <_write_r+0x20>)
 801fce4:	4604      	mov	r4, r0
 801fce6:	4608      	mov	r0, r1
 801fce8:	4611      	mov	r1, r2
 801fcea:	2200      	movs	r2, #0
 801fcec:	602a      	str	r2, [r5, #0]
 801fcee:	461a      	mov	r2, r3
 801fcf0:	f7e1 f86e 	bl	8000dd0 <_write>
 801fcf4:	1c43      	adds	r3, r0, #1
 801fcf6:	d102      	bne.n	801fcfe <_write_r+0x1e>
 801fcf8:	682b      	ldr	r3, [r5, #0]
 801fcfa:	b103      	cbz	r3, 801fcfe <_write_r+0x1e>
 801fcfc:	6023      	str	r3, [r4, #0]
 801fcfe:	bd38      	pop	{r3, r4, r5, pc}
 801fd00:	20000e30 	.word	0x20000e30

0801fd04 <__swsetup_r>:
 801fd04:	4b32      	ldr	r3, [pc, #200]	; (801fdd0 <__swsetup_r+0xcc>)
 801fd06:	b570      	push	{r4, r5, r6, lr}
 801fd08:	681d      	ldr	r5, [r3, #0]
 801fd0a:	4606      	mov	r6, r0
 801fd0c:	460c      	mov	r4, r1
 801fd0e:	b125      	cbz	r5, 801fd1a <__swsetup_r+0x16>
 801fd10:	69ab      	ldr	r3, [r5, #24]
 801fd12:	b913      	cbnz	r3, 801fd1a <__swsetup_r+0x16>
 801fd14:	4628      	mov	r0, r5
 801fd16:	f7fe f8d3 	bl	801dec0 <__sinit>
 801fd1a:	4b2e      	ldr	r3, [pc, #184]	; (801fdd4 <__swsetup_r+0xd0>)
 801fd1c:	429c      	cmp	r4, r3
 801fd1e:	d10f      	bne.n	801fd40 <__swsetup_r+0x3c>
 801fd20:	686c      	ldr	r4, [r5, #4]
 801fd22:	89a3      	ldrh	r3, [r4, #12]
 801fd24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fd28:	0719      	lsls	r1, r3, #28
 801fd2a:	d42c      	bmi.n	801fd86 <__swsetup_r+0x82>
 801fd2c:	06dd      	lsls	r5, r3, #27
 801fd2e:	d411      	bmi.n	801fd54 <__swsetup_r+0x50>
 801fd30:	2309      	movs	r3, #9
 801fd32:	6033      	str	r3, [r6, #0]
 801fd34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801fd38:	81a3      	strh	r3, [r4, #12]
 801fd3a:	f04f 30ff 	mov.w	r0, #4294967295
 801fd3e:	e03e      	b.n	801fdbe <__swsetup_r+0xba>
 801fd40:	4b25      	ldr	r3, [pc, #148]	; (801fdd8 <__swsetup_r+0xd4>)
 801fd42:	429c      	cmp	r4, r3
 801fd44:	d101      	bne.n	801fd4a <__swsetup_r+0x46>
 801fd46:	68ac      	ldr	r4, [r5, #8]
 801fd48:	e7eb      	b.n	801fd22 <__swsetup_r+0x1e>
 801fd4a:	4b24      	ldr	r3, [pc, #144]	; (801fddc <__swsetup_r+0xd8>)
 801fd4c:	429c      	cmp	r4, r3
 801fd4e:	bf08      	it	eq
 801fd50:	68ec      	ldreq	r4, [r5, #12]
 801fd52:	e7e6      	b.n	801fd22 <__swsetup_r+0x1e>
 801fd54:	0758      	lsls	r0, r3, #29
 801fd56:	d512      	bpl.n	801fd7e <__swsetup_r+0x7a>
 801fd58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fd5a:	b141      	cbz	r1, 801fd6e <__swsetup_r+0x6a>
 801fd5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fd60:	4299      	cmp	r1, r3
 801fd62:	d002      	beq.n	801fd6a <__swsetup_r+0x66>
 801fd64:	4630      	mov	r0, r6
 801fd66:	f7fe fcfb 	bl	801e760 <_free_r>
 801fd6a:	2300      	movs	r3, #0
 801fd6c:	6363      	str	r3, [r4, #52]	; 0x34
 801fd6e:	89a3      	ldrh	r3, [r4, #12]
 801fd70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801fd74:	81a3      	strh	r3, [r4, #12]
 801fd76:	2300      	movs	r3, #0
 801fd78:	6063      	str	r3, [r4, #4]
 801fd7a:	6923      	ldr	r3, [r4, #16]
 801fd7c:	6023      	str	r3, [r4, #0]
 801fd7e:	89a3      	ldrh	r3, [r4, #12]
 801fd80:	f043 0308 	orr.w	r3, r3, #8
 801fd84:	81a3      	strh	r3, [r4, #12]
 801fd86:	6923      	ldr	r3, [r4, #16]
 801fd88:	b94b      	cbnz	r3, 801fd9e <__swsetup_r+0x9a>
 801fd8a:	89a3      	ldrh	r3, [r4, #12]
 801fd8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801fd90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fd94:	d003      	beq.n	801fd9e <__swsetup_r+0x9a>
 801fd96:	4621      	mov	r1, r4
 801fd98:	4630      	mov	r0, r6
 801fd9a:	f7fe fc6b 	bl	801e674 <__smakebuf_r>
 801fd9e:	89a0      	ldrh	r0, [r4, #12]
 801fda0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fda4:	f010 0301 	ands.w	r3, r0, #1
 801fda8:	d00a      	beq.n	801fdc0 <__swsetup_r+0xbc>
 801fdaa:	2300      	movs	r3, #0
 801fdac:	60a3      	str	r3, [r4, #8]
 801fdae:	6963      	ldr	r3, [r4, #20]
 801fdb0:	425b      	negs	r3, r3
 801fdb2:	61a3      	str	r3, [r4, #24]
 801fdb4:	6923      	ldr	r3, [r4, #16]
 801fdb6:	b943      	cbnz	r3, 801fdca <__swsetup_r+0xc6>
 801fdb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801fdbc:	d1ba      	bne.n	801fd34 <__swsetup_r+0x30>
 801fdbe:	bd70      	pop	{r4, r5, r6, pc}
 801fdc0:	0781      	lsls	r1, r0, #30
 801fdc2:	bf58      	it	pl
 801fdc4:	6963      	ldrpl	r3, [r4, #20]
 801fdc6:	60a3      	str	r3, [r4, #8]
 801fdc8:	e7f4      	b.n	801fdb4 <__swsetup_r+0xb0>
 801fdca:	2000      	movs	r0, #0
 801fdcc:	e7f7      	b.n	801fdbe <__swsetup_r+0xba>
 801fdce:	bf00      	nop
 801fdd0:	20000108 	.word	0x20000108
 801fdd4:	08026920 	.word	0x08026920
 801fdd8:	08026940 	.word	0x08026940
 801fddc:	08026900 	.word	0x08026900

0801fde0 <__register_exitproc>:
 801fde0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fde4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801fea0 <__register_exitproc+0xc0>
 801fde8:	4606      	mov	r6, r0
 801fdea:	f8d8 0000 	ldr.w	r0, [r8]
 801fdee:	461f      	mov	r7, r3
 801fdf0:	460d      	mov	r5, r1
 801fdf2:	4691      	mov	r9, r2
 801fdf4:	f7fe fc17 	bl	801e626 <__retarget_lock_acquire_recursive>
 801fdf8:	4b25      	ldr	r3, [pc, #148]	; (801fe90 <__register_exitproc+0xb0>)
 801fdfa:	681c      	ldr	r4, [r3, #0]
 801fdfc:	b934      	cbnz	r4, 801fe0c <__register_exitproc+0x2c>
 801fdfe:	4c25      	ldr	r4, [pc, #148]	; (801fe94 <__register_exitproc+0xb4>)
 801fe00:	601c      	str	r4, [r3, #0]
 801fe02:	4b25      	ldr	r3, [pc, #148]	; (801fe98 <__register_exitproc+0xb8>)
 801fe04:	b113      	cbz	r3, 801fe0c <__register_exitproc+0x2c>
 801fe06:	681b      	ldr	r3, [r3, #0]
 801fe08:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801fe0c:	6863      	ldr	r3, [r4, #4]
 801fe0e:	2b1f      	cmp	r3, #31
 801fe10:	dd07      	ble.n	801fe22 <__register_exitproc+0x42>
 801fe12:	f8d8 0000 	ldr.w	r0, [r8]
 801fe16:	f7fe fc08 	bl	801e62a <__retarget_lock_release_recursive>
 801fe1a:	f04f 30ff 	mov.w	r0, #4294967295
 801fe1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fe22:	b34e      	cbz	r6, 801fe78 <__register_exitproc+0x98>
 801fe24:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801fe28:	b988      	cbnz	r0, 801fe4e <__register_exitproc+0x6e>
 801fe2a:	4b1c      	ldr	r3, [pc, #112]	; (801fe9c <__register_exitproc+0xbc>)
 801fe2c:	b923      	cbnz	r3, 801fe38 <__register_exitproc+0x58>
 801fe2e:	f8d8 0000 	ldr.w	r0, [r8]
 801fe32:	f7fe fbf9 	bl	801e628 <__retarget_lock_release>
 801fe36:	e7f0      	b.n	801fe1a <__register_exitproc+0x3a>
 801fe38:	f44f 7084 	mov.w	r0, #264	; 0x108
 801fe3c:	f7fe fc5a 	bl	801e6f4 <malloc>
 801fe40:	2800      	cmp	r0, #0
 801fe42:	d0f4      	beq.n	801fe2e <__register_exitproc+0x4e>
 801fe44:	2300      	movs	r3, #0
 801fe46:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801fe4a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801fe4e:	6863      	ldr	r3, [r4, #4]
 801fe50:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801fe54:	2201      	movs	r2, #1
 801fe56:	409a      	lsls	r2, r3
 801fe58:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801fe5c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801fe60:	4313      	orrs	r3, r2
 801fe62:	2e02      	cmp	r6, #2
 801fe64:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801fe68:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801fe6c:	bf02      	ittt	eq
 801fe6e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801fe72:	431a      	orreq	r2, r3
 801fe74:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 801fe78:	6863      	ldr	r3, [r4, #4]
 801fe7a:	f8d8 0000 	ldr.w	r0, [r8]
 801fe7e:	1c5a      	adds	r2, r3, #1
 801fe80:	3302      	adds	r3, #2
 801fe82:	6062      	str	r2, [r4, #4]
 801fe84:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801fe88:	f7fe fbcf 	bl	801e62a <__retarget_lock_release_recursive>
 801fe8c:	2000      	movs	r0, #0
 801fe8e:	e7c6      	b.n	801fe1e <__register_exitproc+0x3e>
 801fe90:	20000e1c 	.word	0x20000e1c
 801fe94:	20000d90 	.word	0x20000d90
 801fe98:	00000000 	.word	0x00000000
 801fe9c:	0801e6f5 	.word	0x0801e6f5
 801fea0:	20000174 	.word	0x20000174

0801fea4 <abs>:
 801fea4:	2800      	cmp	r0, #0
 801fea6:	bfb8      	it	lt
 801fea8:	4240      	neglt	r0, r0
 801feaa:	4770      	bx	lr

0801feac <__assert_func>:
 801feac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801feae:	4614      	mov	r4, r2
 801feb0:	461a      	mov	r2, r3
 801feb2:	4b09      	ldr	r3, [pc, #36]	; (801fed8 <__assert_func+0x2c>)
 801feb4:	681b      	ldr	r3, [r3, #0]
 801feb6:	4605      	mov	r5, r0
 801feb8:	68d8      	ldr	r0, [r3, #12]
 801feba:	b14c      	cbz	r4, 801fed0 <__assert_func+0x24>
 801febc:	4b07      	ldr	r3, [pc, #28]	; (801fedc <__assert_func+0x30>)
 801febe:	9100      	str	r1, [sp, #0]
 801fec0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801fec4:	4906      	ldr	r1, [pc, #24]	; (801fee0 <__assert_func+0x34>)
 801fec6:	462b      	mov	r3, r5
 801fec8:	f000 f854 	bl	801ff74 <fiprintf>
 801fecc:	f7fd fe3c 	bl	801db48 <abort>
 801fed0:	4b04      	ldr	r3, [pc, #16]	; (801fee4 <__assert_func+0x38>)
 801fed2:	461c      	mov	r4, r3
 801fed4:	e7f3      	b.n	801febe <__assert_func+0x12>
 801fed6:	bf00      	nop
 801fed8:	20000108 	.word	0x20000108
 801fedc:	08026d58 	.word	0x08026d58
 801fee0:	08026d65 	.word	0x08026d65
 801fee4:	08026d93 	.word	0x08026d93

0801fee8 <_close_r>:
 801fee8:	b538      	push	{r3, r4, r5, lr}
 801feea:	4d06      	ldr	r5, [pc, #24]	; (801ff04 <_close_r+0x1c>)
 801feec:	2300      	movs	r3, #0
 801feee:	4604      	mov	r4, r0
 801fef0:	4608      	mov	r0, r1
 801fef2:	602b      	str	r3, [r5, #0]
 801fef4:	f7e0 ff88 	bl	8000e08 <_close>
 801fef8:	1c43      	adds	r3, r0, #1
 801fefa:	d102      	bne.n	801ff02 <_close_r+0x1a>
 801fefc:	682b      	ldr	r3, [r5, #0]
 801fefe:	b103      	cbz	r3, 801ff02 <_close_r+0x1a>
 801ff00:	6023      	str	r3, [r4, #0]
 801ff02:	bd38      	pop	{r3, r4, r5, pc}
 801ff04:	20000e30 	.word	0x20000e30

0801ff08 <__sflags>:
 801ff08:	780b      	ldrb	r3, [r1, #0]
 801ff0a:	2b72      	cmp	r3, #114	; 0x72
 801ff0c:	b530      	push	{r4, r5, lr}
 801ff0e:	d022      	beq.n	801ff56 <__sflags+0x4e>
 801ff10:	2b77      	cmp	r3, #119	; 0x77
 801ff12:	d024      	beq.n	801ff5e <__sflags+0x56>
 801ff14:	2b61      	cmp	r3, #97	; 0x61
 801ff16:	d027      	beq.n	801ff68 <__sflags+0x60>
 801ff18:	2316      	movs	r3, #22
 801ff1a:	6003      	str	r3, [r0, #0]
 801ff1c:	2000      	movs	r0, #0
 801ff1e:	bd30      	pop	{r4, r5, pc}
 801ff20:	2d62      	cmp	r5, #98	; 0x62
 801ff22:	d012      	beq.n	801ff4a <__sflags+0x42>
 801ff24:	2d78      	cmp	r5, #120	; 0x78
 801ff26:	d013      	beq.n	801ff50 <__sflags+0x48>
 801ff28:	2d2b      	cmp	r5, #43	; 0x2b
 801ff2a:	d107      	bne.n	801ff3c <__sflags+0x34>
 801ff2c:	f020 001c 	bic.w	r0, r0, #28
 801ff30:	f023 0303 	bic.w	r3, r3, #3
 801ff34:	f040 0010 	orr.w	r0, r0, #16
 801ff38:	f043 0302 	orr.w	r3, r3, #2
 801ff3c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801ff40:	2d00      	cmp	r5, #0
 801ff42:	d1ed      	bne.n	801ff20 <__sflags+0x18>
 801ff44:	4323      	orrs	r3, r4
 801ff46:	6013      	str	r3, [r2, #0]
 801ff48:	e7e9      	b.n	801ff1e <__sflags+0x16>
 801ff4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801ff4e:	e7f5      	b.n	801ff3c <__sflags+0x34>
 801ff50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801ff54:	e7f2      	b.n	801ff3c <__sflags+0x34>
 801ff56:	2400      	movs	r4, #0
 801ff58:	4623      	mov	r3, r4
 801ff5a:	2004      	movs	r0, #4
 801ff5c:	e7ee      	b.n	801ff3c <__sflags+0x34>
 801ff5e:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 801ff62:	2301      	movs	r3, #1
 801ff64:	2008      	movs	r0, #8
 801ff66:	e7e9      	b.n	801ff3c <__sflags+0x34>
 801ff68:	f44f 7402 	mov.w	r4, #520	; 0x208
 801ff6c:	2301      	movs	r3, #1
 801ff6e:	f44f 7084 	mov.w	r0, #264	; 0x108
 801ff72:	e7e3      	b.n	801ff3c <__sflags+0x34>

0801ff74 <fiprintf>:
 801ff74:	b40e      	push	{r1, r2, r3}
 801ff76:	b503      	push	{r0, r1, lr}
 801ff78:	4601      	mov	r1, r0
 801ff7a:	ab03      	add	r3, sp, #12
 801ff7c:	4805      	ldr	r0, [pc, #20]	; (801ff94 <fiprintf+0x20>)
 801ff7e:	f853 2b04 	ldr.w	r2, [r3], #4
 801ff82:	6800      	ldr	r0, [r0, #0]
 801ff84:	9301      	str	r3, [sp, #4]
 801ff86:	f000 faff 	bl	8020588 <_vfiprintf_r>
 801ff8a:	b002      	add	sp, #8
 801ff8c:	f85d eb04 	ldr.w	lr, [sp], #4
 801ff90:	b003      	add	sp, #12
 801ff92:	4770      	bx	lr
 801ff94:	20000108 	.word	0x20000108

0801ff98 <_fstat_r>:
 801ff98:	b538      	push	{r3, r4, r5, lr}
 801ff9a:	4d07      	ldr	r5, [pc, #28]	; (801ffb8 <_fstat_r+0x20>)
 801ff9c:	2300      	movs	r3, #0
 801ff9e:	4604      	mov	r4, r0
 801ffa0:	4608      	mov	r0, r1
 801ffa2:	4611      	mov	r1, r2
 801ffa4:	602b      	str	r3, [r5, #0]
 801ffa6:	f7e0 ff3b 	bl	8000e20 <_fstat>
 801ffaa:	1c43      	adds	r3, r0, #1
 801ffac:	d102      	bne.n	801ffb4 <_fstat_r+0x1c>
 801ffae:	682b      	ldr	r3, [r5, #0]
 801ffb0:	b103      	cbz	r3, 801ffb4 <_fstat_r+0x1c>
 801ffb2:	6023      	str	r3, [r4, #0]
 801ffb4:	bd38      	pop	{r3, r4, r5, pc}
 801ffb6:	bf00      	nop
 801ffb8:	20000e30 	.word	0x20000e30

0801ffbc <_findenv_r>:
 801ffbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ffc0:	4607      	mov	r7, r0
 801ffc2:	4689      	mov	r9, r1
 801ffc4:	4616      	mov	r6, r2
 801ffc6:	f000 fe85 	bl	8020cd4 <__env_lock>
 801ffca:	4b18      	ldr	r3, [pc, #96]	; (802002c <_findenv_r+0x70>)
 801ffcc:	681c      	ldr	r4, [r3, #0]
 801ffce:	469a      	mov	sl, r3
 801ffd0:	b134      	cbz	r4, 801ffe0 <_findenv_r+0x24>
 801ffd2:	464b      	mov	r3, r9
 801ffd4:	4698      	mov	r8, r3
 801ffd6:	f813 1b01 	ldrb.w	r1, [r3], #1
 801ffda:	b139      	cbz	r1, 801ffec <_findenv_r+0x30>
 801ffdc:	293d      	cmp	r1, #61	; 0x3d
 801ffde:	d1f9      	bne.n	801ffd4 <_findenv_r+0x18>
 801ffe0:	4638      	mov	r0, r7
 801ffe2:	f000 fe7d 	bl	8020ce0 <__env_unlock>
 801ffe6:	2000      	movs	r0, #0
 801ffe8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ffec:	eba8 0809 	sub.w	r8, r8, r9
 801fff0:	46a3      	mov	fp, r4
 801fff2:	f854 0b04 	ldr.w	r0, [r4], #4
 801fff6:	2800      	cmp	r0, #0
 801fff8:	d0f2      	beq.n	801ffe0 <_findenv_r+0x24>
 801fffa:	4642      	mov	r2, r8
 801fffc:	4649      	mov	r1, r9
 801fffe:	f000 fe49 	bl	8020c94 <strncmp>
 8020002:	2800      	cmp	r0, #0
 8020004:	d1f4      	bne.n	801fff0 <_findenv_r+0x34>
 8020006:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802000a:	eb03 0508 	add.w	r5, r3, r8
 802000e:	f813 3008 	ldrb.w	r3, [r3, r8]
 8020012:	2b3d      	cmp	r3, #61	; 0x3d
 8020014:	d1ec      	bne.n	801fff0 <_findenv_r+0x34>
 8020016:	f8da 3000 	ldr.w	r3, [sl]
 802001a:	ebab 0303 	sub.w	r3, fp, r3
 802001e:	109b      	asrs	r3, r3, #2
 8020020:	4638      	mov	r0, r7
 8020022:	6033      	str	r3, [r6, #0]
 8020024:	f000 fe5c 	bl	8020ce0 <__env_unlock>
 8020028:	1c68      	adds	r0, r5, #1
 802002a:	e7dd      	b.n	801ffe8 <_findenv_r+0x2c>
 802002c:	20000000 	.word	0x20000000

08020030 <_getenv_r>:
 8020030:	b507      	push	{r0, r1, r2, lr}
 8020032:	aa01      	add	r2, sp, #4
 8020034:	f7ff ffc2 	bl	801ffbc <_findenv_r>
 8020038:	b003      	add	sp, #12
 802003a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08020040 <__gettzinfo>:
 8020040:	4800      	ldr	r0, [pc, #0]	; (8020044 <__gettzinfo+0x4>)
 8020042:	4770      	bx	lr
 8020044:	20000178 	.word	0x20000178

08020048 <gmtime_r>:
 8020048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802004c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8020050:	460c      	mov	r4, r1
 8020052:	4a51      	ldr	r2, [pc, #324]	; (8020198 <gmtime_r+0x150>)
 8020054:	2300      	movs	r3, #0
 8020056:	4630      	mov	r0, r6
 8020058:	4639      	mov	r1, r7
 802005a:	f7e0 fbab 	bl	80007b4 <__aeabi_ldivmod>
 802005e:	4639      	mov	r1, r7
 8020060:	4605      	mov	r5, r0
 8020062:	4a4d      	ldr	r2, [pc, #308]	; (8020198 <gmtime_r+0x150>)
 8020064:	4630      	mov	r0, r6
 8020066:	2300      	movs	r3, #0
 8020068:	f7e0 fba4 	bl	80007b4 <__aeabi_ldivmod>
 802006c:	2a00      	cmp	r2, #0
 802006e:	bfbc      	itt	lt
 8020070:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8020074:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8020078:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802007c:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8020080:	fbb2 f3f1 	udiv	r3, r2, r1
 8020084:	fb01 2213 	mls	r2, r1, r3, r2
 8020088:	f04f 013c 	mov.w	r1, #60	; 0x3c
 802008c:	bfac      	ite	ge
 802008e:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 8020092:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 8020096:	60a3      	str	r3, [r4, #8]
 8020098:	fbb2 f3f1 	udiv	r3, r2, r1
 802009c:	fb01 2213 	mls	r2, r1, r3, r2
 80200a0:	6063      	str	r3, [r4, #4]
 80200a2:	6022      	str	r2, [r4, #0]
 80200a4:	1cc3      	adds	r3, r0, #3
 80200a6:	2207      	movs	r2, #7
 80200a8:	fb93 f2f2 	sdiv	r2, r3, r2
 80200ac:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80200b0:	1a9b      	subs	r3, r3, r2
 80200b2:	bf48      	it	mi
 80200b4:	3307      	addmi	r3, #7
 80200b6:	2800      	cmp	r0, #0
 80200b8:	61a3      	str	r3, [r4, #24]
 80200ba:	bfb8      	it	lt
 80200bc:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 80200c0:	4936      	ldr	r1, [pc, #216]	; (802019c <gmtime_r+0x154>)
 80200c2:	bfae      	itee	ge
 80200c4:	fb90 f1f1 	sdivge	r1, r0, r1
 80200c8:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 80200cc:	fb93 f1f1 	sdivlt	r1, r3, r1
 80200d0:	4b33      	ldr	r3, [pc, #204]	; (80201a0 <gmtime_r+0x158>)
 80200d2:	fb03 0001 	mla	r0, r3, r1, r0
 80200d6:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80200da:	fbb0 f2f2 	udiv	r2, r0, r2
 80200de:	4402      	add	r2, r0
 80200e0:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 80200e4:	fbb0 f3fc 	udiv	r3, r0, ip
 80200e8:	1ad2      	subs	r2, r2, r3
 80200ea:	f240 176d 	movw	r7, #365	; 0x16d
 80200ee:	4b2d      	ldr	r3, [pc, #180]	; (80201a4 <gmtime_r+0x15c>)
 80200f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80200f4:	2664      	movs	r6, #100	; 0x64
 80200f6:	1ad3      	subs	r3, r2, r3
 80200f8:	fbb3 f5f7 	udiv	r5, r3, r7
 80200fc:	fbb3 f3fc 	udiv	r3, r3, ip
 8020100:	fbb5 f2f6 	udiv	r2, r5, r6
 8020104:	1ad3      	subs	r3, r2, r3
 8020106:	4403      	add	r3, r0
 8020108:	fb07 3315 	mls	r3, r7, r5, r3
 802010c:	2099      	movs	r0, #153	; 0x99
 802010e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8020112:	f10c 0c02 	add.w	ip, ip, #2
 8020116:	f103 0e01 	add.w	lr, r3, #1
 802011a:	fbbc f7f0 	udiv	r7, ip, r0
 802011e:	4378      	muls	r0, r7
 8020120:	3002      	adds	r0, #2
 8020122:	f04f 0805 	mov.w	r8, #5
 8020126:	fbb0 f0f8 	udiv	r0, r0, r8
 802012a:	ebae 0000 	sub.w	r0, lr, r0
 802012e:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 8020132:	45f4      	cmp	ip, lr
 8020134:	bf94      	ite	ls
 8020136:	f04f 0c02 	movls.w	ip, #2
 802013a:	f06f 0c09 	mvnhi.w	ip, #9
 802013e:	4467      	add	r7, ip
 8020140:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8020144:	fb0c 5101 	mla	r1, ip, r1, r5
 8020148:	2f01      	cmp	r7, #1
 802014a:	bf98      	it	ls
 802014c:	3101      	addls	r1, #1
 802014e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8020152:	d30c      	bcc.n	802016e <gmtime_r+0x126>
 8020154:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8020158:	61e3      	str	r3, [r4, #28]
 802015a:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 802015e:	2300      	movs	r3, #0
 8020160:	60e0      	str	r0, [r4, #12]
 8020162:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8020166:	6223      	str	r3, [r4, #32]
 8020168:	4620      	mov	r0, r4
 802016a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802016e:	f015 0f03 	tst.w	r5, #3
 8020172:	d102      	bne.n	802017a <gmtime_r+0x132>
 8020174:	fb06 5212 	mls	r2, r6, r2, r5
 8020178:	b95a      	cbnz	r2, 8020192 <gmtime_r+0x14a>
 802017a:	f44f 76c8 	mov.w	r6, #400	; 0x190
 802017e:	fbb5 f2f6 	udiv	r2, r5, r6
 8020182:	fb06 5212 	mls	r2, r6, r2, r5
 8020186:	fab2 f282 	clz	r2, r2
 802018a:	0952      	lsrs	r2, r2, #5
 802018c:	333b      	adds	r3, #59	; 0x3b
 802018e:	4413      	add	r3, r2
 8020190:	e7e2      	b.n	8020158 <gmtime_r+0x110>
 8020192:	2201      	movs	r2, #1
 8020194:	e7fa      	b.n	802018c <gmtime_r+0x144>
 8020196:	bf00      	nop
 8020198:	00015180 	.word	0x00015180
 802019c:	00023ab1 	.word	0x00023ab1
 80201a0:	fffdc54f 	.word	0xfffdc54f
 80201a4:	00023ab0 	.word	0x00023ab0

080201a8 <_isatty_r>:
 80201a8:	b538      	push	{r3, r4, r5, lr}
 80201aa:	4d06      	ldr	r5, [pc, #24]	; (80201c4 <_isatty_r+0x1c>)
 80201ac:	2300      	movs	r3, #0
 80201ae:	4604      	mov	r4, r0
 80201b0:	4608      	mov	r0, r1
 80201b2:	602b      	str	r3, [r5, #0]
 80201b4:	f7e0 fe44 	bl	8000e40 <_isatty>
 80201b8:	1c43      	adds	r3, r0, #1
 80201ba:	d102      	bne.n	80201c2 <_isatty_r+0x1a>
 80201bc:	682b      	ldr	r3, [r5, #0]
 80201be:	b103      	cbz	r3, 80201c2 <_isatty_r+0x1a>
 80201c0:	6023      	str	r3, [r4, #0]
 80201c2:	bd38      	pop	{r3, r4, r5, pc}
 80201c4:	20000e30 	.word	0x20000e30

080201c8 <labs>:
 80201c8:	2800      	cmp	r0, #0
 80201ca:	bfb8      	it	lt
 80201cc:	4240      	neglt	r0, r0
 80201ce:	4770      	bx	lr

080201d0 <_lseek_r>:
 80201d0:	b538      	push	{r3, r4, r5, lr}
 80201d2:	4d07      	ldr	r5, [pc, #28]	; (80201f0 <_lseek_r+0x20>)
 80201d4:	4604      	mov	r4, r0
 80201d6:	4608      	mov	r0, r1
 80201d8:	4611      	mov	r1, r2
 80201da:	2200      	movs	r2, #0
 80201dc:	602a      	str	r2, [r5, #0]
 80201de:	461a      	mov	r2, r3
 80201e0:	f7e0 fe39 	bl	8000e56 <_lseek>
 80201e4:	1c43      	adds	r3, r0, #1
 80201e6:	d102      	bne.n	80201ee <_lseek_r+0x1e>
 80201e8:	682b      	ldr	r3, [r5, #0]
 80201ea:	b103      	cbz	r3, 80201ee <_lseek_r+0x1e>
 80201ec:	6023      	str	r3, [r4, #0]
 80201ee:	bd38      	pop	{r3, r4, r5, pc}
 80201f0:	20000e30 	.word	0x20000e30

080201f4 <__ascii_mbtowc>:
 80201f4:	b082      	sub	sp, #8
 80201f6:	b901      	cbnz	r1, 80201fa <__ascii_mbtowc+0x6>
 80201f8:	a901      	add	r1, sp, #4
 80201fa:	b142      	cbz	r2, 802020e <__ascii_mbtowc+0x1a>
 80201fc:	b14b      	cbz	r3, 8020212 <__ascii_mbtowc+0x1e>
 80201fe:	7813      	ldrb	r3, [r2, #0]
 8020200:	600b      	str	r3, [r1, #0]
 8020202:	7812      	ldrb	r2, [r2, #0]
 8020204:	1e10      	subs	r0, r2, #0
 8020206:	bf18      	it	ne
 8020208:	2001      	movne	r0, #1
 802020a:	b002      	add	sp, #8
 802020c:	4770      	bx	lr
 802020e:	4610      	mov	r0, r2
 8020210:	e7fb      	b.n	802020a <__ascii_mbtowc+0x16>
 8020212:	f06f 0001 	mvn.w	r0, #1
 8020216:	e7f8      	b.n	802020a <__ascii_mbtowc+0x16>

08020218 <__malloc_lock>:
 8020218:	4801      	ldr	r0, [pc, #4]	; (8020220 <__malloc_lock+0x8>)
 802021a:	f7fe ba04 	b.w	801e626 <__retarget_lock_acquire_recursive>
 802021e:	bf00      	nop
 8020220:	20000e28 	.word	0x20000e28

08020224 <__malloc_unlock>:
 8020224:	4801      	ldr	r0, [pc, #4]	; (802022c <__malloc_unlock+0x8>)
 8020226:	f7fe ba00 	b.w	801e62a <__retarget_lock_release_recursive>
 802022a:	bf00      	nop
 802022c:	20000e28 	.word	0x20000e28

08020230 <_realloc_r>:
 8020230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020232:	4607      	mov	r7, r0
 8020234:	4614      	mov	r4, r2
 8020236:	460e      	mov	r6, r1
 8020238:	b921      	cbnz	r1, 8020244 <_realloc_r+0x14>
 802023a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802023e:	4611      	mov	r1, r2
 8020240:	f7fe bade 	b.w	801e800 <_malloc_r>
 8020244:	b922      	cbnz	r2, 8020250 <_realloc_r+0x20>
 8020246:	f7fe fa8b 	bl	801e760 <_free_r>
 802024a:	4625      	mov	r5, r4
 802024c:	4628      	mov	r0, r5
 802024e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020250:	f000 fd66 	bl	8020d20 <_malloc_usable_size_r>
 8020254:	42a0      	cmp	r0, r4
 8020256:	d20f      	bcs.n	8020278 <_realloc_r+0x48>
 8020258:	4621      	mov	r1, r4
 802025a:	4638      	mov	r0, r7
 802025c:	f7fe fad0 	bl	801e800 <_malloc_r>
 8020260:	4605      	mov	r5, r0
 8020262:	2800      	cmp	r0, #0
 8020264:	d0f2      	beq.n	802024c <_realloc_r+0x1c>
 8020266:	4631      	mov	r1, r6
 8020268:	4622      	mov	r2, r4
 802026a:	f7fe fa53 	bl	801e714 <memcpy>
 802026e:	4631      	mov	r1, r6
 8020270:	4638      	mov	r0, r7
 8020272:	f7fe fa75 	bl	801e760 <_free_r>
 8020276:	e7e9      	b.n	802024c <_realloc_r+0x1c>
 8020278:	4635      	mov	r5, r6
 802027a:	e7e7      	b.n	802024c <_realloc_r+0x1c>

0802027c <__ssputs_r>:
 802027c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020280:	688e      	ldr	r6, [r1, #8]
 8020282:	429e      	cmp	r6, r3
 8020284:	4682      	mov	sl, r0
 8020286:	460c      	mov	r4, r1
 8020288:	4690      	mov	r8, r2
 802028a:	461f      	mov	r7, r3
 802028c:	d838      	bhi.n	8020300 <__ssputs_r+0x84>
 802028e:	898a      	ldrh	r2, [r1, #12]
 8020290:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8020294:	d032      	beq.n	80202fc <__ssputs_r+0x80>
 8020296:	6825      	ldr	r5, [r4, #0]
 8020298:	6909      	ldr	r1, [r1, #16]
 802029a:	eba5 0901 	sub.w	r9, r5, r1
 802029e:	6965      	ldr	r5, [r4, #20]
 80202a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80202a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80202a8:	3301      	adds	r3, #1
 80202aa:	444b      	add	r3, r9
 80202ac:	106d      	asrs	r5, r5, #1
 80202ae:	429d      	cmp	r5, r3
 80202b0:	bf38      	it	cc
 80202b2:	461d      	movcc	r5, r3
 80202b4:	0553      	lsls	r3, r2, #21
 80202b6:	d531      	bpl.n	802031c <__ssputs_r+0xa0>
 80202b8:	4629      	mov	r1, r5
 80202ba:	f7fe faa1 	bl	801e800 <_malloc_r>
 80202be:	4606      	mov	r6, r0
 80202c0:	b950      	cbnz	r0, 80202d8 <__ssputs_r+0x5c>
 80202c2:	230c      	movs	r3, #12
 80202c4:	f8ca 3000 	str.w	r3, [sl]
 80202c8:	89a3      	ldrh	r3, [r4, #12]
 80202ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80202ce:	81a3      	strh	r3, [r4, #12]
 80202d0:	f04f 30ff 	mov.w	r0, #4294967295
 80202d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80202d8:	6921      	ldr	r1, [r4, #16]
 80202da:	464a      	mov	r2, r9
 80202dc:	f7fe fa1a 	bl	801e714 <memcpy>
 80202e0:	89a3      	ldrh	r3, [r4, #12]
 80202e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80202e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80202ea:	81a3      	strh	r3, [r4, #12]
 80202ec:	6126      	str	r6, [r4, #16]
 80202ee:	6165      	str	r5, [r4, #20]
 80202f0:	444e      	add	r6, r9
 80202f2:	eba5 0509 	sub.w	r5, r5, r9
 80202f6:	6026      	str	r6, [r4, #0]
 80202f8:	60a5      	str	r5, [r4, #8]
 80202fa:	463e      	mov	r6, r7
 80202fc:	42be      	cmp	r6, r7
 80202fe:	d900      	bls.n	8020302 <__ssputs_r+0x86>
 8020300:	463e      	mov	r6, r7
 8020302:	4632      	mov	r2, r6
 8020304:	6820      	ldr	r0, [r4, #0]
 8020306:	4641      	mov	r1, r8
 8020308:	f000 fcf0 	bl	8020cec <memmove>
 802030c:	68a3      	ldr	r3, [r4, #8]
 802030e:	6822      	ldr	r2, [r4, #0]
 8020310:	1b9b      	subs	r3, r3, r6
 8020312:	4432      	add	r2, r6
 8020314:	60a3      	str	r3, [r4, #8]
 8020316:	6022      	str	r2, [r4, #0]
 8020318:	2000      	movs	r0, #0
 802031a:	e7db      	b.n	80202d4 <__ssputs_r+0x58>
 802031c:	462a      	mov	r2, r5
 802031e:	f7ff ff87 	bl	8020230 <_realloc_r>
 8020322:	4606      	mov	r6, r0
 8020324:	2800      	cmp	r0, #0
 8020326:	d1e1      	bne.n	80202ec <__ssputs_r+0x70>
 8020328:	6921      	ldr	r1, [r4, #16]
 802032a:	4650      	mov	r0, sl
 802032c:	f7fe fa18 	bl	801e760 <_free_r>
 8020330:	e7c7      	b.n	80202c2 <__ssputs_r+0x46>
	...

08020334 <_svfiprintf_r>:
 8020334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020338:	4698      	mov	r8, r3
 802033a:	898b      	ldrh	r3, [r1, #12]
 802033c:	061b      	lsls	r3, r3, #24
 802033e:	b09d      	sub	sp, #116	; 0x74
 8020340:	4607      	mov	r7, r0
 8020342:	460d      	mov	r5, r1
 8020344:	4614      	mov	r4, r2
 8020346:	d50e      	bpl.n	8020366 <_svfiprintf_r+0x32>
 8020348:	690b      	ldr	r3, [r1, #16]
 802034a:	b963      	cbnz	r3, 8020366 <_svfiprintf_r+0x32>
 802034c:	2140      	movs	r1, #64	; 0x40
 802034e:	f7fe fa57 	bl	801e800 <_malloc_r>
 8020352:	6028      	str	r0, [r5, #0]
 8020354:	6128      	str	r0, [r5, #16]
 8020356:	b920      	cbnz	r0, 8020362 <_svfiprintf_r+0x2e>
 8020358:	230c      	movs	r3, #12
 802035a:	603b      	str	r3, [r7, #0]
 802035c:	f04f 30ff 	mov.w	r0, #4294967295
 8020360:	e0d1      	b.n	8020506 <_svfiprintf_r+0x1d2>
 8020362:	2340      	movs	r3, #64	; 0x40
 8020364:	616b      	str	r3, [r5, #20]
 8020366:	2300      	movs	r3, #0
 8020368:	9309      	str	r3, [sp, #36]	; 0x24
 802036a:	2320      	movs	r3, #32
 802036c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020370:	f8cd 800c 	str.w	r8, [sp, #12]
 8020374:	2330      	movs	r3, #48	; 0x30
 8020376:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8020520 <_svfiprintf_r+0x1ec>
 802037a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802037e:	f04f 0901 	mov.w	r9, #1
 8020382:	4623      	mov	r3, r4
 8020384:	469a      	mov	sl, r3
 8020386:	f813 2b01 	ldrb.w	r2, [r3], #1
 802038a:	b10a      	cbz	r2, 8020390 <_svfiprintf_r+0x5c>
 802038c:	2a25      	cmp	r2, #37	; 0x25
 802038e:	d1f9      	bne.n	8020384 <_svfiprintf_r+0x50>
 8020390:	ebba 0b04 	subs.w	fp, sl, r4
 8020394:	d00b      	beq.n	80203ae <_svfiprintf_r+0x7a>
 8020396:	465b      	mov	r3, fp
 8020398:	4622      	mov	r2, r4
 802039a:	4629      	mov	r1, r5
 802039c:	4638      	mov	r0, r7
 802039e:	f7ff ff6d 	bl	802027c <__ssputs_r>
 80203a2:	3001      	adds	r0, #1
 80203a4:	f000 80aa 	beq.w	80204fc <_svfiprintf_r+0x1c8>
 80203a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80203aa:	445a      	add	r2, fp
 80203ac:	9209      	str	r2, [sp, #36]	; 0x24
 80203ae:	f89a 3000 	ldrb.w	r3, [sl]
 80203b2:	2b00      	cmp	r3, #0
 80203b4:	f000 80a2 	beq.w	80204fc <_svfiprintf_r+0x1c8>
 80203b8:	2300      	movs	r3, #0
 80203ba:	f04f 32ff 	mov.w	r2, #4294967295
 80203be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80203c2:	f10a 0a01 	add.w	sl, sl, #1
 80203c6:	9304      	str	r3, [sp, #16]
 80203c8:	9307      	str	r3, [sp, #28]
 80203ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80203ce:	931a      	str	r3, [sp, #104]	; 0x68
 80203d0:	4654      	mov	r4, sl
 80203d2:	2205      	movs	r2, #5
 80203d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80203d8:	4851      	ldr	r0, [pc, #324]	; (8020520 <_svfiprintf_r+0x1ec>)
 80203da:	f7df ff41 	bl	8000260 <memchr>
 80203de:	9a04      	ldr	r2, [sp, #16]
 80203e0:	b9d8      	cbnz	r0, 802041a <_svfiprintf_r+0xe6>
 80203e2:	06d0      	lsls	r0, r2, #27
 80203e4:	bf44      	itt	mi
 80203e6:	2320      	movmi	r3, #32
 80203e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80203ec:	0711      	lsls	r1, r2, #28
 80203ee:	bf44      	itt	mi
 80203f0:	232b      	movmi	r3, #43	; 0x2b
 80203f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80203f6:	f89a 3000 	ldrb.w	r3, [sl]
 80203fa:	2b2a      	cmp	r3, #42	; 0x2a
 80203fc:	d015      	beq.n	802042a <_svfiprintf_r+0xf6>
 80203fe:	9a07      	ldr	r2, [sp, #28]
 8020400:	4654      	mov	r4, sl
 8020402:	2000      	movs	r0, #0
 8020404:	f04f 0c0a 	mov.w	ip, #10
 8020408:	4621      	mov	r1, r4
 802040a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802040e:	3b30      	subs	r3, #48	; 0x30
 8020410:	2b09      	cmp	r3, #9
 8020412:	d94e      	bls.n	80204b2 <_svfiprintf_r+0x17e>
 8020414:	b1b0      	cbz	r0, 8020444 <_svfiprintf_r+0x110>
 8020416:	9207      	str	r2, [sp, #28]
 8020418:	e014      	b.n	8020444 <_svfiprintf_r+0x110>
 802041a:	eba0 0308 	sub.w	r3, r0, r8
 802041e:	fa09 f303 	lsl.w	r3, r9, r3
 8020422:	4313      	orrs	r3, r2
 8020424:	9304      	str	r3, [sp, #16]
 8020426:	46a2      	mov	sl, r4
 8020428:	e7d2      	b.n	80203d0 <_svfiprintf_r+0x9c>
 802042a:	9b03      	ldr	r3, [sp, #12]
 802042c:	1d19      	adds	r1, r3, #4
 802042e:	681b      	ldr	r3, [r3, #0]
 8020430:	9103      	str	r1, [sp, #12]
 8020432:	2b00      	cmp	r3, #0
 8020434:	bfbb      	ittet	lt
 8020436:	425b      	neglt	r3, r3
 8020438:	f042 0202 	orrlt.w	r2, r2, #2
 802043c:	9307      	strge	r3, [sp, #28]
 802043e:	9307      	strlt	r3, [sp, #28]
 8020440:	bfb8      	it	lt
 8020442:	9204      	strlt	r2, [sp, #16]
 8020444:	7823      	ldrb	r3, [r4, #0]
 8020446:	2b2e      	cmp	r3, #46	; 0x2e
 8020448:	d10c      	bne.n	8020464 <_svfiprintf_r+0x130>
 802044a:	7863      	ldrb	r3, [r4, #1]
 802044c:	2b2a      	cmp	r3, #42	; 0x2a
 802044e:	d135      	bne.n	80204bc <_svfiprintf_r+0x188>
 8020450:	9b03      	ldr	r3, [sp, #12]
 8020452:	1d1a      	adds	r2, r3, #4
 8020454:	681b      	ldr	r3, [r3, #0]
 8020456:	9203      	str	r2, [sp, #12]
 8020458:	2b00      	cmp	r3, #0
 802045a:	bfb8      	it	lt
 802045c:	f04f 33ff 	movlt.w	r3, #4294967295
 8020460:	3402      	adds	r4, #2
 8020462:	9305      	str	r3, [sp, #20]
 8020464:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8020530 <_svfiprintf_r+0x1fc>
 8020468:	7821      	ldrb	r1, [r4, #0]
 802046a:	2203      	movs	r2, #3
 802046c:	4650      	mov	r0, sl
 802046e:	f7df fef7 	bl	8000260 <memchr>
 8020472:	b140      	cbz	r0, 8020486 <_svfiprintf_r+0x152>
 8020474:	2340      	movs	r3, #64	; 0x40
 8020476:	eba0 000a 	sub.w	r0, r0, sl
 802047a:	fa03 f000 	lsl.w	r0, r3, r0
 802047e:	9b04      	ldr	r3, [sp, #16]
 8020480:	4303      	orrs	r3, r0
 8020482:	3401      	adds	r4, #1
 8020484:	9304      	str	r3, [sp, #16]
 8020486:	f814 1b01 	ldrb.w	r1, [r4], #1
 802048a:	4826      	ldr	r0, [pc, #152]	; (8020524 <_svfiprintf_r+0x1f0>)
 802048c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020490:	2206      	movs	r2, #6
 8020492:	f7df fee5 	bl	8000260 <memchr>
 8020496:	2800      	cmp	r0, #0
 8020498:	d038      	beq.n	802050c <_svfiprintf_r+0x1d8>
 802049a:	4b23      	ldr	r3, [pc, #140]	; (8020528 <_svfiprintf_r+0x1f4>)
 802049c:	bb1b      	cbnz	r3, 80204e6 <_svfiprintf_r+0x1b2>
 802049e:	9b03      	ldr	r3, [sp, #12]
 80204a0:	3307      	adds	r3, #7
 80204a2:	f023 0307 	bic.w	r3, r3, #7
 80204a6:	3308      	adds	r3, #8
 80204a8:	9303      	str	r3, [sp, #12]
 80204aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80204ac:	4433      	add	r3, r6
 80204ae:	9309      	str	r3, [sp, #36]	; 0x24
 80204b0:	e767      	b.n	8020382 <_svfiprintf_r+0x4e>
 80204b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80204b6:	460c      	mov	r4, r1
 80204b8:	2001      	movs	r0, #1
 80204ba:	e7a5      	b.n	8020408 <_svfiprintf_r+0xd4>
 80204bc:	2300      	movs	r3, #0
 80204be:	3401      	adds	r4, #1
 80204c0:	9305      	str	r3, [sp, #20]
 80204c2:	4619      	mov	r1, r3
 80204c4:	f04f 0c0a 	mov.w	ip, #10
 80204c8:	4620      	mov	r0, r4
 80204ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80204ce:	3a30      	subs	r2, #48	; 0x30
 80204d0:	2a09      	cmp	r2, #9
 80204d2:	d903      	bls.n	80204dc <_svfiprintf_r+0x1a8>
 80204d4:	2b00      	cmp	r3, #0
 80204d6:	d0c5      	beq.n	8020464 <_svfiprintf_r+0x130>
 80204d8:	9105      	str	r1, [sp, #20]
 80204da:	e7c3      	b.n	8020464 <_svfiprintf_r+0x130>
 80204dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80204e0:	4604      	mov	r4, r0
 80204e2:	2301      	movs	r3, #1
 80204e4:	e7f0      	b.n	80204c8 <_svfiprintf_r+0x194>
 80204e6:	ab03      	add	r3, sp, #12
 80204e8:	9300      	str	r3, [sp, #0]
 80204ea:	462a      	mov	r2, r5
 80204ec:	4b0f      	ldr	r3, [pc, #60]	; (802052c <_svfiprintf_r+0x1f8>)
 80204ee:	a904      	add	r1, sp, #16
 80204f0:	4638      	mov	r0, r7
 80204f2:	f3af 8000 	nop.w
 80204f6:	1c42      	adds	r2, r0, #1
 80204f8:	4606      	mov	r6, r0
 80204fa:	d1d6      	bne.n	80204aa <_svfiprintf_r+0x176>
 80204fc:	89ab      	ldrh	r3, [r5, #12]
 80204fe:	065b      	lsls	r3, r3, #25
 8020500:	f53f af2c 	bmi.w	802035c <_svfiprintf_r+0x28>
 8020504:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020506:	b01d      	add	sp, #116	; 0x74
 8020508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802050c:	ab03      	add	r3, sp, #12
 802050e:	9300      	str	r3, [sp, #0]
 8020510:	462a      	mov	r2, r5
 8020512:	4b06      	ldr	r3, [pc, #24]	; (802052c <_svfiprintf_r+0x1f8>)
 8020514:	a904      	add	r1, sp, #16
 8020516:	4638      	mov	r0, r7
 8020518:	f000 f9d4 	bl	80208c4 <_printf_i>
 802051c:	e7eb      	b.n	80204f6 <_svfiprintf_r+0x1c2>
 802051e:	bf00      	nop
 8020520:	08026e9f 	.word	0x08026e9f
 8020524:	08026ea9 	.word	0x08026ea9
 8020528:	00000000 	.word	0x00000000
 802052c:	0802027d 	.word	0x0802027d
 8020530:	08026ea5 	.word	0x08026ea5

08020534 <__sfputc_r>:
 8020534:	6893      	ldr	r3, [r2, #8]
 8020536:	3b01      	subs	r3, #1
 8020538:	2b00      	cmp	r3, #0
 802053a:	b410      	push	{r4}
 802053c:	6093      	str	r3, [r2, #8]
 802053e:	da08      	bge.n	8020552 <__sfputc_r+0x1e>
 8020540:	6994      	ldr	r4, [r2, #24]
 8020542:	42a3      	cmp	r3, r4
 8020544:	db01      	blt.n	802054a <__sfputc_r+0x16>
 8020546:	290a      	cmp	r1, #10
 8020548:	d103      	bne.n	8020552 <__sfputc_r+0x1e>
 802054a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802054e:	f7ff bb75 	b.w	801fc3c <__swbuf_r>
 8020552:	6813      	ldr	r3, [r2, #0]
 8020554:	1c58      	adds	r0, r3, #1
 8020556:	6010      	str	r0, [r2, #0]
 8020558:	7019      	strb	r1, [r3, #0]
 802055a:	4608      	mov	r0, r1
 802055c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020560:	4770      	bx	lr

08020562 <__sfputs_r>:
 8020562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020564:	4606      	mov	r6, r0
 8020566:	460f      	mov	r7, r1
 8020568:	4614      	mov	r4, r2
 802056a:	18d5      	adds	r5, r2, r3
 802056c:	42ac      	cmp	r4, r5
 802056e:	d101      	bne.n	8020574 <__sfputs_r+0x12>
 8020570:	2000      	movs	r0, #0
 8020572:	e007      	b.n	8020584 <__sfputs_r+0x22>
 8020574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020578:	463a      	mov	r2, r7
 802057a:	4630      	mov	r0, r6
 802057c:	f7ff ffda 	bl	8020534 <__sfputc_r>
 8020580:	1c43      	adds	r3, r0, #1
 8020582:	d1f3      	bne.n	802056c <__sfputs_r+0xa>
 8020584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020588 <_vfiprintf_r>:
 8020588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802058c:	460d      	mov	r5, r1
 802058e:	b09d      	sub	sp, #116	; 0x74
 8020590:	4614      	mov	r4, r2
 8020592:	4698      	mov	r8, r3
 8020594:	4606      	mov	r6, r0
 8020596:	b118      	cbz	r0, 80205a0 <_vfiprintf_r+0x18>
 8020598:	6983      	ldr	r3, [r0, #24]
 802059a:	b90b      	cbnz	r3, 80205a0 <_vfiprintf_r+0x18>
 802059c:	f7fd fc90 	bl	801dec0 <__sinit>
 80205a0:	4b89      	ldr	r3, [pc, #548]	; (80207c8 <_vfiprintf_r+0x240>)
 80205a2:	429d      	cmp	r5, r3
 80205a4:	d11b      	bne.n	80205de <_vfiprintf_r+0x56>
 80205a6:	6875      	ldr	r5, [r6, #4]
 80205a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80205aa:	07d9      	lsls	r1, r3, #31
 80205ac:	d405      	bmi.n	80205ba <_vfiprintf_r+0x32>
 80205ae:	89ab      	ldrh	r3, [r5, #12]
 80205b0:	059a      	lsls	r2, r3, #22
 80205b2:	d402      	bmi.n	80205ba <_vfiprintf_r+0x32>
 80205b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80205b6:	f7fe f836 	bl	801e626 <__retarget_lock_acquire_recursive>
 80205ba:	89ab      	ldrh	r3, [r5, #12]
 80205bc:	071b      	lsls	r3, r3, #28
 80205be:	d501      	bpl.n	80205c4 <_vfiprintf_r+0x3c>
 80205c0:	692b      	ldr	r3, [r5, #16]
 80205c2:	b9eb      	cbnz	r3, 8020600 <_vfiprintf_r+0x78>
 80205c4:	4629      	mov	r1, r5
 80205c6:	4630      	mov	r0, r6
 80205c8:	f7ff fb9c 	bl	801fd04 <__swsetup_r>
 80205cc:	b1c0      	cbz	r0, 8020600 <_vfiprintf_r+0x78>
 80205ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80205d0:	07dc      	lsls	r4, r3, #31
 80205d2:	d50e      	bpl.n	80205f2 <_vfiprintf_r+0x6a>
 80205d4:	f04f 30ff 	mov.w	r0, #4294967295
 80205d8:	b01d      	add	sp, #116	; 0x74
 80205da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80205de:	4b7b      	ldr	r3, [pc, #492]	; (80207cc <_vfiprintf_r+0x244>)
 80205e0:	429d      	cmp	r5, r3
 80205e2:	d101      	bne.n	80205e8 <_vfiprintf_r+0x60>
 80205e4:	68b5      	ldr	r5, [r6, #8]
 80205e6:	e7df      	b.n	80205a8 <_vfiprintf_r+0x20>
 80205e8:	4b79      	ldr	r3, [pc, #484]	; (80207d0 <_vfiprintf_r+0x248>)
 80205ea:	429d      	cmp	r5, r3
 80205ec:	bf08      	it	eq
 80205ee:	68f5      	ldreq	r5, [r6, #12]
 80205f0:	e7da      	b.n	80205a8 <_vfiprintf_r+0x20>
 80205f2:	89ab      	ldrh	r3, [r5, #12]
 80205f4:	0598      	lsls	r0, r3, #22
 80205f6:	d4ed      	bmi.n	80205d4 <_vfiprintf_r+0x4c>
 80205f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80205fa:	f7fe f816 	bl	801e62a <__retarget_lock_release_recursive>
 80205fe:	e7e9      	b.n	80205d4 <_vfiprintf_r+0x4c>
 8020600:	2300      	movs	r3, #0
 8020602:	9309      	str	r3, [sp, #36]	; 0x24
 8020604:	2320      	movs	r3, #32
 8020606:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802060a:	f8cd 800c 	str.w	r8, [sp, #12]
 802060e:	2330      	movs	r3, #48	; 0x30
 8020610:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80207d4 <_vfiprintf_r+0x24c>
 8020614:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020618:	f04f 0901 	mov.w	r9, #1
 802061c:	4623      	mov	r3, r4
 802061e:	469a      	mov	sl, r3
 8020620:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020624:	b10a      	cbz	r2, 802062a <_vfiprintf_r+0xa2>
 8020626:	2a25      	cmp	r2, #37	; 0x25
 8020628:	d1f9      	bne.n	802061e <_vfiprintf_r+0x96>
 802062a:	ebba 0b04 	subs.w	fp, sl, r4
 802062e:	d00b      	beq.n	8020648 <_vfiprintf_r+0xc0>
 8020630:	465b      	mov	r3, fp
 8020632:	4622      	mov	r2, r4
 8020634:	4629      	mov	r1, r5
 8020636:	4630      	mov	r0, r6
 8020638:	f7ff ff93 	bl	8020562 <__sfputs_r>
 802063c:	3001      	adds	r0, #1
 802063e:	f000 80aa 	beq.w	8020796 <_vfiprintf_r+0x20e>
 8020642:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020644:	445a      	add	r2, fp
 8020646:	9209      	str	r2, [sp, #36]	; 0x24
 8020648:	f89a 3000 	ldrb.w	r3, [sl]
 802064c:	2b00      	cmp	r3, #0
 802064e:	f000 80a2 	beq.w	8020796 <_vfiprintf_r+0x20e>
 8020652:	2300      	movs	r3, #0
 8020654:	f04f 32ff 	mov.w	r2, #4294967295
 8020658:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802065c:	f10a 0a01 	add.w	sl, sl, #1
 8020660:	9304      	str	r3, [sp, #16]
 8020662:	9307      	str	r3, [sp, #28]
 8020664:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020668:	931a      	str	r3, [sp, #104]	; 0x68
 802066a:	4654      	mov	r4, sl
 802066c:	2205      	movs	r2, #5
 802066e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020672:	4858      	ldr	r0, [pc, #352]	; (80207d4 <_vfiprintf_r+0x24c>)
 8020674:	f7df fdf4 	bl	8000260 <memchr>
 8020678:	9a04      	ldr	r2, [sp, #16]
 802067a:	b9d8      	cbnz	r0, 80206b4 <_vfiprintf_r+0x12c>
 802067c:	06d1      	lsls	r1, r2, #27
 802067e:	bf44      	itt	mi
 8020680:	2320      	movmi	r3, #32
 8020682:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020686:	0713      	lsls	r3, r2, #28
 8020688:	bf44      	itt	mi
 802068a:	232b      	movmi	r3, #43	; 0x2b
 802068c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020690:	f89a 3000 	ldrb.w	r3, [sl]
 8020694:	2b2a      	cmp	r3, #42	; 0x2a
 8020696:	d015      	beq.n	80206c4 <_vfiprintf_r+0x13c>
 8020698:	9a07      	ldr	r2, [sp, #28]
 802069a:	4654      	mov	r4, sl
 802069c:	2000      	movs	r0, #0
 802069e:	f04f 0c0a 	mov.w	ip, #10
 80206a2:	4621      	mov	r1, r4
 80206a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80206a8:	3b30      	subs	r3, #48	; 0x30
 80206aa:	2b09      	cmp	r3, #9
 80206ac:	d94e      	bls.n	802074c <_vfiprintf_r+0x1c4>
 80206ae:	b1b0      	cbz	r0, 80206de <_vfiprintf_r+0x156>
 80206b0:	9207      	str	r2, [sp, #28]
 80206b2:	e014      	b.n	80206de <_vfiprintf_r+0x156>
 80206b4:	eba0 0308 	sub.w	r3, r0, r8
 80206b8:	fa09 f303 	lsl.w	r3, r9, r3
 80206bc:	4313      	orrs	r3, r2
 80206be:	9304      	str	r3, [sp, #16]
 80206c0:	46a2      	mov	sl, r4
 80206c2:	e7d2      	b.n	802066a <_vfiprintf_r+0xe2>
 80206c4:	9b03      	ldr	r3, [sp, #12]
 80206c6:	1d19      	adds	r1, r3, #4
 80206c8:	681b      	ldr	r3, [r3, #0]
 80206ca:	9103      	str	r1, [sp, #12]
 80206cc:	2b00      	cmp	r3, #0
 80206ce:	bfbb      	ittet	lt
 80206d0:	425b      	neglt	r3, r3
 80206d2:	f042 0202 	orrlt.w	r2, r2, #2
 80206d6:	9307      	strge	r3, [sp, #28]
 80206d8:	9307      	strlt	r3, [sp, #28]
 80206da:	bfb8      	it	lt
 80206dc:	9204      	strlt	r2, [sp, #16]
 80206de:	7823      	ldrb	r3, [r4, #0]
 80206e0:	2b2e      	cmp	r3, #46	; 0x2e
 80206e2:	d10c      	bne.n	80206fe <_vfiprintf_r+0x176>
 80206e4:	7863      	ldrb	r3, [r4, #1]
 80206e6:	2b2a      	cmp	r3, #42	; 0x2a
 80206e8:	d135      	bne.n	8020756 <_vfiprintf_r+0x1ce>
 80206ea:	9b03      	ldr	r3, [sp, #12]
 80206ec:	1d1a      	adds	r2, r3, #4
 80206ee:	681b      	ldr	r3, [r3, #0]
 80206f0:	9203      	str	r2, [sp, #12]
 80206f2:	2b00      	cmp	r3, #0
 80206f4:	bfb8      	it	lt
 80206f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80206fa:	3402      	adds	r4, #2
 80206fc:	9305      	str	r3, [sp, #20]
 80206fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80207e4 <_vfiprintf_r+0x25c>
 8020702:	7821      	ldrb	r1, [r4, #0]
 8020704:	2203      	movs	r2, #3
 8020706:	4650      	mov	r0, sl
 8020708:	f7df fdaa 	bl	8000260 <memchr>
 802070c:	b140      	cbz	r0, 8020720 <_vfiprintf_r+0x198>
 802070e:	2340      	movs	r3, #64	; 0x40
 8020710:	eba0 000a 	sub.w	r0, r0, sl
 8020714:	fa03 f000 	lsl.w	r0, r3, r0
 8020718:	9b04      	ldr	r3, [sp, #16]
 802071a:	4303      	orrs	r3, r0
 802071c:	3401      	adds	r4, #1
 802071e:	9304      	str	r3, [sp, #16]
 8020720:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020724:	482c      	ldr	r0, [pc, #176]	; (80207d8 <_vfiprintf_r+0x250>)
 8020726:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802072a:	2206      	movs	r2, #6
 802072c:	f7df fd98 	bl	8000260 <memchr>
 8020730:	2800      	cmp	r0, #0
 8020732:	d03f      	beq.n	80207b4 <_vfiprintf_r+0x22c>
 8020734:	4b29      	ldr	r3, [pc, #164]	; (80207dc <_vfiprintf_r+0x254>)
 8020736:	bb1b      	cbnz	r3, 8020780 <_vfiprintf_r+0x1f8>
 8020738:	9b03      	ldr	r3, [sp, #12]
 802073a:	3307      	adds	r3, #7
 802073c:	f023 0307 	bic.w	r3, r3, #7
 8020740:	3308      	adds	r3, #8
 8020742:	9303      	str	r3, [sp, #12]
 8020744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020746:	443b      	add	r3, r7
 8020748:	9309      	str	r3, [sp, #36]	; 0x24
 802074a:	e767      	b.n	802061c <_vfiprintf_r+0x94>
 802074c:	fb0c 3202 	mla	r2, ip, r2, r3
 8020750:	460c      	mov	r4, r1
 8020752:	2001      	movs	r0, #1
 8020754:	e7a5      	b.n	80206a2 <_vfiprintf_r+0x11a>
 8020756:	2300      	movs	r3, #0
 8020758:	3401      	adds	r4, #1
 802075a:	9305      	str	r3, [sp, #20]
 802075c:	4619      	mov	r1, r3
 802075e:	f04f 0c0a 	mov.w	ip, #10
 8020762:	4620      	mov	r0, r4
 8020764:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020768:	3a30      	subs	r2, #48	; 0x30
 802076a:	2a09      	cmp	r2, #9
 802076c:	d903      	bls.n	8020776 <_vfiprintf_r+0x1ee>
 802076e:	2b00      	cmp	r3, #0
 8020770:	d0c5      	beq.n	80206fe <_vfiprintf_r+0x176>
 8020772:	9105      	str	r1, [sp, #20]
 8020774:	e7c3      	b.n	80206fe <_vfiprintf_r+0x176>
 8020776:	fb0c 2101 	mla	r1, ip, r1, r2
 802077a:	4604      	mov	r4, r0
 802077c:	2301      	movs	r3, #1
 802077e:	e7f0      	b.n	8020762 <_vfiprintf_r+0x1da>
 8020780:	ab03      	add	r3, sp, #12
 8020782:	9300      	str	r3, [sp, #0]
 8020784:	462a      	mov	r2, r5
 8020786:	4b16      	ldr	r3, [pc, #88]	; (80207e0 <_vfiprintf_r+0x258>)
 8020788:	a904      	add	r1, sp, #16
 802078a:	4630      	mov	r0, r6
 802078c:	f3af 8000 	nop.w
 8020790:	4607      	mov	r7, r0
 8020792:	1c78      	adds	r0, r7, #1
 8020794:	d1d6      	bne.n	8020744 <_vfiprintf_r+0x1bc>
 8020796:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020798:	07d9      	lsls	r1, r3, #31
 802079a:	d405      	bmi.n	80207a8 <_vfiprintf_r+0x220>
 802079c:	89ab      	ldrh	r3, [r5, #12]
 802079e:	059a      	lsls	r2, r3, #22
 80207a0:	d402      	bmi.n	80207a8 <_vfiprintf_r+0x220>
 80207a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80207a4:	f7fd ff41 	bl	801e62a <__retarget_lock_release_recursive>
 80207a8:	89ab      	ldrh	r3, [r5, #12]
 80207aa:	065b      	lsls	r3, r3, #25
 80207ac:	f53f af12 	bmi.w	80205d4 <_vfiprintf_r+0x4c>
 80207b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80207b2:	e711      	b.n	80205d8 <_vfiprintf_r+0x50>
 80207b4:	ab03      	add	r3, sp, #12
 80207b6:	9300      	str	r3, [sp, #0]
 80207b8:	462a      	mov	r2, r5
 80207ba:	4b09      	ldr	r3, [pc, #36]	; (80207e0 <_vfiprintf_r+0x258>)
 80207bc:	a904      	add	r1, sp, #16
 80207be:	4630      	mov	r0, r6
 80207c0:	f000 f880 	bl	80208c4 <_printf_i>
 80207c4:	e7e4      	b.n	8020790 <_vfiprintf_r+0x208>
 80207c6:	bf00      	nop
 80207c8:	08026920 	.word	0x08026920
 80207cc:	08026940 	.word	0x08026940
 80207d0:	08026900 	.word	0x08026900
 80207d4:	08026e9f 	.word	0x08026e9f
 80207d8:	08026ea9 	.word	0x08026ea9
 80207dc:	00000000 	.word	0x00000000
 80207e0:	08020563 	.word	0x08020563
 80207e4:	08026ea5 	.word	0x08026ea5

080207e8 <_printf_common>:
 80207e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80207ec:	4616      	mov	r6, r2
 80207ee:	4699      	mov	r9, r3
 80207f0:	688a      	ldr	r2, [r1, #8]
 80207f2:	690b      	ldr	r3, [r1, #16]
 80207f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80207f8:	4293      	cmp	r3, r2
 80207fa:	bfb8      	it	lt
 80207fc:	4613      	movlt	r3, r2
 80207fe:	6033      	str	r3, [r6, #0]
 8020800:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8020804:	4607      	mov	r7, r0
 8020806:	460c      	mov	r4, r1
 8020808:	b10a      	cbz	r2, 802080e <_printf_common+0x26>
 802080a:	3301      	adds	r3, #1
 802080c:	6033      	str	r3, [r6, #0]
 802080e:	6823      	ldr	r3, [r4, #0]
 8020810:	0699      	lsls	r1, r3, #26
 8020812:	bf42      	ittt	mi
 8020814:	6833      	ldrmi	r3, [r6, #0]
 8020816:	3302      	addmi	r3, #2
 8020818:	6033      	strmi	r3, [r6, #0]
 802081a:	6825      	ldr	r5, [r4, #0]
 802081c:	f015 0506 	ands.w	r5, r5, #6
 8020820:	d106      	bne.n	8020830 <_printf_common+0x48>
 8020822:	f104 0a19 	add.w	sl, r4, #25
 8020826:	68e3      	ldr	r3, [r4, #12]
 8020828:	6832      	ldr	r2, [r6, #0]
 802082a:	1a9b      	subs	r3, r3, r2
 802082c:	42ab      	cmp	r3, r5
 802082e:	dc26      	bgt.n	802087e <_printf_common+0x96>
 8020830:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8020834:	1e13      	subs	r3, r2, #0
 8020836:	6822      	ldr	r2, [r4, #0]
 8020838:	bf18      	it	ne
 802083a:	2301      	movne	r3, #1
 802083c:	0692      	lsls	r2, r2, #26
 802083e:	d42b      	bmi.n	8020898 <_printf_common+0xb0>
 8020840:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020844:	4649      	mov	r1, r9
 8020846:	4638      	mov	r0, r7
 8020848:	47c0      	blx	r8
 802084a:	3001      	adds	r0, #1
 802084c:	d01e      	beq.n	802088c <_printf_common+0xa4>
 802084e:	6823      	ldr	r3, [r4, #0]
 8020850:	68e5      	ldr	r5, [r4, #12]
 8020852:	6832      	ldr	r2, [r6, #0]
 8020854:	f003 0306 	and.w	r3, r3, #6
 8020858:	2b04      	cmp	r3, #4
 802085a:	bf08      	it	eq
 802085c:	1aad      	subeq	r5, r5, r2
 802085e:	68a3      	ldr	r3, [r4, #8]
 8020860:	6922      	ldr	r2, [r4, #16]
 8020862:	bf0c      	ite	eq
 8020864:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020868:	2500      	movne	r5, #0
 802086a:	4293      	cmp	r3, r2
 802086c:	bfc4      	itt	gt
 802086e:	1a9b      	subgt	r3, r3, r2
 8020870:	18ed      	addgt	r5, r5, r3
 8020872:	2600      	movs	r6, #0
 8020874:	341a      	adds	r4, #26
 8020876:	42b5      	cmp	r5, r6
 8020878:	d11a      	bne.n	80208b0 <_printf_common+0xc8>
 802087a:	2000      	movs	r0, #0
 802087c:	e008      	b.n	8020890 <_printf_common+0xa8>
 802087e:	2301      	movs	r3, #1
 8020880:	4652      	mov	r2, sl
 8020882:	4649      	mov	r1, r9
 8020884:	4638      	mov	r0, r7
 8020886:	47c0      	blx	r8
 8020888:	3001      	adds	r0, #1
 802088a:	d103      	bne.n	8020894 <_printf_common+0xac>
 802088c:	f04f 30ff 	mov.w	r0, #4294967295
 8020890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020894:	3501      	adds	r5, #1
 8020896:	e7c6      	b.n	8020826 <_printf_common+0x3e>
 8020898:	18e1      	adds	r1, r4, r3
 802089a:	1c5a      	adds	r2, r3, #1
 802089c:	2030      	movs	r0, #48	; 0x30
 802089e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80208a2:	4422      	add	r2, r4
 80208a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80208a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80208ac:	3302      	adds	r3, #2
 80208ae:	e7c7      	b.n	8020840 <_printf_common+0x58>
 80208b0:	2301      	movs	r3, #1
 80208b2:	4622      	mov	r2, r4
 80208b4:	4649      	mov	r1, r9
 80208b6:	4638      	mov	r0, r7
 80208b8:	47c0      	blx	r8
 80208ba:	3001      	adds	r0, #1
 80208bc:	d0e6      	beq.n	802088c <_printf_common+0xa4>
 80208be:	3601      	adds	r6, #1
 80208c0:	e7d9      	b.n	8020876 <_printf_common+0x8e>
	...

080208c4 <_printf_i>:
 80208c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80208c8:	460c      	mov	r4, r1
 80208ca:	4691      	mov	r9, r2
 80208cc:	7e27      	ldrb	r7, [r4, #24]
 80208ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 80208d0:	2f78      	cmp	r7, #120	; 0x78
 80208d2:	4680      	mov	r8, r0
 80208d4:	469a      	mov	sl, r3
 80208d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80208da:	d807      	bhi.n	80208ec <_printf_i+0x28>
 80208dc:	2f62      	cmp	r7, #98	; 0x62
 80208de:	d80a      	bhi.n	80208f6 <_printf_i+0x32>
 80208e0:	2f00      	cmp	r7, #0
 80208e2:	f000 80d8 	beq.w	8020a96 <_printf_i+0x1d2>
 80208e6:	2f58      	cmp	r7, #88	; 0x58
 80208e8:	f000 80a3 	beq.w	8020a32 <_printf_i+0x16e>
 80208ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80208f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80208f4:	e03a      	b.n	802096c <_printf_i+0xa8>
 80208f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80208fa:	2b15      	cmp	r3, #21
 80208fc:	d8f6      	bhi.n	80208ec <_printf_i+0x28>
 80208fe:	a001      	add	r0, pc, #4	; (adr r0, 8020904 <_printf_i+0x40>)
 8020900:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8020904:	0802095d 	.word	0x0802095d
 8020908:	08020971 	.word	0x08020971
 802090c:	080208ed 	.word	0x080208ed
 8020910:	080208ed 	.word	0x080208ed
 8020914:	080208ed 	.word	0x080208ed
 8020918:	080208ed 	.word	0x080208ed
 802091c:	08020971 	.word	0x08020971
 8020920:	080208ed 	.word	0x080208ed
 8020924:	080208ed 	.word	0x080208ed
 8020928:	080208ed 	.word	0x080208ed
 802092c:	080208ed 	.word	0x080208ed
 8020930:	08020a7d 	.word	0x08020a7d
 8020934:	080209a1 	.word	0x080209a1
 8020938:	08020a5f 	.word	0x08020a5f
 802093c:	080208ed 	.word	0x080208ed
 8020940:	080208ed 	.word	0x080208ed
 8020944:	08020a9f 	.word	0x08020a9f
 8020948:	080208ed 	.word	0x080208ed
 802094c:	080209a1 	.word	0x080209a1
 8020950:	080208ed 	.word	0x080208ed
 8020954:	080208ed 	.word	0x080208ed
 8020958:	08020a67 	.word	0x08020a67
 802095c:	680b      	ldr	r3, [r1, #0]
 802095e:	1d1a      	adds	r2, r3, #4
 8020960:	681b      	ldr	r3, [r3, #0]
 8020962:	600a      	str	r2, [r1, #0]
 8020964:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8020968:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802096c:	2301      	movs	r3, #1
 802096e:	e0a3      	b.n	8020ab8 <_printf_i+0x1f4>
 8020970:	6825      	ldr	r5, [r4, #0]
 8020972:	6808      	ldr	r0, [r1, #0]
 8020974:	062e      	lsls	r6, r5, #24
 8020976:	f100 0304 	add.w	r3, r0, #4
 802097a:	d50a      	bpl.n	8020992 <_printf_i+0xce>
 802097c:	6805      	ldr	r5, [r0, #0]
 802097e:	600b      	str	r3, [r1, #0]
 8020980:	2d00      	cmp	r5, #0
 8020982:	da03      	bge.n	802098c <_printf_i+0xc8>
 8020984:	232d      	movs	r3, #45	; 0x2d
 8020986:	426d      	negs	r5, r5
 8020988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802098c:	485e      	ldr	r0, [pc, #376]	; (8020b08 <_printf_i+0x244>)
 802098e:	230a      	movs	r3, #10
 8020990:	e019      	b.n	80209c6 <_printf_i+0x102>
 8020992:	f015 0f40 	tst.w	r5, #64	; 0x40
 8020996:	6805      	ldr	r5, [r0, #0]
 8020998:	600b      	str	r3, [r1, #0]
 802099a:	bf18      	it	ne
 802099c:	b22d      	sxthne	r5, r5
 802099e:	e7ef      	b.n	8020980 <_printf_i+0xbc>
 80209a0:	680b      	ldr	r3, [r1, #0]
 80209a2:	6825      	ldr	r5, [r4, #0]
 80209a4:	1d18      	adds	r0, r3, #4
 80209a6:	6008      	str	r0, [r1, #0]
 80209a8:	0628      	lsls	r0, r5, #24
 80209aa:	d501      	bpl.n	80209b0 <_printf_i+0xec>
 80209ac:	681d      	ldr	r5, [r3, #0]
 80209ae:	e002      	b.n	80209b6 <_printf_i+0xf2>
 80209b0:	0669      	lsls	r1, r5, #25
 80209b2:	d5fb      	bpl.n	80209ac <_printf_i+0xe8>
 80209b4:	881d      	ldrh	r5, [r3, #0]
 80209b6:	4854      	ldr	r0, [pc, #336]	; (8020b08 <_printf_i+0x244>)
 80209b8:	2f6f      	cmp	r7, #111	; 0x6f
 80209ba:	bf0c      	ite	eq
 80209bc:	2308      	moveq	r3, #8
 80209be:	230a      	movne	r3, #10
 80209c0:	2100      	movs	r1, #0
 80209c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80209c6:	6866      	ldr	r6, [r4, #4]
 80209c8:	60a6      	str	r6, [r4, #8]
 80209ca:	2e00      	cmp	r6, #0
 80209cc:	bfa2      	ittt	ge
 80209ce:	6821      	ldrge	r1, [r4, #0]
 80209d0:	f021 0104 	bicge.w	r1, r1, #4
 80209d4:	6021      	strge	r1, [r4, #0]
 80209d6:	b90d      	cbnz	r5, 80209dc <_printf_i+0x118>
 80209d8:	2e00      	cmp	r6, #0
 80209da:	d04d      	beq.n	8020a78 <_printf_i+0x1b4>
 80209dc:	4616      	mov	r6, r2
 80209de:	fbb5 f1f3 	udiv	r1, r5, r3
 80209e2:	fb03 5711 	mls	r7, r3, r1, r5
 80209e6:	5dc7      	ldrb	r7, [r0, r7]
 80209e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80209ec:	462f      	mov	r7, r5
 80209ee:	42bb      	cmp	r3, r7
 80209f0:	460d      	mov	r5, r1
 80209f2:	d9f4      	bls.n	80209de <_printf_i+0x11a>
 80209f4:	2b08      	cmp	r3, #8
 80209f6:	d10b      	bne.n	8020a10 <_printf_i+0x14c>
 80209f8:	6823      	ldr	r3, [r4, #0]
 80209fa:	07df      	lsls	r7, r3, #31
 80209fc:	d508      	bpl.n	8020a10 <_printf_i+0x14c>
 80209fe:	6923      	ldr	r3, [r4, #16]
 8020a00:	6861      	ldr	r1, [r4, #4]
 8020a02:	4299      	cmp	r1, r3
 8020a04:	bfde      	ittt	le
 8020a06:	2330      	movle	r3, #48	; 0x30
 8020a08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8020a0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8020a10:	1b92      	subs	r2, r2, r6
 8020a12:	6122      	str	r2, [r4, #16]
 8020a14:	f8cd a000 	str.w	sl, [sp]
 8020a18:	464b      	mov	r3, r9
 8020a1a:	aa03      	add	r2, sp, #12
 8020a1c:	4621      	mov	r1, r4
 8020a1e:	4640      	mov	r0, r8
 8020a20:	f7ff fee2 	bl	80207e8 <_printf_common>
 8020a24:	3001      	adds	r0, #1
 8020a26:	d14c      	bne.n	8020ac2 <_printf_i+0x1fe>
 8020a28:	f04f 30ff 	mov.w	r0, #4294967295
 8020a2c:	b004      	add	sp, #16
 8020a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020a32:	4835      	ldr	r0, [pc, #212]	; (8020b08 <_printf_i+0x244>)
 8020a34:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8020a38:	6823      	ldr	r3, [r4, #0]
 8020a3a:	680e      	ldr	r6, [r1, #0]
 8020a3c:	061f      	lsls	r7, r3, #24
 8020a3e:	f856 5b04 	ldr.w	r5, [r6], #4
 8020a42:	600e      	str	r6, [r1, #0]
 8020a44:	d514      	bpl.n	8020a70 <_printf_i+0x1ac>
 8020a46:	07d9      	lsls	r1, r3, #31
 8020a48:	bf44      	itt	mi
 8020a4a:	f043 0320 	orrmi.w	r3, r3, #32
 8020a4e:	6023      	strmi	r3, [r4, #0]
 8020a50:	b91d      	cbnz	r5, 8020a5a <_printf_i+0x196>
 8020a52:	6823      	ldr	r3, [r4, #0]
 8020a54:	f023 0320 	bic.w	r3, r3, #32
 8020a58:	6023      	str	r3, [r4, #0]
 8020a5a:	2310      	movs	r3, #16
 8020a5c:	e7b0      	b.n	80209c0 <_printf_i+0xfc>
 8020a5e:	6823      	ldr	r3, [r4, #0]
 8020a60:	f043 0320 	orr.w	r3, r3, #32
 8020a64:	6023      	str	r3, [r4, #0]
 8020a66:	2378      	movs	r3, #120	; 0x78
 8020a68:	4828      	ldr	r0, [pc, #160]	; (8020b0c <_printf_i+0x248>)
 8020a6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8020a6e:	e7e3      	b.n	8020a38 <_printf_i+0x174>
 8020a70:	065e      	lsls	r6, r3, #25
 8020a72:	bf48      	it	mi
 8020a74:	b2ad      	uxthmi	r5, r5
 8020a76:	e7e6      	b.n	8020a46 <_printf_i+0x182>
 8020a78:	4616      	mov	r6, r2
 8020a7a:	e7bb      	b.n	80209f4 <_printf_i+0x130>
 8020a7c:	680b      	ldr	r3, [r1, #0]
 8020a7e:	6826      	ldr	r6, [r4, #0]
 8020a80:	6960      	ldr	r0, [r4, #20]
 8020a82:	1d1d      	adds	r5, r3, #4
 8020a84:	600d      	str	r5, [r1, #0]
 8020a86:	0635      	lsls	r5, r6, #24
 8020a88:	681b      	ldr	r3, [r3, #0]
 8020a8a:	d501      	bpl.n	8020a90 <_printf_i+0x1cc>
 8020a8c:	6018      	str	r0, [r3, #0]
 8020a8e:	e002      	b.n	8020a96 <_printf_i+0x1d2>
 8020a90:	0671      	lsls	r1, r6, #25
 8020a92:	d5fb      	bpl.n	8020a8c <_printf_i+0x1c8>
 8020a94:	8018      	strh	r0, [r3, #0]
 8020a96:	2300      	movs	r3, #0
 8020a98:	6123      	str	r3, [r4, #16]
 8020a9a:	4616      	mov	r6, r2
 8020a9c:	e7ba      	b.n	8020a14 <_printf_i+0x150>
 8020a9e:	680b      	ldr	r3, [r1, #0]
 8020aa0:	1d1a      	adds	r2, r3, #4
 8020aa2:	600a      	str	r2, [r1, #0]
 8020aa4:	681e      	ldr	r6, [r3, #0]
 8020aa6:	6862      	ldr	r2, [r4, #4]
 8020aa8:	2100      	movs	r1, #0
 8020aaa:	4630      	mov	r0, r6
 8020aac:	f7df fbd8 	bl	8000260 <memchr>
 8020ab0:	b108      	cbz	r0, 8020ab6 <_printf_i+0x1f2>
 8020ab2:	1b80      	subs	r0, r0, r6
 8020ab4:	6060      	str	r0, [r4, #4]
 8020ab6:	6863      	ldr	r3, [r4, #4]
 8020ab8:	6123      	str	r3, [r4, #16]
 8020aba:	2300      	movs	r3, #0
 8020abc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020ac0:	e7a8      	b.n	8020a14 <_printf_i+0x150>
 8020ac2:	6923      	ldr	r3, [r4, #16]
 8020ac4:	4632      	mov	r2, r6
 8020ac6:	4649      	mov	r1, r9
 8020ac8:	4640      	mov	r0, r8
 8020aca:	47d0      	blx	sl
 8020acc:	3001      	adds	r0, #1
 8020ace:	d0ab      	beq.n	8020a28 <_printf_i+0x164>
 8020ad0:	6823      	ldr	r3, [r4, #0]
 8020ad2:	079b      	lsls	r3, r3, #30
 8020ad4:	d413      	bmi.n	8020afe <_printf_i+0x23a>
 8020ad6:	68e0      	ldr	r0, [r4, #12]
 8020ad8:	9b03      	ldr	r3, [sp, #12]
 8020ada:	4298      	cmp	r0, r3
 8020adc:	bfb8      	it	lt
 8020ade:	4618      	movlt	r0, r3
 8020ae0:	e7a4      	b.n	8020a2c <_printf_i+0x168>
 8020ae2:	2301      	movs	r3, #1
 8020ae4:	4632      	mov	r2, r6
 8020ae6:	4649      	mov	r1, r9
 8020ae8:	4640      	mov	r0, r8
 8020aea:	47d0      	blx	sl
 8020aec:	3001      	adds	r0, #1
 8020aee:	d09b      	beq.n	8020a28 <_printf_i+0x164>
 8020af0:	3501      	adds	r5, #1
 8020af2:	68e3      	ldr	r3, [r4, #12]
 8020af4:	9903      	ldr	r1, [sp, #12]
 8020af6:	1a5b      	subs	r3, r3, r1
 8020af8:	42ab      	cmp	r3, r5
 8020afa:	dcf2      	bgt.n	8020ae2 <_printf_i+0x21e>
 8020afc:	e7eb      	b.n	8020ad6 <_printf_i+0x212>
 8020afe:	2500      	movs	r5, #0
 8020b00:	f104 0619 	add.w	r6, r4, #25
 8020b04:	e7f5      	b.n	8020af2 <_printf_i+0x22e>
 8020b06:	bf00      	nop
 8020b08:	08026eb0 	.word	0x08026eb0
 8020b0c:	08026ec1 	.word	0x08026ec1

08020b10 <_putc_r>:
 8020b10:	b570      	push	{r4, r5, r6, lr}
 8020b12:	460d      	mov	r5, r1
 8020b14:	4614      	mov	r4, r2
 8020b16:	4606      	mov	r6, r0
 8020b18:	b118      	cbz	r0, 8020b22 <_putc_r+0x12>
 8020b1a:	6983      	ldr	r3, [r0, #24]
 8020b1c:	b90b      	cbnz	r3, 8020b22 <_putc_r+0x12>
 8020b1e:	f7fd f9cf 	bl	801dec0 <__sinit>
 8020b22:	4b1c      	ldr	r3, [pc, #112]	; (8020b94 <_putc_r+0x84>)
 8020b24:	429c      	cmp	r4, r3
 8020b26:	d124      	bne.n	8020b72 <_putc_r+0x62>
 8020b28:	6874      	ldr	r4, [r6, #4]
 8020b2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020b2c:	07d8      	lsls	r0, r3, #31
 8020b2e:	d405      	bmi.n	8020b3c <_putc_r+0x2c>
 8020b30:	89a3      	ldrh	r3, [r4, #12]
 8020b32:	0599      	lsls	r1, r3, #22
 8020b34:	d402      	bmi.n	8020b3c <_putc_r+0x2c>
 8020b36:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020b38:	f7fd fd75 	bl	801e626 <__retarget_lock_acquire_recursive>
 8020b3c:	68a3      	ldr	r3, [r4, #8]
 8020b3e:	3b01      	subs	r3, #1
 8020b40:	2b00      	cmp	r3, #0
 8020b42:	60a3      	str	r3, [r4, #8]
 8020b44:	da05      	bge.n	8020b52 <_putc_r+0x42>
 8020b46:	69a2      	ldr	r2, [r4, #24]
 8020b48:	4293      	cmp	r3, r2
 8020b4a:	db1c      	blt.n	8020b86 <_putc_r+0x76>
 8020b4c:	b2eb      	uxtb	r3, r5
 8020b4e:	2b0a      	cmp	r3, #10
 8020b50:	d019      	beq.n	8020b86 <_putc_r+0x76>
 8020b52:	6823      	ldr	r3, [r4, #0]
 8020b54:	1c5a      	adds	r2, r3, #1
 8020b56:	6022      	str	r2, [r4, #0]
 8020b58:	701d      	strb	r5, [r3, #0]
 8020b5a:	b2ed      	uxtb	r5, r5
 8020b5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020b5e:	07da      	lsls	r2, r3, #31
 8020b60:	d405      	bmi.n	8020b6e <_putc_r+0x5e>
 8020b62:	89a3      	ldrh	r3, [r4, #12]
 8020b64:	059b      	lsls	r3, r3, #22
 8020b66:	d402      	bmi.n	8020b6e <_putc_r+0x5e>
 8020b68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020b6a:	f7fd fd5e 	bl	801e62a <__retarget_lock_release_recursive>
 8020b6e:	4628      	mov	r0, r5
 8020b70:	bd70      	pop	{r4, r5, r6, pc}
 8020b72:	4b09      	ldr	r3, [pc, #36]	; (8020b98 <_putc_r+0x88>)
 8020b74:	429c      	cmp	r4, r3
 8020b76:	d101      	bne.n	8020b7c <_putc_r+0x6c>
 8020b78:	68b4      	ldr	r4, [r6, #8]
 8020b7a:	e7d6      	b.n	8020b2a <_putc_r+0x1a>
 8020b7c:	4b07      	ldr	r3, [pc, #28]	; (8020b9c <_putc_r+0x8c>)
 8020b7e:	429c      	cmp	r4, r3
 8020b80:	bf08      	it	eq
 8020b82:	68f4      	ldreq	r4, [r6, #12]
 8020b84:	e7d1      	b.n	8020b2a <_putc_r+0x1a>
 8020b86:	4629      	mov	r1, r5
 8020b88:	4622      	mov	r2, r4
 8020b8a:	4630      	mov	r0, r6
 8020b8c:	f7ff f856 	bl	801fc3c <__swbuf_r>
 8020b90:	4605      	mov	r5, r0
 8020b92:	e7e3      	b.n	8020b5c <_putc_r+0x4c>
 8020b94:	08026920 	.word	0x08026920
 8020b98:	08026940 	.word	0x08026940
 8020b9c:	08026900 	.word	0x08026900

08020ba0 <_read_r>:
 8020ba0:	b538      	push	{r3, r4, r5, lr}
 8020ba2:	4d07      	ldr	r5, [pc, #28]	; (8020bc0 <_read_r+0x20>)
 8020ba4:	4604      	mov	r4, r0
 8020ba6:	4608      	mov	r0, r1
 8020ba8:	4611      	mov	r1, r2
 8020baa:	2200      	movs	r2, #0
 8020bac:	602a      	str	r2, [r5, #0]
 8020bae:	461a      	mov	r2, r3
 8020bb0:	f7e0 f8f1 	bl	8000d96 <_read>
 8020bb4:	1c43      	adds	r3, r0, #1
 8020bb6:	d102      	bne.n	8020bbe <_read_r+0x1e>
 8020bb8:	682b      	ldr	r3, [r5, #0]
 8020bba:	b103      	cbz	r3, 8020bbe <_read_r+0x1e>
 8020bbc:	6023      	str	r3, [r4, #0]
 8020bbe:	bd38      	pop	{r3, r4, r5, pc}
 8020bc0:	20000e30 	.word	0x20000e30

08020bc4 <sniprintf>:
 8020bc4:	b40c      	push	{r2, r3}
 8020bc6:	b530      	push	{r4, r5, lr}
 8020bc8:	4b17      	ldr	r3, [pc, #92]	; (8020c28 <sniprintf+0x64>)
 8020bca:	1e0c      	subs	r4, r1, #0
 8020bcc:	681d      	ldr	r5, [r3, #0]
 8020bce:	b09d      	sub	sp, #116	; 0x74
 8020bd0:	da08      	bge.n	8020be4 <sniprintf+0x20>
 8020bd2:	238b      	movs	r3, #139	; 0x8b
 8020bd4:	602b      	str	r3, [r5, #0]
 8020bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8020bda:	b01d      	add	sp, #116	; 0x74
 8020bdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020be0:	b002      	add	sp, #8
 8020be2:	4770      	bx	lr
 8020be4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8020be8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8020bec:	bf14      	ite	ne
 8020bee:	f104 33ff 	addne.w	r3, r4, #4294967295
 8020bf2:	4623      	moveq	r3, r4
 8020bf4:	9304      	str	r3, [sp, #16]
 8020bf6:	9307      	str	r3, [sp, #28]
 8020bf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020bfc:	9002      	str	r0, [sp, #8]
 8020bfe:	9006      	str	r0, [sp, #24]
 8020c00:	f8ad 3016 	strh.w	r3, [sp, #22]
 8020c04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020c06:	ab21      	add	r3, sp, #132	; 0x84
 8020c08:	a902      	add	r1, sp, #8
 8020c0a:	4628      	mov	r0, r5
 8020c0c:	9301      	str	r3, [sp, #4]
 8020c0e:	f7ff fb91 	bl	8020334 <_svfiprintf_r>
 8020c12:	1c43      	adds	r3, r0, #1
 8020c14:	bfbc      	itt	lt
 8020c16:	238b      	movlt	r3, #139	; 0x8b
 8020c18:	602b      	strlt	r3, [r5, #0]
 8020c1a:	2c00      	cmp	r4, #0
 8020c1c:	d0dd      	beq.n	8020bda <sniprintf+0x16>
 8020c1e:	9b02      	ldr	r3, [sp, #8]
 8020c20:	2200      	movs	r2, #0
 8020c22:	701a      	strb	r2, [r3, #0]
 8020c24:	e7d9      	b.n	8020bda <sniprintf+0x16>
 8020c26:	bf00      	nop
 8020c28:	20000108 	.word	0x20000108

08020c2c <siscanf>:
 8020c2c:	b40e      	push	{r1, r2, r3}
 8020c2e:	b510      	push	{r4, lr}
 8020c30:	b09f      	sub	sp, #124	; 0x7c
 8020c32:	ac21      	add	r4, sp, #132	; 0x84
 8020c34:	f44f 7101 	mov.w	r1, #516	; 0x204
 8020c38:	f854 2b04 	ldr.w	r2, [r4], #4
 8020c3c:	9201      	str	r2, [sp, #4]
 8020c3e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8020c42:	9004      	str	r0, [sp, #16]
 8020c44:	9008      	str	r0, [sp, #32]
 8020c46:	f7df faf9 	bl	800023c <strlen>
 8020c4a:	4b0c      	ldr	r3, [pc, #48]	; (8020c7c <siscanf+0x50>)
 8020c4c:	9005      	str	r0, [sp, #20]
 8020c4e:	9009      	str	r0, [sp, #36]	; 0x24
 8020c50:	930d      	str	r3, [sp, #52]	; 0x34
 8020c52:	480b      	ldr	r0, [pc, #44]	; (8020c80 <siscanf+0x54>)
 8020c54:	9a01      	ldr	r2, [sp, #4]
 8020c56:	6800      	ldr	r0, [r0, #0]
 8020c58:	9403      	str	r4, [sp, #12]
 8020c5a:	2300      	movs	r3, #0
 8020c5c:	9311      	str	r3, [sp, #68]	; 0x44
 8020c5e:	9316      	str	r3, [sp, #88]	; 0x58
 8020c60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020c64:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020c68:	a904      	add	r1, sp, #16
 8020c6a:	4623      	mov	r3, r4
 8020c6c:	f000 f8ba 	bl	8020de4 <__ssvfiscanf_r>
 8020c70:	b01f      	add	sp, #124	; 0x7c
 8020c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020c76:	b003      	add	sp, #12
 8020c78:	4770      	bx	lr
 8020c7a:	bf00      	nop
 8020c7c:	0801eafb 	.word	0x0801eafb
 8020c80:	20000108 	.word	0x20000108

08020c84 <strcpy>:
 8020c84:	4603      	mov	r3, r0
 8020c86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020c8a:	f803 2b01 	strb.w	r2, [r3], #1
 8020c8e:	2a00      	cmp	r2, #0
 8020c90:	d1f9      	bne.n	8020c86 <strcpy+0x2>
 8020c92:	4770      	bx	lr

08020c94 <strncmp>:
 8020c94:	b510      	push	{r4, lr}
 8020c96:	b16a      	cbz	r2, 8020cb4 <strncmp+0x20>
 8020c98:	3901      	subs	r1, #1
 8020c9a:	1884      	adds	r4, r0, r2
 8020c9c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020ca0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8020ca4:	4293      	cmp	r3, r2
 8020ca6:	d103      	bne.n	8020cb0 <strncmp+0x1c>
 8020ca8:	42a0      	cmp	r0, r4
 8020caa:	d001      	beq.n	8020cb0 <strncmp+0x1c>
 8020cac:	2b00      	cmp	r3, #0
 8020cae:	d1f5      	bne.n	8020c9c <strncmp+0x8>
 8020cb0:	1a98      	subs	r0, r3, r2
 8020cb2:	bd10      	pop	{r4, pc}
 8020cb4:	4610      	mov	r0, r2
 8020cb6:	e7fc      	b.n	8020cb2 <strncmp+0x1e>

08020cb8 <__ascii_wctomb>:
 8020cb8:	b149      	cbz	r1, 8020cce <__ascii_wctomb+0x16>
 8020cba:	2aff      	cmp	r2, #255	; 0xff
 8020cbc:	bf85      	ittet	hi
 8020cbe:	238a      	movhi	r3, #138	; 0x8a
 8020cc0:	6003      	strhi	r3, [r0, #0]
 8020cc2:	700a      	strbls	r2, [r1, #0]
 8020cc4:	f04f 30ff 	movhi.w	r0, #4294967295
 8020cc8:	bf98      	it	ls
 8020cca:	2001      	movls	r0, #1
 8020ccc:	4770      	bx	lr
 8020cce:	4608      	mov	r0, r1
 8020cd0:	4770      	bx	lr
	...

08020cd4 <__env_lock>:
 8020cd4:	4801      	ldr	r0, [pc, #4]	; (8020cdc <__env_lock+0x8>)
 8020cd6:	f7fd bca6 	b.w	801e626 <__retarget_lock_acquire_recursive>
 8020cda:	bf00      	nop
 8020cdc:	20000e26 	.word	0x20000e26

08020ce0 <__env_unlock>:
 8020ce0:	4801      	ldr	r0, [pc, #4]	; (8020ce8 <__env_unlock+0x8>)
 8020ce2:	f7fd bca2 	b.w	801e62a <__retarget_lock_release_recursive>
 8020ce6:	bf00      	nop
 8020ce8:	20000e26 	.word	0x20000e26

08020cec <memmove>:
 8020cec:	4288      	cmp	r0, r1
 8020cee:	b510      	push	{r4, lr}
 8020cf0:	eb01 0402 	add.w	r4, r1, r2
 8020cf4:	d902      	bls.n	8020cfc <memmove+0x10>
 8020cf6:	4284      	cmp	r4, r0
 8020cf8:	4623      	mov	r3, r4
 8020cfa:	d807      	bhi.n	8020d0c <memmove+0x20>
 8020cfc:	1e43      	subs	r3, r0, #1
 8020cfe:	42a1      	cmp	r1, r4
 8020d00:	d008      	beq.n	8020d14 <memmove+0x28>
 8020d02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020d06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020d0a:	e7f8      	b.n	8020cfe <memmove+0x12>
 8020d0c:	4402      	add	r2, r0
 8020d0e:	4601      	mov	r1, r0
 8020d10:	428a      	cmp	r2, r1
 8020d12:	d100      	bne.n	8020d16 <memmove+0x2a>
 8020d14:	bd10      	pop	{r4, pc}
 8020d16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020d1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020d1e:	e7f7      	b.n	8020d10 <memmove+0x24>

08020d20 <_malloc_usable_size_r>:
 8020d20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020d24:	1f18      	subs	r0, r3, #4
 8020d26:	2b00      	cmp	r3, #0
 8020d28:	bfbc      	itt	lt
 8020d2a:	580b      	ldrlt	r3, [r1, r0]
 8020d2c:	18c0      	addlt	r0, r0, r3
 8020d2e:	4770      	bx	lr

08020d30 <_sungetc_r>:
 8020d30:	b538      	push	{r3, r4, r5, lr}
 8020d32:	1c4b      	adds	r3, r1, #1
 8020d34:	4614      	mov	r4, r2
 8020d36:	d103      	bne.n	8020d40 <_sungetc_r+0x10>
 8020d38:	f04f 35ff 	mov.w	r5, #4294967295
 8020d3c:	4628      	mov	r0, r5
 8020d3e:	bd38      	pop	{r3, r4, r5, pc}
 8020d40:	8993      	ldrh	r3, [r2, #12]
 8020d42:	f023 0320 	bic.w	r3, r3, #32
 8020d46:	8193      	strh	r3, [r2, #12]
 8020d48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020d4a:	6852      	ldr	r2, [r2, #4]
 8020d4c:	b2cd      	uxtb	r5, r1
 8020d4e:	b18b      	cbz	r3, 8020d74 <_sungetc_r+0x44>
 8020d50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8020d52:	4293      	cmp	r3, r2
 8020d54:	dd08      	ble.n	8020d68 <_sungetc_r+0x38>
 8020d56:	6823      	ldr	r3, [r4, #0]
 8020d58:	1e5a      	subs	r2, r3, #1
 8020d5a:	6022      	str	r2, [r4, #0]
 8020d5c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8020d60:	6863      	ldr	r3, [r4, #4]
 8020d62:	3301      	adds	r3, #1
 8020d64:	6063      	str	r3, [r4, #4]
 8020d66:	e7e9      	b.n	8020d3c <_sungetc_r+0xc>
 8020d68:	4621      	mov	r1, r4
 8020d6a:	f000 fbbf 	bl	80214ec <__submore>
 8020d6e:	2800      	cmp	r0, #0
 8020d70:	d0f1      	beq.n	8020d56 <_sungetc_r+0x26>
 8020d72:	e7e1      	b.n	8020d38 <_sungetc_r+0x8>
 8020d74:	6921      	ldr	r1, [r4, #16]
 8020d76:	6823      	ldr	r3, [r4, #0]
 8020d78:	b151      	cbz	r1, 8020d90 <_sungetc_r+0x60>
 8020d7a:	4299      	cmp	r1, r3
 8020d7c:	d208      	bcs.n	8020d90 <_sungetc_r+0x60>
 8020d7e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8020d82:	42a9      	cmp	r1, r5
 8020d84:	d104      	bne.n	8020d90 <_sungetc_r+0x60>
 8020d86:	3b01      	subs	r3, #1
 8020d88:	3201      	adds	r2, #1
 8020d8a:	6023      	str	r3, [r4, #0]
 8020d8c:	6062      	str	r2, [r4, #4]
 8020d8e:	e7d5      	b.n	8020d3c <_sungetc_r+0xc>
 8020d90:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8020d94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020d98:	6363      	str	r3, [r4, #52]	; 0x34
 8020d9a:	2303      	movs	r3, #3
 8020d9c:	63a3      	str	r3, [r4, #56]	; 0x38
 8020d9e:	4623      	mov	r3, r4
 8020da0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8020da4:	6023      	str	r3, [r4, #0]
 8020da6:	2301      	movs	r3, #1
 8020da8:	e7dc      	b.n	8020d64 <_sungetc_r+0x34>

08020daa <__ssrefill_r>:
 8020daa:	b510      	push	{r4, lr}
 8020dac:	460c      	mov	r4, r1
 8020dae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8020db0:	b169      	cbz	r1, 8020dce <__ssrefill_r+0x24>
 8020db2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020db6:	4299      	cmp	r1, r3
 8020db8:	d001      	beq.n	8020dbe <__ssrefill_r+0x14>
 8020dba:	f7fd fcd1 	bl	801e760 <_free_r>
 8020dbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020dc0:	6063      	str	r3, [r4, #4]
 8020dc2:	2000      	movs	r0, #0
 8020dc4:	6360      	str	r0, [r4, #52]	; 0x34
 8020dc6:	b113      	cbz	r3, 8020dce <__ssrefill_r+0x24>
 8020dc8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8020dca:	6023      	str	r3, [r4, #0]
 8020dcc:	bd10      	pop	{r4, pc}
 8020dce:	6923      	ldr	r3, [r4, #16]
 8020dd0:	6023      	str	r3, [r4, #0]
 8020dd2:	2300      	movs	r3, #0
 8020dd4:	6063      	str	r3, [r4, #4]
 8020dd6:	89a3      	ldrh	r3, [r4, #12]
 8020dd8:	f043 0320 	orr.w	r3, r3, #32
 8020ddc:	81a3      	strh	r3, [r4, #12]
 8020dde:	f04f 30ff 	mov.w	r0, #4294967295
 8020de2:	e7f3      	b.n	8020dcc <__ssrefill_r+0x22>

08020de4 <__ssvfiscanf_r>:
 8020de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020de8:	460c      	mov	r4, r1
 8020dea:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8020dee:	2100      	movs	r1, #0
 8020df0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8020df4:	49b2      	ldr	r1, [pc, #712]	; (80210c0 <__ssvfiscanf_r+0x2dc>)
 8020df6:	91a0      	str	r1, [sp, #640]	; 0x280
 8020df8:	f10d 0804 	add.w	r8, sp, #4
 8020dfc:	49b1      	ldr	r1, [pc, #708]	; (80210c4 <__ssvfiscanf_r+0x2e0>)
 8020dfe:	4fb2      	ldr	r7, [pc, #712]	; (80210c8 <__ssvfiscanf_r+0x2e4>)
 8020e00:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80210cc <__ssvfiscanf_r+0x2e8>
 8020e04:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8020e08:	4606      	mov	r6, r0
 8020e0a:	91a1      	str	r1, [sp, #644]	; 0x284
 8020e0c:	9300      	str	r3, [sp, #0]
 8020e0e:	f892 a000 	ldrb.w	sl, [r2]
 8020e12:	f1ba 0f00 	cmp.w	sl, #0
 8020e16:	f000 8151 	beq.w	80210bc <__ssvfiscanf_r+0x2d8>
 8020e1a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8020e1e:	f013 0308 	ands.w	r3, r3, #8
 8020e22:	f102 0501 	add.w	r5, r2, #1
 8020e26:	d019      	beq.n	8020e5c <__ssvfiscanf_r+0x78>
 8020e28:	6863      	ldr	r3, [r4, #4]
 8020e2a:	2b00      	cmp	r3, #0
 8020e2c:	dd0f      	ble.n	8020e4e <__ssvfiscanf_r+0x6a>
 8020e2e:	6823      	ldr	r3, [r4, #0]
 8020e30:	781a      	ldrb	r2, [r3, #0]
 8020e32:	5cba      	ldrb	r2, [r7, r2]
 8020e34:	0712      	lsls	r2, r2, #28
 8020e36:	d401      	bmi.n	8020e3c <__ssvfiscanf_r+0x58>
 8020e38:	462a      	mov	r2, r5
 8020e3a:	e7e8      	b.n	8020e0e <__ssvfiscanf_r+0x2a>
 8020e3c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020e3e:	3201      	adds	r2, #1
 8020e40:	9245      	str	r2, [sp, #276]	; 0x114
 8020e42:	6862      	ldr	r2, [r4, #4]
 8020e44:	3301      	adds	r3, #1
 8020e46:	3a01      	subs	r2, #1
 8020e48:	6062      	str	r2, [r4, #4]
 8020e4a:	6023      	str	r3, [r4, #0]
 8020e4c:	e7ec      	b.n	8020e28 <__ssvfiscanf_r+0x44>
 8020e4e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020e50:	4621      	mov	r1, r4
 8020e52:	4630      	mov	r0, r6
 8020e54:	4798      	blx	r3
 8020e56:	2800      	cmp	r0, #0
 8020e58:	d0e9      	beq.n	8020e2e <__ssvfiscanf_r+0x4a>
 8020e5a:	e7ed      	b.n	8020e38 <__ssvfiscanf_r+0x54>
 8020e5c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8020e60:	f040 8083 	bne.w	8020f6a <__ssvfiscanf_r+0x186>
 8020e64:	9341      	str	r3, [sp, #260]	; 0x104
 8020e66:	9343      	str	r3, [sp, #268]	; 0x10c
 8020e68:	7853      	ldrb	r3, [r2, #1]
 8020e6a:	2b2a      	cmp	r3, #42	; 0x2a
 8020e6c:	bf02      	ittt	eq
 8020e6e:	2310      	moveq	r3, #16
 8020e70:	1c95      	addeq	r5, r2, #2
 8020e72:	9341      	streq	r3, [sp, #260]	; 0x104
 8020e74:	220a      	movs	r2, #10
 8020e76:	46ab      	mov	fp, r5
 8020e78:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8020e7c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8020e80:	2b09      	cmp	r3, #9
 8020e82:	d91d      	bls.n	8020ec0 <__ssvfiscanf_r+0xdc>
 8020e84:	4891      	ldr	r0, [pc, #580]	; (80210cc <__ssvfiscanf_r+0x2e8>)
 8020e86:	2203      	movs	r2, #3
 8020e88:	f7df f9ea 	bl	8000260 <memchr>
 8020e8c:	b140      	cbz	r0, 8020ea0 <__ssvfiscanf_r+0xbc>
 8020e8e:	2301      	movs	r3, #1
 8020e90:	eba0 0009 	sub.w	r0, r0, r9
 8020e94:	fa03 f000 	lsl.w	r0, r3, r0
 8020e98:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020e9a:	4318      	orrs	r0, r3
 8020e9c:	9041      	str	r0, [sp, #260]	; 0x104
 8020e9e:	465d      	mov	r5, fp
 8020ea0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8020ea4:	2b78      	cmp	r3, #120	; 0x78
 8020ea6:	d806      	bhi.n	8020eb6 <__ssvfiscanf_r+0xd2>
 8020ea8:	2b57      	cmp	r3, #87	; 0x57
 8020eaa:	d810      	bhi.n	8020ece <__ssvfiscanf_r+0xea>
 8020eac:	2b25      	cmp	r3, #37	; 0x25
 8020eae:	d05c      	beq.n	8020f6a <__ssvfiscanf_r+0x186>
 8020eb0:	d856      	bhi.n	8020f60 <__ssvfiscanf_r+0x17c>
 8020eb2:	2b00      	cmp	r3, #0
 8020eb4:	d074      	beq.n	8020fa0 <__ssvfiscanf_r+0x1bc>
 8020eb6:	2303      	movs	r3, #3
 8020eb8:	9347      	str	r3, [sp, #284]	; 0x11c
 8020eba:	230a      	movs	r3, #10
 8020ebc:	9342      	str	r3, [sp, #264]	; 0x108
 8020ebe:	e081      	b.n	8020fc4 <__ssvfiscanf_r+0x1e0>
 8020ec0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8020ec2:	fb02 1303 	mla	r3, r2, r3, r1
 8020ec6:	3b30      	subs	r3, #48	; 0x30
 8020ec8:	9343      	str	r3, [sp, #268]	; 0x10c
 8020eca:	465d      	mov	r5, fp
 8020ecc:	e7d3      	b.n	8020e76 <__ssvfiscanf_r+0x92>
 8020ece:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8020ed2:	2a20      	cmp	r2, #32
 8020ed4:	d8ef      	bhi.n	8020eb6 <__ssvfiscanf_r+0xd2>
 8020ed6:	a101      	add	r1, pc, #4	; (adr r1, 8020edc <__ssvfiscanf_r+0xf8>)
 8020ed8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8020edc:	08020faf 	.word	0x08020faf
 8020ee0:	08020eb7 	.word	0x08020eb7
 8020ee4:	08020eb7 	.word	0x08020eb7
 8020ee8:	0802100d 	.word	0x0802100d
 8020eec:	08020eb7 	.word	0x08020eb7
 8020ef0:	08020eb7 	.word	0x08020eb7
 8020ef4:	08020eb7 	.word	0x08020eb7
 8020ef8:	08020eb7 	.word	0x08020eb7
 8020efc:	08020eb7 	.word	0x08020eb7
 8020f00:	08020eb7 	.word	0x08020eb7
 8020f04:	08020eb7 	.word	0x08020eb7
 8020f08:	08021023 	.word	0x08021023
 8020f0c:	08020ff9 	.word	0x08020ff9
 8020f10:	08020f67 	.word	0x08020f67
 8020f14:	08020f67 	.word	0x08020f67
 8020f18:	08020f67 	.word	0x08020f67
 8020f1c:	08020eb7 	.word	0x08020eb7
 8020f20:	08020ffd 	.word	0x08020ffd
 8020f24:	08020eb7 	.word	0x08020eb7
 8020f28:	08020eb7 	.word	0x08020eb7
 8020f2c:	08020eb7 	.word	0x08020eb7
 8020f30:	08020eb7 	.word	0x08020eb7
 8020f34:	08021033 	.word	0x08021033
 8020f38:	08021005 	.word	0x08021005
 8020f3c:	08020fa7 	.word	0x08020fa7
 8020f40:	08020eb7 	.word	0x08020eb7
 8020f44:	08020eb7 	.word	0x08020eb7
 8020f48:	0802102f 	.word	0x0802102f
 8020f4c:	08020eb7 	.word	0x08020eb7
 8020f50:	08020ff9 	.word	0x08020ff9
 8020f54:	08020eb7 	.word	0x08020eb7
 8020f58:	08020eb7 	.word	0x08020eb7
 8020f5c:	08020faf 	.word	0x08020faf
 8020f60:	3b45      	subs	r3, #69	; 0x45
 8020f62:	2b02      	cmp	r3, #2
 8020f64:	d8a7      	bhi.n	8020eb6 <__ssvfiscanf_r+0xd2>
 8020f66:	2305      	movs	r3, #5
 8020f68:	e02b      	b.n	8020fc2 <__ssvfiscanf_r+0x1de>
 8020f6a:	6863      	ldr	r3, [r4, #4]
 8020f6c:	2b00      	cmp	r3, #0
 8020f6e:	dd0d      	ble.n	8020f8c <__ssvfiscanf_r+0x1a8>
 8020f70:	6823      	ldr	r3, [r4, #0]
 8020f72:	781a      	ldrb	r2, [r3, #0]
 8020f74:	4552      	cmp	r2, sl
 8020f76:	f040 80a1 	bne.w	80210bc <__ssvfiscanf_r+0x2d8>
 8020f7a:	3301      	adds	r3, #1
 8020f7c:	6862      	ldr	r2, [r4, #4]
 8020f7e:	6023      	str	r3, [r4, #0]
 8020f80:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8020f82:	3a01      	subs	r2, #1
 8020f84:	3301      	adds	r3, #1
 8020f86:	6062      	str	r2, [r4, #4]
 8020f88:	9345      	str	r3, [sp, #276]	; 0x114
 8020f8a:	e755      	b.n	8020e38 <__ssvfiscanf_r+0x54>
 8020f8c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020f8e:	4621      	mov	r1, r4
 8020f90:	4630      	mov	r0, r6
 8020f92:	4798      	blx	r3
 8020f94:	2800      	cmp	r0, #0
 8020f96:	d0eb      	beq.n	8020f70 <__ssvfiscanf_r+0x18c>
 8020f98:	9844      	ldr	r0, [sp, #272]	; 0x110
 8020f9a:	2800      	cmp	r0, #0
 8020f9c:	f040 8084 	bne.w	80210a8 <__ssvfiscanf_r+0x2c4>
 8020fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8020fa4:	e086      	b.n	80210b4 <__ssvfiscanf_r+0x2d0>
 8020fa6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8020fa8:	f042 0220 	orr.w	r2, r2, #32
 8020fac:	9241      	str	r2, [sp, #260]	; 0x104
 8020fae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8020fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020fb4:	9241      	str	r2, [sp, #260]	; 0x104
 8020fb6:	2210      	movs	r2, #16
 8020fb8:	2b6f      	cmp	r3, #111	; 0x6f
 8020fba:	9242      	str	r2, [sp, #264]	; 0x108
 8020fbc:	bf34      	ite	cc
 8020fbe:	2303      	movcc	r3, #3
 8020fc0:	2304      	movcs	r3, #4
 8020fc2:	9347      	str	r3, [sp, #284]	; 0x11c
 8020fc4:	6863      	ldr	r3, [r4, #4]
 8020fc6:	2b00      	cmp	r3, #0
 8020fc8:	dd41      	ble.n	802104e <__ssvfiscanf_r+0x26a>
 8020fca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020fcc:	0659      	lsls	r1, r3, #25
 8020fce:	d404      	bmi.n	8020fda <__ssvfiscanf_r+0x1f6>
 8020fd0:	6823      	ldr	r3, [r4, #0]
 8020fd2:	781a      	ldrb	r2, [r3, #0]
 8020fd4:	5cba      	ldrb	r2, [r7, r2]
 8020fd6:	0712      	lsls	r2, r2, #28
 8020fd8:	d440      	bmi.n	802105c <__ssvfiscanf_r+0x278>
 8020fda:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8020fdc:	2b02      	cmp	r3, #2
 8020fde:	dc4f      	bgt.n	8021080 <__ssvfiscanf_r+0x29c>
 8020fe0:	466b      	mov	r3, sp
 8020fe2:	4622      	mov	r2, r4
 8020fe4:	a941      	add	r1, sp, #260	; 0x104
 8020fe6:	4630      	mov	r0, r6
 8020fe8:	f000 f874 	bl	80210d4 <_scanf_chars>
 8020fec:	2801      	cmp	r0, #1
 8020fee:	d065      	beq.n	80210bc <__ssvfiscanf_r+0x2d8>
 8020ff0:	2802      	cmp	r0, #2
 8020ff2:	f47f af21 	bne.w	8020e38 <__ssvfiscanf_r+0x54>
 8020ff6:	e7cf      	b.n	8020f98 <__ssvfiscanf_r+0x1b4>
 8020ff8:	220a      	movs	r2, #10
 8020ffa:	e7dd      	b.n	8020fb8 <__ssvfiscanf_r+0x1d4>
 8020ffc:	2300      	movs	r3, #0
 8020ffe:	9342      	str	r3, [sp, #264]	; 0x108
 8021000:	2303      	movs	r3, #3
 8021002:	e7de      	b.n	8020fc2 <__ssvfiscanf_r+0x1de>
 8021004:	2308      	movs	r3, #8
 8021006:	9342      	str	r3, [sp, #264]	; 0x108
 8021008:	2304      	movs	r3, #4
 802100a:	e7da      	b.n	8020fc2 <__ssvfiscanf_r+0x1de>
 802100c:	4629      	mov	r1, r5
 802100e:	4640      	mov	r0, r8
 8021010:	f000 f9ac 	bl	802136c <__sccl>
 8021014:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8021016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802101a:	9341      	str	r3, [sp, #260]	; 0x104
 802101c:	4605      	mov	r5, r0
 802101e:	2301      	movs	r3, #1
 8021020:	e7cf      	b.n	8020fc2 <__ssvfiscanf_r+0x1de>
 8021022:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8021024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021028:	9341      	str	r3, [sp, #260]	; 0x104
 802102a:	2300      	movs	r3, #0
 802102c:	e7c9      	b.n	8020fc2 <__ssvfiscanf_r+0x1de>
 802102e:	2302      	movs	r3, #2
 8021030:	e7c7      	b.n	8020fc2 <__ssvfiscanf_r+0x1de>
 8021032:	9841      	ldr	r0, [sp, #260]	; 0x104
 8021034:	06c3      	lsls	r3, r0, #27
 8021036:	f53f aeff 	bmi.w	8020e38 <__ssvfiscanf_r+0x54>
 802103a:	9b00      	ldr	r3, [sp, #0]
 802103c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802103e:	1d19      	adds	r1, r3, #4
 8021040:	9100      	str	r1, [sp, #0]
 8021042:	681b      	ldr	r3, [r3, #0]
 8021044:	07c0      	lsls	r0, r0, #31
 8021046:	bf4c      	ite	mi
 8021048:	801a      	strhmi	r2, [r3, #0]
 802104a:	601a      	strpl	r2, [r3, #0]
 802104c:	e6f4      	b.n	8020e38 <__ssvfiscanf_r+0x54>
 802104e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8021050:	4621      	mov	r1, r4
 8021052:	4630      	mov	r0, r6
 8021054:	4798      	blx	r3
 8021056:	2800      	cmp	r0, #0
 8021058:	d0b7      	beq.n	8020fca <__ssvfiscanf_r+0x1e6>
 802105a:	e79d      	b.n	8020f98 <__ssvfiscanf_r+0x1b4>
 802105c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802105e:	3201      	adds	r2, #1
 8021060:	9245      	str	r2, [sp, #276]	; 0x114
 8021062:	6862      	ldr	r2, [r4, #4]
 8021064:	3a01      	subs	r2, #1
 8021066:	2a00      	cmp	r2, #0
 8021068:	6062      	str	r2, [r4, #4]
 802106a:	dd02      	ble.n	8021072 <__ssvfiscanf_r+0x28e>
 802106c:	3301      	adds	r3, #1
 802106e:	6023      	str	r3, [r4, #0]
 8021070:	e7ae      	b.n	8020fd0 <__ssvfiscanf_r+0x1ec>
 8021072:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8021074:	4621      	mov	r1, r4
 8021076:	4630      	mov	r0, r6
 8021078:	4798      	blx	r3
 802107a:	2800      	cmp	r0, #0
 802107c:	d0a8      	beq.n	8020fd0 <__ssvfiscanf_r+0x1ec>
 802107e:	e78b      	b.n	8020f98 <__ssvfiscanf_r+0x1b4>
 8021080:	2b04      	cmp	r3, #4
 8021082:	dc06      	bgt.n	8021092 <__ssvfiscanf_r+0x2ae>
 8021084:	466b      	mov	r3, sp
 8021086:	4622      	mov	r2, r4
 8021088:	a941      	add	r1, sp, #260	; 0x104
 802108a:	4630      	mov	r0, r6
 802108c:	f000 f87a 	bl	8021184 <_scanf_i>
 8021090:	e7ac      	b.n	8020fec <__ssvfiscanf_r+0x208>
 8021092:	4b0f      	ldr	r3, [pc, #60]	; (80210d0 <__ssvfiscanf_r+0x2ec>)
 8021094:	2b00      	cmp	r3, #0
 8021096:	f43f aecf 	beq.w	8020e38 <__ssvfiscanf_r+0x54>
 802109a:	466b      	mov	r3, sp
 802109c:	4622      	mov	r2, r4
 802109e:	a941      	add	r1, sp, #260	; 0x104
 80210a0:	4630      	mov	r0, r6
 80210a2:	f3af 8000 	nop.w
 80210a6:	e7a1      	b.n	8020fec <__ssvfiscanf_r+0x208>
 80210a8:	89a3      	ldrh	r3, [r4, #12]
 80210aa:	f013 0f40 	tst.w	r3, #64	; 0x40
 80210ae:	bf18      	it	ne
 80210b0:	f04f 30ff 	movne.w	r0, #4294967295
 80210b4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80210b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210bc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80210be:	e7f9      	b.n	80210b4 <__ssvfiscanf_r+0x2d0>
 80210c0:	08020d31 	.word	0x08020d31
 80210c4:	08020dab 	.word	0x08020dab
 80210c8:	08026d95 	.word	0x08026d95
 80210cc:	08026ea5 	.word	0x08026ea5
 80210d0:	00000000 	.word	0x00000000

080210d4 <_scanf_chars>:
 80210d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80210d8:	4615      	mov	r5, r2
 80210da:	688a      	ldr	r2, [r1, #8]
 80210dc:	4680      	mov	r8, r0
 80210de:	460c      	mov	r4, r1
 80210e0:	b932      	cbnz	r2, 80210f0 <_scanf_chars+0x1c>
 80210e2:	698a      	ldr	r2, [r1, #24]
 80210e4:	2a00      	cmp	r2, #0
 80210e6:	bf0c      	ite	eq
 80210e8:	2201      	moveq	r2, #1
 80210ea:	f04f 32ff 	movne.w	r2, #4294967295
 80210ee:	608a      	str	r2, [r1, #8]
 80210f0:	6822      	ldr	r2, [r4, #0]
 80210f2:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8021180 <_scanf_chars+0xac>
 80210f6:	06d1      	lsls	r1, r2, #27
 80210f8:	bf5f      	itttt	pl
 80210fa:	681a      	ldrpl	r2, [r3, #0]
 80210fc:	1d11      	addpl	r1, r2, #4
 80210fe:	6019      	strpl	r1, [r3, #0]
 8021100:	6816      	ldrpl	r6, [r2, #0]
 8021102:	2700      	movs	r7, #0
 8021104:	69a0      	ldr	r0, [r4, #24]
 8021106:	b188      	cbz	r0, 802112c <_scanf_chars+0x58>
 8021108:	2801      	cmp	r0, #1
 802110a:	d107      	bne.n	802111c <_scanf_chars+0x48>
 802110c:	682b      	ldr	r3, [r5, #0]
 802110e:	781a      	ldrb	r2, [r3, #0]
 8021110:	6963      	ldr	r3, [r4, #20]
 8021112:	5c9b      	ldrb	r3, [r3, r2]
 8021114:	b953      	cbnz	r3, 802112c <_scanf_chars+0x58>
 8021116:	bb27      	cbnz	r7, 8021162 <_scanf_chars+0x8e>
 8021118:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802111c:	2802      	cmp	r0, #2
 802111e:	d120      	bne.n	8021162 <_scanf_chars+0x8e>
 8021120:	682b      	ldr	r3, [r5, #0]
 8021122:	781b      	ldrb	r3, [r3, #0]
 8021124:	f813 3009 	ldrb.w	r3, [r3, r9]
 8021128:	071b      	lsls	r3, r3, #28
 802112a:	d41a      	bmi.n	8021162 <_scanf_chars+0x8e>
 802112c:	6823      	ldr	r3, [r4, #0]
 802112e:	06da      	lsls	r2, r3, #27
 8021130:	bf5e      	ittt	pl
 8021132:	682b      	ldrpl	r3, [r5, #0]
 8021134:	781b      	ldrbpl	r3, [r3, #0]
 8021136:	f806 3b01 	strbpl.w	r3, [r6], #1
 802113a:	682a      	ldr	r2, [r5, #0]
 802113c:	686b      	ldr	r3, [r5, #4]
 802113e:	3201      	adds	r2, #1
 8021140:	602a      	str	r2, [r5, #0]
 8021142:	68a2      	ldr	r2, [r4, #8]
 8021144:	3b01      	subs	r3, #1
 8021146:	3a01      	subs	r2, #1
 8021148:	606b      	str	r3, [r5, #4]
 802114a:	3701      	adds	r7, #1
 802114c:	60a2      	str	r2, [r4, #8]
 802114e:	b142      	cbz	r2, 8021162 <_scanf_chars+0x8e>
 8021150:	2b00      	cmp	r3, #0
 8021152:	dcd7      	bgt.n	8021104 <_scanf_chars+0x30>
 8021154:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8021158:	4629      	mov	r1, r5
 802115a:	4640      	mov	r0, r8
 802115c:	4798      	blx	r3
 802115e:	2800      	cmp	r0, #0
 8021160:	d0d0      	beq.n	8021104 <_scanf_chars+0x30>
 8021162:	6823      	ldr	r3, [r4, #0]
 8021164:	f013 0310 	ands.w	r3, r3, #16
 8021168:	d105      	bne.n	8021176 <_scanf_chars+0xa2>
 802116a:	68e2      	ldr	r2, [r4, #12]
 802116c:	3201      	adds	r2, #1
 802116e:	60e2      	str	r2, [r4, #12]
 8021170:	69a2      	ldr	r2, [r4, #24]
 8021172:	b102      	cbz	r2, 8021176 <_scanf_chars+0xa2>
 8021174:	7033      	strb	r3, [r6, #0]
 8021176:	6923      	ldr	r3, [r4, #16]
 8021178:	441f      	add	r7, r3
 802117a:	6127      	str	r7, [r4, #16]
 802117c:	2000      	movs	r0, #0
 802117e:	e7cb      	b.n	8021118 <_scanf_chars+0x44>
 8021180:	08026d95 	.word	0x08026d95

08021184 <_scanf_i>:
 8021184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021188:	4698      	mov	r8, r3
 802118a:	4b74      	ldr	r3, [pc, #464]	; (802135c <_scanf_i+0x1d8>)
 802118c:	460c      	mov	r4, r1
 802118e:	4682      	mov	sl, r0
 8021190:	4616      	mov	r6, r2
 8021192:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8021196:	b087      	sub	sp, #28
 8021198:	ab03      	add	r3, sp, #12
 802119a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802119e:	4b70      	ldr	r3, [pc, #448]	; (8021360 <_scanf_i+0x1dc>)
 80211a0:	69a1      	ldr	r1, [r4, #24]
 80211a2:	4a70      	ldr	r2, [pc, #448]	; (8021364 <_scanf_i+0x1e0>)
 80211a4:	2903      	cmp	r1, #3
 80211a6:	bf18      	it	ne
 80211a8:	461a      	movne	r2, r3
 80211aa:	68a3      	ldr	r3, [r4, #8]
 80211ac:	9201      	str	r2, [sp, #4]
 80211ae:	1e5a      	subs	r2, r3, #1
 80211b0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80211b4:	bf88      	it	hi
 80211b6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80211ba:	4627      	mov	r7, r4
 80211bc:	bf82      	ittt	hi
 80211be:	eb03 0905 	addhi.w	r9, r3, r5
 80211c2:	f240 135d 	movwhi	r3, #349	; 0x15d
 80211c6:	60a3      	strhi	r3, [r4, #8]
 80211c8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80211cc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80211d0:	bf98      	it	ls
 80211d2:	f04f 0900 	movls.w	r9, #0
 80211d6:	6023      	str	r3, [r4, #0]
 80211d8:	463d      	mov	r5, r7
 80211da:	f04f 0b00 	mov.w	fp, #0
 80211de:	6831      	ldr	r1, [r6, #0]
 80211e0:	ab03      	add	r3, sp, #12
 80211e2:	7809      	ldrb	r1, [r1, #0]
 80211e4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80211e8:	2202      	movs	r2, #2
 80211ea:	f7df f839 	bl	8000260 <memchr>
 80211ee:	b328      	cbz	r0, 802123c <_scanf_i+0xb8>
 80211f0:	f1bb 0f01 	cmp.w	fp, #1
 80211f4:	d159      	bne.n	80212aa <_scanf_i+0x126>
 80211f6:	6862      	ldr	r2, [r4, #4]
 80211f8:	b92a      	cbnz	r2, 8021206 <_scanf_i+0x82>
 80211fa:	6822      	ldr	r2, [r4, #0]
 80211fc:	2308      	movs	r3, #8
 80211fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8021202:	6063      	str	r3, [r4, #4]
 8021204:	6022      	str	r2, [r4, #0]
 8021206:	6822      	ldr	r2, [r4, #0]
 8021208:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 802120c:	6022      	str	r2, [r4, #0]
 802120e:	68a2      	ldr	r2, [r4, #8]
 8021210:	1e51      	subs	r1, r2, #1
 8021212:	60a1      	str	r1, [r4, #8]
 8021214:	b192      	cbz	r2, 802123c <_scanf_i+0xb8>
 8021216:	6832      	ldr	r2, [r6, #0]
 8021218:	1c51      	adds	r1, r2, #1
 802121a:	6031      	str	r1, [r6, #0]
 802121c:	7812      	ldrb	r2, [r2, #0]
 802121e:	f805 2b01 	strb.w	r2, [r5], #1
 8021222:	6872      	ldr	r2, [r6, #4]
 8021224:	3a01      	subs	r2, #1
 8021226:	2a00      	cmp	r2, #0
 8021228:	6072      	str	r2, [r6, #4]
 802122a:	dc07      	bgt.n	802123c <_scanf_i+0xb8>
 802122c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8021230:	4631      	mov	r1, r6
 8021232:	4650      	mov	r0, sl
 8021234:	4790      	blx	r2
 8021236:	2800      	cmp	r0, #0
 8021238:	f040 8085 	bne.w	8021346 <_scanf_i+0x1c2>
 802123c:	f10b 0b01 	add.w	fp, fp, #1
 8021240:	f1bb 0f03 	cmp.w	fp, #3
 8021244:	d1cb      	bne.n	80211de <_scanf_i+0x5a>
 8021246:	6863      	ldr	r3, [r4, #4]
 8021248:	b90b      	cbnz	r3, 802124e <_scanf_i+0xca>
 802124a:	230a      	movs	r3, #10
 802124c:	6063      	str	r3, [r4, #4]
 802124e:	6863      	ldr	r3, [r4, #4]
 8021250:	4945      	ldr	r1, [pc, #276]	; (8021368 <_scanf_i+0x1e4>)
 8021252:	6960      	ldr	r0, [r4, #20]
 8021254:	1ac9      	subs	r1, r1, r3
 8021256:	f000 f889 	bl	802136c <__sccl>
 802125a:	f04f 0b00 	mov.w	fp, #0
 802125e:	68a3      	ldr	r3, [r4, #8]
 8021260:	6822      	ldr	r2, [r4, #0]
 8021262:	2b00      	cmp	r3, #0
 8021264:	d03d      	beq.n	80212e2 <_scanf_i+0x15e>
 8021266:	6831      	ldr	r1, [r6, #0]
 8021268:	6960      	ldr	r0, [r4, #20]
 802126a:	f891 c000 	ldrb.w	ip, [r1]
 802126e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8021272:	2800      	cmp	r0, #0
 8021274:	d035      	beq.n	80212e2 <_scanf_i+0x15e>
 8021276:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 802127a:	d124      	bne.n	80212c6 <_scanf_i+0x142>
 802127c:	0510      	lsls	r0, r2, #20
 802127e:	d522      	bpl.n	80212c6 <_scanf_i+0x142>
 8021280:	f10b 0b01 	add.w	fp, fp, #1
 8021284:	f1b9 0f00 	cmp.w	r9, #0
 8021288:	d003      	beq.n	8021292 <_scanf_i+0x10e>
 802128a:	3301      	adds	r3, #1
 802128c:	f109 39ff 	add.w	r9, r9, #4294967295
 8021290:	60a3      	str	r3, [r4, #8]
 8021292:	6873      	ldr	r3, [r6, #4]
 8021294:	3b01      	subs	r3, #1
 8021296:	2b00      	cmp	r3, #0
 8021298:	6073      	str	r3, [r6, #4]
 802129a:	dd1b      	ble.n	80212d4 <_scanf_i+0x150>
 802129c:	6833      	ldr	r3, [r6, #0]
 802129e:	3301      	adds	r3, #1
 80212a0:	6033      	str	r3, [r6, #0]
 80212a2:	68a3      	ldr	r3, [r4, #8]
 80212a4:	3b01      	subs	r3, #1
 80212a6:	60a3      	str	r3, [r4, #8]
 80212a8:	e7d9      	b.n	802125e <_scanf_i+0xda>
 80212aa:	f1bb 0f02 	cmp.w	fp, #2
 80212ae:	d1ae      	bne.n	802120e <_scanf_i+0x8a>
 80212b0:	6822      	ldr	r2, [r4, #0]
 80212b2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80212b6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80212ba:	d1bf      	bne.n	802123c <_scanf_i+0xb8>
 80212bc:	2310      	movs	r3, #16
 80212be:	6063      	str	r3, [r4, #4]
 80212c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80212c4:	e7a2      	b.n	802120c <_scanf_i+0x88>
 80212c6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80212ca:	6022      	str	r2, [r4, #0]
 80212cc:	780b      	ldrb	r3, [r1, #0]
 80212ce:	f805 3b01 	strb.w	r3, [r5], #1
 80212d2:	e7de      	b.n	8021292 <_scanf_i+0x10e>
 80212d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80212d8:	4631      	mov	r1, r6
 80212da:	4650      	mov	r0, sl
 80212dc:	4798      	blx	r3
 80212de:	2800      	cmp	r0, #0
 80212e0:	d0df      	beq.n	80212a2 <_scanf_i+0x11e>
 80212e2:	6823      	ldr	r3, [r4, #0]
 80212e4:	05d9      	lsls	r1, r3, #23
 80212e6:	d50d      	bpl.n	8021304 <_scanf_i+0x180>
 80212e8:	42bd      	cmp	r5, r7
 80212ea:	d909      	bls.n	8021300 <_scanf_i+0x17c>
 80212ec:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80212f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80212f4:	4632      	mov	r2, r6
 80212f6:	4650      	mov	r0, sl
 80212f8:	4798      	blx	r3
 80212fa:	f105 39ff 	add.w	r9, r5, #4294967295
 80212fe:	464d      	mov	r5, r9
 8021300:	42bd      	cmp	r5, r7
 8021302:	d028      	beq.n	8021356 <_scanf_i+0x1d2>
 8021304:	6822      	ldr	r2, [r4, #0]
 8021306:	f012 0210 	ands.w	r2, r2, #16
 802130a:	d113      	bne.n	8021334 <_scanf_i+0x1b0>
 802130c:	702a      	strb	r2, [r5, #0]
 802130e:	6863      	ldr	r3, [r4, #4]
 8021310:	9e01      	ldr	r6, [sp, #4]
 8021312:	4639      	mov	r1, r7
 8021314:	4650      	mov	r0, sl
 8021316:	47b0      	blx	r6
 8021318:	f8d8 3000 	ldr.w	r3, [r8]
 802131c:	6821      	ldr	r1, [r4, #0]
 802131e:	1d1a      	adds	r2, r3, #4
 8021320:	f8c8 2000 	str.w	r2, [r8]
 8021324:	f011 0f20 	tst.w	r1, #32
 8021328:	681b      	ldr	r3, [r3, #0]
 802132a:	d00f      	beq.n	802134c <_scanf_i+0x1c8>
 802132c:	6018      	str	r0, [r3, #0]
 802132e:	68e3      	ldr	r3, [r4, #12]
 8021330:	3301      	adds	r3, #1
 8021332:	60e3      	str	r3, [r4, #12]
 8021334:	1bed      	subs	r5, r5, r7
 8021336:	44ab      	add	fp, r5
 8021338:	6925      	ldr	r5, [r4, #16]
 802133a:	445d      	add	r5, fp
 802133c:	6125      	str	r5, [r4, #16]
 802133e:	2000      	movs	r0, #0
 8021340:	b007      	add	sp, #28
 8021342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021346:	f04f 0b00 	mov.w	fp, #0
 802134a:	e7ca      	b.n	80212e2 <_scanf_i+0x15e>
 802134c:	07ca      	lsls	r2, r1, #31
 802134e:	bf4c      	ite	mi
 8021350:	8018      	strhmi	r0, [r3, #0]
 8021352:	6018      	strpl	r0, [r3, #0]
 8021354:	e7eb      	b.n	802132e <_scanf_i+0x1aa>
 8021356:	2001      	movs	r0, #1
 8021358:	e7f2      	b.n	8021340 <_scanf_i+0x1bc>
 802135a:	bf00      	nop
 802135c:	08024620 	.word	0x08024620
 8021360:	0801f745 	.word	0x0801f745
 8021364:	080214e9 	.word	0x080214e9
 8021368:	08026eeb 	.word	0x08026eeb

0802136c <__sccl>:
 802136c:	b570      	push	{r4, r5, r6, lr}
 802136e:	780b      	ldrb	r3, [r1, #0]
 8021370:	4604      	mov	r4, r0
 8021372:	2b5e      	cmp	r3, #94	; 0x5e
 8021374:	bf0b      	itete	eq
 8021376:	784b      	ldrbeq	r3, [r1, #1]
 8021378:	1c48      	addne	r0, r1, #1
 802137a:	1c88      	addeq	r0, r1, #2
 802137c:	2200      	movne	r2, #0
 802137e:	bf08      	it	eq
 8021380:	2201      	moveq	r2, #1
 8021382:	1e61      	subs	r1, r4, #1
 8021384:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8021388:	f801 2f01 	strb.w	r2, [r1, #1]!
 802138c:	42a9      	cmp	r1, r5
 802138e:	d1fb      	bne.n	8021388 <__sccl+0x1c>
 8021390:	b90b      	cbnz	r3, 8021396 <__sccl+0x2a>
 8021392:	3801      	subs	r0, #1
 8021394:	bd70      	pop	{r4, r5, r6, pc}
 8021396:	f082 0101 	eor.w	r1, r2, #1
 802139a:	54e1      	strb	r1, [r4, r3]
 802139c:	1c42      	adds	r2, r0, #1
 802139e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80213a2:	2d2d      	cmp	r5, #45	; 0x2d
 80213a4:	f102 36ff 	add.w	r6, r2, #4294967295
 80213a8:	4610      	mov	r0, r2
 80213aa:	d006      	beq.n	80213ba <__sccl+0x4e>
 80213ac:	2d5d      	cmp	r5, #93	; 0x5d
 80213ae:	d0f1      	beq.n	8021394 <__sccl+0x28>
 80213b0:	b90d      	cbnz	r5, 80213b6 <__sccl+0x4a>
 80213b2:	4630      	mov	r0, r6
 80213b4:	e7ee      	b.n	8021394 <__sccl+0x28>
 80213b6:	462b      	mov	r3, r5
 80213b8:	e7ef      	b.n	802139a <__sccl+0x2e>
 80213ba:	7816      	ldrb	r6, [r2, #0]
 80213bc:	2e5d      	cmp	r6, #93	; 0x5d
 80213be:	d0fa      	beq.n	80213b6 <__sccl+0x4a>
 80213c0:	42b3      	cmp	r3, r6
 80213c2:	dcf8      	bgt.n	80213b6 <__sccl+0x4a>
 80213c4:	4618      	mov	r0, r3
 80213c6:	3001      	adds	r0, #1
 80213c8:	4286      	cmp	r6, r0
 80213ca:	5421      	strb	r1, [r4, r0]
 80213cc:	dcfb      	bgt.n	80213c6 <__sccl+0x5a>
 80213ce:	43d8      	mvns	r0, r3
 80213d0:	4430      	add	r0, r6
 80213d2:	1c5d      	adds	r5, r3, #1
 80213d4:	42b3      	cmp	r3, r6
 80213d6:	bfa8      	it	ge
 80213d8:	2000      	movge	r0, #0
 80213da:	182b      	adds	r3, r5, r0
 80213dc:	3202      	adds	r2, #2
 80213de:	e7de      	b.n	802139e <__sccl+0x32>

080213e0 <_strtol_l.isra.0>:
 80213e0:	2b01      	cmp	r3, #1
 80213e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80213e6:	d001      	beq.n	80213ec <_strtol_l.isra.0+0xc>
 80213e8:	2b24      	cmp	r3, #36	; 0x24
 80213ea:	d906      	bls.n	80213fa <_strtol_l.isra.0+0x1a>
 80213ec:	f7fc fbc2 	bl	801db74 <__errno>
 80213f0:	2316      	movs	r3, #22
 80213f2:	6003      	str	r3, [r0, #0]
 80213f4:	2000      	movs	r0, #0
 80213f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80213fa:	4f3a      	ldr	r7, [pc, #232]	; (80214e4 <_strtol_l.isra.0+0x104>)
 80213fc:	468e      	mov	lr, r1
 80213fe:	4676      	mov	r6, lr
 8021400:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8021404:	5de5      	ldrb	r5, [r4, r7]
 8021406:	f015 0508 	ands.w	r5, r5, #8
 802140a:	d1f8      	bne.n	80213fe <_strtol_l.isra.0+0x1e>
 802140c:	2c2d      	cmp	r4, #45	; 0x2d
 802140e:	d134      	bne.n	802147a <_strtol_l.isra.0+0x9a>
 8021410:	f89e 4000 	ldrb.w	r4, [lr]
 8021414:	f04f 0801 	mov.w	r8, #1
 8021418:	f106 0e02 	add.w	lr, r6, #2
 802141c:	2b00      	cmp	r3, #0
 802141e:	d05c      	beq.n	80214da <_strtol_l.isra.0+0xfa>
 8021420:	2b10      	cmp	r3, #16
 8021422:	d10c      	bne.n	802143e <_strtol_l.isra.0+0x5e>
 8021424:	2c30      	cmp	r4, #48	; 0x30
 8021426:	d10a      	bne.n	802143e <_strtol_l.isra.0+0x5e>
 8021428:	f89e 4000 	ldrb.w	r4, [lr]
 802142c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8021430:	2c58      	cmp	r4, #88	; 0x58
 8021432:	d14d      	bne.n	80214d0 <_strtol_l.isra.0+0xf0>
 8021434:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8021438:	2310      	movs	r3, #16
 802143a:	f10e 0e02 	add.w	lr, lr, #2
 802143e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8021442:	f10c 3cff 	add.w	ip, ip, #4294967295
 8021446:	2600      	movs	r6, #0
 8021448:	fbbc f9f3 	udiv	r9, ip, r3
 802144c:	4635      	mov	r5, r6
 802144e:	fb03 ca19 	mls	sl, r3, r9, ip
 8021452:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8021456:	2f09      	cmp	r7, #9
 8021458:	d818      	bhi.n	802148c <_strtol_l.isra.0+0xac>
 802145a:	463c      	mov	r4, r7
 802145c:	42a3      	cmp	r3, r4
 802145e:	dd24      	ble.n	80214aa <_strtol_l.isra.0+0xca>
 8021460:	2e00      	cmp	r6, #0
 8021462:	db1f      	blt.n	80214a4 <_strtol_l.isra.0+0xc4>
 8021464:	45a9      	cmp	r9, r5
 8021466:	d31d      	bcc.n	80214a4 <_strtol_l.isra.0+0xc4>
 8021468:	d101      	bne.n	802146e <_strtol_l.isra.0+0x8e>
 802146a:	45a2      	cmp	sl, r4
 802146c:	db1a      	blt.n	80214a4 <_strtol_l.isra.0+0xc4>
 802146e:	fb05 4503 	mla	r5, r5, r3, r4
 8021472:	2601      	movs	r6, #1
 8021474:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8021478:	e7eb      	b.n	8021452 <_strtol_l.isra.0+0x72>
 802147a:	2c2b      	cmp	r4, #43	; 0x2b
 802147c:	bf08      	it	eq
 802147e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8021482:	46a8      	mov	r8, r5
 8021484:	bf08      	it	eq
 8021486:	f106 0e02 	addeq.w	lr, r6, #2
 802148a:	e7c7      	b.n	802141c <_strtol_l.isra.0+0x3c>
 802148c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8021490:	2f19      	cmp	r7, #25
 8021492:	d801      	bhi.n	8021498 <_strtol_l.isra.0+0xb8>
 8021494:	3c37      	subs	r4, #55	; 0x37
 8021496:	e7e1      	b.n	802145c <_strtol_l.isra.0+0x7c>
 8021498:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 802149c:	2f19      	cmp	r7, #25
 802149e:	d804      	bhi.n	80214aa <_strtol_l.isra.0+0xca>
 80214a0:	3c57      	subs	r4, #87	; 0x57
 80214a2:	e7db      	b.n	802145c <_strtol_l.isra.0+0x7c>
 80214a4:	f04f 36ff 	mov.w	r6, #4294967295
 80214a8:	e7e4      	b.n	8021474 <_strtol_l.isra.0+0x94>
 80214aa:	2e00      	cmp	r6, #0
 80214ac:	da05      	bge.n	80214ba <_strtol_l.isra.0+0xda>
 80214ae:	2322      	movs	r3, #34	; 0x22
 80214b0:	6003      	str	r3, [r0, #0]
 80214b2:	4665      	mov	r5, ip
 80214b4:	b942      	cbnz	r2, 80214c8 <_strtol_l.isra.0+0xe8>
 80214b6:	4628      	mov	r0, r5
 80214b8:	e79d      	b.n	80213f6 <_strtol_l.isra.0+0x16>
 80214ba:	f1b8 0f00 	cmp.w	r8, #0
 80214be:	d000      	beq.n	80214c2 <_strtol_l.isra.0+0xe2>
 80214c0:	426d      	negs	r5, r5
 80214c2:	2a00      	cmp	r2, #0
 80214c4:	d0f7      	beq.n	80214b6 <_strtol_l.isra.0+0xd6>
 80214c6:	b10e      	cbz	r6, 80214cc <_strtol_l.isra.0+0xec>
 80214c8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80214cc:	6011      	str	r1, [r2, #0]
 80214ce:	e7f2      	b.n	80214b6 <_strtol_l.isra.0+0xd6>
 80214d0:	2430      	movs	r4, #48	; 0x30
 80214d2:	2b00      	cmp	r3, #0
 80214d4:	d1b3      	bne.n	802143e <_strtol_l.isra.0+0x5e>
 80214d6:	2308      	movs	r3, #8
 80214d8:	e7b1      	b.n	802143e <_strtol_l.isra.0+0x5e>
 80214da:	2c30      	cmp	r4, #48	; 0x30
 80214dc:	d0a4      	beq.n	8021428 <_strtol_l.isra.0+0x48>
 80214de:	230a      	movs	r3, #10
 80214e0:	e7ad      	b.n	802143e <_strtol_l.isra.0+0x5e>
 80214e2:	bf00      	nop
 80214e4:	08026d95 	.word	0x08026d95

080214e8 <_strtol_r>:
 80214e8:	f7ff bf7a 	b.w	80213e0 <_strtol_l.isra.0>

080214ec <__submore>:
 80214ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80214f0:	460c      	mov	r4, r1
 80214f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80214f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80214f8:	4299      	cmp	r1, r3
 80214fa:	d11d      	bne.n	8021538 <__submore+0x4c>
 80214fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8021500:	f7fd f97e 	bl	801e800 <_malloc_r>
 8021504:	b918      	cbnz	r0, 802150e <__submore+0x22>
 8021506:	f04f 30ff 	mov.w	r0, #4294967295
 802150a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802150e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021512:	63a3      	str	r3, [r4, #56]	; 0x38
 8021514:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8021518:	6360      	str	r0, [r4, #52]	; 0x34
 802151a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802151e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8021522:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8021526:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802152a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 802152e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8021532:	6020      	str	r0, [r4, #0]
 8021534:	2000      	movs	r0, #0
 8021536:	e7e8      	b.n	802150a <__submore+0x1e>
 8021538:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802153a:	0077      	lsls	r7, r6, #1
 802153c:	463a      	mov	r2, r7
 802153e:	f7fe fe77 	bl	8020230 <_realloc_r>
 8021542:	4605      	mov	r5, r0
 8021544:	2800      	cmp	r0, #0
 8021546:	d0de      	beq.n	8021506 <__submore+0x1a>
 8021548:	eb00 0806 	add.w	r8, r0, r6
 802154c:	4601      	mov	r1, r0
 802154e:	4632      	mov	r2, r6
 8021550:	4640      	mov	r0, r8
 8021552:	f7fd f8df 	bl	801e714 <memcpy>
 8021556:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802155a:	f8c4 8000 	str.w	r8, [r4]
 802155e:	e7e9      	b.n	8021534 <__submore+0x48>

08021560 <_init>:
 8021560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021562:	bf00      	nop
 8021564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021566:	bc08      	pop	{r3}
 8021568:	469e      	mov	lr, r3
 802156a:	4770      	bx	lr

0802156c <_fini>:
 802156c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802156e:	bf00      	nop
 8021570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021572:	bc08      	pop	{r3}
 8021574:	469e      	mov	lr, r3
 8021576:	4770      	bx	lr

08021578 <__time_veneer>:
 8021578:	e51ff004 	ldr	pc, [pc, #-4]	; 802157c <__time_veneer+0x4>
 802157c:	200005bc 	.word	0x200005bc
