
ESP8266-TCP-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021b48  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005c9c  08021d28  08021d28  00031d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080279c4  080279c4  0004033c  2**0
                  CONTENTS
  4 .ARM          00000008  080279c4  080279c4  000379c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080279cc  080279cc  0004033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  080279cc  080279cc  000379cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  080279dc  080279dc  000379dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  080279ec  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b58  2000033c  08027d28  0004033c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e94  08027d28  00040e94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000689b8  00000000  00000000  0004036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000c0c0  00000000  00000000  000a8d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000042c8  00000000  00000000  000b4de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000040a8  00000000  00000000  000b90b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d83d  00000000  00000000  000bd158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ca66  00000000  00000000  000ea995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111934  00000000  00000000  001173fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00228d2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00014318  00000000  00000000  00228d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000033c 	.word	0x2000033c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08021d08 	.word	0x08021d08

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000340 	.word	0x20000340
 800021c:	08021d08 	.word	0x08021d08

08000220 <setjmp>:
 8000220:	46ec      	mov	ip, sp
 8000222:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000226:	f04f 0000 	mov.w	r0, #0
 800022a:	4770      	bx	lr

0800022c <longjmp>:
 800022c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000230:	46e5      	mov	sp, ip
 8000232:	0008      	movs	r0, r1
 8000234:	bf08      	it	eq
 8000236:	2001      	moveq	r0, #1
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <strcmp>:
 800024c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000254:	2a01      	cmp	r2, #1
 8000256:	bf28      	it	cs
 8000258:	429a      	cmpcs	r2, r3
 800025a:	d0f7      	beq.n	800024c <strcmp>
 800025c:	1ad0      	subs	r0, r2, r3
 800025e:	4770      	bx	lr

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__gedf2>:
 8000678:	f04f 3cff 	mov.w	ip, #4294967295
 800067c:	e006      	b.n	800068c <__cmpdf2+0x4>
 800067e:	bf00      	nop

08000680 <__ledf2>:
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	e002      	b.n	800068c <__cmpdf2+0x4>
 8000686:	bf00      	nop

08000688 <__cmpdf2>:
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800069c:	bf18      	it	ne
 800069e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006a2:	d01b      	beq.n	80006dc <__cmpdf2+0x54>
 80006a4:	b001      	add	sp, #4
 80006a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006aa:	bf0c      	ite	eq
 80006ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006b0:	ea91 0f03 	teqne	r1, r3
 80006b4:	bf02      	ittt	eq
 80006b6:	ea90 0f02 	teqeq	r0, r2
 80006ba:	2000      	moveq	r0, #0
 80006bc:	4770      	bxeq	lr
 80006be:	f110 0f00 	cmn.w	r0, #0
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf58      	it	pl
 80006c8:	4299      	cmppl	r1, r3
 80006ca:	bf08      	it	eq
 80006cc:	4290      	cmpeq	r0, r2
 80006ce:	bf2c      	ite	cs
 80006d0:	17d8      	asrcs	r0, r3, #31
 80006d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006d6:	f040 0001 	orr.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d102      	bne.n	80006ec <__cmpdf2+0x64>
 80006e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ea:	d107      	bne.n	80006fc <__cmpdf2+0x74>
 80006ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006f4:	d1d6      	bne.n	80006a4 <__cmpdf2+0x1c>
 80006f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006fa:	d0d3      	beq.n	80006a4 <__cmpdf2+0x1c>
 80006fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_cdrcmple>:
 8000704:	4684      	mov	ip, r0
 8000706:	4610      	mov	r0, r2
 8000708:	4662      	mov	r2, ip
 800070a:	468c      	mov	ip, r1
 800070c:	4619      	mov	r1, r3
 800070e:	4663      	mov	r3, ip
 8000710:	e000      	b.n	8000714 <__aeabi_cdcmpeq>
 8000712:	bf00      	nop

08000714 <__aeabi_cdcmpeq>:
 8000714:	b501      	push	{r0, lr}
 8000716:	f7ff ffb7 	bl	8000688 <__cmpdf2>
 800071a:	2800      	cmp	r0, #0
 800071c:	bf48      	it	mi
 800071e:	f110 0f00 	cmnmi.w	r0, #0
 8000722:	bd01      	pop	{r0, pc}

08000724 <__aeabi_dcmpeq>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff fff4 	bl	8000714 <__aeabi_cdcmpeq>
 800072c:	bf0c      	ite	eq
 800072e:	2001      	moveq	r0, #1
 8000730:	2000      	movne	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_dcmplt>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffea 	bl	8000714 <__aeabi_cdcmpeq>
 8000740:	bf34      	ite	cc
 8000742:	2001      	movcc	r0, #1
 8000744:	2000      	movcs	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_dcmple>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffe0 	bl	8000714 <__aeabi_cdcmpeq>
 8000754:	bf94      	ite	ls
 8000756:	2001      	movls	r0, #1
 8000758:	2000      	movhi	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_dcmpge>:
 8000760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000764:	f7ff ffce 	bl	8000704 <__aeabi_cdrcmple>
 8000768:	bf94      	ite	ls
 800076a:	2001      	movls	r0, #1
 800076c:	2000      	movhi	r0, #0
 800076e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000772:	bf00      	nop

08000774 <__aeabi_dcmpgt>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff ffc4 	bl	8000704 <__aeabi_cdrcmple>
 800077c:	bf34      	ite	cc
 800077e:	2001      	movcc	r0, #1
 8000780:	2000      	movcs	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_dcmpun>:
 8000788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800078c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000790:	d102      	bne.n	8000798 <__aeabi_dcmpun+0x10>
 8000792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000796:	d10a      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800079c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a0:	d102      	bne.n	80007a8 <__aeabi_dcmpun+0x20>
 80007a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007a6:	d102      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	f04f 0001 	mov.w	r0, #1
 80007b2:	4770      	bx	lr

080007b4 <__aeabi_ldivmod>:
 80007b4:	b97b      	cbnz	r3, 80007d6 <__aeabi_ldivmod+0x22>
 80007b6:	b972      	cbnz	r2, 80007d6 <__aeabi_ldivmod+0x22>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	bfbe      	ittt	lt
 80007bc:	2000      	movlt	r0, #0
 80007be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007c2:	e006      	blt.n	80007d2 <__aeabi_ldivmod+0x1e>
 80007c4:	bf08      	it	eq
 80007c6:	2800      	cmpeq	r0, #0
 80007c8:	bf1c      	itt	ne
 80007ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ce:	f04f 30ff 	movne.w	r0, #4294967295
 80007d2:	f000 b9b9 	b.w	8000b48 <__aeabi_idiv0>
 80007d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007de:	2900      	cmp	r1, #0
 80007e0:	db09      	blt.n	80007f6 <__aeabi_ldivmod+0x42>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db1a      	blt.n	800081c <__aeabi_ldivmod+0x68>
 80007e6:	f000 f84d 	bl	8000884 <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr
 80007f6:	4240      	negs	r0, r0
 80007f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db1b      	blt.n	8000838 <__aeabi_ldivmod+0x84>
 8000800:	f000 f840 	bl	8000884 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	4252      	negs	r2, r2
 8000816:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800081a:	4770      	bx	lr
 800081c:	4252      	negs	r2, r2
 800081e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000822:	f000 f82f 	bl	8000884 <__udivmoddi4>
 8000826:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082e:	b004      	add	sp, #16
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	4770      	bx	lr
 8000838:	4252      	negs	r2, r2
 800083a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800083e:	f000 f821 	bl	8000884 <__udivmoddi4>
 8000842:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084a:	b004      	add	sp, #16
 800084c:	4252      	negs	r2, r2
 800084e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000852:	4770      	bx	lr

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b96e 	b.w	8000b48 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468c      	mov	ip, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8083 	bne.w	800099a <__udivmoddi4+0x116>
 8000894:	428a      	cmp	r2, r1
 8000896:	4617      	mov	r7, r2
 8000898:	d947      	bls.n	800092a <__udivmoddi4+0xa6>
 800089a:	fab2 f282 	clz	r2, r2
 800089e:	b142      	cbz	r2, 80008b2 <__udivmoddi4+0x2e>
 80008a0:	f1c2 0020 	rsb	r0, r2, #32
 80008a4:	fa24 f000 	lsr.w	r0, r4, r0
 80008a8:	4091      	lsls	r1, r2
 80008aa:	4097      	lsls	r7, r2
 80008ac:	ea40 0c01 	orr.w	ip, r0, r1
 80008b0:	4094      	lsls	r4, r2
 80008b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008b6:	0c23      	lsrs	r3, r4, #16
 80008b8:	fbbc f6f8 	udiv	r6, ip, r8
 80008bc:	fa1f fe87 	uxth.w	lr, r7
 80008c0:	fb08 c116 	mls	r1, r8, r6, ip
 80008c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c8:	fb06 f10e 	mul.w	r1, r6, lr
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x60>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d6:	f080 8119 	bcs.w	8000b0c <__udivmoddi4+0x288>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 8116 	bls.w	8000b0c <__udivmoddi4+0x288>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ec:	fb08 3310 	mls	r3, r8, r0, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d909      	bls.n	8000910 <__udivmoddi4+0x8c>
 80008fc:	193c      	adds	r4, r7, r4
 80008fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000902:	f080 8105 	bcs.w	8000b10 <__udivmoddi4+0x28c>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f240 8102 	bls.w	8000b10 <__udivmoddi4+0x28c>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000914:	eba4 040e 	sub.w	r4, r4, lr
 8000918:	2600      	movs	r6, #0
 800091a:	b11d      	cbz	r5, 8000924 <__udivmoddi4+0xa0>
 800091c:	40d4      	lsrs	r4, r2
 800091e:	2300      	movs	r3, #0
 8000920:	e9c5 4300 	strd	r4, r3, [r5]
 8000924:	4631      	mov	r1, r6
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	b902      	cbnz	r2, 800092e <__udivmoddi4+0xaa>
 800092c:	deff      	udf	#255	; 0xff
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	2a00      	cmp	r2, #0
 8000934:	d150      	bne.n	80009d8 <__udivmoddi4+0x154>
 8000936:	1bcb      	subs	r3, r1, r7
 8000938:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093c:	fa1f f887 	uxth.w	r8, r7
 8000940:	2601      	movs	r6, #1
 8000942:	fbb3 fcfe 	udiv	ip, r3, lr
 8000946:	0c21      	lsrs	r1, r4, #16
 8000948:	fb0e 331c 	mls	r3, lr, ip, r3
 800094c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000950:	fb08 f30c 	mul.w	r3, r8, ip
 8000954:	428b      	cmp	r3, r1
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0xe4>
 8000958:	1879      	adds	r1, r7, r1
 800095a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0xe2>
 8000960:	428b      	cmp	r3, r1
 8000962:	f200 80e9 	bhi.w	8000b38 <__udivmoddi4+0x2b4>
 8000966:	4684      	mov	ip, r0
 8000968:	1ac9      	subs	r1, r1, r3
 800096a:	b2a3      	uxth	r3, r4
 800096c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000970:	fb0e 1110 	mls	r1, lr, r0, r1
 8000974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000978:	fb08 f800 	mul.w	r8, r8, r0
 800097c:	45a0      	cmp	r8, r4
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0x10c>
 8000980:	193c      	adds	r4, r7, r4
 8000982:	f100 33ff 	add.w	r3, r0, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x10a>
 8000988:	45a0      	cmp	r8, r4
 800098a:	f200 80d9 	bhi.w	8000b40 <__udivmoddi4+0x2bc>
 800098e:	4618      	mov	r0, r3
 8000990:	eba4 0408 	sub.w	r4, r4, r8
 8000994:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000998:	e7bf      	b.n	800091a <__udivmoddi4+0x96>
 800099a:	428b      	cmp	r3, r1
 800099c:	d909      	bls.n	80009b2 <__udivmoddi4+0x12e>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	f000 80b1 	beq.w	8000b06 <__udivmoddi4+0x282>
 80009a4:	2600      	movs	r6, #0
 80009a6:	e9c5 0100 	strd	r0, r1, [r5]
 80009aa:	4630      	mov	r0, r6
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	fab3 f683 	clz	r6, r3
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d14a      	bne.n	8000a50 <__udivmoddi4+0x1cc>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0x140>
 80009be:	4282      	cmp	r2, r0
 80009c0:	f200 80b8 	bhi.w	8000b34 <__udivmoddi4+0x2b0>
 80009c4:	1a84      	subs	r4, r0, r2
 80009c6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	468c      	mov	ip, r1
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d0a8      	beq.n	8000924 <__udivmoddi4+0xa0>
 80009d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0xa0>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa20 f603 	lsr.w	r6, r0, r3
 80009e0:	4097      	lsls	r7, r2
 80009e2:	fa01 f002 	lsl.w	r0, r1, r2
 80009e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	4330      	orrs	r0, r6
 80009ee:	0c03      	lsrs	r3, r0, #16
 80009f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009f4:	fa1f f887 	uxth.w	r8, r7
 80009f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a00:	fb06 f108 	mul.w	r1, r6, r8
 8000a04:	4299      	cmp	r1, r3
 8000a06:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x19c>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a12:	f080 808d 	bcs.w	8000b30 <__udivmoddi4+0x2ac>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 808a 	bls.w	8000b30 <__udivmoddi4+0x2ac>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	443b      	add	r3, r7
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b281      	uxth	r1, r0
 8000a24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb00 f308 	mul.w	r3, r0, r8
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x1c4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a3e:	d273      	bcs.n	8000b28 <__udivmoddi4+0x2a4>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d971      	bls.n	8000b28 <__udivmoddi4+0x2a4>
 8000a44:	3802      	subs	r0, #2
 8000a46:	4439      	add	r1, r7
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a4e:	e778      	b.n	8000942 <__udivmoddi4+0xbe>
 8000a50:	f1c6 0c20 	rsb	ip, r6, #32
 8000a54:	fa03 f406 	lsl.w	r4, r3, r6
 8000a58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a62:	fa01 f306 	lsl.w	r3, r1, r6
 8000a66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a6e:	431f      	orrs	r7, r3
 8000a70:	0c3b      	lsrs	r3, r7, #16
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fa1f f884 	uxth.w	r8, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a82:	fb09 fa08 	mul.w	sl, r9, r8
 8000a86:	458a      	cmp	sl, r1
 8000a88:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x220>
 8000a92:	1861      	adds	r1, r4, r1
 8000a94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a98:	d248      	bcs.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9a:	458a      	cmp	sl, r1
 8000a9c:	d946      	bls.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa2:	4421      	add	r1, r4
 8000aa4:	eba1 010a 	sub.w	r1, r1, sl
 8000aa8:	b2bf      	uxth	r7, r7
 8000aaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000aae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ab6:	fb00 f808 	mul.w	r8, r0, r8
 8000aba:	45b8      	cmp	r8, r7
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x24a>
 8000abe:	19e7      	adds	r7, r4, r7
 8000ac0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac4:	d22e      	bcs.n	8000b24 <__udivmoddi4+0x2a0>
 8000ac6:	45b8      	cmp	r8, r7
 8000ac8:	d92c      	bls.n	8000b24 <__udivmoddi4+0x2a0>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4427      	add	r7, r4
 8000ace:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad2:	eba7 0708 	sub.w	r7, r7, r8
 8000ad6:	fba0 8902 	umull	r8, r9, r0, r2
 8000ada:	454f      	cmp	r7, r9
 8000adc:	46c6      	mov	lr, r8
 8000ade:	4649      	mov	r1, r9
 8000ae0:	d31a      	bcc.n	8000b18 <__udivmoddi4+0x294>
 8000ae2:	d017      	beq.n	8000b14 <__udivmoddi4+0x290>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x27a>
 8000ae6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aea:	eb67 0701 	sbc.w	r7, r7, r1
 8000aee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000af2:	40f2      	lsrs	r2, r6
 8000af4:	ea4c 0202 	orr.w	r2, ip, r2
 8000af8:	40f7      	lsrs	r7, r6
 8000afa:	e9c5 2700 	strd	r2, r7, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e70b      	b.n	8000924 <__udivmoddi4+0xa0>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e9      	b.n	80008e4 <__udivmoddi4+0x60>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6fd      	b.n	8000910 <__udivmoddi4+0x8c>
 8000b14:	4543      	cmp	r3, r8
 8000b16:	d2e5      	bcs.n	8000ae4 <__udivmoddi4+0x260>
 8000b18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7df      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b24:	4608      	mov	r0, r1
 8000b26:	e7d2      	b.n	8000ace <__udivmoddi4+0x24a>
 8000b28:	4660      	mov	r0, ip
 8000b2a:	e78d      	b.n	8000a48 <__udivmoddi4+0x1c4>
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	e7b9      	b.n	8000aa4 <__udivmoddi4+0x220>
 8000b30:	4666      	mov	r6, ip
 8000b32:	e775      	b.n	8000a20 <__udivmoddi4+0x19c>
 8000b34:	4630      	mov	r0, r6
 8000b36:	e74a      	b.n	80009ce <__udivmoddi4+0x14a>
 8000b38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b3c:	4439      	add	r1, r7
 8000b3e:	e713      	b.n	8000968 <__udivmoddi4+0xe4>
 8000b40:	3802      	subs	r0, #2
 8000b42:	443c      	add	r4, r7
 8000b44:	e724      	b.n	8000990 <__udivmoddi4+0x10c>
 8000b46:	bf00      	nop

08000b48 <__aeabi_idiv0>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f000 fed3 	bl	800192c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a32      	ldr	r2, [pc, #200]	; (8000c7c <HAL_UART_MspInit+0xe8>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	4a31      	ldr	r2, [pc, #196]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a2b      	ldr	r2, [pc, #172]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f000 fc16 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c08:	e034      	b.n	8000c74 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <HAL_UART_MspInit+0xf0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d12f      	bne.n	8000c74 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480a      	ldr	r0, [pc, #40]	; (8000c88 <HAL_UART_MspInit+0xf4>)
 8000c60:	f000 fbe8 	bl	8001434 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2025      	movs	r0, #37	; 0x25
 8000c6a:	f000 faee 	bl	800124a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c6e:	2025      	movs	r0, #37	; 0x25
 8000c70:	f000 fb05 	bl	800127e <HAL_NVIC_EnableIRQ>
}
 8000c74:	bf00      	nop
 8000c76:	3730      	adds	r7, #48	; 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40008000 	.word	0x40008000
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40013800 	.word	0x40013800
 8000c88:	48000800 	.word	0x48000800

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f99c 	bl	8001014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <USART1_IRQHandler+0x10>)
 8000ce6:	f001 fe01 	bl	80028ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000408 	.word	0x20000408

08000cf4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cf8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cfc:	f000 fd4e 	bl	800179c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d10:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d013      	beq.n	8000d44 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d20:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d24:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00b      	beq.n	8000d44 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d2c:	e000      	b.n	8000d30 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d2e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f9      	beq.n	8000d2e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d3a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d44:	687b      	ldr	r3, [r7, #4]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
	return 1;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_kill>:

int _kill(int pid, int sig)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d6c:	f01d fad6 	bl	801e31c <__errno>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2216      	movs	r2, #22
 8000d74:	601a      	str	r2, [r3, #0]
	return -1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_exit>:

void _exit (int status)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ffe7 	bl	8000d62 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d94:	e7fe      	b.n	8000d94 <_exit+0x12>

08000d96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e00a      	b.n	8000dbe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000da8:	f3af 8000 	nop.w
 8000dac:	4601      	mov	r1, r0
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1c5a      	adds	r2, r3, #1
 8000db2:	60ba      	str	r2, [r7, #8]
 8000db4:	b2ca      	uxtb	r2, r1
 8000db6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	dbf0      	blt.n	8000da8 <_read+0x12>
	}

return len;
 8000dc6:	687b      	ldr	r3, [r7, #4]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	e009      	b.n	8000df6 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	60ba      	str	r2, [r7, #8]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff8a 	bl	8000d04 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3301      	adds	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dbf1      	blt.n	8000de2 <_write+0x12>
	}
	return len;
 8000dfe:	687b      	ldr	r3, [r7, #4]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <_close>:

int _close(int file)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	return -1;
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e30:	605a      	str	r2, [r3, #4]
	return 0;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_isatty>:

int _isatty(int file)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	return 1;
 8000e48:	2301      	movs	r3, #1
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b085      	sub	sp, #20
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
	return 0;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_open>:

int _open(char *path, int flags, ...)
{
 8000e70:	b40e      	push	{r1, r2, r3}
 8000e72:	b480      	push	{r7}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	b003      	add	sp, #12
 8000e8a:	4770      	bx	lr

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f01d fa2e 	bl	801e31c <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20020000 	.word	0x20020000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	2000035c 	.word	0x2000035c
 8000ef4:	20000e98 	.word	0x20000e98

08000ef8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f1e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f22:	490e      	ldr	r1, [pc, #56]	; (8000f5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <LoopForever+0xe>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f38:	4c0b      	ldr	r4, [pc, #44]	; (8000f68 <LoopForever+0x16>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f46:	f7ff ffd7 	bl	8000ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f01d fe05 	bl	801eb58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f4e:	f002 ff37 	bl	8003dc0 <main>

08000f52 <LoopForever>:

LoopForever:
    b LoopForever
 8000f52:	e7fe      	b.n	8000f52 <LoopForever>
  ldr   r0, =_estack
 8000f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8000f60:	080279ec 	.word	0x080279ec
  ldr r2, =_sbss
 8000f64:	2000033c 	.word	0x2000033c
  ldr r4, =_ebss
 8000f68:	20000e94 	.word	0x20000e94

08000f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC1_2_IRQHandler>

08000f6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 f95b 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 f80e 	bl	8000fa0 <HAL_InitTick>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	e001      	b.n	8000f94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f90:	f7ff fddc 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f94:	79fb      	ldrb	r3, [r7, #7]

}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_InitTick+0x68>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d022      	beq.n	8000ffa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_InitTick+0x6c>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_InitTick+0x68>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f966 	bl	800129a <HAL_SYSTICK_Config>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10f      	bne.n	8000ff4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b0f      	cmp	r3, #15
 8000fd8:	d809      	bhi.n	8000fee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe2:	f000 f932 	bl	800124a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <HAL_InitTick+0x70>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e007      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e004      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e001      	b.n	8000ffe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000000c 	.word	0x2000000c
 800100c:	20000004 	.word	0x20000004
 8001010:	20000008 	.word	0x20000008

08001014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_IncTick+0x1c>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_IncTick+0x20>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4413      	add	r3, r2
 8001022:	4a03      	ldr	r2, [pc, #12]	; (8001030 <HAL_IncTick+0x1c>)
 8001024:	6013      	str	r3, [r2, #0]
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	20000e80 	.word	0x20000e80
 8001034:	2000000c 	.word	0x2000000c

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000e80 	.word	0x20000e80

08001050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff ffee 	bl	8001038 <HAL_GetTick>
 800105c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001068:	d004      	beq.n	8001074 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_Delay+0x40>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	4413      	add	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001074:	bf00      	nop
 8001076:	f7ff ffdf 	bl	8001038 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	429a      	cmp	r2, r3
 8001084:	d8f7      	bhi.n	8001076 <HAL_Delay+0x26>
  {
  }
}
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2000000c 	.word	0x2000000c

08001094 <__NVIC_SetPriorityGrouping>:
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b0:	4013      	ands	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	60d3      	str	r3, [r2, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_GetPriorityGrouping>:
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <__NVIC_GetPriorityGrouping+0x18>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	f003 0307 	and.w	r3, r3, #7
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_EnableIRQ>:
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	db0b      	blt.n	8001122 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	f003 021f 	and.w	r2, r3, #31
 8001110:	4907      	ldr	r1, [pc, #28]	; (8001130 <__NVIC_EnableIRQ+0x38>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	095b      	lsrs	r3, r3, #5
 8001118:	2001      	movs	r0, #1
 800111a:	fa00 f202 	lsl.w	r2, r0, r2
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000e100 	.word	0xe000e100

08001134 <__NVIC_SetPriority>:
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	; (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	; (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <SysTick_Config>:
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001200:	d301      	bcc.n	8001206 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001202:	2301      	movs	r3, #1
 8001204:	e00f      	b.n	8001226 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <SysTick_Config+0x40>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120e:	210f      	movs	r1, #15
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f7ff ff8e 	bl	8001134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <SysTick_Config+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <SysTick_Config+0x40>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff29 	bl	8001094 <__NVIC_SetPriorityGrouping>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff40 	bl	80010dc <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff90 	bl	8001188 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5f 	bl	8001134 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff33 	bl	80010f8 <__NVIC_EnableIRQ>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffa4 	bl	80011f0 <SysTick_Config>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b085      	sub	sp, #20
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d005      	beq.n	80012d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2204      	movs	r2, #4
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e037      	b.n	8001346 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 020e 	bic.w	r2, r2, #14
 80012e4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012f4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0201 	bic.w	r2, r2, #1
 8001304:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f003 021f 	and.w	r2, r3, #31
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	2101      	movs	r1, #1
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001322:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00c      	beq.n	8001346 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001336:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800133a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001344:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d00d      	beq.n	8001398 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2204      	movs	r2, #4
 8001380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	73fb      	strb	r3, [r7, #15]
 8001396:	e047      	b.n	8001428 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 020e 	bic.w	r2, r2, #14
 80013a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0201 	bic.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	2101      	movs	r1, #1
 80013d6:	fa01 f202 	lsl.w	r2, r1, r2
 80013da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00c      	beq.n	8001408 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001406:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	4798      	blx	r3
    }
  }
  return status;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001442:	e15a      	b.n	80016fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2101      	movs	r1, #1
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	fa01 f303 	lsl.w	r3, r1, r3
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 814c 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d00b      	beq.n	800147c <HAL_GPIO_Init+0x48>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d007      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001470:	2b11      	cmp	r3, #17
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b12      	cmp	r3, #18
 800147a:	d130      	bne.n	80014de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014b2:	2201      	movs	r2, #1
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	f003 0201 	and.w	r2, r3, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0xea>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b12      	cmp	r3, #18
 800151c:	d123      	bne.n	8001566 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	08da      	lsrs	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3208      	adds	r2, #8
 8001526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3208      	adds	r2, #8
 8001560:	6939      	ldr	r1, [r7, #16]
 8001562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0203 	and.w	r2, r3, #3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80a6 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a8:	4b5b      	ldr	r3, [pc, #364]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ac:	4a5a      	ldr	r2, [pc, #360]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6613      	str	r3, [r2, #96]	; 0x60
 80015b4:	4b58      	ldr	r3, [pc, #352]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015c0:	4a56      	ldr	r2, [pc, #344]	; (800171c <HAL_GPIO_Init+0x2e8>)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3302      	adds	r3, #2
 80015c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	220f      	movs	r2, #15
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015ea:	d01f      	beq.n	800162c <HAL_GPIO_Init+0x1f8>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a4c      	ldr	r2, [pc, #304]	; (8001720 <HAL_GPIO_Init+0x2ec>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d019      	beq.n	8001628 <HAL_GPIO_Init+0x1f4>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a4b      	ldr	r2, [pc, #300]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d013      	beq.n	8001624 <HAL_GPIO_Init+0x1f0>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a4a      	ldr	r2, [pc, #296]	; (8001728 <HAL_GPIO_Init+0x2f4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d00d      	beq.n	8001620 <HAL_GPIO_Init+0x1ec>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a49      	ldr	r2, [pc, #292]	; (800172c <HAL_GPIO_Init+0x2f8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d007      	beq.n	800161c <HAL_GPIO_Init+0x1e8>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a48      	ldr	r2, [pc, #288]	; (8001730 <HAL_GPIO_Init+0x2fc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d101      	bne.n	8001618 <HAL_GPIO_Init+0x1e4>
 8001614:	2305      	movs	r3, #5
 8001616:	e00a      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001618:	2306      	movs	r3, #6
 800161a:	e008      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800161c:	2304      	movs	r3, #4
 800161e:	e006      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001620:	2303      	movs	r3, #3
 8001622:	e004      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001624:	2302      	movs	r3, #2
 8001626:	e002      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800162c:	2300      	movs	r3, #0
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	f002 0203 	and.w	r2, r2, #3
 8001634:	0092      	lsls	r2, r2, #2
 8001636:	4093      	lsls	r3, r2
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800163e:	4937      	ldr	r1, [pc, #220]	; (800171c <HAL_GPIO_Init+0x2e8>)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800164c:	4b39      	ldr	r3, [pc, #228]	; (8001734 <HAL_GPIO_Init+0x300>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001670:	4a30      	ldr	r2, [pc, #192]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001676:	4b2f      	ldr	r3, [pc, #188]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800169a:	4a26      	ldr	r2, [pc, #152]	; (8001734 <HAL_GPIO_Init+0x300>)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016c4:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	3301      	adds	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	f47f ae9d 	bne.w	8001444 <HAL_GPIO_Init+0x10>
  }
}
 800170a:	bf00      	nop
 800170c:	bf00      	nop
 800170e:	371c      	adds	r7, #28
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40021000 	.word	0x40021000
 800171c:	40010000 	.word	0x40010000
 8001720:	48000400 	.word	0x48000400
 8001724:	48000800 	.word	0x48000800
 8001728:	48000c00 	.word	0x48000c00
 800172c:	48001000 	.word	0x48001000
 8001730:	48001400 	.word	0x48001400
 8001734:	40010400 	.word	0x40010400

08001738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
 8001744:	4613      	mov	r3, r2
 8001746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001748:	787b      	ldrb	r3, [r7, #1]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800174e:	887a      	ldrh	r2, [r7, #2]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001754:	e002      	b.n	800175c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800177a:	887a      	ldrh	r2, [r7, #2]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4013      	ands	r3, r2
 8001780:	041a      	lsls	r2, r3, #16
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43d9      	mvns	r1, r3
 8001786:	887b      	ldrh	r3, [r7, #2]
 8001788:	400b      	ands	r3, r1
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	619a      	str	r2, [r3, #24]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f806 	bl	80017cc <HAL_GPIO_EXTI_Callback>
  }
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d141      	bne.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017f2:	4b4b      	ldr	r3, [pc, #300]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fe:	d131      	bne.n	8001864 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001800:	4b47      	ldr	r3, [pc, #284]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001806:	4a46      	ldr	r2, [pc, #280]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800180c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001810:	4b43      	ldr	r3, [pc, #268]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001818:	4a41      	ldr	r2, [pc, #260]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001820:	4b40      	ldr	r3, [pc, #256]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2232      	movs	r2, #50	; 0x32
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	4a3f      	ldr	r2, [pc, #252]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	0c9b      	lsrs	r3, r3, #18
 8001832:	3301      	adds	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001836:	e002      	b.n	800183e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3b01      	subs	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800183e:	4b38      	ldr	r3, [pc, #224]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800184a:	d102      	bne.n	8001852 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f2      	bne.n	8001838 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001852:	4b33      	ldr	r3, [pc, #204]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800185e:	d158      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e057      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001864:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800186a:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800186c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001874:	e04d      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800187c:	d141      	bne.n	8001902 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188a:	d131      	bne.n	80018f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800188c:	4b24      	ldr	r3, [pc, #144]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800188e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001892:	4a23      	ldr	r2, [pc, #140]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800189c:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018a4:	4a1e      	ldr	r2, [pc, #120]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2232      	movs	r2, #50	; 0x32
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018b8:	fba2 2303 	umull	r2, r3, r2, r3
 80018bc:	0c9b      	lsrs	r3, r3, #18
 80018be:	3301      	adds	r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018c2:	e002      	b.n	80018ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d6:	d102      	bne.n	80018de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f2      	bne.n	80018c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ea:	d112      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e011      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001900:	e007      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001910:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	40007000 	.word	0x40007000
 8001924:	20000004 	.word	0x20000004
 8001928:	431bde83 	.word	0x431bde83

0800192c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193a:	6093      	str	r3, [r2, #8]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40007000 	.word	0x40007000

0800194c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e308      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d075      	beq.n	8001a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800196a:	4ba3      	ldr	r3, [pc, #652]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001974:	4ba0      	ldr	r3, [pc, #640]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	2b0c      	cmp	r3, #12
 8001982:	d102      	bne.n	800198a <HAL_RCC_OscConfig+0x3e>
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2b03      	cmp	r3, #3
 8001988:	d002      	beq.n	8001990 <HAL_RCC_OscConfig+0x44>
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	2b08      	cmp	r3, #8
 800198e:	d10b      	bne.n	80019a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	4b99      	ldr	r3, [pc, #612]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d05b      	beq.n	8001a54 <HAL_RCC_OscConfig+0x108>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d157      	bne.n	8001a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e2e3      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b0:	d106      	bne.n	80019c0 <HAL_RCC_OscConfig+0x74>
 80019b2:	4b91      	ldr	r3, [pc, #580]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a90      	ldr	r2, [pc, #576]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e01d      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x98>
 80019ca:	4b8b      	ldr	r3, [pc, #556]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a8a      	ldr	r2, [pc, #552]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a87      	ldr	r2, [pc, #540]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019e4:	4b84      	ldr	r3, [pc, #528]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a83      	ldr	r2, [pc, #524]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b81      	ldr	r3, [pc, #516]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a80      	ldr	r2, [pc, #512]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fb18 	bl	8001038 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fb14 	bl	8001038 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e2a8      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a1e:	4b76      	ldr	r3, [pc, #472]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0xc0>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fb04 	bl	8001038 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fb00 	bl	8001038 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e294      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a46:	4b6c      	ldr	r3, [pc, #432]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0xe8>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d075      	beq.n	8001b4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a62:	4b65      	ldr	r3, [pc, #404]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a6c:	4b62      	ldr	r3, [pc, #392]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	2b0c      	cmp	r3, #12
 8001a7a:	d102      	bne.n	8001a82 <HAL_RCC_OscConfig+0x136>
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d002      	beq.n	8001a88 <HAL_RCC_OscConfig+0x13c>
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d11f      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a88:	4b5b      	ldr	r3, [pc, #364]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x154>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e267      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa0:	4b55      	ldr	r3, [pc, #340]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	061b      	lsls	r3, r3, #24
 8001aae:	4952      	ldr	r1, [pc, #328]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ab4:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <HAL_RCC_OscConfig+0x2b0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fa71 	bl	8000fa0 <HAL_InitTick>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d043      	beq.n	8001b4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e253      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d023      	beq.n	8001b18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad0:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a48      	ldr	r2, [pc, #288]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff faac 	bl	8001038 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae4:	f7ff faa8 	bl	8001038 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e23c      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af6:	4b40      	ldr	r3, [pc, #256]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	061b      	lsls	r3, r3, #24
 8001b10:	4939      	ldr	r1, [pc, #228]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
 8001b16:	e01a      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b18:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a36      	ldr	r2, [pc, #216]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff fa88 	bl	8001038 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fa84 	bl	8001038 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e218      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b3e:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x1e0>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d03c      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d01c      	beq.n	8001b9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b62:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b68:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b72:	f7ff fa61 	bl	8001038 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7a:	f7ff fa5d 	bl	8001038 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1f1      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0ef      	beq.n	8001b7a <HAL_RCC_OscConfig+0x22e>
 8001b9a:	e01b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba2:	4a15      	ldr	r2, [pc, #84]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7ff fa44 	bl	8001038 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fa40 	bl	8001038 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e1d4      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1ef      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80ab 	beq.w	8001d38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001be6:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d106      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2b4>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e005      	b.n	8001c02 <HAL_RCC_OscConfig+0x2b6>
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	2300      	movs	r3, #0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00d      	beq.n	8001c22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	4baf      	ldr	r3, [pc, #700]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	4aae      	ldr	r2, [pc, #696]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6593      	str	r3, [r2, #88]	; 0x58
 8001c12:	4bac      	ldr	r3, [pc, #688]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c22:	4ba9      	ldr	r3, [pc, #676]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d118      	bne.n	8001c60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c2e:	4ba6      	ldr	r3, [pc, #664]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4aa5      	ldr	r2, [pc, #660]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3a:	f7ff f9fd 	bl	8001038 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c42:	f7ff f9f9 	bl	8001038 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e18d      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c54:	4b9c      	ldr	r3, [pc, #624]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d108      	bne.n	8001c7a <HAL_RCC_OscConfig+0x32e>
 8001c68:	4b96      	ldr	r3, [pc, #600]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6e:	4a95      	ldr	r2, [pc, #596]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c78:	e024      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	d110      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x358>
 8001c82:	4b90      	ldr	r3, [pc, #576]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c88:	4a8e      	ldr	r2, [pc, #568]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c92:	4b8c      	ldr	r3, [pc, #560]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c98:	4a8a      	ldr	r2, [pc, #552]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca2:	e00f      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001ca4:	4b87      	ldr	r3, [pc, #540]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001caa:	4a86      	ldr	r2, [pc, #536]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb4:	4b83      	ldr	r3, [pc, #524]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	4a82      	ldr	r2, [pc, #520]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cbc:	f023 0304 	bic.w	r3, r3, #4
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d016      	beq.n	8001cfa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f9b4 	bl	8001038 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f9b0 	bl	8001038 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e142      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cea:	4b76      	ldr	r3, [pc, #472]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0ed      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x388>
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f99d 	bl	8001038 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7ff f999 	bl	8001038 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e12b      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d18:	4b6a      	ldr	r3, [pc, #424]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ed      	bne.n	8001d02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d26:	7ffb      	ldrb	r3, [r7, #31]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2c:	4b65      	ldr	r3, [pc, #404]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	4a64      	ldr	r2, [pc, #400]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d03c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01c      	beq.n	8001d86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d4c:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d52:	4a5c      	ldr	r2, [pc, #368]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7ff f96c 	bl	8001038 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d64:	f7ff f968 	bl	8001038 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e0fc      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d76:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0ef      	beq.n	8001d64 <HAL_RCC_OscConfig+0x418>
 8001d84:	e01b      	b.n	8001dbe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d86:	4b4f      	ldr	r3, [pc, #316]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d8c:	4a4d      	ldr	r2, [pc, #308]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d96:	f7ff f94f 	bl	8001038 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d9e:	f7ff f94b 	bl	8001038 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e0df      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001db0:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ef      	bne.n	8001d9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80d3 	beq.w	8001f6e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dc8:	4b3e      	ldr	r3, [pc, #248]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b0c      	cmp	r3, #12
 8001dd2:	f000 808d 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d15a      	bne.n	8001e94 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a38      	ldr	r2, [pc, #224]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dea:	f7ff f925 	bl	8001038 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7ff f921 	bl	8001038 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e0b5      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e04:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e10:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_RCC_OscConfig+0x580>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6a11      	ldr	r1, [r2, #32]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e20:	3a01      	subs	r2, #1
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	4311      	orrs	r1, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e2a:	0212      	lsls	r2, r2, #8
 8001e2c:	4311      	orrs	r1, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e32:	0852      	lsrs	r2, r2, #1
 8001e34:	3a01      	subs	r2, #1
 8001e36:	0552      	lsls	r2, r2, #21
 8001e38:	4311      	orrs	r1, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e3e:	0852      	lsrs	r2, r2, #1
 8001e40:	3a01      	subs	r2, #1
 8001e42:	0652      	lsls	r2, r2, #25
 8001e44:	4311      	orrs	r1, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e4a:	06d2      	lsls	r2, r2, #27
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	491d      	ldr	r1, [pc, #116]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e54:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1a      	ldr	r2, [pc, #104]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f8e4 	bl	8001038 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e74:	f7ff f8e0 	bl	8001038 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e074      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x528>
 8001e92:	e06c      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e9e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea6:	f023 0303 	bic.w	r3, r3, #3
 8001eaa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eb2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f8bc 	bl	8001038 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec2:	e00e      	b.n	8001ee2 <HAL_RCC_OscConfig+0x596>
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7ff f8b2 	bl	8001038 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e046      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee2:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x584>
 8001eee:	e03e      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e039      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f003 0203 	and.w	r2, r3, #3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d12c      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d123      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d11b      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d113      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d109      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f60:	085b      	lsrs	r3, r3, #1
 8001f62:	3b01      	subs	r3, #1
 8001f64:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000

08001f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e11e      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b91      	ldr	r3, [pc, #580]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d910      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b8e      	ldr	r3, [pc, #568]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 020f 	bic.w	r2, r3, #15
 8001faa:	498c      	ldr	r1, [pc, #560]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b8a      	ldr	r3, [pc, #552]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e106      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d073      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d129      	bne.n	800202c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd8:	4b81      	ldr	r3, [pc, #516]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0f4      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001fe8:	f000 f99e 	bl	8002328 <RCC_GetSysClockFreqFromPLLSource>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4a7c      	ldr	r2, [pc, #496]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d93f      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ff6:	4b7a      	ldr	r3, [pc, #488]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800200a:	2b00      	cmp	r3, #0
 800200c:	d033      	beq.n	8002076 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002012:	2b00      	cmp	r3, #0
 8002014:	d12f      	bne.n	8002076 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002016:	4b72      	ldr	r3, [pc, #456]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800201e:	4a70      	ldr	r2, [pc, #448]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002024:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e024      	b.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d107      	bne.n	8002044 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002034:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d109      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0c6      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002044:	4b66      	ldr	r3, [pc, #408]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0be      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002054:	f000 f8ce 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 8002058:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4a61      	ldr	r2, [pc, #388]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d909      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002062:	4b5f      	ldr	r3, [pc, #380]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800206a:	4a5d      	ldr	r2, [pc, #372]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 800206c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002070:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002076:	4b5a      	ldr	r3, [pc, #360]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f023 0203 	bic.w	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4957      	ldr	r1, [pc, #348]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002084:	4313      	orrs	r3, r2
 8002086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002088:	f7fe ffd6 	bl	8001038 <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002090:	f7fe ffd2 	bl	8001038 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	; 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e095      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	4b4e      	ldr	r3, [pc, #312]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 020c 	and.w	r2, r3, #12
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d1eb      	bne.n	8002090 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d023      	beq.n	800210c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d0:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a42      	ldr	r2, [pc, #264]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d007      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80020e8:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80020f0:	4a3b      	ldr	r2, [pc, #236]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f8:	4b39      	ldr	r3, [pc, #228]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	4936      	ldr	r1, [pc, #216]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]
 800210a:	e008      	b.n	800211e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b80      	cmp	r3, #128	; 0x80
 8002110:	d105      	bne.n	800211e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002112:	4b33      	ldr	r3, [pc, #204]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	4a32      	ldr	r2, [pc, #200]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002118:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800211c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800211e:	4b2f      	ldr	r3, [pc, #188]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d21d      	bcs.n	8002168 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 020f 	bic.w	r2, r3, #15
 8002134:	4929      	ldr	r1, [pc, #164]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800213c:	f7fe ff7c 	bl	8001038 <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	e00a      	b.n	800215a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002144:	f7fe ff78 	bl	8001038 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e03b      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d1ed      	bne.n	8002144 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002174:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4917      	ldr	r1, [pc, #92]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002182:	4313      	orrs	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	490f      	ldr	r1, [pc, #60]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021a6:	f000 f825 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	490c      	ldr	r1, [pc, #48]	; (80021e8 <HAL_RCC_ClockConfig+0x26c>)
 80021b8:	5ccb      	ldrb	r3, [r1, r3]
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	fa22 f303 	lsr.w	r3, r2, r3
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_RCC_ClockConfig+0x270>)
 80021c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_RCC_ClockConfig+0x274>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fee8 	bl	8000fa0 <HAL_InitTick>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40022000 	.word	0x40022000
 80021e0:	40021000 	.word	0x40021000
 80021e4:	04c4b400 	.word	0x04c4b400
 80021e8:	08024e9c 	.word	0x08024e9c
 80021ec:	20000004 	.word	0x20000004
 80021f0:	20000008 	.word	0x20000008

080021f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021fa:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b04      	cmp	r3, #4
 8002204:	d102      	bne.n	800220c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002206:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	e047      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b08      	cmp	r3, #8
 8002216:	d102      	bne.n	800221e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002218:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	e03e      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800221e:	4b23      	ldr	r3, [pc, #140]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b0c      	cmp	r3, #12
 8002228:	d136      	bne.n	8002298 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3301      	adds	r3, #1
 8002240:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d10c      	bne.n	8002262 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002248:	4a1a      	ldr	r2, [pc, #104]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002250:	4a16      	ldr	r2, [pc, #88]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002252:	68d2      	ldr	r2, [r2, #12]
 8002254:	0a12      	lsrs	r2, r2, #8
 8002256:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	617b      	str	r3, [r7, #20]
      break;
 8002260:	e00c      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002262:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	fbb2 f3f3 	udiv	r3, r2, r3
 800226a:	4a10      	ldr	r2, [pc, #64]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800226c:	68d2      	ldr	r2, [r2, #12]
 800226e:	0a12      	lsrs	r2, r2, #8
 8002270:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	617b      	str	r3, [r7, #20]
      break;
 800227a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0e5b      	lsrs	r3, r3, #25
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	3301      	adds	r3, #1
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	e001      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800229c:	693b      	ldr	r3, [r7, #16]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	371c      	adds	r7, #28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	00f42400 	.word	0x00f42400
 80022b4:	016e3600 	.word	0x016e3600

080022b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_RCC_GetHCLKFreq+0x14>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000004 	.word	0x20000004

080022d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022d4:	f7ff fff0 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 80022d8:	4602      	mov	r2, r0
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	4904      	ldr	r1, [pc, #16]	; (80022f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022e6:	5ccb      	ldrb	r3, [r1, r3]
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	08024eac 	.word	0x08024eac

080022fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002300:	f7ff ffda 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 8002304:	4602      	mov	r2, r0
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	0adb      	lsrs	r3, r3, #11
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	4904      	ldr	r1, [pc, #16]	; (8002324 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002312:	5ccb      	ldrb	r3, [r1, r3]
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	08024eac 	.word	0x08024eac

08002328 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800232e:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3301      	adds	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d10c      	bne.n	8002366 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800234c:	4a17      	ldr	r2, [pc, #92]	; (80023ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	fbb2 f3f3 	udiv	r3, r2, r3
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002356:	68d2      	ldr	r2, [r2, #12]
 8002358:	0a12      	lsrs	r2, r2, #8
 800235a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	617b      	str	r3, [r7, #20]
    break;
 8002364:	e00c      	b.n	8002380 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002370:	68d2      	ldr	r2, [r2, #12]
 8002372:	0a12      	lsrs	r2, r2, #8
 8002374:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002378:	fb02 f303 	mul.w	r3, r2, r3
 800237c:	617b      	str	r3, [r7, #20]
    break;
 800237e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0e5b      	lsrs	r3, r3, #25
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	3301      	adds	r3, #1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800239a:	687b      	ldr	r3, [r7, #4]
}
 800239c:	4618      	mov	r0, r3
 800239e:	371c      	adds	r7, #28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	40021000 	.word	0x40021000
 80023ac:	016e3600 	.word	0x016e3600
 80023b0:	00f42400 	.word	0x00f42400

080023b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023bc:	2300      	movs	r3, #0
 80023be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023c0:	2300      	movs	r3, #0
 80023c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 8098 	beq.w	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d6:	4b43      	ldr	r3, [pc, #268]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10d      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	4b40      	ldr	r3, [pc, #256]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	4a3f      	ldr	r2, [pc, #252]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6593      	str	r3, [r2, #88]	; 0x58
 80023ee:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fa:	2301      	movs	r3, #1
 80023fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023fe:	4b3a      	ldr	r3, [pc, #232]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a39      	ldr	r2, [pc, #228]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800240a:	f7fe fe15 	bl	8001038 <HAL_GetTick>
 800240e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002410:	e009      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002412:	f7fe fe11 	bl	8001038 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d902      	bls.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	74fb      	strb	r3, [r7, #19]
        break;
 8002424:	e005      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002426:	4b30      	ldr	r3, [pc, #192]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0ef      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002432:	7cfb      	ldrb	r3, [r7, #19]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d159      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002438:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002442:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d01e      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	d019      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002454:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800245e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002460:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	4a1f      	ldr	r2, [pc, #124]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002470:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002476:	4a1b      	ldr	r2, [pc, #108]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002480:	4a18      	ldr	r2, [pc, #96]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d016      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7fe fdd1 	bl	8001038 <HAL_GetTick>
 8002496:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002498:	e00b      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe fdcd 	bl	8001038 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d902      	bls.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	74fb      	strb	r3, [r7, #19]
            break;
 80024b0:	e006      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ec      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10b      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d4:	4903      	ldr	r1, [pc, #12]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024dc:	e008      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024de:	7cfb      	ldrb	r3, [r7, #19]
 80024e0:	74bb      	strb	r3, [r7, #18]
 80024e2:	e005      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f0:	7c7b      	ldrb	r3, [r7, #17]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d105      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f6:	4baf      	ldr	r3, [pc, #700]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	4aae      	ldr	r2, [pc, #696]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002500:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800250e:	4ba9      	ldr	r3, [pc, #676]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002514:	f023 0203 	bic.w	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	49a5      	ldr	r1, [pc, #660]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002530:	4ba0      	ldr	r3, [pc, #640]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 020c 	bic.w	r2, r3, #12
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	499d      	ldr	r1, [pc, #628]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002552:	4b98      	ldr	r3, [pc, #608]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4994      	ldr	r1, [pc, #592]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002574:	4b8f      	ldr	r3, [pc, #572]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	498c      	ldr	r1, [pc, #560]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002596:	4b87      	ldr	r3, [pc, #540]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	4983      	ldr	r1, [pc, #524]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b8:	4b7e      	ldr	r3, [pc, #504]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	497b      	ldr	r1, [pc, #492]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025da:	4b76      	ldr	r3, [pc, #472]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	4972      	ldr	r1, [pc, #456]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025fc:	4b6d      	ldr	r3, [pc, #436]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	496a      	ldr	r1, [pc, #424]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800261e:	4b65      	ldr	r3, [pc, #404]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	4961      	ldr	r1, [pc, #388]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002640:	4b5c      	ldr	r3, [pc, #368]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002642:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002646:	f023 0203 	bic.w	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	4959      	ldr	r1, [pc, #356]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002662:	4b54      	ldr	r3, [pc, #336]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	4950      	ldr	r1, [pc, #320]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002680:	2b00      	cmp	r3, #0
 8002682:	d015      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002684:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4948      	ldr	r1, [pc, #288]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026a2:	d105      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a4:	4b43      	ldr	r3, [pc, #268]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4a42      	ldr	r2, [pc, #264]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d015      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026bc:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ca:	493a      	ldr	r1, [pc, #232]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026da:	d105      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026dc:	4b35      	ldr	r3, [pc, #212]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4a34      	ldr	r2, [pc, #208]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d015      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026f4:	4b2f      	ldr	r3, [pc, #188]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	492c      	ldr	r1, [pc, #176]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002712:	d105      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002714:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a26      	ldr	r2, [pc, #152]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800271a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800271e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d015      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	491e      	ldr	r1, [pc, #120]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800274a:	d105      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002756:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d015      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4910      	ldr	r1, [pc, #64]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002782:	d105      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800278a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800278e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d018      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4902      	ldr	r1, [pc, #8]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027b2:	e001      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80027b4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027c0:	d105      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027c2:	4b21      	ldr	r3, [pc, #132]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	4a20      	ldr	r2, [pc, #128]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d015      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80027da:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e8:	4917      	ldr	r1, [pc, #92]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f8:	d105      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002804:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d015      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002812:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002814:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002818:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002820:	4909      	ldr	r1, [pc, #36]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002830:	d105      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002832:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	4a04      	ldr	r2, [pc, #16]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800283c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800283e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e042      	b.n	80028e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002864:	2b00      	cmp	r3, #0
 8002866:	d106      	bne.n	8002876 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7fe f98f 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2224      	movs	r2, #36	; 0x24
 800287a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fa80 	bl	8002d94 <UART_SetConfig>
 8002894:	4603      	mov	r3, r0
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e022      	b.n	80028e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fd3e 	bl	8003328 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fdc5 	bl	800346c <UART_CheckIdleState>
 80028e2:	4603      	mov	r3, r0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d118      	bne.n	800294e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d013      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	d104      	bne.n	800293a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 81fb 	beq.w	8002d3a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
      }
      return;
 800294c:	e1f5      	b.n	8002d3a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80ef 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4b73      	ldr	r3, [pc, #460]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4b72      	ldr	r3, [pc, #456]	; (8002b2c <HAL_UART_IRQHandler+0x240>)
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80e4 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d010      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00b      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2201      	movs	r2, #1
 8002986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800298e:	f043 0201 	orr.w	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d010      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00b      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2202      	movs	r2, #2
 80029b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029ba:	f043 0204 	orr.w	r2, r3, #4
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d010      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00b      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2204      	movs	r2, #4
 80029de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029e6:	f043 0202 	orr.w	r2, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d015      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4b48      	ldr	r3, [pc, #288]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 8002a08:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2208      	movs	r2, #8
 8002a14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1c:	f043 0208 	orr.w	r2, r3, #8
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d011      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a4a:	f043 0220 	orr.w	r2, r3, #32
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 816f 	beq.w	8002d3e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d011      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d104      	bne.n	8002a7e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a94:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa0:	2b40      	cmp	r3, #64	; 0x40
 8002aa2:	d004      	beq.n	8002aae <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d031      	beq.n	8002b12 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fda7 	bl	8003602 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abe:	2b40      	cmp	r3, #64	; 0x40
 8002ac0:	d123      	bne.n	8002b0a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d013      	beq.n	8002b02 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ade:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <HAL_UART_IRQHandler+0x244>)
 8002ae0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fc3c 	bl	8001364 <HAL_DMA_Abort_IT>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d017      	beq.n	8002b22 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002afc:	4610      	mov	r0, r2
 8002afe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b00:	e00f      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f930 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b08:	e00b      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f92c 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b10:	e007      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f928 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002b20:	e10d      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b22:	bf00      	nop
    return;
 8002b24:	e10b      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
 8002b26:	bf00      	nop
 8002b28:	10000001 	.word	0x10000001
 8002b2c:	04000120 	.word	0x04000120
 8002b30:	08003667 	.word	0x08003667

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	f040 80ab 	bne.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80a5 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 809f 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2210      	movs	r2, #16
 8002b5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d155      	bne.n	8002c18 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002b76:	893b      	ldrh	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80e2 	beq.w	8002d42 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b84:	893a      	ldrh	r2, [r7, #8]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	f080 80db 	bcs.w	8002d42 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	893a      	ldrh	r2, [r7, #8]
 8002b90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d12b      	bne.n	8002bfc <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bb2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0210 	bic.w	r2, r2, #16
 8002bf0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fb5b 	bl	80012b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f8b3 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c16:	e094      	b.n	8002d42 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 8087 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002c38:	897b      	ldrh	r3, [r7, #10]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8083 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	f023 0301 	bic.w	r3, r3, #1
 8002c62:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0210 	bic.w	r2, r2, #16
 8002c86:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c88:	897b      	ldrh	r3, [r7, #10]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f875 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c92:	e058      	b.n	8002d46 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fd07 	bl	80036c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cb8:	e048      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d012      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d104      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d034      	beq.n	8002d4a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
    }
    return;
 8002ce8:	e02f      	b.n	8002d4a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fcc7 	bl	8003692 <UART_EndTransmit_IT>
    return;
 8002d04:	e022      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fce7 	bl	80036ee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d20:	e014      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00f      	beq.n	8002d4c <HAL_UART_IRQHandler+0x460>
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	da0c      	bge.n	8002d4c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fcd1 	bl	80036da <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d38:	e008      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d3a:	bf00      	nop
 8002d3c:	e006      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d3e:	bf00      	nop
 8002d40:	e004      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d42:	bf00      	nop
 8002d44:	e002      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d46:	bf00      	nop
 8002d48:	e000      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d4a:	bf00      	nop
  }
}
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop

08002d54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d94:	b5b0      	push	{r4, r5, r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4bb1      	ldr	r3, [pc, #708]	; (8003084 <UART_SetConfig+0x2f0>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	69f9      	ldr	r1, [r7, #28]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4aa6      	ldr	r2, [pc, #664]	; (8003088 <UART_SetConfig+0x2f4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002e06:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	69f9      	ldr	r1, [r7, #28]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	f023 010f 	bic.w	r1, r3, #15
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a97      	ldr	r2, [pc, #604]	; (800308c <UART_SetConfig+0x2f8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d120      	bne.n	8002e76 <UART_SetConfig+0xe2>
 8002e34:	4b96      	ldr	r3, [pc, #600]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d816      	bhi.n	8002e70 <UART_SetConfig+0xdc>
 8002e42:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <UART_SetConfig+0xb4>)
 8002e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e48:	08002e59 	.word	0x08002e59
 8002e4c:	08002e65 	.word	0x08002e65
 8002e50:	08002e5f 	.word	0x08002e5f
 8002e54:	08002e6b 	.word	0x08002e6b
 8002e58:	2301      	movs	r3, #1
 8002e5a:	76fb      	strb	r3, [r7, #27]
 8002e5c:	e0e7      	b.n	800302e <UART_SetConfig+0x29a>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	76fb      	strb	r3, [r7, #27]
 8002e62:	e0e4      	b.n	800302e <UART_SetConfig+0x29a>
 8002e64:	2304      	movs	r3, #4
 8002e66:	76fb      	strb	r3, [r7, #27]
 8002e68:	e0e1      	b.n	800302e <UART_SetConfig+0x29a>
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	76fb      	strb	r3, [r7, #27]
 8002e6e:	e0de      	b.n	800302e <UART_SetConfig+0x29a>
 8002e70:	2310      	movs	r3, #16
 8002e72:	76fb      	strb	r3, [r7, #27]
 8002e74:	e0db      	b.n	800302e <UART_SetConfig+0x29a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a86      	ldr	r2, [pc, #536]	; (8003094 <UART_SetConfig+0x300>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d132      	bne.n	8002ee6 <UART_SetConfig+0x152>
 8002e80:	4b83      	ldr	r3, [pc, #524]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b0c      	cmp	r3, #12
 8002e8c:	d828      	bhi.n	8002ee0 <UART_SetConfig+0x14c>
 8002e8e:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <UART_SetConfig+0x100>)
 8002e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e94:	08002ec9 	.word	0x08002ec9
 8002e98:	08002ee1 	.word	0x08002ee1
 8002e9c:	08002ee1 	.word	0x08002ee1
 8002ea0:	08002ee1 	.word	0x08002ee1
 8002ea4:	08002ed5 	.word	0x08002ed5
 8002ea8:	08002ee1 	.word	0x08002ee1
 8002eac:	08002ee1 	.word	0x08002ee1
 8002eb0:	08002ee1 	.word	0x08002ee1
 8002eb4:	08002ecf 	.word	0x08002ecf
 8002eb8:	08002ee1 	.word	0x08002ee1
 8002ebc:	08002ee1 	.word	0x08002ee1
 8002ec0:	08002ee1 	.word	0x08002ee1
 8002ec4:	08002edb 	.word	0x08002edb
 8002ec8:	2300      	movs	r3, #0
 8002eca:	76fb      	strb	r3, [r7, #27]
 8002ecc:	e0af      	b.n	800302e <UART_SetConfig+0x29a>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	76fb      	strb	r3, [r7, #27]
 8002ed2:	e0ac      	b.n	800302e <UART_SetConfig+0x29a>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	76fb      	strb	r3, [r7, #27]
 8002ed8:	e0a9      	b.n	800302e <UART_SetConfig+0x29a>
 8002eda:	2308      	movs	r3, #8
 8002edc:	76fb      	strb	r3, [r7, #27]
 8002ede:	e0a6      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee0:	2310      	movs	r3, #16
 8002ee2:	76fb      	strb	r3, [r7, #27]
 8002ee4:	e0a3      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a6b      	ldr	r2, [pc, #428]	; (8003098 <UART_SetConfig+0x304>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d120      	bne.n	8002f32 <UART_SetConfig+0x19e>
 8002ef0:	4b67      	ldr	r3, [pc, #412]	; (8003090 <UART_SetConfig+0x2fc>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002efa:	2b30      	cmp	r3, #48	; 0x30
 8002efc:	d013      	beq.n	8002f26 <UART_SetConfig+0x192>
 8002efe:	2b30      	cmp	r3, #48	; 0x30
 8002f00:	d814      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d009      	beq.n	8002f1a <UART_SetConfig+0x186>
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d810      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <UART_SetConfig+0x180>
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d006      	beq.n	8002f20 <UART_SetConfig+0x18c>
 8002f12:	e00b      	b.n	8002f2c <UART_SetConfig+0x198>
 8002f14:	2300      	movs	r3, #0
 8002f16:	76fb      	strb	r3, [r7, #27]
 8002f18:	e089      	b.n	800302e <UART_SetConfig+0x29a>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	76fb      	strb	r3, [r7, #27]
 8002f1e:	e086      	b.n	800302e <UART_SetConfig+0x29a>
 8002f20:	2304      	movs	r3, #4
 8002f22:	76fb      	strb	r3, [r7, #27]
 8002f24:	e083      	b.n	800302e <UART_SetConfig+0x29a>
 8002f26:	2308      	movs	r3, #8
 8002f28:	76fb      	strb	r3, [r7, #27]
 8002f2a:	e080      	b.n	800302e <UART_SetConfig+0x29a>
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	76fb      	strb	r3, [r7, #27]
 8002f30:	e07d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a59      	ldr	r2, [pc, #356]	; (800309c <UART_SetConfig+0x308>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d120      	bne.n	8002f7e <UART_SetConfig+0x1ea>
 8002f3c:	4b54      	ldr	r3, [pc, #336]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f46:	2bc0      	cmp	r3, #192	; 0xc0
 8002f48:	d013      	beq.n	8002f72 <UART_SetConfig+0x1de>
 8002f4a:	2bc0      	cmp	r3, #192	; 0xc0
 8002f4c:	d814      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f4e:	2b80      	cmp	r3, #128	; 0x80
 8002f50:	d009      	beq.n	8002f66 <UART_SetConfig+0x1d2>
 8002f52:	2b80      	cmp	r3, #128	; 0x80
 8002f54:	d810      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <UART_SetConfig+0x1cc>
 8002f5a:	2b40      	cmp	r3, #64	; 0x40
 8002f5c:	d006      	beq.n	8002f6c <UART_SetConfig+0x1d8>
 8002f5e:	e00b      	b.n	8002f78 <UART_SetConfig+0x1e4>
 8002f60:	2300      	movs	r3, #0
 8002f62:	76fb      	strb	r3, [r7, #27]
 8002f64:	e063      	b.n	800302e <UART_SetConfig+0x29a>
 8002f66:	2302      	movs	r3, #2
 8002f68:	76fb      	strb	r3, [r7, #27]
 8002f6a:	e060      	b.n	800302e <UART_SetConfig+0x29a>
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	76fb      	strb	r3, [r7, #27]
 8002f70:	e05d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f72:	2308      	movs	r3, #8
 8002f74:	76fb      	strb	r3, [r7, #27]
 8002f76:	e05a      	b.n	800302e <UART_SetConfig+0x29a>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	76fb      	strb	r3, [r7, #27]
 8002f7c:	e057      	b.n	800302e <UART_SetConfig+0x29a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a47      	ldr	r2, [pc, #284]	; (80030a0 <UART_SetConfig+0x30c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d125      	bne.n	8002fd4 <UART_SetConfig+0x240>
 8002f88:	4b41      	ldr	r3, [pc, #260]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f96:	d017      	beq.n	8002fc8 <UART_SetConfig+0x234>
 8002f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f9c:	d817      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa2:	d00b      	beq.n	8002fbc <UART_SetConfig+0x228>
 8002fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa8:	d811      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <UART_SetConfig+0x222>
 8002fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb2:	d006      	beq.n	8002fc2 <UART_SetConfig+0x22e>
 8002fb4:	e00b      	b.n	8002fce <UART_SetConfig+0x23a>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	76fb      	strb	r3, [r7, #27]
 8002fba:	e038      	b.n	800302e <UART_SetConfig+0x29a>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	76fb      	strb	r3, [r7, #27]
 8002fc0:	e035      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	76fb      	strb	r3, [r7, #27]
 8002fc6:	e032      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc8:	2308      	movs	r3, #8
 8002fca:	76fb      	strb	r3, [r7, #27]
 8002fcc:	e02f      	b.n	800302e <UART_SetConfig+0x29a>
 8002fce:	2310      	movs	r3, #16
 8002fd0:	76fb      	strb	r3, [r7, #27]
 8002fd2:	e02c      	b.n	800302e <UART_SetConfig+0x29a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <UART_SetConfig+0x2f4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d125      	bne.n	800302a <UART_SetConfig+0x296>
 8002fde:	4b2c      	ldr	r3, [pc, #176]	; (8003090 <UART_SetConfig+0x2fc>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fe8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fec:	d017      	beq.n	800301e <UART_SetConfig+0x28a>
 8002fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ff2:	d817      	bhi.n	8003024 <UART_SetConfig+0x290>
 8002ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ff8:	d00b      	beq.n	8003012 <UART_SetConfig+0x27e>
 8002ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ffe:	d811      	bhi.n	8003024 <UART_SetConfig+0x290>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <UART_SetConfig+0x278>
 8003004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003008:	d006      	beq.n	8003018 <UART_SetConfig+0x284>
 800300a:	e00b      	b.n	8003024 <UART_SetConfig+0x290>
 800300c:	2300      	movs	r3, #0
 800300e:	76fb      	strb	r3, [r7, #27]
 8003010:	e00d      	b.n	800302e <UART_SetConfig+0x29a>
 8003012:	2302      	movs	r3, #2
 8003014:	76fb      	strb	r3, [r7, #27]
 8003016:	e00a      	b.n	800302e <UART_SetConfig+0x29a>
 8003018:	2304      	movs	r3, #4
 800301a:	76fb      	strb	r3, [r7, #27]
 800301c:	e007      	b.n	800302e <UART_SetConfig+0x29a>
 800301e:	2308      	movs	r3, #8
 8003020:	76fb      	strb	r3, [r7, #27]
 8003022:	e004      	b.n	800302e <UART_SetConfig+0x29a>
 8003024:	2310      	movs	r3, #16
 8003026:	76fb      	strb	r3, [r7, #27]
 8003028:	e001      	b.n	800302e <UART_SetConfig+0x29a>
 800302a:	2310      	movs	r3, #16
 800302c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a15      	ldr	r2, [pc, #84]	; (8003088 <UART_SetConfig+0x2f4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	f040 809f 	bne.w	8003178 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800303a:	7efb      	ldrb	r3, [r7, #27]
 800303c:	2b08      	cmp	r3, #8
 800303e:	d837      	bhi.n	80030b0 <UART_SetConfig+0x31c>
 8003040:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <UART_SetConfig+0x2b4>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	0800306d 	.word	0x0800306d
 800304c:	080030b1 	.word	0x080030b1
 8003050:	08003075 	.word	0x08003075
 8003054:	080030b1 	.word	0x080030b1
 8003058:	0800307b 	.word	0x0800307b
 800305c:	080030b1 	.word	0x080030b1
 8003060:	080030b1 	.word	0x080030b1
 8003064:	080030b1 	.word	0x080030b1
 8003068:	080030a9 	.word	0x080030a9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800306c:	f7ff f930 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003070:	6178      	str	r0, [r7, #20]
        break;
 8003072:	e022      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <UART_SetConfig+0x310>)
 8003076:	617b      	str	r3, [r7, #20]
        break;
 8003078:	e01f      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800307a:	f7ff f8bb 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800307e:	6178      	str	r0, [r7, #20]
        break;
 8003080:	e01b      	b.n	80030ba <UART_SetConfig+0x326>
 8003082:	bf00      	nop
 8003084:	cfff69f3 	.word	0xcfff69f3
 8003088:	40008000 	.word	0x40008000
 800308c:	40013800 	.word	0x40013800
 8003090:	40021000 	.word	0x40021000
 8003094:	40004400 	.word	0x40004400
 8003098:	40004800 	.word	0x40004800
 800309c:	40004c00 	.word	0x40004c00
 80030a0:	40005000 	.word	0x40005000
 80030a4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ac:	617b      	str	r3, [r7, #20]
        break;
 80030ae:	e004      	b.n	80030ba <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	76bb      	strb	r3, [r7, #26]
        break;
 80030b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 811b 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	4a96      	ldr	r2, [pc, #600]	; (8003320 <UART_SetConfig+0x58c>)
 80030c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030cc:	461a      	mov	r2, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80030d4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d305      	bcc.n	80030f2 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d902      	bls.n	80030f8 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	76bb      	strb	r3, [r7, #26]
 80030f6:	e0ff      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f04f 0100 	mov.w	r1, #0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	4a86      	ldr	r2, [pc, #536]	; (8003320 <UART_SetConfig+0x58c>)
 8003106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800310a:	b29a      	uxth	r2, r3
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	f7fd fba0 	bl	8000854 <__aeabi_uldivmod>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	020b      	lsls	r3, r1, #8
 8003126:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800312a:	0202      	lsls	r2, r0, #8
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	6849      	ldr	r1, [r1, #4]
 8003130:	0849      	lsrs	r1, r1, #1
 8003132:	4608      	mov	r0, r1
 8003134:	f04f 0100 	mov.w	r1, #0
 8003138:	1814      	adds	r4, r2, r0
 800313a:	eb43 0501 	adc.w	r5, r3, r1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	461a      	mov	r2, r3
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	4620      	mov	r0, r4
 800314a:	4629      	mov	r1, r5
 800314c:	f7fd fb82 	bl	8000854 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4613      	mov	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800315e:	d308      	bcc.n	8003172 <UART_SetConfig+0x3de>
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003166:	d204      	bcs.n	8003172 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	60da      	str	r2, [r3, #12]
 8003170:	e0c2      	b.n	80032f8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	76bb      	strb	r3, [r7, #26]
 8003176:	e0bf      	b.n	80032f8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003180:	d165      	bne.n	800324e <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8003182:	7efb      	ldrb	r3, [r7, #27]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d828      	bhi.n	80031da <UART_SetConfig+0x446>
 8003188:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <UART_SetConfig+0x3fc>)
 800318a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318e:	bf00      	nop
 8003190:	080031b5 	.word	0x080031b5
 8003194:	080031bd 	.word	0x080031bd
 8003198:	080031c5 	.word	0x080031c5
 800319c:	080031db 	.word	0x080031db
 80031a0:	080031cb 	.word	0x080031cb
 80031a4:	080031db 	.word	0x080031db
 80031a8:	080031db 	.word	0x080031db
 80031ac:	080031db 	.word	0x080031db
 80031b0:	080031d3 	.word	0x080031d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031b4:	f7ff f88c 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 80031b8:	6178      	str	r0, [r7, #20]
        break;
 80031ba:	e013      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031bc:	f7ff f89e 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 80031c0:	6178      	str	r0, [r7, #20]
        break;
 80031c2:	e00f      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031c4:	4b57      	ldr	r3, [pc, #348]	; (8003324 <UART_SetConfig+0x590>)
 80031c6:	617b      	str	r3, [r7, #20]
        break;
 80031c8:	e00c      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ca:	f7ff f813 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80031ce:	6178      	str	r0, [r7, #20]
        break;
 80031d0:	e008      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031d6:	617b      	str	r3, [r7, #20]
        break;
 80031d8:	e004      	b.n	80031e4 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	76bb      	strb	r3, [r7, #26]
        break;
 80031e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8086 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	4a4b      	ldr	r2, [pc, #300]	; (8003320 <UART_SetConfig+0x58c>)
 80031f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031f6:	461a      	mov	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80031fe:	005a      	lsls	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	441a      	add	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	b29b      	uxth	r3, r3
 8003212:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b0f      	cmp	r3, #15
 8003218:	d916      	bls.n	8003248 <UART_SetConfig+0x4b4>
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d212      	bcs.n	8003248 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	b29b      	uxth	r3, r3
 8003226:	f023 030f 	bic.w	r3, r3, #15
 800322a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	b29b      	uxth	r3, r3
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	b29a      	uxth	r2, r3
 8003238:	89fb      	ldrh	r3, [r7, #14]
 800323a:	4313      	orrs	r3, r2
 800323c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	89fa      	ldrh	r2, [r7, #14]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	e057      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	76bb      	strb	r3, [r7, #26]
 800324c:	e054      	b.n	80032f8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800324e:	7efb      	ldrb	r3, [r7, #27]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d828      	bhi.n	80032a6 <UART_SetConfig+0x512>
 8003254:	a201      	add	r2, pc, #4	; (adr r2, 800325c <UART_SetConfig+0x4c8>)
 8003256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325a:	bf00      	nop
 800325c:	08003281 	.word	0x08003281
 8003260:	08003289 	.word	0x08003289
 8003264:	08003291 	.word	0x08003291
 8003268:	080032a7 	.word	0x080032a7
 800326c:	08003297 	.word	0x08003297
 8003270:	080032a7 	.word	0x080032a7
 8003274:	080032a7 	.word	0x080032a7
 8003278:	080032a7 	.word	0x080032a7
 800327c:	0800329f 	.word	0x0800329f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003280:	f7ff f826 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003284:	6178      	str	r0, [r7, #20]
        break;
 8003286:	e013      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003288:	f7ff f838 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 800328c:	6178      	str	r0, [r7, #20]
        break;
 800328e:	e00f      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003290:	4b24      	ldr	r3, [pc, #144]	; (8003324 <UART_SetConfig+0x590>)
 8003292:	617b      	str	r3, [r7, #20]
        break;
 8003294:	e00c      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003296:	f7fe ffad 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800329a:	6178      	str	r0, [r7, #20]
        break;
 800329c:	e008      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800329e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a2:	617b      	str	r3, [r7, #20]
        break;
 80032a4:	e004      	b.n	80032b0 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	76bb      	strb	r3, [r7, #26]
        break;
 80032ae:	bf00      	nop
    }

    if (pclk != 0U)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d020      	beq.n	80032f8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	4a19      	ldr	r2, [pc, #100]	; (8003320 <UART_SetConfig+0x58c>)
 80032bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032c0:	461a      	mov	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	441a      	add	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	b29b      	uxth	r3, r3
 80032da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b0f      	cmp	r3, #15
 80032e0:	d908      	bls.n	80032f4 <UART_SetConfig+0x560>
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e8:	d204      	bcs.n	80032f4 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	e001      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003314:	7ebb      	ldrb	r3, [r7, #26]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3720      	adds	r7, #32
 800331a:	46bd      	mov	sp, r7
 800331c:	bdb0      	pop	{r4, r5, r7, pc}
 800331e:	bf00      	nop
 8003320:	08024eb4 	.word	0x08024eb4
 8003324:	00f42400 	.word	0x00f42400

08003328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01a      	beq.n	800343e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003426:	d10a      	bne.n	800343e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	605a      	str	r2, [r3, #4]
  }
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af02      	add	r7, sp, #8
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800347c:	f7fd fddc 	bl	8001038 <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b08      	cmp	r3, #8
 800348e:	d10e      	bne.n	80034ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003490:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f82f 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e025      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d10e      	bne.n	80034da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f819 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e00f      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003512:	e062      	b.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351a:	d05e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351c:	f7fd fd8c 	bl	8001038 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	429a      	cmp	r2, r3
 800352a:	d302      	bcc.n	8003532 <UART_WaitOnFlagUntilTimeout+0x30>
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d11d      	bne.n	800356e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003540:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e045      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d02e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358a:	d126      	bne.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003594:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e00f      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4013      	ands	r3, r2
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d08d      	beq.n	8003514 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003618:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003632:	2b01      	cmp	r3, #1
 8003634:	d107      	bne.n	8003646 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0210 	bic.w	r2, r2, #16
 8003644:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	671a      	str	r2, [r3, #112]	; 0x70
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f7ff fb6f 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff fb4b 	bl	8002d54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_UARTEx_DisableFifoMode+0x16>
 8003714:	2302      	movs	r3, #2
 8003716:	e027      	b.n	8003768 <HAL_UARTEx_DisableFifoMode+0x66>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	; 0x24
 8003724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003746:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003788:	2302      	movs	r3, #2
 800378a:	e02d      	b.n	80037e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2224      	movs	r2, #36	; 0x24
 8003798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f84f 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003804:	2302      	movs	r3, #2
 8003806:	e02d      	b.n	8003864 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2224      	movs	r2, #36	; 0x24
 8003814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f811 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003878:	2b00      	cmp	r3, #0
 800387a:	d108      	bne.n	800388e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800388c:	e031      	b.n	80038f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800388e:	2308      	movs	r3, #8
 8003890:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003892:	2308      	movs	r3, #8
 8003894:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	0e5b      	lsrs	r3, r3, #25
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	0f5b      	lsrs	r3, r3, #29
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038b6:	7bbb      	ldrb	r3, [r7, #14]
 80038b8:	7b3a      	ldrb	r2, [r7, #12]
 80038ba:	4911      	ldr	r1, [pc, #68]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038bc:	5c8a      	ldrb	r2, [r1, r2]
 80038be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038c2:	7b3a      	ldrb	r2, [r7, #12]
 80038c4:	490f      	ldr	r1, [pc, #60]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	7b7a      	ldrb	r2, [r7, #13]
 80038d8:	4909      	ldr	r1, [pc, #36]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038da:	5c8a      	ldrb	r2, [r1, r2]
 80038dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80038e0:	7b7a      	ldrb	r2, [r7, #13]
 80038e2:	4908      	ldr	r1, [pc, #32]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	08024ecc 	.word	0x08024ecc
 8003904:	08024ed4 	.word	0x08024ed4

08003908 <ESP_Init>:

int ESP_Init(void 		(*UART_Transmit)(uint8_t*),
			 uint8_t 	(*UART_Receive)(void),
			 uint32_t 	(*getTick)(void),
			 uint32_t	UART_Buffer_Size)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
	if(UART_Transmit != NULL		&&
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d016      	beq.n	800394a <ESP_Init+0x42>
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d013      	beq.n	800394a <ESP_Init+0x42>
	   UART_Receive	!= NULL			&&
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d010      	beq.n	800394a <ESP_Init+0x42>
	   getTick != NULL)
	{
		ESP8266.UART_Receive 		= UART_Receive;
 8003928:	4a0b      	ldr	r2, [pc, #44]	; (8003958 <ESP_Init+0x50>)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	6053      	str	r3, [r2, #4]
		ESP8266.UART_Transmit 		= UART_Transmit;
 800392e:	4a0a      	ldr	r2, [pc, #40]	; (8003958 <ESP_Init+0x50>)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6013      	str	r3, [r2, #0]
		ESP8266.getTick 			= getTick;
 8003934:	4a08      	ldr	r2, [pc, #32]	; (8003958 <ESP_Init+0x50>)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6093      	str	r3, [r2, #8]

		rx_buffer = ringBuffer_init(UART_Buffer_Size);
 800393a:	6838      	ldr	r0, [r7, #0]
 800393c:	f000 f952 	bl	8003be4 <ringBuffer_init>
 8003940:	4603      	mov	r3, r0
 8003942:	4a06      	ldr	r2, [pc, #24]	; (800395c <ESP_Init+0x54>)
 8003944:	6013      	str	r3, [r2, #0]

		return 1;
 8003946:	2301      	movs	r3, #1
 8003948:	e001      	b.n	800394e <ESP_Init+0x46>
	}
	else
	{
		return -1;
 800394a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000360 	.word	0x20000360
 800395c:	20000498 	.word	0x20000498

08003960 <Send_AT_Command>:


void Send_AT_Command(char *cmd)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]

	ESP8266.UART_Transmit((uint8_t*)cmd);
 8003968:	4b03      	ldr	r3, [pc, #12]	; (8003978 <Send_AT_Command+0x18>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20000360 	.word	0x20000360

0800397c <ESP_UART_ReceiveHandler>:

void ESP_UART_ReceiveHandler(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
	uint8_t rx_data=0;
 8003982:	2300      	movs	r3, #0
 8003984:	71fb      	strb	r3, [r7, #7]

	rx_data = ESP8266.UART_Receive();
 8003986:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <ESP_UART_ReceiveHandler+0x2c>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	4798      	blx	r3
 800398c:	4603      	mov	r3, r0
 800398e:	71fb      	strb	r3, [r7, #7]
	ringBuffer_push(rx_buffer, rx_data);
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <ESP_UART_ReceiveHandler+0x30>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	79fa      	ldrb	r2, [r7, #7]
 8003996:	4611      	mov	r1, r2
 8003998:	4618      	mov	r0, r3
 800399a:	f000 f964 	bl	8003c66 <ringBuffer_push>
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20000360 	.word	0x20000360
 80039ac:	20000498 	.word	0x20000498

080039b0 <Read_Response>:


uint32_t Read_Response(char * response)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
	return ringBuffer_lookFor(rx_buffer, (uint8_t*)response);
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <Read_Response+0x20>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 f9db 	bl	8003d7a <ringBuffer_lookFor>
 80039c4:	4603      	mov	r3, r0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20000498 	.word	0x20000498

080039d4 <Wait_Response>:


Status Wait_Response(char* response, uint32_t timeout)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]

	static uint32_t time = 0;
	static uint8_t firstCall = 0;

	if(!firstCall)
 80039de:	4b1a      	ldr	r3, [pc, #104]	; (8003a48 <Wait_Response+0x74>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d108      	bne.n	80039f8 <Wait_Response+0x24>
	{
		time = ESP8266.getTick();
 80039e6:	4b19      	ldr	r3, [pc, #100]	; (8003a4c <Wait_Response+0x78>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	4798      	blx	r3
 80039ec:	4603      	mov	r3, r0
 80039ee:	4a18      	ldr	r2, [pc, #96]	; (8003a50 <Wait_Response+0x7c>)
 80039f0:	6013      	str	r3, [r2, #0]
		firstCall = 1;
 80039f2:	4b15      	ldr	r3, [pc, #84]	; (8003a48 <Wait_Response+0x74>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	701a      	strb	r2, [r3, #0]
	}

	if(ringBuffer_lookFor(rx_buffer, (uint8_t*)response))
 80039f8:	4b16      	ldr	r3, [pc, #88]	; (8003a54 <Wait_Response+0x80>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 f9bb 	bl	8003d7a <ringBuffer_lookFor>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d007      	beq.n	8003a1a <Wait_Response+0x46>
	{
		firstCall = 0;
 8003a0a:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <Wait_Response+0x74>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	701a      	strb	r2, [r3, #0]
		time = 0;
 8003a10:	4b0f      	ldr	r3, [pc, #60]	; (8003a50 <Wait_Response+0x7c>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
		return FOUND;
 8003a16:	2300      	movs	r3, #0
 8003a18:	e012      	b.n	8003a40 <Wait_Response+0x6c>
	}
	else if(ESP8266.getTick() - time >= timeout)
 8003a1a:	4b0c      	ldr	r3, [pc, #48]	; (8003a4c <Wait_Response+0x78>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	4798      	blx	r3
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <Wait_Response+0x7c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d807      	bhi.n	8003a3e <Wait_Response+0x6a>
	{
		firstCall = 0;
 8003a2e:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <Wait_Response+0x74>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	701a      	strb	r2, [r3, #0]
		time = 0;
 8003a34:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <Wait_Response+0x7c>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]
		return TIMEOUT_ERROR;
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e000      	b.n	8003a40 <Wait_Response+0x6c>
	}
	else
	{
		return IDLE;
 8003a3e:	2305      	movs	r3, #5
	}

}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	2000036c 	.word	0x2000036c
 8003a4c:	20000360 	.word	0x20000360
 8003a50:	20000370 	.word	0x20000370
 8003a54:	20000498 	.word	0x20000498

08003a58 <Connect_Wifi>:

Status Connect_Wifi(char* ssid, char* password)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b096      	sub	sp, #88	; 0x58
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
	char *command_buffer[3] =
 8003a62:	4a12      	ldr	r2, [pc, #72]	; (8003aac <Connect_Wifi+0x54>)
 8003a64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a68:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		AT_CWMODE_STATION,
		AT_CWQAP,
		""
	};

	Status response_state = IDLE;
 8003a6e:	2305      	movs	r3, #5
 8003a70:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	char wifi_buffer[50];

	sprintf(wifi_buffer,"%s\"%s\",\"%s\"\r\n",AT_CWJAP,ssid,password); 		// AT+CWJAP="<SSID>","<password>"
 8003a74:	f107 000c 	add.w	r0, r7, #12
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a0c      	ldr	r2, [pc, #48]	; (8003ab0 <Connect_Wifi+0x58>)
 8003a80:	490c      	ldr	r1, [pc, #48]	; (8003ab4 <Connect_Wifi+0x5c>)
 8003a82:	f01b fbdd 	bl	801f240 <siprintf>

	command_buffer[2] = wifi_buffer;
 8003a86:	f107 030c 	add.w	r3, r7, #12
 8003a8a:	64bb      	str	r3, [r7, #72]	; 0x48

	response_state = Command_Process(command_buffer, 3);
 8003a8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a90:	2103      	movs	r1, #3
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 f826 	bl	8003ae4 <Command_Process>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	return response_state;
 8003a9e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3750      	adds	r7, #80	; 0x50
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	08021d64 	.word	0x08021d64
 8003ab0:	08021d48 	.word	0x08021d48
 8003ab4:	08021d54 	.word	0x08021d54

08003ab8 <Disconnect_Wifi>:

Status Disconnect_Wifi(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
	char *command_buffer[1] = { AT_CWQAP };
 8003abe:	4b08      	ldr	r3, [pc, #32]	; (8003ae0 <Disconnect_Wifi+0x28>)
 8003ac0:	603b      	str	r3, [r7, #0]

	Status response_state = IDLE;
 8003ac2:	2305      	movs	r3, #5
 8003ac4:	71fb      	strb	r3, [r7, #7]

	response_state = Command_Process(command_buffer, 1);
 8003ac6:	463b      	mov	r3, r7
 8003ac8:	2101      	movs	r1, #1
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 f80a 	bl	8003ae4 <Command_Process>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	71fb      	strb	r3, [r7, #7]

	return response_state;
 8003ad4:	79fb      	ldrb	r3, [r7, #7]

}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	08021d38 	.word	0x08021d38

08003ae4 <Command_Process>:

Status Command_Process(char **commandArray,uint8_t numberOfCommands)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	460b      	mov	r3, r1
 8003aee:	70fb      	strb	r3, [r7, #3]
	static uint8_t commandFlag  = 1, currentCommand = 0;
	Status response;

	if(!numberOfCommands || currentCommand >= numberOfCommands)
 8003af0:	78fb      	ldrb	r3, [r7, #3]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d004      	beq.n	8003b00 <Command_Process+0x1c>
 8003af6:	4b36      	ldr	r3, [pc, #216]	; (8003bd0 <Command_Process+0xec>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	78fa      	ldrb	r2, [r7, #3]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d806      	bhi.n	8003b0e <Command_Process+0x2a>
	{
		ringBuffer_flush(rx_buffer);
 8003b00:	4b34      	ldr	r3, [pc, #208]	; (8003bd4 <Command_Process+0xf0>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 f902 	bl	8003d0e <ringBuffer_flush>
		return ERROR;
 8003b0a:	2304      	movs	r3, #4
 8003b0c:	e05c      	b.n	8003bc8 <Command_Process+0xe4>
	}
	else
	{
		if(commandFlag)
 8003b0e:	4b32      	ldr	r3, [pc, #200]	; (8003bd8 <Command_Process+0xf4>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00b      	beq.n	8003b2e <Command_Process+0x4a>
		{
			Send_AT_Command(commandArray[currentCommand]);
 8003b16:	4b2e      	ldr	r3, [pc, #184]	; (8003bd0 <Command_Process+0xec>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	4413      	add	r3, r2
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff ff1c 	bl	8003960 <Send_AT_Command>
			commandFlag = 0;
 8003b28:	4b2b      	ldr	r3, [pc, #172]	; (8003bd8 <Command_Process+0xf4>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	701a      	strb	r2, [r3, #0]
		}
//		else
//		{
			response = Wait_Response("OK", 5000);
 8003b2e:	f241 3188 	movw	r1, #5000	; 0x1388
 8003b32:	482a      	ldr	r0, [pc, #168]	; (8003bdc <Command_Process+0xf8>)
 8003b34:	f7ff ff4e 	bl	80039d4 <Wait_Response>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	73fb      	strb	r3, [r7, #15]

			if(Read_Response("ERROR"))
 8003b3c:	4828      	ldr	r0, [pc, #160]	; (8003be0 <Command_Process+0xfc>)
 8003b3e:	f7ff ff37 	bl	80039b0 <Read_Response>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00c      	beq.n	8003b62 <Command_Process+0x7e>
			{
				commandFlag = 1;
 8003b48:	4b23      	ldr	r3, [pc, #140]	; (8003bd8 <Command_Process+0xf4>)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 8003b4e:	4b20      	ldr	r3, [pc, #128]	; (8003bd0 <Command_Process+0xec>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	701a      	strb	r2, [r3, #0]
				ringBuffer_flush(rx_buffer);
 8003b54:	4b1f      	ldr	r3, [pc, #124]	; (8003bd4 <Command_Process+0xf0>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f000 f8d8 	bl	8003d0e <ringBuffer_flush>
				return ERROR;
 8003b5e:	2304      	movs	r3, #4
 8003b60:	e032      	b.n	8003bc8 <Command_Process+0xe4>
			}
			else if(response == IDLE)
 8003b62:	7bfb      	ldrb	r3, [r7, #15]
 8003b64:	2b05      	cmp	r3, #5
 8003b66:	d101      	bne.n	8003b6c <Command_Process+0x88>
			{
				return response;
 8003b68:	7bfb      	ldrb	r3, [r7, #15]
 8003b6a:	e02d      	b.n	8003bc8 <Command_Process+0xe4>
			}
			else if(response == FOUND)
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d123      	bne.n	8003bba <Command_Process+0xd6>
			{
				if(currentCommand == (numberOfCommands-1))
 8003b72:	4b17      	ldr	r3, [pc, #92]	; (8003bd0 <Command_Process+0xec>)
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	78fb      	ldrb	r3, [r7, #3]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d10c      	bne.n	8003b9a <Command_Process+0xb6>
				{
					commandFlag = 1;
 8003b80:	4b15      	ldr	r3, [pc, #84]	; (8003bd8 <Command_Process+0xf4>)
 8003b82:	2201      	movs	r2, #1
 8003b84:	701a      	strb	r2, [r3, #0]
					currentCommand = 0;
 8003b86:	4b12      	ldr	r3, [pc, #72]	; (8003bd0 <Command_Process+0xec>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 8003b8c:	4b11      	ldr	r3, [pc, #68]	; (8003bd4 <Command_Process+0xf0>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 f8bc 	bl	8003d0e <ringBuffer_flush>
					return OK;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e016      	b.n	8003bc8 <Command_Process+0xe4>
				}
				else
				{
					commandFlag = 1;
 8003b9a:	4b0f      	ldr	r3, [pc, #60]	; (8003bd8 <Command_Process+0xf4>)
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	701a      	strb	r2, [r3, #0]
					currentCommand += 1;
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <Command_Process+0xec>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <Command_Process+0xec>)
 8003baa:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 8003bac:	4b09      	ldr	r3, [pc, #36]	; (8003bd4 <Command_Process+0xf0>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f000 f8ac 	bl	8003d0e <ringBuffer_flush>
					return response;
 8003bb6:	7bfb      	ldrb	r3, [r7, #15]
 8003bb8:	e006      	b.n	8003bc8 <Command_Process+0xe4>
				}

			}
			else
			{
				commandFlag = 1;
 8003bba:	4b07      	ldr	r3, [pc, #28]	; (8003bd8 <Command_Process+0xf4>)
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 8003bc0:	4b03      	ldr	r3, [pc, #12]	; (8003bd0 <Command_Process+0xec>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	701a      	strb	r2, [r3, #0]
				return response;
 8003bc6:	7bfb      	ldrb	r3, [r7, #15]
			}
//		}
	}


}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	20000374 	.word	0x20000374
 8003bd4:	20000498 	.word	0x20000498
 8003bd8:	20000010 	.word	0x20000010
 8003bdc:	08021d70 	.word	0x08021d70
 8003be0:	08021d74 	.word	0x08021d74

08003be4 <ringBuffer_init>:
 * @brief 	Initialize the ring buffer. Ring buffer is allocated after this function.
 * @param 	size parameter specifies the size of ring buffer.
 * @retval	RingBuffer typedef structure.
 */
RingBuffer* ringBuffer_init(uint32_t size)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
	RingBuffer* rBuf;

	rBuf = (RingBuffer*)malloc(1*sizeof(RingBuffer));
 8003bec:	2010      	movs	r0, #16
 8003bee:	f01b f955 	bl	801ee9c <malloc>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	60fb      	str	r3, [r7, #12]
	if(rBuf == NULL)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <ringBuffer_init+0x1c>
	{
		// Error Checks
		return 0;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	e017      	b.n	8003c30 <ringBuffer_init+0x4c>
	}

	rBuf->size = size;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	609a      	str	r2, [r3, #8]
	rBuf->head = 0;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]
	rBuf->tail = 0;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	605a      	str	r2, [r3, #4]

	rBuf->buffer = (uint8_t*)calloc((size_t)size,sizeof(uint8_t));
 8003c12:	2101      	movs	r1, #1
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f01a fb79 	bl	801e30c <calloc>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	60da      	str	r2, [r3, #12]
	if(rBuf->buffer == NULL)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <ringBuffer_init+0x4a>
		{
			// Error Checks
			return 0;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	e000      	b.n	8003c30 <ringBuffer_init+0x4c>
		}

	return rBuf;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <ringBuffer_deInit>:
 * @brief 	De-initialize the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_deInit(RingBuffer* buffer)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
	if(buffer != NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00b      	beq.n	8003c5e <ringBuffer_deInit+0x26>
	{
		if(buffer->buffer != NULL)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d004      	beq.n	8003c58 <ringBuffer_deInit+0x20>
		{
			free(buffer->buffer);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f01b f92a 	bl	801eeac <free>
		}
		free(buffer);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f01b f927 	bl	801eeac <free>
	}
}
 8003c5e:	bf00      	nop
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <ringBuffer_push>:
 * @param 	RingBuffer typedef structure.
 * @param 	data is an unsigned 8-bit integer variable to be pushed into the buffer.
 * @retval	None.
 */
void ringBuffer_push(RingBuffer* ringBuffer, uint8_t data)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	460b      	mov	r3, r1
 8003c70:	70fb      	strb	r3, [r7, #3]
	if(ringBuffer->head != (ringBuffer->size - 1))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d00c      	beq.n	8003c9a <ringBuffer_push+0x34>
	{
		ringBuffer->buffer[ringBuffer->head] = data;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4413      	add	r3, r2
 8003c8a:	78fa      	ldrb	r2, [r7, #3]
 8003c8c:	701a      	strb	r2, [r3, #0]
		ringBuffer->head += 1;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	601a      	str	r2, [r3, #0]
	else
	{
		ringBuffer->buffer[ringBuffer->head] = data;
		ringBuffer->head = 0;
	}
}
 8003c98:	e009      	b.n	8003cae <ringBuffer_push+0x48>
		ringBuffer->buffer[ringBuffer->head] = data;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	78fa      	ldrb	r2, [r7, #3]
 8003ca6:	701a      	strb	r2, [r3, #0]
		ringBuffer->head = 0;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <ringBuffer_pop>:
 * @brief 	Read data from the buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	unsigned 8-bit integer data to be read from the buffer.
 */
uint8_t ringBuffer_pop(RingBuffer* ringBuffer)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b085      	sub	sp, #20
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
	uint8_t data;

	if(ringBuffer->tail != (ringBuffer->size - 1))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d00d      	beq.n	8003cec <ringBuffer_pop+0x32>
	{
		data = ringBuffer->buffer[ringBuffer->tail];
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	4413      	add	r3, r2
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail += 1;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	605a      	str	r2, [r3, #4]
		return data;
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
 8003cea:	e00a      	b.n	8003d02 <ringBuffer_pop+0x48>
	}
	else
	{

		data = ringBuffer->buffer[ringBuffer->tail];
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68da      	ldr	r2, [r3, #12]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail = 0;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	605a      	str	r2, [r3, #4]
		return data;
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <ringBuffer_flush>:
 * @brief 	Clear the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_flush(RingBuffer* ringBuffer)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b082      	sub	sp, #8
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
	memset(ringBuffer->buffer,0x00,ringBuffer->size);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68d8      	ldr	r0, [r3, #12]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	2100      	movs	r1, #0
 8003d22:	f01b f8d9 	bl	801eed8 <memset>
	ringBuffer->head = ringBuffer->tail = 0;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	605a      	str	r2, [r3, #4]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	601a      	str	r2, [r3, #0]
}
 8003d34:	bf00      	nop
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <ringBuffer_pushArray>:
 * @param 	RingBuffer typedef structure.
 * @param	data is an unsigned 8-bit data array to be written into the buffer.
 * @retval	None.
 */
void ringBuffer_pushArray(RingBuffer* ringBuffer, uint8_t* data)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
	 for(int i = 0; i<strlen((char*)data);i++)
 8003d46:	2300      	movs	r3, #0
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	e00a      	b.n	8003d62 <ringBuffer_pushArray+0x26>
		 ringBuffer_push(ringBuffer, data[i]);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	4413      	add	r3, r2
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	4619      	mov	r1, r3
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7ff ff85 	bl	8003c66 <ringBuffer_push>
	 for(int i = 0; i<strlen((char*)data);i++)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	6838      	ldr	r0, [r7, #0]
 8003d64:	f7fc fa6a 	bl	800023c <strlen>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d8ed      	bhi.n	8003d4c <ringBuffer_pushArray+0x10>
}
 8003d70:	bf00      	nop
 8003d72:	bf00      	nop
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <ringBuffer_lookFor>:
 * @param	data is an unsigned 8-bit array to be searched in the buffer.
 * @retval	1: data is available in the buffer.
 * 			0: data is not available in the buffer.
 */
uint32_t ringBuffer_lookFor(RingBuffer* ringBuffer, uint8_t* data)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b084      	sub	sp, #16
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
 8003d82:	6039      	str	r1, [r7, #0]
	char* str = strstr((char*)ringBuffer->buffer,(char*)data);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	6839      	ldr	r1, [r7, #0]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f01c f81a 	bl	801fdc4 <strstr>
 8003d90:	60f8      	str	r0, [r7, #12]

	if(str != NULL)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <ringBuffer_lookFor+0x22>
		return 1;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e000      	b.n	8003d9e <ringBuffer_lookFor+0x24>
	else
		return 0;
 8003d9c:	2300      	movs	r3, #0

}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <ringBuffer_capacity>:
 * @brief 	Check the size of the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	Size of ring buffer.
 */
uint32_t ringBuffer_capacity(RingBuffer* ringBuffer)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
	return ringBuffer->size;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
	...

08003dc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003dc6:	f7fd f8d2 	bl	8000f6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003dca:	f000 f81d 	bl	8003e08 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003dce:	f000 f951 	bl	8004074 <_ZL12MX_GPIO_Initv>
  MX_LPUART1_UART_Init();
 8003dd2:	f000 f891 	bl	8003ef8 <_ZL20MX_LPUART1_UART_Initv>
  MX_USART1_UART_Init();
 8003dd6:	f000 f8ed 	bl	8003fb4 <_ZL19MX_USART1_UART_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const char * av_override[] = { "exe","-v" };      // verbose mode
 8003dda:	4a0a      	ldr	r2, [pc, #40]	; (8003e04 <main+0x44>)
 8003ddc:	463b      	mov	r3, r7
 8003dde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003de2:	e883 0003 	stmia.w	r3, {r0, r1}
  CommandLineTestRunner::RunAllTests(2, av_override);
 8003de6:	463b      	mov	r3, r7
 8003de8:	4619      	mov	r1, r3
 8003dea:	2002      	movs	r0, #2
 8003dec:	f003 fb04 	bl	80073f8 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>

  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003df0:	2120      	movs	r1, #32
 8003df2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003df6:	f7fd fcb7 	bl	8001768 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8003dfa:	2064      	movs	r0, #100	; 0x64
 8003dfc:	f7fd f928 	bl	8001050 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003e00:	e7f6      	b.n	8003df0 <main+0x30>
 8003e02:	bf00      	nop
 8003e04:	08021d84 	.word	0x08021d84

08003e08 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b0a8      	sub	sp, #160	; 0xa0
 8003e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e0e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003e12:	2238      	movs	r2, #56	; 0x38
 8003e14:	2100      	movs	r1, #0
 8003e16:	4618      	mov	r0, r3
 8003e18:	f01b f85e 	bl	801eed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	605a      	str	r2, [r3, #4]
 8003e26:	609a      	str	r2, [r3, #8]
 8003e28:	60da      	str	r2, [r3, #12]
 8003e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e2c:	463b      	mov	r3, r7
 8003e2e:	2254      	movs	r2, #84	; 0x54
 8003e30:	2100      	movs	r1, #0
 8003e32:	4618      	mov	r0, r3
 8003e34:	f01b f850 	bl	801eed8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003e38:	2000      	movs	r0, #0
 8003e3a:	f7fd fcd3 	bl	80017e4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003e3e:	2302      	movs	r3, #2
 8003e40:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e46:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003e48:	2340      	movs	r3, #64	; 0x40
 8003e4a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003e52:	2302      	movs	r3, #2
 8003e54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003e58:	2304      	movs	r3, #4
 8003e5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003e5e:	2355      	movs	r3, #85	; 0x55
 8003e60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e64:	2302      	movs	r3, #2
 8003e66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003e70:	2302      	movs	r3, #2
 8003e72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e76:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fd fd66 	bl	800194c <HAL_RCC_OscConfig>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	bf14      	ite	ne
 8003e86:	2301      	movne	r3, #1
 8003e88:	2300      	moveq	r3, #0
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8003e90:	f000 f960 	bl	8004154 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e94:	230f      	movs	r3, #15
 8003e96:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003ea8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003eac:	2104      	movs	r1, #4
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fe f864 	bl	8001f7c <HAL_RCC_ClockConfig>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	bf14      	ite	ne
 8003eba:	2301      	movne	r3, #1
 8003ebc:	2300      	moveq	r3, #0
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8003ec4:	f000 f946 	bl	8004154 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 8003ec8:	2321      	movs	r3, #33	; 0x21
 8003eca:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ed4:	463b      	mov	r3, r7
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fe fa6c 	bl	80023b4 <HAL_RCCEx_PeriphCLKConfig>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	bf14      	ite	ne
 8003ee2:	2301      	movne	r3, #1
 8003ee4:	2300      	moveq	r3, #0
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 8003eec:	f000 f932 	bl	8004154 <Error_Handler>
  }
}
 8003ef0:	bf00      	nop
 8003ef2:	37a0      	adds	r7, #160	; 0xa0
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003efc:	4b2b      	ldr	r3, [pc, #172]	; (8003fac <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003efe:	4a2c      	ldr	r2, [pc, #176]	; (8003fb0 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8003f00:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8003f02:	4b2a      	ldr	r3, [pc, #168]	; (8003fac <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003f04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f08:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f0a:	4b28      	ldr	r3, [pc, #160]	; (8003fac <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003f10:	4b26      	ldr	r3, [pc, #152]	; (8003fac <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003f16:	4b25      	ldr	r3, [pc, #148]	; (8003fac <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003f1c:	4b23      	ldr	r3, [pc, #140]	; (8003fac <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003f1e:	220c      	movs	r2, #12
 8003f20:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f22:	4b22      	ldr	r3, [pc, #136]	; (8003fac <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f28:	4b20      	ldr	r3, [pc, #128]	; (8003fac <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f2e:	4b1f      	ldr	r3, [pc, #124]	; (8003fac <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f34:	4b1d      	ldr	r3, [pc, #116]	; (8003fac <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003f3a:	481c      	ldr	r0, [pc, #112]	; (8003fac <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003f3c:	f7fe fc86 	bl	800284c <HAL_UART_Init>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	bf14      	ite	ne
 8003f46:	2301      	movne	r3, #1
 8003f48:	2300      	moveq	r3, #0
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8003f50:	f000 f900 	bl	8004154 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f54:	2100      	movs	r1, #0
 8003f56:	4815      	ldr	r0, [pc, #84]	; (8003fac <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003f58:	f7ff fc0c 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	bf14      	ite	ne
 8003f62:	2301      	movne	r3, #1
 8003f64:	2300      	moveq	r3, #0
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 8003f6c:	f000 f8f2 	bl	8004154 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f70:	2100      	movs	r1, #0
 8003f72:	480e      	ldr	r0, [pc, #56]	; (8003fac <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003f74:	f7ff fc3c 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	bf14      	ite	ne
 8003f7e:	2301      	movne	r3, #1
 8003f80:	2300      	moveq	r3, #0
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 8003f88:	f000 f8e4 	bl	8004154 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003f8c:	4807      	ldr	r0, [pc, #28]	; (8003fac <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003f8e:	f7ff fbb8 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	bf14      	ite	ne
 8003f98:	2301      	movne	r3, #1
 8003f9a:	2300      	moveq	r3, #0
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 8003fa2:	f000 f8d7 	bl	8004154 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003fa6:	bf00      	nop
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	20000378 	.word	0x20000378
 8003fb0:	40008000 	.word	0x40008000

08003fb4 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003fb8:	4b2c      	ldr	r3, [pc, #176]	; (800406c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003fba:	4a2d      	ldr	r2, [pc, #180]	; (8004070 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8003fbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003fbe:	4b2b      	ldr	r3, [pc, #172]	; (800406c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003fc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003fc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003fc6:	4b29      	ldr	r3, [pc, #164]	; (800406c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003fcc:	4b27      	ldr	r3, [pc, #156]	; (800406c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003fd2:	4b26      	ldr	r3, [pc, #152]	; (800406c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003fd8:	4b24      	ldr	r3, [pc, #144]	; (800406c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003fda:	220c      	movs	r2, #12
 8003fdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fde:	4b23      	ldr	r3, [pc, #140]	; (800406c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fe4:	4b21      	ldr	r3, [pc, #132]	; (800406c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003fea:	4b20      	ldr	r3, [pc, #128]	; (800406c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003ff0:	4b1e      	ldr	r3, [pc, #120]	; (800406c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ff6:	4b1d      	ldr	r3, [pc, #116]	; (800406c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ffc:	481b      	ldr	r0, [pc, #108]	; (800406c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ffe:	f7fe fc25 	bl	800284c <HAL_UART_Init>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	bf14      	ite	ne
 8004008:	2301      	movne	r3, #1
 800400a:	2300      	moveq	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8004012:	f000 f89f 	bl	8004154 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004016:	2100      	movs	r1, #0
 8004018:	4814      	ldr	r0, [pc, #80]	; (800406c <_ZL19MX_USART1_UART_Initv+0xb8>)
 800401a:	f7ff fbab 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	bf14      	ite	ne
 8004024:	2301      	movne	r3, #1
 8004026:	2300      	moveq	r3, #0
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 800402e:	f000 f891 	bl	8004154 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004032:	2100      	movs	r1, #0
 8004034:	480d      	ldr	r0, [pc, #52]	; (800406c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004036:	f7ff fbdb 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	bf14      	ite	ne
 8004040:	2301      	movne	r3, #1
 8004042:	2300      	moveq	r3, #0
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 800404a:	f000 f883 	bl	8004154 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800404e:	4807      	ldr	r0, [pc, #28]	; (800406c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004050:	f7ff fb57 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	bf14      	ite	ne
 800405a:	2301      	movne	r3, #1
 800405c:	2300      	moveq	r3, #0
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8004064:	f000 f876 	bl	8004154 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004068:	bf00      	nop
 800406a:	bd80      	pop	{r7, pc}
 800406c:	20000408 	.word	0x20000408
 8004070:	40013800 	.word	0x40013800

08004074 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b08a      	sub	sp, #40	; 0x28
 8004078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800407a:	f107 0314 	add.w	r3, r7, #20
 800407e:	2200      	movs	r2, #0
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	605a      	str	r2, [r3, #4]
 8004084:	609a      	str	r2, [r3, #8]
 8004086:	60da      	str	r2, [r3, #12]
 8004088:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800408a:	4b2f      	ldr	r3, [pc, #188]	; (8004148 <_ZL12MX_GPIO_Initv+0xd4>)
 800408c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800408e:	4a2e      	ldr	r2, [pc, #184]	; (8004148 <_ZL12MX_GPIO_Initv+0xd4>)
 8004090:	f043 0304 	orr.w	r3, r3, #4
 8004094:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004096:	4b2c      	ldr	r3, [pc, #176]	; (8004148 <_ZL12MX_GPIO_Initv+0xd4>)
 8004098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800409a:	f003 0304 	and.w	r3, r3, #4
 800409e:	613b      	str	r3, [r7, #16]
 80040a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80040a2:	4b29      	ldr	r3, [pc, #164]	; (8004148 <_ZL12MX_GPIO_Initv+0xd4>)
 80040a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a6:	4a28      	ldr	r2, [pc, #160]	; (8004148 <_ZL12MX_GPIO_Initv+0xd4>)
 80040a8:	f043 0320 	orr.w	r3, r3, #32
 80040ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040ae:	4b26      	ldr	r3, [pc, #152]	; (8004148 <_ZL12MX_GPIO_Initv+0xd4>)
 80040b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b2:	f003 0320 	and.w	r3, r3, #32
 80040b6:	60fb      	str	r3, [r7, #12]
 80040b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ba:	4b23      	ldr	r3, [pc, #140]	; (8004148 <_ZL12MX_GPIO_Initv+0xd4>)
 80040bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040be:	4a22      	ldr	r2, [pc, #136]	; (8004148 <_ZL12MX_GPIO_Initv+0xd4>)
 80040c0:	f043 0301 	orr.w	r3, r3, #1
 80040c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040c6:	4b20      	ldr	r3, [pc, #128]	; (8004148 <_ZL12MX_GPIO_Initv+0xd4>)
 80040c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	60bb      	str	r3, [r7, #8]
 80040d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040d2:	4b1d      	ldr	r3, [pc, #116]	; (8004148 <_ZL12MX_GPIO_Initv+0xd4>)
 80040d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d6:	4a1c      	ldr	r2, [pc, #112]	; (8004148 <_ZL12MX_GPIO_Initv+0xd4>)
 80040d8:	f043 0302 	orr.w	r3, r3, #2
 80040dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040de:	4b1a      	ldr	r3, [pc, #104]	; (8004148 <_ZL12MX_GPIO_Initv+0xd4>)
 80040e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	607b      	str	r3, [r7, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80040ea:	2200      	movs	r2, #0
 80040ec:	2120      	movs	r1, #32
 80040ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040f2:	f7fd fb21 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80040f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80040fc:	4b13      	ldr	r3, [pc, #76]	; (800414c <_ZL12MX_GPIO_Initv+0xd8>)
 80040fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004100:	2300      	movs	r3, #0
 8004102:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004104:	f107 0314 	add.w	r3, r7, #20
 8004108:	4619      	mov	r1, r3
 800410a:	4811      	ldr	r0, [pc, #68]	; (8004150 <_ZL12MX_GPIO_Initv+0xdc>)
 800410c:	f7fd f992 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004110:	2320      	movs	r3, #32
 8004112:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004114:	2301      	movs	r3, #1
 8004116:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004118:	2300      	movs	r3, #0
 800411a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800411c:	2300      	movs	r3, #0
 800411e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004120:	f107 0314 	add.w	r3, r7, #20
 8004124:	4619      	mov	r1, r3
 8004126:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800412a:	f7fd f983 	bl	8001434 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800412e:	2200      	movs	r2, #0
 8004130:	2100      	movs	r1, #0
 8004132:	2028      	movs	r0, #40	; 0x28
 8004134:	f7fd f889 	bl	800124a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004138:	2028      	movs	r0, #40	; 0x28
 800413a:	f7fd f8a0 	bl	800127e <HAL_NVIC_EnableIRQ>

}
 800413e:	bf00      	nop
 8004140:	3728      	adds	r7, #40	; 0x28
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	40021000 	.word	0x40021000
 800414c:	10110000 	.word	0x10110000
 8004150:	48000800 	.word	0x48000800

08004154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004158:	b672      	cpsid	i
}
 800415a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800415c:	e7fe      	b.n	800415c <Error_Handler+0x8>

0800415e <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group5setupEv>:
TEST_GROUP(RingBuffer_Test_Group)
{

	RingBuffer* testBuf;

	void setup()
 800415e:	b580      	push	{r7, lr}
 8004160:	b082      	sub	sp, #8
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
	{

	   testBuf = ringBuffer_init(50);
 8004166:	2032      	movs	r0, #50	; 0x32
 8004168:	f7ff fd3c 	bl	8003be4 <ringBuffer_init>
 800416c:	4602      	mov	r2, r0
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	605a      	str	r2, [r3, #4]

	}
 8004172:	bf00      	nop
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group8teardownEv>:

	void teardown()
 800417a:	b580      	push	{r7, lr}
 800417c:	b082      	sub	sp, #8
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
	{

		ringBuffer_deInit(testBuf);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff fd56 	bl	8003c38 <ringBuffer_deInit>
	}
 800418c:	bf00      	nop
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>:
TEST_GROUP(RingBuffer_Test_Group)
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4618      	mov	r0, r3
 80041a0:	f00e fdc8 	bl	8012d34 <_ZN5UtestC1Ev>
 80041a4:	4a03      	ldr	r2, [pc, #12]	; (80041b4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev+0x20>)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4618      	mov	r0, r3
 80041ae:	3708      	adds	r7, #8
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	08025fc0 	.word	0x08025fc0

080041b8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>:
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	4a05      	ldr	r2, [pc, #20]	; (80041d8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev+0x20>)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f00e fdc3 	bl	8012d54 <_ZN5UtestD1Ev>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4618      	mov	r0, r3
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	08025fc0 	.word	0x08025fc0

080041dc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD0Ev>:
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7ff ffe7 	bl	80041b8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80041ea:	2108      	movs	r1, #8
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f004 fde5 	bl	8008dbc <_ZdlPvj>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4618      	mov	r0, r3
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>:
};


TEST(RingBuffer_Test_Group, InitTest)
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	605a      	str	r2, [r3, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4618      	mov	r0, r3
 8004214:	f7ff ffbe 	bl	8004194 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004218:	4a03      	ldr	r2, [pc, #12]	; (8004228 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev+0x2c>)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4618      	mov	r0, r3
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	08025fa0 	.word	0x08025fa0

0800422c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv>:
 800422c:	b590      	push	{r4, r7, lr}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	2224      	movs	r2, #36	; 0x24
 8004236:	4906      	ldr	r1, [pc, #24]	; (8004250 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv+0x24>)
 8004238:	2008      	movs	r0, #8
 800423a:	f004 fdab 	bl	8008d94 <_ZnwjPKci>
 800423e:	4604      	mov	r4, r0
 8004240:	4620      	mov	r0, r4
 8004242:	f7ff ffdb 	bl	80041fc <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>
 8004246:	4623      	mov	r3, r4
 8004248:	4618      	mov	r0, r3
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	bd90      	pop	{r4, r7, pc}
 8004250:	08021dc4 	.word	0x08021dc4

08004254 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>:
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4618      	mov	r0, r3
 8004260:	f00d f986 	bl	8011570 <_ZN10UtestShellC1Ev>
 8004264:	4a03      	ldr	r2, [pc, #12]	; (8004274 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev+0x20>)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4618      	mov	r0, r3
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	08025ef4 	.word	0x08025ef4

08004278 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv>:
{
 8004278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800427a:	b087      	sub	sp, #28
 800427c:	af04      	add	r7, sp, #16
 800427e:	6078      	str	r0, [r7, #4]

   LONGS_EQUAL(50,testBuf->size);
 8004280:	f00e fd2e 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 8004284:	4604      	mov	r4, r0
 8004286:	6823      	ldr	r3, [r4, #0]
 8004288:	3338      	adds	r3, #56	; 0x38
 800428a:	681d      	ldr	r5, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	461e      	mov	r6, r3
 8004294:	f00e fd34 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004298:	4603      	mov	r3, r0
 800429a:	9302      	str	r3, [sp, #8]
 800429c:	2327      	movs	r3, #39	; 0x27
 800429e:	9301      	str	r3, [sp, #4]
 80042a0:	4b2a      	ldr	r3, [pc, #168]	; (800434c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	4b2a      	ldr	r3, [pc, #168]	; (8004350 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd8>)
 80042a6:	4632      	mov	r2, r6
 80042a8:	2132      	movs	r1, #50	; 0x32
 80042aa:	4620      	mov	r0, r4
 80042ac:	47a8      	blx	r5
   CHECK(testBuf->buffer != NULL);
 80042ae:	f00e fd17 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 80042b2:	4604      	mov	r4, r0
 80042b4:	6823      	ldr	r3, [r4, #0]
 80042b6:	3320      	adds	r3, #32
 80042b8:	681d      	ldr	r5, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	bf14      	ite	ne
 80042c4:	2301      	movne	r3, #1
 80042c6:	2300      	moveq	r3, #0
 80042c8:	b2de      	uxtb	r6, r3
 80042ca:	f00e fd19 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80042ce:	4603      	mov	r3, r0
 80042d0:	9303      	str	r3, [sp, #12]
 80042d2:	2328      	movs	r3, #40	; 0x28
 80042d4:	9302      	str	r3, [sp, #8]
 80042d6:	4b1d      	ldr	r3, [pc, #116]	; (800434c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 80042d8:	9301      	str	r3, [sp, #4]
 80042da:	2300      	movs	r3, #0
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	4b1d      	ldr	r3, [pc, #116]	; (8004354 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xdc>)
 80042e0:	4a1d      	ldr	r2, [pc, #116]	; (8004358 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe0>)
 80042e2:	4631      	mov	r1, r6
 80042e4:	4620      	mov	r0, r4
 80042e6:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->head);
 80042e8:	f00e fcfa 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 80042ec:	4604      	mov	r4, r0
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	3338      	adds	r3, #56	; 0x38
 80042f2:	681d      	ldr	r5, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	461e      	mov	r6, r3
 80042fc:	f00e fd00 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004300:	4603      	mov	r3, r0
 8004302:	9302      	str	r3, [sp, #8]
 8004304:	2329      	movs	r3, #41	; 0x29
 8004306:	9301      	str	r3, [sp, #4]
 8004308:	4b10      	ldr	r3, [pc, #64]	; (800434c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	4b13      	ldr	r3, [pc, #76]	; (800435c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe4>)
 800430e:	4632      	mov	r2, r6
 8004310:	2100      	movs	r1, #0
 8004312:	4620      	mov	r0, r4
 8004314:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->tail);
 8004316:	f00e fce3 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 800431a:	4604      	mov	r4, r0
 800431c:	6823      	ldr	r3, [r4, #0]
 800431e:	3338      	adds	r3, #56	; 0x38
 8004320:	681d      	ldr	r5, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	461e      	mov	r6, r3
 800432a:	f00e fce9 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800432e:	4603      	mov	r3, r0
 8004330:	9302      	str	r3, [sp, #8]
 8004332:	232a      	movs	r3, #42	; 0x2a
 8004334:	9301      	str	r3, [sp, #4]
 8004336:	4b05      	ldr	r3, [pc, #20]	; (800434c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	4b09      	ldr	r3, [pc, #36]	; (8004360 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe8>)
 800433c:	4632      	mov	r2, r6
 800433e:	2100      	movs	r1, #0
 8004340:	4620      	mov	r0, r4
 8004342:	47a8      	blx	r5

}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800434c:	08021dc4 	.word	0x08021dc4
 8004350:	08021dd8 	.word	0x08021dd8
 8004354:	08021e00 	.word	0x08021e00
 8004358:	08021e18 	.word	0x08021e18
 800435c:	08021e20 	.word	0x08021e20
 8004360:	08021e48 	.word	0x08021e48

08004364 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushDataTests)
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	605a      	str	r2, [r3, #4]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff ff0a 	bl	8004194 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004380:	4a03      	ldr	r2, [pc, #12]	; (8004390 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev+0x2c>)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4618      	mov	r0, r3
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	08025ed4 	.word	0x08025ed4

08004394 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv>:
 8004394:	b590      	push	{r4, r7, lr}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	222e      	movs	r2, #46	; 0x2e
 800439e:	4906      	ldr	r1, [pc, #24]	; (80043b8 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv+0x24>)
 80043a0:	2008      	movs	r0, #8
 80043a2:	f004 fcf7 	bl	8008d94 <_ZnwjPKci>
 80043a6:	4604      	mov	r4, r0
 80043a8:	4620      	mov	r0, r4
 80043aa:	f7ff ffdb 	bl	8004364 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>
 80043ae:	4623      	mov	r3, r4
 80043b0:	4618      	mov	r0, r3
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd90      	pop	{r4, r7, pc}
 80043b8:	08021dc4 	.word	0x08021dc4

080043bc <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>:
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f00d f8d2 	bl	8011570 <_ZN10UtestShellC1Ev>
 80043cc:	4a03      	ldr	r2, [pc, #12]	; (80043dc <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev+0x20>)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4618      	mov	r0, r3
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	08025e28 	.word	0x08025e28

080043e0 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv>:
{
 80043e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043e2:	b087      	sub	sp, #28
 80043e4:	af04      	add	r7, sp, #16
 80043e6:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0x45);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2145      	movs	r1, #69	; 0x45
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff fc39 	bl	8003c66 <ringBuffer_push>
	LONGS_EQUAL(0x45,testBuf->buffer[0]);
 80043f4:	f00e fc74 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 80043f8:	4604      	mov	r4, r0
 80043fa:	6823      	ldr	r3, [r4, #0]
 80043fc:	3338      	adds	r3, #56	; 0x38
 80043fe:	681d      	ldr	r5, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	461e      	mov	r6, r3
 800440a:	f00e fc79 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800440e:	4603      	mov	r3, r0
 8004410:	9302      	str	r3, [sp, #8]
 8004412:	2331      	movs	r3, #49	; 0x31
 8004414:	9301      	str	r3, [sp, #4]
 8004416:	4b15      	ldr	r3, [pc, #84]	; (800446c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	4b15      	ldr	r3, [pc, #84]	; (8004470 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x90>)
 800441c:	4632      	mov	r2, r6
 800441e:	2145      	movs	r1, #69	; 0x45
 8004420:	4620      	mov	r0, r4
 8004422:	47a8      	blx	r5

	ringBuffer_push(testBuf, 0x10);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2110      	movs	r1, #16
 800442a:	4618      	mov	r0, r3
 800442c:	f7ff fc1b 	bl	8003c66 <ringBuffer_push>
	LONGS_EQUAL(0x10,testBuf->buffer[1]);
 8004430:	f00e fc56 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 8004434:	4604      	mov	r4, r0
 8004436:	6823      	ldr	r3, [r4, #0]
 8004438:	3338      	adds	r3, #56	; 0x38
 800443a:	681d      	ldr	r5, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	3301      	adds	r3, #1
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	461e      	mov	r6, r3
 8004448:	f00e fc5a 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800444c:	4603      	mov	r3, r0
 800444e:	9302      	str	r3, [sp, #8]
 8004450:	2334      	movs	r3, #52	; 0x34
 8004452:	9301      	str	r3, [sp, #4]
 8004454:	4b05      	ldr	r3, [pc, #20]	; (800446c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	4b06      	ldr	r3, [pc, #24]	; (8004474 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x94>)
 800445a:	4632      	mov	r2, r6
 800445c:	2110      	movs	r1, #16
 800445e:	4620      	mov	r0, r4
 8004460:	47a8      	blx	r5

}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800446a:	bf00      	nop
 800446c:	08021dc4 	.word	0x08021dc4
 8004470:	08021e70 	.word	0x08021e70
 8004474:	08021ea0 	.word	0x08021ea0

08004478 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	605a      	str	r2, [r3, #4]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4618      	mov	r0, r3
 8004490:	f7ff fe80 	bl	8004194 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004494:	4a03      	ldr	r2, [pc, #12]	; (80044a4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev+0x2c>)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4618      	mov	r0, r3
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	08025e08 	.word	0x08025e08

080044a8 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv>:
 80044a8:	b590      	push	{r4, r7, lr}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	2238      	movs	r2, #56	; 0x38
 80044b2:	4906      	ldr	r1, [pc, #24]	; (80044cc <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv+0x24>)
 80044b4:	2008      	movs	r0, #8
 80044b6:	f004 fc6d 	bl	8008d94 <_ZnwjPKci>
 80044ba:	4604      	mov	r4, r0
 80044bc:	4620      	mov	r0, r4
 80044be:	f7ff ffdb 	bl	8004478 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>
 80044c2:	4623      	mov	r3, r4
 80044c4:	4618      	mov	r0, r3
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd90      	pop	{r4, r7, pc}
 80044cc:	08021dc4 	.word	0x08021dc4

080044d0 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>:
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4618      	mov	r0, r3
 80044dc:	f00d f848 	bl	8011570 <_ZN10UtestShellC1Ev>
 80044e0:	4a03      	ldr	r2, [pc, #12]	; (80044f0 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev+0x20>)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4618      	mov	r0, r3
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	08025d5c 	.word	0x08025d5c

080044f4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv>:
{
 80044f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044f6:	b089      	sub	sp, #36	; 0x24
 80044f8:	af04      	add	r7, sp, #16
 80044fa:	6078      	str	r0, [r7, #4]
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	3b01      	subs	r3, #1
 8004512:	429a      	cmp	r2, r3
 8004514:	bf0c      	ite	eq
 8004516:	2301      	moveq	r3, #1
 8004518:	2300      	movne	r3, #0
 800451a:	b2db      	uxtb	r3, r3
 800451c:	461a      	mov	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	4293      	cmp	r3, r2
 8004522:	da0b      	bge.n	800453c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x48>
	{
		ringBuffer_push(testBuf, (uint8_t)i);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	4611      	mov	r1, r2
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff fb99 	bl	8003c66 <ringBuffer_push>
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3301      	adds	r3, #1
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	e7e3      	b.n	8004504 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x10>
	}

	ringBuffer_push(testBuf, 0xFF);			// This data must be the first element of buffer.
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	21ff      	movs	r1, #255	; 0xff
 8004542:	4618      	mov	r0, r3
 8004544:	f7ff fb8f 	bl	8003c66 <ringBuffer_push>
	LONGS_EQUAL(0xFF,testBuf->buffer[0]);
 8004548:	f00e fbca 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 800454c:	4604      	mov	r4, r0
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	3338      	adds	r3, #56	; 0x38
 8004552:	681d      	ldr	r5, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	461e      	mov	r6, r3
 800455e:	f00e fbcf 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004562:	4603      	mov	r3, r0
 8004564:	9302      	str	r3, [sp, #8]
 8004566:	2340      	movs	r3, #64	; 0x40
 8004568:	9301      	str	r3, [sp, #4]
 800456a:	4b05      	ldr	r3, [pc, #20]	; (8004580 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x8c>)
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	4b05      	ldr	r3, [pc, #20]	; (8004584 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x90>)
 8004570:	4632      	mov	r2, r6
 8004572:	21ff      	movs	r1, #255	; 0xff
 8004574:	4620      	mov	r0, r4
 8004576:	47a8      	blx	r5
}
 8004578:	bf00      	nop
 800457a:	3714      	adds	r7, #20
 800457c:	46bd      	mov	sp, r7
 800457e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004580:	08021dc4 	.word	0x08021dc4
 8004584:	08021ed0 	.word	0x08021ed0

08004588 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopDataTests)
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	605a      	str	r2, [r3, #4]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4618      	mov	r0, r3
 80045a0:	f7ff fdf8 	bl	8004194 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80045a4:	4a03      	ldr	r2, [pc, #12]	; (80045b4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev+0x2c>)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4618      	mov	r0, r3
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	08025d3c 	.word	0x08025d3c

080045b8 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv>:
 80045b8:	b590      	push	{r4, r7, lr}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	2243      	movs	r2, #67	; 0x43
 80045c2:	4906      	ldr	r1, [pc, #24]	; (80045dc <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv+0x24>)
 80045c4:	2008      	movs	r0, #8
 80045c6:	f004 fbe5 	bl	8008d94 <_ZnwjPKci>
 80045ca:	4604      	mov	r4, r0
 80045cc:	4620      	mov	r0, r4
 80045ce:	f7ff ffdb 	bl	8004588 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>
 80045d2:	4623      	mov	r3, r4
 80045d4:	4618      	mov	r0, r3
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd90      	pop	{r4, r7, pc}
 80045dc:	08021dc4 	.word	0x08021dc4

080045e0 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>:
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f00c ffc0 	bl	8011570 <_ZN10UtestShellC1Ev>
 80045f0:	4a03      	ldr	r2, [pc, #12]	; (8004600 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev+0x20>)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4618      	mov	r0, r3
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	08025c90 	.word	0x08025c90

08004604 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv>:
{
 8004604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004606:	b089      	sub	sp, #36	; 0x24
 8004608:	af04      	add	r7, sp, #16
 800460a:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0xFF);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	21ff      	movs	r1, #255	; 0xff
 8004612:	4618      	mov	r0, r3
 8004614:	f7ff fb27 	bl	8003c66 <ringBuffer_push>
	uint8_t data = ringBuffer_pop(testBuf); // 0xFF
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff fb4c 	bl	8003cba <ringBuffer_pop>
 8004622:	4603      	mov	r3, r0
 8004624:	73fb      	strb	r3, [r7, #15]

	LONGS_EQUAL(0xFF,data);
 8004626:	f00e fb5b 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 800462a:	4604      	mov	r4, r0
 800462c:	6823      	ldr	r3, [r4, #0]
 800462e:	3338      	adds	r3, #56	; 0x38
 8004630:	681d      	ldr	r5, [r3, #0]
 8004632:	7bfe      	ldrb	r6, [r7, #15]
 8004634:	f00e fb64 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004638:	4603      	mov	r3, r0
 800463a:	9302      	str	r3, [sp, #8]
 800463c:	2348      	movs	r3, #72	; 0x48
 800463e:	9301      	str	r3, [sp, #4]
 8004640:	4b05      	ldr	r3, [pc, #20]	; (8004658 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x54>)
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	4b05      	ldr	r3, [pc, #20]	; (800465c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x58>)
 8004646:	4632      	mov	r2, r6
 8004648:	21ff      	movs	r1, #255	; 0xff
 800464a:	4620      	mov	r0, r4
 800464c:	47a8      	blx	r5

}
 800464e:	bf00      	nop
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004656:	bf00      	nop
 8004658:	08021dc4 	.word	0x08021dc4
 800465c:	08021f00 	.word	0x08021f00

08004660 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	605a      	str	r2, [r3, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4618      	mov	r0, r3
 8004678:	f7ff fd8c 	bl	8004194 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 800467c:	4a03      	ldr	r2, [pc, #12]	; (800468c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev+0x2c>)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4618      	mov	r0, r3
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	08025c70 	.word	0x08025c70

08004690 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv>:
 8004690:	b590      	push	{r4, r7, lr}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	224c      	movs	r2, #76	; 0x4c
 800469a:	4906      	ldr	r1, [pc, #24]	; (80046b4 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv+0x24>)
 800469c:	2008      	movs	r0, #8
 800469e:	f004 fb79 	bl	8008d94 <_ZnwjPKci>
 80046a2:	4604      	mov	r4, r0
 80046a4:	4620      	mov	r0, r4
 80046a6:	f7ff ffdb 	bl	8004660 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>
 80046aa:	4623      	mov	r3, r4
 80046ac:	4618      	mov	r0, r3
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd90      	pop	{r4, r7, pc}
 80046b4:	08021dc4 	.word	0x08021dc4

080046b8 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>:
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f00c ff54 	bl	8011570 <_ZN10UtestShellC1Ev>
 80046c8:	4a03      	ldr	r2, [pc, #12]	; (80046d8 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev+0x20>)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4618      	mov	r0, r3
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	08025bc4 	.word	0x08025bc4

080046dc <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv>:
{
 80046dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046de:	b089      	sub	sp, #36	; 0x24
 80046e0:	af04      	add	r7, sp, #16
 80046e2:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 80046e4:	2300      	movs	r3, #0
 80046e6:	72fb      	strb	r3, [r7, #11]

	ringBuffer_push(testBuf, 0xAA);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	21aa      	movs	r1, #170	; 0xaa
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7ff fab9 	bl	8003c66 <ringBuffer_push>

	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	3b01      	subs	r3, #1
 800470a:	429a      	cmp	r2, r3
 800470c:	bf0c      	ite	eq
 800470e:	2301      	moveq	r3, #1
 8004710:	2300      	movne	r3, #0
 8004712:	b2db      	uxtb	r3, r3
 8004714:	461a      	mov	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4293      	cmp	r3, r2
 800471a:	da0a      	bge.n	8004732 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x56>
	{
		data = ringBuffer_pop(testBuf);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff faca 	bl	8003cba <ringBuffer_pop>
 8004726:	4603      	mov	r3, r0
 8004728:	72fb      	strb	r3, [r7, #11]
	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	3301      	adds	r3, #1
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	e7e4      	b.n	80046fc <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x20>
	}

	data = ringBuffer_pop(testBuf);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff fabf 	bl	8003cba <ringBuffer_pop>
 800473c:	4603      	mov	r3, r0
 800473e:	72fb      	strb	r3, [r7, #11]

	LONGS_EQUAL(0xAA,data);
 8004740:	f00e face 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 8004744:	4604      	mov	r4, r0
 8004746:	6823      	ldr	r3, [r4, #0]
 8004748:	3338      	adds	r3, #56	; 0x38
 800474a:	681d      	ldr	r5, [r3, #0]
 800474c:	7afe      	ldrb	r6, [r7, #11]
 800474e:	f00e fad7 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004752:	4603      	mov	r3, r0
 8004754:	9302      	str	r3, [sp, #8]
 8004756:	2359      	movs	r3, #89	; 0x59
 8004758:	9301      	str	r3, [sp, #4]
 800475a:	4b05      	ldr	r3, [pc, #20]	; (8004770 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x94>)
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	4b05      	ldr	r3, [pc, #20]	; (8004774 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x98>)
 8004760:	4632      	mov	r2, r6
 8004762:	21aa      	movs	r1, #170	; 0xaa
 8004764:	4620      	mov	r0, r4
 8004766:	47a8      	blx	r5
}
 8004768:	bf00      	nop
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004770:	08021dc4 	.word	0x08021dc4
 8004774:	08021f20 	.word	0x08021f20

08004778 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferFlushTest)
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	605a      	str	r2, [r3, #4]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff fd00 	bl	8004194 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004794:	4a03      	ldr	r2, [pc, #12]	; (80047a4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev+0x2c>)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4618      	mov	r0, r3
 800479e:	3708      	adds	r7, #8
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	08025ba4 	.word	0x08025ba4

080047a8 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv>:
 80047a8:	b590      	push	{r4, r7, lr}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	225c      	movs	r2, #92	; 0x5c
 80047b2:	4906      	ldr	r1, [pc, #24]	; (80047cc <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv+0x24>)
 80047b4:	2008      	movs	r0, #8
 80047b6:	f004 faed 	bl	8008d94 <_ZnwjPKci>
 80047ba:	4604      	mov	r4, r0
 80047bc:	4620      	mov	r0, r4
 80047be:	f7ff ffdb 	bl	8004778 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>
 80047c2:	4623      	mov	r3, r4
 80047c4:	4618      	mov	r0, r3
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd90      	pop	{r4, r7, pc}
 80047cc:	08021dc4 	.word	0x08021dc4

080047d0 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>:
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4618      	mov	r0, r3
 80047dc:	f00c fec8 	bl	8011570 <_ZN10UtestShellC1Ev>
 80047e0:	4a03      	ldr	r2, [pc, #12]	; (80047f0 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev+0x20>)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4618      	mov	r0, r3
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	08025af8 	.word	0x08025af8

080047f4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv>:
{
 80047f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047f6:	b089      	sub	sp, #36	; 0x24
 80047f8:	af04      	add	r7, sp, #16
 80047fa:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 80047fc:	2300      	movs	r3, #0
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	429a      	cmp	r2, r3
 800480a:	d20b      	bcs.n	8004824 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0x30>
	{
		ringBuffer_push(testBuf,(uint8_t)i);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	4611      	mov	r1, r2
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff fa25 	bl	8003c66 <ringBuffer_push>
	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	3301      	adds	r3, #1
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	e7ed      	b.n	8004800 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xc>
	}
	LONGS_EQUAL(49,testBuf->buffer[testBuf->size - 1]);
 8004824:	f00e fa5c 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 8004828:	4604      	mov	r4, r0
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	3338      	adds	r3, #56	; 0x38
 800482e:	681d      	ldr	r5, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	3b01      	subs	r3, #1
 800483e:	4413      	add	r3, r2
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	461e      	mov	r6, r3
 8004844:	f00e fa5c 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004848:	4603      	mov	r3, r0
 800484a:	9302      	str	r3, [sp, #8]
 800484c:	2363      	movs	r3, #99	; 0x63
 800484e:	9301      	str	r3, [sp, #4]
 8004850:	4b24      	ldr	r3, [pc, #144]	; (80048e4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	4b24      	ldr	r3, [pc, #144]	; (80048e8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf4>)
 8004856:	4632      	mov	r2, r6
 8004858:	2131      	movs	r1, #49	; 0x31
 800485a:	4620      	mov	r0, r4
 800485c:	47a8      	blx	r5

	ringBuffer_flush(testBuf);  // clear the buffer
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	4618      	mov	r0, r3
 8004864:	f7ff fa53 	bl	8003d0e <ringBuffer_flush>

	LONGS_EQUAL(0,testBuf->buffer[testBuf->size - 1]);
 8004868:	f00e fa3a 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 800486c:	4604      	mov	r4, r0
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	3338      	adds	r3, #56	; 0x38
 8004872:	681d      	ldr	r5, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	68da      	ldr	r2, [r3, #12]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	3b01      	subs	r3, #1
 8004882:	4413      	add	r3, r2
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	461e      	mov	r6, r3
 8004888:	f00e fa3a 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800488c:	4603      	mov	r3, r0
 800488e:	9302      	str	r3, [sp, #8]
 8004890:	2367      	movs	r3, #103	; 0x67
 8004892:	9301      	str	r3, [sp, #4]
 8004894:	4b13      	ldr	r3, [pc, #76]	; (80048e4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	4b14      	ldr	r3, [pc, #80]	; (80048ec <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf8>)
 800489a:	4632      	mov	r2, r6
 800489c:	2100      	movs	r1, #0
 800489e:	4620      	mov	r0, r4
 80048a0:	47a8      	blx	r5
	LONGS_EQUAL(0,testBuf->buffer[testBuf->size/2]);    // check random value  (buffer[25]);
 80048a2:	f00e fa1d 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 80048a6:	4604      	mov	r4, r0
 80048a8:	6823      	ldr	r3, [r4, #0]
 80048aa:	3338      	adds	r3, #56	; 0x38
 80048ac:	681d      	ldr	r5, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	68da      	ldr	r2, [r3, #12]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	085b      	lsrs	r3, r3, #1
 80048bc:	4413      	add	r3, r2
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	461e      	mov	r6, r3
 80048c2:	f00e fa1d 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80048c6:	4603      	mov	r3, r0
 80048c8:	9302      	str	r3, [sp, #8]
 80048ca:	2368      	movs	r3, #104	; 0x68
 80048cc:	9301      	str	r3, [sp, #4]
 80048ce:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	4b07      	ldr	r3, [pc, #28]	; (80048f0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xfc>)
 80048d4:	4632      	mov	r2, r6
 80048d6:	2100      	movs	r1, #0
 80048d8:	4620      	mov	r0, r4
 80048da:	47a8      	blx	r5
//	for(uint32_t i = 0;i < testBuf->size;i++)  // check all elements of the buffer
//	{
//		LONGS_EQUAL(0,testBuf->buffer[i]);
//	}

}
 80048dc:	bf00      	nop
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048e4:	08021dc4 	.word	0x08021dc4
 80048e8:	08021f40 	.word	0x08021f40
 80048ec:	08021f7c 	.word	0x08021f7c
 80048f0:	08021fb8 	.word	0x08021fb8

080048f4 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushArrayTest)
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	605a      	str	r2, [r3, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4618      	mov	r0, r3
 800490c:	f7ff fc42 	bl	8004194 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004910:	4a03      	ldr	r2, [pc, #12]	; (8004920 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev+0x2c>)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4618      	mov	r0, r3
 800491a:	3708      	adds	r7, #8
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	08025ad8 	.word	0x08025ad8

08004924 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv>:
 8004924:	b590      	push	{r4, r7, lr}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	2271      	movs	r2, #113	; 0x71
 800492e:	4906      	ldr	r1, [pc, #24]	; (8004948 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv+0x24>)
 8004930:	2008      	movs	r0, #8
 8004932:	f004 fa2f 	bl	8008d94 <_ZnwjPKci>
 8004936:	4604      	mov	r4, r0
 8004938:	4620      	mov	r0, r4
 800493a:	f7ff ffdb 	bl	80048f4 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>
 800493e:	4623      	mov	r3, r4
 8004940:	4618      	mov	r0, r3
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	bd90      	pop	{r4, r7, pc}
 8004948:	08021dc4 	.word	0x08021dc4

0800494c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>:
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4618      	mov	r0, r3
 8004958:	f00c fe0a 	bl	8011570 <_ZN10UtestShellC1Ev>
 800495c:	4a03      	ldr	r2, [pc, #12]	; (800496c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev+0x20>)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	601a      	str	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4618      	mov	r0, r3
 8004966:	3708      	adds	r7, #8
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	08025a2c 	.word	0x08025a2c

08004970 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv>:
{
 8004970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004972:	b087      	sub	sp, #28
 8004974:	af04      	add	r7, sp, #16
 8004976:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Test");
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	490e      	ldr	r1, [pc, #56]	; (80049b8 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 800497e:	4618      	mov	r0, r3
 8004980:	f7ff f9dc 	bl	8003d3c <ringBuffer_pushArray>

	STRCMP_EQUAL("Test",(char*)testBuf->buffer);
 8004984:	f00e f9ac 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 8004988:	4604      	mov	r4, r0
 800498a:	6823      	ldr	r3, [r4, #0]
 800498c:	3324      	adds	r3, #36	; 0x24
 800498e:	681d      	ldr	r5, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	68de      	ldr	r6, [r3, #12]
 8004996:	f00e f9b3 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800499a:	4603      	mov	r3, r0
 800499c:	9302      	str	r3, [sp, #8]
 800499e:	2375      	movs	r3, #117	; 0x75
 80049a0:	9301      	str	r3, [sp, #4]
 80049a2:	4b06      	ldr	r3, [pc, #24]	; (80049bc <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x4c>)
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	2300      	movs	r3, #0
 80049a8:	4632      	mov	r2, r6
 80049aa:	4903      	ldr	r1, [pc, #12]	; (80049b8 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 80049ac:	4620      	mov	r0, r4
 80049ae:	47a8      	blx	r5
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049b8:	08021ff0 	.word	0x08021ff0
 80049bc:	08021dc4 	.word	0x08021dc4

080049c0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, LookForTest)
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	605a      	str	r2, [r3, #4]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7ff fbdc 	bl	8004194 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80049dc:	4a03      	ldr	r2, [pc, #12]	; (80049ec <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev+0x2c>)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4618      	mov	r0, r3
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	08025a0c 	.word	0x08025a0c

080049f0 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv>:
 80049f0:	b590      	push	{r4, r7, lr}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	2278      	movs	r2, #120	; 0x78
 80049fa:	4906      	ldr	r1, [pc, #24]	; (8004a14 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv+0x24>)
 80049fc:	2008      	movs	r0, #8
 80049fe:	f004 f9c9 	bl	8008d94 <_ZnwjPKci>
 8004a02:	4604      	mov	r4, r0
 8004a04:	4620      	mov	r0, r4
 8004a06:	f7ff ffdb 	bl	80049c0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>
 8004a0a:	4623      	mov	r3, r4
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd90      	pop	{r4, r7, pc}
 8004a14:	08021dc4 	.word	0x08021dc4

08004a18 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>:
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f00c fda4 	bl	8011570 <_ZN10UtestShellC1Ev>
 8004a28:	4a03      	ldr	r2, [pc, #12]	; (8004a38 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev+0x20>)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4618      	mov	r0, r3
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	08025960 	.word	0x08025960

08004a3c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv>:
{
 8004a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a40:	b08a      	sub	sp, #40	; 0x28
 8004a42:	af04      	add	r7, sp, #16
 8004a44:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Hello World");
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	494e      	ldr	r1, [pc, #312]	; (8004b84 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7ff f975 	bl	8003d3c <ringBuffer_pushArray>

	STRCMP_EQUAL("Hello World",(char*)testBuf->buffer);
 8004a52:	f00e f945 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 8004a56:	4604      	mov	r4, r0
 8004a58:	6823      	ldr	r3, [r4, #0]
 8004a5a:	3324      	adds	r3, #36	; 0x24
 8004a5c:	681d      	ldr	r5, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	68de      	ldr	r6, [r3, #12]
 8004a64:	f00e f94c 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	9302      	str	r3, [sp, #8]
 8004a6c:	237c      	movs	r3, #124	; 0x7c
 8004a6e:	9301      	str	r3, [sp, #4]
 8004a70:	4b45      	ldr	r3, [pc, #276]	; (8004b88 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	2300      	movs	r3, #0
 8004a76:	4632      	mov	r2, r6
 8004a78:	4942      	ldr	r1, [pc, #264]	; (8004b84 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	47a8      	blx	r5
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	4942      	ldr	r1, [pc, #264]	; (8004b8c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7ff f978 	bl	8003d7a <ringBuffer_lookFor>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	bf14      	ite	ne
 8004a90:	2301      	movne	r3, #1
 8004a92:	2300      	moveq	r3, #0
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d05c      	beq.n	8004b54 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x118>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	493b      	ldr	r1, [pc, #236]	; (8004b8c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7ff f96a 	bl	8003d7a <ringBuffer_lookFor>
 8004aa6:	4604      	mov	r4, r0
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	4937      	ldr	r1, [pc, #220]	; (8004b8c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7ff f963 	bl	8003d7a <ringBuffer_lookFor>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	429c      	cmp	r4, r3
 8004ab8:	bf14      	ite	ne
 8004aba:	2301      	movne	r3, #1
 8004abc:	2300      	moveq	r3, #0
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d008      	beq.n	8004ad6 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x9a>
 8004ac4:	f00e f90c 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 8004ac8:	6803      	ldr	r3, [r0, #0]
 8004aca:	3370      	adds	r3, #112	; 0x70
 8004acc:	681c      	ldr	r4, [r3, #0]
 8004ace:	237d      	movs	r3, #125	; 0x7d
 8004ad0:	4a2d      	ldr	r2, [pc, #180]	; (8004b88 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004ad2:	492f      	ldr	r1, [pc, #188]	; (8004b90 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x154>)
 8004ad4:	47a0      	blx	r4
 8004ad6:	f00e f903 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 8004ada:	4604      	mov	r4, r0
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	3358      	adds	r3, #88	; 0x58
 8004ae0:	681d      	ldr	r5, [r3, #0]
 8004ae2:	f107 0308 	add.w	r3, r7, #8
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f007 fb95 	bl	800c218 <_Z10StringFromi>
 8004aee:	f107 0308 	add.w	r3, r7, #8
 8004af2:	4618      	mov	r0, r3
 8004af4:	f007 f89c 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 8004af8:	4606      	mov	r6, r0
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	4923      	ldr	r1, [pc, #140]	; (8004b8c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7ff f93a 	bl	8003d7a <ringBuffer_lookFor>
 8004b06:	4602      	mov	r2, r0
 8004b08:	f107 0310 	add.w	r3, r7, #16
 8004b0c:	4611      	mov	r1, r2
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f007 fdfc 	bl	800c70c <_Z10StringFromm>
 8004b14:	f107 0310 	add.w	r3, r7, #16
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f007 f889 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 8004b1e:	4680      	mov	r8, r0
 8004b20:	f00e f8ee 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004b24:	4603      	mov	r3, r0
 8004b26:	9303      	str	r3, [sp, #12]
 8004b28:	237d      	movs	r3, #125	; 0x7d
 8004b2a:	9302      	str	r3, [sp, #8]
 8004b2c:	4b16      	ldr	r3, [pc, #88]	; (8004b88 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004b2e:	9301      	str	r3, [sp, #4]
 8004b30:	2300      	movs	r3, #0
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	4643      	mov	r3, r8
 8004b36:	4632      	mov	r2, r6
 8004b38:	2101      	movs	r1, #1
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	47a8      	blx	r5
 8004b3e:	f107 0310 	add.w	r3, r7, #16
 8004b42:	4618      	mov	r0, r3
 8004b44:	f007 f8a1 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8004b48:	f107 0308 	add.w	r3, r7, #8
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f007 f89c 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 8004b52:	e012      	b.n	8004b7a <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x13e>
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004b54:	f00e f8c4 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 8004b58:	4604      	mov	r4, r0
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	3338      	adds	r3, #56	; 0x38
 8004b5e:	681d      	ldr	r5, [r3, #0]
 8004b60:	f00e f8ce 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004b64:	4603      	mov	r3, r0
 8004b66:	9302      	str	r3, [sp, #8]
 8004b68:	237d      	movs	r3, #125	; 0x7d
 8004b6a:	9301      	str	r3, [sp, #4]
 8004b6c:	4b06      	ldr	r3, [pc, #24]	; (8004b88 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	2300      	movs	r3, #0
 8004b72:	2200      	movs	r2, #0
 8004b74:	2100      	movs	r1, #0
 8004b76:	4620      	mov	r0, r4
 8004b78:	47a8      	blx	r5
}
 8004b7a:	bf00      	nop
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b84:	08021ff8 	.word	0x08021ff8
 8004b88:	08021dc4 	.word	0x08021dc4
 8004b8c:	08022004 	.word	0x08022004
 8004b90:	0802200c 	.word	0x0802200c

08004b94 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, CapacityTest)
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	605a      	str	r2, [r3, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff faf2 	bl	8004194 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004bb0:	4a03      	ldr	r2, [pc, #12]	; (8004bc0 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev+0x2c>)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	08025940 	.word	0x08025940

08004bc4 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv>:
 8004bc4:	b590      	push	{r4, r7, lr}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	2280      	movs	r2, #128	; 0x80
 8004bce:	4906      	ldr	r1, [pc, #24]	; (8004be8 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv+0x24>)
 8004bd0:	2008      	movs	r0, #8
 8004bd2:	f004 f8df 	bl	8008d94 <_ZnwjPKci>
 8004bd6:	4604      	mov	r4, r0
 8004bd8:	4620      	mov	r0, r4
 8004bda:	f7ff ffdb 	bl	8004b94 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>
 8004bde:	4623      	mov	r3, r4
 8004be0:	4618      	mov	r0, r3
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd90      	pop	{r4, r7, pc}
 8004be8:	08021dc4 	.word	0x08021dc4

08004bec <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>:
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f00c fcba 	bl	8011570 <_ZN10UtestShellC1Ev>
 8004bfc:	4a03      	ldr	r2, [pc, #12]	; (8004c0c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev+0x20>)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4618      	mov	r0, r3
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	08025894 	.word	0x08025894

08004c10 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv>:
{
 8004c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c12:	b087      	sub	sp, #28
 8004c14:	af04      	add	r7, sp, #16
 8004c16:	6078      	str	r0, [r7, #4]

	LONGS_EQUAL(50,ringBuffer_capacity(testBuf));
 8004c18:	f00e f862 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 8004c1c:	4604      	mov	r4, r0
 8004c1e:	6823      	ldr	r3, [r4, #0]
 8004c20:	3338      	adds	r3, #56	; 0x38
 8004c22:	681d      	ldr	r5, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7ff f8bc 	bl	8003da6 <ringBuffer_capacity>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	461e      	mov	r6, r3
 8004c32:	f00e f865 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004c36:	4603      	mov	r3, r0
 8004c38:	9302      	str	r3, [sp, #8]
 8004c3a:	2383      	movs	r3, #131	; 0x83
 8004c3c:	9301      	str	r3, [sp, #4]
 8004c3e:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x44>)
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	4b05      	ldr	r3, [pc, #20]	; (8004c58 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x48>)
 8004c44:	4632      	mov	r2, r6
 8004c46:	2132      	movs	r1, #50	; 0x32
 8004c48:	4620      	mov	r0, r4
 8004c4a:	47a8      	blx	r5

}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c54:	08021dc4 	.word	0x08021dc4
 8004c58:	080220b0 	.word	0x080220b0

08004c5c <_Z18UART_Transmit_FakePh>:


void UART_Transmit_Fake(uint8_t* data)
{
 8004c5c:	b5b0      	push	{r4, r5, r7, lr}
 8004c5e:	b088      	sub	sp, #32
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
//	mock().actualCall("UART_Transmit_Fake").withParameter("data", data);
	mock().actualCall("UART_Transmit_Fake").withStringParameter("data", (char*)data);
 8004c64:	f107 0308 	add.w	r3, r7, #8
 8004c68:	491d      	ldr	r1, [pc, #116]	; (8004ce0 <_Z18UART_Transmit_FakePh+0x84>)
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f006 fc55 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8004c70:	f107 0308 	add.w	r3, r7, #8
 8004c74:	2100      	movs	r1, #0
 8004c76:	4618      	mov	r0, r3
 8004c78:	f004 fd28 	bl	80096cc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004c7c:	4604      	mov	r4, r0
 8004c7e:	6823      	ldr	r3, [r4, #0]
 8004c80:	3318      	adds	r3, #24
 8004c82:	681d      	ldr	r5, [r3, #0]
 8004c84:	f107 0310 	add.w	r3, r7, #16
 8004c88:	4916      	ldr	r1, [pc, #88]	; (8004ce4 <_Z18UART_Transmit_FakePh+0x88>)
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f006 fc45 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8004c90:	f107 0310 	add.w	r3, r7, #16
 8004c94:	4619      	mov	r1, r3
 8004c96:	4620      	mov	r0, r4
 8004c98:	47a8      	blx	r5
 8004c9a:	4604      	mov	r4, r0
 8004c9c:	6823      	ldr	r3, [r4, #0]
 8004c9e:	333c      	adds	r3, #60	; 0x3c
 8004ca0:	681d      	ldr	r5, [r3, #0]
 8004ca2:	f107 0318 	add.w	r3, r7, #24
 8004ca6:	4910      	ldr	r1, [pc, #64]	; (8004ce8 <_Z18UART_Transmit_FakePh+0x8c>)
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f006 fc36 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8004cae:	f107 0318 	add.w	r3, r7, #24
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	47a8      	blx	r5
 8004cba:	f107 0318 	add.w	r3, r7, #24
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f006 ffe3 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8004cc4:	f107 0310 	add.w	r3, r7, #16
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f006 ffde 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8004cce:	f107 0308 	add.w	r3, r7, #8
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f006 ffd9 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 8004cd8:	bf00      	nop
 8004cda:	3720      	adds	r7, #32
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bdb0      	pop	{r4, r5, r7, pc}
 8004ce0:	080220e8 	.word	0x080220e8
 8004ce4:	080220ec 	.word	0x080220ec
 8004ce8:	08022100 	.word	0x08022100

08004cec <_Z17UART_Receive_Fakev>:
uint8_t UART_Receive_Fake(void)
{
 8004cec:	b5b0      	push	{r4, r5, r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0

	return mock().actualCall("UART_Receive_Fake").returnIntValue();
 8004cf2:	463b      	mov	r3, r7
 8004cf4:	4916      	ldr	r1, [pc, #88]	; (8004d50 <_Z17UART_Receive_Fakev+0x64>)
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f006 fc0f 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8004cfc:	463b      	mov	r3, r7
 8004cfe:	2100      	movs	r1, #0
 8004d00:	4618      	mov	r0, r3
 8004d02:	f004 fce3 	bl	80096cc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004d06:	4604      	mov	r4, r0
 8004d08:	6823      	ldr	r3, [r4, #0]
 8004d0a:	3318      	adds	r3, #24
 8004d0c:	681d      	ldr	r5, [r3, #0]
 8004d0e:	f107 0308 	add.w	r3, r7, #8
 8004d12:	4910      	ldr	r1, [pc, #64]	; (8004d54 <_Z17UART_Receive_Fakev+0x68>)
 8004d14:	4618      	mov	r0, r3
 8004d16:	f006 fc00 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8004d1a:	f107 0308 	add.w	r3, r7, #8
 8004d1e:	4619      	mov	r1, r3
 8004d20:	4620      	mov	r0, r4
 8004d22:	47a8      	blx	r5
 8004d24:	4603      	mov	r3, r0
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	3264      	adds	r2, #100	; 0x64
 8004d2a:	6812      	ldr	r2, [r2, #0]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	4790      	blx	r2
 8004d30:	4603      	mov	r3, r0
 8004d32:	b2dc      	uxtb	r4, r3
 8004d34:	f107 0308 	add.w	r3, r7, #8
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f006 ffa6 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8004d3e:	463b      	mov	r3, r7
 8004d40:	4618      	mov	r0, r3
 8004d42:	f006 ffa2 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8004d46:	4623      	mov	r3, r4
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bdb0      	pop	{r4, r5, r7, pc}
 8004d50:	080220e8 	.word	0x080220e8
 8004d54:	08022108 	.word	0x08022108

08004d58 <_Z12getTick_Fakev>:

uint32_t time=0;

uint32_t getTick_Fake(void)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	af00      	add	r7, sp, #0
	if(time == 0xFFFFFFFF)
 8004d5c:	4b0a      	ldr	r3, [pc, #40]	; (8004d88 <_Z12getTick_Fakev+0x30>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d64:	d103      	bne.n	8004d6e <_Z12getTick_Fakev+0x16>
		time = 0;
 8004d66:	4b08      	ldr	r3, [pc, #32]	; (8004d88 <_Z12getTick_Fakev+0x30>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	e004      	b.n	8004d78 <_Z12getTick_Fakev+0x20>
	else
		time += 1;
 8004d6e:	4b06      	ldr	r3, [pc, #24]	; (8004d88 <_Z12getTick_Fakev+0x30>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	3301      	adds	r3, #1
 8004d74:	4a04      	ldr	r2, [pc, #16]	; (8004d88 <_Z12getTick_Fakev+0x30>)
 8004d76:	6013      	str	r3, [r2, #0]
	return time;
 8004d78:	4b03      	ldr	r3, [pc, #12]	; (8004d88 <_Z12getTick_Fakev+0x30>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	200005bc 	.word	0x200005bc

08004d8c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv>:
TEST_GROUP(EspDriver_Test_Group)
{



	void setup()
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
	{
		ESP_Init(UART_Transmit_Fake,
 8004d94:	2364      	movs	r3, #100	; 0x64
 8004d96:	4a04      	ldr	r2, [pc, #16]	; (8004da8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x1c>)
 8004d98:	4904      	ldr	r1, [pc, #16]	; (8004dac <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x20>)
 8004d9a:	4805      	ldr	r0, [pc, #20]	; (8004db0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x24>)
 8004d9c:	f7fe fdb4 	bl	8003908 <ESP_Init>
				  UART_Receive_Fake,
				  getTick_Fake,
				  100);

	}
 8004da0:	bf00      	nop
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	08004d59 	.word	0x08004d59
 8004dac:	08004ced 	.word	0x08004ced
 8004db0:	08004c5d 	.word	0x08004c5d

08004db4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv>:

	void teardown()
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
	{

		mock().checkExpectations();
 8004dbc:	f107 0308 	add.w	r3, r7, #8
 8004dc0:	4917      	ldr	r1, [pc, #92]	; (8004e20 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f006 fba9 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8004dc8:	f107 0308 	add.w	r3, r7, #8
 8004dcc:	2100      	movs	r1, #0
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f004 fc7c 	bl	80096cc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	3294      	adds	r2, #148	; 0x94
 8004dda:	6812      	ldr	r2, [r2, #0]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	4790      	blx	r2
 8004de0:	f107 0308 	add.w	r3, r7, #8
 8004de4:	4618      	mov	r0, r3
 8004de6:	f006 ff50 	bl	800bc8a <_ZN12SimpleStringD1Ev>
		mock().clear();
 8004dea:	f107 0310 	add.w	r3, r7, #16
 8004dee:	490c      	ldr	r1, [pc, #48]	; (8004e20 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 8004df0:	4618      	mov	r0, r3
 8004df2:	f006 fb92 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8004df6:	f107 0310 	add.w	r3, r7, #16
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f004 fc65 	bl	80096cc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004e02:	4603      	mov	r3, r0
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	329c      	adds	r2, #156	; 0x9c
 8004e08:	6812      	ldr	r2, [r2, #0]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	4790      	blx	r2
 8004e0e:	f107 0310 	add.w	r3, r7, #16
 8004e12:	4618      	mov	r0, r3
 8004e14:	f006 ff39 	bl	800bc8a <_ZN12SimpleStringD1Ev>
	}
 8004e18:	bf00      	nop
 8004e1a:	3718      	adds	r7, #24
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	080220e8 	.word	0x080220e8

08004e24 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>:
TEST_GROUP(EspDriver_Test_Group)
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f00d ff80 	bl	8012d34 <_ZN5UtestC1Ev>
 8004e34:	4a03      	ldr	r2, [pc, #12]	; (8004e44 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev+0x20>)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	08025874 	.word	0x08025874

08004e48 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>:
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	4a05      	ldr	r2, [pc, #20]	; (8004e68 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev+0x20>)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	601a      	str	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f00d ff7b 	bl	8012d54 <_ZN5UtestD1Ev>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4618      	mov	r0, r3
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	08025874 	.word	0x08025874

08004e6c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD0Ev>:
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f7ff ffe7 	bl	8004e48 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8004e7a:	2104      	movs	r1, #4
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f003 ff9d 	bl	8008dbc <_ZdlPvj>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4618      	mov	r0, r3
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>:


};

TEST(EspDriver_Test_Group, Esp_Init_Test)
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7ff ffc4 	bl	8004e24 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8004e9c:	4a03      	ldr	r2, [pc, #12]	; (8004eac <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev+0x20>)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	08025854 	.word	0x08025854

08004eb0 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv>:
 8004eb0:	b590      	push	{r4, r7, lr}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	22b8      	movs	r2, #184	; 0xb8
 8004eba:	4906      	ldr	r1, [pc, #24]	; (8004ed4 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv+0x24>)
 8004ebc:	2004      	movs	r0, #4
 8004ebe:	f003 ff69 	bl	8008d94 <_ZnwjPKci>
 8004ec2:	4604      	mov	r4, r0
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	f7ff ffe1 	bl	8004e8c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>
 8004eca:	4623      	mov	r3, r4
 8004ecc:	4618      	mov	r0, r3
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd90      	pop	{r4, r7, pc}
 8004ed4:	08021dc4 	.word	0x08021dc4

08004ed8 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>:
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f00c fb44 	bl	8011570 <_ZN10UtestShellC1Ev>
 8004ee8:	4a03      	ldr	r2, [pc, #12]	; (8004ef8 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev+0x20>)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	080257a8 	.word	0x080257a8

08004efc <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv>:
{
 8004efc:	b5b0      	push	{r4, r5, r7, lr}
 8004efe:	b088      	sub	sp, #32
 8004f00:	af04      	add	r7, sp, #16
 8004f02:	6078      	str	r0, [r7, #4]

	transmit = UART_Transmit_Fake; // or you can pass UART_Transmit_Fake as a parameter to the function instead of transmit.
 8004f04:	4b10      	ldr	r3, [pc, #64]	; (8004f48 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 8004f06:	4a11      	ldr	r2, [pc, #68]	; (8004f4c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x50>)
 8004f08:	601a      	str	r2, [r3, #0]
	int result = ESP_Init(transmit,
 8004f0a:	4b0f      	ldr	r3, [pc, #60]	; (8004f48 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 8004f0c:	6818      	ldr	r0, [r3, #0]
 8004f0e:	2364      	movs	r3, #100	; 0x64
 8004f10:	4a0f      	ldr	r2, [pc, #60]	; (8004f50 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x54>)
 8004f12:	4910      	ldr	r1, [pc, #64]	; (8004f54 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x58>)
 8004f14:	f7fe fcf8 	bl	8003908 <ESP_Init>
 8004f18:	60f8      	str	r0, [r7, #12]
//	int result = ESP_Init(UART_Transmit_Fake,
//						  UART_Receive_Fake,
//						  getTick_Fake,
//	  	  	  	  	  	  100);

	LONGS_EQUAL(1,result);
 8004f1a:	f00d fee1 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 8004f1e:	4604      	mov	r4, r0
 8004f20:	6823      	ldr	r3, [r4, #0]
 8004f22:	3338      	adds	r3, #56	; 0x38
 8004f24:	681d      	ldr	r5, [r3, #0]
 8004f26:	f00d feeb 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	9302      	str	r3, [sp, #8]
 8004f2e:	23c6      	movs	r3, #198	; 0xc6
 8004f30:	9301      	str	r3, [sp, #4]
 8004f32:	4b09      	ldr	r3, [pc, #36]	; (8004f58 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x5c>)
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	4b09      	ldr	r3, [pc, #36]	; (8004f5c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x60>)
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	2101      	movs	r1, #1
 8004f3c:	4620      	mov	r0, r4
 8004f3e:	47a8      	blx	r5

}
 8004f40:	bf00      	nop
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bdb0      	pop	{r4, r5, r7, pc}
 8004f48:	200005c0 	.word	0x200005c0
 8004f4c:	08004c5d 	.word	0x08004c5d
 8004f50:	08004d59 	.word	0x08004d59
 8004f54:	08004ced 	.word	0x08004ced
 8004f58:	08021dc4 	.word	0x08021dc4
 8004f5c:	0802211c 	.word	0x0802211c

08004f60 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7ff ff5a 	bl	8004e24 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8004f70:	4a03      	ldr	r2, [pc, #12]	; (8004f80 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev+0x20>)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3708      	adds	r7, #8
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	08025788 	.word	0x08025788

08004f84 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv>:
 8004f84:	b590      	push	{r4, r7, lr}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	22ca      	movs	r2, #202	; 0xca
 8004f8e:	4906      	ldr	r1, [pc, #24]	; (8004fa8 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv+0x24>)
 8004f90:	2004      	movs	r0, #4
 8004f92:	f003 feff 	bl	8008d94 <_ZnwjPKci>
 8004f96:	4604      	mov	r4, r0
 8004f98:	4620      	mov	r0, r4
 8004f9a:	f7ff ffe1 	bl	8004f60 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>
 8004f9e:	4623      	mov	r3, r4
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd90      	pop	{r4, r7, pc}
 8004fa8:	08021dc4 	.word	0x08021dc4

08004fac <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>:
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f00c fada 	bl	8011570 <_ZN10UtestShellC1Ev>
 8004fbc:	4a03      	ldr	r2, [pc, #12]	; (8004fcc <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev+0x20>)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3708      	adds	r7, #8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	080256dc 	.word	0x080256dc

08004fd0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv>:
{
 8004fd0:	b5b0      	push	{r4, r5, r7, lr}
 8004fd2:	b08e      	sub	sp, #56	; 0x38
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "Test");
 8004fd8:	f107 0308 	add.w	r3, r7, #8
 8004fdc:	493d      	ldr	r1, [pc, #244]	; (80050d4 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x104>)
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f006 fa9b 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8004fe4:	f107 0308 	add.w	r3, r7, #8
 8004fe8:	2100      	movs	r1, #0
 8004fea:	4618      	mov	r0, r3
 8004fec:	f004 fb6e 	bl	80096cc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004ff0:	4604      	mov	r4, r0
 8004ff2:	6823      	ldr	r3, [r4, #0]
 8004ff4:	330c      	adds	r3, #12
 8004ff6:	681d      	ldr	r5, [r3, #0]
 8004ff8:	f107 0310 	add.w	r3, r7, #16
 8004ffc:	4936      	ldr	r1, [pc, #216]	; (80050d8 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x108>)
 8004ffe:	4618      	mov	r0, r3
 8005000:	f006 fa8b 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8005004:	f107 0310 	add.w	r3, r7, #16
 8005008:	4619      	mov	r1, r3
 800500a:	4620      	mov	r0, r4
 800500c:	47a8      	blx	r5
 800500e:	4604      	mov	r4, r0
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	334c      	adds	r3, #76	; 0x4c
 8005014:	681d      	ldr	r5, [r3, #0]
 8005016:	f107 0318 	add.w	r3, r7, #24
 800501a:	4930      	ldr	r1, [pc, #192]	; (80050dc <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x10c>)
 800501c:	4618      	mov	r0, r3
 800501e:	f006 fa7c 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8005022:	f107 0318 	add.w	r3, r7, #24
 8005026:	4a2e      	ldr	r2, [pc, #184]	; (80050e0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x110>)
 8005028:	4619      	mov	r1, r3
 800502a:	4620      	mov	r0, r4
 800502c:	47a8      	blx	r5
 800502e:	f107 0318 	add.w	r3, r7, #24
 8005032:	4618      	mov	r0, r3
 8005034:	f006 fe29 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8005038:	f107 0310 	add.w	r3, r7, #16
 800503c:	4618      	mov	r0, r3
 800503e:	f006 fe24 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8005042:	f107 0308 	add.w	r3, r7, #8
 8005046:	4618      	mov	r0, r3
 8005048:	f006 fe1f 	bl	800bc8a <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "AT\r\n");
 800504c:	f107 0320 	add.w	r3, r7, #32
 8005050:	4920      	ldr	r1, [pc, #128]	; (80050d4 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x104>)
 8005052:	4618      	mov	r0, r3
 8005054:	f006 fa61 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8005058:	f107 0320 	add.w	r3, r7, #32
 800505c:	2100      	movs	r1, #0
 800505e:	4618      	mov	r0, r3
 8005060:	f004 fb34 	bl	80096cc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005064:	4604      	mov	r4, r0
 8005066:	6823      	ldr	r3, [r4, #0]
 8005068:	330c      	adds	r3, #12
 800506a:	681d      	ldr	r5, [r3, #0]
 800506c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005070:	4919      	ldr	r1, [pc, #100]	; (80050d8 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x108>)
 8005072:	4618      	mov	r0, r3
 8005074:	f006 fa51 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8005078:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800507c:	4619      	mov	r1, r3
 800507e:	4620      	mov	r0, r4
 8005080:	47a8      	blx	r5
 8005082:	4604      	mov	r4, r0
 8005084:	6823      	ldr	r3, [r4, #0]
 8005086:	334c      	adds	r3, #76	; 0x4c
 8005088:	681d      	ldr	r5, [r3, #0]
 800508a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800508e:	4913      	ldr	r1, [pc, #76]	; (80050dc <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x10c>)
 8005090:	4618      	mov	r0, r3
 8005092:	f006 fa42 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8005096:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800509a:	4a12      	ldr	r2, [pc, #72]	; (80050e4 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x114>)
 800509c:	4619      	mov	r1, r3
 800509e:	4620      	mov	r0, r4
 80050a0:	47a8      	blx	r5
 80050a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80050a6:	4618      	mov	r0, r3
 80050a8:	f006 fdef 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 80050ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050b0:	4618      	mov	r0, r3
 80050b2:	f006 fdea 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 80050b6:	f107 0320 	add.w	r3, r7, #32
 80050ba:	4618      	mov	r0, r3
 80050bc:	f006 fde5 	bl	800bc8a <_ZN12SimpleStringD1Ev>

	Send_AT_Command((char*)"Test");
 80050c0:	4807      	ldr	r0, [pc, #28]	; (80050e0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x110>)
 80050c2:	f7fe fc4d 	bl	8003960 <Send_AT_Command>
	Send_AT_Command((char*)"AT\r\n");
 80050c6:	4807      	ldr	r0, [pc, #28]	; (80050e4 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x114>)
 80050c8:	f7fe fc4a 	bl	8003960 <Send_AT_Command>



}
 80050cc:	bf00      	nop
 80050ce:	3738      	adds	r7, #56	; 0x38
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bdb0      	pop	{r4, r5, r7, pc}
 80050d4:	080220e8 	.word	0x080220e8
 80050d8:	080220ec 	.word	0x080220ec
 80050dc:	08022100 	.word	0x08022100
 80050e0:	08021ff0 	.word	0x08021ff0
 80050e4:	0802213c 	.word	0x0802213c

080050e8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7ff fe96 	bl	8004e24 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80050f8:	4a03      	ldr	r2, [pc, #12]	; (8005108 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev+0x20>)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4618      	mov	r0, r3
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	080256bc 	.word	0x080256bc

0800510c <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv>:
 800510c:	b590      	push	{r4, r7, lr}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	22d6      	movs	r2, #214	; 0xd6
 8005116:	4906      	ldr	r1, [pc, #24]	; (8005130 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv+0x24>)
 8005118:	2004      	movs	r0, #4
 800511a:	f003 fe3b 	bl	8008d94 <_ZnwjPKci>
 800511e:	4604      	mov	r4, r0
 8005120:	4620      	mov	r0, r4
 8005122:	f7ff ffe1 	bl	80050e8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>
 8005126:	4623      	mov	r3, r4
 8005128:	4618      	mov	r0, r3
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	bd90      	pop	{r4, r7, pc}
 8005130:	08021dc4 	.word	0x08021dc4

08005134 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>:
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4618      	mov	r0, r3
 8005140:	f00c fa16 	bl	8011570 <_ZN10UtestShellC1Ev>
 8005144:	4a03      	ldr	r2, [pc, #12]	; (8005154 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev+0x20>)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	601a      	str	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4618      	mov	r0, r3
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	08025610 	.word	0x08025610

08005158 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv>:
{
 8005158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800515a:	b097      	sub	sp, #92	; 0x5c
 800515c:	af04      	add	r7, sp, #16
 800515e:	6078      	str	r0, [r7, #4]

	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'O');
 8005160:	f107 0308 	add.w	r3, r7, #8
 8005164:	4967      	ldr	r1, [pc, #412]	; (8005304 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ac>)
 8005166:	4618      	mov	r0, r3
 8005168:	f006 f9d7 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800516c:	f107 0308 	add.w	r3, r7, #8
 8005170:	2100      	movs	r1, #0
 8005172:	4618      	mov	r0, r3
 8005174:	f004 faaa 	bl	80096cc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005178:	4604      	mov	r4, r0
 800517a:	6823      	ldr	r3, [r4, #0]
 800517c:	330c      	adds	r3, #12
 800517e:	681d      	ldr	r5, [r3, #0]
 8005180:	f107 0310 	add.w	r3, r7, #16
 8005184:	4960      	ldr	r1, [pc, #384]	; (8005308 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b0>)
 8005186:	4618      	mov	r0, r3
 8005188:	f006 f9c7 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800518c:	f107 0310 	add.w	r3, r7, #16
 8005190:	4619      	mov	r1, r3
 8005192:	4620      	mov	r0, r4
 8005194:	47a8      	blx	r5
 8005196:	4603      	mov	r3, r0
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	3264      	adds	r2, #100	; 0x64
 800519c:	6812      	ldr	r2, [r2, #0]
 800519e:	214f      	movs	r1, #79	; 0x4f
 80051a0:	4618      	mov	r0, r3
 80051a2:	4790      	blx	r2
 80051a4:	f107 0310 	add.w	r3, r7, #16
 80051a8:	4618      	mov	r0, r3
 80051aa:	f006 fd6e 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 80051ae:	f107 0308 	add.w	r3, r7, #8
 80051b2:	4618      	mov	r0, r3
 80051b4:	f006 fd69 	bl	800bc8a <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 80051b8:	f7fe fbe0 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'K');
 80051bc:	f107 0318 	add.w	r3, r7, #24
 80051c0:	4950      	ldr	r1, [pc, #320]	; (8005304 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ac>)
 80051c2:	4618      	mov	r0, r3
 80051c4:	f006 f9a9 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80051c8:	f107 0318 	add.w	r3, r7, #24
 80051cc:	2100      	movs	r1, #0
 80051ce:	4618      	mov	r0, r3
 80051d0:	f004 fa7c 	bl	80096cc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80051d4:	4604      	mov	r4, r0
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	330c      	adds	r3, #12
 80051da:	681d      	ldr	r5, [r3, #0]
 80051dc:	f107 0320 	add.w	r3, r7, #32
 80051e0:	4949      	ldr	r1, [pc, #292]	; (8005308 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b0>)
 80051e2:	4618      	mov	r0, r3
 80051e4:	f006 f999 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80051e8:	f107 0320 	add.w	r3, r7, #32
 80051ec:	4619      	mov	r1, r3
 80051ee:	4620      	mov	r0, r4
 80051f0:	47a8      	blx	r5
 80051f2:	4603      	mov	r3, r0
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	3264      	adds	r2, #100	; 0x64
 80051f8:	6812      	ldr	r2, [r2, #0]
 80051fa:	214b      	movs	r1, #75	; 0x4b
 80051fc:	4618      	mov	r0, r3
 80051fe:	4790      	blx	r2
 8005200:	f107 0320 	add.w	r3, r7, #32
 8005204:	4618      	mov	r0, r3
 8005206:	f006 fd40 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800520a:	f107 0318 	add.w	r3, r7, #24
 800520e:	4618      	mov	r0, r3
 8005210:	f006 fd3b 	bl	800bc8a <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 8005214:	f7fe fbb2 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'\r');
 8005218:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800521c:	4939      	ldr	r1, [pc, #228]	; (8005304 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ac>)
 800521e:	4618      	mov	r0, r3
 8005220:	f006 f97b 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8005224:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005228:	2100      	movs	r1, #0
 800522a:	4618      	mov	r0, r3
 800522c:	f004 fa4e 	bl	80096cc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005230:	4604      	mov	r4, r0
 8005232:	6823      	ldr	r3, [r4, #0]
 8005234:	330c      	adds	r3, #12
 8005236:	681d      	ldr	r5, [r3, #0]
 8005238:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800523c:	4932      	ldr	r1, [pc, #200]	; (8005308 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b0>)
 800523e:	4618      	mov	r0, r3
 8005240:	f006 f96b 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8005244:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005248:	4619      	mov	r1, r3
 800524a:	4620      	mov	r0, r4
 800524c:	47a8      	blx	r5
 800524e:	4603      	mov	r3, r0
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	3264      	adds	r2, #100	; 0x64
 8005254:	6812      	ldr	r2, [r2, #0]
 8005256:	210d      	movs	r1, #13
 8005258:	4618      	mov	r0, r3
 800525a:	4790      	blx	r2
 800525c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005260:	4618      	mov	r0, r3
 8005262:	f006 fd12 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8005266:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800526a:	4618      	mov	r0, r3
 800526c:	f006 fd0d 	bl	800bc8a <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 8005270:	f7fe fb84 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'\n');
 8005274:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005278:	4922      	ldr	r1, [pc, #136]	; (8005304 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ac>)
 800527a:	4618      	mov	r0, r3
 800527c:	f006 f94d 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8005280:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005284:	2100      	movs	r1, #0
 8005286:	4618      	mov	r0, r3
 8005288:	f004 fa20 	bl	80096cc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800528c:	4604      	mov	r4, r0
 800528e:	6823      	ldr	r3, [r4, #0]
 8005290:	330c      	adds	r3, #12
 8005292:	681d      	ldr	r5, [r3, #0]
 8005294:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005298:	491b      	ldr	r1, [pc, #108]	; (8005308 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b0>)
 800529a:	4618      	mov	r0, r3
 800529c:	f006 f93d 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80052a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80052a4:	4619      	mov	r1, r3
 80052a6:	4620      	mov	r0, r4
 80052a8:	47a8      	blx	r5
 80052aa:	4603      	mov	r3, r0
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	3264      	adds	r2, #100	; 0x64
 80052b0:	6812      	ldr	r2, [r2, #0]
 80052b2:	210a      	movs	r1, #10
 80052b4:	4618      	mov	r0, r3
 80052b6:	4790      	blx	r2
 80052b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80052bc:	4618      	mov	r0, r3
 80052be:	f006 fce4 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 80052c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80052c6:	4618      	mov	r0, r3
 80052c8:	f006 fcdf 	bl	800bc8a <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 80052cc:	f7fe fb56 	bl	800397c <ESP_UART_ReceiveHandler>

	STRCMP_EQUAL("OK\r\n",(char*)rx_buffer->buffer);	// check the rx ring buffer.
 80052d0:	f00d fd06 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 80052d4:	4604      	mov	r4, r0
 80052d6:	6823      	ldr	r3, [r4, #0]
 80052d8:	3324      	adds	r3, #36	; 0x24
 80052da:	681d      	ldr	r5, [r3, #0]
 80052dc:	4b0b      	ldr	r3, [pc, #44]	; (800530c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b4>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68de      	ldr	r6, [r3, #12]
 80052e2:	f00d fd0d 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80052e6:	4603      	mov	r3, r0
 80052e8:	9302      	str	r3, [sp, #8]
 80052ea:	23e2      	movs	r3, #226	; 0xe2
 80052ec:	9301      	str	r3, [sp, #4]
 80052ee:	4b08      	ldr	r3, [pc, #32]	; (8005310 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b8>)
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	2300      	movs	r3, #0
 80052f4:	4632      	mov	r2, r6
 80052f6:	4907      	ldr	r1, [pc, #28]	; (8005314 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1bc>)
 80052f8:	4620      	mov	r0, r4
 80052fa:	47a8      	blx	r5

}
 80052fc:	bf00      	nop
 80052fe:	374c      	adds	r7, #76	; 0x4c
 8005300:	46bd      	mov	sp, r7
 8005302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005304:	080220e8 	.word	0x080220e8
 8005308:	08022108 	.word	0x08022108
 800530c:	20000498 	.word	0x20000498
 8005310:	08021dc4 	.word	0x08021dc4
 8005314:	08022144 	.word	0x08022144

08005318 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_Response_Test)
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4618      	mov	r0, r3
 8005324:	f7ff fd7e 	bl	8004e24 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005328:	4a03      	ldr	r2, [pc, #12]	; (8005338 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev+0x20>)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4618      	mov	r0, r3
 8005332:	3708      	adds	r7, #8
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	080255f0 	.word	0x080255f0

0800533c <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv>:
 800533c:	b590      	push	{r4, r7, lr}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	22e6      	movs	r2, #230	; 0xe6
 8005346:	4906      	ldr	r1, [pc, #24]	; (8005360 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv+0x24>)
 8005348:	2004      	movs	r0, #4
 800534a:	f003 fd23 	bl	8008d94 <_ZnwjPKci>
 800534e:	4604      	mov	r4, r0
 8005350:	4620      	mov	r0, r4
 8005352:	f7ff ffe1 	bl	8005318 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>
 8005356:	4623      	mov	r3, r4
 8005358:	4618      	mov	r0, r3
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	bd90      	pop	{r4, r7, pc}
 8005360:	08021dc4 	.word	0x08021dc4

08005364 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>:
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4618      	mov	r0, r3
 8005370:	f00c f8fe 	bl	8011570 <_ZN10UtestShellC1Ev>
 8005374:	4a03      	ldr	r2, [pc, #12]	; (8005384 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev+0x20>)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4618      	mov	r0, r3
 800537e:	3708      	adds	r7, #8
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	08025544 	.word	0x08025544

08005388 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv>:
{
 8005388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800538a:	b091      	sub	sp, #68	; 0x44
 800538c:	af04      	add	r7, sp, #16
 800538e:	6078      	str	r0, [r7, #4]
	char response[10] = "OK\r\n";
 8005390:	4a35      	ldr	r2, [pc, #212]	; (8005468 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe0>)
 8005392:	f107 030c 	add.w	r3, r7, #12
 8005396:	e892 0003 	ldmia.w	r2, {r0, r1}
 800539a:	6018      	str	r0, [r3, #0]
 800539c:	3304      	adds	r3, #4
 800539e:	7019      	strb	r1, [r3, #0]
 80053a0:	f107 0311 	add.w	r3, r7, #17
 80053a4:	2200      	movs	r2, #0
 80053a6:	601a      	str	r2, [r3, #0]
 80053a8:	711a      	strb	r2, [r3, #4]

	for(int i=0;i<(int)strlen(response);i++)
 80053aa:	2300      	movs	r3, #0
 80053ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053ae:	f107 030c 	add.w	r3, r7, #12
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7fa ff42 	bl	800023c <strlen>
 80053b8:	4603      	mov	r3, r0
 80053ba:	461a      	mov	r2, r3
 80053bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053be:	4293      	cmp	r3, r2
 80053c0:	da35      	bge.n	800542e <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xa6>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 80053c2:	f107 0318 	add.w	r3, r7, #24
 80053c6:	4929      	ldr	r1, [pc, #164]	; (800546c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe4>)
 80053c8:	4618      	mov	r0, r3
 80053ca:	f006 f8a6 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80053ce:	f107 0318 	add.w	r3, r7, #24
 80053d2:	2100      	movs	r1, #0
 80053d4:	4618      	mov	r0, r3
 80053d6:	f004 f979 	bl	80096cc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80053da:	4604      	mov	r4, r0
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	330c      	adds	r3, #12
 80053e0:	681d      	ldr	r5, [r3, #0]
 80053e2:	f107 0320 	add.w	r3, r7, #32
 80053e6:	4922      	ldr	r1, [pc, #136]	; (8005470 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe8>)
 80053e8:	4618      	mov	r0, r3
 80053ea:	f006 f896 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80053ee:	f107 0320 	add.w	r3, r7, #32
 80053f2:	4619      	mov	r1, r3
 80053f4:	4620      	mov	r0, r4
 80053f6:	47a8      	blx	r5
 80053f8:	4603      	mov	r3, r0
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	3264      	adds	r2, #100	; 0x64
 80053fe:	6812      	ldr	r2, [r2, #0]
 8005400:	f107 000c 	add.w	r0, r7, #12
 8005404:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005406:	4401      	add	r1, r0
 8005408:	7809      	ldrb	r1, [r1, #0]
 800540a:	4618      	mov	r0, r3
 800540c:	4790      	blx	r2
 800540e:	f107 0320 	add.w	r3, r7, #32
 8005412:	4618      	mov	r0, r3
 8005414:	f006 fc39 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8005418:	f107 0318 	add.w	r3, r7, #24
 800541c:	4618      	mov	r0, r3
 800541e:	f006 fc34 	bl	800bc8a <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 8005422:	f7fe faab 	bl	800397c <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 8005426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005428:	3301      	adds	r3, #1
 800542a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800542c:	e7bf      	b.n	80053ae <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x26>
	}

	uint32_t result = Read_Response((char*)"OK");
 800542e:	4811      	ldr	r0, [pc, #68]	; (8005474 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xec>)
 8005430:	f7fe fabe 	bl	80039b0 <Read_Response>
 8005434:	62b8      	str	r0, [r7, #40]	; 0x28

	LONGS_EQUAL(1,result);
 8005436:	f00d fc53 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 800543a:	4604      	mov	r4, r0
 800543c:	6823      	ldr	r3, [r4, #0]
 800543e:	3338      	adds	r3, #56	; 0x38
 8005440:	681d      	ldr	r5, [r3, #0]
 8005442:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8005444:	f00d fc5c 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005448:	4603      	mov	r3, r0
 800544a:	9302      	str	r3, [sp, #8]
 800544c:	23f2      	movs	r3, #242	; 0xf2
 800544e:	9301      	str	r3, [sp, #4]
 8005450:	4b09      	ldr	r3, [pc, #36]	; (8005478 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xf0>)
 8005452:	9300      	str	r3, [sp, #0]
 8005454:	4b09      	ldr	r3, [pc, #36]	; (800547c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xf4>)
 8005456:	4632      	mov	r2, r6
 8005458:	2101      	movs	r1, #1
 800545a:	4620      	mov	r0, r4
 800545c:	47a8      	blx	r5

}
 800545e:	bf00      	nop
 8005460:	3734      	adds	r7, #52	; 0x34
 8005462:	46bd      	mov	sp, r7
 8005464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005466:	bf00      	nop
 8005468:	08022150 	.word	0x08022150
 800546c:	080220e8 	.word	0x080220e8
 8005470:	08022108 	.word	0x08022108
 8005474:	0802214c 	.word	0x0802214c
 8005478:	08021dc4 	.word	0x08021dc4
 800547c:	0802211c 	.word	0x0802211c

08005480 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>:


TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4618      	mov	r0, r3
 800548c:	f7ff fcca 	bl	8004e24 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005490:	4a03      	ldr	r2, [pc, #12]	; (80054a0 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev+0x20>)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4618      	mov	r0, r3
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	08025524 	.word	0x08025524

080054a4 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv>:
 80054a4:	b590      	push	{r4, r7, lr}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	22f7      	movs	r2, #247	; 0xf7
 80054ae:	4906      	ldr	r1, [pc, #24]	; (80054c8 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv+0x24>)
 80054b0:	2004      	movs	r0, #4
 80054b2:	f003 fc6f 	bl	8008d94 <_ZnwjPKci>
 80054b6:	4604      	mov	r4, r0
 80054b8:	4620      	mov	r0, r4
 80054ba:	f7ff ffe1 	bl	8005480 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>
 80054be:	4623      	mov	r3, r4
 80054c0:	4618      	mov	r0, r3
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd90      	pop	{r4, r7, pc}
 80054c8:	08021dc4 	.word	0x08021dc4

080054cc <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>:
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f00c f84a 	bl	8011570 <_ZN10UtestShellC1Ev>
 80054dc:	4a03      	ldr	r2, [pc, #12]	; (80054ec <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev+0x20>)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	601a      	str	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4618      	mov	r0, r3
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	08025478 	.word	0x08025478

080054f0 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv>:
{
 80054f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054f2:	b089      	sub	sp, #36	; 0x24
 80054f4:	af04      	add	r7, sp, #16
 80054f6:	6078      	str	r0, [r7, #4]
	Status response_state = IDLE;
 80054f8:	2305      	movs	r3, #5
 80054fa:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		response_state = Wait_Response((char*)"OK", 1000);
 80054fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005500:	4811      	ldr	r0, [pc, #68]	; (8005548 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x58>)
 8005502:	f7fe fa67 	bl	80039d4 <Wait_Response>
 8005506:	4603      	mov	r3, r0
 8005508:	73fb      	strb	r3, [r7, #15]
		if(response_state != IDLE)
 800550a:	7bfb      	ldrb	r3, [r7, #15]
 800550c:	2b05      	cmp	r3, #5
 800550e:	d100      	bne.n	8005512 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x22>
		response_state = Wait_Response((char*)"OK", 1000);
 8005510:	e7f4      	b.n	80054fc <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0xc>
			break;
 8005512:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 8005514:	f00d fbe4 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 8005518:	4604      	mov	r4, r0
 800551a:	6823      	ldr	r3, [r4, #0]
 800551c:	3338      	adds	r3, #56	; 0x38
 800551e:	681d      	ldr	r5, [r3, #0]
 8005520:	7bfe      	ldrb	r6, [r7, #15]
 8005522:	f00d fbed 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005526:	4603      	mov	r3, r0
 8005528:	9302      	str	r3, [sp, #8]
 800552a:	f240 1303 	movw	r3, #259	; 0x103
 800552e:	9301      	str	r3, [sp, #4]
 8005530:	4b06      	ldr	r3, [pc, #24]	; (800554c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x5c>)
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	4b06      	ldr	r3, [pc, #24]	; (8005550 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x60>)
 8005536:	4632      	mov	r2, r6
 8005538:	2102      	movs	r1, #2
 800553a:	4620      	mov	r0, r4
 800553c:	47a8      	blx	r5

}
 800553e:	bf00      	nop
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005546:	bf00      	nop
 8005548:	0802214c 	.word	0x0802214c
 800554c:	08021dc4 	.word	0x08021dc4
 8005550:	0802215c 	.word	0x0802215c

08005554 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_Response_Test)
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4618      	mov	r0, r3
 8005560:	f7ff fc60 	bl	8004e24 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005564:	4a03      	ldr	r2, [pc, #12]	; (8005574 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev+0x20>)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4618      	mov	r0, r3
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	08025458 	.word	0x08025458

08005578 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv>:
 8005578:	b590      	push	{r4, r7, lr}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	f240 1207 	movw	r2, #263	; 0x107
 8005584:	4906      	ldr	r1, [pc, #24]	; (80055a0 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv+0x28>)
 8005586:	2004      	movs	r0, #4
 8005588:	f003 fc04 	bl	8008d94 <_ZnwjPKci>
 800558c:	4604      	mov	r4, r0
 800558e:	4620      	mov	r0, r4
 8005590:	f7ff ffe0 	bl	8005554 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>
 8005594:	4623      	mov	r3, r4
 8005596:	4618      	mov	r0, r3
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	bd90      	pop	{r4, r7, pc}
 800559e:	bf00      	nop
 80055a0:	08021dc4 	.word	0x08021dc4

080055a4 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>:
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f00b ffde 	bl	8011570 <_ZN10UtestShellC1Ev>
 80055b4:	4a03      	ldr	r2, [pc, #12]	; (80055c4 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev+0x20>)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	601a      	str	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4618      	mov	r0, r3
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	080253ac 	.word	0x080253ac

080055c8 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv>:
{
 80055c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055ca:	b091      	sub	sp, #68	; 0x44
 80055cc:	af04      	add	r7, sp, #16
 80055ce:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 80055d0:	2305      	movs	r3, #5
 80055d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	char response[10] = "OK\r\n";
 80055d6:	4a3b      	ldr	r2, [pc, #236]	; (80056c4 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xfc>)
 80055d8:	f107 030c 	add.w	r3, r7, #12
 80055dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80055e0:	6018      	str	r0, [r3, #0]
 80055e2:	3304      	adds	r3, #4
 80055e4:	7019      	strb	r1, [r3, #0]
 80055e6:	f107 0311 	add.w	r3, r7, #17
 80055ea:	2200      	movs	r2, #0
 80055ec:	601a      	str	r2, [r3, #0]
 80055ee:	711a      	strb	r2, [r3, #4]

	while(1)
	{
		response_state = Wait_Response((char*)"OK",1000);
 80055f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80055f4:	4834      	ldr	r0, [pc, #208]	; (80056c8 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x100>)
 80055f6:	f7fe f9ed 	bl	80039d4 <Wait_Response>
 80055fa:	4603      	mov	r3, r0
 80055fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		if(response_state != IDLE)
 8005600:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005604:	2b05      	cmp	r3, #5
 8005606:	d141      	bne.n	800568c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xc4>
			break;
		for(int i=0;i<(int)strlen(response);i++)
 8005608:	2300      	movs	r3, #0
 800560a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800560c:	f107 030c 	add.w	r3, r7, #12
 8005610:	4618      	mov	r0, r3
 8005612:	f7fa fe13 	bl	800023c <strlen>
 8005616:	4603      	mov	r3, r0
 8005618:	461a      	mov	r2, r3
 800561a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561c:	4293      	cmp	r3, r2
 800561e:	dae7      	bge.n	80055f0 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x28>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8005620:	f107 0318 	add.w	r3, r7, #24
 8005624:	4929      	ldr	r1, [pc, #164]	; (80056cc <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x104>)
 8005626:	4618      	mov	r0, r3
 8005628:	f005 ff77 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800562c:	f107 0318 	add.w	r3, r7, #24
 8005630:	2100      	movs	r1, #0
 8005632:	4618      	mov	r0, r3
 8005634:	f004 f84a 	bl	80096cc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005638:	4604      	mov	r4, r0
 800563a:	6823      	ldr	r3, [r4, #0]
 800563c:	330c      	adds	r3, #12
 800563e:	681d      	ldr	r5, [r3, #0]
 8005640:	f107 0320 	add.w	r3, r7, #32
 8005644:	4922      	ldr	r1, [pc, #136]	; (80056d0 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x108>)
 8005646:	4618      	mov	r0, r3
 8005648:	f005 ff67 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800564c:	f107 0320 	add.w	r3, r7, #32
 8005650:	4619      	mov	r1, r3
 8005652:	4620      	mov	r0, r4
 8005654:	47a8      	blx	r5
 8005656:	4603      	mov	r3, r0
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	3264      	adds	r2, #100	; 0x64
 800565c:	6812      	ldr	r2, [r2, #0]
 800565e:	f107 000c 	add.w	r0, r7, #12
 8005662:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005664:	4401      	add	r1, r0
 8005666:	7809      	ldrb	r1, [r1, #0]
 8005668:	4618      	mov	r0, r3
 800566a:	4790      	blx	r2
 800566c:	f107 0320 	add.w	r3, r7, #32
 8005670:	4618      	mov	r0, r3
 8005672:	f006 fb0a 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8005676:	f107 0318 	add.w	r3, r7, #24
 800567a:	4618      	mov	r0, r3
 800567c:	f006 fb05 	bl	800bc8a <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8005680:	f7fe f97c 	bl	800397c <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 8005684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005686:	3301      	adds	r3, #1
 8005688:	62fb      	str	r3, [r7, #44]	; 0x2c
 800568a:	e7bf      	b.n	800560c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x44>
			break;
 800568c:	bf00      	nop
		}
	}

	LONGS_EQUAL(FOUND,response_state);
 800568e:	f00d fb27 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 8005692:	4604      	mov	r4, r0
 8005694:	6823      	ldr	r3, [r4, #0]
 8005696:	3338      	adds	r3, #56	; 0x38
 8005698:	681d      	ldr	r5, [r3, #0]
 800569a:	f897 602b 	ldrb.w	r6, [r7, #43]	; 0x2b
 800569e:	f00d fb2f 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80056a2:	4603      	mov	r3, r0
 80056a4:	9302      	str	r3, [sp, #8]
 80056a6:	f44f 738d 	mov.w	r3, #282	; 0x11a
 80056aa:	9301      	str	r3, [sp, #4]
 80056ac:	4b09      	ldr	r3, [pc, #36]	; (80056d4 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x10c>)
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	4b09      	ldr	r3, [pc, #36]	; (80056d8 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x110>)
 80056b2:	4632      	mov	r2, r6
 80056b4:	2100      	movs	r1, #0
 80056b6:	4620      	mov	r0, r4
 80056b8:	47a8      	blx	r5
}
 80056ba:	bf00      	nop
 80056bc:	3734      	adds	r7, #52	; 0x34
 80056be:	46bd      	mov	sp, r7
 80056c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056c2:	bf00      	nop
 80056c4:	08022150 	.word	0x08022150
 80056c8:	0802214c 	.word	0x0802214c
 80056cc:	080220e8 	.word	0x080220e8
 80056d0:	08022108 	.word	0x08022108
 80056d4:	08021dc4 	.word	0x08021dc4
 80056d8:	08022190 	.word	0x08022190

080056dc <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7ff fb9c 	bl	8004e24 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80056ec:	4a03      	ldr	r2, [pc, #12]	; (80056fc <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4618      	mov	r0, r3
 80056f6:	3708      	adds	r7, #8
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	0802538c 	.word	0x0802538c

08005700 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv>:
 8005700:	b590      	push	{r4, r7, lr}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	f240 121d 	movw	r2, #285	; 0x11d
 800570c:	4906      	ldr	r1, [pc, #24]	; (8005728 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 800570e:	2004      	movs	r0, #4
 8005710:	f003 fb40 	bl	8008d94 <_ZnwjPKci>
 8005714:	4604      	mov	r4, r0
 8005716:	4620      	mov	r0, r4
 8005718:	f7ff ffe0 	bl	80056dc <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>
 800571c:	4623      	mov	r3, r4
 800571e:	4618      	mov	r0, r3
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	bd90      	pop	{r4, r7, pc}
 8005726:	bf00      	nop
 8005728:	08021dc4 	.word	0x08021dc4

0800572c <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>:
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4618      	mov	r0, r3
 8005738:	f00b ff1a 	bl	8011570 <_ZN10UtestShellC1Ev>
 800573c:	4a03      	ldr	r2, [pc, #12]	; (800574c <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4618      	mov	r0, r3
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	080252e0 	.word	0x080252e0

08005750 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 8005750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005752:	b08f      	sub	sp, #60	; 0x3c
 8005754:	af04      	add	r7, sp, #16
 8005756:	6078      	str	r0, [r7, #4]
	Status response = TIMEOUT_ERROR;
 8005758:	2302      	movs	r3, #2
 800575a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data",AT_CWMODE_STATION);
 800575e:	f107 030c 	add.w	r3, r7, #12
 8005762:	492f      	ldr	r1, [pc, #188]	; (8005820 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd0>)
 8005764:	4618      	mov	r0, r3
 8005766:	f005 fed8 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800576a:	f107 030c 	add.w	r3, r7, #12
 800576e:	2100      	movs	r1, #0
 8005770:	4618      	mov	r0, r3
 8005772:	f003 ffab 	bl	80096cc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005776:	4604      	mov	r4, r0
 8005778:	6823      	ldr	r3, [r4, #0]
 800577a:	330c      	adds	r3, #12
 800577c:	681d      	ldr	r5, [r3, #0]
 800577e:	f107 0314 	add.w	r3, r7, #20
 8005782:	4928      	ldr	r1, [pc, #160]	; (8005824 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd4>)
 8005784:	4618      	mov	r0, r3
 8005786:	f005 fec8 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800578a:	f107 0314 	add.w	r3, r7, #20
 800578e:	4619      	mov	r1, r3
 8005790:	4620      	mov	r0, r4
 8005792:	47a8      	blx	r5
 8005794:	4604      	mov	r4, r0
 8005796:	6823      	ldr	r3, [r4, #0]
 8005798:	334c      	adds	r3, #76	; 0x4c
 800579a:	681d      	ldr	r5, [r3, #0]
 800579c:	f107 031c 	add.w	r3, r7, #28
 80057a0:	4921      	ldr	r1, [pc, #132]	; (8005828 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd8>)
 80057a2:	4618      	mov	r0, r3
 80057a4:	f005 feb9 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80057a8:	f107 031c 	add.w	r3, r7, #28
 80057ac:	4a1f      	ldr	r2, [pc, #124]	; (800582c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xdc>)
 80057ae:	4619      	mov	r1, r3
 80057b0:	4620      	mov	r0, r4
 80057b2:	47a8      	blx	r5
 80057b4:	f107 031c 	add.w	r3, r7, #28
 80057b8:	4618      	mov	r0, r3
 80057ba:	f006 fa66 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 80057be:	f107 0314 	add.w	r3, r7, #20
 80057c2:	4618      	mov	r0, r3
 80057c4:	f006 fa61 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 80057c8:	f107 030c 	add.w	r3, r7, #12
 80057cc:	4618      	mov	r0, r3
 80057ce:	f006 fa5c 	bl	800bc8a <_ZN12SimpleStringD1Ev>

	while(1)
	{

		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 80057d2:	4917      	ldr	r1, [pc, #92]	; (8005830 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe0>)
 80057d4:	4817      	ldr	r0, [pc, #92]	; (8005834 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe4>)
 80057d6:	f7fe f93f 	bl	8003a58 <Connect_Wifi>
 80057da:	4603      	mov	r3, r0
 80057dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(response != IDLE)
 80057e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057e4:	2b05      	cmp	r3, #5
 80057e6:	d100      	bne.n	80057ea <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x9a>
		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 80057e8:	e7f3      	b.n	80057d2 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x82>
		{
			break;
 80057ea:	bf00      	nop
		}

	}


	LONGS_EQUAL(TIMEOUT_ERROR,response);
 80057ec:	f00d fa78 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 80057f0:	4604      	mov	r4, r0
 80057f2:	6823      	ldr	r3, [r4, #0]
 80057f4:	3338      	adds	r3, #56	; 0x38
 80057f6:	681d      	ldr	r5, [r3, #0]
 80057f8:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 80057fc:	f00d fa80 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005800:	4603      	mov	r3, r0
 8005802:	9302      	str	r3, [sp, #8]
 8005804:	f44f 7398 	mov.w	r3, #304	; 0x130
 8005808:	9301      	str	r3, [sp, #4]
 800580a:	4b0b      	ldr	r3, [pc, #44]	; (8005838 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe8>)
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	4b0b      	ldr	r3, [pc, #44]	; (800583c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xec>)
 8005810:	4632      	mov	r2, r6
 8005812:	2102      	movs	r1, #2
 8005814:	4620      	mov	r0, r4
 8005816:	47a8      	blx	r5

}
 8005818:	bf00      	nop
 800581a:	372c      	adds	r7, #44	; 0x2c
 800581c:	46bd      	mov	sp, r7
 800581e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005820:	080220e8 	.word	0x080220e8
 8005824:	080220ec 	.word	0x080220ec
 8005828:	08022100 	.word	0x08022100
 800582c:	08021d8c 	.word	0x08021d8c
 8005830:	080221bc 	.word	0x080221bc
 8005834:	080221c4 	.word	0x080221c4
 8005838:	08021dc4 	.word	0x08021dc4
 800583c:	080221cc 	.word	0x080221cc

08005840 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4618      	mov	r0, r3
 800584c:	f7ff faea 	bl	8004e24 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005850:	4a03      	ldr	r2, [pc, #12]	; (8005860 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev+0x20>)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4618      	mov	r0, r3
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	080252c0 	.word	0x080252c0

08005864 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv>:
 8005864:	b590      	push	{r4, r7, lr}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	f44f 729a 	mov.w	r2, #308	; 0x134
 8005870:	4906      	ldr	r1, [pc, #24]	; (800588c <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv+0x28>)
 8005872:	2004      	movs	r0, #4
 8005874:	f003 fa8e 	bl	8008d94 <_ZnwjPKci>
 8005878:	4604      	mov	r4, r0
 800587a:	4620      	mov	r0, r4
 800587c:	f7ff ffe0 	bl	8005840 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>
 8005880:	4623      	mov	r3, r4
 8005882:	4618      	mov	r0, r3
 8005884:	370c      	adds	r7, #12
 8005886:	46bd      	mov	sp, r7
 8005888:	bd90      	pop	{r4, r7, pc}
 800588a:	bf00      	nop
 800588c:	08021dc4 	.word	0x08021dc4

08005890 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>:
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4618      	mov	r0, r3
 800589c:	f00b fe68 	bl	8011570 <_ZN10UtestShellC1Ev>
 80058a0:	4a03      	ldr	r2, [pc, #12]	; (80058b0 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev+0x20>)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	601a      	str	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4618      	mov	r0, r3
 80058aa:	3708      	adds	r7, #8
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	08025214 	.word	0x08025214

080058b4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv>:
{
 80058b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058b6:	b0e1      	sub	sp, #388	; 0x184
 80058b8:	af04      	add	r7, sp, #16
 80058ba:	1d3b      	adds	r3, r7, #4
 80058bc:	6018      	str	r0, [r3, #0]
	char response_arr[3][50] =
 80058be:	4a78      	ldr	r2, [pc, #480]	; (8005aa0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1ec>)
 80058c0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80058c4:	4611      	mov	r1, r2
 80058c6:	2296      	movs	r2, #150	; 0x96
 80058c8:	4618      	mov	r0, r3
 80058ca:	f019 faf7 	bl	801eebc <memcpy>
	{ "OK\r\n",									// station mode response (AT+CWMODE=1)
	  "OK\r\n",									// check disconnect response (AT+CWQAP)
	  "ERROR\r\n"								// connect wifi command response (AT+CWJAP="SSID","password")
	};

	char fake_tx_buffer[3][50] =
 80058ce:	f107 0308 	add.w	r3, r7, #8
 80058d2:	4a74      	ldr	r2, [pc, #464]	; (8005aa4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f0>)
 80058d4:	4618      	mov	r0, r3
 80058d6:	4611      	mov	r1, r2
 80058d8:	2396      	movs	r3, #150	; 0x96
 80058da:	461a      	mov	r2, r3
 80058dc:	f019 faee 	bl	801eebc <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 80058e0:	2300      	movs	r3, #0
 80058e2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80058e6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	dc46      	bgt.n	800597c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xc8>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_tx_buffer[i]);
 80058ee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80058f2:	496d      	ldr	r1, [pc, #436]	; (8005aa8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f4>)
 80058f4:	4618      	mov	r0, r3
 80058f6:	f005 fe10 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80058fa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80058fe:	2100      	movs	r1, #0
 8005900:	4618      	mov	r0, r3
 8005902:	f003 fee3 	bl	80096cc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005906:	4604      	mov	r4, r0
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	330c      	adds	r3, #12
 800590c:	681d      	ldr	r5, [r3, #0]
 800590e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005912:	4966      	ldr	r1, [pc, #408]	; (8005aac <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f8>)
 8005914:	4618      	mov	r0, r3
 8005916:	f005 fe00 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800591a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800591e:	4619      	mov	r1, r3
 8005920:	4620      	mov	r0, r4
 8005922:	47a8      	blx	r5
 8005924:	4604      	mov	r4, r0
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	334c      	adds	r3, #76	; 0x4c
 800592a:	681d      	ldr	r5, [r3, #0]
 800592c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005930:	495f      	ldr	r1, [pc, #380]	; (8005ab0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1fc>)
 8005932:	4618      	mov	r0, r3
 8005934:	f005 fdf1 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8005938:	f107 0208 	add.w	r2, r7, #8
 800593c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005940:	2132      	movs	r1, #50	; 0x32
 8005942:	fb01 f303 	mul.w	r3, r1, r3
 8005946:	441a      	add	r2, r3
 8005948:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800594c:	4619      	mov	r1, r3
 800594e:	4620      	mov	r0, r4
 8005950:	47a8      	blx	r5
 8005952:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005956:	4618      	mov	r0, r3
 8005958:	f006 f997 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800595c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005960:	4618      	mov	r0, r3
 8005962:	f006 f992 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8005966:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800596a:	4618      	mov	r0, r3
 800596c:	f006 f98d 	bl	800bc8a <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8005970:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005974:	3301      	adds	r3, #1
 8005976:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800597a:	e7b4      	b.n	80058e6 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x32>
	}
	Status response = IDLE;
 800597c:	2305      	movs	r3, #5
 800597e:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
	int i = 0;
 8005982:	2300      	movs	r3, #0
 8005984:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8005988:	494a      	ldr	r1, [pc, #296]	; (8005ab4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x200>)
 800598a:	484b      	ldr	r0, [pc, #300]	; (8005ab8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x204>)
 800598c:	f7fe f864 	bl	8003a58 <Connect_Wifi>
 8005990:	4603      	mov	r3, r0
 8005992:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
		if(response == ERROR || response == OK || response == TIMEOUT_ERROR)
 8005996:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 800599a:	2b04      	cmp	r3, #4
 800599c:	d065      	beq.n	8005a6a <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1b6>
 800599e:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 80059a2:	2b03      	cmp	r3, #3
 80059a4:	d061      	beq.n	8005a6a <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1b6>
 80059a6:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d05d      	beq.n	8005a6a <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1b6>
		{
			break;
		}

		if(i<3)
 80059ae:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	dce8      	bgt.n	8005988 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xd4>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80059b6:	2300      	movs	r3, #0
 80059b8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80059bc:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80059c0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80059c4:	2132      	movs	r1, #50	; 0x32
 80059c6:	fb01 f303 	mul.w	r3, r1, r3
 80059ca:	4413      	add	r3, r2
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7fa fc35 	bl	800023c <strlen>
 80059d2:	4603      	mov	r3, r0
 80059d4:	461a      	mov	r2, r3
 80059d6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80059da:	4293      	cmp	r3, r2
 80059dc:	da3f      	bge.n	8005a5e <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1aa>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 80059de:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80059e2:	4931      	ldr	r1, [pc, #196]	; (8005aa8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f4>)
 80059e4:	4618      	mov	r0, r3
 80059e6:	f005 fd98 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80059ea:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80059ee:	2100      	movs	r1, #0
 80059f0:	4618      	mov	r0, r3
 80059f2:	f003 fe6b 	bl	80096cc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80059f6:	4604      	mov	r4, r0
 80059f8:	6823      	ldr	r3, [r4, #0]
 80059fa:	330c      	adds	r3, #12
 80059fc:	681d      	ldr	r5, [r3, #0]
 80059fe:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005a02:	492e      	ldr	r1, [pc, #184]	; (8005abc <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x208>)
 8005a04:	4618      	mov	r0, r3
 8005a06:	f005 fd88 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8005a0a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005a0e:	4619      	mov	r1, r3
 8005a10:	4620      	mov	r0, r4
 8005a12:	47a8      	blx	r5
 8005a14:	4603      	mov	r3, r0
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	3264      	adds	r2, #100	; 0x64
 8005a1a:	6812      	ldr	r2, [r2, #0]
 8005a1c:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8005a20:	2032      	movs	r0, #50	; 0x32
 8005a22:	fb00 f101 	mul.w	r1, r0, r1
 8005a26:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8005a2a:	4408      	add	r0, r1
 8005a2c:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8005a30:	4401      	add	r1, r0
 8005a32:	39d0      	subs	r1, #208	; 0xd0
 8005a34:	7809      	ldrb	r1, [r1, #0]
 8005a36:	4618      	mov	r0, r3
 8005a38:	4790      	blx	r2
 8005a3a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f006 f923 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8005a44:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f006 f91e 	bl	800bc8a <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8005a4e:	f7fd ff95 	bl	800397c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005a52:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005a56:	3301      	adds	r3, #1
 8005a58:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005a5c:	e7ae      	b.n	80059bc <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x108>
			}
			i++;
 8005a5e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005a62:	3301      	adds	r3, #1
 8005a64:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		}

	}
 8005a68:	e78e      	b.n	8005988 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xd4>
	LONGS_EQUAL(ERROR,response);
 8005a6a:	f00d f939 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 8005a6e:	4604      	mov	r4, r0
 8005a70:	6823      	ldr	r3, [r4, #0]
 8005a72:	3338      	adds	r3, #56	; 0x38
 8005a74:	681d      	ldr	r5, [r3, #0]
 8005a76:	f897 6163 	ldrb.w	r6, [r7, #355]	; 0x163
 8005a7a:	f00d f941 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	9302      	str	r3, [sp, #8]
 8005a82:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8005a86:	9301      	str	r3, [sp, #4]
 8005a88:	4b0d      	ldr	r3, [pc, #52]	; (8005ac0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x20c>)
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	4b0d      	ldr	r3, [pc, #52]	; (8005ac4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x210>)
 8005a8e:	4632      	mov	r2, r6
 8005a90:	2104      	movs	r1, #4
 8005a92:	4620      	mov	r0, r4
 8005a94:	47a8      	blx	r5

}
 8005a96:	bf00      	nop
 8005a98:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aa0:	0802221c 	.word	0x0802221c
 8005aa4:	080222b4 	.word	0x080222b4
 8005aa8:	080220e8 	.word	0x080220e8
 8005aac:	080220ec 	.word	0x080220ec
 8005ab0:	08022100 	.word	0x08022100
 8005ab4:	080221bc 	.word	0x080221bc
 8005ab8:	080221c4 	.word	0x080221c4
 8005abc:	08022108 	.word	0x08022108
 8005ac0:	08021dc4 	.word	0x08021dc4
 8005ac4:	080221f8 	.word	0x080221f8

08005ac8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7ff f9a6 	bl	8004e24 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005ad8:	4a03      	ldr	r2, [pc, #12]	; (8005ae8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev+0x20>)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3708      	adds	r7, #8
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	080251f4 	.word	0x080251f4

08005aec <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv>:
 8005aec:	b590      	push	{r4, r7, lr}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	f44f 72b0 	mov.w	r2, #352	; 0x160
 8005af8:	4906      	ldr	r1, [pc, #24]	; (8005b14 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv+0x28>)
 8005afa:	2004      	movs	r0, #4
 8005afc:	f003 f94a 	bl	8008d94 <_ZnwjPKci>
 8005b00:	4604      	mov	r4, r0
 8005b02:	4620      	mov	r0, r4
 8005b04:	f7ff ffe0 	bl	8005ac8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>
 8005b08:	4623      	mov	r3, r4
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd90      	pop	{r4, r7, pc}
 8005b12:	bf00      	nop
 8005b14:	08021dc4 	.word	0x08021dc4

08005b18 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>:
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f00b fd24 	bl	8011570 <_ZN10UtestShellC1Ev>
 8005b28:	4a03      	ldr	r2, [pc, #12]	; (8005b38 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev+0x20>)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	601a      	str	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4618      	mov	r0, r3
 8005b32:	3708      	adds	r7, #8
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	08025148 	.word	0x08025148

08005b3c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv>:
{
 8005b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b3e:	b0e1      	sub	sp, #388	; 0x184
 8005b40:	af04      	add	r7, sp, #16
 8005b42:	1d3b      	adds	r3, r7, #4
 8005b44:	6018      	str	r0, [r3, #0]
	char response_arr[3][50] =
 8005b46:	4a77      	ldr	r2, [pc, #476]	; (8005d24 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e8>)
 8005b48:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005b4c:	4611      	mov	r1, r2
 8005b4e:	2296      	movs	r2, #150	; 0x96
 8005b50:	4618      	mov	r0, r3
 8005b52:	f019 f9b3 	bl	801eebc <memcpy>
	{ "OK\r\n",									// station mode response
	  "OK\r\n",								// check wifi connection response
	  "OK\r\n"								// connect wifi command response
	};

	char fake_tx_buffer[3][50] =
 8005b56:	f107 0308 	add.w	r3, r7, #8
 8005b5a:	4a73      	ldr	r2, [pc, #460]	; (8005d28 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1ec>)
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	4611      	mov	r1, r2
 8005b60:	2396      	movs	r3, #150	; 0x96
 8005b62:	461a      	mov	r2, r3
 8005b64:	f019 f9aa 	bl	801eebc <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8005b68:	2300      	movs	r3, #0
 8005b6a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005b6e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	dc46      	bgt.n	8005c04 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xc8>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_tx_buffer[i]);
 8005b76:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b7a:	496c      	ldr	r1, [pc, #432]	; (8005d2c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f0>)
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f005 fccc 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8005b82:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b86:	2100      	movs	r1, #0
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f003 fd9f 	bl	80096cc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005b8e:	4604      	mov	r4, r0
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	330c      	adds	r3, #12
 8005b94:	681d      	ldr	r5, [r3, #0]
 8005b96:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005b9a:	4965      	ldr	r1, [pc, #404]	; (8005d30 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f4>)
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f005 fcbc 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8005ba2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	4620      	mov	r0, r4
 8005baa:	47a8      	blx	r5
 8005bac:	4604      	mov	r4, r0
 8005bae:	6823      	ldr	r3, [r4, #0]
 8005bb0:	334c      	adds	r3, #76	; 0x4c
 8005bb2:	681d      	ldr	r5, [r3, #0]
 8005bb4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005bb8:	495e      	ldr	r1, [pc, #376]	; (8005d34 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f8>)
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f005 fcad 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8005bc0:	f107 0208 	add.w	r2, r7, #8
 8005bc4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005bc8:	2132      	movs	r1, #50	; 0x32
 8005bca:	fb01 f303 	mul.w	r3, r1, r3
 8005bce:	441a      	add	r2, r3
 8005bd0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	47a8      	blx	r5
 8005bda:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005bde:	4618      	mov	r0, r3
 8005be0:	f006 f853 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8005be4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005be8:	4618      	mov	r0, r3
 8005bea:	f006 f84e 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8005bee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f006 f849 	bl	800bc8a <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8005bf8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005c02:	e7b4      	b.n	8005b6e <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x32>
	}
	Status response;
	int i = 0;
 8005c04:	2300      	movs	r3, #0
 8005c06:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8005c0a:	494b      	ldr	r1, [pc, #300]	; (8005d38 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1fc>)
 8005c0c:	484b      	ldr	r0, [pc, #300]	; (8005d3c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x200>)
 8005c0e:	f7fd ff23 	bl	8003a58 <Connect_Wifi>
 8005c12:	4603      	mov	r3, r0
 8005c14:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
		if(response == ERROR || response == OK || response == TIMEOUT_ERROR)
 8005c18:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005c1c:	2b04      	cmp	r3, #4
 8005c1e:	d065      	beq.n	8005cec <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1b0>
 8005c20:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005c24:	2b03      	cmp	r3, #3
 8005c26:	d061      	beq.n	8005cec <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1b0>
 8005c28:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d05d      	beq.n	8005cec <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1b0>
		{
			break;
		}

		if(i<3)
 8005c30:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	dce8      	bgt.n	8005c0a <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xce>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005c38:	2300      	movs	r3, #0
 8005c3a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005c3e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005c42:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005c46:	2132      	movs	r1, #50	; 0x32
 8005c48:	fb01 f303 	mul.w	r3, r1, r3
 8005c4c:	4413      	add	r3, r2
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7fa faf4 	bl	800023c <strlen>
 8005c54:	4603      	mov	r3, r0
 8005c56:	461a      	mov	r2, r3
 8005c58:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	da3f      	bge.n	8005ce0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1a4>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8005c60:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005c64:	4931      	ldr	r1, [pc, #196]	; (8005d2c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f0>)
 8005c66:	4618      	mov	r0, r3
 8005c68:	f005 fc57 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8005c6c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005c70:	2100      	movs	r1, #0
 8005c72:	4618      	mov	r0, r3
 8005c74:	f003 fd2a 	bl	80096cc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005c78:	4604      	mov	r4, r0
 8005c7a:	6823      	ldr	r3, [r4, #0]
 8005c7c:	330c      	adds	r3, #12
 8005c7e:	681d      	ldr	r5, [r3, #0]
 8005c80:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005c84:	492e      	ldr	r1, [pc, #184]	; (8005d40 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x204>)
 8005c86:	4618      	mov	r0, r3
 8005c88:	f005 fc47 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8005c8c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005c90:	4619      	mov	r1, r3
 8005c92:	4620      	mov	r0, r4
 8005c94:	47a8      	blx	r5
 8005c96:	4603      	mov	r3, r0
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	3264      	adds	r2, #100	; 0x64
 8005c9c:	6812      	ldr	r2, [r2, #0]
 8005c9e:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8005ca2:	2032      	movs	r0, #50	; 0x32
 8005ca4:	fb00 f101 	mul.w	r1, r0, r1
 8005ca8:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8005cac:	4408      	add	r0, r1
 8005cae:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8005cb2:	4401      	add	r1, r0
 8005cb4:	39d0      	subs	r1, #208	; 0xd0
 8005cb6:	7809      	ldrb	r1, [r1, #0]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	4790      	blx	r2
 8005cbc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f005 ffe2 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8005cc6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f005 ffdd 	bl	800bc8a <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8005cd0:	f7fd fe54 	bl	800397c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005cd4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005cd8:	3301      	adds	r3, #1
 8005cda:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005cde:	e7ae      	b.n	8005c3e <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x102>
			}
			i++;
 8005ce0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		}

	}
 8005cea:	e78e      	b.n	8005c0a <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xce>
	LONGS_EQUAL(OK,response);
 8005cec:	f00c fff8 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 8005cf0:	4604      	mov	r4, r0
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	3338      	adds	r3, #56	; 0x38
 8005cf6:	681d      	ldr	r5, [r3, #0]
 8005cf8:	f897 6163 	ldrb.w	r6, [r7, #355]	; 0x163
 8005cfc:	f00d f800 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005d00:	4603      	mov	r3, r0
 8005d02:	9302      	str	r3, [sp, #8]
 8005d04:	f44f 73c4 	mov.w	r3, #392	; 0x188
 8005d08:	9301      	str	r3, [sp, #4]
 8005d0a:	4b0e      	ldr	r3, [pc, #56]	; (8005d44 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x208>)
 8005d0c:	9300      	str	r3, [sp, #0]
 8005d0e:	4b0e      	ldr	r3, [pc, #56]	; (8005d48 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x20c>)
 8005d10:	4632      	mov	r2, r6
 8005d12:	2103      	movs	r1, #3
 8005d14:	4620      	mov	r0, r4
 8005d16:	47a8      	blx	r5

}
 8005d18:	bf00      	nop
 8005d1a:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d22:	bf00      	nop
 8005d24:	08022370 	.word	0x08022370
 8005d28:	080222b4 	.word	0x080222b4
 8005d2c:	080220e8 	.word	0x080220e8
 8005d30:	080220ec 	.word	0x080220ec
 8005d34:	08022100 	.word	0x08022100
 8005d38:	080221bc 	.word	0x080221bc
 8005d3c:	080221c4 	.word	0x080221c4
 8005d40:	08022108 	.word	0x08022108
 8005d44:	08021dc4 	.word	0x08021dc4
 8005d48:	0802234c 	.word	0x0802234c

08005d4c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7ff f864 	bl	8004e24 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005d5c:	4a03      	ldr	r2, [pc, #12]	; (8005d6c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	601a      	str	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4618      	mov	r0, r3
 8005d66:	3708      	adds	r7, #8
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	08025128 	.word	0x08025128

08005d70 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv>:
 8005d70:	b590      	push	{r4, r7, lr}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8005d7c:	4906      	ldr	r1, [pc, #24]	; (8005d98 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 8005d7e:	2004      	movs	r0, #4
 8005d80:	f003 f808 	bl	8008d94 <_ZnwjPKci>
 8005d84:	4604      	mov	r4, r0
 8005d86:	4620      	mov	r0, r4
 8005d88:	f7ff ffe0 	bl	8005d4c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>
 8005d8c:	4623      	mov	r3, r4
 8005d8e:	4618      	mov	r0, r3
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd90      	pop	{r4, r7, pc}
 8005d96:	bf00      	nop
 8005d98:	08021dc4 	.word	0x08021dc4

08005d9c <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>:
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f00b fbe2 	bl	8011570 <_ZN10UtestShellC1Ev>
 8005dac:	4a03      	ldr	r2, [pc, #12]	; (8005dbc <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	601a      	str	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4618      	mov	r0, r3
 8005db6:	3708      	adds	r7, #8
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	0802507c 	.word	0x0802507c

08005dc0 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 8005dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dc2:	b08f      	sub	sp, #60	; 0x3c
 8005dc4:	af04      	add	r7, sp, #16
 8005dc6:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CWQAP);
 8005dc8:	f107 030c 	add.w	r3, r7, #12
 8005dcc:	492e      	ldr	r1, [pc, #184]	; (8005e88 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xc8>)
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f005 fba3 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8005dd4:	f107 030c 	add.w	r3, r7, #12
 8005dd8:	2100      	movs	r1, #0
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f003 fc76 	bl	80096cc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005de0:	4604      	mov	r4, r0
 8005de2:	6823      	ldr	r3, [r4, #0]
 8005de4:	330c      	adds	r3, #12
 8005de6:	681d      	ldr	r5, [r3, #0]
 8005de8:	f107 0314 	add.w	r3, r7, #20
 8005dec:	4927      	ldr	r1, [pc, #156]	; (8005e8c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xcc>)
 8005dee:	4618      	mov	r0, r3
 8005df0:	f005 fb93 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8005df4:	f107 0314 	add.w	r3, r7, #20
 8005df8:	4619      	mov	r1, r3
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	47a8      	blx	r5
 8005dfe:	4604      	mov	r4, r0
 8005e00:	6823      	ldr	r3, [r4, #0]
 8005e02:	334c      	adds	r3, #76	; 0x4c
 8005e04:	681d      	ldr	r5, [r3, #0]
 8005e06:	f107 031c 	add.w	r3, r7, #28
 8005e0a:	4921      	ldr	r1, [pc, #132]	; (8005e90 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd0>)
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f005 fb84 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8005e12:	f107 031c 	add.w	r3, r7, #28
 8005e16:	4a1f      	ldr	r2, [pc, #124]	; (8005e94 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd4>)
 8005e18:	4619      	mov	r1, r3
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	47a8      	blx	r5
 8005e1e:	f107 031c 	add.w	r3, r7, #28
 8005e22:	4618      	mov	r0, r3
 8005e24:	f005 ff31 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8005e28:	f107 0314 	add.w	r3, r7, #20
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f005 ff2c 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8005e32:	f107 030c 	add.w	r3, r7, #12
 8005e36:	4618      	mov	r0, r3
 8005e38:	f005 ff27 	bl	800bc8a <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 8005e3c:	f7fd fe3c 	bl	8003ab8 <Disconnect_Wifi>
 8005e40:	4603      	mov	r3, r0
 8005e42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(response != IDLE)
 8005e46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e4a:	2b05      	cmp	r3, #5
 8005e4c:	d100      	bne.n	8005e50 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x90>
		response = Disconnect_Wifi();
 8005e4e:	e7f5      	b.n	8005e3c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x7c>
			break;
 8005e50:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response);
 8005e52:	f00c ff45 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 8005e56:	4604      	mov	r4, r0
 8005e58:	6823      	ldr	r3, [r4, #0]
 8005e5a:	3338      	adds	r3, #56	; 0x38
 8005e5c:	681d      	ldr	r5, [r3, #0]
 8005e5e:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8005e62:	f00c ff4d 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005e66:	4603      	mov	r3, r0
 8005e68:	9302      	str	r3, [sp, #8]
 8005e6a:	f240 139b 	movw	r3, #411	; 0x19b
 8005e6e:	9301      	str	r3, [sp, #4]
 8005e70:	4b09      	ldr	r3, [pc, #36]	; (8005e98 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd8>)
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	4b09      	ldr	r3, [pc, #36]	; (8005e9c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xdc>)
 8005e76:	4632      	mov	r2, r6
 8005e78:	2102      	movs	r1, #2
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	47a8      	blx	r5
}
 8005e7e:	bf00      	nop
 8005e80:	372c      	adds	r7, #44	; 0x2c
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e86:	bf00      	nop
 8005e88:	080220e8 	.word	0x080220e8
 8005e8c:	080220ec 	.word	0x080220ec
 8005e90:	08022100 	.word	0x08022100
 8005e94:	08021d9c 	.word	0x08021d9c
 8005e98:	08021dc4 	.word	0x08021dc4
 8005e9c:	080221cc 	.word	0x080221cc

08005ea0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7fe ffba 	bl	8004e24 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005eb0:	4a03      	ldr	r2, [pc, #12]	; (8005ec0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev+0x20>)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	601a      	str	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3708      	adds	r7, #8
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	0802505c 	.word	0x0802505c

08005ec4 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv>:
 8005ec4:	b590      	push	{r4, r7, lr}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8005ed0:	4906      	ldr	r1, [pc, #24]	; (8005eec <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv+0x28>)
 8005ed2:	2004      	movs	r0, #4
 8005ed4:	f002 ff5e 	bl	8008d94 <_ZnwjPKci>
 8005ed8:	4604      	mov	r4, r0
 8005eda:	4620      	mov	r0, r4
 8005edc:	f7ff ffe0 	bl	8005ea0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>
 8005ee0:	4623      	mov	r3, r4
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	370c      	adds	r7, #12
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd90      	pop	{r4, r7, pc}
 8005eea:	bf00      	nop
 8005eec:	08021dc4 	.word	0x08021dc4

08005ef0 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>:
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f00b fb38 	bl	8011570 <_ZN10UtestShellC1Ev>
 8005f00:	4a03      	ldr	r2, [pc, #12]	; (8005f10 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev+0x20>)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	601a      	str	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3708      	adds	r7, #8
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	08024fb0 	.word	0x08024fb0

08005f14 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv>:
{
 8005f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f16:	b093      	sub	sp, #76	; 0x4c
 8005f18:	af04      	add	r7, sp, #16
 8005f1a:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CWQAP);
 8005f1c:	f107 0308 	add.w	r3, r7, #8
 8005f20:	494a      	ldr	r1, [pc, #296]	; (800604c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x138>)
 8005f22:	4618      	mov	r0, r3
 8005f24:	f005 faf9 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8005f28:	f107 0308 	add.w	r3, r7, #8
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f003 fbcc 	bl	80096cc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005f34:	4604      	mov	r4, r0
 8005f36:	6823      	ldr	r3, [r4, #0]
 8005f38:	330c      	adds	r3, #12
 8005f3a:	681d      	ldr	r5, [r3, #0]
 8005f3c:	f107 0310 	add.w	r3, r7, #16
 8005f40:	4943      	ldr	r1, [pc, #268]	; (8006050 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x13c>)
 8005f42:	4618      	mov	r0, r3
 8005f44:	f005 fae9 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8005f48:	f107 0310 	add.w	r3, r7, #16
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4620      	mov	r0, r4
 8005f50:	47a8      	blx	r5
 8005f52:	4604      	mov	r4, r0
 8005f54:	6823      	ldr	r3, [r4, #0]
 8005f56:	334c      	adds	r3, #76	; 0x4c
 8005f58:	681d      	ldr	r5, [r3, #0]
 8005f5a:	f107 0318 	add.w	r3, r7, #24
 8005f5e:	493d      	ldr	r1, [pc, #244]	; (8006054 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x140>)
 8005f60:	4618      	mov	r0, r3
 8005f62:	f005 fada 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8005f66:	f107 0318 	add.w	r3, r7, #24
 8005f6a:	4a3b      	ldr	r2, [pc, #236]	; (8006058 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x144>)
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	4620      	mov	r0, r4
 8005f70:	47a8      	blx	r5
 8005f72:	f107 0318 	add.w	r3, r7, #24
 8005f76:	4618      	mov	r0, r3
 8005f78:	f005 fe87 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8005f7c:	f107 0310 	add.w	r3, r7, #16
 8005f80:	4618      	mov	r0, r3
 8005f82:	f005 fe82 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8005f86:	f107 0308 	add.w	r3, r7, #8
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f005 fe7d 	bl	800bc8a <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 8005f90:	f7fd fd92 	bl	8003ab8 <Disconnect_Wifi>
 8005f94:	4603      	mov	r3, r0
 8005f96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if(response != IDLE)
 8005f9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005f9e:	2b05      	cmp	r3, #5
 8005fa0:	d139      	bne.n	8006016 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x102>
			break;

		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	637b      	str	r3, [r7, #52]	; 0x34
 8005fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	dcf1      	bgt.n	8005f90 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x7c>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)AT_RESPONSE_OK[j]);
 8005fac:	f107 0320 	add.w	r3, r7, #32
 8005fb0:	4926      	ldr	r1, [pc, #152]	; (800604c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x138>)
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f005 fab1 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8005fb8:	f107 0320 	add.w	r3, r7, #32
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f003 fb84 	bl	80096cc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005fc4:	4604      	mov	r4, r0
 8005fc6:	6823      	ldr	r3, [r4, #0]
 8005fc8:	330c      	adds	r3, #12
 8005fca:	681d      	ldr	r5, [r3, #0]
 8005fcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005fd0:	4922      	ldr	r1, [pc, #136]	; (800605c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x148>)
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f005 faa1 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8005fd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005fdc:	4619      	mov	r1, r3
 8005fde:	4620      	mov	r0, r4
 8005fe0:	47a8      	blx	r5
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	3264      	adds	r2, #100	; 0x64
 8005fe8:	6812      	ldr	r2, [r2, #0]
 8005fea:	481d      	ldr	r0, [pc, #116]	; (8006060 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x14c>)
 8005fec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005fee:	4401      	add	r1, r0
 8005ff0:	7809      	ldrb	r1, [r1, #0]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	4790      	blx	r2
 8005ff6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f005 fe45 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8006000:	f107 0320 	add.w	r3, r7, #32
 8006004:	4618      	mov	r0, r3
 8006006:	f005 fe40 	bl	800bc8a <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 800600a:	f7fd fcb7 	bl	800397c <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 800600e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006010:	3301      	adds	r3, #1
 8006012:	637b      	str	r3, [r7, #52]	; 0x34
 8006014:	e7c7      	b.n	8005fa6 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x92>
			break;
 8006016:	bf00      	nop
		}

	}

	LONGS_EQUAL(OK,response);
 8006018:	f00c fe62 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 800601c:	4604      	mov	r4, r0
 800601e:	6823      	ldr	r3, [r4, #0]
 8006020:	3338      	adds	r3, #56	; 0x38
 8006022:	681d      	ldr	r5, [r3, #0]
 8006024:	f897 6033 	ldrb.w	r6, [r7, #51]	; 0x33
 8006028:	f00c fe6a 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800602c:	4603      	mov	r3, r0
 800602e:	9302      	str	r3, [sp, #8]
 8006030:	f240 13b3 	movw	r3, #435	; 0x1b3
 8006034:	9301      	str	r3, [sp, #4]
 8006036:	4b0b      	ldr	r3, [pc, #44]	; (8006064 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x150>)
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	4b0b      	ldr	r3, [pc, #44]	; (8006068 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x154>)
 800603c:	4632      	mov	r2, r6
 800603e:	2103      	movs	r1, #3
 8006040:	4620      	mov	r0, r4
 8006042:	47a8      	blx	r5
}
 8006044:	bf00      	nop
 8006046:	373c      	adds	r7, #60	; 0x3c
 8006048:	46bd      	mov	sp, r7
 800604a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800604c:	080220e8 	.word	0x080220e8
 8006050:	080220ec 	.word	0x080220ec
 8006054:	08022100 	.word	0x08022100
 8006058:	08021d9c 	.word	0x08021d9c
 800605c:	08022108 	.word	0x08022108
 8006060:	0802214c 	.word	0x0802214c
 8006064:	08021dc4 	.word	0x08021dc4
 8006068:	0802234c 	.word	0x0802234c

0800606c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev>:
TEST(EspDriver_Test_Group, Command_Process_Test)
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4618      	mov	r0, r3
 8006078:	f7fe fed4 	bl	8004e24 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800607c:	4a03      	ldr	r2, [pc, #12]	; (800608c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev+0x20>)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	601a      	str	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4618      	mov	r0, r3
 8006086:	3708      	adds	r7, #8
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	08024f90 	.word	0x08024f90

08006090 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShell10createTestEv>:
 8006090:	b590      	push	{r4, r7, lr}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	f240 12b5 	movw	r2, #437	; 0x1b5
 800609c:	4906      	ldr	r1, [pc, #24]	; (80060b8 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShell10createTestEv+0x28>)
 800609e:	2004      	movs	r0, #4
 80060a0:	f002 fe78 	bl	8008d94 <_ZnwjPKci>
 80060a4:	4604      	mov	r4, r0
 80060a6:	4620      	mov	r0, r4
 80060a8:	f7ff ffe0 	bl	800606c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev>
 80060ac:	4623      	mov	r3, r4
 80060ae:	4618      	mov	r0, r3
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd90      	pop	{r4, r7, pc}
 80060b6:	bf00      	nop
 80060b8:	08021dc4 	.word	0x08021dc4

080060bc <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev>:
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f00b fa52 	bl	8011570 <_ZN10UtestShellC1Ev>
 80060cc:	4a03      	ldr	r2, [pc, #12]	; (80060dc <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev+0x20>)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	601a      	str	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4618      	mov	r0, r3
 80060d6:	3708      	adds	r7, #8
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	08024ee4 	.word	0x08024ee4

080060e0 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv>:
{
 80060e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060e2:	b0bf      	sub	sp, #252	; 0xfc
 80060e4:	af04      	add	r7, sp, #16
 80060e6:	6078      	str	r0, [r7, #4]
	char response_arr[3][50] =
 80060e8:	4a75      	ldr	r2, [pc, #468]	; (80062c0 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1e0>)
 80060ea:	f107 0318 	add.w	r3, r7, #24
 80060ee:	4611      	mov	r1, r2
 80060f0:	2296      	movs	r2, #150	; 0x96
 80060f2:	4618      	mov	r0, r3
 80060f4:	f018 fee2 	bl	801eebc <memcpy>
	{ "OK\r\n",									// station mode response
	  "OK\r\n",								// check wifi connection response
	  "OK\r\n"								// connect wifi command response
	};

	char *fake_command_buffer[3] =
 80060f8:	4a72      	ldr	r2, [pc, #456]	; (80062c4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1e4>)
 80060fa:	f107 030c 	add.w	r3, r7, #12
 80060fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8006100:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(char*)"AT+CWMODE=1\r\n",
		(char*)"AT+CWQAP\r\n",
		(char*)"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8006104:	2300      	movs	r3, #0
 8006106:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800610a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800610e:	2b02      	cmp	r3, #2
 8006110:	dc46      	bgt.n	80061a0 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xc0>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 8006112:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006116:	496c      	ldr	r1, [pc, #432]	; (80062c8 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1e8>)
 8006118:	4618      	mov	r0, r3
 800611a:	f005 f9fe 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800611e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006122:	2100      	movs	r1, #0
 8006124:	4618      	mov	r0, r3
 8006126:	f003 fad1 	bl	80096cc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800612a:	4604      	mov	r4, r0
 800612c:	6823      	ldr	r3, [r4, #0]
 800612e:	330c      	adds	r3, #12
 8006130:	681d      	ldr	r5, [r3, #0]
 8006132:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006136:	4965      	ldr	r1, [pc, #404]	; (80062cc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1ec>)
 8006138:	4618      	mov	r0, r3
 800613a:	f005 f9ee 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800613e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006142:	4619      	mov	r1, r3
 8006144:	4620      	mov	r0, r4
 8006146:	47a8      	blx	r5
 8006148:	4604      	mov	r4, r0
 800614a:	6823      	ldr	r3, [r4, #0]
 800614c:	334c      	adds	r3, #76	; 0x4c
 800614e:	681d      	ldr	r5, [r3, #0]
 8006150:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006154:	495e      	ldr	r1, [pc, #376]	; (80062d0 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1f0>)
 8006156:	4618      	mov	r0, r3
 8006158:	f005 f9df 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800615c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8006166:	4413      	add	r3, r2
 8006168:	f853 2cdc 	ldr.w	r2, [r3, #-220]
 800616c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006170:	4619      	mov	r1, r3
 8006172:	4620      	mov	r0, r4
 8006174:	47a8      	blx	r5
 8006176:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800617a:	4618      	mov	r0, r3
 800617c:	f005 fd85 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8006180:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006184:	4618      	mov	r0, r3
 8006186:	f005 fd80 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800618a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800618e:	4618      	mov	r0, r3
 8006190:	f005 fd7b 	bl	800bc8a <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8006194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006198:	3301      	adds	r3, #1
 800619a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800619e:	e7b4      	b.n	800610a <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x2a>
	}
	Status response;
	int i = 0;
 80061a0:	2300      	movs	r3, #0
 80061a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	while(1)
	{
		response = Command_Process(fake_command_buffer, 3);
 80061a6:	f107 030c 	add.w	r3, r7, #12
 80061aa:	2103      	movs	r1, #3
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7fd fc99 	bl	8003ae4 <Command_Process>
 80061b2:	4603      	mov	r3, r0
 80061b4:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
		if(response == ERROR || response == OK || response == TIMEOUT_ERROR)
 80061b8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80061bc:	2b04      	cmp	r3, #4
 80061be:	d065      	beq.n	800628c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1ac>
 80061c0:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80061c4:	2b03      	cmp	r3, #3
 80061c6:	d061      	beq.n	800628c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1ac>
 80061c8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d05d      	beq.n	800628c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1ac>
		{
			break;
		}

		if(i<3)
 80061d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	dce6      	bgt.n	80061a6 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xc6>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80061d8:	2300      	movs	r3, #0
 80061da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80061de:	f107 0218 	add.w	r2, r7, #24
 80061e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061e6:	2132      	movs	r1, #50	; 0x32
 80061e8:	fb01 f303 	mul.w	r3, r1, r3
 80061ec:	4413      	add	r3, r2
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fa f824 	bl	800023c <strlen>
 80061f4:	4603      	mov	r3, r0
 80061f6:	461a      	mov	r2, r3
 80061f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061fc:	4293      	cmp	r3, r2
 80061fe:	da3f      	bge.n	8006280 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1a0>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006200:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006204:	4930      	ldr	r1, [pc, #192]	; (80062c8 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1e8>)
 8006206:	4618      	mov	r0, r3
 8006208:	f005 f987 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800620c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006210:	2100      	movs	r1, #0
 8006212:	4618      	mov	r0, r3
 8006214:	f003 fa5a 	bl	80096cc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006218:	4604      	mov	r4, r0
 800621a:	6823      	ldr	r3, [r4, #0]
 800621c:	330c      	adds	r3, #12
 800621e:	681d      	ldr	r5, [r3, #0]
 8006220:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006224:	492b      	ldr	r1, [pc, #172]	; (80062d4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1f4>)
 8006226:	4618      	mov	r0, r3
 8006228:	f005 f977 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800622c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006230:	4619      	mov	r1, r3
 8006232:	4620      	mov	r0, r4
 8006234:	47a8      	blx	r5
 8006236:	4603      	mov	r3, r0
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	3264      	adds	r2, #100	; 0x64
 800623c:	6812      	ldr	r2, [r2, #0]
 800623e:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8006242:	2032      	movs	r0, #50	; 0x32
 8006244:	fb00 f101 	mul.w	r1, r0, r1
 8006248:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 800624c:	4408      	add	r0, r1
 800624e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006252:	4401      	add	r1, r0
 8006254:	39d0      	subs	r1, #208	; 0xd0
 8006256:	7809      	ldrb	r1, [r1, #0]
 8006258:	4618      	mov	r0, r3
 800625a:	4790      	blx	r2
 800625c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006260:	4618      	mov	r0, r3
 8006262:	f005 fd12 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8006266:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800626a:	4618      	mov	r0, r3
 800626c:	f005 fd0d 	bl	800bc8a <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006270:	f7fd fb84 	bl	800397c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006278:	3301      	adds	r3, #1
 800627a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800627e:	e7ae      	b.n	80061de <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xfe>
			}
			i++;
 8006280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006284:	3301      	adds	r3, #1
 8006286:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		}

	}
 800628a:	e78c      	b.n	80061a6 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xc6>
	LONGS_EQUAL(OK,response);
 800628c:	f00c fd28 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 8006290:	4604      	mov	r4, r0
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	3338      	adds	r3, #56	; 0x38
 8006296:	681d      	ldr	r5, [r3, #0]
 8006298:	f897 60db 	ldrb.w	r6, [r7, #219]	; 0xdb
 800629c:	f00c fd30 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80062a0:	4603      	mov	r3, r0
 80062a2:	9302      	str	r3, [sp, #8]
 80062a4:	f240 13dd 	movw	r3, #477	; 0x1dd
 80062a8:	9301      	str	r3, [sp, #4]
 80062aa:	4b0b      	ldr	r3, [pc, #44]	; (80062d8 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1f8>)
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	4b0b      	ldr	r3, [pc, #44]	; (80062dc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1fc>)
 80062b0:	4632      	mov	r2, r6
 80062b2:	2103      	movs	r1, #3
 80062b4:	4620      	mov	r0, r4
 80062b6:	47a8      	blx	r5

}
 80062b8:	bf00      	nop
 80062ba:	37ec      	adds	r7, #236	; 0xec
 80062bc:	46bd      	mov	sp, r7
 80062be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062c0:	08022370 	.word	0x08022370
 80062c4:	08022408 	.word	0x08022408
 80062c8:	080220e8 	.word	0x080220e8
 80062cc:	080220ec 	.word	0x080220ec
 80062d0:	08022100 	.word	0x08022100
 80062d4:	08022108 	.word	0x08022108
 80062d8:	08021dc4 	.word	0x08021dc4
 80062dc:	0802234c 	.word	0x0802234c

080062e0 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Command_Process_Test)
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	4a05      	ldr	r2, [pc, #20]	; (8006300 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev+0x20>)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	601a      	str	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4618      	mov	r0, r3
 80062f2:	f00b f991 	bl	8011618 <_ZN10UtestShellD1Ev>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4618      	mov	r0, r3
 80062fa:	3708      	adds	r7, #8
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	08024ee4 	.word	0x08024ee4

08006304 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD0Ev>:
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f7ff ffe7 	bl	80062e0 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>
 8006312:	211c      	movs	r1, #28
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f002 fd51 	bl	8008dbc <_ZdlPvj>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4618      	mov	r0, r3
 800631e:	3708      	adds	r7, #8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev>:
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	4a05      	ldr	r2, [pc, #20]	; (8006344 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev+0x20>)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	601a      	str	r2, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4618      	mov	r0, r3
 8006336:	f7fe fd87 	bl	8004e48 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4618      	mov	r0, r3
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	08024f90 	.word	0x08024f90

08006348 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD0Ev>:
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f7ff ffe7 	bl	8006324 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev>
 8006356:	2104      	movs	r1, #4
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f002 fd2f 	bl	8008dbc <_ZdlPvj>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4618      	mov	r0, r3
 8006362:	3708      	adds	r7, #8
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	4a05      	ldr	r2, [pc, #20]	; (8006388 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev+0x20>)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	601a      	str	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4618      	mov	r0, r3
 800637a:	f00b f94d 	bl	8011618 <_ZN10UtestShellD1Ev>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4618      	mov	r0, r3
 8006382:	3708      	adds	r7, #8
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	08024fb0 	.word	0x08024fb0

0800638c <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD0Ev>:
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f7ff ffe7 	bl	8006368 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
 800639a:	211c      	movs	r1, #28
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f002 fd0d 	bl	8008dbc <_ZdlPvj>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4618      	mov	r0, r3
 80063a6:	3708      	adds	r7, #8
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>:
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	4a05      	ldr	r2, [pc, #20]	; (80063cc <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev+0x20>)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	601a      	str	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4618      	mov	r0, r3
 80063be:	f7fe fd43 	bl	8004e48 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4618      	mov	r0, r3
 80063c6:	3708      	adds	r7, #8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	0802505c 	.word	0x0802505c

080063d0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD0Ev>:
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f7ff ffe7 	bl	80063ac <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>
 80063de:	2104      	movs	r1, #4
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f002 fceb 	bl	8008dbc <_ZdlPvj>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4618      	mov	r0, r3
 80063ea:	3708      	adds	r7, #8
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	4a05      	ldr	r2, [pc, #20]	; (8006410 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4618      	mov	r0, r3
 8006402:	f00b f909 	bl	8011618 <_ZN10UtestShellD1Ev>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4618      	mov	r0, r3
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	0802507c 	.word	0x0802507c

08006414 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD0Ev>:
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f7ff ffe7 	bl	80063f0 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
 8006422:	211c      	movs	r1, #28
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f002 fcc9 	bl	8008dbc <_ZdlPvj>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4618      	mov	r0, r3
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>:
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	4a05      	ldr	r2, [pc, #20]	; (8006454 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	601a      	str	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4618      	mov	r0, r3
 8006446:	f7fe fcff 	bl	8004e48 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4618      	mov	r0, r3
 800644e:	3708      	adds	r7, #8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	08025128 	.word	0x08025128

08006458 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD0Ev>:
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f7ff ffe7 	bl	8006434 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>
 8006466:	2104      	movs	r1, #4
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f002 fca7 	bl	8008dbc <_ZdlPvj>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4618      	mov	r0, r3
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	4a05      	ldr	r2, [pc, #20]	; (8006498 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev+0x20>)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4618      	mov	r0, r3
 800648a:	f00b f8c5 	bl	8011618 <_ZN10UtestShellD1Ev>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4618      	mov	r0, r3
 8006492:	3708      	adds	r7, #8
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	08025148 	.word	0x08025148

0800649c <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD0Ev>:
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f7ff ffe7 	bl	8006478 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
 80064aa:	211c      	movs	r1, #28
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f002 fc85 	bl	8008dbc <_ZdlPvj>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4618      	mov	r0, r3
 80064b6:	3708      	adds	r7, #8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>:
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	4a05      	ldr	r2, [pc, #20]	; (80064dc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev+0x20>)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	601a      	str	r2, [r3, #0]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7fe fcbb 	bl	8004e48 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4618      	mov	r0, r3
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	080251f4 	.word	0x080251f4

080064e0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD0Ev>:
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f7ff ffe7 	bl	80064bc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>
 80064ee:	2104      	movs	r1, #4
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f002 fc63 	bl	8008dbc <_ZdlPvj>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4618      	mov	r0, r3
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	4a05      	ldr	r2, [pc, #20]	; (8006520 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev+0x20>)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	601a      	str	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4618      	mov	r0, r3
 8006512:	f00b f881 	bl	8011618 <_ZN10UtestShellD1Ev>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4618      	mov	r0, r3
 800651a:	3708      	adds	r7, #8
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	08025214 	.word	0x08025214

08006524 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD0Ev>:
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f7ff ffe7 	bl	8006500 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
 8006532:	211c      	movs	r1, #28
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f002 fc41 	bl	8008dbc <_ZdlPvj>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4618      	mov	r0, r3
 800653e:	3708      	adds	r7, #8
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>:
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	4a05      	ldr	r2, [pc, #20]	; (8006564 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev+0x20>)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4618      	mov	r0, r3
 8006556:	f7fe fc77 	bl	8004e48 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4618      	mov	r0, r3
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	080252c0 	.word	0x080252c0

08006568 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD0Ev>:
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f7ff ffe7 	bl	8006544 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>
 8006576:	2104      	movs	r1, #4
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f002 fc1f 	bl	8008dbc <_ZdlPvj>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4618      	mov	r0, r3
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	4a05      	ldr	r2, [pc, #20]	; (80065a8 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	601a      	str	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4618      	mov	r0, r3
 800659a:	f00b f83d 	bl	8011618 <_ZN10UtestShellD1Ev>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4618      	mov	r0, r3
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	080252e0 	.word	0x080252e0

080065ac <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD0Ev>:
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f7ff ffe7 	bl	8006588 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
 80065ba:	211c      	movs	r1, #28
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f002 fbfd 	bl	8008dbc <_ZdlPvj>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4618      	mov	r0, r3
 80065c6:	3708      	adds	r7, #8
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>:
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	4a05      	ldr	r2, [pc, #20]	; (80065ec <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	601a      	str	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4618      	mov	r0, r3
 80065de:	f7fe fc33 	bl	8004e48 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4618      	mov	r0, r3
 80065e6:	3708      	adds	r7, #8
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	0802538c 	.word	0x0802538c

080065f0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD0Ev>:
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f7ff ffe7 	bl	80065cc <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>
 80065fe:	2104      	movs	r1, #4
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f002 fbdb 	bl	8008dbc <_ZdlPvj>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4618      	mov	r0, r3
 800660a:	3708      	adds	r7, #8
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	4a05      	ldr	r2, [pc, #20]	; (8006630 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev+0x20>)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	601a      	str	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4618      	mov	r0, r3
 8006622:	f00a fff9 	bl	8011618 <_ZN10UtestShellD1Ev>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4618      	mov	r0, r3
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	080253ac 	.word	0x080253ac

08006634 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD0Ev>:
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7ff ffe7 	bl	8006610 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
 8006642:	211c      	movs	r1, #28
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f002 fbb9 	bl	8008dbc <_ZdlPvj>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4618      	mov	r0, r3
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>:
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	4a05      	ldr	r2, [pc, #20]	; (8006674 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev+0x20>)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	601a      	str	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4618      	mov	r0, r3
 8006666:	f7fe fbef 	bl	8004e48 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4618      	mov	r0, r3
 800666e:	3708      	adds	r7, #8
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	08025458 	.word	0x08025458

08006678 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD0Ev>:
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f7ff ffe7 	bl	8006654 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>
 8006686:	2104      	movs	r1, #4
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f002 fb97 	bl	8008dbc <_ZdlPvj>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4618      	mov	r0, r3
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	4a05      	ldr	r2, [pc, #20]	; (80066b8 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev+0x20>)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	601a      	str	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f00a ffb5 	bl	8011618 <_ZN10UtestShellD1Ev>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4618      	mov	r0, r3
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	08025478 	.word	0x08025478

080066bc <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD0Ev>:
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f7ff ffe7 	bl	8006698 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
 80066ca:	211c      	movs	r1, #28
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f002 fb75 	bl	8008dbc <_ZdlPvj>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4618      	mov	r0, r3
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>:
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	4a05      	ldr	r2, [pc, #20]	; (80066fc <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev+0x20>)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	601a      	str	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7fe fbab 	bl	8004e48 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4618      	mov	r0, r3
 80066f6:	3708      	adds	r7, #8
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	08025524 	.word	0x08025524

08006700 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD0Ev>:
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f7ff ffe7 	bl	80066dc <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>
 800670e:	2104      	movs	r1, #4
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f002 fb53 	bl	8008dbc <_ZdlPvj>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4618      	mov	r0, r3
 800671a:	3708      	adds	r7, #8
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_Response_Test)
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	4a05      	ldr	r2, [pc, #20]	; (8006740 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev+0x20>)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	601a      	str	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4618      	mov	r0, r3
 8006732:	f00a ff71 	bl	8011618 <_ZN10UtestShellD1Ev>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4618      	mov	r0, r3
 800673a:	3708      	adds	r7, #8
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	08025544 	.word	0x08025544

08006744 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD0Ev>:
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7ff ffe7 	bl	8006720 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
 8006752:	211c      	movs	r1, #28
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f002 fb31 	bl	8008dbc <_ZdlPvj>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4618      	mov	r0, r3
 800675e:	3708      	adds	r7, #8
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>:
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	4a05      	ldr	r2, [pc, #20]	; (8006784 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev+0x20>)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4618      	mov	r0, r3
 8006776:	f7fe fb67 	bl	8004e48 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4618      	mov	r0, r3
 800677e:	3708      	adds	r7, #8
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	080255f0 	.word	0x080255f0

08006788 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD0Ev>:
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f7ff ffe7 	bl	8006764 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>
 8006796:	2104      	movs	r1, #4
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f002 fb0f 	bl	8008dbc <_ZdlPvj>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4618      	mov	r0, r3
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	4a05      	ldr	r2, [pc, #20]	; (80067c8 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev+0x20>)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4618      	mov	r0, r3
 80067ba:	f00a ff2d 	bl	8011618 <_ZN10UtestShellD1Ev>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4618      	mov	r0, r3
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	08025610 	.word	0x08025610

080067cc <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD0Ev>:
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f7ff ffe7 	bl	80067a8 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
 80067da:	211c      	movs	r1, #28
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f002 faed 	bl	8008dbc <_ZdlPvj>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4618      	mov	r0, r3
 80067e6:	3708      	adds	r7, #8
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>:
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	4a05      	ldr	r2, [pc, #20]	; (800680c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev+0x20>)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	601a      	str	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7fe fb23 	bl	8004e48 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4618      	mov	r0, r3
 8006806:	3708      	adds	r7, #8
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	080256bc 	.word	0x080256bc

08006810 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD0Ev>:
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f7ff ffe7 	bl	80067ec <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>
 800681e:	2104      	movs	r1, #4
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f002 facb 	bl	8008dbc <_ZdlPvj>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4618      	mov	r0, r3
 800682a:	3708      	adds	r7, #8
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	4a05      	ldr	r2, [pc, #20]	; (8006850 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev+0x20>)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	601a      	str	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4618      	mov	r0, r3
 8006842:	f00a fee9 	bl	8011618 <_ZN10UtestShellD1Ev>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4618      	mov	r0, r3
 800684a:	3708      	adds	r7, #8
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	080256dc 	.word	0x080256dc

08006854 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD0Ev>:
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7ff ffe7 	bl	8006830 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
 8006862:	211c      	movs	r1, #28
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f002 faa9 	bl	8008dbc <_ZdlPvj>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4618      	mov	r0, r3
 800686e:	3708      	adds	r7, #8
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>:
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	4a05      	ldr	r2, [pc, #20]	; (8006894 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev+0x20>)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	601a      	str	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4618      	mov	r0, r3
 8006886:	f7fe fadf 	bl	8004e48 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4618      	mov	r0, r3
 800688e:	3708      	adds	r7, #8
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	08025788 	.word	0x08025788

08006898 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD0Ev>:
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f7ff ffe7 	bl	8006874 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>
 80068a6:	2104      	movs	r1, #4
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f002 fa87 	bl	8008dbc <_ZdlPvj>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4618      	mov	r0, r3
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Esp_Init_Test)
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	4a05      	ldr	r2, [pc, #20]	; (80068d8 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev+0x20>)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	601a      	str	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4618      	mov	r0, r3
 80068ca:	f00a fea5 	bl	8011618 <_ZN10UtestShellD1Ev>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4618      	mov	r0, r3
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	080257a8 	.word	0x080257a8

080068dc <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD0Ev>:
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f7ff ffe7 	bl	80068b8 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
 80068ea:	211c      	movs	r1, #28
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f002 fa65 	bl	8008dbc <_ZdlPvj>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4618      	mov	r0, r3
 80068f6:	3708      	adds	r7, #8
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>:
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	4a05      	ldr	r2, [pc, #20]	; (800691c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev+0x20>)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	601a      	str	r2, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4618      	mov	r0, r3
 800690e:	f7fe fa9b 	bl	8004e48 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4618      	mov	r0, r3
 8006916:	3708      	adds	r7, #8
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	08025854 	.word	0x08025854

08006920 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD0Ev>:
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7ff ffe7 	bl	80068fc <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>
 800692e:	2104      	movs	r1, #4
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f002 fa43 	bl	8008dbc <_ZdlPvj>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4618      	mov	r0, r3
 800693a:	3708      	adds	r7, #8
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, CapacityTest)
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	4a05      	ldr	r2, [pc, #20]	; (8006960 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev+0x20>)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	601a      	str	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4618      	mov	r0, r3
 8006952:	f00a fe61 	bl	8011618 <_ZN10UtestShellD1Ev>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4618      	mov	r0, r3
 800695a:	3708      	adds	r7, #8
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	08025894 	.word	0x08025894

08006964 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD0Ev>:
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f7ff ffe7 	bl	8006940 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
 8006972:	211c      	movs	r1, #28
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f002 fa21 	bl	8008dbc <_ZdlPvj>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4618      	mov	r0, r3
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>:
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	4a05      	ldr	r2, [pc, #20]	; (80069a4 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev+0x20>)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	601a      	str	r2, [r3, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4618      	mov	r0, r3
 8006996:	f7fd fc0f 	bl	80041b8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4618      	mov	r0, r3
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	08025940 	.word	0x08025940

080069a8 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD0Ev>:
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f7ff ffe7 	bl	8006984 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>
 80069b6:	2108      	movs	r1, #8
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f002 f9ff 	bl	8008dbc <_ZdlPvj>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4618      	mov	r0, r3
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, LookForTest)
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	4a05      	ldr	r2, [pc, #20]	; (80069e8 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev+0x20>)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4618      	mov	r0, r3
 80069da:	f00a fe1d 	bl	8011618 <_ZN10UtestShellD1Ev>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4618      	mov	r0, r3
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	08025960 	.word	0x08025960

080069ec <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD0Ev>:
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f7ff ffe7 	bl	80069c8 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
 80069fa:	211c      	movs	r1, #28
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f002 f9dd 	bl	8008dbc <_ZdlPvj>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4618      	mov	r0, r3
 8006a06:	3708      	adds	r7, #8
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>:
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	4a05      	ldr	r2, [pc, #20]	; (8006a2c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev+0x20>)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	601a      	str	r2, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7fd fbcb 	bl	80041b8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4618      	mov	r0, r3
 8006a26:	3708      	adds	r7, #8
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	08025a0c 	.word	0x08025a0c

08006a30 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD0Ev>:
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f7ff ffe7 	bl	8006a0c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>
 8006a3e:	2108      	movs	r1, #8
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f002 f9bb 	bl	8008dbc <_ZdlPvj>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3708      	adds	r7, #8
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushArrayTest)
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	4a05      	ldr	r2, [pc, #20]	; (8006a70 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev+0x20>)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4618      	mov	r0, r3
 8006a62:	f00a fdd9 	bl	8011618 <_ZN10UtestShellD1Ev>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3708      	adds	r7, #8
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	08025a2c 	.word	0x08025a2c

08006a74 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD0Ev>:
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f7ff ffe7 	bl	8006a50 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
 8006a82:	211c      	movs	r1, #28
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f002 f999 	bl	8008dbc <_ZdlPvj>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3708      	adds	r7, #8
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>:
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	4a05      	ldr	r2, [pc, #20]	; (8006ab4 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev+0x20>)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	601a      	str	r2, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7fd fb87 	bl	80041b8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4618      	mov	r0, r3
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	08025ad8 	.word	0x08025ad8

08006ab8 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD0Ev>:
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f7ff ffe7 	bl	8006a94 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>
 8006ac6:	2108      	movs	r1, #8
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f002 f977 	bl	8008dbc <_ZdlPvj>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3708      	adds	r7, #8
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	4a05      	ldr	r2, [pc, #20]	; (8006af8 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev+0x20>)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	601a      	str	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f00a fd95 	bl	8011618 <_ZN10UtestShellD1Ev>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4618      	mov	r0, r3
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	08025af8 	.word	0x08025af8

08006afc <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD0Ev>:
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f7ff ffe7 	bl	8006ad8 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
 8006b0a:	211c      	movs	r1, #28
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f002 f955 	bl	8008dbc <_ZdlPvj>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4618      	mov	r0, r3
 8006b16:	3708      	adds	r7, #8
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>:
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	4a05      	ldr	r2, [pc, #20]	; (8006b3c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev+0x20>)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7fd fb43 	bl	80041b8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4618      	mov	r0, r3
 8006b36:	3708      	adds	r7, #8
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	08025ba4 	.word	0x08025ba4

08006b40 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD0Ev>:
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f7ff ffe7 	bl	8006b1c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>
 8006b4e:	2108      	movs	r1, #8
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f002 f933 	bl	8008dbc <_ZdlPvj>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	4a05      	ldr	r2, [pc, #20]	; (8006b80 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev+0x20>)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	601a      	str	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4618      	mov	r0, r3
 8006b72:	f00a fd51 	bl	8011618 <_ZN10UtestShellD1Ev>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3708      	adds	r7, #8
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	08025bc4 	.word	0x08025bc4

08006b84 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD0Ev>:
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f7ff ffe7 	bl	8006b60 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
 8006b92:	211c      	movs	r1, #28
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f002 f911 	bl	8008dbc <_ZdlPvj>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>:
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	4a05      	ldr	r2, [pc, #20]	; (8006bc4 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev+0x20>)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	601a      	str	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7fd faff 	bl	80041b8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3708      	adds	r7, #8
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	08025c70 	.word	0x08025c70

08006bc8 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD0Ev>:
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f7ff ffe7 	bl	8006ba4 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>
 8006bd6:	2108      	movs	r1, #8
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f002 f8ef 	bl	8008dbc <_ZdlPvj>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4618      	mov	r0, r3
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopDataTests)
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	4a05      	ldr	r2, [pc, #20]	; (8006c08 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev+0x20>)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	601a      	str	r2, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f00a fd0d 	bl	8011618 <_ZN10UtestShellD1Ev>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4618      	mov	r0, r3
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	08025c90 	.word	0x08025c90

08006c0c <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD0Ev>:
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7ff ffe7 	bl	8006be8 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
 8006c1a:	211c      	movs	r1, #28
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f002 f8cd 	bl	8008dbc <_ZdlPvj>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4618      	mov	r0, r3
 8006c26:	3708      	adds	r7, #8
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>:
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	4a05      	ldr	r2, [pc, #20]	; (8006c4c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev+0x20>)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	601a      	str	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7fd fabb 	bl	80041b8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4618      	mov	r0, r3
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	08025d3c 	.word	0x08025d3c

08006c50 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD0Ev>:
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f7ff ffe7 	bl	8006c2c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>
 8006c5e:	2108      	movs	r1, #8
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f002 f8ab 	bl	8008dbc <_ZdlPvj>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3708      	adds	r7, #8
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	4a05      	ldr	r2, [pc, #20]	; (8006c90 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev+0x20>)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	601a      	str	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f00a fcc9 	bl	8011618 <_ZN10UtestShellD1Ev>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	08025d5c 	.word	0x08025d5c

08006c94 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD0Ev>:
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f7ff ffe7 	bl	8006c70 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
 8006ca2:	211c      	movs	r1, #28
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f002 f889 	bl	8008dbc <_ZdlPvj>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4618      	mov	r0, r3
 8006cae:	3708      	adds	r7, #8
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>:
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	4a05      	ldr	r2, [pc, #20]	; (8006cd4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev+0x20>)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	601a      	str	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7fd fa77 	bl	80041b8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3708      	adds	r7, #8
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	08025e08 	.word	0x08025e08

08006cd8 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD0Ev>:
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7ff ffe7 	bl	8006cb4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>
 8006ce6:	2108      	movs	r1, #8
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f002 f867 	bl	8008dbc <_ZdlPvj>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushDataTests)
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	4a05      	ldr	r2, [pc, #20]	; (8006d18 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev+0x20>)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	601a      	str	r2, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f00a fc85 	bl	8011618 <_ZN10UtestShellD1Ev>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4618      	mov	r0, r3
 8006d12:	3708      	adds	r7, #8
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	08025e28 	.word	0x08025e28

08006d1c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD0Ev>:
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7ff ffe7 	bl	8006cf8 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
 8006d2a:	211c      	movs	r1, #28
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f002 f845 	bl	8008dbc <_ZdlPvj>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4618      	mov	r0, r3
 8006d36:	3708      	adds	r7, #8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>:
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	4a05      	ldr	r2, [pc, #20]	; (8006d5c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev+0x20>)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	601a      	str	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f7fd fa33 	bl	80041b8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4618      	mov	r0, r3
 8006d56:	3708      	adds	r7, #8
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	08025ed4 	.word	0x08025ed4

08006d60 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD0Ev>:
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f7ff ffe7 	bl	8006d3c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>
 8006d6e:	2108      	movs	r1, #8
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f002 f823 	bl	8008dbc <_ZdlPvj>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3708      	adds	r7, #8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, InitTest)
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	4a05      	ldr	r2, [pc, #20]	; (8006da0 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev+0x20>)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4618      	mov	r0, r3
 8006d92:	f00a fc41 	bl	8011618 <_ZN10UtestShellD1Ev>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3708      	adds	r7, #8
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	08025ef4 	.word	0x08025ef4

08006da4 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD0Ev>:
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f7ff ffe7 	bl	8006d80 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
 8006db2:	211c      	movs	r1, #28
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f002 f801 	bl	8008dbc <_ZdlPvj>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>:
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	4a05      	ldr	r2, [pc, #20]	; (8006de4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev+0x20>)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	601a      	str	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7fd f9ef 	bl	80041b8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	08025fa0 	.word	0x08025fa0

08006de8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD0Ev>:
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f7ff ffe7 	bl	8006dc4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>
 8006df6:	2108      	movs	r1, #8
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f001 ffdf 	bl	8008dbc <_ZdlPvj>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4618      	mov	r0, r3
 8006e02:	3708      	adds	r7, #8
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <_Z41__static_initialization_and_destruction_0ii>:
}
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af02      	add	r7, sp, #8
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	f040 811e 	bne.w	8007056 <_Z41__static_initialization_and_destruction_0ii+0x24e>
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e20:	4293      	cmp	r3, r2
 8006e22:	f040 8118 	bne.w	8007056 <_Z41__static_initialization_and_destruction_0ii+0x24e>
TEST(RingBuffer_Test_Group, InitTest)
 8006e26:	48a3      	ldr	r0, [pc, #652]	; (80070b4 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8006e28:	f7fd fa14 	bl	8004254 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>
 8006e2c:	2324      	movs	r3, #36	; 0x24
 8006e2e:	9301      	str	r3, [sp, #4]
 8006e30:	4ba1      	ldr	r3, [pc, #644]	; (80070b8 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8006e32:	9300      	str	r3, [sp, #0]
 8006e34:	4ba1      	ldr	r3, [pc, #644]	; (80070bc <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8006e36:	4aa2      	ldr	r2, [pc, #648]	; (80070c0 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8006e38:	499e      	ldr	r1, [pc, #632]	; (80070b4 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8006e3a:	48a2      	ldr	r0, [pc, #648]	; (80070c4 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8006e3c:	f00c f9e8 	bl	8013210 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushDataTests)
 8006e40:	48a1      	ldr	r0, [pc, #644]	; (80070c8 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8006e42:	f7fd fabb 	bl	80043bc <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>
 8006e46:	232e      	movs	r3, #46	; 0x2e
 8006e48:	9301      	str	r3, [sp, #4]
 8006e4a:	4b9b      	ldr	r3, [pc, #620]	; (80070b8 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8006e4c:	9300      	str	r3, [sp, #0]
 8006e4e:	4b9f      	ldr	r3, [pc, #636]	; (80070cc <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8006e50:	4a9b      	ldr	r2, [pc, #620]	; (80070c0 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8006e52:	499d      	ldr	r1, [pc, #628]	; (80070c8 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8006e54:	489e      	ldr	r0, [pc, #632]	; (80070d0 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8006e56:	f00c f9db 	bl	8013210 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8006e5a:	489e      	ldr	r0, [pc, #632]	; (80070d4 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8006e5c:	f7fd fb38 	bl	80044d0 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>
 8006e60:	2338      	movs	r3, #56	; 0x38
 8006e62:	9301      	str	r3, [sp, #4]
 8006e64:	4b94      	ldr	r3, [pc, #592]	; (80070b8 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8006e66:	9300      	str	r3, [sp, #0]
 8006e68:	4b9b      	ldr	r3, [pc, #620]	; (80070d8 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8006e6a:	4a95      	ldr	r2, [pc, #596]	; (80070c0 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8006e6c:	4999      	ldr	r1, [pc, #612]	; (80070d4 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8006e6e:	489b      	ldr	r0, [pc, #620]	; (80070dc <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8006e70:	f00c f9ce 	bl	8013210 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopDataTests)
 8006e74:	489a      	ldr	r0, [pc, #616]	; (80070e0 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8006e76:	f7fd fbb3 	bl	80045e0 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>
 8006e7a:	2343      	movs	r3, #67	; 0x43
 8006e7c:	9301      	str	r3, [sp, #4]
 8006e7e:	4b8e      	ldr	r3, [pc, #568]	; (80070b8 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8006e80:	9300      	str	r3, [sp, #0]
 8006e82:	4b98      	ldr	r3, [pc, #608]	; (80070e4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8006e84:	4a8e      	ldr	r2, [pc, #568]	; (80070c0 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8006e86:	4996      	ldr	r1, [pc, #600]	; (80070e0 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8006e88:	4897      	ldr	r0, [pc, #604]	; (80070e8 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8006e8a:	f00c f9c1 	bl	8013210 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8006e8e:	4897      	ldr	r0, [pc, #604]	; (80070ec <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8006e90:	f7fd fc12 	bl	80046b8 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>
 8006e94:	234c      	movs	r3, #76	; 0x4c
 8006e96:	9301      	str	r3, [sp, #4]
 8006e98:	4b87      	ldr	r3, [pc, #540]	; (80070b8 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8006e9a:	9300      	str	r3, [sp, #0]
 8006e9c:	4b94      	ldr	r3, [pc, #592]	; (80070f0 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8006e9e:	4a88      	ldr	r2, [pc, #544]	; (80070c0 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8006ea0:	4992      	ldr	r1, [pc, #584]	; (80070ec <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8006ea2:	4894      	ldr	r0, [pc, #592]	; (80070f4 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8006ea4:	f00c f9b4 	bl	8013210 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8006ea8:	4893      	ldr	r0, [pc, #588]	; (80070f8 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8006eaa:	f7fd fc91 	bl	80047d0 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>
 8006eae:	235c      	movs	r3, #92	; 0x5c
 8006eb0:	9301      	str	r3, [sp, #4]
 8006eb2:	4b81      	ldr	r3, [pc, #516]	; (80070b8 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	4b91      	ldr	r3, [pc, #580]	; (80070fc <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8006eb8:	4a81      	ldr	r2, [pc, #516]	; (80070c0 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8006eba:	498f      	ldr	r1, [pc, #572]	; (80070f8 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8006ebc:	4890      	ldr	r0, [pc, #576]	; (8007100 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8006ebe:	f00c f9a7 	bl	8013210 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushArrayTest)
 8006ec2:	4890      	ldr	r0, [pc, #576]	; (8007104 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8006ec4:	f7fd fd42 	bl	800494c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>
 8006ec8:	2371      	movs	r3, #113	; 0x71
 8006eca:	9301      	str	r3, [sp, #4]
 8006ecc:	4b7a      	ldr	r3, [pc, #488]	; (80070b8 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	4b8d      	ldr	r3, [pc, #564]	; (8007108 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8006ed2:	4a7b      	ldr	r2, [pc, #492]	; (80070c0 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8006ed4:	498b      	ldr	r1, [pc, #556]	; (8007104 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8006ed6:	488d      	ldr	r0, [pc, #564]	; (800710c <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8006ed8:	f00c f99a 	bl	8013210 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, LookForTest)
 8006edc:	488c      	ldr	r0, [pc, #560]	; (8007110 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8006ede:	f7fd fd9b 	bl	8004a18 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>
 8006ee2:	2378      	movs	r3, #120	; 0x78
 8006ee4:	9301      	str	r3, [sp, #4]
 8006ee6:	4b74      	ldr	r3, [pc, #464]	; (80070b8 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	4b8a      	ldr	r3, [pc, #552]	; (8007114 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 8006eec:	4a74      	ldr	r2, [pc, #464]	; (80070c0 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8006eee:	4988      	ldr	r1, [pc, #544]	; (8007110 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8006ef0:	4889      	ldr	r0, [pc, #548]	; (8007118 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8006ef2:	f00c f98d 	bl	8013210 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, CapacityTest)
 8006ef6:	4889      	ldr	r0, [pc, #548]	; (800711c <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8006ef8:	f7fd fe78 	bl	8004bec <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>
 8006efc:	2380      	movs	r3, #128	; 0x80
 8006efe:	9301      	str	r3, [sp, #4]
 8006f00:	4b6d      	ldr	r3, [pc, #436]	; (80070b8 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8006f02:	9300      	str	r3, [sp, #0]
 8006f04:	4b86      	ldr	r3, [pc, #536]	; (8007120 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8006f06:	4a6e      	ldr	r2, [pc, #440]	; (80070c0 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8006f08:	4984      	ldr	r1, [pc, #528]	; (800711c <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8006f0a:	4886      	ldr	r0, [pc, #536]	; (8007124 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8006f0c:	f00c f980 	bl	8013210 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8006f10:	4885      	ldr	r0, [pc, #532]	; (8007128 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8006f12:	f7fd ffe1 	bl	8004ed8 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>
 8006f16:	23b8      	movs	r3, #184	; 0xb8
 8006f18:	9301      	str	r3, [sp, #4]
 8006f1a:	4b67      	ldr	r3, [pc, #412]	; (80070b8 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8006f1c:	9300      	str	r3, [sp, #0]
 8006f1e:	4b83      	ldr	r3, [pc, #524]	; (800712c <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8006f20:	4a83      	ldr	r2, [pc, #524]	; (8007130 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8006f22:	4981      	ldr	r1, [pc, #516]	; (8007128 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8006f24:	4883      	ldr	r0, [pc, #524]	; (8007134 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8006f26:	f00c f973 	bl	8013210 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8006f2a:	4883      	ldr	r0, [pc, #524]	; (8007138 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8006f2c:	f7fe f83e 	bl	8004fac <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>
 8006f30:	23ca      	movs	r3, #202	; 0xca
 8006f32:	9301      	str	r3, [sp, #4]
 8006f34:	4b60      	ldr	r3, [pc, #384]	; (80070b8 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	4b80      	ldr	r3, [pc, #512]	; (800713c <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8006f3a:	4a7d      	ldr	r2, [pc, #500]	; (8007130 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8006f3c:	497e      	ldr	r1, [pc, #504]	; (8007138 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8006f3e:	4880      	ldr	r0, [pc, #512]	; (8007140 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8006f40:	f00c f966 	bl	8013210 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8006f44:	487f      	ldr	r0, [pc, #508]	; (8007144 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8006f46:	f7fe f8f5 	bl	8005134 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>
 8006f4a:	23d6      	movs	r3, #214	; 0xd6
 8006f4c:	9301      	str	r3, [sp, #4]
 8006f4e:	4b5a      	ldr	r3, [pc, #360]	; (80070b8 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	4b7d      	ldr	r3, [pc, #500]	; (8007148 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8006f54:	4a76      	ldr	r2, [pc, #472]	; (8007130 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8006f56:	497b      	ldr	r1, [pc, #492]	; (8007144 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8006f58:	487c      	ldr	r0, [pc, #496]	; (800714c <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8006f5a:	f00c f959 	bl	8013210 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_Response_Test)
 8006f5e:	487c      	ldr	r0, [pc, #496]	; (8007150 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8006f60:	f7fe fa00 	bl	8005364 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>
 8006f64:	23e6      	movs	r3, #230	; 0xe6
 8006f66:	9301      	str	r3, [sp, #4]
 8006f68:	4b53      	ldr	r3, [pc, #332]	; (80070b8 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	4b79      	ldr	r3, [pc, #484]	; (8007154 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 8006f6e:	4a70      	ldr	r2, [pc, #448]	; (8007130 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8006f70:	4977      	ldr	r1, [pc, #476]	; (8007150 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8006f72:	4879      	ldr	r0, [pc, #484]	; (8007158 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8006f74:	f00c f94c 	bl	8013210 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8006f78:	4878      	ldr	r0, [pc, #480]	; (800715c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8006f7a:	f7fe faa7 	bl	80054cc <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>
 8006f7e:	23f7      	movs	r3, #247	; 0xf7
 8006f80:	9301      	str	r3, [sp, #4]
 8006f82:	4b4d      	ldr	r3, [pc, #308]	; (80070b8 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	4b76      	ldr	r3, [pc, #472]	; (8007160 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8006f88:	4a69      	ldr	r2, [pc, #420]	; (8007130 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8006f8a:	4974      	ldr	r1, [pc, #464]	; (800715c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8006f8c:	4875      	ldr	r0, [pc, #468]	; (8007164 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8006f8e:	f00c f93f 	bl	8013210 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8006f92:	4875      	ldr	r0, [pc, #468]	; (8007168 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8006f94:	f7fe fb06 	bl	80055a4 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>
 8006f98:	f240 1307 	movw	r3, #263	; 0x107
 8006f9c:	9301      	str	r3, [sp, #4]
 8006f9e:	4b46      	ldr	r3, [pc, #280]	; (80070b8 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	4b72      	ldr	r3, [pc, #456]	; (800716c <_Z41__static_initialization_and_destruction_0ii+0x364>)
 8006fa4:	4a62      	ldr	r2, [pc, #392]	; (8007130 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8006fa6:	4970      	ldr	r1, [pc, #448]	; (8007168 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8006fa8:	4871      	ldr	r0, [pc, #452]	; (8007170 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8006faa:	f00c f931 	bl	8013210 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8006fae:	4871      	ldr	r0, [pc, #452]	; (8007174 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 8006fb0:	f7fe fbbc 	bl	800572c <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>
 8006fb4:	f240 131d 	movw	r3, #285	; 0x11d
 8006fb8:	9301      	str	r3, [sp, #4]
 8006fba:	4b3f      	ldr	r3, [pc, #252]	; (80070b8 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8006fbc:	9300      	str	r3, [sp, #0]
 8006fbe:	4b6e      	ldr	r3, [pc, #440]	; (8007178 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 8006fc0:	4a5b      	ldr	r2, [pc, #364]	; (8007130 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8006fc2:	496c      	ldr	r1, [pc, #432]	; (8007174 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 8006fc4:	486d      	ldr	r0, [pc, #436]	; (800717c <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8006fc6:	f00c f923 	bl	8013210 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8006fca:	486d      	ldr	r0, [pc, #436]	; (8007180 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 8006fcc:	f7fe fc60 	bl	8005890 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>
 8006fd0:	f44f 739a 	mov.w	r3, #308	; 0x134
 8006fd4:	9301      	str	r3, [sp, #4]
 8006fd6:	4b38      	ldr	r3, [pc, #224]	; (80070b8 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	4b6a      	ldr	r3, [pc, #424]	; (8007184 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 8006fdc:	4a54      	ldr	r2, [pc, #336]	; (8007130 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8006fde:	4968      	ldr	r1, [pc, #416]	; (8007180 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 8006fe0:	4869      	ldr	r0, [pc, #420]	; (8007188 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8006fe2:	f00c f915 	bl	8013210 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8006fe6:	4869      	ldr	r0, [pc, #420]	; (800718c <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8006fe8:	f7fe fd96 	bl	8005b18 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>
 8006fec:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8006ff0:	9301      	str	r3, [sp, #4]
 8006ff2:	4b31      	ldr	r3, [pc, #196]	; (80070b8 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	4b66      	ldr	r3, [pc, #408]	; (8007190 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8006ff8:	4a4d      	ldr	r2, [pc, #308]	; (8007130 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8006ffa:	4964      	ldr	r1, [pc, #400]	; (800718c <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8006ffc:	4865      	ldr	r0, [pc, #404]	; (8007194 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8006ffe:	f00c f907 	bl	8013210 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8007002:	4865      	ldr	r0, [pc, #404]	; (8007198 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8007004:	f7fe feca 	bl	8005d9c <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>
 8007008:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 800700c:	9301      	str	r3, [sp, #4]
 800700e:	4b2a      	ldr	r3, [pc, #168]	; (80070b8 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	4b62      	ldr	r3, [pc, #392]	; (800719c <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8007014:	4a46      	ldr	r2, [pc, #280]	; (8007130 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8007016:	4960      	ldr	r1, [pc, #384]	; (8007198 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8007018:	4861      	ldr	r0, [pc, #388]	; (80071a0 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 800701a:	f00c f8f9 	bl	8013210 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 800701e:	4861      	ldr	r0, [pc, #388]	; (80071a4 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8007020:	f7fe ff66 	bl	8005ef0 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>
 8007024:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 8007028:	9301      	str	r3, [sp, #4]
 800702a:	4b23      	ldr	r3, [pc, #140]	; (80070b8 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 800702c:	9300      	str	r3, [sp, #0]
 800702e:	4b5e      	ldr	r3, [pc, #376]	; (80071a8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8007030:	4a3f      	ldr	r2, [pc, #252]	; (8007130 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8007032:	495c      	ldr	r1, [pc, #368]	; (80071a4 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8007034:	485d      	ldr	r0, [pc, #372]	; (80071ac <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8007036:	f00c f8eb 	bl	8013210 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Command_Process_Test)
 800703a:	485d      	ldr	r0, [pc, #372]	; (80071b0 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 800703c:	f7ff f83e 	bl	80060bc <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev>
 8007040:	f240 13b5 	movw	r3, #437	; 0x1b5
 8007044:	9301      	str	r3, [sp, #4]
 8007046:	4b1c      	ldr	r3, [pc, #112]	; (80070b8 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	4b5a      	ldr	r3, [pc, #360]	; (80071b4 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800704c:	4a38      	ldr	r2, [pc, #224]	; (8007130 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 800704e:	4958      	ldr	r1, [pc, #352]	; (80071b0 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8007050:	4859      	ldr	r0, [pc, #356]	; (80071b8 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8007052:	f00c f8dd 	bl	8013210 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	f040 8109 	bne.w	8007270 <_Z41__static_initialization_and_destruction_0ii+0x468>
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007064:	4293      	cmp	r3, r2
 8007066:	f040 8103 	bne.w	8007270 <_Z41__static_initialization_and_destruction_0ii+0x468>
 800706a:	4853      	ldr	r0, [pc, #332]	; (80071b8 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800706c:	f00c f8fa 	bl	8013264 <_ZN13TestInstallerD1Ev>
 8007070:	484f      	ldr	r0, [pc, #316]	; (80071b0 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8007072:	f7ff f935 	bl	80062e0 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8007076:	484d      	ldr	r0, [pc, #308]	; (80071ac <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8007078:	f00c f8f4 	bl	8013264 <_ZN13TestInstallerD1Ev>
 800707c:	4849      	ldr	r0, [pc, #292]	; (80071a4 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 800707e:	f7ff f973 	bl	8006368 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8007082:	4847      	ldr	r0, [pc, #284]	; (80071a0 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8007084:	f00c f8ee 	bl	8013264 <_ZN13TestInstallerD1Ev>
 8007088:	4843      	ldr	r0, [pc, #268]	; (8007198 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 800708a:	f7ff f9b1 	bl	80063f0 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 800708e:	4841      	ldr	r0, [pc, #260]	; (8007194 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8007090:	f00c f8e8 	bl	8013264 <_ZN13TestInstallerD1Ev>
 8007094:	483d      	ldr	r0, [pc, #244]	; (800718c <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8007096:	f7ff f9ef 	bl	8006478 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 800709a:	483b      	ldr	r0, [pc, #236]	; (8007188 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 800709c:	f00c f8e2 	bl	8013264 <_ZN13TestInstallerD1Ev>
 80070a0:	4837      	ldr	r0, [pc, #220]	; (8007180 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 80070a2:	f7ff fa2d 	bl	8006500 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 80070a6:	4835      	ldr	r0, [pc, #212]	; (800717c <_Z41__static_initialization_and_destruction_0ii+0x374>)
 80070a8:	f00c f8dc 	bl	8013264 <_ZN13TestInstallerD1Ev>
 80070ac:	4831      	ldr	r0, [pc, #196]	; (8007174 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 80070ae:	f7ff fa6b 	bl	8006588 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
 80070b2:	e083      	b.n	80071bc <_Z41__static_initialization_and_destruction_0ii+0x3b4>
 80070b4:	2000049c 	.word	0x2000049c
 80070b8:	08021dc4 	.word	0x08021dc4
 80070bc:	08022414 	.word	0x08022414
 80070c0:	08022420 	.word	0x08022420
 80070c4:	200004b8 	.word	0x200004b8
 80070c8:	200004bc 	.word	0x200004bc
 80070cc:	08022438 	.word	0x08022438
 80070d0:	200004d8 	.word	0x200004d8
 80070d4:	200004dc 	.word	0x200004dc
 80070d8:	08022448 	.word	0x08022448
 80070dc:	200004f8 	.word	0x200004f8
 80070e0:	200004fc 	.word	0x200004fc
 80070e4:	0802245c 	.word	0x0802245c
 80070e8:	20000518 	.word	0x20000518
 80070ec:	2000051c 	.word	0x2000051c
 80070f0:	0802246c 	.word	0x0802246c
 80070f4:	20000538 	.word	0x20000538
 80070f8:	2000053c 	.word	0x2000053c
 80070fc:	08022484 	.word	0x08022484
 8007100:	20000558 	.word	0x20000558
 8007104:	2000055c 	.word	0x2000055c
 8007108:	08022494 	.word	0x08022494
 800710c:	20000578 	.word	0x20000578
 8007110:	2000057c 	.word	0x2000057c
 8007114:	080224a4 	.word	0x080224a4
 8007118:	20000598 	.word	0x20000598
 800711c:	2000059c 	.word	0x2000059c
 8007120:	080224b0 	.word	0x080224b0
 8007124:	200005b8 	.word	0x200005b8
 8007128:	200005c4 	.word	0x200005c4
 800712c:	080224c0 	.word	0x080224c0
 8007130:	080224d0 	.word	0x080224d0
 8007134:	200005e0 	.word	0x200005e0
 8007138:	200005e4 	.word	0x200005e4
 800713c:	080224e8 	.word	0x080224e8
 8007140:	20000600 	.word	0x20000600
 8007144:	20000604 	.word	0x20000604
 8007148:	08022500 	.word	0x08022500
 800714c:	20000620 	.word	0x20000620
 8007150:	20000624 	.word	0x20000624
 8007154:	0802251c 	.word	0x0802251c
 8007158:	20000640 	.word	0x20000640
 800715c:	20000644 	.word	0x20000644
 8007160:	08022530 	.word	0x08022530
 8007164:	20000660 	.word	0x20000660
 8007168:	20000664 	.word	0x20000664
 800716c:	0802254c 	.word	0x0802254c
 8007170:	20000680 	.word	0x20000680
 8007174:	20000684 	.word	0x20000684
 8007178:	08022560 	.word	0x08022560
 800717c:	200006a0 	.word	0x200006a0
 8007180:	200006a4 	.word	0x200006a4
 8007184:	0802257c 	.word	0x0802257c
 8007188:	200006c0 	.word	0x200006c0
 800718c:	200006c4 	.word	0x200006c4
 8007190:	08022594 	.word	0x08022594
 8007194:	200006e0 	.word	0x200006e0
 8007198:	200006e4 	.word	0x200006e4
 800719c:	080225a8 	.word	0x080225a8
 80071a0:	20000700 	.word	0x20000700
 80071a4:	20000704 	.word	0x20000704
 80071a8:	080225c8 	.word	0x080225c8
 80071ac:	20000720 	.word	0x20000720
 80071b0:	20000724 	.word	0x20000724
 80071b4:	080225e0 	.word	0x080225e0
 80071b8:	20000740 	.word	0x20000740
TEST(EspDriver_Test_Group, Wait_Response_Test)
 80071bc:	482e      	ldr	r0, [pc, #184]	; (8007278 <_Z41__static_initialization_and_destruction_0ii+0x470>)
 80071be:	f00c f851 	bl	8013264 <_ZN13TestInstallerD1Ev>
 80071c2:	482e      	ldr	r0, [pc, #184]	; (800727c <_Z41__static_initialization_and_destruction_0ii+0x474>)
 80071c4:	f7ff fa24 	bl	8006610 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 80071c8:	482d      	ldr	r0, [pc, #180]	; (8007280 <_Z41__static_initialization_and_destruction_0ii+0x478>)
 80071ca:	f00c f84b 	bl	8013264 <_ZN13TestInstallerD1Ev>
 80071ce:	482d      	ldr	r0, [pc, #180]	; (8007284 <_Z41__static_initialization_and_destruction_0ii+0x47c>)
 80071d0:	f7ff fa62 	bl	8006698 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_Response_Test)
 80071d4:	482c      	ldr	r0, [pc, #176]	; (8007288 <_Z41__static_initialization_and_destruction_0ii+0x480>)
 80071d6:	f00c f845 	bl	8013264 <_ZN13TestInstallerD1Ev>
 80071da:	482c      	ldr	r0, [pc, #176]	; (800728c <_Z41__static_initialization_and_destruction_0ii+0x484>)
 80071dc:	f7ff faa0 	bl	8006720 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 80071e0:	482b      	ldr	r0, [pc, #172]	; (8007290 <_Z41__static_initialization_and_destruction_0ii+0x488>)
 80071e2:	f00c f83f 	bl	8013264 <_ZN13TestInstallerD1Ev>
 80071e6:	482b      	ldr	r0, [pc, #172]	; (8007294 <_Z41__static_initialization_and_destruction_0ii+0x48c>)
 80071e8:	f7ff fade 	bl	80067a8 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 80071ec:	482a      	ldr	r0, [pc, #168]	; (8007298 <_Z41__static_initialization_and_destruction_0ii+0x490>)
 80071ee:	f00c f839 	bl	8013264 <_ZN13TestInstallerD1Ev>
 80071f2:	482a      	ldr	r0, [pc, #168]	; (800729c <_Z41__static_initialization_and_destruction_0ii+0x494>)
 80071f4:	f7ff fb1c 	bl	8006830 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 80071f8:	4829      	ldr	r0, [pc, #164]	; (80072a0 <_Z41__static_initialization_and_destruction_0ii+0x498>)
 80071fa:	f00c f833 	bl	8013264 <_ZN13TestInstallerD1Ev>
 80071fe:	4829      	ldr	r0, [pc, #164]	; (80072a4 <_Z41__static_initialization_and_destruction_0ii+0x49c>)
 8007200:	f7ff fb5a 	bl	80068b8 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
TEST(RingBuffer_Test_Group, CapacityTest)
 8007204:	4828      	ldr	r0, [pc, #160]	; (80072a8 <_Z41__static_initialization_and_destruction_0ii+0x4a0>)
 8007206:	f00c f82d 	bl	8013264 <_ZN13TestInstallerD1Ev>
 800720a:	4828      	ldr	r0, [pc, #160]	; (80072ac <_Z41__static_initialization_and_destruction_0ii+0x4a4>)
 800720c:	f7ff fb98 	bl	8006940 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, LookForTest)
 8007210:	4827      	ldr	r0, [pc, #156]	; (80072b0 <_Z41__static_initialization_and_destruction_0ii+0x4a8>)
 8007212:	f00c f827 	bl	8013264 <_ZN13TestInstallerD1Ev>
 8007216:	4827      	ldr	r0, [pc, #156]	; (80072b4 <_Z41__static_initialization_and_destruction_0ii+0x4ac>)
 8007218:	f7ff fbd6 	bl	80069c8 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushArrayTest)
 800721c:	4826      	ldr	r0, [pc, #152]	; (80072b8 <_Z41__static_initialization_and_destruction_0ii+0x4b0>)
 800721e:	f00c f821 	bl	8013264 <_ZN13TestInstallerD1Ev>
 8007222:	4826      	ldr	r0, [pc, #152]	; (80072bc <_Z41__static_initialization_and_destruction_0ii+0x4b4>)
 8007224:	f7ff fc14 	bl	8006a50 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8007228:	4825      	ldr	r0, [pc, #148]	; (80072c0 <_Z41__static_initialization_and_destruction_0ii+0x4b8>)
 800722a:	f00c f81b 	bl	8013264 <_ZN13TestInstallerD1Ev>
 800722e:	4825      	ldr	r0, [pc, #148]	; (80072c4 <_Z41__static_initialization_and_destruction_0ii+0x4bc>)
 8007230:	f7ff fc52 	bl	8006ad8 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8007234:	4824      	ldr	r0, [pc, #144]	; (80072c8 <_Z41__static_initialization_and_destruction_0ii+0x4c0>)
 8007236:	f00c f815 	bl	8013264 <_ZN13TestInstallerD1Ev>
 800723a:	4824      	ldr	r0, [pc, #144]	; (80072cc <_Z41__static_initialization_and_destruction_0ii+0x4c4>)
 800723c:	f7ff fc90 	bl	8006b60 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopDataTests)
 8007240:	4823      	ldr	r0, [pc, #140]	; (80072d0 <_Z41__static_initialization_and_destruction_0ii+0x4c8>)
 8007242:	f00c f80f 	bl	8013264 <_ZN13TestInstallerD1Ev>
 8007246:	4823      	ldr	r0, [pc, #140]	; (80072d4 <_Z41__static_initialization_and_destruction_0ii+0x4cc>)
 8007248:	f7ff fcce 	bl	8006be8 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 800724c:	4822      	ldr	r0, [pc, #136]	; (80072d8 <_Z41__static_initialization_and_destruction_0ii+0x4d0>)
 800724e:	f00c f809 	bl	8013264 <_ZN13TestInstallerD1Ev>
 8007252:	4822      	ldr	r0, [pc, #136]	; (80072dc <_Z41__static_initialization_and_destruction_0ii+0x4d4>)
 8007254:	f7ff fd0c 	bl	8006c70 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushDataTests)
 8007258:	4821      	ldr	r0, [pc, #132]	; (80072e0 <_Z41__static_initialization_and_destruction_0ii+0x4d8>)
 800725a:	f00c f803 	bl	8013264 <_ZN13TestInstallerD1Ev>
 800725e:	4821      	ldr	r0, [pc, #132]	; (80072e4 <_Z41__static_initialization_and_destruction_0ii+0x4dc>)
 8007260:	f7ff fd4a 	bl	8006cf8 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, InitTest)
 8007264:	4820      	ldr	r0, [pc, #128]	; (80072e8 <_Z41__static_initialization_and_destruction_0ii+0x4e0>)
 8007266:	f00b fffd 	bl	8013264 <_ZN13TestInstallerD1Ev>
 800726a:	4820      	ldr	r0, [pc, #128]	; (80072ec <_Z41__static_initialization_and_destruction_0ii+0x4e4>)
 800726c:	f7ff fd88 	bl	8006d80 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
}
 8007270:	bf00      	nop
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	20000680 	.word	0x20000680
 800727c:	20000664 	.word	0x20000664
 8007280:	20000660 	.word	0x20000660
 8007284:	20000644 	.word	0x20000644
 8007288:	20000640 	.word	0x20000640
 800728c:	20000624 	.word	0x20000624
 8007290:	20000620 	.word	0x20000620
 8007294:	20000604 	.word	0x20000604
 8007298:	20000600 	.word	0x20000600
 800729c:	200005e4 	.word	0x200005e4
 80072a0:	200005e0 	.word	0x200005e0
 80072a4:	200005c4 	.word	0x200005c4
 80072a8:	200005b8 	.word	0x200005b8
 80072ac:	2000059c 	.word	0x2000059c
 80072b0:	20000598 	.word	0x20000598
 80072b4:	2000057c 	.word	0x2000057c
 80072b8:	20000578 	.word	0x20000578
 80072bc:	2000055c 	.word	0x2000055c
 80072c0:	20000558 	.word	0x20000558
 80072c4:	2000053c 	.word	0x2000053c
 80072c8:	20000538 	.word	0x20000538
 80072cc:	2000051c 	.word	0x2000051c
 80072d0:	20000518 	.word	0x20000518
 80072d4:	200004fc 	.word	0x200004fc
 80072d8:	200004f8 	.word	0x200004f8
 80072dc:	200004dc 	.word	0x200004dc
 80072e0:	200004d8 	.word	0x200004d8
 80072e4:	200004bc 	.word	0x200004bc
 80072e8:	200004b8 	.word	0x200004b8
 80072ec:	2000049c 	.word	0x2000049c

080072f0 <_GLOBAL__sub_I_rx_buffer>:
 80072f0:	b580      	push	{r7, lr}
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80072f8:	2001      	movs	r0, #1
 80072fa:	f7ff fd85 	bl	8006e08 <_Z41__static_initialization_and_destruction_0ii>
 80072fe:	bd80      	pop	{r7, pc}

08007300 <_GLOBAL__sub_D_rx_buffer>:
 8007300:	b580      	push	{r7, lr}
 8007302:	af00      	add	r7, sp, #0
 8007304:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007308:	2000      	movs	r0, #0
 800730a:	f7ff fd7d 	bl	8006e08 <_Z41__static_initialization_and_destruction_0ii>
 800730e:	bd80      	pop	{r7, pc}

08007310 <_ZNK10TestResult11getRunCountEv>:

    size_t getTestCount() const
    {
        return testCount_;
    }
    size_t getRunCount() const
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
    {
        return runCount_;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	68db      	ldr	r3, [r3, #12]
    }
 800731c:	4618      	mov	r0, r3
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <_ZNK10TestResult15getIgnoredCountEv>:
    }
    size_t getFilteredOutCount() const
    {
        return filteredOutCount_;
    }
    size_t getIgnoredCount() const
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
    {
        return ignoredCount_;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	69db      	ldr	r3, [r3, #28]
    }
 8007334:	4618      	mov	r0, r3
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <_ZNK10TestResult15getFailureCountEv>:
    size_t getFailureCount() const
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
    {
        return failureCount_;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	695b      	ldr	r3, [r3, #20]
    }
 800734c:	4618      	mov	r0, r3
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <_ZNK10TestResult9isFailureEv>:

    bool isFailure() const
 8007358:	b590      	push	{r4, r7, lr}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
    {
        return (getFailureCount() != 0) || (getRunCount() + getIgnoredCount() == 0);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f7ff ffed 	bl	8007340 <_ZNK10TestResult15getFailureCountEv>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10a      	bne.n	8007382 <_ZNK10TestResult9isFailureEv+0x2a>
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f7ff ffcf 	bl	8007310 <_ZNK10TestResult11getRunCountEv>
 8007372:	4604      	mov	r4, r0
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f7ff ffd7 	bl	8007328 <_ZNK10TestResult15getIgnoredCountEv>
 800737a:	4603      	mov	r3, r0
 800737c:	4423      	add	r3, r4
 800737e:	2b00      	cmp	r3, #0
 8007380:	d101      	bne.n	8007386 <_ZNK10TestResult9isFailureEv+0x2e>
 8007382:	2301      	movs	r3, #1
 8007384:	e000      	b.n	8007388 <_ZNK10TestResult9isFailureEv+0x30>
 8007386:	2300      	movs	r3, #0
    }
 8007388:	4618      	mov	r0, r3
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	bd90      	pop	{r4, r7, pc}

08007390 <_ZN17ConsoleTestOutputC1Ev>:
///////////////////////////////////////////////////////////////////////////////

class ConsoleTestOutput: public TestOutput
{
public:
    explicit ConsoleTestOutput()
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
    {
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4618      	mov	r0, r3
 800739c:	f007 fde6 	bl	800ef6c <_ZN10TestOutputC1Ev>
 80073a0:	4a03      	ldr	r2, [pc, #12]	; (80073b0 <_ZN17ConsoleTestOutputC1Ev+0x20>)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	601a      	str	r2, [r3, #0]
    }
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4618      	mov	r0, r3
 80073aa:	3708      	adds	r7, #8
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	08026654 	.word	0x08026654

080073b4 <_ZN17ConsoleTestOutputD1Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
    {
 80073bc:	4a05      	ldr	r2, [pc, #20]	; (80073d4 <_ZN17ConsoleTestOutputD1Ev+0x20>)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	601a      	str	r2, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4618      	mov	r0, r3
 80073c6:	f007 fdef 	bl	800efa8 <_ZN10TestOutputD1Ev>
    }
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4618      	mov	r0, r3
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	08026654 	.word	0x08026654

080073d8 <_ZN17ConsoleTestOutputD0Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
    }
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7ff ffe7 	bl	80073b4 <_ZN17ConsoleTestOutputD1Ev>
 80073e6:	2110      	movs	r1, #16
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f001 fce7 	bl	8008dbc <_ZdlPvj>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4618      	mov	r0, r3
 80073f2:	3708      	adds	r7, #8
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>:
{
    return RunAllTests(ac, (const char *const *) av);
}

int CommandLineTestRunner::RunAllTests(int ac, const char *const *av)
{
 80073f8:	b5b0      	push	{r4, r5, r7, lr}
 80073fa:	b098      	sub	sp, #96	; 0x60
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
    int result = 0;
 8007402:	2300      	movs	r3, #0
 8007404:	65fb      	str	r3, [r7, #92]	; 0x5c
    ConsoleTestOutput backupOutput;
 8007406:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800740a:	4618      	mov	r0, r3
 800740c:	f7ff ffc0 	bl	8007390 <_ZN17ConsoleTestOutputC1Ev>

    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8007410:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007414:	4935      	ldr	r1, [pc, #212]	; (80074ec <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8007416:	4618      	mov	r0, r3
 8007418:	f004 f87f 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800741c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8007420:	f107 0318 	add.w	r3, r7, #24
 8007424:	2200      	movs	r2, #0
 8007426:	4618      	mov	r0, r3
 8007428:	f001 ff6a 	bl	8009300 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>
 800742c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007430:	4618      	mov	r0, r3
 8007432:	f004 fc2a 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
 8007436:	f107 0318 	add.w	r3, r7, #24
 800743a:	2101      	movs	r1, #1
 800743c:	4618      	mov	r0, r3
 800743e:	f001 ff2f 	bl	80092a0 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>
    TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
 8007442:	f009 fb21 	bl	8010a88 <_ZN12TestRegistry18getCurrentRegistryEv>
 8007446:	4603      	mov	r3, r0
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	3234      	adds	r2, #52	; 0x34
 800744c:	6812      	ldr	r2, [r2, #0]
 800744e:	f107 0118 	add.w	r1, r7, #24
 8007452:	4618      	mov	r0, r3
 8007454:	4790      	blx	r2

    {
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8007456:	f009 fb17 	bl	8010a88 <_ZN12TestRegistry18getCurrentRegistryEv>
 800745a:	4603      	mov	r3, r0
 800745c:	f107 0008 	add.w	r0, r7, #8
 8007460:	683a      	ldr	r2, [r7, #0]
 8007462:	6879      	ldr	r1, [r7, #4]
 8007464:	f000 f844 	bl	80074f0 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>
        result = runner.runAllTestsMain();
 8007468:	f107 0308 	add.w	r3, r7, #8
 800746c:	4618      	mov	r0, r3
 800746e:	f000 f899 	bl	80075a4 <_ZN21CommandLineTestRunner15runAllTestsMainEv>
 8007472:	65f8      	str	r0, [r7, #92]	; 0x5c
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8007474:	f107 0308 	add.w	r3, r7, #8
 8007478:	4618      	mov	r0, r3
 800747a:	f000 f863 	bl	8007544 <_ZN21CommandLineTestRunnerD1Ev>
    }

    if (result == 0) {
 800747e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007480:	2b00      	cmp	r3, #0
 8007482:	d10c      	bne.n	800749e <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xa6>
        backupOutput << memLeakWarn.FinalReport(0);
 8007484:	f107 0318 	add.w	r3, r7, #24
 8007488:	2100      	movs	r1, #0
 800748a:	4618      	mov	r0, r3
 800748c:	f002 f83a 	bl	8009504 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>
 8007490:	4602      	mov	r2, r0
 8007492:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007496:	4611      	mov	r1, r2
 8007498:	4618      	mov	r0, r3
 800749a:	f007 fe27 	bl	800f0ec <_ZlsR10TestOutputPKc>
    }
    TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);
 800749e:	f009 faf3 	bl	8010a88 <_ZN12TestRegistry18getCurrentRegistryEv>
 80074a2:	4604      	mov	r4, r0
 80074a4:	6823      	ldr	r3, [r4, #0]
 80074a6:	3344      	adds	r3, #68	; 0x44
 80074a8:	681d      	ldr	r5, [r3, #0]
 80074aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80074ae:	490f      	ldr	r1, [pc, #60]	; (80074ec <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 80074b0:	4618      	mov	r0, r3
 80074b2:	f004 f832 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80074b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80074ba:	4619      	mov	r1, r3
 80074bc:	4620      	mov	r0, r4
 80074be:	47a8      	blx	r5
 80074c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80074c4:	4618      	mov	r0, r3
 80074c6:	f004 fbe0 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    return result;
 80074ca:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 80074cc:	f107 0318 	add.w	r3, r7, #24
 80074d0:	4618      	mov	r0, r3
 80074d2:	f001 ff4d 	bl	8009370 <_ZN23MemoryLeakWarningPluginD1Ev>
    ConsoleTestOutput backupOutput;
 80074d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80074da:	4618      	mov	r0, r3
 80074dc:	f7ff ff6a 	bl	80073b4 <_ZN17ConsoleTestOutputD1Ev>
    return result;
 80074e0:	4623      	mov	r3, r4
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3760      	adds	r7, #96	; 0x60
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bdb0      	pop	{r4, r5, r7, pc}
 80074ea:	bf00      	nop
 80074ec:	080225f8 	.word	0x080225f8

080074f0 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>:

CommandLineTestRunner::CommandLineTestRunner(int ac, const char *const *av, TestRegistry* registry) :
 80074f0:	b590      	push	{r4, r7, lr}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
 80074fc:	603b      	str	r3, [r7, #0]
    output_(NULLPTR), arguments_(NULLPTR), registry_(registry)
 80074fe:	4a0f      	ldr	r2, [pc, #60]	; (800753c <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x4c>)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	601a      	str	r2, [r3, #0]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2200      	movs	r2, #0
 8007508:	605a      	str	r2, [r3, #4]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	609a      	str	r2, [r3, #8]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	683a      	ldr	r2, [r7, #0]
 8007514:	60da      	str	r2, [r3, #12]
{
    arguments_ = new CommandLineArguments(ac, av);
 8007516:	2241      	movs	r2, #65	; 0x41
 8007518:	4909      	ldr	r1, [pc, #36]	; (8007540 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x50>)
 800751a:	2038      	movs	r0, #56	; 0x38
 800751c:	f001 fc3a 	bl	8008d94 <_ZnwjPKci>
 8007520:	4604      	mov	r4, r0
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	68b9      	ldr	r1, [r7, #8]
 8007526:	4620      	mov	r0, r4
 8007528:	f00c f84a 	bl	80135c0 <_ZN20CommandLineArgumentsC1EiPKPKc>
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	609c      	str	r4, [r3, #8]
}
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	4618      	mov	r0, r3
 8007534:	3714      	adds	r7, #20
 8007536:	46bd      	mov	sp, r7
 8007538:	bd90      	pop	{r4, r7, pc}
 800753a:	bf00      	nop
 800753c:	08025fe0 	.word	0x08025fe0
 8007540:	0802260c 	.word	0x0802260c

08007544 <_ZN21CommandLineTestRunnerD1Ev>:

CommandLineTestRunner::~CommandLineTestRunner()
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	4a0c      	ldr	r2, [pc, #48]	; (8007580 <_ZN21CommandLineTestRunnerD1Ev+0x3c>)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	601a      	str	r2, [r3, #0]
{
    delete arguments_;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d004      	beq.n	8007564 <_ZN21CommandLineTestRunnerD1Ev+0x20>
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	3204      	adds	r2, #4
 800755e:	6812      	ldr	r2, [r2, #0]
 8007560:	4618      	mov	r0, r3
 8007562:	4790      	blx	r2
    delete output_;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d004      	beq.n	8007576 <_ZN21CommandLineTestRunnerD1Ev+0x32>
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	3204      	adds	r2, #4
 8007570:	6812      	ldr	r2, [r2, #0]
 8007572:	4618      	mov	r0, r3
 8007574:	4790      	blx	r2
}
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4618      	mov	r0, r3
 800757a:	3708      	adds	r7, #8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	08025fe0 	.word	0x08025fe0

08007584 <_ZN21CommandLineTestRunnerD0Ev>:
CommandLineTestRunner::~CommandLineTestRunner()
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
}
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f7ff ffd9 	bl	8007544 <_ZN21CommandLineTestRunnerD1Ev>
 8007592:	2110      	movs	r1, #16
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f001 fc11 	bl	8008dbc <_ZdlPvj>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4618      	mov	r0, r3
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <_ZN21CommandLineTestRunner15runAllTestsMainEv>:

int CommandLineTestRunner::runAllTestsMain()
{
 80075a4:	b5b0      	push	{r4, r5, r7, lr}
 80075a6:	b08c      	sub	sp, #48	; 0x30
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
    int testResult = 1;
 80075ac:	2301      	movs	r3, #1
 80075ae:	62fb      	str	r3, [r7, #44]	; 0x2c

    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 80075b0:	f107 031c 	add.w	r3, r7, #28
 80075b4:	4929      	ldr	r1, [pc, #164]	; (800765c <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 80075b6:	4618      	mov	r0, r3
 80075b8:	f003 ffaf 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80075bc:	f107 021c 	add.w	r2, r7, #28
 80075c0:	f107 0308 	add.w	r3, r7, #8
 80075c4:	4611      	mov	r1, r2
 80075c6:	4618      	mov	r0, r3
 80075c8:	f008 fe1c 	bl	8010204 <_ZN16SetPointerPluginC1ERK12SimpleString>
 80075cc:	f107 031c 	add.w	r3, r7, #28
 80075d0:	4618      	mov	r0, r3
 80075d2:	f004 fb5a 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    registry_->installPlugin(&pPlugin);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	68da      	ldr	r2, [r3, #12]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	3334      	adds	r3, #52	; 0x34
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f107 0108 	add.w	r1, r7, #8
 80075e8:	4610      	mov	r0, r2
 80075ea:	4798      	blx	r3

    if (parseArguments(registry_->getFirstPlugin()))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	68da      	ldr	r2, [r3, #12]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	333c      	adds	r3, #60	; 0x3c
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4610      	mov	r0, r2
 80075fc:	4798      	blx	r3
 80075fe:	4603      	mov	r3, r0
 8007600:	4619      	mov	r1, r3
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fa3e 	bl	8007a84 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d003      	beq.n	8007616 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0x72>
        testResult = runAllTests();
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 f8ac 	bl	800776c <_ZN21CommandLineTestRunner11runAllTestsEv>
 8007614:	62f8      	str	r0, [r7, #44]	; 0x2c

    registry_->removePluginByName(DEF_PLUGIN_SET_POINTER);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68dd      	ldr	r5, [r3, #12]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	3344      	adds	r3, #68	; 0x44
 8007622:	681c      	ldr	r4, [r3, #0]
 8007624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007628:	490c      	ldr	r1, [pc, #48]	; (800765c <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 800762a:	4618      	mov	r0, r3
 800762c:	f003 ff75 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8007630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007634:	4619      	mov	r1, r3
 8007636:	4628      	mov	r0, r5
 8007638:	47a0      	blx	r4
 800763a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800763e:	4618      	mov	r0, r3
 8007640:	f004 fb23 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    return testResult;
 8007644:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8007646:	f107 0308 	add.w	r3, r7, #8
 800764a:	4618      	mov	r0, r3
 800764c:	f000 faaa 	bl	8007ba4 <_ZN16SetPointerPluginD1Ev>
    return testResult;
 8007650:	4623      	mov	r3, r4
}
 8007652:	4618      	mov	r0, r3
 8007654:	3730      	adds	r7, #48	; 0x30
 8007656:	46bd      	mov	sp, r7
 8007658:	bdb0      	pop	{r4, r5, r7, pc}
 800765a:	bf00      	nop
 800765c:	08022630 	.word	0x08022630

08007660 <_ZN21CommandLineTestRunner17initializeTestRunEv>:

void CommandLineTestRunner::initializeTestRun()
{
 8007660:	b5b0      	push	{r4, r5, r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
    registry_->setGroupFilters(arguments_->getGroupFilters());
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	68dd      	ldr	r5, [r3, #12]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	3330      	adds	r3, #48	; 0x30
 8007674:	681c      	ldr	r4, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	4618      	mov	r0, r3
 800767c:	f00c fce0 	bl	8014040 <_ZNK20CommandLineArguments15getGroupFiltersEv>
 8007680:	4603      	mov	r3, r0
 8007682:	4619      	mov	r1, r3
 8007684:	4628      	mov	r0, r5
 8007686:	47a0      	blx	r4
    registry_->setNameFilters(arguments_->getNameFilters());
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	68dd      	ldr	r5, [r3, #12]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	332c      	adds	r3, #44	; 0x2c
 8007694:	681c      	ldr	r4, [r3, #0]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	4618      	mov	r0, r3
 800769c:	f00c fcdc 	bl	8014058 <_ZNK20CommandLineArguments14getNameFiltersEv>
 80076a0:	4603      	mov	r3, r0
 80076a2:	4619      	mov	r1, r3
 80076a4:	4628      	mov	r0, r5
 80076a6:	47a0      	blx	r4

    if (arguments_->isVerbose()) output_->verbose(TestOutput::level_verbose);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	4618      	mov	r0, r3
 80076ae:	f00c fc2b 	bl	8013f08 <_ZNK20CommandLineArguments9isVerboseEv>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d009      	beq.n	80076cc <_ZN21CommandLineTestRunner17initializeTestRunEv+0x6c>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685a      	ldr	r2, [r3, #4]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	3320      	adds	r3, #32
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2101      	movs	r1, #1
 80076c8:	4610      	mov	r0, r2
 80076ca:	4798      	blx	r3
    if (arguments_->isVeryVerbose()) output_->verbose(TestOutput::level_veryVerbose);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f00c fc25 	bl	8013f20 <_ZNK20CommandLineArguments13isVeryVerboseEv>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d009      	beq.n	80076f0 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x90>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685a      	ldr	r2, [r3, #4]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	3320      	adds	r3, #32
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2102      	movs	r1, #2
 80076ec:	4610      	mov	r0, r2
 80076ee:	4798      	blx	r3
    if (arguments_->isColor()) output_->color();
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	4618      	mov	r0, r3
 80076f6:	f00c fc1f 	bl	8013f38 <_ZNK20CommandLineArguments7isColorEv>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d008      	beq.n	8007712 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xb2>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	685a      	ldr	r2, [r3, #4]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	3324      	adds	r3, #36	; 0x24
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4610      	mov	r0, r2
 8007710:	4798      	blx	r3
    if (arguments_->runTestsInSeperateProcess()) registry_->setRunTestsInSeperateProcess();
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	4618      	mov	r0, r3
 8007718:	f00c fc4a 	bl	8013fb0 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d008      	beq.n	8007734 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xd4>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	68da      	ldr	r2, [r3, #12]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	3360      	adds	r3, #96	; 0x60
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4610      	mov	r0, r2
 8007732:	4798      	blx	r3
    if (arguments_->isRunIgnored()) registry_->setRunIgnored();
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	4618      	mov	r0, r3
 800773a:	f00c fc2d 	bl	8013f98 <_ZNK20CommandLineArguments12isRunIgnoredEv>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d004      	beq.n	800774e <_ZN21CommandLineTestRunner17initializeTestRunEv+0xee>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	4618      	mov	r0, r3
 800774a:	f009 fa19 	bl	8010b80 <_ZN12TestRegistry13setRunIgnoredEv>
    if (arguments_->isCrashingOnFail()) UtestShell::setCrashOnFail();
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	4618      	mov	r0, r3
 8007754:	f00c fc50 	bl	8013ff8 <_ZNK20CommandLineArguments16isCrashingOnFailEv>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d001      	beq.n	8007762 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x102>
 800775e:	f00b fadb 	bl	8012d18 <_ZN10UtestShell14setCrashOnFailEv>
}
 8007762:	bf00      	nop
 8007764:	3708      	adds	r7, #8
 8007766:	46bd      	mov	sp, r7
 8007768:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800776c <_ZN21CommandLineTestRunner11runAllTestsEv>:

int CommandLineTestRunner::runAllTests()
{
 800776c:	b5b0      	push	{r4, r5, r7, lr}
 800776e:	b094      	sub	sp, #80	; 0x50
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
    initializeTestRun();
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f7ff ff73 	bl	8007660 <_ZN21CommandLineTestRunner17initializeTestRunEv>
    size_t loopCount = 0;
 800777a:	2300      	movs	r3, #0
 800777c:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t failedTestCount = 0;
 800777e:	2300      	movs	r3, #0
 8007780:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t failedExecutionCount = 0;
 8007782:	2300      	movs	r3, #0
 8007784:	647b      	str	r3, [r7, #68]	; 0x44
    size_t repeatCount = arguments_->getRepeatCount();
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	4618      	mov	r0, r3
 800778c:	f00c fc1c 	bl	8013fc8 <_ZNK20CommandLineArguments14getRepeatCountEv>
 8007790:	6438      	str	r0, [r7, #64]	; 0x40

    if (arguments_->isListingTestGroupNames())
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	4618      	mov	r0, r3
 8007798:	f00c fbda 	bl	8013f50 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d019      	beq.n	80077d6 <_ZN21CommandLineTestRunner11runAllTestsEv+0x6a>
    {
        TestResult tr(*output_);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	685a      	ldr	r2, [r3, #4]
 80077a6:	f107 0308 	add.w	r3, r7, #8
 80077aa:	4611      	mov	r1, r2
 80077ac:	4618      	mov	r0, r3
 80077ae:	f009 fbaf 	bl	8010f10 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupNames(tr);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	68da      	ldr	r2, [r3, #12]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	3320      	adds	r3, #32
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f107 0108 	add.w	r1, r7, #8
 80077c4:	4610      	mov	r0, r2
 80077c6:	4798      	blx	r3
        return 0;
 80077c8:	2400      	movs	r4, #0
        TestResult tr(*output_);
 80077ca:	f107 0308 	add.w	r3, r7, #8
 80077ce:	4618      	mov	r0, r3
 80077d0:	f009 fbd6 	bl	8010f80 <_ZN10TestResultD1Ev>
 80077d4:	e0e1      	b.n	800799a <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestGroupAndCaseNames())
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	4618      	mov	r0, r3
 80077dc:	f00c fbc4 	bl	8013f68 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d019      	beq.n	800781a <_ZN21CommandLineTestRunner11runAllTestsEv+0xae>
    {
        TestResult tr(*output_);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	685a      	ldr	r2, [r3, #4]
 80077ea:	f107 0308 	add.w	r3, r7, #8
 80077ee:	4611      	mov	r1, r2
 80077f0:	4618      	mov	r0, r3
 80077f2:	f009 fb8d 	bl	8010f10 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupAndCaseNames(tr);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	68da      	ldr	r2, [r3, #12]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	3324      	adds	r3, #36	; 0x24
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f107 0108 	add.w	r1, r7, #8
 8007808:	4610      	mov	r0, r2
 800780a:	4798      	blx	r3
        return 0;
 800780c:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800780e:	f107 0308 	add.w	r3, r7, #8
 8007812:	4618      	mov	r0, r3
 8007814:	f009 fbb4 	bl	8010f80 <_ZN10TestResultD1Ev>
 8007818:	e0bf      	b.n	800799a <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestLocations())
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	4618      	mov	r0, r3
 8007820:	f00c fbae 	bl	8013f80 <_ZNK20CommandLineArguments22isListingTestLocationsEv>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d019      	beq.n	800785e <_ZN21CommandLineTestRunner11runAllTestsEv+0xf2>
    {
        TestResult tr(*output_);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	685a      	ldr	r2, [r3, #4]
 800782e:	f107 0308 	add.w	r3, r7, #8
 8007832:	4611      	mov	r1, r2
 8007834:	4618      	mov	r0, r3
 8007836:	f009 fb6b 	bl	8010f10 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestLocations(tr);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	68da      	ldr	r2, [r3, #12]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3328      	adds	r3, #40	; 0x28
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f107 0108 	add.w	r1, r7, #8
 800784c:	4610      	mov	r0, r2
 800784e:	4798      	blx	r3
        return 0;
 8007850:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8007852:	f107 0308 	add.w	r3, r7, #8
 8007856:	4618      	mov	r0, r3
 8007858:	f009 fb92 	bl	8010f80 <_ZN10TestResultD1Ev>
 800785c:	e09d      	b.n	800799a <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isReversing())
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	4618      	mov	r0, r3
 8007864:	f00c fbbc 	bl	8013fe0 <_ZNK20CommandLineArguments11isReversingEv>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d008      	beq.n	8007880 <_ZN21CommandLineTestRunner11runAllTestsEv+0x114>
        registry_->reverseTests();
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68da      	ldr	r2, [r3, #12]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	331c      	adds	r3, #28
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4610      	mov	r0, r2
 800787e:	4798      	blx	r3

    if (arguments_->isShuffling())
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	4618      	mov	r0, r3
 8007886:	f00c fbc3 	bl	8014010 <_ZNK20CommandLineArguments11isShufflingEv>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d023      	beq.n	80078d8 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
    {
        output_->print("Test order shuffling enabled with seed: ");
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685a      	ldr	r2, [r3, #4]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	332c      	adds	r3, #44	; 0x2c
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4941      	ldr	r1, [pc, #260]	; (80079a4 <_ZN21CommandLineTestRunner11runAllTestsEv+0x238>)
 80078a0:	4610      	mov	r0, r2
 80078a2:	4798      	blx	r3
        output_->print(arguments_->getShuffleSeed());
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685d      	ldr	r5, [r3, #4]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	3334      	adds	r3, #52	; 0x34
 80078b0:	681c      	ldr	r4, [r3, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	4618      	mov	r0, r3
 80078b8:	f00c fbb6 	bl	8014028 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 80078bc:	4603      	mov	r3, r0
 80078be:	4619      	mov	r1, r3
 80078c0:	4628      	mov	r0, r5
 80078c2:	47a0      	blx	r4
        output_->print("\n");
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	685a      	ldr	r2, [r3, #4]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	332c      	adds	r3, #44	; 0x2c
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4935      	ldr	r1, [pc, #212]	; (80079a8 <_ZN21CommandLineTestRunner11runAllTestsEv+0x23c>)
 80078d4:	4610      	mov	r0, r2
 80078d6:	4798      	blx	r3
    }
    while (loopCount++ < repeatCount) {
 80078d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078da:	1c5a      	adds	r2, r3, #1
 80078dc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80078de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078e0:	429a      	cmp	r2, r3
 80078e2:	bf8c      	ite	hi
 80078e4:	2301      	movhi	r3, #1
 80078e6:	2300      	movls	r3, #0
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d04e      	beq.n	800798c <_ZN21CommandLineTestRunner11runAllTestsEv+0x220>

        if (arguments_->isShuffling())
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	4618      	mov	r0, r3
 80078f4:	f00c fb8c 	bl	8014010 <_ZNK20CommandLineArguments11isShufflingEv>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00f      	beq.n	800791e <_ZN21CommandLineTestRunner11runAllTestsEv+0x1b2>
            registry_->shuffleTests(arguments_->getShuffleSeed());
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	68dd      	ldr	r5, [r3, #12]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	3318      	adds	r3, #24
 800790a:	681c      	ldr	r4, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	4618      	mov	r0, r3
 8007912:	f00c fb89 	bl	8014028 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 8007916:	4603      	mov	r3, r0
 8007918:	4619      	mov	r1, r3
 800791a:	4628      	mov	r0, r5
 800791c:	47a0      	blx	r4

        output_->printTestRun(loopCount, repeatCount);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6858      	ldr	r0, [r3, #4]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	3340      	adds	r3, #64	; 0x40
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800792e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007930:	4798      	blx	r3
        TestResult tr(*output_);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	685a      	ldr	r2, [r3, #4]
 8007936:	f107 0308 	add.w	r3, r7, #8
 800793a:	4611      	mov	r1, r2
 800793c:	4618      	mov	r0, r3
 800793e:	f009 fae7 	bl	8010f10 <_ZN10TestResultC1ER10TestOutput>
        registry_->runAllTests(tr);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	68da      	ldr	r2, [r3, #12]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	3314      	adds	r3, #20
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f107 0108 	add.w	r1, r7, #8
 8007954:	4610      	mov	r0, r2
 8007956:	4798      	blx	r3
        failedTestCount += tr.getFailureCount();
 8007958:	f107 0308 	add.w	r3, r7, #8
 800795c:	4618      	mov	r0, r3
 800795e:	f7ff fcef 	bl	8007340 <_ZNK10TestResult15getFailureCountEv>
 8007962:	4602      	mov	r2, r0
 8007964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007966:	4413      	add	r3, r2
 8007968:	64bb      	str	r3, [r7, #72]	; 0x48
        if (tr.isFailure()) {
 800796a:	f107 0308 	add.w	r3, r7, #8
 800796e:	4618      	mov	r0, r3
 8007970:	f7ff fcf2 	bl	8007358 <_ZNK10TestResult9isFailureEv>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d002      	beq.n	8007980 <_ZN21CommandLineTestRunner11runAllTestsEv+0x214>
            failedExecutionCount++;
 800797a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800797c:	3301      	adds	r3, #1
 800797e:	647b      	str	r3, [r7, #68]	; 0x44
        TestResult tr(*output_);
 8007980:	f107 0308 	add.w	r3, r7, #8
 8007984:	4618      	mov	r0, r3
 8007986:	f009 fafb 	bl	8010f80 <_ZN10TestResultD1Ev>
    while (loopCount++ < repeatCount) {
 800798a:	e7a5      	b.n	80078d8 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
        }
    }
    return (int) (failedTestCount != 0 ? failedTestCount : failedExecutionCount);
 800798c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800798e:	2b00      	cmp	r3, #0
 8007990:	d001      	beq.n	8007996 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22a>
 8007992:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8007994:	e000      	b.n	8007998 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22c>
 8007996:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8007998:	bf00      	nop
 800799a:	4623      	mov	r3, r4
}
 800799c:	4618      	mov	r0, r3
 800799e:	3750      	adds	r7, #80	; 0x50
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bdb0      	pop	{r4, r5, r7, pc}
 80079a4:	08022644 	.word	0x08022644
 80079a8:	08022670 	.word	0x08022670

080079ac <_ZN21CommandLineTestRunner20createTeamCityOutputEv>:

TestOutput* CommandLineTestRunner::createTeamCityOutput()
{
 80079ac:	b590      	push	{r4, r7, lr}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
    return new TeamCityTestOutput;
 80079b4:	229d      	movs	r2, #157	; 0x9d
 80079b6:	4906      	ldr	r1, [pc, #24]	; (80079d0 <_ZN21CommandLineTestRunner20createTeamCityOutputEv+0x24>)
 80079b8:	201c      	movs	r0, #28
 80079ba:	f001 f9eb 	bl	8008d94 <_ZnwjPKci>
 80079be:	4604      	mov	r4, r0
 80079c0:	4620      	mov	r0, r4
 80079c2:	f005 f955 	bl	800cc70 <_ZN18TeamCityTestOutputC1Ev>
 80079c6:	4623      	mov	r3, r4
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd90      	pop	{r4, r7, pc}
 80079d0:	0802260c 	.word	0x0802260c

080079d4 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString>:

TestOutput* CommandLineTestRunner::createJUnitOutput(const SimpleString& packageName)
{
 80079d4:	b590      	push	{r4, r7, lr}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
    JUnitTestOutput* junitOutput = new JUnitTestOutput;
 80079de:	22a2      	movs	r2, #162	; 0xa2
 80079e0:	490a      	ldr	r1, [pc, #40]	; (8007a0c <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x38>)
 80079e2:	2014      	movs	r0, #20
 80079e4:	f001 f9d6 	bl	8008d94 <_ZnwjPKci>
 80079e8:	4604      	mov	r4, r0
 80079ea:	4620      	mov	r0, r4
 80079ec:	f000 f980 	bl	8007cf0 <_ZN15JUnitTestOutputC1Ev>
 80079f0:	60fc      	str	r4, [r7, #12]
    if (junitOutput != NULLPTR) {
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d003      	beq.n	8007a00 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x2c>
      junitOutput->setPackageName(packageName);
 80079f8:	6839      	ldr	r1, [r7, #0]
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	f000 fbb2 	bl	8008164 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>
    }
    return junitOutput;
 8007a00:	68fb      	ldr	r3, [r7, #12]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3714      	adds	r7, #20
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd90      	pop	{r4, r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	0802260c 	.word	0x0802260c

08007a10 <_ZN21CommandLineTestRunner19createConsoleOutputEv>:

TestOutput* CommandLineTestRunner::createConsoleOutput()
{
 8007a10:	b590      	push	{r4, r7, lr}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
    return new ConsoleTestOutput;
 8007a18:	22ab      	movs	r2, #171	; 0xab
 8007a1a:	4906      	ldr	r1, [pc, #24]	; (8007a34 <_ZN21CommandLineTestRunner19createConsoleOutputEv+0x24>)
 8007a1c:	2010      	movs	r0, #16
 8007a1e:	f001 f9b9 	bl	8008d94 <_ZnwjPKci>
 8007a22:	4604      	mov	r4, r0
 8007a24:	4620      	mov	r0, r4
 8007a26:	f7ff fcb3 	bl	8007390 <_ZN17ConsoleTestOutputC1Ev>
 8007a2a:	4623      	mov	r3, r4
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd90      	pop	{r4, r7, pc}
 8007a34:	0802260c 	.word	0x0802260c

08007a38 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_>:

TestOutput* CommandLineTestRunner::createCompositeOutput(TestOutput* outputOne, TestOutput* outputTwo)
{
 8007a38:	b590      	push	{r4, r7, lr}
 8007a3a:	b087      	sub	sp, #28
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	607a      	str	r2, [r7, #4]
  CompositeTestOutput* composite = new CompositeTestOutput;
 8007a44:	22b0      	movs	r2, #176	; 0xb0
 8007a46:	490e      	ldr	r1, [pc, #56]	; (8007a80 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_+0x48>)
 8007a48:	2018      	movs	r0, #24
 8007a4a:	f001 f9a3 	bl	8008d94 <_ZnwjPKci>
 8007a4e:	4604      	mov	r4, r0
 8007a50:	4620      	mov	r0, r4
 8007a52:	f007 ff83 	bl	800f95c <_ZN19CompositeTestOutputC1Ev>
 8007a56:	617c      	str	r4, [r7, #20]
  composite->setOutputOne(outputOne);
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	335c      	adds	r3, #92	; 0x5c
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68b9      	ldr	r1, [r7, #8]
 8007a62:	6978      	ldr	r0, [r7, #20]
 8007a64:	4798      	blx	r3
  composite->setOutputTwo(outputTwo);
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	3360      	adds	r3, #96	; 0x60
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	6879      	ldr	r1, [r7, #4]
 8007a70:	6978      	ldr	r0, [r7, #20]
 8007a72:	4798      	blx	r3
  return composite;
 8007a74:	697b      	ldr	r3, [r7, #20]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	371c      	adds	r7, #28
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd90      	pop	{r4, r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	0802260c 	.word	0x0802260c

08007a84 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>:

bool CommandLineTestRunner::parseArguments(TestPlugin* plugin)
{
 8007a84:	b5b0      	push	{r4, r5, r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  if (!arguments_->parse(plugin)) {
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	6839      	ldr	r1, [r7, #0]
 8007a94:	4618      	mov	r0, r3
 8007a96:	f00b fe4f 	bl	8013738 <_ZN20CommandLineArguments5parseEP10TestPlugin>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	f083 0301 	eor.w	r3, r3, #1
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d029      	beq.n	8007afa <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x76>
    output_ = createConsoleOutput();
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	3310      	adds	r3, #16
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	4798      	blx	r3
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	605a      	str	r2, [r3, #4]
    output_->print((arguments_->needHelp()) ? arguments_->help() : arguments_->usage());
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	685d      	ldr	r5, [r3, #4]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	332c      	adds	r3, #44	; 0x2c
 8007ac4:	681c      	ldr	r4, [r3, #0]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	4618      	mov	r0, r3
 8007acc:	f00c fa10 	bl	8013ef0 <_ZNK20CommandLineArguments8needHelpEv>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d006      	beq.n	8007ae4 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x60>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	4618      	mov	r0, r3
 8007adc:	f00c f9fa 	bl	8013ed4 <_ZNK20CommandLineArguments4helpEv>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	e005      	b.n	8007af0 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x6c>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f00c f9e5 	bl	8013eb8 <_ZNK20CommandLineArguments5usageEv>
 8007aee:	4603      	mov	r3, r0
 8007af0:	4619      	mov	r1, r3
 8007af2:	4628      	mov	r0, r5
 8007af4:	47a0      	blx	r4
    return false;
 8007af6:	2300      	movs	r3, #0
 8007af8:	e050      	b.n	8007b9c <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x118>
  }

  if (arguments_->isJUnitOutput()) {
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f00d f84c 	bl	8014b9c <_ZNK20CommandLineArguments13isJUnitOutputEv>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d02c      	beq.n	8007b64 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0xe0>
    output_= createJUnitOutput(arguments_->getPackageName());
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	330c      	adds	r3, #12
 8007b10:	681c      	ldr	r4, [r3, #0]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	4618      	mov	r0, r3
 8007b18:	f00d f864 	bl	8014be4 <_ZNK20CommandLineArguments14getPackageNameEv>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	4619      	mov	r1, r3
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	47a0      	blx	r4
 8007b24:	4602      	mov	r2, r0
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	605a      	str	r2, [r3, #4]
    if (arguments_->isVerbose())
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f00c f9ea 	bl	8013f08 <_ZNK20CommandLineArguments9isVerboseEv>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d02f      	beq.n	8007b9a <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
      output_ = createCompositeOutput(output_, createConsoleOutput());
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3314      	adds	r3, #20
 8007b40:	681c      	ldr	r4, [r3, #0]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	685d      	ldr	r5, [r3, #4]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	3310      	adds	r3, #16
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	4798      	blx	r3
 8007b52:	4603      	mov	r3, r0
 8007b54:	461a      	mov	r2, r3
 8007b56:	4629      	mov	r1, r5
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	47a0      	blx	r4
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	605a      	str	r2, [r3, #4]
 8007b62:	e01a      	b.n	8007b9a <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else if (arguments_->isTeamCityOutput()) {
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f00d f829 	bl	8014bc0 <_ZNK20CommandLineArguments16isTeamCityOutputEv>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d009      	beq.n	8007b88 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x104>
    output_ = createTeamCityOutput();
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	3308      	adds	r3, #8
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	4798      	blx	r3
 8007b80:	4602      	mov	r2, r0
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	605a      	str	r2, [r3, #4]
 8007b86:	e008      	b.n	8007b9a <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else
    output_ = createConsoleOutput();
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	3310      	adds	r3, #16
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	4798      	blx	r3
 8007b94:	4602      	mov	r2, r0
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	605a      	str	r2, [r3, #4]
  return true;
 8007b9a:	2301      	movs	r3, #1
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3708      	adds	r7, #8
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bdb0      	pop	{r4, r5, r7, pc}

08007ba4 <_ZN16SetPointerPluginD1Ev>:
//
///////////////////////////////////////////////////////////////////////////////

extern void CppUTestStore(void **location);

class SetPointerPlugin: public TestPlugin
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	4a05      	ldr	r2, [pc, #20]	; (8007bc4 <_ZN16SetPointerPluginD1Ev+0x20>)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	601a      	str	r2, [r3, #0]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f008 f9e7 	bl	800ff88 <_ZN10TestPluginD1Ev>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	08026760 	.word	0x08026760

08007bc8 <_ZN16SetPointerPluginD0Ev>:
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f7ff ffe7 	bl	8007ba4 <_ZN16SetPointerPluginD1Ev>
 8007bd6:	2114      	movs	r1, #20
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f001 f8ef 	bl	8008dbc <_ZdlPvj>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4618      	mov	r0, r3
 8007be2:	3708      	adds	r7, #8
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <_ZNK10TestResult13getCheckCountEv>:
    size_t getCheckCount() const
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
        return checkCount_;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	691b      	ldr	r3, [r3, #16]
    }
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <_ZN23JUnitTestCaseResultNodeC1Ev>:
#include "CppUTest/TestFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

struct JUnitTestCaseResultNode
{
    JUnitTestCaseResultNode() :
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
        execTime_(0), failure_(NULLPTR), ignored_(false), lineNumber_ (0), checkCount_ (0), next_(NULLPTR)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4910      	ldr	r1, [pc, #64]	; (8007c4c <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f003 fc84 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	609a      	str	r2, [r3, #8]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	60da      	str	r2, [r3, #12]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	741a      	strb	r2, [r3, #16]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	3314      	adds	r3, #20
 8007c28:	4908      	ldr	r1, [pc, #32]	; (8007c4c <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f003 fc75 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	61da      	str	r2, [r3, #28]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	621a      	str	r2, [r3, #32]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4618      	mov	r0, r3
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	08022674 	.word	0x08022674

08007c50 <_ZN20JUnitTestGroupResultC1Ev>:
    JUnitTestCaseResultNode* next_;
};

struct JUnitTestGroupResult
{
    JUnitTestGroupResult() :
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
        testCount_(0), failureCount_(0), totalCheckCount_(0), startTime_(0), groupExecTime_(0), head_(NULLPTR), tail_(NULLPTR)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	605a      	str	r2, [r3, #4]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	609a      	str	r2, [r3, #8]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	60da      	str	r2, [r3, #12]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	611a      	str	r2, [r3, #16]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	3314      	adds	r3, #20
 8007c7a:	4907      	ldr	r1, [pc, #28]	; (8007c98 <_ZN20JUnitTestGroupResultC1Ev+0x48>)
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f003 fc4c 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	61da      	str	r2, [r3, #28]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	621a      	str	r2, [r3, #32]
    {
    }
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4618      	mov	r0, r3
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	08022674 	.word	0x08022674

08007c9c <_ZN20JUnitTestGroupResultD1Ev>:
struct JUnitTestGroupResult
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	3314      	adds	r3, #20
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f003 ffee 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <_ZN19JUnitTestOutputImplC1Ev>:
    SimpleString group_;
    JUnitTestCaseResultNode* head_;
    JUnitTestCaseResultNode* tail_;
};

struct JUnitTestOutputImpl
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f7ff ffc4 	bl	8007c50 <_ZN20JUnitTestGroupResultC1Ev>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	3328      	adds	r3, #40	; 0x28
 8007ccc:	4907      	ldr	r1, [pc, #28]	; (8007cec <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f003 fc23 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	3330      	adds	r3, #48	; 0x30
 8007cd8:	4904      	ldr	r1, [pc, #16]	; (8007cec <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f003 fc1d 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3708      	adds	r7, #8
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	08022674 	.word	0x08022674

08007cf0 <_ZN15JUnitTestOutputC1Ev>:
    PlatformSpecificFile file_;
    SimpleString package_;
    SimpleString stdOutput_;
};

JUnitTestOutput::JUnitTestOutput() :
 8007cf0:	b590      	push	{r4, r7, lr}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
    impl_(new JUnitTestOutputImpl)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f007 f936 	bl	800ef6c <_ZN10TestOutputC1Ev>
 8007d00:	4a09      	ldr	r2, [pc, #36]	; (8007d28 <_ZN15JUnitTestOutputC1Ev+0x38>)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	601a      	str	r2, [r3, #0]
 8007d06:	224d      	movs	r2, #77	; 0x4d
 8007d08:	4908      	ldr	r1, [pc, #32]	; (8007d2c <_ZN15JUnitTestOutputC1Ev+0x3c>)
 8007d0a:	2038      	movs	r0, #56	; 0x38
 8007d0c:	f001 f842 	bl	8008d94 <_ZnwjPKci>
 8007d10:	4604      	mov	r4, r0
 8007d12:	4620      	mov	r0, r4
 8007d14:	f7ff ffd0 	bl	8007cb8 <_ZN19JUnitTestOutputImplC1Ev>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	611c      	str	r4, [r3, #16]
{
}
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4618      	mov	r0, r3
 8007d20:	370c      	adds	r7, #12
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd90      	pop	{r4, r7, pc}
 8007d26:	bf00      	nop
 8007d28:	08026000 	.word	0x08026000
 8007d2c:	08022678 	.word	0x08022678

08007d30 <_ZN19JUnitTestOutputImplD1Ev>:
struct JUnitTestOutputImpl
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	3330      	adds	r3, #48	; 0x30
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f003 ffa4 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	3328      	adds	r3, #40	; 0x28
 8007d46:	4618      	mov	r0, r3
 8007d48:	f003 ff9f 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7ff ffa4 	bl	8007c9c <_ZN20JUnitTestGroupResultD1Ev>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4618      	mov	r0, r3
 8007d58:	3708      	adds	r7, #8
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
	...

08007d60 <_ZN15JUnitTestOutputD1Ev>:

JUnitTestOutput::~JUnitTestOutput()
 8007d60:	b590      	push	{r4, r7, lr}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	4a0c      	ldr	r2, [pc, #48]	; (8007d9c <_ZN15JUnitTestOutputD1Ev+0x3c>)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	601a      	str	r2, [r3, #0]
{
    resetTestGroupResult();
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f838 	bl	8007de4 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
    delete impl_;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	691c      	ldr	r4, [r3, #16]
 8007d78:	2c00      	cmp	r4, #0
 8007d7a:	d006      	beq.n	8007d8a <_ZN15JUnitTestOutputD1Ev+0x2a>
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	f7ff ffd7 	bl	8007d30 <_ZN19JUnitTestOutputImplD1Ev>
 8007d82:	2138      	movs	r1, #56	; 0x38
 8007d84:	4620      	mov	r0, r4
 8007d86:	f001 f819 	bl	8008dbc <_ZdlPvj>
JUnitTestOutput::~JUnitTestOutput()
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f007 f90b 	bl	800efa8 <_ZN10TestOutputD1Ev>
}
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4618      	mov	r0, r3
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd90      	pop	{r4, r7, pc}
 8007d9c:	08026000 	.word	0x08026000

08007da0 <_ZN15JUnitTestOutputD0Ev>:
JUnitTestOutput::~JUnitTestOutput()
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
}
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f7ff ffd9 	bl	8007d60 <_ZN15JUnitTestOutputD1Ev>
 8007dae:	2114      	movs	r1, #20
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f001 f803 	bl	8008dbc <_ZdlPvj>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4618      	mov	r0, r3
 8007dba:	3708      	adds	r7, #8
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <_ZN23JUnitTestCaseResultNodeD1Ev>:
struct JUnitTestCaseResultNode
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	3314      	adds	r3, #20
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f003 ff5c 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f003 ff58 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3708      	adds	r7, #8
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <_ZN15JUnitTestOutput20resetTestGroupResultEv>:

void JUnitTestOutput::resetTestGroupResult()
{
 8007de4:	b590      	push	{r4, r7, lr}
 8007de6:	b087      	sub	sp, #28
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
    impl_->results_.testCount_ = 0;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	2200      	movs	r2, #0
 8007df2:	601a      	str	r2, [r3, #0]
    impl_->results_.failureCount_ = 0;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	691b      	ldr	r3, [r3, #16]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	605a      	str	r2, [r3, #4]
    impl_->results_.group_ = "";
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	f103 0414 	add.w	r4, r3, #20
 8007e04:	f107 0308 	add.w	r3, r7, #8
 8007e08:	491d      	ldr	r1, [pc, #116]	; (8007e80 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x9c>)
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f003 fb85 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8007e10:	f107 0308 	add.w	r3, r7, #8
 8007e14:	4619      	mov	r1, r3
 8007e16:	4620      	mov	r0, r4
 8007e18:	f003 fbeb 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 8007e1c:	f107 0308 	add.w	r3, r7, #8
 8007e20:	4618      	mov	r0, r3
 8007e22:	f003 ff32 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	69db      	ldr	r3, [r3, #28]
 8007e2c:	617b      	str	r3, [r7, #20]
    while (cur) {
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d018      	beq.n	8007e66 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x82>
        JUnitTestCaseResultNode* tmp = cur->next_;
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e38:	613b      	str	r3, [r7, #16]
        delete cur->failure_;
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d004      	beq.n	8007e4c <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x68>
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	3204      	adds	r2, #4
 8007e46:	6812      	ldr	r2, [r2, #0]
 8007e48:	4618      	mov	r0, r3
 8007e4a:	4790      	blx	r2
        delete cur;
 8007e4c:	697c      	ldr	r4, [r7, #20]
 8007e4e:	2c00      	cmp	r4, #0
 8007e50:	d006      	beq.n	8007e60 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x7c>
 8007e52:	4620      	mov	r0, r4
 8007e54:	f7ff ffb4 	bl	8007dc0 <_ZN23JUnitTestCaseResultNodeD1Ev>
 8007e58:	2128      	movs	r1, #40	; 0x28
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	f000 ffae 	bl	8008dbc <_ZdlPvj>
        cur = tmp;
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	617b      	str	r3, [r7, #20]
    while (cur) {
 8007e64:	e7e3      	b.n	8007e2e <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x4a>
    }
    impl_->results_.head_ = NULLPTR;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	61da      	str	r2, [r3, #28]
    impl_->results_.tail_ = NULLPTR;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	2200      	movs	r2, #0
 8007e74:	621a      	str	r2, [r3, #32]
}
 8007e76:	bf00      	nop
 8007e78:	371c      	adds	r7, #28
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd90      	pop	{r4, r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	08022674 	.word	0x08022674

08007e84 <_ZN15JUnitTestOutput17printTestsStartedEv>:

void JUnitTestOutput::printTestsStarted()
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <_ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
}
 8007ea2:	bf00      	nop
 8007ea4:	370c      	adds	r7, #12
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <_ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult>:

void JUnitTestOutput::printCurrentTestEnded(const TestResult& result)
{
 8007eae:	b590      	push	{r4, r7, lr}
 8007eb0:	b083      	sub	sp, #12
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
 8007eb6:	6039      	str	r1, [r7, #0]
    impl_->results_.tail_->execTime_ = result.getCurrentTestTotalExecutionTime();
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	6a1c      	ldr	r4, [r3, #32]
 8007ebe:	6838      	ldr	r0, [r7, #0]
 8007ec0:	f009 f9c6 	bl	8011250 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	60a3      	str	r3, [r4, #8]
    impl_->results_.tail_->checkCount_ = result.getCheckCount();
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	691b      	ldr	r3, [r3, #16]
 8007ecc:	6a1c      	ldr	r4, [r3, #32]
 8007ece:	6838      	ldr	r0, [r7, #0]
 8007ed0:	f7ff fe8a 	bl	8007be8 <_ZNK10TestResult13getCheckCountEv>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	6223      	str	r3, [r4, #32]
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd90      	pop	{r4, r7, pc}

08007ee0 <_ZN15JUnitTestOutput15printTestsEndedERK10TestResult>:

void JUnitTestOutput::printTestsEnded(const TestResult& /*result*/)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
}
 8007eea:	bf00      	nop
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <_ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult>:

void JUnitTestOutput::printCurrentGroupEnded(const TestResult& result)
{
 8007ef6:	b590      	push	{r4, r7, lr}
 8007ef8:	b083      	sub	sp, #12
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
 8007efe:	6039      	str	r1, [r7, #0]
    impl_->results_.groupExecTime_ = result.getCurrentGroupTotalExecutionTime();
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	691c      	ldr	r4, [r3, #16]
 8007f04:	6838      	ldr	r0, [r7, #0]
 8007f06:	f009 f9af 	bl	8011268 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	6123      	str	r3, [r4, #16]
    writeTestGroupToFile();
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	3364      	adds	r3, #100	; 0x64
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	4798      	blx	r3
    resetTestGroupResult();
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7ff ff62 	bl	8007de4 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
}
 8007f20:	bf00      	nop
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd90      	pop	{r4, r7, pc}

08007f28 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8007f28:	b590      	push	{r4, r7, lr}
 8007f2a:	b089      	sub	sp, #36	; 0x24
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
    impl_->results_.testCount_++;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	3201      	adds	r2, #1
 8007f3a:	601a      	str	r2, [r3, #0]
    impl_->results_.group_ = test.getGroup();
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	f103 0414 	add.w	r4, r3, #20
 8007f44:	f107 0308 	add.w	r3, r7, #8
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f009 fcef 	bl	801192e <_ZNK10UtestShell8getGroupEv>
 8007f50:	f107 0308 	add.w	r3, r7, #8
 8007f54:	4619      	mov	r1, r3
 8007f56:	4620      	mov	r0, r4
 8007f58:	f003 fb4b 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 8007f5c:	f107 0308 	add.w	r3, r7, #8
 8007f60:	4618      	mov	r0, r3
 8007f62:	f003 fe92 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    impl_->results_.startTime_ = (size_t) GetPlatformSpecificTimeInMillis();
 8007f66:	4b3c      	ldr	r3, [pc, #240]	; (8008058 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x130>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4798      	blx	r3
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	60da      	str	r2, [r3, #12]

    if (impl_->results_.tail_ == NULLPTR) {
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	6a1b      	ldr	r3, [r3, #32]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d110      	bne.n	8007fa0 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x78>
        impl_->results_.head_ = impl_->results_.tail_
                = new JUnitTestCaseResultNode;
 8007f7e:	2288      	movs	r2, #136	; 0x88
 8007f80:	4936      	ldr	r1, [pc, #216]	; (800805c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8007f82:	2028      	movs	r0, #40	; 0x28
 8007f84:	f000 ff06 	bl	8008d94 <_ZnwjPKci>
 8007f88:	4604      	mov	r4, r0
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	f7ff fe38 	bl	8007c00 <_ZN23JUnitTestCaseResultNodeC1Ev>
        impl_->results_.head_ = impl_->results_.tail_
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	691b      	ldr	r3, [r3, #16]
                = new JUnitTestCaseResultNode;
 8007f94:	621c      	str	r4, [r3, #32]
        impl_->results_.head_ = impl_->results_.tail_
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	6912      	ldr	r2, [r2, #16]
 8007f9a:	6a1b      	ldr	r3, [r3, #32]
 8007f9c:	61d3      	str	r3, [r2, #28]
 8007f9e:	e013      	b.n	8007fc8 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0xa0>
    }
    else {
        impl_->results_.tail_->next_ = new JUnitTestCaseResultNode;
 8007fa0:	228b      	movs	r2, #139	; 0x8b
 8007fa2:	492e      	ldr	r1, [pc, #184]	; (800805c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8007fa4:	2028      	movs	r0, #40	; 0x28
 8007fa6:	f000 fef5 	bl	8008d94 <_ZnwjPKci>
 8007faa:	4604      	mov	r4, r0
 8007fac:	4620      	mov	r0, r4
 8007fae:	f7ff fe27 	bl	8007c00 <_ZN23JUnitTestCaseResultNodeC1Ev>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	6a1b      	ldr	r3, [r3, #32]
 8007fb8:	625c      	str	r4, [r3, #36]	; 0x24
        impl_->results_.tail_ = impl_->results_.tail_->next_;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	6a1a      	ldr	r2, [r3, #32]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	691b      	ldr	r3, [r3, #16]
 8007fc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007fc6:	621a      	str	r2, [r3, #32]
    }
    impl_->results_.tail_->name_ = test.getName();
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	6a1b      	ldr	r3, [r3, #32]
 8007fce:	461c      	mov	r4, r3
 8007fd0:	f107 0310 	add.w	r3, r7, #16
 8007fd4:	6839      	ldr	r1, [r7, #0]
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f009 fc9a 	bl	8011910 <_ZNK10UtestShell7getNameEv>
 8007fdc:	f107 0310 	add.w	r3, r7, #16
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	f003 fb05 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 8007fe8:	f107 0310 	add.w	r3, r7, #16
 8007fec:	4618      	mov	r0, r3
 8007fee:	f003 fe4c 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->file_ = test.getFile();
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	6a1b      	ldr	r3, [r3, #32]
 8007ff8:	f103 0414 	add.w	r4, r3, #20
 8007ffc:	f107 0318 	add.w	r3, r7, #24
 8008000:	6839      	ldr	r1, [r7, #0]
 8008002:	4618      	mov	r0, r3
 8008004:	f009 fd55 	bl	8011ab2 <_ZNK10UtestShell7getFileEv>
 8008008:	f107 0318 	add.w	r3, r7, #24
 800800c:	4619      	mov	r1, r3
 800800e:	4620      	mov	r0, r4
 8008010:	f003 faef 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 8008014:	f107 0318 	add.w	r3, r7, #24
 8008018:	4618      	mov	r0, r3
 800801a:	f003 fe36 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->lineNumber_ = test.getLineNumber();
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	6a1c      	ldr	r4, [r3, #32]
 8008024:	6838      	ldr	r0, [r7, #0]
 8008026:	f009 fd53 	bl	8011ad0 <_ZNK10UtestShell13getLineNumberEv>
 800802a:	4603      	mov	r3, r0
 800802c:	61e3      	str	r3, [r4, #28]
    if (!test.willRun()) {
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	3318      	adds	r3, #24
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	6838      	ldr	r0, [r7, #0]
 8008038:	4798      	blx	r3
 800803a:	4603      	mov	r3, r0
 800803c:	f083 0301 	eor.w	r3, r3, #1
 8008040:	b2db      	uxtb	r3, r3
 8008042:	2b00      	cmp	r3, #0
 8008044:	d004      	beq.n	8008050 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x128>
        impl_->results_.tail_->ignored_ = true;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	6a1b      	ldr	r3, [r3, #32]
 800804c:	2201      	movs	r2, #1
 800804e:	741a      	strb	r2, [r3, #16]
    }
}
 8008050:	bf00      	nop
 8008052:	3724      	adds	r7, #36	; 0x24
 8008054:	46bd      	mov	sp, r7
 8008056:	bd90      	pop	{r4, r7, pc}
 8008058:	200000a8 	.word	0x200000a8
 800805c:	08022678 	.word	0x08022678

08008060 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::createFileName(const SimpleString& group)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b08a      	sub	sp, #40	; 0x28
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]
    SimpleString fileName = "cpputest_";
 800806c:	f107 0310 	add.w	r3, r7, #16
 8008070:	4928      	ldr	r1, [pc, #160]	; (8008114 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb4>)
 8008072:	4618      	mov	r0, r3
 8008074:	f003 fa51 	bl	800b51a <_ZN12SimpleStringC1EPKc>
    if (!impl_->package_.isEmpty()) {
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	3328      	adds	r3, #40	; 0x28
 800807e:	4618      	mov	r0, r3
 8008080:	f003 fdf2 	bl	800bc68 <_ZNK12SimpleString7isEmptyEv>
 8008084:	4603      	mov	r3, r0
 8008086:	f083 0301 	eor.w	r3, r3, #1
 800808a:	b2db      	uxtb	r3, r3
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00f      	beq.n	80080b0 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0x50>
        fileName += impl_->package_;
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8008098:	f107 0310 	add.w	r3, r7, #16
 800809c:	4611      	mov	r1, r2
 800809e:	4618      	mov	r0, r3
 80080a0:	f003 fe70 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
        fileName += "_";
 80080a4:	f107 0310 	add.w	r3, r7, #16
 80080a8:	491b      	ldr	r1, [pc, #108]	; (8008118 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb8>)
 80080aa:	4618      	mov	r0, r3
 80080ac:	f003 fe7c 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    }
    fileName += group;
 80080b0:	f107 0310 	add.w	r3, r7, #16
 80080b4:	6879      	ldr	r1, [r7, #4]
 80080b6:	4618      	mov	r0, r3
 80080b8:	f003 fe64 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
    return encodeFileName(fileName) + ".xml";
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	3384      	adds	r3, #132	; 0x84
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f107 0018 	add.w	r0, r7, #24
 80080c8:	f107 0210 	add.w	r2, r7, #16
 80080cc:	68b9      	ldr	r1, [r7, #8]
 80080ce:	4798      	blx	r3
 80080d0:	f107 0320 	add.w	r3, r7, #32
 80080d4:	4911      	ldr	r1, [pc, #68]	; (800811c <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xbc>)
 80080d6:	4618      	mov	r0, r3
 80080d8:	f003 fa1f 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f107 0220 	add.w	r2, r7, #32
 80080e2:	f107 0118 	add.w	r1, r7, #24
 80080e6:	4618      	mov	r0, r3
 80080e8:	f003 fe31 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 80080ec:	f107 0320 	add.w	r3, r7, #32
 80080f0:	4618      	mov	r0, r3
 80080f2:	f003 fdca 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 80080f6:	f107 0318 	add.w	r3, r7, #24
 80080fa:	4618      	mov	r0, r3
 80080fc:	f003 fdc5 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    SimpleString fileName = "cpputest_";
 8008100:	f107 0310 	add.w	r3, r7, #16
 8008104:	4618      	mov	r0, r3
 8008106:	f003 fdc0 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    return encodeFileName(fileName) + ".xml";
 800810a:	bf00      	nop
}
 800810c:	68f8      	ldr	r0, [r7, #12]
 800810e:	3728      	adds	r7, #40	; 0x28
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}
 8008114:	08022694 	.word	0x08022694
 8008118:	080226a0 	.word	0x080226a0
 800811c:	080226a4 	.word	0x080226a4

08008120 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::encodeFileName(const SimpleString& fileName)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	607a      	str	r2, [r7, #4]
    // special character list based on: https://en.wikipedia.org/wiki/Filename
    static const char* const forbiddenCharacters = "/\\?%*:|\"<>";

    SimpleString result = fileName;
 800812c:	6879      	ldr	r1, [r7, #4]
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f003 fa47 	bl	800b5c2 <_ZN12SimpleStringC1ERKS_>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 8008134:	4b0a      	ldr	r3, [pc, #40]	; (8008160 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x40>)
 8008136:	617b      	str	r3, [r7, #20]
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00a      	beq.n	8008156 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x36>
        result.replace(*sym, '_');
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	225f      	movs	r2, #95	; 0x5f
 8008146:	4619      	mov	r1, r3
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f003 fbcc 	bl	800b8e6 <_ZN12SimpleString7replaceEcc>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	3301      	adds	r3, #1
 8008152:	617b      	str	r3, [r7, #20]
 8008154:	e7f0      	b.n	8008138 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x18>
    }
    return result;
 8008156:	bf00      	nop
}
 8008158:	68f8      	ldr	r0, [r7, #12]
 800815a:	3718      	adds	r7, #24
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	080226ac 	.word	0x080226ac

08008164 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>:

void JUnitTestOutput::setPackageName(const SimpleString& package)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
    if (impl_ != NULLPTR) {
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d006      	beq.n	8008184 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString+0x20>
        impl_->package_ = package;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	3328      	adds	r3, #40	; 0x28
 800817c:	6839      	ldr	r1, [r7, #0]
 800817e:	4618      	mov	r0, r3
 8008180:	f003 fa37 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
    }
}
 8008184:	bf00      	nop
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <_ZN15JUnitTestOutput14writeXmlHeaderEv>:

void JUnitTestOutput::writeXmlHeader()
{
 800818c:	b590      	push	{r4, r7, lr}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
    writeToFile("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	3368      	adds	r3, #104	; 0x68
 800819a:	681c      	ldr	r4, [r3, #0]
 800819c:	f107 0308 	add.w	r3, r7, #8
 80081a0:	4908      	ldr	r1, [pc, #32]	; (80081c4 <_ZN15JUnitTestOutput14writeXmlHeaderEv+0x38>)
 80081a2:	4618      	mov	r0, r3
 80081a4:	f003 f9b9 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80081a8:	f107 0308 	add.w	r3, r7, #8
 80081ac:	4619      	mov	r1, r3
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	47a0      	blx	r4
 80081b2:	f107 0308 	add.w	r3, r7, #8
 80081b6:	4618      	mov	r0, r3
 80081b8:	f003 fd67 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 80081bc:	bf00      	nop
 80081be:	3714      	adds	r7, #20
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd90      	pop	{r4, r7, pc}
 80081c4:	080226b8 	.word	0x080226b8

080081c8 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv>:

void JUnitTestOutput::writeTestSuiteSummary()
{
 80081c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081cc:	b08a      	sub	sp, #40	; 0x28
 80081ce:	af04      	add	r7, sp, #16
 80081d0:	6078      	str	r0, [r7, #4]
    SimpleString
            buf =
                    StringFromFormat(
                            "<testsuite errors=\"0\" failures=\"%d\" hostname=\"localhost\" name=\"%s\" tests=\"%d\" time=\"%d.%03d\" timestamp=\"%s\">\n",
                            (int)impl_->results_.failureCount_,
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	685b      	ldr	r3, [r3, #4]
                            impl_->results_.group_.asCharString(),
                            (int) impl_->results_.testCount_,
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
                            GetPlatformSpecificTimeString());
 80081d8:	4698      	mov	r8, r3
                            impl_->results_.group_.asCharString(),
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	691b      	ldr	r3, [r3, #16]
                            GetPlatformSpecificTimeString());
 80081de:	3314      	adds	r3, #20
 80081e0:	4618      	mov	r0, r3
 80081e2:	f003 fd25 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 80081e6:	4604      	mov	r4, r0
                            (int) impl_->results_.testCount_,
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	681b      	ldr	r3, [r3, #0]
                            GetPlatformSpecificTimeString());
 80081ee:	461d      	mov	r5, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	4a23      	ldr	r2, [pc, #140]	; (8008284 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 80081f8:	fba2 2303 	umull	r2, r3, r2, r3
 80081fc:	099b      	lsrs	r3, r3, #6
                            GetPlatformSpecificTimeString());
 80081fe:	461e      	mov	r6, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	691b      	ldr	r3, [r3, #16]
 8008204:	691a      	ldr	r2, [r3, #16]
 8008206:	4b1f      	ldr	r3, [pc, #124]	; (8008284 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8008208:	fba3 1302 	umull	r1, r3, r3, r2
 800820c:	099b      	lsrs	r3, r3, #6
 800820e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008212:	fb01 f303 	mul.w	r3, r1, r3
 8008216:	1ad3      	subs	r3, r2, r3
                            GetPlatformSpecificTimeString());
 8008218:	603b      	str	r3, [r7, #0]
 800821a:	4b1b      	ldr	r3, [pc, #108]	; (8008288 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc0>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4798      	blx	r3
 8008220:	4603      	mov	r3, r0
 8008222:	f107 0008 	add.w	r0, r7, #8
 8008226:	9303      	str	r3, [sp, #12]
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	9302      	str	r3, [sp, #8]
 800822c:	9601      	str	r6, [sp, #4]
 800822e:	9500      	str	r5, [sp, #0]
 8008230:	4623      	mov	r3, r4
 8008232:	4642      	mov	r2, r8
 8008234:	4915      	ldr	r1, [pc, #84]	; (800828c <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc4>)
 8008236:	f004 fa2f 	bl	800c698 <_Z16StringFromFormatPKcz>
    writeToFile(buf.asCharString());
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3368      	adds	r3, #104	; 0x68
 8008240:	681c      	ldr	r4, [r3, #0]
 8008242:	f107 0308 	add.w	r3, r7, #8
 8008246:	4618      	mov	r0, r3
 8008248:	f003 fcf2 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800824c:	4602      	mov	r2, r0
 800824e:	f107 0310 	add.w	r3, r7, #16
 8008252:	4611      	mov	r1, r2
 8008254:	4618      	mov	r0, r3
 8008256:	f003 f960 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800825a:	f107 0310 	add.w	r3, r7, #16
 800825e:	4619      	mov	r1, r3
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	47a0      	blx	r4
 8008264:	f107 0310 	add.w	r3, r7, #16
 8008268:	4618      	mov	r0, r3
 800826a:	f003 fd0e 	bl	800bc8a <_ZN12SimpleStringD1Ev>
                            GetPlatformSpecificTimeString());
 800826e:	f107 0308 	add.w	r3, r7, #8
 8008272:	4618      	mov	r0, r3
 8008274:	f003 fd09 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 8008278:	bf00      	nop
 800827a:	3718      	adds	r7, #24
 800827c:	46bd      	mov	sp, r7
 800827e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008282:	bf00      	nop
 8008284:	10624dd3 	.word	0x10624dd3
 8008288:	200000ac 	.word	0x200000ac
 800828c:	080226e4 	.word	0x080226e4

08008290 <_ZN15JUnitTestOutput15writePropertiesEv>:

void JUnitTestOutput::writeProperties()
{
 8008290:	b590      	push	{r4, r7, lr}
 8008292:	b087      	sub	sp, #28
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
    writeToFile("<properties>\n");
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	3368      	adds	r3, #104	; 0x68
 800829e:	681c      	ldr	r4, [r3, #0]
 80082a0:	f107 0308 	add.w	r3, r7, #8
 80082a4:	4912      	ldr	r1, [pc, #72]	; (80082f0 <_ZN15JUnitTestOutput15writePropertiesEv+0x60>)
 80082a6:	4618      	mov	r0, r3
 80082a8:	f003 f937 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80082ac:	f107 0308 	add.w	r3, r7, #8
 80082b0:	4619      	mov	r1, r3
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	47a0      	blx	r4
 80082b6:	f107 0308 	add.w	r3, r7, #8
 80082ba:	4618      	mov	r0, r3
 80082bc:	f003 fce5 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    writeToFile("</properties>\n");
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	3368      	adds	r3, #104	; 0x68
 80082c6:	681c      	ldr	r4, [r3, #0]
 80082c8:	f107 0310 	add.w	r3, r7, #16
 80082cc:	4909      	ldr	r1, [pc, #36]	; (80082f4 <_ZN15JUnitTestOutput15writePropertiesEv+0x64>)
 80082ce:	4618      	mov	r0, r3
 80082d0:	f003 f923 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80082d4:	f107 0310 	add.w	r3, r7, #16
 80082d8:	4619      	mov	r1, r3
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	47a0      	blx	r4
 80082de:	f107 0310 	add.w	r3, r7, #16
 80082e2:	4618      	mov	r0, r3
 80082e4:	f003 fcd1 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 80082e8:	bf00      	nop
 80082ea:	371c      	adds	r7, #28
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd90      	pop	{r4, r7, pc}
 80082f0:	08022754 	.word	0x08022754
 80082f4:	08022764 	.word	0x08022764

080082f8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString>:

SimpleString JUnitTestOutput::encodeXmlText(const SimpleString& textbody)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	607a      	str	r2, [r7, #4]
    SimpleString buf = textbody.asCharString();
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f003 fc93 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800830a:	4603      	mov	r3, r0
 800830c:	4619      	mov	r1, r3
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	f003 f903 	bl	800b51a <_ZN12SimpleStringC1EPKc>
    buf.replace("&", "&amp;");
 8008314:	4a0e      	ldr	r2, [pc, #56]	; (8008350 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x58>)
 8008316:	490f      	ldr	r1, [pc, #60]	; (8008354 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x5c>)
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f003 fb13 	bl	800b944 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\"", "&quot;");
 800831e:	4a0e      	ldr	r2, [pc, #56]	; (8008358 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x60>)
 8008320:	490e      	ldr	r1, [pc, #56]	; (800835c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x64>)
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f003 fb0e 	bl	800b944 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("<", "&lt;");
 8008328:	4a0d      	ldr	r2, [pc, #52]	; (8008360 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x68>)
 800832a:	490e      	ldr	r1, [pc, #56]	; (8008364 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x6c>)
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f003 fb09 	bl	800b944 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace(">", "&gt;");
 8008332:	4a0d      	ldr	r2, [pc, #52]	; (8008368 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x70>)
 8008334:	490d      	ldr	r1, [pc, #52]	; (800836c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x74>)
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f003 fb04 	bl	800b944 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\n", "{newline}");
 800833c:	4a0c      	ldr	r2, [pc, #48]	; (8008370 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x78>)
 800833e:	490d      	ldr	r1, [pc, #52]	; (8008374 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x7c>)
 8008340:	68f8      	ldr	r0, [r7, #12]
 8008342:	f003 faff 	bl	800b944 <_ZN12SimpleString7replaceEPKcS1_>
    return buf;
 8008346:	bf00      	nop
}
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}
 8008350:	08022774 	.word	0x08022774
 8008354:	0802277c 	.word	0x0802277c
 8008358:	08022780 	.word	0x08022780
 800835c:	08022788 	.word	0x08022788
 8008360:	0802278c 	.word	0x0802278c
 8008364:	08022794 	.word	0x08022794
 8008368:	08022798 	.word	0x08022798
 800836c:	080227a0 	.word	0x080227a0
 8008370:	080227a4 	.word	0x080227a4
 8008374:	080227b0 	.word	0x080227b0

08008378 <_ZN15JUnitTestOutput14writeTestCasesEv>:

void JUnitTestOutput::writeTestCases()
{
 8008378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800837c:	b096      	sub	sp, #88	; 0x58
 800837e:	af08      	add	r7, sp, #32
 8008380:	60f8      	str	r0, [r7, #12]
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	69db      	ldr	r3, [r3, #28]
 8008388:	637b      	str	r3, [r7, #52]	; 0x34

    while (cur) {
 800838a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800838c:	2b00      	cmp	r3, #0
 800838e:	f000 80b2 	beq.w	80084f6 <_ZN15JUnitTestOutput14writeTestCasesEv+0x17e>
        SimpleString buf = StringFromFormat(
                "<testcase classname=\"%s%s%s\" name=\"%s\" assertions=\"%d\" time=\"%d.%03d\" file=\"%s\" line=\"%d\">\n",
                impl_->package_.asCharString(),
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	691b      	ldr	r3, [r3, #16]
                impl_->results_.group_.asCharString(),
                cur->name_.asCharString(),
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
                cur->file_.asCharString(),
                (int) cur->lineNumber_);
 8008396:	3328      	adds	r3, #40	; 0x28
 8008398:	4618      	mov	r0, r3
 800839a:	f003 fc49 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800839e:	4680      	mov	r8, r0
                impl_->package_.isEmpty() ? "" : ".",
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	3328      	adds	r3, #40	; 0x28
 80083a6:	4618      	mov	r0, r3
 80083a8:	f003 fc5e 	bl	800bc68 <_ZNK12SimpleString7isEmptyEv>
 80083ac:	4603      	mov	r3, r0
                (int) cur->lineNumber_);
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d001      	beq.n	80083b6 <_ZN15JUnitTestOutput14writeTestCasesEv+0x3e>
 80083b2:	4c53      	ldr	r4, [pc, #332]	; (8008500 <_ZN15JUnitTestOutput14writeTestCasesEv+0x188>)
 80083b4:	e000      	b.n	80083b8 <_ZN15JUnitTestOutput14writeTestCasesEv+0x40>
 80083b6:	4c53      	ldr	r4, [pc, #332]	; (8008504 <_ZN15JUnitTestOutput14writeTestCasesEv+0x18c>)
                impl_->results_.group_.asCharString(),
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	691b      	ldr	r3, [r3, #16]
                (int) cur->lineNumber_);
 80083bc:	3314      	adds	r3, #20
 80083be:	4618      	mov	r0, r3
 80083c0:	f003 fc36 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 80083c4:	4605      	mov	r5, r0
 80083c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083c8:	4618      	mov	r0, r3
 80083ca:	f003 fc31 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 80083ce:	4606      	mov	r6, r0
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
 80083d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083d2:	6a1a      	ldr	r2, [r3, #32]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 80083dc:	60bb      	str	r3, [r7, #8]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 80083de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	4a49      	ldr	r2, [pc, #292]	; (8008508 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 80083e4:	fba2 2303 	umull	r2, r3, r2, r3
 80083e8:	099b      	lsrs	r3, r3, #6
                (int) cur->lineNumber_);
 80083ea:	607b      	str	r3, [r7, #4]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 80083ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ee:	689a      	ldr	r2, [r3, #8]
 80083f0:	4b45      	ldr	r3, [pc, #276]	; (8008508 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 80083f2:	fba3 1302 	umull	r1, r3, r3, r2
 80083f6:	099b      	lsrs	r3, r3, #6
 80083f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80083fc:	fb01 f303 	mul.w	r3, r1, r3
 8008400:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8008402:	603b      	str	r3, [r7, #0]
 8008404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008406:	3314      	adds	r3, #20
 8008408:	4618      	mov	r0, r3
 800840a:	f003 fc11 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800840e:	4602      	mov	r2, r0
 8008410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008412:	69db      	ldr	r3, [r3, #28]
 8008414:	f107 0014 	add.w	r0, r7, #20
 8008418:	9306      	str	r3, [sp, #24]
 800841a:	9205      	str	r2, [sp, #20]
 800841c:	683a      	ldr	r2, [r7, #0]
 800841e:	9204      	str	r2, [sp, #16]
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	9203      	str	r2, [sp, #12]
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	9302      	str	r3, [sp, #8]
 8008428:	9601      	str	r6, [sp, #4]
 800842a:	9500      	str	r5, [sp, #0]
 800842c:	4623      	mov	r3, r4
 800842e:	4642      	mov	r2, r8
 8008430:	4936      	ldr	r1, [pc, #216]	; (800850c <_ZN15JUnitTestOutput14writeTestCasesEv+0x194>)
 8008432:	f004 f931 	bl	800c698 <_Z16StringFromFormatPKcz>
        writeToFile(buf.asCharString());
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	3368      	adds	r3, #104	; 0x68
 800843c:	681c      	ldr	r4, [r3, #0]
 800843e:	f107 0314 	add.w	r3, r7, #20
 8008442:	4618      	mov	r0, r3
 8008444:	f003 fbf4 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 8008448:	4602      	mov	r2, r0
 800844a:	f107 031c 	add.w	r3, r7, #28
 800844e:	4611      	mov	r1, r2
 8008450:	4618      	mov	r0, r3
 8008452:	f003 f862 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8008456:	f107 031c 	add.w	r3, r7, #28
 800845a:	4619      	mov	r1, r3
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	47a0      	blx	r4
 8008460:	f107 031c 	add.w	r3, r7, #28
 8008464:	4618      	mov	r0, r3
 8008466:	f003 fc10 	bl	800bc8a <_ZN12SimpleStringD1Ev>

        impl_->results_.totalCheckCount_ = cur->checkCount_;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008470:	6a12      	ldr	r2, [r2, #32]
 8008472:	609a      	str	r2, [r3, #8]

        if (cur->failure_) {
 8008474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d007      	beq.n	800848c <_ZN15JUnitTestOutput14writeTestCasesEv+0x114>
            writeFailure(cur);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	3388      	adds	r3, #136	; 0x88
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	4798      	blx	r3
 800848a:	e017      	b.n	80084bc <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
        }
        else if (cur->ignored_) {
 800848c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800848e:	7c1b      	ldrb	r3, [r3, #16]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d013      	beq.n	80084bc <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
            writeToFile("<skipped />\n");
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	3368      	adds	r3, #104	; 0x68
 800849a:	681c      	ldr	r4, [r3, #0]
 800849c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084a0:	491b      	ldr	r1, [pc, #108]	; (8008510 <_ZN15JUnitTestOutput14writeTestCasesEv+0x198>)
 80084a2:	4618      	mov	r0, r3
 80084a4:	f003 f839 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80084a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084ac:	4619      	mov	r1, r3
 80084ae:	68f8      	ldr	r0, [r7, #12]
 80084b0:	47a0      	blx	r4
 80084b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084b6:	4618      	mov	r0, r3
 80084b8:	f003 fbe7 	bl	800bc8a <_ZN12SimpleStringD1Ev>
        }
        writeToFile("</testcase>\n");
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	3368      	adds	r3, #104	; 0x68
 80084c2:	681c      	ldr	r4, [r3, #0]
 80084c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80084c8:	4912      	ldr	r1, [pc, #72]	; (8008514 <_ZN15JUnitTestOutput14writeTestCasesEv+0x19c>)
 80084ca:	4618      	mov	r0, r3
 80084cc:	f003 f825 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80084d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80084d4:	4619      	mov	r1, r3
 80084d6:	68f8      	ldr	r0, [r7, #12]
 80084d8:	47a0      	blx	r4
 80084da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80084de:	4618      	mov	r0, r3
 80084e0:	f003 fbd3 	bl	800bc8a <_ZN12SimpleStringD1Ev>
        cur = cur->next_;
 80084e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e8:	637b      	str	r3, [r7, #52]	; 0x34
                (int) cur->lineNumber_);
 80084ea:	f107 0314 	add.w	r3, r7, #20
 80084ee:	4618      	mov	r0, r3
 80084f0:	f003 fbcb 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    while (cur) {
 80084f4:	e749      	b.n	800838a <_ZN15JUnitTestOutput14writeTestCasesEv+0x12>
    }
}
 80084f6:	bf00      	nop
 80084f8:	3738      	adds	r7, #56	; 0x38
 80084fa:	46bd      	mov	sp, r7
 80084fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008500:	08022674 	.word	0x08022674
 8008504:	080227b4 	.word	0x080227b4
 8008508:	10624dd3 	.word	0x10624dd3
 800850c:	080227b8 	.word	0x080227b8
 8008510:	08022814 	.word	0x08022814
 8008514:	08022824 	.word	0x08022824

08008518 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode>:

void JUnitTestOutput::writeFailure(JUnitTestCaseResultNode* node)
{
 8008518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800851a:	b091      	sub	sp, #68	; 0x44
 800851c:	af02      	add	r7, sp, #8
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
    SimpleString buf = StringFromFormat(
            "<failure message=\"%s:%d: %s\" type=\"AssertionFailedError\">\n",
            node->failure_->getFileName().asCharString(),
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	68d9      	ldr	r1, [r3, #12]
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	3308      	adds	r3, #8
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f107 0210 	add.w	r2, r7, #16
 8008534:	4610      	mov	r0, r2
 8008536:	4798      	blx	r3
            (int) node->failure_->getFailureLineNumber(),
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8008538:	f107 0310 	add.w	r3, r7, #16
 800853c:	4618      	mov	r0, r3
 800853e:	f003 fb77 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 8008542:	4605      	mov	r5, r0
            (int) node->failure_->getFailureLineNumber(),
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	68da      	ldr	r2, [r3, #12]
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	3314      	adds	r3, #20
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4610      	mov	r0, r2
 8008554:	4798      	blx	r3
 8008556:	4603      	mov	r3, r0
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8008558:	461e      	mov	r6, r3
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	3380      	adds	r3, #128	; 0x80
 8008560:	681c      	ldr	r4, [r3, #0]
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	68d9      	ldr	r1, [r3, #12]
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	3318      	adds	r3, #24
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f107 0220 	add.w	r2, r7, #32
 8008574:	4610      	mov	r0, r2
 8008576:	4798      	blx	r3
 8008578:	f107 0318 	add.w	r3, r7, #24
 800857c:	f107 0220 	add.w	r2, r7, #32
 8008580:	6879      	ldr	r1, [r7, #4]
 8008582:	4618      	mov	r0, r3
 8008584:	47a0      	blx	r4
 8008586:	f107 0318 	add.w	r3, r7, #24
 800858a:	4618      	mov	r0, r3
 800858c:	f003 fb50 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 8008590:	4603      	mov	r3, r0
 8008592:	f107 0008 	add.w	r0, r7, #8
 8008596:	9300      	str	r3, [sp, #0]
 8008598:	4633      	mov	r3, r6
 800859a:	462a      	mov	r2, r5
 800859c:	4924      	ldr	r1, [pc, #144]	; (8008630 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x118>)
 800859e:	f004 f87b 	bl	800c698 <_Z16StringFromFormatPKcz>
 80085a2:	f107 0318 	add.w	r3, r7, #24
 80085a6:	4618      	mov	r0, r3
 80085a8:	f003 fb6f 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 80085ac:	f107 0320 	add.w	r3, r7, #32
 80085b0:	4618      	mov	r0, r3
 80085b2:	f003 fb6a 	bl	800bc8a <_ZN12SimpleStringD1Ev>
            node->failure_->getFileName().asCharString(),
 80085b6:	f107 0310 	add.w	r3, r7, #16
 80085ba:	4618      	mov	r0, r3
 80085bc:	f003 fb65 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    writeToFile(buf.asCharString());
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	3368      	adds	r3, #104	; 0x68
 80085c6:	681c      	ldr	r4, [r3, #0]
 80085c8:	f107 0308 	add.w	r3, r7, #8
 80085cc:	4618      	mov	r0, r3
 80085ce:	f003 fb2f 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 80085d2:	4602      	mov	r2, r0
 80085d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80085d8:	4611      	mov	r1, r2
 80085da:	4618      	mov	r0, r3
 80085dc:	f002 ff9d 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80085e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80085e4:	4619      	mov	r1, r3
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	47a0      	blx	r4
 80085ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80085ee:	4618      	mov	r0, r3
 80085f0:	f003 fb4b 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    writeToFile("</failure>\n");
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	3368      	adds	r3, #104	; 0x68
 80085fa:	681c      	ldr	r4, [r3, #0]
 80085fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008600:	490c      	ldr	r1, [pc, #48]	; (8008634 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x11c>)
 8008602:	4618      	mov	r0, r3
 8008604:	f002 ff89 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8008608:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800860c:	4619      	mov	r1, r3
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	47a0      	blx	r4
 8008612:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008616:	4618      	mov	r0, r3
 8008618:	f003 fb37 	bl	800bc8a <_ZN12SimpleStringD1Ev>
            encodeXmlText(node->failure_->getMessage()).asCharString());
 800861c:	f107 0308 	add.w	r3, r7, #8
 8008620:	4618      	mov	r0, r3
 8008622:	f003 fb32 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 8008626:	bf00      	nop
 8008628:	373c      	adds	r7, #60	; 0x3c
 800862a:	46bd      	mov	sp, r7
 800862c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800862e:	bf00      	nop
 8008630:	08022834 	.word	0x08022834
 8008634:	08022870 	.word	0x08022870

08008638 <_ZN15JUnitTestOutput15writeFileEndingEv>:


void JUnitTestOutput::writeFileEnding()
{
 8008638:	b590      	push	{r4, r7, lr}
 800863a:	b08d      	sub	sp, #52	; 0x34
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
    writeToFile("<system-out>");
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	3368      	adds	r3, #104	; 0x68
 8008646:	681c      	ldr	r4, [r3, #0]
 8008648:	f107 0308 	add.w	r3, r7, #8
 800864c:	4933      	ldr	r1, [pc, #204]	; (800871c <_ZN15JUnitTestOutput15writeFileEndingEv+0xe4>)
 800864e:	4618      	mov	r0, r3
 8008650:	f002 ff63 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8008654:	f107 0308 	add.w	r3, r7, #8
 8008658:	4619      	mov	r1, r3
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	47a0      	blx	r4
 800865e:	f107 0308 	add.w	r3, r7, #8
 8008662:	4618      	mov	r0, r3
 8008664:	f003 fb11 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    writeToFile(encodeXmlText(impl_->stdOutput_));
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	3368      	adds	r3, #104	; 0x68
 800866e:	681c      	ldr	r4, [r3, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	3380      	adds	r3, #128	; 0x80
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	6912      	ldr	r2, [r2, #16]
 800867c:	3230      	adds	r2, #48	; 0x30
 800867e:	f107 0010 	add.w	r0, r7, #16
 8008682:	6879      	ldr	r1, [r7, #4]
 8008684:	4798      	blx	r3
 8008686:	f107 0310 	add.w	r3, r7, #16
 800868a:	4619      	mov	r1, r3
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	47a0      	blx	r4
 8008690:	f107 0310 	add.w	r3, r7, #16
 8008694:	4618      	mov	r0, r3
 8008696:	f003 faf8 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    writeToFile("</system-out>\n");
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	3368      	adds	r3, #104	; 0x68
 80086a0:	681c      	ldr	r4, [r3, #0]
 80086a2:	f107 0318 	add.w	r3, r7, #24
 80086a6:	491e      	ldr	r1, [pc, #120]	; (8008720 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe8>)
 80086a8:	4618      	mov	r0, r3
 80086aa:	f002 ff36 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80086ae:	f107 0318 	add.w	r3, r7, #24
 80086b2:	4619      	mov	r1, r3
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	47a0      	blx	r4
 80086b8:	f107 0318 	add.w	r3, r7, #24
 80086bc:	4618      	mov	r0, r3
 80086be:	f003 fae4 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    writeToFile("<system-err></system-err>\n");
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	3368      	adds	r3, #104	; 0x68
 80086c8:	681c      	ldr	r4, [r3, #0]
 80086ca:	f107 0320 	add.w	r3, r7, #32
 80086ce:	4915      	ldr	r1, [pc, #84]	; (8008724 <_ZN15JUnitTestOutput15writeFileEndingEv+0xec>)
 80086d0:	4618      	mov	r0, r3
 80086d2:	f002 ff22 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80086d6:	f107 0320 	add.w	r3, r7, #32
 80086da:	4619      	mov	r1, r3
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	47a0      	blx	r4
 80086e0:	f107 0320 	add.w	r3, r7, #32
 80086e4:	4618      	mov	r0, r3
 80086e6:	f003 fad0 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    writeToFile("</testsuite>\n");
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	3368      	adds	r3, #104	; 0x68
 80086f0:	681c      	ldr	r4, [r3, #0]
 80086f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80086f6:	490c      	ldr	r1, [pc, #48]	; (8008728 <_ZN15JUnitTestOutput15writeFileEndingEv+0xf0>)
 80086f8:	4618      	mov	r0, r3
 80086fa:	f002 ff0e 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80086fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008702:	4619      	mov	r1, r3
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	47a0      	blx	r4
 8008708:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800870c:	4618      	mov	r0, r3
 800870e:	f003 fabc 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 8008712:	bf00      	nop
 8008714:	3734      	adds	r7, #52	; 0x34
 8008716:	46bd      	mov	sp, r7
 8008718:	bd90      	pop	{r4, r7, pc}
 800871a:	bf00      	nop
 800871c:	0802287c 	.word	0x0802287c
 8008720:	0802288c 	.word	0x0802288c
 8008724:	0802289c 	.word	0x0802289c
 8008728:	080228b8 	.word	0x080228b8

0800872c <_ZN15JUnitTestOutput20writeTestGroupToFileEv>:

void JUnitTestOutput::writeTestGroupToFile()
{
 800872c:	b590      	push	{r4, r7, lr}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
    openFileForWrite(createFileName(impl_->results_.group_));
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	3360      	adds	r3, #96	; 0x60
 800873a:	681c      	ldr	r4, [r3, #0]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	335c      	adds	r3, #92	; 0x5c
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	6912      	ldr	r2, [r2, #16]
 8008748:	3214      	adds	r2, #20
 800874a:	f107 0008 	add.w	r0, r7, #8
 800874e:	6879      	ldr	r1, [r7, #4]
 8008750:	4798      	blx	r3
 8008752:	f107 0308 	add.w	r3, r7, #8
 8008756:	4619      	mov	r1, r3
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	47a0      	blx	r4
 800875c:	f107 0308 	add.w	r3, r7, #8
 8008760:	4618      	mov	r0, r3
 8008762:	f003 fa92 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    writeXmlHeader();
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	3370      	adds	r3, #112	; 0x70
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	4798      	blx	r3
    writeTestSuiteSummary();
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3374      	adds	r3, #116	; 0x74
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	4798      	blx	r3
    writeProperties();
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	3378      	adds	r3, #120	; 0x78
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	4798      	blx	r3
    writeTestCases();
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	337c      	adds	r3, #124	; 0x7c
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	4798      	blx	r3
    writeFileEnding();
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	338c      	adds	r3, #140	; 0x8c
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	4798      	blx	r3
    closeFile();
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	336c      	adds	r3, #108	; 0x6c
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	4798      	blx	r3
}
 80087ae:	bf00      	nop
 80087b0:	3714      	adds	r7, #20
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd90      	pop	{r4, r7, pc}

080087b6 <_ZN15JUnitTestOutput11printBufferEPKc>:

// LCOV_EXCL_START

void JUnitTestOutput::printBuffer(const char*)
{
 80087b6:	b480      	push	{r7}
 80087b8:	b083      	sub	sp, #12
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
 80087be:	6039      	str	r1, [r7, #0]
}
 80087c0:	bf00      	nop
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <_ZN15JUnitTestOutput5printEPKc>:

void JUnitTestOutput::print(const char *output)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
    impl_->stdOutput_ += output;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	3330      	adds	r3, #48	; 0x30
 80087dc:	6839      	ldr	r1, [r7, #0]
 80087de:	4618      	mov	r0, r3
 80087e0:	f003 fae2 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
}
 80087e4:	bf00      	nop
 80087e6:	3708      	adds	r7, #8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <_ZN15JUnitTestOutput5printEl>:

void JUnitTestOutput::print(long)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
}
 80087f6:	bf00      	nop
 80087f8:	370c      	adds	r7, #12
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr

08008802 <_ZN15JUnitTestOutput5printEj>:

void JUnitTestOutput::print(size_t)
{
 8008802:	b480      	push	{r7}
 8008804:	b083      	sub	sp, #12
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
 800880a:	6039      	str	r1, [r7, #0]
}
 800880c:	bf00      	nop
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <_ZN15JUnitTestOutput5flushEv>:

void JUnitTestOutput::flush()
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
}
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <_ZN15JUnitTestOutput12printFailureERK11TestFailure>:

// LCOV_EXCL_STOP

void JUnitTestOutput::printFailure(const TestFailure& failure)
{
 800882c:	b590      	push	{r4, r7, lr}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
    if (impl_->results_.tail_->failure_ == NULLPTR) {
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	6a1b      	ldr	r3, [r3, #32]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d113      	bne.n	800886a <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x3e>
        impl_->results_.failureCount_++;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	685a      	ldr	r2, [r3, #4]
 8008848:	3201      	adds	r2, #1
 800884a:	605a      	str	r2, [r3, #4]
        impl_->results_.tail_->failure_ = new TestFailure(failure);
 800884c:	f240 1233 	movw	r2, #307	; 0x133
 8008850:	4908      	ldr	r1, [pc, #32]	; (8008874 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x48>)
 8008852:	2034      	movs	r0, #52	; 0x34
 8008854:	f000 fa9e 	bl	8008d94 <_ZnwjPKci>
 8008858:	4604      	mov	r4, r0
 800885a:	6839      	ldr	r1, [r7, #0]
 800885c:	4620      	mov	r0, r4
 800885e:	f004 fd37 	bl	800d2d0 <_ZN11TestFailureC1ERKS_>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	6a1b      	ldr	r3, [r3, #32]
 8008868:	60dc      	str	r4, [r3, #12]
    }
}
 800886a:	bf00      	nop
 800886c:	370c      	adds	r7, #12
 800886e:	46bd      	mov	sp, r7
 8008870:	bd90      	pop	{r4, r7, pc}
 8008872:	bf00      	nop
 8008874:	08022678 	.word	0x08022678

08008878 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString>:

void JUnitTestOutput::openFileForWrite(const SimpleString& fileName)
{
 8008878:	b5b0      	push	{r4, r5, r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
    impl_->file_ = PlatformSpecificFOpen(fileName.asCharString(), "w");
 8008882:	4b08      	ldr	r3, [pc, #32]	; (80088a4 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x2c>)
 8008884:	681d      	ldr	r5, [r3, #0]
 8008886:	6838      	ldr	r0, [r7, #0]
 8008888:	f003 f9d2 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800888c:	4602      	mov	r2, r0
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	691c      	ldr	r4, [r3, #16]
 8008892:	4905      	ldr	r1, [pc, #20]	; (80088a8 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x30>)
 8008894:	4610      	mov	r0, r2
 8008896:	47a8      	blx	r5
 8008898:	4603      	mov	r3, r0
 800889a:	6263      	str	r3, [r4, #36]	; 0x24
}
 800889c:	bf00      	nop
 800889e:	3708      	adds	r7, #8
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bdb0      	pop	{r4, r5, r7, pc}
 80088a4:	200000b4 	.word	0x200000b4
 80088a8:	080228c8 	.word	0x080228c8

080088ac <_ZN15JUnitTestOutput11writeToFileERK12SimpleString>:

void JUnitTestOutput::writeToFile(const SimpleString& buffer)
{
 80088ac:	b590      	push	{r4, r7, lr}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
    PlatformSpecificFPuts(buffer.asCharString(), impl_->file_);
 80088b6:	4b08      	ldr	r3, [pc, #32]	; (80088d8 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString+0x2c>)
 80088b8:	681c      	ldr	r4, [r3, #0]
 80088ba:	6838      	ldr	r0, [r7, #0]
 80088bc:	f003 f9b8 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 80088c0:	4602      	mov	r2, r0
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c8:	4619      	mov	r1, r3
 80088ca:	4610      	mov	r0, r2
 80088cc:	47a0      	blx	r4
}
 80088ce:	bf00      	nop
 80088d0:	370c      	adds	r7, #12
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd90      	pop	{r4, r7, pc}
 80088d6:	bf00      	nop
 80088d8:	200000b8 	.word	0x200000b8

080088dc <_ZN15JUnitTestOutput9closeFileEv>:

void JUnitTestOutput::closeFile()
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
    PlatformSpecificFClose(impl_->file_);
 80088e4:	4b05      	ldr	r3, [pc, #20]	; (80088fc <_ZN15JUnitTestOutput9closeFileEv+0x20>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	6912      	ldr	r2, [r2, #16]
 80088ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80088ee:	4610      	mov	r0, r2
 80088f0:	4798      	blx	r3
}
 80088f2:	bf00      	nop
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	200000bc 	.word	0x200000bc

08008900 <_ZN10TestPlugin14parseArgumentsEiPKPKci>:
    virtual bool parseArguments(int /* ac */, const char *const * /* av */, int /* index */ )
 8008900:	b480      	push	{r7}
 8008902:	b085      	sub	sp, #20
 8008904:	af00      	add	r7, sp, #0
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	607a      	str	r2, [r7, #4]
 800890c:	603b      	str	r3, [r7, #0]
        return false;
 800890e:	2300      	movs	r3, #0
    }
 8008910:	4618      	mov	r0, r3
 8008912:	3714      	adds	r7, #20
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <_ZN17MemoryLeakFailureD1Ev>:
class SimpleMutex;

class MemoryLeakFailure
{
public:
    virtual ~MemoryLeakFailure()
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
    {
 8008924:	4a04      	ldr	r2, [pc, #16]	; (8008938 <_ZN17MemoryLeakFailureD1Ev+0x1c>)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	601a      	str	r2, [r3, #0]
    }
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4618      	mov	r0, r3
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr
 8008938:	080260ac 	.word	0x080260ac

0800893c <_ZN17MemoryLeakFailureD0Ev>:
    virtual ~MemoryLeakFailure()
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
    }
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f7ff ffe9 	bl	800891c <_ZN17MemoryLeakFailureD1Ev>
 800894a:	2104      	movs	r1, #4
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 fa35 	bl	8008dbc <_ZdlPvj>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4618      	mov	r0, r3
 8008956:	3708      	adds	r7, #8
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <_ZN18MemLeakScopedMutexC1Ev>:
#if CPPUTEST_USE_MEM_LEAK_DETECTION

class MemLeakScopedMutex
{
public:
    MemLeakScopedMutex() : lock(MemoryLeakWarningPlugin::getGlobalDetector()->getMutex()) { }
 800895c:	b590      	push	{r4, r7, lr}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	687c      	ldr	r4, [r7, #4]
 8008966:	f000 fc71 	bl	800924c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800896a:	4603      	mov	r3, r0
 800896c:	4618      	mov	r0, r3
 800896e:	f00c ff6c 	bl	801584a <_ZN18MemoryLeakDetector8getMutexEv>
 8008972:	4603      	mov	r3, r0
 8008974:	4619      	mov	r1, r3
 8008976:	4620      	mov	r0, r4
 8008978:	f002 fb24 	bl	800afc4 <_ZN15ScopedMutexLockC1EP11SimpleMutex>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4618      	mov	r0, r3
 8008980:	370c      	adds	r7, #12
 8008982:	46bd      	mov	sp, r7
 8008984:	bd90      	pop	{r4, r7, pc}

08008986 <_ZN18MemLeakScopedMutexD1Ev>:
class MemLeakScopedMutex
 8008986:	b580      	push	{r7, lr}
 8008988:	b082      	sub	sp, #8
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4618      	mov	r0, r3
 8008992:	f002 fb29 	bl	800afe8 <_ZN15ScopedMutexLockD1Ev>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4618      	mov	r0, r3
 800899a:	3708      	adds	r7, #8
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <_ZL15mem_leak_mallocjPKcj>:
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
}


static void* mem_leak_malloc(size_t size, const char* file, size_t line)
{
 80089a0:	b590      	push	{r4, r7, lr}
 80089a2:	b087      	sub	sp, #28
 80089a4:	af02      	add	r7, sp, #8
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	60b9      	str	r1, [r7, #8]
 80089aa:	607a      	str	r2, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentMallocAllocator(), size, file, line, true);
 80089ac:	f000 fc4e 	bl	800924c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80089b0:	4604      	mov	r4, r0
 80089b2:	f006 f8df 	bl	800eb74 <_Z25getCurrentMallocAllocatorv>
 80089b6:	4601      	mov	r1, r0
 80089b8:	2301      	movs	r3, #1
 80089ba:	9301      	str	r3, [sp, #4]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	68fa      	ldr	r2, [r7, #12]
 80089c4:	4620      	mov	r0, r4
 80089c6:	f00d f983 	bl	8015cd0 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 80089ca:	4603      	mov	r3, r0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3714      	adds	r7, #20
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd90      	pop	{r4, r7, pc}

080089d4 <_ZL13mem_leak_freePvPKcj>:

static void mem_leak_free(void* buffer, const char* file, size_t line)
{
 80089d4:	b590      	push	{r4, r7, lr}
 80089d6:	b087      	sub	sp, #28
 80089d8:	af02      	add	r7, sp, #8
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	607a      	str	r2, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) buffer);
 80089e0:	f000 fc34 	bl	800924c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80089e4:	4603      	mov	r3, r0
 80089e6:	68f9      	ldr	r1, [r7, #12]
 80089e8:	4618      	mov	r0, r3
 80089ea:	f00c ffdd 	bl	80159a8 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentMallocAllocator(), (char*) buffer, file, line, true);
 80089ee:	f000 fc2d 	bl	800924c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80089f2:	4604      	mov	r4, r0
 80089f4:	f006 f8be 	bl	800eb74 <_Z25getCurrentMallocAllocatorv>
 80089f8:	4601      	mov	r1, r0
 80089fa:	2301      	movs	r3, #1
 80089fc:	9301      	str	r3, [sp, #4]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	9300      	str	r3, [sp, #0]
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	4620      	mov	r0, r4
 8008a08:	f00d f996 	bl	8015d38 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8008a0c:	bf00      	nop
 8008a0e:	3714      	adds	r7, #20
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd90      	pop	{r4, r7, pc}

08008a14 <_ZL16mem_leak_reallocPvjPKcj>:

static void* mem_leak_realloc(void* memory, size_t size, const char* file, size_t line)
{
 8008a14:	b590      	push	{r4, r7, lr}
 8008a16:	b089      	sub	sp, #36	; 0x24
 8008a18:	af04      	add	r7, sp, #16
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
 8008a20:	603b      	str	r3, [r7, #0]
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
 8008a22:	f000 fc13 	bl	800924c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008a26:	4604      	mov	r4, r0
 8008a28:	f006 f8a4 	bl	800eb74 <_Z25getCurrentMallocAllocatorv>
 8008a2c:	4601      	mov	r1, r0
 8008a2e:	2301      	movs	r3, #1
 8008a30:	9302      	str	r3, [sp, #8]
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	9301      	str	r3, [sp, #4]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	68fa      	ldr	r2, [r7, #12]
 8008a3e:	4620      	mov	r0, r4
 8008a40:	f00d f9de 	bl	8015e00 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>
 8008a44:	4603      	mov	r3, r0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3714      	adds	r7, #20
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd90      	pop	{r4, r7, pc}
	...

08008a50 <_ZL13normal_mallocjPKcj>:

#endif

static void* normal_malloc(size_t size, const char*, size_t)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
    return PlatformSpecificMalloc(size);
 8008a5c:	4b04      	ldr	r3, [pc, #16]	; (8008a70 <_ZL13normal_mallocjPKcj+0x20>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	4798      	blx	r3
 8008a64:	4603      	mov	r3, r0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	200000c8 	.word	0x200000c8

08008a74 <_ZL14normal_reallocPvjPKcj>:

static void* normal_realloc(void* memory, size_t size, const char*, size_t)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]
 8008a80:	603b      	str	r3, [r7, #0]
    return PlatformSpecificRealloc(memory, size);
 8008a82:	4b05      	ldr	r3, [pc, #20]	; (8008a98 <_ZL14normal_reallocPvjPKcj+0x24>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	68b9      	ldr	r1, [r7, #8]
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	4798      	blx	r3
 8008a8c:	4603      	mov	r3, r0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3710      	adds	r7, #16
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	200000cc 	.word	0x200000cc

08008a9c <_ZL11normal_freePvPKcj>:

static void normal_free(void* buffer, const char*, size_t)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	60b9      	str	r1, [r7, #8]
 8008aa6:	607a      	str	r2, [r7, #4]
    PlatformSpecificFree(buffer);
 8008aa8:	4b03      	ldr	r3, [pc, #12]	; (8008ab8 <_ZL11normal_freePvPKcj+0x1c>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	68f8      	ldr	r0, [r7, #12]
 8008aae:	4798      	blx	r3
}
 8008ab0:	bf00      	nop
 8008ab2:	3710      	adds	r7, #16
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	200000d0 	.word	0x200000d0

08008abc <_ZL32threadsafe_mem_leak_operator_newj>:
#else
#define UT_THROW_BAD_ALLOC_WHEN_NULL(memory)
#endif

static void* threadsafe_mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8008abc:	b590      	push	{r4, r7, lr}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
    MemLeakScopedMutex lock;
 8008ac4:	f107 0308 	add.w	r3, r7, #8
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f7ff ff47 	bl	800895c <_ZN18MemLeakScopedMutexC1Ev>
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8008ace:	f000 fbbd 	bl	800924c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008ad2:	4604      	mov	r4, r0
 8008ad4:	f005 ff9e 	bl	800ea14 <_Z22getCurrentNewAllocatorv>
 8008ad8:	4601      	mov	r1, r0
 8008ada:	2300      	movs	r3, #0
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	4620      	mov	r0, r4
 8008ae0:	f00d f864 	bl	8015bac <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8008ae4:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8008ae6:	68fc      	ldr	r4, [r7, #12]
    MemLeakScopedMutex lock;
 8008ae8:	f107 0308 	add.w	r3, r7, #8
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7ff ff4a 	bl	8008986 <_ZN18MemLeakScopedMutexD1Ev>
    return memory;
 8008af2:	4623      	mov	r3, r4
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3714      	adds	r7, #20
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd90      	pop	{r4, r7, pc}

08008afc <_ZL21mem_leak_operator_newj>:
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
}


static void* mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8008afc:	b590      	push	{r4, r7, lr}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8008b04:	f000 fba2 	bl	800924c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008b08:	4604      	mov	r4, r0
 8008b0a:	f005 ff83 	bl	800ea14 <_Z22getCurrentNewAllocatorv>
 8008b0e:	4601      	mov	r1, r0
 8008b10:	2300      	movs	r3, #0
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	4620      	mov	r0, r4
 8008b16:	f00d f849 	bl	8015bac <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8008b1a:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3714      	adds	r7, #20
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd90      	pop	{r4, r7, pc}

08008b26 <_ZL29mem_leak_operator_new_nothrowj>:

static void* mem_leak_operator_new_nothrow (size_t size) UT_NOTHROW
{
 8008b26:	b590      	push	{r4, r7, lr}
 8008b28:	b083      	sub	sp, #12
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8008b2e:	f000 fb8d 	bl	800924c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008b32:	4604      	mov	r4, r0
 8008b34:	f005 ff6e 	bl	800ea14 <_Z22getCurrentNewAllocatorv>
 8008b38:	4601      	mov	r1, r0
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f00d f834 	bl	8015bac <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8008b44:	4603      	mov	r3, r0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	370c      	adds	r7, #12
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd90      	pop	{r4, r7, pc}

08008b4e <_ZL27mem_leak_operator_new_debugjPKcj>:

static void* mem_leak_operator_new_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 8008b4e:	b590      	push	{r4, r7, lr}
 8008b50:	b089      	sub	sp, #36	; 0x24
 8008b52:	af02      	add	r7, sp, #8
 8008b54:	60f8      	str	r0, [r7, #12]
 8008b56:	60b9      	str	r1, [r7, #8]
 8008b58:	607a      	str	r2, [r7, #4]
    void *memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size, file, line);
 8008b5a:	f000 fb77 	bl	800924c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008b5e:	4604      	mov	r4, r0
 8008b60:	f005 ff58 	bl	800ea14 <_Z22getCurrentNewAllocatorv>
 8008b64:	4601      	mov	r1, r0
 8008b66:	2300      	movs	r3, #0
 8008b68:	9301      	str	r3, [sp, #4]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	9300      	str	r3, [sp, #0]
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	68fa      	ldr	r2, [r7, #12]
 8008b72:	4620      	mov	r0, r4
 8008b74:	f00d f8ac 	bl	8015cd0 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8008b78:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8008b7a:	697b      	ldr	r3, [r7, #20]
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	371c      	adds	r7, #28
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd90      	pop	{r4, r7, pc}

08008b84 <_ZL27mem_leak_operator_new_arrayj>:

static void* mem_leak_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 8008b84:	b590      	push	{r4, r7, lr}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 8008b8c:	f000 fb5e 	bl	800924c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008b90:	4604      	mov	r4, r0
 8008b92:	f005 ff97 	bl	800eac4 <_Z27getCurrentNewArrayAllocatorv>
 8008b96:	4601      	mov	r1, r0
 8008b98:	2300      	movs	r3, #0
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	f00d f805 	bl	8015bac <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8008ba2:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3714      	adds	r7, #20
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd90      	pop	{r4, r7, pc}

08008bae <_ZL35mem_leak_operator_new_array_nothrowj>:

static void* mem_leak_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 8008bae:	b590      	push	{r4, r7, lr}
 8008bb0:	b083      	sub	sp, #12
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 8008bb6:	f000 fb49 	bl	800924c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008bba:	4604      	mov	r4, r0
 8008bbc:	f005 ff82 	bl	800eac4 <_Z27getCurrentNewArrayAllocatorv>
 8008bc0:	4601      	mov	r1, r0
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	f00c fff0 	bl	8015bac <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8008bcc:	4603      	mov	r3, r0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	370c      	adds	r7, #12
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd90      	pop	{r4, r7, pc}

08008bd6 <_ZL33mem_leak_operator_new_array_debugjPKcj>:

static void* mem_leak_operator_new_array_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 8008bd6:	b590      	push	{r4, r7, lr}
 8008bd8:	b089      	sub	sp, #36	; 0x24
 8008bda:	af02      	add	r7, sp, #8
 8008bdc:	60f8      	str	r0, [r7, #12]
 8008bde:	60b9      	str	r1, [r7, #8]
 8008be0:	607a      	str	r2, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size, file, line);
 8008be2:	f000 fb33 	bl	800924c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008be6:	4604      	mov	r4, r0
 8008be8:	f005 ff6c 	bl	800eac4 <_Z27getCurrentNewArrayAllocatorv>
 8008bec:	4601      	mov	r1, r0
 8008bee:	2300      	movs	r3, #0
 8008bf0:	9301      	str	r3, [sp, #4]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	f00d f868 	bl	8015cd0 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8008c00:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8008c02:	697b      	ldr	r3, [r7, #20]
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	371c      	adds	r7, #28
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd90      	pop	{r4, r7, pc}

08008c0c <_ZL24mem_leak_operator_deletePv>:

static void mem_leak_operator_delete (void* mem) UT_NOTHROW
{
 8008c0c:	b590      	push	{r4, r7, lr}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 8008c14:	f000 fb1a 	bl	800924c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	6879      	ldr	r1, [r7, #4]
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f00c fec3 	bl	80159a8 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewAllocator(), (char*) mem);
 8008c22:	f000 fb13 	bl	800924c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008c26:	4604      	mov	r4, r0
 8008c28:	f005 fef4 	bl	800ea14 <_Z22getCurrentNewAllocatorv>
 8008c2c:	4601      	mov	r1, r0
 8008c2e:	2300      	movs	r3, #0
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	4620      	mov	r0, r4
 8008c34:	f00d f8ca 	bl	8015dcc <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 8008c38:	bf00      	nop
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd90      	pop	{r4, r7, pc}

08008c40 <_ZL30mem_leak_operator_delete_arrayPv>:

static void mem_leak_operator_delete_array (void* mem) UT_NOTHROW
{
 8008c40:	b590      	push	{r4, r7, lr}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 8008c48:	f000 fb00 	bl	800924c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	6879      	ldr	r1, [r7, #4]
 8008c50:	4618      	mov	r0, r3
 8008c52:	f00c fea9 	bl	80159a8 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
 8008c56:	f000 faf9 	bl	800924c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	f005 ff32 	bl	800eac4 <_Z27getCurrentNewArrayAllocatorv>
 8008c60:	4601      	mov	r1, r0
 8008c62:	2300      	movs	r3, #0
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	4620      	mov	r0, r4
 8008c68:	f00d f8b0 	bl	8015dcc <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 8008c6c:	bf00      	nop
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd90      	pop	{r4, r7, pc}

08008c74 <_ZL19normal_operator_newj>:

static void* normal_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8008c7c:	4b04      	ldr	r3, [pc, #16]	; (8008c90 <_ZL19normal_operator_newj+0x1c>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	4798      	blx	r3
 8008c84:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8008c86:	68fb      	ldr	r3, [r7, #12]
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3710      	adds	r7, #16
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	200000c8 	.word	0x200000c8

08008c94 <_ZL27normal_operator_new_nothrowj>:

static void* normal_operator_new_nothrow (size_t size) UT_NOTHROW
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 8008c9c:	4b04      	ldr	r3, [pc, #16]	; (8008cb0 <_ZL27normal_operator_new_nothrowj+0x1c>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	4798      	blx	r3
 8008ca4:	4603      	mov	r3, r0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3708      	adds	r7, #8
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	200000c8 	.word	0x200000c8

08008cb4 <_ZL25normal_operator_new_debugjPKcj>:

static void* normal_operator_new_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8008cc0:	4b04      	ldr	r3, [pc, #16]	; (8008cd4 <_ZL25normal_operator_new_debugjPKcj+0x20>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	4798      	blx	r3
 8008cc8:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8008cca:	697b      	ldr	r3, [r7, #20]
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3718      	adds	r7, #24
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	200000c8 	.word	0x200000c8

08008cd8 <_ZL25normal_operator_new_arrayj>:

static void* normal_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8008ce0:	4b04      	ldr	r3, [pc, #16]	; (8008cf4 <_ZL25normal_operator_new_arrayj+0x1c>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	4798      	blx	r3
 8008ce8:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8008cea:	68fb      	ldr	r3, [r7, #12]
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3710      	adds	r7, #16
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	200000c8 	.word	0x200000c8

08008cf8 <_ZL33normal_operator_new_array_nothrowj>:

static void* normal_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b082      	sub	sp, #8
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 8008d00:	4b04      	ldr	r3, [pc, #16]	; (8008d14 <_ZL33normal_operator_new_array_nothrowj+0x1c>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	4798      	blx	r3
 8008d08:	4603      	mov	r3, r0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3708      	adds	r7, #8
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	200000c8 	.word	0x200000c8

08008d18 <_ZL31normal_operator_new_array_debugjPKcj>:

static void* normal_operator_new_array_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b086      	sub	sp, #24
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8008d24:	4b04      	ldr	r3, [pc, #16]	; (8008d38 <_ZL31normal_operator_new_array_debugjPKcj+0x20>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	4798      	blx	r3
 8008d2c:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8008d2e:	697b      	ldr	r3, [r7, #20]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3718      	adds	r7, #24
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	200000c8 	.word	0x200000c8

08008d3c <_ZL22normal_operator_deletePv>:

static void normal_operator_delete (void* mem) UT_NOTHROW
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 8008d44:	4b03      	ldr	r3, [pc, #12]	; (8008d54 <_ZL22normal_operator_deletePv+0x18>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	4798      	blx	r3
}
 8008d4c:	bf00      	nop
 8008d4e:	3708      	adds	r7, #8
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	200000d0 	.word	0x200000d0

08008d58 <_ZL28normal_operator_delete_arrayPv>:

static void normal_operator_delete_array (void* mem) UT_NOTHROW
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 8008d60:	4b03      	ldr	r3, [pc, #12]	; (8008d70 <_ZL28normal_operator_delete_arrayPv+0x18>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	4798      	blx	r3
}
 8008d68:	bf00      	nop
 8008d6a:	3708      	adds	r7, #8
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	200000d0 	.word	0x200000d0

08008d74 <_Znwj>:
static void (*saved_operator_delete_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete;
static void (*saved_operator_delete_array_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete_array;
static int save_counter = 0;

void* operator new(size_t size) UT_THROW(std::bad_alloc)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
    return operator_new_fptr(size);
 8008d7c:	4b04      	ldr	r3, [pc, #16]	; (8008d90 <_Znwj+0x1c>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	4798      	blx	r3
 8008d84:	4603      	mov	r3, r0
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3708      	adds	r7, #8
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	2000002c 	.word	0x2000002c

08008d94 <_ZnwjPKci>:

void* operator new(size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	607a      	str	r2, [r7, #4]
    return operator_new_debug_fptr(size, file, (size_t)line);
 8008da0:	4b05      	ldr	r3, [pc, #20]	; (8008db8 <_ZnwjPKci+0x24>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	68b9      	ldr	r1, [r7, #8]
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	4798      	blx	r3
 8008dac:	4603      	mov	r3, r0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	20000034 	.word	0x20000034

08008dbc <_ZdlPvj>:
    operator_delete_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete (void* mem, size_t) UT_NOTHROW
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
    operator_delete_fptr(mem);
 8008dc6:	4b04      	ldr	r3, [pc, #16]	; (8008dd8 <_ZdlPvj+0x1c>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	4798      	blx	r3
}
 8008dce:	bf00      	nop
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	20000044 	.word	0x20000044

08008ddc <_ZnajPKci>:
{
    return operator_new_array_fptr(size);
}

void* operator new [](size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	60b9      	str	r1, [r7, #8]
 8008de6:	607a      	str	r2, [r7, #4]
    return operator_new_array_debug_fptr(size, file, (size_t)line);
 8008de8:	4b05      	ldr	r3, [pc, #20]	; (8008e00 <_ZnajPKci+0x24>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	68b9      	ldr	r1, [r7, #8]
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	4798      	blx	r3
 8008df4:	4603      	mov	r3, r0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	20000040 	.word	0x20000040

08008e04 <_ZdaPv>:
{
    return operator_new_array_debug_fptr(size, file, line);
}

void operator delete[](void* mem) UT_NOTHROW
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
     operator_delete_array_fptr(mem);
 8008e0c:	4b03      	ldr	r3, [pc, #12]	; (8008e1c <_ZdaPv+0x18>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	4798      	blx	r3
}
 8008e14:	bf00      	nop
 8008e16:	3708      	adds	r7, #8
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	20000048 	.word	0x20000048

08008e20 <_ZdaPvj>:
     operator_delete_array_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete[] (void* mem, size_t) UT_NOTHROW
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
     operator_delete_array_fptr(mem);
 8008e2a:	4b04      	ldr	r3, [pc, #16]	; (8008e3c <_ZdaPvj+0x1c>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	4798      	blx	r3
}
 8008e32:	bf00      	nop
 8008e34:	3708      	adds	r7, #8
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	20000048 	.word	0x20000048

08008e40 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>:

#endif
#endif

void MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
{
 8008e40:	b480      	push	{r7}
 8008e42:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    operator_new_fptr = normal_operator_new;
 8008e44:	4b12      	ldr	r3, [pc, #72]	; (8008e90 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x50>)
 8008e46:	4a13      	ldr	r2, [pc, #76]	; (8008e94 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x54>)
 8008e48:	601a      	str	r2, [r3, #0]
    operator_new_nothrow_fptr = normal_operator_new_nothrow;
 8008e4a:	4b13      	ldr	r3, [pc, #76]	; (8008e98 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x58>)
 8008e4c:	4a13      	ldr	r2, [pc, #76]	; (8008e9c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x5c>)
 8008e4e:	601a      	str	r2, [r3, #0]
    operator_new_debug_fptr = normal_operator_new_debug;
 8008e50:	4b13      	ldr	r3, [pc, #76]	; (8008ea0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x60>)
 8008e52:	4a14      	ldr	r2, [pc, #80]	; (8008ea4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x64>)
 8008e54:	601a      	str	r2, [r3, #0]
    operator_new_array_fptr = normal_operator_new_array;
 8008e56:	4b14      	ldr	r3, [pc, #80]	; (8008ea8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x68>)
 8008e58:	4a14      	ldr	r2, [pc, #80]	; (8008eac <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x6c>)
 8008e5a:	601a      	str	r2, [r3, #0]
    operator_new_array_nothrow_fptr = normal_operator_new_array_nothrow;
 8008e5c:	4b14      	ldr	r3, [pc, #80]	; (8008eb0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x70>)
 8008e5e:	4a15      	ldr	r2, [pc, #84]	; (8008eb4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x74>)
 8008e60:	601a      	str	r2, [r3, #0]
    operator_new_array_debug_fptr = normal_operator_new_array_debug;
 8008e62:	4b15      	ldr	r3, [pc, #84]	; (8008eb8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x78>)
 8008e64:	4a15      	ldr	r2, [pc, #84]	; (8008ebc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x7c>)
 8008e66:	601a      	str	r2, [r3, #0]
    operator_delete_fptr = normal_operator_delete;
 8008e68:	4b15      	ldr	r3, [pc, #84]	; (8008ec0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x80>)
 8008e6a:	4a16      	ldr	r2, [pc, #88]	; (8008ec4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x84>)
 8008e6c:	601a      	str	r2, [r3, #0]
    operator_delete_array_fptr = normal_operator_delete_array;
 8008e6e:	4b16      	ldr	r3, [pc, #88]	; (8008ec8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x88>)
 8008e70:	4a16      	ldr	r2, [pc, #88]	; (8008ecc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x8c>)
 8008e72:	601a      	str	r2, [r3, #0]
    malloc_fptr = normal_malloc;
 8008e74:	4b16      	ldr	r3, [pc, #88]	; (8008ed0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x90>)
 8008e76:	4a17      	ldr	r2, [pc, #92]	; (8008ed4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x94>)
 8008e78:	601a      	str	r2, [r3, #0]
    realloc_fptr = normal_realloc;
 8008e7a:	4b17      	ldr	r3, [pc, #92]	; (8008ed8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x98>)
 8008e7c:	4a17      	ldr	r2, [pc, #92]	; (8008edc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x9c>)
 8008e7e:	601a      	str	r2, [r3, #0]
    free_fptr = normal_free;
 8008e80:	4b17      	ldr	r3, [pc, #92]	; (8008ee0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa0>)
 8008e82:	4a18      	ldr	r2, [pc, #96]	; (8008ee4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa4>)
 8008e84:	601a      	str	r2, [r3, #0]

#endif
}
 8008e86:	bf00      	nop
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr
 8008e90:	2000002c 	.word	0x2000002c
 8008e94:	08008c75 	.word	0x08008c75
 8008e98:	20000030 	.word	0x20000030
 8008e9c:	08008c95 	.word	0x08008c95
 8008ea0:	20000034 	.word	0x20000034
 8008ea4:	08008cb5 	.word	0x08008cb5
 8008ea8:	20000038 	.word	0x20000038
 8008eac:	08008cd9 	.word	0x08008cd9
 8008eb0:	2000003c 	.word	0x2000003c
 8008eb4:	08008cf9 	.word	0x08008cf9
 8008eb8:	20000040 	.word	0x20000040
 8008ebc:	08008d19 	.word	0x08008d19
 8008ec0:	20000044 	.word	0x20000044
 8008ec4:	08008d3d 	.word	0x08008d3d
 8008ec8:	20000048 	.word	0x20000048
 8008ecc:	08008d59 	.word	0x08008d59
 8008ed0:	20000014 	.word	0x20000014
 8008ed4:	08008a51 	.word	0x08008a51
 8008ed8:	2000001c 	.word	0x2000001c
 8008edc:	08008a75 	.word	0x08008a75
 8008ee0:	20000018 	.word	0x20000018
 8008ee4:	08008a9d 	.word	0x08008a9d

08008ee8 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>:
    free_fptr = threadsafe_mem_leak_free;
#endif
}

bool MemoryLeakWarningPlugin::areNewDeleteOverloaded()
{
 8008ee8:	b480      	push	{r7}
 8008eea:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    return operator_new_fptr == mem_leak_operator_new || operator_new_fptr == threadsafe_mem_leak_operator_new;
 8008eec:	4b08      	ldr	r3, [pc, #32]	; (8008f10 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a08      	ldr	r2, [pc, #32]	; (8008f14 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x2c>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d004      	beq.n	8008f00 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x18>
 8008ef6:	4b06      	ldr	r3, [pc, #24]	; (8008f10 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a07      	ldr	r2, [pc, #28]	; (8008f18 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x30>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d101      	bne.n	8008f04 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1c>
 8008f00:	2301      	movs	r3, #1
 8008f02:	e000      	b.n	8008f06 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1e>
 8008f04:	2300      	movs	r3, #0
#else
    return false;
#endif
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr
 8008f10:	2000002c 	.word	0x2000002c
 8008f14:	08008afd 	.word	0x08008afd
 8008f18:	08008abd 	.word	0x08008abd

08008f1c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (++save_counter > 1) return;
 8008f20:	4b1f      	ldr	r3, [pc, #124]	; (8008fa0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	3301      	adds	r3, #1
 8008f26:	4a1e      	ldr	r2, [pc, #120]	; (8008fa0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8008f28:	6013      	str	r3, [r2, #0]
 8008f2a:	4b1d      	ldr	r3, [pc, #116]	; (8008fa0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	bfcc      	ite	gt
 8008f32:	2301      	movgt	r3, #1
 8008f34:	2300      	movle	r3, #0
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d12e      	bne.n	8008f9a <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x7e>
    saved_operator_new_fptr = operator_new_fptr;
 8008f3c:	4b19      	ldr	r3, [pc, #100]	; (8008fa4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x88>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a19      	ldr	r2, [pc, #100]	; (8008fa8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x8c>)
 8008f42:	6013      	str	r3, [r2, #0]
    saved_operator_new_nothrow_fptr = operator_new_nothrow_fptr;
 8008f44:	4b19      	ldr	r3, [pc, #100]	; (8008fac <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x90>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a19      	ldr	r2, [pc, #100]	; (8008fb0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x94>)
 8008f4a:	6013      	str	r3, [r2, #0]
    saved_operator_new_debug_fptr = operator_new_debug_fptr;
 8008f4c:	4b19      	ldr	r3, [pc, #100]	; (8008fb4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x98>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a19      	ldr	r2, [pc, #100]	; (8008fb8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x9c>)
 8008f52:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_fptr = operator_new_array_fptr;
 8008f54:	4b19      	ldr	r3, [pc, #100]	; (8008fbc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa0>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a19      	ldr	r2, [pc, #100]	; (8008fc0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa4>)
 8008f5a:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_nothrow_fptr = operator_new_array_nothrow_fptr;
 8008f5c:	4b19      	ldr	r3, [pc, #100]	; (8008fc4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa8>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a19      	ldr	r2, [pc, #100]	; (8008fc8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xac>)
 8008f62:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_debug_fptr = operator_new_array_debug_fptr;
 8008f64:	4b19      	ldr	r3, [pc, #100]	; (8008fcc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb0>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a19      	ldr	r2, [pc, #100]	; (8008fd0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb4>)
 8008f6a:	6013      	str	r3, [r2, #0]
    saved_operator_delete_fptr = operator_delete_fptr;
 8008f6c:	4b19      	ldr	r3, [pc, #100]	; (8008fd4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb8>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a19      	ldr	r2, [pc, #100]	; (8008fd8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xbc>)
 8008f72:	6013      	str	r3, [r2, #0]
    saved_operator_delete_array_fptr = operator_delete_array_fptr;
 8008f74:	4b19      	ldr	r3, [pc, #100]	; (8008fdc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc0>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a19      	ldr	r2, [pc, #100]	; (8008fe0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc4>)
 8008f7a:	6013      	str	r3, [r2, #0]
    saved_malloc_fptr = malloc_fptr;
 8008f7c:	4b19      	ldr	r3, [pc, #100]	; (8008fe4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc8>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a19      	ldr	r2, [pc, #100]	; (8008fe8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xcc>)
 8008f82:	6013      	str	r3, [r2, #0]
    saved_realloc_fptr = realloc_fptr;
 8008f84:	4b19      	ldr	r3, [pc, #100]	; (8008fec <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd0>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a19      	ldr	r2, [pc, #100]	; (8008ff0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd4>)
 8008f8a:	6013      	str	r3, [r2, #0]
    saved_free_fptr = free_fptr;
 8008f8c:	4b19      	ldr	r3, [pc, #100]	; (8008ff4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd8>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a19      	ldr	r2, [pc, #100]	; (8008ff8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xdc>)
 8008f92:	6013      	str	r3, [r2, #0]
    turnOffNewDeleteOverloads();
 8008f94:	f7ff ff54 	bl	8008e40 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
 8008f98:	e000      	b.n	8008f9c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x80>
    if (++save_counter > 1) return;
 8008f9a:	bf00      	nop
#endif
}
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20000744 	.word	0x20000744
 8008fa4:	2000002c 	.word	0x2000002c
 8008fa8:	2000004c 	.word	0x2000004c
 8008fac:	20000030 	.word	0x20000030
 8008fb0:	20000050 	.word	0x20000050
 8008fb4:	20000034 	.word	0x20000034
 8008fb8:	20000054 	.word	0x20000054
 8008fbc:	20000038 	.word	0x20000038
 8008fc0:	20000058 	.word	0x20000058
 8008fc4:	2000003c 	.word	0x2000003c
 8008fc8:	2000005c 	.word	0x2000005c
 8008fcc:	20000040 	.word	0x20000040
 8008fd0:	20000060 	.word	0x20000060
 8008fd4:	20000044 	.word	0x20000044
 8008fd8:	20000064 	.word	0x20000064
 8008fdc:	20000048 	.word	0x20000048
 8008fe0:	20000068 	.word	0x20000068
 8008fe4:	20000014 	.word	0x20000014
 8008fe8:	20000020 	.word	0x20000020
 8008fec:	2000001c 	.word	0x2000001c
 8008ff0:	20000028 	.word	0x20000028
 8008ff4:	20000018 	.word	0x20000018
 8008ff8:	20000024 	.word	0x20000024

08008ffc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::restoreNewDeleteOverloads()
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (--save_counter > 0) return;
 8009000:	4b1f      	ldr	r3, [pc, #124]	; (8009080 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	3b01      	subs	r3, #1
 8009006:	4a1e      	ldr	r2, [pc, #120]	; (8009080 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8009008:	6013      	str	r3, [r2, #0]
 800900a:	4b1d      	ldr	r3, [pc, #116]	; (8009080 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	bfcc      	ite	gt
 8009012:	2301      	movgt	r3, #1
 8009014:	2300      	movle	r3, #0
 8009016:	b2db      	uxtb	r3, r3
 8009018:	2b00      	cmp	r3, #0
 800901a:	d12c      	bne.n	8009076 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7a>
    operator_new_fptr = saved_operator_new_fptr;
 800901c:	4b19      	ldr	r3, [pc, #100]	; (8009084 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x88>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a19      	ldr	r2, [pc, #100]	; (8009088 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x8c>)
 8009022:	6013      	str	r3, [r2, #0]
    operator_new_nothrow_fptr = saved_operator_new_nothrow_fptr;
 8009024:	4b19      	ldr	r3, [pc, #100]	; (800908c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x90>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a19      	ldr	r2, [pc, #100]	; (8009090 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x94>)
 800902a:	6013      	str	r3, [r2, #0]
    operator_new_debug_fptr = saved_operator_new_debug_fptr;
 800902c:	4b19      	ldr	r3, [pc, #100]	; (8009094 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x98>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a19      	ldr	r2, [pc, #100]	; (8009098 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x9c>)
 8009032:	6013      	str	r3, [r2, #0]
    operator_new_array_fptr = saved_operator_new_array_fptr;
 8009034:	4b19      	ldr	r3, [pc, #100]	; (800909c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa0>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a19      	ldr	r2, [pc, #100]	; (80090a0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa4>)
 800903a:	6013      	str	r3, [r2, #0]
    operator_new_array_nothrow_fptr = saved_operator_new_array_nothrow_fptr;
 800903c:	4b19      	ldr	r3, [pc, #100]	; (80090a4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa8>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a19      	ldr	r2, [pc, #100]	; (80090a8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xac>)
 8009042:	6013      	str	r3, [r2, #0]
    operator_new_array_debug_fptr = saved_operator_new_array_debug_fptr;
 8009044:	4b19      	ldr	r3, [pc, #100]	; (80090ac <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb0>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a19      	ldr	r2, [pc, #100]	; (80090b0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb4>)
 800904a:	6013      	str	r3, [r2, #0]
    operator_delete_fptr = saved_operator_delete_fptr;
 800904c:	4b19      	ldr	r3, [pc, #100]	; (80090b4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb8>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a19      	ldr	r2, [pc, #100]	; (80090b8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xbc>)
 8009052:	6013      	str	r3, [r2, #0]
    operator_delete_array_fptr = saved_operator_delete_array_fptr;
 8009054:	4b19      	ldr	r3, [pc, #100]	; (80090bc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc0>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a19      	ldr	r2, [pc, #100]	; (80090c0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc4>)
 800905a:	6013      	str	r3, [r2, #0]
    malloc_fptr = saved_malloc_fptr;
 800905c:	4b19      	ldr	r3, [pc, #100]	; (80090c4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc8>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a19      	ldr	r2, [pc, #100]	; (80090c8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xcc>)
 8009062:	6013      	str	r3, [r2, #0]
    realloc_fptr = saved_realloc_fptr;
 8009064:	4b19      	ldr	r3, [pc, #100]	; (80090cc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd0>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a19      	ldr	r2, [pc, #100]	; (80090d0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd4>)
 800906a:	6013      	str	r3, [r2, #0]
    free_fptr = saved_free_fptr;
 800906c:	4b19      	ldr	r3, [pc, #100]	; (80090d4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd8>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a19      	ldr	r2, [pc, #100]	; (80090d8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xdc>)
 8009072:	6013      	str	r3, [r2, #0]
 8009074:	e000      	b.n	8009078 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7c>
    if (--save_counter > 0) return;
 8009076:	bf00      	nop
#endif
}
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr
 8009080:	20000744 	.word	0x20000744
 8009084:	2000004c 	.word	0x2000004c
 8009088:	2000002c 	.word	0x2000002c
 800908c:	20000050 	.word	0x20000050
 8009090:	20000030 	.word	0x20000030
 8009094:	20000054 	.word	0x20000054
 8009098:	20000034 	.word	0x20000034
 800909c:	20000058 	.word	0x20000058
 80090a0:	20000038 	.word	0x20000038
 80090a4:	2000005c 	.word	0x2000005c
 80090a8:	2000003c 	.word	0x2000003c
 80090ac:	20000060 	.word	0x20000060
 80090b0:	20000040 	.word	0x20000040
 80090b4:	20000064 	.word	0x20000064
 80090b8:	20000044 	.word	0x20000044
 80090bc:	20000068 	.word	0x20000068
 80090c0:	20000048 	.word	0x20000048
 80090c4:	20000020 	.word	0x20000020
 80090c8:	20000014 	.word	0x20000014
 80090cc:	20000028 	.word	0x20000028
 80090d0:	2000001c 	.word	0x2000001c
 80090d4:	20000024 	.word	0x20000024
 80090d8:	20000018 	.word	0x20000018

080090dc <_ZN25MemoryLeakWarningReporterD1Ev>:
}

class MemoryLeakWarningReporter: public MemoryLeakFailure
{
public:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
    {
 80090e4:	4a05      	ldr	r2, [pc, #20]	; (80090fc <_ZN25MemoryLeakWarningReporterD1Ev+0x20>)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	601a      	str	r2, [r3, #0]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7ff fc15 	bl	800891c <_ZN17MemoryLeakFailureD1Ev>
    }
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	4618      	mov	r0, r3
 80090f6:	3708      	adds	r7, #8
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	08026098 	.word	0x08026098

08009100 <_ZN25MemoryLeakWarningReporterD0Ev>:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
    }
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f7ff ffe7 	bl	80090dc <_ZN25MemoryLeakWarningReporterD1Ev>
 800910e:	2104      	movs	r1, #4
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f7ff fe53 	bl	8008dbc <_ZdlPvj>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	4618      	mov	r0, r3
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <_ZN14TestTerminatorC1Ev>:
    virtual void testBody();
};

//////////////////// TestTerminator

class TestTerminator
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	4a04      	ldr	r2, [pc, #16]	; (800913c <_ZN14TestTerminatorC1Ev+0x1c>)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	601a      	str	r2, [r3, #0]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	4618      	mov	r0, r3
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr
 800913c:	08026a44 	.word	0x08026a44

08009140 <_ZN31TestTerminatorWithoutExceptionsC1Ev>:
public:
    virtual void exitCurrentTest() const _override;
    virtual ~NormalTestTerminator() _destructor_override;
};

class TestTerminatorWithoutExceptions  : public TestTerminator
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	4618      	mov	r0, r3
 800914c:	f7ff ffe8 	bl	8009120 <_ZN14TestTerminatorC1Ev>
 8009150:	4a03      	ldr	r2, [pc, #12]	; (8009160 <_ZN31TestTerminatorWithoutExceptionsC1Ev+0x20>)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	601a      	str	r2, [r3, #0]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4618      	mov	r0, r3
 800915a:	3708      	adds	r7, #8
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}
 8009160:	08026a1c 	.word	0x08026a1c

08009164 <_ZN25MemoryLeakWarningReporter4failEPc>:

    virtual void fail(char* fail_string) _override
 8009164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009166:	b099      	sub	sp, #100	; 0x64
 8009168:	af02      	add	r7, sp, #8
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
    {
        UtestShell* currentTest = UtestShell::getCurrent();
 800916e:	f009 fdb7 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 8009172:	6578      	str	r0, [r7, #84]	; 0x54
        currentTest->failWith(FailFailure(currentTest, currentTest->getName().asCharString(), currentTest->getLineNumber(), fail_string), TestTerminatorWithoutExceptions());
 8009174:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	339c      	adds	r3, #156	; 0x9c
 800917a:	681c      	ldr	r4, [r3, #0]
 800917c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009180:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009182:	4618      	mov	r0, r3
 8009184:	f008 fbc4 	bl	8011910 <_ZNK10UtestShell7getNameEv>
 8009188:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800918c:	4618      	mov	r0, r3
 800918e:	f002 fd4f 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 8009192:	4605      	mov	r5, r0
 8009194:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009196:	f008 fc9b 	bl	8011ad0 <_ZNK10UtestShell13getLineNumberEv>
 800919a:	4606      	mov	r6, r0
 800919c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80091a0:	6839      	ldr	r1, [r7, #0]
 80091a2:	4618      	mov	r0, r3
 80091a4:	f002 f9b9 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80091a8:	f107 000c 	add.w	r0, r7, #12
 80091ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80091b0:	9300      	str	r3, [sp, #0]
 80091b2:	4633      	mov	r3, r6
 80091b4:	462a      	mov	r2, r5
 80091b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80091b8:	f004 fd14 	bl	800dbe4 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 80091bc:	2300      	movs	r3, #0
 80091be:	653b      	str	r3, [r7, #80]	; 0x50
 80091c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7ff ffbb 	bl	8009140 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 80091ca:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80091ce:	f107 030c 	add.w	r3, r7, #12
 80091d2:	4619      	mov	r1, r3
 80091d4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80091d6:	47a0      	blx	r4
 80091d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80091dc:	4618      	mov	r0, r3
 80091de:	f009 fe79 	bl	8012ed4 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 80091e2:	f107 030c 	add.w	r3, r7, #12
 80091e6:	4618      	mov	r0, r3
 80091e8:	f000 f9ac 	bl	8009544 <_ZN11FailFailureD1Ev>
 80091ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80091f0:	4618      	mov	r0, r3
 80091f2:	f002 fd4a 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 80091f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80091fa:	4618      	mov	r0, r3
 80091fc:	f002 fd45 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    } // LCOV_EXCL_LINE
 8009200:	bf00      	nop
 8009202:	375c      	adds	r7, #92	; 0x5c
 8009204:	46bd      	mov	sp, r7
 8009206:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009208 <_ZN17MemoryLeakFailureC1Ev>:
class MemoryLeakFailure
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	4a04      	ldr	r2, [pc, #16]	; (8009224 <_ZN17MemoryLeakFailureC1Ev+0x1c>)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	601a      	str	r2, [r3, #0]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4618      	mov	r0, r3
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr
 8009224:	080260ac 	.word	0x080260ac

08009228 <_ZN25MemoryLeakWarningReporterC1Ev>:
class MemoryLeakWarningReporter: public MemoryLeakFailure
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4618      	mov	r0, r3
 8009234:	f7ff ffe8 	bl	8009208 <_ZN17MemoryLeakFailureC1Ev>
 8009238:	4a03      	ldr	r2, [pc, #12]	; (8009248 <_ZN25MemoryLeakWarningReporterC1Ev+0x20>)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	601a      	str	r2, [r3, #0]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	4618      	mov	r0, r3
 8009242:	3708      	adds	r7, #8
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}
 8009248:	08026098 	.word	0x08026098

0800924c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>:

static MemoryLeakFailure* globalReporter = NULLPTR;
static MemoryLeakDetector* globalDetector = NULLPTR;

MemoryLeakDetector* MemoryLeakWarningPlugin::getGlobalDetector()
{
 800924c:	b598      	push	{r3, r4, r7, lr}
 800924e:	af00      	add	r7, sp, #0
    if (globalDetector == NULLPTR) {
 8009250:	4b11      	ldr	r3, [pc, #68]	; (8009298 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d11b      	bne.n	8009290 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x44>
        saveAndDisableNewDeleteOverloads();
 8009258:	f7ff fe60 	bl	8008f1c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>

        globalReporter = new MemoryLeakWarningReporter;
 800925c:	2004      	movs	r0, #4
 800925e:	f7ff fd89 	bl	8008d74 <_Znwj>
 8009262:	4603      	mov	r3, r0
 8009264:	461c      	mov	r4, r3
 8009266:	4620      	mov	r0, r4
 8009268:	f7ff ffde 	bl	8009228 <_ZN25MemoryLeakWarningReporterC1Ev>
 800926c:	4b0b      	ldr	r3, [pc, #44]	; (800929c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800926e:	601c      	str	r4, [r3, #0]
        globalDetector = new MemoryLeakDetector(globalReporter);
 8009270:	f241 1050 	movw	r0, #4432	; 0x1150
 8009274:	f7ff fd7e 	bl	8008d74 <_Znwj>
 8009278:	4603      	mov	r3, r0
 800927a:	461c      	mov	r4, r3
 800927c:	4b07      	ldr	r3, [pc, #28]	; (800929c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4619      	mov	r1, r3
 8009282:	4620      	mov	r0, r4
 8009284:	f00c fa3e 	bl	8015704 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>
 8009288:	4b03      	ldr	r3, [pc, #12]	; (8009298 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800928a:	601c      	str	r4, [r3, #0]

        restoreNewDeleteOverloads();
 800928c:	f7ff feb6 	bl	8008ffc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>
    }
    return globalDetector;
 8009290:	4b01      	ldr	r3, [pc, #4]	; (8009298 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 8009292:	681b      	ldr	r3, [r3, #0]
}
 8009294:	4618      	mov	r0, r3
 8009296:	bd98      	pop	{r3, r4, r7, pc}
 8009298:	2000074c 	.word	0x2000074c
 800929c:	20000748 	.word	0x20000748

080092a0 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>:
{
    return globalReporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool des)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	460b      	mov	r3, r1
 80092aa:	70fb      	strb	r3, [r7, #3]
    destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_ = des;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	78fa      	ldrb	r2, [r7, #3]
 80092b0:	765a      	strb	r2, [r3, #25]
}
 80092b2:	bf00      	nop
 80092b4:	370c      	adds	r7, #12
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr
	...

080092c0 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>:
    globalDetector = detector;
    globalReporter = reporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetector()
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	af00      	add	r7, sp, #0
    turnOffNewDeleteOverloads();
 80092c4:	f7ff fdbc 	bl	8008e40 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
    delete globalDetector;
 80092c8:	4b0b      	ldr	r3, [pc, #44]	; (80092f8 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d004      	beq.n	80092da <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x1a>
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	3204      	adds	r2, #4
 80092d4:	6812      	ldr	r2, [r2, #0]
 80092d6:	4618      	mov	r0, r3
 80092d8:	4790      	blx	r2
    delete globalReporter;
 80092da:	4b08      	ldr	r3, [pc, #32]	; (80092fc <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x3c>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d004      	beq.n	80092ec <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x2c>
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	3204      	adds	r2, #4
 80092e6:	6812      	ldr	r2, [r2, #0]
 80092e8:	4618      	mov	r0, r3
 80092ea:	4790      	blx	r2
    globalDetector = NULLPTR;
 80092ec:	4b02      	ldr	r3, [pc, #8]	; (80092f8 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 80092ee:	2200      	movs	r2, #0
 80092f0:	601a      	str	r2, [r3, #0]
}
 80092f2:	bf00      	nop
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	2000074c 	.word	0x2000074c
 80092fc:	20000748 	.word	0x20000748

08009300 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>:
void MemoryLeakWarningPlugin::expectLeaksInTest(size_t n)
{
    expectedLeaks_ = n;
}

MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString& name, MemoryLeakDetector* localDetector) :
 8009300:	b580      	push	{r7, lr}
 8009302:	b084      	sub	sp, #16
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	607a      	str	r2, [r7, #4]
    TestPlugin(name), ignoreAllWarnings_(false), destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_(false), expectedLeaks_(0)
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	68b9      	ldr	r1, [r7, #8]
 8009310:	4618      	mov	r0, r3
 8009312:	f006 fdfd 	bl	800ff10 <_ZN10TestPluginC1ERK12SimpleString>
 8009316:	4a14      	ldr	r2, [pc, #80]	; (8009368 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x68>)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	601a      	str	r2, [r3, #0]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2200      	movs	r2, #0
 8009320:	761a      	strb	r2, [r3, #24]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2200      	movs	r2, #0
 8009326:	765a      	strb	r2, [r3, #25]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2200      	movs	r2, #0
 800932c:	61da      	str	r2, [r3, #28]
{
    if (firstPlugin_ == NULLPTR) firstPlugin_ = this;
 800932e:	4b0f      	ldr	r3, [pc, #60]	; (800936c <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d102      	bne.n	800933c <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x3c>
 8009336:	4a0d      	ldr	r2, [pc, #52]	; (800936c <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	6013      	str	r3, [r2, #0]

    if (localDetector) memLeakDetector_ = localDetector;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d003      	beq.n	800934a <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x4a>
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	615a      	str	r2, [r3, #20]
 8009348:	e004      	b.n	8009354 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x54>
    else memLeakDetector_ = getGlobalDetector();
 800934a:	f7ff ff7f 	bl	800924c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800934e:	4602      	mov	r2, r0
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	615a      	str	r2, [r3, #20]

    memLeakDetector_->enable();
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	695b      	ldr	r3, [r3, #20]
 8009358:	4618      	mov	r0, r3
 800935a:	f00c fa69 	bl	8015830 <_ZN18MemoryLeakDetector6enableEv>
}
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	4618      	mov	r0, r3
 8009362:	3710      	adds	r7, #16
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}
 8009368:	080260c0 	.word	0x080260c0
 800936c:	20000750 	.word	0x20000750

08009370 <_ZN23MemoryLeakWarningPluginD1Ev>:

MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	4a09      	ldr	r2, [pc, #36]	; (80093a0 <_ZN23MemoryLeakWarningPluginD1Ev+0x30>)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	601a      	str	r2, [r3, #0]
{
    if (destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_) {
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	7e5b      	ldrb	r3, [r3, #25]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d003      	beq.n	800938e <_ZN23MemoryLeakWarningPluginD1Ev+0x1e>
        MemoryLeakWarningPlugin::turnOffNewDeleteOverloads();
 8009386:	f7ff fd5b 	bl	8008e40 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
        MemoryLeakWarningPlugin::destroyGlobalDetector();
 800938a:	f7ff ff99 	bl	80092c0 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4618      	mov	r0, r3
 8009392:	f006 fdf9 	bl	800ff88 <_ZN10TestPluginD1Ev>
    }
}
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4618      	mov	r0, r3
 800939a:	3708      	adds	r7, #8
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	080260c0 	.word	0x080260c0

080093a4 <_ZN23MemoryLeakWarningPluginD0Ev>:
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
}
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f7ff ffdf 	bl	8009370 <_ZN23MemoryLeakWarningPluginD1Ev>
 80093b2:	2124      	movs	r1, #36	; 0x24
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f7ff fd01 	bl	8008dbc <_ZdlPvj>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4618      	mov	r0, r3
 80093be:	3708      	adds	r7, #8
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <_ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::preTestAction(UtestShell& /*test*/, TestResult& result)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	607a      	str	r2, [r7, #4]
    memLeakDetector_->startChecking();
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	695b      	ldr	r3, [r3, #20]
 80093d4:	4618      	mov	r0, r3
 80093d6:	f00c fa0e 	bl	80157f6 <_ZN18MemoryLeakDetector13startCheckingEv>
    failureCount_ = result.getFailureCount();
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f7fd ffb0 	bl	8007340 <_ZNK10TestResult15getFailureCountEv>
 80093e0:	4602      	mov	r2, r0
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	621a      	str	r2, [r3, #32]
}
 80093e6:	bf00      	nop
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
	...

080093f0 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::postTestAction(UtestShell& test, TestResult& result)
{
 80093f0:	b590      	push	{r4, r7, lr}
 80093f2:	b097      	sub	sp, #92	; 0x5c
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	60b9      	str	r1, [r7, #8]
 80093fa:	607a      	str	r2, [r7, #4]
    memLeakDetector_->stopChecking();
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	695b      	ldr	r3, [r3, #20]
 8009400:	4618      	mov	r0, r3
 8009402:	f00c fa08 	bl	8015816 <_ZN18MemoryLeakDetector12stopCheckingEv>
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_checking);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	695b      	ldr	r3, [r3, #20]
 800940a:	2103      	movs	r1, #3
 800940c:	4618      	mov	r0, r3
 800940e:	f00c fda5 	bl	8015f5c <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 8009412:	6578      	str	r0, [r7, #84]	; 0x54

    if (!ignoreAllWarnings_ && expectedLeaks_ != leaks && failureCount_ == result.getFailureCount()) {
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	7e1b      	ldrb	r3, [r3, #24]
 8009418:	f083 0301 	eor.w	r3, r3, #1
 800941c:	b2db      	uxtb	r3, r3
 800941e:	2b00      	cmp	r3, #0
 8009420:	d00e      	beq.n	8009440 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	69db      	ldr	r3, [r3, #28]
 8009426:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009428:	429a      	cmp	r2, r3
 800942a:	d009      	beq.n	8009440 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	6a1c      	ldr	r4, [r3, #32]
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f7fd ff85 	bl	8007340 <_ZNK10TestResult15getFailureCountEv>
 8009436:	4603      	mov	r3, r0
 8009438:	429c      	cmp	r4, r3
 800943a:	d101      	bne.n	8009440 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800943c:	2301      	movs	r3, #1
 800943e:	e000      	b.n	8009442 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x52>
 8009440:	2300      	movs	r3, #0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d04c      	beq.n	80094e0 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        if(MemoryLeakWarningPlugin::areNewDeleteOverloaded()) {
 8009446:	f7ff fd4f 	bl	8008ee8 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>
 800944a:	4603      	mov	r3, r0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d028      	beq.n	80094a2 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xb2>
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	695b      	ldr	r3, [r3, #20]
 8009454:	2103      	movs	r1, #3
 8009456:	4618      	mov	r0, r3
 8009458:	f00c fd45 	bl	8015ee6 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 800945c:	4602      	mov	r2, r0
 800945e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009462:	4611      	mov	r1, r2
 8009464:	4618      	mov	r0, r3
 8009466:	f002 f858 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800946a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800946e:	f107 0310 	add.w	r3, r7, #16
 8009472:	68b9      	ldr	r1, [r7, #8]
 8009474:	4618      	mov	r0, r3
 8009476:	f003 feaf 	bl	800d1d8 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 800947a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800947e:	4618      	mov	r0, r3
 8009480:	f002 fc03 	bl	800bc8a <_ZN12SimpleStringD1Ev>
            result.addFailure(f);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	3334      	adds	r3, #52	; 0x34
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f107 0210 	add.w	r2, r7, #16
 8009490:	4611      	mov	r1, r2
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	4798      	blx	r3
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 8009496:	f107 0310 	add.w	r3, r7, #16
 800949a:	4618      	mov	r0, r3
 800949c:	f003 ff5c 	bl	800d358 <_ZN11TestFailureD1Ev>
 80094a0:	e01e      	b.n	80094e0 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        } else if(expectedLeaks_ > 0) {
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	69db      	ldr	r3, [r3, #28]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d01a      	beq.n	80094e0 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
            result.print(StringFromFormat("Warning: Expected %d leak(s), but leak detection was disabled", (int) expectedLeaks_).asCharString());
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	3338      	adds	r3, #56	; 0x38
 80094b0:	681c      	ldr	r4, [r3, #0]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	69db      	ldr	r3, [r3, #28]
 80094b6:	461a      	mov	r2, r3
 80094b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80094bc:	4910      	ldr	r1, [pc, #64]	; (8009500 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x110>)
 80094be:	4618      	mov	r0, r3
 80094c0:	f003 f8ea 	bl	800c698 <_Z16StringFromFormatPKcz>
 80094c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80094c8:	4618      	mov	r0, r3
 80094ca:	f002 fbb1 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 80094ce:	4603      	mov	r3, r0
 80094d0:	4619      	mov	r1, r3
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	47a0      	blx	r4
 80094d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80094da:	4618      	mov	r0, r3
 80094dc:	f002 fbd5 	bl	800bc8a <_ZN12SimpleStringD1Ev>
        }
    }
    memLeakDetector_->markCheckingPeriodLeaksAsNonCheckingPeriod();
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	695b      	ldr	r3, [r3, #20]
 80094e4:	4618      	mov	r0, r3
 80094e6:	f00c fd13 	bl	8015f10 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>
    ignoreAllWarnings_ = false;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2200      	movs	r2, #0
 80094ee:	761a      	strb	r2, [r3, #24]
    expectedLeaks_ = 0;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2200      	movs	r2, #0
 80094f4:	61da      	str	r2, [r3, #28]
}
 80094f6:	bf00      	nop
 80094f8:	375c      	adds	r7, #92	; 0x5c
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd90      	pop	{r4, r7, pc}
 80094fe:	bf00      	nop
 8009500:	080228cc 	.word	0x080228cc

08009504 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>:

const char* MemoryLeakWarningPlugin::FinalReport(size_t toBeDeletedLeaks)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	6039      	str	r1, [r7, #0]
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_enabled);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	695b      	ldr	r3, [r3, #20]
 8009512:	2102      	movs	r1, #2
 8009514:	4618      	mov	r0, r3
 8009516:	f00c fd21 	bl	8015f5c <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800951a:	60f8      	str	r0, [r7, #12]
    if (leaks != toBeDeletedLeaks) return memLeakDetector_->report(mem_leak_period_enabled);
 800951c:	68fa      	ldr	r2, [r7, #12]
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	429a      	cmp	r2, r3
 8009522:	d007      	beq.n	8009534 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x30>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	695b      	ldr	r3, [r3, #20]
 8009528:	2102      	movs	r1, #2
 800952a:	4618      	mov	r0, r3
 800952c:	f00c fcdb 	bl	8015ee6 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 8009530:	4603      	mov	r3, r0
 8009532:	e000      	b.n	8009536 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x32>
    return "";
 8009534:	4b02      	ldr	r3, [pc, #8]	; (8009540 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x3c>)
}
 8009536:	4618      	mov	r0, r3
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	0802290c 	.word	0x0802290c

08009544 <_ZN11FailFailureD1Ev>:
{
public:
    CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& textString = "");
};

class FailFailure : public TestFailure
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	4a05      	ldr	r2, [pc, #20]	; (8009564 <_ZN11FailFailureD1Ev+0x20>)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	601a      	str	r2, [r3, #0]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4618      	mov	r0, r3
 8009556:	f003 feff 	bl	800d358 <_ZN11TestFailureD1Ev>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	4618      	mov	r0, r3
 800955e:	3708      	adds	r7, #8
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}
 8009564:	08026108 	.word	0x08026108

08009568 <_ZN11FailFailureD0Ev>:
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f7ff ffe7 	bl	8009544 <_ZN11FailFailureD1Ev>
 8009576:	2134      	movs	r1, #52	; 0x34
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f7ff fc1f 	bl	8008dbc <_ZdlPvj>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	4618      	mov	r0, r3
 8009582:	3708      	adds	r7, #8
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <_ZN17cpputest_longlongC1Ei>:

struct cpputest_longlong
{
#if defined(__cplusplus)
  cpputest_longlong() {}
  cpputest_longlong(int) {}
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4618      	mov	r0, r3
 8009596:	370c      	adds	r7, #12
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <_ZN18cpputest_ulonglongC1Ei>:

struct cpputest_ulonglong
{
#if defined(__cplusplus)
  cpputest_ulonglong() {}
  cpputest_ulonglong(int) {}
 80095a0:	b480      	push	{r7}
 80095a2:	b083      	sub	sp, #12
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	6039      	str	r1, [r7, #0]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4618      	mov	r0, r3
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <_ZN19MockFailureReporterC1Ev>:
class MockFailureReporter
{
protected:
    bool crashOnFailure_;
public:
    MockFailureReporter() : crashOnFailure_(false){}
 80095b8:	b480      	push	{r7}
 80095ba:	b083      	sub	sp, #12
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	4a06      	ldr	r2, [pc, #24]	; (80095dc <_ZN19MockFailureReporterC1Ev+0x24>)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	601a      	str	r2, [r3, #0]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	711a      	strb	r2, [r3, #4]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	4618      	mov	r0, r3
 80095d0:	370c      	adds	r7, #12
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop
 80095dc:	080272e4 	.word	0x080272e4

080095e0 <_ZN19MockFailureReporterD1Ev>:
    virtual ~MockFailureReporter() {}
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	4a04      	ldr	r2, [pc, #16]	; (80095fc <_ZN19MockFailureReporterD1Ev+0x1c>)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	601a      	str	r2, [r3, #0]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4618      	mov	r0, r3
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr
 80095fc:	080272e4 	.word	0x080272e4

08009600 <_ZN19MockFailureReporterD0Ev>:
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f7ff ffe9 	bl	80095e0 <_ZN19MockFailureReporterD1Ev>
 800960e:	2108      	movs	r1, #8
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f7ff fbd3 	bl	8008dbc <_ZdlPvj>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4618      	mov	r0, r3
 800961a:	3708      	adds	r7, #8
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <_ZN11MockFailureD1Ev>:

class MockFailure : public TestFailure
{
public:
    MockFailure(UtestShell* test);
    virtual ~MockFailure() _destructor_override {}
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	4a05      	ldr	r2, [pc, #20]	; (8009640 <_ZN11MockFailureD1Ev+0x20>)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	601a      	str	r2, [r3, #0]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4618      	mov	r0, r3
 8009632:	f003 fe91 	bl	800d358 <_ZN11TestFailureD1Ev>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4618      	mov	r0, r3
 800963a:	3708      	adds	r7, #8
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	0802625c 	.word	0x0802625c

08009644 <_ZN11MockFailureD0Ev>:
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f7ff ffe7 	bl	8009620 <_ZN11MockFailureD1Ev>
 8009652:	2134      	movs	r1, #52	; 0x34
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f7ff fbb1 	bl	8008dbc <_ZdlPvj>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4618      	mov	r0, r3
 800965e:	3708      	adds	r7, #8
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}

08009664 <_ZN14MockNamedValueC1ERKS_>:
class MockNamedValueComparatorsAndCopiersRepository;
class MockNamedValue
{
public:
    MockNamedValue(const SimpleString& name);
    DEFAULT_COPY_CONSTRUCTOR(MockNamedValue)
 8009664:	b590      	push	{r4, r7, lr}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
 800966e:	4a16      	ldr	r2, [pc, #88]	; (80096c8 <_ZN14MockNamedValueC1ERKS_+0x64>)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	601a      	str	r2, [r3, #0]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	1d1a      	adds	r2, r3, #4
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	3304      	adds	r3, #4
 800967c:	4619      	mov	r1, r3
 800967e:	4610      	mov	r0, r2
 8009680:	f001 ff9f 	bl	800b5c2 <_ZN12SimpleStringC1ERKS_>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f103 020c 	add.w	r2, r3, #12
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	330c      	adds	r3, #12
 800968e:	4619      	mov	r1, r3
 8009690:	4610      	mov	r0, r2
 8009692:	f001 ff96 	bl	800b5c2 <_ZN12SimpleStringC1ERKS_>
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	f102 0418 	add.w	r4, r2, #24
 800969e:	3318      	adds	r3, #24
 80096a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80096a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	629a      	str	r2, [r3, #40]	; 0x28
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	631a      	str	r2, [r3, #48]	; 0x30
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4618      	mov	r0, r3
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd90      	pop	{r4, r7, pc}
 80096c8:	08027324 	.word	0x08027324

080096cc <_Z4mockRK12SimpleStringP19MockFailureReporter>:
#define MOCK_SUPPORT_SCOPE_PREFIX "!!!$$$MockingSupportScope$$$!!!"

static MockSupport global_mock;

MockSupport& mock(const SimpleString& mockName, MockFailureReporter* failureReporterForThisCall)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b086      	sub	sp, #24
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
    MockSupport& mock_support = (mockName != "") ? *global_mock.getMockSupportScope(mockName) : global_mock;
 80096d6:	f107 030c 	add.w	r3, r7, #12
 80096da:	4916      	ldr	r1, [pc, #88]	; (8009734 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x68>)
 80096dc:	4618      	mov	r0, r3
 80096de:	f001 ff1c 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80096e2:	f107 030c 	add.w	r3, r7, #12
 80096e6:	4619      	mov	r1, r3
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f002 fb1f 	bl	800bd2c <_ZneRK12SimpleStringS1_>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d005      	beq.n	8009700 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x34>
 80096f4:	6879      	ldr	r1, [r7, #4]
 80096f6:	4810      	ldr	r0, [pc, #64]	; (8009738 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 80096f8:	f000 ff70 	bl	800a5dc <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>
 80096fc:	4603      	mov	r3, r0
 80096fe:	e000      	b.n	8009702 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x36>
 8009700:	4b0d      	ldr	r3, [pc, #52]	; (8009738 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 8009702:	617b      	str	r3, [r7, #20]
 8009704:	f107 030c 	add.w	r3, r7, #12
 8009708:	4618      	mov	r0, r3
 800970a:	f002 fabe 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    mock_support.setActiveReporter(failureReporterForThisCall);
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	33a8      	adds	r3, #168	; 0xa8
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	6839      	ldr	r1, [r7, #0]
 8009718:	6978      	ldr	r0, [r7, #20]
 800971a:	4798      	blx	r3
    mock_support.setDefaultComparatorsAndCopiersRepository();
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	33ac      	adds	r3, #172	; 0xac
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	6978      	ldr	r0, [r7, #20]
 8009726:	4798      	blx	r3
    return mock_support;
 8009728:	697b      	ldr	r3, [r7, #20]
}
 800972a:	4618      	mov	r0, r3
 800972c:	3718      	adds	r7, #24
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	08022910 	.word	0x08022910
 8009738:	20000754 	.word	0x20000754

0800973c <_ZN11MockSupportC1ERK12SimpleString>:

MockSupport::MockSupport(const SimpleString& mockName)
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6039      	str	r1, [r7, #0]
    : actualCallOrder_(0), expectedCallOrder_(0), strictOrdering_(false), standardReporter_(&defaultReporter_), ignoreOtherCalls_(false), enabled_(true), lastActualFunctionCall_(NULLPTR), mockName_(mockName), tracing_(false)
 8009746:	4a21      	ldr	r2, [pc, #132]	; (80097cc <_ZN11MockSupportC1ERK12SimpleString+0x90>)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	601a      	str	r2, [r3, #0]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	605a      	str	r2, [r3, #4]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	609a      	str	r2, [r3, #8]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	731a      	strb	r2, [r3, #12]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f103 0218 	add.w	r2, r3, #24
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	615a      	str	r2, [r3, #20]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	3318      	adds	r3, #24
 800976c:	4618      	mov	r0, r3
 800976e:	f7ff ff23 	bl	80095b8 <_ZN19MockFailureReporterC1Ev>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	3320      	adds	r3, #32
 8009776:	4618      	mov	r0, r3
 8009778:	f010 fefc 	bl	801a574 <_ZN21MockExpectedCallsListC1Ev>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2201      	movs	r2, #1
 8009788:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	62da      	str	r2, [r3, #44]	; 0x2c
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	3330      	adds	r3, #48	; 0x30
 8009796:	4618      	mov	r0, r3
 8009798:	f014 fbe8 	bl	801df6c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	3338      	adds	r3, #56	; 0x38
 80097a0:	4618      	mov	r0, r3
 80097a2:	f014 faf2 	bl	801dd8a <_ZN18MockNamedValueListC1Ev>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	333c      	adds	r3, #60	; 0x3c
 80097aa:	6839      	ldr	r1, [r7, #0]
 80097ac:	4618      	mov	r0, r3
 80097ae:	f001 ff08 	bl	800b5c2 <_ZN12SimpleStringC1ERKS_>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
{
    setActiveReporter(NULLPTR);
 80097ba:	2100      	movs	r1, #0
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 f894 	bl	80098ea <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>
}
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4618      	mov	r0, r3
 80097c6:	3708      	adds	r7, #8
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	08026134 	.word	0x08026134

080097d0 <_ZN11MockSupportD1Ev>:

MockSupport::~MockSupport()
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b082      	sub	sp, #8
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	4a0d      	ldr	r2, [pc, #52]	; (8009810 <_ZN11MockSupportD1Ev+0x40>)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	601a      	str	r2, [r3, #0]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	333c      	adds	r3, #60	; 0x3c
 80097e2:	4618      	mov	r0, r3
 80097e4:	f002 fa51 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	3330      	adds	r3, #48	; 0x30
 80097ec:	4618      	mov	r0, r3
 80097ee:	f014 fbd1 	bl	801df94 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	3320      	adds	r3, #32
 80097f6:	4618      	mov	r0, r3
 80097f8:	f010 fed0 	bl	801a59c <_ZN21MockExpectedCallsListD1Ev>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	3318      	adds	r3, #24
 8009800:	4618      	mov	r0, r3
 8009802:	f7ff feed 	bl	80095e0 <_ZN19MockFailureReporterD1Ev>
{
}
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	4618      	mov	r0, r3
 800980a:	3708      	adds	r7, #8
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}
 8009810:	08026134 	.word	0x08026134

08009814 <_ZN11MockSupportD0Ev>:
MockSupport::~MockSupport()
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
}
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f7ff ffd7 	bl	80097d0 <_ZN11MockSupportD1Ev>
 8009822:	2148      	movs	r1, #72	; 0x48
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f7ff fac9 	bl	8008dbc <_ZdlPvj>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	4618      	mov	r0, r3
 800982e:	3708      	adds	r7, #8
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <_ZN11MockSupport14crashOnFailureEb>:

void MockSupport::crashOnFailure(bool shouldCrash)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	460b      	mov	r3, r1
 800983e:	70fb      	strb	r3, [r7, #3]
    activeReporter_->crashOnFailure(shouldCrash);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	691a      	ldr	r2, [r3, #16]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	691b      	ldr	r3, [r3, #16]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	3310      	adds	r3, #16
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	78f9      	ldrb	r1, [r7, #3]
 8009850:	4610      	mov	r0, r2
 8009852:	4798      	blx	r3
}
 8009854:	bf00      	nop
 8009856:	3708      	adds	r7, #8
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter>:

void MockSupport::setMockFailureStandardReporter(MockFailureReporter* reporter)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
    standardReporter_ = (reporter != NULLPTR) ? reporter : &defaultReporter_;
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d102      	bne.n	8009872 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x16>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	3318      	adds	r3, #24
 8009870:	e000      	b.n	8009874 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x18>
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	6153      	str	r3, [r2, #20]

    if (lastActualFunctionCall_)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987c:	2b00      	cmp	r3, #0
 800987e:	d00a      	beq.n	8009896 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x3a>
        lastActualFunctionCall_->setMockFailureReporter(standardReporter_);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	33c8      	adds	r3, #200	; 0xc8
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	6952      	ldr	r2, [r2, #20]
 8009892:	4611      	mov	r1, r2
 8009894:	4798      	blx	r3

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	3338      	adds	r3, #56	; 0x38
 800989a:	4618      	mov	r0, r3
 800989c:	f014 fb0b 	bl	801deb6 <_ZN18MockNamedValueList5beginEv>
 80098a0:	60f8      	str	r0, [r7, #12]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d01c      	beq.n	80098e2 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x86>
        if (getMockSupport(p)) getMockSupport(p)->setMockFailureStandardReporter(standardReporter_);
 80098a8:	68f9      	ldr	r1, [r7, #12]
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 ff26 	bl	800a6fc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80098b0:	4603      	mov	r3, r0
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	bf14      	ite	ne
 80098b6:	2301      	movne	r3, #1
 80098b8:	2300      	moveq	r3, #0
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d00b      	beq.n	80098d8 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x7c>
 80098c0:	68f9      	ldr	r1, [r7, #12]
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 ff1a 	bl	800a6fc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80098c8:	4603      	mov	r3, r0
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	32a4      	adds	r2, #164	; 0xa4
 80098ce:	6812      	ldr	r2, [r2, #0]
 80098d0:	6879      	ldr	r1, [r7, #4]
 80098d2:	6949      	ldr	r1, [r1, #20]
 80098d4:	4618      	mov	r0, r3
 80098d6:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f014 f9f5 	bl	801dcc8 <_ZN22MockNamedValueListNode4nextEv>
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	e7df      	b.n	80098a2 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x46>
}
 80098e2:	bf00      	nop
 80098e4:	3710      	adds	r7, #16
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}

080098ea <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>:

void MockSupport::setActiveReporter(MockFailureReporter* reporter)
{
 80098ea:	b480      	push	{r7}
 80098ec:	b083      	sub	sp, #12
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
 80098f2:	6039      	str	r1, [r7, #0]
    activeReporter_ = (reporter) ? reporter : standardReporter_;
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d102      	bne.n	8009900 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x16>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	695b      	ldr	r3, [r3, #20]
 80098fe:	e000      	b.n	8009902 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x18>
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	6113      	str	r3, [r2, #16]
}
 8009906:	bf00      	nop
 8009908:	370c      	adds	r7, #12
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr

08009912 <_ZN11MockSupport41setDefaultComparatorsAndCopiersRepositoryEv>:

void MockSupport::setDefaultComparatorsAndCopiersRepository()
{
 8009912:	b580      	push	{r7, lr}
 8009914:	b082      	sub	sp, #8
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
    MockNamedValue::setDefaultComparatorsAndCopiersRepository(&comparatorsAndCopiersRepository_);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	3330      	adds	r3, #48	; 0x30
 800991e:	4618      	mov	r0, r3
 8009920:	f012 fb10 	bl	801bf44 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>
}
 8009924:	bf00      	nop
 8009926:	3708      	adds	r7, #8
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockSupport::installComparator(const SimpleString& typeName, MockNamedValueComparator& comparator)
{
 800992c:	b590      	push	{r4, r7, lr}
 800992e:	b087      	sub	sp, #28
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installComparator(typeName, comparator);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	3330      	adds	r3, #48	; 0x30
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	68b9      	ldr	r1, [r7, #8]
 8009940:	4618      	mov	r0, r3
 8009942:	f014 fb75 	bl	801e030 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	3338      	adds	r3, #56	; 0x38
 800994a:	4618      	mov	r0, r3
 800994c:	f014 fab3 	bl	801deb6 <_ZN18MockNamedValueList5beginEv>
 8009950:	6178      	str	r0, [r7, #20]
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d01c      	beq.n	8009992 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installComparator(typeName, comparator);
 8009958:	6979      	ldr	r1, [r7, #20]
 800995a:	68f8      	ldr	r0, [r7, #12]
 800995c:	f000 fece 	bl	800a6fc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	bf14      	ite	ne
 8009966:	2301      	movne	r3, #1
 8009968:	2300      	moveq	r3, #0
 800996a:	b2db      	uxtb	r3, r3
 800996c:	2b00      	cmp	r3, #0
 800996e:	d00b      	beq.n	8009988 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x5c>
 8009970:	6979      	ldr	r1, [r7, #20]
 8009972:	68f8      	ldr	r0, [r7, #12]
 8009974:	f000 fec2 	bl	800a6fc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009978:	4603      	mov	r3, r0
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	32b0      	adds	r2, #176	; 0xb0
 800997e:	6814      	ldr	r4, [r2, #0]
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	68b9      	ldr	r1, [r7, #8]
 8009984:	4618      	mov	r0, r3
 8009986:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009988:	6978      	ldr	r0, [r7, #20]
 800998a:	f014 f99d 	bl	801dcc8 <_ZN22MockNamedValueListNode4nextEv>
 800998e:	6178      	str	r0, [r7, #20]
 8009990:	e7df      	b.n	8009952 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x26>
}
 8009992:	bf00      	nop
 8009994:	371c      	adds	r7, #28
 8009996:	46bd      	mov	sp, r7
 8009998:	bd90      	pop	{r4, r7, pc}

0800999a <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockSupport::installCopier(const SimpleString& typeName, MockNamedValueCopier& copier)
{
 800999a:	b590      	push	{r4, r7, lr}
 800999c:	b087      	sub	sp, #28
 800999e:	af00      	add	r7, sp, #0
 80099a0:	60f8      	str	r0, [r7, #12]
 80099a2:	60b9      	str	r1, [r7, #8]
 80099a4:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installCopier(typeName, copier);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	3330      	adds	r3, #48	; 0x30
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	68b9      	ldr	r1, [r7, #8]
 80099ae:	4618      	mov	r0, r3
 80099b0:	f014 fb5a 	bl	801e068 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	3338      	adds	r3, #56	; 0x38
 80099b8:	4618      	mov	r0, r3
 80099ba:	f014 fa7c 	bl	801deb6 <_ZN18MockNamedValueList5beginEv>
 80099be:	6178      	str	r0, [r7, #20]
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d01c      	beq.n	8009a00 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installCopier(typeName, copier);
 80099c6:	6979      	ldr	r1, [r7, #20]
 80099c8:	68f8      	ldr	r0, [r7, #12]
 80099ca:	f000 fe97 	bl	800a6fc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	bf14      	ite	ne
 80099d4:	2301      	movne	r3, #1
 80099d6:	2300      	moveq	r3, #0
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d00b      	beq.n	80099f6 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x5c>
 80099de:	6979      	ldr	r1, [r7, #20]
 80099e0:	68f8      	ldr	r0, [r7, #12]
 80099e2:	f000 fe8b 	bl	800a6fc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80099e6:	4603      	mov	r3, r0
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	32b4      	adds	r2, #180	; 0xb4
 80099ec:	6814      	ldr	r4, [r2, #0]
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	68b9      	ldr	r1, [r7, #8]
 80099f2:	4618      	mov	r0, r3
 80099f4:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80099f6:	6978      	ldr	r0, [r7, #20]
 80099f8:	f014 f966 	bl	801dcc8 <_ZN22MockNamedValueListNode4nextEv>
 80099fc:	6178      	str	r0, [r7, #20]
 80099fe:	e7df      	b.n	80099c0 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x26>
}
 8009a00:	bf00      	nop
 8009a02:	371c      	adds	r7, #28
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd90      	pop	{r4, r7, pc}

08009a08 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository>:

void MockSupport::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
    comparatorsAndCopiersRepository_.installComparatorsAndCopiers(repository);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	3330      	adds	r3, #48	; 0x30
 8009a16:	6839      	ldr	r1, [r7, #0]
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f014 fb91 	bl	801e140 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	3338      	adds	r3, #56	; 0x38
 8009a22:	4618      	mov	r0, r3
 8009a24:	f014 fa47 	bl	801deb6 <_ZN18MockNamedValueList5beginEv>
 8009a28:	60f8      	str	r0, [r7, #12]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d01b      	beq.n	8009a68 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x60>
        if (getMockSupport(p)) getMockSupport(p)->installComparatorsAndCopiers(repository);
 8009a30:	68f9      	ldr	r1, [r7, #12]
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 fe62 	bl	800a6fc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	bf14      	ite	ne
 8009a3e:	2301      	movne	r3, #1
 8009a40:	2300      	moveq	r3, #0
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d00a      	beq.n	8009a5e <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x56>
 8009a48:	68f9      	ldr	r1, [r7, #12]
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 fe56 	bl	800a6fc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009a50:	4603      	mov	r3, r0
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	32b8      	adds	r2, #184	; 0xb8
 8009a56:	6812      	ldr	r2, [r2, #0]
 8009a58:	6839      	ldr	r1, [r7, #0]
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	f014 f932 	bl	801dcc8 <_ZN22MockNamedValueListNode4nextEv>
 8009a64:	60f8      	str	r0, [r7, #12]
 8009a66:	e7e0      	b.n	8009a2a <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x22>
}
 8009a68:	bf00      	nop
 8009a6a:	3710      	adds	r7, #16
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv>:

void MockSupport::removeAllComparatorsAndCopiers()
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
    comparatorsAndCopiersRepository_.clear();
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	3330      	adds	r3, #48	; 0x30
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f014 fab8 	bl	801dff2 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	3338      	adds	r3, #56	; 0x38
 8009a86:	4618      	mov	r0, r3
 8009a88:	f014 fa15 	bl	801deb6 <_ZN18MockNamedValueList5beginEv>
 8009a8c:	60f8      	str	r0, [r7, #12]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d01a      	beq.n	8009aca <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x5a>
        if (getMockSupport(p)) getMockSupport(p)->removeAllComparatorsAndCopiers();
 8009a94:	68f9      	ldr	r1, [r7, #12]
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 fe30 	bl	800a6fc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	bf14      	ite	ne
 8009aa2:	2301      	movne	r3, #1
 8009aa4:	2300      	moveq	r3, #0
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d009      	beq.n	8009ac0 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x50>
 8009aac:	68f9      	ldr	r1, [r7, #12]
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 fe24 	bl	800a6fc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	32bc      	adds	r2, #188	; 0xbc
 8009aba:	6812      	ldr	r2, [r2, #0]
 8009abc:	4618      	mov	r0, r3
 8009abe:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009ac0:	68f8      	ldr	r0, [r7, #12]
 8009ac2:	f014 f901 	bl	801dcc8 <_ZN22MockNamedValueListNode4nextEv>
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	e7e1      	b.n	8009a8e <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x1e>
}
 8009aca:	bf00      	nop
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <_ZN11MockSupport5clearEv>:

void MockSupport::clear()
{
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b084      	sub	sp, #16
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
    delete lastActualFunctionCall_;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d004      	beq.n	8009aec <_ZN11MockSupport5clearEv+0x1a>
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	3204      	adds	r2, #4
 8009ae6:	6812      	ldr	r2, [r2, #0]
 8009ae8:	4618      	mov	r0, r3
 8009aea:	4790      	blx	r2
    lastActualFunctionCall_ = NULLPTR;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	62da      	str	r2, [r3, #44]	; 0x2c

    tracing_ = false;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    MockActualCallTrace::clearInstance();
 8009afa:	f00e fe0d 	bl	8018718 <_ZN19MockActualCallTrace13clearInstanceEv>

    expectations_.deleteAllExpectationsAndClearList();
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	3320      	adds	r3, #32
 8009b02:	4618      	mov	r0, r3
 8009b04:	f011 f937 	bl	801ad76 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>
    ignoreOtherCalls_ = false;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    enabled_ = true;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    actualCallOrder_ = 0;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	605a      	str	r2, [r3, #4]
    expectedCallOrder_ = 0;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2200      	movs	r2, #0
 8009b22:	609a      	str	r2, [r3, #8]
    strictOrdering_ = false;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	731a      	strb	r2, [r3, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	3338      	adds	r3, #56	; 0x38
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f014 f9c1 	bl	801deb6 <_ZN18MockNamedValueList5beginEv>
 8009b34:	60f8      	str	r0, [r7, #12]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d01a      	beq.n	8009b72 <_ZN11MockSupport5clearEv+0xa0>
        MockSupport* support = getMockSupport(p);
 8009b3c:	68f9      	ldr	r1, [r7, #12]
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 fddc 	bl	800a6fc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009b44:	60b8      	str	r0, [r7, #8]
        if (support) {
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00d      	beq.n	8009b68 <_ZN11MockSupport5clearEv+0x96>
            support->clear();
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	339c      	adds	r3, #156	; 0x9c
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	68b8      	ldr	r0, [r7, #8]
 8009b56:	4798      	blx	r3
            delete support;
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d004      	beq.n	8009b68 <_ZN11MockSupport5clearEv+0x96>
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	3204      	adds	r2, #4
 8009b62:	6812      	ldr	r2, [r2, #0]
 8009b64:	4618      	mov	r0, r3
 8009b66:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 8009b68:	68f8      	ldr	r0, [r7, #12]
 8009b6a:	f014 f8ad 	bl	801dcc8 <_ZN22MockNamedValueListNode4nextEv>
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	e7e1      	b.n	8009b36 <_ZN11MockSupport5clearEv+0x64>
        }
    }
    data_.clear();
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	3338      	adds	r3, #56	; 0x38
 8009b76:	4618      	mov	r0, r3
 8009b78:	f014 f915 	bl	801dda6 <_ZN18MockNamedValueList5clearEv>
}
 8009b7c:	bf00      	nop
 8009b7e:	3710      	adds	r7, #16
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <_ZN11MockSupport11strictOrderEv>:

void MockSupport::strictOrder()
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
    strictOrdering_ = true;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	731a      	strb	r2, [r3, #12]
}
 8009b92:	bf00      	nop
 8009b94:	370c      	adds	r7, #12
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr
	...

08009ba0 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>:

SimpleString MockSupport::appendScopeToName(const SimpleString& functionName)
{
 8009ba0:	b590      	push	{r4, r7, lr}
 8009ba2:	b089      	sub	sp, #36	; 0x24
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	607a      	str	r2, [r7, #4]
    if (mockName_.isEmpty()) return functionName;
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	333c      	adds	r3, #60	; 0x3c
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f002 f859 	bl	800bc68 <_ZNK12SimpleString7isEmptyEv>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d004      	beq.n	8009bc6 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x26>
 8009bbc:	6879      	ldr	r1, [r7, #4]
 8009bbe:	68f8      	ldr	r0, [r7, #12]
 8009bc0:	f001 fcff 	bl	800b5c2 <_ZN12SimpleStringC1ERKS_>
 8009bc4:	e021      	b.n	8009c0a <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x6a>
    return mockName_ + "::" + functionName;
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8009bcc:	f107 0318 	add.w	r3, r7, #24
 8009bd0:	4910      	ldr	r1, [pc, #64]	; (8009c14 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x74>)
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f001 fca1 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8009bd8:	f107 0310 	add.w	r3, r7, #16
 8009bdc:	f107 0218 	add.w	r2, r7, #24
 8009be0:	4621      	mov	r1, r4
 8009be2:	4618      	mov	r0, r3
 8009be4:	f002 f8b3 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f107 0110 	add.w	r1, r7, #16
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f002 f8ac 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 8009bf6:	f107 0310 	add.w	r3, r7, #16
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f002 f845 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8009c00:	f107 0318 	add.w	r3, r7, #24
 8009c04:	4618      	mov	r0, r3
 8009c06:	f002 f840 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 8009c0a:	68f8      	ldr	r0, [r7, #12]
 8009c0c:	3724      	adds	r7, #36	; 0x24
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd90      	pop	{r4, r7, pc}
 8009c12:	bf00      	nop
 8009c14:	08022914 	.word	0x08022914

08009c18 <_ZN11MockSupport13expectOneCallERK12SimpleString>:

MockExpectedCall& MockSupport::expectOneCall(const SimpleString& functionName)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
    return expectNCalls(1, functionName);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	3314      	adds	r3, #20
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	683a      	ldr	r2, [r7, #0]
 8009c2c:	2101      	movs	r1, #1
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	4798      	blx	r3
 8009c32:	4603      	mov	r3, r0
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3708      	adds	r7, #8
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <_ZN11MockSupport12expectNoCallERK12SimpleString>:

void MockSupport::expectNoCall(const SimpleString& functionName)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
    expectNCalls(0, functionName);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	3314      	adds	r3, #20
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	683a      	ldr	r2, [r7, #0]
 8009c50:	2100      	movs	r1, #0
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	4798      	blx	r3
}
 8009c56:	bf00      	nop
 8009c58:	3708      	adds	r7, #8
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
	...

08009c60 <_ZN11MockSupport12expectNCallsEjRK12SimpleString>:

MockExpectedCall& MockSupport::expectNCalls(unsigned int amount, const SimpleString& functionName)
{
 8009c60:	b590      	push	{r4, r7, lr}
 8009c62:	b089      	sub	sp, #36	; 0x24
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	607a      	str	r2, [r7, #4]
    if (!enabled_) return MockIgnoredExpectedCall::instance();
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8009c72:	f083 0301 	eor.w	r3, r3, #1
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d003      	beq.n	8009c84 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x24>
 8009c7c:	f010 fbf6 	bl	801a46c <_ZN23MockIgnoredExpectedCall8instanceEv>
 8009c80:	4603      	mov	r3, r0
 8009c82:	e041      	b.n	8009d08 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xa8>

    countCheck();
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f000 fb1b 	bl	800a2c0 <_ZN11MockSupport10countCheckEv>

    MockCheckedExpectedCall* call = new MockCheckedExpectedCall(amount);
 8009c8a:	22a5      	movs	r2, #165	; 0xa5
 8009c8c:	4920      	ldr	r1, [pc, #128]	; (8009d10 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xb0>)
 8009c8e:	2070      	movs	r0, #112	; 0x70
 8009c90:	f7ff f880 	bl	8008d94 <_ZnwjPKci>
 8009c94:	4604      	mov	r4, r0
 8009c96:	68b9      	ldr	r1, [r7, #8]
 8009c98:	4620      	mov	r0, r4
 8009c9a:	f00f f8f3 	bl	8018e84 <_ZN23MockCheckedExpectedCallC1Ej>
 8009c9e:	61fc      	str	r4, [r7, #28]
    call->withName(appendScopeToName(functionName));
 8009ca0:	69fb      	ldr	r3, [r7, #28]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	3308      	adds	r3, #8
 8009ca6:	681c      	ldr	r4, [r3, #0]
 8009ca8:	f107 0314 	add.w	r3, r7, #20
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	68f9      	ldr	r1, [r7, #12]
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f7ff ff75 	bl	8009ba0 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>
 8009cb6:	f107 0314 	add.w	r3, r7, #20
 8009cba:	4619      	mov	r1, r3
 8009cbc:	69f8      	ldr	r0, [r7, #28]
 8009cbe:	47a0      	blx	r4
 8009cc0:	f107 0314 	add.w	r3, r7, #20
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f001 ffe0 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    if (strictOrdering_) {
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	7b1b      	ldrb	r3, [r3, #12]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d013      	beq.n	8009cfa <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x9a>
        call->withCallOrder(expectedCallOrder_ + 1, expectedCallOrder_ + amount);
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	3310      	adds	r3, #16
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	6892      	ldr	r2, [r2, #8]
 8009cde:	1c50      	adds	r0, r2, #1
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	6891      	ldr	r1, [r2, #8]
 8009ce4:	68ba      	ldr	r2, [r7, #8]
 8009ce6:	440a      	add	r2, r1
 8009ce8:	4601      	mov	r1, r0
 8009cea:	69f8      	ldr	r0, [r7, #28]
 8009cec:	4798      	blx	r3
        expectedCallOrder_ += amount;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	689a      	ldr	r2, [r3, #8]
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	441a      	add	r2, r3
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	609a      	str	r2, [r3, #8]
    }
    expectations_.addExpectedCall(call);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	3320      	adds	r3, #32
 8009cfe:	69f9      	ldr	r1, [r7, #28]
 8009d00:	4618      	mov	r0, r3
 8009d02:	f010 fd89 	bl	801a818 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>
    return *call;
 8009d06:	69fb      	ldr	r3, [r7, #28]
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3724      	adds	r7, #36	; 0x24
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd90      	pop	{r4, r7, pc}
 8009d10:	08022918 	.word	0x08022918

08009d14 <_ZN11MockSupport16createActualCallEv>:

MockCheckedActualCall* MockSupport::createActualCall()
{
 8009d14:	b5b0      	push	{r4, r5, r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
    lastActualFunctionCall_ = new MockCheckedActualCall(++actualCallOrder_, activeReporter_, expectations_);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	1c5a      	adds	r2, r3, #1
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	605a      	str	r2, [r3, #4]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	685d      	ldr	r5, [r3, #4]
 8009d2a:	22b1      	movs	r2, #177	; 0xb1
 8009d2c:	490a      	ldr	r1, [pc, #40]	; (8009d58 <_ZN11MockSupport16createActualCallEv+0x44>)
 8009d2e:	202c      	movs	r0, #44	; 0x2c
 8009d30:	f7ff f830 	bl	8008d94 <_ZnwjPKci>
 8009d34:	4604      	mov	r4, r0
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	691a      	ldr	r2, [r3, #16]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	3320      	adds	r3, #32
 8009d3e:	4629      	mov	r1, r5
 8009d40:	4620      	mov	r0, r4
 8009d42:	f00c fbdb 	bl	80164fc <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	62dc      	str	r4, [r3, #44]	; 0x2c
    return lastActualFunctionCall_;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3708      	adds	r7, #8
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bdb0      	pop	{r4, r5, r7, pc}
 8009d56:	bf00      	nop
 8009d58:	08022918 	.word	0x08022918

08009d5c <_ZN11MockSupport13callIsIgnoredERK12SimpleString>:

bool MockSupport::callIsIgnored(const SimpleString& functionName)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
    return ignoreOtherCalls_ && !expectations_.hasExpectationWithName(functionName);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d00d      	beq.n	8009d8c <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	3320      	adds	r3, #32
 8009d74:	6839      	ldr	r1, [r7, #0]
 8009d76:	4618      	mov	r0, r3
 8009d78:	f010 fd2a 	bl	801a7d0 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	f083 0301 	eor.w	r3, r3, #1
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d001      	beq.n	8009d8c <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 8009d88:	2301      	movs	r3, #1
 8009d8a:	e000      	b.n	8009d8e <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x32>
 8009d8c:	2300      	movs	r3, #0
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3708      	adds	r7, #8
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <_ZN11MockSupport10actualCallERK12SimpleString>:

MockActualCall& MockSupport::actualCall(const SimpleString& functionName)
{
 8009d96:	b590      	push	{r4, r7, lr}
 8009d98:	b087      	sub	sp, #28
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
 8009d9e:	6039      	str	r1, [r7, #0]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 8009da0:	f107 030c 	add.w	r3, r7, #12
 8009da4:	683a      	ldr	r2, [r7, #0]
 8009da6:	6879      	ldr	r1, [r7, #4]
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7ff fef9 	bl	8009ba0 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>

    if (lastActualFunctionCall_) {
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d014      	beq.n	8009de0 <_ZN11MockSupport10actualCallERK12SimpleString+0x4a>
        lastActualFunctionCall_->checkExpectations();
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	33c4      	adds	r3, #196	; 0xc4
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4610      	mov	r0, r2
 8009dc6:	4798      	blx	r3
        delete lastActualFunctionCall_;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d004      	beq.n	8009dda <_ZN11MockSupport10actualCallERK12SimpleString+0x44>
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	3204      	adds	r2, #4
 8009dd4:	6812      	ldr	r2, [r2, #0]
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	4790      	blx	r2
        lastActualFunctionCall_ = NULLPTR;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    if (!enabled_) return MockIgnoredActualCall::instance();
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8009de6:	f083 0301 	eor.w	r3, r3, #1
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d004      	beq.n	8009dfa <_ZN11MockSupport10actualCallERK12SimpleString+0x64>
 8009df0:	f00e fcbe 	bl	8018770 <_ZN21MockIgnoredActualCall8instanceEv>
 8009df4:	4603      	mov	r3, r0
 8009df6:	461c      	mov	r4, r3
 8009df8:	e02f      	b.n	8009e5a <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    if (tracing_) return MockActualCallTrace::instance().withName(scopeFunctionName);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d00b      	beq.n	8009e1c <_ZN11MockSupport10actualCallERK12SimpleString+0x86>
 8009e04:	f00e fc6e 	bl	80186e4 <_ZN19MockActualCallTrace8instanceEv>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	3208      	adds	r2, #8
 8009e0e:	6812      	ldr	r2, [r2, #0]
 8009e10:	f107 010c 	add.w	r1, r7, #12
 8009e14:	4618      	mov	r0, r3
 8009e16:	4790      	blx	r2
 8009e18:	4604      	mov	r4, r0
 8009e1a:	e01e      	b.n	8009e5a <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>


    if (callIsIgnored(scopeFunctionName)) {
 8009e1c:	f107 030c 	add.w	r3, r7, #12
 8009e20:	4619      	mov	r1, r3
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f7ff ff9a 	bl	8009d5c <_ZN11MockSupport13callIsIgnoredERK12SimpleString>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d004      	beq.n	8009e38 <_ZN11MockSupport10actualCallERK12SimpleString+0xa2>
        return MockIgnoredActualCall::instance();
 8009e2e:	f00e fc9f 	bl	8018770 <_ZN21MockIgnoredActualCall8instanceEv>
 8009e32:	4603      	mov	r3, r0
 8009e34:	461c      	mov	r4, r3
 8009e36:	e010      	b.n	8009e5a <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    }

    MockCheckedActualCall* call = createActualCall();
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	33c0      	adds	r3, #192	; 0xc0
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	4798      	blx	r3
 8009e44:	6178      	str	r0, [r7, #20]
    call->withName(scopeFunctionName);
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	3308      	adds	r3, #8
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f107 020c 	add.w	r2, r7, #12
 8009e52:	4611      	mov	r1, r2
 8009e54:	6978      	ldr	r0, [r7, #20]
 8009e56:	4798      	blx	r3
    return *call;
 8009e58:	697c      	ldr	r4, [r7, #20]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 8009e5a:	f107 030c 	add.w	r3, r7, #12
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f001 ff13 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8009e64:	4623      	mov	r3, r4
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	371c      	adds	r7, #28
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd90      	pop	{r4, r7, pc}

08009e6e <_ZN11MockSupport16ignoreOtherCallsEv>:

void MockSupport::ignoreOtherCalls()
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b084      	sub	sp, #16
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
    ignoreOtherCalls_ = true;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2201      	movs	r2, #1
 8009e7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	3338      	adds	r3, #56	; 0x38
 8009e82:	4618      	mov	r0, r3
 8009e84:	f014 f817 	bl	801deb6 <_ZN18MockNamedValueList5beginEv>
 8009e88:	60f8      	str	r0, [r7, #12]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d01a      	beq.n	8009ec6 <_ZN11MockSupport16ignoreOtherCallsEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->ignoreOtherCalls();
 8009e90:	68f9      	ldr	r1, [r7, #12]
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 fc32 	bl	800a6fc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	bf14      	ite	ne
 8009e9e:	2301      	movne	r3, #1
 8009ea0:	2300      	moveq	r3, #0
 8009ea2:	b2db      	uxtb	r3, r3
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d009      	beq.n	8009ebc <_ZN11MockSupport16ignoreOtherCallsEv+0x4e>
 8009ea8:	68f9      	ldr	r1, [r7, #12]
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fc26 	bl	800a6fc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	3290      	adds	r2, #144	; 0x90
 8009eb6:	6812      	ldr	r2, [r2, #0]
 8009eb8:	4618      	mov	r0, r3
 8009eba:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009ebc:	68f8      	ldr	r0, [r7, #12]
 8009ebe:	f013 ff03 	bl	801dcc8 <_ZN22MockNamedValueListNode4nextEv>
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	e7e1      	b.n	8009e8a <_ZN11MockSupport16ignoreOtherCallsEv+0x1c>
}
 8009ec6:	bf00      	nop
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <_ZN11MockSupport7disableEv>:

void MockSupport::disable()
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b084      	sub	sp, #16
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	3338      	adds	r3, #56	; 0x38
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f013 ffe7 	bl	801deb6 <_ZN18MockNamedValueList5beginEv>
 8009ee8:	60f8      	str	r0, [r7, #12]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d01a      	beq.n	8009f26 <_ZN11MockSupport7disableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->disable();
 8009ef0:	68f9      	ldr	r1, [r7, #12]
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 fc02 	bl	800a6fc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	bf14      	ite	ne
 8009efe:	2301      	movne	r3, #1
 8009f00:	2300      	moveq	r3, #0
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d009      	beq.n	8009f1c <_ZN11MockSupport7disableEv+0x4e>
 8009f08:	68f9      	ldr	r1, [r7, #12]
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 fbf6 	bl	800a6fc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009f10:	4603      	mov	r3, r0
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	3284      	adds	r2, #132	; 0x84
 8009f16:	6812      	ldr	r2, [r2, #0]
 8009f18:	4618      	mov	r0, r3
 8009f1a:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f013 fed3 	bl	801dcc8 <_ZN22MockNamedValueListNode4nextEv>
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	e7e1      	b.n	8009eea <_ZN11MockSupport7disableEv+0x1c>
}
 8009f26:	bf00      	nop
 8009f28:	3710      	adds	r7, #16
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <_ZN11MockSupport6enableEv>:

void MockSupport::enable()
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b084      	sub	sp, #16
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	3338      	adds	r3, #56	; 0x38
 8009f42:	4618      	mov	r0, r3
 8009f44:	f013 ffb7 	bl	801deb6 <_ZN18MockNamedValueList5beginEv>
 8009f48:	60f8      	str	r0, [r7, #12]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d01a      	beq.n	8009f86 <_ZN11MockSupport6enableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->enable();
 8009f50:	68f9      	ldr	r1, [r7, #12]
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 fbd2 	bl	800a6fc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	bf14      	ite	ne
 8009f5e:	2301      	movne	r3, #1
 8009f60:	2300      	moveq	r3, #0
 8009f62:	b2db      	uxtb	r3, r3
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d009      	beq.n	8009f7c <_ZN11MockSupport6enableEv+0x4e>
 8009f68:	68f9      	ldr	r1, [r7, #12]
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 fbc6 	bl	800a6fc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009f70:	4603      	mov	r3, r0
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	3288      	adds	r2, #136	; 0x88
 8009f76:	6812      	ldr	r2, [r2, #0]
 8009f78:	4618      	mov	r0, r3
 8009f7a:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009f7c:	68f8      	ldr	r0, [r7, #12]
 8009f7e:	f013 fea3 	bl	801dcc8 <_ZN22MockNamedValueListNode4nextEv>
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	e7e1      	b.n	8009f4a <_ZN11MockSupport6enableEv+0x1c>
}
 8009f86:	bf00      	nop
 8009f88:	3710      	adds	r7, #16
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}

08009f8e <_ZN11MockSupport7tracingEb>:

void MockSupport::tracing(bool enabled)
{
 8009f8e:	b580      	push	{r7, lr}
 8009f90:	b084      	sub	sp, #16
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
 8009f96:	460b      	mov	r3, r1
 8009f98:	70fb      	strb	r3, [r7, #3]
    tracing_ = enabled;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	78fa      	ldrb	r2, [r7, #3]
 8009f9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	3338      	adds	r3, #56	; 0x38
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f013 ff85 	bl	801deb6 <_ZN18MockNamedValueList5beginEv>
 8009fac:	60f8      	str	r0, [r7, #12]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d01b      	beq.n	8009fec <_ZN11MockSupport7tracingEb+0x5e>
        if (getMockSupport(p)) getMockSupport(p)->tracing(enabled);
 8009fb4:	68f9      	ldr	r1, [r7, #12]
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 fba0 	bl	800a6fc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	bf14      	ite	ne
 8009fc2:	2301      	movne	r3, #1
 8009fc4:	2300      	moveq	r3, #0
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d00a      	beq.n	8009fe2 <_ZN11MockSupport7tracingEb+0x54>
 8009fcc:	68f9      	ldr	r1, [r7, #12]
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 fb94 	bl	800a6fc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	328c      	adds	r2, #140	; 0x8c
 8009fda:	6812      	ldr	r2, [r2, #0]
 8009fdc:	78f9      	ldrb	r1, [r7, #3]
 8009fde:	4618      	mov	r0, r3
 8009fe0:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009fe2:	68f8      	ldr	r0, [r7, #12]
 8009fe4:	f013 fe70 	bl	801dcc8 <_ZN22MockNamedValueListNode4nextEv>
 8009fe8:	60f8      	str	r0, [r7, #12]
 8009fea:	e7e0      	b.n	8009fae <_ZN11MockSupport7tracingEb+0x20>
}
 8009fec:	bf00      	nop
 8009fee:	3710      	adds	r7, #16
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <_ZN11MockSupport17expectedCallsLeftEv>:
{
    return MockActualCallTrace::instance().getTraceOutput();
}

bool MockSupport::expectedCallsLeft()
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
    int callsLeft = expectations_.hasUnfulfilledExpectations();
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	3320      	adds	r3, #32
 800a000:	4618      	mov	r0, r3
 800a002:	f010 fbc1 	bl	801a788 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>
 800a006:	4603      	mov	r3, r0
 800a008:	60fb      	str	r3, [r7, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	3338      	adds	r3, #56	; 0x38
 800a00e:	4618      	mov	r0, r3
 800a010:	f013 ff51 	bl	801deb6 <_ZN18MockNamedValueList5beginEv>
 800a014:	60b8      	str	r0, [r7, #8]
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d01f      	beq.n	800a05c <_ZN11MockSupport17expectedCallsLeftEv+0x68>
        if (getMockSupport(p)) callsLeft += getMockSupport(p)->expectedCallsLeft();
 800a01c:	68b9      	ldr	r1, [r7, #8]
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 fb6c 	bl	800a6fc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a024:	4603      	mov	r3, r0
 800a026:	2b00      	cmp	r3, #0
 800a028:	bf14      	ite	ne
 800a02a:	2301      	movne	r3, #1
 800a02c:	2300      	moveq	r3, #0
 800a02e:	b2db      	uxtb	r3, r3
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00e      	beq.n	800a052 <_ZN11MockSupport17expectedCallsLeftEv+0x5e>
 800a034:	68b9      	ldr	r1, [r7, #8]
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 fb60 	bl	800a6fc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a03c:	4603      	mov	r3, r0
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	3298      	adds	r2, #152	; 0x98
 800a042:	6812      	ldr	r2, [r2, #0]
 800a044:	4618      	mov	r0, r3
 800a046:	4790      	blx	r2
 800a048:	4603      	mov	r3, r0
 800a04a:	461a      	mov	r2, r3
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	4413      	add	r3, r2
 800a050:	60fb      	str	r3, [r7, #12]
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a052:	68b8      	ldr	r0, [r7, #8]
 800a054:	f013 fe38 	bl	801dcc8 <_ZN22MockNamedValueListNode4nextEv>
 800a058:	60b8      	str	r0, [r7, #8]
 800a05a:	e7dc      	b.n	800a016 <_ZN11MockSupport17expectedCallsLeftEv+0x22>

    return callsLeft != 0;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	bf14      	ite	ne
 800a062:	2301      	movne	r3, #1
 800a064:	2300      	moveq	r3, #0
 800a066:	b2db      	uxtb	r3, r3
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3710      	adds	r7, #16
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <_ZN11MockSupport26wasLastActualCallFulfilledEv>:

bool MockSupport::wasLastActualCallFulfilled()
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_ && !lastActualFunctionCall_->isFulfilled())
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d010      	beq.n	800a0a2 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	33bc      	adds	r3, #188	; 0xbc
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4610      	mov	r0, r2
 800a090:	4798      	blx	r3
 800a092:	4603      	mov	r3, r0
 800a094:	f083 0301 	eor.w	r3, r3, #1
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d001      	beq.n	800a0a2 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e000      	b.n	800a0a4 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x34>
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d001      	beq.n	800a0ac <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x3c>
        return false;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	e02a      	b.n	800a102 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	3338      	adds	r3, #56	; 0x38
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f013 ff00 	bl	801deb6 <_ZN18MockNamedValueList5beginEv>
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d020      	beq.n	800a100 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x90>
        if (getMockSupport(p) && !getMockSupport(p)->wasLastActualCallFulfilled())
 800a0be:	68f9      	ldr	r1, [r7, #12]
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 fb1b 	bl	800a6fc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d00f      	beq.n	800a0ec <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800a0cc:	68f9      	ldr	r1, [r7, #12]
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 fb14 	bl	800a6fc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7ff ffca 	bl	800a070 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	f083 0301 	eor.w	r3, r3, #1
 800a0e2:	b2db      	uxtb	r3, r3
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d001      	beq.n	800a0ec <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e000      	b.n	800a0ee <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7e>
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d001      	beq.n	800a0f6 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x86>
                return false;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	e005      	b.n	800a102 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	f013 fde6 	bl	801dcc8 <_ZN22MockNamedValueListNode4nextEv>
 800a0fc:	60f8      	str	r0, [r7, #12]
 800a0fe:	e7db      	b.n	800a0b8 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x48>

    return true;
 800a100:	2301      	movs	r3, #1
}
 800a102:	4618      	mov	r0, r3
 800a104:	3710      	adds	r7, #16
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}

0800a10a <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>:

void MockSupport::failTestWithExpectedCallsNotFulfilled()
{
 800a10a:	b580      	push	{r7, lr}
 800a10c:	b092      	sub	sp, #72	; 0x48
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800a112:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a116:	4618      	mov	r0, r3
 800a118:	f010 fa2c 	bl	801a574 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f103 0220 	add.w	r2, r3, #32
 800a122:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a126:	4611      	mov	r1, r2
 800a128:	4618      	mov	r0, r3
 800a12a:	f010 fbf3 	bl	801a914 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	3338      	adds	r3, #56	; 0x38
 800a132:	4618      	mov	r0, r3
 800a134:	f013 febf 	bl	801deb6 <_ZN18MockNamedValueList5beginEv>
 800a138:	6478      	str	r0, [r7, #68]	; 0x44
 800a13a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d01d      	beq.n	800a17c <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x72>
        if(getMockSupport(p))
 800a140:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 fada 	bl	800a6fc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	bf14      	ite	ne
 800a14e:	2301      	movne	r3, #1
 800a150:	2300      	moveq	r3, #0
 800a152:	b2db      	uxtb	r3, r3
 800a154:	2b00      	cmp	r3, #0
 800a156:	d00c      	beq.n	800a172 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800a158:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 face 	bl	800a6fc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a160:	4603      	mov	r3, r0
 800a162:	f103 0220 	add.w	r2, r3, #32
 800a166:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a16a:	4611      	mov	r1, r2
 800a16c:	4618      	mov	r0, r3
 800a16e:	f010 fbd1 	bl	801a914 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800a172:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a174:	f013 fda8 	bl	801dcc8 <_ZN22MockNamedValueListNode4nextEv>
 800a178:	6478      	str	r0, [r7, #68]	; 0x44
 800a17a:	e7de      	b.n	800a13a <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x30>

    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	691a      	ldr	r2, [r3, #16]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	691b      	ldr	r3, [r3, #16]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	330c      	adds	r3, #12
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4610      	mov	r0, r2
 800a18c:	4798      	blx	r3
 800a18e:	4601      	mov	r1, r0
 800a190:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800a194:	f107 0308 	add.w	r3, r7, #8
 800a198:	4618      	mov	r0, r3
 800a19a:	f011 f9f5 	bl	801b588 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	33c4      	adds	r3, #196	; 0xc4
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f107 0208 	add.w	r2, r7, #8
 800a1aa:	4611      	mov	r1, r2
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	4798      	blx	r3
    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800a1b0:	f107 0308 	add.w	r3, r7, #8
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f000 fe6d 	bl	800ae94 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800a1ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f010 f9ec 	bl	801a59c <_ZN21MockExpectedCallsListD1Ev>
}
 800a1c4:	bf00      	nop
 800a1c6:	3748      	adds	r7, #72	; 0x48
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>:

void MockSupport::failTestWithOutOfOrderCalls()
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b092      	sub	sp, #72	; 0x48
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800a1d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f010 f9cb 	bl	801a574 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f103 0220 	add.w	r2, r3, #32
 800a1e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a1e8:	4611      	mov	r1, r2
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f010 fb92 	bl	801a914 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	3338      	adds	r3, #56	; 0x38
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f013 fe5e 	bl	801deb6 <_ZN18MockNamedValueList5beginEv>
 800a1fa:	6478      	str	r0, [r7, #68]	; 0x44
 800a1fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d01d      	beq.n	800a23e <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x72>
        if(getMockSupport(p))
 800a202:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f000 fa79 	bl	800a6fc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a20a:	4603      	mov	r3, r0
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	bf14      	ite	ne
 800a210:	2301      	movne	r3, #1
 800a212:	2300      	moveq	r3, #0
 800a214:	b2db      	uxtb	r3, r3
 800a216:	2b00      	cmp	r3, #0
 800a218:	d00c      	beq.n	800a234 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800a21a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 fa6d 	bl	800a6fc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a222:	4603      	mov	r3, r0
 800a224:	f103 0220 	add.w	r2, r3, #32
 800a228:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a22c:	4611      	mov	r1, r2
 800a22e:	4618      	mov	r0, r3
 800a230:	f010 fb70 	bl	801a914 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800a234:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a236:	f013 fd47 	bl	801dcc8 <_ZN22MockNamedValueListNode4nextEv>
 800a23a:	6478      	str	r0, [r7, #68]	; 0x44
 800a23c:	e7de      	b.n	800a1fc <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x30>

    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	691a      	ldr	r2, [r3, #16]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	691b      	ldr	r3, [r3, #16]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	330c      	adds	r3, #12
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4610      	mov	r0, r2
 800a24e:	4798      	blx	r3
 800a250:	4601      	mov	r1, r0
 800a252:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800a256:	f107 0308 	add.w	r3, r7, #8
 800a25a:	4618      	mov	r0, r3
 800a25c:	f011 fa38 	bl	801b6d0 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	33c4      	adds	r3, #196	; 0xc4
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f107 0208 	add.w	r2, r7, #8
 800a26c:	4611      	mov	r1, r2
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	4798      	blx	r3
    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800a272:	f107 0308 	add.w	r3, r7, #8
 800a276:	4618      	mov	r0, r3
 800a278:	f000 fe2e 	bl	800aed8 <_ZN20MockCallOrderFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800a27c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a280:	4618      	mov	r0, r3
 800a282:	f010 f98b 	bl	801a59c <_ZN21MockExpectedCallsListD1Ev>
}
 800a286:	bf00      	nop
 800a288:	3748      	adds	r7, #72	; 0x48
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}

0800a28e <_ZN11MockSupport8failTestER11MockFailure>:

void MockSupport::failTest(MockFailure& failure)
{
 800a28e:	b580      	push	{r7, lr}
 800a290:	b082      	sub	sp, #8
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
 800a296:	6039      	str	r1, [r7, #0]
    clear();
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	339c      	adds	r3, #156	; 0x9c
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	4798      	blx	r3
    activeReporter_->failTest(failure);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	691a      	ldr	r2, [r3, #16]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	3308      	adds	r3, #8
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	6839      	ldr	r1, [r7, #0]
 800a2b4:	4610      	mov	r0, r2
 800a2b6:	4798      	blx	r3
}
 800a2b8:	bf00      	nop
 800a2ba:	3708      	adds	r7, #8
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <_ZN11MockSupport10countCheckEv>:

void MockSupport::countCheck()
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
    UtestShell::getCurrent()->countCheck();
 800a2c8:	f008 fd0a 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f007 fb78 	bl	80119c4 <_ZN10UtestShell10countCheckEv>
}
 800a2d4:	bf00      	nop
 800a2d6:	3708      	adds	r7, #8
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>:

void MockSupport::checkExpectationsOfLastActualCall()
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
    if(lastActualFunctionCall_)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d008      	beq.n	800a2fe <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x22>
        lastActualFunctionCall_->checkExpectations();
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	33c4      	adds	r3, #196	; 0xc4
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4610      	mov	r0, r2
 800a2fc:	4798      	blx	r3

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	3338      	adds	r3, #56	; 0x38
 800a302:	4618      	mov	r0, r3
 800a304:	f013 fdd7 	bl	801deb6 <_ZN18MockNamedValueList5beginEv>
 800a308:	60f8      	str	r0, [r7, #12]
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d023      	beq.n	800a358 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x7c>
        if(getMockSupport(p) && getMockSupport(p)->lastActualFunctionCall_)
 800a310:	68f9      	ldr	r1, [r7, #12]
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 f9f2 	bl	800a6fc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d009      	beq.n	800a332 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800a31e:	68f9      	ldr	r1, [r7, #12]
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f000 f9eb 	bl	800a6fc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a326:	4603      	mov	r3, r0
 800a328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d001      	beq.n	800a332 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800a32e:	2301      	movs	r3, #1
 800a330:	e000      	b.n	800a334 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x58>
 800a332:	2300      	movs	r3, #0
 800a334:	2b00      	cmp	r3, #0
 800a336:	d00a      	beq.n	800a34e <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x72>
            getMockSupport(p)->lastActualFunctionCall_->checkExpectations();
 800a338:	68f9      	ldr	r1, [r7, #12]
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 f9de 	bl	800a6fc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a340:	4603      	mov	r3, r0
 800a342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	32c4      	adds	r2, #196	; 0xc4
 800a348:	6812      	ldr	r2, [r2, #0]
 800a34a:	4618      	mov	r0, r3
 800a34c:	4790      	blx	r2
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	f013 fcba 	bl	801dcc8 <_ZN22MockNamedValueListNode4nextEv>
 800a354:	60f8      	str	r0, [r7, #12]
 800a356:	e7d8      	b.n	800a30a <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x2e>
}
 800a358:	bf00      	nop
 800a35a:	3710      	adds	r7, #16
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <_ZN11MockSupport18hasCallsOutOfOrderEv>:

bool MockSupport::hasCallsOutOfOrder()
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b084      	sub	sp, #16
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
    if (expectations_.hasCallsOutOfOrder())
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	3320      	adds	r3, #32
 800a36c:	4618      	mov	r0, r3
 800a36e:	f010 f947 	bl	801a600 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d001      	beq.n	800a37c <_ZN11MockSupport18hasCallsOutOfOrderEv+0x1c>
    {
        return true;
 800a378:	2301      	movs	r3, #1
 800a37a:	e027      	b.n	800a3cc <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    }
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	3338      	adds	r3, #56	; 0x38
 800a380:	4618      	mov	r0, r3
 800a382:	f013 fd98 	bl	801deb6 <_ZN18MockNamedValueList5beginEv>
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d01d      	beq.n	800a3ca <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6a>
        if (getMockSupport(p) && getMockSupport(p)->hasCallsOutOfOrder())
 800a38e:	68f9      	ldr	r1, [r7, #12]
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f000 f9b3 	bl	800a6fc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a396:	4603      	mov	r3, r0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d00c      	beq.n	800a3b6 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800a39c:	68f9      	ldr	r1, [r7, #12]
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 f9ac 	bl	800a6fc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f7ff ffda 	bl	800a360 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d001      	beq.n	800a3b6 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	e000      	b.n	800a3b8 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x58>
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d001      	beq.n	800a3c0 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x60>
        {
            return true;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	e005      	b.n	800a3cc <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a3c0:	68f8      	ldr	r0, [r7, #12]
 800a3c2:	f013 fc81 	bl	801dcc8 <_ZN22MockNamedValueListNode4nextEv>
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	e7de      	b.n	800a388 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x28>
        }
    return false;
 800a3ca:	2300      	movs	r3, #0
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3710      	adds	r7, #16
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <_ZN11MockSupport17checkExpectationsEv>:

void MockSupport::checkExpectations()
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
    checkExpectationsOfLastActualCall();
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f7ff ff7d 	bl	800a2dc <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>

    if (wasLastActualCallFulfilled() && expectedCallsLeft())
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f7ff fe44 	bl	800a070 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d00a      	beq.n	800a404 <_ZN11MockSupport17checkExpectationsEv+0x30>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	3398      	adds	r3, #152	; 0x98
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	4798      	blx	r3
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d001      	beq.n	800a404 <_ZN11MockSupport17checkExpectationsEv+0x30>
 800a400:	2301      	movs	r3, #1
 800a402:	e000      	b.n	800a406 <_ZN11MockSupport17checkExpectationsEv+0x32>
 800a404:	2300      	movs	r3, #0
 800a406:	2b00      	cmp	r3, #0
 800a408:	d002      	beq.n	800a410 <_ZN11MockSupport17checkExpectationsEv+0x3c>
        failTestWithExpectedCallsNotFulfilled();
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f7ff fe7d 	bl	800a10a <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>

    if (hasCallsOutOfOrder())
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f7ff ffa5 	bl	800a360 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d002      	beq.n	800a422 <_ZN11MockSupport17checkExpectationsEv+0x4e>
        failTestWithOutOfOrderCalls();
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f7ff fed5 	bl	800a1cc <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>
}
 800a422:	bf00      	nop
 800a424:	3708      	adds	r7, #8
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <_ZN11MockSupport7hasDataERK12SimpleString>:


bool MockSupport::hasData(const SimpleString& name)
{
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b082      	sub	sp, #8
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
 800a432:	6039      	str	r1, [r7, #0]
    return data_.getValueByName(name) != NULLPTR;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	3338      	adds	r3, #56	; 0x38
 800a438:	6839      	ldr	r1, [r7, #0]
 800a43a:	4618      	mov	r0, r3
 800a43c:	f013 fd0c 	bl	801de58 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	bf14      	ite	ne
 800a446:	2301      	movne	r3, #1
 800a448:	2300      	moveq	r3, #0
 800a44a:	b2db      	uxtb	r3, r3
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3708      	adds	r7, #8
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>:

MockNamedValue* MockSupport::retrieveDataFromStore(const SimpleString& name)
{
 800a454:	b590      	push	{r4, r7, lr}
 800a456:	b085      	sub	sp, #20
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
    MockNamedValue* newData = data_.getValueByName(name);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	3338      	adds	r3, #56	; 0x38
 800a462:	6839      	ldr	r1, [r7, #0]
 800a464:	4618      	mov	r0, r3
 800a466:	f013 fcf7 	bl	801de58 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800a46a:	60f8      	str	r0, [r7, #12]
    if (newData == NULLPTR) {
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d111      	bne.n	800a496 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x42>
        newData = new MockNamedValue(name);
 800a472:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800a476:	490a      	ldr	r1, [pc, #40]	; (800a4a0 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x4c>)
 800a478:	2038      	movs	r0, #56	; 0x38
 800a47a:	f7fe fc8b 	bl	8008d94 <_ZnwjPKci>
 800a47e:	4604      	mov	r4, r0
 800a480:	6839      	ldr	r1, [r7, #0]
 800a482:	4620      	mov	r0, r4
 800a484:	f011 fd6e 	bl	801bf64 <_ZN14MockNamedValueC1ERK12SimpleString>
 800a488:	60fc      	str	r4, [r7, #12]
        data_.add(newData);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	3338      	adds	r3, #56	; 0x38
 800a48e:	68f9      	ldr	r1, [r7, #12]
 800a490:	4618      	mov	r0, r3
 800a492:	f013 fcab 	bl	801ddec <_ZN18MockNamedValueList3addEP14MockNamedValue>
    }
    return newData;
 800a496:	68fb      	ldr	r3, [r7, #12]
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3714      	adds	r7, #20
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd90      	pop	{r4, r7, pc}
 800a4a0:	08022918 	.word	0x08022918

0800a4a4 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setValue(value);
}

void MockSupport::setDataObject(const SimpleString& name, const SimpleString& type, void* value)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b086      	sub	sp, #24
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	60f8      	str	r0, [r7, #12]
 800a4ac:	60b9      	str	r1, [r7, #8]
 800a4ae:	607a      	str	r2, [r7, #4]
 800a4b0:	603b      	str	r3, [r7, #0]
    MockNamedValue* newData = retrieveDataFromStore(name);
 800a4b2:	68b9      	ldr	r1, [r7, #8]
 800a4b4:	68f8      	ldr	r0, [r7, #12]
 800a4b6:	f7ff ffcd 	bl	800a454 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>
 800a4ba:	6178      	str	r0, [r7, #20]
    newData->setObjectPointer(type, value);
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	3344      	adds	r3, #68	; 0x44
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	683a      	ldr	r2, [r7, #0]
 800a4c6:	6879      	ldr	r1, [r7, #4]
 800a4c8:	6978      	ldr	r0, [r7, #20]
 800a4ca:	4798      	blx	r3
}
 800a4cc:	bf00      	nop
 800a4ce:	3718      	adds	r7, #24
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <_ZN11MockSupport7getDataERK12SimpleString>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setConstObjectPointer(type, value);
}

MockNamedValue MockSupport::getData(const SimpleString& name)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b088      	sub	sp, #32
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	607a      	str	r2, [r7, #4]
    MockNamedValue* value = data_.getValueByName(name);
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	3338      	adds	r3, #56	; 0x38
 800a4e4:	6879      	ldr	r1, [r7, #4]
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f013 fcb6 	bl	801de58 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800a4ec:	61f8      	str	r0, [r7, #28]
    if (value == NULLPTR)
 800a4ee:	69fb      	ldr	r3, [r7, #28]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d111      	bne.n	800a518 <_ZN11MockSupport7getDataERK12SimpleString+0x44>
        return MockNamedValue("");
 800a4f4:	f107 0314 	add.w	r3, r7, #20
 800a4f8:	490b      	ldr	r1, [pc, #44]	; (800a528 <_ZN11MockSupport7getDataERK12SimpleString+0x54>)
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f001 f80d 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800a500:	f107 0314 	add.w	r3, r7, #20
 800a504:	4619      	mov	r1, r3
 800a506:	68f8      	ldr	r0, [r7, #12]
 800a508:	f011 fd2c 	bl	801bf64 <_ZN14MockNamedValueC1ERK12SimpleString>
 800a50c:	f107 0314 	add.w	r3, r7, #20
 800a510:	4618      	mov	r0, r3
 800a512:	f001 fbba 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800a516:	e003      	b.n	800a520 <_ZN11MockSupport7getDataERK12SimpleString+0x4c>
    return *value;
 800a518:	69f9      	ldr	r1, [r7, #28]
 800a51a:	68f8      	ldr	r0, [r7, #12]
 800a51c:	f7ff f8a2 	bl	8009664 <_ZN14MockNamedValueC1ERKS_>
}
 800a520:	68f8      	ldr	r0, [r7, #12]
 800a522:	3720      	adds	r7, #32
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}
 800a528:	08022910 	.word	0x08022910

0800a52c <_ZN11MockSupport5cloneERK12SimpleString>:

MockSupport* MockSupport::clone(const SimpleString& mockName)
{
 800a52c:	b590      	push	{r4, r7, lr}
 800a52e:	b085      	sub	sp, #20
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	6039      	str	r1, [r7, #0]
    MockSupport* newMock = new MockSupport(mockName);
 800a536:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a53a:	4927      	ldr	r1, [pc, #156]	; (800a5d8 <_ZN11MockSupport5cloneERK12SimpleString+0xac>)
 800a53c:	2048      	movs	r0, #72	; 0x48
 800a53e:	f7fe fc29 	bl	8008d94 <_ZnwjPKci>
 800a542:	4604      	mov	r4, r0
 800a544:	6839      	ldr	r1, [r7, #0]
 800a546:	4620      	mov	r0, r4
 800a548:	f7ff f8f8 	bl	800973c <_ZN11MockSupportC1ERK12SimpleString>
 800a54c:	60fc      	str	r4, [r7, #12]
    newMock->setMockFailureStandardReporter(standardReporter_);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	33a4      	adds	r3, #164	; 0xa4
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	6952      	ldr	r2, [r2, #20]
 800a55a:	4611      	mov	r1, r2
 800a55c:	68f8      	ldr	r0, [r7, #12]
 800a55e:	4798      	blx	r3
    if (ignoreOtherCalls_) newMock->ignoreOtherCalls();
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a566:	2b00      	cmp	r3, #0
 800a568:	d005      	beq.n	800a576 <_ZN11MockSupport5cloneERK12SimpleString+0x4a>
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	3390      	adds	r3, #144	; 0x90
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	4798      	blx	r3

    if (!enabled_) newMock->disable();
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800a57c:	f083 0301 	eor.w	r3, r3, #1
 800a580:	b2db      	uxtb	r3, r3
 800a582:	2b00      	cmp	r3, #0
 800a584:	d005      	beq.n	800a592 <_ZN11MockSupport5cloneERK12SimpleString+0x66>
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	3384      	adds	r3, #132	; 0x84
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	68f8      	ldr	r0, [r7, #12]
 800a590:	4798      	blx	r3

    if (strictOrdering_) newMock->strictOrder();
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	7b1b      	ldrb	r3, [r3, #12]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d005      	beq.n	800a5a6 <_ZN11MockSupport5cloneERK12SimpleString+0x7a>
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	3308      	adds	r3, #8
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	68f8      	ldr	r0, [r7, #12]
 800a5a4:	4798      	blx	r3

    newMock->tracing(tracing_);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	338c      	adds	r3, #140	; 0x8c
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 800a5b4:	4611      	mov	r1, r2
 800a5b6:	68f8      	ldr	r0, [r7, #12]
 800a5b8:	4798      	blx	r3
    newMock->installComparatorsAndCopiers(comparatorsAndCopiersRepository_);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	33b8      	adds	r3, #184	; 0xb8
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	3230      	adds	r2, #48	; 0x30
 800a5c6:	4611      	mov	r1, r2
 800a5c8:	68f8      	ldr	r0, [r7, #12]
 800a5ca:	4798      	blx	r3
    return newMock;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3714      	adds	r7, #20
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd90      	pop	{r4, r7, pc}
 800a5d6:	bf00      	nop
 800a5d8:	08022918 	.word	0x08022918

0800a5dc <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>:

MockSupport* MockSupport::getMockSupportScope(const SimpleString& name)
{
 800a5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5de:	b0ab      	sub	sp, #172	; 0xac
 800a5e0:	af04      	add	r7, sp, #16
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800a5e6:	f107 0308 	add.w	r3, r7, #8
 800a5ea:	4941      	ldr	r1, [pc, #260]	; (800a6f0 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x114>)
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f000 ff94 	bl	800b51a <_ZN12SimpleStringC1EPKc>
    mockingSupportName += name;
 800a5f2:	f107 0308 	add.w	r3, r7, #8
 800a5f6:	6839      	ldr	r1, [r7, #0]
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f001 fbc3 	bl	800bd84 <_ZN12SimpleStringpLERKS_>

    if (hasData(mockingSupportName)) {
 800a5fe:	f107 0308 	add.w	r3, r7, #8
 800a602:	4619      	mov	r1, r3
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f7ff ff10 	bl	800a42a <_ZN11MockSupport7hasDataERK12SimpleString>
 800a60a:	4603      	mov	r3, r0
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d048      	beq.n	800a6a2 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xc6>
        STRCMP_EQUAL("MockSupport", getData(mockingSupportName).getType().asCharString());
 800a610:	f008 fb66 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 800a614:	4604      	mov	r4, r0
 800a616:	6823      	ldr	r3, [r4, #0]
 800a618:	3324      	adds	r3, #36	; 0x24
 800a61a:	681d      	ldr	r5, [r3, #0]
 800a61c:	f107 0318 	add.w	r3, r7, #24
 800a620:	f107 0208 	add.w	r2, r7, #8
 800a624:	6879      	ldr	r1, [r7, #4]
 800a626:	4618      	mov	r0, r3
 800a628:	f7ff ff54 	bl	800a4d4 <_ZN11MockSupport7getDataERK12SimpleString>
 800a62c:	f107 0310 	add.w	r3, r7, #16
 800a630:	f107 0218 	add.w	r2, r7, #24
 800a634:	4611      	mov	r1, r2
 800a636:	4618      	mov	r0, r3
 800a638:	f011 ff61 	bl	801c4fe <_ZNK14MockNamedValue7getTypeEv>
 800a63c:	f107 0310 	add.w	r3, r7, #16
 800a640:	4618      	mov	r0, r3
 800a642:	f001 faf5 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800a646:	4606      	mov	r6, r0
 800a648:	f008 fb5a 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a64c:	4603      	mov	r3, r0
 800a64e:	9302      	str	r3, [sp, #8]
 800a650:	f240 13bd 	movw	r3, #445	; 0x1bd
 800a654:	9301      	str	r3, [sp, #4]
 800a656:	4b27      	ldr	r3, [pc, #156]	; (800a6f4 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x118>)
 800a658:	9300      	str	r3, [sp, #0]
 800a65a:	2300      	movs	r3, #0
 800a65c:	4632      	mov	r2, r6
 800a65e:	4926      	ldr	r1, [pc, #152]	; (800a6f8 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800a660:	4620      	mov	r0, r4
 800a662:	47a8      	blx	r5
 800a664:	f107 0310 	add.w	r3, r7, #16
 800a668:	4618      	mov	r0, r3
 800a66a:	f001 fb0e 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800a66e:	f107 0318 	add.w	r3, r7, #24
 800a672:	4618      	mov	r0, r3
 800a674:	f011 fca0 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
        return (MockSupport*) getData(mockingSupportName).getObjectPointer();
 800a678:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a67c:	f107 0208 	add.w	r2, r7, #8
 800a680:	6879      	ldr	r1, [r7, #4]
 800a682:	4618      	mov	r0, r3
 800a684:	f7ff ff26 	bl	800a4d4 <_ZN11MockSupport7getDataERK12SimpleString>
 800a688:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a68c:	4618      	mov	r0, r3
 800a68e:	f012 fa4f 	bl	801cb30 <_ZNK14MockNamedValue16getObjectPointerEv>
 800a692:	4604      	mov	r4, r0
 800a694:	bf00      	nop
 800a696:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a69a:	4618      	mov	r0, r3
 800a69c:	f011 fc8c 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
 800a6a0:	e01b      	b.n	800a6da <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xfe>
    }

    MockSupport *newMock = clone(name);
 800a6a2:	6839      	ldr	r1, [r7, #0]
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f7ff ff41 	bl	800a52c <_ZN11MockSupport5cloneERK12SimpleString>
 800a6aa:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    setDataObject(mockingSupportName, "MockSupport", newMock);
 800a6ae:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a6b2:	4911      	ldr	r1, [pc, #68]	; (800a6f8 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f000 ff30 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800a6ba:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800a6be:	f107 0108 	add.w	r1, r7, #8
 800a6c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f7ff feec 	bl	800a4a4 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>
 800a6cc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f001 fada 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    return newMock;
 800a6d6:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800a6da:	f107 0308 	add.w	r3, r7, #8
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f001 fad3 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800a6e4:	4623      	mov	r3, r4
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	379c      	adds	r7, #156	; 0x9c
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	08022930 	.word	0x08022930
 800a6f4:	08022918 	.word	0x08022918
 800a6f8:	08022950 	.word	0x08022950

0800a6fc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>:

MockSupport* MockSupport::getMockSupport(MockNamedValueListNode* node)
{
 800a6fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a700:	b08b      	sub	sp, #44	; 0x2c
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
 800a706:	6039      	str	r1, [r7, #0]
    if (node->getType() == "MockSupport" && node->getName().contains(MOCK_SUPPORT_SCOPE_PREFIX))
 800a708:	2500      	movs	r5, #0
 800a70a:	2600      	movs	r6, #0
 800a70c:	f107 0308 	add.w	r3, r7, #8
 800a710:	6839      	ldr	r1, [r7, #0]
 800a712:	4618      	mov	r0, r3
 800a714:	f013 fb26 	bl	801dd64 <_ZNK22MockNamedValueListNode7getTypeEv>
 800a718:	f04f 0801 	mov.w	r8, #1
 800a71c:	f107 0310 	add.w	r3, r7, #16
 800a720:	492e      	ldr	r1, [pc, #184]	; (800a7dc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe0>)
 800a722:	4618      	mov	r0, r3
 800a724:	f000 fef9 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800a728:	f04f 0901 	mov.w	r9, #1
 800a72c:	f107 0210 	add.w	r2, r7, #16
 800a730:	f107 0308 	add.w	r3, r7, #8
 800a734:	4611      	mov	r1, r2
 800a736:	4618      	mov	r0, r3
 800a738:	f001 fab3 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d01a      	beq.n	800a778 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800a742:	f107 0318 	add.w	r3, r7, #24
 800a746:	6839      	ldr	r1, [r7, #0]
 800a748:	4618      	mov	r0, r3
 800a74a:	f013 faf8 	bl	801dd3e <_ZNK22MockNamedValueListNode7getNameEv>
 800a74e:	2501      	movs	r5, #1
 800a750:	f107 0320 	add.w	r3, r7, #32
 800a754:	4922      	ldr	r1, [pc, #136]	; (800a7e0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe4>)
 800a756:	4618      	mov	r0, r3
 800a758:	f000 fedf 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800a75c:	2601      	movs	r6, #1
 800a75e:	f107 0220 	add.w	r2, r7, #32
 800a762:	f107 0318 	add.w	r3, r7, #24
 800a766:	4611      	mov	r1, r2
 800a768:	4618      	mov	r0, r3
 800a76a:	f000 ff54 	bl	800b616 <_ZNK12SimpleString8containsERKS_>
 800a76e:	4603      	mov	r3, r0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d001      	beq.n	800a778 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800a774:	2401      	movs	r4, #1
 800a776:	e000      	b.n	800a77a <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7e>
 800a778:	2400      	movs	r4, #0
 800a77a:	2e00      	cmp	r6, #0
 800a77c:	d004      	beq.n	800a788 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x8c>
 800a77e:	f107 0320 	add.w	r3, r7, #32
 800a782:	4618      	mov	r0, r3
 800a784:	f001 fa81 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800a788:	2d00      	cmp	r5, #0
 800a78a:	d004      	beq.n	800a796 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x9a>
 800a78c:	f107 0318 	add.w	r3, r7, #24
 800a790:	4618      	mov	r0, r3
 800a792:	f001 fa7a 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800a796:	f1b9 0f00 	cmp.w	r9, #0
 800a79a:	d004      	beq.n	800a7a6 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xaa>
 800a79c:	f107 0310 	add.w	r3, r7, #16
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f001 fa72 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800a7a6:	f1b8 0f00 	cmp.w	r8, #0
 800a7aa:	d004      	beq.n	800a7b6 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xba>
 800a7ac:	f107 0308 	add.w	r3, r7, #8
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f001 fa6a 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800a7b6:	2c00      	cmp	r4, #0
 800a7b8:	d00a      	beq.n	800a7d0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd4>
        return (MockSupport*) node->item()->getObjectPointer();
 800a7ba:	6838      	ldr	r0, [r7, #0]
 800a7bc:	f013 fa90 	bl	801dce0 <_ZN22MockNamedValueListNode4itemEv>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	681a      	ldr	r2, [r3, #0]
 800a7c4:	32a0      	adds	r2, #160	; 0xa0
 800a7c6:	6812      	ldr	r2, [r2, #0]
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	4790      	blx	r2
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	e000      	b.n	800a7d2 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd6>
    return NULLPTR;
 800a7d0:	2300      	movs	r3, #0
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	372c      	adds	r7, #44	; 0x2c
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7dc:	08022950 	.word	0x08022950
 800a7e0:	08022930 	.word	0x08022930

0800a7e4 <_ZN11MockSupport11returnValueEv>:

MockNamedValue MockSupport::returnValue()
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->returnValue();
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d00a      	beq.n	800a80c <_ZN11MockSupport11returnValueEv+0x28>
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	3354      	adds	r3, #84	; 0x54
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	4610      	mov	r0, r2
 800a808:	4798      	blx	r3
 800a80a:	e010      	b.n	800a82e <_ZN11MockSupport11returnValueEv+0x4a>
    return MockNamedValue("");
 800a80c:	f107 0308 	add.w	r3, r7, #8
 800a810:	4909      	ldr	r1, [pc, #36]	; (800a838 <_ZN11MockSupport11returnValueEv+0x54>)
 800a812:	4618      	mov	r0, r3
 800a814:	f000 fe81 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800a818:	f107 0308 	add.w	r3, r7, #8
 800a81c:	4619      	mov	r1, r3
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f011 fba0 	bl	801bf64 <_ZN14MockNamedValueC1ERK12SimpleString>
 800a824:	f107 0308 	add.w	r3, r7, #8
 800a828:	4618      	mov	r0, r3
 800a82a:	f001 fa2e 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	3710      	adds	r7, #16
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	08022910 	.word	0x08022910

0800a83c <_ZN11MockSupport15boolReturnValueEv>:

bool MockSupport::boolReturnValue()
{
 800a83c:	b590      	push	{r4, r7, lr}
 800a83e:	b091      	sub	sp, #68	; 0x44
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	3320      	adds	r3, #32
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f107 0208 	add.w	r2, r7, #8
 800a850:	6879      	ldr	r1, [r7, #4]
 800a852:	4610      	mov	r0, r2
 800a854:	4798      	blx	r3
 800a856:	f107 0308 	add.w	r3, r7, #8
 800a85a:	4618      	mov	r0, r3
 800a85c:	f011 fe5e 	bl	801c51c <_ZNK14MockNamedValue12getBoolValueEv>
 800a860:	4603      	mov	r3, r0
 800a862:	461c      	mov	r4, r3
 800a864:	bf00      	nop
 800a866:	f107 0308 	add.w	r3, r7, #8
 800a86a:	4618      	mov	r0, r3
 800a86c:	f011 fba4 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
 800a870:	4623      	mov	r3, r4
}
 800a872:	4618      	mov	r0, r3
 800a874:	3744      	adds	r7, #68	; 0x44
 800a876:	46bd      	mov	sp, r7
 800a878:	bd90      	pop	{r4, r7, pc}

0800a87a <_ZN11MockSupport22unsignedIntReturnValueEv>:

unsigned int MockSupport::unsignedIntReturnValue()
{
 800a87a:	b590      	push	{r4, r7, lr}
 800a87c:	b091      	sub	sp, #68	; 0x44
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	3320      	adds	r3, #32
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f107 0208 	add.w	r2, r7, #8
 800a88e:	6879      	ldr	r1, [r7, #4]
 800a890:	4610      	mov	r0, r2
 800a892:	4798      	blx	r3
 800a894:	f107 0308 	add.w	r3, r7, #8
 800a898:	4618      	mov	r0, r3
 800a89a:	f011 fe67 	bl	801c56c <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 800a89e:	4604      	mov	r4, r0
 800a8a0:	bf00      	nop
 800a8a2:	f107 0308 	add.w	r3, r7, #8
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f011 fb86 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
 800a8ac:	4623      	mov	r3, r4
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3744      	adds	r7, #68	; 0x44
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd90      	pop	{r4, r7, pc}

0800a8b6 <_ZN11MockSupport14intReturnValueEv>:

int MockSupport::intReturnValue()
{
 800a8b6:	b590      	push	{r4, r7, lr}
 800a8b8:	b091      	sub	sp, #68	; 0x44
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	3320      	adds	r3, #32
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f107 0208 	add.w	r2, r7, #8
 800a8ca:	6879      	ldr	r1, [r7, #4]
 800a8cc:	4610      	mov	r0, r2
 800a8ce:	4798      	blx	r3
 800a8d0:	f107 0308 	add.w	r3, r7, #8
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f011 fe99 	bl	801c60c <_ZNK14MockNamedValue11getIntValueEv>
 800a8da:	4604      	mov	r4, r0
 800a8dc:	bf00      	nop
 800a8de:	f107 0308 	add.w	r3, r7, #8
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f011 fb68 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
 800a8e8:	4623      	mov	r3, r4
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3744      	adds	r7, #68	; 0x44
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd90      	pop	{r4, r7, pc}

0800a8f2 <_ZN11MockSupport26returnStringValueOrDefaultEPKc>:

const char * MockSupport::returnStringValueOrDefault(const char * defaultValue)
{
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	b082      	sub	sp, #8
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
 800a8fa:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	331c      	adds	r3, #28
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	4798      	blx	r3
 800a908:	4603      	mov	r3, r0
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d007      	beq.n	800a91e <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2c>
        return stringReturnValue();
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	335c      	adds	r3, #92	; 0x5c
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	4798      	blx	r3
 800a91a:	4603      	mov	r3, r0
 800a91c:	e000      	b.n	800a920 <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2e>
    }
    return defaultValue;
 800a91e:	683b      	ldr	r3, [r7, #0]
}
 800a920:	4618      	mov	r0, r3
 800a922:	3708      	adds	r7, #8
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <_ZN11MockSupport26returnDoubleValueOrDefaultEd>:

double MockSupport::returnDoubleValueOrDefault(double defaultValue)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	ed87 0b00 	vstr	d0, [r7]
    if (hasReturnValue()) {
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	331c      	adds	r3, #28
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	68f8      	ldr	r0, [r7, #12]
 800a93e:	4798      	blx	r3
 800a940:	4603      	mov	r3, r0
 800a942:	2b00      	cmp	r3, #0
 800a944:	d00a      	beq.n	800a95c <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x34>
        return doubleReturnValue();
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	3368      	adds	r3, #104	; 0x68
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	68f8      	ldr	r0, [r7, #12]
 800a950:	4798      	blx	r3
 800a952:	eeb0 7a40 	vmov.f32	s14, s0
 800a956:	eef0 7a60 	vmov.f32	s15, s1
 800a95a:	e001      	b.n	800a960 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x38>
    }
    return defaultValue;
 800a95c:	ed97 7b00 	vldr	d7, [r7]
}
 800a960:	eeb0 0a47 	vmov.f32	s0, s14
 800a964:	eef0 0a67 	vmov.f32	s1, s15
 800a968:	3710      	adds	r7, #16
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}

0800a96e <_ZN11MockSupport27returnLongIntValueOrDefaultEl>:

long int MockSupport::returnLongIntValueOrDefault(long int defaultValue)
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	b082      	sub	sp, #8
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
 800a976:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	331c      	adds	r3, #28
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	4798      	blx	r3
 800a984:	4603      	mov	r3, r0
 800a986:	2b00      	cmp	r3, #0
 800a988:	d007      	beq.n	800a99a <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2c>
        return longIntReturnValue();
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	3338      	adds	r3, #56	; 0x38
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	4798      	blx	r3
 800a996:	4603      	mov	r3, r0
 800a998:	e000      	b.n	800a99c <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2e>
    }
    return defaultValue;
 800a99a:	683b      	ldr	r3, [r7, #0]
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3708      	adds	r7, #8
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <_ZN11MockSupport24returnBoolValueOrDefaultEb>:

bool MockSupport::returnBoolValueOrDefault(bool defaultValue)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b082      	sub	sp, #8
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	70fb      	strb	r3, [r7, #3]
    if (hasReturnValue()) {
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	331c      	adds	r3, #28
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	4798      	blx	r3
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d007      	beq.n	800a9d2 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x2e>
        return boolReturnValue();
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	3324      	adds	r3, #36	; 0x24
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	4798      	blx	r3
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	e000      	b.n	800a9d4 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x30>
    }
    return defaultValue;
 800a9d2:	78fb      	ldrb	r3, [r7, #3]
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3708      	adds	r7, #8
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <_ZN11MockSupport23returnIntValueOrDefaultEi>:

int MockSupport::returnIntValueOrDefault(int defaultValue)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b082      	sub	sp, #8
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	331c      	adds	r3, #28
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	4798      	blx	r3
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d007      	beq.n	800aa08 <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2c>
        return intReturnValue();
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	332c      	adds	r3, #44	; 0x2c
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	4798      	blx	r3
 800aa04:	4603      	mov	r3, r0
 800aa06:	e000      	b.n	800aa0a <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2e>
    }
    return defaultValue;
 800aa08:	683b      	ldr	r3, [r7, #0]
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3708      	adds	r7, #8
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}

0800aa12 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockSupport::returnUnsignedIntValueOrDefault(unsigned int defaultValue)
{
 800aa12:	b580      	push	{r7, lr}
 800aa14:	b082      	sub	sp, #8
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
 800aa1a:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	331c      	adds	r3, #28
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	4798      	blx	r3
 800aa28:	4603      	mov	r3, r0
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d007      	beq.n	800aa3e <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2c>
        return unsignedIntReturnValue();
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	3334      	adds	r3, #52	; 0x34
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	4798      	blx	r3
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	e000      	b.n	800aa40 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2e>
    }
    return defaultValue;
 800aa3e:	683b      	ldr	r3, [r7, #0]
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3708      	adds	r7, #8
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockSupport::returnUnsignedLongIntValueOrDefault(unsigned long int defaultValue)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	331c      	adds	r3, #28
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	4798      	blx	r3
 800aa5e:	4603      	mov	r3, r0
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d007      	beq.n	800aa74 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2c>
        return unsignedLongIntReturnValue();
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	3340      	adds	r3, #64	; 0x40
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	4798      	blx	r3
 800aa70:	4603      	mov	r3, r0
 800aa72:	e000      	b.n	800aa76 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2e>
    }
    return defaultValue;
 800aa74:	683b      	ldr	r3, [r7, #0]
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3708      	adds	r7, #8
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}

0800aa7e <_ZN11MockSupport18longIntReturnValueEv>:

long int MockSupport::longIntReturnValue()
{
 800aa7e:	b590      	push	{r4, r7, lr}
 800aa80:	b091      	sub	sp, #68	; 0x44
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	3320      	adds	r3, #32
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f107 0208 	add.w	r2, r7, #8
 800aa92:	6879      	ldr	r1, [r7, #4]
 800aa94:	4610      	mov	r0, r2
 800aa96:	4798      	blx	r3
 800aa98:	f107 0308 	add.w	r3, r7, #8
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f011 fddd 	bl	801c65c <_ZNK14MockNamedValue15getLongIntValueEv>
 800aaa2:	4604      	mov	r4, r0
 800aaa4:	bf00      	nop
 800aaa6:	f107 0308 	add.w	r3, r7, #8
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f011 fa84 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
 800aab0:	4623      	mov	r3, r4
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3744      	adds	r7, #68	; 0x44
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd90      	pop	{r4, r7, pc}

0800aaba <_ZN11MockSupport26unsignedLongIntReturnValueEv>:

unsigned long int MockSupport::unsignedLongIntReturnValue()
{
 800aaba:	b590      	push	{r4, r7, lr}
 800aabc:	b091      	sub	sp, #68	; 0x44
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	3320      	adds	r3, #32
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f107 0208 	add.w	r2, r7, #8
 800aace:	6879      	ldr	r1, [r7, #4]
 800aad0:	4610      	mov	r0, r2
 800aad2:	4798      	blx	r3
 800aad4:	f107 0308 	add.w	r3, r7, #8
 800aad8:	4618      	mov	r0, r3
 800aada:	f011 fe21 	bl	801c720 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 800aade:	4604      	mov	r4, r0
 800aae0:	bf00      	nop
 800aae2:	f107 0308 	add.w	r3, r7, #8
 800aae6:	4618      	mov	r0, r3
 800aae8:	f011 fa66 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
 800aaec:	4623      	mov	r3, r4
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3744      	adds	r7, #68	; 0x44
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd90      	pop	{r4, r7, pc}
	...

0800aaf8 <_ZN11MockSupport22longLongIntReturnValueEv>:
}

#else

cpputest_longlong MockSupport::longLongIntReturnValue()
{
 800aaf8:	b5b0      	push	{r4, r5, r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af02      	add	r7, sp, #8
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 800ab02:	f008 f8ed 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 800ab06:	4604      	mov	r4, r0
 800ab08:	6823      	ldr	r3, [r4, #0]
 800ab0a:	3368      	adds	r3, #104	; 0x68
 800ab0c:	681d      	ldr	r5, [r3, #0]
 800ab0e:	f008 f8f7 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800ab12:	4603      	mov	r3, r0
 800ab14:	9300      	str	r3, [sp, #0]
 800ab16:	f240 2345 	movw	r3, #581	; 0x245
 800ab1a:	4a06      	ldr	r2, [pc, #24]	; (800ab34 <_ZN11MockSupport22longLongIntReturnValueEv+0x3c>)
 800ab1c:	4906      	ldr	r1, [pc, #24]	; (800ab38 <_ZN11MockSupport22longLongIntReturnValueEv+0x40>)
 800ab1e:	4620      	mov	r0, r4
 800ab20:	47a8      	blx	r5
    return cpputest_longlong(0);
 800ab22:	2100      	movs	r1, #0
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f7fe fd2f 	bl	8009588 <_ZN17cpputest_longlongC1Ei>
}
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	3708      	adds	r7, #8
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bdb0      	pop	{r4, r5, r7, pc}
 800ab32:	bf00      	nop
 800ab34:	08022918 	.word	0x08022918
 800ab38:	0802295c 	.word	0x0802295c

0800ab3c <_ZN11MockSupport30unsignedLongLongIntReturnValueEv>:

cpputest_ulonglong MockSupport::unsignedLongLongIntReturnValue()
{
 800ab3c:	b5b0      	push	{r4, r5, r7, lr}
 800ab3e:	b084      	sub	sp, #16
 800ab40:	af02      	add	r7, sp, #8
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 800ab46:	f008 f8cb 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 800ab4a:	4604      	mov	r4, r0
 800ab4c:	6823      	ldr	r3, [r4, #0]
 800ab4e:	3368      	adds	r3, #104	; 0x68
 800ab50:	681d      	ldr	r5, [r3, #0]
 800ab52:	f008 f8d5 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800ab56:	4603      	mov	r3, r0
 800ab58:	9300      	str	r3, [sp, #0]
 800ab5a:	f240 234b 	movw	r3, #587	; 0x24b
 800ab5e:	4a06      	ldr	r2, [pc, #24]	; (800ab78 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x3c>)
 800ab60:	4906      	ldr	r1, [pc, #24]	; (800ab7c <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x40>)
 800ab62:	4620      	mov	r0, r4
 800ab64:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 800ab66:	2100      	movs	r1, #0
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f7fe fd19 	bl	80095a0 <_ZN18cpputest_ulonglongC1Ei>
}
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	3708      	adds	r7, #8
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bdb0      	pop	{r4, r5, r7, pc}
 800ab76:	bf00      	nop
 800ab78:	08022918 	.word	0x08022918
 800ab7c:	0802297c 	.word	0x0802297c

0800ab80 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockSupport::returnLongLongIntValueOrDefault(cpputest_longlong defaultValue)
{
 800ab80:	b5b0      	push	{r4, r5, r7, lr}
 800ab82:	b086      	sub	sp, #24
 800ab84:	af02      	add	r7, sp, #8
 800ab86:	60f8      	str	r0, [r7, #12]
 800ab88:	60b9      	str	r1, [r7, #8]
 800ab8a:	4639      	mov	r1, r7
 800ab8c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 800ab90:	f008 f8a6 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 800ab94:	4604      	mov	r4, r0
 800ab96:	6823      	ldr	r3, [r4, #0]
 800ab98:	3368      	adds	r3, #104	; 0x68
 800ab9a:	681d      	ldr	r5, [r3, #0]
 800ab9c:	f008 f8b0 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800aba0:	4603      	mov	r3, r0
 800aba2:	9300      	str	r3, [sp, #0]
 800aba4:	f240 2351 	movw	r3, #593	; 0x251
 800aba8:	4a06      	ldr	r2, [pc, #24]	; (800abc4 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 800abaa:	4907      	ldr	r1, [pc, #28]	; (800abc8 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 800abac:	4620      	mov	r0, r4
 800abae:	47a8      	blx	r5
    return defaultValue;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	461a      	mov	r2, r3
 800abb4:	463b      	mov	r3, r7
 800abb6:	cb03      	ldmia	r3!, {r0, r1}
 800abb8:	6010      	str	r0, [r2, #0]
 800abba:	6051      	str	r1, [r2, #4]
}
 800abbc:	68f8      	ldr	r0, [r7, #12]
 800abbe:	3710      	adds	r7, #16
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bdb0      	pop	{r4, r5, r7, pc}
 800abc4:	08022918 	.word	0x08022918
 800abc8:	0802295c 	.word	0x0802295c

0800abcc <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockSupport::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong defaultValue)
{
 800abcc:	b5b0      	push	{r4, r5, r7, lr}
 800abce:	b086      	sub	sp, #24
 800abd0:	af02      	add	r7, sp, #8
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	4639      	mov	r1, r7
 800abd8:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 800abdc:	f008 f880 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 800abe0:	4604      	mov	r4, r0
 800abe2:	6823      	ldr	r3, [r4, #0]
 800abe4:	3368      	adds	r3, #104	; 0x68
 800abe6:	681d      	ldr	r5, [r3, #0]
 800abe8:	f008 f88a 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800abec:	4603      	mov	r3, r0
 800abee:	9300      	str	r3, [sp, #0]
 800abf0:	f240 2357 	movw	r3, #599	; 0x257
 800abf4:	4a06      	ldr	r2, [pc, #24]	; (800ac10 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 800abf6:	4907      	ldr	r1, [pc, #28]	; (800ac14 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 800abf8:	4620      	mov	r0, r4
 800abfa:	47a8      	blx	r5
    return defaultValue;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	461a      	mov	r2, r3
 800ac00:	463b      	mov	r3, r7
 800ac02:	cb03      	ldmia	r3!, {r0, r1}
 800ac04:	6010      	str	r0, [r2, #0]
 800ac06:	6051      	str	r1, [r2, #4]
}
 800ac08:	68f8      	ldr	r0, [r7, #12]
 800ac0a:	3710      	adds	r7, #16
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bdb0      	pop	{r4, r5, r7, pc}
 800ac10:	08022918 	.word	0x08022918
 800ac14:	0802297c 	.word	0x0802297c

0800ac18 <_ZN11MockSupport17stringReturnValueEv>:

#endif

const char* MockSupport::stringReturnValue()
{
 800ac18:	b590      	push	{r4, r7, lr}
 800ac1a:	b091      	sub	sp, #68	; 0x44
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	3320      	adds	r3, #32
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f107 0208 	add.w	r2, r7, #8
 800ac2c:	6879      	ldr	r1, [r7, #4]
 800ac2e:	4610      	mov	r0, r2
 800ac30:	4798      	blx	r3
 800ac32:	f107 0308 	add.w	r3, r7, #8
 800ac36:	4618      	mov	r0, r3
 800ac38:	f011 fea6 	bl	801c988 <_ZNK14MockNamedValue14getStringValueEv>
 800ac3c:	4604      	mov	r4, r0
 800ac3e:	bf00      	nop
 800ac40:	f107 0308 	add.w	r3, r7, #8
 800ac44:	4618      	mov	r0, r3
 800ac46:	f011 f9b7 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
 800ac4a:	4623      	mov	r3, r4
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3744      	adds	r7, #68	; 0x44
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd90      	pop	{r4, r7, pc}

0800ac54 <_ZN11MockSupport17doubleReturnValueEv>:

double MockSupport::doubleReturnValue()
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	ed2d 8b02 	vpush	{d8}
 800ac5a:	b090      	sub	sp, #64	; 0x40
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	3320      	adds	r3, #32
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f107 0208 	add.w	r2, r7, #8
 800ac6c:	6879      	ldr	r1, [r7, #4]
 800ac6e:	4610      	mov	r0, r2
 800ac70:	4798      	blx	r3
 800ac72:	f107 0308 	add.w	r3, r7, #8
 800ac76:	4618      	mov	r0, r3
 800ac78:	f011 fe2a 	bl	801c8d0 <_ZNK14MockNamedValue14getDoubleValueEv>
 800ac7c:	eeb0 8a40 	vmov.f32	s16, s0
 800ac80:	eef0 8a60 	vmov.f32	s17, s1
 800ac84:	bf00      	nop
 800ac86:	f107 0308 	add.w	r3, r7, #8
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f011 f994 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
 800ac90:	eeb0 7a48 	vmov.f32	s14, s16
 800ac94:	eef0 7a68 	vmov.f32	s15, s17
}
 800ac98:	eeb0 0a47 	vmov.f32	s0, s14
 800ac9c:	eef0 0a67 	vmov.f32	s1, s15
 800aca0:	3740      	adds	r7, #64	; 0x40
 800aca2:	46bd      	mov	sp, r7
 800aca4:	ecbd 8b02 	vpop	{d8}
 800aca8:	bd80      	pop	{r7, pc}

0800acaa <_ZN11MockSupport27returnPointerValueOrDefaultEPv>:

void * MockSupport::returnPointerValueOrDefault(void * defaultValue)
{
 800acaa:	b580      	push	{r7, lr}
 800acac:	b082      	sub	sp, #8
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
 800acb2:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	331c      	adds	r3, #28
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	4798      	blx	r3
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d007      	beq.n	800acd6 <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2c>
        return pointerReturnValue();
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	336c      	adds	r3, #108	; 0x6c
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	4798      	blx	r3
 800acd2:	4603      	mov	r3, r0
 800acd4:	e000      	b.n	800acd8 <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2e>
    }
    return defaultValue;
 800acd6:	683b      	ldr	r3, [r7, #0]
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3708      	adds	r7, #8
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}

0800ace0 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv>:

const void* MockSupport::returnConstPointerValueOrDefault(const void * defaultValue)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b082      	sub	sp, #8
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	331c      	adds	r3, #28
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	4798      	blx	r3
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d007      	beq.n	800ad0c <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2c>
        return constPointerReturnValue();
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	3378      	adds	r3, #120	; 0x78
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	4798      	blx	r3
 800ad08:	4603      	mov	r3, r0
 800ad0a:	e000      	b.n	800ad0e <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2e>
    }
    return defaultValue;
 800ad0c:	683b      	ldr	r3, [r7, #0]
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3708      	adds	r7, #8
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}

0800ad16 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockSupport::returnFunctionPointerValueOrDefault(void (*defaultValue)()))()
{
 800ad16:	b580      	push	{r7, lr}
 800ad18:	b082      	sub	sp, #8
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	6078      	str	r0, [r7, #4]
 800ad1e:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	331c      	adds	r3, #28
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	4798      	blx	r3
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d007      	beq.n	800ad42 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2c>
        return functionPointerReturnValue();
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	3380      	adds	r3, #128	; 0x80
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	4798      	blx	r3
 800ad3e:	4603      	mov	r3, r0
 800ad40:	e000      	b.n	800ad44 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2e>
    }
    return defaultValue;
 800ad42:	683b      	ldr	r3, [r7, #0]
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3708      	adds	r7, #8
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <_ZN11MockSupport18pointerReturnValueEv>:

void* MockSupport::pointerReturnValue()
{
 800ad4c:	b590      	push	{r4, r7, lr}
 800ad4e:	b091      	sub	sp, #68	; 0x44
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	3320      	adds	r3, #32
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f107 0208 	add.w	r2, r7, #8
 800ad60:	6879      	ldr	r1, [r7, #4]
 800ad62:	4610      	mov	r0, r2
 800ad64:	4798      	blx	r3
 800ad66:	f107 0308 	add.w	r3, r7, #8
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f011 fe34 	bl	801c9d8 <_ZNK14MockNamedValue15getPointerValueEv>
 800ad70:	4604      	mov	r4, r0
 800ad72:	bf00      	nop
 800ad74:	f107 0308 	add.w	r3, r7, #8
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f011 f91d 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
 800ad7e:	4623      	mov	r3, r4
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3744      	adds	r7, #68	; 0x44
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd90      	pop	{r4, r7, pc}

0800ad88 <_ZN11MockSupport23constPointerReturnValueEv>:

const void* MockSupport::constPointerReturnValue()
{
 800ad88:	b590      	push	{r4, r7, lr}
 800ad8a:	b091      	sub	sp, #68	; 0x44
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	3320      	adds	r3, #32
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f107 0208 	add.w	r2, r7, #8
 800ad9c:	6879      	ldr	r1, [r7, #4]
 800ad9e:	4610      	mov	r0, r2
 800ada0:	4798      	blx	r3
 800ada2:	f107 0308 	add.w	r3, r7, #8
 800ada6:	4618      	mov	r0, r3
 800ada8:	f011 fe3e 	bl	801ca28 <_ZNK14MockNamedValue20getConstPointerValueEv>
 800adac:	4604      	mov	r4, r0
 800adae:	bf00      	nop
 800adb0:	f107 0308 	add.w	r3, r7, #8
 800adb4:	4618      	mov	r0, r3
 800adb6:	f011 f8ff 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
 800adba:	4623      	mov	r3, r4
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3744      	adds	r7, #68	; 0x44
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd90      	pop	{r4, r7, pc}

0800adc4 <_ZN11MockSupport26functionPointerReturnValueEv>:

void (*MockSupport::functionPointerReturnValue())()
{
 800adc4:	b590      	push	{r4, r7, lr}
 800adc6:	b091      	sub	sp, #68	; 0x44
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	3320      	adds	r3, #32
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f107 0208 	add.w	r2, r7, #8
 800add8:	6879      	ldr	r1, [r7, #4]
 800adda:	4610      	mov	r0, r2
 800addc:	4798      	blx	r3
 800adde:	f107 0308 	add.w	r3, r7, #8
 800ade2:	4618      	mov	r0, r3
 800ade4:	f011 fe48 	bl	801ca78 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 800ade8:	4604      	mov	r4, r0
 800adea:	bf00      	nop
 800adec:	f107 0308 	add.w	r3, r7, #8
 800adf0:	4618      	mov	r0, r3
 800adf2:	f011 f8e1 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
 800adf6:	4623      	mov	r3, r4
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3744      	adds	r7, #68	; 0x44
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd90      	pop	{r4, r7, pc}

0800ae00 <_ZN11MockSupport14hasReturnValueEv>:

bool MockSupport::hasReturnValue()
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->hasReturnValue();
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d00a      	beq.n	800ae26 <_ZN11MockSupport14hasReturnValueEv+0x26>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	3350      	adds	r3, #80	; 0x50
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4610      	mov	r0, r2
 800ae20:	4798      	blx	r3
 800ae22:	4603      	mov	r3, r0
 800ae24:	e000      	b.n	800ae28 <_ZN11MockSupport14hasReturnValueEv+0x28>
    return false;
 800ae26:	2300      	movs	r3, #0
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3708      	adds	r7, #8
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <_Z41__static_initialization_and_destruction_0ii>:
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d115      	bne.n	800ae6c <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d110      	bne.n	800ae6c <_Z41__static_initialization_and_destruction_0ii+0x3c>
static MockSupport global_mock;
 800ae4a:	f107 0308 	add.w	r3, r7, #8
 800ae4e:	490f      	ldr	r1, [pc, #60]	; (800ae8c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800ae50:	4618      	mov	r0, r3
 800ae52:	f000 fb62 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800ae56:	f107 0308 	add.w	r3, r7, #8
 800ae5a:	4619      	mov	r1, r3
 800ae5c:	480c      	ldr	r0, [pc, #48]	; (800ae90 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800ae5e:	f7fe fc6d 	bl	800973c <_ZN11MockSupportC1ERK12SimpleString>
 800ae62:	f107 0308 	add.w	r3, r7, #8
 800ae66:	4618      	mov	r0, r3
 800ae68:	f000 ff0f 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d107      	bne.n	800ae82 <_Z41__static_initialization_and_destruction_0ii+0x52>
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d102      	bne.n	800ae82 <_Z41__static_initialization_and_destruction_0ii+0x52>
 800ae7c:	4804      	ldr	r0, [pc, #16]	; (800ae90 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800ae7e:	f7fe fca7 	bl	80097d0 <_ZN11MockSupportD1Ev>
}
 800ae82:	bf00      	nop
 800ae84:	3710      	adds	r7, #16
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	08022910 	.word	0x08022910
 800ae90:	20000754 	.word	0x20000754

0800ae94 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>:
protected:
    void addExpectationsAndCallHistory(const MockExpectedCallsList& expectations);
    void addExpectationsAndCallHistoryRelatedTo(const SimpleString& function, const MockExpectedCallsList& expectations);
};

class MockExpectedCallsDidntHappenFailure : public MockFailure
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b082      	sub	sp, #8
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	4a05      	ldr	r2, [pc, #20]	; (800aeb4 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev+0x20>)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	601a      	str	r2, [r3, #0]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	4618      	mov	r0, r3
 800aea6:	f7fe fbbb 	bl	8009620 <_ZN11MockFailureD1Ev>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	4618      	mov	r0, r3
 800aeae:	3708      	adds	r7, #8
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}
 800aeb4:	08026230 	.word	0x08026230

0800aeb8 <_ZN35MockExpectedCallsDidntHappenFailureD0Ev>:
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f7ff ffe7 	bl	800ae94 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
 800aec6:	2134      	movs	r1, #52	; 0x34
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f7fd ff77 	bl	8008dbc <_ZdlPvj>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	4618      	mov	r0, r3
 800aed2:	3708      	adds	r7, #8
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <_ZN20MockCallOrderFailureD1Ev>:
{
public:
    MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations);
};

class MockCallOrderFailure : public MockFailure
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b082      	sub	sp, #8
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	4a05      	ldr	r2, [pc, #20]	; (800aef8 <_ZN20MockCallOrderFailureD1Ev+0x20>)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	601a      	str	r2, [r3, #0]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7fe fb99 	bl	8009620 <_ZN11MockFailureD1Ev>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	4618      	mov	r0, r3
 800aef2:	3708      	adds	r7, #8
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	08026204 	.word	0x08026204

0800aefc <_ZN20MockCallOrderFailureD0Ev>:
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b082      	sub	sp, #8
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f7ff ffe7 	bl	800aed8 <_ZN20MockCallOrderFailureD1Ev>
 800af0a:	2134      	movs	r1, #52	; 0x34
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f7fd ff55 	bl	8008dbc <_ZdlPvj>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	4618      	mov	r0, r3
 800af16:	3708      	adds	r7, #8
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <_GLOBAL__sub_I__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800af1c:	b580      	push	{r7, lr}
 800af1e:	af00      	add	r7, sp, #0
 800af20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800af24:	2001      	movs	r0, #1
 800af26:	f7ff ff83 	bl	800ae30 <_Z41__static_initialization_and_destruction_0ii>
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <_GLOBAL__sub_D__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800af2c:	b580      	push	{r7, lr}
 800af2e:	af00      	add	r7, sp, #0
 800af30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800af34:	2000      	movs	r0, #0
 800af36:	f7ff ff7b 	bl	800ae30 <_Z41__static_initialization_and_destruction_0ii>
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <_ZN11SimpleMutexC1Ev>:
 */
#include "CppUTest/TestHarness.h"
#include "CppUTest/SimpleMutex.h"


SimpleMutex::SimpleMutex(void)
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
{
    psMtx = PlatformSpecificMutexCreate();
 800af44:	4b05      	ldr	r3, [pc, #20]	; (800af5c <_ZN11SimpleMutexC1Ev+0x20>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4798      	blx	r3
 800af4a:	4602      	mov	r2, r0
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	601a      	str	r2, [r3, #0]
}
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	4618      	mov	r0, r3
 800af54:	3708      	adds	r7, #8
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	200000f0 	.word	0x200000f0

0800af60 <_ZN11SimpleMutexD1Ev>:

SimpleMutex::~SimpleMutex(void)
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
{
    PlatformSpecificMutexDestroy(psMtx);
 800af68:	4b05      	ldr	r3, [pc, #20]	; (800af80 <_ZN11SimpleMutexD1Ev+0x20>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	6812      	ldr	r2, [r2, #0]
 800af70:	4610      	mov	r0, r2
 800af72:	4798      	blx	r3
}
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	4618      	mov	r0, r3
 800af78:	3708      	adds	r7, #8
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	200000fc 	.word	0x200000fc

0800af84 <_ZN11SimpleMutex4LockEv>:

void SimpleMutex::Lock(void)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexLock(psMtx);
 800af8c:	4b04      	ldr	r3, [pc, #16]	; (800afa0 <_ZN11SimpleMutex4LockEv+0x1c>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	687a      	ldr	r2, [r7, #4]
 800af92:	6812      	ldr	r2, [r2, #0]
 800af94:	4610      	mov	r0, r2
 800af96:	4798      	blx	r3
}
 800af98:	bf00      	nop
 800af9a:	3708      	adds	r7, #8
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	200000f4 	.word	0x200000f4

0800afa4 <_ZN11SimpleMutex6UnlockEv>:

void SimpleMutex::Unlock(void)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b082      	sub	sp, #8
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexUnlock(psMtx);
 800afac:	4b04      	ldr	r3, [pc, #16]	; (800afc0 <_ZN11SimpleMutex6UnlockEv+0x1c>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	687a      	ldr	r2, [r7, #4]
 800afb2:	6812      	ldr	r2, [r2, #0]
 800afb4:	4610      	mov	r0, r2
 800afb6:	4798      	blx	r3
}
 800afb8:	bf00      	nop
 800afba:	3708      	adds	r7, #8
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}
 800afc0:	200000f8 	.word	0x200000f8

0800afc4 <_ZN15ScopedMutexLockC1EP11SimpleMutex>:


ScopedMutexLock::ScopedMutexLock(SimpleMutex *mtx) :
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	6039      	str	r1, [r7, #0]
    mutex(mtx)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	683a      	ldr	r2, [r7, #0]
 800afd2:	601a      	str	r2, [r3, #0]
{
    mutex->Lock();
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4618      	mov	r0, r3
 800afda:	f7ff ffd3 	bl	800af84 <_ZN11SimpleMutex4LockEv>
}
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	4618      	mov	r0, r3
 800afe2:	3708      	adds	r7, #8
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <_ZN15ScopedMutexLockD1Ev>:

ScopedMutexLock::~ScopedMutexLock()
 800afe8:	b580      	push	{r7, lr}
 800afea:	b082      	sub	sp, #8
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
{
    mutex->Unlock();
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	4618      	mov	r0, r3
 800aff6:	f7ff ffd5 	bl	800afa4 <_ZN11SimpleMutex6UnlockEv>
}
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	4618      	mov	r0, r3
 800affe:	3708      	adds	r7, #8
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <_ZN12SimpleString18getStringAllocatorEv>:
}

TestMemoryAllocator* SimpleString::stringAllocator_ = NULLPTR;

TestMemoryAllocator* SimpleString::getStringAllocator()
{
 800b004:	b580      	push	{r7, lr}
 800b006:	af00      	add	r7, sp, #0
    if (stringAllocator_ == NULLPTR)
 800b008:	4b05      	ldr	r3, [pc, #20]	; (800b020 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d103      	bne.n	800b018 <_ZN12SimpleString18getStringAllocatorEv+0x14>
        return defaultNewArrayAllocator();
 800b010:	f003 fd7a 	bl	800eb08 <_Z24defaultNewArrayAllocatorv>
 800b014:	4603      	mov	r3, r0
 800b016:	e001      	b.n	800b01c <_ZN12SimpleString18getStringAllocatorEv+0x18>
    return stringAllocator_;
 800b018:	4b01      	ldr	r3, [pc, #4]	; (800b020 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800b01a:	681b      	ldr	r3, [r3, #0]
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	2000079c 	.word	0x2000079c

0800b024 <_ZN12SimpleString17allocStringBufferEjPKcj>:
    stringAllocator_ = allocator;
}

/* Avoid using the memory leak detector INSIDE SimpleString as its used inside the detector */
char* SimpleString::allocStringBuffer(size_t _size, const char* file, size_t line)
{
 800b024:	b590      	push	{r4, r7, lr}
 800b026:	b085      	sub	sp, #20
 800b028:	af00      	add	r7, sp, #0
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	607a      	str	r2, [r7, #4]
    return getStringAllocator()->alloc_memory(_size, file, line);
 800b030:	f7ff ffe8 	bl	800b004 <_ZN12SimpleString18getStringAllocatorEv>
 800b034:	6803      	ldr	r3, [r0, #0]
 800b036:	3308      	adds	r3, #8
 800b038:	681c      	ldr	r4, [r3, #0]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	68ba      	ldr	r2, [r7, #8]
 800b03e:	68f9      	ldr	r1, [r7, #12]
 800b040:	47a0      	blx	r4
 800b042:	4603      	mov	r3, r0
}
 800b044:	4618      	mov	r0, r3
 800b046:	3714      	adds	r7, #20
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd90      	pop	{r4, r7, pc}

0800b04c <_ZN12SimpleString19deallocStringBufferEPcjPKcj>:

void SimpleString::deallocStringBuffer(char* str, size_t size, const char* file, size_t line)
{
 800b04c:	b590      	push	{r4, r7, lr}
 800b04e:	b087      	sub	sp, #28
 800b050:	af02      	add	r7, sp, #8
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	607a      	str	r2, [r7, #4]
 800b058:	603b      	str	r3, [r7, #0]
    getStringAllocator()->free_memory(str, size, file, line);
 800b05a:	f7ff ffd3 	bl	800b004 <_ZN12SimpleString18getStringAllocatorEv>
 800b05e:	6803      	ldr	r3, [r0, #0]
 800b060:	330c      	adds	r3, #12
 800b062:	681c      	ldr	r4, [r3, #0]
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	9300      	str	r3, [sp, #0]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	68ba      	ldr	r2, [r7, #8]
 800b06c:	68f9      	ldr	r1, [r7, #12]
 800b06e:	47a0      	blx	r4
}
 800b070:	bf00      	nop
 800b072:	3714      	adds	r7, #20
 800b074:	46bd      	mov	sp, r7
 800b076:	bd90      	pop	{r4, r7, pc}

0800b078 <_ZNK12SimpleString14getEmptyStringEv>:

char* SimpleString::getEmptyString() const
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
    char* empty = allocStringBuffer(1, __FILE__, __LINE__);
 800b080:	2284      	movs	r2, #132	; 0x84
 800b082:	4906      	ldr	r1, [pc, #24]	; (800b09c <_ZNK12SimpleString14getEmptyStringEv+0x24>)
 800b084:	2001      	movs	r0, #1
 800b086:	f7ff ffcd 	bl	800b024 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800b08a:	60f8      	str	r0, [r7, #12]
    empty[0] = '\0';
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2200      	movs	r2, #0
 800b090:	701a      	strb	r2, [r3, #0]
    return empty;
 800b092:	68fb      	ldr	r3, [r7, #12]
}
 800b094:	4618      	mov	r0, r3
 800b096:	3710      	adds	r7, #16
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}
 800b09c:	080229a8 	.word	0x080229a8

0800b0a0 <_ZN12SimpleString4AtoUEPKc>:

// does not support + or - prefixes
unsigned SimpleString::AtoU(const char* str)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b084      	sub	sp, #16
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f001 f809 	bl	800c0c4 <_ZN12SimpleString7isSpaceEc>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d003      	beq.n	800b0c0 <_ZN12SimpleString4AtoUEPKc+0x20>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	607b      	str	r3, [r7, #4]
 800b0be:	e7f3      	b.n	800b0a8 <_ZN12SimpleString4AtoUEPKc+0x8>

    unsigned result = 0;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f000 ffe7 	bl	800c09c <_ZN12SimpleString7isDigitEc>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d005      	beq.n	800b0e0 <_ZN12SimpleString4AtoUEPKc+0x40>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	2b2f      	cmp	r3, #47	; 0x2f
 800b0da:	d901      	bls.n	800b0e0 <_ZN12SimpleString4AtoUEPKc+0x40>
 800b0dc:	2301      	movs	r3, #1
 800b0de:	e000      	b.n	800b0e2 <_ZN12SimpleString4AtoUEPKc+0x42>
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d010      	beq.n	800b108 <_ZN12SimpleString4AtoUEPKc+0x68>
    {
        result *= 10;
 800b0e6:	68fa      	ldr	r2, [r7, #12]
 800b0e8:	4613      	mov	r3, r2
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	4413      	add	r3, r2
 800b0ee:	005b      	lsls	r3, r3, #1
 800b0f0:	60fb      	str	r3, [r7, #12]
        result += static_cast<unsigned>(*str - '0');
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	4413      	add	r3, r2
 800b0fc:	3b30      	subs	r3, #48	; 0x30
 800b0fe:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	3301      	adds	r3, #1
 800b104:	607b      	str	r3, [r7, #4]
 800b106:	e7dd      	b.n	800b0c4 <_ZN12SimpleString4AtoUEPKc+0x24>
    }
    return result;
 800b108:	68fb      	ldr	r3, [r7, #12]
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3710      	adds	r7, #16
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <_ZN12SimpleString4AtoIEPKc>:

int SimpleString::AtoI(const char* str)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b084      	sub	sp, #16
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	4618      	mov	r0, r3
 800b120:	f000 ffd0 	bl	800c0c4 <_ZN12SimpleString7isSpaceEc>
 800b124:	4603      	mov	r3, r0
 800b126:	2b00      	cmp	r3, #0
 800b128:	d003      	beq.n	800b132 <_ZN12SimpleString4AtoIEPKc+0x20>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	3301      	adds	r3, #1
 800b12e:	607b      	str	r3, [r7, #4]
 800b130:	e7f3      	b.n	800b11a <_ZN12SimpleString4AtoIEPKc+0x8>

    char first_char = *str;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	72fb      	strb	r3, [r7, #11]
    if (first_char == '-' || first_char == '+') str++;
 800b138:	7afb      	ldrb	r3, [r7, #11]
 800b13a:	2b2d      	cmp	r3, #45	; 0x2d
 800b13c:	d002      	beq.n	800b144 <_ZN12SimpleString4AtoIEPKc+0x32>
 800b13e:	7afb      	ldrb	r3, [r7, #11]
 800b140:	2b2b      	cmp	r3, #43	; 0x2b
 800b142:	d102      	bne.n	800b14a <_ZN12SimpleString4AtoIEPKc+0x38>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	3301      	adds	r3, #1
 800b148:	607b      	str	r3, [r7, #4]

    int  result = 0;
 800b14a:	2300      	movs	r3, #0
 800b14c:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	4618      	mov	r0, r3
 800b154:	f000 ffa2 	bl	800c09c <_ZN12SimpleString7isDigitEc>
 800b158:	4603      	mov	r3, r0
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d00f      	beq.n	800b17e <_ZN12SimpleString4AtoIEPKc+0x6c>
    {
        result *= 10;
 800b15e:	68fa      	ldr	r2, [r7, #12]
 800b160:	4613      	mov	r3, r2
 800b162:	009b      	lsls	r3, r3, #2
 800b164:	4413      	add	r3, r2
 800b166:	005b      	lsls	r3, r3, #1
 800b168:	60fb      	str	r3, [r7, #12]
        result += *str - '0';
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	3b30      	subs	r3, #48	; 0x30
 800b170:	68fa      	ldr	r2, [r7, #12]
 800b172:	4413      	add	r3, r2
 800b174:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	3301      	adds	r3, #1
 800b17a:	607b      	str	r3, [r7, #4]
 800b17c:	e7e7      	b.n	800b14e <_ZN12SimpleString4AtoIEPKc+0x3c>
    }
    return (first_char == '-') ? -result : result;
 800b17e:	7afb      	ldrb	r3, [r7, #11]
 800b180:	2b2d      	cmp	r3, #45	; 0x2d
 800b182:	d102      	bne.n	800b18a <_ZN12SimpleString4AtoIEPKc+0x78>
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	425b      	negs	r3, r3
 800b188:	e000      	b.n	800b18c <_ZN12SimpleString4AtoIEPKc+0x7a>
 800b18a:	68fb      	ldr	r3, [r7, #12]
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3710      	adds	r7, #16
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <_ZN12SimpleString6StrCmpEPKcS1_>:

int SimpleString::StrCmp(const char* s1, const char* s2)
{
 800b194:	b480      	push	{r7}
 800b196:	b083      	sub	sp, #12
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6039      	str	r1, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d00c      	beq.n	800b1c0 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	781a      	ldrb	r2, [r3, #0]
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d106      	bne.n	800b1c0 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
       ++s1;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	3301      	adds	r3, #1
 800b1b6:	607b      	str	r3, [r7, #4]
       ++s2;
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	3301      	adds	r3, #1
 800b1bc:	603b      	str	r3, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800b1be:	e7ee      	b.n	800b19e <_ZN12SimpleString6StrCmpEPKcS1_+0xa>
   }
   return *(const unsigned char *) s1 - *(const unsigned char *) s2;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	781b      	ldrb	r3, [r3, #0]
 800b1c4:	461a      	mov	r2, r3
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	1ad3      	subs	r3, r2, r3
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	370c      	adds	r7, #12
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <_ZN12SimpleString6StrLenEPKc>:

size_t SimpleString::StrLen(const char* str)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b085      	sub	sp, #20
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
    size_t n = (size_t)-1;
 800b1e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b1e4:	60fb      	str	r3, [r7, #12]
    do n++; while (*str++);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	60fb      	str	r3, [r7, #12]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	1c5a      	adds	r2, r3, #1
 800b1f0:	607a      	str	r2, [r7, #4]
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	bf14      	ite	ne
 800b1f8:	2301      	movne	r3, #1
 800b1fa:	2300      	moveq	r3, #0
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d000      	beq.n	800b204 <_ZN12SimpleString6StrLenEPKc+0x2c>
 800b202:	e7f0      	b.n	800b1e6 <_ZN12SimpleString6StrLenEPKc+0xe>
    return n;
 800b204:	68fb      	ldr	r3, [r7, #12]
}
 800b206:	4618      	mov	r0, r3
 800b208:	3714      	adds	r7, #20
 800b20a:	46bd      	mov	sp, r7
 800b20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b210:	4770      	bx	lr

0800b212 <_ZN12SimpleString7StrNCmpEPKcS1_j>:

int SimpleString::StrNCmp(const char* s1, const char* s2, size_t n)
{
 800b212:	b480      	push	{r7}
 800b214:	b085      	sub	sp, #20
 800b216:	af00      	add	r7, sp, #0
 800b218:	60f8      	str	r0, [r7, #12]
 800b21a:	60b9      	str	r1, [r7, #8]
 800b21c:	607a      	str	r2, [r7, #4]
    while (n && *s1 && *s1 == *s2) {
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d013      	beq.n	800b24c <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d00f      	beq.n	800b24c <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	781a      	ldrb	r2, [r3, #0]
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	429a      	cmp	r2, r3
 800b236:	d109      	bne.n	800b24c <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
        --n;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	3b01      	subs	r3, #1
 800b23c:	607b      	str	r3, [r7, #4]
        ++s1;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	3301      	adds	r3, #1
 800b242:	60fb      	str	r3, [r7, #12]
        ++s2;
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	3301      	adds	r3, #1
 800b248:	60bb      	str	r3, [r7, #8]
    while (n && *s1 && *s1 == *s2) {
 800b24a:	e7e8      	b.n	800b21e <_ZN12SimpleString7StrNCmpEPKcS1_j+0xc>
    }
    return n ? *(const unsigned char *) s1 - *(const unsigned char *) s2 : 0;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d006      	beq.n	800b260 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x4e>
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	461a      	mov	r2, r3
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	1ad3      	subs	r3, r2, r3
 800b25e:	e000      	b.n	800b262 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x50>
 800b260:	2300      	movs	r3, #0
}
 800b262:	4618      	mov	r0, r3
 800b264:	3714      	adds	r7, #20
 800b266:	46bd      	mov	sp, r7
 800b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26c:	4770      	bx	lr

0800b26e <_ZN12SimpleString7StrNCpyEPcPKcj>:

char* SimpleString::StrNCpy(char* s1, const char* s2, size_t n)
{
 800b26e:	b480      	push	{r7}
 800b270:	b087      	sub	sp, #28
 800b272:	af00      	add	r7, sp, #0
 800b274:	60f8      	str	r0, [r7, #12]
 800b276:	60b9      	str	r1, [r7, #8]
 800b278:	607a      	str	r2, [r7, #4]
    char* result = s1;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	617b      	str	r3, [r7, #20]

    if((NULLPTR == s1) || (0 == n)) return result;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d002      	beq.n	800b28a <_ZN12SimpleString7StrNCpyEPcPKcj+0x1c>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d101      	bne.n	800b28e <_ZN12SimpleString7StrNCpyEPcPKcj+0x20>
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	e01e      	b.n	800b2cc <_ZN12SimpleString7StrNCpyEPcPKcj+0x5e>

    *s1 = *s2;
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	781a      	ldrb	r2, [r3, #0]
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	3b01      	subs	r3, #1
 800b29a:	607b      	str	r3, [r7, #4]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d005      	beq.n	800b2ae <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d001      	beq.n	800b2ae <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	e000      	b.n	800b2b0 <_ZN12SimpleString7StrNCpyEPcPKcj+0x42>
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d00a      	beq.n	800b2ca <_ZN12SimpleString7StrNCpyEPcPKcj+0x5c>
        *++s1 = *++s2;
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	60bb      	str	r3, [r7, #8]
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	3301      	adds	r3, #1
 800b2be:	60fb      	str	r3, [r7, #12]
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	781a      	ldrb	r2, [r3, #0]
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800b2c8:	e7e5      	b.n	800b296 <_ZN12SimpleString7StrNCpyEPcPKcj+0x28>
    }
    return result;
 800b2ca:	697b      	ldr	r3, [r7, #20]
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	371c      	adds	r7, #28
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <_ZN12SimpleString6StrStrEPKcS1_>:

const char* SimpleString::StrStr(const char* s1, const char* s2)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
    if(!*s2) return s1;
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	781b      	ldrb	r3, [r3, #0]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d101      	bne.n	800b2ee <_ZN12SimpleString6StrStrEPKcS1_+0x16>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	e01b      	b.n	800b326 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	781b      	ldrb	r3, [r3, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d016      	beq.n	800b324 <_ZN12SimpleString6StrStrEPKcS1_+0x4c>
        if (StrNCmp(s1, s2, StrLen(s2)) == 0)
 800b2f6:	6838      	ldr	r0, [r7, #0]
 800b2f8:	f7ff ff6e 	bl	800b1d8 <_ZN12SimpleString6StrLenEPKc>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	461a      	mov	r2, r3
 800b300:	6839      	ldr	r1, [r7, #0]
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f7ff ff85 	bl	800b212 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800b308:	4603      	mov	r3, r0
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	bf0c      	ite	eq
 800b30e:	2301      	moveq	r3, #1
 800b310:	2300      	movne	r3, #0
 800b312:	b2db      	uxtb	r3, r3
 800b314:	2b00      	cmp	r3, #0
 800b316:	d001      	beq.n	800b31c <_ZN12SimpleString6StrStrEPKcS1_+0x44>
            return s1;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	e004      	b.n	800b326 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	3301      	adds	r3, #1
 800b320:	607b      	str	r3, [r7, #4]
 800b322:	e7e4      	b.n	800b2ee <_ZN12SimpleString6StrStrEPKcS1_+0x16>
    return NULLPTR;
 800b324:	2300      	movs	r3, #0
}
 800b326:	4618      	mov	r0, r3
 800b328:	3708      	adds	r7, #8
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}

0800b32e <_ZN12SimpleString7ToLowerEc>:

char SimpleString::ToLower(char ch)
{
 800b32e:	b580      	push	{r7, lr}
 800b330:	b082      	sub	sp, #8
 800b332:	af00      	add	r7, sp, #0
 800b334:	4603      	mov	r3, r0
 800b336:	71fb      	strb	r3, [r7, #7]
    return isUpper(ch) ? (char)((int)ch + ('a' - 'A')) : ch;
 800b338:	79fb      	ldrb	r3, [r7, #7]
 800b33a:	4618      	mov	r0, r3
 800b33c:	f000 fed9 	bl	800c0f2 <_ZN12SimpleString7isUpperEc>
 800b340:	4603      	mov	r3, r0
 800b342:	2b00      	cmp	r3, #0
 800b344:	d003      	beq.n	800b34e <_ZN12SimpleString7ToLowerEc+0x20>
 800b346:	79fb      	ldrb	r3, [r7, #7]
 800b348:	3320      	adds	r3, #32
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	e000      	b.n	800b350 <_ZN12SimpleString7ToLowerEc+0x22>
 800b34e:	79fb      	ldrb	r3, [r7, #7]
}
 800b350:	4618      	mov	r0, r3
 800b352:	3708      	adds	r7, #8
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <_ZN12SimpleString6MemCmpEPKvS1_j>:

int SimpleString::MemCmp(const void* s1, const void *s2, size_t n)
{
 800b358:	b480      	push	{r7}
 800b35a:	b087      	sub	sp, #28
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	60f8      	str	r0, [r7, #12]
 800b360:	60b9      	str	r1, [r7, #8]
 800b362:	607a      	str	r2, [r7, #4]
    const unsigned char* p1 = (const unsigned char*) s1;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	617b      	str	r3, [r7, #20]
    const unsigned char* p2 = (const unsigned char*) s2;
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	613b      	str	r3, [r7, #16]

    while (n--)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	1e5a      	subs	r2, r3, #1
 800b370:	607a      	str	r2, [r7, #4]
 800b372:	2b00      	cmp	r3, #0
 800b374:	bf14      	ite	ne
 800b376:	2301      	movne	r3, #1
 800b378:	2300      	moveq	r3, #0
 800b37a:	b2db      	uxtb	r3, r3
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d013      	beq.n	800b3a8 <_ZN12SimpleString6MemCmpEPKvS1_j+0x50>
        if (*p1 != *p2) {
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	781a      	ldrb	r2, [r3, #0]
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	781b      	ldrb	r3, [r3, #0]
 800b388:	429a      	cmp	r2, r3
 800b38a:	d006      	beq.n	800b39a <_ZN12SimpleString6MemCmpEPKvS1_j+0x42>
            return *p1 - *p2;
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	461a      	mov	r2, r3
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	781b      	ldrb	r3, [r3, #0]
 800b396:	1ad3      	subs	r3, r2, r3
 800b398:	e007      	b.n	800b3aa <_ZN12SimpleString6MemCmpEPKvS1_j+0x52>
        } else {
            ++p1;
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	3301      	adds	r3, #1
 800b39e:	617b      	str	r3, [r7, #20]
            ++p2;
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	613b      	str	r3, [r7, #16]
    while (n--)
 800b3a6:	e7e1      	b.n	800b36c <_ZN12SimpleString6MemCmpEPKvS1_j+0x14>
        }
    return 0;
 800b3a8:	2300      	movs	r3, #0
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	371c      	adds	r7, #28
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr
	...

0800b3b8 <_ZN12SimpleString24deallocateInternalBufferEv>:

void SimpleString::deallocateInternalBuffer()
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b082      	sub	sp, #8
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
    if (buffer_) {
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d00d      	beq.n	800b3e4 <_ZN12SimpleString24deallocateInternalBufferEv+0x2c>
        deallocStringBuffer(buffer_, bufferSize_, __FILE__, __LINE__);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6818      	ldr	r0, [r3, #0]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6859      	ldr	r1, [r3, #4]
 800b3d0:	23ee      	movs	r3, #238	; 0xee
 800b3d2:	4a06      	ldr	r2, [pc, #24]	; (800b3ec <_ZN12SimpleString24deallocateInternalBufferEv+0x34>)
 800b3d4:	f7ff fe3a 	bl	800b04c <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
        buffer_ = NULLPTR;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	601a      	str	r2, [r3, #0]
        bufferSize_ = 0;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	605a      	str	r2, [r3, #4]
    }
}
 800b3e4:	bf00      	nop
 800b3e6:	3708      	adds	r7, #8
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}
 800b3ec:	080229a8 	.word	0x080229a8

0800b3f0 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>:

void SimpleString::setInternalBufferAsEmptyString()
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
    deallocateInternalBuffer();
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f7ff ffdd 	bl	800b3b8 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = 1;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2201      	movs	r2, #1
 800b402:	605a      	str	r2, [r3, #4]
    buffer_ = getEmptyString();
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f7ff fe37 	bl	800b078 <_ZNK12SimpleString14getEmptyStringEv>
 800b40a:	4602      	mov	r2, r0
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	601a      	str	r2, [r3, #0]
}
 800b410:	bf00      	nop
 800b412:	3708      	adds	r7, #8
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer, size_t bufferSize)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	60f8      	str	r0, [r7, #12]
 800b420:	60b9      	str	r1, [r7, #8]
 800b422:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800b424:	68f8      	ldr	r0, [r7, #12]
 800b426:	f7ff ffc7 	bl	800b3b8 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	605a      	str	r2, [r3, #4]
    buffer_ = copyToNewBuffer(otherBuffer, bufferSize_);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	4619      	mov	r1, r3
 800b436:	68b8      	ldr	r0, [r7, #8]
 800b438:	f000 fe12 	bl	800c060 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800b43c:	4602      	mov	r2, r0
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	601a      	str	r2, [r3, #0]
}
 800b442:	bf00      	nop
 800b444:	3710      	adds	r7, #16
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
	...

0800b44c <_ZN12SimpleString28setInternalBufferToNewBufferEj>:

void SimpleString::setInternalBufferToNewBuffer(size_t bufferSize)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
    deallocateInternalBuffer();
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f7ff ffae 	bl	800b3b8 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	683a      	ldr	r2, [r7, #0]
 800b460:	605a      	str	r2, [r3, #4]
    buffer_ = allocStringBuffer(bufferSize_, __FILE__, __LINE__);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	f240 1209 	movw	r2, #265	; 0x109
 800b46a:	4907      	ldr	r1, [pc, #28]	; (800b488 <_ZN12SimpleString28setInternalBufferToNewBufferEj+0x3c>)
 800b46c:	4618      	mov	r0, r3
 800b46e:	f7ff fdd9 	bl	800b024 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800b472:	4602      	mov	r2, r0
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	2200      	movs	r2, #0
 800b47e:	701a      	strb	r2, [r3, #0]
}
 800b480:	bf00      	nop
 800b482:	3708      	adds	r7, #8
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	080229a8 	.word	0x080229a8

0800b48c <_ZN12SimpleString19setInternalBufferToEPcj>:

void SimpleString::setInternalBufferTo(char* buffer, size_t bufferSize)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b084      	sub	sp, #16
 800b490:	af00      	add	r7, sp, #0
 800b492:	60f8      	str	r0, [r7, #12]
 800b494:	60b9      	str	r1, [r7, #8]
 800b496:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800b498:	68f8      	ldr	r0, [r7, #12]
 800b49a:	f7ff ff8d 	bl	800b3b8 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	605a      	str	r2, [r3, #4]
    buffer_ = buffer;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	68ba      	ldr	r2, [r7, #8]
 800b4a8:	601a      	str	r2, [r3, #0]
}
 800b4aa:	bf00      	nop
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}

0800b4b2 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>:

void SimpleString::copyBufferToNewInternalBuffer(const SimpleString& otherBuffer)
{
 800b4b2:	b590      	push	{r4, r7, lr}
 800b4b4:	b083      	sub	sp, #12
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
 800b4ba:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer.buffer_, otherBuffer.size() + 1);
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	681c      	ldr	r4, [r3, #0]
 800b4c0:	6838      	ldr	r0, [r7, #0]
 800b4c2:	f000 fbc1 	bl	800bc48 <_ZNK12SimpleString4sizeEv>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	4621      	mov	r1, r4
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f7ff ffa2 	bl	800b418 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800b4d4:	bf00      	nop
 800b4d6:	370c      	adds	r7, #12
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd90      	pop	{r4, r7, pc}

0800b4dc <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer, StrLen(otherBuffer) + 1);
 800b4e6:	6838      	ldr	r0, [r7, #0]
 800b4e8:	f7ff fe76 	bl	800b1d8 <_ZN12SimpleString6StrLenEPKc>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	6839      	ldr	r1, [r7, #0]
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f7ff ff8f 	bl	800b418 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800b4fa:	bf00      	nop
 800b4fc:	3708      	adds	r7, #8
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}

0800b502 <_ZNK12SimpleString9getBufferEv>:

const char* SimpleString::getBuffer() const
{
 800b502:	b480      	push	{r7}
 800b504:	b083      	sub	sp, #12
 800b506:	af00      	add	r7, sp, #0
 800b508:	6078      	str	r0, [r7, #4]
    return buffer_;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
}
 800b50e:	4618      	mov	r0, r3
 800b510:	370c      	adds	r7, #12
 800b512:	46bd      	mov	sp, r7
 800b514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b518:	4770      	bx	lr

0800b51a <_ZN12SimpleStringC1EPKc>:

SimpleString::SimpleString(const char *otherBuffer)
 800b51a:	b580      	push	{r7, lr}
 800b51c:	b082      	sub	sp, #8
 800b51e:	af00      	add	r7, sp, #0
 800b520:	6078      	str	r0, [r7, #4]
 800b522:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	601a      	str	r2, [r3, #0]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2200      	movs	r2, #0
 800b52e:	605a      	str	r2, [r3, #4]
{
    if (otherBuffer == NULLPTR)
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d103      	bne.n	800b53e <_ZN12SimpleStringC1EPKc+0x24>
        setInternalBufferAsEmptyString();
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f7ff ff5a 	bl	800b3f0 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800b53c:	e003      	b.n	800b546 <_ZN12SimpleStringC1EPKc+0x2c>
    else
        copyBufferToNewInternalBuffer(otherBuffer);
 800b53e:	6839      	ldr	r1, [r7, #0]
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f7ff ffcb 	bl	800b4dc <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	4618      	mov	r0, r3
 800b54a:	3708      	adds	r7, #8
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <_ZN12SimpleStringC1EPKcj>:

SimpleString::SimpleString(const char *other, size_t repeatCount)
 800b550:	b580      	push	{r7, lr}
 800b552:	b088      	sub	sp, #32
 800b554:	af00      	add	r7, sp, #0
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	60b9      	str	r1, [r7, #8]
 800b55a:	607a      	str	r2, [r7, #4]
    : buffer_(NULLPTR), bufferSize_(0)
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2200      	movs	r2, #0
 800b560:	601a      	str	r2, [r3, #0]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2200      	movs	r2, #0
 800b566:	605a      	str	r2, [r3, #4]
{
    size_t otherStringLength = StrLen(other);
 800b568:	68b8      	ldr	r0, [r7, #8]
 800b56a:	f7ff fe35 	bl	800b1d8 <_ZN12SimpleString6StrLenEPKc>
 800b56e:	6178      	str	r0, [r7, #20]
    setInternalBufferToNewBuffer(otherStringLength * repeatCount + 1);
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	687a      	ldr	r2, [r7, #4]
 800b574:	fb02 f303 	mul.w	r3, r2, r3
 800b578:	3301      	adds	r3, #1
 800b57a:	4619      	mov	r1, r3
 800b57c:	68f8      	ldr	r0, [r7, #12]
 800b57e:	f7ff ff65 	bl	800b44c <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    char* next = buffer_;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800b588:	2300      	movs	r3, #0
 800b58a:	61bb      	str	r3, [r7, #24]
 800b58c:	69ba      	ldr	r2, [r7, #24]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	429a      	cmp	r2, r3
 800b592:	d20e      	bcs.n	800b5b2 <_ZN12SimpleStringC1EPKcj+0x62>
        StrNCpy(next, other, otherStringLength + 1);
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	3301      	adds	r3, #1
 800b598:	461a      	mov	r2, r3
 800b59a:	68b9      	ldr	r1, [r7, #8]
 800b59c:	69f8      	ldr	r0, [r7, #28]
 800b59e:	f7ff fe66 	bl	800b26e <_ZN12SimpleString7StrNCpyEPcPKcj>
        next += otherStringLength;
 800b5a2:	69fa      	ldr	r2, [r7, #28]
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	4413      	add	r3, r2
 800b5a8:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800b5aa:	69bb      	ldr	r3, [r7, #24]
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	61bb      	str	r3, [r7, #24]
 800b5b0:	e7ec      	b.n	800b58c <_ZN12SimpleStringC1EPKcj+0x3c>
    }
    *next = 0;
 800b5b2:	69fb      	ldr	r3, [r7, #28]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	701a      	strb	r2, [r3, #0]
}
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3720      	adds	r7, #32
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}

0800b5c2 <_ZN12SimpleStringC1ERKS_>:

SimpleString::SimpleString(const SimpleString& other)
 800b5c2:	b580      	push	{r7, lr}
 800b5c4:	b082      	sub	sp, #8
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
 800b5ca:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	601a      	str	r2, [r3, #0]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	605a      	str	r2, [r3, #4]
{
    copyBufferToNewInternalBuffer(other.getBuffer());
 800b5d8:	6838      	ldr	r0, [r7, #0]
 800b5da:	f7ff ff92 	bl	800b502 <_ZNK12SimpleString9getBufferEv>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f7ff ff7a 	bl	800b4dc <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3708      	adds	r7, #8
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}

0800b5f2 <_ZN12SimpleStringaSERKS_>:

SimpleString& SimpleString::operator=(const SimpleString& other)
{
 800b5f2:	b580      	push	{r7, lr}
 800b5f4:	b082      	sub	sp, #8
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	6078      	str	r0, [r7, #4]
 800b5fa:	6039      	str	r1, [r7, #0]
    if (this != &other)
 800b5fc:	687a      	ldr	r2, [r7, #4]
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	429a      	cmp	r2, r3
 800b602:	d003      	beq.n	800b60c <_ZN12SimpleStringaSERKS_+0x1a>
        copyBufferToNewInternalBuffer(other);
 800b604:	6839      	ldr	r1, [r7, #0]
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f7ff ff53 	bl	800b4b2 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>
    return *this;
 800b60c:	687b      	ldr	r3, [r7, #4]
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3708      	adds	r7, #8
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}

0800b616 <_ZNK12SimpleString8containsERKS_>:

bool SimpleString::contains(const SimpleString& other) const
{
 800b616:	b590      	push	{r4, r7, lr}
 800b618:	b083      	sub	sp, #12
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	6078      	str	r0, [r7, #4]
 800b61e:	6039      	str	r1, [r7, #0]
    return StrStr(getBuffer(), other.getBuffer()) != NULLPTR;
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f7ff ff6e 	bl	800b502 <_ZNK12SimpleString9getBufferEv>
 800b626:	4604      	mov	r4, r0
 800b628:	6838      	ldr	r0, [r7, #0]
 800b62a:	f7ff ff6a 	bl	800b502 <_ZNK12SimpleString9getBufferEv>
 800b62e:	4603      	mov	r3, r0
 800b630:	4619      	mov	r1, r3
 800b632:	4620      	mov	r0, r4
 800b634:	f7ff fe50 	bl	800b2d8 <_ZN12SimpleString6StrStrEPKcS1_>
 800b638:	4603      	mov	r3, r0
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	bf14      	ite	ne
 800b63e:	2301      	movne	r3, #1
 800b640:	2300      	moveq	r3, #0
 800b642:	b2db      	uxtb	r3, r3
}
 800b644:	4618      	mov	r0, r3
 800b646:	370c      	adds	r7, #12
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd90      	pop	{r4, r7, pc}

0800b64c <_ZNK12SimpleString14containsNoCaseERKS_>:

bool SimpleString::containsNoCase(const SimpleString& other) const
{
 800b64c:	b590      	push	{r4, r7, lr}
 800b64e:	b087      	sub	sp, #28
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
    return lowerCase().contains(other.lowerCase());
 800b656:	f107 0308 	add.w	r3, r7, #8
 800b65a:	6879      	ldr	r1, [r7, #4]
 800b65c:	4618      	mov	r0, r3
 800b65e:	f000 fabb 	bl	800bbd8 <_ZNK12SimpleString9lowerCaseEv>
 800b662:	f107 0310 	add.w	r3, r7, #16
 800b666:	6839      	ldr	r1, [r7, #0]
 800b668:	4618      	mov	r0, r3
 800b66a:	f000 fab5 	bl	800bbd8 <_ZNK12SimpleString9lowerCaseEv>
 800b66e:	f107 0210 	add.w	r2, r7, #16
 800b672:	f107 0308 	add.w	r3, r7, #8
 800b676:	4611      	mov	r1, r2
 800b678:	4618      	mov	r0, r3
 800b67a:	f7ff ffcc 	bl	800b616 <_ZNK12SimpleString8containsERKS_>
 800b67e:	4603      	mov	r3, r0
 800b680:	461c      	mov	r4, r3
 800b682:	bf00      	nop
 800b684:	f107 0310 	add.w	r3, r7, #16
 800b688:	4618      	mov	r0, r3
 800b68a:	f000 fafe 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800b68e:	f107 0308 	add.w	r3, r7, #8
 800b692:	4618      	mov	r0, r3
 800b694:	f000 faf9 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800b698:	4623      	mov	r3, r4
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	371c      	adds	r7, #28
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd90      	pop	{r4, r7, pc}

0800b6a2 <_ZNK12SimpleString10startsWithERKS_>:

bool SimpleString::startsWith(const SimpleString& other) const
{
 800b6a2:	b590      	push	{r4, r7, lr}
 800b6a4:	b083      	sub	sp, #12
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
 800b6aa:	6039      	str	r1, [r7, #0]
    if (other.size() == 0) return true;
 800b6ac:	6838      	ldr	r0, [r7, #0]
 800b6ae:	f000 facb 	bl	800bc48 <_ZNK12SimpleString4sizeEv>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	bf0c      	ite	eq
 800b6b8:	2301      	moveq	r3, #1
 800b6ba:	2300      	movne	r3, #0
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d001      	beq.n	800b6c6 <_ZNK12SimpleString10startsWithERKS_+0x24>
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	e022      	b.n	800b70c <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else if (size() == 0) return false;
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f000 fabe 	bl	800bc48 <_ZNK12SimpleString4sizeEv>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	bf0c      	ite	eq
 800b6d2:	2301      	moveq	r3, #1
 800b6d4:	2300      	movne	r3, #0
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d001      	beq.n	800b6e0 <_ZNK12SimpleString10startsWithERKS_+0x3e>
 800b6dc:	2300      	movs	r3, #0
 800b6de:	e015      	b.n	800b70c <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else return StrStr(getBuffer(), other.getBuffer()) == getBuffer();
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f7ff ff0e 	bl	800b502 <_ZNK12SimpleString9getBufferEv>
 800b6e6:	4604      	mov	r4, r0
 800b6e8:	6838      	ldr	r0, [r7, #0]
 800b6ea:	f7ff ff0a 	bl	800b502 <_ZNK12SimpleString9getBufferEv>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	f7ff fdf0 	bl	800b2d8 <_ZN12SimpleString6StrStrEPKcS1_>
 800b6f8:	4604      	mov	r4, r0
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f7ff ff01 	bl	800b502 <_ZNK12SimpleString9getBufferEv>
 800b700:	4603      	mov	r3, r0
 800b702:	429c      	cmp	r4, r3
 800b704:	bf0c      	ite	eq
 800b706:	2301      	moveq	r3, #1
 800b708:	2300      	movne	r3, #0
 800b70a:	b2db      	uxtb	r3, r3
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	370c      	adds	r7, #12
 800b710:	46bd      	mov	sp, r7
 800b712:	bd90      	pop	{r4, r7, pc}

0800b714 <_ZNK12SimpleString8endsWithERKS_>:

bool SimpleString::endsWith(const SimpleString& other) const
{
 800b714:	b590      	push	{r4, r7, lr}
 800b716:	b085      	sub	sp, #20
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	6039      	str	r1, [r7, #0]
    size_t length = size();
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f000 fa92 	bl	800bc48 <_ZNK12SimpleString4sizeEv>
 800b724:	60f8      	str	r0, [r7, #12]
    size_t other_length = other.size();
 800b726:	6838      	ldr	r0, [r7, #0]
 800b728:	f000 fa8e 	bl	800bc48 <_ZNK12SimpleString4sizeEv>
 800b72c:	60b8      	str	r0, [r7, #8]

    if (other_length == 0) return true;
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d101      	bne.n	800b738 <_ZNK12SimpleString8endsWithERKS_+0x24>
 800b734:	2301      	movs	r3, #1
 800b736:	e020      	b.n	800b77a <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length == 0) return false;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d101      	bne.n	800b742 <_ZNK12SimpleString8endsWithERKS_+0x2e>
 800b73e:	2300      	movs	r3, #0
 800b740:	e01b      	b.n	800b77a <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length < other_length) return false;
 800b742:	68fa      	ldr	r2, [r7, #12]
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	429a      	cmp	r2, r3
 800b748:	d201      	bcs.n	800b74e <_ZNK12SimpleString8endsWithERKS_+0x3a>
 800b74a:	2300      	movs	r3, #0
 800b74c:	e015      	b.n	800b77a <_ZNK12SimpleString8endsWithERKS_+0x66>

    return StrCmp(getBuffer() + length - other_length, other.getBuffer()) == 0;
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f7ff fed7 	bl	800b502 <_ZNK12SimpleString9getBufferEv>
 800b754:	4601      	mov	r1, r0
 800b756:	68fa      	ldr	r2, [r7, #12]
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	1ad3      	subs	r3, r2, r3
 800b75c:	18cc      	adds	r4, r1, r3
 800b75e:	6838      	ldr	r0, [r7, #0]
 800b760:	f7ff fecf 	bl	800b502 <_ZNK12SimpleString9getBufferEv>
 800b764:	4603      	mov	r3, r0
 800b766:	4619      	mov	r1, r3
 800b768:	4620      	mov	r0, r4
 800b76a:	f7ff fd13 	bl	800b194 <_ZN12SimpleString6StrCmpEPKcS1_>
 800b76e:	4603      	mov	r3, r0
 800b770:	2b00      	cmp	r3, #0
 800b772:	bf0c      	ite	eq
 800b774:	2301      	moveq	r3, #1
 800b776:	2300      	movne	r3, #0
 800b778:	b2db      	uxtb	r3, r3
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3714      	adds	r7, #20
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd90      	pop	{r4, r7, pc}

0800b782 <_ZNK12SimpleString5countERKS_>:

size_t SimpleString::count(const SimpleString& substr) const
{
 800b782:	b580      	push	{r7, lr}
 800b784:	b086      	sub	sp, #24
 800b786:	af00      	add	r7, sp, #0
 800b788:	6078      	str	r0, [r7, #4]
 800b78a:	6039      	str	r1, [r7, #0]
    size_t num = 0;
 800b78c:	2300      	movs	r3, #0
 800b78e:	617b      	str	r3, [r7, #20]
    const char* str = getBuffer();
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f7ff feb6 	bl	800b502 <_ZNK12SimpleString9getBufferEv>
 800b796:	6138      	str	r0, [r7, #16]
    const char* strpart = NULL;
 800b798:	2300      	movs	r3, #0
 800b79a:	60fb      	str	r3, [r7, #12]
    if (*str){
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	781b      	ldrb	r3, [r3, #0]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d008      	beq.n	800b7b6 <_ZNK12SimpleString5countERKS_+0x34>
        strpart = StrStr(str, substr.getBuffer());
 800b7a4:	6838      	ldr	r0, [r7, #0]
 800b7a6:	f7ff feac 	bl	800b502 <_ZNK12SimpleString9getBufferEv>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	6938      	ldr	r0, [r7, #16]
 800b7b0:	f7ff fd92 	bl	800b2d8 <_ZN12SimpleString6StrStrEPKcS1_>
 800b7b4:	60f8      	str	r0, [r7, #12]
    }
    while (*str && strpart) {
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d014      	beq.n	800b7e8 <_ZNK12SimpleString5countERKS_+0x66>
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d011      	beq.n	800b7e8 <_ZNK12SimpleString5countERKS_+0x66>
        str = strpart;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	613b      	str	r3, [r7, #16]
        str++;
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	3301      	adds	r3, #1
 800b7cc:	613b      	str	r3, [r7, #16]
        num++;
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	3301      	adds	r3, #1
 800b7d2:	617b      	str	r3, [r7, #20]
        strpart = StrStr(str, substr.getBuffer());
 800b7d4:	6838      	ldr	r0, [r7, #0]
 800b7d6:	f7ff fe94 	bl	800b502 <_ZNK12SimpleString9getBufferEv>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	4619      	mov	r1, r3
 800b7de:	6938      	ldr	r0, [r7, #16]
 800b7e0:	f7ff fd7a 	bl	800b2d8 <_ZN12SimpleString6StrStrEPKcS1_>
 800b7e4:	60f8      	str	r0, [r7, #12]
    while (*str && strpart) {
 800b7e6:	e7e6      	b.n	800b7b6 <_ZNK12SimpleString5countERKS_+0x34>
    }
    return num;
 800b7e8:	697b      	ldr	r3, [r7, #20]
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3718      	adds	r7, #24
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}

0800b7f2 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>:

void SimpleString::split(const SimpleString& delimiter, SimpleStringCollection& col) const
{
 800b7f2:	b590      	push	{r4, r7, lr}
 800b7f4:	b091      	sub	sp, #68	; 0x44
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	60f8      	str	r0, [r7, #12]
 800b7fa:	60b9      	str	r1, [r7, #8]
 800b7fc:	607a      	str	r2, [r7, #4]
    size_t num = count(delimiter);
 800b7fe:	68b9      	ldr	r1, [r7, #8]
 800b800:	68f8      	ldr	r0, [r7, #12]
 800b802:	f7ff ffbe 	bl	800b782 <_ZNK12SimpleString5countERKS_>
 800b806:	6378      	str	r0, [r7, #52]	; 0x34
    size_t extraEndToken = (endsWith(delimiter)) ? 0 : 1U;
 800b808:	68b9      	ldr	r1, [r7, #8]
 800b80a:	68f8      	ldr	r0, [r7, #12]
 800b80c:	f7ff ff82 	bl	800b714 <_ZNK12SimpleString8endsWithERKS_>
 800b810:	4603      	mov	r3, r0
 800b812:	2b00      	cmp	r3, #0
 800b814:	d001      	beq.n	800b81a <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x28>
 800b816:	2300      	movs	r3, #0
 800b818:	e000      	b.n	800b81c <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x2a>
 800b81a:	2301      	movs	r3, #1
 800b81c:	633b      	str	r3, [r7, #48]	; 0x30
    col.allocate(num + extraEndToken);
 800b81e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b822:	4413      	add	r3, r2
 800b824:	4619      	mov	r1, r3
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f001 f95c 	bl	800cae4 <_ZN22SimpleStringCollection8allocateEj>

    const char* str = getBuffer();
 800b82c:	68f8      	ldr	r0, [r7, #12]
 800b82e:	f7ff fe68 	bl	800b502 <_ZNK12SimpleString9getBufferEv>
 800b832:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char* prev;
    for (size_t i = 0; i < num; ++i) {
 800b834:	2300      	movs	r3, #0
 800b836:	63bb      	str	r3, [r7, #56]	; 0x38
 800b838:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b83a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d235      	bcs.n	800b8ac <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xba>
        prev = str;
 800b840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b842:	62fb      	str	r3, [r7, #44]	; 0x2c
        str = StrStr(str, delimiter.getBuffer()) + 1;
 800b844:	68b8      	ldr	r0, [r7, #8]
 800b846:	f7ff fe5c 	bl	800b502 <_ZNK12SimpleString9getBufferEv>
 800b84a:	4603      	mov	r3, r0
 800b84c:	4619      	mov	r1, r3
 800b84e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b850:	f7ff fd42 	bl	800b2d8 <_ZN12SimpleString6StrStrEPKcS1_>
 800b854:	4603      	mov	r3, r0
 800b856:	3301      	adds	r3, #1
 800b858:	63fb      	str	r3, [r7, #60]	; 0x3c
        col[i] = SimpleString(prev).subString(0, size_t (str - prev));
 800b85a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f001 f9db 	bl	800cc18 <_ZN22SimpleStringCollectionixEj>
 800b862:	4604      	mov	r4, r0
 800b864:	f107 031c 	add.w	r3, r7, #28
 800b868:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7ff fe55 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800b870:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b874:	1ad3      	subs	r3, r2, r3
 800b876:	f107 0014 	add.w	r0, r7, #20
 800b87a:	f107 011c 	add.w	r1, r7, #28
 800b87e:	2200      	movs	r2, #0
 800b880:	f000 fb0c 	bl	800be9c <_ZNK12SimpleString9subStringEjj>
 800b884:	f107 0314 	add.w	r3, r7, #20
 800b888:	4619      	mov	r1, r3
 800b88a:	4620      	mov	r0, r4
 800b88c:	f7ff feb1 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 800b890:	f107 0314 	add.w	r3, r7, #20
 800b894:	4618      	mov	r0, r3
 800b896:	f000 f9f8 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800b89a:	f107 031c 	add.w	r3, r7, #28
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f000 f9f3 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < num; ++i) {
 800b8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	63bb      	str	r3, [r7, #56]	; 0x38
 800b8aa:	e7c5      	b.n	800b838 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x46>
    }
    if (extraEndToken) {
 800b8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d015      	beq.n	800b8de <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xec>
        col[num] = str;
 800b8b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f001 f9af 	bl	800cc18 <_ZN22SimpleStringCollectionixEj>
 800b8ba:	4604      	mov	r4, r0
 800b8bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f7ff fe29 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800b8c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	f7ff fe8f 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 800b8d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f000 f9d6 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    }
}
 800b8de:	bf00      	nop
 800b8e0:	3744      	adds	r7, #68	; 0x44
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd90      	pop	{r4, r7, pc}

0800b8e6 <_ZN12SimpleString7replaceEcc>:

void SimpleString::replace(char to, char with)
{
 800b8e6:	b580      	push	{r7, lr}
 800b8e8:	b084      	sub	sp, #16
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	70fb      	strb	r3, [r7, #3]
 800b8f2:	4613      	mov	r3, r2
 800b8f4:	70bb      	strb	r3, [r7, #2]
    size_t s = size();
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f000 f9a6 	bl	800bc48 <_ZNK12SimpleString4sizeEv>
 800b8fc:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < s; i++) {
 800b8fe:	2300      	movs	r3, #0
 800b900:	60fb      	str	r3, [r7, #12]
 800b902:	68fa      	ldr	r2, [r7, #12]
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	429a      	cmp	r2, r3
 800b908:	d218      	bcs.n	800b93c <_ZN12SimpleString7replaceEcc+0x56>
        if (getBuffer()[i] == to) buffer_[i] = with;
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f7ff fdf9 	bl	800b502 <_ZNK12SimpleString9getBufferEv>
 800b910:	4602      	mov	r2, r0
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	4413      	add	r3, r2
 800b916:	781b      	ldrb	r3, [r3, #0]
 800b918:	78fa      	ldrb	r2, [r7, #3]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	bf0c      	ite	eq
 800b91e:	2301      	moveq	r3, #1
 800b920:	2300      	movne	r3, #0
 800b922:	b2db      	uxtb	r3, r3
 800b924:	2b00      	cmp	r3, #0
 800b926:	d005      	beq.n	800b934 <_ZN12SimpleString7replaceEcc+0x4e>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681a      	ldr	r2, [r3, #0]
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	4413      	add	r3, r2
 800b930:	78ba      	ldrb	r2, [r7, #2]
 800b932:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < s; i++) {
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	3301      	adds	r3, #1
 800b938:	60fb      	str	r3, [r7, #12]
 800b93a:	e7e2      	b.n	800b902 <_ZN12SimpleString7replaceEcc+0x1c>
    }
}
 800b93c:	bf00      	nop
 800b93e:	3710      	adds	r7, #16
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <_ZN12SimpleString7replaceEPKcS1_>:

void SimpleString::replace(const char* to, const char* with)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b08e      	sub	sp, #56	; 0x38
 800b948:	af00      	add	r7, sp, #0
 800b94a:	60f8      	str	r0, [r7, #12]
 800b94c:	60b9      	str	r1, [r7, #8]
 800b94e:	607a      	str	r2, [r7, #4]
    size_t c = count(to);
 800b950:	f107 0310 	add.w	r3, r7, #16
 800b954:	68b9      	ldr	r1, [r7, #8]
 800b956:	4618      	mov	r0, r3
 800b958:	f7ff fddf 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800b95c:	f107 0310 	add.w	r3, r7, #16
 800b960:	4619      	mov	r1, r3
 800b962:	68f8      	ldr	r0, [r7, #12]
 800b964:	f7ff ff0d 	bl	800b782 <_ZNK12SimpleString5countERKS_>
 800b968:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b96a:	f107 0310 	add.w	r3, r7, #16
 800b96e:	4618      	mov	r0, r3
 800b970:	f000 f98b 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    if (c == 0) {
 800b974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b976:	2b00      	cmp	r3, #0
 800b978:	d071      	beq.n	800ba5e <_ZN12SimpleString7replaceEPKcS1_+0x11a>
        return;
    }
    size_t len = size();
 800b97a:	68f8      	ldr	r0, [r7, #12]
 800b97c:	f000 f964 	bl	800bc48 <_ZNK12SimpleString4sizeEv>
 800b980:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t tolen = StrLen(to);
 800b982:	68b8      	ldr	r0, [r7, #8]
 800b984:	f7ff fc28 	bl	800b1d8 <_ZN12SimpleString6StrLenEPKc>
 800b988:	6278      	str	r0, [r7, #36]	; 0x24
    size_t withlen = StrLen(with);
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f7ff fc24 	bl	800b1d8 <_ZN12SimpleString6StrLenEPKc>
 800b990:	6238      	str	r0, [r7, #32]

    size_t newsize = len + (withlen * c) - (tolen * c) + 1;
 800b992:	6a3b      	ldr	r3, [r7, #32]
 800b994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b996:	fb02 f203 	mul.w	r2, r2, r3
 800b99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99c:	441a      	add	r2, r3
 800b99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b9a2:	fb01 f303 	mul.w	r3, r1, r3
 800b9a6:	1ad3      	subs	r3, r2, r3
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	61fb      	str	r3, [r7, #28]

    if (newsize > 1) {
 800b9ac:	69fb      	ldr	r3, [r7, #28]
 800b9ae:	2b01      	cmp	r3, #1
 800b9b0:	d951      	bls.n	800ba56 <_ZN12SimpleString7replaceEPKcS1_+0x112>
        char* newbuf = allocStringBuffer(newsize, __FILE__, __LINE__);
 800b9b2:	f240 129d 	movw	r2, #413	; 0x19d
 800b9b6:	492c      	ldr	r1, [pc, #176]	; (800ba68 <_ZN12SimpleString7replaceEPKcS1_+0x124>)
 800b9b8:	69f8      	ldr	r0, [r7, #28]
 800b9ba:	f7ff fb33 	bl	800b024 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800b9be:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0, j = 0; i < len;) {
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	637b      	str	r3, [r7, #52]	; 0x34
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	633b      	str	r3, [r7, #48]	; 0x30
 800b9c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	d236      	bcs.n	800ba3e <_ZN12SimpleString7replaceEPKcS1_+0xfa>
            if (StrNCmp(&getBuffer()[i], to, tolen) == 0) {
 800b9d0:	68f8      	ldr	r0, [r7, #12]
 800b9d2:	f7ff fd96 	bl	800b502 <_ZNK12SimpleString9getBufferEv>
 800b9d6:	4602      	mov	r2, r0
 800b9d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9da:	4413      	add	r3, r2
 800b9dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9de:	68b9      	ldr	r1, [r7, #8]
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f7ff fc16 	bl	800b212 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	bf0c      	ite	eq
 800b9ec:	2301      	moveq	r3, #1
 800b9ee:	2300      	movne	r3, #0
 800b9f0:	b2db      	uxtb	r3, r3
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d011      	beq.n	800ba1a <_ZN12SimpleString7replaceEPKcS1_+0xd6>
                StrNCpy(&newbuf[j], with, withlen + 1);
 800b9f6:	69ba      	ldr	r2, [r7, #24]
 800b9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fa:	18d0      	adds	r0, r2, r3
 800b9fc:	6a3b      	ldr	r3, [r7, #32]
 800b9fe:	3301      	adds	r3, #1
 800ba00:	461a      	mov	r2, r3
 800ba02:	6879      	ldr	r1, [r7, #4]
 800ba04:	f7ff fc33 	bl	800b26e <_ZN12SimpleString7StrNCpyEPcPKcj>
                j += withlen;
 800ba08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba0a:	6a3b      	ldr	r3, [r7, #32]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	633b      	str	r3, [r7, #48]	; 0x30
                i += tolen;
 800ba10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba14:	4413      	add	r3, r2
 800ba16:	637b      	str	r3, [r7, #52]	; 0x34
 800ba18:	e7d6      	b.n	800b9c8 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
            else {
                newbuf[j] = getBuffer()[i];
 800ba1a:	68f8      	ldr	r0, [r7, #12]
 800ba1c:	f7ff fd71 	bl	800b502 <_ZNK12SimpleString9getBufferEv>
 800ba20:	4602      	mov	r2, r0
 800ba22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba24:	441a      	add	r2, r3
 800ba26:	69b9      	ldr	r1, [r7, #24]
 800ba28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2a:	440b      	add	r3, r1
 800ba2c:	7812      	ldrb	r2, [r2, #0]
 800ba2e:	701a      	strb	r2, [r3, #0]
                j++;
 800ba30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba32:	3301      	adds	r3, #1
 800ba34:	633b      	str	r3, [r7, #48]	; 0x30
                i++;
 800ba36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba38:	3301      	adds	r3, #1
 800ba3a:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t i = 0, j = 0; i < len;) {
 800ba3c:	e7c4      	b.n	800b9c8 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
        }
        newbuf[newsize - 1] = '\0';
 800ba3e:	69fb      	ldr	r3, [r7, #28]
 800ba40:	3b01      	subs	r3, #1
 800ba42:	69ba      	ldr	r2, [r7, #24]
 800ba44:	4413      	add	r3, r2
 800ba46:	2200      	movs	r2, #0
 800ba48:	701a      	strb	r2, [r3, #0]
        setInternalBufferTo(newbuf, newsize);
 800ba4a:	69fa      	ldr	r2, [r7, #28]
 800ba4c:	69b9      	ldr	r1, [r7, #24]
 800ba4e:	68f8      	ldr	r0, [r7, #12]
 800ba50:	f7ff fd1c 	bl	800b48c <_ZN12SimpleString19setInternalBufferToEPcj>
 800ba54:	e004      	b.n	800ba60 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
    }
    else
        setInternalBufferAsEmptyString();
 800ba56:	68f8      	ldr	r0, [r7, #12]
 800ba58:	f7ff fcca 	bl	800b3f0 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800ba5c:	e000      	b.n	800ba60 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
        return;
 800ba5e:	bf00      	nop
}
 800ba60:	3738      	adds	r7, #56	; 0x38
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}
 800ba66:	bf00      	nop
 800ba68:	080229a8 	.word	0x080229a8

0800ba6c <_ZNK12SimpleString9printableEv>:

SimpleString SimpleString::printable() const
{
 800ba6c:	b590      	push	{r4, r7, lr}
 800ba6e:	b089      	sub	sp, #36	; 0x24
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]
        "\\v",
        "\\f",
        "\\r"
    };

    SimpleString result;
 800ba76:	493b      	ldr	r1, [pc, #236]	; (800bb64 <_ZNK12SimpleString9printableEv+0xf8>)
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f7ff fd4e 	bl	800b51a <_ZN12SimpleStringC1EPKc>
    result.setInternalBufferToNewBuffer(getPrintableSize() + 1);
 800ba7e:	6838      	ldr	r0, [r7, #0]
 800ba80:	f000 f876 	bl	800bb70 <_ZNK12SimpleString16getPrintableSizeEv>
 800ba84:	4603      	mov	r3, r0
 800ba86:	3301      	adds	r3, #1
 800ba88:	4619      	mov	r1, r3
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f7ff fcde 	bl	800b44c <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    size_t str_size = size();
 800ba90:	6838      	ldr	r0, [r7, #0]
 800ba92:	f000 f8d9 	bl	800bc48 <_ZNK12SimpleString4sizeEv>
 800ba96:	6178      	str	r0, [r7, #20]
    size_t j = 0;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	61bb      	str	r3, [r7, #24]
 800baa0:	69ba      	ldr	r2, [r7, #24]
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d252      	bcs.n	800bb4e <_ZNK12SimpleString9printableEv+0xe2>
    {
        char c = buffer_[i];
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	681a      	ldr	r2, [r3, #0]
 800baac:	69bb      	ldr	r3, [r7, #24]
 800baae:	4413      	add	r3, r2
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	74fb      	strb	r3, [r7, #19]
        if (isControlWithShortEscapeSequence(c))
 800bab4:	7cfb      	ldrb	r3, [r7, #19]
 800bab6:	4618      	mov	r0, r3
 800bab8:	f000 fb43 	bl	800c142 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800babc:	4603      	mov	r3, r0
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d012      	beq.n	800bae8 <_ZNK12SimpleString9printableEv+0x7c>
        {
            StrNCpy(&result.buffer_[j], shortEscapeCodes[(unsigned char)(c - '\a')], 2);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	69fb      	ldr	r3, [r7, #28]
 800bac8:	18d0      	adds	r0, r2, r3
 800baca:	7cfb      	ldrb	r3, [r7, #19]
 800bacc:	3b07      	subs	r3, #7
 800bace:	b2db      	uxtb	r3, r3
 800bad0:	461a      	mov	r2, r3
 800bad2:	4b25      	ldr	r3, [pc, #148]	; (800bb68 <_ZNK12SimpleString9printableEv+0xfc>)
 800bad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bad8:	2202      	movs	r2, #2
 800bada:	4619      	mov	r1, r3
 800badc:	f7ff fbc7 	bl	800b26e <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 2;
 800bae0:	69fb      	ldr	r3, [r7, #28]
 800bae2:	3302      	adds	r3, #2
 800bae4:	61fb      	str	r3, [r7, #28]
 800bae6:	e02e      	b.n	800bb46 <_ZNK12SimpleString9printableEv+0xda>
        }
        else if (isControl(c))
 800bae8:	7cfb      	ldrb	r3, [r7, #19]
 800baea:	4618      	mov	r0, r3
 800baec:	f000 fb15 	bl	800c11a <_ZN12SimpleString9isControlEc>
 800baf0:	4603      	mov	r3, r0
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d01e      	beq.n	800bb34 <_ZNK12SimpleString9printableEv+0xc8>
        {
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800baf6:	7cfa      	ldrb	r2, [r7, #19]
 800baf8:	f107 0308 	add.w	r3, r7, #8
 800bafc:	491b      	ldr	r1, [pc, #108]	; (800bb6c <_ZNK12SimpleString9printableEv+0x100>)
 800bafe:	4618      	mov	r0, r3
 800bb00:	f000 fdca 	bl	800c698 <_Z16StringFromFormatPKcz>
            StrNCpy(&result.buffer_[j], hexEscapeCode.asCharString(), 4);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681a      	ldr	r2, [r3, #0]
 800bb08:	69fb      	ldr	r3, [r7, #28]
 800bb0a:	18d4      	adds	r4, r2, r3
 800bb0c:	f107 0308 	add.w	r3, r7, #8
 800bb10:	4618      	mov	r0, r3
 800bb12:	f000 f88d 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800bb16:	4603      	mov	r3, r0
 800bb18:	2204      	movs	r2, #4
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	f7ff fba6 	bl	800b26e <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 4;
 800bb22:	69fb      	ldr	r3, [r7, #28]
 800bb24:	3304      	adds	r3, #4
 800bb26:	61fb      	str	r3, [r7, #28]
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800bb28:	f107 0308 	add.w	r3, r7, #8
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f000 f8ac 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800bb32:	e008      	b.n	800bb46 <_ZNK12SimpleString9printableEv+0xda>
        }
        else
        {
            result.buffer_[j] = c;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	69fb      	ldr	r3, [r7, #28]
 800bb3a:	4413      	add	r3, r2
 800bb3c:	7cfa      	ldrb	r2, [r7, #19]
 800bb3e:	701a      	strb	r2, [r3, #0]
            j++;
 800bb40:	69fb      	ldr	r3, [r7, #28]
 800bb42:	3301      	adds	r3, #1
 800bb44:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800bb46:	69bb      	ldr	r3, [r7, #24]
 800bb48:	3301      	adds	r3, #1
 800bb4a:	61bb      	str	r3, [r7, #24]
 800bb4c:	e7a8      	b.n	800baa0 <_ZNK12SimpleString9printableEv+0x34>
        }
    }
    result.buffer_[j] = 0;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681a      	ldr	r2, [r3, #0]
 800bb52:	69fb      	ldr	r3, [r7, #28]
 800bb54:	4413      	add	r3, r2
 800bb56:	2200      	movs	r2, #0
 800bb58:	701a      	strb	r2, [r3, #0]

    return result;
 800bb5a:	bf00      	nop
}
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	3724      	adds	r7, #36	; 0x24
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd90      	pop	{r4, r7, pc}
 800bb64:	08022a68 	.word	0x08022a68
 800bb68:	2000006c 	.word	0x2000006c
 800bb6c:	08022a6c 	.word	0x08022a6c

0800bb70 <_ZNK12SimpleString16getPrintableSizeEv>:

size_t SimpleString::getPrintableSize() const
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b086      	sub	sp, #24
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
    size_t str_size = size();
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f000 f865 	bl	800bc48 <_ZNK12SimpleString4sizeEv>
 800bb7e:	60f8      	str	r0, [r7, #12]
    size_t printable_str_size = str_size;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < str_size; i++)
 800bb84:	2300      	movs	r3, #0
 800bb86:	613b      	str	r3, [r7, #16]
 800bb88:	693a      	ldr	r2, [r7, #16]
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d21e      	bcs.n	800bbce <_ZNK12SimpleString16getPrintableSizeEv+0x5e>
    {
        char c = buffer_[i];
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681a      	ldr	r2, [r3, #0]
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	4413      	add	r3, r2
 800bb98:	781b      	ldrb	r3, [r3, #0]
 800bb9a:	72fb      	strb	r3, [r7, #11]
        if (isControlWithShortEscapeSequence(c))
 800bb9c:	7afb      	ldrb	r3, [r7, #11]
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f000 facf 	bl	800c142 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800bba4:	4603      	mov	r3, r0
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d003      	beq.n	800bbb2 <_ZNK12SimpleString16getPrintableSizeEv+0x42>
        {
            printable_str_size += 1;
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	3301      	adds	r3, #1
 800bbae:	617b      	str	r3, [r7, #20]
 800bbb0:	e009      	b.n	800bbc6 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        }
        else if (isControl(c))
 800bbb2:	7afb      	ldrb	r3, [r7, #11]
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f000 fab0 	bl	800c11a <_ZN12SimpleString9isControlEc>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d002      	beq.n	800bbc6 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        {
            printable_str_size += 3;
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	3303      	adds	r3, #3
 800bbc4:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < str_size; i++)
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	3301      	adds	r3, #1
 800bbca:	613b      	str	r3, [r7, #16]
 800bbcc:	e7dc      	b.n	800bb88 <_ZNK12SimpleString16getPrintableSizeEv+0x18>
        }
    }

    return printable_str_size;
 800bbce:	697b      	ldr	r3, [r7, #20]
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3718      	adds	r7, #24
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <_ZNK12SimpleString9lowerCaseEv>:

SimpleString SimpleString::lowerCase() const
{
 800bbd8:	b590      	push	{r4, r7, lr}
 800bbda:	b085      	sub	sp, #20
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	6039      	str	r1, [r7, #0]
    SimpleString str(*this);
 800bbe2:	6839      	ldr	r1, [r7, #0]
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f7ff fcec 	bl	800b5c2 <_ZN12SimpleStringC1ERKS_>

    size_t str_size = str.size();
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 f82c 	bl	800bc48 <_ZNK12SimpleString4sizeEv>
 800bbf0:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < str_size; i++)
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	60fb      	str	r3, [r7, #12]
 800bbf6:	68fa      	ldr	r2, [r7, #12]
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d213      	bcs.n	800bc26 <_ZNK12SimpleString9lowerCaseEv+0x4e>
        str.buffer_[i] = ToLower(str.getBuffer()[i]);
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f7ff fc7f 	bl	800b502 <_ZNK12SimpleString9getBufferEv>
 800bc04:	4602      	mov	r2, r0
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	4413      	add	r3, r2
 800bc0a:	7819      	ldrb	r1, [r3, #0]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681a      	ldr	r2, [r3, #0]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	18d4      	adds	r4, r2, r3
 800bc14:	4608      	mov	r0, r1
 800bc16:	f7ff fb8a 	bl	800b32e <_ZN12SimpleString7ToLowerEc>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < str_size; i++)
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	3301      	adds	r3, #1
 800bc22:	60fb      	str	r3, [r7, #12]
 800bc24:	e7e7      	b.n	800bbf6 <_ZNK12SimpleString9lowerCaseEv+0x1e>

    return str;
 800bc26:	bf00      	nop
}
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	3714      	adds	r7, #20
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd90      	pop	{r4, r7, pc}

0800bc30 <_ZNK12SimpleString12asCharStringEv>:

const char *SimpleString::asCharString() const
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
    return getBuffer();
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f7ff fc62 	bl	800b502 <_ZNK12SimpleString9getBufferEv>
 800bc3e:	4603      	mov	r3, r0
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3708      	adds	r7, #8
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <_ZNK12SimpleString4sizeEv>:

size_t SimpleString::size() const
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b082      	sub	sp, #8
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
    return StrLen(getBuffer());
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f7ff fc56 	bl	800b502 <_ZNK12SimpleString9getBufferEv>
 800bc56:	4603      	mov	r3, r0
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f7ff fabd 	bl	800b1d8 <_ZN12SimpleString6StrLenEPKc>
 800bc5e:	4603      	mov	r3, r0
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3708      	adds	r7, #8
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <_ZNK12SimpleString7isEmptyEv>:

bool SimpleString::isEmpty() const
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b082      	sub	sp, #8
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
    return size() == 0;
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f7ff ffe9 	bl	800bc48 <_ZNK12SimpleString4sizeEv>
 800bc76:	4603      	mov	r3, r0
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	bf0c      	ite	eq
 800bc7c:	2301      	moveq	r3, #1
 800bc7e:	2300      	movne	r3, #0
 800bc80:	b2db      	uxtb	r3, r3
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3708      	adds	r7, #8
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}

0800bc8a <_ZN12SimpleStringD1Ev>:

SimpleString::~SimpleString()
 800bc8a:	b580      	push	{r7, lr}
 800bc8c:	b082      	sub	sp, #8
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	6078      	str	r0, [r7, #4]
{
    deallocateInternalBuffer();
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f7ff fb90 	bl	800b3b8 <_ZN12SimpleString24deallocateInternalBufferEv>
}
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3708      	adds	r7, #8
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}

0800bca2 <_ZeqRK12SimpleStringS1_>:

bool operator==(const SimpleString& left, const SimpleString& right)
{
 800bca2:	b590      	push	{r4, r7, lr}
 800bca4:	b083      	sub	sp, #12
 800bca6:	af00      	add	r7, sp, #0
 800bca8:	6078      	str	r0, [r7, #4]
 800bcaa:	6039      	str	r1, [r7, #0]
    return 0 == SimpleString::StrCmp(left.asCharString(), right.asCharString());
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f7ff ffbf 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800bcb2:	4604      	mov	r4, r0
 800bcb4:	6838      	ldr	r0, [r7, #0]
 800bcb6:	f7ff ffbb 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	4620      	mov	r0, r4
 800bcc0:	f7ff fa68 	bl	800b194 <_ZN12SimpleString6StrCmpEPKcS1_>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	bf0c      	ite	eq
 800bcca:	2301      	moveq	r3, #1
 800bccc:	2300      	movne	r3, #0
 800bcce:	b2db      	uxtb	r3, r3
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	370c      	adds	r7, #12
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd90      	pop	{r4, r7, pc}

0800bcd8 <_ZNK12SimpleString12equalsNoCaseERKS_>:

bool SimpleString::equalsNoCase(const SimpleString& str) const
{
 800bcd8:	b590      	push	{r4, r7, lr}
 800bcda:	b087      	sub	sp, #28
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	6039      	str	r1, [r7, #0]
    return lowerCase() == str.lowerCase();
 800bce2:	f107 0308 	add.w	r3, r7, #8
 800bce6:	6879      	ldr	r1, [r7, #4]
 800bce8:	4618      	mov	r0, r3
 800bcea:	f7ff ff75 	bl	800bbd8 <_ZNK12SimpleString9lowerCaseEv>
 800bcee:	f107 0310 	add.w	r3, r7, #16
 800bcf2:	6839      	ldr	r1, [r7, #0]
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f7ff ff6f 	bl	800bbd8 <_ZNK12SimpleString9lowerCaseEv>
 800bcfa:	f107 0210 	add.w	r2, r7, #16
 800bcfe:	f107 0308 	add.w	r3, r7, #8
 800bd02:	4611      	mov	r1, r2
 800bd04:	4618      	mov	r0, r3
 800bd06:	f7ff ffcc 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	461c      	mov	r4, r3
 800bd0e:	f107 0310 	add.w	r3, r7, #16
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7ff ffb9 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800bd18:	f107 0308 	add.w	r3, r7, #8
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f7ff ffb4 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800bd22:	4623      	mov	r3, r4
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	371c      	adds	r7, #28
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd90      	pop	{r4, r7, pc}

0800bd2c <_ZneRK12SimpleStringS1_>:


bool operator!=(const SimpleString& left, const SimpleString& right)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
    return !(left == right);
 800bd36:	6839      	ldr	r1, [r7, #0]
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f7ff ffb2 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	f083 0301 	eor.w	r3, r3, #1
 800bd44:	b2db      	uxtb	r3, r3
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3708      	adds	r7, #8
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}

0800bd4e <_ZNK12SimpleStringplERKS_>:

SimpleString SimpleString::operator+(const SimpleString& rhs) const
{
 800bd4e:	b580      	push	{r7, lr}
 800bd50:	b084      	sub	sp, #16
 800bd52:	af00      	add	r7, sp, #0
 800bd54:	60f8      	str	r0, [r7, #12]
 800bd56:	60b9      	str	r1, [r7, #8]
 800bd58:	607a      	str	r2, [r7, #4]
    SimpleString t(getBuffer());
 800bd5a:	68b8      	ldr	r0, [r7, #8]
 800bd5c:	f7ff fbd1 	bl	800b502 <_ZNK12SimpleString9getBufferEv>
 800bd60:	4603      	mov	r3, r0
 800bd62:	4619      	mov	r1, r3
 800bd64:	68f8      	ldr	r0, [r7, #12]
 800bd66:	f7ff fbd8 	bl	800b51a <_ZN12SimpleStringC1EPKc>
    t += rhs.getBuffer();
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f7ff fbc9 	bl	800b502 <_ZNK12SimpleString9getBufferEv>
 800bd70:	4603      	mov	r3, r0
 800bd72:	4619      	mov	r1, r3
 800bd74:	68f8      	ldr	r0, [r7, #12]
 800bd76:	f000 f817 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    return t;
 800bd7a:	bf00      	nop
}
 800bd7c:	68f8      	ldr	r0, [r7, #12]
 800bd7e:	3710      	adds	r7, #16
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <_ZN12SimpleStringpLERKS_>:

SimpleString& SimpleString::operator+=(const SimpleString& rhs)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	6039      	str	r1, [r7, #0]
    return operator+=(rhs.getBuffer());
 800bd8e:	6838      	ldr	r0, [r7, #0]
 800bd90:	f7ff fbb7 	bl	800b502 <_ZNK12SimpleString9getBufferEv>
 800bd94:	4603      	mov	r3, r0
 800bd96:	4619      	mov	r1, r3
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f000 f805 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
 800bd9e:	4603      	mov	r3, r0
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3708      	adds	r7, #8
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <_ZN12SimpleStringpLEPKc>:

SimpleString& SimpleString::operator+=(const char* rhs)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b086      	sub	sp, #24
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	6039      	str	r1, [r7, #0]
    size_t originalSize = this->size();
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f7ff ff48 	bl	800bc48 <_ZNK12SimpleString4sizeEv>
 800bdb8:	6178      	str	r0, [r7, #20]
    size_t additionalStringSize = StrLen(rhs) + 1;
 800bdba:	6838      	ldr	r0, [r7, #0]
 800bdbc:	f7ff fa0c 	bl	800b1d8 <_ZN12SimpleString6StrLenEPKc>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	3301      	adds	r3, #1
 800bdc4:	613b      	str	r3, [r7, #16]
    size_t sizeOfNewString = originalSize + additionalStringSize;
 800bdc6:	697a      	ldr	r2, [r7, #20]
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	4413      	add	r3, r2
 800bdcc:	60fb      	str	r3, [r7, #12]
    char* tbuffer = copyToNewBuffer(this->getBuffer(), sizeOfNewString);
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f7ff fb97 	bl	800b502 <_ZNK12SimpleString9getBufferEv>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	68f9      	ldr	r1, [r7, #12]
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f000 f941 	bl	800c060 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800bdde:	60b8      	str	r0, [r7, #8]
    StrNCpy(tbuffer + originalSize, rhs, additionalStringSize);
 800bde0:	68ba      	ldr	r2, [r7, #8]
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	4413      	add	r3, r2
 800bde6:	693a      	ldr	r2, [r7, #16]
 800bde8:	6839      	ldr	r1, [r7, #0]
 800bdea:	4618      	mov	r0, r3
 800bdec:	f7ff fa3f 	bl	800b26e <_ZN12SimpleString7StrNCpyEPcPKcj>

    setInternalBufferTo(tbuffer, sizeOfNewString);
 800bdf0:	68fa      	ldr	r2, [r7, #12]
 800bdf2:	68b9      	ldr	r1, [r7, #8]
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f7ff fb49 	bl	800b48c <_ZN12SimpleString19setInternalBufferToEPcj>
    return *this;
 800bdfa:	687b      	ldr	r3, [r7, #4]
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3718      	adds	r7, #24
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>:

void SimpleString::padStringsToSameLength(SimpleString& str1, SimpleString& str2, char padCharacter)
{
 800be04:	b590      	push	{r4, r7, lr}
 800be06:	b08b      	sub	sp, #44	; 0x2c
 800be08:	af00      	add	r7, sp, #0
 800be0a:	60f8      	str	r0, [r7, #12]
 800be0c:	60b9      	str	r1, [r7, #8]
 800be0e:	4613      	mov	r3, r2
 800be10:	71fb      	strb	r3, [r7, #7]
    if (str1.size() > str2.size()) {
 800be12:	68f8      	ldr	r0, [r7, #12]
 800be14:	f7ff ff18 	bl	800bc48 <_ZNK12SimpleString4sizeEv>
 800be18:	4604      	mov	r4, r0
 800be1a:	68b8      	ldr	r0, [r7, #8]
 800be1c:	f7ff ff14 	bl	800bc48 <_ZNK12SimpleString4sizeEv>
 800be20:	4603      	mov	r3, r0
 800be22:	429c      	cmp	r4, r3
 800be24:	bf8c      	ite	hi
 800be26:	2301      	movhi	r3, #1
 800be28:	2300      	movls	r3, #0
 800be2a:	b2db      	uxtb	r3, r3
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d006      	beq.n	800be3e <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x3a>
        padStringsToSameLength(str2, str1, padCharacter);
 800be30:	79fb      	ldrb	r3, [r7, #7]
 800be32:	461a      	mov	r2, r3
 800be34:	68f9      	ldr	r1, [r7, #12]
 800be36:	68b8      	ldr	r0, [r7, #8]
 800be38:	f7ff ffe4 	bl	800be04 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>
 800be3c:	e02b      	b.n	800be96 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x92>
        return;
    }

    char pad[2];
    pad[0] = padCharacter;
 800be3e:	79fb      	ldrb	r3, [r7, #7]
 800be40:	753b      	strb	r3, [r7, #20]
    pad[1] = 0;
 800be42:	2300      	movs	r3, #0
 800be44:	757b      	strb	r3, [r7, #21]
    str1 = SimpleString(pad, str2.size() - str1.size()) + str1;
 800be46:	68b8      	ldr	r0, [r7, #8]
 800be48:	f7ff fefe 	bl	800bc48 <_ZNK12SimpleString4sizeEv>
 800be4c:	4604      	mov	r4, r0
 800be4e:	68f8      	ldr	r0, [r7, #12]
 800be50:	f7ff fefa 	bl	800bc48 <_ZNK12SimpleString4sizeEv>
 800be54:	4603      	mov	r3, r0
 800be56:	1ae2      	subs	r2, r4, r3
 800be58:	f107 0114 	add.w	r1, r7, #20
 800be5c:	f107 0320 	add.w	r3, r7, #32
 800be60:	4618      	mov	r0, r3
 800be62:	f7ff fb75 	bl	800b550 <_ZN12SimpleStringC1EPKcj>
 800be66:	f107 0318 	add.w	r3, r7, #24
 800be6a:	f107 0120 	add.w	r1, r7, #32
 800be6e:	68fa      	ldr	r2, [r7, #12]
 800be70:	4618      	mov	r0, r3
 800be72:	f7ff ff6c 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 800be76:	f107 0318 	add.w	r3, r7, #24
 800be7a:	4619      	mov	r1, r3
 800be7c:	68f8      	ldr	r0, [r7, #12]
 800be7e:	f7ff fbb8 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 800be82:	f107 0318 	add.w	r3, r7, #24
 800be86:	4618      	mov	r0, r3
 800be88:	f7ff feff 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800be8c:	f107 0320 	add.w	r3, r7, #32
 800be90:	4618      	mov	r0, r3
 800be92:	f7ff fefa 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 800be96:	372c      	adds	r7, #44	; 0x2c
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd90      	pop	{r4, r7, pc}

0800be9c <_ZNK12SimpleString9subStringEjj>:

SimpleString SimpleString::subString(size_t beginPos, size_t amount) const
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b086      	sub	sp, #24
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	60f8      	str	r0, [r7, #12]
 800bea4:	60b9      	str	r1, [r7, #8]
 800bea6:	607a      	str	r2, [r7, #4]
 800bea8:	603b      	str	r3, [r7, #0]
    if (beginPos > size()-1) return "";
 800beaa:	68b8      	ldr	r0, [r7, #8]
 800beac:	f7ff fecc 	bl	800bc48 <_ZNK12SimpleString4sizeEv>
 800beb0:	4603      	mov	r3, r0
 800beb2:	3b01      	subs	r3, #1
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	bf8c      	ite	hi
 800beba:	2301      	movhi	r3, #1
 800bebc:	2300      	movls	r3, #0
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d004      	beq.n	800bece <_ZNK12SimpleString9subStringEjj+0x32>
 800bec4:	4919      	ldr	r1, [pc, #100]	; (800bf2c <_ZNK12SimpleString9subStringEjj+0x90>)
 800bec6:	68f8      	ldr	r0, [r7, #12]
 800bec8:	f7ff fb27 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800becc:	e029      	b.n	800bf22 <_ZNK12SimpleString9subStringEjj+0x86>

    SimpleString newString = getBuffer() + beginPos;
 800bece:	68b8      	ldr	r0, [r7, #8]
 800bed0:	f7ff fb17 	bl	800b502 <_ZNK12SimpleString9getBufferEv>
 800bed4:	4602      	mov	r2, r0
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	441a      	add	r2, r3
 800beda:	f107 0310 	add.w	r3, r7, #16
 800bede:	4611      	mov	r1, r2
 800bee0:	4618      	mov	r0, r3
 800bee2:	f7ff fb1a 	bl	800b51a <_ZN12SimpleStringC1EPKc>

    if (newString.size() > amount)
 800bee6:	f107 0310 	add.w	r3, r7, #16
 800beea:	4618      	mov	r0, r3
 800beec:	f7ff feac 	bl	800bc48 <_ZNK12SimpleString4sizeEv>
 800bef0:	4602      	mov	r2, r0
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	4293      	cmp	r3, r2
 800bef6:	bf34      	ite	cc
 800bef8:	2301      	movcc	r3, #1
 800befa:	2300      	movcs	r3, #0
 800befc:	b2db      	uxtb	r3, r3
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d004      	beq.n	800bf0c <_ZNK12SimpleString9subStringEjj+0x70>
        newString.buffer_[amount] = '\0';
 800bf02:	693a      	ldr	r2, [r7, #16]
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	4413      	add	r3, r2
 800bf08:	2200      	movs	r2, #0
 800bf0a:	701a      	strb	r2, [r3, #0]

    return newString;
 800bf0c:	f107 0310 	add.w	r3, r7, #16
 800bf10:	4619      	mov	r1, r3
 800bf12:	68f8      	ldr	r0, [r7, #12]
 800bf14:	f7ff fb55 	bl	800b5c2 <_ZN12SimpleStringC1ERKS_>
    SimpleString newString = getBuffer() + beginPos;
 800bf18:	f107 0310 	add.w	r3, r7, #16
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f7ff feb4 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 800bf22:	68f8      	ldr	r0, [r7, #12]
 800bf24:	3718      	adds	r7, #24
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	08022a68 	.word	0x08022a68

0800bf30 <_ZNK12SimpleString9subStringEj>:

SimpleString SimpleString::subString(size_t beginPos) const
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b084      	sub	sp, #16
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	60f8      	str	r0, [r7, #12]
 800bf38:	60b9      	str	r1, [r7, #8]
 800bf3a:	607a      	str	r2, [r7, #4]
    return subString(beginPos, npos);
 800bf3c:	68f8      	ldr	r0, [r7, #12]
 800bf3e:	f04f 33ff 	mov.w	r3, #4294967295
 800bf42:	687a      	ldr	r2, [r7, #4]
 800bf44:	68b9      	ldr	r1, [r7, #8]
 800bf46:	f7ff ffa9 	bl	800be9c <_ZNK12SimpleString9subStringEjj>
}
 800bf4a:	68f8      	ldr	r0, [r7, #12]
 800bf4c:	3710      	adds	r7, #16
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}

0800bf52 <_ZNK12SimpleString2atEj>:

char SimpleString::at(size_t pos) const
{
 800bf52:	b580      	push	{r7, lr}
 800bf54:	b082      	sub	sp, #8
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	6078      	str	r0, [r7, #4]
 800bf5a:	6039      	str	r1, [r7, #0]
    return getBuffer()[pos];
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f7ff fad0 	bl	800b502 <_ZNK12SimpleString9getBufferEv>
 800bf62:	4602      	mov	r2, r0
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	4413      	add	r3, r2
 800bf68:	781b      	ldrb	r3, [r3, #0]
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3708      	adds	r7, #8
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}

0800bf72 <_ZNK12SimpleString4findEc>:

size_t SimpleString::find(char ch) const
{
 800bf72:	b580      	push	{r7, lr}
 800bf74:	b082      	sub	sp, #8
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	6078      	str	r0, [r7, #4]
 800bf7a:	460b      	mov	r3, r1
 800bf7c:	70fb      	strb	r3, [r7, #3]
    return findFrom(0, ch);
 800bf7e:	78fb      	ldrb	r3, [r7, #3]
 800bf80:	461a      	mov	r2, r3
 800bf82:	2100      	movs	r1, #0
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f000 f805 	bl	800bf94 <_ZNK12SimpleString8findFromEjc>
 800bf8a:	4603      	mov	r3, r0
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3708      	adds	r7, #8
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <_ZNK12SimpleString8findFromEjc>:

size_t SimpleString::findFrom(size_t starting_position, char ch) const
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b086      	sub	sp, #24
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	60f8      	str	r0, [r7, #12]
 800bf9c:	60b9      	str	r1, [r7, #8]
 800bf9e:	4613      	mov	r3, r2
 800bfa0:	71fb      	strb	r3, [r7, #7]
    size_t length = size();
 800bfa2:	68f8      	ldr	r0, [r7, #12]
 800bfa4:	f7ff fe50 	bl	800bc48 <_ZNK12SimpleString4sizeEv>
 800bfa8:	6138      	str	r0, [r7, #16]
    for (size_t i = starting_position; i < length; i++)
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	617b      	str	r3, [r7, #20]
 800bfae:	697a      	ldr	r2, [r7, #20]
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d213      	bcs.n	800bfde <_ZNK12SimpleString8findFromEjc+0x4a>
        if (at(i) == ch) return i;
 800bfb6:	6979      	ldr	r1, [r7, #20]
 800bfb8:	68f8      	ldr	r0, [r7, #12]
 800bfba:	f7ff ffca 	bl	800bf52 <_ZNK12SimpleString2atEj>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	79fb      	ldrb	r3, [r7, #7]
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	bf0c      	ite	eq
 800bfc8:	2301      	moveq	r3, #1
 800bfca:	2300      	movne	r3, #0
 800bfcc:	b2db      	uxtb	r3, r3
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d001      	beq.n	800bfd6 <_ZNK12SimpleString8findFromEjc+0x42>
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	e005      	b.n	800bfe2 <_ZNK12SimpleString8findFromEjc+0x4e>
    for (size_t i = starting_position; i < length; i++)
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	3301      	adds	r3, #1
 800bfda:	617b      	str	r3, [r7, #20]
 800bfdc:	e7e7      	b.n	800bfae <_ZNK12SimpleString8findFromEjc+0x1a>
    return npos;
 800bfde:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3718      	adds	r7, #24
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
	...

0800bfec <_ZNK12SimpleString17subStringFromTillEcc>:

SimpleString SimpleString::subStringFromTill(char startChar, char lastExcludedChar) const
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b086      	sub	sp, #24
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	60b9      	str	r1, [r7, #8]
 800bff6:	4611      	mov	r1, r2
 800bff8:	461a      	mov	r2, r3
 800bffa:	460b      	mov	r3, r1
 800bffc:	71fb      	strb	r3, [r7, #7]
 800bffe:	4613      	mov	r3, r2
 800c000:	71bb      	strb	r3, [r7, #6]
    size_t beginPos = find(startChar);
 800c002:	79fb      	ldrb	r3, [r7, #7]
 800c004:	4619      	mov	r1, r3
 800c006:	68b8      	ldr	r0, [r7, #8]
 800c008:	f7ff ffb3 	bl	800bf72 <_ZNK12SimpleString4findEc>
 800c00c:	6178      	str	r0, [r7, #20]
    if (beginPos == npos) return "";
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c014:	d104      	bne.n	800c020 <_ZNK12SimpleString17subStringFromTillEcc+0x34>
 800c016:	4911      	ldr	r1, [pc, #68]	; (800c05c <_ZNK12SimpleString17subStringFromTillEcc+0x70>)
 800c018:	68f8      	ldr	r0, [r7, #12]
 800c01a:	f7ff fa7e 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800c01e:	e019      	b.n	800c054 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    size_t endPos = findFrom(beginPos, lastExcludedChar);
 800c020:	79bb      	ldrb	r3, [r7, #6]
 800c022:	461a      	mov	r2, r3
 800c024:	6979      	ldr	r1, [r7, #20]
 800c026:	68b8      	ldr	r0, [r7, #8]
 800c028:	f7ff ffb4 	bl	800bf94 <_ZNK12SimpleString8findFromEjc>
 800c02c:	6138      	str	r0, [r7, #16]
    if (endPos == npos) return subString(beginPos);
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c034:	d106      	bne.n	800c044 <_ZNK12SimpleString17subStringFromTillEcc+0x58>
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	697a      	ldr	r2, [r7, #20]
 800c03a:	68b9      	ldr	r1, [r7, #8]
 800c03c:	4618      	mov	r0, r3
 800c03e:	f7ff ff77 	bl	800bf30 <_ZNK12SimpleString9subStringEj>
 800c042:	e007      	b.n	800c054 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    return subString(beginPos, endPos - beginPos);
 800c044:	693a      	ldr	r2, [r7, #16]
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	1ad3      	subs	r3, r2, r3
 800c04a:	68f8      	ldr	r0, [r7, #12]
 800c04c:	697a      	ldr	r2, [r7, #20]
 800c04e:	68b9      	ldr	r1, [r7, #8]
 800c050:	f7ff ff24 	bl	800be9c <_ZNK12SimpleString9subStringEjj>
}
 800c054:	68f8      	ldr	r0, [r7, #12]
 800c056:	3718      	adds	r7, #24
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}
 800c05c:	08022a68 	.word	0x08022a68

0800c060 <_ZN12SimpleString15copyToNewBufferEPKcj>:

char* SimpleString::copyToNewBuffer(const char* bufferToCopy, size_t bufferSize)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b084      	sub	sp, #16
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	6039      	str	r1, [r7, #0]
    char* newBuffer = allocStringBuffer(bufferSize, __FILE__, __LINE__);
 800c06a:	f240 2275 	movw	r2, #629	; 0x275
 800c06e:	490a      	ldr	r1, [pc, #40]	; (800c098 <_ZN12SimpleString15copyToNewBufferEPKcj+0x38>)
 800c070:	6838      	ldr	r0, [r7, #0]
 800c072:	f7fe ffd7 	bl	800b024 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800c076:	60f8      	str	r0, [r7, #12]
    StrNCpy(newBuffer, bufferToCopy, bufferSize);
 800c078:	683a      	ldr	r2, [r7, #0]
 800c07a:	6879      	ldr	r1, [r7, #4]
 800c07c:	68f8      	ldr	r0, [r7, #12]
 800c07e:	f7ff f8f6 	bl	800b26e <_ZN12SimpleString7StrNCpyEPcPKcj>
    newBuffer[bufferSize-1] = '\0';
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	3b01      	subs	r3, #1
 800c086:	68fa      	ldr	r2, [r7, #12]
 800c088:	4413      	add	r3, r2
 800c08a:	2200      	movs	r2, #0
 800c08c:	701a      	strb	r2, [r3, #0]
    return newBuffer;
 800c08e:	68fb      	ldr	r3, [r7, #12]
}
 800c090:	4618      	mov	r0, r3
 800c092:	3710      	adds	r7, #16
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}
 800c098:	080229a8 	.word	0x080229a8

0800c09c <_ZN12SimpleString7isDigitEc>:
    StrNCpy(bufferToCopy, getBuffer(), sizeToCopy);
    bufferToCopy[sizeToCopy] = '\0';
}

bool SimpleString::isDigit(char ch)
{
 800c09c:	b480      	push	{r7}
 800c09e:	b083      	sub	sp, #12
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	71fb      	strb	r3, [r7, #7]
    return '0' <= ch && '9' >= ch;
 800c0a6:	79fb      	ldrb	r3, [r7, #7]
 800c0a8:	2b2f      	cmp	r3, #47	; 0x2f
 800c0aa:	d904      	bls.n	800c0b6 <_ZN12SimpleString7isDigitEc+0x1a>
 800c0ac:	79fb      	ldrb	r3, [r7, #7]
 800c0ae:	2b39      	cmp	r3, #57	; 0x39
 800c0b0:	d801      	bhi.n	800c0b6 <_ZN12SimpleString7isDigitEc+0x1a>
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	e000      	b.n	800c0b8 <_ZN12SimpleString7isDigitEc+0x1c>
 800c0b6:	2300      	movs	r3, #0
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	370c      	adds	r7, #12
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr

0800c0c4 <_ZN12SimpleString7isSpaceEc>:

bool SimpleString::isSpace(char ch)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b083      	sub	sp, #12
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	71fb      	strb	r3, [r7, #7]
    return (ch == ' ') || (0x08 < ch && 0x0E > ch);
 800c0ce:	79fb      	ldrb	r3, [r7, #7]
 800c0d0:	2b20      	cmp	r3, #32
 800c0d2:	d005      	beq.n	800c0e0 <_ZN12SimpleString7isSpaceEc+0x1c>
 800c0d4:	79fb      	ldrb	r3, [r7, #7]
 800c0d6:	2b08      	cmp	r3, #8
 800c0d8:	d904      	bls.n	800c0e4 <_ZN12SimpleString7isSpaceEc+0x20>
 800c0da:	79fb      	ldrb	r3, [r7, #7]
 800c0dc:	2b0d      	cmp	r3, #13
 800c0de:	d801      	bhi.n	800c0e4 <_ZN12SimpleString7isSpaceEc+0x20>
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	e000      	b.n	800c0e6 <_ZN12SimpleString7isSpaceEc+0x22>
 800c0e4:	2300      	movs	r3, #0
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	370c      	adds	r7, #12
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f0:	4770      	bx	lr

0800c0f2 <_ZN12SimpleString7isUpperEc>:

bool SimpleString::isUpper(char ch)
{
 800c0f2:	b480      	push	{r7}
 800c0f4:	b083      	sub	sp, #12
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	71fb      	strb	r3, [r7, #7]
    return 'A' <= ch && 'Z' >= ch;
 800c0fc:	79fb      	ldrb	r3, [r7, #7]
 800c0fe:	2b40      	cmp	r3, #64	; 0x40
 800c100:	d904      	bls.n	800c10c <_ZN12SimpleString7isUpperEc+0x1a>
 800c102:	79fb      	ldrb	r3, [r7, #7]
 800c104:	2b5a      	cmp	r3, #90	; 0x5a
 800c106:	d801      	bhi.n	800c10c <_ZN12SimpleString7isUpperEc+0x1a>
 800c108:	2301      	movs	r3, #1
 800c10a:	e000      	b.n	800c10e <_ZN12SimpleString7isUpperEc+0x1c>
 800c10c:	2300      	movs	r3, #0
}
 800c10e:	4618      	mov	r0, r3
 800c110:	370c      	adds	r7, #12
 800c112:	46bd      	mov	sp, r7
 800c114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c118:	4770      	bx	lr

0800c11a <_ZN12SimpleString9isControlEc>:

bool SimpleString::isControl(char ch)
{
 800c11a:	b480      	push	{r7}
 800c11c:	b083      	sub	sp, #12
 800c11e:	af00      	add	r7, sp, #0
 800c120:	4603      	mov	r3, r0
 800c122:	71fb      	strb	r3, [r7, #7]
    return ch < ' ' || ch == char(0x7F);
 800c124:	79fb      	ldrb	r3, [r7, #7]
 800c126:	2b1f      	cmp	r3, #31
 800c128:	d902      	bls.n	800c130 <_ZN12SimpleString9isControlEc+0x16>
 800c12a:	79fb      	ldrb	r3, [r7, #7]
 800c12c:	2b7f      	cmp	r3, #127	; 0x7f
 800c12e:	d101      	bne.n	800c134 <_ZN12SimpleString9isControlEc+0x1a>
 800c130:	2301      	movs	r3, #1
 800c132:	e000      	b.n	800c136 <_ZN12SimpleString9isControlEc+0x1c>
 800c134:	2300      	movs	r3, #0
}
 800c136:	4618      	mov	r0, r3
 800c138:	370c      	adds	r7, #12
 800c13a:	46bd      	mov	sp, r7
 800c13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c140:	4770      	bx	lr

0800c142 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>:

bool SimpleString::isControlWithShortEscapeSequence(char ch)
{
 800c142:	b480      	push	{r7}
 800c144:	b083      	sub	sp, #12
 800c146:	af00      	add	r7, sp, #0
 800c148:	4603      	mov	r3, r0
 800c14a:	71fb      	strb	r3, [r7, #7]
    return '\a' <= ch && '\r' >= ch;
 800c14c:	79fb      	ldrb	r3, [r7, #7]
 800c14e:	2b06      	cmp	r3, #6
 800c150:	d904      	bls.n	800c15c <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800c152:	79fb      	ldrb	r3, [r7, #7]
 800c154:	2b0d      	cmp	r3, #13
 800c156:	d801      	bhi.n	800c15c <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800c158:	2301      	movs	r3, #1
 800c15a:	e000      	b.n	800c15e <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1c>
 800c15c:	2300      	movs	r3, #0
}
 800c15e:	4618      	mov	r0, r3
 800c160:	370c      	adds	r7, #12
 800c162:	46bd      	mov	sp, r7
 800c164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c168:	4770      	bx	lr
	...

0800c16c <_Z10StringFromb>:

SimpleString StringFrom(bool value)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b082      	sub	sp, #8
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	460b      	mov	r3, r1
 800c176:	70fb      	strb	r3, [r7, #3]
    return SimpleString(StringFromFormat("%s", value ? "true" : "false"));
 800c178:	78fb      	ldrb	r3, [r7, #3]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d001      	beq.n	800c182 <_Z10StringFromb+0x16>
 800c17e:	4a06      	ldr	r2, [pc, #24]	; (800c198 <_Z10StringFromb+0x2c>)
 800c180:	e000      	b.n	800c184 <_Z10StringFromb+0x18>
 800c182:	4a06      	ldr	r2, [pc, #24]	; (800c19c <_Z10StringFromb+0x30>)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	4906      	ldr	r1, [pc, #24]	; (800c1a0 <_Z10StringFromb+0x34>)
 800c188:	4618      	mov	r0, r3
 800c18a:	f000 fa85 	bl	800c698 <_Z16StringFromFormatPKcz>
}
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	3708      	adds	r7, #8
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	08022a74 	.word	0x08022a74
 800c19c:	08022a7c 	.word	0x08022a7c
 800c1a0:	08022a84 	.word	0x08022a84

0800c1a4 <_Z10StringFromPKc>:

SimpleString StringFrom(const char *value)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b082      	sub	sp, #8
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	6039      	str	r1, [r7, #0]
    return SimpleString(value);
 800c1ae:	6839      	ldr	r1, [r7, #0]
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f7ff f9b2 	bl	800b51a <_ZN12SimpleStringC1EPKc>
}
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	3708      	adds	r7, #8
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
	...

0800c1c0 <_Z25PrintableStringFromOrNullPKc>:
{
    return (expected) ? StringFrom(expected) : StringFrom("(null)");
}

SimpleString PrintableStringFromOrNull(const char * expected)
{
 800c1c0:	b590      	push	{r4, r7, lr}
 800c1c2:	b085      	sub	sp, #20
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
 800c1c8:	6039      	str	r1, [r7, #0]
    return (expected) ? StringFrom(expected).printable() : StringFrom("(null)");
 800c1ca:	2400      	movs	r4, #0
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d00e      	beq.n	800c1f0 <_Z25PrintableStringFromOrNullPKc+0x30>
 800c1d2:	f107 0308 	add.w	r3, r7, #8
 800c1d6:	6839      	ldr	r1, [r7, #0]
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f7ff ffe3 	bl	800c1a4 <_Z10StringFromPKc>
 800c1de:	2401      	movs	r4, #1
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f107 0208 	add.w	r2, r7, #8
 800c1e6:	4611      	mov	r1, r2
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f7ff fc3f 	bl	800ba6c <_ZNK12SimpleString9printableEv>
 800c1ee:	e004      	b.n	800c1fa <_Z25PrintableStringFromOrNullPKc+0x3a>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	4908      	ldr	r1, [pc, #32]	; (800c214 <_Z25PrintableStringFromOrNullPKc+0x54>)
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7ff ffd5 	bl	800c1a4 <_Z10StringFromPKc>
 800c1fa:	2c00      	cmp	r4, #0
 800c1fc:	d004      	beq.n	800c208 <_Z25PrintableStringFromOrNullPKc+0x48>
 800c1fe:	f107 0308 	add.w	r3, r7, #8
 800c202:	4618      	mov	r0, r3
 800c204:	f7ff fd41 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800c208:	bf00      	nop
}
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	3714      	adds	r7, #20
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd90      	pop	{r4, r7, pc}
 800c212:	bf00      	nop
 800c214:	08022a88 	.word	0x08022a88

0800c218 <_Z10StringFromi>:

SimpleString StringFrom(int value)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b082      	sub	sp, #8
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
 800c220:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%d", value);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	683a      	ldr	r2, [r7, #0]
 800c226:	4904      	ldr	r1, [pc, #16]	; (800c238 <_Z10StringFromi+0x20>)
 800c228:	4618      	mov	r0, r3
 800c22a:	f000 fa35 	bl	800c698 <_Z16StringFromFormatPKcz>
}
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	3708      	adds	r7, #8
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
 800c236:	bf00      	nop
 800c238:	08022a90 	.word	0x08022a90

0800c23c <_Z10StringFroml>:

SimpleString StringFrom(long value)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b082      	sub	sp, #8
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%ld", value);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	683a      	ldr	r2, [r7, #0]
 800c24a:	4904      	ldr	r1, [pc, #16]	; (800c25c <_Z10StringFroml+0x20>)
 800c24c:	4618      	mov	r0, r3
 800c24e:	f000 fa23 	bl	800c698 <_Z16StringFromFormatPKcz>
}
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	3708      	adds	r7, #8
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}
 800c25a:	bf00      	nop
 800c25c:	08022a94 	.word	0x08022a94

0800c260 <_Z10StringFromPKv>:

SimpleString StringFrom(const void* value)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b086      	sub	sp, #24
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800c26a:	f107 0308 	add.w	r3, r7, #8
 800c26e:	4910      	ldr	r1, [pc, #64]	; (800c2b0 <_Z10StringFromPKv+0x50>)
 800c270:	4618      	mov	r0, r3
 800c272:	f7ff f952 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800c276:	f107 0310 	add.w	r3, r7, #16
 800c27a:	6839      	ldr	r1, [r7, #0]
 800c27c:	4618      	mov	r0, r3
 800c27e:	f000 f9a1 	bl	800c5c4 <_Z13HexStringFromPKv>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f107 0210 	add.w	r2, r7, #16
 800c288:	f107 0108 	add.w	r1, r7, #8
 800c28c:	4618      	mov	r0, r3
 800c28e:	f7ff fd5e 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 800c292:	f107 0310 	add.w	r3, r7, #16
 800c296:	4618      	mov	r0, r3
 800c298:	f7ff fcf7 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800c29c:	f107 0308 	add.w	r3, r7, #8
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f7ff fcf2 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800c2a6:	bf00      	nop
}
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	3718      	adds	r7, #24
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}
 800c2b0:	08022a98 	.word	0x08022a98

0800c2b4 <_Z10StringFromPFvvE>:

SimpleString StringFrom(void (*value)())
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b086      	sub	sp, #24
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800c2be:	f107 0308 	add.w	r3, r7, #8
 800c2c2:	4910      	ldr	r1, [pc, #64]	; (800c304 <_Z10StringFromPFvvE+0x50>)
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f7ff f928 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800c2ca:	f107 0310 	add.w	r3, r7, #16
 800c2ce:	6839      	ldr	r1, [r7, #0]
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f000 f98b 	bl	800c5ec <_Z13HexStringFromPFvvE>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f107 0210 	add.w	r2, r7, #16
 800c2dc:	f107 0108 	add.w	r1, r7, #8
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f7ff fd34 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 800c2e6:	f107 0310 	add.w	r3, r7, #16
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f7ff fccd 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800c2f0:	f107 0308 	add.w	r3, r7, #8
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f7ff fcc8 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800c2fa:	bf00      	nop
}
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	3718      	adds	r7, #24
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}
 800c304:	08022a98 	.word	0x08022a98

0800c308 <_Z13HexStringFroml>:

SimpleString HexStringFrom(long value)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b082      	sub	sp, #8
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	683a      	ldr	r2, [r7, #0]
 800c316:	4904      	ldr	r1, [pc, #16]	; (800c328 <_Z13HexStringFroml+0x20>)
 800c318:	4618      	mov	r0, r3
 800c31a:	f000 f9bd 	bl	800c698 <_Z16StringFromFormatPKcz>
}
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	3708      	adds	r7, #8
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}
 800c326:	bf00      	nop
 800c328:	08022a9c 	.word	0x08022a9c

0800c32c <_Z13HexStringFromi>:

SimpleString HexStringFrom(int value)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	683a      	ldr	r2, [r7, #0]
 800c33a:	4904      	ldr	r1, [pc, #16]	; (800c34c <_Z13HexStringFromi+0x20>)
 800c33c:	4618      	mov	r0, r3
 800c33e:	f000 f9ab 	bl	800c698 <_Z16StringFromFormatPKcz>
}
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	3708      	adds	r7, #8
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}
 800c34a:	bf00      	nop
 800c34c:	08022aa0 	.word	0x08022aa0

0800c350 <_Z13HexStringFroma>:

SimpleString HexStringFrom(signed char value)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b086      	sub	sp, #24
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
 800c358:	460b      	mov	r3, r1
 800c35a:	70fb      	strb	r3, [r7, #3]
    SimpleString result = StringFromFormat("%x", value);
 800c35c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	4912      	ldr	r1, [pc, #72]	; (800c3ac <_Z13HexStringFroma+0x5c>)
 800c364:	4618      	mov	r0, r3
 800c366:	f000 f997 	bl	800c698 <_Z16StringFromFormatPKcz>
    if(value < 0) {
 800c36a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	da16      	bge.n	800c3a0 <_Z13HexStringFroma+0x50>
        size_t size = result.size();
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f7ff fc68 	bl	800bc48 <_ZNK12SimpleString4sizeEv>
 800c378:	6178      	str	r0, [r7, #20]
        result = result.subString(size-(CPPUTEST_CHAR_BIT/4));
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	1e9a      	subs	r2, r3, #2
 800c37e:	f107 030c 	add.w	r3, r7, #12
 800c382:	6879      	ldr	r1, [r7, #4]
 800c384:	4618      	mov	r0, r3
 800c386:	f7ff fdd3 	bl	800bf30 <_ZNK12SimpleString9subStringEj>
 800c38a:	f107 030c 	add.w	r3, r7, #12
 800c38e:	4619      	mov	r1, r3
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f7ff f92e 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 800c396:	f107 030c 	add.w	r3, r7, #12
 800c39a:	4618      	mov	r0, r3
 800c39c:	f7ff fc75 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    }
    return result;
 800c3a0:	bf00      	nop
}
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	3718      	adds	r7, #24
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}
 800c3aa:	bf00      	nop
 800c3ac:	08022aa0 	.word	0x08022aa0

0800c3b0 <_Z13HexStringFromm>:

SimpleString HexStringFrom(unsigned long value)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b082      	sub	sp, #8
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	683a      	ldr	r2, [r7, #0]
 800c3be:	4904      	ldr	r1, [pc, #16]	; (800c3d0 <_Z13HexStringFromm+0x20>)
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f000 f969 	bl	800c698 <_Z16StringFromFormatPKcz>
}
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	3708      	adds	r7, #8
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
 800c3ce:	bf00      	nop
 800c3d0:	08022a9c 	.word	0x08022a9c

0800c3d4 <_Z13HexStringFromj>:

SimpleString HexStringFrom(unsigned int value)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b082      	sub	sp, #8
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
 800c3dc:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	683a      	ldr	r2, [r7, #0]
 800c3e2:	4904      	ldr	r1, [pc, #16]	; (800c3f4 <_Z13HexStringFromj+0x20>)
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f000 f957 	bl	800c698 <_Z16StringFromFormatPKcz>
}
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	3708      	adds	r7, #8
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	bf00      	nop
 800c3f4:	08022aa0 	.word	0x08022aa0

0800c3f8 <_Z30BracketsFormattedHexStringFromi>:

SimpleString BracketsFormattedHexStringFrom(int value)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b084      	sub	sp, #16
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800c402:	f107 0308 	add.w	r3, r7, #8
 800c406:	6839      	ldr	r1, [r7, #0]
 800c408:	4618      	mov	r0, r3
 800c40a:	f7ff ff8f 	bl	800c32c <_Z13HexStringFromi>
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f107 0208 	add.w	r2, r7, #8
 800c414:	4611      	mov	r1, r2
 800c416:	4618      	mov	r0, r3
 800c418:	f000 f87e 	bl	800c518 <_Z26BracketsFormattedHexString12SimpleString>
 800c41c:	f107 0308 	add.w	r3, r7, #8
 800c420:	4618      	mov	r0, r3
 800c422:	f7ff fc32 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800c426:	bf00      	nop
}
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	3710      	adds	r7, #16
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <_Z30BracketsFormattedHexStringFromj>:

SimpleString BracketsFormattedHexStringFrom(unsigned int value)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b084      	sub	sp, #16
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800c43a:	f107 0308 	add.w	r3, r7, #8
 800c43e:	6839      	ldr	r1, [r7, #0]
 800c440:	4618      	mov	r0, r3
 800c442:	f7ff ffc7 	bl	800c3d4 <_Z13HexStringFromj>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f107 0208 	add.w	r2, r7, #8
 800c44c:	4611      	mov	r1, r2
 800c44e:	4618      	mov	r0, r3
 800c450:	f000 f862 	bl	800c518 <_Z26BracketsFormattedHexString12SimpleString>
 800c454:	f107 0308 	add.w	r3, r7, #8
 800c458:	4618      	mov	r0, r3
 800c45a:	f7ff fc16 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800c45e:	bf00      	nop
}
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	3710      	adds	r7, #16
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}

0800c468 <_Z30BracketsFormattedHexStringFroml>:

SimpleString BracketsFormattedHexStringFrom(long value)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b084      	sub	sp, #16
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800c472:	f107 0308 	add.w	r3, r7, #8
 800c476:	6839      	ldr	r1, [r7, #0]
 800c478:	4618      	mov	r0, r3
 800c47a:	f7ff ff45 	bl	800c308 <_Z13HexStringFroml>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f107 0208 	add.w	r2, r7, #8
 800c484:	4611      	mov	r1, r2
 800c486:	4618      	mov	r0, r3
 800c488:	f000 f846 	bl	800c518 <_Z26BracketsFormattedHexString12SimpleString>
 800c48c:	f107 0308 	add.w	r3, r7, #8
 800c490:	4618      	mov	r0, r3
 800c492:	f7ff fbfa 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800c496:	bf00      	nop
}
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	3710      	adds	r7, #16
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}

0800c4a0 <_Z30BracketsFormattedHexStringFromm>:


SimpleString BracketsFormattedHexStringFrom(unsigned long value)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b084      	sub	sp, #16
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800c4aa:	f107 0308 	add.w	r3, r7, #8
 800c4ae:	6839      	ldr	r1, [r7, #0]
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7ff ff7d 	bl	800c3b0 <_Z13HexStringFromm>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f107 0208 	add.w	r2, r7, #8
 800c4bc:	4611      	mov	r1, r2
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f000 f82a 	bl	800c518 <_Z26BracketsFormattedHexString12SimpleString>
 800c4c4:	f107 0308 	add.w	r3, r7, #8
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f7ff fbde 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800c4ce:	bf00      	nop
}
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	3710      	adds	r7, #16
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <_Z30BracketsFormattedHexStringFroma>:

SimpleString BracketsFormattedHexStringFrom(signed char value)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b084      	sub	sp, #16
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	460b      	mov	r3, r1
 800c4e2:	70fb      	strb	r3, [r7, #3]
    return BracketsFormattedHexString(HexStringFrom(value));
 800c4e4:	f107 0308 	add.w	r3, r7, #8
 800c4e8:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800c4ec:	4611      	mov	r1, r2
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f7ff ff2e 	bl	800c350 <_Z13HexStringFroma>
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f107 0208 	add.w	r2, r7, #8
 800c4fa:	4611      	mov	r1, r2
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f000 f80b 	bl	800c518 <_Z26BracketsFormattedHexString12SimpleString>
 800c502:	f107 0308 	add.w	r3, r7, #8
 800c506:	4618      	mov	r0, r3
 800c508:	f7ff fbbf 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800c50c:	bf00      	nop
}
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	3710      	adds	r7, #16
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
	...

0800c518 <_Z26BracketsFormattedHexString12SimpleString>:

SimpleString BracketsFormattedHexString(SimpleString hexString)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b088      	sub	sp, #32
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	6039      	str	r1, [r7, #0]
    return SimpleString("(0x") + hexString + ")" ;
 800c522:	f107 0310 	add.w	r3, r7, #16
 800c526:	4917      	ldr	r1, [pc, #92]	; (800c584 <_Z26BracketsFormattedHexString12SimpleString+0x6c>)
 800c528:	4618      	mov	r0, r3
 800c52a:	f7fe fff6 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800c52e:	f107 0308 	add.w	r3, r7, #8
 800c532:	f107 0110 	add.w	r1, r7, #16
 800c536:	683a      	ldr	r2, [r7, #0]
 800c538:	4618      	mov	r0, r3
 800c53a:	f7ff fc08 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 800c53e:	f107 0318 	add.w	r3, r7, #24
 800c542:	4911      	ldr	r1, [pc, #68]	; (800c588 <_Z26BracketsFormattedHexString12SimpleString+0x70>)
 800c544:	4618      	mov	r0, r3
 800c546:	f7fe ffe8 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f107 0218 	add.w	r2, r7, #24
 800c550:	f107 0108 	add.w	r1, r7, #8
 800c554:	4618      	mov	r0, r3
 800c556:	f7ff fbfa 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 800c55a:	f107 0318 	add.w	r3, r7, #24
 800c55e:	4618      	mov	r0, r3
 800c560:	f7ff fb93 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800c564:	f107 0308 	add.w	r3, r7, #8
 800c568:	4618      	mov	r0, r3
 800c56a:	f7ff fb8e 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800c56e:	f107 0310 	add.w	r3, r7, #16
 800c572:	4618      	mov	r0, r3
 800c574:	f7ff fb89 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800c578:	bf00      	nop
}
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	3720      	adds	r7, #32
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}
 800c582:	bf00      	nop
 800c584:	08022aa4 	.word	0x08022aa4
 800c588:	08022aa8 	.word	0x08022aa8

0800c58c <_ZL25convertPointerToLongValuePKv>:
}

#else   /* CPPUTEST_USE_LONG_LONG */

static long convertPointerToLongValue(const void* value)
{
 800c58c:	b480      	push	{r7}
 800c58e:	b085      	sub	sp, #20
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800c594:	1d3b      	adds	r3, r7, #4
 800c596:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3714      	adds	r7, #20
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a6:	4770      	bx	lr

0800c5a8 <_ZL33convertFunctionPointerToLongValuePFvvE>:

static long convertFunctionPointerToLongValue(void (*value)())
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b085      	sub	sp, #20
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800c5b0:	1d3b      	adds	r3, r7, #4
 800c5b2:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3714      	adds	r7, #20
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr

0800c5c4 <_Z13HexStringFromPKv>:
{
    return "<ulonglong_unsupported>";
}

SimpleString HexStringFrom(const void* value)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b082      	sub	sp, #8
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertPointerToLongValue(value));
 800c5ce:	6838      	ldr	r0, [r7, #0]
 800c5d0:	f7ff ffdc 	bl	800c58c <_ZL25convertPointerToLongValuePKv>
 800c5d4:	4602      	mov	r2, r0
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	4903      	ldr	r1, [pc, #12]	; (800c5e8 <_Z13HexStringFromPKv+0x24>)
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f000 f85c 	bl	800c698 <_Z16StringFromFormatPKcz>
}
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	3708      	adds	r7, #8
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}
 800c5e8:	08022a9c 	.word	0x08022a9c

0800c5ec <_Z13HexStringFromPFvvE>:

SimpleString HexStringFrom(void (*value)())
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b082      	sub	sp, #8
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertFunctionPointerToLongValue(value));
 800c5f6:	6838      	ldr	r0, [r7, #0]
 800c5f8:	f7ff ffd6 	bl	800c5a8 <_ZL33convertFunctionPointerToLongValuePFvvE>
 800c5fc:	4602      	mov	r2, r0
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	4903      	ldr	r1, [pc, #12]	; (800c610 <_Z13HexStringFromPFvvE+0x24>)
 800c602:	4618      	mov	r0, r3
 800c604:	f000 f848 	bl	800c698 <_Z16StringFromFormatPKcz>
}
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	3708      	adds	r7, #8
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}
 800c610:	08022a9c 	.word	0x08022a9c

0800c614 <_Z10StringFromdi>:
}

#endif  /* CPPUTEST_USE_LONG_LONG */

SimpleString StringFrom(double value, int precision)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b086      	sub	sp, #24
 800c618:	af02      	add	r7, sp, #8
 800c61a:	60f8      	str	r0, [r7, #12]
 800c61c:	ed87 0b00 	vstr	d0, [r7]
 800c620:	60b9      	str	r1, [r7, #8]
    if (PlatformSpecificIsNan(value))
 800c622:	4b18      	ldr	r3, [pc, #96]	; (800c684 <_Z10StringFromdi+0x70>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	ed97 0b00 	vldr	d0, [r7]
 800c62a:	4798      	blx	r3
 800c62c:	4603      	mov	r3, r0
 800c62e:	2b00      	cmp	r3, #0
 800c630:	bf14      	ite	ne
 800c632:	2301      	movne	r3, #1
 800c634:	2300      	moveq	r3, #0
 800c636:	b2db      	uxtb	r3, r3
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d004      	beq.n	800c646 <_Z10StringFromdi+0x32>
        return "Nan - Not a number";
 800c63c:	4912      	ldr	r1, [pc, #72]	; (800c688 <_Z10StringFromdi+0x74>)
 800c63e:	68f8      	ldr	r0, [r7, #12]
 800c640:	f7fe ff6b 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800c644:	e01a      	b.n	800c67c <_Z10StringFromdi+0x68>
    else if (PlatformSpecificIsInf(value))
 800c646:	4b11      	ldr	r3, [pc, #68]	; (800c68c <_Z10StringFromdi+0x78>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	ed97 0b00 	vldr	d0, [r7]
 800c64e:	4798      	blx	r3
 800c650:	4603      	mov	r3, r0
 800c652:	2b00      	cmp	r3, #0
 800c654:	bf14      	ite	ne
 800c656:	2301      	movne	r3, #1
 800c658:	2300      	moveq	r3, #0
 800c65a:	b2db      	uxtb	r3, r3
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d004      	beq.n	800c66a <_Z10StringFromdi+0x56>
        return "Inf - Infinity";
 800c660:	490b      	ldr	r1, [pc, #44]	; (800c690 <_Z10StringFromdi+0x7c>)
 800c662:	68f8      	ldr	r0, [r7, #12]
 800c664:	f7fe ff59 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800c668:	e008      	b.n	800c67c <_Z10StringFromdi+0x68>
    else
        return StringFromFormat("%.*g", precision, value);
 800c66a:	68f8      	ldr	r0, [r7, #12]
 800c66c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c670:	e9cd 2300 	strd	r2, r3, [sp]
 800c674:	68ba      	ldr	r2, [r7, #8]
 800c676:	4907      	ldr	r1, [pc, #28]	; (800c694 <_Z10StringFromdi+0x80>)
 800c678:	f000 f80e 	bl	800c698 <_Z16StringFromFormatPKcz>
}
 800c67c:	68f8      	ldr	r0, [r7, #12]
 800c67e:	3710      	adds	r7, #16
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}
 800c684:	200000e8 	.word	0x200000e8
 800c688:	08022adc 	.word	0x08022adc
 800c68c:	200000ec 	.word	0x200000ec
 800c690:	08022af0 	.word	0x08022af0
 800c694:	08022b00 	.word	0x08022b00

0800c698 <_Z16StringFromFormatPKcz>:
{
    return SimpleString(value);
}

SimpleString StringFromFormat(const char* format, ...)
{
 800c698:	b40e      	push	{r1, r2, r3}
 800c69a:	b580      	push	{r7, lr}
 800c69c:	b087      	sub	sp, #28
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	6078      	str	r0, [r7, #4]
    SimpleString resultString;
 800c6a2:	4910      	ldr	r1, [pc, #64]	; (800c6e4 <_Z16StringFromFormatPKcz+0x4c>)
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f7fe ff38 	bl	800b51a <_ZN12SimpleStringC1EPKc>
    va_list arguments;
    va_start(arguments, format);
 800c6aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c6ae:	60fb      	str	r3, [r7, #12]

    resultString = VStringFromFormat(format, arguments);
 800c6b0:	f107 0310 	add.w	r3, r7, #16
 800c6b4:	68fa      	ldr	r2, [r7, #12]
 800c6b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f000 f839 	bl	800c730 <_Z17VStringFromFormatPKcSt9__va_list>
 800c6be:	f107 0310 	add.w	r3, r7, #16
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f7fe ff94 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 800c6ca:	f107 0310 	add.w	r3, r7, #16
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f7ff fadb 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    va_end(arguments);
    return resultString;
 800c6d4:	bf00      	nop
}
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	371c      	adds	r7, #28
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c6e0:	b003      	add	sp, #12
 800c6e2:	4770      	bx	lr
 800c6e4:	08022a68 	.word	0x08022a68

0800c6e8 <_Z10StringFromj>:

SimpleString StringFrom(unsigned int i)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b082      	sub	sp, #8
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
 800c6f0:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%u", i);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	683a      	ldr	r2, [r7, #0]
 800c6f6:	4904      	ldr	r1, [pc, #16]	; (800c708 <_Z10StringFromj+0x20>)
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7ff ffcd 	bl	800c698 <_Z16StringFromFormatPKcz>
}
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	3708      	adds	r7, #8
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
 800c706:	bf00      	nop
 800c708:	08022b0c 	.word	0x08022b0c

0800c70c <_Z10StringFromm>:
}

#endif

SimpleString StringFrom(unsigned long i)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b082      	sub	sp, #8
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lu", i);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	683a      	ldr	r2, [r7, #0]
 800c71a:	4904      	ldr	r1, [pc, #16]	; (800c72c <_Z10StringFromm+0x20>)
 800c71c:	4618      	mov	r0, r3
 800c71e:	f7ff ffbb 	bl	800c698 <_Z16StringFromFormatPKcz>
}
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	3708      	adds	r7, #8
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}
 800c72a:	bf00      	nop
 800c72c:	08022b10 	.word	0x08022b10

0800c730 <_Z17VStringFromFormatPKcSt9__va_list>:

SimpleString VStringFromFormat(const char* format, va_list args)
{
 800c730:	b590      	push	{r4, r7, lr}
 800c732:	b0a7      	sub	sp, #156	; 0x9c
 800c734:	af00      	add	r7, sp, #0
 800c736:	60f8      	str	r0, [r7, #12]
 800c738:	60b9      	str	r1, [r7, #8]
 800c73a:	607a      	str	r2, [r7, #4]
    va_list argsCopy;
    va_copy(argsCopy, args);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	67bb      	str	r3, [r7, #120]	; 0x78
    enum
    {
        sizeOfdefaultBuffer = 100
    };
    char defaultBuffer[sizeOfdefaultBuffer];
    SimpleString resultString;
 800c740:	492e      	ldr	r1, [pc, #184]	; (800c7fc <_Z17VStringFromFormatPKcSt9__va_list+0xcc>)
 800c742:	68f8      	ldr	r0, [r7, #12]
 800c744:	f7fe fee9 	bl	800b51a <_ZN12SimpleStringC1EPKc>

    size_t size = (size_t)PlatformSpecificVSNprintf(defaultBuffer, sizeOfdefaultBuffer, format, args);
 800c748:	4b2d      	ldr	r3, [pc, #180]	; (800c800 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800c74a:	681c      	ldr	r4, [r3, #0]
 800c74c:	f107 0014 	add.w	r0, r7, #20
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	68ba      	ldr	r2, [r7, #8]
 800c754:	2164      	movs	r1, #100	; 0x64
 800c756:	47a0      	blx	r4
 800c758:	4603      	mov	r3, r0
 800c75a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (size < sizeOfdefaultBuffer) {
 800c75e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c762:	2b63      	cmp	r3, #99	; 0x63
 800c764:	d813      	bhi.n	800c78e <_Z17VStringFromFormatPKcSt9__va_list+0x5e>
        resultString = SimpleString(defaultBuffer);
 800c766:	f107 0214 	add.w	r2, r7, #20
 800c76a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800c76e:	4611      	mov	r1, r2
 800c770:	4618      	mov	r0, r3
 800c772:	f7fe fed2 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800c776:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800c77a:	4619      	mov	r1, r3
 800c77c:	68f8      	ldr	r0, [r7, #12]
 800c77e:	f7fe ff38 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 800c782:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800c786:	4618      	mov	r0, r3
 800c788:	f7ff fa7f 	bl	800bc8a <_ZN12SimpleStringD1Ev>
        resultString = SimpleString(newBuffer);

        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
    }
    va_end(argsCopy);
    return resultString;
 800c78c:	e031      	b.n	800c7f2 <_Z17VStringFromFormatPKcSt9__va_list+0xc2>
        size_t newBufferSize = size + 1;
 800c78e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c792:	3301      	adds	r3, #1
 800c794:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        char* newBuffer = SimpleString::allocStringBuffer(newBufferSize, __FILE__, __LINE__);
 800c798:	f240 32c3 	movw	r2, #963	; 0x3c3
 800c79c:	4919      	ldr	r1, [pc, #100]	; (800c804 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800c79e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800c7a2:	f7fe fc3f 	bl	800b024 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800c7a6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        PlatformSpecificVSNprintf(newBuffer, newBufferSize, format, argsCopy);
 800c7aa:	4b15      	ldr	r3, [pc, #84]	; (800c800 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800c7ac:	681c      	ldr	r4, [r3, #0]
 800c7ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c7b0:	68ba      	ldr	r2, [r7, #8]
 800c7b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c7b6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800c7ba:	47a0      	blx	r4
        resultString = SimpleString(newBuffer);
 800c7bc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800c7c0:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f7fe fea8 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800c7ca:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	68f8      	ldr	r0, [r7, #12]
 800c7d2:	f7fe ff0e 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 800c7d6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f7ff fa55 	bl	800bc8a <_ZN12SimpleStringD1Ev>
        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
 800c7e0:	f240 33c7 	movw	r3, #967	; 0x3c7
 800c7e4:	4a07      	ldr	r2, [pc, #28]	; (800c804 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800c7e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c7ea:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800c7ee:	f7fe fc2d 	bl	800b04c <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
    return resultString;
 800c7f2:	bf00      	nop
}
 800c7f4:	68f8      	ldr	r0, [r7, #12]
 800c7f6:	379c      	adds	r7, #156	; 0x9c
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd90      	pop	{r4, r7, pc}
 800c7fc:	08022a68 	.word	0x08022a68
 800c800:	200000b0 	.word	0x200000b0
 800c804:	080229a8 	.word	0x080229a8

0800c808 <_Z16StringFromBinaryPKhj>:

SimpleString StringFromBinary(const unsigned char* value, size_t size)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b08a      	sub	sp, #40	; 0x28
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	60f8      	str	r0, [r7, #12]
 800c810:	60b9      	str	r1, [r7, #8]
 800c812:	607a      	str	r2, [r7, #4]
    SimpleString result;
 800c814:	491f      	ldr	r1, [pc, #124]	; (800c894 <_Z16StringFromBinaryPKhj+0x8c>)
 800c816:	68f8      	ldr	r0, [r7, #12]
 800c818:	f7fe fe7f 	bl	800b51a <_ZN12SimpleStringC1EPKc>

    for (size_t i = 0; i < size; i++) {
 800c81c:	2300      	movs	r3, #0
 800c81e:	627b      	str	r3, [r7, #36]	; 0x24
 800c820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	429a      	cmp	r2, r3
 800c826:	d219      	bcs.n	800c85c <_Z16StringFromBinaryPKhj+0x54>
        result += StringFromFormat("%02X ", value[i]);
 800c828:	68ba      	ldr	r2, [r7, #8]
 800c82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c82c:	4413      	add	r3, r2
 800c82e:	781b      	ldrb	r3, [r3, #0]
 800c830:	461a      	mov	r2, r3
 800c832:	f107 0314 	add.w	r3, r7, #20
 800c836:	4918      	ldr	r1, [pc, #96]	; (800c898 <_Z16StringFromBinaryPKhj+0x90>)
 800c838:	4618      	mov	r0, r3
 800c83a:	f7ff ff2d 	bl	800c698 <_Z16StringFromFormatPKcz>
 800c83e:	f107 0314 	add.w	r3, r7, #20
 800c842:	4619      	mov	r1, r3
 800c844:	68f8      	ldr	r0, [r7, #12]
 800c846:	f7ff fa9d 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 800c84a:	f107 0314 	add.w	r3, r7, #20
 800c84e:	4618      	mov	r0, r3
 800c850:	f7ff fa1b 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < size; i++) {
 800c854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c856:	3301      	adds	r3, #1
 800c858:	627b      	str	r3, [r7, #36]	; 0x24
 800c85a:	e7e1      	b.n	800c820 <_Z16StringFromBinaryPKhj+0x18>
    }
    result = result.subString(0, result.size() - 1);
 800c85c:	68f8      	ldr	r0, [r7, #12]
 800c85e:	f7ff f9f3 	bl	800bc48 <_ZNK12SimpleString4sizeEv>
 800c862:	4603      	mov	r3, r0
 800c864:	3b01      	subs	r3, #1
 800c866:	f107 001c 	add.w	r0, r7, #28
 800c86a:	2200      	movs	r2, #0
 800c86c:	68f9      	ldr	r1, [r7, #12]
 800c86e:	f7ff fb15 	bl	800be9c <_ZNK12SimpleString9subStringEjj>
 800c872:	f107 031c 	add.w	r3, r7, #28
 800c876:	4619      	mov	r1, r3
 800c878:	68f8      	ldr	r0, [r7, #12]
 800c87a:	f7fe feba 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 800c87e:	f107 031c 	add.w	r3, r7, #28
 800c882:	4618      	mov	r0, r3
 800c884:	f7ff fa01 	bl	800bc8a <_ZN12SimpleStringD1Ev>

    return result;
 800c888:	bf00      	nop
}
 800c88a:	68f8      	ldr	r0, [r7, #12]
 800c88c:	3728      	adds	r7, #40	; 0x28
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}
 800c892:	bf00      	nop
 800c894:	08022a68 	.word	0x08022a68
 800c898:	08022b14 	.word	0x08022b14

0800c89c <_Z22StringFromBinaryOrNullPKhj>:

SimpleString StringFromBinaryOrNull(const unsigned char* value, size_t size)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b084      	sub	sp, #16
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	60f8      	str	r0, [r7, #12]
 800c8a4:	60b9      	str	r1, [r7, #8]
 800c8a6:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinary(value, size) : StringFrom("(null)");
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d006      	beq.n	800c8bc <_Z22StringFromBinaryOrNullPKhj+0x20>
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	687a      	ldr	r2, [r7, #4]
 800c8b2:	68b9      	ldr	r1, [r7, #8]
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f7ff ffa7 	bl	800c808 <_Z16StringFromBinaryPKhj>
 800c8ba:	e004      	b.n	800c8c6 <_Z22StringFromBinaryOrNullPKhj+0x2a>
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	4904      	ldr	r1, [pc, #16]	; (800c8d0 <_Z22StringFromBinaryOrNullPKhj+0x34>)
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f7ff fc6f 	bl	800c1a4 <_Z10StringFromPKc>
}
 800c8c6:	68f8      	ldr	r0, [r7, #12]
 800c8c8:	3710      	adds	r7, #16
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}
 800c8ce:	bf00      	nop
 800c8d0:	08022a88 	.word	0x08022a88

0800c8d4 <_Z24StringFromBinaryWithSizePKhj>:

SimpleString StringFromBinaryWithSize(const unsigned char* value, size_t size)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b088      	sub	sp, #32
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	60f8      	str	r0, [r7, #12]
 800c8dc:	60b9      	str	r1, [r7, #8]
 800c8de:	607a      	str	r2, [r7, #4]
    SimpleString result = StringFromFormat("Size = %u | HexContents = ", (unsigned) size);
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	687a      	ldr	r2, [r7, #4]
 800c8e4:	4913      	ldr	r1, [pc, #76]	; (800c934 <_Z24StringFromBinaryWithSizePKhj+0x60>)
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7ff fed6 	bl	800c698 <_Z16StringFromFormatPKcz>
    size_t displayedSize = ((size > 128) ? 128 : size);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2b80      	cmp	r3, #128	; 0x80
 800c8f0:	bf28      	it	cs
 800c8f2:	2380      	movcs	r3, #128	; 0x80
 800c8f4:	61fb      	str	r3, [r7, #28]
    result += StringFromBinaryOrNull(value, displayedSize);
 800c8f6:	f107 0314 	add.w	r3, r7, #20
 800c8fa:	69fa      	ldr	r2, [r7, #28]
 800c8fc:	68b9      	ldr	r1, [r7, #8]
 800c8fe:	4618      	mov	r0, r3
 800c900:	f7ff ffcc 	bl	800c89c <_Z22StringFromBinaryOrNullPKhj>
 800c904:	f107 0314 	add.w	r3, r7, #20
 800c908:	4619      	mov	r1, r3
 800c90a:	68f8      	ldr	r0, [r7, #12]
 800c90c:	f7ff fa3a 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 800c910:	f107 0314 	add.w	r3, r7, #20
 800c914:	4618      	mov	r0, r3
 800c916:	f7ff f9b8 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    if (size > displayedSize)
 800c91a:	687a      	ldr	r2, [r7, #4]
 800c91c:	69fb      	ldr	r3, [r7, #28]
 800c91e:	429a      	cmp	r2, r3
 800c920:	d903      	bls.n	800c92a <_Z24StringFromBinaryWithSizePKhj+0x56>
    {
        result += " ...";
 800c922:	4905      	ldr	r1, [pc, #20]	; (800c938 <_Z24StringFromBinaryWithSizePKhj+0x64>)
 800c924:	68f8      	ldr	r0, [r7, #12]
 800c926:	f7ff fa3f 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    }
    return result;
 800c92a:	bf00      	nop
}
 800c92c:	68f8      	ldr	r0, [r7, #12]
 800c92e:	3720      	adds	r7, #32
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}
 800c934:	08022b1c 	.word	0x08022b1c
 800c938:	08022b38 	.word	0x08022b38

0800c93c <_Z30StringFromBinaryWithSizeOrNullPKhj>:

SimpleString StringFromBinaryWithSizeOrNull(const unsigned char* value, size_t size)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b084      	sub	sp, #16
 800c940:	af00      	add	r7, sp, #0
 800c942:	60f8      	str	r0, [r7, #12]
 800c944:	60b9      	str	r1, [r7, #8]
 800c946:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinaryWithSize(value, size) : StringFrom("(null)");
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d006      	beq.n	800c95c <_Z30StringFromBinaryWithSizeOrNullPKhj+0x20>
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	68b9      	ldr	r1, [r7, #8]
 800c954:	4618      	mov	r0, r3
 800c956:	f7ff ffbd 	bl	800c8d4 <_Z24StringFromBinaryWithSizePKhj>
 800c95a:	e004      	b.n	800c966 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x2a>
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	4904      	ldr	r1, [pc, #16]	; (800c970 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x34>)
 800c960:	4618      	mov	r0, r3
 800c962:	f7ff fc1f 	bl	800c1a4 <_Z10StringFromPKc>
}
 800c966:	68f8      	ldr	r0, [r7, #12]
 800c968:	3710      	adds	r7, #16
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop
 800c970:	08022a88 	.word	0x08022a88

0800c974 <_Z20StringFromMaskedBitsmmj>:

SimpleString StringFromMaskedBits(unsigned long value, unsigned long mask, size_t byteCount)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b088      	sub	sp, #32
 800c978:	af00      	add	r7, sp, #0
 800c97a:	60f8      	str	r0, [r7, #12]
 800c97c:	60b9      	str	r1, [r7, #8]
 800c97e:	607a      	str	r2, [r7, #4]
 800c980:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800c982:	4925      	ldr	r1, [pc, #148]	; (800ca18 <_Z20StringFromMaskedBitsmmj+0xa4>)
 800c984:	68f8      	ldr	r0, [r7, #12]
 800c986:	f7fe fdc8 	bl	800b51a <_ZN12SimpleStringC1EPKc>
    size_t bitCount = (byteCount > sizeof(unsigned long)) ? (sizeof(unsigned long) * CPPUTEST_CHAR_BIT) : (byteCount * CPPUTEST_CHAR_BIT);
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	2b04      	cmp	r3, #4
 800c98e:	d802      	bhi.n	800c996 <_Z20StringFromMaskedBitsmmj+0x22>
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	00db      	lsls	r3, r3, #3
 800c994:	e000      	b.n	800c998 <_Z20StringFromMaskedBitsmmj+0x24>
 800c996:	2320      	movs	r3, #32
 800c998:	61bb      	str	r3, [r7, #24]
    const unsigned long msbMask = (((unsigned long) 1) << (bitCount - 1));
 800c99a:	69bb      	ldr	r3, [r7, #24]
 800c99c:	3b01      	subs	r3, #1
 800c99e:	2201      	movs	r2, #1
 800c9a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c9a4:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < bitCount; i++) {
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	61fb      	str	r3, [r7, #28]
 800c9aa:	69fa      	ldr	r2, [r7, #28]
 800c9ac:	69bb      	ldr	r3, [r7, #24]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d22d      	bcs.n	800ca0e <_Z20StringFromMaskedBitsmmj+0x9a>
        if (mask & msbMask) {
 800c9b2:	687a      	ldr	r2, [r7, #4]
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	4013      	ands	r3, r2
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d00c      	beq.n	800c9d6 <_Z20StringFromMaskedBitsmmj+0x62>
            result += (value & msbMask) ? "1" : "0";
 800c9bc:	68ba      	ldr	r2, [r7, #8]
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	4013      	ands	r3, r2
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d001      	beq.n	800c9ca <_Z20StringFromMaskedBitsmmj+0x56>
 800c9c6:	4b15      	ldr	r3, [pc, #84]	; (800ca1c <_Z20StringFromMaskedBitsmmj+0xa8>)
 800c9c8:	e000      	b.n	800c9cc <_Z20StringFromMaskedBitsmmj+0x58>
 800c9ca:	4b15      	ldr	r3, [pc, #84]	; (800ca20 <_Z20StringFromMaskedBitsmmj+0xac>)
 800c9cc:	4619      	mov	r1, r3
 800c9ce:	68f8      	ldr	r0, [r7, #12]
 800c9d0:	f7ff f9ea 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
 800c9d4:	e003      	b.n	800c9de <_Z20StringFromMaskedBitsmmj+0x6a>
        }
        else {
            result += "x";
 800c9d6:	4913      	ldr	r1, [pc, #76]	; (800ca24 <_Z20StringFromMaskedBitsmmj+0xb0>)
 800c9d8:	68f8      	ldr	r0, [r7, #12]
 800c9da:	f7ff f9e5 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
        }

        if (((i % 8) == 7) && (i != (bitCount - 1))) {
 800c9de:	69fb      	ldr	r3, [r7, #28]
 800c9e0:	f003 0307 	and.w	r3, r3, #7
 800c9e4:	2b07      	cmp	r3, #7
 800c9e6:	d108      	bne.n	800c9fa <_Z20StringFromMaskedBitsmmj+0x86>
 800c9e8:	69bb      	ldr	r3, [r7, #24]
 800c9ea:	3b01      	subs	r3, #1
 800c9ec:	69fa      	ldr	r2, [r7, #28]
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	d003      	beq.n	800c9fa <_Z20StringFromMaskedBitsmmj+0x86>
            result += " ";
 800c9f2:	490d      	ldr	r1, [pc, #52]	; (800ca28 <_Z20StringFromMaskedBitsmmj+0xb4>)
 800c9f4:	68f8      	ldr	r0, [r7, #12]
 800c9f6:	f7ff f9d7 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
        }

        value <<= 1;
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	005b      	lsls	r3, r3, #1
 800c9fe:	60bb      	str	r3, [r7, #8]
        mask <<= 1;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	005b      	lsls	r3, r3, #1
 800ca04:	607b      	str	r3, [r7, #4]
    for (size_t i = 0; i < bitCount; i++) {
 800ca06:	69fb      	ldr	r3, [r7, #28]
 800ca08:	3301      	adds	r3, #1
 800ca0a:	61fb      	str	r3, [r7, #28]
 800ca0c:	e7cd      	b.n	800c9aa <_Z20StringFromMaskedBitsmmj+0x36>
    }

    return result;
 800ca0e:	bf00      	nop
}
 800ca10:	68f8      	ldr	r0, [r7, #12]
 800ca12:	3720      	adds	r7, #32
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}
 800ca18:	08022a68 	.word	0x08022a68
 800ca1c:	08022b40 	.word	0x08022b40
 800ca20:	08022b44 	.word	0x08022b44
 800ca24:	08022b48 	.word	0x08022b48
 800ca28:	08022b4c 	.word	0x08022b4c

0800ca2c <_Z23StringFromOrdinalNumberj>:

SimpleString StringFromOrdinalNumber(unsigned int number)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b084      	sub	sp, #16
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
 800ca34:	6039      	str	r1, [r7, #0]
    unsigned int onesDigit = number % 10;
 800ca36:	683a      	ldr	r2, [r7, #0]
 800ca38:	4b18      	ldr	r3, [pc, #96]	; (800ca9c <_Z23StringFromOrdinalNumberj+0x70>)
 800ca3a:	fba3 1302 	umull	r1, r3, r3, r2
 800ca3e:	08d9      	lsrs	r1, r3, #3
 800ca40:	460b      	mov	r3, r1
 800ca42:	009b      	lsls	r3, r3, #2
 800ca44:	440b      	add	r3, r1
 800ca46:	005b      	lsls	r3, r3, #1
 800ca48:	1ad3      	subs	r3, r2, r3
 800ca4a:	60bb      	str	r3, [r7, #8]

    const char* suffix;
    if (number >= 11 && number <= 13) {
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	2b0a      	cmp	r3, #10
 800ca50:	d905      	bls.n	800ca5e <_Z23StringFromOrdinalNumberj+0x32>
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	2b0d      	cmp	r3, #13
 800ca56:	d802      	bhi.n	800ca5e <_Z23StringFromOrdinalNumberj+0x32>
        suffix = "th";
 800ca58:	4b11      	ldr	r3, [pc, #68]	; (800caa0 <_Z23StringFromOrdinalNumberj+0x74>)
 800ca5a:	60fb      	str	r3, [r7, #12]
 800ca5c:	e013      	b.n	800ca86 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (3 == onesDigit) {
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	2b03      	cmp	r3, #3
 800ca62:	d102      	bne.n	800ca6a <_Z23StringFromOrdinalNumberj+0x3e>
        suffix = "rd";
 800ca64:	4b0f      	ldr	r3, [pc, #60]	; (800caa4 <_Z23StringFromOrdinalNumberj+0x78>)
 800ca66:	60fb      	str	r3, [r7, #12]
 800ca68:	e00d      	b.n	800ca86 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (2 == onesDigit) {
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	2b02      	cmp	r3, #2
 800ca6e:	d102      	bne.n	800ca76 <_Z23StringFromOrdinalNumberj+0x4a>
        suffix = "nd";
 800ca70:	4b0d      	ldr	r3, [pc, #52]	; (800caa8 <_Z23StringFromOrdinalNumberj+0x7c>)
 800ca72:	60fb      	str	r3, [r7, #12]
 800ca74:	e007      	b.n	800ca86 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (1 == onesDigit) {
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	2b01      	cmp	r3, #1
 800ca7a:	d102      	bne.n	800ca82 <_Z23StringFromOrdinalNumberj+0x56>
        suffix = "st";
 800ca7c:	4b0b      	ldr	r3, [pc, #44]	; (800caac <_Z23StringFromOrdinalNumberj+0x80>)
 800ca7e:	60fb      	str	r3, [r7, #12]
 800ca80:	e001      	b.n	800ca86 <_Z23StringFromOrdinalNumberj+0x5a>
    } else {
        suffix = "th";
 800ca82:	4b07      	ldr	r3, [pc, #28]	; (800caa0 <_Z23StringFromOrdinalNumberj+0x74>)
 800ca84:	60fb      	str	r3, [r7, #12]
    }

    return StringFromFormat("%u%s", number, suffix);
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	683a      	ldr	r2, [r7, #0]
 800ca8c:	4908      	ldr	r1, [pc, #32]	; (800cab0 <_Z23StringFromOrdinalNumberj+0x84>)
 800ca8e:	f7ff fe03 	bl	800c698 <_Z16StringFromFormatPKcz>
}
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	3710      	adds	r7, #16
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}
 800ca9a:	bf00      	nop
 800ca9c:	cccccccd 	.word	0xcccccccd
 800caa0:	08022b50 	.word	0x08022b50
 800caa4:	08022b54 	.word	0x08022b54
 800caa8:	08022b58 	.word	0x08022b58
 800caac:	08022b5c 	.word	0x08022b5c
 800cab0:	08022b60 	.word	0x08022b60

0800cab4 <_ZN22SimpleStringCollectionC1Ev>:

SimpleStringCollection::SimpleStringCollection()
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b082      	sub	sp, #8
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	3304      	adds	r3, #4
 800cac0:	4907      	ldr	r1, [pc, #28]	; (800cae0 <_ZN22SimpleStringCollectionC1Ev+0x2c>)
 800cac2:	4618      	mov	r0, r3
 800cac4:	f7fe fd29 	bl	800b51a <_ZN12SimpleStringC1EPKc>
{
    collection_ = NULLPTR;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2200      	movs	r2, #0
 800cacc:	601a      	str	r2, [r3, #0]
    size_ = 0;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2200      	movs	r2, #0
 800cad2:	60da      	str	r2, [r3, #12]
}
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	4618      	mov	r0, r3
 800cad8:	3708      	adds	r7, #8
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}
 800cade:	bf00      	nop
 800cae0:	08022a68 	.word	0x08022a68

0800cae4 <_ZN22SimpleStringCollection8allocateEj>:

void SimpleStringCollection::allocate(size_t _size)
{
 800cae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cae6:	b083      	sub	sp, #12
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	6039      	str	r1, [r7, #0]
    delete[] collection_;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d01e      	beq.n	800cb34 <_ZN22SimpleStringCollection8allocateEj+0x50>
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681a      	ldr	r2, [r3, #0]
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	3b04      	subs	r3, #4
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	00db      	lsls	r3, r3, #3
 800cb04:	18d4      	adds	r4, r2, r3
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	429c      	cmp	r4, r3
 800cb0c:	d004      	beq.n	800cb18 <_ZN22SimpleStringCollection8allocateEj+0x34>
 800cb0e:	3c08      	subs	r4, #8
 800cb10:	4620      	mov	r0, r4
 800cb12:	f7ff f8ba 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800cb16:	e7f6      	b.n	800cb06 <_ZN22SimpleStringCollection8allocateEj+0x22>
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f1a3 0208 	sub.w	r2, r3, #8
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	3b04      	subs	r3, #4
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	3301      	adds	r3, #1
 800cb2a:	00db      	lsls	r3, r3, #3
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	4610      	mov	r0, r2
 800cb30:	f7fc f976 	bl	8008e20 <_ZdaPvj>

    size_ = _size;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	683a      	ldr	r2, [r7, #0]
 800cb38:	60da      	str	r2, [r3, #12]
    collection_ = new SimpleString[size_];
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	68dc      	ldr	r4, [r3, #12]
 800cb3e:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800cb42:	d202      	bcs.n	800cb4a <_ZN22SimpleStringCollection8allocateEj+0x66>
 800cb44:	1c63      	adds	r3, r4, #1
 800cb46:	00db      	lsls	r3, r3, #3
 800cb48:	e001      	b.n	800cb4e <_ZN22SimpleStringCollection8allocateEj+0x6a>
 800cb4a:	f04f 33ff 	mov.w	r3, #4294967295
 800cb4e:	f240 4227 	movw	r2, #1063	; 0x427
 800cb52:	4910      	ldr	r1, [pc, #64]	; (800cb94 <_ZN22SimpleStringCollection8allocateEj+0xb0>)
 800cb54:	4618      	mov	r0, r3
 800cb56:	f7fc f941 	bl	8008ddc <_ZnajPKci>
 800cb5a:	4605      	mov	r5, r0
 800cb5c:	1d2b      	adds	r3, r5, #4
 800cb5e:	3b04      	subs	r3, #4
 800cb60:	2208      	movs	r2, #8
 800cb62:	601a      	str	r2, [r3, #0]
 800cb64:	1d2b      	adds	r3, r5, #4
 800cb66:	601c      	str	r4, [r3, #0]
 800cb68:	f105 0308 	add.w	r3, r5, #8
 800cb6c:	1e62      	subs	r2, r4, #1
 800cb6e:	4614      	mov	r4, r2
 800cb70:	461e      	mov	r6, r3
 800cb72:	2c00      	cmp	r4, #0
 800cb74:	db06      	blt.n	800cb84 <_ZN22SimpleStringCollection8allocateEj+0xa0>
 800cb76:	4908      	ldr	r1, [pc, #32]	; (800cb98 <_ZN22SimpleStringCollection8allocateEj+0xb4>)
 800cb78:	4630      	mov	r0, r6
 800cb7a:	f7fe fcce 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800cb7e:	3608      	adds	r6, #8
 800cb80:	3c01      	subs	r4, #1
 800cb82:	e7f6      	b.n	800cb72 <_ZN22SimpleStringCollection8allocateEj+0x8e>
 800cb84:	f105 0208 	add.w	r2, r5, #8
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	601a      	str	r2, [r3, #0]
}
 800cb8c:	bf00      	nop
 800cb8e:	370c      	adds	r7, #12
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb94:	080229a8 	.word	0x080229a8
 800cb98:	08022a68 	.word	0x08022a68

0800cb9c <_ZN22SimpleStringCollectionD1Ev>:

SimpleStringCollection::~SimpleStringCollection()
 800cb9c:	b590      	push	{r4, r7, lr}
 800cb9e:	b083      	sub	sp, #12
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
{
    delete[] (collection_);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d01e      	beq.n	800cbea <_ZN22SimpleStringCollectionD1Ev+0x4e>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681a      	ldr	r2, [r3, #0]
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	3b04      	subs	r3, #4
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	00db      	lsls	r3, r3, #3
 800cbba:	18d4      	adds	r4, r2, r3
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	429c      	cmp	r4, r3
 800cbc2:	d004      	beq.n	800cbce <_ZN22SimpleStringCollectionD1Ev+0x32>
 800cbc4:	3c08      	subs	r4, #8
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	f7ff f85f 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800cbcc:	e7f6      	b.n	800cbbc <_ZN22SimpleStringCollectionD1Ev+0x20>
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f1a3 0208 	sub.w	r2, r3, #8
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	3b04      	subs	r3, #4
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	3301      	adds	r3, #1
 800cbe0:	00db      	lsls	r3, r3, #3
 800cbe2:	4619      	mov	r1, r3
 800cbe4:	4610      	mov	r0, r2
 800cbe6:	f7fc f91b 	bl	8008e20 <_ZdaPvj>
SimpleStringCollection::~SimpleStringCollection()
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	3304      	adds	r3, #4
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f7ff f84b 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	370c      	adds	r7, #12
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd90      	pop	{r4, r7, pc}

0800cbfe <_ZNK22SimpleStringCollection4sizeEv>:

size_t SimpleStringCollection::size() const
{
 800cbfe:	b480      	push	{r7}
 800cc00:	b083      	sub	sp, #12
 800cc02:	af00      	add	r7, sp, #0
 800cc04:	6078      	str	r0, [r7, #4]
    return size_;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	68db      	ldr	r3, [r3, #12]
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	370c      	adds	r7, #12
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc14:	4770      	bx	lr
	...

0800cc18 <_ZN22SimpleStringCollectionixEj>:

SimpleString& SimpleStringCollection::operator[](size_t index)
{
 800cc18:	b590      	push	{r4, r7, lr}
 800cc1a:	b085      	sub	sp, #20
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
 800cc20:	6039      	str	r1, [r7, #0]
    if (index >= size_) {
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	68db      	ldr	r3, [r3, #12]
 800cc26:	683a      	ldr	r2, [r7, #0]
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d315      	bcc.n	800cc58 <_ZN22SimpleStringCollectionixEj+0x40>
        empty_ = "";
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	1d1c      	adds	r4, r3, #4
 800cc30:	f107 0308 	add.w	r3, r7, #8
 800cc34:	490d      	ldr	r1, [pc, #52]	; (800cc6c <_ZN22SimpleStringCollectionixEj+0x54>)
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7fe fc6f 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800cc3c:	f107 0308 	add.w	r3, r7, #8
 800cc40:	4619      	mov	r1, r3
 800cc42:	4620      	mov	r0, r4
 800cc44:	f7fe fcd5 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 800cc48:	f107 0308 	add.w	r3, r7, #8
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f7ff f81c 	bl	800bc8a <_ZN12SimpleStringD1Ev>
        return empty_;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	3304      	adds	r3, #4
 800cc56:	e004      	b.n	800cc62 <_ZN22SimpleStringCollectionixEj+0x4a>
    }

    return collection_[index];
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681a      	ldr	r2, [r3, #0]
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	00db      	lsls	r3, r3, #3
 800cc60:	4413      	add	r3, r2
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3714      	adds	r7, #20
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd90      	pop	{r4, r7, pc}
 800cc6a:	bf00      	nop
 800cc6c:	08022a68 	.word	0x08022a68

0800cc70 <_ZN18TeamCityTestOutputC1Ev>:
#include "CppUTest/TestHarness.h"
#include "CppUTest/TeamCityTestOutput.h"

TeamCityTestOutput::TeamCityTestOutput() : currtest_(NULLPTR), currGroup_()
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b082      	sub	sp, #8
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f7fa fb88 	bl	8007390 <_ZN17ConsoleTestOutputC1Ev>
 800cc80:	4a08      	ldr	r2, [pc, #32]	; (800cca4 <_ZN18TeamCityTestOutputC1Ev+0x34>)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	601a      	str	r2, [r3, #0]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	611a      	str	r2, [r3, #16]
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	3314      	adds	r3, #20
 800cc90:	4905      	ldr	r1, [pc, #20]	; (800cca8 <_ZN18TeamCityTestOutputC1Ev+0x38>)
 800cc92:	4618      	mov	r0, r3
 800cc94:	f7fe fc41 	bl	800b51a <_ZN12SimpleStringC1EPKc>
{
}
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3708      	adds	r7, #8
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop
 800cca4:	08026288 	.word	0x08026288
 800cca8:	08022b68 	.word	0x08022b68

0800ccac <_ZN18TeamCityTestOutputD1Ev>:

TeamCityTestOutput::~TeamCityTestOutput()
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b082      	sub	sp, #8
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	4a08      	ldr	r2, [pc, #32]	; (800ccd8 <_ZN18TeamCityTestOutputD1Ev+0x2c>)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	601a      	str	r2, [r3, #0]
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	3314      	adds	r3, #20
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	f7fe ffe3 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f7fa fb74 	bl	80073b4 <_ZN17ConsoleTestOutputD1Ev>
{
}
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3708      	adds	r7, #8
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	08026288 	.word	0x08026288

0800ccdc <_ZN18TeamCityTestOutputD0Ev>:
TeamCityTestOutput::~TeamCityTestOutput()
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
}
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f7ff ffe1 	bl	800ccac <_ZN18TeamCityTestOutputD1Ev>
 800ccea:	211c      	movs	r1, #28
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f7fc f865 	bl	8008dbc <_ZdlPvj>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3708      	adds	r7, #8
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}

0800ccfc <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b086      	sub	sp, #24
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	6039      	str	r1, [r7, #0]
    print("##teamcity[testStarted name='");
 800cd06:	687a      	ldr	r2, [r7, #4]
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	332c      	adds	r3, #44	; 0x2c
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	492b      	ldr	r1, [pc, #172]	; (800cdc0 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc4>)
 800cd12:	4610      	mov	r0, r2
 800cd14:	4798      	blx	r3
    printEscaped(test.getName().asCharString());
 800cd16:	f107 0308 	add.w	r3, r7, #8
 800cd1a:	6839      	ldr	r1, [r7, #0]
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f004 fdf7 	bl	8011910 <_ZNK10UtestShell7getNameEv>
 800cd22:	f107 0308 	add.w	r3, r7, #8
 800cd26:	4618      	mov	r0, r3
 800cd28:	f7fe ff82 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	4619      	mov	r1, r3
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f000 f919 	bl	800cf68 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800cd36:	f107 0308 	add.w	r3, r7, #8
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f7fe ffa5 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    print("']\n");
 800cd40:	687a      	ldr	r2, [r7, #4]
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	332c      	adds	r3, #44	; 0x2c
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	491e      	ldr	r1, [pc, #120]	; (800cdc4 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800cd4c:	4610      	mov	r0, r2
 800cd4e:	4798      	blx	r3
    if (!test.willRun()) {
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	3318      	adds	r3, #24
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	6838      	ldr	r0, [r7, #0]
 800cd5a:	4798      	blx	r3
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	f083 0301 	eor.w	r3, r3, #1
 800cd62:	b2db      	uxtb	r3, r3
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d024      	beq.n	800cdb2 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xb6>
        print("##teamcity[testIgnored name='");
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	332c      	adds	r3, #44	; 0x2c
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	4915      	ldr	r1, [pc, #84]	; (800cdc8 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xcc>)
 800cd74:	4610      	mov	r0, r2
 800cd76:	4798      	blx	r3
        printEscaped(test.getName().asCharString());
 800cd78:	f107 0310 	add.w	r3, r7, #16
 800cd7c:	6839      	ldr	r1, [r7, #0]
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f004 fdc6 	bl	8011910 <_ZNK10UtestShell7getNameEv>
 800cd84:	f107 0310 	add.w	r3, r7, #16
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f7fe ff51 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	4619      	mov	r1, r3
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f000 f8e8 	bl	800cf68 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800cd98:	f107 0310 	add.w	r3, r7, #16
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f7fe ff74 	bl	800bc8a <_ZN12SimpleStringD1Ev>
        print("']\n");
 800cda2:	687a      	ldr	r2, [r7, #4]
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	332c      	adds	r3, #44	; 0x2c
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	4905      	ldr	r1, [pc, #20]	; (800cdc4 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800cdae:	4610      	mov	r0, r2
 800cdb0:	4798      	blx	r3
    }
    currtest_ = &test;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	683a      	ldr	r2, [r7, #0]
 800cdb6:	611a      	str	r2, [r3, #16]
}
 800cdb8:	bf00      	nop
 800cdba:	3718      	adds	r7, #24
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}
 800cdc0:	08022b6c 	.word	0x08022b6c
 800cdc4:	08022b8c 	.word	0x08022b8c
 800cdc8:	08022b90 	.word	0x08022b90

0800cdcc <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800cdcc:	b5b0      	push	{r4, r5, r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
    if (!currtest_)
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	691b      	ldr	r3, [r3, #16]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d03b      	beq.n	800ce56 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8a>
        return;

    print("##teamcity[testFinished name='");
 800cdde:	687a      	ldr	r2, [r7, #4]
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	332c      	adds	r3, #44	; 0x2c
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	491d      	ldr	r1, [pc, #116]	; (800ce60 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x94>)
 800cdea:	4610      	mov	r0, r2
 800cdec:	4798      	blx	r3
    printEscaped(currtest_->getName().asCharString());
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	691a      	ldr	r2, [r3, #16]
 800cdf2:	f107 0308 	add.w	r3, r7, #8
 800cdf6:	4611      	mov	r1, r2
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f004 fd89 	bl	8011910 <_ZNK10UtestShell7getNameEv>
 800cdfe:	f107 0308 	add.w	r3, r7, #8
 800ce02:	4618      	mov	r0, r3
 800ce04:	f7fe ff14 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f000 f8ab 	bl	800cf68 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800ce12:	f107 0308 	add.w	r3, r7, #8
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7fe ff37 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    print("' duration='");
 800ce1c:	687a      	ldr	r2, [r7, #4]
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	332c      	adds	r3, #44	; 0x2c
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	490f      	ldr	r1, [pc, #60]	; (800ce64 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x98>)
 800ce28:	4610      	mov	r0, r2
 800ce2a:	4798      	blx	r3
    print(res.getCurrentTestTotalExecutionTime());
 800ce2c:	687d      	ldr	r5, [r7, #4]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	3334      	adds	r3, #52	; 0x34
 800ce34:	681c      	ldr	r4, [r3, #0]
 800ce36:	6838      	ldr	r0, [r7, #0]
 800ce38:	f004 fa0a 	bl	8011250 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	4619      	mov	r1, r3
 800ce40:	4628      	mov	r0, r5
 800ce42:	47a0      	blx	r4
    print("']\n");
 800ce44:	687a      	ldr	r2, [r7, #4]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	332c      	adds	r3, #44	; 0x2c
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	4906      	ldr	r1, [pc, #24]	; (800ce68 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x9c>)
 800ce50:	4610      	mov	r0, r2
 800ce52:	4798      	blx	r3
 800ce54:	e000      	b.n	800ce58 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8c>
        return;
 800ce56:	bf00      	nop
}
 800ce58:	3710      	adds	r7, #16
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bdb0      	pop	{r4, r5, r7, pc}
 800ce5e:	bf00      	nop
 800ce60:	08022bb0 	.word	0x08022bb0
 800ce64:	08022bd0 	.word	0x08022bd0
 800ce68:	08022b8c 	.word	0x08022b8c

0800ce6c <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800ce6c:	b590      	push	{r4, r7, lr}
 800ce6e:	b085      	sub	sp, #20
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
 800ce74:	6039      	str	r1, [r7, #0]
    currGroup_ = test.getGroup();
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f103 0414 	add.w	r4, r3, #20
 800ce7c:	f107 0308 	add.w	r3, r7, #8
 800ce80:	6839      	ldr	r1, [r7, #0]
 800ce82:	4618      	mov	r0, r3
 800ce84:	f004 fd53 	bl	801192e <_ZNK10UtestShell8getGroupEv>
 800ce88:	f107 0308 	add.w	r3, r7, #8
 800ce8c:	4619      	mov	r1, r3
 800ce8e:	4620      	mov	r0, r4
 800ce90:	f7fe fbaf 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 800ce94:	f107 0308 	add.w	r3, r7, #8
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f7fe fef6 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    print("##teamcity[testSuiteStarted name='");
 800ce9e:	687a      	ldr	r2, [r7, #4]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	332c      	adds	r3, #44	; 0x2c
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	490c      	ldr	r1, [pc, #48]	; (800cedc <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x70>)
 800ceaa:	4610      	mov	r0, r2
 800ceac:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	3314      	adds	r3, #20
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f7fe febc 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	4619      	mov	r1, r3
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f000 f853 	bl	800cf68 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800cec2:	687a      	ldr	r2, [r7, #4]
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	332c      	adds	r3, #44	; 0x2c
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	4904      	ldr	r1, [pc, #16]	; (800cee0 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x74>)
 800cece:	4610      	mov	r0, r2
 800ced0:	4798      	blx	r3
}
 800ced2:	bf00      	nop
 800ced4:	3714      	adds	r7, #20
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd90      	pop	{r4, r7, pc}
 800ceda:	bf00      	nop
 800cedc:	08022be0 	.word	0x08022be0
 800cee0:	08022b8c 	.word	0x08022b8c

0800cee4 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800cee4:	b590      	push	{r4, r7, lr}
 800cee6:	b085      	sub	sp, #20
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	6039      	str	r1, [r7, #0]
    if (currGroup_ == "")
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f103 0414 	add.w	r4, r3, #20
 800cef4:	f107 0308 	add.w	r3, r7, #8
 800cef8:	4918      	ldr	r1, [pc, #96]	; (800cf5c <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x78>)
 800cefa:	4618      	mov	r0, r3
 800cefc:	f7fe fb0d 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800cf00:	f107 0308 	add.w	r3, r7, #8
 800cf04:	4619      	mov	r1, r3
 800cf06:	4620      	mov	r0, r4
 800cf08:	f7fe fecb 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	461c      	mov	r4, r3
 800cf10:	f107 0308 	add.w	r3, r7, #8
 800cf14:	4618      	mov	r0, r3
 800cf16:	f7fe feb8 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800cf1a:	2c00      	cmp	r4, #0
 800cf1c:	d11a      	bne.n	800cf54 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x70>
        return;

    print("##teamcity[testSuiteFinished name='");
 800cf1e:	687a      	ldr	r2, [r7, #4]
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	332c      	adds	r3, #44	; 0x2c
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	490d      	ldr	r1, [pc, #52]	; (800cf60 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x7c>)
 800cf2a:	4610      	mov	r0, r2
 800cf2c:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	3314      	adds	r3, #20
 800cf32:	4618      	mov	r0, r3
 800cf34:	f7fe fe7c 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	4619      	mov	r1, r3
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f000 f813 	bl	800cf68 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800cf42:	687a      	ldr	r2, [r7, #4]
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	332c      	adds	r3, #44	; 0x2c
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	4905      	ldr	r1, [pc, #20]	; (800cf64 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x80>)
 800cf4e:	4610      	mov	r0, r2
 800cf50:	4798      	blx	r3
 800cf52:	e000      	b.n	800cf56 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x72>
        return;
 800cf54:	bf00      	nop
}
 800cf56:	3714      	adds	r7, #20
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd90      	pop	{r4, r7, pc}
 800cf5c:	08022b68 	.word	0x08022b68
 800cf60:	08022c04 	.word	0x08022c04
 800cf64:	08022b8c 	.word	0x08022b8c

0800cf68 <_ZN18TeamCityTestOutput12printEscapedEPKc>:

void TeamCityTestOutput::printEscaped(const char* s)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b084      	sub	sp, #16
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
 800cf70:	6039      	str	r1, [r7, #0]
    while (*s) {
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	781b      	ldrb	r3, [r3, #0]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d03f      	beq.n	800cffa <_ZN18TeamCityTestOutput12printEscapedEPKc+0x92>
        char str[3];
        if ((*s == '\'') || (*s == '|') || (*s == '[') || (*s == ']')) {
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	781b      	ldrb	r3, [r3, #0]
 800cf7e:	2b27      	cmp	r3, #39	; 0x27
 800cf80:	d00b      	beq.n	800cf9a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	781b      	ldrb	r3, [r3, #0]
 800cf86:	2b7c      	cmp	r3, #124	; 0x7c
 800cf88:	d007      	beq.n	800cf9a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	2b5b      	cmp	r3, #91	; 0x5b
 800cf90:	d003      	beq.n	800cf9a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	781b      	ldrb	r3, [r3, #0]
 800cf96:	2b5d      	cmp	r3, #93	; 0x5d
 800cf98:	d107      	bne.n	800cfaa <_ZN18TeamCityTestOutput12printEscapedEPKc+0x42>
            str[0] = '|';
 800cf9a:	237c      	movs	r3, #124	; 0x7c
 800cf9c:	733b      	strb	r3, [r7, #12]
            str[1] = *s;
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	73bb      	strb	r3, [r7, #14]
 800cfa8:	e01a      	b.n	800cfe0 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\r') {
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	781b      	ldrb	r3, [r3, #0]
 800cfae:	2b0d      	cmp	r3, #13
 800cfb0:	d106      	bne.n	800cfc0 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x58>
            str[0] = '|';
 800cfb2:	237c      	movs	r3, #124	; 0x7c
 800cfb4:	733b      	strb	r3, [r7, #12]
            str[1] = 'r';
 800cfb6:	2372      	movs	r3, #114	; 0x72
 800cfb8:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	73bb      	strb	r3, [r7, #14]
 800cfbe:	e00f      	b.n	800cfe0 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\n') {
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	781b      	ldrb	r3, [r3, #0]
 800cfc4:	2b0a      	cmp	r3, #10
 800cfc6:	d106      	bne.n	800cfd6 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x6e>
            str[0] = '|';
 800cfc8:	237c      	movs	r3, #124	; 0x7c
 800cfca:	733b      	strb	r3, [r7, #12]
            str[1] = 'n';
 800cfcc:	236e      	movs	r3, #110	; 0x6e
 800cfce:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	73bb      	strb	r3, [r7, #14]
 800cfd4:	e004      	b.n	800cfe0 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else {
            str[0] = *s;
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	781b      	ldrb	r3, [r3, #0]
 800cfda:	733b      	strb	r3, [r7, #12]
            str[1] = 0;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	737b      	strb	r3, [r7, #13]
        }
        printBuffer(str);
 800cfe0:	687a      	ldr	r2, [r7, #4]
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	3328      	adds	r3, #40	; 0x28
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f107 010c 	add.w	r1, r7, #12
 800cfee:	4610      	mov	r0, r2
 800cff0:	4798      	blx	r3
        s++;
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	3301      	adds	r3, #1
 800cff6:	603b      	str	r3, [r7, #0]
    while (*s) {
 800cff8:	e7bb      	b.n	800cf72 <_ZN18TeamCityTestOutput12printEscapedEPKc+0xa>
    }
}
 800cffa:	bf00      	nop
 800cffc:	3710      	adds	r7, #16
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}
	...

0800d004 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure>:

void TeamCityTestOutput::printFailure(const TestFailure& failure)
{
 800d004:	b5b0      	push	{r4, r5, r7, lr}
 800d006:	b08a      	sub	sp, #40	; 0x28
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
 800d00c:	6039      	str	r1, [r7, #0]
    print("##teamcity[testFailed name='");
 800d00e:	687a      	ldr	r2, [r7, #4]
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	332c      	adds	r3, #44	; 0x2c
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	4968      	ldr	r1, [pc, #416]	; (800d1bc <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1b8>)
 800d01a:	4610      	mov	r0, r2
 800d01c:	4798      	blx	r3
    printEscaped(failure.getTestNameOnly().asCharString());
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	3310      	adds	r3, #16
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	f107 0208 	add.w	r2, r7, #8
 800d02a:	6839      	ldr	r1, [r7, #0]
 800d02c:	4610      	mov	r0, r2
 800d02e:	4798      	blx	r3
 800d030:	f107 0308 	add.w	r3, r7, #8
 800d034:	4618      	mov	r0, r3
 800d036:	f7fe fdfb 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800d03a:	4603      	mov	r3, r0
 800d03c:	4619      	mov	r1, r3
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f7ff ff92 	bl	800cf68 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800d044:	f107 0308 	add.w	r3, r7, #8
 800d048:	4618      	mov	r0, r3
 800d04a:	f7fe fe1e 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    print("' message='");
 800d04e:	687a      	ldr	r2, [r7, #4]
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	332c      	adds	r3, #44	; 0x2c
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	4959      	ldr	r1, [pc, #356]	; (800d1c0 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1bc>)
 800d05a:	4610      	mov	r0, r2
 800d05c:	4798      	blx	r3
    if (failure.isOutsideTestFile() || failure.isInHelperFunction()) {
 800d05e:	6838      	ldr	r0, [r7, #0]
 800d060:	f000 fa15 	bl	800d48e <_ZNK11TestFailure17isOutsideTestFileEv>
 800d064:	4603      	mov	r3, r0
 800d066:	2b00      	cmp	r3, #0
 800d068:	d105      	bne.n	800d076 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x72>
 800d06a:	6838      	ldr	r0, [r7, #0]
 800d06c:	f000 fa21 	bl	800d4b2 <_ZNK11TestFailure18isInHelperFunctionEv>
 800d070:	4603      	mov	r3, r0
 800d072:	2b00      	cmp	r3, #0
 800d074:	d001      	beq.n	800d07a <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x76>
 800d076:	2301      	movs	r3, #1
 800d078:	e000      	b.n	800d07c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x78>
 800d07a:	2300      	movs	r3, #0
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d042      	beq.n	800d106 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x102>
        print("TEST failed (");
 800d080:	687a      	ldr	r2, [r7, #4]
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	332c      	adds	r3, #44	; 0x2c
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	494e      	ldr	r1, [pc, #312]	; (800d1c4 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c0>)
 800d08c:	4610      	mov	r0, r2
 800d08e:	4798      	blx	r3
        print(failure.getTestFileName().asCharString());
 800d090:	687d      	ldr	r5, [r7, #4]
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	332c      	adds	r3, #44	; 0x2c
 800d098:	681c      	ldr	r4, [r3, #0]
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	331c      	adds	r3, #28
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	f107 0210 	add.w	r2, r7, #16
 800d0a6:	6839      	ldr	r1, [r7, #0]
 800d0a8:	4610      	mov	r0, r2
 800d0aa:	4798      	blx	r3
 800d0ac:	f107 0310 	add.w	r3, r7, #16
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f7fe fdbd 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	4619      	mov	r1, r3
 800d0ba:	4628      	mov	r0, r5
 800d0bc:	47a0      	blx	r4
 800d0be:	f107 0310 	add.w	r3, r7, #16
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7fe fde1 	bl	800bc8a <_ZN12SimpleStringD1Ev>
        print(":");
 800d0c8:	687a      	ldr	r2, [r7, #4]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	332c      	adds	r3, #44	; 0x2c
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	493d      	ldr	r1, [pc, #244]	; (800d1c8 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800d0d4:	4610      	mov	r0, r2
 800d0d6:	4798      	blx	r3
        print(failure.getTestLineNumber());
 800d0d8:	687d      	ldr	r5, [r7, #4]
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	3334      	adds	r3, #52	; 0x34
 800d0e0:	681c      	ldr	r4, [r3, #0]
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	3320      	adds	r3, #32
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	6838      	ldr	r0, [r7, #0]
 800d0ec:	4798      	blx	r3
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	4619      	mov	r1, r3
 800d0f2:	4628      	mov	r0, r5
 800d0f4:	47a0      	blx	r4
        print("): ");
 800d0f6:	687a      	ldr	r2, [r7, #4]
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	332c      	adds	r3, #44	; 0x2c
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	4932      	ldr	r1, [pc, #200]	; (800d1cc <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c8>)
 800d102:	4610      	mov	r0, r2
 800d104:	4798      	blx	r3
    }

    printEscaped(failure.getFileName().asCharString());
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	3308      	adds	r3, #8
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f107 0218 	add.w	r2, r7, #24
 800d112:	6839      	ldr	r1, [r7, #0]
 800d114:	4610      	mov	r0, r2
 800d116:	4798      	blx	r3
 800d118:	f107 0318 	add.w	r3, r7, #24
 800d11c:	4618      	mov	r0, r3
 800d11e:	f7fe fd87 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800d122:	4603      	mov	r3, r0
 800d124:	4619      	mov	r1, r3
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f7ff ff1e 	bl	800cf68 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800d12c:	f107 0318 	add.w	r3, r7, #24
 800d130:	4618      	mov	r0, r3
 800d132:	f7fe fdaa 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    print(":");
 800d136:	687a      	ldr	r2, [r7, #4]
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	332c      	adds	r3, #44	; 0x2c
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	4921      	ldr	r1, [pc, #132]	; (800d1c8 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800d142:	4610      	mov	r0, r2
 800d144:	4798      	blx	r3
    print(failure.getFailureLineNumber());
 800d146:	687d      	ldr	r5, [r7, #4]
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	3334      	adds	r3, #52	; 0x34
 800d14e:	681c      	ldr	r4, [r3, #0]
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	3314      	adds	r3, #20
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	6838      	ldr	r0, [r7, #0]
 800d15a:	4798      	blx	r3
 800d15c:	4603      	mov	r3, r0
 800d15e:	4619      	mov	r1, r3
 800d160:	4628      	mov	r0, r5
 800d162:	47a0      	blx	r4

    print("' details='");
 800d164:	687a      	ldr	r2, [r7, #4]
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	332c      	adds	r3, #44	; 0x2c
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	4918      	ldr	r1, [pc, #96]	; (800d1d0 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1cc>)
 800d170:	4610      	mov	r0, r2
 800d172:	4798      	blx	r3
    printEscaped(failure.getMessage().asCharString());
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	3318      	adds	r3, #24
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f107 0220 	add.w	r2, r7, #32
 800d180:	6839      	ldr	r1, [r7, #0]
 800d182:	4610      	mov	r0, r2
 800d184:	4798      	blx	r3
 800d186:	f107 0320 	add.w	r3, r7, #32
 800d18a:	4618      	mov	r0, r3
 800d18c:	f7fe fd50 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800d190:	4603      	mov	r3, r0
 800d192:	4619      	mov	r1, r3
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f7ff fee7 	bl	800cf68 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800d19a:	f107 0320 	add.w	r3, r7, #32
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7fe fd73 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    print("']\n");
 800d1a4:	687a      	ldr	r2, [r7, #4]
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	332c      	adds	r3, #44	; 0x2c
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	4909      	ldr	r1, [pc, #36]	; (800d1d4 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1d0>)
 800d1b0:	4610      	mov	r0, r2
 800d1b2:	4798      	blx	r3
}
 800d1b4:	bf00      	nop
 800d1b6:	3728      	adds	r7, #40	; 0x28
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bdb0      	pop	{r4, r5, r7, pc}
 800d1bc:	08022c28 	.word	0x08022c28
 800d1c0:	08022c48 	.word	0x08022c48
 800d1c4:	08022c54 	.word	0x08022c54
 800d1c8:	08022c64 	.word	0x08022c64
 800d1cc:	08022c68 	.word	0x08022c68
 800d1d0:	08022c6c 	.word	0x08022c6c
 800d1d4:	08022b8c 	.word	0x08022b8c

0800d1d8 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>:
TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& theMessage) :
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNumber), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
{
}

TestFailure::TestFailure(UtestShell* test, const SimpleString& theMessage) :
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b084      	sub	sp, #16
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	60f8      	str	r0, [r7, #12]
 800d1e0:	60b9      	str	r1, [r7, #8]
 800d1e2:	607a      	str	r2, [r7, #4]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(test->getFile()), lineNumber_(test->getLineNumber()), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
 800d1e4:	4a1a      	ldr	r2, [pc, #104]	; (800d250 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString+0x78>)
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	601a      	str	r2, [r3, #0]
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	3314      	adds	r3, #20
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	68fa      	ldr	r2, [r7, #12]
 800d1f4:	3204      	adds	r2, #4
 800d1f6:	68b9      	ldr	r1, [r7, #8]
 800d1f8:	4610      	mov	r0, r2
 800d1fa:	4798      	blx	r3
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	330c      	adds	r3, #12
 800d200:	68b9      	ldr	r1, [r7, #8]
 800d202:	4618      	mov	r0, r3
 800d204:	f004 fb84 	bl	8011910 <_ZNK10UtestShell7getNameEv>
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	3314      	adds	r3, #20
 800d20c:	68b9      	ldr	r1, [r7, #8]
 800d20e:	4618      	mov	r0, r3
 800d210:	f004 fc4f 	bl	8011ab2 <_ZNK10UtestShell7getFileEv>
 800d214:	68b8      	ldr	r0, [r7, #8]
 800d216:	f004 fc5b 	bl	8011ad0 <_ZNK10UtestShell13getLineNumberEv>
 800d21a:	4602      	mov	r2, r0
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	61da      	str	r2, [r3, #28]
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	3320      	adds	r3, #32
 800d224:	68b9      	ldr	r1, [r7, #8]
 800d226:	4618      	mov	r0, r3
 800d228:	f004 fc43 	bl	8011ab2 <_ZNK10UtestShell7getFileEv>
 800d22c:	68b8      	ldr	r0, [r7, #8]
 800d22e:	f004 fc4f 	bl	8011ad0 <_ZNK10UtestShell13getLineNumberEv>
 800d232:	4602      	mov	r2, r0
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	629a      	str	r2, [r3, #40]	; 0x28
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	332c      	adds	r3, #44	; 0x2c
 800d23c:	6879      	ldr	r1, [r7, #4]
 800d23e:	4618      	mov	r0, r3
 800d240:	f7fe f9bf 	bl	800b5c2 <_ZN12SimpleStringC1ERKS_>
{
}
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	4618      	mov	r0, r3
 800d248:	3710      	adds	r7, #16
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}
 800d24e:	bf00      	nop
 800d250:	08026554 	.word	0x08026554

0800d254 <_ZN11TestFailureC1EP10UtestShellPKcj>:

TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNum) :
 800d254:	b580      	push	{r7, lr}
 800d256:	b084      	sub	sp, #16
 800d258:	af00      	add	r7, sp, #0
 800d25a:	60f8      	str	r0, [r7, #12]
 800d25c:	60b9      	str	r1, [r7, #8]
 800d25e:	607a      	str	r2, [r7, #4]
 800d260:	603b      	str	r3, [r7, #0]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNum), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_("no message")
 800d262:	4a19      	ldr	r2, [pc, #100]	; (800d2c8 <_ZN11TestFailureC1EP10UtestShellPKcj+0x74>)
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	601a      	str	r2, [r3, #0]
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	3314      	adds	r3, #20
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	68fa      	ldr	r2, [r7, #12]
 800d272:	3204      	adds	r2, #4
 800d274:	68b9      	ldr	r1, [r7, #8]
 800d276:	4610      	mov	r0, r2
 800d278:	4798      	blx	r3
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	330c      	adds	r3, #12
 800d27e:	68b9      	ldr	r1, [r7, #8]
 800d280:	4618      	mov	r0, r3
 800d282:	f004 fb45 	bl	8011910 <_ZNK10UtestShell7getNameEv>
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	3314      	adds	r3, #20
 800d28a:	6879      	ldr	r1, [r7, #4]
 800d28c:	4618      	mov	r0, r3
 800d28e:	f7fe f944 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	683a      	ldr	r2, [r7, #0]
 800d296:	61da      	str	r2, [r3, #28]
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	3320      	adds	r3, #32
 800d29c:	68b9      	ldr	r1, [r7, #8]
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f004 fc07 	bl	8011ab2 <_ZNK10UtestShell7getFileEv>
 800d2a4:	68b8      	ldr	r0, [r7, #8]
 800d2a6:	f004 fc13 	bl	8011ad0 <_ZNK10UtestShell13getLineNumberEv>
 800d2aa:	4602      	mov	r2, r0
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	629a      	str	r2, [r3, #40]	; 0x28
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	332c      	adds	r3, #44	; 0x2c
 800d2b4:	4905      	ldr	r1, [pc, #20]	; (800d2cc <_ZN11TestFailureC1EP10UtestShellPKcj+0x78>)
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f7fe f92f 	bl	800b51a <_ZN12SimpleStringC1EPKc>
{
}
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3710      	adds	r7, #16
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}
 800d2c6:	bf00      	nop
 800d2c8:	08026554 	.word	0x08026554
 800d2cc:	08022c78 	.word	0x08022c78

0800d2d0 <_ZN11TestFailureC1ERKS_>:

TestFailure::TestFailure(const TestFailure& f) :
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b082      	sub	sp, #8
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
 800d2d8:	6039      	str	r1, [r7, #0]
    testName_(f.testName_), testNameOnly_(f.testNameOnly_), fileName_(f.fileName_), lineNumber_(f.lineNumber_), testFileName_(f.testFileName_), testLineNumber_(f.testLineNumber_), message_(f.message_)
 800d2da:	4a1e      	ldr	r2, [pc, #120]	; (800d354 <_ZN11TestFailureC1ERKS_+0x84>)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	601a      	str	r2, [r3, #0]
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	1d1a      	adds	r2, r3, #4
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	3304      	adds	r3, #4
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	4610      	mov	r0, r2
 800d2ec:	f7fe f969 	bl	800b5c2 <_ZN12SimpleStringC1ERKS_>
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f103 020c 	add.w	r2, r3, #12
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	330c      	adds	r3, #12
 800d2fa:	4619      	mov	r1, r3
 800d2fc:	4610      	mov	r0, r2
 800d2fe:	f7fe f960 	bl	800b5c2 <_ZN12SimpleStringC1ERKS_>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f103 0214 	add.w	r2, r3, #20
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	3314      	adds	r3, #20
 800d30c:	4619      	mov	r1, r3
 800d30e:	4610      	mov	r0, r2
 800d310:	f7fe f957 	bl	800b5c2 <_ZN12SimpleStringC1ERKS_>
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	69da      	ldr	r2, [r3, #28]
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	61da      	str	r2, [r3, #28]
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f103 0220 	add.w	r2, r3, #32
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	3320      	adds	r3, #32
 800d326:	4619      	mov	r1, r3
 800d328:	4610      	mov	r0, r2
 800d32a:	f7fe f94a 	bl	800b5c2 <_ZN12SimpleStringC1ERKS_>
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	629a      	str	r2, [r3, #40]	; 0x28
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	332c      	adds	r3, #44	; 0x2c
 800d340:	4619      	mov	r1, r3
 800d342:	4610      	mov	r0, r2
 800d344:	f7fe f93d 	bl	800b5c2 <_ZN12SimpleStringC1ERKS_>
{
}
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	4618      	mov	r0, r3
 800d34c:	3708      	adds	r7, #8
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}
 800d352:	bf00      	nop
 800d354:	08026554 	.word	0x08026554

0800d358 <_ZN11TestFailureD1Ev>:


TestFailure::~TestFailure()
 800d358:	b580      	push	{r7, lr}
 800d35a:	b082      	sub	sp, #8
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	4a10      	ldr	r2, [pc, #64]	; (800d3a4 <_ZN11TestFailureD1Ev+0x4c>)
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	601a      	str	r2, [r3, #0]
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	332c      	adds	r3, #44	; 0x2c
 800d36a:	4618      	mov	r0, r3
 800d36c:	f7fe fc8d 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	3320      	adds	r3, #32
 800d374:	4618      	mov	r0, r3
 800d376:	f7fe fc88 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	3314      	adds	r3, #20
 800d37e:	4618      	mov	r0, r3
 800d380:	f7fe fc83 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	330c      	adds	r3, #12
 800d388:	4618      	mov	r0, r3
 800d38a:	f7fe fc7e 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	3304      	adds	r3, #4
 800d392:	4618      	mov	r0, r3
 800d394:	f7fe fc79 	bl	800bc8a <_ZN12SimpleStringD1Ev>
{
}
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	4618      	mov	r0, r3
 800d39c:	3708      	adds	r7, #8
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}
 800d3a2:	bf00      	nop
 800d3a4:	08026554 	.word	0x08026554

0800d3a8 <_ZN11TestFailureD0Ev>:
TestFailure::~TestFailure()
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
}
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f7ff ffd1 	bl	800d358 <_ZN11TestFailureD1Ev>
 800d3b6:	2134      	movs	r1, #52	; 0x34
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	f7fb fcff 	bl	8008dbc <_ZdlPvj>
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3708      	adds	r7, #8
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}

0800d3c8 <_ZNK11TestFailure11getFileNameEv>:

SimpleString TestFailure::getFileName() const
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b082      	sub	sp, #8
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
 800d3d0:	6039      	str	r1, [r7, #0]
    return fileName_;
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	3314      	adds	r3, #20
 800d3d6:	4619      	mov	r1, r3
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f7fe f8f2 	bl	800b5c2 <_ZN12SimpleStringC1ERKS_>
}
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	3708      	adds	r7, #8
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}

0800d3e6 <_ZNK11TestFailure15getTestFileNameEv>:

SimpleString TestFailure::getTestFileName() const
{
 800d3e6:	b580      	push	{r7, lr}
 800d3e8:	b082      	sub	sp, #8
 800d3ea:	af00      	add	r7, sp, #0
 800d3ec:	6078      	str	r0, [r7, #4]
 800d3ee:	6039      	str	r1, [r7, #0]
    return testFileName_;
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	3320      	adds	r3, #32
 800d3f4:	4619      	mov	r1, r3
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f7fe f8e3 	bl	800b5c2 <_ZN12SimpleStringC1ERKS_>
}
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	3708      	adds	r7, #8
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}

0800d404 <_ZNK11TestFailure11getTestNameEv>:

SimpleString TestFailure::getTestName() const
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b082      	sub	sp, #8
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	6039      	str	r1, [r7, #0]
    return testName_;
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	3304      	adds	r3, #4
 800d412:	4619      	mov	r1, r3
 800d414:	6878      	ldr	r0, [r7, #4]
 800d416:	f7fe f8d4 	bl	800b5c2 <_ZN12SimpleStringC1ERKS_>
}
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	3708      	adds	r7, #8
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}

0800d422 <_ZNK11TestFailure15getTestNameOnlyEv>:

SimpleString TestFailure::getTestNameOnly() const
{
 800d422:	b580      	push	{r7, lr}
 800d424:	b082      	sub	sp, #8
 800d426:	af00      	add	r7, sp, #0
 800d428:	6078      	str	r0, [r7, #4]
 800d42a:	6039      	str	r1, [r7, #0]
    return testNameOnly_;
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	330c      	adds	r3, #12
 800d430:	4619      	mov	r1, r3
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f7fe f8c5 	bl	800b5c2 <_ZN12SimpleStringC1ERKS_>
}
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	3708      	adds	r7, #8
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}

0800d440 <_ZNK11TestFailure20getFailureLineNumberEv>:

size_t TestFailure::getFailureLineNumber() const
{
 800d440:	b480      	push	{r7}
 800d442:	b083      	sub	sp, #12
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	69db      	ldr	r3, [r3, #28]
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	370c      	adds	r7, #12
 800d450:	46bd      	mov	sp, r7
 800d452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d456:	4770      	bx	lr

0800d458 <_ZNK11TestFailure17getTestLineNumberEv>:

size_t TestFailure::getTestLineNumber() const
{
 800d458:	b480      	push	{r7}
 800d45a:	b083      	sub	sp, #12
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
    return testLineNumber_;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800d464:	4618      	mov	r0, r3
 800d466:	370c      	adds	r7, #12
 800d468:	46bd      	mov	sp, r7
 800d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46e:	4770      	bx	lr

0800d470 <_ZNK11TestFailure10getMessageEv>:

SimpleString TestFailure::getMessage() const
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b082      	sub	sp, #8
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	6039      	str	r1, [r7, #0]
    return message_;
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	332c      	adds	r3, #44	; 0x2c
 800d47e:	4619      	mov	r1, r3
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f7fe f89e 	bl	800b5c2 <_ZN12SimpleStringC1ERKS_>
}
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	3708      	adds	r7, #8
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}

0800d48e <_ZNK11TestFailure17isOutsideTestFileEv>:

bool TestFailure::isOutsideTestFile() const
{
 800d48e:	b580      	push	{r7, lr}
 800d490:	b082      	sub	sp, #8
 800d492:	af00      	add	r7, sp, #0
 800d494:	6078      	str	r0, [r7, #4]
    return testFileName_ != fileName_;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f103 0220 	add.w	r2, r3, #32
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	3314      	adds	r3, #20
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	4610      	mov	r0, r2
 800d4a4:	f7fe fc42 	bl	800bd2c <_ZneRK12SimpleStringS1_>
 800d4a8:	4603      	mov	r3, r0
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3708      	adds	r7, #8
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}

0800d4b2 <_ZNK11TestFailure18isInHelperFunctionEv>:

bool TestFailure::isInHelperFunction() const
{
 800d4b2:	b480      	push	{r7}
 800d4b4:	b083      	sub	sp, #12
 800d4b6:	af00      	add	r7, sp, #0
 800d4b8:	6078      	str	r0, [r7, #4]
    return lineNumber_ < testLineNumber_;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	69da      	ldr	r2, [r3, #28]
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	bf34      	ite	cc
 800d4c6:	2301      	movcc	r3, #1
 800d4c8:	2300      	movcs	r3, #0
 800d4ca:	b2db      	uxtb	r3, r3
}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	370c      	adds	r7, #12
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d6:	4770      	bx	lr

0800d4d8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>:

SimpleString TestFailure::createButWasString(const SimpleString& expected, const SimpleString& actual)
{
 800d4d8:	b590      	push	{r4, r7, lr}
 800d4da:	b085      	sub	sp, #20
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	60f8      	str	r0, [r7, #12]
 800d4e0:	60b9      	str	r1, [r7, #8]
 800d4e2:	607a      	str	r2, [r7, #4]
 800d4e4:	603b      	str	r3, [r7, #0]
    return StringFromFormat("expected <%s>\n\tbut was  <%s>", expected.asCharString(), actual.asCharString());
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f7fe fba2 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800d4ec:	4604      	mov	r4, r0
 800d4ee:	6838      	ldr	r0, [r7, #0]
 800d4f0:	f7fe fb9e 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	68f8      	ldr	r0, [r7, #12]
 800d4f8:	4622      	mov	r2, r4
 800d4fa:	4903      	ldr	r1, [pc, #12]	; (800d508 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_+0x30>)
 800d4fc:	f7ff f8cc 	bl	800c698 <_Z16StringFromFormatPKcz>
}
 800d500:	68f8      	ldr	r0, [r7, #12]
 800d502:	3714      	adds	r7, #20
 800d504:	46bd      	mov	sp, r7
 800d506:	bd90      	pop	{r4, r7, pc}
 800d508:	08022c84 	.word	0x08022c84

0800d50c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>:

SimpleString TestFailure::createDifferenceAtPosString(const SimpleString& actual, size_t offset, size_t reportedPosition)
{
 800d50c:	b590      	push	{r4, r7, lr}
 800d50e:	b097      	sub	sp, #92	; 0x5c
 800d510:	af00      	add	r7, sp, #0
 800d512:	60f8      	str	r0, [r7, #12]
 800d514:	60b9      	str	r1, [r7, #8]
 800d516:	607a      	str	r2, [r7, #4]
 800d518:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800d51a:	494c      	ldr	r1, [pc, #304]	; (800d64c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x140>)
 800d51c:	68f8      	ldr	r0, [r7, #12]
 800d51e:	f7fd fffc 	bl	800b51a <_ZN12SimpleStringC1EPKc>
    const size_t extraCharactersWindow = 20;
 800d522:	2314      	movs	r3, #20
 800d524:	657b      	str	r3, [r7, #84]	; 0x54
    const size_t halfOfExtraCharactersWindow = extraCharactersWindow / 2;
 800d526:	230a      	movs	r3, #10
 800d528:	653b      	str	r3, [r7, #80]	; 0x50

    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800d52a:	f107 0320 	add.w	r3, r7, #32
 800d52e:	220a      	movs	r2, #10
 800d530:	4947      	ldr	r1, [pc, #284]	; (800d650 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800d532:	4618      	mov	r0, r3
 800d534:	f7fe f80c 	bl	800b550 <_ZN12SimpleStringC1EPKcj>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800d538:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d53c:	f107 0120 	add.w	r1, r7, #32
 800d540:	687a      	ldr	r2, [r7, #4]
 800d542:	4618      	mov	r0, r3
 800d544:	f7fe fc03 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 800d548:	f107 0318 	add.w	r3, r7, #24
 800d54c:	f107 0220 	add.w	r2, r7, #32
 800d550:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d554:	4618      	mov	r0, r3
 800d556:	f7fe fbfa 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 800d55a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d55e:	4618      	mov	r0, r3
 800d560:	f7fe fb93 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800d564:	f107 0310 	add.w	r3, r7, #16
 800d568:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d56a:	493a      	ldr	r1, [pc, #232]	; (800d654 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x148>)
 800d56c:	4618      	mov	r0, r3
 800d56e:	f7ff f893 	bl	800c698 <_Z16StringFromFormatPKcz>

    result += "\n";
 800d572:	4939      	ldr	r1, [pc, #228]	; (800d658 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x14c>)
 800d574:	68f8      	ldr	r0, [r7, #12]
 800d576:	f7fe fc17 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    result += StringFromFormat("\t%s%s>\n", differentString.asCharString(), actualString.subString(offset, extraCharactersWindow).asCharString());
 800d57a:	f107 0310 	add.w	r3, r7, #16
 800d57e:	4618      	mov	r0, r3
 800d580:	f7fe fb56 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800d584:	4604      	mov	r4, r0
 800d586:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800d58a:	f107 0118 	add.w	r1, r7, #24
 800d58e:	2314      	movs	r3, #20
 800d590:	683a      	ldr	r2, [r7, #0]
 800d592:	f7fe fc83 	bl	800be9c <_ZNK12SimpleString9subStringEjj>
 800d596:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d59a:	4618      	mov	r0, r3
 800d59c:	f7fe fb48 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800d5a6:	4622      	mov	r2, r4
 800d5a8:	492c      	ldr	r1, [pc, #176]	; (800d65c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x150>)
 800d5aa:	f7ff f875 	bl	800c698 <_Z16StringFromFormatPKcz>
 800d5ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d5b2:	4619      	mov	r1, r3
 800d5b4:	68f8      	ldr	r0, [r7, #12]
 800d5b6:	f7fe fbe5 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 800d5ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f7fe fb63 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800d5c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	f7fe fb5e 	bl	800bc8a <_ZN12SimpleStringD1Ev>


    result += StringFromFormat("\t%s^", SimpleString(" ", (differentString.size() + halfOfExtraCharactersWindow)).asCharString());
 800d5ce:	f107 0310 	add.w	r3, r7, #16
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f7fe fb38 	bl	800bc48 <_ZNK12SimpleString4sizeEv>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	f103 020a 	add.w	r2, r3, #10
 800d5de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d5e2:	491b      	ldr	r1, [pc, #108]	; (800d650 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f7fd ffb3 	bl	800b550 <_ZN12SimpleStringC1EPKcj>
 800d5ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f7fe fb1e 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800d5f4:	4602      	mov	r2, r0
 800d5f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d5fa:	4919      	ldr	r1, [pc, #100]	; (800d660 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x154>)
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f7ff f84b 	bl	800c698 <_Z16StringFromFormatPKcz>
 800d602:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d606:	4619      	mov	r1, r3
 800d608:	68f8      	ldr	r0, [r7, #12]
 800d60a:	f7fe fbbb 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 800d60e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d612:	4618      	mov	r0, r3
 800d614:	f7fe fb39 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800d618:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d61c:	4618      	mov	r0, r3
 800d61e:	f7fe fb34 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    return result;
 800d622:	bf00      	nop
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800d624:	f107 0310 	add.w	r3, r7, #16
 800d628:	4618      	mov	r0, r3
 800d62a:	f7fe fb2e 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800d62e:	f107 0318 	add.w	r3, r7, #24
 800d632:	4618      	mov	r0, r3
 800d634:	f7fe fb29 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800d638:	f107 0320 	add.w	r3, r7, #32
 800d63c:	4618      	mov	r0, r3
 800d63e:	f7fe fb24 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    return result;
 800d642:	bf00      	nop
}
 800d644:	68f8      	ldr	r0, [r7, #12]
 800d646:	375c      	adds	r7, #92	; 0x5c
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd90      	pop	{r4, r7, pc}
 800d64c:	08022ca4 	.word	0x08022ca4
 800d650:	08022ca8 	.word	0x08022ca8
 800d654:	08022cac 	.word	0x08022cac
 800d658:	08022cd4 	.word	0x08022cd4
 800d65c:	08022cd8 	.word	0x08022cd8
 800d660:	08022ce0 	.word	0x08022ce0

0800d664 <_ZN11TestFailure14createUserTextERK12SimpleString>:

SimpleString TestFailure::createUserText(const SimpleString& text)
{
 800d664:	b590      	push	{r4, r7, lr}
 800d666:	b087      	sub	sp, #28
 800d668:	af00      	add	r7, sp, #0
 800d66a:	60f8      	str	r0, [r7, #12]
 800d66c:	60b9      	str	r1, [r7, #8]
 800d66e:	607a      	str	r2, [r7, #4]
    SimpleString userMessage = "";
 800d670:	491a      	ldr	r1, [pc, #104]	; (800d6dc <_ZN11TestFailure14createUserTextERK12SimpleString+0x78>)
 800d672:	68f8      	ldr	r0, [r7, #12]
 800d674:	f7fd ff51 	bl	800b51a <_ZN12SimpleStringC1EPKc>
    if (!text.isEmpty())
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f7fe faf5 	bl	800bc68 <_ZNK12SimpleString7isEmptyEv>
 800d67e:	4603      	mov	r3, r0
 800d680:	f083 0301 	eor.w	r3, r3, #1
 800d684:	b2db      	uxtb	r3, r3
 800d686:	2b00      	cmp	r3, #0
 800d688:	d022      	beq.n	800d6d0 <_ZN11TestFailure14createUserTextERK12SimpleString+0x6c>
    {
        //This is a kludge to turn off "Message: " for this case.
        //I don't think "Message: " adds anything, as you get to see the
        //message. I propose we remove "Message: " lead in
        if (!text.startsWith("LONGS_EQUAL"))
 800d68a:	f107 0310 	add.w	r3, r7, #16
 800d68e:	4914      	ldr	r1, [pc, #80]	; (800d6e0 <_ZN11TestFailure14createUserTextERK12SimpleString+0x7c>)
 800d690:	4618      	mov	r0, r3
 800d692:	f7fd ff42 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800d696:	f107 0310 	add.w	r3, r7, #16
 800d69a:	4619      	mov	r1, r3
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f7fe f800 	bl	800b6a2 <_ZNK12SimpleString10startsWithERKS_>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	f083 0301 	eor.w	r3, r3, #1
 800d6a8:	b2dc      	uxtb	r4, r3
 800d6aa:	f107 0310 	add.w	r3, r7, #16
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7fe faeb 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800d6b4:	2c00      	cmp	r4, #0
 800d6b6:	d003      	beq.n	800d6c0 <_ZN11TestFailure14createUserTextERK12SimpleString+0x5c>
            userMessage += "Message: ";
 800d6b8:	490a      	ldr	r1, [pc, #40]	; (800d6e4 <_ZN11TestFailure14createUserTextERK12SimpleString+0x80>)
 800d6ba:	68f8      	ldr	r0, [r7, #12]
 800d6bc:	f7fe fb74 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
        userMessage += text;
 800d6c0:	6879      	ldr	r1, [r7, #4]
 800d6c2:	68f8      	ldr	r0, [r7, #12]
 800d6c4:	f7fe fb5e 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
        userMessage += "\n\t";
 800d6c8:	4907      	ldr	r1, [pc, #28]	; (800d6e8 <_ZN11TestFailure14createUserTextERK12SimpleString+0x84>)
 800d6ca:	68f8      	ldr	r0, [r7, #12]
 800d6cc:	f7fe fb6c 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    }
    return userMessage;
 800d6d0:	bf00      	nop
}
 800d6d2:	68f8      	ldr	r0, [r7, #12]
 800d6d4:	371c      	adds	r7, #28
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd90      	pop	{r4, r7, pc}
 800d6da:	bf00      	nop
 800d6dc:	08022ca4 	.word	0x08022ca4
 800d6e0:	08022ce8 	.word	0x08022ce8
 800d6e4:	08022cf4 	.word	0x08022cf4
 800d6e8:	08022d00 	.word	0x08022d00

0800d6ec <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:
    message_ = createUserText(text);

    message_ += createButWasString(StringFromOrNull(expected), StringFromOrNull(actual));
}

EqualsFailure::EqualsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800d6ec:	b590      	push	{r4, r7, lr}
 800d6ee:	b089      	sub	sp, #36	; 0x24
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	60f8      	str	r0, [r7, #12]
 800d6f4:	60b9      	str	r1, [r7, #8]
 800d6f6:	607a      	str	r2, [r7, #4]
 800d6f8:	603b      	str	r3, [r7, #0]
    : TestFailure(test, fileName, lineNumber)
 800d6fa:	68f8      	ldr	r0, [r7, #12]
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	687a      	ldr	r2, [r7, #4]
 800d700:	68b9      	ldr	r1, [r7, #8]
 800d702:	f7ff fda7 	bl	800d254 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d706:	4a19      	ldr	r2, [pc, #100]	; (800d76c <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x80>)
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d712:	68f9      	ldr	r1, [r7, #12]
 800d714:	f107 0310 	add.w	r3, r7, #16
 800d718:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d71a:	4618      	mov	r0, r3
 800d71c:	f7ff ffa2 	bl	800d664 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d720:	f107 0310 	add.w	r3, r7, #16
 800d724:	4619      	mov	r1, r3
 800d726:	4620      	mov	r0, r4
 800d728:	f7fd ff63 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 800d72c:	f107 0310 	add.w	r3, r7, #16
 800d730:	4618      	mov	r0, r3
 800d732:	f7fe faaa 	bl	800bc8a <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expected, actual);
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d73c:	68f9      	ldr	r1, [r7, #12]
 800d73e:	f107 0018 	add.w	r0, r7, #24
 800d742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d746:	f7ff fec7 	bl	800d4d8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800d74a:	f107 0318 	add.w	r3, r7, #24
 800d74e:	4619      	mov	r1, r3
 800d750:	4620      	mov	r0, r4
 800d752:	f7fe fb17 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 800d756:	f107 0318 	add.w	r3, r7, #24
 800d75a:	4618      	mov	r0, r3
 800d75c:	f7fe fa95 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	4618      	mov	r0, r3
 800d764:	3724      	adds	r7, #36	; 0x24
 800d766:	46bd      	mov	sp, r7
 800d768:	bd90      	pop	{r4, r7, pc}
 800d76a:	bf00      	nop
 800d76c:	08026528 	.word	0x08026528

0800d770 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>:

DoublesEqualFailure::DoublesEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, double expected, double actual, double threshold, const SimpleString& text)
 800d770:	b5b0      	push	{r4, r5, r7, lr}
 800d772:	b094      	sub	sp, #80	; 0x50
 800d774:	af00      	add	r7, sp, #0
 800d776:	6278      	str	r0, [r7, #36]	; 0x24
 800d778:	6239      	str	r1, [r7, #32]
 800d77a:	61fa      	str	r2, [r7, #28]
 800d77c:	61bb      	str	r3, [r7, #24]
 800d77e:	ed87 0b04 	vstr	d0, [r7, #16]
 800d782:	ed87 1b02 	vstr	d1, [r7, #8]
 800d786:	ed87 2b00 	vstr	d2, [r7]
: TestFailure(test, fileName, lineNumber)
 800d78a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d78c:	69bb      	ldr	r3, [r7, #24]
 800d78e:	69fa      	ldr	r2, [r7, #28]
 800d790:	6a39      	ldr	r1, [r7, #32]
 800d792:	f7ff fd5f 	bl	800d254 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d796:	4a4a      	ldr	r2, [pc, #296]	; (800d8c0 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x150>)
 800d798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d7a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d7a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d7a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f7ff ff5a 	bl	800d664 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d7b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d7b4:	4619      	mov	r1, r3
 800d7b6:	4620      	mov	r0, r4
 800d7b8:	f7fd ff1b 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 800d7bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f7fe fa62 	bl	800bc8a <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFrom(expected, 7), StringFrom(actual, 7));
 800d7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d7cc:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800d7ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d7d2:	2107      	movs	r1, #7
 800d7d4:	ed97 0b04 	vldr	d0, [r7, #16]
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f7fe ff1b 	bl	800c614 <_Z10StringFromdi>
 800d7de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d7e2:	2107      	movs	r1, #7
 800d7e4:	ed97 0b02 	vldr	d0, [r7, #8]
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f7fe ff13 	bl	800c614 <_Z10StringFromdi>
 800d7ee:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800d7f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d7f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d7fa:	4629      	mov	r1, r5
 800d7fc:	f7ff fe6c 	bl	800d4d8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800d800:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d804:	4619      	mov	r1, r3
 800d806:	4620      	mov	r0, r4
 800d808:	f7fe fabc 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 800d80c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d810:	4618      	mov	r0, r3
 800d812:	f7fe fa3a 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800d816:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d81a:	4618      	mov	r0, r3
 800d81c:	f7fe fa35 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800d820:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d824:	4618      	mov	r0, r3
 800d826:	f7fe fa30 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    message_ += " threshold used was <";
 800d82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82c:	332c      	adds	r3, #44	; 0x2c
 800d82e:	4925      	ldr	r1, [pc, #148]	; (800d8c4 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x154>)
 800d830:	4618      	mov	r0, r3
 800d832:	f7fe fab9 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(threshold, 7);
 800d836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d838:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d83c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d840:	2107      	movs	r1, #7
 800d842:	ed97 0b00 	vldr	d0, [r7]
 800d846:	4618      	mov	r0, r3
 800d848:	f7fe fee4 	bl	800c614 <_Z10StringFromdi>
 800d84c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d850:	4619      	mov	r1, r3
 800d852:	4620      	mov	r0, r4
 800d854:	f7fe fa96 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 800d858:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d85c:	4618      	mov	r0, r3
 800d85e:	f7fe fa14 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    message_ += ">";
 800d862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d864:	332c      	adds	r3, #44	; 0x2c
 800d866:	4918      	ldr	r1, [pc, #96]	; (800d8c8 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x158>)
 800d868:	4618      	mov	r0, r3
 800d86a:	f7fe fa9d 	bl	800bda8 <_ZN12SimpleStringpLEPKc>

    if (PlatformSpecificIsNan(expected) || PlatformSpecificIsNan(actual) || PlatformSpecificIsNan(threshold))
 800d86e:	4b17      	ldr	r3, [pc, #92]	; (800d8cc <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	ed97 0b04 	vldr	d0, [r7, #16]
 800d876:	4798      	blx	r3
 800d878:	4603      	mov	r3, r0
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d10f      	bne.n	800d89e <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800d87e:	4b13      	ldr	r3, [pc, #76]	; (800d8cc <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	ed97 0b02 	vldr	d0, [r7, #8]
 800d886:	4798      	blx	r3
 800d888:	4603      	mov	r3, r0
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d107      	bne.n	800d89e <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800d88e:	4b0f      	ldr	r3, [pc, #60]	; (800d8cc <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	ed97 0b00 	vldr	d0, [r7]
 800d896:	4798      	blx	r3
 800d898:	4603      	mov	r3, r0
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d001      	beq.n	800d8a2 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x132>
 800d89e:	2301      	movs	r3, #1
 800d8a0:	e000      	b.n	800d8a4 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x134>
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d005      	beq.n	800d8b4 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x144>
        message_ += "\n\tCannot make comparisons with Nan";
 800d8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8aa:	332c      	adds	r3, #44	; 0x2c
 800d8ac:	4908      	ldr	r1, [pc, #32]	; (800d8d0 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x160>)
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f7fe fa7a 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
}
 800d8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3750      	adds	r7, #80	; 0x50
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bdb0      	pop	{r4, r5, r7, pc}
 800d8be:	bf00      	nop
 800d8c0:	080264fc 	.word	0x080264fc
 800d8c4:	08022d04 	.word	0x08022d04
 800d8c8:	08022d1c 	.word	0x08022d1c
 800d8cc:	200000e8 	.word	0x200000e8
 800d8d0:	08022d20 	.word	0x08022d20

0800d8d4 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckEqualFailure::CheckEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800d8d4:	b590      	push	{r4, r7, lr}
 800d8d6:	b093      	sub	sp, #76	; 0x4c
 800d8d8:	af02      	add	r7, sp, #8
 800d8da:	60f8      	str	r0, [r7, #12]
 800d8dc:	60b9      	str	r1, [r7, #8]
 800d8de:	607a      	str	r2, [r7, #4]
 800d8e0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800d8e2:	68f8      	ldr	r0, [r7, #12]
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	687a      	ldr	r2, [r7, #4]
 800d8e8:	68b9      	ldr	r1, [r7, #8]
 800d8ea:	f7ff fcb3 	bl	800d254 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d8ee:	4a4f      	ldr	r2, [pc, #316]	; (800da2c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x158>)
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d8fa:	68f9      	ldr	r1, [r7, #12]
 800d8fc:	f107 0320 	add.w	r3, r7, #32
 800d900:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d902:	4618      	mov	r0, r3
 800d904:	f7ff feae 	bl	800d664 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d908:	f107 0320 	add.w	r3, r7, #32
 800d90c:	4619      	mov	r1, r3
 800d90e:	4620      	mov	r0, r4
 800d910:	f7fd fe6f 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 800d914:	f107 0320 	add.w	r3, r7, #32
 800d918:	4618      	mov	r0, r3
 800d91a:	f7fe f9b6 	bl	800bc8a <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800d91e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d920:	f7fe f986 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800d924:	4602      	mov	r2, r0
 800d926:	f107 0318 	add.w	r3, r7, #24
 800d92a:	4611      	mov	r1, r2
 800d92c:	4618      	mov	r0, r3
 800d92e:	f7fe fc47 	bl	800c1c0 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800d932:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d934:	f7fe f97c 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800d938:	4602      	mov	r2, r0
 800d93a:	f107 0310 	add.w	r3, r7, #16
 800d93e:	4611      	mov	r1, r2
 800d940:	4618      	mov	r0, r3
 800d942:	f7fe fc3d 	bl	800c1c0 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d94c:	68f9      	ldr	r1, [r7, #12]
 800d94e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800d952:	f107 0310 	add.w	r3, r7, #16
 800d956:	f107 0218 	add.w	r2, r7, #24
 800d95a:	f7ff fdbd 	bl	800d4d8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800d95e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d962:	4619      	mov	r1, r3
 800d964:	4620      	mov	r0, r4
 800d966:	f7fe fa0d 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 800d96a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d96e:	4618      	mov	r0, r3
 800d970:	f7fe f98b 	bl	800bc8a <_ZN12SimpleStringD1Ev>

    size_t failStart;
    for (failStart = 0; actual.at(failStart) == expected.at(failStart); failStart++)
 800d974:	2300      	movs	r3, #0
 800d976:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d978:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d97a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d97c:	f7fe fae9 	bl	800bf52 <_ZNK12SimpleString2atEj>
 800d980:	4603      	mov	r3, r0
 800d982:	461c      	mov	r4, r3
 800d984:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d986:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d988:	f7fe fae3 	bl	800bf52 <_ZNK12SimpleString2atEj>
 800d98c:	4603      	mov	r3, r0
 800d98e:	429c      	cmp	r4, r3
 800d990:	bf0c      	ite	eq
 800d992:	2301      	moveq	r3, #1
 800d994:	2300      	movne	r3, #0
 800d996:	b2db      	uxtb	r3, r3
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d003      	beq.n	800d9a4 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd0>
 800d99c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d99e:	3301      	adds	r3, #1
 800d9a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d9a2:	e7e9      	b.n	800d978 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xa4>
        ;
    size_t failStartPrintable;
    for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	63bb      	str	r3, [r7, #56]	; 0x38
 800d9a8:	f107 0310 	add.w	r3, r7, #16
 800d9ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f7fe facf 	bl	800bf52 <_ZNK12SimpleString2atEj>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	461c      	mov	r4, r3
 800d9b8:	f107 0318 	add.w	r3, r7, #24
 800d9bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f7fe fac7 	bl	800bf52 <_ZNK12SimpleString2atEj>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	429c      	cmp	r4, r3
 800d9c8:	bf0c      	ite	eq
 800d9ca:	2301      	moveq	r3, #1
 800d9cc:	2300      	movne	r3, #0
 800d9ce:	b2db      	uxtb	r3, r3
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d003      	beq.n	800d9dc <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x108>
 800d9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9d6:	3301      	adds	r3, #1
 800d9d8:	63bb      	str	r3, [r7, #56]	; 0x38
 800d9da:	e7e5      	b.n	800d9a8 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd4>
        ;
    message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d9e2:	68f9      	ldr	r1, [r7, #12]
 800d9e4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800d9e8:	f107 0210 	add.w	r2, r7, #16
 800d9ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9ee:	9300      	str	r3, [sp, #0]
 800d9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9f2:	f7ff fd8b 	bl	800d50c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800d9f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d9fa:	4619      	mov	r1, r3
 800d9fc:	4620      	mov	r0, r4
 800d9fe:	f7fe f9c1 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 800da02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800da06:	4618      	mov	r0, r3
 800da08:	f7fe f93f 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800da0c:	f107 0310 	add.w	r3, r7, #16
 800da10:	4618      	mov	r0, r3
 800da12:	f7fe f93a 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800da16:	f107 0318 	add.w	r3, r7, #24
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7fe f935 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	4618      	mov	r0, r3
 800da24:	3744      	adds	r7, #68	; 0x44
 800da26:	46bd      	mov	sp, r7
 800da28:	bd90      	pop	{r4, r7, pc}
 800da2a:	bf00      	nop
 800da2c:	080264d0 	.word	0x080264d0

0800da30 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ComparisonFailure::ComparisonFailure(UtestShell *test, const char *fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString &comparisonString, const SimpleString &text)
 800da30:	b590      	push	{r4, r7, lr}
 800da32:	b087      	sub	sp, #28
 800da34:	af00      	add	r7, sp, #0
 800da36:	60f8      	str	r0, [r7, #12]
 800da38:	60b9      	str	r1, [r7, #8]
 800da3a:	607a      	str	r2, [r7, #4]
 800da3c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800da3e:	68f8      	ldr	r0, [r7, #12]
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	687a      	ldr	r2, [r7, #4]
 800da44:	68b9      	ldr	r1, [r7, #8]
 800da46:	f7ff fc05 	bl	800d254 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800da4a:	4a1a      	ldr	r2, [pc, #104]	; (800dab4 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800da56:	68f9      	ldr	r1, [r7, #12]
 800da58:	f107 0310 	add.w	r3, r7, #16
 800da5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da5e:	4618      	mov	r0, r3
 800da60:	f7ff fe00 	bl	800d664 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800da64:	f107 0310 	add.w	r3, r7, #16
 800da68:	4619      	mov	r1, r3
 800da6a:	4620      	mov	r0, r4
 800da6c:	f7fd fdc1 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 800da70:	f107 0310 	add.w	r3, r7, #16
 800da74:	4618      	mov	r0, r3
 800da76:	f7fe f908 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    message_ += checkString;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	332c      	adds	r3, #44	; 0x2c
 800da7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800da80:	4618      	mov	r0, r3
 800da82:	f7fe f97f 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	332c      	adds	r3, #44	; 0x2c
 800da8a:	490b      	ldr	r1, [pc, #44]	; (800dab8 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800da8c:	4618      	mov	r0, r3
 800da8e:	f7fe f98b 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    message_ += comparisonString;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	332c      	adds	r3, #44	; 0x2c
 800da96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da98:	4618      	mov	r0, r3
 800da9a:	f7fe f973 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	332c      	adds	r3, #44	; 0x2c
 800daa2:	4906      	ldr	r1, [pc, #24]	; (800dabc <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800daa4:	4618      	mov	r0, r3
 800daa6:	f7fe f97f 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
}
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	4618      	mov	r0, r3
 800daae:	371c      	adds	r7, #28
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd90      	pop	{r4, r7, pc}
 800dab4:	080264a4 	.word	0x080264a4
 800dab8:	08022d44 	.word	0x08022d44
 800dabc:	08022d48 	.word	0x08022d48

0800dac0 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ContainsFailure::ContainsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800dac0:	b5b0      	push	{r4, r5, r7, lr}
 800dac2:	b088      	sub	sp, #32
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	60f8      	str	r0, [r7, #12]
 800dac8:	60b9      	str	r1, [r7, #8]
 800daca:	607a      	str	r2, [r7, #4]
 800dacc:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800dace:	68f8      	ldr	r0, [r7, #12]
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	687a      	ldr	r2, [r7, #4]
 800dad4:	68b9      	ldr	r1, [r7, #8]
 800dad6:	f7ff fbbd 	bl	800d254 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800dada:	4a1c      	ldr	r2, [pc, #112]	; (800db4c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800dae6:	68f9      	ldr	r1, [r7, #12]
 800dae8:	f107 0310 	add.w	r3, r7, #16
 800daec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800daee:	4618      	mov	r0, r3
 800daf0:	f7ff fdb8 	bl	800d664 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800daf4:	f107 0310 	add.w	r3, r7, #16
 800daf8:	4619      	mov	r1, r3
 800dafa:	4620      	mov	r0, r4
 800dafc:	f7fd fd79 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 800db00:	f107 0310 	add.w	r3, r7, #16
 800db04:	4618      	mov	r0, r3
 800db06:	f7fe f8c0 	bl	800bc8a <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("actual <%s>\n\tdid not contain  <%s>", actual.asCharString(), expected.asCharString());
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800db10:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800db12:	f7fe f88d 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800db16:	4605      	mov	r5, r0
 800db18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db1a:	f7fe f889 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800db1e:	4603      	mov	r3, r0
 800db20:	f107 0018 	add.w	r0, r7, #24
 800db24:	462a      	mov	r2, r5
 800db26:	490a      	ldr	r1, [pc, #40]	; (800db50 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x90>)
 800db28:	f7fe fdb6 	bl	800c698 <_Z16StringFromFormatPKcz>
 800db2c:	f107 0318 	add.w	r3, r7, #24
 800db30:	4619      	mov	r1, r3
 800db32:	4620      	mov	r0, r4
 800db34:	f7fe f926 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 800db38:	f107 0318 	add.w	r3, r7, #24
 800db3c:	4618      	mov	r0, r3
 800db3e:	f7fe f8a4 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	4618      	mov	r0, r3
 800db46:	3720      	adds	r7, #32
 800db48:	46bd      	mov	sp, r7
 800db4a:	bdb0      	pop	{r4, r5, r7, pc}
 800db4c:	08026478 	.word	0x08026478
 800db50:	08022d54 	.word	0x08022d54

0800db54 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckFailure::CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& text)
 800db54:	b590      	push	{r4, r7, lr}
 800db56:	b087      	sub	sp, #28
 800db58:	af00      	add	r7, sp, #0
 800db5a:	60f8      	str	r0, [r7, #12]
 800db5c:	60b9      	str	r1, [r7, #8]
 800db5e:	607a      	str	r2, [r7, #4]
 800db60:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800db62:	68f8      	ldr	r0, [r7, #12]
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	687a      	ldr	r2, [r7, #4]
 800db68:	68b9      	ldr	r1, [r7, #8]
 800db6a:	f7ff fb73 	bl	800d254 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800db6e:	4a1a      	ldr	r2, [pc, #104]	; (800dbd8 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800db7a:	68f9      	ldr	r1, [r7, #12]
 800db7c:	f107 0310 	add.w	r3, r7, #16
 800db80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db82:	4618      	mov	r0, r3
 800db84:	f7ff fd6e 	bl	800d664 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800db88:	f107 0310 	add.w	r3, r7, #16
 800db8c:	4619      	mov	r1, r3
 800db8e:	4620      	mov	r0, r4
 800db90:	f7fd fd2f 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 800db94:	f107 0310 	add.w	r3, r7, #16
 800db98:	4618      	mov	r0, r3
 800db9a:	f7fe f876 	bl	800bc8a <_ZN12SimpleStringD1Ev>

    message_ += checkString;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	332c      	adds	r3, #44	; 0x2c
 800dba2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dba4:	4618      	mov	r0, r3
 800dba6:	f7fe f8ed 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	332c      	adds	r3, #44	; 0x2c
 800dbae:	490b      	ldr	r1, [pc, #44]	; (800dbdc <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f7fe f8f9 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    message_ += conditionString;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	332c      	adds	r3, #44	; 0x2c
 800dbba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f7fe f8e1 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	332c      	adds	r3, #44	; 0x2c
 800dbc6:	4906      	ldr	r1, [pc, #24]	; (800dbe0 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f7fe f8ed 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
}
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	371c      	adds	r7, #28
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd90      	pop	{r4, r7, pc}
 800dbd8:	0802644c 	.word	0x0802644c
 800dbdc:	08022d44 	.word	0x08022d44
 800dbe0:	08022d48 	.word	0x08022d48

0800dbe4 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>:

FailFailure::FailFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& message) : TestFailure(test, fileName, lineNumber)
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b084      	sub	sp, #16
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	60f8      	str	r0, [r7, #12]
 800dbec:	60b9      	str	r1, [r7, #8]
 800dbee:	607a      	str	r2, [r7, #4]
 800dbf0:	603b      	str	r3, [r7, #0]
 800dbf2:	68f8      	ldr	r0, [r7, #12]
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	687a      	ldr	r2, [r7, #4]
 800dbf8:	68b9      	ldr	r1, [r7, #8]
 800dbfa:	f7ff fb2b 	bl	800d254 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800dbfe:	4a07      	ldr	r2, [pc, #28]	; (800dc1c <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString+0x38>)
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	601a      	str	r2, [r3, #0]
{
    message_ = message;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	332c      	adds	r3, #44	; 0x2c
 800dc08:	69b9      	ldr	r1, [r7, #24]
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f7fd fcf1 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
}
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	4618      	mov	r0, r3
 800dc14:	3710      	adds	r7, #16
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}
 800dc1a:	bf00      	nop
 800dc1c:	08026108 	.word	0x08026108

0800dc20 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>:

LongsEqualFailure::LongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, long expected, long actual, const SimpleString& text)
 800dc20:	b590      	push	{r4, r7, lr}
 800dc22:	b09d      	sub	sp, #116	; 0x74
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	60f8      	str	r0, [r7, #12]
 800dc28:	60b9      	str	r1, [r7, #8]
 800dc2a:	607a      	str	r2, [r7, #4]
 800dc2c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800dc2e:	68f8      	ldr	r0, [r7, #12]
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	687a      	ldr	r2, [r7, #4]
 800dc34:	68b9      	ldr	r1, [r7, #8]
 800dc36:	f7ff fb0d 	bl	800d254 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800dc3a:	4a5d      	ldr	r2, [pc, #372]	; (800ddb0 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x190>)
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800dc46:	68f9      	ldr	r1, [r7, #12]
 800dc48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dc4c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800dc50:	4618      	mov	r0, r3
 800dc52:	f7ff fd07 	bl	800d664 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800dc56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dc5a:	4619      	mov	r1, r3
 800dc5c:	4620      	mov	r0, r4
 800dc5e:	f7fd fcc8 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 800dc62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dc66:	4618      	mov	r0, r3
 800dc68:	f7fe f80f 	bl	800bc8a <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800dc6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dc70:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7fe fae1 	bl	800c23c <_Z10StringFroml>
    SimpleString eDecimal = StringFrom(expected);
 800dc7a:	f107 0320 	add.w	r3, r7, #32
 800dc7e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800dc82:	4618      	mov	r0, r3
 800dc84:	f7fe fada 	bl	800c23c <_Z10StringFroml>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800dc88:	f107 0120 	add.w	r1, r7, #32
 800dc8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dc90:	2220      	movs	r2, #32
 800dc92:	4618      	mov	r0, r3
 800dc94:	f7fe f8b6 	bl	800be04 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800dc98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800dc9c:	4945      	ldr	r1, [pc, #276]	; (800ddb4 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f7fd fc3b 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800dca4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800dca8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800dcac:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	f7fe f84c 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 800dcb6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dcba:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f7fe fbd2 	bl	800c468 <_Z30BracketsFormattedHexStringFroml>
 800dcc4:	f107 0318 	add.w	r3, r7, #24
 800dcc8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800dccc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f7fe f83c 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 800dcd6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f7fd ffd5 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800dce0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800dce4:	4618      	mov	r0, r3
 800dce6:	f7fd ffd0 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800dcea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f7fd ffcb 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800dcf4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800dcf8:	492e      	ldr	r1, [pc, #184]	; (800ddb4 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f7fd fc0d 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800dd00:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800dd04:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800dd08:	f107 0120 	add.w	r1, r7, #32
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f7fe f81e 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 800dd12:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800dd16:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f7fe fba4 	bl	800c468 <_Z30BracketsFormattedHexStringFroml>
 800dd20:	f107 0310 	add.w	r3, r7, #16
 800dd24:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800dd28:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f7fe f80e 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 800dd32:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800dd36:	4618      	mov	r0, r3
 800dd38:	f7fd ffa7 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800dd3c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800dd40:	4618      	mov	r0, r3
 800dd42:	f7fd ffa2 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800dd46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f7fd ff9d 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800dd56:	68f9      	ldr	r1, [r7, #12]
 800dd58:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800dd5c:	f107 0318 	add.w	r3, r7, #24
 800dd60:	f107 0210 	add.w	r2, r7, #16
 800dd64:	f7ff fbb8 	bl	800d4d8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800dd68:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	4620      	mov	r0, r4
 800dd70:	f7fe f808 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 800dd74:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800dd78:	4618      	mov	r0, r3
 800dd7a:	f7fd ff86 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800dd7e:	f107 0310 	add.w	r3, r7, #16
 800dd82:	4618      	mov	r0, r3
 800dd84:	f7fd ff81 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800dd88:	f107 0318 	add.w	r3, r7, #24
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f7fd ff7c 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800dd92:	f107 0320 	add.w	r3, r7, #32
 800dd96:	4618      	mov	r0, r3
 800dd98:	f7fd ff77 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800dd9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dda0:	4618      	mov	r0, r3
 800dda2:	f7fd ff72 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3774      	adds	r7, #116	; 0x74
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd90      	pop	{r4, r7, pc}
 800ddb0:	08026420 	.word	0x08026420
 800ddb4:	08022ca8 	.word	0x08022ca8

0800ddb8 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>:

UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, const SimpleString& text)
 800ddb8:	b590      	push	{r4, r7, lr}
 800ddba:	b09d      	sub	sp, #116	; 0x74
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	60f8      	str	r0, [r7, #12]
 800ddc0:	60b9      	str	r1, [r7, #8]
 800ddc2:	607a      	str	r2, [r7, #4]
 800ddc4:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800ddc6:	68f8      	ldr	r0, [r7, #12]
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	687a      	ldr	r2, [r7, #4]
 800ddcc:	68b9      	ldr	r1, [r7, #8]
 800ddce:	f7ff fa41 	bl	800d254 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800ddd2:	4a5d      	ldr	r2, [pc, #372]	; (800df48 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x190>)
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ddde:	68f9      	ldr	r1, [r7, #12]
 800dde0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dde4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800dde8:	4618      	mov	r0, r3
 800ddea:	f7ff fc3b 	bl	800d664 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800ddee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ddf2:	4619      	mov	r1, r3
 800ddf4:	4620      	mov	r0, r4
 800ddf6:	f7fd fbfc 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 800ddfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ddfe:	4618      	mov	r0, r3
 800de00:	f7fd ff43 	bl	800bc8a <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800de04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800de08:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800de0c:	4618      	mov	r0, r3
 800de0e:	f7fe fc7d 	bl	800c70c <_Z10StringFromm>
    SimpleString eDecimal = StringFrom(expected);
 800de12:	f107 0320 	add.w	r3, r7, #32
 800de16:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800de1a:	4618      	mov	r0, r3
 800de1c:	f7fe fc76 	bl	800c70c <_Z10StringFromm>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800de20:	f107 0120 	add.w	r1, r7, #32
 800de24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800de28:	2220      	movs	r2, #32
 800de2a:	4618      	mov	r0, r3
 800de2c:	f7fd ffea 	bl	800be04 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800de30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800de34:	4945      	ldr	r1, [pc, #276]	; (800df4c <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800de36:	4618      	mov	r0, r3
 800de38:	f7fd fb6f 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800de3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800de40:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800de44:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800de48:	4618      	mov	r0, r3
 800de4a:	f7fd ff80 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 800de4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800de52:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800de56:	4618      	mov	r0, r3
 800de58:	f7fe fb22 	bl	800c4a0 <_Z30BracketsFormattedHexStringFromm>
 800de5c:	f107 0318 	add.w	r3, r7, #24
 800de60:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800de64:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800de68:	4618      	mov	r0, r3
 800de6a:	f7fd ff70 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 800de6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800de72:	4618      	mov	r0, r3
 800de74:	f7fd ff09 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800de78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800de7c:	4618      	mov	r0, r3
 800de7e:	f7fd ff04 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800de82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800de86:	4618      	mov	r0, r3
 800de88:	f7fd feff 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800de8c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800de90:	492e      	ldr	r1, [pc, #184]	; (800df4c <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800de92:	4618      	mov	r0, r3
 800de94:	f7fd fb41 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800de98:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800de9c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800dea0:	f107 0120 	add.w	r1, r7, #32
 800dea4:	4618      	mov	r0, r3
 800dea6:	f7fd ff52 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 800deaa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800deae:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800deb2:	4618      	mov	r0, r3
 800deb4:	f7fe faf4 	bl	800c4a0 <_Z30BracketsFormattedHexStringFromm>
 800deb8:	f107 0310 	add.w	r3, r7, #16
 800debc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800dec0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800dec4:	4618      	mov	r0, r3
 800dec6:	f7fd ff42 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 800deca:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800dece:	4618      	mov	r0, r3
 800ded0:	f7fd fedb 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800ded4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ded8:	4618      	mov	r0, r3
 800deda:	f7fd fed6 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800dede:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7fd fed1 	bl	800bc8a <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expectedReported, actualReported);
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800deee:	68f9      	ldr	r1, [r7, #12]
 800def0:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800def4:	f107 0318 	add.w	r3, r7, #24
 800def8:	f107 0210 	add.w	r2, r7, #16
 800defc:	f7ff faec 	bl	800d4d8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800df00:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800df04:	4619      	mov	r1, r3
 800df06:	4620      	mov	r0, r4
 800df08:	f7fd ff3c 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 800df0c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800df10:	4618      	mov	r0, r3
 800df12:	f7fd feba 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800df16:	f107 0310 	add.w	r3, r7, #16
 800df1a:	4618      	mov	r0, r3
 800df1c:	f7fd feb5 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800df20:	f107 0318 	add.w	r3, r7, #24
 800df24:	4618      	mov	r0, r3
 800df26:	f7fd feb0 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800df2a:	f107 0320 	add.w	r3, r7, #32
 800df2e:	4618      	mov	r0, r3
 800df30:	f7fd feab 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800df34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800df38:	4618      	mov	r0, r3
 800df3a:	f7fd fea6 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	4618      	mov	r0, r3
 800df42:	3774      	adds	r7, #116	; 0x74
 800df44:	46bd      	mov	sp, r7
 800df46:	bd90      	pop	{r4, r7, pc}
 800df48:	080263f4 	.word	0x080263f4
 800df4c:	08022ca8 	.word	0x08022ca8

0800df50 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>:
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
    message_ += createButWasString(expectedReported, actualReported);
}

SignedBytesEqualFailure::SignedBytesEqualFailure (UtestShell* test, const char* fileName, size_t lineNumber, signed char expected, signed char actual, const SimpleString& text)
 800df50:	b590      	push	{r4, r7, lr}
 800df52:	b09d      	sub	sp, #116	; 0x74
 800df54:	af00      	add	r7, sp, #0
 800df56:	60f8      	str	r0, [r7, #12]
 800df58:	60b9      	str	r1, [r7, #8]
 800df5a:	607a      	str	r2, [r7, #4]
 800df5c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800df5e:	68f8      	ldr	r0, [r7, #12]
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	687a      	ldr	r2, [r7, #4]
 800df64:	68b9      	ldr	r1, [r7, #8]
 800df66:	f7ff f975 	bl	800d254 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800df6a:	4a5f      	ldr	r2, [pc, #380]	; (800e0e8 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x198>)
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800df76:	68f9      	ldr	r1, [r7, #12]
 800df78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800df7c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800df80:	4618      	mov	r0, r3
 800df82:	f7ff fb6f 	bl	800d664 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800df86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800df8a:	4619      	mov	r1, r3
 800df8c:	4620      	mov	r0, r4
 800df8e:	f7fd fb30 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 800df92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800df96:	4618      	mov	r0, r3
 800df98:	f7fd fe77 	bl	800bc8a <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom((int)actual);
 800df9c:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800dfa0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dfa4:	4611      	mov	r1, r2
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f7fe f936 	bl	800c218 <_Z10StringFromi>
    SimpleString eDecimal = StringFrom((int)expected);
 800dfac:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800dfb0:	f107 0320 	add.w	r3, r7, #32
 800dfb4:	4611      	mov	r1, r2
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f7fe f92e 	bl	800c218 <_Z10StringFromi>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800dfbc:	f107 0120 	add.w	r1, r7, #32
 800dfc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dfc4:	2220      	movs	r2, #32
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f7fd ff1c 	bl	800be04 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800dfcc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800dfd0:	4946      	ldr	r1, [pc, #280]	; (800e0ec <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f7fd faa1 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800dfd8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800dfdc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800dfe0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f7fd feb2 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 800dfea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dfee:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800dff2:	4611      	mov	r1, r2
 800dff4:	4618      	mov	r0, r3
 800dff6:	f7fe fa6f 	bl	800c4d8 <_Z30BracketsFormattedHexStringFroma>
 800dffa:	f107 0318 	add.w	r3, r7, #24
 800dffe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e002:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e006:	4618      	mov	r0, r3
 800e008:	f7fd fea1 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 800e00c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e010:	4618      	mov	r0, r3
 800e012:	f7fd fe3a 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800e016:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e01a:	4618      	mov	r0, r3
 800e01c:	f7fd fe35 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800e020:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e024:	4618      	mov	r0, r3
 800e026:	f7fd fe30 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800e02a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e02e:	492f      	ldr	r1, [pc, #188]	; (800e0ec <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800e030:	4618      	mov	r0, r3
 800e032:	f7fd fa72 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800e036:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e03a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800e03e:	f107 0120 	add.w	r1, r7, #32
 800e042:	4618      	mov	r0, r3
 800e044:	f7fd fe83 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 800e048:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800e04c:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800e050:	4611      	mov	r1, r2
 800e052:	4618      	mov	r0, r3
 800e054:	f7fe fa40 	bl	800c4d8 <_Z30BracketsFormattedHexStringFroma>
 800e058:	f107 0310 	add.w	r3, r7, #16
 800e05c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800e060:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800e064:	4618      	mov	r0, r3
 800e066:	f7fd fe72 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 800e06a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800e06e:	4618      	mov	r0, r3
 800e070:	f7fd fe0b 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800e074:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e078:	4618      	mov	r0, r3
 800e07a:	f7fd fe06 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800e07e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e082:	4618      	mov	r0, r3
 800e084:	f7fd fe01 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e08e:	68f9      	ldr	r1, [r7, #12]
 800e090:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800e094:	f107 0318 	add.w	r3, r7, #24
 800e098:	f107 0210 	add.w	r2, r7, #16
 800e09c:	f7ff fa1c 	bl	800d4d8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800e0a0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e0a4:	4619      	mov	r1, r3
 800e0a6:	4620      	mov	r0, r4
 800e0a8:	f7fd fe6c 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 800e0ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f7fd fdea 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800e0b6:	f107 0310 	add.w	r3, r7, #16
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f7fd fde5 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800e0c0:	f107 0318 	add.w	r3, r7, #24
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f7fd fde0 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom((int)expected);
 800e0ca:	f107 0320 	add.w	r3, r7, #32
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f7fd fddb 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom((int)actual);
 800e0d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f7fd fdd6 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3774      	adds	r7, #116	; 0x74
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd90      	pop	{r4, r7, pc}
 800e0e8:	080263c8 	.word	0x080263c8
 800e0ec:	08022ca8 	.word	0x08022ca8

0800e0f0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualFailure::StringEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800e0f0:	b590      	push	{r4, r7, lr}
 800e0f2:	b093      	sub	sp, #76	; 0x4c
 800e0f4:	af02      	add	r7, sp, #8
 800e0f6:	60f8      	str	r0, [r7, #12]
 800e0f8:	60b9      	str	r1, [r7, #8]
 800e0fa:	607a      	str	r2, [r7, #4]
 800e0fc:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800e0fe:	68f8      	ldr	r0, [r7, #12]
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	687a      	ldr	r2, [r7, #4]
 800e104:	68b9      	ldr	r1, [r7, #8]
 800e106:	f7ff f8a5 	bl	800d254 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800e10a:	4a4a      	ldr	r2, [pc, #296]	; (800e234 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x144>)
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e116:	68f9      	ldr	r1, [r7, #12]
 800e118:	f107 0320 	add.w	r3, r7, #32
 800e11c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e11e:	4618      	mov	r0, r3
 800e120:	f7ff faa0 	bl	800d664 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800e124:	f107 0320 	add.w	r3, r7, #32
 800e128:	4619      	mov	r1, r3
 800e12a:	4620      	mov	r0, r4
 800e12c:	f7fd fa61 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 800e130:	f107 0320 	add.w	r3, r7, #32
 800e134:	4618      	mov	r0, r3
 800e136:	f7fd fda8 	bl	800bc8a <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800e13a:	f107 0318 	add.w	r3, r7, #24
 800e13e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e140:	4618      	mov	r0, r3
 800e142:	f7fe f83d 	bl	800c1c0 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800e146:	f107 0310 	add.w	r3, r7, #16
 800e14a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7fe f837 	bl	800c1c0 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e158:	68f9      	ldr	r1, [r7, #12]
 800e15a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800e15e:	f107 0310 	add.w	r3, r7, #16
 800e162:	f107 0218 	add.w	r2, r7, #24
 800e166:	f7ff f9b7 	bl	800d4d8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800e16a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e16e:	4619      	mov	r1, r3
 800e170:	4620      	mov	r0, r4
 800e172:	f7fd fe07 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 800e176:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e17a:	4618      	mov	r0, r3
 800e17c:	f7fd fd85 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800e180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e182:	2b00      	cmp	r3, #0
 800e184:	d046      	beq.n	800e214 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
 800e186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d043      	beq.n	800e214 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
    {
        size_t failStart;
        for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800e18c:	2300      	movs	r3, #0
 800e18e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e190:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e194:	4413      	add	r3, r2
 800e196:	781a      	ldrb	r2, [r3, #0]
 800e198:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e19a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e19c:	440b      	add	r3, r1
 800e19e:	781b      	ldrb	r3, [r3, #0]
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d103      	bne.n	800e1ac <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xbc>
 800e1a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1a6:	3301      	adds	r3, #1
 800e1a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e1aa:	e7f1      	b.n	800e190 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	63bb      	str	r3, [r7, #56]	; 0x38
 800e1b0:	f107 0310 	add.w	r3, r7, #16
 800e1b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f7fd fecb 	bl	800bf52 <_ZNK12SimpleString2atEj>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	461c      	mov	r4, r3
 800e1c0:	f107 0318 	add.w	r3, r7, #24
 800e1c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7fd fec3 	bl	800bf52 <_ZNK12SimpleString2atEj>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	429c      	cmp	r4, r3
 800e1d0:	bf0c      	ite	eq
 800e1d2:	2301      	moveq	r3, #1
 800e1d4:	2300      	movne	r3, #0
 800e1d6:	b2db      	uxtb	r3, r3
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d003      	beq.n	800e1e4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xf4>
 800e1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1de:	3301      	adds	r3, #1
 800e1e0:	63bb      	str	r3, [r7, #56]	; 0x38
 800e1e2:	e7e5      	b.n	800e1b0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xc0>
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e1ea:	68f9      	ldr	r1, [r7, #12]
 800e1ec:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800e1f0:	f107 0210 	add.w	r2, r7, #16
 800e1f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1f6:	9300      	str	r3, [sp, #0]
 800e1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1fa:	f7ff f987 	bl	800d50c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800e1fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e202:	4619      	mov	r1, r3
 800e204:	4620      	mov	r0, r4
 800e206:	f7fd fdbd 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 800e20a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e20e:	4618      	mov	r0, r3
 800e210:	f7fd fd3b 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800e214:	f107 0310 	add.w	r3, r7, #16
 800e218:	4618      	mov	r0, r3
 800e21a:	f7fd fd36 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800e21e:	f107 0318 	add.w	r3, r7, #24
 800e222:	4618      	mov	r0, r3
 800e224:	f7fd fd31 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    }
}
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	4618      	mov	r0, r3
 800e22c:	3744      	adds	r7, #68	; 0x44
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd90      	pop	{r4, r7, pc}
 800e232:	bf00      	nop
 800e234:	0802639c 	.word	0x0802639c

0800e238 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800e238:	b590      	push	{r4, r7, lr}
 800e23a:	b093      	sub	sp, #76	; 0x4c
 800e23c:	af02      	add	r7, sp, #8
 800e23e:	60f8      	str	r0, [r7, #12]
 800e240:	60b9      	str	r1, [r7, #8]
 800e242:	607a      	str	r2, [r7, #4]
 800e244:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800e246:	68f8      	ldr	r0, [r7, #12]
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	687a      	ldr	r2, [r7, #4]
 800e24c:	68b9      	ldr	r1, [r7, #8]
 800e24e:	f7ff f801 	bl	800d254 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800e252:	4a55      	ldr	r2, [pc, #340]	; (800e3a8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x170>)
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e25e:	68f9      	ldr	r1, [r7, #12]
 800e260:	f107 0320 	add.w	r3, r7, #32
 800e264:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e266:	4618      	mov	r0, r3
 800e268:	f7ff f9fc 	bl	800d664 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800e26c:	f107 0320 	add.w	r3, r7, #32
 800e270:	4619      	mov	r1, r3
 800e272:	4620      	mov	r0, r4
 800e274:	f7fd f9bd 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 800e278:	f107 0320 	add.w	r3, r7, #32
 800e27c:	4618      	mov	r0, r3
 800e27e:	f7fd fd04 	bl	800bc8a <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800e282:	f107 0318 	add.w	r3, r7, #24
 800e286:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e288:	4618      	mov	r0, r3
 800e28a:	f7fd ff99 	bl	800c1c0 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800e28e:	f107 0310 	add.w	r3, r7, #16
 800e292:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e294:	4618      	mov	r0, r3
 800e296:	f7fd ff93 	bl	800c1c0 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e2a0:	68f9      	ldr	r1, [r7, #12]
 800e2a2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800e2a6:	f107 0310 	add.w	r3, r7, #16
 800e2aa:	f107 0218 	add.w	r2, r7, #24
 800e2ae:	f7ff f913 	bl	800d4d8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800e2b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e2b6:	4619      	mov	r1, r3
 800e2b8:	4620      	mov	r0, r4
 800e2ba:	f7fd fd63 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 800e2be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f7fd fce1 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800e2c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d05c      	beq.n	800e388 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
 800e2ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d059      	beq.n	800e388 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
    {
        size_t failStart;
        for (failStart = 0; SimpleString::ToLower(actual[failStart]) == SimpleString::ToLower(expected[failStart]); failStart++)
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e2d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e2da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2dc:	4413      	add	r3, r2
 800e2de:	781b      	ldrb	r3, [r3, #0]
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f7fd f824 	bl	800b32e <_ZN12SimpleString7ToLowerEc>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	461c      	mov	r4, r3
 800e2ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e2ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2ee:	4413      	add	r3, r2
 800e2f0:	781b      	ldrb	r3, [r3, #0]
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f7fd f81b 	bl	800b32e <_ZN12SimpleString7ToLowerEc>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	429c      	cmp	r4, r3
 800e2fc:	bf0c      	ite	eq
 800e2fe:	2301      	moveq	r3, #1
 800e300:	2300      	movne	r3, #0
 800e302:	b2db      	uxtb	r3, r3
 800e304:	2b00      	cmp	r3, #0
 800e306:	d003      	beq.n	800e310 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xd8>
 800e308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e30a:	3301      	adds	r3, #1
 800e30c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e30e:	e7e3      	b.n	800e2d8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0;
 800e310:	2300      	movs	r3, #0
 800e312:	63bb      	str	r3, [r7, #56]	; 0x38
             SimpleString::ToLower(printableActual.at(failStartPrintable)) == SimpleString::ToLower(printableExpected.at(failStartPrintable));
 800e314:	f107 0310 	add.w	r3, r7, #16
 800e318:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e31a:	4618      	mov	r0, r3
 800e31c:	f7fd fe19 	bl	800bf52 <_ZNK12SimpleString2atEj>
 800e320:	4603      	mov	r3, r0
 800e322:	4618      	mov	r0, r3
 800e324:	f7fd f803 	bl	800b32e <_ZN12SimpleString7ToLowerEc>
 800e328:	4603      	mov	r3, r0
 800e32a:	461c      	mov	r4, r3
 800e32c:	f107 0318 	add.w	r3, r7, #24
 800e330:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e332:	4618      	mov	r0, r3
 800e334:	f7fd fe0d 	bl	800bf52 <_ZNK12SimpleString2atEj>
 800e338:	4603      	mov	r3, r0
 800e33a:	4618      	mov	r0, r3
 800e33c:	f7fc fff7 	bl	800b32e <_ZN12SimpleString7ToLowerEc>
 800e340:	4603      	mov	r3, r0
 800e342:	429c      	cmp	r4, r3
 800e344:	bf0c      	ite	eq
 800e346:	2301      	moveq	r3, #1
 800e348:	2300      	movne	r3, #0
 800e34a:	b2db      	uxtb	r3, r3
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d003      	beq.n	800e358 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x120>
        for (failStartPrintable = 0;
 800e350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e352:	3301      	adds	r3, #1
 800e354:	63bb      	str	r3, [r7, #56]	; 0x38
 800e356:	e7dd      	b.n	800e314 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xdc>
             failStartPrintable++)
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e35e:	68f9      	ldr	r1, [r7, #12]
 800e360:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800e364:	f107 0210 	add.w	r2, r7, #16
 800e368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e36a:	9300      	str	r3, [sp, #0]
 800e36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e36e:	f7ff f8cd 	bl	800d50c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800e372:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e376:	4619      	mov	r1, r3
 800e378:	4620      	mov	r0, r4
 800e37a:	f7fd fd03 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 800e37e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e382:	4618      	mov	r0, r3
 800e384:	f7fd fc81 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800e388:	f107 0310 	add.w	r3, r7, #16
 800e38c:	4618      	mov	r0, r3
 800e38e:	f7fd fc7c 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800e392:	f107 0318 	add.w	r3, r7, #24
 800e396:	4618      	mov	r0, r3
 800e398:	f7fd fc77 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    }
}
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	4618      	mov	r0, r3
 800e3a0:	3744      	adds	r7, #68	; 0x44
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	bd90      	pop	{r4, r7, pc}
 800e3a6:	bf00      	nop
 800e3a8:	08026370 	.word	0x08026370

0800e3ac <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>:

BinaryEqualFailure::BinaryEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const unsigned char* expected,
 800e3ac:	b5b0      	push	{r4, r5, r7, lr}
 800e3ae:	b092      	sub	sp, #72	; 0x48
 800e3b0:	af02      	add	r7, sp, #8
 800e3b2:	60f8      	str	r0, [r7, #12]
 800e3b4:	60b9      	str	r1, [r7, #8]
 800e3b6:	607a      	str	r2, [r7, #4]
 800e3b8:	603b      	str	r3, [r7, #0]
                                       const unsigned char* actual, size_t size, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800e3ba:	68f8      	ldr	r0, [r7, #12]
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	687a      	ldr	r2, [r7, #4]
 800e3c0:	68b9      	ldr	r1, [r7, #8]
 800e3c2:	f7fe ff47 	bl	800d254 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800e3c6:	4a40      	ldr	r2, [pc, #256]	; (800e4c8 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x11c>)
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e3d2:	68f9      	ldr	r1, [r7, #12]
 800e3d4:	f107 031c 	add.w	r3, r7, #28
 800e3d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f7ff f942 	bl	800d664 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800e3e0:	f107 031c 	add.w	r3, r7, #28
 800e3e4:	4619      	mov	r1, r3
 800e3e6:	4620      	mov	r0, r4
 800e3e8:	f7fd f903 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 800e3ec:	f107 031c 	add.w	r3, r7, #28
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f7fd fc4a 	bl	800bc8a <_ZN12SimpleStringD1Ev>

    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800e3f6:	f107 0314 	add.w	r3, r7, #20
 800e3fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e3fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7fe fa4c 	bl	800c89c <_Z22StringFromBinaryOrNullPKhj>

	message_ += createButWasString(StringFromBinaryOrNull(expected, size), actualHex);
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e40a:	68fd      	ldr	r5, [r7, #12]
 800e40c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e410:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e412:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e414:	4618      	mov	r0, r3
 800e416:	f7fe fa41 	bl	800c89c <_Z22StringFromBinaryOrNullPKhj>
 800e41a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e41e:	f107 0314 	add.w	r3, r7, #20
 800e422:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e426:	4629      	mov	r1, r5
 800e428:	f7ff f856 	bl	800d4d8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800e42c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e430:	4619      	mov	r1, r3
 800e432:	4620      	mov	r0, r4
 800e434:	f7fd fca6 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 800e438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e43c:	4618      	mov	r0, r3
 800e43e:	f7fd fc24 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800e442:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e446:	4618      	mov	r0, r3
 800e448:	f7fd fc1f 	bl	800bc8a <_ZN12SimpleStringD1Ev>
	if ((expected) && (actual))
 800e44c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d02f      	beq.n	800e4b2 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
 800e452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e454:	2b00      	cmp	r3, #0
 800e456:	d02c      	beq.n	800e4b2 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
	{
		size_t failStart;
		for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800e458:	2300      	movs	r3, #0
 800e45a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e45c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e45e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e460:	4413      	add	r3, r2
 800e462:	781a      	ldrb	r2, [r3, #0]
 800e464:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e468:	440b      	add	r3, r1
 800e46a:	781b      	ldrb	r3, [r3, #0]
 800e46c:	429a      	cmp	r2, r3
 800e46e:	d103      	bne.n	800e478 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xcc>
 800e470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e472:	3301      	adds	r3, #1
 800e474:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e476:	e7f1      	b.n	800e45c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xb0>
			;
		message_ += createDifferenceAtPosString(actualHex, (failStart * 3 + 1), failStart);
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e47e:	68f9      	ldr	r1, [r7, #12]
 800e480:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e482:	4613      	mov	r3, r2
 800e484:	005b      	lsls	r3, r3, #1
 800e486:	4413      	add	r3, r2
 800e488:	1c5d      	adds	r5, r3, #1
 800e48a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800e48e:	f107 0214 	add.w	r2, r7, #20
 800e492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e494:	9300      	str	r3, [sp, #0]
 800e496:	462b      	mov	r3, r5
 800e498:	f7ff f838 	bl	800d50c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800e49c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e4a0:	4619      	mov	r1, r3
 800e4a2:	4620      	mov	r0, r4
 800e4a4:	f7fd fc6e 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 800e4a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f7fd fbec 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800e4b2:	f107 0314 	add.w	r3, r7, #20
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f7fd fbe7 	bl	800bc8a <_ZN12SimpleStringD1Ev>
	}
}
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	4618      	mov	r0, r3
 800e4c0:	3740      	adds	r7, #64	; 0x40
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bdb0      	pop	{r4, r5, r7, pc}
 800e4c6:	bf00      	nop
 800e4c8:	08026344 	.word	0x08026344

0800e4cc <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>:

BitsEqualFailure::BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual,
 800e4cc:	b5b0      	push	{r4, r5, r7, lr}
 800e4ce:	b08c      	sub	sp, #48	; 0x30
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	60f8      	str	r0, [r7, #12]
 800e4d4:	60b9      	str	r1, [r7, #8]
 800e4d6:	607a      	str	r2, [r7, #4]
 800e4d8:	603b      	str	r3, [r7, #0]
                                   unsigned long mask, size_t byteCount, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800e4da:	68f8      	ldr	r0, [r7, #12]
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	687a      	ldr	r2, [r7, #4]
 800e4e0:	68b9      	ldr	r1, [r7, #8]
 800e4e2:	f7fe feb7 	bl	800d254 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800e4e6:	4a26      	ldr	r2, [pc, #152]	; (800e580 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString+0xb4>)
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e4f2:	68f9      	ldr	r1, [r7, #12]
 800e4f4:	f107 0310 	add.w	r3, r7, #16
 800e4f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f7ff f8b2 	bl	800d664 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800e500:	f107 0310 	add.w	r3, r7, #16
 800e504:	4619      	mov	r1, r3
 800e506:	4620      	mov	r0, r4
 800e508:	f7fd f873 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 800e50c:	f107 0310 	add.w	r3, r7, #16
 800e510:	4618      	mov	r0, r3
 800e512:	f7fd fbba 	bl	800bc8a <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFromMaskedBits(expected, mask, byteCount), StringFromMaskedBits(actual, mask, byteCount));
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e51c:	68fd      	ldr	r5, [r7, #12]
 800e51e:	f107 0020 	add.w	r0, r7, #32
 800e522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e524:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e526:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e528:	f7fe fa24 	bl	800c974 <_Z20StringFromMaskedBitsmmj>
 800e52c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800e530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e532:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e534:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e536:	f7fe fa1d 	bl	800c974 <_Z20StringFromMaskedBitsmmj>
 800e53a:	f107 0018 	add.w	r0, r7, #24
 800e53e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e542:	f107 0220 	add.w	r2, r7, #32
 800e546:	4629      	mov	r1, r5
 800e548:	f7fe ffc6 	bl	800d4d8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800e54c:	f107 0318 	add.w	r3, r7, #24
 800e550:	4619      	mov	r1, r3
 800e552:	4620      	mov	r0, r4
 800e554:	f7fd fc16 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 800e558:	f107 0318 	add.w	r3, r7, #24
 800e55c:	4618      	mov	r0, r3
 800e55e:	f7fd fb94 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800e562:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e566:	4618      	mov	r0, r3
 800e568:	f7fd fb8f 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 800e56c:	f107 0320 	add.w	r3, r7, #32
 800e570:	4618      	mov	r0, r3
 800e572:	f7fd fb8a 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	4618      	mov	r0, r3
 800e57a:	3730      	adds	r7, #48	; 0x30
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bdb0      	pop	{r4, r5, r7, pc}
 800e580:	08026318 	.word	0x08026318

0800e584 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>:

FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell* test, const char* fileName, size_t lineNumber,
 800e584:	b590      	push	{r4, r7, lr}
 800e586:	b089      	sub	sp, #36	; 0x24
 800e588:	af00      	add	r7, sp, #0
 800e58a:	60f8      	str	r0, [r7, #12]
 800e58c:	60b9      	str	r1, [r7, #8]
 800e58e:	607a      	str	r2, [r7, #4]
 800e590:	603b      	str	r3, [r7, #0]
                                                     const SimpleString& featureName, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800e592:	68f8      	ldr	r0, [r7, #12]
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	687a      	ldr	r2, [r7, #4]
 800e598:	68b9      	ldr	r1, [r7, #8]
 800e59a:	f7fe fe5b 	bl	800d254 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800e59e:	4a1a      	ldr	r2, [pc, #104]	; (800e608 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x84>)
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e5aa:	68f9      	ldr	r1, [r7, #12]
 800e5ac:	f107 0310 	add.w	r3, r7, #16
 800e5b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f7ff f856 	bl	800d664 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800e5b8:	f107 0310 	add.w	r3, r7, #16
 800e5bc:	4619      	mov	r1, r3
 800e5be:	4620      	mov	r0, r4
 800e5c0:	f7fd f817 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 800e5c4:	f107 0310 	add.w	r3, r7, #16
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f7fd fb5e 	bl	800bc8a <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("The feature \"%s\" is not supported in this environment or with the feature set selected when building the library.", featureName.asCharString());
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e5d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e5d6:	f7fd fb2b 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800e5da:	4602      	mov	r2, r0
 800e5dc:	f107 0318 	add.w	r3, r7, #24
 800e5e0:	490a      	ldr	r1, [pc, #40]	; (800e60c <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x88>)
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	f7fe f858 	bl	800c698 <_Z16StringFromFormatPKcz>
 800e5e8:	f107 0318 	add.w	r3, r7, #24
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	4620      	mov	r0, r4
 800e5f0:	f7fd fbc8 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 800e5f4:	f107 0318 	add.w	r3, r7, #24
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	f7fd fb46 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	4618      	mov	r0, r3
 800e602:	3724      	adds	r7, #36	; 0x24
 800e604:	46bd      	mov	sp, r7
 800e606:	bd90      	pop	{r4, r7, pc}
 800e608:	080262ec 	.word	0x080262ec
 800e60c:	08022d78 	.word	0x08022d78

0800e610 <_ZN25FeatureUnsupportedFailureD1Ev>:
{
public:
	BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const SimpleString& text);
};

class FeatureUnsupportedFailure : public TestFailure
 800e610:	b580      	push	{r7, lr}
 800e612:	b082      	sub	sp, #8
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
 800e618:	4a05      	ldr	r2, [pc, #20]	; (800e630 <_ZN25FeatureUnsupportedFailureD1Ev+0x20>)
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	601a      	str	r2, [r3, #0]
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	4618      	mov	r0, r3
 800e622:	f7fe fe99 	bl	800d358 <_ZN11TestFailureD1Ev>
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	4618      	mov	r0, r3
 800e62a:	3708      	adds	r7, #8
 800e62c:	46bd      	mov	sp, r7
 800e62e:	bd80      	pop	{r7, pc}
 800e630:	080262ec 	.word	0x080262ec

0800e634 <_ZN25FeatureUnsupportedFailureD0Ev>:
 800e634:	b580      	push	{r7, lr}
 800e636:	b082      	sub	sp, #8
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	f7ff ffe7 	bl	800e610 <_ZN25FeatureUnsupportedFailureD1Ev>
 800e642:	2134      	movs	r1, #52	; 0x34
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	f7fa fbb9 	bl	8008dbc <_ZdlPvj>
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	4618      	mov	r0, r3
 800e64e:	3708      	adds	r7, #8
 800e650:	46bd      	mov	sp, r7
 800e652:	bd80      	pop	{r7, pc}

0800e654 <_ZN16BitsEqualFailureD1Ev>:
class BitsEqualFailure : public TestFailure
 800e654:	b580      	push	{r7, lr}
 800e656:	b082      	sub	sp, #8
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
 800e65c:	4a05      	ldr	r2, [pc, #20]	; (800e674 <_ZN16BitsEqualFailureD1Ev+0x20>)
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	601a      	str	r2, [r3, #0]
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	4618      	mov	r0, r3
 800e666:	f7fe fe77 	bl	800d358 <_ZN11TestFailureD1Ev>
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	4618      	mov	r0, r3
 800e66e:	3708      	adds	r7, #8
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}
 800e674:	08026318 	.word	0x08026318

0800e678 <_ZN16BitsEqualFailureD0Ev>:
 800e678:	b580      	push	{r7, lr}
 800e67a:	b082      	sub	sp, #8
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	6878      	ldr	r0, [r7, #4]
 800e682:	f7ff ffe7 	bl	800e654 <_ZN16BitsEqualFailureD1Ev>
 800e686:	2134      	movs	r1, #52	; 0x34
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	f7fa fb97 	bl	8008dbc <_ZdlPvj>
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	4618      	mov	r0, r3
 800e692:	3708      	adds	r7, #8
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}

0800e698 <_ZN18BinaryEqualFailureD1Ev>:
class BinaryEqualFailure : public TestFailure
 800e698:	b580      	push	{r7, lr}
 800e69a:	b082      	sub	sp, #8
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
 800e6a0:	4a05      	ldr	r2, [pc, #20]	; (800e6b8 <_ZN18BinaryEqualFailureD1Ev+0x20>)
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	601a      	str	r2, [r3, #0]
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f7fe fe55 	bl	800d358 <_ZN11TestFailureD1Ev>
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	3708      	adds	r7, #8
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}
 800e6b8:	08026344 	.word	0x08026344

0800e6bc <_ZN18BinaryEqualFailureD0Ev>:
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b082      	sub	sp, #8
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f7ff ffe7 	bl	800e698 <_ZN18BinaryEqualFailureD1Ev>
 800e6ca:	2134      	movs	r1, #52	; 0x34
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f7fa fb75 	bl	8008dbc <_ZdlPvj>
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3708      	adds	r7, #8
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}

0800e6dc <_ZN24StringEqualNoCaseFailureD1Ev>:
class StringEqualNoCaseFailure : public TestFailure
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b082      	sub	sp, #8
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
 800e6e4:	4a05      	ldr	r2, [pc, #20]	; (800e6fc <_ZN24StringEqualNoCaseFailureD1Ev+0x20>)
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	601a      	str	r2, [r3, #0]
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f7fe fe33 	bl	800d358 <_ZN11TestFailureD1Ev>
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	3708      	adds	r7, #8
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bd80      	pop	{r7, pc}
 800e6fc:	08026370 	.word	0x08026370

0800e700 <_ZN24StringEqualNoCaseFailureD0Ev>:
 800e700:	b580      	push	{r7, lr}
 800e702:	b082      	sub	sp, #8
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	6878      	ldr	r0, [r7, #4]
 800e70a:	f7ff ffe7 	bl	800e6dc <_ZN24StringEqualNoCaseFailureD1Ev>
 800e70e:	2134      	movs	r1, #52	; 0x34
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f7fa fb53 	bl	8008dbc <_ZdlPvj>
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	4618      	mov	r0, r3
 800e71a:	3708      	adds	r7, #8
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}

0800e720 <_ZN18StringEqualFailureD1Ev>:
class StringEqualFailure : public TestFailure
 800e720:	b580      	push	{r7, lr}
 800e722:	b082      	sub	sp, #8
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
 800e728:	4a05      	ldr	r2, [pc, #20]	; (800e740 <_ZN18StringEqualFailureD1Ev+0x20>)
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	601a      	str	r2, [r3, #0]
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	4618      	mov	r0, r3
 800e732:	f7fe fe11 	bl	800d358 <_ZN11TestFailureD1Ev>
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	4618      	mov	r0, r3
 800e73a:	3708      	adds	r7, #8
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}
 800e740:	0802639c 	.word	0x0802639c

0800e744 <_ZN18StringEqualFailureD0Ev>:
 800e744:	b580      	push	{r7, lr}
 800e746:	b082      	sub	sp, #8
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
 800e74c:	6878      	ldr	r0, [r7, #4]
 800e74e:	f7ff ffe7 	bl	800e720 <_ZN18StringEqualFailureD1Ev>
 800e752:	2134      	movs	r1, #52	; 0x34
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	f7fa fb31 	bl	8008dbc <_ZdlPvj>
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	4618      	mov	r0, r3
 800e75e:	3708      	adds	r7, #8
 800e760:	46bd      	mov	sp, r7
 800e762:	bd80      	pop	{r7, pc}

0800e764 <_ZN23SignedBytesEqualFailureD1Ev>:
class SignedBytesEqualFailure : public TestFailure
 800e764:	b580      	push	{r7, lr}
 800e766:	b082      	sub	sp, #8
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
 800e76c:	4a05      	ldr	r2, [pc, #20]	; (800e784 <_ZN23SignedBytesEqualFailureD1Ev+0x20>)
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	601a      	str	r2, [r3, #0]
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	4618      	mov	r0, r3
 800e776:	f7fe fdef 	bl	800d358 <_ZN11TestFailureD1Ev>
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	4618      	mov	r0, r3
 800e77e:	3708      	adds	r7, #8
 800e780:	46bd      	mov	sp, r7
 800e782:	bd80      	pop	{r7, pc}
 800e784:	080263c8 	.word	0x080263c8

0800e788 <_ZN23SignedBytesEqualFailureD0Ev>:
 800e788:	b580      	push	{r7, lr}
 800e78a:	b082      	sub	sp, #8
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	6878      	ldr	r0, [r7, #4]
 800e792:	f7ff ffe7 	bl	800e764 <_ZN23SignedBytesEqualFailureD1Ev>
 800e796:	2134      	movs	r1, #52	; 0x34
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f7fa fb0f 	bl	8008dbc <_ZdlPvj>
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	3708      	adds	r7, #8
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}

0800e7a8 <_ZN25UnsignedLongsEqualFailureD1Ev>:
class UnsignedLongsEqualFailure : public TestFailure
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b082      	sub	sp, #8
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
 800e7b0:	4a05      	ldr	r2, [pc, #20]	; (800e7c8 <_ZN25UnsignedLongsEqualFailureD1Ev+0x20>)
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	601a      	str	r2, [r3, #0]
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f7fe fdcd 	bl	800d358 <_ZN11TestFailureD1Ev>
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	3708      	adds	r7, #8
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bd80      	pop	{r7, pc}
 800e7c8:	080263f4 	.word	0x080263f4

0800e7cc <_ZN25UnsignedLongsEqualFailureD0Ev>:
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b082      	sub	sp, #8
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
 800e7d4:	6878      	ldr	r0, [r7, #4]
 800e7d6:	f7ff ffe7 	bl	800e7a8 <_ZN25UnsignedLongsEqualFailureD1Ev>
 800e7da:	2134      	movs	r1, #52	; 0x34
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	f7fa faed 	bl	8008dbc <_ZdlPvj>
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	3708      	adds	r7, #8
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}

0800e7ec <_ZN17LongsEqualFailureD1Ev>:
class LongsEqualFailure : public TestFailure
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b082      	sub	sp, #8
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
 800e7f4:	4a05      	ldr	r2, [pc, #20]	; (800e80c <_ZN17LongsEqualFailureD1Ev+0x20>)
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	601a      	str	r2, [r3, #0]
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f7fe fdab 	bl	800d358 <_ZN11TestFailureD1Ev>
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	4618      	mov	r0, r3
 800e806:	3708      	adds	r7, #8
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}
 800e80c:	08026420 	.word	0x08026420

0800e810 <_ZN17LongsEqualFailureD0Ev>:
 800e810:	b580      	push	{r7, lr}
 800e812:	b082      	sub	sp, #8
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	f7ff ffe7 	bl	800e7ec <_ZN17LongsEqualFailureD1Ev>
 800e81e:	2134      	movs	r1, #52	; 0x34
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f7fa facb 	bl	8008dbc <_ZdlPvj>
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	4618      	mov	r0, r3
 800e82a:	3708      	adds	r7, #8
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd80      	pop	{r7, pc}

0800e830 <_ZN12CheckFailureD1Ev>:
class CheckFailure : public TestFailure
 800e830:	b580      	push	{r7, lr}
 800e832:	b082      	sub	sp, #8
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
 800e838:	4a05      	ldr	r2, [pc, #20]	; (800e850 <_ZN12CheckFailureD1Ev+0x20>)
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	601a      	str	r2, [r3, #0]
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	4618      	mov	r0, r3
 800e842:	f7fe fd89 	bl	800d358 <_ZN11TestFailureD1Ev>
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	4618      	mov	r0, r3
 800e84a:	3708      	adds	r7, #8
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}
 800e850:	0802644c 	.word	0x0802644c

0800e854 <_ZN12CheckFailureD0Ev>:
 800e854:	b580      	push	{r7, lr}
 800e856:	b082      	sub	sp, #8
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
 800e85c:	6878      	ldr	r0, [r7, #4]
 800e85e:	f7ff ffe7 	bl	800e830 <_ZN12CheckFailureD1Ev>
 800e862:	2134      	movs	r1, #52	; 0x34
 800e864:	6878      	ldr	r0, [r7, #4]
 800e866:	f7fa faa9 	bl	8008dbc <_ZdlPvj>
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	4618      	mov	r0, r3
 800e86e:	3708      	adds	r7, #8
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}

0800e874 <_ZN15ContainsFailureD1Ev>:
class ContainsFailure: public TestFailure
 800e874:	b580      	push	{r7, lr}
 800e876:	b082      	sub	sp, #8
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
 800e87c:	4a05      	ldr	r2, [pc, #20]	; (800e894 <_ZN15ContainsFailureD1Ev+0x20>)
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	601a      	str	r2, [r3, #0]
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	4618      	mov	r0, r3
 800e886:	f7fe fd67 	bl	800d358 <_ZN11TestFailureD1Ev>
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	4618      	mov	r0, r3
 800e88e:	3708      	adds	r7, #8
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}
 800e894:	08026478 	.word	0x08026478

0800e898 <_ZN15ContainsFailureD0Ev>:
 800e898:	b580      	push	{r7, lr}
 800e89a:	b082      	sub	sp, #8
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f7ff ffe7 	bl	800e874 <_ZN15ContainsFailureD1Ev>
 800e8a6:	2134      	movs	r1, #52	; 0x34
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f7fa fa87 	bl	8008dbc <_ZdlPvj>
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3708      	adds	r7, #8
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}

0800e8b8 <_ZN17ComparisonFailureD1Ev>:
class ComparisonFailure : public TestFailure
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b082      	sub	sp, #8
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
 800e8c0:	4a05      	ldr	r2, [pc, #20]	; (800e8d8 <_ZN17ComparisonFailureD1Ev+0x20>)
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	601a      	str	r2, [r3, #0]
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f7fe fd45 	bl	800d358 <_ZN11TestFailureD1Ev>
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	3708      	adds	r7, #8
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bd80      	pop	{r7, pc}
 800e8d8:	080264a4 	.word	0x080264a4

0800e8dc <_ZN17ComparisonFailureD0Ev>:
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b082      	sub	sp, #8
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
 800e8e4:	6878      	ldr	r0, [r7, #4]
 800e8e6:	f7ff ffe7 	bl	800e8b8 <_ZN17ComparisonFailureD1Ev>
 800e8ea:	2134      	movs	r1, #52	; 0x34
 800e8ec:	6878      	ldr	r0, [r7, #4]
 800e8ee:	f7fa fa65 	bl	8008dbc <_ZdlPvj>
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3708      	adds	r7, #8
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}

0800e8fc <_ZN17CheckEqualFailureD1Ev>:
class CheckEqualFailure : public TestFailure
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b082      	sub	sp, #8
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
 800e904:	4a05      	ldr	r2, [pc, #20]	; (800e91c <_ZN17CheckEqualFailureD1Ev+0x20>)
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	601a      	str	r2, [r3, #0]
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	4618      	mov	r0, r3
 800e90e:	f7fe fd23 	bl	800d358 <_ZN11TestFailureD1Ev>
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	4618      	mov	r0, r3
 800e916:	3708      	adds	r7, #8
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}
 800e91c:	080264d0 	.word	0x080264d0

0800e920 <_ZN17CheckEqualFailureD0Ev>:
 800e920:	b580      	push	{r7, lr}
 800e922:	b082      	sub	sp, #8
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	f7ff ffe7 	bl	800e8fc <_ZN17CheckEqualFailureD1Ev>
 800e92e:	2134      	movs	r1, #52	; 0x34
 800e930:	6878      	ldr	r0, [r7, #4]
 800e932:	f7fa fa43 	bl	8008dbc <_ZdlPvj>
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	4618      	mov	r0, r3
 800e93a:	3708      	adds	r7, #8
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}

0800e940 <_ZN19DoublesEqualFailureD1Ev>:
class DoublesEqualFailure: public TestFailure
 800e940:	b580      	push	{r7, lr}
 800e942:	b082      	sub	sp, #8
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
 800e948:	4a05      	ldr	r2, [pc, #20]	; (800e960 <_ZN19DoublesEqualFailureD1Ev+0x20>)
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	601a      	str	r2, [r3, #0]
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	4618      	mov	r0, r3
 800e952:	f7fe fd01 	bl	800d358 <_ZN11TestFailureD1Ev>
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	4618      	mov	r0, r3
 800e95a:	3708      	adds	r7, #8
 800e95c:	46bd      	mov	sp, r7
 800e95e:	bd80      	pop	{r7, pc}
 800e960:	080264fc 	.word	0x080264fc

0800e964 <_ZN19DoublesEqualFailureD0Ev>:
 800e964:	b580      	push	{r7, lr}
 800e966:	b082      	sub	sp, #8
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
 800e96c:	6878      	ldr	r0, [r7, #4]
 800e96e:	f7ff ffe7 	bl	800e940 <_ZN19DoublesEqualFailureD1Ev>
 800e972:	2134      	movs	r1, #52	; 0x34
 800e974:	6878      	ldr	r0, [r7, #4]
 800e976:	f7fa fa21 	bl	8008dbc <_ZdlPvj>
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	4618      	mov	r0, r3
 800e97e:	3708      	adds	r7, #8
 800e980:	46bd      	mov	sp, r7
 800e982:	bd80      	pop	{r7, pc}

0800e984 <_ZN13EqualsFailureD1Ev>:
class EqualsFailure: public TestFailure
 800e984:	b580      	push	{r7, lr}
 800e986:	b082      	sub	sp, #8
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
 800e98c:	4a05      	ldr	r2, [pc, #20]	; (800e9a4 <_ZN13EqualsFailureD1Ev+0x20>)
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	601a      	str	r2, [r3, #0]
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	4618      	mov	r0, r3
 800e996:	f7fe fcdf 	bl	800d358 <_ZN11TestFailureD1Ev>
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	4618      	mov	r0, r3
 800e99e:	3708      	adds	r7, #8
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}
 800e9a4:	08026528 	.word	0x08026528

0800e9a8 <_ZN13EqualsFailureD0Ev>:
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b082      	sub	sp, #8
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	f7ff ffe7 	bl	800e984 <_ZN13EqualsFailureD1Ev>
 800e9b6:	2134      	movs	r1, #52	; 0x34
 800e9b8:	6878      	ldr	r0, [r7, #4]
 800e9ba:	f7fa f9ff 	bl	8008dbc <_ZdlPvj>
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3708      	adds	r7, #8
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}

0800e9c8 <_ZL13checkedMallocj>:
#include "CppUTest/TestMemoryAllocator.h"
#include "CppUTest/PlatformSpecificFunctions.h"
#include "CppUTest/MemoryLeakDetector.h"

static char* checkedMalloc(size_t size)
{
 800e9c8:	b5b0      	push	{r4, r5, r7, lr}
 800e9ca:	b086      	sub	sp, #24
 800e9cc:	af02      	add	r7, sp, #8
 800e9ce:	6078      	str	r0, [r7, #4]
    char* mem = (char*) PlatformSpecificMalloc(size);
 800e9d0:	4b0d      	ldr	r3, [pc, #52]	; (800ea08 <_ZL13checkedMallocj+0x40>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	4798      	blx	r3
 800e9d8:	60f8      	str	r0, [r7, #12]
    if (mem == NULLPTR)
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d10e      	bne.n	800e9fe <_ZL13checkedMallocj+0x36>
    FAIL("malloc returned null pointer");
 800e9e0:	f004 f97e 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 800e9e4:	4604      	mov	r4, r0
 800e9e6:	6823      	ldr	r3, [r4, #0]
 800e9e8:	3368      	adds	r3, #104	; 0x68
 800e9ea:	681d      	ldr	r5, [r3, #0]
 800e9ec:	f004 f988 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	9300      	str	r3, [sp, #0]
 800e9f4:	2325      	movs	r3, #37	; 0x25
 800e9f6:	4a05      	ldr	r2, [pc, #20]	; (800ea0c <_ZL13checkedMallocj+0x44>)
 800e9f8:	4905      	ldr	r1, [pc, #20]	; (800ea10 <_ZL13checkedMallocj+0x48>)
 800e9fa:	4620      	mov	r0, r4
 800e9fc:	47a8      	blx	r5
    return mem;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	3710      	adds	r7, #16
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bdb0      	pop	{r4, r5, r7, pc}
 800ea08:	200000c8 	.word	0x200000c8
 800ea0c:	08022dec 	.word	0x08022dec
 800ea10:	08022e0c 	.word	0x08022e0c

0800ea14 <_Z22getCurrentNewAllocatorv>:
{
    currentNewAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewAllocator()
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	af00      	add	r7, sp, #0
    if (currentNewAllocator == NULLPTR) setCurrentNewAllocatorToDefault();
 800ea18:	4b04      	ldr	r3, [pc, #16]	; (800ea2c <_Z22getCurrentNewAllocatorv+0x18>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d101      	bne.n	800ea24 <_Z22getCurrentNewAllocatorv+0x10>
 800ea20:	f000 f806 	bl	800ea30 <_Z31setCurrentNewAllocatorToDefaultv>
    return currentNewAllocator;
 800ea24:	4b01      	ldr	r3, [pc, #4]	; (800ea2c <_Z22getCurrentNewAllocatorv+0x18>)
 800ea26:	681b      	ldr	r3, [r3, #0]
}
 800ea28:	4618      	mov	r0, r3
 800ea2a:	bd80      	pop	{r7, pc}
 800ea2c:	200007a0 	.word	0x200007a0

0800ea30 <_Z31setCurrentNewAllocatorToDefaultv>:

void setCurrentNewAllocatorToDefault()
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	af00      	add	r7, sp, #0
    currentNewAllocator = defaultNewAllocator();
 800ea34:	f000 f810 	bl	800ea58 <_Z19defaultNewAllocatorv>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	4a02      	ldr	r2, [pc, #8]	; (800ea44 <_Z31setCurrentNewAllocatorToDefaultv+0x14>)
 800ea3c:	6013      	str	r3, [r2, #0]
}
 800ea3e:	bf00      	nop
 800ea40:	bd80      	pop	{r7, pc}
 800ea42:	bf00      	nop
 800ea44:	200007a0 	.word	0x200007a0

0800ea48 <__tcf_0>:

TestMemoryAllocator* defaultNewAllocator()
{
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	af00      	add	r7, sp, #0
 800ea4c:	4801      	ldr	r0, [pc, #4]	; (800ea54 <__tcf_0+0xc>)
 800ea4e:	f000 f909 	bl	800ec64 <_ZN19TestMemoryAllocatorD1Ev>
 800ea52:	bd80      	pop	{r7, pc}
 800ea54:	200007ac 	.word	0x200007ac

0800ea58 <_Z19defaultNewAllocatorv>:
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800ea5c:	4b13      	ldr	r3, [pc, #76]	; (800eaac <_Z19defaultNewAllocatorv+0x54>)
 800ea5e:	781b      	ldrb	r3, [r3, #0]
 800ea60:	f3bf 8f5b 	dmb	ish
 800ea64:	b2db      	uxtb	r3, r3
 800ea66:	f003 0301 	and.w	r3, r3, #1
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	bf0c      	ite	eq
 800ea6e:	2301      	moveq	r3, #1
 800ea70:	2300      	movne	r3, #0
 800ea72:	b2db      	uxtb	r3, r3
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d016      	beq.n	800eaa6 <_Z19defaultNewAllocatorv+0x4e>
 800ea78:	480c      	ldr	r0, [pc, #48]	; (800eaac <_Z19defaultNewAllocatorv+0x54>)
 800ea7a:	f00f fc0d 	bl	801e298 <__cxa_guard_acquire>
 800ea7e:	4603      	mov	r3, r0
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	bf14      	ite	ne
 800ea84:	2301      	movne	r3, #1
 800ea86:	2300      	moveq	r3, #0
 800ea88:	b2db      	uxtb	r3, r3
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d00b      	beq.n	800eaa6 <_Z19defaultNewAllocatorv+0x4e>
 800ea8e:	4b08      	ldr	r3, [pc, #32]	; (800eab0 <_Z19defaultNewAllocatorv+0x58>)
 800ea90:	4a08      	ldr	r2, [pc, #32]	; (800eab4 <_Z19defaultNewAllocatorv+0x5c>)
 800ea92:	4909      	ldr	r1, [pc, #36]	; (800eab8 <_Z19defaultNewAllocatorv+0x60>)
 800ea94:	4809      	ldr	r0, [pc, #36]	; (800eabc <_Z19defaultNewAllocatorv+0x64>)
 800ea96:	f000 f8c5 	bl	800ec24 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800ea9a:	4804      	ldr	r0, [pc, #16]	; (800eaac <_Z19defaultNewAllocatorv+0x54>)
 800ea9c:	f00f fc08 	bl	801e2b0 <__cxa_guard_release>
 800eaa0:	4807      	ldr	r0, [pc, #28]	; (800eac0 <_Z19defaultNewAllocatorv+0x68>)
 800eaa2:	f00f fc2c 	bl	801e2fe <atexit>
    return &allocator;
 800eaa6:	4b05      	ldr	r3, [pc, #20]	; (800eabc <_Z19defaultNewAllocatorv+0x64>)
}
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	bd80      	pop	{r7, pc}
 800eaac:	200007c0 	.word	0x200007c0
 800eab0:	08022e2c 	.word	0x08022e2c
 800eab4:	08022e34 	.word	0x08022e34
 800eab8:	08022e38 	.word	0x08022e38
 800eabc:	200007ac 	.word	0x200007ac
 800eac0:	0800ea49 	.word	0x0800ea49

0800eac4 <_Z27getCurrentNewArrayAllocatorv>:
{
    currentNewArrayAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewArrayAllocator()
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	af00      	add	r7, sp, #0
    if (currentNewArrayAllocator == NULLPTR) setCurrentNewArrayAllocatorToDefault();
 800eac8:	4b04      	ldr	r3, [pc, #16]	; (800eadc <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d101      	bne.n	800ead4 <_Z27getCurrentNewArrayAllocatorv+0x10>
 800ead0:	f000 f806 	bl	800eae0 <_Z36setCurrentNewArrayAllocatorToDefaultv>
    return currentNewArrayAllocator;
 800ead4:	4b01      	ldr	r3, [pc, #4]	; (800eadc <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800ead6:	681b      	ldr	r3, [r3, #0]
}
 800ead8:	4618      	mov	r0, r3
 800eada:	bd80      	pop	{r7, pc}
 800eadc:	200007a4 	.word	0x200007a4

0800eae0 <_Z36setCurrentNewArrayAllocatorToDefaultv>:

void setCurrentNewArrayAllocatorToDefault()
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	af00      	add	r7, sp, #0
    currentNewArrayAllocator = defaultNewArrayAllocator();
 800eae4:	f000 f810 	bl	800eb08 <_Z24defaultNewArrayAllocatorv>
 800eae8:	4603      	mov	r3, r0
 800eaea:	4a02      	ldr	r2, [pc, #8]	; (800eaf4 <_Z36setCurrentNewArrayAllocatorToDefaultv+0x14>)
 800eaec:	6013      	str	r3, [r2, #0]
}
 800eaee:	bf00      	nop
 800eaf0:	bd80      	pop	{r7, pc}
 800eaf2:	bf00      	nop
 800eaf4:	200007a4 	.word	0x200007a4

0800eaf8 <__tcf_1>:

TestMemoryAllocator* defaultNewArrayAllocator()
{
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	af00      	add	r7, sp, #0
 800eafc:	4801      	ldr	r0, [pc, #4]	; (800eb04 <__tcf_1+0xc>)
 800eafe:	f000 f8b1 	bl	800ec64 <_ZN19TestMemoryAllocatorD1Ev>
 800eb02:	bd80      	pop	{r7, pc}
 800eb04:	200007c4 	.word	0x200007c4

0800eb08 <_Z24defaultNewArrayAllocatorv>:
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800eb0c:	4b13      	ldr	r3, [pc, #76]	; (800eb5c <_Z24defaultNewArrayAllocatorv+0x54>)
 800eb0e:	781b      	ldrb	r3, [r3, #0]
 800eb10:	f3bf 8f5b 	dmb	ish
 800eb14:	b2db      	uxtb	r3, r3
 800eb16:	f003 0301 	and.w	r3, r3, #1
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	bf0c      	ite	eq
 800eb1e:	2301      	moveq	r3, #1
 800eb20:	2300      	movne	r3, #0
 800eb22:	b2db      	uxtb	r3, r3
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d016      	beq.n	800eb56 <_Z24defaultNewArrayAllocatorv+0x4e>
 800eb28:	480c      	ldr	r0, [pc, #48]	; (800eb5c <_Z24defaultNewArrayAllocatorv+0x54>)
 800eb2a:	f00f fbb5 	bl	801e298 <__cxa_guard_acquire>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	bf14      	ite	ne
 800eb34:	2301      	movne	r3, #1
 800eb36:	2300      	moveq	r3, #0
 800eb38:	b2db      	uxtb	r3, r3
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d00b      	beq.n	800eb56 <_Z24defaultNewArrayAllocatorv+0x4e>
 800eb3e:	4b08      	ldr	r3, [pc, #32]	; (800eb60 <_Z24defaultNewArrayAllocatorv+0x58>)
 800eb40:	4a08      	ldr	r2, [pc, #32]	; (800eb64 <_Z24defaultNewArrayAllocatorv+0x5c>)
 800eb42:	4909      	ldr	r1, [pc, #36]	; (800eb68 <_Z24defaultNewArrayAllocatorv+0x60>)
 800eb44:	4809      	ldr	r0, [pc, #36]	; (800eb6c <_Z24defaultNewArrayAllocatorv+0x64>)
 800eb46:	f000 f86d 	bl	800ec24 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800eb4a:	4804      	ldr	r0, [pc, #16]	; (800eb5c <_Z24defaultNewArrayAllocatorv+0x54>)
 800eb4c:	f00f fbb0 	bl	801e2b0 <__cxa_guard_release>
 800eb50:	4807      	ldr	r0, [pc, #28]	; (800eb70 <_Z24defaultNewArrayAllocatorv+0x68>)
 800eb52:	f00f fbd4 	bl	801e2fe <atexit>
    return &allocator;
 800eb56:	4b05      	ldr	r3, [pc, #20]	; (800eb6c <_Z24defaultNewArrayAllocatorv+0x64>)
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	bd80      	pop	{r7, pc}
 800eb5c:	200007d8 	.word	0x200007d8
 800eb60:	08022e50 	.word	0x08022e50
 800eb64:	08022e5c 	.word	0x08022e5c
 800eb68:	08022e64 	.word	0x08022e64
 800eb6c:	200007c4 	.word	0x200007c4
 800eb70:	0800eaf9 	.word	0x0800eaf9

0800eb74 <_Z25getCurrentMallocAllocatorv>:
{
    currentMallocAllocator = allocator;
}

TestMemoryAllocator* getCurrentMallocAllocator()
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	af00      	add	r7, sp, #0
    if (currentMallocAllocator == NULLPTR) setCurrentMallocAllocatorToDefault();
 800eb78:	4b04      	ldr	r3, [pc, #16]	; (800eb8c <_Z25getCurrentMallocAllocatorv+0x18>)
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d101      	bne.n	800eb84 <_Z25getCurrentMallocAllocatorv+0x10>
 800eb80:	f000 f806 	bl	800eb90 <_Z34setCurrentMallocAllocatorToDefaultv>
    return currentMallocAllocator;
 800eb84:	4b01      	ldr	r3, [pc, #4]	; (800eb8c <_Z25getCurrentMallocAllocatorv+0x18>)
 800eb86:	681b      	ldr	r3, [r3, #0]
}
 800eb88:	4618      	mov	r0, r3
 800eb8a:	bd80      	pop	{r7, pc}
 800eb8c:	200007a8 	.word	0x200007a8

0800eb90 <_Z34setCurrentMallocAllocatorToDefaultv>:

void setCurrentMallocAllocatorToDefault()
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	af00      	add	r7, sp, #0
    currentMallocAllocator = defaultMallocAllocator();
 800eb94:	f000 f810 	bl	800ebb8 <_Z22defaultMallocAllocatorv>
 800eb98:	4603      	mov	r3, r0
 800eb9a:	4a02      	ldr	r2, [pc, #8]	; (800eba4 <_Z34setCurrentMallocAllocatorToDefaultv+0x14>)
 800eb9c:	6013      	str	r3, [r2, #0]
}
 800eb9e:	bf00      	nop
 800eba0:	bd80      	pop	{r7, pc}
 800eba2:	bf00      	nop
 800eba4:	200007a8 	.word	0x200007a8

0800eba8 <__tcf_2>:

TestMemoryAllocator* defaultMallocAllocator()
{
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	af00      	add	r7, sp, #0
 800ebac:	4801      	ldr	r0, [pc, #4]	; (800ebb4 <__tcf_2+0xc>)
 800ebae:	f000 f859 	bl	800ec64 <_ZN19TestMemoryAllocatorD1Ev>
 800ebb2:	bd80      	pop	{r7, pc}
 800ebb4:	200007dc 	.word	0x200007dc

0800ebb8 <_Z22defaultMallocAllocatorv>:
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800ebbc:	4b13      	ldr	r3, [pc, #76]	; (800ec0c <_Z22defaultMallocAllocatorv+0x54>)
 800ebbe:	781b      	ldrb	r3, [r3, #0]
 800ebc0:	f3bf 8f5b 	dmb	ish
 800ebc4:	b2db      	uxtb	r3, r3
 800ebc6:	f003 0301 	and.w	r3, r3, #1
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	bf0c      	ite	eq
 800ebce:	2301      	moveq	r3, #1
 800ebd0:	2300      	movne	r3, #0
 800ebd2:	b2db      	uxtb	r3, r3
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d016      	beq.n	800ec06 <_Z22defaultMallocAllocatorv+0x4e>
 800ebd8:	480c      	ldr	r0, [pc, #48]	; (800ec0c <_Z22defaultMallocAllocatorv+0x54>)
 800ebda:	f00f fb5d 	bl	801e298 <__cxa_guard_acquire>
 800ebde:	4603      	mov	r3, r0
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	bf14      	ite	ne
 800ebe4:	2301      	movne	r3, #1
 800ebe6:	2300      	moveq	r3, #0
 800ebe8:	b2db      	uxtb	r3, r3
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d00b      	beq.n	800ec06 <_Z22defaultMallocAllocatorv+0x4e>
 800ebee:	4b08      	ldr	r3, [pc, #32]	; (800ec10 <_Z22defaultMallocAllocatorv+0x58>)
 800ebf0:	4a08      	ldr	r2, [pc, #32]	; (800ec14 <_Z22defaultMallocAllocatorv+0x5c>)
 800ebf2:	4909      	ldr	r1, [pc, #36]	; (800ec18 <_Z22defaultMallocAllocatorv+0x60>)
 800ebf4:	4809      	ldr	r0, [pc, #36]	; (800ec1c <_Z22defaultMallocAllocatorv+0x64>)
 800ebf6:	f000 f815 	bl	800ec24 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800ebfa:	4804      	ldr	r0, [pc, #16]	; (800ec0c <_Z22defaultMallocAllocatorv+0x54>)
 800ebfc:	f00f fb58 	bl	801e2b0 <__cxa_guard_release>
 800ec00:	4807      	ldr	r0, [pc, #28]	; (800ec20 <_Z22defaultMallocAllocatorv+0x68>)
 800ec02:	f00f fb7c 	bl	801e2fe <atexit>
    return &allocator;
 800ec06:	4b05      	ldr	r3, [pc, #20]	; (800ec1c <_Z22defaultMallocAllocatorv+0x64>)
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	bd80      	pop	{r7, pc}
 800ec0c:	200007f0 	.word	0x200007f0
 800ec10:	08022e80 	.word	0x08022e80
 800ec14:	08022e88 	.word	0x08022e88
 800ec18:	08022e90 	.word	0x08022e90
 800ec1c:	200007dc 	.word	0x200007dc
 800ec20:	0800eba9 	.word	0x0800eba9

0800ec24 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>:
    if (originalMallocAllocator) setCurrentMallocAllocator(originalMallocAllocator);
    if (originalNewAllocator) setCurrentNewAllocator(originalNewAllocator);
    if (originalNewArrayAllocator) setCurrentNewArrayAllocator(originalNewArrayAllocator);
}

TestMemoryAllocator::TestMemoryAllocator(const char* name_str, const char* alloc_name_str, const char* free_name_str)
 800ec24:	b480      	push	{r7}
 800ec26:	b085      	sub	sp, #20
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	60f8      	str	r0, [r7, #12]
 800ec2c:	60b9      	str	r1, [r7, #8]
 800ec2e:	607a      	str	r2, [r7, #4]
 800ec30:	603b      	str	r3, [r7, #0]
    : name_(name_str), alloc_name_(alloc_name_str), free_name_(free_name_str), hasBeenDestroyed_(false)
 800ec32:	4a0b      	ldr	r2, [pc, #44]	; (800ec60 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_+0x3c>)
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	601a      	str	r2, [r3, #0]
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	68ba      	ldr	r2, [r7, #8]
 800ec3c:	605a      	str	r2, [r3, #4]
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	687a      	ldr	r2, [r7, #4]
 800ec42:	609a      	str	r2, [r3, #8]
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	683a      	ldr	r2, [r7, #0]
 800ec48:	60da      	str	r2, [r3, #12]
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	741a      	strb	r2, [r3, #16]
{
}
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	4618      	mov	r0, r3
 800ec54:	3714      	adds	r7, #20
 800ec56:	46bd      	mov	sp, r7
 800ec58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5c:	4770      	bx	lr
 800ec5e:	bf00      	nop
 800ec60:	080265b4 	.word	0x080265b4

0800ec64 <_ZN19TestMemoryAllocatorD1Ev>:

TestMemoryAllocator::~TestMemoryAllocator()
 800ec64:	b480      	push	{r7}
 800ec66:	b083      	sub	sp, #12
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
 800ec6c:	4a06      	ldr	r2, [pc, #24]	; (800ec88 <_ZN19TestMemoryAllocatorD1Ev+0x24>)
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	601a      	str	r2, [r3, #0]
{
    hasBeenDestroyed_ = true;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2201      	movs	r2, #1
 800ec76:	741a      	strb	r2, [r3, #16]
}
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	370c      	adds	r7, #12
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec84:	4770      	bx	lr
 800ec86:	bf00      	nop
 800ec88:	080265b4 	.word	0x080265b4

0800ec8c <_ZN19TestMemoryAllocatorD0Ev>:
TestMemoryAllocator::~TestMemoryAllocator()
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b082      	sub	sp, #8
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
}
 800ec94:	6878      	ldr	r0, [r7, #4]
 800ec96:	f7ff ffe5 	bl	800ec64 <_ZN19TestMemoryAllocatorD1Ev>
 800ec9a:	2114      	movs	r1, #20
 800ec9c:	6878      	ldr	r0, [r7, #4]
 800ec9e:	f7fa f88d 	bl	8008dbc <_ZdlPvj>
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	4618      	mov	r0, r3
 800eca6:	3708      	adds	r7, #8
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}

0800ecac <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>:

bool TestMemoryAllocator::hasBeenDestroyed()
{
 800ecac:	b480      	push	{r7}
 800ecae:	b083      	sub	sp, #12
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
    return hasBeenDestroyed_;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	7c1b      	ldrb	r3, [r3, #16]
}
 800ecb8:	4618      	mov	r0, r3
 800ecba:	370c      	adds	r7, #12
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc2:	4770      	bx	lr

0800ecc4 <_ZN19TestMemoryAllocator13isOfEqualTypeEPS_>:

bool TestMemoryAllocator::isOfEqualType(TestMemoryAllocator* allocator)
{
 800ecc4:	b590      	push	{r4, r7, lr}
 800ecc6:	b083      	sub	sp, #12
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
 800eccc:	6039      	str	r1, [r7, #0]
    return SimpleString::StrCmp(this->name(), allocator->name()) == 0;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	3310      	adds	r3, #16
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	6878      	ldr	r0, [r7, #4]
 800ecd8:	4798      	blx	r3
 800ecda:	4604      	mov	r4, r0
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	3310      	adds	r3, #16
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	6838      	ldr	r0, [r7, #0]
 800ece6:	4798      	blx	r3
 800ece8:	4603      	mov	r3, r0
 800ecea:	4619      	mov	r1, r3
 800ecec:	4620      	mov	r0, r4
 800ecee:	f7fc fa51 	bl	800b194 <_ZN12SimpleString6StrCmpEPKcS1_>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	bf0c      	ite	eq
 800ecf8:	2301      	moveq	r3, #1
 800ecfa:	2300      	movne	r3, #0
 800ecfc:	b2db      	uxtb	r3, r3
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	370c      	adds	r7, #12
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd90      	pop	{r4, r7, pc}
	...

0800ed08 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj>:

char* TestMemoryAllocator::allocMemoryLeakNode(size_t size)
{
 800ed08:	b590      	push	{r4, r7, lr}
 800ed0a:	b083      	sub	sp, #12
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
 800ed10:	6039      	str	r1, [r7, #0]
    return alloc_memory(size, "MemoryLeakNode", 1);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	3308      	adds	r3, #8
 800ed18:	681c      	ldr	r4, [r3, #0]
 800ed1a:	2301      	movs	r3, #1
 800ed1c:	4a04      	ldr	r2, [pc, #16]	; (800ed30 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj+0x28>)
 800ed1e:	6839      	ldr	r1, [r7, #0]
 800ed20:	6878      	ldr	r0, [r7, #4]
 800ed22:	47a0      	blx	r4
 800ed24:	4603      	mov	r3, r0
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	370c      	adds	r7, #12
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd90      	pop	{r4, r7, pc}
 800ed2e:	bf00      	nop
 800ed30:	08022eac 	.word	0x08022eac

0800ed34 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc>:

void TestMemoryAllocator::freeMemoryLeakNode(char* memory)
{
 800ed34:	b590      	push	{r4, r7, lr}
 800ed36:	b085      	sub	sp, #20
 800ed38:	af02      	add	r7, sp, #8
 800ed3a:	6078      	str	r0, [r7, #4]
 800ed3c:	6039      	str	r1, [r7, #0]
    free_memory(memory, 0, "MemoryLeakNode", 1);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	330c      	adds	r3, #12
 800ed44:	681c      	ldr	r4, [r3, #0]
 800ed46:	2301      	movs	r3, #1
 800ed48:	9300      	str	r3, [sp, #0]
 800ed4a:	4b04      	ldr	r3, [pc, #16]	; (800ed5c <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc+0x28>)
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	6839      	ldr	r1, [r7, #0]
 800ed50:	6878      	ldr	r0, [r7, #4]
 800ed52:	47a0      	blx	r4
}
 800ed54:	bf00      	nop
 800ed56:	370c      	adds	r7, #12
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd90      	pop	{r4, r7, pc}
 800ed5c:	08022eac 	.word	0x08022eac

0800ed60 <_ZN19TestMemoryAllocator12alloc_memoryEjPKcj>:

char* TestMemoryAllocator::alloc_memory(size_t size, const char*, size_t)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b084      	sub	sp, #16
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	60f8      	str	r0, [r7, #12]
 800ed68:	60b9      	str	r1, [r7, #8]
 800ed6a:	607a      	str	r2, [r7, #4]
 800ed6c:	603b      	str	r3, [r7, #0]
    return checkedMalloc(size);
 800ed6e:	68b8      	ldr	r0, [r7, #8]
 800ed70:	f7ff fe2a 	bl	800e9c8 <_ZL13checkedMallocj>
 800ed74:	4603      	mov	r3, r0
}
 800ed76:	4618      	mov	r0, r3
 800ed78:	3710      	adds	r7, #16
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}
	...

0800ed80 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj>:

void TestMemoryAllocator::free_memory(char* memory, size_t, const char*, size_t)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b084      	sub	sp, #16
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	60f8      	str	r0, [r7, #12]
 800ed88:	60b9      	str	r1, [r7, #8]
 800ed8a:	607a      	str	r2, [r7, #4]
 800ed8c:	603b      	str	r3, [r7, #0]
    PlatformSpecificFree(memory);
 800ed8e:	4b04      	ldr	r3, [pc, #16]	; (800eda0 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj+0x20>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	68b8      	ldr	r0, [r7, #8]
 800ed94:	4798      	blx	r3
}
 800ed96:	bf00      	nop
 800ed98:	3710      	adds	r7, #16
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}
 800ed9e:	bf00      	nop
 800eda0:	200000d0 	.word	0x200000d0

0800eda4 <_ZNK19TestMemoryAllocator4nameEv>:

const char* TestMemoryAllocator::name() const
{
 800eda4:	b480      	push	{r7}
 800eda6:	b083      	sub	sp, #12
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
    return name_;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	685b      	ldr	r3, [r3, #4]
}
 800edb0:	4618      	mov	r0, r3
 800edb2:	370c      	adds	r7, #12
 800edb4:	46bd      	mov	sp, r7
 800edb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edba:	4770      	bx	lr

0800edbc <_ZNK19TestMemoryAllocator10alloc_nameEv>:

const char* TestMemoryAllocator::alloc_name() const
{
 800edbc:	b480      	push	{r7}
 800edbe:	b083      	sub	sp, #12
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
    return alloc_name_;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	689b      	ldr	r3, [r3, #8]
}
 800edc8:	4618      	mov	r0, r3
 800edca:	370c      	adds	r7, #12
 800edcc:	46bd      	mov	sp, r7
 800edce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd2:	4770      	bx	lr

0800edd4 <_ZNK19TestMemoryAllocator9free_nameEv>:

const char* TestMemoryAllocator::free_name() const
{
 800edd4:	b480      	push	{r7}
 800edd6:	b083      	sub	sp, #12
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
    return free_name_;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	68db      	ldr	r3, [r3, #12]
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	370c      	adds	r7, #12
 800ede4:	46bd      	mov	sp, r7
 800ede6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edea:	4770      	bx	lr

0800edec <_ZN19TestMemoryAllocator15actualAllocatorEv>:

TestMemoryAllocator* TestMemoryAllocator::actualAllocator()
{
 800edec:	b480      	push	{r7}
 800edee:	b083      	sub	sp, #12
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
    return this;
 800edf4:	687b      	ldr	r3, [r7, #4]
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	370c      	adds	r7, #12
 800edfa:	46bd      	mov	sp, r7
 800edfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee00:	4770      	bx	lr
	...

0800ee04 <_ZN20NullUnknownAllocatorD1Ev>:

    return TestMemoryAllocator::alloc_memory(size, file, line);
}


NullUnknownAllocator::~NullUnknownAllocator()
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b082      	sub	sp, #8
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
 800ee0c:	4a05      	ldr	r2, [pc, #20]	; (800ee24 <_ZN20NullUnknownAllocatorD1Ev+0x20>)
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	601a      	str	r2, [r3, #0]
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	4618      	mov	r0, r3
 800ee16:	f7ff ff25 	bl	800ec64 <_ZN19TestMemoryAllocatorD1Ev>
{
}
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	3708      	adds	r7, #8
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd80      	pop	{r7, pc}
 800ee24:	08026580 	.word	0x08026580

0800ee28 <_ZN20NullUnknownAllocatorD0Ev>:
NullUnknownAllocator::~NullUnknownAllocator()
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b082      	sub	sp, #8
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
}
 800ee30:	6878      	ldr	r0, [r7, #4]
 800ee32:	f7ff ffe7 	bl	800ee04 <_ZN20NullUnknownAllocatorD1Ev>
 800ee36:	2114      	movs	r1, #20
 800ee38:	6878      	ldr	r0, [r7, #4]
 800ee3a:	f7f9 ffbf 	bl	8008dbc <_ZdlPvj>
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	4618      	mov	r0, r3
 800ee42:	3708      	adds	r7, #8
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}

0800ee48 <_ZN20NullUnknownAllocator12alloc_memoryEjPKcj>:

char* NullUnknownAllocator::alloc_memory(size_t /*size*/, const char*, size_t)
{
 800ee48:	b480      	push	{r7}
 800ee4a:	b085      	sub	sp, #20
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	60f8      	str	r0, [r7, #12]
 800ee50:	60b9      	str	r1, [r7, #8]
 800ee52:	607a      	str	r2, [r7, #4]
 800ee54:	603b      	str	r3, [r7, #0]
    return NULLPTR;
 800ee56:	2300      	movs	r3, #0
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3714      	adds	r7, #20
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee62:	4770      	bx	lr

0800ee64 <_ZN20NullUnknownAllocator11free_memoryEPcjPKcj>:

void NullUnknownAllocator::free_memory(char* /*memory*/, size_t, const char*, size_t)
{
 800ee64:	b480      	push	{r7}
 800ee66:	b085      	sub	sp, #20
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	60f8      	str	r0, [r7, #12]
 800ee6c:	60b9      	str	r1, [r7, #8]
 800ee6e:	607a      	str	r2, [r7, #4]
 800ee70:	603b      	str	r3, [r7, #0]
}
 800ee72:	bf00      	nop
 800ee74:	3714      	adds	r7, #20
 800ee76:	46bd      	mov	sp, r7
 800ee78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7c:	4770      	bx	lr
	...

0800ee80 <_ZN20NullUnknownAllocatorC1Ev>:

NullUnknownAllocator::NullUnknownAllocator()
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b082      	sub	sp, #8
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
    : TestMemoryAllocator("Null Allocator", "unknown", "unknown")
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	4b06      	ldr	r3, [pc, #24]	; (800eea4 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800ee8c:	4a05      	ldr	r2, [pc, #20]	; (800eea4 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800ee8e:	4906      	ldr	r1, [pc, #24]	; (800eea8 <_ZN20NullUnknownAllocatorC1Ev+0x28>)
 800ee90:	f7ff fec8 	bl	800ec24 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800ee94:	4a05      	ldr	r2, [pc, #20]	; (800eeac <_ZN20NullUnknownAllocatorC1Ev+0x2c>)
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	601a      	str	r2, [r3, #0]
{
}
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3708      	adds	r7, #8
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}
 800eea4:	08022ee0 	.word	0x08022ee0
 800eea8:	08022ee8 	.word	0x08022ee8
 800eeac:	08026580 	.word	0x08026580

0800eeb0 <__tcf_3>:


TestMemoryAllocator* NullUnknownAllocator::defaultAllocator()
{
    static NullUnknownAllocator allocator;
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	af00      	add	r7, sp, #0
 800eeb4:	4801      	ldr	r0, [pc, #4]	; (800eebc <__tcf_3+0xc>)
 800eeb6:	f7ff ffa5 	bl	800ee04 <_ZN20NullUnknownAllocatorD1Ev>
 800eeba:	bd80      	pop	{r7, pc}
 800eebc:	200007f4 	.word	0x200007f4

0800eec0 <_ZN20NullUnknownAllocator16defaultAllocatorEv>:
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	af00      	add	r7, sp, #0
    static NullUnknownAllocator allocator;
 800eec4:	4b12      	ldr	r3, [pc, #72]	; (800ef10 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800eec6:	781b      	ldrb	r3, [r3, #0]
 800eec8:	f3bf 8f5b 	dmb	ish
 800eecc:	b2db      	uxtb	r3, r3
 800eece:	f003 0301 	and.w	r3, r3, #1
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	bf0c      	ite	eq
 800eed6:	2301      	moveq	r3, #1
 800eed8:	2300      	movne	r3, #0
 800eeda:	b2db      	uxtb	r3, r3
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d013      	beq.n	800ef08 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800eee0:	480b      	ldr	r0, [pc, #44]	; (800ef10 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800eee2:	f00f f9d9 	bl	801e298 <__cxa_guard_acquire>
 800eee6:	4603      	mov	r3, r0
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	bf14      	ite	ne
 800eeec:	2301      	movne	r3, #1
 800eeee:	2300      	moveq	r3, #0
 800eef0:	b2db      	uxtb	r3, r3
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d008      	beq.n	800ef08 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800eef6:	4807      	ldr	r0, [pc, #28]	; (800ef14 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
 800eef8:	f7ff ffc2 	bl	800ee80 <_ZN20NullUnknownAllocatorC1Ev>
 800eefc:	4804      	ldr	r0, [pc, #16]	; (800ef10 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800eefe:	f00f f9d7 	bl	801e2b0 <__cxa_guard_release>
 800ef02:	4805      	ldr	r0, [pc, #20]	; (800ef18 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x58>)
 800ef04:	f00f f9fb 	bl	801e2fe <atexit>
    return &allocator;
 800ef08:	4b02      	ldr	r3, [pc, #8]	; (800ef14 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
}
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	bd80      	pop	{r7, pc}
 800ef0e:	bf00      	nop
 800ef10:	20000808 	.word	0x20000808
 800ef14:	200007f4 	.word	0x200007f4
 800ef18:	0800eeb1 	.word	0x0800eeb1

0800ef1c <_ZNK10TestResult12getTestCountEv>:
    size_t getTestCount() const
 800ef1c:	b480      	push	{r7}
 800ef1e:	b083      	sub	sp, #12
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
        return testCount_;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	689b      	ldr	r3, [r3, #8]
    }
 800ef28:	4618      	mov	r0, r3
 800ef2a:	370c      	adds	r7, #12
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef32:	4770      	bx	lr

0800ef34 <_ZNK10TestResult19getFilteredOutCountEv>:
    size_t getFilteredOutCount() const
 800ef34:	b480      	push	{r7}
 800ef36:	b083      	sub	sp, #12
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
        return filteredOutCount_;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	699b      	ldr	r3, [r3, #24]
    }
 800ef40:	4618      	mov	r0, r3
 800ef42:	370c      	adds	r7, #12
 800ef44:	46bd      	mov	sp, r7
 800ef46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4a:	4770      	bx	lr

0800ef4c <_ZN10TestOutput21getWorkingEnvironmentEv>:
{
    workingEnvironment_ = workEnvironment;
}

TestOutput::WorkingEnvironment TestOutput::getWorkingEnvironment()
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	af00      	add	r7, sp, #0
    if (workingEnvironment_ == TestOutput::detectEnvironment)
 800ef50:	4b05      	ldr	r3, [pc, #20]	; (800ef68 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800ef52:	781b      	ldrb	r3, [r3, #0]
 800ef54:	2b02      	cmp	r3, #2
 800ef56:	d103      	bne.n	800ef60 <_ZN10TestOutput21getWorkingEnvironmentEv+0x14>
        return PlatformSpecificGetWorkingEnvironment();
 800ef58:	f004 fa4a 	bl	80133f0 <_Z37PlatformSpecificGetWorkingEnvironmentv>
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	e001      	b.n	800ef64 <_ZN10TestOutput21getWorkingEnvironmentEv+0x18>
    return workingEnvironment_;
 800ef60:	4b01      	ldr	r3, [pc, #4]	; (800ef68 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800ef62:	781b      	ldrb	r3, [r3, #0]
}
 800ef64:	4618      	mov	r0, r3
 800ef66:	bd80      	pop	{r7, pc}
 800ef68:	20000088 	.word	0x20000088

0800ef6c <_ZN10TestOutputC1Ev>:


TestOutput::TestOutput() :
 800ef6c:	b480      	push	{r7}
 800ef6e:	b083      	sub	sp, #12
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
    dotCount_(0), verbose_(level_quiet), color_(false), progressIndication_(".")
 800ef74:	4a0a      	ldr	r2, [pc, #40]	; (800efa0 <_ZN10TestOutputC1Ev+0x34>)
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	601a      	str	r2, [r3, #0]
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	605a      	str	r2, [r3, #4]
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2200      	movs	r2, #0
 800ef84:	721a      	strb	r2, [r3, #8]
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2200      	movs	r2, #0
 800ef8a:	725a      	strb	r2, [r3, #9]
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	4a05      	ldr	r2, [pc, #20]	; (800efa4 <_ZN10TestOutputC1Ev+0x38>)
 800ef90:	60da      	str	r2, [r3, #12]
{
}
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	4618      	mov	r0, r3
 800ef96:	370c      	adds	r7, #12
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9e:	4770      	bx	lr
 800efa0:	080266b8 	.word	0x080266b8
 800efa4:	080232e8 	.word	0x080232e8

0800efa8 <_ZN10TestOutputD1Ev>:

TestOutput::~TestOutput()
 800efa8:	b480      	push	{r7}
 800efaa:	b083      	sub	sp, #12
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
 800efb0:	4a04      	ldr	r2, [pc, #16]	; (800efc4 <_ZN10TestOutputD1Ev+0x1c>)
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	601a      	str	r2, [r3, #0]
{
}
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	4618      	mov	r0, r3
 800efba:	370c      	adds	r7, #12
 800efbc:	46bd      	mov	sp, r7
 800efbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc2:	4770      	bx	lr
 800efc4:	080266b8 	.word	0x080266b8

0800efc8 <_ZN10TestOutput7verboseENS_14VerbosityLevelE>:

void TestOutput::verbose(VerbosityLevel level)
{
 800efc8:	b480      	push	{r7}
 800efca:	b083      	sub	sp, #12
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
 800efd0:	460b      	mov	r3, r1
 800efd2:	70fb      	strb	r3, [r7, #3]
    verbose_ = level;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	78fa      	ldrb	r2, [r7, #3]
 800efd8:	721a      	strb	r2, [r3, #8]
}
 800efda:	bf00      	nop
 800efdc:	370c      	adds	r7, #12
 800efde:	46bd      	mov	sp, r7
 800efe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe4:	4770      	bx	lr

0800efe6 <_ZN10TestOutput5colorEv>:

void TestOutput::color()
{
 800efe6:	b480      	push	{r7}
 800efe8:	b083      	sub	sp, #12
 800efea:	af00      	add	r7, sp, #0
 800efec:	6078      	str	r0, [r7, #4]
    color_ = true;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	2201      	movs	r2, #1
 800eff2:	725a      	strb	r2, [r3, #9]
}
 800eff4:	bf00      	nop
 800eff6:	370c      	adds	r7, #12
 800eff8:	46bd      	mov	sp, r7
 800effa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effe:	4770      	bx	lr

0800f000 <_ZN10TestOutput5printEPKc>:

void TestOutput::print(const char* str)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b082      	sub	sp, #8
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
 800f008:	6039      	str	r1, [r7, #0]
    printBuffer(str);
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	3328      	adds	r3, #40	; 0x28
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	6839      	ldr	r1, [r7, #0]
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	4798      	blx	r3
}
 800f018:	bf00      	nop
 800f01a:	3708      	adds	r7, #8
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}

0800f020 <_ZN10TestOutput5printEl>:

void TestOutput::print(long n)
{
 800f020:	b590      	push	{r4, r7, lr}
 800f022:	b085      	sub	sp, #20
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
 800f028:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	332c      	adds	r3, #44	; 0x2c
 800f030:	681c      	ldr	r4, [r3, #0]
 800f032:	f107 0308 	add.w	r3, r7, #8
 800f036:	6839      	ldr	r1, [r7, #0]
 800f038:	4618      	mov	r0, r3
 800f03a:	f7fd f8ff 	bl	800c23c <_Z10StringFroml>
 800f03e:	f107 0308 	add.w	r3, r7, #8
 800f042:	4618      	mov	r0, r3
 800f044:	f7fc fdf4 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800f048:	4603      	mov	r3, r0
 800f04a:	4619      	mov	r1, r3
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	47a0      	blx	r4
 800f050:	f107 0308 	add.w	r3, r7, #8
 800f054:	4618      	mov	r0, r3
 800f056:	f7fc fe18 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 800f05a:	bf00      	nop
 800f05c:	3714      	adds	r7, #20
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd90      	pop	{r4, r7, pc}

0800f062 <_ZN10TestOutput5printEj>:

void TestOutput::print(size_t n)
{
 800f062:	b590      	push	{r4, r7, lr}
 800f064:	b085      	sub	sp, #20
 800f066:	af00      	add	r7, sp, #0
 800f068:	6078      	str	r0, [r7, #4]
 800f06a:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	332c      	adds	r3, #44	; 0x2c
 800f072:	681c      	ldr	r4, [r3, #0]
 800f074:	f107 0308 	add.w	r3, r7, #8
 800f078:	6839      	ldr	r1, [r7, #0]
 800f07a:	4618      	mov	r0, r3
 800f07c:	f7fd fb34 	bl	800c6e8 <_Z10StringFromj>
 800f080:	f107 0308 	add.w	r3, r7, #8
 800f084:	4618      	mov	r0, r3
 800f086:	f7fc fdd3 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800f08a:	4603      	mov	r3, r0
 800f08c:	4619      	mov	r1, r3
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	47a0      	blx	r4
 800f092:	f107 0308 	add.w	r3, r7, #8
 800f096:	4618      	mov	r0, r3
 800f098:	f7fc fdf7 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 800f09c:	bf00      	nop
 800f09e:	3714      	adds	r7, #20
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd90      	pop	{r4, r7, pc}

0800f0a4 <_ZN10TestOutput11printDoubleEd>:

void TestOutput::printDouble(double d)
{
 800f0a4:	b590      	push	{r4, r7, lr}
 800f0a6:	b087      	sub	sp, #28
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	60f8      	str	r0, [r7, #12]
 800f0ac:	ed87 0b00 	vstr	d0, [r7]
    print(StringFrom(d).asCharString());
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	332c      	adds	r3, #44	; 0x2c
 800f0b6:	681c      	ldr	r4, [r3, #0]
 800f0b8:	f107 0310 	add.w	r3, r7, #16
 800f0bc:	2106      	movs	r1, #6
 800f0be:	ed97 0b00 	vldr	d0, [r7]
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f7fd faa6 	bl	800c614 <_Z10StringFromdi>
 800f0c8:	f107 0310 	add.w	r3, r7, #16
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f7fc fdaf 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	4619      	mov	r1, r3
 800f0d6:	68f8      	ldr	r0, [r7, #12]
 800f0d8:	47a0      	blx	r4
 800f0da:	f107 0310 	add.w	r3, r7, #16
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f7fc fdd3 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 800f0e4:	bf00      	nop
 800f0e6:	371c      	adds	r7, #28
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd90      	pop	{r4, r7, pc}

0800f0ec <_ZlsR10TestOutputPKc>:

TestOutput& operator<<(TestOutput& p, const char* s)
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b082      	sub	sp, #8
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	6039      	str	r1, [r7, #0]
    p.print(s);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	332c      	adds	r3, #44	; 0x2c
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	6839      	ldr	r1, [r7, #0]
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	4798      	blx	r3
    return p;
 800f104:	687b      	ldr	r3, [r7, #4]
}
 800f106:	4618      	mov	r0, r3
 800f108:	3708      	adds	r7, #8
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bd80      	pop	{r7, pc}
	...

0800f110 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell>:
    p.print(i);
    return p;
}

void TestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800f110:	b590      	push	{r4, r7, lr}
 800f112:	b085      	sub	sp, #20
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) print(test.getFormattedName().asCharString());
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	7a1b      	ldrb	r3, [r3, #8]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d01a      	beq.n	800f158 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x48>
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	332c      	adds	r3, #44	; 0x2c
 800f128:	681c      	ldr	r4, [r3, #0]
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	3314      	adds	r3, #20
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	f107 0208 	add.w	r2, r7, #8
 800f136:	6839      	ldr	r1, [r7, #0]
 800f138:	4610      	mov	r0, r2
 800f13a:	4798      	blx	r3
 800f13c:	f107 0308 	add.w	r3, r7, #8
 800f140:	4618      	mov	r0, r3
 800f142:	f7fc fd75 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800f146:	4603      	mov	r3, r0
 800f148:	4619      	mov	r1, r3
 800f14a:	6878      	ldr	r0, [r7, #4]
 800f14c:	47a0      	blx	r4
 800f14e:	f107 0308 	add.w	r3, r7, #8
 800f152:	4618      	mov	r0, r3
 800f154:	f7fc fd99 	bl	800bc8a <_ZN12SimpleStringD1Ev>

    if (test.willRun()) {
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	3318      	adds	r3, #24
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	6838      	ldr	r0, [r7, #0]
 800f162:	4798      	blx	r3
 800f164:	4603      	mov	r3, r0
 800f166:	2b00      	cmp	r3, #0
 800f168:	d007      	beq.n	800f17a <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x6a>
       setProgressIndicator(".");
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	3344      	adds	r3, #68	; 0x44
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	4907      	ldr	r1, [pc, #28]	; (800f190 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x80>)
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	4798      	blx	r3
    }
    else {
       setProgressIndicator("!");
    }
}
 800f178:	e006      	b.n	800f188 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x78>
       setProgressIndicator("!");
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	3344      	adds	r3, #68	; 0x44
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	4904      	ldr	r1, [pc, #16]	; (800f194 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x84>)
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	4798      	blx	r3
}
 800f188:	bf00      	nop
 800f18a:	3714      	adds	r7, #20
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd90      	pop	{r4, r7, pc}
 800f190:	080232e8 	.word	0x080232e8
 800f194:	080232ec 	.word	0x080232ec

0800f198 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult>:

void TestOutput::printCurrentTestEnded(const TestResult& res)
{
 800f198:	b590      	push	{r4, r7, lr}
 800f19a:	b083      	sub	sp, #12
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
 800f1a0:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) {
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	7a1b      	ldrb	r3, [r3, #8]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d019      	beq.n	800f1de <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x46>
        print(" - ");
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	332c      	adds	r3, #44	; 0x2c
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	4910      	ldr	r1, [pc, #64]	; (800f1f4 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x5c>)
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	4798      	blx	r3
        print(res.getCurrentTestTotalExecutionTime());
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	3334      	adds	r3, #52	; 0x34
 800f1be:	681c      	ldr	r4, [r3, #0]
 800f1c0:	6838      	ldr	r0, [r7, #0]
 800f1c2:	f002 f845 	bl	8011250 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	4619      	mov	r1, r3
 800f1ca:	6878      	ldr	r0, [r7, #4]
 800f1cc:	47a0      	blx	r4
        print(" ms\n");
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	332c      	adds	r3, #44	; 0x2c
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	4908      	ldr	r1, [pc, #32]	; (800f1f8 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x60>)
 800f1d8:	6878      	ldr	r0, [r7, #4]
 800f1da:	4798      	blx	r3
    }
    else {
        printProgressIndicator();
    }
}
 800f1dc:	e005      	b.n	800f1ea <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x52>
        printProgressIndicator();
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	3358      	adds	r3, #88	; 0x58
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	4798      	blx	r3
}
 800f1ea:	bf00      	nop
 800f1ec:	370c      	adds	r7, #12
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bd90      	pop	{r4, r7, pc}
 800f1f2:	bf00      	nop
 800f1f4:	080232f0 	.word	0x080232f0
 800f1f8:	080232f4 	.word	0x080232f4

0800f1fc <_ZN10TestOutput22printProgressIndicatorEv>:

void TestOutput::printProgressIndicator()
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b082      	sub	sp, #8
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
    print(progressIndication_);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	332c      	adds	r3, #44	; 0x2c
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	687a      	ldr	r2, [r7, #4]
 800f20e:	68d2      	ldr	r2, [r2, #12]
 800f210:	4611      	mov	r1, r2
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	4798      	blx	r3
    if (++dotCount_ % 50 == 0) print("\n");
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	685b      	ldr	r3, [r3, #4]
 800f21a:	1c5a      	adds	r2, r3, #1
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	605a      	str	r2, [r3, #4]
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	685a      	ldr	r2, [r3, #4]
 800f224:	4b0d      	ldr	r3, [pc, #52]	; (800f25c <_ZN10TestOutput22printProgressIndicatorEv+0x60>)
 800f226:	fb83 1302 	smull	r1, r3, r3, r2
 800f22a:	1119      	asrs	r1, r3, #4
 800f22c:	17d3      	asrs	r3, r2, #31
 800f22e:	1acb      	subs	r3, r1, r3
 800f230:	2132      	movs	r1, #50	; 0x32
 800f232:	fb01 f303 	mul.w	r3, r1, r3
 800f236:	1ad3      	subs	r3, r2, r3
 800f238:	2b00      	cmp	r3, #0
 800f23a:	bf0c      	ite	eq
 800f23c:	2301      	moveq	r3, #1
 800f23e:	2300      	movne	r3, #0
 800f240:	b2db      	uxtb	r3, r3
 800f242:	2b00      	cmp	r3, #0
 800f244:	d006      	beq.n	800f254 <_ZN10TestOutput22printProgressIndicatorEv+0x58>
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	332c      	adds	r3, #44	; 0x2c
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	4904      	ldr	r1, [pc, #16]	; (800f260 <_ZN10TestOutput22printProgressIndicatorEv+0x64>)
 800f250:	6878      	ldr	r0, [r7, #4]
 800f252:	4798      	blx	r3
}
 800f254:	bf00      	nop
 800f256:	3708      	adds	r7, #8
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd80      	pop	{r7, pc}
 800f25c:	51eb851f 	.word	0x51eb851f
 800f260:	080232fc 	.word	0x080232fc

0800f264 <_ZN10TestOutput20setProgressIndicatorEPKc>:

void TestOutput::setProgressIndicator(const char* indicator)
{
 800f264:	b480      	push	{r7}
 800f266:	b083      	sub	sp, #12
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
 800f26c:	6039      	str	r1, [r7, #0]
    progressIndication_ = indicator;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	683a      	ldr	r2, [r7, #0]
 800f272:	60da      	str	r2, [r3, #12]
}
 800f274:	bf00      	nop
 800f276:	370c      	adds	r7, #12
 800f278:	46bd      	mov	sp, r7
 800f27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27e:	4770      	bx	lr

0800f280 <_ZN10TestOutput17printTestsStartedEv>:

void TestOutput::printTestsStarted()
{
 800f280:	b480      	push	{r7}
 800f282:	b083      	sub	sp, #12
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
}
 800f288:	bf00      	nop
 800f28a:	370c      	adds	r7, #12
 800f28c:	46bd      	mov	sp, r7
 800f28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f292:	4770      	bx	lr

0800f294 <_ZN10TestOutput24printCurrentGroupStartedERK10UtestShell>:

void TestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 800f294:	b480      	push	{r7}
 800f296:	b083      	sub	sp, #12
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
 800f29c:	6039      	str	r1, [r7, #0]
}
 800f29e:	bf00      	nop
 800f2a0:	370c      	adds	r7, #12
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a8:	4770      	bx	lr

0800f2aa <_ZN10TestOutput22printCurrentGroupEndedERK10TestResult>:

void TestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800f2aa:	b480      	push	{r7}
 800f2ac:	b083      	sub	sp, #12
 800f2ae:	af00      	add	r7, sp, #0
 800f2b0:	6078      	str	r0, [r7, #4]
 800f2b2:	6039      	str	r1, [r7, #0]
}
 800f2b4:	bf00      	nop
 800f2b6:	370c      	adds	r7, #12
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2be:	4770      	bx	lr

0800f2c0 <_ZN10TestOutput15printTestsEndedERK10TestResult>:

void TestOutput::printTestsEnded(const TestResult& result)
{
 800f2c0:	b590      	push	{r4, r7, lr}
 800f2c2:	b085      	sub	sp, #20
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
 800f2c8:	6039      	str	r1, [r7, #0]
    print("\n");
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	332c      	adds	r3, #44	; 0x2c
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	496f      	ldr	r1, [pc, #444]	; (800f490 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d0>)
 800f2d4:	6878      	ldr	r0, [r7, #4]
 800f2d6:	4798      	blx	r3
    const bool isFailure = result.isFailure();
 800f2d8:	6838      	ldr	r0, [r7, #0]
 800f2da:	f7f8 f83d 	bl	8007358 <_ZNK10TestResult9isFailureEv>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	73fb      	strb	r3, [r7, #15]
    const size_t failureCount = result.getFailureCount();
 800f2e2:	6838      	ldr	r0, [r7, #0]
 800f2e4:	f7f8 f82c 	bl	8007340 <_ZNK10TestResult15getFailureCountEv>
 800f2e8:	60b8      	str	r0, [r7, #8]
    if (isFailure) {
 800f2ea:	7bfb      	ldrb	r3, [r7, #15]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d02b      	beq.n	800f348 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x88>
        if (color_) {
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	7a5b      	ldrb	r3, [r3, #9]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d006      	beq.n	800f306 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x46>
            print("\033[31;1m");
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	332c      	adds	r3, #44	; 0x2c
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	4964      	ldr	r1, [pc, #400]	; (800f494 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d4>)
 800f302:	6878      	ldr	r0, [r7, #4]
 800f304:	4798      	blx	r3
        }
        print("Errors (");
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	332c      	adds	r3, #44	; 0x2c
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	4962      	ldr	r1, [pc, #392]	; (800f498 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d8>)
 800f310:	6878      	ldr	r0, [r7, #4]
 800f312:	4798      	blx	r3
        if (failureCount > 0) {
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d00e      	beq.n	800f338 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x78>
            print(failureCount);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	3334      	adds	r3, #52	; 0x34
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	68b9      	ldr	r1, [r7, #8]
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	4798      	blx	r3
            print(" failures, ");
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	332c      	adds	r3, #44	; 0x2c
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	495a      	ldr	r1, [pc, #360]	; (800f49c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1dc>)
 800f332:	6878      	ldr	r0, [r7, #4]
 800f334:	4798      	blx	r3
 800f336:	e019      	b.n	800f36c <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
        else {
            print("ran nothing, ");
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	332c      	adds	r3, #44	; 0x2c
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	4957      	ldr	r1, [pc, #348]	; (800f4a0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e0>)
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	4798      	blx	r3
 800f346:	e011      	b.n	800f36c <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
    }
    else {
        if (color_) {
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	7a5b      	ldrb	r3, [r3, #9]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d006      	beq.n	800f35e <_ZN10TestOutput15printTestsEndedERK10TestResult+0x9e>
            print("\033[32;1m");
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	332c      	adds	r3, #44	; 0x2c
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	4952      	ldr	r1, [pc, #328]	; (800f4a4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e4>)
 800f35a:	6878      	ldr	r0, [r7, #4]
 800f35c:	4798      	blx	r3
        }
        print("OK (");
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	332c      	adds	r3, #44	; 0x2c
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	4950      	ldr	r1, [pc, #320]	; (800f4a8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e8>)
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	4798      	blx	r3
    }
    print(result.getTestCount());
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	3334      	adds	r3, #52	; 0x34
 800f372:	681c      	ldr	r4, [r3, #0]
 800f374:	6838      	ldr	r0, [r7, #0]
 800f376:	f7ff fdd1 	bl	800ef1c <_ZNK10TestResult12getTestCountEv>
 800f37a:	4603      	mov	r3, r0
 800f37c:	4619      	mov	r1, r3
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	47a0      	blx	r4
    print(" tests, ");
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	332c      	adds	r3, #44	; 0x2c
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	4948      	ldr	r1, [pc, #288]	; (800f4ac <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1ec>)
 800f38c:	6878      	ldr	r0, [r7, #4]
 800f38e:	4798      	blx	r3
    print(result.getRunCount());
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	3334      	adds	r3, #52	; 0x34
 800f396:	681c      	ldr	r4, [r3, #0]
 800f398:	6838      	ldr	r0, [r7, #0]
 800f39a:	f7f7 ffb9 	bl	8007310 <_ZNK10TestResult11getRunCountEv>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	4619      	mov	r1, r3
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	47a0      	blx	r4
    print(" ran, ");
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	332c      	adds	r3, #44	; 0x2c
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	4940      	ldr	r1, [pc, #256]	; (800f4b0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f0>)
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	4798      	blx	r3
    print(result.getCheckCount());
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	3334      	adds	r3, #52	; 0x34
 800f3ba:	681c      	ldr	r4, [r3, #0]
 800f3bc:	6838      	ldr	r0, [r7, #0]
 800f3be:	f7f8 fc13 	bl	8007be8 <_ZNK10TestResult13getCheckCountEv>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	4619      	mov	r1, r3
 800f3c6:	6878      	ldr	r0, [r7, #4]
 800f3c8:	47a0      	blx	r4
    print(" checks, ");
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	332c      	adds	r3, #44	; 0x2c
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	4938      	ldr	r1, [pc, #224]	; (800f4b4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f4>)
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	4798      	blx	r3
    print(result.getIgnoredCount());
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	3334      	adds	r3, #52	; 0x34
 800f3de:	681c      	ldr	r4, [r3, #0]
 800f3e0:	6838      	ldr	r0, [r7, #0]
 800f3e2:	f7f7 ffa1 	bl	8007328 <_ZNK10TestResult15getIgnoredCountEv>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	4619      	mov	r1, r3
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	47a0      	blx	r4
    print(" ignored, ");
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	332c      	adds	r3, #44	; 0x2c
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	4930      	ldr	r1, [pc, #192]	; (800f4b8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f8>)
 800f3f8:	6878      	ldr	r0, [r7, #4]
 800f3fa:	4798      	blx	r3
    print(result.getFilteredOutCount());
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	3334      	adds	r3, #52	; 0x34
 800f402:	681c      	ldr	r4, [r3, #0]
 800f404:	6838      	ldr	r0, [r7, #0]
 800f406:	f7ff fd95 	bl	800ef34 <_ZNK10TestResult19getFilteredOutCountEv>
 800f40a:	4603      	mov	r3, r0
 800f40c:	4619      	mov	r1, r3
 800f40e:	6878      	ldr	r0, [r7, #4]
 800f410:	47a0      	blx	r4
    print(" filtered out, ");
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	332c      	adds	r3, #44	; 0x2c
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	4928      	ldr	r1, [pc, #160]	; (800f4bc <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1fc>)
 800f41c:	6878      	ldr	r0, [r7, #4]
 800f41e:	4798      	blx	r3
    print(result.getTotalExecutionTime());
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	3334      	adds	r3, #52	; 0x34
 800f426:	681c      	ldr	r4, [r3, #0]
 800f428:	6838      	ldr	r0, [r7, #0]
 800f42a:	f001 ff05 	bl	8011238 <_ZNK10TestResult21getTotalExecutionTimeEv>
 800f42e:	4603      	mov	r3, r0
 800f430:	4619      	mov	r1, r3
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	47a0      	blx	r4
    print(" ms)");
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	332c      	adds	r3, #44	; 0x2c
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	4920      	ldr	r1, [pc, #128]	; (800f4c0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x200>)
 800f440:	6878      	ldr	r0, [r7, #4]
 800f442:	4798      	blx	r3
    if (color_) {
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	7a5b      	ldrb	r3, [r3, #9]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d006      	beq.n	800f45a <_ZN10TestOutput15printTestsEndedERK10TestResult+0x19a>
        print("\033[m");
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	332c      	adds	r3, #44	; 0x2c
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	491b      	ldr	r1, [pc, #108]	; (800f4c4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x204>)
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	4798      	blx	r3
    }
    if (isFailure && failureCount == 0) {
 800f45a:	7bfb      	ldrb	r3, [r7, #15]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d009      	beq.n	800f474 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
 800f460:	68bb      	ldr	r3, [r7, #8]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d106      	bne.n	800f474 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
              "This often happens because of linking errors or typos in test filter.");
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	332c      	adds	r3, #44	; 0x2c
 800f46c:	681b      	ldr	r3, [r3, #0]
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
 800f46e:	4916      	ldr	r1, [pc, #88]	; (800f4c8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x208>)
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	4798      	blx	r3
    }
    print("\n\n");
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	332c      	adds	r3, #44	; 0x2c
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	4913      	ldr	r1, [pc, #76]	; (800f4cc <_ZN10TestOutput15printTestsEndedERK10TestResult+0x20c>)
 800f47e:	6878      	ldr	r0, [r7, #4]
 800f480:	4798      	blx	r3

    dotCount_ = 0;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	2200      	movs	r2, #0
 800f486:	605a      	str	r2, [r3, #4]
}
 800f488:	bf00      	nop
 800f48a:	3714      	adds	r7, #20
 800f48c:	46bd      	mov	sp, r7
 800f48e:	bd90      	pop	{r4, r7, pc}
 800f490:	080232fc 	.word	0x080232fc
 800f494:	08023300 	.word	0x08023300
 800f498:	08023308 	.word	0x08023308
 800f49c:	08023314 	.word	0x08023314
 800f4a0:	08023320 	.word	0x08023320
 800f4a4:	08023330 	.word	0x08023330
 800f4a8:	08023338 	.word	0x08023338
 800f4ac:	08023340 	.word	0x08023340
 800f4b0:	0802334c 	.word	0x0802334c
 800f4b4:	08023354 	.word	0x08023354
 800f4b8:	08023360 	.word	0x08023360
 800f4bc:	0802336c 	.word	0x0802336c
 800f4c0:	0802337c 	.word	0x0802337c
 800f4c4:	08023384 	.word	0x08023384
 800f4c8:	08023388 	.word	0x08023388
 800f4cc:	0802342c 	.word	0x0802342c

0800f4d0 <_ZN10TestOutput12printTestRunEjj>:

void TestOutput::printTestRun(size_t number, size_t total)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b084      	sub	sp, #16
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	60f8      	str	r0, [r7, #12]
 800f4d8:	60b9      	str	r1, [r7, #8]
 800f4da:	607a      	str	r2, [r7, #4]
    if (total > 1) {
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2b01      	cmp	r3, #1
 800f4e0:	d922      	bls.n	800f528 <_ZN10TestOutput12printTestRunEjj+0x58>
        print("Test run ");
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	332c      	adds	r3, #44	; 0x2c
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	4911      	ldr	r1, [pc, #68]	; (800f530 <_ZN10TestOutput12printTestRunEjj+0x60>)
 800f4ec:	68f8      	ldr	r0, [r7, #12]
 800f4ee:	4798      	blx	r3
        print(number);
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	3334      	adds	r3, #52	; 0x34
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	68b9      	ldr	r1, [r7, #8]
 800f4fa:	68f8      	ldr	r0, [r7, #12]
 800f4fc:	4798      	blx	r3
        print(" of ");
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	332c      	adds	r3, #44	; 0x2c
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	490b      	ldr	r1, [pc, #44]	; (800f534 <_ZN10TestOutput12printTestRunEjj+0x64>)
 800f508:	68f8      	ldr	r0, [r7, #12]
 800f50a:	4798      	blx	r3
        print(total);
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	3334      	adds	r3, #52	; 0x34
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	6879      	ldr	r1, [r7, #4]
 800f516:	68f8      	ldr	r0, [r7, #12]
 800f518:	4798      	blx	r3
        print("\n");
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	332c      	adds	r3, #44	; 0x2c
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	4905      	ldr	r1, [pc, #20]	; (800f538 <_ZN10TestOutput12printTestRunEjj+0x68>)
 800f524:	68f8      	ldr	r0, [r7, #12]
 800f526:	4798      	blx	r3
    }
}
 800f528:	bf00      	nop
 800f52a:	3710      	adds	r7, #16
 800f52c:	46bd      	mov	sp, r7
 800f52e:	bd80      	pop	{r7, pc}
 800f530:	08023430 	.word	0x08023430
 800f534:	0802343c 	.word	0x0802343c
 800f538:	080232fc 	.word	0x080232fc

0800f53c <_ZN10TestOutput12printFailureERK11TestFailure>:

void TestOutput::printFailure(const TestFailure& failure)
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b084      	sub	sp, #16
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
 800f544:	6039      	str	r1, [r7, #0]
    if (failure.isOutsideTestFile() || failure.isInHelperFunction())
 800f546:	6838      	ldr	r0, [r7, #0]
 800f548:	f7fd ffa1 	bl	800d48e <_ZNK11TestFailure17isOutsideTestFileEv>
 800f54c:	4603      	mov	r3, r0
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d105      	bne.n	800f55e <_ZN10TestOutput12printFailureERK11TestFailure+0x22>
 800f552:	6838      	ldr	r0, [r7, #0]
 800f554:	f7fd ffad 	bl	800d4b2 <_ZNK11TestFailure18isInHelperFunctionEv>
 800f558:	4603      	mov	r3, r0
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d001      	beq.n	800f562 <_ZN10TestOutput12printFailureERK11TestFailure+0x26>
 800f55e:	2301      	movs	r3, #1
 800f560:	e000      	b.n	800f564 <_ZN10TestOutput12printFailureERK11TestFailure+0x28>
 800f562:	2300      	movs	r3, #0
 800f564:	2b00      	cmp	r3, #0
 800f566:	d004      	beq.n	800f572 <_ZN10TestOutput12printFailureERK11TestFailure+0x36>
        printFileAndLineForTestAndFailure(failure);
 800f568:	6839      	ldr	r1, [r7, #0]
 800f56a:	6878      	ldr	r0, [r7, #4]
 800f56c:	f000 f81d 	bl	800f5aa <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>
 800f570:	e003      	b.n	800f57a <_ZN10TestOutput12printFailureERK11TestFailure+0x3e>
    else
        printFileAndLineForFailure(failure);
 800f572:	6839      	ldr	r1, [r7, #0]
 800f574:	6878      	ldr	r0, [r7, #4]
 800f576:	f000 f86b 	bl	800f650 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>

    printFailureMessage(failure.getMessage());
 800f57a:	683b      	ldr	r3, [r7, #0]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	3318      	adds	r3, #24
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	f107 0208 	add.w	r2, r7, #8
 800f586:	6839      	ldr	r1, [r7, #0]
 800f588:	4610      	mov	r0, r2
 800f58a:	4798      	blx	r3
 800f58c:	f107 0308 	add.w	r3, r7, #8
 800f590:	4619      	mov	r1, r3
 800f592:	6878      	ldr	r0, [r7, #4]
 800f594:	f000 f8b2 	bl	800f6fc <_ZN10TestOutput19printFailureMessageE12SimpleString>
 800f598:	f107 0308 	add.w	r3, r7, #8
 800f59c:	4618      	mov	r0, r3
 800f59e:	f7fc fb74 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 800f5a2:	bf00      	nop
 800f5a4:	3710      	adds	r7, #16
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}

0800f5aa <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>:

void TestOutput::printFileAndLineForTestAndFailure(const TestFailure& failure)
{
 800f5aa:	b580      	push	{r7, lr}
 800f5ac:	b088      	sub	sp, #32
 800f5ae:	af00      	add	r7, sp, #0
 800f5b0:	6078      	str	r0, [r7, #4]
 800f5b2:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getTestFileName(), failure.getTestLineNumber());
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	331c      	adds	r3, #28
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	f107 0208 	add.w	r2, r7, #8
 800f5c0:	6839      	ldr	r1, [r7, #0]
 800f5c2:	4610      	mov	r0, r2
 800f5c4:	4798      	blx	r3
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	3320      	adds	r3, #32
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	6838      	ldr	r0, [r7, #0]
 800f5d0:	4798      	blx	r3
 800f5d2:	4602      	mov	r2, r0
 800f5d4:	f107 0308 	add.w	r3, r7, #8
 800f5d8:	4619      	mov	r1, r3
 800f5da:	6878      	ldr	r0, [r7, #4]
 800f5dc:	f000 f8be 	bl	800f75c <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800f5e0:	f107 0308 	add.w	r3, r7, #8
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f7fc fb50 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	330c      	adds	r3, #12
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	f107 0210 	add.w	r2, r7, #16
 800f5f6:	6839      	ldr	r1, [r7, #0]
 800f5f8:	4610      	mov	r0, r2
 800f5fa:	4798      	blx	r3
 800f5fc:	f107 0310 	add.w	r3, r7, #16
 800f600:	4619      	mov	r1, r3
 800f602:	6878      	ldr	r0, [r7, #4]
 800f604:	f000 f85c 	bl	800f6c0 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800f608:	f107 0310 	add.w	r3, r7, #16
 800f60c:	4618      	mov	r0, r3
 800f60e:	f7fc fb3c 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	3308      	adds	r3, #8
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	f107 0218 	add.w	r2, r7, #24
 800f61e:	6839      	ldr	r1, [r7, #0]
 800f620:	4610      	mov	r0, r2
 800f622:	4798      	blx	r3
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	3314      	adds	r3, #20
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	6838      	ldr	r0, [r7, #0]
 800f62e:	4798      	blx	r3
 800f630:	4602      	mov	r2, r0
 800f632:	f107 0318 	add.w	r3, r7, #24
 800f636:	4619      	mov	r1, r3
 800f638:	6878      	ldr	r0, [r7, #4]
 800f63a:	f000 f88f 	bl	800f75c <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800f63e:	f107 0318 	add.w	r3, r7, #24
 800f642:	4618      	mov	r0, r3
 800f644:	f7fc fb21 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 800f648:	bf00      	nop
 800f64a:	3720      	adds	r7, #32
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd80      	pop	{r7, pc}

0800f650 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>:

void TestOutput::printFileAndLineForFailure(const TestFailure& failure)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b086      	sub	sp, #24
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
 800f658:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	3308      	adds	r3, #8
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	f107 0208 	add.w	r2, r7, #8
 800f666:	6839      	ldr	r1, [r7, #0]
 800f668:	4610      	mov	r0, r2
 800f66a:	4798      	blx	r3
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	3314      	adds	r3, #20
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	6838      	ldr	r0, [r7, #0]
 800f676:	4798      	blx	r3
 800f678:	4602      	mov	r2, r0
 800f67a:	f107 0308 	add.w	r3, r7, #8
 800f67e:	4619      	mov	r1, r3
 800f680:	6878      	ldr	r0, [r7, #4]
 800f682:	f000 f86b 	bl	800f75c <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800f686:	f107 0308 	add.w	r3, r7, #8
 800f68a:	4618      	mov	r0, r3
 800f68c:	f7fc fafd 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	330c      	adds	r3, #12
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	f107 0210 	add.w	r2, r7, #16
 800f69c:	6839      	ldr	r1, [r7, #0]
 800f69e:	4610      	mov	r0, r2
 800f6a0:	4798      	blx	r3
 800f6a2:	f107 0310 	add.w	r3, r7, #16
 800f6a6:	4619      	mov	r1, r3
 800f6a8:	6878      	ldr	r0, [r7, #4]
 800f6aa:	f000 f809 	bl	800f6c0 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800f6ae:	f107 0310 	add.w	r3, r7, #16
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	f7fc fae9 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 800f6b8:	bf00      	nop
 800f6ba:	3718      	adds	r7, #24
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	bd80      	pop	{r7, pc}

0800f6c0 <_ZN10TestOutput18printFailureInTestE12SimpleString>:

void TestOutput::printFailureInTest(SimpleString testName)
{
 800f6c0:	b590      	push	{r4, r7, lr}
 800f6c2:	b083      	sub	sp, #12
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
 800f6c8:	6039      	str	r1, [r7, #0]
    print(" Failure in ");
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	332c      	adds	r3, #44	; 0x2c
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	4909      	ldr	r1, [pc, #36]	; (800f6f8 <_ZN10TestOutput18printFailureInTestE12SimpleString+0x38>)
 800f6d4:	6878      	ldr	r0, [r7, #4]
 800f6d6:	4798      	blx	r3
    print(testName.asCharString());
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	332c      	adds	r3, #44	; 0x2c
 800f6de:	681c      	ldr	r4, [r3, #0]
 800f6e0:	6838      	ldr	r0, [r7, #0]
 800f6e2:	f7fc faa5 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	4619      	mov	r1, r3
 800f6ea:	6878      	ldr	r0, [r7, #4]
 800f6ec:	47a0      	blx	r4
}
 800f6ee:	bf00      	nop
 800f6f0:	370c      	adds	r7, #12
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd90      	pop	{r4, r7, pc}
 800f6f6:	bf00      	nop
 800f6f8:	08023444 	.word	0x08023444

0800f6fc <_ZN10TestOutput19printFailureMessageE12SimpleString>:

void TestOutput::printFailureMessage(SimpleString reason)
{
 800f6fc:	b590      	push	{r4, r7, lr}
 800f6fe:	b083      	sub	sp, #12
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
 800f704:	6039      	str	r1, [r7, #0]
    print("\n");
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	332c      	adds	r3, #44	; 0x2c
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	4910      	ldr	r1, [pc, #64]	; (800f750 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x54>)
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	4798      	blx	r3
    print("\t");
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	332c      	adds	r3, #44	; 0x2c
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	490d      	ldr	r1, [pc, #52]	; (800f754 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x58>)
 800f71e:	6878      	ldr	r0, [r7, #4]
 800f720:	4798      	blx	r3
    print(reason.asCharString());
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	332c      	adds	r3, #44	; 0x2c
 800f728:	681c      	ldr	r4, [r3, #0]
 800f72a:	6838      	ldr	r0, [r7, #0]
 800f72c:	f7fc fa80 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800f730:	4603      	mov	r3, r0
 800f732:	4619      	mov	r1, r3
 800f734:	6878      	ldr	r0, [r7, #4]
 800f736:	47a0      	blx	r4
    print("\n\n");
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	332c      	adds	r3, #44	; 0x2c
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	4905      	ldr	r1, [pc, #20]	; (800f758 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x5c>)
 800f742:	6878      	ldr	r0, [r7, #4]
 800f744:	4798      	blx	r3
}
 800f746:	bf00      	nop
 800f748:	370c      	adds	r7, #12
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd90      	pop	{r4, r7, pc}
 800f74e:	bf00      	nop
 800f750:	080232fc 	.word	0x080232fc
 800f754:	08023454 	.word	0x08023454
 800f758:	0802342c 	.word	0x0802342c

0800f75c <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>:

void TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString file, size_t lineNumber)
{
 800f75c:	b590      	push	{r4, r7, lr}
 800f75e:	b089      	sub	sp, #36	; 0x24
 800f760:	af00      	add	r7, sp, #0
 800f762:	60f8      	str	r0, [r7, #12]
 800f764:	60b9      	str	r1, [r7, #8]
 800f766:	607a      	str	r2, [r7, #4]
    if (TestOutput::getWorkingEnvironment() == TestOutput::visualStudio)
 800f768:	f7ff fbf0 	bl	800ef4c <_ZN10TestOutput21getWorkingEnvironmentEv>
 800f76c:	4603      	mov	r3, r0
 800f76e:	2b00      	cmp	r3, #0
 800f770:	bf0c      	ite	eq
 800f772:	2301      	moveq	r3, #1
 800f774:	2300      	movne	r3, #0
 800f776:	b2db      	uxtb	r3, r3
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d015      	beq.n	800f7a8 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x4c>
        printVisualStudioErrorInFileOnLine(file, lineNumber);
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	3354      	adds	r3, #84	; 0x54
 800f782:	681c      	ldr	r4, [r3, #0]
 800f784:	f107 0310 	add.w	r3, r7, #16
 800f788:	68b9      	ldr	r1, [r7, #8]
 800f78a:	4618      	mov	r0, r3
 800f78c:	f7fb ff19 	bl	800b5c2 <_ZN12SimpleStringC1ERKS_>
 800f790:	f107 0310 	add.w	r3, r7, #16
 800f794:	687a      	ldr	r2, [r7, #4]
 800f796:	4619      	mov	r1, r3
 800f798:	68f8      	ldr	r0, [r7, #12]
 800f79a:	47a0      	blx	r4
 800f79c:	f107 0310 	add.w	r3, r7, #16
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	f7fc fa72 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    else
        printEclipseErrorInFileOnLine(file, lineNumber);
}
 800f7a6:	e014      	b.n	800f7d2 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x76>
        printEclipseErrorInFileOnLine(file, lineNumber);
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	3350      	adds	r3, #80	; 0x50
 800f7ae:	681c      	ldr	r4, [r3, #0]
 800f7b0:	f107 0318 	add.w	r3, r7, #24
 800f7b4:	68b9      	ldr	r1, [r7, #8]
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	f7fb ff03 	bl	800b5c2 <_ZN12SimpleStringC1ERKS_>
 800f7bc:	f107 0318 	add.w	r3, r7, #24
 800f7c0:	687a      	ldr	r2, [r7, #4]
 800f7c2:	4619      	mov	r1, r3
 800f7c4:	68f8      	ldr	r0, [r7, #12]
 800f7c6:	47a0      	blx	r4
 800f7c8:	f107 0318 	add.w	r3, r7, #24
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f7fc fa5c 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 800f7d2:	bf00      	nop
 800f7d4:	3724      	adds	r7, #36	; 0x24
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd90      	pop	{r4, r7, pc}
	...

0800f7dc <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printEclipseErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800f7dc:	b590      	push	{r4, r7, lr}
 800f7de:	b085      	sub	sp, #20
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	60f8      	str	r0, [r7, #12]
 800f7e4:	60b9      	str	r1, [r7, #8]
 800f7e6:	607a      	str	r2, [r7, #4]
    print("\n");
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	332c      	adds	r3, #44	; 0x2c
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	4916      	ldr	r1, [pc, #88]	; (800f84c <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x70>)
 800f7f2:	68f8      	ldr	r0, [r7, #12]
 800f7f4:	4798      	blx	r3
    print(file.asCharString());
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	332c      	adds	r3, #44	; 0x2c
 800f7fc:	681c      	ldr	r4, [r3, #0]
 800f7fe:	68b8      	ldr	r0, [r7, #8]
 800f800:	f7fc fa16 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800f804:	4603      	mov	r3, r0
 800f806:	4619      	mov	r1, r3
 800f808:	68f8      	ldr	r0, [r7, #12]
 800f80a:	47a0      	blx	r4
    print(":");
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	332c      	adds	r3, #44	; 0x2c
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	490e      	ldr	r1, [pc, #56]	; (800f850 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800f816:	68f8      	ldr	r0, [r7, #12]
 800f818:	4798      	blx	r3
    print(lineNumber);
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	3334      	adds	r3, #52	; 0x34
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	6879      	ldr	r1, [r7, #4]
 800f824:	68f8      	ldr	r0, [r7, #12]
 800f826:	4798      	blx	r3
    print(":");
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	332c      	adds	r3, #44	; 0x2c
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	4907      	ldr	r1, [pc, #28]	; (800f850 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800f832:	68f8      	ldr	r0, [r7, #12]
 800f834:	4798      	blx	r3
    print(" error:");
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	332c      	adds	r3, #44	; 0x2c
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	4905      	ldr	r1, [pc, #20]	; (800f854 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x78>)
 800f840:	68f8      	ldr	r0, [r7, #12]
 800f842:	4798      	blx	r3
}
 800f844:	bf00      	nop
 800f846:	3714      	adds	r7, #20
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd90      	pop	{r4, r7, pc}
 800f84c:	080232fc 	.word	0x080232fc
 800f850:	08023458 	.word	0x08023458
 800f854:	0802345c 	.word	0x0802345c

0800f858 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printVisualStudioErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800f858:	b590      	push	{r4, r7, lr}
 800f85a:	b085      	sub	sp, #20
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	60f8      	str	r0, [r7, #12]
 800f860:	60b9      	str	r1, [r7, #8]
 800f862:	607a      	str	r2, [r7, #4]
    print("\n");
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	332c      	adds	r3, #44	; 0x2c
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	4916      	ldr	r1, [pc, #88]	; (800f8c8 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x70>)
 800f86e:	68f8      	ldr	r0, [r7, #12]
 800f870:	4798      	blx	r3
    print(file.asCharString());
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	332c      	adds	r3, #44	; 0x2c
 800f878:	681c      	ldr	r4, [r3, #0]
 800f87a:	68b8      	ldr	r0, [r7, #8]
 800f87c:	f7fc f9d8 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 800f880:	4603      	mov	r3, r0
 800f882:	4619      	mov	r1, r3
 800f884:	68f8      	ldr	r0, [r7, #12]
 800f886:	47a0      	blx	r4
    print("(");
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	332c      	adds	r3, #44	; 0x2c
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	490e      	ldr	r1, [pc, #56]	; (800f8cc <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x74>)
 800f892:	68f8      	ldr	r0, [r7, #12]
 800f894:	4798      	blx	r3
    print(lineNumber);
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	3334      	adds	r3, #52	; 0x34
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	6879      	ldr	r1, [r7, #4]
 800f8a0:	68f8      	ldr	r0, [r7, #12]
 800f8a2:	4798      	blx	r3
    print("):");
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	332c      	adds	r3, #44	; 0x2c
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	4908      	ldr	r1, [pc, #32]	; (800f8d0 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x78>)
 800f8ae:	68f8      	ldr	r0, [r7, #12]
 800f8b0:	4798      	blx	r3
    print(" error:");
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	332c      	adds	r3, #44	; 0x2c
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	4906      	ldr	r1, [pc, #24]	; (800f8d4 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x7c>)
 800f8bc:	68f8      	ldr	r0, [r7, #12]
 800f8be:	4798      	blx	r3
}
 800f8c0:	bf00      	nop
 800f8c2:	3714      	adds	r7, #20
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bd90      	pop	{r4, r7, pc}
 800f8c8:	080232fc 	.word	0x080232fc
 800f8cc:	08023464 	.word	0x08023464
 800f8d0:	08023468 	.word	0x08023468
 800f8d4:	0802345c 	.word	0x0802345c

0800f8d8 <_ZN10TestOutput16printVeryVerboseEPKc>:

void TestOutput::printVeryVerbose(const char* str)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b082      	sub	sp, #8
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
 800f8e0:	6039      	str	r1, [r7, #0]
    if(verbose_ == level_veryVerbose)
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	7a1b      	ldrb	r3, [r3, #8]
 800f8e6:	2b02      	cmp	r3, #2
 800f8e8:	d106      	bne.n	800f8f8 <_ZN10TestOutput16printVeryVerboseEPKc+0x20>
        printBuffer(str);
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	3328      	adds	r3, #40	; 0x28
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	6839      	ldr	r1, [r7, #0]
 800f8f4:	6878      	ldr	r0, [r7, #4]
 800f8f6:	4798      	blx	r3
}
 800f8f8:	bf00      	nop
 800f8fa:	3708      	adds	r7, #8
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	bd80      	pop	{r7, pc}

0800f900 <_ZN17ConsoleTestOutput11printBufferEPKc>:


void ConsoleTestOutput::printBuffer(const char* s)
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b082      	sub	sp, #8
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
 800f908:	6039      	str	r1, [r7, #0]
    while (*s) {
 800f90a:	683b      	ldr	r3, [r7, #0]
 800f90c:	781b      	ldrb	r3, [r3, #0]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d009      	beq.n	800f926 <_ZN17ConsoleTestOutput11printBufferEPKc+0x26>
        PlatformSpecificPutchar(*s);
 800f912:	4b0a      	ldr	r3, [pc, #40]	; (800f93c <_ZN17ConsoleTestOutput11printBufferEPKc+0x3c>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	683a      	ldr	r2, [r7, #0]
 800f918:	7812      	ldrb	r2, [r2, #0]
 800f91a:	4610      	mov	r0, r2
 800f91c:	4798      	blx	r3
        s++;
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	3301      	adds	r3, #1
 800f922:	603b      	str	r3, [r7, #0]
    while (*s) {
 800f924:	e7f1      	b.n	800f90a <_ZN17ConsoleTestOutput11printBufferEPKc+0xa>
    }
    flush();
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	334c      	adds	r3, #76	; 0x4c
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	6878      	ldr	r0, [r7, #4]
 800f930:	4798      	blx	r3
}
 800f932:	bf00      	nop
 800f934:	3708      	adds	r7, #8
 800f936:	46bd      	mov	sp, r7
 800f938:	bd80      	pop	{r7, pc}
 800f93a:	bf00      	nop
 800f93c:	200000c0 	.word	0x200000c0

0800f940 <_ZN17ConsoleTestOutput5flushEv>:

void ConsoleTestOutput::flush()
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b082      	sub	sp, #8
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
    PlatformSpecificFlush();
 800f948:	4b03      	ldr	r3, [pc, #12]	; (800f958 <_ZN17ConsoleTestOutput5flushEv+0x18>)
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	4798      	blx	r3
}
 800f94e:	bf00      	nop
 800f950:	3708      	adds	r7, #8
 800f952:	46bd      	mov	sp, r7
 800f954:	bd80      	pop	{r7, pc}
 800f956:	bf00      	nop
 800f958:	200000c4 	.word	0x200000c4

0800f95c <_ZN19CompositeTestOutputC1Ev>:

StringBufferTestOutput::~StringBufferTestOutput()
{
}

CompositeTestOutput::CompositeTestOutput()
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b082      	sub	sp, #8
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
  : outputOne_(NULLPTR), outputTwo_(NULLPTR)
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	4618      	mov	r0, r3
 800f968:	f7ff fb00 	bl	800ef6c <_ZN10TestOutputC1Ev>
 800f96c:	4a06      	ldr	r2, [pc, #24]	; (800f988 <_ZN19CompositeTestOutputC1Ev+0x2c>)
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	601a      	str	r2, [r3, #0]
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	2200      	movs	r2, #0
 800f976:	611a      	str	r2, [r3, #16]
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2200      	movs	r2, #0
 800f97c:	615a      	str	r2, [r3, #20]
{
}
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	4618      	mov	r0, r3
 800f982:	3708      	adds	r7, #8
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}
 800f988:	080265e8 	.word	0x080265e8

0800f98c <_ZN19CompositeTestOutputD1Ev>:

CompositeTestOutput::~CompositeTestOutput()
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b082      	sub	sp, #8
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
 800f994:	4a0e      	ldr	r2, [pc, #56]	; (800f9d0 <_ZN19CompositeTestOutputD1Ev+0x44>)
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	601a      	str	r2, [r3, #0]
{
  delete outputOne_;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	691b      	ldr	r3, [r3, #16]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d004      	beq.n	800f9ac <_ZN19CompositeTestOutputD1Ev+0x20>
 800f9a2:	681a      	ldr	r2, [r3, #0]
 800f9a4:	3204      	adds	r2, #4
 800f9a6:	6812      	ldr	r2, [r2, #0]
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	4790      	blx	r2
  delete outputTwo_;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	695b      	ldr	r3, [r3, #20]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d004      	beq.n	800f9be <_ZN19CompositeTestOutputD1Ev+0x32>
 800f9b4:	681a      	ldr	r2, [r3, #0]
 800f9b6:	3204      	adds	r2, #4
 800f9b8:	6812      	ldr	r2, [r2, #0]
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	4790      	blx	r2
CompositeTestOutput::~CompositeTestOutput()
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	f7ff faf1 	bl	800efa8 <_ZN10TestOutputD1Ev>
}
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	3708      	adds	r7, #8
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	bd80      	pop	{r7, pc}
 800f9d0:	080265e8 	.word	0x080265e8

0800f9d4 <_ZN19CompositeTestOutputD0Ev>:
CompositeTestOutput::~CompositeTestOutput()
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b082      	sub	sp, #8
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
}
 800f9dc:	6878      	ldr	r0, [r7, #4]
 800f9de:	f7ff ffd5 	bl	800f98c <_ZN19CompositeTestOutputD1Ev>
 800f9e2:	2118      	movs	r1, #24
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f7f9 f9e9 	bl	8008dbc <_ZdlPvj>
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	3708      	adds	r7, #8
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}

0800f9f4 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput>:

void CompositeTestOutput::setOutputOne(TestOutput* output)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b082      	sub	sp, #8
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
 800f9fc:	6039      	str	r1, [r7, #0]
  delete outputOne_;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	691b      	ldr	r3, [r3, #16]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d004      	beq.n	800fa10 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput+0x1c>
 800fa06:	681a      	ldr	r2, [r3, #0]
 800fa08:	3204      	adds	r2, #4
 800fa0a:	6812      	ldr	r2, [r2, #0]
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	4790      	blx	r2
  outputOne_ = output;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	683a      	ldr	r2, [r7, #0]
 800fa14:	611a      	str	r2, [r3, #16]
}
 800fa16:	bf00      	nop
 800fa18:	3708      	adds	r7, #8
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd80      	pop	{r7, pc}

0800fa1e <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput>:

void CompositeTestOutput::setOutputTwo(TestOutput* output)
{
 800fa1e:	b580      	push	{r7, lr}
 800fa20:	b082      	sub	sp, #8
 800fa22:	af00      	add	r7, sp, #0
 800fa24:	6078      	str	r0, [r7, #4]
 800fa26:	6039      	str	r1, [r7, #0]
  delete outputTwo_;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	695b      	ldr	r3, [r3, #20]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d004      	beq.n	800fa3a <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput+0x1c>
 800fa30:	681a      	ldr	r2, [r3, #0]
 800fa32:	3204      	adds	r2, #4
 800fa34:	6812      	ldr	r2, [r2, #0]
 800fa36:	4618      	mov	r0, r3
 800fa38:	4790      	blx	r2
  outputTwo_ = output;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	683a      	ldr	r2, [r7, #0]
 800fa3e:	615a      	str	r2, [r3, #20]
}
 800fa40:	bf00      	nop
 800fa42:	3708      	adds	r7, #8
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}

0800fa48 <_ZN19CompositeTestOutput17printTestsStartedEv>:

void CompositeTestOutput::printTestsStarted()
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b082      	sub	sp, #8
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->printTestsStarted();
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	691b      	ldr	r3, [r3, #16]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d008      	beq.n	800fa6a <_ZN19CompositeTestOutput17printTestsStartedEv+0x22>
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	691a      	ldr	r2, [r3, #16]
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	691b      	ldr	r3, [r3, #16]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	3308      	adds	r3, #8
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	4610      	mov	r0, r2
 800fa68:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsStarted();
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	695b      	ldr	r3, [r3, #20]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d008      	beq.n	800fa84 <_ZN19CompositeTestOutput17printTestsStartedEv+0x3c>
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	695a      	ldr	r2, [r3, #20]
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	695b      	ldr	r3, [r3, #20]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	3308      	adds	r3, #8
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	4610      	mov	r0, r2
 800fa82:	4798      	blx	r3
}
 800fa84:	bf00      	nop
 800fa86:	3708      	adds	r7, #8
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	bd80      	pop	{r7, pc}

0800fa8c <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult>:

void CompositeTestOutput::printTestsEnded(const TestResult& result)
{
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b082      	sub	sp, #8
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
 800fa94:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printTestsEnded(result);
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	691b      	ldr	r3, [r3, #16]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d009      	beq.n	800fab2 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x26>
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	691a      	ldr	r2, [r3, #16]
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	691b      	ldr	r3, [r3, #16]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	330c      	adds	r3, #12
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	6839      	ldr	r1, [r7, #0]
 800faae:	4610      	mov	r0, r2
 800fab0:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsEnded(result);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	695b      	ldr	r3, [r3, #20]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d009      	beq.n	800face <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x42>
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	695a      	ldr	r2, [r3, #20]
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	695b      	ldr	r3, [r3, #20]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	330c      	adds	r3, #12
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	6839      	ldr	r1, [r7, #0]
 800faca:	4610      	mov	r0, r2
 800facc:	4798      	blx	r3
}
 800face:	bf00      	nop
 800fad0:	3708      	adds	r7, #8
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}

0800fad6 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800fad6:	b580      	push	{r7, lr}
 800fad8:	b082      	sub	sp, #8
 800fada:	af00      	add	r7, sp, #0
 800fadc:	6078      	str	r0, [r7, #4]
 800fade:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestStarted(test);
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	691b      	ldr	r3, [r3, #16]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d009      	beq.n	800fafc <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x26>
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	691a      	ldr	r2, [r3, #16]
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	691b      	ldr	r3, [r3, #16]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	3310      	adds	r3, #16
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	6839      	ldr	r1, [r7, #0]
 800faf8:	4610      	mov	r0, r2
 800fafa:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestStarted(test);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	695b      	ldr	r3, [r3, #20]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d009      	beq.n	800fb18 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x42>
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	695a      	ldr	r2, [r3, #20]
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	695b      	ldr	r3, [r3, #20]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	3310      	adds	r3, #16
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	6839      	ldr	r1, [r7, #0]
 800fb14:	4610      	mov	r0, r2
 800fb16:	4798      	blx	r3
}
 800fb18:	bf00      	nop
 800fb1a:	3708      	adds	r7, #8
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}

0800fb20 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult>:

void CompositeTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b082      	sub	sp, #8
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
 800fb28:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestEnded(res);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	691b      	ldr	r3, [r3, #16]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d009      	beq.n	800fb46 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x26>
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	691a      	ldr	r2, [r3, #16]
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	691b      	ldr	r3, [r3, #16]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	3314      	adds	r3, #20
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	6839      	ldr	r1, [r7, #0]
 800fb42:	4610      	mov	r0, r2
 800fb44:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestEnded(res);
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	695b      	ldr	r3, [r3, #20]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d009      	beq.n	800fb62 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x42>
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	695a      	ldr	r2, [r3, #20]
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	695b      	ldr	r3, [r3, #20]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	3314      	adds	r3, #20
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	6839      	ldr	r1, [r7, #0]
 800fb5e:	4610      	mov	r0, r2
 800fb60:	4798      	blx	r3
}
 800fb62:	bf00      	nop
 800fb64:	3708      	adds	r7, #8
 800fb66:	46bd      	mov	sp, r7
 800fb68:	bd80      	pop	{r7, pc}

0800fb6a <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800fb6a:	b580      	push	{r7, lr}
 800fb6c:	b082      	sub	sp, #8
 800fb6e:	af00      	add	r7, sp, #0
 800fb70:	6078      	str	r0, [r7, #4]
 800fb72:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupStarted(test);
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	691b      	ldr	r3, [r3, #16]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d009      	beq.n	800fb90 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x26>
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	691a      	ldr	r2, [r3, #16]
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	691b      	ldr	r3, [r3, #16]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	3318      	adds	r3, #24
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	6839      	ldr	r1, [r7, #0]
 800fb8c:	4610      	mov	r0, r2
 800fb8e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupStarted(test);
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	695b      	ldr	r3, [r3, #20]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d009      	beq.n	800fbac <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x42>
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	695a      	ldr	r2, [r3, #20]
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	695b      	ldr	r3, [r3, #20]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	3318      	adds	r3, #24
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	6839      	ldr	r1, [r7, #0]
 800fba8:	4610      	mov	r0, r2
 800fbaa:	4798      	blx	r3
}
 800fbac:	bf00      	nop
 800fbae:	3708      	adds	r7, #8
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	bd80      	pop	{r7, pc}

0800fbb4 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult>:

void CompositeTestOutput::printCurrentGroupEnded(const TestResult& res)
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b082      	sub	sp, #8
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
 800fbbc:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupEnded(res);
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	691b      	ldr	r3, [r3, #16]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d009      	beq.n	800fbda <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x26>
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	691a      	ldr	r2, [r3, #16]
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	691b      	ldr	r3, [r3, #16]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	331c      	adds	r3, #28
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	6839      	ldr	r1, [r7, #0]
 800fbd6:	4610      	mov	r0, r2
 800fbd8:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupEnded(res);
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	695b      	ldr	r3, [r3, #20]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d009      	beq.n	800fbf6 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x42>
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	695a      	ldr	r2, [r3, #20]
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	695b      	ldr	r3, [r3, #20]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	331c      	adds	r3, #28
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	6839      	ldr	r1, [r7, #0]
 800fbf2:	4610      	mov	r0, r2
 800fbf4:	4798      	blx	r3
}
 800fbf6:	bf00      	nop
 800fbf8:	3708      	adds	r7, #8
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	bd80      	pop	{r7, pc}

0800fbfe <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE>:

void CompositeTestOutput::verbose(VerbosityLevel level)
{
 800fbfe:	b580      	push	{r7, lr}
 800fc00:	b082      	sub	sp, #8
 800fc02:	af00      	add	r7, sp, #0
 800fc04:	6078      	str	r0, [r7, #4]
 800fc06:	460b      	mov	r3, r1
 800fc08:	70fb      	strb	r3, [r7, #3]
  if (outputOne_) outputOne_->verbose(level);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	691b      	ldr	r3, [r3, #16]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d009      	beq.n	800fc26 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x28>
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	691a      	ldr	r2, [r3, #16]
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	691b      	ldr	r3, [r3, #16]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	3320      	adds	r3, #32
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	78f9      	ldrb	r1, [r7, #3]
 800fc22:	4610      	mov	r0, r2
 800fc24:	4798      	blx	r3
  if (outputTwo_) outputTwo_->verbose(level);
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	695b      	ldr	r3, [r3, #20]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d009      	beq.n	800fc42 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x44>
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	695a      	ldr	r2, [r3, #20]
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	695b      	ldr	r3, [r3, #20]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	3320      	adds	r3, #32
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	78f9      	ldrb	r1, [r7, #3]
 800fc3e:	4610      	mov	r0, r2
 800fc40:	4798      	blx	r3
}
 800fc42:	bf00      	nop
 800fc44:	3708      	adds	r7, #8
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}

0800fc4a <_ZN19CompositeTestOutput5colorEv>:

void CompositeTestOutput::color()
{
 800fc4a:	b580      	push	{r7, lr}
 800fc4c:	b082      	sub	sp, #8
 800fc4e:	af00      	add	r7, sp, #0
 800fc50:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->color();
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	691b      	ldr	r3, [r3, #16]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d008      	beq.n	800fc6c <_ZN19CompositeTestOutput5colorEv+0x22>
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	691a      	ldr	r2, [r3, #16]
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	691b      	ldr	r3, [r3, #16]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	3324      	adds	r3, #36	; 0x24
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	4610      	mov	r0, r2
 800fc6a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->color();
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	695b      	ldr	r3, [r3, #20]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d008      	beq.n	800fc86 <_ZN19CompositeTestOutput5colorEv+0x3c>
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	695a      	ldr	r2, [r3, #20]
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	695b      	ldr	r3, [r3, #20]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	3324      	adds	r3, #36	; 0x24
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	4610      	mov	r0, r2
 800fc84:	4798      	blx	r3
}
 800fc86:	bf00      	nop
 800fc88:	3708      	adds	r7, #8
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}

0800fc8e <_ZN19CompositeTestOutput11printBufferEPKc>:

void CompositeTestOutput::printBuffer(const char* buffer)
{
 800fc8e:	b580      	push	{r7, lr}
 800fc90:	b082      	sub	sp, #8
 800fc92:	af00      	add	r7, sp, #0
 800fc94:	6078      	str	r0, [r7, #4]
 800fc96:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printBuffer(buffer);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	691b      	ldr	r3, [r3, #16]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d009      	beq.n	800fcb4 <_ZN19CompositeTestOutput11printBufferEPKc+0x26>
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	691a      	ldr	r2, [r3, #16]
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	691b      	ldr	r3, [r3, #16]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	3328      	adds	r3, #40	; 0x28
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	6839      	ldr	r1, [r7, #0]
 800fcb0:	4610      	mov	r0, r2
 800fcb2:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printBuffer(buffer);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	695b      	ldr	r3, [r3, #20]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d009      	beq.n	800fcd0 <_ZN19CompositeTestOutput11printBufferEPKc+0x42>
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	695a      	ldr	r2, [r3, #20]
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	695b      	ldr	r3, [r3, #20]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	3328      	adds	r3, #40	; 0x28
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	6839      	ldr	r1, [r7, #0]
 800fccc:	4610      	mov	r0, r2
 800fcce:	4798      	blx	r3
}
 800fcd0:	bf00      	nop
 800fcd2:	3708      	adds	r7, #8
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd80      	pop	{r7, pc}

0800fcd8 <_ZN19CompositeTestOutput5printEPKc>:

void CompositeTestOutput::print(const char* buffer)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b082      	sub	sp, #8
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
 800fce0:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(buffer);
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	691b      	ldr	r3, [r3, #16]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d009      	beq.n	800fcfe <_ZN19CompositeTestOutput5printEPKc+0x26>
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	691a      	ldr	r2, [r3, #16]
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	691b      	ldr	r3, [r3, #16]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	332c      	adds	r3, #44	; 0x2c
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	6839      	ldr	r1, [r7, #0]
 800fcfa:	4610      	mov	r0, r2
 800fcfc:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(buffer);
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	695b      	ldr	r3, [r3, #20]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d009      	beq.n	800fd1a <_ZN19CompositeTestOutput5printEPKc+0x42>
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	695a      	ldr	r2, [r3, #20]
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	695b      	ldr	r3, [r3, #20]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	332c      	adds	r3, #44	; 0x2c
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	6839      	ldr	r1, [r7, #0]
 800fd16:	4610      	mov	r0, r2
 800fd18:	4798      	blx	r3
}
 800fd1a:	bf00      	nop
 800fd1c:	3708      	adds	r7, #8
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	bd80      	pop	{r7, pc}

0800fd22 <_ZN19CompositeTestOutput5printEl>:

void CompositeTestOutput::print(long number)
{
 800fd22:	b580      	push	{r7, lr}
 800fd24:	b082      	sub	sp, #8
 800fd26:	af00      	add	r7, sp, #0
 800fd28:	6078      	str	r0, [r7, #4]
 800fd2a:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	691b      	ldr	r3, [r3, #16]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d009      	beq.n	800fd48 <_ZN19CompositeTestOutput5printEl+0x26>
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	691a      	ldr	r2, [r3, #16]
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	691b      	ldr	r3, [r3, #16]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	3330      	adds	r3, #48	; 0x30
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	6839      	ldr	r1, [r7, #0]
 800fd44:	4610      	mov	r0, r2
 800fd46:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	695b      	ldr	r3, [r3, #20]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d009      	beq.n	800fd64 <_ZN19CompositeTestOutput5printEl+0x42>
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	695a      	ldr	r2, [r3, #20]
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	695b      	ldr	r3, [r3, #20]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	3330      	adds	r3, #48	; 0x30
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	6839      	ldr	r1, [r7, #0]
 800fd60:	4610      	mov	r0, r2
 800fd62:	4798      	blx	r3
}
 800fd64:	bf00      	nop
 800fd66:	3708      	adds	r7, #8
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	bd80      	pop	{r7, pc}

0800fd6c <_ZN19CompositeTestOutput5printEj>:

void CompositeTestOutput::print(size_t number)
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b082      	sub	sp, #8
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
 800fd74:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	691b      	ldr	r3, [r3, #16]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d009      	beq.n	800fd92 <_ZN19CompositeTestOutput5printEj+0x26>
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	691a      	ldr	r2, [r3, #16]
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	691b      	ldr	r3, [r3, #16]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	3334      	adds	r3, #52	; 0x34
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	6839      	ldr	r1, [r7, #0]
 800fd8e:	4610      	mov	r0, r2
 800fd90:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	695b      	ldr	r3, [r3, #20]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d009      	beq.n	800fdae <_ZN19CompositeTestOutput5printEj+0x42>
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	695a      	ldr	r2, [r3, #20]
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	695b      	ldr	r3, [r3, #20]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	3334      	adds	r3, #52	; 0x34
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	6839      	ldr	r1, [r7, #0]
 800fdaa:	4610      	mov	r0, r2
 800fdac:	4798      	blx	r3
}
 800fdae:	bf00      	nop
 800fdb0:	3708      	adds	r7, #8
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	bd80      	pop	{r7, pc}

0800fdb6 <_ZN19CompositeTestOutput11printDoubleEd>:

void CompositeTestOutput::printDouble(double number)
{
 800fdb6:	b580      	push	{r7, lr}
 800fdb8:	b084      	sub	sp, #16
 800fdba:	af00      	add	r7, sp, #0
 800fdbc:	60f8      	str	r0, [r7, #12]
 800fdbe:	ed87 0b00 	vstr	d0, [r7]
  if (outputOne_) outputOne_->printDouble(number);
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	691b      	ldr	r3, [r3, #16]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d00a      	beq.n	800fde0 <_ZN19CompositeTestOutput11printDoubleEd+0x2a>
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	691a      	ldr	r2, [r3, #16]
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	691b      	ldr	r3, [r3, #16]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	3338      	adds	r3, #56	; 0x38
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	ed97 0b00 	vldr	d0, [r7]
 800fddc:	4610      	mov	r0, r2
 800fdde:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printDouble(number);
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	695b      	ldr	r3, [r3, #20]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d00a      	beq.n	800fdfe <_ZN19CompositeTestOutput11printDoubleEd+0x48>
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	695a      	ldr	r2, [r3, #20]
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	695b      	ldr	r3, [r3, #20]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	3338      	adds	r3, #56	; 0x38
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	ed97 0b00 	vldr	d0, [r7]
 800fdfa:	4610      	mov	r0, r2
 800fdfc:	4798      	blx	r3
}
 800fdfe:	bf00      	nop
 800fe00:	3710      	adds	r7, #16
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}

0800fe06 <_ZN19CompositeTestOutput12printFailureERK11TestFailure>:

void CompositeTestOutput::printFailure(const TestFailure& failure)
{
 800fe06:	b580      	push	{r7, lr}
 800fe08:	b082      	sub	sp, #8
 800fe0a:	af00      	add	r7, sp, #0
 800fe0c:	6078      	str	r0, [r7, #4]
 800fe0e:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printFailure(failure);
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	691b      	ldr	r3, [r3, #16]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d009      	beq.n	800fe2c <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x26>
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	691a      	ldr	r2, [r3, #16]
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	691b      	ldr	r3, [r3, #16]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	333c      	adds	r3, #60	; 0x3c
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	6839      	ldr	r1, [r7, #0]
 800fe28:	4610      	mov	r0, r2
 800fe2a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printFailure(failure);
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	695b      	ldr	r3, [r3, #20]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d009      	beq.n	800fe48 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x42>
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	695a      	ldr	r2, [r3, #20]
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	695b      	ldr	r3, [r3, #20]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	333c      	adds	r3, #60	; 0x3c
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	6839      	ldr	r1, [r7, #0]
 800fe44:	4610      	mov	r0, r2
 800fe46:	4798      	blx	r3
}
 800fe48:	bf00      	nop
 800fe4a:	3708      	adds	r7, #8
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	bd80      	pop	{r7, pc}

0800fe50 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc>:

void CompositeTestOutput::setProgressIndicator(const char* indicator)
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b082      	sub	sp, #8
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
 800fe58:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->setProgressIndicator(indicator);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	691b      	ldr	r3, [r3, #16]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d009      	beq.n	800fe76 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x26>
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	691a      	ldr	r2, [r3, #16]
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	691b      	ldr	r3, [r3, #16]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	3344      	adds	r3, #68	; 0x44
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	6839      	ldr	r1, [r7, #0]
 800fe72:	4610      	mov	r0, r2
 800fe74:	4798      	blx	r3
  if (outputTwo_) outputTwo_->setProgressIndicator(indicator);
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	695b      	ldr	r3, [r3, #20]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d009      	beq.n	800fe92 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x42>
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	695a      	ldr	r2, [r3, #20]
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	695b      	ldr	r3, [r3, #20]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	3344      	adds	r3, #68	; 0x44
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	6839      	ldr	r1, [r7, #0]
 800fe8e:	4610      	mov	r0, r2
 800fe90:	4798      	blx	r3
}
 800fe92:	bf00      	nop
 800fe94:	3708      	adds	r7, #8
 800fe96:	46bd      	mov	sp, r7
 800fe98:	bd80      	pop	{r7, pc}

0800fe9a <_ZN19CompositeTestOutput5flushEv>:

void CompositeTestOutput::flush()
{
 800fe9a:	b580      	push	{r7, lr}
 800fe9c:	b082      	sub	sp, #8
 800fe9e:	af00      	add	r7, sp, #0
 800fea0:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->flush();
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	691b      	ldr	r3, [r3, #16]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d008      	beq.n	800febc <_ZN19CompositeTestOutput5flushEv+0x22>
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	691a      	ldr	r2, [r3, #16]
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	691b      	ldr	r3, [r3, #16]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	334c      	adds	r3, #76	; 0x4c
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	4610      	mov	r0, r2
 800feba:	4798      	blx	r3
  if (outputTwo_) outputTwo_->flush();
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	695b      	ldr	r3, [r3, #20]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d008      	beq.n	800fed6 <_ZN19CompositeTestOutput5flushEv+0x3c>
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	695a      	ldr	r2, [r3, #20]
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	695b      	ldr	r3, [r3, #20]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	334c      	adds	r3, #76	; 0x4c
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	4610      	mov	r0, r2
 800fed4:	4798      	blx	r3
}
 800fed6:	bf00      	nop
 800fed8:	3708      	adds	r7, #8
 800feda:	46bd      	mov	sp, r7
 800fedc:	bd80      	pop	{r7, pc}

0800fede <_ZN10TestPlugin13preTestActionER10UtestShellR10TestResult>:
    virtual void preTestAction(UtestShell&, TestResult&)
 800fede:	b480      	push	{r7}
 800fee0:	b085      	sub	sp, #20
 800fee2:	af00      	add	r7, sp, #0
 800fee4:	60f8      	str	r0, [r7, #12]
 800fee6:	60b9      	str	r1, [r7, #8]
 800fee8:	607a      	str	r2, [r7, #4]
    }
 800feea:	bf00      	nop
 800feec:	3714      	adds	r7, #20
 800feee:	46bd      	mov	sp, r7
 800fef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef4:	4770      	bx	lr

0800fef6 <_ZN10TestPlugin14postTestActionER10UtestShellR10TestResult>:
    virtual void postTestAction(UtestShell&, TestResult&)
 800fef6:	b480      	push	{r7}
 800fef8:	b085      	sub	sp, #20
 800fefa:	af00      	add	r7, sp, #0
 800fefc:	60f8      	str	r0, [r7, #12]
 800fefe:	60b9      	str	r1, [r7, #8]
 800ff00:	607a      	str	r2, [r7, #4]
    }
 800ff02:	bf00      	nop
 800ff04:	3714      	adds	r7, #20
 800ff06:	46bd      	mov	sp, r7
 800ff08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0c:	4770      	bx	lr
	...

0800ff10 <_ZN10TestPluginC1ERK12SimpleString>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestPlugin.h"

TestPlugin::TestPlugin(const SimpleString& name) :
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b082      	sub	sp, #8
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
 800ff18:	6039      	str	r1, [r7, #0]
    next_(NullTestPlugin::instance()), name_(name), enabled_(true)
 800ff1a:	4a0b      	ldr	r2, [pc, #44]	; (800ff48 <_ZN10TestPluginC1ERK12SimpleString+0x38>)
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	601a      	str	r2, [r3, #0]
 800ff20:	f000 f9ce 	bl	80102c0 <_ZN14NullTestPlugin8instanceEv>
 800ff24:	4602      	mov	r2, r0
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	605a      	str	r2, [r3, #4]
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	3308      	adds	r3, #8
 800ff2e:	6839      	ldr	r1, [r7, #0]
 800ff30:	4618      	mov	r0, r3
 800ff32:	f7fb fb46 	bl	800b5c2 <_ZN12SimpleStringC1ERKS_>
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	2201      	movs	r2, #1
 800ff3a:	741a      	strb	r2, [r3, #16]
{
}
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	4618      	mov	r0, r3
 800ff40:	3708      	adds	r7, #8
 800ff42:	46bd      	mov	sp, r7
 800ff44:	bd80      	pop	{r7, pc}
 800ff46:	bf00      	nop
 800ff48:	080267a4 	.word	0x080267a4

0800ff4c <_ZN10TestPluginC1EPS_>:

TestPlugin::TestPlugin(TestPlugin* next) :
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b082      	sub	sp, #8
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	6039      	str	r1, [r7, #0]
    next_(next), name_("null"), enabled_(true)
 800ff56:	4a0a      	ldr	r2, [pc, #40]	; (800ff80 <_ZN10TestPluginC1EPS_+0x34>)
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	601a      	str	r2, [r3, #0]
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	683a      	ldr	r2, [r7, #0]
 800ff60:	605a      	str	r2, [r3, #4]
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	3308      	adds	r3, #8
 800ff66:	4907      	ldr	r1, [pc, #28]	; (800ff84 <_ZN10TestPluginC1EPS_+0x38>)
 800ff68:	4618      	mov	r0, r3
 800ff6a:	f7fb fad6 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	2201      	movs	r2, #1
 800ff72:	741a      	strb	r2, [r3, #16]
{
}
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	4618      	mov	r0, r3
 800ff78:	3708      	adds	r7, #8
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}
 800ff7e:	bf00      	nop
 800ff80:	080267a4 	.word	0x080267a4
 800ff84:	0802346c 	.word	0x0802346c

0800ff88 <_ZN10TestPluginD1Ev>:

TestPlugin::~TestPlugin()
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b082      	sub	sp, #8
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
 800ff90:	4a06      	ldr	r2, [pc, #24]	; (800ffac <_ZN10TestPluginD1Ev+0x24>)
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	601a      	str	r2, [r3, #0]
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	3308      	adds	r3, #8
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	f7fb fe75 	bl	800bc8a <_ZN12SimpleStringD1Ev>
{
}
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	3708      	adds	r7, #8
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	bd80      	pop	{r7, pc}
 800ffaa:	bf00      	nop
 800ffac:	080267a4 	.word	0x080267a4

0800ffb0 <_ZN10TestPluginD0Ev>:
TestPlugin::~TestPlugin()
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b082      	sub	sp, #8
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
}
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	f7ff ffe5 	bl	800ff88 <_ZN10TestPluginD1Ev>
 800ffbe:	2114      	movs	r1, #20
 800ffc0:	6878      	ldr	r0, [r7, #4]
 800ffc2:	f7f8 fefb 	bl	8008dbc <_ZdlPvj>
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	4618      	mov	r0, r3
 800ffca:	3708      	adds	r7, #8
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}

0800ffd0 <_ZN10TestPlugin9addPluginEPS_>:

TestPlugin* TestPlugin::addPlugin(TestPlugin* plugin)
{
 800ffd0:	b480      	push	{r7}
 800ffd2:	b083      	sub	sp, #12
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
 800ffd8:	6039      	str	r1, [r7, #0]
    next_ = plugin;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	683a      	ldr	r2, [r7, #0]
 800ffde:	605a      	str	r2, [r3, #4]
    return this;
 800ffe0:	687b      	ldr	r3, [r7, #4]
}
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	370c      	adds	r7, #12
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffec:	4770      	bx	lr

0800ffee <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPreTestAction(UtestShell& test, TestResult& result)
{
 800ffee:	b580      	push	{r7, lr}
 800fff0:	b084      	sub	sp, #16
 800fff2:	af00      	add	r7, sp, #0
 800fff4:	60f8      	str	r0, [r7, #12]
 800fff6:	60b9      	str	r1, [r7, #8]
 800fff8:	607a      	str	r2, [r7, #4]
    if (enabled_) preTestAction(test, result);
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	7c1b      	ldrb	r3, [r3, #16]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d007      	beq.n	8010012 <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult+0x24>
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	3308      	adds	r3, #8
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	687a      	ldr	r2, [r7, #4]
 801000c:	68b9      	ldr	r1, [r7, #8]
 801000e:	68f8      	ldr	r0, [r7, #12]
 8010010:	4798      	blx	r3
    next_->runAllPreTestAction(test, result);
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	6858      	ldr	r0, [r3, #4]
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	685b      	ldr	r3, [r3, #4]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	3314      	adds	r3, #20
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	687a      	ldr	r2, [r7, #4]
 8010022:	68b9      	ldr	r1, [r7, #8]
 8010024:	4798      	blx	r3
}
 8010026:	bf00      	nop
 8010028:	3710      	adds	r7, #16
 801002a:	46bd      	mov	sp, r7
 801002c:	bd80      	pop	{r7, pc}

0801002e <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPostTestAction(UtestShell& test, TestResult& result)
{
 801002e:	b580      	push	{r7, lr}
 8010030:	b084      	sub	sp, #16
 8010032:	af00      	add	r7, sp, #0
 8010034:	60f8      	str	r0, [r7, #12]
 8010036:	60b9      	str	r1, [r7, #8]
 8010038:	607a      	str	r2, [r7, #4]
    next_ ->runAllPostTestAction(test, result);
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	6858      	ldr	r0, [r3, #4]
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	685b      	ldr	r3, [r3, #4]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	3318      	adds	r3, #24
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	687a      	ldr	r2, [r7, #4]
 801004a:	68b9      	ldr	r1, [r7, #8]
 801004c:	4798      	blx	r3
    if (enabled_) postTestAction(test, result);
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	7c1b      	ldrb	r3, [r3, #16]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d007      	beq.n	8010066 <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult+0x38>
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	330c      	adds	r3, #12
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	687a      	ldr	r2, [r7, #4]
 8010060:	68b9      	ldr	r1, [r7, #8]
 8010062:	68f8      	ldr	r0, [r7, #12]
 8010064:	4798      	blx	r3
}
 8010066:	bf00      	nop
 8010068:	3710      	adds	r7, #16
 801006a:	46bd      	mov	sp, r7
 801006c:	bd80      	pop	{r7, pc}

0801006e <_ZN10TestPlugin17parseAllArgumentsEiPPci>:

bool TestPlugin::parseAllArguments(int ac, char** av, int index)
{
 801006e:	b590      	push	{r4, r7, lr}
 8010070:	b085      	sub	sp, #20
 8010072:	af00      	add	r7, sp, #0
 8010074:	60f8      	str	r0, [r7, #12]
 8010076:	60b9      	str	r1, [r7, #8]
 8010078:	607a      	str	r2, [r7, #4]
 801007a:	603b      	str	r3, [r7, #0]
    return parseAllArguments(ac, const_cast<const char *const *> (av), index);
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	331c      	adds	r3, #28
 8010082:	681c      	ldr	r4, [r3, #0]
 8010084:	683b      	ldr	r3, [r7, #0]
 8010086:	687a      	ldr	r2, [r7, #4]
 8010088:	68b9      	ldr	r1, [r7, #8]
 801008a:	68f8      	ldr	r0, [r7, #12]
 801008c:	47a0      	blx	r4
 801008e:	4603      	mov	r3, r0
}
 8010090:	4618      	mov	r0, r3
 8010092:	3714      	adds	r7, #20
 8010094:	46bd      	mov	sp, r7
 8010096:	bd90      	pop	{r4, r7, pc}

08010098 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci>:

bool TestPlugin::parseAllArguments(int ac, const char *const *av, int index)
{
 8010098:	b590      	push	{r4, r7, lr}
 801009a:	b085      	sub	sp, #20
 801009c:	af00      	add	r7, sp, #0
 801009e:	60f8      	str	r0, [r7, #12]
 80100a0:	60b9      	str	r1, [r7, #8]
 80100a2:	607a      	str	r2, [r7, #4]
 80100a4:	603b      	str	r3, [r7, #0]
    if (parseArguments(ac, av, index)) return true;
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	3310      	adds	r3, #16
 80100ac:	681c      	ldr	r4, [r3, #0]
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	687a      	ldr	r2, [r7, #4]
 80100b2:	68b9      	ldr	r1, [r7, #8]
 80100b4:	68f8      	ldr	r0, [r7, #12]
 80100b6:	47a0      	blx	r4
 80100b8:	4603      	mov	r3, r0
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d001      	beq.n	80100c2 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x2a>
 80100be:	2301      	movs	r3, #1
 80100c0:	e011      	b.n	80100e6 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    if (next_) return next_->parseAllArguments(ac, av, index);
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	685b      	ldr	r3, [r3, #4]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d00c      	beq.n	80100e4 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4c>
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	6858      	ldr	r0, [r3, #4]
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	685b      	ldr	r3, [r3, #4]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	331c      	adds	r3, #28
 80100d6:	681c      	ldr	r4, [r3, #0]
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	687a      	ldr	r2, [r7, #4]
 80100dc:	68b9      	ldr	r1, [r7, #8]
 80100de:	47a0      	blx	r4
 80100e0:	4603      	mov	r3, r0
 80100e2:	e000      	b.n	80100e6 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    return false;
 80100e4:	2300      	movs	r3, #0
}
 80100e6:	4618      	mov	r0, r3
 80100e8:	3714      	adds	r7, #20
 80100ea:	46bd      	mov	sp, r7
 80100ec:	bd90      	pop	{r4, r7, pc}

080100ee <_ZN10TestPlugin7getNameEv>:

const SimpleString& TestPlugin::getName()
{
 80100ee:	b480      	push	{r7}
 80100f0:	b083      	sub	sp, #12
 80100f2:	af00      	add	r7, sp, #0
 80100f4:	6078      	str	r0, [r7, #4]
    return name_;
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	3308      	adds	r3, #8
}
 80100fa:	4618      	mov	r0, r3
 80100fc:	370c      	adds	r7, #12
 80100fe:	46bd      	mov	sp, r7
 8010100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010104:	4770      	bx	lr

08010106 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>:

TestPlugin* TestPlugin::getPluginByName(const SimpleString& name)
{
 8010106:	b580      	push	{r7, lr}
 8010108:	b082      	sub	sp, #8
 801010a:	af00      	add	r7, sp, #0
 801010c:	6078      	str	r0, [r7, #4]
 801010e:	6039      	str	r1, [r7, #0]
    if (name == name_) return this;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	3308      	adds	r3, #8
 8010114:	4619      	mov	r1, r3
 8010116:	6838      	ldr	r0, [r7, #0]
 8010118:	f7fb fdc3 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801011c:	4603      	mov	r3, r0
 801011e:	2b00      	cmp	r3, #0
 8010120:	d001      	beq.n	8010126 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x20>
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	e00d      	b.n	8010142 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    if (next_) return next_->getPluginByName(name);
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	685b      	ldr	r3, [r3, #4]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d007      	beq.n	801013e <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x38>
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	685b      	ldr	r3, [r3, #4]
 8010132:	6839      	ldr	r1, [r7, #0]
 8010134:	4618      	mov	r0, r3
 8010136:	f7ff ffe6 	bl	8010106 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 801013a:	4603      	mov	r3, r0
 801013c:	e001      	b.n	8010142 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    return (next_);
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	685b      	ldr	r3, [r3, #4]
}
 8010142:	4618      	mov	r0, r3
 8010144:	3708      	adds	r7, #8
 8010146:	46bd      	mov	sp, r7
 8010148:	bd80      	pop	{r7, pc}

0801014a <_ZN10TestPlugin7getNextEv>:

TestPlugin* TestPlugin::getNext()
{
 801014a:	b480      	push	{r7}
 801014c:	b083      	sub	sp, #12
 801014e:	af00      	add	r7, sp, #0
 8010150:	6078      	str	r0, [r7, #4]
    return next_;
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	685b      	ldr	r3, [r3, #4]
}
 8010156:	4618      	mov	r0, r3
 8010158:	370c      	adds	r7, #12
 801015a:	46bd      	mov	sp, r7
 801015c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010160:	4770      	bx	lr

08010162 <_ZN10TestPlugin18removePluginByNameERK12SimpleString>:
TestPlugin* TestPlugin::removePluginByName(const SimpleString& name)
{
 8010162:	b580      	push	{r7, lr}
 8010164:	b084      	sub	sp, #16
 8010166:	af00      	add	r7, sp, #0
 8010168:	6078      	str	r0, [r7, #4]
 801016a:	6039      	str	r1, [r7, #0]
    TestPlugin* removed = NULLPTR;
 801016c:	2300      	movs	r3, #0
 801016e:	60fb      	str	r3, [r7, #12]
    if (next_ && next_->getName() == name) {
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	685b      	ldr	r3, [r3, #4]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d00e      	beq.n	8010196 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	685b      	ldr	r3, [r3, #4]
 801017c:	4618      	mov	r0, r3
 801017e:	f7ff ffb6 	bl	80100ee <_ZN10TestPlugin7getNameEv>
 8010182:	4603      	mov	r3, r0
 8010184:	6839      	ldr	r1, [r7, #0]
 8010186:	4618      	mov	r0, r3
 8010188:	f7fb fd8b 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801018c:	4603      	mov	r3, r0
 801018e:	2b00      	cmp	r3, #0
 8010190:	d001      	beq.n	8010196 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 8010192:	2301      	movs	r3, #1
 8010194:	e000      	b.n	8010198 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x36>
 8010196:	2300      	movs	r3, #0
 8010198:	2b00      	cmp	r3, #0
 801019a:	d007      	beq.n	80101ac <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x4a>
        removed = next_;
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	685b      	ldr	r3, [r3, #4]
 80101a0:	60fb      	str	r3, [r7, #12]
        next_ = next_->next_;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	685b      	ldr	r3, [r3, #4]
 80101a6:	685a      	ldr	r2, [r3, #4]
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	605a      	str	r2, [r3, #4]
    }
    return removed;
 80101ac:	68fb      	ldr	r3, [r7, #12]
}
 80101ae:	4618      	mov	r0, r3
 80101b0:	3710      	adds	r7, #16
 80101b2:	46bd      	mov	sp, r7
 80101b4:	bd80      	pop	{r7, pc}

080101b6 <_ZN10TestPlugin7disableEv>:

void TestPlugin::disable()
{
 80101b6:	b480      	push	{r7}
 80101b8:	b083      	sub	sp, #12
 80101ba:	af00      	add	r7, sp, #0
 80101bc:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	2200      	movs	r2, #0
 80101c2:	741a      	strb	r2, [r3, #16]
}
 80101c4:	bf00      	nop
 80101c6:	370c      	adds	r7, #12
 80101c8:	46bd      	mov	sp, r7
 80101ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ce:	4770      	bx	lr

080101d0 <_ZN10TestPlugin6enableEv>:

void TestPlugin::enable()
{
 80101d0:	b480      	push	{r7}
 80101d2:	b083      	sub	sp, #12
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	2201      	movs	r2, #1
 80101dc:	741a      	strb	r2, [r3, #16]
}
 80101de:	bf00      	nop
 80101e0:	370c      	adds	r7, #12
 80101e2:	46bd      	mov	sp, r7
 80101e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e8:	4770      	bx	lr

080101ea <_ZN10TestPlugin9isEnabledEv>:

bool TestPlugin::isEnabled()
{
 80101ea:	b480      	push	{r7}
 80101ec:	b083      	sub	sp, #12
 80101ee:	af00      	add	r7, sp, #0
 80101f0:	6078      	str	r0, [r7, #4]
    return enabled_;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	7c1b      	ldrb	r3, [r3, #16]
}
 80101f6:	4618      	mov	r0, r3
 80101f8:	370c      	adds	r7, #12
 80101fa:	46bd      	mov	sp, r7
 80101fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010200:	4770      	bx	lr
	...

08010204 <_ZN16SetPointerPluginC1ERK12SimpleString>:
//////// SetPlugin

static int pointerTableIndex;
static cpputest_pair setlist[SetPointerPlugin::MAX_SET];

SetPointerPlugin::SetPointerPlugin(const SimpleString& name) :
 8010204:	b580      	push	{r7, lr}
 8010206:	b082      	sub	sp, #8
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
 801020c:	6039      	str	r1, [r7, #0]
    TestPlugin(name)
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	6839      	ldr	r1, [r7, #0]
 8010212:	4618      	mov	r0, r3
 8010214:	f7ff fe7c 	bl	800ff10 <_ZN10TestPluginC1ERK12SimpleString>
 8010218:	4a05      	ldr	r2, [pc, #20]	; (8010230 <_ZN16SetPointerPluginC1ERK12SimpleString+0x2c>)
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	601a      	str	r2, [r3, #0]
{
    pointerTableIndex = 0;
 801021e:	4b05      	ldr	r3, [pc, #20]	; (8010234 <_ZN16SetPointerPluginC1ERK12SimpleString+0x30>)
 8010220:	2200      	movs	r2, #0
 8010222:	601a      	str	r2, [r3, #0]
}
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	4618      	mov	r0, r3
 8010228:	3708      	adds	r7, #8
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}
 801022e:	bf00      	nop
 8010230:	08026760 	.word	0x08026760
 8010234:	2000080c 	.word	0x2000080c

08010238 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult>:
    setlist[pointerTableIndex].orig = function;
    pointerTableIndex++;
}

void SetPointerPlugin::postTestAction(UtestShell& /*test*/, TestResult& /*result*/)
{
 8010238:	b480      	push	{r7}
 801023a:	b087      	sub	sp, #28
 801023c:	af00      	add	r7, sp, #0
 801023e:	60f8      	str	r0, [r7, #12]
 8010240:	60b9      	str	r1, [r7, #8]
 8010242:	607a      	str	r2, [r7, #4]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 8010244:	4b0e      	ldr	r3, [pc, #56]	; (8010280 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	3b01      	subs	r3, #1
 801024a:	617b      	str	r3, [r7, #20]
 801024c:	697b      	ldr	r3, [r7, #20]
 801024e:	2b00      	cmp	r3, #0
 8010250:	db0d      	blt.n	801026e <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x36>
        *((void**) setlist[i].orig) = setlist[i].orig_value;
 8010252:	4a0c      	ldr	r2, [pc, #48]	; (8010284 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 8010254:	697b      	ldr	r3, [r7, #20]
 8010256:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801025a:	490a      	ldr	r1, [pc, #40]	; (8010284 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 801025c:	697b      	ldr	r3, [r7, #20]
 801025e:	00db      	lsls	r3, r3, #3
 8010260:	440b      	add	r3, r1
 8010262:	685b      	ldr	r3, [r3, #4]
 8010264:	6013      	str	r3, [r2, #0]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 8010266:	697b      	ldr	r3, [r7, #20]
 8010268:	3b01      	subs	r3, #1
 801026a:	617b      	str	r3, [r7, #20]
 801026c:	e7ee      	b.n	801024c <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x14>
    pointerTableIndex = 0;
 801026e:	4b04      	ldr	r3, [pc, #16]	; (8010280 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 8010270:	2200      	movs	r2, #0
 8010272:	601a      	str	r2, [r3, #0]
}
 8010274:	bf00      	nop
 8010276:	371c      	adds	r7, #28
 8010278:	46bd      	mov	sp, r7
 801027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027e:	4770      	bx	lr
 8010280:	2000080c 	.word	0x2000080c
 8010284:	20000810 	.word	0x20000810

08010288 <_ZN14NullTestPluginC1Ev>:

//////// NullPlugin

NullTestPlugin::NullTestPlugin() :
 8010288:	b580      	push	{r7, lr}
 801028a:	b082      	sub	sp, #8
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
    TestPlugin(NULLPTR)
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	2100      	movs	r1, #0
 8010294:	4618      	mov	r0, r3
 8010296:	f7ff fe59 	bl	800ff4c <_ZN10TestPluginC1EPS_>
 801029a:	4a04      	ldr	r2, [pc, #16]	; (80102ac <_ZN14NullTestPluginC1Ev+0x24>)
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	601a      	str	r2, [r3, #0]
{
}
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	4618      	mov	r0, r3
 80102a4:	3708      	adds	r7, #8
 80102a6:	46bd      	mov	sp, r7
 80102a8:	bd80      	pop	{r7, pc}
 80102aa:	bf00      	nop
 80102ac:	0802671c 	.word	0x0802671c

080102b0 <__tcf_0>:

NullTestPlugin* NullTestPlugin::instance()
{
    static NullTestPlugin _instance;
 80102b0:	b580      	push	{r7, lr}
 80102b2:	af00      	add	r7, sp, #0
 80102b4:	4801      	ldr	r0, [pc, #4]	; (80102bc <__tcf_0+0xc>)
 80102b6:	f000 f849 	bl	801034c <_ZN14NullTestPluginD1Ev>
 80102ba:	bd80      	pop	{r7, pc}
 80102bc:	20000910 	.word	0x20000910

080102c0 <_ZN14NullTestPlugin8instanceEv>:
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	af00      	add	r7, sp, #0
    static NullTestPlugin _instance;
 80102c4:	4b12      	ldr	r3, [pc, #72]	; (8010310 <_ZN14NullTestPlugin8instanceEv+0x50>)
 80102c6:	781b      	ldrb	r3, [r3, #0]
 80102c8:	f3bf 8f5b 	dmb	ish
 80102cc:	b2db      	uxtb	r3, r3
 80102ce:	f003 0301 	and.w	r3, r3, #1
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	bf0c      	ite	eq
 80102d6:	2301      	moveq	r3, #1
 80102d8:	2300      	movne	r3, #0
 80102da:	b2db      	uxtb	r3, r3
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d013      	beq.n	8010308 <_ZN14NullTestPlugin8instanceEv+0x48>
 80102e0:	480b      	ldr	r0, [pc, #44]	; (8010310 <_ZN14NullTestPlugin8instanceEv+0x50>)
 80102e2:	f00d ffd9 	bl	801e298 <__cxa_guard_acquire>
 80102e6:	4603      	mov	r3, r0
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	bf14      	ite	ne
 80102ec:	2301      	movne	r3, #1
 80102ee:	2300      	moveq	r3, #0
 80102f0:	b2db      	uxtb	r3, r3
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d008      	beq.n	8010308 <_ZN14NullTestPlugin8instanceEv+0x48>
 80102f6:	4807      	ldr	r0, [pc, #28]	; (8010314 <_ZN14NullTestPlugin8instanceEv+0x54>)
 80102f8:	f7ff ffc6 	bl	8010288 <_ZN14NullTestPluginC1Ev>
 80102fc:	4804      	ldr	r0, [pc, #16]	; (8010310 <_ZN14NullTestPlugin8instanceEv+0x50>)
 80102fe:	f00d ffd7 	bl	801e2b0 <__cxa_guard_release>
 8010302:	4805      	ldr	r0, [pc, #20]	; (8010318 <_ZN14NullTestPlugin8instanceEv+0x58>)
 8010304:	f00d fffb 	bl	801e2fe <atexit>
    return &_instance;
 8010308:	4b02      	ldr	r3, [pc, #8]	; (8010314 <_ZN14NullTestPlugin8instanceEv+0x54>)
}
 801030a:	4618      	mov	r0, r3
 801030c:	bd80      	pop	{r7, pc}
 801030e:	bf00      	nop
 8010310:	20000924 	.word	0x20000924
 8010314:	20000910 	.word	0x20000910
 8010318:	080102b1 	.word	0x080102b1

0801031c <_ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
{
 801031c:	b480      	push	{r7}
 801031e:	b085      	sub	sp, #20
 8010320:	af00      	add	r7, sp, #0
 8010322:	60f8      	str	r0, [r7, #12]
 8010324:	60b9      	str	r1, [r7, #8]
 8010326:	607a      	str	r2, [r7, #4]
}
 8010328:	bf00      	nop
 801032a:	3714      	adds	r7, #20
 801032c:	46bd      	mov	sp, r7
 801032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010332:	4770      	bx	lr

08010334 <_ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
{
 8010334:	b480      	push	{r7}
 8010336:	b085      	sub	sp, #20
 8010338:	af00      	add	r7, sp, #0
 801033a:	60f8      	str	r0, [r7, #12]
 801033c:	60b9      	str	r1, [r7, #8]
 801033e:	607a      	str	r2, [r7, #4]
}
 8010340:	bf00      	nop
 8010342:	3714      	adds	r7, #20
 8010344:	46bd      	mov	sp, r7
 8010346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034a:	4770      	bx	lr

0801034c <_ZN14NullTestPluginD1Ev>:

#define UT_PTR_SET(a, b) do { CppUTestStore( (void**)&a ); a = b; } while(0)

///////////// Null Plugin

class NullTestPlugin: public TestPlugin
 801034c:	b580      	push	{r7, lr}
 801034e:	b082      	sub	sp, #8
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
 8010354:	4a05      	ldr	r2, [pc, #20]	; (801036c <_ZN14NullTestPluginD1Ev+0x20>)
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	601a      	str	r2, [r3, #0]
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	4618      	mov	r0, r3
 801035e:	f7ff fe13 	bl	800ff88 <_ZN10TestPluginD1Ev>
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	4618      	mov	r0, r3
 8010366:	3708      	adds	r7, #8
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}
 801036c:	0802671c 	.word	0x0802671c

08010370 <_ZN14NullTestPluginD0Ev>:
 8010370:	b580      	push	{r7, lr}
 8010372:	b082      	sub	sp, #8
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
 8010378:	6878      	ldr	r0, [r7, #4]
 801037a:	f7ff ffe7 	bl	801034c <_ZN14NullTestPluginD1Ev>
 801037e:	2114      	movs	r1, #20
 8010380:	6878      	ldr	r0, [r7, #4]
 8010382:	f7f8 fd1b 	bl	8008dbc <_ZdlPvj>
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	4618      	mov	r0, r3
 801038a:	3708      	adds	r7, #8
 801038c:	46bd      	mov	sp, r7
 801038e:	bd80      	pop	{r7, pc}

08010390 <_ZN12TestRegistryC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestRegistry.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestRegistry::TestRegistry() :
 8010390:	b580      	push	{r7, lr}
 8010392:	b082      	sub	sp, #8
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
    tests_(NULLPTR), nameFilters_(NULLPTR), groupFilters_(NULLPTR), firstPlugin_(NullTestPlugin::instance()), runInSeperateProcess_(false), currentRepetition_(0), runIgnored_(false)
 8010398:	4a0f      	ldr	r2, [pc, #60]	; (80103d8 <_ZN12TestRegistryC1Ev+0x48>)
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	601a      	str	r2, [r3, #0]
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	2200      	movs	r2, #0
 80103a2:	605a      	str	r2, [r3, #4]
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	2200      	movs	r2, #0
 80103a8:	609a      	str	r2, [r3, #8]
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	2200      	movs	r2, #0
 80103ae:	60da      	str	r2, [r3, #12]
 80103b0:	f7ff ff86 	bl	80102c0 <_ZN14NullTestPlugin8instanceEv>
 80103b4:	4602      	mov	r2, r0
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	611a      	str	r2, [r3, #16]
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	2200      	movs	r2, #0
 80103be:	751a      	strb	r2, [r3, #20]
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	2200      	movs	r2, #0
 80103c4:	619a      	str	r2, [r3, #24]
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	2200      	movs	r2, #0
 80103ca:	771a      	strb	r2, [r3, #28]
{
}
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	4618      	mov	r0, r3
 80103d0:	3708      	adds	r7, #8
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}
 80103d6:	bf00      	nop
 80103d8:	080267e8 	.word	0x080267e8

080103dc <_ZN12TestRegistryD1Ev>:

TestRegistry::~TestRegistry()
 80103dc:	b480      	push	{r7}
 80103de:	b083      	sub	sp, #12
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
 80103e4:	4a04      	ldr	r2, [pc, #16]	; (80103f8 <_ZN12TestRegistryD1Ev+0x1c>)
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	601a      	str	r2, [r3, #0]
{
}
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	4618      	mov	r0, r3
 80103ee:	370c      	adds	r7, #12
 80103f0:	46bd      	mov	sp, r7
 80103f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f6:	4770      	bx	lr
 80103f8:	080267e8 	.word	0x080267e8

080103fc <_ZN12TestRegistryD0Ev>:
TestRegistry::~TestRegistry()
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b082      	sub	sp, #8
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
}
 8010404:	6878      	ldr	r0, [r7, #4]
 8010406:	f7ff ffe9 	bl	80103dc <_ZN12TestRegistryD1Ev>
 801040a:	2120      	movs	r1, #32
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f7f8 fcd5 	bl	8008dbc <_ZdlPvj>
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	4618      	mov	r0, r3
 8010416:	3708      	adds	r7, #8
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}

0801041c <_ZN12TestRegistry7addTestEP10UtestShell>:

void TestRegistry::addTest(UtestShell *test)
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b082      	sub	sp, #8
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
 8010424:	6039      	str	r1, [r7, #0]
    tests_ = test->addTest(tests_);
 8010426:	683b      	ldr	r3, [r7, #0]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	3308      	adds	r3, #8
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	687a      	ldr	r2, [r7, #4]
 8010430:	6852      	ldr	r2, [r2, #4]
 8010432:	4611      	mov	r1, r2
 8010434:	6838      	ldr	r0, [r7, #0]
 8010436:	4798      	blx	r3
 8010438:	4602      	mov	r2, r0
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	605a      	str	r2, [r3, #4]
}
 801043e:	bf00      	nop
 8010440:	3708      	adds	r7, #8
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}

08010446 <_ZN12TestRegistry11runAllTestsER10TestResult>:

void TestRegistry::runAllTests(TestResult& result)
{
 8010446:	b580      	push	{r7, lr}
 8010448:	b084      	sub	sp, #16
 801044a:	af00      	add	r7, sp, #0
 801044c:	6078      	str	r0, [r7, #4]
 801044e:	6039      	str	r1, [r7, #0]
    bool groupStart = true;
 8010450:	2301      	movs	r3, #1
 8010452:	73fb      	strb	r3, [r7, #15]

    result.testsStarted();
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	3308      	adds	r3, #8
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	6838      	ldr	r0, [r7, #0]
 801045e:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	685b      	ldr	r3, [r3, #4]
 8010464:	60bb      	str	r3, [r7, #8]
 8010466:	68bb      	ldr	r3, [r7, #8]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d05c      	beq.n	8010526 <_ZN12TestRegistry11runAllTestsER10TestResult+0xe0>
        if (runInSeperateProcess_) test->setRunInSeperateProcess();
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	7d1b      	ldrb	r3, [r3, #20]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d005      	beq.n	8010480 <_ZN12TestRegistry11runAllTestsER10TestResult+0x3a>
 8010474:	68bb      	ldr	r3, [r7, #8]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	3380      	adds	r3, #128	; 0x80
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	68b8      	ldr	r0, [r7, #8]
 801047e:	4798      	blx	r3
        if (runIgnored_) test->setRunIgnored();
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	7f1b      	ldrb	r3, [r3, #28]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d005      	beq.n	8010494 <_ZN12TestRegistry11runAllTestsER10TestResult+0x4e>
 8010488:	68bb      	ldr	r3, [r7, #8]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	3384      	adds	r3, #132	; 0x84
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	68b8      	ldr	r0, [r7, #8]
 8010492:	4798      	blx	r3

        if (groupStart) {
 8010494:	7bfb      	ldrb	r3, [r7, #15]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d008      	beq.n	80104ac <_ZN12TestRegistry11runAllTestsER10TestResult+0x66>
            result.currentGroupStarted(test);
 801049a:	683b      	ldr	r3, [r7, #0]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	3310      	adds	r3, #16
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	68b9      	ldr	r1, [r7, #8]
 80104a4:	6838      	ldr	r0, [r7, #0]
 80104a6:	4798      	blx	r3
            groupStart = false;
 80104a8:	2300      	movs	r3, #0
 80104aa:	73fb      	strb	r3, [r7, #15]
        }

        result.countTest();
 80104ac:	683b      	ldr	r3, [r7, #0]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	3320      	adds	r3, #32
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	6838      	ldr	r0, [r7, #0]
 80104b6:	4798      	blx	r3
        if (testShouldRun(test, result)) {
 80104b8:	683a      	ldr	r2, [r7, #0]
 80104ba:	68b9      	ldr	r1, [r7, #8]
 80104bc:	6878      	ldr	r0, [r7, #4]
 80104be:	f000 fb79 	bl	8010bb4 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 80104c2:	4603      	mov	r3, r0
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d016      	beq.n	80104f6 <_ZN12TestRegistry11runAllTestsER10TestResult+0xb0>
            result.currentTestStarted(test);
 80104c8:	683b      	ldr	r3, [r7, #0]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	3318      	adds	r3, #24
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	68b9      	ldr	r1, [r7, #8]
 80104d2:	6838      	ldr	r0, [r7, #0]
 80104d4:	4798      	blx	r3
            test->runOneTest(firstPlugin_, result);
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	3390      	adds	r3, #144	; 0x90
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	687a      	ldr	r2, [r7, #4]
 80104e0:	6911      	ldr	r1, [r2, #16]
 80104e2:	683a      	ldr	r2, [r7, #0]
 80104e4:	68b8      	ldr	r0, [r7, #8]
 80104e6:	4798      	blx	r3
            result.currentTestEnded(test);
 80104e8:	683b      	ldr	r3, [r7, #0]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	331c      	adds	r3, #28
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	68b9      	ldr	r1, [r7, #8]
 80104f2:	6838      	ldr	r0, [r7, #0]
 80104f4:	4798      	blx	r3
        }

        if (endOfGroup(test)) {
 80104f6:	68b9      	ldr	r1, [r7, #8]
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f000 fa5b 	bl	80109b4 <_ZN12TestRegistry10endOfGroupEP10UtestShell>
 80104fe:	4603      	mov	r3, r0
 8010500:	2b00      	cmp	r3, #0
 8010502:	d008      	beq.n	8010516 <_ZN12TestRegistry11runAllTestsER10TestResult+0xd0>
            groupStart = true;
 8010504:	2301      	movs	r3, #1
 8010506:	73fb      	strb	r3, [r7, #15]
            result.currentGroupEnded(test);
 8010508:	683b      	ldr	r3, [r7, #0]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	3314      	adds	r3, #20
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	68b9      	ldr	r1, [r7, #8]
 8010512:	6838      	ldr	r0, [r7, #0]
 8010514:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8010516:	68bb      	ldr	r3, [r7, #8]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	330c      	adds	r3, #12
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	68b8      	ldr	r0, [r7, #8]
 8010520:	4798      	blx	r3
 8010522:	60b8      	str	r0, [r7, #8]
 8010524:	e79f      	b.n	8010466 <_ZN12TestRegistry11runAllTestsER10TestResult+0x20>
        }
    }
    result.testsEnded();
 8010526:	683b      	ldr	r3, [r7, #0]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	330c      	adds	r3, #12
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	6838      	ldr	r0, [r7, #0]
 8010530:	4798      	blx	r3
    currentRepetition_++;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	699b      	ldr	r3, [r3, #24]
 8010536:	1c5a      	adds	r2, r3, #1
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	619a      	str	r2, [r3, #24]
}
 801053c:	bf00      	nop
 801053e:	3710      	adds	r7, #16
 8010540:	46bd      	mov	sp, r7
 8010542:	bd80      	pop	{r7, pc}

08010544 <_ZN12TestRegistry18listTestGroupNamesER10TestResult>:

void TestRegistry::listTestGroupNames(TestResult& result)
{
 8010544:	b590      	push	{r4, r7, lr}
 8010546:	b08f      	sub	sp, #60	; 0x3c
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
 801054c:	6039      	str	r1, [r7, #0]
    SimpleString groupList;
 801054e:	f107 0314 	add.w	r3, r7, #20
 8010552:	4953      	ldr	r1, [pc, #332]	; (80106a0 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 8010554:	4618      	mov	r0, r3
 8010556:	f7fa ffe0 	bl	800b51a <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	685b      	ldr	r3, [r3, #4]
 801055e:	637b      	str	r3, [r7, #52]	; 0x34
 8010560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010562:	2b00      	cmp	r3, #0
 8010564:	d04d      	beq.n	8010602 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xbe>
        SimpleString gname;
 8010566:	f107 030c 	add.w	r3, r7, #12
 801056a:	494d      	ldr	r1, [pc, #308]	; (80106a0 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 801056c:	4618      	mov	r0, r3
 801056e:	f7fa ffd4 	bl	800b51a <_ZN12SimpleStringC1EPKc>
        gname += "#";
 8010572:	f107 030c 	add.w	r3, r7, #12
 8010576:	494b      	ldr	r1, [pc, #300]	; (80106a4 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 8010578:	4618      	mov	r0, r3
 801057a:	f7fb fc15 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
        gname += test->getGroup();
 801057e:	f107 031c 	add.w	r3, r7, #28
 8010582:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010584:	4618      	mov	r0, r3
 8010586:	f001 f9d2 	bl	801192e <_ZNK10UtestShell8getGroupEv>
 801058a:	f107 021c 	add.w	r2, r7, #28
 801058e:	f107 030c 	add.w	r3, r7, #12
 8010592:	4611      	mov	r1, r2
 8010594:	4618      	mov	r0, r3
 8010596:	f7fb fbf5 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 801059a:	f107 031c 	add.w	r3, r7, #28
 801059e:	4618      	mov	r0, r3
 80105a0:	f7fb fb73 	bl	800bc8a <_ZN12SimpleStringD1Ev>
        gname += "#";
 80105a4:	f107 030c 	add.w	r3, r7, #12
 80105a8:	493e      	ldr	r1, [pc, #248]	; (80106a4 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 80105aa:	4618      	mov	r0, r3
 80105ac:	f7fb fbfc 	bl	800bda8 <_ZN12SimpleStringpLEPKc>

        if (!groupList.contains(gname)) {
 80105b0:	f107 020c 	add.w	r2, r7, #12
 80105b4:	f107 0314 	add.w	r3, r7, #20
 80105b8:	4611      	mov	r1, r2
 80105ba:	4618      	mov	r0, r3
 80105bc:	f7fb f82b 	bl	800b616 <_ZNK12SimpleString8containsERKS_>
 80105c0:	4603      	mov	r3, r0
 80105c2:	f083 0301 	eor.w	r3, r3, #1
 80105c6:	b2db      	uxtb	r3, r3
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d00d      	beq.n	80105e8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xa4>
            groupList += gname;
 80105cc:	f107 020c 	add.w	r2, r7, #12
 80105d0:	f107 0314 	add.w	r3, r7, #20
 80105d4:	4611      	mov	r1, r2
 80105d6:	4618      	mov	r0, r3
 80105d8:	f7fb fbd4 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
            groupList += " ";
 80105dc:	f107 0314 	add.w	r3, r7, #20
 80105e0:	4931      	ldr	r1, [pc, #196]	; (80106a8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 80105e2:	4618      	mov	r0, r3
 80105e4:	f7fb fbe0 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
        SimpleString gname;
 80105e8:	f107 030c 	add.w	r3, r7, #12
 80105ec:	4618      	mov	r0, r3
 80105ee:	f7fb fb4c 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80105f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	330c      	adds	r3, #12
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80105fc:	4798      	blx	r3
 80105fe:	6378      	str	r0, [r7, #52]	; 0x34
 8010600:	e7ae      	b.n	8010560 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x1c>
        }
    }

    groupList.replace("#", "");
 8010602:	f107 0314 	add.w	r3, r7, #20
 8010606:	4a26      	ldr	r2, [pc, #152]	; (80106a0 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 8010608:	4926      	ldr	r1, [pc, #152]	; (80106a4 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 801060a:	4618      	mov	r0, r3
 801060c:	f7fb f99a 	bl	800b944 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupList.endsWith(" "))
 8010610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010614:	4924      	ldr	r1, [pc, #144]	; (80106a8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 8010616:	4618      	mov	r0, r3
 8010618:	f7fa ff7f 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801061c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010620:	f107 0314 	add.w	r3, r7, #20
 8010624:	4611      	mov	r1, r2
 8010626:	4618      	mov	r0, r3
 8010628:	f7fb f874 	bl	800b714 <_ZNK12SimpleString8endsWithERKS_>
 801062c:	4603      	mov	r3, r0
 801062e:	461c      	mov	r4, r3
 8010630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010634:	4618      	mov	r0, r3
 8010636:	f7fb fb28 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801063a:	2c00      	cmp	r4, #0
 801063c:	d01a      	beq.n	8010674 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x130>
        groupList = groupList.subString(0, groupList.size() - 1);
 801063e:	f107 0314 	add.w	r3, r7, #20
 8010642:	4618      	mov	r0, r3
 8010644:	f7fb fb00 	bl	800bc48 <_ZNK12SimpleString4sizeEv>
 8010648:	4603      	mov	r3, r0
 801064a:	3b01      	subs	r3, #1
 801064c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8010650:	f107 0114 	add.w	r1, r7, #20
 8010654:	2200      	movs	r2, #0
 8010656:	f7fb fc21 	bl	800be9c <_ZNK12SimpleString9subStringEjj>
 801065a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801065e:	f107 0314 	add.w	r3, r7, #20
 8010662:	4611      	mov	r1, r2
 8010664:	4618      	mov	r0, r3
 8010666:	f7fa ffc4 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 801066a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801066e:	4618      	mov	r0, r3
 8010670:	f7fb fb0b 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    result.print(groupList.asCharString());
 8010674:	683b      	ldr	r3, [r7, #0]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	3338      	adds	r3, #56	; 0x38
 801067a:	681c      	ldr	r4, [r3, #0]
 801067c:	f107 0314 	add.w	r3, r7, #20
 8010680:	4618      	mov	r0, r3
 8010682:	f7fb fad5 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 8010686:	4603      	mov	r3, r0
 8010688:	4619      	mov	r1, r3
 801068a:	6838      	ldr	r0, [r7, #0]
 801068c:	47a0      	blx	r4
    SimpleString groupList;
 801068e:	f107 0314 	add.w	r3, r7, #20
 8010692:	4618      	mov	r0, r3
 8010694:	f7fb faf9 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 8010698:	bf00      	nop
 801069a:	373c      	adds	r7, #60	; 0x3c
 801069c:	46bd      	mov	sp, r7
 801069e:	bd90      	pop	{r4, r7, pc}
 80106a0:	080234bc 	.word	0x080234bc
 80106a4:	080234c0 	.word	0x080234c0
 80106a8:	080234c4 	.word	0x080234c4

080106ac <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult>:

void TestRegistry::listTestGroupAndCaseNames(TestResult& result)
{
 80106ac:	b590      	push	{r4, r7, lr}
 80106ae:	b091      	sub	sp, #68	; 0x44
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
 80106b4:	6039      	str	r1, [r7, #0]
    SimpleString groupAndNameList;
 80106b6:	f107 0314 	add.w	r3, r7, #20
 80106ba:	4964      	ldr	r1, [pc, #400]	; (801084c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 80106bc:	4618      	mov	r0, r3
 80106be:	f7fa ff2c 	bl	800b51a <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	685b      	ldr	r3, [r3, #4]
 80106c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80106c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d06e      	beq.n	80107ac <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x100>
        if (testShouldRun(test, result)) {
 80106ce:	683a      	ldr	r2, [r7, #0]
 80106d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80106d2:	6878      	ldr	r0, [r7, #4]
 80106d4:	f000 fa6e 	bl	8010bb4 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 80106d8:	4603      	mov	r3, r0
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d05e      	beq.n	801079c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xf0>
            SimpleString groupAndName;
 80106de:	f107 030c 	add.w	r3, r7, #12
 80106e2:	495a      	ldr	r1, [pc, #360]	; (801084c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 80106e4:	4618      	mov	r0, r3
 80106e6:	f7fa ff18 	bl	800b51a <_ZN12SimpleStringC1EPKc>
            groupAndName += "#";
 80106ea:	f107 030c 	add.w	r3, r7, #12
 80106ee:	4958      	ldr	r1, [pc, #352]	; (8010850 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 80106f0:	4618      	mov	r0, r3
 80106f2:	f7fb fb59 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getGroup();
 80106f6:	f107 031c 	add.w	r3, r7, #28
 80106fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80106fc:	4618      	mov	r0, r3
 80106fe:	f001 f916 	bl	801192e <_ZNK10UtestShell8getGroupEv>
 8010702:	f107 021c 	add.w	r2, r7, #28
 8010706:	f107 030c 	add.w	r3, r7, #12
 801070a:	4611      	mov	r1, r2
 801070c:	4618      	mov	r0, r3
 801070e:	f7fb fb39 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 8010712:	f107 031c 	add.w	r3, r7, #28
 8010716:	4618      	mov	r0, r3
 8010718:	f7fb fab7 	bl	800bc8a <_ZN12SimpleStringD1Ev>
            groupAndName += ".";
 801071c:	f107 030c 	add.w	r3, r7, #12
 8010720:	494c      	ldr	r1, [pc, #304]	; (8010854 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a8>)
 8010722:	4618      	mov	r0, r3
 8010724:	f7fb fb40 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getName();
 8010728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801072c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801072e:	4618      	mov	r0, r3
 8010730:	f001 f8ee 	bl	8011910 <_ZNK10UtestShell7getNameEv>
 8010734:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010738:	f107 030c 	add.w	r3, r7, #12
 801073c:	4611      	mov	r1, r2
 801073e:	4618      	mov	r0, r3
 8010740:	f7fb fb20 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 8010744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010748:	4618      	mov	r0, r3
 801074a:	f7fb fa9e 	bl	800bc8a <_ZN12SimpleStringD1Ev>
            groupAndName += "#";
 801074e:	f107 030c 	add.w	r3, r7, #12
 8010752:	493f      	ldr	r1, [pc, #252]	; (8010850 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8010754:	4618      	mov	r0, r3
 8010756:	f7fb fb27 	bl	800bda8 <_ZN12SimpleStringpLEPKc>

            if (!groupAndNameList.contains(groupAndName)) {
 801075a:	f107 020c 	add.w	r2, r7, #12
 801075e:	f107 0314 	add.w	r3, r7, #20
 8010762:	4611      	mov	r1, r2
 8010764:	4618      	mov	r0, r3
 8010766:	f7fa ff56 	bl	800b616 <_ZNK12SimpleString8containsERKS_>
 801076a:	4603      	mov	r3, r0
 801076c:	f083 0301 	eor.w	r3, r3, #1
 8010770:	b2db      	uxtb	r3, r3
 8010772:	2b00      	cmp	r3, #0
 8010774:	d00d      	beq.n	8010792 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xe6>
                groupAndNameList += groupAndName;
 8010776:	f107 020c 	add.w	r2, r7, #12
 801077a:	f107 0314 	add.w	r3, r7, #20
 801077e:	4611      	mov	r1, r2
 8010780:	4618      	mov	r0, r3
 8010782:	f7fb faff 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
                groupAndNameList += " ";
 8010786:	f107 0314 	add.w	r3, r7, #20
 801078a:	4933      	ldr	r1, [pc, #204]	; (8010858 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 801078c:	4618      	mov	r0, r3
 801078e:	f7fb fb0b 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
            SimpleString groupAndName;
 8010792:	f107 030c 	add.w	r3, r7, #12
 8010796:	4618      	mov	r0, r3
 8010798:	f7fb fa77 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 801079c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	330c      	adds	r3, #12
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80107a6:	4798      	blx	r3
 80107a8:	63f8      	str	r0, [r7, #60]	; 0x3c
 80107aa:	e78d      	b.n	80106c8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1c>
            }
        }
    }

    groupAndNameList.replace("#", "");
 80107ac:	f107 0314 	add.w	r3, r7, #20
 80107b0:	4a26      	ldr	r2, [pc, #152]	; (801084c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 80107b2:	4927      	ldr	r1, [pc, #156]	; (8010850 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 80107b4:	4618      	mov	r0, r3
 80107b6:	f7fb f8c5 	bl	800b944 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupAndNameList.endsWith(" "))
 80107ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80107be:	4926      	ldr	r1, [pc, #152]	; (8010858 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 80107c0:	4618      	mov	r0, r3
 80107c2:	f7fa feaa 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80107c6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80107ca:	f107 0314 	add.w	r3, r7, #20
 80107ce:	4611      	mov	r1, r2
 80107d0:	4618      	mov	r0, r3
 80107d2:	f7fa ff9f 	bl	800b714 <_ZNK12SimpleString8endsWithERKS_>
 80107d6:	4603      	mov	r3, r0
 80107d8:	461c      	mov	r4, r3
 80107da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80107de:	4618      	mov	r0, r3
 80107e0:	f7fb fa53 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 80107e4:	2c00      	cmp	r4, #0
 80107e6:	d01a      	beq.n	801081e <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x172>
        groupAndNameList = groupAndNameList.subString(0, groupAndNameList.size() - 1);
 80107e8:	f107 0314 	add.w	r3, r7, #20
 80107ec:	4618      	mov	r0, r3
 80107ee:	f7fb fa2b 	bl	800bc48 <_ZNK12SimpleString4sizeEv>
 80107f2:	4603      	mov	r3, r0
 80107f4:	3b01      	subs	r3, #1
 80107f6:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80107fa:	f107 0114 	add.w	r1, r7, #20
 80107fe:	2200      	movs	r2, #0
 8010800:	f7fb fb4c 	bl	800be9c <_ZNK12SimpleString9subStringEjj>
 8010804:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8010808:	f107 0314 	add.w	r3, r7, #20
 801080c:	4611      	mov	r1, r2
 801080e:	4618      	mov	r0, r3
 8010810:	f7fa feef 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 8010814:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010818:	4618      	mov	r0, r3
 801081a:	f7fb fa36 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    result.print(groupAndNameList.asCharString());
 801081e:	683b      	ldr	r3, [r7, #0]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	3338      	adds	r3, #56	; 0x38
 8010824:	681c      	ldr	r4, [r3, #0]
 8010826:	f107 0314 	add.w	r3, r7, #20
 801082a:	4618      	mov	r0, r3
 801082c:	f7fb fa00 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 8010830:	4603      	mov	r3, r0
 8010832:	4619      	mov	r1, r3
 8010834:	6838      	ldr	r0, [r7, #0]
 8010836:	47a0      	blx	r4
    SimpleString groupAndNameList;
 8010838:	f107 0314 	add.w	r3, r7, #20
 801083c:	4618      	mov	r0, r3
 801083e:	f7fb fa24 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 8010842:	bf00      	nop
 8010844:	3744      	adds	r7, #68	; 0x44
 8010846:	46bd      	mov	sp, r7
 8010848:	bd90      	pop	{r4, r7, pc}
 801084a:	bf00      	nop
 801084c:	080234bc 	.word	0x080234bc
 8010850:	080234c0 	.word	0x080234c0
 8010854:	080234c8 	.word	0x080234c8
 8010858:	080234c4 	.word	0x080234c4

0801085c <_ZN12TestRegistry17listTestLocationsER10TestResult>:

void TestRegistry::listTestLocations(TestResult& result)
{
 801085c:	b590      	push	{r4, r7, lr}
 801085e:	b091      	sub	sp, #68	; 0x44
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
 8010864:	6039      	str	r1, [r7, #0]
    SimpleString testLocations;
 8010866:	f107 0314 	add.w	r3, r7, #20
 801086a:	494f      	ldr	r1, [pc, #316]	; (80109a8 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 801086c:	4618      	mov	r0, r3
 801086e:	f7fa fe54 	bl	800b51a <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	685b      	ldr	r3, [r3, #4]
 8010876:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801087a:	2b00      	cmp	r3, #0
 801087c:	d07d      	beq.n	801097a <_ZN12TestRegistry17listTestLocationsER10TestResult+0x11e>
            SimpleString testLocation;
 801087e:	f107 030c 	add.w	r3, r7, #12
 8010882:	4949      	ldr	r1, [pc, #292]	; (80109a8 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 8010884:	4618      	mov	r0, r3
 8010886:	f7fa fe48 	bl	800b51a <_ZN12SimpleStringC1EPKc>
            testLocation += test->getGroup();
 801088a:	f107 031c 	add.w	r3, r7, #28
 801088e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010890:	4618      	mov	r0, r3
 8010892:	f001 f84c 	bl	801192e <_ZNK10UtestShell8getGroupEv>
 8010896:	f107 021c 	add.w	r2, r7, #28
 801089a:	f107 030c 	add.w	r3, r7, #12
 801089e:	4611      	mov	r1, r2
 80108a0:	4618      	mov	r0, r3
 80108a2:	f7fb fa6f 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 80108a6:	f107 031c 	add.w	r3, r7, #28
 80108aa:	4618      	mov	r0, r3
 80108ac:	f7fb f9ed 	bl	800bc8a <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 80108b0:	f107 030c 	add.w	r3, r7, #12
 80108b4:	493d      	ldr	r1, [pc, #244]	; (80109ac <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 80108b6:	4618      	mov	r0, r3
 80108b8:	f7fb fa76 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getName();
 80108bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80108c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80108c2:	4618      	mov	r0, r3
 80108c4:	f001 f824 	bl	8011910 <_ZNK10UtestShell7getNameEv>
 80108c8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80108cc:	f107 030c 	add.w	r3, r7, #12
 80108d0:	4611      	mov	r1, r2
 80108d2:	4618      	mov	r0, r3
 80108d4:	f7fb fa56 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 80108d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80108dc:	4618      	mov	r0, r3
 80108de:	f7fb f9d4 	bl	800bc8a <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 80108e2:	f107 030c 	add.w	r3, r7, #12
 80108e6:	4931      	ldr	r1, [pc, #196]	; (80109ac <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 80108e8:	4618      	mov	r0, r3
 80108ea:	f7fb fa5d 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getFile();
 80108ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80108f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80108f4:	4618      	mov	r0, r3
 80108f6:	f001 f8dc 	bl	8011ab2 <_ZNK10UtestShell7getFileEv>
 80108fa:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80108fe:	f107 030c 	add.w	r3, r7, #12
 8010902:	4611      	mov	r1, r2
 8010904:	4618      	mov	r0, r3
 8010906:	f7fb fa3d 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 801090a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801090e:	4618      	mov	r0, r3
 8010910:	f7fb f9bb 	bl	800bc8a <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8010914:	f107 030c 	add.w	r3, r7, #12
 8010918:	4924      	ldr	r1, [pc, #144]	; (80109ac <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 801091a:	4618      	mov	r0, r3
 801091c:	f7fb fa44 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
            testLocation += StringFromFormat("%d\n",(int) test->getLineNumber());
 8010920:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010922:	f001 f8d5 	bl	8011ad0 <_ZNK10UtestShell13getLineNumberEv>
 8010926:	4603      	mov	r3, r0
 8010928:	461a      	mov	r2, r3
 801092a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801092e:	4920      	ldr	r1, [pc, #128]	; (80109b0 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x154>)
 8010930:	4618      	mov	r0, r3
 8010932:	f7fb feb1 	bl	800c698 <_Z16StringFromFormatPKcz>
 8010936:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801093a:	f107 030c 	add.w	r3, r7, #12
 801093e:	4611      	mov	r1, r2
 8010940:	4618      	mov	r0, r3
 8010942:	f7fb fa1f 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 8010946:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801094a:	4618      	mov	r0, r3
 801094c:	f7fb f99d 	bl	800bc8a <_ZN12SimpleStringD1Ev>

            testLocations += testLocation;
 8010950:	f107 020c 	add.w	r2, r7, #12
 8010954:	f107 0314 	add.w	r3, r7, #20
 8010958:	4611      	mov	r1, r2
 801095a:	4618      	mov	r0, r3
 801095c:	f7fb fa12 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
            SimpleString testLocation;
 8010960:	f107 030c 	add.w	r3, r7, #12
 8010964:	4618      	mov	r0, r3
 8010966:	f7fb f990 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 801096a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	330c      	adds	r3, #12
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010974:	4798      	blx	r3
 8010976:	63f8      	str	r0, [r7, #60]	; 0x3c
 8010978:	e77e      	b.n	8010878 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x1c>
    }

    result.print(testLocations.asCharString());
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	3338      	adds	r3, #56	; 0x38
 8010980:	681c      	ldr	r4, [r3, #0]
 8010982:	f107 0314 	add.w	r3, r7, #20
 8010986:	4618      	mov	r0, r3
 8010988:	f7fb f952 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 801098c:	4603      	mov	r3, r0
 801098e:	4619      	mov	r1, r3
 8010990:	6838      	ldr	r0, [r7, #0]
 8010992:	47a0      	blx	r4
    SimpleString testLocations;
 8010994:	f107 0314 	add.w	r3, r7, #20
 8010998:	4618      	mov	r0, r3
 801099a:	f7fb f976 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 801099e:	bf00      	nop
 80109a0:	3744      	adds	r7, #68	; 0x44
 80109a2:	46bd      	mov	sp, r7
 80109a4:	bd90      	pop	{r4, r7, pc}
 80109a6:	bf00      	nop
 80109a8:	080234bc 	.word	0x080234bc
 80109ac:	080234c8 	.word	0x080234c8
 80109b0:	080234cc 	.word	0x080234cc

080109b4 <_ZN12TestRegistry10endOfGroupEP10UtestShell>:

bool TestRegistry::endOfGroup(UtestShell* test)
{
 80109b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109b6:	b087      	sub	sp, #28
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
 80109bc:	6039      	str	r1, [r7, #0]
    return (!test || !test->getNext() || test->getGroup() != test->getNext()->getGroup());
 80109be:	2400      	movs	r4, #0
 80109c0:	2500      	movs	r5, #0
 80109c2:	683b      	ldr	r3, [r7, #0]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d028      	beq.n	8010a1a <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 80109c8:	683b      	ldr	r3, [r7, #0]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	330c      	adds	r3, #12
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	6838      	ldr	r0, [r7, #0]
 80109d2:	4798      	blx	r3
 80109d4:	4603      	mov	r3, r0
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d01f      	beq.n	8010a1a <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 80109da:	f107 0308 	add.w	r3, r7, #8
 80109de:	6839      	ldr	r1, [r7, #0]
 80109e0:	4618      	mov	r0, r3
 80109e2:	f000 ffa4 	bl	801192e <_ZNK10UtestShell8getGroupEv>
 80109e6:	2401      	movs	r4, #1
 80109e8:	683b      	ldr	r3, [r7, #0]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	330c      	adds	r3, #12
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	6838      	ldr	r0, [r7, #0]
 80109f2:	4798      	blx	r3
 80109f4:	4602      	mov	r2, r0
 80109f6:	f107 0310 	add.w	r3, r7, #16
 80109fa:	4611      	mov	r1, r2
 80109fc:	4618      	mov	r0, r3
 80109fe:	f000 ff96 	bl	801192e <_ZNK10UtestShell8getGroupEv>
 8010a02:	2501      	movs	r5, #1
 8010a04:	f107 0210 	add.w	r2, r7, #16
 8010a08:	f107 0308 	add.w	r3, r7, #8
 8010a0c:	4611      	mov	r1, r2
 8010a0e:	4618      	mov	r0, r3
 8010a10:	f7fb f98c 	bl	800bd2c <_ZneRK12SimpleStringS1_>
 8010a14:	4603      	mov	r3, r0
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d001      	beq.n	8010a1e <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6a>
 8010a1a:	2601      	movs	r6, #1
 8010a1c:	e000      	b.n	8010a20 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6c>
 8010a1e:	2600      	movs	r6, #0
 8010a20:	2d00      	cmp	r5, #0
 8010a22:	d004      	beq.n	8010a2e <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x7a>
 8010a24:	f107 0310 	add.w	r3, r7, #16
 8010a28:	4618      	mov	r0, r3
 8010a2a:	f7fb f92e 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8010a2e:	2c00      	cmp	r4, #0
 8010a30:	d004      	beq.n	8010a3c <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x88>
 8010a32:	f107 0308 	add.w	r3, r7, #8
 8010a36:	4618      	mov	r0, r3
 8010a38:	f7fb f927 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8010a3c:	4633      	mov	r3, r6
}
 8010a3e:	4618      	mov	r0, r3
 8010a40:	371c      	adds	r7, #28
 8010a42:	46bd      	mov	sp, r7
 8010a44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010a46 <_ZN12TestRegistry10countTestsEv>:

size_t TestRegistry::countTests()
{
 8010a46:	b580      	push	{r7, lr}
 8010a48:	b082      	sub	sp, #8
 8010a4a:	af00      	add	r7, sp, #0
 8010a4c:	6078      	str	r0, [r7, #4]
    return tests_ ? tests_->countTests() : 0;
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	685b      	ldr	r3, [r3, #4]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d00a      	beq.n	8010a6c <_ZN12TestRegistry10countTestsEv+0x26>
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	685a      	ldr	r2, [r3, #4]
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	685b      	ldr	r3, [r3, #4]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	3310      	adds	r3, #16
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	4610      	mov	r0, r2
 8010a66:	4798      	blx	r3
 8010a68:	4603      	mov	r3, r0
 8010a6a:	e000      	b.n	8010a6e <_ZN12TestRegistry10countTestsEv+0x28>
 8010a6c:	2300      	movs	r3, #0
}
 8010a6e:	4618      	mov	r0, r3
 8010a70:	3708      	adds	r7, #8
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}
	...

08010a78 <__tcf_0>:

TestRegistry* TestRegistry::currentRegistry_ = NULLPTR;

TestRegistry* TestRegistry::getCurrentRegistry()
{
    static TestRegistry registry;
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	af00      	add	r7, sp, #0
 8010a7c:	4801      	ldr	r0, [pc, #4]	; (8010a84 <__tcf_0+0xc>)
 8010a7e:	f7ff fcad 	bl	80103dc <_ZN12TestRegistryD1Ev>
 8010a82:	bd80      	pop	{r7, pc}
 8010a84:	2000092c 	.word	0x2000092c

08010a88 <_ZN12TestRegistry18getCurrentRegistryEv>:
{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	af00      	add	r7, sp, #0
    static TestRegistry registry;
 8010a8c:	4b15      	ldr	r3, [pc, #84]	; (8010ae4 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 8010a8e:	781b      	ldrb	r3, [r3, #0]
 8010a90:	f3bf 8f5b 	dmb	ish
 8010a94:	b2db      	uxtb	r3, r3
 8010a96:	f003 0301 	and.w	r3, r3, #1
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	bf0c      	ite	eq
 8010a9e:	2301      	moveq	r3, #1
 8010aa0:	2300      	movne	r3, #0
 8010aa2:	b2db      	uxtb	r3, r3
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d013      	beq.n	8010ad0 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 8010aa8:	480e      	ldr	r0, [pc, #56]	; (8010ae4 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 8010aaa:	f00d fbf5 	bl	801e298 <__cxa_guard_acquire>
 8010aae:	4603      	mov	r3, r0
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	bf14      	ite	ne
 8010ab4:	2301      	movne	r3, #1
 8010ab6:	2300      	moveq	r3, #0
 8010ab8:	b2db      	uxtb	r3, r3
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d008      	beq.n	8010ad0 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 8010abe:	480a      	ldr	r0, [pc, #40]	; (8010ae8 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
 8010ac0:	f7ff fc66 	bl	8010390 <_ZN12TestRegistryC1Ev>
 8010ac4:	4807      	ldr	r0, [pc, #28]	; (8010ae4 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 8010ac6:	f00d fbf3 	bl	801e2b0 <__cxa_guard_release>
 8010aca:	4808      	ldr	r0, [pc, #32]	; (8010aec <_ZN12TestRegistry18getCurrentRegistryEv+0x64>)
 8010acc:	f00d fc17 	bl	801e2fe <atexit>
    return (currentRegistry_ == NULLPTR) ? &registry : currentRegistry_;
 8010ad0:	4b07      	ldr	r3, [pc, #28]	; (8010af0 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d002      	beq.n	8010ade <_ZN12TestRegistry18getCurrentRegistryEv+0x56>
 8010ad8:	4b05      	ldr	r3, [pc, #20]	; (8010af0 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	e000      	b.n	8010ae0 <_ZN12TestRegistry18getCurrentRegistryEv+0x58>
 8010ade:	4b02      	ldr	r3, [pc, #8]	; (8010ae8 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
}
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	bd80      	pop	{r7, pc}
 8010ae4:	2000094c 	.word	0x2000094c
 8010ae8:	2000092c 	.word	0x2000092c
 8010aec:	08010a79 	.word	0x08010a79
 8010af0:	20000928 	.word	0x20000928

08010af4 <_ZN12TestRegistry18setCurrentRegistryEPS_>:

void TestRegistry::setCurrentRegistry(TestRegistry* registry)
{
 8010af4:	b480      	push	{r7}
 8010af6:	b083      	sub	sp, #12
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
 8010afc:	6039      	str	r1, [r7, #0]
    currentRegistry_ = registry;
 8010afe:	4a04      	ldr	r2, [pc, #16]	; (8010b10 <_ZN12TestRegistry18setCurrentRegistryEPS_+0x1c>)
 8010b00:	683b      	ldr	r3, [r7, #0]
 8010b02:	6013      	str	r3, [r2, #0]
}
 8010b04:	bf00      	nop
 8010b06:	370c      	adds	r7, #12
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0e:	4770      	bx	lr
 8010b10:	20000928 	.word	0x20000928

08010b14 <_ZN12TestRegistry15unDoLastAddTestEv>:

void TestRegistry::unDoLastAddTest()
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b082      	sub	sp, #8
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
    tests_ = tests_ ? tests_->getNext() : NULLPTR;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	685b      	ldr	r3, [r3, #4]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d00a      	beq.n	8010b3a <_ZN12TestRegistry15unDoLastAddTestEv+0x26>
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	685a      	ldr	r2, [r3, #4]
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	685b      	ldr	r3, [r3, #4]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	330c      	adds	r3, #12
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	4610      	mov	r0, r2
 8010b34:	4798      	blx	r3
 8010b36:	4603      	mov	r3, r0
 8010b38:	e000      	b.n	8010b3c <_ZN12TestRegistry15unDoLastAddTestEv+0x28>
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	687a      	ldr	r2, [r7, #4]
 8010b3e:	6053      	str	r3, [r2, #4]

}
 8010b40:	bf00      	nop
 8010b42:	3708      	adds	r7, #8
 8010b44:	46bd      	mov	sp, r7
 8010b46:	bd80      	pop	{r7, pc}

08010b48 <_ZN12TestRegistry14setNameFiltersEPK10TestFilter>:

void TestRegistry::setNameFilters(const TestFilter* filters)
{
 8010b48:	b480      	push	{r7}
 8010b4a:	b083      	sub	sp, #12
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
 8010b50:	6039      	str	r1, [r7, #0]
    nameFilters_ = filters;
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	683a      	ldr	r2, [r7, #0]
 8010b56:	609a      	str	r2, [r3, #8]
}
 8010b58:	bf00      	nop
 8010b5a:	370c      	adds	r7, #12
 8010b5c:	46bd      	mov	sp, r7
 8010b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b62:	4770      	bx	lr

08010b64 <_ZN12TestRegistry15setGroupFiltersEPK10TestFilter>:

void TestRegistry::setGroupFilters(const TestFilter* filters)
{
 8010b64:	b480      	push	{r7}
 8010b66:	b083      	sub	sp, #12
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
 8010b6c:	6039      	str	r1, [r7, #0]
    groupFilters_ = filters;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	683a      	ldr	r2, [r7, #0]
 8010b72:	60da      	str	r2, [r3, #12]
}
 8010b74:	bf00      	nop
 8010b76:	370c      	adds	r7, #12
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7e:	4770      	bx	lr

08010b80 <_ZN12TestRegistry13setRunIgnoredEv>:

void TestRegistry::setRunIgnored()
{
 8010b80:	b480      	push	{r7}
 8010b82:	b083      	sub	sp, #12
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
    runIgnored_ = true;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	2201      	movs	r2, #1
 8010b8c:	771a      	strb	r2, [r3, #28]
}
 8010b8e:	bf00      	nop
 8010b90:	370c      	adds	r7, #12
 8010b92:	46bd      	mov	sp, r7
 8010b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b98:	4770      	bx	lr

08010b9a <_ZN12TestRegistry28setRunTestsInSeperateProcessEv>:

void TestRegistry::setRunTestsInSeperateProcess()
{
 8010b9a:	b480      	push	{r7}
 8010b9c:	b083      	sub	sp, #12
 8010b9e:	af00      	add	r7, sp, #0
 8010ba0:	6078      	str	r0, [r7, #4]
    runInSeperateProcess_ = true;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	2201      	movs	r2, #1
 8010ba6:	751a      	strb	r2, [r3, #20]
}
 8010ba8:	bf00      	nop
 8010baa:	370c      	adds	r7, #12
 8010bac:	46bd      	mov	sp, r7
 8010bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb2:	4770      	bx	lr

08010bb4 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>:
{
    return currentRepetition_;
}

bool TestRegistry::testShouldRun(UtestShell* test, TestResult& result)
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b084      	sub	sp, #16
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	60f8      	str	r0, [r7, #12]
 8010bbc:	60b9      	str	r1, [r7, #8]
 8010bbe:	607a      	str	r2, [r7, #4]
    if (test->shouldRun(groupFilters_, nameFilters_)) return true;
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	68d9      	ldr	r1, [r3, #12]
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	689b      	ldr	r3, [r3, #8]
 8010bc8:	461a      	mov	r2, r3
 8010bca:	68b8      	ldr	r0, [r7, #8]
 8010bcc:	f000 ffbb 	bl	8011b46 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>
 8010bd0:	4603      	mov	r3, r0
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d001      	beq.n	8010bda <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x26>
 8010bd6:	2301      	movs	r3, #1
 8010bd8:	e006      	b.n	8010be8 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x34>
    else {
        result.countFilteredOut();
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	332c      	adds	r3, #44	; 0x2c
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	6878      	ldr	r0, [r7, #4]
 8010be4:	4798      	blx	r3
        return false;
 8010be6:	2300      	movs	r3, #0
    }
}
 8010be8:	4618      	mov	r0, r3
 8010bea:	3710      	adds	r7, #16
 8010bec:	46bd      	mov	sp, r7
 8010bee:	bd80      	pop	{r7, pc}

08010bf0 <_ZN12TestRegistry12resetPluginsEv>:

void TestRegistry::resetPlugins()
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b082      	sub	sp, #8
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
    firstPlugin_ = NullTestPlugin::instance();
 8010bf8:	f7ff fb62 	bl	80102c0 <_ZN14NullTestPlugin8instanceEv>
 8010bfc:	4602      	mov	r2, r0
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	611a      	str	r2, [r3, #16]
}
 8010c02:	bf00      	nop
 8010c04:	3708      	adds	r7, #8
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}

08010c0a <_ZN12TestRegistry13installPluginEP10TestPlugin>:

void TestRegistry::installPlugin(TestPlugin* plugin)
{
 8010c0a:	b580      	push	{r7, lr}
 8010c0c:	b082      	sub	sp, #8
 8010c0e:	af00      	add	r7, sp, #0
 8010c10:	6078      	str	r0, [r7, #4]
 8010c12:	6039      	str	r1, [r7, #0]
    firstPlugin_ = plugin->addPlugin(firstPlugin_);
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	3324      	adds	r3, #36	; 0x24
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	687a      	ldr	r2, [r7, #4]
 8010c1e:	6912      	ldr	r2, [r2, #16]
 8010c20:	4611      	mov	r1, r2
 8010c22:	6838      	ldr	r0, [r7, #0]
 8010c24:	4798      	blx	r3
 8010c26:	4602      	mov	r2, r0
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	611a      	str	r2, [r3, #16]
}
 8010c2c:	bf00      	nop
 8010c2e:	3708      	adds	r7, #8
 8010c30:	46bd      	mov	sp, r7
 8010c32:	bd80      	pop	{r7, pc}

08010c34 <_ZN12TestRegistry14getFirstPluginEv>:

TestPlugin* TestRegistry::getFirstPlugin()
{
 8010c34:	b480      	push	{r7}
 8010c36:	b083      	sub	sp, #12
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
    return firstPlugin_;
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	691b      	ldr	r3, [r3, #16]
}
 8010c40:	4618      	mov	r0, r3
 8010c42:	370c      	adds	r7, #12
 8010c44:	46bd      	mov	sp, r7
 8010c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4a:	4770      	bx	lr

08010c4c <_ZN12TestRegistry15getPluginByNameERK12SimpleString>:

TestPlugin* TestRegistry::getPluginByName(const SimpleString& name)
{
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b082      	sub	sp, #8
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
 8010c54:	6039      	str	r1, [r7, #0]
    return firstPlugin_->getPluginByName(name);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	691b      	ldr	r3, [r3, #16]
 8010c5a:	6839      	ldr	r1, [r7, #0]
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	f7ff fa52 	bl	8010106 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 8010c62:	4603      	mov	r3, r0
}
 8010c64:	4618      	mov	r0, r3
 8010c66:	3708      	adds	r7, #8
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	bd80      	pop	{r7, pc}

08010c6c <_ZN12TestRegistry18removePluginByNameERK12SimpleString>:

void TestRegistry::removePluginByName(const SimpleString& name)
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b082      	sub	sp, #8
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
 8010c74:	6039      	str	r1, [r7, #0]
    if (firstPlugin_->removePluginByName(name) == firstPlugin_) firstPlugin_ = firstPlugin_->getNext();
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	691a      	ldr	r2, [r3, #16]
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	691b      	ldr	r3, [r3, #16]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	3328      	adds	r3, #40	; 0x28
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	6839      	ldr	r1, [r7, #0]
 8010c86:	4610      	mov	r0, r2
 8010c88:	4798      	blx	r3
 8010c8a:	4602      	mov	r2, r0
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	691b      	ldr	r3, [r3, #16]
 8010c90:	429a      	cmp	r2, r3
 8010c92:	bf0c      	ite	eq
 8010c94:	2301      	moveq	r3, #1
 8010c96:	2300      	movne	r3, #0
 8010c98:	b2db      	uxtb	r3, r3
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d00b      	beq.n	8010cb6 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x4a>
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	691a      	ldr	r2, [r3, #16]
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	691b      	ldr	r3, [r3, #16]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	332c      	adds	r3, #44	; 0x2c
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	4610      	mov	r0, r2
 8010cae:	4798      	blx	r3
 8010cb0:	4602      	mov	r2, r0
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	611a      	str	r2, [r3, #16]
    if (firstPlugin_->getName() == name) firstPlugin_ = firstPlugin_->getNext();
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	691b      	ldr	r3, [r3, #16]
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f7ff fa17 	bl	80100ee <_ZN10TestPlugin7getNameEv>
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	6839      	ldr	r1, [r7, #0]
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	f7fa ffec 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 8010cca:	4603      	mov	r3, r0
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d00b      	beq.n	8010ce8 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x7c>
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	691a      	ldr	r2, [r3, #16]
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	691b      	ldr	r3, [r3, #16]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	332c      	adds	r3, #44	; 0x2c
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	4610      	mov	r0, r2
 8010ce0:	4798      	blx	r3
 8010ce2:	4602      	mov	r2, r0
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	611a      	str	r2, [r3, #16]
    firstPlugin_->removePluginByName(name);
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	691a      	ldr	r2, [r3, #16]
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	691b      	ldr	r3, [r3, #16]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	3328      	adds	r3, #40	; 0x28
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	6839      	ldr	r1, [r7, #0]
 8010cf8:	4610      	mov	r0, r2
 8010cfa:	4798      	blx	r3
}
 8010cfc:	bf00      	nop
 8010cfe:	3708      	adds	r7, #8
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bd80      	pop	{r7, pc}

08010d04 <_ZN12TestRegistry12countPluginsEv>:

int TestRegistry::countPlugins()
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b084      	sub	sp, #16
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
    int count = 0;
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	691b      	ldr	r3, [r3, #16]
 8010d14:	60bb      	str	r3, [r7, #8]
 8010d16:	f7ff fad3 	bl	80102c0 <_ZN14NullTestPlugin8instanceEv>
 8010d1a:	4602      	mov	r2, r0
 8010d1c:	68bb      	ldr	r3, [r7, #8]
 8010d1e:	4293      	cmp	r3, r2
 8010d20:	bf14      	ite	ne
 8010d22:	2301      	movne	r3, #1
 8010d24:	2300      	moveq	r3, #0
 8010d26:	b2db      	uxtb	r3, r3
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d00a      	beq.n	8010d42 <_ZN12TestRegistry12countPluginsEv+0x3e>
        count++;
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	3301      	adds	r3, #1
 8010d30:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 8010d32:	68bb      	ldr	r3, [r7, #8]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	332c      	adds	r3, #44	; 0x2c
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	68b8      	ldr	r0, [r7, #8]
 8010d3c:	4798      	blx	r3
 8010d3e:	60b8      	str	r0, [r7, #8]
 8010d40:	e7e9      	b.n	8010d16 <_ZN12TestRegistry12countPluginsEv+0x12>
    return count;
 8010d42:	68fb      	ldr	r3, [r7, #12]
}
 8010d44:	4618      	mov	r0, r3
 8010d46:	3710      	adds	r7, #16
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	bd80      	pop	{r7, pc}

08010d4c <_ZN12TestRegistry12getFirstTestEv>:


UtestShell* TestRegistry::getFirstTest()
{
 8010d4c:	b480      	push	{r7}
 8010d4e:	b083      	sub	sp, #12
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
    return tests_;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	685b      	ldr	r3, [r3, #4]
}
 8010d58:	4618      	mov	r0, r3
 8010d5a:	370c      	adds	r7, #12
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d62:	4770      	bx	lr

08010d64 <_ZN12TestRegistry12shuffleTestsEj>:

void TestRegistry::shuffleTests(size_t seed)
{
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b084      	sub	sp, #16
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
 8010d6c:	6039      	str	r1, [r7, #0]
    UtestShellPointerArray array(getFirstTest());
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	334c      	adds	r3, #76	; 0x4c
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	6878      	ldr	r0, [r7, #4]
 8010d78:	4798      	blx	r3
 8010d7a:	4602      	mov	r2, r0
 8010d7c:	f107 0308 	add.w	r3, r7, #8
 8010d80:	4611      	mov	r1, r2
 8010d82:	4618      	mov	r0, r3
 8010d84:	f002 f8f8 	bl	8012f78 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.shuffle(seed);
 8010d88:	f107 0308 	add.w	r3, r7, #8
 8010d8c:	6839      	ldr	r1, [r7, #0]
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f002 f980 	bl	8013094 <_ZN22UtestShellPointerArray7shuffleEj>
    tests_ = array.getFirstTest();
 8010d94:	f107 0308 	add.w	r3, r7, #8
 8010d98:	4618      	mov	r0, r3
 8010d9a:	f002 fa13 	bl	80131c4 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 8010d9e:	4602      	mov	r2, r0
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 8010da4:	f107 0308 	add.w	r3, r7, #8
 8010da8:	4618      	mov	r0, r3
 8010daa:	f002 f939 	bl	8013020 <_ZN22UtestShellPointerArrayD1Ev>
}
 8010dae:	bf00      	nop
 8010db0:	3710      	adds	r7, #16
 8010db2:	46bd      	mov	sp, r7
 8010db4:	bd80      	pop	{r7, pc}

08010db6 <_ZN12TestRegistry12reverseTestsEv>:

void TestRegistry::reverseTests()
{
 8010db6:	b580      	push	{r7, lr}
 8010db8:	b084      	sub	sp, #16
 8010dba:	af00      	add	r7, sp, #0
 8010dbc:	6078      	str	r0, [r7, #4]
    UtestShellPointerArray array(getFirstTest());
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	334c      	adds	r3, #76	; 0x4c
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	6878      	ldr	r0, [r7, #4]
 8010dc8:	4798      	blx	r3
 8010dca:	4602      	mov	r2, r0
 8010dcc:	f107 0308 	add.w	r3, r7, #8
 8010dd0:	4611      	mov	r1, r2
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	f002 f8d0 	bl	8012f78 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.reverse();
 8010dd8:	f107 0308 	add.w	r3, r7, #8
 8010ddc:	4618      	mov	r0, r3
 8010dde:	f002 f995 	bl	801310c <_ZN22UtestShellPointerArray7reverseEv>
    tests_ = array.getFirstTest();
 8010de2:	f107 0308 	add.w	r3, r7, #8
 8010de6:	4618      	mov	r0, r3
 8010de8:	f002 f9ec 	bl	80131c4 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 8010dec:	4602      	mov	r2, r0
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 8010df2:	f107 0308 	add.w	r3, r7, #8
 8010df6:	4618      	mov	r0, r3
 8010df8:	f002 f912 	bl	8013020 <_ZN22UtestShellPointerArrayD1Ev>
}
 8010dfc:	bf00      	nop
 8010dfe:	3710      	adds	r7, #16
 8010e00:	46bd      	mov	sp, r7
 8010e02:	bd80      	pop	{r7, pc}

08010e04 <_ZN12TestRegistry15getTestWithNextEP10UtestShell>:

UtestShell* TestRegistry::getTestWithNext(UtestShell* test)
{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b084      	sub	sp, #16
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	6078      	str	r0, [r7, #4]
 8010e0c:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	685b      	ldr	r3, [r3, #4]
 8010e12:	60fb      	str	r3, [r7, #12]
    while (current && current->getNext() != test)
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d00b      	beq.n	8010e32 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	330c      	adds	r3, #12
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	68f8      	ldr	r0, [r7, #12]
 8010e24:	4798      	blx	r3
 8010e26:	4602      	mov	r2, r0
 8010e28:	683b      	ldr	r3, [r7, #0]
 8010e2a:	4293      	cmp	r3, r2
 8010e2c:	d001      	beq.n	8010e32 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 8010e2e:	2301      	movs	r3, #1
 8010e30:	e000      	b.n	8010e34 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x30>
 8010e32:	2300      	movs	r3, #0
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d007      	beq.n	8010e48 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x44>
        current = current->getNext();
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	330c      	adds	r3, #12
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	68f8      	ldr	r0, [r7, #12]
 8010e42:	4798      	blx	r3
 8010e44:	60f8      	str	r0, [r7, #12]
    while (current && current->getNext() != test)
 8010e46:	e7e5      	b.n	8010e14 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x10>
    return current;
 8010e48:	68fb      	ldr	r3, [r7, #12]
}
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	3710      	adds	r7, #16
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	bd80      	pop	{r7, pc}

08010e52 <_ZN12TestRegistry16findTestWithNameERK12SimpleString>:

UtestShell* TestRegistry::findTestWithName(const SimpleString& name)
{
 8010e52:	b590      	push	{r4, r7, lr}
 8010e54:	b087      	sub	sp, #28
 8010e56:	af00      	add	r7, sp, #0
 8010e58:	6078      	str	r0, [r7, #4]
 8010e5a:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	685b      	ldr	r3, [r3, #4]
 8010e60:	617b      	str	r3, [r7, #20]
    while (current) {
 8010e62:	697b      	ldr	r3, [r7, #20]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d01e      	beq.n	8010ea6 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x54>
        if (current->getName() == name)
 8010e68:	f107 030c 	add.w	r3, r7, #12
 8010e6c:	6979      	ldr	r1, [r7, #20]
 8010e6e:	4618      	mov	r0, r3
 8010e70:	f000 fd4e 	bl	8011910 <_ZNK10UtestShell7getNameEv>
 8010e74:	f107 030c 	add.w	r3, r7, #12
 8010e78:	6839      	ldr	r1, [r7, #0]
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	f7fa ff11 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 8010e80:	4603      	mov	r3, r0
 8010e82:	461c      	mov	r4, r3
 8010e84:	f107 030c 	add.w	r3, r7, #12
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f7fa fefe 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8010e8e:	2c00      	cmp	r4, #0
 8010e90:	d001      	beq.n	8010e96 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x44>
            return current;
 8010e92:	697b      	ldr	r3, [r7, #20]
 8010e94:	e008      	b.n	8010ea8 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x56>
        current = current->getNext();
 8010e96:	697b      	ldr	r3, [r7, #20]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	330c      	adds	r3, #12
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	6978      	ldr	r0, [r7, #20]
 8010ea0:	4798      	blx	r3
 8010ea2:	6178      	str	r0, [r7, #20]
    while (current) {
 8010ea4:	e7dd      	b.n	8010e62 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x10>
    }
    return NULLPTR;
 8010ea6:	2300      	movs	r3, #0
}
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	371c      	adds	r7, #28
 8010eac:	46bd      	mov	sp, r7
 8010eae:	bd90      	pop	{r4, r7, pc}

08010eb0 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString>:

UtestShell* TestRegistry::findTestWithGroup(const SimpleString& group)
{
 8010eb0:	b590      	push	{r4, r7, lr}
 8010eb2:	b087      	sub	sp, #28
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
 8010eb8:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	685b      	ldr	r3, [r3, #4]
 8010ebe:	617b      	str	r3, [r7, #20]
    while (current) {
 8010ec0:	697b      	ldr	r3, [r7, #20]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d01e      	beq.n	8010f04 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x54>
        if (current->getGroup() == group)
 8010ec6:	f107 030c 	add.w	r3, r7, #12
 8010eca:	6979      	ldr	r1, [r7, #20]
 8010ecc:	4618      	mov	r0, r3
 8010ece:	f000 fd2e 	bl	801192e <_ZNK10UtestShell8getGroupEv>
 8010ed2:	f107 030c 	add.w	r3, r7, #12
 8010ed6:	6839      	ldr	r1, [r7, #0]
 8010ed8:	4618      	mov	r0, r3
 8010eda:	f7fa fee2 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 8010ede:	4603      	mov	r3, r0
 8010ee0:	461c      	mov	r4, r3
 8010ee2:	f107 030c 	add.w	r3, r7, #12
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f7fa fecf 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8010eec:	2c00      	cmp	r4, #0
 8010eee:	d001      	beq.n	8010ef4 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x44>
            return current;
 8010ef0:	697b      	ldr	r3, [r7, #20]
 8010ef2:	e008      	b.n	8010f06 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x56>
        current = current->getNext();
 8010ef4:	697b      	ldr	r3, [r7, #20]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	330c      	adds	r3, #12
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	6978      	ldr	r0, [r7, #20]
 8010efe:	4798      	blx	r3
 8010f00:	6178      	str	r0, [r7, #20]
    while (current) {
 8010f02:	e7dd      	b.n	8010ec0 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x10>
    }
    return NULLPTR;
 8010f04:	2300      	movs	r3, #0
}
 8010f06:	4618      	mov	r0, r3
 8010f08:	371c      	adds	r7, #28
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	bd90      	pop	{r4, r7, pc}
	...

08010f10 <_ZN10TestResultC1ER10TestOutput>:
#include "CppUTest/TestResult.h"
#include "CppUTest/TestFailure.h"
#include "CppUTest/TestOutput.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestResult::TestResult(TestOutput& p) :
 8010f10:	b480      	push	{r7}
 8010f12:	b083      	sub	sp, #12
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
 8010f18:	6039      	str	r1, [r7, #0]
    output_(p), testCount_(0), runCount_(0), checkCount_(0), failureCount_(0), filteredOutCount_(0), ignoredCount_(0), totalExecutionTime_(0), timeStarted_(0), currentTestTimeStarted_(0),
            currentTestTotalExecutionTime_(0), currentGroupTimeStarted_(0), currentGroupTotalExecutionTime_(0)
 8010f1a:	4a18      	ldr	r2, [pc, #96]	; (8010f7c <_ZN10TestResultC1ER10TestOutput+0x6c>)
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	601a      	str	r2, [r3, #0]
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	683a      	ldr	r2, [r7, #0]
 8010f24:	605a      	str	r2, [r3, #4]
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	2200      	movs	r2, #0
 8010f2a:	609a      	str	r2, [r3, #8]
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	2200      	movs	r2, #0
 8010f30:	60da      	str	r2, [r3, #12]
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	2200      	movs	r2, #0
 8010f36:	611a      	str	r2, [r3, #16]
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	615a      	str	r2, [r3, #20]
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	2200      	movs	r2, #0
 8010f42:	619a      	str	r2, [r3, #24]
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	2200      	movs	r2, #0
 8010f48:	61da      	str	r2, [r3, #28]
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	621a      	str	r2, [r3, #32]
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	2200      	movs	r2, #0
 8010f54:	625a      	str	r2, [r3, #36]	; 0x24
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	2200      	movs	r2, #0
 8010f5a:	629a      	str	r2, [r3, #40]	; 0x28
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	2200      	movs	r2, #0
 8010f60:	62da      	str	r2, [r3, #44]	; 0x2c
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	2200      	movs	r2, #0
 8010f66:	631a      	str	r2, [r3, #48]	; 0x30
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	635a      	str	r2, [r3, #52]	; 0x34
{
}
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	4618      	mov	r0, r3
 8010f72:	370c      	adds	r7, #12
 8010f74:	46bd      	mov	sp, r7
 8010f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7a:	4770      	bx	lr
 8010f7c:	08026854 	.word	0x08026854

08010f80 <_ZN10TestResultD1Ev>:

TestResult::~TestResult()
 8010f80:	b480      	push	{r7}
 8010f82:	b083      	sub	sp, #12
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
 8010f88:	4a04      	ldr	r2, [pc, #16]	; (8010f9c <_ZN10TestResultD1Ev+0x1c>)
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	601a      	str	r2, [r3, #0]
{
}
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	4618      	mov	r0, r3
 8010f92:	370c      	adds	r7, #12
 8010f94:	46bd      	mov	sp, r7
 8010f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9a:	4770      	bx	lr
 8010f9c:	08026854 	.word	0x08026854

08010fa0 <_ZN10TestResultD0Ev>:
TestResult::~TestResult()
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b082      	sub	sp, #8
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
}
 8010fa8:	6878      	ldr	r0, [r7, #4]
 8010faa:	f7ff ffe9 	bl	8010f80 <_ZN10TestResultD1Ev>
 8010fae:	2138      	movs	r1, #56	; 0x38
 8010fb0:	6878      	ldr	r0, [r7, #4]
 8010fb2:	f7f7 ff03 	bl	8008dbc <_ZdlPvj>
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	4618      	mov	r0, r3
 8010fba:	3708      	adds	r7, #8
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	bd80      	pop	{r7, pc}

08010fc0 <_ZN10TestResult19currentGroupStartedEP10UtestShell>:

void TestResult::currentGroupStarted(UtestShell* test)
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b082      	sub	sp, #8
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
 8010fc8:	6039      	str	r1, [r7, #0]
    output_.printCurrentGroupStarted(*test);
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	685a      	ldr	r2, [r3, #4]
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	685b      	ldr	r3, [r3, #4]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	3318      	adds	r3, #24
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	6839      	ldr	r1, [r7, #0]
 8010fda:	4610      	mov	r0, r2
 8010fdc:	4798      	blx	r3
    currentGroupTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8010fde:	4b05      	ldr	r3, [pc, #20]	; (8010ff4 <_ZN10TestResult19currentGroupStartedEP10UtestShell+0x34>)
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	4798      	blx	r3
 8010fe4:	4603      	mov	r3, r0
 8010fe6:	461a      	mov	r2, r3
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	631a      	str	r2, [r3, #48]	; 0x30
}
 8010fec:	bf00      	nop
 8010fee:	3708      	adds	r7, #8
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	bd80      	pop	{r7, pc}
 8010ff4:	200000a8 	.word	0x200000a8

08010ff8 <_ZN10TestResult17currentGroupEndedEP10UtestShell>:

void TestResult::currentGroupEnded(UtestShell* /*test*/)
{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b082      	sub	sp, #8
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
 8011000:	6039      	str	r1, [r7, #0]
    currentGroupTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentGroupTimeStarted_;
 8011002:	4b0c      	ldr	r3, [pc, #48]	; (8011034 <_ZN10TestResult17currentGroupEndedEP10UtestShell+0x3c>)
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	4798      	blx	r3
 8011008:	4603      	mov	r3, r0
 801100a:	461a      	mov	r2, r3
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011010:	1ad2      	subs	r2, r2, r3
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	635a      	str	r2, [r3, #52]	; 0x34
    output_.printCurrentGroupEnded(*this);
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	685a      	ldr	r2, [r3, #4]
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	685b      	ldr	r3, [r3, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	331c      	adds	r3, #28
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	6879      	ldr	r1, [r7, #4]
 8011026:	4610      	mov	r0, r2
 8011028:	4798      	blx	r3
}
 801102a:	bf00      	nop
 801102c:	3708      	adds	r7, #8
 801102e:	46bd      	mov	sp, r7
 8011030:	bd80      	pop	{r7, pc}
 8011032:	bf00      	nop
 8011034:	200000a8 	.word	0x200000a8

08011038 <_ZN10TestResult18currentTestStartedEP10UtestShell>:

void TestResult::currentTestStarted(UtestShell* test)
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b082      	sub	sp, #8
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
 8011040:	6039      	str	r1, [r7, #0]
    output_.printCurrentTestStarted(*test);
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	685a      	ldr	r2, [r3, #4]
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	685b      	ldr	r3, [r3, #4]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	3310      	adds	r3, #16
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	6839      	ldr	r1, [r7, #0]
 8011052:	4610      	mov	r0, r2
 8011054:	4798      	blx	r3
    currentTestTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8011056:	4b05      	ldr	r3, [pc, #20]	; (801106c <_ZN10TestResult18currentTestStartedEP10UtestShell+0x34>)
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	4798      	blx	r3
 801105c:	4603      	mov	r3, r0
 801105e:	461a      	mov	r2, r3
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	629a      	str	r2, [r3, #40]	; 0x28
}
 8011064:	bf00      	nop
 8011066:	3708      	adds	r7, #8
 8011068:	46bd      	mov	sp, r7
 801106a:	bd80      	pop	{r7, pc}
 801106c:	200000a8 	.word	0x200000a8

08011070 <_ZN10TestResult5printEPKc>:

void TestResult::print(const char* text)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b082      	sub	sp, #8
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
 8011078:	6039      	str	r1, [r7, #0]
    output_.print(text);
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	685a      	ldr	r2, [r3, #4]
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	685b      	ldr	r3, [r3, #4]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	332c      	adds	r3, #44	; 0x2c
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	6839      	ldr	r1, [r7, #0]
 801108a:	4610      	mov	r0, r2
 801108c:	4798      	blx	r3
}
 801108e:	bf00      	nop
 8011090:	3708      	adds	r7, #8
 8011092:	46bd      	mov	sp, r7
 8011094:	bd80      	pop	{r7, pc}

08011096 <_ZN10TestResult16printVeryVerboseEPKc>:

void TestResult::printVeryVerbose(const char* text)
{
 8011096:	b580      	push	{r7, lr}
 8011098:	b082      	sub	sp, #8
 801109a:	af00      	add	r7, sp, #0
 801109c:	6078      	str	r0, [r7, #4]
 801109e:	6039      	str	r1, [r7, #0]
    output_.printVeryVerbose(text);
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	685a      	ldr	r2, [r3, #4]
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	685b      	ldr	r3, [r3, #4]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	3348      	adds	r3, #72	; 0x48
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	6839      	ldr	r1, [r7, #0]
 80110b0:	4610      	mov	r0, r2
 80110b2:	4798      	blx	r3
}
 80110b4:	bf00      	nop
 80110b6:	3708      	adds	r7, #8
 80110b8:	46bd      	mov	sp, r7
 80110ba:	bd80      	pop	{r7, pc}

080110bc <_ZN10TestResult16currentTestEndedEP10UtestShell>:

void TestResult::currentTestEnded(UtestShell* /*test*/)
{
 80110bc:	b580      	push	{r7, lr}
 80110be:	b082      	sub	sp, #8
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
 80110c4:	6039      	str	r1, [r7, #0]
    currentTestTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentTestTimeStarted_;
 80110c6:	4b0c      	ldr	r3, [pc, #48]	; (80110f8 <_ZN10TestResult16currentTestEndedEP10UtestShell+0x3c>)
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	4798      	blx	r3
 80110cc:	4603      	mov	r3, r0
 80110ce:	461a      	mov	r2, r3
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110d4:	1ad2      	subs	r2, r2, r3
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	62da      	str	r2, [r3, #44]	; 0x2c
    output_.printCurrentTestEnded(*this);
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	685a      	ldr	r2, [r3, #4]
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	685b      	ldr	r3, [r3, #4]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	3314      	adds	r3, #20
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	6879      	ldr	r1, [r7, #4]
 80110ea:	4610      	mov	r0, r2
 80110ec:	4798      	blx	r3

}
 80110ee:	bf00      	nop
 80110f0:	3708      	adds	r7, #8
 80110f2:	46bd      	mov	sp, r7
 80110f4:	bd80      	pop	{r7, pc}
 80110f6:	bf00      	nop
 80110f8:	200000a8 	.word	0x200000a8

080110fc <_ZN10TestResult10addFailureERK11TestFailure>:

void TestResult::addFailure(const TestFailure& failure)
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b082      	sub	sp, #8
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
 8011104:	6039      	str	r1, [r7, #0]
    output_.printFailure(failure);
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	685a      	ldr	r2, [r3, #4]
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	685b      	ldr	r3, [r3, #4]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	333c      	adds	r3, #60	; 0x3c
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	6839      	ldr	r1, [r7, #0]
 8011116:	4610      	mov	r0, r2
 8011118:	4798      	blx	r3
    failureCount_++;
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	695b      	ldr	r3, [r3, #20]
 801111e:	1c5a      	adds	r2, r3, #1
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	615a      	str	r2, [r3, #20]
}
 8011124:	bf00      	nop
 8011126:	3708      	adds	r7, #8
 8011128:	46bd      	mov	sp, r7
 801112a:	bd80      	pop	{r7, pc}

0801112c <_ZN10TestResult9countTestEv>:

void TestResult::countTest()
{
 801112c:	b480      	push	{r7}
 801112e:	b083      	sub	sp, #12
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
    testCount_++;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	689b      	ldr	r3, [r3, #8]
 8011138:	1c5a      	adds	r2, r3, #1
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	609a      	str	r2, [r3, #8]
}
 801113e:	bf00      	nop
 8011140:	370c      	adds	r7, #12
 8011142:	46bd      	mov	sp, r7
 8011144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011148:	4770      	bx	lr

0801114a <_ZN10TestResult8countRunEv>:

void TestResult::countRun()
{
 801114a:	b480      	push	{r7}
 801114c:	b083      	sub	sp, #12
 801114e:	af00      	add	r7, sp, #0
 8011150:	6078      	str	r0, [r7, #4]
    runCount_++;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	68db      	ldr	r3, [r3, #12]
 8011156:	1c5a      	adds	r2, r3, #1
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	60da      	str	r2, [r3, #12]
}
 801115c:	bf00      	nop
 801115e:	370c      	adds	r7, #12
 8011160:	46bd      	mov	sp, r7
 8011162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011166:	4770      	bx	lr

08011168 <_ZN10TestResult10countCheckEv>:

void TestResult::countCheck()
{
 8011168:	b480      	push	{r7}
 801116a:	b083      	sub	sp, #12
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
    checkCount_++;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	691b      	ldr	r3, [r3, #16]
 8011174:	1c5a      	adds	r2, r3, #1
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	611a      	str	r2, [r3, #16]
}
 801117a:	bf00      	nop
 801117c:	370c      	adds	r7, #12
 801117e:	46bd      	mov	sp, r7
 8011180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011184:	4770      	bx	lr

08011186 <_ZN10TestResult16countFilteredOutEv>:

void TestResult::countFilteredOut()
{
 8011186:	b480      	push	{r7}
 8011188:	b083      	sub	sp, #12
 801118a:	af00      	add	r7, sp, #0
 801118c:	6078      	str	r0, [r7, #4]
    filteredOutCount_++;
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	699b      	ldr	r3, [r3, #24]
 8011192:	1c5a      	adds	r2, r3, #1
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	619a      	str	r2, [r3, #24]
}
 8011198:	bf00      	nop
 801119a:	370c      	adds	r7, #12
 801119c:	46bd      	mov	sp, r7
 801119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a2:	4770      	bx	lr

080111a4 <_ZN10TestResult12countIgnoredEv>:

void TestResult::countIgnored()
{
 80111a4:	b480      	push	{r7}
 80111a6:	b083      	sub	sp, #12
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
    ignoredCount_++;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	69db      	ldr	r3, [r3, #28]
 80111b0:	1c5a      	adds	r2, r3, #1
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	61da      	str	r2, [r3, #28]
}
 80111b6:	bf00      	nop
 80111b8:	370c      	adds	r7, #12
 80111ba:	46bd      	mov	sp, r7
 80111bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c0:	4770      	bx	lr
	...

080111c4 <_ZN10TestResult12testsStartedEv>:

void TestResult::testsStarted()
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b082      	sub	sp, #8
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]
    timeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 80111cc:	4b09      	ldr	r3, [pc, #36]	; (80111f4 <_ZN10TestResult12testsStartedEv+0x30>)
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	4798      	blx	r3
 80111d2:	4603      	mov	r3, r0
 80111d4:	461a      	mov	r2, r3
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	625a      	str	r2, [r3, #36]	; 0x24
    output_.printTestsStarted();
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	685a      	ldr	r2, [r3, #4]
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	685b      	ldr	r3, [r3, #4]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	3308      	adds	r3, #8
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	4610      	mov	r0, r2
 80111ea:	4798      	blx	r3
}
 80111ec:	bf00      	nop
 80111ee:	3708      	adds	r7, #8
 80111f0:	46bd      	mov	sp, r7
 80111f2:	bd80      	pop	{r7, pc}
 80111f4:	200000a8 	.word	0x200000a8

080111f8 <_ZN10TestResult10testsEndedEv>:

void TestResult::testsEnded()
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b084      	sub	sp, #16
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
    size_t timeEnded = (size_t) GetPlatformSpecificTimeInMillis();
 8011200:	4b0c      	ldr	r3, [pc, #48]	; (8011234 <_ZN10TestResult10testsEndedEv+0x3c>)
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	4798      	blx	r3
 8011206:	4603      	mov	r3, r0
 8011208:	60fb      	str	r3, [r7, #12]
    totalExecutionTime_ = timeEnded - timeStarted_;
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801120e:	68fa      	ldr	r2, [r7, #12]
 8011210:	1ad2      	subs	r2, r2, r3
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	621a      	str	r2, [r3, #32]
    output_.printTestsEnded(*this);
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	685a      	ldr	r2, [r3, #4]
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	685b      	ldr	r3, [r3, #4]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	330c      	adds	r3, #12
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	6879      	ldr	r1, [r7, #4]
 8011226:	4610      	mov	r0, r2
 8011228:	4798      	blx	r3
}
 801122a:	bf00      	nop
 801122c:	3710      	adds	r7, #16
 801122e:	46bd      	mov	sp, r7
 8011230:	bd80      	pop	{r7, pc}
 8011232:	bf00      	nop
 8011234:	200000a8 	.word	0x200000a8

08011238 <_ZNK10TestResult21getTotalExecutionTimeEv>:

size_t TestResult::getTotalExecutionTime() const
{
 8011238:	b480      	push	{r7}
 801123a:	b083      	sub	sp, #12
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
    return totalExecutionTime_;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	6a1b      	ldr	r3, [r3, #32]
}
 8011244:	4618      	mov	r0, r3
 8011246:	370c      	adds	r7, #12
 8011248:	46bd      	mov	sp, r7
 801124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124e:	4770      	bx	lr

08011250 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>:
{
    totalExecutionTime_ = exTime;
}

size_t TestResult::getCurrentTestTotalExecutionTime() const
{
 8011250:	b480      	push	{r7}
 8011252:	b083      	sub	sp, #12
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
    return currentTestTotalExecutionTime_;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 801125c:	4618      	mov	r0, r3
 801125e:	370c      	adds	r7, #12
 8011260:	46bd      	mov	sp, r7
 8011262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011266:	4770      	bx	lr

08011268 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>:

size_t TestResult::getCurrentGroupTotalExecutionTime() const
{
 8011268:	b480      	push	{r7}
 801126a:	b083      	sub	sp, #12
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
    return currentGroupTotalExecutionTime_;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8011274:	4618      	mov	r0, r3
 8011276:	370c      	adds	r7, #12
 8011278:	46bd      	mov	sp, r7
 801127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127e:	4770      	bx	lr

08011280 <_Z13doubles_equalddd>:
#if defined(__GNUC__) && __GNUC__ >= 11
# define NEEDS_DISABLE_NULL_WARNING
#endif /* GCC >= 11 */

bool doubles_equal(double d1, double d2, double threshold)
{
 8011280:	b590      	push	{r4, r7, lr}
 8011282:	b087      	sub	sp, #28
 8011284:	af00      	add	r7, sp, #0
 8011286:	ed87 0b04 	vstr	d0, [r7, #16]
 801128a:	ed87 1b02 	vstr	d1, [r7, #8]
 801128e:	ed87 2b00 	vstr	d2, [r7]
    if (PlatformSpecificIsNan(d1) || PlatformSpecificIsNan(d2) || PlatformSpecificIsNan(threshold))
 8011292:	4b2c      	ldr	r3, [pc, #176]	; (8011344 <_Z13doubles_equalddd+0xc4>)
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	ed97 0b04 	vldr	d0, [r7, #16]
 801129a:	4798      	blx	r3
 801129c:	4603      	mov	r3, r0
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d10f      	bne.n	80112c2 <_Z13doubles_equalddd+0x42>
 80112a2:	4b28      	ldr	r3, [pc, #160]	; (8011344 <_Z13doubles_equalddd+0xc4>)
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	ed97 0b02 	vldr	d0, [r7, #8]
 80112aa:	4798      	blx	r3
 80112ac:	4603      	mov	r3, r0
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d107      	bne.n	80112c2 <_Z13doubles_equalddd+0x42>
 80112b2:	4b24      	ldr	r3, [pc, #144]	; (8011344 <_Z13doubles_equalddd+0xc4>)
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	ed97 0b00 	vldr	d0, [r7]
 80112ba:	4798      	blx	r3
 80112bc:	4603      	mov	r3, r0
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d001      	beq.n	80112c6 <_Z13doubles_equalddd+0x46>
 80112c2:	2301      	movs	r3, #1
 80112c4:	e000      	b.n	80112c8 <_Z13doubles_equalddd+0x48>
 80112c6:	2300      	movs	r3, #0
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d001      	beq.n	80112d0 <_Z13doubles_equalddd+0x50>
        return false;
 80112cc:	2300      	movs	r3, #0
 80112ce:	e035      	b.n	801133c <_Z13doubles_equalddd+0xbc>

    if (PlatformSpecificIsInf(d1) && PlatformSpecificIsInf(d2))
 80112d0:	4b1d      	ldr	r3, [pc, #116]	; (8011348 <_Z13doubles_equalddd+0xc8>)
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	ed97 0b04 	vldr	d0, [r7, #16]
 80112d8:	4798      	blx	r3
 80112da:	4603      	mov	r3, r0
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d009      	beq.n	80112f4 <_Z13doubles_equalddd+0x74>
 80112e0:	4b19      	ldr	r3, [pc, #100]	; (8011348 <_Z13doubles_equalddd+0xc8>)
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	ed97 0b02 	vldr	d0, [r7, #8]
 80112e8:	4798      	blx	r3
 80112ea:	4603      	mov	r3, r0
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d001      	beq.n	80112f4 <_Z13doubles_equalddd+0x74>
 80112f0:	2301      	movs	r3, #1
 80112f2:	e000      	b.n	80112f6 <_Z13doubles_equalddd+0x76>
 80112f4:	2300      	movs	r3, #0
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d001      	beq.n	80112fe <_Z13doubles_equalddd+0x7e>
    {
        return true;
 80112fa:	2301      	movs	r3, #1
 80112fc:	e01e      	b.n	801133c <_Z13doubles_equalddd+0xbc>
    }

    return PlatformSpecificFabs(d1 - d2) <= threshold;
 80112fe:	4b13      	ldr	r3, [pc, #76]	; (801134c <_Z13doubles_equalddd+0xcc>)
 8011300:	681c      	ldr	r4, [r3, #0]
 8011302:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011306:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801130a:	f7ee fffd 	bl	8000308 <__aeabi_dsub>
 801130e:	4602      	mov	r2, r0
 8011310:	460b      	mov	r3, r1
 8011312:	ec43 2b17 	vmov	d7, r2, r3
 8011316:	eeb0 0a47 	vmov.f32	s0, s14
 801131a:	eef0 0a67 	vmov.f32	s1, s15
 801131e:	47a0      	blx	r4
 8011320:	ec53 2b10 	vmov	r2, r3, d0
 8011324:	2101      	movs	r1, #1
 8011326:	460c      	mov	r4, r1
 8011328:	e9d7 0100 	ldrd	r0, r1, [r7]
 801132c:	f7ef fa18 	bl	8000760 <__aeabi_dcmpge>
 8011330:	4603      	mov	r3, r0
 8011332:	2b00      	cmp	r3, #0
 8011334:	d101      	bne.n	801133a <_Z13doubles_equalddd+0xba>
 8011336:	2300      	movs	r3, #0
 8011338:	461c      	mov	r4, r3
 801133a:	b2e3      	uxtb	r3, r4
}
 801133c:	4618      	mov	r0, r3
 801133e:	371c      	adds	r7, #28
 8011340:	46bd      	mov	sp, r7
 8011342:	bd90      	pop	{r4, r7, pc}
 8011344:	200000e8 	.word	0x200000e8
 8011348:	200000ec 	.word	0x200000ec
 801134c:	200000dc 	.word	0x200000dc

08011350 <_ZN22OutsideTestRunnerUTest13getTestResultEv>:
 */
class OutsideTestRunnerUTest: public UtestShell
{
public:
    static OutsideTestRunnerUTest& instance();
    virtual TestResult& getTestResult()
 8011350:	b480      	push	{r7}
 8011352:	b083      	sub	sp, #12
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
    {
        return defaultTestResult;
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	332c      	adds	r3, #44	; 0x2c
    }
 801135c:	4618      	mov	r0, r3
 801135e:	370c      	adds	r7, #12
 8011360:	46bd      	mov	sp, r7
 8011362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011366:	4770      	bx	lr

08011368 <_ZN22OutsideTestRunnerUTestD1Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 8011368:	b580      	push	{r7, lr}
 801136a:	b082      	sub	sp, #8
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
    {
 8011370:	4a0a      	ldr	r2, [pc, #40]	; (801139c <_ZN22OutsideTestRunnerUTestD1Ev+0x34>)
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	601a      	str	r2, [r3, #0]
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	332c      	adds	r3, #44	; 0x2c
 801137a:	4618      	mov	r0, r3
 801137c:	f7ff fe00 	bl	8010f80 <_ZN10TestResultD1Ev>
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	331c      	adds	r3, #28
 8011384:	4618      	mov	r0, r3
 8011386:	f7f6 f815 	bl	80073b4 <_ZN17ConsoleTestOutputD1Ev>
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	4618      	mov	r0, r3
 801138e:	f000 f943 	bl	8011618 <_ZN10UtestShellD1Ev>
    }
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	4618      	mov	r0, r3
 8011396:	3708      	adds	r7, #8
 8011398:	46bd      	mov	sp, r7
 801139a:	bd80      	pop	{r7, pc}
 801139c:	0802689c 	.word	0x0802689c

080113a0 <_ZN22OutsideTestRunnerUTestD0Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b082      	sub	sp, #8
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
    }
 80113a8:	6878      	ldr	r0, [r7, #4]
 80113aa:	f7ff ffdd 	bl	8011368 <_ZN22OutsideTestRunnerUTestD1Ev>
 80113ae:	2164      	movs	r1, #100	; 0x64
 80113b0:	6878      	ldr	r0, [r7, #4]
 80113b2:	f7f7 fd03 	bl	8008dbc <_ZdlPvj>
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	4618      	mov	r0, r3
 80113ba:	3708      	adds	r7, #8
 80113bc:	46bd      	mov	sp, r7
 80113be:	bd80      	pop	{r7, pc}

080113c0 <_ZN22OutsideTestRunnerUTestC1Ev>:
private:
    OutsideTestRunnerUTest() :
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b084      	sub	sp, #16
 80113c4:	af02      	add	r7, sp, #8
 80113c6:	6078      	str	r0, [r7, #4]
        UtestShell("\n\t NOTE: Assertion happened without being in a test run (perhaps in main?)", "\n\t       Something is very wrong. Check this assertion and fix", "unknown file", 0),
                defaultTestResult(defaultOutput)
 80113c8:	6878      	ldr	r0, [r7, #4]
 80113ca:	2300      	movs	r3, #0
 80113cc:	9300      	str	r3, [sp, #0]
 80113ce:	4b0d      	ldr	r3, [pc, #52]	; (8011404 <_ZN22OutsideTestRunnerUTestC1Ev+0x44>)
 80113d0:	4a0d      	ldr	r2, [pc, #52]	; (8011408 <_ZN22OutsideTestRunnerUTestC1Ev+0x48>)
 80113d2:	490e      	ldr	r1, [pc, #56]	; (801140c <_ZN22OutsideTestRunnerUTestC1Ev+0x4c>)
 80113d4:	f000 f8f8 	bl	80115c8 <_ZN10UtestShellC1EPKcS1_S1_j>
 80113d8:	4a0d      	ldr	r2, [pc, #52]	; (8011410 <_ZN22OutsideTestRunnerUTestC1Ev+0x50>)
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	601a      	str	r2, [r3, #0]
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	331c      	adds	r3, #28
 80113e2:	4618      	mov	r0, r3
 80113e4:	f7f5 ffd4 	bl	8007390 <_ZN17ConsoleTestOutputC1Ev>
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	331c      	adds	r3, #28
 80113f2:	4619      	mov	r1, r3
 80113f4:	4610      	mov	r0, r2
 80113f6:	f7ff fd8b 	bl	8010f10 <_ZN10TestResultC1ER10TestOutput>
    {
    }
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	4618      	mov	r0, r3
 80113fe:	3708      	adds	r7, #8
 8011400:	46bd      	mov	sp, r7
 8011402:	bd80      	pop	{r7, pc}
 8011404:	080234d0 	.word	0x080234d0
 8011408:	080234e0 	.word	0x080234e0
 801140c:	08023520 	.word	0x08023520
 8011410:	0802689c 	.word	0x0802689c

08011414 <__tcf_0>:
    TestResult defaultTestResult;
};

OutsideTestRunnerUTest& OutsideTestRunnerUTest::instance()
{
    static OutsideTestRunnerUTest instance_;
 8011414:	b580      	push	{r7, lr}
 8011416:	af00      	add	r7, sp, #0
 8011418:	4801      	ldr	r0, [pc, #4]	; (8011420 <__tcf_0+0xc>)
 801141a:	f7ff ffa5 	bl	8011368 <_ZN22OutsideTestRunnerUTestD1Ev>
 801141e:	bd80      	pop	{r7, pc}
 8011420:	20000950 	.word	0x20000950

08011424 <_ZN22OutsideTestRunnerUTest8instanceEv>:
{
 8011424:	b580      	push	{r7, lr}
 8011426:	af00      	add	r7, sp, #0
    static OutsideTestRunnerUTest instance_;
 8011428:	4b12      	ldr	r3, [pc, #72]	; (8011474 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 801142a:	781b      	ldrb	r3, [r3, #0]
 801142c:	f3bf 8f5b 	dmb	ish
 8011430:	b2db      	uxtb	r3, r3
 8011432:	f003 0301 	and.w	r3, r3, #1
 8011436:	2b00      	cmp	r3, #0
 8011438:	bf0c      	ite	eq
 801143a:	2301      	moveq	r3, #1
 801143c:	2300      	movne	r3, #0
 801143e:	b2db      	uxtb	r3, r3
 8011440:	2b00      	cmp	r3, #0
 8011442:	d013      	beq.n	801146c <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 8011444:	480b      	ldr	r0, [pc, #44]	; (8011474 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8011446:	f00c ff27 	bl	801e298 <__cxa_guard_acquire>
 801144a:	4603      	mov	r3, r0
 801144c:	2b00      	cmp	r3, #0
 801144e:	bf14      	ite	ne
 8011450:	2301      	movne	r3, #1
 8011452:	2300      	moveq	r3, #0
 8011454:	b2db      	uxtb	r3, r3
 8011456:	2b00      	cmp	r3, #0
 8011458:	d008      	beq.n	801146c <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 801145a:	4807      	ldr	r0, [pc, #28]	; (8011478 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
 801145c:	f7ff ffb0 	bl	80113c0 <_ZN22OutsideTestRunnerUTestC1Ev>
 8011460:	4804      	ldr	r0, [pc, #16]	; (8011474 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8011462:	f00c ff25 	bl	801e2b0 <__cxa_guard_release>
 8011466:	4805      	ldr	r0, [pc, #20]	; (801147c <_ZN22OutsideTestRunnerUTest8instanceEv+0x58>)
 8011468:	f00c ff49 	bl	801e2fe <atexit>
    return instance_;
 801146c:	4b02      	ldr	r3, [pc, #8]	; (8011478 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
}
 801146e:	4618      	mov	r0, r3
 8011470:	bd80      	pop	{r7, pc}
 8011472:	bf00      	nop
 8011474:	200009b4 	.word	0x200009b4
 8011478:	20000950 	.word	0x20000950
 801147c:	08011415 	.word	0x08011415

08011480 <helperDoTestSetup>:
 */

extern "C" {

    static void helperDoTestSetup(void* data)
    {
 8011480:	b580      	push	{r7, lr}
 8011482:	b082      	sub	sp, #8
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->setup();
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	330c      	adds	r3, #12
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	6878      	ldr	r0, [r7, #4]
 8011492:	4798      	blx	r3
    }
 8011494:	bf00      	nop
 8011496:	3708      	adds	r7, #8
 8011498:	46bd      	mov	sp, r7
 801149a:	bd80      	pop	{r7, pc}

0801149c <helperDoTestBody>:

    static void helperDoTestBody(void* data)
    {
 801149c:	b580      	push	{r7, lr}
 801149e:	b082      	sub	sp, #8
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->testBody();
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	3314      	adds	r3, #20
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	6878      	ldr	r0, [r7, #4]
 80114ae:	4798      	blx	r3
    }
 80114b0:	bf00      	nop
 80114b2:	3708      	adds	r7, #8
 80114b4:	46bd      	mov	sp, r7
 80114b6:	bd80      	pop	{r7, pc}

080114b8 <helperDoTestTeardown>:

    static void helperDoTestTeardown(void* data)
    {
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b082      	sub	sp, #8
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->teardown();
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	3310      	adds	r3, #16
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	6878      	ldr	r0, [r7, #4]
 80114ca:	4798      	blx	r3
    }
 80114cc:	bf00      	nop
 80114ce:	3708      	adds	r7, #8
 80114d0:	46bd      	mov	sp, r7
 80114d2:	bd80      	pop	{r7, pc}

080114d4 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>:

    struct HelperTestRunInfo
    {
        HelperTestRunInfo(UtestShell* shell, TestPlugin* plugin, TestResult* result) : shell_(shell), plugin_(plugin), result_(result){}
 80114d4:	b480      	push	{r7}
 80114d6:	b085      	sub	sp, #20
 80114d8:	af00      	add	r7, sp, #0
 80114da:	60f8      	str	r0, [r7, #12]
 80114dc:	60b9      	str	r1, [r7, #8]
 80114de:	607a      	str	r2, [r7, #4]
 80114e0:	603b      	str	r3, [r7, #0]
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	68ba      	ldr	r2, [r7, #8]
 80114e6:	601a      	str	r2, [r3, #0]
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	687a      	ldr	r2, [r7, #4]
 80114ec:	605a      	str	r2, [r3, #4]
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	683a      	ldr	r2, [r7, #0]
 80114f2:	609a      	str	r2, [r3, #8]
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	4618      	mov	r0, r3
 80114f8:	3714      	adds	r7, #20
 80114fa:	46bd      	mov	sp, r7
 80114fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011500:	4770      	bx	lr

08011502 <helperDoRunOneTestInCurrentProcess>:
        TestPlugin* plugin_;
        TestResult* result_;
    };

    static void helperDoRunOneTestInCurrentProcess(void* data)
    {
 8011502:	b580      	push	{r7, lr}
 8011504:	b086      	sub	sp, #24
 8011506:	af00      	add	r7, sp, #0
 8011508:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 801150e:	697b      	ldr	r3, [r7, #20]
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 8011514:	697b      	ldr	r3, [r7, #20]
 8011516:	685b      	ldr	r3, [r3, #4]
 8011518:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 801151a:	697b      	ldr	r3, [r7, #20]
 801151c:	689b      	ldr	r3, [r3, #8]
 801151e:	60bb      	str	r3, [r7, #8]

        shell->runOneTestInCurrentProcess(plugin, *result);
 8011520:	693b      	ldr	r3, [r7, #16]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	3394      	adds	r3, #148	; 0x94
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	68ba      	ldr	r2, [r7, #8]
 801152a:	68f9      	ldr	r1, [r7, #12]
 801152c:	6938      	ldr	r0, [r7, #16]
 801152e:	4798      	blx	r3
    }
 8011530:	bf00      	nop
 8011532:	3718      	adds	r7, #24
 8011534:	46bd      	mov	sp, r7
 8011536:	bd80      	pop	{r7, pc}

08011538 <helperDoRunOneTestSeperateProcess>:

    static void helperDoRunOneTestSeperateProcess(void* data)
    {
 8011538:	b580      	push	{r7, lr}
 801153a:	b086      	sub	sp, #24
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 8011544:	697b      	ldr	r3, [r7, #20]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 801154a:	697b      	ldr	r3, [r7, #20]
 801154c:	685b      	ldr	r3, [r3, #4]
 801154e:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 8011550:	697b      	ldr	r3, [r7, #20]
 8011552:	689b      	ldr	r3, [r3, #8]
 8011554:	60bb      	str	r3, [r7, #8]
        PlatformSpecificRunTestInASeperateProcess(shell, plugin, result);
 8011556:	4b05      	ldr	r3, [pc, #20]	; (801156c <helperDoRunOneTestSeperateProcess+0x34>)
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	68ba      	ldr	r2, [r7, #8]
 801155c:	68f9      	ldr	r1, [r7, #12]
 801155e:	6938      	ldr	r0, [r7, #16]
 8011560:	4798      	blx	r3
    }
 8011562:	bf00      	nop
 8011564:	3718      	adds	r7, #24
 8011566:	46bd      	mov	sp, r7
 8011568:	bd80      	pop	{r7, pc}
 801156a:	bf00      	nop
 801156c:	2000009c 	.word	0x2000009c

08011570 <_ZN10UtestShellC1Ev>:

const TestTerminator *UtestShell::currentTestTerminator_ = &normalTestTerminator;

/******************************** */

UtestShell::UtestShell() :
 8011570:	b480      	push	{r7}
 8011572:	b083      	sub	sp, #12
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
    group_("UndefinedTestGroup"), name_("UndefinedTest"), file_("UndefinedFile"), lineNumber_(0), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 8011578:	4a0f      	ldr	r2, [pc, #60]	; (80115b8 <_ZN10UtestShellC1Ev+0x48>)
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	601a      	str	r2, [r3, #0]
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	4a0e      	ldr	r2, [pc, #56]	; (80115bc <_ZN10UtestShellC1Ev+0x4c>)
 8011582:	605a      	str	r2, [r3, #4]
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	4a0e      	ldr	r2, [pc, #56]	; (80115c0 <_ZN10UtestShellC1Ev+0x50>)
 8011588:	609a      	str	r2, [r3, #8]
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	4a0d      	ldr	r2, [pc, #52]	; (80115c4 <_ZN10UtestShellC1Ev+0x54>)
 801158e:	60da      	str	r2, [r3, #12]
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	2200      	movs	r2, #0
 8011594:	611a      	str	r2, [r3, #16]
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	2200      	movs	r2, #0
 801159a:	615a      	str	r2, [r3, #20]
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	2200      	movs	r2, #0
 80115a0:	761a      	strb	r2, [r3, #24]
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	2200      	movs	r2, #0
 80115a6:	765a      	strb	r2, [r3, #25]
{
}
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	4618      	mov	r0, r3
 80115ac:	370c      	adds	r7, #12
 80115ae:	46bd      	mov	sp, r7
 80115b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b4:	4770      	bx	lr
 80115b6:	bf00      	nop
 80115b8:	0802695c 	.word	0x0802695c
 80115bc:	0802356c 	.word	0x0802356c
 80115c0:	08023580 	.word	0x08023580
 80115c4:	08023590 	.word	0x08023590

080115c8 <_ZN10UtestShellC1EPKcS1_S1_j>:

UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber) :
 80115c8:	b480      	push	{r7}
 80115ca:	b085      	sub	sp, #20
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	60f8      	str	r0, [r7, #12]
 80115d0:	60b9      	str	r1, [r7, #8]
 80115d2:	607a      	str	r2, [r7, #4]
 80115d4:	603b      	str	r3, [r7, #0]
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 80115d6:	4a0f      	ldr	r2, [pc, #60]	; (8011614 <_ZN10UtestShellC1EPKcS1_S1_j+0x4c>)
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	601a      	str	r2, [r3, #0]
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	68ba      	ldr	r2, [r7, #8]
 80115e0:	605a      	str	r2, [r3, #4]
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	687a      	ldr	r2, [r7, #4]
 80115e6:	609a      	str	r2, [r3, #8]
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	683a      	ldr	r2, [r7, #0]
 80115ec:	60da      	str	r2, [r3, #12]
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	69ba      	ldr	r2, [r7, #24]
 80115f2:	611a      	str	r2, [r3, #16]
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	2200      	movs	r2, #0
 80115f8:	615a      	str	r2, [r3, #20]
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	2200      	movs	r2, #0
 80115fe:	761a      	strb	r2, [r3, #24]
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	2200      	movs	r2, #0
 8011604:	765a      	strb	r2, [r3, #25]
{
}
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	4618      	mov	r0, r3
 801160a:	3714      	adds	r7, #20
 801160c:	46bd      	mov	sp, r7
 801160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011612:	4770      	bx	lr
 8011614:	0802695c 	.word	0x0802695c

08011618 <_ZN10UtestShellD1Ev>:
UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber, UtestShell* nextTest) :
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(nextTest), isRunAsSeperateProcess_(false), hasFailed_(false)
{
}

UtestShell::~UtestShell()
 8011618:	b480      	push	{r7}
 801161a:	b083      	sub	sp, #12
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
 8011620:	4a04      	ldr	r2, [pc, #16]	; (8011634 <_ZN10UtestShellD1Ev+0x1c>)
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	601a      	str	r2, [r3, #0]
{
}
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	4618      	mov	r0, r3
 801162a:	370c      	adds	r7, #12
 801162c:	46bd      	mov	sp, r7
 801162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011632:	4770      	bx	lr
 8011634:	0802695c 	.word	0x0802695c

08011638 <_ZN10UtestShellD0Ev>:
UtestShell::~UtestShell()
 8011638:	b580      	push	{r7, lr}
 801163a:	b082      	sub	sp, #8
 801163c:	af00      	add	r7, sp, #0
 801163e:	6078      	str	r0, [r7, #4]
}
 8011640:	6878      	ldr	r0, [r7, #4]
 8011642:	f7ff ffe9 	bl	8011618 <_ZN10UtestShellD1Ev>
 8011646:	211c      	movs	r1, #28
 8011648:	6878      	ldr	r0, [r7, #4]
 801164a:	f7f7 fbb7 	bl	8008dbc <_ZdlPvj>
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	4618      	mov	r0, r3
 8011652:	3708      	adds	r7, #8
 8011654:	46bd      	mov	sp, r7
 8011656:	bd80      	pop	{r7, pc}

08011658 <_ZL18defaultCrashMethodv>:
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wnonnull"
#endif /* NEEDS_DISABLE_NULL_WARNING */

static void defaultCrashMethod()
{
 8011658:	b580      	push	{r7, lr}
 801165a:	b082      	sub	sp, #8
 801165c:	af00      	add	r7, sp, #0
    UtestShell* ptr = (UtestShell*) NULLPTR;
 801165e:	2300      	movs	r3, #0
 8011660:	607b      	str	r3, [r7, #4]
    ptr->countTests();
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	3310      	adds	r3, #16
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	6878      	ldr	r0, [r7, #4]
 801166c:	4798      	blx	r3
}
 801166e:	bf00      	nop
 8011670:	3708      	adds	r7, #8
 8011672:	46bd      	mov	sp, r7
 8011674:	bd80      	pop	{r7, pc}
	...

08011678 <_ZN10UtestShell5crashEv>:
{
    pleaseCrashMeRightNow = defaultCrashMethod;
}

void UtestShell::crash()
{
 8011678:	b580      	push	{r7, lr}
 801167a:	af00      	add	r7, sp, #0
    pleaseCrashMeRightNow();
 801167c:	4b02      	ldr	r3, [pc, #8]	; (8011688 <_ZN10UtestShell5crashEv+0x10>)
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	4798      	blx	r3
}
 8011682:	bf00      	nop
 8011684:	bd80      	pop	{r7, pc}
 8011686:	bf00      	nop
 8011688:	20000098 	.word	0x20000098

0801168c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult>:

void UtestShell::runOneTest(TestPlugin* plugin, TestResult& result)
{
 801168c:	b580      	push	{r7, lr}
 801168e:	b088      	sub	sp, #32
 8011690:	af00      	add	r7, sp, #0
 8011692:	60f8      	str	r0, [r7, #12]
 8011694:	60b9      	str	r1, [r7, #8]
 8011696:	607a      	str	r2, [r7, #4]
    hasFailed_ = false;
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	2200      	movs	r2, #0
 801169c:	765a      	strb	r2, [r3, #25]
    result.countRun();
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	3324      	adds	r3, #36	; 0x24
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	6878      	ldr	r0, [r7, #4]
 80116a8:	4798      	blx	r3
    HelperTestRunInfo runInfo(this, plugin, &result);
 80116aa:	f107 0014 	add.w	r0, r7, #20
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	68ba      	ldr	r2, [r7, #8]
 80116b2:	68f9      	ldr	r1, [r7, #12]
 80116b4:	f7ff ff0e 	bl	80114d4 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>
    if (isRunInSeperateProcess())
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	337c      	adds	r3, #124	; 0x7c
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	68f8      	ldr	r0, [r7, #12]
 80116c2:	4798      	blx	r3
 80116c4:	4603      	mov	r3, r0
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d007      	beq.n	80116da <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x4e>
        PlatformSpecificSetJmp(helperDoRunOneTestSeperateProcess, &runInfo);
 80116ca:	4b09      	ldr	r3, [pc, #36]	; (80116f0 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	f107 0214 	add.w	r2, r7, #20
 80116d2:	4611      	mov	r1, r2
 80116d4:	4807      	ldr	r0, [pc, #28]	; (80116f4 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x68>)
 80116d6:	4798      	blx	r3
    else
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
}
 80116d8:	e006      	b.n	80116e8 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x5c>
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
 80116da:	4b05      	ldr	r3, [pc, #20]	; (80116f0 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	f107 0214 	add.w	r2, r7, #20
 80116e2:	4611      	mov	r1, r2
 80116e4:	4804      	ldr	r0, [pc, #16]	; (80116f8 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x6c>)
 80116e6:	4798      	blx	r3
}
 80116e8:	bf00      	nop
 80116ea:	3720      	adds	r7, #32
 80116ec:	46bd      	mov	sp, r7
 80116ee:	bd80      	pop	{r7, pc}
 80116f0:	200000a4 	.word	0x200000a4
 80116f4:	08011539 	.word	0x08011539
 80116f8:	08011503 	.word	0x08011503

080116fc <_ZN10UtestShell10createTestEv>:

Utest* UtestShell::createTest()
{
 80116fc:	b590      	push	{r4, r7, lr}
 80116fe:	b083      	sub	sp, #12
 8011700:	af00      	add	r7, sp, #0
 8011702:	6078      	str	r0, [r7, #4]
    return new Utest();
 8011704:	22d3      	movs	r2, #211	; 0xd3
 8011706:	4906      	ldr	r1, [pc, #24]	; (8011720 <_ZN10UtestShell10createTestEv+0x24>)
 8011708:	2004      	movs	r0, #4
 801170a:	f7f7 fb43 	bl	8008d94 <_ZnwjPKci>
 801170e:	4604      	mov	r4, r0
 8011710:	4620      	mov	r0, r4
 8011712:	f001 fb0f 	bl	8012d34 <_ZN5UtestC1Ev>
 8011716:	4623      	mov	r3, r4
}
 8011718:	4618      	mov	r0, r3
 801171a:	370c      	adds	r7, #12
 801171c:	46bd      	mov	sp, r7
 801171e:	bd90      	pop	{r4, r7, pc}
 8011720:	080235a0 	.word	0x080235a0

08011724 <_ZN10UtestShell11destroyTestEP5Utest>:

void UtestShell::destroyTest(Utest* test)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b082      	sub	sp, #8
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
 801172c:	6039      	str	r1, [r7, #0]
    delete test;
 801172e:	683b      	ldr	r3, [r7, #0]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d004      	beq.n	801173e <_ZN10UtestShell11destroyTestEP5Utest+0x1a>
 8011734:	681a      	ldr	r2, [r3, #0]
 8011736:	3204      	adds	r2, #4
 8011738:	6812      	ldr	r2, [r2, #0]
 801173a:	4618      	mov	r0, r3
 801173c:	4790      	blx	r2
}
 801173e:	bf00      	nop
 8011740:	3708      	adds	r7, #8
 8011742:	46bd      	mov	sp, r7
 8011744:	bd80      	pop	{r7, pc}
	...

08011748 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult>:

void UtestShell::runOneTestInCurrentProcess(TestPlugin* plugin, TestResult& result)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b088      	sub	sp, #32
 801174c:	af00      	add	r7, sp, #0
 801174e:	60f8      	str	r0, [r7, #12]
 8011750:	60b9      	str	r1, [r7, #8]
 8011752:	607a      	str	r2, [r7, #4]
    result.printVeryVerbose("\n-- before runAllPreTestAction: ");
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	333c      	adds	r3, #60	; 0x3c
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	4940      	ldr	r1, [pc, #256]	; (8011860 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x118>)
 801175e:	6878      	ldr	r0, [r7, #4]
 8011760:	4798      	blx	r3
    plugin->runAllPreTestAction(*this, result);
 8011762:	68bb      	ldr	r3, [r7, #8]
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	3314      	adds	r3, #20
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	687a      	ldr	r2, [r7, #4]
 801176c:	68f9      	ldr	r1, [r7, #12]
 801176e:	68b8      	ldr	r0, [r7, #8]
 8011770:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPreTestAction: ");
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	333c      	adds	r3, #60	; 0x3c
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	493a      	ldr	r1, [pc, #232]	; (8011864 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x11c>)
 801177c:	6878      	ldr	r0, [r7, #4]
 801177e:	4798      	blx	r3

    //save test context, so that test class can be tested
    UtestShell* savedTest = UtestShell::getCurrent();
 8011780:	f001 faae 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 8011784:	61f8      	str	r0, [r7, #28]
    TestResult* savedResult = UtestShell::getTestResult();
 8011786:	68f8      	ldr	r0, [r7, #12]
 8011788:	f001 fa90 	bl	8012cac <_ZN10UtestShell13getTestResultEv>
 801178c:	61b8      	str	r0, [r7, #24]

    UtestShell::setTestResult(&result);
 801178e:	6879      	ldr	r1, [r7, #4]
 8011790:	68f8      	ldr	r0, [r7, #12]
 8011792:	f001 fa6b 	bl	8012c6c <_ZN10UtestShell13setTestResultEP10TestResult>
    UtestShell::setCurrentTest(this);
 8011796:	68f9      	ldr	r1, [r7, #12]
 8011798:	68f8      	ldr	r0, [r7, #12]
 801179a:	f001 fa77 	bl	8012c8c <_ZN10UtestShell14setCurrentTestEPS_>

    result.printVeryVerbose("\n---- before createTest: ");
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	333c      	adds	r3, #60	; 0x3c
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	4930      	ldr	r1, [pc, #192]	; (8011868 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x120>)
 80117a8:	6878      	ldr	r0, [r7, #4]
 80117aa:	4798      	blx	r3
    Utest* testToRun = createTest();
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	3388      	adds	r3, #136	; 0x88
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	68f8      	ldr	r0, [r7, #12]
 80117b6:	4798      	blx	r3
 80117b8:	6178      	str	r0, [r7, #20]
    result.printVeryVerbose("\n---- after createTest: ");
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	333c      	adds	r3, #60	; 0x3c
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	492a      	ldr	r1, [pc, #168]	; (801186c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x124>)
 80117c4:	6878      	ldr	r0, [r7, #4]
 80117c6:	4798      	blx	r3

    result.printVeryVerbose("\n------ before runTest: ");
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	333c      	adds	r3, #60	; 0x3c
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	4927      	ldr	r1, [pc, #156]	; (8011870 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x128>)
 80117d2:	6878      	ldr	r0, [r7, #4]
 80117d4:	4798      	blx	r3
    testToRun->run();
 80117d6:	697b      	ldr	r3, [r7, #20]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	3308      	adds	r3, #8
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	6978      	ldr	r0, [r7, #20]
 80117e0:	4798      	blx	r3
    result.printVeryVerbose("\n------ after runTest: ");
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	333c      	adds	r3, #60	; 0x3c
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	4922      	ldr	r1, [pc, #136]	; (8011874 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x12c>)
 80117ec:	6878      	ldr	r0, [r7, #4]
 80117ee:	4798      	blx	r3

    UtestShell::setCurrentTest(savedTest);
 80117f0:	69f9      	ldr	r1, [r7, #28]
 80117f2:	68f8      	ldr	r0, [r7, #12]
 80117f4:	f001 fa4a 	bl	8012c8c <_ZN10UtestShell14setCurrentTestEPS_>
    UtestShell::setTestResult(savedResult);
 80117f8:	69b9      	ldr	r1, [r7, #24]
 80117fa:	68f8      	ldr	r0, [r7, #12]
 80117fc:	f001 fa36 	bl	8012c6c <_ZN10UtestShell13setTestResultEP10TestResult>

    result.printVeryVerbose("\n---- before destroyTest: ");
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	333c      	adds	r3, #60	; 0x3c
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	491b      	ldr	r1, [pc, #108]	; (8011878 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x130>)
 801180a:	6878      	ldr	r0, [r7, #4]
 801180c:	4798      	blx	r3
    destroyTest(testToRun);
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	338c      	adds	r3, #140	; 0x8c
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	6979      	ldr	r1, [r7, #20]
 8011818:	68f8      	ldr	r0, [r7, #12]
 801181a:	4798      	blx	r3
    result.printVeryVerbose("\n---- after destroyTest: ");
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	333c      	adds	r3, #60	; 0x3c
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	4915      	ldr	r1, [pc, #84]	; (801187c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x134>)
 8011826:	6878      	ldr	r0, [r7, #4]
 8011828:	4798      	blx	r3

    result.printVeryVerbose("\n-- before runAllPostTestAction: ");
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	333c      	adds	r3, #60	; 0x3c
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	4913      	ldr	r1, [pc, #76]	; (8011880 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x138>)
 8011834:	6878      	ldr	r0, [r7, #4]
 8011836:	4798      	blx	r3
    plugin->runAllPostTestAction(*this, result);
 8011838:	68bb      	ldr	r3, [r7, #8]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	3318      	adds	r3, #24
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	687a      	ldr	r2, [r7, #4]
 8011842:	68f9      	ldr	r1, [r7, #12]
 8011844:	68b8      	ldr	r0, [r7, #8]
 8011846:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPostTestAction: ");
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	333c      	adds	r3, #60	; 0x3c
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	490c      	ldr	r1, [pc, #48]	; (8011884 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x13c>)
 8011852:	6878      	ldr	r0, [r7, #4]
 8011854:	4798      	blx	r3
}
 8011856:	bf00      	nop
 8011858:	3720      	adds	r7, #32
 801185a:	46bd      	mov	sp, r7
 801185c:	bd80      	pop	{r7, pc}
 801185e:	bf00      	nop
 8011860:	080235b4 	.word	0x080235b4
 8011864:	080235d8 	.word	0x080235d8
 8011868:	080235f8 	.word	0x080235f8
 801186c:	08023614 	.word	0x08023614
 8011870:	08023630 	.word	0x08023630
 8011874:	0802364c 	.word	0x0802364c
 8011878:	08023664 	.word	0x08023664
 801187c:	08023680 	.word	0x08023680
 8011880:	0802369c 	.word	0x0802369c
 8011884:	080236c0 	.word	0x080236c0

08011888 <_ZNK10UtestShell7getNextEv>:

UtestShell *UtestShell::getNext() const
{
 8011888:	b480      	push	{r7}
 801188a:	b083      	sub	sp, #12
 801188c:	af00      	add	r7, sp, #0
 801188e:	6078      	str	r0, [r7, #4]
    return next_;
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	695b      	ldr	r3, [r3, #20]
}
 8011894:	4618      	mov	r0, r3
 8011896:	370c      	adds	r7, #12
 8011898:	46bd      	mov	sp, r7
 801189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189e:	4770      	bx	lr

080118a0 <_ZN10UtestShell7addTestEPS_>:

UtestShell* UtestShell::addTest(UtestShell *test)
{
 80118a0:	b480      	push	{r7}
 80118a2:	b083      	sub	sp, #12
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
 80118a8:	6039      	str	r1, [r7, #0]
    next_ = test;
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	683a      	ldr	r2, [r7, #0]
 80118ae:	615a      	str	r2, [r3, #20]
    return this;
 80118b0:	687b      	ldr	r3, [r7, #4]
}
 80118b2:	4618      	mov	r0, r3
 80118b4:	370c      	adds	r7, #12
 80118b6:	46bd      	mov	sp, r7
 80118b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118bc:	4770      	bx	lr

080118be <_ZN10UtestShell10countTestsEv>:

size_t UtestShell::countTests()
{
 80118be:	b580      	push	{r7, lr}
 80118c0:	b082      	sub	sp, #8
 80118c2:	af00      	add	r7, sp, #0
 80118c4:	6078      	str	r0, [r7, #4]
    return next_ ? next_->countTests() + 1 : 1;
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	695b      	ldr	r3, [r3, #20]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d00b      	beq.n	80118e6 <_ZN10UtestShell10countTestsEv+0x28>
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	695a      	ldr	r2, [r3, #20]
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	695b      	ldr	r3, [r3, #20]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	3310      	adds	r3, #16
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	4610      	mov	r0, r2
 80118de:	4798      	blx	r3
 80118e0:	4603      	mov	r3, r0
 80118e2:	3301      	adds	r3, #1
 80118e4:	e000      	b.n	80118e8 <_ZN10UtestShell10countTestsEv+0x2a>
 80118e6:	2301      	movs	r3, #1
}
 80118e8:	4618      	mov	r0, r3
 80118ea:	3708      	adds	r7, #8
 80118ec:	46bd      	mov	sp, r7
 80118ee:	bd80      	pop	{r7, pc}

080118f0 <_ZNK10UtestShell12getMacroNameEv>:

SimpleString UtestShell::getMacroName() const
{
 80118f0:	b580      	push	{r7, lr}
 80118f2:	b082      	sub	sp, #8
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
 80118f8:	6039      	str	r1, [r7, #0]
    return "TEST";
 80118fa:	4904      	ldr	r1, [pc, #16]	; (801190c <_ZNK10UtestShell12getMacroNameEv+0x1c>)
 80118fc:	6878      	ldr	r0, [r7, #4]
 80118fe:	f7f9 fe0c 	bl	800b51a <_ZN12SimpleStringC1EPKc>
}
 8011902:	6878      	ldr	r0, [r7, #4]
 8011904:	3708      	adds	r7, #8
 8011906:	46bd      	mov	sp, r7
 8011908:	bd80      	pop	{r7, pc}
 801190a:	bf00      	nop
 801190c:	080236e4 	.word	0x080236e4

08011910 <_ZNK10UtestShell7getNameEv>:

const SimpleString UtestShell::getName() const
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b082      	sub	sp, #8
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
 8011918:	6039      	str	r1, [r7, #0]
    return SimpleString(name_);
 801191a:	683b      	ldr	r3, [r7, #0]
 801191c:	689b      	ldr	r3, [r3, #8]
 801191e:	4619      	mov	r1, r3
 8011920:	6878      	ldr	r0, [r7, #4]
 8011922:	f7f9 fdfa 	bl	800b51a <_ZN12SimpleStringC1EPKc>
}
 8011926:	6878      	ldr	r0, [r7, #4]
 8011928:	3708      	adds	r7, #8
 801192a:	46bd      	mov	sp, r7
 801192c:	bd80      	pop	{r7, pc}

0801192e <_ZNK10UtestShell8getGroupEv>:

const SimpleString UtestShell::getGroup() const
{
 801192e:	b580      	push	{r7, lr}
 8011930:	b082      	sub	sp, #8
 8011932:	af00      	add	r7, sp, #0
 8011934:	6078      	str	r0, [r7, #4]
 8011936:	6039      	str	r1, [r7, #0]
    return SimpleString(group_);
 8011938:	683b      	ldr	r3, [r7, #0]
 801193a:	685b      	ldr	r3, [r3, #4]
 801193c:	4619      	mov	r1, r3
 801193e:	6878      	ldr	r0, [r7, #4]
 8011940:	f7f9 fdeb 	bl	800b51a <_ZN12SimpleStringC1EPKc>
}
 8011944:	6878      	ldr	r0, [r7, #4]
 8011946:	3708      	adds	r7, #8
 8011948:	46bd      	mov	sp, r7
 801194a:	bd80      	pop	{r7, pc}

0801194c <_ZNK10UtestShell16getFormattedNameEv>:

SimpleString UtestShell::getFormattedName() const
{
 801194c:	b580      	push	{r7, lr}
 801194e:	b082      	sub	sp, #8
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
 8011954:	6039      	str	r1, [r7, #0]
    SimpleString formattedName(getMacroName());
 8011956:	683b      	ldr	r3, [r7, #0]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	33a0      	adds	r3, #160	; 0xa0
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	687a      	ldr	r2, [r7, #4]
 8011960:	6839      	ldr	r1, [r7, #0]
 8011962:	4610      	mov	r0, r2
 8011964:	4798      	blx	r3
    formattedName += "(";
 8011966:	490e      	ldr	r1, [pc, #56]	; (80119a0 <_ZNK10UtestShell16getFormattedNameEv+0x54>)
 8011968:	6878      	ldr	r0, [r7, #4]
 801196a:	f7fa fa1d 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    formattedName += group_;
 801196e:	683b      	ldr	r3, [r7, #0]
 8011970:	685b      	ldr	r3, [r3, #4]
 8011972:	4619      	mov	r1, r3
 8011974:	6878      	ldr	r0, [r7, #4]
 8011976:	f7fa fa17 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    formattedName += ", ";
 801197a:	490a      	ldr	r1, [pc, #40]	; (80119a4 <_ZNK10UtestShell16getFormattedNameEv+0x58>)
 801197c:	6878      	ldr	r0, [r7, #4]
 801197e:	f7fa fa13 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    formattedName += name_;
 8011982:	683b      	ldr	r3, [r7, #0]
 8011984:	689b      	ldr	r3, [r3, #8]
 8011986:	4619      	mov	r1, r3
 8011988:	6878      	ldr	r0, [r7, #4]
 801198a:	f7fa fa0d 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    formattedName += ")";
 801198e:	4906      	ldr	r1, [pc, #24]	; (80119a8 <_ZNK10UtestShell16getFormattedNameEv+0x5c>)
 8011990:	6878      	ldr	r0, [r7, #4]
 8011992:	f7fa fa09 	bl	800bda8 <_ZN12SimpleStringpLEPKc>

    return formattedName;
 8011996:	bf00      	nop
}
 8011998:	6878      	ldr	r0, [r7, #4]
 801199a:	3708      	adds	r7, #8
 801199c:	46bd      	mov	sp, r7
 801199e:	bd80      	pop	{r7, pc}
 80119a0:	080236ec 	.word	0x080236ec
 80119a4:	080236f0 	.word	0x080236f0
 80119a8:	080236f4 	.word	0x080236f4

080119ac <_ZNK10UtestShell9hasFailedEv>:

bool UtestShell::hasFailed() const
{
 80119ac:	b480      	push	{r7}
 80119ae:	b083      	sub	sp, #12
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	6078      	str	r0, [r7, #4]
    return hasFailed_;
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	7e5b      	ldrb	r3, [r3, #25]
}
 80119b8:	4618      	mov	r0, r3
 80119ba:	370c      	adds	r7, #12
 80119bc:	46bd      	mov	sp, r7
 80119be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c2:	4770      	bx	lr

080119c4 <_ZN10UtestShell10countCheckEv>:

void UtestShell::countCheck()
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b082      	sub	sp, #8
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
    getTestResult()->countCheck();
 80119cc:	6878      	ldr	r0, [r7, #4]
 80119ce:	f001 f96d 	bl	8012cac <_ZN10UtestShell13getTestResultEv>
 80119d2:	4603      	mov	r3, r0
 80119d4:	681a      	ldr	r2, [r3, #0]
 80119d6:	3228      	adds	r2, #40	; 0x28
 80119d8:	6812      	ldr	r2, [r2, #0]
 80119da:	4618      	mov	r0, r3
 80119dc:	4790      	blx	r2
}
 80119de:	bf00      	nop
 80119e0:	3708      	adds	r7, #8
 80119e2:	46bd      	mov	sp, r7
 80119e4:	bd80      	pop	{r7, pc}

080119e6 <_ZNK10UtestShell7willRunEv>:

bool UtestShell::willRun() const
{
 80119e6:	b480      	push	{r7}
 80119e8:	b083      	sub	sp, #12
 80119ea:	af00      	add	r7, sp, #0
 80119ec:	6078      	str	r0, [r7, #4]
    return true;
 80119ee:	2301      	movs	r3, #1
}
 80119f0:	4618      	mov	r0, r3
 80119f2:	370c      	adds	r7, #12
 80119f4:	46bd      	mov	sp, r7
 80119f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119fa:	4770      	bx	lr

080119fc <_ZNK10UtestShell22isRunInSeperateProcessEv>:

bool UtestShell::isRunInSeperateProcess() const
{
 80119fc:	b480      	push	{r7}
 80119fe:	b083      	sub	sp, #12
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	6078      	str	r0, [r7, #4]
    return isRunAsSeperateProcess_;
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	7e1b      	ldrb	r3, [r3, #24]
}
 8011a08:	4618      	mov	r0, r3
 8011a0a:	370c      	adds	r7, #12
 8011a0c:	46bd      	mov	sp, r7
 8011a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a12:	4770      	bx	lr

08011a14 <_ZN10UtestShell23setRunInSeperateProcessEv>:

void UtestShell::setRunInSeperateProcess()
{
 8011a14:	b480      	push	{r7}
 8011a16:	b083      	sub	sp, #12
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]
    isRunAsSeperateProcess_ = true;
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	2201      	movs	r2, #1
 8011a20:	761a      	strb	r2, [r3, #24]
}
 8011a22:	bf00      	nop
 8011a24:	370c      	adds	r7, #12
 8011a26:	46bd      	mov	sp, r7
 8011a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2c:	4770      	bx	lr

08011a2e <_ZN10UtestShell13setRunIgnoredEv>:


void UtestShell::setRunIgnored()
{
 8011a2e:	b480      	push	{r7}
 8011a30:	b083      	sub	sp, #12
 8011a32:	af00      	add	r7, sp, #0
 8011a34:	6078      	str	r0, [r7, #4]

}
 8011a36:	bf00      	nop
 8011a38:	370c      	adds	r7, #12
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a40:	4770      	bx	lr

08011a42 <_ZN10UtestShell11setFileNameEPKc>:

void UtestShell::setFileName(const char* fileName)
{
 8011a42:	b480      	push	{r7}
 8011a44:	b083      	sub	sp, #12
 8011a46:	af00      	add	r7, sp, #0
 8011a48:	6078      	str	r0, [r7, #4]
 8011a4a:	6039      	str	r1, [r7, #0]
    file_ = fileName;
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	683a      	ldr	r2, [r7, #0]
 8011a50:	60da      	str	r2, [r3, #12]
}
 8011a52:	bf00      	nop
 8011a54:	370c      	adds	r7, #12
 8011a56:	46bd      	mov	sp, r7
 8011a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5c:	4770      	bx	lr

08011a5e <_ZN10UtestShell13setLineNumberEj>:

void UtestShell::setLineNumber(size_t lineNumber)
{
 8011a5e:	b480      	push	{r7}
 8011a60:	b083      	sub	sp, #12
 8011a62:	af00      	add	r7, sp, #0
 8011a64:	6078      	str	r0, [r7, #4]
 8011a66:	6039      	str	r1, [r7, #0]
    lineNumber_ = lineNumber;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	683a      	ldr	r2, [r7, #0]
 8011a6c:	611a      	str	r2, [r3, #16]
}
 8011a6e:	bf00      	nop
 8011a70:	370c      	adds	r7, #12
 8011a72:	46bd      	mov	sp, r7
 8011a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a78:	4770      	bx	lr

08011a7a <_ZN10UtestShell12setGroupNameEPKc>:

void UtestShell::setGroupName(const char* groupName)
{
 8011a7a:	b480      	push	{r7}
 8011a7c:	b083      	sub	sp, #12
 8011a7e:	af00      	add	r7, sp, #0
 8011a80:	6078      	str	r0, [r7, #4]
 8011a82:	6039      	str	r1, [r7, #0]
    group_ = groupName;
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	683a      	ldr	r2, [r7, #0]
 8011a88:	605a      	str	r2, [r3, #4]
}
 8011a8a:	bf00      	nop
 8011a8c:	370c      	adds	r7, #12
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a94:	4770      	bx	lr

08011a96 <_ZN10UtestShell11setTestNameEPKc>:

void UtestShell::setTestName(const char* testName)
{
 8011a96:	b480      	push	{r7}
 8011a98:	b083      	sub	sp, #12
 8011a9a:	af00      	add	r7, sp, #0
 8011a9c:	6078      	str	r0, [r7, #4]
 8011a9e:	6039      	str	r1, [r7, #0]
    name_ = testName;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	683a      	ldr	r2, [r7, #0]
 8011aa4:	609a      	str	r2, [r3, #8]
}
 8011aa6:	bf00      	nop
 8011aa8:	370c      	adds	r7, #12
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab0:	4770      	bx	lr

08011ab2 <_ZNK10UtestShell7getFileEv>:

const SimpleString UtestShell::getFile() const
{
 8011ab2:	b580      	push	{r7, lr}
 8011ab4:	b082      	sub	sp, #8
 8011ab6:	af00      	add	r7, sp, #0
 8011ab8:	6078      	str	r0, [r7, #4]
 8011aba:	6039      	str	r1, [r7, #0]
    return SimpleString(file_);
 8011abc:	683b      	ldr	r3, [r7, #0]
 8011abe:	68db      	ldr	r3, [r3, #12]
 8011ac0:	4619      	mov	r1, r3
 8011ac2:	6878      	ldr	r0, [r7, #4]
 8011ac4:	f7f9 fd29 	bl	800b51a <_ZN12SimpleStringC1EPKc>
}
 8011ac8:	6878      	ldr	r0, [r7, #4]
 8011aca:	3708      	adds	r7, #8
 8011acc:	46bd      	mov	sp, r7
 8011ace:	bd80      	pop	{r7, pc}

08011ad0 <_ZNK10UtestShell13getLineNumberEv>:

size_t UtestShell::getLineNumber() const
{
 8011ad0:	b480      	push	{r7}
 8011ad2:	b083      	sub	sp, #12
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	691b      	ldr	r3, [r3, #16]
}
 8011adc:	4618      	mov	r0, r3
 8011ade:	370c      	adds	r7, #12
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae6:	4770      	bx	lr

08011ae8 <_ZNK10UtestShell5matchEPKcPK10TestFilter>:

bool UtestShell::match(const char* target, const TestFilter* filters) const
{
 8011ae8:	b590      	push	{r4, r7, lr}
 8011aea:	b087      	sub	sp, #28
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	60f8      	str	r0, [r7, #12]
 8011af0:	60b9      	str	r1, [r7, #8]
 8011af2:	607a      	str	r2, [r7, #4]
    if(filters == NULLPTR) return true;
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d101      	bne.n	8011afe <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>
 8011afa:	2301      	movs	r3, #1
 8011afc:	e01f      	b.n	8011b3e <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>

    for(; filters != NULLPTR; filters = filters->getNext())
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d01b      	beq.n	8011b3c <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x54>
        if(filters->match(target)) return true;
 8011b04:	f107 0310 	add.w	r3, r7, #16
 8011b08:	68b9      	ldr	r1, [r7, #8]
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	f7f9 fd05 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8011b10:	f107 0310 	add.w	r3, r7, #16
 8011b14:	4619      	mov	r1, r3
 8011b16:	6878      	ldr	r0, [r7, #4]
 8011b18:	f00c fb91 	bl	801e23e <_ZNK10TestFilter5matchERK12SimpleString>
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	461c      	mov	r4, r3
 8011b20:	f107 0310 	add.w	r3, r7, #16
 8011b24:	4618      	mov	r0, r3
 8011b26:	f7fa f8b0 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8011b2a:	2c00      	cmp	r4, #0
 8011b2c:	d001      	beq.n	8011b32 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x4a>
 8011b2e:	2301      	movs	r3, #1
 8011b30:	e005      	b.n	8011b3e <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>
    for(; filters != NULLPTR; filters = filters->getNext())
 8011b32:	6878      	ldr	r0, [r7, #4]
 8011b34:	f00c fb5d 	bl	801e1f2 <_ZNK10TestFilter7getNextEv>
 8011b38:	6078      	str	r0, [r7, #4]
 8011b3a:	e7e0      	b.n	8011afe <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>

    return false;
 8011b3c:	2300      	movs	r3, #0
}
 8011b3e:	4618      	mov	r0, r3
 8011b40:	371c      	adds	r7, #28
 8011b42:	46bd      	mov	sp, r7
 8011b44:	bd90      	pop	{r4, r7, pc}

08011b46 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>:

bool UtestShell::shouldRun(const TestFilter* groupFilters, const TestFilter* nameFilters) const
{
 8011b46:	b580      	push	{r7, lr}
 8011b48:	b084      	sub	sp, #16
 8011b4a:	af00      	add	r7, sp, #0
 8011b4c:	60f8      	str	r0, [r7, #12]
 8011b4e:	60b9      	str	r1, [r7, #8]
 8011b50:	607a      	str	r2, [r7, #4]
    return match(group_, groupFilters) && match(name_, nameFilters);
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	685b      	ldr	r3, [r3, #4]
 8011b56:	68ba      	ldr	r2, [r7, #8]
 8011b58:	4619      	mov	r1, r3
 8011b5a:	68f8      	ldr	r0, [r7, #12]
 8011b5c:	f7ff ffc4 	bl	8011ae8 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 8011b60:	4603      	mov	r3, r0
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d00b      	beq.n	8011b7e <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	689b      	ldr	r3, [r3, #8]
 8011b6a:	687a      	ldr	r2, [r7, #4]
 8011b6c:	4619      	mov	r1, r3
 8011b6e:	68f8      	ldr	r0, [r7, #12]
 8011b70:	f7ff ffba 	bl	8011ae8 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 8011b74:	4603      	mov	r3, r0
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d001      	beq.n	8011b7e <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 8011b7a:	2301      	movs	r3, #1
 8011b7c:	e000      	b.n	8011b80 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x3a>
 8011b7e:	2300      	movs	r3, #0
}
 8011b80:	4618      	mov	r0, r3
 8011b82:	3710      	adds	r7, #16
 8011b84:	46bd      	mov	sp, r7
 8011b86:	bd80      	pop	{r7, pc}

08011b88 <_ZN10UtestShell8failWithERK11TestFailure>:

void UtestShell::failWith(const TestFailure& failure)
{
 8011b88:	b590      	push	{r4, r7, lr}
 8011b8a:	b083      	sub	sp, #12
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
 8011b90:	6039      	str	r1, [r7, #0]
    failWith(failure, getCurrentTestTerminator());
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	339c      	adds	r3, #156	; 0x9c
 8011b98:	681c      	ldr	r4, [r3, #0]
 8011b9a:	f001 f8b1 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	461a      	mov	r2, r3
 8011ba2:	6839      	ldr	r1, [r7, #0]
 8011ba4:	6878      	ldr	r0, [r7, #4]
 8011ba6:	47a0      	blx	r4
} // LCOV_EXCL_LINE
 8011ba8:	bf00      	nop
 8011baa:	370c      	adds	r7, #12
 8011bac:	46bd      	mov	sp, r7
 8011bae:	bd90      	pop	{r4, r7, pc}

08011bb0 <_ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator>:

void UtestShell::failWith(const TestFailure& failure, const TestTerminator& terminator)
{
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	b084      	sub	sp, #16
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	60f8      	str	r0, [r7, #12]
 8011bb8:	60b9      	str	r1, [r7, #8]
 8011bba:	607a      	str	r2, [r7, #4]
    hasFailed_ = true;
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	2201      	movs	r2, #1
 8011bc0:	765a      	strb	r2, [r3, #25]
    getTestResult()->addFailure(failure);
 8011bc2:	68f8      	ldr	r0, [r7, #12]
 8011bc4:	f001 f872 	bl	8012cac <_ZN10UtestShell13getTestResultEv>
 8011bc8:	4603      	mov	r3, r0
 8011bca:	681a      	ldr	r2, [r3, #0]
 8011bcc:	3234      	adds	r2, #52	; 0x34
 8011bce:	6812      	ldr	r2, [r2, #0]
 8011bd0:	68b9      	ldr	r1, [r7, #8]
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	4790      	blx	r2
    terminator.exitCurrentTest();
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	6878      	ldr	r0, [r7, #4]
 8011bde:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8011be0:	bf00      	nop
 8011be2:	3710      	adds	r7, #16
 8011be4:	46bd      	mov	sp, r7
 8011be6:	bd80      	pop	{r7, pc}

08011be8 <_ZN10UtestShell8exitTestERK14TestTerminator>:

void UtestShell::exitTest(const TestTerminator& terminator)
{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b082      	sub	sp, #8
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
 8011bf0:	6039      	str	r1, [r7, #0]
    terminator.exitCurrentTest();
 8011bf2:	683b      	ldr	r3, [r7, #0]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	6838      	ldr	r0, [r7, #0]
 8011bfa:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8011bfc:	bf00      	nop
 8011bfe:	3708      	adds	r7, #8
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bd80      	pop	{r7, pc}

08011c04 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertTrue(bool condition, const char *checkString, const char *conditionString, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011c04:	b590      	push	{r4, r7, lr}
 8011c06:	b09d      	sub	sp, #116	; 0x74
 8011c08:	af04      	add	r7, sp, #16
 8011c0a:	60f8      	str	r0, [r7, #12]
 8011c0c:	607a      	str	r2, [r7, #4]
 8011c0e:	603b      	str	r3, [r7, #0]
 8011c10:	460b      	mov	r3, r1
 8011c12:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8011c14:	68f8      	ldr	r0, [r7, #12]
 8011c16:	f001 f849 	bl	8012cac <_ZN10UtestShell13getTestResultEv>
 8011c1a:	4603      	mov	r3, r0
 8011c1c:	681a      	ldr	r2, [r3, #0]
 8011c1e:	3228      	adds	r2, #40	; 0x28
 8011c20:	6812      	ldr	r2, [r2, #0]
 8011c22:	4618      	mov	r0, r3
 8011c24:	4790      	blx	r2
    if (!condition)
 8011c26:	7afb      	ldrb	r3, [r7, #11]
 8011c28:	f083 0301 	eor.w	r3, r3, #1
 8011c2c:	b2db      	uxtb	r3, r3
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d03f      	beq.n	8011cb2 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(CheckFailure(this, fileName, lineNumber, checkString, conditionString, text), testTerminator);
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	339c      	adds	r3, #156	; 0x9c
 8011c38:	681c      	ldr	r4, [r3, #0]
 8011c3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011c3e:	6879      	ldr	r1, [r7, #4]
 8011c40:	4618      	mov	r0, r3
 8011c42:	f7f9 fc6a 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8011c46:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011c4a:	6839      	ldr	r1, [r7, #0]
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	f7f9 fc64 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8011c52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011c56:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f7f9 fc5e 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8011c5e:	f107 0014 	add.w	r0, r7, #20
 8011c62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011c66:	9302      	str	r3, [sp, #8]
 8011c68:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011c6c:	9301      	str	r3, [sp, #4]
 8011c6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011c72:	9300      	str	r3, [sp, #0]
 8011c74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011c76:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011c78:	68f9      	ldr	r1, [r7, #12]
 8011c7a:	f7fb ff6b 	bl	800db54 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011c7e:	f107 0314 	add.w	r3, r7, #20
 8011c82:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011c84:	4619      	mov	r1, r3
 8011c86:	68f8      	ldr	r0, [r7, #12]
 8011c88:	47a0      	blx	r4
 8011c8a:	f107 0314 	add.w	r3, r7, #20
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f7fc fdce 	bl	800e830 <_ZN12CheckFailureD1Ev>
 8011c94:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011c98:	4618      	mov	r0, r3
 8011c9a:	f7f9 fff6 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8011c9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	f7f9 fff1 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8011ca8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011cac:	4618      	mov	r0, r3
 8011cae:	f7f9 ffec 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 8011cb2:	bf00      	nop
 8011cb4:	3764      	adds	r7, #100	; 0x64
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	bd90      	pop	{r4, r7, pc}

08011cba <_ZN10UtestShell4failEPKcS1_jRK14TestTerminator>:

void UtestShell::fail(const char *text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011cba:	b590      	push	{r4, r7, lr}
 8011cbc:	b097      	sub	sp, #92	; 0x5c
 8011cbe:	af02      	add	r7, sp, #8
 8011cc0:	60f8      	str	r0, [r7, #12]
 8011cc2:	60b9      	str	r1, [r7, #8]
 8011cc4:	607a      	str	r2, [r7, #4]
 8011cc6:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011cc8:	68f8      	ldr	r0, [r7, #12]
 8011cca:	f000 ffef 	bl	8012cac <_ZN10UtestShell13getTestResultEv>
 8011cce:	4603      	mov	r3, r0
 8011cd0:	681a      	ldr	r2, [r3, #0]
 8011cd2:	3228      	adds	r2, #40	; 0x28
 8011cd4:	6812      	ldr	r2, [r2, #0]
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	4790      	blx	r2
    failWith(FailFailure(this, fileName, lineNumber, text), testTerminator);
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	339c      	adds	r3, #156	; 0x9c
 8011ce0:	681c      	ldr	r4, [r3, #0]
 8011ce2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011ce6:	68b9      	ldr	r1, [r7, #8]
 8011ce8:	4618      	mov	r0, r3
 8011cea:	f7f9 fc16 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8011cee:	f107 0014 	add.w	r0, r7, #20
 8011cf2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011cf6:	9300      	str	r3, [sp, #0]
 8011cf8:	683b      	ldr	r3, [r7, #0]
 8011cfa:	687a      	ldr	r2, [r7, #4]
 8011cfc:	68f9      	ldr	r1, [r7, #12]
 8011cfe:	f7fb ff71 	bl	800dbe4 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 8011d02:	f107 0314 	add.w	r3, r7, #20
 8011d06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011d08:	4619      	mov	r1, r3
 8011d0a:	68f8      	ldr	r0, [r7, #12]
 8011d0c:	47a0      	blx	r4
 8011d0e:	f107 0314 	add.w	r3, r7, #20
 8011d12:	4618      	mov	r0, r3
 8011d14:	f7f7 fc16 	bl	8009544 <_ZN11FailFailureD1Ev>
 8011d18:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	f7f9 ffb4 	bl	800bc8a <_ZN12SimpleStringD1Ev>
} // LCOV_EXCL_LINE
 8011d22:	bf00      	nop
 8011d24:	3754      	adds	r7, #84	; 0x54
 8011d26:	46bd      	mov	sp, r7
 8011d28:	bd90      	pop	{r4, r7, pc}

08011d2a <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011d2a:	b590      	push	{r4, r7, lr}
 8011d2c:	b0a7      	sub	sp, #156	; 0x9c
 8011d2e:	af04      	add	r7, sp, #16
 8011d30:	60f8      	str	r0, [r7, #12]
 8011d32:	60b9      	str	r1, [r7, #8]
 8011d34:	607a      	str	r2, [r7, #4]
 8011d36:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011d38:	68f8      	ldr	r0, [r7, #12]
 8011d3a:	f000 ffb7 	bl	8012cac <_ZN10UtestShell13getTestResultEv>
 8011d3e:	4603      	mov	r3, r0
 8011d40:	681a      	ldr	r2, [r3, #0]
 8011d42:	3228      	adds	r2, #40	; 0x28
 8011d44:	6812      	ldr	r2, [r2, #0]
 8011d46:	4618      	mov	r0, r3
 8011d48:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d102      	bne.n	8011d56 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x2c>
 8011d50:	68bb      	ldr	r3, [r7, #8]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d068      	beq.n	8011e28 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0xfe>
    if (actual == NULLPTR || expected == NULLPTR)
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d002      	beq.n	8011d62 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x38>
 8011d5c:	68bb      	ldr	r3, [r7, #8]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d12a      	bne.n	8011db8 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x8e>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	339c      	adds	r3, #156	; 0x9c
 8011d68:	681c      	ldr	r4, [r3, #0]
 8011d6a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011d6e:	6839      	ldr	r1, [r7, #0]
 8011d70:	4618      	mov	r0, r3
 8011d72:	f7f9 fbd2 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8011d76:	f107 0010 	add.w	r0, r7, #16
 8011d7a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011d7e:	9302      	str	r3, [sp, #8]
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	9301      	str	r3, [sp, #4]
 8011d84:	68bb      	ldr	r3, [r7, #8]
 8011d86:	9300      	str	r3, [sp, #0]
 8011d88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011d8c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011d90:	68f9      	ldr	r1, [r7, #12]
 8011d92:	f7fc f9ad 	bl	800e0f0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8011d96:	f107 0310 	add.w	r3, r7, #16
 8011d9a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8011d9e:	4619      	mov	r1, r3
 8011da0:	68f8      	ldr	r0, [r7, #12]
 8011da2:	47a0      	blx	r4
 8011da4:	f107 0310 	add.w	r3, r7, #16
 8011da8:	4618      	mov	r0, r3
 8011daa:	f7fc fcb9 	bl	800e720 <_ZN18StringEqualFailureD1Ev>
 8011dae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011db2:	4618      	mov	r0, r3
 8011db4:	f7f9 ff69 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrCmp(expected, actual) != 0)
 8011db8:	6879      	ldr	r1, [r7, #4]
 8011dba:	68b8      	ldr	r0, [r7, #8]
 8011dbc:	f7f9 f9ea 	bl	800b194 <_ZN12SimpleString6StrCmpEPKcS1_>
 8011dc0:	4603      	mov	r3, r0
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	bf14      	ite	ne
 8011dc6:	2301      	movne	r3, #1
 8011dc8:	2300      	moveq	r3, #0
 8011dca:	b2db      	uxtb	r3, r3
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d02c      	beq.n	8011e2a <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	339c      	adds	r3, #156	; 0x9c
 8011dd6:	681c      	ldr	r4, [r3, #0]
 8011dd8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011ddc:	6839      	ldr	r1, [r7, #0]
 8011dde:	4618      	mov	r0, r3
 8011de0:	f7f9 fb9b 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8011de4:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8011de8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011dec:	9302      	str	r3, [sp, #8]
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	9301      	str	r3, [sp, #4]
 8011df2:	68bb      	ldr	r3, [r7, #8]
 8011df4:	9300      	str	r3, [sp, #0]
 8011df6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011dfa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011dfe:	68f9      	ldr	r1, [r7, #12]
 8011e00:	f7fc f976 	bl	800e0f0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8011e04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011e08:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8011e0c:	4619      	mov	r1, r3
 8011e0e:	68f8      	ldr	r0, [r7, #12]
 8011e10:	47a0      	blx	r4
 8011e12:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011e16:	4618      	mov	r0, r3
 8011e18:	f7fc fc82 	bl	800e720 <_ZN18StringEqualFailureD1Ev>
 8011e1c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011e20:	4618      	mov	r0, r3
 8011e22:	f7f9 ff32 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8011e26:	e000      	b.n	8011e2a <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8011e28:	bf00      	nop
}
 8011e2a:	378c      	adds	r7, #140	; 0x8c
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	bd90      	pop	{r4, r7, pc}

08011e30 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrNEqual(const char* expected, const char* actual, size_t length, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011e30:	b590      	push	{r4, r7, lr}
 8011e32:	b0a7      	sub	sp, #156	; 0x9c
 8011e34:	af04      	add	r7, sp, #16
 8011e36:	60f8      	str	r0, [r7, #12]
 8011e38:	60b9      	str	r1, [r7, #8]
 8011e3a:	607a      	str	r2, [r7, #4]
 8011e3c:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011e3e:	68f8      	ldr	r0, [r7, #12]
 8011e40:	f000 ff34 	bl	8012cac <_ZN10UtestShell13getTestResultEv>
 8011e44:	4603      	mov	r3, r0
 8011e46:	681a      	ldr	r2, [r3, #0]
 8011e48:	3228      	adds	r2, #40	; 0x28
 8011e4a:	6812      	ldr	r2, [r2, #0]
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d102      	bne.n	8011e5c <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x2c>
 8011e56:	68bb      	ldr	r3, [r7, #8]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d06b      	beq.n	8011f34 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x104>
    if (actual == NULLPTR || expected == NULLPTR)
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d002      	beq.n	8011e68 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x38>
 8011e62:	68bb      	ldr	r3, [r7, #8]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d12b      	bne.n	8011ec0 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x90>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	339c      	adds	r3, #156	; 0x9c
 8011e6e:	681c      	ldr	r4, [r3, #0]
 8011e70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011e74:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8011e78:	4618      	mov	r0, r3
 8011e7a:	f7f9 fb4e 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8011e7e:	f107 0010 	add.w	r0, r7, #16
 8011e82:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011e86:	9302      	str	r3, [sp, #8]
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	9301      	str	r3, [sp, #4]
 8011e8c:	68bb      	ldr	r3, [r7, #8]
 8011e8e:	9300      	str	r3, [sp, #0]
 8011e90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011e94:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8011e98:	68f9      	ldr	r1, [r7, #12]
 8011e9a:	f7fc f929 	bl	800e0f0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8011e9e:	f107 0310 	add.w	r3, r7, #16
 8011ea2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8011ea6:	4619      	mov	r1, r3
 8011ea8:	68f8      	ldr	r0, [r7, #12]
 8011eaa:	47a0      	blx	r4
 8011eac:	f107 0310 	add.w	r3, r7, #16
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	f7fc fc35 	bl	800e720 <_ZN18StringEqualFailureD1Ev>
 8011eb6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011eba:	4618      	mov	r0, r3
 8011ebc:	f7f9 fee5 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrNCmp(expected, actual, length) != 0)
 8011ec0:	683a      	ldr	r2, [r7, #0]
 8011ec2:	6879      	ldr	r1, [r7, #4]
 8011ec4:	68b8      	ldr	r0, [r7, #8]
 8011ec6:	f7f9 f9a4 	bl	800b212 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 8011eca:	4603      	mov	r3, r0
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	bf14      	ite	ne
 8011ed0:	2301      	movne	r3, #1
 8011ed2:	2300      	moveq	r3, #0
 8011ed4:	b2db      	uxtb	r3, r3
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d02d      	beq.n	8011f36 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	339c      	adds	r3, #156	; 0x9c
 8011ee0:	681c      	ldr	r4, [r3, #0]
 8011ee2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011ee6:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8011eea:	4618      	mov	r0, r3
 8011eec:	f7f9 fb15 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8011ef0:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8011ef4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011ef8:	9302      	str	r3, [sp, #8]
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	9301      	str	r3, [sp, #4]
 8011efe:	68bb      	ldr	r3, [r7, #8]
 8011f00:	9300      	str	r3, [sp, #0]
 8011f02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011f06:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8011f0a:	68f9      	ldr	r1, [r7, #12]
 8011f0c:	f7fc f8f0 	bl	800e0f0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8011f10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011f14:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8011f18:	4619      	mov	r1, r3
 8011f1a:	68f8      	ldr	r0, [r7, #12]
 8011f1c:	47a0      	blx	r4
 8011f1e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011f22:	4618      	mov	r0, r3
 8011f24:	f7fc fbfc 	bl	800e720 <_ZN18StringEqualFailureD1Ev>
 8011f28:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	f7f9 feac 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8011f32:	e000      	b.n	8011f36 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8011f34:	bf00      	nop
}
 8011f36:	378c      	adds	r7, #140	; 0x8c
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	bd90      	pop	{r4, r7, pc}

08011f3c <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8011f3c:	b590      	push	{r4, r7, lr}
 8011f3e:	b0ab      	sub	sp, #172	; 0xac
 8011f40:	af04      	add	r7, sp, #16
 8011f42:	60f8      	str	r0, [r7, #12]
 8011f44:	60b9      	str	r1, [r7, #8]
 8011f46:	607a      	str	r2, [r7, #4]
 8011f48:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011f4a:	68f8      	ldr	r0, [r7, #12]
 8011f4c:	f000 feae 	bl	8012cac <_ZN10UtestShell13getTestResultEv>
 8011f50:	4603      	mov	r3, r0
 8011f52:	681a      	ldr	r2, [r3, #0]
 8011f54:	3228      	adds	r2, #40	; 0x28
 8011f56:	6812      	ldr	r2, [r2, #0]
 8011f58:	4618      	mov	r0, r3
 8011f5a:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d102      	bne.n	8011f68 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x2c>
 8011f62:	68bb      	ldr	r3, [r7, #8]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d07c      	beq.n	8012062 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x126>
    if (actual == NULLPTR || expected == NULLPTR)
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d002      	beq.n	8011f74 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x38>
 8011f6e:	68bb      	ldr	r3, [r7, #8]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d128      	bne.n	8011fc6 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x8a>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	3398      	adds	r3, #152	; 0x98
 8011f7a:	681c      	ldr	r4, [r3, #0]
 8011f7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011f80:	6839      	ldr	r1, [r7, #0]
 8011f82:	4618      	mov	r0, r3
 8011f84:	f7f9 fac9 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8011f88:	f107 0010 	add.w	r0, r7, #16
 8011f8c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011f90:	9302      	str	r3, [sp, #8]
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	9301      	str	r3, [sp, #4]
 8011f96:	68bb      	ldr	r3, [r7, #8]
 8011f98:	9300      	str	r3, [sp, #0]
 8011f9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011f9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011fa2:	68f9      	ldr	r1, [r7, #12]
 8011fa4:	f7fc f948 	bl	800e238 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8011fa8:	f107 0310 	add.w	r3, r7, #16
 8011fac:	4619      	mov	r1, r3
 8011fae:	68f8      	ldr	r0, [r7, #12]
 8011fb0:	47a0      	blx	r4
 8011fb2:	f107 0310 	add.w	r3, r7, #16
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	f7fc fb90 	bl	800e6dc <_ZN24StringEqualNoCaseFailureD1Ev>
 8011fbc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	f7f9 fe62 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    if (!SimpleString(expected).equalsNoCase(actual))
 8011fc6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011fca:	68b9      	ldr	r1, [r7, #8]
 8011fcc:	4618      	mov	r0, r3
 8011fce:	f7f9 faa4 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8011fd2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011fd6:	6879      	ldr	r1, [r7, #4]
 8011fd8:	4618      	mov	r0, r3
 8011fda:	f7f9 fa9e 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8011fde:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8011fe2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011fe6:	4611      	mov	r1, r2
 8011fe8:	4618      	mov	r0, r3
 8011fea:	f7f9 fe75 	bl	800bcd8 <_ZNK12SimpleString12equalsNoCaseERKS_>
 8011fee:	4603      	mov	r3, r0
 8011ff0:	f083 0301 	eor.w	r3, r3, #1
 8011ff4:	b2dc      	uxtb	r4, r3
 8011ff6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	f7f9 fe45 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8012000:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012004:	4618      	mov	r0, r3
 8012006:	f7f9 fe40 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801200a:	2c00      	cmp	r4, #0
 801200c:	d02a      	beq.n	8012064 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	3398      	adds	r3, #152	; 0x98
 8012014:	681c      	ldr	r4, [r3, #0]
 8012016:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801201a:	6839      	ldr	r1, [r7, #0]
 801201c:	4618      	mov	r0, r3
 801201e:	f7f9 fa7c 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8012022:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8012026:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801202a:	9302      	str	r3, [sp, #8]
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	9301      	str	r3, [sp, #4]
 8012030:	68bb      	ldr	r3, [r7, #8]
 8012032:	9300      	str	r3, [sp, #0]
 8012034:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012038:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801203c:	68f9      	ldr	r1, [r7, #12]
 801203e:	f7fc f8fb 	bl	800e238 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8012042:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012046:	4619      	mov	r1, r3
 8012048:	68f8      	ldr	r0, [r7, #12]
 801204a:	47a0      	blx	r4
 801204c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012050:	4618      	mov	r0, r3
 8012052:	f7fc fb43 	bl	800e6dc <_ZN24StringEqualNoCaseFailureD1Ev>
 8012056:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801205a:	4618      	mov	r0, r3
 801205c:	f7f9 fe15 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8012060:	e000      	b.n	8012064 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8012062:	bf00      	nop
}
 8012064:	379c      	adds	r7, #156	; 0x9c
 8012066:	46bd      	mov	sp, r7
 8012068:	bd90      	pop	{r4, r7, pc}

0801206a <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 801206a:	b590      	push	{r4, r7, lr}
 801206c:	b0b3      	sub	sp, #204	; 0xcc
 801206e:	af04      	add	r7, sp, #16
 8012070:	60f8      	str	r0, [r7, #12]
 8012072:	60b9      	str	r1, [r7, #8]
 8012074:	607a      	str	r2, [r7, #4]
 8012076:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8012078:	68f8      	ldr	r0, [r7, #12]
 801207a:	f000 fe17 	bl	8012cac <_ZN10UtestShell13getTestResultEv>
 801207e:	4603      	mov	r3, r0
 8012080:	681a      	ldr	r2, [r3, #0]
 8012082:	3228      	adds	r2, #40	; 0x28
 8012084:	6812      	ldr	r2, [r2, #0]
 8012086:	4618      	mov	r0, r3
 8012088:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d103      	bne.n	8012098 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x2e>
 8012090:	68bb      	ldr	r3, [r7, #8]
 8012092:	2b00      	cmp	r3, #0
 8012094:	f000 80ad 	beq.w	80121f2 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d002      	beq.n	80120a4 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x3a>
 801209e:	68bb      	ldr	r3, [r7, #8]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d140      	bne.n	8012126 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	3398      	adds	r3, #152	; 0x98
 80120aa:	681c      	ldr	r4, [r3, #0]
 80120ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80120b0:	68b9      	ldr	r1, [r7, #8]
 80120b2:	4618      	mov	r0, r3
 80120b4:	f7f9 fa31 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80120b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80120bc:	6879      	ldr	r1, [r7, #4]
 80120be:	4618      	mov	r0, r3
 80120c0:	f7f9 fa2b 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80120c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80120c8:	6839      	ldr	r1, [r7, #0]
 80120ca:	4618      	mov	r0, r3
 80120cc:	f7f9 fa25 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80120d0:	f107 0010 	add.w	r0, r7, #16
 80120d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80120d8:	9302      	str	r3, [sp, #8]
 80120da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80120de:	9301      	str	r3, [sp, #4]
 80120e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80120e4:	9300      	str	r3, [sp, #0]
 80120e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80120ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80120ee:	68f9      	ldr	r1, [r7, #12]
 80120f0:	f7fb fce6 	bl	800dac0 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80120f4:	f107 0310 	add.w	r3, r7, #16
 80120f8:	4619      	mov	r1, r3
 80120fa:	68f8      	ldr	r0, [r7, #12]
 80120fc:	47a0      	blx	r4
 80120fe:	f107 0310 	add.w	r3, r7, #16
 8012102:	4618      	mov	r0, r3
 8012104:	f7fc fbb6 	bl	800e874 <_ZN15ContainsFailureD1Ev>
 8012108:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801210c:	4618      	mov	r0, r3
 801210e:	f7f9 fdbc 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8012112:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012116:	4618      	mov	r0, r3
 8012118:	f7f9 fdb7 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801211c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012120:	4618      	mov	r0, r3
 8012122:	f7f9 fdb2 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).contains(expected))
 8012126:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801212a:	6879      	ldr	r1, [r7, #4]
 801212c:	4618      	mov	r0, r3
 801212e:	f7f9 f9f4 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8012132:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012136:	68b9      	ldr	r1, [r7, #8]
 8012138:	4618      	mov	r0, r3
 801213a:	f7f9 f9ee 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801213e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8012142:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012146:	4611      	mov	r1, r2
 8012148:	4618      	mov	r0, r3
 801214a:	f7f9 fa64 	bl	800b616 <_ZNK12SimpleString8containsERKS_>
 801214e:	4603      	mov	r3, r0
 8012150:	f083 0301 	eor.w	r3, r3, #1
 8012154:	b2dc      	uxtb	r4, r3
 8012156:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801215a:	4618      	mov	r0, r3
 801215c:	f7f9 fd95 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8012160:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012164:	4618      	mov	r0, r3
 8012166:	f7f9 fd90 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801216a:	2c00      	cmp	r4, #0
 801216c:	d042      	beq.n	80121f4 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	3398      	adds	r3, #152	; 0x98
 8012174:	681c      	ldr	r4, [r3, #0]
 8012176:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801217a:	68b9      	ldr	r1, [r7, #8]
 801217c:	4618      	mov	r0, r3
 801217e:	f7f9 f9cc 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8012182:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8012186:	6879      	ldr	r1, [r7, #4]
 8012188:	4618      	mov	r0, r3
 801218a:	f7f9 f9c6 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801218e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8012192:	6839      	ldr	r1, [r7, #0]
 8012194:	4618      	mov	r0, r3
 8012196:	f7f9 f9c0 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801219a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 801219e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80121a2:	9302      	str	r3, [sp, #8]
 80121a4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80121a8:	9301      	str	r3, [sp, #4]
 80121aa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80121ae:	9300      	str	r3, [sp, #0]
 80121b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80121b4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80121b8:	68f9      	ldr	r1, [r7, #12]
 80121ba:	f7fb fc81 	bl	800dac0 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80121be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80121c2:	4619      	mov	r1, r3
 80121c4:	68f8      	ldr	r0, [r7, #12]
 80121c6:	47a0      	blx	r4
 80121c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80121cc:	4618      	mov	r0, r3
 80121ce:	f7fc fb51 	bl	800e874 <_ZN15ContainsFailureD1Ev>
 80121d2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80121d6:	4618      	mov	r0, r3
 80121d8:	f7f9 fd57 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 80121dc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80121e0:	4618      	mov	r0, r3
 80121e2:	f7f9 fd52 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 80121e6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80121ea:	4618      	mov	r0, r3
 80121ec:	f7f9 fd4d 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 80121f0:	e000      	b.n	80121f4 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80121f2:	bf00      	nop
}
 80121f4:	37bc      	adds	r7, #188	; 0xbc
 80121f6:	46bd      	mov	sp, r7
 80121f8:	bd90      	pop	{r4, r7, pc}

080121fa <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 80121fa:	b590      	push	{r4, r7, lr}
 80121fc:	b0b3      	sub	sp, #204	; 0xcc
 80121fe:	af04      	add	r7, sp, #16
 8012200:	60f8      	str	r0, [r7, #12]
 8012202:	60b9      	str	r1, [r7, #8]
 8012204:	607a      	str	r2, [r7, #4]
 8012206:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8012208:	68f8      	ldr	r0, [r7, #12]
 801220a:	f000 fd4f 	bl	8012cac <_ZN10UtestShell13getTestResultEv>
 801220e:	4603      	mov	r3, r0
 8012210:	681a      	ldr	r2, [r3, #0]
 8012212:	3228      	adds	r2, #40	; 0x28
 8012214:	6812      	ldr	r2, [r2, #0]
 8012216:	4618      	mov	r0, r3
 8012218:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d103      	bne.n	8012228 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x2e>
 8012220:	68bb      	ldr	r3, [r7, #8]
 8012222:	2b00      	cmp	r3, #0
 8012224:	f000 80ad 	beq.w	8012382 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d002      	beq.n	8012234 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x3a>
 801222e:	68bb      	ldr	r3, [r7, #8]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d140      	bne.n	80122b6 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	3398      	adds	r3, #152	; 0x98
 801223a:	681c      	ldr	r4, [r3, #0]
 801223c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012240:	68b9      	ldr	r1, [r7, #8]
 8012242:	4618      	mov	r0, r3
 8012244:	f7f9 f969 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8012248:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801224c:	6879      	ldr	r1, [r7, #4]
 801224e:	4618      	mov	r0, r3
 8012250:	f7f9 f963 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8012254:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012258:	6839      	ldr	r1, [r7, #0]
 801225a:	4618      	mov	r0, r3
 801225c:	f7f9 f95d 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8012260:	f107 0010 	add.w	r0, r7, #16
 8012264:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012268:	9302      	str	r3, [sp, #8]
 801226a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801226e:	9301      	str	r3, [sp, #4]
 8012270:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012274:	9300      	str	r3, [sp, #0]
 8012276:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801227a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801227e:	68f9      	ldr	r1, [r7, #12]
 8012280:	f7fb fc1e 	bl	800dac0 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8012284:	f107 0310 	add.w	r3, r7, #16
 8012288:	4619      	mov	r1, r3
 801228a:	68f8      	ldr	r0, [r7, #12]
 801228c:	47a0      	blx	r4
 801228e:	f107 0310 	add.w	r3, r7, #16
 8012292:	4618      	mov	r0, r3
 8012294:	f7fc faee 	bl	800e874 <_ZN15ContainsFailureD1Ev>
 8012298:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801229c:	4618      	mov	r0, r3
 801229e:	f7f9 fcf4 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 80122a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80122a6:	4618      	mov	r0, r3
 80122a8:	f7f9 fcef 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 80122ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80122b0:	4618      	mov	r0, r3
 80122b2:	f7f9 fcea 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).containsNoCase(expected))
 80122b6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80122ba:	6879      	ldr	r1, [r7, #4]
 80122bc:	4618      	mov	r0, r3
 80122be:	f7f9 f92c 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80122c2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80122c6:	68b9      	ldr	r1, [r7, #8]
 80122c8:	4618      	mov	r0, r3
 80122ca:	f7f9 f926 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80122ce:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80122d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80122d6:	4611      	mov	r1, r2
 80122d8:	4618      	mov	r0, r3
 80122da:	f7f9 f9b7 	bl	800b64c <_ZNK12SimpleString14containsNoCaseERKS_>
 80122de:	4603      	mov	r3, r0
 80122e0:	f083 0301 	eor.w	r3, r3, #1
 80122e4:	b2dc      	uxtb	r4, r3
 80122e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80122ea:	4618      	mov	r0, r3
 80122ec:	f7f9 fccd 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 80122f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80122f4:	4618      	mov	r0, r3
 80122f6:	f7f9 fcc8 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 80122fa:	2c00      	cmp	r4, #0
 80122fc:	d042      	beq.n	8012384 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	3398      	adds	r3, #152	; 0x98
 8012304:	681c      	ldr	r4, [r3, #0]
 8012306:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801230a:	68b9      	ldr	r1, [r7, #8]
 801230c:	4618      	mov	r0, r3
 801230e:	f7f9 f904 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8012312:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8012316:	6879      	ldr	r1, [r7, #4]
 8012318:	4618      	mov	r0, r3
 801231a:	f7f9 f8fe 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801231e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8012322:	6839      	ldr	r1, [r7, #0]
 8012324:	4618      	mov	r0, r3
 8012326:	f7f9 f8f8 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801232a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 801232e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8012332:	9302      	str	r3, [sp, #8]
 8012334:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8012338:	9301      	str	r3, [sp, #4]
 801233a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801233e:	9300      	str	r3, [sp, #0]
 8012340:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012344:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8012348:	68f9      	ldr	r1, [r7, #12]
 801234a:	f7fb fbb9 	bl	800dac0 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 801234e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012352:	4619      	mov	r1, r3
 8012354:	68f8      	ldr	r0, [r7, #12]
 8012356:	47a0      	blx	r4
 8012358:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801235c:	4618      	mov	r0, r3
 801235e:	f7fc fa89 	bl	800e874 <_ZN15ContainsFailureD1Ev>
 8012362:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8012366:	4618      	mov	r0, r3
 8012368:	f7f9 fc8f 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801236c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8012370:	4618      	mov	r0, r3
 8012372:	f7f9 fc8a 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8012376:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801237a:	4618      	mov	r0, r3
 801237c:	f7f9 fc85 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8012380:	e000      	b.n	8012384 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8012382:	bf00      	nop
}
 8012384:	37bc      	adds	r7, #188	; 0xbc
 8012386:	46bd      	mov	sp, r7
 8012388:	bd90      	pop	{r4, r7, pc}

0801238a <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator>:

void UtestShell::assertLongsEqual(long expected, long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801238a:	b590      	push	{r4, r7, lr}
 801238c:	b099      	sub	sp, #100	; 0x64
 801238e:	af04      	add	r7, sp, #16
 8012390:	60f8      	str	r0, [r7, #12]
 8012392:	60b9      	str	r1, [r7, #8]
 8012394:	607a      	str	r2, [r7, #4]
 8012396:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8012398:	68f8      	ldr	r0, [r7, #12]
 801239a:	f000 fc87 	bl	8012cac <_ZN10UtestShell13getTestResultEv>
 801239e:	4603      	mov	r3, r0
 80123a0:	681a      	ldr	r2, [r3, #0]
 80123a2:	3228      	adds	r2, #40	; 0x28
 80123a4:	6812      	ldr	r2, [r2, #0]
 80123a6:	4618      	mov	r0, r3
 80123a8:	4790      	blx	r2
    if (expected != actual)
 80123aa:	68ba      	ldr	r2, [r7, #8]
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	429a      	cmp	r2, r3
 80123b0:	d027      	beq.n	8012402 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator+0x78>
        failWith(LongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	339c      	adds	r3, #156	; 0x9c
 80123b8:	681c      	ldr	r4, [r3, #0]
 80123ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80123be:	6839      	ldr	r1, [r7, #0]
 80123c0:	4618      	mov	r0, r3
 80123c2:	f7f9 f8aa 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80123c6:	f107 0014 	add.w	r0, r7, #20
 80123ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80123ce:	9302      	str	r3, [sp, #8]
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	9301      	str	r3, [sp, #4]
 80123d4:	68bb      	ldr	r3, [r7, #8]
 80123d6:	9300      	str	r3, [sp, #0]
 80123d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80123da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80123dc:	68f9      	ldr	r1, [r7, #12]
 80123de:	f7fb fc1f 	bl	800dc20 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>
 80123e2:	f107 0314 	add.w	r3, r7, #20
 80123e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80123e8:	4619      	mov	r1, r3
 80123ea:	68f8      	ldr	r0, [r7, #12]
 80123ec:	47a0      	blx	r4
 80123ee:	f107 0314 	add.w	r3, r7, #20
 80123f2:	4618      	mov	r0, r3
 80123f4:	f7fc f9fa 	bl	800e7ec <_ZN17LongsEqualFailureD1Ev>
 80123f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80123fc:	4618      	mov	r0, r3
 80123fe:	f7f9 fc44 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 8012402:	bf00      	nop
 8012404:	3754      	adds	r7, #84	; 0x54
 8012406:	46bd      	mov	sp, r7
 8012408:	bd90      	pop	{r4, r7, pc}

0801240a <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongsEqual(unsigned long expected, unsigned long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801240a:	b590      	push	{r4, r7, lr}
 801240c:	b099      	sub	sp, #100	; 0x64
 801240e:	af04      	add	r7, sp, #16
 8012410:	60f8      	str	r0, [r7, #12]
 8012412:	60b9      	str	r1, [r7, #8]
 8012414:	607a      	str	r2, [r7, #4]
 8012416:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8012418:	68f8      	ldr	r0, [r7, #12]
 801241a:	f000 fc47 	bl	8012cac <_ZN10UtestShell13getTestResultEv>
 801241e:	4603      	mov	r3, r0
 8012420:	681a      	ldr	r2, [r3, #0]
 8012422:	3228      	adds	r2, #40	; 0x28
 8012424:	6812      	ldr	r2, [r2, #0]
 8012426:	4618      	mov	r0, r3
 8012428:	4790      	blx	r2
    if (expected != actual)
 801242a:	68ba      	ldr	r2, [r7, #8]
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	429a      	cmp	r2, r3
 8012430:	d027      	beq.n	8012482 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator+0x78>
        failWith(UnsignedLongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	339c      	adds	r3, #156	; 0x9c
 8012438:	681c      	ldr	r4, [r3, #0]
 801243a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801243e:	6839      	ldr	r1, [r7, #0]
 8012440:	4618      	mov	r0, r3
 8012442:	f7f9 f86a 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8012446:	f107 0014 	add.w	r0, r7, #20
 801244a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801244e:	9302      	str	r3, [sp, #8]
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	9301      	str	r3, [sp, #4]
 8012454:	68bb      	ldr	r3, [r7, #8]
 8012456:	9300      	str	r3, [sp, #0]
 8012458:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801245a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801245c:	68f9      	ldr	r1, [r7, #12]
 801245e:	f7fb fcab 	bl	800ddb8 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>
 8012462:	f107 0314 	add.w	r3, r7, #20
 8012466:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012468:	4619      	mov	r1, r3
 801246a:	68f8      	ldr	r0, [r7, #12]
 801246c:	47a0      	blx	r4
 801246e:	f107 0314 	add.w	r3, r7, #20
 8012472:	4618      	mov	r0, r3
 8012474:	f7fc f998 	bl	800e7a8 <_ZN25UnsignedLongsEqualFailureD1Ev>
 8012478:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801247c:	4618      	mov	r0, r3
 801247e:	f7f9 fc04 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 8012482:	bf00      	nop
 8012484:	3754      	adds	r7, #84	; 0x54
 8012486:	46bd      	mov	sp, r7
 8012488:	bd90      	pop	{r4, r7, pc}
	...

0801248c <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertLongLongsEqual(cpputest_longlong expected, cpputest_longlong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801248c:	b082      	sub	sp, #8
 801248e:	b590      	push	{r4, r7, lr}
 8012490:	b099      	sub	sp, #100	; 0x64
 8012492:	af02      	add	r7, sp, #8
 8012494:	60f8      	str	r0, [r7, #12]
 8012496:	1d38      	adds	r0, r7, #4
 8012498:	e880 0006 	stmia.w	r0, {r1, r2}
 801249c:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 801249e:	68f8      	ldr	r0, [r7, #12]
 80124a0:	f000 fc04 	bl	8012cac <_ZN10UtestShell13getTestResultEv>
 80124a4:	4603      	mov	r3, r0
 80124a6:	681a      	ldr	r2, [r3, #0]
 80124a8:	3228      	adds	r2, #40	; 0x28
 80124aa:	6812      	ldr	r2, [r2, #0]
 80124ac:	4618      	mov	r0, r3
 80124ae:	4790      	blx	r2
    if (expected != actual)
        failWith(LongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	339c      	adds	r3, #156	; 0x9c
 80124b6:	681c      	ldr	r4, [r3, #0]
 80124b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80124bc:	4919      	ldr	r1, [pc, #100]	; (8012524 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator+0x98>)
 80124be:	4618      	mov	r0, r3
 80124c0:	f7f9 f82b 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80124c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80124c8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80124ca:	4618      	mov	r0, r3
 80124cc:	f7f9 f825 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80124d0:	f107 0014 	add.w	r0, r7, #20
 80124d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80124d8:	9301      	str	r3, [sp, #4]
 80124da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80124de:	9300      	str	r3, [sp, #0]
 80124e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80124e2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80124e4:	68f9      	ldr	r1, [r7, #12]
 80124e6:	f7fc f84d 	bl	800e584 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 80124ea:	f107 0314 	add.w	r3, r7, #20
 80124ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80124f2:	4619      	mov	r1, r3
 80124f4:	68f8      	ldr	r0, [r7, #12]
 80124f6:	47a0      	blx	r4
 80124f8:	f107 0314 	add.w	r3, r7, #20
 80124fc:	4618      	mov	r0, r3
 80124fe:	f7fc f887 	bl	800e610 <_ZN25FeatureUnsupportedFailureD1Ev>
 8012502:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012506:	4618      	mov	r0, r3
 8012508:	f7f9 fbbf 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801250c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012510:	4618      	mov	r0, r3
 8012512:	f7f9 fbba 	bl	800bc8a <_ZN12SimpleStringD1Ev>
#endif
}
 8012516:	bf00      	nop
 8012518:	375c      	adds	r7, #92	; 0x5c
 801251a:	46bd      	mov	sp, r7
 801251c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8012520:	b002      	add	sp, #8
 8012522:	4770      	bx	lr
 8012524:	080236f8 	.word	0x080236f8

08012528 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongLongsEqual(cpputest_ulonglong expected, cpputest_ulonglong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8012528:	b082      	sub	sp, #8
 801252a:	b590      	push	{r4, r7, lr}
 801252c:	b099      	sub	sp, #100	; 0x64
 801252e:	af02      	add	r7, sp, #8
 8012530:	60f8      	str	r0, [r7, #12]
 8012532:	1d38      	adds	r0, r7, #4
 8012534:	e880 0006 	stmia.w	r0, {r1, r2}
 8012538:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 801253a:	68f8      	ldr	r0, [r7, #12]
 801253c:	f000 fbb6 	bl	8012cac <_ZN10UtestShell13getTestResultEv>
 8012540:	4603      	mov	r3, r0
 8012542:	681a      	ldr	r2, [r3, #0]
 8012544:	3228      	adds	r2, #40	; 0x28
 8012546:	6812      	ldr	r2, [r2, #0]
 8012548:	4618      	mov	r0, r3
 801254a:	4790      	blx	r2
    if (expected != actual)
        failWith(UnsignedLongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	339c      	adds	r3, #156	; 0x9c
 8012552:	681c      	ldr	r4, [r3, #0]
 8012554:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012558:	4919      	ldr	r1, [pc, #100]	; (80125c0 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator+0x98>)
 801255a:	4618      	mov	r0, r3
 801255c:	f7f8 ffdd 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8012560:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012564:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8012566:	4618      	mov	r0, r3
 8012568:	f7f8 ffd7 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801256c:	f107 0014 	add.w	r0, r7, #20
 8012570:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012574:	9301      	str	r3, [sp, #4]
 8012576:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801257a:	9300      	str	r3, [sp, #0]
 801257c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801257e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012580:	68f9      	ldr	r1, [r7, #12]
 8012582:	f7fb ffff 	bl	800e584 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8012586:	f107 0314 	add.w	r3, r7, #20
 801258a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801258e:	4619      	mov	r1, r3
 8012590:	68f8      	ldr	r0, [r7, #12]
 8012592:	47a0      	blx	r4
 8012594:	f107 0314 	add.w	r3, r7, #20
 8012598:	4618      	mov	r0, r3
 801259a:	f7fc f839 	bl	800e610 <_ZN25FeatureUnsupportedFailureD1Ev>
 801259e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80125a2:	4618      	mov	r0, r3
 80125a4:	f7f9 fb71 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 80125a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80125ac:	4618      	mov	r0, r3
 80125ae:	f7f9 fb6c 	bl	800bc8a <_ZN12SimpleStringD1Ev>
#endif
}
 80125b2:	bf00      	nop
 80125b4:	375c      	adds	r7, #92	; 0x5c
 80125b6:	46bd      	mov	sp, r7
 80125b8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80125bc:	b002      	add	sp, #8
 80125be:	4770      	bx	lr
 80125c0:	080236f8 	.word	0x080236f8

080125c4 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator>:

void UtestShell::assertSignedBytesEqual(signed char expected, signed char actual, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80125c4:	b590      	push	{r4, r7, lr}
 80125c6:	b099      	sub	sp, #100	; 0x64
 80125c8:	af04      	add	r7, sp, #16
 80125ca:	60f8      	str	r0, [r7, #12]
 80125cc:	607b      	str	r3, [r7, #4]
 80125ce:	460b      	mov	r3, r1
 80125d0:	72fb      	strb	r3, [r7, #11]
 80125d2:	4613      	mov	r3, r2
 80125d4:	72bb      	strb	r3, [r7, #10]
    getTestResult()->countCheck();
 80125d6:	68f8      	ldr	r0, [r7, #12]
 80125d8:	f000 fb68 	bl	8012cac <_ZN10UtestShell13getTestResultEv>
 80125dc:	4603      	mov	r3, r0
 80125de:	681a      	ldr	r2, [r3, #0]
 80125e0:	3228      	adds	r2, #40	; 0x28
 80125e2:	6812      	ldr	r2, [r2, #0]
 80125e4:	4618      	mov	r0, r3
 80125e6:	4790      	blx	r2
    if (expected != actual)
 80125e8:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80125ec:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80125f0:	429a      	cmp	r2, r3
 80125f2:	d029      	beq.n	8012648 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator+0x84>
        failWith(SignedBytesEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	339c      	adds	r3, #156	; 0x9c
 80125fa:	681c      	ldr	r4, [r3, #0]
 80125fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012600:	6879      	ldr	r1, [r7, #4]
 8012602:	4618      	mov	r0, r3
 8012604:	f7f8 ff89 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8012608:	f107 0014 	add.w	r0, r7, #20
 801260c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012610:	9302      	str	r3, [sp, #8]
 8012612:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8012616:	9301      	str	r3, [sp, #4]
 8012618:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801261c:	9300      	str	r3, [sp, #0]
 801261e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012620:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012622:	68f9      	ldr	r1, [r7, #12]
 8012624:	f7fb fc94 	bl	800df50 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>
 8012628:	f107 0314 	add.w	r3, r7, #20
 801262c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801262e:	4619      	mov	r1, r3
 8012630:	68f8      	ldr	r0, [r7, #12]
 8012632:	47a0      	blx	r4
 8012634:	f107 0314 	add.w	r3, r7, #20
 8012638:	4618      	mov	r0, r3
 801263a:	f7fc f893 	bl	800e764 <_ZN23SignedBytesEqualFailureD1Ev>
 801263e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012642:	4618      	mov	r0, r3
 8012644:	f7f9 fb21 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 8012648:	bf00      	nop
 801264a:	3754      	adds	r7, #84	; 0x54
 801264c:	46bd      	mov	sp, r7
 801264e:	bd90      	pop	{r4, r7, pc}

08012650 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertPointersEqual(const void* expected, const void* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8012650:	b590      	push	{r4, r7, lr}
 8012652:	b09d      	sub	sp, #116	; 0x74
 8012654:	af04      	add	r7, sp, #16
 8012656:	60f8      	str	r0, [r7, #12]
 8012658:	60b9      	str	r1, [r7, #8]
 801265a:	607a      	str	r2, [r7, #4]
 801265c:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801265e:	68f8      	ldr	r0, [r7, #12]
 8012660:	f000 fb24 	bl	8012cac <_ZN10UtestShell13getTestResultEv>
 8012664:	4603      	mov	r3, r0
 8012666:	681a      	ldr	r2, [r3, #0]
 8012668:	3228      	adds	r2, #40	; 0x28
 801266a:	6812      	ldr	r2, [r2, #0]
 801266c:	4618      	mov	r0, r3
 801266e:	4790      	blx	r2
    if (expected != actual)
 8012670:	68ba      	ldr	r2, [r7, #8]
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	429a      	cmp	r2, r3
 8012676:	d03f      	beq.n	80126f8 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	339c      	adds	r3, #156	; 0x9c
 801267e:	681c      	ldr	r4, [r3, #0]
 8012680:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012684:	68b9      	ldr	r1, [r7, #8]
 8012686:	4618      	mov	r0, r3
 8012688:	f7f9 fdea 	bl	800c260 <_Z10StringFromPKv>
 801268c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012690:	6879      	ldr	r1, [r7, #4]
 8012692:	4618      	mov	r0, r3
 8012694:	f7f9 fde4 	bl	800c260 <_Z10StringFromPKv>
 8012698:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801269c:	6839      	ldr	r1, [r7, #0]
 801269e:	4618      	mov	r0, r3
 80126a0:	f7f8 ff3b 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80126a4:	f107 0014 	add.w	r0, r7, #20
 80126a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80126ac:	9302      	str	r3, [sp, #8]
 80126ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80126b2:	9301      	str	r3, [sp, #4]
 80126b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80126b8:	9300      	str	r3, [sp, #0]
 80126ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80126bc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80126be:	68f9      	ldr	r1, [r7, #12]
 80126c0:	f7fb f814 	bl	800d6ec <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80126c4:	f107 0314 	add.w	r3, r7, #20
 80126c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80126ca:	4619      	mov	r1, r3
 80126cc:	68f8      	ldr	r0, [r7, #12]
 80126ce:	47a0      	blx	r4
 80126d0:	f107 0314 	add.w	r3, r7, #20
 80126d4:	4618      	mov	r0, r3
 80126d6:	f7fc f955 	bl	800e984 <_ZN13EqualsFailureD1Ev>
 80126da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80126de:	4618      	mov	r0, r3
 80126e0:	f7f9 fad3 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 80126e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80126e8:	4618      	mov	r0, r3
 80126ea:	f7f9 face 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 80126ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80126f2:	4618      	mov	r0, r3
 80126f4:	f7f9 fac9 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 80126f8:	bf00      	nop
 80126fa:	3764      	adds	r7, #100	; 0x64
 80126fc:	46bd      	mov	sp, r7
 80126fe:	bd90      	pop	{r4, r7, pc}

08012700 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertFunctionPointersEqual(void (*expected)(), void (*actual)(), const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8012700:	b590      	push	{r4, r7, lr}
 8012702:	b09d      	sub	sp, #116	; 0x74
 8012704:	af04      	add	r7, sp, #16
 8012706:	60f8      	str	r0, [r7, #12]
 8012708:	60b9      	str	r1, [r7, #8]
 801270a:	607a      	str	r2, [r7, #4]
 801270c:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801270e:	68f8      	ldr	r0, [r7, #12]
 8012710:	f000 facc 	bl	8012cac <_ZN10UtestShell13getTestResultEv>
 8012714:	4603      	mov	r3, r0
 8012716:	681a      	ldr	r2, [r3, #0]
 8012718:	3228      	adds	r2, #40	; 0x28
 801271a:	6812      	ldr	r2, [r2, #0]
 801271c:	4618      	mov	r0, r3
 801271e:	4790      	blx	r2
    if (expected != actual)
 8012720:	68ba      	ldr	r2, [r7, #8]
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	429a      	cmp	r2, r3
 8012726:	d03f      	beq.n	80127a8 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	339c      	adds	r3, #156	; 0x9c
 801272e:	681c      	ldr	r4, [r3, #0]
 8012730:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012734:	68b9      	ldr	r1, [r7, #8]
 8012736:	4618      	mov	r0, r3
 8012738:	f7f9 fdbc 	bl	800c2b4 <_Z10StringFromPFvvE>
 801273c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012740:	6879      	ldr	r1, [r7, #4]
 8012742:	4618      	mov	r0, r3
 8012744:	f7f9 fdb6 	bl	800c2b4 <_Z10StringFromPFvvE>
 8012748:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801274c:	6839      	ldr	r1, [r7, #0]
 801274e:	4618      	mov	r0, r3
 8012750:	f7f8 fee3 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8012754:	f107 0014 	add.w	r0, r7, #20
 8012758:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801275c:	9302      	str	r3, [sp, #8]
 801275e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012762:	9301      	str	r3, [sp, #4]
 8012764:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012768:	9300      	str	r3, [sp, #0]
 801276a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801276c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801276e:	68f9      	ldr	r1, [r7, #12]
 8012770:	f7fa ffbc 	bl	800d6ec <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8012774:	f107 0314 	add.w	r3, r7, #20
 8012778:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801277a:	4619      	mov	r1, r3
 801277c:	68f8      	ldr	r0, [r7, #12]
 801277e:	47a0      	blx	r4
 8012780:	f107 0314 	add.w	r3, r7, #20
 8012784:	4618      	mov	r0, r3
 8012786:	f7fc f8fd 	bl	800e984 <_ZN13EqualsFailureD1Ev>
 801278a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801278e:	4618      	mov	r0, r3
 8012790:	f7f9 fa7b 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8012794:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012798:	4618      	mov	r0, r3
 801279a:	f7f9 fa76 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801279e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80127a2:	4618      	mov	r0, r3
 80127a4:	f7f9 fa71 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 80127a8:	bf00      	nop
 80127aa:	3764      	adds	r7, #100	; 0x64
 80127ac:	46bd      	mov	sp, r7
 80127ae:	bd90      	pop	{r4, r7, pc}

080127b0 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator>:

void UtestShell::assertDoublesEqual(double expected, double actual, double threshold, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80127b0:	b590      	push	{r4, r7, lr}
 80127b2:	b09d      	sub	sp, #116	; 0x74
 80127b4:	af02      	add	r7, sp, #8
 80127b6:	6278      	str	r0, [r7, #36]	; 0x24
 80127b8:	ed87 0b06 	vstr	d0, [r7, #24]
 80127bc:	ed87 1b04 	vstr	d1, [r7, #16]
 80127c0:	ed87 2b02 	vstr	d2, [r7, #8]
 80127c4:	6239      	str	r1, [r7, #32]
 80127c6:	607a      	str	r2, [r7, #4]
 80127c8:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80127ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80127cc:	f000 fa6e 	bl	8012cac <_ZN10UtestShell13getTestResultEv>
 80127d0:	4603      	mov	r3, r0
 80127d2:	681a      	ldr	r2, [r3, #0]
 80127d4:	3228      	adds	r2, #40	; 0x28
 80127d6:	6812      	ldr	r2, [r2, #0]
 80127d8:	4618      	mov	r0, r3
 80127da:	4790      	blx	r2
    if (!doubles_equal(expected, actual, threshold))
 80127dc:	ed97 2b02 	vldr	d2, [r7, #8]
 80127e0:	ed97 1b04 	vldr	d1, [r7, #16]
 80127e4:	ed97 0b06 	vldr	d0, [r7, #24]
 80127e8:	f7fe fd4a 	bl	8011280 <_Z13doubles_equalddd>
 80127ec:	4603      	mov	r3, r0
 80127ee:	f083 0301 	eor.w	r3, r3, #1
 80127f2:	b2db      	uxtb	r3, r3
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d029      	beq.n	801284c <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator+0x9c>
        failWith(DoublesEqualFailure(this, fileName, lineNumber, expected, actual, threshold, text), testTerminator);
 80127f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	339c      	adds	r3, #156	; 0x9c
 80127fe:	681c      	ldr	r4, [r3, #0]
 8012800:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012804:	6a39      	ldr	r1, [r7, #32]
 8012806:	4618      	mov	r0, r3
 8012808:	f7f8 fe87 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801280c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8012810:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012814:	9300      	str	r3, [sp, #0]
 8012816:	ed97 2b02 	vldr	d2, [r7, #8]
 801281a:	ed97 1b04 	vldr	d1, [r7, #16]
 801281e:	ed97 0b06 	vldr	d0, [r7, #24]
 8012822:	683b      	ldr	r3, [r7, #0]
 8012824:	687a      	ldr	r2, [r7, #4]
 8012826:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012828:	f7fa ffa2 	bl	800d770 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>
 801282c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012830:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012832:	4619      	mov	r1, r3
 8012834:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012836:	47a0      	blx	r4
 8012838:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801283c:	4618      	mov	r0, r3
 801283e:	f7fc f87f 	bl	800e940 <_ZN19DoublesEqualFailureD1Ev>
 8012842:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012846:	4618      	mov	r0, r3
 8012848:	f7f9 fa1f 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 801284c:	bf00      	nop
 801284e:	376c      	adds	r7, #108	; 0x6c
 8012850:	46bd      	mov	sp, r7
 8012852:	bd90      	pop	{r4, r7, pc}

08012854 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator>:

void UtestShell::assertBinaryEqual(const void *expected, const void *actual, size_t length, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8012854:	b590      	push	{r4, r7, lr}
 8012856:	b0a7      	sub	sp, #156	; 0x9c
 8012858:	af04      	add	r7, sp, #16
 801285a:	60f8      	str	r0, [r7, #12]
 801285c:	60b9      	str	r1, [r7, #8]
 801285e:	607a      	str	r2, [r7, #4]
 8012860:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8012862:	68f8      	ldr	r0, [r7, #12]
 8012864:	f000 fa22 	bl	8012cac <_ZN10UtestShell13getTestResultEv>
 8012868:	4603      	mov	r3, r0
 801286a:	681a      	ldr	r2, [r3, #0]
 801286c:	3228      	adds	r2, #40	; 0x28
 801286e:	6812      	ldr	r2, [r2, #0]
 8012870:	4618      	mov	r0, r3
 8012872:	4790      	blx	r2
	if (length == 0) return;
 8012874:	683b      	ldr	r3, [r7, #0]
 8012876:	2b00      	cmp	r3, #0
 8012878:	d075      	beq.n	8012966 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x112>
    if (actual == NULLPTR && expected == NULLPTR) return;
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	2b00      	cmp	r3, #0
 801287e:	d102      	bne.n	8012886 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x32>
 8012880:	68bb      	ldr	r3, [r7, #8]
 8012882:	2b00      	cmp	r3, #0
 8012884:	d071      	beq.n	801296a <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x116>
    if (actual == NULLPTR || expected == NULLPTR)
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	2b00      	cmp	r3, #0
 801288a:	d002      	beq.n	8012892 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x3e>
 801288c:	68bb      	ldr	r3, [r7, #8]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d12d      	bne.n	80128ee <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x9a>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	339c      	adds	r3, #156	; 0x9c
 8012898:	681c      	ldr	r4, [r3, #0]
 801289a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801289e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80128a2:	4618      	mov	r0, r3
 80128a4:	f7f8 fe39 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80128a8:	f107 0010 	add.w	r0, r7, #16
 80128ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80128b0:	9303      	str	r3, [sp, #12]
 80128b2:	683b      	ldr	r3, [r7, #0]
 80128b4:	9302      	str	r3, [sp, #8]
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	9301      	str	r3, [sp, #4]
 80128ba:	68bb      	ldr	r3, [r7, #8]
 80128bc:	9300      	str	r3, [sp, #0]
 80128be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80128c2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80128c6:	68f9      	ldr	r1, [r7, #12]
 80128c8:	f7fb fd70 	bl	800e3ac <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 80128cc:	f107 0310 	add.w	r3, r7, #16
 80128d0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80128d4:	4619      	mov	r1, r3
 80128d6:	68f8      	ldr	r0, [r7, #12]
 80128d8:	47a0      	blx	r4
 80128da:	f107 0310 	add.w	r3, r7, #16
 80128de:	4618      	mov	r0, r3
 80128e0:	f7fb feda 	bl	800e698 <_ZN18BinaryEqualFailureD1Ev>
 80128e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80128e8:	4618      	mov	r0, r3
 80128ea:	f7f9 f9ce 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    if (SimpleString::MemCmp(expected, actual, length) != 0)
 80128ee:	683a      	ldr	r2, [r7, #0]
 80128f0:	6879      	ldr	r1, [r7, #4]
 80128f2:	68b8      	ldr	r0, [r7, #8]
 80128f4:	f7f8 fd30 	bl	800b358 <_ZN12SimpleString6MemCmpEPKvS1_j>
 80128f8:	4603      	mov	r3, r0
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	bf14      	ite	ne
 80128fe:	2301      	movne	r3, #1
 8012900:	2300      	moveq	r3, #0
 8012902:	b2db      	uxtb	r3, r3
 8012904:	2b00      	cmp	r3, #0
 8012906:	d031      	beq.n	801296c <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	339c      	adds	r3, #156	; 0x9c
 801290e:	681c      	ldr	r4, [r3, #0]
 8012910:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012914:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8012918:	4618      	mov	r0, r3
 801291a:	f7f8 fdfe 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801291e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8012922:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012926:	9303      	str	r3, [sp, #12]
 8012928:	683b      	ldr	r3, [r7, #0]
 801292a:	9302      	str	r3, [sp, #8]
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	9301      	str	r3, [sp, #4]
 8012930:	68bb      	ldr	r3, [r7, #8]
 8012932:	9300      	str	r3, [sp, #0]
 8012934:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012938:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801293c:	68f9      	ldr	r1, [r7, #12]
 801293e:	f7fb fd35 	bl	800e3ac <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 8012942:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012946:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801294a:	4619      	mov	r1, r3
 801294c:	68f8      	ldr	r0, [r7, #12]
 801294e:	47a0      	blx	r4
 8012950:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012954:	4618      	mov	r0, r3
 8012956:	f7fb fe9f 	bl	800e698 <_ZN18BinaryEqualFailureD1Ev>
 801295a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801295e:	4618      	mov	r0, r3
 8012960:	f7f9 f993 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8012964:	e002      	b.n	801296c <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
	if (length == 0) return;
 8012966:	bf00      	nop
 8012968:	e000      	b.n	801296c <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
    if (actual == NULLPTR && expected == NULLPTR) return;
 801296a:	bf00      	nop
}
 801296c:	378c      	adds	r7, #140	; 0x8c
 801296e:	46bd      	mov	sp, r7
 8012970:	bd90      	pop	{r4, r7, pc}

08012972 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator>:

void UtestShell::assertBitsEqual(unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8012972:	b590      	push	{r4, r7, lr}
 8012974:	b09b      	sub	sp, #108	; 0x6c
 8012976:	af06      	add	r7, sp, #24
 8012978:	60f8      	str	r0, [r7, #12]
 801297a:	60b9      	str	r1, [r7, #8]
 801297c:	607a      	str	r2, [r7, #4]
 801297e:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8012980:	68f8      	ldr	r0, [r7, #12]
 8012982:	f000 f993 	bl	8012cac <_ZN10UtestShell13getTestResultEv>
 8012986:	4603      	mov	r3, r0
 8012988:	681a      	ldr	r2, [r3, #0]
 801298a:	3228      	adds	r2, #40	; 0x28
 801298c:	6812      	ldr	r2, [r2, #0]
 801298e:	4618      	mov	r0, r3
 8012990:	4790      	blx	r2
    if ((expected & mask) != (actual & mask))
 8012992:	68ba      	ldr	r2, [r7, #8]
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	405a      	eors	r2, r3
 8012998:	683b      	ldr	r3, [r7, #0]
 801299a:	4013      	ands	r3, r2
 801299c:	2b00      	cmp	r3, #0
 801299e:	d02b      	beq.n	80129f8 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator+0x86>
        failWith(BitsEqualFailure(this, fileName, lineNumber, expected, actual, mask, byteCount, text), testTerminator);
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	339c      	adds	r3, #156	; 0x9c
 80129a6:	681c      	ldr	r4, [r3, #0]
 80129a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80129ac:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80129ae:	4618      	mov	r0, r3
 80129b0:	f7f8 fdb3 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80129b4:	f107 0014 	add.w	r0, r7, #20
 80129b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80129bc:	9304      	str	r3, [sp, #16]
 80129be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80129c0:	9303      	str	r3, [sp, #12]
 80129c2:	683b      	ldr	r3, [r7, #0]
 80129c4:	9302      	str	r3, [sp, #8]
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	9301      	str	r3, [sp, #4]
 80129ca:	68bb      	ldr	r3, [r7, #8]
 80129cc:	9300      	str	r3, [sp, #0]
 80129ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80129d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80129d2:	68f9      	ldr	r1, [r7, #12]
 80129d4:	f7fb fd7a 	bl	800e4cc <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>
 80129d8:	f107 0314 	add.w	r3, r7, #20
 80129dc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80129de:	4619      	mov	r1, r3
 80129e0:	68f8      	ldr	r0, [r7, #12]
 80129e2:	47a0      	blx	r4
 80129e4:	f107 0314 	add.w	r3, r7, #20
 80129e8:	4618      	mov	r0, r3
 80129ea:	f7fb fe33 	bl	800e654 <_ZN16BitsEqualFailureD1Ev>
 80129ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80129f2:	4618      	mov	r0, r3
 80129f4:	f7f9 f949 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 80129f8:	bf00      	nop
 80129fa:	3754      	adds	r7, #84	; 0x54
 80129fc:	46bd      	mov	sp, r7
 80129fe:	bd90      	pop	{r4, r7, pc}

08012a00 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertEquals(bool failed, const char* expected, const char* actual, const char* text, const char* file, size_t line, const TestTerminator& testTerminator)
{
 8012a00:	b590      	push	{r4, r7, lr}
 8012a02:	b09d      	sub	sp, #116	; 0x74
 8012a04:	af04      	add	r7, sp, #16
 8012a06:	60f8      	str	r0, [r7, #12]
 8012a08:	607a      	str	r2, [r7, #4]
 8012a0a:	603b      	str	r3, [r7, #0]
 8012a0c:	460b      	mov	r3, r1
 8012a0e:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8012a10:	68f8      	ldr	r0, [r7, #12]
 8012a12:	f000 f94b 	bl	8012cac <_ZN10UtestShell13getTestResultEv>
 8012a16:	4603      	mov	r3, r0
 8012a18:	681a      	ldr	r2, [r3, #0]
 8012a1a:	3228      	adds	r2, #40	; 0x28
 8012a1c:	6812      	ldr	r2, [r2, #0]
 8012a1e:	4618      	mov	r0, r3
 8012a20:	4790      	blx	r2
    if (failed)
 8012a22:	7afb      	ldrb	r3, [r7, #11]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d03f      	beq.n	8012aa8 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator+0xa8>
        failWith(CheckEqualFailure(this, file, line, expected, actual, text), testTerminator);
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	339c      	adds	r3, #156	; 0x9c
 8012a2e:	681c      	ldr	r4, [r3, #0]
 8012a30:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012a34:	6879      	ldr	r1, [r7, #4]
 8012a36:	4618      	mov	r0, r3
 8012a38:	f7f8 fd6f 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8012a3c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012a40:	6839      	ldr	r1, [r7, #0]
 8012a42:	4618      	mov	r0, r3
 8012a44:	f7f8 fd69 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8012a48:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012a4c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8012a4e:	4618      	mov	r0, r3
 8012a50:	f7f8 fd63 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8012a54:	f107 0014 	add.w	r0, r7, #20
 8012a58:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012a5c:	9302      	str	r3, [sp, #8]
 8012a5e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012a62:	9301      	str	r3, [sp, #4]
 8012a64:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012a68:	9300      	str	r3, [sp, #0]
 8012a6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012a6c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012a6e:	68f9      	ldr	r1, [r7, #12]
 8012a70:	f7fa ff30 	bl	800d8d4 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8012a74:	f107 0314 	add.w	r3, r7, #20
 8012a78:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012a7a:	4619      	mov	r1, r3
 8012a7c:	68f8      	ldr	r0, [r7, #12]
 8012a7e:	47a0      	blx	r4
 8012a80:	f107 0314 	add.w	r3, r7, #20
 8012a84:	4618      	mov	r0, r3
 8012a86:	f7fb ff39 	bl	800e8fc <_ZN17CheckEqualFailureD1Ev>
 8012a8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012a8e:	4618      	mov	r0, r3
 8012a90:	f7f9 f8fb 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8012a94:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012a98:	4618      	mov	r0, r3
 8012a9a:	f7f9 f8f6 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8012a9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	f7f9 f8f1 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 8012aa8:	bf00      	nop
 8012aaa:	3764      	adds	r7, #100	; 0x64
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd90      	pop	{r4, r7, pc}

08012ab0 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCompare(bool comparison, const char *checkString, const char *comparisonString, const char *text, const char *fileName, size_t lineNumber, const TestTerminator &testTerminator)
{
 8012ab0:	b590      	push	{r4, r7, lr}
 8012ab2:	b09d      	sub	sp, #116	; 0x74
 8012ab4:	af04      	add	r7, sp, #16
 8012ab6:	60f8      	str	r0, [r7, #12]
 8012ab8:	607a      	str	r2, [r7, #4]
 8012aba:	603b      	str	r3, [r7, #0]
 8012abc:	460b      	mov	r3, r1
 8012abe:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8012ac0:	68f8      	ldr	r0, [r7, #12]
 8012ac2:	f000 f8f3 	bl	8012cac <_ZN10UtestShell13getTestResultEv>
 8012ac6:	4603      	mov	r3, r0
 8012ac8:	681a      	ldr	r2, [r3, #0]
 8012aca:	3228      	adds	r2, #40	; 0x28
 8012acc:	6812      	ldr	r2, [r2, #0]
 8012ace:	4618      	mov	r0, r3
 8012ad0:	4790      	blx	r2
    if (!comparison)
 8012ad2:	7afb      	ldrb	r3, [r7, #11]
 8012ad4:	f083 0301 	eor.w	r3, r3, #1
 8012ad8:	b2db      	uxtb	r3, r3
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d03f      	beq.n	8012b5e <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(ComparisonFailure(this, fileName, lineNumber, checkString, comparisonString, text), testTerminator);
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	339c      	adds	r3, #156	; 0x9c
 8012ae4:	681c      	ldr	r4, [r3, #0]
 8012ae6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012aea:	6879      	ldr	r1, [r7, #4]
 8012aec:	4618      	mov	r0, r3
 8012aee:	f7f8 fd14 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8012af2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012af6:	6839      	ldr	r1, [r7, #0]
 8012af8:	4618      	mov	r0, r3
 8012afa:	f7f8 fd0e 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8012afe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012b02:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8012b04:	4618      	mov	r0, r3
 8012b06:	f7f8 fd08 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8012b0a:	f107 0014 	add.w	r0, r7, #20
 8012b0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012b12:	9302      	str	r3, [sp, #8]
 8012b14:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012b18:	9301      	str	r3, [sp, #4]
 8012b1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012b1e:	9300      	str	r3, [sp, #0]
 8012b20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012b22:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012b24:	68f9      	ldr	r1, [r7, #12]
 8012b26:	f7fa ff83 	bl	800da30 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8012b2a:	f107 0314 	add.w	r3, r7, #20
 8012b2e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012b30:	4619      	mov	r1, r3
 8012b32:	68f8      	ldr	r0, [r7, #12]
 8012b34:	47a0      	blx	r4
 8012b36:	f107 0314 	add.w	r3, r7, #20
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	f7fb febc 	bl	800e8b8 <_ZN17ComparisonFailureD1Ev>
 8012b40:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012b44:	4618      	mov	r0, r3
 8012b46:	f7f9 f8a0 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8012b4a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012b4e:	4618      	mov	r0, r3
 8012b50:	f7f9 f89b 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8012b54:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012b58:	4618      	mov	r0, r3
 8012b5a:	f7f9 f896 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 8012b5e:	bf00      	nop
 8012b60:	3764      	adds	r7, #100	; 0x64
 8012b62:	46bd      	mov	sp, r7
 8012b64:	bd90      	pop	{r4, r7, pc}
	...

08012b68 <_ZN10UtestShell5printEPKcS1_j>:

void UtestShell::print(const char *text, const char* fileName, size_t lineNumber)
{
 8012b68:	b5b0      	push	{r4, r5, r7, lr}
 8012b6a:	b088      	sub	sp, #32
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	60f8      	str	r0, [r7, #12]
 8012b70:	60b9      	str	r1, [r7, #8]
 8012b72:	607a      	str	r2, [r7, #4]
 8012b74:	603b      	str	r3, [r7, #0]
    SimpleString stringToPrint = "\n";
 8012b76:	f107 0310 	add.w	r3, r7, #16
 8012b7a:	4924      	ldr	r1, [pc, #144]	; (8012c0c <_ZN10UtestShell5printEPKcS1_j+0xa4>)
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	f7f8 fccc 	bl	800b51a <_ZN12SimpleStringC1EPKc>
    stringToPrint += fileName;
 8012b82:	f107 0310 	add.w	r3, r7, #16
 8012b86:	6879      	ldr	r1, [r7, #4]
 8012b88:	4618      	mov	r0, r3
 8012b8a:	f7f9 f90d 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    stringToPrint += ":";
 8012b8e:	f107 0310 	add.w	r3, r7, #16
 8012b92:	491f      	ldr	r1, [pc, #124]	; (8012c10 <_ZN10UtestShell5printEPKcS1_j+0xa8>)
 8012b94:	4618      	mov	r0, r3
 8012b96:	f7f9 f907 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    stringToPrint += StringFrom(lineNumber);
 8012b9a:	f107 0318 	add.w	r3, r7, #24
 8012b9e:	6839      	ldr	r1, [r7, #0]
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	f7f9 fda1 	bl	800c6e8 <_Z10StringFromj>
 8012ba6:	f107 0218 	add.w	r2, r7, #24
 8012baa:	f107 0310 	add.w	r3, r7, #16
 8012bae:	4611      	mov	r1, r2
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	f7f9 f8e7 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 8012bb6:	f107 0318 	add.w	r3, r7, #24
 8012bba:	4618      	mov	r0, r3
 8012bbc:	f7f9 f865 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    stringToPrint += " ";
 8012bc0:	f107 0310 	add.w	r3, r7, #16
 8012bc4:	4913      	ldr	r1, [pc, #76]	; (8012c14 <_ZN10UtestShell5printEPKcS1_j+0xac>)
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	f7f9 f8ee 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    stringToPrint += text;
 8012bcc:	f107 0310 	add.w	r3, r7, #16
 8012bd0:	68b9      	ldr	r1, [r7, #8]
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	f7f9 f8e8 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    getTestResult()->print(stringToPrint.asCharString());
 8012bd8:	68f8      	ldr	r0, [r7, #12]
 8012bda:	f000 f867 	bl	8012cac <_ZN10UtestShell13getTestResultEv>
 8012bde:	4604      	mov	r4, r0
 8012be0:	6823      	ldr	r3, [r4, #0]
 8012be2:	3338      	adds	r3, #56	; 0x38
 8012be4:	681d      	ldr	r5, [r3, #0]
 8012be6:	f107 0310 	add.w	r3, r7, #16
 8012bea:	4618      	mov	r0, r3
 8012bec:	f7f9 f820 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	4619      	mov	r1, r3
 8012bf4:	4620      	mov	r0, r4
 8012bf6:	47a8      	blx	r5
    SimpleString stringToPrint = "\n";
 8012bf8:	f107 0310 	add.w	r3, r7, #16
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	f7f9 f844 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 8012c02:	bf00      	nop
 8012c04:	3720      	adds	r7, #32
 8012c06:	46bd      	mov	sp, r7
 8012c08:	bdb0      	pop	{r4, r5, r7, pc}
 8012c0a:	bf00      	nop
 8012c0c:	08023710 	.word	0x08023710
 8012c10:	08023714 	.word	0x08023714
 8012c14:	08023718 	.word	0x08023718

08012c18 <_ZN10UtestShell5printERK12SimpleStringPKcj>:

void UtestShell::print(const SimpleString& text, const char* fileName, size_t lineNumber)
{
 8012c18:	b590      	push	{r4, r7, lr}
 8012c1a:	b085      	sub	sp, #20
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	60f8      	str	r0, [r7, #12]
 8012c20:	60b9      	str	r1, [r7, #8]
 8012c22:	607a      	str	r2, [r7, #4]
 8012c24:	603b      	str	r3, [r7, #0]
    print(text.asCharString(), fileName, lineNumber);
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	3370      	adds	r3, #112	; 0x70
 8012c2c:	681c      	ldr	r4, [r3, #0]
 8012c2e:	68b8      	ldr	r0, [r7, #8]
 8012c30:	f7f8 fffe 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 8012c34:	4601      	mov	r1, r0
 8012c36:	683b      	ldr	r3, [r7, #0]
 8012c38:	687a      	ldr	r2, [r7, #4]
 8012c3a:	68f8      	ldr	r0, [r7, #12]
 8012c3c:	47a0      	blx	r4
}
 8012c3e:	bf00      	nop
 8012c40:	3714      	adds	r7, #20
 8012c42:	46bd      	mov	sp, r7
 8012c44:	bd90      	pop	{r4, r7, pc}

08012c46 <_ZN10UtestShell16printVeryVerboseEPKc>:

void UtestShell::printVeryVerbose(const char* text)
{
 8012c46:	b580      	push	{r7, lr}
 8012c48:	b082      	sub	sp, #8
 8012c4a:	af00      	add	r7, sp, #0
 8012c4c:	6078      	str	r0, [r7, #4]
 8012c4e:	6039      	str	r1, [r7, #0]
    getTestResult()->printVeryVerbose(text);
 8012c50:	6878      	ldr	r0, [r7, #4]
 8012c52:	f000 f82b 	bl	8012cac <_ZN10UtestShell13getTestResultEv>
 8012c56:	4603      	mov	r3, r0
 8012c58:	681a      	ldr	r2, [r3, #0]
 8012c5a:	323c      	adds	r2, #60	; 0x3c
 8012c5c:	6812      	ldr	r2, [r2, #0]
 8012c5e:	6839      	ldr	r1, [r7, #0]
 8012c60:	4618      	mov	r0, r3
 8012c62:	4790      	blx	r2
}
 8012c64:	bf00      	nop
 8012c66:	3708      	adds	r7, #8
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	bd80      	pop	{r7, pc}

08012c6c <_ZN10UtestShell13setTestResultEP10TestResult>:

TestResult* UtestShell::testResult_ = NULLPTR;
UtestShell* UtestShell::currentTest_ = NULLPTR;

void UtestShell::setTestResult(TestResult* result)
{
 8012c6c:	b480      	push	{r7}
 8012c6e:	b083      	sub	sp, #12
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	6078      	str	r0, [r7, #4]
 8012c74:	6039      	str	r1, [r7, #0]
    testResult_ = result;
 8012c76:	4a04      	ldr	r2, [pc, #16]	; (8012c88 <_ZN10UtestShell13setTestResultEP10TestResult+0x1c>)
 8012c78:	683b      	ldr	r3, [r7, #0]
 8012c7a:	6013      	str	r3, [r2, #0]
}
 8012c7c:	bf00      	nop
 8012c7e:	370c      	adds	r7, #12
 8012c80:	46bd      	mov	sp, r7
 8012c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c86:	4770      	bx	lr
 8012c88:	200009b8 	.word	0x200009b8

08012c8c <_ZN10UtestShell14setCurrentTestEPS_>:

void UtestShell::setCurrentTest(UtestShell* test)
{
 8012c8c:	b480      	push	{r7}
 8012c8e:	b083      	sub	sp, #12
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
 8012c94:	6039      	str	r1, [r7, #0]
    currentTest_ = test;
 8012c96:	4a04      	ldr	r2, [pc, #16]	; (8012ca8 <_ZN10UtestShell14setCurrentTestEPS_+0x1c>)
 8012c98:	683b      	ldr	r3, [r7, #0]
 8012c9a:	6013      	str	r3, [r2, #0]
}
 8012c9c:	bf00      	nop
 8012c9e:	370c      	adds	r7, #12
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca6:	4770      	bx	lr
 8012ca8:	200009bc 	.word	0x200009bc

08012cac <_ZN10UtestShell13getTestResultEv>:

TestResult* UtestShell::getTestResult()
{
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b082      	sub	sp, #8
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]
    if (testResult_ == NULLPTR)
 8012cb4:	4b09      	ldr	r3, [pc, #36]	; (8012cdc <_ZN10UtestShell13getTestResultEv+0x30>)
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d109      	bne.n	8012cd0 <_ZN10UtestShell13getTestResultEv+0x24>
        return &OutsideTestRunnerUTest::instance().getTestResult();
 8012cbc:	f7fe fbb2 	bl	8011424 <_ZN22OutsideTestRunnerUTest8instanceEv>
 8012cc0:	4603      	mov	r3, r0
 8012cc2:	681a      	ldr	r2, [r3, #0]
 8012cc4:	32a4      	adds	r2, #164	; 0xa4
 8012cc6:	6812      	ldr	r2, [r2, #0]
 8012cc8:	4618      	mov	r0, r3
 8012cca:	4790      	blx	r2
 8012ccc:	4603      	mov	r3, r0
 8012cce:	e001      	b.n	8012cd4 <_ZN10UtestShell13getTestResultEv+0x28>
    return testResult_;
 8012cd0:	4b02      	ldr	r3, [pc, #8]	; (8012cdc <_ZN10UtestShell13getTestResultEv+0x30>)
 8012cd2:	681b      	ldr	r3, [r3, #0]
}
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	3708      	adds	r7, #8
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	bd80      	pop	{r7, pc}
 8012cdc:	200009b8 	.word	0x200009b8

08012ce0 <_ZN10UtestShell10getCurrentEv>:

UtestShell* UtestShell::getCurrent()
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	af00      	add	r7, sp, #0
    if (currentTest_ == NULLPTR)
 8012ce4:	4b05      	ldr	r3, [pc, #20]	; (8012cfc <_ZN10UtestShell10getCurrentEv+0x1c>)
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d103      	bne.n	8012cf4 <_ZN10UtestShell10getCurrentEv+0x14>
        return &OutsideTestRunnerUTest::instance();
 8012cec:	f7fe fb9a 	bl	8011424 <_ZN22OutsideTestRunnerUTest8instanceEv>
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	e001      	b.n	8012cf8 <_ZN10UtestShell10getCurrentEv+0x18>
    return currentTest_;
 8012cf4:	4b01      	ldr	r3, [pc, #4]	; (8012cfc <_ZN10UtestShell10getCurrentEv+0x1c>)
 8012cf6:	681b      	ldr	r3, [r3, #0]
}
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	bd80      	pop	{r7, pc}
 8012cfc:	200009bc 	.word	0x200009bc

08012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>:

const TestTerminator &UtestShell::getCurrentTestTerminator()
{
 8012d00:	b480      	push	{r7}
 8012d02:	af00      	add	r7, sp, #0
    return *currentTestTerminator_;
 8012d04:	4b03      	ldr	r3, [pc, #12]	; (8012d14 <_ZN10UtestShell24getCurrentTestTerminatorEv+0x14>)
 8012d06:	681b      	ldr	r3, [r3, #0]
}
 8012d08:	4618      	mov	r0, r3
 8012d0a:	46bd      	mov	sp, r7
 8012d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d10:	4770      	bx	lr
 8012d12:	bf00      	nop
 8012d14:	20000094 	.word	0x20000094

08012d18 <_ZN10UtestShell14setCrashOnFailEv>:

void UtestShell::setCrashOnFail()
{
 8012d18:	b480      	push	{r7}
 8012d1a:	af00      	add	r7, sp, #0
    currentTestTerminator_ = &crashingTestTerminator;
 8012d1c:	4b03      	ldr	r3, [pc, #12]	; (8012d2c <_ZN10UtestShell14setCrashOnFailEv+0x14>)
 8012d1e:	4a04      	ldr	r2, [pc, #16]	; (8012d30 <_ZN10UtestShell14setCrashOnFailEv+0x18>)
 8012d20:	601a      	str	r2, [r3, #0]
}
 8012d22:	bf00      	nop
 8012d24:	46bd      	mov	sp, r7
 8012d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d2a:	4770      	bx	lr
 8012d2c:	20000094 	.word	0x20000094
 8012d30:	20000090 	.word	0x20000090

08012d34 <_ZN5UtestC1Ev>:
{
}

////////////// Utest ////////////

Utest::Utest()
 8012d34:	b480      	push	{r7}
 8012d36:	b083      	sub	sp, #12
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	6078      	str	r0, [r7, #4]
 8012d3c:	4a04      	ldr	r2, [pc, #16]	; (8012d50 <_ZN5UtestC1Ev+0x1c>)
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	601a      	str	r2, [r3, #0]
{
}
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	4618      	mov	r0, r3
 8012d46:	370c      	adds	r7, #12
 8012d48:	46bd      	mov	sp, r7
 8012d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d4e:	4770      	bx	lr
 8012d50:	08026a58 	.word	0x08026a58

08012d54 <_ZN5UtestD1Ev>:

Utest::~Utest()
 8012d54:	b480      	push	{r7}
 8012d56:	b083      	sub	sp, #12
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	6078      	str	r0, [r7, #4]
 8012d5c:	4a04      	ldr	r2, [pc, #16]	; (8012d70 <_ZN5UtestD1Ev+0x1c>)
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	601a      	str	r2, [r3, #0]
{
}
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	4618      	mov	r0, r3
 8012d66:	370c      	adds	r7, #12
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d6e:	4770      	bx	lr
 8012d70:	08026a58 	.word	0x08026a58

08012d74 <_ZN5UtestD0Ev>:
Utest::~Utest()
 8012d74:	b580      	push	{r7, lr}
 8012d76:	b082      	sub	sp, #8
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	6078      	str	r0, [r7, #4]
}
 8012d7c:	6878      	ldr	r0, [r7, #4]
 8012d7e:	f7ff ffe9 	bl	8012d54 <_ZN5UtestD1Ev>
 8012d82:	2104      	movs	r1, #4
 8012d84:	6878      	ldr	r0, [r7, #4]
 8012d86:	f7f6 f819 	bl	8008dbc <_ZdlPvj>
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	3708      	adds	r7, #8
 8012d90:	46bd      	mov	sp, r7
 8012d92:	bd80      	pop	{r7, pc}

08012d94 <_ZN5Utest3runEv>:

}
#else

void Utest::run()
{
 8012d94:	b580      	push	{r7, lr}
 8012d96:	b082      	sub	sp, #8
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	6078      	str	r0, [r7, #4]
    if (PlatformSpecificSetJmp(helperDoTestSetup, this)) {
 8012d9c:	4b0d      	ldr	r3, [pc, #52]	; (8012dd4 <_ZN5Utest3runEv+0x40>)
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	6879      	ldr	r1, [r7, #4]
 8012da2:	480d      	ldr	r0, [pc, #52]	; (8012dd8 <_ZN5Utest3runEv+0x44>)
 8012da4:	4798      	blx	r3
 8012da6:	4603      	mov	r3, r0
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	bf14      	ite	ne
 8012dac:	2301      	movne	r3, #1
 8012dae:	2300      	moveq	r3, #0
 8012db0:	b2db      	uxtb	r3, r3
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d004      	beq.n	8012dc0 <_ZN5Utest3runEv+0x2c>
        PlatformSpecificSetJmp(helperDoTestBody, this);
 8012db6:	4b07      	ldr	r3, [pc, #28]	; (8012dd4 <_ZN5Utest3runEv+0x40>)
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	6879      	ldr	r1, [r7, #4]
 8012dbc:	4807      	ldr	r0, [pc, #28]	; (8012ddc <_ZN5Utest3runEv+0x48>)
 8012dbe:	4798      	blx	r3
    }
    PlatformSpecificSetJmp(helperDoTestTeardown, this);
 8012dc0:	4b04      	ldr	r3, [pc, #16]	; (8012dd4 <_ZN5Utest3runEv+0x40>)
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	6879      	ldr	r1, [r7, #4]
 8012dc6:	4806      	ldr	r0, [pc, #24]	; (8012de0 <_ZN5Utest3runEv+0x4c>)
 8012dc8:	4798      	blx	r3
}
 8012dca:	bf00      	nop
 8012dcc:	3708      	adds	r7, #8
 8012dce:	46bd      	mov	sp, r7
 8012dd0:	bd80      	pop	{r7, pc}
 8012dd2:	bf00      	nop
 8012dd4:	200000a4 	.word	0x200000a4
 8012dd8:	08011481 	.word	0x08011481
 8012ddc:	0801149d 	.word	0x0801149d
 8012de0:	080114b9 	.word	0x080114b9

08012de4 <_ZN5Utest5setupEv>:

#endif

void Utest::setup()
{
 8012de4:	b480      	push	{r7}
 8012de6:	b083      	sub	sp, #12
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	6078      	str	r0, [r7, #4]
}
 8012dec:	bf00      	nop
 8012dee:	370c      	adds	r7, #12
 8012df0:	46bd      	mov	sp, r7
 8012df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df6:	4770      	bx	lr

08012df8 <_ZN5Utest8testBodyEv>:

void Utest::testBody()
{
 8012df8:	b480      	push	{r7}
 8012dfa:	b083      	sub	sp, #12
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	6078      	str	r0, [r7, #4]
}
 8012e00:	bf00      	nop
 8012e02:	370c      	adds	r7, #12
 8012e04:	46bd      	mov	sp, r7
 8012e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e0a:	4770      	bx	lr

08012e0c <_ZN5Utest8teardownEv>:

void Utest::teardown()
{
 8012e0c:	b480      	push	{r7}
 8012e0e:	b083      	sub	sp, #12
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	6078      	str	r0, [r7, #4]
}
 8012e14:	bf00      	nop
 8012e16:	370c      	adds	r7, #12
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1e:	4770      	bx	lr

08012e20 <_ZN14TestTerminatorD1Ev>:


/////////////////// Terminators

TestTerminator::~TestTerminator()
 8012e20:	b480      	push	{r7}
 8012e22:	b083      	sub	sp, #12
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	6078      	str	r0, [r7, #4]
 8012e28:	4a04      	ldr	r2, [pc, #16]	; (8012e3c <_ZN14TestTerminatorD1Ev+0x1c>)
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	601a      	str	r2, [r3, #0]
{
}
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	4618      	mov	r0, r3
 8012e32:	370c      	adds	r7, #12
 8012e34:	46bd      	mov	sp, r7
 8012e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e3a:	4770      	bx	lr
 8012e3c:	08026a44 	.word	0x08026a44

08012e40 <_ZNK20NormalTestTerminator15exitCurrentTestEv>:

void NormalTestTerminator::exitCurrentTest() const
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b084      	sub	sp, #16
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
    #if CPPUTEST_USE_STD_CPP_LIB
        throw CppUTestFailedException();
    #else
        TestTerminatorWithoutExceptions().exitCurrentTest();
 8012e48:	2300      	movs	r3, #0
 8012e4a:	60fb      	str	r3, [r7, #12]
 8012e4c:	f107 030c 	add.w	r3, r7, #12
 8012e50:	4618      	mov	r0, r3
 8012e52:	f7f6 f975 	bl	8009140 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 8012e56:	f107 030c 	add.w	r3, r7, #12
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	f000 f82c 	bl	8012eb8 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>
 8012e60:	f107 030c 	add.w	r3, r7, #12
 8012e64:	4618      	mov	r0, r3
 8012e66:	f000 f835 	bl	8012ed4 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
    #endif
}
 8012e6a:	bf00      	nop
 8012e6c:	3710      	adds	r7, #16
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	bd80      	pop	{r7, pc}
	...

08012e74 <_ZN20NormalTestTerminatorD1Ev>:

NormalTestTerminator::~NormalTestTerminator()
 8012e74:	b580      	push	{r7, lr}
 8012e76:	b082      	sub	sp, #8
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	6078      	str	r0, [r7, #4]
 8012e7c:	4a05      	ldr	r2, [pc, #20]	; (8012e94 <_ZN20NormalTestTerminatorD1Ev+0x20>)
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	601a      	str	r2, [r3, #0]
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	4618      	mov	r0, r3
 8012e86:	f7ff ffcb 	bl	8012e20 <_ZN14TestTerminatorD1Ev>
{
}
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	3708      	adds	r7, #8
 8012e90:	46bd      	mov	sp, r7
 8012e92:	bd80      	pop	{r7, pc}
 8012e94:	08026a30 	.word	0x08026a30

08012e98 <_ZN20NormalTestTerminatorD0Ev>:
NormalTestTerminator::~NormalTestTerminator()
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	b082      	sub	sp, #8
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	6078      	str	r0, [r7, #4]
}
 8012ea0:	6878      	ldr	r0, [r7, #4]
 8012ea2:	f7ff ffe7 	bl	8012e74 <_ZN20NormalTestTerminatorD1Ev>
 8012ea6:	2104      	movs	r1, #4
 8012ea8:	6878      	ldr	r0, [r7, #4]
 8012eaa:	f7f5 ff87 	bl	8008dbc <_ZdlPvj>
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	3708      	adds	r7, #8
 8012eb4:	46bd      	mov	sp, r7
 8012eb6:	bd80      	pop	{r7, pc}

08012eb8 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>:

void TestTerminatorWithoutExceptions::exitCurrentTest() const
{
 8012eb8:	b580      	push	{r7, lr}
 8012eba:	b082      	sub	sp, #8
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	6078      	str	r0, [r7, #4]
    PlatformSpecificLongJmp();
 8012ec0:	4b03      	ldr	r3, [pc, #12]	; (8012ed0 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv+0x18>)
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8012ec6:	bf00      	nop
 8012ec8:	3708      	adds	r7, #8
 8012eca:	46bd      	mov	sp, r7
 8012ecc:	bd80      	pop	{r7, pc}
 8012ece:	bf00      	nop
 8012ed0:	200000a0 	.word	0x200000a0

08012ed4 <_ZN31TestTerminatorWithoutExceptionsD1Ev>:

TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8012ed4:	b580      	push	{r7, lr}
 8012ed6:	b082      	sub	sp, #8
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	6078      	str	r0, [r7, #4]
 8012edc:	4a05      	ldr	r2, [pc, #20]	; (8012ef4 <_ZN31TestTerminatorWithoutExceptionsD1Ev+0x20>)
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	601a      	str	r2, [r3, #0]
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	f7ff ff9b 	bl	8012e20 <_ZN14TestTerminatorD1Ev>
{
}
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	4618      	mov	r0, r3
 8012eee:	3708      	adds	r7, #8
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	bd80      	pop	{r7, pc}
 8012ef4:	08026a1c 	.word	0x08026a1c

08012ef8 <_ZN31TestTerminatorWithoutExceptionsD0Ev>:
TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b082      	sub	sp, #8
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	6078      	str	r0, [r7, #4]
}
 8012f00:	6878      	ldr	r0, [r7, #4]
 8012f02:	f7ff ffe7 	bl	8012ed4 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 8012f06:	2104      	movs	r1, #4
 8012f08:	6878      	ldr	r0, [r7, #4]
 8012f0a:	f7f5 ff57 	bl	8008dbc <_ZdlPvj>
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	4618      	mov	r0, r3
 8012f12:	3708      	adds	r7, #8
 8012f14:	46bd      	mov	sp, r7
 8012f16:	bd80      	pop	{r7, pc}

08012f18 <_ZNK22CrashingTestTerminator15exitCurrentTestEv>:

void CrashingTestTerminator::exitCurrentTest() const
{
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b082      	sub	sp, #8
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	6078      	str	r0, [r7, #4]
    UtestShell::crash();
 8012f20:	f7fe fbaa 	bl	8011678 <_ZN10UtestShell5crashEv>
    NormalTestTerminator::exitCurrentTest();
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	4618      	mov	r0, r3
 8012f28:	f7ff ff8a 	bl	8012e40 <_ZNK20NormalTestTerminator15exitCurrentTestEv>
}
 8012f2c:	bf00      	nop
 8012f2e:	3708      	adds	r7, #8
 8012f30:	46bd      	mov	sp, r7
 8012f32:	bd80      	pop	{r7, pc}

08012f34 <_ZN22CrashingTestTerminatorD1Ev>:

CrashingTestTerminator::~CrashingTestTerminator()
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b082      	sub	sp, #8
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	6078      	str	r0, [r7, #4]
 8012f3c:	4a05      	ldr	r2, [pc, #20]	; (8012f54 <_ZN22CrashingTestTerminatorD1Ev+0x20>)
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	601a      	str	r2, [r3, #0]
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	4618      	mov	r0, r3
 8012f46:	f7ff ff95 	bl	8012e74 <_ZN20NormalTestTerminatorD1Ev>
{
}
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	3708      	adds	r7, #8
 8012f50:	46bd      	mov	sp, r7
 8012f52:	bd80      	pop	{r7, pc}
 8012f54:	08026a08 	.word	0x08026a08

08012f58 <_ZN22CrashingTestTerminatorD0Ev>:
CrashingTestTerminator::~CrashingTestTerminator()
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b082      	sub	sp, #8
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
}
 8012f60:	6878      	ldr	r0, [r7, #4]
 8012f62:	f7ff ffe7 	bl	8012f34 <_ZN22CrashingTestTerminatorD1Ev>
 8012f66:	2104      	movs	r1, #4
 8012f68:	6878      	ldr	r0, [r7, #4]
 8012f6a:	f7f5 ff27 	bl	8008dbc <_ZdlPvj>
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	4618      	mov	r0, r3
 8012f72:	3708      	adds	r7, #8
 8012f74:	46bd      	mov	sp, r7
 8012f76:	bd80      	pop	{r7, pc}

08012f78 <_ZN22UtestShellPointerArrayC1EP10UtestShell>:
    runIgnored_ = true;
}

//////////////////// UtestShellPointerArray

UtestShellPointerArray::UtestShellPointerArray(UtestShell* firstTest)
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b084      	sub	sp, #16
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	6078      	str	r0, [r7, #4]
 8012f80:	6039      	str	r1, [r7, #0]
    : arrayOfTests_(NULLPTR), count_(0)
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	2200      	movs	r2, #0
 8012f86:	601a      	str	r2, [r3, #0]
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	2200      	movs	r2, #0
 8012f8c:	605a      	str	r2, [r3, #4]
{
    count_ = (firstTest) ? firstTest->countTests() : 0;
 8012f8e:	683b      	ldr	r3, [r7, #0]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d007      	beq.n	8012fa4 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2c>
 8012f94:	683b      	ldr	r3, [r7, #0]
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	3310      	adds	r3, #16
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	6838      	ldr	r0, [r7, #0]
 8012f9e:	4798      	blx	r3
 8012fa0:	4603      	mov	r3, r0
 8012fa2:	e000      	b.n	8012fa6 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2e>
 8012fa4:	2300      	movs	r3, #0
 8012fa6:	687a      	ldr	r2, [r7, #4]
 8012fa8:	6053      	str	r3, [r2, #4]
    if (count_ == 0) return;
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	685b      	ldr	r3, [r3, #4]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d02d      	beq.n	801300e <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x96>

    arrayOfTests_ = new UtestShell*[count_];
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	685b      	ldr	r3, [r3, #4]
 8012fb6:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8012fba:	4293      	cmp	r3, r2
 8012fbc:	d201      	bcs.n	8012fc2 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4a>
 8012fbe:	009b      	lsls	r3, r3, #2
 8012fc0:	e001      	b.n	8012fc6 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4e>
 8012fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8012fc6:	f240 3237 	movw	r2, #823	; 0x337
 8012fca:	4914      	ldr	r1, [pc, #80]	; (801301c <_ZN22UtestShellPointerArrayC1EP10UtestShell+0xa4>)
 8012fcc:	4618      	mov	r0, r3
 8012fce:	f7f5 ff05 	bl	8008ddc <_ZnajPKci>
 8012fd2:	4602      	mov	r2, r0
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	601a      	str	r2, [r3, #0]

    UtestShell*currentTest = firstTest;
 8012fd8:	683b      	ldr	r3, [r7, #0]
 8012fda:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8012fdc:	2300      	movs	r3, #0
 8012fde:	60bb      	str	r3, [r7, #8]
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	685b      	ldr	r3, [r3, #4]
 8012fe4:	68ba      	ldr	r2, [r7, #8]
 8012fe6:	429a      	cmp	r2, r3
 8012fe8:	d212      	bcs.n	8013010 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x98>
    {
        arrayOfTests_[i] = currentTest;
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	681a      	ldr	r2, [r3, #0]
 8012fee:	68bb      	ldr	r3, [r7, #8]
 8012ff0:	009b      	lsls	r3, r3, #2
 8012ff2:	4413      	add	r3, r2
 8012ff4:	68fa      	ldr	r2, [r7, #12]
 8012ff6:	601a      	str	r2, [r3, #0]
        currentTest = currentTest->getNext();
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	330c      	adds	r3, #12
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	68f8      	ldr	r0, [r7, #12]
 8013002:	4798      	blx	r3
 8013004:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8013006:	68bb      	ldr	r3, [r7, #8]
 8013008:	3301      	adds	r3, #1
 801300a:	60bb      	str	r3, [r7, #8]
 801300c:	e7e8      	b.n	8012fe0 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x68>
    if (count_ == 0) return;
 801300e:	bf00      	nop
    }
}
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	4618      	mov	r0, r3
 8013014:	3710      	adds	r7, #16
 8013016:	46bd      	mov	sp, r7
 8013018:	bd80      	pop	{r7, pc}
 801301a:	bf00      	nop
 801301c:	080235a0 	.word	0x080235a0

08013020 <_ZN22UtestShellPointerArrayD1Ev>:

UtestShellPointerArray::~UtestShellPointerArray()
 8013020:	b580      	push	{r7, lr}
 8013022:	b082      	sub	sp, #8
 8013024:	af00      	add	r7, sp, #0
 8013026:	6078      	str	r0, [r7, #4]
{
    delete [] arrayOfTests_;
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d004      	beq.n	801303a <_ZN22UtestShellPointerArrayD1Ev+0x1a>
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	4618      	mov	r0, r3
 8013036:	f7f5 fee5 	bl	8008e04 <_ZdaPv>
}
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	4618      	mov	r0, r3
 801303e:	3708      	adds	r7, #8
 8013040:	46bd      	mov	sp, r7
 8013042:	bd80      	pop	{r7, pc}

08013044 <_ZN22UtestShellPointerArray4swapEjj>:

void UtestShellPointerArray::swap(size_t index1, size_t index2)
{
 8013044:	b480      	push	{r7}
 8013046:	b087      	sub	sp, #28
 8013048:	af00      	add	r7, sp, #0
 801304a:	60f8      	str	r0, [r7, #12]
 801304c:	60b9      	str	r1, [r7, #8]
 801304e:	607a      	str	r2, [r7, #4]
        UtestShell* e2 = arrayOfTests_[index2];
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	681a      	ldr	r2, [r3, #0]
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	009b      	lsls	r3, r3, #2
 8013058:	4413      	add	r3, r2
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	617b      	str	r3, [r7, #20]
        UtestShell* e1 = arrayOfTests_[index1];
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	681a      	ldr	r2, [r3, #0]
 8013062:	68bb      	ldr	r3, [r7, #8]
 8013064:	009b      	lsls	r3, r3, #2
 8013066:	4413      	add	r3, r2
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	613b      	str	r3, [r7, #16]
        arrayOfTests_[index1] = e2;
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	681a      	ldr	r2, [r3, #0]
 8013070:	68bb      	ldr	r3, [r7, #8]
 8013072:	009b      	lsls	r3, r3, #2
 8013074:	4413      	add	r3, r2
 8013076:	697a      	ldr	r2, [r7, #20]
 8013078:	601a      	str	r2, [r3, #0]
        arrayOfTests_[index2] = e1;
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	681a      	ldr	r2, [r3, #0]
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	009b      	lsls	r3, r3, #2
 8013082:	4413      	add	r3, r2
 8013084:	693a      	ldr	r2, [r7, #16]
 8013086:	601a      	str	r2, [r3, #0]
}
 8013088:	bf00      	nop
 801308a:	371c      	adds	r7, #28
 801308c:	46bd      	mov	sp, r7
 801308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013092:	4770      	bx	lr

08013094 <_ZN22UtestShellPointerArray7shuffleEj>:

void UtestShellPointerArray::shuffle(size_t seed)
{
 8013094:	b580      	push	{r7, lr}
 8013096:	b084      	sub	sp, #16
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
 801309c:	6039      	str	r1, [r7, #0]
    if (count_ == 0) return;
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	685b      	ldr	r3, [r3, #4]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d028      	beq.n	80130f8 <_ZN22UtestShellPointerArray7shuffleEj+0x64>

    PlatformSpecificSrand((unsigned int) seed);
 80130a6:	4b17      	ldr	r3, [pc, #92]	; (8013104 <_ZN22UtestShellPointerArray7shuffleEj+0x70>)
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	6838      	ldr	r0, [r7, #0]
 80130ac:	4798      	blx	r3

    for (size_t i = count_ - 1; i >= 1; --i)
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	685b      	ldr	r3, [r3, #4]
 80130b2:	3b01      	subs	r3, #1
 80130b4:	60fb      	str	r3, [r7, #12]
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d019      	beq.n	80130f0 <_ZN22UtestShellPointerArray7shuffleEj+0x5c>
    {
        if (count_ == 0) return;
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	685b      	ldr	r3, [r3, #4]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d01b      	beq.n	80130fc <_ZN22UtestShellPointerArray7shuffleEj+0x68>

        const size_t j = ((size_t)PlatformSpecificRand()) % (i + 1); // distribution biased by modulo, but good enough for shuffling
 80130c4:	4b10      	ldr	r3, [pc, #64]	; (8013108 <_ZN22UtestShellPointerArray7shuffleEj+0x74>)
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	4798      	blx	r3
 80130ca:	4603      	mov	r3, r0
 80130cc:	461a      	mov	r2, r3
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	3301      	adds	r3, #1
 80130d2:	fbb2 f1f3 	udiv	r1, r2, r3
 80130d6:	fb03 f301 	mul.w	r3, r3, r1
 80130da:	1ad3      	subs	r3, r2, r3
 80130dc:	60bb      	str	r3, [r7, #8]
        swap(i, j);
 80130de:	68ba      	ldr	r2, [r7, #8]
 80130e0:	68f9      	ldr	r1, [r7, #12]
 80130e2:	6878      	ldr	r0, [r7, #4]
 80130e4:	f7ff ffae 	bl	8013044 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = count_ - 1; i >= 1; --i)
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	3b01      	subs	r3, #1
 80130ec:	60fb      	str	r3, [r7, #12]
 80130ee:	e7e2      	b.n	80130b6 <_ZN22UtestShellPointerArray7shuffleEj+0x22>
   }
   relinkTestsInOrder();
 80130f0:	6878      	ldr	r0, [r7, #4]
 80130f2:	f000 f834 	bl	801315e <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 80130f6:	e002      	b.n	80130fe <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
    if (count_ == 0) return;
 80130f8:	bf00      	nop
 80130fa:	e000      	b.n	80130fe <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
        if (count_ == 0) return;
 80130fc:	bf00      	nop
}
 80130fe:	3710      	adds	r7, #16
 8013100:	46bd      	mov	sp, r7
 8013102:	bd80      	pop	{r7, pc}
 8013104:	200000e0 	.word	0x200000e0
 8013108:	200000e4 	.word	0x200000e4

0801310c <_ZN22UtestShellPointerArray7reverseEv>:

void UtestShellPointerArray::reverse()
{
 801310c:	b580      	push	{r7, lr}
 801310e:	b086      	sub	sp, #24
 8013110:	af00      	add	r7, sp, #0
 8013112:	6078      	str	r0, [r7, #4]
    if (count_ == 0) return;
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	685b      	ldr	r3, [r3, #4]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d01c      	beq.n	8013156 <_ZN22UtestShellPointerArray7reverseEv+0x4a>

    size_t halfCount = count_ / 2;
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	685b      	ldr	r3, [r3, #4]
 8013120:	085b      	lsrs	r3, r3, #1
 8013122:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < halfCount; i++)
 8013124:	2300      	movs	r3, #0
 8013126:	617b      	str	r3, [r7, #20]
 8013128:	697a      	ldr	r2, [r7, #20]
 801312a:	693b      	ldr	r3, [r7, #16]
 801312c:	429a      	cmp	r2, r3
 801312e:	d20e      	bcs.n	801314e <_ZN22UtestShellPointerArray7reverseEv+0x42>
    {
        size_t j = count_ - i - 1;
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	685a      	ldr	r2, [r3, #4]
 8013134:	697b      	ldr	r3, [r7, #20]
 8013136:	1ad3      	subs	r3, r2, r3
 8013138:	3b01      	subs	r3, #1
 801313a:	60fb      	str	r3, [r7, #12]
        swap(i, j);
 801313c:	68fa      	ldr	r2, [r7, #12]
 801313e:	6979      	ldr	r1, [r7, #20]
 8013140:	6878      	ldr	r0, [r7, #4]
 8013142:	f7ff ff7f 	bl	8013044 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = 0; i < halfCount; i++)
 8013146:	697b      	ldr	r3, [r7, #20]
 8013148:	3301      	adds	r3, #1
 801314a:	617b      	str	r3, [r7, #20]
 801314c:	e7ec      	b.n	8013128 <_ZN22UtestShellPointerArray7reverseEv+0x1c>
   }
   relinkTestsInOrder();
 801314e:	6878      	ldr	r0, [r7, #4]
 8013150:	f000 f805 	bl	801315e <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 8013154:	e000      	b.n	8013158 <_ZN22UtestShellPointerArray7reverseEv+0x4c>
    if (count_ == 0) return;
 8013156:	bf00      	nop
}
 8013158:	3718      	adds	r7, #24
 801315a:	46bd      	mov	sp, r7
 801315c:	bd80      	pop	{r7, pc}

0801315e <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>:

void UtestShellPointerArray::relinkTestsInOrder()
{
 801315e:	b580      	push	{r7, lr}
 8013160:	b084      	sub	sp, #16
 8013162:	af00      	add	r7, sp, #0
 8013164:	6078      	str	r0, [r7, #4]
    UtestShell *tests = NULLPTR;
 8013166:	2300      	movs	r3, #0
 8013168:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 801316a:	2300      	movs	r3, #0
 801316c:	60bb      	str	r3, [r7, #8]
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	685b      	ldr	r3, [r3, #4]
 8013172:	68ba      	ldr	r2, [r7, #8]
 8013174:	429a      	cmp	r2, r3
 8013176:	d221      	bcs.n	80131bc <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x5e>
        tests = arrayOfTests_[count_ - i - 1]->addTest(tests);
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	681a      	ldr	r2, [r3, #0]
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	6859      	ldr	r1, [r3, #4]
 8013180:	68bb      	ldr	r3, [r7, #8]
 8013182:	1acb      	subs	r3, r1, r3
 8013184:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013188:	3b01      	subs	r3, #1
 801318a:	009b      	lsls	r3, r3, #2
 801318c:	4413      	add	r3, r2
 801318e:	6818      	ldr	r0, [r3, #0]
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	681a      	ldr	r2, [r3, #0]
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	6859      	ldr	r1, [r3, #4]
 8013198:	68bb      	ldr	r3, [r7, #8]
 801319a:	1acb      	subs	r3, r1, r3
 801319c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80131a0:	3b01      	subs	r3, #1
 80131a2:	009b      	lsls	r3, r3, #2
 80131a4:	4413      	add	r3, r2
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	3308      	adds	r3, #8
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	68f9      	ldr	r1, [r7, #12]
 80131b0:	4798      	blx	r3
 80131b2:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 80131b4:	68bb      	ldr	r3, [r7, #8]
 80131b6:	3301      	adds	r3, #1
 80131b8:	60bb      	str	r3, [r7, #8]
 80131ba:	e7d8      	b.n	801316e <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x10>
}
 80131bc:	bf00      	nop
 80131be:	3710      	adds	r7, #16
 80131c0:	46bd      	mov	sp, r7
 80131c2:	bd80      	pop	{r7, pc}

080131c4 <_ZNK22UtestShellPointerArray12getFirstTestEv>:

UtestShell* UtestShellPointerArray::getFirstTest() const
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b082      	sub	sp, #8
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	6078      	str	r0, [r7, #4]
    return get(0);
 80131cc:	2100      	movs	r1, #0
 80131ce:	6878      	ldr	r0, [r7, #4]
 80131d0:	f000 f805 	bl	80131de <_ZNK22UtestShellPointerArray3getEj>
 80131d4:	4603      	mov	r3, r0
}
 80131d6:	4618      	mov	r0, r3
 80131d8:	3708      	adds	r7, #8
 80131da:	46bd      	mov	sp, r7
 80131dc:	bd80      	pop	{r7, pc}

080131de <_ZNK22UtestShellPointerArray3getEj>:

UtestShell* UtestShellPointerArray::get(size_t index) const
{
 80131de:	b480      	push	{r7}
 80131e0:	b083      	sub	sp, #12
 80131e2:	af00      	add	r7, sp, #0
 80131e4:	6078      	str	r0, [r7, #4]
 80131e6:	6039      	str	r1, [r7, #0]
    if (index >= count_) return NULLPTR;
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	685b      	ldr	r3, [r3, #4]
 80131ec:	683a      	ldr	r2, [r7, #0]
 80131ee:	429a      	cmp	r2, r3
 80131f0:	d301      	bcc.n	80131f6 <_ZNK22UtestShellPointerArray3getEj+0x18>
 80131f2:	2300      	movs	r3, #0
 80131f4:	e005      	b.n	8013202 <_ZNK22UtestShellPointerArray3getEj+0x24>
    return arrayOfTests_[index];
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	681a      	ldr	r2, [r3, #0]
 80131fa:	683b      	ldr	r3, [r7, #0]
 80131fc:	009b      	lsls	r3, r3, #2
 80131fe:	4413      	add	r3, r2
 8013200:	681b      	ldr	r3, [r3, #0]
}
 8013202:	4618      	mov	r0, r3
 8013204:	370c      	adds	r7, #12
 8013206:	46bd      	mov	sp, r7
 8013208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801320c:	4770      	bx	lr
	...

08013210 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>:



////////////// TestInstaller ////////////

TestInstaller::TestInstaller(UtestShell& shell, const char* groupName, const char* testName, const char* fileName, size_t lineNumber)
 8013210:	b580      	push	{r7, lr}
 8013212:	b084      	sub	sp, #16
 8013214:	af00      	add	r7, sp, #0
 8013216:	60f8      	str	r0, [r7, #12]
 8013218:	60b9      	str	r1, [r7, #8]
 801321a:	607a      	str	r2, [r7, #4]
 801321c:	603b      	str	r3, [r7, #0]
 801321e:	4a10      	ldr	r2, [pc, #64]	; (8013260 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j+0x50>)
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	601a      	str	r2, [r3, #0]
{
    shell.setGroupName(groupName);
 8013224:	6879      	ldr	r1, [r7, #4]
 8013226:	68b8      	ldr	r0, [r7, #8]
 8013228:	f7fe fc27 	bl	8011a7a <_ZN10UtestShell12setGroupNameEPKc>
    shell.setTestName(testName);
 801322c:	6839      	ldr	r1, [r7, #0]
 801322e:	68b8      	ldr	r0, [r7, #8]
 8013230:	f7fe fc31 	bl	8011a96 <_ZN10UtestShell11setTestNameEPKc>
    shell.setFileName(fileName);
 8013234:	69b9      	ldr	r1, [r7, #24]
 8013236:	68b8      	ldr	r0, [r7, #8]
 8013238:	f7fe fc03 	bl	8011a42 <_ZN10UtestShell11setFileNameEPKc>
    shell.setLineNumber(lineNumber);
 801323c:	69f9      	ldr	r1, [r7, #28]
 801323e:	68b8      	ldr	r0, [r7, #8]
 8013240:	f7fe fc0d 	bl	8011a5e <_ZN10UtestShell13setLineNumberEj>
    TestRegistry::getCurrentRegistry()->addTest(&shell);
 8013244:	f7fd fc20 	bl	8010a88 <_ZN12TestRegistry18getCurrentRegistryEv>
 8013248:	4603      	mov	r3, r0
 801324a:	681a      	ldr	r2, [r3, #0]
 801324c:	3208      	adds	r2, #8
 801324e:	6812      	ldr	r2, [r2, #0]
 8013250:	68b9      	ldr	r1, [r7, #8]
 8013252:	4618      	mov	r0, r3
 8013254:	4790      	blx	r2
}
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	4618      	mov	r0, r3
 801325a:	3710      	adds	r7, #16
 801325c:	46bd      	mov	sp, r7
 801325e:	bd80      	pop	{r7, pc}
 8013260:	0802694c 	.word	0x0802694c

08013264 <_ZN13TestInstallerD1Ev>:

TestInstaller::~TestInstaller()
 8013264:	b480      	push	{r7}
 8013266:	b083      	sub	sp, #12
 8013268:	af00      	add	r7, sp, #0
 801326a:	6078      	str	r0, [r7, #4]
 801326c:	4a04      	ldr	r2, [pc, #16]	; (8013280 <_ZN13TestInstallerD1Ev+0x1c>)
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	601a      	str	r2, [r3, #0]
{
}
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	4618      	mov	r0, r3
 8013276:	370c      	adds	r7, #12
 8013278:	46bd      	mov	sp, r7
 801327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801327e:	4770      	bx	lr
 8013280:	0802694c 	.word	0x0802694c

08013284 <_ZN13TestInstallerD0Ev>:
TestInstaller::~TestInstaller()
 8013284:	b580      	push	{r7, lr}
 8013286:	b082      	sub	sp, #8
 8013288:	af00      	add	r7, sp, #0
 801328a:	6078      	str	r0, [r7, #4]
}
 801328c:	6878      	ldr	r0, [r7, #4]
 801328e:	f7ff ffe9 	bl	8013264 <_ZN13TestInstallerD1Ev>
 8013292:	2104      	movs	r1, #4
 8013294:	6878      	ldr	r0, [r7, #4]
 8013296:	f7f5 fd91 	bl	8008dbc <_ZdlPvj>
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	4618      	mov	r0, r3
 801329e:	3708      	adds	r7, #8
 80132a0:	46bd      	mov	sp, r7
 80132a2:	bd80      	pop	{r7, pc}

080132a4 <_Z41__static_initialization_and_destruction_0ii>:

void TestInstaller::unDo()
{
    TestRegistry::getCurrentRegistry()->unDoLastAddTest();
}
 80132a4:	b580      	push	{r7, lr}
 80132a6:	b082      	sub	sp, #8
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	6078      	str	r0, [r7, #4]
 80132ac:	6039      	str	r1, [r7, #0]
static const CrashingTestTerminator crashingTestTerminator;
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d10a      	bne.n	80132ca <_Z41__static_initialization_and_destruction_0ii+0x26>
 80132b4:	683b      	ldr	r3, [r7, #0]
 80132b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80132ba:	4293      	cmp	r3, r2
 80132bc:	d105      	bne.n	80132ca <_Z41__static_initialization_and_destruction_0ii+0x26>
 80132be:	4805      	ldr	r0, [pc, #20]	; (80132d4 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80132c0:	f7ff fe38 	bl	8012f34 <_ZN22CrashingTestTerminatorD1Ev>
static const NormalTestTerminator normalTestTerminator;
 80132c4:	4804      	ldr	r0, [pc, #16]	; (80132d8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80132c6:	f7ff fdd5 	bl	8012e74 <_ZN20NormalTestTerminatorD1Ev>
}
 80132ca:	bf00      	nop
 80132cc:	3708      	adds	r7, #8
 80132ce:	46bd      	mov	sp, r7
 80132d0:	bd80      	pop	{r7, pc}
 80132d2:	bf00      	nop
 80132d4:	20000090 	.word	0x20000090
 80132d8:	2000008c 	.word	0x2000008c

080132dc <_GLOBAL__sub_I__Z13doubles_equalddd>:
 80132dc:	b580      	push	{r7, lr}
 80132de:	af00      	add	r7, sp, #0
 80132e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80132e4:	2001      	movs	r0, #1
 80132e6:	f7ff ffdd 	bl	80132a4 <_Z41__static_initialization_and_destruction_0ii>
 80132ea:	bd80      	pop	{r7, pc}

080132ec <_GLOBAL__sub_D__Z13doubles_equalddd>:
 80132ec:	b580      	push	{r7, lr}
 80132ee:	af00      	add	r7, sp, #0
 80132f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80132f4:	2000      	movs	r0, #0
 80132f6:	f7ff ffd5 	bl	80132a4 <_Z41__static_initialization_and_destruction_0ii>
 80132fa:	bd80      	pop	{r7, pc}

080132fc <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 80132fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132fe:	b083      	sub	sp, #12
 8013300:	af00      	add	r7, sp, #0
 8013302:	ed87 0b00 	vstr	d0, [r7]
 8013306:	683c      	ldr	r4, [r7, #0]
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801330e:	2301      	movs	r3, #1
 8013310:	461e      	mov	r6, r3
 8013312:	f04f 32ff 	mov.w	r2, #4294967295
 8013316:	4b10      	ldr	r3, [pc, #64]	; (8013358 <_ZSt5isinfd+0x5c>)
 8013318:	4620      	mov	r0, r4
 801331a:	4629      	mov	r1, r5
 801331c:	f7ed fa34 	bl	8000788 <__aeabi_dcmpun>
 8013320:	4603      	mov	r3, r0
 8013322:	2b00      	cmp	r3, #0
 8013324:	d10b      	bne.n	801333e <_ZSt5isinfd+0x42>
 8013326:	f04f 32ff 	mov.w	r2, #4294967295
 801332a:	4b0b      	ldr	r3, [pc, #44]	; (8013358 <_ZSt5isinfd+0x5c>)
 801332c:	4620      	mov	r0, r4
 801332e:	4629      	mov	r1, r5
 8013330:	f7ed fa0c 	bl	800074c <__aeabi_dcmple>
 8013334:	4603      	mov	r3, r0
 8013336:	2b00      	cmp	r3, #0
 8013338:	d101      	bne.n	801333e <_ZSt5isinfd+0x42>
 801333a:	2300      	movs	r3, #0
 801333c:	461e      	mov	r6, r3
 801333e:	b2f3      	uxtb	r3, r6
 8013340:	f083 0301 	eor.w	r3, r3, #1
 8013344:	b2db      	uxtb	r3, r3
 8013346:	2b00      	cmp	r3, #0
 8013348:	bf14      	ite	ne
 801334a:	2301      	movne	r3, #1
 801334c:	2300      	moveq	r3, #0
 801334e:	b2db      	uxtb	r3, r3
 8013350:	4618      	mov	r0, r3
 8013352:	370c      	adds	r7, #12
 8013354:	46bd      	mov	sp, r7
 8013356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013358:	7fefffff 	.word	0x7fefffff

0801335c <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 801335c:	b590      	push	{r4, r7, lr}
 801335e:	b083      	sub	sp, #12
 8013360:	af00      	add	r7, sp, #0
 8013362:	ed87 0b00 	vstr	d0, [r7]
 8013366:	2301      	movs	r3, #1
 8013368:	461c      	mov	r4, r3
 801336a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801336e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8013372:	f7ed fa09 	bl	8000788 <__aeabi_dcmpun>
 8013376:	4603      	mov	r3, r0
 8013378:	2b00      	cmp	r3, #0
 801337a:	d101      	bne.n	8013380 <_ZSt5isnand+0x24>
 801337c:	2300      	movs	r3, #0
 801337e:	461c      	mov	r4, r3
 8013380:	b2e3      	uxtb	r3, r4
 8013382:	2b00      	cmp	r3, #0
 8013384:	bf14      	ite	ne
 8013386:	2301      	movne	r3, #1
 8013388:	2300      	moveq	r3, #0
 801338a:	b2db      	uxtb	r3, r3
 801338c:	4618      	mov	r0, r3
 801338e:	370c      	adds	r7, #12
 8013390:	46bd      	mov	sp, r7
 8013392:	bd90      	pop	{r4, r7, pc}

08013394 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult>:

// There is a possibility that a compiler provides fork but not waitpid.
#if !defined(CPPUTEST_HAVE_FORK) || !defined(CPPUTEST_HAVE_WAITPID)

static void GccPlatformSpecificRunTestInASeperateProcess(UtestShell* shell, TestPlugin*, TestResult* result)
{
 8013394:	b590      	push	{r4, r7, lr}
 8013396:	b095      	sub	sp, #84	; 0x54
 8013398:	af00      	add	r7, sp, #0
 801339a:	60f8      	str	r0, [r7, #12]
 801339c:	60b9      	str	r1, [r7, #8]
 801339e:	607a      	str	r2, [r7, #4]
    result->addFailure(TestFailure(shell, "-p doesn't work on this platform, as it is lacking fork.\b"));
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	3334      	adds	r3, #52	; 0x34
 80133a6:	681c      	ldr	r4, [r3, #0]
 80133a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80133ac:	490f      	ldr	r1, [pc, #60]	; (80133ec <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult+0x58>)
 80133ae:	4618      	mov	r0, r3
 80133b0:	f7f8 f8b3 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80133b4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80133b8:	f107 0314 	add.w	r3, r7, #20
 80133bc:	68f9      	ldr	r1, [r7, #12]
 80133be:	4618      	mov	r0, r3
 80133c0:	f7f9 ff0a 	bl	800d1d8 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 80133c4:	f107 0314 	add.w	r3, r7, #20
 80133c8:	4619      	mov	r1, r3
 80133ca:	6878      	ldr	r0, [r7, #4]
 80133cc:	47a0      	blx	r4
 80133ce:	f107 0314 	add.w	r3, r7, #20
 80133d2:	4618      	mov	r0, r3
 80133d4:	f7f9 ffc0 	bl	800d358 <_ZN11TestFailureD1Ev>
 80133d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80133dc:	4618      	mov	r0, r3
 80133de:	f7f8 fc54 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 80133e2:	bf00      	nop
 80133e4:	3754      	adds	r7, #84	; 0x54
 80133e6:	46bd      	mov	sp, r7
 80133e8:	bd90      	pop	{r4, r7, pc}
 80133ea:	bf00      	nop
 80133ec:	08023728 	.word	0x08023728

080133f0 <_Z37PlatformSpecificGetWorkingEnvironmentv>:
}

#endif

TestOutput::WorkingEnvironment PlatformSpecificGetWorkingEnvironment()
{
 80133f0:	b480      	push	{r7}
 80133f2:	af00      	add	r7, sp, #0
    return TestOutput::eclipse;
 80133f4:	2301      	movs	r3, #1
}
 80133f6:	4618      	mov	r0, r3
 80133f8:	46bd      	mov	sp, r7
 80133fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133fe:	4770      	bx	lr

08013400 <PlatformSpecificSetJmpImplementation>:
int (*PlatformSpecificWaitPid)(int, int*, int) = PlatformSpecificWaitPidImplementation;

extern "C" {

static int PlatformSpecificSetJmpImplementation(void (*function) (void* data), void* data)
{
 8013400:	b580      	push	{r7, lr}
 8013402:	b082      	sub	sp, #8
 8013404:	af00      	add	r7, sp, #0
 8013406:	6078      	str	r0, [r7, #4]
 8013408:	6039      	str	r1, [r7, #0]
    if (0 == setjmp(test_exit_jmp_buf[jmp_buf_index])) {
 801340a:	4b13      	ldr	r3, [pc, #76]	; (8013458 <PlatformSpecificSetJmpImplementation+0x58>)
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	225c      	movs	r2, #92	; 0x5c
 8013410:	fb02 f303 	mul.w	r3, r2, r3
 8013414:	4a11      	ldr	r2, [pc, #68]	; (801345c <PlatformSpecificSetJmpImplementation+0x5c>)
 8013416:	4413      	add	r3, r2
 8013418:	4618      	mov	r0, r3
 801341a:	f7ec ff01 	bl	8000220 <setjmp>
 801341e:	4603      	mov	r3, r0
 8013420:	2b00      	cmp	r3, #0
 8013422:	bf0c      	ite	eq
 8013424:	2301      	moveq	r3, #1
 8013426:	2300      	movne	r3, #0
 8013428:	b2db      	uxtb	r3, r3
 801342a:	2b00      	cmp	r3, #0
 801342c:	d00e      	beq.n	801344c <PlatformSpecificSetJmpImplementation+0x4c>
        jmp_buf_index++;
 801342e:	4b0a      	ldr	r3, [pc, #40]	; (8013458 <PlatformSpecificSetJmpImplementation+0x58>)
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	3301      	adds	r3, #1
 8013434:	4a08      	ldr	r2, [pc, #32]	; (8013458 <PlatformSpecificSetJmpImplementation+0x58>)
 8013436:	6013      	str	r3, [r2, #0]
        function(data);
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	6838      	ldr	r0, [r7, #0]
 801343c:	4798      	blx	r3
        jmp_buf_index--;
 801343e:	4b06      	ldr	r3, [pc, #24]	; (8013458 <PlatformSpecificSetJmpImplementation+0x58>)
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	3b01      	subs	r3, #1
 8013444:	4a04      	ldr	r2, [pc, #16]	; (8013458 <PlatformSpecificSetJmpImplementation+0x58>)
 8013446:	6013      	str	r3, [r2, #0]
        return 1;
 8013448:	2301      	movs	r3, #1
 801344a:	e000      	b.n	801344e <PlatformSpecificSetJmpImplementation+0x4e>
    }
    return 0;
 801344c:	2300      	movs	r3, #0
}
 801344e:	4618      	mov	r0, r3
 8013450:	3708      	adds	r7, #8
 8013452:	46bd      	mov	sp, r7
 8013454:	bd80      	pop	{r7, pc}
 8013456:	bf00      	nop
 8013458:	20000d58 	.word	0x20000d58
 801345c:	200009c0 	.word	0x200009c0

08013460 <PlatformSpecificLongJmpImplementation>:
 #if !((__clang_major__ == 3) && (__clang_minor__ == 0))
 _no_return_
 #endif
#endif
static void PlatformSpecificLongJmpImplementation()
{
 8013460:	b580      	push	{r7, lr}
 8013462:	af00      	add	r7, sp, #0
    jmp_buf_index--;
 8013464:	4b07      	ldr	r3, [pc, #28]	; (8013484 <PlatformSpecificLongJmpImplementation+0x24>)
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	3b01      	subs	r3, #1
 801346a:	4a06      	ldr	r2, [pc, #24]	; (8013484 <PlatformSpecificLongJmpImplementation+0x24>)
 801346c:	6013      	str	r3, [r2, #0]
    longjmp(test_exit_jmp_buf[jmp_buf_index], 1);
 801346e:	4b05      	ldr	r3, [pc, #20]	; (8013484 <PlatformSpecificLongJmpImplementation+0x24>)
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	225c      	movs	r2, #92	; 0x5c
 8013474:	fb02 f303 	mul.w	r3, r2, r3
 8013478:	4a03      	ldr	r2, [pc, #12]	; (8013488 <PlatformSpecificLongJmpImplementation+0x28>)
 801347a:	4413      	add	r3, r2
 801347c:	2101      	movs	r1, #1
 801347e:	4618      	mov	r0, r3
 8013480:	f7ec fed4 	bl	800022c <longjmp>
 8013484:	20000d58 	.word	0x20000d58
 8013488:	200009c0 	.word	0x200009c0

0801348c <TimeInMillisImplementation>:
void (*PlatformSpecificRestoreJumpBuffer)() = PlatformSpecificRestoreJumpBufferImplementation;

///////////// Time in millis

static long TimeInMillisImplementation()
{
 801348c:	b480      	push	{r7}
 801348e:	af00      	add	r7, sp, #0
    struct timeval tv;
    struct timezone tz;
    gettimeofday(&tv, &tz);
    return (tv.tv_sec * 1000) + (long)((double)tv.tv_usec * 0.001);
#else
    return 0;
 8013490:	2300      	movs	r3, #0
#endif
}
 8013492:	4618      	mov	r0, r3
 8013494:	46bd      	mov	sp, r7
 8013496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801349a:	4770      	bx	lr

0801349c <TimeStringImplementation>:

static const char* TimeStringImplementation()
{
 801349c:	b580      	push	{r7, lr}
 801349e:	b084      	sub	sp, #16
 80134a0:	af00      	add	r7, sp, #0
    time_t theTime = time(NULLPTR);
 80134a2:	2000      	movs	r0, #0
 80134a4:	f00e ec3c 	blx	8021d20 <__time_veneer>
 80134a8:	4602      	mov	r2, r0
 80134aa:	460b      	mov	r3, r1
 80134ac:	e9c7 2300 	strd	r2, r3, [r7]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
    static struct tm lastlocaltime;
    localtime_s(&lastlocaltime, &theTime);
    struct tm *tmp = &lastlocaltime;
#else
    struct tm *tmp = localtime(&theTime);
 80134b0:	463b      	mov	r3, r7
 80134b2:	4618      	mov	r0, r3
 80134b4:	f00b fb74 	bl	801eba0 <localtime>
 80134b8:	60f8      	str	r0, [r7, #12]
#endif
    strftime(dateTime, 80, "%Y-%m-%dT%H:%M:%S", tmp);
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	4a04      	ldr	r2, [pc, #16]	; (80134d0 <TimeStringImplementation+0x34>)
 80134be:	2150      	movs	r1, #80	; 0x50
 80134c0:	4804      	ldr	r0, [pc, #16]	; (80134d4 <TimeStringImplementation+0x38>)
 80134c2:	f00c fc75 	bl	801fdb0 <strftime>
    return dateTime;
 80134c6:	4b03      	ldr	r3, [pc, #12]	; (80134d4 <TimeStringImplementation+0x38>)
}
 80134c8:	4618      	mov	r0, r3
 80134ca:	3710      	adds	r7, #16
 80134cc:	46bd      	mov	sp, r7
 80134ce:	bd80      	pop	{r7, pc}
 80134d0:	08023764 	.word	0x08023764
 80134d4:	20000d5c 	.word	0x20000d5c

080134d8 <PlatformSpecificFOpenImplementation>:
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#endif
int (*PlatformSpecificVSNprintf)(char *str, size_t size, const char* format, va_list va_args_list) = vsnprintf;

static PlatformSpecificFile PlatformSpecificFOpenImplementation(const char* filename, const char* flag)
{
 80134d8:	b580      	push	{r7, lr}
 80134da:	b082      	sub	sp, #8
 80134dc:	af00      	add	r7, sp, #0
 80134de:	6078      	str	r0, [r7, #4]
 80134e0:	6039      	str	r1, [r7, #0]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
  FILE* file;
   fopen_s(&file, filename, flag);
   return file;
#else
   return fopen(filename, flag);
 80134e2:	6839      	ldr	r1, [r7, #0]
 80134e4:	6878      	ldr	r0, [r7, #4]
 80134e6:	f00b f991 	bl	801e80c <fopen>
 80134ea:	4603      	mov	r3, r0
#endif
}
 80134ec:	4618      	mov	r0, r3
 80134ee:	3708      	adds	r7, #8
 80134f0:	46bd      	mov	sp, r7
 80134f2:	bd80      	pop	{r7, pc}

080134f4 <PlatformSpecificFPutsImplementation>:

static void PlatformSpecificFPutsImplementation(const char* str, PlatformSpecificFile file)
{
 80134f4:	b580      	push	{r7, lr}
 80134f6:	b082      	sub	sp, #8
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	6078      	str	r0, [r7, #4]
 80134fc:	6039      	str	r1, [r7, #0]
   fputs(str, (FILE*)file);
 80134fe:	6839      	ldr	r1, [r7, #0]
 8013500:	6878      	ldr	r0, [r7, #4]
 8013502:	f00b f9f1 	bl	801e8e8 <fputs>
}
 8013506:	bf00      	nop
 8013508:	3708      	adds	r7, #8
 801350a:	46bd      	mov	sp, r7
 801350c:	bd80      	pop	{r7, pc}

0801350e <PlatformSpecificFCloseImplementation>:

static void PlatformSpecificFCloseImplementation(PlatformSpecificFile file)
{
 801350e:	b580      	push	{r7, lr}
 8013510:	b082      	sub	sp, #8
 8013512:	af00      	add	r7, sp, #0
 8013514:	6078      	str	r0, [r7, #4]
   fclose((FILE*)file);
 8013516:	6878      	ldr	r0, [r7, #4]
 8013518:	f00a ff72 	bl	801e400 <fclose>
}
 801351c:	bf00      	nop
 801351e:	3708      	adds	r7, #8
 8013520:	46bd      	mov	sp, r7
 8013522:	bd80      	pop	{r7, pc}

08013524 <PlatformSpecificFlushImplementation>:

static void PlatformSpecificFlushImplementation()
{
 8013524:	b580      	push	{r7, lr}
 8013526:	af00      	add	r7, sp, #0
  fflush(stdout);
 8013528:	4b03      	ldr	r3, [pc, #12]	; (8013538 <PlatformSpecificFlushImplementation+0x14>)
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	689b      	ldr	r3, [r3, #8]
 801352e:	4618      	mov	r0, r3
 8013530:	f00b f830 	bl	801e594 <fflush>
}
 8013534:	bf00      	nop
 8013536:	bd80      	pop	{r7, pc}
 8013538:	20000108 	.word	0x20000108

0801353c <IsNanImplementation>:
#if defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8))
#pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

static int IsNanImplementation(double d)
{
 801353c:	b580      	push	{r7, lr}
 801353e:	b082      	sub	sp, #8
 8013540:	af00      	add	r7, sp, #0
 8013542:	ed87 0b00 	vstr	d0, [r7]
    return isnan(d);
 8013546:	ed97 0b00 	vldr	d0, [r7]
 801354a:	f7ff ff07 	bl	801335c <_ZSt5isnand>
 801354e:	4603      	mov	r3, r0
}
 8013550:	4618      	mov	r0, r3
 8013552:	3708      	adds	r7, #8
 8013554:	46bd      	mov	sp, r7
 8013556:	bd80      	pop	{r7, pc}

08013558 <IsInfImplementation>:

static int IsInfImplementation(double d)
{
 8013558:	b580      	push	{r7, lr}
 801355a:	b082      	sub	sp, #8
 801355c:	af00      	add	r7, sp, #0
 801355e:	ed87 0b00 	vstr	d0, [r7]
    return isinf(d);
 8013562:	ed97 0b00 	vldr	d0, [r7]
 8013566:	f7ff fec9 	bl	80132fc <_ZSt5isinfd>
 801356a:	4603      	mov	r3, r0
}
 801356c:	4618      	mov	r0, r3
 801356e:	3708      	adds	r7, #8
 8013570:	46bd      	mov	sp, r7
 8013572:	bd80      	pop	{r7, pc}

08013574 <PThreadMutexCreate>:
int (*PlatformSpecificIsNan)(double) = IsNanImplementation;
int (*PlatformSpecificIsInf)(double) = IsInfImplementation;
int (*PlatformSpecificAtExit)(void(*func)(void)) = atexit;  /// this was undefined before

static PlatformSpecificMutex PThreadMutexCreate(void)
{
 8013574:	b480      	push	{r7}
 8013576:	af00      	add	r7, sp, #0
    pthread_mutex_t *mutex = new pthread_mutex_t;

    pthread_mutex_init(mutex, NULLPTR);
    return (PlatformSpecificMutex)mutex;
#else
    return NULLPTR;
 8013578:	2300      	movs	r3, #0
#endif

}
 801357a:	4618      	mov	r0, r3
 801357c:	46bd      	mov	sp, r7
 801357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013582:	4770      	bx	lr

08013584 <PThreadMutexLock>:
{
    pthread_mutex_lock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexLock(PlatformSpecificMutex)
{
 8013584:	b480      	push	{r7}
 8013586:	b083      	sub	sp, #12
 8013588:	af00      	add	r7, sp, #0
 801358a:	6078      	str	r0, [r7, #4]
}
 801358c:	bf00      	nop
 801358e:	370c      	adds	r7, #12
 8013590:	46bd      	mov	sp, r7
 8013592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013596:	4770      	bx	lr

08013598 <PThreadMutexUnlock>:
{
    pthread_mutex_unlock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexUnlock(PlatformSpecificMutex)
{
 8013598:	b480      	push	{r7}
 801359a:	b083      	sub	sp, #12
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
}
 80135a0:	bf00      	nop
 80135a2:	370c      	adds	r7, #12
 80135a4:	46bd      	mov	sp, r7
 80135a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135aa:	4770      	bx	lr

080135ac <PThreadMutexDestroy>:
    pthread_mutex_destroy(mutex);
    delete mutex;
}
#else
static void PThreadMutexDestroy(PlatformSpecificMutex)
{
 80135ac:	b480      	push	{r7}
 80135ae:	b083      	sub	sp, #12
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	6078      	str	r0, [r7, #4]
}
 80135b4:	bf00      	nop
 80135b6:	370c      	adds	r7, #12
 80135b8:	46bd      	mov	sp, r7
 80135ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135be:	4770      	bx	lr

080135c0 <_ZN20CommandLineArgumentsC1EiPKPKc>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/CommandLineArguments.h"
#include "CppUTest/PlatformSpecificFunctions.h"

CommandLineArguments::CommandLineArguments(int ac, const char *const *av) :
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b084      	sub	sp, #16
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	60f8      	str	r0, [r7, #12]
 80135c8:	60b9      	str	r1, [r7, #8]
 80135ca:	607a      	str	r2, [r7, #4]
    ac_(ac), av_(av), needHelp_(false), verbose_(false), veryVerbose_(false), color_(false), runTestsAsSeperateProcess_(false), listTestGroupNames_(false), listTestGroupAndCaseNames_(false), listTestLocations_(false), runIgnored_(false), reversing_(false), crashOnFail_(false), shuffling_(false), shufflingPreSeeded_(false), repeat_(1), shuffleSeed_(0), groupFilters_(NULLPTR), nameFilters_(NULLPTR), outputType_(OUTPUT_ECLIPSE)
 80135cc:	4a25      	ldr	r2, [pc, #148]	; (8013664 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa4>)
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	601a      	str	r2, [r3, #0]
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	68ba      	ldr	r2, [r7, #8]
 80135d6:	605a      	str	r2, [r3, #4]
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	687a      	ldr	r2, [r7, #4]
 80135dc:	609a      	str	r2, [r3, #8]
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	2200      	movs	r2, #0
 80135e2:	731a      	strb	r2, [r3, #12]
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	2200      	movs	r2, #0
 80135e8:	735a      	strb	r2, [r3, #13]
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	2200      	movs	r2, #0
 80135ee:	739a      	strb	r2, [r3, #14]
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	2200      	movs	r2, #0
 80135f4:	73da      	strb	r2, [r3, #15]
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	2200      	movs	r2, #0
 80135fa:	741a      	strb	r2, [r3, #16]
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	2200      	movs	r2, #0
 8013600:	745a      	strb	r2, [r3, #17]
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	2200      	movs	r2, #0
 8013606:	749a      	strb	r2, [r3, #18]
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	2200      	movs	r2, #0
 801360c:	74da      	strb	r2, [r3, #19]
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	2200      	movs	r2, #0
 8013612:	751a      	strb	r2, [r3, #20]
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	2200      	movs	r2, #0
 8013618:	755a      	strb	r2, [r3, #21]
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	2200      	movs	r2, #0
 801361e:	759a      	strb	r2, [r3, #22]
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	2200      	movs	r2, #0
 8013624:	75da      	strb	r2, [r3, #23]
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	2200      	movs	r2, #0
 801362a:	761a      	strb	r2, [r3, #24]
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	2201      	movs	r2, #1
 8013630:	61da      	str	r2, [r3, #28]
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	2200      	movs	r2, #0
 8013636:	621a      	str	r2, [r3, #32]
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	2200      	movs	r2, #0
 801363c:	625a      	str	r2, [r3, #36]	; 0x24
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	2200      	movs	r2, #0
 8013642:	629a      	str	r2, [r3, #40]	; 0x28
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	2200      	movs	r2, #0
 8013648:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	3330      	adds	r3, #48	; 0x30
 8013650:	4905      	ldr	r1, [pc, #20]	; (8013668 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa8>)
 8013652:	4618      	mov	r0, r3
 8013654:	f7f7 ff61 	bl	800b51a <_ZN12SimpleStringC1EPKc>
{
}
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	4618      	mov	r0, r3
 801365c:	3710      	adds	r7, #16
 801365e:	46bd      	mov	sp, r7
 8013660:	bd80      	pop	{r7, pc}
 8013662:	bf00      	nop
 8013664:	08026a78 	.word	0x08026a78
 8013668:	08023778 	.word	0x08023778

0801366c <_ZN10TestFilterD1Ev>:
#ifndef TESTFILTER_H_
#define TESTFILTER_H_

#include "SimpleString.h"

class TestFilter
 801366c:	b580      	push	{r7, lr}
 801366e:	b082      	sub	sp, #8
 8013670:	af00      	add	r7, sp, #0
 8013672:	6078      	str	r0, [r7, #4]
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	4618      	mov	r0, r3
 8013678:	f7f8 fb07 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	4618      	mov	r0, r3
 8013680:	3708      	adds	r7, #8
 8013682:	46bd      	mov	sp, r7
 8013684:	bd80      	pop	{r7, pc}
	...

08013688 <_ZN20CommandLineArgumentsD1Ev>:

CommandLineArguments::~CommandLineArguments()
 8013688:	b590      	push	{r4, r7, lr}
 801368a:	b085      	sub	sp, #20
 801368c:	af00      	add	r7, sp, #0
 801368e:	6078      	str	r0, [r7, #4]
 8013690:	4a20      	ldr	r2, [pc, #128]	; (8013714 <_ZN20CommandLineArgumentsD1Ev+0x8c>)
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	601a      	str	r2, [r3, #0]
{
    while(groupFilters_) {
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801369a:	2b00      	cmp	r3, #0
 801369c:	d015      	beq.n	80136ca <_ZN20CommandLineArgumentsD1Ev+0x42>
        TestFilter* current = groupFilters_;
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136a2:	60fb      	str	r3, [r7, #12]
        groupFilters_ = groupFilters_->getNext();
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136a8:	4618      	mov	r0, r3
 80136aa:	f00a fda2 	bl	801e1f2 <_ZNK10TestFilter7getNextEv>
 80136ae:	4602      	mov	r2, r0
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	625a      	str	r2, [r3, #36]	; 0x24
        delete current;
 80136b4:	68fc      	ldr	r4, [r7, #12]
 80136b6:	2c00      	cmp	r4, #0
 80136b8:	d0ed      	beq.n	8013696 <_ZN20CommandLineArgumentsD1Ev+0xe>
 80136ba:	4620      	mov	r0, r4
 80136bc:	f7ff ffd6 	bl	801366c <_ZN10TestFilterD1Ev>
 80136c0:	2110      	movs	r1, #16
 80136c2:	4620      	mov	r0, r4
 80136c4:	f7f5 fb7a 	bl	8008dbc <_ZdlPvj>
    while(groupFilters_) {
 80136c8:	e7e5      	b.n	8013696 <_ZN20CommandLineArgumentsD1Ev+0xe>
    }
    while(nameFilters_) {
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d015      	beq.n	80136fe <_ZN20CommandLineArgumentsD1Ev+0x76>
        TestFilter* current = nameFilters_;
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80136d6:	60bb      	str	r3, [r7, #8]
        nameFilters_ = nameFilters_->getNext();
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80136dc:	4618      	mov	r0, r3
 80136de:	f00a fd88 	bl	801e1f2 <_ZNK10TestFilter7getNextEv>
 80136e2:	4602      	mov	r2, r0
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	629a      	str	r2, [r3, #40]	; 0x28
        delete current;
 80136e8:	68bc      	ldr	r4, [r7, #8]
 80136ea:	2c00      	cmp	r4, #0
 80136ec:	d0ed      	beq.n	80136ca <_ZN20CommandLineArgumentsD1Ev+0x42>
 80136ee:	4620      	mov	r0, r4
 80136f0:	f7ff ffbc 	bl	801366c <_ZN10TestFilterD1Ev>
 80136f4:	2110      	movs	r1, #16
 80136f6:	4620      	mov	r0, r4
 80136f8:	f7f5 fb60 	bl	8008dbc <_ZdlPvj>
    while(nameFilters_) {
 80136fc:	e7e5      	b.n	80136ca <_ZN20CommandLineArgumentsD1Ev+0x42>
CommandLineArguments::~CommandLineArguments()
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	3330      	adds	r3, #48	; 0x30
 8013702:	4618      	mov	r0, r3
 8013704:	f7f8 fac1 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    }
}
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	4618      	mov	r0, r3
 801370c:	3714      	adds	r7, #20
 801370e:	46bd      	mov	sp, r7
 8013710:	bd90      	pop	{r4, r7, pc}
 8013712:	bf00      	nop
 8013714:	08026a78 	.word	0x08026a78

08013718 <_ZN20CommandLineArgumentsD0Ev>:
CommandLineArguments::~CommandLineArguments()
 8013718:	b580      	push	{r7, lr}
 801371a:	b082      	sub	sp, #8
 801371c:	af00      	add	r7, sp, #0
 801371e:	6078      	str	r0, [r7, #4]
}
 8013720:	6878      	ldr	r0, [r7, #4]
 8013722:	f7ff ffb1 	bl	8013688 <_ZN20CommandLineArgumentsD1Ev>
 8013726:	2138      	movs	r1, #56	; 0x38
 8013728:	6878      	ldr	r0, [r7, #4]
 801372a:	f7f5 fb47 	bl	8008dbc <_ZdlPvj>
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	4618      	mov	r0, r3
 8013732:	3708      	adds	r7, #8
 8013734:	46bd      	mov	sp, r7
 8013736:	bd80      	pop	{r7, pc}

08013738 <_ZN20CommandLineArguments5parseEP10TestPlugin>:

bool CommandLineArguments::parse(TestPlugin* plugin)
{
 8013738:	b5b0      	push	{r4, r5, r7, lr}
 801373a:	b0be      	sub	sp, #248	; 0xf8
 801373c:	af02      	add	r7, sp, #8
 801373e:	6078      	str	r0, [r7, #4]
 8013740:	6039      	str	r1, [r7, #0]
 8013742:	2400      	movs	r4, #0
    bool correctParameters = true;
 8013744:	2301      	movs	r3, #1
 8013746:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    for (int i = 1; i < ac_; i++) {
 801374a:	2301      	movs	r3, #1
 801374c:	613b      	str	r3, [r7, #16]
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	685a      	ldr	r2, [r3, #4]
 8013752:	693b      	ldr	r3, [r7, #16]
 8013754:	429a      	cmp	r2, r3
 8013756:	f340 83a4 	ble.w	8013ea2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76a>
        SimpleString argument = av_[i];
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	689a      	ldr	r2, [r3, #8]
 801375e:	693b      	ldr	r3, [r7, #16]
 8013760:	009b      	lsls	r3, r3, #2
 8013762:	4413      	add	r3, r2
 8013764:	681a      	ldr	r2, [r3, #0]
 8013766:	f107 0308 	add.w	r3, r7, #8
 801376a:	4611      	mov	r1, r2
 801376c:	4618      	mov	r0, r3
 801376e:	f7f7 fed4 	bl	800b51a <_ZN12SimpleStringC1EPKc>

        if (argument == "-h") {
 8013772:	f107 0314 	add.w	r3, r7, #20
 8013776:	49c8      	ldr	r1, [pc, #800]	; (8013a98 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x360>)
 8013778:	4618      	mov	r0, r3
 801377a:	f7f7 fece 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801377e:	f107 0214 	add.w	r2, r7, #20
 8013782:	f107 0308 	add.w	r3, r7, #8
 8013786:	4611      	mov	r1, r2
 8013788:	4618      	mov	r0, r3
 801378a:	f7f8 fa8a 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801378e:	4603      	mov	r3, r0
 8013790:	461d      	mov	r5, r3
 8013792:	f107 0314 	add.w	r3, r7, #20
 8013796:	4618      	mov	r0, r3
 8013798:	f7f8 fa77 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801379c:	2d00      	cmp	r5, #0
 801379e:	d006      	beq.n	80137ae <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76>
            needHelp_ = true;
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	2201      	movs	r2, #1
 80137a4:	731a      	strb	r2, [r3, #12]
            correctParameters = false;
 80137a6:	2300      	movs	r3, #0
 80137a8:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80137ac:	e366      	b.n	8013e7c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        }
        else if (argument == "-v") verbose_ = true;
 80137ae:	f107 031c 	add.w	r3, r7, #28
 80137b2:	49ba      	ldr	r1, [pc, #744]	; (8013a9c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x364>)
 80137b4:	4618      	mov	r0, r3
 80137b6:	f7f7 feb0 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80137ba:	f107 021c 	add.w	r2, r7, #28
 80137be:	f107 0308 	add.w	r3, r7, #8
 80137c2:	4611      	mov	r1, r2
 80137c4:	4618      	mov	r0, r3
 80137c6:	f7f8 fa6c 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 80137ca:	4603      	mov	r3, r0
 80137cc:	461d      	mov	r5, r3
 80137ce:	f107 031c 	add.w	r3, r7, #28
 80137d2:	4618      	mov	r0, r3
 80137d4:	f7f8 fa59 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 80137d8:	2d00      	cmp	r5, #0
 80137da:	d003      	beq.n	80137e4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xac>
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	2201      	movs	r2, #1
 80137e0:	735a      	strb	r2, [r3, #13]
 80137e2:	e34b      	b.n	8013e7c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-vv") veryVerbose_ = true;
 80137e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80137e8:	49ad      	ldr	r1, [pc, #692]	; (8013aa0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x368>)
 80137ea:	4618      	mov	r0, r3
 80137ec:	f7f7 fe95 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80137f0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80137f4:	f107 0308 	add.w	r3, r7, #8
 80137f8:	4611      	mov	r1, r2
 80137fa:	4618      	mov	r0, r3
 80137fc:	f7f8 fa51 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 8013800:	4603      	mov	r3, r0
 8013802:	461d      	mov	r5, r3
 8013804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013808:	4618      	mov	r0, r3
 801380a:	f7f8 fa3e 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801380e:	2d00      	cmp	r5, #0
 8013810:	d003      	beq.n	801381a <_ZN20CommandLineArguments5parseEP10TestPlugin+0xe2>
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	2201      	movs	r2, #1
 8013816:	739a      	strb	r2, [r3, #14]
 8013818:	e330      	b.n	8013e7c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-c") color_ = true;
 801381a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801381e:	49a1      	ldr	r1, [pc, #644]	; (8013aa4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x36c>)
 8013820:	4618      	mov	r0, r3
 8013822:	f7f7 fe7a 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8013826:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801382a:	f107 0308 	add.w	r3, r7, #8
 801382e:	4611      	mov	r1, r2
 8013830:	4618      	mov	r0, r3
 8013832:	f7f8 fa36 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 8013836:	4603      	mov	r3, r0
 8013838:	461d      	mov	r5, r3
 801383a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801383e:	4618      	mov	r0, r3
 8013840:	f7f8 fa23 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8013844:	2d00      	cmp	r5, #0
 8013846:	d003      	beq.n	8013850 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x118>
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	2201      	movs	r2, #1
 801384c:	73da      	strb	r2, [r3, #15]
 801384e:	e315      	b.n	8013e7c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-p") runTestsAsSeperateProcess_ = true;
 8013850:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013854:	4994      	ldr	r1, [pc, #592]	; (8013aa8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x370>)
 8013856:	4618      	mov	r0, r3
 8013858:	f7f7 fe5f 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801385c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8013860:	f107 0308 	add.w	r3, r7, #8
 8013864:	4611      	mov	r1, r2
 8013866:	4618      	mov	r0, r3
 8013868:	f7f8 fa1b 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801386c:	4603      	mov	r3, r0
 801386e:	461d      	mov	r5, r3
 8013870:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013874:	4618      	mov	r0, r3
 8013876:	f7f8 fa08 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801387a:	2d00      	cmp	r5, #0
 801387c:	d003      	beq.n	8013886 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x14e>
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	2201      	movs	r2, #1
 8013882:	741a      	strb	r2, [r3, #16]
 8013884:	e2fa      	b.n	8013e7c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-b") reversing_ = true;
 8013886:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801388a:	4988      	ldr	r1, [pc, #544]	; (8013aac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x374>)
 801388c:	4618      	mov	r0, r3
 801388e:	f7f7 fe44 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8013892:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8013896:	f107 0308 	add.w	r3, r7, #8
 801389a:	4611      	mov	r1, r2
 801389c:	4618      	mov	r0, r3
 801389e:	f7f8 fa00 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 80138a2:	4603      	mov	r3, r0
 80138a4:	461d      	mov	r5, r3
 80138a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80138aa:	4618      	mov	r0, r3
 80138ac:	f7f8 f9ed 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 80138b0:	2d00      	cmp	r5, #0
 80138b2:	d003      	beq.n	80138bc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x184>
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	2201      	movs	r2, #1
 80138b8:	755a      	strb	r2, [r3, #21]
 80138ba:	e2df      	b.n	8013e7c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-lg") listTestGroupNames_ = true;
 80138bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80138c0:	497b      	ldr	r1, [pc, #492]	; (8013ab0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x378>)
 80138c2:	4618      	mov	r0, r3
 80138c4:	f7f7 fe29 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80138c8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80138cc:	f107 0308 	add.w	r3, r7, #8
 80138d0:	4611      	mov	r1, r2
 80138d2:	4618      	mov	r0, r3
 80138d4:	f7f8 f9e5 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 80138d8:	4603      	mov	r3, r0
 80138da:	461d      	mov	r5, r3
 80138dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80138e0:	4618      	mov	r0, r3
 80138e2:	f7f8 f9d2 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 80138e6:	2d00      	cmp	r5, #0
 80138e8:	d003      	beq.n	80138f2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1ba>
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	2201      	movs	r2, #1
 80138ee:	745a      	strb	r2, [r3, #17]
 80138f0:	e2c4      	b.n	8013e7c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ln") listTestGroupAndCaseNames_ = true;
 80138f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80138f6:	496f      	ldr	r1, [pc, #444]	; (8013ab4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x37c>)
 80138f8:	4618      	mov	r0, r3
 80138fa:	f7f7 fe0e 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80138fe:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8013902:	f107 0308 	add.w	r3, r7, #8
 8013906:	4611      	mov	r1, r2
 8013908:	4618      	mov	r0, r3
 801390a:	f7f8 f9ca 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801390e:	4603      	mov	r3, r0
 8013910:	461d      	mov	r5, r3
 8013912:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013916:	4618      	mov	r0, r3
 8013918:	f7f8 f9b7 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801391c:	2d00      	cmp	r5, #0
 801391e:	d003      	beq.n	8013928 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1f0>
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	2201      	movs	r2, #1
 8013924:	749a      	strb	r2, [r3, #18]
 8013926:	e2a9      	b.n	8013e7c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ll") listTestLocations_ = true;
 8013928:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801392c:	4962      	ldr	r1, [pc, #392]	; (8013ab8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x380>)
 801392e:	4618      	mov	r0, r3
 8013930:	f7f7 fdf3 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8013934:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8013938:	f107 0308 	add.w	r3, r7, #8
 801393c:	4611      	mov	r1, r2
 801393e:	4618      	mov	r0, r3
 8013940:	f7f8 f9af 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 8013944:	4603      	mov	r3, r0
 8013946:	461d      	mov	r5, r3
 8013948:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801394c:	4618      	mov	r0, r3
 801394e:	f7f8 f99c 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8013952:	2d00      	cmp	r5, #0
 8013954:	d003      	beq.n	801395e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x226>
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	2201      	movs	r2, #1
 801395a:	74da      	strb	r2, [r3, #19]
 801395c:	e28e      	b.n	8013e7c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ri") runIgnored_ = true;
 801395e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013962:	4956      	ldr	r1, [pc, #344]	; (8013abc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x384>)
 8013964:	4618      	mov	r0, r3
 8013966:	f7f7 fdd8 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801396a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 801396e:	f107 0308 	add.w	r3, r7, #8
 8013972:	4611      	mov	r1, r2
 8013974:	4618      	mov	r0, r3
 8013976:	f7f8 f994 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801397a:	4603      	mov	r3, r0
 801397c:	461d      	mov	r5, r3
 801397e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013982:	4618      	mov	r0, r3
 8013984:	f7f8 f981 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8013988:	2d00      	cmp	r5, #0
 801398a:	d003      	beq.n	8013994 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x25c>
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	2201      	movs	r2, #1
 8013990:	751a      	strb	r2, [r3, #20]
 8013992:	e273      	b.n	8013e7c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-f") crashOnFail_ = true;
 8013994:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013998:	4949      	ldr	r1, [pc, #292]	; (8013ac0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x388>)
 801399a:	4618      	mov	r0, r3
 801399c:	f7f7 fdbd 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80139a0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80139a4:	f107 0308 	add.w	r3, r7, #8
 80139a8:	4611      	mov	r1, r2
 80139aa:	4618      	mov	r0, r3
 80139ac:	f7f8 f979 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 80139b0:	4603      	mov	r3, r0
 80139b2:	461d      	mov	r5, r3
 80139b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80139b8:	4618      	mov	r0, r3
 80139ba:	f7f8 f966 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 80139be:	2d00      	cmp	r5, #0
 80139c0:	d003      	beq.n	80139ca <_ZN20CommandLineArguments5parseEP10TestPlugin+0x292>
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	2201      	movs	r2, #1
 80139c6:	759a      	strb	r2, [r3, #22]
 80139c8:	e258      	b.n	8013e7c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-r")) setRepeatCount(ac_, av_, i);
 80139ca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80139ce:	493d      	ldr	r1, [pc, #244]	; (8013ac4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x38c>)
 80139d0:	4618      	mov	r0, r3
 80139d2:	f7f7 fda2 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80139d6:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80139da:	f107 0308 	add.w	r3, r7, #8
 80139de:	4611      	mov	r1, r2
 80139e0:	4618      	mov	r0, r3
 80139e2:	f7f7 fe5e 	bl	800b6a2 <_ZNK12SimpleString10startsWithERKS_>
 80139e6:	4603      	mov	r3, r0
 80139e8:	461d      	mov	r5, r3
 80139ea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80139ee:	4618      	mov	r0, r3
 80139f0:	f7f8 f94b 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 80139f4:	2d00      	cmp	r5, #0
 80139f6:	d009      	beq.n	8013a0c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x2d4>
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	6859      	ldr	r1, [r3, #4]
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	689a      	ldr	r2, [r3, #8]
 8013a00:	f107 0310 	add.w	r3, r7, #16
 8013a04:	6878      	ldr	r0, [r7, #4]
 8013a06:	f000 fb33 	bl	8014070 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>
 8013a0a:	e237      	b.n	8013e7c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-g")) addGroupFilter(ac_, av_, i);
 8013a0c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8013a10:	492d      	ldr	r1, [pc, #180]	; (8013ac8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x390>)
 8013a12:	4618      	mov	r0, r3
 8013a14:	f7f7 fd81 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8013a18:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8013a1c:	f107 0308 	add.w	r3, r7, #8
 8013a20:	4611      	mov	r1, r2
 8013a22:	4618      	mov	r0, r3
 8013a24:	f7f7 fe3d 	bl	800b6a2 <_ZNK12SimpleString10startsWithERKS_>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	461d      	mov	r5, r3
 8013a2c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8013a30:	4618      	mov	r0, r3
 8013a32:	f7f8 f92a 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8013a36:	2d00      	cmp	r5, #0
 8013a38:	d009      	beq.n	8013a4e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x316>
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	6859      	ldr	r1, [r3, #4]
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	689a      	ldr	r2, [r3, #8]
 8013a42:	f107 0310 	add.w	r3, r7, #16
 8013a46:	6878      	ldr	r0, [r7, #4]
 8013a48:	f000 fc40 	bl	80142cc <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>
 8013a4c:	e216      	b.n	8013e7c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-t")) correctParameters = addGroupDotNameFilter(ac_, av_, i);
 8013a4e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8013a52:	491e      	ldr	r1, [pc, #120]	; (8013acc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x394>)
 8013a54:	4618      	mov	r0, r3
 8013a56:	f7f7 fd60 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8013a5a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8013a5e:	f107 0308 	add.w	r3, r7, #8
 8013a62:	4611      	mov	r1, r2
 8013a64:	4618      	mov	r0, r3
 8013a66:	f7f7 fe1c 	bl	800b6a2 <_ZNK12SimpleString10startsWithERKS_>
 8013a6a:	4603      	mov	r3, r0
 8013a6c:	461d      	mov	r5, r3
 8013a6e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8013a72:	4618      	mov	r0, r3
 8013a74:	f7f8 f909 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8013a78:	2d00      	cmp	r5, #0
 8013a7a:	d029      	beq.n	8013ad0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x398>
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	6859      	ldr	r1, [r3, #4]
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	689a      	ldr	r2, [r3, #8]
 8013a84:	f107 0310 	add.w	r3, r7, #16
 8013a88:	6878      	ldr	r0, [r7, #4]
 8013a8a:	f000 fc61 	bl	8014350 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>
 8013a8e:	4603      	mov	r3, r0
 8013a90:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8013a94:	e1f2      	b.n	8013e7c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 8013a96:	bf00      	nop
 8013a98:	0802377c 	.word	0x0802377c
 8013a9c:	08023780 	.word	0x08023780
 8013aa0:	08023784 	.word	0x08023784
 8013aa4:	08023788 	.word	0x08023788
 8013aa8:	0802378c 	.word	0x0802378c
 8013aac:	08023790 	.word	0x08023790
 8013ab0:	08023794 	.word	0x08023794
 8013ab4:	08023798 	.word	0x08023798
 8013ab8:	0802379c 	.word	0x0802379c
 8013abc:	080237a0 	.word	0x080237a0
 8013ac0:	080237a4 	.word	0x080237a4
 8013ac4:	080237a8 	.word	0x080237a8
 8013ac8:	080237ac 	.word	0x080237ac
 8013acc:	080237b0 	.word	0x080237b0
        else if (argument.startsWith("-sg")) addStrictGroupFilter(ac_, av_, i);
 8013ad0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8013ad4:	49b9      	ldr	r1, [pc, #740]	; (8013dbc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x684>)
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	f7f7 fd1f 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8013adc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8013ae0:	f107 0308 	add.w	r3, r7, #8
 8013ae4:	4611      	mov	r1, r2
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	f7f7 fddb 	bl	800b6a2 <_ZNK12SimpleString10startsWithERKS_>
 8013aec:	4603      	mov	r3, r0
 8013aee:	461d      	mov	r5, r3
 8013af0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8013af4:	4618      	mov	r0, r3
 8013af6:	f7f8 f8c8 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8013afa:	2d00      	cmp	r5, #0
 8013afc:	d009      	beq.n	8013b12 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x3da>
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	6859      	ldr	r1, [r3, #4]
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	689a      	ldr	r2, [r3, #8]
 8013b06:	f107 0310 	add.w	r3, r7, #16
 8013b0a:	6878      	ldr	r0, [r7, #4]
 8013b0c:	f000 fccc 	bl	80144a8 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>
 8013b10:	e1b4      	b.n	8013e7c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xg")) addExcludeGroupFilter(ac_, av_, i);
 8013b12:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8013b16:	49aa      	ldr	r1, [pc, #680]	; (8013dc0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x688>)
 8013b18:	4618      	mov	r0, r3
 8013b1a:	f7f7 fcfe 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8013b1e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8013b22:	f107 0308 	add.w	r3, r7, #8
 8013b26:	4611      	mov	r1, r2
 8013b28:	4618      	mov	r0, r3
 8013b2a:	f7f7 fdba 	bl	800b6a2 <_ZNK12SimpleString10startsWithERKS_>
 8013b2e:	4603      	mov	r3, r0
 8013b30:	461d      	mov	r5, r3
 8013b32:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8013b36:	4618      	mov	r0, r3
 8013b38:	f7f8 f8a7 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8013b3c:	2d00      	cmp	r5, #0
 8013b3e:	d009      	beq.n	8013b54 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x41c>
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	6859      	ldr	r1, [r3, #4]
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	689a      	ldr	r2, [r3, #8]
 8013b48:	f107 0310 	add.w	r3, r7, #16
 8013b4c:	6878      	ldr	r0, [r7, #4]
 8013b4e:	f000 fcf1 	bl	8014534 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>
 8013b52:	e193      	b.n	8013e7c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsg")) addExcludeStrictGroupFilter(ac_, av_, i);
 8013b54:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8013b58:	499a      	ldr	r1, [pc, #616]	; (8013dc4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x68c>)
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	f7f7 fcdd 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8013b60:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8013b64:	f107 0308 	add.w	r3, r7, #8
 8013b68:	4611      	mov	r1, r2
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	f7f7 fd99 	bl	800b6a2 <_ZNK12SimpleString10startsWithERKS_>
 8013b70:	4603      	mov	r3, r0
 8013b72:	461d      	mov	r5, r3
 8013b74:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8013b78:	4618      	mov	r0, r3
 8013b7a:	f7f8 f886 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8013b7e:	2d00      	cmp	r5, #0
 8013b80:	d009      	beq.n	8013b96 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x45e>
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	6859      	ldr	r1, [r3, #4]
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	689a      	ldr	r2, [r3, #8]
 8013b8a:	f107 0310 	add.w	r3, r7, #16
 8013b8e:	6878      	ldr	r0, [r7, #4]
 8013b90:	f000 fd16 	bl	80145c0 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>
 8013b94:	e172      	b.n	8013e7c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-n")) addNameFilter(ac_, av_, i);
 8013b96:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8013b9a:	498b      	ldr	r1, [pc, #556]	; (8013dc8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x690>)
 8013b9c:	4618      	mov	r0, r3
 8013b9e:	f7f7 fcbc 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8013ba2:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8013ba6:	f107 0308 	add.w	r3, r7, #8
 8013baa:	4611      	mov	r1, r2
 8013bac:	4618      	mov	r0, r3
 8013bae:	f7f7 fd78 	bl	800b6a2 <_ZNK12SimpleString10startsWithERKS_>
 8013bb2:	4603      	mov	r3, r0
 8013bb4:	461d      	mov	r5, r3
 8013bb6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8013bba:	4618      	mov	r0, r3
 8013bbc:	f7f8 f865 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8013bc0:	2d00      	cmp	r5, #0
 8013bc2:	d009      	beq.n	8013bd8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4a0>
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	6859      	ldr	r1, [r3, #4]
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	689a      	ldr	r2, [r3, #8]
 8013bcc:	f107 0310 	add.w	r3, r7, #16
 8013bd0:	6878      	ldr	r0, [r7, #4]
 8013bd2:	f000 fd3d 	bl	8014650 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>
 8013bd6:	e151      	b.n	8013e7c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-sn")) addStrictNameFilter(ac_, av_, i);
 8013bd8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8013bdc:	497b      	ldr	r1, [pc, #492]	; (8013dcc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x694>)
 8013bde:	4618      	mov	r0, r3
 8013be0:	f7f7 fc9b 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8013be4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8013be8:	f107 0308 	add.w	r3, r7, #8
 8013bec:	4611      	mov	r1, r2
 8013bee:	4618      	mov	r0, r3
 8013bf0:	f7f7 fd57 	bl	800b6a2 <_ZNK12SimpleString10startsWithERKS_>
 8013bf4:	4603      	mov	r3, r0
 8013bf6:	461d      	mov	r5, r3
 8013bf8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f7f8 f844 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8013c02:	2d00      	cmp	r5, #0
 8013c04:	d009      	beq.n	8013c1a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4e2>
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	6859      	ldr	r1, [r3, #4]
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	689a      	ldr	r2, [r3, #8]
 8013c0e:	f107 0310 	add.w	r3, r7, #16
 8013c12:	6878      	ldr	r0, [r7, #4]
 8013c14:	f000 fd5e 	bl	80146d4 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>
 8013c18:	e130      	b.n	8013e7c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xn")) addExcludeNameFilter(ac_, av_, i);
 8013c1a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013c1e:	496c      	ldr	r1, [pc, #432]	; (8013dd0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x698>)
 8013c20:	4618      	mov	r0, r3
 8013c22:	f7f7 fc7a 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8013c26:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8013c2a:	f107 0308 	add.w	r3, r7, #8
 8013c2e:	4611      	mov	r1, r2
 8013c30:	4618      	mov	r0, r3
 8013c32:	f7f7 fd36 	bl	800b6a2 <_ZNK12SimpleString10startsWithERKS_>
 8013c36:	4603      	mov	r3, r0
 8013c38:	461d      	mov	r5, r3
 8013c3a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013c3e:	4618      	mov	r0, r3
 8013c40:	f7f8 f823 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8013c44:	2d00      	cmp	r5, #0
 8013c46:	d009      	beq.n	8013c5c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x524>
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	6859      	ldr	r1, [r3, #4]
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	689a      	ldr	r2, [r3, #8]
 8013c50:	f107 0310 	add.w	r3, r7, #16
 8013c54:	6878      	ldr	r0, [r7, #4]
 8013c56:	f000 fd83 	bl	8014760 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>
 8013c5a:	e10f      	b.n	8013e7c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsn")) addExcludeStrictNameFilter(ac_, av_, i);
 8013c5c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8013c60:	495c      	ldr	r1, [pc, #368]	; (8013dd4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x69c>)
 8013c62:	4618      	mov	r0, r3
 8013c64:	f7f7 fc59 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8013c68:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8013c6c:	f107 0308 	add.w	r3, r7, #8
 8013c70:	4611      	mov	r1, r2
 8013c72:	4618      	mov	r0, r3
 8013c74:	f7f7 fd15 	bl	800b6a2 <_ZNK12SimpleString10startsWithERKS_>
 8013c78:	4603      	mov	r3, r0
 8013c7a:	461d      	mov	r5, r3
 8013c7c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8013c80:	4618      	mov	r0, r3
 8013c82:	f7f8 f802 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8013c86:	2d00      	cmp	r5, #0
 8013c88:	d009      	beq.n	8013c9e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x566>
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	6859      	ldr	r1, [r3, #4]
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	689a      	ldr	r2, [r3, #8]
 8013c92:	f107 0310 	add.w	r3, r7, #16
 8013c96:	6878      	ldr	r0, [r7, #4]
 8013c98:	f000 fda8 	bl	80147ec <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>
 8013c9c:	e0ee      	b.n	8013e7c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-s")) correctParameters = setShuffle(ac_, av_, i);
 8013c9e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8013ca2:	494d      	ldr	r1, [pc, #308]	; (8013dd8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a0>)
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	f7f7 fc38 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8013caa:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8013cae:	f107 0308 	add.w	r3, r7, #8
 8013cb2:	4611      	mov	r1, r2
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	f7f7 fcf4 	bl	800b6a2 <_ZNK12SimpleString10startsWithERKS_>
 8013cba:	4603      	mov	r3, r0
 8013cbc:	461d      	mov	r5, r3
 8013cbe:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8013cc2:	4618      	mov	r0, r3
 8013cc4:	f7f7 ffe1 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8013cc8:	2d00      	cmp	r5, #0
 8013cca:	d00c      	beq.n	8013ce6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5ae>
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	6859      	ldr	r1, [r3, #4]
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	689a      	ldr	r2, [r3, #8]
 8013cd4:	f107 0310 	add.w	r3, r7, #16
 8013cd8:	6878      	ldr	r0, [r7, #4]
 8013cda:	f000 fa29 	bl	8014130 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>
 8013cde:	4603      	mov	r3, r0
 8013ce0:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8013ce4:	e0ca      	b.n	8013e7c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "TEST(");
 8013ce6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8013cea:	493c      	ldr	r1, [pc, #240]	; (8013ddc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 8013cec:	4618      	mov	r0, r3
 8013cee:	f7f7 fc14 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8013cf2:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8013cf6:	f107 0308 	add.w	r3, r7, #8
 8013cfa:	4611      	mov	r1, r2
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	f7f7 fcd0 	bl	800b6a2 <_ZNK12SimpleString10startsWithERKS_>
 8013d02:	4603      	mov	r3, r0
 8013d04:	461d      	mov	r5, r3
 8013d06:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8013d0a:	4618      	mov	r0, r3
 8013d0c:	f7f7 ffbd 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8013d10:	2d00      	cmp	r5, #0
 8013d12:	d00b      	beq.n	8013d2c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5f4>
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	6859      	ldr	r1, [r3, #4]
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	689a      	ldr	r2, [r3, #8]
 8013d1c:	f107 0310 	add.w	r3, r7, #16
 8013d20:	482e      	ldr	r0, [pc, #184]	; (8013ddc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 8013d22:	9000      	str	r0, [sp, #0]
 8013d24:	6878      	ldr	r0, [r7, #4]
 8013d26:	f000 fda9 	bl	801487c <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 8013d2a:	e0a7      	b.n	8013e7c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("IGNORE_TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "IGNORE_TEST(");
 8013d2c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8013d30:	492b      	ldr	r1, [pc, #172]	; (8013de0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 8013d32:	4618      	mov	r0, r3
 8013d34:	f7f7 fbf1 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8013d38:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8013d3c:	f107 0308 	add.w	r3, r7, #8
 8013d40:	4611      	mov	r1, r2
 8013d42:	4618      	mov	r0, r3
 8013d44:	f7f7 fcad 	bl	800b6a2 <_ZNK12SimpleString10startsWithERKS_>
 8013d48:	4603      	mov	r3, r0
 8013d4a:	461d      	mov	r5, r3
 8013d4c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8013d50:	4618      	mov	r0, r3
 8013d52:	f7f7 ff9a 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8013d56:	2d00      	cmp	r5, #0
 8013d58:	d00b      	beq.n	8013d72 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x63a>
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	6859      	ldr	r1, [r3, #4]
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	689a      	ldr	r2, [r3, #8]
 8013d62:	f107 0310 	add.w	r3, r7, #16
 8013d66:	481e      	ldr	r0, [pc, #120]	; (8013de0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 8013d68:	9000      	str	r0, [sp, #0]
 8013d6a:	6878      	ldr	r0, [r7, #4]
 8013d6c:	f000 fd86 	bl	801487c <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 8013d70:	e084      	b.n	8013e7c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-o")) correctParameters = setOutputType(ac_, av_, i);
 8013d72:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8013d76:	491b      	ldr	r1, [pc, #108]	; (8013de4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6ac>)
 8013d78:	4618      	mov	r0, r3
 8013d7a:	f7f7 fbce 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8013d7e:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8013d82:	f107 0308 	add.w	r3, r7, #8
 8013d86:	4611      	mov	r1, r2
 8013d88:	4618      	mov	r0, r3
 8013d8a:	f7f7 fc8a 	bl	800b6a2 <_ZNK12SimpleString10startsWithERKS_>
 8013d8e:	4603      	mov	r3, r0
 8013d90:	461d      	mov	r5, r3
 8013d92:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8013d96:	4618      	mov	r0, r3
 8013d98:	f7f7 ff77 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8013d9c:	2d00      	cmp	r5, #0
 8013d9e:	d023      	beq.n	8013de8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6b0>
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	6859      	ldr	r1, [r3, #4]
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	689a      	ldr	r2, [r3, #8]
 8013da8:	f107 0310 	add.w	r3, r7, #16
 8013dac:	6878      	ldr	r0, [r7, #4]
 8013dae:	f000 fe3b 	bl	8014a28 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>
 8013db2:	4603      	mov	r3, r0
 8013db4:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8013db8:	e060      	b.n	8013e7c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 8013dba:	bf00      	nop
 8013dbc:	080237b4 	.word	0x080237b4
 8013dc0:	080237b8 	.word	0x080237b8
 8013dc4:	080237bc 	.word	0x080237bc
 8013dc8:	080237c4 	.word	0x080237c4
 8013dcc:	080237c8 	.word	0x080237c8
 8013dd0:	080237cc 	.word	0x080237cc
 8013dd4:	080237d0 	.word	0x080237d0
 8013dd8:	080237d8 	.word	0x080237d8
 8013ddc:	080237dc 	.word	0x080237dc
 8013de0:	080237e4 	.word	0x080237e4
 8013de4:	080237f4 	.word	0x080237f4
        else if (argument.startsWith("-p")) correctParameters = plugin->parseAllArguments(ac_, av_, i);
 8013de8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8013dec:	4930      	ldr	r1, [pc, #192]	; (8013eb0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x778>)
 8013dee:	4618      	mov	r0, r3
 8013df0:	f7f7 fb93 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8013df4:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8013df8:	f107 0308 	add.w	r3, r7, #8
 8013dfc:	4611      	mov	r1, r2
 8013dfe:	4618      	mov	r0, r3
 8013e00:	f7f7 fc4f 	bl	800b6a2 <_ZNK12SimpleString10startsWithERKS_>
 8013e04:	4603      	mov	r3, r0
 8013e06:	461d      	mov	r5, r3
 8013e08:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	f7f7 ff3c 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8013e12:	2d00      	cmp	r5, #0
 8013e14:	d00e      	beq.n	8013e34 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6fc>
 8013e16:	683b      	ldr	r3, [r7, #0]
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	331c      	adds	r3, #28
 8013e1c:	681d      	ldr	r5, [r3, #0]
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	6859      	ldr	r1, [r3, #4]
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	689a      	ldr	r2, [r3, #8]
 8013e26:	693b      	ldr	r3, [r7, #16]
 8013e28:	6838      	ldr	r0, [r7, #0]
 8013e2a:	47a8      	blx	r5
 8013e2c:	4603      	mov	r3, r0
 8013e2e:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8013e32:	e023      	b.n	8013e7c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-k")) setPackageName(ac_, av_, i);
 8013e34:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8013e38:	491e      	ldr	r1, [pc, #120]	; (8013eb4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x77c>)
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	f7f7 fb6d 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8013e40:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8013e44:	f107 0308 	add.w	r3, r7, #8
 8013e48:	4611      	mov	r1, r2
 8013e4a:	4618      	mov	r0, r3
 8013e4c:	f7f7 fc29 	bl	800b6a2 <_ZNK12SimpleString10startsWithERKS_>
 8013e50:	4603      	mov	r3, r0
 8013e52:	461d      	mov	r5, r3
 8013e54:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8013e58:	4618      	mov	r0, r3
 8013e5a:	f7f7 ff16 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8013e5e:	2d00      	cmp	r5, #0
 8013e60:	d009      	beq.n	8013e76 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x73e>
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	6859      	ldr	r1, [r3, #4]
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	689a      	ldr	r2, [r3, #8]
 8013e6a:	f107 0310 	add.w	r3, r7, #16
 8013e6e:	6878      	ldr	r0, [r7, #4]
 8013e70:	f000 fd98 	bl	80149a4 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>
 8013e74:	e002      	b.n	8013e7c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else correctParameters = false;
 8013e76:	2300      	movs	r3, #0
 8013e78:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

        if (correctParameters == false) {
 8013e7c:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d102      	bne.n	8013e8a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x752>
            return false;
 8013e84:	2400      	movs	r4, #0
 8013e86:	2500      	movs	r5, #0
 8013e88:	e000      	b.n	8013e8c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x754>
        SimpleString argument = av_[i];
 8013e8a:	2501      	movs	r5, #1
 8013e8c:	f107 0308 	add.w	r3, r7, #8
 8013e90:	4618      	mov	r0, r3
 8013e92:	f7f7 fefa 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8013e96:	2d01      	cmp	r5, #1
 8013e98:	d104      	bne.n	8013ea4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76c>
    for (int i = 1; i < ac_; i++) {
 8013e9a:	693b      	ldr	r3, [r7, #16]
 8013e9c:	3301      	adds	r3, #1
 8013e9e:	613b      	str	r3, [r7, #16]
 8013ea0:	e455      	b.n	801374e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x16>
        }
    }
    return true;
 8013ea2:	2401      	movs	r4, #1
 8013ea4:	4623      	mov	r3, r4
}
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	37f0      	adds	r7, #240	; 0xf0
 8013eaa:	46bd      	mov	sp, r7
 8013eac:	bdb0      	pop	{r4, r5, r7, pc}
 8013eae:	bf00      	nop
 8013eb0:	0802378c 	.word	0x0802378c
 8013eb4:	080237f8 	.word	0x080237f8

08013eb8 <_ZNK20CommandLineArguments5usageEv>:

const char* CommandLineArguments::usage() const
{
 8013eb8:	b480      	push	{r7}
 8013eba:	b083      	sub	sp, #12
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	6078      	str	r0, [r7, #4]
    return "use -h for more extensive help\n"
           "usage [-h] [-v] [-vv] [-c] [-p] [-lg] [-ln] [-ri] [-r#] [-f]\n"
           "      [-g|sg|xg|xsg groupName]... [-n|sn|xn|xsn testName]... [-t groupName.testName]...\n"
           "      [-b] [-s [randomizerSeed>0]] [\"TEST(groupName, testName)\"]...\n"
           "      [-o{normal, junit, teamcity}] [-k packageName]\n";
 8013ec0:	4b03      	ldr	r3, [pc, #12]	; (8013ed0 <_ZNK20CommandLineArguments5usageEv+0x18>)
}
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	370c      	adds	r7, #12
 8013ec6:	46bd      	mov	sp, r7
 8013ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ecc:	4770      	bx	lr
 8013ece:	bf00      	nop
 8013ed0:	080237fc 	.word	0x080237fc

08013ed4 <_ZNK20CommandLineArguments4helpEv>:

const char* CommandLineArguments::help() const
{
 8013ed4:	b480      	push	{r7}
 8013ed6:	b083      	sub	sp, #12
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]
      "Options that control how the tests are run:\n"
      "  -p               - run tests in a separate process.\n"
      "  -b               - run the tests backwards, reversing the normal way\n"
      "  -s [seed]        - shuffle tests randomly. Seed is optional\n"
      "  -r#              - repeat the tests some number (#) of times, or twice if # is not specified.\n"
      "  -f               - Cause the tests to crash on failure (to allow the test to be debugged if necessary)\n";
 8013edc:	4b03      	ldr	r3, [pc, #12]	; (8013eec <_ZNK20CommandLineArguments4helpEv+0x18>)
}
 8013ede:	4618      	mov	r0, r3
 8013ee0:	370c      	adds	r7, #12
 8013ee2:	46bd      	mov	sp, r7
 8013ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ee8:	4770      	bx	lr
 8013eea:	bf00      	nop
 8013eec:	0802392c 	.word	0x0802392c

08013ef0 <_ZNK20CommandLineArguments8needHelpEv>:

bool CommandLineArguments::needHelp() const
{
 8013ef0:	b480      	push	{r7}
 8013ef2:	b083      	sub	sp, #12
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	6078      	str	r0, [r7, #4]
    return needHelp_;
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	7b1b      	ldrb	r3, [r3, #12]
}
 8013efc:	4618      	mov	r0, r3
 8013efe:	370c      	adds	r7, #12
 8013f00:	46bd      	mov	sp, r7
 8013f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f06:	4770      	bx	lr

08013f08 <_ZNK20CommandLineArguments9isVerboseEv>:

bool CommandLineArguments::isVerbose() const
{
 8013f08:	b480      	push	{r7}
 8013f0a:	b083      	sub	sp, #12
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
    return verbose_;
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	7b5b      	ldrb	r3, [r3, #13]
}
 8013f14:	4618      	mov	r0, r3
 8013f16:	370c      	adds	r7, #12
 8013f18:	46bd      	mov	sp, r7
 8013f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f1e:	4770      	bx	lr

08013f20 <_ZNK20CommandLineArguments13isVeryVerboseEv>:

bool CommandLineArguments::isVeryVerbose() const
{
 8013f20:	b480      	push	{r7}
 8013f22:	b083      	sub	sp, #12
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	6078      	str	r0, [r7, #4]
    return veryVerbose_;
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	7b9b      	ldrb	r3, [r3, #14]
}
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	370c      	adds	r7, #12
 8013f30:	46bd      	mov	sp, r7
 8013f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f36:	4770      	bx	lr

08013f38 <_ZNK20CommandLineArguments7isColorEv>:

bool CommandLineArguments::isColor() const
{
 8013f38:	b480      	push	{r7}
 8013f3a:	b083      	sub	sp, #12
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	6078      	str	r0, [r7, #4]
    return color_;
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	7bdb      	ldrb	r3, [r3, #15]
}
 8013f44:	4618      	mov	r0, r3
 8013f46:	370c      	adds	r7, #12
 8013f48:	46bd      	mov	sp, r7
 8013f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f4e:	4770      	bx	lr

08013f50 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>:

bool CommandLineArguments::isListingTestGroupNames() const
{
 8013f50:	b480      	push	{r7}
 8013f52:	b083      	sub	sp, #12
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	6078      	str	r0, [r7, #4]
    return listTestGroupNames_;
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	7c5b      	ldrb	r3, [r3, #17]
}
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	370c      	adds	r7, #12
 8013f60:	46bd      	mov	sp, r7
 8013f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f66:	4770      	bx	lr

08013f68 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>:

bool CommandLineArguments::isListingTestGroupAndCaseNames() const
{
 8013f68:	b480      	push	{r7}
 8013f6a:	b083      	sub	sp, #12
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	6078      	str	r0, [r7, #4]
    return listTestGroupAndCaseNames_;
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	7c9b      	ldrb	r3, [r3, #18]
}
 8013f74:	4618      	mov	r0, r3
 8013f76:	370c      	adds	r7, #12
 8013f78:	46bd      	mov	sp, r7
 8013f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f7e:	4770      	bx	lr

08013f80 <_ZNK20CommandLineArguments22isListingTestLocationsEv>:

bool CommandLineArguments::isListingTestLocations() const
{
 8013f80:	b480      	push	{r7}
 8013f82:	b083      	sub	sp, #12
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	6078      	str	r0, [r7, #4]
    return listTestLocations_;
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	7cdb      	ldrb	r3, [r3, #19]
}
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	370c      	adds	r7, #12
 8013f90:	46bd      	mov	sp, r7
 8013f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f96:	4770      	bx	lr

08013f98 <_ZNK20CommandLineArguments12isRunIgnoredEv>:

bool CommandLineArguments::isRunIgnored() const
{
 8013f98:	b480      	push	{r7}
 8013f9a:	b083      	sub	sp, #12
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	6078      	str	r0, [r7, #4]
    return runIgnored_;
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	7d1b      	ldrb	r3, [r3, #20]
}
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	370c      	adds	r7, #12
 8013fa8:	46bd      	mov	sp, r7
 8013faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fae:	4770      	bx	lr

08013fb0 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>:

bool CommandLineArguments::runTestsInSeperateProcess() const
{
 8013fb0:	b480      	push	{r7}
 8013fb2:	b083      	sub	sp, #12
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	6078      	str	r0, [r7, #4]
    return runTestsAsSeperateProcess_;
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	7c1b      	ldrb	r3, [r3, #16]
}
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	370c      	adds	r7, #12
 8013fc0:	46bd      	mov	sp, r7
 8013fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc6:	4770      	bx	lr

08013fc8 <_ZNK20CommandLineArguments14getRepeatCountEv>:


size_t CommandLineArguments::getRepeatCount() const
{
 8013fc8:	b480      	push	{r7}
 8013fca:	b083      	sub	sp, #12
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	6078      	str	r0, [r7, #4]
    return repeat_;
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	69db      	ldr	r3, [r3, #28]
}
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	370c      	adds	r7, #12
 8013fd8:	46bd      	mov	sp, r7
 8013fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fde:	4770      	bx	lr

08013fe0 <_ZNK20CommandLineArguments11isReversingEv>:

bool CommandLineArguments::isReversing() const
{
 8013fe0:	b480      	push	{r7}
 8013fe2:	b083      	sub	sp, #12
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	6078      	str	r0, [r7, #4]
    return reversing_;
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	7d5b      	ldrb	r3, [r3, #21]
}
 8013fec:	4618      	mov	r0, r3
 8013fee:	370c      	adds	r7, #12
 8013ff0:	46bd      	mov	sp, r7
 8013ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff6:	4770      	bx	lr

08013ff8 <_ZNK20CommandLineArguments16isCrashingOnFailEv>:

bool CommandLineArguments::isCrashingOnFail() const
{
 8013ff8:	b480      	push	{r7}
 8013ffa:	b083      	sub	sp, #12
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	6078      	str	r0, [r7, #4]
    return crashOnFail_;
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	7d9b      	ldrb	r3, [r3, #22]
}
 8014004:	4618      	mov	r0, r3
 8014006:	370c      	adds	r7, #12
 8014008:	46bd      	mov	sp, r7
 801400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801400e:	4770      	bx	lr

08014010 <_ZNK20CommandLineArguments11isShufflingEv>:

bool CommandLineArguments::isShuffling() const
{
 8014010:	b480      	push	{r7}
 8014012:	b083      	sub	sp, #12
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
    return shuffling_;
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	7ddb      	ldrb	r3, [r3, #23]
}
 801401c:	4618      	mov	r0, r3
 801401e:	370c      	adds	r7, #12
 8014020:	46bd      	mov	sp, r7
 8014022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014026:	4770      	bx	lr

08014028 <_ZNK20CommandLineArguments14getShuffleSeedEv>:

size_t CommandLineArguments::getShuffleSeed() const
{
 8014028:	b480      	push	{r7}
 801402a:	b083      	sub	sp, #12
 801402c:	af00      	add	r7, sp, #0
 801402e:	6078      	str	r0, [r7, #4]
    return shuffleSeed_;
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	6a1b      	ldr	r3, [r3, #32]
}
 8014034:	4618      	mov	r0, r3
 8014036:	370c      	adds	r7, #12
 8014038:	46bd      	mov	sp, r7
 801403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801403e:	4770      	bx	lr

08014040 <_ZNK20CommandLineArguments15getGroupFiltersEv>:

const TestFilter* CommandLineArguments::getGroupFilters() const
{
 8014040:	b480      	push	{r7}
 8014042:	b083      	sub	sp, #12
 8014044:	af00      	add	r7, sp, #0
 8014046:	6078      	str	r0, [r7, #4]
    return groupFilters_;
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 801404c:	4618      	mov	r0, r3
 801404e:	370c      	adds	r7, #12
 8014050:	46bd      	mov	sp, r7
 8014052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014056:	4770      	bx	lr

08014058 <_ZNK20CommandLineArguments14getNameFiltersEv>:

const TestFilter* CommandLineArguments::getNameFilters() const
{
 8014058:	b480      	push	{r7}
 801405a:	b083      	sub	sp, #12
 801405c:	af00      	add	r7, sp, #0
 801405e:	6078      	str	r0, [r7, #4]
    return nameFilters_;
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8014064:	4618      	mov	r0, r3
 8014066:	370c      	adds	r7, #12
 8014068:	46bd      	mov	sp, r7
 801406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801406e:	4770      	bx	lr

08014070 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>:

void CommandLineArguments::setRepeatCount(int ac, const char *const *av, int& i)
{
 8014070:	b580      	push	{r7, lr}
 8014072:	b086      	sub	sp, #24
 8014074:	af00      	add	r7, sp, #0
 8014076:	60f8      	str	r0, [r7, #12]
 8014078:	60b9      	str	r1, [r7, #8]
 801407a:	607a      	str	r2, [r7, #4]
 801407c:	603b      	str	r3, [r7, #0]
    repeat_ = 0;
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	2200      	movs	r2, #0
 8014082:	61da      	str	r2, [r3, #28]

    SimpleString repeatParameter(av[i]);
 8014084:	683b      	ldr	r3, [r7, #0]
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	009b      	lsls	r3, r3, #2
 801408a:	687a      	ldr	r2, [r7, #4]
 801408c:	4413      	add	r3, r2
 801408e:	681a      	ldr	r2, [r3, #0]
 8014090:	f107 0310 	add.w	r3, r7, #16
 8014094:	4611      	mov	r1, r2
 8014096:	4618      	mov	r0, r3
 8014098:	f7f7 fa3f 	bl	800b51a <_ZN12SimpleStringC1EPKc>
    if (repeatParameter.size() > 2) repeat_ = (size_t) (SimpleString::AtoI(av[i] + 2));
 801409c:	f107 0310 	add.w	r3, r7, #16
 80140a0:	4618      	mov	r0, r3
 80140a2:	f7f7 fdd1 	bl	800bc48 <_ZNK12SimpleString4sizeEv>
 80140a6:	4603      	mov	r3, r0
 80140a8:	2b02      	cmp	r3, #2
 80140aa:	bf8c      	ite	hi
 80140ac:	2301      	movhi	r3, #1
 80140ae:	2300      	movls	r3, #0
 80140b0:	b2db      	uxtb	r3, r3
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d00e      	beq.n	80140d4 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x64>
 80140b6:	683b      	ldr	r3, [r7, #0]
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	009b      	lsls	r3, r3, #2
 80140bc:	687a      	ldr	r2, [r7, #4]
 80140be:	4413      	add	r3, r2
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	3302      	adds	r3, #2
 80140c4:	4618      	mov	r0, r3
 80140c6:	f7f7 f824 	bl	800b112 <_ZN12SimpleString4AtoIEPKc>
 80140ca:	4603      	mov	r3, r0
 80140cc:	461a      	mov	r2, r3
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	61da      	str	r2, [r3, #28]
 80140d2:	e01c      	b.n	801410e <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
    else if (i + 1 < ac) {
 80140d4:	683b      	ldr	r3, [r7, #0]
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	3301      	adds	r3, #1
 80140da:	68ba      	ldr	r2, [r7, #8]
 80140dc:	429a      	cmp	r2, r3
 80140de:	dd16      	ble.n	801410e <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
        repeat_ = (size_t) (SimpleString::AtoI(av[i + 1]));
 80140e0:	683b      	ldr	r3, [r7, #0]
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	3301      	adds	r3, #1
 80140e6:	009b      	lsls	r3, r3, #2
 80140e8:	687a      	ldr	r2, [r7, #4]
 80140ea:	4413      	add	r3, r2
 80140ec:	681b      	ldr	r3, [r3, #0]
 80140ee:	4618      	mov	r0, r3
 80140f0:	f7f7 f80f 	bl	800b112 <_ZN12SimpleString4AtoIEPKc>
 80140f4:	4603      	mov	r3, r0
 80140f6:	461a      	mov	r2, r3
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	61da      	str	r2, [r3, #28]
        if (repeat_ != 0) i++;
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	69db      	ldr	r3, [r3, #28]
 8014100:	2b00      	cmp	r3, #0
 8014102:	d004      	beq.n	801410e <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
 8014104:	683b      	ldr	r3, [r7, #0]
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	1c5a      	adds	r2, r3, #1
 801410a:	683b      	ldr	r3, [r7, #0]
 801410c:	601a      	str	r2, [r3, #0]
    }

    if (0 == repeat_) repeat_ = 2;
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	69db      	ldr	r3, [r3, #28]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d102      	bne.n	801411c <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0xac>
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	2202      	movs	r2, #2
 801411a:	61da      	str	r2, [r3, #28]
    SimpleString repeatParameter(av[i]);
 801411c:	f107 0310 	add.w	r3, r7, #16
 8014120:	4618      	mov	r0, r3
 8014122:	f7f7 fdb2 	bl	800bc8a <_ZN12SimpleStringD1Ev>

}
 8014126:	bf00      	nop
 8014128:	3718      	adds	r7, #24
 801412a:	46bd      	mov	sp, r7
 801412c:	bd80      	pop	{r7, pc}
	...

08014130 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>:

bool CommandLineArguments::setShuffle(int ac, const char * const *av, int& i)
{
 8014130:	b590      	push	{r4, r7, lr}
 8014132:	b089      	sub	sp, #36	; 0x24
 8014134:	af00      	add	r7, sp, #0
 8014136:	60f8      	str	r0, [r7, #12]
 8014138:	60b9      	str	r1, [r7, #8]
 801413a:	607a      	str	r2, [r7, #4]
 801413c:	603b      	str	r3, [r7, #0]
    shuffling_ = true;
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	2201      	movs	r2, #1
 8014142:	75da      	strb	r2, [r3, #23]
    shuffleSeed_ = (unsigned int)GetPlatformSpecificTimeInMillis();
 8014144:	4b34      	ldr	r3, [pc, #208]	; (8014218 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xe8>)
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	4798      	blx	r3
 801414a:	4603      	mov	r3, r0
 801414c:	461a      	mov	r2, r3
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	621a      	str	r2, [r3, #32]
    if (shuffleSeed_ == 0) shuffleSeed_++;
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	6a1b      	ldr	r3, [r3, #32]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d104      	bne.n	8014164 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x34>
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	6a1b      	ldr	r3, [r3, #32]
 801415e:	1c5a      	adds	r2, r3, #1
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	621a      	str	r2, [r3, #32]

    SimpleString shuffleParameter = av[i];
 8014164:	683b      	ldr	r3, [r7, #0]
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	009b      	lsls	r3, r3, #2
 801416a:	687a      	ldr	r2, [r7, #4]
 801416c:	4413      	add	r3, r2
 801416e:	681a      	ldr	r2, [r3, #0]
 8014170:	f107 0314 	add.w	r3, r7, #20
 8014174:	4611      	mov	r1, r2
 8014176:	4618      	mov	r0, r3
 8014178:	f7f7 f9cf 	bl	800b51a <_ZN12SimpleStringC1EPKc>
    if (shuffleParameter.size() > 2) {
 801417c:	f107 0314 	add.w	r3, r7, #20
 8014180:	4618      	mov	r0, r3
 8014182:	f7f7 fd61 	bl	800bc48 <_ZNK12SimpleString4sizeEv>
 8014186:	4603      	mov	r3, r0
 8014188:	2b02      	cmp	r3, #2
 801418a:	bf8c      	ite	hi
 801418c:	2301      	movhi	r3, #1
 801418e:	2300      	movls	r3, #0
 8014190:	b2db      	uxtb	r3, r3
 8014192:	2b00      	cmp	r3, #0
 8014194:	d010      	beq.n	80141b8 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x88>
        shufflingPreSeeded_ = true;
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	2201      	movs	r2, #1
 801419a:	761a      	strb	r2, [r3, #24]
        shuffleSeed_ = SimpleString::AtoU(av[i] + 2);
 801419c:	683b      	ldr	r3, [r7, #0]
 801419e:	681b      	ldr	r3, [r3, #0]
 80141a0:	009b      	lsls	r3, r3, #2
 80141a2:	687a      	ldr	r2, [r7, #4]
 80141a4:	4413      	add	r3, r2
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	3302      	adds	r3, #2
 80141aa:	4618      	mov	r0, r3
 80141ac:	f7f6 ff78 	bl	800b0a0 <_ZN12SimpleString4AtoUEPKc>
 80141b0:	4602      	mov	r2, r0
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	621a      	str	r2, [r3, #32]
 80141b6:	e01e      	b.n	80141f6 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
    } else if (i + 1 < ac) {
 80141b8:	683b      	ldr	r3, [r7, #0]
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	3301      	adds	r3, #1
 80141be:	68ba      	ldr	r2, [r7, #8]
 80141c0:	429a      	cmp	r2, r3
 80141c2:	dd18      	ble.n	80141f6 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        unsigned int parsedParameter = SimpleString::AtoU(av[i + 1]);
 80141c4:	683b      	ldr	r3, [r7, #0]
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	3301      	adds	r3, #1
 80141ca:	009b      	lsls	r3, r3, #2
 80141cc:	687a      	ldr	r2, [r7, #4]
 80141ce:	4413      	add	r3, r2
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	4618      	mov	r0, r3
 80141d4:	f7f6 ff64 	bl	800b0a0 <_ZN12SimpleString4AtoUEPKc>
 80141d8:	61f8      	str	r0, [r7, #28]
        if (parsedParameter != 0)
 80141da:	69fb      	ldr	r3, [r7, #28]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d00a      	beq.n	80141f6 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        {
            shufflingPreSeeded_ = true;
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	2201      	movs	r2, #1
 80141e4:	761a      	strb	r2, [r3, #24]
            shuffleSeed_ = parsedParameter;
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	69fa      	ldr	r2, [r7, #28]
 80141ea:	621a      	str	r2, [r3, #32]
            i++;
 80141ec:	683b      	ldr	r3, [r7, #0]
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	1c5a      	adds	r2, r3, #1
 80141f2:	683b      	ldr	r3, [r7, #0]
 80141f4:	601a      	str	r2, [r3, #0]
        }
    }
    return (shuffleSeed_ != 0);
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	6a1b      	ldr	r3, [r3, #32]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	bf14      	ite	ne
 80141fe:	2301      	movne	r3, #1
 8014200:	2300      	moveq	r3, #0
 8014202:	b2dc      	uxtb	r4, r3
    SimpleString shuffleParameter = av[i];
 8014204:	f107 0314 	add.w	r3, r7, #20
 8014208:	4618      	mov	r0, r3
 801420a:	f7f7 fd3e 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    return (shuffleSeed_ != 0);
 801420e:	4623      	mov	r3, r4
}
 8014210:	4618      	mov	r0, r3
 8014212:	3724      	adds	r7, #36	; 0x24
 8014214:	46bd      	mov	sp, r7
 8014216:	bd90      	pop	{r4, r7, pc}
 8014218:	200000a8 	.word	0x200000a8

0801421c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>:

SimpleString CommandLineArguments::getParameterField(int ac, const char * const *av, int& i, const SimpleString& parameterName)
{
 801421c:	b580      	push	{r7, lr}
 801421e:	b088      	sub	sp, #32
 8014220:	af00      	add	r7, sp, #0
 8014222:	60f8      	str	r0, [r7, #12]
 8014224:	60b9      	str	r1, [r7, #8]
 8014226:	607a      	str	r2, [r7, #4]
 8014228:	603b      	str	r3, [r7, #0]
    size_t parameterLength = parameterName.size();
 801422a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801422c:	f7f7 fd0c 	bl	800bc48 <_ZNK12SimpleString4sizeEv>
 8014230:	61f8      	str	r0, [r7, #28]
    SimpleString parameter(av[i]);
 8014232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	009b      	lsls	r3, r3, #2
 8014238:	683a      	ldr	r2, [r7, #0]
 801423a:	4413      	add	r3, r2
 801423c:	681a      	ldr	r2, [r3, #0]
 801423e:	f107 0314 	add.w	r3, r7, #20
 8014242:	4611      	mov	r1, r2
 8014244:	4618      	mov	r0, r3
 8014246:	f7f7 f968 	bl	800b51a <_ZN12SimpleStringC1EPKc>
    if (parameter.size() >  parameterLength) return av[i] + parameterLength;
 801424a:	f107 0314 	add.w	r3, r7, #20
 801424e:	4618      	mov	r0, r3
 8014250:	f7f7 fcfa 	bl	800bc48 <_ZNK12SimpleString4sizeEv>
 8014254:	4602      	mov	r2, r0
 8014256:	69fb      	ldr	r3, [r7, #28]
 8014258:	4293      	cmp	r3, r2
 801425a:	bf34      	ite	cc
 801425c:	2301      	movcc	r3, #1
 801425e:	2300      	movcs	r3, #0
 8014260:	b2db      	uxtb	r3, r3
 8014262:	2b00      	cmp	r3, #0
 8014264:	d00c      	beq.n	8014280 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x64>
 8014266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	009b      	lsls	r3, r3, #2
 801426c:	683a      	ldr	r2, [r7, #0]
 801426e:	4413      	add	r3, r2
 8014270:	681a      	ldr	r2, [r3, #0]
 8014272:	69fb      	ldr	r3, [r7, #28]
 8014274:	4413      	add	r3, r2
 8014276:	4619      	mov	r1, r3
 8014278:	68f8      	ldr	r0, [r7, #12]
 801427a:	f7f7 f94e 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801427e:	e019      	b.n	80142b4 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    else if (i + 1 < ac) return av[++i];
 8014280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	3301      	adds	r3, #1
 8014286:	687a      	ldr	r2, [r7, #4]
 8014288:	429a      	cmp	r2, r3
 801428a:	dd0f      	ble.n	80142ac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x90>
 801428c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	1c5a      	adds	r2, r3, #1
 8014292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014294:	601a      	str	r2, [r3, #0]
 8014296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	009b      	lsls	r3, r3, #2
 801429c:	683a      	ldr	r2, [r7, #0]
 801429e:	4413      	add	r3, r2
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	4619      	mov	r1, r3
 80142a4:	68f8      	ldr	r0, [r7, #12]
 80142a6:	f7f7 f938 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80142aa:	e003      	b.n	80142b4 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    return "";
 80142ac:	4906      	ldr	r1, [pc, #24]	; (80142c8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0xac>)
 80142ae:	68f8      	ldr	r0, [r7, #12]
 80142b0:	f7f7 f933 	bl	800b51a <_ZN12SimpleStringC1EPKc>
    SimpleString parameter(av[i]);
 80142b4:	f107 0314 	add.w	r3, r7, #20
 80142b8:	4618      	mov	r0, r3
 80142ba:	f7f7 fce6 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 80142be:	68f8      	ldr	r0, [r7, #12]
 80142c0:	3720      	adds	r7, #32
 80142c2:	46bd      	mov	sp, r7
 80142c4:	bd80      	pop	{r7, pc}
 80142c6:	bf00      	nop
 80142c8:	08023778 	.word	0x08023778

080142cc <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>:

void CommandLineArguments::addGroupFilter(int ac, const char *const *av, int& i)
{
 80142cc:	b5b0      	push	{r4, r5, r7, lr}
 80142ce:	b08c      	sub	sp, #48	; 0x30
 80142d0:	af02      	add	r7, sp, #8
 80142d2:	60f8      	str	r0, [r7, #12]
 80142d4:	60b9      	str	r1, [r7, #8]
 80142d6:	607a      	str	r2, [r7, #4]
 80142d8:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-g"));
 80142da:	f107 031c 	add.w	r3, r7, #28
 80142de:	491a      	ldr	r1, [pc, #104]	; (8014348 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x7c>)
 80142e0:	4618      	mov	r0, r3
 80142e2:	f7f7 f91a 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80142e6:	f107 0014 	add.w	r0, r7, #20
 80142ea:	f107 031c 	add.w	r3, r7, #28
 80142ee:	9301      	str	r3, [sp, #4]
 80142f0:	683b      	ldr	r3, [r7, #0]
 80142f2:	9300      	str	r3, [sp, #0]
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	68ba      	ldr	r2, [r7, #8]
 80142f8:	68f9      	ldr	r1, [r7, #12]
 80142fa:	f7ff ff8f 	bl	801421c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80142fe:	f107 0514 	add.w	r5, r7, #20
 8014302:	f44f 7289 	mov.w	r2, #274	; 0x112
 8014306:	4911      	ldr	r1, [pc, #68]	; (801434c <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x80>)
 8014308:	2010      	movs	r0, #16
 801430a:	f7f4 fd43 	bl	8008d94 <_ZnwjPKci>
 801430e:	4604      	mov	r4, r0
 8014310:	4629      	mov	r1, r5
 8014312:	4620      	mov	r0, r4
 8014314:	f009 ff3e 	bl	801e194 <_ZN10TestFilterC1ERK12SimpleString>
 8014318:	627c      	str	r4, [r7, #36]	; 0x24
 801431a:	f107 0314 	add.w	r3, r7, #20
 801431e:	4618      	mov	r0, r3
 8014320:	f7f7 fcb3 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8014324:	f107 031c 	add.w	r3, r7, #28
 8014328:	4618      	mov	r0, r3
 801432a:	f7f7 fcae 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    groupFilters_ = groupFilter->add(groupFilters_);
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014332:	4619      	mov	r1, r3
 8014334:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014336:	f009 ff4d 	bl	801e1d4 <_ZN10TestFilter3addEPS_>
 801433a:	4602      	mov	r2, r0
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8014340:	bf00      	nop
 8014342:	3728      	adds	r7, #40	; 0x28
 8014344:	46bd      	mov	sp, r7
 8014346:	bdb0      	pop	{r4, r5, r7, pc}
 8014348:	080237ac 	.word	0x080237ac
 801434c:	08024140 	.word	0x08024140

08014350 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>:

bool CommandLineArguments::addGroupDotNameFilter(int ac, const char *const *av, int& i)
{
 8014350:	b5b0      	push	{r4, r5, r7, lr}
 8014352:	b092      	sub	sp, #72	; 0x48
 8014354:	af02      	add	r7, sp, #8
 8014356:	60f8      	str	r0, [r7, #12]
 8014358:	60b9      	str	r1, [r7, #8]
 801435a:	607a      	str	r2, [r7, #4]
 801435c:	603b      	str	r3, [r7, #0]
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 801435e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014362:	494e      	ldr	r1, [pc, #312]	; (801449c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x14c>)
 8014364:	4618      	mov	r0, r3
 8014366:	f7f7 f8d8 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801436a:	f107 0020 	add.w	r0, r7, #32
 801436e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014372:	9301      	str	r3, [sp, #4]
 8014374:	683b      	ldr	r3, [r7, #0]
 8014376:	9300      	str	r3, [sp, #0]
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	68ba      	ldr	r2, [r7, #8]
 801437c:	68f9      	ldr	r1, [r7, #12]
 801437e:	f7ff ff4d 	bl	801421c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8014382:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014386:	4618      	mov	r0, r3
 8014388:	f7f7 fc7f 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    SimpleStringCollection collection;
 801438c:	f107 0310 	add.w	r3, r7, #16
 8014390:	4618      	mov	r0, r3
 8014392:	f7f8 fb8f 	bl	800cab4 <_ZN22SimpleStringCollectionC1Ev>
    groupDotName.split(".", collection);
 8014396:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801439a:	4941      	ldr	r1, [pc, #260]	; (80144a0 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x150>)
 801439c:	4618      	mov	r0, r3
 801439e:	f7f7 f8bc 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80143a2:	f107 0210 	add.w	r2, r7, #16
 80143a6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80143aa:	f107 0320 	add.w	r3, r7, #32
 80143ae:	4618      	mov	r0, r3
 80143b0:	f7f7 fa1f 	bl	800b7f2 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>
 80143b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80143b8:	4618      	mov	r0, r3
 80143ba:	f7f7 fc66 	bl	800bc8a <_ZN12SimpleStringD1Ev>

    if (collection.size() != 2) return false;
 80143be:	f107 0310 	add.w	r3, r7, #16
 80143c2:	4618      	mov	r0, r3
 80143c4:	f7f8 fc1b 	bl	800cbfe <_ZNK22SimpleStringCollection4sizeEv>
 80143c8:	4603      	mov	r3, r0
 80143ca:	2b02      	cmp	r3, #2
 80143cc:	bf14      	ite	ne
 80143ce:	2301      	movne	r3, #1
 80143d0:	2300      	moveq	r3, #0
 80143d2:	b2db      	uxtb	r3, r3
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d001      	beq.n	80143dc <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x8c>
 80143d8:	2400      	movs	r4, #0
 80143da:	e04f      	b.n	801447c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x12c>

    groupFilters_ = (new TestFilter(collection[0].subString(0, collection[0].size()-1)))->add(groupFilters_);
 80143dc:	f107 0310 	add.w	r3, r7, #16
 80143e0:	2100      	movs	r1, #0
 80143e2:	4618      	mov	r0, r3
 80143e4:	f7f8 fc18 	bl	800cc18 <_ZN22SimpleStringCollectionixEj>
 80143e8:	4604      	mov	r4, r0
 80143ea:	f107 0310 	add.w	r3, r7, #16
 80143ee:	2100      	movs	r1, #0
 80143f0:	4618      	mov	r0, r3
 80143f2:	f7f8 fc11 	bl	800cc18 <_ZN22SimpleStringCollectionixEj>
 80143f6:	4603      	mov	r3, r0
 80143f8:	4618      	mov	r0, r3
 80143fa:	f7f7 fc25 	bl	800bc48 <_ZNK12SimpleString4sizeEv>
 80143fe:	4603      	mov	r3, r0
 8014400:	3b01      	subs	r3, #1
 8014402:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8014406:	2200      	movs	r2, #0
 8014408:	4621      	mov	r1, r4
 801440a:	f7f7 fd47 	bl	800be9c <_ZNK12SimpleString9subStringEjj>
 801440e:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8014412:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8014416:	4923      	ldr	r1, [pc, #140]	; (80144a4 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8014418:	2010      	movs	r0, #16
 801441a:	f7f4 fcbb 	bl	8008d94 <_ZnwjPKci>
 801441e:	4604      	mov	r4, r0
 8014420:	4629      	mov	r1, r5
 8014422:	4620      	mov	r0, r4
 8014424:	f009 feb6 	bl	801e194 <_ZN10TestFilterC1ERK12SimpleString>
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801442c:	4619      	mov	r1, r3
 801442e:	4620      	mov	r0, r4
 8014430:	f009 fed0 	bl	801e1d4 <_ZN10TestFilter3addEPS_>
 8014434:	4602      	mov	r2, r0
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	625a      	str	r2, [r3, #36]	; 0x24
 801443a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801443e:	4618      	mov	r0, r3
 8014440:	f7f7 fc23 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    nameFilters_ = (new TestFilter(collection[1]))->add(nameFilters_);
 8014444:	f107 0310 	add.w	r3, r7, #16
 8014448:	2101      	movs	r1, #1
 801444a:	4618      	mov	r0, r3
 801444c:	f7f8 fbe4 	bl	800cc18 <_ZN22SimpleStringCollectionixEj>
 8014450:	4605      	mov	r5, r0
 8014452:	f240 121f 	movw	r2, #287	; 0x11f
 8014456:	4913      	ldr	r1, [pc, #76]	; (80144a4 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8014458:	2010      	movs	r0, #16
 801445a:	f7f4 fc9b 	bl	8008d94 <_ZnwjPKci>
 801445e:	4604      	mov	r4, r0
 8014460:	4629      	mov	r1, r5
 8014462:	4620      	mov	r0, r4
 8014464:	f009 fe96 	bl	801e194 <_ZN10TestFilterC1ERK12SimpleString>
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801446c:	4619      	mov	r1, r3
 801446e:	4620      	mov	r0, r4
 8014470:	f009 feb0 	bl	801e1d4 <_ZN10TestFilter3addEPS_>
 8014474:	4602      	mov	r2, r0
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 801447a:	2401      	movs	r4, #1
    SimpleStringCollection collection;
 801447c:	f107 0310 	add.w	r3, r7, #16
 8014480:	4618      	mov	r0, r3
 8014482:	f7f8 fb8b 	bl	800cb9c <_ZN22SimpleStringCollectionD1Ev>
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 8014486:	f107 0320 	add.w	r3, r7, #32
 801448a:	4618      	mov	r0, r3
 801448c:	f7f7 fbfd 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8014490:	4623      	mov	r3, r4
}
 8014492:	4618      	mov	r0, r3
 8014494:	3740      	adds	r7, #64	; 0x40
 8014496:	46bd      	mov	sp, r7
 8014498:	bdb0      	pop	{r4, r5, r7, pc}
 801449a:	bf00      	nop
 801449c:	080237b0 	.word	0x080237b0
 80144a0:	08024160 	.word	0x08024160
 80144a4:	08024140 	.word	0x08024140

080144a8 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addStrictGroupFilter(int ac, const char *const *av, int& i)
{
 80144a8:	b5b0      	push	{r4, r5, r7, lr}
 80144aa:	b08c      	sub	sp, #48	; 0x30
 80144ac:	af02      	add	r7, sp, #8
 80144ae:	60f8      	str	r0, [r7, #12]
 80144b0:	60b9      	str	r1, [r7, #8]
 80144b2:	607a      	str	r2, [r7, #4]
 80144b4:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-sg"));
 80144b6:	f107 031c 	add.w	r3, r7, #28
 80144ba:	491c      	ldr	r1, [pc, #112]	; (801452c <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x84>)
 80144bc:	4618      	mov	r0, r3
 80144be:	f7f7 f82c 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80144c2:	f107 0014 	add.w	r0, r7, #20
 80144c6:	f107 031c 	add.w	r3, r7, #28
 80144ca:	9301      	str	r3, [sp, #4]
 80144cc:	683b      	ldr	r3, [r7, #0]
 80144ce:	9300      	str	r3, [sp, #0]
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	68ba      	ldr	r2, [r7, #8]
 80144d4:	68f9      	ldr	r1, [r7, #12]
 80144d6:	f7ff fea1 	bl	801421c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80144da:	f107 0514 	add.w	r5, r7, #20
 80144de:	f240 1225 	movw	r2, #293	; 0x125
 80144e2:	4913      	ldr	r1, [pc, #76]	; (8014530 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x88>)
 80144e4:	2010      	movs	r0, #16
 80144e6:	f7f4 fc55 	bl	8008d94 <_ZnwjPKci>
 80144ea:	4604      	mov	r4, r0
 80144ec:	4629      	mov	r1, r5
 80144ee:	4620      	mov	r0, r4
 80144f0:	f009 fe50 	bl	801e194 <_ZN10TestFilterC1ERK12SimpleString>
 80144f4:	627c      	str	r4, [r7, #36]	; 0x24
 80144f6:	f107 0314 	add.w	r3, r7, #20
 80144fa:	4618      	mov	r0, r3
 80144fc:	f7f7 fbc5 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8014500:	f107 031c 	add.w	r3, r7, #28
 8014504:	4618      	mov	r0, r3
 8014506:	f7f7 fbc0 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 801450a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801450c:	f009 fe7d 	bl	801e20a <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014514:	4619      	mov	r1, r3
 8014516:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014518:	f009 fe5c 	bl	801e1d4 <_ZN10TestFilter3addEPS_>
 801451c:	4602      	mov	r2, r0
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	625a      	str	r2, [r3, #36]	; 0x24
}
 8014522:	bf00      	nop
 8014524:	3728      	adds	r7, #40	; 0x28
 8014526:	46bd      	mov	sp, r7
 8014528:	bdb0      	pop	{r4, r5, r7, pc}
 801452a:	bf00      	nop
 801452c:	080237b4 	.word	0x080237b4
 8014530:	08024140 	.word	0x08024140

08014534 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeGroupFilter(int ac, const char *const *av, int& i)
{
 8014534:	b5b0      	push	{r4, r5, r7, lr}
 8014536:	b08c      	sub	sp, #48	; 0x30
 8014538:	af02      	add	r7, sp, #8
 801453a:	60f8      	str	r0, [r7, #12]
 801453c:	60b9      	str	r1, [r7, #8]
 801453e:	607a      	str	r2, [r7, #4]
 8014540:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xg"));
 8014542:	f107 031c 	add.w	r3, r7, #28
 8014546:	491c      	ldr	r1, [pc, #112]	; (80145b8 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x84>)
 8014548:	4618      	mov	r0, r3
 801454a:	f7f6 ffe6 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801454e:	f107 0014 	add.w	r0, r7, #20
 8014552:	f107 031c 	add.w	r3, r7, #28
 8014556:	9301      	str	r3, [sp, #4]
 8014558:	683b      	ldr	r3, [r7, #0]
 801455a:	9300      	str	r3, [sp, #0]
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	68ba      	ldr	r2, [r7, #8]
 8014560:	68f9      	ldr	r1, [r7, #12]
 8014562:	f7ff fe5b 	bl	801421c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8014566:	f107 0514 	add.w	r5, r7, #20
 801456a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801456e:	4913      	ldr	r1, [pc, #76]	; (80145bc <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x88>)
 8014570:	2010      	movs	r0, #16
 8014572:	f7f4 fc0f 	bl	8008d94 <_ZnwjPKci>
 8014576:	4604      	mov	r4, r0
 8014578:	4629      	mov	r1, r5
 801457a:	4620      	mov	r0, r4
 801457c:	f009 fe0a 	bl	801e194 <_ZN10TestFilterC1ERK12SimpleString>
 8014580:	627c      	str	r4, [r7, #36]	; 0x24
 8014582:	f107 0314 	add.w	r3, r7, #20
 8014586:	4618      	mov	r0, r3
 8014588:	f7f7 fb7f 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801458c:	f107 031c 	add.w	r3, r7, #28
 8014590:	4618      	mov	r0, r3
 8014592:	f7f7 fb7a 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    groupFilter->invertMatching();
 8014596:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014598:	f009 fe44 	bl	801e224 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145a0:	4619      	mov	r1, r3
 80145a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80145a4:	f009 fe16 	bl	801e1d4 <_ZN10TestFilter3addEPS_>
 80145a8:	4602      	mov	r2, r0
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	625a      	str	r2, [r3, #36]	; 0x24
}
 80145ae:	bf00      	nop
 80145b0:	3728      	adds	r7, #40	; 0x28
 80145b2:	46bd      	mov	sp, r7
 80145b4:	bdb0      	pop	{r4, r5, r7, pc}
 80145b6:	bf00      	nop
 80145b8:	080237b8 	.word	0x080237b8
 80145bc:	08024140 	.word	0x08024140

080145c0 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictGroupFilter(int ac, const char *const *av, int& i)
{
 80145c0:	b5b0      	push	{r4, r5, r7, lr}
 80145c2:	b08c      	sub	sp, #48	; 0x30
 80145c4:	af02      	add	r7, sp, #8
 80145c6:	60f8      	str	r0, [r7, #12]
 80145c8:	60b9      	str	r1, [r7, #8]
 80145ca:	607a      	str	r2, [r7, #4]
 80145cc:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xsg"));
 80145ce:	f107 031c 	add.w	r3, r7, #28
 80145d2:	491d      	ldr	r1, [pc, #116]	; (8014648 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x88>)
 80145d4:	4618      	mov	r0, r3
 80145d6:	f7f6 ffa0 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80145da:	f107 0014 	add.w	r0, r7, #20
 80145de:	f107 031c 	add.w	r3, r7, #28
 80145e2:	9301      	str	r3, [sp, #4]
 80145e4:	683b      	ldr	r3, [r7, #0]
 80145e6:	9300      	str	r3, [sp, #0]
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	68ba      	ldr	r2, [r7, #8]
 80145ec:	68f9      	ldr	r1, [r7, #12]
 80145ee:	f7ff fe15 	bl	801421c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80145f2:	f107 0514 	add.w	r5, r7, #20
 80145f6:	f240 1233 	movw	r2, #307	; 0x133
 80145fa:	4914      	ldr	r1, [pc, #80]	; (801464c <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x8c>)
 80145fc:	2010      	movs	r0, #16
 80145fe:	f7f4 fbc9 	bl	8008d94 <_ZnwjPKci>
 8014602:	4604      	mov	r4, r0
 8014604:	4629      	mov	r1, r5
 8014606:	4620      	mov	r0, r4
 8014608:	f009 fdc4 	bl	801e194 <_ZN10TestFilterC1ERK12SimpleString>
 801460c:	627c      	str	r4, [r7, #36]	; 0x24
 801460e:	f107 0314 	add.w	r3, r7, #20
 8014612:	4618      	mov	r0, r3
 8014614:	f7f7 fb39 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8014618:	f107 031c 	add.w	r3, r7, #28
 801461c:	4618      	mov	r0, r3
 801461e:	f7f7 fb34 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8014622:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014624:	f009 fdf1 	bl	801e20a <_ZN10TestFilter14strictMatchingEv>
    groupFilter->invertMatching();
 8014628:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801462a:	f009 fdfb 	bl	801e224 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014632:	4619      	mov	r1, r3
 8014634:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014636:	f009 fdcd 	bl	801e1d4 <_ZN10TestFilter3addEPS_>
 801463a:	4602      	mov	r2, r0
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8014640:	bf00      	nop
 8014642:	3728      	adds	r7, #40	; 0x28
 8014644:	46bd      	mov	sp, r7
 8014646:	bdb0      	pop	{r4, r5, r7, pc}
 8014648:	080237bc 	.word	0x080237bc
 801464c:	08024140 	.word	0x08024140

08014650 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>:

void CommandLineArguments::addNameFilter(int ac, const char *const *av, int& i)
{
 8014650:	b5b0      	push	{r4, r5, r7, lr}
 8014652:	b08c      	sub	sp, #48	; 0x30
 8014654:	af02      	add	r7, sp, #8
 8014656:	60f8      	str	r0, [r7, #12]
 8014658:	60b9      	str	r1, [r7, #8]
 801465a:	607a      	str	r2, [r7, #4]
 801465c:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, i, "-n"));
 801465e:	f107 031c 	add.w	r3, r7, #28
 8014662:	491a      	ldr	r1, [pc, #104]	; (80146cc <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x7c>)
 8014664:	4618      	mov	r0, r3
 8014666:	f7f6 ff58 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801466a:	f107 0014 	add.w	r0, r7, #20
 801466e:	f107 031c 	add.w	r3, r7, #28
 8014672:	9301      	str	r3, [sp, #4]
 8014674:	683b      	ldr	r3, [r7, #0]
 8014676:	9300      	str	r3, [sp, #0]
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	68ba      	ldr	r2, [r7, #8]
 801467c:	68f9      	ldr	r1, [r7, #12]
 801467e:	f7ff fdcd 	bl	801421c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8014682:	f107 0514 	add.w	r5, r7, #20
 8014686:	f240 123b 	movw	r2, #315	; 0x13b
 801468a:	4911      	ldr	r1, [pc, #68]	; (80146d0 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x80>)
 801468c:	2010      	movs	r0, #16
 801468e:	f7f4 fb81 	bl	8008d94 <_ZnwjPKci>
 8014692:	4604      	mov	r4, r0
 8014694:	4629      	mov	r1, r5
 8014696:	4620      	mov	r0, r4
 8014698:	f009 fd7c 	bl	801e194 <_ZN10TestFilterC1ERK12SimpleString>
 801469c:	627c      	str	r4, [r7, #36]	; 0x24
 801469e:	f107 0314 	add.w	r3, r7, #20
 80146a2:	4618      	mov	r0, r3
 80146a4:	f7f7 faf1 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 80146a8:	f107 031c 	add.w	r3, r7, #28
 80146ac:	4618      	mov	r0, r3
 80146ae:	f7f7 faec 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    nameFilters_ = nameFilter->add(nameFilters_);
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146b6:	4619      	mov	r1, r3
 80146b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80146ba:	f009 fd8b 	bl	801e1d4 <_ZN10TestFilter3addEPS_>
 80146be:	4602      	mov	r2, r0
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80146c4:	bf00      	nop
 80146c6:	3728      	adds	r7, #40	; 0x28
 80146c8:	46bd      	mov	sp, r7
 80146ca:	bdb0      	pop	{r4, r5, r7, pc}
 80146cc:	080237c4 	.word	0x080237c4
 80146d0:	08024140 	.word	0x08024140

080146d4 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addStrictNameFilter(int ac, const char *const *av, int& index)
{
 80146d4:	b5b0      	push	{r4, r5, r7, lr}
 80146d6:	b08c      	sub	sp, #48	; 0x30
 80146d8:	af02      	add	r7, sp, #8
 80146da:	60f8      	str	r0, [r7, #12]
 80146dc:	60b9      	str	r1, [r7, #8]
 80146de:	607a      	str	r2, [r7, #4]
 80146e0:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-sn"));
 80146e2:	f107 031c 	add.w	r3, r7, #28
 80146e6:	491c      	ldr	r1, [pc, #112]	; (8014758 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x84>)
 80146e8:	4618      	mov	r0, r3
 80146ea:	f7f6 ff16 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80146ee:	f107 0014 	add.w	r0, r7, #20
 80146f2:	f107 031c 	add.w	r3, r7, #28
 80146f6:	9301      	str	r3, [sp, #4]
 80146f8:	683b      	ldr	r3, [r7, #0]
 80146fa:	9300      	str	r3, [sp, #0]
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	68ba      	ldr	r2, [r7, #8]
 8014700:	68f9      	ldr	r1, [r7, #12]
 8014702:	f7ff fd8b 	bl	801421c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8014706:	f107 0514 	add.w	r5, r7, #20
 801470a:	f240 1241 	movw	r2, #321	; 0x141
 801470e:	4913      	ldr	r1, [pc, #76]	; (801475c <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x88>)
 8014710:	2010      	movs	r0, #16
 8014712:	f7f4 fb3f 	bl	8008d94 <_ZnwjPKci>
 8014716:	4604      	mov	r4, r0
 8014718:	4629      	mov	r1, r5
 801471a:	4620      	mov	r0, r4
 801471c:	f009 fd3a 	bl	801e194 <_ZN10TestFilterC1ERK12SimpleString>
 8014720:	627c      	str	r4, [r7, #36]	; 0x24
 8014722:	f107 0314 	add.w	r3, r7, #20
 8014726:	4618      	mov	r0, r3
 8014728:	f7f7 faaf 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801472c:	f107 031c 	add.w	r3, r7, #28
 8014730:	4618      	mov	r0, r3
 8014732:	f7f7 faaa 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    nameFilter->strictMatching();
 8014736:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014738:	f009 fd67 	bl	801e20a <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014740:	4619      	mov	r1, r3
 8014742:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014744:	f009 fd46 	bl	801e1d4 <_ZN10TestFilter3addEPS_>
 8014748:	4602      	mov	r2, r0
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	629a      	str	r2, [r3, #40]	; 0x28
}
 801474e:	bf00      	nop
 8014750:	3728      	adds	r7, #40	; 0x28
 8014752:	46bd      	mov	sp, r7
 8014754:	bdb0      	pop	{r4, r5, r7, pc}
 8014756:	bf00      	nop
 8014758:	080237c8 	.word	0x080237c8
 801475c:	08024140 	.word	0x08024140

08014760 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeNameFilter(int ac, const char *const *av, int& index)
{
 8014760:	b5b0      	push	{r4, r5, r7, lr}
 8014762:	b08c      	sub	sp, #48	; 0x30
 8014764:	af02      	add	r7, sp, #8
 8014766:	60f8      	str	r0, [r7, #12]
 8014768:	60b9      	str	r1, [r7, #8]
 801476a:	607a      	str	r2, [r7, #4]
 801476c:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xn"));
 801476e:	f107 031c 	add.w	r3, r7, #28
 8014772:	491c      	ldr	r1, [pc, #112]	; (80147e4 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x84>)
 8014774:	4618      	mov	r0, r3
 8014776:	f7f6 fed0 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801477a:	f107 0014 	add.w	r0, r7, #20
 801477e:	f107 031c 	add.w	r3, r7, #28
 8014782:	9301      	str	r3, [sp, #4]
 8014784:	683b      	ldr	r3, [r7, #0]
 8014786:	9300      	str	r3, [sp, #0]
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	68ba      	ldr	r2, [r7, #8]
 801478c:	68f9      	ldr	r1, [r7, #12]
 801478e:	f7ff fd45 	bl	801421c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8014792:	f107 0514 	add.w	r5, r7, #20
 8014796:	f44f 72a4 	mov.w	r2, #328	; 0x148
 801479a:	4913      	ldr	r1, [pc, #76]	; (80147e8 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x88>)
 801479c:	2010      	movs	r0, #16
 801479e:	f7f4 faf9 	bl	8008d94 <_ZnwjPKci>
 80147a2:	4604      	mov	r4, r0
 80147a4:	4629      	mov	r1, r5
 80147a6:	4620      	mov	r0, r4
 80147a8:	f009 fcf4 	bl	801e194 <_ZN10TestFilterC1ERK12SimpleString>
 80147ac:	627c      	str	r4, [r7, #36]	; 0x24
 80147ae:	f107 0314 	add.w	r3, r7, #20
 80147b2:	4618      	mov	r0, r3
 80147b4:	f7f7 fa69 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 80147b8:	f107 031c 	add.w	r3, r7, #28
 80147bc:	4618      	mov	r0, r3
 80147be:	f7f7 fa64 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 80147c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80147c4:	f009 fd2e 	bl	801e224 <_ZN10TestFilter14invertMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80147cc:	4619      	mov	r1, r3
 80147ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80147d0:	f009 fd00 	bl	801e1d4 <_ZN10TestFilter3addEPS_>
 80147d4:	4602      	mov	r2, r0
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80147da:	bf00      	nop
 80147dc:	3728      	adds	r7, #40	; 0x28
 80147de:	46bd      	mov	sp, r7
 80147e0:	bdb0      	pop	{r4, r5, r7, pc}
 80147e2:	bf00      	nop
 80147e4:	080237cc 	.word	0x080237cc
 80147e8:	08024140 	.word	0x08024140

080147ec <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictNameFilter(int ac, const char *const *av, int& index)
{
 80147ec:	b5b0      	push	{r4, r5, r7, lr}
 80147ee:	b08c      	sub	sp, #48	; 0x30
 80147f0:	af02      	add	r7, sp, #8
 80147f2:	60f8      	str	r0, [r7, #12]
 80147f4:	60b9      	str	r1, [r7, #8]
 80147f6:	607a      	str	r2, [r7, #4]
 80147f8:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xsn"));
 80147fa:	f107 031c 	add.w	r3, r7, #28
 80147fe:	491d      	ldr	r1, [pc, #116]	; (8014874 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x88>)
 8014800:	4618      	mov	r0, r3
 8014802:	f7f6 fe8a 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8014806:	f107 0014 	add.w	r0, r7, #20
 801480a:	f107 031c 	add.w	r3, r7, #28
 801480e:	9301      	str	r3, [sp, #4]
 8014810:	683b      	ldr	r3, [r7, #0]
 8014812:	9300      	str	r3, [sp, #0]
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	68ba      	ldr	r2, [r7, #8]
 8014818:	68f9      	ldr	r1, [r7, #12]
 801481a:	f7ff fcff 	bl	801421c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801481e:	f107 0514 	add.w	r5, r7, #20
 8014822:	f240 124f 	movw	r2, #335	; 0x14f
 8014826:	4914      	ldr	r1, [pc, #80]	; (8014878 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x8c>)
 8014828:	2010      	movs	r0, #16
 801482a:	f7f4 fab3 	bl	8008d94 <_ZnwjPKci>
 801482e:	4604      	mov	r4, r0
 8014830:	4629      	mov	r1, r5
 8014832:	4620      	mov	r0, r4
 8014834:	f009 fcae 	bl	801e194 <_ZN10TestFilterC1ERK12SimpleString>
 8014838:	627c      	str	r4, [r7, #36]	; 0x24
 801483a:	f107 0314 	add.w	r3, r7, #20
 801483e:	4618      	mov	r0, r3
 8014840:	f7f7 fa23 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8014844:	f107 031c 	add.w	r3, r7, #28
 8014848:	4618      	mov	r0, r3
 801484a:	f7f7 fa1e 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 801484e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014850:	f009 fce8 	bl	801e224 <_ZN10TestFilter14invertMatchingEv>
    nameFilter->strictMatching();
 8014854:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014856:	f009 fcd8 	bl	801e20a <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801485e:	4619      	mov	r1, r3
 8014860:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014862:	f009 fcb7 	bl	801e1d4 <_ZN10TestFilter3addEPS_>
 8014866:	4602      	mov	r2, r0
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	629a      	str	r2, [r3, #40]	; 0x28
}
 801486c:	bf00      	nop
 801486e:	3728      	adds	r7, #40	; 0x28
 8014870:	46bd      	mov	sp, r7
 8014872:	bdb0      	pop	{r4, r5, r7, pc}
 8014874:	080237d0 	.word	0x080237d0
 8014878:	08024140 	.word	0x08024140

0801487c <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>:

void CommandLineArguments::addTestToRunBasedOnVerboseOutput(int ac, const char *const *av, int& index, const char* parameterName)
{
 801487c:	b5b0      	push	{r4, r5, r7, lr}
 801487e:	b092      	sub	sp, #72	; 0x48
 8014880:	af02      	add	r7, sp, #8
 8014882:	60f8      	str	r0, [r7, #12]
 8014884:	60b9      	str	r1, [r7, #8]
 8014886:	607a      	str	r2, [r7, #4]
 8014888:	603b      	str	r3, [r7, #0]
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 801488a:	f107 0320 	add.w	r3, r7, #32
 801488e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014890:	4618      	mov	r0, r3
 8014892:	f7f6 fe42 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8014896:	f107 0018 	add.w	r0, r7, #24
 801489a:	f107 0320 	add.w	r3, r7, #32
 801489e:	9301      	str	r3, [sp, #4]
 80148a0:	683b      	ldr	r3, [r7, #0]
 80148a2:	9300      	str	r3, [sp, #0]
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	68ba      	ldr	r2, [r7, #8]
 80148a8:	68f9      	ldr	r1, [r7, #12]
 80148aa:	f7ff fcb7 	bl	801421c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80148ae:	f107 0320 	add.w	r3, r7, #32
 80148b2:	4618      	mov	r0, r3
 80148b4:	f7f7 f9e9 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    SimpleString testname = wholename.subStringFromTill(',', ')');
 80148b8:	f107 0010 	add.w	r0, r7, #16
 80148bc:	f107 0118 	add.w	r1, r7, #24
 80148c0:	2329      	movs	r3, #41	; 0x29
 80148c2:	222c      	movs	r2, #44	; 0x2c
 80148c4:	f7f7 fb92 	bl	800bfec <_ZNK12SimpleString17subStringFromTillEcc>
    testname = testname.subString(2);
 80148c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80148cc:	f107 0110 	add.w	r1, r7, #16
 80148d0:	2202      	movs	r2, #2
 80148d2:	4618      	mov	r0, r3
 80148d4:	f7f7 fb2c 	bl	800bf30 <_ZNK12SimpleString9subStringEj>
 80148d8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80148dc:	f107 0310 	add.w	r3, r7, #16
 80148e0:	4611      	mov	r1, r2
 80148e2:	4618      	mov	r0, r3
 80148e4:	f7f6 fe85 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 80148e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80148ec:	4618      	mov	r0, r3
 80148ee:	f7f7 f9cc 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    TestFilter* namefilter = new TestFilter(testname);
 80148f2:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 80148f6:	492a      	ldr	r1, [pc, #168]	; (80149a0 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 80148f8:	2010      	movs	r0, #16
 80148fa:	f7f4 fa4b 	bl	8008d94 <_ZnwjPKci>
 80148fe:	4604      	mov	r4, r0
 8014900:	f107 0310 	add.w	r3, r7, #16
 8014904:	4619      	mov	r1, r3
 8014906:	4620      	mov	r0, r4
 8014908:	f009 fc44 	bl	801e194 <_ZN10TestFilterC1ERK12SimpleString>
 801490c:	63fc      	str	r4, [r7, #60]	; 0x3c
    TestFilter* groupfilter = new TestFilter(wholename.subStringFromTill(wholename.at(0), ','));
 801490e:	f107 0318 	add.w	r3, r7, #24
 8014912:	2100      	movs	r1, #0
 8014914:	4618      	mov	r0, r3
 8014916:	f7f7 fb1c 	bl	800bf52 <_ZNK12SimpleString2atEj>
 801491a:	4603      	mov	r3, r0
 801491c:	461a      	mov	r2, r3
 801491e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8014922:	f107 0118 	add.w	r1, r7, #24
 8014926:	232c      	movs	r3, #44	; 0x2c
 8014928:	f7f7 fb60 	bl	800bfec <_ZNK12SimpleString17subStringFromTillEcc>
 801492c:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8014930:	f240 125b 	movw	r2, #347	; 0x15b
 8014934:	491a      	ldr	r1, [pc, #104]	; (80149a0 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 8014936:	2010      	movs	r0, #16
 8014938:	f7f4 fa2c 	bl	8008d94 <_ZnwjPKci>
 801493c:	4604      	mov	r4, r0
 801493e:	4629      	mov	r1, r5
 8014940:	4620      	mov	r0, r4
 8014942:	f009 fc27 	bl	801e194 <_ZN10TestFilterC1ERK12SimpleString>
 8014946:	63bc      	str	r4, [r7, #56]	; 0x38
 8014948:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801494c:	4618      	mov	r0, r3
 801494e:	f7f7 f99c 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    namefilter->strictMatching();
 8014952:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014954:	f009 fc59 	bl	801e20a <_ZN10TestFilter14strictMatchingEv>
    groupfilter->strictMatching();
 8014958:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801495a:	f009 fc56 	bl	801e20a <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupfilter->add(groupFilters_);
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014962:	4619      	mov	r1, r3
 8014964:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014966:	f009 fc35 	bl	801e1d4 <_ZN10TestFilter3addEPS_>
 801496a:	4602      	mov	r2, r0
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	625a      	str	r2, [r3, #36]	; 0x24
    nameFilters_ = namefilter->add(nameFilters_);
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014974:	4619      	mov	r1, r3
 8014976:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014978:	f009 fc2c 	bl	801e1d4 <_ZN10TestFilter3addEPS_>
 801497c:	4602      	mov	r2, r0
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	629a      	str	r2, [r3, #40]	; 0x28
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8014982:	f107 0310 	add.w	r3, r7, #16
 8014986:	4618      	mov	r0, r3
 8014988:	f7f7 f97f 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 801498c:	f107 0318 	add.w	r3, r7, #24
 8014990:	4618      	mov	r0, r3
 8014992:	f7f7 f97a 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 8014996:	bf00      	nop
 8014998:	3740      	adds	r7, #64	; 0x40
 801499a:	46bd      	mov	sp, r7
 801499c:	bdb0      	pop	{r4, r5, r7, pc}
 801499e:	bf00      	nop
 80149a0:	08024140 	.word	0x08024140

080149a4 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>:

void CommandLineArguments::setPackageName(int ac, const char *const *av, int& i)
{
 80149a4:	b590      	push	{r4, r7, lr}
 80149a6:	b08b      	sub	sp, #44	; 0x2c
 80149a8:	af02      	add	r7, sp, #8
 80149aa:	60f8      	str	r0, [r7, #12]
 80149ac:	60b9      	str	r1, [r7, #8]
 80149ae:	607a      	str	r2, [r7, #4]
 80149b0:	603b      	str	r3, [r7, #0]
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 80149b2:	f107 0318 	add.w	r3, r7, #24
 80149b6:	491b      	ldr	r1, [pc, #108]	; (8014a24 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x80>)
 80149b8:	4618      	mov	r0, r3
 80149ba:	f7f6 fdae 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80149be:	f107 0010 	add.w	r0, r7, #16
 80149c2:	f107 0318 	add.w	r3, r7, #24
 80149c6:	9301      	str	r3, [sp, #4]
 80149c8:	683b      	ldr	r3, [r7, #0]
 80149ca:	9300      	str	r3, [sp, #0]
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	68ba      	ldr	r2, [r7, #8]
 80149d0:	68f9      	ldr	r1, [r7, #12]
 80149d2:	f7ff fc23 	bl	801421c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80149d6:	f107 0318 	add.w	r3, r7, #24
 80149da:	4618      	mov	r0, r3
 80149dc:	f7f7 f955 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    if (packageName.size() == 0) return;
 80149e0:	f107 0310 	add.w	r3, r7, #16
 80149e4:	4618      	mov	r0, r3
 80149e6:	f7f7 f92f 	bl	800bc48 <_ZNK12SimpleString4sizeEv>
 80149ea:	4603      	mov	r3, r0
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	bf0c      	ite	eq
 80149f0:	2301      	moveq	r3, #1
 80149f2:	2300      	movne	r3, #0
 80149f4:	b2db      	uxtb	r3, r3
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d001      	beq.n	80149fe <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x5a>
 80149fa:	2400      	movs	r4, #0
 80149fc:	e008      	b.n	8014a10 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x6c>

    packageName_ = packageName;
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	3330      	adds	r3, #48	; 0x30
 8014a02:	f107 0210 	add.w	r2, r7, #16
 8014a06:	4611      	mov	r1, r2
 8014a08:	4618      	mov	r0, r3
 8014a0a:	f7f6 fdf2 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8014a0e:	2401      	movs	r4, #1
 8014a10:	f107 0310 	add.w	r3, r7, #16
 8014a14:	4618      	mov	r0, r3
 8014a16:	f7f7 f938 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8014a1a:	2c01      	cmp	r4, #1
}
 8014a1c:	3724      	adds	r7, #36	; 0x24
 8014a1e:	46bd      	mov	sp, r7
 8014a20:	bd90      	pop	{r4, r7, pc}
 8014a22:	bf00      	nop
 8014a24:	080237f8 	.word	0x080237f8

08014a28 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>:

bool CommandLineArguments::setOutputType(int ac, const char *const *av, int& i)
{
 8014a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a2a:	b093      	sub	sp, #76	; 0x4c
 8014a2c:	af02      	add	r7, sp, #8
 8014a2e:	60f8      	str	r0, [r7, #12]
 8014a30:	60b9      	str	r1, [r7, #8]
 8014a32:	607a      	str	r2, [r7, #4]
 8014a34:	603b      	str	r3, [r7, #0]
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8014a36:	f107 0318 	add.w	r3, r7, #24
 8014a3a:	4953      	ldr	r1, [pc, #332]	; (8014b88 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x160>)
 8014a3c:	4618      	mov	r0, r3
 8014a3e:	f7f6 fd6c 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8014a42:	f107 0010 	add.w	r0, r7, #16
 8014a46:	f107 0318 	add.w	r3, r7, #24
 8014a4a:	9301      	str	r3, [sp, #4]
 8014a4c:	683b      	ldr	r3, [r7, #0]
 8014a4e:	9300      	str	r3, [sp, #0]
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	68ba      	ldr	r2, [r7, #8]
 8014a54:	68f9      	ldr	r1, [r7, #12]
 8014a56:	f7ff fbe1 	bl	801421c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8014a5a:	f107 0318 	add.w	r3, r7, #24
 8014a5e:	4618      	mov	r0, r3
 8014a60:	f7f7 f913 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    if (outputType.size() == 0) return false;
 8014a64:	f107 0310 	add.w	r3, r7, #16
 8014a68:	4618      	mov	r0, r3
 8014a6a:	f7f7 f8ed 	bl	800bc48 <_ZNK12SimpleString4sizeEv>
 8014a6e:	4603      	mov	r3, r0
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	bf0c      	ite	eq
 8014a74:	2301      	moveq	r3, #1
 8014a76:	2300      	movne	r3, #0
 8014a78:	b2db      	uxtb	r3, r3
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d001      	beq.n	8014a82 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x5a>
 8014a7e:	2400      	movs	r4, #0
 8014a80:	e078      	b.n	8014b74 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>

    if (outputType == "normal" || outputType == "eclipse") {
 8014a82:	2500      	movs	r5, #0
 8014a84:	f107 0320 	add.w	r3, r7, #32
 8014a88:	4940      	ldr	r1, [pc, #256]	; (8014b8c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x164>)
 8014a8a:	4618      	mov	r0, r3
 8014a8c:	f7f6 fd45 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8014a90:	2601      	movs	r6, #1
 8014a92:	f107 0220 	add.w	r2, r7, #32
 8014a96:	f107 0310 	add.w	r3, r7, #16
 8014a9a:	4611      	mov	r1, r2
 8014a9c:	4618      	mov	r0, r3
 8014a9e:	f7f7 f900 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 8014aa2:	4603      	mov	r3, r0
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d111      	bne.n	8014acc <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa4>
 8014aa8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014aac:	4938      	ldr	r1, [pc, #224]	; (8014b90 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x168>)
 8014aae:	4618      	mov	r0, r3
 8014ab0:	f7f6 fd33 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8014ab4:	2501      	movs	r5, #1
 8014ab6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014aba:	f107 0310 	add.w	r3, r7, #16
 8014abe:	4611      	mov	r1, r2
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	f7f7 f8ee 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 8014ac6:	4603      	mov	r3, r0
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d001      	beq.n	8014ad0 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa8>
 8014acc:	2401      	movs	r4, #1
 8014ace:	e000      	b.n	8014ad2 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xaa>
 8014ad0:	2400      	movs	r4, #0
 8014ad2:	2d00      	cmp	r5, #0
 8014ad4:	d004      	beq.n	8014ae0 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xb8>
 8014ad6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014ada:	4618      	mov	r0, r3
 8014adc:	f7f7 f8d5 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8014ae0:	2e00      	cmp	r6, #0
 8014ae2:	d004      	beq.n	8014aee <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xc6>
 8014ae4:	f107 0320 	add.w	r3, r7, #32
 8014ae8:	4618      	mov	r0, r3
 8014aea:	f7f7 f8ce 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8014aee:	2c00      	cmp	r4, #0
 8014af0:	d005      	beq.n	8014afe <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xd6>
        outputType_ = OUTPUT_ECLIPSE;
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	2200      	movs	r2, #0
 8014af6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8014afa:	2401      	movs	r4, #1
 8014afc:	e03a      	b.n	8014b74 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "junit") {
 8014afe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014b02:	4924      	ldr	r1, [pc, #144]	; (8014b94 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x16c>)
 8014b04:	4618      	mov	r0, r3
 8014b06:	f7f6 fd08 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8014b0a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014b0e:	f107 0310 	add.w	r3, r7, #16
 8014b12:	4611      	mov	r1, r2
 8014b14:	4618      	mov	r0, r3
 8014b16:	f7f7 f8c4 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 8014b1a:	4603      	mov	r3, r0
 8014b1c:	461c      	mov	r4, r3
 8014b1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014b22:	4618      	mov	r0, r3
 8014b24:	f7f7 f8b1 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8014b28:	2c00      	cmp	r4, #0
 8014b2a:	d005      	beq.n	8014b38 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x110>
        outputType_ = OUTPUT_JUNIT;
 8014b2c:	68fb      	ldr	r3, [r7, #12]
 8014b2e:	2201      	movs	r2, #1
 8014b30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8014b34:	2401      	movs	r4, #1
 8014b36:	e01d      	b.n	8014b74 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "teamcity") {
 8014b38:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8014b3c:	4916      	ldr	r1, [pc, #88]	; (8014b98 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x170>)
 8014b3e:	4618      	mov	r0, r3
 8014b40:	f7f6 fceb 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8014b44:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8014b48:	f107 0310 	add.w	r3, r7, #16
 8014b4c:	4611      	mov	r1, r2
 8014b4e:	4618      	mov	r0, r3
 8014b50:	f7f7 f8a7 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 8014b54:	4603      	mov	r3, r0
 8014b56:	461c      	mov	r4, r3
 8014b58:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	f7f7 f894 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8014b62:	2c00      	cmp	r4, #0
 8014b64:	d005      	beq.n	8014b72 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14a>
        outputType_ = OUTPUT_TEAMCITY;
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	2202      	movs	r2, #2
 8014b6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8014b6e:	2401      	movs	r4, #1
 8014b70:	e000      	b.n	8014b74 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }

    return false;
 8014b72:	2400      	movs	r4, #0
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8014b74:	f107 0310 	add.w	r3, r7, #16
 8014b78:	4618      	mov	r0, r3
 8014b7a:	f7f7 f886 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8014b7e:	4623      	mov	r3, r4
}
 8014b80:	4618      	mov	r0, r3
 8014b82:	3744      	adds	r7, #68	; 0x44
 8014b84:	46bd      	mov	sp, r7
 8014b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b88:	080237f4 	.word	0x080237f4
 8014b8c:	08024164 	.word	0x08024164
 8014b90:	0802416c 	.word	0x0802416c
 8014b94:	08024174 	.word	0x08024174
 8014b98:	0802417c 	.word	0x0802417c

08014b9c <_ZNK20CommandLineArguments13isJUnitOutputEv>:
{
    return outputType_ == OUTPUT_ECLIPSE;
}

bool CommandLineArguments::isJUnitOutput() const
{
 8014b9c:	b480      	push	{r7}
 8014b9e:	b083      	sub	sp, #12
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_JUNIT;
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014baa:	2b01      	cmp	r3, #1
 8014bac:	bf0c      	ite	eq
 8014bae:	2301      	moveq	r3, #1
 8014bb0:	2300      	movne	r3, #0
 8014bb2:	b2db      	uxtb	r3, r3
}
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	370c      	adds	r7, #12
 8014bb8:	46bd      	mov	sp, r7
 8014bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bbe:	4770      	bx	lr

08014bc0 <_ZNK20CommandLineArguments16isTeamCityOutputEv>:

bool CommandLineArguments::isTeamCityOutput() const
{
 8014bc0:	b480      	push	{r7}
 8014bc2:	b083      	sub	sp, #12
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_TEAMCITY;
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014bce:	2b02      	cmp	r3, #2
 8014bd0:	bf0c      	ite	eq
 8014bd2:	2301      	moveq	r3, #1
 8014bd4:	2300      	movne	r3, #0
 8014bd6:	b2db      	uxtb	r3, r3
}
 8014bd8:	4618      	mov	r0, r3
 8014bda:	370c      	adds	r7, #12
 8014bdc:	46bd      	mov	sp, r7
 8014bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be2:	4770      	bx	lr

08014be4 <_ZNK20CommandLineArguments14getPackageNameEv>:

const SimpleString& CommandLineArguments::getPackageName() const
{
 8014be4:	b480      	push	{r7}
 8014be6:	b083      	sub	sp, #12
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	6078      	str	r0, [r7, #4]
    return packageName_;
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	3330      	adds	r3, #48	; 0x30
}
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	370c      	adds	r7, #12
 8014bf4:	46bd      	mov	sp, r7
 8014bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bfa:	4770      	bx	lr

08014bfc <_ZN22MemoryLeakDetectorListC1Ev>:
    MemoryLeakDetectorNode* next_;
};

struct MemoryLeakDetectorList
{
    MemoryLeakDetectorList() :
 8014bfc:	b480      	push	{r7}
 8014bfe:	b083      	sub	sp, #12
 8014c00:	af00      	add	r7, sp, #0
 8014c02:	6078      	str	r0, [r7, #4]
        head_(NULLPTR)
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	2200      	movs	r2, #0
 8014c08:	601a      	str	r2, [r3, #0]
    {}
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	370c      	adds	r7, #12
 8014c10:	46bd      	mov	sp, r7
 8014c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c16:	4770      	bx	lr

08014c18 <_ZN18SimpleStringBufferC1Ev>:

static const char* UNKNOWN = "<unknown>";

static const char GuardBytes[] = {'B','A','S'};

SimpleStringBuffer::SimpleStringBuffer() :
 8014c18:	b480      	push	{r7}
 8014c1a:	b083      	sub	sp, #12
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	6078      	str	r0, [r7, #4]
    positions_filled_(0), write_limit_(SIMPLE_STRING_BUFFER_LEN-1)
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014c26:	2200      	movs	r2, #0
 8014c28:	601a      	str	r2, [r3, #0]
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014c30:	3304      	adds	r3, #4
 8014c32:	f640 72ff 	movw	r2, #4095	; 0xfff
 8014c36:	601a      	str	r2, [r3, #0]
{
    buffer_[0] = '\0';
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	2200      	movs	r2, #0
 8014c3c:	701a      	strb	r2, [r3, #0]
}
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	4618      	mov	r0, r3
 8014c42:	370c      	adds	r7, #12
 8014c44:	46bd      	mov	sp, r7
 8014c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c4a:	4770      	bx	lr

08014c4c <_ZN18SimpleStringBuffer5clearEv>:

void SimpleStringBuffer::clear()
{
 8014c4c:	b480      	push	{r7}
 8014c4e:	b083      	sub	sp, #12
 8014c50:	af00      	add	r7, sp, #0
 8014c52:	6078      	str	r0, [r7, #4]
    positions_filled_ = 0;
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014c5a:	2200      	movs	r2, #0
 8014c5c:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	2200      	movs	r2, #0
 8014c62:	701a      	strb	r2, [r3, #0]
}
 8014c64:	bf00      	nop
 8014c66:	370c      	adds	r7, #12
 8014c68:	46bd      	mov	sp, r7
 8014c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c6e:	4770      	bx	lr

08014c70 <_ZN18SimpleStringBuffer3addEPKcz>:

void SimpleStringBuffer::add(const char* format, ...)
{
 8014c70:	b40e      	push	{r1, r2, r3}
 8014c72:	b590      	push	{r4, r7, lr}
 8014c74:	b086      	sub	sp, #24
 8014c76:	af00      	add	r7, sp, #0
 8014c78:	6078      	str	r0, [r7, #4]
    const size_t positions_left = write_limit_ - positions_filled_;
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014c80:	3304      	adds	r3, #4
 8014c82:	681a      	ldr	r2, [r3, #0]
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	1ad3      	subs	r3, r2, r3
 8014c8e:	617b      	str	r3, [r7, #20]
    if (positions_left == 0) return;
 8014c90:	697b      	ldr	r3, [r7, #20]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d032      	beq.n	8014cfc <_ZN18SimpleStringBuffer3addEPKcz+0x8c>

    va_list arguments;
    va_start(arguments, format);
 8014c96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014c9a:	60fb      	str	r3, [r7, #12]
    const int count = PlatformSpecificVSNprintf(buffer_ + positions_filled_, positions_left+1, format, arguments);
 8014c9c:	4b1b      	ldr	r3, [pc, #108]	; (8014d0c <_ZN18SimpleStringBuffer3addEPKcz+0x9c>)
 8014c9e:	681c      	ldr	r4, [r3, #0]
 8014ca0:	687a      	ldr	r2, [r7, #4]
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	18d0      	adds	r0, r2, r3
 8014cac:	697b      	ldr	r3, [r7, #20]
 8014cae:	1c59      	adds	r1, r3, #1
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014cb4:	47a0      	blx	r4
 8014cb6:	6138      	str	r0, [r7, #16]
    if (count > 0) positions_filled_ += (size_t) count;
 8014cb8:	693b      	ldr	r3, [r7, #16]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	dd09      	ble.n	8014cd2 <_ZN18SimpleStringBuffer3addEPKcz+0x62>
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014cc4:	681a      	ldr	r2, [r3, #0]
 8014cc6:	693b      	ldr	r3, [r7, #16]
 8014cc8:	441a      	add	r2, r3
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014cd0:	601a      	str	r2, [r3, #0]
    if (positions_filled_ > write_limit_) positions_filled_ = write_limit_;
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014cd8:	681a      	ldr	r2, [r3, #0]
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014ce0:	3304      	adds	r3, #4
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	429a      	cmp	r2, r3
 8014ce6:	d90a      	bls.n	8014cfe <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014cee:	3304      	adds	r3, #4
 8014cf0:	681a      	ldr	r2, [r3, #0]
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014cf8:	601a      	str	r2, [r3, #0]
 8014cfa:	e000      	b.n	8014cfe <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
    if (positions_left == 0) return;
 8014cfc:	bf00      	nop
    va_end(arguments);
}
 8014cfe:	3718      	adds	r7, #24
 8014d00:	46bd      	mov	sp, r7
 8014d02:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8014d06:	b003      	add	sp, #12
 8014d08:	4770      	bx	lr
 8014d0a:	bf00      	nop
 8014d0c:	200000b0 	.word	0x200000b0

08014d10 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>:

void SimpleStringBuffer::addMemoryDump(const void* memory, size_t memorySize)
{
 8014d10:	b580      	push	{r7, lr}
 8014d12:	b08c      	sub	sp, #48	; 0x30
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	60f8      	str	r0, [r7, #12]
 8014d18:	60b9      	str	r1, [r7, #8]
 8014d1a:	607a      	str	r2, [r7, #4]
    const unsigned char* byteMemory = (const unsigned char*)memory;
 8014d1c:	68bb      	ldr	r3, [r7, #8]
 8014d1e:	61fb      	str	r3, [r7, #28]
    const size_t maxLineBytes = 16;
 8014d20:	2310      	movs	r3, #16
 8014d22:	61bb      	str	r3, [r7, #24]
    size_t currentPos = 0;
 8014d24:	2300      	movs	r3, #0
 8014d26:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t p;

    while (currentPos < memorySize) {
 8014d28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	429a      	cmp	r2, r3
 8014d2e:	d273      	bcs.n	8014e18 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x108>
        add("    %04lx: ", (unsigned long) currentPos);
 8014d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014d32:	493b      	ldr	r1, [pc, #236]	; (8014e20 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x110>)
 8014d34:	68f8      	ldr	r0, [r7, #12]
 8014d36:	f7ff ff9b 	bl	8014c70 <_ZN18SimpleStringBuffer3addEPKcz>
        size_t bytesInLine = memorySize - currentPos;
 8014d3a:	687a      	ldr	r2, [r7, #4]
 8014d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d3e:	1ad3      	subs	r3, r2, r3
 8014d40:	627b      	str	r3, [r7, #36]	; 0x24
        if (bytesInLine > maxLineBytes) {
 8014d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d44:	2b10      	cmp	r3, #16
 8014d46:	d901      	bls.n	8014d4c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x3c>
            bytesInLine = maxLineBytes;
 8014d48:	2310      	movs	r3, #16
 8014d4a:	627b      	str	r3, [r7, #36]	; 0x24
        }
        const size_t leftoverBytes = maxLineBytes - bytesInLine;
 8014d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d4e:	f1c3 0310 	rsb	r3, r3, #16
 8014d52:	617b      	str	r3, [r7, #20]

        for (p = 0; p < bytesInLine; p++) {
 8014d54:	2300      	movs	r3, #0
 8014d56:	62bb      	str	r3, [r7, #40]	; 0x28
 8014d58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d5c:	429a      	cmp	r2, r3
 8014d5e:	d215      	bcs.n	8014d8c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x7c>
            add("%02hx ", (unsigned short) byteMemory[currentPos + p]);
 8014d60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d64:	4413      	add	r3, r2
 8014d66:	69fa      	ldr	r2, [r7, #28]
 8014d68:	4413      	add	r3, r2
 8014d6a:	781b      	ldrb	r3, [r3, #0]
 8014d6c:	461a      	mov	r2, r3
 8014d6e:	492d      	ldr	r1, [pc, #180]	; (8014e24 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x114>)
 8014d70:	68f8      	ldr	r0, [r7, #12]
 8014d72:	f7ff ff7d 	bl	8014c70 <_ZN18SimpleStringBuffer3addEPKcz>
            if (p == ((maxLineBytes / 2) - 1)) {
 8014d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d78:	2b07      	cmp	r3, #7
 8014d7a:	d103      	bne.n	8014d84 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x74>
                add(" ");
 8014d7c:	492a      	ldr	r1, [pc, #168]	; (8014e28 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8014d7e:	68f8      	ldr	r0, [r7, #12]
 8014d80:	f7ff ff76 	bl	8014c70 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8014d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d86:	3301      	adds	r3, #1
 8014d88:	62bb      	str	r3, [r7, #40]	; 0x28
 8014d8a:	e7e5      	b.n	8014d58 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x48>
            }
        }
        for (p = 0; p < leftoverBytes; p++) {
 8014d8c:	2300      	movs	r3, #0
 8014d8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014d90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014d92:	697b      	ldr	r3, [r7, #20]
 8014d94:	429a      	cmp	r2, r3
 8014d96:	d207      	bcs.n	8014da8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x98>
            add("   ");
 8014d98:	4924      	ldr	r1, [pc, #144]	; (8014e2c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x11c>)
 8014d9a:	68f8      	ldr	r0, [r7, #12]
 8014d9c:	f7ff ff68 	bl	8014c70 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < leftoverBytes; p++) {
 8014da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014da2:	3301      	adds	r3, #1
 8014da4:	62bb      	str	r3, [r7, #40]	; 0x28
 8014da6:	e7f3      	b.n	8014d90 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x80>
        }
        if (leftoverBytes > (maxLineBytes/2)) {
 8014da8:	697b      	ldr	r3, [r7, #20]
 8014daa:	2b08      	cmp	r3, #8
 8014dac:	d903      	bls.n	8014db6 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xa6>
            add(" ");
 8014dae:	491e      	ldr	r1, [pc, #120]	; (8014e28 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8014db0:	68f8      	ldr	r0, [r7, #12]
 8014db2:	f7ff ff5d 	bl	8014c70 <_ZN18SimpleStringBuffer3addEPKcz>
        }

        add("|");
 8014db6:	491e      	ldr	r1, [pc, #120]	; (8014e30 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x120>)
 8014db8:	68f8      	ldr	r0, [r7, #12]
 8014dba:	f7ff ff59 	bl	8014c70 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8014dbe:	2300      	movs	r3, #0
 8014dc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8014dc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dc6:	429a      	cmp	r2, r3
 8014dc8:	d21d      	bcs.n	8014e06 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xf6>
            char toAdd = (char)byteMemory[currentPos + p];
 8014dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dce:	4413      	add	r3, r2
 8014dd0:	69fa      	ldr	r2, [r7, #28]
 8014dd2:	4413      	add	r3, r2
 8014dd4:	781b      	ldrb	r3, [r3, #0]
 8014dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (toAdd < ' ' || toAdd > '~') {
 8014dda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014dde:	2b1f      	cmp	r3, #31
 8014de0:	d903      	bls.n	8014dea <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xda>
 8014de2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014de6:	2b7e      	cmp	r3, #126	; 0x7e
 8014de8:	d902      	bls.n	8014df0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xe0>
                toAdd = '.';
 8014dea:	232e      	movs	r3, #46	; 0x2e
 8014dec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
            add("%c", (int)toAdd);
 8014df0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014df4:	461a      	mov	r2, r3
 8014df6:	490f      	ldr	r1, [pc, #60]	; (8014e34 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x124>)
 8014df8:	68f8      	ldr	r0, [r7, #12]
 8014dfa:	f7ff ff39 	bl	8014c70 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8014dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e00:	3301      	adds	r3, #1
 8014e02:	62bb      	str	r3, [r7, #40]	; 0x28
 8014e04:	e7dd      	b.n	8014dc2 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xb2>
        }
        add("|\n");
 8014e06:	490c      	ldr	r1, [pc, #48]	; (8014e38 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x128>)
 8014e08:	68f8      	ldr	r0, [r7, #12]
 8014e0a:	f7ff ff31 	bl	8014c70 <_ZN18SimpleStringBuffer3addEPKcz>
        currentPos += bytesInLine;
 8014e0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e12:	4413      	add	r3, r2
 8014e14:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (currentPos < memorySize) {
 8014e16:	e787      	b.n	8014d28 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x18>
    }
}
 8014e18:	bf00      	nop
 8014e1a:	3730      	adds	r7, #48	; 0x30
 8014e1c:	46bd      	mov	sp, r7
 8014e1e:	bd80      	pop	{r7, pc}
 8014e20:	08024194 	.word	0x08024194
 8014e24:	080241a0 	.word	0x080241a0
 8014e28:	080241a8 	.word	0x080241a8
 8014e2c:	080241ac 	.word	0x080241ac
 8014e30:	080241b0 	.word	0x080241b0
 8014e34:	080241b4 	.word	0x080241b4
 8014e38:	080241b8 	.word	0x080241b8

08014e3c <_ZN18SimpleStringBuffer8toStringEv>:

char* SimpleStringBuffer::toString()
{
 8014e3c:	b480      	push	{r7}
 8014e3e:	b083      	sub	sp, #12
 8014e40:	af00      	add	r7, sp, #0
 8014e42:	6078      	str	r0, [r7, #4]
    return buffer_;
 8014e44:	687b      	ldr	r3, [r7, #4]
}
 8014e46:	4618      	mov	r0, r3
 8014e48:	370c      	adds	r7, #12
 8014e4a:	46bd      	mov	sp, r7
 8014e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e50:	4770      	bx	lr

08014e52 <_ZN18SimpleStringBuffer13setWriteLimitEj>:

void SimpleStringBuffer::setWriteLimit(size_t write_limit)
{
 8014e52:	b480      	push	{r7}
 8014e54:	b083      	sub	sp, #12
 8014e56:	af00      	add	r7, sp, #0
 8014e58:	6078      	str	r0, [r7, #4]
 8014e5a:	6039      	str	r1, [r7, #0]
    write_limit_ = write_limit;
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014e62:	3304      	adds	r3, #4
 8014e64:	683a      	ldr	r2, [r7, #0]
 8014e66:	601a      	str	r2, [r3, #0]
    if (write_limit_ > SIMPLE_STRING_BUFFER_LEN-1)
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014e6e:	3304      	adds	r3, #4
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014e76:	d306      	bcc.n	8014e86 <_ZN18SimpleStringBuffer13setWriteLimitEj+0x34>
        write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014e7e:	3304      	adds	r3, #4
 8014e80:	f640 72ff 	movw	r2, #4095	; 0xfff
 8014e84:	601a      	str	r2, [r3, #0]
}
 8014e86:	bf00      	nop
 8014e88:	370c      	adds	r7, #12
 8014e8a:	46bd      	mov	sp, r7
 8014e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e90:	4770      	bx	lr

08014e92 <_ZN18SimpleStringBuffer15resetWriteLimitEv>:
void SimpleStringBuffer::resetWriteLimit()
{
 8014e92:	b480      	push	{r7}
 8014e94:	b083      	sub	sp, #12
 8014e96:	af00      	add	r7, sp, #0
 8014e98:	6078      	str	r0, [r7, #4]
    write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014ea0:	3304      	adds	r3, #4
 8014ea2:	f640 72ff 	movw	r2, #4095	; 0xfff
 8014ea6:	601a      	str	r2, [r3, #0]
}
 8014ea8:	bf00      	nop
 8014eaa:	370c      	adds	r7, #12
 8014eac:	46bd      	mov	sp, r7
 8014eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb2:	4770      	bx	lr

08014eb4 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>:

bool SimpleStringBuffer::reachedItsCapacity()
{
 8014eb4:	b480      	push	{r7}
 8014eb6:	b083      	sub	sp, #12
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	6078      	str	r0, [r7, #4]
    return positions_filled_ >= write_limit_;
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014ec2:	681a      	ldr	r2, [r3, #0]
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014eca:	3304      	adds	r3, #4
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	429a      	cmp	r2, r3
 8014ed0:	bf2c      	ite	cs
 8014ed2:	2301      	movcs	r3, #1
 8014ed4:	2300      	movcc	r3, #0
 8014ed6:	b2db      	uxtb	r3, r3
}
 8014ed8:	4618      	mov	r0, r3
 8014eda:	370c      	adds	r7, #12
 8014edc:	46bd      	mov	sp, r7
 8014ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ee2:	4770      	bx	lr

08014ee4 <_ZN28MemoryLeakOutputStringBufferC1Ev>:
#define MEM_LEAK_ADDITION_MALLOC_WARNING "NOTE:\n" \
                                         "\tMemory leak reports about malloc and free can be caused by allocating using the cpputest version of malloc,\n" \
                                         "\tbut deallocate using the standard free.\n" \
                                         "\tIf this is the case, check whether your malloc/free replacements are working (#define malloc cpputest_malloc etc).\n"

MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	b082      	sub	sp, #8
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	6078      	str	r0, [r7, #4]
    : total_leaks_(0), giveWarningOnUsingMalloc_(false)
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	2200      	movs	r2, #0
 8014ef0:	601a      	str	r2, [r3, #0]
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	2200      	movs	r2, #0
 8014ef6:	711a      	strb	r2, [r3, #4]
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	3308      	adds	r3, #8
 8014efc:	4618      	mov	r0, r3
 8014efe:	f7ff fe8b 	bl	8014c18 <_ZN18SimpleStringBufferC1Ev>
{
}
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	4618      	mov	r0, r3
 8014f06:	3708      	adds	r7, #8
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	bd80      	pop	{r7, pc}

08014f0c <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addAllocationLocation(const char* allocationFile, size_t allocationLineNumber, size_t allocationSize, TestMemoryAllocator* allocator)
{
 8014f0c:	b5b0      	push	{r4, r5, r7, lr}
 8014f0e:	b086      	sub	sp, #24
 8014f10:	af02      	add	r7, sp, #8
 8014f12:	60f8      	str	r0, [r7, #12]
 8014f14:	60b9      	str	r1, [r7, #8]
 8014f16:	607a      	str	r2, [r7, #4]
 8014f18:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   allocated at file: %s line: %d size: %lu type: %s\n", allocationFile, (int) allocationLineNumber, (unsigned long) allocationSize, allocator->alloc_name());
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	f103 0408 	add.w	r4, r3, #8
 8014f20:	687d      	ldr	r5, [r7, #4]
 8014f22:	6a3b      	ldr	r3, [r7, #32]
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	3314      	adds	r3, #20
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	6a38      	ldr	r0, [r7, #32]
 8014f2c:	4798      	blx	r3
 8014f2e:	4603      	mov	r3, r0
 8014f30:	9301      	str	r3, [sp, #4]
 8014f32:	683b      	ldr	r3, [r7, #0]
 8014f34:	9300      	str	r3, [sp, #0]
 8014f36:	462b      	mov	r3, r5
 8014f38:	68ba      	ldr	r2, [r7, #8]
 8014f3a:	4904      	ldr	r1, [pc, #16]	; (8014f4c <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator+0x40>)
 8014f3c:	4620      	mov	r0, r4
 8014f3e:	f7ff fe97 	bl	8014c70 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8014f42:	bf00      	nop
 8014f44:	3710      	adds	r7, #16
 8014f46:	46bd      	mov	sp, r7
 8014f48:	bdb0      	pop	{r4, r5, r7, pc}
 8014f4a:	bf00      	nop
 8014f4c:	080241bc 	.word	0x080241bc

08014f50 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addDeallocationLocation(const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* allocator)
{
 8014f50:	b5b0      	push	{r4, r5, r7, lr}
 8014f52:	b086      	sub	sp, #24
 8014f54:	af02      	add	r7, sp, #8
 8014f56:	60f8      	str	r0, [r7, #12]
 8014f58:	60b9      	str	r1, [r7, #8]
 8014f5a:	607a      	str	r2, [r7, #4]
 8014f5c:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   deallocated at file: %s line: %d type: %s\n", freeFile, (int) freeLineNumber, allocator->free_name());
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	f103 0408 	add.w	r4, r3, #8
 8014f64:	687d      	ldr	r5, [r7, #4]
 8014f66:	683b      	ldr	r3, [r7, #0]
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	3318      	adds	r3, #24
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	6838      	ldr	r0, [r7, #0]
 8014f70:	4798      	blx	r3
 8014f72:	4603      	mov	r3, r0
 8014f74:	9300      	str	r3, [sp, #0]
 8014f76:	462b      	mov	r3, r5
 8014f78:	68ba      	ldr	r2, [r7, #8]
 8014f7a:	4904      	ldr	r1, [pc, #16]	; (8014f8c <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator+0x3c>)
 8014f7c:	4620      	mov	r0, r4
 8014f7e:	f7ff fe77 	bl	8014c70 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8014f82:	bf00      	nop
 8014f84:	3710      	adds	r7, #16
 8014f86:	46bd      	mov	sp, r7
 8014f88:	bdb0      	pop	{r4, r5, r7, pc}
 8014f8a:	bf00      	nop
 8014f8c:	080241f4 	.word	0x080241f4

08014f90 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>:

void MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
{
 8014f90:	b580      	push	{r7, lr}
 8014f92:	b082      	sub	sp, #8
 8014f94:	af00      	add	r7, sp, #0
 8014f96:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("No memory leaks were detected.");
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	3308      	adds	r3, #8
 8014f9c:	4903      	ldr	r1, [pc, #12]	; (8014fac <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv+0x1c>)
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	f7ff fe66 	bl	8014c70 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8014fa4:	bf00      	nop
 8014fa6:	3708      	adds	r7, #8
 8014fa8:	46bd      	mov	sp, r7
 8014faa:	bd80      	pop	{r7, pc}
 8014fac:	08024224 	.word	0x08024224

08014fb0 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
{
 8014fb0:	b580      	push	{r7, lr}
 8014fb2:	b084      	sub	sp, #16
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	6078      	str	r0, [r7, #4]
    giveWarningOnUsingMalloc_ = false;
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	2200      	movs	r2, #0
 8014fbc:	711a      	strb	r2, [r3, #4]
    total_leaks_ = 0;
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	2200      	movs	r2, #0
 8014fc2:	601a      	str	r2, [r3, #0]

    size_t memory_leak_normal_footer_size = sizeof(MEM_LEAK_FOOTER) + 10 + sizeof(MEM_LEAK_TOO_MUCH); /* the number of leaks */
 8014fc4:	2367      	movs	r3, #103	; 0x67
 8014fc6:	60fb      	str	r3, [r7, #12]
    size_t memory_leak_foot_size_with_malloc_warning = memory_leak_normal_footer_size + sizeof(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	f203 1311 	addw	r3, r3, #273	; 0x111
 8014fce:	60bb      	str	r3, [r7, #8]

    outputBuffer_.setWriteLimit(SimpleStringBuffer::SIMPLE_STRING_BUFFER_LEN - memory_leak_foot_size_with_malloc_warning);
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	f103 0208 	add.w	r2, r3, #8
 8014fd6:	68bb      	ldr	r3, [r7, #8]
 8014fd8:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8014fdc:	4619      	mov	r1, r3
 8014fde:	4610      	mov	r0, r2
 8014fe0:	f7ff ff37 	bl	8014e52 <_ZN18SimpleStringBuffer13setWriteLimitEj>
}
 8014fe4:	bf00      	nop
 8014fe6:	3710      	adds	r7, #16
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	bd80      	pop	{r7, pc}

08014fec <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>:

void MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode* leak)
{
 8014fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014fee:	b089      	sub	sp, #36	; 0x24
 8014ff0:	af04      	add	r7, sp, #16
 8014ff2:	60f8      	str	r0, [r7, #12]
 8014ff4:	60b9      	str	r1, [r7, #8]
    if (total_leaks_ == 0) {
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d102      	bne.n	8015004 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0x18>
        addMemoryLeakHeader();
 8014ffe:	68f8      	ldr	r0, [r7, #12]
 8015000:	f000 f882 	bl	8015108 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>
    }

    total_leaks_++;
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	1c5a      	adds	r2, r3, #1
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	601a      	str	r2, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	f103 0508 	add.w	r5, r3, #8
 8015014:	68bb      	ldr	r3, [r7, #8]
 8015016:	685e      	ldr	r6, [r3, #4]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8015018:	68bb      	ldr	r3, [r7, #8]
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	607b      	str	r3, [r7, #4]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 801501e:	68bb      	ldr	r3, [r7, #8]
 8015020:	68dc      	ldr	r4, [r3, #12]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8015022:	68bb      	ldr	r3, [r7, #8]
 8015024:	691b      	ldr	r3, [r3, #16]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8015026:	603b      	str	r3, [r7, #0]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8015028:	68bb      	ldr	r3, [r7, #8]
 801502a:	695a      	ldr	r2, [r3, #20]
 801502c:	68bb      	ldr	r3, [r7, #8]
 801502e:	695b      	ldr	r3, [r3, #20]
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	3314      	adds	r3, #20
 8015034:	681b      	ldr	r3, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8015036:	4610      	mov	r0, r2
 8015038:	4798      	blx	r3
 801503a:	4602      	mov	r2, r0
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 801503c:	68bb      	ldr	r3, [r7, #8]
 801503e:	689b      	ldr	r3, [r3, #8]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8015040:	9303      	str	r3, [sp, #12]
 8015042:	9202      	str	r2, [sp, #8]
 8015044:	683a      	ldr	r2, [r7, #0]
 8015046:	9201      	str	r2, [sp, #4]
 8015048:	9400      	str	r4, [sp, #0]
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	4632      	mov	r2, r6
 801504e:	4915      	ldr	r1, [pc, #84]	; (80150a4 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb8>)
 8015050:	4628      	mov	r0, r5
 8015052:	f7ff fe0d 	bl	8014c70 <_ZN18SimpleStringBuffer3addEPKcz>
    outputBuffer_.addMemoryDump(leak->memory_, leak->size_);
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	f103 0008 	add.w	r0, r3, #8
 801505c:	68bb      	ldr	r3, [r7, #8]
 801505e:	6899      	ldr	r1, [r3, #8]
 8015060:	68bb      	ldr	r3, [r7, #8]
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	461a      	mov	r2, r3
 8015066:	f7ff fe53 	bl	8014d10 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>

    if (SimpleString::StrCmp(leak->allocator_->alloc_name(), (const char*) "malloc") == 0)
 801506a:	68bb      	ldr	r3, [r7, #8]
 801506c:	695a      	ldr	r2, [r3, #20]
 801506e:	68bb      	ldr	r3, [r7, #8]
 8015070:	695b      	ldr	r3, [r3, #20]
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	3314      	adds	r3, #20
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	4610      	mov	r0, r2
 801507a:	4798      	blx	r3
 801507c:	4603      	mov	r3, r0
 801507e:	490a      	ldr	r1, [pc, #40]	; (80150a8 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xbc>)
 8015080:	4618      	mov	r0, r3
 8015082:	f7f6 f887 	bl	800b194 <_ZN12SimpleString6StrCmpEPKcS1_>
 8015086:	4603      	mov	r3, r0
 8015088:	2b00      	cmp	r3, #0
 801508a:	bf0c      	ite	eq
 801508c:	2301      	moveq	r3, #1
 801508e:	2300      	movne	r3, #0
 8015090:	b2db      	uxtb	r3, r3
 8015092:	2b00      	cmp	r3, #0
 8015094:	d002      	beq.n	801509c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb0>
        giveWarningOnUsingMalloc_ = true;
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	2201      	movs	r2, #1
 801509a:	711a      	strb	r2, [r3, #4]
}
 801509c:	bf00      	nop
 801509e:	3714      	adds	r7, #20
 80150a0:	46bd      	mov	sp, r7
 80150a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150a4:	08024244 	.word	0x08024244
 80150a8:	080242a4 	.word	0x080242a4

080150ac <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b084      	sub	sp, #16
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	6078      	str	r0, [r7, #4]
    if (total_leaks_ == 0) {
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d103      	bne.n	80150c4 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x18>
        addNoMemoryLeaksMessage();
 80150bc:	6878      	ldr	r0, [r7, #4]
 80150be:	f7ff ff67 	bl	8014f90 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>
        return;
 80150c2:	e01e      	b.n	8015102 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
    }

    bool buffer_reached_its_capacity = outputBuffer_.reachedItsCapacity();
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	3308      	adds	r3, #8
 80150c8:	4618      	mov	r0, r3
 80150ca:	f7ff fef3 	bl	8014eb4 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>
 80150ce:	4603      	mov	r3, r0
 80150d0:	73fb      	strb	r3, [r7, #15]
    outputBuffer_.resetWriteLimit();
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	3308      	adds	r3, #8
 80150d6:	4618      	mov	r0, r3
 80150d8:	f7ff fedb 	bl	8014e92 <_ZN18SimpleStringBuffer15resetWriteLimitEv>

    if (buffer_reached_its_capacity)
 80150dc:	7bfb      	ldrb	r3, [r7, #15]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d002      	beq.n	80150e8 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x3c>
        addErrorMessageForTooMuchLeaks();
 80150e2:	6878      	ldr	r0, [r7, #4]
 80150e4:	f000 f820 	bl	8015128 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>

    addMemoryLeakFooter(total_leaks_);
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	4619      	mov	r1, r3
 80150ee:	6878      	ldr	r0, [r7, #4]
 80150f0:	f000 f82a 	bl	8015148 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>

    if (giveWarningOnUsingMalloc_)
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	791b      	ldrb	r3, [r3, #4]
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d002      	beq.n	8015102 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
        addWarningForUsingMalloc();
 80150fc:	6878      	ldr	r0, [r7, #4]
 80150fe:	f000 f839 	bl	8015174 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>

}
 8015102:	3710      	adds	r7, #16
 8015104:	46bd      	mov	sp, r7
 8015106:	bd80      	pop	{r7, pc}

08015108 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>:

void MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
{
 8015108:	b580      	push	{r7, lr}
 801510a:	b082      	sub	sp, #8
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("Memory leak(s) found.\n");
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	3308      	adds	r3, #8
 8015114:	4903      	ldr	r1, [pc, #12]	; (8015124 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv+0x1c>)
 8015116:	4618      	mov	r0, r3
 8015118:	f7ff fdaa 	bl	8014c70 <_ZN18SimpleStringBuffer3addEPKcz>
}
 801511c:	bf00      	nop
 801511e:	3708      	adds	r7, #8
 8015120:	46bd      	mov	sp, r7
 8015122:	bd80      	pop	{r7, pc}
 8015124:	080242ac 	.word	0x080242ac

08015128 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>:

void MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
{
 8015128:	b580      	push	{r7, lr}
 801512a:	b082      	sub	sp, #8
 801512c:	af00      	add	r7, sp, #0
 801512e:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_TOO_MUCH);
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	3308      	adds	r3, #8
 8015134:	4903      	ldr	r1, [pc, #12]	; (8015144 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv+0x1c>)
 8015136:	4618      	mov	r0, r3
 8015138:	f7ff fd9a 	bl	8014c70 <_ZN18SimpleStringBuffer3addEPKcz>
}
 801513c:	bf00      	nop
 801513e:	3708      	adds	r7, #8
 8015140:	46bd      	mov	sp, r7
 8015142:	bd80      	pop	{r7, pc}
 8015144:	080242c4 	.word	0x080242c4

08015148 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>:

void MemoryLeakOutputStringBuffer::addMemoryLeakFooter(size_t amountOfLeaks)
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b082      	sub	sp, #8
 801514c:	af00      	add	r7, sp, #0
 801514e:	6078      	str	r0, [r7, #4]
 8015150:	6039      	str	r1, [r7, #0]
    outputBuffer_.add("%s %d\n", MEM_LEAK_FOOTER, (int) amountOfLeaks);
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	f103 0008 	add.w	r0, r3, #8
 8015158:	683b      	ldr	r3, [r7, #0]
 801515a:	4a04      	ldr	r2, [pc, #16]	; (801516c <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x24>)
 801515c:	4904      	ldr	r1, [pc, #16]	; (8015170 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x28>)
 801515e:	f7ff fd87 	bl	8014c70 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8015162:	bf00      	nop
 8015164:	3708      	adds	r7, #8
 8015166:	46bd      	mov	sp, r7
 8015168:	bd80      	pop	{r7, pc}
 801516a:	bf00      	nop
 801516c:	0802430c 	.word	0x0802430c
 8015170:	08024324 	.word	0x08024324

08015174 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>:

void MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
{
 8015174:	b580      	push	{r7, lr}
 8015176:	b082      	sub	sp, #8
 8015178:	af00      	add	r7, sp, #0
 801517a:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_ADDITION_MALLOC_WARNING);
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	3308      	adds	r3, #8
 8015180:	4903      	ldr	r1, [pc, #12]	; (8015190 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv+0x1c>)
 8015182:	4618      	mov	r0, r3
 8015184:	f7ff fd74 	bl	8014c70 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8015188:	bf00      	nop
 801518a:	3708      	adds	r7, #8
 801518c:	46bd      	mov	sp, r7
 801518e:	bd80      	pop	{r7, pc}
 8015190:	0802432c 	.word	0x0802432c

08015194 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char* freeFile, size_t freeLine, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8015194:	b580      	push	{r7, lr}
 8015196:	b08a      	sub	sp, #40	; 0x28
 8015198:	af06      	add	r7, sp, #24
 801519a:	60f8      	str	r0, [r7, #12]
 801519c:	60b9      	str	r1, [r7, #8]
 801519e:	607a      	str	r2, [r7, #4]
 80151a0:	603b      	str	r3, [r7, #0]
    reportFailure("Deallocating non-allocated memory\n", "<unknown>", 0, 0, NullUnknownAllocator::defaultAllocator(), freeFile, freeLine, freeAllocator, reporter);
 80151a2:	f7f9 fe8d 	bl	800eec0 <_ZN20NullUnknownAllocator16defaultAllocatorEv>
 80151a6:	4602      	mov	r2, r0
 80151a8:	69bb      	ldr	r3, [r7, #24]
 80151aa:	9305      	str	r3, [sp, #20]
 80151ac:	683b      	ldr	r3, [r7, #0]
 80151ae:	9304      	str	r3, [sp, #16]
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	9303      	str	r3, [sp, #12]
 80151b4:	68bb      	ldr	r3, [r7, #8]
 80151b6:	9302      	str	r3, [sp, #8]
 80151b8:	9201      	str	r2, [sp, #4]
 80151ba:	2300      	movs	r3, #0
 80151bc:	9300      	str	r3, [sp, #0]
 80151be:	2300      	movs	r3, #0
 80151c0:	4a04      	ldr	r2, [pc, #16]	; (80151d4 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x40>)
 80151c2:	4905      	ldr	r1, [pc, #20]	; (80151d8 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x44>)
 80151c4:	68f8      	ldr	r0, [r7, #12]
 80151c6:	f000 f855 	bl	8015274 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 80151ca:	bf00      	nop
 80151cc:	3710      	adds	r7, #16
 80151ce:	46bd      	mov	sp, r7
 80151d0:	bd80      	pop	{r7, pc}
 80151d2:	bf00      	nop
 80151d4:	08024188 	.word	0x08024188
 80151d8:	08024440 	.word	0x08024440

080151dc <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 80151dc:	b590      	push	{r4, r7, lr}
 80151de:	b08b      	sub	sp, #44	; 0x2c
 80151e0:	af06      	add	r7, sp, #24
 80151e2:	60f8      	str	r0, [r7, #12]
 80151e4:	60b9      	str	r1, [r7, #8]
 80151e6:	607a      	str	r2, [r7, #4]
 80151e8:	603b      	str	r3, [r7, #0]
    reportFailure("Allocation/deallocation type mismatch\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 80151ea:	68bb      	ldr	r3, [r7, #8]
 80151ec:	68d8      	ldr	r0, [r3, #12]
 80151ee:	68bb      	ldr	r3, [r7, #8]
 80151f0:	691c      	ldr	r4, [r3, #16]
 80151f2:	68bb      	ldr	r3, [r7, #8]
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	68ba      	ldr	r2, [r7, #8]
 80151f8:	6952      	ldr	r2, [r2, #20]
 80151fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80151fc:	9105      	str	r1, [sp, #20]
 80151fe:	6a39      	ldr	r1, [r7, #32]
 8015200:	9104      	str	r1, [sp, #16]
 8015202:	6839      	ldr	r1, [r7, #0]
 8015204:	9103      	str	r1, [sp, #12]
 8015206:	6879      	ldr	r1, [r7, #4]
 8015208:	9102      	str	r1, [sp, #8]
 801520a:	9201      	str	r2, [sp, #4]
 801520c:	9300      	str	r3, [sp, #0]
 801520e:	4623      	mov	r3, r4
 8015210:	4602      	mov	r2, r0
 8015212:	4904      	ldr	r1, [pc, #16]	; (8015224 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8015214:	68f8      	ldr	r0, [r7, #12]
 8015216:	f000 f82d 	bl	8015274 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 801521a:	bf00      	nop
 801521c:	3714      	adds	r7, #20
 801521e:	46bd      	mov	sp, r7
 8015220:	bd90      	pop	{r4, r7, pc}
 8015222:	bf00      	nop
 8015224:	08024464 	.word	0x08024464

08015228 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8015228:	b590      	push	{r4, r7, lr}
 801522a:	b08b      	sub	sp, #44	; 0x2c
 801522c:	af06      	add	r7, sp, #24
 801522e:	60f8      	str	r0, [r7, #12]
 8015230:	60b9      	str	r1, [r7, #8]
 8015232:	607a      	str	r2, [r7, #4]
 8015234:	603b      	str	r3, [r7, #0]
        reportFailure("Memory corruption (written out of bounds?)\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8015236:	68bb      	ldr	r3, [r7, #8]
 8015238:	68d8      	ldr	r0, [r3, #12]
 801523a:	68bb      	ldr	r3, [r7, #8]
 801523c:	691c      	ldr	r4, [r3, #16]
 801523e:	68bb      	ldr	r3, [r7, #8]
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	68ba      	ldr	r2, [r7, #8]
 8015244:	6952      	ldr	r2, [r2, #20]
 8015246:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015248:	9105      	str	r1, [sp, #20]
 801524a:	6a39      	ldr	r1, [r7, #32]
 801524c:	9104      	str	r1, [sp, #16]
 801524e:	6839      	ldr	r1, [r7, #0]
 8015250:	9103      	str	r1, [sp, #12]
 8015252:	6879      	ldr	r1, [r7, #4]
 8015254:	9102      	str	r1, [sp, #8]
 8015256:	9201      	str	r2, [sp, #4]
 8015258:	9300      	str	r3, [sp, #0]
 801525a:	4623      	mov	r3, r4
 801525c:	4602      	mov	r2, r0
 801525e:	4904      	ldr	r1, [pc, #16]	; (8015270 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8015260:	68f8      	ldr	r0, [r7, #12]
 8015262:	f000 f807 	bl	8015274 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8015266:	bf00      	nop
 8015268:	3714      	adds	r7, #20
 801526a:	46bd      	mov	sp, r7
 801526c:	bd90      	pop	{r4, r7, pc}
 801526e:	bf00      	nop
 8015270:	0802448c 	.word	0x0802448c

08015274 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportFailure(const char* message, const char* allocFile, size_t allocLine, size_t allocSize, TestMemoryAllocator* allocAllocator, const char* freeFile, size_t freeLine,
        TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8015274:	b590      	push	{r4, r7, lr}
 8015276:	b087      	sub	sp, #28
 8015278:	af02      	add	r7, sp, #8
 801527a:	60f8      	str	r0, [r7, #12]
 801527c:	60b9      	str	r1, [r7, #8]
 801527e:	607a      	str	r2, [r7, #4]
 8015280:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("%s", message);
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	3308      	adds	r3, #8
 8015286:	68ba      	ldr	r2, [r7, #8]
 8015288:	4910      	ldr	r1, [pc, #64]	; (80152cc <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure+0x58>)
 801528a:	4618      	mov	r0, r3
 801528c:	f7ff fcf0 	bl	8014c70 <_ZN18SimpleStringBuffer3addEPKcz>
    addAllocationLocation(allocFile, allocLine, allocSize, allocAllocator);
 8015290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015292:	9300      	str	r3, [sp, #0]
 8015294:	6a3b      	ldr	r3, [r7, #32]
 8015296:	683a      	ldr	r2, [r7, #0]
 8015298:	6879      	ldr	r1, [r7, #4]
 801529a:	68f8      	ldr	r0, [r7, #12]
 801529c:	f7ff fe36 	bl	8014f0c <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>
    addDeallocationLocation(freeFile, freeLine, freeAllocator);
 80152a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80152a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80152a6:	68f8      	ldr	r0, [r7, #12]
 80152a8:	f7ff fe52 	bl	8014f50 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>
    reporter->fail(toString());
 80152ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	3308      	adds	r3, #8
 80152b2:	681c      	ldr	r4, [r3, #0]
 80152b4:	68f8      	ldr	r0, [r7, #12]
 80152b6:	f000 f80b 	bl	80152d0 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 80152ba:	4603      	mov	r3, r0
 80152bc:	4619      	mov	r1, r3
 80152be:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80152c0:	47a0      	blx	r4
}
 80152c2:	bf00      	nop
 80152c4:	3714      	adds	r7, #20
 80152c6:	46bd      	mov	sp, r7
 80152c8:	bd90      	pop	{r4, r7, pc}
 80152ca:	bf00      	nop
 80152cc:	080244b8 	.word	0x080244b8

080152d0 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>:


char* MemoryLeakOutputStringBuffer::toString()
{
 80152d0:	b580      	push	{r7, lr}
 80152d2:	b082      	sub	sp, #8
 80152d4:	af00      	add	r7, sp, #0
 80152d6:	6078      	str	r0, [r7, #4]
    return outputBuffer_.toString();
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	3308      	adds	r3, #8
 80152dc:	4618      	mov	r0, r3
 80152de:	f7ff fdad 	bl	8014e3c <_ZN18SimpleStringBuffer8toStringEv>
 80152e2:	4603      	mov	r3, r0
}
 80152e4:	4618      	mov	r0, r3
 80152e6:	3708      	adds	r7, #8
 80152e8:	46bd      	mov	sp, r7
 80152ea:	bd80      	pop	{r7, pc}

080152ec <_ZN28MemoryLeakOutputStringBuffer5clearEv>:

void MemoryLeakOutputStringBuffer::clear()
{
 80152ec:	b580      	push	{r7, lr}
 80152ee:	b082      	sub	sp, #8
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	3308      	adds	r3, #8
 80152f8:	4618      	mov	r0, r3
 80152fa:	f7ff fca7 	bl	8014c4c <_ZN18SimpleStringBuffer5clearEv>
}
 80152fe:	bf00      	nop
 8015300:	3708      	adds	r7, #8
 8015302:	46bd      	mov	sp, r7
 8015304:	bd80      	pop	{r7, pc}

08015306 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>:

////////////////////////

void MemoryLeakDetectorNode::init(char* memory, unsigned number, size_t size, TestMemoryAllocator* allocator, MemLeakPeriod period, unsigned char allocation_stage, const char* file, size_t line)
{
 8015306:	b480      	push	{r7}
 8015308:	b085      	sub	sp, #20
 801530a:	af00      	add	r7, sp, #0
 801530c:	60f8      	str	r0, [r7, #12]
 801530e:	60b9      	str	r1, [r7, #8]
 8015310:	607a      	str	r2, [r7, #4]
 8015312:	603b      	str	r3, [r7, #0]
    number_ = number;
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	687a      	ldr	r2, [r7, #4]
 8015318:	605a      	str	r2, [r3, #4]
    memory_ = memory;
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	68ba      	ldr	r2, [r7, #8]
 801531e:	609a      	str	r2, [r3, #8]
    size_ = size;
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	683a      	ldr	r2, [r7, #0]
 8015324:	601a      	str	r2, [r3, #0]
    allocator_ = allocator;
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	69ba      	ldr	r2, [r7, #24]
 801532a:	615a      	str	r2, [r3, #20]
    period_ = period;
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	7f3a      	ldrb	r2, [r7, #28]
 8015330:	761a      	strb	r2, [r3, #24]
    allocation_stage_ = allocation_stage;
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	f897 2020 	ldrb.w	r2, [r7, #32]
 8015338:	765a      	strb	r2, [r3, #25]
    file_ = file;
 801533a:	68fb      	ldr	r3, [r7, #12]
 801533c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801533e:	60da      	str	r2, [r3, #12]
    line_ = line;
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015344:	611a      	str	r2, [r3, #16]
}
 8015346:	bf00      	nop
 8015348:	3714      	adds	r7, #20
 801534a:	46bd      	mov	sp, r7
 801534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015350:	4770      	bx	lr

08015352 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>:

///////////////////////

bool MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8015352:	b480      	push	{r7}
 8015354:	b085      	sub	sp, #20
 8015356:	af00      	add	r7, sp, #0
 8015358:	60f8      	str	r0, [r7, #12]
 801535a:	60b9      	str	r1, [r7, #8]
 801535c:	4613      	mov	r3, r2
 801535e:	71fb      	strb	r3, [r7, #7]
    return period == mem_leak_period_all || node->period_ == period || (node->period_ != mem_leak_period_disabled && period == mem_leak_period_enabled);
 8015360:	79fb      	ldrb	r3, [r7, #7]
 8015362:	2b00      	cmp	r3, #0
 8015364:	d00b      	beq.n	801537e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 8015366:	68bb      	ldr	r3, [r7, #8]
 8015368:	7e1b      	ldrb	r3, [r3, #24]
 801536a:	79fa      	ldrb	r2, [r7, #7]
 801536c:	429a      	cmp	r2, r3
 801536e:	d006      	beq.n	801537e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 8015370:	68bb      	ldr	r3, [r7, #8]
 8015372:	7e1b      	ldrb	r3, [r3, #24]
 8015374:	2b01      	cmp	r3, #1
 8015376:	d004      	beq.n	8015382 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8015378:	79fb      	ldrb	r3, [r7, #7]
 801537a:	2b02      	cmp	r3, #2
 801537c:	d101      	bne.n	8015382 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 801537e:	2301      	movs	r3, #1
 8015380:	e000      	b.n	8015384 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x32>
 8015382:	2300      	movs	r3, #0
}
 8015384:	4618      	mov	r0, r3
 8015386:	3714      	adds	r7, #20
 8015388:	46bd      	mov	sp, r7
 801538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801538e:	4770      	bx	lr

08015390 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>:
        cur = cur->next_;
    }
}

void MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode* node)
{
 8015390:	b480      	push	{r7}
 8015392:	b083      	sub	sp, #12
 8015394:	af00      	add	r7, sp, #0
 8015396:	6078      	str	r0, [r7, #4]
 8015398:	6039      	str	r1, [r7, #0]
    node->next_ = head_;
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	681a      	ldr	r2, [r3, #0]
 801539e:	683b      	ldr	r3, [r7, #0]
 80153a0:	61da      	str	r2, [r3, #28]
    head_ = node;
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	683a      	ldr	r2, [r7, #0]
 80153a6:	601a      	str	r2, [r3, #0]
}
 80153a8:	bf00      	nop
 80153aa:	370c      	adds	r7, #12
 80153ac:	46bd      	mov	sp, r7
 80153ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b2:	4770      	bx	lr

080153b4 <_ZN22MemoryLeakDetectorList10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::removeNode(char* memory)
{
 80153b4:	b480      	push	{r7}
 80153b6:	b085      	sub	sp, #20
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	6078      	str	r0, [r7, #4]
 80153bc:	6039      	str	r1, [r7, #0]
    MemoryLeakDetectorNode* cur = head_;
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	681b      	ldr	r3, [r3, #0]
 80153c2:	60fb      	str	r3, [r7, #12]
    MemoryLeakDetectorNode* prev = NULLPTR;
 80153c4:	2300      	movs	r3, #0
 80153c6:	60bb      	str	r3, [r7, #8]
    while (cur) {
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d019      	beq.n	8015402 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x4e>
        if (cur->memory_ == memory) {
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	689b      	ldr	r3, [r3, #8]
 80153d2:	683a      	ldr	r2, [r7, #0]
 80153d4:	429a      	cmp	r2, r3
 80153d6:	d10e      	bne.n	80153f6 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x42>
            if (prev) {
 80153d8:	68bb      	ldr	r3, [r7, #8]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d005      	beq.n	80153ea <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x36>
                prev->next_ = cur->next_;
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	69da      	ldr	r2, [r3, #28]
 80153e2:	68bb      	ldr	r3, [r7, #8]
 80153e4:	61da      	str	r2, [r3, #28]
                return cur;
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	e00c      	b.n	8015404 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
            else {
                head_ = cur->next_;
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	69da      	ldr	r2, [r3, #28]
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	601a      	str	r2, [r3, #0]
                return cur;
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	e006      	b.n	8015404 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
        }
        prev = cur;
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	60bb      	str	r3, [r7, #8]
        cur = cur->next_;
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	69db      	ldr	r3, [r3, #28]
 80153fe:	60fb      	str	r3, [r7, #12]
    while (cur) {
 8015400:	e7e2      	b.n	80153c8 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x14>
    }
    return NULLPTR;
 8015402:	2300      	movs	r3, #0
}
 8015404:	4618      	mov	r0, r3
 8015406:	3714      	adds	r7, #20
 8015408:	46bd      	mov	sp, r7
 801540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801540e:	4770      	bx	lr

08015410 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::retrieveNode(char* memory)
{
 8015410:	b480      	push	{r7}
 8015412:	b085      	sub	sp, #20
 8015414:	af00      	add	r7, sp, #0
 8015416:	6078      	str	r0, [r7, #4]
 8015418:	6039      	str	r1, [r7, #0]
  MemoryLeakDetectorNode* cur = head_;
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	2b00      	cmp	r3, #0
 8015424:	d00a      	beq.n	801543c <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2c>
    if (cur->memory_ == memory)
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	689b      	ldr	r3, [r3, #8]
 801542a:	683a      	ldr	r2, [r7, #0]
 801542c:	429a      	cmp	r2, r3
 801542e:	d101      	bne.n	8015434 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x24>
      return cur;
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	e004      	b.n	801543e <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2e>
    cur = cur->next_;
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	69db      	ldr	r3, [r3, #28]
 8015438:	60fb      	str	r3, [r7, #12]
  while (cur) {
 801543a:	e7f1      	b.n	8015420 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x10>
  }
  return NULLPTR;
 801543c:	2300      	movs	r3, #0
}
 801543e:	4618      	mov	r0, r3
 8015440:	3714      	adds	r7, #20
 8015442:	46bd      	mov	sp, r7
 8015444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015448:	4770      	bx	lr

0801544a <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 801544a:	b580      	push	{r7, lr}
 801544c:	b086      	sub	sp, #24
 801544e:	af00      	add	r7, sp, #0
 8015450:	60f8      	str	r0, [r7, #12]
 8015452:	60b9      	str	r1, [r7, #8]
 8015454:	4613      	mov	r3, r2
 8015456:	71fb      	strb	r3, [r7, #7]
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8015458:	68bb      	ldr	r3, [r7, #8]
 801545a:	617b      	str	r3, [r7, #20]
 801545c:	697b      	ldr	r3, [r7, #20]
 801545e:	2b00      	cmp	r3, #0
 8015460:	d00e      	beq.n	8015480 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x36>
        if (isInPeriod(cur, period)) return cur;
 8015462:	79fb      	ldrb	r3, [r7, #7]
 8015464:	461a      	mov	r2, r3
 8015466:	6979      	ldr	r1, [r7, #20]
 8015468:	68f8      	ldr	r0, [r7, #12]
 801546a:	f7ff ff72 	bl	8015352 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 801546e:	4603      	mov	r3, r0
 8015470:	2b00      	cmp	r3, #0
 8015472:	d001      	beq.n	8015478 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2e>
 8015474:	697b      	ldr	r3, [r7, #20]
 8015476:	e004      	b.n	8015482 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x38>
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8015478:	697b      	ldr	r3, [r7, #20]
 801547a:	69db      	ldr	r3, [r3, #28]
 801547c:	617b      	str	r3, [r7, #20]
 801547e:	e7ed      	b.n	801545c <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x12>
    return NULLPTR;
 8015480:	2300      	movs	r3, #0
}
 8015482:	4618      	mov	r0, r3
 8015484:	3718      	adds	r7, #24
 8015486:	46bd      	mov	sp, r7
 8015488:	bd80      	pop	{r7, pc}

0801548a <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>:
        if (isInAllocationStage(cur, allocation_stage)) return cur;
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod period)
{
 801548a:	b580      	push	{r7, lr}
 801548c:	b082      	sub	sp, #8
 801548e:	af00      	add	r7, sp, #0
 8015490:	6078      	str	r0, [r7, #4]
 8015492:	460b      	mov	r3, r1
 8015494:	70fb      	strb	r3, [r7, #3]
    return getLeakFrom(head_, period);
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	78fa      	ldrb	r2, [r7, #3]
 801549c:	4619      	mov	r1, r3
 801549e:	6878      	ldr	r0, [r7, #4]
 80154a0:	f7ff ffd3 	bl	801544a <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80154a4:	4603      	mov	r3, r0
}
 80154a6:	4618      	mov	r0, r3
 80154a8:	3708      	adds	r7, #8
 80154aa:	46bd      	mov	sp, r7
 80154ac:	bd80      	pop	{r7, pc}

080154ae <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
{
    return getLeakForAllocationStageFrom(head_, allocation_stage);
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 80154ae:	b580      	push	{r7, lr}
 80154b0:	b084      	sub	sp, #16
 80154b2:	af00      	add	r7, sp, #0
 80154b4:	60f8      	str	r0, [r7, #12]
 80154b6:	60b9      	str	r1, [r7, #8]
 80154b8:	4613      	mov	r3, r2
 80154ba:	71fb      	strb	r3, [r7, #7]
    return getLeakFrom(node->next_, period);
 80154bc:	68bb      	ldr	r3, [r7, #8]
 80154be:	69db      	ldr	r3, [r3, #28]
 80154c0:	79fa      	ldrb	r2, [r7, #7]
 80154c2:	4619      	mov	r1, r3
 80154c4:	68f8      	ldr	r0, [r7, #12]
 80154c6:	f7ff ffc0 	bl	801544a <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80154ca:	4603      	mov	r3, r0
}
 80154cc:	4618      	mov	r0, r3
 80154ce:	3710      	adds	r7, #16
 80154d0:	46bd      	mov	sp, r7
 80154d2:	bd80      	pop	{r7, pc}

080154d4 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>:
}



size_t MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod period)
{
 80154d4:	b580      	push	{r7, lr}
 80154d6:	b084      	sub	sp, #16
 80154d8:	af00      	add	r7, sp, #0
 80154da:	6078      	str	r0, [r7, #4]
 80154dc:	460b      	mov	r3, r1
 80154de:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 80154e0:	2300      	movs	r3, #0
 80154e2:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	681b      	ldr	r3, [r3, #0]
 80154e8:	60bb      	str	r3, [r7, #8]
 80154ea:	68bb      	ldr	r3, [r7, #8]
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d00f      	beq.n	8015510 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x3c>
        if (isInPeriod(node, period)) total_leaks++;
 80154f0:	78fb      	ldrb	r3, [r7, #3]
 80154f2:	461a      	mov	r2, r3
 80154f4:	68b9      	ldr	r1, [r7, #8]
 80154f6:	6878      	ldr	r0, [r7, #4]
 80154f8:	f7ff ff2b 	bl	8015352 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80154fc:	4603      	mov	r3, r0
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d002      	beq.n	8015508 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x34>
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	3301      	adds	r3, #1
 8015506:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8015508:	68bb      	ldr	r3, [r7, #8]
 801550a:	69db      	ldr	r3, [r3, #28]
 801550c:	60bb      	str	r3, [r7, #8]
 801550e:	e7ec      	b.n	80154ea <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x16>
    }
    return total_leaks;
 8015510:	68fb      	ldr	r3, [r7, #12]
}
 8015512:	4618      	mov	r0, r3
 8015514:	3710      	adds	r7, #16
 8015516:	46bd      	mov	sp, r7
 8015518:	bd80      	pop	{r7, pc}
	...

0801551c <_ZN23MemoryLeakDetectorTable4hashEPc>:

/////////////////////////////////////////////////////////////

unsigned long MemoryLeakDetectorTable::hash(char* memory)
{
 801551c:	b480      	push	{r7}
 801551e:	b083      	sub	sp, #12
 8015520:	af00      	add	r7, sp, #0
 8015522:	6078      	str	r0, [r7, #4]
 8015524:	6039      	str	r1, [r7, #0]
    return (unsigned long)((size_t)memory % hash_prime);
 8015526:	6839      	ldr	r1, [r7, #0]
 8015528:	4b09      	ldr	r3, [pc, #36]	; (8015550 <_ZN23MemoryLeakDetectorTable4hashEPc+0x34>)
 801552a:	fba3 2301 	umull	r2, r3, r3, r1
 801552e:	1aca      	subs	r2, r1, r3
 8015530:	0852      	lsrs	r2, r2, #1
 8015532:	4413      	add	r3, r2
 8015534:	099a      	lsrs	r2, r3, #6
 8015536:	4613      	mov	r3, r2
 8015538:	00db      	lsls	r3, r3, #3
 801553a:	4413      	add	r3, r2
 801553c:	00db      	lsls	r3, r3, #3
 801553e:	4413      	add	r3, r2
 8015540:	1aca      	subs	r2, r1, r3
 8015542:	4613      	mov	r3, r2
}
 8015544:	4618      	mov	r0, r3
 8015546:	370c      	adds	r7, #12
 8015548:	46bd      	mov	sp, r7
 801554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801554e:	4770      	bx	lr
 8015550:	c0e07039 	.word	0xc0e07039

08015554 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>:
    for (int i = 0; i < hash_prime; i++)
        table_[i].clearAllAccounting(period);
}

void MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode* node)
{
 8015554:	b580      	push	{r7, lr}
 8015556:	b082      	sub	sp, #8
 8015558:	af00      	add	r7, sp, #0
 801555a:	6078      	str	r0, [r7, #4]
 801555c:	6039      	str	r1, [r7, #0]
    table_[hash(node->memory_)].addNewNode(node);
 801555e:	683b      	ldr	r3, [r7, #0]
 8015560:	689b      	ldr	r3, [r3, #8]
 8015562:	4619      	mov	r1, r3
 8015564:	6878      	ldr	r0, [r7, #4]
 8015566:	f7ff ffd9 	bl	801551c <_ZN23MemoryLeakDetectorTable4hashEPc>
 801556a:	4603      	mov	r3, r0
 801556c:	009b      	lsls	r3, r3, #2
 801556e:	687a      	ldr	r2, [r7, #4]
 8015570:	4413      	add	r3, r2
 8015572:	6839      	ldr	r1, [r7, #0]
 8015574:	4618      	mov	r0, r3
 8015576:	f7ff ff0b 	bl	8015390 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>
}
 801557a:	bf00      	nop
 801557c:	3708      	adds	r7, #8
 801557e:	46bd      	mov	sp, r7
 8015580:	bd80      	pop	{r7, pc}

08015582 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::removeNode(char* memory)
{
 8015582:	b580      	push	{r7, lr}
 8015584:	b082      	sub	sp, #8
 8015586:	af00      	add	r7, sp, #0
 8015588:	6078      	str	r0, [r7, #4]
 801558a:	6039      	str	r1, [r7, #0]
    return table_[hash(memory)].removeNode(memory);
 801558c:	6839      	ldr	r1, [r7, #0]
 801558e:	6878      	ldr	r0, [r7, #4]
 8015590:	f7ff ffc4 	bl	801551c <_ZN23MemoryLeakDetectorTable4hashEPc>
 8015594:	4603      	mov	r3, r0
 8015596:	009b      	lsls	r3, r3, #2
 8015598:	687a      	ldr	r2, [r7, #4]
 801559a:	4413      	add	r3, r2
 801559c:	6839      	ldr	r1, [r7, #0]
 801559e:	4618      	mov	r0, r3
 80155a0:	f7ff ff08 	bl	80153b4 <_ZN22MemoryLeakDetectorList10removeNodeEPc>
 80155a4:	4603      	mov	r3, r0
}
 80155a6:	4618      	mov	r0, r3
 80155a8:	3708      	adds	r7, #8
 80155aa:	46bd      	mov	sp, r7
 80155ac:	bd80      	pop	{r7, pc}

080155ae <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::retrieveNode(char* memory)
{
 80155ae:	b580      	push	{r7, lr}
 80155b0:	b082      	sub	sp, #8
 80155b2:	af00      	add	r7, sp, #0
 80155b4:	6078      	str	r0, [r7, #4]
 80155b6:	6039      	str	r1, [r7, #0]
  return table_[hash(memory)].retrieveNode(memory);
 80155b8:	6839      	ldr	r1, [r7, #0]
 80155ba:	6878      	ldr	r0, [r7, #4]
 80155bc:	f7ff ffae 	bl	801551c <_ZN23MemoryLeakDetectorTable4hashEPc>
 80155c0:	4603      	mov	r3, r0
 80155c2:	009b      	lsls	r3, r3, #2
 80155c4:	687a      	ldr	r2, [r7, #4]
 80155c6:	4413      	add	r3, r2
 80155c8:	6839      	ldr	r1, [r7, #0]
 80155ca:	4618      	mov	r0, r3
 80155cc:	f7ff ff20 	bl	8015410 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>
 80155d0:	4603      	mov	r3, r0
}
 80155d2:	4618      	mov	r0, r3
 80155d4:	3708      	adds	r7, #8
 80155d6:	46bd      	mov	sp, r7
 80155d8:	bd80      	pop	{r7, pc}

080155da <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod period)
{
 80155da:	b580      	push	{r7, lr}
 80155dc:	b084      	sub	sp, #16
 80155de:	af00      	add	r7, sp, #0
 80155e0:	6078      	str	r0, [r7, #4]
 80155e2:	460b      	mov	r3, r1
 80155e4:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 80155e6:	2300      	movs	r3, #0
 80155e8:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 80155ea:	2300      	movs	r3, #0
 80155ec:	60bb      	str	r3, [r7, #8]
 80155ee:	68bb      	ldr	r3, [r7, #8]
 80155f0:	2b48      	cmp	r3, #72	; 0x48
 80155f2:	dc10      	bgt.n	8015616 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x3c>
        total_leaks += table_[i].getTotalLeaks(period);
 80155f4:	68bb      	ldr	r3, [r7, #8]
 80155f6:	009b      	lsls	r3, r3, #2
 80155f8:	687a      	ldr	r2, [r7, #4]
 80155fa:	4413      	add	r3, r2
 80155fc:	78fa      	ldrb	r2, [r7, #3]
 80155fe:	4611      	mov	r1, r2
 8015600:	4618      	mov	r0, r3
 8015602:	f7ff ff67 	bl	80154d4 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>
 8015606:	4602      	mov	r2, r0
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	4413      	add	r3, r2
 801560c:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 801560e:	68bb      	ldr	r3, [r7, #8]
 8015610:	3301      	adds	r3, #1
 8015612:	60bb      	str	r3, [r7, #8]
 8015614:	e7eb      	b.n	80155ee <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x14>
    return total_leaks;
 8015616:	68fb      	ldr	r3, [r7, #12]
}
 8015618:	4618      	mov	r0, r3
 801561a:	3710      	adds	r7, #16
 801561c:	46bd      	mov	sp, r7
 801561e:	bd80      	pop	{r7, pc}

08015620 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod period)
{
 8015620:	b580      	push	{r7, lr}
 8015622:	b084      	sub	sp, #16
 8015624:	af00      	add	r7, sp, #0
 8015626:	6078      	str	r0, [r7, #4]
 8015628:	460b      	mov	r3, r1
 801562a:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < hash_prime; i++) {
 801562c:	2300      	movs	r3, #0
 801562e:	60fb      	str	r3, [r7, #12]
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	2b48      	cmp	r3, #72	; 0x48
 8015634:	dc12      	bgt.n	801565c <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3c>
        MemoryLeakDetectorNode* node = table_[i].getFirstLeak(period);
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	009b      	lsls	r3, r3, #2
 801563a:	687a      	ldr	r2, [r7, #4]
 801563c:	4413      	add	r3, r2
 801563e:	78fa      	ldrb	r2, [r7, #3]
 8015640:	4611      	mov	r1, r2
 8015642:	4618      	mov	r0, r3
 8015644:	f7ff ff21 	bl	801548a <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8015648:	60b8      	str	r0, [r7, #8]
        if (node) return node;
 801564a:	68bb      	ldr	r3, [r7, #8]
 801564c:	2b00      	cmp	r3, #0
 801564e:	d001      	beq.n	8015654 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x34>
 8015650:	68bb      	ldr	r3, [r7, #8]
 8015652:	e004      	b.n	801565e <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3e>
    for (int i = 0; i < hash_prime; i++) {
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	3301      	adds	r3, #1
 8015658:	60fb      	str	r3, [r7, #12]
 801565a:	e7e9      	b.n	8015630 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x10>
    }
    return NULLPTR;
 801565c:	2300      	movs	r3, #0
}
 801565e:	4618      	mov	r0, r3
 8015660:	3710      	adds	r7, #16
 8015662:	46bd      	mov	sp, r7
 8015664:	bd80      	pop	{r7, pc}

08015666 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
    }
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode* leak, MemLeakPeriod period)
{
 8015666:	b580      	push	{r7, lr}
 8015668:	b086      	sub	sp, #24
 801566a:	af00      	add	r7, sp, #0
 801566c:	60f8      	str	r0, [r7, #12]
 801566e:	60b9      	str	r1, [r7, #8]
 8015670:	4613      	mov	r3, r2
 8015672:	71fb      	strb	r3, [r7, #7]
    unsigned long i = hash(leak->memory_);
 8015674:	68bb      	ldr	r3, [r7, #8]
 8015676:	689b      	ldr	r3, [r3, #8]
 8015678:	4619      	mov	r1, r3
 801567a:	68f8      	ldr	r0, [r7, #12]
 801567c:	f7ff ff4e 	bl	801551c <_ZN23MemoryLeakDetectorTable4hashEPc>
 8015680:	6178      	str	r0, [r7, #20]
    MemoryLeakDetectorNode* node = table_[i].getNextLeak(leak, period);
 8015682:	697b      	ldr	r3, [r7, #20]
 8015684:	009b      	lsls	r3, r3, #2
 8015686:	68fa      	ldr	r2, [r7, #12]
 8015688:	4413      	add	r3, r2
 801568a:	79fa      	ldrb	r2, [r7, #7]
 801568c:	68b9      	ldr	r1, [r7, #8]
 801568e:	4618      	mov	r0, r3
 8015690:	f7ff ff0d 	bl	80154ae <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8015694:	6138      	str	r0, [r7, #16]
    if (node) return node;
 8015696:	693b      	ldr	r3, [r7, #16]
 8015698:	2b00      	cmp	r3, #0
 801569a:	d001      	beq.n	80156a0 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x3a>
 801569c:	693b      	ldr	r3, [r7, #16]
 801569e:	e019      	b.n	80156d4 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>

    for (++i; i < hash_prime; i++) {
 80156a0:	697b      	ldr	r3, [r7, #20]
 80156a2:	3301      	adds	r3, #1
 80156a4:	617b      	str	r3, [r7, #20]
 80156a6:	697b      	ldr	r3, [r7, #20]
 80156a8:	2b48      	cmp	r3, #72	; 0x48
 80156aa:	d812      	bhi.n	80156d2 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6c>
        node = table_[i].getFirstLeak(period);
 80156ac:	697b      	ldr	r3, [r7, #20]
 80156ae:	009b      	lsls	r3, r3, #2
 80156b0:	68fa      	ldr	r2, [r7, #12]
 80156b2:	4413      	add	r3, r2
 80156b4:	79fa      	ldrb	r2, [r7, #7]
 80156b6:	4611      	mov	r1, r2
 80156b8:	4618      	mov	r0, r3
 80156ba:	f7ff fee6 	bl	801548a <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 80156be:	6138      	str	r0, [r7, #16]
        if (node) return node;
 80156c0:	693b      	ldr	r3, [r7, #16]
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d001      	beq.n	80156ca <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x64>
 80156c6:	693b      	ldr	r3, [r7, #16]
 80156c8:	e004      	b.n	80156d4 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>
    for (++i; i < hash_prime; i++) {
 80156ca:	697b      	ldr	r3, [r7, #20]
 80156cc:	3301      	adds	r3, #1
 80156ce:	617b      	str	r3, [r7, #20]
 80156d0:	e7e9      	b.n	80156a6 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x40>
    }
    return NULLPTR;
 80156d2:	2300      	movs	r3, #0
}
 80156d4:	4618      	mov	r0, r3
 80156d6:	3718      	adds	r7, #24
 80156d8:	46bd      	mov	sp, r7
 80156da:	bd80      	pop	{r7, pc}

080156dc <_ZN23MemoryLeakDetectorTableC1Ev>:

private:
    MemoryLeakDetectorNode* head_;
};

struct MemoryLeakDetectorTable
 80156dc:	b5b0      	push	{r4, r5, r7, lr}
 80156de:	b082      	sub	sp, #8
 80156e0:	af00      	add	r7, sp, #0
 80156e2:	6078      	str	r0, [r7, #4]
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	2448      	movs	r4, #72	; 0x48
 80156e8:	461d      	mov	r5, r3
 80156ea:	2c00      	cmp	r4, #0
 80156ec:	db05      	blt.n	80156fa <_ZN23MemoryLeakDetectorTableC1Ev+0x1e>
 80156ee:	4628      	mov	r0, r5
 80156f0:	f7ff fa84 	bl	8014bfc <_ZN22MemoryLeakDetectorListC1Ev>
 80156f4:	3504      	adds	r5, #4
 80156f6:	3c01      	subs	r4, #1
 80156f8:	e7f7      	b.n	80156ea <_ZN23MemoryLeakDetectorTableC1Ev+0xe>
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	4618      	mov	r0, r3
 80156fe:	3708      	adds	r7, #8
 8015700:	46bd      	mov	sp, r7
 8015702:	bdb0      	pop	{r4, r5, r7, pc}

08015704 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>:
    return NULLPTR;
}

/////////////////////////////////////////////////////////////

MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure* reporter)
 8015704:	b590      	push	{r4, r7, lr}
 8015706:	b083      	sub	sp, #12
 8015708:	af00      	add	r7, sp, #0
 801570a:	6078      	str	r0, [r7, #4]
 801570c:	6039      	str	r1, [r7, #0]
 801570e:	4a1d      	ldr	r2, [pc, #116]	; (8015784 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x80>)
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	601a      	str	r2, [r3, #0]
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	330c      	adds	r3, #12
 8015718:	4618      	mov	r0, r3
 801571a:	f7ff fbe3 	bl	8014ee4 <_ZN28MemoryLeakOutputStringBufferC1Ev>
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015724:	331c      	adds	r3, #28
 8015726:	4618      	mov	r0, r3
 8015728:	f7ff ffd8 	bl	80156dc <_ZN23MemoryLeakDetectorTableC1Ev>
{
    doAllocationTypeChecking_ = true;
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8015732:	2201      	movs	r2, #1
 8015734:	701a      	strb	r2, [r3, #0]
    allocationSequenceNumber_ = 1;
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801573c:	3304      	adds	r3, #4
 801573e:	2201      	movs	r2, #1
 8015740:	601a      	str	r2, [r3, #0]
    current_period_ = mem_leak_period_disabled;
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	2201      	movs	r2, #1
 8015746:	721a      	strb	r2, [r3, #8]
    current_allocation_stage_ = 0;
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801574e:	3308      	adds	r3, #8
 8015750:	2200      	movs	r2, #0
 8015752:	701a      	strb	r2, [r3, #0]
    reporter_ = reporter;
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	683a      	ldr	r2, [r7, #0]
 8015758:	605a      	str	r2, [r3, #4]
    mutex_ = new SimpleMutex;
 801575a:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 801575e:	490a      	ldr	r1, [pc, #40]	; (8015788 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x84>)
 8015760:	2004      	movs	r0, #4
 8015762:	f7f3 fb17 	bl	8008d94 <_ZnwjPKci>
 8015766:	4604      	mov	r4, r0
 8015768:	4620      	mov	r0, r4
 801576a:	f7f5 fbe7 	bl	800af3c <_ZN11SimpleMutexC1Ev>
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8015774:	330c      	adds	r3, #12
 8015776:	601c      	str	r4, [r3, #0]
}
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	4618      	mov	r0, r3
 801577c:	370c      	adds	r7, #12
 801577e:	46bd      	mov	sp, r7
 8015780:	bd90      	pop	{r4, r7, pc}
 8015782:	bf00      	nop
 8015784:	08026a8c 	.word	0x08026a8c
 8015788:	080244bc 	.word	0x080244bc

0801578c <_ZN18MemoryLeakDetectorD1Ev>:

MemoryLeakDetector::~MemoryLeakDetector()
 801578c:	b590      	push	{r4, r7, lr}
 801578e:	b083      	sub	sp, #12
 8015790:	af00      	add	r7, sp, #0
 8015792:	6078      	str	r0, [r7, #4]
 8015794:	4a0e      	ldr	r2, [pc, #56]	; (80157d0 <_ZN18MemoryLeakDetectorD1Ev+0x44>)
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	601a      	str	r2, [r3, #0]
{
    if (mutex_)
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80157a0:	330c      	adds	r3, #12
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d00d      	beq.n	80157c4 <_ZN18MemoryLeakDetectorD1Ev+0x38>
    {
        delete mutex_;
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80157ae:	330c      	adds	r3, #12
 80157b0:	681c      	ldr	r4, [r3, #0]
 80157b2:	2c00      	cmp	r4, #0
 80157b4:	d006      	beq.n	80157c4 <_ZN18MemoryLeakDetectorD1Ev+0x38>
 80157b6:	4620      	mov	r0, r4
 80157b8:	f7f5 fbd2 	bl	800af60 <_ZN11SimpleMutexD1Ev>
 80157bc:	2104      	movs	r1, #4
 80157be:	4620      	mov	r0, r4
 80157c0:	f7f3 fafc 	bl	8008dbc <_ZdlPvj>
    }
}
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	4618      	mov	r0, r3
 80157c8:	370c      	adds	r7, #12
 80157ca:	46bd      	mov	sp, r7
 80157cc:	bd90      	pop	{r4, r7, pc}
 80157ce:	bf00      	nop
 80157d0:	08026a8c 	.word	0x08026a8c

080157d4 <_ZN18MemoryLeakDetectorD0Ev>:
MemoryLeakDetector::~MemoryLeakDetector()
 80157d4:	b580      	push	{r7, lr}
 80157d6:	b082      	sub	sp, #8
 80157d8:	af00      	add	r7, sp, #0
 80157da:	6078      	str	r0, [r7, #4]
}
 80157dc:	6878      	ldr	r0, [r7, #4]
 80157de:	f7ff ffd5 	bl	801578c <_ZN18MemoryLeakDetectorD1Ev>
 80157e2:	f241 1150 	movw	r1, #4432	; 0x1150
 80157e6:	6878      	ldr	r0, [r7, #4]
 80157e8:	f7f3 fae8 	bl	8008dbc <_ZdlPvj>
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	4618      	mov	r0, r3
 80157f0:	3708      	adds	r7, #8
 80157f2:	46bd      	mov	sp, r7
 80157f4:	bd80      	pop	{r7, pc}

080157f6 <_ZN18MemoryLeakDetector13startCheckingEv>:
{
    memoryTable_.clearAllAccounting(period);
}

void MemoryLeakDetector::startChecking()
{
 80157f6:	b580      	push	{r7, lr}
 80157f8:	b082      	sub	sp, #8
 80157fa:	af00      	add	r7, sp, #0
 80157fc:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	330c      	adds	r3, #12
 8015802:	4618      	mov	r0, r3
 8015804:	f7ff fd72 	bl	80152ec <_ZN28MemoryLeakOutputStringBuffer5clearEv>
    current_period_ = mem_leak_period_checking;
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	2203      	movs	r2, #3
 801580c:	721a      	strb	r2, [r3, #8]
}
 801580e:	bf00      	nop
 8015810:	3708      	adds	r7, #8
 8015812:	46bd      	mov	sp, r7
 8015814:	bd80      	pop	{r7, pc}

08015816 <_ZN18MemoryLeakDetector12stopCheckingEv>:

void MemoryLeakDetector::stopChecking()
{
 8015816:	b480      	push	{r7}
 8015818:	b083      	sub	sp, #12
 801581a:	af00      	add	r7, sp, #0
 801581c:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	2202      	movs	r2, #2
 8015822:	721a      	strb	r2, [r3, #8]
}
 8015824:	bf00      	nop
 8015826:	370c      	adds	r7, #12
 8015828:	46bd      	mov	sp, r7
 801582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801582e:	4770      	bx	lr

08015830 <_ZN18MemoryLeakDetector6enableEv>:
{
    return current_allocation_stage_;
}

void MemoryLeakDetector::enable()
{
 8015830:	b480      	push	{r7}
 8015832:	b083      	sub	sp, #12
 8015834:	af00      	add	r7, sp, #0
 8015836:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	2202      	movs	r2, #2
 801583c:	721a      	strb	r2, [r3, #8]
}
 801583e:	bf00      	nop
 8015840:	370c      	adds	r7, #12
 8015842:	46bd      	mov	sp, r7
 8015844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015848:	4770      	bx	lr

0801584a <_ZN18MemoryLeakDetector8getMutexEv>:
{
    current_allocation_stage_--;
}

SimpleMutex *MemoryLeakDetector::getMutex()
{
 801584a:	b480      	push	{r7}
 801584c:	b083      	sub	sp, #12
 801584e:	af00      	add	r7, sp, #0
 8015850:	6078      	str	r0, [r7, #4]
    return mutex_;
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8015858:	330c      	adds	r3, #12
 801585a:	681b      	ldr	r3, [r3, #0]
}
 801585c:	4618      	mov	r0, r3
 801585e:	370c      	adds	r7, #12
 8015860:	46bd      	mov	sp, r7
 8015862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015866:	4770      	bx	lr

08015868 <_ZL31calculateVoidPointerAlignedSizej>:

static size_t calculateVoidPointerAlignedSize(size_t size)
{
 8015868:	b480      	push	{r7}
 801586a:	b083      	sub	sp, #12
 801586c:	af00      	add	r7, sp, #0
 801586e:	6078      	str	r0, [r7, #4]
#ifndef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
    return (sizeof(void*) - (size % sizeof(void*))) + size;
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	f023 0303 	bic.w	r3, r3, #3
 8015876:	3304      	adds	r3, #4
#else
   return size;
#endif
}
 8015878:	4618      	mov	r0, r3
 801587a:	370c      	adds	r7, #12
 801587c:	46bd      	mov	sp, r7
 801587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015882:	4770      	bx	lr

08015884 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>:

size_t MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(size_t size)
{
 8015884:	b580      	push	{r7, lr}
 8015886:	b082      	sub	sp, #8
 8015888:	af00      	add	r7, sp, #0
 801588a:	6078      	str	r0, [r7, #4]
 801588c:	6039      	str	r1, [r7, #0]
    return calculateVoidPointerAlignedSize(size + memory_corruption_buffer_size);
 801588e:	683b      	ldr	r3, [r7, #0]
 8015890:	3303      	adds	r3, #3
 8015892:	4618      	mov	r0, r3
 8015894:	f7ff ffe8 	bl	8015868 <_ZL31calculateVoidPointerAlignedSizej>
 8015898:	4603      	mov	r3, r0
}
 801589a:	4618      	mov	r0, r3
 801589c:	3708      	adds	r7, #8
 801589e:	46bd      	mov	sp, r7
 80158a0:	bd80      	pop	{r7, pc}

080158a2 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>:

MemoryLeakDetectorNode* MemoryLeakDetector::getNodeFromMemoryPointer(char* memory, size_t memory_size)
{
 80158a2:	b580      	push	{r7, lr}
 80158a4:	b084      	sub	sp, #16
 80158a6:	af00      	add	r7, sp, #0
 80158a8:	60f8      	str	r0, [r7, #12]
 80158aa:	60b9      	str	r1, [r7, #8]
 80158ac:	607a      	str	r2, [r7, #4]
    return (MemoryLeakDetectorNode*) (void*) (memory + sizeOfMemoryWithCorruptionInfo(memory_size));
 80158ae:	6879      	ldr	r1, [r7, #4]
 80158b0:	68f8      	ldr	r0, [r7, #12]
 80158b2:	f7ff ffe7 	bl	8015884 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 80158b6:	4602      	mov	r2, r0
 80158b8:	68bb      	ldr	r3, [r7, #8]
 80158ba:	4413      	add	r3, r2
}
 80158bc:	4618      	mov	r0, r3
 80158be:	3710      	adds	r7, #16
 80158c0:	46bd      	mov	sp, r7
 80158c2:	bd80      	pop	{r7, pc}

080158c4 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>:

void MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode * node, char *new_memory, size_t size, TestMemoryAllocator *allocator, const char *file, size_t line)
{
 80158c4:	b580      	push	{r7, lr}
 80158c6:	b08a      	sub	sp, #40	; 0x28
 80158c8:	af06      	add	r7, sp, #24
 80158ca:	60f8      	str	r0, [r7, #12]
 80158cc:	60b9      	str	r1, [r7, #8]
 80158ce:	607a      	str	r2, [r7, #4]
 80158d0:	603b      	str	r3, [r7, #0]
    node->init(new_memory, allocationSequenceNumber_++, size, allocator, current_period_, current_allocation_stage_, file, line);
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80158d8:	3304      	adds	r3, #4
 80158da:	681a      	ldr	r2, [r3, #0]
 80158dc:	1c51      	adds	r1, r2, #1
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80158e4:	3304      	adds	r3, #4
 80158e6:	6019      	str	r1, [r3, #0]
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	7a19      	ldrb	r1, [r3, #8]
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80158f2:	3308      	adds	r3, #8
 80158f4:	781b      	ldrb	r3, [r3, #0]
 80158f6:	6a38      	ldr	r0, [r7, #32]
 80158f8:	9004      	str	r0, [sp, #16]
 80158fa:	69f8      	ldr	r0, [r7, #28]
 80158fc:	9003      	str	r0, [sp, #12]
 80158fe:	9302      	str	r3, [sp, #8]
 8015900:	9101      	str	r1, [sp, #4]
 8015902:	69bb      	ldr	r3, [r7, #24]
 8015904:	9300      	str	r3, [sp, #0]
 8015906:	683b      	ldr	r3, [r7, #0]
 8015908:	6879      	ldr	r1, [r7, #4]
 801590a:	68b8      	ldr	r0, [r7, #8]
 801590c:	f7ff fcfb 	bl	8015306 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>
    addMemoryCorruptionInformation(node->memory_ + node->size_);
 8015910:	68bb      	ldr	r3, [r7, #8]
 8015912:	689a      	ldr	r2, [r3, #8]
 8015914:	68bb      	ldr	r3, [r7, #8]
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	4413      	add	r3, r2
 801591a:	4619      	mov	r1, r3
 801591c:	68f8      	ldr	r0, [r7, #12]
 801591e:	f000 f861 	bl	80159e4 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>
    memoryTable_.addNewNode(node);
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015928:	331c      	adds	r3, #28
 801592a:	68b9      	ldr	r1, [r7, #8]
 801592c:	4618      	mov	r0, r3
 801592e:	f7ff fe11 	bl	8015554 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>
}
 8015932:	bf00      	nop
 8015934:	3710      	adds	r7, #16
 8015936:	46bd      	mov	sp, r7
 8015938:	bd80      	pop	{r7, pc}

0801593a <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 801593a:	b580      	push	{r7, lr}
 801593c:	b08a      	sub	sp, #40	; 0x28
 801593e:	af04      	add	r7, sp, #16
 8015940:	60f8      	str	r0, [r7, #12]
 8015942:	60b9      	str	r1, [r7, #8]
 8015944:	607a      	str	r2, [r7, #4]
 8015946:	603b      	str	r3, [r7, #0]
    char* new_memory = reallocateMemoryWithAccountingInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8015948:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801594c:	9302      	str	r3, [sp, #8]
 801594e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015950:	9301      	str	r3, [sp, #4]
 8015952:	6a3b      	ldr	r3, [r7, #32]
 8015954:	9300      	str	r3, [sp, #0]
 8015956:	683b      	ldr	r3, [r7, #0]
 8015958:	687a      	ldr	r2, [r7, #4]
 801595a:	68b9      	ldr	r1, [r7, #8]
 801595c:	68f8      	ldr	r0, [r7, #12]
 801595e:	f000 f96f 	bl	8015c40 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>
 8015962:	6178      	str	r0, [r7, #20]
    if (new_memory == NULLPTR) return NULLPTR;
 8015964:	697b      	ldr	r3, [r7, #20]
 8015966:	2b00      	cmp	r3, #0
 8015968:	d101      	bne.n	801596e <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x34>
 801596a:	2300      	movs	r3, #0
 801596c:	e017      	b.n	801599e <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x64>

    MemoryLeakDetectorNode *node = createMemoryLeakAccountingInformation(allocator, size, new_memory, allocatNodesSeperately);
 801596e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015972:	9300      	str	r3, [sp, #0]
 8015974:	697b      	ldr	r3, [r7, #20]
 8015976:	683a      	ldr	r2, [r7, #0]
 8015978:	68b9      	ldr	r1, [r7, #8]
 801597a:	68f8      	ldr	r0, [r7, #12]
 801597c:	f000 f98a 	bl	8015c94 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8015980:	6138      	str	r0, [r7, #16]
    storeLeakInformation(node, new_memory, size, allocator, file, line);
 8015982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015984:	9302      	str	r3, [sp, #8]
 8015986:	6a3b      	ldr	r3, [r7, #32]
 8015988:	9301      	str	r3, [sp, #4]
 801598a:	68bb      	ldr	r3, [r7, #8]
 801598c:	9300      	str	r3, [sp, #0]
 801598e:	683b      	ldr	r3, [r7, #0]
 8015990:	697a      	ldr	r2, [r7, #20]
 8015992:	6939      	ldr	r1, [r7, #16]
 8015994:	68f8      	ldr	r0, [r7, #12]
 8015996:	f7ff ff95 	bl	80158c4 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 801599a:	693b      	ldr	r3, [r7, #16]
 801599c:	689b      	ldr	r3, [r3, #8]
}
 801599e:	4618      	mov	r0, r3
 80159a0:	3718      	adds	r7, #24
 80159a2:	46bd      	mov	sp, r7
 80159a4:	bd80      	pop	{r7, pc}
	...

080159a8 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>:

void MemoryLeakDetector::invalidateMemory(char* memory)
{
 80159a8:	b580      	push	{r7, lr}
 80159aa:	b084      	sub	sp, #16
 80159ac:	af00      	add	r7, sp, #0
 80159ae:	6078      	str	r0, [r7, #4]
 80159b0:	6039      	str	r1, [r7, #0]
#ifndef CPPUTEST_DISABLE_HEAP_POISON
  MemoryLeakDetectorNode* node = memoryTable_.retrieveNode(memory);
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80159b8:	331c      	adds	r3, #28
 80159ba:	6839      	ldr	r1, [r7, #0]
 80159bc:	4618      	mov	r0, r3
 80159be:	f7ff fdf6 	bl	80155ae <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>
 80159c2:	60f8      	str	r0, [r7, #12]
  if (node)
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d006      	beq.n	80159d8 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x30>
    PlatformSpecificMemset(memory, 0xCD, node->size_);
 80159ca:	4b05      	ldr	r3, [pc, #20]	; (80159e0 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x38>)
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	68fa      	ldr	r2, [r7, #12]
 80159d0:	6812      	ldr	r2, [r2, #0]
 80159d2:	21cd      	movs	r1, #205	; 0xcd
 80159d4:	6838      	ldr	r0, [r7, #0]
 80159d6:	4798      	blx	r3
#endif
}
 80159d8:	bf00      	nop
 80159da:	3710      	adds	r7, #16
 80159dc:	46bd      	mov	sp, r7
 80159de:	bd80      	pop	{r7, pc}
 80159e0:	200000d8 	.word	0x200000d8

080159e4 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>:

void MemoryLeakDetector::addMemoryCorruptionInformation(char* memory)
{
 80159e4:	b480      	push	{r7}
 80159e6:	b085      	sub	sp, #20
 80159e8:	af00      	add	r7, sp, #0
 80159ea:	6078      	str	r0, [r7, #4]
 80159ec:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80159ee:	2300      	movs	r3, #0
 80159f0:	60fb      	str	r3, [r7, #12]
 80159f2:	68fb      	ldr	r3, [r7, #12]
 80159f4:	2b02      	cmp	r3, #2
 80159f6:	d812      	bhi.n	8015a1e <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x3a>
      memory[i] = GuardBytes[i % sizeof(GuardBytes)];
 80159f8:	68f9      	ldr	r1, [r7, #12]
 80159fa:	4b0c      	ldr	r3, [pc, #48]	; (8015a2c <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x48>)
 80159fc:	fba3 2301 	umull	r2, r3, r3, r1
 8015a00:	085a      	lsrs	r2, r3, #1
 8015a02:	4613      	mov	r3, r2
 8015a04:	005b      	lsls	r3, r3, #1
 8015a06:	4413      	add	r3, r2
 8015a08:	1aca      	subs	r2, r1, r3
 8015a0a:	6839      	ldr	r1, [r7, #0]
 8015a0c:	68fb      	ldr	r3, [r7, #12]
 8015a0e:	440b      	add	r3, r1
 8015a10:	4907      	ldr	r1, [pc, #28]	; (8015a30 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x4c>)
 8015a12:	5c8a      	ldrb	r2, [r1, r2]
 8015a14:	701a      	strb	r2, [r3, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	3301      	adds	r3, #1
 8015a1a:	60fb      	str	r3, [r7, #12]
 8015a1c:	e7e9      	b.n	80159f2 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0xe>
}
 8015a1e:	bf00      	nop
 8015a20:	3714      	adds	r7, #20
 8015a22:	46bd      	mov	sp, r7
 8015a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a28:	4770      	bx	lr
 8015a2a:	bf00      	nop
 8015a2c:	aaaaaaab 	.word	0xaaaaaaab
 8015a30:	08026a80 	.word	0x08026a80

08015a34 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>:

bool MemoryLeakDetector::validMemoryCorruptionInformation(char* memory)
{
 8015a34:	b480      	push	{r7}
 8015a36:	b085      	sub	sp, #20
 8015a38:	af00      	add	r7, sp, #0
 8015a3a:	6078      	str	r0, [r7, #4]
 8015a3c:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8015a3e:	2300      	movs	r3, #0
 8015a40:	60fb      	str	r3, [r7, #12]
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	2b02      	cmp	r3, #2
 8015a46:	d816      	bhi.n	8015a76 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x42>
      if (memory[i] != GuardBytes[i % sizeof(GuardBytes)])
 8015a48:	683a      	ldr	r2, [r7, #0]
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	4413      	add	r3, r2
 8015a4e:	7818      	ldrb	r0, [r3, #0]
 8015a50:	68f9      	ldr	r1, [r7, #12]
 8015a52:	4b0c      	ldr	r3, [pc, #48]	; (8015a84 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x50>)
 8015a54:	fba3 2301 	umull	r2, r3, r3, r1
 8015a58:	085a      	lsrs	r2, r3, #1
 8015a5a:	4613      	mov	r3, r2
 8015a5c:	005b      	lsls	r3, r3, #1
 8015a5e:	4413      	add	r3, r2
 8015a60:	1aca      	subs	r2, r1, r3
 8015a62:	4b09      	ldr	r3, [pc, #36]	; (8015a88 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x54>)
 8015a64:	5c9b      	ldrb	r3, [r3, r2]
 8015a66:	4298      	cmp	r0, r3
 8015a68:	d001      	beq.n	8015a6e <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x3a>
          return false;
 8015a6a:	2300      	movs	r3, #0
 8015a6c:	e004      	b.n	8015a78 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x44>
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	3301      	adds	r3, #1
 8015a72:	60fb      	str	r3, [r7, #12]
 8015a74:	e7e5      	b.n	8015a42 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0xe>
   return true;
 8015a76:	2301      	movs	r3, #1
}
 8015a78:	4618      	mov	r0, r3
 8015a7a:	3714      	adds	r7, #20
 8015a7c:	46bd      	mov	sp, r7
 8015a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a82:	4770      	bx	lr
 8015a84:	aaaaaaab 	.word	0xaaaaaaab
 8015a88:	08026a80 	.word	0x08026a80

08015a8c <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>:

bool MemoryLeakDetector::matchingAllocation(TestMemoryAllocator *alloc_allocator, TestMemoryAllocator *free_allocator)
{
 8015a8c:	b580      	push	{r7, lr}
 8015a8e:	b084      	sub	sp, #16
 8015a90:	af00      	add	r7, sp, #0
 8015a92:	60f8      	str	r0, [r7, #12]
 8015a94:	60b9      	str	r1, [r7, #8]
 8015a96:	607a      	str	r2, [r7, #4]
    if (alloc_allocator == free_allocator) return true;
 8015a98:	68ba      	ldr	r2, [r7, #8]
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	429a      	cmp	r2, r3
 8015a9e:	d101      	bne.n	8015aa4 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x18>
 8015aa0:	2301      	movs	r3, #1
 8015aa2:	e013      	b.n	8015acc <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    if (!doAllocationTypeChecking_) return true;
 8015aa4:	68fb      	ldr	r3, [r7, #12]
 8015aa6:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8015aaa:	781b      	ldrb	r3, [r3, #0]
 8015aac:	f083 0301 	eor.w	r3, r3, #1
 8015ab0:	b2db      	uxtb	r3, r3
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d001      	beq.n	8015aba <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x2e>
 8015ab6:	2301      	movs	r3, #1
 8015ab8:	e008      	b.n	8015acc <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    return free_allocator->isOfEqualType(alloc_allocator);
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	681b      	ldr	r3, [r3, #0]
 8015abe:	331c      	adds	r3, #28
 8015ac0:	681b      	ldr	r3, [r3, #0]
 8015ac2:	68b9      	ldr	r1, [r7, #8]
 8015ac4:	6878      	ldr	r0, [r7, #4]
 8015ac6:	4798      	blx	r3
 8015ac8:	4603      	mov	r3, r0
 8015aca:	bf00      	nop
}
 8015acc:	4618      	mov	r0, r3
 8015ace:	3710      	adds	r7, #16
 8015ad0:	46bd      	mov	sp, r7
 8015ad2:	bd80      	pop	{r7, pc}

08015ad4 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>:

void MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode* node, const char* file, size_t line, TestMemoryAllocator* allocator, bool allocateNodesSeperately)
{
 8015ad4:	b590      	push	{r4, r7, lr}
 8015ad6:	b087      	sub	sp, #28
 8015ad8:	af02      	add	r7, sp, #8
 8015ada:	60f8      	str	r0, [r7, #12]
 8015adc:	60b9      	str	r1, [r7, #8]
 8015ade:	607a      	str	r2, [r7, #4]
 8015ae0:	603b      	str	r3, [r7, #0]
    if (!matchingAllocation(node->allocator_->actualAllocator(), allocator->actualAllocator()))
 8015ae2:	68bb      	ldr	r3, [r7, #8]
 8015ae4:	695a      	ldr	r2, [r3, #20]
 8015ae6:	68bb      	ldr	r3, [r7, #8]
 8015ae8:	695b      	ldr	r3, [r3, #20]
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	3328      	adds	r3, #40	; 0x28
 8015aee:	681b      	ldr	r3, [r3, #0]
 8015af0:	4610      	mov	r0, r2
 8015af2:	4798      	blx	r3
 8015af4:	4604      	mov	r4, r0
 8015af6:	6a3b      	ldr	r3, [r7, #32]
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	3328      	adds	r3, #40	; 0x28
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	6a38      	ldr	r0, [r7, #32]
 8015b00:	4798      	blx	r3
 8015b02:	4603      	mov	r3, r0
 8015b04:	461a      	mov	r2, r3
 8015b06:	4621      	mov	r1, r4
 8015b08:	68f8      	ldr	r0, [r7, #12]
 8015b0a:	f7ff ffbf 	bl	8015a8c <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>
 8015b0e:	4603      	mov	r3, r0
 8015b10:	f083 0301 	eor.w	r3, r3, #1
 8015b14:	b2db      	uxtb	r3, r3
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d014      	beq.n	8015b44 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0x70>
        outputBuffer_.reportAllocationDeallocationMismatchFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	f103 040c 	add.w	r4, r3, #12
 8015b20:	6a3b      	ldr	r3, [r7, #32]
 8015b22:	681b      	ldr	r3, [r3, #0]
 8015b24:	3328      	adds	r3, #40	; 0x28
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	6a38      	ldr	r0, [r7, #32]
 8015b2a:	4798      	blx	r3
 8015b2c:	4602      	mov	r2, r0
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	685b      	ldr	r3, [r3, #4]
 8015b32:	9301      	str	r3, [sp, #4]
 8015b34:	9200      	str	r2, [sp, #0]
 8015b36:	683b      	ldr	r3, [r7, #0]
 8015b38:	687a      	ldr	r2, [r7, #4]
 8015b3a:	68b9      	ldr	r1, [r7, #8]
 8015b3c:	4620      	mov	r0, r4
 8015b3e:	f7ff fb4d 	bl	80151dc <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
    else if (allocateNodesSeperately)
        allocator->freeMemoryLeakNode((char*) node);
}
 8015b42:	e02e      	b.n	8015ba2 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
 8015b44:	68bb      	ldr	r3, [r7, #8]
 8015b46:	689a      	ldr	r2, [r3, #8]
 8015b48:	68bb      	ldr	r3, [r7, #8]
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	4413      	add	r3, r2
 8015b4e:	4619      	mov	r1, r3
 8015b50:	68f8      	ldr	r0, [r7, #12]
 8015b52:	f7ff ff6f 	bl	8015a34 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>
 8015b56:	4603      	mov	r3, r0
 8015b58:	f083 0301 	eor.w	r3, r3, #1
 8015b5c:	b2db      	uxtb	r3, r3
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d014      	beq.n	8015b8c <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xb8>
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8015b62:	68fb      	ldr	r3, [r7, #12]
 8015b64:	f103 040c 	add.w	r4, r3, #12
 8015b68:	6a3b      	ldr	r3, [r7, #32]
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	3328      	adds	r3, #40	; 0x28
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	6a38      	ldr	r0, [r7, #32]
 8015b72:	4798      	blx	r3
 8015b74:	4602      	mov	r2, r0
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	685b      	ldr	r3, [r3, #4]
 8015b7a:	9301      	str	r3, [sp, #4]
 8015b7c:	9200      	str	r2, [sp, #0]
 8015b7e:	683b      	ldr	r3, [r7, #0]
 8015b80:	687a      	ldr	r2, [r7, #4]
 8015b82:	68b9      	ldr	r1, [r7, #8]
 8015b84:	4620      	mov	r0, r4
 8015b86:	f7ff fb4f 	bl	8015228 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
}
 8015b8a:	e00a      	b.n	8015ba2 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (allocateNodesSeperately)
 8015b8c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d006      	beq.n	8015ba2 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
        allocator->freeMemoryLeakNode((char*) node);
 8015b94:	6a3b      	ldr	r3, [r7, #32]
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	3324      	adds	r3, #36	; 0x24
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	68b9      	ldr	r1, [r7, #8]
 8015b9e:	6a38      	ldr	r0, [r7, #32]
 8015ba0:	4798      	blx	r3
}
 8015ba2:	bf00      	nop
 8015ba4:	3714      	adds	r7, #20
 8015ba6:	46bd      	mov	sp, r7
 8015ba8:	bd90      	pop	{r4, r7, pc}
	...

08015bac <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, bool allocatNodesSeperately)
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b086      	sub	sp, #24
 8015bb0:	af02      	add	r7, sp, #8
 8015bb2:	60f8      	str	r0, [r7, #12]
 8015bb4:	60b9      	str	r1, [r7, #8]
 8015bb6:	607a      	str	r2, [r7, #4]
 8015bb8:	70fb      	strb	r3, [r7, #3]
    return allocMemory(allocator, size, UNKNOWN, 0, allocatNodesSeperately);
 8015bba:	4b08      	ldr	r3, [pc, #32]	; (8015bdc <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb+0x30>)
 8015bbc:	681a      	ldr	r2, [r3, #0]
 8015bbe:	78fb      	ldrb	r3, [r7, #3]
 8015bc0:	9301      	str	r3, [sp, #4]
 8015bc2:	2300      	movs	r3, #0
 8015bc4:	9300      	str	r3, [sp, #0]
 8015bc6:	4613      	mov	r3, r2
 8015bc8:	687a      	ldr	r2, [r7, #4]
 8015bca:	68b9      	ldr	r1, [r7, #8]
 8015bcc:	68f8      	ldr	r0, [r7, #12]
 8015bce:	f000 f87f 	bl	8015cd0 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8015bd2:	4603      	mov	r3, r0
}
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	3710      	adds	r7, #16
 8015bd8:	46bd      	mov	sp, r7
 8015bda:	bd80      	pop	{r7, pc}
 8015bdc:	20000100 	.word	0x20000100

08015be0 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8015be0:	b590      	push	{r4, r7, lr}
 8015be2:	b085      	sub	sp, #20
 8015be4:	af00      	add	r7, sp, #0
 8015be6:	60f8      	str	r0, [r7, #12]
 8015be8:	60b9      	str	r1, [r7, #8]
 8015bea:	607a      	str	r2, [r7, #4]
 8015bec:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size), file, line);
 8015bee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d00e      	beq.n	8015c14 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x34>
 8015bf6:	68bb      	ldr	r3, [r7, #8]
 8015bf8:	681b      	ldr	r3, [r3, #0]
 8015bfa:	3308      	adds	r3, #8
 8015bfc:	681c      	ldr	r4, [r3, #0]
 8015bfe:	6879      	ldr	r1, [r7, #4]
 8015c00:	68f8      	ldr	r0, [r7, #12]
 8015c02:	f7ff fe3f 	bl	8015884 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8015c06:	4601      	mov	r1, r0
 8015c08:	6a3b      	ldr	r3, [r7, #32]
 8015c0a:	683a      	ldr	r2, [r7, #0]
 8015c0c:	68b8      	ldr	r0, [r7, #8]
 8015c0e:	47a0      	blx	r4
 8015c10:	4603      	mov	r3, r0
 8015c12:	e010      	b.n	8015c36 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x56>
    else return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode), file, line);
 8015c14:	68bb      	ldr	r3, [r7, #8]
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	3308      	adds	r3, #8
 8015c1a:	681c      	ldr	r4, [r3, #0]
 8015c1c:	6879      	ldr	r1, [r7, #4]
 8015c1e:	68f8      	ldr	r0, [r7, #12]
 8015c20:	f7ff fe30 	bl	8015884 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8015c24:	4603      	mov	r3, r0
 8015c26:	f103 0120 	add.w	r1, r3, #32
 8015c2a:	6a3b      	ldr	r3, [r7, #32]
 8015c2c:	683a      	ldr	r2, [r7, #0]
 8015c2e:	68b8      	ldr	r0, [r7, #8]
 8015c30:	47a0      	blx	r4
 8015c32:	4603      	mov	r3, r0
 8015c34:	bf00      	nop
}
 8015c36:	4618      	mov	r0, r3
 8015c38:	3714      	adds	r7, #20
 8015c3a:	46bd      	mov	sp, r7
 8015c3c:	bd90      	pop	{r4, r7, pc}
	...

08015c40 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator* /*allocator*/, char* memory, size_t size, const char* /*file*/, size_t /*line*/, bool allocatNodesSeperately)
{
 8015c40:	b590      	push	{r4, r7, lr}
 8015c42:	b085      	sub	sp, #20
 8015c44:	af00      	add	r7, sp, #0
 8015c46:	60f8      	str	r0, [r7, #12]
 8015c48:	60b9      	str	r1, [r7, #8]
 8015c4a:	607a      	str	r2, [r7, #4]
 8015c4c:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size));
 8015c4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d00b      	beq.n	8015c6e <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x2e>
 8015c56:	4b0e      	ldr	r3, [pc, #56]	; (8015c90 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8015c58:	681c      	ldr	r4, [r3, #0]
 8015c5a:	6839      	ldr	r1, [r7, #0]
 8015c5c:	68f8      	ldr	r0, [r7, #12]
 8015c5e:	f7ff fe11 	bl	8015884 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8015c62:	4603      	mov	r3, r0
 8015c64:	4619      	mov	r1, r3
 8015c66:	6878      	ldr	r0, [r7, #4]
 8015c68:	47a0      	blx	r4
 8015c6a:	4603      	mov	r3, r0
 8015c6c:	e00c      	b.n	8015c88 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x48>
    else return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode));
 8015c6e:	4b08      	ldr	r3, [pc, #32]	; (8015c90 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8015c70:	681c      	ldr	r4, [r3, #0]
 8015c72:	6839      	ldr	r1, [r7, #0]
 8015c74:	68f8      	ldr	r0, [r7, #12]
 8015c76:	f7ff fe05 	bl	8015884 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8015c7a:	4603      	mov	r3, r0
 8015c7c:	3320      	adds	r3, #32
 8015c7e:	4619      	mov	r1, r3
 8015c80:	6878      	ldr	r0, [r7, #4]
 8015c82:	47a0      	blx	r4
 8015c84:	4603      	mov	r3, r0
 8015c86:	bf00      	nop
}
 8015c88:	4618      	mov	r0, r3
 8015c8a:	3714      	adds	r7, #20
 8015c8c:	46bd      	mov	sp, r7
 8015c8e:	bd90      	pop	{r4, r7, pc}
 8015c90:	200000cc 	.word	0x200000cc

08015c94 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>:

MemoryLeakDetectorNode* MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator* allocator, size_t size, char* memory, bool allocatNodesSeperately)
{
 8015c94:	b580      	push	{r7, lr}
 8015c96:	b084      	sub	sp, #16
 8015c98:	af00      	add	r7, sp, #0
 8015c9a:	60f8      	str	r0, [r7, #12]
 8015c9c:	60b9      	str	r1, [r7, #8]
 8015c9e:	607a      	str	r2, [r7, #4]
 8015ca0:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (MemoryLeakDetectorNode*) (void*) allocator->allocMemoryLeakNode(sizeof(MemoryLeakDetectorNode));
 8015ca2:	7e3b      	ldrb	r3, [r7, #24]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d008      	beq.n	8015cba <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x26>
 8015ca8:	68bb      	ldr	r3, [r7, #8]
 8015caa:	681b      	ldr	r3, [r3, #0]
 8015cac:	3320      	adds	r3, #32
 8015cae:	681b      	ldr	r3, [r3, #0]
 8015cb0:	2120      	movs	r1, #32
 8015cb2:	68b8      	ldr	r0, [r7, #8]
 8015cb4:	4798      	blx	r3
 8015cb6:	4603      	mov	r3, r0
 8015cb8:	e006      	b.n	8015cc8 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x34>
    else return getNodeFromMemoryPointer(memory, size);
 8015cba:	687a      	ldr	r2, [r7, #4]
 8015cbc:	6839      	ldr	r1, [r7, #0]
 8015cbe:	68f8      	ldr	r0, [r7, #12]
 8015cc0:	f7ff fdef 	bl	80158a2 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>
 8015cc4:	4603      	mov	r3, r0
 8015cc6:	bf00      	nop
}
 8015cc8:	4618      	mov	r0, r3
 8015cca:	3710      	adds	r7, #16
 8015ccc:	46bd      	mov	sp, r7
 8015cce:	bd80      	pop	{r7, pc}

08015cd0 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8015cd0:	b580      	push	{r7, lr}
 8015cd2:	b08a      	sub	sp, #40	; 0x28
 8015cd4:	af04      	add	r7, sp, #16
 8015cd6:	60f8      	str	r0, [r7, #12]
 8015cd8:	60b9      	str	r1, [r7, #8]
 8015cda:	607a      	str	r2, [r7, #4]
 8015cdc:	603b      	str	r3, [r7, #0]
     * If the same allocation is used and the wrong free is called, it will deallocate the memory leak information
     * without the memory leak detector ever noticing it!
     * So, for malloc, we'll allocate the memory separately so we can detect this and give a proper error.
     */

    char* memory = allocateMemoryWithAccountingInformation(allocator, size, file, line, allocatNodesSeperately);
 8015cde:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015ce2:	9301      	str	r3, [sp, #4]
 8015ce4:	6a3b      	ldr	r3, [r7, #32]
 8015ce6:	9300      	str	r3, [sp, #0]
 8015ce8:	683b      	ldr	r3, [r7, #0]
 8015cea:	687a      	ldr	r2, [r7, #4]
 8015cec:	68b9      	ldr	r1, [r7, #8]
 8015cee:	68f8      	ldr	r0, [r7, #12]
 8015cf0:	f7ff ff76 	bl	8015be0 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>
 8015cf4:	6178      	str	r0, [r7, #20]
    if (memory == NULLPTR) return NULLPTR;
 8015cf6:	697b      	ldr	r3, [r7, #20]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d101      	bne.n	8015d00 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x30>
 8015cfc:	2300      	movs	r3, #0
 8015cfe:	e017      	b.n	8015d30 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x60>
    MemoryLeakDetectorNode* node = createMemoryLeakAccountingInformation(allocator, size, memory, allocatNodesSeperately);
 8015d00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015d04:	9300      	str	r3, [sp, #0]
 8015d06:	697b      	ldr	r3, [r7, #20]
 8015d08:	687a      	ldr	r2, [r7, #4]
 8015d0a:	68b9      	ldr	r1, [r7, #8]
 8015d0c:	68f8      	ldr	r0, [r7, #12]
 8015d0e:	f7ff ffc1 	bl	8015c94 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8015d12:	6138      	str	r0, [r7, #16]

    storeLeakInformation(node, memory, size, allocator, file, line);
 8015d14:	6a3b      	ldr	r3, [r7, #32]
 8015d16:	9302      	str	r3, [sp, #8]
 8015d18:	683b      	ldr	r3, [r7, #0]
 8015d1a:	9301      	str	r3, [sp, #4]
 8015d1c:	68bb      	ldr	r3, [r7, #8]
 8015d1e:	9300      	str	r3, [sp, #0]
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	697a      	ldr	r2, [r7, #20]
 8015d24:	6939      	ldr	r1, [r7, #16]
 8015d26:	68f8      	ldr	r0, [r7, #12]
 8015d28:	f7ff fdcc 	bl	80158c4 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8015d2c:	693b      	ldr	r3, [r7, #16]
 8015d2e:	689b      	ldr	r3, [r3, #8]
}
 8015d30:	4618      	mov	r0, r3
 8015d32:	3718      	adds	r7, #24
 8015d34:	46bd      	mov	sp, r7
 8015d36:	bd80      	pop	{r7, pc}

08015d38 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>:
    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
    if (allocatNodesSeperately) allocator->freeMemoryLeakNode( (char*) node);
}

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, const char* file, size_t line, bool allocatNodesSeperately)
{
 8015d38:	b590      	push	{r4, r7, lr}
 8015d3a:	b089      	sub	sp, #36	; 0x24
 8015d3c:	af02      	add	r7, sp, #8
 8015d3e:	60f8      	str	r0, [r7, #12]
 8015d40:	60b9      	str	r1, [r7, #8]
 8015d42:	607a      	str	r2, [r7, #4]
 8015d44:	603b      	str	r3, [r7, #0]
    if (memory == NULLPTR) return;
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d03a      	beq.n	8015dc2 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8a>

    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015d52:	331c      	adds	r3, #28
 8015d54:	6879      	ldr	r1, [r7, #4]
 8015d56:	4618      	mov	r0, r3
 8015d58:	f7ff fc13 	bl	8015582 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8015d5c:	6178      	str	r0, [r7, #20]
    if (node == NULLPTR) {
 8015d5e:	697b      	ldr	r3, [r7, #20]
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d10b      	bne.n	8015d7c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x44>
        outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8015d64:	68fb      	ldr	r3, [r7, #12]
 8015d66:	f103 000c 	add.w	r0, r3, #12
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	685b      	ldr	r3, [r3, #4]
 8015d6e:	9300      	str	r3, [sp, #0]
 8015d70:	68bb      	ldr	r3, [r7, #8]
 8015d72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015d74:	6839      	ldr	r1, [r7, #0]
 8015d76:	f7ff fa0d 	bl	8015194 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
        return;
 8015d7a:	e023      	b.n	8015dc4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    }
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (!allocator->hasBeenDestroyed()) {
 8015d7c:	68b8      	ldr	r0, [r7, #8]
 8015d7e:	f7f8 ff95 	bl	800ecac <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>
 8015d82:	4603      	mov	r3, r0
 8015d84:	f083 0301 	eor.w	r3, r3, #1
 8015d88:	b2db      	uxtb	r3, r3
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d01a      	beq.n	8015dc4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
        size_t size = node->size_;
 8015d8e:	697b      	ldr	r3, [r7, #20]
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	613b      	str	r3, [r7, #16]
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8015d94:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8015d98:	9301      	str	r3, [sp, #4]
 8015d9a:	68bb      	ldr	r3, [r7, #8]
 8015d9c:	9300      	str	r3, [sp, #0]
 8015d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015da0:	683a      	ldr	r2, [r7, #0]
 8015da2:	6979      	ldr	r1, [r7, #20]
 8015da4:	68f8      	ldr	r0, [r7, #12]
 8015da6:	f7ff fe95 	bl	8015ad4 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
        allocator->free_memory((char*) memory, size, file, line);
 8015daa:	68bb      	ldr	r3, [r7, #8]
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	330c      	adds	r3, #12
 8015db0:	681c      	ldr	r4, [r3, #0]
 8015db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015db4:	9300      	str	r3, [sp, #0]
 8015db6:	683b      	ldr	r3, [r7, #0]
 8015db8:	693a      	ldr	r2, [r7, #16]
 8015dba:	6879      	ldr	r1, [r7, #4]
 8015dbc:	68b8      	ldr	r0, [r7, #8]
 8015dbe:	47a0      	blx	r4
 8015dc0:	e000      	b.n	8015dc4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    if (memory == NULLPTR) return;
 8015dc2:	bf00      	nop
    }
}
 8015dc4:	371c      	adds	r7, #28
 8015dc6:	46bd      	mov	sp, r7
 8015dc8:	bd90      	pop	{r4, r7, pc}
	...

08015dcc <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>:

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, bool allocatNodesSeperately)
{
 8015dcc:	b580      	push	{r7, lr}
 8015dce:	b086      	sub	sp, #24
 8015dd0:	af02      	add	r7, sp, #8
 8015dd2:	60f8      	str	r0, [r7, #12]
 8015dd4:	60b9      	str	r1, [r7, #8]
 8015dd6:	607a      	str	r2, [r7, #4]
 8015dd8:	70fb      	strb	r3, [r7, #3]
    deallocMemory(allocator, (char*) memory, UNKNOWN, 0, allocatNodesSeperately);
 8015dda:	4b08      	ldr	r3, [pc, #32]	; (8015dfc <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb+0x30>)
 8015ddc:	681a      	ldr	r2, [r3, #0]
 8015dde:	78fb      	ldrb	r3, [r7, #3]
 8015de0:	9301      	str	r3, [sp, #4]
 8015de2:	2300      	movs	r3, #0
 8015de4:	9300      	str	r3, [sp, #0]
 8015de6:	4613      	mov	r3, r2
 8015de8:	687a      	ldr	r2, [r7, #4]
 8015dea:	68b9      	ldr	r1, [r7, #8]
 8015dec:	68f8      	ldr	r0, [r7, #12]
 8015dee:	f7ff ffa3 	bl	8015d38 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8015df2:	bf00      	nop
 8015df4:	3710      	adds	r7, #16
 8015df6:	46bd      	mov	sp, r7
 8015df8:	bd80      	pop	{r7, pc}
 8015dfa:	bf00      	nop
 8015dfc:	20000100 	.word	0x20000100

08015e00 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>:
        deallocMemory(allocator, memory, __FILE__, __LINE__);
    }
}

char* MemoryLeakDetector::reallocMemory(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8015e00:	b580      	push	{r7, lr}
 8015e02:	b08a      	sub	sp, #40	; 0x28
 8015e04:	af04      	add	r7, sp, #16
 8015e06:	60f8      	str	r0, [r7, #12]
 8015e08:	60b9      	str	r1, [r7, #8]
 8015e0a:	607a      	str	r2, [r7, #4]
 8015e0c:	603b      	str	r3, [r7, #0]
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (memory) {
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d023      	beq.n	8015e5c <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x5c>
        MemoryLeakDetectorNode* node = memoryTable_.removeNode(memory);
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015e1a:	331c      	adds	r3, #28
 8015e1c:	6879      	ldr	r1, [r7, #4]
 8015e1e:	4618      	mov	r0, r3
 8015e20:	f7ff fbaf 	bl	8015582 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8015e24:	6178      	str	r0, [r7, #20]
        if (node == NULLPTR) {
 8015e26:	697b      	ldr	r3, [r7, #20]
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d10c      	bne.n	8015e46 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x46>
            outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	f103 000c 	add.w	r0, r3, #12
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	685b      	ldr	r3, [r3, #4]
 8015e36:	9300      	str	r3, [sp, #0]
 8015e38:	68bb      	ldr	r3, [r7, #8]
 8015e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e3c:	6a39      	ldr	r1, [r7, #32]
 8015e3e:	f7ff f9a9 	bl	8015194 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
            return NULLPTR;
 8015e42:	2300      	movs	r3, #0
 8015e44:	e019      	b.n	8015e7a <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x7a>
        }
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8015e46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015e4a:	9301      	str	r3, [sp, #4]
 8015e4c:	68bb      	ldr	r3, [r7, #8]
 8015e4e:	9300      	str	r3, [sp, #0]
 8015e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e52:	6a3a      	ldr	r2, [r7, #32]
 8015e54:	6979      	ldr	r1, [r7, #20]
 8015e56:	68f8      	ldr	r0, [r7, #12]
 8015e58:	f7ff fe3c 	bl	8015ad4 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
    }
    return reallocateMemoryAndLeakInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8015e5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015e60:	9302      	str	r3, [sp, #8]
 8015e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e64:	9301      	str	r3, [sp, #4]
 8015e66:	6a3b      	ldr	r3, [r7, #32]
 8015e68:	9300      	str	r3, [sp, #0]
 8015e6a:	683b      	ldr	r3, [r7, #0]
 8015e6c:	687a      	ldr	r2, [r7, #4]
 8015e6e:	68b9      	ldr	r1, [r7, #8]
 8015e70:	68f8      	ldr	r0, [r7, #12]
 8015e72:	f7ff fd62 	bl	801593a <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>
 8015e76:	4603      	mov	r3, r0
 8015e78:	bf00      	nop
}
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	3718      	adds	r7, #24
 8015e7e:	46bd      	mov	sp, r7
 8015e80:	bd80      	pop	{r7, pc}

08015e82 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>:

void MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod period)
{
 8015e82:	b580      	push	{r7, lr}
 8015e84:	b084      	sub	sp, #16
 8015e86:	af00      	add	r7, sp, #0
 8015e88:	6078      	str	r0, [r7, #4]
 8015e8a:	460b      	mov	r3, r1
 8015e8c:	70fb      	strb	r3, [r7, #3]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(period);
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015e94:	331c      	adds	r3, #28
 8015e96:	78fa      	ldrb	r2, [r7, #3]
 8015e98:	4611      	mov	r1, r2
 8015e9a:	4618      	mov	r0, r3
 8015e9c:	f7ff fbc0 	bl	8015620 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8015ea0:	60f8      	str	r0, [r7, #12]

    outputBuffer_.startMemoryLeakReporting();
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	330c      	adds	r3, #12
 8015ea6:	4618      	mov	r0, r3
 8015ea8:	f7ff f882 	bl	8014fb0 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>

    while (leak) {
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d010      	beq.n	8015ed4 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x52>
        outputBuffer_.reportMemoryLeak(leak);
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	330c      	adds	r3, #12
 8015eb6:	68f9      	ldr	r1, [r7, #12]
 8015eb8:	4618      	mov	r0, r3
 8015eba:	f7ff f897 	bl	8014fec <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>
        leak = memoryTable_.getNextLeak(leak, period);
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015ec4:	331c      	adds	r3, #28
 8015ec6:	78fa      	ldrb	r2, [r7, #3]
 8015ec8:	68f9      	ldr	r1, [r7, #12]
 8015eca:	4618      	mov	r0, r3
 8015ecc:	f7ff fbcb 	bl	8015666 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8015ed0:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8015ed2:	e7eb      	b.n	8015eac <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x2a>
    }

    outputBuffer_.stopMemoryLeakReporting();
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	330c      	adds	r3, #12
 8015ed8:	4618      	mov	r0, r3
 8015eda:	f7ff f8e7 	bl	80150ac <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>
}
 8015ede:	bf00      	nop
 8015ee0:	3710      	adds	r7, #16
 8015ee2:	46bd      	mov	sp, r7
 8015ee4:	bd80      	pop	{r7, pc}

08015ee6 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>:

const char* MemoryLeakDetector::report(MemLeakPeriod period)
{
 8015ee6:	b580      	push	{r7, lr}
 8015ee8:	b082      	sub	sp, #8
 8015eea:	af00      	add	r7, sp, #0
 8015eec:	6078      	str	r0, [r7, #4]
 8015eee:	460b      	mov	r3, r1
 8015ef0:	70fb      	strb	r3, [r7, #3]
    ConstructMemoryLeakReport(period);
 8015ef2:	78fb      	ldrb	r3, [r7, #3]
 8015ef4:	4619      	mov	r1, r3
 8015ef6:	6878      	ldr	r0, [r7, #4]
 8015ef8:	f7ff ffc3 	bl	8015e82 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>

    return outputBuffer_.toString();
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	330c      	adds	r3, #12
 8015f00:	4618      	mov	r0, r3
 8015f02:	f7ff f9e5 	bl	80152d0 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8015f06:	4603      	mov	r3, r0
}
 8015f08:	4618      	mov	r0, r3
 8015f0a:	3708      	adds	r7, #8
 8015f0c:	46bd      	mov	sp, r7
 8015f0e:	bd80      	pop	{r7, pc}

08015f10 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>:

void MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
{
 8015f10:	b580      	push	{r7, lr}
 8015f12:	b084      	sub	sp, #16
 8015f14:	af00      	add	r7, sp, #0
 8015f16:	6078      	str	r0, [r7, #4]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(mem_leak_period_checking);
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015f1e:	331c      	adds	r3, #28
 8015f20:	2103      	movs	r1, #3
 8015f22:	4618      	mov	r0, r3
 8015f24:	f7ff fb7c 	bl	8015620 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8015f28:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8015f2a:	68fb      	ldr	r3, [r7, #12]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d011      	beq.n	8015f54 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x44>
        if (leak->period_ == mem_leak_period_checking) leak->period_ = mem_leak_period_enabled;
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	7e1b      	ldrb	r3, [r3, #24]
 8015f34:	2b03      	cmp	r3, #3
 8015f36:	d102      	bne.n	8015f3e <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x2e>
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	2202      	movs	r2, #2
 8015f3c:	761a      	strb	r2, [r3, #24]
        leak = memoryTable_.getNextLeak(leak, mem_leak_period_checking);
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015f44:	331c      	adds	r3, #28
 8015f46:	2203      	movs	r2, #3
 8015f48:	68f9      	ldr	r1, [r7, #12]
 8015f4a:	4618      	mov	r0, r3
 8015f4c:	f7ff fb8b 	bl	8015666 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8015f50:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8015f52:	e7ea      	b.n	8015f2a <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x1a>
    }
}
 8015f54:	bf00      	nop
 8015f56:	3710      	adds	r7, #16
 8015f58:	46bd      	mov	sp, r7
 8015f5a:	bd80      	pop	{r7, pc}

08015f5c <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod period)
{
 8015f5c:	b580      	push	{r7, lr}
 8015f5e:	b082      	sub	sp, #8
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	6078      	str	r0, [r7, #4]
 8015f64:	460b      	mov	r3, r1
 8015f66:	70fb      	strb	r3, [r7, #3]
    return memoryTable_.getTotalLeaks(period);
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015f6e:	331c      	adds	r3, #28
 8015f70:	78fa      	ldrb	r2, [r7, #3]
 8015f72:	4611      	mov	r1, r2
 8015f74:	4618      	mov	r0, r3
 8015f76:	f7ff fb30 	bl	80155da <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>
 8015f7a:	4603      	mov	r3, r0
}
 8015f7c:	4618      	mov	r0, r3
 8015f7e:	3708      	adds	r7, #8
 8015f80:	46bd      	mov	sp, r7
 8015f82:	bd80      	pop	{r7, pc}

08015f84 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>:
        SimpleString name_;
        SimpleString type_;
        void* ptr_;

        MockOutputParametersListNode* next_;
        MockOutputParametersListNode(const SimpleString& name, const SimpleString& type, void* ptr)
 8015f84:	b580      	push	{r7, lr}
 8015f86:	b084      	sub	sp, #16
 8015f88:	af00      	add	r7, sp, #0
 8015f8a:	60f8      	str	r0, [r7, #12]
 8015f8c:	60b9      	str	r1, [r7, #8]
 8015f8e:	607a      	str	r2, [r7, #4]
 8015f90:	603b      	str	r3, [r7, #0]
            : name_(name), type_(type), ptr_(ptr), next_(NULLPTR) {}
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	68b9      	ldr	r1, [r7, #8]
 8015f96:	4618      	mov	r0, r3
 8015f98:	f7f5 fb13 	bl	800b5c2 <_ZN12SimpleStringC1ERKS_>
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	3308      	adds	r3, #8
 8015fa0:	6879      	ldr	r1, [r7, #4]
 8015fa2:	4618      	mov	r0, r3
 8015fa4:	f7f5 fb0d 	bl	800b5c2 <_ZN12SimpleStringC1ERKS_>
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	683a      	ldr	r2, [r7, #0]
 8015fac:	611a      	str	r2, [r3, #16]
 8015fae:	68fb      	ldr	r3, [r7, #12]
 8015fb0:	2200      	movs	r2, #0
 8015fb2:	615a      	str	r2, [r3, #20]
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	4618      	mov	r0, r3
 8015fb8:	3710      	adds	r7, #16
 8015fba:	46bd      	mov	sp, r7
 8015fbc:	bd80      	pop	{r7, pc}

08015fbe <_ZN21MockIgnoredActualCall8withNameERK12SimpleString>:
};

class MockIgnoredActualCall: public MockActualCall
{
public:
    virtual MockActualCall& withName(const SimpleString&) _override { return *this;}
 8015fbe:	b480      	push	{r7}
 8015fc0:	b083      	sub	sp, #12
 8015fc2:	af00      	add	r7, sp, #0
 8015fc4:	6078      	str	r0, [r7, #4]
 8015fc6:	6039      	str	r1, [r7, #0]
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	4618      	mov	r0, r3
 8015fcc:	370c      	adds	r7, #12
 8015fce:	46bd      	mov	sp, r7
 8015fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd4:	4770      	bx	lr

08015fd6 <_ZN21MockIgnoredActualCall13withCallOrderEj>:
    virtual MockActualCall& withCallOrder(unsigned int) _override { return *this; }
 8015fd6:	b480      	push	{r7}
 8015fd8:	b083      	sub	sp, #12
 8015fda:	af00      	add	r7, sp, #0
 8015fdc:	6078      	str	r0, [r7, #4]
 8015fde:	6039      	str	r1, [r7, #0]
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	4618      	mov	r0, r3
 8015fe4:	370c      	adds	r7, #12
 8015fe6:	46bd      	mov	sp, r7
 8015fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fec:	4770      	bx	lr

08015fee <_ZN21MockIgnoredActualCall17withBoolParameterERK12SimpleStringb>:
    virtual MockActualCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 8015fee:	b480      	push	{r7}
 8015ff0:	b085      	sub	sp, #20
 8015ff2:	af00      	add	r7, sp, #0
 8015ff4:	60f8      	str	r0, [r7, #12]
 8015ff6:	60b9      	str	r1, [r7, #8]
 8015ff8:	4613      	mov	r3, r2
 8015ffa:	71fb      	strb	r3, [r7, #7]
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	4618      	mov	r0, r3
 8016000:	3714      	adds	r7, #20
 8016002:	46bd      	mov	sp, r7
 8016004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016008:	4770      	bx	lr

0801600a <_ZN21MockIgnoredActualCall16withIntParameterERK12SimpleStringi>:
    virtual MockActualCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 801600a:	b480      	push	{r7}
 801600c:	b085      	sub	sp, #20
 801600e:	af00      	add	r7, sp, #0
 8016010:	60f8      	str	r0, [r7, #12]
 8016012:	60b9      	str	r1, [r7, #8]
 8016014:	607a      	str	r2, [r7, #4]
 8016016:	68fb      	ldr	r3, [r7, #12]
 8016018:	4618      	mov	r0, r3
 801601a:	3714      	adds	r7, #20
 801601c:	46bd      	mov	sp, r7
 801601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016022:	4770      	bx	lr

08016024 <_ZN21MockIgnoredActualCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockActualCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override { return *this; }
 8016024:	b480      	push	{r7}
 8016026:	b085      	sub	sp, #20
 8016028:	af00      	add	r7, sp, #0
 801602a:	60f8      	str	r0, [r7, #12]
 801602c:	60b9      	str	r1, [r7, #8]
 801602e:	607a      	str	r2, [r7, #4]
 8016030:	68fb      	ldr	r3, [r7, #12]
 8016032:	4618      	mov	r0, r3
 8016034:	3714      	adds	r7, #20
 8016036:	46bd      	mov	sp, r7
 8016038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801603c:	4770      	bx	lr

0801603e <_ZN21MockIgnoredActualCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockActualCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 801603e:	b480      	push	{r7}
 8016040:	b085      	sub	sp, #20
 8016042:	af00      	add	r7, sp, #0
 8016044:	60f8      	str	r0, [r7, #12]
 8016046:	60b9      	str	r1, [r7, #8]
 8016048:	607a      	str	r2, [r7, #4]
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	4618      	mov	r0, r3
 801604e:	3714      	adds	r7, #20
 8016050:	46bd      	mov	sp, r7
 8016052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016056:	4770      	bx	lr

08016058 <_ZN21MockIgnoredActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockActualCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 8016058:	b480      	push	{r7}
 801605a:	b085      	sub	sp, #20
 801605c:	af00      	add	r7, sp, #0
 801605e:	60f8      	str	r0, [r7, #12]
 8016060:	60b9      	str	r1, [r7, #8]
 8016062:	607a      	str	r2, [r7, #4]
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	4618      	mov	r0, r3
 8016068:	3714      	adds	r7, #20
 801606a:	46bd      	mov	sp, r7
 801606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016070:	4770      	bx	lr

08016072 <_ZN21MockIgnoredActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockActualCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 8016072:	b480      	push	{r7}
 8016074:	b085      	sub	sp, #20
 8016076:	af00      	add	r7, sp, #0
 8016078:	60f8      	str	r0, [r7, #12]
 801607a:	60b9      	str	r1, [r7, #8]
 801607c:	4639      	mov	r1, r7
 801607e:	e881 000c 	stmia.w	r1, {r2, r3}
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	4618      	mov	r0, r3
 8016086:	3714      	adds	r7, #20
 8016088:	46bd      	mov	sp, r7
 801608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801608e:	4770      	bx	lr

08016090 <_ZN21MockIgnoredActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockActualCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 8016090:	b480      	push	{r7}
 8016092:	b085      	sub	sp, #20
 8016094:	af00      	add	r7, sp, #0
 8016096:	60f8      	str	r0, [r7, #12]
 8016098:	60b9      	str	r1, [r7, #8]
 801609a:	4639      	mov	r1, r7
 801609c:	e881 000c 	stmia.w	r1, {r2, r3}
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	4618      	mov	r0, r3
 80160a4:	3714      	adds	r7, #20
 80160a6:	46bd      	mov	sp, r7
 80160a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160ac:	4770      	bx	lr

080160ae <_ZN21MockIgnoredActualCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockActualCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 80160ae:	b480      	push	{r7}
 80160b0:	b085      	sub	sp, #20
 80160b2:	af00      	add	r7, sp, #0
 80160b4:	60f8      	str	r0, [r7, #12]
 80160b6:	60b9      	str	r1, [r7, #8]
 80160b8:	ed87 0b00 	vstr	d0, [r7]
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	4618      	mov	r0, r3
 80160c0:	3714      	adds	r7, #20
 80160c2:	46bd      	mov	sp, r7
 80160c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160c8:	4770      	bx	lr

080160ca <_ZN21MockIgnoredActualCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockActualCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 80160ca:	b480      	push	{r7}
 80160cc:	b085      	sub	sp, #20
 80160ce:	af00      	add	r7, sp, #0
 80160d0:	60f8      	str	r0, [r7, #12]
 80160d2:	60b9      	str	r1, [r7, #8]
 80160d4:	607a      	str	r2, [r7, #4]
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	4618      	mov	r0, r3
 80160da:	3714      	adds	r7, #20
 80160dc:	46bd      	mov	sp, r7
 80160de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160e2:	4770      	bx	lr

080160e4 <_ZN21MockIgnoredActualCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockActualCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 80160e4:	b480      	push	{r7}
 80160e6:	b085      	sub	sp, #20
 80160e8:	af00      	add	r7, sp, #0
 80160ea:	60f8      	str	r0, [r7, #12]
 80160ec:	60b9      	str	r1, [r7, #8]
 80160ee:	607a      	str	r2, [r7, #4]
 80160f0:	68fb      	ldr	r3, [r7, #12]
 80160f2:	4618      	mov	r0, r3
 80160f4:	3714      	adds	r7, #20
 80160f6:	46bd      	mov	sp, r7
 80160f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160fc:	4770      	bx	lr

080160fe <_ZN21MockIgnoredActualCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockActualCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 80160fe:	b480      	push	{r7}
 8016100:	b085      	sub	sp, #20
 8016102:	af00      	add	r7, sp, #0
 8016104:	60f8      	str	r0, [r7, #12]
 8016106:	60b9      	str	r1, [r7, #8]
 8016108:	607a      	str	r2, [r7, #4]
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	4618      	mov	r0, r3
 801610e:	3714      	adds	r7, #20
 8016110:	46bd      	mov	sp, r7
 8016112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016116:	4770      	bx	lr

08016118 <_ZN21MockIgnoredActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockActualCall& withFunctionPointerParameter(const SimpleString& , void (*)()) _override { return *this; }
 8016118:	b480      	push	{r7}
 801611a:	b085      	sub	sp, #20
 801611c:	af00      	add	r7, sp, #0
 801611e:	60f8      	str	r0, [r7, #12]
 8016120:	60b9      	str	r1, [r7, #8]
 8016122:	607a      	str	r2, [r7, #4]
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	4618      	mov	r0, r3
 8016128:	3714      	adds	r7, #20
 801612a:	46bd      	mov	sp, r7
 801612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016130:	4770      	bx	lr

08016132 <_ZN21MockIgnoredActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockActualCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override  { return *this; }
 8016132:	b480      	push	{r7}
 8016134:	b085      	sub	sp, #20
 8016136:	af00      	add	r7, sp, #0
 8016138:	60f8      	str	r0, [r7, #12]
 801613a:	60b9      	str	r1, [r7, #8]
 801613c:	607a      	str	r2, [r7, #4]
 801613e:	603b      	str	r3, [r7, #0]
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	4618      	mov	r0, r3
 8016144:	3714      	adds	r7, #20
 8016146:	46bd      	mov	sp, r7
 8016148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801614c:	4770      	bx	lr

0801614e <_ZN21MockIgnoredActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockActualCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 801614e:	b480      	push	{r7}
 8016150:	b085      	sub	sp, #20
 8016152:	af00      	add	r7, sp, #0
 8016154:	60f8      	str	r0, [r7, #12]
 8016156:	60b9      	str	r1, [r7, #8]
 8016158:	607a      	str	r2, [r7, #4]
 801615a:	603b      	str	r3, [r7, #0]
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	4618      	mov	r0, r3
 8016160:	3714      	adds	r7, #20
 8016162:	46bd      	mov	sp, r7
 8016164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016168:	4770      	bx	lr

0801616a <_ZN21MockIgnoredActualCall19withOutputParameterERK12SimpleStringPv>:
    virtual MockActualCall& withOutputParameter(const SimpleString&, void*) _override { return *this; }
 801616a:	b480      	push	{r7}
 801616c:	b085      	sub	sp, #20
 801616e:	af00      	add	r7, sp, #0
 8016170:	60f8      	str	r0, [r7, #12]
 8016172:	60b9      	str	r1, [r7, #8]
 8016174:	607a      	str	r2, [r7, #4]
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	4618      	mov	r0, r3
 801617a:	3714      	adds	r7, #20
 801617c:	46bd      	mov	sp, r7
 801617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016182:	4770      	bx	lr

08016184 <_ZN21MockIgnoredActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:
    virtual MockActualCall& withOutputParameterOfType(const SimpleString&, const SimpleString&, void*) _override { return *this; }
 8016184:	b480      	push	{r7}
 8016186:	b085      	sub	sp, #20
 8016188:	af00      	add	r7, sp, #0
 801618a:	60f8      	str	r0, [r7, #12]
 801618c:	60b9      	str	r1, [r7, #8]
 801618e:	607a      	str	r2, [r7, #4]
 8016190:	603b      	str	r3, [r7, #0]
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	4618      	mov	r0, r3
 8016196:	3714      	adds	r7, #20
 8016198:	46bd      	mov	sp, r7
 801619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801619e:	4770      	bx	lr

080161a0 <_ZN21MockIgnoredActualCall14hasReturnValueEv>:

    virtual bool hasReturnValue() _override { return false; }
 80161a0:	b480      	push	{r7}
 80161a2:	b083      	sub	sp, #12
 80161a4:	af00      	add	r7, sp, #0
 80161a6:	6078      	str	r0, [r7, #4]
 80161a8:	2300      	movs	r3, #0
 80161aa:	4618      	mov	r0, r3
 80161ac:	370c      	adds	r7, #12
 80161ae:	46bd      	mov	sp, r7
 80161b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161b4:	4770      	bx	lr
	...

080161b8 <_ZN21MockIgnoredActualCall11returnValueEv>:
    virtual MockNamedValue returnValue() _override { return MockNamedValue(""); }
 80161b8:	b580      	push	{r7, lr}
 80161ba:	b084      	sub	sp, #16
 80161bc:	af00      	add	r7, sp, #0
 80161be:	6078      	str	r0, [r7, #4]
 80161c0:	6039      	str	r1, [r7, #0]
 80161c2:	f107 0308 	add.w	r3, r7, #8
 80161c6:	4909      	ldr	r1, [pc, #36]	; (80161ec <_ZN21MockIgnoredActualCall11returnValueEv+0x34>)
 80161c8:	4618      	mov	r0, r3
 80161ca:	f7f5 f9a6 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80161ce:	f107 0308 	add.w	r3, r7, #8
 80161d2:	4619      	mov	r1, r3
 80161d4:	6878      	ldr	r0, [r7, #4]
 80161d6:	f005 fec5 	bl	801bf64 <_ZN14MockNamedValueC1ERK12SimpleString>
 80161da:	f107 0308 	add.w	r3, r7, #8
 80161de:	4618      	mov	r0, r3
 80161e0:	f7f5 fd53 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 80161e4:	6878      	ldr	r0, [r7, #4]
 80161e6:	3710      	adds	r7, #16
 80161e8:	46bd      	mov	sp, r7
 80161ea:	bd80      	pop	{r7, pc}
 80161ec:	080244dc 	.word	0x080244dc

080161f0 <_ZN21MockIgnoredActualCall24returnBoolValueOrDefaultEb>:

    virtual bool returnBoolValueOrDefault(bool value) _override { return value; }
 80161f0:	b480      	push	{r7}
 80161f2:	b083      	sub	sp, #12
 80161f4:	af00      	add	r7, sp, #0
 80161f6:	6078      	str	r0, [r7, #4]
 80161f8:	460b      	mov	r3, r1
 80161fa:	70fb      	strb	r3, [r7, #3]
 80161fc:	78fb      	ldrb	r3, [r7, #3]
 80161fe:	4618      	mov	r0, r3
 8016200:	370c      	adds	r7, #12
 8016202:	46bd      	mov	sp, r7
 8016204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016208:	4770      	bx	lr

0801620a <_ZN21MockIgnoredActualCall15returnBoolValueEv>:
    virtual bool returnBoolValue() _override { return false; }
 801620a:	b480      	push	{r7}
 801620c:	b083      	sub	sp, #12
 801620e:	af00      	add	r7, sp, #0
 8016210:	6078      	str	r0, [r7, #4]
 8016212:	2300      	movs	r3, #0
 8016214:	4618      	mov	r0, r3
 8016216:	370c      	adds	r7, #12
 8016218:	46bd      	mov	sp, r7
 801621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801621e:	4770      	bx	lr

08016220 <_ZN21MockIgnoredActualCall14returnIntValueEv>:

    virtual int returnIntValue() _override { return 0; }
 8016220:	b480      	push	{r7}
 8016222:	b083      	sub	sp, #12
 8016224:	af00      	add	r7, sp, #0
 8016226:	6078      	str	r0, [r7, #4]
 8016228:	2300      	movs	r3, #0
 801622a:	4618      	mov	r0, r3
 801622c:	370c      	adds	r7, #12
 801622e:	46bd      	mov	sp, r7
 8016230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016234:	4770      	bx	lr

08016236 <_ZN21MockIgnoredActualCall23returnIntValueOrDefaultEi>:
    virtual int returnIntValueOrDefault(int value) _override { return value; }
 8016236:	b480      	push	{r7}
 8016238:	b083      	sub	sp, #12
 801623a:	af00      	add	r7, sp, #0
 801623c:	6078      	str	r0, [r7, #4]
 801623e:	6039      	str	r1, [r7, #0]
 8016240:	683b      	ldr	r3, [r7, #0]
 8016242:	4618      	mov	r0, r3
 8016244:	370c      	adds	r7, #12
 8016246:	46bd      	mov	sp, r7
 8016248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801624c:	4770      	bx	lr

0801624e <_ZN21MockIgnoredActualCall26returnUnsignedLongIntValueEv>:

    virtual unsigned long int returnUnsignedLongIntValue() _override { return 0; }
 801624e:	b480      	push	{r7}
 8016250:	b083      	sub	sp, #12
 8016252:	af00      	add	r7, sp, #0
 8016254:	6078      	str	r0, [r7, #4]
 8016256:	2300      	movs	r3, #0
 8016258:	4618      	mov	r0, r3
 801625a:	370c      	adds	r7, #12
 801625c:	46bd      	mov	sp, r7
 801625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016262:	4770      	bx	lr

08016264 <_ZN21MockIgnoredActualCall35returnUnsignedLongIntValueOrDefaultEm>:
    virtual unsigned long int returnUnsignedLongIntValueOrDefault(unsigned long int value) _override { return value; }
 8016264:	b480      	push	{r7}
 8016266:	b083      	sub	sp, #12
 8016268:	af00      	add	r7, sp, #0
 801626a:	6078      	str	r0, [r7, #4]
 801626c:	6039      	str	r1, [r7, #0]
 801626e:	683b      	ldr	r3, [r7, #0]
 8016270:	4618      	mov	r0, r3
 8016272:	370c      	adds	r7, #12
 8016274:	46bd      	mov	sp, r7
 8016276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801627a:	4770      	bx	lr

0801627c <_ZN21MockIgnoredActualCall18returnLongIntValueEv>:

    virtual long int returnLongIntValue() _override { return 0; }
 801627c:	b480      	push	{r7}
 801627e:	b083      	sub	sp, #12
 8016280:	af00      	add	r7, sp, #0
 8016282:	6078      	str	r0, [r7, #4]
 8016284:	2300      	movs	r3, #0
 8016286:	4618      	mov	r0, r3
 8016288:	370c      	adds	r7, #12
 801628a:	46bd      	mov	sp, r7
 801628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016290:	4770      	bx	lr

08016292 <_ZN21MockIgnoredActualCall27returnLongIntValueOrDefaultEl>:
    virtual long int returnLongIntValueOrDefault(long int value) _override { return value; }
 8016292:	b480      	push	{r7}
 8016294:	b083      	sub	sp, #12
 8016296:	af00      	add	r7, sp, #0
 8016298:	6078      	str	r0, [r7, #4]
 801629a:	6039      	str	r1, [r7, #0]
 801629c:	683b      	ldr	r3, [r7, #0]
 801629e:	4618      	mov	r0, r3
 80162a0:	370c      	adds	r7, #12
 80162a2:	46bd      	mov	sp, r7
 80162a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162a8:	4770      	bx	lr

080162aa <_ZN21MockIgnoredActualCall30returnUnsignedLongLongIntValueEv>:

    virtual cpputest_ulonglong returnUnsignedLongLongIntValue() _override { return 0; }
 80162aa:	b580      	push	{r7, lr}
 80162ac:	b082      	sub	sp, #8
 80162ae:	af00      	add	r7, sp, #0
 80162b0:	6078      	str	r0, [r7, #4]
 80162b2:	6039      	str	r1, [r7, #0]
 80162b4:	2100      	movs	r1, #0
 80162b6:	6878      	ldr	r0, [r7, #4]
 80162b8:	f7f3 f972 	bl	80095a0 <_ZN18cpputest_ulonglongC1Ei>
 80162bc:	6878      	ldr	r0, [r7, #4]
 80162be:	3708      	adds	r7, #8
 80162c0:	46bd      	mov	sp, r7
 80162c2:	bd80      	pop	{r7, pc}

080162c4 <_ZN21MockIgnoredActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:
    virtual cpputest_ulonglong returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong value) _override { return value; }
 80162c4:	b480      	push	{r7}
 80162c6:	b085      	sub	sp, #20
 80162c8:	af00      	add	r7, sp, #0
 80162ca:	60f8      	str	r0, [r7, #12]
 80162cc:	60b9      	str	r1, [r7, #8]
 80162ce:	4639      	mov	r1, r7
 80162d0:	e881 000c 	stmia.w	r1, {r2, r3}
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	461a      	mov	r2, r3
 80162d8:	463b      	mov	r3, r7
 80162da:	cb03      	ldmia	r3!, {r0, r1}
 80162dc:	6010      	str	r0, [r2, #0]
 80162de:	6051      	str	r1, [r2, #4]
 80162e0:	68f8      	ldr	r0, [r7, #12]
 80162e2:	3714      	adds	r7, #20
 80162e4:	46bd      	mov	sp, r7
 80162e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ea:	4770      	bx	lr

080162ec <_ZN21MockIgnoredActualCall22returnLongLongIntValueEv>:

    virtual cpputest_longlong returnLongLongIntValue() _override { return 0; }
 80162ec:	b580      	push	{r7, lr}
 80162ee:	b082      	sub	sp, #8
 80162f0:	af00      	add	r7, sp, #0
 80162f2:	6078      	str	r0, [r7, #4]
 80162f4:	6039      	str	r1, [r7, #0]
 80162f6:	2100      	movs	r1, #0
 80162f8:	6878      	ldr	r0, [r7, #4]
 80162fa:	f7f3 f945 	bl	8009588 <_ZN17cpputest_longlongC1Ei>
 80162fe:	6878      	ldr	r0, [r7, #4]
 8016300:	3708      	adds	r7, #8
 8016302:	46bd      	mov	sp, r7
 8016304:	bd80      	pop	{r7, pc}

08016306 <_ZN21MockIgnoredActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:
    virtual cpputest_longlong returnLongLongIntValueOrDefault(cpputest_longlong value) _override { return value; }
 8016306:	b480      	push	{r7}
 8016308:	b085      	sub	sp, #20
 801630a:	af00      	add	r7, sp, #0
 801630c:	60f8      	str	r0, [r7, #12]
 801630e:	60b9      	str	r1, [r7, #8]
 8016310:	4639      	mov	r1, r7
 8016312:	e881 000c 	stmia.w	r1, {r2, r3}
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	461a      	mov	r2, r3
 801631a:	463b      	mov	r3, r7
 801631c:	cb03      	ldmia	r3!, {r0, r1}
 801631e:	6010      	str	r0, [r2, #0]
 8016320:	6051      	str	r1, [r2, #4]
 8016322:	68f8      	ldr	r0, [r7, #12]
 8016324:	3714      	adds	r7, #20
 8016326:	46bd      	mov	sp, r7
 8016328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801632c:	4770      	bx	lr

0801632e <_ZN21MockIgnoredActualCall22returnUnsignedIntValueEv>:

    virtual unsigned int returnUnsignedIntValue() _override { return 0; }
 801632e:	b480      	push	{r7}
 8016330:	b083      	sub	sp, #12
 8016332:	af00      	add	r7, sp, #0
 8016334:	6078      	str	r0, [r7, #4]
 8016336:	2300      	movs	r3, #0
 8016338:	4618      	mov	r0, r3
 801633a:	370c      	adds	r7, #12
 801633c:	46bd      	mov	sp, r7
 801633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016342:	4770      	bx	lr

08016344 <_ZN21MockIgnoredActualCall31returnUnsignedIntValueOrDefaultEj>:
    virtual unsigned int returnUnsignedIntValueOrDefault(unsigned int value) _override { return value; }
 8016344:	b480      	push	{r7}
 8016346:	b083      	sub	sp, #12
 8016348:	af00      	add	r7, sp, #0
 801634a:	6078      	str	r0, [r7, #4]
 801634c:	6039      	str	r1, [r7, #0]
 801634e:	683b      	ldr	r3, [r7, #0]
 8016350:	4618      	mov	r0, r3
 8016352:	370c      	adds	r7, #12
 8016354:	46bd      	mov	sp, r7
 8016356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801635a:	4770      	bx	lr

0801635c <_ZN21MockIgnoredActualCall17returnDoubleValueEv>:

    virtual double returnDoubleValue() _override { return 0.0; }
 801635c:	b480      	push	{r7}
 801635e:	b083      	sub	sp, #12
 8016360:	af00      	add	r7, sp, #0
 8016362:	6078      	str	r0, [r7, #4]
 8016364:	f04f 0200 	mov.w	r2, #0
 8016368:	f04f 0300 	mov.w	r3, #0
 801636c:	ec43 2b17 	vmov	d7, r2, r3
 8016370:	eeb0 0a47 	vmov.f32	s0, s14
 8016374:	eef0 0a67 	vmov.f32	s1, s15
 8016378:	370c      	adds	r7, #12
 801637a:	46bd      	mov	sp, r7
 801637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016380:	4770      	bx	lr

08016382 <_ZN21MockIgnoredActualCall26returnDoubleValueOrDefaultEd>:
    virtual double returnDoubleValueOrDefault(double value) _override { return value; }
 8016382:	b480      	push	{r7}
 8016384:	b085      	sub	sp, #20
 8016386:	af00      	add	r7, sp, #0
 8016388:	60f8      	str	r0, [r7, #12]
 801638a:	ed87 0b00 	vstr	d0, [r7]
 801638e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016392:	ec43 2b17 	vmov	d7, r2, r3
 8016396:	eeb0 0a47 	vmov.f32	s0, s14
 801639a:	eef0 0a67 	vmov.f32	s1, s15
 801639e:	3714      	adds	r7, #20
 80163a0:	46bd      	mov	sp, r7
 80163a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163a6:	4770      	bx	lr

080163a8 <_ZN21MockIgnoredActualCall17returnStringValueEv>:

    virtual const char * returnStringValue() _override { return ""; }
 80163a8:	b480      	push	{r7}
 80163aa:	b083      	sub	sp, #12
 80163ac:	af00      	add	r7, sp, #0
 80163ae:	6078      	str	r0, [r7, #4]
 80163b0:	4b03      	ldr	r3, [pc, #12]	; (80163c0 <_ZN21MockIgnoredActualCall17returnStringValueEv+0x18>)
 80163b2:	4618      	mov	r0, r3
 80163b4:	370c      	adds	r7, #12
 80163b6:	46bd      	mov	sp, r7
 80163b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163bc:	4770      	bx	lr
 80163be:	bf00      	nop
 80163c0:	080244dc 	.word	0x080244dc

080163c4 <_ZN21MockIgnoredActualCall26returnStringValueOrDefaultEPKc>:
    virtual const char * returnStringValueOrDefault(const char * value) _override { return value; }
 80163c4:	b480      	push	{r7}
 80163c6:	b083      	sub	sp, #12
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	6078      	str	r0, [r7, #4]
 80163cc:	6039      	str	r1, [r7, #0]
 80163ce:	683b      	ldr	r3, [r7, #0]
 80163d0:	4618      	mov	r0, r3
 80163d2:	370c      	adds	r7, #12
 80163d4:	46bd      	mov	sp, r7
 80163d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163da:	4770      	bx	lr

080163dc <_ZN21MockIgnoredActualCall18returnPointerValueEv>:

    virtual void * returnPointerValue() _override { return NULLPTR; }
 80163dc:	b480      	push	{r7}
 80163de:	b083      	sub	sp, #12
 80163e0:	af00      	add	r7, sp, #0
 80163e2:	6078      	str	r0, [r7, #4]
 80163e4:	2300      	movs	r3, #0
 80163e6:	4618      	mov	r0, r3
 80163e8:	370c      	adds	r7, #12
 80163ea:	46bd      	mov	sp, r7
 80163ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163f0:	4770      	bx	lr

080163f2 <_ZN21MockIgnoredActualCall27returnPointerValueOrDefaultEPv>:
    virtual void * returnPointerValueOrDefault(void * value) _override { return value; }
 80163f2:	b480      	push	{r7}
 80163f4:	b083      	sub	sp, #12
 80163f6:	af00      	add	r7, sp, #0
 80163f8:	6078      	str	r0, [r7, #4]
 80163fa:	6039      	str	r1, [r7, #0]
 80163fc:	683b      	ldr	r3, [r7, #0]
 80163fe:	4618      	mov	r0, r3
 8016400:	370c      	adds	r7, #12
 8016402:	46bd      	mov	sp, r7
 8016404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016408:	4770      	bx	lr

0801640a <_ZN21MockIgnoredActualCall23returnConstPointerValueEv>:

    virtual const void * returnConstPointerValue() _override { return NULLPTR; }
 801640a:	b480      	push	{r7}
 801640c:	b083      	sub	sp, #12
 801640e:	af00      	add	r7, sp, #0
 8016410:	6078      	str	r0, [r7, #4]
 8016412:	2300      	movs	r3, #0
 8016414:	4618      	mov	r0, r3
 8016416:	370c      	adds	r7, #12
 8016418:	46bd      	mov	sp, r7
 801641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801641e:	4770      	bx	lr

08016420 <_ZN21MockIgnoredActualCall32returnConstPointerValueOrDefaultEPKv>:
    virtual const void * returnConstPointerValueOrDefault(const void * value) _override { return value; }
 8016420:	b480      	push	{r7}
 8016422:	b083      	sub	sp, #12
 8016424:	af00      	add	r7, sp, #0
 8016426:	6078      	str	r0, [r7, #4]
 8016428:	6039      	str	r1, [r7, #0]
 801642a:	683b      	ldr	r3, [r7, #0]
 801642c:	4618      	mov	r0, r3
 801642e:	370c      	adds	r7, #12
 8016430:	46bd      	mov	sp, r7
 8016432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016436:	4770      	bx	lr

08016438 <_ZN21MockIgnoredActualCall26returnFunctionPointerValueEv>:

    virtual void (*returnFunctionPointerValue())() _override { return NULLPTR; }
 8016438:	b480      	push	{r7}
 801643a:	b083      	sub	sp, #12
 801643c:	af00      	add	r7, sp, #0
 801643e:	6078      	str	r0, [r7, #4]
 8016440:	2300      	movs	r3, #0
 8016442:	4618      	mov	r0, r3
 8016444:	370c      	adds	r7, #12
 8016446:	46bd      	mov	sp, r7
 8016448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801644c:	4770      	bx	lr

0801644e <_ZN21MockIgnoredActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:
    virtual void (*returnFunctionPointerValueOrDefault(void (*value)()))() _override { return value; }
 801644e:	b480      	push	{r7}
 8016450:	b083      	sub	sp, #12
 8016452:	af00      	add	r7, sp, #0
 8016454:	6078      	str	r0, [r7, #4]
 8016456:	6039      	str	r1, [r7, #0]
 8016458:	683b      	ldr	r3, [r7, #0]
 801645a:	4618      	mov	r0, r3
 801645c:	370c      	adds	r7, #12
 801645e:	46bd      	mov	sp, r7
 8016460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016464:	4770      	bx	lr

08016466 <_ZN21MockIgnoredActualCall8onObjectEPKv>:

    virtual MockActualCall& onObject(const void* ) _override { return *this; }
 8016466:	b480      	push	{r7}
 8016468:	b083      	sub	sp, #12
 801646a:	af00      	add	r7, sp, #0
 801646c:	6078      	str	r0, [r7, #4]
 801646e:	6039      	str	r1, [r7, #0]
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	4618      	mov	r0, r3
 8016474:	370c      	adds	r7, #12
 8016476:	46bd      	mov	sp, r7
 8016478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801647c:	4770      	bx	lr
	...

08016480 <_ZN14MockActualCallC1Ev>:
#include "CppUTestExt/MockCheckedActualCall.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"
#include "CppUTestExt/MockFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

MockActualCall::MockActualCall()
 8016480:	b480      	push	{r7}
 8016482:	b083      	sub	sp, #12
 8016484:	af00      	add	r7, sp, #0
 8016486:	6078      	str	r0, [r7, #4]
 8016488:	4a04      	ldr	r2, [pc, #16]	; (801649c <_ZN14MockActualCallC1Ev+0x1c>)
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	601a      	str	r2, [r3, #0]
{
}
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	4618      	mov	r0, r3
 8016492:	370c      	adds	r7, #12
 8016494:	46bd      	mov	sp, r7
 8016496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801649a:	4770      	bx	lr
 801649c:	08026e84 	.word	0x08026e84

080164a0 <_ZN14MockActualCallD1Ev>:

MockActualCall::~MockActualCall()
 80164a0:	b480      	push	{r7}
 80164a2:	b083      	sub	sp, #12
 80164a4:	af00      	add	r7, sp, #0
 80164a6:	6078      	str	r0, [r7, #4]
 80164a8:	4a04      	ldr	r2, [pc, #16]	; (80164bc <_ZN14MockActualCallD1Ev+0x1c>)
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	601a      	str	r2, [r3, #0]
{
}
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	4618      	mov	r0, r3
 80164b2:	370c      	adds	r7, #12
 80164b4:	46bd      	mov	sp, r7
 80164b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ba:	4770      	bx	lr
 80164bc:	08026e84 	.word	0x08026e84

080164c0 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>:

void MockCheckedActualCall::setName(const SimpleString& name)
{
 80164c0:	b580      	push	{r7, lr}
 80164c2:	b082      	sub	sp, #8
 80164c4:	af00      	add	r7, sp, #0
 80164c6:	6078      	str	r0, [r7, #4]
 80164c8:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	3304      	adds	r3, #4
 80164ce:	6839      	ldr	r1, [r7, #0]
 80164d0:	4618      	mov	r0, r3
 80164d2:	f7f5 f88e 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
}
 80164d6:	bf00      	nop
 80164d8:	3708      	adds	r7, #8
 80164da:	46bd      	mov	sp, r7
 80164dc:	bd80      	pop	{r7, pc}

080164de <_ZNK21MockCheckedActualCall7getNameEv>:

SimpleString MockCheckedActualCall::getName() const
{
 80164de:	b580      	push	{r7, lr}
 80164e0:	b082      	sub	sp, #8
 80164e2:	af00      	add	r7, sp, #0
 80164e4:	6078      	str	r0, [r7, #4]
 80164e6:	6039      	str	r1, [r7, #0]
    return functionName_;
 80164e8:	683b      	ldr	r3, [r7, #0]
 80164ea:	3304      	adds	r3, #4
 80164ec:	4619      	mov	r1, r3
 80164ee:	6878      	ldr	r0, [r7, #4]
 80164f0:	f7f5 f867 	bl	800b5c2 <_ZN12SimpleStringC1ERKS_>
}
 80164f4:	6878      	ldr	r0, [r7, #4]
 80164f6:	3708      	adds	r7, #8
 80164f8:	46bd      	mov	sp, r7
 80164fa:	bd80      	pop	{r7, pc}

080164fc <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>:

MockCheckedActualCall::MockCheckedActualCall(unsigned int callOrder, MockFailureReporter* reporter, const MockExpectedCallsList& allExpectations)
 80164fc:	b580      	push	{r7, lr}
 80164fe:	b084      	sub	sp, #16
 8016500:	af00      	add	r7, sp, #0
 8016502:	60f8      	str	r0, [r7, #12]
 8016504:	60b9      	str	r1, [r7, #8]
 8016506:	607a      	str	r2, [r7, #4]
 8016508:	603b      	str	r3, [r7, #0]
    : callOrder_(callOrder), reporter_(reporter), state_(CALL_SUCCEED), expectationsChecked_(false), matchingExpectation_(NULLPTR),
      allExpectations_(allExpectations), outputParameterExpectations_(NULLPTR)
 801650a:	68fb      	ldr	r3, [r7, #12]
 801650c:	4618      	mov	r0, r3
 801650e:	f7ff ffb7 	bl	8016480 <_ZN14MockActualCallC1Ev>
 8016512:	4a17      	ldr	r2, [pc, #92]	; (8016570 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x74>)
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	601a      	str	r2, [r3, #0]
 8016518:	68fb      	ldr	r3, [r7, #12]
 801651a:	3304      	adds	r3, #4
 801651c:	4915      	ldr	r1, [pc, #84]	; (8016574 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x78>)
 801651e:	4618      	mov	r0, r3
 8016520:	f7f4 fffb 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8016524:	68fb      	ldr	r3, [r7, #12]
 8016526:	68ba      	ldr	r2, [r7, #8]
 8016528:	60da      	str	r2, [r3, #12]
 801652a:	68fb      	ldr	r3, [r7, #12]
 801652c:	687a      	ldr	r2, [r7, #4]
 801652e:	611a      	str	r2, [r3, #16]
 8016530:	68fb      	ldr	r3, [r7, #12]
 8016532:	2202      	movs	r2, #2
 8016534:	751a      	strb	r2, [r3, #20]
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	2200      	movs	r2, #0
 801653a:	755a      	strb	r2, [r3, #21]
 801653c:	68fb      	ldr	r3, [r7, #12]
 801653e:	2200      	movs	r2, #0
 8016540:	619a      	str	r2, [r3, #24]
 8016542:	68fb      	ldr	r3, [r7, #12]
 8016544:	331c      	adds	r3, #28
 8016546:	4618      	mov	r0, r3
 8016548:	f004 f814 	bl	801a574 <_ZN21MockExpectedCallsListC1Ev>
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	683a      	ldr	r2, [r7, #0]
 8016550:	625a      	str	r2, [r3, #36]	; 0x24
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	2200      	movs	r2, #0
 8016556:	629a      	str	r2, [r3, #40]	; 0x28
{
    potentiallyMatchingExpectations_.addPotentiallyMatchingExpectations(allExpectations);
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	331c      	adds	r3, #28
 801655c:	6839      	ldr	r1, [r7, #0]
 801655e:	4618      	mov	r0, r3
 8016560:	f004 f986 	bl	801a870 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>
}
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	4618      	mov	r0, r3
 8016568:	3710      	adds	r7, #16
 801656a:	46bd      	mov	sp, r7
 801656c:	bd80      	pop	{r7, pc}
 801656e:	bf00      	nop
 8016570:	08026d84 	.word	0x08026d84
 8016574:	080244dc 	.word	0x080244dc

08016578 <_ZN21MockCheckedActualCallD1Ev>:

MockCheckedActualCall::~MockCheckedActualCall()
 8016578:	b580      	push	{r7, lr}
 801657a:	b082      	sub	sp, #8
 801657c:	af00      	add	r7, sp, #0
 801657e:	6078      	str	r0, [r7, #4]
 8016580:	4a0c      	ldr	r2, [pc, #48]	; (80165b4 <_ZN21MockCheckedActualCallD1Ev+0x3c>)
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	601a      	str	r2, [r3, #0]
{
    cleanUpOutputParameterList();
 8016586:	6878      	ldr	r0, [r7, #4]
 8016588:	f001 fae4 	bl	8017b54 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>
MockCheckedActualCall::~MockCheckedActualCall()
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	331c      	adds	r3, #28
 8016590:	4618      	mov	r0, r3
 8016592:	f004 f803 	bl	801a59c <_ZN21MockExpectedCallsListD1Ev>
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	3304      	adds	r3, #4
 801659a:	4618      	mov	r0, r3
 801659c:	f7f5 fb75 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	4618      	mov	r0, r3
 80165a4:	f7ff ff7c 	bl	80164a0 <_ZN14MockActualCallD1Ev>
}
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	4618      	mov	r0, r3
 80165ac:	3708      	adds	r7, #8
 80165ae:	46bd      	mov	sp, r7
 80165b0:	bd80      	pop	{r7, pc}
 80165b2:	bf00      	nop
 80165b4:	08026d84 	.word	0x08026d84

080165b8 <_ZN21MockCheckedActualCallD0Ev>:
MockCheckedActualCall::~MockCheckedActualCall()
 80165b8:	b580      	push	{r7, lr}
 80165ba:	b082      	sub	sp, #8
 80165bc:	af00      	add	r7, sp, #0
 80165be:	6078      	str	r0, [r7, #4]
}
 80165c0:	6878      	ldr	r0, [r7, #4]
 80165c2:	f7ff ffd9 	bl	8016578 <_ZN21MockCheckedActualCallD1Ev>
 80165c6:	212c      	movs	r1, #44	; 0x2c
 80165c8:	6878      	ldr	r0, [r7, #4]
 80165ca:	f7f2 fbf7 	bl	8008dbc <_ZdlPvj>
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	4618      	mov	r0, r3
 80165d2:	3708      	adds	r7, #8
 80165d4:	46bd      	mov	sp, r7
 80165d6:	bd80      	pop	{r7, pc}

080165d8 <_ZN21MockCheckedActualCall22setMockFailureReporterEP19MockFailureReporter>:

void MockCheckedActualCall::setMockFailureReporter(MockFailureReporter* reporter)
{
 80165d8:	b480      	push	{r7}
 80165da:	b083      	sub	sp, #12
 80165dc:	af00      	add	r7, sp, #0
 80165de:	6078      	str	r0, [r7, #4]
 80165e0:	6039      	str	r1, [r7, #0]
    reporter_ = reporter;
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	683a      	ldr	r2, [r7, #0]
 80165e6:	611a      	str	r2, [r3, #16]
}
 80165e8:	bf00      	nop
 80165ea:	370c      	adds	r7, #12
 80165ec:	46bd      	mov	sp, r7
 80165ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165f2:	4770      	bx	lr

080165f4 <_ZNK21MockCheckedActualCall7getTestEv>:

UtestShell* MockCheckedActualCall::getTest() const
{
 80165f4:	b580      	push	{r7, lr}
 80165f6:	b082      	sub	sp, #8
 80165f8:	af00      	add	r7, sp, #0
 80165fa:	6078      	str	r0, [r7, #4]
    return reporter_->getTestToFail();
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	691a      	ldr	r2, [r3, #16]
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	691b      	ldr	r3, [r3, #16]
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	330c      	adds	r3, #12
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	4610      	mov	r0, r2
 801660c:	4798      	blx	r3
 801660e:	4603      	mov	r3, r0
}
 8016610:	4618      	mov	r0, r3
 8016612:	3708      	adds	r7, #8
 8016614:	46bd      	mov	sp, r7
 8016616:	bd80      	pop	{r7, pc}

08016618 <_ZN21MockCheckedActualCall8failTestERK11MockFailure>:

void MockCheckedActualCall::failTest(const MockFailure& failure)
{
 8016618:	b580      	push	{r7, lr}
 801661a:	b082      	sub	sp, #8
 801661c:	af00      	add	r7, sp, #0
 801661e:	6078      	str	r0, [r7, #4]
 8016620:	6039      	str	r1, [r7, #0]
    if (!hasFailed()) {
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	33c0      	adds	r3, #192	; 0xc0
 8016628:	681b      	ldr	r3, [r3, #0]
 801662a:	6878      	ldr	r0, [r7, #4]
 801662c:	4798      	blx	r3
 801662e:	4603      	mov	r3, r0
 8016630:	f083 0301 	eor.w	r3, r3, #1
 8016634:	b2db      	uxtb	r3, r3
 8016636:	2b00      	cmp	r3, #0
 8016638:	d010      	beq.n	801665c <_ZN21MockCheckedActualCall8failTestERK11MockFailure+0x44>
        setState(CALL_FAILED);
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	33ec      	adds	r3, #236	; 0xec
 8016640:	681b      	ldr	r3, [r3, #0]
 8016642:	2101      	movs	r1, #1
 8016644:	6878      	ldr	r0, [r7, #4]
 8016646:	4798      	blx	r3
        reporter_->failTest(failure);
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	691a      	ldr	r2, [r3, #16]
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	691b      	ldr	r3, [r3, #16]
 8016650:	681b      	ldr	r3, [r3, #0]
 8016652:	3308      	adds	r3, #8
 8016654:	681b      	ldr	r3, [r3, #0]
 8016656:	6839      	ldr	r1, [r7, #0]
 8016658:	4610      	mov	r0, r2
 801665a:	4798      	blx	r3
    }
}
 801665c:	bf00      	nop
 801665e:	3708      	adds	r7, #8
 8016660:	46bd      	mov	sp, r7
 8016662:	bd80      	pop	{r7, pc}

08016664 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall>:

void MockCheckedActualCall::copyOutputParameters(MockCheckedExpectedCall* expectedCall)
{
 8016664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016668:	b0bc      	sub	sp, #240	; 0xf0
 801666a:	af00      	add	r7, sp, #0
 801666c:	6078      	str	r0, [r7, #4]
 801666e:	6039      	str	r1, [r7, #0]
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016674:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8016678:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801667c:	2b00      	cmp	r3, #0
 801667e:	f000 80f5 	beq.w	801686c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x208>
    {
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 8016682:	683b      	ldr	r3, [r7, #0]
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	339c      	adds	r3, #156	; 0x9c
 8016688:	681b      	ldr	r3, [r3, #0]
 801668a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801668e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8016692:	6839      	ldr	r1, [r7, #0]
 8016694:	4798      	blx	r3
        MockNamedValueCopier* copier = outputParameter.getCopier();
 8016696:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801669a:	4618      	mov	r0, r3
 801669c:	f006 fa6c 	bl	801cb78 <_ZNK14MockNamedValue9getCopierEv>
 80166a0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        if (copier)
 80166a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d013      	beq.n	80166d4 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x70>
        {
            copier->copy(p->ptr_, outputParameter.getConstObjectPointer());
 80166ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	3308      	adds	r3, #8
 80166b4:	681c      	ldr	r4, [r3, #0]
 80166b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80166ba:	691d      	ldr	r5, [r3, #16]
 80166bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80166c0:	4618      	mov	r0, r3
 80166c2:	f006 fa29 	bl	801cb18 <_ZNK14MockNamedValue21getConstObjectPointerEv>
 80166c6:	4603      	mov	r3, r0
 80166c8:	461a      	mov	r2, r3
 80166ca:	4629      	mov	r1, r5
 80166cc:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80166d0:	47a0      	blx	r4
 80166d2:	e0c0      	b.n	8016856 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if ((outputParameter.getType() == "const void*") && (p->type_ == "void*"))
 80166d4:	2500      	movs	r5, #0
 80166d6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80166da:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80166de:	4611      	mov	r1, r2
 80166e0:	4618      	mov	r0, r3
 80166e2:	f005 ff0c 	bl	801c4fe <_ZNK14MockNamedValue7getTypeEv>
 80166e6:	2601      	movs	r6, #1
 80166e8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80166ec:	4962      	ldr	r1, [pc, #392]	; (8016878 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x214>)
 80166ee:	4618      	mov	r0, r3
 80166f0:	f7f4 ff13 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80166f4:	f04f 0801 	mov.w	r8, #1
 80166f8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80166fc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8016700:	4611      	mov	r1, r2
 8016702:	4618      	mov	r0, r3
 8016704:	f7f5 facd 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 8016708:	4603      	mov	r3, r0
 801670a:	2b00      	cmp	r3, #0
 801670c:	d015      	beq.n	801673a <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 801670e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8016712:	f103 0408 	add.w	r4, r3, #8
 8016716:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801671a:	4958      	ldr	r1, [pc, #352]	; (801687c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x218>)
 801671c:	4618      	mov	r0, r3
 801671e:	f7f4 fefc 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8016722:	2501      	movs	r5, #1
 8016724:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8016728:	4619      	mov	r1, r3
 801672a:	4620      	mov	r0, r4
 801672c:	f7f5 fab9 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 8016730:	4603      	mov	r3, r0
 8016732:	2b00      	cmp	r3, #0
 8016734:	d001      	beq.n	801673a <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 8016736:	2401      	movs	r4, #1
 8016738:	e000      	b.n	801673c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd8>
 801673a:	2400      	movs	r4, #0
 801673c:	2d00      	cmp	r5, #0
 801673e:	d004      	beq.n	801674a <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xe6>
 8016740:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8016744:	4618      	mov	r0, r3
 8016746:	f7f5 faa0 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801674a:	f1b8 0f00 	cmp.w	r8, #0
 801674e:	d004      	beq.n	801675a <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xf6>
 8016750:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8016754:	4618      	mov	r0, r3
 8016756:	f7f5 fa98 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801675a:	2e00      	cmp	r6, #0
 801675c:	d004      	beq.n	8016768 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x104>
 801675e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8016762:	4618      	mov	r0, r3
 8016764:	f7f5 fa91 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8016768:	2c00      	cmp	r4, #0
 801676a:	d018      	beq.n	801679e <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x13a>
        {
            const void* data = outputParameter.getConstPointerValue();
 801676c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016770:	4618      	mov	r0, r3
 8016772:	f006 f959 	bl	801ca28 <_ZNK14MockNamedValue20getConstPointerValueEv>
 8016776:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
            size_t size = outputParameter.getSize();
 801677a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801677e:	4618      	mov	r0, r3
 8016780:	f006 f9e2 	bl	801cb48 <_ZNK14MockNamedValue7getSizeEv>
 8016784:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
            PlatformSpecificMemCpy(p->ptr_, data, size);
 8016788:	4b3d      	ldr	r3, [pc, #244]	; (8016880 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x21c>)
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8016790:	6910      	ldr	r0, [r2, #16]
 8016792:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8016796:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 801679a:	4798      	blx	r3
 801679c:	e05b      	b.n	8016856 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if (outputParameter.getName() != "")
 801679e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80167a2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80167a6:	4611      	mov	r1, r2
 80167a8:	4618      	mov	r0, r3
 80167aa:	f005 fe99 	bl	801c4e0 <_ZNK14MockNamedValue7getNameEv>
 80167ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80167b2:	4934      	ldr	r1, [pc, #208]	; (8016884 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x220>)
 80167b4:	4618      	mov	r0, r3
 80167b6:	f7f4 feb0 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 80167ba:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80167be:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80167c2:	4611      	mov	r1, r2
 80167c4:	4618      	mov	r0, r3
 80167c6:	f7f5 fab1 	bl	800bd2c <_ZneRK12SimpleStringS1_>
 80167ca:	4603      	mov	r3, r0
 80167cc:	461c      	mov	r4, r3
 80167ce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80167d2:	4618      	mov	r0, r3
 80167d4:	f7f5 fa59 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 80167d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80167dc:	4618      	mov	r0, r3
 80167de:	f7f5 fa54 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 80167e2:	2c00      	cmp	r4, #0
 80167e4:	d037      	beq.n	8016856 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        {
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 80167e6:	683b      	ldr	r3, [r7, #0]
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	339c      	adds	r3, #156	; 0x9c
 80167ec:	681b      	ldr	r3, [r3, #0]
 80167ee:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80167f2:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 80167f6:	6839      	ldr	r1, [r7, #0]
 80167f8:	4798      	blx	r3
 80167fa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80167fe:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8016802:	4611      	mov	r1, r2
 8016804:	4618      	mov	r0, r3
 8016806:	f005 fe7a 	bl	801c4fe <_ZNK14MockNamedValue7getTypeEv>
 801680a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801680e:	4618      	mov	r0, r3
 8016810:	f005 fbd2 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	681b      	ldr	r3, [r3, #0]
 8016818:	33cc      	adds	r3, #204	; 0xcc
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	6878      	ldr	r0, [r7, #4]
 801681e:	4798      	blx	r3
 8016820:	4601      	mov	r1, r0
 8016822:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8016826:	f107 030c 	add.w	r3, r7, #12
 801682a:	4618      	mov	r0, r3
 801682c:	f005 faee 	bl	801be0c <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>
            failTest(failure);
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	681b      	ldr	r3, [r3, #0]
 8016834:	33dc      	adds	r3, #220	; 0xdc
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	f107 020c 	add.w	r2, r7, #12
 801683c:	4611      	mov	r1, r2
 801683e:	6878      	ldr	r0, [r7, #4]
 8016840:	4798      	blx	r3
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 8016842:	f107 030c 	add.w	r3, r7, #12
 8016846:	4618      	mov	r0, r3
 8016848:	f001 ffe2 	bl	8018810 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 801684c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8016850:	4618      	mov	r0, r3
 8016852:	f7f5 fa1a 	bl	800bc8a <_ZN12SimpleStringD1Ev>
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 8016856:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801685a:	4618      	mov	r0, r3
 801685c:	f005 fbac 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 8016860:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8016864:	695b      	ldr	r3, [r3, #20]
 8016866:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801686a:	e705      	b.n	8016678 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x14>
        }
    }
}
 801686c:	bf00      	nop
 801686e:	37f0      	adds	r7, #240	; 0xf0
 8016870:	46bd      	mov	sp, r7
 8016872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016876:	bf00      	nop
 8016878:	080244e0 	.word	0x080244e0
 801687c:	080244ec 	.word	0x080244ec
 8016880:	200000d4 	.word	0x200000d4
 8016884:	080244dc 	.word	0x080244dc

08016888 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv>:

void MockCheckedActualCall::completeCallWhenMatchIsFound()
{
 8016888:	b580      	push	{r7, lr}
 801688a:	b084      	sub	sp, #16
 801688c:	af00      	add	r7, sp, #0
 801688e:	6078      	str	r0, [r7, #4]
    // Expectations that don't ignore parameters have higher fulfillment preference than those that ignore parameters

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstFinalizedMatchingExpectation();
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	331c      	adds	r3, #28
 8016894:	4618      	mov	r0, r3
 8016896:	f004 f9bb 	bl	801ac10 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>
 801689a:	4602      	mov	r2, r0
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	699b      	ldr	r3, [r3, #24]
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	d00f      	beq.n	80168c8 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x40>
        copyOutputParameters(matchingExpectation_);
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	33d4      	adds	r3, #212	; 0xd4
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	687a      	ldr	r2, [r7, #4]
 80168b2:	6992      	ldr	r2, [r2, #24]
 80168b4:	4611      	mov	r1, r2
 80168b6:	6878      	ldr	r0, [r7, #4]
 80168b8:	4798      	blx	r3
        callHasSucceeded();
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	33d0      	adds	r3, #208	; 0xd0
 80168c0:	681b      	ldr	r3, [r3, #0]
 80168c2:	6878      	ldr	r0, [r7, #4]
 80168c4:	4798      	blx	r3
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
        if (matchingExpectationWithIgnoredParameters) {
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
        }
    }
}
 80168c6:	e00f      	b.n	80168e8 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	331c      	adds	r3, #28
 80168cc:	4618      	mov	r0, r3
 80168ce:	f004 f9cc 	bl	801ac6a <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>
 80168d2:	60f8      	str	r0, [r7, #12]
        if (matchingExpectationWithIgnoredParameters) {
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d006      	beq.n	80168e8 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	33d4      	adds	r3, #212	; 0xd4
 80168e0:	681b      	ldr	r3, [r3, #0]
 80168e2:	68f9      	ldr	r1, [r7, #12]
 80168e4:	6878      	ldr	r0, [r7, #4]
 80168e6:	4798      	blx	r3
}
 80168e8:	bf00      	nop
 80168ea:	3710      	adds	r7, #16
 80168ec:	46bd      	mov	sp, r7
 80168ee:	bd80      	pop	{r7, pc}

080168f0 <_ZN21MockCheckedActualCall16callHasSucceededEv>:

void MockCheckedActualCall::callHasSucceeded()
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	b082      	sub	sp, #8
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	6078      	str	r0, [r7, #4]
    setState(CALL_SUCCEED);
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	33ec      	adds	r3, #236	; 0xec
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	2102      	movs	r1, #2
 8016902:	6878      	ldr	r0, [r7, #4]
 8016904:	4798      	blx	r3
}
 8016906:	bf00      	nop
 8016908:	3708      	adds	r7, #8
 801690a:	46bd      	mov	sp, r7
 801690c:	bd80      	pop	{r7, pc}

0801690e <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv>:

void MockCheckedActualCall::discardCurrentlyMatchingExpectations()
{
 801690e:	b580      	push	{r7, lr}
 8016910:	b082      	sub	sp, #8
 8016912:	af00      	add	r7, sp, #0
 8016914:	6078      	str	r0, [r7, #4]
    if (matchingExpectation_)
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	699b      	ldr	r3, [r3, #24]
 801691a:	2b00      	cmp	r3, #0
 801691c:	d00b      	beq.n	8016936 <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv+0x28>
    {
        matchingExpectation_->resetActualCallMatchingState();
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	699a      	ldr	r2, [r3, #24]
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	699b      	ldr	r3, [r3, #24]
 8016926:	681b      	ldr	r3, [r3, #0]
 8016928:	33ec      	adds	r3, #236	; 0xec
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	4610      	mov	r0, r2
 801692e:	4798      	blx	r3
        matchingExpectation_ = NULLPTR;
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	2200      	movs	r2, #0
 8016934:	619a      	str	r2, [r3, #24]
    }
    potentiallyMatchingExpectations_.onlyKeepUnmatchingExpectations();
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	331c      	adds	r3, #28
 801693a:	4618      	mov	r0, r3
 801693c:	f004 f85c 	bl	801a9f8 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>
}
 8016940:	bf00      	nop
 8016942:	3708      	adds	r7, #8
 8016944:	46bd      	mov	sp, r7
 8016946:	bd80      	pop	{r7, pc}

08016948 <_ZN21MockCheckedActualCall8withNameERK12SimpleString>:

MockActualCall& MockCheckedActualCall::withName(const SimpleString& name)
{
 8016948:	b590      	push	{r4, r7, lr}
 801694a:	b091      	sub	sp, #68	; 0x44
 801694c:	af00      	add	r7, sp, #0
 801694e:	6078      	str	r0, [r7, #4]
 8016950:	6039      	str	r1, [r7, #0]
    setName(name);
 8016952:	6839      	ldr	r1, [r7, #0]
 8016954:	6878      	ldr	r0, [r7, #4]
 8016956:	f7ff fdb3 	bl	80164c0 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>
    setState(CALL_IN_PROGRESS);
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	681b      	ldr	r3, [r3, #0]
 801695e:	33ec      	adds	r3, #236	; 0xec
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	2100      	movs	r1, #0
 8016964:	6878      	ldr	r0, [r7, #4]
 8016966:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsRelatedTo(name);
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	331c      	adds	r3, #28
 801696c:	6839      	ldr	r1, [r7, #0]
 801696e:	4618      	mov	r0, r3
 8016970:	f003 ffec 	bl	801a94c <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>
    if (potentiallyMatchingExpectations_.isEmpty()) {
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	331c      	adds	r3, #28
 8016978:	4618      	mov	r0, r3
 801697a:	f003 fe7c 	bl	801a676 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801697e:	4603      	mov	r3, r0
 8016980:	2b00      	cmp	r3, #0
 8016982:	d01d      	beq.n	80169c0 <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x78>
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	33cc      	adds	r3, #204	; 0xcc
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	6878      	ldr	r0, [r7, #4]
 801698e:	4798      	blx	r3
 8016990:	4601      	mov	r1, r0
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016996:	f107 000c 	add.w	r0, r7, #12
 801699a:	683a      	ldr	r2, [r7, #0]
 801699c:	f004 fe24 	bl	801b5e8 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
        failTest(failure);
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	681b      	ldr	r3, [r3, #0]
 80169a4:	33dc      	adds	r3, #220	; 0xdc
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	f107 020c 	add.w	r2, r7, #12
 80169ac:	4611      	mov	r1, r2
 80169ae:	6878      	ldr	r0, [r7, #4]
 80169b0:	4798      	blx	r3
        return *this;
 80169b2:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 80169b4:	f107 030c 	add.w	r3, r7, #12
 80169b8:	4618      	mov	r0, r3
 80169ba:	f001 ff4b 	bl	8018854 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 80169be:	e006      	b.n	80169ce <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x86>
    }

    completeCallWhenMatchIsFound();
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	33d8      	adds	r3, #216	; 0xd8
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	6878      	ldr	r0, [r7, #4]
 80169ca:	4798      	blx	r3

    return *this;
 80169cc:	687c      	ldr	r4, [r7, #4]
 80169ce:	4623      	mov	r3, r4
}
 80169d0:	4618      	mov	r0, r3
 80169d2:	3744      	adds	r7, #68	; 0x44
 80169d4:	46bd      	mov	sp, r7
 80169d6:	bd90      	pop	{r4, r7, pc}

080169d8 <_ZN21MockCheckedActualCall13withCallOrderEj>:

MockActualCall& MockCheckedActualCall::withCallOrder(unsigned int)
{
 80169d8:	b480      	push	{r7}
 80169da:	b083      	sub	sp, #12
 80169dc:	af00      	add	r7, sp, #0
 80169de:	6078      	str	r0, [r7, #4]
 80169e0:	6039      	str	r1, [r7, #0]
    return *this;
 80169e2:	687b      	ldr	r3, [r7, #4]
}
 80169e4:	4618      	mov	r0, r3
 80169e6:	370c      	adds	r7, #12
 80169e8:	46bd      	mov	sp, r7
 80169ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ee:	4770      	bx	lr

080169f0 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkInputParameter(const MockNamedValue& actualParameter)
{
 80169f0:	b590      	push	{r4, r7, lr}
 80169f2:	b097      	sub	sp, #92	; 0x5c
 80169f4:	af02      	add	r7, sp, #8
 80169f6:	6078      	str	r0, [r7, #4]
 80169f8:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	33c0      	adds	r3, #192	; 0xc0
 8016a00:	681b      	ldr	r3, [r3, #0]
 8016a02:	6878      	ldr	r0, [r7, #4]
 8016a04:	4798      	blx	r3
 8016a06:	4603      	mov	r3, r0
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d164      	bne.n	8016ad6 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	681b      	ldr	r3, [r3, #0]
 8016a10:	33ec      	adds	r3, #236	; 0xec
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	2100      	movs	r1, #0
 8016a16:	6878      	ldr	r0, [r7, #4]
 8016a18:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	33e8      	adds	r3, #232	; 0xe8
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	6878      	ldr	r0, [r7, #4]
 8016a24:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithInputParameter(actualParameter);
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	331c      	adds	r3, #28
 8016a2a:	6839      	ldr	r1, [r7, #0]
 8016a2c:	4618      	mov	r0, r3
 8016a2e:	f004 f86b 	bl	801ab08 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	331c      	adds	r3, #28
 8016a36:	4618      	mov	r0, r3
 8016a38:	f003 fe1d 	bl	801a676 <_ZNK21MockExpectedCallsList7isEmptyEv>
 8016a3c:	4603      	mov	r3, r0
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d02b      	beq.n	8016a9a <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	681b      	ldr	r3, [r3, #0]
 8016a46:	33cc      	adds	r3, #204	; 0xcc
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	6878      	ldr	r0, [r7, #4]
 8016a4c:	4798      	blx	r3
 8016a4e:	4604      	mov	r4, r0
 8016a50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016a54:	6879      	ldr	r1, [r7, #4]
 8016a56:	4618      	mov	r0, r3
 8016a58:	f7ff fd41 	bl	80164de <_ZNK21MockCheckedActualCall7getNameEv>
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a60:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8016a64:	f107 000c 	add.w	r0, r7, #12
 8016a68:	9300      	str	r3, [sp, #0]
 8016a6a:	683b      	ldr	r3, [r7, #0]
 8016a6c:	4621      	mov	r1, r4
 8016a6e:	f004 fe7f 	bl	801b770 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 8016a72:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016a76:	4618      	mov	r0, r3
 8016a78:	f7f5 f907 	bl	800bc8a <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	681b      	ldr	r3, [r3, #0]
 8016a80:	33dc      	adds	r3, #220	; 0xdc
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	f107 020c 	add.w	r2, r7, #12
 8016a88:	4611      	mov	r1, r2
 8016a8a:	6878      	ldr	r0, [r7, #4]
 8016a8c:	4798      	blx	r3
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 8016a8e:	f107 030c 	add.w	r3, r7, #12
 8016a92:	4618      	mov	r0, r3
 8016a94:	f001 ff00 	bl	8018898 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 8016a98:	e01e      	b.n	8016ad8 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.parameterWasPassed(actualParameter.getName());
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	f103 041c 	add.w	r4, r3, #28
 8016aa0:	683b      	ldr	r3, [r7, #0]
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	335c      	adds	r3, #92	; 0x5c
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8016aac:	6839      	ldr	r1, [r7, #0]
 8016aae:	4610      	mov	r0, r2
 8016ab0:	4798      	blx	r3
 8016ab2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016ab6:	4619      	mov	r1, r3
 8016ab8:	4620      	mov	r0, r4
 8016aba:	f004 f9b8 	bl	801ae2e <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>
 8016abe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016ac2:	4618      	mov	r0, r3
 8016ac4:	f7f5 f8e1 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	33d8      	adds	r3, #216	; 0xd8
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	6878      	ldr	r0, [r7, #4]
 8016ad2:	4798      	blx	r3
 8016ad4:	e000      	b.n	8016ad8 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
 8016ad6:	bf00      	nop
}
 8016ad8:	3754      	adds	r7, #84	; 0x54
 8016ada:	46bd      	mov	sp, r7
 8016adc:	bd90      	pop	{r4, r7, pc}

08016ade <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkOutputParameter(const MockNamedValue& outputParameter)
{
 8016ade:	b590      	push	{r4, r7, lr}
 8016ae0:	b097      	sub	sp, #92	; 0x5c
 8016ae2:	af02      	add	r7, sp, #8
 8016ae4:	6078      	str	r0, [r7, #4]
 8016ae6:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	681b      	ldr	r3, [r3, #0]
 8016aec:	33c0      	adds	r3, #192	; 0xc0
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	6878      	ldr	r0, [r7, #4]
 8016af2:	4798      	blx	r3
 8016af4:	4603      	mov	r3, r0
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d164      	bne.n	8016bc4 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	33ec      	adds	r3, #236	; 0xec
 8016b00:	681b      	ldr	r3, [r3, #0]
 8016b02:	2100      	movs	r1, #0
 8016b04:	6878      	ldr	r0, [r7, #4]
 8016b06:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	33e8      	adds	r3, #232	; 0xe8
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	6878      	ldr	r0, [r7, #4]
 8016b12:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithOutputParameter(outputParameter);
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	331c      	adds	r3, #28
 8016b18:	6839      	ldr	r1, [r7, #0]
 8016b1a:	4618      	mov	r0, r3
 8016b1c:	f004 f820 	bl	801ab60 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	331c      	adds	r3, #28
 8016b24:	4618      	mov	r0, r3
 8016b26:	f003 fda6 	bl	801a676 <_ZNK21MockExpectedCallsList7isEmptyEv>
 8016b2a:	4603      	mov	r3, r0
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d02b      	beq.n	8016b88 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	33cc      	adds	r3, #204	; 0xcc
 8016b36:	681b      	ldr	r3, [r3, #0]
 8016b38:	6878      	ldr	r0, [r7, #4]
 8016b3a:	4798      	blx	r3
 8016b3c:	4604      	mov	r4, r0
 8016b3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016b42:	6879      	ldr	r1, [r7, #4]
 8016b44:	4618      	mov	r0, r3
 8016b46:	f7ff fcca 	bl	80164de <_ZNK21MockCheckedActualCall7getNameEv>
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b4e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8016b52:	f107 000c 	add.w	r0, r7, #12
 8016b56:	9300      	str	r3, [sp, #0]
 8016b58:	683b      	ldr	r3, [r7, #0]
 8016b5a:	4621      	mov	r1, r4
 8016b5c:	f004 ff6a 	bl	801ba34 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 8016b60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016b64:	4618      	mov	r0, r3
 8016b66:	f7f5 f890 	bl	800bc8a <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	681b      	ldr	r3, [r3, #0]
 8016b6e:	33dc      	adds	r3, #220	; 0xdc
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	f107 020c 	add.w	r2, r7, #12
 8016b76:	4611      	mov	r1, r2
 8016b78:	6878      	ldr	r0, [r7, #4]
 8016b7a:	4798      	blx	r3
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 8016b7c:	f107 030c 	add.w	r3, r7, #12
 8016b80:	4618      	mov	r0, r3
 8016b82:	f001 feab 	bl	80188dc <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 8016b86:	e01e      	b.n	8016bc6 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.outputParameterWasPassed(outputParameter.getName());
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	f103 041c 	add.w	r4, r3, #28
 8016b8e:	683b      	ldr	r3, [r7, #0]
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	335c      	adds	r3, #92	; 0x5c
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8016b9a:	6839      	ldr	r1, [r7, #0]
 8016b9c:	4610      	mov	r0, r2
 8016b9e:	4798      	blx	r3
 8016ba0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016ba4:	4619      	mov	r1, r3
 8016ba6:	4620      	mov	r0, r4
 8016ba8:	f004 f95e 	bl	801ae68 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>
 8016bac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016bb0:	4618      	mov	r0, r3
 8016bb2:	f7f5 f86a 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	33d8      	adds	r3, #216	; 0xd8
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	6878      	ldr	r0, [r7, #4]
 8016bc0:	4798      	blx	r3
 8016bc2:	e000      	b.n	8016bc6 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
 8016bc4:	bf00      	nop
}
 8016bc6:	3754      	adds	r7, #84	; 0x54
 8016bc8:	46bd      	mov	sp, r7
 8016bca:	bd90      	pop	{r4, r7, pc}

08016bcc <_ZN21MockCheckedActualCall17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockCheckedActualCall::withBoolParameter(const SimpleString& name, bool value)
{
 8016bcc:	b590      	push	{r4, r7, lr}
 8016bce:	b093      	sub	sp, #76	; 0x4c
 8016bd0:	af00      	add	r7, sp, #0
 8016bd2:	60f8      	str	r0, [r7, #12]
 8016bd4:	60b9      	str	r1, [r7, #8]
 8016bd6:	4613      	mov	r3, r2
 8016bd8:	71fb      	strb	r3, [r7, #7]
    MockNamedValue actualParameter(name);
 8016bda:	f107 0310 	add.w	r3, r7, #16
 8016bde:	68b9      	ldr	r1, [r7, #8]
 8016be0:	4618      	mov	r0, r3
 8016be2:	f005 f9bf 	bl	801bf64 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016be6:	79fa      	ldrb	r2, [r7, #7]
 8016be8:	f107 0310 	add.w	r3, r7, #16
 8016bec:	4611      	mov	r1, r2
 8016bee:	4618      	mov	r0, r3
 8016bf0:	f005 fa0a 	bl	801c008 <_ZN14MockNamedValue8setValueEb>
    checkInputParameter(actualParameter);
 8016bf4:	68fb      	ldr	r3, [r7, #12]
 8016bf6:	681b      	ldr	r3, [r3, #0]
 8016bf8:	33e0      	adds	r3, #224	; 0xe0
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	f107 0210 	add.w	r2, r7, #16
 8016c00:	4611      	mov	r1, r2
 8016c02:	68f8      	ldr	r0, [r7, #12]
 8016c04:	4798      	blx	r3
    return *this;
 8016c06:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016c08:	f107 0310 	add.w	r3, r7, #16
 8016c0c:	4618      	mov	r0, r3
 8016c0e:	f005 f9d3 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
    return *this;
 8016c12:	4623      	mov	r3, r4
}
 8016c14:	4618      	mov	r0, r3
 8016c16:	374c      	adds	r7, #76	; 0x4c
 8016c18:	46bd      	mov	sp, r7
 8016c1a:	bd90      	pop	{r4, r7, pc}

08016c1c <_ZN21MockCheckedActualCall24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockCheckedActualCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 8016c1c:	b590      	push	{r4, r7, lr}
 8016c1e:	b093      	sub	sp, #76	; 0x4c
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	60f8      	str	r0, [r7, #12]
 8016c24:	60b9      	str	r1, [r7, #8]
 8016c26:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8016c28:	f107 0310 	add.w	r3, r7, #16
 8016c2c:	68b9      	ldr	r1, [r7, #8]
 8016c2e:	4618      	mov	r0, r3
 8016c30:	f005 f998 	bl	801bf64 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016c34:	f107 0310 	add.w	r3, r7, #16
 8016c38:	6879      	ldr	r1, [r7, #4]
 8016c3a:	4618      	mov	r0, r3
 8016c3c:	f005 fa08 	bl	801c050 <_ZN14MockNamedValue8setValueEj>
    checkInputParameter(actualParameter);
 8016c40:	68fb      	ldr	r3, [r7, #12]
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	33e0      	adds	r3, #224	; 0xe0
 8016c46:	681b      	ldr	r3, [r3, #0]
 8016c48:	f107 0210 	add.w	r2, r7, #16
 8016c4c:	4611      	mov	r1, r2
 8016c4e:	68f8      	ldr	r0, [r7, #12]
 8016c50:	4798      	blx	r3
    return *this;
 8016c52:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016c54:	f107 0310 	add.w	r3, r7, #16
 8016c58:	4618      	mov	r0, r3
 8016c5a:	f005 f9ad 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
    return *this;
 8016c5e:	4623      	mov	r3, r4
}
 8016c60:	4618      	mov	r0, r3
 8016c62:	374c      	adds	r7, #76	; 0x4c
 8016c64:	46bd      	mov	sp, r7
 8016c66:	bd90      	pop	{r4, r7, pc}

08016c68 <_ZN21MockCheckedActualCall16withIntParameterERK12SimpleStringi>:

MockActualCall& MockCheckedActualCall::withIntParameter(const SimpleString& name, int value)
{
 8016c68:	b590      	push	{r4, r7, lr}
 8016c6a:	b093      	sub	sp, #76	; 0x4c
 8016c6c:	af00      	add	r7, sp, #0
 8016c6e:	60f8      	str	r0, [r7, #12]
 8016c70:	60b9      	str	r1, [r7, #8]
 8016c72:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8016c74:	f107 0310 	add.w	r3, r7, #16
 8016c78:	68b9      	ldr	r1, [r7, #8]
 8016c7a:	4618      	mov	r0, r3
 8016c7c:	f005 f972 	bl	801bf64 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016c80:	f107 0310 	add.w	r3, r7, #16
 8016c84:	6879      	ldr	r1, [r7, #4]
 8016c86:	4618      	mov	r0, r3
 8016c88:	f005 fa04 	bl	801c094 <_ZN14MockNamedValue8setValueEi>
    checkInputParameter(actualParameter);
 8016c8c:	68fb      	ldr	r3, [r7, #12]
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	33e0      	adds	r3, #224	; 0xe0
 8016c92:	681b      	ldr	r3, [r3, #0]
 8016c94:	f107 0210 	add.w	r2, r7, #16
 8016c98:	4611      	mov	r1, r2
 8016c9a:	68f8      	ldr	r0, [r7, #12]
 8016c9c:	4798      	blx	r3
    return *this;
 8016c9e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016ca0:	f107 0310 	add.w	r3, r7, #16
 8016ca4:	4618      	mov	r0, r3
 8016ca6:	f005 f987 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
    return *this;
 8016caa:	4623      	mov	r3, r4
}
 8016cac:	4618      	mov	r0, r3
 8016cae:	374c      	adds	r7, #76	; 0x4c
 8016cb0:	46bd      	mov	sp, r7
 8016cb2:	bd90      	pop	{r4, r7, pc}

08016cb4 <_ZN21MockCheckedActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockCheckedActualCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8016cb4:	b590      	push	{r4, r7, lr}
 8016cb6:	b093      	sub	sp, #76	; 0x4c
 8016cb8:	af00      	add	r7, sp, #0
 8016cba:	60f8      	str	r0, [r7, #12]
 8016cbc:	60b9      	str	r1, [r7, #8]
 8016cbe:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8016cc0:	f107 0310 	add.w	r3, r7, #16
 8016cc4:	68b9      	ldr	r1, [r7, #8]
 8016cc6:	4618      	mov	r0, r3
 8016cc8:	f005 f94c 	bl	801bf64 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016ccc:	f107 0310 	add.w	r3, r7, #16
 8016cd0:	6879      	ldr	r1, [r7, #4]
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	f005 fa22 	bl	801c11c <_ZN14MockNamedValue8setValueEm>
    checkInputParameter(actualParameter);
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	681b      	ldr	r3, [r3, #0]
 8016cdc:	33e0      	adds	r3, #224	; 0xe0
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	f107 0210 	add.w	r2, r7, #16
 8016ce4:	4611      	mov	r1, r2
 8016ce6:	68f8      	ldr	r0, [r7, #12]
 8016ce8:	4798      	blx	r3
    return *this;
 8016cea:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016cec:	f107 0310 	add.w	r3, r7, #16
 8016cf0:	4618      	mov	r0, r3
 8016cf2:	f005 f961 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
    return *this;
 8016cf6:	4623      	mov	r3, r4
}
 8016cf8:	4618      	mov	r0, r3
 8016cfa:	374c      	adds	r7, #76	; 0x4c
 8016cfc:	46bd      	mov	sp, r7
 8016cfe:	bd90      	pop	{r4, r7, pc}

08016d00 <_ZN21MockCheckedActualCall20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockCheckedActualCall::withLongIntParameter(const SimpleString& name, long int value)
{
 8016d00:	b590      	push	{r4, r7, lr}
 8016d02:	b093      	sub	sp, #76	; 0x4c
 8016d04:	af00      	add	r7, sp, #0
 8016d06:	60f8      	str	r0, [r7, #12]
 8016d08:	60b9      	str	r1, [r7, #8]
 8016d0a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8016d0c:	f107 0310 	add.w	r3, r7, #16
 8016d10:	68b9      	ldr	r1, [r7, #8]
 8016d12:	4618      	mov	r0, r3
 8016d14:	f005 f926 	bl	801bf64 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016d18:	f107 0310 	add.w	r3, r7, #16
 8016d1c:	6879      	ldr	r1, [r7, #4]
 8016d1e:	4618      	mov	r0, r3
 8016d20:	f005 f9da 	bl	801c0d8 <_ZN14MockNamedValue8setValueEl>
    checkInputParameter(actualParameter);
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	681b      	ldr	r3, [r3, #0]
 8016d28:	33e0      	adds	r3, #224	; 0xe0
 8016d2a:	681b      	ldr	r3, [r3, #0]
 8016d2c:	f107 0210 	add.w	r2, r7, #16
 8016d30:	4611      	mov	r1, r2
 8016d32:	68f8      	ldr	r0, [r7, #12]
 8016d34:	4798      	blx	r3
    return *this;
 8016d36:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016d38:	f107 0310 	add.w	r3, r7, #16
 8016d3c:	4618      	mov	r0, r3
 8016d3e:	f005 f93b 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
    return *this;
 8016d42:	4623      	mov	r3, r4
}
 8016d44:	4618      	mov	r0, r3
 8016d46:	374c      	adds	r7, #76	; 0x4c
 8016d48:	46bd      	mov	sp, r7
 8016d4a:	bd90      	pop	{r4, r7, pc}

08016d4c <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockCheckedActualCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8016d4c:	b5b0      	push	{r4, r5, r7, lr}
 8016d4e:	b086      	sub	sp, #24
 8016d50:	af02      	add	r7, sp, #8
 8016d52:	60f8      	str	r0, [r7, #12]
 8016d54:	60b9      	str	r1, [r7, #8]
 8016d56:	4639      	mov	r1, r7
 8016d58:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8016d5c:	f7fb ffc0 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 8016d60:	4604      	mov	r4, r0
 8016d62:	6823      	ldr	r3, [r4, #0]
 8016d64:	3368      	adds	r3, #104	; 0x68
 8016d66:	681d      	ldr	r5, [r3, #0]
 8016d68:	f7fb ffca 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016d6c:	4603      	mov	r3, r0
 8016d6e:	9300      	str	r3, [sp, #0]
 8016d70:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8016d74:	4a04      	ldr	r2, [pc, #16]	; (8016d88 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 8016d76:	4905      	ldr	r1, [pc, #20]	; (8016d8c <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 8016d78:	4620      	mov	r0, r4
 8016d7a:	47a8      	blx	r5
    return *this;
 8016d7c:	68fb      	ldr	r3, [r7, #12]
}
 8016d7e:	4618      	mov	r0, r3
 8016d80:	3710      	adds	r7, #16
 8016d82:	46bd      	mov	sp, r7
 8016d84:	bdb0      	pop	{r4, r5, r7, pc}
 8016d86:	bf00      	nop
 8016d88:	080244f4 	.word	0x080244f4
 8016d8c:	08024510 	.word	0x08024510

08016d90 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockCheckedActualCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8016d90:	b5b0      	push	{r4, r5, r7, lr}
 8016d92:	b086      	sub	sp, #24
 8016d94:	af02      	add	r7, sp, #8
 8016d96:	60f8      	str	r0, [r7, #12]
 8016d98:	60b9      	str	r1, [r7, #8]
 8016d9a:	4639      	mov	r1, r7
 8016d9c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8016da0:	f7fb ff9e 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 8016da4:	4604      	mov	r4, r0
 8016da6:	6823      	ldr	r3, [r4, #0]
 8016da8:	3368      	adds	r3, #104	; 0x68
 8016daa:	681d      	ldr	r5, [r3, #0]
 8016dac:	f7fb ffa8 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016db0:	4603      	mov	r3, r0
 8016db2:	9300      	str	r3, [sp, #0]
 8016db4:	f44f 7388 	mov.w	r3, #272	; 0x110
 8016db8:	4a04      	ldr	r2, [pc, #16]	; (8016dcc <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 8016dba:	4905      	ldr	r1, [pc, #20]	; (8016dd0 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 8016dbc:	4620      	mov	r0, r4
 8016dbe:	47a8      	blx	r5
    return *this;
 8016dc0:	68fb      	ldr	r3, [r7, #12]
}
 8016dc2:	4618      	mov	r0, r3
 8016dc4:	3710      	adds	r7, #16
 8016dc6:	46bd      	mov	sp, r7
 8016dc8:	bdb0      	pop	{r4, r5, r7, pc}
 8016dca:	bf00      	nop
 8016dcc:	080244f4 	.word	0x080244f4
 8016dd0:	0802453c 	.word	0x0802453c

08016dd4 <_ZN21MockCheckedActualCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockCheckedActualCall::withDoubleParameter(const SimpleString& name, double value)
{
 8016dd4:	b590      	push	{r4, r7, lr}
 8016dd6:	b093      	sub	sp, #76	; 0x4c
 8016dd8:	af00      	add	r7, sp, #0
 8016dda:	60f8      	str	r0, [r7, #12]
 8016ddc:	60b9      	str	r1, [r7, #8]
 8016dde:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue actualParameter(name);
 8016de2:	f107 0310 	add.w	r3, r7, #16
 8016de6:	68b9      	ldr	r1, [r7, #8]
 8016de8:	4618      	mov	r0, r3
 8016dea:	f005 f8bb 	bl	801bf64 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016dee:	f107 0310 	add.w	r3, r7, #16
 8016df2:	ed97 0b00 	vldr	d0, [r7]
 8016df6:	4618      	mov	r0, r3
 8016df8:	f005 f9ee 	bl	801c1d8 <_ZN14MockNamedValue8setValueEd>
    checkInputParameter(actualParameter);
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	681b      	ldr	r3, [r3, #0]
 8016e00:	33e0      	adds	r3, #224	; 0xe0
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	f107 0210 	add.w	r2, r7, #16
 8016e08:	4611      	mov	r1, r2
 8016e0a:	68f8      	ldr	r0, [r7, #12]
 8016e0c:	4798      	blx	r3
    return *this;
 8016e0e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016e10:	f107 0310 	add.w	r3, r7, #16
 8016e14:	4618      	mov	r0, r3
 8016e16:	f005 f8cf 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
    return *this;
 8016e1a:	4623      	mov	r3, r4
}
 8016e1c:	4618      	mov	r0, r3
 8016e1e:	374c      	adds	r7, #76	; 0x4c
 8016e20:	46bd      	mov	sp, r7
 8016e22:	bd90      	pop	{r4, r7, pc}

08016e24 <_ZN21MockCheckedActualCall19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockCheckedActualCall::withStringParameter(const SimpleString& name, const char* value)
{
 8016e24:	b590      	push	{r4, r7, lr}
 8016e26:	b093      	sub	sp, #76	; 0x4c
 8016e28:	af00      	add	r7, sp, #0
 8016e2a:	60f8      	str	r0, [r7, #12]
 8016e2c:	60b9      	str	r1, [r7, #8]
 8016e2e:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8016e30:	f107 0310 	add.w	r3, r7, #16
 8016e34:	68b9      	ldr	r1, [r7, #8]
 8016e36:	4618      	mov	r0, r3
 8016e38:	f005 f894 	bl	801bf64 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016e3c:	f107 0310 	add.w	r3, r7, #16
 8016e40:	6879      	ldr	r1, [r7, #4]
 8016e42:	4618      	mov	r0, r3
 8016e44:	f005 fa72 	bl	801c32c <_ZN14MockNamedValue8setValueEPKc>
    checkInputParameter(actualParameter);
 8016e48:	68fb      	ldr	r3, [r7, #12]
 8016e4a:	681b      	ldr	r3, [r3, #0]
 8016e4c:	33e0      	adds	r3, #224	; 0xe0
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	f107 0210 	add.w	r2, r7, #16
 8016e54:	4611      	mov	r1, r2
 8016e56:	68f8      	ldr	r0, [r7, #12]
 8016e58:	4798      	blx	r3
    return *this;
 8016e5a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016e5c:	f107 0310 	add.w	r3, r7, #16
 8016e60:	4618      	mov	r0, r3
 8016e62:	f005 f8a9 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
    return *this;
 8016e66:	4623      	mov	r3, r4
}
 8016e68:	4618      	mov	r0, r3
 8016e6a:	374c      	adds	r7, #76	; 0x4c
 8016e6c:	46bd      	mov	sp, r7
 8016e6e:	bd90      	pop	{r4, r7, pc}

08016e70 <_ZN21MockCheckedActualCall20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withPointerParameter(const SimpleString& name, void* value)
{
 8016e70:	b590      	push	{r4, r7, lr}
 8016e72:	b093      	sub	sp, #76	; 0x4c
 8016e74:	af00      	add	r7, sp, #0
 8016e76:	60f8      	str	r0, [r7, #12]
 8016e78:	60b9      	str	r1, [r7, #8]
 8016e7a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8016e7c:	f107 0310 	add.w	r3, r7, #16
 8016e80:	68b9      	ldr	r1, [r7, #8]
 8016e82:	4618      	mov	r0, r3
 8016e84:	f005 f86e 	bl	801bf64 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016e88:	f107 0310 	add.w	r3, r7, #16
 8016e8c:	6879      	ldr	r1, [r7, #4]
 8016e8e:	4618      	mov	r0, r3
 8016e90:	f005 f9e6 	bl	801c260 <_ZN14MockNamedValue8setValueEPv>
    checkInputParameter(actualParameter);
 8016e94:	68fb      	ldr	r3, [r7, #12]
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	33e0      	adds	r3, #224	; 0xe0
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	f107 0210 	add.w	r2, r7, #16
 8016ea0:	4611      	mov	r1, r2
 8016ea2:	68f8      	ldr	r0, [r7, #12]
 8016ea4:	4798      	blx	r3
    return *this;
 8016ea6:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016ea8:	f107 0310 	add.w	r3, r7, #16
 8016eac:	4618      	mov	r0, r3
 8016eae:	f005 f883 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
    return *this;
 8016eb2:	4623      	mov	r3, r4
}
 8016eb4:	4618      	mov	r0, r3
 8016eb6:	374c      	adds	r7, #76	; 0x4c
 8016eb8:	46bd      	mov	sp, r7
 8016eba:	bd90      	pop	{r4, r7, pc}

08016ebc <_ZN21MockCheckedActualCall25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockCheckedActualCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 8016ebc:	b590      	push	{r4, r7, lr}
 8016ebe:	b093      	sub	sp, #76	; 0x4c
 8016ec0:	af00      	add	r7, sp, #0
 8016ec2:	60f8      	str	r0, [r7, #12]
 8016ec4:	60b9      	str	r1, [r7, #8]
 8016ec6:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8016ec8:	f107 0310 	add.w	r3, r7, #16
 8016ecc:	68b9      	ldr	r1, [r7, #8]
 8016ece:	4618      	mov	r0, r3
 8016ed0:	f005 f848 	bl	801bf64 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016ed4:	f107 0310 	add.w	r3, r7, #16
 8016ed8:	6879      	ldr	r1, [r7, #4]
 8016eda:	4618      	mov	r0, r3
 8016edc:	f005 f9e2 	bl	801c2a4 <_ZN14MockNamedValue8setValueEPKv>
    checkInputParameter(actualParameter);
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	681b      	ldr	r3, [r3, #0]
 8016ee4:	33e0      	adds	r3, #224	; 0xe0
 8016ee6:	681b      	ldr	r3, [r3, #0]
 8016ee8:	f107 0210 	add.w	r2, r7, #16
 8016eec:	4611      	mov	r1, r2
 8016eee:	68f8      	ldr	r0, [r7, #12]
 8016ef0:	4798      	blx	r3
    return *this;
 8016ef2:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016ef4:	f107 0310 	add.w	r3, r7, #16
 8016ef8:	4618      	mov	r0, r3
 8016efa:	f005 f85d 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
    return *this;
 8016efe:	4623      	mov	r3, r4
}
 8016f00:	4618      	mov	r0, r3
 8016f02:	374c      	adds	r7, #76	; 0x4c
 8016f04:	46bd      	mov	sp, r7
 8016f06:	bd90      	pop	{r4, r7, pc}

08016f08 <_ZN21MockCheckedActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockCheckedActualCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 8016f08:	b590      	push	{r4, r7, lr}
 8016f0a:	b093      	sub	sp, #76	; 0x4c
 8016f0c:	af00      	add	r7, sp, #0
 8016f0e:	60f8      	str	r0, [r7, #12]
 8016f10:	60b9      	str	r1, [r7, #8]
 8016f12:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8016f14:	f107 0310 	add.w	r3, r7, #16
 8016f18:	68b9      	ldr	r1, [r7, #8]
 8016f1a:	4618      	mov	r0, r3
 8016f1c:	f005 f822 	bl	801bf64 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016f20:	f107 0310 	add.w	r3, r7, #16
 8016f24:	6879      	ldr	r1, [r7, #4]
 8016f26:	4618      	mov	r0, r3
 8016f28:	f005 f9de 	bl	801c2e8 <_ZN14MockNamedValue8setValueEPFvvE>
    checkInputParameter(actualParameter);
 8016f2c:	68fb      	ldr	r3, [r7, #12]
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	33e0      	adds	r3, #224	; 0xe0
 8016f32:	681b      	ldr	r3, [r3, #0]
 8016f34:	f107 0210 	add.w	r2, r7, #16
 8016f38:	4611      	mov	r1, r2
 8016f3a:	68f8      	ldr	r0, [r7, #12]
 8016f3c:	4798      	blx	r3
    return *this;
 8016f3e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016f40:	f107 0310 	add.w	r3, r7, #16
 8016f44:	4618      	mov	r0, r3
 8016f46:	f005 f837 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
    return *this;
 8016f4a:	4623      	mov	r3, r4
}
 8016f4c:	4618      	mov	r0, r3
 8016f4e:	374c      	adds	r7, #76	; 0x4c
 8016f50:	46bd      	mov	sp, r7
 8016f52:	bd90      	pop	{r4, r7, pc}

08016f54 <_ZN21MockCheckedActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockCheckedActualCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 8016f54:	b590      	push	{r4, r7, lr}
 8016f56:	b093      	sub	sp, #76	; 0x4c
 8016f58:	af00      	add	r7, sp, #0
 8016f5a:	60f8      	str	r0, [r7, #12]
 8016f5c:	60b9      	str	r1, [r7, #8]
 8016f5e:	607a      	str	r2, [r7, #4]
 8016f60:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 8016f62:	f107 0310 	add.w	r3, r7, #16
 8016f66:	68b9      	ldr	r1, [r7, #8]
 8016f68:	4618      	mov	r0, r3
 8016f6a:	f004 fffb 	bl	801bf64 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setMemoryBuffer(value, size);
 8016f6e:	f107 0310 	add.w	r3, r7, #16
 8016f72:	683a      	ldr	r2, [r7, #0]
 8016f74:	6879      	ldr	r1, [r7, #4]
 8016f76:	4618      	mov	r0, r3
 8016f78:	f005 f9fa 	bl	801c370 <_ZN14MockNamedValue15setMemoryBufferEPKhj>
    checkInputParameter(actualParameter);
 8016f7c:	68fb      	ldr	r3, [r7, #12]
 8016f7e:	681b      	ldr	r3, [r3, #0]
 8016f80:	33e0      	adds	r3, #224	; 0xe0
 8016f82:	681b      	ldr	r3, [r3, #0]
 8016f84:	f107 0210 	add.w	r2, r7, #16
 8016f88:	4611      	mov	r1, r2
 8016f8a:	68f8      	ldr	r0, [r7, #12]
 8016f8c:	4798      	blx	r3
    return *this;
 8016f8e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016f90:	f107 0310 	add.w	r3, r7, #16
 8016f94:	4618      	mov	r0, r3
 8016f96:	f005 f80f 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
    return *this;
 8016f9a:	4623      	mov	r3, r4
}
 8016f9c:	4618      	mov	r0, r3
 8016f9e:	374c      	adds	r7, #76	; 0x4c
 8016fa0:	46bd      	mov	sp, r7
 8016fa2:	bd90      	pop	{r4, r7, pc}

08016fa4 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockCheckedActualCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 8016fa4:	b590      	push	{r4, r7, lr}
 8016fa6:	b0a1      	sub	sp, #132	; 0x84
 8016fa8:	af00      	add	r7, sp, #0
 8016faa:	60f8      	str	r0, [r7, #12]
 8016fac:	60b9      	str	r1, [r7, #8]
 8016fae:	607a      	str	r2, [r7, #4]
 8016fb0:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 8016fb2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016fb6:	6879      	ldr	r1, [r7, #4]
 8016fb8:	4618      	mov	r0, r3
 8016fba:	f004 ffd3 	bl	801bf64 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setConstObjectPointer(type, value);
 8016fbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016fc2:	683a      	ldr	r2, [r7, #0]
 8016fc4:	68b9      	ldr	r1, [r7, #8]
 8016fc6:	4618      	mov	r0, r3
 8016fc8:	f005 f9f8 	bl	801c3bc <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>

    if (actualParameter.getComparator() == NULLPTR) {
 8016fcc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016fd0:	4618      	mov	r0, r3
 8016fd2:	f005 fdc5 	bl	801cb60 <_ZNK14MockNamedValue13getComparatorEv>
 8016fd6:	4603      	mov	r3, r0
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	bf0c      	ite	eq
 8016fdc:	2301      	moveq	r3, #1
 8016fde:	2300      	movne	r3, #0
 8016fe0:	b2db      	uxtb	r3, r3
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d01c      	beq.n	8017020 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x7c>
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	681b      	ldr	r3, [r3, #0]
 8016fea:	33cc      	adds	r3, #204	; 0xcc
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	68f8      	ldr	r0, [r7, #12]
 8016ff0:	4798      	blx	r3
 8016ff2:	4601      	mov	r1, r0
 8016ff4:	f107 0314 	add.w	r3, r7, #20
 8016ff8:	68ba      	ldr	r2, [r7, #8]
 8016ffa:	4618      	mov	r0, r3
 8016ffc:	f004 fed6 	bl	801bdac <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>
        failTest(failure);
 8017000:	68fb      	ldr	r3, [r7, #12]
 8017002:	681b      	ldr	r3, [r3, #0]
 8017004:	33dc      	adds	r3, #220	; 0xdc
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	f107 0214 	add.w	r2, r7, #20
 801700c:	4611      	mov	r1, r2
 801700e:	68f8      	ldr	r0, [r7, #12]
 8017010:	4798      	blx	r3
        return *this;
 8017012:	68fc      	ldr	r4, [r7, #12]
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 8017014:	f107 0314 	add.w	r3, r7, #20
 8017018:	4618      	mov	r0, r3
 801701a:	f001 fc81 	bl	8018920 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 801701e:	e009      	b.n	8017034 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x90>
    }
    checkInputParameter(actualParameter);
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	681b      	ldr	r3, [r3, #0]
 8017024:	33e0      	adds	r3, #224	; 0xe0
 8017026:	681b      	ldr	r3, [r3, #0]
 8017028:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801702c:	4611      	mov	r1, r2
 801702e:	68f8      	ldr	r0, [r7, #12]
 8017030:	4798      	blx	r3
    return *this;
 8017032:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017034:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017038:	4618      	mov	r0, r3
 801703a:	f004 ffbd 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
 801703e:	4623      	mov	r3, r4
}
 8017040:	4618      	mov	r0, r3
 8017042:	3784      	adds	r7, #132	; 0x84
 8017044:	46bd      	mov	sp, r7
 8017046:	bd90      	pop	{r4, r7, pc}

08017048 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withOutputParameter(const SimpleString& name, void* output)
{
 8017048:	b590      	push	{r4, r7, lr}
 801704a:	b095      	sub	sp, #84	; 0x54
 801704c:	af00      	add	r7, sp, #0
 801704e:	60f8      	str	r0, [r7, #12]
 8017050:	60b9      	str	r1, [r7, #8]
 8017052:	607a      	str	r2, [r7, #4]
    addOutputParameter(name, "void*", output);
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	33f0      	adds	r3, #240	; 0xf0
 801705a:	681c      	ldr	r4, [r3, #0]
 801705c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017060:	4917      	ldr	r1, [pc, #92]	; (80170c0 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv+0x78>)
 8017062:	4618      	mov	r0, r3
 8017064:	f7f4 fa59 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8017068:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	68b9      	ldr	r1, [r7, #8]
 8017070:	68f8      	ldr	r0, [r7, #12]
 8017072:	47a0      	blx	r4
 8017074:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017078:	4618      	mov	r0, r3
 801707a:	f7f4 fe06 	bl	800bc8a <_ZN12SimpleStringD1Ev>

    MockNamedValue outputParameter(name);
 801707e:	f107 0310 	add.w	r3, r7, #16
 8017082:	68b9      	ldr	r1, [r7, #8]
 8017084:	4618      	mov	r0, r3
 8017086:	f004 ff6d 	bl	801bf64 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setValue(output);
 801708a:	f107 0310 	add.w	r3, r7, #16
 801708e:	6879      	ldr	r1, [r7, #4]
 8017090:	4618      	mov	r0, r3
 8017092:	f005 f8e5 	bl	801c260 <_ZN14MockNamedValue8setValueEPv>
    checkOutputParameter(outputParameter);
 8017096:	68fb      	ldr	r3, [r7, #12]
 8017098:	681b      	ldr	r3, [r3, #0]
 801709a:	33e4      	adds	r3, #228	; 0xe4
 801709c:	681b      	ldr	r3, [r3, #0]
 801709e:	f107 0210 	add.w	r2, r7, #16
 80170a2:	4611      	mov	r1, r2
 80170a4:	68f8      	ldr	r0, [r7, #12]
 80170a6:	4798      	blx	r3

    return *this;
 80170a8:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 80170aa:	f107 0310 	add.w	r3, r7, #16
 80170ae:	4618      	mov	r0, r3
 80170b0:	f004 ff82 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
    return *this;
 80170b4:	4623      	mov	r3, r4
}
 80170b6:	4618      	mov	r0, r3
 80170b8:	3754      	adds	r7, #84	; 0x54
 80170ba:	46bd      	mov	sp, r7
 80170bc:	bd90      	pop	{r4, r7, pc}
 80170be:	bf00      	nop
 80170c0:	080244ec 	.word	0x080244ec

080170c4 <_ZN21MockCheckedActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockCheckedActualCall::withOutputParameterOfType(const SimpleString& type, const SimpleString& name, void* output)
{
 80170c4:	b590      	push	{r4, r7, lr}
 80170c6:	b093      	sub	sp, #76	; 0x4c
 80170c8:	af00      	add	r7, sp, #0
 80170ca:	60f8      	str	r0, [r7, #12]
 80170cc:	60b9      	str	r1, [r7, #8]
 80170ce:	607a      	str	r2, [r7, #4]
 80170d0:	603b      	str	r3, [r7, #0]
    addOutputParameter(name, type, output);
 80170d2:	68fb      	ldr	r3, [r7, #12]
 80170d4:	681b      	ldr	r3, [r3, #0]
 80170d6:	33f0      	adds	r3, #240	; 0xf0
 80170d8:	681c      	ldr	r4, [r3, #0]
 80170da:	683b      	ldr	r3, [r7, #0]
 80170dc:	68ba      	ldr	r2, [r7, #8]
 80170de:	6879      	ldr	r1, [r7, #4]
 80170e0:	68f8      	ldr	r0, [r7, #12]
 80170e2:	47a0      	blx	r4

    MockNamedValue outputParameter(name);
 80170e4:	f107 0310 	add.w	r3, r7, #16
 80170e8:	6879      	ldr	r1, [r7, #4]
 80170ea:	4618      	mov	r0, r3
 80170ec:	f004 ff3a 	bl	801bf64 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setConstObjectPointer(type, output);
 80170f0:	f107 0310 	add.w	r3, r7, #16
 80170f4:	683a      	ldr	r2, [r7, #0]
 80170f6:	68b9      	ldr	r1, [r7, #8]
 80170f8:	4618      	mov	r0, r3
 80170fa:	f005 f95f 	bl	801c3bc <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>
    checkOutputParameter(outputParameter);
 80170fe:	68fb      	ldr	r3, [r7, #12]
 8017100:	681b      	ldr	r3, [r3, #0]
 8017102:	33e4      	adds	r3, #228	; 0xe4
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	f107 0210 	add.w	r2, r7, #16
 801710a:	4611      	mov	r1, r2
 801710c:	68f8      	ldr	r0, [r7, #12]
 801710e:	4798      	blx	r3

    return *this;
 8017110:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 8017112:	f107 0310 	add.w	r3, r7, #16
 8017116:	4618      	mov	r0, r3
 8017118:	f004 ff4e 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
    return *this;
 801711c:	4623      	mov	r3, r4
}
 801711e:	4618      	mov	r0, r3
 8017120:	374c      	adds	r7, #76	; 0x4c
 8017122:	46bd      	mov	sp, r7
 8017124:	bd90      	pop	{r4, r7, pc}

08017126 <_ZNK21MockCheckedActualCall11isFulfilledEv>:

bool MockCheckedActualCall::isFulfilled() const
{
 8017126:	b480      	push	{r7}
 8017128:	b083      	sub	sp, #12
 801712a:	af00      	add	r7, sp, #0
 801712c:	6078      	str	r0, [r7, #4]
    return state_ == CALL_SUCCEED;
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	7d1b      	ldrb	r3, [r3, #20]
 8017132:	2b02      	cmp	r3, #2
 8017134:	bf0c      	ite	eq
 8017136:	2301      	moveq	r3, #1
 8017138:	2300      	movne	r3, #0
 801713a:	b2db      	uxtb	r3, r3
}
 801713c:	4618      	mov	r0, r3
 801713e:	370c      	adds	r7, #12
 8017140:	46bd      	mov	sp, r7
 8017142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017146:	4770      	bx	lr

08017148 <_ZNK21MockCheckedActualCall9hasFailedEv>:

bool MockCheckedActualCall::hasFailed() const
{
 8017148:	b480      	push	{r7}
 801714a:	b083      	sub	sp, #12
 801714c:	af00      	add	r7, sp, #0
 801714e:	6078      	str	r0, [r7, #4]
    return state_ == CALL_FAILED;
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	7d1b      	ldrb	r3, [r3, #20]
 8017154:	2b01      	cmp	r3, #1
 8017156:	bf0c      	ite	eq
 8017158:	2301      	moveq	r3, #1
 801715a:	2300      	movne	r3, #0
 801715c:	b2db      	uxtb	r3, r3
}
 801715e:	4618      	mov	r0, r3
 8017160:	370c      	adds	r7, #12
 8017162:	46bd      	mov	sp, r7
 8017164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017168:	4770      	bx	lr
	...

0801716c <_ZN21MockCheckedActualCall17checkExpectationsEv>:

void MockCheckedActualCall::checkExpectations()
{
 801716c:	b5b0      	push	{r4, r5, r7, lr}
 801716e:	b096      	sub	sp, #88	; 0x58
 8017170:	af02      	add	r7, sp, #8
 8017172:	6078      	str	r0, [r7, #4]
    if(expectationsChecked_) {
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	7d5b      	ldrb	r3, [r3, #21]
 8017178:	2b00      	cmp	r3, #0
 801717a:	f040 80bc 	bne.w	80172f6 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18a>
        return;
    }

    expectationsChecked_ = true;
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	2201      	movs	r2, #1
 8017182:	755a      	strb	r2, [r3, #21]

    if (state_ != CALL_IN_PROGRESS) {
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	7d1b      	ldrb	r3, [r3, #20]
 8017188:	2b00      	cmp	r3, #0
 801718a:	d014      	beq.n	80171b6 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x4a>
        if(state_ == CALL_SUCCEED) {
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	7d1b      	ldrb	r3, [r3, #20]
 8017190:	2b02      	cmp	r3, #2
 8017192:	d10a      	bne.n	80171aa <_ZN21MockCheckedActualCall17checkExpectationsEv+0x3e>
            matchingExpectation_->callWasMade(callOrder_);
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	6998      	ldr	r0, [r3, #24]
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	699b      	ldr	r3, [r3, #24]
 801719c:	681b      	ldr	r3, [r3, #0]
 801719e:	33d8      	adds	r3, #216	; 0xd8
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	687a      	ldr	r2, [r7, #4]
 80171a4:	68d2      	ldr	r2, [r2, #12]
 80171a6:	4611      	mov	r1, r2
 80171a8:	4798      	blx	r3
        }
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	331c      	adds	r3, #28
 80171ae:	4618      	mov	r0, r3
 80171b0:	f003 fe07 	bl	801adc2 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 80171b4:	e0a0      	b.n	80172f8 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasFinalizedMatchingExpectations())
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	331c      	adds	r3, #28
 80171ba:	4618      	mov	r0, r3
 80171bc:	f003 fac3 	bl	801a746 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>
 80171c0:	4603      	mov	r3, r0
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	d00f      	beq.n	80171e6 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x7a>
        FAIL("Actual call is in progress, but there are finalized matching expectations when checking expectations. This cannot happen."); // LCOV_EXCL_LINE
 80171c6:	f7fb fd8b 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 80171ca:	4604      	mov	r4, r0
 80171cc:	6823      	ldr	r3, [r4, #0]
 80171ce:	3368      	adds	r3, #104	; 0x68
 80171d0:	681d      	ldr	r5, [r3, #0]
 80171d2:	f7fb fd95 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80171d6:	4603      	mov	r3, r0
 80171d8:	9300      	str	r3, [sp, #0]
 80171da:	f240 1385 	movw	r3, #389	; 0x185
 80171de:	4a48      	ldr	r2, [pc, #288]	; (8017300 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x194>)
 80171e0:	4948      	ldr	r1, [pc, #288]	; (8017304 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x198>)
 80171e2:	4620      	mov	r0, r4
 80171e4:	47a8      	blx	r5

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstMatchingExpectation();
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	331c      	adds	r3, #28
 80171ea:	4618      	mov	r0, r3
 80171ec:	f003 fd5f 	bl	801acae <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>
 80171f0:	4602      	mov	r2, r0
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	699b      	ldr	r3, [r3, #24]
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	d01f      	beq.n	801723e <_ZN21MockCheckedActualCall17checkExpectationsEv+0xd2>
        matchingExpectation_->finalizeActualCallMatch();
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	699a      	ldr	r2, [r3, #24]
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	699b      	ldr	r3, [r3, #24]
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	33e4      	adds	r3, #228	; 0xe4
 801720a:	681b      	ldr	r3, [r3, #0]
 801720c:	4610      	mov	r0, r2
 801720e:	4798      	blx	r3
        callHasSucceeded();
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	681b      	ldr	r3, [r3, #0]
 8017214:	33d0      	adds	r3, #208	; 0xd0
 8017216:	681b      	ldr	r3, [r3, #0]
 8017218:	6878      	ldr	r0, [r7, #4]
 801721a:	4798      	blx	r3
        matchingExpectation_->callWasMade(callOrder_);
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	6998      	ldr	r0, [r3, #24]
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	699b      	ldr	r3, [r3, #24]
 8017224:	681b      	ldr	r3, [r3, #0]
 8017226:	33d8      	adds	r3, #216	; 0xd8
 8017228:	681b      	ldr	r3, [r3, #0]
 801722a:	687a      	ldr	r2, [r7, #4]
 801722c:	68d2      	ldr	r2, [r2, #12]
 801722e:	4611      	mov	r1, r2
 8017230:	4798      	blx	r3
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	331c      	adds	r3, #28
 8017236:	4618      	mov	r0, r3
 8017238:	f003 fdc3 	bl	801adc2 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 801723c:	e05c      	b.n	80172f8 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasUnmatchingExpectationsBecauseOfMissingParameters()) {
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	331c      	adds	r3, #28
 8017242:	4618      	mov	r0, r3
 8017244:	f003 ffc4 	bl	801b1d0 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>
 8017248:	4603      	mov	r3, r0
 801724a:	2b00      	cmp	r3, #0
 801724c:	d029      	beq.n	80172a2 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x136>
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	681b      	ldr	r3, [r3, #0]
 8017252:	33cc      	adds	r3, #204	; 0xcc
 8017254:	681b      	ldr	r3, [r3, #0]
 8017256:	6878      	ldr	r0, [r7, #4]
 8017258:	4798      	blx	r3
 801725a:	4604      	mov	r4, r0
 801725c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017260:	6879      	ldr	r1, [r7, #4]
 8017262:	4618      	mov	r0, r3
 8017264:	f7ff f93b 	bl	80164de <_ZNK21MockCheckedActualCall7getNameEv>
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801726c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8017270:	f107 000c 	add.w	r0, r7, #12
 8017274:	4621      	mov	r1, r4
 8017276:	f004 fd21 	bl	801bcbc <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 801727a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801727e:	4618      	mov	r0, r3
 8017280:	f7f4 fd03 	bl	800bc8a <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	681b      	ldr	r3, [r3, #0]
 8017288:	33dc      	adds	r3, #220	; 0xdc
 801728a:	681b      	ldr	r3, [r3, #0]
 801728c:	f107 020c 	add.w	r2, r7, #12
 8017290:	4611      	mov	r1, r2
 8017292:	6878      	ldr	r0, [r7, #4]
 8017294:	4798      	blx	r3
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8017296:	f107 030c 	add.w	r3, r7, #12
 801729a:	4618      	mov	r0, r3
 801729c:	f001 fb62 	bl	8018964 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 80172a0:	e02a      	b.n	80172f8 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }
    else {
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	681b      	ldr	r3, [r3, #0]
 80172a6:	33cc      	adds	r3, #204	; 0xcc
 80172a8:	681b      	ldr	r3, [r3, #0]
 80172aa:	6878      	ldr	r0, [r7, #4]
 80172ac:	4798      	blx	r3
 80172ae:	4604      	mov	r4, r0
 80172b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80172b4:	6879      	ldr	r1, [r7, #4]
 80172b6:	4618      	mov	r0, r3
 80172b8:	f7ff f911 	bl	80164de <_ZNK21MockCheckedActualCall7getNameEv>
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172c0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80172c4:	f107 000c 	add.w	r0, r7, #12
 80172c8:	4621      	mov	r1, r4
 80172ca:	f004 fe05 	bl	801bed8 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 80172ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80172d2:	4618      	mov	r0, r3
 80172d4:	f7f4 fcd9 	bl	800bc8a <_ZN12SimpleStringD1Ev>
        failTest(failure);
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	681b      	ldr	r3, [r3, #0]
 80172dc:	33dc      	adds	r3, #220	; 0xdc
 80172de:	681b      	ldr	r3, [r3, #0]
 80172e0:	f107 020c 	add.w	r2, r7, #12
 80172e4:	4611      	mov	r1, r2
 80172e6:	6878      	ldr	r0, [r7, #4]
 80172e8:	4798      	blx	r3
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 80172ea:	f107 030c 	add.w	r3, r7, #12
 80172ee:	4618      	mov	r0, r3
 80172f0:	f001 fb5a 	bl	80189a8 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 80172f4:	e000      	b.n	80172f8 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
        return;
 80172f6:	bf00      	nop
    }
}
 80172f8:	3750      	adds	r7, #80	; 0x50
 80172fa:	46bd      	mov	sp, r7
 80172fc:	bdb0      	pop	{r4, r5, r7, pc}
 80172fe:	bf00      	nop
 8017300:	080244f4 	.word	0x080244f4
 8017304:	0802455c 	.word	0x0802455c

08017308 <_ZN21MockCheckedActualCall8setStateENS_15ActualCallStateE>:

void MockCheckedActualCall::setState(ActualCallState state)
{
 8017308:	b480      	push	{r7}
 801730a:	b083      	sub	sp, #12
 801730c:	af00      	add	r7, sp, #0
 801730e:	6078      	str	r0, [r7, #4]
 8017310:	460b      	mov	r3, r1
 8017312:	70fb      	strb	r3, [r7, #3]
    state_ = state;
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	78fa      	ldrb	r2, [r7, #3]
 8017318:	751a      	strb	r2, [r3, #20]
}
 801731a:	bf00      	nop
 801731c:	370c      	adds	r7, #12
 801731e:	46bd      	mov	sp, r7
 8017320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017324:	4770      	bx	lr
	...

08017328 <_ZN21MockCheckedActualCall11returnValueEv>:

MockNamedValue MockCheckedActualCall::returnValue()
{
 8017328:	b580      	push	{r7, lr}
 801732a:	b084      	sub	sp, #16
 801732c:	af00      	add	r7, sp, #0
 801732e:	6078      	str	r0, [r7, #4]
 8017330:	6039      	str	r1, [r7, #0]
    checkExpectations();
 8017332:	683b      	ldr	r3, [r7, #0]
 8017334:	681b      	ldr	r3, [r3, #0]
 8017336:	33c4      	adds	r3, #196	; 0xc4
 8017338:	681b      	ldr	r3, [r3, #0]
 801733a:	6838      	ldr	r0, [r7, #0]
 801733c:	4798      	blx	r3
    if (matchingExpectation_)
 801733e:	683b      	ldr	r3, [r7, #0]
 8017340:	699b      	ldr	r3, [r3, #24]
 8017342:	2b00      	cmp	r3, #0
 8017344:	d00a      	beq.n	801735c <_ZN21MockCheckedActualCall11returnValueEv+0x34>
        return matchingExpectation_->returnValue();
 8017346:	683b      	ldr	r3, [r7, #0]
 8017348:	6999      	ldr	r1, [r3, #24]
 801734a:	683b      	ldr	r3, [r7, #0]
 801734c:	699b      	ldr	r3, [r3, #24]
 801734e:	681b      	ldr	r3, [r3, #0]
 8017350:	3394      	adds	r3, #148	; 0x94
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	687a      	ldr	r2, [r7, #4]
 8017356:	4610      	mov	r0, r2
 8017358:	4798      	blx	r3
 801735a:	e010      	b.n	801737e <_ZN21MockCheckedActualCall11returnValueEv+0x56>
    return MockNamedValue("no return value");
 801735c:	f107 0308 	add.w	r3, r7, #8
 8017360:	4909      	ldr	r1, [pc, #36]	; (8017388 <_ZN21MockCheckedActualCall11returnValueEv+0x60>)
 8017362:	4618      	mov	r0, r3
 8017364:	f7f4 f8d9 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8017368:	f107 0308 	add.w	r3, r7, #8
 801736c:	4619      	mov	r1, r3
 801736e:	6878      	ldr	r0, [r7, #4]
 8017370:	f004 fdf8 	bl	801bf64 <_ZN14MockNamedValueC1ERK12SimpleString>
 8017374:	f107 0308 	add.w	r3, r7, #8
 8017378:	4618      	mov	r0, r3
 801737a:	f7f4 fc86 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 801737e:	6878      	ldr	r0, [r7, #4]
 8017380:	3710      	adds	r7, #16
 8017382:	46bd      	mov	sp, r7
 8017384:	bd80      	pop	{r7, pc}
 8017386:	bf00      	nop
 8017388:	080245d8 	.word	0x080245d8

0801738c <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb>:

bool MockCheckedActualCall::returnBoolValueOrDefault(bool default_value)
{
 801738c:	b580      	push	{r7, lr}
 801738e:	b082      	sub	sp, #8
 8017390:	af00      	add	r7, sp, #0
 8017392:	6078      	str	r0, [r7, #4]
 8017394:	460b      	mov	r3, r1
 8017396:	70fb      	strb	r3, [r7, #3]
    if (!hasReturnValue()) {
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	681b      	ldr	r3, [r3, #0]
 801739c:	3350      	adds	r3, #80	; 0x50
 801739e:	681b      	ldr	r3, [r3, #0]
 80173a0:	6878      	ldr	r0, [r7, #4]
 80173a2:	4798      	blx	r3
 80173a4:	4603      	mov	r3, r0
 80173a6:	f083 0301 	eor.w	r3, r3, #1
 80173aa:	b2db      	uxtb	r3, r3
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d001      	beq.n	80173b4 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x28>
        return default_value;
 80173b0:	78fb      	ldrb	r3, [r7, #3]
 80173b2:	e007      	b.n	80173c4 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x38>
    }
    return returnBoolValue();
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	681b      	ldr	r3, [r3, #0]
 80173b8:	335c      	adds	r3, #92	; 0x5c
 80173ba:	681b      	ldr	r3, [r3, #0]
 80173bc:	6878      	ldr	r0, [r7, #4]
 80173be:	4798      	blx	r3
 80173c0:	4603      	mov	r3, r0
 80173c2:	bf00      	nop
}
 80173c4:	4618      	mov	r0, r3
 80173c6:	3708      	adds	r7, #8
 80173c8:	46bd      	mov	sp, r7
 80173ca:	bd80      	pop	{r7, pc}

080173cc <_ZN21MockCheckedActualCall15returnBoolValueEv>:

bool MockCheckedActualCall::returnBoolValue()
{
 80173cc:	b590      	push	{r4, r7, lr}
 80173ce:	b091      	sub	sp, #68	; 0x44
 80173d0:	af00      	add	r7, sp, #0
 80173d2:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	681b      	ldr	r3, [r3, #0]
 80173d8:	3354      	adds	r3, #84	; 0x54
 80173da:	681b      	ldr	r3, [r3, #0]
 80173dc:	f107 0208 	add.w	r2, r7, #8
 80173e0:	6879      	ldr	r1, [r7, #4]
 80173e2:	4610      	mov	r0, r2
 80173e4:	4798      	blx	r3
 80173e6:	f107 0308 	add.w	r3, r7, #8
 80173ea:	4618      	mov	r0, r3
 80173ec:	f005 f896 	bl	801c51c <_ZNK14MockNamedValue12getBoolValueEv>
 80173f0:	4603      	mov	r3, r0
 80173f2:	461c      	mov	r4, r3
 80173f4:	bf00      	nop
 80173f6:	f107 0308 	add.w	r3, r7, #8
 80173fa:	4618      	mov	r0, r3
 80173fc:	f004 fddc 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
 8017400:	4623      	mov	r3, r4
}
 8017402:	4618      	mov	r0, r3
 8017404:	3744      	adds	r7, #68	; 0x44
 8017406:	46bd      	mov	sp, r7
 8017408:	bd90      	pop	{r4, r7, pc}

0801740a <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi>:

int MockCheckedActualCall::returnIntValueOrDefault(int default_value)
{
 801740a:	b580      	push	{r7, lr}
 801740c:	b082      	sub	sp, #8
 801740e:	af00      	add	r7, sp, #0
 8017410:	6078      	str	r0, [r7, #4]
 8017412:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	681b      	ldr	r3, [r3, #0]
 8017418:	3350      	adds	r3, #80	; 0x50
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	6878      	ldr	r0, [r7, #4]
 801741e:	4798      	blx	r3
 8017420:	4603      	mov	r3, r0
 8017422:	f083 0301 	eor.w	r3, r3, #1
 8017426:	b2db      	uxtb	r3, r3
 8017428:	2b00      	cmp	r3, #0
 801742a:	d001      	beq.n	8017430 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x26>
        return default_value;
 801742c:	683b      	ldr	r3, [r7, #0]
 801742e:	e007      	b.n	8017440 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x36>
    }
    return returnIntValue();
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	3364      	adds	r3, #100	; 0x64
 8017436:	681b      	ldr	r3, [r3, #0]
 8017438:	6878      	ldr	r0, [r7, #4]
 801743a:	4798      	blx	r3
 801743c:	4603      	mov	r3, r0
 801743e:	bf00      	nop
}
 8017440:	4618      	mov	r0, r3
 8017442:	3708      	adds	r7, #8
 8017444:	46bd      	mov	sp, r7
 8017446:	bd80      	pop	{r7, pc}

08017448 <_ZN21MockCheckedActualCall14returnIntValueEv>:

int MockCheckedActualCall::returnIntValue()
{
 8017448:	b590      	push	{r4, r7, lr}
 801744a:	b091      	sub	sp, #68	; 0x44
 801744c:	af00      	add	r7, sp, #0
 801744e:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	681b      	ldr	r3, [r3, #0]
 8017454:	3354      	adds	r3, #84	; 0x54
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	f107 0208 	add.w	r2, r7, #8
 801745c:	6879      	ldr	r1, [r7, #4]
 801745e:	4610      	mov	r0, r2
 8017460:	4798      	blx	r3
 8017462:	f107 0308 	add.w	r3, r7, #8
 8017466:	4618      	mov	r0, r3
 8017468:	f005 f8d0 	bl	801c60c <_ZNK14MockNamedValue11getIntValueEv>
 801746c:	4604      	mov	r4, r0
 801746e:	bf00      	nop
 8017470:	f107 0308 	add.w	r3, r7, #8
 8017474:	4618      	mov	r0, r3
 8017476:	f004 fd9f 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
 801747a:	4623      	mov	r3, r4
}
 801747c:	4618      	mov	r0, r3
 801747e:	3744      	adds	r7, #68	; 0x44
 8017480:	46bd      	mov	sp, r7
 8017482:	bd90      	pop	{r4, r7, pc}

08017484 <_ZN21MockCheckedActualCall26returnUnsignedLongIntValueEv>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValue()
{
 8017484:	b590      	push	{r4, r7, lr}
 8017486:	b091      	sub	sp, #68	; 0x44
 8017488:	af00      	add	r7, sp, #0
 801748a:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	681b      	ldr	r3, [r3, #0]
 8017490:	3354      	adds	r3, #84	; 0x54
 8017492:	681b      	ldr	r3, [r3, #0]
 8017494:	f107 0208 	add.w	r2, r7, #8
 8017498:	6879      	ldr	r1, [r7, #4]
 801749a:	4610      	mov	r0, r2
 801749c:	4798      	blx	r3
 801749e:	f107 0308 	add.w	r3, r7, #8
 80174a2:	4618      	mov	r0, r3
 80174a4:	f005 f93c 	bl	801c720 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 80174a8:	4604      	mov	r4, r0
 80174aa:	bf00      	nop
 80174ac:	f107 0308 	add.w	r3, r7, #8
 80174b0:	4618      	mov	r0, r3
 80174b2:	f004 fd81 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
 80174b6:	4623      	mov	r3, r4
}
 80174b8:	4618      	mov	r0, r3
 80174ba:	3744      	adds	r7, #68	; 0x44
 80174bc:	46bd      	mov	sp, r7
 80174be:	bd90      	pop	{r4, r7, pc}

080174c0 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValueOrDefault(unsigned long int default_value)
{
 80174c0:	b580      	push	{r7, lr}
 80174c2:	b082      	sub	sp, #8
 80174c4:	af00      	add	r7, sp, #0
 80174c6:	6078      	str	r0, [r7, #4]
 80174c8:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	681b      	ldr	r3, [r3, #0]
 80174ce:	3350      	adds	r3, #80	; 0x50
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	6878      	ldr	r0, [r7, #4]
 80174d4:	4798      	blx	r3
 80174d6:	4603      	mov	r3, r0
 80174d8:	f083 0301 	eor.w	r3, r3, #1
 80174dc:	b2db      	uxtb	r3, r3
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d001      	beq.n	80174e6 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x26>
        return default_value;
 80174e2:	683b      	ldr	r3, [r7, #0]
 80174e4:	e007      	b.n	80174f6 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x36>
    }
    return returnUnsignedLongIntValue();
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	681b      	ldr	r3, [r3, #0]
 80174ea:	3368      	adds	r3, #104	; 0x68
 80174ec:	681b      	ldr	r3, [r3, #0]
 80174ee:	6878      	ldr	r0, [r7, #4]
 80174f0:	4798      	blx	r3
 80174f2:	4603      	mov	r3, r0
 80174f4:	bf00      	nop
}
 80174f6:	4618      	mov	r0, r3
 80174f8:	3708      	adds	r7, #8
 80174fa:	46bd      	mov	sp, r7
 80174fc:	bd80      	pop	{r7, pc}

080174fe <_ZN21MockCheckedActualCall18returnLongIntValueEv>:

long int MockCheckedActualCall::returnLongIntValue()
{
 80174fe:	b590      	push	{r4, r7, lr}
 8017500:	b091      	sub	sp, #68	; 0x44
 8017502:	af00      	add	r7, sp, #0
 8017504:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	681b      	ldr	r3, [r3, #0]
 801750a:	3354      	adds	r3, #84	; 0x54
 801750c:	681b      	ldr	r3, [r3, #0]
 801750e:	f107 0208 	add.w	r2, r7, #8
 8017512:	6879      	ldr	r1, [r7, #4]
 8017514:	4610      	mov	r0, r2
 8017516:	4798      	blx	r3
 8017518:	f107 0308 	add.w	r3, r7, #8
 801751c:	4618      	mov	r0, r3
 801751e:	f005 f89d 	bl	801c65c <_ZNK14MockNamedValue15getLongIntValueEv>
 8017522:	4604      	mov	r4, r0
 8017524:	bf00      	nop
 8017526:	f107 0308 	add.w	r3, r7, #8
 801752a:	4618      	mov	r0, r3
 801752c:	f004 fd44 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
 8017530:	4623      	mov	r3, r4
}
 8017532:	4618      	mov	r0, r3
 8017534:	3744      	adds	r7, #68	; 0x44
 8017536:	46bd      	mov	sp, r7
 8017538:	bd90      	pop	{r4, r7, pc}

0801753a <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl>:

long int MockCheckedActualCall::returnLongIntValueOrDefault(long int default_value)
{
 801753a:	b580      	push	{r7, lr}
 801753c:	b082      	sub	sp, #8
 801753e:	af00      	add	r7, sp, #0
 8017540:	6078      	str	r0, [r7, #4]
 8017542:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	681b      	ldr	r3, [r3, #0]
 8017548:	3350      	adds	r3, #80	; 0x50
 801754a:	681b      	ldr	r3, [r3, #0]
 801754c:	6878      	ldr	r0, [r7, #4]
 801754e:	4798      	blx	r3
 8017550:	4603      	mov	r3, r0
 8017552:	f083 0301 	eor.w	r3, r3, #1
 8017556:	b2db      	uxtb	r3, r3
 8017558:	2b00      	cmp	r3, #0
 801755a:	d001      	beq.n	8017560 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x26>
        return default_value;
 801755c:	683b      	ldr	r3, [r7, #0]
 801755e:	e007      	b.n	8017570 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x36>
    }
    return returnLongIntValue();
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	681b      	ldr	r3, [r3, #0]
 8017564:	3370      	adds	r3, #112	; 0x70
 8017566:	681b      	ldr	r3, [r3, #0]
 8017568:	6878      	ldr	r0, [r7, #4]
 801756a:	4798      	blx	r3
 801756c:	4603      	mov	r3, r0
 801756e:	bf00      	nop
}
 8017570:	4618      	mov	r0, r3
 8017572:	3708      	adds	r7, #8
 8017574:	46bd      	mov	sp, r7
 8017576:	bd80      	pop	{r7, pc}

08017578 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv>:
}

#else

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValue()
{
 8017578:	b5b0      	push	{r4, r5, r7, lr}
 801757a:	b084      	sub	sp, #16
 801757c:	af02      	add	r7, sp, #8
 801757e:	6078      	str	r0, [r7, #4]
 8017580:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 8017582:	f7fb fbad 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 8017586:	4604      	mov	r4, r0
 8017588:	6823      	ldr	r3, [r4, #0]
 801758a:	3368      	adds	r3, #104	; 0x68
 801758c:	681d      	ldr	r5, [r3, #0]
 801758e:	f7fb fbb7 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017592:	4603      	mov	r3, r0
 8017594:	9300      	str	r3, [sp, #0]
 8017596:	f240 13fb 	movw	r3, #507	; 0x1fb
 801759a:	4a06      	ldr	r2, [pc, #24]	; (80175b4 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x3c>)
 801759c:	4906      	ldr	r1, [pc, #24]	; (80175b8 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x40>)
 801759e:	4620      	mov	r0, r4
 80175a0:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 80175a2:	2100      	movs	r1, #0
 80175a4:	6878      	ldr	r0, [r7, #4]
 80175a6:	f7f1 fffb 	bl	80095a0 <_ZN18cpputest_ulonglongC1Ei>
}
 80175aa:	6878      	ldr	r0, [r7, #4]
 80175ac:	3708      	adds	r7, #8
 80175ae:	46bd      	mov	sp, r7
 80175b0:	bdb0      	pop	{r4, r5, r7, pc}
 80175b2:	bf00      	nop
 80175b4:	080244f4 	.word	0x080244f4
 80175b8:	08024510 	.word	0x08024510

080175bc <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong default_value)
{
 80175bc:	b5b0      	push	{r4, r5, r7, lr}
 80175be:	b086      	sub	sp, #24
 80175c0:	af02      	add	r7, sp, #8
 80175c2:	60f8      	str	r0, [r7, #12]
 80175c4:	60b9      	str	r1, [r7, #8]
 80175c6:	4639      	mov	r1, r7
 80175c8:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 80175cc:	f7fb fb88 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 80175d0:	4604      	mov	r4, r0
 80175d2:	6823      	ldr	r3, [r4, #0]
 80175d4:	3368      	adds	r3, #104	; 0x68
 80175d6:	681d      	ldr	r5, [r3, #0]
 80175d8:	f7fb fb92 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80175dc:	4603      	mov	r3, r0
 80175de:	9300      	str	r3, [sp, #0]
 80175e0:	f240 2301 	movw	r3, #513	; 0x201
 80175e4:	4a06      	ldr	r2, [pc, #24]	; (8017600 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 80175e6:	4907      	ldr	r1, [pc, #28]	; (8017604 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 80175e8:	4620      	mov	r0, r4
 80175ea:	47a8      	blx	r5
    return default_value;
 80175ec:	68fb      	ldr	r3, [r7, #12]
 80175ee:	461a      	mov	r2, r3
 80175f0:	463b      	mov	r3, r7
 80175f2:	cb03      	ldmia	r3!, {r0, r1}
 80175f4:	6010      	str	r0, [r2, #0]
 80175f6:	6051      	str	r1, [r2, #4]
}
 80175f8:	68f8      	ldr	r0, [r7, #12]
 80175fa:	3710      	adds	r7, #16
 80175fc:	46bd      	mov	sp, r7
 80175fe:	bdb0      	pop	{r4, r5, r7, pc}
 8017600:	080244f4 	.word	0x080244f4
 8017604:	08024510 	.word	0x08024510

08017608 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValue()
{
 8017608:	b5b0      	push	{r4, r5, r7, lr}
 801760a:	b084      	sub	sp, #16
 801760c:	af02      	add	r7, sp, #8
 801760e:	6078      	str	r0, [r7, #4]
 8017610:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 8017612:	f7fb fb65 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 8017616:	4604      	mov	r4, r0
 8017618:	6823      	ldr	r3, [r4, #0]
 801761a:	3368      	adds	r3, #104	; 0x68
 801761c:	681d      	ldr	r5, [r3, #0]
 801761e:	f7fb fb6f 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017622:	4603      	mov	r3, r0
 8017624:	9300      	str	r3, [sp, #0]
 8017626:	f240 2307 	movw	r3, #519	; 0x207
 801762a:	4a06      	ldr	r2, [pc, #24]	; (8017644 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x3c>)
 801762c:	4906      	ldr	r1, [pc, #24]	; (8017648 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x40>)
 801762e:	4620      	mov	r0, r4
 8017630:	47a8      	blx	r5
    return cpputest_longlong(0);
 8017632:	2100      	movs	r1, #0
 8017634:	6878      	ldr	r0, [r7, #4]
 8017636:	f7f1 ffa7 	bl	8009588 <_ZN17cpputest_longlongC1Ei>
}
 801763a:	6878      	ldr	r0, [r7, #4]
 801763c:	3708      	adds	r7, #8
 801763e:	46bd      	mov	sp, r7
 8017640:	bdb0      	pop	{r4, r5, r7, pc}
 8017642:	bf00      	nop
 8017644:	080244f4 	.word	0x080244f4
 8017648:	0802453c 	.word	0x0802453c

0801764c <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValueOrDefault(cpputest_longlong default_value)
{
 801764c:	b5b0      	push	{r4, r5, r7, lr}
 801764e:	b086      	sub	sp, #24
 8017650:	af02      	add	r7, sp, #8
 8017652:	60f8      	str	r0, [r7, #12]
 8017654:	60b9      	str	r1, [r7, #8]
 8017656:	4639      	mov	r1, r7
 8017658:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801765c:	f7fb fb40 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 8017660:	4604      	mov	r4, r0
 8017662:	6823      	ldr	r3, [r4, #0]
 8017664:	3368      	adds	r3, #104	; 0x68
 8017666:	681d      	ldr	r5, [r3, #0]
 8017668:	f7fb fb4a 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801766c:	4603      	mov	r3, r0
 801766e:	9300      	str	r3, [sp, #0]
 8017670:	f240 230d 	movw	r3, #525	; 0x20d
 8017674:	4a06      	ldr	r2, [pc, #24]	; (8017690 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 8017676:	4907      	ldr	r1, [pc, #28]	; (8017694 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 8017678:	4620      	mov	r0, r4
 801767a:	47a8      	blx	r5
    return default_value;
 801767c:	68fb      	ldr	r3, [r7, #12]
 801767e:	461a      	mov	r2, r3
 8017680:	463b      	mov	r3, r7
 8017682:	cb03      	ldmia	r3!, {r0, r1}
 8017684:	6010      	str	r0, [r2, #0]
 8017686:	6051      	str	r1, [r2, #4]
}
 8017688:	68f8      	ldr	r0, [r7, #12]
 801768a:	3710      	adds	r7, #16
 801768c:	46bd      	mov	sp, r7
 801768e:	bdb0      	pop	{r4, r5, r7, pc}
 8017690:	080244f4 	.word	0x080244f4
 8017694:	0802453c 	.word	0x0802453c

08017698 <_ZN21MockCheckedActualCall17returnDoubleValueEv>:

#endif

double MockCheckedActualCall::returnDoubleValue()
{
 8017698:	b580      	push	{r7, lr}
 801769a:	ed2d 8b02 	vpush	{d8}
 801769e:	b090      	sub	sp, #64	; 0x40
 80176a0:	af00      	add	r7, sp, #0
 80176a2:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	681b      	ldr	r3, [r3, #0]
 80176a8:	3354      	adds	r3, #84	; 0x54
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	f107 0208 	add.w	r2, r7, #8
 80176b0:	6879      	ldr	r1, [r7, #4]
 80176b2:	4610      	mov	r0, r2
 80176b4:	4798      	blx	r3
 80176b6:	f107 0308 	add.w	r3, r7, #8
 80176ba:	4618      	mov	r0, r3
 80176bc:	f005 f908 	bl	801c8d0 <_ZNK14MockNamedValue14getDoubleValueEv>
 80176c0:	eeb0 8a40 	vmov.f32	s16, s0
 80176c4:	eef0 8a60 	vmov.f32	s17, s1
 80176c8:	bf00      	nop
 80176ca:	f107 0308 	add.w	r3, r7, #8
 80176ce:	4618      	mov	r0, r3
 80176d0:	f004 fc72 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
 80176d4:	eeb0 7a48 	vmov.f32	s14, s16
 80176d8:	eef0 7a68 	vmov.f32	s15, s17
}
 80176dc:	eeb0 0a47 	vmov.f32	s0, s14
 80176e0:	eef0 0a67 	vmov.f32	s1, s15
 80176e4:	3740      	adds	r7, #64	; 0x40
 80176e6:	46bd      	mov	sp, r7
 80176e8:	ecbd 8b02 	vpop	{d8}
 80176ec:	bd80      	pop	{r7, pc}

080176ee <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd>:

double MockCheckedActualCall::returnDoubleValueOrDefault(double default_value)
{
 80176ee:	b580      	push	{r7, lr}
 80176f0:	b084      	sub	sp, #16
 80176f2:	af00      	add	r7, sp, #0
 80176f4:	60f8      	str	r0, [r7, #12]
 80176f6:	ed87 0b00 	vstr	d0, [r7]
    if (!hasReturnValue()) {
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	681b      	ldr	r3, [r3, #0]
 80176fe:	3350      	adds	r3, #80	; 0x50
 8017700:	681b      	ldr	r3, [r3, #0]
 8017702:	68f8      	ldr	r0, [r7, #12]
 8017704:	4798      	blx	r3
 8017706:	4603      	mov	r3, r0
 8017708:	f083 0301 	eor.w	r3, r3, #1
 801770c:	b2db      	uxtb	r3, r3
 801770e:	2b00      	cmp	r3, #0
 8017710:	d002      	beq.n	8017718 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x2a>
        return default_value;
 8017712:	ed97 7b00 	vldr	d7, [r7]
 8017716:	e00a      	b.n	801772e <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x40>
    }
    return returnDoubleValue();
 8017718:	68fb      	ldr	r3, [r7, #12]
 801771a:	681b      	ldr	r3, [r3, #0]
 801771c:	3398      	adds	r3, #152	; 0x98
 801771e:	681b      	ldr	r3, [r3, #0]
 8017720:	68f8      	ldr	r0, [r7, #12]
 8017722:	4798      	blx	r3
 8017724:	eeb0 7a40 	vmov.f32	s14, s0
 8017728:	eef0 7a60 	vmov.f32	s15, s1
 801772c:	bf00      	nop
}
 801772e:	eeb0 0a47 	vmov.f32	s0, s14
 8017732:	eef0 0a67 	vmov.f32	s1, s15
 8017736:	3710      	adds	r7, #16
 8017738:	46bd      	mov	sp, r7
 801773a:	bd80      	pop	{r7, pc}

0801773c <_ZN21MockCheckedActualCall22returnUnsignedIntValueEv>:

unsigned int MockCheckedActualCall::returnUnsignedIntValue()
{
 801773c:	b590      	push	{r4, r7, lr}
 801773e:	b091      	sub	sp, #68	; 0x44
 8017740:	af00      	add	r7, sp, #0
 8017742:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	681b      	ldr	r3, [r3, #0]
 8017748:	3354      	adds	r3, #84	; 0x54
 801774a:	681b      	ldr	r3, [r3, #0]
 801774c:	f107 0208 	add.w	r2, r7, #8
 8017750:	6879      	ldr	r1, [r7, #4]
 8017752:	4610      	mov	r0, r2
 8017754:	4798      	blx	r3
 8017756:	f107 0308 	add.w	r3, r7, #8
 801775a:	4618      	mov	r0, r3
 801775c:	f004 ff06 	bl	801c56c <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 8017760:	4604      	mov	r4, r0
 8017762:	bf00      	nop
 8017764:	f107 0308 	add.w	r3, r7, #8
 8017768:	4618      	mov	r0, r3
 801776a:	f004 fc25 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
 801776e:	4623      	mov	r3, r4
}
 8017770:	4618      	mov	r0, r3
 8017772:	3744      	adds	r7, #68	; 0x44
 8017774:	46bd      	mov	sp, r7
 8017776:	bd90      	pop	{r4, r7, pc}

08017778 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockCheckedActualCall::returnUnsignedIntValueOrDefault(unsigned int default_value)
{
 8017778:	b580      	push	{r7, lr}
 801777a:	b082      	sub	sp, #8
 801777c:	af00      	add	r7, sp, #0
 801777e:	6078      	str	r0, [r7, #4]
 8017780:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	681b      	ldr	r3, [r3, #0]
 8017786:	3350      	adds	r3, #80	; 0x50
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	6878      	ldr	r0, [r7, #4]
 801778c:	4798      	blx	r3
 801778e:	4603      	mov	r3, r0
 8017790:	f083 0301 	eor.w	r3, r3, #1
 8017794:	b2db      	uxtb	r3, r3
 8017796:	2b00      	cmp	r3, #0
 8017798:	d001      	beq.n	801779e <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x26>
        return default_value;
 801779a:	683b      	ldr	r3, [r7, #0]
 801779c:	e007      	b.n	80177ae <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x36>
    }
    return returnUnsignedIntValue();
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	681b      	ldr	r3, [r3, #0]
 80177a2:	3388      	adds	r3, #136	; 0x88
 80177a4:	681b      	ldr	r3, [r3, #0]
 80177a6:	6878      	ldr	r0, [r7, #4]
 80177a8:	4798      	blx	r3
 80177aa:	4603      	mov	r3, r0
 80177ac:	bf00      	nop
}
 80177ae:	4618      	mov	r0, r3
 80177b0:	3708      	adds	r7, #8
 80177b2:	46bd      	mov	sp, r7
 80177b4:	bd80      	pop	{r7, pc}

080177b6 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv>:

void * MockCheckedActualCall::returnPointerValueOrDefault(void * default_value)
{
 80177b6:	b580      	push	{r7, lr}
 80177b8:	b082      	sub	sp, #8
 80177ba:	af00      	add	r7, sp, #0
 80177bc:	6078      	str	r0, [r7, #4]
 80177be:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	681b      	ldr	r3, [r3, #0]
 80177c4:	3350      	adds	r3, #80	; 0x50
 80177c6:	681b      	ldr	r3, [r3, #0]
 80177c8:	6878      	ldr	r0, [r7, #4]
 80177ca:	4798      	blx	r3
 80177cc:	4603      	mov	r3, r0
 80177ce:	f083 0301 	eor.w	r3, r3, #1
 80177d2:	b2db      	uxtb	r3, r3
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d001      	beq.n	80177dc <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x26>
        return default_value;
 80177d8:	683b      	ldr	r3, [r7, #0]
 80177da:	e007      	b.n	80177ec <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x36>
    }
    return returnPointerValue();
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	681b      	ldr	r3, [r3, #0]
 80177e0:	33a0      	adds	r3, #160	; 0xa0
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	6878      	ldr	r0, [r7, #4]
 80177e6:	4798      	blx	r3
 80177e8:	4603      	mov	r3, r0
 80177ea:	bf00      	nop
}
 80177ec:	4618      	mov	r0, r3
 80177ee:	3708      	adds	r7, #8
 80177f0:	46bd      	mov	sp, r7
 80177f2:	bd80      	pop	{r7, pc}

080177f4 <_ZN21MockCheckedActualCall18returnPointerValueEv>:

void * MockCheckedActualCall::returnPointerValue()
{
 80177f4:	b590      	push	{r4, r7, lr}
 80177f6:	b091      	sub	sp, #68	; 0x44
 80177f8:	af00      	add	r7, sp, #0
 80177fa:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	681b      	ldr	r3, [r3, #0]
 8017800:	3354      	adds	r3, #84	; 0x54
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	f107 0208 	add.w	r2, r7, #8
 8017808:	6879      	ldr	r1, [r7, #4]
 801780a:	4610      	mov	r0, r2
 801780c:	4798      	blx	r3
 801780e:	f107 0308 	add.w	r3, r7, #8
 8017812:	4618      	mov	r0, r3
 8017814:	f005 f8e0 	bl	801c9d8 <_ZNK14MockNamedValue15getPointerValueEv>
 8017818:	4604      	mov	r4, r0
 801781a:	bf00      	nop
 801781c:	f107 0308 	add.w	r3, r7, #8
 8017820:	4618      	mov	r0, r3
 8017822:	f004 fbc9 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
 8017826:	4623      	mov	r3, r4
}
 8017828:	4618      	mov	r0, r3
 801782a:	3744      	adds	r7, #68	; 0x44
 801782c:	46bd      	mov	sp, r7
 801782e:	bd90      	pop	{r4, r7, pc}

08017830 <_ZN21MockCheckedActualCall23returnConstPointerValueEv>:

const void * MockCheckedActualCall::returnConstPointerValue()
{
 8017830:	b590      	push	{r4, r7, lr}
 8017832:	b091      	sub	sp, #68	; 0x44
 8017834:	af00      	add	r7, sp, #0
 8017836:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	681b      	ldr	r3, [r3, #0]
 801783c:	3354      	adds	r3, #84	; 0x54
 801783e:	681b      	ldr	r3, [r3, #0]
 8017840:	f107 0208 	add.w	r2, r7, #8
 8017844:	6879      	ldr	r1, [r7, #4]
 8017846:	4610      	mov	r0, r2
 8017848:	4798      	blx	r3
 801784a:	f107 0308 	add.w	r3, r7, #8
 801784e:	4618      	mov	r0, r3
 8017850:	f005 f8ea 	bl	801ca28 <_ZNK14MockNamedValue20getConstPointerValueEv>
 8017854:	4604      	mov	r4, r0
 8017856:	bf00      	nop
 8017858:	f107 0308 	add.w	r3, r7, #8
 801785c:	4618      	mov	r0, r3
 801785e:	f004 fbab 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
 8017862:	4623      	mov	r3, r4
}
 8017864:	4618      	mov	r0, r3
 8017866:	3744      	adds	r7, #68	; 0x44
 8017868:	46bd      	mov	sp, r7
 801786a:	bd90      	pop	{r4, r7, pc}

0801786c <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv>:

const void * MockCheckedActualCall::returnConstPointerValueOrDefault(const void * default_value)
{
 801786c:	b580      	push	{r7, lr}
 801786e:	b082      	sub	sp, #8
 8017870:	af00      	add	r7, sp, #0
 8017872:	6078      	str	r0, [r7, #4]
 8017874:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	681b      	ldr	r3, [r3, #0]
 801787a:	3350      	adds	r3, #80	; 0x50
 801787c:	681b      	ldr	r3, [r3, #0]
 801787e:	6878      	ldr	r0, [r7, #4]
 8017880:	4798      	blx	r3
 8017882:	4603      	mov	r3, r0
 8017884:	f083 0301 	eor.w	r3, r3, #1
 8017888:	b2db      	uxtb	r3, r3
 801788a:	2b00      	cmp	r3, #0
 801788c:	d001      	beq.n	8017892 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x26>
        return default_value;
 801788e:	683b      	ldr	r3, [r7, #0]
 8017890:	e007      	b.n	80178a2 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x36>
    }
    return returnConstPointerValue();
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	33a8      	adds	r3, #168	; 0xa8
 8017898:	681b      	ldr	r3, [r3, #0]
 801789a:	6878      	ldr	r0, [r7, #4]
 801789c:	4798      	blx	r3
 801789e:	4603      	mov	r3, r0
 80178a0:	bf00      	nop
}
 80178a2:	4618      	mov	r0, r3
 80178a4:	3708      	adds	r7, #8
 80178a6:	46bd      	mov	sp, r7
 80178a8:	bd80      	pop	{r7, pc}

080178aa <_ZN21MockCheckedActualCall26returnFunctionPointerValueEv>:

void (*MockCheckedActualCall::returnFunctionPointerValue())()
{
 80178aa:	b590      	push	{r4, r7, lr}
 80178ac:	b091      	sub	sp, #68	; 0x44
 80178ae:	af00      	add	r7, sp, #0
 80178b0:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	681b      	ldr	r3, [r3, #0]
 80178b6:	3354      	adds	r3, #84	; 0x54
 80178b8:	681b      	ldr	r3, [r3, #0]
 80178ba:	f107 0208 	add.w	r2, r7, #8
 80178be:	6879      	ldr	r1, [r7, #4]
 80178c0:	4610      	mov	r0, r2
 80178c2:	4798      	blx	r3
 80178c4:	f107 0308 	add.w	r3, r7, #8
 80178c8:	4618      	mov	r0, r3
 80178ca:	f005 f8d5 	bl	801ca78 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 80178ce:	4604      	mov	r4, r0
 80178d0:	bf00      	nop
 80178d2:	f107 0308 	add.w	r3, r7, #8
 80178d6:	4618      	mov	r0, r3
 80178d8:	f004 fb6e 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
 80178dc:	4623      	mov	r3, r4
}
 80178de:	4618      	mov	r0, r3
 80178e0:	3744      	adds	r7, #68	; 0x44
 80178e2:	46bd      	mov	sp, r7
 80178e4:	bd90      	pop	{r4, r7, pc}

080178e6 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockCheckedActualCall::returnFunctionPointerValueOrDefault(void (*default_value)()))()
{
 80178e6:	b580      	push	{r7, lr}
 80178e8:	b082      	sub	sp, #8
 80178ea:	af00      	add	r7, sp, #0
 80178ec:	6078      	str	r0, [r7, #4]
 80178ee:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	681b      	ldr	r3, [r3, #0]
 80178f4:	3350      	adds	r3, #80	; 0x50
 80178f6:	681b      	ldr	r3, [r3, #0]
 80178f8:	6878      	ldr	r0, [r7, #4]
 80178fa:	4798      	blx	r3
 80178fc:	4603      	mov	r3, r0
 80178fe:	f083 0301 	eor.w	r3, r3, #1
 8017902:	b2db      	uxtb	r3, r3
 8017904:	2b00      	cmp	r3, #0
 8017906:	d001      	beq.n	801790c <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x26>
        return default_value;
 8017908:	683b      	ldr	r3, [r7, #0]
 801790a:	e007      	b.n	801791c <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x36>
    }
    return returnFunctionPointerValue();
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	33b0      	adds	r3, #176	; 0xb0
 8017912:	681b      	ldr	r3, [r3, #0]
 8017914:	6878      	ldr	r0, [r7, #4]
 8017916:	4798      	blx	r3
 8017918:	4603      	mov	r3, r0
 801791a:	bf00      	nop
}
 801791c:	4618      	mov	r0, r3
 801791e:	3708      	adds	r7, #8
 8017920:	46bd      	mov	sp, r7
 8017922:	bd80      	pop	{r7, pc}

08017924 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc>:

const char * MockCheckedActualCall::returnStringValueOrDefault(const char * default_value)
{
 8017924:	b580      	push	{r7, lr}
 8017926:	b082      	sub	sp, #8
 8017928:	af00      	add	r7, sp, #0
 801792a:	6078      	str	r0, [r7, #4]
 801792c:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	681b      	ldr	r3, [r3, #0]
 8017932:	3350      	adds	r3, #80	; 0x50
 8017934:	681b      	ldr	r3, [r3, #0]
 8017936:	6878      	ldr	r0, [r7, #4]
 8017938:	4798      	blx	r3
 801793a:	4603      	mov	r3, r0
 801793c:	f083 0301 	eor.w	r3, r3, #1
 8017940:	b2db      	uxtb	r3, r3
 8017942:	2b00      	cmp	r3, #0
 8017944:	d001      	beq.n	801794a <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x26>
        return default_value;
 8017946:	683b      	ldr	r3, [r7, #0]
 8017948:	e007      	b.n	801795a <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x36>
    }
    return returnStringValue();
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	681b      	ldr	r3, [r3, #0]
 801794e:	3394      	adds	r3, #148	; 0x94
 8017950:	681b      	ldr	r3, [r3, #0]
 8017952:	6878      	ldr	r0, [r7, #4]
 8017954:	4798      	blx	r3
 8017956:	4603      	mov	r3, r0
 8017958:	bf00      	nop
}
 801795a:	4618      	mov	r0, r3
 801795c:	3708      	adds	r7, #8
 801795e:	46bd      	mov	sp, r7
 8017960:	bd80      	pop	{r7, pc}

08017962 <_ZN21MockCheckedActualCall17returnStringValueEv>:

const char * MockCheckedActualCall::returnStringValue()
{
 8017962:	b590      	push	{r4, r7, lr}
 8017964:	b091      	sub	sp, #68	; 0x44
 8017966:	af00      	add	r7, sp, #0
 8017968:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	681b      	ldr	r3, [r3, #0]
 801796e:	3354      	adds	r3, #84	; 0x54
 8017970:	681b      	ldr	r3, [r3, #0]
 8017972:	f107 0208 	add.w	r2, r7, #8
 8017976:	6879      	ldr	r1, [r7, #4]
 8017978:	4610      	mov	r0, r2
 801797a:	4798      	blx	r3
 801797c:	f107 0308 	add.w	r3, r7, #8
 8017980:	4618      	mov	r0, r3
 8017982:	f005 f801 	bl	801c988 <_ZNK14MockNamedValue14getStringValueEv>
 8017986:	4604      	mov	r4, r0
 8017988:	bf00      	nop
 801798a:	f107 0308 	add.w	r3, r7, #8
 801798e:	4618      	mov	r0, r3
 8017990:	f004 fb12 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
 8017994:	4623      	mov	r3, r4
}
 8017996:	4618      	mov	r0, r3
 8017998:	3744      	adds	r7, #68	; 0x44
 801799a:	46bd      	mov	sp, r7
 801799c:	bd90      	pop	{r4, r7, pc}

0801799e <_ZN21MockCheckedActualCall14hasReturnValueEv>:

bool MockCheckedActualCall::hasReturnValue()
{
 801799e:	b590      	push	{r4, r7, lr}
 80179a0:	b093      	sub	sp, #76	; 0x4c
 80179a2:	af00      	add	r7, sp, #0
 80179a4:	6078      	str	r0, [r7, #4]
    return ! returnValue().getName().isEmpty();
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	681b      	ldr	r3, [r3, #0]
 80179aa:	3354      	adds	r3, #84	; 0x54
 80179ac:	681b      	ldr	r3, [r3, #0]
 80179ae:	f107 0210 	add.w	r2, r7, #16
 80179b2:	6879      	ldr	r1, [r7, #4]
 80179b4:	4610      	mov	r0, r2
 80179b6:	4798      	blx	r3
 80179b8:	f107 0308 	add.w	r3, r7, #8
 80179bc:	f107 0210 	add.w	r2, r7, #16
 80179c0:	4611      	mov	r1, r2
 80179c2:	4618      	mov	r0, r3
 80179c4:	f004 fd8c 	bl	801c4e0 <_ZNK14MockNamedValue7getNameEv>
 80179c8:	f107 0308 	add.w	r3, r7, #8
 80179cc:	4618      	mov	r0, r3
 80179ce:	f7f4 f94b 	bl	800bc68 <_ZNK12SimpleString7isEmptyEv>
 80179d2:	4603      	mov	r3, r0
 80179d4:	f083 0301 	eor.w	r3, r3, #1
 80179d8:	b2dc      	uxtb	r4, r3
 80179da:	f107 0308 	add.w	r3, r7, #8
 80179de:	4618      	mov	r0, r3
 80179e0:	f7f4 f953 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 80179e4:	f107 0310 	add.w	r3, r7, #16
 80179e8:	4618      	mov	r0, r3
 80179ea:	f004 fae5 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
 80179ee:	4623      	mov	r3, r4
}
 80179f0:	4618      	mov	r0, r3
 80179f2:	374c      	adds	r7, #76	; 0x4c
 80179f4:	46bd      	mov	sp, r7
 80179f6:	bd90      	pop	{r4, r7, pc}

080179f8 <_ZN21MockCheckedActualCall8onObjectEPKv>:

MockActualCall& MockCheckedActualCall::onObject(const void* objectPtr)
{
 80179f8:	b590      	push	{r4, r7, lr}
 80179fa:	b095      	sub	sp, #84	; 0x54
 80179fc:	af02      	add	r7, sp, #8
 80179fe:	6078      	str	r0, [r7, #4]
 8017a00:	6039      	str	r1, [r7, #0]
    if(hasFailed()) {
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	33c0      	adds	r3, #192	; 0xc0
 8017a08:	681b      	ldr	r3, [r3, #0]
 8017a0a:	6878      	ldr	r0, [r7, #4]
 8017a0c:	4798      	blx	r3
 8017a0e:	4603      	mov	r3, r0
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	d001      	beq.n	8017a18 <_ZN21MockCheckedActualCall8onObjectEPKv+0x20>
        return *this;
 8017a14:	687c      	ldr	r4, [r7, #4]
 8017a16:	e053      	b.n	8017ac0 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    // Currently matching expectations are not discarded because the passed object
    // is ignored if not specifically set in the expectation

    potentiallyMatchingExpectations_.onlyKeepExpectationsOnObject(objectPtr);
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	331c      	adds	r3, #28
 8017a1c:	6839      	ldr	r1, [r7, #0]
 8017a1e:	4618      	mov	r0, r3
 8017a20:	f003 f8ca 	bl	801abb8 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>

    if ((!matchingExpectation_) && potentiallyMatchingExpectations_.isEmpty()) {
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	699b      	ldr	r3, [r3, #24]
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d109      	bne.n	8017a40 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	331c      	adds	r3, #28
 8017a30:	4618      	mov	r0, r3
 8017a32:	f002 fe20 	bl	801a676 <_ZNK21MockExpectedCallsList7isEmptyEv>
 8017a36:	4603      	mov	r3, r0
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d001      	beq.n	8017a40 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 8017a3c:	2301      	movs	r3, #1
 8017a3e:	e000      	b.n	8017a42 <_ZN21MockCheckedActualCall8onObjectEPKv+0x4a>
 8017a40:	2300      	movs	r3, #0
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	d02c      	beq.n	8017aa0 <_ZN21MockCheckedActualCall8onObjectEPKv+0xa8>
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	681b      	ldr	r3, [r3, #0]
 8017a4a:	33cc      	adds	r3, #204	; 0xcc
 8017a4c:	681b      	ldr	r3, [r3, #0]
 8017a4e:	6878      	ldr	r0, [r7, #4]
 8017a50:	4798      	blx	r3
 8017a52:	4604      	mov	r4, r0
 8017a54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017a58:	6879      	ldr	r1, [r7, #4]
 8017a5a:	4618      	mov	r0, r3
 8017a5c:	f7fe fd3f 	bl	80164de <_ZNK21MockCheckedActualCall7getNameEv>
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a64:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8017a68:	f107 000c 	add.w	r0, r7, #12
 8017a6c:	9300      	str	r3, [sp, #0]
 8017a6e:	683b      	ldr	r3, [r7, #0]
 8017a70:	4621      	mov	r1, r4
 8017a72:	f004 f9fb 	bl	801be6c <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>
 8017a76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017a7a:	4618      	mov	r0, r3
 8017a7c:	f7f4 f905 	bl	800bc8a <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	33dc      	adds	r3, #220	; 0xdc
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	f107 020c 	add.w	r2, r7, #12
 8017a8c:	4611      	mov	r1, r2
 8017a8e:	6878      	ldr	r0, [r7, #4]
 8017a90:	4798      	blx	r3
        return *this;
 8017a92:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 8017a94:	f107 030c 	add.w	r3, r7, #12
 8017a98:	4618      	mov	r0, r3
 8017a9a:	f000 ffa7 	bl	80189ec <_ZN27MockUnexpectedObjectFailureD1Ev>
 8017a9e:	e00f      	b.n	8017ac0 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    potentiallyMatchingExpectations_.wasPassedToObject();
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	331c      	adds	r3, #28
 8017aa4:	4618      	mov	r0, r3
 8017aa6:	f003 f9a7 	bl	801adf8 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>

    if (!matchingExpectation_) {
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	699b      	ldr	r3, [r3, #24]
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d105      	bne.n	8017abe <_ZN21MockCheckedActualCall8onObjectEPKv+0xc6>
        completeCallWhenMatchIsFound();
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	33d8      	adds	r3, #216	; 0xd8
 8017ab8:	681b      	ldr	r3, [r3, #0]
 8017aba:	6878      	ldr	r0, [r7, #4]
 8017abc:	4798      	blx	r3
    }

    return *this;
 8017abe:	687c      	ldr	r4, [r7, #4]
 8017ac0:	4623      	mov	r3, r4
}
 8017ac2:	4618      	mov	r0, r3
 8017ac4:	374c      	adds	r7, #76	; 0x4c
 8017ac6:	46bd      	mov	sp, r7
 8017ac8:	bd90      	pop	{r4, r7, pc}
	...

08017acc <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv>:

void MockCheckedActualCall::addOutputParameter(const SimpleString& name, const SimpleString& type, void* ptr)
{
 8017acc:	b590      	push	{r4, r7, lr}
 8017ace:	b087      	sub	sp, #28
 8017ad0:	af00      	add	r7, sp, #0
 8017ad2:	60f8      	str	r0, [r7, #12]
 8017ad4:	60b9      	str	r1, [r7, #8]
 8017ad6:	607a      	str	r2, [r7, #4]
 8017ad8:	603b      	str	r3, [r7, #0]
    MockOutputParametersListNode* newNode = new MockOutputParametersListNode(name, type, ptr);
 8017ada:	f240 2282 	movw	r2, #642	; 0x282
 8017ade:	4913      	ldr	r1, [pc, #76]	; (8017b2c <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x60>)
 8017ae0:	2018      	movs	r0, #24
 8017ae2:	f7f1 f957 	bl	8008d94 <_ZnwjPKci>
 8017ae6:	4604      	mov	r4, r0
 8017ae8:	683b      	ldr	r3, [r7, #0]
 8017aea:	687a      	ldr	r2, [r7, #4]
 8017aec:	68b9      	ldr	r1, [r7, #8]
 8017aee:	4620      	mov	r0, r4
 8017af0:	f7fe fa48 	bl	8015f84 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>
 8017af4:	613c      	str	r4, [r7, #16]

    if (outputParameterExpectations_ == NULLPTR)
 8017af6:	68fb      	ldr	r3, [r7, #12]
 8017af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d103      	bne.n	8017b06 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x3a>
        outputParameterExpectations_ = newNode;
 8017afe:	68fb      	ldr	r3, [r7, #12]
 8017b00:	693a      	ldr	r2, [r7, #16]
 8017b02:	629a      	str	r2, [r3, #40]	; 0x28
    else {
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
        while (lastNode->next_) lastNode = lastNode->next_;
        lastNode->next_ = newNode;
    }
}
 8017b04:	e00d      	b.n	8017b22 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x56>
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
 8017b06:	68fb      	ldr	r3, [r7, #12]
 8017b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017b0a:	617b      	str	r3, [r7, #20]
        while (lastNode->next_) lastNode = lastNode->next_;
 8017b0c:	697b      	ldr	r3, [r7, #20]
 8017b0e:	695b      	ldr	r3, [r3, #20]
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d003      	beq.n	8017b1c <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x50>
 8017b14:	697b      	ldr	r3, [r7, #20]
 8017b16:	695b      	ldr	r3, [r3, #20]
 8017b18:	617b      	str	r3, [r7, #20]
 8017b1a:	e7f7      	b.n	8017b0c <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x40>
        lastNode->next_ = newNode;
 8017b1c:	697b      	ldr	r3, [r7, #20]
 8017b1e:	693a      	ldr	r2, [r7, #16]
 8017b20:	615a      	str	r2, [r3, #20]
}
 8017b22:	bf00      	nop
 8017b24:	371c      	adds	r7, #28
 8017b26:	46bd      	mov	sp, r7
 8017b28:	bd90      	pop	{r4, r7, pc}
 8017b2a:	bf00      	nop
 8017b2c:	080244f4 	.word	0x080244f4

08017b30 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>:
    class MockOutputParametersListNode
 8017b30:	b580      	push	{r7, lr}
 8017b32:	b082      	sub	sp, #8
 8017b34:	af00      	add	r7, sp, #0
 8017b36:	6078      	str	r0, [r7, #4]
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	3308      	adds	r3, #8
 8017b3c:	4618      	mov	r0, r3
 8017b3e:	f7f4 f8a4 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	4618      	mov	r0, r3
 8017b46:	f7f4 f8a0 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	4618      	mov	r0, r3
 8017b4e:	3708      	adds	r7, #8
 8017b50:	46bd      	mov	sp, r7
 8017b52:	bd80      	pop	{r7, pc}

08017b54 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>:

void MockCheckedActualCall::cleanUpOutputParameterList()
{
 8017b54:	b590      	push	{r4, r7, lr}
 8017b56:	b085      	sub	sp, #20
 8017b58:	af00      	add	r7, sp, #0
 8017b5a:	6078      	str	r0, [r7, #4]
    MockOutputParametersListNode* current = outputParameterExpectations_;
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017b60:	60fb      	str	r3, [r7, #12]
    MockOutputParametersListNode* toBeDeleted = NULLPTR;
 8017b62:	2300      	movs	r3, #0
 8017b64:	60bb      	str	r3, [r7, #8]

    while (current) {
 8017b66:	68fb      	ldr	r3, [r7, #12]
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d012      	beq.n	8017b92 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x3e>
        toBeDeleted = current;
 8017b6c:	68fb      	ldr	r3, [r7, #12]
 8017b6e:	60bb      	str	r3, [r7, #8]
        outputParameterExpectations_ = current = current->next_;
 8017b70:	68fb      	ldr	r3, [r7, #12]
 8017b72:	695b      	ldr	r3, [r3, #20]
 8017b74:	60fb      	str	r3, [r7, #12]
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	68fa      	ldr	r2, [r7, #12]
 8017b7a:	629a      	str	r2, [r3, #40]	; 0x28
        delete toBeDeleted;
 8017b7c:	68bc      	ldr	r4, [r7, #8]
 8017b7e:	2c00      	cmp	r4, #0
 8017b80:	d0f1      	beq.n	8017b66 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
 8017b82:	4620      	mov	r0, r4
 8017b84:	f7ff ffd4 	bl	8017b30 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>
 8017b88:	2118      	movs	r1, #24
 8017b8a:	4620      	mov	r0, r4
 8017b8c:	f7f1 f916 	bl	8008dbc <_ZdlPvj>
    while (current) {
 8017b90:	e7e9      	b.n	8017b66 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
    }
}
 8017b92:	bf00      	nop
 8017b94:	3714      	adds	r7, #20
 8017b96:	46bd      	mov	sp, r7
 8017b98:	bd90      	pop	{r4, r7, pc}
	...

08017b9c <_ZN19MockActualCallTraceC1Ev>:


MockActualCallTrace::MockActualCallTrace()
 8017b9c:	b580      	push	{r7, lr}
 8017b9e:	b082      	sub	sp, #8
 8017ba0:	af00      	add	r7, sp, #0
 8017ba2:	6078      	str	r0, [r7, #4]
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	4618      	mov	r0, r3
 8017ba8:	f7fe fc6a 	bl	8016480 <_ZN14MockActualCallC1Ev>
 8017bac:	4a06      	ldr	r2, [pc, #24]	; (8017bc8 <_ZN19MockActualCallTraceC1Ev+0x2c>)
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	601a      	str	r2, [r3, #0]
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	3304      	adds	r3, #4
 8017bb6:	4905      	ldr	r1, [pc, #20]	; (8017bcc <_ZN19MockActualCallTraceC1Ev+0x30>)
 8017bb8:	4618      	mov	r0, r3
 8017bba:	f7f3 fcae 	bl	800b51a <_ZN12SimpleStringC1EPKc>
{
}
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	4618      	mov	r0, r3
 8017bc2:	3708      	adds	r7, #8
 8017bc4:	46bd      	mov	sp, r7
 8017bc6:	bd80      	pop	{r7, pc}
 8017bc8:	08026cc0 	.word	0x08026cc0
 8017bcc:	080244dc 	.word	0x080244dc

08017bd0 <_ZN19MockActualCallTraceD1Ev>:

MockActualCallTrace::~MockActualCallTrace()
 8017bd0:	b580      	push	{r7, lr}
 8017bd2:	b082      	sub	sp, #8
 8017bd4:	af00      	add	r7, sp, #0
 8017bd6:	6078      	str	r0, [r7, #4]
 8017bd8:	4a08      	ldr	r2, [pc, #32]	; (8017bfc <_ZN19MockActualCallTraceD1Ev+0x2c>)
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	601a      	str	r2, [r3, #0]
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	3304      	adds	r3, #4
 8017be2:	4618      	mov	r0, r3
 8017be4:	f7f4 f851 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	4618      	mov	r0, r3
 8017bec:	f7fe fc58 	bl	80164a0 <_ZN14MockActualCallD1Ev>
{
}
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	4618      	mov	r0, r3
 8017bf4:	3708      	adds	r7, #8
 8017bf6:	46bd      	mov	sp, r7
 8017bf8:	bd80      	pop	{r7, pc}
 8017bfa:	bf00      	nop
 8017bfc:	08026cc0 	.word	0x08026cc0

08017c00 <_ZN19MockActualCallTraceD0Ev>:
MockActualCallTrace::~MockActualCallTrace()
 8017c00:	b580      	push	{r7, lr}
 8017c02:	b082      	sub	sp, #8
 8017c04:	af00      	add	r7, sp, #0
 8017c06:	6078      	str	r0, [r7, #4]
}
 8017c08:	6878      	ldr	r0, [r7, #4]
 8017c0a:	f7ff ffe1 	bl	8017bd0 <_ZN19MockActualCallTraceD1Ev>
 8017c0e:	210c      	movs	r1, #12
 8017c10:	6878      	ldr	r0, [r7, #4]
 8017c12:	f7f1 f8d3 	bl	8008dbc <_ZdlPvj>
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	4618      	mov	r0, r3
 8017c1a:	3708      	adds	r7, #8
 8017c1c:	46bd      	mov	sp, r7
 8017c1e:	bd80      	pop	{r7, pc}

08017c20 <_ZN19MockActualCallTrace8withNameERK12SimpleString>:

MockActualCall& MockActualCallTrace::withName(const SimpleString& name)
{
 8017c20:	b580      	push	{r7, lr}
 8017c22:	b082      	sub	sp, #8
 8017c24:	af00      	add	r7, sp, #0
 8017c26:	6078      	str	r0, [r7, #4]
 8017c28:	6039      	str	r1, [r7, #0]
    traceBuffer_ += "\nFunction name:";
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	3304      	adds	r3, #4
 8017c2e:	4907      	ldr	r1, [pc, #28]	; (8017c4c <_ZN19MockActualCallTrace8withNameERK12SimpleString+0x2c>)
 8017c30:	4618      	mov	r0, r3
 8017c32:	f7f4 f8b9 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	3304      	adds	r3, #4
 8017c3a:	6839      	ldr	r1, [r7, #0]
 8017c3c:	4618      	mov	r0, r3
 8017c3e:	f7f4 f8a1 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
    return *this;
 8017c42:	687b      	ldr	r3, [r7, #4]
}
 8017c44:	4618      	mov	r0, r3
 8017c46:	3708      	adds	r7, #8
 8017c48:	46bd      	mov	sp, r7
 8017c4a:	bd80      	pop	{r7, pc}
 8017c4c:	080245e8 	.word	0x080245e8

08017c50 <_ZN19MockActualCallTrace13withCallOrderEj>:

MockActualCall& MockActualCallTrace::withCallOrder(unsigned int callOrder)
{
 8017c50:	b590      	push	{r4, r7, lr}
 8017c52:	b085      	sub	sp, #20
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	6078      	str	r0, [r7, #4]
 8017c58:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " withCallOrder:";
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	3304      	adds	r3, #4
 8017c5e:	490e      	ldr	r1, [pc, #56]	; (8017c98 <_ZN19MockActualCallTrace13withCallOrderEj+0x48>)
 8017c60:	4618      	mov	r0, r3
 8017c62:	f7f4 f8a1 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(callOrder);
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	1d1c      	adds	r4, r3, #4
 8017c6a:	f107 0308 	add.w	r3, r7, #8
 8017c6e:	6839      	ldr	r1, [r7, #0]
 8017c70:	4618      	mov	r0, r3
 8017c72:	f7f4 fd39 	bl	800c6e8 <_Z10StringFromj>
 8017c76:	f107 0308 	add.w	r3, r7, #8
 8017c7a:	4619      	mov	r1, r3
 8017c7c:	4620      	mov	r0, r4
 8017c7e:	f7f4 f881 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 8017c82:	f107 0308 	add.w	r3, r7, #8
 8017c86:	4618      	mov	r0, r3
 8017c88:	f7f3 ffff 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    return *this;
 8017c8c:	687b      	ldr	r3, [r7, #4]
}
 8017c8e:	4618      	mov	r0, r3
 8017c90:	3714      	adds	r7, #20
 8017c92:	46bd      	mov	sp, r7
 8017c94:	bd90      	pop	{r4, r7, pc}
 8017c96:	bf00      	nop
 8017c98:	080245f8 	.word	0x080245f8

08017c9c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>:

void MockActualCallTrace::addParameterName(const SimpleString& name)
{
 8017c9c:	b580      	push	{r7, lr}
 8017c9e:	b082      	sub	sp, #8
 8017ca0:	af00      	add	r7, sp, #0
 8017ca2:	6078      	str	r0, [r7, #4]
 8017ca4:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " ";
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	3304      	adds	r3, #4
 8017caa:	490a      	ldr	r1, [pc, #40]	; (8017cd4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x38>)
 8017cac:	4618      	mov	r0, r3
 8017cae:	f7f4 f87b 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	3304      	adds	r3, #4
 8017cb6:	6839      	ldr	r1, [r7, #0]
 8017cb8:	4618      	mov	r0, r3
 8017cba:	f7f4 f863 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
    traceBuffer_ += ":";
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	3304      	adds	r3, #4
 8017cc2:	4905      	ldr	r1, [pc, #20]	; (8017cd8 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x3c>)
 8017cc4:	4618      	mov	r0, r3
 8017cc6:	f7f4 f86f 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
}
 8017cca:	bf00      	nop
 8017ccc:	3708      	adds	r7, #8
 8017cce:	46bd      	mov	sp, r7
 8017cd0:	bd80      	pop	{r7, pc}
 8017cd2:	bf00      	nop
 8017cd4:	08024608 	.word	0x08024608
 8017cd8:	0802460c 	.word	0x0802460c

08017cdc <_ZN19MockActualCallTrace17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockActualCallTrace::withBoolParameter(const SimpleString& name, bool value)
{
 8017cdc:	b590      	push	{r4, r7, lr}
 8017cde:	b087      	sub	sp, #28
 8017ce0:	af00      	add	r7, sp, #0
 8017ce2:	60f8      	str	r0, [r7, #12]
 8017ce4:	60b9      	str	r1, [r7, #8]
 8017ce6:	4613      	mov	r3, r2
 8017ce8:	71fb      	strb	r3, [r7, #7]
    addParameterName(name);
 8017cea:	68b9      	ldr	r1, [r7, #8]
 8017cec:	68f8      	ldr	r0, [r7, #12]
 8017cee:	f7ff ffd5 	bl	8017c9c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8017cf2:	68fb      	ldr	r3, [r7, #12]
 8017cf4:	1d1c      	adds	r4, r3, #4
 8017cf6:	f107 0310 	add.w	r3, r7, #16
 8017cfa:	79fa      	ldrb	r2, [r7, #7]
 8017cfc:	4611      	mov	r1, r2
 8017cfe:	4618      	mov	r0, r3
 8017d00:	f7f4 fa34 	bl	800c16c <_Z10StringFromb>
 8017d04:	f107 0310 	add.w	r3, r7, #16
 8017d08:	4619      	mov	r1, r3
 8017d0a:	4620      	mov	r0, r4
 8017d0c:	f7f4 f83a 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 8017d10:	f107 0310 	add.w	r3, r7, #16
 8017d14:	4618      	mov	r0, r3
 8017d16:	f7f3 ffb8 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    return *this;
 8017d1a:	68fb      	ldr	r3, [r7, #12]
}
 8017d1c:	4618      	mov	r0, r3
 8017d1e:	371c      	adds	r7, #28
 8017d20:	46bd      	mov	sp, r7
 8017d22:	bd90      	pop	{r4, r7, pc}

08017d24 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockActualCallTrace::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 8017d24:	b590      	push	{r4, r7, lr}
 8017d26:	b08f      	sub	sp, #60	; 0x3c
 8017d28:	af00      	add	r7, sp, #0
 8017d2a:	60f8      	str	r0, [r7, #12]
 8017d2c:	60b9      	str	r1, [r7, #8]
 8017d2e:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8017d30:	68b9      	ldr	r1, [r7, #8]
 8017d32:	68f8      	ldr	r0, [r7, #12]
 8017d34:	f7ff ffb2 	bl	8017c9c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	1d1c      	adds	r4, r3, #4
 8017d3c:	f107 0320 	add.w	r3, r7, #32
 8017d40:	6879      	ldr	r1, [r7, #4]
 8017d42:	4618      	mov	r0, r3
 8017d44:	f7f4 fcd0 	bl	800c6e8 <_Z10StringFromj>
 8017d48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017d4c:	491f      	ldr	r1, [pc, #124]	; (8017dcc <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj+0xa8>)
 8017d4e:	4618      	mov	r0, r3
 8017d50:	f7f3 fbe3 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8017d54:	f107 0318 	add.w	r3, r7, #24
 8017d58:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8017d5c:	f107 0120 	add.w	r1, r7, #32
 8017d60:	4618      	mov	r0, r3
 8017d62:	f7f3 fff4 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 8017d66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017d6a:	6879      	ldr	r1, [r7, #4]
 8017d6c:	4618      	mov	r0, r3
 8017d6e:	f7f4 fb5f 	bl	800c430 <_Z30BracketsFormattedHexStringFromj>
 8017d72:	f107 0310 	add.w	r3, r7, #16
 8017d76:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8017d7a:	f107 0118 	add.w	r1, r7, #24
 8017d7e:	4618      	mov	r0, r3
 8017d80:	f7f3 ffe5 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 8017d84:	f107 0310 	add.w	r3, r7, #16
 8017d88:	4619      	mov	r1, r3
 8017d8a:	4620      	mov	r0, r4
 8017d8c:	f7f3 fffa 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 8017d90:	f107 0310 	add.w	r3, r7, #16
 8017d94:	4618      	mov	r0, r3
 8017d96:	f7f3 ff78 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8017d9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017d9e:	4618      	mov	r0, r3
 8017da0:	f7f3 ff73 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8017da4:	f107 0318 	add.w	r3, r7, #24
 8017da8:	4618      	mov	r0, r3
 8017daa:	f7f3 ff6e 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8017dae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017db2:	4618      	mov	r0, r3
 8017db4:	f7f3 ff69 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8017db8:	f107 0320 	add.w	r3, r7, #32
 8017dbc:	4618      	mov	r0, r3
 8017dbe:	f7f3 ff64 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    return *this;
 8017dc2:	68fb      	ldr	r3, [r7, #12]
}
 8017dc4:	4618      	mov	r0, r3
 8017dc6:	373c      	adds	r7, #60	; 0x3c
 8017dc8:	46bd      	mov	sp, r7
 8017dca:	bd90      	pop	{r4, r7, pc}
 8017dcc:	08024608 	.word	0x08024608

08017dd0 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi>:

MockActualCall& MockActualCallTrace::withIntParameter(const SimpleString& name, int value)
{
 8017dd0:	b590      	push	{r4, r7, lr}
 8017dd2:	b08f      	sub	sp, #60	; 0x3c
 8017dd4:	af00      	add	r7, sp, #0
 8017dd6:	60f8      	str	r0, [r7, #12]
 8017dd8:	60b9      	str	r1, [r7, #8]
 8017dda:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8017ddc:	68b9      	ldr	r1, [r7, #8]
 8017dde:	68f8      	ldr	r0, [r7, #12]
 8017de0:	f7ff ff5c 	bl	8017c9c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8017de4:	68fb      	ldr	r3, [r7, #12]
 8017de6:	1d1c      	adds	r4, r3, #4
 8017de8:	f107 0320 	add.w	r3, r7, #32
 8017dec:	6879      	ldr	r1, [r7, #4]
 8017dee:	4618      	mov	r0, r3
 8017df0:	f7f4 fa12 	bl	800c218 <_Z10StringFromi>
 8017df4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017df8:	491f      	ldr	r1, [pc, #124]	; (8017e78 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi+0xa8>)
 8017dfa:	4618      	mov	r0, r3
 8017dfc:	f7f3 fb8d 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8017e00:	f107 0318 	add.w	r3, r7, #24
 8017e04:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8017e08:	f107 0120 	add.w	r1, r7, #32
 8017e0c:	4618      	mov	r0, r3
 8017e0e:	f7f3 ff9e 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 8017e12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017e16:	6879      	ldr	r1, [r7, #4]
 8017e18:	4618      	mov	r0, r3
 8017e1a:	f7f4 faed 	bl	800c3f8 <_Z30BracketsFormattedHexStringFromi>
 8017e1e:	f107 0310 	add.w	r3, r7, #16
 8017e22:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8017e26:	f107 0118 	add.w	r1, r7, #24
 8017e2a:	4618      	mov	r0, r3
 8017e2c:	f7f3 ff8f 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 8017e30:	f107 0310 	add.w	r3, r7, #16
 8017e34:	4619      	mov	r1, r3
 8017e36:	4620      	mov	r0, r4
 8017e38:	f7f3 ffa4 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 8017e3c:	f107 0310 	add.w	r3, r7, #16
 8017e40:	4618      	mov	r0, r3
 8017e42:	f7f3 ff22 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8017e46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017e4a:	4618      	mov	r0, r3
 8017e4c:	f7f3 ff1d 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8017e50:	f107 0318 	add.w	r3, r7, #24
 8017e54:	4618      	mov	r0, r3
 8017e56:	f7f3 ff18 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8017e5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017e5e:	4618      	mov	r0, r3
 8017e60:	f7f3 ff13 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8017e64:	f107 0320 	add.w	r3, r7, #32
 8017e68:	4618      	mov	r0, r3
 8017e6a:	f7f3 ff0e 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    return *this;
 8017e6e:	68fb      	ldr	r3, [r7, #12]
}
 8017e70:	4618      	mov	r0, r3
 8017e72:	373c      	adds	r7, #60	; 0x3c
 8017e74:	46bd      	mov	sp, r7
 8017e76:	bd90      	pop	{r4, r7, pc}
 8017e78:	08024608 	.word	0x08024608

08017e7c <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockActualCallTrace::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8017e7c:	b590      	push	{r4, r7, lr}
 8017e7e:	b08f      	sub	sp, #60	; 0x3c
 8017e80:	af00      	add	r7, sp, #0
 8017e82:	60f8      	str	r0, [r7, #12]
 8017e84:	60b9      	str	r1, [r7, #8]
 8017e86:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8017e88:	68b9      	ldr	r1, [r7, #8]
 8017e8a:	68f8      	ldr	r0, [r7, #12]
 8017e8c:	f7ff ff06 	bl	8017c9c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8017e90:	68fb      	ldr	r3, [r7, #12]
 8017e92:	1d1c      	adds	r4, r3, #4
 8017e94:	f107 0320 	add.w	r3, r7, #32
 8017e98:	6879      	ldr	r1, [r7, #4]
 8017e9a:	4618      	mov	r0, r3
 8017e9c:	f7f4 fc36 	bl	800c70c <_Z10StringFromm>
 8017ea0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017ea4:	491f      	ldr	r1, [pc, #124]	; (8017f24 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm+0xa8>)
 8017ea6:	4618      	mov	r0, r3
 8017ea8:	f7f3 fb37 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8017eac:	f107 0318 	add.w	r3, r7, #24
 8017eb0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8017eb4:	f107 0120 	add.w	r1, r7, #32
 8017eb8:	4618      	mov	r0, r3
 8017eba:	f7f3 ff48 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 8017ebe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017ec2:	6879      	ldr	r1, [r7, #4]
 8017ec4:	4618      	mov	r0, r3
 8017ec6:	f7f4 faeb 	bl	800c4a0 <_Z30BracketsFormattedHexStringFromm>
 8017eca:	f107 0310 	add.w	r3, r7, #16
 8017ece:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8017ed2:	f107 0118 	add.w	r1, r7, #24
 8017ed6:	4618      	mov	r0, r3
 8017ed8:	f7f3 ff39 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 8017edc:	f107 0310 	add.w	r3, r7, #16
 8017ee0:	4619      	mov	r1, r3
 8017ee2:	4620      	mov	r0, r4
 8017ee4:	f7f3 ff4e 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 8017ee8:	f107 0310 	add.w	r3, r7, #16
 8017eec:	4618      	mov	r0, r3
 8017eee:	f7f3 fecc 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8017ef2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017ef6:	4618      	mov	r0, r3
 8017ef8:	f7f3 fec7 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8017efc:	f107 0318 	add.w	r3, r7, #24
 8017f00:	4618      	mov	r0, r3
 8017f02:	f7f3 fec2 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8017f06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017f0a:	4618      	mov	r0, r3
 8017f0c:	f7f3 febd 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8017f10:	f107 0320 	add.w	r3, r7, #32
 8017f14:	4618      	mov	r0, r3
 8017f16:	f7f3 feb8 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    return *this;
 8017f1a:	68fb      	ldr	r3, [r7, #12]
}
 8017f1c:	4618      	mov	r0, r3
 8017f1e:	373c      	adds	r7, #60	; 0x3c
 8017f20:	46bd      	mov	sp, r7
 8017f22:	bd90      	pop	{r4, r7, pc}
 8017f24:	08024608 	.word	0x08024608

08017f28 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockActualCallTrace::withLongIntParameter(const SimpleString& name, long int value)
{
 8017f28:	b590      	push	{r4, r7, lr}
 8017f2a:	b08f      	sub	sp, #60	; 0x3c
 8017f2c:	af00      	add	r7, sp, #0
 8017f2e:	60f8      	str	r0, [r7, #12]
 8017f30:	60b9      	str	r1, [r7, #8]
 8017f32:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8017f34:	68b9      	ldr	r1, [r7, #8]
 8017f36:	68f8      	ldr	r0, [r7, #12]
 8017f38:	f7ff feb0 	bl	8017c9c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8017f3c:	68fb      	ldr	r3, [r7, #12]
 8017f3e:	1d1c      	adds	r4, r3, #4
 8017f40:	f107 0320 	add.w	r3, r7, #32
 8017f44:	6879      	ldr	r1, [r7, #4]
 8017f46:	4618      	mov	r0, r3
 8017f48:	f7f4 f978 	bl	800c23c <_Z10StringFroml>
 8017f4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017f50:	491f      	ldr	r1, [pc, #124]	; (8017fd0 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl+0xa8>)
 8017f52:	4618      	mov	r0, r3
 8017f54:	f7f3 fae1 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8017f58:	f107 0318 	add.w	r3, r7, #24
 8017f5c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8017f60:	f107 0120 	add.w	r1, r7, #32
 8017f64:	4618      	mov	r0, r3
 8017f66:	f7f3 fef2 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 8017f6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017f6e:	6879      	ldr	r1, [r7, #4]
 8017f70:	4618      	mov	r0, r3
 8017f72:	f7f4 fa79 	bl	800c468 <_Z30BracketsFormattedHexStringFroml>
 8017f76:	f107 0310 	add.w	r3, r7, #16
 8017f7a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8017f7e:	f107 0118 	add.w	r1, r7, #24
 8017f82:	4618      	mov	r0, r3
 8017f84:	f7f3 fee3 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 8017f88:	f107 0310 	add.w	r3, r7, #16
 8017f8c:	4619      	mov	r1, r3
 8017f8e:	4620      	mov	r0, r4
 8017f90:	f7f3 fef8 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 8017f94:	f107 0310 	add.w	r3, r7, #16
 8017f98:	4618      	mov	r0, r3
 8017f9a:	f7f3 fe76 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8017f9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017fa2:	4618      	mov	r0, r3
 8017fa4:	f7f3 fe71 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8017fa8:	f107 0318 	add.w	r3, r7, #24
 8017fac:	4618      	mov	r0, r3
 8017fae:	f7f3 fe6c 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8017fb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017fb6:	4618      	mov	r0, r3
 8017fb8:	f7f3 fe67 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8017fbc:	f107 0320 	add.w	r3, r7, #32
 8017fc0:	4618      	mov	r0, r3
 8017fc2:	f7f3 fe62 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    return *this;
 8017fc6:	68fb      	ldr	r3, [r7, #12]
}
 8017fc8:	4618      	mov	r0, r3
 8017fca:	373c      	adds	r7, #60	; 0x3c
 8017fcc:	46bd      	mov	sp, r7
 8017fce:	bd90      	pop	{r4, r7, pc}
 8017fd0:	08024608 	.word	0x08024608

08017fd4 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockActualCallTrace::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8017fd4:	b5b0      	push	{r4, r5, r7, lr}
 8017fd6:	b086      	sub	sp, #24
 8017fd8:	af02      	add	r7, sp, #8
 8017fda:	60f8      	str	r0, [r7, #12]
 8017fdc:	60b9      	str	r1, [r7, #8]
 8017fde:	4639      	mov	r1, r7
 8017fe0:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8017fe4:	f7fa fe7c 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 8017fe8:	4604      	mov	r4, r0
 8017fea:	6823      	ldr	r3, [r4, #0]
 8017fec:	3368      	adds	r3, #104	; 0x68
 8017fee:	681d      	ldr	r5, [r3, #0]
 8017ff0:	f7fa fe86 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017ff4:	4603      	mov	r3, r0
 8017ff6:	9300      	str	r3, [sp, #0]
 8017ff8:	f240 23ee 	movw	r3, #750	; 0x2ee
 8017ffc:	4a04      	ldr	r2, [pc, #16]	; (8018010 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 8017ffe:	4905      	ldr	r1, [pc, #20]	; (8018014 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 8018000:	4620      	mov	r0, r4
 8018002:	47a8      	blx	r5
    return *this;
 8018004:	68fb      	ldr	r3, [r7, #12]
}
 8018006:	4618      	mov	r0, r3
 8018008:	3710      	adds	r7, #16
 801800a:	46bd      	mov	sp, r7
 801800c:	bdb0      	pop	{r4, r5, r7, pc}
 801800e:	bf00      	nop
 8018010:	080244f4 	.word	0x080244f4
 8018014:	08024510 	.word	0x08024510

08018018 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockActualCallTrace::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8018018:	b5b0      	push	{r4, r5, r7, lr}
 801801a:	b086      	sub	sp, #24
 801801c:	af02      	add	r7, sp, #8
 801801e:	60f8      	str	r0, [r7, #12]
 8018020:	60b9      	str	r1, [r7, #8]
 8018022:	4639      	mov	r1, r7
 8018024:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8018028:	f7fa fe5a 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 801802c:	4604      	mov	r4, r0
 801802e:	6823      	ldr	r3, [r4, #0]
 8018030:	3368      	adds	r3, #104	; 0x68
 8018032:	681d      	ldr	r5, [r3, #0]
 8018034:	f7fa fe64 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018038:	4603      	mov	r3, r0
 801803a:	9300      	str	r3, [sp, #0]
 801803c:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 8018040:	4a04      	ldr	r2, [pc, #16]	; (8018054 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 8018042:	4905      	ldr	r1, [pc, #20]	; (8018058 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 8018044:	4620      	mov	r0, r4
 8018046:	47a8      	blx	r5
    return *this;
 8018048:	68fb      	ldr	r3, [r7, #12]
}
 801804a:	4618      	mov	r0, r3
 801804c:	3710      	adds	r7, #16
 801804e:	46bd      	mov	sp, r7
 8018050:	bdb0      	pop	{r4, r5, r7, pc}
 8018052:	bf00      	nop
 8018054:	080244f4 	.word	0x080244f4
 8018058:	0802453c 	.word	0x0802453c

0801805c <_ZN19MockActualCallTrace19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockActualCallTrace::withDoubleParameter(const SimpleString& name, double value)
{
 801805c:	b590      	push	{r4, r7, lr}
 801805e:	b087      	sub	sp, #28
 8018060:	af00      	add	r7, sp, #0
 8018062:	60f8      	str	r0, [r7, #12]
 8018064:	60b9      	str	r1, [r7, #8]
 8018066:	ed87 0b00 	vstr	d0, [r7]
    addParameterName(name);
 801806a:	68b9      	ldr	r1, [r7, #8]
 801806c:	68f8      	ldr	r0, [r7, #12]
 801806e:	f7ff fe15 	bl	8017c9c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8018072:	68fb      	ldr	r3, [r7, #12]
 8018074:	1d1c      	adds	r4, r3, #4
 8018076:	f107 0310 	add.w	r3, r7, #16
 801807a:	2106      	movs	r1, #6
 801807c:	ed97 0b00 	vldr	d0, [r7]
 8018080:	4618      	mov	r0, r3
 8018082:	f7f4 fac7 	bl	800c614 <_Z10StringFromdi>
 8018086:	f107 0310 	add.w	r3, r7, #16
 801808a:	4619      	mov	r1, r3
 801808c:	4620      	mov	r0, r4
 801808e:	f7f3 fe79 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 8018092:	f107 0310 	add.w	r3, r7, #16
 8018096:	4618      	mov	r0, r3
 8018098:	f7f3 fdf7 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    return *this;
 801809c:	68fb      	ldr	r3, [r7, #12]
}
 801809e:	4618      	mov	r0, r3
 80180a0:	371c      	adds	r7, #28
 80180a2:	46bd      	mov	sp, r7
 80180a4:	bd90      	pop	{r4, r7, pc}

080180a6 <_ZN19MockActualCallTrace19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockActualCallTrace::withStringParameter(const SimpleString& name, const char* value)
{
 80180a6:	b590      	push	{r4, r7, lr}
 80180a8:	b087      	sub	sp, #28
 80180aa:	af00      	add	r7, sp, #0
 80180ac:	60f8      	str	r0, [r7, #12]
 80180ae:	60b9      	str	r1, [r7, #8]
 80180b0:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80180b2:	68b9      	ldr	r1, [r7, #8]
 80180b4:	68f8      	ldr	r0, [r7, #12]
 80180b6:	f7ff fdf1 	bl	8017c9c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80180ba:	68fb      	ldr	r3, [r7, #12]
 80180bc:	1d1c      	adds	r4, r3, #4
 80180be:	f107 0310 	add.w	r3, r7, #16
 80180c2:	6879      	ldr	r1, [r7, #4]
 80180c4:	4618      	mov	r0, r3
 80180c6:	f7f4 f86d 	bl	800c1a4 <_Z10StringFromPKc>
 80180ca:	f107 0310 	add.w	r3, r7, #16
 80180ce:	4619      	mov	r1, r3
 80180d0:	4620      	mov	r0, r4
 80180d2:	f7f3 fe57 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 80180d6:	f107 0310 	add.w	r3, r7, #16
 80180da:	4618      	mov	r0, r3
 80180dc:	f7f3 fdd5 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    return *this;
 80180e0:	68fb      	ldr	r3, [r7, #12]
}
 80180e2:	4618      	mov	r0, r3
 80180e4:	371c      	adds	r7, #28
 80180e6:	46bd      	mov	sp, r7
 80180e8:	bd90      	pop	{r4, r7, pc}

080180ea <_ZN19MockActualCallTrace20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withPointerParameter(const SimpleString& name, void* value)
{
 80180ea:	b590      	push	{r4, r7, lr}
 80180ec:	b087      	sub	sp, #28
 80180ee:	af00      	add	r7, sp, #0
 80180f0:	60f8      	str	r0, [r7, #12]
 80180f2:	60b9      	str	r1, [r7, #8]
 80180f4:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80180f6:	68b9      	ldr	r1, [r7, #8]
 80180f8:	68f8      	ldr	r0, [r7, #12]
 80180fa:	f7ff fdcf 	bl	8017c9c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80180fe:	68fb      	ldr	r3, [r7, #12]
 8018100:	1d1c      	adds	r4, r3, #4
 8018102:	f107 0310 	add.w	r3, r7, #16
 8018106:	6879      	ldr	r1, [r7, #4]
 8018108:	4618      	mov	r0, r3
 801810a:	f7f4 f8a9 	bl	800c260 <_Z10StringFromPKv>
 801810e:	f107 0310 	add.w	r3, r7, #16
 8018112:	4619      	mov	r1, r3
 8018114:	4620      	mov	r0, r4
 8018116:	f7f3 fe35 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 801811a:	f107 0310 	add.w	r3, r7, #16
 801811e:	4618      	mov	r0, r3
 8018120:	f7f3 fdb3 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    return *this;
 8018124:	68fb      	ldr	r3, [r7, #12]
}
 8018126:	4618      	mov	r0, r3
 8018128:	371c      	adds	r7, #28
 801812a:	46bd      	mov	sp, r7
 801812c:	bd90      	pop	{r4, r7, pc}

0801812e <_ZN19MockActualCallTrace25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockActualCallTrace::withConstPointerParameter(const SimpleString& name, const void* value)
{
 801812e:	b590      	push	{r4, r7, lr}
 8018130:	b087      	sub	sp, #28
 8018132:	af00      	add	r7, sp, #0
 8018134:	60f8      	str	r0, [r7, #12]
 8018136:	60b9      	str	r1, [r7, #8]
 8018138:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801813a:	68b9      	ldr	r1, [r7, #8]
 801813c:	68f8      	ldr	r0, [r7, #12]
 801813e:	f7ff fdad 	bl	8017c9c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8018142:	68fb      	ldr	r3, [r7, #12]
 8018144:	1d1c      	adds	r4, r3, #4
 8018146:	f107 0310 	add.w	r3, r7, #16
 801814a:	6879      	ldr	r1, [r7, #4]
 801814c:	4618      	mov	r0, r3
 801814e:	f7f4 f887 	bl	800c260 <_Z10StringFromPKv>
 8018152:	f107 0310 	add.w	r3, r7, #16
 8018156:	4619      	mov	r1, r3
 8018158:	4620      	mov	r0, r4
 801815a:	f7f3 fe13 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 801815e:	f107 0310 	add.w	r3, r7, #16
 8018162:	4618      	mov	r0, r3
 8018164:	f7f3 fd91 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    return *this;
 8018168:	68fb      	ldr	r3, [r7, #12]
}
 801816a:	4618      	mov	r0, r3
 801816c:	371c      	adds	r7, #28
 801816e:	46bd      	mov	sp, r7
 8018170:	bd90      	pop	{r4, r7, pc}

08018172 <_ZN19MockActualCallTrace28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockActualCallTrace::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 8018172:	b590      	push	{r4, r7, lr}
 8018174:	b087      	sub	sp, #28
 8018176:	af00      	add	r7, sp, #0
 8018178:	60f8      	str	r0, [r7, #12]
 801817a:	60b9      	str	r1, [r7, #8]
 801817c:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801817e:	68b9      	ldr	r1, [r7, #8]
 8018180:	68f8      	ldr	r0, [r7, #12]
 8018182:	f7ff fd8b 	bl	8017c9c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8018186:	68fb      	ldr	r3, [r7, #12]
 8018188:	1d1c      	adds	r4, r3, #4
 801818a:	f107 0310 	add.w	r3, r7, #16
 801818e:	6879      	ldr	r1, [r7, #4]
 8018190:	4618      	mov	r0, r3
 8018192:	f7f4 f88f 	bl	800c2b4 <_Z10StringFromPFvvE>
 8018196:	f107 0310 	add.w	r3, r7, #16
 801819a:	4619      	mov	r1, r3
 801819c:	4620      	mov	r0, r4
 801819e:	f7f3 fdf1 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 80181a2:	f107 0310 	add.w	r3, r7, #16
 80181a6:	4618      	mov	r0, r3
 80181a8:	f7f3 fd6f 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    return *this;
 80181ac:	68fb      	ldr	r3, [r7, #12]
}
 80181ae:	4618      	mov	r0, r3
 80181b0:	371c      	adds	r7, #28
 80181b2:	46bd      	mov	sp, r7
 80181b4:	bd90      	pop	{r4, r7, pc}

080181b6 <_ZN19MockActualCallTrace25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockActualCallTrace::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 80181b6:	b590      	push	{r4, r7, lr}
 80181b8:	b087      	sub	sp, #28
 80181ba:	af00      	add	r7, sp, #0
 80181bc:	60f8      	str	r0, [r7, #12]
 80181be:	60b9      	str	r1, [r7, #8]
 80181c0:	607a      	str	r2, [r7, #4]
 80181c2:	603b      	str	r3, [r7, #0]
    addParameterName(name);
 80181c4:	68b9      	ldr	r1, [r7, #8]
 80181c6:	68f8      	ldr	r0, [r7, #12]
 80181c8:	f7ff fd68 	bl	8017c9c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFromBinaryWithSizeOrNull(value, size);
 80181cc:	68fb      	ldr	r3, [r7, #12]
 80181ce:	1d1c      	adds	r4, r3, #4
 80181d0:	f107 0310 	add.w	r3, r7, #16
 80181d4:	683a      	ldr	r2, [r7, #0]
 80181d6:	6879      	ldr	r1, [r7, #4]
 80181d8:	4618      	mov	r0, r3
 80181da:	f7f4 fbaf 	bl	800c93c <_Z30StringFromBinaryWithSizeOrNullPKhj>
 80181de:	f107 0310 	add.w	r3, r7, #16
 80181e2:	4619      	mov	r1, r3
 80181e4:	4620      	mov	r0, r4
 80181e6:	f7f3 fdcd 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 80181ea:	f107 0310 	add.w	r3, r7, #16
 80181ee:	4618      	mov	r0, r3
 80181f0:	f7f3 fd4b 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    return *this;
 80181f4:	68fb      	ldr	r3, [r7, #12]
}
 80181f6:	4618      	mov	r0, r3
 80181f8:	371c      	adds	r7, #28
 80181fa:	46bd      	mov	sp, r7
 80181fc:	bd90      	pop	{r4, r7, pc}
	...

08018200 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockActualCallTrace::withParameterOfType(const SimpleString& typeName, const SimpleString& name, const void* value)
{
 8018200:	b590      	push	{r4, r7, lr}
 8018202:	b087      	sub	sp, #28
 8018204:	af00      	add	r7, sp, #0
 8018206:	60f8      	str	r0, [r7, #12]
 8018208:	60b9      	str	r1, [r7, #8]
 801820a:	607a      	str	r2, [r7, #4]
 801820c:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 801820e:	68fb      	ldr	r3, [r7, #12]
 8018210:	3304      	adds	r3, #4
 8018212:	4913      	ldr	r1, [pc, #76]	; (8018260 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv+0x60>)
 8018214:	4618      	mov	r0, r3
 8018216:	f7f3 fdc7 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 801821a:	68fb      	ldr	r3, [r7, #12]
 801821c:	3304      	adds	r3, #4
 801821e:	68b9      	ldr	r1, [r7, #8]
 8018220:	4618      	mov	r0, r3
 8018222:	f7f3 fdaf 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 8018226:	6879      	ldr	r1, [r7, #4]
 8018228:	68f8      	ldr	r0, [r7, #12]
 801822a:	f7ff fd37 	bl	8017c9c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801822e:	68fb      	ldr	r3, [r7, #12]
 8018230:	1d1c      	adds	r4, r3, #4
 8018232:	f107 0310 	add.w	r3, r7, #16
 8018236:	6839      	ldr	r1, [r7, #0]
 8018238:	4618      	mov	r0, r3
 801823a:	f7f4 f811 	bl	800c260 <_Z10StringFromPKv>
 801823e:	f107 0310 	add.w	r3, r7, #16
 8018242:	4619      	mov	r1, r3
 8018244:	4620      	mov	r0, r4
 8018246:	f7f3 fd9d 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 801824a:	f107 0310 	add.w	r3, r7, #16
 801824e:	4618      	mov	r0, r3
 8018250:	f7f3 fd1b 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    return *this;
 8018254:	68fb      	ldr	r3, [r7, #12]
}
 8018256:	4618      	mov	r0, r3
 8018258:	371c      	adds	r7, #28
 801825a:	46bd      	mov	sp, r7
 801825c:	bd90      	pop	{r4, r7, pc}
 801825e:	bf00      	nop
 8018260:	08024608 	.word	0x08024608

08018264 <_ZN19MockActualCallTrace19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withOutputParameter(const SimpleString& name, void* output)
{
 8018264:	b590      	push	{r4, r7, lr}
 8018266:	b087      	sub	sp, #28
 8018268:	af00      	add	r7, sp, #0
 801826a:	60f8      	str	r0, [r7, #12]
 801826c:	60b9      	str	r1, [r7, #8]
 801826e:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8018270:	68b9      	ldr	r1, [r7, #8]
 8018272:	68f8      	ldr	r0, [r7, #12]
 8018274:	f7ff fd12 	bl	8017c9c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 8018278:	68fb      	ldr	r3, [r7, #12]
 801827a:	1d1c      	adds	r4, r3, #4
 801827c:	f107 0310 	add.w	r3, r7, #16
 8018280:	6879      	ldr	r1, [r7, #4]
 8018282:	4618      	mov	r0, r3
 8018284:	f7f3 ffec 	bl	800c260 <_Z10StringFromPKv>
 8018288:	f107 0310 	add.w	r3, r7, #16
 801828c:	4619      	mov	r1, r3
 801828e:	4620      	mov	r0, r4
 8018290:	f7f3 fd78 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 8018294:	f107 0310 	add.w	r3, r7, #16
 8018298:	4618      	mov	r0, r3
 801829a:	f7f3 fcf6 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    return *this;
 801829e:	68fb      	ldr	r3, [r7, #12]
}
 80182a0:	4618      	mov	r0, r3
 80182a2:	371c      	adds	r7, #28
 80182a4:	46bd      	mov	sp, r7
 80182a6:	bd90      	pop	{r4, r7, pc}

080182a8 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockActualCallTrace::withOutputParameterOfType(const SimpleString& typeName, const SimpleString& name, void* output)
{
 80182a8:	b590      	push	{r4, r7, lr}
 80182aa:	b087      	sub	sp, #28
 80182ac:	af00      	add	r7, sp, #0
 80182ae:	60f8      	str	r0, [r7, #12]
 80182b0:	60b9      	str	r1, [r7, #8]
 80182b2:	607a      	str	r2, [r7, #4]
 80182b4:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 80182b6:	68fb      	ldr	r3, [r7, #12]
 80182b8:	3304      	adds	r3, #4
 80182ba:	4913      	ldr	r1, [pc, #76]	; (8018308 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv+0x60>)
 80182bc:	4618      	mov	r0, r3
 80182be:	f7f3 fd73 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 80182c2:	68fb      	ldr	r3, [r7, #12]
 80182c4:	3304      	adds	r3, #4
 80182c6:	68b9      	ldr	r1, [r7, #8]
 80182c8:	4618      	mov	r0, r3
 80182ca:	f7f3 fd5b 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 80182ce:	6879      	ldr	r1, [r7, #4]
 80182d0:	68f8      	ldr	r0, [r7, #12]
 80182d2:	f7ff fce3 	bl	8017c9c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 80182d6:	68fb      	ldr	r3, [r7, #12]
 80182d8:	1d1c      	adds	r4, r3, #4
 80182da:	f107 0310 	add.w	r3, r7, #16
 80182de:	6839      	ldr	r1, [r7, #0]
 80182e0:	4618      	mov	r0, r3
 80182e2:	f7f3 ffbd 	bl	800c260 <_Z10StringFromPKv>
 80182e6:	f107 0310 	add.w	r3, r7, #16
 80182ea:	4619      	mov	r1, r3
 80182ec:	4620      	mov	r0, r4
 80182ee:	f7f3 fd49 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 80182f2:	f107 0310 	add.w	r3, r7, #16
 80182f6:	4618      	mov	r0, r3
 80182f8:	f7f3 fcc7 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    return *this;
 80182fc:	68fb      	ldr	r3, [r7, #12]
}
 80182fe:	4618      	mov	r0, r3
 8018300:	371c      	adds	r7, #28
 8018302:	46bd      	mov	sp, r7
 8018304:	bd90      	pop	{r4, r7, pc}
 8018306:	bf00      	nop
 8018308:	08024608 	.word	0x08024608

0801830c <_ZN19MockActualCallTrace14hasReturnValueEv>:

bool MockActualCallTrace::hasReturnValue()
{
 801830c:	b480      	push	{r7}
 801830e:	b083      	sub	sp, #12
 8018310:	af00      	add	r7, sp, #0
 8018312:	6078      	str	r0, [r7, #4]
    return false;
 8018314:	2300      	movs	r3, #0
}
 8018316:	4618      	mov	r0, r3
 8018318:	370c      	adds	r7, #12
 801831a:	46bd      	mov	sp, r7
 801831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018320:	4770      	bx	lr
	...

08018324 <_ZN19MockActualCallTrace11returnValueEv>:

MockNamedValue MockActualCallTrace::returnValue()
{
 8018324:	b580      	push	{r7, lr}
 8018326:	b084      	sub	sp, #16
 8018328:	af00      	add	r7, sp, #0
 801832a:	6078      	str	r0, [r7, #4]
 801832c:	6039      	str	r1, [r7, #0]
    return MockNamedValue("");
 801832e:	f107 0308 	add.w	r3, r7, #8
 8018332:	4909      	ldr	r1, [pc, #36]	; (8018358 <_ZN19MockActualCallTrace11returnValueEv+0x34>)
 8018334:	4618      	mov	r0, r3
 8018336:	f7f3 f8f0 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801833a:	f107 0308 	add.w	r3, r7, #8
 801833e:	4619      	mov	r1, r3
 8018340:	6878      	ldr	r0, [r7, #4]
 8018342:	f003 fe0f 	bl	801bf64 <_ZN14MockNamedValueC1ERK12SimpleString>
 8018346:	f107 0308 	add.w	r3, r7, #8
 801834a:	4618      	mov	r0, r3
 801834c:	f7f3 fc9d 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 8018350:	6878      	ldr	r0, [r7, #4]
 8018352:	3710      	adds	r7, #16
 8018354:	46bd      	mov	sp, r7
 8018356:	bd80      	pop	{r7, pc}
 8018358:	080244dc 	.word	0x080244dc

0801835c <_ZN19MockActualCallTrace18returnLongIntValueEv>:

long int MockActualCallTrace::returnLongIntValue()
{
 801835c:	b480      	push	{r7}
 801835e:	b083      	sub	sp, #12
 8018360:	af00      	add	r7, sp, #0
 8018362:	6078      	str	r0, [r7, #4]
    return 0;
 8018364:	2300      	movs	r3, #0
}
 8018366:	4618      	mov	r0, r3
 8018368:	370c      	adds	r7, #12
 801836a:	46bd      	mov	sp, r7
 801836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018370:	4770      	bx	lr

08018372 <_ZN19MockActualCallTrace26returnUnsignedLongIntValueEv>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValue()
{
 8018372:	b480      	push	{r7}
 8018374:	b083      	sub	sp, #12
 8018376:	af00      	add	r7, sp, #0
 8018378:	6078      	str	r0, [r7, #4]
    return 0;
 801837a:	2300      	movs	r3, #0
}
 801837c:	4618      	mov	r0, r3
 801837e:	370c      	adds	r7, #12
 8018380:	46bd      	mov	sp, r7
 8018382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018386:	4770      	bx	lr

08018388 <_ZN19MockActualCallTrace35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValueOrDefault(unsigned long)
{
 8018388:	b480      	push	{r7}
 801838a:	b083      	sub	sp, #12
 801838c:	af00      	add	r7, sp, #0
 801838e:	6078      	str	r0, [r7, #4]
 8018390:	6039      	str	r1, [r7, #0]
    return 0;
 8018392:	2300      	movs	r3, #0
}
 8018394:	4618      	mov	r0, r3
 8018396:	370c      	adds	r7, #12
 8018398:	46bd      	mov	sp, r7
 801839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801839e:	4770      	bx	lr

080183a0 <_ZN19MockActualCallTrace27returnLongIntValueOrDefaultEl>:

long int MockActualCallTrace::returnLongIntValueOrDefault(long int)
{
 80183a0:	b480      	push	{r7}
 80183a2:	b083      	sub	sp, #12
 80183a4:	af00      	add	r7, sp, #0
 80183a6:	6078      	str	r0, [r7, #4]
 80183a8:	6039      	str	r1, [r7, #0]
    return 0;
 80183aa:	2300      	movs	r3, #0
}
 80183ac:	4618      	mov	r0, r3
 80183ae:	370c      	adds	r7, #12
 80183b0:	46bd      	mov	sp, r7
 80183b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183b6:	4770      	bx	lr

080183b8 <_ZN19MockActualCallTrace22returnLongLongIntValueEv>:
}

#else

cpputest_longlong MockActualCallTrace::returnLongLongIntValue()
{
 80183b8:	b5b0      	push	{r4, r5, r7, lr}
 80183ba:	b084      	sub	sp, #16
 80183bc:	af02      	add	r7, sp, #8
 80183be:	6078      	str	r0, [r7, #4]
 80183c0:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 80183c2:	f7fa fc8d 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 80183c6:	4604      	mov	r4, r0
 80183c8:	6823      	ldr	r3, [r4, #0]
 80183ca:	3368      	adds	r3, #104	; 0x68
 80183cc:	681d      	ldr	r5, [r3, #0]
 80183ce:	f7fa fc97 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80183d2:	4603      	mov	r3, r0
 80183d4:	9300      	str	r3, [sp, #0]
 80183d6:	f240 3375 	movw	r3, #885	; 0x375
 80183da:	4a06      	ldr	r2, [pc, #24]	; (80183f4 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x3c>)
 80183dc:	4906      	ldr	r1, [pc, #24]	; (80183f8 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x40>)
 80183de:	4620      	mov	r0, r4
 80183e0:	47a8      	blx	r5
    return cpputest_longlong(0);
 80183e2:	2100      	movs	r1, #0
 80183e4:	6878      	ldr	r0, [r7, #4]
 80183e6:	f7f1 f8cf 	bl	8009588 <_ZN17cpputest_longlongC1Ei>
}
 80183ea:	6878      	ldr	r0, [r7, #4]
 80183ec:	3708      	adds	r7, #8
 80183ee:	46bd      	mov	sp, r7
 80183f0:	bdb0      	pop	{r4, r5, r7, pc}
 80183f2:	bf00      	nop
 80183f4:	080244f4 	.word	0x080244f4
 80183f8:	0802453c 	.word	0x0802453c

080183fc <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValue()
{
 80183fc:	b5b0      	push	{r4, r5, r7, lr}
 80183fe:	b084      	sub	sp, #16
 8018400:	af02      	add	r7, sp, #8
 8018402:	6078      	str	r0, [r7, #4]
 8018404:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 8018406:	f7fa fc6b 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 801840a:	4604      	mov	r4, r0
 801840c:	6823      	ldr	r3, [r4, #0]
 801840e:	3368      	adds	r3, #104	; 0x68
 8018410:	681d      	ldr	r5, [r3, #0]
 8018412:	f7fa fc75 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018416:	4603      	mov	r3, r0
 8018418:	9300      	str	r3, [sp, #0]
 801841a:	f240 337b 	movw	r3, #891	; 0x37b
 801841e:	4a06      	ldr	r2, [pc, #24]	; (8018438 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x3c>)
 8018420:	4906      	ldr	r1, [pc, #24]	; (801843c <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x40>)
 8018422:	4620      	mov	r0, r4
 8018424:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8018426:	2100      	movs	r1, #0
 8018428:	6878      	ldr	r0, [r7, #4]
 801842a:	f7f1 f8b9 	bl	80095a0 <_ZN18cpputest_ulonglongC1Ei>
}
 801842e:	6878      	ldr	r0, [r7, #4]
 8018430:	3708      	adds	r7, #8
 8018432:	46bd      	mov	sp, r7
 8018434:	bdb0      	pop	{r4, r5, r7, pc}
 8018436:	bf00      	nop
 8018438:	080244f4 	.word	0x080244f4
 801843c:	08024510 	.word	0x08024510

08018440 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong)
{
 8018440:	b5b0      	push	{r4, r5, r7, lr}
 8018442:	b086      	sub	sp, #24
 8018444:	af02      	add	r7, sp, #8
 8018446:	60f8      	str	r0, [r7, #12]
 8018448:	60b9      	str	r1, [r7, #8]
 801844a:	4639      	mov	r1, r7
 801844c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8018450:	f7fa fc46 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 8018454:	4604      	mov	r4, r0
 8018456:	6823      	ldr	r3, [r4, #0]
 8018458:	3368      	adds	r3, #104	; 0x68
 801845a:	681d      	ldr	r5, [r3, #0]
 801845c:	f7fa fc50 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018460:	4603      	mov	r3, r0
 8018462:	9300      	str	r3, [sp, #0]
 8018464:	f240 3381 	movw	r3, #897	; 0x381
 8018468:	4a05      	ldr	r2, [pc, #20]	; (8018480 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x40>)
 801846a:	4906      	ldr	r1, [pc, #24]	; (8018484 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 801846c:	4620      	mov	r0, r4
 801846e:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8018470:	2100      	movs	r1, #0
 8018472:	68f8      	ldr	r0, [r7, #12]
 8018474:	f7f1 f894 	bl	80095a0 <_ZN18cpputest_ulonglongC1Ei>
}
 8018478:	68f8      	ldr	r0, [r7, #12]
 801847a:	3710      	adds	r7, #16
 801847c:	46bd      	mov	sp, r7
 801847e:	bdb0      	pop	{r4, r5, r7, pc}
 8018480:	080244f4 	.word	0x080244f4
 8018484:	08024510 	.word	0x08024510

08018488 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockActualCallTrace::returnLongLongIntValueOrDefault(cpputest_longlong)
{
 8018488:	b5b0      	push	{r4, r5, r7, lr}
 801848a:	b086      	sub	sp, #24
 801848c:	af02      	add	r7, sp, #8
 801848e:	60f8      	str	r0, [r7, #12]
 8018490:	60b9      	str	r1, [r7, #8]
 8018492:	4639      	mov	r1, r7
 8018494:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8018498:	f7fa fc22 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 801849c:	4604      	mov	r4, r0
 801849e:	6823      	ldr	r3, [r4, #0]
 80184a0:	3368      	adds	r3, #104	; 0x68
 80184a2:	681d      	ldr	r5, [r3, #0]
 80184a4:	f7fa fc2c 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80184a8:	4603      	mov	r3, r0
 80184aa:	9300      	str	r3, [sp, #0]
 80184ac:	f240 3387 	movw	r3, #903	; 0x387
 80184b0:	4a05      	ldr	r2, [pc, #20]	; (80184c8 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x40>)
 80184b2:	4906      	ldr	r1, [pc, #24]	; (80184cc <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 80184b4:	4620      	mov	r0, r4
 80184b6:	47a8      	blx	r5
    return cpputest_longlong(0);
 80184b8:	2100      	movs	r1, #0
 80184ba:	68f8      	ldr	r0, [r7, #12]
 80184bc:	f7f1 f864 	bl	8009588 <_ZN17cpputest_longlongC1Ei>
}
 80184c0:	68f8      	ldr	r0, [r7, #12]
 80184c2:	3710      	adds	r7, #16
 80184c4:	46bd      	mov	sp, r7
 80184c6:	bdb0      	pop	{r4, r5, r7, pc}
 80184c8:	080244f4 	.word	0x080244f4
 80184cc:	0802453c 	.word	0x0802453c

080184d0 <_ZN19MockActualCallTrace15returnBoolValueEv>:

#endif

bool MockActualCallTrace::returnBoolValue()
{
 80184d0:	b480      	push	{r7}
 80184d2:	b083      	sub	sp, #12
 80184d4:	af00      	add	r7, sp, #0
 80184d6:	6078      	str	r0, [r7, #4]
    return false;
 80184d8:	2300      	movs	r3, #0
}
 80184da:	4618      	mov	r0, r3
 80184dc:	370c      	adds	r7, #12
 80184de:	46bd      	mov	sp, r7
 80184e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184e4:	4770      	bx	lr

080184e6 <_ZN19MockActualCallTrace24returnBoolValueOrDefaultEb>:

bool MockActualCallTrace::returnBoolValueOrDefault(bool)
{
 80184e6:	b480      	push	{r7}
 80184e8:	b083      	sub	sp, #12
 80184ea:	af00      	add	r7, sp, #0
 80184ec:	6078      	str	r0, [r7, #4]
 80184ee:	460b      	mov	r3, r1
 80184f0:	70fb      	strb	r3, [r7, #3]
    return false;
 80184f2:	2300      	movs	r3, #0
}
 80184f4:	4618      	mov	r0, r3
 80184f6:	370c      	adds	r7, #12
 80184f8:	46bd      	mov	sp, r7
 80184fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184fe:	4770      	bx	lr

08018500 <_ZN19MockActualCallTrace14returnIntValueEv>:

int MockActualCallTrace::returnIntValue()
{
 8018500:	b480      	push	{r7}
 8018502:	b083      	sub	sp, #12
 8018504:	af00      	add	r7, sp, #0
 8018506:	6078      	str	r0, [r7, #4]
    return 0;
 8018508:	2300      	movs	r3, #0
}
 801850a:	4618      	mov	r0, r3
 801850c:	370c      	adds	r7, #12
 801850e:	46bd      	mov	sp, r7
 8018510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018514:	4770      	bx	lr

08018516 <_ZN19MockActualCallTrace17returnDoubleValueEv>:

double MockActualCallTrace::returnDoubleValue()
{
 8018516:	b480      	push	{r7}
 8018518:	b083      	sub	sp, #12
 801851a:	af00      	add	r7, sp, #0
 801851c:	6078      	str	r0, [r7, #4]
    return 0.0;
 801851e:	f04f 0200 	mov.w	r2, #0
 8018522:	f04f 0300 	mov.w	r3, #0
 8018526:	ec43 2b17 	vmov	d7, r2, r3
}
 801852a:	eeb0 0a47 	vmov.f32	s0, s14
 801852e:	eef0 0a67 	vmov.f32	s1, s15
 8018532:	370c      	adds	r7, #12
 8018534:	46bd      	mov	sp, r7
 8018536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801853a:	4770      	bx	lr

0801853c <_ZN19MockActualCallTrace26returnDoubleValueOrDefaultEd>:

double MockActualCallTrace::returnDoubleValueOrDefault(double)
{
 801853c:	b580      	push	{r7, lr}
 801853e:	b084      	sub	sp, #16
 8018540:	af00      	add	r7, sp, #0
 8018542:	60f8      	str	r0, [r7, #12]
 8018544:	ed87 0b00 	vstr	d0, [r7]
    return returnDoubleValue();
 8018548:	68fb      	ldr	r3, [r7, #12]
 801854a:	681b      	ldr	r3, [r3, #0]
 801854c:	3398      	adds	r3, #152	; 0x98
 801854e:	681b      	ldr	r3, [r3, #0]
 8018550:	68f8      	ldr	r0, [r7, #12]
 8018552:	4798      	blx	r3
 8018554:	eeb0 7a40 	vmov.f32	s14, s0
 8018558:	eef0 7a60 	vmov.f32	s15, s1
}
 801855c:	eeb0 0a47 	vmov.f32	s0, s14
 8018560:	eef0 0a67 	vmov.f32	s1, s15
 8018564:	3710      	adds	r7, #16
 8018566:	46bd      	mov	sp, r7
 8018568:	bd80      	pop	{r7, pc}

0801856a <_ZN19MockActualCallTrace22returnUnsignedIntValueEv>:

unsigned int MockActualCallTrace::returnUnsignedIntValue()
{
 801856a:	b480      	push	{r7}
 801856c:	b083      	sub	sp, #12
 801856e:	af00      	add	r7, sp, #0
 8018570:	6078      	str	r0, [r7, #4]
    return 0;
 8018572:	2300      	movs	r3, #0
}
 8018574:	4618      	mov	r0, r3
 8018576:	370c      	adds	r7, #12
 8018578:	46bd      	mov	sp, r7
 801857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801857e:	4770      	bx	lr

08018580 <_ZN19MockActualCallTrace18returnPointerValueEv>:

void * MockActualCallTrace::returnPointerValue()
{
 8018580:	b480      	push	{r7}
 8018582:	b083      	sub	sp, #12
 8018584:	af00      	add	r7, sp, #0
 8018586:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8018588:	2300      	movs	r3, #0
}
 801858a:	4618      	mov	r0, r3
 801858c:	370c      	adds	r7, #12
 801858e:	46bd      	mov	sp, r7
 8018590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018594:	4770      	bx	lr

08018596 <_ZN19MockActualCallTrace23returnConstPointerValueEv>:

const void * MockActualCallTrace::returnConstPointerValue()
{
 8018596:	b480      	push	{r7}
 8018598:	b083      	sub	sp, #12
 801859a:	af00      	add	r7, sp, #0
 801859c:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 801859e:	2300      	movs	r3, #0
}
 80185a0:	4618      	mov	r0, r3
 80185a2:	370c      	adds	r7, #12
 80185a4:	46bd      	mov	sp, r7
 80185a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185aa:	4770      	bx	lr

080185ac <_ZN19MockActualCallTrace26returnFunctionPointerValueEv>:

void (*MockActualCallTrace::returnFunctionPointerValue())()
{
 80185ac:	b480      	push	{r7}
 80185ae:	b083      	sub	sp, #12
 80185b0:	af00      	add	r7, sp, #0
 80185b2:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 80185b4:	2300      	movs	r3, #0
}
 80185b6:	4618      	mov	r0, r3
 80185b8:	370c      	adds	r7, #12
 80185ba:	46bd      	mov	sp, r7
 80185bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185c0:	4770      	bx	lr

080185c2 <_ZN19MockActualCallTrace32returnConstPointerValueOrDefaultEPKv>:

const void * MockActualCallTrace::returnConstPointerValueOrDefault(const void *)
{
 80185c2:	b580      	push	{r7, lr}
 80185c4:	b082      	sub	sp, #8
 80185c6:	af00      	add	r7, sp, #0
 80185c8:	6078      	str	r0, [r7, #4]
 80185ca:	6039      	str	r1, [r7, #0]
    return returnConstPointerValue();
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	681b      	ldr	r3, [r3, #0]
 80185d0:	33a8      	adds	r3, #168	; 0xa8
 80185d2:	681b      	ldr	r3, [r3, #0]
 80185d4:	6878      	ldr	r0, [r7, #4]
 80185d6:	4798      	blx	r3
 80185d8:	4603      	mov	r3, r0
}
 80185da:	4618      	mov	r0, r3
 80185dc:	3708      	adds	r7, #8
 80185de:	46bd      	mov	sp, r7
 80185e0:	bd80      	pop	{r7, pc}

080185e2 <_ZN19MockActualCallTrace27returnPointerValueOrDefaultEPv>:

void * MockActualCallTrace::returnPointerValueOrDefault(void *)
{
 80185e2:	b580      	push	{r7, lr}
 80185e4:	b082      	sub	sp, #8
 80185e6:	af00      	add	r7, sp, #0
 80185e8:	6078      	str	r0, [r7, #4]
 80185ea:	6039      	str	r1, [r7, #0]
    return returnPointerValue();
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	681b      	ldr	r3, [r3, #0]
 80185f0:	33a0      	adds	r3, #160	; 0xa0
 80185f2:	681b      	ldr	r3, [r3, #0]
 80185f4:	6878      	ldr	r0, [r7, #4]
 80185f6:	4798      	blx	r3
 80185f8:	4603      	mov	r3, r0
}
 80185fa:	4618      	mov	r0, r3
 80185fc:	3708      	adds	r7, #8
 80185fe:	46bd      	mov	sp, r7
 8018600:	bd80      	pop	{r7, pc}

08018602 <_ZN19MockActualCallTrace35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockActualCallTrace::returnFunctionPointerValueOrDefault(void (*)()))()
{
 8018602:	b580      	push	{r7, lr}
 8018604:	b082      	sub	sp, #8
 8018606:	af00      	add	r7, sp, #0
 8018608:	6078      	str	r0, [r7, #4]
 801860a:	6039      	str	r1, [r7, #0]
    return returnFunctionPointerValue();
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	33b0      	adds	r3, #176	; 0xb0
 8018612:	681b      	ldr	r3, [r3, #0]
 8018614:	6878      	ldr	r0, [r7, #4]
 8018616:	4798      	blx	r3
 8018618:	4603      	mov	r3, r0
}
 801861a:	4618      	mov	r0, r3
 801861c:	3708      	adds	r7, #8
 801861e:	46bd      	mov	sp, r7
 8018620:	bd80      	pop	{r7, pc}
	...

08018624 <_ZN19MockActualCallTrace17returnStringValueEv>:

const char * MockActualCallTrace::returnStringValue()
{
 8018624:	b480      	push	{r7}
 8018626:	b083      	sub	sp, #12
 8018628:	af00      	add	r7, sp, #0
 801862a:	6078      	str	r0, [r7, #4]
    return "";
 801862c:	4b03      	ldr	r3, [pc, #12]	; (801863c <_ZN19MockActualCallTrace17returnStringValueEv+0x18>)
}
 801862e:	4618      	mov	r0, r3
 8018630:	370c      	adds	r7, #12
 8018632:	46bd      	mov	sp, r7
 8018634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018638:	4770      	bx	lr
 801863a:	bf00      	nop
 801863c:	080244dc 	.word	0x080244dc

08018640 <_ZN19MockActualCallTrace26returnStringValueOrDefaultEPKc>:

const char * MockActualCallTrace::returnStringValueOrDefault(const char *)
{
 8018640:	b580      	push	{r7, lr}
 8018642:	b082      	sub	sp, #8
 8018644:	af00      	add	r7, sp, #0
 8018646:	6078      	str	r0, [r7, #4]
 8018648:	6039      	str	r1, [r7, #0]
    return returnStringValue();
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	681b      	ldr	r3, [r3, #0]
 801864e:	3394      	adds	r3, #148	; 0x94
 8018650:	681b      	ldr	r3, [r3, #0]
 8018652:	6878      	ldr	r0, [r7, #4]
 8018654:	4798      	blx	r3
 8018656:	4603      	mov	r3, r0
}
 8018658:	4618      	mov	r0, r3
 801865a:	3708      	adds	r7, #8
 801865c:	46bd      	mov	sp, r7
 801865e:	bd80      	pop	{r7, pc}

08018660 <_ZN19MockActualCallTrace23returnIntValueOrDefaultEi>:

int MockActualCallTrace::returnIntValueOrDefault(int)
{
 8018660:	b480      	push	{r7}
 8018662:	b083      	sub	sp, #12
 8018664:	af00      	add	r7, sp, #0
 8018666:	6078      	str	r0, [r7, #4]
 8018668:	6039      	str	r1, [r7, #0]
    return 0;
 801866a:	2300      	movs	r3, #0
}
 801866c:	4618      	mov	r0, r3
 801866e:	370c      	adds	r7, #12
 8018670:	46bd      	mov	sp, r7
 8018672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018676:	4770      	bx	lr

08018678 <_ZN19MockActualCallTrace31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockActualCallTrace::returnUnsignedIntValueOrDefault(unsigned int)
{
 8018678:	b580      	push	{r7, lr}
 801867a:	b082      	sub	sp, #8
 801867c:	af00      	add	r7, sp, #0
 801867e:	6078      	str	r0, [r7, #4]
 8018680:	6039      	str	r1, [r7, #0]
    return returnUnsignedIntValue();
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	3388      	adds	r3, #136	; 0x88
 8018688:	681b      	ldr	r3, [r3, #0]
 801868a:	6878      	ldr	r0, [r7, #4]
 801868c:	4798      	blx	r3
 801868e:	4603      	mov	r3, r0
}
 8018690:	4618      	mov	r0, r3
 8018692:	3708      	adds	r7, #8
 8018694:	46bd      	mov	sp, r7
 8018696:	bd80      	pop	{r7, pc}

08018698 <_ZN19MockActualCallTrace8onObjectEPKv>:

MockActualCall& MockActualCallTrace::onObject(const void* objectPtr)
{
 8018698:	b590      	push	{r4, r7, lr}
 801869a:	b085      	sub	sp, #20
 801869c:	af00      	add	r7, sp, #0
 801869e:	6078      	str	r0, [r7, #4]
 80186a0:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " onObject:";
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	3304      	adds	r3, #4
 80186a6:	490e      	ldr	r1, [pc, #56]	; (80186e0 <_ZN19MockActualCallTrace8onObjectEPKv+0x48>)
 80186a8:	4618      	mov	r0, r3
 80186aa:	f7f3 fb7d 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(objectPtr);
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	1d1c      	adds	r4, r3, #4
 80186b2:	f107 0308 	add.w	r3, r7, #8
 80186b6:	6839      	ldr	r1, [r7, #0]
 80186b8:	4618      	mov	r0, r3
 80186ba:	f7f3 fdd1 	bl	800c260 <_Z10StringFromPKv>
 80186be:	f107 0308 	add.w	r3, r7, #8
 80186c2:	4619      	mov	r1, r3
 80186c4:	4620      	mov	r0, r4
 80186c6:	f7f3 fb5d 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 80186ca:	f107 0308 	add.w	r3, r7, #8
 80186ce:	4618      	mov	r0, r3
 80186d0:	f7f3 fadb 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    return *this;
 80186d4:	687b      	ldr	r3, [r7, #4]
}
 80186d6:	4618      	mov	r0, r3
 80186d8:	3714      	adds	r7, #20
 80186da:	46bd      	mov	sp, r7
 80186dc:	bd90      	pop	{r4, r7, pc}
 80186de:	bf00      	nop
 80186e0:	08024610 	.word	0x08024610

080186e4 <_ZN19MockActualCallTrace8instanceEv>:
}

MockActualCallTrace* MockActualCallTrace::instance_ = NULLPTR;

MockActualCallTrace& MockActualCallTrace::instance()
{
 80186e4:	b598      	push	{r3, r4, r7, lr}
 80186e6:	af00      	add	r7, sp, #0
    if (instance_ == NULLPTR)
 80186e8:	4b09      	ldr	r3, [pc, #36]	; (8018710 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 80186ea:	681b      	ldr	r3, [r3, #0]
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	d10b      	bne.n	8018708 <_ZN19MockActualCallTrace8instanceEv+0x24>
        instance_ = new MockActualCallTrace;
 80186f0:	f240 32f3 	movw	r2, #1011	; 0x3f3
 80186f4:	4907      	ldr	r1, [pc, #28]	; (8018714 <_ZN19MockActualCallTrace8instanceEv+0x30>)
 80186f6:	200c      	movs	r0, #12
 80186f8:	f7f0 fb4c 	bl	8008d94 <_ZnwjPKci>
 80186fc:	4604      	mov	r4, r0
 80186fe:	4620      	mov	r0, r4
 8018700:	f7ff fa4c 	bl	8017b9c <_ZN19MockActualCallTraceC1Ev>
 8018704:	4b02      	ldr	r3, [pc, #8]	; (8018710 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8018706:	601c      	str	r4, [r3, #0]
    return *instance_;
 8018708:	4b01      	ldr	r3, [pc, #4]	; (8018710 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 801870a:	681b      	ldr	r3, [r3, #0]
}
 801870c:	4618      	mov	r0, r3
 801870e:	bd98      	pop	{r3, r4, r7, pc}
 8018710:	20000dac 	.word	0x20000dac
 8018714:	080244f4 	.word	0x080244f4

08018718 <_ZN19MockActualCallTrace13clearInstanceEv>:

void MockActualCallTrace::clearInstance()
{
 8018718:	b580      	push	{r7, lr}
 801871a:	af00      	add	r7, sp, #0
    delete instance_;
 801871c:	4b06      	ldr	r3, [pc, #24]	; (8018738 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 801871e:	681b      	ldr	r3, [r3, #0]
 8018720:	2b00      	cmp	r3, #0
 8018722:	d004      	beq.n	801872e <_ZN19MockActualCallTrace13clearInstanceEv+0x16>
 8018724:	681a      	ldr	r2, [r3, #0]
 8018726:	3204      	adds	r2, #4
 8018728:	6812      	ldr	r2, [r2, #0]
 801872a:	4618      	mov	r0, r3
 801872c:	4790      	blx	r2
    instance_ = NULLPTR;
 801872e:	4b02      	ldr	r3, [pc, #8]	; (8018738 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 8018730:	2200      	movs	r2, #0
 8018732:	601a      	str	r2, [r3, #0]
}
 8018734:	bf00      	nop
 8018736:	bd80      	pop	{r7, pc}
 8018738:	20000dac 	.word	0x20000dac

0801873c <_ZN21MockIgnoredActualCallC1Ev>:
class MockIgnoredActualCall: public MockActualCall
 801873c:	b580      	push	{r7, lr}
 801873e:	b082      	sub	sp, #8
 8018740:	af00      	add	r7, sp, #0
 8018742:	6078      	str	r0, [r7, #4]
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	4618      	mov	r0, r3
 8018748:	f7fd fe9a 	bl	8016480 <_ZN14MockActualCallC1Ev>
 801874c:	4a03      	ldr	r2, [pc, #12]	; (801875c <_ZN21MockIgnoredActualCallC1Ev+0x20>)
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	601a      	str	r2, [r3, #0]
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	4618      	mov	r0, r3
 8018756:	3708      	adds	r7, #8
 8018758:	46bd      	mov	sp, r7
 801875a:	bd80      	pop	{r7, pc}
 801875c:	08026bfc 	.word	0x08026bfc

08018760 <__tcf_0>:

MockIgnoredActualCall& MockIgnoredActualCall::instance()
{
    static MockIgnoredActualCall call;
 8018760:	b580      	push	{r7, lr}
 8018762:	af00      	add	r7, sp, #0
 8018764:	4801      	ldr	r0, [pc, #4]	; (801876c <__tcf_0+0xc>)
 8018766:	f000 f831 	bl	80187cc <_ZN21MockIgnoredActualCallD1Ev>
 801876a:	bd80      	pop	{r7, pc}
 801876c:	20000db0 	.word	0x20000db0

08018770 <_ZN21MockIgnoredActualCall8instanceEv>:
{
 8018770:	b580      	push	{r7, lr}
 8018772:	af00      	add	r7, sp, #0
    static MockIgnoredActualCall call;
 8018774:	4b12      	ldr	r3, [pc, #72]	; (80187c0 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8018776:	781b      	ldrb	r3, [r3, #0]
 8018778:	f3bf 8f5b 	dmb	ish
 801877c:	b2db      	uxtb	r3, r3
 801877e:	f003 0301 	and.w	r3, r3, #1
 8018782:	2b00      	cmp	r3, #0
 8018784:	bf0c      	ite	eq
 8018786:	2301      	moveq	r3, #1
 8018788:	2300      	movne	r3, #0
 801878a:	b2db      	uxtb	r3, r3
 801878c:	2b00      	cmp	r3, #0
 801878e:	d013      	beq.n	80187b8 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 8018790:	480b      	ldr	r0, [pc, #44]	; (80187c0 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8018792:	f005 fd81 	bl	801e298 <__cxa_guard_acquire>
 8018796:	4603      	mov	r3, r0
 8018798:	2b00      	cmp	r3, #0
 801879a:	bf14      	ite	ne
 801879c:	2301      	movne	r3, #1
 801879e:	2300      	moveq	r3, #0
 80187a0:	b2db      	uxtb	r3, r3
 80187a2:	2b00      	cmp	r3, #0
 80187a4:	d008      	beq.n	80187b8 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 80187a6:	4807      	ldr	r0, [pc, #28]	; (80187c4 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
 80187a8:	f7ff ffc8 	bl	801873c <_ZN21MockIgnoredActualCallC1Ev>
 80187ac:	4804      	ldr	r0, [pc, #16]	; (80187c0 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 80187ae:	f005 fd7f 	bl	801e2b0 <__cxa_guard_release>
 80187b2:	4805      	ldr	r0, [pc, #20]	; (80187c8 <_ZN21MockIgnoredActualCall8instanceEv+0x58>)
 80187b4:	f005 fda3 	bl	801e2fe <atexit>
    return call;
 80187b8:	4b02      	ldr	r3, [pc, #8]	; (80187c4 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
}
 80187ba:	4618      	mov	r0, r3
 80187bc:	bd80      	pop	{r7, pc}
 80187be:	bf00      	nop
 80187c0:	20000db4 	.word	0x20000db4
 80187c4:	20000db0 	.word	0x20000db0
 80187c8:	08018761 	.word	0x08018761

080187cc <_ZN21MockIgnoredActualCallD1Ev>:
 80187cc:	b580      	push	{r7, lr}
 80187ce:	b082      	sub	sp, #8
 80187d0:	af00      	add	r7, sp, #0
 80187d2:	6078      	str	r0, [r7, #4]
 80187d4:	4a05      	ldr	r2, [pc, #20]	; (80187ec <_ZN21MockIgnoredActualCallD1Ev+0x20>)
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	601a      	str	r2, [r3, #0]
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	4618      	mov	r0, r3
 80187de:	f7fd fe5f 	bl	80164a0 <_ZN14MockActualCallD1Ev>
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	4618      	mov	r0, r3
 80187e6:	3708      	adds	r7, #8
 80187e8:	46bd      	mov	sp, r7
 80187ea:	bd80      	pop	{r7, pc}
 80187ec:	08026bfc 	.word	0x08026bfc

080187f0 <_ZN21MockIgnoredActualCallD0Ev>:
 80187f0:	b580      	push	{r7, lr}
 80187f2:	b082      	sub	sp, #8
 80187f4:	af00      	add	r7, sp, #0
 80187f6:	6078      	str	r0, [r7, #4]
 80187f8:	6878      	ldr	r0, [r7, #4]
 80187fa:	f7ff ffe7 	bl	80187cc <_ZN21MockIgnoredActualCallD1Ev>
 80187fe:	2104      	movs	r1, #4
 8018800:	6878      	ldr	r0, [r7, #4]
 8018802:	f7f0 fadb 	bl	8008dbc <_ZdlPvj>
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	4618      	mov	r0, r3
 801880a:	3708      	adds	r7, #8
 801880c:	46bd      	mov	sp, r7
 801880e:	bd80      	pop	{r7, pc}

08018810 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>:
{
public:
    MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName);
};

class MockNoWayToCopyCustomTypeFailure : public MockFailure
 8018810:	b580      	push	{r7, lr}
 8018812:	b082      	sub	sp, #8
 8018814:	af00      	add	r7, sp, #0
 8018816:	6078      	str	r0, [r7, #4]
 8018818:	4a05      	ldr	r2, [pc, #20]	; (8018830 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev+0x20>)
 801881a:	687b      	ldr	r3, [r7, #4]
 801881c:	601a      	str	r2, [r3, #0]
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	4618      	mov	r0, r3
 8018822:	f7f0 fefd 	bl	8009620 <_ZN11MockFailureD1Ev>
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	4618      	mov	r0, r3
 801882a:	3708      	adds	r7, #8
 801882c:	46bd      	mov	sp, r7
 801882e:	bd80      	pop	{r7, pc}
 8018830:	08026af4 	.word	0x08026af4

08018834 <_ZN32MockNoWayToCopyCustomTypeFailureD0Ev>:
 8018834:	b580      	push	{r7, lr}
 8018836:	b082      	sub	sp, #8
 8018838:	af00      	add	r7, sp, #0
 801883a:	6078      	str	r0, [r7, #4]
 801883c:	6878      	ldr	r0, [r7, #4]
 801883e:	f7ff ffe7 	bl	8018810 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
 8018842:	2134      	movs	r1, #52	; 0x34
 8018844:	6878      	ldr	r0, [r7, #4]
 8018846:	f7f0 fab9 	bl	8008dbc <_ZdlPvj>
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	4618      	mov	r0, r3
 801884e:	3708      	adds	r7, #8
 8018850:	46bd      	mov	sp, r7
 8018852:	bd80      	pop	{r7, pc}

08018854 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>:
class MockUnexpectedCallHappenedFailure : public MockFailure
 8018854:	b580      	push	{r7, lr}
 8018856:	b082      	sub	sp, #8
 8018858:	af00      	add	r7, sp, #0
 801885a:	6078      	str	r0, [r7, #4]
 801885c:	4a05      	ldr	r2, [pc, #20]	; (8018874 <_ZN33MockUnexpectedCallHappenedFailureD1Ev+0x20>)
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	601a      	str	r2, [r3, #0]
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	4618      	mov	r0, r3
 8018866:	f7f0 fedb 	bl	8009620 <_ZN11MockFailureD1Ev>
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	4618      	mov	r0, r3
 801886e:	3708      	adds	r7, #8
 8018870:	46bd      	mov	sp, r7
 8018872:	bd80      	pop	{r7, pc}
 8018874:	08026bd0 	.word	0x08026bd0

08018878 <_ZN33MockUnexpectedCallHappenedFailureD0Ev>:
 8018878:	b580      	push	{r7, lr}
 801887a:	b082      	sub	sp, #8
 801887c:	af00      	add	r7, sp, #0
 801887e:	6078      	str	r0, [r7, #4]
 8018880:	6878      	ldr	r0, [r7, #4]
 8018882:	f7ff ffe7 	bl	8018854 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 8018886:	2134      	movs	r1, #52	; 0x34
 8018888:	6878      	ldr	r0, [r7, #4]
 801888a:	f7f0 fa97 	bl	8008dbc <_ZdlPvj>
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	4618      	mov	r0, r3
 8018892:	3708      	adds	r7, #8
 8018894:	46bd      	mov	sp, r7
 8018896:	bd80      	pop	{r7, pc}

08018898 <_ZN35MockUnexpectedInputParameterFailureD1Ev>:
class MockUnexpectedInputParameterFailure : public MockFailure
 8018898:	b580      	push	{r7, lr}
 801889a:	b082      	sub	sp, #8
 801889c:	af00      	add	r7, sp, #0
 801889e:	6078      	str	r0, [r7, #4]
 80188a0:	4a05      	ldr	r2, [pc, #20]	; (80188b8 <_ZN35MockUnexpectedInputParameterFailureD1Ev+0x20>)
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	601a      	str	r2, [r3, #0]
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	4618      	mov	r0, r3
 80188aa:	f7f0 feb9 	bl	8009620 <_ZN11MockFailureD1Ev>
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	4618      	mov	r0, r3
 80188b2:	3708      	adds	r7, #8
 80188b4:	46bd      	mov	sp, r7
 80188b6:	bd80      	pop	{r7, pc}
 80188b8:	08026ba4 	.word	0x08026ba4

080188bc <_ZN35MockUnexpectedInputParameterFailureD0Ev>:
 80188bc:	b580      	push	{r7, lr}
 80188be:	b082      	sub	sp, #8
 80188c0:	af00      	add	r7, sp, #0
 80188c2:	6078      	str	r0, [r7, #4]
 80188c4:	6878      	ldr	r0, [r7, #4]
 80188c6:	f7ff ffe7 	bl	8018898 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 80188ca:	2134      	movs	r1, #52	; 0x34
 80188cc:	6878      	ldr	r0, [r7, #4]
 80188ce:	f7f0 fa75 	bl	8008dbc <_ZdlPvj>
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	4618      	mov	r0, r3
 80188d6:	3708      	adds	r7, #8
 80188d8:	46bd      	mov	sp, r7
 80188da:	bd80      	pop	{r7, pc}

080188dc <_ZN36MockUnexpectedOutputParameterFailureD1Ev>:
class MockUnexpectedOutputParameterFailure : public MockFailure
 80188dc:	b580      	push	{r7, lr}
 80188de:	b082      	sub	sp, #8
 80188e0:	af00      	add	r7, sp, #0
 80188e2:	6078      	str	r0, [r7, #4]
 80188e4:	4a05      	ldr	r2, [pc, #20]	; (80188fc <_ZN36MockUnexpectedOutputParameterFailureD1Ev+0x20>)
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	601a      	str	r2, [r3, #0]
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	4618      	mov	r0, r3
 80188ee:	f7f0 fe97 	bl	8009620 <_ZN11MockFailureD1Ev>
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	4618      	mov	r0, r3
 80188f6:	3708      	adds	r7, #8
 80188f8:	46bd      	mov	sp, r7
 80188fa:	bd80      	pop	{r7, pc}
 80188fc:	08026b78 	.word	0x08026b78

08018900 <_ZN36MockUnexpectedOutputParameterFailureD0Ev>:
 8018900:	b580      	push	{r7, lr}
 8018902:	b082      	sub	sp, #8
 8018904:	af00      	add	r7, sp, #0
 8018906:	6078      	str	r0, [r7, #4]
 8018908:	6878      	ldr	r0, [r7, #4]
 801890a:	f7ff ffe7 	bl	80188dc <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 801890e:	2134      	movs	r1, #52	; 0x34
 8018910:	6878      	ldr	r0, [r7, #4]
 8018912:	f7f0 fa53 	bl	8008dbc <_ZdlPvj>
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	4618      	mov	r0, r3
 801891a:	3708      	adds	r7, #8
 801891c:	46bd      	mov	sp, r7
 801891e:	bd80      	pop	{r7, pc}

08018920 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>:
class MockNoWayToCompareCustomTypeFailure : public MockFailure
 8018920:	b580      	push	{r7, lr}
 8018922:	b082      	sub	sp, #8
 8018924:	af00      	add	r7, sp, #0
 8018926:	6078      	str	r0, [r7, #4]
 8018928:	4a05      	ldr	r2, [pc, #20]	; (8018940 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev+0x20>)
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	601a      	str	r2, [r3, #0]
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	4618      	mov	r0, r3
 8018932:	f7f0 fe75 	bl	8009620 <_ZN11MockFailureD1Ev>
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	4618      	mov	r0, r3
 801893a:	3708      	adds	r7, #8
 801893c:	46bd      	mov	sp, r7
 801893e:	bd80      	pop	{r7, pc}
 8018940:	08026b20 	.word	0x08026b20

08018944 <_ZN35MockNoWayToCompareCustomTypeFailureD0Ev>:
 8018944:	b580      	push	{r7, lr}
 8018946:	b082      	sub	sp, #8
 8018948:	af00      	add	r7, sp, #0
 801894a:	6078      	str	r0, [r7, #4]
 801894c:	6878      	ldr	r0, [r7, #4]
 801894e:	f7ff ffe7 	bl	8018920 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 8018952:	2134      	movs	r1, #52	; 0x34
 8018954:	6878      	ldr	r0, [r7, #4]
 8018956:	f7f0 fa31 	bl	8008dbc <_ZdlPvj>
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	4618      	mov	r0, r3
 801895e:	3708      	adds	r7, #8
 8018960:	46bd      	mov	sp, r7
 8018962:	bd80      	pop	{r7, pc}

08018964 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>:
class MockExpectedParameterDidntHappenFailure : public MockFailure
 8018964:	b580      	push	{r7, lr}
 8018966:	b082      	sub	sp, #8
 8018968:	af00      	add	r7, sp, #0
 801896a:	6078      	str	r0, [r7, #4]
 801896c:	4a05      	ldr	r2, [pc, #20]	; (8018984 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev+0x20>)
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	601a      	str	r2, [r3, #0]
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	4618      	mov	r0, r3
 8018976:	f7f0 fe53 	bl	8009620 <_ZN11MockFailureD1Ev>
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	4618      	mov	r0, r3
 801897e:	3708      	adds	r7, #8
 8018980:	46bd      	mov	sp, r7
 8018982:	bd80      	pop	{r7, pc}
 8018984:	08026b4c 	.word	0x08026b4c

08018988 <_ZN39MockExpectedParameterDidntHappenFailureD0Ev>:
 8018988:	b580      	push	{r7, lr}
 801898a:	b082      	sub	sp, #8
 801898c:	af00      	add	r7, sp, #0
 801898e:	6078      	str	r0, [r7, #4]
 8018990:	6878      	ldr	r0, [r7, #4]
 8018992:	f7ff ffe7 	bl	8018964 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 8018996:	2134      	movs	r1, #52	; 0x34
 8018998:	6878      	ldr	r0, [r7, #4]
 801899a:	f7f0 fa0f 	bl	8008dbc <_ZdlPvj>
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	4618      	mov	r0, r3
 80189a2:	3708      	adds	r7, #8
 80189a4:	46bd      	mov	sp, r7
 80189a6:	bd80      	pop	{r7, pc}

080189a8 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>:
{
public:
    MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* expected, const MockExpectedCallsList& expectations);
};

class MockExpectedObjectDidntHappenFailure : public MockFailure
 80189a8:	b580      	push	{r7, lr}
 80189aa:	b082      	sub	sp, #8
 80189ac:	af00      	add	r7, sp, #0
 80189ae:	6078      	str	r0, [r7, #4]
 80189b0:	4a05      	ldr	r2, [pc, #20]	; (80189c8 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev+0x20>)
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	601a      	str	r2, [r3, #0]
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	4618      	mov	r0, r3
 80189ba:	f7f0 fe31 	bl	8009620 <_ZN11MockFailureD1Ev>
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	4618      	mov	r0, r3
 80189c2:	3708      	adds	r7, #8
 80189c4:	46bd      	mov	sp, r7
 80189c6:	bd80      	pop	{r7, pc}
 80189c8:	08026a9c 	.word	0x08026a9c

080189cc <_ZN36MockExpectedObjectDidntHappenFailureD0Ev>:
 80189cc:	b580      	push	{r7, lr}
 80189ce:	b082      	sub	sp, #8
 80189d0:	af00      	add	r7, sp, #0
 80189d2:	6078      	str	r0, [r7, #4]
 80189d4:	6878      	ldr	r0, [r7, #4]
 80189d6:	f7ff ffe7 	bl	80189a8 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 80189da:	2134      	movs	r1, #52	; 0x34
 80189dc:	6878      	ldr	r0, [r7, #4]
 80189de:	f7f0 f9ed 	bl	8008dbc <_ZdlPvj>
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	4618      	mov	r0, r3
 80189e6:	3708      	adds	r7, #8
 80189e8:	46bd      	mov	sp, r7
 80189ea:	bd80      	pop	{r7, pc}

080189ec <_ZN27MockUnexpectedObjectFailureD1Ev>:
class MockUnexpectedObjectFailure : public MockFailure
 80189ec:	b580      	push	{r7, lr}
 80189ee:	b082      	sub	sp, #8
 80189f0:	af00      	add	r7, sp, #0
 80189f2:	6078      	str	r0, [r7, #4]
 80189f4:	4a05      	ldr	r2, [pc, #20]	; (8018a0c <_ZN27MockUnexpectedObjectFailureD1Ev+0x20>)
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	601a      	str	r2, [r3, #0]
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	4618      	mov	r0, r3
 80189fe:	f7f0 fe0f 	bl	8009620 <_ZN11MockFailureD1Ev>
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	4618      	mov	r0, r3
 8018a06:	3708      	adds	r7, #8
 8018a08:	46bd      	mov	sp, r7
 8018a0a:	bd80      	pop	{r7, pc}
 8018a0c:	08026ac8 	.word	0x08026ac8

08018a10 <_ZN27MockUnexpectedObjectFailureD0Ev>:
 8018a10:	b580      	push	{r7, lr}
 8018a12:	b082      	sub	sp, #8
 8018a14:	af00      	add	r7, sp, #0
 8018a16:	6078      	str	r0, [r7, #4]
 8018a18:	6878      	ldr	r0, [r7, #4]
 8018a1a:	f7ff ffe7 	bl	80189ec <_ZN27MockUnexpectedObjectFailureD1Ev>
 8018a1e:	2134      	movs	r1, #52	; 0x34
 8018a20:	6878      	ldr	r0, [r7, #4]
 8018a22:	f7f0 f9cb 	bl	8008dbc <_ZdlPvj>
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	4618      	mov	r0, r3
 8018a2a:	3708      	adds	r7, #8
 8018a2c:	46bd      	mov	sp, r7
 8018a2e:	bd80      	pop	{r7, pc}

08018a30 <_ZN23MockCheckedExpectedCall13withCallOrderEj>:
    MockCheckedExpectedCall();
    MockCheckedExpectedCall(unsigned int numCalls);
    virtual ~MockCheckedExpectedCall() _destructor_override;

    virtual MockExpectedCall& withName(const SimpleString& name) _override;
    virtual MockExpectedCall& withCallOrder(unsigned int callOrder) _override { return withCallOrder(callOrder, callOrder); }
 8018a30:	b580      	push	{r7, lr}
 8018a32:	b082      	sub	sp, #8
 8018a34:	af00      	add	r7, sp, #0
 8018a36:	6078      	str	r0, [r7, #4]
 8018a38:	6039      	str	r1, [r7, #0]
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	681b      	ldr	r3, [r3, #0]
 8018a3e:	3310      	adds	r3, #16
 8018a40:	681b      	ldr	r3, [r3, #0]
 8018a42:	683a      	ldr	r2, [r7, #0]
 8018a44:	6839      	ldr	r1, [r7, #0]
 8018a46:	6878      	ldr	r0, [r7, #4]
 8018a48:	4798      	blx	r3
 8018a4a:	4603      	mov	r3, r0
 8018a4c:	4618      	mov	r0, r3
 8018a4e:	3708      	adds	r7, #8
 8018a50:	46bd      	mov	sp, r7
 8018a52:	bd80      	pop	{r7, pc}

08018a54 <_ZN23MockIgnoredExpectedCall8withNameERK12SimpleString>:

class MockIgnoredExpectedCall: public MockExpectedCall
{
public:

    virtual MockExpectedCall& withName(const SimpleString&) _override { return *this;}
 8018a54:	b480      	push	{r7}
 8018a56:	b083      	sub	sp, #12
 8018a58:	af00      	add	r7, sp, #0
 8018a5a:	6078      	str	r0, [r7, #4]
 8018a5c:	6039      	str	r1, [r7, #0]
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	4618      	mov	r0, r3
 8018a62:	370c      	adds	r7, #12
 8018a64:	46bd      	mov	sp, r7
 8018a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a6a:	4770      	bx	lr

08018a6c <_ZN23MockIgnoredExpectedCall13withCallOrderEj>:
    virtual MockExpectedCall& withCallOrder(unsigned int) _override { return *this; }
 8018a6c:	b480      	push	{r7}
 8018a6e:	b083      	sub	sp, #12
 8018a70:	af00      	add	r7, sp, #0
 8018a72:	6078      	str	r0, [r7, #4]
 8018a74:	6039      	str	r1, [r7, #0]
 8018a76:	687b      	ldr	r3, [r7, #4]
 8018a78:	4618      	mov	r0, r3
 8018a7a:	370c      	adds	r7, #12
 8018a7c:	46bd      	mov	sp, r7
 8018a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a82:	4770      	bx	lr

08018a84 <_ZN23MockIgnoredExpectedCall13withCallOrderEjj>:
    virtual MockExpectedCall& withCallOrder(unsigned int, unsigned int) _override { return *this; }
 8018a84:	b480      	push	{r7}
 8018a86:	b085      	sub	sp, #20
 8018a88:	af00      	add	r7, sp, #0
 8018a8a:	60f8      	str	r0, [r7, #12]
 8018a8c:	60b9      	str	r1, [r7, #8]
 8018a8e:	607a      	str	r2, [r7, #4]
 8018a90:	68fb      	ldr	r3, [r7, #12]
 8018a92:	4618      	mov	r0, r3
 8018a94:	3714      	adds	r7, #20
 8018a96:	46bd      	mov	sp, r7
 8018a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a9c:	4770      	bx	lr

08018a9e <_ZN23MockIgnoredExpectedCall17withBoolParameterERK12SimpleStringb>:
    virtual MockExpectedCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 8018a9e:	b480      	push	{r7}
 8018aa0:	b085      	sub	sp, #20
 8018aa2:	af00      	add	r7, sp, #0
 8018aa4:	60f8      	str	r0, [r7, #12]
 8018aa6:	60b9      	str	r1, [r7, #8]
 8018aa8:	4613      	mov	r3, r2
 8018aaa:	71fb      	strb	r3, [r7, #7]
 8018aac:	68fb      	ldr	r3, [r7, #12]
 8018aae:	4618      	mov	r0, r3
 8018ab0:	3714      	adds	r7, #20
 8018ab2:	46bd      	mov	sp, r7
 8018ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ab8:	4770      	bx	lr

08018aba <_ZN23MockIgnoredExpectedCall16withIntParameterERK12SimpleStringi>:
    virtual MockExpectedCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 8018aba:	b480      	push	{r7}
 8018abc:	b085      	sub	sp, #20
 8018abe:	af00      	add	r7, sp, #0
 8018ac0:	60f8      	str	r0, [r7, #12]
 8018ac2:	60b9      	str	r1, [r7, #8]
 8018ac4:	607a      	str	r2, [r7, #4]
 8018ac6:	68fb      	ldr	r3, [r7, #12]
 8018ac8:	4618      	mov	r0, r3
 8018aca:	3714      	adds	r7, #20
 8018acc:	46bd      	mov	sp, r7
 8018ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ad2:	4770      	bx	lr

08018ad4 <_ZN23MockIgnoredExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockExpectedCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override{ return *this; }
 8018ad4:	b480      	push	{r7}
 8018ad6:	b085      	sub	sp, #20
 8018ad8:	af00      	add	r7, sp, #0
 8018ada:	60f8      	str	r0, [r7, #12]
 8018adc:	60b9      	str	r1, [r7, #8]
 8018ade:	607a      	str	r2, [r7, #4]
 8018ae0:	68fb      	ldr	r3, [r7, #12]
 8018ae2:	4618      	mov	r0, r3
 8018ae4:	3714      	adds	r7, #20
 8018ae6:	46bd      	mov	sp, r7
 8018ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aec:	4770      	bx	lr

08018aee <_ZN23MockIgnoredExpectedCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockExpectedCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 8018aee:	b480      	push	{r7}
 8018af0:	b085      	sub	sp, #20
 8018af2:	af00      	add	r7, sp, #0
 8018af4:	60f8      	str	r0, [r7, #12]
 8018af6:	60b9      	str	r1, [r7, #8]
 8018af8:	607a      	str	r2, [r7, #4]
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	4618      	mov	r0, r3
 8018afe:	3714      	adds	r7, #20
 8018b00:	46bd      	mov	sp, r7
 8018b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b06:	4770      	bx	lr

08018b08 <_ZN23MockIgnoredExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockExpectedCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 8018b08:	b480      	push	{r7}
 8018b0a:	b085      	sub	sp, #20
 8018b0c:	af00      	add	r7, sp, #0
 8018b0e:	60f8      	str	r0, [r7, #12]
 8018b10:	60b9      	str	r1, [r7, #8]
 8018b12:	607a      	str	r2, [r7, #4]
 8018b14:	68fb      	ldr	r3, [r7, #12]
 8018b16:	4618      	mov	r0, r3
 8018b18:	3714      	adds	r7, #20
 8018b1a:	46bd      	mov	sp, r7
 8018b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b20:	4770      	bx	lr

08018b22 <_ZN23MockIgnoredExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockExpectedCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 8018b22:	b480      	push	{r7}
 8018b24:	b085      	sub	sp, #20
 8018b26:	af00      	add	r7, sp, #0
 8018b28:	60f8      	str	r0, [r7, #12]
 8018b2a:	60b9      	str	r1, [r7, #8]
 8018b2c:	4639      	mov	r1, r7
 8018b2e:	e881 000c 	stmia.w	r1, {r2, r3}
 8018b32:	68fb      	ldr	r3, [r7, #12]
 8018b34:	4618      	mov	r0, r3
 8018b36:	3714      	adds	r7, #20
 8018b38:	46bd      	mov	sp, r7
 8018b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b3e:	4770      	bx	lr

08018b40 <_ZN23MockIgnoredExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockExpectedCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 8018b40:	b480      	push	{r7}
 8018b42:	b085      	sub	sp, #20
 8018b44:	af00      	add	r7, sp, #0
 8018b46:	60f8      	str	r0, [r7, #12]
 8018b48:	60b9      	str	r1, [r7, #8]
 8018b4a:	4639      	mov	r1, r7
 8018b4c:	e881 000c 	stmia.w	r1, {r2, r3}
 8018b50:	68fb      	ldr	r3, [r7, #12]
 8018b52:	4618      	mov	r0, r3
 8018b54:	3714      	adds	r7, #20
 8018b56:	46bd      	mov	sp, r7
 8018b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b5c:	4770      	bx	lr

08018b5e <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 8018b5e:	b480      	push	{r7}
 8018b60:	b085      	sub	sp, #20
 8018b62:	af00      	add	r7, sp, #0
 8018b64:	60f8      	str	r0, [r7, #12]
 8018b66:	60b9      	str	r1, [r7, #8]
 8018b68:	ed87 0b00 	vstr	d0, [r7]
 8018b6c:	68fb      	ldr	r3, [r7, #12]
 8018b6e:	4618      	mov	r0, r3
 8018b70:	3714      	adds	r7, #20
 8018b72:	46bd      	mov	sp, r7
 8018b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b78:	4770      	bx	lr

08018b7a <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringdd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double, double) _override { return *this; }
 8018b7a:	b480      	push	{r7}
 8018b7c:	b087      	sub	sp, #28
 8018b7e:	af00      	add	r7, sp, #0
 8018b80:	6178      	str	r0, [r7, #20]
 8018b82:	6139      	str	r1, [r7, #16]
 8018b84:	ed87 0b02 	vstr	d0, [r7, #8]
 8018b88:	ed87 1b00 	vstr	d1, [r7]
 8018b8c:	697b      	ldr	r3, [r7, #20]
 8018b8e:	4618      	mov	r0, r3
 8018b90:	371c      	adds	r7, #28
 8018b92:	46bd      	mov	sp, r7
 8018b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b98:	4770      	bx	lr

08018b9a <_ZN23MockIgnoredExpectedCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockExpectedCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 8018b9a:	b480      	push	{r7}
 8018b9c:	b085      	sub	sp, #20
 8018b9e:	af00      	add	r7, sp, #0
 8018ba0:	60f8      	str	r0, [r7, #12]
 8018ba2:	60b9      	str	r1, [r7, #8]
 8018ba4:	607a      	str	r2, [r7, #4]
 8018ba6:	68fb      	ldr	r3, [r7, #12]
 8018ba8:	4618      	mov	r0, r3
 8018baa:	3714      	adds	r7, #20
 8018bac:	46bd      	mov	sp, r7
 8018bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bb2:	4770      	bx	lr

08018bb4 <_ZN23MockIgnoredExpectedCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockExpectedCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 8018bb4:	b480      	push	{r7}
 8018bb6:	b085      	sub	sp, #20
 8018bb8:	af00      	add	r7, sp, #0
 8018bba:	60f8      	str	r0, [r7, #12]
 8018bbc:	60b9      	str	r1, [r7, #8]
 8018bbe:	607a      	str	r2, [r7, #4]
 8018bc0:	68fb      	ldr	r3, [r7, #12]
 8018bc2:	4618      	mov	r0, r3
 8018bc4:	3714      	adds	r7, #20
 8018bc6:	46bd      	mov	sp, r7
 8018bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bcc:	4770      	bx	lr

08018bce <_ZN23MockIgnoredExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockExpectedCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 8018bce:	b480      	push	{r7}
 8018bd0:	b085      	sub	sp, #20
 8018bd2:	af00      	add	r7, sp, #0
 8018bd4:	60f8      	str	r0, [r7, #12]
 8018bd6:	60b9      	str	r1, [r7, #8]
 8018bd8:	607a      	str	r2, [r7, #4]
 8018bda:	68fb      	ldr	r3, [r7, #12]
 8018bdc:	4618      	mov	r0, r3
 8018bde:	3714      	adds	r7, #20
 8018be0:	46bd      	mov	sp, r7
 8018be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018be6:	4770      	bx	lr

08018be8 <_ZN23MockIgnoredExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockExpectedCall& withFunctionPointerParameter(const SimpleString& , void(*)()) _override { return *this; }
 8018be8:	b480      	push	{r7}
 8018bea:	b085      	sub	sp, #20
 8018bec:	af00      	add	r7, sp, #0
 8018bee:	60f8      	str	r0, [r7, #12]
 8018bf0:	60b9      	str	r1, [r7, #8]
 8018bf2:	607a      	str	r2, [r7, #4]
 8018bf4:	68fb      	ldr	r3, [r7, #12]
 8018bf6:	4618      	mov	r0, r3
 8018bf8:	3714      	adds	r7, #20
 8018bfa:	46bd      	mov	sp, r7
 8018bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c00:	4770      	bx	lr

08018c02 <_ZN23MockIgnoredExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockExpectedCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override { return *this; }
 8018c02:	b480      	push	{r7}
 8018c04:	b085      	sub	sp, #20
 8018c06:	af00      	add	r7, sp, #0
 8018c08:	60f8      	str	r0, [r7, #12]
 8018c0a:	60b9      	str	r1, [r7, #8]
 8018c0c:	607a      	str	r2, [r7, #4]
 8018c0e:	603b      	str	r3, [r7, #0]
 8018c10:	68fb      	ldr	r3, [r7, #12]
 8018c12:	4618      	mov	r0, r3
 8018c14:	3714      	adds	r7, #20
 8018c16:	46bd      	mov	sp, r7
 8018c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c1c:	4770      	bx	lr

08018c1e <_ZN23MockIgnoredExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 8018c1e:	b480      	push	{r7}
 8018c20:	b085      	sub	sp, #20
 8018c22:	af00      	add	r7, sp, #0
 8018c24:	60f8      	str	r0, [r7, #12]
 8018c26:	60b9      	str	r1, [r7, #8]
 8018c28:	607a      	str	r2, [r7, #4]
 8018c2a:	603b      	str	r3, [r7, #0]
 8018c2c:	68fb      	ldr	r3, [r7, #12]
 8018c2e:	4618      	mov	r0, r3
 8018c30:	3714      	adds	r7, #20
 8018c32:	46bd      	mov	sp, r7
 8018c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c38:	4770      	bx	lr

08018c3a <_ZN23MockIgnoredExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:
    virtual MockExpectedCall& withOutputParameterReturning(const SimpleString&, const void*, size_t) _override { return *this; }
 8018c3a:	b480      	push	{r7}
 8018c3c:	b085      	sub	sp, #20
 8018c3e:	af00      	add	r7, sp, #0
 8018c40:	60f8      	str	r0, [r7, #12]
 8018c42:	60b9      	str	r1, [r7, #8]
 8018c44:	607a      	str	r2, [r7, #4]
 8018c46:	603b      	str	r3, [r7, #0]
 8018c48:	68fb      	ldr	r3, [r7, #12]
 8018c4a:	4618      	mov	r0, r3
 8018c4c:	3714      	adds	r7, #20
 8018c4e:	46bd      	mov	sp, r7
 8018c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c54:	4770      	bx	lr

08018c56 <_ZN23MockIgnoredExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withOutputParameterOfTypeReturning(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 8018c56:	b480      	push	{r7}
 8018c58:	b085      	sub	sp, #20
 8018c5a:	af00      	add	r7, sp, #0
 8018c5c:	60f8      	str	r0, [r7, #12]
 8018c5e:	60b9      	str	r1, [r7, #8]
 8018c60:	607a      	str	r2, [r7, #4]
 8018c62:	603b      	str	r3, [r7, #0]
 8018c64:	68fb      	ldr	r3, [r7, #12]
 8018c66:	4618      	mov	r0, r3
 8018c68:	3714      	adds	r7, #20
 8018c6a:	46bd      	mov	sp, r7
 8018c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c70:	4770      	bx	lr

08018c72 <_ZN23MockIgnoredExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:
    virtual MockExpectedCall& withUnmodifiedOutputParameter(const SimpleString&) _override { return *this; }
 8018c72:	b480      	push	{r7}
 8018c74:	b083      	sub	sp, #12
 8018c76:	af00      	add	r7, sp, #0
 8018c78:	6078      	str	r0, [r7, #4]
 8018c7a:	6039      	str	r1, [r7, #0]
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	4618      	mov	r0, r3
 8018c80:	370c      	adds	r7, #12
 8018c82:	46bd      	mov	sp, r7
 8018c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c88:	4770      	bx	lr

08018c8a <_ZN23MockIgnoredExpectedCall21ignoreOtherParametersEv>:
    virtual MockExpectedCall& ignoreOtherParameters() _override { return *this;}
 8018c8a:	b480      	push	{r7}
 8018c8c:	b083      	sub	sp, #12
 8018c8e:	af00      	add	r7, sp, #0
 8018c90:	6078      	str	r0, [r7, #4]
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	4618      	mov	r0, r3
 8018c96:	370c      	adds	r7, #12
 8018c98:	46bd      	mov	sp, r7
 8018c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c9e:	4770      	bx	lr

08018ca0 <_ZN23MockIgnoredExpectedCall14andReturnValueEb>:

    virtual MockExpectedCall& andReturnValue(bool) _override { return *this; }
 8018ca0:	b480      	push	{r7}
 8018ca2:	b083      	sub	sp, #12
 8018ca4:	af00      	add	r7, sp, #0
 8018ca6:	6078      	str	r0, [r7, #4]
 8018ca8:	460b      	mov	r3, r1
 8018caa:	70fb      	strb	r3, [r7, #3]
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	4618      	mov	r0, r3
 8018cb0:	370c      	adds	r7, #12
 8018cb2:	46bd      	mov	sp, r7
 8018cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cb8:	4770      	bx	lr

08018cba <_ZN23MockIgnoredExpectedCall14andReturnValueEi>:
    virtual MockExpectedCall& andReturnValue(int) _override { return *this; }
 8018cba:	b480      	push	{r7}
 8018cbc:	b083      	sub	sp, #12
 8018cbe:	af00      	add	r7, sp, #0
 8018cc0:	6078      	str	r0, [r7, #4]
 8018cc2:	6039      	str	r1, [r7, #0]
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	4618      	mov	r0, r3
 8018cc8:	370c      	adds	r7, #12
 8018cca:	46bd      	mov	sp, r7
 8018ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cd0:	4770      	bx	lr

08018cd2 <_ZN23MockIgnoredExpectedCall14andReturnValueEj>:
    virtual MockExpectedCall& andReturnValue(unsigned int) _override { return *this; }
 8018cd2:	b480      	push	{r7}
 8018cd4:	b083      	sub	sp, #12
 8018cd6:	af00      	add	r7, sp, #0
 8018cd8:	6078      	str	r0, [r7, #4]
 8018cda:	6039      	str	r1, [r7, #0]
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	4618      	mov	r0, r3
 8018ce0:	370c      	adds	r7, #12
 8018ce2:	46bd      	mov	sp, r7
 8018ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ce8:	4770      	bx	lr

08018cea <_ZN23MockIgnoredExpectedCall14andReturnValueEl>:
    virtual MockExpectedCall& andReturnValue(long int) _override { return *this; }
 8018cea:	b480      	push	{r7}
 8018cec:	b083      	sub	sp, #12
 8018cee:	af00      	add	r7, sp, #0
 8018cf0:	6078      	str	r0, [r7, #4]
 8018cf2:	6039      	str	r1, [r7, #0]
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	4618      	mov	r0, r3
 8018cf8:	370c      	adds	r7, #12
 8018cfa:	46bd      	mov	sp, r7
 8018cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d00:	4770      	bx	lr

08018d02 <_ZN23MockIgnoredExpectedCall14andReturnValueEm>:
    virtual MockExpectedCall& andReturnValue(unsigned long int) _override { return *this; }
 8018d02:	b480      	push	{r7}
 8018d04:	b083      	sub	sp, #12
 8018d06:	af00      	add	r7, sp, #0
 8018d08:	6078      	str	r0, [r7, #4]
 8018d0a:	6039      	str	r1, [r7, #0]
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	4618      	mov	r0, r3
 8018d10:	370c      	adds	r7, #12
 8018d12:	46bd      	mov	sp, r7
 8018d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d18:	4770      	bx	lr

08018d1a <_ZN23MockIgnoredExpectedCall14andReturnValueE17cpputest_longlong>:
    virtual MockExpectedCall& andReturnValue(cpputest_longlong) _override { return *this; }
 8018d1a:	b480      	push	{r7}
 8018d1c:	b085      	sub	sp, #20
 8018d1e:	af00      	add	r7, sp, #0
 8018d20:	60f8      	str	r0, [r7, #12]
 8018d22:	1d3b      	adds	r3, r7, #4
 8018d24:	e883 0006 	stmia.w	r3, {r1, r2}
 8018d28:	68fb      	ldr	r3, [r7, #12]
 8018d2a:	4618      	mov	r0, r3
 8018d2c:	3714      	adds	r7, #20
 8018d2e:	46bd      	mov	sp, r7
 8018d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d34:	4770      	bx	lr

08018d36 <_ZN23MockIgnoredExpectedCall14andReturnValueE18cpputest_ulonglong>:
    virtual MockExpectedCall& andReturnValue(cpputest_ulonglong) _override { return *this; }
 8018d36:	b480      	push	{r7}
 8018d38:	b085      	sub	sp, #20
 8018d3a:	af00      	add	r7, sp, #0
 8018d3c:	60f8      	str	r0, [r7, #12]
 8018d3e:	1d3b      	adds	r3, r7, #4
 8018d40:	e883 0006 	stmia.w	r3, {r1, r2}
 8018d44:	68fb      	ldr	r3, [r7, #12]
 8018d46:	4618      	mov	r0, r3
 8018d48:	3714      	adds	r7, #20
 8018d4a:	46bd      	mov	sp, r7
 8018d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d50:	4770      	bx	lr

08018d52 <_ZN23MockIgnoredExpectedCall14andReturnValueEd>:
    virtual MockExpectedCall& andReturnValue(double) _override { return *this;}
 8018d52:	b480      	push	{r7}
 8018d54:	b085      	sub	sp, #20
 8018d56:	af00      	add	r7, sp, #0
 8018d58:	60f8      	str	r0, [r7, #12]
 8018d5a:	ed87 0b00 	vstr	d0, [r7]
 8018d5e:	68fb      	ldr	r3, [r7, #12]
 8018d60:	4618      	mov	r0, r3
 8018d62:	3714      	adds	r7, #20
 8018d64:	46bd      	mov	sp, r7
 8018d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d6a:	4770      	bx	lr

08018d6c <_ZN23MockIgnoredExpectedCall14andReturnValueEPKc>:
    virtual MockExpectedCall& andReturnValue(const char*) _override { return *this; }
 8018d6c:	b480      	push	{r7}
 8018d6e:	b083      	sub	sp, #12
 8018d70:	af00      	add	r7, sp, #0
 8018d72:	6078      	str	r0, [r7, #4]
 8018d74:	6039      	str	r1, [r7, #0]
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	4618      	mov	r0, r3
 8018d7a:	370c      	adds	r7, #12
 8018d7c:	46bd      	mov	sp, r7
 8018d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d82:	4770      	bx	lr

08018d84 <_ZN23MockIgnoredExpectedCall14andReturnValueEPv>:
    virtual MockExpectedCall& andReturnValue(void*) _override { return *this; }
 8018d84:	b480      	push	{r7}
 8018d86:	b083      	sub	sp, #12
 8018d88:	af00      	add	r7, sp, #0
 8018d8a:	6078      	str	r0, [r7, #4]
 8018d8c:	6039      	str	r1, [r7, #0]
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	4618      	mov	r0, r3
 8018d92:	370c      	adds	r7, #12
 8018d94:	46bd      	mov	sp, r7
 8018d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d9a:	4770      	bx	lr

08018d9c <_ZN23MockIgnoredExpectedCall14andReturnValueEPKv>:
    virtual MockExpectedCall& andReturnValue(const void*) _override { return *this; }
 8018d9c:	b480      	push	{r7}
 8018d9e:	b083      	sub	sp, #12
 8018da0:	af00      	add	r7, sp, #0
 8018da2:	6078      	str	r0, [r7, #4]
 8018da4:	6039      	str	r1, [r7, #0]
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	4618      	mov	r0, r3
 8018daa:	370c      	adds	r7, #12
 8018dac:	46bd      	mov	sp, r7
 8018dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018db2:	4770      	bx	lr

08018db4 <_ZN23MockIgnoredExpectedCall14andReturnValueEPFvvE>:
    virtual MockExpectedCall& andReturnValue(void (*)()) _override { return *this; }
 8018db4:	b480      	push	{r7}
 8018db6:	b083      	sub	sp, #12
 8018db8:	af00      	add	r7, sp, #0
 8018dba:	6078      	str	r0, [r7, #4]
 8018dbc:	6039      	str	r1, [r7, #0]
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	4618      	mov	r0, r3
 8018dc2:	370c      	adds	r7, #12
 8018dc4:	46bd      	mov	sp, r7
 8018dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dca:	4770      	bx	lr

08018dcc <_ZN23MockIgnoredExpectedCall8onObjectEPv>:

    virtual MockExpectedCall& onObject(void*) _override { return *this; }
 8018dcc:	b480      	push	{r7}
 8018dce:	b083      	sub	sp, #12
 8018dd0:	af00      	add	r7, sp, #0
 8018dd2:	6078      	str	r0, [r7, #4]
 8018dd4:	6039      	str	r1, [r7, #0]
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	4618      	mov	r0, r3
 8018dda:	370c      	adds	r7, #12
 8018ddc:	46bd      	mov	sp, r7
 8018dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018de2:	4770      	bx	lr

08018de4 <_ZN16MockExpectedCallC1Ev>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCall::MockExpectedCall()
 8018de4:	b480      	push	{r7}
 8018de6:	b083      	sub	sp, #12
 8018de8:	af00      	add	r7, sp, #0
 8018dea:	6078      	str	r0, [r7, #4]
 8018dec:	4a04      	ldr	r2, [pc, #16]	; (8018e00 <_ZN16MockExpectedCallC1Ev+0x1c>)
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	601a      	str	r2, [r3, #0]
{
}
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	4618      	mov	r0, r3
 8018df6:	370c      	adds	r7, #12
 8018df8:	46bd      	mov	sp, r7
 8018dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dfe:	4770      	bx	lr
 8018e00:	080271a0 	.word	0x080271a0

08018e04 <_ZN16MockExpectedCallD1Ev>:

MockExpectedCall::~MockExpectedCall()
 8018e04:	b480      	push	{r7}
 8018e06:	b083      	sub	sp, #12
 8018e08:	af00      	add	r7, sp, #0
 8018e0a:	6078      	str	r0, [r7, #4]
 8018e0c:	4a04      	ldr	r2, [pc, #16]	; (8018e20 <_ZN16MockExpectedCallD1Ev+0x1c>)
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	601a      	str	r2, [r3, #0]
{
}
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	4618      	mov	r0, r3
 8018e16:	370c      	adds	r7, #12
 8018e18:	46bd      	mov	sp, r7
 8018e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e1e:	4770      	bx	lr
 8018e20:	080271a0 	.word	0x080271a0

08018e24 <_Z10StringFromRK14MockNamedValue>:

SimpleString StringFrom(const MockNamedValue& parameter)
{
 8018e24:	b580      	push	{r7, lr}
 8018e26:	b082      	sub	sp, #8
 8018e28:	af00      	add	r7, sp, #0
 8018e2a:	6078      	str	r0, [r7, #4]
 8018e2c:	6039      	str	r1, [r7, #0]
    return parameter.toString();
 8018e2e:	683b      	ldr	r3, [r7, #0]
 8018e30:	681b      	ldr	r3, [r3, #0]
 8018e32:	3358      	adds	r3, #88	; 0x58
 8018e34:	681b      	ldr	r3, [r3, #0]
 8018e36:	687a      	ldr	r2, [r7, #4]
 8018e38:	6839      	ldr	r1, [r7, #0]
 8018e3a:	4610      	mov	r0, r2
 8018e3c:	4798      	blx	r3
}
 8018e3e:	6878      	ldr	r0, [r7, #4]
 8018e40:	3708      	adds	r7, #8
 8018e42:	46bd      	mov	sp, r7
 8018e44:	bd80      	pop	{r7, pc}

08018e46 <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>:

void MockCheckedExpectedCall::setName(const SimpleString& name)
{
 8018e46:	b580      	push	{r7, lr}
 8018e48:	b082      	sub	sp, #8
 8018e4a:	af00      	add	r7, sp, #0
 8018e4c:	6078      	str	r0, [r7, #4]
 8018e4e:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	3304      	adds	r3, #4
 8018e54:	6839      	ldr	r1, [r7, #0]
 8018e56:	4618      	mov	r0, r3
 8018e58:	f7f2 fbcb 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
}
 8018e5c:	bf00      	nop
 8018e5e:	3708      	adds	r7, #8
 8018e60:	46bd      	mov	sp, r7
 8018e62:	bd80      	pop	{r7, pc}

08018e64 <_ZNK23MockCheckedExpectedCall7getNameEv>:

SimpleString MockCheckedExpectedCall::getName() const
{
 8018e64:	b580      	push	{r7, lr}
 8018e66:	b082      	sub	sp, #8
 8018e68:	af00      	add	r7, sp, #0
 8018e6a:	6078      	str	r0, [r7, #4]
 8018e6c:	6039      	str	r1, [r7, #0]
    return functionName_;
 8018e6e:	683b      	ldr	r3, [r7, #0]
 8018e70:	3304      	adds	r3, #4
 8018e72:	4619      	mov	r1, r3
 8018e74:	6878      	ldr	r0, [r7, #4]
 8018e76:	f7f2 fba4 	bl	800b5c2 <_ZN12SimpleStringC1ERKS_>
}
 8018e7a:	6878      	ldr	r0, [r7, #4]
 8018e7c:	3708      	adds	r7, #8
 8018e7e:	46bd      	mov	sp, r7
 8018e80:	bd80      	pop	{r7, pc}
	...

08018e84 <_ZN23MockCheckedExpectedCallC1Ej>:
{
    inputParameters_ = new MockNamedValueList();
    outputParameters_ = new MockNamedValueList();
}

MockCheckedExpectedCall::MockCheckedExpectedCall(unsigned int numCalls)
 8018e84:	b590      	push	{r4, r7, lr}
 8018e86:	b085      	sub	sp, #20
 8018e88:	af00      	add	r7, sp, #0
 8018e8a:	6078      	str	r0, [r7, #4]
 8018e8c:	6039      	str	r1, [r7, #0]
    : ignoreOtherParameters_(false), isActualCallMatchFinalized_(false),
      initialExpectedCallOrder_(NO_EXPECTED_CALL_ORDER), finalExpectedCallOrder_(NO_EXPECTED_CALL_ORDER),
      outOfOrder_(false), returnValue_(""), objectPtr_(NULLPTR), isSpecificObjectExpected_(false), wasPassedToObject_(true),
      actualCalls_(0), expectedCalls_(numCalls)
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	4618      	mov	r0, r3
 8018e92:	f7ff ffa7 	bl	8018de4 <_ZN16MockExpectedCallC1Ev>
 8018e96:	4a2c      	ldr	r2, [pc, #176]	; (8018f48 <_ZN23MockCheckedExpectedCallC1Ej+0xc4>)
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	601a      	str	r2, [r3, #0]
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	3304      	adds	r3, #4
 8018ea0:	492a      	ldr	r1, [pc, #168]	; (8018f4c <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 8018ea2:	4618      	mov	r0, r3
 8018ea4:	f7f2 fb39 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	2200      	movs	r2, #0
 8018eac:	731a      	strb	r2, [r3, #12]
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	2200      	movs	r2, #0
 8018eb2:	735a      	strb	r2, [r3, #13]
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	2200      	movs	r2, #0
 8018eb8:	611a      	str	r2, [r3, #16]
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	2200      	movs	r2, #0
 8018ebe:	615a      	str	r2, [r3, #20]
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	2200      	movs	r2, #0
 8018ec4:	761a      	strb	r2, [r3, #24]
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8018ecc:	f107 0308 	add.w	r3, r7, #8
 8018ed0:	491e      	ldr	r1, [pc, #120]	; (8018f4c <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 8018ed2:	4618      	mov	r0, r3
 8018ed4:	f7f2 fb21 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8018ed8:	f107 0308 	add.w	r3, r7, #8
 8018edc:	4619      	mov	r1, r3
 8018ede:	4620      	mov	r0, r4
 8018ee0:	f003 f840 	bl	801bf64 <_ZN14MockNamedValueC1ERK12SimpleString>
 8018ee4:	f107 0308 	add.w	r3, r7, #8
 8018ee8:	4618      	mov	r0, r3
 8018eea:	f7f2 fece 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	2200      	movs	r2, #0
 8018ef2:	661a      	str	r2, [r3, #96]	; 0x60
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	2200      	movs	r2, #0
 8018ef8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	2201      	movs	r2, #1
 8018f00:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	2200      	movs	r2, #0
 8018f08:	669a      	str	r2, [r3, #104]	; 0x68
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	683a      	ldr	r2, [r7, #0]
 8018f0e:	66da      	str	r2, [r3, #108]	; 0x6c
{
    inputParameters_ = new MockNamedValueList();
 8018f10:	2246      	movs	r2, #70	; 0x46
 8018f12:	490f      	ldr	r1, [pc, #60]	; (8018f50 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 8018f14:	2004      	movs	r0, #4
 8018f16:	f7ef ff3d 	bl	8008d94 <_ZnwjPKci>
 8018f1a:	4604      	mov	r4, r0
 8018f1c:	4620      	mov	r0, r4
 8018f1e:	f004 ff34 	bl	801dd8a <_ZN18MockNamedValueListC1Ev>
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	61dc      	str	r4, [r3, #28]
    outputParameters_ = new MockNamedValueList();
 8018f26:	2247      	movs	r2, #71	; 0x47
 8018f28:	4909      	ldr	r1, [pc, #36]	; (8018f50 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 8018f2a:	2004      	movs	r0, #4
 8018f2c:	f7ef ff32 	bl	8008d94 <_ZnwjPKci>
 8018f30:	4604      	mov	r4, r0
 8018f32:	4620      	mov	r0, r4
 8018f34:	f004 ff29 	bl	801dd8a <_ZN18MockNamedValueListC1Ev>
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	621c      	str	r4, [r3, #32]
}
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	4618      	mov	r0, r3
 8018f40:	3714      	adds	r7, #20
 8018f42:	46bd      	mov	sp, r7
 8018f44:	bd90      	pop	{r4, r7, pc}
 8018f46:	bf00      	nop
 8018f48:	08026fe4 	.word	0x08026fe4
 8018f4c:	0802461c 	.word	0x0802461c
 8018f50:	08024620 	.word	0x08024620

08018f54 <_ZN23MockCheckedExpectedCallD1Ev>:

MockCheckedExpectedCall::~MockCheckedExpectedCall()
 8018f54:	b580      	push	{r7, lr}
 8018f56:	b082      	sub	sp, #8
 8018f58:	af00      	add	r7, sp, #0
 8018f5a:	6078      	str	r0, [r7, #4]
 8018f5c:	4a17      	ldr	r2, [pc, #92]	; (8018fbc <_ZN23MockCheckedExpectedCallD1Ev+0x68>)
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	601a      	str	r2, [r3, #0]
{
    inputParameters_->clear();
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	69db      	ldr	r3, [r3, #28]
 8018f66:	4618      	mov	r0, r3
 8018f68:	f004 ff1d 	bl	801dda6 <_ZN18MockNamedValueList5clearEv>
    delete inputParameters_;
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	69db      	ldr	r3, [r3, #28]
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d003      	beq.n	8018f7c <_ZN23MockCheckedExpectedCallD1Ev+0x28>
 8018f74:	2104      	movs	r1, #4
 8018f76:	4618      	mov	r0, r3
 8018f78:	f7ef ff20 	bl	8008dbc <_ZdlPvj>
    outputParameters_->clear();
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	6a1b      	ldr	r3, [r3, #32]
 8018f80:	4618      	mov	r0, r3
 8018f82:	f004 ff10 	bl	801dda6 <_ZN18MockNamedValueList5clearEv>
    delete outputParameters_;
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	6a1b      	ldr	r3, [r3, #32]
 8018f8a:	2b00      	cmp	r3, #0
 8018f8c:	d003      	beq.n	8018f96 <_ZN23MockCheckedExpectedCallD1Ev+0x42>
 8018f8e:	2104      	movs	r1, #4
 8018f90:	4618      	mov	r0, r3
 8018f92:	f7ef ff13 	bl	8008dbc <_ZdlPvj>
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	3328      	adds	r3, #40	; 0x28
 8018f9a:	4618      	mov	r0, r3
 8018f9c:	f003 f80c 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	3304      	adds	r3, #4
 8018fa4:	4618      	mov	r0, r3
 8018fa6:	f7f2 fe70 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	4618      	mov	r0, r3
 8018fae:	f7ff ff29 	bl	8018e04 <_ZN16MockExpectedCallD1Ev>
}
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	4618      	mov	r0, r3
 8018fb6:	3708      	adds	r7, #8
 8018fb8:	46bd      	mov	sp, r7
 8018fba:	bd80      	pop	{r7, pc}
 8018fbc:	08026fe4 	.word	0x08026fe4

08018fc0 <_ZN23MockCheckedExpectedCallD0Ev>:
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 8018fc0:	b580      	push	{r7, lr}
 8018fc2:	b082      	sub	sp, #8
 8018fc4:	af00      	add	r7, sp, #0
 8018fc6:	6078      	str	r0, [r7, #4]
}
 8018fc8:	6878      	ldr	r0, [r7, #4]
 8018fca:	f7ff ffc3 	bl	8018f54 <_ZN23MockCheckedExpectedCallD1Ev>
 8018fce:	2170      	movs	r1, #112	; 0x70
 8018fd0:	6878      	ldr	r0, [r7, #4]
 8018fd2:	f7ef fef3 	bl	8008dbc <_ZdlPvj>
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	4618      	mov	r0, r3
 8018fda:	3708      	adds	r7, #8
 8018fdc:	46bd      	mov	sp, r7
 8018fde:	bd80      	pop	{r7, pc}

08018fe0 <_ZN23MockCheckedExpectedCall8withNameERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withName(const SimpleString& name)
{
 8018fe0:	b580      	push	{r7, lr}
 8018fe2:	b082      	sub	sp, #8
 8018fe4:	af00      	add	r7, sp, #0
 8018fe6:	6078      	str	r0, [r7, #4]
 8018fe8:	6039      	str	r1, [r7, #0]
    setName(name);
 8018fea:	6839      	ldr	r1, [r7, #0]
 8018fec:	6878      	ldr	r0, [r7, #4]
 8018fee:	f7ff ff2a 	bl	8018e46 <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>
    return *this;
 8018ff2:	687b      	ldr	r3, [r7, #4]
}
 8018ff4:	4618      	mov	r0, r3
 8018ff6:	3708      	adds	r7, #8
 8018ff8:	46bd      	mov	sp, r7
 8018ffa:	bd80      	pop	{r7, pc}

08018ffc <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb>:

MockExpectedCall& MockCheckedExpectedCall::withBoolParameter(const SimpleString& name, bool value)
{
 8018ffc:	b590      	push	{r4, r7, lr}
 8018ffe:	b087      	sub	sp, #28
 8019000:	af00      	add	r7, sp, #0
 8019002:	60f8      	str	r0, [r7, #12]
 8019004:	60b9      	str	r1, [r7, #8]
 8019006:	4613      	mov	r3, r2
 8019008:	71fb      	strb	r3, [r7, #7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801900a:	225a      	movs	r2, #90	; 0x5a
 801900c:	490e      	ldr	r1, [pc, #56]	; (8019048 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb+0x4c>)
 801900e:	2038      	movs	r0, #56	; 0x38
 8019010:	f7ef fec0 	bl	8008d94 <_ZnwjPKci>
 8019014:	4604      	mov	r4, r0
 8019016:	68b9      	ldr	r1, [r7, #8]
 8019018:	4620      	mov	r0, r4
 801901a:	f001 f851 	bl	801a0c0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801901e:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8019020:	68fb      	ldr	r3, [r7, #12]
 8019022:	69db      	ldr	r3, [r3, #28]
 8019024:	6979      	ldr	r1, [r7, #20]
 8019026:	4618      	mov	r0, r3
 8019028:	f004 fee0 	bl	801ddec <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801902c:	697b      	ldr	r3, [r7, #20]
 801902e:	681b      	ldr	r3, [r3, #0]
 8019030:	3308      	adds	r3, #8
 8019032:	681b      	ldr	r3, [r3, #0]
 8019034:	79fa      	ldrb	r2, [r7, #7]
 8019036:	4611      	mov	r1, r2
 8019038:	6978      	ldr	r0, [r7, #20]
 801903a:	4798      	blx	r3
    return *this;
 801903c:	68fb      	ldr	r3, [r7, #12]
}
 801903e:	4618      	mov	r0, r3
 8019040:	371c      	adds	r7, #28
 8019042:	46bd      	mov	sp, r7
 8019044:	bd90      	pop	{r4, r7, pc}
 8019046:	bf00      	nop
 8019048:	08024620 	.word	0x08024620

0801904c <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 801904c:	b590      	push	{r4, r7, lr}
 801904e:	b087      	sub	sp, #28
 8019050:	af00      	add	r7, sp, #0
 8019052:	60f8      	str	r0, [r7, #12]
 8019054:	60b9      	str	r1, [r7, #8]
 8019056:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8019058:	2262      	movs	r2, #98	; 0x62
 801905a:	490e      	ldr	r1, [pc, #56]	; (8019094 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj+0x48>)
 801905c:	2038      	movs	r0, #56	; 0x38
 801905e:	f7ef fe99 	bl	8008d94 <_ZnwjPKci>
 8019062:	4604      	mov	r4, r0
 8019064:	68b9      	ldr	r1, [r7, #8]
 8019066:	4620      	mov	r0, r4
 8019068:	f001 f82a 	bl	801a0c0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801906c:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801906e:	68fb      	ldr	r3, [r7, #12]
 8019070:	69db      	ldr	r3, [r3, #28]
 8019072:	6979      	ldr	r1, [r7, #20]
 8019074:	4618      	mov	r0, r3
 8019076:	f004 feb9 	bl	801ddec <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801907a:	697b      	ldr	r3, [r7, #20]
 801907c:	681b      	ldr	r3, [r3, #0]
 801907e:	3310      	adds	r3, #16
 8019080:	681b      	ldr	r3, [r3, #0]
 8019082:	6879      	ldr	r1, [r7, #4]
 8019084:	6978      	ldr	r0, [r7, #20]
 8019086:	4798      	blx	r3
    return *this;
 8019088:	68fb      	ldr	r3, [r7, #12]
}
 801908a:	4618      	mov	r0, r3
 801908c:	371c      	adds	r7, #28
 801908e:	46bd      	mov	sp, r7
 8019090:	bd90      	pop	{r4, r7, pc}
 8019092:	bf00      	nop
 8019094:	08024620 	.word	0x08024620

08019098 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi>:

MockExpectedCall& MockCheckedExpectedCall::withIntParameter(const SimpleString& name, int value)
{
 8019098:	b590      	push	{r4, r7, lr}
 801909a:	b087      	sub	sp, #28
 801909c:	af00      	add	r7, sp, #0
 801909e:	60f8      	str	r0, [r7, #12]
 80190a0:	60b9      	str	r1, [r7, #8]
 80190a2:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80190a4:	226a      	movs	r2, #106	; 0x6a
 80190a6:	490e      	ldr	r1, [pc, #56]	; (80190e0 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi+0x48>)
 80190a8:	2038      	movs	r0, #56	; 0x38
 80190aa:	f7ef fe73 	bl	8008d94 <_ZnwjPKci>
 80190ae:	4604      	mov	r4, r0
 80190b0:	68b9      	ldr	r1, [r7, #8]
 80190b2:	4620      	mov	r0, r4
 80190b4:	f001 f804 	bl	801a0c0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80190b8:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80190ba:	68fb      	ldr	r3, [r7, #12]
 80190bc:	69db      	ldr	r3, [r3, #28]
 80190be:	6979      	ldr	r1, [r7, #20]
 80190c0:	4618      	mov	r0, r3
 80190c2:	f004 fe93 	bl	801ddec <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 80190c6:	697b      	ldr	r3, [r7, #20]
 80190c8:	681b      	ldr	r3, [r3, #0]
 80190ca:	330c      	adds	r3, #12
 80190cc:	681b      	ldr	r3, [r3, #0]
 80190ce:	6879      	ldr	r1, [r7, #4]
 80190d0:	6978      	ldr	r0, [r7, #20]
 80190d2:	4798      	blx	r3
    return *this;
 80190d4:	68fb      	ldr	r3, [r7, #12]
}
 80190d6:	4618      	mov	r0, r3
 80190d8:	371c      	adds	r7, #28
 80190da:	46bd      	mov	sp, r7
 80190dc:	bd90      	pop	{r4, r7, pc}
 80190de:	bf00      	nop
 80190e0:	08024620 	.word	0x08024620

080190e4 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl>:

MockExpectedCall& MockCheckedExpectedCall::withLongIntParameter(const SimpleString& name, long int value)
{
 80190e4:	b590      	push	{r4, r7, lr}
 80190e6:	b087      	sub	sp, #28
 80190e8:	af00      	add	r7, sp, #0
 80190ea:	60f8      	str	r0, [r7, #12]
 80190ec:	60b9      	str	r1, [r7, #8]
 80190ee:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80190f0:	2272      	movs	r2, #114	; 0x72
 80190f2:	490e      	ldr	r1, [pc, #56]	; (801912c <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl+0x48>)
 80190f4:	2038      	movs	r0, #56	; 0x38
 80190f6:	f7ef fe4d 	bl	8008d94 <_ZnwjPKci>
 80190fa:	4604      	mov	r4, r0
 80190fc:	68b9      	ldr	r1, [r7, #8]
 80190fe:	4620      	mov	r0, r4
 8019100:	f000 ffde 	bl	801a0c0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8019104:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8019106:	68fb      	ldr	r3, [r7, #12]
 8019108:	69db      	ldr	r3, [r3, #28]
 801910a:	6979      	ldr	r1, [r7, #20]
 801910c:	4618      	mov	r0, r3
 801910e:	f004 fe6d 	bl	801ddec <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8019112:	697b      	ldr	r3, [r7, #20]
 8019114:	681b      	ldr	r3, [r3, #0]
 8019116:	3314      	adds	r3, #20
 8019118:	681b      	ldr	r3, [r3, #0]
 801911a:	6879      	ldr	r1, [r7, #4]
 801911c:	6978      	ldr	r0, [r7, #20]
 801911e:	4798      	blx	r3
    return *this;
 8019120:	68fb      	ldr	r3, [r7, #12]
}
 8019122:	4618      	mov	r0, r3
 8019124:	371c      	adds	r7, #28
 8019126:	46bd      	mov	sp, r7
 8019128:	bd90      	pop	{r4, r7, pc}
 801912a:	bf00      	nop
 801912c:	08024620 	.word	0x08024620

08019130 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8019130:	b590      	push	{r4, r7, lr}
 8019132:	b087      	sub	sp, #28
 8019134:	af00      	add	r7, sp, #0
 8019136:	60f8      	str	r0, [r7, #12]
 8019138:	60b9      	str	r1, [r7, #8]
 801913a:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801913c:	227a      	movs	r2, #122	; 0x7a
 801913e:	490e      	ldr	r1, [pc, #56]	; (8019178 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm+0x48>)
 8019140:	2038      	movs	r0, #56	; 0x38
 8019142:	f7ef fe27 	bl	8008d94 <_ZnwjPKci>
 8019146:	4604      	mov	r4, r0
 8019148:	68b9      	ldr	r1, [r7, #8]
 801914a:	4620      	mov	r0, r4
 801914c:	f000 ffb8 	bl	801a0c0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8019150:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8019152:	68fb      	ldr	r3, [r7, #12]
 8019154:	69db      	ldr	r3, [r3, #28]
 8019156:	6979      	ldr	r1, [r7, #20]
 8019158:	4618      	mov	r0, r3
 801915a:	f004 fe47 	bl	801ddec <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801915e:	697b      	ldr	r3, [r7, #20]
 8019160:	681b      	ldr	r3, [r3, #0]
 8019162:	3318      	adds	r3, #24
 8019164:	681b      	ldr	r3, [r3, #0]
 8019166:	6879      	ldr	r1, [r7, #4]
 8019168:	6978      	ldr	r0, [r7, #20]
 801916a:	4798      	blx	r3
    return *this;
 801916c:	68fb      	ldr	r3, [r7, #12]
}
 801916e:	4618      	mov	r0, r3
 8019170:	371c      	adds	r7, #28
 8019172:	46bd      	mov	sp, r7
 8019174:	bd90      	pop	{r4, r7, pc}
 8019176:	bf00      	nop
 8019178:	08024620 	.word	0x08024620

0801917c <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 801917c:	b5b0      	push	{r4, r5, r7, lr}
 801917e:	b086      	sub	sp, #24
 8019180:	af02      	add	r7, sp, #8
 8019182:	60f8      	str	r0, [r7, #12]
 8019184:	60b9      	str	r1, [r7, #8]
 8019186:	4639      	mov	r1, r7
 8019188:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801918c:	f7f9 fda8 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 8019190:	4604      	mov	r4, r0
 8019192:	6823      	ldr	r3, [r4, #0]
 8019194:	3368      	adds	r3, #104	; 0x68
 8019196:	681d      	ldr	r5, [r3, #0]
 8019198:	f7f9 fdb2 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801919c:	4603      	mov	r3, r0
 801919e:	9300      	str	r3, [sp, #0]
 80191a0:	2396      	movs	r3, #150	; 0x96
 80191a2:	4a04      	ldr	r2, [pc, #16]	; (80191b4 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x38>)
 80191a4:	4904      	ldr	r1, [pc, #16]	; (80191b8 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 80191a6:	4620      	mov	r0, r4
 80191a8:	47a8      	blx	r5
    return *this;
 80191aa:	68fb      	ldr	r3, [r7, #12]
}
 80191ac:	4618      	mov	r0, r3
 80191ae:	3710      	adds	r7, #16
 80191b0:	46bd      	mov	sp, r7
 80191b2:	bdb0      	pop	{r4, r5, r7, pc}
 80191b4:	08024620 	.word	0x08024620
 80191b8:	0802463c 	.word	0x0802463c

080191bc <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 80191bc:	b5b0      	push	{r4, r5, r7, lr}
 80191be:	b086      	sub	sp, #24
 80191c0:	af02      	add	r7, sp, #8
 80191c2:	60f8      	str	r0, [r7, #12]
 80191c4:	60b9      	str	r1, [r7, #8]
 80191c6:	4639      	mov	r1, r7
 80191c8:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 80191cc:	f7f9 fd88 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 80191d0:	4604      	mov	r4, r0
 80191d2:	6823      	ldr	r3, [r4, #0]
 80191d4:	3368      	adds	r3, #104	; 0x68
 80191d6:	681d      	ldr	r5, [r3, #0]
 80191d8:	f7f9 fd92 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80191dc:	4603      	mov	r3, r0
 80191de:	9300      	str	r3, [sp, #0]
 80191e0:	239c      	movs	r3, #156	; 0x9c
 80191e2:	4a04      	ldr	r2, [pc, #16]	; (80191f4 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x38>)
 80191e4:	4904      	ldr	r1, [pc, #16]	; (80191f8 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 80191e6:	4620      	mov	r0, r4
 80191e8:	47a8      	blx	r5
    return *this;
 80191ea:	68fb      	ldr	r3, [r7, #12]
}
 80191ec:	4618      	mov	r0, r3
 80191ee:	3710      	adds	r7, #16
 80191f0:	46bd      	mov	sp, r7
 80191f2:	bdb0      	pop	{r4, r5, r7, pc}
 80191f4:	08024620 	.word	0x08024620
 80191f8:	0802465c 	.word	0x0802465c

080191fc <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value)
{
 80191fc:	b590      	push	{r4, r7, lr}
 80191fe:	b087      	sub	sp, #28
 8019200:	af00      	add	r7, sp, #0
 8019202:	60f8      	str	r0, [r7, #12]
 8019204:	60b9      	str	r1, [r7, #8]
 8019206:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801920a:	22a4      	movs	r2, #164	; 0xa4
 801920c:	490e      	ldr	r1, [pc, #56]	; (8019248 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd+0x4c>)
 801920e:	2038      	movs	r0, #56	; 0x38
 8019210:	f7ef fdc0 	bl	8008d94 <_ZnwjPKci>
 8019214:	4604      	mov	r4, r0
 8019216:	68b9      	ldr	r1, [r7, #8]
 8019218:	4620      	mov	r0, r4
 801921a:	f000 ff51 	bl	801a0c0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801921e:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8019220:	68fb      	ldr	r3, [r7, #12]
 8019222:	69db      	ldr	r3, [r3, #28]
 8019224:	6979      	ldr	r1, [r7, #20]
 8019226:	4618      	mov	r0, r3
 8019228:	f004 fde0 	bl	801ddec <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801922c:	697b      	ldr	r3, [r7, #20]
 801922e:	681b      	ldr	r3, [r3, #0]
 8019230:	3324      	adds	r3, #36	; 0x24
 8019232:	681b      	ldr	r3, [r3, #0]
 8019234:	ed97 0b00 	vldr	d0, [r7]
 8019238:	6978      	ldr	r0, [r7, #20]
 801923a:	4798      	blx	r3
    return *this;
 801923c:	68fb      	ldr	r3, [r7, #12]
}
 801923e:	4618      	mov	r0, r3
 8019240:	371c      	adds	r7, #28
 8019242:	46bd      	mov	sp, r7
 8019244:	bd90      	pop	{r4, r7, pc}
 8019246:	bf00      	nop
 8019248:	08024620 	.word	0x08024620

0801924c <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd>:

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value, double tolerance)
{
 801924c:	b590      	push	{r4, r7, lr}
 801924e:	b089      	sub	sp, #36	; 0x24
 8019250:	af00      	add	r7, sp, #0
 8019252:	6178      	str	r0, [r7, #20]
 8019254:	6139      	str	r1, [r7, #16]
 8019256:	ed87 0b02 	vstr	d0, [r7, #8]
 801925a:	ed87 1b00 	vstr	d1, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801925e:	22ac      	movs	r2, #172	; 0xac
 8019260:	490f      	ldr	r1, [pc, #60]	; (80192a0 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd+0x54>)
 8019262:	2038      	movs	r0, #56	; 0x38
 8019264:	f7ef fd96 	bl	8008d94 <_ZnwjPKci>
 8019268:	4604      	mov	r4, r0
 801926a:	6939      	ldr	r1, [r7, #16]
 801926c:	4620      	mov	r0, r4
 801926e:	f000 ff27 	bl	801a0c0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8019272:	61fc      	str	r4, [r7, #28]
    inputParameters_->add(newParameter);
 8019274:	697b      	ldr	r3, [r7, #20]
 8019276:	69db      	ldr	r3, [r3, #28]
 8019278:	69f9      	ldr	r1, [r7, #28]
 801927a:	4618      	mov	r0, r3
 801927c:	f004 fdb6 	bl	801ddec <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value, tolerance);
 8019280:	69fb      	ldr	r3, [r7, #28]
 8019282:	681b      	ldr	r3, [r3, #0]
 8019284:	3328      	adds	r3, #40	; 0x28
 8019286:	681b      	ldr	r3, [r3, #0]
 8019288:	ed97 1b00 	vldr	d1, [r7]
 801928c:	ed97 0b02 	vldr	d0, [r7, #8]
 8019290:	69f8      	ldr	r0, [r7, #28]
 8019292:	4798      	blx	r3
    return *this;
 8019294:	697b      	ldr	r3, [r7, #20]
}
 8019296:	4618      	mov	r0, r3
 8019298:	3724      	adds	r7, #36	; 0x24
 801929a:	46bd      	mov	sp, r7
 801929c:	bd90      	pop	{r4, r7, pc}
 801929e:	bf00      	nop
 80192a0:	08024620 	.word	0x08024620

080192a4 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc>:

MockExpectedCall& MockCheckedExpectedCall::withStringParameter(const SimpleString& name, const char* value)
{
 80192a4:	b590      	push	{r4, r7, lr}
 80192a6:	b087      	sub	sp, #28
 80192a8:	af00      	add	r7, sp, #0
 80192aa:	60f8      	str	r0, [r7, #12]
 80192ac:	60b9      	str	r1, [r7, #8]
 80192ae:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80192b0:	22b4      	movs	r2, #180	; 0xb4
 80192b2:	490e      	ldr	r1, [pc, #56]	; (80192ec <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc+0x48>)
 80192b4:	2038      	movs	r0, #56	; 0x38
 80192b6:	f7ef fd6d 	bl	8008d94 <_ZnwjPKci>
 80192ba:	4604      	mov	r4, r0
 80192bc:	68b9      	ldr	r1, [r7, #8]
 80192be:	4620      	mov	r0, r4
 80192c0:	f000 fefe 	bl	801a0c0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80192c4:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80192c6:	68fb      	ldr	r3, [r7, #12]
 80192c8:	69db      	ldr	r3, [r3, #28]
 80192ca:	6979      	ldr	r1, [r7, #20]
 80192cc:	4618      	mov	r0, r3
 80192ce:	f004 fd8d 	bl	801ddec <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 80192d2:	697b      	ldr	r3, [r7, #20]
 80192d4:	681b      	ldr	r3, [r3, #0]
 80192d6:	3338      	adds	r3, #56	; 0x38
 80192d8:	681b      	ldr	r3, [r3, #0]
 80192da:	6879      	ldr	r1, [r7, #4]
 80192dc:	6978      	ldr	r0, [r7, #20]
 80192de:	4798      	blx	r3
    return *this;
 80192e0:	68fb      	ldr	r3, [r7, #12]
}
 80192e2:	4618      	mov	r0, r3
 80192e4:	371c      	adds	r7, #28
 80192e6:	46bd      	mov	sp, r7
 80192e8:	bd90      	pop	{r4, r7, pc}
 80192ea:	bf00      	nop
 80192ec:	08024620 	.word	0x08024620

080192f0 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv>:

MockExpectedCall& MockCheckedExpectedCall::withPointerParameter(const SimpleString& name, void* value)
{
 80192f0:	b590      	push	{r4, r7, lr}
 80192f2:	b087      	sub	sp, #28
 80192f4:	af00      	add	r7, sp, #0
 80192f6:	60f8      	str	r0, [r7, #12]
 80192f8:	60b9      	str	r1, [r7, #8]
 80192fa:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80192fc:	22bc      	movs	r2, #188	; 0xbc
 80192fe:	490e      	ldr	r1, [pc, #56]	; (8019338 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv+0x48>)
 8019300:	2038      	movs	r0, #56	; 0x38
 8019302:	f7ef fd47 	bl	8008d94 <_ZnwjPKci>
 8019306:	4604      	mov	r4, r0
 8019308:	68b9      	ldr	r1, [r7, #8]
 801930a:	4620      	mov	r0, r4
 801930c:	f000 fed8 	bl	801a0c0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8019310:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8019312:	68fb      	ldr	r3, [r7, #12]
 8019314:	69db      	ldr	r3, [r3, #28]
 8019316:	6979      	ldr	r1, [r7, #20]
 8019318:	4618      	mov	r0, r3
 801931a:	f004 fd67 	bl	801ddec <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801931e:	697b      	ldr	r3, [r7, #20]
 8019320:	681b      	ldr	r3, [r3, #0]
 8019322:	332c      	adds	r3, #44	; 0x2c
 8019324:	681b      	ldr	r3, [r3, #0]
 8019326:	6879      	ldr	r1, [r7, #4]
 8019328:	6978      	ldr	r0, [r7, #20]
 801932a:	4798      	blx	r3
    return *this;
 801932c:	68fb      	ldr	r3, [r7, #12]
}
 801932e:	4618      	mov	r0, r3
 8019330:	371c      	adds	r7, #28
 8019332:	46bd      	mov	sp, r7
 8019334:	bd90      	pop	{r4, r7, pc}
 8019336:	bf00      	nop
 8019338:	08024620 	.word	0x08024620

0801933c <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:

MockExpectedCall& MockCheckedExpectedCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 801933c:	b590      	push	{r4, r7, lr}
 801933e:	b087      	sub	sp, #28
 8019340:	af00      	add	r7, sp, #0
 8019342:	60f8      	str	r0, [r7, #12]
 8019344:	60b9      	str	r1, [r7, #8]
 8019346:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8019348:	22c4      	movs	r2, #196	; 0xc4
 801934a:	490e      	ldr	r1, [pc, #56]	; (8019384 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv+0x48>)
 801934c:	2038      	movs	r0, #56	; 0x38
 801934e:	f7ef fd21 	bl	8008d94 <_ZnwjPKci>
 8019352:	4604      	mov	r4, r0
 8019354:	68b9      	ldr	r1, [r7, #8]
 8019356:	4620      	mov	r0, r4
 8019358:	f000 feb2 	bl	801a0c0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801935c:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801935e:	68fb      	ldr	r3, [r7, #12]
 8019360:	69db      	ldr	r3, [r3, #28]
 8019362:	6979      	ldr	r1, [r7, #20]
 8019364:	4618      	mov	r0, r3
 8019366:	f004 fd41 	bl	801ddec <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801936a:	697b      	ldr	r3, [r7, #20]
 801936c:	681b      	ldr	r3, [r3, #0]
 801936e:	3330      	adds	r3, #48	; 0x30
 8019370:	681b      	ldr	r3, [r3, #0]
 8019372:	6879      	ldr	r1, [r7, #4]
 8019374:	6978      	ldr	r0, [r7, #20]
 8019376:	4798      	blx	r3
    return *this;
 8019378:	68fb      	ldr	r3, [r7, #12]
}
 801937a:	4618      	mov	r0, r3
 801937c:	371c      	adds	r7, #28
 801937e:	46bd      	mov	sp, r7
 8019380:	bd90      	pop	{r4, r7, pc}
 8019382:	bf00      	nop
 8019384:	08024620 	.word	0x08024620

08019388 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 8019388:	b590      	push	{r4, r7, lr}
 801938a:	b087      	sub	sp, #28
 801938c:	af00      	add	r7, sp, #0
 801938e:	60f8      	str	r0, [r7, #12]
 8019390:	60b9      	str	r1, [r7, #8]
 8019392:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8019394:	22cc      	movs	r2, #204	; 0xcc
 8019396:	490e      	ldr	r1, [pc, #56]	; (80193d0 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE+0x48>)
 8019398:	2038      	movs	r0, #56	; 0x38
 801939a:	f7ef fcfb 	bl	8008d94 <_ZnwjPKci>
 801939e:	4604      	mov	r4, r0
 80193a0:	68b9      	ldr	r1, [r7, #8]
 80193a2:	4620      	mov	r0, r4
 80193a4:	f000 fe8c 	bl	801a0c0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80193a8:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80193aa:	68fb      	ldr	r3, [r7, #12]
 80193ac:	69db      	ldr	r3, [r3, #28]
 80193ae:	6979      	ldr	r1, [r7, #20]
 80193b0:	4618      	mov	r0, r3
 80193b2:	f004 fd1b 	bl	801ddec <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 80193b6:	697b      	ldr	r3, [r7, #20]
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	3334      	adds	r3, #52	; 0x34
 80193bc:	681b      	ldr	r3, [r3, #0]
 80193be:	6879      	ldr	r1, [r7, #4]
 80193c0:	6978      	ldr	r0, [r7, #20]
 80193c2:	4798      	blx	r3
    return *this;
 80193c4:	68fb      	ldr	r3, [r7, #12]
}
 80193c6:	4618      	mov	r0, r3
 80193c8:	371c      	adds	r7, #28
 80193ca:	46bd      	mov	sp, r7
 80193cc:	bd90      	pop	{r4, r7, pc}
 80193ce:	bf00      	nop
 80193d0:	08024620 	.word	0x08024620

080193d4 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockExpectedCall& MockCheckedExpectedCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 80193d4:	b590      	push	{r4, r7, lr}
 80193d6:	b087      	sub	sp, #28
 80193d8:	af00      	add	r7, sp, #0
 80193da:	60f8      	str	r0, [r7, #12]
 80193dc:	60b9      	str	r1, [r7, #8]
 80193de:	607a      	str	r2, [r7, #4]
 80193e0:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80193e2:	22d4      	movs	r2, #212	; 0xd4
 80193e4:	490e      	ldr	r1, [pc, #56]	; (8019420 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj+0x4c>)
 80193e6:	2038      	movs	r0, #56	; 0x38
 80193e8:	f7ef fcd4 	bl	8008d94 <_ZnwjPKci>
 80193ec:	4604      	mov	r4, r0
 80193ee:	68b9      	ldr	r1, [r7, #8]
 80193f0:	4620      	mov	r0, r4
 80193f2:	f000 fe65 	bl	801a0c0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80193f6:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80193f8:	68fb      	ldr	r3, [r7, #12]
 80193fa:	69db      	ldr	r3, [r3, #28]
 80193fc:	6979      	ldr	r1, [r7, #20]
 80193fe:	4618      	mov	r0, r3
 8019400:	f004 fcf4 	bl	801ddec <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setMemoryBuffer(value, size);
 8019404:	697b      	ldr	r3, [r7, #20]
 8019406:	681b      	ldr	r3, [r3, #0]
 8019408:	333c      	adds	r3, #60	; 0x3c
 801940a:	681b      	ldr	r3, [r3, #0]
 801940c:	683a      	ldr	r2, [r7, #0]
 801940e:	6879      	ldr	r1, [r7, #4]
 8019410:	6978      	ldr	r0, [r7, #20]
 8019412:	4798      	blx	r3
    return *this;
 8019414:	68fb      	ldr	r3, [r7, #12]
}
 8019416:	4618      	mov	r0, r3
 8019418:	371c      	adds	r7, #28
 801941a:	46bd      	mov	sp, r7
 801941c:	bd90      	pop	{r4, r7, pc}
 801941e:	bf00      	nop
 8019420:	08024620 	.word	0x08024620

08019424 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 8019424:	b590      	push	{r4, r7, lr}
 8019426:	b087      	sub	sp, #28
 8019428:	af00      	add	r7, sp, #0
 801942a:	60f8      	str	r0, [r7, #12]
 801942c:	60b9      	str	r1, [r7, #8]
 801942e:	607a      	str	r2, [r7, #4]
 8019430:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8019432:	22dc      	movs	r2, #220	; 0xdc
 8019434:	490e      	ldr	r1, [pc, #56]	; (8019470 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x4c>)
 8019436:	2038      	movs	r0, #56	; 0x38
 8019438:	f7ef fcac 	bl	8008d94 <_ZnwjPKci>
 801943c:	4604      	mov	r4, r0
 801943e:	6879      	ldr	r1, [r7, #4]
 8019440:	4620      	mov	r0, r4
 8019442:	f000 fe3d 	bl	801a0c0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8019446:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8019448:	68fb      	ldr	r3, [r7, #12]
 801944a:	69db      	ldr	r3, [r3, #28]
 801944c:	6979      	ldr	r1, [r7, #20]
 801944e:	4618      	mov	r0, r3
 8019450:	f004 fccc 	bl	801ddec <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 8019454:	697b      	ldr	r3, [r7, #20]
 8019456:	681b      	ldr	r3, [r3, #0]
 8019458:	3340      	adds	r3, #64	; 0x40
 801945a:	681b      	ldr	r3, [r3, #0]
 801945c:	683a      	ldr	r2, [r7, #0]
 801945e:	68b9      	ldr	r1, [r7, #8]
 8019460:	6978      	ldr	r0, [r7, #20]
 8019462:	4798      	blx	r3
    return *this;
 8019464:	68fb      	ldr	r3, [r7, #12]
}
 8019466:	4618      	mov	r0, r3
 8019468:	371c      	adds	r7, #28
 801946a:	46bd      	mov	sp, r7
 801946c:	bd90      	pop	{r4, r7, pc}
 801946e:	bf00      	nop
 8019470:	08024620 	.word	0x08024620

08019474 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterReturning(const SimpleString& name, const void* value, size_t size)
{
 8019474:	b590      	push	{r4, r7, lr}
 8019476:	b087      	sub	sp, #28
 8019478:	af00      	add	r7, sp, #0
 801947a:	60f8      	str	r0, [r7, #12]
 801947c:	60b9      	str	r1, [r7, #8]
 801947e:	607a      	str	r2, [r7, #4]
 8019480:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8019482:	22e4      	movs	r2, #228	; 0xe4
 8019484:	4911      	ldr	r1, [pc, #68]	; (80194cc <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj+0x58>)
 8019486:	2038      	movs	r0, #56	; 0x38
 8019488:	f7ef fc84 	bl	8008d94 <_ZnwjPKci>
 801948c:	4604      	mov	r4, r0
 801948e:	68b9      	ldr	r1, [r7, #8]
 8019490:	4620      	mov	r0, r4
 8019492:	f000 fe15 	bl	801a0c0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8019496:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 8019498:	68fb      	ldr	r3, [r7, #12]
 801949a:	6a1b      	ldr	r3, [r3, #32]
 801949c:	6979      	ldr	r1, [r7, #20]
 801949e:	4618      	mov	r0, r3
 80194a0:	f004 fca4 	bl	801ddec <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 80194a4:	697b      	ldr	r3, [r7, #20]
 80194a6:	681b      	ldr	r3, [r3, #0]
 80194a8:	3330      	adds	r3, #48	; 0x30
 80194aa:	681b      	ldr	r3, [r3, #0]
 80194ac:	6879      	ldr	r1, [r7, #4]
 80194ae:	6978      	ldr	r0, [r7, #20]
 80194b0:	4798      	blx	r3
    newParameter->setSize(size);
 80194b2:	697b      	ldr	r3, [r7, #20]
 80194b4:	681b      	ldr	r3, [r3, #0]
 80194b6:	3348      	adds	r3, #72	; 0x48
 80194b8:	681b      	ldr	r3, [r3, #0]
 80194ba:	6839      	ldr	r1, [r7, #0]
 80194bc:	6978      	ldr	r0, [r7, #20]
 80194be:	4798      	blx	r3
    return *this;
 80194c0:	68fb      	ldr	r3, [r7, #12]
}
 80194c2:	4618      	mov	r0, r3
 80194c4:	371c      	adds	r7, #28
 80194c6:	46bd      	mov	sp, r7
 80194c8:	bd90      	pop	{r4, r7, pc}
 80194ca:	bf00      	nop
 80194cc:	08024620 	.word	0x08024620

080194d0 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterOfTypeReturning(const SimpleString& type, const SimpleString& name, const void* value)
{
 80194d0:	b590      	push	{r4, r7, lr}
 80194d2:	b087      	sub	sp, #28
 80194d4:	af00      	add	r7, sp, #0
 80194d6:	60f8      	str	r0, [r7, #12]
 80194d8:	60b9      	str	r1, [r7, #8]
 80194da:	607a      	str	r2, [r7, #4]
 80194dc:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80194de:	22ed      	movs	r2, #237	; 0xed
 80194e0:	490e      	ldr	r1, [pc, #56]	; (801951c <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv+0x4c>)
 80194e2:	2038      	movs	r0, #56	; 0x38
 80194e4:	f7ef fc56 	bl	8008d94 <_ZnwjPKci>
 80194e8:	4604      	mov	r4, r0
 80194ea:	6879      	ldr	r1, [r7, #4]
 80194ec:	4620      	mov	r0, r4
 80194ee:	f000 fde7 	bl	801a0c0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80194f2:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 80194f4:	68fb      	ldr	r3, [r7, #12]
 80194f6:	6a1b      	ldr	r3, [r3, #32]
 80194f8:	6979      	ldr	r1, [r7, #20]
 80194fa:	4618      	mov	r0, r3
 80194fc:	f004 fc76 	bl	801ddec <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 8019500:	697b      	ldr	r3, [r7, #20]
 8019502:	681b      	ldr	r3, [r3, #0]
 8019504:	3340      	adds	r3, #64	; 0x40
 8019506:	681b      	ldr	r3, [r3, #0]
 8019508:	683a      	ldr	r2, [r7, #0]
 801950a:	68b9      	ldr	r1, [r7, #8]
 801950c:	6978      	ldr	r0, [r7, #20]
 801950e:	4798      	blx	r3
    return *this;
 8019510:	68fb      	ldr	r3, [r7, #12]
}
 8019512:	4618      	mov	r0, r3
 8019514:	371c      	adds	r7, #28
 8019516:	46bd      	mov	sp, r7
 8019518:	bd90      	pop	{r4, r7, pc}
 801951a:	bf00      	nop
 801951c:	08024620 	.word	0x08024620

08019520 <_ZN23MockCheckedExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withUnmodifiedOutputParameter(const SimpleString& name)
{
 8019520:	b590      	push	{r4, r7, lr}
 8019522:	b083      	sub	sp, #12
 8019524:	af00      	add	r7, sp, #0
 8019526:	6078      	str	r0, [r7, #4]
 8019528:	6039      	str	r1, [r7, #0]
    return withOutputParameterReturning(name, NULLPTR, 0);
 801952a:	687b      	ldr	r3, [r7, #4]
 801952c:	681b      	ldr	r3, [r3, #0]
 801952e:	3318      	adds	r3, #24
 8019530:	681c      	ldr	r4, [r3, #0]
 8019532:	2300      	movs	r3, #0
 8019534:	2200      	movs	r2, #0
 8019536:	6839      	ldr	r1, [r7, #0]
 8019538:	6878      	ldr	r0, [r7, #4]
 801953a:	47a0      	blx	r4
 801953c:	4603      	mov	r3, r0
}
 801953e:	4618      	mov	r0, r3
 8019540:	370c      	adds	r7, #12
 8019542:	46bd      	mov	sp, r7
 8019544:	bd90      	pop	{r4, r7, pc}
	...

08019548 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterType(const SimpleString& name)
{
 8019548:	b580      	push	{r7, lr}
 801954a:	b086      	sub	sp, #24
 801954c:	af00      	add	r7, sp, #0
 801954e:	60f8      	str	r0, [r7, #12]
 8019550:	60b9      	str	r1, [r7, #8]
 8019552:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 8019554:	68bb      	ldr	r3, [r7, #8]
 8019556:	69db      	ldr	r3, [r3, #28]
 8019558:	6879      	ldr	r1, [r7, #4]
 801955a:	4618      	mov	r0, r3
 801955c:	f004 fc7c 	bl	801de58 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8019560:	6178      	str	r0, [r7, #20]
    return (p) ? p->getType() : StringFrom("");
 8019562:	697b      	ldr	r3, [r7, #20]
 8019564:	2b00      	cmp	r3, #0
 8019566:	d008      	beq.n	801957a <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x32>
 8019568:	697b      	ldr	r3, [r7, #20]
 801956a:	681b      	ldr	r3, [r3, #0]
 801956c:	3360      	adds	r3, #96	; 0x60
 801956e:	681b      	ldr	r3, [r3, #0]
 8019570:	68fa      	ldr	r2, [r7, #12]
 8019572:	6979      	ldr	r1, [r7, #20]
 8019574:	4610      	mov	r0, r2
 8019576:	4798      	blx	r3
 8019578:	e004      	b.n	8019584 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x3c>
 801957a:	68fb      	ldr	r3, [r7, #12]
 801957c:	4903      	ldr	r1, [pc, #12]	; (801958c <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x44>)
 801957e:	4618      	mov	r0, r3
 8019580:	f7f2 fe10 	bl	800c1a4 <_Z10StringFromPKc>
}
 8019584:	68f8      	ldr	r0, [r7, #12]
 8019586:	3718      	adds	r7, #24
 8019588:	46bd      	mov	sp, r7
 801958a:	bd80      	pop	{r7, pc}
 801958c:	0802461c 	.word	0x0802461c

08019590 <_ZN23MockCheckedExpectedCall25hasInputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasInputParameterWithName(const SimpleString& name)
{
 8019590:	b580      	push	{r7, lr}
 8019592:	b084      	sub	sp, #16
 8019594:	af00      	add	r7, sp, #0
 8019596:	6078      	str	r0, [r7, #4]
 8019598:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801959a:	687b      	ldr	r3, [r7, #4]
 801959c:	69db      	ldr	r3, [r3, #28]
 801959e:	6839      	ldr	r1, [r7, #0]
 80195a0:	4618      	mov	r0, r3
 80195a2:	f004 fc59 	bl	801de58 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 80195a6:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 80195a8:	68fb      	ldr	r3, [r7, #12]
 80195aa:	2b00      	cmp	r3, #0
 80195ac:	bf14      	ite	ne
 80195ae:	2301      	movne	r3, #1
 80195b0:	2300      	moveq	r3, #0
 80195b2:	b2db      	uxtb	r3, r3
}
 80195b4:	4618      	mov	r0, r3
 80195b6:	3710      	adds	r7, #16
 80195b8:	46bd      	mov	sp, r7
 80195ba:	bd80      	pop	{r7, pc}

080195bc <_ZN23MockCheckedExpectedCall26hasOutputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasOutputParameterWithName(const SimpleString& name)
{
 80195bc:	b580      	push	{r7, lr}
 80195be:	b084      	sub	sp, #16
 80195c0:	af00      	add	r7, sp, #0
 80195c2:	6078      	str	r0, [r7, #4]
 80195c4:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	6a1b      	ldr	r3, [r3, #32]
 80195ca:	6839      	ldr	r1, [r7, #0]
 80195cc:	4618      	mov	r0, r3
 80195ce:	f004 fc43 	bl	801de58 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 80195d2:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 80195d4:	68fb      	ldr	r3, [r7, #12]
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	bf14      	ite	ne
 80195da:	2301      	movne	r3, #1
 80195dc:	2300      	moveq	r3, #0
 80195de:	b2db      	uxtb	r3, r3
}
 80195e0:	4618      	mov	r0, r3
 80195e2:	3710      	adds	r7, #16
 80195e4:	46bd      	mov	sp, r7
 80195e6:	bd80      	pop	{r7, pc}

080195e8 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getInputParameter(const SimpleString& name)
{
 80195e8:	b590      	push	{r4, r7, lr}
 80195ea:	b089      	sub	sp, #36	; 0x24
 80195ec:	af00      	add	r7, sp, #0
 80195ee:	60f8      	str	r0, [r7, #12]
 80195f0:	60b9      	str	r1, [r7, #8]
 80195f2:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 80195f4:	68bb      	ldr	r3, [r7, #8]
 80195f6:	69db      	ldr	r3, [r3, #28]
 80195f8:	6879      	ldr	r1, [r7, #4]
 80195fa:	4618      	mov	r0, r3
 80195fc:	f004 fc2c 	bl	801de58 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8019600:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 8019602:	2400      	movs	r4, #0
 8019604:	69fb      	ldr	r3, [r7, #28]
 8019606:	2b00      	cmp	r3, #0
 8019608:	d004      	beq.n	8019614 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x2c>
 801960a:	69f9      	ldr	r1, [r7, #28]
 801960c:	68f8      	ldr	r0, [r7, #12]
 801960e:	f7f0 f829 	bl	8009664 <_ZN14MockNamedValueC1ERKS_>
 8019612:	e00c      	b.n	801962e <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x46>
 8019614:	f107 0314 	add.w	r3, r7, #20
 8019618:	490a      	ldr	r1, [pc, #40]	; (8019644 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x5c>)
 801961a:	4618      	mov	r0, r3
 801961c:	f7f1 ff7d 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8019620:	2401      	movs	r4, #1
 8019622:	f107 0314 	add.w	r3, r7, #20
 8019626:	4619      	mov	r1, r3
 8019628:	68f8      	ldr	r0, [r7, #12]
 801962a:	f002 fc9b 	bl	801bf64 <_ZN14MockNamedValueC1ERK12SimpleString>
 801962e:	2c00      	cmp	r4, #0
 8019630:	d004      	beq.n	801963c <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x54>
 8019632:	f107 0314 	add.w	r3, r7, #20
 8019636:	4618      	mov	r0, r3
 8019638:	f7f2 fb27 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 801963c:	68f8      	ldr	r0, [r7, #12]
 801963e:	3724      	adds	r7, #36	; 0x24
 8019640:	46bd      	mov	sp, r7
 8019642:	bd90      	pop	{r4, r7, pc}
 8019644:	0802461c 	.word	0x0802461c

08019648 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getOutputParameter(const SimpleString& name)
{
 8019648:	b590      	push	{r4, r7, lr}
 801964a:	b089      	sub	sp, #36	; 0x24
 801964c:	af00      	add	r7, sp, #0
 801964e:	60f8      	str	r0, [r7, #12]
 8019650:	60b9      	str	r1, [r7, #8]
 8019652:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 8019654:	68bb      	ldr	r3, [r7, #8]
 8019656:	6a1b      	ldr	r3, [r3, #32]
 8019658:	6879      	ldr	r1, [r7, #4]
 801965a:	4618      	mov	r0, r3
 801965c:	f004 fbfc 	bl	801de58 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8019660:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 8019662:	2400      	movs	r4, #0
 8019664:	69fb      	ldr	r3, [r7, #28]
 8019666:	2b00      	cmp	r3, #0
 8019668:	d004      	beq.n	8019674 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x2c>
 801966a:	69f9      	ldr	r1, [r7, #28]
 801966c:	68f8      	ldr	r0, [r7, #12]
 801966e:	f7ef fff9 	bl	8009664 <_ZN14MockNamedValueC1ERKS_>
 8019672:	e00c      	b.n	801968e <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x46>
 8019674:	f107 0314 	add.w	r3, r7, #20
 8019678:	490a      	ldr	r1, [pc, #40]	; (80196a4 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x5c>)
 801967a:	4618      	mov	r0, r3
 801967c:	f7f1 ff4d 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8019680:	2401      	movs	r4, #1
 8019682:	f107 0314 	add.w	r3, r7, #20
 8019686:	4619      	mov	r1, r3
 8019688:	68f8      	ldr	r0, [r7, #12]
 801968a:	f002 fc6b 	bl	801bf64 <_ZN14MockNamedValueC1ERK12SimpleString>
 801968e:	2c00      	cmp	r4, #0
 8019690:	d004      	beq.n	801969c <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x54>
 8019692:	f107 0314 	add.w	r3, r7, #20
 8019696:	4618      	mov	r0, r3
 8019698:	f7f2 faf7 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 801969c:	68f8      	ldr	r0, [r7, #12]
 801969e:	3724      	adds	r7, #36	; 0x24
 80196a0:	46bd      	mov	sp, r7
 80196a2:	bd90      	pop	{r4, r7, pc}
 80196a4:	0802461c 	.word	0x0802461c

080196a8 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv>:

bool MockCheckedExpectedCall::areParametersMatchingActualCall()
{
 80196a8:	b580      	push	{r7, lr}
 80196aa:	b084      	sub	sp, #16
 80196ac:	af00      	add	r7, sp, #0
 80196ae:	6078      	str	r0, [r7, #4]
    MockNamedValueListNode* p;
    for (p = inputParameters_->begin(); p; p = p->next())
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	69db      	ldr	r3, [r3, #28]
 80196b4:	4618      	mov	r0, r3
 80196b6:	f004 fbfe 	bl	801deb6 <_ZN18MockNamedValueList5beginEv>
 80196ba:	60f8      	str	r0, [r7, #12]
 80196bc:	68fb      	ldr	r3, [r7, #12]
 80196be:	2b00      	cmp	r3, #0
 80196c0:	d014      	beq.n	80196ec <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x44>
        if (! item(p)->isMatchingActualCall())
 80196c2:	68f9      	ldr	r1, [r7, #12]
 80196c4:	6878      	ldr	r0, [r7, #4]
 80196c6:	f000 fced 	bl	801a0a4 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 80196ca:	4603      	mov	r3, r0
 80196cc:	4618      	mov	r0, r3
 80196ce:	f000 fd1f 	bl	801a110 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 80196d2:	4603      	mov	r3, r0
 80196d4:	f083 0301 	eor.w	r3, r3, #1
 80196d8:	b2db      	uxtb	r3, r3
 80196da:	2b00      	cmp	r3, #0
 80196dc:	d001      	beq.n	80196e2 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x3a>
            return false;
 80196de:	2300      	movs	r3, #0
 80196e0:	e023      	b.n	801972a <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = inputParameters_->begin(); p; p = p->next())
 80196e2:	68f8      	ldr	r0, [r7, #12]
 80196e4:	f004 faf0 	bl	801dcc8 <_ZN22MockNamedValueListNode4nextEv>
 80196e8:	60f8      	str	r0, [r7, #12]
 80196ea:	e7e7      	b.n	80196bc <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x14>
    for (p = outputParameters_->begin(); p; p = p->next())
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	6a1b      	ldr	r3, [r3, #32]
 80196f0:	4618      	mov	r0, r3
 80196f2:	f004 fbe0 	bl	801deb6 <_ZN18MockNamedValueList5beginEv>
 80196f6:	60f8      	str	r0, [r7, #12]
 80196f8:	68fb      	ldr	r3, [r7, #12]
 80196fa:	2b00      	cmp	r3, #0
 80196fc:	d014      	beq.n	8019728 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x80>
        if (! item(p)->isMatchingActualCall())
 80196fe:	68f9      	ldr	r1, [r7, #12]
 8019700:	6878      	ldr	r0, [r7, #4]
 8019702:	f000 fccf 	bl	801a0a4 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8019706:	4603      	mov	r3, r0
 8019708:	4618      	mov	r0, r3
 801970a:	f000 fd01 	bl	801a110 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801970e:	4603      	mov	r3, r0
 8019710:	f083 0301 	eor.w	r3, r3, #1
 8019714:	b2db      	uxtb	r3, r3
 8019716:	2b00      	cmp	r3, #0
 8019718:	d001      	beq.n	801971e <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x76>
            return false;
 801971a:	2300      	movs	r3, #0
 801971c:	e005      	b.n	801972a <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = outputParameters_->begin(); p; p = p->next())
 801971e:	68f8      	ldr	r0, [r7, #12]
 8019720:	f004 fad2 	bl	801dcc8 <_ZN22MockNamedValueListNode4nextEv>
 8019724:	60f8      	str	r0, [r7, #12]
 8019726:	e7e7      	b.n	80196f8 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x50>
    return true;
 8019728:	2301      	movs	r3, #1
}
 801972a:	4618      	mov	r0, r3
 801972c:	3710      	adds	r7, #16
 801972e:	46bd      	mov	sp, r7
 8019730:	bd80      	pop	{r7, pc}

08019732 <_ZN23MockCheckedExpectedCall21ignoreOtherParametersEv>:

MockExpectedCall& MockCheckedExpectedCall::ignoreOtherParameters()
{
 8019732:	b480      	push	{r7}
 8019734:	b083      	sub	sp, #12
 8019736:	af00      	add	r7, sp, #0
 8019738:	6078      	str	r0, [r7, #4]
    ignoreOtherParameters_ = true;
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	2201      	movs	r2, #1
 801973e:	731a      	strb	r2, [r3, #12]
    return *this;
 8019740:	687b      	ldr	r3, [r7, #4]
}
 8019742:	4618      	mov	r0, r3
 8019744:	370c      	adds	r7, #12
 8019746:	46bd      	mov	sp, r7
 8019748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801974c:	4770      	bx	lr

0801974e <_ZN23MockCheckedExpectedCall11isFulfilledEv>:

bool MockCheckedExpectedCall::isFulfilled()
{
 801974e:	b480      	push	{r7}
 8019750:	b083      	sub	sp, #12
 8019752:	af00      	add	r7, sp, #0
 8019754:	6078      	str	r0, [r7, #4]
    return (actualCalls_ == expectedCalls_);
 8019756:	687b      	ldr	r3, [r7, #4]
 8019758:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801975e:	429a      	cmp	r2, r3
 8019760:	bf0c      	ite	eq
 8019762:	2301      	moveq	r3, #1
 8019764:	2300      	movne	r3, #0
 8019766:	b2db      	uxtb	r3, r3
}
 8019768:	4618      	mov	r0, r3
 801976a:	370c      	adds	r7, #12
 801976c:	46bd      	mov	sp, r7
 801976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019772:	4770      	bx	lr

08019774 <_ZN23MockCheckedExpectedCall19canMatchActualCallsEv>:

bool MockCheckedExpectedCall::canMatchActualCalls()
{
 8019774:	b480      	push	{r7}
 8019776:	b083      	sub	sp, #12
 8019778:	af00      	add	r7, sp, #0
 801977a:	6078      	str	r0, [r7, #4]
    return (actualCalls_ < expectedCalls_);
 801977c:	687b      	ldr	r3, [r7, #4]
 801977e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019784:	429a      	cmp	r2, r3
 8019786:	bf34      	ite	cc
 8019788:	2301      	movcc	r3, #1
 801978a:	2300      	movcs	r3, #0
 801978c:	b2db      	uxtb	r3, r3
}
 801978e:	4618      	mov	r0, r3
 8019790:	370c      	adds	r7, #12
 8019792:	46bd      	mov	sp, r7
 8019794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019798:	4770      	bx	lr

0801979a <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv>:

bool MockCheckedExpectedCall::isMatchingActualCallAndFinalized()
{
 801979a:	b580      	push	{r7, lr}
 801979c:	b082      	sub	sp, #8
 801979e:	af00      	add	r7, sp, #0
 80197a0:	6078      	str	r0, [r7, #4]
    return isMatchingActualCall() && (!ignoreOtherParameters_ || isActualCallMatchFinalized_);
 80197a2:	687b      	ldr	r3, [r7, #4]
 80197a4:	681b      	ldr	r3, [r3, #0]
 80197a6:	33cc      	adds	r3, #204	; 0xcc
 80197a8:	681b      	ldr	r3, [r3, #0]
 80197aa:	6878      	ldr	r0, [r7, #4]
 80197ac:	4798      	blx	r3
 80197ae:	4603      	mov	r3, r0
 80197b0:	2b00      	cmp	r3, #0
 80197b2:	d00c      	beq.n	80197ce <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	7b1b      	ldrb	r3, [r3, #12]
 80197b8:	f083 0301 	eor.w	r3, r3, #1
 80197bc:	b2db      	uxtb	r3, r3
 80197be:	2b00      	cmp	r3, #0
 80197c0:	d103      	bne.n	80197ca <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x30>
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	7b5b      	ldrb	r3, [r3, #13]
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	d001      	beq.n	80197ce <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 80197ca:	2301      	movs	r3, #1
 80197cc:	e000      	b.n	80197d0 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x36>
 80197ce:	2300      	movs	r3, #0
}
 80197d0:	4618      	mov	r0, r3
 80197d2:	3708      	adds	r7, #8
 80197d4:	46bd      	mov	sp, r7
 80197d6:	bd80      	pop	{r7, pc}

080197d8 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::isMatchingActualCall()
{
 80197d8:	b580      	push	{r7, lr}
 80197da:	b082      	sub	sp, #8
 80197dc:	af00      	add	r7, sp, #0
 80197de:	6078      	str	r0, [r7, #4]
    return areParametersMatchingActualCall() && wasPassedToObject_;
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	681b      	ldr	r3, [r3, #0]
 80197e4:	33d0      	adds	r3, #208	; 0xd0
 80197e6:	681b      	ldr	r3, [r3, #0]
 80197e8:	6878      	ldr	r0, [r7, #4]
 80197ea:	4798      	blx	r3
 80197ec:	4603      	mov	r3, r0
 80197ee:	2b00      	cmp	r3, #0
 80197f0:	d006      	beq.n	8019800 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 80197f8:	2b00      	cmp	r3, #0
 80197fa:	d001      	beq.n	8019800 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 80197fc:	2301      	movs	r3, #1
 80197fe:	e000      	b.n	8019802 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x2a>
 8019800:	2300      	movs	r3, #0
}
 8019802:	4618      	mov	r0, r3
 8019804:	3708      	adds	r7, #8
 8019806:	46bd      	mov	sp, r7
 8019808:	bd80      	pop	{r7, pc}

0801980a <_ZN23MockCheckedExpectedCall11callWasMadeEj>:

void MockCheckedExpectedCall::callWasMade(unsigned int callOrder)
{
 801980a:	b580      	push	{r7, lr}
 801980c:	b082      	sub	sp, #8
 801980e:	af00      	add	r7, sp, #0
 8019810:	6078      	str	r0, [r7, #4]
 8019812:	6039      	str	r1, [r7, #0]
    actualCalls_++;
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019818:	1c5a      	adds	r2, r3, #1
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	669a      	str	r2, [r3, #104]	; 0x68

    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	691b      	ldr	r3, [r3, #16]
 8019822:	2b00      	cmp	r3, #0
 8019824:	d00c      	beq.n	8019840 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	691b      	ldr	r3, [r3, #16]
    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801982a:	683a      	ldr	r2, [r7, #0]
 801982c:	429a      	cmp	r2, r3
 801982e:	d304      	bcc.n	801983a <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x30>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	695b      	ldr	r3, [r3, #20]
 8019834:	683a      	ldr	r2, [r7, #0]
 8019836:	429a      	cmp	r2, r3
 8019838:	d902      	bls.n	8019840 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
        outOfOrder_ = true;
 801983a:	687b      	ldr	r3, [r7, #4]
 801983c:	2201      	movs	r2, #1
 801983e:	761a      	strb	r2, [r3, #24]
    }

    resetActualCallMatchingState();
 8019840:	687b      	ldr	r3, [r7, #4]
 8019842:	681b      	ldr	r3, [r3, #0]
 8019844:	33ec      	adds	r3, #236	; 0xec
 8019846:	681b      	ldr	r3, [r3, #0]
 8019848:	6878      	ldr	r0, [r7, #4]
 801984a:	4798      	blx	r3
}
 801984c:	bf00      	nop
 801984e:	3708      	adds	r7, #8
 8019850:	46bd      	mov	sp, r7
 8019852:	bd80      	pop	{r7, pc}

08019854 <_ZN23MockCheckedExpectedCall23finalizeActualCallMatchEv>:

void MockCheckedExpectedCall::finalizeActualCallMatch()
{
 8019854:	b480      	push	{r7}
 8019856:	b083      	sub	sp, #12
 8019858:	af00      	add	r7, sp, #0
 801985a:	6078      	str	r0, [r7, #4]
    isActualCallMatchFinalized_ = true;
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	2201      	movs	r2, #1
 8019860:	735a      	strb	r2, [r3, #13]
}
 8019862:	bf00      	nop
 8019864:	370c      	adds	r7, #12
 8019866:	46bd      	mov	sp, r7
 8019868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801986c:	4770      	bx	lr

0801986e <_ZN23MockCheckedExpectedCall17wasPassedToObjectEv>:


void MockCheckedExpectedCall::wasPassedToObject()
{
 801986e:	b480      	push	{r7}
 8019870:	b083      	sub	sp, #12
 8019872:	af00      	add	r7, sp, #0
 8019874:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = true;
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	2201      	movs	r2, #1
 801987a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
}
 801987e:	bf00      	nop
 8019880:	370c      	adds	r7, #12
 8019882:	46bd      	mov	sp, r7
 8019884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019888:	4770      	bx	lr

0801988a <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv>:

void MockCheckedExpectedCall::resetActualCallMatchingState()
{
 801988a:	b580      	push	{r7, lr}
 801988c:	b084      	sub	sp, #16
 801988e:	af00      	add	r7, sp, #0
 8019890:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = !isSpecificObjectExpected_;
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8019898:	f083 0301 	eor.w	r3, r3, #1
 801989c:	b2da      	uxtb	r2, r3
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    isActualCallMatchFinalized_ = false;
 80198a4:	687b      	ldr	r3, [r7, #4]
 80198a6:	2200      	movs	r2, #0
 80198a8:	735a      	strb	r2, [r3, #13]

    MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next())
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	69db      	ldr	r3, [r3, #28]
 80198ae:	4618      	mov	r0, r3
 80198b0:	f004 fb01 	bl	801deb6 <_ZN18MockNamedValueList5beginEv>
 80198b4:	60f8      	str	r0, [r7, #12]
 80198b6:	68fb      	ldr	r3, [r7, #12]
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	d00d      	beq.n	80198d8 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x4e>
        item(p)->setMatchesActualCall(false);
 80198bc:	68f9      	ldr	r1, [r7, #12]
 80198be:	6878      	ldr	r0, [r7, #4]
 80198c0:	f000 fbf0 	bl	801a0a4 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 80198c4:	4603      	mov	r3, r0
 80198c6:	2100      	movs	r1, #0
 80198c8:	4618      	mov	r0, r3
 80198ca:	f000 fc11 	bl	801a0f0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = inputParameters_->begin(); p; p = p->next())
 80198ce:	68f8      	ldr	r0, [r7, #12]
 80198d0:	f004 f9fa 	bl	801dcc8 <_ZN22MockNamedValueListNode4nextEv>
 80198d4:	60f8      	str	r0, [r7, #12]
 80198d6:	e7ee      	b.n	80198b6 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x2c>
    for (p = outputParameters_->begin(); p; p = p->next())
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	6a1b      	ldr	r3, [r3, #32]
 80198dc:	4618      	mov	r0, r3
 80198de:	f004 faea 	bl	801deb6 <_ZN18MockNamedValueList5beginEv>
 80198e2:	60f8      	str	r0, [r7, #12]
 80198e4:	68fb      	ldr	r3, [r7, #12]
 80198e6:	2b00      	cmp	r3, #0
 80198e8:	d00d      	beq.n	8019906 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x7c>
        item(p)->setMatchesActualCall(false);
 80198ea:	68f9      	ldr	r1, [r7, #12]
 80198ec:	6878      	ldr	r0, [r7, #4]
 80198ee:	f000 fbd9 	bl	801a0a4 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 80198f2:	4603      	mov	r3, r0
 80198f4:	2100      	movs	r1, #0
 80198f6:	4618      	mov	r0, r3
 80198f8:	f000 fbfa 	bl	801a0f0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = outputParameters_->begin(); p; p = p->next())
 80198fc:	68f8      	ldr	r0, [r7, #12]
 80198fe:	f004 f9e3 	bl	801dcc8 <_ZN22MockNamedValueListNode4nextEv>
 8019902:	60f8      	str	r0, [r7, #12]
 8019904:	e7ee      	b.n	80198e4 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x5a>
}
 8019906:	bf00      	nop
 8019908:	3710      	adds	r7, #16
 801990a:	46bd      	mov	sp, r7
 801990c:	bd80      	pop	{r7, pc}

0801990e <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::inputParameterWasPassed(const SimpleString& name)
{
 801990e:	b590      	push	{r4, r7, lr}
 8019910:	b087      	sub	sp, #28
 8019912:	af00      	add	r7, sp, #0
 8019914:	6078      	str	r0, [r7, #4]
 8019916:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	69db      	ldr	r3, [r3, #28]
 801991c:	4618      	mov	r0, r3
 801991e:	f004 faca 	bl	801deb6 <_ZN18MockNamedValueList5beginEv>
 8019922:	6178      	str	r0, [r7, #20]
 8019924:	697b      	ldr	r3, [r7, #20]
 8019926:	2b00      	cmp	r3, #0
 8019928:	d022      	beq.n	8019970 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801992a:	f107 030c 	add.w	r3, r7, #12
 801992e:	6979      	ldr	r1, [r7, #20]
 8019930:	4618      	mov	r0, r3
 8019932:	f004 fa04 	bl	801dd3e <_ZNK22MockNamedValueListNode7getNameEv>
 8019936:	f107 030c 	add.w	r3, r7, #12
 801993a:	6839      	ldr	r1, [r7, #0]
 801993c:	4618      	mov	r0, r3
 801993e:	f7f2 f9b0 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 8019942:	4603      	mov	r3, r0
 8019944:	461c      	mov	r4, r3
 8019946:	f107 030c 	add.w	r3, r7, #12
 801994a:	4618      	mov	r0, r3
 801994c:	f7f2 f99d 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8019950:	2c00      	cmp	r4, #0
 8019952:	d008      	beq.n	8019966 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 8019954:	6979      	ldr	r1, [r7, #20]
 8019956:	6878      	ldr	r0, [r7, #4]
 8019958:	f000 fba4 	bl	801a0a4 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801995c:	4603      	mov	r3, r0
 801995e:	2101      	movs	r1, #1
 8019960:	4618      	mov	r0, r3
 8019962:	f000 fbc5 	bl	801a0f0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 8019966:	6978      	ldr	r0, [r7, #20]
 8019968:	f004 f9ae 	bl	801dcc8 <_ZN22MockNamedValueListNode4nextEv>
 801996c:	6178      	str	r0, [r7, #20]
 801996e:	e7d9      	b.n	8019924 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x16>
    }
}
 8019970:	bf00      	nop
 8019972:	371c      	adds	r7, #28
 8019974:	46bd      	mov	sp, r7
 8019976:	bd90      	pop	{r4, r7, pc}

08019978 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::outputParameterWasPassed(const SimpleString& name)
{
 8019978:	b590      	push	{r4, r7, lr}
 801997a:	b087      	sub	sp, #28
 801997c:	af00      	add	r7, sp, #0
 801997e:	6078      	str	r0, [r7, #4]
 8019980:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	6a1b      	ldr	r3, [r3, #32]
 8019986:	4618      	mov	r0, r3
 8019988:	f004 fa95 	bl	801deb6 <_ZN18MockNamedValueList5beginEv>
 801998c:	6178      	str	r0, [r7, #20]
 801998e:	697b      	ldr	r3, [r7, #20]
 8019990:	2b00      	cmp	r3, #0
 8019992:	d022      	beq.n	80199da <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 8019994:	f107 030c 	add.w	r3, r7, #12
 8019998:	6979      	ldr	r1, [r7, #20]
 801999a:	4618      	mov	r0, r3
 801999c:	f004 f9cf 	bl	801dd3e <_ZNK22MockNamedValueListNode7getNameEv>
 80199a0:	f107 030c 	add.w	r3, r7, #12
 80199a4:	6839      	ldr	r1, [r7, #0]
 80199a6:	4618      	mov	r0, r3
 80199a8:	f7f2 f97b 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 80199ac:	4603      	mov	r3, r0
 80199ae:	461c      	mov	r4, r3
 80199b0:	f107 030c 	add.w	r3, r7, #12
 80199b4:	4618      	mov	r0, r3
 80199b6:	f7f2 f968 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 80199ba:	2c00      	cmp	r4, #0
 80199bc:	d008      	beq.n	80199d0 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 80199be:	6979      	ldr	r1, [r7, #20]
 80199c0:	6878      	ldr	r0, [r7, #4]
 80199c2:	f000 fb6f 	bl	801a0a4 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 80199c6:	4603      	mov	r3, r0
 80199c8:	2101      	movs	r1, #1
 80199ca:	4618      	mov	r0, r3
 80199cc:	f000 fb90 	bl	801a0f0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 80199d0:	6978      	ldr	r0, [r7, #20]
 80199d2:	f004 f979 	bl	801dcc8 <_ZN22MockNamedValueListNode4nextEv>
 80199d6:	6178      	str	r0, [r7, #20]
 80199d8:	e7d9      	b.n	801998e <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x16>
    }
}
 80199da:	bf00      	nop
 80199dc:	371c      	adds	r7, #28
 80199de:	46bd      	mov	sp, r7
 80199e0:	bd90      	pop	{r4, r7, pc}
	...

080199e4 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterValueString(const SimpleString& name)
{
 80199e4:	b580      	push	{r7, lr}
 80199e6:	b086      	sub	sp, #24
 80199e8:	af00      	add	r7, sp, #0
 80199ea:	60f8      	str	r0, [r7, #12]
 80199ec:	60b9      	str	r1, [r7, #8]
 80199ee:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 80199f0:	68bb      	ldr	r3, [r7, #8]
 80199f2:	69db      	ldr	r3, [r3, #28]
 80199f4:	6879      	ldr	r1, [r7, #4]
 80199f6:	4618      	mov	r0, r3
 80199f8:	f004 fa2e 	bl	801de58 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 80199fc:	6178      	str	r0, [r7, #20]
    return (p) ? StringFrom(*p) : "failed";
 80199fe:	697b      	ldr	r3, [r7, #20]
 8019a00:	2b00      	cmp	r3, #0
 8019a02:	d005      	beq.n	8019a10 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x2c>
 8019a04:	68fb      	ldr	r3, [r7, #12]
 8019a06:	6979      	ldr	r1, [r7, #20]
 8019a08:	4618      	mov	r0, r3
 8019a0a:	f7ff fa0b 	bl	8018e24 <_Z10StringFromRK14MockNamedValue>
 8019a0e:	e003      	b.n	8019a18 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x34>
 8019a10:	4903      	ldr	r1, [pc, #12]	; (8019a20 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x3c>)
 8019a12:	68f8      	ldr	r0, [r7, #12]
 8019a14:	f7f1 fd81 	bl	800b51a <_ZN12SimpleStringC1EPKc>
}
 8019a18:	68f8      	ldr	r0, [r7, #12]
 8019a1a:	3718      	adds	r7, #24
 8019a1c:	46bd      	mov	sp, r7
 8019a1e:	bd80      	pop	{r7, pc}
 8019a20:	08024688 	.word	0x08024688

08019a24 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasInputParameter(const MockNamedValue& parameter)
{
 8019a24:	b590      	push	{r4, r7, lr}
 8019a26:	b087      	sub	sp, #28
 8019a28:	af00      	add	r7, sp, #0
 8019a2a:	6078      	str	r0, [r7, #4]
 8019a2c:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(parameter.getName());
 8019a2e:	687b      	ldr	r3, [r7, #4]
 8019a30:	69dc      	ldr	r4, [r3, #28]
 8019a32:	683b      	ldr	r3, [r7, #0]
 8019a34:	681b      	ldr	r3, [r3, #0]
 8019a36:	335c      	adds	r3, #92	; 0x5c
 8019a38:	681b      	ldr	r3, [r3, #0]
 8019a3a:	f107 020c 	add.w	r2, r7, #12
 8019a3e:	6839      	ldr	r1, [r7, #0]
 8019a40:	4610      	mov	r0, r2
 8019a42:	4798      	blx	r3
 8019a44:	f107 030c 	add.w	r3, r7, #12
 8019a48:	4619      	mov	r1, r3
 8019a4a:	4620      	mov	r0, r4
 8019a4c:	f004 fa04 	bl	801de58 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8019a50:	6178      	str	r0, [r7, #20]
 8019a52:	f107 030c 	add.w	r3, r7, #12
 8019a56:	4618      	mov	r0, r3
 8019a58:	f7f2 f917 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    return (p) ? p->equals(parameter) : ignoreOtherParameters_;
 8019a5c:	697b      	ldr	r3, [r7, #20]
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	d00d      	beq.n	8019a7e <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x5a>
 8019a62:	697b      	ldr	r3, [r7, #20]
 8019a64:	681b      	ldr	r3, [r3, #0]
 8019a66:	3350      	adds	r3, #80	; 0x50
 8019a68:	681b      	ldr	r3, [r3, #0]
 8019a6a:	6839      	ldr	r1, [r7, #0]
 8019a6c:	6978      	ldr	r0, [r7, #20]
 8019a6e:	4798      	blx	r3
 8019a70:	4603      	mov	r3, r0
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	bf14      	ite	ne
 8019a76:	2301      	movne	r3, #1
 8019a78:	2300      	moveq	r3, #0
 8019a7a:	b2db      	uxtb	r3, r3
 8019a7c:	e006      	b.n	8019a8c <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x68>
 8019a7e:	687b      	ldr	r3, [r7, #4]
 8019a80:	7b1b      	ldrb	r3, [r3, #12]
 8019a82:	2b00      	cmp	r3, #0
 8019a84:	bf14      	ite	ne
 8019a86:	2301      	movne	r3, #1
 8019a88:	2300      	moveq	r3, #0
 8019a8a:	b2db      	uxtb	r3, r3
}
 8019a8c:	4618      	mov	r0, r3
 8019a8e:	371c      	adds	r7, #28
 8019a90:	46bd      	mov	sp, r7
 8019a92:	bd90      	pop	{r4, r7, pc}

08019a94 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasOutputParameter(const MockNamedValue& parameter)
{
 8019a94:	b590      	push	{r4, r7, lr}
 8019a96:	b087      	sub	sp, #28
 8019a98:	af00      	add	r7, sp, #0
 8019a9a:	6078      	str	r0, [r7, #4]
 8019a9c:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(parameter.getName());
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	6a1c      	ldr	r4, [r3, #32]
 8019aa2:	683b      	ldr	r3, [r7, #0]
 8019aa4:	681b      	ldr	r3, [r3, #0]
 8019aa6:	335c      	adds	r3, #92	; 0x5c
 8019aa8:	681b      	ldr	r3, [r3, #0]
 8019aaa:	f107 020c 	add.w	r2, r7, #12
 8019aae:	6839      	ldr	r1, [r7, #0]
 8019ab0:	4610      	mov	r0, r2
 8019ab2:	4798      	blx	r3
 8019ab4:	f107 030c 	add.w	r3, r7, #12
 8019ab8:	4619      	mov	r1, r3
 8019aba:	4620      	mov	r0, r4
 8019abc:	f004 f9cc 	bl	801de58 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8019ac0:	6178      	str	r0, [r7, #20]
 8019ac2:	f107 030c 	add.w	r3, r7, #12
 8019ac6:	4618      	mov	r0, r3
 8019ac8:	f7f2 f8df 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    return (p) ? p->compatibleForCopying(parameter) : ignoreOtherParameters_;
 8019acc:	697b      	ldr	r3, [r7, #20]
 8019ace:	2b00      	cmp	r3, #0
 8019ad0:	d00d      	beq.n	8019aee <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x5a>
 8019ad2:	697b      	ldr	r3, [r7, #20]
 8019ad4:	681b      	ldr	r3, [r3, #0]
 8019ad6:	3354      	adds	r3, #84	; 0x54
 8019ad8:	681b      	ldr	r3, [r3, #0]
 8019ada:	6839      	ldr	r1, [r7, #0]
 8019adc:	6978      	ldr	r0, [r7, #20]
 8019ade:	4798      	blx	r3
 8019ae0:	4603      	mov	r3, r0
 8019ae2:	2b00      	cmp	r3, #0
 8019ae4:	bf14      	ite	ne
 8019ae6:	2301      	movne	r3, #1
 8019ae8:	2300      	moveq	r3, #0
 8019aea:	b2db      	uxtb	r3, r3
 8019aec:	e006      	b.n	8019afc <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x68>
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	7b1b      	ldrb	r3, [r3, #12]
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	bf14      	ite	ne
 8019af6:	2301      	movne	r3, #1
 8019af8:	2300      	moveq	r3, #0
 8019afa:	b2db      	uxtb	r3, r3
}
 8019afc:	4618      	mov	r0, r3
 8019afe:	371c      	adds	r7, #28
 8019b00:	46bd      	mov	sp, r7
 8019b02:	bd90      	pop	{r4, r7, pc}

08019b04 <_ZN23MockCheckedExpectedCall12callToStringEv>:

SimpleString MockCheckedExpectedCall::callToString()
{
 8019b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b06:	b0a1      	sub	sp, #132	; 0x84
 8019b08:	af02      	add	r7, sp, #8
 8019b0a:	6078      	str	r0, [r7, #4]
 8019b0c:	6039      	str	r1, [r7, #0]
    SimpleString str;
 8019b0e:	49bc      	ldr	r1, [pc, #752]	; (8019e00 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 8019b10:	6878      	ldr	r0, [r7, #4]
 8019b12:	f7f1 fd02 	bl	800b51a <_ZN12SimpleStringC1EPKc>
    if (isSpecificObjectExpected_)
 8019b16:	683b      	ldr	r3, [r7, #0]
 8019b18:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8019b1c:	2b00      	cmp	r3, #0
 8019b1e:	d012      	beq.n	8019b46 <_ZN23MockCheckedExpectedCall12callToStringEv+0x42>
        str = StringFromFormat("(object address: %p)::", objectPtr_);
 8019b20:	683b      	ldr	r3, [r7, #0]
 8019b22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8019b24:	f107 030c 	add.w	r3, r7, #12
 8019b28:	49b6      	ldr	r1, [pc, #728]	; (8019e04 <_ZN23MockCheckedExpectedCall12callToStringEv+0x300>)
 8019b2a:	4618      	mov	r0, r3
 8019b2c:	f7f2 fdb4 	bl	800c698 <_Z16StringFromFormatPKcz>
 8019b30:	f107 030c 	add.w	r3, r7, #12
 8019b34:	4619      	mov	r1, r3
 8019b36:	6878      	ldr	r0, [r7, #4]
 8019b38:	f7f1 fd5b 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 8019b3c:	f107 030c 	add.w	r3, r7, #12
 8019b40:	4618      	mov	r0, r3
 8019b42:	f7f2 f8a2 	bl	800bc8a <_ZN12SimpleStringD1Ev>

    str += getName();
 8019b46:	f107 0314 	add.w	r3, r7, #20
 8019b4a:	6839      	ldr	r1, [r7, #0]
 8019b4c:	4618      	mov	r0, r3
 8019b4e:	f7ff f989 	bl	8018e64 <_ZNK23MockCheckedExpectedCall7getNameEv>
 8019b52:	f107 0314 	add.w	r3, r7, #20
 8019b56:	4619      	mov	r1, r3
 8019b58:	6878      	ldr	r0, [r7, #4]
 8019b5a:	f7f2 f913 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 8019b5e:	f107 0314 	add.w	r3, r7, #20
 8019b62:	4618      	mov	r0, r3
 8019b64:	f7f2 f891 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    str += " -> ";
 8019b68:	49a7      	ldr	r1, [pc, #668]	; (8019e08 <_ZN23MockCheckedExpectedCall12callToStringEv+0x304>)
 8019b6a:	6878      	ldr	r0, [r7, #4]
 8019b6c:	f7f2 f91c 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    if (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) {
 8019b70:	683b      	ldr	r3, [r7, #0]
 8019b72:	691b      	ldr	r3, [r3, #16]
 8019b74:	2b00      	cmp	r3, #0
 8019b76:	d02d      	beq.n	8019bd4 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        if (initialExpectedCallOrder_ == finalExpectedCallOrder_) {
 8019b78:	683b      	ldr	r3, [r7, #0]
 8019b7a:	691a      	ldr	r2, [r3, #16]
 8019b7c:	683b      	ldr	r3, [r7, #0]
 8019b7e:	695b      	ldr	r3, [r3, #20]
 8019b80:	429a      	cmp	r2, r3
 8019b82:	d113      	bne.n	8019bac <_ZN23MockCheckedExpectedCall12callToStringEv+0xa8>
            str += StringFromFormat("expected call order: <%u> -> ", initialExpectedCallOrder_);
 8019b84:	683b      	ldr	r3, [r7, #0]
 8019b86:	691a      	ldr	r2, [r3, #16]
 8019b88:	f107 031c 	add.w	r3, r7, #28
 8019b8c:	499f      	ldr	r1, [pc, #636]	; (8019e0c <_ZN23MockCheckedExpectedCall12callToStringEv+0x308>)
 8019b8e:	4618      	mov	r0, r3
 8019b90:	f7f2 fd82 	bl	800c698 <_Z16StringFromFormatPKcz>
 8019b94:	f107 031c 	add.w	r3, r7, #28
 8019b98:	4619      	mov	r1, r3
 8019b9a:	6878      	ldr	r0, [r7, #4]
 8019b9c:	f7f2 f8f2 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 8019ba0:	f107 031c 	add.w	r3, r7, #28
 8019ba4:	4618      	mov	r0, r3
 8019ba6:	f7f2 f870 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8019baa:	e013      	b.n	8019bd4 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        } else {
            str += StringFromFormat("expected calls order: <%u..%u> -> ", initialExpectedCallOrder_, finalExpectedCallOrder_);
 8019bac:	683b      	ldr	r3, [r7, #0]
 8019bae:	691a      	ldr	r2, [r3, #16]
 8019bb0:	683b      	ldr	r3, [r7, #0]
 8019bb2:	695b      	ldr	r3, [r3, #20]
 8019bb4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8019bb8:	4995      	ldr	r1, [pc, #596]	; (8019e10 <_ZN23MockCheckedExpectedCall12callToStringEv+0x30c>)
 8019bba:	f7f2 fd6d 	bl	800c698 <_Z16StringFromFormatPKcz>
 8019bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019bc2:	4619      	mov	r1, r3
 8019bc4:	6878      	ldr	r0, [r7, #4]
 8019bc6:	f7f2 f8dd 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 8019bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019bce:	4618      	mov	r0, r3
 8019bd0:	f7f2 f85b 	bl	800bc8a <_ZN12SimpleStringD1Ev>
        }
    }

    if (inputParameters_->begin() == NULLPTR && outputParameters_->begin() == NULLPTR) {
 8019bd4:	683b      	ldr	r3, [r7, #0]
 8019bd6:	69db      	ldr	r3, [r3, #28]
 8019bd8:	4618      	mov	r0, r3
 8019bda:	f004 f96c 	bl	801deb6 <_ZN18MockNamedValueList5beginEv>
 8019bde:	4603      	mov	r3, r0
 8019be0:	2b00      	cmp	r3, #0
 8019be2:	d109      	bne.n	8019bf8 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 8019be4:	683b      	ldr	r3, [r7, #0]
 8019be6:	6a1b      	ldr	r3, [r3, #32]
 8019be8:	4618      	mov	r0, r3
 8019bea:	f004 f964 	bl	801deb6 <_ZN18MockNamedValueList5beginEv>
 8019bee:	4603      	mov	r3, r0
 8019bf0:	2b00      	cmp	r3, #0
 8019bf2:	d101      	bne.n	8019bf8 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 8019bf4:	2301      	movs	r3, #1
 8019bf6:	e000      	b.n	8019bfa <_ZN23MockCheckedExpectedCall12callToStringEv+0xf6>
 8019bf8:	2300      	movs	r3, #0
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	d00b      	beq.n	8019c16 <_ZN23MockCheckedExpectedCall12callToStringEv+0x112>
        str += (ignoreOtherParameters_) ? "all parameters ignored" : "no parameters";
 8019bfe:	683b      	ldr	r3, [r7, #0]
 8019c00:	7b1b      	ldrb	r3, [r3, #12]
 8019c02:	2b00      	cmp	r3, #0
 8019c04:	d001      	beq.n	8019c0a <_ZN23MockCheckedExpectedCall12callToStringEv+0x106>
 8019c06:	4b83      	ldr	r3, [pc, #524]	; (8019e14 <_ZN23MockCheckedExpectedCall12callToStringEv+0x310>)
 8019c08:	e000      	b.n	8019c0c <_ZN23MockCheckedExpectedCall12callToStringEv+0x108>
 8019c0a:	4b83      	ldr	r3, [pc, #524]	; (8019e18 <_ZN23MockCheckedExpectedCall12callToStringEv+0x314>)
 8019c0c:	4619      	mov	r1, r3
 8019c0e:	6878      	ldr	r0, [r7, #4]
 8019c10:	f7f2 f8ca 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
 8019c14:	e0e3      	b.n	8019dde <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
    } else {
        MockNamedValueListNode* p;

        for (p = inputParameters_->begin(); p; p = p->next()) {
 8019c16:	683b      	ldr	r3, [r7, #0]
 8019c18:	69db      	ldr	r3, [r3, #28]
 8019c1a:	4618      	mov	r0, r3
 8019c1c:	f004 f94b 	bl	801deb6 <_ZN18MockNamedValueList5beginEv>
 8019c20:	6778      	str	r0, [r7, #116]	; 0x74
 8019c22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	d069      	beq.n	8019cfc <_ZN23MockCheckedExpectedCall12callToStringEv+0x1f8>
            str += StringFromFormat("%s %s: <%s>", p->getType().asCharString(), p->getName().asCharString(), getInputParameterValueString(p->getName()).asCharString());
 8019c28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019c2c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8019c2e:	4618      	mov	r0, r3
 8019c30:	f004 f898 	bl	801dd64 <_ZNK22MockNamedValueListNode7getTypeEv>
 8019c34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019c38:	4618      	mov	r0, r3
 8019c3a:	f7f1 fff9 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 8019c3e:	4605      	mov	r5, r0
 8019c40:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019c44:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8019c46:	4618      	mov	r0, r3
 8019c48:	f004 f879 	bl	801dd3e <_ZNK22MockNamedValueListNode7getNameEv>
 8019c4c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019c50:	4618      	mov	r0, r3
 8019c52:	f7f1 ffed 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 8019c56:	4606      	mov	r6, r0
 8019c58:	683b      	ldr	r3, [r7, #0]
 8019c5a:	681b      	ldr	r3, [r3, #0]
 8019c5c:	33a4      	adds	r3, #164	; 0xa4
 8019c5e:	681c      	ldr	r4, [r3, #0]
 8019c60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8019c64:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8019c66:	4618      	mov	r0, r3
 8019c68:	f004 f869 	bl	801dd3e <_ZNK22MockNamedValueListNode7getNameEv>
 8019c6c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019c70:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8019c74:	6839      	ldr	r1, [r7, #0]
 8019c76:	4618      	mov	r0, r3
 8019c78:	47a0      	blx	r4
 8019c7a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019c7e:	4618      	mov	r0, r3
 8019c80:	f7f1 ffd6 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 8019c84:	4603      	mov	r3, r0
 8019c86:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8019c8a:	9300      	str	r3, [sp, #0]
 8019c8c:	4633      	mov	r3, r6
 8019c8e:	462a      	mov	r2, r5
 8019c90:	4962      	ldr	r1, [pc, #392]	; (8019e1c <_ZN23MockCheckedExpectedCall12callToStringEv+0x318>)
 8019c92:	f7f2 fd01 	bl	800c698 <_Z16StringFromFormatPKcz>
 8019c96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019c9a:	4619      	mov	r1, r3
 8019c9c:	6878      	ldr	r0, [r7, #4]
 8019c9e:	f7f2 f871 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 8019ca2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019ca6:	4618      	mov	r0, r3
 8019ca8:	f7f1 ffef 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8019cac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019cb0:	4618      	mov	r0, r3
 8019cb2:	f7f1 ffea 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8019cb6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8019cba:	4618      	mov	r0, r3
 8019cbc:	f7f1 ffe5 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8019cc0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019cc4:	4618      	mov	r0, r3
 8019cc6:	f7f1 ffe0 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8019cca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019cce:	4618      	mov	r0, r3
 8019cd0:	f7f1 ffdb 	bl	800bc8a <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 8019cd4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8019cd6:	f003 fff7 	bl	801dcc8 <_ZN22MockNamedValueListNode4nextEv>
 8019cda:	4603      	mov	r3, r0
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	bf14      	ite	ne
 8019ce0:	2301      	movne	r3, #1
 8019ce2:	2300      	moveq	r3, #0
 8019ce4:	b2db      	uxtb	r3, r3
 8019ce6:	2b00      	cmp	r3, #0
 8019ce8:	d003      	beq.n	8019cf2 <_ZN23MockCheckedExpectedCall12callToStringEv+0x1ee>
 8019cea:	494d      	ldr	r1, [pc, #308]	; (8019e20 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 8019cec:	6878      	ldr	r0, [r7, #4]
 8019cee:	f7f2 f85b 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
        for (p = inputParameters_->begin(); p; p = p->next()) {
 8019cf2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8019cf4:	f003 ffe8 	bl	801dcc8 <_ZN22MockNamedValueListNode4nextEv>
 8019cf8:	6778      	str	r0, [r7, #116]	; 0x74
 8019cfa:	e792      	b.n	8019c22 <_ZN23MockCheckedExpectedCall12callToStringEv+0x11e>
        }

        if (inputParameters_->begin() && outputParameters_->begin())
 8019cfc:	683b      	ldr	r3, [r7, #0]
 8019cfe:	69db      	ldr	r3, [r3, #28]
 8019d00:	4618      	mov	r0, r3
 8019d02:	f004 f8d8 	bl	801deb6 <_ZN18MockNamedValueList5beginEv>
 8019d06:	4603      	mov	r3, r0
 8019d08:	2b00      	cmp	r3, #0
 8019d0a:	d009      	beq.n	8019d20 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 8019d0c:	683b      	ldr	r3, [r7, #0]
 8019d0e:	6a1b      	ldr	r3, [r3, #32]
 8019d10:	4618      	mov	r0, r3
 8019d12:	f004 f8d0 	bl	801deb6 <_ZN18MockNamedValueList5beginEv>
 8019d16:	4603      	mov	r3, r0
 8019d18:	2b00      	cmp	r3, #0
 8019d1a:	d001      	beq.n	8019d20 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 8019d1c:	2301      	movs	r3, #1
 8019d1e:	e000      	b.n	8019d22 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21e>
 8019d20:	2300      	movs	r3, #0
 8019d22:	2b00      	cmp	r3, #0
 8019d24:	d003      	beq.n	8019d2e <_ZN23MockCheckedExpectedCall12callToStringEv+0x22a>
        {
            str += ", ";
 8019d26:	493e      	ldr	r1, [pc, #248]	; (8019e20 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 8019d28:	6878      	ldr	r0, [r7, #4]
 8019d2a:	f7f2 f83d 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
        }

        for (p = outputParameters_->begin(); p; p = p->next()) {
 8019d2e:	683b      	ldr	r3, [r7, #0]
 8019d30:	6a1b      	ldr	r3, [r3, #32]
 8019d32:	4618      	mov	r0, r3
 8019d34:	f004 f8bf 	bl	801deb6 <_ZN18MockNamedValueList5beginEv>
 8019d38:	6778      	str	r0, [r7, #116]	; 0x74
 8019d3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019d3c:	2b00      	cmp	r3, #0
 8019d3e:	d046      	beq.n	8019dce <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ca>
            str += StringFromFormat("%s %s: <output>", p->getType().asCharString(), p->getName().asCharString());
 8019d40:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8019d44:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8019d46:	4618      	mov	r0, r3
 8019d48:	f004 f80c 	bl	801dd64 <_ZNK22MockNamedValueListNode7getTypeEv>
 8019d4c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8019d50:	4618      	mov	r0, r3
 8019d52:	f7f1 ff6d 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 8019d56:	4604      	mov	r4, r0
 8019d58:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8019d5c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8019d5e:	4618      	mov	r0, r3
 8019d60:	f003 ffed 	bl	801dd3e <_ZNK22MockNamedValueListNode7getNameEv>
 8019d64:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8019d68:	4618      	mov	r0, r3
 8019d6a:	f7f1 ff61 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 8019d6e:	4603      	mov	r3, r0
 8019d70:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8019d74:	4622      	mov	r2, r4
 8019d76:	492b      	ldr	r1, [pc, #172]	; (8019e24 <_ZN23MockCheckedExpectedCall12callToStringEv+0x320>)
 8019d78:	f7f2 fc8e 	bl	800c698 <_Z16StringFromFormatPKcz>
 8019d7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8019d80:	4619      	mov	r1, r3
 8019d82:	6878      	ldr	r0, [r7, #4]
 8019d84:	f7f1 fffe 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 8019d88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8019d8c:	4618      	mov	r0, r3
 8019d8e:	f7f1 ff7c 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8019d92:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8019d96:	4618      	mov	r0, r3
 8019d98:	f7f1 ff77 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8019d9c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8019da0:	4618      	mov	r0, r3
 8019da2:	f7f1 ff72 	bl	800bc8a <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 8019da6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8019da8:	f003 ff8e 	bl	801dcc8 <_ZN22MockNamedValueListNode4nextEv>
 8019dac:	4603      	mov	r3, r0
 8019dae:	2b00      	cmp	r3, #0
 8019db0:	bf14      	ite	ne
 8019db2:	2301      	movne	r3, #1
 8019db4:	2300      	moveq	r3, #0
 8019db6:	b2db      	uxtb	r3, r3
 8019db8:	2b00      	cmp	r3, #0
 8019dba:	d003      	beq.n	8019dc4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2c0>
 8019dbc:	4918      	ldr	r1, [pc, #96]	; (8019e20 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 8019dbe:	6878      	ldr	r0, [r7, #4]
 8019dc0:	f7f1 fff2 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
        for (p = outputParameters_->begin(); p; p = p->next()) {
 8019dc4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8019dc6:	f003 ff7f 	bl	801dcc8 <_ZN22MockNamedValueListNode4nextEv>
 8019dca:	6778      	str	r0, [r7, #116]	; 0x74
 8019dcc:	e7b5      	b.n	8019d3a <_ZN23MockCheckedExpectedCall12callToStringEv+0x236>
        }

        if (ignoreOtherParameters_)
 8019dce:	683b      	ldr	r3, [r7, #0]
 8019dd0:	7b1b      	ldrb	r3, [r3, #12]
 8019dd2:	2b00      	cmp	r3, #0
 8019dd4:	d003      	beq.n	8019dde <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
            str += ", other parameters are ignored";
 8019dd6:	4914      	ldr	r1, [pc, #80]	; (8019e28 <_ZN23MockCheckedExpectedCall12callToStringEv+0x324>)
 8019dd8:	6878      	ldr	r0, [r7, #4]
 8019dda:	f7f1 ffe5 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    }

    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 8019dde:	683b      	ldr	r3, [r7, #0]
 8019de0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 8019de2:	683b      	ldr	r3, [r7, #0]
 8019de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 8019de6:	2b01      	cmp	r3, #1
 8019de8:	d101      	bne.n	8019dee <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ea>
 8019dea:	4c05      	ldr	r4, [pc, #20]	; (8019e00 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 8019dec:	e000      	b.n	8019df0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ec>
 8019dee:	4c0f      	ldr	r4, [pc, #60]	; (8019e2c <_ZN23MockCheckedExpectedCall12callToStringEv+0x328>)
 8019df0:	683b      	ldr	r3, [r7, #0]
 8019df2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 8019df4:	683a      	ldr	r2, [r7, #0]
 8019df6:	6e92      	ldr	r2, [r2, #104]	; 0x68
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 8019df8:	2a01      	cmp	r2, #1
 8019dfa:	d119      	bne.n	8019e30 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32c>
 8019dfc:	4a00      	ldr	r2, [pc, #0]	; (8019e00 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 8019dfe:	e018      	b.n	8019e32 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32e>
 8019e00:	0802461c 	.word	0x0802461c
 8019e04:	08024690 	.word	0x08024690
 8019e08:	080246a8 	.word	0x080246a8
 8019e0c:	080246b0 	.word	0x080246b0
 8019e10:	080246d0 	.word	0x080246d0
 8019e14:	080246f4 	.word	0x080246f4
 8019e18:	0802470c 	.word	0x0802470c
 8019e1c:	0802471c 	.word	0x0802471c
 8019e20:	08024728 	.word	0x08024728
 8019e24:	0802472c 	.word	0x0802472c
 8019e28:	0802473c 	.word	0x0802473c
 8019e2c:	0802475c 	.word	0x0802475c
 8019e30:	4a0c      	ldr	r2, [pc, #48]	; (8019e64 <_ZN23MockCheckedExpectedCall12callToStringEv+0x360>)
 8019e32:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8019e36:	9201      	str	r2, [sp, #4]
 8019e38:	9300      	str	r3, [sp, #0]
 8019e3a:	4623      	mov	r3, r4
 8019e3c:	460a      	mov	r2, r1
 8019e3e:	490a      	ldr	r1, [pc, #40]	; (8019e68 <_ZN23MockCheckedExpectedCall12callToStringEv+0x364>)
 8019e40:	f7f2 fc2a 	bl	800c698 <_Z16StringFromFormatPKcz>
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 8019e44:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8019e48:	4619      	mov	r1, r3
 8019e4a:	6878      	ldr	r0, [r7, #4]
 8019e4c:	f7f1 ff9a 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 8019e50:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8019e54:	4618      	mov	r0, r3
 8019e56:	f7f1 ff18 	bl	800bc8a <_ZN12SimpleStringD1Ev>

    return str;
 8019e5a:	bf00      	nop
}
 8019e5c:	6878      	ldr	r0, [r7, #4]
 8019e5e:	377c      	adds	r7, #124	; 0x7c
 8019e60:	46bd      	mov	sp, r7
 8019e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019e64:	0802475c 	.word	0x0802475c
 8019e68:	08024760 	.word	0x08024760

08019e6c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv>:

SimpleString MockCheckedExpectedCall::missingParametersToString()
{
 8019e6c:	b590      	push	{r4, r7, lr}
 8019e6e:	b095      	sub	sp, #84	; 0x54
 8019e70:	af00      	add	r7, sp, #0
 8019e72:	6078      	str	r0, [r7, #4]
 8019e74:	6039      	str	r1, [r7, #0]
    SimpleString str;
 8019e76:	496c      	ldr	r1, [pc, #432]	; (801a028 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 8019e78:	6878      	ldr	r0, [r7, #4]
 8019e7a:	f7f1 fb4e 	bl	800b51a <_ZN12SimpleStringC1EPKc>
	MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next()) {
 8019e7e:	683b      	ldr	r3, [r7, #0]
 8019e80:	69db      	ldr	r3, [r3, #28]
 8019e82:	4618      	mov	r0, r3
 8019e84:	f004 f817 	bl	801deb6 <_ZN18MockNamedValueList5beginEv>
 8019e88:	64f8      	str	r0, [r7, #76]	; 0x4c
 8019e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019e8c:	2b00      	cmp	r3, #0
 8019e8e:	d05e      	beq.n	8019f4e <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xe2>
        if (! item(p)->isMatchingActualCall()) {
 8019e90:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8019e92:	6838      	ldr	r0, [r7, #0]
 8019e94:	f000 f906 	bl	801a0a4 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8019e98:	4603      	mov	r3, r0
 8019e9a:	4618      	mov	r0, r3
 8019e9c:	f000 f938 	bl	801a110 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 8019ea0:	4603      	mov	r3, r0
 8019ea2:	f083 0301 	eor.w	r3, r3, #1
 8019ea6:	b2db      	uxtb	r3, r3
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	d04b      	beq.n	8019f44 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xd8>
            if (str != "") str += ", ";
 8019eac:	f107 030c 	add.w	r3, r7, #12
 8019eb0:	495d      	ldr	r1, [pc, #372]	; (801a028 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 8019eb2:	4618      	mov	r0, r3
 8019eb4:	f7f1 fb31 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8019eb8:	f107 030c 	add.w	r3, r7, #12
 8019ebc:	4619      	mov	r1, r3
 8019ebe:	6878      	ldr	r0, [r7, #4]
 8019ec0:	f7f1 ff34 	bl	800bd2c <_ZneRK12SimpleStringS1_>
 8019ec4:	4603      	mov	r3, r0
 8019ec6:	461c      	mov	r4, r3
 8019ec8:	f107 030c 	add.w	r3, r7, #12
 8019ecc:	4618      	mov	r0, r3
 8019ece:	f7f1 fedc 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8019ed2:	2c00      	cmp	r4, #0
 8019ed4:	d003      	beq.n	8019ede <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x72>
 8019ed6:	4955      	ldr	r1, [pc, #340]	; (801a02c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 8019ed8:	6878      	ldr	r0, [r7, #4]
 8019eda:	f7f1 ff65 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 8019ede:	f107 031c 	add.w	r3, r7, #28
 8019ee2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8019ee4:	4618      	mov	r0, r3
 8019ee6:	f003 ff3d 	bl	801dd64 <_ZNK22MockNamedValueListNode7getTypeEv>
 8019eea:	f107 031c 	add.w	r3, r7, #28
 8019eee:	4618      	mov	r0, r3
 8019ef0:	f7f1 fe9e 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 8019ef4:	4604      	mov	r4, r0
 8019ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019efa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8019efc:	4618      	mov	r0, r3
 8019efe:	f003 ff1e 	bl	801dd3e <_ZNK22MockNamedValueListNode7getNameEv>
 8019f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019f06:	4618      	mov	r0, r3
 8019f08:	f7f1 fe92 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 8019f0c:	4603      	mov	r3, r0
 8019f0e:	f107 0014 	add.w	r0, r7, #20
 8019f12:	4622      	mov	r2, r4
 8019f14:	4946      	ldr	r1, [pc, #280]	; (801a030 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 8019f16:	f7f2 fbbf 	bl	800c698 <_Z16StringFromFormatPKcz>
 8019f1a:	f107 0314 	add.w	r3, r7, #20
 8019f1e:	4619      	mov	r1, r3
 8019f20:	6878      	ldr	r0, [r7, #4]
 8019f22:	f7f1 ff2f 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 8019f26:	f107 0314 	add.w	r3, r7, #20
 8019f2a:	4618      	mov	r0, r3
 8019f2c:	f7f1 fead 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8019f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019f34:	4618      	mov	r0, r3
 8019f36:	f7f1 fea8 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8019f3a:	f107 031c 	add.w	r3, r7, #28
 8019f3e:	4618      	mov	r0, r3
 8019f40:	f7f1 fea3 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    for (p = inputParameters_->begin(); p; p = p->next()) {
 8019f44:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8019f46:	f003 febf 	bl	801dcc8 <_ZN22MockNamedValueListNode4nextEv>
 8019f4a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8019f4c:	e79d      	b.n	8019e8a <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1e>
        }
    }
    for (p = outputParameters_->begin(); p; p = p->next()) {
 8019f4e:	683b      	ldr	r3, [r7, #0]
 8019f50:	6a1b      	ldr	r3, [r3, #32]
 8019f52:	4618      	mov	r0, r3
 8019f54:	f003 ffaf 	bl	801deb6 <_ZN18MockNamedValueList5beginEv>
 8019f58:	64f8      	str	r0, [r7, #76]	; 0x4c
 8019f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019f5c:	2b00      	cmp	r3, #0
 8019f5e:	d05e      	beq.n	801a01e <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1b2>
        if (! item(p)->isMatchingActualCall()) {
 8019f60:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8019f62:	6838      	ldr	r0, [r7, #0]
 8019f64:	f000 f89e 	bl	801a0a4 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8019f68:	4603      	mov	r3, r0
 8019f6a:	4618      	mov	r0, r3
 8019f6c:	f000 f8d0 	bl	801a110 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 8019f70:	4603      	mov	r3, r0
 8019f72:	f083 0301 	eor.w	r3, r3, #1
 8019f76:	b2db      	uxtb	r3, r3
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	d04b      	beq.n	801a014 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1a8>
            if (str != "") str += ", ";
 8019f7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019f80:	4929      	ldr	r1, [pc, #164]	; (801a028 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 8019f82:	4618      	mov	r0, r3
 8019f84:	f7f1 fac9 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 8019f88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019f8c:	4619      	mov	r1, r3
 8019f8e:	6878      	ldr	r0, [r7, #4]
 8019f90:	f7f1 fecc 	bl	800bd2c <_ZneRK12SimpleStringS1_>
 8019f94:	4603      	mov	r3, r0
 8019f96:	461c      	mov	r4, r3
 8019f98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019f9c:	4618      	mov	r0, r3
 8019f9e:	f7f1 fe74 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 8019fa2:	2c00      	cmp	r4, #0
 8019fa4:	d003      	beq.n	8019fae <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x142>
 8019fa6:	4921      	ldr	r1, [pc, #132]	; (801a02c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 8019fa8:	6878      	ldr	r0, [r7, #4]
 8019faa:	f7f1 fefd 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 8019fae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019fb2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8019fb4:	4618      	mov	r0, r3
 8019fb6:	f003 fed5 	bl	801dd64 <_ZNK22MockNamedValueListNode7getTypeEv>
 8019fba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019fbe:	4618      	mov	r0, r3
 8019fc0:	f7f1 fe36 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 8019fc4:	4604      	mov	r4, r0
 8019fc6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019fca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8019fcc:	4618      	mov	r0, r3
 8019fce:	f003 feb6 	bl	801dd3e <_ZNK22MockNamedValueListNode7getNameEv>
 8019fd2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019fd6:	4618      	mov	r0, r3
 8019fd8:	f7f1 fe2a 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 8019fdc:	4603      	mov	r3, r0
 8019fde:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8019fe2:	4622      	mov	r2, r4
 8019fe4:	4912      	ldr	r1, [pc, #72]	; (801a030 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 8019fe6:	f7f2 fb57 	bl	800c698 <_Z16StringFromFormatPKcz>
 8019fea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019fee:	4619      	mov	r1, r3
 8019ff0:	6878      	ldr	r0, [r7, #4]
 8019ff2:	f7f1 fec7 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 8019ff6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019ffa:	4618      	mov	r0, r3
 8019ffc:	f7f1 fe45 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801a000:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801a004:	4618      	mov	r0, r3
 801a006:	f7f1 fe40 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801a00a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801a00e:	4618      	mov	r0, r3
 801a010:	f7f1 fe3b 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801a014:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801a016:	f003 fe57 	bl	801dcc8 <_ZN22MockNamedValueListNode4nextEv>
 801a01a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801a01c:	e79d      	b.n	8019f5a <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xee>
        }
    }
    return str;
 801a01e:	bf00      	nop
}
 801a020:	6878      	ldr	r0, [r7, #4]
 801a022:	3754      	adds	r7, #84	; 0x54
 801a024:	46bd      	mov	sp, r7
 801a026:	bd90      	pop	{r4, r7, pc}
 801a028:	0802461c 	.word	0x0802461c
 801a02c:	08024728 	.word	0x08024728
 801a030:	08024788 	.word	0x08024788

0801a034 <_ZN23MockCheckedExpectedCall9relatesToERK12SimpleString>:

bool MockCheckedExpectedCall::relatesTo(const SimpleString& functionName)
{
 801a034:	b590      	push	{r4, r7, lr}
 801a036:	b085      	sub	sp, #20
 801a038:	af00      	add	r7, sp, #0
 801a03a:	6078      	str	r0, [r7, #4]
 801a03c:	6039      	str	r1, [r7, #0]
    return functionName == getName();
 801a03e:	f107 0308 	add.w	r3, r7, #8
 801a042:	6879      	ldr	r1, [r7, #4]
 801a044:	4618      	mov	r0, r3
 801a046:	f7fe ff0d 	bl	8018e64 <_ZNK23MockCheckedExpectedCall7getNameEv>
 801a04a:	f107 0308 	add.w	r3, r7, #8
 801a04e:	4619      	mov	r1, r3
 801a050:	6838      	ldr	r0, [r7, #0]
 801a052:	f7f1 fe26 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801a056:	4603      	mov	r3, r0
 801a058:	461c      	mov	r4, r3
 801a05a:	f107 0308 	add.w	r3, r7, #8
 801a05e:	4618      	mov	r0, r3
 801a060:	f7f1 fe13 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801a064:	4623      	mov	r3, r4
}
 801a066:	4618      	mov	r0, r3
 801a068:	3714      	adds	r7, #20
 801a06a:	46bd      	mov	sp, r7
 801a06c:	bd90      	pop	{r4, r7, pc}

0801a06e <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv>:

bool MockCheckedExpectedCall::relatesToObject(const void* objectPtr) const
{
 801a06e:	b480      	push	{r7}
 801a070:	b083      	sub	sp, #12
 801a072:	af00      	add	r7, sp, #0
 801a074:	6078      	str	r0, [r7, #4]
 801a076:	6039      	str	r1, [r7, #0]
    return (!isSpecificObjectExpected_) || (objectPtr_ == objectPtr);
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801a07e:	f083 0301 	eor.w	r3, r3, #1
 801a082:	b2db      	uxtb	r3, r3
 801a084:	2b00      	cmp	r3, #0
 801a086:	d104      	bne.n	801a092 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x24>
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a08c:	683a      	ldr	r2, [r7, #0]
 801a08e:	429a      	cmp	r2, r3
 801a090:	d101      	bne.n	801a096 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x28>
 801a092:	2301      	movs	r3, #1
 801a094:	e000      	b.n	801a098 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x2a>
 801a096:	2300      	movs	r3, #0
}
 801a098:	4618      	mov	r0, r3
 801a09a:	370c      	adds	r7, #12
 801a09c:	46bd      	mov	sp, r7
 801a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0a2:	4770      	bx	lr

0801a0a4 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>:

MockCheckedExpectedCall::MockExpectedFunctionParameter* MockCheckedExpectedCall::item(MockNamedValueListNode* node)
{
 801a0a4:	b580      	push	{r7, lr}
 801a0a6:	b082      	sub	sp, #8
 801a0a8:	af00      	add	r7, sp, #0
 801a0aa:	6078      	str	r0, [r7, #4]
 801a0ac:	6039      	str	r1, [r7, #0]
    return (MockExpectedFunctionParameter*) node->item();
 801a0ae:	6838      	ldr	r0, [r7, #0]
 801a0b0:	f003 fe16 	bl	801dce0 <_ZN22MockNamedValueListNode4itemEv>
 801a0b4:	4603      	mov	r3, r0
}
 801a0b6:	4618      	mov	r0, r3
 801a0b8:	3708      	adds	r7, #8
 801a0ba:	46bd      	mov	sp, r7
 801a0bc:	bd80      	pop	{r7, pc}
	...

0801a0c0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>:

MockCheckedExpectedCall::MockExpectedFunctionParameter::MockExpectedFunctionParameter(const SimpleString& name)
 801a0c0:	b580      	push	{r7, lr}
 801a0c2:	b082      	sub	sp, #8
 801a0c4:	af00      	add	r7, sp, #0
 801a0c6:	6078      	str	r0, [r7, #4]
 801a0c8:	6039      	str	r1, [r7, #0]
            : MockNamedValue(name), matchesActualCall_(false)
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	6839      	ldr	r1, [r7, #0]
 801a0ce:	4618      	mov	r0, r3
 801a0d0:	f001 ff48 	bl	801bf64 <_ZN14MockNamedValueC1ERK12SimpleString>
 801a0d4:	4a05      	ldr	r2, [pc, #20]	; (801a0ec <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString+0x2c>)
 801a0d6:	687b      	ldr	r3, [r7, #4]
 801a0d8:	601a      	str	r2, [r3, #0]
 801a0da:	687b      	ldr	r3, [r7, #4]
 801a0dc:	2200      	movs	r2, #0
 801a0de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
{
}
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	4618      	mov	r0, r3
 801a0e6:	3708      	adds	r7, #8
 801a0e8:	46bd      	mov	sp, r7
 801a0ea:	bd80      	pop	{r7, pc}
 801a0ec:	080270e8 	.word	0x080270e8

0801a0f0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>:

void MockCheckedExpectedCall::MockExpectedFunctionParameter::setMatchesActualCall(bool b)
{
 801a0f0:	b480      	push	{r7}
 801a0f2:	b083      	sub	sp, #12
 801a0f4:	af00      	add	r7, sp, #0
 801a0f6:	6078      	str	r0, [r7, #4]
 801a0f8:	460b      	mov	r3, r1
 801a0fa:	70fb      	strb	r3, [r7, #3]
    matchesActualCall_ = b;
 801a0fc:	687b      	ldr	r3, [r7, #4]
 801a0fe:	78fa      	ldrb	r2, [r7, #3]
 801a100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 801a104:	bf00      	nop
 801a106:	370c      	adds	r7, #12
 801a108:	46bd      	mov	sp, r7
 801a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a10e:	4770      	bx	lr

0801a110 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::MockExpectedFunctionParameter::isMatchingActualCall() const
{
 801a110:	b480      	push	{r7}
 801a112:	b083      	sub	sp, #12
 801a114:	af00      	add	r7, sp, #0
 801a116:	6078      	str	r0, [r7, #4]
    return matchesActualCall_;
 801a118:	687b      	ldr	r3, [r7, #4]
 801a11a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 801a11e:	4618      	mov	r0, r3
 801a120:	370c      	adds	r7, #12
 801a122:	46bd      	mov	sp, r7
 801a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a128:	4770      	bx	lr
	...

0801a12c <_ZN23MockCheckedExpectedCall14andReturnValueEb>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(bool value)
{
 801a12c:	b580      	push	{r7, lr}
 801a12e:	b082      	sub	sp, #8
 801a130:	af00      	add	r7, sp, #0
 801a132:	6078      	str	r0, [r7, #4]
 801a134:	460b      	mov	r3, r1
 801a136:	70fb      	strb	r3, [r7, #3]
    returnValue_.setName("returnValue");
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	3328      	adds	r3, #40	; 0x28
 801a13c:	4907      	ldr	r1, [pc, #28]	; (801a15c <_ZN23MockCheckedExpectedCall14andReturnValueEb+0x30>)
 801a13e:	4618      	mov	r0, r3
 801a140:	f002 f9b2 	bl	801c4a8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801a144:	687b      	ldr	r3, [r7, #4]
 801a146:	3328      	adds	r3, #40	; 0x28
 801a148:	78fa      	ldrb	r2, [r7, #3]
 801a14a:	4611      	mov	r1, r2
 801a14c:	4618      	mov	r0, r3
 801a14e:	f001 ff5b 	bl	801c008 <_ZN14MockNamedValue8setValueEb>
    return *this;
 801a152:	687b      	ldr	r3, [r7, #4]
}
 801a154:	4618      	mov	r0, r3
 801a156:	3708      	adds	r7, #8
 801a158:	46bd      	mov	sp, r7
 801a15a:	bd80      	pop	{r7, pc}
 801a15c:	08024790 	.word	0x08024790

0801a160 <_ZN23MockCheckedExpectedCall14andReturnValueEj>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned int value)
{
 801a160:	b580      	push	{r7, lr}
 801a162:	b082      	sub	sp, #8
 801a164:	af00      	add	r7, sp, #0
 801a166:	6078      	str	r0, [r7, #4]
 801a168:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	3328      	adds	r3, #40	; 0x28
 801a16e:	4907      	ldr	r1, [pc, #28]	; (801a18c <_ZN23MockCheckedExpectedCall14andReturnValueEj+0x2c>)
 801a170:	4618      	mov	r0, r3
 801a172:	f002 f999 	bl	801c4a8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801a176:	687b      	ldr	r3, [r7, #4]
 801a178:	3328      	adds	r3, #40	; 0x28
 801a17a:	6839      	ldr	r1, [r7, #0]
 801a17c:	4618      	mov	r0, r3
 801a17e:	f001 ff67 	bl	801c050 <_ZN14MockNamedValue8setValueEj>
    return *this;
 801a182:	687b      	ldr	r3, [r7, #4]
}
 801a184:	4618      	mov	r0, r3
 801a186:	3708      	adds	r7, #8
 801a188:	46bd      	mov	sp, r7
 801a18a:	bd80      	pop	{r7, pc}
 801a18c:	08024790 	.word	0x08024790

0801a190 <_ZN23MockCheckedExpectedCall14andReturnValueEi>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(int value)
{
 801a190:	b580      	push	{r7, lr}
 801a192:	b082      	sub	sp, #8
 801a194:	af00      	add	r7, sp, #0
 801a196:	6078      	str	r0, [r7, #4]
 801a198:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	3328      	adds	r3, #40	; 0x28
 801a19e:	4907      	ldr	r1, [pc, #28]	; (801a1bc <_ZN23MockCheckedExpectedCall14andReturnValueEi+0x2c>)
 801a1a0:	4618      	mov	r0, r3
 801a1a2:	f002 f981 	bl	801c4a8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	3328      	adds	r3, #40	; 0x28
 801a1aa:	6839      	ldr	r1, [r7, #0]
 801a1ac:	4618      	mov	r0, r3
 801a1ae:	f001 ff71 	bl	801c094 <_ZN14MockNamedValue8setValueEi>
    return *this;
 801a1b2:	687b      	ldr	r3, [r7, #4]
}
 801a1b4:	4618      	mov	r0, r3
 801a1b6:	3708      	adds	r7, #8
 801a1b8:	46bd      	mov	sp, r7
 801a1ba:	bd80      	pop	{r7, pc}
 801a1bc:	08024790 	.word	0x08024790

0801a1c0 <_ZN23MockCheckedExpectedCall14andReturnValueEl>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(long int value)
{
 801a1c0:	b580      	push	{r7, lr}
 801a1c2:	b082      	sub	sp, #8
 801a1c4:	af00      	add	r7, sp, #0
 801a1c6:	6078      	str	r0, [r7, #4]
 801a1c8:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	3328      	adds	r3, #40	; 0x28
 801a1ce:	4907      	ldr	r1, [pc, #28]	; (801a1ec <_ZN23MockCheckedExpectedCall14andReturnValueEl+0x2c>)
 801a1d0:	4618      	mov	r0, r3
 801a1d2:	f002 f969 	bl	801c4a8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	3328      	adds	r3, #40	; 0x28
 801a1da:	6839      	ldr	r1, [r7, #0]
 801a1dc:	4618      	mov	r0, r3
 801a1de:	f001 ff7b 	bl	801c0d8 <_ZN14MockNamedValue8setValueEl>
    return *this;
 801a1e2:	687b      	ldr	r3, [r7, #4]
}
 801a1e4:	4618      	mov	r0, r3
 801a1e6:	3708      	adds	r7, #8
 801a1e8:	46bd      	mov	sp, r7
 801a1ea:	bd80      	pop	{r7, pc}
 801a1ec:	08024790 	.word	0x08024790

0801a1f0 <_ZN23MockCheckedExpectedCall14andReturnValueEm>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned long int value)
{
 801a1f0:	b580      	push	{r7, lr}
 801a1f2:	b082      	sub	sp, #8
 801a1f4:	af00      	add	r7, sp, #0
 801a1f6:	6078      	str	r0, [r7, #4]
 801a1f8:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801a1fa:	687b      	ldr	r3, [r7, #4]
 801a1fc:	3328      	adds	r3, #40	; 0x28
 801a1fe:	4907      	ldr	r1, [pc, #28]	; (801a21c <_ZN23MockCheckedExpectedCall14andReturnValueEm+0x2c>)
 801a200:	4618      	mov	r0, r3
 801a202:	f002 f951 	bl	801c4a8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	3328      	adds	r3, #40	; 0x28
 801a20a:	6839      	ldr	r1, [r7, #0]
 801a20c:	4618      	mov	r0, r3
 801a20e:	f001 ff85 	bl	801c11c <_ZN14MockNamedValue8setValueEm>
    return *this;
 801a212:	687b      	ldr	r3, [r7, #4]
}
 801a214:	4618      	mov	r0, r3
 801a216:	3708      	adds	r7, #8
 801a218:	46bd      	mov	sp, r7
 801a21a:	bd80      	pop	{r7, pc}
 801a21c:	08024790 	.word	0x08024790

0801a220 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_longlong)
{
 801a220:	b5b0      	push	{r4, r5, r7, lr}
 801a222:	b086      	sub	sp, #24
 801a224:	af02      	add	r7, sp, #8
 801a226:	60f8      	str	r0, [r7, #12]
 801a228:	1d3b      	adds	r3, r7, #4
 801a22a:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801a22e:	f7f8 fd57 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 801a232:	4604      	mov	r4, r0
 801a234:	6823      	ldr	r3, [r4, #0]
 801a236:	3368      	adds	r3, #104	; 0x68
 801a238:	681d      	ldr	r5, [r3, #0]
 801a23a:	f7f8 fd61 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a23e:	4603      	mov	r3, r0
 801a240:	9300      	str	r3, [sp, #0]
 801a242:	f240 2319 	movw	r3, #537	; 0x219
 801a246:	4a04      	ldr	r2, [pc, #16]	; (801a258 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x38>)
 801a248:	4904      	ldr	r1, [pc, #16]	; (801a25c <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x3c>)
 801a24a:	4620      	mov	r0, r4
 801a24c:	47a8      	blx	r5
    return *this;
 801a24e:	68fb      	ldr	r3, [r7, #12]
}
 801a250:	4618      	mov	r0, r3
 801a252:	3710      	adds	r7, #16
 801a254:	46bd      	mov	sp, r7
 801a256:	bdb0      	pop	{r4, r5, r7, pc}
 801a258:	08024620 	.word	0x08024620
 801a25c:	0802463c 	.word	0x0802463c

0801a260 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_ulonglong)
{
 801a260:	b5b0      	push	{r4, r5, r7, lr}
 801a262:	b086      	sub	sp, #24
 801a264:	af02      	add	r7, sp, #8
 801a266:	60f8      	str	r0, [r7, #12]
 801a268:	1d3b      	adds	r3, r7, #4
 801a26a:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801a26e:	f7f8 fd37 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 801a272:	4604      	mov	r4, r0
 801a274:	6823      	ldr	r3, [r4, #0]
 801a276:	3368      	adds	r3, #104	; 0x68
 801a278:	681d      	ldr	r5, [r3, #0]
 801a27a:	f7f8 fd41 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a27e:	4603      	mov	r3, r0
 801a280:	9300      	str	r3, [sp, #0]
 801a282:	f240 231f 	movw	r3, #543	; 0x21f
 801a286:	4a04      	ldr	r2, [pc, #16]	; (801a298 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x38>)
 801a288:	4904      	ldr	r1, [pc, #16]	; (801a29c <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x3c>)
 801a28a:	4620      	mov	r0, r4
 801a28c:	47a8      	blx	r5
    return *this;
 801a28e:	68fb      	ldr	r3, [r7, #12]
}
 801a290:	4618      	mov	r0, r3
 801a292:	3710      	adds	r7, #16
 801a294:	46bd      	mov	sp, r7
 801a296:	bdb0      	pop	{r4, r5, r7, pc}
 801a298:	08024620 	.word	0x08024620
 801a29c:	0802465c 	.word	0x0802465c

0801a2a0 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc>:

#endif

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const char* value)
{
 801a2a0:	b580      	push	{r7, lr}
 801a2a2:	b082      	sub	sp, #8
 801a2a4:	af00      	add	r7, sp, #0
 801a2a6:	6078      	str	r0, [r7, #4]
 801a2a8:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	3328      	adds	r3, #40	; 0x28
 801a2ae:	4907      	ldr	r1, [pc, #28]	; (801a2cc <_ZN23MockCheckedExpectedCall14andReturnValueEPKc+0x2c>)
 801a2b0:	4618      	mov	r0, r3
 801a2b2:	f002 f8f9 	bl	801c4a8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	3328      	adds	r3, #40	; 0x28
 801a2ba:	6839      	ldr	r1, [r7, #0]
 801a2bc:	4618      	mov	r0, r3
 801a2be:	f002 f835 	bl	801c32c <_ZN14MockNamedValue8setValueEPKc>
    return *this;
 801a2c2:	687b      	ldr	r3, [r7, #4]
}
 801a2c4:	4618      	mov	r0, r3
 801a2c6:	3708      	adds	r7, #8
 801a2c8:	46bd      	mov	sp, r7
 801a2ca:	bd80      	pop	{r7, pc}
 801a2cc:	08024790 	.word	0x08024790

0801a2d0 <_ZN23MockCheckedExpectedCall14andReturnValueEd>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(double value)
{
 801a2d0:	b580      	push	{r7, lr}
 801a2d2:	b084      	sub	sp, #16
 801a2d4:	af00      	add	r7, sp, #0
 801a2d6:	60f8      	str	r0, [r7, #12]
 801a2d8:	ed87 0b00 	vstr	d0, [r7]
    returnValue_.setName("returnValue");
 801a2dc:	68fb      	ldr	r3, [r7, #12]
 801a2de:	3328      	adds	r3, #40	; 0x28
 801a2e0:	4907      	ldr	r1, [pc, #28]	; (801a300 <_ZN23MockCheckedExpectedCall14andReturnValueEd+0x30>)
 801a2e2:	4618      	mov	r0, r3
 801a2e4:	f002 f8e0 	bl	801c4a8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801a2e8:	68fb      	ldr	r3, [r7, #12]
 801a2ea:	3328      	adds	r3, #40	; 0x28
 801a2ec:	ed97 0b00 	vldr	d0, [r7]
 801a2f0:	4618      	mov	r0, r3
 801a2f2:	f001 ff71 	bl	801c1d8 <_ZN14MockNamedValue8setValueEd>
    return *this;
 801a2f6:	68fb      	ldr	r3, [r7, #12]
}
 801a2f8:	4618      	mov	r0, r3
 801a2fa:	3710      	adds	r7, #16
 801a2fc:	46bd      	mov	sp, r7
 801a2fe:	bd80      	pop	{r7, pc}
 801a300:	08024790 	.word	0x08024790

0801a304 <_ZN23MockCheckedExpectedCall14andReturnValueEPv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void* value)
{
 801a304:	b580      	push	{r7, lr}
 801a306:	b082      	sub	sp, #8
 801a308:	af00      	add	r7, sp, #0
 801a30a:	6078      	str	r0, [r7, #4]
 801a30c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	3328      	adds	r3, #40	; 0x28
 801a312:	4907      	ldr	r1, [pc, #28]	; (801a330 <_ZN23MockCheckedExpectedCall14andReturnValueEPv+0x2c>)
 801a314:	4618      	mov	r0, r3
 801a316:	f002 f8c7 	bl	801c4a8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801a31a:	687b      	ldr	r3, [r7, #4]
 801a31c:	3328      	adds	r3, #40	; 0x28
 801a31e:	6839      	ldr	r1, [r7, #0]
 801a320:	4618      	mov	r0, r3
 801a322:	f001 ff9d 	bl	801c260 <_ZN14MockNamedValue8setValueEPv>
    return *this;
 801a326:	687b      	ldr	r3, [r7, #4]
}
 801a328:	4618      	mov	r0, r3
 801a32a:	3708      	adds	r7, #8
 801a32c:	46bd      	mov	sp, r7
 801a32e:	bd80      	pop	{r7, pc}
 801a330:	08024790 	.word	0x08024790

0801a334 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const void* value)
{
 801a334:	b580      	push	{r7, lr}
 801a336:	b082      	sub	sp, #8
 801a338:	af00      	add	r7, sp, #0
 801a33a:	6078      	str	r0, [r7, #4]
 801a33c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801a33e:	687b      	ldr	r3, [r7, #4]
 801a340:	3328      	adds	r3, #40	; 0x28
 801a342:	4907      	ldr	r1, [pc, #28]	; (801a360 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv+0x2c>)
 801a344:	4618      	mov	r0, r3
 801a346:	f002 f8af 	bl	801c4a8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	3328      	adds	r3, #40	; 0x28
 801a34e:	6839      	ldr	r1, [r7, #0]
 801a350:	4618      	mov	r0, r3
 801a352:	f001 ffa7 	bl	801c2a4 <_ZN14MockNamedValue8setValueEPKv>
    return *this;
 801a356:	687b      	ldr	r3, [r7, #4]
}
 801a358:	4618      	mov	r0, r3
 801a35a:	3708      	adds	r7, #8
 801a35c:	46bd      	mov	sp, r7
 801a35e:	bd80      	pop	{r7, pc}
 801a360:	08024790 	.word	0x08024790

0801a364 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void (*value)())
{
 801a364:	b580      	push	{r7, lr}
 801a366:	b082      	sub	sp, #8
 801a368:	af00      	add	r7, sp, #0
 801a36a:	6078      	str	r0, [r7, #4]
 801a36c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801a36e:	687b      	ldr	r3, [r7, #4]
 801a370:	3328      	adds	r3, #40	; 0x28
 801a372:	4907      	ldr	r1, [pc, #28]	; (801a390 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE+0x2c>)
 801a374:	4618      	mov	r0, r3
 801a376:	f002 f897 	bl	801c4a8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	3328      	adds	r3, #40	; 0x28
 801a37e:	6839      	ldr	r1, [r7, #0]
 801a380:	4618      	mov	r0, r3
 801a382:	f001 ffb1 	bl	801c2e8 <_ZN14MockNamedValue8setValueEPFvvE>
    return *this;
 801a386:	687b      	ldr	r3, [r7, #4]
}
 801a388:	4618      	mov	r0, r3
 801a38a:	3708      	adds	r7, #8
 801a38c:	46bd      	mov	sp, r7
 801a38e:	bd80      	pop	{r7, pc}
 801a390:	08024790 	.word	0x08024790

0801a394 <_ZN23MockCheckedExpectedCall8onObjectEPv>:

MockExpectedCall& MockCheckedExpectedCall::onObject(void* objectPtr)
{
 801a394:	b480      	push	{r7}
 801a396:	b083      	sub	sp, #12
 801a398:	af00      	add	r7, sp, #0
 801a39a:	6078      	str	r0, [r7, #4]
 801a39c:	6039      	str	r1, [r7, #0]
    isSpecificObjectExpected_ = true;
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	2201      	movs	r2, #1
 801a3a2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    wasPassedToObject_ = false;
 801a3a6:	687b      	ldr	r3, [r7, #4]
 801a3a8:	2200      	movs	r2, #0
 801a3aa:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    objectPtr_ = objectPtr;
 801a3ae:	687b      	ldr	r3, [r7, #4]
 801a3b0:	683a      	ldr	r2, [r7, #0]
 801a3b2:	661a      	str	r2, [r3, #96]	; 0x60
    return *this;
 801a3b4:	687b      	ldr	r3, [r7, #4]
}
 801a3b6:	4618      	mov	r0, r3
 801a3b8:	370c      	adds	r7, #12
 801a3ba:	46bd      	mov	sp, r7
 801a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3c0:	4770      	bx	lr

0801a3c2 <_ZN23MockCheckedExpectedCall11returnValueEv>:

MockNamedValue MockCheckedExpectedCall::returnValue()
{
 801a3c2:	b580      	push	{r7, lr}
 801a3c4:	b082      	sub	sp, #8
 801a3c6:	af00      	add	r7, sp, #0
 801a3c8:	6078      	str	r0, [r7, #4]
 801a3ca:	6039      	str	r1, [r7, #0]
    return returnValue_;
 801a3cc:	683b      	ldr	r3, [r7, #0]
 801a3ce:	3328      	adds	r3, #40	; 0x28
 801a3d0:	4619      	mov	r1, r3
 801a3d2:	6878      	ldr	r0, [r7, #4]
 801a3d4:	f7ef f946 	bl	8009664 <_ZN14MockNamedValueC1ERKS_>
}
 801a3d8:	6878      	ldr	r0, [r7, #4]
 801a3da:	3708      	adds	r7, #8
 801a3dc:	46bd      	mov	sp, r7
 801a3de:	bd80      	pop	{r7, pc}

0801a3e0 <_ZN23MockCheckedExpectedCall13withCallOrderEjj>:

MockExpectedCall& MockCheckedExpectedCall::withCallOrder(unsigned int initialCallOrder, unsigned int finalCallOrder)
{
 801a3e0:	b480      	push	{r7}
 801a3e2:	b085      	sub	sp, #20
 801a3e4:	af00      	add	r7, sp, #0
 801a3e6:	60f8      	str	r0, [r7, #12]
 801a3e8:	60b9      	str	r1, [r7, #8]
 801a3ea:	607a      	str	r2, [r7, #4]
    initialExpectedCallOrder_ = initialCallOrder;
 801a3ec:	68fb      	ldr	r3, [r7, #12]
 801a3ee:	68ba      	ldr	r2, [r7, #8]
 801a3f0:	611a      	str	r2, [r3, #16]
    finalExpectedCallOrder_ = finalCallOrder;
 801a3f2:	68fb      	ldr	r3, [r7, #12]
 801a3f4:	687a      	ldr	r2, [r7, #4]
 801a3f6:	615a      	str	r2, [r3, #20]
    return *this;
 801a3f8:	68fb      	ldr	r3, [r7, #12]
}
 801a3fa:	4618      	mov	r0, r3
 801a3fc:	3714      	adds	r7, #20
 801a3fe:	46bd      	mov	sp, r7
 801a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a404:	4770      	bx	lr

0801a406 <_ZNK23MockCheckedExpectedCall12isOutOfOrderEv>:

bool MockCheckedExpectedCall::isOutOfOrder() const
{
 801a406:	b480      	push	{r7}
 801a408:	b083      	sub	sp, #12
 801a40a:	af00      	add	r7, sp, #0
 801a40c:	6078      	str	r0, [r7, #4]
    return outOfOrder_;
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	7e1b      	ldrb	r3, [r3, #24]
}
 801a412:	4618      	mov	r0, r3
 801a414:	370c      	adds	r7, #12
 801a416:	46bd      	mov	sp, r7
 801a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a41c:	4770      	bx	lr

0801a41e <_ZNK23MockCheckedExpectedCall23getActualCallsFulfilledEv>:

unsigned int MockCheckedExpectedCall::getActualCallsFulfilled() const
{
 801a41e:	b480      	push	{r7}
 801a420:	b083      	sub	sp, #12
 801a422:	af00      	add	r7, sp, #0
 801a424:	6078      	str	r0, [r7, #4]
    return actualCalls_;
 801a426:	687b      	ldr	r3, [r7, #4]
 801a428:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
 801a42a:	4618      	mov	r0, r3
 801a42c:	370c      	adds	r7, #12
 801a42e:	46bd      	mov	sp, r7
 801a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a434:	4770      	bx	lr
	...

0801a438 <_ZN23MockIgnoredExpectedCallC1Ev>:
class MockIgnoredExpectedCall: public MockExpectedCall
 801a438:	b580      	push	{r7, lr}
 801a43a:	b082      	sub	sp, #8
 801a43c:	af00      	add	r7, sp, #0
 801a43e:	6078      	str	r0, [r7, #4]
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	4618      	mov	r0, r3
 801a444:	f7fe fcce 	bl	8018de4 <_ZN16MockExpectedCallC1Ev>
 801a448:	4a03      	ldr	r2, [pc, #12]	; (801a458 <_ZN23MockIgnoredExpectedCallC1Ev+0x20>)
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	601a      	str	r2, [r3, #0]
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	4618      	mov	r0, r3
 801a452:	3708      	adds	r7, #8
 801a454:	46bd      	mov	sp, r7
 801a456:	bd80      	pop	{r7, pc}
 801a458:	08026f48 	.word	0x08026f48

0801a45c <__tcf_0>:

MockExpectedCall& MockIgnoredExpectedCall::instance()
{
    static MockIgnoredExpectedCall call;
 801a45c:	b580      	push	{r7, lr}
 801a45e:	af00      	add	r7, sp, #0
 801a460:	4801      	ldr	r0, [pc, #4]	; (801a468 <__tcf_0+0xc>)
 801a462:	f000 f831 	bl	801a4c8 <_ZN23MockIgnoredExpectedCallD1Ev>
 801a466:	bd80      	pop	{r7, pc}
 801a468:	20000db8 	.word	0x20000db8

0801a46c <_ZN23MockIgnoredExpectedCall8instanceEv>:
{
 801a46c:	b580      	push	{r7, lr}
 801a46e:	af00      	add	r7, sp, #0
    static MockIgnoredExpectedCall call;
 801a470:	4b12      	ldr	r3, [pc, #72]	; (801a4bc <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801a472:	781b      	ldrb	r3, [r3, #0]
 801a474:	f3bf 8f5b 	dmb	ish
 801a478:	b2db      	uxtb	r3, r3
 801a47a:	f003 0301 	and.w	r3, r3, #1
 801a47e:	2b00      	cmp	r3, #0
 801a480:	bf0c      	ite	eq
 801a482:	2301      	moveq	r3, #1
 801a484:	2300      	movne	r3, #0
 801a486:	b2db      	uxtb	r3, r3
 801a488:	2b00      	cmp	r3, #0
 801a48a:	d013      	beq.n	801a4b4 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801a48c:	480b      	ldr	r0, [pc, #44]	; (801a4bc <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801a48e:	f003 ff03 	bl	801e298 <__cxa_guard_acquire>
 801a492:	4603      	mov	r3, r0
 801a494:	2b00      	cmp	r3, #0
 801a496:	bf14      	ite	ne
 801a498:	2301      	movne	r3, #1
 801a49a:	2300      	moveq	r3, #0
 801a49c:	b2db      	uxtb	r3, r3
 801a49e:	2b00      	cmp	r3, #0
 801a4a0:	d008      	beq.n	801a4b4 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801a4a2:	4807      	ldr	r0, [pc, #28]	; (801a4c0 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
 801a4a4:	f7ff ffc8 	bl	801a438 <_ZN23MockIgnoredExpectedCallC1Ev>
 801a4a8:	4804      	ldr	r0, [pc, #16]	; (801a4bc <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801a4aa:	f003 ff01 	bl	801e2b0 <__cxa_guard_release>
 801a4ae:	4805      	ldr	r0, [pc, #20]	; (801a4c4 <_ZN23MockIgnoredExpectedCall8instanceEv+0x58>)
 801a4b0:	f003 ff25 	bl	801e2fe <atexit>
    return call;
 801a4b4:	4b02      	ldr	r3, [pc, #8]	; (801a4c0 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
}
 801a4b6:	4618      	mov	r0, r3
 801a4b8:	bd80      	pop	{r7, pc}
 801a4ba:	bf00      	nop
 801a4bc:	20000dbc 	.word	0x20000dbc
 801a4c0:	20000db8 	.word	0x20000db8
 801a4c4:	0801a45d 	.word	0x0801a45d

0801a4c8 <_ZN23MockIgnoredExpectedCallD1Ev>:
 801a4c8:	b580      	push	{r7, lr}
 801a4ca:	b082      	sub	sp, #8
 801a4cc:	af00      	add	r7, sp, #0
 801a4ce:	6078      	str	r0, [r7, #4]
 801a4d0:	4a05      	ldr	r2, [pc, #20]	; (801a4e8 <_ZN23MockIgnoredExpectedCallD1Ev+0x20>)
 801a4d2:	687b      	ldr	r3, [r7, #4]
 801a4d4:	601a      	str	r2, [r3, #0]
 801a4d6:	687b      	ldr	r3, [r7, #4]
 801a4d8:	4618      	mov	r0, r3
 801a4da:	f7fe fc93 	bl	8018e04 <_ZN16MockExpectedCallD1Ev>
 801a4de:	687b      	ldr	r3, [r7, #4]
 801a4e0:	4618      	mov	r0, r3
 801a4e2:	3708      	adds	r7, #8
 801a4e4:	46bd      	mov	sp, r7
 801a4e6:	bd80      	pop	{r7, pc}
 801a4e8:	08026f48 	.word	0x08026f48

0801a4ec <_ZN23MockIgnoredExpectedCallD0Ev>:
 801a4ec:	b580      	push	{r7, lr}
 801a4ee:	b082      	sub	sp, #8
 801a4f0:	af00      	add	r7, sp, #0
 801a4f2:	6078      	str	r0, [r7, #4]
 801a4f4:	6878      	ldr	r0, [r7, #4]
 801a4f6:	f7ff ffe7 	bl	801a4c8 <_ZN23MockIgnoredExpectedCallD1Ev>
 801a4fa:	2104      	movs	r1, #4
 801a4fc:	6878      	ldr	r0, [r7, #4]
 801a4fe:	f7ee fc5d 	bl	8008dbc <_ZdlPvj>
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	4618      	mov	r0, r3
 801a506:	3708      	adds	r7, #8
 801a508:	46bd      	mov	sp, r7
 801a50a:	bd80      	pop	{r7, pc}

0801a50c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>:
    class MockExpectedFunctionParameter : public MockNamedValue
 801a50c:	b580      	push	{r7, lr}
 801a50e:	b082      	sub	sp, #8
 801a510:	af00      	add	r7, sp, #0
 801a512:	6078      	str	r0, [r7, #4]
 801a514:	4a05      	ldr	r2, [pc, #20]	; (801a52c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev+0x20>)
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	601a      	str	r2, [r3, #0]
 801a51a:	687b      	ldr	r3, [r7, #4]
 801a51c:	4618      	mov	r0, r3
 801a51e:	f001 fd4b 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	4618      	mov	r0, r3
 801a526:	3708      	adds	r7, #8
 801a528:	46bd      	mov	sp, r7
 801a52a:	bd80      	pop	{r7, pc}
 801a52c:	080270e8 	.word	0x080270e8

0801a530 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD0Ev>:
 801a530:	b580      	push	{r7, lr}
 801a532:	b082      	sub	sp, #8
 801a534:	af00      	add	r7, sp, #0
 801a536:	6078      	str	r0, [r7, #4]
 801a538:	6878      	ldr	r0, [r7, #4]
 801a53a:	f7ff ffe7 	bl	801a50c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>
 801a53e:	2138      	movs	r1, #56	; 0x38
 801a540:	6878      	ldr	r0, [r7, #4]
 801a542:	f7ee fc3b 	bl	8008dbc <_ZdlPvj>
 801a546:	687b      	ldr	r3, [r7, #4]
 801a548:	4618      	mov	r0, r3
 801a54a:	3708      	adds	r7, #8
 801a54c:	46bd      	mov	sp, r7
 801a54e:	bd80      	pop	{r7, pc}

0801a550 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>:
    {
    public:
        MockCheckedExpectedCall* expectedCall_;

        MockExpectedCallsListNode* next_;
        MockExpectedCallsListNode(MockCheckedExpectedCall* expectedCall)
 801a550:	b480      	push	{r7}
 801a552:	b083      	sub	sp, #12
 801a554:	af00      	add	r7, sp, #0
 801a556:	6078      	str	r0, [r7, #4]
 801a558:	6039      	str	r1, [r7, #0]
            : expectedCall_(expectedCall), next_(NULLPTR) {}
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	683a      	ldr	r2, [r7, #0]
 801a55e:	601a      	str	r2, [r3, #0]
 801a560:	687b      	ldr	r3, [r7, #4]
 801a562:	2200      	movs	r2, #0
 801a564:	605a      	str	r2, [r3, #4]
 801a566:	687b      	ldr	r3, [r7, #4]
 801a568:	4618      	mov	r0, r3
 801a56a:	370c      	adds	r7, #12
 801a56c:	46bd      	mov	sp, r7
 801a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a572:	4770      	bx	lr

0801a574 <_ZN21MockExpectedCallsListC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockExpectedCallsList.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCallsList::MockExpectedCallsList() : head_(NULLPTR)
 801a574:	b480      	push	{r7}
 801a576:	b083      	sub	sp, #12
 801a578:	af00      	add	r7, sp, #0
 801a57a:	6078      	str	r0, [r7, #4]
 801a57c:	4a06      	ldr	r2, [pc, #24]	; (801a598 <_ZN21MockExpectedCallsListC1Ev+0x24>)
 801a57e:	687b      	ldr	r3, [r7, #4]
 801a580:	601a      	str	r2, [r3, #0]
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	2200      	movs	r2, #0
 801a586:	605a      	str	r2, [r3, #4]
{
}
 801a588:	687b      	ldr	r3, [r7, #4]
 801a58a:	4618      	mov	r0, r3
 801a58c:	370c      	adds	r7, #12
 801a58e:	46bd      	mov	sp, r7
 801a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a594:	4770      	bx	lr
 801a596:	bf00      	nop
 801a598:	0802723c 	.word	0x0802723c

0801a59c <_ZN21MockExpectedCallsListD1Ev>:

MockExpectedCallsList::~MockExpectedCallsList()
 801a59c:	b580      	push	{r7, lr}
 801a59e:	b084      	sub	sp, #16
 801a5a0:	af00      	add	r7, sp, #0
 801a5a2:	6078      	str	r0, [r7, #4]
 801a5a4:	4a0d      	ldr	r2, [pc, #52]	; (801a5dc <_ZN21MockExpectedCallsListD1Ev+0x40>)
 801a5a6:	687b      	ldr	r3, [r7, #4]
 801a5a8:	601a      	str	r2, [r3, #0]
{
    while (head_) {
 801a5aa:	687b      	ldr	r3, [r7, #4]
 801a5ac:	685b      	ldr	r3, [r3, #4]
 801a5ae:	2b00      	cmp	r3, #0
 801a5b0:	d00f      	beq.n	801a5d2 <_ZN21MockExpectedCallsListD1Ev+0x36>
        MockExpectedCallsListNode* next = head_->next_;
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	685b      	ldr	r3, [r3, #4]
 801a5b6:	685b      	ldr	r3, [r3, #4]
 801a5b8:	60fb      	str	r3, [r7, #12]
        delete head_;
 801a5ba:	687b      	ldr	r3, [r7, #4]
 801a5bc:	685b      	ldr	r3, [r3, #4]
 801a5be:	2b00      	cmp	r3, #0
 801a5c0:	d003      	beq.n	801a5ca <_ZN21MockExpectedCallsListD1Ev+0x2e>
 801a5c2:	2108      	movs	r1, #8
 801a5c4:	4618      	mov	r0, r3
 801a5c6:	f7ee fbf9 	bl	8008dbc <_ZdlPvj>
        head_ = next;
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	68fa      	ldr	r2, [r7, #12]
 801a5ce:	605a      	str	r2, [r3, #4]
    while (head_) {
 801a5d0:	e7eb      	b.n	801a5aa <_ZN21MockExpectedCallsListD1Ev+0xe>
    }
}
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	4618      	mov	r0, r3
 801a5d6:	3710      	adds	r7, #16
 801a5d8:	46bd      	mov	sp, r7
 801a5da:	bd80      	pop	{r7, pc}
 801a5dc:	0802723c 	.word	0x0802723c

0801a5e0 <_ZN21MockExpectedCallsListD0Ev>:
MockExpectedCallsList::~MockExpectedCallsList()
 801a5e0:	b580      	push	{r7, lr}
 801a5e2:	b082      	sub	sp, #8
 801a5e4:	af00      	add	r7, sp, #0
 801a5e6:	6078      	str	r0, [r7, #4]
}
 801a5e8:	6878      	ldr	r0, [r7, #4]
 801a5ea:	f7ff ffd7 	bl	801a59c <_ZN21MockExpectedCallsListD1Ev>
 801a5ee:	2108      	movs	r1, #8
 801a5f0:	6878      	ldr	r0, [r7, #4]
 801a5f2:	f7ee fbe3 	bl	8008dbc <_ZdlPvj>
 801a5f6:	687b      	ldr	r3, [r7, #4]
 801a5f8:	4618      	mov	r0, r3
 801a5fa:	3708      	adds	r7, #8
 801a5fc:	46bd      	mov	sp, r7
 801a5fe:	bd80      	pop	{r7, pc}

0801a600 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>:

bool MockExpectedCallsList::hasCallsOutOfOrder() const
{
 801a600:	b580      	push	{r7, lr}
 801a602:	b084      	sub	sp, #16
 801a604:	af00      	add	r7, sp, #0
 801a606:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a608:	687b      	ldr	r3, [r7, #4]
 801a60a:	685b      	ldr	r3, [r3, #4]
 801a60c:	60fb      	str	r3, [r7, #12]
 801a60e:	68fb      	ldr	r3, [r7, #12]
 801a610:	2b00      	cmp	r3, #0
 801a612:	d011      	beq.n	801a638 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x38>
        if (p->expectedCall_->isOutOfOrder())
 801a614:	68fb      	ldr	r3, [r7, #12]
 801a616:	681a      	ldr	r2, [r3, #0]
 801a618:	68fb      	ldr	r3, [r7, #12]
 801a61a:	681b      	ldr	r3, [r3, #0]
 801a61c:	681b      	ldr	r3, [r3, #0]
 801a61e:	33d4      	adds	r3, #212	; 0xd4
 801a620:	681b      	ldr	r3, [r3, #0]
 801a622:	4610      	mov	r0, r2
 801a624:	4798      	blx	r3
 801a626:	4603      	mov	r3, r0
 801a628:	2b00      	cmp	r3, #0
 801a62a:	d001      	beq.n	801a630 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x30>
            return true;
 801a62c:	2301      	movs	r3, #1
 801a62e:	e004      	b.n	801a63a <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a630:	68fb      	ldr	r3, [r7, #12]
 801a632:	685b      	ldr	r3, [r3, #4]
 801a634:	60fb      	str	r3, [r7, #12]
 801a636:	e7ea      	b.n	801a60e <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0xe>
    return false;
 801a638:	2300      	movs	r3, #0
}
 801a63a:	4618      	mov	r0, r3
 801a63c:	3710      	adds	r7, #16
 801a63e:	46bd      	mov	sp, r7
 801a640:	bd80      	pop	{r7, pc}

0801a642 <_ZNK21MockExpectedCallsList4sizeEv>:

unsigned int MockExpectedCallsList::size() const
{
 801a642:	b480      	push	{r7}
 801a644:	b085      	sub	sp, #20
 801a646:	af00      	add	r7, sp, #0
 801a648:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801a64a:	2300      	movs	r3, #0
 801a64c:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	685b      	ldr	r3, [r3, #4]
 801a652:	60bb      	str	r3, [r7, #8]
 801a654:	68bb      	ldr	r3, [r7, #8]
 801a656:	2b00      	cmp	r3, #0
 801a658:	d006      	beq.n	801a668 <_ZNK21MockExpectedCallsList4sizeEv+0x26>
        count++;
 801a65a:	68fb      	ldr	r3, [r7, #12]
 801a65c:	3301      	adds	r3, #1
 801a65e:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a660:	68bb      	ldr	r3, [r7, #8]
 801a662:	685b      	ldr	r3, [r3, #4]
 801a664:	60bb      	str	r3, [r7, #8]
 801a666:	e7f5      	b.n	801a654 <_ZNK21MockExpectedCallsList4sizeEv+0x12>
    return count;
 801a668:	68fb      	ldr	r3, [r7, #12]
}
 801a66a:	4618      	mov	r0, r3
 801a66c:	3714      	adds	r7, #20
 801a66e:	46bd      	mov	sp, r7
 801a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a674:	4770      	bx	lr

0801a676 <_ZNK21MockExpectedCallsList7isEmptyEv>:

bool MockExpectedCallsList::isEmpty() const
{
 801a676:	b480      	push	{r7}
 801a678:	b083      	sub	sp, #12
 801a67a:	af00      	add	r7, sp, #0
 801a67c:	6078      	str	r0, [r7, #4]
    return head_ == NULLPTR;
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	685b      	ldr	r3, [r3, #4]
 801a682:	2b00      	cmp	r3, #0
 801a684:	bf0c      	ite	eq
 801a686:	2301      	moveq	r3, #1
 801a688:	2300      	movne	r3, #0
 801a68a:	b2db      	uxtb	r3, r3
}
 801a68c:	4618      	mov	r0, r3
 801a68e:	370c      	adds	r7, #12
 801a690:	46bd      	mov	sp, r7
 801a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a696:	4770      	bx	lr

0801a698 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString>:

unsigned int MockExpectedCallsList::amountOfActualCallsFulfilledFor(const SimpleString& name) const
{
 801a698:	b580      	push	{r7, lr}
 801a69a:	b084      	sub	sp, #16
 801a69c:	af00      	add	r7, sp, #0
 801a69e:	6078      	str	r0, [r7, #4]
 801a6a0:	6039      	str	r1, [r7, #0]
    unsigned int count = 0;
 801a6a2:	2300      	movs	r3, #0
 801a6a4:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a6a6:	687b      	ldr	r3, [r7, #4]
 801a6a8:	685b      	ldr	r3, [r3, #4]
 801a6aa:	60bb      	str	r3, [r7, #8]
 801a6ac:	68bb      	ldr	r3, [r7, #8]
 801a6ae:	2b00      	cmp	r3, #0
 801a6b0:	d01d      	beq.n	801a6ee <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x56>
        if (p->expectedCall_->relatesTo(name)) {
 801a6b2:	68bb      	ldr	r3, [r7, #8]
 801a6b4:	681a      	ldr	r2, [r3, #0]
 801a6b6:	68bb      	ldr	r3, [r7, #8]
 801a6b8:	681b      	ldr	r3, [r3, #0]
 801a6ba:	681b      	ldr	r3, [r3, #0]
 801a6bc:	33b8      	adds	r3, #184	; 0xb8
 801a6be:	681b      	ldr	r3, [r3, #0]
 801a6c0:	6839      	ldr	r1, [r7, #0]
 801a6c2:	4610      	mov	r0, r2
 801a6c4:	4798      	blx	r3
 801a6c6:	4603      	mov	r3, r0
 801a6c8:	2b00      	cmp	r3, #0
 801a6ca:	d00c      	beq.n	801a6e6 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x4e>
            count += p->expectedCall_->getActualCallsFulfilled();
 801a6cc:	68bb      	ldr	r3, [r7, #8]
 801a6ce:	681a      	ldr	r2, [r3, #0]
 801a6d0:	68bb      	ldr	r3, [r7, #8]
 801a6d2:	681b      	ldr	r3, [r3, #0]
 801a6d4:	681b      	ldr	r3, [r3, #0]
 801a6d6:	33f8      	adds	r3, #248	; 0xf8
 801a6d8:	681b      	ldr	r3, [r3, #0]
 801a6da:	4610      	mov	r0, r2
 801a6dc:	4798      	blx	r3
 801a6de:	4602      	mov	r2, r0
 801a6e0:	68fb      	ldr	r3, [r7, #12]
 801a6e2:	4413      	add	r3, r2
 801a6e4:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a6e6:	68bb      	ldr	r3, [r7, #8]
 801a6e8:	685b      	ldr	r3, [r3, #4]
 801a6ea:	60bb      	str	r3, [r7, #8]
 801a6ec:	e7de      	b.n	801a6ac <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x14>
        }
    }
    return count;
 801a6ee:	68fb      	ldr	r3, [r7, #12]
}
 801a6f0:	4618      	mov	r0, r3
 801a6f2:	3710      	adds	r7, #16
 801a6f4:	46bd      	mov	sp, r7
 801a6f6:	bd80      	pop	{r7, pc}

0801a6f8 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv>:

unsigned int MockExpectedCallsList::amountOfUnfulfilledExpectations() const
{
 801a6f8:	b580      	push	{r7, lr}
 801a6fa:	b084      	sub	sp, #16
 801a6fc:	af00      	add	r7, sp, #0
 801a6fe:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801a700:	2300      	movs	r3, #0
 801a702:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	685b      	ldr	r3, [r3, #4]
 801a708:	60bb      	str	r3, [r7, #8]
 801a70a:	68bb      	ldr	r3, [r7, #8]
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	d015      	beq.n	801a73c <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x44>
        if (! p->expectedCall_->isFulfilled()) count++;
 801a710:	68bb      	ldr	r3, [r7, #8]
 801a712:	681a      	ldr	r2, [r3, #0]
 801a714:	68bb      	ldr	r3, [r7, #8]
 801a716:	681b      	ldr	r3, [r3, #0]
 801a718:	681b      	ldr	r3, [r3, #0]
 801a71a:	33c0      	adds	r3, #192	; 0xc0
 801a71c:	681b      	ldr	r3, [r3, #0]
 801a71e:	4610      	mov	r0, r2
 801a720:	4798      	blx	r3
 801a722:	4603      	mov	r3, r0
 801a724:	f083 0301 	eor.w	r3, r3, #1
 801a728:	b2db      	uxtb	r3, r3
 801a72a:	2b00      	cmp	r3, #0
 801a72c:	d002      	beq.n	801a734 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x3c>
 801a72e:	68fb      	ldr	r3, [r7, #12]
 801a730:	3301      	adds	r3, #1
 801a732:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a734:	68bb      	ldr	r3, [r7, #8]
 801a736:	685b      	ldr	r3, [r3, #4]
 801a738:	60bb      	str	r3, [r7, #8]
 801a73a:	e7e6      	b.n	801a70a <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x12>
    return count;
 801a73c:	68fb      	ldr	r3, [r7, #12]
}
 801a73e:	4618      	mov	r0, r3
 801a740:	3710      	adds	r7, #16
 801a742:	46bd      	mov	sp, r7
 801a744:	bd80      	pop	{r7, pc}

0801a746 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>:

bool MockExpectedCallsList::hasFinalizedMatchingExpectations() const
{
 801a746:	b580      	push	{r7, lr}
 801a748:	b084      	sub	sp, #16
 801a74a:	af00      	add	r7, sp, #0
 801a74c:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	685b      	ldr	r3, [r3, #4]
 801a752:	60fb      	str	r3, [r7, #12]
 801a754:	68fb      	ldr	r3, [r7, #12]
 801a756:	2b00      	cmp	r3, #0
 801a758:	d011      	beq.n	801a77e <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x38>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801a75a:	68fb      	ldr	r3, [r7, #12]
 801a75c:	681a      	ldr	r2, [r3, #0]
 801a75e:	68fb      	ldr	r3, [r7, #12]
 801a760:	681b      	ldr	r3, [r3, #0]
 801a762:	681b      	ldr	r3, [r3, #0]
 801a764:	33c8      	adds	r3, #200	; 0xc8
 801a766:	681b      	ldr	r3, [r3, #0]
 801a768:	4610      	mov	r0, r2
 801a76a:	4798      	blx	r3
 801a76c:	4603      	mov	r3, r0
 801a76e:	2b00      	cmp	r3, #0
 801a770:	d001      	beq.n	801a776 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x30>
            return true;
 801a772:	2301      	movs	r3, #1
 801a774:	e004      	b.n	801a780 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a776:	68fb      	ldr	r3, [r7, #12]
 801a778:	685b      	ldr	r3, [r3, #4]
 801a77a:	60fb      	str	r3, [r7, #12]
 801a77c:	e7ea      	b.n	801a754 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0xe>
        }
    }
    return false;
 801a77e:	2300      	movs	r3, #0
}
 801a780:	4618      	mov	r0, r3
 801a782:	3710      	adds	r7, #16
 801a784:	46bd      	mov	sp, r7
 801a786:	bd80      	pop	{r7, pc}

0801a788 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>:

bool MockExpectedCallsList::hasUnfulfilledExpectations() const
{
 801a788:	b580      	push	{r7, lr}
 801a78a:	b084      	sub	sp, #16
 801a78c:	af00      	add	r7, sp, #0
 801a78e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a790:	687b      	ldr	r3, [r7, #4]
 801a792:	685b      	ldr	r3, [r3, #4]
 801a794:	60fb      	str	r3, [r7, #12]
 801a796:	68fb      	ldr	r3, [r7, #12]
 801a798:	2b00      	cmp	r3, #0
 801a79a:	d014      	beq.n	801a7c6 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x3e>
        if (!p->expectedCall_->isFulfilled()) {
 801a79c:	68fb      	ldr	r3, [r7, #12]
 801a79e:	681a      	ldr	r2, [r3, #0]
 801a7a0:	68fb      	ldr	r3, [r7, #12]
 801a7a2:	681b      	ldr	r3, [r3, #0]
 801a7a4:	681b      	ldr	r3, [r3, #0]
 801a7a6:	33c0      	adds	r3, #192	; 0xc0
 801a7a8:	681b      	ldr	r3, [r3, #0]
 801a7aa:	4610      	mov	r0, r2
 801a7ac:	4798      	blx	r3
 801a7ae:	4603      	mov	r3, r0
 801a7b0:	f083 0301 	eor.w	r3, r3, #1
 801a7b4:	b2db      	uxtb	r3, r3
 801a7b6:	2b00      	cmp	r3, #0
 801a7b8:	d001      	beq.n	801a7be <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x36>
            return true;
 801a7ba:	2301      	movs	r3, #1
 801a7bc:	e004      	b.n	801a7c8 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a7be:	68fb      	ldr	r3, [r7, #12]
 801a7c0:	685b      	ldr	r3, [r3, #4]
 801a7c2:	60fb      	str	r3, [r7, #12]
 801a7c4:	e7e7      	b.n	801a796 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0xe>
        }
    }
    return false;
 801a7c6:	2300      	movs	r3, #0
}
 801a7c8:	4618      	mov	r0, r3
 801a7ca:	3710      	adds	r7, #16
 801a7cc:	46bd      	mov	sp, r7
 801a7ce:	bd80      	pop	{r7, pc}

0801a7d0 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>:

bool MockExpectedCallsList::hasExpectationWithName(const SimpleString& name) const
{
 801a7d0:	b580      	push	{r7, lr}
 801a7d2:	b084      	sub	sp, #16
 801a7d4:	af00      	add	r7, sp, #0
 801a7d6:	6078      	str	r0, [r7, #4]
 801a7d8:	6039      	str	r1, [r7, #0]
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a7da:	687b      	ldr	r3, [r7, #4]
 801a7dc:	685b      	ldr	r3, [r3, #4]
 801a7de:	60fb      	str	r3, [r7, #12]
 801a7e0:	68fb      	ldr	r3, [r7, #12]
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	d012      	beq.n	801a80c <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3c>
            if (p->expectedCall_->relatesTo(name))
 801a7e6:	68fb      	ldr	r3, [r7, #12]
 801a7e8:	681a      	ldr	r2, [r3, #0]
 801a7ea:	68fb      	ldr	r3, [r7, #12]
 801a7ec:	681b      	ldr	r3, [r3, #0]
 801a7ee:	681b      	ldr	r3, [r3, #0]
 801a7f0:	33b8      	adds	r3, #184	; 0xb8
 801a7f2:	681b      	ldr	r3, [r3, #0]
 801a7f4:	6839      	ldr	r1, [r7, #0]
 801a7f6:	4610      	mov	r0, r2
 801a7f8:	4798      	blx	r3
 801a7fa:	4603      	mov	r3, r0
 801a7fc:	2b00      	cmp	r3, #0
 801a7fe:	d001      	beq.n	801a804 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x34>
                return true;
 801a800:	2301      	movs	r3, #1
 801a802:	e004      	b.n	801a80e <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3e>
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a804:	68fb      	ldr	r3, [r7, #12]
 801a806:	685b      	ldr	r3, [r3, #4]
 801a808:	60fb      	str	r3, [r7, #12]
 801a80a:	e7e9      	b.n	801a7e0 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x10>
    return false;
 801a80c:	2300      	movs	r3, #0
}
 801a80e:	4618      	mov	r0, r3
 801a810:	3710      	adds	r7, #16
 801a812:	46bd      	mov	sp, r7
 801a814:	bd80      	pop	{r7, pc}
	...

0801a818 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>:

void MockExpectedCallsList::addExpectedCall(MockCheckedExpectedCall* call)
{
 801a818:	b590      	push	{r4, r7, lr}
 801a81a:	b085      	sub	sp, #20
 801a81c:	af00      	add	r7, sp, #0
 801a81e:	6078      	str	r0, [r7, #4]
 801a820:	6039      	str	r1, [r7, #0]
    MockExpectedCallsListNode* newCall = new MockExpectedCallsListNode(call);
 801a822:	2273      	movs	r2, #115	; 0x73
 801a824:	4911      	ldr	r1, [pc, #68]	; (801a86c <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x54>)
 801a826:	2008      	movs	r0, #8
 801a828:	f7ee fab4 	bl	8008d94 <_ZnwjPKci>
 801a82c:	4604      	mov	r4, r0
 801a82e:	6839      	ldr	r1, [r7, #0]
 801a830:	4620      	mov	r0, r4
 801a832:	f7ff fe8d 	bl	801a550 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>
 801a836:	60bc      	str	r4, [r7, #8]

    if (head_ == NULLPTR)
 801a838:	687b      	ldr	r3, [r7, #4]
 801a83a:	685b      	ldr	r3, [r3, #4]
 801a83c:	2b00      	cmp	r3, #0
 801a83e:	d103      	bne.n	801a848 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x30>
        head_ = newCall;
 801a840:	687b      	ldr	r3, [r7, #4]
 801a842:	68ba      	ldr	r2, [r7, #8]
 801a844:	605a      	str	r2, [r3, #4]
    else {
        MockExpectedCallsListNode* lastCall = head_;
        while (lastCall->next_) lastCall = lastCall->next_;
        lastCall->next_ = newCall;
    }
}
 801a846:	e00d      	b.n	801a864 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x4c>
        MockExpectedCallsListNode* lastCall = head_;
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	685b      	ldr	r3, [r3, #4]
 801a84c:	60fb      	str	r3, [r7, #12]
        while (lastCall->next_) lastCall = lastCall->next_;
 801a84e:	68fb      	ldr	r3, [r7, #12]
 801a850:	685b      	ldr	r3, [r3, #4]
 801a852:	2b00      	cmp	r3, #0
 801a854:	d003      	beq.n	801a85e <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x46>
 801a856:	68fb      	ldr	r3, [r7, #12]
 801a858:	685b      	ldr	r3, [r3, #4]
 801a85a:	60fb      	str	r3, [r7, #12]
 801a85c:	e7f7      	b.n	801a84e <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x36>
        lastCall->next_ = newCall;
 801a85e:	68fb      	ldr	r3, [r7, #12]
 801a860:	68ba      	ldr	r2, [r7, #8]
 801a862:	605a      	str	r2, [r3, #4]
}
 801a864:	bf00      	nop
 801a866:	3714      	adds	r7, #20
 801a868:	46bd      	mov	sp, r7
 801a86a:	bd90      	pop	{r4, r7, pc}
 801a86c:	0802479c 	.word	0x0802479c

0801a870 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>:

void MockExpectedCallsList::addPotentiallyMatchingExpectations(const MockExpectedCallsList& list)
{
 801a870:	b580      	push	{r7, lr}
 801a872:	b084      	sub	sp, #16
 801a874:	af00      	add	r7, sp, #0
 801a876:	6078      	str	r0, [r7, #4]
 801a878:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801a87a:	683b      	ldr	r3, [r7, #0]
 801a87c:	685b      	ldr	r3, [r3, #4]
 801a87e:	60fb      	str	r3, [r7, #12]
 801a880:	68fb      	ldr	r3, [r7, #12]
 801a882:	2b00      	cmp	r3, #0
 801a884:	d018      	beq.n	801a8b8 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x48>
        if (p->expectedCall_->canMatchActualCalls())
 801a886:	68fb      	ldr	r3, [r7, #12]
 801a888:	681a      	ldr	r2, [r3, #0]
 801a88a:	68fb      	ldr	r3, [r7, #12]
 801a88c:	681b      	ldr	r3, [r3, #0]
 801a88e:	681b      	ldr	r3, [r3, #0]
 801a890:	33c4      	adds	r3, #196	; 0xc4
 801a892:	681b      	ldr	r3, [r3, #0]
 801a894:	4610      	mov	r0, r2
 801a896:	4798      	blx	r3
 801a898:	4603      	mov	r3, r0
 801a89a:	2b00      	cmp	r3, #0
 801a89c:	d008      	beq.n	801a8b0 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x40>
            addExpectedCall(p->expectedCall_);
 801a89e:	687b      	ldr	r3, [r7, #4]
 801a8a0:	681b      	ldr	r3, [r3, #0]
 801a8a2:	3330      	adds	r3, #48	; 0x30
 801a8a4:	681b      	ldr	r3, [r3, #0]
 801a8a6:	68fa      	ldr	r2, [r7, #12]
 801a8a8:	6812      	ldr	r2, [r2, #0]
 801a8aa:	4611      	mov	r1, r2
 801a8ac:	6878      	ldr	r0, [r7, #4]
 801a8ae:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801a8b0:	68fb      	ldr	r3, [r7, #12]
 801a8b2:	685b      	ldr	r3, [r3, #4]
 801a8b4:	60fb      	str	r3, [r7, #12]
 801a8b6:	e7e3      	b.n	801a880 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x10>
}
 801a8b8:	bf00      	nop
 801a8ba:	3710      	adds	r7, #16
 801a8bc:	46bd      	mov	sp, r7
 801a8be:	bd80      	pop	{r7, pc}

0801a8c0 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>:

void MockExpectedCallsList::addExpectationsRelatedTo(const SimpleString& name, const MockExpectedCallsList& list)
{
 801a8c0:	b580      	push	{r7, lr}
 801a8c2:	b086      	sub	sp, #24
 801a8c4:	af00      	add	r7, sp, #0
 801a8c6:	60f8      	str	r0, [r7, #12]
 801a8c8:	60b9      	str	r1, [r7, #8]
 801a8ca:	607a      	str	r2, [r7, #4]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801a8cc:	687b      	ldr	r3, [r7, #4]
 801a8ce:	685b      	ldr	r3, [r3, #4]
 801a8d0:	617b      	str	r3, [r7, #20]
 801a8d2:	697b      	ldr	r3, [r7, #20]
 801a8d4:	2b00      	cmp	r3, #0
 801a8d6:	d019      	beq.n	801a90c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x4c>
        if (p->expectedCall_->relatesTo(name))
 801a8d8:	697b      	ldr	r3, [r7, #20]
 801a8da:	681a      	ldr	r2, [r3, #0]
 801a8dc:	697b      	ldr	r3, [r7, #20]
 801a8de:	681b      	ldr	r3, [r3, #0]
 801a8e0:	681b      	ldr	r3, [r3, #0]
 801a8e2:	33b8      	adds	r3, #184	; 0xb8
 801a8e4:	681b      	ldr	r3, [r3, #0]
 801a8e6:	68b9      	ldr	r1, [r7, #8]
 801a8e8:	4610      	mov	r0, r2
 801a8ea:	4798      	blx	r3
 801a8ec:	4603      	mov	r3, r0
 801a8ee:	2b00      	cmp	r3, #0
 801a8f0:	d008      	beq.n	801a904 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x44>
            addExpectedCall(p->expectedCall_);
 801a8f2:	68fb      	ldr	r3, [r7, #12]
 801a8f4:	681b      	ldr	r3, [r3, #0]
 801a8f6:	3330      	adds	r3, #48	; 0x30
 801a8f8:	681b      	ldr	r3, [r3, #0]
 801a8fa:	697a      	ldr	r2, [r7, #20]
 801a8fc:	6812      	ldr	r2, [r2, #0]
 801a8fe:	4611      	mov	r1, r2
 801a900:	68f8      	ldr	r0, [r7, #12]
 801a902:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801a904:	697b      	ldr	r3, [r7, #20]
 801a906:	685b      	ldr	r3, [r3, #4]
 801a908:	617b      	str	r3, [r7, #20]
 801a90a:	e7e2      	b.n	801a8d2 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x12>
}
 801a90c:	bf00      	nop
 801a90e:	3718      	adds	r7, #24
 801a910:	46bd      	mov	sp, r7
 801a912:	bd80      	pop	{r7, pc}

0801a914 <_ZN21MockExpectedCallsList15addExpectationsERKS_>:

void MockExpectedCallsList::addExpectations(const MockExpectedCallsList& list)
{
 801a914:	b580      	push	{r7, lr}
 801a916:	b084      	sub	sp, #16
 801a918:	af00      	add	r7, sp, #0
 801a91a:	6078      	str	r0, [r7, #4]
 801a91c:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801a91e:	683b      	ldr	r3, [r7, #0]
 801a920:	685b      	ldr	r3, [r3, #4]
 801a922:	60fb      	str	r3, [r7, #12]
 801a924:	68fb      	ldr	r3, [r7, #12]
 801a926:	2b00      	cmp	r3, #0
 801a928:	d00c      	beq.n	801a944 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x30>
        addExpectedCall(p->expectedCall_);
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	681b      	ldr	r3, [r3, #0]
 801a92e:	3330      	adds	r3, #48	; 0x30
 801a930:	681b      	ldr	r3, [r3, #0]
 801a932:	68fa      	ldr	r2, [r7, #12]
 801a934:	6812      	ldr	r2, [r2, #0]
 801a936:	4611      	mov	r1, r2
 801a938:	6878      	ldr	r0, [r7, #4]
 801a93a:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801a93c:	68fb      	ldr	r3, [r7, #12]
 801a93e:	685b      	ldr	r3, [r3, #4]
 801a940:	60fb      	str	r3, [r7, #12]
 801a942:	e7ef      	b.n	801a924 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x10>
}
 801a944:	bf00      	nop
 801a946:	3710      	adds	r7, #16
 801a948:	46bd      	mov	sp, r7
 801a94a:	bd80      	pop	{r7, pc}

0801a94c <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsRelatedTo(const SimpleString& name)
{
 801a94c:	b580      	push	{r7, lr}
 801a94e:	b084      	sub	sp, #16
 801a950:	af00      	add	r7, sp, #0
 801a952:	6078      	str	r0, [r7, #4]
 801a954:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	685b      	ldr	r3, [r3, #4]
 801a95a:	60fb      	str	r3, [r7, #12]
 801a95c:	68fb      	ldr	r3, [r7, #12]
 801a95e:	2b00      	cmp	r3, #0
 801a960:	d016      	beq.n	801a990 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x44>
        if (! p->expectedCall_->relatesTo(name))
 801a962:	68fb      	ldr	r3, [r7, #12]
 801a964:	681a      	ldr	r2, [r3, #0]
 801a966:	68fb      	ldr	r3, [r7, #12]
 801a968:	681b      	ldr	r3, [r3, #0]
 801a96a:	681b      	ldr	r3, [r3, #0]
 801a96c:	33b8      	adds	r3, #184	; 0xb8
 801a96e:	681b      	ldr	r3, [r3, #0]
 801a970:	6839      	ldr	r1, [r7, #0]
 801a972:	4610      	mov	r0, r2
 801a974:	4798      	blx	r3
 801a976:	4603      	mov	r3, r0
 801a978:	f083 0301 	eor.w	r3, r3, #1
 801a97c:	b2db      	uxtb	r3, r3
 801a97e:	2b00      	cmp	r3, #0
 801a980:	d002      	beq.n	801a988 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801a982:	68fb      	ldr	r3, [r7, #12]
 801a984:	2200      	movs	r2, #0
 801a986:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a988:	68fb      	ldr	r3, [r7, #12]
 801a98a:	685b      	ldr	r3, [r3, #4]
 801a98c:	60fb      	str	r3, [r7, #12]
 801a98e:	e7e5      	b.n	801a95c <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x10>

    pruneEmptyNodeFromList();
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	681b      	ldr	r3, [r3, #0]
 801a994:	3388      	adds	r3, #136	; 0x88
 801a996:	681b      	ldr	r3, [r3, #0]
 801a998:	6878      	ldr	r0, [r7, #4]
 801a99a:	4798      	blx	r3
}
 801a99c:	bf00      	nop
 801a99e:	3710      	adds	r7, #16
 801a9a0:	46bd      	mov	sp, r7
 801a9a2:	bd80      	pop	{r7, pc}

0801a9a4 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>:

void MockExpectedCallsList::onlyKeepOutOfOrderExpectations()
{
 801a9a4:	b580      	push	{r7, lr}
 801a9a6:	b084      	sub	sp, #16
 801a9a8:	af00      	add	r7, sp, #0
 801a9aa:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a9ac:	687b      	ldr	r3, [r7, #4]
 801a9ae:	685b      	ldr	r3, [r3, #4]
 801a9b0:	60fb      	str	r3, [r7, #12]
 801a9b2:	68fb      	ldr	r3, [r7, #12]
 801a9b4:	2b00      	cmp	r3, #0
 801a9b6:	d015      	beq.n	801a9e4 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x40>
        if (!p->expectedCall_->isOutOfOrder())
 801a9b8:	68fb      	ldr	r3, [r7, #12]
 801a9ba:	681a      	ldr	r2, [r3, #0]
 801a9bc:	68fb      	ldr	r3, [r7, #12]
 801a9be:	681b      	ldr	r3, [r3, #0]
 801a9c0:	681b      	ldr	r3, [r3, #0]
 801a9c2:	33d4      	adds	r3, #212	; 0xd4
 801a9c4:	681b      	ldr	r3, [r3, #0]
 801a9c6:	4610      	mov	r0, r2
 801a9c8:	4798      	blx	r3
 801a9ca:	4603      	mov	r3, r0
 801a9cc:	f083 0301 	eor.w	r3, r3, #1
 801a9d0:	b2db      	uxtb	r3, r3
 801a9d2:	2b00      	cmp	r3, #0
 801a9d4:	d002      	beq.n	801a9dc <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x38>
            p->expectedCall_ = NULLPTR;
 801a9d6:	68fb      	ldr	r3, [r7, #12]
 801a9d8:	2200      	movs	r2, #0
 801a9da:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a9dc:	68fb      	ldr	r3, [r7, #12]
 801a9de:	685b      	ldr	r3, [r3, #4]
 801a9e0:	60fb      	str	r3, [r7, #12]
 801a9e2:	e7e6      	b.n	801a9b2 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0xe>
    pruneEmptyNodeFromList();
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	681b      	ldr	r3, [r3, #0]
 801a9e8:	3388      	adds	r3, #136	; 0x88
 801a9ea:	681b      	ldr	r3, [r3, #0]
 801a9ec:	6878      	ldr	r0, [r7, #4]
 801a9ee:	4798      	blx	r3
}
 801a9f0:	bf00      	nop
 801a9f2:	3710      	adds	r7, #16
 801a9f4:	46bd      	mov	sp, r7
 801a9f6:	bd80      	pop	{r7, pc}

0801a9f8 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>:

void MockExpectedCallsList::onlyKeepUnmatchingExpectations()
{
 801a9f8:	b580      	push	{r7, lr}
 801a9fa:	b084      	sub	sp, #16
 801a9fc:	af00      	add	r7, sp, #0
 801a9fe:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801aa00:	687b      	ldr	r3, [r7, #4]
 801aa02:	685b      	ldr	r3, [r3, #4]
 801aa04:	60fb      	str	r3, [r7, #12]
 801aa06:	68fb      	ldr	r3, [r7, #12]
 801aa08:	2b00      	cmp	r3, #0
 801aa0a:	d01b      	beq.n	801aa44 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x4c>
        if (p->expectedCall_->isMatchingActualCallAndFinalized())
 801aa0c:	68fb      	ldr	r3, [r7, #12]
 801aa0e:	681a      	ldr	r2, [r3, #0]
 801aa10:	68fb      	ldr	r3, [r7, #12]
 801aa12:	681b      	ldr	r3, [r3, #0]
 801aa14:	681b      	ldr	r3, [r3, #0]
 801aa16:	33c8      	adds	r3, #200	; 0xc8
 801aa18:	681b      	ldr	r3, [r3, #0]
 801aa1a:	4610      	mov	r0, r2
 801aa1c:	4798      	blx	r3
 801aa1e:	4603      	mov	r3, r0
 801aa20:	2b00      	cmp	r3, #0
 801aa22:	d00b      	beq.n	801aa3c <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x44>
        {
            p->expectedCall_->resetActualCallMatchingState();
 801aa24:	68fb      	ldr	r3, [r7, #12]
 801aa26:	681a      	ldr	r2, [r3, #0]
 801aa28:	68fb      	ldr	r3, [r7, #12]
 801aa2a:	681b      	ldr	r3, [r3, #0]
 801aa2c:	681b      	ldr	r3, [r3, #0]
 801aa2e:	33ec      	adds	r3, #236	; 0xec
 801aa30:	681b      	ldr	r3, [r3, #0]
 801aa32:	4610      	mov	r0, r2
 801aa34:	4798      	blx	r3
            p->expectedCall_ = NULLPTR;
 801aa36:	68fb      	ldr	r3, [r7, #12]
 801aa38:	2200      	movs	r2, #0
 801aa3a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801aa3c:	68fb      	ldr	r3, [r7, #12]
 801aa3e:	685b      	ldr	r3, [r3, #4]
 801aa40:	60fb      	str	r3, [r7, #12]
 801aa42:	e7e0      	b.n	801aa06 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0xe>
        }

    pruneEmptyNodeFromList();
 801aa44:	687b      	ldr	r3, [r7, #4]
 801aa46:	681b      	ldr	r3, [r3, #0]
 801aa48:	3388      	adds	r3, #136	; 0x88
 801aa4a:	681b      	ldr	r3, [r3, #0]
 801aa4c:	6878      	ldr	r0, [r7, #4]
 801aa4e:	4798      	blx	r3
}
 801aa50:	bf00      	nop
 801aa52:	3710      	adds	r7, #16
 801aa54:	46bd      	mov	sp, r7
 801aa56:	bd80      	pop	{r7, pc}

0801aa58 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameterName(const SimpleString& name)
{
 801aa58:	b580      	push	{r7, lr}
 801aa5a:	b084      	sub	sp, #16
 801aa5c:	af00      	add	r7, sp, #0
 801aa5e:	6078      	str	r0, [r7, #4]
 801aa60:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801aa62:	687b      	ldr	r3, [r7, #4]
 801aa64:	685b      	ldr	r3, [r3, #4]
 801aa66:	60fb      	str	r3, [r7, #12]
 801aa68:	68fb      	ldr	r3, [r7, #12]
 801aa6a:	2b00      	cmp	r3, #0
 801aa6c:	d016      	beq.n	801aa9c <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasInputParameterWithName(name))
 801aa6e:	68fb      	ldr	r3, [r7, #12]
 801aa70:	681a      	ldr	r2, [r3, #0]
 801aa72:	68fb      	ldr	r3, [r7, #12]
 801aa74:	681b      	ldr	r3, [r3, #0]
 801aa76:	681b      	ldr	r3, [r3, #0]
 801aa78:	33a8      	adds	r3, #168	; 0xa8
 801aa7a:	681b      	ldr	r3, [r3, #0]
 801aa7c:	6839      	ldr	r1, [r7, #0]
 801aa7e:	4610      	mov	r0, r2
 801aa80:	4798      	blx	r3
 801aa82:	4603      	mov	r3, r0
 801aa84:	f083 0301 	eor.w	r3, r3, #1
 801aa88:	b2db      	uxtb	r3, r3
 801aa8a:	2b00      	cmp	r3, #0
 801aa8c:	d002      	beq.n	801aa94 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801aa8e:	68fb      	ldr	r3, [r7, #12]
 801aa90:	2200      	movs	r2, #0
 801aa92:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801aa94:	68fb      	ldr	r3, [r7, #12]
 801aa96:	685b      	ldr	r3, [r3, #4]
 801aa98:	60fb      	str	r3, [r7, #12]
 801aa9a:	e7e5      	b.n	801aa68 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801aa9c:	687b      	ldr	r3, [r7, #4]
 801aa9e:	681b      	ldr	r3, [r3, #0]
 801aaa0:	3388      	adds	r3, #136	; 0x88
 801aaa2:	681b      	ldr	r3, [r3, #0]
 801aaa4:	6878      	ldr	r0, [r7, #4]
 801aaa6:	4798      	blx	r3
}
 801aaa8:	bf00      	nop
 801aaaa:	3710      	adds	r7, #16
 801aaac:	46bd      	mov	sp, r7
 801aaae:	bd80      	pop	{r7, pc}

0801aab0 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameterName(const SimpleString& name)
{
 801aab0:	b580      	push	{r7, lr}
 801aab2:	b084      	sub	sp, #16
 801aab4:	af00      	add	r7, sp, #0
 801aab6:	6078      	str	r0, [r7, #4]
 801aab8:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801aaba:	687b      	ldr	r3, [r7, #4]
 801aabc:	685b      	ldr	r3, [r3, #4]
 801aabe:	60fb      	str	r3, [r7, #12]
 801aac0:	68fb      	ldr	r3, [r7, #12]
 801aac2:	2b00      	cmp	r3, #0
 801aac4:	d016      	beq.n	801aaf4 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasOutputParameterWithName(name))
 801aac6:	68fb      	ldr	r3, [r7, #12]
 801aac8:	681a      	ldr	r2, [r3, #0]
 801aaca:	68fb      	ldr	r3, [r7, #12]
 801aacc:	681b      	ldr	r3, [r3, #0]
 801aace:	681b      	ldr	r3, [r3, #0]
 801aad0:	33b0      	adds	r3, #176	; 0xb0
 801aad2:	681b      	ldr	r3, [r3, #0]
 801aad4:	6839      	ldr	r1, [r7, #0]
 801aad6:	4610      	mov	r0, r2
 801aad8:	4798      	blx	r3
 801aada:	4603      	mov	r3, r0
 801aadc:	f083 0301 	eor.w	r3, r3, #1
 801aae0:	b2db      	uxtb	r3, r3
 801aae2:	2b00      	cmp	r3, #0
 801aae4:	d002      	beq.n	801aaec <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801aae6:	68fb      	ldr	r3, [r7, #12]
 801aae8:	2200      	movs	r2, #0
 801aaea:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801aaec:	68fb      	ldr	r3, [r7, #12]
 801aaee:	685b      	ldr	r3, [r3, #4]
 801aaf0:	60fb      	str	r3, [r7, #12]
 801aaf2:	e7e5      	b.n	801aac0 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	681b      	ldr	r3, [r3, #0]
 801aaf8:	3388      	adds	r3, #136	; 0x88
 801aafa:	681b      	ldr	r3, [r3, #0]
 801aafc:	6878      	ldr	r0, [r7, #4]
 801aafe:	4798      	blx	r3
}
 801ab00:	bf00      	nop
 801ab02:	3710      	adds	r7, #16
 801ab04:	46bd      	mov	sp, r7
 801ab06:	bd80      	pop	{r7, pc}

0801ab08 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameter(const MockNamedValue& parameter)
{
 801ab08:	b580      	push	{r7, lr}
 801ab0a:	b084      	sub	sp, #16
 801ab0c:	af00      	add	r7, sp, #0
 801ab0e:	6078      	str	r0, [r7, #4]
 801ab10:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ab12:	687b      	ldr	r3, [r7, #4]
 801ab14:	685b      	ldr	r3, [r3, #4]
 801ab16:	60fb      	str	r3, [r7, #12]
 801ab18:	68fb      	ldr	r3, [r7, #12]
 801ab1a:	2b00      	cmp	r3, #0
 801ab1c:	d016      	beq.n	801ab4c <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasInputParameter(parameter))
 801ab1e:	68fb      	ldr	r3, [r7, #12]
 801ab20:	681a      	ldr	r2, [r3, #0]
 801ab22:	68fb      	ldr	r3, [r7, #12]
 801ab24:	681b      	ldr	r3, [r3, #0]
 801ab26:	681b      	ldr	r3, [r3, #0]
 801ab28:	33ac      	adds	r3, #172	; 0xac
 801ab2a:	681b      	ldr	r3, [r3, #0]
 801ab2c:	6839      	ldr	r1, [r7, #0]
 801ab2e:	4610      	mov	r0, r2
 801ab30:	4798      	blx	r3
 801ab32:	4603      	mov	r3, r0
 801ab34:	f083 0301 	eor.w	r3, r3, #1
 801ab38:	b2db      	uxtb	r3, r3
 801ab3a:	2b00      	cmp	r3, #0
 801ab3c:	d002      	beq.n	801ab44 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801ab3e:	68fb      	ldr	r3, [r7, #12]
 801ab40:	2200      	movs	r2, #0
 801ab42:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ab44:	68fb      	ldr	r3, [r7, #12]
 801ab46:	685b      	ldr	r3, [r3, #4]
 801ab48:	60fb      	str	r3, [r7, #12]
 801ab4a:	e7e5      	b.n	801ab18 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801ab4c:	687b      	ldr	r3, [r7, #4]
 801ab4e:	681b      	ldr	r3, [r3, #0]
 801ab50:	3388      	adds	r3, #136	; 0x88
 801ab52:	681b      	ldr	r3, [r3, #0]
 801ab54:	6878      	ldr	r0, [r7, #4]
 801ab56:	4798      	blx	r3
}
 801ab58:	bf00      	nop
 801ab5a:	3710      	adds	r7, #16
 801ab5c:	46bd      	mov	sp, r7
 801ab5e:	bd80      	pop	{r7, pc}

0801ab60 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameter(const MockNamedValue& parameter)
{
 801ab60:	b580      	push	{r7, lr}
 801ab62:	b084      	sub	sp, #16
 801ab64:	af00      	add	r7, sp, #0
 801ab66:	6078      	str	r0, [r7, #4]
 801ab68:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ab6a:	687b      	ldr	r3, [r7, #4]
 801ab6c:	685b      	ldr	r3, [r3, #4]
 801ab6e:	60fb      	str	r3, [r7, #12]
 801ab70:	68fb      	ldr	r3, [r7, #12]
 801ab72:	2b00      	cmp	r3, #0
 801ab74:	d016      	beq.n	801aba4 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasOutputParameter(parameter))
 801ab76:	68fb      	ldr	r3, [r7, #12]
 801ab78:	681a      	ldr	r2, [r3, #0]
 801ab7a:	68fb      	ldr	r3, [r7, #12]
 801ab7c:	681b      	ldr	r3, [r3, #0]
 801ab7e:	681b      	ldr	r3, [r3, #0]
 801ab80:	33b4      	adds	r3, #180	; 0xb4
 801ab82:	681b      	ldr	r3, [r3, #0]
 801ab84:	6839      	ldr	r1, [r7, #0]
 801ab86:	4610      	mov	r0, r2
 801ab88:	4798      	blx	r3
 801ab8a:	4603      	mov	r3, r0
 801ab8c:	f083 0301 	eor.w	r3, r3, #1
 801ab90:	b2db      	uxtb	r3, r3
 801ab92:	2b00      	cmp	r3, #0
 801ab94:	d002      	beq.n	801ab9c <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801ab96:	68fb      	ldr	r3, [r7, #12]
 801ab98:	2200      	movs	r2, #0
 801ab9a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ab9c:	68fb      	ldr	r3, [r7, #12]
 801ab9e:	685b      	ldr	r3, [r3, #4]
 801aba0:	60fb      	str	r3, [r7, #12]
 801aba2:	e7e5      	b.n	801ab70 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801aba4:	687b      	ldr	r3, [r7, #4]
 801aba6:	681b      	ldr	r3, [r3, #0]
 801aba8:	3388      	adds	r3, #136	; 0x88
 801abaa:	681b      	ldr	r3, [r3, #0]
 801abac:	6878      	ldr	r0, [r7, #4]
 801abae:	4798      	blx	r3
}
 801abb0:	bf00      	nop
 801abb2:	3710      	adds	r7, #16
 801abb4:	46bd      	mov	sp, r7
 801abb6:	bd80      	pop	{r7, pc}

0801abb8 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>:

void MockExpectedCallsList::onlyKeepExpectationsOnObject(const void* objectPtr)
{
 801abb8:	b580      	push	{r7, lr}
 801abba:	b084      	sub	sp, #16
 801abbc:	af00      	add	r7, sp, #0
 801abbe:	6078      	str	r0, [r7, #4]
 801abc0:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	685b      	ldr	r3, [r3, #4]
 801abc6:	60fb      	str	r3, [r7, #12]
 801abc8:	68fb      	ldr	r3, [r7, #12]
 801abca:	2b00      	cmp	r3, #0
 801abcc:	d016      	beq.n	801abfc <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x44>
        if (! p->expectedCall_->relatesToObject(objectPtr))
 801abce:	68fb      	ldr	r3, [r7, #12]
 801abd0:	681a      	ldr	r2, [r3, #0]
 801abd2:	68fb      	ldr	r3, [r7, #12]
 801abd4:	681b      	ldr	r3, [r3, #0]
 801abd6:	681b      	ldr	r3, [r3, #0]
 801abd8:	33bc      	adds	r3, #188	; 0xbc
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	6839      	ldr	r1, [r7, #0]
 801abde:	4610      	mov	r0, r2
 801abe0:	4798      	blx	r3
 801abe2:	4603      	mov	r3, r0
 801abe4:	f083 0301 	eor.w	r3, r3, #1
 801abe8:	b2db      	uxtb	r3, r3
 801abea:	2b00      	cmp	r3, #0
 801abec:	d002      	beq.n	801abf4 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x3c>
            p->expectedCall_ = NULLPTR;
 801abee:	68fb      	ldr	r3, [r7, #12]
 801abf0:	2200      	movs	r2, #0
 801abf2:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801abf4:	68fb      	ldr	r3, [r7, #12]
 801abf6:	685b      	ldr	r3, [r3, #4]
 801abf8:	60fb      	str	r3, [r7, #12]
 801abfa:	e7e5      	b.n	801abc8 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x10>
    pruneEmptyNodeFromList();
 801abfc:	687b      	ldr	r3, [r7, #4]
 801abfe:	681b      	ldr	r3, [r3, #0]
 801ac00:	3388      	adds	r3, #136	; 0x88
 801ac02:	681b      	ldr	r3, [r3, #0]
 801ac04:	6878      	ldr	r0, [r7, #4]
 801ac06:	4798      	blx	r3
}
 801ac08:	bf00      	nop
 801ac0a:	3710      	adds	r7, #16
 801ac0c:	46bd      	mov	sp, r7
 801ac0e:	bd80      	pop	{r7, pc}

0801ac10 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstFinalizedMatchingExpectation()
{
 801ac10:	b580      	push	{r7, lr}
 801ac12:	b084      	sub	sp, #16
 801ac14:	af00      	add	r7, sp, #0
 801ac16:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801ac18:	687b      	ldr	r3, [r7, #4]
 801ac1a:	685b      	ldr	r3, [r3, #4]
 801ac1c:	60fb      	str	r3, [r7, #12]
 801ac1e:	68fb      	ldr	r3, [r7, #12]
 801ac20:	2b00      	cmp	r3, #0
 801ac22:	d01d      	beq.n	801ac60 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801ac24:	68fb      	ldr	r3, [r7, #12]
 801ac26:	681a      	ldr	r2, [r3, #0]
 801ac28:	68fb      	ldr	r3, [r7, #12]
 801ac2a:	681b      	ldr	r3, [r3, #0]
 801ac2c:	681b      	ldr	r3, [r3, #0]
 801ac2e:	33c8      	adds	r3, #200	; 0xc8
 801ac30:	681b      	ldr	r3, [r3, #0]
 801ac32:	4610      	mov	r0, r2
 801ac34:	4798      	blx	r3
 801ac36:	4603      	mov	r3, r0
 801ac38:	2b00      	cmp	r3, #0
 801ac3a:	d00d      	beq.n	801ac58 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801ac3c:	68fb      	ldr	r3, [r7, #12]
 801ac3e:	681b      	ldr	r3, [r3, #0]
 801ac40:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801ac42:	68fb      	ldr	r3, [r7, #12]
 801ac44:	2200      	movs	r2, #0
 801ac46:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801ac48:	687b      	ldr	r3, [r7, #4]
 801ac4a:	681b      	ldr	r3, [r3, #0]
 801ac4c:	3388      	adds	r3, #136	; 0x88
 801ac4e:	681b      	ldr	r3, [r3, #0]
 801ac50:	6878      	ldr	r0, [r7, #4]
 801ac52:	4798      	blx	r3
            return matchingCall;
 801ac54:	68bb      	ldr	r3, [r7, #8]
 801ac56:	e004      	b.n	801ac62 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801ac58:	68fb      	ldr	r3, [r7, #12]
 801ac5a:	685b      	ldr	r3, [r3, #4]
 801ac5c:	60fb      	str	r3, [r7, #12]
 801ac5e:	e7de      	b.n	801ac1e <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801ac60:	2300      	movs	r3, #0
}
 801ac62:	4618      	mov	r0, r3
 801ac64:	3710      	adds	r7, #16
 801ac66:	46bd      	mov	sp, r7
 801ac68:	bd80      	pop	{r7, pc}

0801ac6a <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::getFirstMatchingExpectation()
{
 801ac6a:	b580      	push	{r7, lr}
 801ac6c:	b084      	sub	sp, #16
 801ac6e:	af00      	add	r7, sp, #0
 801ac70:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801ac72:	687b      	ldr	r3, [r7, #4]
 801ac74:	685b      	ldr	r3, [r3, #4]
 801ac76:	60fb      	str	r3, [r7, #12]
 801ac78:	68fb      	ldr	r3, [r7, #12]
 801ac7a:	2b00      	cmp	r3, #0
 801ac7c:	d012      	beq.n	801aca4 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3a>
        if (p->expectedCall_->isMatchingActualCall()) {
 801ac7e:	68fb      	ldr	r3, [r7, #12]
 801ac80:	681a      	ldr	r2, [r3, #0]
 801ac82:	68fb      	ldr	r3, [r7, #12]
 801ac84:	681b      	ldr	r3, [r3, #0]
 801ac86:	681b      	ldr	r3, [r3, #0]
 801ac88:	33cc      	adds	r3, #204	; 0xcc
 801ac8a:	681b      	ldr	r3, [r3, #0]
 801ac8c:	4610      	mov	r0, r2
 801ac8e:	4798      	blx	r3
 801ac90:	4603      	mov	r3, r0
 801ac92:	2b00      	cmp	r3, #0
 801ac94:	d002      	beq.n	801ac9c <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x32>
            return p->expectedCall_;
 801ac96:	68fb      	ldr	r3, [r7, #12]
 801ac98:	681b      	ldr	r3, [r3, #0]
 801ac9a:	e004      	b.n	801aca6 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3c>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801ac9c:	68fb      	ldr	r3, [r7, #12]
 801ac9e:	685b      	ldr	r3, [r3, #4]
 801aca0:	60fb      	str	r3, [r7, #12]
 801aca2:	e7e9      	b.n	801ac78 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801aca4:	2300      	movs	r3, #0
}
 801aca6:	4618      	mov	r0, r3
 801aca8:	3710      	adds	r7, #16
 801acaa:	46bd      	mov	sp, r7
 801acac:	bd80      	pop	{r7, pc}

0801acae <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstMatchingExpectation()
{
 801acae:	b580      	push	{r7, lr}
 801acb0:	b084      	sub	sp, #16
 801acb2:	af00      	add	r7, sp, #0
 801acb4:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801acb6:	687b      	ldr	r3, [r7, #4]
 801acb8:	685b      	ldr	r3, [r3, #4]
 801acba:	60fb      	str	r3, [r7, #12]
 801acbc:	68fb      	ldr	r3, [r7, #12]
 801acbe:	2b00      	cmp	r3, #0
 801acc0:	d01d      	beq.n	801acfe <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCall()) {
 801acc2:	68fb      	ldr	r3, [r7, #12]
 801acc4:	681a      	ldr	r2, [r3, #0]
 801acc6:	68fb      	ldr	r3, [r7, #12]
 801acc8:	681b      	ldr	r3, [r3, #0]
 801acca:	681b      	ldr	r3, [r3, #0]
 801accc:	33cc      	adds	r3, #204	; 0xcc
 801acce:	681b      	ldr	r3, [r3, #0]
 801acd0:	4610      	mov	r0, r2
 801acd2:	4798      	blx	r3
 801acd4:	4603      	mov	r3, r0
 801acd6:	2b00      	cmp	r3, #0
 801acd8:	d00d      	beq.n	801acf6 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801acda:	68fb      	ldr	r3, [r7, #12]
 801acdc:	681b      	ldr	r3, [r3, #0]
 801acde:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801ace0:	68fb      	ldr	r3, [r7, #12]
 801ace2:	2200      	movs	r2, #0
 801ace4:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801ace6:	687b      	ldr	r3, [r7, #4]
 801ace8:	681b      	ldr	r3, [r3, #0]
 801acea:	3388      	adds	r3, #136	; 0x88
 801acec:	681b      	ldr	r3, [r3, #0]
 801acee:	6878      	ldr	r0, [r7, #4]
 801acf0:	4798      	blx	r3
            return matchingCall;
 801acf2:	68bb      	ldr	r3, [r7, #8]
 801acf4:	e004      	b.n	801ad00 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801acf6:	68fb      	ldr	r3, [r7, #12]
 801acf8:	685b      	ldr	r3, [r3, #4]
 801acfa:	60fb      	str	r3, [r7, #12]
 801acfc:	e7de      	b.n	801acbc <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801acfe:	2300      	movs	r3, #0
}
 801ad00:	4618      	mov	r0, r3
 801ad02:	3710      	adds	r7, #16
 801ad04:	46bd      	mov	sp, r7
 801ad06:	bd80      	pop	{r7, pc}

0801ad08 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv>:

void MockExpectedCallsList::pruneEmptyNodeFromList()
{
 801ad08:	b580      	push	{r7, lr}
 801ad0a:	b086      	sub	sp, #24
 801ad0c:	af00      	add	r7, sp, #0
 801ad0e:	6078      	str	r0, [r7, #4]
    MockExpectedCallsListNode* current = head_;
 801ad10:	687b      	ldr	r3, [r7, #4]
 801ad12:	685b      	ldr	r3, [r3, #4]
 801ad14:	617b      	str	r3, [r7, #20]
    MockExpectedCallsListNode* previous = NULLPTR;
 801ad16:	2300      	movs	r3, #0
 801ad18:	613b      	str	r3, [r7, #16]
    MockExpectedCallsListNode* toBeDeleted = NULLPTR;
 801ad1a:	2300      	movs	r3, #0
 801ad1c:	60fb      	str	r3, [r7, #12]

    while (current) {
 801ad1e:	697b      	ldr	r3, [r7, #20]
 801ad20:	2b00      	cmp	r3, #0
 801ad22:	d024      	beq.n	801ad6e <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x66>
        if (current->expectedCall_ == NULLPTR) {
 801ad24:	697b      	ldr	r3, [r7, #20]
 801ad26:	681b      	ldr	r3, [r3, #0]
 801ad28:	2b00      	cmp	r3, #0
 801ad2a:	d11a      	bne.n	801ad62 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x5a>
            toBeDeleted = current;
 801ad2c:	697b      	ldr	r3, [r7, #20]
 801ad2e:	60fb      	str	r3, [r7, #12]
            if (previous == NULLPTR)
 801ad30:	693b      	ldr	r3, [r7, #16]
 801ad32:	2b00      	cmp	r3, #0
 801ad34:	d106      	bne.n	801ad44 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x3c>
                head_ = current = current->next_;
 801ad36:	697b      	ldr	r3, [r7, #20]
 801ad38:	685b      	ldr	r3, [r3, #4]
 801ad3a:	617b      	str	r3, [r7, #20]
 801ad3c:	687b      	ldr	r3, [r7, #4]
 801ad3e:	697a      	ldr	r2, [r7, #20]
 801ad40:	605a      	str	r2, [r3, #4]
 801ad42:	e006      	b.n	801ad52 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x4a>
            else
                current = previous->next_ = current->next_;
 801ad44:	697b      	ldr	r3, [r7, #20]
 801ad46:	685a      	ldr	r2, [r3, #4]
 801ad48:	693b      	ldr	r3, [r7, #16]
 801ad4a:	605a      	str	r2, [r3, #4]
 801ad4c:	693b      	ldr	r3, [r7, #16]
 801ad4e:	685b      	ldr	r3, [r3, #4]
 801ad50:	617b      	str	r3, [r7, #20]
            delete toBeDeleted;
 801ad52:	68fb      	ldr	r3, [r7, #12]
 801ad54:	2b00      	cmp	r3, #0
 801ad56:	d0e2      	beq.n	801ad1e <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
 801ad58:	2108      	movs	r1, #8
 801ad5a:	4618      	mov	r0, r3
 801ad5c:	f7ee f82e 	bl	8008dbc <_ZdlPvj>
 801ad60:	e7dd      	b.n	801ad1e <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
        else {
            previous = current;
 801ad62:	697b      	ldr	r3, [r7, #20]
 801ad64:	613b      	str	r3, [r7, #16]
            current = current->next_;
 801ad66:	697b      	ldr	r3, [r7, #20]
 801ad68:	685b      	ldr	r3, [r3, #4]
 801ad6a:	617b      	str	r3, [r7, #20]
    while (current) {
 801ad6c:	e7d7      	b.n	801ad1e <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
    }
}
 801ad6e:	bf00      	nop
 801ad70:	3718      	adds	r7, #24
 801ad72:	46bd      	mov	sp, r7
 801ad74:	bd80      	pop	{r7, pc}

0801ad76 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>:

void MockExpectedCallsList::deleteAllExpectationsAndClearList()
{
 801ad76:	b580      	push	{r7, lr}
 801ad78:	b084      	sub	sp, #16
 801ad7a:	af00      	add	r7, sp, #0
 801ad7c:	6078      	str	r0, [r7, #4]
    while (head_) {
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	685b      	ldr	r3, [r3, #4]
 801ad82:	2b00      	cmp	r3, #0
 801ad84:	d019      	beq.n	801adba <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x44>
        MockExpectedCallsListNode* next = head_->next_;
 801ad86:	687b      	ldr	r3, [r7, #4]
 801ad88:	685b      	ldr	r3, [r3, #4]
 801ad8a:	685b      	ldr	r3, [r3, #4]
 801ad8c:	60fb      	str	r3, [r7, #12]
        delete head_->expectedCall_;
 801ad8e:	687b      	ldr	r3, [r7, #4]
 801ad90:	685b      	ldr	r3, [r3, #4]
 801ad92:	681b      	ldr	r3, [r3, #0]
 801ad94:	2b00      	cmp	r3, #0
 801ad96:	d004      	beq.n	801ada2 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x2c>
 801ad98:	681a      	ldr	r2, [r3, #0]
 801ad9a:	3204      	adds	r2, #4
 801ad9c:	6812      	ldr	r2, [r2, #0]
 801ad9e:	4618      	mov	r0, r3
 801ada0:	4790      	blx	r2
        delete head_;
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	685b      	ldr	r3, [r3, #4]
 801ada6:	2b00      	cmp	r3, #0
 801ada8:	d003      	beq.n	801adb2 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x3c>
 801adaa:	2108      	movs	r1, #8
 801adac:	4618      	mov	r0, r3
 801adae:	f7ee f805 	bl	8008dbc <_ZdlPvj>
        head_ = next;
 801adb2:	687b      	ldr	r3, [r7, #4]
 801adb4:	68fa      	ldr	r2, [r7, #12]
 801adb6:	605a      	str	r2, [r3, #4]
    while (head_) {
 801adb8:	e7e1      	b.n	801ad7e <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x8>
    }
}
 801adba:	bf00      	nop
 801adbc:	3710      	adds	r7, #16
 801adbe:	46bd      	mov	sp, r7
 801adc0:	bd80      	pop	{r7, pc}

0801adc2 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>:

void MockExpectedCallsList::resetActualCallMatchingState()
{
 801adc2:	b580      	push	{r7, lr}
 801adc4:	b084      	sub	sp, #16
 801adc6:	af00      	add	r7, sp, #0
 801adc8:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801adca:	687b      	ldr	r3, [r7, #4]
 801adcc:	685b      	ldr	r3, [r3, #4]
 801adce:	60fb      	str	r3, [r7, #12]
 801add0:	68fb      	ldr	r3, [r7, #12]
 801add2:	2b00      	cmp	r3, #0
 801add4:	d00c      	beq.n	801adf0 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0x2e>
        p->expectedCall_->resetActualCallMatchingState();
 801add6:	68fb      	ldr	r3, [r7, #12]
 801add8:	681a      	ldr	r2, [r3, #0]
 801adda:	68fb      	ldr	r3, [r7, #12]
 801addc:	681b      	ldr	r3, [r3, #0]
 801adde:	681b      	ldr	r3, [r3, #0]
 801ade0:	33ec      	adds	r3, #236	; 0xec
 801ade2:	681b      	ldr	r3, [r3, #0]
 801ade4:	4610      	mov	r0, r2
 801ade6:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ade8:	68fb      	ldr	r3, [r7, #12]
 801adea:	685b      	ldr	r3, [r3, #4]
 801adec:	60fb      	str	r3, [r7, #12]
 801adee:	e7ef      	b.n	801add0 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0xe>
}
 801adf0:	bf00      	nop
 801adf2:	3710      	adds	r7, #16
 801adf4:	46bd      	mov	sp, r7
 801adf6:	bd80      	pop	{r7, pc}

0801adf8 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>:

void MockExpectedCallsList::wasPassedToObject()
{
 801adf8:	b580      	push	{r7, lr}
 801adfa:	b084      	sub	sp, #16
 801adfc:	af00      	add	r7, sp, #0
 801adfe:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ae00:	687b      	ldr	r3, [r7, #4]
 801ae02:	685b      	ldr	r3, [r3, #4]
 801ae04:	60fb      	str	r3, [r7, #12]
 801ae06:	68fb      	ldr	r3, [r7, #12]
 801ae08:	2b00      	cmp	r3, #0
 801ae0a:	d00c      	beq.n	801ae26 <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0x2e>
        p->expectedCall_->wasPassedToObject();
 801ae0c:	68fb      	ldr	r3, [r7, #12]
 801ae0e:	681a      	ldr	r2, [r3, #0]
 801ae10:	68fb      	ldr	r3, [r7, #12]
 801ae12:	681b      	ldr	r3, [r3, #0]
 801ae14:	681b      	ldr	r3, [r3, #0]
 801ae16:	33e8      	adds	r3, #232	; 0xe8
 801ae18:	681b      	ldr	r3, [r3, #0]
 801ae1a:	4610      	mov	r0, r2
 801ae1c:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ae1e:	68fb      	ldr	r3, [r7, #12]
 801ae20:	685b      	ldr	r3, [r3, #4]
 801ae22:	60fb      	str	r3, [r7, #12]
 801ae24:	e7ef      	b.n	801ae06 <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0xe>
}
 801ae26:	bf00      	nop
 801ae28:	3710      	adds	r7, #16
 801ae2a:	46bd      	mov	sp, r7
 801ae2c:	bd80      	pop	{r7, pc}

0801ae2e <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>:


void MockExpectedCallsList::parameterWasPassed(const SimpleString& parameterName)
{
 801ae2e:	b580      	push	{r7, lr}
 801ae30:	b084      	sub	sp, #16
 801ae32:	af00      	add	r7, sp, #0
 801ae34:	6078      	str	r0, [r7, #4]
 801ae36:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ae38:	687b      	ldr	r3, [r7, #4]
 801ae3a:	685b      	ldr	r3, [r3, #4]
 801ae3c:	60fb      	str	r3, [r7, #12]
 801ae3e:	68fb      	ldr	r3, [r7, #12]
 801ae40:	2b00      	cmp	r3, #0
 801ae42:	d00d      	beq.n	801ae60 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->inputParameterWasPassed(parameterName);
 801ae44:	68fb      	ldr	r3, [r7, #12]
 801ae46:	681a      	ldr	r2, [r3, #0]
 801ae48:	68fb      	ldr	r3, [r7, #12]
 801ae4a:	681b      	ldr	r3, [r3, #0]
 801ae4c:	681b      	ldr	r3, [r3, #0]
 801ae4e:	33dc      	adds	r3, #220	; 0xdc
 801ae50:	681b      	ldr	r3, [r3, #0]
 801ae52:	6839      	ldr	r1, [r7, #0]
 801ae54:	4610      	mov	r0, r2
 801ae56:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ae58:	68fb      	ldr	r3, [r7, #12]
 801ae5a:	685b      	ldr	r3, [r3, #4]
 801ae5c:	60fb      	str	r3, [r7, #12]
 801ae5e:	e7ee      	b.n	801ae3e <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x10>
}
 801ae60:	bf00      	nop
 801ae62:	3710      	adds	r7, #16
 801ae64:	46bd      	mov	sp, r7
 801ae66:	bd80      	pop	{r7, pc}

0801ae68 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>:

void MockExpectedCallsList::outputParameterWasPassed(const SimpleString& parameterName)
{
 801ae68:	b580      	push	{r7, lr}
 801ae6a:	b084      	sub	sp, #16
 801ae6c:	af00      	add	r7, sp, #0
 801ae6e:	6078      	str	r0, [r7, #4]
 801ae70:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ae72:	687b      	ldr	r3, [r7, #4]
 801ae74:	685b      	ldr	r3, [r3, #4]
 801ae76:	60fb      	str	r3, [r7, #12]
 801ae78:	68fb      	ldr	r3, [r7, #12]
 801ae7a:	2b00      	cmp	r3, #0
 801ae7c:	d00d      	beq.n	801ae9a <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->outputParameterWasPassed(parameterName);
 801ae7e:	68fb      	ldr	r3, [r7, #12]
 801ae80:	681a      	ldr	r2, [r3, #0]
 801ae82:	68fb      	ldr	r3, [r7, #12]
 801ae84:	681b      	ldr	r3, [r3, #0]
 801ae86:	681b      	ldr	r3, [r3, #0]
 801ae88:	33e0      	adds	r3, #224	; 0xe0
 801ae8a:	681b      	ldr	r3, [r3, #0]
 801ae8c:	6839      	ldr	r1, [r7, #0]
 801ae8e:	4610      	mov	r0, r2
 801ae90:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ae92:	68fb      	ldr	r3, [r7, #12]
 801ae94:	685b      	ldr	r3, [r3, #4]
 801ae96:	60fb      	str	r3, [r7, #12]
 801ae98:	e7ee      	b.n	801ae78 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x10>
}
 801ae9a:	bf00      	nop
 801ae9c:	3710      	adds	r7, #16
 801ae9e:	46bd      	mov	sp, r7
 801aea0:	bd80      	pop	{r7, pc}
	...

0801aea4 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>:

static SimpleString stringOrNoneTextWhenEmpty(const SimpleString& inputString, const SimpleString& linePrefix)
{
 801aea4:	b590      	push	{r4, r7, lr}
 801aea6:	b087      	sub	sp, #28
 801aea8:	af00      	add	r7, sp, #0
 801aeaa:	60f8      	str	r0, [r7, #12]
 801aeac:	60b9      	str	r1, [r7, #8]
 801aeae:	607a      	str	r2, [r7, #4]
    SimpleString str = inputString;
 801aeb0:	68b9      	ldr	r1, [r7, #8]
 801aeb2:	68f8      	ldr	r0, [r7, #12]
 801aeb4:	f7f0 fb85 	bl	800b5c2 <_ZN12SimpleStringC1ERKS_>
    if (str == "") {
 801aeb8:	f107 0310 	add.w	r3, r7, #16
 801aebc:	490f      	ldr	r1, [pc, #60]	; (801aefc <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x58>)
 801aebe:	4618      	mov	r0, r3
 801aec0:	f7f0 fb2b 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801aec4:	f107 0310 	add.w	r3, r7, #16
 801aec8:	4619      	mov	r1, r3
 801aeca:	68f8      	ldr	r0, [r7, #12]
 801aecc:	f7f0 fee9 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801aed0:	4603      	mov	r3, r0
 801aed2:	461c      	mov	r4, r3
 801aed4:	f107 0310 	add.w	r3, r7, #16
 801aed8:	4618      	mov	r0, r3
 801aeda:	f7f0 fed6 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801aede:	2c00      	cmp	r4, #0
 801aee0:	d007      	beq.n	801aef2 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x4e>
        str += linePrefix;
 801aee2:	6879      	ldr	r1, [r7, #4]
 801aee4:	68f8      	ldr	r0, [r7, #12]
 801aee6:	f7f0 ff4d 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
        str += "<none>";
 801aeea:	4905      	ldr	r1, [pc, #20]	; (801af00 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x5c>)
 801aeec:	68f8      	ldr	r0, [r7, #12]
 801aeee:	f7f0 ff5b 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    }
    return str;
 801aef2:	bf00      	nop
}
 801aef4:	68f8      	ldr	r0, [r7, #12]
 801aef6:	371c      	adds	r7, #28
 801aef8:	46bd      	mov	sp, r7
 801aefa:	bd90      	pop	{r4, r7, pc}
 801aefc:	080247c0 	.word	0x080247c0
 801af00:	080247c4 	.word	0x080247c4

0801af04 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>:

static SimpleString appendStringOnANewLine(const SimpleString& inputString, const SimpleString& linePrefix, const SimpleString& stringToAppend)
{
 801af04:	b590      	push	{r4, r7, lr}
 801af06:	b087      	sub	sp, #28
 801af08:	af00      	add	r7, sp, #0
 801af0a:	60f8      	str	r0, [r7, #12]
 801af0c:	60b9      	str	r1, [r7, #8]
 801af0e:	607a      	str	r2, [r7, #4]
 801af10:	603b      	str	r3, [r7, #0]
    SimpleString str = inputString;
 801af12:	68b9      	ldr	r1, [r7, #8]
 801af14:	68f8      	ldr	r0, [r7, #12]
 801af16:	f7f0 fb54 	bl	800b5c2 <_ZN12SimpleStringC1ERKS_>
    if (str != "") str += "\n";
 801af1a:	f107 0310 	add.w	r3, r7, #16
 801af1e:	4912      	ldr	r1, [pc, #72]	; (801af68 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x64>)
 801af20:	4618      	mov	r0, r3
 801af22:	f7f0 fafa 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801af26:	f107 0310 	add.w	r3, r7, #16
 801af2a:	4619      	mov	r1, r3
 801af2c:	68f8      	ldr	r0, [r7, #12]
 801af2e:	f7f0 fefd 	bl	800bd2c <_ZneRK12SimpleStringS1_>
 801af32:	4603      	mov	r3, r0
 801af34:	461c      	mov	r4, r3
 801af36:	f107 0310 	add.w	r3, r7, #16
 801af3a:	4618      	mov	r0, r3
 801af3c:	f7f0 fea5 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801af40:	2c00      	cmp	r4, #0
 801af42:	d003      	beq.n	801af4c <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x48>
 801af44:	4909      	ldr	r1, [pc, #36]	; (801af6c <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x68>)
 801af46:	68f8      	ldr	r0, [r7, #12]
 801af48:	f7f0 ff2e 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    str += linePrefix;
 801af4c:	6879      	ldr	r1, [r7, #4]
 801af4e:	68f8      	ldr	r0, [r7, #12]
 801af50:	f7f0 ff18 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
    str += stringToAppend;
 801af54:	6839      	ldr	r1, [r7, #0]
 801af56:	68f8      	ldr	r0, [r7, #12]
 801af58:	f7f0 ff14 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
    return str;
 801af5c:	bf00      	nop
}
 801af5e:	68f8      	ldr	r0, [r7, #12]
 801af60:	371c      	adds	r7, #28
 801af62:	46bd      	mov	sp, r7
 801af64:	bd90      	pop	{r4, r7, pc}
 801af66:	bf00      	nop
 801af68:	080247c0 	.word	0x080247c0
 801af6c:	080247cc 	.word	0x080247cc

0801af70 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::unfulfilledCallsToString(const SimpleString& linePrefix) const
{
 801af70:	b580      	push	{r7, lr}
 801af72:	b08c      	sub	sp, #48	; 0x30
 801af74:	af00      	add	r7, sp, #0
 801af76:	60f8      	str	r0, [r7, #12]
 801af78:	60b9      	str	r1, [r7, #8]
 801af7a:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801af7c:	f107 0314 	add.w	r3, r7, #20
 801af80:	4929      	ldr	r1, [pc, #164]	; (801b028 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0xb8>)
 801af82:	4618      	mov	r0, r3
 801af84:	f7f0 fac9 	bl	800b51a <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801af88:	68bb      	ldr	r3, [r7, #8]
 801af8a:	685b      	ldr	r3, [r3, #4]
 801af8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801af8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af90:	2b00      	cmp	r3, #0
 801af92:	d038      	beq.n	801b006 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x96>
        if (!p->expectedCall_->isFulfilled())
 801af94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af96:	681a      	ldr	r2, [r3, #0]
 801af98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af9a:	681b      	ldr	r3, [r3, #0]
 801af9c:	681b      	ldr	r3, [r3, #0]
 801af9e:	33c0      	adds	r3, #192	; 0xc0
 801afa0:	681b      	ldr	r3, [r3, #0]
 801afa2:	4610      	mov	r0, r2
 801afa4:	4798      	blx	r3
 801afa6:	4603      	mov	r3, r0
 801afa8:	f083 0301 	eor.w	r3, r3, #1
 801afac:	b2db      	uxtb	r3, r3
 801afae:	2b00      	cmp	r3, #0
 801afb0:	d025      	beq.n	801affe <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x8e>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801afb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801afb4:	6819      	ldr	r1, [r3, #0]
 801afb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801afb8:	681b      	ldr	r3, [r3, #0]
 801afba:	681b      	ldr	r3, [r3, #0]
 801afbc:	33f0      	adds	r3, #240	; 0xf0
 801afbe:	681b      	ldr	r3, [r3, #0]
 801afc0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801afc4:	4610      	mov	r0, r2
 801afc6:	4798      	blx	r3
 801afc8:	f107 001c 	add.w	r0, r7, #28
 801afcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801afd0:	f107 0114 	add.w	r1, r7, #20
 801afd4:	687a      	ldr	r2, [r7, #4]
 801afd6:	f7ff ff95 	bl	801af04 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801afda:	f107 021c 	add.w	r2, r7, #28
 801afde:	f107 0314 	add.w	r3, r7, #20
 801afe2:	4611      	mov	r1, r2
 801afe4:	4618      	mov	r0, r3
 801afe6:	f7f0 fb04 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 801afea:	f107 031c 	add.w	r3, r7, #28
 801afee:	4618      	mov	r0, r3
 801aff0:	f7f0 fe4b 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801aff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801aff8:	4618      	mov	r0, r3
 801affa:	f7f0 fe46 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801affe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b000:	685b      	ldr	r3, [r3, #4]
 801b002:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b004:	e7c3      	b.n	801af8e <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x1e>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801b006:	68fb      	ldr	r3, [r7, #12]
 801b008:	f107 0114 	add.w	r1, r7, #20
 801b00c:	687a      	ldr	r2, [r7, #4]
 801b00e:	4618      	mov	r0, r3
 801b010:	f7ff ff48 	bl	801aea4 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801b014:	f107 0314 	add.w	r3, r7, #20
 801b018:	4618      	mov	r0, r3
 801b01a:	f7f0 fe36 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801b01e:	bf00      	nop
}
 801b020:	68f8      	ldr	r0, [r7, #12]
 801b022:	3730      	adds	r7, #48	; 0x30
 801b024:	46bd      	mov	sp, r7
 801b026:	bd80      	pop	{r7, pc}
 801b028:	080247c0 	.word	0x080247c0

0801b02c <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::fulfilledCallsToString(const SimpleString& linePrefix) const
{
 801b02c:	b580      	push	{r7, lr}
 801b02e:	b08c      	sub	sp, #48	; 0x30
 801b030:	af00      	add	r7, sp, #0
 801b032:	60f8      	str	r0, [r7, #12]
 801b034:	60b9      	str	r1, [r7, #8]
 801b036:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801b038:	f107 0314 	add.w	r3, r7, #20
 801b03c:	4928      	ldr	r1, [pc, #160]	; (801b0e0 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0xb4>)
 801b03e:	4618      	mov	r0, r3
 801b040:	f7f0 fa6b 	bl	800b51a <_ZN12SimpleStringC1EPKc>

    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b044:	68bb      	ldr	r3, [r7, #8]
 801b046:	685b      	ldr	r3, [r3, #4]
 801b048:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b04c:	2b00      	cmp	r3, #0
 801b04e:	d035      	beq.n	801b0bc <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x90>
        if (p->expectedCall_->isFulfilled())
 801b050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b052:	681a      	ldr	r2, [r3, #0]
 801b054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b056:	681b      	ldr	r3, [r3, #0]
 801b058:	681b      	ldr	r3, [r3, #0]
 801b05a:	33c0      	adds	r3, #192	; 0xc0
 801b05c:	681b      	ldr	r3, [r3, #0]
 801b05e:	4610      	mov	r0, r2
 801b060:	4798      	blx	r3
 801b062:	4603      	mov	r3, r0
 801b064:	2b00      	cmp	r3, #0
 801b066:	d025      	beq.n	801b0b4 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x88>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801b068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b06a:	6819      	ldr	r1, [r3, #0]
 801b06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b06e:	681b      	ldr	r3, [r3, #0]
 801b070:	681b      	ldr	r3, [r3, #0]
 801b072:	33f0      	adds	r3, #240	; 0xf0
 801b074:	681b      	ldr	r3, [r3, #0]
 801b076:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801b07a:	4610      	mov	r0, r2
 801b07c:	4798      	blx	r3
 801b07e:	f107 001c 	add.w	r0, r7, #28
 801b082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b086:	f107 0114 	add.w	r1, r7, #20
 801b08a:	687a      	ldr	r2, [r7, #4]
 801b08c:	f7ff ff3a 	bl	801af04 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801b090:	f107 021c 	add.w	r2, r7, #28
 801b094:	f107 0314 	add.w	r3, r7, #20
 801b098:	4611      	mov	r1, r2
 801b09a:	4618      	mov	r0, r3
 801b09c:	f7f0 faa9 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 801b0a0:	f107 031c 	add.w	r3, r7, #28
 801b0a4:	4618      	mov	r0, r3
 801b0a6:	f7f0 fdf0 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801b0aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b0ae:	4618      	mov	r0, r3
 801b0b0:	f7f0 fdeb 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b0b6:	685b      	ldr	r3, [r3, #4]
 801b0b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b0ba:	e7c6      	b.n	801b04a <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x1e>

    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801b0bc:	68fb      	ldr	r3, [r7, #12]
 801b0be:	f107 0114 	add.w	r1, r7, #20
 801b0c2:	687a      	ldr	r2, [r7, #4]
 801b0c4:	4618      	mov	r0, r3
 801b0c6:	f7ff feed 	bl	801aea4 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801b0ca:	f107 0314 	add.w	r3, r7, #20
 801b0ce:	4618      	mov	r0, r3
 801b0d0:	f7f0 fddb 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801b0d4:	bf00      	nop
}
 801b0d6:	68f8      	ldr	r0, [r7, #12]
 801b0d8:	3730      	adds	r7, #48	; 0x30
 801b0da:	46bd      	mov	sp, r7
 801b0dc:	bd80      	pop	{r7, pc}
 801b0de:	bf00      	nop
 801b0e0:	080247c0 	.word	0x080247c0

0801b0e4 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>:

SimpleString MockExpectedCallsList::missingParametersToString() const
{
 801b0e4:	b580      	push	{r7, lr}
 801b0e6:	b08e      	sub	sp, #56	; 0x38
 801b0e8:	af00      	add	r7, sp, #0
 801b0ea:	6078      	str	r0, [r7, #4]
 801b0ec:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801b0ee:	f107 030c 	add.w	r3, r7, #12
 801b0f2:	4936      	ldr	r1, [pc, #216]	; (801b1cc <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801b0f4:	4618      	mov	r0, r3
 801b0f6:	f7f0 fa10 	bl	800b51a <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b0fa:	683b      	ldr	r3, [r7, #0]
 801b0fc:	685b      	ldr	r3, [r3, #4]
 801b0fe:	637b      	str	r3, [r7, #52]	; 0x34
 801b100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b102:	2b00      	cmp	r3, #0
 801b104:	d044      	beq.n	801b190 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xac>
        if (! p->expectedCall_->isMatchingActualCall())
 801b106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b108:	681a      	ldr	r2, [r3, #0]
 801b10a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b10c:	681b      	ldr	r3, [r3, #0]
 801b10e:	681b      	ldr	r3, [r3, #0]
 801b110:	33cc      	adds	r3, #204	; 0xcc
 801b112:	681b      	ldr	r3, [r3, #0]
 801b114:	4610      	mov	r0, r2
 801b116:	4798      	blx	r3
 801b118:	4603      	mov	r3, r0
 801b11a:	f083 0301 	eor.w	r3, r3, #1
 801b11e:	b2db      	uxtb	r3, r3
 801b120:	2b00      	cmp	r3, #0
 801b122:	d031      	beq.n	801b188 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xa4>
            str = appendStringOnANewLine(str, "", p->expectedCall_->missingParametersToString());
 801b124:	f107 031c 	add.w	r3, r7, #28
 801b128:	4928      	ldr	r1, [pc, #160]	; (801b1cc <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801b12a:	4618      	mov	r0, r3
 801b12c:	f7f0 f9f5 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801b130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b132:	6819      	ldr	r1, [r3, #0]
 801b134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b136:	681b      	ldr	r3, [r3, #0]
 801b138:	681b      	ldr	r3, [r3, #0]
 801b13a:	33f4      	adds	r3, #244	; 0xf4
 801b13c:	681b      	ldr	r3, [r3, #0]
 801b13e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801b142:	4610      	mov	r0, r2
 801b144:	4798      	blx	r3
 801b146:	f107 0014 	add.w	r0, r7, #20
 801b14a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b14e:	f107 021c 	add.w	r2, r7, #28
 801b152:	f107 010c 	add.w	r1, r7, #12
 801b156:	f7ff fed5 	bl	801af04 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801b15a:	f107 0214 	add.w	r2, r7, #20
 801b15e:	f107 030c 	add.w	r3, r7, #12
 801b162:	4611      	mov	r1, r2
 801b164:	4618      	mov	r0, r3
 801b166:	f7f0 fa44 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 801b16a:	f107 0314 	add.w	r3, r7, #20
 801b16e:	4618      	mov	r0, r3
 801b170:	f7f0 fd8b 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801b174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b178:	4618      	mov	r0, r3
 801b17a:	f7f0 fd86 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801b17e:	f107 031c 	add.w	r3, r7, #28
 801b182:	4618      	mov	r0, r3
 801b184:	f7f0 fd81 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b18a:	685b      	ldr	r3, [r3, #4]
 801b18c:	637b      	str	r3, [r7, #52]	; 0x34
 801b18e:	e7b7      	b.n	801b100 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0x1c>

    return stringOrNoneTextWhenEmpty(str, "");
 801b190:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b194:	490d      	ldr	r1, [pc, #52]	; (801b1cc <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801b196:	4618      	mov	r0, r3
 801b198:	f7f0 f9bf 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801b19c:	687b      	ldr	r3, [r7, #4]
 801b19e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801b1a2:	f107 010c 	add.w	r1, r7, #12
 801b1a6:	4618      	mov	r0, r3
 801b1a8:	f7ff fe7c 	bl	801aea4 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
 801b1ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b1b0:	4618      	mov	r0, r3
 801b1b2:	f7f0 fd6a 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    SimpleString str;
 801b1b6:	f107 030c 	add.w	r3, r7, #12
 801b1ba:	4618      	mov	r0, r3
 801b1bc:	f7f0 fd65 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, "");
 801b1c0:	bf00      	nop
}
 801b1c2:	6878      	ldr	r0, [r7, #4]
 801b1c4:	3738      	adds	r7, #56	; 0x38
 801b1c6:	46bd      	mov	sp, r7
 801b1c8:	bd80      	pop	{r7, pc}
 801b1ca:	bf00      	nop
 801b1cc:	080247c0 	.word	0x080247c0

0801b1d0 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>:

bool MockExpectedCallsList::hasUnmatchingExpectationsBecauseOfMissingParameters() const
{
 801b1d0:	b580      	push	{r7, lr}
 801b1d2:	b084      	sub	sp, #16
 801b1d4:	af00      	add	r7, sp, #0
 801b1d6:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b1d8:	687b      	ldr	r3, [r7, #4]
 801b1da:	685b      	ldr	r3, [r3, #4]
 801b1dc:	60fb      	str	r3, [r7, #12]
 801b1de:	68fb      	ldr	r3, [r7, #12]
 801b1e0:	2b00      	cmp	r3, #0
 801b1e2:	d014      	beq.n	801b20e <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x3e>
        if (! p->expectedCall_->areParametersMatchingActualCall())
 801b1e4:	68fb      	ldr	r3, [r7, #12]
 801b1e6:	681a      	ldr	r2, [r3, #0]
 801b1e8:	68fb      	ldr	r3, [r7, #12]
 801b1ea:	681b      	ldr	r3, [r3, #0]
 801b1ec:	681b      	ldr	r3, [r3, #0]
 801b1ee:	33d0      	adds	r3, #208	; 0xd0
 801b1f0:	681b      	ldr	r3, [r3, #0]
 801b1f2:	4610      	mov	r0, r2
 801b1f4:	4798      	blx	r3
 801b1f6:	4603      	mov	r3, r0
 801b1f8:	f083 0301 	eor.w	r3, r3, #1
 801b1fc:	b2db      	uxtb	r3, r3
 801b1fe:	2b00      	cmp	r3, #0
 801b200:	d001      	beq.n	801b206 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x36>
            return true;
 801b202:	2301      	movs	r3, #1
 801b204:	e004      	b.n	801b210 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b206:	68fb      	ldr	r3, [r7, #12]
 801b208:	685b      	ldr	r3, [r3, #4]
 801b20a:	60fb      	str	r3, [r7, #12]
 801b20c:	e7e7      	b.n	801b1de <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0xe>
    return false;
 801b20e:	2300      	movs	r3, #0
}
 801b210:	4618      	mov	r0, r3
 801b212:	3710      	adds	r7, #16
 801b214:	46bd      	mov	sp, r7
 801b216:	bd80      	pop	{r7, pc}

0801b218 <_ZN19MockFailureReporter14crashOnFailureEb>:
    virtual void crashOnFailure(bool shouldCrash) { crashOnFailure_ = shouldCrash; }
 801b218:	b480      	push	{r7}
 801b21a:	b083      	sub	sp, #12
 801b21c:	af00      	add	r7, sp, #0
 801b21e:	6078      	str	r0, [r7, #4]
 801b220:	460b      	mov	r3, r1
 801b222:	70fb      	strb	r3, [r7, #3]
 801b224:	687b      	ldr	r3, [r7, #4]
 801b226:	78fa      	ldrb	r2, [r7, #3]
 801b228:	711a      	strb	r2, [r3, #4]
 801b22a:	bf00      	nop
 801b22c:	370c      	adds	r7, #12
 801b22e:	46bd      	mov	sp, r7
 801b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b234:	4770      	bx	lr
	...

0801b238 <_ZN33MockFailureReporterTestTerminatorC1Eb>:
#include "CppUTestExt/MockNamedValue.h"

class MockFailureReporterTestTerminator : public TestTerminator
{
public:
    MockFailureReporterTestTerminator(bool crashOnFailure) : crashOnFailure_(crashOnFailure)
 801b238:	b580      	push	{r7, lr}
 801b23a:	b082      	sub	sp, #8
 801b23c:	af00      	add	r7, sp, #0
 801b23e:	6078      	str	r0, [r7, #4]
 801b240:	460b      	mov	r3, r1
 801b242:	70fb      	strb	r3, [r7, #3]
 801b244:	687b      	ldr	r3, [r7, #4]
 801b246:	4618      	mov	r0, r3
 801b248:	f7ed ff6a 	bl	8009120 <_ZN14TestTerminatorC1Ev>
 801b24c:	4a05      	ldr	r2, [pc, #20]	; (801b264 <_ZN33MockFailureReporterTestTerminatorC1Eb+0x2c>)
 801b24e:	687b      	ldr	r3, [r7, #4]
 801b250:	601a      	str	r2, [r3, #0]
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	78fa      	ldrb	r2, [r7, #3]
 801b256:	711a      	strb	r2, [r3, #4]
    {
    }
 801b258:	687b      	ldr	r3, [r7, #4]
 801b25a:	4618      	mov	r0, r3
 801b25c:	3708      	adds	r7, #8
 801b25e:	46bd      	mov	sp, r7
 801b260:	bd80      	pop	{r7, pc}
 801b262:	bf00      	nop
 801b264:	080272d0 	.word	0x080272d0

0801b268 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv>:

    virtual void exitCurrentTest() const _override
 801b268:	b580      	push	{r7, lr}
 801b26a:	b082      	sub	sp, #8
 801b26c:	af00      	add	r7, sp, #0
 801b26e:	6078      	str	r0, [r7, #4]
    {
        if (crashOnFailure_)
 801b270:	687b      	ldr	r3, [r7, #4]
 801b272:	791b      	ldrb	r3, [r3, #4]
 801b274:	2b00      	cmp	r3, #0
 801b276:	d001      	beq.n	801b27c <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv+0x14>
            UT_CRASH();
 801b278:	f7f6 f9fe 	bl	8011678 <_ZN10UtestShell5crashEv>

        UtestShell::getCurrentTestTerminator().exitCurrentTest();
 801b27c:	f7f7 fd40 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b280:	4603      	mov	r3, r0
 801b282:	681a      	ldr	r2, [r3, #0]
 801b284:	6812      	ldr	r2, [r2, #0]
 801b286:	4618      	mov	r0, r3
 801b288:	4790      	blx	r2
    } // LCOV_EXCL_LINE
 801b28a:	bf00      	nop
 801b28c:	3708      	adds	r7, #8
 801b28e:	46bd      	mov	sp, r7
 801b290:	bd80      	pop	{r7, pc}
	...

0801b294 <_ZN33MockFailureReporterTestTerminatorD1Ev>:

    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801b294:	b580      	push	{r7, lr}
 801b296:	b082      	sub	sp, #8
 801b298:	af00      	add	r7, sp, #0
 801b29a:	6078      	str	r0, [r7, #4]
    {
 801b29c:	4a05      	ldr	r2, [pc, #20]	; (801b2b4 <_ZN33MockFailureReporterTestTerminatorD1Ev+0x20>)
 801b29e:	687b      	ldr	r3, [r7, #4]
 801b2a0:	601a      	str	r2, [r3, #0]
 801b2a2:	687b      	ldr	r3, [r7, #4]
 801b2a4:	4618      	mov	r0, r3
 801b2a6:	f7f7 fdbb 	bl	8012e20 <_ZN14TestTerminatorD1Ev>
    }
 801b2aa:	687b      	ldr	r3, [r7, #4]
 801b2ac:	4618      	mov	r0, r3
 801b2ae:	3708      	adds	r7, #8
 801b2b0:	46bd      	mov	sp, r7
 801b2b2:	bd80      	pop	{r7, pc}
 801b2b4:	080272d0 	.word	0x080272d0

0801b2b8 <_ZN33MockFailureReporterTestTerminatorD0Ev>:
    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801b2b8:	b580      	push	{r7, lr}
 801b2ba:	b082      	sub	sp, #8
 801b2bc:	af00      	add	r7, sp, #0
 801b2be:	6078      	str	r0, [r7, #4]
    }
 801b2c0:	6878      	ldr	r0, [r7, #4]
 801b2c2:	f7ff ffe7 	bl	801b294 <_ZN33MockFailureReporterTestTerminatorD1Ev>
 801b2c6:	2108      	movs	r1, #8
 801b2c8:	6878      	ldr	r0, [r7, #4]
 801b2ca:	f7ed fd77 	bl	8008dbc <_ZdlPvj>
 801b2ce:	687b      	ldr	r3, [r7, #4]
 801b2d0:	4618      	mov	r0, r3
 801b2d2:	3708      	adds	r7, #8
 801b2d4:	46bd      	mov	sp, r7
 801b2d6:	bd80      	pop	{r7, pc}

0801b2d8 <_ZN19MockFailureReporter8failTestERK11MockFailure>:
    bool crashOnFailure_;

};

void MockFailureReporter::failTest(const MockFailure& failure)
{
 801b2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b2da:	b085      	sub	sp, #20
 801b2dc:	af00      	add	r7, sp, #0
 801b2de:	6078      	str	r0, [r7, #4]
 801b2e0:	6039      	str	r1, [r7, #0]
    if (!getTestToFail()->hasFailed())
 801b2e2:	687b      	ldr	r3, [r7, #4]
 801b2e4:	681b      	ldr	r3, [r3, #0]
 801b2e6:	330c      	adds	r3, #12
 801b2e8:	681b      	ldr	r3, [r3, #0]
 801b2ea:	6878      	ldr	r0, [r7, #4]
 801b2ec:	4798      	blx	r3
 801b2ee:	4603      	mov	r3, r0
 801b2f0:	681a      	ldr	r2, [r3, #0]
 801b2f2:	321c      	adds	r2, #28
 801b2f4:	6812      	ldr	r2, [r2, #0]
 801b2f6:	4618      	mov	r0, r3
 801b2f8:	4790      	blx	r2
 801b2fa:	4603      	mov	r3, r0
 801b2fc:	f083 0301 	eor.w	r3, r3, #1
 801b300:	b2db      	uxtb	r3, r3
 801b302:	2b00      	cmp	r3, #0
 801b304:	d01d      	beq.n	801b342 <_ZN19MockFailureReporter8failTestERK11MockFailure+0x6a>
        getTestToFail()->failWith(failure, MockFailureReporterTestTerminator(crashOnFailure_));
 801b306:	687b      	ldr	r3, [r7, #4]
 801b308:	681b      	ldr	r3, [r3, #0]
 801b30a:	330c      	adds	r3, #12
 801b30c:	681b      	ldr	r3, [r3, #0]
 801b30e:	6878      	ldr	r0, [r7, #4]
 801b310:	4798      	blx	r3
 801b312:	4604      	mov	r4, r0
 801b314:	6823      	ldr	r3, [r4, #0]
 801b316:	339c      	adds	r3, #156	; 0x9c
 801b318:	681d      	ldr	r5, [r3, #0]
 801b31a:	683e      	ldr	r6, [r7, #0]
 801b31c:	687b      	ldr	r3, [r7, #4]
 801b31e:	791a      	ldrb	r2, [r3, #4]
 801b320:	f107 0308 	add.w	r3, r7, #8
 801b324:	4611      	mov	r1, r2
 801b326:	4618      	mov	r0, r3
 801b328:	f7ff ff86 	bl	801b238 <_ZN33MockFailureReporterTestTerminatorC1Eb>
 801b32c:	f107 0308 	add.w	r3, r7, #8
 801b330:	461a      	mov	r2, r3
 801b332:	4631      	mov	r1, r6
 801b334:	4620      	mov	r0, r4
 801b336:	47a8      	blx	r5
 801b338:	f107 0308 	add.w	r3, r7, #8
 801b33c:	4618      	mov	r0, r3
 801b33e:	f7ff ffa9 	bl	801b294 <_ZN33MockFailureReporterTestTerminatorD1Ev>
} // LCOV_EXCL_LINE
 801b342:	bf00      	nop
 801b344:	3714      	adds	r7, #20
 801b346:	46bd      	mov	sp, r7
 801b348:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b34a <_ZN19MockFailureReporter13getTestToFailEv>:

UtestShell* MockFailureReporter::getTestToFail()
{
 801b34a:	b580      	push	{r7, lr}
 801b34c:	b082      	sub	sp, #8
 801b34e:	af00      	add	r7, sp, #0
 801b350:	6078      	str	r0, [r7, #4]
    return UtestShell::getCurrent();
 801b352:	f7f7 fcc5 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 801b356:	4603      	mov	r3, r0
}
 801b358:	4618      	mov	r0, r3
 801b35a:	3708      	adds	r7, #8
 801b35c:	46bd      	mov	sp, r7
 801b35e:	bd80      	pop	{r7, pc}

0801b360 <_ZN11MockFailureC1EP10UtestShell>:

MockFailure::MockFailure(UtestShell* test) : TestFailure(test, "Test failed with MockFailure without an error! Something went seriously wrong.")
 801b360:	b590      	push	{r4, r7, lr}
 801b362:	b085      	sub	sp, #20
 801b364:	af00      	add	r7, sp, #0
 801b366:	6078      	str	r0, [r7, #4]
 801b368:	6039      	str	r1, [r7, #0]
 801b36a:	687c      	ldr	r4, [r7, #4]
 801b36c:	f107 0308 	add.w	r3, r7, #8
 801b370:	490b      	ldr	r1, [pc, #44]	; (801b3a0 <_ZN11MockFailureC1EP10UtestShell+0x40>)
 801b372:	4618      	mov	r0, r3
 801b374:	f7f0 f8d1 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801b378:	f107 0308 	add.w	r3, r7, #8
 801b37c:	461a      	mov	r2, r3
 801b37e:	6839      	ldr	r1, [r7, #0]
 801b380:	4620      	mov	r0, r4
 801b382:	f7f1 ff29 	bl	800d1d8 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 801b386:	f107 0308 	add.w	r3, r7, #8
 801b38a:	4618      	mov	r0, r3
 801b38c:	f7f0 fc7d 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801b390:	4a04      	ldr	r2, [pc, #16]	; (801b3a4 <_ZN11MockFailureC1EP10UtestShell+0x44>)
 801b392:	687b      	ldr	r3, [r7, #4]
 801b394:	601a      	str	r2, [r3, #0]
{
}
 801b396:	687b      	ldr	r3, [r7, #4]
 801b398:	4618      	mov	r0, r3
 801b39a:	3714      	adds	r7, #20
 801b39c:	46bd      	mov	sp, r7
 801b39e:	bd90      	pop	{r4, r7, pc}
 801b3a0:	080247d0 	.word	0x080247d0
 801b3a4:	0802625c 	.word	0x0802625c

0801b3a8 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistory(const MockExpectedCallsList& expectations)
{
 801b3a8:	b5b0      	push	{r4, r5, r7, lr}
 801b3aa:	b08a      	sub	sp, #40	; 0x28
 801b3ac:	af00      	add	r7, sp, #0
 801b3ae:	6078      	str	r0, [r7, #4]
 801b3b0:	6039      	str	r1, [r7, #0]
    message_ += "\tEXPECTED calls that WERE NOT fulfilled:\n";
 801b3b2:	687b      	ldr	r3, [r7, #4]
 801b3b4:	332c      	adds	r3, #44	; 0x2c
 801b3b6:	492b      	ldr	r1, [pc, #172]	; (801b464 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xbc>)
 801b3b8:	4618      	mov	r0, r3
 801b3ba:	f7f0 fcf5 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.unfulfilledCallsToString("\t\t");
 801b3be:	687b      	ldr	r3, [r7, #4]
 801b3c0:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801b3c4:	683b      	ldr	r3, [r7, #0]
 801b3c6:	681b      	ldr	r3, [r3, #0]
 801b3c8:	337c      	adds	r3, #124	; 0x7c
 801b3ca:	681c      	ldr	r4, [r3, #0]
 801b3cc:	f107 0310 	add.w	r3, r7, #16
 801b3d0:	4925      	ldr	r1, [pc, #148]	; (801b468 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801b3d2:	4618      	mov	r0, r3
 801b3d4:	f7f0 f8a1 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801b3d8:	f107 0308 	add.w	r3, r7, #8
 801b3dc:	f107 0210 	add.w	r2, r7, #16
 801b3e0:	6839      	ldr	r1, [r7, #0]
 801b3e2:	4618      	mov	r0, r3
 801b3e4:	47a0      	blx	r4
 801b3e6:	f107 0308 	add.w	r3, r7, #8
 801b3ea:	4619      	mov	r1, r3
 801b3ec:	4628      	mov	r0, r5
 801b3ee:	f7f0 fcc9 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 801b3f2:	f107 0308 	add.w	r3, r7, #8
 801b3f6:	4618      	mov	r0, r3
 801b3f8:	f7f0 fc47 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801b3fc:	f107 0310 	add.w	r3, r7, #16
 801b400:	4618      	mov	r0, r3
 801b402:	f7f0 fc42 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    message_ += "\n\tEXPECTED calls that WERE fulfilled:\n";
 801b406:	687b      	ldr	r3, [r7, #4]
 801b408:	332c      	adds	r3, #44	; 0x2c
 801b40a:	4918      	ldr	r1, [pc, #96]	; (801b46c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc4>)
 801b40c:	4618      	mov	r0, r3
 801b40e:	f7f0 fccb 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.fulfilledCallsToString("\t\t");
 801b412:	687b      	ldr	r3, [r7, #4]
 801b414:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801b418:	683b      	ldr	r3, [r7, #0]
 801b41a:	681b      	ldr	r3, [r3, #0]
 801b41c:	3380      	adds	r3, #128	; 0x80
 801b41e:	681c      	ldr	r4, [r3, #0]
 801b420:	f107 0320 	add.w	r3, r7, #32
 801b424:	4910      	ldr	r1, [pc, #64]	; (801b468 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801b426:	4618      	mov	r0, r3
 801b428:	f7f0 f877 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801b42c:	f107 0318 	add.w	r3, r7, #24
 801b430:	f107 0220 	add.w	r2, r7, #32
 801b434:	6839      	ldr	r1, [r7, #0]
 801b436:	4618      	mov	r0, r3
 801b438:	47a0      	blx	r4
 801b43a:	f107 0318 	add.w	r3, r7, #24
 801b43e:	4619      	mov	r1, r3
 801b440:	4628      	mov	r0, r5
 801b442:	f7f0 fc9f 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 801b446:	f107 0318 	add.w	r3, r7, #24
 801b44a:	4618      	mov	r0, r3
 801b44c:	f7f0 fc1d 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801b450:	f107 0320 	add.w	r3, r7, #32
 801b454:	4618      	mov	r0, r3
 801b456:	f7f0 fc18 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 801b45a:	bf00      	nop
 801b45c:	3728      	adds	r7, #40	; 0x28
 801b45e:	46bd      	mov	sp, r7
 801b460:	bdb0      	pop	{r4, r5, r7, pc}
 801b462:	bf00      	nop
 801b464:	08024820 	.word	0x08024820
 801b468:	0802484c 	.word	0x0802484c
 801b46c:	08024850 	.word	0x08024850

0801b470 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistoryRelatedTo(const SimpleString& name, const MockExpectedCallsList& expectations)
{
 801b470:	b590      	push	{r4, r7, lr}
 801b472:	b08f      	sub	sp, #60	; 0x3c
 801b474:	af00      	add	r7, sp, #0
 801b476:	60f8      	str	r0, [r7, #12]
 801b478:	60b9      	str	r1, [r7, #8]
 801b47a:	607a      	str	r2, [r7, #4]
    MockExpectedCallsList expectationsForFunction;
 801b47c:	f107 0310 	add.w	r3, r7, #16
 801b480:	4618      	mov	r0, r3
 801b482:	f7ff f877 	bl	801a574 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(name, expectations);
 801b486:	f107 0310 	add.w	r3, r7, #16
 801b48a:	687a      	ldr	r2, [r7, #4]
 801b48c:	68b9      	ldr	r1, [r7, #8]
 801b48e:	4618      	mov	r0, r3
 801b490:	f7ff fa16 	bl	801a8c0 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ += "\tEXPECTED calls that WERE NOT fulfilled related to function: ";
 801b494:	68fb      	ldr	r3, [r7, #12]
 801b496:	332c      	adds	r3, #44	; 0x2c
 801b498:	4937      	ldr	r1, [pc, #220]	; (801b578 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x108>)
 801b49a:	4618      	mov	r0, r3
 801b49c:	f7f0 fc84 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801b4a0:	68fb      	ldr	r3, [r7, #12]
 801b4a2:	332c      	adds	r3, #44	; 0x2c
 801b4a4:	68b9      	ldr	r1, [r7, #8]
 801b4a6:	4618      	mov	r0, r3
 801b4a8:	f7f0 fc6c 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801b4ac:	68fb      	ldr	r3, [r7, #12]
 801b4ae:	332c      	adds	r3, #44	; 0x2c
 801b4b0:	4932      	ldr	r1, [pc, #200]	; (801b57c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801b4b2:	4618      	mov	r0, r3
 801b4b4:	f7f0 fc78 	bl	800bda8 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.unfulfilledCallsToString("\t\t");
 801b4b8:	68fb      	ldr	r3, [r7, #12]
 801b4ba:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b4be:	f107 0320 	add.w	r3, r7, #32
 801b4c2:	492f      	ldr	r1, [pc, #188]	; (801b580 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801b4c4:	4618      	mov	r0, r3
 801b4c6:	f7f0 f828 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801b4ca:	f107 0318 	add.w	r3, r7, #24
 801b4ce:	f107 0220 	add.w	r2, r7, #32
 801b4d2:	f107 0110 	add.w	r1, r7, #16
 801b4d6:	4618      	mov	r0, r3
 801b4d8:	f7ff fd4a 	bl	801af70 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>
 801b4dc:	f107 0318 	add.w	r3, r7, #24
 801b4e0:	4619      	mov	r1, r3
 801b4e2:	4620      	mov	r0, r4
 801b4e4:	f7f0 fc4e 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 801b4e8:	f107 0318 	add.w	r3, r7, #24
 801b4ec:	4618      	mov	r0, r3
 801b4ee:	f7f0 fbcc 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801b4f2:	f107 0320 	add.w	r3, r7, #32
 801b4f6:	4618      	mov	r0, r3
 801b4f8:	f7f0 fbc7 	bl	800bc8a <_ZN12SimpleStringD1Ev>

    message_ += "\n\tEXPECTED calls that WERE fulfilled related to function: ";
 801b4fc:	68fb      	ldr	r3, [r7, #12]
 801b4fe:	332c      	adds	r3, #44	; 0x2c
 801b500:	4920      	ldr	r1, [pc, #128]	; (801b584 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x114>)
 801b502:	4618      	mov	r0, r3
 801b504:	f7f0 fc50 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801b508:	68fb      	ldr	r3, [r7, #12]
 801b50a:	332c      	adds	r3, #44	; 0x2c
 801b50c:	68b9      	ldr	r1, [r7, #8]
 801b50e:	4618      	mov	r0, r3
 801b510:	f7f0 fc38 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801b514:	68fb      	ldr	r3, [r7, #12]
 801b516:	332c      	adds	r3, #44	; 0x2c
 801b518:	4918      	ldr	r1, [pc, #96]	; (801b57c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801b51a:	4618      	mov	r0, r3
 801b51c:	f7f0 fc44 	bl	800bda8 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.fulfilledCallsToString("\t\t");
 801b520:	68fb      	ldr	r3, [r7, #12]
 801b522:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b526:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b52a:	4915      	ldr	r1, [pc, #84]	; (801b580 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801b52c:	4618      	mov	r0, r3
 801b52e:	f7ef fff4 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801b532:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b536:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801b53a:	f107 0110 	add.w	r1, r7, #16
 801b53e:	4618      	mov	r0, r3
 801b540:	f7ff fd74 	bl	801b02c <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>
 801b544:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b548:	4619      	mov	r1, r3
 801b54a:	4620      	mov	r0, r4
 801b54c:	f7f0 fc1a 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 801b550:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b554:	4618      	mov	r0, r3
 801b556:	f7f0 fb98 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801b55a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b55e:	4618      	mov	r0, r3
 801b560:	f7f0 fb93 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801b564:	f107 0310 	add.w	r3, r7, #16
 801b568:	4618      	mov	r0, r3
 801b56a:	f7ff f817 	bl	801a59c <_ZN21MockExpectedCallsListD1Ev>
}
 801b56e:	bf00      	nop
 801b570:	373c      	adds	r7, #60	; 0x3c
 801b572:	46bd      	mov	sp, r7
 801b574:	bd90      	pop	{r4, r7, pc}
 801b576:	bf00      	nop
 801b578:	08024878 	.word	0x08024878
 801b57c:	080248b8 	.word	0x080248b8
 801b580:	0802484c 	.word	0x0802484c
 801b584:	080248bc 	.word	0x080248bc

0801b588 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockExpectedCallsDidntHappenFailure::MockExpectedCallsDidntHappenFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801b588:	b590      	push	{r4, r7, lr}
 801b58a:	b087      	sub	sp, #28
 801b58c:	af00      	add	r7, sp, #0
 801b58e:	60f8      	str	r0, [r7, #12]
 801b590:	60b9      	str	r1, [r7, #8]
 801b592:	607a      	str	r2, [r7, #4]
 801b594:	68fb      	ldr	r3, [r7, #12]
 801b596:	68b9      	ldr	r1, [r7, #8]
 801b598:	4618      	mov	r0, r3
 801b59a:	f7ff fee1 	bl	801b360 <_ZN11MockFailureC1EP10UtestShell>
 801b59e:	4a10      	ldr	r2, [pc, #64]	; (801b5e0 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x58>)
 801b5a0:	68fb      	ldr	r3, [r7, #12]
 801b5a2:	601a      	str	r2, [r3, #0]
{
    message_ = "Mock Failure: Expected call WAS NOT fulfilled.\n";
 801b5a4:	68fb      	ldr	r3, [r7, #12]
 801b5a6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b5aa:	f107 0310 	add.w	r3, r7, #16
 801b5ae:	490d      	ldr	r1, [pc, #52]	; (801b5e4 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x5c>)
 801b5b0:	4618      	mov	r0, r3
 801b5b2:	f7ef ffb2 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801b5b6:	f107 0310 	add.w	r3, r7, #16
 801b5ba:	4619      	mov	r1, r3
 801b5bc:	4620      	mov	r0, r4
 801b5be:	f7f0 f818 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 801b5c2:	f107 0310 	add.w	r3, r7, #16
 801b5c6:	4618      	mov	r0, r3
 801b5c8:	f7f0 fb5f 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistory(expectations);
 801b5cc:	68fb      	ldr	r3, [r7, #12]
 801b5ce:	6879      	ldr	r1, [r7, #4]
 801b5d0:	4618      	mov	r0, r3
 801b5d2:	f7ff fee9 	bl	801b3a8 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801b5d6:	68fb      	ldr	r3, [r7, #12]
 801b5d8:	4618      	mov	r0, r3
 801b5da:	371c      	adds	r7, #28
 801b5dc:	46bd      	mov	sp, r7
 801b5de:	bd90      	pop	{r4, r7, pc}
 801b5e0:	08026230 	.word	0x08026230
 801b5e4:	080248f8 	.word	0x080248f8

0801b5e8 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockUnexpectedCallHappenedFailure::MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations) : MockFailure(test)
 801b5e8:	b590      	push	{r4, r7, lr}
 801b5ea:	b08d      	sub	sp, #52	; 0x34
 801b5ec:	af00      	add	r7, sp, #0
 801b5ee:	60f8      	str	r0, [r7, #12]
 801b5f0:	60b9      	str	r1, [r7, #8]
 801b5f2:	607a      	str	r2, [r7, #4]
 801b5f4:	603b      	str	r3, [r7, #0]
 801b5f6:	68fb      	ldr	r3, [r7, #12]
 801b5f8:	68b9      	ldr	r1, [r7, #8]
 801b5fa:	4618      	mov	r0, r3
 801b5fc:	f7ff feb0 	bl	801b360 <_ZN11MockFailureC1EP10UtestShell>
 801b600:	4a2f      	ldr	r2, [pc, #188]	; (801b6c0 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xd8>)
 801b602:	68fb      	ldr	r3, [r7, #12]
 801b604:	601a      	str	r2, [r3, #0]
{
    unsigned int amountOfActualCalls = expectations.amountOfActualCallsFulfilledFor(name);
 801b606:	683b      	ldr	r3, [r7, #0]
 801b608:	681b      	ldr	r3, [r3, #0]
 801b60a:	3310      	adds	r3, #16
 801b60c:	681b      	ldr	r3, [r3, #0]
 801b60e:	6879      	ldr	r1, [r7, #4]
 801b610:	6838      	ldr	r0, [r7, #0]
 801b612:	4798      	blx	r3
 801b614:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (amountOfActualCalls > 0) {
 801b616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b618:	2b00      	cmp	r3, #0
 801b61a:	d027      	beq.n	801b66c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x84>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801b61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b61e:	1c5a      	adds	r2, r3, #1
 801b620:	f107 0314 	add.w	r3, r7, #20
 801b624:	4611      	mov	r1, r2
 801b626:	4618      	mov	r0, r3
 801b628:	f7f1 fa00 	bl	800ca2c <_Z23StringFromOrdinalNumberj>
        message_ = StringFromFormat("Mock Failure: Unexpected additional (%s) call to function: ", ordinalNumber.asCharString());
 801b62c:	68fb      	ldr	r3, [r7, #12]
 801b62e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b632:	f107 0314 	add.w	r3, r7, #20
 801b636:	4618      	mov	r0, r3
 801b638:	f7f0 fafa 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 801b63c:	4602      	mov	r2, r0
 801b63e:	f107 031c 	add.w	r3, r7, #28
 801b642:	4920      	ldr	r1, [pc, #128]	; (801b6c4 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801b644:	4618      	mov	r0, r3
 801b646:	f7f1 f827 	bl	800c698 <_Z16StringFromFormatPKcz>
 801b64a:	f107 031c 	add.w	r3, r7, #28
 801b64e:	4619      	mov	r1, r3
 801b650:	4620      	mov	r0, r4
 801b652:	f7ef ffce 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 801b656:	f107 031c 	add.w	r3, r7, #28
 801b65a:	4618      	mov	r0, r3
 801b65c:	f7f0 fb15 	bl	800bc8a <_ZN12SimpleStringD1Ev>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801b660:	f107 0314 	add.w	r3, r7, #20
 801b664:	4618      	mov	r0, r3
 801b666:	f7f0 fb10 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801b66a:	e013      	b.n	801b694 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xac>
    } else {
        message_ = "Mock Failure: Unexpected call to function: ";
 801b66c:	68fb      	ldr	r3, [r7, #12]
 801b66e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b676:	4914      	ldr	r1, [pc, #80]	; (801b6c8 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801b678:	4618      	mov	r0, r3
 801b67a:	f7ef ff4e 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801b67e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b682:	4619      	mov	r1, r3
 801b684:	4620      	mov	r0, r4
 801b686:	f7ef ffb4 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 801b68a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b68e:	4618      	mov	r0, r3
 801b690:	f7f0 fafb 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    }
    message_ += name;
 801b694:	68fb      	ldr	r3, [r7, #12]
 801b696:	332c      	adds	r3, #44	; 0x2c
 801b698:	6879      	ldr	r1, [r7, #4]
 801b69a:	4618      	mov	r0, r3
 801b69c:	f7f0 fb72 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801b6a0:	68fb      	ldr	r3, [r7, #12]
 801b6a2:	332c      	adds	r3, #44	; 0x2c
 801b6a4:	4909      	ldr	r1, [pc, #36]	; (801b6cc <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801b6a6:	4618      	mov	r0, r3
 801b6a8:	f7f0 fb7e 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectations);
 801b6ac:	68fb      	ldr	r3, [r7, #12]
 801b6ae:	6839      	ldr	r1, [r7, #0]
 801b6b0:	4618      	mov	r0, r3
 801b6b2:	f7ff fe79 	bl	801b3a8 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801b6b6:	68fb      	ldr	r3, [r7, #12]
 801b6b8:	4618      	mov	r0, r3
 801b6ba:	3734      	adds	r7, #52	; 0x34
 801b6bc:	46bd      	mov	sp, r7
 801b6be:	bd90      	pop	{r4, r7, pc}
 801b6c0:	08026bd0 	.word	0x08026bd0
 801b6c4:	08024928 	.word	0x08024928
 801b6c8:	08024964 	.word	0x08024964
 801b6cc:	080248b8 	.word	0x080248b8

0801b6d0 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockCallOrderFailure::MockCallOrderFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801b6d0:	b590      	push	{r4, r7, lr}
 801b6d2:	b089      	sub	sp, #36	; 0x24
 801b6d4:	af00      	add	r7, sp, #0
 801b6d6:	60f8      	str	r0, [r7, #12]
 801b6d8:	60b9      	str	r1, [r7, #8]
 801b6da:	607a      	str	r2, [r7, #4]
 801b6dc:	68fb      	ldr	r3, [r7, #12]
 801b6de:	68b9      	ldr	r1, [r7, #8]
 801b6e0:	4618      	mov	r0, r3
 801b6e2:	f7ff fe3d 	bl	801b360 <_ZN11MockFailureC1EP10UtestShell>
 801b6e6:	4a1f      	ldr	r2, [pc, #124]	; (801b764 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x94>)
 801b6e8:	68fb      	ldr	r3, [r7, #12]
 801b6ea:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForOutOfOrder;
 801b6ec:	f107 0310 	add.w	r3, r7, #16
 801b6f0:	4618      	mov	r0, r3
 801b6f2:	f7fe ff3f 	bl	801a574 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForOutOfOrder.addExpectations(expectations);
 801b6f6:	f107 0310 	add.w	r3, r7, #16
 801b6fa:	6879      	ldr	r1, [r7, #4]
 801b6fc:	4618      	mov	r0, r3
 801b6fe:	f7ff f909 	bl	801a914 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    expectationsForOutOfOrder.onlyKeepOutOfOrderExpectations();
 801b702:	f107 0310 	add.w	r3, r7, #16
 801b706:	4618      	mov	r0, r3
 801b708:	f7ff f94c 	bl	801a9a4 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>

    message_ = "Mock Failure: Out of order calls";
 801b70c:	68fb      	ldr	r3, [r7, #12]
 801b70e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b712:	f107 0318 	add.w	r3, r7, #24
 801b716:	4914      	ldr	r1, [pc, #80]	; (801b768 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x98>)
 801b718:	4618      	mov	r0, r3
 801b71a:	f7ef fefe 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801b71e:	f107 0318 	add.w	r3, r7, #24
 801b722:	4619      	mov	r1, r3
 801b724:	4620      	mov	r0, r4
 801b726:	f7ef ff64 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 801b72a:	f107 0318 	add.w	r3, r7, #24
 801b72e:	4618      	mov	r0, r3
 801b730:	f7f0 faab 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    message_ += "\n";
 801b734:	68fb      	ldr	r3, [r7, #12]
 801b736:	332c      	adds	r3, #44	; 0x2c
 801b738:	490c      	ldr	r1, [pc, #48]	; (801b76c <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x9c>)
 801b73a:	4618      	mov	r0, r3
 801b73c:	f7f0 fb34 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectationsForOutOfOrder);
 801b740:	68fb      	ldr	r3, [r7, #12]
 801b742:	f107 0210 	add.w	r2, r7, #16
 801b746:	4611      	mov	r1, r2
 801b748:	4618      	mov	r0, r3
 801b74a:	f7ff fe2d 	bl	801b3a8 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
    MockExpectedCallsList expectationsForOutOfOrder;
 801b74e:	f107 0310 	add.w	r3, r7, #16
 801b752:	4618      	mov	r0, r3
 801b754:	f7fe ff22 	bl	801a59c <_ZN21MockExpectedCallsListD1Ev>
}
 801b758:	68fb      	ldr	r3, [r7, #12]
 801b75a:	4618      	mov	r0, r3
 801b75c:	3724      	adds	r7, #36	; 0x24
 801b75e:	46bd      	mov	sp, r7
 801b760:	bd90      	pop	{r4, r7, pc}
 801b762:	bf00      	nop
 801b764:	08026204 	.word	0x08026204
 801b768:	08024990 	.word	0x08024990
 801b76c:	080248b8 	.word	0x080248b8

0801b770 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedInputParameterFailure::MockUnexpectedInputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801b770:	b590      	push	{r4, r7, lr}
 801b772:	b099      	sub	sp, #100	; 0x64
 801b774:	af00      	add	r7, sp, #0
 801b776:	60f8      	str	r0, [r7, #12]
 801b778:	60b9      	str	r1, [r7, #8]
 801b77a:	607a      	str	r2, [r7, #4]
 801b77c:	603b      	str	r3, [r7, #0]
 801b77e:	68fb      	ldr	r3, [r7, #12]
 801b780:	68b9      	ldr	r1, [r7, #8]
 801b782:	4618      	mov	r0, r3
 801b784:	f7ff fdec 	bl	801b360 <_ZN11MockFailureC1EP10UtestShell>
 801b788:	4a9e      	ldr	r2, [pc, #632]	; (801ba04 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x294>)
 801b78a:	68fb      	ldr	r3, [r7, #12]
 801b78c:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801b78e:	f107 0310 	add.w	r3, r7, #16
 801b792:	4618      	mov	r0, r3
 801b794:	f7fe feee 	bl	801a574 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801b798:	f107 0310 	add.w	r3, r7, #16
 801b79c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801b79e:	6879      	ldr	r1, [r7, #4]
 801b7a0:	4618      	mov	r0, r3
 801b7a2:	f7ff f88d 	bl	801a8c0 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithInputParameterName(parameter.getName());
 801b7a6:	683b      	ldr	r3, [r7, #0]
 801b7a8:	681b      	ldr	r3, [r3, #0]
 801b7aa:	335c      	adds	r3, #92	; 0x5c
 801b7ac:	681b      	ldr	r3, [r3, #0]
 801b7ae:	f107 0218 	add.w	r2, r7, #24
 801b7b2:	6839      	ldr	r1, [r7, #0]
 801b7b4:	4610      	mov	r0, r2
 801b7b6:	4798      	blx	r3
 801b7b8:	f107 0218 	add.w	r2, r7, #24
 801b7bc:	f107 0310 	add.w	r3, r7, #16
 801b7c0:	4611      	mov	r1, r2
 801b7c2:	4618      	mov	r0, r3
 801b7c4:	f7ff f948 	bl	801aa58 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>
 801b7c8:	f107 0318 	add.w	r3, r7, #24
 801b7cc:	4618      	mov	r0, r3
 801b7ce:	f7f0 fa5c 	bl	800bc8a <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801b7d2:	f107 0310 	add.w	r3, r7, #16
 801b7d6:	4618      	mov	r0, r3
 801b7d8:	f7fe ff4d 	bl	801a676 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801b7dc:	4603      	mov	r3, r0
 801b7de:	2b00      	cmp	r3, #0
 801b7e0:	d037      	beq.n	801b852 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected parameter name to function \"";
 801b7e2:	68fb      	ldr	r3, [r7, #12]
 801b7e4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b7e8:	f107 0320 	add.w	r3, r7, #32
 801b7ec:	4986      	ldr	r1, [pc, #536]	; (801ba08 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x298>)
 801b7ee:	4618      	mov	r0, r3
 801b7f0:	f7ef fe93 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801b7f4:	f107 0320 	add.w	r3, r7, #32
 801b7f8:	4619      	mov	r1, r3
 801b7fa:	4620      	mov	r0, r4
 801b7fc:	f7ef fef9 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 801b800:	f107 0320 	add.w	r3, r7, #32
 801b804:	4618      	mov	r0, r3
 801b806:	f7f0 fa40 	bl	800bc8a <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801b80a:	68fb      	ldr	r3, [r7, #12]
 801b80c:	332c      	adds	r3, #44	; 0x2c
 801b80e:	6879      	ldr	r1, [r7, #4]
 801b810:	4618      	mov	r0, r3
 801b812:	f7f0 fab7 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801b816:	68fb      	ldr	r3, [r7, #12]
 801b818:	332c      	adds	r3, #44	; 0x2c
 801b81a:	497c      	ldr	r1, [pc, #496]	; (801ba0c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x29c>)
 801b81c:	4618      	mov	r0, r3
 801b81e:	f7f0 fac3 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801b822:	68fb      	ldr	r3, [r7, #12]
 801b824:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b828:	683b      	ldr	r3, [r7, #0]
 801b82a:	681b      	ldr	r3, [r3, #0]
 801b82c:	335c      	adds	r3, #92	; 0x5c
 801b82e:	681b      	ldr	r3, [r3, #0]
 801b830:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801b834:	6839      	ldr	r1, [r7, #0]
 801b836:	4610      	mov	r0, r2
 801b838:	4798      	blx	r3
 801b83a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b83e:	4619      	mov	r1, r3
 801b840:	4620      	mov	r0, r4
 801b842:	f7f0 fa9f 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 801b846:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b84a:	4618      	mov	r0, r3
 801b84c:	f7f0 fa1d 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801b850:	e056      	b.n	801b900 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x190>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter value to parameter \"";
 801b852:	68fb      	ldr	r3, [r7, #12]
 801b854:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b858:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b85c:	496c      	ldr	r1, [pc, #432]	; (801ba10 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a0>)
 801b85e:	4618      	mov	r0, r3
 801b860:	f7ef fe5b 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801b864:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b868:	4619      	mov	r1, r3
 801b86a:	4620      	mov	r0, r4
 801b86c:	f7ef fec1 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 801b870:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b874:	4618      	mov	r0, r3
 801b876:	f7f0 fa08 	bl	800bc8a <_ZN12SimpleStringD1Ev>
        message_ += parameter.getName();
 801b87a:	68fb      	ldr	r3, [r7, #12]
 801b87c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b880:	683b      	ldr	r3, [r7, #0]
 801b882:	681b      	ldr	r3, [r3, #0]
 801b884:	335c      	adds	r3, #92	; 0x5c
 801b886:	681b      	ldr	r3, [r3, #0]
 801b888:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801b88c:	6839      	ldr	r1, [r7, #0]
 801b88e:	4610      	mov	r0, r2
 801b890:	4798      	blx	r3
 801b892:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b896:	4619      	mov	r1, r3
 801b898:	4620      	mov	r0, r4
 801b89a:	f7f0 fa73 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 801b89e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b8a2:	4618      	mov	r0, r3
 801b8a4:	f7f0 f9f1 	bl	800bc8a <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801b8a8:	68fb      	ldr	r3, [r7, #12]
 801b8aa:	332c      	adds	r3, #44	; 0x2c
 801b8ac:	4959      	ldr	r1, [pc, #356]	; (801ba14 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a4>)
 801b8ae:	4618      	mov	r0, r3
 801b8b0:	f7f0 fa7a 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801b8b4:	68fb      	ldr	r3, [r7, #12]
 801b8b6:	332c      	adds	r3, #44	; 0x2c
 801b8b8:	6879      	ldr	r1, [r7, #4]
 801b8ba:	4618      	mov	r0, r3
 801b8bc:	f7f0 fa62 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
        message_ += "\": <";
 801b8c0:	68fb      	ldr	r3, [r7, #12]
 801b8c2:	332c      	adds	r3, #44	; 0x2c
 801b8c4:	4954      	ldr	r1, [pc, #336]	; (801ba18 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a8>)
 801b8c6:	4618      	mov	r0, r3
 801b8c8:	f7f0 fa6e 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
        message_ += StringFrom(parameter);
 801b8cc:	68fb      	ldr	r3, [r7, #12]
 801b8ce:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b8d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b8d6:	6839      	ldr	r1, [r7, #0]
 801b8d8:	4618      	mov	r0, r3
 801b8da:	f7fd faa3 	bl	8018e24 <_Z10StringFromRK14MockNamedValue>
 801b8de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b8e2:	4619      	mov	r1, r3
 801b8e4:	4620      	mov	r0, r4
 801b8e6:	f7f0 fa4d 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 801b8ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b8ee:	4618      	mov	r0, r3
 801b8f0:	f7f0 f9cb 	bl	800bc8a <_ZN12SimpleStringD1Ev>
        message_ += ">";
 801b8f4:	68fb      	ldr	r3, [r7, #12]
 801b8f6:	332c      	adds	r3, #44	; 0x2c
 801b8f8:	4948      	ldr	r1, [pc, #288]	; (801ba1c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801b8fa:	4618      	mov	r0, r3
 801b8fc:	f7f0 fa54 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801b900:	68fb      	ldr	r3, [r7, #12]
 801b902:	332c      	adds	r3, #44	; 0x2c
 801b904:	4946      	ldr	r1, [pc, #280]	; (801ba20 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801b906:	4618      	mov	r0, r3
 801b908:	f7f0 fa4e 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801b90c:	68fb      	ldr	r3, [r7, #12]
 801b90e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801b910:	6879      	ldr	r1, [r7, #4]
 801b912:	4618      	mov	r0, r3
 801b914:	f7ff fdac 	bl	801b470 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected parameter passed to function: ";
 801b918:	68fb      	ldr	r3, [r7, #12]
 801b91a:	332c      	adds	r3, #44	; 0x2c
 801b91c:	4941      	ldr	r1, [pc, #260]	; (801ba24 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b4>)
 801b91e:	4618      	mov	r0, r3
 801b920:	f7f0 fa42 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801b924:	68fb      	ldr	r3, [r7, #12]
 801b926:	332c      	adds	r3, #44	; 0x2c
 801b928:	6879      	ldr	r1, [r7, #4]
 801b92a:	4618      	mov	r0, r3
 801b92c:	f7f0 fa2a 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801b930:	68fb      	ldr	r3, [r7, #12]
 801b932:	332c      	adds	r3, #44	; 0x2c
 801b934:	493a      	ldr	r1, [pc, #232]	; (801ba20 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801b936:	4618      	mov	r0, r3
 801b938:	f7f0 fa36 	bl	800bda8 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801b93c:	68fb      	ldr	r3, [r7, #12]
 801b93e:	332c      	adds	r3, #44	; 0x2c
 801b940:	4939      	ldr	r1, [pc, #228]	; (801ba28 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b8>)
 801b942:	4618      	mov	r0, r3
 801b944:	f7f0 fa30 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801b948:	68fb      	ldr	r3, [r7, #12]
 801b94a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b94e:	683b      	ldr	r3, [r7, #0]
 801b950:	681b      	ldr	r3, [r3, #0]
 801b952:	3360      	adds	r3, #96	; 0x60
 801b954:	681b      	ldr	r3, [r3, #0]
 801b956:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801b95a:	6839      	ldr	r1, [r7, #0]
 801b95c:	4610      	mov	r0, r2
 801b95e:	4798      	blx	r3
 801b960:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b964:	4619      	mov	r1, r3
 801b966:	4620      	mov	r0, r4
 801b968:	f7f0 fa0c 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 801b96c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b970:	4618      	mov	r0, r3
 801b972:	f7f0 f98a 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801b976:	68fb      	ldr	r3, [r7, #12]
 801b978:	332c      	adds	r3, #44	; 0x2c
 801b97a:	492c      	ldr	r1, [pc, #176]	; (801ba2c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2bc>)
 801b97c:	4618      	mov	r0, r3
 801b97e:	f7f0 fa13 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801b982:	68fb      	ldr	r3, [r7, #12]
 801b984:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b988:	683b      	ldr	r3, [r7, #0]
 801b98a:	681b      	ldr	r3, [r3, #0]
 801b98c:	335c      	adds	r3, #92	; 0x5c
 801b98e:	681b      	ldr	r3, [r3, #0]
 801b990:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801b994:	6839      	ldr	r1, [r7, #0]
 801b996:	4610      	mov	r0, r2
 801b998:	4798      	blx	r3
 801b99a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b99e:	4619      	mov	r1, r3
 801b9a0:	4620      	mov	r0, r4
 801b9a2:	f7f0 f9ef 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 801b9a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b9aa:	4618      	mov	r0, r3
 801b9ac:	f7f0 f96d 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    message_ += ": <";
 801b9b0:	68fb      	ldr	r3, [r7, #12]
 801b9b2:	332c      	adds	r3, #44	; 0x2c
 801b9b4:	491e      	ldr	r1, [pc, #120]	; (801ba30 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2c0>)
 801b9b6:	4618      	mov	r0, r3
 801b9b8:	f7f0 f9f6 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(parameter);
 801b9bc:	68fb      	ldr	r3, [r7, #12]
 801b9be:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b9c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b9c6:	6839      	ldr	r1, [r7, #0]
 801b9c8:	4618      	mov	r0, r3
 801b9ca:	f7fd fa2b 	bl	8018e24 <_Z10StringFromRK14MockNamedValue>
 801b9ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b9d2:	4619      	mov	r1, r3
 801b9d4:	4620      	mov	r0, r4
 801b9d6:	f7f0 f9d5 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 801b9da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b9de:	4618      	mov	r0, r3
 801b9e0:	f7f0 f953 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    message_ += ">";
 801b9e4:	68fb      	ldr	r3, [r7, #12]
 801b9e6:	332c      	adds	r3, #44	; 0x2c
 801b9e8:	490c      	ldr	r1, [pc, #48]	; (801ba1c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801b9ea:	4618      	mov	r0, r3
 801b9ec:	f7f0 f9dc 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801b9f0:	f107 0310 	add.w	r3, r7, #16
 801b9f4:	4618      	mov	r0, r3
 801b9f6:	f7fe fdd1 	bl	801a59c <_ZN21MockExpectedCallsListD1Ev>
}
 801b9fa:	68fb      	ldr	r3, [r7, #12]
 801b9fc:	4618      	mov	r0, r3
 801b9fe:	3764      	adds	r7, #100	; 0x64
 801ba00:	46bd      	mov	sp, r7
 801ba02:	bd90      	pop	{r4, r7, pc}
 801ba04:	08026ba4 	.word	0x08026ba4
 801ba08:	080249b4 	.word	0x080249b4
 801ba0c:	080249ec 	.word	0x080249ec
 801ba10:	080249f0 	.word	0x080249f0
 801ba14:	08024a28 	.word	0x08024a28
 801ba18:	08024a38 	.word	0x08024a38
 801ba1c:	08024a40 	.word	0x08024a40
 801ba20:	080248b8 	.word	0x080248b8
 801ba24:	08024a44 	.word	0x08024a44
 801ba28:	0802484c 	.word	0x0802484c
 801ba2c:	08024a78 	.word	0x08024a78
 801ba30:	08024a7c 	.word	0x08024a7c

0801ba34 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedOutputParameterFailure::MockUnexpectedOutputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801ba34:	b590      	push	{r4, r7, lr}
 801ba36:	b097      	sub	sp, #92	; 0x5c
 801ba38:	af00      	add	r7, sp, #0
 801ba3a:	60f8      	str	r0, [r7, #12]
 801ba3c:	60b9      	str	r1, [r7, #8]
 801ba3e:	607a      	str	r2, [r7, #4]
 801ba40:	603b      	str	r3, [r7, #0]
 801ba42:	68fb      	ldr	r3, [r7, #12]
 801ba44:	68b9      	ldr	r1, [r7, #8]
 801ba46:	4618      	mov	r0, r3
 801ba48:	f7ff fc8a 	bl	801b360 <_ZN11MockFailureC1EP10UtestShell>
 801ba4c:	4a90      	ldr	r2, [pc, #576]	; (801bc90 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x25c>)
 801ba4e:	68fb      	ldr	r3, [r7, #12]
 801ba50:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801ba52:	f107 0310 	add.w	r3, r7, #16
 801ba56:	4618      	mov	r0, r3
 801ba58:	f7fe fd8c 	bl	801a574 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801ba5c:	f107 0310 	add.w	r3, r7, #16
 801ba60:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801ba62:	6879      	ldr	r1, [r7, #4]
 801ba64:	4618      	mov	r0, r3
 801ba66:	f7fe ff2b 	bl	801a8c0 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithOutputParameterName(parameter.getName());
 801ba6a:	683b      	ldr	r3, [r7, #0]
 801ba6c:	681b      	ldr	r3, [r3, #0]
 801ba6e:	335c      	adds	r3, #92	; 0x5c
 801ba70:	681b      	ldr	r3, [r3, #0]
 801ba72:	f107 0218 	add.w	r2, r7, #24
 801ba76:	6839      	ldr	r1, [r7, #0]
 801ba78:	4610      	mov	r0, r2
 801ba7a:	4798      	blx	r3
 801ba7c:	f107 0218 	add.w	r2, r7, #24
 801ba80:	f107 0310 	add.w	r3, r7, #16
 801ba84:	4611      	mov	r1, r2
 801ba86:	4618      	mov	r0, r3
 801ba88:	f7ff f812 	bl	801aab0 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>
 801ba8c:	f107 0318 	add.w	r3, r7, #24
 801ba90:	4618      	mov	r0, r3
 801ba92:	f7f0 f8fa 	bl	800bc8a <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801ba96:	f107 0310 	add.w	r3, r7, #16
 801ba9a:	4618      	mov	r0, r3
 801ba9c:	f7fe fdeb 	bl	801a676 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801baa0:	4603      	mov	r3, r0
 801baa2:	2b00      	cmp	r3, #0
 801baa4:	d037      	beq.n	801bb16 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected output parameter name to function \"";
 801baa6:	68fb      	ldr	r3, [r7, #12]
 801baa8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801baac:	f107 0320 	add.w	r3, r7, #32
 801bab0:	4978      	ldr	r1, [pc, #480]	; (801bc94 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x260>)
 801bab2:	4618      	mov	r0, r3
 801bab4:	f7ef fd31 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801bab8:	f107 0320 	add.w	r3, r7, #32
 801babc:	4619      	mov	r1, r3
 801babe:	4620      	mov	r0, r4
 801bac0:	f7ef fd97 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 801bac4:	f107 0320 	add.w	r3, r7, #32
 801bac8:	4618      	mov	r0, r3
 801baca:	f7f0 f8de 	bl	800bc8a <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801bace:	68fb      	ldr	r3, [r7, #12]
 801bad0:	332c      	adds	r3, #44	; 0x2c
 801bad2:	6879      	ldr	r1, [r7, #4]
 801bad4:	4618      	mov	r0, r3
 801bad6:	f7f0 f955 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801bada:	68fb      	ldr	r3, [r7, #12]
 801badc:	332c      	adds	r3, #44	; 0x2c
 801bade:	496e      	ldr	r1, [pc, #440]	; (801bc98 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x264>)
 801bae0:	4618      	mov	r0, r3
 801bae2:	f7f0 f961 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801bae6:	68fb      	ldr	r3, [r7, #12]
 801bae8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801baec:	683b      	ldr	r3, [r7, #0]
 801baee:	681b      	ldr	r3, [r3, #0]
 801baf0:	335c      	adds	r3, #92	; 0x5c
 801baf2:	681b      	ldr	r3, [r3, #0]
 801baf4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801baf8:	6839      	ldr	r1, [r7, #0]
 801bafa:	4610      	mov	r0, r2
 801bafc:	4798      	blx	r3
 801bafe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801bb02:	4619      	mov	r1, r3
 801bb04:	4620      	mov	r0, r4
 801bb06:	f7f0 f93d 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 801bb0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801bb0e:	4618      	mov	r0, r3
 801bb10:	f7f0 f8bb 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801bb14:	e059      	b.n	801bbca <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x196>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter type \"";
 801bb16:	68fb      	ldr	r3, [r7, #12]
 801bb18:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801bb1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bb20:	495e      	ldr	r1, [pc, #376]	; (801bc9c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x268>)
 801bb22:	4618      	mov	r0, r3
 801bb24:	f7ef fcf9 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801bb28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bb2c:	4619      	mov	r1, r3
 801bb2e:	4620      	mov	r0, r4
 801bb30:	f7ef fd5f 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 801bb34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bb38:	4618      	mov	r0, r3
 801bb3a:	f7f0 f8a6 	bl	800bc8a <_ZN12SimpleStringD1Ev>
        message_ += parameter.getType();
 801bb3e:	68fb      	ldr	r3, [r7, #12]
 801bb40:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801bb44:	683b      	ldr	r3, [r7, #0]
 801bb46:	681b      	ldr	r3, [r3, #0]
 801bb48:	3360      	adds	r3, #96	; 0x60
 801bb4a:	681b      	ldr	r3, [r3, #0]
 801bb4c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801bb50:	6839      	ldr	r1, [r7, #0]
 801bb52:	4610      	mov	r0, r2
 801bb54:	4798      	blx	r3
 801bb56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bb5a:	4619      	mov	r1, r3
 801bb5c:	4620      	mov	r0, r4
 801bb5e:	f7f0 f911 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 801bb62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bb66:	4618      	mov	r0, r3
 801bb68:	f7f0 f88f 	bl	800bc8a <_ZN12SimpleStringD1Ev>
        message_ += "\" to output parameter \"";
 801bb6c:	68fb      	ldr	r3, [r7, #12]
 801bb6e:	332c      	adds	r3, #44	; 0x2c
 801bb70:	494b      	ldr	r1, [pc, #300]	; (801bca0 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x26c>)
 801bb72:	4618      	mov	r0, r3
 801bb74:	f7f0 f918 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801bb78:	68fb      	ldr	r3, [r7, #12]
 801bb7a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801bb7e:	683b      	ldr	r3, [r7, #0]
 801bb80:	681b      	ldr	r3, [r3, #0]
 801bb82:	335c      	adds	r3, #92	; 0x5c
 801bb84:	681b      	ldr	r3, [r3, #0]
 801bb86:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801bb8a:	6839      	ldr	r1, [r7, #0]
 801bb8c:	4610      	mov	r0, r2
 801bb8e:	4798      	blx	r3
 801bb90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801bb94:	4619      	mov	r1, r3
 801bb96:	4620      	mov	r0, r4
 801bb98:	f7f0 f8f4 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 801bb9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801bba0:	4618      	mov	r0, r3
 801bba2:	f7f0 f872 	bl	800bc8a <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801bba6:	68fb      	ldr	r3, [r7, #12]
 801bba8:	332c      	adds	r3, #44	; 0x2c
 801bbaa:	493e      	ldr	r1, [pc, #248]	; (801bca4 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x270>)
 801bbac:	4618      	mov	r0, r3
 801bbae:	f7f0 f8fb 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801bbb2:	68fb      	ldr	r3, [r7, #12]
 801bbb4:	332c      	adds	r3, #44	; 0x2c
 801bbb6:	6879      	ldr	r1, [r7, #4]
 801bbb8:	4618      	mov	r0, r3
 801bbba:	f7f0 f8e3 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
        message_ += "\"";
 801bbbe:	68fb      	ldr	r3, [r7, #12]
 801bbc0:	332c      	adds	r3, #44	; 0x2c
 801bbc2:	4939      	ldr	r1, [pc, #228]	; (801bca8 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x274>)
 801bbc4:	4618      	mov	r0, r3
 801bbc6:	f7f0 f8ef 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801bbca:	68fb      	ldr	r3, [r7, #12]
 801bbcc:	332c      	adds	r3, #44	; 0x2c
 801bbce:	4937      	ldr	r1, [pc, #220]	; (801bcac <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801bbd0:	4618      	mov	r0, r3
 801bbd2:	f7f0 f8e9 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801bbd6:	68fb      	ldr	r3, [r7, #12]
 801bbd8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801bbda:	6879      	ldr	r1, [r7, #4]
 801bbdc:	4618      	mov	r0, r3
 801bbde:	f7ff fc47 	bl	801b470 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected output parameter passed to function: ";
 801bbe2:	68fb      	ldr	r3, [r7, #12]
 801bbe4:	332c      	adds	r3, #44	; 0x2c
 801bbe6:	4932      	ldr	r1, [pc, #200]	; (801bcb0 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x27c>)
 801bbe8:	4618      	mov	r0, r3
 801bbea:	f7f0 f8dd 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801bbee:	68fb      	ldr	r3, [r7, #12]
 801bbf0:	332c      	adds	r3, #44	; 0x2c
 801bbf2:	6879      	ldr	r1, [r7, #4]
 801bbf4:	4618      	mov	r0, r3
 801bbf6:	f7f0 f8c5 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801bbfa:	68fb      	ldr	r3, [r7, #12]
 801bbfc:	332c      	adds	r3, #44	; 0x2c
 801bbfe:	492b      	ldr	r1, [pc, #172]	; (801bcac <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801bc00:	4618      	mov	r0, r3
 801bc02:	f7f0 f8d1 	bl	800bda8 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801bc06:	68fb      	ldr	r3, [r7, #12]
 801bc08:	332c      	adds	r3, #44	; 0x2c
 801bc0a:	492a      	ldr	r1, [pc, #168]	; (801bcb4 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x280>)
 801bc0c:	4618      	mov	r0, r3
 801bc0e:	f7f0 f8cb 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801bc12:	68fb      	ldr	r3, [r7, #12]
 801bc14:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801bc18:	683b      	ldr	r3, [r7, #0]
 801bc1a:	681b      	ldr	r3, [r3, #0]
 801bc1c:	3360      	adds	r3, #96	; 0x60
 801bc1e:	681b      	ldr	r3, [r3, #0]
 801bc20:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801bc24:	6839      	ldr	r1, [r7, #0]
 801bc26:	4610      	mov	r0, r2
 801bc28:	4798      	blx	r3
 801bc2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801bc2e:	4619      	mov	r1, r3
 801bc30:	4620      	mov	r0, r4
 801bc32:	f7f0 f8a7 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 801bc36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801bc3a:	4618      	mov	r0, r3
 801bc3c:	f7f0 f825 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801bc40:	68fb      	ldr	r3, [r7, #12]
 801bc42:	332c      	adds	r3, #44	; 0x2c
 801bc44:	491c      	ldr	r1, [pc, #112]	; (801bcb8 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x284>)
 801bc46:	4618      	mov	r0, r3
 801bc48:	f7f0 f8ae 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801bc4c:	68fb      	ldr	r3, [r7, #12]
 801bc4e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801bc52:	683b      	ldr	r3, [r7, #0]
 801bc54:	681b      	ldr	r3, [r3, #0]
 801bc56:	335c      	adds	r3, #92	; 0x5c
 801bc58:	681b      	ldr	r3, [r3, #0]
 801bc5a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801bc5e:	6839      	ldr	r1, [r7, #0]
 801bc60:	4610      	mov	r0, r2
 801bc62:	4798      	blx	r3
 801bc64:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801bc68:	4619      	mov	r1, r3
 801bc6a:	4620      	mov	r0, r4
 801bc6c:	f7f0 f88a 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 801bc70:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801bc74:	4618      	mov	r0, r3
 801bc76:	f7f0 f808 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801bc7a:	f107 0310 	add.w	r3, r7, #16
 801bc7e:	4618      	mov	r0, r3
 801bc80:	f7fe fc8c 	bl	801a59c <_ZN21MockExpectedCallsListD1Ev>
}
 801bc84:	68fb      	ldr	r3, [r7, #12]
 801bc86:	4618      	mov	r0, r3
 801bc88:	375c      	adds	r7, #92	; 0x5c
 801bc8a:	46bd      	mov	sp, r7
 801bc8c:	bd90      	pop	{r4, r7, pc}
 801bc8e:	bf00      	nop
 801bc90:	08026b78 	.word	0x08026b78
 801bc94:	08024a80 	.word	0x08024a80
 801bc98:	080249ec 	.word	0x080249ec
 801bc9c:	08024ac0 	.word	0x08024ac0
 801bca0:	08024aec 	.word	0x08024aec
 801bca4:	08024a28 	.word	0x08024a28
 801bca8:	08024b04 	.word	0x08024b04
 801bcac:	080248b8 	.word	0x080248b8
 801bcb0:	08024b08 	.word	0x08024b08
 801bcb4:	0802484c 	.word	0x0802484c
 801bcb8:	08024a78 	.word	0x08024a78

0801bcbc <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedParameterDidntHappenFailure::MockExpectedParameterDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801bcbc:	b590      	push	{r4, r7, lr}
 801bcbe:	b08b      	sub	sp, #44	; 0x2c
 801bcc0:	af00      	add	r7, sp, #0
 801bcc2:	60f8      	str	r0, [r7, #12]
 801bcc4:	60b9      	str	r1, [r7, #8]
 801bcc6:	607a      	str	r2, [r7, #4]
 801bcc8:	603b      	str	r3, [r7, #0]
 801bcca:	68fb      	ldr	r3, [r7, #12]
 801bccc:	68b9      	ldr	r1, [r7, #8]
 801bcce:	4618      	mov	r0, r3
 801bcd0:	f7ff fb46 	bl	801b360 <_ZN11MockFailureC1EP10UtestShell>
 801bcd4:	4a30      	ldr	r2, [pc, #192]	; (801bd98 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801bcd6:	68fb      	ldr	r3, [r7, #12]
 801bcd8:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunction;
 801bcda:	f107 0310 	add.w	r3, r7, #16
 801bcde:	4618      	mov	r0, r3
 801bce0:	f7fe fc48 	bl	801a574 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(functionName, expectations);
 801bce4:	f107 0310 	add.w	r3, r7, #16
 801bce8:	683a      	ldr	r2, [r7, #0]
 801bcea:	6879      	ldr	r1, [r7, #4]
 801bcec:	4618      	mov	r0, r3
 801bcee:	f7fe fde7 	bl	801a8c0 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ = "Mock Failure: Expected parameter for function \"";
 801bcf2:	68fb      	ldr	r3, [r7, #12]
 801bcf4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801bcf8:	f107 0318 	add.w	r3, r7, #24
 801bcfc:	4927      	ldr	r1, [pc, #156]	; (801bd9c <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801bcfe:	4618      	mov	r0, r3
 801bd00:	f7ef fc0b 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801bd04:	f107 0318 	add.w	r3, r7, #24
 801bd08:	4619      	mov	r1, r3
 801bd0a:	4620      	mov	r0, r4
 801bd0c:	f7ef fc71 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 801bd10:	f107 0318 	add.w	r3, r7, #24
 801bd14:	4618      	mov	r0, r3
 801bd16:	f7ef ffb8 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    message_ += functionName;
 801bd1a:	68fb      	ldr	r3, [r7, #12]
 801bd1c:	332c      	adds	r3, #44	; 0x2c
 801bd1e:	6879      	ldr	r1, [r7, #4]
 801bd20:	4618      	mov	r0, r3
 801bd22:	f7f0 f82f 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
    message_ += "\" did not happen.\n";
 801bd26:	68fb      	ldr	r3, [r7, #12]
 801bd28:	332c      	adds	r3, #44	; 0x2c
 801bd2a:	491d      	ldr	r1, [pc, #116]	; (801bda0 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801bd2c:	4618      	mov	r0, r3
 801bd2e:	f7f0 f83b 	bl	800bda8 <_ZN12SimpleStringpLEPKc>

    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801bd32:	68fb      	ldr	r3, [r7, #12]
 801bd34:	683a      	ldr	r2, [r7, #0]
 801bd36:	6879      	ldr	r1, [r7, #4]
 801bd38:	4618      	mov	r0, r3
 801bd3a:	f7ff fb99 	bl	801b470 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tMISSING parameters that didn't happen:\n";
 801bd3e:	68fb      	ldr	r3, [r7, #12]
 801bd40:	332c      	adds	r3, #44	; 0x2c
 801bd42:	4918      	ldr	r1, [pc, #96]	; (801bda4 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe8>)
 801bd44:	4618      	mov	r0, r3
 801bd46:	f7f0 f82f 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    message_ += "\t\t";
 801bd4a:	68fb      	ldr	r3, [r7, #12]
 801bd4c:	332c      	adds	r3, #44	; 0x2c
 801bd4e:	4916      	ldr	r1, [pc, #88]	; (801bda8 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xec>)
 801bd50:	4618      	mov	r0, r3
 801bd52:	f7f0 f829 	bl	800bda8 <_ZN12SimpleStringpLEPKc>
    message_ += expectationsForFunction.missingParametersToString();
 801bd56:	68fb      	ldr	r3, [r7, #12]
 801bd58:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801bd5c:	f107 0320 	add.w	r3, r7, #32
 801bd60:	f107 0210 	add.w	r2, r7, #16
 801bd64:	4611      	mov	r1, r2
 801bd66:	4618      	mov	r0, r3
 801bd68:	f7ff f9bc 	bl	801b0e4 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>
 801bd6c:	f107 0320 	add.w	r3, r7, #32
 801bd70:	4619      	mov	r1, r3
 801bd72:	4620      	mov	r0, r4
 801bd74:	f7f0 f806 	bl	800bd84 <_ZN12SimpleStringpLERKS_>
 801bd78:	f107 0320 	add.w	r3, r7, #32
 801bd7c:	4618      	mov	r0, r3
 801bd7e:	f7ef ff84 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801bd82:	f107 0310 	add.w	r3, r7, #16
 801bd86:	4618      	mov	r0, r3
 801bd88:	f7fe fc08 	bl	801a59c <_ZN21MockExpectedCallsListD1Ev>
}
 801bd8c:	68fb      	ldr	r3, [r7, #12]
 801bd8e:	4618      	mov	r0, r3
 801bd90:	372c      	adds	r7, #44	; 0x2c
 801bd92:	46bd      	mov	sp, r7
 801bd94:	bd90      	pop	{r4, r7, pc}
 801bd96:	bf00      	nop
 801bd98:	08026b4c 	.word	0x08026b4c
 801bd9c:	08024b44 	.word	0x08024b44
 801bda0:	08024b74 	.word	0x08024b74
 801bda4:	08024b88 	.word	0x08024b88
 801bda8:	0802484c 	.word	0x0802484c

0801bdac <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCompareCustomTypeFailure::MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801bdac:	b590      	push	{r4, r7, lr}
 801bdae:	b087      	sub	sp, #28
 801bdb0:	af00      	add	r7, sp, #0
 801bdb2:	60f8      	str	r0, [r7, #12]
 801bdb4:	60b9      	str	r1, [r7, #8]
 801bdb6:	607a      	str	r2, [r7, #4]
 801bdb8:	68fb      	ldr	r3, [r7, #12]
 801bdba:	68b9      	ldr	r1, [r7, #8]
 801bdbc:	4618      	mov	r0, r3
 801bdbe:	f7ff facf 	bl	801b360 <_ZN11MockFailureC1EP10UtestShell>
 801bdc2:	4a10      	ldr	r2, [pc, #64]	; (801be04 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801bdc4:	68fb      	ldr	r3, [r7, #12]
 801bdc6:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to compare type <%s>. Please install a MockNamedValueComparator.", typeName.asCharString());
 801bdc8:	68fb      	ldr	r3, [r7, #12]
 801bdca:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801bdce:	6878      	ldr	r0, [r7, #4]
 801bdd0:	f7ef ff2e 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 801bdd4:	4602      	mov	r2, r0
 801bdd6:	f107 0310 	add.w	r3, r7, #16
 801bdda:	490b      	ldr	r1, [pc, #44]	; (801be08 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801bddc:	4618      	mov	r0, r3
 801bdde:	f7f0 fc5b 	bl	800c698 <_Z16StringFromFormatPKcz>
 801bde2:	f107 0310 	add.w	r3, r7, #16
 801bde6:	4619      	mov	r1, r3
 801bde8:	4620      	mov	r0, r4
 801bdea:	f7ef fc02 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 801bdee:	f107 0310 	add.w	r3, r7, #16
 801bdf2:	4618      	mov	r0, r3
 801bdf4:	f7ef ff49 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 801bdf8:	68fb      	ldr	r3, [r7, #12]
 801bdfa:	4618      	mov	r0, r3
 801bdfc:	371c      	adds	r7, #28
 801bdfe:	46bd      	mov	sp, r7
 801be00:	bd90      	pop	{r4, r7, pc}
 801be02:	bf00      	nop
 801be04:	08026b20 	.word	0x08026b20
 801be08:	08024bb4 	.word	0x08024bb4

0801be0c <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCopyCustomTypeFailure::MockNoWayToCopyCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801be0c:	b590      	push	{r4, r7, lr}
 801be0e:	b087      	sub	sp, #28
 801be10:	af00      	add	r7, sp, #0
 801be12:	60f8      	str	r0, [r7, #12]
 801be14:	60b9      	str	r1, [r7, #8]
 801be16:	607a      	str	r2, [r7, #4]
 801be18:	68fb      	ldr	r3, [r7, #12]
 801be1a:	68b9      	ldr	r1, [r7, #8]
 801be1c:	4618      	mov	r0, r3
 801be1e:	f7ff fa9f 	bl	801b360 <_ZN11MockFailureC1EP10UtestShell>
 801be22:	4a10      	ldr	r2, [pc, #64]	; (801be64 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801be24:	68fb      	ldr	r3, [r7, #12]
 801be26:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to copy type <%s>. Please install a MockNamedValueCopier.", typeName.asCharString());
 801be28:	68fb      	ldr	r3, [r7, #12]
 801be2a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801be2e:	6878      	ldr	r0, [r7, #4]
 801be30:	f7ef fefe 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 801be34:	4602      	mov	r2, r0
 801be36:	f107 0310 	add.w	r3, r7, #16
 801be3a:	490b      	ldr	r1, [pc, #44]	; (801be68 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801be3c:	4618      	mov	r0, r3
 801be3e:	f7f0 fc2b 	bl	800c698 <_Z16StringFromFormatPKcz>
 801be42:	f107 0310 	add.w	r3, r7, #16
 801be46:	4619      	mov	r1, r3
 801be48:	4620      	mov	r0, r4
 801be4a:	f7ef fbd2 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 801be4e:	f107 0310 	add.w	r3, r7, #16
 801be52:	4618      	mov	r0, r3
 801be54:	f7ef ff19 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 801be58:	68fb      	ldr	r3, [r7, #12]
 801be5a:	4618      	mov	r0, r3
 801be5c:	371c      	adds	r7, #28
 801be5e:	46bd      	mov	sp, r7
 801be60:	bd90      	pop	{r4, r7, pc}
 801be62:	bf00      	nop
 801be64:	08026af4 	.word	0x08026af4
 801be68:	08024c0c 	.word	0x08024c0c

0801be6c <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>:

MockUnexpectedObjectFailure::MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* actual, const MockExpectedCallsList& expectations) : MockFailure(test)
 801be6c:	b590      	push	{r4, r7, lr}
 801be6e:	b087      	sub	sp, #28
 801be70:	af00      	add	r7, sp, #0
 801be72:	60f8      	str	r0, [r7, #12]
 801be74:	60b9      	str	r1, [r7, #8]
 801be76:	607a      	str	r2, [r7, #4]
 801be78:	603b      	str	r3, [r7, #0]
 801be7a:	68fb      	ldr	r3, [r7, #12]
 801be7c:	68b9      	ldr	r1, [r7, #8]
 801be7e:	4618      	mov	r0, r3
 801be80:	f7ff fa6e 	bl	801b360 <_ZN11MockFailureC1EP10UtestShell>
 801be84:	4a12      	ldr	r2, [pc, #72]	; (801bed0 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x64>)
 801be86:	68fb      	ldr	r3, [r7, #12]
 801be88:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801be8a:	68fb      	ldr	r3, [r7, #12]
 801be8c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
 801be90:	6878      	ldr	r0, [r7, #4]
 801be92:	f7ef fecd 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 801be96:	4602      	mov	r2, r0
 801be98:	f107 0010 	add.w	r0, r7, #16
 801be9c:	683b      	ldr	r3, [r7, #0]
 801be9e:	490d      	ldr	r1, [pc, #52]	; (801bed4 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x68>)
 801bea0:	f7f0 fbfa 	bl	800c698 <_Z16StringFromFormatPKcz>
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801bea4:	f107 0310 	add.w	r3, r7, #16
 801bea8:	4619      	mov	r1, r3
 801beaa:	4620      	mov	r0, r4
 801beac:	f7ef fba1 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 801beb0:	f107 0310 	add.w	r3, r7, #16
 801beb4:	4618      	mov	r0, r3
 801beb6:	f7ef fee8 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801beba:	68fb      	ldr	r3, [r7, #12]
 801bebc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801bebe:	6879      	ldr	r1, [r7, #4]
 801bec0:	4618      	mov	r0, r3
 801bec2:	f7ff fad5 	bl	801b470 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801bec6:	68fb      	ldr	r3, [r7, #12]
 801bec8:	4618      	mov	r0, r3
 801beca:	371c      	adds	r7, #28
 801becc:	46bd      	mov	sp, r7
 801bece:	bd90      	pop	{r4, r7, pc}
 801bed0:	08026ac8 	.word	0x08026ac8
 801bed4:	08024c5c 	.word	0x08024c5c

0801bed8 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedObjectDidntHappenFailure::MockExpectedObjectDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801bed8:	b590      	push	{r4, r7, lr}
 801beda:	b087      	sub	sp, #28
 801bedc:	af00      	add	r7, sp, #0
 801bede:	60f8      	str	r0, [r7, #12]
 801bee0:	60b9      	str	r1, [r7, #8]
 801bee2:	607a      	str	r2, [r7, #4]
 801bee4:	603b      	str	r3, [r7, #0]
 801bee6:	68fb      	ldr	r3, [r7, #12]
 801bee8:	68b9      	ldr	r1, [r7, #8]
 801beea:	4618      	mov	r0, r3
 801beec:	f7ff fa38 	bl	801b360 <_ZN11MockFailureC1EP10UtestShell>
 801bef0:	4a12      	ldr	r2, [pc, #72]	; (801bf3c <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x64>)
 801bef2:	68fb      	ldr	r3, [r7, #12]
 801bef4:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("Mock Failure: Expected call on object for function \"%s\" but it did not happen.\n", functionName.asCharString());
 801bef6:	68fb      	ldr	r3, [r7, #12]
 801bef8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801befc:	6878      	ldr	r0, [r7, #4]
 801befe:	f7ef fe97 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 801bf02:	4602      	mov	r2, r0
 801bf04:	f107 0310 	add.w	r3, r7, #16
 801bf08:	490d      	ldr	r1, [pc, #52]	; (801bf40 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x68>)
 801bf0a:	4618      	mov	r0, r3
 801bf0c:	f7f0 fbc4 	bl	800c698 <_Z16StringFromFormatPKcz>
 801bf10:	f107 0310 	add.w	r3, r7, #16
 801bf14:	4619      	mov	r1, r3
 801bf16:	4620      	mov	r0, r4
 801bf18:	f7ef fb6b 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 801bf1c:	f107 0310 	add.w	r3, r7, #16
 801bf20:	4618      	mov	r0, r3
 801bf22:	f7ef feb2 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801bf26:	68fb      	ldr	r3, [r7, #12]
 801bf28:	683a      	ldr	r2, [r7, #0]
 801bf2a:	6879      	ldr	r1, [r7, #4]
 801bf2c:	4618      	mov	r0, r3
 801bf2e:	f7ff fa9f 	bl	801b470 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801bf32:	68fb      	ldr	r3, [r7, #12]
 801bf34:	4618      	mov	r0, r3
 801bf36:	371c      	adds	r7, #28
 801bf38:	46bd      	mov	sp, r7
 801bf3a:	bd90      	pop	{r4, r7, pc}
 801bf3c:	08026a9c 	.word	0x08026a9c
 801bf40:	08024cc0 	.word	0x08024cc0

0801bf44 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>:

MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::defaultRepository_ = NULLPTR;
const double MockNamedValue::defaultDoubleTolerance = 0.005;

void MockNamedValue::setDefaultComparatorsAndCopiersRepository(MockNamedValueComparatorsAndCopiersRepository* repository)
{
 801bf44:	b480      	push	{r7}
 801bf46:	b083      	sub	sp, #12
 801bf48:	af00      	add	r7, sp, #0
 801bf4a:	6078      	str	r0, [r7, #4]
    defaultRepository_ = repository;
 801bf4c:	4a04      	ldr	r2, [pc, #16]	; (801bf60 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository+0x1c>)
 801bf4e:	687b      	ldr	r3, [r7, #4]
 801bf50:	6013      	str	r3, [r2, #0]
}
 801bf52:	bf00      	nop
 801bf54:	370c      	adds	r7, #12
 801bf56:	46bd      	mov	sp, r7
 801bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf5c:	4770      	bx	lr
 801bf5e:	bf00      	nop
 801bf60:	20000dc0 	.word	0x20000dc0

0801bf64 <_ZN14MockNamedValueC1ERK12SimpleString>:
MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::getDefaultComparatorsAndCopiersRepository()
{
    return defaultRepository_;
}

MockNamedValue::MockNamedValue(const SimpleString& name) : name_(name), type_("int"), size_(0), comparator_(NULLPTR), copier_(NULLPTR)
 801bf64:	b580      	push	{r7, lr}
 801bf66:	b082      	sub	sp, #8
 801bf68:	af00      	add	r7, sp, #0
 801bf6a:	6078      	str	r0, [r7, #4]
 801bf6c:	6039      	str	r1, [r7, #0]
 801bf6e:	4a10      	ldr	r2, [pc, #64]	; (801bfb0 <_ZN14MockNamedValueC1ERK12SimpleString+0x4c>)
 801bf70:	687b      	ldr	r3, [r7, #4]
 801bf72:	601a      	str	r2, [r3, #0]
 801bf74:	687b      	ldr	r3, [r7, #4]
 801bf76:	3304      	adds	r3, #4
 801bf78:	6839      	ldr	r1, [r7, #0]
 801bf7a:	4618      	mov	r0, r3
 801bf7c:	f7ef fb21 	bl	800b5c2 <_ZN12SimpleStringC1ERKS_>
 801bf80:	687b      	ldr	r3, [r7, #4]
 801bf82:	330c      	adds	r3, #12
 801bf84:	490b      	ldr	r1, [pc, #44]	; (801bfb4 <_ZN14MockNamedValueC1ERK12SimpleString+0x50>)
 801bf86:	4618      	mov	r0, r3
 801bf88:	f7ef fac7 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801bf8c:	687b      	ldr	r3, [r7, #4]
 801bf8e:	2200      	movs	r2, #0
 801bf90:	629a      	str	r2, [r3, #40]	; 0x28
 801bf92:	687b      	ldr	r3, [r7, #4]
 801bf94:	2200      	movs	r2, #0
 801bf96:	62da      	str	r2, [r3, #44]	; 0x2c
 801bf98:	687b      	ldr	r3, [r7, #4]
 801bf9a:	2200      	movs	r2, #0
 801bf9c:	631a      	str	r2, [r3, #48]	; 0x30
{
    value_.intValue_ = 0;
 801bf9e:	687b      	ldr	r3, [r7, #4]
 801bfa0:	2200      	movs	r2, #0
 801bfa2:	619a      	str	r2, [r3, #24]
}
 801bfa4:	687b      	ldr	r3, [r7, #4]
 801bfa6:	4618      	mov	r0, r3
 801bfa8:	3708      	adds	r7, #8
 801bfaa:	46bd      	mov	sp, r7
 801bfac:	bd80      	pop	{r7, pc}
 801bfae:	bf00      	nop
 801bfb0:	08027324 	.word	0x08027324
 801bfb4:	08024d10 	.word	0x08024d10

0801bfb8 <_ZN14MockNamedValueD1Ev>:

MockNamedValue::~MockNamedValue()
 801bfb8:	b580      	push	{r7, lr}
 801bfba:	b082      	sub	sp, #8
 801bfbc:	af00      	add	r7, sp, #0
 801bfbe:	6078      	str	r0, [r7, #4]
 801bfc0:	4a08      	ldr	r2, [pc, #32]	; (801bfe4 <_ZN14MockNamedValueD1Ev+0x2c>)
 801bfc2:	687b      	ldr	r3, [r7, #4]
 801bfc4:	601a      	str	r2, [r3, #0]
 801bfc6:	687b      	ldr	r3, [r7, #4]
 801bfc8:	330c      	adds	r3, #12
 801bfca:	4618      	mov	r0, r3
 801bfcc:	f7ef fe5d 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801bfd0:	687b      	ldr	r3, [r7, #4]
 801bfd2:	3304      	adds	r3, #4
 801bfd4:	4618      	mov	r0, r3
 801bfd6:	f7ef fe58 	bl	800bc8a <_ZN12SimpleStringD1Ev>
{
}
 801bfda:	687b      	ldr	r3, [r7, #4]
 801bfdc:	4618      	mov	r0, r3
 801bfde:	3708      	adds	r7, #8
 801bfe0:	46bd      	mov	sp, r7
 801bfe2:	bd80      	pop	{r7, pc}
 801bfe4:	08027324 	.word	0x08027324

0801bfe8 <_ZN14MockNamedValueD0Ev>:
MockNamedValue::~MockNamedValue()
 801bfe8:	b580      	push	{r7, lr}
 801bfea:	b082      	sub	sp, #8
 801bfec:	af00      	add	r7, sp, #0
 801bfee:	6078      	str	r0, [r7, #4]
}
 801bff0:	6878      	ldr	r0, [r7, #4]
 801bff2:	f7ff ffe1 	bl	801bfb8 <_ZN14MockNamedValueD1Ev>
 801bff6:	2138      	movs	r1, #56	; 0x38
 801bff8:	6878      	ldr	r0, [r7, #4]
 801bffa:	f7ec fedf 	bl	8008dbc <_ZdlPvj>
 801bffe:	687b      	ldr	r3, [r7, #4]
 801c000:	4618      	mov	r0, r3
 801c002:	3708      	adds	r7, #8
 801c004:	46bd      	mov	sp, r7
 801c006:	bd80      	pop	{r7, pc}

0801c008 <_ZN14MockNamedValue8setValueEb>:

void MockNamedValue::setValue(bool value)
{
 801c008:	b590      	push	{r4, r7, lr}
 801c00a:	b085      	sub	sp, #20
 801c00c:	af00      	add	r7, sp, #0
 801c00e:	6078      	str	r0, [r7, #4]
 801c010:	460b      	mov	r3, r1
 801c012:	70fb      	strb	r3, [r7, #3]
    type_ = "bool";
 801c014:	687b      	ldr	r3, [r7, #4]
 801c016:	f103 040c 	add.w	r4, r3, #12
 801c01a:	f107 0308 	add.w	r3, r7, #8
 801c01e:	490b      	ldr	r1, [pc, #44]	; (801c04c <_ZN14MockNamedValue8setValueEb+0x44>)
 801c020:	4618      	mov	r0, r3
 801c022:	f7ef fa7a 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801c026:	f107 0308 	add.w	r3, r7, #8
 801c02a:	4619      	mov	r1, r3
 801c02c:	4620      	mov	r0, r4
 801c02e:	f7ef fae0 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 801c032:	f107 0308 	add.w	r3, r7, #8
 801c036:	4618      	mov	r0, r3
 801c038:	f7ef fe27 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    value_.boolValue_ = value;
 801c03c:	687b      	ldr	r3, [r7, #4]
 801c03e:	78fa      	ldrb	r2, [r7, #3]
 801c040:	761a      	strb	r2, [r3, #24]
}
 801c042:	bf00      	nop
 801c044:	3714      	adds	r7, #20
 801c046:	46bd      	mov	sp, r7
 801c048:	bd90      	pop	{r4, r7, pc}
 801c04a:	bf00      	nop
 801c04c:	08024d14 	.word	0x08024d14

0801c050 <_ZN14MockNamedValue8setValueEj>:

void MockNamedValue::setValue(unsigned int value)
{
 801c050:	b590      	push	{r4, r7, lr}
 801c052:	b085      	sub	sp, #20
 801c054:	af00      	add	r7, sp, #0
 801c056:	6078      	str	r0, [r7, #4]
 801c058:	6039      	str	r1, [r7, #0]
    type_ = "unsigned int";
 801c05a:	687b      	ldr	r3, [r7, #4]
 801c05c:	f103 040c 	add.w	r4, r3, #12
 801c060:	f107 0308 	add.w	r3, r7, #8
 801c064:	490a      	ldr	r1, [pc, #40]	; (801c090 <_ZN14MockNamedValue8setValueEj+0x40>)
 801c066:	4618      	mov	r0, r3
 801c068:	f7ef fa57 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801c06c:	f107 0308 	add.w	r3, r7, #8
 801c070:	4619      	mov	r1, r3
 801c072:	4620      	mov	r0, r4
 801c074:	f7ef fabd 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 801c078:	f107 0308 	add.w	r3, r7, #8
 801c07c:	4618      	mov	r0, r3
 801c07e:	f7ef fe04 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    value_.unsignedIntValue_ = value;
 801c082:	687b      	ldr	r3, [r7, #4]
 801c084:	683a      	ldr	r2, [r7, #0]
 801c086:	619a      	str	r2, [r3, #24]
}
 801c088:	bf00      	nop
 801c08a:	3714      	adds	r7, #20
 801c08c:	46bd      	mov	sp, r7
 801c08e:	bd90      	pop	{r4, r7, pc}
 801c090:	08024d1c 	.word	0x08024d1c

0801c094 <_ZN14MockNamedValue8setValueEi>:

void MockNamedValue::setValue(int value)
{
 801c094:	b590      	push	{r4, r7, lr}
 801c096:	b085      	sub	sp, #20
 801c098:	af00      	add	r7, sp, #0
 801c09a:	6078      	str	r0, [r7, #4]
 801c09c:	6039      	str	r1, [r7, #0]
    type_ = "int";
 801c09e:	687b      	ldr	r3, [r7, #4]
 801c0a0:	f103 040c 	add.w	r4, r3, #12
 801c0a4:	f107 0308 	add.w	r3, r7, #8
 801c0a8:	490a      	ldr	r1, [pc, #40]	; (801c0d4 <_ZN14MockNamedValue8setValueEi+0x40>)
 801c0aa:	4618      	mov	r0, r3
 801c0ac:	f7ef fa35 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801c0b0:	f107 0308 	add.w	r3, r7, #8
 801c0b4:	4619      	mov	r1, r3
 801c0b6:	4620      	mov	r0, r4
 801c0b8:	f7ef fa9b 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 801c0bc:	f107 0308 	add.w	r3, r7, #8
 801c0c0:	4618      	mov	r0, r3
 801c0c2:	f7ef fde2 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    value_.intValue_ = value;
 801c0c6:	687b      	ldr	r3, [r7, #4]
 801c0c8:	683a      	ldr	r2, [r7, #0]
 801c0ca:	619a      	str	r2, [r3, #24]
}
 801c0cc:	bf00      	nop
 801c0ce:	3714      	adds	r7, #20
 801c0d0:	46bd      	mov	sp, r7
 801c0d2:	bd90      	pop	{r4, r7, pc}
 801c0d4:	08024d10 	.word	0x08024d10

0801c0d8 <_ZN14MockNamedValue8setValueEl>:

void MockNamedValue::setValue(long int value)
{
 801c0d8:	b590      	push	{r4, r7, lr}
 801c0da:	b085      	sub	sp, #20
 801c0dc:	af00      	add	r7, sp, #0
 801c0de:	6078      	str	r0, [r7, #4]
 801c0e0:	6039      	str	r1, [r7, #0]
    type_ = "long int";
 801c0e2:	687b      	ldr	r3, [r7, #4]
 801c0e4:	f103 040c 	add.w	r4, r3, #12
 801c0e8:	f107 0308 	add.w	r3, r7, #8
 801c0ec:	490a      	ldr	r1, [pc, #40]	; (801c118 <_ZN14MockNamedValue8setValueEl+0x40>)
 801c0ee:	4618      	mov	r0, r3
 801c0f0:	f7ef fa13 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801c0f4:	f107 0308 	add.w	r3, r7, #8
 801c0f8:	4619      	mov	r1, r3
 801c0fa:	4620      	mov	r0, r4
 801c0fc:	f7ef fa79 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 801c100:	f107 0308 	add.w	r3, r7, #8
 801c104:	4618      	mov	r0, r3
 801c106:	f7ef fdc0 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    value_.longIntValue_ = value;
 801c10a:	687b      	ldr	r3, [r7, #4]
 801c10c:	683a      	ldr	r2, [r7, #0]
 801c10e:	619a      	str	r2, [r3, #24]
}
 801c110:	bf00      	nop
 801c112:	3714      	adds	r7, #20
 801c114:	46bd      	mov	sp, r7
 801c116:	bd90      	pop	{r4, r7, pc}
 801c118:	08024d2c 	.word	0x08024d2c

0801c11c <_ZN14MockNamedValue8setValueEm>:

void MockNamedValue::setValue(unsigned long int value)
{
 801c11c:	b590      	push	{r4, r7, lr}
 801c11e:	b085      	sub	sp, #20
 801c120:	af00      	add	r7, sp, #0
 801c122:	6078      	str	r0, [r7, #4]
 801c124:	6039      	str	r1, [r7, #0]
    type_ = "unsigned long int";
 801c126:	687b      	ldr	r3, [r7, #4]
 801c128:	f103 040c 	add.w	r4, r3, #12
 801c12c:	f107 0308 	add.w	r3, r7, #8
 801c130:	490a      	ldr	r1, [pc, #40]	; (801c15c <_ZN14MockNamedValue8setValueEm+0x40>)
 801c132:	4618      	mov	r0, r3
 801c134:	f7ef f9f1 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801c138:	f107 0308 	add.w	r3, r7, #8
 801c13c:	4619      	mov	r1, r3
 801c13e:	4620      	mov	r0, r4
 801c140:	f7ef fa57 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 801c144:	f107 0308 	add.w	r3, r7, #8
 801c148:	4618      	mov	r0, r3
 801c14a:	f7ef fd9e 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    value_.unsignedLongIntValue_ = value;
 801c14e:	687b      	ldr	r3, [r7, #4]
 801c150:	683a      	ldr	r2, [r7, #0]
 801c152:	619a      	str	r2, [r3, #24]
}
 801c154:	bf00      	nop
 801c156:	3714      	adds	r7, #20
 801c158:	46bd      	mov	sp, r7
 801c15a:	bd90      	pop	{r4, r7, pc}
 801c15c:	08024d38 	.word	0x08024d38

0801c160 <_ZN14MockNamedValue8setValueE17cpputest_longlong>:
}

#else

void MockNamedValue::setValue(cpputest_longlong)
{
 801c160:	b5b0      	push	{r4, r5, r7, lr}
 801c162:	b086      	sub	sp, #24
 801c164:	af02      	add	r7, sp, #8
 801c166:	60f8      	str	r0, [r7, #12]
 801c168:	1d3b      	adds	r3, r7, #4
 801c16a:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801c16e:	f7f6 fdb7 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 801c172:	4604      	mov	r4, r0
 801c174:	6823      	ldr	r3, [r4, #0]
 801c176:	3368      	adds	r3, #104	; 0x68
 801c178:	681d      	ldr	r5, [r3, #0]
 801c17a:	f7f6 fdc1 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c17e:	4603      	mov	r3, r0
 801c180:	9300      	str	r3, [sp, #0]
 801c182:	2367      	movs	r3, #103	; 0x67
 801c184:	4a03      	ldr	r2, [pc, #12]	; (801c194 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x34>)
 801c186:	4904      	ldr	r1, [pc, #16]	; (801c198 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x38>)
 801c188:	4620      	mov	r0, r4
 801c18a:	47a8      	blx	r5
}
 801c18c:	bf00      	nop
 801c18e:	3710      	adds	r7, #16
 801c190:	46bd      	mov	sp, r7
 801c192:	bdb0      	pop	{r4, r5, r7, pc}
 801c194:	08024d4c 	.word	0x08024d4c
 801c198:	08024d68 	.word	0x08024d68

0801c19c <_ZN14MockNamedValue8setValueE18cpputest_ulonglong>:

void MockNamedValue::setValue(cpputest_ulonglong)
{
 801c19c:	b5b0      	push	{r4, r5, r7, lr}
 801c19e:	b086      	sub	sp, #24
 801c1a0:	af02      	add	r7, sp, #8
 801c1a2:	60f8      	str	r0, [r7, #12]
 801c1a4:	1d3b      	adds	r3, r7, #4
 801c1a6:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801c1aa:	f7f6 fd99 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 801c1ae:	4604      	mov	r4, r0
 801c1b0:	6823      	ldr	r3, [r4, #0]
 801c1b2:	3368      	adds	r3, #104	; 0x68
 801c1b4:	681d      	ldr	r5, [r3, #0]
 801c1b6:	f7f6 fda3 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c1ba:	4603      	mov	r3, r0
 801c1bc:	9300      	str	r3, [sp, #0]
 801c1be:	236c      	movs	r3, #108	; 0x6c
 801c1c0:	4a03      	ldr	r2, [pc, #12]	; (801c1d0 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x34>)
 801c1c2:	4904      	ldr	r1, [pc, #16]	; (801c1d4 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x38>)
 801c1c4:	4620      	mov	r0, r4
 801c1c6:	47a8      	blx	r5
}
 801c1c8:	bf00      	nop
 801c1ca:	3710      	adds	r7, #16
 801c1cc:	46bd      	mov	sp, r7
 801c1ce:	bdb0      	pop	{r4, r5, r7, pc}
 801c1d0:	08024d4c 	.word	0x08024d4c
 801c1d4:	08024d88 	.word	0x08024d88

0801c1d8 <_ZN14MockNamedValue8setValueEd>:

#endif

void MockNamedValue::setValue(double value)
{
 801c1d8:	b580      	push	{r7, lr}
 801c1da:	b084      	sub	sp, #16
 801c1dc:	af00      	add	r7, sp, #0
 801c1de:	60f8      	str	r0, [r7, #12]
 801c1e0:	ed87 0b00 	vstr	d0, [r7]
    setValue(value, defaultDoubleTolerance);
 801c1e4:	68fb      	ldr	r3, [r7, #12]
 801c1e6:	681b      	ldr	r3, [r3, #0]
 801c1e8:	3328      	adds	r3, #40	; 0x28
 801c1ea:	681b      	ldr	r3, [r3, #0]
 801c1ec:	ed9f 1b04 	vldr	d1, [pc, #16]	; 801c200 <_ZN14MockNamedValue8setValueEd+0x28>
 801c1f0:	ed97 0b00 	vldr	d0, [r7]
 801c1f4:	68f8      	ldr	r0, [r7, #12]
 801c1f6:	4798      	blx	r3
}
 801c1f8:	bf00      	nop
 801c1fa:	3710      	adds	r7, #16
 801c1fc:	46bd      	mov	sp, r7
 801c1fe:	bd80      	pop	{r7, pc}
 801c200:	47ae147b 	.word	0x47ae147b
 801c204:	3f747ae1 	.word	0x3f747ae1

0801c208 <_ZN14MockNamedValue8setValueEdd>:

void MockNamedValue::setValue(double value, double tolerance)
{
 801c208:	b590      	push	{r4, r7, lr}
 801c20a:	b089      	sub	sp, #36	; 0x24
 801c20c:	af00      	add	r7, sp, #0
 801c20e:	6178      	str	r0, [r7, #20]
 801c210:	ed87 0b02 	vstr	d0, [r7, #8]
 801c214:	ed87 1b00 	vstr	d1, [r7]
    type_ = "double";
 801c218:	697b      	ldr	r3, [r7, #20]
 801c21a:	f103 040c 	add.w	r4, r3, #12
 801c21e:	f107 0318 	add.w	r3, r7, #24
 801c222:	490e      	ldr	r1, [pc, #56]	; (801c25c <_ZN14MockNamedValue8setValueEdd+0x54>)
 801c224:	4618      	mov	r0, r3
 801c226:	f7ef f978 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801c22a:	f107 0318 	add.w	r3, r7, #24
 801c22e:	4619      	mov	r1, r3
 801c230:	4620      	mov	r0, r4
 801c232:	f7ef f9de 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 801c236:	f107 0318 	add.w	r3, r7, #24
 801c23a:	4618      	mov	r0, r3
 801c23c:	f7ef fd25 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    value_.doubleValue_.value = value;
 801c240:	6979      	ldr	r1, [r7, #20]
 801c242:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801c246:	e9c1 2306 	strd	r2, r3, [r1, #24]
    value_.doubleValue_.tolerance = tolerance;
 801c24a:	6979      	ldr	r1, [r7, #20]
 801c24c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c250:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 801c254:	bf00      	nop
 801c256:	3724      	adds	r7, #36	; 0x24
 801c258:	46bd      	mov	sp, r7
 801c25a:	bd90      	pop	{r4, r7, pc}
 801c25c:	08024db4 	.word	0x08024db4

0801c260 <_ZN14MockNamedValue8setValueEPv>:

void MockNamedValue::setValue(void* value)
{
 801c260:	b590      	push	{r4, r7, lr}
 801c262:	b085      	sub	sp, #20
 801c264:	af00      	add	r7, sp, #0
 801c266:	6078      	str	r0, [r7, #4]
 801c268:	6039      	str	r1, [r7, #0]
    type_ = "void*";
 801c26a:	687b      	ldr	r3, [r7, #4]
 801c26c:	f103 040c 	add.w	r4, r3, #12
 801c270:	f107 0308 	add.w	r3, r7, #8
 801c274:	490a      	ldr	r1, [pc, #40]	; (801c2a0 <_ZN14MockNamedValue8setValueEPv+0x40>)
 801c276:	4618      	mov	r0, r3
 801c278:	f7ef f94f 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801c27c:	f107 0308 	add.w	r3, r7, #8
 801c280:	4619      	mov	r1, r3
 801c282:	4620      	mov	r0, r4
 801c284:	f7ef f9b5 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 801c288:	f107 0308 	add.w	r3, r7, #8
 801c28c:	4618      	mov	r0, r3
 801c28e:	f7ef fcfc 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    value_.pointerValue_ = value;
 801c292:	687b      	ldr	r3, [r7, #4]
 801c294:	683a      	ldr	r2, [r7, #0]
 801c296:	619a      	str	r2, [r3, #24]
}
 801c298:	bf00      	nop
 801c29a:	3714      	adds	r7, #20
 801c29c:	46bd      	mov	sp, r7
 801c29e:	bd90      	pop	{r4, r7, pc}
 801c2a0:	08024dbc 	.word	0x08024dbc

0801c2a4 <_ZN14MockNamedValue8setValueEPKv>:

void MockNamedValue::setValue(const void* value)
{
 801c2a4:	b590      	push	{r4, r7, lr}
 801c2a6:	b085      	sub	sp, #20
 801c2a8:	af00      	add	r7, sp, #0
 801c2aa:	6078      	str	r0, [r7, #4]
 801c2ac:	6039      	str	r1, [r7, #0]
    type_ = "const void*";
 801c2ae:	687b      	ldr	r3, [r7, #4]
 801c2b0:	f103 040c 	add.w	r4, r3, #12
 801c2b4:	f107 0308 	add.w	r3, r7, #8
 801c2b8:	490a      	ldr	r1, [pc, #40]	; (801c2e4 <_ZN14MockNamedValue8setValueEPKv+0x40>)
 801c2ba:	4618      	mov	r0, r3
 801c2bc:	f7ef f92d 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801c2c0:	f107 0308 	add.w	r3, r7, #8
 801c2c4:	4619      	mov	r1, r3
 801c2c6:	4620      	mov	r0, r4
 801c2c8:	f7ef f993 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 801c2cc:	f107 0308 	add.w	r3, r7, #8
 801c2d0:	4618      	mov	r0, r3
 801c2d2:	f7ef fcda 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    value_.constPointerValue_ = value;
 801c2d6:	687b      	ldr	r3, [r7, #4]
 801c2d8:	683a      	ldr	r2, [r7, #0]
 801c2da:	619a      	str	r2, [r3, #24]
}
 801c2dc:	bf00      	nop
 801c2de:	3714      	adds	r7, #20
 801c2e0:	46bd      	mov	sp, r7
 801c2e2:	bd90      	pop	{r4, r7, pc}
 801c2e4:	08024dc4 	.word	0x08024dc4

0801c2e8 <_ZN14MockNamedValue8setValueEPFvvE>:

void MockNamedValue::setValue(void (*value)())
{
 801c2e8:	b590      	push	{r4, r7, lr}
 801c2ea:	b085      	sub	sp, #20
 801c2ec:	af00      	add	r7, sp, #0
 801c2ee:	6078      	str	r0, [r7, #4]
 801c2f0:	6039      	str	r1, [r7, #0]
    type_ = "void (*)()";
 801c2f2:	687b      	ldr	r3, [r7, #4]
 801c2f4:	f103 040c 	add.w	r4, r3, #12
 801c2f8:	f107 0308 	add.w	r3, r7, #8
 801c2fc:	490a      	ldr	r1, [pc, #40]	; (801c328 <_ZN14MockNamedValue8setValueEPFvvE+0x40>)
 801c2fe:	4618      	mov	r0, r3
 801c300:	f7ef f90b 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801c304:	f107 0308 	add.w	r3, r7, #8
 801c308:	4619      	mov	r1, r3
 801c30a:	4620      	mov	r0, r4
 801c30c:	f7ef f971 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 801c310:	f107 0308 	add.w	r3, r7, #8
 801c314:	4618      	mov	r0, r3
 801c316:	f7ef fcb8 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    value_.functionPointerValue_ = value;
 801c31a:	687b      	ldr	r3, [r7, #4]
 801c31c:	683a      	ldr	r2, [r7, #0]
 801c31e:	619a      	str	r2, [r3, #24]
}
 801c320:	bf00      	nop
 801c322:	3714      	adds	r7, #20
 801c324:	46bd      	mov	sp, r7
 801c326:	bd90      	pop	{r4, r7, pc}
 801c328:	08024dd0 	.word	0x08024dd0

0801c32c <_ZN14MockNamedValue8setValueEPKc>:

void MockNamedValue::setValue(const char* value)
{
 801c32c:	b590      	push	{r4, r7, lr}
 801c32e:	b085      	sub	sp, #20
 801c330:	af00      	add	r7, sp, #0
 801c332:	6078      	str	r0, [r7, #4]
 801c334:	6039      	str	r1, [r7, #0]
    type_ = "const char*";
 801c336:	687b      	ldr	r3, [r7, #4]
 801c338:	f103 040c 	add.w	r4, r3, #12
 801c33c:	f107 0308 	add.w	r3, r7, #8
 801c340:	490a      	ldr	r1, [pc, #40]	; (801c36c <_ZN14MockNamedValue8setValueEPKc+0x40>)
 801c342:	4618      	mov	r0, r3
 801c344:	f7ef f8e9 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801c348:	f107 0308 	add.w	r3, r7, #8
 801c34c:	4619      	mov	r1, r3
 801c34e:	4620      	mov	r0, r4
 801c350:	f7ef f94f 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 801c354:	f107 0308 	add.w	r3, r7, #8
 801c358:	4618      	mov	r0, r3
 801c35a:	f7ef fc96 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    value_.stringValue_ = value;
 801c35e:	687b      	ldr	r3, [r7, #4]
 801c360:	683a      	ldr	r2, [r7, #0]
 801c362:	619a      	str	r2, [r3, #24]
}
 801c364:	bf00      	nop
 801c366:	3714      	adds	r7, #20
 801c368:	46bd      	mov	sp, r7
 801c36a:	bd90      	pop	{r4, r7, pc}
 801c36c:	08024ddc 	.word	0x08024ddc

0801c370 <_ZN14MockNamedValue15setMemoryBufferEPKhj>:

void MockNamedValue::setMemoryBuffer(const unsigned char* value, size_t size)
{
 801c370:	b590      	push	{r4, r7, lr}
 801c372:	b087      	sub	sp, #28
 801c374:	af00      	add	r7, sp, #0
 801c376:	60f8      	str	r0, [r7, #12]
 801c378:	60b9      	str	r1, [r7, #8]
 801c37a:	607a      	str	r2, [r7, #4]
    type_ = "const unsigned char*";
 801c37c:	68fb      	ldr	r3, [r7, #12]
 801c37e:	f103 040c 	add.w	r4, r3, #12
 801c382:	f107 0310 	add.w	r3, r7, #16
 801c386:	490c      	ldr	r1, [pc, #48]	; (801c3b8 <_ZN14MockNamedValue15setMemoryBufferEPKhj+0x48>)
 801c388:	4618      	mov	r0, r3
 801c38a:	f7ef f8c6 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801c38e:	f107 0310 	add.w	r3, r7, #16
 801c392:	4619      	mov	r1, r3
 801c394:	4620      	mov	r0, r4
 801c396:	f7ef f92c 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 801c39a:	f107 0310 	add.w	r3, r7, #16
 801c39e:	4618      	mov	r0, r3
 801c3a0:	f7ef fc73 	bl	800bc8a <_ZN12SimpleStringD1Ev>
    value_.memoryBufferValue_ = value;
 801c3a4:	68fb      	ldr	r3, [r7, #12]
 801c3a6:	68ba      	ldr	r2, [r7, #8]
 801c3a8:	619a      	str	r2, [r3, #24]
    size_ = size;
 801c3aa:	68fb      	ldr	r3, [r7, #12]
 801c3ac:	687a      	ldr	r2, [r7, #4]
 801c3ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 801c3b0:	bf00      	nop
 801c3b2:	371c      	adds	r7, #28
 801c3b4:	46bd      	mov	sp, r7
 801c3b6:	bd90      	pop	{r4, r7, pc}
 801c3b8:	08024de8 	.word	0x08024de8

0801c3bc <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>:

void MockNamedValue::setConstObjectPointer(const SimpleString& type, const void* objectPtr)
{
 801c3bc:	b580      	push	{r7, lr}
 801c3be:	b084      	sub	sp, #16
 801c3c0:	af00      	add	r7, sp, #0
 801c3c2:	60f8      	str	r0, [r7, #12]
 801c3c4:	60b9      	str	r1, [r7, #8]
 801c3c6:	607a      	str	r2, [r7, #4]
    type_ = type;
 801c3c8:	68fb      	ldr	r3, [r7, #12]
 801c3ca:	330c      	adds	r3, #12
 801c3cc:	68b9      	ldr	r1, [r7, #8]
 801c3ce:	4618      	mov	r0, r3
 801c3d0:	f7ef f90f 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
    value_.constObjectPointerValue_ = objectPtr;
 801c3d4:	68fb      	ldr	r3, [r7, #12]
 801c3d6:	687a      	ldr	r2, [r7, #4]
 801c3d8:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801c3da:	4b11      	ldr	r3, [pc, #68]	; (801c420 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801c3dc:	681b      	ldr	r3, [r3, #0]
 801c3de:	2b00      	cmp	r3, #0
 801c3e0:	d019      	beq.n	801c416 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801c3e2:	4b0f      	ldr	r3, [pc, #60]	; (801c420 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801c3e4:	681a      	ldr	r2, [r3, #0]
 801c3e6:	4b0e      	ldr	r3, [pc, #56]	; (801c420 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801c3e8:	681b      	ldr	r3, [r3, #0]
 801c3ea:	681b      	ldr	r3, [r3, #0]
 801c3ec:	3314      	adds	r3, #20
 801c3ee:	681b      	ldr	r3, [r3, #0]
 801c3f0:	68b9      	ldr	r1, [r7, #8]
 801c3f2:	4610      	mov	r0, r2
 801c3f4:	4798      	blx	r3
 801c3f6:	4602      	mov	r2, r0
 801c3f8:	68fb      	ldr	r3, [r7, #12]
 801c3fa:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801c3fc:	4b08      	ldr	r3, [pc, #32]	; (801c420 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801c3fe:	681a      	ldr	r2, [r3, #0]
 801c400:	4b07      	ldr	r3, [pc, #28]	; (801c420 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801c402:	681b      	ldr	r3, [r3, #0]
 801c404:	681b      	ldr	r3, [r3, #0]
 801c406:	3318      	adds	r3, #24
 801c408:	681b      	ldr	r3, [r3, #0]
 801c40a:	68b9      	ldr	r1, [r7, #8]
 801c40c:	4610      	mov	r0, r2
 801c40e:	4798      	blx	r3
 801c410:	4602      	mov	r2, r0
 801c412:	68fb      	ldr	r3, [r7, #12]
 801c414:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801c416:	bf00      	nop
 801c418:	3710      	adds	r7, #16
 801c41a:	46bd      	mov	sp, r7
 801c41c:	bd80      	pop	{r7, pc}
 801c41e:	bf00      	nop
 801c420:	20000dc0 	.word	0x20000dc0

0801c424 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv>:

void MockNamedValue::setObjectPointer(const SimpleString& type, void* objectPtr)
{
 801c424:	b580      	push	{r7, lr}
 801c426:	b084      	sub	sp, #16
 801c428:	af00      	add	r7, sp, #0
 801c42a:	60f8      	str	r0, [r7, #12]
 801c42c:	60b9      	str	r1, [r7, #8]
 801c42e:	607a      	str	r2, [r7, #4]
    type_ = type;
 801c430:	68fb      	ldr	r3, [r7, #12]
 801c432:	330c      	adds	r3, #12
 801c434:	68b9      	ldr	r1, [r7, #8]
 801c436:	4618      	mov	r0, r3
 801c438:	f7ef f8db 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
    value_.objectPointerValue_ = objectPtr;
 801c43c:	68fb      	ldr	r3, [r7, #12]
 801c43e:	687a      	ldr	r2, [r7, #4]
 801c440:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801c442:	4b11      	ldr	r3, [pc, #68]	; (801c488 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801c444:	681b      	ldr	r3, [r3, #0]
 801c446:	2b00      	cmp	r3, #0
 801c448:	d019      	beq.n	801c47e <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801c44a:	4b0f      	ldr	r3, [pc, #60]	; (801c488 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801c44c:	681a      	ldr	r2, [r3, #0]
 801c44e:	4b0e      	ldr	r3, [pc, #56]	; (801c488 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801c450:	681b      	ldr	r3, [r3, #0]
 801c452:	681b      	ldr	r3, [r3, #0]
 801c454:	3314      	adds	r3, #20
 801c456:	681b      	ldr	r3, [r3, #0]
 801c458:	68b9      	ldr	r1, [r7, #8]
 801c45a:	4610      	mov	r0, r2
 801c45c:	4798      	blx	r3
 801c45e:	4602      	mov	r2, r0
 801c460:	68fb      	ldr	r3, [r7, #12]
 801c462:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801c464:	4b08      	ldr	r3, [pc, #32]	; (801c488 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801c466:	681a      	ldr	r2, [r3, #0]
 801c468:	4b07      	ldr	r3, [pc, #28]	; (801c488 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801c46a:	681b      	ldr	r3, [r3, #0]
 801c46c:	681b      	ldr	r3, [r3, #0]
 801c46e:	3318      	adds	r3, #24
 801c470:	681b      	ldr	r3, [r3, #0]
 801c472:	68b9      	ldr	r1, [r7, #8]
 801c474:	4610      	mov	r0, r2
 801c476:	4798      	blx	r3
 801c478:	4602      	mov	r2, r0
 801c47a:	68fb      	ldr	r3, [r7, #12]
 801c47c:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801c47e:	bf00      	nop
 801c480:	3710      	adds	r7, #16
 801c482:	46bd      	mov	sp, r7
 801c484:	bd80      	pop	{r7, pc}
 801c486:	bf00      	nop
 801c488:	20000dc0 	.word	0x20000dc0

0801c48c <_ZN14MockNamedValue7setSizeEj>:

void MockNamedValue::setSize(size_t size)
{
 801c48c:	b480      	push	{r7}
 801c48e:	b083      	sub	sp, #12
 801c490:	af00      	add	r7, sp, #0
 801c492:	6078      	str	r0, [r7, #4]
 801c494:	6039      	str	r1, [r7, #0]
    size_ = size;
 801c496:	687b      	ldr	r3, [r7, #4]
 801c498:	683a      	ldr	r2, [r7, #0]
 801c49a:	629a      	str	r2, [r3, #40]	; 0x28
}
 801c49c:	bf00      	nop
 801c49e:	370c      	adds	r7, #12
 801c4a0:	46bd      	mov	sp, r7
 801c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4a6:	4770      	bx	lr

0801c4a8 <_ZN14MockNamedValue7setNameEPKc>:

void MockNamedValue::setName(const char* name)
{
 801c4a8:	b590      	push	{r4, r7, lr}
 801c4aa:	b085      	sub	sp, #20
 801c4ac:	af00      	add	r7, sp, #0
 801c4ae:	6078      	str	r0, [r7, #4]
 801c4b0:	6039      	str	r1, [r7, #0]
    name_ = name;
 801c4b2:	687b      	ldr	r3, [r7, #4]
 801c4b4:	1d1c      	adds	r4, r3, #4
 801c4b6:	f107 0308 	add.w	r3, r7, #8
 801c4ba:	6839      	ldr	r1, [r7, #0]
 801c4bc:	4618      	mov	r0, r3
 801c4be:	f7ef f82c 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801c4c2:	f107 0308 	add.w	r3, r7, #8
 801c4c6:	4619      	mov	r1, r3
 801c4c8:	4620      	mov	r0, r4
 801c4ca:	f7ef f892 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
 801c4ce:	f107 0308 	add.w	r3, r7, #8
 801c4d2:	4618      	mov	r0, r3
 801c4d4:	f7ef fbd9 	bl	800bc8a <_ZN12SimpleStringD1Ev>
}
 801c4d8:	bf00      	nop
 801c4da:	3714      	adds	r7, #20
 801c4dc:	46bd      	mov	sp, r7
 801c4de:	bd90      	pop	{r4, r7, pc}

0801c4e0 <_ZNK14MockNamedValue7getNameEv>:

SimpleString MockNamedValue::getName() const
{
 801c4e0:	b580      	push	{r7, lr}
 801c4e2:	b082      	sub	sp, #8
 801c4e4:	af00      	add	r7, sp, #0
 801c4e6:	6078      	str	r0, [r7, #4]
 801c4e8:	6039      	str	r1, [r7, #0]
    return name_;
 801c4ea:	683b      	ldr	r3, [r7, #0]
 801c4ec:	3304      	adds	r3, #4
 801c4ee:	4619      	mov	r1, r3
 801c4f0:	6878      	ldr	r0, [r7, #4]
 801c4f2:	f7ef f866 	bl	800b5c2 <_ZN12SimpleStringC1ERKS_>
}
 801c4f6:	6878      	ldr	r0, [r7, #4]
 801c4f8:	3708      	adds	r7, #8
 801c4fa:	46bd      	mov	sp, r7
 801c4fc:	bd80      	pop	{r7, pc}

0801c4fe <_ZNK14MockNamedValue7getTypeEv>:

SimpleString MockNamedValue::getType() const
{
 801c4fe:	b580      	push	{r7, lr}
 801c500:	b082      	sub	sp, #8
 801c502:	af00      	add	r7, sp, #0
 801c504:	6078      	str	r0, [r7, #4]
 801c506:	6039      	str	r1, [r7, #0]
    return type_;
 801c508:	683b      	ldr	r3, [r7, #0]
 801c50a:	330c      	adds	r3, #12
 801c50c:	4619      	mov	r1, r3
 801c50e:	6878      	ldr	r0, [r7, #4]
 801c510:	f7ef f857 	bl	800b5c2 <_ZN12SimpleStringC1ERKS_>
}
 801c514:	6878      	ldr	r0, [r7, #4]
 801c516:	3708      	adds	r7, #8
 801c518:	46bd      	mov	sp, r7
 801c51a:	bd80      	pop	{r7, pc}

0801c51c <_ZNK14MockNamedValue12getBoolValueEv>:

bool MockNamedValue::getBoolValue() const
{
 801c51c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c51e:	b087      	sub	sp, #28
 801c520:	af04      	add	r7, sp, #16
 801c522:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("bool", type_.asCharString());
 801c524:	f7f6 fbdc 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 801c528:	4604      	mov	r4, r0
 801c52a:	6823      	ldr	r3, [r4, #0]
 801c52c:	3324      	adds	r3, #36	; 0x24
 801c52e:	681d      	ldr	r5, [r3, #0]
 801c530:	687b      	ldr	r3, [r7, #4]
 801c532:	330c      	adds	r3, #12
 801c534:	4618      	mov	r0, r3
 801c536:	f7ef fb7b 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 801c53a:	4606      	mov	r6, r0
 801c53c:	f7f6 fbe0 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c540:	4603      	mov	r3, r0
 801c542:	9302      	str	r3, [sp, #8]
 801c544:	23c8      	movs	r3, #200	; 0xc8
 801c546:	9301      	str	r3, [sp, #4]
 801c548:	4b06      	ldr	r3, [pc, #24]	; (801c564 <_ZNK14MockNamedValue12getBoolValueEv+0x48>)
 801c54a:	9300      	str	r3, [sp, #0]
 801c54c:	2300      	movs	r3, #0
 801c54e:	4632      	mov	r2, r6
 801c550:	4905      	ldr	r1, [pc, #20]	; (801c568 <_ZNK14MockNamedValue12getBoolValueEv+0x4c>)
 801c552:	4620      	mov	r0, r4
 801c554:	47a8      	blx	r5
    return value_.boolValue_;
 801c556:	687b      	ldr	r3, [r7, #4]
 801c558:	7e1b      	ldrb	r3, [r3, #24]
}
 801c55a:	4618      	mov	r0, r3
 801c55c:	370c      	adds	r7, #12
 801c55e:	46bd      	mov	sp, r7
 801c560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c562:	bf00      	nop
 801c564:	08024d4c 	.word	0x08024d4c
 801c568:	08024d14 	.word	0x08024d14

0801c56c <_ZNK14MockNamedValue19getUnsignedIntValueEv>:

unsigned int MockNamedValue::getUnsignedIntValue() const
{
 801c56c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c56e:	b089      	sub	sp, #36	; 0x24
 801c570:	af04      	add	r7, sp, #16
 801c572:	6078      	str	r0, [r7, #4]
    if(type_ == "int" && value_.intValue_ >= 0)
 801c574:	687b      	ldr	r3, [r7, #4]
 801c576:	f103 040c 	add.w	r4, r3, #12
 801c57a:	f107 0308 	add.w	r3, r7, #8
 801c57e:	4920      	ldr	r1, [pc, #128]	; (801c600 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x94>)
 801c580:	4618      	mov	r0, r3
 801c582:	f7ee ffca 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801c586:	2501      	movs	r5, #1
 801c588:	f107 0308 	add.w	r3, r7, #8
 801c58c:	4619      	mov	r1, r3
 801c58e:	4620      	mov	r0, r4
 801c590:	f7ef fb87 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801c594:	4603      	mov	r3, r0
 801c596:	2b00      	cmp	r3, #0
 801c598:	d005      	beq.n	801c5a6 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801c59a:	687b      	ldr	r3, [r7, #4]
 801c59c:	699b      	ldr	r3, [r3, #24]
 801c59e:	2b00      	cmp	r3, #0
 801c5a0:	db01      	blt.n	801c5a6 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801c5a2:	2401      	movs	r4, #1
 801c5a4:	e000      	b.n	801c5a8 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3c>
 801c5a6:	2400      	movs	r4, #0
 801c5a8:	2d00      	cmp	r5, #0
 801c5aa:	d004      	beq.n	801c5b6 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x4a>
 801c5ac:	f107 0308 	add.w	r3, r7, #8
 801c5b0:	4618      	mov	r0, r3
 801c5b2:	f7ef fb6a 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801c5b6:	2c00      	cmp	r4, #0
 801c5b8:	d002      	beq.n	801c5c0 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x54>
        return (unsigned int)value_.intValue_;
 801c5ba:	687b      	ldr	r3, [r7, #4]
 801c5bc:	699b      	ldr	r3, [r3, #24]
 801c5be:	e01a      	b.n	801c5f6 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x8a>
    else
    {
        STRCMP_EQUAL("unsigned int", type_.asCharString());
 801c5c0:	f7f6 fb8e 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 801c5c4:	4604      	mov	r4, r0
 801c5c6:	6823      	ldr	r3, [r4, #0]
 801c5c8:	3324      	adds	r3, #36	; 0x24
 801c5ca:	681d      	ldr	r5, [r3, #0]
 801c5cc:	687b      	ldr	r3, [r7, #4]
 801c5ce:	330c      	adds	r3, #12
 801c5d0:	4618      	mov	r0, r3
 801c5d2:	f7ef fb2d 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 801c5d6:	4606      	mov	r6, r0
 801c5d8:	f7f6 fb92 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c5dc:	4603      	mov	r3, r0
 801c5de:	9302      	str	r3, [sp, #8]
 801c5e0:	23d2      	movs	r3, #210	; 0xd2
 801c5e2:	9301      	str	r3, [sp, #4]
 801c5e4:	4b07      	ldr	r3, [pc, #28]	; (801c604 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x98>)
 801c5e6:	9300      	str	r3, [sp, #0]
 801c5e8:	2300      	movs	r3, #0
 801c5ea:	4632      	mov	r2, r6
 801c5ec:	4906      	ldr	r1, [pc, #24]	; (801c608 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x9c>)
 801c5ee:	4620      	mov	r0, r4
 801c5f0:	47a8      	blx	r5
        return value_.unsignedIntValue_;
 801c5f2:	687b      	ldr	r3, [r7, #4]
 801c5f4:	699b      	ldr	r3, [r3, #24]
    }
}
 801c5f6:	4618      	mov	r0, r3
 801c5f8:	3714      	adds	r7, #20
 801c5fa:	46bd      	mov	sp, r7
 801c5fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c5fe:	bf00      	nop
 801c600:	08024d10 	.word	0x08024d10
 801c604:	08024d4c 	.word	0x08024d4c
 801c608:	08024d1c 	.word	0x08024d1c

0801c60c <_ZNK14MockNamedValue11getIntValueEv>:

int MockNamedValue::getIntValue() const
{
 801c60c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c60e:	b087      	sub	sp, #28
 801c610:	af04      	add	r7, sp, #16
 801c612:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("int", type_.asCharString());
 801c614:	f7f6 fb64 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 801c618:	4604      	mov	r4, r0
 801c61a:	6823      	ldr	r3, [r4, #0]
 801c61c:	3324      	adds	r3, #36	; 0x24
 801c61e:	681d      	ldr	r5, [r3, #0]
 801c620:	687b      	ldr	r3, [r7, #4]
 801c622:	330c      	adds	r3, #12
 801c624:	4618      	mov	r0, r3
 801c626:	f7ef fb03 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 801c62a:	4606      	mov	r6, r0
 801c62c:	f7f6 fb68 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c630:	4603      	mov	r3, r0
 801c632:	9302      	str	r3, [sp, #8]
 801c634:	23d9      	movs	r3, #217	; 0xd9
 801c636:	9301      	str	r3, [sp, #4]
 801c638:	4b06      	ldr	r3, [pc, #24]	; (801c654 <_ZNK14MockNamedValue11getIntValueEv+0x48>)
 801c63a:	9300      	str	r3, [sp, #0]
 801c63c:	2300      	movs	r3, #0
 801c63e:	4632      	mov	r2, r6
 801c640:	4905      	ldr	r1, [pc, #20]	; (801c658 <_ZNK14MockNamedValue11getIntValueEv+0x4c>)
 801c642:	4620      	mov	r0, r4
 801c644:	47a8      	blx	r5
    return value_.intValue_;
 801c646:	687b      	ldr	r3, [r7, #4]
 801c648:	699b      	ldr	r3, [r3, #24]
}
 801c64a:	4618      	mov	r0, r3
 801c64c:	370c      	adds	r7, #12
 801c64e:	46bd      	mov	sp, r7
 801c650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c652:	bf00      	nop
 801c654:	08024d4c 	.word	0x08024d4c
 801c658:	08024d10 	.word	0x08024d10

0801c65c <_ZNK14MockNamedValue15getLongIntValueEv>:

long int MockNamedValue::getLongIntValue() const
{
 801c65c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c65e:	b08b      	sub	sp, #44	; 0x2c
 801c660:	af04      	add	r7, sp, #16
 801c662:	6078      	str	r0, [r7, #4]
    if(type_ == "int")
 801c664:	687b      	ldr	r3, [r7, #4]
 801c666:	f103 040c 	add.w	r4, r3, #12
 801c66a:	f107 0308 	add.w	r3, r7, #8
 801c66e:	4928      	ldr	r1, [pc, #160]	; (801c710 <_ZNK14MockNamedValue15getLongIntValueEv+0xb4>)
 801c670:	4618      	mov	r0, r3
 801c672:	f7ee ff52 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801c676:	f107 0308 	add.w	r3, r7, #8
 801c67a:	4619      	mov	r1, r3
 801c67c:	4620      	mov	r0, r4
 801c67e:	f7ef fb10 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801c682:	4603      	mov	r3, r0
 801c684:	461c      	mov	r4, r3
 801c686:	f107 0308 	add.w	r3, r7, #8
 801c68a:	4618      	mov	r0, r3
 801c68c:	f7ef fafd 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801c690:	2c00      	cmp	r4, #0
 801c692:	d002      	beq.n	801c69a <_ZNK14MockNamedValue15getLongIntValueEv+0x3e>
        return value_.intValue_;
 801c694:	687b      	ldr	r3, [r7, #4]
 801c696:	699b      	ldr	r3, [r3, #24]
 801c698:	e035      	b.n	801c706 <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else if(type_ == "unsigned int")
 801c69a:	687b      	ldr	r3, [r7, #4]
 801c69c:	f103 040c 	add.w	r4, r3, #12
 801c6a0:	f107 0310 	add.w	r3, r7, #16
 801c6a4:	491b      	ldr	r1, [pc, #108]	; (801c714 <_ZNK14MockNamedValue15getLongIntValueEv+0xb8>)
 801c6a6:	4618      	mov	r0, r3
 801c6a8:	f7ee ff37 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801c6ac:	f107 0310 	add.w	r3, r7, #16
 801c6b0:	4619      	mov	r1, r3
 801c6b2:	4620      	mov	r0, r4
 801c6b4:	f7ef faf5 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801c6b8:	4603      	mov	r3, r0
 801c6ba:	461c      	mov	r4, r3
 801c6bc:	f107 0310 	add.w	r3, r7, #16
 801c6c0:	4618      	mov	r0, r3
 801c6c2:	f7ef fae2 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801c6c6:	2c00      	cmp	r4, #0
 801c6c8:	d002      	beq.n	801c6d0 <_ZNK14MockNamedValue15getLongIntValueEv+0x74>
        return (long int)value_.unsignedIntValue_;
 801c6ca:	687b      	ldr	r3, [r7, #4]
 801c6cc:	699b      	ldr	r3, [r3, #24]
 801c6ce:	e01a      	b.n	801c706 <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else
    {
        STRCMP_EQUAL("long int", type_.asCharString());
 801c6d0:	f7f6 fb06 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 801c6d4:	4604      	mov	r4, r0
 801c6d6:	6823      	ldr	r3, [r4, #0]
 801c6d8:	3324      	adds	r3, #36	; 0x24
 801c6da:	681d      	ldr	r5, [r3, #0]
 801c6dc:	687b      	ldr	r3, [r7, #4]
 801c6de:	330c      	adds	r3, #12
 801c6e0:	4618      	mov	r0, r3
 801c6e2:	f7ef faa5 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 801c6e6:	4606      	mov	r6, r0
 801c6e8:	f7f6 fb0a 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c6ec:	4603      	mov	r3, r0
 801c6ee:	9302      	str	r3, [sp, #8]
 801c6f0:	23e5      	movs	r3, #229	; 0xe5
 801c6f2:	9301      	str	r3, [sp, #4]
 801c6f4:	4b08      	ldr	r3, [pc, #32]	; (801c718 <_ZNK14MockNamedValue15getLongIntValueEv+0xbc>)
 801c6f6:	9300      	str	r3, [sp, #0]
 801c6f8:	2300      	movs	r3, #0
 801c6fa:	4632      	mov	r2, r6
 801c6fc:	4907      	ldr	r1, [pc, #28]	; (801c71c <_ZNK14MockNamedValue15getLongIntValueEv+0xc0>)
 801c6fe:	4620      	mov	r0, r4
 801c700:	47a8      	blx	r5
        return value_.longIntValue_;
 801c702:	687b      	ldr	r3, [r7, #4]
 801c704:	699b      	ldr	r3, [r3, #24]
    }
}
 801c706:	4618      	mov	r0, r3
 801c708:	371c      	adds	r7, #28
 801c70a:	46bd      	mov	sp, r7
 801c70c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c70e:	bf00      	nop
 801c710:	08024d10 	.word	0x08024d10
 801c714:	08024d1c 	.word	0x08024d1c
 801c718:	08024d4c 	.word	0x08024d4c
 801c71c:	08024d2c 	.word	0x08024d2c

0801c720 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>:

unsigned long int MockNamedValue::getUnsignedLongIntValue() const
{
 801c720:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c722:	b08d      	sub	sp, #52	; 0x34
 801c724:	af04      	add	r7, sp, #16
 801c726:	6078      	str	r0, [r7, #4]
    if(type_ == "unsigned int")
 801c728:	687b      	ldr	r3, [r7, #4]
 801c72a:	f103 040c 	add.w	r4, r3, #12
 801c72e:	f107 0308 	add.w	r3, r7, #8
 801c732:	4940      	ldr	r1, [pc, #256]	; (801c834 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x114>)
 801c734:	4618      	mov	r0, r3
 801c736:	f7ee fef0 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801c73a:	f107 0308 	add.w	r3, r7, #8
 801c73e:	4619      	mov	r1, r3
 801c740:	4620      	mov	r0, r4
 801c742:	f7ef faae 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801c746:	4603      	mov	r3, r0
 801c748:	461c      	mov	r4, r3
 801c74a:	f107 0308 	add.w	r3, r7, #8
 801c74e:	4618      	mov	r0, r3
 801c750:	f7ef fa9b 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801c754:	2c00      	cmp	r4, #0
 801c756:	d002      	beq.n	801c75e <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x3e>
        return value_.unsignedIntValue_;
 801c758:	687b      	ldr	r3, [r7, #4]
 801c75a:	699b      	ldr	r3, [r3, #24]
 801c75c:	e066      	b.n	801c82c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "int" && value_.intValue_ >= 0)
 801c75e:	687b      	ldr	r3, [r7, #4]
 801c760:	f103 040c 	add.w	r4, r3, #12
 801c764:	f107 0310 	add.w	r3, r7, #16
 801c768:	4933      	ldr	r1, [pc, #204]	; (801c838 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x118>)
 801c76a:	4618      	mov	r0, r3
 801c76c:	f7ee fed5 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801c770:	2501      	movs	r5, #1
 801c772:	f107 0310 	add.w	r3, r7, #16
 801c776:	4619      	mov	r1, r3
 801c778:	4620      	mov	r0, r4
 801c77a:	f7ef fa92 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801c77e:	4603      	mov	r3, r0
 801c780:	2b00      	cmp	r3, #0
 801c782:	d005      	beq.n	801c790 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801c784:	687b      	ldr	r3, [r7, #4]
 801c786:	699b      	ldr	r3, [r3, #24]
 801c788:	2b00      	cmp	r3, #0
 801c78a:	db01      	blt.n	801c790 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801c78c:	2401      	movs	r4, #1
 801c78e:	e000      	b.n	801c792 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x72>
 801c790:	2400      	movs	r4, #0
 801c792:	2d00      	cmp	r5, #0
 801c794:	d004      	beq.n	801c7a0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x80>
 801c796:	f107 0310 	add.w	r3, r7, #16
 801c79a:	4618      	mov	r0, r3
 801c79c:	f7ef fa75 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801c7a0:	2c00      	cmp	r4, #0
 801c7a2:	d002      	beq.n	801c7aa <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x8a>
        return (unsigned long int)value_.intValue_;
 801c7a4:	687b      	ldr	r3, [r7, #4]
 801c7a6:	699b      	ldr	r3, [r3, #24]
 801c7a8:	e040      	b.n	801c82c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "long int" && value_.longIntValue_ >= 0)
 801c7aa:	687b      	ldr	r3, [r7, #4]
 801c7ac:	f103 040c 	add.w	r4, r3, #12
 801c7b0:	f107 0318 	add.w	r3, r7, #24
 801c7b4:	4921      	ldr	r1, [pc, #132]	; (801c83c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x11c>)
 801c7b6:	4618      	mov	r0, r3
 801c7b8:	f7ee feaf 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801c7bc:	2501      	movs	r5, #1
 801c7be:	f107 0318 	add.w	r3, r7, #24
 801c7c2:	4619      	mov	r1, r3
 801c7c4:	4620      	mov	r0, r4
 801c7c6:	f7ef fa6c 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801c7ca:	4603      	mov	r3, r0
 801c7cc:	2b00      	cmp	r3, #0
 801c7ce:	d005      	beq.n	801c7dc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801c7d0:	687b      	ldr	r3, [r7, #4]
 801c7d2:	699b      	ldr	r3, [r3, #24]
 801c7d4:	2b00      	cmp	r3, #0
 801c7d6:	db01      	blt.n	801c7dc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801c7d8:	2401      	movs	r4, #1
 801c7da:	e000      	b.n	801c7de <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbe>
 801c7dc:	2400      	movs	r4, #0
 801c7de:	2d00      	cmp	r5, #0
 801c7e0:	d004      	beq.n	801c7ec <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xcc>
 801c7e2:	f107 0318 	add.w	r3, r7, #24
 801c7e6:	4618      	mov	r0, r3
 801c7e8:	f7ef fa4f 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801c7ec:	2c00      	cmp	r4, #0
 801c7ee:	d002      	beq.n	801c7f6 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xd6>
        return (unsigned long int)value_.longIntValue_;
 801c7f0:	687b      	ldr	r3, [r7, #4]
 801c7f2:	699b      	ldr	r3, [r3, #24]
 801c7f4:	e01a      	b.n	801c82c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else
    {
        STRCMP_EQUAL("unsigned long int", type_.asCharString());
 801c7f6:	f7f6 fa73 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 801c7fa:	4604      	mov	r4, r0
 801c7fc:	6823      	ldr	r3, [r4, #0]
 801c7fe:	3324      	adds	r3, #36	; 0x24
 801c800:	681d      	ldr	r5, [r3, #0]
 801c802:	687b      	ldr	r3, [r7, #4]
 801c804:	330c      	adds	r3, #12
 801c806:	4618      	mov	r0, r3
 801c808:	f7ef fa12 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 801c80c:	4606      	mov	r6, r0
 801c80e:	f7f6 fa77 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c812:	4603      	mov	r3, r0
 801c814:	9302      	str	r3, [sp, #8]
 801c816:	23f4      	movs	r3, #244	; 0xf4
 801c818:	9301      	str	r3, [sp, #4]
 801c81a:	4b09      	ldr	r3, [pc, #36]	; (801c840 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x120>)
 801c81c:	9300      	str	r3, [sp, #0]
 801c81e:	2300      	movs	r3, #0
 801c820:	4632      	mov	r2, r6
 801c822:	4908      	ldr	r1, [pc, #32]	; (801c844 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x124>)
 801c824:	4620      	mov	r0, r4
 801c826:	47a8      	blx	r5
        return value_.unsignedLongIntValue_;
 801c828:	687b      	ldr	r3, [r7, #4]
 801c82a:	699b      	ldr	r3, [r3, #24]
    }
}
 801c82c:	4618      	mov	r0, r3
 801c82e:	3724      	adds	r7, #36	; 0x24
 801c830:	46bd      	mov	sp, r7
 801c832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c834:	08024d1c 	.word	0x08024d1c
 801c838:	08024d10 	.word	0x08024d10
 801c83c:	08024d2c 	.word	0x08024d2c
 801c840:	08024d4c 	.word	0x08024d4c
 801c844:	08024d38 	.word	0x08024d38

0801c848 <_ZNK14MockNamedValue19getLongLongIntValueEv>:
}

#else

cpputest_longlong MockNamedValue::getLongLongIntValue() const
{
 801c848:	b5b0      	push	{r4, r5, r7, lr}
 801c84a:	b084      	sub	sp, #16
 801c84c:	af02      	add	r7, sp, #8
 801c84e:	6078      	str	r0, [r7, #4]
 801c850:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801c852:	f7f6 fa45 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 801c856:	4604      	mov	r4, r0
 801c858:	6823      	ldr	r3, [r4, #0]
 801c85a:	3368      	adds	r3, #104	; 0x68
 801c85c:	681d      	ldr	r5, [r3, #0]
 801c85e:	f7f6 fa4f 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c862:	4603      	mov	r3, r0
 801c864:	9300      	str	r3, [sp, #0]
 801c866:	f240 1323 	movw	r3, #291	; 0x123
 801c86a:	4a06      	ldr	r2, [pc, #24]	; (801c884 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x3c>)
 801c86c:	4906      	ldr	r1, [pc, #24]	; (801c888 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x40>)
 801c86e:	4620      	mov	r0, r4
 801c870:	47a8      	blx	r5
    return cpputest_longlong(0);
 801c872:	2100      	movs	r1, #0
 801c874:	6878      	ldr	r0, [r7, #4]
 801c876:	f7ec fe87 	bl	8009588 <_ZN17cpputest_longlongC1Ei>
}
 801c87a:	6878      	ldr	r0, [r7, #4]
 801c87c:	3708      	adds	r7, #8
 801c87e:	46bd      	mov	sp, r7
 801c880:	bdb0      	pop	{r4, r5, r7, pc}
 801c882:	bf00      	nop
 801c884:	08024d4c 	.word	0x08024d4c
 801c888:	08024d68 	.word	0x08024d68

0801c88c <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockNamedValue::getUnsignedLongLongIntValue() const
{
 801c88c:	b5b0      	push	{r4, r5, r7, lr}
 801c88e:	b084      	sub	sp, #16
 801c890:	af02      	add	r7, sp, #8
 801c892:	6078      	str	r0, [r7, #4]
 801c894:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801c896:	f7f6 fa23 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 801c89a:	4604      	mov	r4, r0
 801c89c:	6823      	ldr	r3, [r4, #0]
 801c89e:	3368      	adds	r3, #104	; 0x68
 801c8a0:	681d      	ldr	r5, [r3, #0]
 801c8a2:	f7f6 fa2d 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c8a6:	4603      	mov	r3, r0
 801c8a8:	9300      	str	r3, [sp, #0]
 801c8aa:	f240 1329 	movw	r3, #297	; 0x129
 801c8ae:	4a06      	ldr	r2, [pc, #24]	; (801c8c8 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x3c>)
 801c8b0:	4906      	ldr	r1, [pc, #24]	; (801c8cc <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x40>)
 801c8b2:	4620      	mov	r0, r4
 801c8b4:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801c8b6:	2100      	movs	r1, #0
 801c8b8:	6878      	ldr	r0, [r7, #4]
 801c8ba:	f7ec fe71 	bl	80095a0 <_ZN18cpputest_ulonglongC1Ei>
}
 801c8be:	6878      	ldr	r0, [r7, #4]
 801c8c0:	3708      	adds	r7, #8
 801c8c2:	46bd      	mov	sp, r7
 801c8c4:	bdb0      	pop	{r4, r5, r7, pc}
 801c8c6:	bf00      	nop
 801c8c8:	08024d4c 	.word	0x08024d4c
 801c8cc:	08024d88 	.word	0x08024d88

0801c8d0 <_ZNK14MockNamedValue14getDoubleValueEv>:

#endif

double MockNamedValue::getDoubleValue() const
{
 801c8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c8d2:	b087      	sub	sp, #28
 801c8d4:	af04      	add	r7, sp, #16
 801c8d6:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801c8d8:	f7f6 fa02 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 801c8dc:	4604      	mov	r4, r0
 801c8de:	6823      	ldr	r3, [r4, #0]
 801c8e0:	3324      	adds	r3, #36	; 0x24
 801c8e2:	681d      	ldr	r5, [r3, #0]
 801c8e4:	687b      	ldr	r3, [r7, #4]
 801c8e6:	330c      	adds	r3, #12
 801c8e8:	4618      	mov	r0, r3
 801c8ea:	f7ef f9a1 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 801c8ee:	4606      	mov	r6, r0
 801c8f0:	f7f6 fa06 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c8f4:	4603      	mov	r3, r0
 801c8f6:	9302      	str	r3, [sp, #8]
 801c8f8:	f240 1331 	movw	r3, #305	; 0x131
 801c8fc:	9301      	str	r3, [sp, #4]
 801c8fe:	4b09      	ldr	r3, [pc, #36]	; (801c924 <_ZNK14MockNamedValue14getDoubleValueEv+0x54>)
 801c900:	9300      	str	r3, [sp, #0]
 801c902:	2300      	movs	r3, #0
 801c904:	4632      	mov	r2, r6
 801c906:	4908      	ldr	r1, [pc, #32]	; (801c928 <_ZNK14MockNamedValue14getDoubleValueEv+0x58>)
 801c908:	4620      	mov	r0, r4
 801c90a:	47a8      	blx	r5
    return value_.doubleValue_.value;
 801c90c:	687b      	ldr	r3, [r7, #4]
 801c90e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801c912:	ec43 2b17 	vmov	d7, r2, r3
}
 801c916:	eeb0 0a47 	vmov.f32	s0, s14
 801c91a:	eef0 0a67 	vmov.f32	s1, s15
 801c91e:	370c      	adds	r7, #12
 801c920:	46bd      	mov	sp, r7
 801c922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c924:	08024d4c 	.word	0x08024d4c
 801c928:	08024db4 	.word	0x08024db4

0801c92c <_ZNK14MockNamedValue18getDoubleToleranceEv>:

double MockNamedValue::getDoubleTolerance() const
{
 801c92c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c92e:	b087      	sub	sp, #28
 801c930:	af04      	add	r7, sp, #16
 801c932:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801c934:	f7f6 f9d4 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 801c938:	4604      	mov	r4, r0
 801c93a:	6823      	ldr	r3, [r4, #0]
 801c93c:	3324      	adds	r3, #36	; 0x24
 801c93e:	681d      	ldr	r5, [r3, #0]
 801c940:	687b      	ldr	r3, [r7, #4]
 801c942:	330c      	adds	r3, #12
 801c944:	4618      	mov	r0, r3
 801c946:	f7ef f973 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 801c94a:	4606      	mov	r6, r0
 801c94c:	f7f6 f9d8 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c950:	4603      	mov	r3, r0
 801c952:	9302      	str	r3, [sp, #8]
 801c954:	f240 1337 	movw	r3, #311	; 0x137
 801c958:	9301      	str	r3, [sp, #4]
 801c95a:	4b09      	ldr	r3, [pc, #36]	; (801c980 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x54>)
 801c95c:	9300      	str	r3, [sp, #0]
 801c95e:	2300      	movs	r3, #0
 801c960:	4632      	mov	r2, r6
 801c962:	4908      	ldr	r1, [pc, #32]	; (801c984 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x58>)
 801c964:	4620      	mov	r0, r4
 801c966:	47a8      	blx	r5
    return value_.doubleValue_.tolerance;
 801c968:	687b      	ldr	r3, [r7, #4]
 801c96a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801c96e:	ec43 2b17 	vmov	d7, r2, r3
}
 801c972:	eeb0 0a47 	vmov.f32	s0, s14
 801c976:	eef0 0a67 	vmov.f32	s1, s15
 801c97a:	370c      	adds	r7, #12
 801c97c:	46bd      	mov	sp, r7
 801c97e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c980:	08024d4c 	.word	0x08024d4c
 801c984:	08024db4 	.word	0x08024db4

0801c988 <_ZNK14MockNamedValue14getStringValueEv>:

const char* MockNamedValue::getStringValue() const
{
 801c988:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c98a:	b087      	sub	sp, #28
 801c98c:	af04      	add	r7, sp, #16
 801c98e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const char*", type_.asCharString());
 801c990:	f7f6 f9a6 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 801c994:	4604      	mov	r4, r0
 801c996:	6823      	ldr	r3, [r4, #0]
 801c998:	3324      	adds	r3, #36	; 0x24
 801c99a:	681d      	ldr	r5, [r3, #0]
 801c99c:	687b      	ldr	r3, [r7, #4]
 801c99e:	330c      	adds	r3, #12
 801c9a0:	4618      	mov	r0, r3
 801c9a2:	f7ef f945 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 801c9a6:	4606      	mov	r6, r0
 801c9a8:	f7f6 f9aa 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c9ac:	4603      	mov	r3, r0
 801c9ae:	9302      	str	r3, [sp, #8]
 801c9b0:	f240 133d 	movw	r3, #317	; 0x13d
 801c9b4:	9301      	str	r3, [sp, #4]
 801c9b6:	4b06      	ldr	r3, [pc, #24]	; (801c9d0 <_ZNK14MockNamedValue14getStringValueEv+0x48>)
 801c9b8:	9300      	str	r3, [sp, #0]
 801c9ba:	2300      	movs	r3, #0
 801c9bc:	4632      	mov	r2, r6
 801c9be:	4905      	ldr	r1, [pc, #20]	; (801c9d4 <_ZNK14MockNamedValue14getStringValueEv+0x4c>)
 801c9c0:	4620      	mov	r0, r4
 801c9c2:	47a8      	blx	r5
    return value_.stringValue_;
 801c9c4:	687b      	ldr	r3, [r7, #4]
 801c9c6:	699b      	ldr	r3, [r3, #24]
}
 801c9c8:	4618      	mov	r0, r3
 801c9ca:	370c      	adds	r7, #12
 801c9cc:	46bd      	mov	sp, r7
 801c9ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c9d0:	08024d4c 	.word	0x08024d4c
 801c9d4:	08024ddc 	.word	0x08024ddc

0801c9d8 <_ZNK14MockNamedValue15getPointerValueEv>:

void* MockNamedValue::getPointerValue() const
{
 801c9d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c9da:	b087      	sub	sp, #28
 801c9dc:	af04      	add	r7, sp, #16
 801c9de:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void*", type_.asCharString());
 801c9e0:	f7f6 f97e 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 801c9e4:	4604      	mov	r4, r0
 801c9e6:	6823      	ldr	r3, [r4, #0]
 801c9e8:	3324      	adds	r3, #36	; 0x24
 801c9ea:	681d      	ldr	r5, [r3, #0]
 801c9ec:	687b      	ldr	r3, [r7, #4]
 801c9ee:	330c      	adds	r3, #12
 801c9f0:	4618      	mov	r0, r3
 801c9f2:	f7ef f91d 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 801c9f6:	4606      	mov	r6, r0
 801c9f8:	f7f6 f982 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c9fc:	4603      	mov	r3, r0
 801c9fe:	9302      	str	r3, [sp, #8]
 801ca00:	f240 1343 	movw	r3, #323	; 0x143
 801ca04:	9301      	str	r3, [sp, #4]
 801ca06:	4b06      	ldr	r3, [pc, #24]	; (801ca20 <_ZNK14MockNamedValue15getPointerValueEv+0x48>)
 801ca08:	9300      	str	r3, [sp, #0]
 801ca0a:	2300      	movs	r3, #0
 801ca0c:	4632      	mov	r2, r6
 801ca0e:	4905      	ldr	r1, [pc, #20]	; (801ca24 <_ZNK14MockNamedValue15getPointerValueEv+0x4c>)
 801ca10:	4620      	mov	r0, r4
 801ca12:	47a8      	blx	r5
    return value_.pointerValue_;
 801ca14:	687b      	ldr	r3, [r7, #4]
 801ca16:	699b      	ldr	r3, [r3, #24]
}
 801ca18:	4618      	mov	r0, r3
 801ca1a:	370c      	adds	r7, #12
 801ca1c:	46bd      	mov	sp, r7
 801ca1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ca20:	08024d4c 	.word	0x08024d4c
 801ca24:	08024dbc 	.word	0x08024dbc

0801ca28 <_ZNK14MockNamedValue20getConstPointerValueEv>:

const void* MockNamedValue::getConstPointerValue() const
{
 801ca28:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca2a:	b087      	sub	sp, #28
 801ca2c:	af04      	add	r7, sp, #16
 801ca2e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const void*", type_.asCharString());
 801ca30:	f7f6 f956 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 801ca34:	4604      	mov	r4, r0
 801ca36:	6823      	ldr	r3, [r4, #0]
 801ca38:	3324      	adds	r3, #36	; 0x24
 801ca3a:	681d      	ldr	r5, [r3, #0]
 801ca3c:	687b      	ldr	r3, [r7, #4]
 801ca3e:	330c      	adds	r3, #12
 801ca40:	4618      	mov	r0, r3
 801ca42:	f7ef f8f5 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 801ca46:	4606      	mov	r6, r0
 801ca48:	f7f6 f95a 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ca4c:	4603      	mov	r3, r0
 801ca4e:	9302      	str	r3, [sp, #8]
 801ca50:	f240 1349 	movw	r3, #329	; 0x149
 801ca54:	9301      	str	r3, [sp, #4]
 801ca56:	4b06      	ldr	r3, [pc, #24]	; (801ca70 <_ZNK14MockNamedValue20getConstPointerValueEv+0x48>)
 801ca58:	9300      	str	r3, [sp, #0]
 801ca5a:	2300      	movs	r3, #0
 801ca5c:	4632      	mov	r2, r6
 801ca5e:	4905      	ldr	r1, [pc, #20]	; (801ca74 <_ZNK14MockNamedValue20getConstPointerValueEv+0x4c>)
 801ca60:	4620      	mov	r0, r4
 801ca62:	47a8      	blx	r5
    return value_.pointerValue_;
 801ca64:	687b      	ldr	r3, [r7, #4]
 801ca66:	699b      	ldr	r3, [r3, #24]
}
 801ca68:	4618      	mov	r0, r3
 801ca6a:	370c      	adds	r7, #12
 801ca6c:	46bd      	mov	sp, r7
 801ca6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ca70:	08024d4c 	.word	0x08024d4c
 801ca74:	08024dc4 	.word	0x08024dc4

0801ca78 <_ZNK14MockNamedValue23getFunctionPointerValueEv>:

void (*MockNamedValue::getFunctionPointerValue() const)()
{
 801ca78:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca7a:	b087      	sub	sp, #28
 801ca7c:	af04      	add	r7, sp, #16
 801ca7e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void (*)()", type_.asCharString());
 801ca80:	f7f6 f92e 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 801ca84:	4604      	mov	r4, r0
 801ca86:	6823      	ldr	r3, [r4, #0]
 801ca88:	3324      	adds	r3, #36	; 0x24
 801ca8a:	681d      	ldr	r5, [r3, #0]
 801ca8c:	687b      	ldr	r3, [r7, #4]
 801ca8e:	330c      	adds	r3, #12
 801ca90:	4618      	mov	r0, r3
 801ca92:	f7ef f8cd 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 801ca96:	4606      	mov	r6, r0
 801ca98:	f7f6 f932 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ca9c:	4603      	mov	r3, r0
 801ca9e:	9302      	str	r3, [sp, #8]
 801caa0:	f240 134f 	movw	r3, #335	; 0x14f
 801caa4:	9301      	str	r3, [sp, #4]
 801caa6:	4b06      	ldr	r3, [pc, #24]	; (801cac0 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x48>)
 801caa8:	9300      	str	r3, [sp, #0]
 801caaa:	2300      	movs	r3, #0
 801caac:	4632      	mov	r2, r6
 801caae:	4905      	ldr	r1, [pc, #20]	; (801cac4 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x4c>)
 801cab0:	4620      	mov	r0, r4
 801cab2:	47a8      	blx	r5
    return value_.functionPointerValue_;
 801cab4:	687b      	ldr	r3, [r7, #4]
 801cab6:	699b      	ldr	r3, [r3, #24]
}
 801cab8:	4618      	mov	r0, r3
 801caba:	370c      	adds	r7, #12
 801cabc:	46bd      	mov	sp, r7
 801cabe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cac0:	08024d4c 	.word	0x08024d4c
 801cac4:	08024dd0 	.word	0x08024dd0

0801cac8 <_ZNK14MockNamedValue15getMemoryBufferEv>:

const unsigned char* MockNamedValue::getMemoryBuffer() const
{
 801cac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801caca:	b087      	sub	sp, #28
 801cacc:	af04      	add	r7, sp, #16
 801cace:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const unsigned char*", type_.asCharString());
 801cad0:	f7f6 f906 	bl	8012ce0 <_ZN10UtestShell10getCurrentEv>
 801cad4:	4604      	mov	r4, r0
 801cad6:	6823      	ldr	r3, [r4, #0]
 801cad8:	3324      	adds	r3, #36	; 0x24
 801cada:	681d      	ldr	r5, [r3, #0]
 801cadc:	687b      	ldr	r3, [r7, #4]
 801cade:	330c      	adds	r3, #12
 801cae0:	4618      	mov	r0, r3
 801cae2:	f7ef f8a5 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 801cae6:	4606      	mov	r6, r0
 801cae8:	f7f6 f90a 	bl	8012d00 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801caec:	4603      	mov	r3, r0
 801caee:	9302      	str	r3, [sp, #8]
 801caf0:	f240 1355 	movw	r3, #341	; 0x155
 801caf4:	9301      	str	r3, [sp, #4]
 801caf6:	4b06      	ldr	r3, [pc, #24]	; (801cb10 <_ZNK14MockNamedValue15getMemoryBufferEv+0x48>)
 801caf8:	9300      	str	r3, [sp, #0]
 801cafa:	2300      	movs	r3, #0
 801cafc:	4632      	mov	r2, r6
 801cafe:	4905      	ldr	r1, [pc, #20]	; (801cb14 <_ZNK14MockNamedValue15getMemoryBufferEv+0x4c>)
 801cb00:	4620      	mov	r0, r4
 801cb02:	47a8      	blx	r5
    return value_.memoryBufferValue_;
 801cb04:	687b      	ldr	r3, [r7, #4]
 801cb06:	699b      	ldr	r3, [r3, #24]
}
 801cb08:	4618      	mov	r0, r3
 801cb0a:	370c      	adds	r7, #12
 801cb0c:	46bd      	mov	sp, r7
 801cb0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cb10:	08024d4c 	.word	0x08024d4c
 801cb14:	08024de8 	.word	0x08024de8

0801cb18 <_ZNK14MockNamedValue21getConstObjectPointerEv>:

const void* MockNamedValue::getConstObjectPointer() const
{
 801cb18:	b480      	push	{r7}
 801cb1a:	b083      	sub	sp, #12
 801cb1c:	af00      	add	r7, sp, #0
 801cb1e:	6078      	str	r0, [r7, #4]
    return value_.constObjectPointerValue_;
 801cb20:	687b      	ldr	r3, [r7, #4]
 801cb22:	699b      	ldr	r3, [r3, #24]
}
 801cb24:	4618      	mov	r0, r3
 801cb26:	370c      	adds	r7, #12
 801cb28:	46bd      	mov	sp, r7
 801cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb2e:	4770      	bx	lr

0801cb30 <_ZNK14MockNamedValue16getObjectPointerEv>:

void* MockNamedValue::getObjectPointer() const
{
 801cb30:	b480      	push	{r7}
 801cb32:	b083      	sub	sp, #12
 801cb34:	af00      	add	r7, sp, #0
 801cb36:	6078      	str	r0, [r7, #4]
    return value_.objectPointerValue_;
 801cb38:	687b      	ldr	r3, [r7, #4]
 801cb3a:	699b      	ldr	r3, [r3, #24]
}
 801cb3c:	4618      	mov	r0, r3
 801cb3e:	370c      	adds	r7, #12
 801cb40:	46bd      	mov	sp, r7
 801cb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb46:	4770      	bx	lr

0801cb48 <_ZNK14MockNamedValue7getSizeEv>:

size_t MockNamedValue::getSize() const
{
 801cb48:	b480      	push	{r7}
 801cb4a:	b083      	sub	sp, #12
 801cb4c:	af00      	add	r7, sp, #0
 801cb4e:	6078      	str	r0, [r7, #4]
    return size_;
 801cb50:	687b      	ldr	r3, [r7, #4]
 801cb52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801cb54:	4618      	mov	r0, r3
 801cb56:	370c      	adds	r7, #12
 801cb58:	46bd      	mov	sp, r7
 801cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb5e:	4770      	bx	lr

0801cb60 <_ZNK14MockNamedValue13getComparatorEv>:

MockNamedValueComparator* MockNamedValue::getComparator() const
{
 801cb60:	b480      	push	{r7}
 801cb62:	b083      	sub	sp, #12
 801cb64:	af00      	add	r7, sp, #0
 801cb66:	6078      	str	r0, [r7, #4]
    return comparator_;
 801cb68:	687b      	ldr	r3, [r7, #4]
 801cb6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 801cb6c:	4618      	mov	r0, r3
 801cb6e:	370c      	adds	r7, #12
 801cb70:	46bd      	mov	sp, r7
 801cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb76:	4770      	bx	lr

0801cb78 <_ZNK14MockNamedValue9getCopierEv>:

MockNamedValueCopier* MockNamedValue::getCopier() const
{
 801cb78:	b480      	push	{r7}
 801cb7a:	b083      	sub	sp, #12
 801cb7c:	af00      	add	r7, sp, #0
 801cb7e:	6078      	str	r0, [r7, #4]
    return copier_;
 801cb80:	687b      	ldr	r3, [r7, #4]
 801cb82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 801cb84:	4618      	mov	r0, r3
 801cb86:	370c      	adds	r7, #12
 801cb88:	46bd      	mov	sp, r7
 801cb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb8e:	4770      	bx	lr

0801cb90 <_ZNK14MockNamedValue6equalsERKS_>:

bool MockNamedValue::equals(const MockNamedValue& p) const
{
 801cb90:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb92:	b0cd      	sub	sp, #308	; 0x134
 801cb94:	af00      	add	r7, sp, #0
 801cb96:	1d3b      	adds	r3, r7, #4
 801cb98:	6018      	str	r0, [r3, #0]
 801cb9a:	463b      	mov	r3, r7
 801cb9c:	6019      	str	r1, [r3, #0]
    if((type_ == "long int") && (p.type_ == "int"))
 801cb9e:	2500      	movs	r5, #0
 801cba0:	1d3b      	adds	r3, r7, #4
 801cba2:	681b      	ldr	r3, [r3, #0]
 801cba4:	f103 040c 	add.w	r4, r3, #12
 801cba8:	f107 0308 	add.w	r3, r7, #8
 801cbac:	49bb      	ldr	r1, [pc, #748]	; (801ce9c <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801cbae:	4618      	mov	r0, r3
 801cbb0:	f7ee fcb3 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801cbb4:	2601      	movs	r6, #1
 801cbb6:	f107 0308 	add.w	r3, r7, #8
 801cbba:	4619      	mov	r1, r3
 801cbbc:	4620      	mov	r0, r4
 801cbbe:	f7ef f870 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801cbc2:	4603      	mov	r3, r0
 801cbc4:	2b00      	cmp	r3, #0
 801cbc6:	d015      	beq.n	801cbf4 <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801cbc8:	463b      	mov	r3, r7
 801cbca:	681b      	ldr	r3, [r3, #0]
 801cbcc:	f103 040c 	add.w	r4, r3, #12
 801cbd0:	f107 0310 	add.w	r3, r7, #16
 801cbd4:	49b2      	ldr	r1, [pc, #712]	; (801cea0 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801cbd6:	4618      	mov	r0, r3
 801cbd8:	f7ee fc9f 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801cbdc:	2501      	movs	r5, #1
 801cbde:	f107 0310 	add.w	r3, r7, #16
 801cbe2:	4619      	mov	r1, r3
 801cbe4:	4620      	mov	r0, r4
 801cbe6:	f7ef f85c 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801cbea:	4603      	mov	r3, r0
 801cbec:	2b00      	cmp	r3, #0
 801cbee:	d001      	beq.n	801cbf4 <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801cbf0:	2401      	movs	r4, #1
 801cbf2:	e000      	b.n	801cbf6 <_ZNK14MockNamedValue6equalsERKS_+0x66>
 801cbf4:	2400      	movs	r4, #0
 801cbf6:	2d00      	cmp	r5, #0
 801cbf8:	d004      	beq.n	801cc04 <_ZNK14MockNamedValue6equalsERKS_+0x74>
 801cbfa:	f107 0310 	add.w	r3, r7, #16
 801cbfe:	4618      	mov	r0, r3
 801cc00:	f7ef f843 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801cc04:	2e00      	cmp	r6, #0
 801cc06:	d004      	beq.n	801cc12 <_ZNK14MockNamedValue6equalsERKS_+0x82>
 801cc08:	f107 0308 	add.w	r3, r7, #8
 801cc0c:	4618      	mov	r0, r3
 801cc0e:	f7ef f83c 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801cc12:	2c00      	cmp	r4, #0
 801cc14:	d00c      	beq.n	801cc30 <_ZNK14MockNamedValue6equalsERKS_+0xa0>
        return value_.longIntValue_ == p.value_.intValue_;
 801cc16:	1d3b      	adds	r3, r7, #4
 801cc18:	681b      	ldr	r3, [r3, #0]
 801cc1a:	699a      	ldr	r2, [r3, #24]
 801cc1c:	463b      	mov	r3, r7
 801cc1e:	681b      	ldr	r3, [r3, #0]
 801cc20:	699b      	ldr	r3, [r3, #24]
 801cc22:	429a      	cmp	r2, r3
 801cc24:	bf0c      	ite	eq
 801cc26:	2301      	moveq	r3, #1
 801cc28:	2300      	movne	r3, #0
 801cc2a:	b2dc      	uxtb	r4, r3
 801cc2c:	f000 bd60 	b.w	801d6f0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "long int"))
 801cc30:	2500      	movs	r5, #0
 801cc32:	1d3b      	adds	r3, r7, #4
 801cc34:	681b      	ldr	r3, [r3, #0]
 801cc36:	f103 040c 	add.w	r4, r3, #12
 801cc3a:	f107 0318 	add.w	r3, r7, #24
 801cc3e:	4998      	ldr	r1, [pc, #608]	; (801cea0 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801cc40:	4618      	mov	r0, r3
 801cc42:	f7ee fc6a 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801cc46:	2601      	movs	r6, #1
 801cc48:	f107 0318 	add.w	r3, r7, #24
 801cc4c:	4619      	mov	r1, r3
 801cc4e:	4620      	mov	r0, r4
 801cc50:	f7ef f827 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801cc54:	4603      	mov	r3, r0
 801cc56:	2b00      	cmp	r3, #0
 801cc58:	d015      	beq.n	801cc86 <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801cc5a:	463b      	mov	r3, r7
 801cc5c:	681b      	ldr	r3, [r3, #0]
 801cc5e:	f103 040c 	add.w	r4, r3, #12
 801cc62:	f107 0320 	add.w	r3, r7, #32
 801cc66:	498d      	ldr	r1, [pc, #564]	; (801ce9c <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801cc68:	4618      	mov	r0, r3
 801cc6a:	f7ee fc56 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801cc6e:	2501      	movs	r5, #1
 801cc70:	f107 0320 	add.w	r3, r7, #32
 801cc74:	4619      	mov	r1, r3
 801cc76:	4620      	mov	r0, r4
 801cc78:	f7ef f813 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801cc7c:	4603      	mov	r3, r0
 801cc7e:	2b00      	cmp	r3, #0
 801cc80:	d001      	beq.n	801cc86 <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801cc82:	2401      	movs	r4, #1
 801cc84:	e000      	b.n	801cc88 <_ZNK14MockNamedValue6equalsERKS_+0xf8>
 801cc86:	2400      	movs	r4, #0
 801cc88:	2d00      	cmp	r5, #0
 801cc8a:	d004      	beq.n	801cc96 <_ZNK14MockNamedValue6equalsERKS_+0x106>
 801cc8c:	f107 0320 	add.w	r3, r7, #32
 801cc90:	4618      	mov	r0, r3
 801cc92:	f7ee fffa 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801cc96:	2e00      	cmp	r6, #0
 801cc98:	d004      	beq.n	801cca4 <_ZNK14MockNamedValue6equalsERKS_+0x114>
 801cc9a:	f107 0318 	add.w	r3, r7, #24
 801cc9e:	4618      	mov	r0, r3
 801cca0:	f7ee fff3 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801cca4:	2c00      	cmp	r4, #0
 801cca6:	d00c      	beq.n	801ccc2 <_ZNK14MockNamedValue6equalsERKS_+0x132>
        return value_.intValue_ == p.value_.longIntValue_;
 801cca8:	1d3b      	adds	r3, r7, #4
 801ccaa:	681b      	ldr	r3, [r3, #0]
 801ccac:	699a      	ldr	r2, [r3, #24]
 801ccae:	463b      	mov	r3, r7
 801ccb0:	681b      	ldr	r3, [r3, #0]
 801ccb2:	699b      	ldr	r3, [r3, #24]
 801ccb4:	429a      	cmp	r2, r3
 801ccb6:	bf0c      	ite	eq
 801ccb8:	2301      	moveq	r3, #1
 801ccba:	2300      	movne	r3, #0
 801ccbc:	b2dc      	uxtb	r4, r3
 801ccbe:	f000 bd17 	b.w	801d6f0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "int"))
 801ccc2:	2500      	movs	r5, #0
 801ccc4:	1d3b      	adds	r3, r7, #4
 801ccc6:	681b      	ldr	r3, [r3, #0]
 801ccc8:	f103 040c 	add.w	r4, r3, #12
 801cccc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ccd0:	4974      	ldr	r1, [pc, #464]	; (801cea4 <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801ccd2:	4618      	mov	r0, r3
 801ccd4:	f7ee fc21 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801ccd8:	2601      	movs	r6, #1
 801ccda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ccde:	4619      	mov	r1, r3
 801cce0:	4620      	mov	r0, r4
 801cce2:	f7ee ffde 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801cce6:	4603      	mov	r3, r0
 801cce8:	2b00      	cmp	r3, #0
 801ccea:	d015      	beq.n	801cd18 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801ccec:	463b      	mov	r3, r7
 801ccee:	681b      	ldr	r3, [r3, #0]
 801ccf0:	f103 040c 	add.w	r4, r3, #12
 801ccf4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ccf8:	4969      	ldr	r1, [pc, #420]	; (801cea0 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801ccfa:	4618      	mov	r0, r3
 801ccfc:	f7ee fc0d 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801cd00:	2501      	movs	r5, #1
 801cd02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cd06:	4619      	mov	r1, r3
 801cd08:	4620      	mov	r0, r4
 801cd0a:	f7ee ffca 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801cd0e:	4603      	mov	r3, r0
 801cd10:	2b00      	cmp	r3, #0
 801cd12:	d001      	beq.n	801cd18 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801cd14:	2401      	movs	r4, #1
 801cd16:	e000      	b.n	801cd1a <_ZNK14MockNamedValue6equalsERKS_+0x18a>
 801cd18:	2400      	movs	r4, #0
 801cd1a:	2d00      	cmp	r5, #0
 801cd1c:	d004      	beq.n	801cd28 <_ZNK14MockNamedValue6equalsERKS_+0x198>
 801cd1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cd22:	4618      	mov	r0, r3
 801cd24:	f7ee ffb1 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801cd28:	2e00      	cmp	r6, #0
 801cd2a:	d004      	beq.n	801cd36 <_ZNK14MockNamedValue6equalsERKS_+0x1a6>
 801cd2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cd30:	4618      	mov	r0, r3
 801cd32:	f7ee ffaa 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801cd36:	2c00      	cmp	r4, #0
 801cd38:	d012      	beq.n	801cd60 <_ZNK14MockNamedValue6equalsERKS_+0x1d0>
        return (p.value_.intValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned int)p.value_.intValue_);
 801cd3a:	463b      	mov	r3, r7
 801cd3c:	681b      	ldr	r3, [r3, #0]
 801cd3e:	699b      	ldr	r3, [r3, #24]
 801cd40:	2b00      	cmp	r3, #0
 801cd42:	db0a      	blt.n	801cd5a <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801cd44:	1d3b      	adds	r3, r7, #4
 801cd46:	681b      	ldr	r3, [r3, #0]
 801cd48:	699b      	ldr	r3, [r3, #24]
 801cd4a:	463a      	mov	r2, r7
 801cd4c:	6812      	ldr	r2, [r2, #0]
 801cd4e:	6992      	ldr	r2, [r2, #24]
 801cd50:	4293      	cmp	r3, r2
 801cd52:	d102      	bne.n	801cd5a <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801cd54:	2401      	movs	r4, #1
 801cd56:	f000 bccb 	b.w	801d6f0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801cd5a:	2400      	movs	r4, #0
 801cd5c:	f000 bcc8 	b.w	801d6f0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "unsigned int"))
 801cd60:	2500      	movs	r5, #0
 801cd62:	1d3b      	adds	r3, r7, #4
 801cd64:	681b      	ldr	r3, [r3, #0]
 801cd66:	f103 040c 	add.w	r4, r3, #12
 801cd6a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801cd6e:	494c      	ldr	r1, [pc, #304]	; (801cea0 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801cd70:	4618      	mov	r0, r3
 801cd72:	f7ee fbd2 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801cd76:	2601      	movs	r6, #1
 801cd78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801cd7c:	4619      	mov	r1, r3
 801cd7e:	4620      	mov	r0, r4
 801cd80:	f7ee ff8f 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801cd84:	4603      	mov	r3, r0
 801cd86:	2b00      	cmp	r3, #0
 801cd88:	d015      	beq.n	801cdb6 <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801cd8a:	463b      	mov	r3, r7
 801cd8c:	681b      	ldr	r3, [r3, #0]
 801cd8e:	f103 040c 	add.w	r4, r3, #12
 801cd92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801cd96:	4943      	ldr	r1, [pc, #268]	; (801cea4 <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801cd98:	4618      	mov	r0, r3
 801cd9a:	f7ee fbbe 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801cd9e:	2501      	movs	r5, #1
 801cda0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801cda4:	4619      	mov	r1, r3
 801cda6:	4620      	mov	r0, r4
 801cda8:	f7ee ff7b 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801cdac:	4603      	mov	r3, r0
 801cdae:	2b00      	cmp	r3, #0
 801cdb0:	d001      	beq.n	801cdb6 <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801cdb2:	2401      	movs	r4, #1
 801cdb4:	e000      	b.n	801cdb8 <_ZNK14MockNamedValue6equalsERKS_+0x228>
 801cdb6:	2400      	movs	r4, #0
 801cdb8:	2d00      	cmp	r5, #0
 801cdba:	d004      	beq.n	801cdc6 <_ZNK14MockNamedValue6equalsERKS_+0x236>
 801cdbc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801cdc0:	4618      	mov	r0, r3
 801cdc2:	f7ee ff62 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801cdc6:	2e00      	cmp	r6, #0
 801cdc8:	d004      	beq.n	801cdd4 <_ZNK14MockNamedValue6equalsERKS_+0x244>
 801cdca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801cdce:	4618      	mov	r0, r3
 801cdd0:	f7ee ff5b 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801cdd4:	2c00      	cmp	r4, #0
 801cdd6:	d012      	beq.n	801cdfe <_ZNK14MockNamedValue6equalsERKS_+0x26e>
        return (value_.intValue_ >= 0) && ((unsigned int)value_.intValue_ == p.value_.unsignedIntValue_);
 801cdd8:	1d3b      	adds	r3, r7, #4
 801cdda:	681b      	ldr	r3, [r3, #0]
 801cddc:	699b      	ldr	r3, [r3, #24]
 801cdde:	2b00      	cmp	r3, #0
 801cde0:	db0a      	blt.n	801cdf8 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801cde2:	1d3b      	adds	r3, r7, #4
 801cde4:	681b      	ldr	r3, [r3, #0]
 801cde6:	699b      	ldr	r3, [r3, #24]
 801cde8:	463a      	mov	r2, r7
 801cdea:	6812      	ldr	r2, [r2, #0]
 801cdec:	6992      	ldr	r2, [r2, #24]
 801cdee:	4293      	cmp	r3, r2
 801cdf0:	d102      	bne.n	801cdf8 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801cdf2:	2401      	movs	r4, #1
 801cdf4:	f000 bc7c 	b.w	801d6f0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801cdf8:	2400      	movs	r4, #0
 801cdfa:	f000 bc79 	b.w	801d6f0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "int"))
 801cdfe:	2500      	movs	r5, #0
 801ce00:	1d3b      	adds	r3, r7, #4
 801ce02:	681b      	ldr	r3, [r3, #0]
 801ce04:	f103 040c 	add.w	r4, r3, #12
 801ce08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801ce0c:	4926      	ldr	r1, [pc, #152]	; (801cea8 <_ZNK14MockNamedValue6equalsERKS_+0x318>)
 801ce0e:	4618      	mov	r0, r3
 801ce10:	f7ee fb83 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801ce14:	2601      	movs	r6, #1
 801ce16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801ce1a:	4619      	mov	r1, r3
 801ce1c:	4620      	mov	r0, r4
 801ce1e:	f7ee ff40 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801ce22:	4603      	mov	r3, r0
 801ce24:	2b00      	cmp	r3, #0
 801ce26:	d015      	beq.n	801ce54 <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801ce28:	463b      	mov	r3, r7
 801ce2a:	681b      	ldr	r3, [r3, #0]
 801ce2c:	f103 040c 	add.w	r4, r3, #12
 801ce30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801ce34:	491a      	ldr	r1, [pc, #104]	; (801cea0 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801ce36:	4618      	mov	r0, r3
 801ce38:	f7ee fb6f 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801ce3c:	2501      	movs	r5, #1
 801ce3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801ce42:	4619      	mov	r1, r3
 801ce44:	4620      	mov	r0, r4
 801ce46:	f7ee ff2c 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801ce4a:	4603      	mov	r3, r0
 801ce4c:	2b00      	cmp	r3, #0
 801ce4e:	d001      	beq.n	801ce54 <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801ce50:	2401      	movs	r4, #1
 801ce52:	e000      	b.n	801ce56 <_ZNK14MockNamedValue6equalsERKS_+0x2c6>
 801ce54:	2400      	movs	r4, #0
 801ce56:	2d00      	cmp	r5, #0
 801ce58:	d004      	beq.n	801ce64 <_ZNK14MockNamedValue6equalsERKS_+0x2d4>
 801ce5a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801ce5e:	4618      	mov	r0, r3
 801ce60:	f7ee ff13 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801ce64:	2e00      	cmp	r6, #0
 801ce66:	d004      	beq.n	801ce72 <_ZNK14MockNamedValue6equalsERKS_+0x2e2>
 801ce68:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801ce6c:	4618      	mov	r0, r3
 801ce6e:	f7ee ff0c 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801ce72:	2c00      	cmp	r4, #0
 801ce74:	d01a      	beq.n	801ceac <_ZNK14MockNamedValue6equalsERKS_+0x31c>
        return (p.value_.intValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long)p.value_.intValue_);
 801ce76:	463b      	mov	r3, r7
 801ce78:	681b      	ldr	r3, [r3, #0]
 801ce7a:	699b      	ldr	r3, [r3, #24]
 801ce7c:	2b00      	cmp	r3, #0
 801ce7e:	db0a      	blt.n	801ce96 <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801ce80:	1d3b      	adds	r3, r7, #4
 801ce82:	681b      	ldr	r3, [r3, #0]
 801ce84:	699b      	ldr	r3, [r3, #24]
 801ce86:	463a      	mov	r2, r7
 801ce88:	6812      	ldr	r2, [r2, #0]
 801ce8a:	6992      	ldr	r2, [r2, #24]
 801ce8c:	4293      	cmp	r3, r2
 801ce8e:	d102      	bne.n	801ce96 <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801ce90:	2401      	movs	r4, #1
 801ce92:	f000 bc2d 	b.w	801d6f0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801ce96:	2400      	movs	r4, #0
 801ce98:	f000 bc2a 	b.w	801d6f0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801ce9c:	08024d2c 	.word	0x08024d2c
 801cea0:	08024d10 	.word	0x08024d10
 801cea4:	08024d1c 	.word	0x08024d1c
 801cea8:	08024d38 	.word	0x08024d38
    else if((type_ == "int") && (p.type_ == "unsigned long int"))
 801ceac:	2500      	movs	r5, #0
 801ceae:	1d3b      	adds	r3, r7, #4
 801ceb0:	681b      	ldr	r3, [r3, #0]
 801ceb2:	f103 040c 	add.w	r4, r3, #12
 801ceb6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801ceba:	49b8      	ldr	r1, [pc, #736]	; (801d19c <_ZNK14MockNamedValue6equalsERKS_+0x60c>)
 801cebc:	4618      	mov	r0, r3
 801cebe:	f7ee fb2c 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801cec2:	2601      	movs	r6, #1
 801cec4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801cec8:	4619      	mov	r1, r3
 801ceca:	4620      	mov	r0, r4
 801cecc:	f7ee fee9 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801ced0:	4603      	mov	r3, r0
 801ced2:	2b00      	cmp	r3, #0
 801ced4:	d015      	beq.n	801cf02 <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801ced6:	463b      	mov	r3, r7
 801ced8:	681b      	ldr	r3, [r3, #0]
 801ceda:	f103 040c 	add.w	r4, r3, #12
 801cede:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801cee2:	49af      	ldr	r1, [pc, #700]	; (801d1a0 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801cee4:	4618      	mov	r0, r3
 801cee6:	f7ee fb18 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801ceea:	2501      	movs	r5, #1
 801ceec:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801cef0:	4619      	mov	r1, r3
 801cef2:	4620      	mov	r0, r4
 801cef4:	f7ee fed5 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801cef8:	4603      	mov	r3, r0
 801cefa:	2b00      	cmp	r3, #0
 801cefc:	d001      	beq.n	801cf02 <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801cefe:	2401      	movs	r4, #1
 801cf00:	e000      	b.n	801cf04 <_ZNK14MockNamedValue6equalsERKS_+0x374>
 801cf02:	2400      	movs	r4, #0
 801cf04:	2d00      	cmp	r5, #0
 801cf06:	d004      	beq.n	801cf12 <_ZNK14MockNamedValue6equalsERKS_+0x382>
 801cf08:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801cf0c:	4618      	mov	r0, r3
 801cf0e:	f7ee febc 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801cf12:	2e00      	cmp	r6, #0
 801cf14:	d004      	beq.n	801cf20 <_ZNK14MockNamedValue6equalsERKS_+0x390>
 801cf16:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801cf1a:	4618      	mov	r0, r3
 801cf1c:	f7ee feb5 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801cf20:	2c00      	cmp	r4, #0
 801cf22:	d010      	beq.n	801cf46 <_ZNK14MockNamedValue6equalsERKS_+0x3b6>
        return (value_.intValue_ >= 0) && ((unsigned long)value_.intValue_ == p.value_.unsignedLongIntValue_);
 801cf24:	1d3b      	adds	r3, r7, #4
 801cf26:	681b      	ldr	r3, [r3, #0]
 801cf28:	699b      	ldr	r3, [r3, #24]
 801cf2a:	2b00      	cmp	r3, #0
 801cf2c:	db09      	blt.n	801cf42 <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801cf2e:	1d3b      	adds	r3, r7, #4
 801cf30:	681b      	ldr	r3, [r3, #0]
 801cf32:	699b      	ldr	r3, [r3, #24]
 801cf34:	463a      	mov	r2, r7
 801cf36:	6812      	ldr	r2, [r2, #0]
 801cf38:	6992      	ldr	r2, [r2, #24]
 801cf3a:	4293      	cmp	r3, r2
 801cf3c:	d101      	bne.n	801cf42 <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801cf3e:	2401      	movs	r4, #1
 801cf40:	e3d6      	b.n	801d6f0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801cf42:	2400      	movs	r4, #0
 801cf44:	e3d4      	b.n	801d6f0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "long int"))
 801cf46:	2500      	movs	r5, #0
 801cf48:	1d3b      	adds	r3, r7, #4
 801cf4a:	681b      	ldr	r3, [r3, #0]
 801cf4c:	f103 040c 	add.w	r4, r3, #12
 801cf50:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801cf54:	4993      	ldr	r1, [pc, #588]	; (801d1a4 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801cf56:	4618      	mov	r0, r3
 801cf58:	f7ee fadf 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801cf5c:	2601      	movs	r6, #1
 801cf5e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801cf62:	4619      	mov	r1, r3
 801cf64:	4620      	mov	r0, r4
 801cf66:	f7ee fe9c 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801cf6a:	4603      	mov	r3, r0
 801cf6c:	2b00      	cmp	r3, #0
 801cf6e:	d015      	beq.n	801cf9c <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801cf70:	463b      	mov	r3, r7
 801cf72:	681b      	ldr	r3, [r3, #0]
 801cf74:	f103 040c 	add.w	r4, r3, #12
 801cf78:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801cf7c:	498a      	ldr	r1, [pc, #552]	; (801d1a8 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801cf7e:	4618      	mov	r0, r3
 801cf80:	f7ee facb 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801cf84:	2501      	movs	r5, #1
 801cf86:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801cf8a:	4619      	mov	r1, r3
 801cf8c:	4620      	mov	r0, r4
 801cf8e:	f7ee fe88 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801cf92:	4603      	mov	r3, r0
 801cf94:	2b00      	cmp	r3, #0
 801cf96:	d001      	beq.n	801cf9c <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801cf98:	2401      	movs	r4, #1
 801cf9a:	e000      	b.n	801cf9e <_ZNK14MockNamedValue6equalsERKS_+0x40e>
 801cf9c:	2400      	movs	r4, #0
 801cf9e:	2d00      	cmp	r5, #0
 801cfa0:	d004      	beq.n	801cfac <_ZNK14MockNamedValue6equalsERKS_+0x41c>
 801cfa2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801cfa6:	4618      	mov	r0, r3
 801cfa8:	f7ee fe6f 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801cfac:	2e00      	cmp	r6, #0
 801cfae:	d004      	beq.n	801cfba <_ZNK14MockNamedValue6equalsERKS_+0x42a>
 801cfb0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801cfb4:	4618      	mov	r0, r3
 801cfb6:	f7ee fe68 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801cfba:	2c00      	cmp	r4, #0
 801cfbc:	d010      	beq.n	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0x450>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned long)p.value_.longIntValue_);
 801cfbe:	463b      	mov	r3, r7
 801cfc0:	681b      	ldr	r3, [r3, #0]
 801cfc2:	699b      	ldr	r3, [r3, #24]
 801cfc4:	2b00      	cmp	r3, #0
 801cfc6:	db09      	blt.n	801cfdc <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801cfc8:	1d3b      	adds	r3, r7, #4
 801cfca:	681b      	ldr	r3, [r3, #0]
 801cfcc:	699b      	ldr	r3, [r3, #24]
 801cfce:	463a      	mov	r2, r7
 801cfd0:	6812      	ldr	r2, [r2, #0]
 801cfd2:	6992      	ldr	r2, [r2, #24]
 801cfd4:	4293      	cmp	r3, r2
 801cfd6:	d101      	bne.n	801cfdc <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801cfd8:	2401      	movs	r4, #1
 801cfda:	e389      	b.n	801d6f0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801cfdc:	2400      	movs	r4, #0
 801cfde:	e387      	b.n	801d6f0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "long int") && (p.type_ == "unsigned int"))
 801cfe0:	2500      	movs	r5, #0
 801cfe2:	1d3b      	adds	r3, r7, #4
 801cfe4:	681b      	ldr	r3, [r3, #0]
 801cfe6:	f103 040c 	add.w	r4, r3, #12
 801cfea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801cfee:	496e      	ldr	r1, [pc, #440]	; (801d1a8 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801cff0:	4618      	mov	r0, r3
 801cff2:	f7ee fa92 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801cff6:	2601      	movs	r6, #1
 801cff8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801cffc:	4619      	mov	r1, r3
 801cffe:	4620      	mov	r0, r4
 801d000:	f7ee fe4f 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801d004:	4603      	mov	r3, r0
 801d006:	2b00      	cmp	r3, #0
 801d008:	d015      	beq.n	801d036 <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801d00a:	463b      	mov	r3, r7
 801d00c:	681b      	ldr	r3, [r3, #0]
 801d00e:	f103 040c 	add.w	r4, r3, #12
 801d012:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801d016:	4963      	ldr	r1, [pc, #396]	; (801d1a4 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801d018:	4618      	mov	r0, r3
 801d01a:	f7ee fa7e 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801d01e:	2501      	movs	r5, #1
 801d020:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801d024:	4619      	mov	r1, r3
 801d026:	4620      	mov	r0, r4
 801d028:	f7ee fe3b 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801d02c:	4603      	mov	r3, r0
 801d02e:	2b00      	cmp	r3, #0
 801d030:	d001      	beq.n	801d036 <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801d032:	2401      	movs	r4, #1
 801d034:	e000      	b.n	801d038 <_ZNK14MockNamedValue6equalsERKS_+0x4a8>
 801d036:	2400      	movs	r4, #0
 801d038:	2d00      	cmp	r5, #0
 801d03a:	d004      	beq.n	801d046 <_ZNK14MockNamedValue6equalsERKS_+0x4b6>
 801d03c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801d040:	4618      	mov	r0, r3
 801d042:	f7ee fe22 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d046:	2e00      	cmp	r6, #0
 801d048:	d004      	beq.n	801d054 <_ZNK14MockNamedValue6equalsERKS_+0x4c4>
 801d04a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801d04e:	4618      	mov	r0, r3
 801d050:	f7ee fe1b 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d054:	2c00      	cmp	r4, #0
 801d056:	d010      	beq.n	801d07a <_ZNK14MockNamedValue6equalsERKS_+0x4ea>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedIntValue_);
 801d058:	1d3b      	adds	r3, r7, #4
 801d05a:	681b      	ldr	r3, [r3, #0]
 801d05c:	699b      	ldr	r3, [r3, #24]
 801d05e:	2b00      	cmp	r3, #0
 801d060:	db09      	blt.n	801d076 <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801d062:	1d3b      	adds	r3, r7, #4
 801d064:	681b      	ldr	r3, [r3, #0]
 801d066:	699b      	ldr	r3, [r3, #24]
 801d068:	463a      	mov	r2, r7
 801d06a:	6812      	ldr	r2, [r2, #0]
 801d06c:	6992      	ldr	r2, [r2, #24]
 801d06e:	4293      	cmp	r3, r2
 801d070:	d101      	bne.n	801d076 <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801d072:	2401      	movs	r4, #1
 801d074:	e33c      	b.n	801d6f0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801d076:	2400      	movs	r4, #0
 801d078:	e33a      	b.n	801d6f0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "unsigned long int"))
 801d07a:	2500      	movs	r5, #0
 801d07c:	1d3b      	adds	r3, r7, #4
 801d07e:	681b      	ldr	r3, [r3, #0]
 801d080:	f103 040c 	add.w	r4, r3, #12
 801d084:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801d088:	4946      	ldr	r1, [pc, #280]	; (801d1a4 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801d08a:	4618      	mov	r0, r3
 801d08c:	f7ee fa45 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801d090:	2601      	movs	r6, #1
 801d092:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801d096:	4619      	mov	r1, r3
 801d098:	4620      	mov	r0, r4
 801d09a:	f7ee fe02 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801d09e:	4603      	mov	r3, r0
 801d0a0:	2b00      	cmp	r3, #0
 801d0a2:	d015      	beq.n	801d0d0 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801d0a4:	463b      	mov	r3, r7
 801d0a6:	681b      	ldr	r3, [r3, #0]
 801d0a8:	f103 040c 	add.w	r4, r3, #12
 801d0ac:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801d0b0:	493b      	ldr	r1, [pc, #236]	; (801d1a0 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801d0b2:	4618      	mov	r0, r3
 801d0b4:	f7ee fa31 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801d0b8:	2501      	movs	r5, #1
 801d0ba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801d0be:	4619      	mov	r1, r3
 801d0c0:	4620      	mov	r0, r4
 801d0c2:	f7ee fdee 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801d0c6:	4603      	mov	r3, r0
 801d0c8:	2b00      	cmp	r3, #0
 801d0ca:	d001      	beq.n	801d0d0 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801d0cc:	2401      	movs	r4, #1
 801d0ce:	e000      	b.n	801d0d2 <_ZNK14MockNamedValue6equalsERKS_+0x542>
 801d0d0:	2400      	movs	r4, #0
 801d0d2:	2d00      	cmp	r5, #0
 801d0d4:	d004      	beq.n	801d0e0 <_ZNK14MockNamedValue6equalsERKS_+0x550>
 801d0d6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801d0da:	4618      	mov	r0, r3
 801d0dc:	f7ee fdd5 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d0e0:	2e00      	cmp	r6, #0
 801d0e2:	d004      	beq.n	801d0ee <_ZNK14MockNamedValue6equalsERKS_+0x55e>
 801d0e4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801d0e8:	4618      	mov	r0, r3
 801d0ea:	f7ee fdce 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d0ee:	2c00      	cmp	r4, #0
 801d0f0:	d00b      	beq.n	801d10a <_ZNK14MockNamedValue6equalsERKS_+0x57a>
        return value_.unsignedIntValue_ == p.value_.unsignedLongIntValue_;
 801d0f2:	1d3b      	adds	r3, r7, #4
 801d0f4:	681b      	ldr	r3, [r3, #0]
 801d0f6:	699a      	ldr	r2, [r3, #24]
 801d0f8:	463b      	mov	r3, r7
 801d0fa:	681b      	ldr	r3, [r3, #0]
 801d0fc:	699b      	ldr	r3, [r3, #24]
 801d0fe:	429a      	cmp	r2, r3
 801d100:	bf0c      	ite	eq
 801d102:	2301      	moveq	r3, #1
 801d104:	2300      	movne	r3, #0
 801d106:	b2dc      	uxtb	r4, r3
 801d108:	e2f2      	b.n	801d6f0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "unsigned int"))
 801d10a:	2500      	movs	r5, #0
 801d10c:	1d3b      	adds	r3, r7, #4
 801d10e:	681b      	ldr	r3, [r3, #0]
 801d110:	f103 040c 	add.w	r4, r3, #12
 801d114:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801d118:	4921      	ldr	r1, [pc, #132]	; (801d1a0 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801d11a:	4618      	mov	r0, r3
 801d11c:	f7ee f9fd 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801d120:	2601      	movs	r6, #1
 801d122:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801d126:	4619      	mov	r1, r3
 801d128:	4620      	mov	r0, r4
 801d12a:	f7ee fdba 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801d12e:	4603      	mov	r3, r0
 801d130:	2b00      	cmp	r3, #0
 801d132:	d015      	beq.n	801d160 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801d134:	463b      	mov	r3, r7
 801d136:	681b      	ldr	r3, [r3, #0]
 801d138:	f103 040c 	add.w	r4, r3, #12
 801d13c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801d140:	4918      	ldr	r1, [pc, #96]	; (801d1a4 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801d142:	4618      	mov	r0, r3
 801d144:	f7ee f9e9 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801d148:	2501      	movs	r5, #1
 801d14a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801d14e:	4619      	mov	r1, r3
 801d150:	4620      	mov	r0, r4
 801d152:	f7ee fda6 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801d156:	4603      	mov	r3, r0
 801d158:	2b00      	cmp	r3, #0
 801d15a:	d001      	beq.n	801d160 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801d15c:	2401      	movs	r4, #1
 801d15e:	e000      	b.n	801d162 <_ZNK14MockNamedValue6equalsERKS_+0x5d2>
 801d160:	2400      	movs	r4, #0
 801d162:	2d00      	cmp	r5, #0
 801d164:	d004      	beq.n	801d170 <_ZNK14MockNamedValue6equalsERKS_+0x5e0>
 801d166:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801d16a:	4618      	mov	r0, r3
 801d16c:	f7ee fd8d 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d170:	2e00      	cmp	r6, #0
 801d172:	d004      	beq.n	801d17e <_ZNK14MockNamedValue6equalsERKS_+0x5ee>
 801d174:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801d178:	4618      	mov	r0, r3
 801d17a:	f7ee fd86 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d17e:	2c00      	cmp	r4, #0
 801d180:	d014      	beq.n	801d1ac <_ZNK14MockNamedValue6equalsERKS_+0x61c>
        return value_.unsignedLongIntValue_ == p.value_.unsignedIntValue_;
 801d182:	1d3b      	adds	r3, r7, #4
 801d184:	681b      	ldr	r3, [r3, #0]
 801d186:	699a      	ldr	r2, [r3, #24]
 801d188:	463b      	mov	r3, r7
 801d18a:	681b      	ldr	r3, [r3, #0]
 801d18c:	699b      	ldr	r3, [r3, #24]
 801d18e:	429a      	cmp	r2, r3
 801d190:	bf0c      	ite	eq
 801d192:	2301      	moveq	r3, #1
 801d194:	2300      	movne	r3, #0
 801d196:	b2dc      	uxtb	r4, r3
 801d198:	e2aa      	b.n	801d6f0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801d19a:	bf00      	nop
 801d19c:	08024d10 	.word	0x08024d10
 801d1a0:	08024d38 	.word	0x08024d38
 801d1a4:	08024d1c 	.word	0x08024d1c
 801d1a8:	08024d2c 	.word	0x08024d2c
    else if((type_ == "long int") && (p.type_ == "unsigned long int"))
 801d1ac:	2500      	movs	r5, #0
 801d1ae:	1d3b      	adds	r3, r7, #4
 801d1b0:	681b      	ldr	r3, [r3, #0]
 801d1b2:	f103 040c 	add.w	r4, r3, #12
 801d1b6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801d1ba:	49ae      	ldr	r1, [pc, #696]	; (801d474 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801d1bc:	4618      	mov	r0, r3
 801d1be:	f7ee f9ac 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801d1c2:	2601      	movs	r6, #1
 801d1c4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801d1c8:	4619      	mov	r1, r3
 801d1ca:	4620      	mov	r0, r4
 801d1cc:	f7ee fd69 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801d1d0:	4603      	mov	r3, r0
 801d1d2:	2b00      	cmp	r3, #0
 801d1d4:	d015      	beq.n	801d202 <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801d1d6:	463b      	mov	r3, r7
 801d1d8:	681b      	ldr	r3, [r3, #0]
 801d1da:	f103 040c 	add.w	r4, r3, #12
 801d1de:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d1e2:	49a5      	ldr	r1, [pc, #660]	; (801d478 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801d1e4:	4618      	mov	r0, r3
 801d1e6:	f7ee f998 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801d1ea:	2501      	movs	r5, #1
 801d1ec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d1f0:	4619      	mov	r1, r3
 801d1f2:	4620      	mov	r0, r4
 801d1f4:	f7ee fd55 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801d1f8:	4603      	mov	r3, r0
 801d1fa:	2b00      	cmp	r3, #0
 801d1fc:	d001      	beq.n	801d202 <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801d1fe:	2401      	movs	r4, #1
 801d200:	e000      	b.n	801d204 <_ZNK14MockNamedValue6equalsERKS_+0x674>
 801d202:	2400      	movs	r4, #0
 801d204:	2d00      	cmp	r5, #0
 801d206:	d004      	beq.n	801d212 <_ZNK14MockNamedValue6equalsERKS_+0x682>
 801d208:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d20c:	4618      	mov	r0, r3
 801d20e:	f7ee fd3c 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d212:	2e00      	cmp	r6, #0
 801d214:	d004      	beq.n	801d220 <_ZNK14MockNamedValue6equalsERKS_+0x690>
 801d216:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801d21a:	4618      	mov	r0, r3
 801d21c:	f7ee fd35 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d220:	2c00      	cmp	r4, #0
 801d222:	d010      	beq.n	801d246 <_ZNK14MockNamedValue6equalsERKS_+0x6b6>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedLongIntValue_);
 801d224:	1d3b      	adds	r3, r7, #4
 801d226:	681b      	ldr	r3, [r3, #0]
 801d228:	699b      	ldr	r3, [r3, #24]
 801d22a:	2b00      	cmp	r3, #0
 801d22c:	db09      	blt.n	801d242 <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801d22e:	1d3b      	adds	r3, r7, #4
 801d230:	681b      	ldr	r3, [r3, #0]
 801d232:	699b      	ldr	r3, [r3, #24]
 801d234:	463a      	mov	r2, r7
 801d236:	6812      	ldr	r2, [r2, #0]
 801d238:	6992      	ldr	r2, [r2, #24]
 801d23a:	4293      	cmp	r3, r2
 801d23c:	d101      	bne.n	801d242 <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801d23e:	2401      	movs	r4, #1
 801d240:	e256      	b.n	801d6f0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801d242:	2400      	movs	r4, #0
 801d244:	e254      	b.n	801d6f0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "long int"))
 801d246:	2500      	movs	r5, #0
 801d248:	1d3b      	adds	r3, r7, #4
 801d24a:	681b      	ldr	r3, [r3, #0]
 801d24c:	f103 040c 	add.w	r4, r3, #12
 801d250:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801d254:	4988      	ldr	r1, [pc, #544]	; (801d478 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801d256:	4618      	mov	r0, r3
 801d258:	f7ee f95f 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801d25c:	2601      	movs	r6, #1
 801d25e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801d262:	4619      	mov	r1, r3
 801d264:	4620      	mov	r0, r4
 801d266:	f7ee fd1c 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801d26a:	4603      	mov	r3, r0
 801d26c:	2b00      	cmp	r3, #0
 801d26e:	d015      	beq.n	801d29c <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801d270:	463b      	mov	r3, r7
 801d272:	681b      	ldr	r3, [r3, #0]
 801d274:	f103 040c 	add.w	r4, r3, #12
 801d278:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801d27c:	497d      	ldr	r1, [pc, #500]	; (801d474 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801d27e:	4618      	mov	r0, r3
 801d280:	f7ee f94b 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801d284:	2501      	movs	r5, #1
 801d286:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801d28a:	4619      	mov	r1, r3
 801d28c:	4620      	mov	r0, r4
 801d28e:	f7ee fd08 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801d292:	4603      	mov	r3, r0
 801d294:	2b00      	cmp	r3, #0
 801d296:	d001      	beq.n	801d29c <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801d298:	2401      	movs	r4, #1
 801d29a:	e000      	b.n	801d29e <_ZNK14MockNamedValue6equalsERKS_+0x70e>
 801d29c:	2400      	movs	r4, #0
 801d29e:	2d00      	cmp	r5, #0
 801d2a0:	d004      	beq.n	801d2ac <_ZNK14MockNamedValue6equalsERKS_+0x71c>
 801d2a2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801d2a6:	4618      	mov	r0, r3
 801d2a8:	f7ee fcef 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d2ac:	2e00      	cmp	r6, #0
 801d2ae:	d004      	beq.n	801d2ba <_ZNK14MockNamedValue6equalsERKS_+0x72a>
 801d2b0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801d2b4:	4618      	mov	r0, r3
 801d2b6:	f7ee fce8 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d2ba:	2c00      	cmp	r4, #0
 801d2bc:	d010      	beq.n	801d2e0 <_ZNK14MockNamedValue6equalsERKS_+0x750>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long) p.value_.longIntValue_);
 801d2be:	463b      	mov	r3, r7
 801d2c0:	681b      	ldr	r3, [r3, #0]
 801d2c2:	699b      	ldr	r3, [r3, #24]
 801d2c4:	2b00      	cmp	r3, #0
 801d2c6:	db09      	blt.n	801d2dc <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801d2c8:	1d3b      	adds	r3, r7, #4
 801d2ca:	681b      	ldr	r3, [r3, #0]
 801d2cc:	699b      	ldr	r3, [r3, #24]
 801d2ce:	463a      	mov	r2, r7
 801d2d0:	6812      	ldr	r2, [r2, #0]
 801d2d2:	6992      	ldr	r2, [r2, #24]
 801d2d4:	4293      	cmp	r3, r2
 801d2d6:	d101      	bne.n	801d2dc <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801d2d8:	2401      	movs	r4, #1
 801d2da:	e209      	b.n	801d6f0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801d2dc:	2400      	movs	r4, #0
 801d2de:	e207      	b.n	801d6f0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongIntValue_;
    else if ((type_ == "unsigned long int") && (p.type_ == "unsigned long long int"))
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif

    if (type_ != p.type_) return false;
 801d2e0:	1d3b      	adds	r3, r7, #4
 801d2e2:	681b      	ldr	r3, [r3, #0]
 801d2e4:	f103 020c 	add.w	r2, r3, #12
 801d2e8:	463b      	mov	r3, r7
 801d2ea:	681b      	ldr	r3, [r3, #0]
 801d2ec:	330c      	adds	r3, #12
 801d2ee:	4619      	mov	r1, r3
 801d2f0:	4610      	mov	r0, r2
 801d2f2:	f7ee fd1b 	bl	800bd2c <_ZneRK12SimpleStringS1_>
 801d2f6:	4603      	mov	r3, r0
 801d2f8:	2b00      	cmp	r3, #0
 801d2fa:	d001      	beq.n	801d300 <_ZNK14MockNamedValue6equalsERKS_+0x770>
 801d2fc:	2400      	movs	r4, #0
 801d2fe:	e1f7      	b.n	801d6f0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    if (type_ == "bool")
 801d300:	1d3b      	adds	r3, r7, #4
 801d302:	681b      	ldr	r3, [r3, #0]
 801d304:	f103 040c 	add.w	r4, r3, #12
 801d308:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801d30c:	495b      	ldr	r1, [pc, #364]	; (801d47c <_ZNK14MockNamedValue6equalsERKS_+0x8ec>)
 801d30e:	4618      	mov	r0, r3
 801d310:	f7ee f903 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801d314:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801d318:	4619      	mov	r1, r3
 801d31a:	4620      	mov	r0, r4
 801d31c:	f7ee fcc1 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801d320:	4603      	mov	r3, r0
 801d322:	461c      	mov	r4, r3
 801d324:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801d328:	4618      	mov	r0, r3
 801d32a:	f7ee fcae 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d32e:	2c00      	cmp	r4, #0
 801d330:	d00b      	beq.n	801d34a <_ZNK14MockNamedValue6equalsERKS_+0x7ba>
        return value_.boolValue_ == p.value_.boolValue_;
 801d332:	1d3b      	adds	r3, r7, #4
 801d334:	681b      	ldr	r3, [r3, #0]
 801d336:	7e1a      	ldrb	r2, [r3, #24]
 801d338:	463b      	mov	r3, r7
 801d33a:	681b      	ldr	r3, [r3, #0]
 801d33c:	7e1b      	ldrb	r3, [r3, #24]
 801d33e:	429a      	cmp	r2, r3
 801d340:	bf0c      	ite	eq
 801d342:	2301      	moveq	r3, #1
 801d344:	2300      	movne	r3, #0
 801d346:	b2dc      	uxtb	r4, r3
 801d348:	e1d2      	b.n	801d6f0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "int")
 801d34a:	1d3b      	adds	r3, r7, #4
 801d34c:	681b      	ldr	r3, [r3, #0]
 801d34e:	f103 040c 	add.w	r4, r3, #12
 801d352:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801d356:	494a      	ldr	r1, [pc, #296]	; (801d480 <_ZNK14MockNamedValue6equalsERKS_+0x8f0>)
 801d358:	4618      	mov	r0, r3
 801d35a:	f7ee f8de 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801d35e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801d362:	4619      	mov	r1, r3
 801d364:	4620      	mov	r0, r4
 801d366:	f7ee fc9c 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801d36a:	4603      	mov	r3, r0
 801d36c:	461c      	mov	r4, r3
 801d36e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801d372:	4618      	mov	r0, r3
 801d374:	f7ee fc89 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d378:	2c00      	cmp	r4, #0
 801d37a:	d00b      	beq.n	801d394 <_ZNK14MockNamedValue6equalsERKS_+0x804>
        return value_.intValue_ == p.value_.intValue_;
 801d37c:	1d3b      	adds	r3, r7, #4
 801d37e:	681b      	ldr	r3, [r3, #0]
 801d380:	699a      	ldr	r2, [r3, #24]
 801d382:	463b      	mov	r3, r7
 801d384:	681b      	ldr	r3, [r3, #0]
 801d386:	699b      	ldr	r3, [r3, #24]
 801d388:	429a      	cmp	r2, r3
 801d38a:	bf0c      	ite	eq
 801d38c:	2301      	moveq	r3, #1
 801d38e:	2300      	movne	r3, #0
 801d390:	b2dc      	uxtb	r4, r3
 801d392:	e1ad      	b.n	801d6f0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned int")
 801d394:	1d3b      	adds	r3, r7, #4
 801d396:	681b      	ldr	r3, [r3, #0]
 801d398:	f103 040c 	add.w	r4, r3, #12
 801d39c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801d3a0:	4938      	ldr	r1, [pc, #224]	; (801d484 <_ZNK14MockNamedValue6equalsERKS_+0x8f4>)
 801d3a2:	4618      	mov	r0, r3
 801d3a4:	f7ee f8b9 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801d3a8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801d3ac:	4619      	mov	r1, r3
 801d3ae:	4620      	mov	r0, r4
 801d3b0:	f7ee fc77 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801d3b4:	4603      	mov	r3, r0
 801d3b6:	461c      	mov	r4, r3
 801d3b8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801d3bc:	4618      	mov	r0, r3
 801d3be:	f7ee fc64 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d3c2:	2c00      	cmp	r4, #0
 801d3c4:	d00b      	beq.n	801d3de <_ZNK14MockNamedValue6equalsERKS_+0x84e>
        return value_.unsignedIntValue_ == p.value_.unsignedIntValue_;
 801d3c6:	1d3b      	adds	r3, r7, #4
 801d3c8:	681b      	ldr	r3, [r3, #0]
 801d3ca:	699a      	ldr	r2, [r3, #24]
 801d3cc:	463b      	mov	r3, r7
 801d3ce:	681b      	ldr	r3, [r3, #0]
 801d3d0:	699b      	ldr	r3, [r3, #24]
 801d3d2:	429a      	cmp	r2, r3
 801d3d4:	bf0c      	ite	eq
 801d3d6:	2301      	moveq	r3, #1
 801d3d8:	2300      	movne	r3, #0
 801d3da:	b2dc      	uxtb	r4, r3
 801d3dc:	e188      	b.n	801d6f0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "long int")
 801d3de:	1d3b      	adds	r3, r7, #4
 801d3e0:	681b      	ldr	r3, [r3, #0]
 801d3e2:	f103 040c 	add.w	r4, r3, #12
 801d3e6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801d3ea:	4922      	ldr	r1, [pc, #136]	; (801d474 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801d3ec:	4618      	mov	r0, r3
 801d3ee:	f7ee f894 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801d3f2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801d3f6:	4619      	mov	r1, r3
 801d3f8:	4620      	mov	r0, r4
 801d3fa:	f7ee fc52 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801d3fe:	4603      	mov	r3, r0
 801d400:	461c      	mov	r4, r3
 801d402:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801d406:	4618      	mov	r0, r3
 801d408:	f7ee fc3f 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d40c:	2c00      	cmp	r4, #0
 801d40e:	d00b      	beq.n	801d428 <_ZNK14MockNamedValue6equalsERKS_+0x898>
        return value_.longIntValue_ == p.value_.longIntValue_;
 801d410:	1d3b      	adds	r3, r7, #4
 801d412:	681b      	ldr	r3, [r3, #0]
 801d414:	699a      	ldr	r2, [r3, #24]
 801d416:	463b      	mov	r3, r7
 801d418:	681b      	ldr	r3, [r3, #0]
 801d41a:	699b      	ldr	r3, [r3, #24]
 801d41c:	429a      	cmp	r2, r3
 801d41e:	bf0c      	ite	eq
 801d420:	2301      	moveq	r3, #1
 801d422:	2300      	movne	r3, #0
 801d424:	b2dc      	uxtb	r4, r3
 801d426:	e163      	b.n	801d6f0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned long int")
 801d428:	1d3b      	adds	r3, r7, #4
 801d42a:	681b      	ldr	r3, [r3, #0]
 801d42c:	f103 040c 	add.w	r4, r3, #12
 801d430:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801d434:	4910      	ldr	r1, [pc, #64]	; (801d478 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801d436:	4618      	mov	r0, r3
 801d438:	f7ee f86f 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801d43c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801d440:	4619      	mov	r1, r3
 801d442:	4620      	mov	r0, r4
 801d444:	f7ee fc2d 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801d448:	4603      	mov	r3, r0
 801d44a:	461c      	mov	r4, r3
 801d44c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801d450:	4618      	mov	r0, r3
 801d452:	f7ee fc1a 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d456:	2c00      	cmp	r4, #0
 801d458:	d016      	beq.n	801d488 <_ZNK14MockNamedValue6equalsERKS_+0x8f8>
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongIntValue_;
 801d45a:	1d3b      	adds	r3, r7, #4
 801d45c:	681b      	ldr	r3, [r3, #0]
 801d45e:	699a      	ldr	r2, [r3, #24]
 801d460:	463b      	mov	r3, r7
 801d462:	681b      	ldr	r3, [r3, #0]
 801d464:	699b      	ldr	r3, [r3, #24]
 801d466:	429a      	cmp	r2, r3
 801d468:	bf0c      	ite	eq
 801d46a:	2301      	moveq	r3, #1
 801d46c:	2300      	movne	r3, #0
 801d46e:	b2dc      	uxtb	r4, r3
 801d470:	e13e      	b.n	801d6f0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801d472:	bf00      	nop
 801d474:	08024d2c 	.word	0x08024d2c
 801d478:	08024d38 	.word	0x08024d38
 801d47c:	08024d14 	.word	0x08024d14
 801d480:	08024d10 	.word	0x08024d10
 801d484:	08024d1c 	.word	0x08024d1c
    else if (type_ == "long long int")
        return value_.longLongIntValue_ == p.value_.longLongIntValue_;
    else if (type_ == "unsigned long long int")
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif
    else if (type_ == "const char*")
 801d488:	1d3b      	adds	r3, r7, #4
 801d48a:	681b      	ldr	r3, [r3, #0]
 801d48c:	f103 040c 	add.w	r4, r3, #12
 801d490:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801d494:	4999      	ldr	r1, [pc, #612]	; (801d6fc <_ZNK14MockNamedValue6equalsERKS_+0xb6c>)
 801d496:	4618      	mov	r0, r3
 801d498:	f7ee f83f 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801d49c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801d4a0:	4619      	mov	r1, r3
 801d4a2:	4620      	mov	r0, r4
 801d4a4:	f7ee fbfd 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801d4a8:	4603      	mov	r3, r0
 801d4aa:	461c      	mov	r4, r3
 801d4ac:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801d4b0:	4618      	mov	r0, r3
 801d4b2:	f7ee fbea 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d4b6:	2c00      	cmp	r4, #0
 801d4b8:	d026      	beq.n	801d508 <_ZNK14MockNamedValue6equalsERKS_+0x978>
        return SimpleString(value_.stringValue_) == SimpleString(p.value_.stringValue_);
 801d4ba:	1d3b      	adds	r3, r7, #4
 801d4bc:	681b      	ldr	r3, [r3, #0]
 801d4be:	699a      	ldr	r2, [r3, #24]
 801d4c0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801d4c4:	4611      	mov	r1, r2
 801d4c6:	4618      	mov	r0, r3
 801d4c8:	f7ee f827 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801d4cc:	463b      	mov	r3, r7
 801d4ce:	681b      	ldr	r3, [r3, #0]
 801d4d0:	699a      	ldr	r2, [r3, #24]
 801d4d2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801d4d6:	4611      	mov	r1, r2
 801d4d8:	4618      	mov	r0, r3
 801d4da:	f7ee f81e 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801d4de:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801d4e2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801d4e6:	4611      	mov	r1, r2
 801d4e8:	4618      	mov	r0, r3
 801d4ea:	f7ee fbda 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801d4ee:	4603      	mov	r3, r0
 801d4f0:	461c      	mov	r4, r3
 801d4f2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801d4f6:	4618      	mov	r0, r3
 801d4f8:	f7ee fbc7 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d4fc:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801d500:	4618      	mov	r0, r3
 801d502:	f7ee fbc2 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d506:	e0f3      	b.n	801d6f0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void*")
 801d508:	1d3b      	adds	r3, r7, #4
 801d50a:	681b      	ldr	r3, [r3, #0]
 801d50c:	f103 040c 	add.w	r4, r3, #12
 801d510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d514:	497a      	ldr	r1, [pc, #488]	; (801d700 <_ZNK14MockNamedValue6equalsERKS_+0xb70>)
 801d516:	4618      	mov	r0, r3
 801d518:	f7ed ffff 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801d51c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d520:	4619      	mov	r1, r3
 801d522:	4620      	mov	r0, r4
 801d524:	f7ee fbbd 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801d528:	4603      	mov	r3, r0
 801d52a:	461c      	mov	r4, r3
 801d52c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d530:	4618      	mov	r0, r3
 801d532:	f7ee fbaa 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d536:	2c00      	cmp	r4, #0
 801d538:	d00b      	beq.n	801d552 <_ZNK14MockNamedValue6equalsERKS_+0x9c2>
        return value_.pointerValue_ == p.value_.pointerValue_;
 801d53a:	1d3b      	adds	r3, r7, #4
 801d53c:	681b      	ldr	r3, [r3, #0]
 801d53e:	699a      	ldr	r2, [r3, #24]
 801d540:	463b      	mov	r3, r7
 801d542:	681b      	ldr	r3, [r3, #0]
 801d544:	699b      	ldr	r3, [r3, #24]
 801d546:	429a      	cmp	r2, r3
 801d548:	bf0c      	ite	eq
 801d54a:	2301      	moveq	r3, #1
 801d54c:	2300      	movne	r3, #0
 801d54e:	b2dc      	uxtb	r4, r3
 801d550:	e0ce      	b.n	801d6f0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const void*")
 801d552:	1d3b      	adds	r3, r7, #4
 801d554:	681b      	ldr	r3, [r3, #0]
 801d556:	f103 040c 	add.w	r4, r3, #12
 801d55a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801d55e:	4969      	ldr	r1, [pc, #420]	; (801d704 <_ZNK14MockNamedValue6equalsERKS_+0xb74>)
 801d560:	4618      	mov	r0, r3
 801d562:	f7ed ffda 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801d566:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801d56a:	4619      	mov	r1, r3
 801d56c:	4620      	mov	r0, r4
 801d56e:	f7ee fb98 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801d572:	4603      	mov	r3, r0
 801d574:	461c      	mov	r4, r3
 801d576:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801d57a:	4618      	mov	r0, r3
 801d57c:	f7ee fb85 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d580:	2c00      	cmp	r4, #0
 801d582:	d00b      	beq.n	801d59c <_ZNK14MockNamedValue6equalsERKS_+0xa0c>
        return value_.constPointerValue_ == p.value_.constPointerValue_;
 801d584:	1d3b      	adds	r3, r7, #4
 801d586:	681b      	ldr	r3, [r3, #0]
 801d588:	699a      	ldr	r2, [r3, #24]
 801d58a:	463b      	mov	r3, r7
 801d58c:	681b      	ldr	r3, [r3, #0]
 801d58e:	699b      	ldr	r3, [r3, #24]
 801d590:	429a      	cmp	r2, r3
 801d592:	bf0c      	ite	eq
 801d594:	2301      	moveq	r3, #1
 801d596:	2300      	movne	r3, #0
 801d598:	b2dc      	uxtb	r4, r3
 801d59a:	e0a9      	b.n	801d6f0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void (*)()")
 801d59c:	1d3b      	adds	r3, r7, #4
 801d59e:	681b      	ldr	r3, [r3, #0]
 801d5a0:	f103 040c 	add.w	r4, r3, #12
 801d5a4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d5a8:	4957      	ldr	r1, [pc, #348]	; (801d708 <_ZNK14MockNamedValue6equalsERKS_+0xb78>)
 801d5aa:	4618      	mov	r0, r3
 801d5ac:	f7ed ffb5 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801d5b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d5b4:	4619      	mov	r1, r3
 801d5b6:	4620      	mov	r0, r4
 801d5b8:	f7ee fb73 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801d5bc:	4603      	mov	r3, r0
 801d5be:	461c      	mov	r4, r3
 801d5c0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d5c4:	4618      	mov	r0, r3
 801d5c6:	f7ee fb60 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d5ca:	2c00      	cmp	r4, #0
 801d5cc:	d00b      	beq.n	801d5e6 <_ZNK14MockNamedValue6equalsERKS_+0xa56>
        return value_.functionPointerValue_ == p.value_.functionPointerValue_;
 801d5ce:	1d3b      	adds	r3, r7, #4
 801d5d0:	681b      	ldr	r3, [r3, #0]
 801d5d2:	699a      	ldr	r2, [r3, #24]
 801d5d4:	463b      	mov	r3, r7
 801d5d6:	681b      	ldr	r3, [r3, #0]
 801d5d8:	699b      	ldr	r3, [r3, #24]
 801d5da:	429a      	cmp	r2, r3
 801d5dc:	bf0c      	ite	eq
 801d5de:	2301      	moveq	r3, #1
 801d5e0:	2300      	movne	r3, #0
 801d5e2:	b2dc      	uxtb	r4, r3
 801d5e4:	e084      	b.n	801d6f0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "double")
 801d5e6:	1d3b      	adds	r3, r7, #4
 801d5e8:	681b      	ldr	r3, [r3, #0]
 801d5ea:	f103 040c 	add.w	r4, r3, #12
 801d5ee:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801d5f2:	4946      	ldr	r1, [pc, #280]	; (801d70c <_ZNK14MockNamedValue6equalsERKS_+0xb7c>)
 801d5f4:	4618      	mov	r0, r3
 801d5f6:	f7ed ff90 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801d5fa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801d5fe:	4619      	mov	r1, r3
 801d600:	4620      	mov	r0, r4
 801d602:	f7ee fb4e 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801d606:	4603      	mov	r3, r0
 801d608:	461c      	mov	r4, r3
 801d60a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801d60e:	4618      	mov	r0, r3
 801d610:	f7ee fb3b 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d614:	2c00      	cmp	r4, #0
 801d616:	d01c      	beq.n	801d652 <_ZNK14MockNamedValue6equalsERKS_+0xac2>
        return (doubles_equal(value_.doubleValue_.value, p.value_.doubleValue_.value, value_.doubleValue_.tolerance));
 801d618:	1d3b      	adds	r3, r7, #4
 801d61a:	681b      	ldr	r3, [r3, #0]
 801d61c:	ed93 7b06 	vldr	d7, [r3, #24]
 801d620:	463b      	mov	r3, r7
 801d622:	681b      	ldr	r3, [r3, #0]
 801d624:	ed93 6b06 	vldr	d6, [r3, #24]
 801d628:	1d3b      	adds	r3, r7, #4
 801d62a:	681b      	ldr	r3, [r3, #0]
 801d62c:	ed93 5b08 	vldr	d5, [r3, #32]
 801d630:	eeb0 2a45 	vmov.f32	s4, s10
 801d634:	eef0 2a65 	vmov.f32	s5, s11
 801d638:	eeb0 1a46 	vmov.f32	s2, s12
 801d63c:	eef0 1a66 	vmov.f32	s3, s13
 801d640:	eeb0 0a47 	vmov.f32	s0, s14
 801d644:	eef0 0a67 	vmov.f32	s1, s15
 801d648:	f7f3 fe1a 	bl	8011280 <_Z13doubles_equalddd>
 801d64c:	4603      	mov	r3, r0
 801d64e:	461c      	mov	r4, r3
 801d650:	e04e      	b.n	801d6f0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const unsigned char*")
 801d652:	1d3b      	adds	r3, r7, #4
 801d654:	681b      	ldr	r3, [r3, #0]
 801d656:	f103 040c 	add.w	r4, r3, #12
 801d65a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801d65e:	492c      	ldr	r1, [pc, #176]	; (801d710 <_ZNK14MockNamedValue6equalsERKS_+0xb80>)
 801d660:	4618      	mov	r0, r3
 801d662:	f7ed ff5a 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801d666:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801d66a:	4619      	mov	r1, r3
 801d66c:	4620      	mov	r0, r4
 801d66e:	f7ee fb18 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801d672:	4603      	mov	r3, r0
 801d674:	461c      	mov	r4, r3
 801d676:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801d67a:	4618      	mov	r0, r3
 801d67c:	f7ee fb05 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d680:	2c00      	cmp	r4, #0
 801d682:	d01c      	beq.n	801d6be <_ZNK14MockNamedValue6equalsERKS_+0xb2e>
    {
        if (size_ != p.size_) {
 801d684:	1d3b      	adds	r3, r7, #4
 801d686:	681b      	ldr	r3, [r3, #0]
 801d688:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801d68a:	463b      	mov	r3, r7
 801d68c:	681b      	ldr	r3, [r3, #0]
 801d68e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d690:	429a      	cmp	r2, r3
 801d692:	d001      	beq.n	801d698 <_ZNK14MockNamedValue6equalsERKS_+0xb08>
            return false;
 801d694:	2400      	movs	r4, #0
 801d696:	e02b      	b.n	801d6f0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        }
        return SimpleString::MemCmp(value_.memoryBufferValue_, p.value_.memoryBufferValue_, size_) == 0;
 801d698:	1d3b      	adds	r3, r7, #4
 801d69a:	681b      	ldr	r3, [r3, #0]
 801d69c:	6998      	ldr	r0, [r3, #24]
 801d69e:	463b      	mov	r3, r7
 801d6a0:	681b      	ldr	r3, [r3, #0]
 801d6a2:	6999      	ldr	r1, [r3, #24]
 801d6a4:	1d3b      	adds	r3, r7, #4
 801d6a6:	681b      	ldr	r3, [r3, #0]
 801d6a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d6aa:	461a      	mov	r2, r3
 801d6ac:	f7ed fe54 	bl	800b358 <_ZN12SimpleString6MemCmpEPKvS1_j>
 801d6b0:	4603      	mov	r3, r0
 801d6b2:	2b00      	cmp	r3, #0
 801d6b4:	bf0c      	ite	eq
 801d6b6:	2301      	moveq	r3, #1
 801d6b8:	2300      	movne	r3, #0
 801d6ba:	b2dc      	uxtb	r4, r3
 801d6bc:	e018      	b.n	801d6f0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    }

    if (comparator_)
 801d6be:	1d3b      	adds	r3, r7, #4
 801d6c0:	681b      	ldr	r3, [r3, #0]
 801d6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d6c4:	2b00      	cmp	r3, #0
 801d6c6:	d012      	beq.n	801d6ee <_ZNK14MockNamedValue6equalsERKS_+0xb5e>
        return comparator_->isEqual(value_.constObjectPointerValue_, p.value_.constObjectPointerValue_);
 801d6c8:	1d3b      	adds	r3, r7, #4
 801d6ca:	681b      	ldr	r3, [r3, #0]
 801d6cc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801d6ce:	1d3b      	adds	r3, r7, #4
 801d6d0:	681b      	ldr	r3, [r3, #0]
 801d6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d6d4:	681b      	ldr	r3, [r3, #0]
 801d6d6:	3308      	adds	r3, #8
 801d6d8:	681b      	ldr	r3, [r3, #0]
 801d6da:	1d3a      	adds	r2, r7, #4
 801d6dc:	6812      	ldr	r2, [r2, #0]
 801d6de:	6991      	ldr	r1, [r2, #24]
 801d6e0:	463a      	mov	r2, r7
 801d6e2:	6812      	ldr	r2, [r2, #0]
 801d6e4:	6992      	ldr	r2, [r2, #24]
 801d6e6:	4798      	blx	r3
 801d6e8:	4603      	mov	r3, r0
 801d6ea:	461c      	mov	r4, r3
 801d6ec:	e000      	b.n	801d6f0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    return false;
 801d6ee:	2400      	movs	r4, #0
 801d6f0:	4623      	mov	r3, r4
}
 801d6f2:	4618      	mov	r0, r3
 801d6f4:	f507 779a 	add.w	r7, r7, #308	; 0x134
 801d6f8:	46bd      	mov	sp, r7
 801d6fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d6fc:	08024ddc 	.word	0x08024ddc
 801d700:	08024dbc 	.word	0x08024dbc
 801d704:	08024dc4 	.word	0x08024dc4
 801d708:	08024dd0 	.word	0x08024dd0
 801d70c:	08024db4 	.word	0x08024db4
 801d710:	08024de8 	.word	0x08024de8

0801d714 <_ZNK14MockNamedValue20compatibleForCopyingERKS_>:

bool MockNamedValue::compatibleForCopying(const MockNamedValue& p) const
{
 801d714:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d716:	b087      	sub	sp, #28
 801d718:	af00      	add	r7, sp, #0
 801d71a:	6078      	str	r0, [r7, #4]
 801d71c:	6039      	str	r1, [r7, #0]
    if (type_ == p.type_) return true;
 801d71e:	687b      	ldr	r3, [r7, #4]
 801d720:	f103 020c 	add.w	r2, r3, #12
 801d724:	683b      	ldr	r3, [r7, #0]
 801d726:	330c      	adds	r3, #12
 801d728:	4619      	mov	r1, r3
 801d72a:	4610      	mov	r0, r2
 801d72c:	f7ee fab9 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801d730:	4603      	mov	r3, r0
 801d732:	2b00      	cmp	r3, #0
 801d734:	d001      	beq.n	801d73a <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x26>
 801d736:	2301      	movs	r3, #1
 801d738:	e03c      	b.n	801d7b4 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    if ((type_ == "const void*") && (p.type_ == "void*"))
 801d73a:	2500      	movs	r5, #0
 801d73c:	687b      	ldr	r3, [r7, #4]
 801d73e:	f103 040c 	add.w	r4, r3, #12
 801d742:	f107 0308 	add.w	r3, r7, #8
 801d746:	491d      	ldr	r1, [pc, #116]	; (801d7bc <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa8>)
 801d748:	4618      	mov	r0, r3
 801d74a:	f7ed fee6 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801d74e:	2601      	movs	r6, #1
 801d750:	f107 0308 	add.w	r3, r7, #8
 801d754:	4619      	mov	r1, r3
 801d756:	4620      	mov	r0, r4
 801d758:	f7ee faa3 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801d75c:	4603      	mov	r3, r0
 801d75e:	2b00      	cmp	r3, #0
 801d760:	d014      	beq.n	801d78c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801d762:	683b      	ldr	r3, [r7, #0]
 801d764:	f103 040c 	add.w	r4, r3, #12
 801d768:	f107 0310 	add.w	r3, r7, #16
 801d76c:	4914      	ldr	r1, [pc, #80]	; (801d7c0 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xac>)
 801d76e:	4618      	mov	r0, r3
 801d770:	f7ed fed3 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801d774:	2501      	movs	r5, #1
 801d776:	f107 0310 	add.w	r3, r7, #16
 801d77a:	4619      	mov	r1, r3
 801d77c:	4620      	mov	r0, r4
 801d77e:	f7ee fa90 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801d782:	4603      	mov	r3, r0
 801d784:	2b00      	cmp	r3, #0
 801d786:	d001      	beq.n	801d78c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801d788:	2401      	movs	r4, #1
 801d78a:	e000      	b.n	801d78e <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x7a>
 801d78c:	2400      	movs	r4, #0
 801d78e:	2d00      	cmp	r5, #0
 801d790:	d004      	beq.n	801d79c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x88>
 801d792:	f107 0310 	add.w	r3, r7, #16
 801d796:	4618      	mov	r0, r3
 801d798:	f7ee fa77 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d79c:	2e00      	cmp	r6, #0
 801d79e:	d004      	beq.n	801d7aa <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x96>
 801d7a0:	f107 0308 	add.w	r3, r7, #8
 801d7a4:	4618      	mov	r0, r3
 801d7a6:	f7ee fa70 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d7aa:	2c00      	cmp	r4, #0
 801d7ac:	d001      	beq.n	801d7b2 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x9e>
        return true;
 801d7ae:	2301      	movs	r3, #1
 801d7b0:	e000      	b.n	801d7b4 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    return false;
 801d7b2:	2300      	movs	r3, #0
}
 801d7b4:	4618      	mov	r0, r3
 801d7b6:	371c      	adds	r7, #28
 801d7b8:	46bd      	mov	sp, r7
 801d7ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d7bc:	08024dc4 	.word	0x08024dc4
 801d7c0:	08024dbc 	.word	0x08024dbc

0801d7c4 <_ZNK14MockNamedValue8toStringEv>:

SimpleString MockNamedValue::toString() const
{
 801d7c4:	b590      	push	{r4, r7, lr}
 801d7c6:	b0b9      	sub	sp, #228	; 0xe4
 801d7c8:	af00      	add	r7, sp, #0
 801d7ca:	6078      	str	r0, [r7, #4]
 801d7cc:	6039      	str	r1, [r7, #0]
    if (type_ == "bool")
 801d7ce:	683b      	ldr	r3, [r7, #0]
 801d7d0:	f103 040c 	add.w	r4, r3, #12
 801d7d4:	f107 0308 	add.w	r3, r7, #8
 801d7d8:	49d4      	ldr	r1, [pc, #848]	; (801db2c <_ZNK14MockNamedValue8toStringEv+0x368>)
 801d7da:	4618      	mov	r0, r3
 801d7dc:	f7ed fe9d 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801d7e0:	f107 0308 	add.w	r3, r7, #8
 801d7e4:	4619      	mov	r1, r3
 801d7e6:	4620      	mov	r0, r4
 801d7e8:	f7ee fa5b 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801d7ec:	4603      	mov	r3, r0
 801d7ee:	461c      	mov	r4, r3
 801d7f0:	f107 0308 	add.w	r3, r7, #8
 801d7f4:	4618      	mov	r0, r3
 801d7f6:	f7ee fa48 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d7fa:	2c00      	cmp	r4, #0
 801d7fc:	d007      	beq.n	801d80e <_ZNK14MockNamedValue8toStringEv+0x4a>
        return StringFrom(value_.boolValue_);
 801d7fe:	683b      	ldr	r3, [r7, #0]
 801d800:	7e1a      	ldrb	r2, [r3, #24]
 801d802:	687b      	ldr	r3, [r7, #4]
 801d804:	4611      	mov	r1, r2
 801d806:	4618      	mov	r0, r3
 801d808:	f7ee fcb0 	bl	800c16c <_Z10StringFromb>
 801d80c:	e23f      	b.n	801dc8e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "int")
 801d80e:	683b      	ldr	r3, [r7, #0]
 801d810:	f103 040c 	add.w	r4, r3, #12
 801d814:	f107 0310 	add.w	r3, r7, #16
 801d818:	49c5      	ldr	r1, [pc, #788]	; (801db30 <_ZNK14MockNamedValue8toStringEv+0x36c>)
 801d81a:	4618      	mov	r0, r3
 801d81c:	f7ed fe7d 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801d820:	f107 0310 	add.w	r3, r7, #16
 801d824:	4619      	mov	r1, r3
 801d826:	4620      	mov	r0, r4
 801d828:	f7ee fa3b 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801d82c:	4603      	mov	r3, r0
 801d82e:	461c      	mov	r4, r3
 801d830:	f107 0310 	add.w	r3, r7, #16
 801d834:	4618      	mov	r0, r3
 801d836:	f7ee fa28 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d83a:	2c00      	cmp	r4, #0
 801d83c:	d03b      	beq.n	801d8b6 <_ZNK14MockNamedValue8toStringEv+0xf2>
        return StringFrom(value_.intValue_) + " " + BracketsFormattedHexStringFrom(value_.intValue_);
 801d83e:	683b      	ldr	r3, [r7, #0]
 801d840:	699a      	ldr	r2, [r3, #24]
 801d842:	f107 0320 	add.w	r3, r7, #32
 801d846:	4611      	mov	r1, r2
 801d848:	4618      	mov	r0, r3
 801d84a:	f7ee fce5 	bl	800c218 <_Z10StringFromi>
 801d84e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d852:	49b8      	ldr	r1, [pc, #736]	; (801db34 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801d854:	4618      	mov	r0, r3
 801d856:	f7ed fe60 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801d85a:	f107 0318 	add.w	r3, r7, #24
 801d85e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801d862:	f107 0120 	add.w	r1, r7, #32
 801d866:	4618      	mov	r0, r3
 801d868:	f7ee fa71 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 801d86c:	683b      	ldr	r3, [r7, #0]
 801d86e:	699a      	ldr	r2, [r3, #24]
 801d870:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d874:	4611      	mov	r1, r2
 801d876:	4618      	mov	r0, r3
 801d878:	f7ee fdbe 	bl	800c3f8 <_Z30BracketsFormattedHexStringFromi>
 801d87c:	687b      	ldr	r3, [r7, #4]
 801d87e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801d882:	f107 0118 	add.w	r1, r7, #24
 801d886:	4618      	mov	r0, r3
 801d888:	f7ee fa61 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 801d88c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d890:	4618      	mov	r0, r3
 801d892:	f7ee f9fa 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d896:	f107 0318 	add.w	r3, r7, #24
 801d89a:	4618      	mov	r0, r3
 801d89c:	f7ee f9f5 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d8a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d8a4:	4618      	mov	r0, r3
 801d8a6:	f7ee f9f0 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d8aa:	f107 0320 	add.w	r3, r7, #32
 801d8ae:	4618      	mov	r0, r3
 801d8b0:	f7ee f9eb 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d8b4:	e1eb      	b.n	801dc8e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned int")
 801d8b6:	683b      	ldr	r3, [r7, #0]
 801d8b8:	f103 040c 	add.w	r4, r3, #12
 801d8bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d8c0:	499d      	ldr	r1, [pc, #628]	; (801db38 <_ZNK14MockNamedValue8toStringEv+0x374>)
 801d8c2:	4618      	mov	r0, r3
 801d8c4:	f7ed fe29 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801d8c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d8cc:	4619      	mov	r1, r3
 801d8ce:	4620      	mov	r0, r4
 801d8d0:	f7ee f9e7 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801d8d4:	4603      	mov	r3, r0
 801d8d6:	461c      	mov	r4, r3
 801d8d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d8dc:	4618      	mov	r0, r3
 801d8de:	f7ee f9d4 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d8e2:	2c00      	cmp	r4, #0
 801d8e4:	d03b      	beq.n	801d95e <_ZNK14MockNamedValue8toStringEv+0x19a>
        return StringFrom(value_.unsignedIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedIntValue_);
 801d8e6:	683b      	ldr	r3, [r7, #0]
 801d8e8:	699a      	ldr	r2, [r3, #24]
 801d8ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d8ee:	4611      	mov	r1, r2
 801d8f0:	4618      	mov	r0, r3
 801d8f2:	f7ee fef9 	bl	800c6e8 <_Z10StringFromj>
 801d8f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d8fa:	498e      	ldr	r1, [pc, #568]	; (801db34 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801d8fc:	4618      	mov	r0, r3
 801d8fe:	f7ed fe0c 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801d902:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d906:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801d90a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801d90e:	4618      	mov	r0, r3
 801d910:	f7ee fa1d 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 801d914:	683b      	ldr	r3, [r7, #0]
 801d916:	699a      	ldr	r2, [r3, #24]
 801d918:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d91c:	4611      	mov	r1, r2
 801d91e:	4618      	mov	r0, r3
 801d920:	f7ee fd86 	bl	800c430 <_Z30BracketsFormattedHexStringFromj>
 801d924:	687b      	ldr	r3, [r7, #4]
 801d926:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801d92a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801d92e:	4618      	mov	r0, r3
 801d930:	f7ee fa0d 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 801d934:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d938:	4618      	mov	r0, r3
 801d93a:	f7ee f9a6 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d93e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d942:	4618      	mov	r0, r3
 801d944:	f7ee f9a1 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d948:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d94c:	4618      	mov	r0, r3
 801d94e:	f7ee f99c 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d952:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d956:	4618      	mov	r0, r3
 801d958:	f7ee f997 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d95c:	e197      	b.n	801dc8e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long int")
 801d95e:	683b      	ldr	r3, [r7, #0]
 801d960:	f103 040c 	add.w	r4, r3, #12
 801d964:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801d968:	4974      	ldr	r1, [pc, #464]	; (801db3c <_ZNK14MockNamedValue8toStringEv+0x378>)
 801d96a:	4618      	mov	r0, r3
 801d96c:	f7ed fdd5 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801d970:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801d974:	4619      	mov	r1, r3
 801d976:	4620      	mov	r0, r4
 801d978:	f7ee f993 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801d97c:	4603      	mov	r3, r0
 801d97e:	461c      	mov	r4, r3
 801d980:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801d984:	4618      	mov	r0, r3
 801d986:	f7ee f980 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d98a:	2c00      	cmp	r4, #0
 801d98c:	d03b      	beq.n	801da06 <_ZNK14MockNamedValue8toStringEv+0x242>
        return StringFrom(value_.longIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longIntValue_);
 801d98e:	683b      	ldr	r3, [r7, #0]
 801d990:	699a      	ldr	r2, [r3, #24]
 801d992:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801d996:	4611      	mov	r1, r2
 801d998:	4618      	mov	r0, r3
 801d99a:	f7ee fc4f 	bl	800c23c <_Z10StringFroml>
 801d99e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801d9a2:	4964      	ldr	r1, [pc, #400]	; (801db34 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801d9a4:	4618      	mov	r0, r3
 801d9a6:	f7ed fdb8 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801d9aa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d9ae:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801d9b2:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801d9b6:	4618      	mov	r0, r3
 801d9b8:	f7ee f9c9 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 801d9bc:	683b      	ldr	r3, [r7, #0]
 801d9be:	699a      	ldr	r2, [r3, #24]
 801d9c0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801d9c4:	4611      	mov	r1, r2
 801d9c6:	4618      	mov	r0, r3
 801d9c8:	f7ee fd4e 	bl	800c468 <_Z30BracketsFormattedHexStringFroml>
 801d9cc:	687b      	ldr	r3, [r7, #4]
 801d9ce:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801d9d2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801d9d6:	4618      	mov	r0, r3
 801d9d8:	f7ee f9b9 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 801d9dc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801d9e0:	4618      	mov	r0, r3
 801d9e2:	f7ee f952 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d9e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d9ea:	4618      	mov	r0, r3
 801d9ec:	f7ee f94d 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d9f0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801d9f4:	4618      	mov	r0, r3
 801d9f6:	f7ee f948 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801d9fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801d9fe:	4618      	mov	r0, r3
 801da00:	f7ee f943 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801da04:	e143      	b.n	801dc8e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned long int")
 801da06:	683b      	ldr	r3, [r7, #0]
 801da08:	f103 040c 	add.w	r4, r3, #12
 801da0c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801da10:	494b      	ldr	r1, [pc, #300]	; (801db40 <_ZNK14MockNamedValue8toStringEv+0x37c>)
 801da12:	4618      	mov	r0, r3
 801da14:	f7ed fd81 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801da18:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801da1c:	4619      	mov	r1, r3
 801da1e:	4620      	mov	r0, r4
 801da20:	f7ee f93f 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801da24:	4603      	mov	r3, r0
 801da26:	461c      	mov	r4, r3
 801da28:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801da2c:	4618      	mov	r0, r3
 801da2e:	f7ee f92c 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801da32:	2c00      	cmp	r4, #0
 801da34:	d03b      	beq.n	801daae <_ZNK14MockNamedValue8toStringEv+0x2ea>
        return StringFrom(value_.unsignedLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongIntValue_);
 801da36:	683b      	ldr	r3, [r7, #0]
 801da38:	699a      	ldr	r2, [r3, #24]
 801da3a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801da3e:	4611      	mov	r1, r2
 801da40:	4618      	mov	r0, r3
 801da42:	f7ee fe63 	bl	800c70c <_Z10StringFromm>
 801da46:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801da4a:	493a      	ldr	r1, [pc, #232]	; (801db34 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801da4c:	4618      	mov	r0, r3
 801da4e:	f7ed fd64 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801da52:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801da56:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801da5a:	f107 0198 	add.w	r1, r7, #152	; 0x98
 801da5e:	4618      	mov	r0, r3
 801da60:	f7ee f975 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 801da64:	683b      	ldr	r3, [r7, #0]
 801da66:	699a      	ldr	r2, [r3, #24]
 801da68:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801da6c:	4611      	mov	r1, r2
 801da6e:	4618      	mov	r0, r3
 801da70:	f7ee fd16 	bl	800c4a0 <_Z30BracketsFormattedHexStringFromm>
 801da74:	687b      	ldr	r3, [r7, #4]
 801da76:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801da7a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 801da7e:	4618      	mov	r0, r3
 801da80:	f7ee f965 	bl	800bd4e <_ZNK12SimpleStringplERKS_>
 801da84:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801da88:	4618      	mov	r0, r3
 801da8a:	f7ee f8fe 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801da8e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801da92:	4618      	mov	r0, r3
 801da94:	f7ee f8f9 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801da98:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801da9c:	4618      	mov	r0, r3
 801da9e:	f7ee f8f4 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801daa2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801daa6:	4618      	mov	r0, r3
 801daa8:	f7ee f8ef 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801daac:	e0ef      	b.n	801dc8e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long long int")
        return StringFrom(value_.longLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longLongIntValue_);
    else if (type_ == "unsigned long long int")
        return StringFrom(value_.unsignedLongLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongLongIntValue_);
#endif
    else if (type_ == "const char*")
 801daae:	683b      	ldr	r3, [r7, #0]
 801dab0:	f103 040c 	add.w	r4, r3, #12
 801dab4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801dab8:	4922      	ldr	r1, [pc, #136]	; (801db44 <_ZNK14MockNamedValue8toStringEv+0x380>)
 801daba:	4618      	mov	r0, r3
 801dabc:	f7ed fd2d 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801dac0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801dac4:	4619      	mov	r1, r3
 801dac6:	4620      	mov	r0, r4
 801dac8:	f7ee f8eb 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801dacc:	4603      	mov	r3, r0
 801dace:	461c      	mov	r4, r3
 801dad0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801dad4:	4618      	mov	r0, r3
 801dad6:	f7ee f8d8 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801dada:	2c00      	cmp	r4, #0
 801dadc:	d006      	beq.n	801daec <_ZNK14MockNamedValue8toStringEv+0x328>
        return value_.stringValue_;
 801dade:	683b      	ldr	r3, [r7, #0]
 801dae0:	699b      	ldr	r3, [r3, #24]
 801dae2:	4619      	mov	r1, r3
 801dae4:	6878      	ldr	r0, [r7, #4]
 801dae6:	f7ed fd18 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801daea:	e0d0      	b.n	801dc8e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "void*")
 801daec:	683b      	ldr	r3, [r7, #0]
 801daee:	f103 040c 	add.w	r4, r3, #12
 801daf2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801daf6:	4914      	ldr	r1, [pc, #80]	; (801db48 <_ZNK14MockNamedValue8toStringEv+0x384>)
 801daf8:	4618      	mov	r0, r3
 801dafa:	f7ed fd0e 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801dafe:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801db02:	4619      	mov	r1, r3
 801db04:	4620      	mov	r0, r4
 801db06:	f7ee f8cc 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801db0a:	4603      	mov	r3, r0
 801db0c:	461c      	mov	r4, r3
 801db0e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801db12:	4618      	mov	r0, r3
 801db14:	f7ee f8b9 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801db18:	2c00      	cmp	r4, #0
 801db1a:	d017      	beq.n	801db4c <_ZNK14MockNamedValue8toStringEv+0x388>
        return StringFrom(value_.pointerValue_);
 801db1c:	683b      	ldr	r3, [r7, #0]
 801db1e:	699a      	ldr	r2, [r3, #24]
 801db20:	687b      	ldr	r3, [r7, #4]
 801db22:	4611      	mov	r1, r2
 801db24:	4618      	mov	r0, r3
 801db26:	f7ee fb9b 	bl	800c260 <_Z10StringFromPKv>
 801db2a:	e0b0      	b.n	801dc8e <_ZNK14MockNamedValue8toStringEv+0x4ca>
 801db2c:	08024d14 	.word	0x08024d14
 801db30:	08024d10 	.word	0x08024d10
 801db34:	08024e00 	.word	0x08024e00
 801db38:	08024d1c 	.word	0x08024d1c
 801db3c:	08024d2c 	.word	0x08024d2c
 801db40:	08024d38 	.word	0x08024d38
 801db44:	08024ddc 	.word	0x08024ddc
 801db48:	08024dbc 	.word	0x08024dbc
    else if (type_ == "void (*)()")
 801db4c:	683b      	ldr	r3, [r7, #0]
 801db4e:	f103 040c 	add.w	r4, r3, #12
 801db52:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801db56:	4950      	ldr	r1, [pc, #320]	; (801dc98 <_ZNK14MockNamedValue8toStringEv+0x4d4>)
 801db58:	4618      	mov	r0, r3
 801db5a:	f7ed fcde 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801db5e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801db62:	4619      	mov	r1, r3
 801db64:	4620      	mov	r0, r4
 801db66:	f7ee f89c 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801db6a:	4603      	mov	r3, r0
 801db6c:	461c      	mov	r4, r3
 801db6e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801db72:	4618      	mov	r0, r3
 801db74:	f7ee f889 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801db78:	2c00      	cmp	r4, #0
 801db7a:	d007      	beq.n	801db8c <_ZNK14MockNamedValue8toStringEv+0x3c8>
        return StringFrom(value_.functionPointerValue_);
 801db7c:	683b      	ldr	r3, [r7, #0]
 801db7e:	699a      	ldr	r2, [r3, #24]
 801db80:	687b      	ldr	r3, [r7, #4]
 801db82:	4611      	mov	r1, r2
 801db84:	4618      	mov	r0, r3
 801db86:	f7ee fb95 	bl	800c2b4 <_Z10StringFromPFvvE>
 801db8a:	e080      	b.n	801dc8e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const void*")
 801db8c:	683b      	ldr	r3, [r7, #0]
 801db8e:	f103 040c 	add.w	r4, r3, #12
 801db92:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801db96:	4941      	ldr	r1, [pc, #260]	; (801dc9c <_ZNK14MockNamedValue8toStringEv+0x4d8>)
 801db98:	4618      	mov	r0, r3
 801db9a:	f7ed fcbe 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801db9e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801dba2:	4619      	mov	r1, r3
 801dba4:	4620      	mov	r0, r4
 801dba6:	f7ee f87c 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801dbaa:	4603      	mov	r3, r0
 801dbac:	461c      	mov	r4, r3
 801dbae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801dbb2:	4618      	mov	r0, r3
 801dbb4:	f7ee f869 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801dbb8:	2c00      	cmp	r4, #0
 801dbba:	d007      	beq.n	801dbcc <_ZNK14MockNamedValue8toStringEv+0x408>
        return StringFrom(value_.constPointerValue_);
 801dbbc:	683b      	ldr	r3, [r7, #0]
 801dbbe:	699a      	ldr	r2, [r3, #24]
 801dbc0:	687b      	ldr	r3, [r7, #4]
 801dbc2:	4611      	mov	r1, r2
 801dbc4:	4618      	mov	r0, r3
 801dbc6:	f7ee fb4b 	bl	800c260 <_Z10StringFromPKv>
 801dbca:	e060      	b.n	801dc8e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "double")
 801dbcc:	683b      	ldr	r3, [r7, #0]
 801dbce:	f103 040c 	add.w	r4, r3, #12
 801dbd2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801dbd6:	4932      	ldr	r1, [pc, #200]	; (801dca0 <_ZNK14MockNamedValue8toStringEv+0x4dc>)
 801dbd8:	4618      	mov	r0, r3
 801dbda:	f7ed fc9e 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801dbde:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801dbe2:	4619      	mov	r1, r3
 801dbe4:	4620      	mov	r0, r4
 801dbe6:	f7ee f85c 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801dbea:	4603      	mov	r3, r0
 801dbec:	461c      	mov	r4, r3
 801dbee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801dbf2:	4618      	mov	r0, r3
 801dbf4:	f7ee f849 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801dbf8:	2c00      	cmp	r4, #0
 801dbfa:	d00c      	beq.n	801dc16 <_ZNK14MockNamedValue8toStringEv+0x452>
        return StringFrom(value_.doubleValue_.value);
 801dbfc:	683b      	ldr	r3, [r7, #0]
 801dbfe:	ed93 7b06 	vldr	d7, [r3, #24]
 801dc02:	687b      	ldr	r3, [r7, #4]
 801dc04:	2106      	movs	r1, #6
 801dc06:	eeb0 0a47 	vmov.f32	s0, s14
 801dc0a:	eef0 0a67 	vmov.f32	s1, s15
 801dc0e:	4618      	mov	r0, r3
 801dc10:	f7ee fd00 	bl	800c614 <_Z10StringFromdi>
 801dc14:	e03b      	b.n	801dc8e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const unsigned char*")
 801dc16:	683b      	ldr	r3, [r7, #0]
 801dc18:	f103 040c 	add.w	r4, r3, #12
 801dc1c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801dc20:	4920      	ldr	r1, [pc, #128]	; (801dca4 <_ZNK14MockNamedValue8toStringEv+0x4e0>)
 801dc22:	4618      	mov	r0, r3
 801dc24:	f7ed fc79 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801dc28:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801dc2c:	4619      	mov	r1, r3
 801dc2e:	4620      	mov	r0, r4
 801dc30:	f7ee f837 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801dc34:	4603      	mov	r3, r0
 801dc36:	461c      	mov	r4, r3
 801dc38:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801dc3c:	4618      	mov	r0, r3
 801dc3e:	f7ee f824 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801dc42:	2c00      	cmp	r4, #0
 801dc44:	d008      	beq.n	801dc58 <_ZNK14MockNamedValue8toStringEv+0x494>
        return StringFromBinaryWithSizeOrNull(value_.memoryBufferValue_, size_);
 801dc46:	683b      	ldr	r3, [r7, #0]
 801dc48:	6999      	ldr	r1, [r3, #24]
 801dc4a:	683b      	ldr	r3, [r7, #0]
 801dc4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801dc4e:	687b      	ldr	r3, [r7, #4]
 801dc50:	4618      	mov	r0, r3
 801dc52:	f7ee fe73 	bl	800c93c <_Z30StringFromBinaryWithSizeOrNullPKhj>
 801dc56:	e01a      	b.n	801dc8e <_ZNK14MockNamedValue8toStringEv+0x4ca>

    if (comparator_)
 801dc58:	683b      	ldr	r3, [r7, #0]
 801dc5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dc5c:	2b00      	cmp	r3, #0
 801dc5e:	d00b      	beq.n	801dc78 <_ZNK14MockNamedValue8toStringEv+0x4b4>
        return comparator_->valueToString(value_.constObjectPointerValue_);
 801dc60:	683b      	ldr	r3, [r7, #0]
 801dc62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801dc64:	683b      	ldr	r3, [r7, #0]
 801dc66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dc68:	681b      	ldr	r3, [r3, #0]
 801dc6a:	330c      	adds	r3, #12
 801dc6c:	681b      	ldr	r3, [r3, #0]
 801dc6e:	683a      	ldr	r2, [r7, #0]
 801dc70:	6992      	ldr	r2, [r2, #24]
 801dc72:	6878      	ldr	r0, [r7, #4]
 801dc74:	4798      	blx	r3
 801dc76:	e00a      	b.n	801dc8e <_ZNK14MockNamedValue8toStringEv+0x4ca>

    return StringFromFormat("No comparator found for type: \"%s\"", type_.asCharString());
 801dc78:	683b      	ldr	r3, [r7, #0]
 801dc7a:	330c      	adds	r3, #12
 801dc7c:	4618      	mov	r0, r3
 801dc7e:	f7ed ffd7 	bl	800bc30 <_ZNK12SimpleString12asCharStringEv>
 801dc82:	4602      	mov	r2, r0
 801dc84:	687b      	ldr	r3, [r7, #4]
 801dc86:	4908      	ldr	r1, [pc, #32]	; (801dca8 <_ZNK14MockNamedValue8toStringEv+0x4e4>)
 801dc88:	4618      	mov	r0, r3
 801dc8a:	f7ee fd05 	bl	800c698 <_Z16StringFromFormatPKcz>

}
 801dc8e:	6878      	ldr	r0, [r7, #4]
 801dc90:	37e4      	adds	r7, #228	; 0xe4
 801dc92:	46bd      	mov	sp, r7
 801dc94:	bd90      	pop	{r4, r7, pc}
 801dc96:	bf00      	nop
 801dc98:	08024dd0 	.word	0x08024dd0
 801dc9c:	08024dc4 	.word	0x08024dc4
 801dca0:	08024db4 	.word	0x08024db4
 801dca4:	08024de8 	.word	0x08024de8
 801dca8:	08024e04 	.word	0x08024e04

0801dcac <_ZN22MockNamedValueListNode7setNextEPS_>:

void MockNamedValueListNode::setNext(MockNamedValueListNode* node)
{
 801dcac:	b480      	push	{r7}
 801dcae:	b083      	sub	sp, #12
 801dcb0:	af00      	add	r7, sp, #0
 801dcb2:	6078      	str	r0, [r7, #4]
 801dcb4:	6039      	str	r1, [r7, #0]
    next_ = node;
 801dcb6:	687b      	ldr	r3, [r7, #4]
 801dcb8:	683a      	ldr	r2, [r7, #0]
 801dcba:	605a      	str	r2, [r3, #4]
}
 801dcbc:	bf00      	nop
 801dcbe:	370c      	adds	r7, #12
 801dcc0:	46bd      	mov	sp, r7
 801dcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcc6:	4770      	bx	lr

0801dcc8 <_ZN22MockNamedValueListNode4nextEv>:

MockNamedValueListNode* MockNamedValueListNode::next()
{
 801dcc8:	b480      	push	{r7}
 801dcca:	b083      	sub	sp, #12
 801dccc:	af00      	add	r7, sp, #0
 801dcce:	6078      	str	r0, [r7, #4]
    return next_;
 801dcd0:	687b      	ldr	r3, [r7, #4]
 801dcd2:	685b      	ldr	r3, [r3, #4]
}
 801dcd4:	4618      	mov	r0, r3
 801dcd6:	370c      	adds	r7, #12
 801dcd8:	46bd      	mov	sp, r7
 801dcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcde:	4770      	bx	lr

0801dce0 <_ZN22MockNamedValueListNode4itemEv>:

MockNamedValue* MockNamedValueListNode::item()
{
 801dce0:	b480      	push	{r7}
 801dce2:	b083      	sub	sp, #12
 801dce4:	af00      	add	r7, sp, #0
 801dce6:	6078      	str	r0, [r7, #4]
    return data_;
 801dce8:	687b      	ldr	r3, [r7, #4]
 801dcea:	681b      	ldr	r3, [r3, #0]
}
 801dcec:	4618      	mov	r0, r3
 801dcee:	370c      	adds	r7, #12
 801dcf0:	46bd      	mov	sp, r7
 801dcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcf6:	4770      	bx	lr

0801dcf8 <_ZN22MockNamedValueListNode7destroyEv>:

void MockNamedValueListNode::destroy()
{
 801dcf8:	b580      	push	{r7, lr}
 801dcfa:	b082      	sub	sp, #8
 801dcfc:	af00      	add	r7, sp, #0
 801dcfe:	6078      	str	r0, [r7, #4]
    delete data_;
 801dd00:	687b      	ldr	r3, [r7, #4]
 801dd02:	681b      	ldr	r3, [r3, #0]
 801dd04:	2b00      	cmp	r3, #0
 801dd06:	d004      	beq.n	801dd12 <_ZN22MockNamedValueListNode7destroyEv+0x1a>
 801dd08:	681a      	ldr	r2, [r3, #0]
 801dd0a:	3204      	adds	r2, #4
 801dd0c:	6812      	ldr	r2, [r2, #0]
 801dd0e:	4618      	mov	r0, r3
 801dd10:	4790      	blx	r2
}
 801dd12:	bf00      	nop
 801dd14:	3708      	adds	r7, #8
 801dd16:	46bd      	mov	sp, r7
 801dd18:	bd80      	pop	{r7, pc}

0801dd1a <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>:

MockNamedValueListNode::MockNamedValueListNode(MockNamedValue* newValue)
 801dd1a:	b480      	push	{r7}
 801dd1c:	b083      	sub	sp, #12
 801dd1e:	af00      	add	r7, sp, #0
 801dd20:	6078      	str	r0, [r7, #4]
 801dd22:	6039      	str	r1, [r7, #0]
    : data_(newValue), next_(NULLPTR)
 801dd24:	687b      	ldr	r3, [r7, #4]
 801dd26:	683a      	ldr	r2, [r7, #0]
 801dd28:	601a      	str	r2, [r3, #0]
 801dd2a:	687b      	ldr	r3, [r7, #4]
 801dd2c:	2200      	movs	r2, #0
 801dd2e:	605a      	str	r2, [r3, #4]
{
}
 801dd30:	687b      	ldr	r3, [r7, #4]
 801dd32:	4618      	mov	r0, r3
 801dd34:	370c      	adds	r7, #12
 801dd36:	46bd      	mov	sp, r7
 801dd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd3c:	4770      	bx	lr

0801dd3e <_ZNK22MockNamedValueListNode7getNameEv>:

SimpleString MockNamedValueListNode::getName() const
{
 801dd3e:	b580      	push	{r7, lr}
 801dd40:	b082      	sub	sp, #8
 801dd42:	af00      	add	r7, sp, #0
 801dd44:	6078      	str	r0, [r7, #4]
 801dd46:	6039      	str	r1, [r7, #0]
    return data_->getName();
 801dd48:	683b      	ldr	r3, [r7, #0]
 801dd4a:	6819      	ldr	r1, [r3, #0]
 801dd4c:	683b      	ldr	r3, [r7, #0]
 801dd4e:	681b      	ldr	r3, [r3, #0]
 801dd50:	681b      	ldr	r3, [r3, #0]
 801dd52:	335c      	adds	r3, #92	; 0x5c
 801dd54:	681b      	ldr	r3, [r3, #0]
 801dd56:	687a      	ldr	r2, [r7, #4]
 801dd58:	4610      	mov	r0, r2
 801dd5a:	4798      	blx	r3
}
 801dd5c:	6878      	ldr	r0, [r7, #4]
 801dd5e:	3708      	adds	r7, #8
 801dd60:	46bd      	mov	sp, r7
 801dd62:	bd80      	pop	{r7, pc}

0801dd64 <_ZNK22MockNamedValueListNode7getTypeEv>:

SimpleString MockNamedValueListNode::getType() const
{
 801dd64:	b580      	push	{r7, lr}
 801dd66:	b082      	sub	sp, #8
 801dd68:	af00      	add	r7, sp, #0
 801dd6a:	6078      	str	r0, [r7, #4]
 801dd6c:	6039      	str	r1, [r7, #0]
    return data_->getType();
 801dd6e:	683b      	ldr	r3, [r7, #0]
 801dd70:	6819      	ldr	r1, [r3, #0]
 801dd72:	683b      	ldr	r3, [r7, #0]
 801dd74:	681b      	ldr	r3, [r3, #0]
 801dd76:	681b      	ldr	r3, [r3, #0]
 801dd78:	3360      	adds	r3, #96	; 0x60
 801dd7a:	681b      	ldr	r3, [r3, #0]
 801dd7c:	687a      	ldr	r2, [r7, #4]
 801dd7e:	4610      	mov	r0, r2
 801dd80:	4798      	blx	r3
}
 801dd82:	6878      	ldr	r0, [r7, #4]
 801dd84:	3708      	adds	r7, #8
 801dd86:	46bd      	mov	sp, r7
 801dd88:	bd80      	pop	{r7, pc}

0801dd8a <_ZN18MockNamedValueListC1Ev>:

MockNamedValueList::MockNamedValueList() : head_(NULLPTR)
 801dd8a:	b480      	push	{r7}
 801dd8c:	b083      	sub	sp, #12
 801dd8e:	af00      	add	r7, sp, #0
 801dd90:	6078      	str	r0, [r7, #4]
 801dd92:	687b      	ldr	r3, [r7, #4]
 801dd94:	2200      	movs	r2, #0
 801dd96:	601a      	str	r2, [r3, #0]
{
}
 801dd98:	687b      	ldr	r3, [r7, #4]
 801dd9a:	4618      	mov	r0, r3
 801dd9c:	370c      	adds	r7, #12
 801dd9e:	46bd      	mov	sp, r7
 801dda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dda4:	4770      	bx	lr

0801dda6 <_ZN18MockNamedValueList5clearEv>:

void MockNamedValueList::clear()
{
 801dda6:	b580      	push	{r7, lr}
 801dda8:	b084      	sub	sp, #16
 801ddaa:	af00      	add	r7, sp, #0
 801ddac:	6078      	str	r0, [r7, #4]
    while (head_) {
 801ddae:	687b      	ldr	r3, [r7, #4]
 801ddb0:	681b      	ldr	r3, [r3, #0]
 801ddb2:	2b00      	cmp	r3, #0
 801ddb4:	d016      	beq.n	801dde4 <_ZN18MockNamedValueList5clearEv+0x3e>
        MockNamedValueListNode* n = head_->next();
 801ddb6:	687b      	ldr	r3, [r7, #4]
 801ddb8:	681b      	ldr	r3, [r3, #0]
 801ddba:	4618      	mov	r0, r3
 801ddbc:	f7ff ff84 	bl	801dcc8 <_ZN22MockNamedValueListNode4nextEv>
 801ddc0:	60f8      	str	r0, [r7, #12]
        head_->destroy();
 801ddc2:	687b      	ldr	r3, [r7, #4]
 801ddc4:	681b      	ldr	r3, [r3, #0]
 801ddc6:	4618      	mov	r0, r3
 801ddc8:	f7ff ff96 	bl	801dcf8 <_ZN22MockNamedValueListNode7destroyEv>
        delete head_;
 801ddcc:	687b      	ldr	r3, [r7, #4]
 801ddce:	681b      	ldr	r3, [r3, #0]
 801ddd0:	2b00      	cmp	r3, #0
 801ddd2:	d003      	beq.n	801dddc <_ZN18MockNamedValueList5clearEv+0x36>
 801ddd4:	2108      	movs	r1, #8
 801ddd6:	4618      	mov	r0, r3
 801ddd8:	f7ea fff0 	bl	8008dbc <_ZdlPvj>
        head_ = n;
 801dddc:	687b      	ldr	r3, [r7, #4]
 801ddde:	68fa      	ldr	r2, [r7, #12]
 801dde0:	601a      	str	r2, [r3, #0]
    while (head_) {
 801dde2:	e7e4      	b.n	801ddae <_ZN18MockNamedValueList5clearEv+0x8>
    }
}
 801dde4:	bf00      	nop
 801dde6:	3710      	adds	r7, #16
 801dde8:	46bd      	mov	sp, r7
 801ddea:	bd80      	pop	{r7, pc}

0801ddec <_ZN18MockNamedValueList3addEP14MockNamedValue>:

void MockNamedValueList::add(MockNamedValue* newValue)
{
 801ddec:	b590      	push	{r4, r7, lr}
 801ddee:	b085      	sub	sp, #20
 801ddf0:	af00      	add	r7, sp, #0
 801ddf2:	6078      	str	r0, [r7, #4]
 801ddf4:	6039      	str	r1, [r7, #0]
    MockNamedValueListNode* newNode = new MockNamedValueListNode(newValue);
 801ddf6:	f44f 7210 	mov.w	r2, #576	; 0x240
 801ddfa:	4916      	ldr	r1, [pc, #88]	; (801de54 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x68>)
 801ddfc:	2008      	movs	r0, #8
 801ddfe:	f7ea ffc9 	bl	8008d94 <_ZnwjPKci>
 801de02:	4604      	mov	r4, r0
 801de04:	6839      	ldr	r1, [r7, #0]
 801de06:	4620      	mov	r0, r4
 801de08:	f7ff ff87 	bl	801dd1a <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>
 801de0c:	60bc      	str	r4, [r7, #8]
    if (head_ == NULLPTR)
 801de0e:	687b      	ldr	r3, [r7, #4]
 801de10:	681b      	ldr	r3, [r3, #0]
 801de12:	2b00      	cmp	r3, #0
 801de14:	d103      	bne.n	801de1e <_ZN18MockNamedValueList3addEP14MockNamedValue+0x32>
        head_ = newNode;
 801de16:	687b      	ldr	r3, [r7, #4]
 801de18:	68ba      	ldr	r2, [r7, #8]
 801de1a:	601a      	str	r2, [r3, #0]
    else {
        MockNamedValueListNode* lastNode = head_;
        while (lastNode->next()) lastNode = lastNode->next();
        lastNode->setNext(newNode);
    }
}
 801de1c:	e016      	b.n	801de4c <_ZN18MockNamedValueList3addEP14MockNamedValue+0x60>
        MockNamedValueListNode* lastNode = head_;
 801de1e:	687b      	ldr	r3, [r7, #4]
 801de20:	681b      	ldr	r3, [r3, #0]
 801de22:	60fb      	str	r3, [r7, #12]
        while (lastNode->next()) lastNode = lastNode->next();
 801de24:	68f8      	ldr	r0, [r7, #12]
 801de26:	f7ff ff4f 	bl	801dcc8 <_ZN22MockNamedValueListNode4nextEv>
 801de2a:	4603      	mov	r3, r0
 801de2c:	2b00      	cmp	r3, #0
 801de2e:	bf14      	ite	ne
 801de30:	2301      	movne	r3, #1
 801de32:	2300      	moveq	r3, #0
 801de34:	b2db      	uxtb	r3, r3
 801de36:	2b00      	cmp	r3, #0
 801de38:	d004      	beq.n	801de44 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x58>
 801de3a:	68f8      	ldr	r0, [r7, #12]
 801de3c:	f7ff ff44 	bl	801dcc8 <_ZN22MockNamedValueListNode4nextEv>
 801de40:	60f8      	str	r0, [r7, #12]
 801de42:	e7ef      	b.n	801de24 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x38>
        lastNode->setNext(newNode);
 801de44:	68b9      	ldr	r1, [r7, #8]
 801de46:	68f8      	ldr	r0, [r7, #12]
 801de48:	f7ff ff30 	bl	801dcac <_ZN22MockNamedValueListNode7setNextEPS_>
}
 801de4c:	bf00      	nop
 801de4e:	3714      	adds	r7, #20
 801de50:	46bd      	mov	sp, r7
 801de52:	bd90      	pop	{r4, r7, pc}
 801de54:	08024d4c 	.word	0x08024d4c

0801de58 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>:

MockNamedValue* MockNamedValueList::getValueByName(const SimpleString& name)
{
 801de58:	b590      	push	{r4, r7, lr}
 801de5a:	b087      	sub	sp, #28
 801de5c:	af00      	add	r7, sp, #0
 801de5e:	6078      	str	r0, [r7, #4]
 801de60:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801de62:	687b      	ldr	r3, [r7, #4]
 801de64:	681b      	ldr	r3, [r3, #0]
 801de66:	617b      	str	r3, [r7, #20]
 801de68:	697b      	ldr	r3, [r7, #20]
 801de6a:	2b00      	cmp	r3, #0
 801de6c:	d01e      	beq.n	801deac <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x54>
        if (p->getName() == name)
 801de6e:	f107 030c 	add.w	r3, r7, #12
 801de72:	6979      	ldr	r1, [r7, #20]
 801de74:	4618      	mov	r0, r3
 801de76:	f7ff ff62 	bl	801dd3e <_ZNK22MockNamedValueListNode7getNameEv>
 801de7a:	f107 030c 	add.w	r3, r7, #12
 801de7e:	6839      	ldr	r1, [r7, #0]
 801de80:	4618      	mov	r0, r3
 801de82:	f7ed ff0e 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801de86:	4603      	mov	r3, r0
 801de88:	461c      	mov	r4, r3
 801de8a:	f107 030c 	add.w	r3, r7, #12
 801de8e:	4618      	mov	r0, r3
 801de90:	f7ed fefb 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801de94:	2c00      	cmp	r4, #0
 801de96:	d004      	beq.n	801dea2 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x4a>
            return p->item();
 801de98:	6978      	ldr	r0, [r7, #20]
 801de9a:	f7ff ff21 	bl	801dce0 <_ZN22MockNamedValueListNode4itemEv>
 801de9e:	4603      	mov	r3, r0
 801dea0:	e005      	b.n	801deae <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x56>
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801dea2:	6978      	ldr	r0, [r7, #20]
 801dea4:	f7ff ff10 	bl	801dcc8 <_ZN22MockNamedValueListNode4nextEv>
 801dea8:	6178      	str	r0, [r7, #20]
 801deaa:	e7dd      	b.n	801de68 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x10>
    return NULLPTR;
 801deac:	2300      	movs	r3, #0
}
 801deae:	4618      	mov	r0, r3
 801deb0:	371c      	adds	r7, #28
 801deb2:	46bd      	mov	sp, r7
 801deb4:	bd90      	pop	{r4, r7, pc}

0801deb6 <_ZN18MockNamedValueList5beginEv>:

MockNamedValueListNode* MockNamedValueList::begin()
{
 801deb6:	b480      	push	{r7}
 801deb8:	b083      	sub	sp, #12
 801deba:	af00      	add	r7, sp, #0
 801debc:	6078      	str	r0, [r7, #4]
    return head_;
 801debe:	687b      	ldr	r3, [r7, #4]
 801dec0:	681b      	ldr	r3, [r3, #0]
}
 801dec2:	4618      	mov	r0, r3
 801dec4:	370c      	adds	r7, #12
 801dec6:	46bd      	mov	sp, r7
 801dec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801decc:	4770      	bx	lr

0801dece <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>:

struct MockNamedValueComparatorsAndCopiersRepositoryNode
{
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801dece:	b580      	push	{r7, lr}
 801ded0:	b084      	sub	sp, #16
 801ded2:	af00      	add	r7, sp, #0
 801ded4:	60f8      	str	r0, [r7, #12]
 801ded6:	60b9      	str	r1, [r7, #8]
 801ded8:	607a      	str	r2, [r7, #4]
 801deda:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(NULLPTR), next_(next) {}
 801dedc:	68fb      	ldr	r3, [r7, #12]
 801dede:	68b9      	ldr	r1, [r7, #8]
 801dee0:	4618      	mov	r0, r3
 801dee2:	f7ed fb6e 	bl	800b5c2 <_ZN12SimpleStringC1ERKS_>
 801dee6:	68fb      	ldr	r3, [r7, #12]
 801dee8:	687a      	ldr	r2, [r7, #4]
 801deea:	609a      	str	r2, [r3, #8]
 801deec:	68fb      	ldr	r3, [r7, #12]
 801deee:	2200      	movs	r2, #0
 801def0:	60da      	str	r2, [r3, #12]
 801def2:	68fb      	ldr	r3, [r7, #12]
 801def4:	683a      	ldr	r2, [r7, #0]
 801def6:	611a      	str	r2, [r3, #16]
 801def8:	68fb      	ldr	r3, [r7, #12]
 801defa:	4618      	mov	r0, r3
 801defc:	3710      	adds	r7, #16
 801defe:	46bd      	mov	sp, r7
 801df00:	bd80      	pop	{r7, pc}

0801df02 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801df02:	b580      	push	{r7, lr}
 801df04:	b084      	sub	sp, #16
 801df06:	af00      	add	r7, sp, #0
 801df08:	60f8      	str	r0, [r7, #12]
 801df0a:	60b9      	str	r1, [r7, #8]
 801df0c:	607a      	str	r2, [r7, #4]
 801df0e:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(NULLPTR), copier_(copier), next_(next) {}
 801df10:	68fb      	ldr	r3, [r7, #12]
 801df12:	68b9      	ldr	r1, [r7, #8]
 801df14:	4618      	mov	r0, r3
 801df16:	f7ed fb54 	bl	800b5c2 <_ZN12SimpleStringC1ERKS_>
 801df1a:	68fb      	ldr	r3, [r7, #12]
 801df1c:	2200      	movs	r2, #0
 801df1e:	609a      	str	r2, [r3, #8]
 801df20:	68fb      	ldr	r3, [r7, #12]
 801df22:	687a      	ldr	r2, [r7, #4]
 801df24:	60da      	str	r2, [r3, #12]
 801df26:	68fb      	ldr	r3, [r7, #12]
 801df28:	683a      	ldr	r2, [r7, #0]
 801df2a:	611a      	str	r2, [r3, #16]
 801df2c:	68fb      	ldr	r3, [r7, #12]
 801df2e:	4618      	mov	r0, r3
 801df30:	3710      	adds	r7, #16
 801df32:	46bd      	mov	sp, r7
 801df34:	bd80      	pop	{r7, pc}

0801df36 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801df36:	b580      	push	{r7, lr}
 801df38:	b084      	sub	sp, #16
 801df3a:	af00      	add	r7, sp, #0
 801df3c:	60f8      	str	r0, [r7, #12]
 801df3e:	60b9      	str	r1, [r7, #8]
 801df40:	607a      	str	r2, [r7, #4]
 801df42:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(copier), next_(next) {}
 801df44:	68fb      	ldr	r3, [r7, #12]
 801df46:	68b9      	ldr	r1, [r7, #8]
 801df48:	4618      	mov	r0, r3
 801df4a:	f7ed fb3a 	bl	800b5c2 <_ZN12SimpleStringC1ERKS_>
 801df4e:	68fb      	ldr	r3, [r7, #12]
 801df50:	687a      	ldr	r2, [r7, #4]
 801df52:	609a      	str	r2, [r3, #8]
 801df54:	68fb      	ldr	r3, [r7, #12]
 801df56:	683a      	ldr	r2, [r7, #0]
 801df58:	60da      	str	r2, [r3, #12]
 801df5a:	68fb      	ldr	r3, [r7, #12]
 801df5c:	69ba      	ldr	r2, [r7, #24]
 801df5e:	611a      	str	r2, [r3, #16]
 801df60:	68fb      	ldr	r3, [r7, #12]
 801df62:	4618      	mov	r0, r3
 801df64:	3710      	adds	r7, #16
 801df66:	46bd      	mov	sp, r7
 801df68:	bd80      	pop	{r7, pc}
	...

0801df6c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>:
    MockNamedValueComparator* comparator_;
    MockNamedValueCopier* copier_;
    MockNamedValueComparatorsAndCopiersRepositoryNode* next_;
};

MockNamedValueComparatorsAndCopiersRepository::MockNamedValueComparatorsAndCopiersRepository() : head_(NULLPTR)
 801df6c:	b480      	push	{r7}
 801df6e:	b083      	sub	sp, #12
 801df70:	af00      	add	r7, sp, #0
 801df72:	6078      	str	r0, [r7, #4]
 801df74:	4a06      	ldr	r2, [pc, #24]	; (801df90 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev+0x24>)
 801df76:	687b      	ldr	r3, [r7, #4]
 801df78:	601a      	str	r2, [r3, #0]
 801df7a:	687b      	ldr	r3, [r7, #4]
 801df7c:	2200      	movs	r2, #0
 801df7e:	605a      	str	r2, [r3, #4]
{

}
 801df80:	687b      	ldr	r3, [r7, #4]
 801df82:	4618      	mov	r0, r3
 801df84:	370c      	adds	r7, #12
 801df86:	46bd      	mov	sp, r7
 801df88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df8c:	4770      	bx	lr
 801df8e:	bf00      	nop
 801df90:	08027300 	.word	0x08027300

0801df94 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>:

MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801df94:	b580      	push	{r7, lr}
 801df96:	b082      	sub	sp, #8
 801df98:	af00      	add	r7, sp, #0
 801df9a:	6078      	str	r0, [r7, #4]
 801df9c:	4a05      	ldr	r2, [pc, #20]	; (801dfb4 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev+0x20>)
 801df9e:	687b      	ldr	r3, [r7, #4]
 801dfa0:	601a      	str	r2, [r3, #0]
{
    clear();
 801dfa2:	6878      	ldr	r0, [r7, #4]
 801dfa4:	f000 f825 	bl	801dff2 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
}
 801dfa8:	687b      	ldr	r3, [r7, #4]
 801dfaa:	4618      	mov	r0, r3
 801dfac:	3708      	adds	r7, #8
 801dfae:	46bd      	mov	sp, r7
 801dfb0:	bd80      	pop	{r7, pc}
 801dfb2:	bf00      	nop
 801dfb4:	08027300 	.word	0x08027300

0801dfb8 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD0Ev>:
MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801dfb8:	b580      	push	{r7, lr}
 801dfba:	b082      	sub	sp, #8
 801dfbc:	af00      	add	r7, sp, #0
 801dfbe:	6078      	str	r0, [r7, #4]
}
 801dfc0:	6878      	ldr	r0, [r7, #4]
 801dfc2:	f7ff ffe7 	bl	801df94 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 801dfc6:	2108      	movs	r1, #8
 801dfc8:	6878      	ldr	r0, [r7, #4]
 801dfca:	f7ea fef7 	bl	8008dbc <_ZdlPvj>
 801dfce:	687b      	ldr	r3, [r7, #4]
 801dfd0:	4618      	mov	r0, r3
 801dfd2:	3708      	adds	r7, #8
 801dfd4:	46bd      	mov	sp, r7
 801dfd6:	bd80      	pop	{r7, pc}

0801dfd8 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>:
struct MockNamedValueComparatorsAndCopiersRepositoryNode
 801dfd8:	b580      	push	{r7, lr}
 801dfda:	b082      	sub	sp, #8
 801dfdc:	af00      	add	r7, sp, #0
 801dfde:	6078      	str	r0, [r7, #4]
 801dfe0:	687b      	ldr	r3, [r7, #4]
 801dfe2:	4618      	mov	r0, r3
 801dfe4:	f7ed fe51 	bl	800bc8a <_ZN12SimpleStringD1Ev>
 801dfe8:	687b      	ldr	r3, [r7, #4]
 801dfea:	4618      	mov	r0, r3
 801dfec:	3708      	adds	r7, #8
 801dfee:	46bd      	mov	sp, r7
 801dff0:	bd80      	pop	{r7, pc}

0801dff2 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>:

void MockNamedValueComparatorsAndCopiersRepository::clear()
{
 801dff2:	b590      	push	{r4, r7, lr}
 801dff4:	b085      	sub	sp, #20
 801dff6:	af00      	add	r7, sp, #0
 801dff8:	6078      	str	r0, [r7, #4]
    while (head_) {
 801dffa:	687b      	ldr	r3, [r7, #4]
 801dffc:	685b      	ldr	r3, [r3, #4]
 801dffe:	2b00      	cmp	r3, #0
 801e000:	d012      	beq.n	801e028 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x36>
        MockNamedValueComparatorsAndCopiersRepositoryNode* next = head_->next_;
 801e002:	687b      	ldr	r3, [r7, #4]
 801e004:	685b      	ldr	r3, [r3, #4]
 801e006:	691b      	ldr	r3, [r3, #16]
 801e008:	60fb      	str	r3, [r7, #12]
        delete head_;
 801e00a:	687b      	ldr	r3, [r7, #4]
 801e00c:	685c      	ldr	r4, [r3, #4]
 801e00e:	2c00      	cmp	r4, #0
 801e010:	d006      	beq.n	801e020 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x2e>
 801e012:	4620      	mov	r0, r4
 801e014:	f7ff ffe0 	bl	801dfd8 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>
 801e018:	2114      	movs	r1, #20
 801e01a:	4620      	mov	r0, r4
 801e01c:	f7ea fece 	bl	8008dbc <_ZdlPvj>
        head_ = next;
 801e020:	687b      	ldr	r3, [r7, #4]
 801e022:	68fa      	ldr	r2, [r7, #12]
 801e024:	605a      	str	r2, [r3, #4]
    while (head_) {
 801e026:	e7e8      	b.n	801dffa <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x8>
    }
}
 801e028:	bf00      	nop
 801e02a:	3714      	adds	r7, #20
 801e02c:	46bd      	mov	sp, r7
 801e02e:	bd90      	pop	{r4, r7, pc}

0801e030 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockNamedValueComparatorsAndCopiersRepository::installComparator(const SimpleString& name, MockNamedValueComparator& comparator)
{
 801e030:	b590      	push	{r4, r7, lr}
 801e032:	b085      	sub	sp, #20
 801e034:	af00      	add	r7, sp, #0
 801e036:	60f8      	str	r0, [r7, #12]
 801e038:	60b9      	str	r1, [r7, #8]
 801e03a:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &comparator, head_);
 801e03c:	f240 227a 	movw	r2, #634	; 0x27a
 801e040:	4908      	ldr	r1, [pc, #32]	; (801e064 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x34>)
 801e042:	2014      	movs	r0, #20
 801e044:	f7ea fea6 	bl	8008d94 <_ZnwjPKci>
 801e048:	4604      	mov	r4, r0
 801e04a:	68fb      	ldr	r3, [r7, #12]
 801e04c:	685b      	ldr	r3, [r3, #4]
 801e04e:	687a      	ldr	r2, [r7, #4]
 801e050:	68b9      	ldr	r1, [r7, #8]
 801e052:	4620      	mov	r0, r4
 801e054:	f7ff ff3b 	bl	801dece <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>
 801e058:	68fb      	ldr	r3, [r7, #12]
 801e05a:	605c      	str	r4, [r3, #4]
}
 801e05c:	bf00      	nop
 801e05e:	3714      	adds	r7, #20
 801e060:	46bd      	mov	sp, r7
 801e062:	bd90      	pop	{r4, r7, pc}
 801e064:	08024d4c 	.word	0x08024d4c

0801e068 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockNamedValueComparatorsAndCopiersRepository::installCopier(const SimpleString& name, MockNamedValueCopier& copier)
{
 801e068:	b590      	push	{r4, r7, lr}
 801e06a:	b085      	sub	sp, #20
 801e06c:	af00      	add	r7, sp, #0
 801e06e:	60f8      	str	r0, [r7, #12]
 801e070:	60b9      	str	r1, [r7, #8]
 801e072:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &copier, head_);
 801e074:	f240 227f 	movw	r2, #639	; 0x27f
 801e078:	4908      	ldr	r1, [pc, #32]	; (801e09c <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier+0x34>)
 801e07a:	2014      	movs	r0, #20
 801e07c:	f7ea fe8a 	bl	8008d94 <_ZnwjPKci>
 801e080:	4604      	mov	r4, r0
 801e082:	68fb      	ldr	r3, [r7, #12]
 801e084:	685b      	ldr	r3, [r3, #4]
 801e086:	687a      	ldr	r2, [r7, #4]
 801e088:	68b9      	ldr	r1, [r7, #8]
 801e08a:	4620      	mov	r0, r4
 801e08c:	f7ff ff39 	bl	801df02 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>
 801e090:	68fb      	ldr	r3, [r7, #12]
 801e092:	605c      	str	r4, [r3, #4]
}
 801e094:	bf00      	nop
 801e096:	3714      	adds	r7, #20
 801e098:	46bd      	mov	sp, r7
 801e09a:	bd90      	pop	{r4, r7, pc}
 801e09c:	08024d4c 	.word	0x08024d4c

0801e0a0 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString>:

MockNamedValueComparator* MockNamedValueComparatorsAndCopiersRepository::getComparatorForType(const SimpleString& name)
{
 801e0a0:	b580      	push	{r7, lr}
 801e0a2:	b084      	sub	sp, #16
 801e0a4:	af00      	add	r7, sp, #0
 801e0a6:	6078      	str	r0, [r7, #4]
 801e0a8:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801e0aa:	687b      	ldr	r3, [r7, #4]
 801e0ac:	685b      	ldr	r3, [r3, #4]
 801e0ae:	60fb      	str	r3, [r7, #12]
 801e0b0:	68fb      	ldr	r3, [r7, #12]
 801e0b2:	2b00      	cmp	r3, #0
 801e0b4:	d017      	beq.n	801e0e6 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->comparator_) return p->comparator_;
 801e0b6:	68fb      	ldr	r3, [r7, #12]
 801e0b8:	6839      	ldr	r1, [r7, #0]
 801e0ba:	4618      	mov	r0, r3
 801e0bc:	f7ed fdf1 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801e0c0:	4603      	mov	r3, r0
 801e0c2:	2b00      	cmp	r3, #0
 801e0c4:	d005      	beq.n	801e0d2 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801e0c6:	68fb      	ldr	r3, [r7, #12]
 801e0c8:	689b      	ldr	r3, [r3, #8]
 801e0ca:	2b00      	cmp	r3, #0
 801e0cc:	d001      	beq.n	801e0d2 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801e0ce:	2301      	movs	r3, #1
 801e0d0:	e000      	b.n	801e0d4 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x34>
 801e0d2:	2300      	movs	r3, #0
 801e0d4:	2b00      	cmp	r3, #0
 801e0d6:	d002      	beq.n	801e0de <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x3e>
 801e0d8:	68fb      	ldr	r3, [r7, #12]
 801e0da:	689b      	ldr	r3, [r3, #8]
 801e0dc:	e004      	b.n	801e0e8 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801e0de:	68fb      	ldr	r3, [r7, #12]
 801e0e0:	691b      	ldr	r3, [r3, #16]
 801e0e2:	60fb      	str	r3, [r7, #12]
 801e0e4:	e7e4      	b.n	801e0b0 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801e0e6:	2300      	movs	r3, #0
}
 801e0e8:	4618      	mov	r0, r3
 801e0ea:	3710      	adds	r7, #16
 801e0ec:	46bd      	mov	sp, r7
 801e0ee:	bd80      	pop	{r7, pc}

0801e0f0 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString>:

MockNamedValueCopier* MockNamedValueComparatorsAndCopiersRepository::getCopierForType(const SimpleString& name)
{
 801e0f0:	b580      	push	{r7, lr}
 801e0f2:	b084      	sub	sp, #16
 801e0f4:	af00      	add	r7, sp, #0
 801e0f6:	6078      	str	r0, [r7, #4]
 801e0f8:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801e0fa:	687b      	ldr	r3, [r7, #4]
 801e0fc:	685b      	ldr	r3, [r3, #4]
 801e0fe:	60fb      	str	r3, [r7, #12]
 801e100:	68fb      	ldr	r3, [r7, #12]
 801e102:	2b00      	cmp	r3, #0
 801e104:	d017      	beq.n	801e136 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->copier_) return p->copier_;
 801e106:	68fb      	ldr	r3, [r7, #12]
 801e108:	6839      	ldr	r1, [r7, #0]
 801e10a:	4618      	mov	r0, r3
 801e10c:	f7ed fdc9 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801e110:	4603      	mov	r3, r0
 801e112:	2b00      	cmp	r3, #0
 801e114:	d005      	beq.n	801e122 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801e116:	68fb      	ldr	r3, [r7, #12]
 801e118:	68db      	ldr	r3, [r3, #12]
 801e11a:	2b00      	cmp	r3, #0
 801e11c:	d001      	beq.n	801e122 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801e11e:	2301      	movs	r3, #1
 801e120:	e000      	b.n	801e124 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x34>
 801e122:	2300      	movs	r3, #0
 801e124:	2b00      	cmp	r3, #0
 801e126:	d002      	beq.n	801e12e <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x3e>
 801e128:	68fb      	ldr	r3, [r7, #12]
 801e12a:	68db      	ldr	r3, [r3, #12]
 801e12c:	e004      	b.n	801e138 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801e12e:	68fb      	ldr	r3, [r7, #12]
 801e130:	691b      	ldr	r3, [r3, #16]
 801e132:	60fb      	str	r3, [r7, #12]
 801e134:	e7e4      	b.n	801e100 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801e136:	2300      	movs	r3, #0
}
 801e138:	4618      	mov	r0, r3
 801e13a:	3710      	adds	r7, #16
 801e13c:	46bd      	mov	sp, r7
 801e13e:	bd80      	pop	{r7, pc}

0801e140 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>:

void MockNamedValueComparatorsAndCopiersRepository::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 801e140:	b590      	push	{r4, r7, lr}
 801e142:	b087      	sub	sp, #28
 801e144:	af02      	add	r7, sp, #8
 801e146:	6078      	str	r0, [r7, #4]
 801e148:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801e14a:	683b      	ldr	r3, [r7, #0]
 801e14c:	685b      	ldr	r3, [r3, #4]
 801e14e:	60fb      	str	r3, [r7, #12]
 801e150:	68fb      	ldr	r3, [r7, #12]
 801e152:	2b00      	cmp	r3, #0
 801e154:	d018      	beq.n	801e188 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x48>
      head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(p->name_, p->comparator_, p->copier_, head_);
 801e156:	f240 2293 	movw	r2, #659	; 0x293
 801e15a:	490d      	ldr	r1, [pc, #52]	; (801e190 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x50>)
 801e15c:	2014      	movs	r0, #20
 801e15e:	f7ea fe19 	bl	8008d94 <_ZnwjPKci>
 801e162:	4604      	mov	r4, r0
 801e164:	68f9      	ldr	r1, [r7, #12]
 801e166:	68fb      	ldr	r3, [r7, #12]
 801e168:	689a      	ldr	r2, [r3, #8]
 801e16a:	68fb      	ldr	r3, [r7, #12]
 801e16c:	68d8      	ldr	r0, [r3, #12]
 801e16e:	687b      	ldr	r3, [r7, #4]
 801e170:	685b      	ldr	r3, [r3, #4]
 801e172:	9300      	str	r3, [sp, #0]
 801e174:	4603      	mov	r3, r0
 801e176:	4620      	mov	r0, r4
 801e178:	f7ff fedd 	bl	801df36 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>
 801e17c:	687b      	ldr	r3, [r7, #4]
 801e17e:	605c      	str	r4, [r3, #4]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801e180:	68fb      	ldr	r3, [r7, #12]
 801e182:	691b      	ldr	r3, [r3, #16]
 801e184:	60fb      	str	r3, [r7, #12]
 801e186:	e7e3      	b.n	801e150 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x10>
}
 801e188:	bf00      	nop
 801e18a:	3714      	adds	r7, #20
 801e18c:	46bd      	mov	sp, r7
 801e18e:	bd90      	pop	{r4, r7, pc}
 801e190:	08024d4c 	.word	0x08024d4c

0801e194 <_ZN10TestFilterC1ERK12SimpleString>:

TestFilter::TestFilter() : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
{
}

TestFilter::TestFilter(const SimpleString& filter) : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
 801e194:	b580      	push	{r7, lr}
 801e196:	b082      	sub	sp, #8
 801e198:	af00      	add	r7, sp, #0
 801e19a:	6078      	str	r0, [r7, #4]
 801e19c:	6039      	str	r1, [r7, #0]
 801e19e:	687b      	ldr	r3, [r7, #4]
 801e1a0:	490b      	ldr	r1, [pc, #44]	; (801e1d0 <_ZN10TestFilterC1ERK12SimpleString+0x3c>)
 801e1a2:	4618      	mov	r0, r3
 801e1a4:	f7ed f9b9 	bl	800b51a <_ZN12SimpleStringC1EPKc>
 801e1a8:	687b      	ldr	r3, [r7, #4]
 801e1aa:	2200      	movs	r2, #0
 801e1ac:	721a      	strb	r2, [r3, #8]
 801e1ae:	687b      	ldr	r3, [r7, #4]
 801e1b0:	2200      	movs	r2, #0
 801e1b2:	725a      	strb	r2, [r3, #9]
 801e1b4:	687b      	ldr	r3, [r7, #4]
 801e1b6:	2200      	movs	r2, #0
 801e1b8:	60da      	str	r2, [r3, #12]
{
    filter_ = filter;
 801e1ba:	687b      	ldr	r3, [r7, #4]
 801e1bc:	6839      	ldr	r1, [r7, #0]
 801e1be:	4618      	mov	r0, r3
 801e1c0:	f7ed fa17 	bl	800b5f2 <_ZN12SimpleStringaSERKS_>
}
 801e1c4:	687b      	ldr	r3, [r7, #4]
 801e1c6:	4618      	mov	r0, r3
 801e1c8:	3708      	adds	r7, #8
 801e1ca:	46bd      	mov	sp, r7
 801e1cc:	bd80      	pop	{r7, pc}
 801e1ce:	bf00      	nop
 801e1d0:	08024e28 	.word	0x08024e28

0801e1d4 <_ZN10TestFilter3addEPS_>:
{
    filter_ = filter;
}

TestFilter* TestFilter::add(TestFilter* filter)
{
 801e1d4:	b480      	push	{r7}
 801e1d6:	b083      	sub	sp, #12
 801e1d8:	af00      	add	r7, sp, #0
 801e1da:	6078      	str	r0, [r7, #4]
 801e1dc:	6039      	str	r1, [r7, #0]
    next_ = filter;
 801e1de:	687b      	ldr	r3, [r7, #4]
 801e1e0:	683a      	ldr	r2, [r7, #0]
 801e1e2:	60da      	str	r2, [r3, #12]
    return this;
 801e1e4:	687b      	ldr	r3, [r7, #4]
}
 801e1e6:	4618      	mov	r0, r3
 801e1e8:	370c      	adds	r7, #12
 801e1ea:	46bd      	mov	sp, r7
 801e1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1f0:	4770      	bx	lr

0801e1f2 <_ZNK10TestFilter7getNextEv>:

TestFilter* TestFilter::getNext() const
{
 801e1f2:	b480      	push	{r7}
 801e1f4:	b083      	sub	sp, #12
 801e1f6:	af00      	add	r7, sp, #0
 801e1f8:	6078      	str	r0, [r7, #4]
    return next_;
 801e1fa:	687b      	ldr	r3, [r7, #4]
 801e1fc:	68db      	ldr	r3, [r3, #12]
}
 801e1fe:	4618      	mov	r0, r3
 801e200:	370c      	adds	r7, #12
 801e202:	46bd      	mov	sp, r7
 801e204:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e208:	4770      	bx	lr

0801e20a <_ZN10TestFilter14strictMatchingEv>:

void TestFilter::strictMatching()
{
 801e20a:	b480      	push	{r7}
 801e20c:	b083      	sub	sp, #12
 801e20e:	af00      	add	r7, sp, #0
 801e210:	6078      	str	r0, [r7, #4]
    strictMatching_ = true;
 801e212:	687b      	ldr	r3, [r7, #4]
 801e214:	2201      	movs	r2, #1
 801e216:	721a      	strb	r2, [r3, #8]
}
 801e218:	bf00      	nop
 801e21a:	370c      	adds	r7, #12
 801e21c:	46bd      	mov	sp, r7
 801e21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e222:	4770      	bx	lr

0801e224 <_ZN10TestFilter14invertMatchingEv>:

void TestFilter::invertMatching()
{
 801e224:	b480      	push	{r7}
 801e226:	b083      	sub	sp, #12
 801e228:	af00      	add	r7, sp, #0
 801e22a:	6078      	str	r0, [r7, #4]
    invertMatching_ = true;
 801e22c:	687b      	ldr	r3, [r7, #4]
 801e22e:	2201      	movs	r2, #1
 801e230:	725a      	strb	r2, [r3, #9]
}
 801e232:	bf00      	nop
 801e234:	370c      	adds	r7, #12
 801e236:	46bd      	mov	sp, r7
 801e238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e23c:	4770      	bx	lr

0801e23e <_ZNK10TestFilter5matchERK12SimpleString>:

bool TestFilter::match(const SimpleString& name) const
{
 801e23e:	b580      	push	{r7, lr}
 801e240:	b084      	sub	sp, #16
 801e242:	af00      	add	r7, sp, #0
 801e244:	6078      	str	r0, [r7, #4]
 801e246:	6039      	str	r1, [r7, #0]
    bool matches = false;
 801e248:	2300      	movs	r3, #0
 801e24a:	73fb      	strb	r3, [r7, #15]

    if(strictMatching_)
 801e24c:	687b      	ldr	r3, [r7, #4]
 801e24e:	7a1b      	ldrb	r3, [r3, #8]
 801e250:	2b00      	cmp	r3, #0
 801e252:	d007      	beq.n	801e264 <_ZNK10TestFilter5matchERK12SimpleString+0x26>
        matches = name == filter_;
 801e254:	687b      	ldr	r3, [r7, #4]
 801e256:	4619      	mov	r1, r3
 801e258:	6838      	ldr	r0, [r7, #0]
 801e25a:	f7ed fd22 	bl	800bca2 <_ZeqRK12SimpleStringS1_>
 801e25e:	4603      	mov	r3, r0
 801e260:	73fb      	strb	r3, [r7, #15]
 801e262:	e006      	b.n	801e272 <_ZNK10TestFilter5matchERK12SimpleString+0x34>
    else
        matches = name.contains(filter_);
 801e264:	687b      	ldr	r3, [r7, #4]
 801e266:	4619      	mov	r1, r3
 801e268:	6838      	ldr	r0, [r7, #0]
 801e26a:	f7ed f9d4 	bl	800b616 <_ZNK12SimpleString8containsERKS_>
 801e26e:	4603      	mov	r3, r0
 801e270:	73fb      	strb	r3, [r7, #15]

    return invertMatching_ ? !matches : matches;
 801e272:	687b      	ldr	r3, [r7, #4]
 801e274:	7a5b      	ldrb	r3, [r3, #9]
 801e276:	2b00      	cmp	r3, #0
 801e278:	d004      	beq.n	801e284 <_ZNK10TestFilter5matchERK12SimpleString+0x46>
 801e27a:	7bfb      	ldrb	r3, [r7, #15]
 801e27c:	f083 0301 	eor.w	r3, r3, #1
 801e280:	b2db      	uxtb	r3, r3
 801e282:	e005      	b.n	801e290 <_ZNK10TestFilter5matchERK12SimpleString+0x52>
 801e284:	7bfb      	ldrb	r3, [r7, #15]
 801e286:	2b00      	cmp	r3, #0
 801e288:	bf14      	ite	ne
 801e28a:	2301      	movne	r3, #1
 801e28c:	2300      	moveq	r3, #0
 801e28e:	b2db      	uxtb	r3, r3
}
 801e290:	4618      	mov	r0, r3
 801e292:	3710      	adds	r7, #16
 801e294:	46bd      	mov	sp, r7
 801e296:	bd80      	pop	{r7, pc}

0801e298 <__cxa_guard_acquire>:
 801e298:	6803      	ldr	r3, [r0, #0]
 801e29a:	07db      	lsls	r3, r3, #31
 801e29c:	d406      	bmi.n	801e2ac <__cxa_guard_acquire+0x14>
 801e29e:	7843      	ldrb	r3, [r0, #1]
 801e2a0:	b103      	cbz	r3, 801e2a4 <__cxa_guard_acquire+0xc>
 801e2a2:	deff      	udf	#255	; 0xff
 801e2a4:	2301      	movs	r3, #1
 801e2a6:	7043      	strb	r3, [r0, #1]
 801e2a8:	4618      	mov	r0, r3
 801e2aa:	4770      	bx	lr
 801e2ac:	2000      	movs	r0, #0
 801e2ae:	4770      	bx	lr

0801e2b0 <__cxa_guard_release>:
 801e2b0:	2301      	movs	r3, #1
 801e2b2:	6003      	str	r3, [r0, #0]
 801e2b4:	4770      	bx	lr

0801e2b6 <__cxa_pure_virtual>:
 801e2b6:	b508      	push	{r3, lr}
 801e2b8:	f000 f80c 	bl	801e2d4 <_ZSt9terminatev>

0801e2bc <_ZN10__cxxabiv111__terminateEPFvvE>:
 801e2bc:	b508      	push	{r3, lr}
 801e2be:	4780      	blx	r0
 801e2c0:	f000 f816 	bl	801e2f0 <abort>

0801e2c4 <_ZSt13get_terminatev>:
 801e2c4:	4b02      	ldr	r3, [pc, #8]	; (801e2d0 <_ZSt13get_terminatev+0xc>)
 801e2c6:	6818      	ldr	r0, [r3, #0]
 801e2c8:	f3bf 8f5b 	dmb	ish
 801e2cc:	4770      	bx	lr
 801e2ce:	bf00      	nop
 801e2d0:	20000104 	.word	0x20000104

0801e2d4 <_ZSt9terminatev>:
 801e2d4:	b508      	push	{r3, lr}
 801e2d6:	f7ff fff5 	bl	801e2c4 <_ZSt13get_terminatev>
 801e2da:	f7ff ffef 	bl	801e2bc <_ZN10__cxxabiv111__terminateEPFvvE>

0801e2de <fabs>:
 801e2de:	ec51 0b10 	vmov	r0, r1, d0
 801e2e2:	ee10 2a10 	vmov	r2, s0
 801e2e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801e2ea:	ec43 2b10 	vmov	d0, r2, r3
 801e2ee:	4770      	bx	lr

0801e2f0 <abort>:
 801e2f0:	b508      	push	{r3, lr}
 801e2f2:	2006      	movs	r0, #6
 801e2f4:	f000 ff88 	bl	801f208 <raise>
 801e2f8:	2001      	movs	r0, #1
 801e2fa:	f7e2 fd42 	bl	8000d82 <_exit>

0801e2fe <atexit>:
 801e2fe:	2300      	movs	r3, #0
 801e300:	4601      	mov	r1, r0
 801e302:	461a      	mov	r2, r3
 801e304:	4618      	mov	r0, r3
 801e306:	f002 b93f 	b.w	8020588 <__register_exitproc>
	...

0801e30c <calloc>:
 801e30c:	4b02      	ldr	r3, [pc, #8]	; (801e318 <calloc+0xc>)
 801e30e:	460a      	mov	r2, r1
 801e310:	4601      	mov	r1, r0
 801e312:	6818      	ldr	r0, [r3, #0]
 801e314:	f000 bde8 	b.w	801eee8 <_calloc_r>
 801e318:	20000108 	.word	0x20000108

0801e31c <__errno>:
 801e31c:	4b01      	ldr	r3, [pc, #4]	; (801e324 <__errno+0x8>)
 801e31e:	6818      	ldr	r0, [r3, #0]
 801e320:	4770      	bx	lr
 801e322:	bf00      	nop
 801e324:	20000108 	.word	0x20000108

0801e328 <_fclose_r>:
 801e328:	b570      	push	{r4, r5, r6, lr}
 801e32a:	4605      	mov	r5, r0
 801e32c:	460c      	mov	r4, r1
 801e32e:	b911      	cbnz	r1, 801e336 <_fclose_r+0xe>
 801e330:	2600      	movs	r6, #0
 801e332:	4630      	mov	r0, r6
 801e334:	bd70      	pop	{r4, r5, r6, pc}
 801e336:	b118      	cbz	r0, 801e340 <_fclose_r+0x18>
 801e338:	6983      	ldr	r3, [r0, #24]
 801e33a:	b90b      	cbnz	r3, 801e340 <_fclose_r+0x18>
 801e33c:	f000 f994 	bl	801e668 <__sinit>
 801e340:	4b2c      	ldr	r3, [pc, #176]	; (801e3f4 <_fclose_r+0xcc>)
 801e342:	429c      	cmp	r4, r3
 801e344:	d114      	bne.n	801e370 <_fclose_r+0x48>
 801e346:	686c      	ldr	r4, [r5, #4]
 801e348:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e34a:	07d8      	lsls	r0, r3, #31
 801e34c:	d405      	bmi.n	801e35a <_fclose_r+0x32>
 801e34e:	89a3      	ldrh	r3, [r4, #12]
 801e350:	0599      	lsls	r1, r3, #22
 801e352:	d402      	bmi.n	801e35a <_fclose_r+0x32>
 801e354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e356:	f000 fd3a 	bl	801edce <__retarget_lock_acquire_recursive>
 801e35a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e35e:	b98b      	cbnz	r3, 801e384 <_fclose_r+0x5c>
 801e360:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801e362:	f016 0601 	ands.w	r6, r6, #1
 801e366:	d1e3      	bne.n	801e330 <_fclose_r+0x8>
 801e368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e36a:	f000 fd32 	bl	801edd2 <__retarget_lock_release_recursive>
 801e36e:	e7e0      	b.n	801e332 <_fclose_r+0xa>
 801e370:	4b21      	ldr	r3, [pc, #132]	; (801e3f8 <_fclose_r+0xd0>)
 801e372:	429c      	cmp	r4, r3
 801e374:	d101      	bne.n	801e37a <_fclose_r+0x52>
 801e376:	68ac      	ldr	r4, [r5, #8]
 801e378:	e7e6      	b.n	801e348 <_fclose_r+0x20>
 801e37a:	4b20      	ldr	r3, [pc, #128]	; (801e3fc <_fclose_r+0xd4>)
 801e37c:	429c      	cmp	r4, r3
 801e37e:	bf08      	it	eq
 801e380:	68ec      	ldreq	r4, [r5, #12]
 801e382:	e7e1      	b.n	801e348 <_fclose_r+0x20>
 801e384:	4621      	mov	r1, r4
 801e386:	4628      	mov	r0, r5
 801e388:	f000 f842 	bl	801e410 <__sflush_r>
 801e38c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801e38e:	4606      	mov	r6, r0
 801e390:	b133      	cbz	r3, 801e3a0 <_fclose_r+0x78>
 801e392:	6a21      	ldr	r1, [r4, #32]
 801e394:	4628      	mov	r0, r5
 801e396:	4798      	blx	r3
 801e398:	2800      	cmp	r0, #0
 801e39a:	bfb8      	it	lt
 801e39c:	f04f 36ff 	movlt.w	r6, #4294967295
 801e3a0:	89a3      	ldrh	r3, [r4, #12]
 801e3a2:	061a      	lsls	r2, r3, #24
 801e3a4:	d503      	bpl.n	801e3ae <_fclose_r+0x86>
 801e3a6:	6921      	ldr	r1, [r4, #16]
 801e3a8:	4628      	mov	r0, r5
 801e3aa:	f000 fdad 	bl	801ef08 <_free_r>
 801e3ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e3b0:	b141      	cbz	r1, 801e3c4 <_fclose_r+0x9c>
 801e3b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e3b6:	4299      	cmp	r1, r3
 801e3b8:	d002      	beq.n	801e3c0 <_fclose_r+0x98>
 801e3ba:	4628      	mov	r0, r5
 801e3bc:	f000 fda4 	bl	801ef08 <_free_r>
 801e3c0:	2300      	movs	r3, #0
 801e3c2:	6363      	str	r3, [r4, #52]	; 0x34
 801e3c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801e3c6:	b121      	cbz	r1, 801e3d2 <_fclose_r+0xaa>
 801e3c8:	4628      	mov	r0, r5
 801e3ca:	f000 fd9d 	bl	801ef08 <_free_r>
 801e3ce:	2300      	movs	r3, #0
 801e3d0:	64a3      	str	r3, [r4, #72]	; 0x48
 801e3d2:	f000 f931 	bl	801e638 <__sfp_lock_acquire>
 801e3d6:	2300      	movs	r3, #0
 801e3d8:	81a3      	strh	r3, [r4, #12]
 801e3da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e3dc:	07db      	lsls	r3, r3, #31
 801e3de:	d402      	bmi.n	801e3e6 <_fclose_r+0xbe>
 801e3e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e3e2:	f000 fcf6 	bl	801edd2 <__retarget_lock_release_recursive>
 801e3e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e3e8:	f000 fcef 	bl	801edca <__retarget_lock_close_recursive>
 801e3ec:	f000 f92a 	bl	801e644 <__sfp_lock_release>
 801e3f0:	e79f      	b.n	801e332 <_fclose_r+0xa>
 801e3f2:	bf00      	nop
 801e3f4:	080273f4 	.word	0x080273f4
 801e3f8:	08027414 	.word	0x08027414
 801e3fc:	080273d4 	.word	0x080273d4

0801e400 <fclose>:
 801e400:	4b02      	ldr	r3, [pc, #8]	; (801e40c <fclose+0xc>)
 801e402:	4601      	mov	r1, r0
 801e404:	6818      	ldr	r0, [r3, #0]
 801e406:	f7ff bf8f 	b.w	801e328 <_fclose_r>
 801e40a:	bf00      	nop
 801e40c:	20000108 	.word	0x20000108

0801e410 <__sflush_r>:
 801e410:	898a      	ldrh	r2, [r1, #12]
 801e412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e416:	4605      	mov	r5, r0
 801e418:	0710      	lsls	r0, r2, #28
 801e41a:	460c      	mov	r4, r1
 801e41c:	d458      	bmi.n	801e4d0 <__sflush_r+0xc0>
 801e41e:	684b      	ldr	r3, [r1, #4]
 801e420:	2b00      	cmp	r3, #0
 801e422:	dc05      	bgt.n	801e430 <__sflush_r+0x20>
 801e424:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e426:	2b00      	cmp	r3, #0
 801e428:	dc02      	bgt.n	801e430 <__sflush_r+0x20>
 801e42a:	2000      	movs	r0, #0
 801e42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e430:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e432:	2e00      	cmp	r6, #0
 801e434:	d0f9      	beq.n	801e42a <__sflush_r+0x1a>
 801e436:	2300      	movs	r3, #0
 801e438:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e43c:	682f      	ldr	r7, [r5, #0]
 801e43e:	602b      	str	r3, [r5, #0]
 801e440:	d032      	beq.n	801e4a8 <__sflush_r+0x98>
 801e442:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e444:	89a3      	ldrh	r3, [r4, #12]
 801e446:	075a      	lsls	r2, r3, #29
 801e448:	d505      	bpl.n	801e456 <__sflush_r+0x46>
 801e44a:	6863      	ldr	r3, [r4, #4]
 801e44c:	1ac0      	subs	r0, r0, r3
 801e44e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e450:	b10b      	cbz	r3, 801e456 <__sflush_r+0x46>
 801e452:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e454:	1ac0      	subs	r0, r0, r3
 801e456:	2300      	movs	r3, #0
 801e458:	4602      	mov	r2, r0
 801e45a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e45c:	6a21      	ldr	r1, [r4, #32]
 801e45e:	4628      	mov	r0, r5
 801e460:	47b0      	blx	r6
 801e462:	1c43      	adds	r3, r0, #1
 801e464:	89a3      	ldrh	r3, [r4, #12]
 801e466:	d106      	bne.n	801e476 <__sflush_r+0x66>
 801e468:	6829      	ldr	r1, [r5, #0]
 801e46a:	291d      	cmp	r1, #29
 801e46c:	d82c      	bhi.n	801e4c8 <__sflush_r+0xb8>
 801e46e:	4a2a      	ldr	r2, [pc, #168]	; (801e518 <__sflush_r+0x108>)
 801e470:	40ca      	lsrs	r2, r1
 801e472:	07d6      	lsls	r6, r2, #31
 801e474:	d528      	bpl.n	801e4c8 <__sflush_r+0xb8>
 801e476:	2200      	movs	r2, #0
 801e478:	6062      	str	r2, [r4, #4]
 801e47a:	04d9      	lsls	r1, r3, #19
 801e47c:	6922      	ldr	r2, [r4, #16]
 801e47e:	6022      	str	r2, [r4, #0]
 801e480:	d504      	bpl.n	801e48c <__sflush_r+0x7c>
 801e482:	1c42      	adds	r2, r0, #1
 801e484:	d101      	bne.n	801e48a <__sflush_r+0x7a>
 801e486:	682b      	ldr	r3, [r5, #0]
 801e488:	b903      	cbnz	r3, 801e48c <__sflush_r+0x7c>
 801e48a:	6560      	str	r0, [r4, #84]	; 0x54
 801e48c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e48e:	602f      	str	r7, [r5, #0]
 801e490:	2900      	cmp	r1, #0
 801e492:	d0ca      	beq.n	801e42a <__sflush_r+0x1a>
 801e494:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e498:	4299      	cmp	r1, r3
 801e49a:	d002      	beq.n	801e4a2 <__sflush_r+0x92>
 801e49c:	4628      	mov	r0, r5
 801e49e:	f000 fd33 	bl	801ef08 <_free_r>
 801e4a2:	2000      	movs	r0, #0
 801e4a4:	6360      	str	r0, [r4, #52]	; 0x34
 801e4a6:	e7c1      	b.n	801e42c <__sflush_r+0x1c>
 801e4a8:	6a21      	ldr	r1, [r4, #32]
 801e4aa:	2301      	movs	r3, #1
 801e4ac:	4628      	mov	r0, r5
 801e4ae:	47b0      	blx	r6
 801e4b0:	1c41      	adds	r1, r0, #1
 801e4b2:	d1c7      	bne.n	801e444 <__sflush_r+0x34>
 801e4b4:	682b      	ldr	r3, [r5, #0]
 801e4b6:	2b00      	cmp	r3, #0
 801e4b8:	d0c4      	beq.n	801e444 <__sflush_r+0x34>
 801e4ba:	2b1d      	cmp	r3, #29
 801e4bc:	d001      	beq.n	801e4c2 <__sflush_r+0xb2>
 801e4be:	2b16      	cmp	r3, #22
 801e4c0:	d101      	bne.n	801e4c6 <__sflush_r+0xb6>
 801e4c2:	602f      	str	r7, [r5, #0]
 801e4c4:	e7b1      	b.n	801e42a <__sflush_r+0x1a>
 801e4c6:	89a3      	ldrh	r3, [r4, #12]
 801e4c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e4cc:	81a3      	strh	r3, [r4, #12]
 801e4ce:	e7ad      	b.n	801e42c <__sflush_r+0x1c>
 801e4d0:	690f      	ldr	r7, [r1, #16]
 801e4d2:	2f00      	cmp	r7, #0
 801e4d4:	d0a9      	beq.n	801e42a <__sflush_r+0x1a>
 801e4d6:	0793      	lsls	r3, r2, #30
 801e4d8:	680e      	ldr	r6, [r1, #0]
 801e4da:	bf08      	it	eq
 801e4dc:	694b      	ldreq	r3, [r1, #20]
 801e4de:	600f      	str	r7, [r1, #0]
 801e4e0:	bf18      	it	ne
 801e4e2:	2300      	movne	r3, #0
 801e4e4:	eba6 0807 	sub.w	r8, r6, r7
 801e4e8:	608b      	str	r3, [r1, #8]
 801e4ea:	f1b8 0f00 	cmp.w	r8, #0
 801e4ee:	dd9c      	ble.n	801e42a <__sflush_r+0x1a>
 801e4f0:	6a21      	ldr	r1, [r4, #32]
 801e4f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e4f4:	4643      	mov	r3, r8
 801e4f6:	463a      	mov	r2, r7
 801e4f8:	4628      	mov	r0, r5
 801e4fa:	47b0      	blx	r6
 801e4fc:	2800      	cmp	r0, #0
 801e4fe:	dc06      	bgt.n	801e50e <__sflush_r+0xfe>
 801e500:	89a3      	ldrh	r3, [r4, #12]
 801e502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e506:	81a3      	strh	r3, [r4, #12]
 801e508:	f04f 30ff 	mov.w	r0, #4294967295
 801e50c:	e78e      	b.n	801e42c <__sflush_r+0x1c>
 801e50e:	4407      	add	r7, r0
 801e510:	eba8 0800 	sub.w	r8, r8, r0
 801e514:	e7e9      	b.n	801e4ea <__sflush_r+0xda>
 801e516:	bf00      	nop
 801e518:	20400001 	.word	0x20400001

0801e51c <_fflush_r>:
 801e51c:	b538      	push	{r3, r4, r5, lr}
 801e51e:	690b      	ldr	r3, [r1, #16]
 801e520:	4605      	mov	r5, r0
 801e522:	460c      	mov	r4, r1
 801e524:	b913      	cbnz	r3, 801e52c <_fflush_r+0x10>
 801e526:	2500      	movs	r5, #0
 801e528:	4628      	mov	r0, r5
 801e52a:	bd38      	pop	{r3, r4, r5, pc}
 801e52c:	b118      	cbz	r0, 801e536 <_fflush_r+0x1a>
 801e52e:	6983      	ldr	r3, [r0, #24]
 801e530:	b90b      	cbnz	r3, 801e536 <_fflush_r+0x1a>
 801e532:	f000 f899 	bl	801e668 <__sinit>
 801e536:	4b14      	ldr	r3, [pc, #80]	; (801e588 <_fflush_r+0x6c>)
 801e538:	429c      	cmp	r4, r3
 801e53a:	d11b      	bne.n	801e574 <_fflush_r+0x58>
 801e53c:	686c      	ldr	r4, [r5, #4]
 801e53e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e542:	2b00      	cmp	r3, #0
 801e544:	d0ef      	beq.n	801e526 <_fflush_r+0xa>
 801e546:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e548:	07d0      	lsls	r0, r2, #31
 801e54a:	d404      	bmi.n	801e556 <_fflush_r+0x3a>
 801e54c:	0599      	lsls	r1, r3, #22
 801e54e:	d402      	bmi.n	801e556 <_fflush_r+0x3a>
 801e550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e552:	f000 fc3c 	bl	801edce <__retarget_lock_acquire_recursive>
 801e556:	4628      	mov	r0, r5
 801e558:	4621      	mov	r1, r4
 801e55a:	f7ff ff59 	bl	801e410 <__sflush_r>
 801e55e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e560:	07da      	lsls	r2, r3, #31
 801e562:	4605      	mov	r5, r0
 801e564:	d4e0      	bmi.n	801e528 <_fflush_r+0xc>
 801e566:	89a3      	ldrh	r3, [r4, #12]
 801e568:	059b      	lsls	r3, r3, #22
 801e56a:	d4dd      	bmi.n	801e528 <_fflush_r+0xc>
 801e56c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e56e:	f000 fc30 	bl	801edd2 <__retarget_lock_release_recursive>
 801e572:	e7d9      	b.n	801e528 <_fflush_r+0xc>
 801e574:	4b05      	ldr	r3, [pc, #20]	; (801e58c <_fflush_r+0x70>)
 801e576:	429c      	cmp	r4, r3
 801e578:	d101      	bne.n	801e57e <_fflush_r+0x62>
 801e57a:	68ac      	ldr	r4, [r5, #8]
 801e57c:	e7df      	b.n	801e53e <_fflush_r+0x22>
 801e57e:	4b04      	ldr	r3, [pc, #16]	; (801e590 <_fflush_r+0x74>)
 801e580:	429c      	cmp	r4, r3
 801e582:	bf08      	it	eq
 801e584:	68ec      	ldreq	r4, [r5, #12]
 801e586:	e7da      	b.n	801e53e <_fflush_r+0x22>
 801e588:	080273f4 	.word	0x080273f4
 801e58c:	08027414 	.word	0x08027414
 801e590:	080273d4 	.word	0x080273d4

0801e594 <fflush>:
 801e594:	4601      	mov	r1, r0
 801e596:	b920      	cbnz	r0, 801e5a2 <fflush+0xe>
 801e598:	4b04      	ldr	r3, [pc, #16]	; (801e5ac <fflush+0x18>)
 801e59a:	4905      	ldr	r1, [pc, #20]	; (801e5b0 <fflush+0x1c>)
 801e59c:	6818      	ldr	r0, [r3, #0]
 801e59e:	f000 babb 	b.w	801eb18 <_fwalk_reent>
 801e5a2:	4b04      	ldr	r3, [pc, #16]	; (801e5b4 <fflush+0x20>)
 801e5a4:	6818      	ldr	r0, [r3, #0]
 801e5a6:	f7ff bfb9 	b.w	801e51c <_fflush_r>
 801e5aa:	bf00      	nop
 801e5ac:	08027434 	.word	0x08027434
 801e5b0:	0801e51d 	.word	0x0801e51d
 801e5b4:	20000108 	.word	0x20000108

0801e5b8 <std>:
 801e5b8:	2300      	movs	r3, #0
 801e5ba:	b510      	push	{r4, lr}
 801e5bc:	4604      	mov	r4, r0
 801e5be:	e9c0 3300 	strd	r3, r3, [r0]
 801e5c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e5c6:	6083      	str	r3, [r0, #8]
 801e5c8:	8181      	strh	r1, [r0, #12]
 801e5ca:	6643      	str	r3, [r0, #100]	; 0x64
 801e5cc:	81c2      	strh	r2, [r0, #14]
 801e5ce:	6183      	str	r3, [r0, #24]
 801e5d0:	4619      	mov	r1, r3
 801e5d2:	2208      	movs	r2, #8
 801e5d4:	305c      	adds	r0, #92	; 0x5c
 801e5d6:	f000 fc7f 	bl	801eed8 <memset>
 801e5da:	4b05      	ldr	r3, [pc, #20]	; (801e5f0 <std+0x38>)
 801e5dc:	6263      	str	r3, [r4, #36]	; 0x24
 801e5de:	4b05      	ldr	r3, [pc, #20]	; (801e5f4 <std+0x3c>)
 801e5e0:	62a3      	str	r3, [r4, #40]	; 0x28
 801e5e2:	4b05      	ldr	r3, [pc, #20]	; (801e5f8 <std+0x40>)
 801e5e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e5e6:	4b05      	ldr	r3, [pc, #20]	; (801e5fc <std+0x44>)
 801e5e8:	6224      	str	r4, [r4, #32]
 801e5ea:	6323      	str	r3, [r4, #48]	; 0x30
 801e5ec:	bd10      	pop	{r4, pc}
 801e5ee:	bf00      	nop
 801e5f0:	0801f281 	.word	0x0801f281
 801e5f4:	0801f2a7 	.word	0x0801f2a7
 801e5f8:	0801f2df 	.word	0x0801f2df
 801e5fc:	0801f303 	.word	0x0801f303

0801e600 <_cleanup_r>:
 801e600:	4901      	ldr	r1, [pc, #4]	; (801e608 <_cleanup_r+0x8>)
 801e602:	f000 ba89 	b.w	801eb18 <_fwalk_reent>
 801e606:	bf00      	nop
 801e608:	0801e51d 	.word	0x0801e51d

0801e60c <__sfmoreglue>:
 801e60c:	b570      	push	{r4, r5, r6, lr}
 801e60e:	1e4a      	subs	r2, r1, #1
 801e610:	2568      	movs	r5, #104	; 0x68
 801e612:	4355      	muls	r5, r2
 801e614:	460e      	mov	r6, r1
 801e616:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e61a:	f000 fcc5 	bl	801efa8 <_malloc_r>
 801e61e:	4604      	mov	r4, r0
 801e620:	b140      	cbz	r0, 801e634 <__sfmoreglue+0x28>
 801e622:	2100      	movs	r1, #0
 801e624:	e9c0 1600 	strd	r1, r6, [r0]
 801e628:	300c      	adds	r0, #12
 801e62a:	60a0      	str	r0, [r4, #8]
 801e62c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e630:	f000 fc52 	bl	801eed8 <memset>
 801e634:	4620      	mov	r0, r4
 801e636:	bd70      	pop	{r4, r5, r6, pc}

0801e638 <__sfp_lock_acquire>:
 801e638:	4801      	ldr	r0, [pc, #4]	; (801e640 <__sfp_lock_acquire+0x8>)
 801e63a:	f000 bbc8 	b.w	801edce <__retarget_lock_acquire_recursive>
 801e63e:	bf00      	nop
 801e640:	20000e8c 	.word	0x20000e8c

0801e644 <__sfp_lock_release>:
 801e644:	4801      	ldr	r0, [pc, #4]	; (801e64c <__sfp_lock_release+0x8>)
 801e646:	f000 bbc4 	b.w	801edd2 <__retarget_lock_release_recursive>
 801e64a:	bf00      	nop
 801e64c:	20000e8c 	.word	0x20000e8c

0801e650 <__sinit_lock_acquire>:
 801e650:	4801      	ldr	r0, [pc, #4]	; (801e658 <__sinit_lock_acquire+0x8>)
 801e652:	f000 bbbc 	b.w	801edce <__retarget_lock_acquire_recursive>
 801e656:	bf00      	nop
 801e658:	20000e87 	.word	0x20000e87

0801e65c <__sinit_lock_release>:
 801e65c:	4801      	ldr	r0, [pc, #4]	; (801e664 <__sinit_lock_release+0x8>)
 801e65e:	f000 bbb8 	b.w	801edd2 <__retarget_lock_release_recursive>
 801e662:	bf00      	nop
 801e664:	20000e87 	.word	0x20000e87

0801e668 <__sinit>:
 801e668:	b510      	push	{r4, lr}
 801e66a:	4604      	mov	r4, r0
 801e66c:	f7ff fff0 	bl	801e650 <__sinit_lock_acquire>
 801e670:	69a3      	ldr	r3, [r4, #24]
 801e672:	b11b      	cbz	r3, 801e67c <__sinit+0x14>
 801e674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e678:	f7ff bff0 	b.w	801e65c <__sinit_lock_release>
 801e67c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e680:	6523      	str	r3, [r4, #80]	; 0x50
 801e682:	4b13      	ldr	r3, [pc, #76]	; (801e6d0 <__sinit+0x68>)
 801e684:	4a13      	ldr	r2, [pc, #76]	; (801e6d4 <__sinit+0x6c>)
 801e686:	681b      	ldr	r3, [r3, #0]
 801e688:	62a2      	str	r2, [r4, #40]	; 0x28
 801e68a:	42a3      	cmp	r3, r4
 801e68c:	bf04      	itt	eq
 801e68e:	2301      	moveq	r3, #1
 801e690:	61a3      	streq	r3, [r4, #24]
 801e692:	4620      	mov	r0, r4
 801e694:	f000 f820 	bl	801e6d8 <__sfp>
 801e698:	6060      	str	r0, [r4, #4]
 801e69a:	4620      	mov	r0, r4
 801e69c:	f000 f81c 	bl	801e6d8 <__sfp>
 801e6a0:	60a0      	str	r0, [r4, #8]
 801e6a2:	4620      	mov	r0, r4
 801e6a4:	f000 f818 	bl	801e6d8 <__sfp>
 801e6a8:	2200      	movs	r2, #0
 801e6aa:	60e0      	str	r0, [r4, #12]
 801e6ac:	2104      	movs	r1, #4
 801e6ae:	6860      	ldr	r0, [r4, #4]
 801e6b0:	f7ff ff82 	bl	801e5b8 <std>
 801e6b4:	68a0      	ldr	r0, [r4, #8]
 801e6b6:	2201      	movs	r2, #1
 801e6b8:	2109      	movs	r1, #9
 801e6ba:	f7ff ff7d 	bl	801e5b8 <std>
 801e6be:	68e0      	ldr	r0, [r4, #12]
 801e6c0:	2202      	movs	r2, #2
 801e6c2:	2112      	movs	r1, #18
 801e6c4:	f7ff ff78 	bl	801e5b8 <std>
 801e6c8:	2301      	movs	r3, #1
 801e6ca:	61a3      	str	r3, [r4, #24]
 801e6cc:	e7d2      	b.n	801e674 <__sinit+0xc>
 801e6ce:	bf00      	nop
 801e6d0:	08027434 	.word	0x08027434
 801e6d4:	0801e601 	.word	0x0801e601

0801e6d8 <__sfp>:
 801e6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e6da:	4607      	mov	r7, r0
 801e6dc:	f7ff ffac 	bl	801e638 <__sfp_lock_acquire>
 801e6e0:	4b1e      	ldr	r3, [pc, #120]	; (801e75c <__sfp+0x84>)
 801e6e2:	681e      	ldr	r6, [r3, #0]
 801e6e4:	69b3      	ldr	r3, [r6, #24]
 801e6e6:	b913      	cbnz	r3, 801e6ee <__sfp+0x16>
 801e6e8:	4630      	mov	r0, r6
 801e6ea:	f7ff ffbd 	bl	801e668 <__sinit>
 801e6ee:	3648      	adds	r6, #72	; 0x48
 801e6f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e6f4:	3b01      	subs	r3, #1
 801e6f6:	d503      	bpl.n	801e700 <__sfp+0x28>
 801e6f8:	6833      	ldr	r3, [r6, #0]
 801e6fa:	b30b      	cbz	r3, 801e740 <__sfp+0x68>
 801e6fc:	6836      	ldr	r6, [r6, #0]
 801e6fe:	e7f7      	b.n	801e6f0 <__sfp+0x18>
 801e700:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e704:	b9d5      	cbnz	r5, 801e73c <__sfp+0x64>
 801e706:	4b16      	ldr	r3, [pc, #88]	; (801e760 <__sfp+0x88>)
 801e708:	60e3      	str	r3, [r4, #12]
 801e70a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e70e:	6665      	str	r5, [r4, #100]	; 0x64
 801e710:	f000 fb5a 	bl	801edc8 <__retarget_lock_init_recursive>
 801e714:	f7ff ff96 	bl	801e644 <__sfp_lock_release>
 801e718:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e71c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e720:	6025      	str	r5, [r4, #0]
 801e722:	61a5      	str	r5, [r4, #24]
 801e724:	2208      	movs	r2, #8
 801e726:	4629      	mov	r1, r5
 801e728:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e72c:	f000 fbd4 	bl	801eed8 <memset>
 801e730:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e734:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e738:	4620      	mov	r0, r4
 801e73a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e73c:	3468      	adds	r4, #104	; 0x68
 801e73e:	e7d9      	b.n	801e6f4 <__sfp+0x1c>
 801e740:	2104      	movs	r1, #4
 801e742:	4638      	mov	r0, r7
 801e744:	f7ff ff62 	bl	801e60c <__sfmoreglue>
 801e748:	4604      	mov	r4, r0
 801e74a:	6030      	str	r0, [r6, #0]
 801e74c:	2800      	cmp	r0, #0
 801e74e:	d1d5      	bne.n	801e6fc <__sfp+0x24>
 801e750:	f7ff ff78 	bl	801e644 <__sfp_lock_release>
 801e754:	230c      	movs	r3, #12
 801e756:	603b      	str	r3, [r7, #0]
 801e758:	e7ee      	b.n	801e738 <__sfp+0x60>
 801e75a:	bf00      	nop
 801e75c:	08027434 	.word	0x08027434
 801e760:	ffff0001 	.word	0xffff0001

0801e764 <_fopen_r>:
 801e764:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e766:	460f      	mov	r7, r1
 801e768:	4611      	mov	r1, r2
 801e76a:	aa01      	add	r2, sp, #4
 801e76c:	4605      	mov	r5, r0
 801e76e:	f001 ff9f 	bl	80206b0 <__sflags>
 801e772:	4606      	mov	r6, r0
 801e774:	b918      	cbnz	r0, 801e77e <_fopen_r+0x1a>
 801e776:	2400      	movs	r4, #0
 801e778:	4620      	mov	r0, r4
 801e77a:	b003      	add	sp, #12
 801e77c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e77e:	4628      	mov	r0, r5
 801e780:	f7ff ffaa 	bl	801e6d8 <__sfp>
 801e784:	4604      	mov	r4, r0
 801e786:	2800      	cmp	r0, #0
 801e788:	d0f5      	beq.n	801e776 <_fopen_r+0x12>
 801e78a:	4639      	mov	r1, r7
 801e78c:	9a01      	ldr	r2, [sp, #4]
 801e78e:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 801e792:	4628      	mov	r0, r5
 801e794:	f000 fc62 	bl	801f05c <_open_r>
 801e798:	1e07      	subs	r7, r0, #0
 801e79a:	da09      	bge.n	801e7b0 <_fopen_r+0x4c>
 801e79c:	2500      	movs	r5, #0
 801e79e:	f7ff ff4b 	bl	801e638 <__sfp_lock_acquire>
 801e7a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e7a4:	81a5      	strh	r5, [r4, #12]
 801e7a6:	f000 fb10 	bl	801edca <__retarget_lock_close_recursive>
 801e7aa:	f7ff ff4b 	bl	801e644 <__sfp_lock_release>
 801e7ae:	e7e2      	b.n	801e776 <_fopen_r+0x12>
 801e7b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e7b2:	07db      	lsls	r3, r3, #31
 801e7b4:	d405      	bmi.n	801e7c2 <_fopen_r+0x5e>
 801e7b6:	89a3      	ldrh	r3, [r4, #12]
 801e7b8:	0598      	lsls	r0, r3, #22
 801e7ba:	d402      	bmi.n	801e7c2 <_fopen_r+0x5e>
 801e7bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e7be:	f000 fb06 	bl	801edce <__retarget_lock_acquire_recursive>
 801e7c2:	4b0e      	ldr	r3, [pc, #56]	; (801e7fc <_fopen_r+0x98>)
 801e7c4:	6263      	str	r3, [r4, #36]	; 0x24
 801e7c6:	4b0e      	ldr	r3, [pc, #56]	; (801e800 <_fopen_r+0x9c>)
 801e7c8:	62a3      	str	r3, [r4, #40]	; 0x28
 801e7ca:	4b0e      	ldr	r3, [pc, #56]	; (801e804 <_fopen_r+0xa0>)
 801e7cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e7ce:	05f1      	lsls	r1, r6, #23
 801e7d0:	4b0d      	ldr	r3, [pc, #52]	; (801e808 <_fopen_r+0xa4>)
 801e7d2:	81e7      	strh	r7, [r4, #14]
 801e7d4:	81a6      	strh	r6, [r4, #12]
 801e7d6:	6224      	str	r4, [r4, #32]
 801e7d8:	6323      	str	r3, [r4, #48]	; 0x30
 801e7da:	d505      	bpl.n	801e7e8 <_fopen_r+0x84>
 801e7dc:	2302      	movs	r3, #2
 801e7de:	2200      	movs	r2, #0
 801e7e0:	4621      	mov	r1, r4
 801e7e2:	4628      	mov	r0, r5
 801e7e4:	f000 f888 	bl	801e8f8 <_fseek_r>
 801e7e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e7ea:	07da      	lsls	r2, r3, #31
 801e7ec:	d4c4      	bmi.n	801e778 <_fopen_r+0x14>
 801e7ee:	89a3      	ldrh	r3, [r4, #12]
 801e7f0:	059b      	lsls	r3, r3, #22
 801e7f2:	d4c1      	bmi.n	801e778 <_fopen_r+0x14>
 801e7f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e7f6:	f000 faec 	bl	801edd2 <__retarget_lock_release_recursive>
 801e7fa:	e7bd      	b.n	801e778 <_fopen_r+0x14>
 801e7fc:	0801f281 	.word	0x0801f281
 801e800:	0801f2a7 	.word	0x0801f2a7
 801e804:	0801f2df 	.word	0x0801f2df
 801e808:	0801f303 	.word	0x0801f303

0801e80c <fopen>:
 801e80c:	4b02      	ldr	r3, [pc, #8]	; (801e818 <fopen+0xc>)
 801e80e:	460a      	mov	r2, r1
 801e810:	4601      	mov	r1, r0
 801e812:	6818      	ldr	r0, [r3, #0]
 801e814:	f7ff bfa6 	b.w	801e764 <_fopen_r>
 801e818:	20000108 	.word	0x20000108

0801e81c <_fputs_r>:
 801e81c:	b570      	push	{r4, r5, r6, lr}
 801e81e:	460e      	mov	r6, r1
 801e820:	4614      	mov	r4, r2
 801e822:	4605      	mov	r5, r0
 801e824:	b118      	cbz	r0, 801e82e <_fputs_r+0x12>
 801e826:	6983      	ldr	r3, [r0, #24]
 801e828:	b90b      	cbnz	r3, 801e82e <_fputs_r+0x12>
 801e82a:	f7ff ff1d 	bl	801e668 <__sinit>
 801e82e:	4b2b      	ldr	r3, [pc, #172]	; (801e8dc <_fputs_r+0xc0>)
 801e830:	429c      	cmp	r4, r3
 801e832:	d11e      	bne.n	801e872 <_fputs_r+0x56>
 801e834:	686c      	ldr	r4, [r5, #4]
 801e836:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e838:	07da      	lsls	r2, r3, #31
 801e83a:	d405      	bmi.n	801e848 <_fputs_r+0x2c>
 801e83c:	89a3      	ldrh	r3, [r4, #12]
 801e83e:	059b      	lsls	r3, r3, #22
 801e840:	d402      	bmi.n	801e848 <_fputs_r+0x2c>
 801e842:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e844:	f000 fac3 	bl	801edce <__retarget_lock_acquire_recursive>
 801e848:	89a3      	ldrh	r3, [r4, #12]
 801e84a:	0718      	lsls	r0, r3, #28
 801e84c:	d51b      	bpl.n	801e886 <_fputs_r+0x6a>
 801e84e:	6923      	ldr	r3, [r4, #16]
 801e850:	b1cb      	cbz	r3, 801e886 <_fputs_r+0x6a>
 801e852:	3e01      	subs	r6, #1
 801e854:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801e858:	bb39      	cbnz	r1, 801e8aa <_fputs_r+0x8e>
 801e85a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801e85c:	f015 0501 	ands.w	r5, r5, #1
 801e860:	d139      	bne.n	801e8d6 <_fputs_r+0xba>
 801e862:	89a3      	ldrh	r3, [r4, #12]
 801e864:	0599      	lsls	r1, r3, #22
 801e866:	d402      	bmi.n	801e86e <_fputs_r+0x52>
 801e868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e86a:	f000 fab2 	bl	801edd2 <__retarget_lock_release_recursive>
 801e86e:	4628      	mov	r0, r5
 801e870:	bd70      	pop	{r4, r5, r6, pc}
 801e872:	4b1b      	ldr	r3, [pc, #108]	; (801e8e0 <_fputs_r+0xc4>)
 801e874:	429c      	cmp	r4, r3
 801e876:	d101      	bne.n	801e87c <_fputs_r+0x60>
 801e878:	68ac      	ldr	r4, [r5, #8]
 801e87a:	e7dc      	b.n	801e836 <_fputs_r+0x1a>
 801e87c:	4b19      	ldr	r3, [pc, #100]	; (801e8e4 <_fputs_r+0xc8>)
 801e87e:	429c      	cmp	r4, r3
 801e880:	bf08      	it	eq
 801e882:	68ec      	ldreq	r4, [r5, #12]
 801e884:	e7d7      	b.n	801e836 <_fputs_r+0x1a>
 801e886:	4621      	mov	r1, r4
 801e888:	4628      	mov	r0, r5
 801e88a:	f001 fe0f 	bl	80204ac <__swsetup_r>
 801e88e:	2800      	cmp	r0, #0
 801e890:	d0df      	beq.n	801e852 <_fputs_r+0x36>
 801e892:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e894:	07da      	lsls	r2, r3, #31
 801e896:	d405      	bmi.n	801e8a4 <_fputs_r+0x88>
 801e898:	89a3      	ldrh	r3, [r4, #12]
 801e89a:	059b      	lsls	r3, r3, #22
 801e89c:	d402      	bmi.n	801e8a4 <_fputs_r+0x88>
 801e89e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e8a0:	f000 fa97 	bl	801edd2 <__retarget_lock_release_recursive>
 801e8a4:	f04f 35ff 	mov.w	r5, #4294967295
 801e8a8:	e7e1      	b.n	801e86e <_fputs_r+0x52>
 801e8aa:	68a3      	ldr	r3, [r4, #8]
 801e8ac:	3b01      	subs	r3, #1
 801e8ae:	2b00      	cmp	r3, #0
 801e8b0:	60a3      	str	r3, [r4, #8]
 801e8b2:	da04      	bge.n	801e8be <_fputs_r+0xa2>
 801e8b4:	69a2      	ldr	r2, [r4, #24]
 801e8b6:	4293      	cmp	r3, r2
 801e8b8:	db06      	blt.n	801e8c8 <_fputs_r+0xac>
 801e8ba:	290a      	cmp	r1, #10
 801e8bc:	d004      	beq.n	801e8c8 <_fputs_r+0xac>
 801e8be:	6823      	ldr	r3, [r4, #0]
 801e8c0:	1c5a      	adds	r2, r3, #1
 801e8c2:	6022      	str	r2, [r4, #0]
 801e8c4:	7019      	strb	r1, [r3, #0]
 801e8c6:	e7c5      	b.n	801e854 <_fputs_r+0x38>
 801e8c8:	4622      	mov	r2, r4
 801e8ca:	4628      	mov	r0, r5
 801e8cc:	f001 fd8a 	bl	80203e4 <__swbuf_r>
 801e8d0:	3001      	adds	r0, #1
 801e8d2:	d1bf      	bne.n	801e854 <_fputs_r+0x38>
 801e8d4:	e7dd      	b.n	801e892 <_fputs_r+0x76>
 801e8d6:	460d      	mov	r5, r1
 801e8d8:	e7c9      	b.n	801e86e <_fputs_r+0x52>
 801e8da:	bf00      	nop
 801e8dc:	080273f4 	.word	0x080273f4
 801e8e0:	08027414 	.word	0x08027414
 801e8e4:	080273d4 	.word	0x080273d4

0801e8e8 <fputs>:
 801e8e8:	4b02      	ldr	r3, [pc, #8]	; (801e8f4 <fputs+0xc>)
 801e8ea:	460a      	mov	r2, r1
 801e8ec:	4601      	mov	r1, r0
 801e8ee:	6818      	ldr	r0, [r3, #0]
 801e8f0:	f7ff bf94 	b.w	801e81c <_fputs_r>
 801e8f4:	20000108 	.word	0x20000108

0801e8f8 <_fseek_r>:
 801e8f8:	f000 b800 	b.w	801e8fc <_fseeko_r>

0801e8fc <_fseeko_r>:
 801e8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e900:	460c      	mov	r4, r1
 801e902:	4617      	mov	r7, r2
 801e904:	461e      	mov	r6, r3
 801e906:	4605      	mov	r5, r0
 801e908:	b118      	cbz	r0, 801e912 <_fseeko_r+0x16>
 801e90a:	6983      	ldr	r3, [r0, #24]
 801e90c:	b90b      	cbnz	r3, 801e912 <_fseeko_r+0x16>
 801e90e:	f7ff feab 	bl	801e668 <__sinit>
 801e912:	4b44      	ldr	r3, [pc, #272]	; (801ea24 <_fseeko_r+0x128>)
 801e914:	429c      	cmp	r4, r3
 801e916:	d122      	bne.n	801e95e <_fseeko_r+0x62>
 801e918:	686c      	ldr	r4, [r5, #4]
 801e91a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e91c:	07d9      	lsls	r1, r3, #31
 801e91e:	d405      	bmi.n	801e92c <_fseeko_r+0x30>
 801e920:	89a3      	ldrh	r3, [r4, #12]
 801e922:	059a      	lsls	r2, r3, #22
 801e924:	d402      	bmi.n	801e92c <_fseeko_r+0x30>
 801e926:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e928:	f000 fa51 	bl	801edce <__retarget_lock_acquire_recursive>
 801e92c:	89a3      	ldrh	r3, [r4, #12]
 801e92e:	f403 7384 	and.w	r3, r3, #264	; 0x108
 801e932:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 801e936:	d103      	bne.n	801e940 <_fseeko_r+0x44>
 801e938:	4621      	mov	r1, r4
 801e93a:	4628      	mov	r0, r5
 801e93c:	f7ff fdee 	bl	801e51c <_fflush_r>
 801e940:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 801e944:	f1b8 0f00 	cmp.w	r8, #0
 801e948:	d113      	bne.n	801e972 <_fseeko_r+0x76>
 801e94a:	231d      	movs	r3, #29
 801e94c:	602b      	str	r3, [r5, #0]
 801e94e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e950:	07d9      	lsls	r1, r3, #31
 801e952:	d55d      	bpl.n	801ea10 <_fseeko_r+0x114>
 801e954:	f04f 36ff 	mov.w	r6, #4294967295
 801e958:	4630      	mov	r0, r6
 801e95a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e95e:	4b32      	ldr	r3, [pc, #200]	; (801ea28 <_fseeko_r+0x12c>)
 801e960:	429c      	cmp	r4, r3
 801e962:	d101      	bne.n	801e968 <_fseeko_r+0x6c>
 801e964:	68ac      	ldr	r4, [r5, #8]
 801e966:	e7d8      	b.n	801e91a <_fseeko_r+0x1e>
 801e968:	4b30      	ldr	r3, [pc, #192]	; (801ea2c <_fseeko_r+0x130>)
 801e96a:	429c      	cmp	r4, r3
 801e96c:	bf08      	it	eq
 801e96e:	68ec      	ldreq	r4, [r5, #12]
 801e970:	e7d3      	b.n	801e91a <_fseeko_r+0x1e>
 801e972:	2e01      	cmp	r6, #1
 801e974:	d036      	beq.n	801e9e4 <_fseeko_r+0xe8>
 801e976:	f036 0302 	bics.w	r3, r6, #2
 801e97a:	d147      	bne.n	801ea0c <_fseeko_r+0x110>
 801e97c:	6923      	ldr	r3, [r4, #16]
 801e97e:	b91b      	cbnz	r3, 801e988 <_fseeko_r+0x8c>
 801e980:	4621      	mov	r1, r4
 801e982:	4628      	mov	r0, r5
 801e984:	f000 fa4a 	bl	801ee1c <__smakebuf_r>
 801e988:	4621      	mov	r1, r4
 801e98a:	4628      	mov	r0, r5
 801e98c:	f7ff fdc6 	bl	801e51c <_fflush_r>
 801e990:	2800      	cmp	r0, #0
 801e992:	d1dc      	bne.n	801e94e <_fseeko_r+0x52>
 801e994:	6a21      	ldr	r1, [r4, #32]
 801e996:	4633      	mov	r3, r6
 801e998:	463a      	mov	r2, r7
 801e99a:	4628      	mov	r0, r5
 801e99c:	47c0      	blx	r8
 801e99e:	3001      	adds	r0, #1
 801e9a0:	d0d5      	beq.n	801e94e <_fseeko_r+0x52>
 801e9a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e9a4:	b141      	cbz	r1, 801e9b8 <_fseeko_r+0xbc>
 801e9a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e9aa:	4299      	cmp	r1, r3
 801e9ac:	d002      	beq.n	801e9b4 <_fseeko_r+0xb8>
 801e9ae:	4628      	mov	r0, r5
 801e9b0:	f000 faaa 	bl	801ef08 <_free_r>
 801e9b4:	2300      	movs	r3, #0
 801e9b6:	6363      	str	r3, [r4, #52]	; 0x34
 801e9b8:	6923      	ldr	r3, [r4, #16]
 801e9ba:	6023      	str	r3, [r4, #0]
 801e9bc:	89a3      	ldrh	r3, [r4, #12]
 801e9be:	2500      	movs	r5, #0
 801e9c0:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 801e9c4:	6065      	str	r5, [r4, #4]
 801e9c6:	81a3      	strh	r3, [r4, #12]
 801e9c8:	2208      	movs	r2, #8
 801e9ca:	4629      	mov	r1, r5
 801e9cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e9d0:	f000 fa82 	bl	801eed8 <memset>
 801e9d4:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801e9d6:	f016 0601 	ands.w	r6, r6, #1
 801e9da:	d120      	bne.n	801ea1e <_fseeko_r+0x122>
 801e9dc:	89a3      	ldrh	r3, [r4, #12]
 801e9de:	059b      	lsls	r3, r3, #22
 801e9e0:	d4ba      	bmi.n	801e958 <_fseeko_r+0x5c>
 801e9e2:	e00c      	b.n	801e9fe <_fseeko_r+0x102>
 801e9e4:	4621      	mov	r1, r4
 801e9e6:	4628      	mov	r0, r5
 801e9e8:	f000 f822 	bl	801ea30 <_ftello_r>
 801e9ec:	1c43      	adds	r3, r0, #1
 801e9ee:	4606      	mov	r6, r0
 801e9f0:	d109      	bne.n	801ea06 <_fseeko_r+0x10a>
 801e9f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e9f4:	07dd      	lsls	r5, r3, #31
 801e9f6:	d4ad      	bmi.n	801e954 <_fseeko_r+0x58>
 801e9f8:	89a3      	ldrh	r3, [r4, #12]
 801e9fa:	0598      	lsls	r0, r3, #22
 801e9fc:	d4aa      	bmi.n	801e954 <_fseeko_r+0x58>
 801e9fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ea00:	f000 f9e7 	bl	801edd2 <__retarget_lock_release_recursive>
 801ea04:	e7a8      	b.n	801e958 <_fseeko_r+0x5c>
 801ea06:	4407      	add	r7, r0
 801ea08:	2600      	movs	r6, #0
 801ea0a:	e7b7      	b.n	801e97c <_fseeko_r+0x80>
 801ea0c:	2316      	movs	r3, #22
 801ea0e:	e79d      	b.n	801e94c <_fseeko_r+0x50>
 801ea10:	89a3      	ldrh	r3, [r4, #12]
 801ea12:	059a      	lsls	r2, r3, #22
 801ea14:	d49e      	bmi.n	801e954 <_fseeko_r+0x58>
 801ea16:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ea18:	f000 f9db 	bl	801edd2 <__retarget_lock_release_recursive>
 801ea1c:	e79a      	b.n	801e954 <_fseeko_r+0x58>
 801ea1e:	462e      	mov	r6, r5
 801ea20:	e79a      	b.n	801e958 <_fseeko_r+0x5c>
 801ea22:	bf00      	nop
 801ea24:	080273f4 	.word	0x080273f4
 801ea28:	08027414 	.word	0x08027414
 801ea2c:	080273d4 	.word	0x080273d4

0801ea30 <_ftello_r>:
 801ea30:	b570      	push	{r4, r5, r6, lr}
 801ea32:	460c      	mov	r4, r1
 801ea34:	4605      	mov	r5, r0
 801ea36:	b118      	cbz	r0, 801ea40 <_ftello_r+0x10>
 801ea38:	6983      	ldr	r3, [r0, #24]
 801ea3a:	b90b      	cbnz	r3, 801ea40 <_ftello_r+0x10>
 801ea3c:	f7ff fe14 	bl	801e668 <__sinit>
 801ea40:	4b32      	ldr	r3, [pc, #200]	; (801eb0c <_ftello_r+0xdc>)
 801ea42:	429c      	cmp	r4, r3
 801ea44:	d114      	bne.n	801ea70 <_ftello_r+0x40>
 801ea46:	686c      	ldr	r4, [r5, #4]
 801ea48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ea4a:	07da      	lsls	r2, r3, #31
 801ea4c:	d405      	bmi.n	801ea5a <_ftello_r+0x2a>
 801ea4e:	89a3      	ldrh	r3, [r4, #12]
 801ea50:	059b      	lsls	r3, r3, #22
 801ea52:	d402      	bmi.n	801ea5a <_ftello_r+0x2a>
 801ea54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ea56:	f000 f9ba 	bl	801edce <__retarget_lock_acquire_recursive>
 801ea5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ea5c:	b9ce      	cbnz	r6, 801ea92 <_ftello_r+0x62>
 801ea5e:	231d      	movs	r3, #29
 801ea60:	602b      	str	r3, [r5, #0]
 801ea62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ea64:	07de      	lsls	r6, r3, #31
 801ea66:	d50d      	bpl.n	801ea84 <_ftello_r+0x54>
 801ea68:	f04f 35ff 	mov.w	r5, #4294967295
 801ea6c:	4628      	mov	r0, r5
 801ea6e:	bd70      	pop	{r4, r5, r6, pc}
 801ea70:	4b27      	ldr	r3, [pc, #156]	; (801eb10 <_ftello_r+0xe0>)
 801ea72:	429c      	cmp	r4, r3
 801ea74:	d101      	bne.n	801ea7a <_ftello_r+0x4a>
 801ea76:	68ac      	ldr	r4, [r5, #8]
 801ea78:	e7e6      	b.n	801ea48 <_ftello_r+0x18>
 801ea7a:	4b26      	ldr	r3, [pc, #152]	; (801eb14 <_ftello_r+0xe4>)
 801ea7c:	429c      	cmp	r4, r3
 801ea7e:	bf08      	it	eq
 801ea80:	68ec      	ldreq	r4, [r5, #12]
 801ea82:	e7e1      	b.n	801ea48 <_ftello_r+0x18>
 801ea84:	89a3      	ldrh	r3, [r4, #12]
 801ea86:	059d      	lsls	r5, r3, #22
 801ea88:	d4ee      	bmi.n	801ea68 <_ftello_r+0x38>
 801ea8a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ea8c:	f000 f9a1 	bl	801edd2 <__retarget_lock_release_recursive>
 801ea90:	e7ea      	b.n	801ea68 <_ftello_r+0x38>
 801ea92:	89a2      	ldrh	r2, [r4, #12]
 801ea94:	f002 030c 	and.w	r3, r2, #12
 801ea98:	2b08      	cmp	r3, #8
 801ea9a:	d119      	bne.n	801ead0 <_ftello_r+0xa0>
 801ea9c:	6823      	ldr	r3, [r4, #0]
 801ea9e:	b1bb      	cbz	r3, 801ead0 <_ftello_r+0xa0>
 801eaa0:	6921      	ldr	r1, [r4, #16]
 801eaa2:	1a5b      	subs	r3, r3, r1
 801eaa4:	2b00      	cmp	r3, #0
 801eaa6:	dd13      	ble.n	801ead0 <_ftello_r+0xa0>
 801eaa8:	05d0      	lsls	r0, r2, #23
 801eaaa:	d511      	bpl.n	801ead0 <_ftello_r+0xa0>
 801eaac:	2302      	movs	r3, #2
 801eaae:	2200      	movs	r2, #0
 801eab0:	6a21      	ldr	r1, [r4, #32]
 801eab2:	4628      	mov	r0, r5
 801eab4:	47b0      	blx	r6
 801eab6:	1c41      	adds	r1, r0, #1
 801eab8:	4605      	mov	r5, r0
 801eaba:	d10d      	bne.n	801ead8 <_ftello_r+0xa8>
 801eabc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801eabe:	07da      	lsls	r2, r3, #31
 801eac0:	d4d2      	bmi.n	801ea68 <_ftello_r+0x38>
 801eac2:	89a3      	ldrh	r3, [r4, #12]
 801eac4:	059b      	lsls	r3, r3, #22
 801eac6:	d4cf      	bmi.n	801ea68 <_ftello_r+0x38>
 801eac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801eaca:	f000 f982 	bl	801edd2 <__retarget_lock_release_recursive>
 801eace:	e7cd      	b.n	801ea6c <_ftello_r+0x3c>
 801ead0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ead4:	d00f      	beq.n	801eaf6 <_ftello_r+0xc6>
 801ead6:	6d65      	ldr	r5, [r4, #84]	; 0x54
 801ead8:	89a2      	ldrh	r2, [r4, #12]
 801eada:	0756      	lsls	r6, r2, #29
 801eadc:	d50d      	bpl.n	801eafa <_ftello_r+0xca>
 801eade:	6863      	ldr	r3, [r4, #4]
 801eae0:	1aed      	subs	r5, r5, r3
 801eae2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801eae4:	b10b      	cbz	r3, 801eaea <_ftello_r+0xba>
 801eae6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801eae8:	1aed      	subs	r5, r5, r3
 801eaea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801eaec:	07d9      	lsls	r1, r3, #31
 801eaee:	d4bd      	bmi.n	801ea6c <_ftello_r+0x3c>
 801eaf0:	0593      	lsls	r3, r2, #22
 801eaf2:	d4bb      	bmi.n	801ea6c <_ftello_r+0x3c>
 801eaf4:	e7e8      	b.n	801eac8 <_ftello_r+0x98>
 801eaf6:	2301      	movs	r3, #1
 801eaf8:	e7da      	b.n	801eab0 <_ftello_r+0x80>
 801eafa:	0710      	lsls	r0, r2, #28
 801eafc:	d5f5      	bpl.n	801eaea <_ftello_r+0xba>
 801eafe:	6823      	ldr	r3, [r4, #0]
 801eb00:	2b00      	cmp	r3, #0
 801eb02:	d0f2      	beq.n	801eaea <_ftello_r+0xba>
 801eb04:	6921      	ldr	r1, [r4, #16]
 801eb06:	1a5b      	subs	r3, r3, r1
 801eb08:	441d      	add	r5, r3
 801eb0a:	e7ee      	b.n	801eaea <_ftello_r+0xba>
 801eb0c:	080273f4 	.word	0x080273f4
 801eb10:	08027414 	.word	0x08027414
 801eb14:	080273d4 	.word	0x080273d4

0801eb18 <_fwalk_reent>:
 801eb18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801eb1c:	4606      	mov	r6, r0
 801eb1e:	4688      	mov	r8, r1
 801eb20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801eb24:	2700      	movs	r7, #0
 801eb26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801eb2a:	f1b9 0901 	subs.w	r9, r9, #1
 801eb2e:	d505      	bpl.n	801eb3c <_fwalk_reent+0x24>
 801eb30:	6824      	ldr	r4, [r4, #0]
 801eb32:	2c00      	cmp	r4, #0
 801eb34:	d1f7      	bne.n	801eb26 <_fwalk_reent+0xe>
 801eb36:	4638      	mov	r0, r7
 801eb38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801eb3c:	89ab      	ldrh	r3, [r5, #12]
 801eb3e:	2b01      	cmp	r3, #1
 801eb40:	d907      	bls.n	801eb52 <_fwalk_reent+0x3a>
 801eb42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801eb46:	3301      	adds	r3, #1
 801eb48:	d003      	beq.n	801eb52 <_fwalk_reent+0x3a>
 801eb4a:	4629      	mov	r1, r5
 801eb4c:	4630      	mov	r0, r6
 801eb4e:	47c0      	blx	r8
 801eb50:	4307      	orrs	r7, r0
 801eb52:	3568      	adds	r5, #104	; 0x68
 801eb54:	e7e9      	b.n	801eb2a <_fwalk_reent+0x12>
	...

0801eb58 <__libc_init_array>:
 801eb58:	b570      	push	{r4, r5, r6, lr}
 801eb5a:	4d0d      	ldr	r5, [pc, #52]	; (801eb90 <__libc_init_array+0x38>)
 801eb5c:	4c0d      	ldr	r4, [pc, #52]	; (801eb94 <__libc_init_array+0x3c>)
 801eb5e:	1b64      	subs	r4, r4, r5
 801eb60:	10a4      	asrs	r4, r4, #2
 801eb62:	2600      	movs	r6, #0
 801eb64:	42a6      	cmp	r6, r4
 801eb66:	d109      	bne.n	801eb7c <__libc_init_array+0x24>
 801eb68:	4d0b      	ldr	r5, [pc, #44]	; (801eb98 <__libc_init_array+0x40>)
 801eb6a:	4c0c      	ldr	r4, [pc, #48]	; (801eb9c <__libc_init_array+0x44>)
 801eb6c:	f003 f8cc 	bl	8021d08 <_init>
 801eb70:	1b64      	subs	r4, r4, r5
 801eb72:	10a4      	asrs	r4, r4, #2
 801eb74:	2600      	movs	r6, #0
 801eb76:	42a6      	cmp	r6, r4
 801eb78:	d105      	bne.n	801eb86 <__libc_init_array+0x2e>
 801eb7a:	bd70      	pop	{r4, r5, r6, pc}
 801eb7c:	f855 3b04 	ldr.w	r3, [r5], #4
 801eb80:	4798      	blx	r3
 801eb82:	3601      	adds	r6, #1
 801eb84:	e7ee      	b.n	801eb64 <__libc_init_array+0xc>
 801eb86:	f855 3b04 	ldr.w	r3, [r5], #4
 801eb8a:	4798      	blx	r3
 801eb8c:	3601      	adds	r6, #1
 801eb8e:	e7f2      	b.n	801eb76 <__libc_init_array+0x1e>
 801eb90:	080279cc 	.word	0x080279cc
 801eb94:	080279cc 	.word	0x080279cc
 801eb98:	080279cc 	.word	0x080279cc
 801eb9c:	080279dc 	.word	0x080279dc

0801eba0 <localtime>:
 801eba0:	b538      	push	{r3, r4, r5, lr}
 801eba2:	4b0b      	ldr	r3, [pc, #44]	; (801ebd0 <localtime+0x30>)
 801eba4:	681d      	ldr	r5, [r3, #0]
 801eba6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801eba8:	4604      	mov	r4, r0
 801ebaa:	b953      	cbnz	r3, 801ebc2 <localtime+0x22>
 801ebac:	2024      	movs	r0, #36	; 0x24
 801ebae:	f000 f975 	bl	801ee9c <malloc>
 801ebb2:	4602      	mov	r2, r0
 801ebb4:	63e8      	str	r0, [r5, #60]	; 0x3c
 801ebb6:	b920      	cbnz	r0, 801ebc2 <localtime+0x22>
 801ebb8:	4b06      	ldr	r3, [pc, #24]	; (801ebd4 <localtime+0x34>)
 801ebba:	4807      	ldr	r0, [pc, #28]	; (801ebd8 <localtime+0x38>)
 801ebbc:	2132      	movs	r1, #50	; 0x32
 801ebbe:	f001 fd49 	bl	8020654 <__assert_func>
 801ebc2:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 801ebc4:	4620      	mov	r0, r4
 801ebc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ebca:	f000 b807 	b.w	801ebdc <localtime_r>
 801ebce:	bf00      	nop
 801ebd0:	20000108 	.word	0x20000108
 801ebd4:	08027438 	.word	0x08027438
 801ebd8:	0802744f 	.word	0x0802744f

0801ebdc <localtime_r>:
 801ebdc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801ebe0:	4607      	mov	r7, r0
 801ebe2:	9101      	str	r1, [sp, #4]
 801ebe4:	f001 fe00 	bl	80207e8 <__gettzinfo>
 801ebe8:	9901      	ldr	r1, [sp, #4]
 801ebea:	4680      	mov	r8, r0
 801ebec:	4638      	mov	r0, r7
 801ebee:	f001 fdff 	bl	80207f0 <gmtime_r>
 801ebf2:	6943      	ldr	r3, [r0, #20]
 801ebf4:	079a      	lsls	r2, r3, #30
 801ebf6:	4604      	mov	r4, r0
 801ebf8:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 801ebfc:	d105      	bne.n	801ec0a <localtime_r+0x2e>
 801ebfe:	2264      	movs	r2, #100	; 0x64
 801ec00:	fb96 f3f2 	sdiv	r3, r6, r2
 801ec04:	fb02 6313 	mls	r3, r2, r3, r6
 801ec08:	bb7b      	cbnz	r3, 801ec6a <localtime_r+0x8e>
 801ec0a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801ec0e:	fb96 f5f3 	sdiv	r5, r6, r3
 801ec12:	fb03 6515 	mls	r5, r3, r5, r6
 801ec16:	fab5 f585 	clz	r5, r5
 801ec1a:	096d      	lsrs	r5, r5, #5
 801ec1c:	4b68      	ldr	r3, [pc, #416]	; (801edc0 <localtime_r+0x1e4>)
 801ec1e:	2230      	movs	r2, #48	; 0x30
 801ec20:	fb02 3505 	mla	r5, r2, r5, r3
 801ec24:	f001 fa16 	bl	8020054 <__tz_lock>
 801ec28:	f001 fa20 	bl	802006c <_tzset_unlocked>
 801ec2c:	4b65      	ldr	r3, [pc, #404]	; (801edc4 <localtime_r+0x1e8>)
 801ec2e:	681b      	ldr	r3, [r3, #0]
 801ec30:	b353      	cbz	r3, 801ec88 <localtime_r+0xac>
 801ec32:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801ec36:	42b3      	cmp	r3, r6
 801ec38:	d119      	bne.n	801ec6e <localtime_r+0x92>
 801ec3a:	f8d8 1000 	ldr.w	r1, [r8]
 801ec3e:	e9d7 6700 	ldrd	r6, r7, [r7]
 801ec42:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 801ec46:	b9d1      	cbnz	r1, 801ec7e <localtime_r+0xa2>
 801ec48:	4296      	cmp	r6, r2
 801ec4a:	eb77 0303 	sbcs.w	r3, r7, r3
 801ec4e:	da23      	bge.n	801ec98 <localtime_r+0xbc>
 801ec50:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801ec54:	4296      	cmp	r6, r2
 801ec56:	eb77 0303 	sbcs.w	r3, r7, r3
 801ec5a:	bfb4      	ite	lt
 801ec5c:	2301      	movlt	r3, #1
 801ec5e:	2300      	movge	r3, #0
 801ec60:	6223      	str	r3, [r4, #32]
 801ec62:	db1b      	blt.n	801ec9c <localtime_r+0xc0>
 801ec64:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 801ec68:	e01a      	b.n	801eca0 <localtime_r+0xc4>
 801ec6a:	2501      	movs	r5, #1
 801ec6c:	e7d6      	b.n	801ec1c <localtime_r+0x40>
 801ec6e:	4630      	mov	r0, r6
 801ec70:	f001 f948 	bl	801ff04 <__tzcalc_limits>
 801ec74:	2800      	cmp	r0, #0
 801ec76:	d1e0      	bne.n	801ec3a <localtime_r+0x5e>
 801ec78:	f04f 33ff 	mov.w	r3, #4294967295
 801ec7c:	e004      	b.n	801ec88 <localtime_r+0xac>
 801ec7e:	4296      	cmp	r6, r2
 801ec80:	eb77 0303 	sbcs.w	r3, r7, r3
 801ec84:	da02      	bge.n	801ec8c <localtime_r+0xb0>
 801ec86:	2300      	movs	r3, #0
 801ec88:	6223      	str	r3, [r4, #32]
 801ec8a:	e7eb      	b.n	801ec64 <localtime_r+0x88>
 801ec8c:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801ec90:	4296      	cmp	r6, r2
 801ec92:	eb77 0303 	sbcs.w	r3, r7, r3
 801ec96:	daf6      	bge.n	801ec86 <localtime_r+0xaa>
 801ec98:	2301      	movs	r3, #1
 801ec9a:	6223      	str	r3, [r4, #32]
 801ec9c:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 801eca0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801eca4:	203c      	movs	r0, #60	; 0x3c
 801eca6:	fb91 f6f3 	sdiv	r6, r1, r3
 801ecaa:	fb03 1316 	mls	r3, r3, r6, r1
 801ecae:	6861      	ldr	r1, [r4, #4]
 801ecb0:	fb93 f2f0 	sdiv	r2, r3, r0
 801ecb4:	fb00 3012 	mls	r0, r0, r2, r3
 801ecb8:	6823      	ldr	r3, [r4, #0]
 801ecba:	1a89      	subs	r1, r1, r2
 801ecbc:	68a2      	ldr	r2, [r4, #8]
 801ecbe:	6061      	str	r1, [r4, #4]
 801ecc0:	1a1b      	subs	r3, r3, r0
 801ecc2:	1b92      	subs	r2, r2, r6
 801ecc4:	2b3b      	cmp	r3, #59	; 0x3b
 801ecc6:	6023      	str	r3, [r4, #0]
 801ecc8:	60a2      	str	r2, [r4, #8]
 801ecca:	dd35      	ble.n	801ed38 <localtime_r+0x15c>
 801eccc:	3101      	adds	r1, #1
 801ecce:	6061      	str	r1, [r4, #4]
 801ecd0:	3b3c      	subs	r3, #60	; 0x3c
 801ecd2:	6023      	str	r3, [r4, #0]
 801ecd4:	6863      	ldr	r3, [r4, #4]
 801ecd6:	2b3b      	cmp	r3, #59	; 0x3b
 801ecd8:	dd34      	ble.n	801ed44 <localtime_r+0x168>
 801ecda:	3201      	adds	r2, #1
 801ecdc:	60a2      	str	r2, [r4, #8]
 801ecde:	3b3c      	subs	r3, #60	; 0x3c
 801ece0:	6063      	str	r3, [r4, #4]
 801ece2:	68a3      	ldr	r3, [r4, #8]
 801ece4:	2b17      	cmp	r3, #23
 801ece6:	dd33      	ble.n	801ed50 <localtime_r+0x174>
 801ece8:	69e2      	ldr	r2, [r4, #28]
 801ecea:	3201      	adds	r2, #1
 801ecec:	61e2      	str	r2, [r4, #28]
 801ecee:	69a2      	ldr	r2, [r4, #24]
 801ecf0:	3201      	adds	r2, #1
 801ecf2:	2a06      	cmp	r2, #6
 801ecf4:	bfc8      	it	gt
 801ecf6:	2200      	movgt	r2, #0
 801ecf8:	61a2      	str	r2, [r4, #24]
 801ecfa:	68e2      	ldr	r2, [r4, #12]
 801ecfc:	3b18      	subs	r3, #24
 801ecfe:	3201      	adds	r2, #1
 801ed00:	60a3      	str	r3, [r4, #8]
 801ed02:	6923      	ldr	r3, [r4, #16]
 801ed04:	60e2      	str	r2, [r4, #12]
 801ed06:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801ed0a:	428a      	cmp	r2, r1
 801ed0c:	dd0e      	ble.n	801ed2c <localtime_r+0x150>
 801ed0e:	2b0b      	cmp	r3, #11
 801ed10:	eba2 0201 	sub.w	r2, r2, r1
 801ed14:	60e2      	str	r2, [r4, #12]
 801ed16:	f103 0201 	add.w	r2, r3, #1
 801ed1a:	bf09      	itett	eq
 801ed1c:	6963      	ldreq	r3, [r4, #20]
 801ed1e:	6122      	strne	r2, [r4, #16]
 801ed20:	2200      	moveq	r2, #0
 801ed22:	3301      	addeq	r3, #1
 801ed24:	bf02      	ittt	eq
 801ed26:	6122      	streq	r2, [r4, #16]
 801ed28:	6163      	streq	r3, [r4, #20]
 801ed2a:	61e2      	streq	r2, [r4, #28]
 801ed2c:	f001 f998 	bl	8020060 <__tz_unlock>
 801ed30:	4620      	mov	r0, r4
 801ed32:	b002      	add	sp, #8
 801ed34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ed38:	2b00      	cmp	r3, #0
 801ed3a:	dacb      	bge.n	801ecd4 <localtime_r+0xf8>
 801ed3c:	3901      	subs	r1, #1
 801ed3e:	6061      	str	r1, [r4, #4]
 801ed40:	333c      	adds	r3, #60	; 0x3c
 801ed42:	e7c6      	b.n	801ecd2 <localtime_r+0xf6>
 801ed44:	2b00      	cmp	r3, #0
 801ed46:	dacc      	bge.n	801ece2 <localtime_r+0x106>
 801ed48:	3a01      	subs	r2, #1
 801ed4a:	60a2      	str	r2, [r4, #8]
 801ed4c:	333c      	adds	r3, #60	; 0x3c
 801ed4e:	e7c7      	b.n	801ece0 <localtime_r+0x104>
 801ed50:	2b00      	cmp	r3, #0
 801ed52:	daeb      	bge.n	801ed2c <localtime_r+0x150>
 801ed54:	69e2      	ldr	r2, [r4, #28]
 801ed56:	3a01      	subs	r2, #1
 801ed58:	61e2      	str	r2, [r4, #28]
 801ed5a:	69a2      	ldr	r2, [r4, #24]
 801ed5c:	3a01      	subs	r2, #1
 801ed5e:	bf48      	it	mi
 801ed60:	2206      	movmi	r2, #6
 801ed62:	61a2      	str	r2, [r4, #24]
 801ed64:	68e2      	ldr	r2, [r4, #12]
 801ed66:	3318      	adds	r3, #24
 801ed68:	3a01      	subs	r2, #1
 801ed6a:	60e2      	str	r2, [r4, #12]
 801ed6c:	60a3      	str	r3, [r4, #8]
 801ed6e:	2a00      	cmp	r2, #0
 801ed70:	d1dc      	bne.n	801ed2c <localtime_r+0x150>
 801ed72:	6923      	ldr	r3, [r4, #16]
 801ed74:	3b01      	subs	r3, #1
 801ed76:	d405      	bmi.n	801ed84 <localtime_r+0x1a8>
 801ed78:	6123      	str	r3, [r4, #16]
 801ed7a:	6923      	ldr	r3, [r4, #16]
 801ed7c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801ed80:	60e3      	str	r3, [r4, #12]
 801ed82:	e7d3      	b.n	801ed2c <localtime_r+0x150>
 801ed84:	230b      	movs	r3, #11
 801ed86:	6123      	str	r3, [r4, #16]
 801ed88:	6963      	ldr	r3, [r4, #20]
 801ed8a:	1e5a      	subs	r2, r3, #1
 801ed8c:	6162      	str	r2, [r4, #20]
 801ed8e:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 801ed92:	0793      	lsls	r3, r2, #30
 801ed94:	d105      	bne.n	801eda2 <localtime_r+0x1c6>
 801ed96:	2164      	movs	r1, #100	; 0x64
 801ed98:	fb92 f3f1 	sdiv	r3, r2, r1
 801ed9c:	fb01 2313 	mls	r3, r1, r3, r2
 801eda0:	b963      	cbnz	r3, 801edbc <localtime_r+0x1e0>
 801eda2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801eda6:	fb92 f3f1 	sdiv	r3, r2, r1
 801edaa:	fb01 2313 	mls	r3, r1, r3, r2
 801edae:	fab3 f383 	clz	r3, r3
 801edb2:	095b      	lsrs	r3, r3, #5
 801edb4:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801edb8:	61e3      	str	r3, [r4, #28]
 801edba:	e7de      	b.n	801ed7a <localtime_r+0x19e>
 801edbc:	2301      	movs	r3, #1
 801edbe:	e7f9      	b.n	801edb4 <localtime_r+0x1d8>
 801edc0:	080274b0 	.word	0x080274b0
 801edc4:	20000de8 	.word	0x20000de8

0801edc8 <__retarget_lock_init_recursive>:
 801edc8:	4770      	bx	lr

0801edca <__retarget_lock_close_recursive>:
 801edca:	4770      	bx	lr

0801edcc <__retarget_lock_acquire>:
 801edcc:	4770      	bx	lr

0801edce <__retarget_lock_acquire_recursive>:
 801edce:	4770      	bx	lr

0801edd0 <__retarget_lock_release>:
 801edd0:	4770      	bx	lr

0801edd2 <__retarget_lock_release_recursive>:
 801edd2:	4770      	bx	lr

0801edd4 <__swhatbuf_r>:
 801edd4:	b570      	push	{r4, r5, r6, lr}
 801edd6:	460e      	mov	r6, r1
 801edd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eddc:	2900      	cmp	r1, #0
 801edde:	b096      	sub	sp, #88	; 0x58
 801ede0:	4614      	mov	r4, r2
 801ede2:	461d      	mov	r5, r3
 801ede4:	da07      	bge.n	801edf6 <__swhatbuf_r+0x22>
 801ede6:	2300      	movs	r3, #0
 801ede8:	602b      	str	r3, [r5, #0]
 801edea:	89b3      	ldrh	r3, [r6, #12]
 801edec:	061a      	lsls	r2, r3, #24
 801edee:	d410      	bmi.n	801ee12 <__swhatbuf_r+0x3e>
 801edf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801edf4:	e00e      	b.n	801ee14 <__swhatbuf_r+0x40>
 801edf6:	466a      	mov	r2, sp
 801edf8:	f001 fca2 	bl	8020740 <_fstat_r>
 801edfc:	2800      	cmp	r0, #0
 801edfe:	dbf2      	blt.n	801ede6 <__swhatbuf_r+0x12>
 801ee00:	9a01      	ldr	r2, [sp, #4]
 801ee02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ee06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ee0a:	425a      	negs	r2, r3
 801ee0c:	415a      	adcs	r2, r3
 801ee0e:	602a      	str	r2, [r5, #0]
 801ee10:	e7ee      	b.n	801edf0 <__swhatbuf_r+0x1c>
 801ee12:	2340      	movs	r3, #64	; 0x40
 801ee14:	2000      	movs	r0, #0
 801ee16:	6023      	str	r3, [r4, #0]
 801ee18:	b016      	add	sp, #88	; 0x58
 801ee1a:	bd70      	pop	{r4, r5, r6, pc}

0801ee1c <__smakebuf_r>:
 801ee1c:	898b      	ldrh	r3, [r1, #12]
 801ee1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ee20:	079d      	lsls	r5, r3, #30
 801ee22:	4606      	mov	r6, r0
 801ee24:	460c      	mov	r4, r1
 801ee26:	d507      	bpl.n	801ee38 <__smakebuf_r+0x1c>
 801ee28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ee2c:	6023      	str	r3, [r4, #0]
 801ee2e:	6123      	str	r3, [r4, #16]
 801ee30:	2301      	movs	r3, #1
 801ee32:	6163      	str	r3, [r4, #20]
 801ee34:	b002      	add	sp, #8
 801ee36:	bd70      	pop	{r4, r5, r6, pc}
 801ee38:	ab01      	add	r3, sp, #4
 801ee3a:	466a      	mov	r2, sp
 801ee3c:	f7ff ffca 	bl	801edd4 <__swhatbuf_r>
 801ee40:	9900      	ldr	r1, [sp, #0]
 801ee42:	4605      	mov	r5, r0
 801ee44:	4630      	mov	r0, r6
 801ee46:	f000 f8af 	bl	801efa8 <_malloc_r>
 801ee4a:	b948      	cbnz	r0, 801ee60 <__smakebuf_r+0x44>
 801ee4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ee50:	059a      	lsls	r2, r3, #22
 801ee52:	d4ef      	bmi.n	801ee34 <__smakebuf_r+0x18>
 801ee54:	f023 0303 	bic.w	r3, r3, #3
 801ee58:	f043 0302 	orr.w	r3, r3, #2
 801ee5c:	81a3      	strh	r3, [r4, #12]
 801ee5e:	e7e3      	b.n	801ee28 <__smakebuf_r+0xc>
 801ee60:	4b0d      	ldr	r3, [pc, #52]	; (801ee98 <__smakebuf_r+0x7c>)
 801ee62:	62b3      	str	r3, [r6, #40]	; 0x28
 801ee64:	89a3      	ldrh	r3, [r4, #12]
 801ee66:	6020      	str	r0, [r4, #0]
 801ee68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ee6c:	81a3      	strh	r3, [r4, #12]
 801ee6e:	9b00      	ldr	r3, [sp, #0]
 801ee70:	6163      	str	r3, [r4, #20]
 801ee72:	9b01      	ldr	r3, [sp, #4]
 801ee74:	6120      	str	r0, [r4, #16]
 801ee76:	b15b      	cbz	r3, 801ee90 <__smakebuf_r+0x74>
 801ee78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ee7c:	4630      	mov	r0, r6
 801ee7e:	f001 fd67 	bl	8020950 <_isatty_r>
 801ee82:	b128      	cbz	r0, 801ee90 <__smakebuf_r+0x74>
 801ee84:	89a3      	ldrh	r3, [r4, #12]
 801ee86:	f023 0303 	bic.w	r3, r3, #3
 801ee8a:	f043 0301 	orr.w	r3, r3, #1
 801ee8e:	81a3      	strh	r3, [r4, #12]
 801ee90:	89a0      	ldrh	r0, [r4, #12]
 801ee92:	4305      	orrs	r5, r0
 801ee94:	81a5      	strh	r5, [r4, #12]
 801ee96:	e7cd      	b.n	801ee34 <__smakebuf_r+0x18>
 801ee98:	0801e601 	.word	0x0801e601

0801ee9c <malloc>:
 801ee9c:	4b02      	ldr	r3, [pc, #8]	; (801eea8 <malloc+0xc>)
 801ee9e:	4601      	mov	r1, r0
 801eea0:	6818      	ldr	r0, [r3, #0]
 801eea2:	f000 b881 	b.w	801efa8 <_malloc_r>
 801eea6:	bf00      	nop
 801eea8:	20000108 	.word	0x20000108

0801eeac <free>:
 801eeac:	4b02      	ldr	r3, [pc, #8]	; (801eeb8 <free+0xc>)
 801eeae:	4601      	mov	r1, r0
 801eeb0:	6818      	ldr	r0, [r3, #0]
 801eeb2:	f000 b829 	b.w	801ef08 <_free_r>
 801eeb6:	bf00      	nop
 801eeb8:	20000108 	.word	0x20000108

0801eebc <memcpy>:
 801eebc:	440a      	add	r2, r1
 801eebe:	4291      	cmp	r1, r2
 801eec0:	f100 33ff 	add.w	r3, r0, #4294967295
 801eec4:	d100      	bne.n	801eec8 <memcpy+0xc>
 801eec6:	4770      	bx	lr
 801eec8:	b510      	push	{r4, lr}
 801eeca:	f811 4b01 	ldrb.w	r4, [r1], #1
 801eece:	f803 4f01 	strb.w	r4, [r3, #1]!
 801eed2:	4291      	cmp	r1, r2
 801eed4:	d1f9      	bne.n	801eeca <memcpy+0xe>
 801eed6:	bd10      	pop	{r4, pc}

0801eed8 <memset>:
 801eed8:	4402      	add	r2, r0
 801eeda:	4603      	mov	r3, r0
 801eedc:	4293      	cmp	r3, r2
 801eede:	d100      	bne.n	801eee2 <memset+0xa>
 801eee0:	4770      	bx	lr
 801eee2:	f803 1b01 	strb.w	r1, [r3], #1
 801eee6:	e7f9      	b.n	801eedc <memset+0x4>

0801eee8 <_calloc_r>:
 801eee8:	b513      	push	{r0, r1, r4, lr}
 801eeea:	434a      	muls	r2, r1
 801eeec:	4611      	mov	r1, r2
 801eeee:	9201      	str	r2, [sp, #4]
 801eef0:	f000 f85a 	bl	801efa8 <_malloc_r>
 801eef4:	4604      	mov	r4, r0
 801eef6:	b118      	cbz	r0, 801ef00 <_calloc_r+0x18>
 801eef8:	9a01      	ldr	r2, [sp, #4]
 801eefa:	2100      	movs	r1, #0
 801eefc:	f7ff ffec 	bl	801eed8 <memset>
 801ef00:	4620      	mov	r0, r4
 801ef02:	b002      	add	sp, #8
 801ef04:	bd10      	pop	{r4, pc}
	...

0801ef08 <_free_r>:
 801ef08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ef0a:	2900      	cmp	r1, #0
 801ef0c:	d048      	beq.n	801efa0 <_free_r+0x98>
 801ef0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ef12:	9001      	str	r0, [sp, #4]
 801ef14:	2b00      	cmp	r3, #0
 801ef16:	f1a1 0404 	sub.w	r4, r1, #4
 801ef1a:	bfb8      	it	lt
 801ef1c:	18e4      	addlt	r4, r4, r3
 801ef1e:	f001 fd4f 	bl	80209c0 <__malloc_lock>
 801ef22:	4a20      	ldr	r2, [pc, #128]	; (801efa4 <_free_r+0x9c>)
 801ef24:	9801      	ldr	r0, [sp, #4]
 801ef26:	6813      	ldr	r3, [r2, #0]
 801ef28:	4615      	mov	r5, r2
 801ef2a:	b933      	cbnz	r3, 801ef3a <_free_r+0x32>
 801ef2c:	6063      	str	r3, [r4, #4]
 801ef2e:	6014      	str	r4, [r2, #0]
 801ef30:	b003      	add	sp, #12
 801ef32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ef36:	f001 bd49 	b.w	80209cc <__malloc_unlock>
 801ef3a:	42a3      	cmp	r3, r4
 801ef3c:	d90b      	bls.n	801ef56 <_free_r+0x4e>
 801ef3e:	6821      	ldr	r1, [r4, #0]
 801ef40:	1862      	adds	r2, r4, r1
 801ef42:	4293      	cmp	r3, r2
 801ef44:	bf04      	itt	eq
 801ef46:	681a      	ldreq	r2, [r3, #0]
 801ef48:	685b      	ldreq	r3, [r3, #4]
 801ef4a:	6063      	str	r3, [r4, #4]
 801ef4c:	bf04      	itt	eq
 801ef4e:	1852      	addeq	r2, r2, r1
 801ef50:	6022      	streq	r2, [r4, #0]
 801ef52:	602c      	str	r4, [r5, #0]
 801ef54:	e7ec      	b.n	801ef30 <_free_r+0x28>
 801ef56:	461a      	mov	r2, r3
 801ef58:	685b      	ldr	r3, [r3, #4]
 801ef5a:	b10b      	cbz	r3, 801ef60 <_free_r+0x58>
 801ef5c:	42a3      	cmp	r3, r4
 801ef5e:	d9fa      	bls.n	801ef56 <_free_r+0x4e>
 801ef60:	6811      	ldr	r1, [r2, #0]
 801ef62:	1855      	adds	r5, r2, r1
 801ef64:	42a5      	cmp	r5, r4
 801ef66:	d10b      	bne.n	801ef80 <_free_r+0x78>
 801ef68:	6824      	ldr	r4, [r4, #0]
 801ef6a:	4421      	add	r1, r4
 801ef6c:	1854      	adds	r4, r2, r1
 801ef6e:	42a3      	cmp	r3, r4
 801ef70:	6011      	str	r1, [r2, #0]
 801ef72:	d1dd      	bne.n	801ef30 <_free_r+0x28>
 801ef74:	681c      	ldr	r4, [r3, #0]
 801ef76:	685b      	ldr	r3, [r3, #4]
 801ef78:	6053      	str	r3, [r2, #4]
 801ef7a:	4421      	add	r1, r4
 801ef7c:	6011      	str	r1, [r2, #0]
 801ef7e:	e7d7      	b.n	801ef30 <_free_r+0x28>
 801ef80:	d902      	bls.n	801ef88 <_free_r+0x80>
 801ef82:	230c      	movs	r3, #12
 801ef84:	6003      	str	r3, [r0, #0]
 801ef86:	e7d3      	b.n	801ef30 <_free_r+0x28>
 801ef88:	6825      	ldr	r5, [r4, #0]
 801ef8a:	1961      	adds	r1, r4, r5
 801ef8c:	428b      	cmp	r3, r1
 801ef8e:	bf04      	itt	eq
 801ef90:	6819      	ldreq	r1, [r3, #0]
 801ef92:	685b      	ldreq	r3, [r3, #4]
 801ef94:	6063      	str	r3, [r4, #4]
 801ef96:	bf04      	itt	eq
 801ef98:	1949      	addeq	r1, r1, r5
 801ef9a:	6021      	streq	r1, [r4, #0]
 801ef9c:	6054      	str	r4, [r2, #4]
 801ef9e:	e7c7      	b.n	801ef30 <_free_r+0x28>
 801efa0:	b003      	add	sp, #12
 801efa2:	bd30      	pop	{r4, r5, pc}
 801efa4:	20000dc4 	.word	0x20000dc4

0801efa8 <_malloc_r>:
 801efa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801efaa:	1ccd      	adds	r5, r1, #3
 801efac:	f025 0503 	bic.w	r5, r5, #3
 801efb0:	3508      	adds	r5, #8
 801efb2:	2d0c      	cmp	r5, #12
 801efb4:	bf38      	it	cc
 801efb6:	250c      	movcc	r5, #12
 801efb8:	2d00      	cmp	r5, #0
 801efba:	4606      	mov	r6, r0
 801efbc:	db01      	blt.n	801efc2 <_malloc_r+0x1a>
 801efbe:	42a9      	cmp	r1, r5
 801efc0:	d903      	bls.n	801efca <_malloc_r+0x22>
 801efc2:	230c      	movs	r3, #12
 801efc4:	6033      	str	r3, [r6, #0]
 801efc6:	2000      	movs	r0, #0
 801efc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801efca:	f001 fcf9 	bl	80209c0 <__malloc_lock>
 801efce:	4921      	ldr	r1, [pc, #132]	; (801f054 <_malloc_r+0xac>)
 801efd0:	680a      	ldr	r2, [r1, #0]
 801efd2:	4614      	mov	r4, r2
 801efd4:	b99c      	cbnz	r4, 801effe <_malloc_r+0x56>
 801efd6:	4f20      	ldr	r7, [pc, #128]	; (801f058 <_malloc_r+0xb0>)
 801efd8:	683b      	ldr	r3, [r7, #0]
 801efda:	b923      	cbnz	r3, 801efe6 <_malloc_r+0x3e>
 801efdc:	4621      	mov	r1, r4
 801efde:	4630      	mov	r0, r6
 801efe0:	f000 f8da 	bl	801f198 <_sbrk_r>
 801efe4:	6038      	str	r0, [r7, #0]
 801efe6:	4629      	mov	r1, r5
 801efe8:	4630      	mov	r0, r6
 801efea:	f000 f8d5 	bl	801f198 <_sbrk_r>
 801efee:	1c43      	adds	r3, r0, #1
 801eff0:	d123      	bne.n	801f03a <_malloc_r+0x92>
 801eff2:	230c      	movs	r3, #12
 801eff4:	6033      	str	r3, [r6, #0]
 801eff6:	4630      	mov	r0, r6
 801eff8:	f001 fce8 	bl	80209cc <__malloc_unlock>
 801effc:	e7e3      	b.n	801efc6 <_malloc_r+0x1e>
 801effe:	6823      	ldr	r3, [r4, #0]
 801f000:	1b5b      	subs	r3, r3, r5
 801f002:	d417      	bmi.n	801f034 <_malloc_r+0x8c>
 801f004:	2b0b      	cmp	r3, #11
 801f006:	d903      	bls.n	801f010 <_malloc_r+0x68>
 801f008:	6023      	str	r3, [r4, #0]
 801f00a:	441c      	add	r4, r3
 801f00c:	6025      	str	r5, [r4, #0]
 801f00e:	e004      	b.n	801f01a <_malloc_r+0x72>
 801f010:	6863      	ldr	r3, [r4, #4]
 801f012:	42a2      	cmp	r2, r4
 801f014:	bf0c      	ite	eq
 801f016:	600b      	streq	r3, [r1, #0]
 801f018:	6053      	strne	r3, [r2, #4]
 801f01a:	4630      	mov	r0, r6
 801f01c:	f001 fcd6 	bl	80209cc <__malloc_unlock>
 801f020:	f104 000b 	add.w	r0, r4, #11
 801f024:	1d23      	adds	r3, r4, #4
 801f026:	f020 0007 	bic.w	r0, r0, #7
 801f02a:	1ac2      	subs	r2, r0, r3
 801f02c:	d0cc      	beq.n	801efc8 <_malloc_r+0x20>
 801f02e:	1a1b      	subs	r3, r3, r0
 801f030:	50a3      	str	r3, [r4, r2]
 801f032:	e7c9      	b.n	801efc8 <_malloc_r+0x20>
 801f034:	4622      	mov	r2, r4
 801f036:	6864      	ldr	r4, [r4, #4]
 801f038:	e7cc      	b.n	801efd4 <_malloc_r+0x2c>
 801f03a:	1cc4      	adds	r4, r0, #3
 801f03c:	f024 0403 	bic.w	r4, r4, #3
 801f040:	42a0      	cmp	r0, r4
 801f042:	d0e3      	beq.n	801f00c <_malloc_r+0x64>
 801f044:	1a21      	subs	r1, r4, r0
 801f046:	4630      	mov	r0, r6
 801f048:	f000 f8a6 	bl	801f198 <_sbrk_r>
 801f04c:	3001      	adds	r0, #1
 801f04e:	d1dd      	bne.n	801f00c <_malloc_r+0x64>
 801f050:	e7cf      	b.n	801eff2 <_malloc_r+0x4a>
 801f052:	bf00      	nop
 801f054:	20000dc4 	.word	0x20000dc4
 801f058:	20000dc8 	.word	0x20000dc8

0801f05c <_open_r>:
 801f05c:	b538      	push	{r3, r4, r5, lr}
 801f05e:	4d07      	ldr	r5, [pc, #28]	; (801f07c <_open_r+0x20>)
 801f060:	4604      	mov	r4, r0
 801f062:	4608      	mov	r0, r1
 801f064:	4611      	mov	r1, r2
 801f066:	2200      	movs	r2, #0
 801f068:	602a      	str	r2, [r5, #0]
 801f06a:	461a      	mov	r2, r3
 801f06c:	f7e1 ff00 	bl	8000e70 <_open>
 801f070:	1c43      	adds	r3, r0, #1
 801f072:	d102      	bne.n	801f07a <_open_r+0x1e>
 801f074:	682b      	ldr	r3, [r5, #0]
 801f076:	b103      	cbz	r3, 801f07a <_open_r+0x1e>
 801f078:	6023      	str	r3, [r4, #0]
 801f07a:	bd38      	pop	{r3, r4, r5, pc}
 801f07c:	20000e90 	.word	0x20000e90

0801f080 <putchar>:
 801f080:	4b09      	ldr	r3, [pc, #36]	; (801f0a8 <putchar+0x28>)
 801f082:	b513      	push	{r0, r1, r4, lr}
 801f084:	681c      	ldr	r4, [r3, #0]
 801f086:	4601      	mov	r1, r0
 801f088:	b134      	cbz	r4, 801f098 <putchar+0x18>
 801f08a:	69a3      	ldr	r3, [r4, #24]
 801f08c:	b923      	cbnz	r3, 801f098 <putchar+0x18>
 801f08e:	9001      	str	r0, [sp, #4]
 801f090:	4620      	mov	r0, r4
 801f092:	f7ff fae9 	bl	801e668 <__sinit>
 801f096:	9901      	ldr	r1, [sp, #4]
 801f098:	68a2      	ldr	r2, [r4, #8]
 801f09a:	4620      	mov	r0, r4
 801f09c:	b002      	add	sp, #8
 801f09e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f0a2:	f002 b909 	b.w	80212b8 <_putc_r>
 801f0a6:	bf00      	nop
 801f0a8:	20000108 	.word	0x20000108

0801f0ac <srand>:
 801f0ac:	b538      	push	{r3, r4, r5, lr}
 801f0ae:	4b10      	ldr	r3, [pc, #64]	; (801f0f0 <srand+0x44>)
 801f0b0:	681d      	ldr	r5, [r3, #0]
 801f0b2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801f0b4:	4604      	mov	r4, r0
 801f0b6:	b9b3      	cbnz	r3, 801f0e6 <srand+0x3a>
 801f0b8:	2018      	movs	r0, #24
 801f0ba:	f7ff feef 	bl	801ee9c <malloc>
 801f0be:	4602      	mov	r2, r0
 801f0c0:	63a8      	str	r0, [r5, #56]	; 0x38
 801f0c2:	b920      	cbnz	r0, 801f0ce <srand+0x22>
 801f0c4:	4b0b      	ldr	r3, [pc, #44]	; (801f0f4 <srand+0x48>)
 801f0c6:	480c      	ldr	r0, [pc, #48]	; (801f0f8 <srand+0x4c>)
 801f0c8:	2142      	movs	r1, #66	; 0x42
 801f0ca:	f001 fac3 	bl	8020654 <__assert_func>
 801f0ce:	490b      	ldr	r1, [pc, #44]	; (801f0fc <srand+0x50>)
 801f0d0:	4b0b      	ldr	r3, [pc, #44]	; (801f100 <srand+0x54>)
 801f0d2:	e9c0 1300 	strd	r1, r3, [r0]
 801f0d6:	4b0b      	ldr	r3, [pc, #44]	; (801f104 <srand+0x58>)
 801f0d8:	6083      	str	r3, [r0, #8]
 801f0da:	230b      	movs	r3, #11
 801f0dc:	8183      	strh	r3, [r0, #12]
 801f0de:	2100      	movs	r1, #0
 801f0e0:	2001      	movs	r0, #1
 801f0e2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801f0e6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801f0e8:	2200      	movs	r2, #0
 801f0ea:	611c      	str	r4, [r3, #16]
 801f0ec:	615a      	str	r2, [r3, #20]
 801f0ee:	bd38      	pop	{r3, r4, r5, pc}
 801f0f0:	20000108 	.word	0x20000108
 801f0f4:	08027438 	.word	0x08027438
 801f0f8:	08027510 	.word	0x08027510
 801f0fc:	abcd330e 	.word	0xabcd330e
 801f100:	e66d1234 	.word	0xe66d1234
 801f104:	0005deec 	.word	0x0005deec

0801f108 <rand>:
 801f108:	4b17      	ldr	r3, [pc, #92]	; (801f168 <rand+0x60>)
 801f10a:	b510      	push	{r4, lr}
 801f10c:	681c      	ldr	r4, [r3, #0]
 801f10e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801f110:	b9b3      	cbnz	r3, 801f140 <rand+0x38>
 801f112:	2018      	movs	r0, #24
 801f114:	f7ff fec2 	bl	801ee9c <malloc>
 801f118:	63a0      	str	r0, [r4, #56]	; 0x38
 801f11a:	b928      	cbnz	r0, 801f128 <rand+0x20>
 801f11c:	4602      	mov	r2, r0
 801f11e:	4b13      	ldr	r3, [pc, #76]	; (801f16c <rand+0x64>)
 801f120:	4813      	ldr	r0, [pc, #76]	; (801f170 <rand+0x68>)
 801f122:	214e      	movs	r1, #78	; 0x4e
 801f124:	f001 fa96 	bl	8020654 <__assert_func>
 801f128:	4a12      	ldr	r2, [pc, #72]	; (801f174 <rand+0x6c>)
 801f12a:	4b13      	ldr	r3, [pc, #76]	; (801f178 <rand+0x70>)
 801f12c:	e9c0 2300 	strd	r2, r3, [r0]
 801f130:	4b12      	ldr	r3, [pc, #72]	; (801f17c <rand+0x74>)
 801f132:	6083      	str	r3, [r0, #8]
 801f134:	230b      	movs	r3, #11
 801f136:	8183      	strh	r3, [r0, #12]
 801f138:	2201      	movs	r2, #1
 801f13a:	2300      	movs	r3, #0
 801f13c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801f140:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801f142:	480f      	ldr	r0, [pc, #60]	; (801f180 <rand+0x78>)
 801f144:	690a      	ldr	r2, [r1, #16]
 801f146:	694b      	ldr	r3, [r1, #20]
 801f148:	4c0e      	ldr	r4, [pc, #56]	; (801f184 <rand+0x7c>)
 801f14a:	4350      	muls	r0, r2
 801f14c:	fb04 0003 	mla	r0, r4, r3, r0
 801f150:	fba2 3404 	umull	r3, r4, r2, r4
 801f154:	1c5a      	adds	r2, r3, #1
 801f156:	4404      	add	r4, r0
 801f158:	f144 0000 	adc.w	r0, r4, #0
 801f15c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801f160:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801f164:	bd10      	pop	{r4, pc}
 801f166:	bf00      	nop
 801f168:	20000108 	.word	0x20000108
 801f16c:	08027438 	.word	0x08027438
 801f170:	08027510 	.word	0x08027510
 801f174:	abcd330e 	.word	0xabcd330e
 801f178:	e66d1234 	.word	0xe66d1234
 801f17c:	0005deec 	.word	0x0005deec
 801f180:	5851f42d 	.word	0x5851f42d
 801f184:	4c957f2d 	.word	0x4c957f2d

0801f188 <realloc>:
 801f188:	4b02      	ldr	r3, [pc, #8]	; (801f194 <realloc+0xc>)
 801f18a:	460a      	mov	r2, r1
 801f18c:	4601      	mov	r1, r0
 801f18e:	6818      	ldr	r0, [r3, #0]
 801f190:	f001 bc22 	b.w	80209d8 <_realloc_r>
 801f194:	20000108 	.word	0x20000108

0801f198 <_sbrk_r>:
 801f198:	b538      	push	{r3, r4, r5, lr}
 801f19a:	4d06      	ldr	r5, [pc, #24]	; (801f1b4 <_sbrk_r+0x1c>)
 801f19c:	2300      	movs	r3, #0
 801f19e:	4604      	mov	r4, r0
 801f1a0:	4608      	mov	r0, r1
 801f1a2:	602b      	str	r3, [r5, #0]
 801f1a4:	f7e1 fe72 	bl	8000e8c <_sbrk>
 801f1a8:	1c43      	adds	r3, r0, #1
 801f1aa:	d102      	bne.n	801f1b2 <_sbrk_r+0x1a>
 801f1ac:	682b      	ldr	r3, [r5, #0]
 801f1ae:	b103      	cbz	r3, 801f1b2 <_sbrk_r+0x1a>
 801f1b0:	6023      	str	r3, [r4, #0]
 801f1b2:	bd38      	pop	{r3, r4, r5, pc}
 801f1b4:	20000e90 	.word	0x20000e90

0801f1b8 <_raise_r>:
 801f1b8:	291f      	cmp	r1, #31
 801f1ba:	b538      	push	{r3, r4, r5, lr}
 801f1bc:	4604      	mov	r4, r0
 801f1be:	460d      	mov	r5, r1
 801f1c0:	d904      	bls.n	801f1cc <_raise_r+0x14>
 801f1c2:	2316      	movs	r3, #22
 801f1c4:	6003      	str	r3, [r0, #0]
 801f1c6:	f04f 30ff 	mov.w	r0, #4294967295
 801f1ca:	bd38      	pop	{r3, r4, r5, pc}
 801f1cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801f1ce:	b112      	cbz	r2, 801f1d6 <_raise_r+0x1e>
 801f1d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f1d4:	b94b      	cbnz	r3, 801f1ea <_raise_r+0x32>
 801f1d6:	4620      	mov	r0, r4
 801f1d8:	f000 f830 	bl	801f23c <_getpid_r>
 801f1dc:	462a      	mov	r2, r5
 801f1de:	4601      	mov	r1, r0
 801f1e0:	4620      	mov	r0, r4
 801f1e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f1e6:	f000 b817 	b.w	801f218 <_kill_r>
 801f1ea:	2b01      	cmp	r3, #1
 801f1ec:	d00a      	beq.n	801f204 <_raise_r+0x4c>
 801f1ee:	1c59      	adds	r1, r3, #1
 801f1f0:	d103      	bne.n	801f1fa <_raise_r+0x42>
 801f1f2:	2316      	movs	r3, #22
 801f1f4:	6003      	str	r3, [r0, #0]
 801f1f6:	2001      	movs	r0, #1
 801f1f8:	e7e7      	b.n	801f1ca <_raise_r+0x12>
 801f1fa:	2400      	movs	r4, #0
 801f1fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801f200:	4628      	mov	r0, r5
 801f202:	4798      	blx	r3
 801f204:	2000      	movs	r0, #0
 801f206:	e7e0      	b.n	801f1ca <_raise_r+0x12>

0801f208 <raise>:
 801f208:	4b02      	ldr	r3, [pc, #8]	; (801f214 <raise+0xc>)
 801f20a:	4601      	mov	r1, r0
 801f20c:	6818      	ldr	r0, [r3, #0]
 801f20e:	f7ff bfd3 	b.w	801f1b8 <_raise_r>
 801f212:	bf00      	nop
 801f214:	20000108 	.word	0x20000108

0801f218 <_kill_r>:
 801f218:	b538      	push	{r3, r4, r5, lr}
 801f21a:	4d07      	ldr	r5, [pc, #28]	; (801f238 <_kill_r+0x20>)
 801f21c:	2300      	movs	r3, #0
 801f21e:	4604      	mov	r4, r0
 801f220:	4608      	mov	r0, r1
 801f222:	4611      	mov	r1, r2
 801f224:	602b      	str	r3, [r5, #0]
 801f226:	f7e1 fd9c 	bl	8000d62 <_kill>
 801f22a:	1c43      	adds	r3, r0, #1
 801f22c:	d102      	bne.n	801f234 <_kill_r+0x1c>
 801f22e:	682b      	ldr	r3, [r5, #0]
 801f230:	b103      	cbz	r3, 801f234 <_kill_r+0x1c>
 801f232:	6023      	str	r3, [r4, #0]
 801f234:	bd38      	pop	{r3, r4, r5, pc}
 801f236:	bf00      	nop
 801f238:	20000e90 	.word	0x20000e90

0801f23c <_getpid_r>:
 801f23c:	f7e1 bd89 	b.w	8000d52 <_getpid>

0801f240 <siprintf>:
 801f240:	b40e      	push	{r1, r2, r3}
 801f242:	b500      	push	{lr}
 801f244:	b09c      	sub	sp, #112	; 0x70
 801f246:	ab1d      	add	r3, sp, #116	; 0x74
 801f248:	9002      	str	r0, [sp, #8]
 801f24a:	9006      	str	r0, [sp, #24]
 801f24c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801f250:	4809      	ldr	r0, [pc, #36]	; (801f278 <siprintf+0x38>)
 801f252:	9107      	str	r1, [sp, #28]
 801f254:	9104      	str	r1, [sp, #16]
 801f256:	4909      	ldr	r1, [pc, #36]	; (801f27c <siprintf+0x3c>)
 801f258:	f853 2b04 	ldr.w	r2, [r3], #4
 801f25c:	9105      	str	r1, [sp, #20]
 801f25e:	6800      	ldr	r0, [r0, #0]
 801f260:	9301      	str	r3, [sp, #4]
 801f262:	a902      	add	r1, sp, #8
 801f264:	f001 fc3a 	bl	8020adc <_svfiprintf_r>
 801f268:	9b02      	ldr	r3, [sp, #8]
 801f26a:	2200      	movs	r2, #0
 801f26c:	701a      	strb	r2, [r3, #0]
 801f26e:	b01c      	add	sp, #112	; 0x70
 801f270:	f85d eb04 	ldr.w	lr, [sp], #4
 801f274:	b003      	add	sp, #12
 801f276:	4770      	bx	lr
 801f278:	20000108 	.word	0x20000108
 801f27c:	ffff0208 	.word	0xffff0208

0801f280 <__sread>:
 801f280:	b510      	push	{r4, lr}
 801f282:	460c      	mov	r4, r1
 801f284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f288:	f002 f85e 	bl	8021348 <_read_r>
 801f28c:	2800      	cmp	r0, #0
 801f28e:	bfab      	itete	ge
 801f290:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f292:	89a3      	ldrhlt	r3, [r4, #12]
 801f294:	181b      	addge	r3, r3, r0
 801f296:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f29a:	bfac      	ite	ge
 801f29c:	6563      	strge	r3, [r4, #84]	; 0x54
 801f29e:	81a3      	strhlt	r3, [r4, #12]
 801f2a0:	bd10      	pop	{r4, pc}

0801f2a2 <__seofread>:
 801f2a2:	2000      	movs	r0, #0
 801f2a4:	4770      	bx	lr

0801f2a6 <__swrite>:
 801f2a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f2aa:	461f      	mov	r7, r3
 801f2ac:	898b      	ldrh	r3, [r1, #12]
 801f2ae:	05db      	lsls	r3, r3, #23
 801f2b0:	4605      	mov	r5, r0
 801f2b2:	460c      	mov	r4, r1
 801f2b4:	4616      	mov	r6, r2
 801f2b6:	d505      	bpl.n	801f2c4 <__swrite+0x1e>
 801f2b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f2bc:	2302      	movs	r3, #2
 801f2be:	2200      	movs	r2, #0
 801f2c0:	f001 fb5a 	bl	8020978 <_lseek_r>
 801f2c4:	89a3      	ldrh	r3, [r4, #12]
 801f2c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f2ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f2ce:	81a3      	strh	r3, [r4, #12]
 801f2d0:	4632      	mov	r2, r6
 801f2d2:	463b      	mov	r3, r7
 801f2d4:	4628      	mov	r0, r5
 801f2d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f2da:	f001 b8d5 	b.w	8020488 <_write_r>

0801f2de <__sseek>:
 801f2de:	b510      	push	{r4, lr}
 801f2e0:	460c      	mov	r4, r1
 801f2e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f2e6:	f001 fb47 	bl	8020978 <_lseek_r>
 801f2ea:	1c43      	adds	r3, r0, #1
 801f2ec:	89a3      	ldrh	r3, [r4, #12]
 801f2ee:	bf15      	itete	ne
 801f2f0:	6560      	strne	r0, [r4, #84]	; 0x54
 801f2f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f2f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f2fa:	81a3      	strheq	r3, [r4, #12]
 801f2fc:	bf18      	it	ne
 801f2fe:	81a3      	strhne	r3, [r4, #12]
 801f300:	bd10      	pop	{r4, pc}

0801f302 <__sclose>:
 801f302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f306:	f001 b9c3 	b.w	8020690 <_close_r>
	...

0801f30c <iso_year_adjust>:
 801f30c:	6941      	ldr	r1, [r0, #20]
 801f30e:	2900      	cmp	r1, #0
 801f310:	f240 736c 	movw	r3, #1900	; 0x76c
 801f314:	bfa8      	it	ge
 801f316:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 801f31a:	18ca      	adds	r2, r1, r3
 801f31c:	078b      	lsls	r3, r1, #30
 801f31e:	d105      	bne.n	801f32c <iso_year_adjust+0x20>
 801f320:	2164      	movs	r1, #100	; 0x64
 801f322:	fb92 f3f1 	sdiv	r3, r2, r1
 801f326:	fb01 2313 	mls	r3, r1, r3, r2
 801f32a:	b9db      	cbnz	r3, 801f364 <iso_year_adjust+0x58>
 801f32c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801f330:	fb92 f3f1 	sdiv	r3, r2, r1
 801f334:	fb01 2313 	mls	r3, r1, r3, r2
 801f338:	fab3 f383 	clz	r3, r3
 801f33c:	095b      	lsrs	r3, r3, #5
 801f33e:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 801f342:	0040      	lsls	r0, r0, #1
 801f344:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 801f348:	4418      	add	r0, r3
 801f34a:	f241 63a2 	movw	r3, #5794	; 0x16a2
 801f34e:	4298      	cmp	r0, r3
 801f350:	d03a      	beq.n	801f3c8 <iso_year_adjust+0xbc>
 801f352:	dc21      	bgt.n	801f398 <iso_year_adjust+0x8c>
 801f354:	2801      	cmp	r0, #1
 801f356:	dc1a      	bgt.n	801f38e <iso_year_adjust+0x82>
 801f358:	2800      	cmp	r0, #0
 801f35a:	bfb4      	ite	lt
 801f35c:	2000      	movlt	r0, #0
 801f35e:	f04f 30ff 	movge.w	r0, #4294967295
 801f362:	4770      	bx	lr
 801f364:	2301      	movs	r3, #1
 801f366:	e7ea      	b.n	801f33e <iso_year_adjust+0x32>
 801f368:	2817      	cmp	r0, #23
 801f36a:	d813      	bhi.n	801f394 <iso_year_adjust+0x88>
 801f36c:	e8df f000 	tbb	[pc, r0]
 801f370:	0c0c0c0c 	.word	0x0c0c0c0c
 801f374:	0c0c1212 	.word	0x0c0c1212
 801f378:	12121212 	.word	0x12121212
 801f37c:	12121212 	.word	0x12121212
 801f380:	0c0c1212 	.word	0x0c0c1212
 801f384:	0c0c1212 	.word	0x0c0c1212
 801f388:	f04f 30ff 	mov.w	r0, #4294967295
 801f38c:	4770      	bx	lr
 801f38e:	380a      	subs	r0, #10
 801f390:	2817      	cmp	r0, #23
 801f392:	d9e9      	bls.n	801f368 <iso_year_adjust+0x5c>
 801f394:	2000      	movs	r0, #0
 801f396:	4770      	bx	lr
 801f398:	f241 63b4 	movw	r3, #5812	; 0x16b4
 801f39c:	4298      	cmp	r0, r3
 801f39e:	dc06      	bgt.n	801f3ae <iso_year_adjust+0xa2>
 801f3a0:	f241 63b1 	movw	r3, #5809	; 0x16b1
 801f3a4:	4298      	cmp	r0, r3
 801f3a6:	bfd4      	ite	le
 801f3a8:	2000      	movle	r0, #0
 801f3aa:	2001      	movgt	r0, #1
 801f3ac:	4770      	bx	lr
 801f3ae:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 801f3b2:	3802      	subs	r0, #2
 801f3b4:	2815      	cmp	r0, #21
 801f3b6:	d8ed      	bhi.n	801f394 <iso_year_adjust+0x88>
 801f3b8:	2301      	movs	r3, #1
 801f3ba:	4083      	lsls	r3, r0
 801f3bc:	4803      	ldr	r0, [pc, #12]	; (801f3cc <iso_year_adjust+0xc0>)
 801f3be:	4018      	ands	r0, r3
 801f3c0:	3800      	subs	r0, #0
 801f3c2:	bf18      	it	ne
 801f3c4:	2001      	movne	r0, #1
 801f3c6:	4770      	bx	lr
 801f3c8:	2001      	movs	r0, #1
 801f3ca:	4770      	bx	lr
 801f3cc:	002a001f 	.word	0x002a001f

0801f3d0 <__strftime>:
 801f3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3d4:	b091      	sub	sp, #68	; 0x44
 801f3d6:	461d      	mov	r5, r3
 801f3d8:	2300      	movs	r3, #0
 801f3da:	4681      	mov	r9, r0
 801f3dc:	4688      	mov	r8, r1
 801f3de:	9304      	str	r3, [sp, #16]
 801f3e0:	461c      	mov	r4, r3
 801f3e2:	7813      	ldrb	r3, [r2, #0]
 801f3e4:	2b00      	cmp	r3, #0
 801f3e6:	f000 84d1 	beq.w	801fd8c <__strftime+0x9bc>
 801f3ea:	2b25      	cmp	r3, #37	; 0x25
 801f3ec:	d11b      	bne.n	801f426 <__strftime+0x56>
 801f3ee:	7857      	ldrb	r7, [r2, #1]
 801f3f0:	2f30      	cmp	r7, #48	; 0x30
 801f3f2:	d024      	beq.n	801f43e <__strftime+0x6e>
 801f3f4:	2f2b      	cmp	r7, #43	; 0x2b
 801f3f6:	d022      	beq.n	801f43e <__strftime+0x6e>
 801f3f8:	f102 0b01 	add.w	fp, r2, #1
 801f3fc:	2700      	movs	r7, #0
 801f3fe:	f89b 3000 	ldrb.w	r3, [fp]
 801f402:	3b31      	subs	r3, #49	; 0x31
 801f404:	2b08      	cmp	r3, #8
 801f406:	d81d      	bhi.n	801f444 <__strftime+0x74>
 801f408:	4658      	mov	r0, fp
 801f40a:	220a      	movs	r2, #10
 801f40c:	a908      	add	r1, sp, #32
 801f40e:	f000 fd6f 	bl	801fef0 <strtoul>
 801f412:	f8dd b020 	ldr.w	fp, [sp, #32]
 801f416:	4606      	mov	r6, r0
 801f418:	f89b 3000 	ldrb.w	r3, [fp]
 801f41c:	2b45      	cmp	r3, #69	; 0x45
 801f41e:	d113      	bne.n	801f448 <__strftime+0x78>
 801f420:	f10b 0b01 	add.w	fp, fp, #1
 801f424:	e012      	b.n	801f44c <__strftime+0x7c>
 801f426:	f108 31ff 	add.w	r1, r8, #4294967295
 801f42a:	42a1      	cmp	r1, r4
 801f42c:	d802      	bhi.n	801f434 <__strftime+0x64>
 801f42e:	2400      	movs	r4, #0
 801f430:	f000 bcb2 	b.w	801fd98 <__strftime+0x9c8>
 801f434:	f809 3004 	strb.w	r3, [r9, r4]
 801f438:	3201      	adds	r2, #1
 801f43a:	3401      	adds	r4, #1
 801f43c:	e7d1      	b.n	801f3e2 <__strftime+0x12>
 801f43e:	f102 0b02 	add.w	fp, r2, #2
 801f442:	e7dc      	b.n	801f3fe <__strftime+0x2e>
 801f444:	2600      	movs	r6, #0
 801f446:	e7e7      	b.n	801f418 <__strftime+0x48>
 801f448:	2b4f      	cmp	r3, #79	; 0x4f
 801f44a:	d0e9      	beq.n	801f420 <__strftime+0x50>
 801f44c:	f89b 0000 	ldrb.w	r0, [fp]
 801f450:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 801f454:	2b55      	cmp	r3, #85	; 0x55
 801f456:	d8ea      	bhi.n	801f42e <__strftime+0x5e>
 801f458:	a201      	add	r2, pc, #4	; (adr r2, 801f460 <__strftime+0x90>)
 801f45a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f45e:	bf00      	nop
 801f460:	0801fd7f 	.word	0x0801fd7f
 801f464:	0801f42f 	.word	0x0801f42f
 801f468:	0801f42f 	.word	0x0801f42f
 801f46c:	0801f42f 	.word	0x0801f42f
 801f470:	0801f42f 	.word	0x0801f42f
 801f474:	0801f42f 	.word	0x0801f42f
 801f478:	0801f42f 	.word	0x0801f42f
 801f47c:	0801f42f 	.word	0x0801f42f
 801f480:	0801f42f 	.word	0x0801f42f
 801f484:	0801f42f 	.word	0x0801f42f
 801f488:	0801f42f 	.word	0x0801f42f
 801f48c:	0801f42f 	.word	0x0801f42f
 801f490:	0801f42f 	.word	0x0801f42f
 801f494:	0801f42f 	.word	0x0801f42f
 801f498:	0801f42f 	.word	0x0801f42f
 801f49c:	0801f42f 	.word	0x0801f42f
 801f4a0:	0801f42f 	.word	0x0801f42f
 801f4a4:	0801f42f 	.word	0x0801f42f
 801f4a8:	0801f42f 	.word	0x0801f42f
 801f4ac:	0801f42f 	.word	0x0801f42f
 801f4b0:	0801f42f 	.word	0x0801f42f
 801f4b4:	0801f42f 	.word	0x0801f42f
 801f4b8:	0801f42f 	.word	0x0801f42f
 801f4bc:	0801f42f 	.word	0x0801f42f
 801f4c0:	0801f42f 	.word	0x0801f42f
 801f4c4:	0801f42f 	.word	0x0801f42f
 801f4c8:	0801f42f 	.word	0x0801f42f
 801f4cc:	0801f42f 	.word	0x0801f42f
 801f4d0:	0801f5f7 	.word	0x0801f5f7
 801f4d4:	0801f651 	.word	0x0801f651
 801f4d8:	0801f6c7 	.word	0x0801f6c7
 801f4dc:	0801f761 	.word	0x0801f761
 801f4e0:	0801f42f 	.word	0x0801f42f
 801f4e4:	0801f7ad 	.word	0x0801f7ad
 801f4e8:	0801f88d 	.word	0x0801f88d
 801f4ec:	0801f98f 	.word	0x0801f98f
 801f4f0:	0801f99d 	.word	0x0801f99d
 801f4f4:	0801f42f 	.word	0x0801f42f
 801f4f8:	0801f42f 	.word	0x0801f42f
 801f4fc:	0801f42f 	.word	0x0801f42f
 801f500:	0801f9cd 	.word	0x0801f9cd
 801f504:	0801f42f 	.word	0x0801f42f
 801f508:	0801f42f 	.word	0x0801f42f
 801f50c:	0801f9e5 	.word	0x0801f9e5
 801f510:	0801f42f 	.word	0x0801f42f
 801f514:	0801fa33 	.word	0x0801fa33
 801f518:	0801fb49 	.word	0x0801fb49
 801f51c:	0801fb5b 	.word	0x0801fb5b
 801f520:	0801fbb3 	.word	0x0801fbb3
 801f524:	0801fbc3 	.word	0x0801fbc3
 801f528:	0801fc39 	.word	0x0801fc39
 801f52c:	0801f6bf 	.word	0x0801f6bf
 801f530:	0801fc6d 	.word	0x0801fc6d
 801f534:	0801fd2b 	.word	0x0801fd2b
 801f538:	0801f42f 	.word	0x0801f42f
 801f53c:	0801f42f 	.word	0x0801f42f
 801f540:	0801f42f 	.word	0x0801f42f
 801f544:	0801f42f 	.word	0x0801f42f
 801f548:	0801f42f 	.word	0x0801f42f
 801f54c:	0801f42f 	.word	0x0801f42f
 801f550:	0801f5b9 	.word	0x0801f5b9
 801f554:	0801f625 	.word	0x0801f625
 801f558:	0801f67f 	.word	0x0801f67f
 801f55c:	0801f739 	.word	0x0801f739
 801f560:	0801f739 	.word	0x0801f739
 801f564:	0801f42f 	.word	0x0801f42f
 801f568:	0801f7f5 	.word	0x0801f7f5
 801f56c:	0801f625 	.word	0x0801f625
 801f570:	0801f42f 	.word	0x0801f42f
 801f574:	0801f9bf 	.word	0x0801f9bf
 801f578:	0801f98f 	.word	0x0801f98f
 801f57c:	0801f99d 	.word	0x0801f99d
 801f580:	0801f9c7 	.word	0x0801f9c7
 801f584:	0801f9d1 	.word	0x0801f9d1
 801f588:	0801f42f 	.word	0x0801f42f
 801f58c:	0801f9e5 	.word	0x0801f9e5
 801f590:	0801f42f 	.word	0x0801f42f
 801f594:	0801f6af 	.word	0x0801f6af
 801f598:	0801fa49 	.word	0x0801fa49
 801f59c:	0801fb4d 	.word	0x0801fb4d
 801f5a0:	0801fb95 	.word	0x0801fb95
 801f5a4:	0801f42f 	.word	0x0801f42f
 801f5a8:	0801fc29 	.word	0x0801fc29
 801f5ac:	0801f6b7 	.word	0x0801f6b7
 801f5b0:	0801fc51 	.word	0x0801fc51
 801f5b4:	0801fcbd 	.word	0x0801fcbd
 801f5b8:	69ab      	ldr	r3, [r5, #24]
 801f5ba:	4aa7      	ldr	r2, [pc, #668]	; (801f858 <__strftime+0x488>)
 801f5bc:	3318      	adds	r3, #24
 801f5be:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801f5c2:	4630      	mov	r0, r6
 801f5c4:	f7e0 fe3a 	bl	800023c <strlen>
 801f5c8:	3e01      	subs	r6, #1
 801f5ca:	4420      	add	r0, r4
 801f5cc:	f108 33ff 	add.w	r3, r8, #4294967295
 801f5d0:	42a0      	cmp	r0, r4
 801f5d2:	d107      	bne.n	801f5e4 <__strftime+0x214>
 801f5d4:	f89b 3000 	ldrb.w	r3, [fp]
 801f5d8:	2b00      	cmp	r3, #0
 801f5da:	f000 83d7 	beq.w	801fd8c <__strftime+0x9bc>
 801f5de:	f10b 0201 	add.w	r2, fp, #1
 801f5e2:	e6fe      	b.n	801f3e2 <__strftime+0x12>
 801f5e4:	42a3      	cmp	r3, r4
 801f5e6:	f67f af22 	bls.w	801f42e <__strftime+0x5e>
 801f5ea:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801f5ee:	f809 2004 	strb.w	r2, [r9, r4]
 801f5f2:	3401      	adds	r4, #1
 801f5f4:	e7ec      	b.n	801f5d0 <__strftime+0x200>
 801f5f6:	69aa      	ldr	r2, [r5, #24]
 801f5f8:	4b97      	ldr	r3, [pc, #604]	; (801f858 <__strftime+0x488>)
 801f5fa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801f5fe:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 801f600:	4630      	mov	r0, r6
 801f602:	f7e0 fe1b 	bl	800023c <strlen>
 801f606:	3e01      	subs	r6, #1
 801f608:	4420      	add	r0, r4
 801f60a:	f108 33ff 	add.w	r3, r8, #4294967295
 801f60e:	42a0      	cmp	r0, r4
 801f610:	d0e0      	beq.n	801f5d4 <__strftime+0x204>
 801f612:	42a3      	cmp	r3, r4
 801f614:	f67f af0b 	bls.w	801f42e <__strftime+0x5e>
 801f618:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801f61c:	f809 2004 	strb.w	r2, [r9, r4]
 801f620:	3401      	adds	r4, #1
 801f622:	e7f4      	b.n	801f60e <__strftime+0x23e>
 801f624:	4b8c      	ldr	r3, [pc, #560]	; (801f858 <__strftime+0x488>)
 801f626:	692a      	ldr	r2, [r5, #16]
 801f628:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801f62c:	4630      	mov	r0, r6
 801f62e:	f7e0 fe05 	bl	800023c <strlen>
 801f632:	3e01      	subs	r6, #1
 801f634:	4420      	add	r0, r4
 801f636:	f108 33ff 	add.w	r3, r8, #4294967295
 801f63a:	42a0      	cmp	r0, r4
 801f63c:	d0ca      	beq.n	801f5d4 <__strftime+0x204>
 801f63e:	42a3      	cmp	r3, r4
 801f640:	f67f aef5 	bls.w	801f42e <__strftime+0x5e>
 801f644:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801f648:	f809 2004 	strb.w	r2, [r9, r4]
 801f64c:	3401      	adds	r4, #1
 801f64e:	e7f4      	b.n	801f63a <__strftime+0x26a>
 801f650:	692b      	ldr	r3, [r5, #16]
 801f652:	4a81      	ldr	r2, [pc, #516]	; (801f858 <__strftime+0x488>)
 801f654:	330c      	adds	r3, #12
 801f656:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801f65a:	4630      	mov	r0, r6
 801f65c:	f7e0 fdee 	bl	800023c <strlen>
 801f660:	3e01      	subs	r6, #1
 801f662:	4420      	add	r0, r4
 801f664:	f108 33ff 	add.w	r3, r8, #4294967295
 801f668:	42a0      	cmp	r0, r4
 801f66a:	d0b3      	beq.n	801f5d4 <__strftime+0x204>
 801f66c:	42a3      	cmp	r3, r4
 801f66e:	f67f aede 	bls.w	801f42e <__strftime+0x5e>
 801f672:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801f676:	f809 2004 	strb.w	r2, [r9, r4]
 801f67a:	3401      	adds	r4, #1
 801f67c:	e7f4      	b.n	801f668 <__strftime+0x298>
 801f67e:	4b76      	ldr	r3, [pc, #472]	; (801f858 <__strftime+0x488>)
 801f680:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 801f684:	4630      	mov	r0, r6
 801f686:	f7e0 fdd9 	bl	800023c <strlen>
 801f68a:	7833      	ldrb	r3, [r6, #0]
 801f68c:	2b00      	cmp	r3, #0
 801f68e:	d0a1      	beq.n	801f5d4 <__strftime+0x204>
 801f690:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f692:	9300      	str	r3, [sp, #0]
 801f694:	4632      	mov	r2, r6
 801f696:	462b      	mov	r3, r5
 801f698:	eba8 0104 	sub.w	r1, r8, r4
 801f69c:	eb09 0004 	add.w	r0, r9, r4
 801f6a0:	f7ff fe96 	bl	801f3d0 <__strftime>
 801f6a4:	2800      	cmp	r0, #0
 801f6a6:	f77f aec2 	ble.w	801f42e <__strftime+0x5e>
 801f6aa:	4404      	add	r4, r0
 801f6ac:	e792      	b.n	801f5d4 <__strftime+0x204>
 801f6ae:	4b6a      	ldr	r3, [pc, #424]	; (801f858 <__strftime+0x488>)
 801f6b0:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 801f6b4:	e7e6      	b.n	801f684 <__strftime+0x2b4>
 801f6b6:	4b68      	ldr	r3, [pc, #416]	; (801f858 <__strftime+0x488>)
 801f6b8:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 801f6bc:	e7e2      	b.n	801f684 <__strftime+0x2b4>
 801f6be:	4b66      	ldr	r3, [pc, #408]	; (801f858 <__strftime+0x488>)
 801f6c0:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 801f6c4:	e7de      	b.n	801f684 <__strftime+0x2b4>
 801f6c6:	4965      	ldr	r1, [pc, #404]	; (801f85c <__strftime+0x48c>)
 801f6c8:	f8d5 a014 	ldr.w	sl, [r5, #20]
 801f6cc:	458a      	cmp	sl, r1
 801f6ce:	bfac      	ite	ge
 801f6d0:	2100      	movge	r1, #0
 801f6d2:	2101      	movlt	r1, #1
 801f6d4:	f1ba 0f00 	cmp.w	sl, #0
 801f6d8:	db0e      	blt.n	801f6f8 <__strftime+0x328>
 801f6da:	2064      	movs	r0, #100	; 0x64
 801f6dc:	fb9a f0f0 	sdiv	r0, sl, r0
 801f6e0:	3013      	adds	r0, #19
 801f6e2:	b19f      	cbz	r7, 801f70c <__strftime+0x33c>
 801f6e4:	2863      	cmp	r0, #99	; 0x63
 801f6e6:	dd25      	ble.n	801f734 <__strftime+0x364>
 801f6e8:	4a5d      	ldr	r2, [pc, #372]	; (801f860 <__strftime+0x490>)
 801f6ea:	4b5e      	ldr	r3, [pc, #376]	; (801f864 <__strftime+0x494>)
 801f6ec:	2f2b      	cmp	r7, #43	; 0x2b
 801f6ee:	bf14      	ite	ne
 801f6f0:	4617      	movne	r7, r2
 801f6f2:	461f      	moveq	r7, r3
 801f6f4:	4a5c      	ldr	r2, [pc, #368]	; (801f868 <__strftime+0x498>)
 801f6f6:	e00b      	b.n	801f710 <__strftime+0x340>
 801f6f8:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 801f6fc:	9105      	str	r1, [sp, #20]
 801f6fe:	f000 ffa5 	bl	802064c <abs>
 801f702:	2364      	movs	r3, #100	; 0x64
 801f704:	9905      	ldr	r1, [sp, #20]
 801f706:	fb90 f0f3 	sdiv	r0, r0, r3
 801f70a:	e7ea      	b.n	801f6e2 <__strftime+0x312>
 801f70c:	4f54      	ldr	r7, [pc, #336]	; (801f860 <__strftime+0x490>)
 801f70e:	4a57      	ldr	r2, [pc, #348]	; (801f86c <__strftime+0x49c>)
 801f710:	4b57      	ldr	r3, [pc, #348]	; (801f870 <__strftime+0x4a0>)
 801f712:	9001      	str	r0, [sp, #4]
 801f714:	2e02      	cmp	r6, #2
 801f716:	bf2c      	ite	cs
 801f718:	ebc1 0606 	rsbcs	r6, r1, r6
 801f71c:	f1c1 0602 	rsbcc	r6, r1, #2
 801f720:	494e      	ldr	r1, [pc, #312]	; (801f85c <__strftime+0x48c>)
 801f722:	9600      	str	r6, [sp, #0]
 801f724:	458a      	cmp	sl, r1
 801f726:	bfa8      	it	ge
 801f728:	463b      	movge	r3, r7
 801f72a:	eba8 0104 	sub.w	r1, r8, r4
 801f72e:	eb09 0004 	add.w	r0, r9, r4
 801f732:	e02a      	b.n	801f78a <__strftime+0x3ba>
 801f734:	4f4a      	ldr	r7, [pc, #296]	; (801f860 <__strftime+0x490>)
 801f736:	e7dd      	b.n	801f6f4 <__strftime+0x324>
 801f738:	494e      	ldr	r1, [pc, #312]	; (801f874 <__strftime+0x4a4>)
 801f73a:	4a4f      	ldr	r2, [pc, #316]	; (801f878 <__strftime+0x4a8>)
 801f73c:	68eb      	ldr	r3, [r5, #12]
 801f73e:	2864      	cmp	r0, #100	; 0x64
 801f740:	bf08      	it	eq
 801f742:	460a      	moveq	r2, r1
 801f744:	eba8 0104 	sub.w	r1, r8, r4
 801f748:	eb09 0004 	add.w	r0, r9, r4
 801f74c:	f001 fe0e 	bl	802136c <sniprintf>
 801f750:	2800      	cmp	r0, #0
 801f752:	f6ff ae6c 	blt.w	801f42e <__strftime+0x5e>
 801f756:	4404      	add	r4, r0
 801f758:	45a0      	cmp	r8, r4
 801f75a:	f63f af3b 	bhi.w	801f5d4 <__strftime+0x204>
 801f75e:	e666      	b.n	801f42e <__strftime+0x5e>
 801f760:	6968      	ldr	r0, [r5, #20]
 801f762:	692b      	ldr	r3, [r5, #16]
 801f764:	68ef      	ldr	r7, [r5, #12]
 801f766:	2800      	cmp	r0, #0
 801f768:	eb09 0604 	add.w	r6, r9, r4
 801f76c:	eba8 0104 	sub.w	r1, r8, r4
 801f770:	f103 0301 	add.w	r3, r3, #1
 801f774:	db0c      	blt.n	801f790 <__strftime+0x3c0>
 801f776:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801f77a:	fb90 f2fc 	sdiv	r2, r0, ip
 801f77e:	fb0c 0212 	mls	r2, ip, r2, r0
 801f782:	e9cd 7200 	strd	r7, r2, [sp]
 801f786:	4a3d      	ldr	r2, [pc, #244]	; (801f87c <__strftime+0x4ac>)
 801f788:	4630      	mov	r0, r6
 801f78a:	f001 fdef 	bl	802136c <sniprintf>
 801f78e:	e7df      	b.n	801f750 <__strftime+0x380>
 801f790:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801f794:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801f798:	f000 ff58 	bl	802064c <abs>
 801f79c:	2264      	movs	r2, #100	; 0x64
 801f79e:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 801f7a2:	fb90 fcf2 	sdiv	ip, r0, r2
 801f7a6:	fb0c 0212 	mls	r2, ip, r2, r0
 801f7aa:	e7ea      	b.n	801f782 <__strftime+0x3b2>
 801f7ac:	2325      	movs	r3, #37	; 0x25
 801f7ae:	f88d 3020 	strb.w	r3, [sp, #32]
 801f7b2:	b187      	cbz	r7, 801f7d6 <__strftime+0x406>
 801f7b4:	2e06      	cmp	r6, #6
 801f7b6:	bf38      	it	cc
 801f7b8:	2606      	movcc	r6, #6
 801f7ba:	1fb3      	subs	r3, r6, #6
 801f7bc:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 801f7c0:	d10c      	bne.n	801f7dc <__strftime+0x40c>
 801f7c2:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 801f7c6:	492e      	ldr	r1, [pc, #184]	; (801f880 <__strftime+0x4b0>)
 801f7c8:	f001 fe30 	bl	802142c <strcpy>
 801f7cc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f7ce:	9300      	str	r3, [sp, #0]
 801f7d0:	aa08      	add	r2, sp, #32
 801f7d2:	462b      	mov	r3, r5
 801f7d4:	e760      	b.n	801f698 <__strftime+0x2c8>
 801f7d6:	272b      	movs	r7, #43	; 0x2b
 801f7d8:	260a      	movs	r6, #10
 801f7da:	e7ee      	b.n	801f7ba <__strftime+0x3ea>
 801f7dc:	4a29      	ldr	r2, [pc, #164]	; (801f884 <__strftime+0x4b4>)
 801f7de:	211e      	movs	r1, #30
 801f7e0:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 801f7e4:	f001 fdc2 	bl	802136c <sniprintf>
 801f7e8:	2800      	cmp	r0, #0
 801f7ea:	ddea      	ble.n	801f7c2 <__strftime+0x3f2>
 801f7ec:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 801f7f0:	4418      	add	r0, r3
 801f7f2:	e7e8      	b.n	801f7c6 <__strftime+0x3f6>
 801f7f4:	4628      	mov	r0, r5
 801f7f6:	f7ff fd89 	bl	801f30c <iso_year_adjust>
 801f7fa:	4606      	mov	r6, r0
 801f7fc:	6968      	ldr	r0, [r5, #20]
 801f7fe:	2800      	cmp	r0, #0
 801f800:	db11      	blt.n	801f826 <__strftime+0x456>
 801f802:	2264      	movs	r2, #100	; 0x64
 801f804:	fb90 f3f2 	sdiv	r3, r0, r2
 801f808:	fb02 0313 	mls	r3, r2, r3, r0
 801f80c:	441e      	add	r6, r3
 801f80e:	2364      	movs	r3, #100	; 0x64
 801f810:	fb96 f0f3 	sdiv	r0, r6, r3
 801f814:	fb03 6610 	mls	r6, r3, r0, r6
 801f818:	441e      	add	r6, r3
 801f81a:	fbb6 f2f3 	udiv	r2, r6, r3
 801f81e:	fb03 6312 	mls	r3, r3, r2, r6
 801f822:	4a14      	ldr	r2, [pc, #80]	; (801f874 <__strftime+0x4a4>)
 801f824:	e78e      	b.n	801f744 <__strftime+0x374>
 801f826:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801f82a:	f000 ff0f 	bl	802064c <abs>
 801f82e:	2364      	movs	r3, #100	; 0x64
 801f830:	2e00      	cmp	r6, #0
 801f832:	fb90 f2f3 	sdiv	r2, r0, r3
 801f836:	fb02 0313 	mls	r3, r2, r3, r0
 801f83a:	da05      	bge.n	801f848 <__strftime+0x478>
 801f83c:	6969      	ldr	r1, [r5, #20]
 801f83e:	4a12      	ldr	r2, [pc, #72]	; (801f888 <__strftime+0x4b8>)
 801f840:	4291      	cmp	r1, r2
 801f842:	bfb8      	it	lt
 801f844:	2601      	movlt	r6, #1
 801f846:	e7e1      	b.n	801f80c <__strftime+0x43c>
 801f848:	d0e0      	beq.n	801f80c <__strftime+0x43c>
 801f84a:	6969      	ldr	r1, [r5, #20]
 801f84c:	4a03      	ldr	r2, [pc, #12]	; (801f85c <__strftime+0x48c>)
 801f84e:	4291      	cmp	r1, r2
 801f850:	bfb8      	it	lt
 801f852:	f04f 36ff 	movlt.w	r6, #4294967295
 801f856:	e7d9      	b.n	801f80c <__strftime+0x43c>
 801f858:	080276f4 	.word	0x080276f4
 801f85c:	fffff894 	.word	0xfffff894
 801f860:	08027867 	.word	0x08027867
 801f864:	0802757e 	.word	0x0802757e
 801f868:	08027576 	.word	0x08027576
 801f86c:	0802756f 	.word	0x0802756f
 801f870:	080279a7 	.word	0x080279a7
 801f874:	0802758e 	.word	0x0802758e
 801f878:	08027580 	.word	0x08027580
 801f87c:	08027584 	.word	0x08027584
 801f880:	08027597 	.word	0x08027597
 801f884:	08027593 	.word	0x08027593
 801f888:	fffff895 	.word	0xfffff895
 801f88c:	4bb6      	ldr	r3, [pc, #728]	; (801fb68 <__strftime+0x798>)
 801f88e:	6969      	ldr	r1, [r5, #20]
 801f890:	4299      	cmp	r1, r3
 801f892:	bfac      	ite	ge
 801f894:	2300      	movge	r3, #0
 801f896:	2301      	movlt	r3, #1
 801f898:	4628      	mov	r0, r5
 801f89a:	e9cd 3105 	strd	r3, r1, [sp, #20]
 801f89e:	f7ff fd35 	bl	801f30c <iso_year_adjust>
 801f8a2:	9906      	ldr	r1, [sp, #24]
 801f8a4:	2900      	cmp	r1, #0
 801f8a6:	4682      	mov	sl, r0
 801f8a8:	db27      	blt.n	801f8fa <__strftime+0x52a>
 801f8aa:	2264      	movs	r2, #100	; 0x64
 801f8ac:	fb91 f2f2 	sdiv	r2, r1, r2
 801f8b0:	3213      	adds	r2, #19
 801f8b2:	6968      	ldr	r0, [r5, #20]
 801f8b4:	2800      	cmp	r0, #0
 801f8b6:	db2b      	blt.n	801f910 <__strftime+0x540>
 801f8b8:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801f8bc:	fb90 fefc 	sdiv	lr, r0, ip
 801f8c0:	fb0c 001e 	mls	r0, ip, lr, r0
 801f8c4:	f1ba 0f00 	cmp.w	sl, #0
 801f8c8:	da31      	bge.n	801f92e <__strftime+0x55e>
 801f8ca:	6969      	ldr	r1, [r5, #20]
 801f8cc:	4ba7      	ldr	r3, [pc, #668]	; (801fb6c <__strftime+0x79c>)
 801f8ce:	4299      	cmp	r1, r3
 801f8d0:	db38      	blt.n	801f944 <__strftime+0x574>
 801f8d2:	eb0a 0300 	add.w	r3, sl, r0
 801f8d6:	1c59      	adds	r1, r3, #1
 801f8d8:	d139      	bne.n	801f94e <__strftime+0x57e>
 801f8da:	3a01      	subs	r2, #1
 801f8dc:	2363      	movs	r3, #99	; 0x63
 801f8de:	2064      	movs	r0, #100	; 0x64
 801f8e0:	fb00 3202 	mla	r2, r0, r2, r3
 801f8e4:	9b05      	ldr	r3, [sp, #20]
 801f8e6:	2b00      	cmp	r3, #0
 801f8e8:	d036      	beq.n	801f958 <__strftime+0x588>
 801f8ea:	232d      	movs	r3, #45	; 0x2d
 801f8ec:	f88d 3020 	strb.w	r3, [sp, #32]
 801f8f0:	b106      	cbz	r6, 801f8f4 <__strftime+0x524>
 801f8f2:	3e01      	subs	r6, #1
 801f8f4:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 801f8f8:	e038      	b.n	801f96c <__strftime+0x59c>
 801f8fa:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 801f8fe:	9106      	str	r1, [sp, #24]
 801f900:	f000 fea4 	bl	802064c <abs>
 801f904:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801f908:	9906      	ldr	r1, [sp, #24]
 801f90a:	fb90 f2fc 	sdiv	r2, r0, ip
 801f90e:	e7d0      	b.n	801f8b2 <__strftime+0x4e2>
 801f910:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801f914:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801f918:	f000 fe98 	bl	802064c <abs>
 801f91c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801f920:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801f924:	fb90 fefc 	sdiv	lr, r0, ip
 801f928:	fb0e 001c 	mls	r0, lr, ip, r0
 801f92c:	e7ca      	b.n	801f8c4 <__strftime+0x4f4>
 801f92e:	d0d0      	beq.n	801f8d2 <__strftime+0x502>
 801f930:	4b8d      	ldr	r3, [pc, #564]	; (801fb68 <__strftime+0x798>)
 801f932:	4299      	cmp	r1, r3
 801f934:	bfb4      	ite	lt
 801f936:	2301      	movlt	r3, #1
 801f938:	2300      	movge	r3, #0
 801f93a:	9305      	str	r3, [sp, #20]
 801f93c:	bfb8      	it	lt
 801f93e:	f04f 3aff 	movlt.w	sl, #4294967295
 801f942:	e7c6      	b.n	801f8d2 <__strftime+0x502>
 801f944:	f04f 0a01 	mov.w	sl, #1
 801f948:	f8cd a014 	str.w	sl, [sp, #20]
 801f94c:	e7c1      	b.n	801f8d2 <__strftime+0x502>
 801f94e:	2b64      	cmp	r3, #100	; 0x64
 801f950:	bf04      	itt	eq
 801f952:	3201      	addeq	r2, #1
 801f954:	2300      	moveq	r3, #0
 801f956:	e7c2      	b.n	801f8de <__strftime+0x50e>
 801f958:	2f2b      	cmp	r7, #43	; 0x2b
 801f95a:	d106      	bne.n	801f96a <__strftime+0x59a>
 801f95c:	f242 730f 	movw	r3, #9999	; 0x270f
 801f960:	429a      	cmp	r2, r3
 801f962:	d902      	bls.n	801f96a <__strftime+0x59a>
 801f964:	f88d 7020 	strb.w	r7, [sp, #32]
 801f968:	e7c2      	b.n	801f8f0 <__strftime+0x520>
 801f96a:	ab08      	add	r3, sp, #32
 801f96c:	2125      	movs	r1, #37	; 0x25
 801f96e:	7019      	strb	r1, [r3, #0]
 801f970:	b94f      	cbnz	r7, 801f986 <__strftime+0x5b6>
 801f972:	1c58      	adds	r0, r3, #1
 801f974:	497e      	ldr	r1, [pc, #504]	; (801fb70 <__strftime+0x7a0>)
 801f976:	9205      	str	r2, [sp, #20]
 801f978:	f001 fd58 	bl	802142c <strcpy>
 801f97c:	9a05      	ldr	r2, [sp, #20]
 801f97e:	9200      	str	r2, [sp, #0]
 801f980:	4633      	mov	r3, r6
 801f982:	aa08      	add	r2, sp, #32
 801f984:	e059      	b.n	801fa3a <__strftime+0x66a>
 801f986:	2130      	movs	r1, #48	; 0x30
 801f988:	1c98      	adds	r0, r3, #2
 801f98a:	7059      	strb	r1, [r3, #1]
 801f98c:	e7f2      	b.n	801f974 <__strftime+0x5a4>
 801f98e:	4979      	ldr	r1, [pc, #484]	; (801fb74 <__strftime+0x7a4>)
 801f990:	4a79      	ldr	r2, [pc, #484]	; (801fb78 <__strftime+0x7a8>)
 801f992:	68ab      	ldr	r3, [r5, #8]
 801f994:	286b      	cmp	r0, #107	; 0x6b
 801f996:	bf08      	it	eq
 801f998:	460a      	moveq	r2, r1
 801f99a:	e6d3      	b.n	801f744 <__strftime+0x374>
 801f99c:	68ab      	ldr	r3, [r5, #8]
 801f99e:	b163      	cbz	r3, 801f9ba <__strftime+0x5ea>
 801f9a0:	2b0c      	cmp	r3, #12
 801f9a2:	d004      	beq.n	801f9ae <__strftime+0x5de>
 801f9a4:	210c      	movs	r1, #12
 801f9a6:	fb93 f2f1 	sdiv	r2, r3, r1
 801f9aa:	fb01 3312 	mls	r3, r1, r2, r3
 801f9ae:	4972      	ldr	r1, [pc, #456]	; (801fb78 <__strftime+0x7a8>)
 801f9b0:	4a70      	ldr	r2, [pc, #448]	; (801fb74 <__strftime+0x7a4>)
 801f9b2:	2849      	cmp	r0, #73	; 0x49
 801f9b4:	bf08      	it	eq
 801f9b6:	460a      	moveq	r2, r1
 801f9b8:	e6c4      	b.n	801f744 <__strftime+0x374>
 801f9ba:	230c      	movs	r3, #12
 801f9bc:	e7f7      	b.n	801f9ae <__strftime+0x5de>
 801f9be:	69eb      	ldr	r3, [r5, #28]
 801f9c0:	4a6e      	ldr	r2, [pc, #440]	; (801fb7c <__strftime+0x7ac>)
 801f9c2:	3301      	adds	r3, #1
 801f9c4:	e6be      	b.n	801f744 <__strftime+0x374>
 801f9c6:	692b      	ldr	r3, [r5, #16]
 801f9c8:	3301      	adds	r3, #1
 801f9ca:	e72a      	b.n	801f822 <__strftime+0x452>
 801f9cc:	686b      	ldr	r3, [r5, #4]
 801f9ce:	e728      	b.n	801f822 <__strftime+0x452>
 801f9d0:	f108 33ff 	add.w	r3, r8, #4294967295
 801f9d4:	42a3      	cmp	r3, r4
 801f9d6:	f67f ad2a 	bls.w	801f42e <__strftime+0x5e>
 801f9da:	230a      	movs	r3, #10
 801f9dc:	f809 3004 	strb.w	r3, [r9, r4]
 801f9e0:	3401      	adds	r4, #1
 801f9e2:	e5f7      	b.n	801f5d4 <__strftime+0x204>
 801f9e4:	68ab      	ldr	r3, [r5, #8]
 801f9e6:	2b0b      	cmp	r3, #11
 801f9e8:	bfcc      	ite	gt
 801f9ea:	22a4      	movgt	r2, #164	; 0xa4
 801f9ec:	22a0      	movle	r2, #160	; 0xa0
 801f9ee:	4b64      	ldr	r3, [pc, #400]	; (801fb80 <__strftime+0x7b0>)
 801f9f0:	4413      	add	r3, r2
 801f9f2:	685e      	ldr	r6, [r3, #4]
 801f9f4:	4630      	mov	r0, r6
 801f9f6:	f7e0 fc21 	bl	800023c <strlen>
 801f9fa:	1e72      	subs	r2, r6, #1
 801f9fc:	4420      	add	r0, r4
 801f9fe:	f108 36ff 	add.w	r6, r8, #4294967295
 801fa02:	42a0      	cmp	r0, r4
 801fa04:	f43f ade6 	beq.w	801f5d4 <__strftime+0x204>
 801fa08:	42a6      	cmp	r6, r4
 801fa0a:	f67f ad10 	bls.w	801f42e <__strftime+0x5e>
 801fa0e:	f89b 1000 	ldrb.w	r1, [fp]
 801fa12:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801fa16:	2950      	cmp	r1, #80	; 0x50
 801fa18:	d107      	bne.n	801fa2a <__strftime+0x65a>
 801fa1a:	495a      	ldr	r1, [pc, #360]	; (801fb84 <__strftime+0x7b4>)
 801fa1c:	5cc9      	ldrb	r1, [r1, r3]
 801fa1e:	f001 0103 	and.w	r1, r1, #3
 801fa22:	2901      	cmp	r1, #1
 801fa24:	bf08      	it	eq
 801fa26:	3320      	addeq	r3, #32
 801fa28:	b2db      	uxtb	r3, r3
 801fa2a:	f809 3004 	strb.w	r3, [r9, r4]
 801fa2e:	3401      	adds	r4, #1
 801fa30:	e7e7      	b.n	801fa02 <__strftime+0x632>
 801fa32:	686b      	ldr	r3, [r5, #4]
 801fa34:	9300      	str	r3, [sp, #0]
 801fa36:	4a54      	ldr	r2, [pc, #336]	; (801fb88 <__strftime+0x7b8>)
 801fa38:	68ab      	ldr	r3, [r5, #8]
 801fa3a:	eba8 0104 	sub.w	r1, r8, r4
 801fa3e:	eb09 0004 	add.w	r0, r9, r4
 801fa42:	f001 fc93 	bl	802136c <sniprintf>
 801fa46:	e683      	b.n	801f750 <__strftime+0x380>
 801fa48:	6a2b      	ldr	r3, [r5, #32]
 801fa4a:	2b00      	cmp	r3, #0
 801fa4c:	db79      	blt.n	801fb42 <__strftime+0x772>
 801fa4e:	f000 fb01 	bl	8020054 <__tz_lock>
 801fa52:	9b04      	ldr	r3, [sp, #16]
 801fa54:	b90b      	cbnz	r3, 801fa5a <__strftime+0x68a>
 801fa56:	f000 fb09 	bl	802006c <_tzset_unlocked>
 801fa5a:	f000 fec5 	bl	80207e8 <__gettzinfo>
 801fa5e:	6a2b      	ldr	r3, [r5, #32]
 801fa60:	2b00      	cmp	r3, #0
 801fa62:	bfcc      	ite	gt
 801fa64:	2350      	movgt	r3, #80	; 0x50
 801fa66:	2328      	movle	r3, #40	; 0x28
 801fa68:	58c3      	ldr	r3, [r0, r3]
 801fa6a:	f1c3 0a00 	rsb	sl, r3, #0
 801fa6e:	f000 faf7 	bl	8020060 <__tz_unlock>
 801fa72:	2301      	movs	r3, #1
 801fa74:	9304      	str	r3, [sp, #16]
 801fa76:	f8d5 c014 	ldr.w	ip, [r5, #20]
 801fa7a:	4662      	mov	r2, ip
 801fa7c:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 801fa80:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801fa84:	9602      	str	r6, [sp, #8]
 801fa86:	f143 36ff 	adc.w	r6, r3, #4294967295
 801fa8a:	9603      	str	r6, [sp, #12]
 801fa8c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801fa90:	2e00      	cmp	r6, #0
 801fa92:	f177 0600 	sbcs.w	r6, r7, #0
 801fa96:	eba8 0104 	sub.w	r1, r8, r4
 801fa9a:	eb09 0004 	add.w	r0, r9, r4
 801fa9e:	da05      	bge.n	801faac <__strftime+0x6dc>
 801faa0:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 801faa4:	f143 33ff 	adc.w	r3, r3, #4294967295
 801faa8:	9602      	str	r6, [sp, #8]
 801faaa:	9303      	str	r3, [sp, #12]
 801faac:	9b02      	ldr	r3, [sp, #8]
 801faae:	089e      	lsrs	r6, r3, #2
 801fab0:	9b03      	ldr	r3, [sp, #12]
 801fab2:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 801fab6:	f10c 32ff 	add.w	r2, ip, #4294967295
 801faba:	109f      	asrs	r7, r3, #2
 801fabc:	2364      	movs	r3, #100	; 0x64
 801fabe:	fb92 f3f3 	sdiv	r3, r2, r3
 801fac2:	1af6      	subs	r6, r6, r3
 801fac4:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 801fac8:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 801facc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801fad0:	fb92 f3f3 	sdiv	r3, r2, r3
 801fad4:	18f6      	adds	r6, r6, r3
 801fad6:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801fada:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 801fade:	f240 136d 	movw	r3, #365	; 0x16d
 801fae2:	fb03 fc0c 	mul.w	ip, r3, ip
 801fae6:	69eb      	ldr	r3, [r5, #28]
 801fae8:	eb16 060c 	adds.w	r6, r6, ip
 801faec:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 801faf0:	18f6      	adds	r6, r6, r3
 801faf2:	f04f 0c18 	mov.w	ip, #24
 801faf6:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801fafa:	fba6 230c 	umull	r2, r3, r6, ip
 801fafe:	68ae      	ldr	r6, [r5, #8]
 801fb00:	fb0c 3307 	mla	r3, ip, r7, r3
 801fb04:	1992      	adds	r2, r2, r6
 801fb06:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 801fb0a:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 801fb0e:	fba2 670c 	umull	r6, r7, r2, ip
 801fb12:	fb0c 7703 	mla	r7, ip, r3, r7
 801fb16:	686b      	ldr	r3, [r5, #4]
 801fb18:	18f6      	adds	r6, r6, r3
 801fb1a:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801fb1e:	fba6 230c 	umull	r2, r3, r6, ip
 801fb22:	682e      	ldr	r6, [r5, #0]
 801fb24:	fb0c 3307 	mla	r3, ip, r7, r3
 801fb28:	1992      	adds	r2, r2, r6
 801fb2a:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 801fb2e:	ebb2 020a 	subs.w	r2, r2, sl
 801fb32:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 801fb36:	e9cd 2300 	strd	r2, r3, [sp]
 801fb3a:	4a14      	ldr	r2, [pc, #80]	; (801fb8c <__strftime+0x7bc>)
 801fb3c:	f001 fc16 	bl	802136c <sniprintf>
 801fb40:	e606      	b.n	801f750 <__strftime+0x380>
 801fb42:	f04f 0a00 	mov.w	sl, #0
 801fb46:	e796      	b.n	801fa76 <__strftime+0x6a6>
 801fb48:	682b      	ldr	r3, [r5, #0]
 801fb4a:	e66a      	b.n	801f822 <__strftime+0x452>
 801fb4c:	f108 33ff 	add.w	r3, r8, #4294967295
 801fb50:	42a3      	cmp	r3, r4
 801fb52:	f67f ac6c 	bls.w	801f42e <__strftime+0x5e>
 801fb56:	2309      	movs	r3, #9
 801fb58:	e740      	b.n	801f9dc <__strftime+0x60c>
 801fb5a:	682b      	ldr	r3, [r5, #0]
 801fb5c:	9301      	str	r3, [sp, #4]
 801fb5e:	686b      	ldr	r3, [r5, #4]
 801fb60:	9300      	str	r3, [sp, #0]
 801fb62:	4a0b      	ldr	r2, [pc, #44]	; (801fb90 <__strftime+0x7c0>)
 801fb64:	68ab      	ldr	r3, [r5, #8]
 801fb66:	e5e0      	b.n	801f72a <__strftime+0x35a>
 801fb68:	fffff894 	.word	0xfffff894
 801fb6c:	fffff895 	.word	0xfffff895
 801fb70:	0802759f 	.word	0x0802759f
 801fb74:	08027580 	.word	0x08027580
 801fb78:	0802758e 	.word	0x0802758e
 801fb7c:	080275a3 	.word	0x080275a3
 801fb80:	080276f4 	.word	0x080276f4
 801fb84:	08027869 	.word	0x08027869
 801fb88:	080275b2 	.word	0x080275b2
 801fb8c:	080275a8 	.word	0x080275a8
 801fb90:	080275ad 	.word	0x080275ad
 801fb94:	f108 33ff 	add.w	r3, r8, #4294967295
 801fb98:	42a3      	cmp	r3, r4
 801fb9a:	f67f ac48 	bls.w	801f42e <__strftime+0x5e>
 801fb9e:	69ab      	ldr	r3, [r5, #24]
 801fba0:	eb09 0204 	add.w	r2, r9, r4
 801fba4:	3401      	adds	r4, #1
 801fba6:	b913      	cbnz	r3, 801fbae <__strftime+0x7de>
 801fba8:	2337      	movs	r3, #55	; 0x37
 801fbaa:	7013      	strb	r3, [r2, #0]
 801fbac:	e512      	b.n	801f5d4 <__strftime+0x204>
 801fbae:	3330      	adds	r3, #48	; 0x30
 801fbb0:	e7fb      	b.n	801fbaa <__strftime+0x7da>
 801fbb2:	69eb      	ldr	r3, [r5, #28]
 801fbb4:	69aa      	ldr	r2, [r5, #24]
 801fbb6:	3307      	adds	r3, #7
 801fbb8:	1a9b      	subs	r3, r3, r2
 801fbba:	2207      	movs	r2, #7
 801fbbc:	fb93 f3f2 	sdiv	r3, r3, r2
 801fbc0:	e62f      	b.n	801f822 <__strftime+0x452>
 801fbc2:	4628      	mov	r0, r5
 801fbc4:	f7ff fba2 	bl	801f30c <iso_year_adjust>
 801fbc8:	69aa      	ldr	r2, [r5, #24]
 801fbca:	b132      	cbz	r2, 801fbda <__strftime+0x80a>
 801fbcc:	3a01      	subs	r2, #1
 801fbce:	2800      	cmp	r0, #0
 801fbd0:	dc28      	bgt.n	801fc24 <__strftime+0x854>
 801fbd2:	69eb      	ldr	r3, [r5, #28]
 801fbd4:	d103      	bne.n	801fbde <__strftime+0x80e>
 801fbd6:	330a      	adds	r3, #10
 801fbd8:	e7ee      	b.n	801fbb8 <__strftime+0x7e8>
 801fbda:	2206      	movs	r2, #6
 801fbdc:	e7f7      	b.n	801fbce <__strftime+0x7fe>
 801fbde:	6968      	ldr	r0, [r5, #20]
 801fbe0:	2800      	cmp	r0, #0
 801fbe2:	eba2 0303 	sub.w	r3, r2, r3
 801fbe6:	f240 726b 	movw	r2, #1899	; 0x76b
 801fbea:	bfa8      	it	ge
 801fbec:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 801fbf0:	4410      	add	r0, r2
 801fbf2:	0782      	lsls	r2, r0, #30
 801fbf4:	d105      	bne.n	801fc02 <__strftime+0x832>
 801fbf6:	2264      	movs	r2, #100	; 0x64
 801fbf8:	fb90 f1f2 	sdiv	r1, r0, r2
 801fbfc:	fb02 0111 	mls	r1, r2, r1, r0
 801fc00:	b971      	cbnz	r1, 801fc20 <__strftime+0x850>
 801fc02:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801fc06:	fb90 f2f1 	sdiv	r2, r0, r1
 801fc0a:	fb01 0212 	mls	r2, r1, r2, r0
 801fc0e:	fab2 f282 	clz	r2, r2
 801fc12:	0952      	lsrs	r2, r2, #5
 801fc14:	1a9a      	subs	r2, r3, r2
 801fc16:	2a05      	cmp	r2, #5
 801fc18:	bfb4      	ite	lt
 801fc1a:	2335      	movlt	r3, #53	; 0x35
 801fc1c:	2334      	movge	r3, #52	; 0x34
 801fc1e:	e600      	b.n	801f822 <__strftime+0x452>
 801fc20:	2201      	movs	r2, #1
 801fc22:	e7f7      	b.n	801fc14 <__strftime+0x844>
 801fc24:	2301      	movs	r3, #1
 801fc26:	e5fc      	b.n	801f822 <__strftime+0x452>
 801fc28:	f108 33ff 	add.w	r3, r8, #4294967295
 801fc2c:	42a3      	cmp	r3, r4
 801fc2e:	f67f abfe 	bls.w	801f42e <__strftime+0x5e>
 801fc32:	69ab      	ldr	r3, [r5, #24]
 801fc34:	3330      	adds	r3, #48	; 0x30
 801fc36:	e6d1      	b.n	801f9dc <__strftime+0x60c>
 801fc38:	69ab      	ldr	r3, [r5, #24]
 801fc3a:	b13b      	cbz	r3, 801fc4c <__strftime+0x87c>
 801fc3c:	3b01      	subs	r3, #1
 801fc3e:	69ea      	ldr	r2, [r5, #28]
 801fc40:	3207      	adds	r2, #7
 801fc42:	1ad2      	subs	r2, r2, r3
 801fc44:	2307      	movs	r3, #7
 801fc46:	fb92 f3f3 	sdiv	r3, r2, r3
 801fc4a:	e5ea      	b.n	801f822 <__strftime+0x452>
 801fc4c:	2306      	movs	r3, #6
 801fc4e:	e7f6      	b.n	801fc3e <__strftime+0x86e>
 801fc50:	6968      	ldr	r0, [r5, #20]
 801fc52:	2800      	cmp	r0, #0
 801fc54:	db05      	blt.n	801fc62 <__strftime+0x892>
 801fc56:	2264      	movs	r2, #100	; 0x64
 801fc58:	fb90 f3f2 	sdiv	r3, r0, r2
 801fc5c:	fb03 0312 	mls	r3, r3, r2, r0
 801fc60:	e5df      	b.n	801f822 <__strftime+0x452>
 801fc62:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801fc66:	f000 fcf1 	bl	802064c <abs>
 801fc6a:	e7f4      	b.n	801fc56 <__strftime+0x886>
 801fc6c:	696b      	ldr	r3, [r5, #20]
 801fc6e:	4a4c      	ldr	r2, [pc, #304]	; (801fda0 <__strftime+0x9d0>)
 801fc70:	4293      	cmp	r3, r2
 801fc72:	da09      	bge.n	801fc88 <__strftime+0x8b8>
 801fc74:	212d      	movs	r1, #45	; 0x2d
 801fc76:	f88d 1020 	strb.w	r1, [sp, #32]
 801fc7a:	eba2 0a03 	sub.w	sl, r2, r3
 801fc7e:	b106      	cbz	r6, 801fc82 <__strftime+0x8b2>
 801fc80:	3e01      	subs	r6, #1
 801fc82:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 801fc86:	e00b      	b.n	801fca0 <__strftime+0x8d0>
 801fc88:	2f2b      	cmp	r7, #43	; 0x2b
 801fc8a:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 801fc8e:	d106      	bne.n	801fc9e <__strftime+0x8ce>
 801fc90:	f242 730f 	movw	r3, #9999	; 0x270f
 801fc94:	459a      	cmp	sl, r3
 801fc96:	d902      	bls.n	801fc9e <__strftime+0x8ce>
 801fc98:	f88d 7020 	strb.w	r7, [sp, #32]
 801fc9c:	e7ef      	b.n	801fc7e <__strftime+0x8ae>
 801fc9e:	ab08      	add	r3, sp, #32
 801fca0:	2225      	movs	r2, #37	; 0x25
 801fca2:	701a      	strb	r2, [r3, #0]
 801fca4:	b937      	cbnz	r7, 801fcb4 <__strftime+0x8e4>
 801fca6:	1c58      	adds	r0, r3, #1
 801fca8:	493e      	ldr	r1, [pc, #248]	; (801fda4 <__strftime+0x9d4>)
 801fcaa:	f001 fbbf 	bl	802142c <strcpy>
 801fcae:	f8cd a000 	str.w	sl, [sp]
 801fcb2:	e665      	b.n	801f980 <__strftime+0x5b0>
 801fcb4:	2230      	movs	r2, #48	; 0x30
 801fcb6:	1c98      	adds	r0, r3, #2
 801fcb8:	705a      	strb	r2, [r3, #1]
 801fcba:	e7f5      	b.n	801fca8 <__strftime+0x8d8>
 801fcbc:	6a2b      	ldr	r3, [r5, #32]
 801fcbe:	2b00      	cmp	r3, #0
 801fcc0:	f6ff ac88 	blt.w	801f5d4 <__strftime+0x204>
 801fcc4:	f000 f9c6 	bl	8020054 <__tz_lock>
 801fcc8:	9b04      	ldr	r3, [sp, #16]
 801fcca:	b90b      	cbnz	r3, 801fcd0 <__strftime+0x900>
 801fccc:	f000 f9ce 	bl	802006c <_tzset_unlocked>
 801fcd0:	f000 fd8a 	bl	80207e8 <__gettzinfo>
 801fcd4:	6a2b      	ldr	r3, [r5, #32]
 801fcd6:	2b00      	cmp	r3, #0
 801fcd8:	bfcc      	ite	gt
 801fcda:	2350      	movgt	r3, #80	; 0x50
 801fcdc:	2328      	movle	r3, #40	; 0x28
 801fcde:	eb09 0704 	add.w	r7, r9, r4
 801fce2:	58c6      	ldr	r6, [r0, r3]
 801fce4:	f000 f9bc 	bl	8020060 <__tz_unlock>
 801fce8:	4276      	negs	r6, r6
 801fcea:	233c      	movs	r3, #60	; 0x3c
 801fcec:	fb96 f0f3 	sdiv	r0, r6, r3
 801fcf0:	f000 fe3e 	bl	8020970 <labs>
 801fcf4:	233c      	movs	r3, #60	; 0x3c
 801fcf6:	eba8 0a04 	sub.w	sl, r8, r4
 801fcfa:	fb90 f2f3 	sdiv	r2, r0, r3
 801fcfe:	fb02 0013 	mls	r0, r2, r3, r0
 801fd02:	9000      	str	r0, [sp, #0]
 801fd04:	4a28      	ldr	r2, [pc, #160]	; (801fda8 <__strftime+0x9d8>)
 801fd06:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801fd0a:	4651      	mov	r1, sl
 801fd0c:	4638      	mov	r0, r7
 801fd0e:	fb96 f3f3 	sdiv	r3, r6, r3
 801fd12:	f001 fb2b 	bl	802136c <sniprintf>
 801fd16:	2800      	cmp	r0, #0
 801fd18:	f6ff ab89 	blt.w	801f42e <__strftime+0x5e>
 801fd1c:	4404      	add	r4, r0
 801fd1e:	45a0      	cmp	r8, r4
 801fd20:	f67f ab85 	bls.w	801f42e <__strftime+0x5e>
 801fd24:	2301      	movs	r3, #1
 801fd26:	9304      	str	r3, [sp, #16]
 801fd28:	e454      	b.n	801f5d4 <__strftime+0x204>
 801fd2a:	6a2b      	ldr	r3, [r5, #32]
 801fd2c:	2b00      	cmp	r3, #0
 801fd2e:	f6ff ac51 	blt.w	801f5d4 <__strftime+0x204>
 801fd32:	f000 f98f 	bl	8020054 <__tz_lock>
 801fd36:	9b04      	ldr	r3, [sp, #16]
 801fd38:	b90b      	cbnz	r3, 801fd3e <__strftime+0x96e>
 801fd3a:	f000 f997 	bl	802006c <_tzset_unlocked>
 801fd3e:	6a2b      	ldr	r3, [r5, #32]
 801fd40:	4a1a      	ldr	r2, [pc, #104]	; (801fdac <__strftime+0x9dc>)
 801fd42:	2b00      	cmp	r3, #0
 801fd44:	bfd4      	ite	le
 801fd46:	2300      	movle	r3, #0
 801fd48:	2301      	movgt	r3, #1
 801fd4a:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801fd4e:	4630      	mov	r0, r6
 801fd50:	f7e0 fa74 	bl	800023c <strlen>
 801fd54:	3e01      	subs	r6, #1
 801fd56:	4420      	add	r0, r4
 801fd58:	f108 33ff 	add.w	r3, r8, #4294967295
 801fd5c:	42a0      	cmp	r0, r4
 801fd5e:	d102      	bne.n	801fd66 <__strftime+0x996>
 801fd60:	f000 f97e 	bl	8020060 <__tz_unlock>
 801fd64:	e7de      	b.n	801fd24 <__strftime+0x954>
 801fd66:	42a3      	cmp	r3, r4
 801fd68:	d905      	bls.n	801fd76 <__strftime+0x9a6>
 801fd6a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801fd6e:	f809 2004 	strb.w	r2, [r9, r4]
 801fd72:	3401      	adds	r4, #1
 801fd74:	e7f2      	b.n	801fd5c <__strftime+0x98c>
 801fd76:	f000 f973 	bl	8020060 <__tz_unlock>
 801fd7a:	f7ff bb58 	b.w	801f42e <__strftime+0x5e>
 801fd7e:	f108 33ff 	add.w	r3, r8, #4294967295
 801fd82:	42a3      	cmp	r3, r4
 801fd84:	f67f ab53 	bls.w	801f42e <__strftime+0x5e>
 801fd88:	2325      	movs	r3, #37	; 0x25
 801fd8a:	e627      	b.n	801f9dc <__strftime+0x60c>
 801fd8c:	f1b8 0f00 	cmp.w	r8, #0
 801fd90:	d002      	beq.n	801fd98 <__strftime+0x9c8>
 801fd92:	2300      	movs	r3, #0
 801fd94:	f809 3004 	strb.w	r3, [r9, r4]
 801fd98:	4620      	mov	r0, r4
 801fd9a:	b011      	add	sp, #68	; 0x44
 801fd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fda0:	fffff894 	.word	0xfffff894
 801fda4:	0802759f 	.word	0x0802759f
 801fda8:	080275bc 	.word	0x080275bc
 801fdac:	2000016c 	.word	0x2000016c

0801fdb0 <strftime>:
 801fdb0:	b513      	push	{r0, r1, r4, lr}
 801fdb2:	4c03      	ldr	r4, [pc, #12]	; (801fdc0 <strftime+0x10>)
 801fdb4:	9400      	str	r4, [sp, #0]
 801fdb6:	f7ff fb0b 	bl	801f3d0 <__strftime>
 801fdba:	b002      	add	sp, #8
 801fdbc:	bd10      	pop	{r4, pc}
 801fdbe:	bf00      	nop
 801fdc0:	200001d0 	.word	0x200001d0

0801fdc4 <strstr>:
 801fdc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fdc6:	780c      	ldrb	r4, [r1, #0]
 801fdc8:	b164      	cbz	r4, 801fde4 <strstr+0x20>
 801fdca:	4603      	mov	r3, r0
 801fdcc:	781a      	ldrb	r2, [r3, #0]
 801fdce:	4618      	mov	r0, r3
 801fdd0:	1c5e      	adds	r6, r3, #1
 801fdd2:	b90a      	cbnz	r2, 801fdd8 <strstr+0x14>
 801fdd4:	4610      	mov	r0, r2
 801fdd6:	e005      	b.n	801fde4 <strstr+0x20>
 801fdd8:	4294      	cmp	r4, r2
 801fdda:	d108      	bne.n	801fdee <strstr+0x2a>
 801fddc:	460d      	mov	r5, r1
 801fdde:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801fde2:	b902      	cbnz	r2, 801fde6 <strstr+0x22>
 801fde4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fde6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801fdea:	4297      	cmp	r7, r2
 801fdec:	d0f7      	beq.n	801fdde <strstr+0x1a>
 801fdee:	4633      	mov	r3, r6
 801fdf0:	e7ec      	b.n	801fdcc <strstr+0x8>
	...

0801fdf4 <_strtoul_l.isra.0>:
 801fdf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fdf8:	4e3b      	ldr	r6, [pc, #236]	; (801fee8 <_strtoul_l.isra.0+0xf4>)
 801fdfa:	4686      	mov	lr, r0
 801fdfc:	468c      	mov	ip, r1
 801fdfe:	4660      	mov	r0, ip
 801fe00:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801fe04:	5da5      	ldrb	r5, [r4, r6]
 801fe06:	f015 0508 	ands.w	r5, r5, #8
 801fe0a:	d1f8      	bne.n	801fdfe <_strtoul_l.isra.0+0xa>
 801fe0c:	2c2d      	cmp	r4, #45	; 0x2d
 801fe0e:	d134      	bne.n	801fe7a <_strtoul_l.isra.0+0x86>
 801fe10:	f89c 4000 	ldrb.w	r4, [ip]
 801fe14:	f04f 0801 	mov.w	r8, #1
 801fe18:	f100 0c02 	add.w	ip, r0, #2
 801fe1c:	2b00      	cmp	r3, #0
 801fe1e:	d05e      	beq.n	801fede <_strtoul_l.isra.0+0xea>
 801fe20:	2b10      	cmp	r3, #16
 801fe22:	d10c      	bne.n	801fe3e <_strtoul_l.isra.0+0x4a>
 801fe24:	2c30      	cmp	r4, #48	; 0x30
 801fe26:	d10a      	bne.n	801fe3e <_strtoul_l.isra.0+0x4a>
 801fe28:	f89c 0000 	ldrb.w	r0, [ip]
 801fe2c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801fe30:	2858      	cmp	r0, #88	; 0x58
 801fe32:	d14f      	bne.n	801fed4 <_strtoul_l.isra.0+0xe0>
 801fe34:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801fe38:	2310      	movs	r3, #16
 801fe3a:	f10c 0c02 	add.w	ip, ip, #2
 801fe3e:	f04f 37ff 	mov.w	r7, #4294967295
 801fe42:	2500      	movs	r5, #0
 801fe44:	fbb7 f7f3 	udiv	r7, r7, r3
 801fe48:	fb03 f907 	mul.w	r9, r3, r7
 801fe4c:	ea6f 0909 	mvn.w	r9, r9
 801fe50:	4628      	mov	r0, r5
 801fe52:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801fe56:	2e09      	cmp	r6, #9
 801fe58:	d818      	bhi.n	801fe8c <_strtoul_l.isra.0+0x98>
 801fe5a:	4634      	mov	r4, r6
 801fe5c:	42a3      	cmp	r3, r4
 801fe5e:	dd24      	ble.n	801feaa <_strtoul_l.isra.0+0xb6>
 801fe60:	2d00      	cmp	r5, #0
 801fe62:	db1f      	blt.n	801fea4 <_strtoul_l.isra.0+0xb0>
 801fe64:	4287      	cmp	r7, r0
 801fe66:	d31d      	bcc.n	801fea4 <_strtoul_l.isra.0+0xb0>
 801fe68:	d101      	bne.n	801fe6e <_strtoul_l.isra.0+0x7a>
 801fe6a:	45a1      	cmp	r9, r4
 801fe6c:	db1a      	blt.n	801fea4 <_strtoul_l.isra.0+0xb0>
 801fe6e:	fb00 4003 	mla	r0, r0, r3, r4
 801fe72:	2501      	movs	r5, #1
 801fe74:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801fe78:	e7eb      	b.n	801fe52 <_strtoul_l.isra.0+0x5e>
 801fe7a:	2c2b      	cmp	r4, #43	; 0x2b
 801fe7c:	bf08      	it	eq
 801fe7e:	f89c 4000 	ldrbeq.w	r4, [ip]
 801fe82:	46a8      	mov	r8, r5
 801fe84:	bf08      	it	eq
 801fe86:	f100 0c02 	addeq.w	ip, r0, #2
 801fe8a:	e7c7      	b.n	801fe1c <_strtoul_l.isra.0+0x28>
 801fe8c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801fe90:	2e19      	cmp	r6, #25
 801fe92:	d801      	bhi.n	801fe98 <_strtoul_l.isra.0+0xa4>
 801fe94:	3c37      	subs	r4, #55	; 0x37
 801fe96:	e7e1      	b.n	801fe5c <_strtoul_l.isra.0+0x68>
 801fe98:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801fe9c:	2e19      	cmp	r6, #25
 801fe9e:	d804      	bhi.n	801feaa <_strtoul_l.isra.0+0xb6>
 801fea0:	3c57      	subs	r4, #87	; 0x57
 801fea2:	e7db      	b.n	801fe5c <_strtoul_l.isra.0+0x68>
 801fea4:	f04f 35ff 	mov.w	r5, #4294967295
 801fea8:	e7e4      	b.n	801fe74 <_strtoul_l.isra.0+0x80>
 801feaa:	2d00      	cmp	r5, #0
 801feac:	da07      	bge.n	801febe <_strtoul_l.isra.0+0xca>
 801feae:	2322      	movs	r3, #34	; 0x22
 801feb0:	f8ce 3000 	str.w	r3, [lr]
 801feb4:	f04f 30ff 	mov.w	r0, #4294967295
 801feb8:	b942      	cbnz	r2, 801fecc <_strtoul_l.isra.0+0xd8>
 801feba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801febe:	f1b8 0f00 	cmp.w	r8, #0
 801fec2:	d000      	beq.n	801fec6 <_strtoul_l.isra.0+0xd2>
 801fec4:	4240      	negs	r0, r0
 801fec6:	2a00      	cmp	r2, #0
 801fec8:	d0f7      	beq.n	801feba <_strtoul_l.isra.0+0xc6>
 801feca:	b10d      	cbz	r5, 801fed0 <_strtoul_l.isra.0+0xdc>
 801fecc:	f10c 31ff 	add.w	r1, ip, #4294967295
 801fed0:	6011      	str	r1, [r2, #0]
 801fed2:	e7f2      	b.n	801feba <_strtoul_l.isra.0+0xc6>
 801fed4:	2430      	movs	r4, #48	; 0x30
 801fed6:	2b00      	cmp	r3, #0
 801fed8:	d1b1      	bne.n	801fe3e <_strtoul_l.isra.0+0x4a>
 801feda:	2308      	movs	r3, #8
 801fedc:	e7af      	b.n	801fe3e <_strtoul_l.isra.0+0x4a>
 801fede:	2c30      	cmp	r4, #48	; 0x30
 801fee0:	d0a2      	beq.n	801fe28 <_strtoul_l.isra.0+0x34>
 801fee2:	230a      	movs	r3, #10
 801fee4:	e7ab      	b.n	801fe3e <_strtoul_l.isra.0+0x4a>
 801fee6:	bf00      	nop
 801fee8:	08027869 	.word	0x08027869

0801feec <_strtoul_r>:
 801feec:	f7ff bf82 	b.w	801fdf4 <_strtoul_l.isra.0>

0801fef0 <strtoul>:
 801fef0:	4613      	mov	r3, r2
 801fef2:	460a      	mov	r2, r1
 801fef4:	4601      	mov	r1, r0
 801fef6:	4802      	ldr	r0, [pc, #8]	; (801ff00 <strtoul+0x10>)
 801fef8:	6800      	ldr	r0, [r0, #0]
 801fefa:	f7ff bf7b 	b.w	801fdf4 <_strtoul_l.isra.0>
 801fefe:	bf00      	nop
 801ff00:	20000108 	.word	0x20000108

0801ff04 <__tzcalc_limits>:
 801ff04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff08:	4680      	mov	r8, r0
 801ff0a:	f000 fc6d 	bl	80207e8 <__gettzinfo>
 801ff0e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801ff12:	4598      	cmp	r8, r3
 801ff14:	f340 8098 	ble.w	8020048 <__tzcalc_limits+0x144>
 801ff18:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 801ff1c:	4443      	add	r3, r8
 801ff1e:	109b      	asrs	r3, r3, #2
 801ff20:	f240 126d 	movw	r2, #365	; 0x16d
 801ff24:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 801ff28:	fb02 3505 	mla	r5, r2, r5, r3
 801ff2c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 801ff30:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 801ff34:	fb93 f3f2 	sdiv	r3, r3, r2
 801ff38:	441d      	add	r5, r3
 801ff3a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801ff3e:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801ff42:	fb98 f7f3 	sdiv	r7, r8, r3
 801ff46:	fb03 8717 	mls	r7, r3, r7, r8
 801ff4a:	4442      	add	r2, r8
 801ff4c:	fab7 fc87 	clz	ip, r7
 801ff50:	fbb2 f2f3 	udiv	r2, r2, r3
 801ff54:	f008 0303 	and.w	r3, r8, #3
 801ff58:	4415      	add	r5, r2
 801ff5a:	2264      	movs	r2, #100	; 0x64
 801ff5c:	f8c0 8004 	str.w	r8, [r0, #4]
 801ff60:	fb98 f6f2 	sdiv	r6, r8, r2
 801ff64:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801ff68:	fb02 8616 	mls	r6, r2, r6, r8
 801ff6c:	4604      	mov	r4, r0
 801ff6e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801ff72:	9300      	str	r3, [sp, #0]
 801ff74:	f04f 0e07 	mov.w	lr, #7
 801ff78:	7a22      	ldrb	r2, [r4, #8]
 801ff7a:	6963      	ldr	r3, [r4, #20]
 801ff7c:	2a4a      	cmp	r2, #74	; 0x4a
 801ff7e:	d128      	bne.n	801ffd2 <__tzcalc_limits+0xce>
 801ff80:	9900      	ldr	r1, [sp, #0]
 801ff82:	18ea      	adds	r2, r5, r3
 801ff84:	b901      	cbnz	r1, 801ff88 <__tzcalc_limits+0x84>
 801ff86:	b906      	cbnz	r6, 801ff8a <__tzcalc_limits+0x86>
 801ff88:	bb0f      	cbnz	r7, 801ffce <__tzcalc_limits+0xca>
 801ff8a:	2b3b      	cmp	r3, #59	; 0x3b
 801ff8c:	bfd4      	ite	le
 801ff8e:	2300      	movle	r3, #0
 801ff90:	2301      	movgt	r3, #1
 801ff92:	4413      	add	r3, r2
 801ff94:	1e5a      	subs	r2, r3, #1
 801ff96:	69a3      	ldr	r3, [r4, #24]
 801ff98:	492c      	ldr	r1, [pc, #176]	; (802004c <__tzcalc_limits+0x148>)
 801ff9a:	fb01 3202 	mla	r2, r1, r2, r3
 801ff9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ffa0:	4413      	add	r3, r2
 801ffa2:	461a      	mov	r2, r3
 801ffa4:	17db      	asrs	r3, r3, #31
 801ffa6:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801ffaa:	3428      	adds	r4, #40	; 0x28
 801ffac:	45a3      	cmp	fp, r4
 801ffae:	d1e3      	bne.n	801ff78 <__tzcalc_limits+0x74>
 801ffb0:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 801ffb4:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 801ffb8:	4294      	cmp	r4, r2
 801ffba:	eb75 0303 	sbcs.w	r3, r5, r3
 801ffbe:	bfb4      	ite	lt
 801ffc0:	2301      	movlt	r3, #1
 801ffc2:	2300      	movge	r3, #0
 801ffc4:	6003      	str	r3, [r0, #0]
 801ffc6:	2001      	movs	r0, #1
 801ffc8:	b003      	add	sp, #12
 801ffca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ffce:	2300      	movs	r3, #0
 801ffd0:	e7df      	b.n	801ff92 <__tzcalc_limits+0x8e>
 801ffd2:	2a44      	cmp	r2, #68	; 0x44
 801ffd4:	d101      	bne.n	801ffda <__tzcalc_limits+0xd6>
 801ffd6:	18ea      	adds	r2, r5, r3
 801ffd8:	e7dd      	b.n	801ff96 <__tzcalc_limits+0x92>
 801ffda:	9a00      	ldr	r2, [sp, #0]
 801ffdc:	bb72      	cbnz	r2, 802003c <__tzcalc_limits+0x138>
 801ffde:	2e00      	cmp	r6, #0
 801ffe0:	bf0c      	ite	eq
 801ffe2:	46e0      	moveq	r8, ip
 801ffe4:	f04f 0801 	movne.w	r8, #1
 801ffe8:	4919      	ldr	r1, [pc, #100]	; (8020050 <__tzcalc_limits+0x14c>)
 801ffea:	68e2      	ldr	r2, [r4, #12]
 801ffec:	9201      	str	r2, [sp, #4]
 801ffee:	f04f 0a30 	mov.w	sl, #48	; 0x30
 801fff2:	fb0a 1808 	mla	r8, sl, r8, r1
 801fff6:	462a      	mov	r2, r5
 801fff8:	f04f 0900 	mov.w	r9, #0
 801fffc:	f1a8 0804 	sub.w	r8, r8, #4
 8020000:	9901      	ldr	r1, [sp, #4]
 8020002:	f109 0901 	add.w	r9, r9, #1
 8020006:	4549      	cmp	r1, r9
 8020008:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 802000c:	dc18      	bgt.n	8020040 <__tzcalc_limits+0x13c>
 802000e:	f102 0804 	add.w	r8, r2, #4
 8020012:	fb98 f9fe 	sdiv	r9, r8, lr
 8020016:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 802001a:	eba8 0909 	sub.w	r9, r8, r9
 802001e:	ebb3 0909 	subs.w	r9, r3, r9
 8020022:	6923      	ldr	r3, [r4, #16]
 8020024:	f103 33ff 	add.w	r3, r3, #4294967295
 8020028:	bf48      	it	mi
 802002a:	f109 0907 	addmi.w	r9, r9, #7
 802002e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8020032:	444b      	add	r3, r9
 8020034:	4553      	cmp	r3, sl
 8020036:	da05      	bge.n	8020044 <__tzcalc_limits+0x140>
 8020038:	441a      	add	r2, r3
 802003a:	e7ac      	b.n	801ff96 <__tzcalc_limits+0x92>
 802003c:	46e0      	mov	r8, ip
 802003e:	e7d3      	b.n	801ffe8 <__tzcalc_limits+0xe4>
 8020040:	4452      	add	r2, sl
 8020042:	e7dd      	b.n	8020000 <__tzcalc_limits+0xfc>
 8020044:	3b07      	subs	r3, #7
 8020046:	e7f5      	b.n	8020034 <__tzcalc_limits+0x130>
 8020048:	2000      	movs	r0, #0
 802004a:	e7bd      	b.n	801ffc8 <__tzcalc_limits+0xc4>
 802004c:	00015180 	.word	0x00015180
 8020050:	080274b0 	.word	0x080274b0

08020054 <__tz_lock>:
 8020054:	4801      	ldr	r0, [pc, #4]	; (802005c <__tz_lock+0x8>)
 8020056:	f7fe beb9 	b.w	801edcc <__retarget_lock_acquire>
 802005a:	bf00      	nop
 802005c:	20000e8b 	.word	0x20000e8b

08020060 <__tz_unlock>:
 8020060:	4801      	ldr	r0, [pc, #4]	; (8020068 <__tz_unlock+0x8>)
 8020062:	f7fe beb5 	b.w	801edd0 <__retarget_lock_release>
 8020066:	bf00      	nop
 8020068:	20000e8b 	.word	0x20000e8b

0802006c <_tzset_unlocked>:
 802006c:	4b01      	ldr	r3, [pc, #4]	; (8020074 <_tzset_unlocked+0x8>)
 802006e:	6818      	ldr	r0, [r3, #0]
 8020070:	f000 b802 	b.w	8020078 <_tzset_unlocked_r>
 8020074:	20000108 	.word	0x20000108

08020078 <_tzset_unlocked_r>:
 8020078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802007c:	b08d      	sub	sp, #52	; 0x34
 802007e:	4607      	mov	r7, r0
 8020080:	f000 fbb2 	bl	80207e8 <__gettzinfo>
 8020084:	49ae      	ldr	r1, [pc, #696]	; (8020340 <_tzset_unlocked_r+0x2c8>)
 8020086:	4eaf      	ldr	r6, [pc, #700]	; (8020344 <_tzset_unlocked_r+0x2cc>)
 8020088:	4605      	mov	r5, r0
 802008a:	4638      	mov	r0, r7
 802008c:	f000 fba4 	bl	80207d8 <_getenv_r>
 8020090:	4604      	mov	r4, r0
 8020092:	b970      	cbnz	r0, 80200b2 <_tzset_unlocked_r+0x3a>
 8020094:	4bac      	ldr	r3, [pc, #688]	; (8020348 <_tzset_unlocked_r+0x2d0>)
 8020096:	4aad      	ldr	r2, [pc, #692]	; (802034c <_tzset_unlocked_r+0x2d4>)
 8020098:	6018      	str	r0, [r3, #0]
 802009a:	4bad      	ldr	r3, [pc, #692]	; (8020350 <_tzset_unlocked_r+0x2d8>)
 802009c:	6018      	str	r0, [r3, #0]
 802009e:	4bad      	ldr	r3, [pc, #692]	; (8020354 <_tzset_unlocked_r+0x2dc>)
 80200a0:	6830      	ldr	r0, [r6, #0]
 80200a2:	e9c3 2200 	strd	r2, r2, [r3]
 80200a6:	f7fe ff01 	bl	801eeac <free>
 80200aa:	6034      	str	r4, [r6, #0]
 80200ac:	b00d      	add	sp, #52	; 0x34
 80200ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80200b2:	6831      	ldr	r1, [r6, #0]
 80200b4:	2900      	cmp	r1, #0
 80200b6:	d15f      	bne.n	8020178 <_tzset_unlocked_r+0x100>
 80200b8:	6830      	ldr	r0, [r6, #0]
 80200ba:	f7fe fef7 	bl	801eeac <free>
 80200be:	4620      	mov	r0, r4
 80200c0:	f7e0 f8bc 	bl	800023c <strlen>
 80200c4:	1c41      	adds	r1, r0, #1
 80200c6:	4638      	mov	r0, r7
 80200c8:	f7fe ff6e 	bl	801efa8 <_malloc_r>
 80200cc:	6030      	str	r0, [r6, #0]
 80200ce:	2800      	cmp	r0, #0
 80200d0:	d157      	bne.n	8020182 <_tzset_unlocked_r+0x10a>
 80200d2:	7823      	ldrb	r3, [r4, #0]
 80200d4:	4aa0      	ldr	r2, [pc, #640]	; (8020358 <_tzset_unlocked_r+0x2e0>)
 80200d6:	49a1      	ldr	r1, [pc, #644]	; (802035c <_tzset_unlocked_r+0x2e4>)
 80200d8:	2b3a      	cmp	r3, #58	; 0x3a
 80200da:	bf08      	it	eq
 80200dc:	3401      	addeq	r4, #1
 80200de:	ae0a      	add	r6, sp, #40	; 0x28
 80200e0:	4633      	mov	r3, r6
 80200e2:	4620      	mov	r0, r4
 80200e4:	f001 f976 	bl	80213d4 <siscanf>
 80200e8:	2800      	cmp	r0, #0
 80200ea:	dddf      	ble.n	80200ac <_tzset_unlocked_r+0x34>
 80200ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80200ee:	18e7      	adds	r7, r4, r3
 80200f0:	5ce3      	ldrb	r3, [r4, r3]
 80200f2:	2b2d      	cmp	r3, #45	; 0x2d
 80200f4:	d149      	bne.n	802018a <_tzset_unlocked_r+0x112>
 80200f6:	3701      	adds	r7, #1
 80200f8:	f04f 34ff 	mov.w	r4, #4294967295
 80200fc:	f10d 0a20 	add.w	sl, sp, #32
 8020100:	f10d 0b1e 	add.w	fp, sp, #30
 8020104:	f04f 0800 	mov.w	r8, #0
 8020108:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 802010c:	4994      	ldr	r1, [pc, #592]	; (8020360 <_tzset_unlocked_r+0x2e8>)
 802010e:	9603      	str	r6, [sp, #12]
 8020110:	f8cd b000 	str.w	fp, [sp]
 8020114:	4633      	mov	r3, r6
 8020116:	aa07      	add	r2, sp, #28
 8020118:	4638      	mov	r0, r7
 802011a:	f8ad 801e 	strh.w	r8, [sp, #30]
 802011e:	f8ad 8020 	strh.w	r8, [sp, #32]
 8020122:	f001 f957 	bl	80213d4 <siscanf>
 8020126:	4540      	cmp	r0, r8
 8020128:	ddc0      	ble.n	80200ac <_tzset_unlocked_r+0x34>
 802012a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 802012e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8020132:	f8df 9238 	ldr.w	r9, [pc, #568]	; 802036c <_tzset_unlocked_r+0x2f4>
 8020136:	213c      	movs	r1, #60	; 0x3c
 8020138:	fb01 2203 	mla	r2, r1, r3, r2
 802013c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8020140:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8020144:	fb01 2303 	mla	r3, r1, r3, r2
 8020148:	435c      	muls	r4, r3
 802014a:	62ac      	str	r4, [r5, #40]	; 0x28
 802014c:	4c81      	ldr	r4, [pc, #516]	; (8020354 <_tzset_unlocked_r+0x2dc>)
 802014e:	4b82      	ldr	r3, [pc, #520]	; (8020358 <_tzset_unlocked_r+0x2e0>)
 8020150:	6023      	str	r3, [r4, #0]
 8020152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020154:	4981      	ldr	r1, [pc, #516]	; (802035c <_tzset_unlocked_r+0x2e4>)
 8020156:	441f      	add	r7, r3
 8020158:	464a      	mov	r2, r9
 802015a:	4633      	mov	r3, r6
 802015c:	4638      	mov	r0, r7
 802015e:	f001 f939 	bl	80213d4 <siscanf>
 8020162:	4540      	cmp	r0, r8
 8020164:	dc16      	bgt.n	8020194 <_tzset_unlocked_r+0x11c>
 8020166:	6823      	ldr	r3, [r4, #0]
 8020168:	6063      	str	r3, [r4, #4]
 802016a:	4b77      	ldr	r3, [pc, #476]	; (8020348 <_tzset_unlocked_r+0x2d0>)
 802016c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 802016e:	601a      	str	r2, [r3, #0]
 8020170:	4b77      	ldr	r3, [pc, #476]	; (8020350 <_tzset_unlocked_r+0x2d8>)
 8020172:	f8c3 8000 	str.w	r8, [r3]
 8020176:	e799      	b.n	80200ac <_tzset_unlocked_r+0x34>
 8020178:	f7e0 f868 	bl	800024c <strcmp>
 802017c:	2800      	cmp	r0, #0
 802017e:	d19b      	bne.n	80200b8 <_tzset_unlocked_r+0x40>
 8020180:	e794      	b.n	80200ac <_tzset_unlocked_r+0x34>
 8020182:	4621      	mov	r1, r4
 8020184:	f001 f952 	bl	802142c <strcpy>
 8020188:	e7a3      	b.n	80200d2 <_tzset_unlocked_r+0x5a>
 802018a:	2b2b      	cmp	r3, #43	; 0x2b
 802018c:	bf08      	it	eq
 802018e:	3701      	addeq	r7, #1
 8020190:	2401      	movs	r4, #1
 8020192:	e7b3      	b.n	80200fc <_tzset_unlocked_r+0x84>
 8020194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020196:	f8c4 9004 	str.w	r9, [r4, #4]
 802019a:	18fc      	adds	r4, r7, r3
 802019c:	5cfb      	ldrb	r3, [r7, r3]
 802019e:	2b2d      	cmp	r3, #45	; 0x2d
 80201a0:	f040 808b 	bne.w	80202ba <_tzset_unlocked_r+0x242>
 80201a4:	3401      	adds	r4, #1
 80201a6:	f04f 37ff 	mov.w	r7, #4294967295
 80201aa:	2300      	movs	r3, #0
 80201ac:	f8ad 301c 	strh.w	r3, [sp, #28]
 80201b0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80201b4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80201b8:	930a      	str	r3, [sp, #40]	; 0x28
 80201ba:	e9cd a602 	strd	sl, r6, [sp, #8]
 80201be:	e9cd b600 	strd	fp, r6, [sp]
 80201c2:	4967      	ldr	r1, [pc, #412]	; (8020360 <_tzset_unlocked_r+0x2e8>)
 80201c4:	4633      	mov	r3, r6
 80201c6:	aa07      	add	r2, sp, #28
 80201c8:	4620      	mov	r0, r4
 80201ca:	f001 f903 	bl	80213d4 <siscanf>
 80201ce:	2800      	cmp	r0, #0
 80201d0:	dc78      	bgt.n	80202c4 <_tzset_unlocked_r+0x24c>
 80201d2:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 80201d4:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 80201d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80201da:	652f      	str	r7, [r5, #80]	; 0x50
 80201dc:	441c      	add	r4, r3
 80201de:	462f      	mov	r7, r5
 80201e0:	f04f 0900 	mov.w	r9, #0
 80201e4:	7823      	ldrb	r3, [r4, #0]
 80201e6:	2b2c      	cmp	r3, #44	; 0x2c
 80201e8:	bf08      	it	eq
 80201ea:	3401      	addeq	r4, #1
 80201ec:	f894 8000 	ldrb.w	r8, [r4]
 80201f0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80201f4:	d178      	bne.n	80202e8 <_tzset_unlocked_r+0x270>
 80201f6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80201fa:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80201fe:	ab09      	add	r3, sp, #36	; 0x24
 8020200:	9300      	str	r3, [sp, #0]
 8020202:	4958      	ldr	r1, [pc, #352]	; (8020364 <_tzset_unlocked_r+0x2ec>)
 8020204:	9603      	str	r6, [sp, #12]
 8020206:	4633      	mov	r3, r6
 8020208:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 802020c:	4620      	mov	r0, r4
 802020e:	f001 f8e1 	bl	80213d4 <siscanf>
 8020212:	2803      	cmp	r0, #3
 8020214:	f47f af4a 	bne.w	80200ac <_tzset_unlocked_r+0x34>
 8020218:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 802021c:	1e4b      	subs	r3, r1, #1
 802021e:	2b0b      	cmp	r3, #11
 8020220:	f63f af44 	bhi.w	80200ac <_tzset_unlocked_r+0x34>
 8020224:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8020228:	1e53      	subs	r3, r2, #1
 802022a:	2b04      	cmp	r3, #4
 802022c:	f63f af3e 	bhi.w	80200ac <_tzset_unlocked_r+0x34>
 8020230:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8020234:	2b06      	cmp	r3, #6
 8020236:	f63f af39 	bhi.w	80200ac <_tzset_unlocked_r+0x34>
 802023a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 802023e:	f887 8008 	strb.w	r8, [r7, #8]
 8020242:	617b      	str	r3, [r7, #20]
 8020244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020246:	eb04 0803 	add.w	r8, r4, r3
 802024a:	2302      	movs	r3, #2
 802024c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8020250:	2300      	movs	r3, #0
 8020252:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020256:	f8ad 3020 	strh.w	r3, [sp, #32]
 802025a:	930a      	str	r3, [sp, #40]	; 0x28
 802025c:	f898 3000 	ldrb.w	r3, [r8]
 8020260:	2b2f      	cmp	r3, #47	; 0x2f
 8020262:	d109      	bne.n	8020278 <_tzset_unlocked_r+0x200>
 8020264:	e9cd a602 	strd	sl, r6, [sp, #8]
 8020268:	e9cd b600 	strd	fp, r6, [sp]
 802026c:	493e      	ldr	r1, [pc, #248]	; (8020368 <_tzset_unlocked_r+0x2f0>)
 802026e:	4633      	mov	r3, r6
 8020270:	aa07      	add	r2, sp, #28
 8020272:	4640      	mov	r0, r8
 8020274:	f001 f8ae 	bl	80213d4 <siscanf>
 8020278:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 802027c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8020280:	213c      	movs	r1, #60	; 0x3c
 8020282:	fb01 2203 	mla	r2, r1, r3, r2
 8020286:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 802028a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802028e:	fb01 2303 	mla	r3, r1, r3, r2
 8020292:	61bb      	str	r3, [r7, #24]
 8020294:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020296:	3728      	adds	r7, #40	; 0x28
 8020298:	4444      	add	r4, r8
 802029a:	f1b9 0f00 	cmp.w	r9, #0
 802029e:	d020      	beq.n	80202e2 <_tzset_unlocked_r+0x26a>
 80202a0:	6868      	ldr	r0, [r5, #4]
 80202a2:	f7ff fe2f 	bl	801ff04 <__tzcalc_limits>
 80202a6:	4b28      	ldr	r3, [pc, #160]	; (8020348 <_tzset_unlocked_r+0x2d0>)
 80202a8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80202aa:	601a      	str	r2, [r3, #0]
 80202ac:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80202ae:	1a9b      	subs	r3, r3, r2
 80202b0:	4a27      	ldr	r2, [pc, #156]	; (8020350 <_tzset_unlocked_r+0x2d8>)
 80202b2:	bf18      	it	ne
 80202b4:	2301      	movne	r3, #1
 80202b6:	6013      	str	r3, [r2, #0]
 80202b8:	e6f8      	b.n	80200ac <_tzset_unlocked_r+0x34>
 80202ba:	2b2b      	cmp	r3, #43	; 0x2b
 80202bc:	bf08      	it	eq
 80202be:	3401      	addeq	r4, #1
 80202c0:	2701      	movs	r7, #1
 80202c2:	e772      	b.n	80201aa <_tzset_unlocked_r+0x132>
 80202c4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80202c8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80202cc:	213c      	movs	r1, #60	; 0x3c
 80202ce:	fb01 2203 	mla	r2, r1, r3, r2
 80202d2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80202d6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80202da:	fb01 2303 	mla	r3, r1, r3, r2
 80202de:	435f      	muls	r7, r3
 80202e0:	e77a      	b.n	80201d8 <_tzset_unlocked_r+0x160>
 80202e2:	f04f 0901 	mov.w	r9, #1
 80202e6:	e77d      	b.n	80201e4 <_tzset_unlocked_r+0x16c>
 80202e8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80202ec:	bf06      	itte	eq
 80202ee:	3401      	addeq	r4, #1
 80202f0:	4643      	moveq	r3, r8
 80202f2:	2344      	movne	r3, #68	; 0x44
 80202f4:	220a      	movs	r2, #10
 80202f6:	a90b      	add	r1, sp, #44	; 0x2c
 80202f8:	4620      	mov	r0, r4
 80202fa:	9305      	str	r3, [sp, #20]
 80202fc:	f7ff fdf8 	bl	801fef0 <strtoul>
 8020300:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8020304:	9b05      	ldr	r3, [sp, #20]
 8020306:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 802030a:	45a0      	cmp	r8, r4
 802030c:	d114      	bne.n	8020338 <_tzset_unlocked_r+0x2c0>
 802030e:	234d      	movs	r3, #77	; 0x4d
 8020310:	f1b9 0f00 	cmp.w	r9, #0
 8020314:	d107      	bne.n	8020326 <_tzset_unlocked_r+0x2ae>
 8020316:	722b      	strb	r3, [r5, #8]
 8020318:	2103      	movs	r1, #3
 802031a:	2302      	movs	r3, #2
 802031c:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8020320:	f8c5 9014 	str.w	r9, [r5, #20]
 8020324:	e791      	b.n	802024a <_tzset_unlocked_r+0x1d2>
 8020326:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 802032a:	220b      	movs	r2, #11
 802032c:	2301      	movs	r3, #1
 802032e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8020332:	2300      	movs	r3, #0
 8020334:	63eb      	str	r3, [r5, #60]	; 0x3c
 8020336:	e788      	b.n	802024a <_tzset_unlocked_r+0x1d2>
 8020338:	b280      	uxth	r0, r0
 802033a:	723b      	strb	r3, [r7, #8]
 802033c:	6178      	str	r0, [r7, #20]
 802033e:	e784      	b.n	802024a <_tzset_unlocked_r+0x1d2>
 8020340:	080277f0 	.word	0x080277f0
 8020344:	20000de4 	.word	0x20000de4
 8020348:	20000dec 	.word	0x20000dec
 802034c:	080277f3 	.word	0x080277f3
 8020350:	20000de8 	.word	0x20000de8
 8020354:	2000016c 	.word	0x2000016c
 8020358:	20000dd7 	.word	0x20000dd7
 802035c:	080277f7 	.word	0x080277f7
 8020360:	0802781a 	.word	0x0802781a
 8020364:	08027806 	.word	0x08027806
 8020368:	08027819 	.word	0x08027819
 802036c:	20000dcc 	.word	0x20000dcc

08020370 <_vsniprintf_r>:
 8020370:	b530      	push	{r4, r5, lr}
 8020372:	1e14      	subs	r4, r2, #0
 8020374:	4605      	mov	r5, r0
 8020376:	b09b      	sub	sp, #108	; 0x6c
 8020378:	4618      	mov	r0, r3
 802037a:	da05      	bge.n	8020388 <_vsniprintf_r+0x18>
 802037c:	238b      	movs	r3, #139	; 0x8b
 802037e:	602b      	str	r3, [r5, #0]
 8020380:	f04f 30ff 	mov.w	r0, #4294967295
 8020384:	b01b      	add	sp, #108	; 0x6c
 8020386:	bd30      	pop	{r4, r5, pc}
 8020388:	f44f 7302 	mov.w	r3, #520	; 0x208
 802038c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8020390:	bf14      	ite	ne
 8020392:	f104 33ff 	addne.w	r3, r4, #4294967295
 8020396:	4623      	moveq	r3, r4
 8020398:	9302      	str	r3, [sp, #8]
 802039a:	9305      	str	r3, [sp, #20]
 802039c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80203a0:	9100      	str	r1, [sp, #0]
 80203a2:	9104      	str	r1, [sp, #16]
 80203a4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80203a8:	4602      	mov	r2, r0
 80203aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80203ac:	4669      	mov	r1, sp
 80203ae:	4628      	mov	r0, r5
 80203b0:	f000 fb94 	bl	8020adc <_svfiprintf_r>
 80203b4:	1c43      	adds	r3, r0, #1
 80203b6:	bfbc      	itt	lt
 80203b8:	238b      	movlt	r3, #139	; 0x8b
 80203ba:	602b      	strlt	r3, [r5, #0]
 80203bc:	2c00      	cmp	r4, #0
 80203be:	d0e1      	beq.n	8020384 <_vsniprintf_r+0x14>
 80203c0:	9b00      	ldr	r3, [sp, #0]
 80203c2:	2200      	movs	r2, #0
 80203c4:	701a      	strb	r2, [r3, #0]
 80203c6:	e7dd      	b.n	8020384 <_vsniprintf_r+0x14>

080203c8 <vsniprintf>:
 80203c8:	b507      	push	{r0, r1, r2, lr}
 80203ca:	9300      	str	r3, [sp, #0]
 80203cc:	4613      	mov	r3, r2
 80203ce:	460a      	mov	r2, r1
 80203d0:	4601      	mov	r1, r0
 80203d2:	4803      	ldr	r0, [pc, #12]	; (80203e0 <vsniprintf+0x18>)
 80203d4:	6800      	ldr	r0, [r0, #0]
 80203d6:	f7ff ffcb 	bl	8020370 <_vsniprintf_r>
 80203da:	b003      	add	sp, #12
 80203dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80203e0:	20000108 	.word	0x20000108

080203e4 <__swbuf_r>:
 80203e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80203e6:	460e      	mov	r6, r1
 80203e8:	4614      	mov	r4, r2
 80203ea:	4605      	mov	r5, r0
 80203ec:	b118      	cbz	r0, 80203f6 <__swbuf_r+0x12>
 80203ee:	6983      	ldr	r3, [r0, #24]
 80203f0:	b90b      	cbnz	r3, 80203f6 <__swbuf_r+0x12>
 80203f2:	f7fe f939 	bl	801e668 <__sinit>
 80203f6:	4b21      	ldr	r3, [pc, #132]	; (802047c <__swbuf_r+0x98>)
 80203f8:	429c      	cmp	r4, r3
 80203fa:	d12b      	bne.n	8020454 <__swbuf_r+0x70>
 80203fc:	686c      	ldr	r4, [r5, #4]
 80203fe:	69a3      	ldr	r3, [r4, #24]
 8020400:	60a3      	str	r3, [r4, #8]
 8020402:	89a3      	ldrh	r3, [r4, #12]
 8020404:	071a      	lsls	r2, r3, #28
 8020406:	d52f      	bpl.n	8020468 <__swbuf_r+0x84>
 8020408:	6923      	ldr	r3, [r4, #16]
 802040a:	b36b      	cbz	r3, 8020468 <__swbuf_r+0x84>
 802040c:	6923      	ldr	r3, [r4, #16]
 802040e:	6820      	ldr	r0, [r4, #0]
 8020410:	1ac0      	subs	r0, r0, r3
 8020412:	6963      	ldr	r3, [r4, #20]
 8020414:	b2f6      	uxtb	r6, r6
 8020416:	4283      	cmp	r3, r0
 8020418:	4637      	mov	r7, r6
 802041a:	dc04      	bgt.n	8020426 <__swbuf_r+0x42>
 802041c:	4621      	mov	r1, r4
 802041e:	4628      	mov	r0, r5
 8020420:	f7fe f87c 	bl	801e51c <_fflush_r>
 8020424:	bb30      	cbnz	r0, 8020474 <__swbuf_r+0x90>
 8020426:	68a3      	ldr	r3, [r4, #8]
 8020428:	3b01      	subs	r3, #1
 802042a:	60a3      	str	r3, [r4, #8]
 802042c:	6823      	ldr	r3, [r4, #0]
 802042e:	1c5a      	adds	r2, r3, #1
 8020430:	6022      	str	r2, [r4, #0]
 8020432:	701e      	strb	r6, [r3, #0]
 8020434:	6963      	ldr	r3, [r4, #20]
 8020436:	3001      	adds	r0, #1
 8020438:	4283      	cmp	r3, r0
 802043a:	d004      	beq.n	8020446 <__swbuf_r+0x62>
 802043c:	89a3      	ldrh	r3, [r4, #12]
 802043e:	07db      	lsls	r3, r3, #31
 8020440:	d506      	bpl.n	8020450 <__swbuf_r+0x6c>
 8020442:	2e0a      	cmp	r6, #10
 8020444:	d104      	bne.n	8020450 <__swbuf_r+0x6c>
 8020446:	4621      	mov	r1, r4
 8020448:	4628      	mov	r0, r5
 802044a:	f7fe f867 	bl	801e51c <_fflush_r>
 802044e:	b988      	cbnz	r0, 8020474 <__swbuf_r+0x90>
 8020450:	4638      	mov	r0, r7
 8020452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020454:	4b0a      	ldr	r3, [pc, #40]	; (8020480 <__swbuf_r+0x9c>)
 8020456:	429c      	cmp	r4, r3
 8020458:	d101      	bne.n	802045e <__swbuf_r+0x7a>
 802045a:	68ac      	ldr	r4, [r5, #8]
 802045c:	e7cf      	b.n	80203fe <__swbuf_r+0x1a>
 802045e:	4b09      	ldr	r3, [pc, #36]	; (8020484 <__swbuf_r+0xa0>)
 8020460:	429c      	cmp	r4, r3
 8020462:	bf08      	it	eq
 8020464:	68ec      	ldreq	r4, [r5, #12]
 8020466:	e7ca      	b.n	80203fe <__swbuf_r+0x1a>
 8020468:	4621      	mov	r1, r4
 802046a:	4628      	mov	r0, r5
 802046c:	f000 f81e 	bl	80204ac <__swsetup_r>
 8020470:	2800      	cmp	r0, #0
 8020472:	d0cb      	beq.n	802040c <__swbuf_r+0x28>
 8020474:	f04f 37ff 	mov.w	r7, #4294967295
 8020478:	e7ea      	b.n	8020450 <__swbuf_r+0x6c>
 802047a:	bf00      	nop
 802047c:	080273f4 	.word	0x080273f4
 8020480:	08027414 	.word	0x08027414
 8020484:	080273d4 	.word	0x080273d4

08020488 <_write_r>:
 8020488:	b538      	push	{r3, r4, r5, lr}
 802048a:	4d07      	ldr	r5, [pc, #28]	; (80204a8 <_write_r+0x20>)
 802048c:	4604      	mov	r4, r0
 802048e:	4608      	mov	r0, r1
 8020490:	4611      	mov	r1, r2
 8020492:	2200      	movs	r2, #0
 8020494:	602a      	str	r2, [r5, #0]
 8020496:	461a      	mov	r2, r3
 8020498:	f7e0 fc9a 	bl	8000dd0 <_write>
 802049c:	1c43      	adds	r3, r0, #1
 802049e:	d102      	bne.n	80204a6 <_write_r+0x1e>
 80204a0:	682b      	ldr	r3, [r5, #0]
 80204a2:	b103      	cbz	r3, 80204a6 <_write_r+0x1e>
 80204a4:	6023      	str	r3, [r4, #0]
 80204a6:	bd38      	pop	{r3, r4, r5, pc}
 80204a8:	20000e90 	.word	0x20000e90

080204ac <__swsetup_r>:
 80204ac:	4b32      	ldr	r3, [pc, #200]	; (8020578 <__swsetup_r+0xcc>)
 80204ae:	b570      	push	{r4, r5, r6, lr}
 80204b0:	681d      	ldr	r5, [r3, #0]
 80204b2:	4606      	mov	r6, r0
 80204b4:	460c      	mov	r4, r1
 80204b6:	b125      	cbz	r5, 80204c2 <__swsetup_r+0x16>
 80204b8:	69ab      	ldr	r3, [r5, #24]
 80204ba:	b913      	cbnz	r3, 80204c2 <__swsetup_r+0x16>
 80204bc:	4628      	mov	r0, r5
 80204be:	f7fe f8d3 	bl	801e668 <__sinit>
 80204c2:	4b2e      	ldr	r3, [pc, #184]	; (802057c <__swsetup_r+0xd0>)
 80204c4:	429c      	cmp	r4, r3
 80204c6:	d10f      	bne.n	80204e8 <__swsetup_r+0x3c>
 80204c8:	686c      	ldr	r4, [r5, #4]
 80204ca:	89a3      	ldrh	r3, [r4, #12]
 80204cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80204d0:	0719      	lsls	r1, r3, #28
 80204d2:	d42c      	bmi.n	802052e <__swsetup_r+0x82>
 80204d4:	06dd      	lsls	r5, r3, #27
 80204d6:	d411      	bmi.n	80204fc <__swsetup_r+0x50>
 80204d8:	2309      	movs	r3, #9
 80204da:	6033      	str	r3, [r6, #0]
 80204dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80204e0:	81a3      	strh	r3, [r4, #12]
 80204e2:	f04f 30ff 	mov.w	r0, #4294967295
 80204e6:	e03e      	b.n	8020566 <__swsetup_r+0xba>
 80204e8:	4b25      	ldr	r3, [pc, #148]	; (8020580 <__swsetup_r+0xd4>)
 80204ea:	429c      	cmp	r4, r3
 80204ec:	d101      	bne.n	80204f2 <__swsetup_r+0x46>
 80204ee:	68ac      	ldr	r4, [r5, #8]
 80204f0:	e7eb      	b.n	80204ca <__swsetup_r+0x1e>
 80204f2:	4b24      	ldr	r3, [pc, #144]	; (8020584 <__swsetup_r+0xd8>)
 80204f4:	429c      	cmp	r4, r3
 80204f6:	bf08      	it	eq
 80204f8:	68ec      	ldreq	r4, [r5, #12]
 80204fa:	e7e6      	b.n	80204ca <__swsetup_r+0x1e>
 80204fc:	0758      	lsls	r0, r3, #29
 80204fe:	d512      	bpl.n	8020526 <__swsetup_r+0x7a>
 8020500:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020502:	b141      	cbz	r1, 8020516 <__swsetup_r+0x6a>
 8020504:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020508:	4299      	cmp	r1, r3
 802050a:	d002      	beq.n	8020512 <__swsetup_r+0x66>
 802050c:	4630      	mov	r0, r6
 802050e:	f7fe fcfb 	bl	801ef08 <_free_r>
 8020512:	2300      	movs	r3, #0
 8020514:	6363      	str	r3, [r4, #52]	; 0x34
 8020516:	89a3      	ldrh	r3, [r4, #12]
 8020518:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802051c:	81a3      	strh	r3, [r4, #12]
 802051e:	2300      	movs	r3, #0
 8020520:	6063      	str	r3, [r4, #4]
 8020522:	6923      	ldr	r3, [r4, #16]
 8020524:	6023      	str	r3, [r4, #0]
 8020526:	89a3      	ldrh	r3, [r4, #12]
 8020528:	f043 0308 	orr.w	r3, r3, #8
 802052c:	81a3      	strh	r3, [r4, #12]
 802052e:	6923      	ldr	r3, [r4, #16]
 8020530:	b94b      	cbnz	r3, 8020546 <__swsetup_r+0x9a>
 8020532:	89a3      	ldrh	r3, [r4, #12]
 8020534:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8020538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802053c:	d003      	beq.n	8020546 <__swsetup_r+0x9a>
 802053e:	4621      	mov	r1, r4
 8020540:	4630      	mov	r0, r6
 8020542:	f7fe fc6b 	bl	801ee1c <__smakebuf_r>
 8020546:	89a0      	ldrh	r0, [r4, #12]
 8020548:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802054c:	f010 0301 	ands.w	r3, r0, #1
 8020550:	d00a      	beq.n	8020568 <__swsetup_r+0xbc>
 8020552:	2300      	movs	r3, #0
 8020554:	60a3      	str	r3, [r4, #8]
 8020556:	6963      	ldr	r3, [r4, #20]
 8020558:	425b      	negs	r3, r3
 802055a:	61a3      	str	r3, [r4, #24]
 802055c:	6923      	ldr	r3, [r4, #16]
 802055e:	b943      	cbnz	r3, 8020572 <__swsetup_r+0xc6>
 8020560:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8020564:	d1ba      	bne.n	80204dc <__swsetup_r+0x30>
 8020566:	bd70      	pop	{r4, r5, r6, pc}
 8020568:	0781      	lsls	r1, r0, #30
 802056a:	bf58      	it	pl
 802056c:	6963      	ldrpl	r3, [r4, #20]
 802056e:	60a3      	str	r3, [r4, #8]
 8020570:	e7f4      	b.n	802055c <__swsetup_r+0xb0>
 8020572:	2000      	movs	r0, #0
 8020574:	e7f7      	b.n	8020566 <__swsetup_r+0xba>
 8020576:	bf00      	nop
 8020578:	20000108 	.word	0x20000108
 802057c:	080273f4 	.word	0x080273f4
 8020580:	08027414 	.word	0x08027414
 8020584:	080273d4 	.word	0x080273d4

08020588 <__register_exitproc>:
 8020588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802058c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8020648 <__register_exitproc+0xc0>
 8020590:	4606      	mov	r6, r0
 8020592:	f8d8 0000 	ldr.w	r0, [r8]
 8020596:	461f      	mov	r7, r3
 8020598:	460d      	mov	r5, r1
 802059a:	4691      	mov	r9, r2
 802059c:	f7fe fc17 	bl	801edce <__retarget_lock_acquire_recursive>
 80205a0:	4b25      	ldr	r3, [pc, #148]	; (8020638 <__register_exitproc+0xb0>)
 80205a2:	681c      	ldr	r4, [r3, #0]
 80205a4:	b934      	cbnz	r4, 80205b4 <__register_exitproc+0x2c>
 80205a6:	4c25      	ldr	r4, [pc, #148]	; (802063c <__register_exitproc+0xb4>)
 80205a8:	601c      	str	r4, [r3, #0]
 80205aa:	4b25      	ldr	r3, [pc, #148]	; (8020640 <__register_exitproc+0xb8>)
 80205ac:	b113      	cbz	r3, 80205b4 <__register_exitproc+0x2c>
 80205ae:	681b      	ldr	r3, [r3, #0]
 80205b0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80205b4:	6863      	ldr	r3, [r4, #4]
 80205b6:	2b1f      	cmp	r3, #31
 80205b8:	dd07      	ble.n	80205ca <__register_exitproc+0x42>
 80205ba:	f8d8 0000 	ldr.w	r0, [r8]
 80205be:	f7fe fc08 	bl	801edd2 <__retarget_lock_release_recursive>
 80205c2:	f04f 30ff 	mov.w	r0, #4294967295
 80205c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80205ca:	b34e      	cbz	r6, 8020620 <__register_exitproc+0x98>
 80205cc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80205d0:	b988      	cbnz	r0, 80205f6 <__register_exitproc+0x6e>
 80205d2:	4b1c      	ldr	r3, [pc, #112]	; (8020644 <__register_exitproc+0xbc>)
 80205d4:	b923      	cbnz	r3, 80205e0 <__register_exitproc+0x58>
 80205d6:	f8d8 0000 	ldr.w	r0, [r8]
 80205da:	f7fe fbf9 	bl	801edd0 <__retarget_lock_release>
 80205de:	e7f0      	b.n	80205c2 <__register_exitproc+0x3a>
 80205e0:	f44f 7084 	mov.w	r0, #264	; 0x108
 80205e4:	f7fe fc5a 	bl	801ee9c <malloc>
 80205e8:	2800      	cmp	r0, #0
 80205ea:	d0f4      	beq.n	80205d6 <__register_exitproc+0x4e>
 80205ec:	2300      	movs	r3, #0
 80205ee:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80205f2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80205f6:	6863      	ldr	r3, [r4, #4]
 80205f8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80205fc:	2201      	movs	r2, #1
 80205fe:	409a      	lsls	r2, r3
 8020600:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8020604:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8020608:	4313      	orrs	r3, r2
 802060a:	2e02      	cmp	r6, #2
 802060c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8020610:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8020614:	bf02      	ittt	eq
 8020616:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802061a:	431a      	orreq	r2, r3
 802061c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8020620:	6863      	ldr	r3, [r4, #4]
 8020622:	f8d8 0000 	ldr.w	r0, [r8]
 8020626:	1c5a      	adds	r2, r3, #1
 8020628:	3302      	adds	r3, #2
 802062a:	6062      	str	r2, [r4, #4]
 802062c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8020630:	f7fe fbcf 	bl	801edd2 <__retarget_lock_release_recursive>
 8020634:	2000      	movs	r0, #0
 8020636:	e7c6      	b.n	80205c6 <__register_exitproc+0x3e>
 8020638:	20000e7c 	.word	0x20000e7c
 802063c:	20000df0 	.word	0x20000df0
 8020640:	00000000 	.word	0x00000000
 8020644:	0801ee9d 	.word	0x0801ee9d
 8020648:	20000174 	.word	0x20000174

0802064c <abs>:
 802064c:	2800      	cmp	r0, #0
 802064e:	bfb8      	it	lt
 8020650:	4240      	neglt	r0, r0
 8020652:	4770      	bx	lr

08020654 <__assert_func>:
 8020654:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020656:	4614      	mov	r4, r2
 8020658:	461a      	mov	r2, r3
 802065a:	4b09      	ldr	r3, [pc, #36]	; (8020680 <__assert_func+0x2c>)
 802065c:	681b      	ldr	r3, [r3, #0]
 802065e:	4605      	mov	r5, r0
 8020660:	68d8      	ldr	r0, [r3, #12]
 8020662:	b14c      	cbz	r4, 8020678 <__assert_func+0x24>
 8020664:	4b07      	ldr	r3, [pc, #28]	; (8020684 <__assert_func+0x30>)
 8020666:	9100      	str	r1, [sp, #0]
 8020668:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802066c:	4906      	ldr	r1, [pc, #24]	; (8020688 <__assert_func+0x34>)
 802066e:	462b      	mov	r3, r5
 8020670:	f000 f854 	bl	802071c <fiprintf>
 8020674:	f7fd fe3c 	bl	801e2f0 <abort>
 8020678:	4b04      	ldr	r3, [pc, #16]	; (802068c <__assert_func+0x38>)
 802067a:	461c      	mov	r4, r3
 802067c:	e7f3      	b.n	8020666 <__assert_func+0x12>
 802067e:	bf00      	nop
 8020680:	20000108 	.word	0x20000108
 8020684:	0802782c 	.word	0x0802782c
 8020688:	08027839 	.word	0x08027839
 802068c:	08027867 	.word	0x08027867

08020690 <_close_r>:
 8020690:	b538      	push	{r3, r4, r5, lr}
 8020692:	4d06      	ldr	r5, [pc, #24]	; (80206ac <_close_r+0x1c>)
 8020694:	2300      	movs	r3, #0
 8020696:	4604      	mov	r4, r0
 8020698:	4608      	mov	r0, r1
 802069a:	602b      	str	r3, [r5, #0]
 802069c:	f7e0 fbb4 	bl	8000e08 <_close>
 80206a0:	1c43      	adds	r3, r0, #1
 80206a2:	d102      	bne.n	80206aa <_close_r+0x1a>
 80206a4:	682b      	ldr	r3, [r5, #0]
 80206a6:	b103      	cbz	r3, 80206aa <_close_r+0x1a>
 80206a8:	6023      	str	r3, [r4, #0]
 80206aa:	bd38      	pop	{r3, r4, r5, pc}
 80206ac:	20000e90 	.word	0x20000e90

080206b0 <__sflags>:
 80206b0:	780b      	ldrb	r3, [r1, #0]
 80206b2:	2b72      	cmp	r3, #114	; 0x72
 80206b4:	b530      	push	{r4, r5, lr}
 80206b6:	d022      	beq.n	80206fe <__sflags+0x4e>
 80206b8:	2b77      	cmp	r3, #119	; 0x77
 80206ba:	d024      	beq.n	8020706 <__sflags+0x56>
 80206bc:	2b61      	cmp	r3, #97	; 0x61
 80206be:	d027      	beq.n	8020710 <__sflags+0x60>
 80206c0:	2316      	movs	r3, #22
 80206c2:	6003      	str	r3, [r0, #0]
 80206c4:	2000      	movs	r0, #0
 80206c6:	bd30      	pop	{r4, r5, pc}
 80206c8:	2d62      	cmp	r5, #98	; 0x62
 80206ca:	d012      	beq.n	80206f2 <__sflags+0x42>
 80206cc:	2d78      	cmp	r5, #120	; 0x78
 80206ce:	d013      	beq.n	80206f8 <__sflags+0x48>
 80206d0:	2d2b      	cmp	r5, #43	; 0x2b
 80206d2:	d107      	bne.n	80206e4 <__sflags+0x34>
 80206d4:	f020 001c 	bic.w	r0, r0, #28
 80206d8:	f023 0303 	bic.w	r3, r3, #3
 80206dc:	f040 0010 	orr.w	r0, r0, #16
 80206e0:	f043 0302 	orr.w	r3, r3, #2
 80206e4:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80206e8:	2d00      	cmp	r5, #0
 80206ea:	d1ed      	bne.n	80206c8 <__sflags+0x18>
 80206ec:	4323      	orrs	r3, r4
 80206ee:	6013      	str	r3, [r2, #0]
 80206f0:	e7e9      	b.n	80206c6 <__sflags+0x16>
 80206f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80206f6:	e7f5      	b.n	80206e4 <__sflags+0x34>
 80206f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80206fc:	e7f2      	b.n	80206e4 <__sflags+0x34>
 80206fe:	2400      	movs	r4, #0
 8020700:	4623      	mov	r3, r4
 8020702:	2004      	movs	r0, #4
 8020704:	e7ee      	b.n	80206e4 <__sflags+0x34>
 8020706:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 802070a:	2301      	movs	r3, #1
 802070c:	2008      	movs	r0, #8
 802070e:	e7e9      	b.n	80206e4 <__sflags+0x34>
 8020710:	f44f 7402 	mov.w	r4, #520	; 0x208
 8020714:	2301      	movs	r3, #1
 8020716:	f44f 7084 	mov.w	r0, #264	; 0x108
 802071a:	e7e3      	b.n	80206e4 <__sflags+0x34>

0802071c <fiprintf>:
 802071c:	b40e      	push	{r1, r2, r3}
 802071e:	b503      	push	{r0, r1, lr}
 8020720:	4601      	mov	r1, r0
 8020722:	ab03      	add	r3, sp, #12
 8020724:	4805      	ldr	r0, [pc, #20]	; (802073c <fiprintf+0x20>)
 8020726:	f853 2b04 	ldr.w	r2, [r3], #4
 802072a:	6800      	ldr	r0, [r0, #0]
 802072c:	9301      	str	r3, [sp, #4]
 802072e:	f000 faff 	bl	8020d30 <_vfiprintf_r>
 8020732:	b002      	add	sp, #8
 8020734:	f85d eb04 	ldr.w	lr, [sp], #4
 8020738:	b003      	add	sp, #12
 802073a:	4770      	bx	lr
 802073c:	20000108 	.word	0x20000108

08020740 <_fstat_r>:
 8020740:	b538      	push	{r3, r4, r5, lr}
 8020742:	4d07      	ldr	r5, [pc, #28]	; (8020760 <_fstat_r+0x20>)
 8020744:	2300      	movs	r3, #0
 8020746:	4604      	mov	r4, r0
 8020748:	4608      	mov	r0, r1
 802074a:	4611      	mov	r1, r2
 802074c:	602b      	str	r3, [r5, #0]
 802074e:	f7e0 fb67 	bl	8000e20 <_fstat>
 8020752:	1c43      	adds	r3, r0, #1
 8020754:	d102      	bne.n	802075c <_fstat_r+0x1c>
 8020756:	682b      	ldr	r3, [r5, #0]
 8020758:	b103      	cbz	r3, 802075c <_fstat_r+0x1c>
 802075a:	6023      	str	r3, [r4, #0]
 802075c:	bd38      	pop	{r3, r4, r5, pc}
 802075e:	bf00      	nop
 8020760:	20000e90 	.word	0x20000e90

08020764 <_findenv_r>:
 8020764:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020768:	4607      	mov	r7, r0
 802076a:	4689      	mov	r9, r1
 802076c:	4616      	mov	r6, r2
 802076e:	f000 fe85 	bl	802147c <__env_lock>
 8020772:	4b18      	ldr	r3, [pc, #96]	; (80207d4 <_findenv_r+0x70>)
 8020774:	681c      	ldr	r4, [r3, #0]
 8020776:	469a      	mov	sl, r3
 8020778:	b134      	cbz	r4, 8020788 <_findenv_r+0x24>
 802077a:	464b      	mov	r3, r9
 802077c:	4698      	mov	r8, r3
 802077e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8020782:	b139      	cbz	r1, 8020794 <_findenv_r+0x30>
 8020784:	293d      	cmp	r1, #61	; 0x3d
 8020786:	d1f9      	bne.n	802077c <_findenv_r+0x18>
 8020788:	4638      	mov	r0, r7
 802078a:	f000 fe7d 	bl	8021488 <__env_unlock>
 802078e:	2000      	movs	r0, #0
 8020790:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020794:	eba8 0809 	sub.w	r8, r8, r9
 8020798:	46a3      	mov	fp, r4
 802079a:	f854 0b04 	ldr.w	r0, [r4], #4
 802079e:	2800      	cmp	r0, #0
 80207a0:	d0f2      	beq.n	8020788 <_findenv_r+0x24>
 80207a2:	4642      	mov	r2, r8
 80207a4:	4649      	mov	r1, r9
 80207a6:	f000 fe49 	bl	802143c <strncmp>
 80207aa:	2800      	cmp	r0, #0
 80207ac:	d1f4      	bne.n	8020798 <_findenv_r+0x34>
 80207ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80207b2:	eb03 0508 	add.w	r5, r3, r8
 80207b6:	f813 3008 	ldrb.w	r3, [r3, r8]
 80207ba:	2b3d      	cmp	r3, #61	; 0x3d
 80207bc:	d1ec      	bne.n	8020798 <_findenv_r+0x34>
 80207be:	f8da 3000 	ldr.w	r3, [sl]
 80207c2:	ebab 0303 	sub.w	r3, fp, r3
 80207c6:	109b      	asrs	r3, r3, #2
 80207c8:	4638      	mov	r0, r7
 80207ca:	6033      	str	r3, [r6, #0]
 80207cc:	f000 fe5c 	bl	8021488 <__env_unlock>
 80207d0:	1c68      	adds	r0, r5, #1
 80207d2:	e7dd      	b.n	8020790 <_findenv_r+0x2c>
 80207d4:	20000000 	.word	0x20000000

080207d8 <_getenv_r>:
 80207d8:	b507      	push	{r0, r1, r2, lr}
 80207da:	aa01      	add	r2, sp, #4
 80207dc:	f7ff ffc2 	bl	8020764 <_findenv_r>
 80207e0:	b003      	add	sp, #12
 80207e2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080207e8 <__gettzinfo>:
 80207e8:	4800      	ldr	r0, [pc, #0]	; (80207ec <__gettzinfo+0x4>)
 80207ea:	4770      	bx	lr
 80207ec:	20000178 	.word	0x20000178

080207f0 <gmtime_r>:
 80207f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80207f4:	e9d0 6700 	ldrd	r6, r7, [r0]
 80207f8:	460c      	mov	r4, r1
 80207fa:	4a51      	ldr	r2, [pc, #324]	; (8020940 <gmtime_r+0x150>)
 80207fc:	2300      	movs	r3, #0
 80207fe:	4630      	mov	r0, r6
 8020800:	4639      	mov	r1, r7
 8020802:	f7df ffd7 	bl	80007b4 <__aeabi_ldivmod>
 8020806:	4639      	mov	r1, r7
 8020808:	4605      	mov	r5, r0
 802080a:	4a4d      	ldr	r2, [pc, #308]	; (8020940 <gmtime_r+0x150>)
 802080c:	4630      	mov	r0, r6
 802080e:	2300      	movs	r3, #0
 8020810:	f7df ffd0 	bl	80007b4 <__aeabi_ldivmod>
 8020814:	2a00      	cmp	r2, #0
 8020816:	bfbc      	itt	lt
 8020818:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 802081c:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8020820:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8020824:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8020828:	fbb2 f3f1 	udiv	r3, r2, r1
 802082c:	fb01 2213 	mls	r2, r1, r3, r2
 8020830:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8020834:	bfac      	ite	ge
 8020836:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 802083a:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 802083e:	60a3      	str	r3, [r4, #8]
 8020840:	fbb2 f3f1 	udiv	r3, r2, r1
 8020844:	fb01 2213 	mls	r2, r1, r3, r2
 8020848:	6063      	str	r3, [r4, #4]
 802084a:	6022      	str	r2, [r4, #0]
 802084c:	1cc3      	adds	r3, r0, #3
 802084e:	2207      	movs	r2, #7
 8020850:	fb93 f2f2 	sdiv	r2, r3, r2
 8020854:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8020858:	1a9b      	subs	r3, r3, r2
 802085a:	bf48      	it	mi
 802085c:	3307      	addmi	r3, #7
 802085e:	2800      	cmp	r0, #0
 8020860:	61a3      	str	r3, [r4, #24]
 8020862:	bfb8      	it	lt
 8020864:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8020868:	4936      	ldr	r1, [pc, #216]	; (8020944 <gmtime_r+0x154>)
 802086a:	bfae      	itee	ge
 802086c:	fb90 f1f1 	sdivge	r1, r0, r1
 8020870:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8020874:	fb93 f1f1 	sdivlt	r1, r3, r1
 8020878:	4b33      	ldr	r3, [pc, #204]	; (8020948 <gmtime_r+0x158>)
 802087a:	fb03 0001 	mla	r0, r3, r1, r0
 802087e:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8020882:	fbb0 f2f2 	udiv	r2, r0, r2
 8020886:	4402      	add	r2, r0
 8020888:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 802088c:	fbb0 f3fc 	udiv	r3, r0, ip
 8020890:	1ad2      	subs	r2, r2, r3
 8020892:	f240 176d 	movw	r7, #365	; 0x16d
 8020896:	4b2d      	ldr	r3, [pc, #180]	; (802094c <gmtime_r+0x15c>)
 8020898:	fbb0 f3f3 	udiv	r3, r0, r3
 802089c:	2664      	movs	r6, #100	; 0x64
 802089e:	1ad3      	subs	r3, r2, r3
 80208a0:	fbb3 f5f7 	udiv	r5, r3, r7
 80208a4:	fbb3 f3fc 	udiv	r3, r3, ip
 80208a8:	fbb5 f2f6 	udiv	r2, r5, r6
 80208ac:	1ad3      	subs	r3, r2, r3
 80208ae:	4403      	add	r3, r0
 80208b0:	fb07 3315 	mls	r3, r7, r5, r3
 80208b4:	2099      	movs	r0, #153	; 0x99
 80208b6:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80208ba:	f10c 0c02 	add.w	ip, ip, #2
 80208be:	f103 0e01 	add.w	lr, r3, #1
 80208c2:	fbbc f7f0 	udiv	r7, ip, r0
 80208c6:	4378      	muls	r0, r7
 80208c8:	3002      	adds	r0, #2
 80208ca:	f04f 0805 	mov.w	r8, #5
 80208ce:	fbb0 f0f8 	udiv	r0, r0, r8
 80208d2:	ebae 0000 	sub.w	r0, lr, r0
 80208d6:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80208da:	45f4      	cmp	ip, lr
 80208dc:	bf94      	ite	ls
 80208de:	f04f 0c02 	movls.w	ip, #2
 80208e2:	f06f 0c09 	mvnhi.w	ip, #9
 80208e6:	4467      	add	r7, ip
 80208e8:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80208ec:	fb0c 5101 	mla	r1, ip, r1, r5
 80208f0:	2f01      	cmp	r7, #1
 80208f2:	bf98      	it	ls
 80208f4:	3101      	addls	r1, #1
 80208f6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80208fa:	d30c      	bcc.n	8020916 <gmtime_r+0x126>
 80208fc:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8020900:	61e3      	str	r3, [r4, #28]
 8020902:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 8020906:	2300      	movs	r3, #0
 8020908:	60e0      	str	r0, [r4, #12]
 802090a:	e9c4 7104 	strd	r7, r1, [r4, #16]
 802090e:	6223      	str	r3, [r4, #32]
 8020910:	4620      	mov	r0, r4
 8020912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020916:	f015 0f03 	tst.w	r5, #3
 802091a:	d102      	bne.n	8020922 <gmtime_r+0x132>
 802091c:	fb06 5212 	mls	r2, r6, r2, r5
 8020920:	b95a      	cbnz	r2, 802093a <gmtime_r+0x14a>
 8020922:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8020926:	fbb5 f2f6 	udiv	r2, r5, r6
 802092a:	fb06 5212 	mls	r2, r6, r2, r5
 802092e:	fab2 f282 	clz	r2, r2
 8020932:	0952      	lsrs	r2, r2, #5
 8020934:	333b      	adds	r3, #59	; 0x3b
 8020936:	4413      	add	r3, r2
 8020938:	e7e2      	b.n	8020900 <gmtime_r+0x110>
 802093a:	2201      	movs	r2, #1
 802093c:	e7fa      	b.n	8020934 <gmtime_r+0x144>
 802093e:	bf00      	nop
 8020940:	00015180 	.word	0x00015180
 8020944:	00023ab1 	.word	0x00023ab1
 8020948:	fffdc54f 	.word	0xfffdc54f
 802094c:	00023ab0 	.word	0x00023ab0

08020950 <_isatty_r>:
 8020950:	b538      	push	{r3, r4, r5, lr}
 8020952:	4d06      	ldr	r5, [pc, #24]	; (802096c <_isatty_r+0x1c>)
 8020954:	2300      	movs	r3, #0
 8020956:	4604      	mov	r4, r0
 8020958:	4608      	mov	r0, r1
 802095a:	602b      	str	r3, [r5, #0]
 802095c:	f7e0 fa70 	bl	8000e40 <_isatty>
 8020960:	1c43      	adds	r3, r0, #1
 8020962:	d102      	bne.n	802096a <_isatty_r+0x1a>
 8020964:	682b      	ldr	r3, [r5, #0]
 8020966:	b103      	cbz	r3, 802096a <_isatty_r+0x1a>
 8020968:	6023      	str	r3, [r4, #0]
 802096a:	bd38      	pop	{r3, r4, r5, pc}
 802096c:	20000e90 	.word	0x20000e90

08020970 <labs>:
 8020970:	2800      	cmp	r0, #0
 8020972:	bfb8      	it	lt
 8020974:	4240      	neglt	r0, r0
 8020976:	4770      	bx	lr

08020978 <_lseek_r>:
 8020978:	b538      	push	{r3, r4, r5, lr}
 802097a:	4d07      	ldr	r5, [pc, #28]	; (8020998 <_lseek_r+0x20>)
 802097c:	4604      	mov	r4, r0
 802097e:	4608      	mov	r0, r1
 8020980:	4611      	mov	r1, r2
 8020982:	2200      	movs	r2, #0
 8020984:	602a      	str	r2, [r5, #0]
 8020986:	461a      	mov	r2, r3
 8020988:	f7e0 fa65 	bl	8000e56 <_lseek>
 802098c:	1c43      	adds	r3, r0, #1
 802098e:	d102      	bne.n	8020996 <_lseek_r+0x1e>
 8020990:	682b      	ldr	r3, [r5, #0]
 8020992:	b103      	cbz	r3, 8020996 <_lseek_r+0x1e>
 8020994:	6023      	str	r3, [r4, #0]
 8020996:	bd38      	pop	{r3, r4, r5, pc}
 8020998:	20000e90 	.word	0x20000e90

0802099c <__ascii_mbtowc>:
 802099c:	b082      	sub	sp, #8
 802099e:	b901      	cbnz	r1, 80209a2 <__ascii_mbtowc+0x6>
 80209a0:	a901      	add	r1, sp, #4
 80209a2:	b142      	cbz	r2, 80209b6 <__ascii_mbtowc+0x1a>
 80209a4:	b14b      	cbz	r3, 80209ba <__ascii_mbtowc+0x1e>
 80209a6:	7813      	ldrb	r3, [r2, #0]
 80209a8:	600b      	str	r3, [r1, #0]
 80209aa:	7812      	ldrb	r2, [r2, #0]
 80209ac:	1e10      	subs	r0, r2, #0
 80209ae:	bf18      	it	ne
 80209b0:	2001      	movne	r0, #1
 80209b2:	b002      	add	sp, #8
 80209b4:	4770      	bx	lr
 80209b6:	4610      	mov	r0, r2
 80209b8:	e7fb      	b.n	80209b2 <__ascii_mbtowc+0x16>
 80209ba:	f06f 0001 	mvn.w	r0, #1
 80209be:	e7f8      	b.n	80209b2 <__ascii_mbtowc+0x16>

080209c0 <__malloc_lock>:
 80209c0:	4801      	ldr	r0, [pc, #4]	; (80209c8 <__malloc_lock+0x8>)
 80209c2:	f7fe ba04 	b.w	801edce <__retarget_lock_acquire_recursive>
 80209c6:	bf00      	nop
 80209c8:	20000e88 	.word	0x20000e88

080209cc <__malloc_unlock>:
 80209cc:	4801      	ldr	r0, [pc, #4]	; (80209d4 <__malloc_unlock+0x8>)
 80209ce:	f7fe ba00 	b.w	801edd2 <__retarget_lock_release_recursive>
 80209d2:	bf00      	nop
 80209d4:	20000e88 	.word	0x20000e88

080209d8 <_realloc_r>:
 80209d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80209da:	4607      	mov	r7, r0
 80209dc:	4614      	mov	r4, r2
 80209de:	460e      	mov	r6, r1
 80209e0:	b921      	cbnz	r1, 80209ec <_realloc_r+0x14>
 80209e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80209e6:	4611      	mov	r1, r2
 80209e8:	f7fe bade 	b.w	801efa8 <_malloc_r>
 80209ec:	b922      	cbnz	r2, 80209f8 <_realloc_r+0x20>
 80209ee:	f7fe fa8b 	bl	801ef08 <_free_r>
 80209f2:	4625      	mov	r5, r4
 80209f4:	4628      	mov	r0, r5
 80209f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80209f8:	f000 fd66 	bl	80214c8 <_malloc_usable_size_r>
 80209fc:	42a0      	cmp	r0, r4
 80209fe:	d20f      	bcs.n	8020a20 <_realloc_r+0x48>
 8020a00:	4621      	mov	r1, r4
 8020a02:	4638      	mov	r0, r7
 8020a04:	f7fe fad0 	bl	801efa8 <_malloc_r>
 8020a08:	4605      	mov	r5, r0
 8020a0a:	2800      	cmp	r0, #0
 8020a0c:	d0f2      	beq.n	80209f4 <_realloc_r+0x1c>
 8020a0e:	4631      	mov	r1, r6
 8020a10:	4622      	mov	r2, r4
 8020a12:	f7fe fa53 	bl	801eebc <memcpy>
 8020a16:	4631      	mov	r1, r6
 8020a18:	4638      	mov	r0, r7
 8020a1a:	f7fe fa75 	bl	801ef08 <_free_r>
 8020a1e:	e7e9      	b.n	80209f4 <_realloc_r+0x1c>
 8020a20:	4635      	mov	r5, r6
 8020a22:	e7e7      	b.n	80209f4 <_realloc_r+0x1c>

08020a24 <__ssputs_r>:
 8020a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020a28:	688e      	ldr	r6, [r1, #8]
 8020a2a:	429e      	cmp	r6, r3
 8020a2c:	4682      	mov	sl, r0
 8020a2e:	460c      	mov	r4, r1
 8020a30:	4690      	mov	r8, r2
 8020a32:	461f      	mov	r7, r3
 8020a34:	d838      	bhi.n	8020aa8 <__ssputs_r+0x84>
 8020a36:	898a      	ldrh	r2, [r1, #12]
 8020a38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8020a3c:	d032      	beq.n	8020aa4 <__ssputs_r+0x80>
 8020a3e:	6825      	ldr	r5, [r4, #0]
 8020a40:	6909      	ldr	r1, [r1, #16]
 8020a42:	eba5 0901 	sub.w	r9, r5, r1
 8020a46:	6965      	ldr	r5, [r4, #20]
 8020a48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020a4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020a50:	3301      	adds	r3, #1
 8020a52:	444b      	add	r3, r9
 8020a54:	106d      	asrs	r5, r5, #1
 8020a56:	429d      	cmp	r5, r3
 8020a58:	bf38      	it	cc
 8020a5a:	461d      	movcc	r5, r3
 8020a5c:	0553      	lsls	r3, r2, #21
 8020a5e:	d531      	bpl.n	8020ac4 <__ssputs_r+0xa0>
 8020a60:	4629      	mov	r1, r5
 8020a62:	f7fe faa1 	bl	801efa8 <_malloc_r>
 8020a66:	4606      	mov	r6, r0
 8020a68:	b950      	cbnz	r0, 8020a80 <__ssputs_r+0x5c>
 8020a6a:	230c      	movs	r3, #12
 8020a6c:	f8ca 3000 	str.w	r3, [sl]
 8020a70:	89a3      	ldrh	r3, [r4, #12]
 8020a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020a76:	81a3      	strh	r3, [r4, #12]
 8020a78:	f04f 30ff 	mov.w	r0, #4294967295
 8020a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020a80:	6921      	ldr	r1, [r4, #16]
 8020a82:	464a      	mov	r2, r9
 8020a84:	f7fe fa1a 	bl	801eebc <memcpy>
 8020a88:	89a3      	ldrh	r3, [r4, #12]
 8020a8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8020a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020a92:	81a3      	strh	r3, [r4, #12]
 8020a94:	6126      	str	r6, [r4, #16]
 8020a96:	6165      	str	r5, [r4, #20]
 8020a98:	444e      	add	r6, r9
 8020a9a:	eba5 0509 	sub.w	r5, r5, r9
 8020a9e:	6026      	str	r6, [r4, #0]
 8020aa0:	60a5      	str	r5, [r4, #8]
 8020aa2:	463e      	mov	r6, r7
 8020aa4:	42be      	cmp	r6, r7
 8020aa6:	d900      	bls.n	8020aaa <__ssputs_r+0x86>
 8020aa8:	463e      	mov	r6, r7
 8020aaa:	4632      	mov	r2, r6
 8020aac:	6820      	ldr	r0, [r4, #0]
 8020aae:	4641      	mov	r1, r8
 8020ab0:	f000 fcf0 	bl	8021494 <memmove>
 8020ab4:	68a3      	ldr	r3, [r4, #8]
 8020ab6:	6822      	ldr	r2, [r4, #0]
 8020ab8:	1b9b      	subs	r3, r3, r6
 8020aba:	4432      	add	r2, r6
 8020abc:	60a3      	str	r3, [r4, #8]
 8020abe:	6022      	str	r2, [r4, #0]
 8020ac0:	2000      	movs	r0, #0
 8020ac2:	e7db      	b.n	8020a7c <__ssputs_r+0x58>
 8020ac4:	462a      	mov	r2, r5
 8020ac6:	f7ff ff87 	bl	80209d8 <_realloc_r>
 8020aca:	4606      	mov	r6, r0
 8020acc:	2800      	cmp	r0, #0
 8020ace:	d1e1      	bne.n	8020a94 <__ssputs_r+0x70>
 8020ad0:	6921      	ldr	r1, [r4, #16]
 8020ad2:	4650      	mov	r0, sl
 8020ad4:	f7fe fa18 	bl	801ef08 <_free_r>
 8020ad8:	e7c7      	b.n	8020a6a <__ssputs_r+0x46>
	...

08020adc <_svfiprintf_r>:
 8020adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ae0:	4698      	mov	r8, r3
 8020ae2:	898b      	ldrh	r3, [r1, #12]
 8020ae4:	061b      	lsls	r3, r3, #24
 8020ae6:	b09d      	sub	sp, #116	; 0x74
 8020ae8:	4607      	mov	r7, r0
 8020aea:	460d      	mov	r5, r1
 8020aec:	4614      	mov	r4, r2
 8020aee:	d50e      	bpl.n	8020b0e <_svfiprintf_r+0x32>
 8020af0:	690b      	ldr	r3, [r1, #16]
 8020af2:	b963      	cbnz	r3, 8020b0e <_svfiprintf_r+0x32>
 8020af4:	2140      	movs	r1, #64	; 0x40
 8020af6:	f7fe fa57 	bl	801efa8 <_malloc_r>
 8020afa:	6028      	str	r0, [r5, #0]
 8020afc:	6128      	str	r0, [r5, #16]
 8020afe:	b920      	cbnz	r0, 8020b0a <_svfiprintf_r+0x2e>
 8020b00:	230c      	movs	r3, #12
 8020b02:	603b      	str	r3, [r7, #0]
 8020b04:	f04f 30ff 	mov.w	r0, #4294967295
 8020b08:	e0d1      	b.n	8020cae <_svfiprintf_r+0x1d2>
 8020b0a:	2340      	movs	r3, #64	; 0x40
 8020b0c:	616b      	str	r3, [r5, #20]
 8020b0e:	2300      	movs	r3, #0
 8020b10:	9309      	str	r3, [sp, #36]	; 0x24
 8020b12:	2320      	movs	r3, #32
 8020b14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020b18:	f8cd 800c 	str.w	r8, [sp, #12]
 8020b1c:	2330      	movs	r3, #48	; 0x30
 8020b1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8020cc8 <_svfiprintf_r+0x1ec>
 8020b22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020b26:	f04f 0901 	mov.w	r9, #1
 8020b2a:	4623      	mov	r3, r4
 8020b2c:	469a      	mov	sl, r3
 8020b2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020b32:	b10a      	cbz	r2, 8020b38 <_svfiprintf_r+0x5c>
 8020b34:	2a25      	cmp	r2, #37	; 0x25
 8020b36:	d1f9      	bne.n	8020b2c <_svfiprintf_r+0x50>
 8020b38:	ebba 0b04 	subs.w	fp, sl, r4
 8020b3c:	d00b      	beq.n	8020b56 <_svfiprintf_r+0x7a>
 8020b3e:	465b      	mov	r3, fp
 8020b40:	4622      	mov	r2, r4
 8020b42:	4629      	mov	r1, r5
 8020b44:	4638      	mov	r0, r7
 8020b46:	f7ff ff6d 	bl	8020a24 <__ssputs_r>
 8020b4a:	3001      	adds	r0, #1
 8020b4c:	f000 80aa 	beq.w	8020ca4 <_svfiprintf_r+0x1c8>
 8020b50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020b52:	445a      	add	r2, fp
 8020b54:	9209      	str	r2, [sp, #36]	; 0x24
 8020b56:	f89a 3000 	ldrb.w	r3, [sl]
 8020b5a:	2b00      	cmp	r3, #0
 8020b5c:	f000 80a2 	beq.w	8020ca4 <_svfiprintf_r+0x1c8>
 8020b60:	2300      	movs	r3, #0
 8020b62:	f04f 32ff 	mov.w	r2, #4294967295
 8020b66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020b6a:	f10a 0a01 	add.w	sl, sl, #1
 8020b6e:	9304      	str	r3, [sp, #16]
 8020b70:	9307      	str	r3, [sp, #28]
 8020b72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020b76:	931a      	str	r3, [sp, #104]	; 0x68
 8020b78:	4654      	mov	r4, sl
 8020b7a:	2205      	movs	r2, #5
 8020b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020b80:	4851      	ldr	r0, [pc, #324]	; (8020cc8 <_svfiprintf_r+0x1ec>)
 8020b82:	f7df fb6d 	bl	8000260 <memchr>
 8020b86:	9a04      	ldr	r2, [sp, #16]
 8020b88:	b9d8      	cbnz	r0, 8020bc2 <_svfiprintf_r+0xe6>
 8020b8a:	06d0      	lsls	r0, r2, #27
 8020b8c:	bf44      	itt	mi
 8020b8e:	2320      	movmi	r3, #32
 8020b90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020b94:	0711      	lsls	r1, r2, #28
 8020b96:	bf44      	itt	mi
 8020b98:	232b      	movmi	r3, #43	; 0x2b
 8020b9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8020ba2:	2b2a      	cmp	r3, #42	; 0x2a
 8020ba4:	d015      	beq.n	8020bd2 <_svfiprintf_r+0xf6>
 8020ba6:	9a07      	ldr	r2, [sp, #28]
 8020ba8:	4654      	mov	r4, sl
 8020baa:	2000      	movs	r0, #0
 8020bac:	f04f 0c0a 	mov.w	ip, #10
 8020bb0:	4621      	mov	r1, r4
 8020bb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020bb6:	3b30      	subs	r3, #48	; 0x30
 8020bb8:	2b09      	cmp	r3, #9
 8020bba:	d94e      	bls.n	8020c5a <_svfiprintf_r+0x17e>
 8020bbc:	b1b0      	cbz	r0, 8020bec <_svfiprintf_r+0x110>
 8020bbe:	9207      	str	r2, [sp, #28]
 8020bc0:	e014      	b.n	8020bec <_svfiprintf_r+0x110>
 8020bc2:	eba0 0308 	sub.w	r3, r0, r8
 8020bc6:	fa09 f303 	lsl.w	r3, r9, r3
 8020bca:	4313      	orrs	r3, r2
 8020bcc:	9304      	str	r3, [sp, #16]
 8020bce:	46a2      	mov	sl, r4
 8020bd0:	e7d2      	b.n	8020b78 <_svfiprintf_r+0x9c>
 8020bd2:	9b03      	ldr	r3, [sp, #12]
 8020bd4:	1d19      	adds	r1, r3, #4
 8020bd6:	681b      	ldr	r3, [r3, #0]
 8020bd8:	9103      	str	r1, [sp, #12]
 8020bda:	2b00      	cmp	r3, #0
 8020bdc:	bfbb      	ittet	lt
 8020bde:	425b      	neglt	r3, r3
 8020be0:	f042 0202 	orrlt.w	r2, r2, #2
 8020be4:	9307      	strge	r3, [sp, #28]
 8020be6:	9307      	strlt	r3, [sp, #28]
 8020be8:	bfb8      	it	lt
 8020bea:	9204      	strlt	r2, [sp, #16]
 8020bec:	7823      	ldrb	r3, [r4, #0]
 8020bee:	2b2e      	cmp	r3, #46	; 0x2e
 8020bf0:	d10c      	bne.n	8020c0c <_svfiprintf_r+0x130>
 8020bf2:	7863      	ldrb	r3, [r4, #1]
 8020bf4:	2b2a      	cmp	r3, #42	; 0x2a
 8020bf6:	d135      	bne.n	8020c64 <_svfiprintf_r+0x188>
 8020bf8:	9b03      	ldr	r3, [sp, #12]
 8020bfa:	1d1a      	adds	r2, r3, #4
 8020bfc:	681b      	ldr	r3, [r3, #0]
 8020bfe:	9203      	str	r2, [sp, #12]
 8020c00:	2b00      	cmp	r3, #0
 8020c02:	bfb8      	it	lt
 8020c04:	f04f 33ff 	movlt.w	r3, #4294967295
 8020c08:	3402      	adds	r4, #2
 8020c0a:	9305      	str	r3, [sp, #20]
 8020c0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8020cd8 <_svfiprintf_r+0x1fc>
 8020c10:	7821      	ldrb	r1, [r4, #0]
 8020c12:	2203      	movs	r2, #3
 8020c14:	4650      	mov	r0, sl
 8020c16:	f7df fb23 	bl	8000260 <memchr>
 8020c1a:	b140      	cbz	r0, 8020c2e <_svfiprintf_r+0x152>
 8020c1c:	2340      	movs	r3, #64	; 0x40
 8020c1e:	eba0 000a 	sub.w	r0, r0, sl
 8020c22:	fa03 f000 	lsl.w	r0, r3, r0
 8020c26:	9b04      	ldr	r3, [sp, #16]
 8020c28:	4303      	orrs	r3, r0
 8020c2a:	3401      	adds	r4, #1
 8020c2c:	9304      	str	r3, [sp, #16]
 8020c2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020c32:	4826      	ldr	r0, [pc, #152]	; (8020ccc <_svfiprintf_r+0x1f0>)
 8020c34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020c38:	2206      	movs	r2, #6
 8020c3a:	f7df fb11 	bl	8000260 <memchr>
 8020c3e:	2800      	cmp	r0, #0
 8020c40:	d038      	beq.n	8020cb4 <_svfiprintf_r+0x1d8>
 8020c42:	4b23      	ldr	r3, [pc, #140]	; (8020cd0 <_svfiprintf_r+0x1f4>)
 8020c44:	bb1b      	cbnz	r3, 8020c8e <_svfiprintf_r+0x1b2>
 8020c46:	9b03      	ldr	r3, [sp, #12]
 8020c48:	3307      	adds	r3, #7
 8020c4a:	f023 0307 	bic.w	r3, r3, #7
 8020c4e:	3308      	adds	r3, #8
 8020c50:	9303      	str	r3, [sp, #12]
 8020c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020c54:	4433      	add	r3, r6
 8020c56:	9309      	str	r3, [sp, #36]	; 0x24
 8020c58:	e767      	b.n	8020b2a <_svfiprintf_r+0x4e>
 8020c5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8020c5e:	460c      	mov	r4, r1
 8020c60:	2001      	movs	r0, #1
 8020c62:	e7a5      	b.n	8020bb0 <_svfiprintf_r+0xd4>
 8020c64:	2300      	movs	r3, #0
 8020c66:	3401      	adds	r4, #1
 8020c68:	9305      	str	r3, [sp, #20]
 8020c6a:	4619      	mov	r1, r3
 8020c6c:	f04f 0c0a 	mov.w	ip, #10
 8020c70:	4620      	mov	r0, r4
 8020c72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020c76:	3a30      	subs	r2, #48	; 0x30
 8020c78:	2a09      	cmp	r2, #9
 8020c7a:	d903      	bls.n	8020c84 <_svfiprintf_r+0x1a8>
 8020c7c:	2b00      	cmp	r3, #0
 8020c7e:	d0c5      	beq.n	8020c0c <_svfiprintf_r+0x130>
 8020c80:	9105      	str	r1, [sp, #20]
 8020c82:	e7c3      	b.n	8020c0c <_svfiprintf_r+0x130>
 8020c84:	fb0c 2101 	mla	r1, ip, r1, r2
 8020c88:	4604      	mov	r4, r0
 8020c8a:	2301      	movs	r3, #1
 8020c8c:	e7f0      	b.n	8020c70 <_svfiprintf_r+0x194>
 8020c8e:	ab03      	add	r3, sp, #12
 8020c90:	9300      	str	r3, [sp, #0]
 8020c92:	462a      	mov	r2, r5
 8020c94:	4b0f      	ldr	r3, [pc, #60]	; (8020cd4 <_svfiprintf_r+0x1f8>)
 8020c96:	a904      	add	r1, sp, #16
 8020c98:	4638      	mov	r0, r7
 8020c9a:	f3af 8000 	nop.w
 8020c9e:	1c42      	adds	r2, r0, #1
 8020ca0:	4606      	mov	r6, r0
 8020ca2:	d1d6      	bne.n	8020c52 <_svfiprintf_r+0x176>
 8020ca4:	89ab      	ldrh	r3, [r5, #12]
 8020ca6:	065b      	lsls	r3, r3, #25
 8020ca8:	f53f af2c 	bmi.w	8020b04 <_svfiprintf_r+0x28>
 8020cac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020cae:	b01d      	add	sp, #116	; 0x74
 8020cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020cb4:	ab03      	add	r3, sp, #12
 8020cb6:	9300      	str	r3, [sp, #0]
 8020cb8:	462a      	mov	r2, r5
 8020cba:	4b06      	ldr	r3, [pc, #24]	; (8020cd4 <_svfiprintf_r+0x1f8>)
 8020cbc:	a904      	add	r1, sp, #16
 8020cbe:	4638      	mov	r0, r7
 8020cc0:	f000 f9d4 	bl	802106c <_printf_i>
 8020cc4:	e7eb      	b.n	8020c9e <_svfiprintf_r+0x1c2>
 8020cc6:	bf00      	nop
 8020cc8:	08027973 	.word	0x08027973
 8020ccc:	0802797d 	.word	0x0802797d
 8020cd0:	00000000 	.word	0x00000000
 8020cd4:	08020a25 	.word	0x08020a25
 8020cd8:	08027979 	.word	0x08027979

08020cdc <__sfputc_r>:
 8020cdc:	6893      	ldr	r3, [r2, #8]
 8020cde:	3b01      	subs	r3, #1
 8020ce0:	2b00      	cmp	r3, #0
 8020ce2:	b410      	push	{r4}
 8020ce4:	6093      	str	r3, [r2, #8]
 8020ce6:	da08      	bge.n	8020cfa <__sfputc_r+0x1e>
 8020ce8:	6994      	ldr	r4, [r2, #24]
 8020cea:	42a3      	cmp	r3, r4
 8020cec:	db01      	blt.n	8020cf2 <__sfputc_r+0x16>
 8020cee:	290a      	cmp	r1, #10
 8020cf0:	d103      	bne.n	8020cfa <__sfputc_r+0x1e>
 8020cf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020cf6:	f7ff bb75 	b.w	80203e4 <__swbuf_r>
 8020cfa:	6813      	ldr	r3, [r2, #0]
 8020cfc:	1c58      	adds	r0, r3, #1
 8020cfe:	6010      	str	r0, [r2, #0]
 8020d00:	7019      	strb	r1, [r3, #0]
 8020d02:	4608      	mov	r0, r1
 8020d04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020d08:	4770      	bx	lr

08020d0a <__sfputs_r>:
 8020d0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020d0c:	4606      	mov	r6, r0
 8020d0e:	460f      	mov	r7, r1
 8020d10:	4614      	mov	r4, r2
 8020d12:	18d5      	adds	r5, r2, r3
 8020d14:	42ac      	cmp	r4, r5
 8020d16:	d101      	bne.n	8020d1c <__sfputs_r+0x12>
 8020d18:	2000      	movs	r0, #0
 8020d1a:	e007      	b.n	8020d2c <__sfputs_r+0x22>
 8020d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020d20:	463a      	mov	r2, r7
 8020d22:	4630      	mov	r0, r6
 8020d24:	f7ff ffda 	bl	8020cdc <__sfputc_r>
 8020d28:	1c43      	adds	r3, r0, #1
 8020d2a:	d1f3      	bne.n	8020d14 <__sfputs_r+0xa>
 8020d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020d30 <_vfiprintf_r>:
 8020d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d34:	460d      	mov	r5, r1
 8020d36:	b09d      	sub	sp, #116	; 0x74
 8020d38:	4614      	mov	r4, r2
 8020d3a:	4698      	mov	r8, r3
 8020d3c:	4606      	mov	r6, r0
 8020d3e:	b118      	cbz	r0, 8020d48 <_vfiprintf_r+0x18>
 8020d40:	6983      	ldr	r3, [r0, #24]
 8020d42:	b90b      	cbnz	r3, 8020d48 <_vfiprintf_r+0x18>
 8020d44:	f7fd fc90 	bl	801e668 <__sinit>
 8020d48:	4b89      	ldr	r3, [pc, #548]	; (8020f70 <_vfiprintf_r+0x240>)
 8020d4a:	429d      	cmp	r5, r3
 8020d4c:	d11b      	bne.n	8020d86 <_vfiprintf_r+0x56>
 8020d4e:	6875      	ldr	r5, [r6, #4]
 8020d50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020d52:	07d9      	lsls	r1, r3, #31
 8020d54:	d405      	bmi.n	8020d62 <_vfiprintf_r+0x32>
 8020d56:	89ab      	ldrh	r3, [r5, #12]
 8020d58:	059a      	lsls	r2, r3, #22
 8020d5a:	d402      	bmi.n	8020d62 <_vfiprintf_r+0x32>
 8020d5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020d5e:	f7fe f836 	bl	801edce <__retarget_lock_acquire_recursive>
 8020d62:	89ab      	ldrh	r3, [r5, #12]
 8020d64:	071b      	lsls	r3, r3, #28
 8020d66:	d501      	bpl.n	8020d6c <_vfiprintf_r+0x3c>
 8020d68:	692b      	ldr	r3, [r5, #16]
 8020d6a:	b9eb      	cbnz	r3, 8020da8 <_vfiprintf_r+0x78>
 8020d6c:	4629      	mov	r1, r5
 8020d6e:	4630      	mov	r0, r6
 8020d70:	f7ff fb9c 	bl	80204ac <__swsetup_r>
 8020d74:	b1c0      	cbz	r0, 8020da8 <_vfiprintf_r+0x78>
 8020d76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020d78:	07dc      	lsls	r4, r3, #31
 8020d7a:	d50e      	bpl.n	8020d9a <_vfiprintf_r+0x6a>
 8020d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8020d80:	b01d      	add	sp, #116	; 0x74
 8020d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d86:	4b7b      	ldr	r3, [pc, #492]	; (8020f74 <_vfiprintf_r+0x244>)
 8020d88:	429d      	cmp	r5, r3
 8020d8a:	d101      	bne.n	8020d90 <_vfiprintf_r+0x60>
 8020d8c:	68b5      	ldr	r5, [r6, #8]
 8020d8e:	e7df      	b.n	8020d50 <_vfiprintf_r+0x20>
 8020d90:	4b79      	ldr	r3, [pc, #484]	; (8020f78 <_vfiprintf_r+0x248>)
 8020d92:	429d      	cmp	r5, r3
 8020d94:	bf08      	it	eq
 8020d96:	68f5      	ldreq	r5, [r6, #12]
 8020d98:	e7da      	b.n	8020d50 <_vfiprintf_r+0x20>
 8020d9a:	89ab      	ldrh	r3, [r5, #12]
 8020d9c:	0598      	lsls	r0, r3, #22
 8020d9e:	d4ed      	bmi.n	8020d7c <_vfiprintf_r+0x4c>
 8020da0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020da2:	f7fe f816 	bl	801edd2 <__retarget_lock_release_recursive>
 8020da6:	e7e9      	b.n	8020d7c <_vfiprintf_r+0x4c>
 8020da8:	2300      	movs	r3, #0
 8020daa:	9309      	str	r3, [sp, #36]	; 0x24
 8020dac:	2320      	movs	r3, #32
 8020dae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020db2:	f8cd 800c 	str.w	r8, [sp, #12]
 8020db6:	2330      	movs	r3, #48	; 0x30
 8020db8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8020f7c <_vfiprintf_r+0x24c>
 8020dbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020dc0:	f04f 0901 	mov.w	r9, #1
 8020dc4:	4623      	mov	r3, r4
 8020dc6:	469a      	mov	sl, r3
 8020dc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020dcc:	b10a      	cbz	r2, 8020dd2 <_vfiprintf_r+0xa2>
 8020dce:	2a25      	cmp	r2, #37	; 0x25
 8020dd0:	d1f9      	bne.n	8020dc6 <_vfiprintf_r+0x96>
 8020dd2:	ebba 0b04 	subs.w	fp, sl, r4
 8020dd6:	d00b      	beq.n	8020df0 <_vfiprintf_r+0xc0>
 8020dd8:	465b      	mov	r3, fp
 8020dda:	4622      	mov	r2, r4
 8020ddc:	4629      	mov	r1, r5
 8020dde:	4630      	mov	r0, r6
 8020de0:	f7ff ff93 	bl	8020d0a <__sfputs_r>
 8020de4:	3001      	adds	r0, #1
 8020de6:	f000 80aa 	beq.w	8020f3e <_vfiprintf_r+0x20e>
 8020dea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020dec:	445a      	add	r2, fp
 8020dee:	9209      	str	r2, [sp, #36]	; 0x24
 8020df0:	f89a 3000 	ldrb.w	r3, [sl]
 8020df4:	2b00      	cmp	r3, #0
 8020df6:	f000 80a2 	beq.w	8020f3e <_vfiprintf_r+0x20e>
 8020dfa:	2300      	movs	r3, #0
 8020dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8020e00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020e04:	f10a 0a01 	add.w	sl, sl, #1
 8020e08:	9304      	str	r3, [sp, #16]
 8020e0a:	9307      	str	r3, [sp, #28]
 8020e0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020e10:	931a      	str	r3, [sp, #104]	; 0x68
 8020e12:	4654      	mov	r4, sl
 8020e14:	2205      	movs	r2, #5
 8020e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020e1a:	4858      	ldr	r0, [pc, #352]	; (8020f7c <_vfiprintf_r+0x24c>)
 8020e1c:	f7df fa20 	bl	8000260 <memchr>
 8020e20:	9a04      	ldr	r2, [sp, #16]
 8020e22:	b9d8      	cbnz	r0, 8020e5c <_vfiprintf_r+0x12c>
 8020e24:	06d1      	lsls	r1, r2, #27
 8020e26:	bf44      	itt	mi
 8020e28:	2320      	movmi	r3, #32
 8020e2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020e2e:	0713      	lsls	r3, r2, #28
 8020e30:	bf44      	itt	mi
 8020e32:	232b      	movmi	r3, #43	; 0x2b
 8020e34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020e38:	f89a 3000 	ldrb.w	r3, [sl]
 8020e3c:	2b2a      	cmp	r3, #42	; 0x2a
 8020e3e:	d015      	beq.n	8020e6c <_vfiprintf_r+0x13c>
 8020e40:	9a07      	ldr	r2, [sp, #28]
 8020e42:	4654      	mov	r4, sl
 8020e44:	2000      	movs	r0, #0
 8020e46:	f04f 0c0a 	mov.w	ip, #10
 8020e4a:	4621      	mov	r1, r4
 8020e4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020e50:	3b30      	subs	r3, #48	; 0x30
 8020e52:	2b09      	cmp	r3, #9
 8020e54:	d94e      	bls.n	8020ef4 <_vfiprintf_r+0x1c4>
 8020e56:	b1b0      	cbz	r0, 8020e86 <_vfiprintf_r+0x156>
 8020e58:	9207      	str	r2, [sp, #28]
 8020e5a:	e014      	b.n	8020e86 <_vfiprintf_r+0x156>
 8020e5c:	eba0 0308 	sub.w	r3, r0, r8
 8020e60:	fa09 f303 	lsl.w	r3, r9, r3
 8020e64:	4313      	orrs	r3, r2
 8020e66:	9304      	str	r3, [sp, #16]
 8020e68:	46a2      	mov	sl, r4
 8020e6a:	e7d2      	b.n	8020e12 <_vfiprintf_r+0xe2>
 8020e6c:	9b03      	ldr	r3, [sp, #12]
 8020e6e:	1d19      	adds	r1, r3, #4
 8020e70:	681b      	ldr	r3, [r3, #0]
 8020e72:	9103      	str	r1, [sp, #12]
 8020e74:	2b00      	cmp	r3, #0
 8020e76:	bfbb      	ittet	lt
 8020e78:	425b      	neglt	r3, r3
 8020e7a:	f042 0202 	orrlt.w	r2, r2, #2
 8020e7e:	9307      	strge	r3, [sp, #28]
 8020e80:	9307      	strlt	r3, [sp, #28]
 8020e82:	bfb8      	it	lt
 8020e84:	9204      	strlt	r2, [sp, #16]
 8020e86:	7823      	ldrb	r3, [r4, #0]
 8020e88:	2b2e      	cmp	r3, #46	; 0x2e
 8020e8a:	d10c      	bne.n	8020ea6 <_vfiprintf_r+0x176>
 8020e8c:	7863      	ldrb	r3, [r4, #1]
 8020e8e:	2b2a      	cmp	r3, #42	; 0x2a
 8020e90:	d135      	bne.n	8020efe <_vfiprintf_r+0x1ce>
 8020e92:	9b03      	ldr	r3, [sp, #12]
 8020e94:	1d1a      	adds	r2, r3, #4
 8020e96:	681b      	ldr	r3, [r3, #0]
 8020e98:	9203      	str	r2, [sp, #12]
 8020e9a:	2b00      	cmp	r3, #0
 8020e9c:	bfb8      	it	lt
 8020e9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8020ea2:	3402      	adds	r4, #2
 8020ea4:	9305      	str	r3, [sp, #20]
 8020ea6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8020f8c <_vfiprintf_r+0x25c>
 8020eaa:	7821      	ldrb	r1, [r4, #0]
 8020eac:	2203      	movs	r2, #3
 8020eae:	4650      	mov	r0, sl
 8020eb0:	f7df f9d6 	bl	8000260 <memchr>
 8020eb4:	b140      	cbz	r0, 8020ec8 <_vfiprintf_r+0x198>
 8020eb6:	2340      	movs	r3, #64	; 0x40
 8020eb8:	eba0 000a 	sub.w	r0, r0, sl
 8020ebc:	fa03 f000 	lsl.w	r0, r3, r0
 8020ec0:	9b04      	ldr	r3, [sp, #16]
 8020ec2:	4303      	orrs	r3, r0
 8020ec4:	3401      	adds	r4, #1
 8020ec6:	9304      	str	r3, [sp, #16]
 8020ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020ecc:	482c      	ldr	r0, [pc, #176]	; (8020f80 <_vfiprintf_r+0x250>)
 8020ece:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020ed2:	2206      	movs	r2, #6
 8020ed4:	f7df f9c4 	bl	8000260 <memchr>
 8020ed8:	2800      	cmp	r0, #0
 8020eda:	d03f      	beq.n	8020f5c <_vfiprintf_r+0x22c>
 8020edc:	4b29      	ldr	r3, [pc, #164]	; (8020f84 <_vfiprintf_r+0x254>)
 8020ede:	bb1b      	cbnz	r3, 8020f28 <_vfiprintf_r+0x1f8>
 8020ee0:	9b03      	ldr	r3, [sp, #12]
 8020ee2:	3307      	adds	r3, #7
 8020ee4:	f023 0307 	bic.w	r3, r3, #7
 8020ee8:	3308      	adds	r3, #8
 8020eea:	9303      	str	r3, [sp, #12]
 8020eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020eee:	443b      	add	r3, r7
 8020ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8020ef2:	e767      	b.n	8020dc4 <_vfiprintf_r+0x94>
 8020ef4:	fb0c 3202 	mla	r2, ip, r2, r3
 8020ef8:	460c      	mov	r4, r1
 8020efa:	2001      	movs	r0, #1
 8020efc:	e7a5      	b.n	8020e4a <_vfiprintf_r+0x11a>
 8020efe:	2300      	movs	r3, #0
 8020f00:	3401      	adds	r4, #1
 8020f02:	9305      	str	r3, [sp, #20]
 8020f04:	4619      	mov	r1, r3
 8020f06:	f04f 0c0a 	mov.w	ip, #10
 8020f0a:	4620      	mov	r0, r4
 8020f0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020f10:	3a30      	subs	r2, #48	; 0x30
 8020f12:	2a09      	cmp	r2, #9
 8020f14:	d903      	bls.n	8020f1e <_vfiprintf_r+0x1ee>
 8020f16:	2b00      	cmp	r3, #0
 8020f18:	d0c5      	beq.n	8020ea6 <_vfiprintf_r+0x176>
 8020f1a:	9105      	str	r1, [sp, #20]
 8020f1c:	e7c3      	b.n	8020ea6 <_vfiprintf_r+0x176>
 8020f1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8020f22:	4604      	mov	r4, r0
 8020f24:	2301      	movs	r3, #1
 8020f26:	e7f0      	b.n	8020f0a <_vfiprintf_r+0x1da>
 8020f28:	ab03      	add	r3, sp, #12
 8020f2a:	9300      	str	r3, [sp, #0]
 8020f2c:	462a      	mov	r2, r5
 8020f2e:	4b16      	ldr	r3, [pc, #88]	; (8020f88 <_vfiprintf_r+0x258>)
 8020f30:	a904      	add	r1, sp, #16
 8020f32:	4630      	mov	r0, r6
 8020f34:	f3af 8000 	nop.w
 8020f38:	4607      	mov	r7, r0
 8020f3a:	1c78      	adds	r0, r7, #1
 8020f3c:	d1d6      	bne.n	8020eec <_vfiprintf_r+0x1bc>
 8020f3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020f40:	07d9      	lsls	r1, r3, #31
 8020f42:	d405      	bmi.n	8020f50 <_vfiprintf_r+0x220>
 8020f44:	89ab      	ldrh	r3, [r5, #12]
 8020f46:	059a      	lsls	r2, r3, #22
 8020f48:	d402      	bmi.n	8020f50 <_vfiprintf_r+0x220>
 8020f4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020f4c:	f7fd ff41 	bl	801edd2 <__retarget_lock_release_recursive>
 8020f50:	89ab      	ldrh	r3, [r5, #12]
 8020f52:	065b      	lsls	r3, r3, #25
 8020f54:	f53f af12 	bmi.w	8020d7c <_vfiprintf_r+0x4c>
 8020f58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020f5a:	e711      	b.n	8020d80 <_vfiprintf_r+0x50>
 8020f5c:	ab03      	add	r3, sp, #12
 8020f5e:	9300      	str	r3, [sp, #0]
 8020f60:	462a      	mov	r2, r5
 8020f62:	4b09      	ldr	r3, [pc, #36]	; (8020f88 <_vfiprintf_r+0x258>)
 8020f64:	a904      	add	r1, sp, #16
 8020f66:	4630      	mov	r0, r6
 8020f68:	f000 f880 	bl	802106c <_printf_i>
 8020f6c:	e7e4      	b.n	8020f38 <_vfiprintf_r+0x208>
 8020f6e:	bf00      	nop
 8020f70:	080273f4 	.word	0x080273f4
 8020f74:	08027414 	.word	0x08027414
 8020f78:	080273d4 	.word	0x080273d4
 8020f7c:	08027973 	.word	0x08027973
 8020f80:	0802797d 	.word	0x0802797d
 8020f84:	00000000 	.word	0x00000000
 8020f88:	08020d0b 	.word	0x08020d0b
 8020f8c:	08027979 	.word	0x08027979

08020f90 <_printf_common>:
 8020f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020f94:	4616      	mov	r6, r2
 8020f96:	4699      	mov	r9, r3
 8020f98:	688a      	ldr	r2, [r1, #8]
 8020f9a:	690b      	ldr	r3, [r1, #16]
 8020f9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020fa0:	4293      	cmp	r3, r2
 8020fa2:	bfb8      	it	lt
 8020fa4:	4613      	movlt	r3, r2
 8020fa6:	6033      	str	r3, [r6, #0]
 8020fa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8020fac:	4607      	mov	r7, r0
 8020fae:	460c      	mov	r4, r1
 8020fb0:	b10a      	cbz	r2, 8020fb6 <_printf_common+0x26>
 8020fb2:	3301      	adds	r3, #1
 8020fb4:	6033      	str	r3, [r6, #0]
 8020fb6:	6823      	ldr	r3, [r4, #0]
 8020fb8:	0699      	lsls	r1, r3, #26
 8020fba:	bf42      	ittt	mi
 8020fbc:	6833      	ldrmi	r3, [r6, #0]
 8020fbe:	3302      	addmi	r3, #2
 8020fc0:	6033      	strmi	r3, [r6, #0]
 8020fc2:	6825      	ldr	r5, [r4, #0]
 8020fc4:	f015 0506 	ands.w	r5, r5, #6
 8020fc8:	d106      	bne.n	8020fd8 <_printf_common+0x48>
 8020fca:	f104 0a19 	add.w	sl, r4, #25
 8020fce:	68e3      	ldr	r3, [r4, #12]
 8020fd0:	6832      	ldr	r2, [r6, #0]
 8020fd2:	1a9b      	subs	r3, r3, r2
 8020fd4:	42ab      	cmp	r3, r5
 8020fd6:	dc26      	bgt.n	8021026 <_printf_common+0x96>
 8020fd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8020fdc:	1e13      	subs	r3, r2, #0
 8020fde:	6822      	ldr	r2, [r4, #0]
 8020fe0:	bf18      	it	ne
 8020fe2:	2301      	movne	r3, #1
 8020fe4:	0692      	lsls	r2, r2, #26
 8020fe6:	d42b      	bmi.n	8021040 <_printf_common+0xb0>
 8020fe8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020fec:	4649      	mov	r1, r9
 8020fee:	4638      	mov	r0, r7
 8020ff0:	47c0      	blx	r8
 8020ff2:	3001      	adds	r0, #1
 8020ff4:	d01e      	beq.n	8021034 <_printf_common+0xa4>
 8020ff6:	6823      	ldr	r3, [r4, #0]
 8020ff8:	68e5      	ldr	r5, [r4, #12]
 8020ffa:	6832      	ldr	r2, [r6, #0]
 8020ffc:	f003 0306 	and.w	r3, r3, #6
 8021000:	2b04      	cmp	r3, #4
 8021002:	bf08      	it	eq
 8021004:	1aad      	subeq	r5, r5, r2
 8021006:	68a3      	ldr	r3, [r4, #8]
 8021008:	6922      	ldr	r2, [r4, #16]
 802100a:	bf0c      	ite	eq
 802100c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021010:	2500      	movne	r5, #0
 8021012:	4293      	cmp	r3, r2
 8021014:	bfc4      	itt	gt
 8021016:	1a9b      	subgt	r3, r3, r2
 8021018:	18ed      	addgt	r5, r5, r3
 802101a:	2600      	movs	r6, #0
 802101c:	341a      	adds	r4, #26
 802101e:	42b5      	cmp	r5, r6
 8021020:	d11a      	bne.n	8021058 <_printf_common+0xc8>
 8021022:	2000      	movs	r0, #0
 8021024:	e008      	b.n	8021038 <_printf_common+0xa8>
 8021026:	2301      	movs	r3, #1
 8021028:	4652      	mov	r2, sl
 802102a:	4649      	mov	r1, r9
 802102c:	4638      	mov	r0, r7
 802102e:	47c0      	blx	r8
 8021030:	3001      	adds	r0, #1
 8021032:	d103      	bne.n	802103c <_printf_common+0xac>
 8021034:	f04f 30ff 	mov.w	r0, #4294967295
 8021038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802103c:	3501      	adds	r5, #1
 802103e:	e7c6      	b.n	8020fce <_printf_common+0x3e>
 8021040:	18e1      	adds	r1, r4, r3
 8021042:	1c5a      	adds	r2, r3, #1
 8021044:	2030      	movs	r0, #48	; 0x30
 8021046:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802104a:	4422      	add	r2, r4
 802104c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8021050:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8021054:	3302      	adds	r3, #2
 8021056:	e7c7      	b.n	8020fe8 <_printf_common+0x58>
 8021058:	2301      	movs	r3, #1
 802105a:	4622      	mov	r2, r4
 802105c:	4649      	mov	r1, r9
 802105e:	4638      	mov	r0, r7
 8021060:	47c0      	blx	r8
 8021062:	3001      	adds	r0, #1
 8021064:	d0e6      	beq.n	8021034 <_printf_common+0xa4>
 8021066:	3601      	adds	r6, #1
 8021068:	e7d9      	b.n	802101e <_printf_common+0x8e>
	...

0802106c <_printf_i>:
 802106c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021070:	460c      	mov	r4, r1
 8021072:	4691      	mov	r9, r2
 8021074:	7e27      	ldrb	r7, [r4, #24]
 8021076:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021078:	2f78      	cmp	r7, #120	; 0x78
 802107a:	4680      	mov	r8, r0
 802107c:	469a      	mov	sl, r3
 802107e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8021082:	d807      	bhi.n	8021094 <_printf_i+0x28>
 8021084:	2f62      	cmp	r7, #98	; 0x62
 8021086:	d80a      	bhi.n	802109e <_printf_i+0x32>
 8021088:	2f00      	cmp	r7, #0
 802108a:	f000 80d8 	beq.w	802123e <_printf_i+0x1d2>
 802108e:	2f58      	cmp	r7, #88	; 0x58
 8021090:	f000 80a3 	beq.w	80211da <_printf_i+0x16e>
 8021094:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8021098:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802109c:	e03a      	b.n	8021114 <_printf_i+0xa8>
 802109e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80210a2:	2b15      	cmp	r3, #21
 80210a4:	d8f6      	bhi.n	8021094 <_printf_i+0x28>
 80210a6:	a001      	add	r0, pc, #4	; (adr r0, 80210ac <_printf_i+0x40>)
 80210a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80210ac:	08021105 	.word	0x08021105
 80210b0:	08021119 	.word	0x08021119
 80210b4:	08021095 	.word	0x08021095
 80210b8:	08021095 	.word	0x08021095
 80210bc:	08021095 	.word	0x08021095
 80210c0:	08021095 	.word	0x08021095
 80210c4:	08021119 	.word	0x08021119
 80210c8:	08021095 	.word	0x08021095
 80210cc:	08021095 	.word	0x08021095
 80210d0:	08021095 	.word	0x08021095
 80210d4:	08021095 	.word	0x08021095
 80210d8:	08021225 	.word	0x08021225
 80210dc:	08021149 	.word	0x08021149
 80210e0:	08021207 	.word	0x08021207
 80210e4:	08021095 	.word	0x08021095
 80210e8:	08021095 	.word	0x08021095
 80210ec:	08021247 	.word	0x08021247
 80210f0:	08021095 	.word	0x08021095
 80210f4:	08021149 	.word	0x08021149
 80210f8:	08021095 	.word	0x08021095
 80210fc:	08021095 	.word	0x08021095
 8021100:	0802120f 	.word	0x0802120f
 8021104:	680b      	ldr	r3, [r1, #0]
 8021106:	1d1a      	adds	r2, r3, #4
 8021108:	681b      	ldr	r3, [r3, #0]
 802110a:	600a      	str	r2, [r1, #0]
 802110c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8021110:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8021114:	2301      	movs	r3, #1
 8021116:	e0a3      	b.n	8021260 <_printf_i+0x1f4>
 8021118:	6825      	ldr	r5, [r4, #0]
 802111a:	6808      	ldr	r0, [r1, #0]
 802111c:	062e      	lsls	r6, r5, #24
 802111e:	f100 0304 	add.w	r3, r0, #4
 8021122:	d50a      	bpl.n	802113a <_printf_i+0xce>
 8021124:	6805      	ldr	r5, [r0, #0]
 8021126:	600b      	str	r3, [r1, #0]
 8021128:	2d00      	cmp	r5, #0
 802112a:	da03      	bge.n	8021134 <_printf_i+0xc8>
 802112c:	232d      	movs	r3, #45	; 0x2d
 802112e:	426d      	negs	r5, r5
 8021130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021134:	485e      	ldr	r0, [pc, #376]	; (80212b0 <_printf_i+0x244>)
 8021136:	230a      	movs	r3, #10
 8021138:	e019      	b.n	802116e <_printf_i+0x102>
 802113a:	f015 0f40 	tst.w	r5, #64	; 0x40
 802113e:	6805      	ldr	r5, [r0, #0]
 8021140:	600b      	str	r3, [r1, #0]
 8021142:	bf18      	it	ne
 8021144:	b22d      	sxthne	r5, r5
 8021146:	e7ef      	b.n	8021128 <_printf_i+0xbc>
 8021148:	680b      	ldr	r3, [r1, #0]
 802114a:	6825      	ldr	r5, [r4, #0]
 802114c:	1d18      	adds	r0, r3, #4
 802114e:	6008      	str	r0, [r1, #0]
 8021150:	0628      	lsls	r0, r5, #24
 8021152:	d501      	bpl.n	8021158 <_printf_i+0xec>
 8021154:	681d      	ldr	r5, [r3, #0]
 8021156:	e002      	b.n	802115e <_printf_i+0xf2>
 8021158:	0669      	lsls	r1, r5, #25
 802115a:	d5fb      	bpl.n	8021154 <_printf_i+0xe8>
 802115c:	881d      	ldrh	r5, [r3, #0]
 802115e:	4854      	ldr	r0, [pc, #336]	; (80212b0 <_printf_i+0x244>)
 8021160:	2f6f      	cmp	r7, #111	; 0x6f
 8021162:	bf0c      	ite	eq
 8021164:	2308      	moveq	r3, #8
 8021166:	230a      	movne	r3, #10
 8021168:	2100      	movs	r1, #0
 802116a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802116e:	6866      	ldr	r6, [r4, #4]
 8021170:	60a6      	str	r6, [r4, #8]
 8021172:	2e00      	cmp	r6, #0
 8021174:	bfa2      	ittt	ge
 8021176:	6821      	ldrge	r1, [r4, #0]
 8021178:	f021 0104 	bicge.w	r1, r1, #4
 802117c:	6021      	strge	r1, [r4, #0]
 802117e:	b90d      	cbnz	r5, 8021184 <_printf_i+0x118>
 8021180:	2e00      	cmp	r6, #0
 8021182:	d04d      	beq.n	8021220 <_printf_i+0x1b4>
 8021184:	4616      	mov	r6, r2
 8021186:	fbb5 f1f3 	udiv	r1, r5, r3
 802118a:	fb03 5711 	mls	r7, r3, r1, r5
 802118e:	5dc7      	ldrb	r7, [r0, r7]
 8021190:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8021194:	462f      	mov	r7, r5
 8021196:	42bb      	cmp	r3, r7
 8021198:	460d      	mov	r5, r1
 802119a:	d9f4      	bls.n	8021186 <_printf_i+0x11a>
 802119c:	2b08      	cmp	r3, #8
 802119e:	d10b      	bne.n	80211b8 <_printf_i+0x14c>
 80211a0:	6823      	ldr	r3, [r4, #0]
 80211a2:	07df      	lsls	r7, r3, #31
 80211a4:	d508      	bpl.n	80211b8 <_printf_i+0x14c>
 80211a6:	6923      	ldr	r3, [r4, #16]
 80211a8:	6861      	ldr	r1, [r4, #4]
 80211aa:	4299      	cmp	r1, r3
 80211ac:	bfde      	ittt	le
 80211ae:	2330      	movle	r3, #48	; 0x30
 80211b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80211b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80211b8:	1b92      	subs	r2, r2, r6
 80211ba:	6122      	str	r2, [r4, #16]
 80211bc:	f8cd a000 	str.w	sl, [sp]
 80211c0:	464b      	mov	r3, r9
 80211c2:	aa03      	add	r2, sp, #12
 80211c4:	4621      	mov	r1, r4
 80211c6:	4640      	mov	r0, r8
 80211c8:	f7ff fee2 	bl	8020f90 <_printf_common>
 80211cc:	3001      	adds	r0, #1
 80211ce:	d14c      	bne.n	802126a <_printf_i+0x1fe>
 80211d0:	f04f 30ff 	mov.w	r0, #4294967295
 80211d4:	b004      	add	sp, #16
 80211d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80211da:	4835      	ldr	r0, [pc, #212]	; (80212b0 <_printf_i+0x244>)
 80211dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80211e0:	6823      	ldr	r3, [r4, #0]
 80211e2:	680e      	ldr	r6, [r1, #0]
 80211e4:	061f      	lsls	r7, r3, #24
 80211e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80211ea:	600e      	str	r6, [r1, #0]
 80211ec:	d514      	bpl.n	8021218 <_printf_i+0x1ac>
 80211ee:	07d9      	lsls	r1, r3, #31
 80211f0:	bf44      	itt	mi
 80211f2:	f043 0320 	orrmi.w	r3, r3, #32
 80211f6:	6023      	strmi	r3, [r4, #0]
 80211f8:	b91d      	cbnz	r5, 8021202 <_printf_i+0x196>
 80211fa:	6823      	ldr	r3, [r4, #0]
 80211fc:	f023 0320 	bic.w	r3, r3, #32
 8021200:	6023      	str	r3, [r4, #0]
 8021202:	2310      	movs	r3, #16
 8021204:	e7b0      	b.n	8021168 <_printf_i+0xfc>
 8021206:	6823      	ldr	r3, [r4, #0]
 8021208:	f043 0320 	orr.w	r3, r3, #32
 802120c:	6023      	str	r3, [r4, #0]
 802120e:	2378      	movs	r3, #120	; 0x78
 8021210:	4828      	ldr	r0, [pc, #160]	; (80212b4 <_printf_i+0x248>)
 8021212:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8021216:	e7e3      	b.n	80211e0 <_printf_i+0x174>
 8021218:	065e      	lsls	r6, r3, #25
 802121a:	bf48      	it	mi
 802121c:	b2ad      	uxthmi	r5, r5
 802121e:	e7e6      	b.n	80211ee <_printf_i+0x182>
 8021220:	4616      	mov	r6, r2
 8021222:	e7bb      	b.n	802119c <_printf_i+0x130>
 8021224:	680b      	ldr	r3, [r1, #0]
 8021226:	6826      	ldr	r6, [r4, #0]
 8021228:	6960      	ldr	r0, [r4, #20]
 802122a:	1d1d      	adds	r5, r3, #4
 802122c:	600d      	str	r5, [r1, #0]
 802122e:	0635      	lsls	r5, r6, #24
 8021230:	681b      	ldr	r3, [r3, #0]
 8021232:	d501      	bpl.n	8021238 <_printf_i+0x1cc>
 8021234:	6018      	str	r0, [r3, #0]
 8021236:	e002      	b.n	802123e <_printf_i+0x1d2>
 8021238:	0671      	lsls	r1, r6, #25
 802123a:	d5fb      	bpl.n	8021234 <_printf_i+0x1c8>
 802123c:	8018      	strh	r0, [r3, #0]
 802123e:	2300      	movs	r3, #0
 8021240:	6123      	str	r3, [r4, #16]
 8021242:	4616      	mov	r6, r2
 8021244:	e7ba      	b.n	80211bc <_printf_i+0x150>
 8021246:	680b      	ldr	r3, [r1, #0]
 8021248:	1d1a      	adds	r2, r3, #4
 802124a:	600a      	str	r2, [r1, #0]
 802124c:	681e      	ldr	r6, [r3, #0]
 802124e:	6862      	ldr	r2, [r4, #4]
 8021250:	2100      	movs	r1, #0
 8021252:	4630      	mov	r0, r6
 8021254:	f7df f804 	bl	8000260 <memchr>
 8021258:	b108      	cbz	r0, 802125e <_printf_i+0x1f2>
 802125a:	1b80      	subs	r0, r0, r6
 802125c:	6060      	str	r0, [r4, #4]
 802125e:	6863      	ldr	r3, [r4, #4]
 8021260:	6123      	str	r3, [r4, #16]
 8021262:	2300      	movs	r3, #0
 8021264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021268:	e7a8      	b.n	80211bc <_printf_i+0x150>
 802126a:	6923      	ldr	r3, [r4, #16]
 802126c:	4632      	mov	r2, r6
 802126e:	4649      	mov	r1, r9
 8021270:	4640      	mov	r0, r8
 8021272:	47d0      	blx	sl
 8021274:	3001      	adds	r0, #1
 8021276:	d0ab      	beq.n	80211d0 <_printf_i+0x164>
 8021278:	6823      	ldr	r3, [r4, #0]
 802127a:	079b      	lsls	r3, r3, #30
 802127c:	d413      	bmi.n	80212a6 <_printf_i+0x23a>
 802127e:	68e0      	ldr	r0, [r4, #12]
 8021280:	9b03      	ldr	r3, [sp, #12]
 8021282:	4298      	cmp	r0, r3
 8021284:	bfb8      	it	lt
 8021286:	4618      	movlt	r0, r3
 8021288:	e7a4      	b.n	80211d4 <_printf_i+0x168>
 802128a:	2301      	movs	r3, #1
 802128c:	4632      	mov	r2, r6
 802128e:	4649      	mov	r1, r9
 8021290:	4640      	mov	r0, r8
 8021292:	47d0      	blx	sl
 8021294:	3001      	adds	r0, #1
 8021296:	d09b      	beq.n	80211d0 <_printf_i+0x164>
 8021298:	3501      	adds	r5, #1
 802129a:	68e3      	ldr	r3, [r4, #12]
 802129c:	9903      	ldr	r1, [sp, #12]
 802129e:	1a5b      	subs	r3, r3, r1
 80212a0:	42ab      	cmp	r3, r5
 80212a2:	dcf2      	bgt.n	802128a <_printf_i+0x21e>
 80212a4:	e7eb      	b.n	802127e <_printf_i+0x212>
 80212a6:	2500      	movs	r5, #0
 80212a8:	f104 0619 	add.w	r6, r4, #25
 80212ac:	e7f5      	b.n	802129a <_printf_i+0x22e>
 80212ae:	bf00      	nop
 80212b0:	08027984 	.word	0x08027984
 80212b4:	08027995 	.word	0x08027995

080212b8 <_putc_r>:
 80212b8:	b570      	push	{r4, r5, r6, lr}
 80212ba:	460d      	mov	r5, r1
 80212bc:	4614      	mov	r4, r2
 80212be:	4606      	mov	r6, r0
 80212c0:	b118      	cbz	r0, 80212ca <_putc_r+0x12>
 80212c2:	6983      	ldr	r3, [r0, #24]
 80212c4:	b90b      	cbnz	r3, 80212ca <_putc_r+0x12>
 80212c6:	f7fd f9cf 	bl	801e668 <__sinit>
 80212ca:	4b1c      	ldr	r3, [pc, #112]	; (802133c <_putc_r+0x84>)
 80212cc:	429c      	cmp	r4, r3
 80212ce:	d124      	bne.n	802131a <_putc_r+0x62>
 80212d0:	6874      	ldr	r4, [r6, #4]
 80212d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80212d4:	07d8      	lsls	r0, r3, #31
 80212d6:	d405      	bmi.n	80212e4 <_putc_r+0x2c>
 80212d8:	89a3      	ldrh	r3, [r4, #12]
 80212da:	0599      	lsls	r1, r3, #22
 80212dc:	d402      	bmi.n	80212e4 <_putc_r+0x2c>
 80212de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80212e0:	f7fd fd75 	bl	801edce <__retarget_lock_acquire_recursive>
 80212e4:	68a3      	ldr	r3, [r4, #8]
 80212e6:	3b01      	subs	r3, #1
 80212e8:	2b00      	cmp	r3, #0
 80212ea:	60a3      	str	r3, [r4, #8]
 80212ec:	da05      	bge.n	80212fa <_putc_r+0x42>
 80212ee:	69a2      	ldr	r2, [r4, #24]
 80212f0:	4293      	cmp	r3, r2
 80212f2:	db1c      	blt.n	802132e <_putc_r+0x76>
 80212f4:	b2eb      	uxtb	r3, r5
 80212f6:	2b0a      	cmp	r3, #10
 80212f8:	d019      	beq.n	802132e <_putc_r+0x76>
 80212fa:	6823      	ldr	r3, [r4, #0]
 80212fc:	1c5a      	adds	r2, r3, #1
 80212fe:	6022      	str	r2, [r4, #0]
 8021300:	701d      	strb	r5, [r3, #0]
 8021302:	b2ed      	uxtb	r5, r5
 8021304:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021306:	07da      	lsls	r2, r3, #31
 8021308:	d405      	bmi.n	8021316 <_putc_r+0x5e>
 802130a:	89a3      	ldrh	r3, [r4, #12]
 802130c:	059b      	lsls	r3, r3, #22
 802130e:	d402      	bmi.n	8021316 <_putc_r+0x5e>
 8021310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021312:	f7fd fd5e 	bl	801edd2 <__retarget_lock_release_recursive>
 8021316:	4628      	mov	r0, r5
 8021318:	bd70      	pop	{r4, r5, r6, pc}
 802131a:	4b09      	ldr	r3, [pc, #36]	; (8021340 <_putc_r+0x88>)
 802131c:	429c      	cmp	r4, r3
 802131e:	d101      	bne.n	8021324 <_putc_r+0x6c>
 8021320:	68b4      	ldr	r4, [r6, #8]
 8021322:	e7d6      	b.n	80212d2 <_putc_r+0x1a>
 8021324:	4b07      	ldr	r3, [pc, #28]	; (8021344 <_putc_r+0x8c>)
 8021326:	429c      	cmp	r4, r3
 8021328:	bf08      	it	eq
 802132a:	68f4      	ldreq	r4, [r6, #12]
 802132c:	e7d1      	b.n	80212d2 <_putc_r+0x1a>
 802132e:	4629      	mov	r1, r5
 8021330:	4622      	mov	r2, r4
 8021332:	4630      	mov	r0, r6
 8021334:	f7ff f856 	bl	80203e4 <__swbuf_r>
 8021338:	4605      	mov	r5, r0
 802133a:	e7e3      	b.n	8021304 <_putc_r+0x4c>
 802133c:	080273f4 	.word	0x080273f4
 8021340:	08027414 	.word	0x08027414
 8021344:	080273d4 	.word	0x080273d4

08021348 <_read_r>:
 8021348:	b538      	push	{r3, r4, r5, lr}
 802134a:	4d07      	ldr	r5, [pc, #28]	; (8021368 <_read_r+0x20>)
 802134c:	4604      	mov	r4, r0
 802134e:	4608      	mov	r0, r1
 8021350:	4611      	mov	r1, r2
 8021352:	2200      	movs	r2, #0
 8021354:	602a      	str	r2, [r5, #0]
 8021356:	461a      	mov	r2, r3
 8021358:	f7df fd1d 	bl	8000d96 <_read>
 802135c:	1c43      	adds	r3, r0, #1
 802135e:	d102      	bne.n	8021366 <_read_r+0x1e>
 8021360:	682b      	ldr	r3, [r5, #0]
 8021362:	b103      	cbz	r3, 8021366 <_read_r+0x1e>
 8021364:	6023      	str	r3, [r4, #0]
 8021366:	bd38      	pop	{r3, r4, r5, pc}
 8021368:	20000e90 	.word	0x20000e90

0802136c <sniprintf>:
 802136c:	b40c      	push	{r2, r3}
 802136e:	b530      	push	{r4, r5, lr}
 8021370:	4b17      	ldr	r3, [pc, #92]	; (80213d0 <sniprintf+0x64>)
 8021372:	1e0c      	subs	r4, r1, #0
 8021374:	681d      	ldr	r5, [r3, #0]
 8021376:	b09d      	sub	sp, #116	; 0x74
 8021378:	da08      	bge.n	802138c <sniprintf+0x20>
 802137a:	238b      	movs	r3, #139	; 0x8b
 802137c:	602b      	str	r3, [r5, #0]
 802137e:	f04f 30ff 	mov.w	r0, #4294967295
 8021382:	b01d      	add	sp, #116	; 0x74
 8021384:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021388:	b002      	add	sp, #8
 802138a:	4770      	bx	lr
 802138c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8021390:	f8ad 3014 	strh.w	r3, [sp, #20]
 8021394:	bf14      	ite	ne
 8021396:	f104 33ff 	addne.w	r3, r4, #4294967295
 802139a:	4623      	moveq	r3, r4
 802139c:	9304      	str	r3, [sp, #16]
 802139e:	9307      	str	r3, [sp, #28]
 80213a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80213a4:	9002      	str	r0, [sp, #8]
 80213a6:	9006      	str	r0, [sp, #24]
 80213a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80213ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80213ae:	ab21      	add	r3, sp, #132	; 0x84
 80213b0:	a902      	add	r1, sp, #8
 80213b2:	4628      	mov	r0, r5
 80213b4:	9301      	str	r3, [sp, #4]
 80213b6:	f7ff fb91 	bl	8020adc <_svfiprintf_r>
 80213ba:	1c43      	adds	r3, r0, #1
 80213bc:	bfbc      	itt	lt
 80213be:	238b      	movlt	r3, #139	; 0x8b
 80213c0:	602b      	strlt	r3, [r5, #0]
 80213c2:	2c00      	cmp	r4, #0
 80213c4:	d0dd      	beq.n	8021382 <sniprintf+0x16>
 80213c6:	9b02      	ldr	r3, [sp, #8]
 80213c8:	2200      	movs	r2, #0
 80213ca:	701a      	strb	r2, [r3, #0]
 80213cc:	e7d9      	b.n	8021382 <sniprintf+0x16>
 80213ce:	bf00      	nop
 80213d0:	20000108 	.word	0x20000108

080213d4 <siscanf>:
 80213d4:	b40e      	push	{r1, r2, r3}
 80213d6:	b510      	push	{r4, lr}
 80213d8:	b09f      	sub	sp, #124	; 0x7c
 80213da:	ac21      	add	r4, sp, #132	; 0x84
 80213dc:	f44f 7101 	mov.w	r1, #516	; 0x204
 80213e0:	f854 2b04 	ldr.w	r2, [r4], #4
 80213e4:	9201      	str	r2, [sp, #4]
 80213e6:	f8ad 101c 	strh.w	r1, [sp, #28]
 80213ea:	9004      	str	r0, [sp, #16]
 80213ec:	9008      	str	r0, [sp, #32]
 80213ee:	f7de ff25 	bl	800023c <strlen>
 80213f2:	4b0c      	ldr	r3, [pc, #48]	; (8021424 <siscanf+0x50>)
 80213f4:	9005      	str	r0, [sp, #20]
 80213f6:	9009      	str	r0, [sp, #36]	; 0x24
 80213f8:	930d      	str	r3, [sp, #52]	; 0x34
 80213fa:	480b      	ldr	r0, [pc, #44]	; (8021428 <siscanf+0x54>)
 80213fc:	9a01      	ldr	r2, [sp, #4]
 80213fe:	6800      	ldr	r0, [r0, #0]
 8021400:	9403      	str	r4, [sp, #12]
 8021402:	2300      	movs	r3, #0
 8021404:	9311      	str	r3, [sp, #68]	; 0x44
 8021406:	9316      	str	r3, [sp, #88]	; 0x58
 8021408:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802140c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021410:	a904      	add	r1, sp, #16
 8021412:	4623      	mov	r3, r4
 8021414:	f000 f8ba 	bl	802158c <__ssvfiscanf_r>
 8021418:	b01f      	add	sp, #124	; 0x7c
 802141a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802141e:	b003      	add	sp, #12
 8021420:	4770      	bx	lr
 8021422:	bf00      	nop
 8021424:	0801f2a3 	.word	0x0801f2a3
 8021428:	20000108 	.word	0x20000108

0802142c <strcpy>:
 802142c:	4603      	mov	r3, r0
 802142e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021432:	f803 2b01 	strb.w	r2, [r3], #1
 8021436:	2a00      	cmp	r2, #0
 8021438:	d1f9      	bne.n	802142e <strcpy+0x2>
 802143a:	4770      	bx	lr

0802143c <strncmp>:
 802143c:	b510      	push	{r4, lr}
 802143e:	b16a      	cbz	r2, 802145c <strncmp+0x20>
 8021440:	3901      	subs	r1, #1
 8021442:	1884      	adds	r4, r0, r2
 8021444:	f810 3b01 	ldrb.w	r3, [r0], #1
 8021448:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802144c:	4293      	cmp	r3, r2
 802144e:	d103      	bne.n	8021458 <strncmp+0x1c>
 8021450:	42a0      	cmp	r0, r4
 8021452:	d001      	beq.n	8021458 <strncmp+0x1c>
 8021454:	2b00      	cmp	r3, #0
 8021456:	d1f5      	bne.n	8021444 <strncmp+0x8>
 8021458:	1a98      	subs	r0, r3, r2
 802145a:	bd10      	pop	{r4, pc}
 802145c:	4610      	mov	r0, r2
 802145e:	e7fc      	b.n	802145a <strncmp+0x1e>

08021460 <__ascii_wctomb>:
 8021460:	b149      	cbz	r1, 8021476 <__ascii_wctomb+0x16>
 8021462:	2aff      	cmp	r2, #255	; 0xff
 8021464:	bf85      	ittet	hi
 8021466:	238a      	movhi	r3, #138	; 0x8a
 8021468:	6003      	strhi	r3, [r0, #0]
 802146a:	700a      	strbls	r2, [r1, #0]
 802146c:	f04f 30ff 	movhi.w	r0, #4294967295
 8021470:	bf98      	it	ls
 8021472:	2001      	movls	r0, #1
 8021474:	4770      	bx	lr
 8021476:	4608      	mov	r0, r1
 8021478:	4770      	bx	lr
	...

0802147c <__env_lock>:
 802147c:	4801      	ldr	r0, [pc, #4]	; (8021484 <__env_lock+0x8>)
 802147e:	f7fd bca6 	b.w	801edce <__retarget_lock_acquire_recursive>
 8021482:	bf00      	nop
 8021484:	20000e86 	.word	0x20000e86

08021488 <__env_unlock>:
 8021488:	4801      	ldr	r0, [pc, #4]	; (8021490 <__env_unlock+0x8>)
 802148a:	f7fd bca2 	b.w	801edd2 <__retarget_lock_release_recursive>
 802148e:	bf00      	nop
 8021490:	20000e86 	.word	0x20000e86

08021494 <memmove>:
 8021494:	4288      	cmp	r0, r1
 8021496:	b510      	push	{r4, lr}
 8021498:	eb01 0402 	add.w	r4, r1, r2
 802149c:	d902      	bls.n	80214a4 <memmove+0x10>
 802149e:	4284      	cmp	r4, r0
 80214a0:	4623      	mov	r3, r4
 80214a2:	d807      	bhi.n	80214b4 <memmove+0x20>
 80214a4:	1e43      	subs	r3, r0, #1
 80214a6:	42a1      	cmp	r1, r4
 80214a8:	d008      	beq.n	80214bc <memmove+0x28>
 80214aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80214ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80214b2:	e7f8      	b.n	80214a6 <memmove+0x12>
 80214b4:	4402      	add	r2, r0
 80214b6:	4601      	mov	r1, r0
 80214b8:	428a      	cmp	r2, r1
 80214ba:	d100      	bne.n	80214be <memmove+0x2a>
 80214bc:	bd10      	pop	{r4, pc}
 80214be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80214c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80214c6:	e7f7      	b.n	80214b8 <memmove+0x24>

080214c8 <_malloc_usable_size_r>:
 80214c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80214cc:	1f18      	subs	r0, r3, #4
 80214ce:	2b00      	cmp	r3, #0
 80214d0:	bfbc      	itt	lt
 80214d2:	580b      	ldrlt	r3, [r1, r0]
 80214d4:	18c0      	addlt	r0, r0, r3
 80214d6:	4770      	bx	lr

080214d8 <_sungetc_r>:
 80214d8:	b538      	push	{r3, r4, r5, lr}
 80214da:	1c4b      	adds	r3, r1, #1
 80214dc:	4614      	mov	r4, r2
 80214de:	d103      	bne.n	80214e8 <_sungetc_r+0x10>
 80214e0:	f04f 35ff 	mov.w	r5, #4294967295
 80214e4:	4628      	mov	r0, r5
 80214e6:	bd38      	pop	{r3, r4, r5, pc}
 80214e8:	8993      	ldrh	r3, [r2, #12]
 80214ea:	f023 0320 	bic.w	r3, r3, #32
 80214ee:	8193      	strh	r3, [r2, #12]
 80214f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80214f2:	6852      	ldr	r2, [r2, #4]
 80214f4:	b2cd      	uxtb	r5, r1
 80214f6:	b18b      	cbz	r3, 802151c <_sungetc_r+0x44>
 80214f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80214fa:	4293      	cmp	r3, r2
 80214fc:	dd08      	ble.n	8021510 <_sungetc_r+0x38>
 80214fe:	6823      	ldr	r3, [r4, #0]
 8021500:	1e5a      	subs	r2, r3, #1
 8021502:	6022      	str	r2, [r4, #0]
 8021504:	f803 5c01 	strb.w	r5, [r3, #-1]
 8021508:	6863      	ldr	r3, [r4, #4]
 802150a:	3301      	adds	r3, #1
 802150c:	6063      	str	r3, [r4, #4]
 802150e:	e7e9      	b.n	80214e4 <_sungetc_r+0xc>
 8021510:	4621      	mov	r1, r4
 8021512:	f000 fbbf 	bl	8021c94 <__submore>
 8021516:	2800      	cmp	r0, #0
 8021518:	d0f1      	beq.n	80214fe <_sungetc_r+0x26>
 802151a:	e7e1      	b.n	80214e0 <_sungetc_r+0x8>
 802151c:	6921      	ldr	r1, [r4, #16]
 802151e:	6823      	ldr	r3, [r4, #0]
 8021520:	b151      	cbz	r1, 8021538 <_sungetc_r+0x60>
 8021522:	4299      	cmp	r1, r3
 8021524:	d208      	bcs.n	8021538 <_sungetc_r+0x60>
 8021526:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 802152a:	42a9      	cmp	r1, r5
 802152c:	d104      	bne.n	8021538 <_sungetc_r+0x60>
 802152e:	3b01      	subs	r3, #1
 8021530:	3201      	adds	r2, #1
 8021532:	6023      	str	r3, [r4, #0]
 8021534:	6062      	str	r2, [r4, #4]
 8021536:	e7d5      	b.n	80214e4 <_sungetc_r+0xc>
 8021538:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 802153c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021540:	6363      	str	r3, [r4, #52]	; 0x34
 8021542:	2303      	movs	r3, #3
 8021544:	63a3      	str	r3, [r4, #56]	; 0x38
 8021546:	4623      	mov	r3, r4
 8021548:	f803 5f46 	strb.w	r5, [r3, #70]!
 802154c:	6023      	str	r3, [r4, #0]
 802154e:	2301      	movs	r3, #1
 8021550:	e7dc      	b.n	802150c <_sungetc_r+0x34>

08021552 <__ssrefill_r>:
 8021552:	b510      	push	{r4, lr}
 8021554:	460c      	mov	r4, r1
 8021556:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8021558:	b169      	cbz	r1, 8021576 <__ssrefill_r+0x24>
 802155a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802155e:	4299      	cmp	r1, r3
 8021560:	d001      	beq.n	8021566 <__ssrefill_r+0x14>
 8021562:	f7fd fcd1 	bl	801ef08 <_free_r>
 8021566:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021568:	6063      	str	r3, [r4, #4]
 802156a:	2000      	movs	r0, #0
 802156c:	6360      	str	r0, [r4, #52]	; 0x34
 802156e:	b113      	cbz	r3, 8021576 <__ssrefill_r+0x24>
 8021570:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8021572:	6023      	str	r3, [r4, #0]
 8021574:	bd10      	pop	{r4, pc}
 8021576:	6923      	ldr	r3, [r4, #16]
 8021578:	6023      	str	r3, [r4, #0]
 802157a:	2300      	movs	r3, #0
 802157c:	6063      	str	r3, [r4, #4]
 802157e:	89a3      	ldrh	r3, [r4, #12]
 8021580:	f043 0320 	orr.w	r3, r3, #32
 8021584:	81a3      	strh	r3, [r4, #12]
 8021586:	f04f 30ff 	mov.w	r0, #4294967295
 802158a:	e7f3      	b.n	8021574 <__ssrefill_r+0x22>

0802158c <__ssvfiscanf_r>:
 802158c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021590:	460c      	mov	r4, r1
 8021592:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8021596:	2100      	movs	r1, #0
 8021598:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 802159c:	49b2      	ldr	r1, [pc, #712]	; (8021868 <__ssvfiscanf_r+0x2dc>)
 802159e:	91a0      	str	r1, [sp, #640]	; 0x280
 80215a0:	f10d 0804 	add.w	r8, sp, #4
 80215a4:	49b1      	ldr	r1, [pc, #708]	; (802186c <__ssvfiscanf_r+0x2e0>)
 80215a6:	4fb2      	ldr	r7, [pc, #712]	; (8021870 <__ssvfiscanf_r+0x2e4>)
 80215a8:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8021874 <__ssvfiscanf_r+0x2e8>
 80215ac:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80215b0:	4606      	mov	r6, r0
 80215b2:	91a1      	str	r1, [sp, #644]	; 0x284
 80215b4:	9300      	str	r3, [sp, #0]
 80215b6:	f892 a000 	ldrb.w	sl, [r2]
 80215ba:	f1ba 0f00 	cmp.w	sl, #0
 80215be:	f000 8151 	beq.w	8021864 <__ssvfiscanf_r+0x2d8>
 80215c2:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80215c6:	f013 0308 	ands.w	r3, r3, #8
 80215ca:	f102 0501 	add.w	r5, r2, #1
 80215ce:	d019      	beq.n	8021604 <__ssvfiscanf_r+0x78>
 80215d0:	6863      	ldr	r3, [r4, #4]
 80215d2:	2b00      	cmp	r3, #0
 80215d4:	dd0f      	ble.n	80215f6 <__ssvfiscanf_r+0x6a>
 80215d6:	6823      	ldr	r3, [r4, #0]
 80215d8:	781a      	ldrb	r2, [r3, #0]
 80215da:	5cba      	ldrb	r2, [r7, r2]
 80215dc:	0712      	lsls	r2, r2, #28
 80215de:	d401      	bmi.n	80215e4 <__ssvfiscanf_r+0x58>
 80215e0:	462a      	mov	r2, r5
 80215e2:	e7e8      	b.n	80215b6 <__ssvfiscanf_r+0x2a>
 80215e4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80215e6:	3201      	adds	r2, #1
 80215e8:	9245      	str	r2, [sp, #276]	; 0x114
 80215ea:	6862      	ldr	r2, [r4, #4]
 80215ec:	3301      	adds	r3, #1
 80215ee:	3a01      	subs	r2, #1
 80215f0:	6062      	str	r2, [r4, #4]
 80215f2:	6023      	str	r3, [r4, #0]
 80215f4:	e7ec      	b.n	80215d0 <__ssvfiscanf_r+0x44>
 80215f6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80215f8:	4621      	mov	r1, r4
 80215fa:	4630      	mov	r0, r6
 80215fc:	4798      	blx	r3
 80215fe:	2800      	cmp	r0, #0
 8021600:	d0e9      	beq.n	80215d6 <__ssvfiscanf_r+0x4a>
 8021602:	e7ed      	b.n	80215e0 <__ssvfiscanf_r+0x54>
 8021604:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8021608:	f040 8083 	bne.w	8021712 <__ssvfiscanf_r+0x186>
 802160c:	9341      	str	r3, [sp, #260]	; 0x104
 802160e:	9343      	str	r3, [sp, #268]	; 0x10c
 8021610:	7853      	ldrb	r3, [r2, #1]
 8021612:	2b2a      	cmp	r3, #42	; 0x2a
 8021614:	bf02      	ittt	eq
 8021616:	2310      	moveq	r3, #16
 8021618:	1c95      	addeq	r5, r2, #2
 802161a:	9341      	streq	r3, [sp, #260]	; 0x104
 802161c:	220a      	movs	r2, #10
 802161e:	46ab      	mov	fp, r5
 8021620:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8021624:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8021628:	2b09      	cmp	r3, #9
 802162a:	d91d      	bls.n	8021668 <__ssvfiscanf_r+0xdc>
 802162c:	4891      	ldr	r0, [pc, #580]	; (8021874 <__ssvfiscanf_r+0x2e8>)
 802162e:	2203      	movs	r2, #3
 8021630:	f7de fe16 	bl	8000260 <memchr>
 8021634:	b140      	cbz	r0, 8021648 <__ssvfiscanf_r+0xbc>
 8021636:	2301      	movs	r3, #1
 8021638:	eba0 0009 	sub.w	r0, r0, r9
 802163c:	fa03 f000 	lsl.w	r0, r3, r0
 8021640:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8021642:	4318      	orrs	r0, r3
 8021644:	9041      	str	r0, [sp, #260]	; 0x104
 8021646:	465d      	mov	r5, fp
 8021648:	f815 3b01 	ldrb.w	r3, [r5], #1
 802164c:	2b78      	cmp	r3, #120	; 0x78
 802164e:	d806      	bhi.n	802165e <__ssvfiscanf_r+0xd2>
 8021650:	2b57      	cmp	r3, #87	; 0x57
 8021652:	d810      	bhi.n	8021676 <__ssvfiscanf_r+0xea>
 8021654:	2b25      	cmp	r3, #37	; 0x25
 8021656:	d05c      	beq.n	8021712 <__ssvfiscanf_r+0x186>
 8021658:	d856      	bhi.n	8021708 <__ssvfiscanf_r+0x17c>
 802165a:	2b00      	cmp	r3, #0
 802165c:	d074      	beq.n	8021748 <__ssvfiscanf_r+0x1bc>
 802165e:	2303      	movs	r3, #3
 8021660:	9347      	str	r3, [sp, #284]	; 0x11c
 8021662:	230a      	movs	r3, #10
 8021664:	9342      	str	r3, [sp, #264]	; 0x108
 8021666:	e081      	b.n	802176c <__ssvfiscanf_r+0x1e0>
 8021668:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802166a:	fb02 1303 	mla	r3, r2, r3, r1
 802166e:	3b30      	subs	r3, #48	; 0x30
 8021670:	9343      	str	r3, [sp, #268]	; 0x10c
 8021672:	465d      	mov	r5, fp
 8021674:	e7d3      	b.n	802161e <__ssvfiscanf_r+0x92>
 8021676:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 802167a:	2a20      	cmp	r2, #32
 802167c:	d8ef      	bhi.n	802165e <__ssvfiscanf_r+0xd2>
 802167e:	a101      	add	r1, pc, #4	; (adr r1, 8021684 <__ssvfiscanf_r+0xf8>)
 8021680:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8021684:	08021757 	.word	0x08021757
 8021688:	0802165f 	.word	0x0802165f
 802168c:	0802165f 	.word	0x0802165f
 8021690:	080217b5 	.word	0x080217b5
 8021694:	0802165f 	.word	0x0802165f
 8021698:	0802165f 	.word	0x0802165f
 802169c:	0802165f 	.word	0x0802165f
 80216a0:	0802165f 	.word	0x0802165f
 80216a4:	0802165f 	.word	0x0802165f
 80216a8:	0802165f 	.word	0x0802165f
 80216ac:	0802165f 	.word	0x0802165f
 80216b0:	080217cb 	.word	0x080217cb
 80216b4:	080217a1 	.word	0x080217a1
 80216b8:	0802170f 	.word	0x0802170f
 80216bc:	0802170f 	.word	0x0802170f
 80216c0:	0802170f 	.word	0x0802170f
 80216c4:	0802165f 	.word	0x0802165f
 80216c8:	080217a5 	.word	0x080217a5
 80216cc:	0802165f 	.word	0x0802165f
 80216d0:	0802165f 	.word	0x0802165f
 80216d4:	0802165f 	.word	0x0802165f
 80216d8:	0802165f 	.word	0x0802165f
 80216dc:	080217db 	.word	0x080217db
 80216e0:	080217ad 	.word	0x080217ad
 80216e4:	0802174f 	.word	0x0802174f
 80216e8:	0802165f 	.word	0x0802165f
 80216ec:	0802165f 	.word	0x0802165f
 80216f0:	080217d7 	.word	0x080217d7
 80216f4:	0802165f 	.word	0x0802165f
 80216f8:	080217a1 	.word	0x080217a1
 80216fc:	0802165f 	.word	0x0802165f
 8021700:	0802165f 	.word	0x0802165f
 8021704:	08021757 	.word	0x08021757
 8021708:	3b45      	subs	r3, #69	; 0x45
 802170a:	2b02      	cmp	r3, #2
 802170c:	d8a7      	bhi.n	802165e <__ssvfiscanf_r+0xd2>
 802170e:	2305      	movs	r3, #5
 8021710:	e02b      	b.n	802176a <__ssvfiscanf_r+0x1de>
 8021712:	6863      	ldr	r3, [r4, #4]
 8021714:	2b00      	cmp	r3, #0
 8021716:	dd0d      	ble.n	8021734 <__ssvfiscanf_r+0x1a8>
 8021718:	6823      	ldr	r3, [r4, #0]
 802171a:	781a      	ldrb	r2, [r3, #0]
 802171c:	4552      	cmp	r2, sl
 802171e:	f040 80a1 	bne.w	8021864 <__ssvfiscanf_r+0x2d8>
 8021722:	3301      	adds	r3, #1
 8021724:	6862      	ldr	r2, [r4, #4]
 8021726:	6023      	str	r3, [r4, #0]
 8021728:	9b45      	ldr	r3, [sp, #276]	; 0x114
 802172a:	3a01      	subs	r2, #1
 802172c:	3301      	adds	r3, #1
 802172e:	6062      	str	r2, [r4, #4]
 8021730:	9345      	str	r3, [sp, #276]	; 0x114
 8021732:	e755      	b.n	80215e0 <__ssvfiscanf_r+0x54>
 8021734:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8021736:	4621      	mov	r1, r4
 8021738:	4630      	mov	r0, r6
 802173a:	4798      	blx	r3
 802173c:	2800      	cmp	r0, #0
 802173e:	d0eb      	beq.n	8021718 <__ssvfiscanf_r+0x18c>
 8021740:	9844      	ldr	r0, [sp, #272]	; 0x110
 8021742:	2800      	cmp	r0, #0
 8021744:	f040 8084 	bne.w	8021850 <__ssvfiscanf_r+0x2c4>
 8021748:	f04f 30ff 	mov.w	r0, #4294967295
 802174c:	e086      	b.n	802185c <__ssvfiscanf_r+0x2d0>
 802174e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8021750:	f042 0220 	orr.w	r2, r2, #32
 8021754:	9241      	str	r2, [sp, #260]	; 0x104
 8021756:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8021758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802175c:	9241      	str	r2, [sp, #260]	; 0x104
 802175e:	2210      	movs	r2, #16
 8021760:	2b6f      	cmp	r3, #111	; 0x6f
 8021762:	9242      	str	r2, [sp, #264]	; 0x108
 8021764:	bf34      	ite	cc
 8021766:	2303      	movcc	r3, #3
 8021768:	2304      	movcs	r3, #4
 802176a:	9347      	str	r3, [sp, #284]	; 0x11c
 802176c:	6863      	ldr	r3, [r4, #4]
 802176e:	2b00      	cmp	r3, #0
 8021770:	dd41      	ble.n	80217f6 <__ssvfiscanf_r+0x26a>
 8021772:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8021774:	0659      	lsls	r1, r3, #25
 8021776:	d404      	bmi.n	8021782 <__ssvfiscanf_r+0x1f6>
 8021778:	6823      	ldr	r3, [r4, #0]
 802177a:	781a      	ldrb	r2, [r3, #0]
 802177c:	5cba      	ldrb	r2, [r7, r2]
 802177e:	0712      	lsls	r2, r2, #28
 8021780:	d440      	bmi.n	8021804 <__ssvfiscanf_r+0x278>
 8021782:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8021784:	2b02      	cmp	r3, #2
 8021786:	dc4f      	bgt.n	8021828 <__ssvfiscanf_r+0x29c>
 8021788:	466b      	mov	r3, sp
 802178a:	4622      	mov	r2, r4
 802178c:	a941      	add	r1, sp, #260	; 0x104
 802178e:	4630      	mov	r0, r6
 8021790:	f000 f874 	bl	802187c <_scanf_chars>
 8021794:	2801      	cmp	r0, #1
 8021796:	d065      	beq.n	8021864 <__ssvfiscanf_r+0x2d8>
 8021798:	2802      	cmp	r0, #2
 802179a:	f47f af21 	bne.w	80215e0 <__ssvfiscanf_r+0x54>
 802179e:	e7cf      	b.n	8021740 <__ssvfiscanf_r+0x1b4>
 80217a0:	220a      	movs	r2, #10
 80217a2:	e7dd      	b.n	8021760 <__ssvfiscanf_r+0x1d4>
 80217a4:	2300      	movs	r3, #0
 80217a6:	9342      	str	r3, [sp, #264]	; 0x108
 80217a8:	2303      	movs	r3, #3
 80217aa:	e7de      	b.n	802176a <__ssvfiscanf_r+0x1de>
 80217ac:	2308      	movs	r3, #8
 80217ae:	9342      	str	r3, [sp, #264]	; 0x108
 80217b0:	2304      	movs	r3, #4
 80217b2:	e7da      	b.n	802176a <__ssvfiscanf_r+0x1de>
 80217b4:	4629      	mov	r1, r5
 80217b6:	4640      	mov	r0, r8
 80217b8:	f000 f9ac 	bl	8021b14 <__sccl>
 80217bc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80217be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80217c2:	9341      	str	r3, [sp, #260]	; 0x104
 80217c4:	4605      	mov	r5, r0
 80217c6:	2301      	movs	r3, #1
 80217c8:	e7cf      	b.n	802176a <__ssvfiscanf_r+0x1de>
 80217ca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80217cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80217d0:	9341      	str	r3, [sp, #260]	; 0x104
 80217d2:	2300      	movs	r3, #0
 80217d4:	e7c9      	b.n	802176a <__ssvfiscanf_r+0x1de>
 80217d6:	2302      	movs	r3, #2
 80217d8:	e7c7      	b.n	802176a <__ssvfiscanf_r+0x1de>
 80217da:	9841      	ldr	r0, [sp, #260]	; 0x104
 80217dc:	06c3      	lsls	r3, r0, #27
 80217de:	f53f aeff 	bmi.w	80215e0 <__ssvfiscanf_r+0x54>
 80217e2:	9b00      	ldr	r3, [sp, #0]
 80217e4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80217e6:	1d19      	adds	r1, r3, #4
 80217e8:	9100      	str	r1, [sp, #0]
 80217ea:	681b      	ldr	r3, [r3, #0]
 80217ec:	07c0      	lsls	r0, r0, #31
 80217ee:	bf4c      	ite	mi
 80217f0:	801a      	strhmi	r2, [r3, #0]
 80217f2:	601a      	strpl	r2, [r3, #0]
 80217f4:	e6f4      	b.n	80215e0 <__ssvfiscanf_r+0x54>
 80217f6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80217f8:	4621      	mov	r1, r4
 80217fa:	4630      	mov	r0, r6
 80217fc:	4798      	blx	r3
 80217fe:	2800      	cmp	r0, #0
 8021800:	d0b7      	beq.n	8021772 <__ssvfiscanf_r+0x1e6>
 8021802:	e79d      	b.n	8021740 <__ssvfiscanf_r+0x1b4>
 8021804:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8021806:	3201      	adds	r2, #1
 8021808:	9245      	str	r2, [sp, #276]	; 0x114
 802180a:	6862      	ldr	r2, [r4, #4]
 802180c:	3a01      	subs	r2, #1
 802180e:	2a00      	cmp	r2, #0
 8021810:	6062      	str	r2, [r4, #4]
 8021812:	dd02      	ble.n	802181a <__ssvfiscanf_r+0x28e>
 8021814:	3301      	adds	r3, #1
 8021816:	6023      	str	r3, [r4, #0]
 8021818:	e7ae      	b.n	8021778 <__ssvfiscanf_r+0x1ec>
 802181a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802181c:	4621      	mov	r1, r4
 802181e:	4630      	mov	r0, r6
 8021820:	4798      	blx	r3
 8021822:	2800      	cmp	r0, #0
 8021824:	d0a8      	beq.n	8021778 <__ssvfiscanf_r+0x1ec>
 8021826:	e78b      	b.n	8021740 <__ssvfiscanf_r+0x1b4>
 8021828:	2b04      	cmp	r3, #4
 802182a:	dc06      	bgt.n	802183a <__ssvfiscanf_r+0x2ae>
 802182c:	466b      	mov	r3, sp
 802182e:	4622      	mov	r2, r4
 8021830:	a941      	add	r1, sp, #260	; 0x104
 8021832:	4630      	mov	r0, r6
 8021834:	f000 f87a 	bl	802192c <_scanf_i>
 8021838:	e7ac      	b.n	8021794 <__ssvfiscanf_r+0x208>
 802183a:	4b0f      	ldr	r3, [pc, #60]	; (8021878 <__ssvfiscanf_r+0x2ec>)
 802183c:	2b00      	cmp	r3, #0
 802183e:	f43f aecf 	beq.w	80215e0 <__ssvfiscanf_r+0x54>
 8021842:	466b      	mov	r3, sp
 8021844:	4622      	mov	r2, r4
 8021846:	a941      	add	r1, sp, #260	; 0x104
 8021848:	4630      	mov	r0, r6
 802184a:	f3af 8000 	nop.w
 802184e:	e7a1      	b.n	8021794 <__ssvfiscanf_r+0x208>
 8021850:	89a3      	ldrh	r3, [r4, #12]
 8021852:	f013 0f40 	tst.w	r3, #64	; 0x40
 8021856:	bf18      	it	ne
 8021858:	f04f 30ff 	movne.w	r0, #4294967295
 802185c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8021860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021864:	9844      	ldr	r0, [sp, #272]	; 0x110
 8021866:	e7f9      	b.n	802185c <__ssvfiscanf_r+0x2d0>
 8021868:	080214d9 	.word	0x080214d9
 802186c:	08021553 	.word	0x08021553
 8021870:	08027869 	.word	0x08027869
 8021874:	08027979 	.word	0x08027979
 8021878:	00000000 	.word	0x00000000

0802187c <_scanf_chars>:
 802187c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021880:	4615      	mov	r5, r2
 8021882:	688a      	ldr	r2, [r1, #8]
 8021884:	4680      	mov	r8, r0
 8021886:	460c      	mov	r4, r1
 8021888:	b932      	cbnz	r2, 8021898 <_scanf_chars+0x1c>
 802188a:	698a      	ldr	r2, [r1, #24]
 802188c:	2a00      	cmp	r2, #0
 802188e:	bf0c      	ite	eq
 8021890:	2201      	moveq	r2, #1
 8021892:	f04f 32ff 	movne.w	r2, #4294967295
 8021896:	608a      	str	r2, [r1, #8]
 8021898:	6822      	ldr	r2, [r4, #0]
 802189a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8021928 <_scanf_chars+0xac>
 802189e:	06d1      	lsls	r1, r2, #27
 80218a0:	bf5f      	itttt	pl
 80218a2:	681a      	ldrpl	r2, [r3, #0]
 80218a4:	1d11      	addpl	r1, r2, #4
 80218a6:	6019      	strpl	r1, [r3, #0]
 80218a8:	6816      	ldrpl	r6, [r2, #0]
 80218aa:	2700      	movs	r7, #0
 80218ac:	69a0      	ldr	r0, [r4, #24]
 80218ae:	b188      	cbz	r0, 80218d4 <_scanf_chars+0x58>
 80218b0:	2801      	cmp	r0, #1
 80218b2:	d107      	bne.n	80218c4 <_scanf_chars+0x48>
 80218b4:	682b      	ldr	r3, [r5, #0]
 80218b6:	781a      	ldrb	r2, [r3, #0]
 80218b8:	6963      	ldr	r3, [r4, #20]
 80218ba:	5c9b      	ldrb	r3, [r3, r2]
 80218bc:	b953      	cbnz	r3, 80218d4 <_scanf_chars+0x58>
 80218be:	bb27      	cbnz	r7, 802190a <_scanf_chars+0x8e>
 80218c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80218c4:	2802      	cmp	r0, #2
 80218c6:	d120      	bne.n	802190a <_scanf_chars+0x8e>
 80218c8:	682b      	ldr	r3, [r5, #0]
 80218ca:	781b      	ldrb	r3, [r3, #0]
 80218cc:	f813 3009 	ldrb.w	r3, [r3, r9]
 80218d0:	071b      	lsls	r3, r3, #28
 80218d2:	d41a      	bmi.n	802190a <_scanf_chars+0x8e>
 80218d4:	6823      	ldr	r3, [r4, #0]
 80218d6:	06da      	lsls	r2, r3, #27
 80218d8:	bf5e      	ittt	pl
 80218da:	682b      	ldrpl	r3, [r5, #0]
 80218dc:	781b      	ldrbpl	r3, [r3, #0]
 80218de:	f806 3b01 	strbpl.w	r3, [r6], #1
 80218e2:	682a      	ldr	r2, [r5, #0]
 80218e4:	686b      	ldr	r3, [r5, #4]
 80218e6:	3201      	adds	r2, #1
 80218e8:	602a      	str	r2, [r5, #0]
 80218ea:	68a2      	ldr	r2, [r4, #8]
 80218ec:	3b01      	subs	r3, #1
 80218ee:	3a01      	subs	r2, #1
 80218f0:	606b      	str	r3, [r5, #4]
 80218f2:	3701      	adds	r7, #1
 80218f4:	60a2      	str	r2, [r4, #8]
 80218f6:	b142      	cbz	r2, 802190a <_scanf_chars+0x8e>
 80218f8:	2b00      	cmp	r3, #0
 80218fa:	dcd7      	bgt.n	80218ac <_scanf_chars+0x30>
 80218fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8021900:	4629      	mov	r1, r5
 8021902:	4640      	mov	r0, r8
 8021904:	4798      	blx	r3
 8021906:	2800      	cmp	r0, #0
 8021908:	d0d0      	beq.n	80218ac <_scanf_chars+0x30>
 802190a:	6823      	ldr	r3, [r4, #0]
 802190c:	f013 0310 	ands.w	r3, r3, #16
 8021910:	d105      	bne.n	802191e <_scanf_chars+0xa2>
 8021912:	68e2      	ldr	r2, [r4, #12]
 8021914:	3201      	adds	r2, #1
 8021916:	60e2      	str	r2, [r4, #12]
 8021918:	69a2      	ldr	r2, [r4, #24]
 802191a:	b102      	cbz	r2, 802191e <_scanf_chars+0xa2>
 802191c:	7033      	strb	r3, [r6, #0]
 802191e:	6923      	ldr	r3, [r4, #16]
 8021920:	441f      	add	r7, r3
 8021922:	6127      	str	r7, [r4, #16]
 8021924:	2000      	movs	r0, #0
 8021926:	e7cb      	b.n	80218c0 <_scanf_chars+0x44>
 8021928:	08027869 	.word	0x08027869

0802192c <_scanf_i>:
 802192c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021930:	4698      	mov	r8, r3
 8021932:	4b74      	ldr	r3, [pc, #464]	; (8021b04 <_scanf_i+0x1d8>)
 8021934:	460c      	mov	r4, r1
 8021936:	4682      	mov	sl, r0
 8021938:	4616      	mov	r6, r2
 802193a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802193e:	b087      	sub	sp, #28
 8021940:	ab03      	add	r3, sp, #12
 8021942:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8021946:	4b70      	ldr	r3, [pc, #448]	; (8021b08 <_scanf_i+0x1dc>)
 8021948:	69a1      	ldr	r1, [r4, #24]
 802194a:	4a70      	ldr	r2, [pc, #448]	; (8021b0c <_scanf_i+0x1e0>)
 802194c:	2903      	cmp	r1, #3
 802194e:	bf18      	it	ne
 8021950:	461a      	movne	r2, r3
 8021952:	68a3      	ldr	r3, [r4, #8]
 8021954:	9201      	str	r2, [sp, #4]
 8021956:	1e5a      	subs	r2, r3, #1
 8021958:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 802195c:	bf88      	it	hi
 802195e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8021962:	4627      	mov	r7, r4
 8021964:	bf82      	ittt	hi
 8021966:	eb03 0905 	addhi.w	r9, r3, r5
 802196a:	f240 135d 	movwhi	r3, #349	; 0x15d
 802196e:	60a3      	strhi	r3, [r4, #8]
 8021970:	f857 3b1c 	ldr.w	r3, [r7], #28
 8021974:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8021978:	bf98      	it	ls
 802197a:	f04f 0900 	movls.w	r9, #0
 802197e:	6023      	str	r3, [r4, #0]
 8021980:	463d      	mov	r5, r7
 8021982:	f04f 0b00 	mov.w	fp, #0
 8021986:	6831      	ldr	r1, [r6, #0]
 8021988:	ab03      	add	r3, sp, #12
 802198a:	7809      	ldrb	r1, [r1, #0]
 802198c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8021990:	2202      	movs	r2, #2
 8021992:	f7de fc65 	bl	8000260 <memchr>
 8021996:	b328      	cbz	r0, 80219e4 <_scanf_i+0xb8>
 8021998:	f1bb 0f01 	cmp.w	fp, #1
 802199c:	d159      	bne.n	8021a52 <_scanf_i+0x126>
 802199e:	6862      	ldr	r2, [r4, #4]
 80219a0:	b92a      	cbnz	r2, 80219ae <_scanf_i+0x82>
 80219a2:	6822      	ldr	r2, [r4, #0]
 80219a4:	2308      	movs	r3, #8
 80219a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80219aa:	6063      	str	r3, [r4, #4]
 80219ac:	6022      	str	r2, [r4, #0]
 80219ae:	6822      	ldr	r2, [r4, #0]
 80219b0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80219b4:	6022      	str	r2, [r4, #0]
 80219b6:	68a2      	ldr	r2, [r4, #8]
 80219b8:	1e51      	subs	r1, r2, #1
 80219ba:	60a1      	str	r1, [r4, #8]
 80219bc:	b192      	cbz	r2, 80219e4 <_scanf_i+0xb8>
 80219be:	6832      	ldr	r2, [r6, #0]
 80219c0:	1c51      	adds	r1, r2, #1
 80219c2:	6031      	str	r1, [r6, #0]
 80219c4:	7812      	ldrb	r2, [r2, #0]
 80219c6:	f805 2b01 	strb.w	r2, [r5], #1
 80219ca:	6872      	ldr	r2, [r6, #4]
 80219cc:	3a01      	subs	r2, #1
 80219ce:	2a00      	cmp	r2, #0
 80219d0:	6072      	str	r2, [r6, #4]
 80219d2:	dc07      	bgt.n	80219e4 <_scanf_i+0xb8>
 80219d4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80219d8:	4631      	mov	r1, r6
 80219da:	4650      	mov	r0, sl
 80219dc:	4790      	blx	r2
 80219de:	2800      	cmp	r0, #0
 80219e0:	f040 8085 	bne.w	8021aee <_scanf_i+0x1c2>
 80219e4:	f10b 0b01 	add.w	fp, fp, #1
 80219e8:	f1bb 0f03 	cmp.w	fp, #3
 80219ec:	d1cb      	bne.n	8021986 <_scanf_i+0x5a>
 80219ee:	6863      	ldr	r3, [r4, #4]
 80219f0:	b90b      	cbnz	r3, 80219f6 <_scanf_i+0xca>
 80219f2:	230a      	movs	r3, #10
 80219f4:	6063      	str	r3, [r4, #4]
 80219f6:	6863      	ldr	r3, [r4, #4]
 80219f8:	4945      	ldr	r1, [pc, #276]	; (8021b10 <_scanf_i+0x1e4>)
 80219fa:	6960      	ldr	r0, [r4, #20]
 80219fc:	1ac9      	subs	r1, r1, r3
 80219fe:	f000 f889 	bl	8021b14 <__sccl>
 8021a02:	f04f 0b00 	mov.w	fp, #0
 8021a06:	68a3      	ldr	r3, [r4, #8]
 8021a08:	6822      	ldr	r2, [r4, #0]
 8021a0a:	2b00      	cmp	r3, #0
 8021a0c:	d03d      	beq.n	8021a8a <_scanf_i+0x15e>
 8021a0e:	6831      	ldr	r1, [r6, #0]
 8021a10:	6960      	ldr	r0, [r4, #20]
 8021a12:	f891 c000 	ldrb.w	ip, [r1]
 8021a16:	f810 000c 	ldrb.w	r0, [r0, ip]
 8021a1a:	2800      	cmp	r0, #0
 8021a1c:	d035      	beq.n	8021a8a <_scanf_i+0x15e>
 8021a1e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8021a22:	d124      	bne.n	8021a6e <_scanf_i+0x142>
 8021a24:	0510      	lsls	r0, r2, #20
 8021a26:	d522      	bpl.n	8021a6e <_scanf_i+0x142>
 8021a28:	f10b 0b01 	add.w	fp, fp, #1
 8021a2c:	f1b9 0f00 	cmp.w	r9, #0
 8021a30:	d003      	beq.n	8021a3a <_scanf_i+0x10e>
 8021a32:	3301      	adds	r3, #1
 8021a34:	f109 39ff 	add.w	r9, r9, #4294967295
 8021a38:	60a3      	str	r3, [r4, #8]
 8021a3a:	6873      	ldr	r3, [r6, #4]
 8021a3c:	3b01      	subs	r3, #1
 8021a3e:	2b00      	cmp	r3, #0
 8021a40:	6073      	str	r3, [r6, #4]
 8021a42:	dd1b      	ble.n	8021a7c <_scanf_i+0x150>
 8021a44:	6833      	ldr	r3, [r6, #0]
 8021a46:	3301      	adds	r3, #1
 8021a48:	6033      	str	r3, [r6, #0]
 8021a4a:	68a3      	ldr	r3, [r4, #8]
 8021a4c:	3b01      	subs	r3, #1
 8021a4e:	60a3      	str	r3, [r4, #8]
 8021a50:	e7d9      	b.n	8021a06 <_scanf_i+0xda>
 8021a52:	f1bb 0f02 	cmp.w	fp, #2
 8021a56:	d1ae      	bne.n	80219b6 <_scanf_i+0x8a>
 8021a58:	6822      	ldr	r2, [r4, #0]
 8021a5a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8021a5e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8021a62:	d1bf      	bne.n	80219e4 <_scanf_i+0xb8>
 8021a64:	2310      	movs	r3, #16
 8021a66:	6063      	str	r3, [r4, #4]
 8021a68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8021a6c:	e7a2      	b.n	80219b4 <_scanf_i+0x88>
 8021a6e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8021a72:	6022      	str	r2, [r4, #0]
 8021a74:	780b      	ldrb	r3, [r1, #0]
 8021a76:	f805 3b01 	strb.w	r3, [r5], #1
 8021a7a:	e7de      	b.n	8021a3a <_scanf_i+0x10e>
 8021a7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8021a80:	4631      	mov	r1, r6
 8021a82:	4650      	mov	r0, sl
 8021a84:	4798      	blx	r3
 8021a86:	2800      	cmp	r0, #0
 8021a88:	d0df      	beq.n	8021a4a <_scanf_i+0x11e>
 8021a8a:	6823      	ldr	r3, [r4, #0]
 8021a8c:	05d9      	lsls	r1, r3, #23
 8021a8e:	d50d      	bpl.n	8021aac <_scanf_i+0x180>
 8021a90:	42bd      	cmp	r5, r7
 8021a92:	d909      	bls.n	8021aa8 <_scanf_i+0x17c>
 8021a94:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8021a98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8021a9c:	4632      	mov	r2, r6
 8021a9e:	4650      	mov	r0, sl
 8021aa0:	4798      	blx	r3
 8021aa2:	f105 39ff 	add.w	r9, r5, #4294967295
 8021aa6:	464d      	mov	r5, r9
 8021aa8:	42bd      	cmp	r5, r7
 8021aaa:	d028      	beq.n	8021afe <_scanf_i+0x1d2>
 8021aac:	6822      	ldr	r2, [r4, #0]
 8021aae:	f012 0210 	ands.w	r2, r2, #16
 8021ab2:	d113      	bne.n	8021adc <_scanf_i+0x1b0>
 8021ab4:	702a      	strb	r2, [r5, #0]
 8021ab6:	6863      	ldr	r3, [r4, #4]
 8021ab8:	9e01      	ldr	r6, [sp, #4]
 8021aba:	4639      	mov	r1, r7
 8021abc:	4650      	mov	r0, sl
 8021abe:	47b0      	blx	r6
 8021ac0:	f8d8 3000 	ldr.w	r3, [r8]
 8021ac4:	6821      	ldr	r1, [r4, #0]
 8021ac6:	1d1a      	adds	r2, r3, #4
 8021ac8:	f8c8 2000 	str.w	r2, [r8]
 8021acc:	f011 0f20 	tst.w	r1, #32
 8021ad0:	681b      	ldr	r3, [r3, #0]
 8021ad2:	d00f      	beq.n	8021af4 <_scanf_i+0x1c8>
 8021ad4:	6018      	str	r0, [r3, #0]
 8021ad6:	68e3      	ldr	r3, [r4, #12]
 8021ad8:	3301      	adds	r3, #1
 8021ada:	60e3      	str	r3, [r4, #12]
 8021adc:	1bed      	subs	r5, r5, r7
 8021ade:	44ab      	add	fp, r5
 8021ae0:	6925      	ldr	r5, [r4, #16]
 8021ae2:	445d      	add	r5, fp
 8021ae4:	6125      	str	r5, [r4, #16]
 8021ae6:	2000      	movs	r0, #0
 8021ae8:	b007      	add	sp, #28
 8021aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021aee:	f04f 0b00 	mov.w	fp, #0
 8021af2:	e7ca      	b.n	8021a8a <_scanf_i+0x15e>
 8021af4:	07ca      	lsls	r2, r1, #31
 8021af6:	bf4c      	ite	mi
 8021af8:	8018      	strhmi	r0, [r3, #0]
 8021afa:	6018      	strpl	r0, [r3, #0]
 8021afc:	e7eb      	b.n	8021ad6 <_scanf_i+0x1aa>
 8021afe:	2001      	movs	r0, #1
 8021b00:	e7f2      	b.n	8021ae8 <_scanf_i+0x1bc>
 8021b02:	bf00      	nop
 8021b04:	08024e90 	.word	0x08024e90
 8021b08:	0801feed 	.word	0x0801feed
 8021b0c:	08021c91 	.word	0x08021c91
 8021b10:	080279bf 	.word	0x080279bf

08021b14 <__sccl>:
 8021b14:	b570      	push	{r4, r5, r6, lr}
 8021b16:	780b      	ldrb	r3, [r1, #0]
 8021b18:	4604      	mov	r4, r0
 8021b1a:	2b5e      	cmp	r3, #94	; 0x5e
 8021b1c:	bf0b      	itete	eq
 8021b1e:	784b      	ldrbeq	r3, [r1, #1]
 8021b20:	1c48      	addne	r0, r1, #1
 8021b22:	1c88      	addeq	r0, r1, #2
 8021b24:	2200      	movne	r2, #0
 8021b26:	bf08      	it	eq
 8021b28:	2201      	moveq	r2, #1
 8021b2a:	1e61      	subs	r1, r4, #1
 8021b2c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8021b30:	f801 2f01 	strb.w	r2, [r1, #1]!
 8021b34:	42a9      	cmp	r1, r5
 8021b36:	d1fb      	bne.n	8021b30 <__sccl+0x1c>
 8021b38:	b90b      	cbnz	r3, 8021b3e <__sccl+0x2a>
 8021b3a:	3801      	subs	r0, #1
 8021b3c:	bd70      	pop	{r4, r5, r6, pc}
 8021b3e:	f082 0101 	eor.w	r1, r2, #1
 8021b42:	54e1      	strb	r1, [r4, r3]
 8021b44:	1c42      	adds	r2, r0, #1
 8021b46:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8021b4a:	2d2d      	cmp	r5, #45	; 0x2d
 8021b4c:	f102 36ff 	add.w	r6, r2, #4294967295
 8021b50:	4610      	mov	r0, r2
 8021b52:	d006      	beq.n	8021b62 <__sccl+0x4e>
 8021b54:	2d5d      	cmp	r5, #93	; 0x5d
 8021b56:	d0f1      	beq.n	8021b3c <__sccl+0x28>
 8021b58:	b90d      	cbnz	r5, 8021b5e <__sccl+0x4a>
 8021b5a:	4630      	mov	r0, r6
 8021b5c:	e7ee      	b.n	8021b3c <__sccl+0x28>
 8021b5e:	462b      	mov	r3, r5
 8021b60:	e7ef      	b.n	8021b42 <__sccl+0x2e>
 8021b62:	7816      	ldrb	r6, [r2, #0]
 8021b64:	2e5d      	cmp	r6, #93	; 0x5d
 8021b66:	d0fa      	beq.n	8021b5e <__sccl+0x4a>
 8021b68:	42b3      	cmp	r3, r6
 8021b6a:	dcf8      	bgt.n	8021b5e <__sccl+0x4a>
 8021b6c:	4618      	mov	r0, r3
 8021b6e:	3001      	adds	r0, #1
 8021b70:	4286      	cmp	r6, r0
 8021b72:	5421      	strb	r1, [r4, r0]
 8021b74:	dcfb      	bgt.n	8021b6e <__sccl+0x5a>
 8021b76:	43d8      	mvns	r0, r3
 8021b78:	4430      	add	r0, r6
 8021b7a:	1c5d      	adds	r5, r3, #1
 8021b7c:	42b3      	cmp	r3, r6
 8021b7e:	bfa8      	it	ge
 8021b80:	2000      	movge	r0, #0
 8021b82:	182b      	adds	r3, r5, r0
 8021b84:	3202      	adds	r2, #2
 8021b86:	e7de      	b.n	8021b46 <__sccl+0x32>

08021b88 <_strtol_l.isra.0>:
 8021b88:	2b01      	cmp	r3, #1
 8021b8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021b8e:	d001      	beq.n	8021b94 <_strtol_l.isra.0+0xc>
 8021b90:	2b24      	cmp	r3, #36	; 0x24
 8021b92:	d906      	bls.n	8021ba2 <_strtol_l.isra.0+0x1a>
 8021b94:	f7fc fbc2 	bl	801e31c <__errno>
 8021b98:	2316      	movs	r3, #22
 8021b9a:	6003      	str	r3, [r0, #0]
 8021b9c:	2000      	movs	r0, #0
 8021b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021ba2:	4f3a      	ldr	r7, [pc, #232]	; (8021c8c <_strtol_l.isra.0+0x104>)
 8021ba4:	468e      	mov	lr, r1
 8021ba6:	4676      	mov	r6, lr
 8021ba8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8021bac:	5de5      	ldrb	r5, [r4, r7]
 8021bae:	f015 0508 	ands.w	r5, r5, #8
 8021bb2:	d1f8      	bne.n	8021ba6 <_strtol_l.isra.0+0x1e>
 8021bb4:	2c2d      	cmp	r4, #45	; 0x2d
 8021bb6:	d134      	bne.n	8021c22 <_strtol_l.isra.0+0x9a>
 8021bb8:	f89e 4000 	ldrb.w	r4, [lr]
 8021bbc:	f04f 0801 	mov.w	r8, #1
 8021bc0:	f106 0e02 	add.w	lr, r6, #2
 8021bc4:	2b00      	cmp	r3, #0
 8021bc6:	d05c      	beq.n	8021c82 <_strtol_l.isra.0+0xfa>
 8021bc8:	2b10      	cmp	r3, #16
 8021bca:	d10c      	bne.n	8021be6 <_strtol_l.isra.0+0x5e>
 8021bcc:	2c30      	cmp	r4, #48	; 0x30
 8021bce:	d10a      	bne.n	8021be6 <_strtol_l.isra.0+0x5e>
 8021bd0:	f89e 4000 	ldrb.w	r4, [lr]
 8021bd4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8021bd8:	2c58      	cmp	r4, #88	; 0x58
 8021bda:	d14d      	bne.n	8021c78 <_strtol_l.isra.0+0xf0>
 8021bdc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8021be0:	2310      	movs	r3, #16
 8021be2:	f10e 0e02 	add.w	lr, lr, #2
 8021be6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8021bea:	f10c 3cff 	add.w	ip, ip, #4294967295
 8021bee:	2600      	movs	r6, #0
 8021bf0:	fbbc f9f3 	udiv	r9, ip, r3
 8021bf4:	4635      	mov	r5, r6
 8021bf6:	fb03 ca19 	mls	sl, r3, r9, ip
 8021bfa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8021bfe:	2f09      	cmp	r7, #9
 8021c00:	d818      	bhi.n	8021c34 <_strtol_l.isra.0+0xac>
 8021c02:	463c      	mov	r4, r7
 8021c04:	42a3      	cmp	r3, r4
 8021c06:	dd24      	ble.n	8021c52 <_strtol_l.isra.0+0xca>
 8021c08:	2e00      	cmp	r6, #0
 8021c0a:	db1f      	blt.n	8021c4c <_strtol_l.isra.0+0xc4>
 8021c0c:	45a9      	cmp	r9, r5
 8021c0e:	d31d      	bcc.n	8021c4c <_strtol_l.isra.0+0xc4>
 8021c10:	d101      	bne.n	8021c16 <_strtol_l.isra.0+0x8e>
 8021c12:	45a2      	cmp	sl, r4
 8021c14:	db1a      	blt.n	8021c4c <_strtol_l.isra.0+0xc4>
 8021c16:	fb05 4503 	mla	r5, r5, r3, r4
 8021c1a:	2601      	movs	r6, #1
 8021c1c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8021c20:	e7eb      	b.n	8021bfa <_strtol_l.isra.0+0x72>
 8021c22:	2c2b      	cmp	r4, #43	; 0x2b
 8021c24:	bf08      	it	eq
 8021c26:	f89e 4000 	ldrbeq.w	r4, [lr]
 8021c2a:	46a8      	mov	r8, r5
 8021c2c:	bf08      	it	eq
 8021c2e:	f106 0e02 	addeq.w	lr, r6, #2
 8021c32:	e7c7      	b.n	8021bc4 <_strtol_l.isra.0+0x3c>
 8021c34:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8021c38:	2f19      	cmp	r7, #25
 8021c3a:	d801      	bhi.n	8021c40 <_strtol_l.isra.0+0xb8>
 8021c3c:	3c37      	subs	r4, #55	; 0x37
 8021c3e:	e7e1      	b.n	8021c04 <_strtol_l.isra.0+0x7c>
 8021c40:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8021c44:	2f19      	cmp	r7, #25
 8021c46:	d804      	bhi.n	8021c52 <_strtol_l.isra.0+0xca>
 8021c48:	3c57      	subs	r4, #87	; 0x57
 8021c4a:	e7db      	b.n	8021c04 <_strtol_l.isra.0+0x7c>
 8021c4c:	f04f 36ff 	mov.w	r6, #4294967295
 8021c50:	e7e4      	b.n	8021c1c <_strtol_l.isra.0+0x94>
 8021c52:	2e00      	cmp	r6, #0
 8021c54:	da05      	bge.n	8021c62 <_strtol_l.isra.0+0xda>
 8021c56:	2322      	movs	r3, #34	; 0x22
 8021c58:	6003      	str	r3, [r0, #0]
 8021c5a:	4665      	mov	r5, ip
 8021c5c:	b942      	cbnz	r2, 8021c70 <_strtol_l.isra.0+0xe8>
 8021c5e:	4628      	mov	r0, r5
 8021c60:	e79d      	b.n	8021b9e <_strtol_l.isra.0+0x16>
 8021c62:	f1b8 0f00 	cmp.w	r8, #0
 8021c66:	d000      	beq.n	8021c6a <_strtol_l.isra.0+0xe2>
 8021c68:	426d      	negs	r5, r5
 8021c6a:	2a00      	cmp	r2, #0
 8021c6c:	d0f7      	beq.n	8021c5e <_strtol_l.isra.0+0xd6>
 8021c6e:	b10e      	cbz	r6, 8021c74 <_strtol_l.isra.0+0xec>
 8021c70:	f10e 31ff 	add.w	r1, lr, #4294967295
 8021c74:	6011      	str	r1, [r2, #0]
 8021c76:	e7f2      	b.n	8021c5e <_strtol_l.isra.0+0xd6>
 8021c78:	2430      	movs	r4, #48	; 0x30
 8021c7a:	2b00      	cmp	r3, #0
 8021c7c:	d1b3      	bne.n	8021be6 <_strtol_l.isra.0+0x5e>
 8021c7e:	2308      	movs	r3, #8
 8021c80:	e7b1      	b.n	8021be6 <_strtol_l.isra.0+0x5e>
 8021c82:	2c30      	cmp	r4, #48	; 0x30
 8021c84:	d0a4      	beq.n	8021bd0 <_strtol_l.isra.0+0x48>
 8021c86:	230a      	movs	r3, #10
 8021c88:	e7ad      	b.n	8021be6 <_strtol_l.isra.0+0x5e>
 8021c8a:	bf00      	nop
 8021c8c:	08027869 	.word	0x08027869

08021c90 <_strtol_r>:
 8021c90:	f7ff bf7a 	b.w	8021b88 <_strtol_l.isra.0>

08021c94 <__submore>:
 8021c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021c98:	460c      	mov	r4, r1
 8021c9a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8021c9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021ca0:	4299      	cmp	r1, r3
 8021ca2:	d11d      	bne.n	8021ce0 <__submore+0x4c>
 8021ca4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8021ca8:	f7fd f97e 	bl	801efa8 <_malloc_r>
 8021cac:	b918      	cbnz	r0, 8021cb6 <__submore+0x22>
 8021cae:	f04f 30ff 	mov.w	r0, #4294967295
 8021cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021cb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021cba:	63a3      	str	r3, [r4, #56]	; 0x38
 8021cbc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8021cc0:	6360      	str	r0, [r4, #52]	; 0x34
 8021cc2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8021cc6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8021cca:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8021cce:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8021cd2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8021cd6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8021cda:	6020      	str	r0, [r4, #0]
 8021cdc:	2000      	movs	r0, #0
 8021cde:	e7e8      	b.n	8021cb2 <__submore+0x1e>
 8021ce0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8021ce2:	0077      	lsls	r7, r6, #1
 8021ce4:	463a      	mov	r2, r7
 8021ce6:	f7fe fe77 	bl	80209d8 <_realloc_r>
 8021cea:	4605      	mov	r5, r0
 8021cec:	2800      	cmp	r0, #0
 8021cee:	d0de      	beq.n	8021cae <__submore+0x1a>
 8021cf0:	eb00 0806 	add.w	r8, r0, r6
 8021cf4:	4601      	mov	r1, r0
 8021cf6:	4632      	mov	r2, r6
 8021cf8:	4640      	mov	r0, r8
 8021cfa:	f7fd f8df 	bl	801eebc <memcpy>
 8021cfe:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8021d02:	f8c4 8000 	str.w	r8, [r4]
 8021d06:	e7e9      	b.n	8021cdc <__submore+0x48>

08021d08 <_init>:
 8021d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021d0a:	bf00      	nop
 8021d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021d0e:	bc08      	pop	{r3}
 8021d10:	469e      	mov	lr, r3
 8021d12:	4770      	bx	lr

08021d14 <_fini>:
 8021d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021d16:	bf00      	nop
 8021d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021d1a:	bc08      	pop	{r3}
 8021d1c:	469e      	mov	lr, r3
 8021d1e:	4770      	bx	lr

08021d20 <__time_veneer>:
 8021d20:	e51ff004 	ldr	pc, [pc, #-4]	; 8021d24 <__time_veneer+0x4>
 8021d24:	200005bc 	.word	0x200005bc
